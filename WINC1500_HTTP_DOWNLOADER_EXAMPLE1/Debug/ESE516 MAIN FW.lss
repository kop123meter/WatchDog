
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002b67c  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0003d67c  0003d67c  0002d67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000308  20000000  0003d684  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000057fc  20000310  0003d9a0  00030310  2**4
                  ALLOC
  4 .stack        00002004  20005b0c  0004319c  00030310  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
  7 .debug_info   0013134c  00000000  00000000  00030389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010d74  00000000  00000000  001616d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000176ff  00000000  00000000  00172449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003e88  00000000  00000000  00189b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003b00  00000000  00000000  0018d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002aea3  00000000  00000000  001914d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0005f22e  00000000  00000000  001bc373  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c5923  00000000  00000000  0021b5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000eecc  00000000  00000000  002e0ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	10 7b 00 20 51 d3 02 00 49 d4 02 00 49 d4 02 00     .{. Q...I...I...
	...
   1202c:	fd c4 01 00 00 00 00 00 00 00 00 00 21 c6 01 00     ............!...
   1203c:	69 c6 01 00 49 d4 02 00 49 d4 02 00 49 d4 02 00     i...I...I...I...
   1204c:	45 94 02 00 71 89 02 00 49 d4 02 00 61 24 01 00     E...q...I...a$..
   1205c:	49 d4 02 00 a5 25 01 00 e9 9a 02 00 01 9b 02 00     I....%..........
   1206c:	19 9b 02 00 31 9b 02 00 49 9b 02 00 61 9b 02 00     ....1...I...a...
   1207c:	99 d2 02 00 ad d2 02 00 c1 d2 02 00 e9 a1 01 00     ................
   1208c:	fd a1 01 00 11 a2 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	e9 22 01 00 49 d4 02 00 25 24 01 00 49 d4 02 00     ."..I...%$..I...
   120ac:	49 d4 02 00 00 00 00 00                             I.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000310 	.word	0x20000310
   120d4:	00000000 	.word	0x00000000
   120d8:	0003d684 	.word	0x0003d684

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000314 	.word	0x20000314
   12108:	0003d684 	.word	0x0003d684
   1210c:	0003d684 	.word	0x0003d684
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	200045a4 	.word	0x200045a4
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	200045a8 	.word	0x200045a8
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	000285d1 	.word	0x000285d1

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00028625 	.word	0x00028625

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000380 	.word	0x20000380
   12598:	200045b0 	.word	0x200045b0
   1259c:	20000330 	.word	0x20000330
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	0001a195 	.word	0x0001a195
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	0001a137 	.word	0x0001a137
   12aa4:	0001a0d9 	.word	0x0001a0d9

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	0001a195 	.word	0x0001a195
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005a84 	.word	0x20005a84
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   12e40:	b5b0      	push	{r4, r5, r7, lr}
   12e42:	b084      	sub	sp, #16
   12e44:	af00      	add	r7, sp, #0
   12e46:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12e48:	230f      	movs	r3, #15
   12e4a:	18fc      	adds	r4, r7, r3
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	0018      	movs	r0, r3
   12e50:	4b20      	ldr	r3, [pc, #128]	; (12ed4 <bme680_init+0x94>)
   12e52:	4798      	blx	r3
   12e54:	0003      	movs	r3, r0
   12e56:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12e58:	230f      	movs	r3, #15
   12e5a:	18fb      	adds	r3, r7, r3
   12e5c:	781b      	ldrb	r3, [r3, #0]
   12e5e:	b25b      	sxtb	r3, r3
   12e60:	2b00      	cmp	r3, #0
   12e62:	d12e      	bne.n	12ec2 <bme680_init+0x82>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   12e64:	230f      	movs	r3, #15
   12e66:	18fc      	adds	r4, r7, r3
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	0018      	movs	r0, r3
   12e6c:	4b1a      	ldr	r3, [pc, #104]	; (12ed8 <bme680_init+0x98>)
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   12e74:	230f      	movs	r3, #15
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781b      	ldrb	r3, [r3, #0]
   12e7a:	b25b      	sxtb	r3, r3
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d120      	bne.n	12ec2 <bme680_init+0x82>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   12e80:	6879      	ldr	r1, [r7, #4]
   12e82:	230f      	movs	r3, #15
   12e84:	18fc      	adds	r4, r7, r3
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	2201      	movs	r2, #1
   12e8a:	20d0      	movs	r0, #208	; 0xd0
   12e8c:	4d13      	ldr	r5, [pc, #76]	; (12edc <bme680_init+0x9c>)
   12e8e:	47a8      	blx	r5
   12e90:	0003      	movs	r3, r0
   12e92:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   12e94:	230f      	movs	r3, #15
   12e96:	18fb      	adds	r3, r7, r3
   12e98:	781b      	ldrb	r3, [r3, #0]
   12e9a:	b25b      	sxtb	r3, r3
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d110      	bne.n	12ec2 <bme680_init+0x82>
				if (dev->chip_id == BME680_CHIP_ID) {
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	2b61      	cmp	r3, #97	; 0x61
   12ea6:	d108      	bne.n	12eba <bme680_init+0x7a>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
   12ea8:	230f      	movs	r3, #15
   12eaa:	18fc      	adds	r4, r7, r3
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	0018      	movs	r0, r3
   12eb0:	4b0b      	ldr	r3, [pc, #44]	; (12ee0 <bme680_init+0xa0>)
   12eb2:	4798      	blx	r3
   12eb4:	0003      	movs	r3, r0
   12eb6:	7023      	strb	r3, [r4, #0]
   12eb8:	e003      	b.n	12ec2 <bme680_init+0x82>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   12eba:	230f      	movs	r3, #15
   12ebc:	18fb      	adds	r3, r7, r3
   12ebe:	22fd      	movs	r2, #253	; 0xfd
   12ec0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return rslt;
   12ec2:	230f      	movs	r3, #15
   12ec4:	18fb      	adds	r3, r7, r3
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b25b      	sxtb	r3, r3
}
   12eca:	0018      	movs	r0, r3
   12ecc:	46bd      	mov	sp, r7
   12ece:	b004      	add	sp, #16
   12ed0:	bdb0      	pop	{r4, r5, r7, pc}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	0001482f 	.word	0x0001482f
   12ed8:	00013119 	.word	0x00013119
   12edc:	00012ee5 	.word	0x00012ee5
   12ee0:	00013951 	.word	0x00013951

00012ee4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   12ee4:	b5b0      	push	{r4, r5, r7, lr}
   12ee6:	b086      	sub	sp, #24
   12ee8:	af00      	add	r7, sp, #0
   12eea:	60b9      	str	r1, [r7, #8]
   12eec:	0011      	movs	r1, r2
   12eee:	607b      	str	r3, [r7, #4]
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	1c02      	adds	r2, r0, #0
   12ef6:	701a      	strb	r2, [r3, #0]
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	1c0a      	adds	r2, r1, #0
   12efe:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12f00:	2317      	movs	r3, #23
   12f02:	18fc      	adds	r4, r7, r3
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	0018      	movs	r0, r3
   12f08:	4b25      	ldr	r3, [pc, #148]	; (12fa0 <bme680_get_regs+0xbc>)
   12f0a:	4798      	blx	r3
   12f0c:	0003      	movs	r3, r0
   12f0e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12f10:	2317      	movs	r3, #23
   12f12:	18fb      	adds	r3, r7, r3
   12f14:	781b      	ldrb	r3, [r3, #0]
   12f16:	b25b      	sxtb	r3, r3
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d139      	bne.n	12f90 <bme680_get_regs+0xac>
		if (dev->intf == BME680_SPI_INTF) {
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	789b      	ldrb	r3, [r3, #2]
   12f20:	2b00      	cmp	r3, #0
   12f22:	d11a      	bne.n	12f5a <bme680_get_regs+0x76>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   12f24:	2317      	movs	r3, #23
   12f26:	18fc      	adds	r4, r7, r3
   12f28:	687a      	ldr	r2, [r7, #4]
   12f2a:	230f      	movs	r3, #15
   12f2c:	18fb      	adds	r3, r7, r3
   12f2e:	781b      	ldrb	r3, [r3, #0]
   12f30:	0011      	movs	r1, r2
   12f32:	0018      	movs	r0, r3
   12f34:	4b1b      	ldr	r3, [pc, #108]	; (12fa4 <bme680_get_regs+0xc0>)
   12f36:	4798      	blx	r3
   12f38:	0003      	movs	r3, r0
   12f3a:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK)
   12f3c:	2317      	movs	r3, #23
   12f3e:	18fb      	adds	r3, r7, r3
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	b25b      	sxtb	r3, r3
   12f44:	2b00      	cmp	r3, #0
   12f46:	d108      	bne.n	12f5a <bme680_get_regs+0x76>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   12f48:	230f      	movs	r3, #15
   12f4a:	18fb      	adds	r3, r7, r3
   12f4c:	220f      	movs	r2, #15
   12f4e:	18ba      	adds	r2, r7, r2
   12f50:	7812      	ldrb	r2, [r2, #0]
   12f52:	2180      	movs	r1, #128	; 0x80
   12f54:	4249      	negs	r1, r1
   12f56:	430a      	orrs	r2, r1
   12f58:	701a      	strb	r2, [r3, #0]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   12f5a:	687b      	ldr	r3, [r7, #4]
   12f5c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	7858      	ldrb	r0, [r3, #1]
   12f62:	230c      	movs	r3, #12
   12f64:	18fb      	adds	r3, r7, r3
   12f66:	881d      	ldrh	r5, [r3, #0]
   12f68:	68ba      	ldr	r2, [r7, #8]
   12f6a:	230f      	movs	r3, #15
   12f6c:	18fb      	adds	r3, r7, r3
   12f6e:	7819      	ldrb	r1, [r3, #0]
   12f70:	002b      	movs	r3, r5
   12f72:	47a0      	blx	r4
   12f74:	0003      	movs	r3, r0
   12f76:	0019      	movs	r1, r3
   12f78:	687b      	ldr	r3, [r7, #4]
   12f7a:	2254      	movs	r2, #84	; 0x54
   12f7c:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	2254      	movs	r2, #84	; 0x54
   12f82:	569b      	ldrsb	r3, [r3, r2]
   12f84:	2b00      	cmp	r3, #0
   12f86:	d003      	beq.n	12f90 <bme680_get_regs+0xac>
			rslt = BME680_E_COM_FAIL;
   12f88:	2317      	movs	r3, #23
   12f8a:	18fb      	adds	r3, r7, r3
   12f8c:	22fe      	movs	r2, #254	; 0xfe
   12f8e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   12f90:	2317      	movs	r3, #23
   12f92:	18fb      	adds	r3, r7, r3
   12f94:	781b      	ldrb	r3, [r3, #0]
   12f96:	b25b      	sxtb	r3, r3
}
   12f98:	0018      	movs	r0, r3
   12f9a:	46bd      	mov	sp, r7
   12f9c:	b006      	add	sp, #24
   12f9e:	bdb0      	pop	{r4, r5, r7, pc}
   12fa0:	0001482f 	.word	0x0001482f
   12fa4:	00014611 	.word	0x00014611

00012fa8 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   12fa8:	b5b0      	push	{r4, r5, r7, lr}
   12faa:	b090      	sub	sp, #64	; 0x40
   12fac:	af00      	add	r7, sp, #0
   12fae:	60f8      	str	r0, [r7, #12]
   12fb0:	60b9      	str	r1, [r7, #8]
   12fb2:	603b      	str	r3, [r7, #0]
   12fb4:	1dfb      	adds	r3, r7, #7
   12fb6:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   12fb8:	2314      	movs	r3, #20
   12fba:	18fb      	adds	r3, r7, r3
   12fbc:	0018      	movs	r0, r3
   12fbe:	2328      	movs	r3, #40	; 0x28
   12fc0:	001a      	movs	r2, r3
   12fc2:	2100      	movs	r1, #0
   12fc4:	4b51      	ldr	r3, [pc, #324]	; (1310c <bme680_set_regs+0x164>)
   12fc6:	4798      	blx	r3
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12fc8:	233f      	movs	r3, #63	; 0x3f
   12fca:	18fc      	adds	r4, r7, r3
   12fcc:	683b      	ldr	r3, [r7, #0]
   12fce:	0018      	movs	r0, r3
   12fd0:	4b4f      	ldr	r3, [pc, #316]	; (13110 <bme680_set_regs+0x168>)
   12fd2:	4798      	blx	r3
   12fd4:	0003      	movs	r3, r0
   12fd6:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12fd8:	233f      	movs	r3, #63	; 0x3f
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	781b      	ldrb	r3, [r3, #0]
   12fde:	b25b      	sxtb	r3, r3
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	d000      	beq.n	12fe6 <bme680_set_regs+0x3e>
   12fe4:	e08a      	b.n	130fc <bme680_set_regs+0x154>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   12fe6:	1dfb      	adds	r3, r7, #7
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d100      	bne.n	12ff0 <bme680_set_regs+0x48>
   12fee:	e07f      	b.n	130f0 <bme680_set_regs+0x148>
   12ff0:	1dfb      	adds	r3, r7, #7
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	2b13      	cmp	r3, #19
   12ff6:	d900      	bls.n	12ffa <bme680_set_regs+0x52>
   12ff8:	e07a      	b.n	130f0 <bme680_set_regs+0x148>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   12ffa:	233c      	movs	r3, #60	; 0x3c
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	2200      	movs	r2, #0
   13000:	801a      	strh	r2, [r3, #0]
   13002:	e045      	b.n	13090 <bme680_set_regs+0xe8>
				if (dev->intf == BME680_SPI_INTF) {
   13004:	683b      	ldr	r3, [r7, #0]
   13006:	789b      	ldrb	r3, [r3, #2]
   13008:	2b00      	cmp	r3, #0
   1300a:	d11f      	bne.n	1304c <bme680_set_regs+0xa4>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   1300c:	233c      	movs	r3, #60	; 0x3c
   1300e:	18fb      	adds	r3, r7, r3
   13010:	881b      	ldrh	r3, [r3, #0]
   13012:	68fa      	ldr	r2, [r7, #12]
   13014:	18d3      	adds	r3, r2, r3
   13016:	781b      	ldrb	r3, [r3, #0]
   13018:	223f      	movs	r2, #63	; 0x3f
   1301a:	18bc      	adds	r4, r7, r2
   1301c:	683a      	ldr	r2, [r7, #0]
   1301e:	0011      	movs	r1, r2
   13020:	0018      	movs	r0, r3
   13022:	4b3c      	ldr	r3, [pc, #240]	; (13114 <bme680_set_regs+0x16c>)
   13024:	4798      	blx	r3
   13026:	0003      	movs	r3, r0
   13028:	7023      	strb	r3, [r4, #0]
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   1302a:	233c      	movs	r3, #60	; 0x3c
   1302c:	18fb      	adds	r3, r7, r3
   1302e:	881b      	ldrh	r3, [r3, #0]
   13030:	005b      	lsls	r3, r3, #1
   13032:	223c      	movs	r2, #60	; 0x3c
   13034:	18ba      	adds	r2, r7, r2
   13036:	8812      	ldrh	r2, [r2, #0]
   13038:	68f9      	ldr	r1, [r7, #12]
   1303a:	188a      	adds	r2, r1, r2
   1303c:	7812      	ldrb	r2, [r2, #0]
   1303e:	217f      	movs	r1, #127	; 0x7f
   13040:	400a      	ands	r2, r1
   13042:	b2d1      	uxtb	r1, r2
   13044:	2214      	movs	r2, #20
   13046:	18ba      	adds	r2, r7, r2
   13048:	54d1      	strb	r1, [r2, r3]
   1304a:	e00c      	b.n	13066 <bme680_set_regs+0xbe>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   1304c:	233c      	movs	r3, #60	; 0x3c
   1304e:	18fb      	adds	r3, r7, r3
   13050:	881b      	ldrh	r3, [r3, #0]
   13052:	005b      	lsls	r3, r3, #1
   13054:	223c      	movs	r2, #60	; 0x3c
   13056:	18ba      	adds	r2, r7, r2
   13058:	8812      	ldrh	r2, [r2, #0]
   1305a:	68f9      	ldr	r1, [r7, #12]
   1305c:	188a      	adds	r2, r1, r2
   1305e:	7811      	ldrb	r1, [r2, #0]
   13060:	2214      	movs	r2, #20
   13062:	18ba      	adds	r2, r7, r2
   13064:	54d1      	strb	r1, [r2, r3]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   13066:	233c      	movs	r3, #60	; 0x3c
   13068:	18fb      	adds	r3, r7, r3
   1306a:	881b      	ldrh	r3, [r3, #0]
   1306c:	005b      	lsls	r3, r3, #1
   1306e:	3301      	adds	r3, #1
   13070:	223c      	movs	r2, #60	; 0x3c
   13072:	18ba      	adds	r2, r7, r2
   13074:	8812      	ldrh	r2, [r2, #0]
   13076:	68b9      	ldr	r1, [r7, #8]
   13078:	188a      	adds	r2, r1, r2
   1307a:	7811      	ldrb	r1, [r2, #0]
   1307c:	2214      	movs	r2, #20
   1307e:	18ba      	adds	r2, r7, r2
   13080:	54d1      	strb	r1, [r2, r3]
			for (index = 0; index < len; index++) {
   13082:	233c      	movs	r3, #60	; 0x3c
   13084:	18fb      	adds	r3, r7, r3
   13086:	881a      	ldrh	r2, [r3, #0]
   13088:	233c      	movs	r3, #60	; 0x3c
   1308a:	18fb      	adds	r3, r7, r3
   1308c:	3201      	adds	r2, #1
   1308e:	801a      	strh	r2, [r3, #0]
   13090:	1dfb      	adds	r3, r7, #7
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	b29b      	uxth	r3, r3
   13096:	223c      	movs	r2, #60	; 0x3c
   13098:	18ba      	adds	r2, r7, r2
   1309a:	8812      	ldrh	r2, [r2, #0]
   1309c:	429a      	cmp	r2, r3
   1309e:	d3b1      	bcc.n	13004 <bme680_set_regs+0x5c>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   130a0:	233f      	movs	r3, #63	; 0x3f
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	781b      	ldrb	r3, [r3, #0]
   130a6:	b25b      	sxtb	r3, r3
   130a8:	2b00      	cmp	r3, #0
   130aa:	d126      	bne.n	130fa <bme680_set_regs+0x152>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   130ac:	683b      	ldr	r3, [r7, #0]
   130ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   130b0:	683b      	ldr	r3, [r7, #0]
   130b2:	7858      	ldrb	r0, [r3, #1]
   130b4:	2314      	movs	r3, #20
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	7819      	ldrb	r1, [r3, #0]
   130ba:	1dfb      	adds	r3, r7, #7
   130bc:	781b      	ldrb	r3, [r3, #0]
   130be:	b29b      	uxth	r3, r3
   130c0:	18db      	adds	r3, r3, r3
   130c2:	b29b      	uxth	r3, r3
   130c4:	3b01      	subs	r3, #1
   130c6:	b29d      	uxth	r5, r3
   130c8:	2314      	movs	r3, #20
   130ca:	18fb      	adds	r3, r7, r3
   130cc:	1c5a      	adds	r2, r3, #1
   130ce:	002b      	movs	r3, r5
   130d0:	47a0      	blx	r4
   130d2:	0003      	movs	r3, r0
   130d4:	0019      	movs	r1, r3
   130d6:	683b      	ldr	r3, [r7, #0]
   130d8:	2254      	movs	r2, #84	; 0x54
   130da:	5499      	strb	r1, [r3, r2]
				if (dev->com_rslt != 0)
   130dc:	683b      	ldr	r3, [r7, #0]
   130de:	2254      	movs	r2, #84	; 0x54
   130e0:	569b      	ldrsb	r3, [r3, r2]
   130e2:	2b00      	cmp	r3, #0
   130e4:	d009      	beq.n	130fa <bme680_set_regs+0x152>
					rslt = BME680_E_COM_FAIL;
   130e6:	233f      	movs	r3, #63	; 0x3f
   130e8:	18fb      	adds	r3, r7, r3
   130ea:	22fe      	movs	r2, #254	; 0xfe
   130ec:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK) {
   130ee:	e004      	b.n	130fa <bme680_set_regs+0x152>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   130f0:	233f      	movs	r3, #63	; 0x3f
   130f2:	18fb      	adds	r3, r7, r3
   130f4:	22fc      	movs	r2, #252	; 0xfc
   130f6:	701a      	strb	r2, [r3, #0]
   130f8:	e000      	b.n	130fc <bme680_set_regs+0x154>
			if (rslt == BME680_OK) {
   130fa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return rslt;
   130fc:	233f      	movs	r3, #63	; 0x3f
   130fe:	18fb      	adds	r3, r7, r3
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	b25b      	sxtb	r3, r3
}
   13104:	0018      	movs	r0, r3
   13106:	46bd      	mov	sp, r7
   13108:	b010      	add	sp, #64	; 0x40
   1310a:	bdb0      	pop	{r4, r5, r7, pc}
   1310c:	0003796b 	.word	0x0003796b
   13110:	0001482f 	.word	0x0001482f
   13114:	00014611 	.word	0x00014611

00013118 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   13118:	b5b0      	push	{r4, r5, r7, lr}
   1311a:	b084      	sub	sp, #16
   1311c:	af00      	add	r7, sp, #0
   1311e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   13120:	230e      	movs	r3, #14
   13122:	18fb      	adds	r3, r7, r3
   13124:	22e0      	movs	r2, #224	; 0xe0
   13126:	701a      	strb	r2, [r3, #0]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   13128:	230d      	movs	r3, #13
   1312a:	18fb      	adds	r3, r7, r3
   1312c:	22b6      	movs	r2, #182	; 0xb6
   1312e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13130:	230f      	movs	r3, #15
   13132:	18fc      	adds	r4, r7, r3
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b22      	ldr	r3, [pc, #136]	; (131c4 <bme680_soft_reset+0xac>)
   1313a:	4798      	blx	r3
   1313c:	0003      	movs	r3, r0
   1313e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13140:	230f      	movs	r3, #15
   13142:	18fb      	adds	r3, r7, r3
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	b25b      	sxtb	r3, r3
   13148:	2b00      	cmp	r3, #0
   1314a:	d133      	bne.n	131b4 <bme680_soft_reset+0x9c>
		if (dev->intf == BME680_SPI_INTF)
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	789b      	ldrb	r3, [r3, #2]
   13150:	2b00      	cmp	r3, #0
   13152:	d107      	bne.n	13164 <bme680_soft_reset+0x4c>
			rslt = get_mem_page(dev);
   13154:	230f      	movs	r3, #15
   13156:	18fc      	adds	r4, r7, r3
   13158:	687b      	ldr	r3, [r7, #4]
   1315a:	0018      	movs	r0, r3
   1315c:	4b1a      	ldr	r3, [pc, #104]	; (131c8 <bme680_soft_reset+0xb0>)
   1315e:	4798      	blx	r3
   13160:	0003      	movs	r3, r0
   13162:	7023      	strb	r3, [r4, #0]

		/* Reset the device */
		if (rslt == BME680_OK) {
   13164:	230f      	movs	r3, #15
   13166:	18fb      	adds	r3, r7, r3
   13168:	781b      	ldrb	r3, [r3, #0]
   1316a:	b25b      	sxtb	r3, r3
   1316c:	2b00      	cmp	r3, #0
   1316e:	d121      	bne.n	131b4 <bme680_soft_reset+0x9c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   13170:	230f      	movs	r3, #15
   13172:	18fc      	adds	r4, r7, r3
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	220d      	movs	r2, #13
   13178:	18b9      	adds	r1, r7, r2
   1317a:	220e      	movs	r2, #14
   1317c:	18b8      	adds	r0, r7, r2
   1317e:	2201      	movs	r2, #1
   13180:	4d12      	ldr	r5, [pc, #72]	; (131cc <bme680_soft_reset+0xb4>)
   13182:	47a8      	blx	r5
   13184:	0003      	movs	r3, r0
   13186:	7023      	strb	r3, [r4, #0]
			/* Wait for 5ms */
			dev->delay_ms_bme(BME680_RESET_PERIOD);
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1318c:	200a      	movs	r0, #10
   1318e:	4798      	blx	r3

			if (rslt == BME680_OK) {
   13190:	230f      	movs	r3, #15
   13192:	18fb      	adds	r3, r7, r3
   13194:	781b      	ldrb	r3, [r3, #0]
   13196:	b25b      	sxtb	r3, r3
   13198:	2b00      	cmp	r3, #0
   1319a:	d10b      	bne.n	131b4 <bme680_soft_reset+0x9c>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   1319c:	687b      	ldr	r3, [r7, #4]
   1319e:	789b      	ldrb	r3, [r3, #2]
   131a0:	2b00      	cmp	r3, #0
   131a2:	d107      	bne.n	131b4 <bme680_soft_reset+0x9c>
					rslt = get_mem_page(dev);
   131a4:	230f      	movs	r3, #15
   131a6:	18fc      	adds	r4, r7, r3
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	0018      	movs	r0, r3
   131ac:	4b06      	ldr	r3, [pc, #24]	; (131c8 <bme680_soft_reset+0xb0>)
   131ae:	4798      	blx	r3
   131b0:	0003      	movs	r3, r0
   131b2:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return rslt;
   131b4:	230f      	movs	r3, #15
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	781b      	ldrb	r3, [r3, #0]
   131ba:	b25b      	sxtb	r3, r3
}
   131bc:	0018      	movs	r0, r3
   131be:	46bd      	mov	sp, r7
   131c0:	b004      	add	sp, #16
   131c2:	bdb0      	pop	{r4, r5, r7, pc}
   131c4:	0001482f 	.word	0x0001482f
   131c8:	0001471d 	.word	0x0001471d
   131cc:	00012fa9 	.word	0x00012fa9

000131d0 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   131d0:	b5b0      	push	{r4, r5, r7, lr}
   131d2:	b088      	sub	sp, #32
   131d4:	af00      	add	r7, sp, #0
   131d6:	0002      	movs	r2, r0
   131d8:	6039      	str	r1, [r7, #0]
   131da:	1dbb      	adds	r3, r7, #6
   131dc:	801a      	strh	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   131de:	231b      	movs	r3, #27
   131e0:	18fb      	adds	r3, r7, r3
   131e2:	2200      	movs	r2, #0
   131e4:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
   131e6:	231e      	movs	r3, #30
   131e8:	18fb      	adds	r3, r7, r3
   131ea:	2200      	movs	r2, #0
   131ec:	701a      	strb	r2, [r3, #0]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131ee:	2314      	movs	r3, #20
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	0018      	movs	r0, r3
   131f4:	2306      	movs	r3, #6
   131f6:	001a      	movs	r2, r3
   131f8:	2100      	movs	r1, #0
   131fa:	4be7      	ldr	r3, [pc, #924]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   131fc:	4798      	blx	r3
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131fe:	230c      	movs	r3, #12
   13200:	18fb      	adds	r3, r7, r3
   13202:	0018      	movs	r0, r3
   13204:	2306      	movs	r3, #6
   13206:	001a      	movs	r2, r3
   13208:	2100      	movs	r1, #0
   1320a:	4be3      	ldr	r3, [pc, #908]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   1320c:	4798      	blx	r3
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   1320e:	231d      	movs	r3, #29
   13210:	18fb      	adds	r3, r7, r3
   13212:	683a      	ldr	r2, [r7, #0]
   13214:	2144      	movs	r1, #68	; 0x44
   13216:	5c52      	ldrb	r2, [r2, r1]
   13218:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1321a:	231f      	movs	r3, #31
   1321c:	18fc      	adds	r4, r7, r3
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	0018      	movs	r0, r3
   13222:	4bde      	ldr	r3, [pc, #888]	; (1359c <bme680_set_sensor_settings+0x3cc>)
   13224:	4798      	blx	r3
   13226:	0003      	movs	r3, r0
   13228:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1322a:	231f      	movs	r3, #31
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	b25b      	sxtb	r3, r3
   13232:	2b00      	cmp	r3, #0
   13234:	d000      	beq.n	13238 <bme680_set_sensor_settings+0x68>
   13236:	e249      	b.n	136cc <bme680_set_sensor_settings+0x4fc>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   13238:	1dbb      	adds	r3, r7, #6
   1323a:	881b      	ldrh	r3, [r3, #0]
   1323c:	2208      	movs	r2, #8
   1323e:	4013      	ands	r3, r2
   13240:	d007      	beq.n	13252 <bme680_set_sensor_settings+0x82>
			rslt = set_gas_config(dev);
   13242:	231f      	movs	r3, #31
   13244:	18fc      	adds	r4, r7, r3
   13246:	683b      	ldr	r3, [r7, #0]
   13248:	0018      	movs	r0, r3
   1324a:	4bd5      	ldr	r3, [pc, #852]	; (135a0 <bme680_set_sensor_settings+0x3d0>)
   1324c:	4798      	blx	r3
   1324e:	0003      	movs	r3, r0
   13250:	7023      	strb	r3, [r4, #0]

		dev->power_mode = BME680_SLEEP_MODE;
   13252:	683b      	ldr	r3, [r7, #0]
   13254:	2244      	movs	r2, #68	; 0x44
   13256:	2100      	movs	r1, #0
   13258:	5499      	strb	r1, [r3, r2]
		if (rslt == BME680_OK)
   1325a:	231f      	movs	r3, #31
   1325c:	18fb      	adds	r3, r7, r3
   1325e:	781b      	ldrb	r3, [r3, #0]
   13260:	b25b      	sxtb	r3, r3
   13262:	2b00      	cmp	r3, #0
   13264:	d107      	bne.n	13276 <bme680_set_sensor_settings+0xa6>
			rslt = bme680_set_sensor_mode(dev);
   13266:	231f      	movs	r3, #31
   13268:	18fc      	adds	r4, r7, r3
   1326a:	683b      	ldr	r3, [r7, #0]
   1326c:	0018      	movs	r0, r3
   1326e:	4bcd      	ldr	r3, [pc, #820]	; (135a4 <bme680_set_sensor_settings+0x3d4>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	7023      	strb	r3, [r4, #0]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   13276:	1dbb      	adds	r3, r7, #6
   13278:	881b      	ldrh	r3, [r3, #0]
   1327a:	2210      	movs	r2, #16
   1327c:	4013      	ands	r3, r2
   1327e:	d056      	beq.n	1332e <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	333b      	adds	r3, #59	; 0x3b
   13284:	0018      	movs	r0, r3
   13286:	231f      	movs	r3, #31
   13288:	18fc      	adds	r4, r7, r3
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	2207      	movs	r2, #7
   1328e:	2100      	movs	r1, #0
   13290:	4dc5      	ldr	r5, [pc, #788]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   13292:	47a8      	blx	r5
   13294:	0003      	movs	r3, r0
   13296:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
   13298:	231c      	movs	r3, #28
   1329a:	18fb      	adds	r3, r7, r3
   1329c:	2275      	movs	r2, #117	; 0x75
   1329e:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   132a0:	231f      	movs	r3, #31
   132a2:	18fb      	adds	r3, r7, r3
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	b25b      	sxtb	r3, r3
   132a8:	2b00      	cmp	r3, #0
   132aa:	d10d      	bne.n	132c8 <bme680_set_sensor_settings+0xf8>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   132ac:	231f      	movs	r3, #31
   132ae:	18fc      	adds	r4, r7, r3
   132b0:	683a      	ldr	r2, [r7, #0]
   132b2:	231b      	movs	r3, #27
   132b4:	18f9      	adds	r1, r7, r3
   132b6:	231c      	movs	r3, #28
   132b8:	18fb      	adds	r3, r7, r3
   132ba:	7818      	ldrb	r0, [r3, #0]
   132bc:	0013      	movs	r3, r2
   132be:	2201      	movs	r2, #1
   132c0:	4dba      	ldr	r5, [pc, #744]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   132c2:	47a8      	blx	r5
   132c4:	0003      	movs	r3, r0
   132c6:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_FILTER_SEL)
   132c8:	1dbb      	adds	r3, r7, #6
   132ca:	881b      	ldrh	r3, [r3, #0]
   132cc:	2210      	movs	r2, #16
   132ce:	4013      	ands	r3, r2
   132d0:	d014      	beq.n	132fc <bme680_set_sensor_settings+0x12c>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   132d2:	231b      	movs	r3, #27
   132d4:	18fb      	adds	r3, r7, r3
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b25b      	sxtb	r3, r3
   132da:	221c      	movs	r2, #28
   132dc:	4393      	bics	r3, r2
   132de:	b25a      	sxtb	r2, r3
   132e0:	683b      	ldr	r3, [r7, #0]
   132e2:	213b      	movs	r1, #59	; 0x3b
   132e4:	5c5b      	ldrb	r3, [r3, r1]
   132e6:	009b      	lsls	r3, r3, #2
   132e8:	b25b      	sxtb	r3, r3
   132ea:	211c      	movs	r1, #28
   132ec:	400b      	ands	r3, r1
   132ee:	b25b      	sxtb	r3, r3
   132f0:	4313      	orrs	r3, r2
   132f2:	b25b      	sxtb	r3, r3
   132f4:	b2da      	uxtb	r2, r3
   132f6:	231b      	movs	r3, #27
   132f8:	18fb      	adds	r3, r7, r3
   132fa:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   132fc:	231e      	movs	r3, #30
   132fe:	18fb      	adds	r3, r7, r3
   13300:	781b      	ldrb	r3, [r3, #0]
   13302:	2214      	movs	r2, #20
   13304:	18ba      	adds	r2, r7, r2
   13306:	211c      	movs	r1, #28
   13308:	1879      	adds	r1, r7, r1
   1330a:	7809      	ldrb	r1, [r1, #0]
   1330c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1330e:	231e      	movs	r3, #30
   13310:	18fb      	adds	r3, r7, r3
   13312:	781b      	ldrb	r3, [r3, #0]
   13314:	221b      	movs	r2, #27
   13316:	18ba      	adds	r2, r7, r2
   13318:	7811      	ldrb	r1, [r2, #0]
   1331a:	220c      	movs	r2, #12
   1331c:	18ba      	adds	r2, r7, r2
   1331e:	54d1      	strb	r1, [r2, r3]
			count++;
   13320:	231e      	movs	r3, #30
   13322:	18fb      	adds	r3, r7, r3
   13324:	781a      	ldrb	r2, [r3, #0]
   13326:	231e      	movs	r3, #30
   13328:	18fb      	adds	r3, r7, r3
   1332a:	3201      	adds	r2, #1
   1332c:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   1332e:	1dbb      	adds	r3, r7, #6
   13330:	881b      	ldrh	r3, [r3, #0]
   13332:	2220      	movs	r2, #32
   13334:	4013      	ands	r3, r2
   13336:	d050      	beq.n	133da <bme680_set_sensor_settings+0x20a>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   13338:	683b      	ldr	r3, [r7, #0]
   1333a:	333d      	adds	r3, #61	; 0x3d
   1333c:	0018      	movs	r0, r3
   1333e:	231f      	movs	r3, #31
   13340:	18fc      	adds	r4, r7, r3
   13342:	683b      	ldr	r3, [r7, #0]
   13344:	2208      	movs	r2, #8
   13346:	2100      	movs	r1, #0
   13348:	4d97      	ldr	r5, [pc, #604]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1334a:	47a8      	blx	r5
   1334c:	0003      	movs	r3, r0
   1334e:	7023      	strb	r3, [r4, #0]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
   13350:	231c      	movs	r3, #28
   13352:	18fb      	adds	r3, r7, r3
   13354:	2270      	movs	r2, #112	; 0x70
   13356:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13358:	231f      	movs	r3, #31
   1335a:	18fb      	adds	r3, r7, r3
   1335c:	781b      	ldrb	r3, [r3, #0]
   1335e:	b25b      	sxtb	r3, r3
   13360:	2b00      	cmp	r3, #0
   13362:	d10d      	bne.n	13380 <bme680_set_sensor_settings+0x1b0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13364:	231f      	movs	r3, #31
   13366:	18fc      	adds	r4, r7, r3
   13368:	683a      	ldr	r2, [r7, #0]
   1336a:	231b      	movs	r3, #27
   1336c:	18f9      	adds	r1, r7, r3
   1336e:	231c      	movs	r3, #28
   13370:	18fb      	adds	r3, r7, r3
   13372:	7818      	ldrb	r0, [r3, #0]
   13374:	0013      	movs	r3, r2
   13376:	2201      	movs	r2, #1
   13378:	4d8c      	ldr	r5, [pc, #560]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1337a:	47a8      	blx	r5
   1337c:	0003      	movs	r3, r0
   1337e:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   13380:	231b      	movs	r3, #27
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	b25b      	sxtb	r3, r3
   13388:	2208      	movs	r2, #8
   1338a:	4393      	bics	r3, r2
   1338c:	b25a      	sxtb	r2, r3
   1338e:	683b      	ldr	r3, [r7, #0]
   13390:	213d      	movs	r1, #61	; 0x3d
   13392:	5c5b      	ldrb	r3, [r3, r1]
   13394:	b25b      	sxtb	r3, r3
   13396:	2108      	movs	r1, #8
   13398:	400b      	ands	r3, r1
   1339a:	b25b      	sxtb	r3, r3
   1339c:	4313      	orrs	r3, r2
   1339e:	b25b      	sxtb	r3, r3
   133a0:	b2da      	uxtb	r2, r3
   133a2:	231b      	movs	r3, #27
   133a4:	18fb      	adds	r3, r7, r3
   133a6:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   133a8:	231e      	movs	r3, #30
   133aa:	18fb      	adds	r3, r7, r3
   133ac:	781b      	ldrb	r3, [r3, #0]
   133ae:	2214      	movs	r2, #20
   133b0:	18ba      	adds	r2, r7, r2
   133b2:	211c      	movs	r1, #28
   133b4:	1879      	adds	r1, r7, r1
   133b6:	7809      	ldrb	r1, [r1, #0]
   133b8:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   133ba:	231e      	movs	r3, #30
   133bc:	18fb      	adds	r3, r7, r3
   133be:	781b      	ldrb	r3, [r3, #0]
   133c0:	221b      	movs	r2, #27
   133c2:	18ba      	adds	r2, r7, r2
   133c4:	7811      	ldrb	r1, [r2, #0]
   133c6:	220c      	movs	r2, #12
   133c8:	18ba      	adds	r2, r7, r2
   133ca:	54d1      	strb	r1, [r2, r3]
			count++;
   133cc:	231e      	movs	r3, #30
   133ce:	18fb      	adds	r3, r7, r3
   133d0:	781a      	ldrb	r2, [r3, #0]
   133d2:	231e      	movs	r3, #30
   133d4:	18fb      	adds	r3, r7, r3
   133d6:	3201      	adds	r2, #1
   133d8:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   133da:	1dbb      	adds	r3, r7, #6
   133dc:	881b      	ldrh	r3, [r3, #0]
   133de:	2203      	movs	r2, #3
   133e0:	4013      	ands	r3, r2
   133e2:	d06d      	beq.n	134c0 <bme680_set_sensor_settings+0x2f0>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   133e4:	683b      	ldr	r3, [r7, #0]
   133e6:	3339      	adds	r3, #57	; 0x39
   133e8:	0018      	movs	r0, r3
   133ea:	231f      	movs	r3, #31
   133ec:	18fc      	adds	r4, r7, r3
   133ee:	683b      	ldr	r3, [r7, #0]
   133f0:	2205      	movs	r2, #5
   133f2:	2100      	movs	r1, #0
   133f4:	4d6c      	ldr	r5, [pc, #432]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   133f6:	47a8      	blx	r5
   133f8:	0003      	movs	r3, r0
   133fa:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
   133fc:	231c      	movs	r3, #28
   133fe:	18fb      	adds	r3, r7, r3
   13400:	2274      	movs	r2, #116	; 0x74
   13402:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13404:	231f      	movs	r3, #31
   13406:	18fb      	adds	r3, r7, r3
   13408:	781b      	ldrb	r3, [r3, #0]
   1340a:	b25b      	sxtb	r3, r3
   1340c:	2b00      	cmp	r3, #0
   1340e:	d10d      	bne.n	1342c <bme680_set_sensor_settings+0x25c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13410:	231f      	movs	r3, #31
   13412:	18fc      	adds	r4, r7, r3
   13414:	683a      	ldr	r2, [r7, #0]
   13416:	231b      	movs	r3, #27
   13418:	18f9      	adds	r1, r7, r3
   1341a:	231c      	movs	r3, #28
   1341c:	18fb      	adds	r3, r7, r3
   1341e:	7818      	ldrb	r0, [r3, #0]
   13420:	0013      	movs	r3, r2
   13422:	2201      	movs	r2, #1
   13424:	4d61      	ldr	r5, [pc, #388]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   13426:	47a8      	blx	r5
   13428:	0003      	movs	r3, r0
   1342a:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_OST_SEL)
   1342c:	1dbb      	adds	r3, r7, #6
   1342e:	881b      	ldrh	r3, [r3, #0]
   13430:	2201      	movs	r2, #1
   13432:	4013      	ands	r3, r2
   13434:	d011      	beq.n	1345a <bme680_set_sensor_settings+0x28a>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   13436:	231b      	movs	r3, #27
   13438:	18fb      	adds	r3, r7, r3
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	b25b      	sxtb	r3, r3
   1343e:	221f      	movs	r2, #31
   13440:	4013      	ands	r3, r2
   13442:	b25a      	sxtb	r2, r3
   13444:	683b      	ldr	r3, [r7, #0]
   13446:	2139      	movs	r1, #57	; 0x39
   13448:	5c5b      	ldrb	r3, [r3, r1]
   1344a:	015b      	lsls	r3, r3, #5
   1344c:	b25b      	sxtb	r3, r3
   1344e:	4313      	orrs	r3, r2
   13450:	b25b      	sxtb	r3, r3
   13452:	b2da      	uxtb	r2, r3
   13454:	231b      	movs	r3, #27
   13456:	18fb      	adds	r3, r7, r3
   13458:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_OSP_SEL)
   1345a:	1dbb      	adds	r3, r7, #6
   1345c:	881b      	ldrh	r3, [r3, #0]
   1345e:	2202      	movs	r2, #2
   13460:	4013      	ands	r3, r2
   13462:	d014      	beq.n	1348e <bme680_set_sensor_settings+0x2be>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   13464:	231b      	movs	r3, #27
   13466:	18fb      	adds	r3, r7, r3
   13468:	781b      	ldrb	r3, [r3, #0]
   1346a:	b25b      	sxtb	r3, r3
   1346c:	221c      	movs	r2, #28
   1346e:	4393      	bics	r3, r2
   13470:	b25a      	sxtb	r2, r3
   13472:	683b      	ldr	r3, [r7, #0]
   13474:	213a      	movs	r1, #58	; 0x3a
   13476:	5c5b      	ldrb	r3, [r3, r1]
   13478:	009b      	lsls	r3, r3, #2
   1347a:	b25b      	sxtb	r3, r3
   1347c:	211c      	movs	r1, #28
   1347e:	400b      	ands	r3, r1
   13480:	b25b      	sxtb	r3, r3
   13482:	4313      	orrs	r3, r2
   13484:	b25b      	sxtb	r3, r3
   13486:	b2da      	uxtb	r2, r3
   13488:	231b      	movs	r3, #27
   1348a:	18fb      	adds	r3, r7, r3
   1348c:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr;
   1348e:	231e      	movs	r3, #30
   13490:	18fb      	adds	r3, r7, r3
   13492:	781b      	ldrb	r3, [r3, #0]
   13494:	2214      	movs	r2, #20
   13496:	18ba      	adds	r2, r7, r2
   13498:	211c      	movs	r1, #28
   1349a:	1879      	adds	r1, r7, r1
   1349c:	7809      	ldrb	r1, [r1, #0]
   1349e:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   134a0:	231e      	movs	r3, #30
   134a2:	18fb      	adds	r3, r7, r3
   134a4:	781b      	ldrb	r3, [r3, #0]
   134a6:	221b      	movs	r2, #27
   134a8:	18ba      	adds	r2, r7, r2
   134aa:	7811      	ldrb	r1, [r2, #0]
   134ac:	220c      	movs	r2, #12
   134ae:	18ba      	adds	r2, r7, r2
   134b0:	54d1      	strb	r1, [r2, r3]
			count++;
   134b2:	231e      	movs	r3, #30
   134b4:	18fb      	adds	r3, r7, r3
   134b6:	781a      	ldrb	r2, [r3, #0]
   134b8:	231e      	movs	r3, #30
   134ba:	18fb      	adds	r3, r7, r3
   134bc:	3201      	adds	r2, #1
   134be:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   134c0:	1dbb      	adds	r3, r7, #6
   134c2:	881b      	ldrh	r3, [r3, #0]
   134c4:	2204      	movs	r2, #4
   134c6:	4013      	ands	r3, r2
   134c8:	d050      	beq.n	1356c <bme680_set_sensor_settings+0x39c>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	3338      	adds	r3, #56	; 0x38
   134ce:	0018      	movs	r0, r3
   134d0:	231f      	movs	r3, #31
   134d2:	18fc      	adds	r4, r7, r3
   134d4:	683b      	ldr	r3, [r7, #0]
   134d6:	2205      	movs	r2, #5
   134d8:	2100      	movs	r1, #0
   134da:	4d33      	ldr	r5, [pc, #204]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   134dc:	47a8      	blx	r5
   134de:	0003      	movs	r3, r0
   134e0:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_OS_H_ADDR;
   134e2:	231c      	movs	r3, #28
   134e4:	18fb      	adds	r3, r7, r3
   134e6:	2272      	movs	r2, #114	; 0x72
   134e8:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   134ea:	231f      	movs	r3, #31
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	b25b      	sxtb	r3, r3
   134f2:	2b00      	cmp	r3, #0
   134f4:	d10d      	bne.n	13512 <bme680_set_sensor_settings+0x342>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   134f6:	231f      	movs	r3, #31
   134f8:	18fc      	adds	r4, r7, r3
   134fa:	683a      	ldr	r2, [r7, #0]
   134fc:	231b      	movs	r3, #27
   134fe:	18f9      	adds	r1, r7, r3
   13500:	231c      	movs	r3, #28
   13502:	18fb      	adds	r3, r7, r3
   13504:	7818      	ldrb	r0, [r3, #0]
   13506:	0013      	movs	r3, r2
   13508:	2201      	movs	r2, #1
   1350a:	4d28      	ldr	r5, [pc, #160]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1350c:	47a8      	blx	r5
   1350e:	0003      	movs	r3, r0
   13510:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   13512:	231b      	movs	r3, #27
   13514:	18fb      	adds	r3, r7, r3
   13516:	781b      	ldrb	r3, [r3, #0]
   13518:	b25b      	sxtb	r3, r3
   1351a:	2207      	movs	r2, #7
   1351c:	4393      	bics	r3, r2
   1351e:	b25a      	sxtb	r2, r3
   13520:	683b      	ldr	r3, [r7, #0]
   13522:	2138      	movs	r1, #56	; 0x38
   13524:	5c5b      	ldrb	r3, [r3, r1]
   13526:	b25b      	sxtb	r3, r3
   13528:	2107      	movs	r1, #7
   1352a:	400b      	ands	r3, r1
   1352c:	b25b      	sxtb	r3, r3
   1352e:	4313      	orrs	r3, r2
   13530:	b25b      	sxtb	r3, r3
   13532:	b2da      	uxtb	r2, r3
   13534:	231b      	movs	r3, #27
   13536:	18fb      	adds	r3, r7, r3
   13538:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   1353a:	231e      	movs	r3, #30
   1353c:	18fb      	adds	r3, r7, r3
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	2214      	movs	r2, #20
   13542:	18ba      	adds	r2, r7, r2
   13544:	211c      	movs	r1, #28
   13546:	1879      	adds	r1, r7, r1
   13548:	7809      	ldrb	r1, [r1, #0]
   1354a:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1354c:	231e      	movs	r3, #30
   1354e:	18fb      	adds	r3, r7, r3
   13550:	781b      	ldrb	r3, [r3, #0]
   13552:	221b      	movs	r2, #27
   13554:	18ba      	adds	r2, r7, r2
   13556:	7811      	ldrb	r1, [r2, #0]
   13558:	220c      	movs	r2, #12
   1355a:	18ba      	adds	r2, r7, r2
   1355c:	54d1      	strb	r1, [r2, r3]
			count++;
   1355e:	231e      	movs	r3, #30
   13560:	18fb      	adds	r3, r7, r3
   13562:	781a      	ldrb	r2, [r3, #0]
   13564:	231e      	movs	r3, #30
   13566:	18fb      	adds	r3, r7, r3
   13568:	3201      	adds	r2, #1
   1356a:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   1356c:	1dbb      	adds	r3, r7, #6
   1356e:	881b      	ldrh	r3, [r3, #0]
   13570:	22c0      	movs	r2, #192	; 0xc0
   13572:	4013      	ands	r3, r2
   13574:	d100      	bne.n	13578 <bme680_set_sensor_settings+0x3a8>
   13576:	e08e      	b.n	13696 <bme680_set_sensor_settings+0x4c6>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   13578:	683b      	ldr	r3, [r7, #0]
   1357a:	333e      	adds	r3, #62	; 0x3e
   1357c:	0018      	movs	r0, r3
   1357e:	231f      	movs	r3, #31
   13580:	18fc      	adds	r4, r7, r3
   13582:	683b      	ldr	r3, [r7, #0]
   13584:	2201      	movs	r2, #1
   13586:	2100      	movs	r1, #0
   13588:	4d07      	ldr	r5, [pc, #28]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1358a:	47a8      	blx	r5
   1358c:	0003      	movs	r3, r0
   1358e:	7023      	strb	r3, [r4, #0]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   13590:	231f      	movs	r3, #31
   13592:	18fb      	adds	r3, r7, r3
   13594:	781b      	ldrb	r3, [r3, #0]
   13596:	e00b      	b.n	135b0 <bme680_set_sensor_settings+0x3e0>
   13598:	0003796b 	.word	0x0003796b
   1359c:	0001482f 	.word	0x0001482f
   135a0:	00013c5d 	.word	0x00013c5d
   135a4:	000136e9 	.word	0x000136e9
   135a8:	00014795 	.word	0x00014795
   135ac:	00012ee5 	.word	0x00012ee5
   135b0:	b25b      	sxtb	r3, r3
   135b2:	2b00      	cmp	r3, #0
   135b4:	d10b      	bne.n	135ce <bme680_set_sensor_settings+0x3fe>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   135b6:	683b      	ldr	r3, [r7, #0]
   135b8:	333c      	adds	r3, #60	; 0x3c
   135ba:	0018      	movs	r0, r3
   135bc:	231f      	movs	r3, #31
   135be:	18fc      	adds	r4, r7, r3
   135c0:	683b      	ldr	r3, [r7, #0]
   135c2:	220a      	movs	r2, #10
   135c4:	2100      	movs	r1, #0
   135c6:	4d45      	ldr	r5, [pc, #276]	; (136dc <bme680_set_sensor_settings+0x50c>)
   135c8:	47a8      	blx	r5
   135ca:	0003      	movs	r3, r0
   135cc:	7023      	strb	r3, [r4, #0]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
   135ce:	231c      	movs	r3, #28
   135d0:	18fb      	adds	r3, r7, r3
   135d2:	2271      	movs	r2, #113	; 0x71
   135d4:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   135d6:	231f      	movs	r3, #31
   135d8:	18fb      	adds	r3, r7, r3
   135da:	781b      	ldrb	r3, [r3, #0]
   135dc:	b25b      	sxtb	r3, r3
   135de:	2b00      	cmp	r3, #0
   135e0:	d10d      	bne.n	135fe <bme680_set_sensor_settings+0x42e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   135e2:	231f      	movs	r3, #31
   135e4:	18fc      	adds	r4, r7, r3
   135e6:	683a      	ldr	r2, [r7, #0]
   135e8:	231b      	movs	r3, #27
   135ea:	18f9      	adds	r1, r7, r3
   135ec:	231c      	movs	r3, #28
   135ee:	18fb      	adds	r3, r7, r3
   135f0:	7818      	ldrb	r0, [r3, #0]
   135f2:	0013      	movs	r3, r2
   135f4:	2201      	movs	r2, #1
   135f6:	4d3a      	ldr	r5, [pc, #232]	; (136e0 <bme680_set_sensor_settings+0x510>)
   135f8:	47a8      	blx	r5
   135fa:	0003      	movs	r3, r0
   135fc:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_RUN_GAS_SEL)
   135fe:	1dbb      	adds	r3, r7, #6
   13600:	881b      	ldrh	r3, [r3, #0]
   13602:	2240      	movs	r2, #64	; 0x40
   13604:	4013      	ands	r3, r2
   13606:	d014      	beq.n	13632 <bme680_set_sensor_settings+0x462>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   13608:	231b      	movs	r3, #27
   1360a:	18fb      	adds	r3, r7, r3
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	b25b      	sxtb	r3, r3
   13610:	2210      	movs	r2, #16
   13612:	4393      	bics	r3, r2
   13614:	b25a      	sxtb	r2, r3
   13616:	683b      	ldr	r3, [r7, #0]
   13618:	213e      	movs	r1, #62	; 0x3e
   1361a:	5c5b      	ldrb	r3, [r3, r1]
   1361c:	011b      	lsls	r3, r3, #4
   1361e:	b25b      	sxtb	r3, r3
   13620:	2110      	movs	r1, #16
   13622:	400b      	ands	r3, r1
   13624:	b25b      	sxtb	r3, r3
   13626:	4313      	orrs	r3, r2
   13628:	b25b      	sxtb	r3, r3
   1362a:	b2da      	uxtb	r2, r3
   1362c:	231b      	movs	r3, #27
   1362e:	18fb      	adds	r3, r7, r3
   13630:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_NBCONV_SEL)
   13632:	1dbb      	adds	r3, r7, #6
   13634:	881b      	ldrh	r3, [r3, #0]
   13636:	2280      	movs	r2, #128	; 0x80
   13638:	4013      	ands	r3, r2
   1363a:	d013      	beq.n	13664 <bme680_set_sensor_settings+0x494>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   1363c:	231b      	movs	r3, #27
   1363e:	18fb      	adds	r3, r7, r3
   13640:	781b      	ldrb	r3, [r3, #0]
   13642:	b25b      	sxtb	r3, r3
   13644:	220f      	movs	r2, #15
   13646:	4393      	bics	r3, r2
   13648:	b25a      	sxtb	r2, r3
   1364a:	683b      	ldr	r3, [r7, #0]
   1364c:	213c      	movs	r1, #60	; 0x3c
   1364e:	5c5b      	ldrb	r3, [r3, r1]
   13650:	b25b      	sxtb	r3, r3
   13652:	210f      	movs	r1, #15
   13654:	400b      	ands	r3, r1
   13656:	b25b      	sxtb	r3, r3
   13658:	4313      	orrs	r3, r2
   1365a:	b25b      	sxtb	r3, r3
   1365c:	b2da      	uxtb	r2, r3
   1365e:	231b      	movs	r3, #27
   13660:	18fb      	adds	r3, r7, r3
   13662:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   13664:	231e      	movs	r3, #30
   13666:	18fb      	adds	r3, r7, r3
   13668:	781b      	ldrb	r3, [r3, #0]
   1366a:	2214      	movs	r2, #20
   1366c:	18ba      	adds	r2, r7, r2
   1366e:	211c      	movs	r1, #28
   13670:	1879      	adds	r1, r7, r1
   13672:	7809      	ldrb	r1, [r1, #0]
   13674:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   13676:	231e      	movs	r3, #30
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781b      	ldrb	r3, [r3, #0]
   1367c:	221b      	movs	r2, #27
   1367e:	18ba      	adds	r2, r7, r2
   13680:	7811      	ldrb	r1, [r2, #0]
   13682:	220c      	movs	r2, #12
   13684:	18ba      	adds	r2, r7, r2
   13686:	54d1      	strb	r1, [r2, r3]
			count++;
   13688:	231e      	movs	r3, #30
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	781a      	ldrb	r2, [r3, #0]
   1368e:	231e      	movs	r3, #30
   13690:	18fb      	adds	r3, r7, r3
   13692:	3201      	adds	r2, #1
   13694:	701a      	strb	r2, [r3, #0]
		}

		if (rslt == BME680_OK)
   13696:	231f      	movs	r3, #31
   13698:	18fb      	adds	r3, r7, r3
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	b25b      	sxtb	r3, r3
   1369e:	2b00      	cmp	r3, #0
   136a0:	d10e      	bne.n	136c0 <bme680_set_sensor_settings+0x4f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   136a2:	231f      	movs	r3, #31
   136a4:	18fc      	adds	r4, r7, r3
   136a6:	683d      	ldr	r5, [r7, #0]
   136a8:	231e      	movs	r3, #30
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781a      	ldrb	r2, [r3, #0]
   136ae:	230c      	movs	r3, #12
   136b0:	18f9      	adds	r1, r7, r3
   136b2:	2314      	movs	r3, #20
   136b4:	18f8      	adds	r0, r7, r3
   136b6:	002b      	movs	r3, r5
   136b8:	4d0a      	ldr	r5, [pc, #40]	; (136e4 <bme680_set_sensor_settings+0x514>)
   136ba:	47a8      	blx	r5
   136bc:	0003      	movs	r3, r0
   136be:	7023      	strb	r3, [r4, #0]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   136c0:	683b      	ldr	r3, [r7, #0]
   136c2:	221d      	movs	r2, #29
   136c4:	18ba      	adds	r2, r7, r2
   136c6:	2144      	movs	r1, #68	; 0x44
   136c8:	7812      	ldrb	r2, [r2, #0]
   136ca:	545a      	strb	r2, [r3, r1]
	}

	return rslt;
   136cc:	231f      	movs	r3, #31
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	781b      	ldrb	r3, [r3, #0]
   136d2:	b25b      	sxtb	r3, r3
}
   136d4:	0018      	movs	r0, r3
   136d6:	46bd      	mov	sp, r7
   136d8:	b008      	add	sp, #32
   136da:	bdb0      	pop	{r4, r5, r7, pc}
   136dc:	00014795 	.word	0x00014795
   136e0:	00012ee5 	.word	0x00012ee5
   136e4:	00012fa9 	.word	0x00012fa9

000136e8 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   136e8:	b5b0      	push	{r4, r5, r7, lr}
   136ea:	b084      	sub	sp, #16
   136ec:	af00      	add	r7, sp, #0
   136ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
   136f0:	230e      	movs	r3, #14
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	2200      	movs	r2, #0
   136f6:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   136f8:	230c      	movs	r3, #12
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	2274      	movs	r2, #116	; 0x74
   136fe:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13700:	230f      	movs	r3, #15
   13702:	18fc      	adds	r4, r7, r3
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	0018      	movs	r0, r3
   13708:	4b3c      	ldr	r3, [pc, #240]	; (137fc <bme680_set_sensor_mode+0x114>)
   1370a:	4798      	blx	r3
   1370c:	0003      	movs	r3, r0
   1370e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13710:	230f      	movs	r3, #15
   13712:	18fb      	adds	r3, r7, r3
   13714:	781b      	ldrb	r3, [r3, #0]
   13716:	b25b      	sxtb	r3, r3
   13718:	2b00      	cmp	r3, #0
   1371a:	d166      	bne.n	137ea <bme680_set_sensor_mode+0x102>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   1371c:	230f      	movs	r3, #15
   1371e:	18fc      	adds	r4, r7, r3
   13720:	687b      	ldr	r3, [r7, #4]
   13722:	220d      	movs	r2, #13
   13724:	18b9      	adds	r1, r7, r2
   13726:	2201      	movs	r2, #1
   13728:	2074      	movs	r0, #116	; 0x74
   1372a:	4d35      	ldr	r5, [pc, #212]	; (13800 <bme680_set_sensor_mode+0x118>)
   1372c:	47a8      	blx	r5
   1372e:	0003      	movs	r3, r0
   13730:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   13732:	230f      	movs	r3, #15
   13734:	18fb      	adds	r3, r7, r3
   13736:	781b      	ldrb	r3, [r3, #0]
   13738:	b25b      	sxtb	r3, r3
   1373a:	2b00      	cmp	r3, #0
   1373c:	d125      	bne.n	1378a <bme680_set_sensor_mode+0xa2>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   1373e:	230d      	movs	r3, #13
   13740:	18fb      	adds	r3, r7, r3
   13742:	781a      	ldrb	r2, [r3, #0]
   13744:	230e      	movs	r3, #14
   13746:	18fb      	adds	r3, r7, r3
   13748:	2103      	movs	r1, #3
   1374a:	400a      	ands	r2, r1
   1374c:	701a      	strb	r2, [r3, #0]

				if (pow_mode != BME680_SLEEP_MODE) {
   1374e:	230e      	movs	r3, #14
   13750:	18fb      	adds	r3, r7, r3
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	2b00      	cmp	r3, #0
   13756:	d018      	beq.n	1378a <bme680_set_sensor_mode+0xa2>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   13758:	230d      	movs	r3, #13
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	781b      	ldrb	r3, [r3, #0]
   1375e:	2203      	movs	r2, #3
   13760:	4393      	bics	r3, r2
   13762:	b2da      	uxtb	r2, r3
   13764:	230d      	movs	r3, #13
   13766:	18fb      	adds	r3, r7, r3
   13768:	701a      	strb	r2, [r3, #0]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   1376a:	230f      	movs	r3, #15
   1376c:	18fc      	adds	r4, r7, r3
   1376e:	687b      	ldr	r3, [r7, #4]
   13770:	220d      	movs	r2, #13
   13772:	18b9      	adds	r1, r7, r2
   13774:	220c      	movs	r2, #12
   13776:	18b8      	adds	r0, r7, r2
   13778:	2201      	movs	r2, #1
   1377a:	4d22      	ldr	r5, [pc, #136]	; (13804 <bme680_set_sensor_mode+0x11c>)
   1377c:	47a8      	blx	r5
   1377e:	0003      	movs	r3, r0
   13780:	7023      	strb	r3, [r4, #0]
					dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13786:	200a      	movs	r0, #10
   13788:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   1378a:	230e      	movs	r3, #14
   1378c:	18fb      	adds	r3, r7, r3
   1378e:	781b      	ldrb	r3, [r3, #0]
   13790:	2b00      	cmp	r3, #0
   13792:	d1c3      	bne.n	1371c <bme680_set_sensor_mode+0x34>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   13794:	687b      	ldr	r3, [r7, #4]
   13796:	2244      	movs	r2, #68	; 0x44
   13798:	5c9b      	ldrb	r3, [r3, r2]
   1379a:	2b00      	cmp	r3, #0
   1379c:	d025      	beq.n	137ea <bme680_set_sensor_mode+0x102>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   1379e:	230d      	movs	r3, #13
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	b25b      	sxtb	r3, r3
   137a6:	2203      	movs	r2, #3
   137a8:	4393      	bics	r3, r2
   137aa:	b25a      	sxtb	r2, r3
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	2144      	movs	r1, #68	; 0x44
   137b0:	5c5b      	ldrb	r3, [r3, r1]
   137b2:	b25b      	sxtb	r3, r3
   137b4:	2103      	movs	r1, #3
   137b6:	400b      	ands	r3, r1
   137b8:	b25b      	sxtb	r3, r3
   137ba:	4313      	orrs	r3, r2
   137bc:	b25b      	sxtb	r3, r3
   137be:	b2da      	uxtb	r2, r3
   137c0:	230d      	movs	r3, #13
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK)
   137c6:	230f      	movs	r3, #15
   137c8:	18fb      	adds	r3, r7, r3
   137ca:	781b      	ldrb	r3, [r3, #0]
   137cc:	b25b      	sxtb	r3, r3
   137ce:	2b00      	cmp	r3, #0
   137d0:	d10b      	bne.n	137ea <bme680_set_sensor_mode+0x102>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   137d2:	230f      	movs	r3, #15
   137d4:	18fc      	adds	r4, r7, r3
   137d6:	687b      	ldr	r3, [r7, #4]
   137d8:	220d      	movs	r2, #13
   137da:	18b9      	adds	r1, r7, r2
   137dc:	220c      	movs	r2, #12
   137de:	18b8      	adds	r0, r7, r2
   137e0:	2201      	movs	r2, #1
   137e2:	4d08      	ldr	r5, [pc, #32]	; (13804 <bme680_set_sensor_mode+0x11c>)
   137e4:	47a8      	blx	r5
   137e6:	0003      	movs	r3, r0
   137e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
   137ea:	230f      	movs	r3, #15
   137ec:	18fb      	adds	r3, r7, r3
   137ee:	781b      	ldrb	r3, [r3, #0]
   137f0:	b25b      	sxtb	r3, r3
}
   137f2:	0018      	movs	r0, r3
   137f4:	46bd      	mov	sp, r7
   137f6:	b004      	add	sp, #16
   137f8:	bdb0      	pop	{r4, r5, r7, pc}
   137fa:	46c0      	nop			; (mov r8, r8)
   137fc:	0001482f 	.word	0x0001482f
   13800:	00012ee5 	.word	0x00012ee5
   13804:	00012fa9 	.word	0x00012fa9

00013808 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   13808:	b580      	push	{r7, lr}
   1380a:	b086      	sub	sp, #24
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
   13810:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   13812:	2308      	movs	r3, #8
   13814:	18fb      	adds	r3, r7, r3
   13816:	4a2a      	ldr	r2, [pc, #168]	; (138c0 <bme680_get_profile_dur+0xb8>)
   13818:	6811      	ldr	r1, [r2, #0]
   1381a:	6019      	str	r1, [r3, #0]
   1381c:	8892      	ldrh	r2, [r2, #4]
   1381e:	809a      	strh	r2, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   13820:	683b      	ldr	r3, [r7, #0]
   13822:	2239      	movs	r2, #57	; 0x39
   13824:	5c9b      	ldrb	r3, [r3, r2]
   13826:	001a      	movs	r2, r3
   13828:	2308      	movs	r3, #8
   1382a:	18fb      	adds	r3, r7, r3
   1382c:	5c9b      	ldrb	r3, [r3, r2]
   1382e:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   13830:	683b      	ldr	r3, [r7, #0]
   13832:	223a      	movs	r2, #58	; 0x3a
   13834:	5c9b      	ldrb	r3, [r3, r2]
   13836:	001a      	movs	r2, r3
   13838:	2308      	movs	r3, #8
   1383a:	18fb      	adds	r3, r7, r3
   1383c:	5c9b      	ldrb	r3, [r3, r2]
   1383e:	001a      	movs	r2, r3
   13840:	697b      	ldr	r3, [r7, #20]
   13842:	189b      	adds	r3, r3, r2
   13844:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   13846:	683b      	ldr	r3, [r7, #0]
   13848:	2238      	movs	r2, #56	; 0x38
   1384a:	5c9b      	ldrb	r3, [r3, r2]
   1384c:	001a      	movs	r2, r3
   1384e:	2308      	movs	r3, #8
   13850:	18fb      	adds	r3, r7, r3
   13852:	5c9b      	ldrb	r3, [r3, r2]
   13854:	001a      	movs	r2, r3
   13856:	697b      	ldr	r3, [r7, #20]
   13858:	189b      	adds	r3, r3, r2
   1385a:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   1385c:	697b      	ldr	r3, [r7, #20]
   1385e:	4a19      	ldr	r2, [pc, #100]	; (138c4 <bme680_get_profile_dur+0xbc>)
   13860:	4353      	muls	r3, r2
   13862:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
   13864:	693b      	ldr	r3, [r7, #16]
   13866:	4a18      	ldr	r2, [pc, #96]	; (138c8 <bme680_get_profile_dur+0xc0>)
   13868:	4694      	mov	ip, r2
   1386a:	4463      	add	r3, ip
   1386c:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
   1386e:	693b      	ldr	r3, [r7, #16]
   13870:	4a16      	ldr	r2, [pc, #88]	; (138cc <bme680_get_profile_dur+0xc4>)
   13872:	4694      	mov	ip, r2
   13874:	4463      	add	r3, ip
   13876:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   13878:	693b      	ldr	r3, [r7, #16]
   1387a:	33f5      	adds	r3, #245	; 0xf5
   1387c:	33ff      	adds	r3, #255	; 0xff
   1387e:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   13880:	6938      	ldr	r0, [r7, #16]
   13882:	4b13      	ldr	r3, [pc, #76]	; (138d0 <bme680_get_profile_dur+0xc8>)
   13884:	22fa      	movs	r2, #250	; 0xfa
   13886:	0091      	lsls	r1, r2, #2
   13888:	4798      	blx	r3
   1388a:	0003      	movs	r3, r0
   1388c:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   1388e:	693b      	ldr	r3, [r7, #16]
   13890:	3301      	adds	r3, #1
   13892:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
   13894:	693b      	ldr	r3, [r7, #16]
   13896:	b29a      	uxth	r2, r3
   13898:	687b      	ldr	r3, [r7, #4]
   1389a:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   1389c:	683b      	ldr	r3, [r7, #0]
   1389e:	223e      	movs	r2, #62	; 0x3e
   138a0:	5c9b      	ldrb	r3, [r3, r2]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d008      	beq.n	138b8 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	881a      	ldrh	r2, [r3, #0]
   138aa:	683b      	ldr	r3, [r7, #0]
   138ac:	2142      	movs	r1, #66	; 0x42
   138ae:	5a5b      	ldrh	r3, [r3, r1]
   138b0:	18d3      	adds	r3, r2, r3
   138b2:	b29a      	uxth	r2, r3
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	801a      	strh	r2, [r3, #0]
	}
}
   138b8:	46c0      	nop			; (mov r8, r8)
   138ba:	46bd      	mov	sp, r7
   138bc:	b006      	add	sp, #24
   138be:	bd80      	pop	{r7, pc}
   138c0:	00038d48 	.word	0x00038d48
   138c4:	000007ab 	.word	0x000007ab
   138c8:	00000774 	.word	0x00000774
   138cc:	00000951 	.word	0x00000951
   138d0:	00034e35 	.word	0x00034e35

000138d4 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   138d4:	b590      	push	{r4, r7, lr}
   138d6:	b085      	sub	sp, #20
   138d8:	af00      	add	r7, sp, #0
   138da:	6078      	str	r0, [r7, #4]
   138dc:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   138de:	230f      	movs	r3, #15
   138e0:	18fc      	adds	r4, r7, r3
   138e2:	683b      	ldr	r3, [r7, #0]
   138e4:	0018      	movs	r0, r3
   138e6:	4b18      	ldr	r3, [pc, #96]	; (13948 <bme680_get_sensor_data+0x74>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   138ee:	230f      	movs	r3, #15
   138f0:	18fb      	adds	r3, r7, r3
   138f2:	781b      	ldrb	r3, [r3, #0]
   138f4:	b25b      	sxtb	r3, r3
   138f6:	2b00      	cmp	r3, #0
   138f8:	d11d      	bne.n	13936 <bme680_get_sensor_data+0x62>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
   138fa:	230f      	movs	r3, #15
   138fc:	18fc      	adds	r4, r7, r3
   138fe:	683a      	ldr	r2, [r7, #0]
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	0011      	movs	r1, r2
   13904:	0018      	movs	r0, r3
   13906:	4b11      	ldr	r3, [pc, #68]	; (1394c <bme680_get_sensor_data+0x78>)
   13908:	4798      	blx	r3
   1390a:	0003      	movs	r3, r0
   1390c:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   1390e:	230f      	movs	r3, #15
   13910:	18fb      	adds	r3, r7, r3
   13912:	781b      	ldrb	r3, [r3, #0]
   13914:	b25b      	sxtb	r3, r3
   13916:	2b00      	cmp	r3, #0
   13918:	d10d      	bne.n	13936 <bme680_get_sensor_data+0x62>
			if (data->status & BME680_NEW_DATA_MSK)
   1391a:	687b      	ldr	r3, [r7, #4]
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	b25b      	sxtb	r3, r3
   13920:	2b00      	cmp	r3, #0
   13922:	da04      	bge.n	1392e <bme680_get_sensor_data+0x5a>
				dev->new_fields = 1;
   13924:	683b      	ldr	r3, [r7, #0]
   13926:	2245      	movs	r2, #69	; 0x45
   13928:	2101      	movs	r1, #1
   1392a:	5499      	strb	r1, [r3, r2]
   1392c:	e003      	b.n	13936 <bme680_get_sensor_data+0x62>
			else
				dev->new_fields = 0;
   1392e:	683b      	ldr	r3, [r7, #0]
   13930:	2245      	movs	r2, #69	; 0x45
   13932:	2100      	movs	r1, #0
   13934:	5499      	strb	r1, [r3, r2]
		}
	}

	return rslt;
   13936:	230f      	movs	r3, #15
   13938:	18fb      	adds	r3, r7, r3
   1393a:	781b      	ldrb	r3, [r3, #0]
   1393c:	b25b      	sxtb	r3, r3
}
   1393e:	0018      	movs	r0, r3
   13940:	46bd      	mov	sp, r7
   13942:	b005      	add	sp, #20
   13944:	bd90      	pop	{r4, r7, pc}
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	0001482f 	.word	0x0001482f
   1394c:	00014405 	.word	0x00014405

00013950 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
   13950:	b5b0      	push	{r4, r5, r7, lr}
   13952:	b08e      	sub	sp, #56	; 0x38
   13954:	af00      	add	r7, sp, #0
   13956:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   13958:	230c      	movs	r3, #12
   1395a:	18fb      	adds	r3, r7, r3
   1395c:	0018      	movs	r0, r3
   1395e:	2329      	movs	r3, #41	; 0x29
   13960:	001a      	movs	r2, r3
   13962:	2100      	movs	r1, #0
   13964:	4bba      	ldr	r3, [pc, #744]	; (13c50 <get_calib_data+0x300>)
   13966:	4798      	blx	r3
	uint8_t temp_var = 0; /* Temporary variable */
   13968:	230b      	movs	r3, #11
   1396a:	18fb      	adds	r3, r7, r3
   1396c:	2200      	movs	r2, #0
   1396e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13970:	2337      	movs	r3, #55	; 0x37
   13972:	18fc      	adds	r4, r7, r3
   13974:	687b      	ldr	r3, [r7, #4]
   13976:	0018      	movs	r0, r3
   13978:	4bb6      	ldr	r3, [pc, #728]	; (13c54 <get_calib_data+0x304>)
   1397a:	4798      	blx	r3
   1397c:	0003      	movs	r3, r0
   1397e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13980:	2337      	movs	r3, #55	; 0x37
   13982:	18fb      	adds	r3, r7, r3
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	b25b      	sxtb	r3, r3
   13988:	2b00      	cmp	r3, #0
   1398a:	d000      	beq.n	1398e <get_calib_data+0x3e>
   1398c:	e157      	b.n	13c3e <get_calib_data+0x2ee>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   1398e:	2337      	movs	r3, #55	; 0x37
   13990:	18fc      	adds	r4, r7, r3
   13992:	687b      	ldr	r3, [r7, #4]
   13994:	220c      	movs	r2, #12
   13996:	18b9      	adds	r1, r7, r2
   13998:	2219      	movs	r2, #25
   1399a:	2089      	movs	r0, #137	; 0x89
   1399c:	4dae      	ldr	r5, [pc, #696]	; (13c58 <get_calib_data+0x308>)
   1399e:	47a8      	blx	r5
   139a0:	0003      	movs	r3, r0
   139a2:	7023      	strb	r3, [r4, #0]
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   139a4:	2337      	movs	r3, #55	; 0x37
   139a6:	18fb      	adds	r3, r7, r3
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	b25b      	sxtb	r3, r3
   139ac:	2b00      	cmp	r3, #0
   139ae:	d10d      	bne.n	139cc <get_calib_data+0x7c>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   139b0:	2337      	movs	r3, #55	; 0x37
   139b2:	18fc      	adds	r4, r7, r3
   139b4:	687a      	ldr	r2, [r7, #4]
   139b6:	230c      	movs	r3, #12
   139b8:	18fb      	adds	r3, r7, r3
   139ba:	3319      	adds	r3, #25
   139bc:	0019      	movs	r1, r3
   139be:	0013      	movs	r3, r2
   139c0:	2210      	movs	r2, #16
   139c2:	20e1      	movs	r0, #225	; 0xe1
   139c4:	4da4      	ldr	r5, [pc, #656]	; (13c58 <get_calib_data+0x308>)
   139c6:	47a8      	blx	r5
   139c8:	0003      	movs	r3, r0
   139ca:	7023      	strb	r3, [r4, #0]
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   139cc:	230c      	movs	r3, #12
   139ce:	18fb      	adds	r3, r7, r3
   139d0:	2222      	movs	r2, #34	; 0x22
   139d2:	5c9b      	ldrb	r3, [r3, r2]
   139d4:	021b      	lsls	r3, r3, #8
   139d6:	b21a      	sxth	r2, r3
   139d8:	230c      	movs	r3, #12
   139da:	18fb      	adds	r3, r7, r3
   139dc:	2121      	movs	r1, #33	; 0x21
   139de:	5c5b      	ldrb	r3, [r3, r1]
   139e0:	b21b      	sxth	r3, r3
   139e2:	4313      	orrs	r3, r2
   139e4:	b21b      	sxth	r3, r3
   139e6:	b29a      	uxth	r2, r3
   139e8:	687b      	ldr	r3, [r7, #4]
   139ea:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   139ec:	230c      	movs	r3, #12
   139ee:	18fb      	adds	r3, r7, r3
   139f0:	789b      	ldrb	r3, [r3, #2]
   139f2:	021b      	lsls	r3, r3, #8
   139f4:	b21a      	sxth	r2, r3
   139f6:	230c      	movs	r3, #12
   139f8:	18fb      	adds	r3, r7, r3
   139fa:	785b      	ldrb	r3, [r3, #1]
   139fc:	b21b      	sxth	r3, r3
   139fe:	4313      	orrs	r3, r2
   13a00:	b21a      	sxth	r2, r3
   13a02:	687b      	ldr	r3, [r7, #4]
   13a04:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   13a06:	230c      	movs	r3, #12
   13a08:	18fb      	adds	r3, r7, r3
   13a0a:	78db      	ldrb	r3, [r3, #3]
   13a0c:	b25a      	sxtb	r2, r3
   13a0e:	687b      	ldr	r3, [r7, #4]
   13a10:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   13a12:	230c      	movs	r3, #12
   13a14:	18fb      	adds	r3, r7, r3
   13a16:	799b      	ldrb	r3, [r3, #6]
   13a18:	021b      	lsls	r3, r3, #8
   13a1a:	b21a      	sxth	r2, r3
   13a1c:	230c      	movs	r3, #12
   13a1e:	18fb      	adds	r3, r7, r3
   13a20:	795b      	ldrb	r3, [r3, #5]
   13a22:	b21b      	sxth	r3, r3
   13a24:	4313      	orrs	r3, r2
   13a26:	b21b      	sxth	r3, r3
   13a28:	b29a      	uxth	r2, r3
   13a2a:	687b      	ldr	r3, [r7, #4]
   13a2c:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   13a2e:	230c      	movs	r3, #12
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	7a1b      	ldrb	r3, [r3, #8]
   13a34:	021b      	lsls	r3, r3, #8
   13a36:	b21a      	sxth	r2, r3
   13a38:	230c      	movs	r3, #12
   13a3a:	18fb      	adds	r3, r7, r3
   13a3c:	79db      	ldrb	r3, [r3, #7]
   13a3e:	b21b      	sxth	r3, r3
   13a40:	4313      	orrs	r3, r2
   13a42:	b21a      	sxth	r2, r3
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   13a48:	230c      	movs	r3, #12
   13a4a:	18fb      	adds	r3, r7, r3
   13a4c:	7a5b      	ldrb	r3, [r3, #9]
   13a4e:	b259      	sxtb	r1, r3
   13a50:	687b      	ldr	r3, [r7, #4]
   13a52:	2220      	movs	r2, #32
   13a54:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   13a56:	230c      	movs	r3, #12
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	7b1b      	ldrb	r3, [r3, #12]
   13a5c:	021b      	lsls	r3, r3, #8
   13a5e:	b21a      	sxth	r2, r3
   13a60:	230c      	movs	r3, #12
   13a62:	18fb      	adds	r3, r7, r3
   13a64:	7adb      	ldrb	r3, [r3, #11]
   13a66:	b21b      	sxth	r3, r3
   13a68:	4313      	orrs	r3, r2
   13a6a:	b21a      	sxth	r2, r3
   13a6c:	687b      	ldr	r3, [r7, #4]
   13a6e:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   13a70:	230c      	movs	r3, #12
   13a72:	18fb      	adds	r3, r7, r3
   13a74:	7b9b      	ldrb	r3, [r3, #14]
   13a76:	021b      	lsls	r3, r3, #8
   13a78:	b21a      	sxth	r2, r3
   13a7a:	230c      	movs	r3, #12
   13a7c:	18fb      	adds	r3, r7, r3
   13a7e:	7b5b      	ldrb	r3, [r3, #13]
   13a80:	b21b      	sxth	r3, r3
   13a82:	4313      	orrs	r3, r2
   13a84:	b21a      	sxth	r2, r3
   13a86:	687b      	ldr	r3, [r7, #4]
   13a88:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   13a8a:	230c      	movs	r3, #12
   13a8c:	18fb      	adds	r3, r7, r3
   13a8e:	7c1b      	ldrb	r3, [r3, #16]
   13a90:	b259      	sxtb	r1, r3
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	2226      	movs	r2, #38	; 0x26
   13a96:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   13a98:	230c      	movs	r3, #12
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	7bdb      	ldrb	r3, [r3, #15]
   13a9e:	b259      	sxtb	r1, r3
   13aa0:	687b      	ldr	r3, [r7, #4]
   13aa2:	2227      	movs	r2, #39	; 0x27
   13aa4:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   13aa6:	230c      	movs	r3, #12
   13aa8:	18fb      	adds	r3, r7, r3
   13aaa:	7d1b      	ldrb	r3, [r3, #20]
   13aac:	021b      	lsls	r3, r3, #8
   13aae:	b21a      	sxth	r2, r3
   13ab0:	230c      	movs	r3, #12
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	7cdb      	ldrb	r3, [r3, #19]
   13ab6:	b21b      	sxth	r3, r3
   13ab8:	4313      	orrs	r3, r2
   13aba:	b21a      	sxth	r2, r3
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   13ac0:	230c      	movs	r3, #12
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	7d9b      	ldrb	r3, [r3, #22]
   13ac6:	021b      	lsls	r3, r3, #8
   13ac8:	b21a      	sxth	r2, r3
   13aca:	230c      	movs	r3, #12
   13acc:	18fb      	adds	r3, r7, r3
   13ace:	7d5b      	ldrb	r3, [r3, #21]
   13ad0:	b21b      	sxth	r3, r3
   13ad2:	4313      	orrs	r3, r2
   13ad4:	b21a      	sxth	r2, r3
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   13ada:	230c      	movs	r3, #12
   13adc:	18fb      	adds	r3, r7, r3
   13ade:	7dd9      	ldrb	r1, [r3, #23]
   13ae0:	687b      	ldr	r3, [r7, #4]
   13ae2:	222c      	movs	r2, #44	; 0x2c
   13ae4:	5499      	strb	r1, [r3, r2]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13ae6:	230c      	movs	r3, #12
   13ae8:	18fb      	adds	r3, r7, r3
   13aea:	7edb      	ldrb	r3, [r3, #27]
   13aec:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   13aee:	b21a      	sxth	r2, r3
   13af0:	230c      	movs	r3, #12
   13af2:	18fb      	adds	r3, r7, r3
   13af4:	7e9b      	ldrb	r3, [r3, #26]
   13af6:	b21b      	sxth	r3, r3
   13af8:	210f      	movs	r1, #15
   13afa:	400b      	ands	r3, r1
   13afc:	b21b      	sxth	r3, r3
   13afe:	4313      	orrs	r3, r2
   13b00:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b02:	b29a      	uxth	r2, r3
   13b04:	687b      	ldr	r3, [r7, #4]
   13b06:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b08:	230c      	movs	r3, #12
   13b0a:	18fb      	adds	r3, r7, r3
   13b0c:	7e5b      	ldrb	r3, [r3, #25]
   13b0e:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   13b10:	b21a      	sxth	r2, r3
   13b12:	230c      	movs	r3, #12
   13b14:	18fb      	adds	r3, r7, r3
   13b16:	7e9b      	ldrb	r3, [r3, #26]
   13b18:	091b      	lsrs	r3, r3, #4
   13b1a:	b2db      	uxtb	r3, r3
   13b1c:	b21b      	sxth	r3, r3
   13b1e:	4313      	orrs	r3, r2
   13b20:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b22:	b29a      	uxth	r2, r3
   13b24:	687b      	ldr	r3, [r7, #4]
   13b26:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   13b28:	230c      	movs	r3, #12
   13b2a:	18fb      	adds	r3, r7, r3
   13b2c:	7f1b      	ldrb	r3, [r3, #28]
   13b2e:	b25a      	sxtb	r2, r3
   13b30:	687b      	ldr	r3, [r7, #4]
   13b32:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   13b34:	230c      	movs	r3, #12
   13b36:	18fb      	adds	r3, r7, r3
   13b38:	7f5b      	ldrb	r3, [r3, #29]
   13b3a:	b25a      	sxtb	r2, r3
   13b3c:	687b      	ldr	r3, [r7, #4]
   13b3e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   13b40:	230c      	movs	r3, #12
   13b42:	18fb      	adds	r3, r7, r3
   13b44:	7f9b      	ldrb	r3, [r3, #30]
   13b46:	b25a      	sxtb	r2, r3
   13b48:	687b      	ldr	r3, [r7, #4]
   13b4a:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   13b4c:	230c      	movs	r3, #12
   13b4e:	18fb      	adds	r3, r7, r3
   13b50:	7fda      	ldrb	r2, [r3, #31]
   13b52:	687b      	ldr	r3, [r7, #4]
   13b54:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   13b56:	230c      	movs	r3, #12
   13b58:	18fb      	adds	r3, r7, r3
   13b5a:	2220      	movs	r2, #32
   13b5c:	5c9b      	ldrb	r3, [r3, r2]
   13b5e:	b25a      	sxtb	r2, r3
   13b60:	687b      	ldr	r3, [r7, #4]
   13b62:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   13b64:	230c      	movs	r3, #12
   13b66:	18fb      	adds	r3, r7, r3
   13b68:	2225      	movs	r2, #37	; 0x25
   13b6a:	5c9b      	ldrb	r3, [r3, r2]
   13b6c:	b25a      	sxtb	r2, r3
   13b6e:	687b      	ldr	r3, [r7, #4]
   13b70:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   13b72:	230c      	movs	r3, #12
   13b74:	18fb      	adds	r3, r7, r3
   13b76:	2224      	movs	r2, #36	; 0x24
   13b78:	5c9b      	ldrb	r3, [r3, r2]
   13b7a:	021b      	lsls	r3, r3, #8
   13b7c:	b21a      	sxth	r2, r3
   13b7e:	230c      	movs	r3, #12
   13b80:	18fb      	adds	r3, r7, r3
   13b82:	2123      	movs	r1, #35	; 0x23
   13b84:	5c5b      	ldrb	r3, [r3, r1]
   13b86:	b21b      	sxth	r3, r3
   13b88:	4313      	orrs	r3, r2
   13b8a:	b21a      	sxth	r2, r3
   13b8c:	687b      	ldr	r3, [r7, #4]
   13b8e:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   13b90:	230c      	movs	r3, #12
   13b92:	18fb      	adds	r3, r7, r3
   13b94:	2226      	movs	r2, #38	; 0x26
   13b96:	5c9b      	ldrb	r3, [r3, r2]
   13b98:	b25a      	sxtb	r2, r3
   13b9a:	687b      	ldr	r3, [r7, #4]
   13b9c:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   13b9e:	2337      	movs	r3, #55	; 0x37
   13ba0:	18fb      	adds	r3, r7, r3
   13ba2:	781b      	ldrb	r3, [r3, #0]
   13ba4:	b25b      	sxtb	r3, r3
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d140      	bne.n	13c2c <get_calib_data+0x2dc>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   13baa:	2337      	movs	r3, #55	; 0x37
   13bac:	18fc      	adds	r4, r7, r3
   13bae:	687b      	ldr	r3, [r7, #4]
   13bb0:	220b      	movs	r2, #11
   13bb2:	18b9      	adds	r1, r7, r2
   13bb4:	2201      	movs	r2, #1
   13bb6:	2002      	movs	r0, #2
   13bb8:	4d27      	ldr	r5, [pc, #156]	; (13c58 <get_calib_data+0x308>)
   13bba:	47a8      	blx	r5
   13bbc:	0003      	movs	r3, r0
   13bbe:	7023      	strb	r3, [r4, #0]

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   13bc0:	230b      	movs	r3, #11
   13bc2:	18fb      	adds	r3, r7, r3
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	001a      	movs	r2, r3
   13bc8:	2330      	movs	r3, #48	; 0x30
   13bca:	4013      	ands	r3, r2
   13bcc:	d500      	bpl.n	13bd0 <get_calib_data+0x280>
   13bce:	330f      	adds	r3, #15
   13bd0:	111b      	asrs	r3, r3, #4
   13bd2:	b2d9      	uxtb	r1, r3
   13bd4:	687b      	ldr	r3, [r7, #4]
   13bd6:	2234      	movs	r2, #52	; 0x34
   13bd8:	5499      	strb	r1, [r3, r2]
			if (rslt == BME680_OK) {
   13bda:	2337      	movs	r3, #55	; 0x37
   13bdc:	18fb      	adds	r3, r7, r3
   13bde:	781b      	ldrb	r3, [r3, #0]
   13be0:	b25b      	sxtb	r3, r3
   13be2:	2b00      	cmp	r3, #0
   13be4:	d122      	bne.n	13c2c <get_calib_data+0x2dc>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   13be6:	2337      	movs	r3, #55	; 0x37
   13be8:	18fc      	adds	r4, r7, r3
   13bea:	687b      	ldr	r3, [r7, #4]
   13bec:	220b      	movs	r2, #11
   13bee:	18b9      	adds	r1, r7, r2
   13bf0:	2201      	movs	r2, #1
   13bf2:	2000      	movs	r0, #0
   13bf4:	4d18      	ldr	r5, [pc, #96]	; (13c58 <get_calib_data+0x308>)
   13bf6:	47a8      	blx	r5
   13bf8:	0003      	movs	r3, r0
   13bfa:	7023      	strb	r3, [r4, #0]

				dev->calib.res_heat_val = (int8_t) temp_var;
   13bfc:	230b      	movs	r3, #11
   13bfe:	18fb      	adds	r3, r7, r3
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	b259      	sxtb	r1, r3
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	2235      	movs	r2, #53	; 0x35
   13c08:	5499      	strb	r1, [r3, r2]
				if (rslt == BME680_OK)
   13c0a:	2337      	movs	r3, #55	; 0x37
   13c0c:	18fb      	adds	r3, r7, r3
   13c0e:	781b      	ldrb	r3, [r3, #0]
   13c10:	b25b      	sxtb	r3, r3
   13c12:	2b00      	cmp	r3, #0
   13c14:	d10a      	bne.n	13c2c <get_calib_data+0x2dc>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   13c16:	2337      	movs	r3, #55	; 0x37
   13c18:	18fc      	adds	r4, r7, r3
   13c1a:	687b      	ldr	r3, [r7, #4]
   13c1c:	220b      	movs	r2, #11
   13c1e:	18b9      	adds	r1, r7, r2
   13c20:	2201      	movs	r2, #1
   13c22:	2004      	movs	r0, #4
   13c24:	4d0c      	ldr	r5, [pc, #48]	; (13c58 <get_calib_data+0x308>)
   13c26:	47a8      	blx	r5
   13c28:	0003      	movs	r3, r0
   13c2a:	7023      	strb	r3, [r4, #0]
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   13c2c:	230b      	movs	r3, #11
   13c2e:	18fb      	adds	r3, r7, r3
   13c30:	781b      	ldrb	r3, [r3, #0]
   13c32:	b25b      	sxtb	r3, r3
   13c34:	111b      	asrs	r3, r3, #4
   13c36:	b259      	sxtb	r1, r3
   13c38:	687b      	ldr	r3, [r7, #4]
   13c3a:	2236      	movs	r2, #54	; 0x36
   13c3c:	5499      	strb	r1, [r3, r2]
	}

	return rslt;
   13c3e:	2337      	movs	r3, #55	; 0x37
   13c40:	18fb      	adds	r3, r7, r3
   13c42:	781b      	ldrb	r3, [r3, #0]
   13c44:	b25b      	sxtb	r3, r3
}
   13c46:	0018      	movs	r0, r3
   13c48:	46bd      	mov	sp, r7
   13c4a:	b00e      	add	sp, #56	; 0x38
   13c4c:	bdb0      	pop	{r4, r5, r7, pc}
   13c4e:	46c0      	nop			; (mov r8, r8)
   13c50:	0003796b 	.word	0x0003796b
   13c54:	0001482f 	.word	0x0001482f
   13c58:	00012ee5 	.word	0x00012ee5

00013c5c <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
   13c5c:	b5b0      	push	{r4, r5, r7, lr}
   13c5e:	b084      	sub	sp, #16
   13c60:	af00      	add	r7, sp, #0
   13c62:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13c64:	230f      	movs	r3, #15
   13c66:	18fc      	adds	r4, r7, r3
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	0018      	movs	r0, r3
   13c6c:	4b2c      	ldr	r3, [pc, #176]	; (13d20 <set_gas_config+0xc4>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13c74:	230f      	movs	r3, #15
   13c76:	18fb      	adds	r3, r7, r3
   13c78:	781b      	ldrb	r3, [r3, #0]
   13c7a:	b25b      	sxtb	r3, r3
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d147      	bne.n	13d10 <set_gas_config+0xb4>

		uint8_t reg_addr[2] = {0};
   13c80:	230c      	movs	r3, #12
   13c82:	18fb      	adds	r3, r7, r3
   13c84:	2200      	movs	r2, #0
   13c86:	801a      	strh	r2, [r3, #0]
		uint8_t reg_data[2] = {0};
   13c88:	2308      	movs	r3, #8
   13c8a:	18fb      	adds	r3, r7, r3
   13c8c:	2200      	movs	r2, #0
   13c8e:	801a      	strh	r2, [r3, #0]

		if (dev->power_mode == BME680_FORCED_MODE) {
   13c90:	687b      	ldr	r3, [r7, #4]
   13c92:	2244      	movs	r2, #68	; 0x44
   13c94:	5c9b      	ldrb	r3, [r3, r2]
   13c96:	2b01      	cmp	r3, #1
   13c98:	d124      	bne.n	13ce4 <set_gas_config+0x88>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   13c9a:	230c      	movs	r3, #12
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	225a      	movs	r2, #90	; 0x5a
   13ca0:	701a      	strb	r2, [r3, #0]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   13ca2:	687b      	ldr	r3, [r7, #4]
   13ca4:	2240      	movs	r2, #64	; 0x40
   13ca6:	5a9b      	ldrh	r3, [r3, r2]
   13ca8:	687a      	ldr	r2, [r7, #4]
   13caa:	0011      	movs	r1, r2
   13cac:	0018      	movs	r0, r3
   13cae:	4b1d      	ldr	r3, [pc, #116]	; (13d24 <set_gas_config+0xc8>)
   13cb0:	4798      	blx	r3
   13cb2:	0003      	movs	r3, r0
   13cb4:	001a      	movs	r2, r3
   13cb6:	2308      	movs	r3, #8
   13cb8:	18fb      	adds	r3, r7, r3
   13cba:	701a      	strb	r2, [r3, #0]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   13cbc:	230c      	movs	r3, #12
   13cbe:	18fb      	adds	r3, r7, r3
   13cc0:	2264      	movs	r2, #100	; 0x64
   13cc2:	705a      	strb	r2, [r3, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   13cc4:	687b      	ldr	r3, [r7, #4]
   13cc6:	2242      	movs	r2, #66	; 0x42
   13cc8:	5a9b      	ldrh	r3, [r3, r2]
   13cca:	0018      	movs	r0, r3
   13ccc:	4b16      	ldr	r3, [pc, #88]	; (13d28 <set_gas_config+0xcc>)
   13cce:	4798      	blx	r3
   13cd0:	0003      	movs	r3, r0
   13cd2:	001a      	movs	r2, r3
   13cd4:	2308      	movs	r3, #8
   13cd6:	18fb      	adds	r3, r7, r3
   13cd8:	705a      	strb	r2, [r3, #1]
			dev->gas_sett.nb_conv = 0;
   13cda:	687b      	ldr	r3, [r7, #4]
   13cdc:	223c      	movs	r2, #60	; 0x3c
   13cde:	2100      	movs	r1, #0
   13ce0:	5499      	strb	r1, [r3, r2]
   13ce2:	e003      	b.n	13cec <set_gas_config+0x90>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   13ce4:	230f      	movs	r3, #15
   13ce6:	18fb      	adds	r3, r7, r3
   13ce8:	2201      	movs	r2, #1
   13cea:	701a      	strb	r2, [r3, #0]
		}
		if (rslt == BME680_OK)
   13cec:	230f      	movs	r3, #15
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	781b      	ldrb	r3, [r3, #0]
   13cf2:	b25b      	sxtb	r3, r3
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	d10b      	bne.n	13d10 <set_gas_config+0xb4>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   13cf8:	230f      	movs	r3, #15
   13cfa:	18fc      	adds	r4, r7, r3
   13cfc:	687b      	ldr	r3, [r7, #4]
   13cfe:	2208      	movs	r2, #8
   13d00:	18b9      	adds	r1, r7, r2
   13d02:	220c      	movs	r2, #12
   13d04:	18b8      	adds	r0, r7, r2
   13d06:	2202      	movs	r2, #2
   13d08:	4d08      	ldr	r5, [pc, #32]	; (13d2c <set_gas_config+0xd0>)
   13d0a:	47a8      	blx	r5
   13d0c:	0003      	movs	r3, r0
   13d0e:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
   13d10:	230f      	movs	r3, #15
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	b25b      	sxtb	r3, r3
}
   13d18:	0018      	movs	r0, r3
   13d1a:	46bd      	mov	sp, r7
   13d1c:	b004      	add	sp, #16
   13d1e:	bdb0      	pop	{r4, r5, r7, pc}
   13d20:	0001482f 	.word	0x0001482f
   13d24:	00014285 	.word	0x00014285
   13d28:	00014391 	.word	0x00014391
   13d2c:	00012fa9 	.word	0x00012fa9

00013d30 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
   13d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d32:	b091      	sub	sp, #68	; 0x44
   13d34:	af00      	add	r7, sp, #0
   13d36:	61f8      	str	r0, [r7, #28]
   13d38:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   13d3a:	69fb      	ldr	r3, [r7, #28]
   13d3c:	10da      	asrs	r2, r3, #3
   13d3e:	69bb      	ldr	r3, [r7, #24]
   13d40:	8adb      	ldrh	r3, [r3, #22]
   13d42:	005b      	lsls	r3, r3, #1
   13d44:	1ad3      	subs	r3, r2, r3
   13d46:	63bb      	str	r3, [r7, #56]	; 0x38
   13d48:	17db      	asrs	r3, r3, #31
   13d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   13d4c:	69bb      	ldr	r3, [r7, #24]
   13d4e:	2218      	movs	r2, #24
   13d50:	5e9b      	ldrsh	r3, [r3, r2]
   13d52:	60bb      	str	r3, [r7, #8]
   13d54:	17db      	asrs	r3, r3, #31
   13d56:	60fb      	str	r3, [r7, #12]
   13d58:	4e30      	ldr	r6, [pc, #192]	; (13e1c <calc_temperature+0xec>)
   13d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d5e:	68b8      	ldr	r0, [r7, #8]
   13d60:	68f9      	ldr	r1, [r7, #12]
   13d62:	47b0      	blx	r6
   13d64:	0002      	movs	r2, r0
   13d66:	000b      	movs	r3, r1
   13d68:	0559      	lsls	r1, r3, #21
   13d6a:	0ad0      	lsrs	r0, r2, #11
   13d6c:	4301      	orrs	r1, r0
   13d6e:	6339      	str	r1, [r7, #48]	; 0x30
   13d70:	12db      	asrs	r3, r3, #11
   13d72:	637b      	str	r3, [r7, #52]	; 0x34
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   13d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d76:	07db      	lsls	r3, r3, #31
   13d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d7a:	0854      	lsrs	r4, r2, #1
   13d7c:	431c      	orrs	r4, r3
   13d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d80:	105d      	asrs	r5, r3, #1
   13d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d84:	07db      	lsls	r3, r3, #31
   13d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d88:	0852      	lsrs	r2, r2, #1
   13d8a:	613a      	str	r2, [r7, #16]
   13d8c:	693a      	ldr	r2, [r7, #16]
   13d8e:	431a      	orrs	r2, r3
   13d90:	613a      	str	r2, [r7, #16]
   13d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d94:	105b      	asrs	r3, r3, #1
   13d96:	617b      	str	r3, [r7, #20]
   13d98:	4e20      	ldr	r6, [pc, #128]	; (13e1c <calc_temperature+0xec>)
   13d9a:	693a      	ldr	r2, [r7, #16]
   13d9c:	697b      	ldr	r3, [r7, #20]
   13d9e:	0020      	movs	r0, r4
   13da0:	0029      	movs	r1, r5
   13da2:	47b0      	blx	r6
   13da4:	0003      	movs	r3, r0
   13da6:	000c      	movs	r4, r1
   13da8:	0522      	lsls	r2, r4, #20
   13daa:	0b19      	lsrs	r1, r3, #12
   13dac:	430a      	orrs	r2, r1
   13dae:	62ba      	str	r2, [r7, #40]	; 0x28
   13db0:	1323      	asrs	r3, r4, #12
   13db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   13db4:	69bb      	ldr	r3, [r7, #24]
   13db6:	7e9b      	ldrb	r3, [r3, #26]
   13db8:	b25b      	sxtb	r3, r3
   13dba:	011b      	lsls	r3, r3, #4
   13dbc:	603b      	str	r3, [r7, #0]
   13dbe:	17db      	asrs	r3, r3, #31
   13dc0:	607b      	str	r3, [r7, #4]
   13dc2:	4c16      	ldr	r4, [pc, #88]	; (13e1c <calc_temperature+0xec>)
   13dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13dc8:	6838      	ldr	r0, [r7, #0]
   13dca:	6879      	ldr	r1, [r7, #4]
   13dcc:	47a0      	blx	r4
   13dce:	0003      	movs	r3, r0
   13dd0:	000c      	movs	r4, r1
   13dd2:	04a2      	lsls	r2, r4, #18
   13dd4:	0b99      	lsrs	r1, r3, #14
   13dd6:	430a      	orrs	r2, r1
   13dd8:	62ba      	str	r2, [r7, #40]	; 0x28
   13dda:	13a3      	asrs	r3, r4, #14
   13ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev->calib.t_fine = (int32_t) (var2 + var3);
   13dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13de2:	18d3      	adds	r3, r2, r3
   13de4:	001a      	movs	r2, r3
   13de6:	69bb      	ldr	r3, [r7, #24]
   13de8:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   13dea:	69bb      	ldr	r3, [r7, #24]
   13dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13dee:	0013      	movs	r3, r2
   13df0:	009b      	lsls	r3, r3, #2
   13df2:	189b      	adds	r3, r3, r2
   13df4:	3380      	adds	r3, #128	; 0x80
   13df6:	121a      	asrs	r2, r3, #8
   13df8:	230e      	movs	r3, #14
   13dfa:	2118      	movs	r1, #24
   13dfc:	468c      	mov	ip, r1
   13dfe:	44bc      	add	ip, r7
   13e00:	4463      	add	r3, ip
   13e02:	801a      	strh	r2, [r3, #0]

	return calc_temp;
   13e04:	230e      	movs	r3, #14
   13e06:	2218      	movs	r2, #24
   13e08:	4694      	mov	ip, r2
   13e0a:	44bc      	add	ip, r7
   13e0c:	4463      	add	r3, ip
   13e0e:	2200      	movs	r2, #0
   13e10:	5e9b      	ldrsh	r3, [r3, r2]
}
   13e12:	0018      	movs	r0, r3
   13e14:	46bd      	mov	sp, r7
   13e16:	b011      	add	sp, #68	; 0x44
   13e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e1a:	46c0      	nop			; (mov r8, r8)
   13e1c:	000351e5 	.word	0x000351e5

00013e20 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
   13e20:	b580      	push	{r7, lr}
   13e22:	b086      	sub	sp, #24
   13e24:	af00      	add	r7, sp, #0
   13e26:	6078      	str	r0, [r7, #4]
   13e28:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   13e2a:	683b      	ldr	r3, [r7, #0]
   13e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e2e:	105b      	asrs	r3, r3, #1
   13e30:	4a4d      	ldr	r2, [pc, #308]	; (13f68 <calc_pressure+0x148>)
   13e32:	4694      	mov	ip, r2
   13e34:	4463      	add	r3, ip
   13e36:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e38:	693b      	ldr	r3, [r7, #16]
   13e3a:	109b      	asrs	r3, r3, #2
   13e3c:	693a      	ldr	r2, [r7, #16]
   13e3e:	1092      	asrs	r2, r2, #2
   13e40:	4353      	muls	r3, r2
   13e42:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
   13e44:	683a      	ldr	r2, [r7, #0]
   13e46:	2126      	movs	r1, #38	; 0x26
   13e48:	5652      	ldrsb	r2, [r2, r1]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e4a:	4353      	muls	r3, r2
   13e4c:	109b      	asrs	r3, r3, #2
   13e4e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   13e50:	683b      	ldr	r3, [r7, #0]
   13e52:	2224      	movs	r2, #36	; 0x24
   13e54:	5e9b      	ldrsh	r3, [r3, r2]
   13e56:	001a      	movs	r2, r3
   13e58:	693b      	ldr	r3, [r7, #16]
   13e5a:	4353      	muls	r3, r2
   13e5c:	005b      	lsls	r3, r3, #1
   13e5e:	68fa      	ldr	r2, [r7, #12]
   13e60:	18d3      	adds	r3, r2, r3
   13e62:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   13e64:	68fb      	ldr	r3, [r7, #12]
   13e66:	109a      	asrs	r2, r3, #2
   13e68:	683b      	ldr	r3, [r7, #0]
   13e6a:	2122      	movs	r1, #34	; 0x22
   13e6c:	5e5b      	ldrsh	r3, [r3, r1]
   13e6e:	041b      	lsls	r3, r3, #16
   13e70:	18d3      	adds	r3, r2, r3
   13e72:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e74:	693b      	ldr	r3, [r7, #16]
   13e76:	109b      	asrs	r3, r3, #2
   13e78:	693a      	ldr	r2, [r7, #16]
   13e7a:	1092      	asrs	r2, r2, #2
   13e7c:	4353      	muls	r3, r2
   13e7e:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e80:	683a      	ldr	r2, [r7, #0]
   13e82:	2120      	movs	r1, #32
   13e84:	5652      	ldrsb	r2, [r2, r1]
   13e86:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e88:	4353      	muls	r3, r2
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e8a:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   13e8c:	683b      	ldr	r3, [r7, #0]
   13e8e:	211e      	movs	r1, #30
   13e90:	5e5b      	ldrsh	r3, [r3, r1]
   13e92:	0019      	movs	r1, r3
   13e94:	693b      	ldr	r3, [r7, #16]
   13e96:	434b      	muls	r3, r1
   13e98:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e9a:	18d3      	adds	r3, r2, r3
   13e9c:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
   13e9e:	693b      	ldr	r3, [r7, #16]
   13ea0:	149b      	asrs	r3, r3, #18
   13ea2:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   13ea4:	693b      	ldr	r3, [r7, #16]
   13ea6:	2280      	movs	r2, #128	; 0x80
   13ea8:	0212      	lsls	r2, r2, #8
   13eaa:	4694      	mov	ip, r2
   13eac:	4463      	add	r3, ip
   13eae:	683a      	ldr	r2, [r7, #0]
   13eb0:	8b92      	ldrh	r2, [r2, #28]
   13eb2:	4353      	muls	r3, r2
   13eb4:	13db      	asrs	r3, r3, #15
   13eb6:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	2280      	movs	r2, #128	; 0x80
   13ebc:	0352      	lsls	r2, r2, #13
   13ebe:	1ad3      	subs	r3, r2, r3
   13ec0:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   13ec2:	68fb      	ldr	r3, [r7, #12]
   13ec4:	131b      	asrs	r3, r3, #12
   13ec6:	697a      	ldr	r2, [r7, #20]
   13ec8:	1ad3      	subs	r3, r2, r3
   13eca:	001a      	movs	r2, r3
   13ecc:	4b27      	ldr	r3, [pc, #156]	; (13f6c <calc_pressure+0x14c>)
   13ece:	4353      	muls	r3, r2
   13ed0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   13ed2:	697b      	ldr	r3, [r7, #20]
   13ed4:	4a26      	ldr	r2, [pc, #152]	; (13f70 <calc_pressure+0x150>)
   13ed6:	4293      	cmp	r3, r2
   13ed8:	dd07      	ble.n	13eea <calc_pressure+0xca>
		pressure_comp = ((pressure_comp / var1) << 1);
   13eda:	4b26      	ldr	r3, [pc, #152]	; (13f74 <calc_pressure+0x154>)
   13edc:	6939      	ldr	r1, [r7, #16]
   13ede:	6978      	ldr	r0, [r7, #20]
   13ee0:	4798      	blx	r3
   13ee2:	0003      	movs	r3, r0
   13ee4:	005b      	lsls	r3, r3, #1
   13ee6:	617b      	str	r3, [r7, #20]
   13ee8:	e007      	b.n	13efa <calc_pressure+0xda>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
   13eea:	697b      	ldr	r3, [r7, #20]
   13eec:	005a      	lsls	r2, r3, #1
   13eee:	4b21      	ldr	r3, [pc, #132]	; (13f74 <calc_pressure+0x154>)
   13ef0:	6939      	ldr	r1, [r7, #16]
   13ef2:	0010      	movs	r0, r2
   13ef4:	4798      	blx	r3
   13ef6:	0003      	movs	r3, r0
   13ef8:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13efa:	683b      	ldr	r3, [r7, #0]
   13efc:	222a      	movs	r2, #42	; 0x2a
   13efe:	5e9b      	ldrsh	r3, [r3, r2]
   13f00:	0019      	movs	r1, r3
   13f02:	697b      	ldr	r3, [r7, #20]
   13f04:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f06:	697a      	ldr	r2, [r7, #20]
   13f08:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0a:	4353      	muls	r3, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f0c:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0e:	434b      	muls	r3, r1
   13f10:	131b      	asrs	r3, r3, #12
   13f12:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f14:	697b      	ldr	r3, [r7, #20]
   13f16:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
   13f18:	683a      	ldr	r2, [r7, #0]
   13f1a:	2128      	movs	r1, #40	; 0x28
   13f1c:	5e52      	ldrsh	r2, [r2, r1]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f1e:	4353      	muls	r3, r2
   13f20:	135b      	asrs	r3, r3, #13
   13f22:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f24:	697b      	ldr	r3, [r7, #20]
   13f26:	121b      	asrs	r3, r3, #8
   13f28:	697a      	ldr	r2, [r7, #20]
   13f2a:	1212      	asrs	r2, r2, #8
   13f2c:	4353      	muls	r3, r2
		(int32_t)(pressure_comp >> 8) *
   13f2e:	697a      	ldr	r2, [r7, #20]
   13f30:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f32:	4353      	muls	r3, r2
		(int32_t)dev->calib.par_p10) >> 17;
   13f34:	683a      	ldr	r2, [r7, #0]
   13f36:	212c      	movs	r1, #44	; 0x2c
   13f38:	5c52      	ldrb	r2, [r2, r1]
		(int32_t)(pressure_comp >> 8) *
   13f3a:	4353      	muls	r3, r2
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f3c:	145b      	asrs	r3, r3, #17
   13f3e:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f40:	693a      	ldr	r2, [r7, #16]
   13f42:	68fb      	ldr	r3, [r7, #12]
   13f44:	18d2      	adds	r2, r2, r3
   13f46:	68bb      	ldr	r3, [r7, #8]
   13f48:	18d2      	adds	r2, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f4a:	683b      	ldr	r3, [r7, #0]
   13f4c:	2127      	movs	r1, #39	; 0x27
   13f4e:	565b      	ldrsb	r3, [r3, r1]
   13f50:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f52:	18d3      	adds	r3, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f54:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f56:	697a      	ldr	r2, [r7, #20]
   13f58:	18d3      	adds	r3, r2, r3
   13f5a:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
   13f5c:	697b      	ldr	r3, [r7, #20]

}
   13f5e:	0018      	movs	r0, r3
   13f60:	46bd      	mov	sp, r7
   13f62:	b006      	add	sp, #24
   13f64:	bd80      	pop	{r7, pc}
   13f66:	46c0      	nop			; (mov r8, r8)
   13f68:	ffff0600 	.word	0xffff0600
   13f6c:	00000c35 	.word	0x00000c35
   13f70:	3fffffff 	.word	0x3fffffff
   13f74:	00034f49 	.word	0x00034f49

00013f78 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
   13f78:	b5b0      	push	{r4, r5, r7, lr}
   13f7a:	b08a      	sub	sp, #40	; 0x28
   13f7c:	af00      	add	r7, sp, #0
   13f7e:	0002      	movs	r2, r0
   13f80:	6039      	str	r1, [r7, #0]
   13f82:	1dbb      	adds	r3, r7, #6
   13f84:	801a      	strh	r2, [r3, #0]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   13f86:	683b      	ldr	r3, [r7, #0]
   13f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13f8a:	0013      	movs	r3, r2
   13f8c:	009b      	lsls	r3, r3, #2
   13f8e:	189b      	adds	r3, r3, r2
   13f90:	3380      	adds	r3, #128	; 0x80
   13f92:	121b      	asrs	r3, r3, #8
   13f94:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13f96:	1dbb      	adds	r3, r7, #6
   13f98:	881a      	ldrh	r2, [r3, #0]
   13f9a:	683b      	ldr	r3, [r7, #0]
   13f9c:	891b      	ldrh	r3, [r3, #8]
   13f9e:	011b      	lsls	r3, r3, #4
   13fa0:	1ad4      	subs	r4, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   13fa2:	683b      	ldr	r3, [r7, #0]
   13fa4:	7b1b      	ldrb	r3, [r3, #12]
   13fa6:	b25b      	sxtb	r3, r3
   13fa8:	001a      	movs	r2, r3
   13faa:	6a3b      	ldr	r3, [r7, #32]
   13fac:	435a      	muls	r2, r3
   13fae:	4b38      	ldr	r3, [pc, #224]	; (14090 <calc_humidity+0x118>)
   13fb0:	2164      	movs	r1, #100	; 0x64
   13fb2:	0010      	movs	r0, r2
   13fb4:	4798      	blx	r3
   13fb6:	0003      	movs	r3, r0
   13fb8:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13fba:	1ae3      	subs	r3, r4, r3
   13fbc:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
   13fbe:	683b      	ldr	r3, [r7, #0]
   13fc0:	895b      	ldrh	r3, [r3, #10]
   13fc2:	001c      	movs	r4, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   13fc4:	683b      	ldr	r3, [r7, #0]
   13fc6:	7b5b      	ldrb	r3, [r3, #13]
   13fc8:	b25b      	sxtb	r3, r3
   13fca:	001a      	movs	r2, r3
   13fcc:	6a3b      	ldr	r3, [r7, #32]
   13fce:	435a      	muls	r2, r3
   13fd0:	4b2f      	ldr	r3, [pc, #188]	; (14090 <calc_humidity+0x118>)
   13fd2:	2164      	movs	r1, #100	; 0x64
   13fd4:	0010      	movs	r0, r2
   13fd6:	4798      	blx	r3
   13fd8:	0003      	movs	r3, r0
   13fda:	001d      	movs	r5, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   13fdc:	683b      	ldr	r3, [r7, #0]
   13fde:	7b9b      	ldrb	r3, [r3, #14]
   13fe0:	b25b      	sxtb	r3, r3
   13fe2:	001a      	movs	r2, r3
   13fe4:	6a3b      	ldr	r3, [r7, #32]
   13fe6:	435a      	muls	r2, r3
   13fe8:	4b29      	ldr	r3, [pc, #164]	; (14090 <calc_humidity+0x118>)
   13fea:	2164      	movs	r1, #100	; 0x64
   13fec:	0010      	movs	r0, r2
   13fee:	4798      	blx	r3
   13ff0:	0003      	movs	r3, r0
   13ff2:	001a      	movs	r2, r3
   13ff4:	6a3b      	ldr	r3, [r7, #32]
   13ff6:	4353      	muls	r3, r2
   13ff8:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   13ffa:	4b25      	ldr	r3, [pc, #148]	; (14090 <calc_humidity+0x118>)
   13ffc:	2164      	movs	r1, #100	; 0x64
   13ffe:	0010      	movs	r0, r2
   14000:	4798      	blx	r3
   14002:	0003      	movs	r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   14004:	18eb      	adds	r3, r5, r3
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   14006:	2280      	movs	r2, #128	; 0x80
   14008:	01d2      	lsls	r2, r2, #7
   1400a:	4694      	mov	ip, r2
   1400c:	4463      	add	r3, ip
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   1400e:	4363      	muls	r3, r4
	var2 = ((int32_t) dev->calib.par_h2
   14010:	129b      	asrs	r3, r3, #10
   14012:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
   14014:	69fb      	ldr	r3, [r7, #28]
   14016:	69ba      	ldr	r2, [r7, #24]
   14018:	4353      	muls	r3, r2
   1401a:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
   1401c:	683b      	ldr	r3, [r7, #0]
   1401e:	7bdb      	ldrb	r3, [r3, #15]
   14020:	01db      	lsls	r3, r3, #7
   14022:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   14024:	683b      	ldr	r3, [r7, #0]
   14026:	7c1b      	ldrb	r3, [r3, #16]
   14028:	b25b      	sxtb	r3, r3
   1402a:	001a      	movs	r2, r3
   1402c:	6a3b      	ldr	r3, [r7, #32]
   1402e:	435a      	muls	r2, r3
   14030:	4b17      	ldr	r3, [pc, #92]	; (14090 <calc_humidity+0x118>)
   14032:	2164      	movs	r1, #100	; 0x64
   14034:	0010      	movs	r0, r2
   14036:	4798      	blx	r3
   14038:	0003      	movs	r3, r0
   1403a:	001a      	movs	r2, r3
   1403c:	693b      	ldr	r3, [r7, #16]
   1403e:	18d3      	adds	r3, r2, r3
   14040:	111b      	asrs	r3, r3, #4
   14042:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   14044:	697b      	ldr	r3, [r7, #20]
   14046:	139b      	asrs	r3, r3, #14
   14048:	697a      	ldr	r2, [r7, #20]
   1404a:	1392      	asrs	r2, r2, #14
   1404c:	4353      	muls	r3, r2
   1404e:	129b      	asrs	r3, r3, #10
   14050:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
   14052:	693b      	ldr	r3, [r7, #16]
   14054:	68fa      	ldr	r2, [r7, #12]
   14056:	4353      	muls	r3, r2
   14058:	105b      	asrs	r3, r3, #1
   1405a:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   1405c:	697a      	ldr	r2, [r7, #20]
   1405e:	68bb      	ldr	r3, [r7, #8]
   14060:	18d3      	adds	r3, r2, r3
   14062:	129b      	asrs	r3, r3, #10
   14064:	22fa      	movs	r2, #250	; 0xfa
   14066:	0092      	lsls	r2, r2, #2
   14068:	4353      	muls	r3, r2
   1406a:	131b      	asrs	r3, r3, #12
   1406c:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
   1406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14070:	4a08      	ldr	r2, [pc, #32]	; (14094 <calc_humidity+0x11c>)
   14072:	4293      	cmp	r3, r2
   14074:	dd02      	ble.n	1407c <calc_humidity+0x104>
		calc_hum = 100000;
   14076:	4b07      	ldr	r3, [pc, #28]	; (14094 <calc_humidity+0x11c>)
   14078:	627b      	str	r3, [r7, #36]	; 0x24
   1407a:	e004      	b.n	14086 <calc_humidity+0x10e>
	else if (calc_hum < 0)
   1407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1407e:	2b00      	cmp	r3, #0
   14080:	da01      	bge.n	14086 <calc_humidity+0x10e>
		calc_hum = 0;
   14082:	2300      	movs	r3, #0
   14084:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
   14086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   14088:	0018      	movs	r0, r3
   1408a:	46bd      	mov	sp, r7
   1408c:	b00a      	add	sp, #40	; 0x28
   1408e:	bdb0      	pop	{r4, r5, r7, pc}
   14090:	00034f49 	.word	0x00034f49
   14094:	000186a0 	.word	0x000186a0

00014098 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
   14098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1409a:	b0b7      	sub	sp, #220	; 0xdc
   1409c:	af00      	add	r7, sp, #0
   1409e:	0003      	movs	r3, r0
   140a0:	633a      	str	r2, [r7, #48]	; 0x30
   140a2:	2236      	movs	r2, #54	; 0x36
   140a4:	18ba      	adds	r2, r7, r2
   140a6:	8013      	strh	r3, [r2, #0]
   140a8:	2335      	movs	r3, #53	; 0x35
   140aa:	18fa      	adds	r2, r7, r3
   140ac:	1c0b      	adds	r3, r1, #0
   140ae:	7013      	strb	r3, [r2, #0]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   140b0:	234c      	movs	r3, #76	; 0x4c
   140b2:	2230      	movs	r2, #48	; 0x30
   140b4:	18ba      	adds	r2, r7, r2
   140b6:	18d2      	adds	r2, r2, r3
   140b8:	4b6c      	ldr	r3, [pc, #432]	; (1426c <calc_gas_resistance+0x1d4>)
   140ba:	0010      	movs	r0, r2
   140bc:	0019      	movs	r1, r3
   140be:	2340      	movs	r3, #64	; 0x40
   140c0:	001a      	movs	r2, r3
   140c2:	4b6b      	ldr	r3, [pc, #428]	; (14270 <calc_gas_resistance+0x1d8>)
   140c4:	4798      	blx	r3
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   140c6:	230c      	movs	r3, #12
   140c8:	2230      	movs	r2, #48	; 0x30
   140ca:	18ba      	adds	r2, r7, r2
   140cc:	18d2      	adds	r2, r2, r3
   140ce:	4b69      	ldr	r3, [pc, #420]	; (14274 <calc_gas_resistance+0x1dc>)
   140d0:	0010      	movs	r0, r2
   140d2:	0019      	movs	r1, r3
   140d4:	2340      	movs	r3, #64	; 0x40
   140d6:	001a      	movs	r2, r3
   140d8:	4b65      	ldr	r3, [pc, #404]	; (14270 <calc_gas_resistance+0x1d8>)
   140da:	4798      	blx	r3
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   140dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   140de:	2336      	movs	r3, #54	; 0x36
   140e0:	56d3      	ldrsb	r3, [r2, r3]
   140e2:	61bb      	str	r3, [r7, #24]
   140e4:	17db      	asrs	r3, r3, #31
   140e6:	61fb      	str	r3, [r7, #28]
   140e8:	69b8      	ldr	r0, [r7, #24]
   140ea:	69f9      	ldr	r1, [r7, #28]
   140ec:	0003      	movs	r3, r0
   140ee:	000c      	movs	r4, r1
   140f0:	0f9a      	lsrs	r2, r3, #30
   140f2:	00a6      	lsls	r6, r4, #2
   140f4:	4316      	orrs	r6, r2
   140f6:	009d      	lsls	r5, r3, #2
   140f8:	0003      	movs	r3, r0
   140fa:	000c      	movs	r4, r1
   140fc:	195b      	adds	r3, r3, r5
   140fe:	4174      	adcs	r4, r6
   14100:	495d      	ldr	r1, [pc, #372]	; (14278 <calc_gas_resistance+0x1e0>)
   14102:	2200      	movs	r2, #0
   14104:	185b      	adds	r3, r3, r1
   14106:	4154      	adcs	r4, r2
   14108:	0018      	movs	r0, r3
   1410a:	0021      	movs	r1, r4
		((int64_t) lookupTable1[gas_range])) >> 16;
   1410c:	2335      	movs	r3, #53	; 0x35
   1410e:	18fb      	adds	r3, r7, r3
   14110:	781b      	ldrb	r3, [r3, #0]
   14112:	224c      	movs	r2, #76	; 0x4c
   14114:	2430      	movs	r4, #48	; 0x30
   14116:	46a4      	mov	ip, r4
   14118:	44bc      	add	ip, r7
   1411a:	4462      	add	r2, ip
   1411c:	009b      	lsls	r3, r3, #2
   1411e:	589b      	ldr	r3, [r3, r2]
   14120:	613b      	str	r3, [r7, #16]
   14122:	2300      	movs	r3, #0
   14124:	617b      	str	r3, [r7, #20]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   14126:	4c55      	ldr	r4, [pc, #340]	; (1427c <calc_gas_resistance+0x1e4>)
   14128:	693a      	ldr	r2, [r7, #16]
   1412a:	697b      	ldr	r3, [r7, #20]
   1412c:	47a0      	blx	r4
   1412e:	0003      	movs	r3, r0
   14130:	000c      	movs	r4, r1
   14132:	0422      	lsls	r2, r4, #16
   14134:	0c19      	lsrs	r1, r3, #16
   14136:	430a      	orrs	r2, r1
   14138:	21a0      	movs	r1, #160	; 0xa0
   1413a:	2030      	movs	r0, #48	; 0x30
   1413c:	4684      	mov	ip, r0
   1413e:	44bc      	add	ip, r7
   14140:	4461      	add	r1, ip
   14142:	600a      	str	r2, [r1, #0]
   14144:	1423      	asrs	r3, r4, #16
   14146:	22a4      	movs	r2, #164	; 0xa4
   14148:	2130      	movs	r1, #48	; 0x30
   1414a:	468c      	mov	ip, r1
   1414c:	44bc      	add	ip, r7
   1414e:	4462      	add	r2, ip
   14150:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   14152:	2336      	movs	r3, #54	; 0x36
   14154:	18fb      	adds	r3, r7, r3
   14156:	881b      	ldrh	r3, [r3, #0]
   14158:	b29b      	uxth	r3, r3
   1415a:	60bb      	str	r3, [r7, #8]
   1415c:	2300      	movs	r3, #0
   1415e:	60fb      	str	r3, [r7, #12]
   14160:	68b9      	ldr	r1, [r7, #8]
   14162:	68fa      	ldr	r2, [r7, #12]
   14164:	000b      	movs	r3, r1
   14166:	0c5b      	lsrs	r3, r3, #17
   14168:	0010      	movs	r0, r2
   1416a:	03c0      	lsls	r0, r0, #15
   1416c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1416e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14170:	4318      	orrs	r0, r3
   14172:	62f8      	str	r0, [r7, #44]	; 0x2c
   14174:	000b      	movs	r3, r1
   14176:	03db      	lsls	r3, r3, #15
   14178:	62bb      	str	r3, [r7, #40]	; 0x28
   1417a:	23ff      	movs	r3, #255	; 0xff
   1417c:	061b      	lsls	r3, r3, #24
   1417e:	2401      	movs	r4, #1
   14180:	4264      	negs	r4, r4
   14182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14186:	18c9      	adds	r1, r1, r3
   14188:	4162      	adcs	r2, r4
   1418a:	23a0      	movs	r3, #160	; 0xa0
   1418c:	2030      	movs	r0, #48	; 0x30
   1418e:	4684      	mov	ip, r0
   14190:	44bc      	add	ip, r7
   14192:	4463      	add	r3, ip
   14194:	685c      	ldr	r4, [r3, #4]
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	185b      	adds	r3, r3, r1
   1419a:	4154      	adcs	r4, r2
   1419c:	2298      	movs	r2, #152	; 0x98
   1419e:	2130      	movs	r1, #48	; 0x30
   141a0:	468c      	mov	ip, r1
   141a2:	44bc      	add	ip, r7
   141a4:	4462      	add	r2, ip
   141a6:	6013      	str	r3, [r2, #0]
   141a8:	6054      	str	r4, [r2, #4]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   141aa:	2335      	movs	r3, #53	; 0x35
   141ac:	18fb      	adds	r3, r7, r3
   141ae:	781a      	ldrb	r2, [r3, #0]
   141b0:	230c      	movs	r3, #12
   141b2:	2130      	movs	r1, #48	; 0x30
   141b4:	468c      	mov	ip, r1
   141b6:	44bc      	add	ip, r7
   141b8:	4463      	add	r3, ip
   141ba:	0092      	lsls	r2, r2, #2
   141bc:	58d3      	ldr	r3, [r2, r3]
   141be:	603b      	str	r3, [r7, #0]
   141c0:	2300      	movs	r3, #0
   141c2:	607b      	str	r3, [r7, #4]
   141c4:	4c2d      	ldr	r4, [pc, #180]	; (1427c <calc_gas_resistance+0x1e4>)
   141c6:	23a0      	movs	r3, #160	; 0xa0
   141c8:	2230      	movs	r2, #48	; 0x30
   141ca:	4694      	mov	ip, r2
   141cc:	44bc      	add	ip, r7
   141ce:	4463      	add	r3, ip
   141d0:	681a      	ldr	r2, [r3, #0]
   141d2:	685b      	ldr	r3, [r3, #4]
   141d4:	6838      	ldr	r0, [r7, #0]
   141d6:	6879      	ldr	r1, [r7, #4]
   141d8:	47a0      	blx	r4
   141da:	0003      	movs	r3, r0
   141dc:	000c      	movs	r4, r1
   141de:	05e2      	lsls	r2, r4, #23
   141e0:	0a59      	lsrs	r1, r3, #9
   141e2:	430a      	orrs	r2, r1
   141e4:	2190      	movs	r1, #144	; 0x90
   141e6:	2030      	movs	r0, #48	; 0x30
   141e8:	4684      	mov	ip, r0
   141ea:	44bc      	add	ip, r7
   141ec:	4461      	add	r1, ip
   141ee:	600a      	str	r2, [r1, #0]
   141f0:	1263      	asrs	r3, r4, #9
   141f2:	2294      	movs	r2, #148	; 0x94
   141f4:	2130      	movs	r1, #48	; 0x30
   141f6:	468c      	mov	ip, r1
   141f8:	44bc      	add	ip, r7
   141fa:	4462      	add	r2, ip
   141fc:	6013      	str	r3, [r2, #0]
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   141fe:	2398      	movs	r3, #152	; 0x98
   14200:	2230      	movs	r2, #48	; 0x30
   14202:	4694      	mov	ip, r2
   14204:	44bc      	add	ip, r7
   14206:	4463      	add	r3, ip
   14208:	685c      	ldr	r4, [r3, #4]
   1420a:	681b      	ldr	r3, [r3, #0]
   1420c:	07e2      	lsls	r2, r4, #31
   1420e:	0859      	lsrs	r1, r3, #1
   14210:	6239      	str	r1, [r7, #32]
   14212:	6a39      	ldr	r1, [r7, #32]
   14214:	4311      	orrs	r1, r2
   14216:	6239      	str	r1, [r7, #32]
   14218:	1063      	asrs	r3, r4, #1
   1421a:	627b      	str	r3, [r7, #36]	; 0x24
   1421c:	2390      	movs	r3, #144	; 0x90
   1421e:	2230      	movs	r2, #48	; 0x30
   14220:	4694      	mov	ip, r2
   14222:	44bc      	add	ip, r7
   14224:	4463      	add	r3, ip
   14226:	685c      	ldr	r4, [r3, #4]
   14228:	681b      	ldr	r3, [r3, #0]
   1422a:	6a38      	ldr	r0, [r7, #32]
   1422c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1422e:	18c0      	adds	r0, r0, r3
   14230:	4161      	adcs	r1, r4
   14232:	2398      	movs	r3, #152	; 0x98
   14234:	2230      	movs	r2, #48	; 0x30
   14236:	4694      	mov	ip, r2
   14238:	44bc      	add	ip, r7
   1423a:	4463      	add	r3, ip
   1423c:	685c      	ldr	r4, [r3, #4]
   1423e:	681b      	ldr	r3, [r3, #0]
   14240:	4d0f      	ldr	r5, [pc, #60]	; (14280 <calc_gas_resistance+0x1e8>)
   14242:	001a      	movs	r2, r3
   14244:	0023      	movs	r3, r4
   14246:	47a8      	blx	r5
   14248:	0003      	movs	r3, r0
   1424a:	000c      	movs	r4, r1
   1424c:	228c      	movs	r2, #140	; 0x8c
   1424e:	2130      	movs	r1, #48	; 0x30
   14250:	468c      	mov	ip, r1
   14252:	44bc      	add	ip, r7
   14254:	4462      	add	r2, ip
   14256:	6013      	str	r3, [r2, #0]

	return calc_gas_res;
   14258:	238c      	movs	r3, #140	; 0x8c
   1425a:	2230      	movs	r2, #48	; 0x30
   1425c:	4694      	mov	ip, r2
   1425e:	44bc      	add	ip, r7
   14260:	4463      	add	r3, ip
   14262:	681b      	ldr	r3, [r3, #0]
}
   14264:	0018      	movs	r0, r3
   14266:	46bd      	mov	sp, r7
   14268:	b037      	add	sp, #220	; 0xdc
   1426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1426c:	00038d50 	.word	0x00038d50
   14270:	00037935 	.word	0x00037935
   14274:	00038d90 	.word	0x00038d90
   14278:	0000053c 	.word	0x0000053c
   1427c:	000351e5 	.word	0x000351e5
   14280:	0003519d 	.word	0x0003519d

00014284 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
   14284:	b590      	push	{r4, r7, lr}
   14286:	b08b      	sub	sp, #44	; 0x2c
   14288:	af00      	add	r7, sp, #0
   1428a:	0002      	movs	r2, r0
   1428c:	6039      	str	r1, [r7, #0]
   1428e:	1dbb      	adds	r3, r7, #6
   14290:	801a      	strh	r2, [r3, #0]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
   14292:	1dbb      	adds	r3, r7, #6
   14294:	881a      	ldrh	r2, [r3, #0]
   14296:	23c8      	movs	r3, #200	; 0xc8
   14298:	005b      	lsls	r3, r3, #1
   1429a:	429a      	cmp	r2, r3
   1429c:	d903      	bls.n	142a6 <calc_heater_res+0x22>
		temp = 400;
   1429e:	1dbb      	adds	r3, r7, #6
   142a0:	22c8      	movs	r2, #200	; 0xc8
   142a2:	0052      	lsls	r2, r2, #1
   142a4:	801a      	strh	r2, [r3, #0]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   142a6:	683b      	ldr	r3, [r7, #0]
   142a8:	791b      	ldrb	r3, [r3, #4]
   142aa:	b25b      	sxtb	r3, r3
   142ac:	001a      	movs	r2, r3
   142ae:	683b      	ldr	r3, [r7, #0]
   142b0:	7d1b      	ldrb	r3, [r3, #20]
   142b2:	b25b      	sxtb	r3, r3
   142b4:	4353      	muls	r3, r2
   142b6:	0018      	movs	r0, r3
   142b8:	4b33      	ldr	r3, [pc, #204]	; (14388 <calc_heater_res+0x104>)
   142ba:	22fa      	movs	r2, #250	; 0xfa
   142bc:	0091      	lsls	r1, r2, #2
   142be:	4798      	blx	r3
   142c0:	0003      	movs	r3, r0
   142c2:	021b      	lsls	r3, r3, #8
   142c4:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   142c6:	683b      	ldr	r3, [r7, #0]
   142c8:	7c5b      	ldrb	r3, [r3, #17]
   142ca:	b25b      	sxtb	r3, r3
   142cc:	22c4      	movs	r2, #196	; 0xc4
   142ce:	0092      	lsls	r2, r2, #2
   142d0:	189c      	adds	r4, r3, r2
   142d2:	683b      	ldr	r3, [r7, #0]
   142d4:	2212      	movs	r2, #18
   142d6:	5e9b      	ldrsh	r3, [r3, r2]
   142d8:	4a2c      	ldr	r2, [pc, #176]	; (1438c <calc_heater_res+0x108>)
   142da:	4694      	mov	ip, r2
   142dc:	4463      	add	r3, ip
   142de:	1dba      	adds	r2, r7, #6
   142e0:	8812      	ldrh	r2, [r2, #0]
   142e2:	435a      	muls	r2, r3
   142e4:	0013      	movs	r3, r2
   142e6:	009b      	lsls	r3, r3, #2
   142e8:	189a      	adds	r2, r3, r2
   142ea:	4b27      	ldr	r3, [pc, #156]	; (14388 <calc_heater_res+0x104>)
   142ec:	2164      	movs	r1, #100	; 0x64
   142ee:	0010      	movs	r0, r2
   142f0:	4798      	blx	r3
   142f2:	0003      	movs	r3, r0
   142f4:	22c8      	movs	r2, #200	; 0xc8
   142f6:	0392      	lsls	r2, r2, #14
   142f8:	189a      	adds	r2, r3, r2
   142fa:	4b23      	ldr	r3, [pc, #140]	; (14388 <calc_heater_res+0x104>)
   142fc:	210a      	movs	r1, #10
   142fe:	0010      	movs	r0, r2
   14300:	4798      	blx	r3
   14302:	0003      	movs	r3, r0
   14304:	4363      	muls	r3, r4
   14306:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
   14308:	6a3b      	ldr	r3, [r7, #32]
   1430a:	2b00      	cmp	r3, #0
   1430c:	da00      	bge.n	14310 <calc_heater_res+0x8c>
   1430e:	3301      	adds	r3, #1
   14310:	105b      	asrs	r3, r3, #1
   14312:	001a      	movs	r2, r3
   14314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14316:	18d3      	adds	r3, r2, r3
   14318:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   1431a:	683b      	ldr	r3, [r7, #0]
   1431c:	2234      	movs	r2, #52	; 0x34
   1431e:	5c9b      	ldrb	r3, [r3, r2]
   14320:	1d1a      	adds	r2, r3, #4
   14322:	4b19      	ldr	r3, [pc, #100]	; (14388 <calc_heater_res+0x104>)
   14324:	0011      	movs	r1, r2
   14326:	69f8      	ldr	r0, [r7, #28]
   14328:	4798      	blx	r3
   1432a:	0003      	movs	r3, r0
   1432c:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   1432e:	683b      	ldr	r3, [r7, #0]
   14330:	2235      	movs	r2, #53	; 0x35
   14332:	569b      	ldrsb	r3, [r3, r2]
   14334:	001a      	movs	r2, r3
   14336:	0013      	movs	r3, r2
   14338:	019b      	lsls	r3, r3, #6
   1433a:	189b      	adds	r3, r3, r2
   1433c:	005b      	lsls	r3, r3, #1
   1433e:	189b      	adds	r3, r3, r2
   14340:	2280      	movs	r2, #128	; 0x80
   14342:	0252      	lsls	r2, r2, #9
   14344:	4694      	mov	ip, r2
   14346:	4463      	add	r3, ip
   14348:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   1434a:	4b0f      	ldr	r3, [pc, #60]	; (14388 <calc_heater_res+0x104>)
   1434c:	6979      	ldr	r1, [r7, #20]
   1434e:	69b8      	ldr	r0, [r7, #24]
   14350:	4798      	blx	r3
   14352:	0003      	movs	r3, r0
   14354:	3bfa      	subs	r3, #250	; 0xfa
   14356:	001a      	movs	r2, r3
   14358:	0013      	movs	r3, r2
   1435a:	011b      	lsls	r3, r3, #4
   1435c:	189b      	adds	r3, r3, r2
   1435e:	005b      	lsls	r3, r3, #1
   14360:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   14362:	693b      	ldr	r3, [r7, #16]
   14364:	3332      	adds	r3, #50	; 0x32
   14366:	001a      	movs	r2, r3
   14368:	4b07      	ldr	r3, [pc, #28]	; (14388 <calc_heater_res+0x104>)
   1436a:	2164      	movs	r1, #100	; 0x64
   1436c:	0010      	movs	r0, r2
   1436e:	4798      	blx	r3
   14370:	0003      	movs	r3, r0
   14372:	001a      	movs	r2, r3
   14374:	230f      	movs	r3, #15
   14376:	18fb      	adds	r3, r7, r3
   14378:	701a      	strb	r2, [r3, #0]

	return heatr_res;
   1437a:	230f      	movs	r3, #15
   1437c:	18fb      	adds	r3, r7, r3
   1437e:	781b      	ldrb	r3, [r3, #0]
}
   14380:	0018      	movs	r0, r3
   14382:	46bd      	mov	sp, r7
   14384:	b00b      	add	sp, #44	; 0x2c
   14386:	bd90      	pop	{r4, r7, pc}
   14388:	00034f49 	.word	0x00034f49
   1438c:	00025999 	.word	0x00025999

00014390 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
   14390:	b580      	push	{r7, lr}
   14392:	b084      	sub	sp, #16
   14394:	af00      	add	r7, sp, #0
   14396:	0002      	movs	r2, r0
   14398:	1dbb      	adds	r3, r7, #6
   1439a:	801a      	strh	r2, [r3, #0]
	uint8_t factor = 0;
   1439c:	230f      	movs	r3, #15
   1439e:	18fb      	adds	r3, r7, r3
   143a0:	2200      	movs	r2, #0
   143a2:	701a      	strb	r2, [r3, #0]
	uint8_t durval;

	if (dur >= 0xfc0) {
   143a4:	1dbb      	adds	r3, r7, #6
   143a6:	881b      	ldrh	r3, [r3, #0]
   143a8:	4a15      	ldr	r2, [pc, #84]	; (14400 <calc_heater_dur+0x70>)
   143aa:	4293      	cmp	r3, r2
   143ac:	d910      	bls.n	143d0 <calc_heater_dur+0x40>
		durval = 0xff; /* Max duration*/
   143ae:	230e      	movs	r3, #14
   143b0:	18fb      	adds	r3, r7, r3
   143b2:	22ff      	movs	r2, #255	; 0xff
   143b4:	701a      	strb	r2, [r3, #0]
   143b6:	e01b      	b.n	143f0 <calc_heater_dur+0x60>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
   143b8:	1dbb      	adds	r3, r7, #6
   143ba:	1dba      	adds	r2, r7, #6
   143bc:	8812      	ldrh	r2, [r2, #0]
   143be:	0892      	lsrs	r2, r2, #2
   143c0:	801a      	strh	r2, [r3, #0]
			factor += 1;
   143c2:	230f      	movs	r3, #15
   143c4:	18fb      	adds	r3, r7, r3
   143c6:	220f      	movs	r2, #15
   143c8:	18ba      	adds	r2, r7, r2
   143ca:	7812      	ldrb	r2, [r2, #0]
   143cc:	3201      	adds	r2, #1
   143ce:	701a      	strb	r2, [r3, #0]
		while (dur > 0x3F) {
   143d0:	1dbb      	adds	r3, r7, #6
   143d2:	881b      	ldrh	r3, [r3, #0]
   143d4:	2b3f      	cmp	r3, #63	; 0x3f
   143d6:	d8ef      	bhi.n	143b8 <calc_heater_dur+0x28>
		}
		durval = (uint8_t) (dur + (factor * 64));
   143d8:	1dbb      	adds	r3, r7, #6
   143da:	881b      	ldrh	r3, [r3, #0]
   143dc:	b2d9      	uxtb	r1, r3
   143de:	230f      	movs	r3, #15
   143e0:	18fb      	adds	r3, r7, r3
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	019b      	lsls	r3, r3, #6
   143e6:	b2da      	uxtb	r2, r3
   143e8:	230e      	movs	r3, #14
   143ea:	18fb      	adds	r3, r7, r3
   143ec:	188a      	adds	r2, r1, r2
   143ee:	701a      	strb	r2, [r3, #0]
	}

	return durval;
   143f0:	230e      	movs	r3, #14
   143f2:	18fb      	adds	r3, r7, r3
   143f4:	781b      	ldrb	r3, [r3, #0]
}
   143f6:	0018      	movs	r0, r3
   143f8:	46bd      	mov	sp, r7
   143fa:	b004      	add	sp, #16
   143fc:	bd80      	pop	{r7, pc}
   143fe:	46c0      	nop			; (mov r8, r8)
   14400:	00000fbf 	.word	0x00000fbf

00014404 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   14404:	b5b0      	push	{r4, r5, r7, lr}
   14406:	b08a      	sub	sp, #40	; 0x28
   14408:	af00      	add	r7, sp, #0
   1440a:	6078      	str	r0, [r7, #4]
   1440c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   1440e:	2308      	movs	r3, #8
   14410:	18fb      	adds	r3, r7, r3
   14412:	0018      	movs	r0, r3
   14414:	230f      	movs	r3, #15
   14416:	001a      	movs	r2, r3
   14418:	2100      	movs	r1, #0
   1441a:	4b76      	ldr	r3, [pc, #472]	; (145f4 <read_field_data+0x1f0>)
   1441c:	4798      	blx	r3
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
   1441e:	2326      	movs	r3, #38	; 0x26
   14420:	18fb      	adds	r3, r7, r3
   14422:	220a      	movs	r2, #10
   14424:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14426:	2327      	movs	r3, #39	; 0x27
   14428:	18fc      	adds	r4, r7, r3
   1442a:	683b      	ldr	r3, [r7, #0]
   1442c:	0018      	movs	r0, r3
   1442e:	4b72      	ldr	r3, [pc, #456]	; (145f8 <read_field_data+0x1f4>)
   14430:	4798      	blx	r3
   14432:	0003      	movs	r3, r0
   14434:	7023      	strb	r3, [r4, #0]
	do {
		if (rslt == BME680_OK) {
   14436:	2327      	movs	r3, #39	; 0x27
   14438:	18fb      	adds	r3, r7, r3
   1443a:	781b      	ldrb	r3, [r3, #0]
   1443c:	b25b      	sxtb	r3, r3
   1443e:	2b00      	cmp	r3, #0
   14440:	d000      	beq.n	14444 <read_field_data+0x40>
   14442:	e0b8      	b.n	145b6 <read_field_data+0x1b2>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   14444:	2327      	movs	r3, #39	; 0x27
   14446:	18fc      	adds	r4, r7, r3
   14448:	683b      	ldr	r3, [r7, #0]
   1444a:	2208      	movs	r2, #8
   1444c:	18b9      	adds	r1, r7, r2
   1444e:	220f      	movs	r2, #15
   14450:	201d      	movs	r0, #29
   14452:	4d6a      	ldr	r5, [pc, #424]	; (145fc <read_field_data+0x1f8>)
   14454:	47a8      	blx	r5
   14456:	0003      	movs	r3, r0
   14458:	7023      	strb	r3, [r4, #0]
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   1445a:	2308      	movs	r3, #8
   1445c:	18fb      	adds	r3, r7, r3
   1445e:	781b      	ldrb	r3, [r3, #0]
   14460:	227f      	movs	r2, #127	; 0x7f
   14462:	4393      	bics	r3, r2
   14464:	b2da      	uxtb	r2, r3
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   1446a:	2308      	movs	r3, #8
   1446c:	18fb      	adds	r3, r7, r3
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	220f      	movs	r2, #15
   14472:	4013      	ands	r3, r2
   14474:	b2da      	uxtb	r2, r3
   14476:	687b      	ldr	r3, [r7, #4]
   14478:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
   1447a:	2308      	movs	r3, #8
   1447c:	18fb      	adds	r3, r7, r3
   1447e:	785a      	ldrb	r2, [r3, #1]
   14480:	687b      	ldr	r3, [r7, #4]
   14482:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   14484:	2308      	movs	r3, #8
   14486:	18fb      	adds	r3, r7, r3
   14488:	789b      	ldrb	r3, [r3, #2]
   1448a:	031a      	lsls	r2, r3, #12
   1448c:	2308      	movs	r3, #8
   1448e:	18fb      	adds	r3, r7, r3
   14490:	78db      	ldrb	r3, [r3, #3]
   14492:	011b      	lsls	r3, r3, #4
   14494:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
   14496:	2208      	movs	r2, #8
   14498:	18ba      	adds	r2, r7, r2
   1449a:	7912      	ldrb	r2, [r2, #4]
   1449c:	0912      	lsrs	r2, r2, #4
   1449e:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   144a0:	4313      	orrs	r3, r2
   144a2:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144a4:	2308      	movs	r3, #8
   144a6:	18fb      	adds	r3, r7, r3
   144a8:	795b      	ldrb	r3, [r3, #5]
   144aa:	031a      	lsls	r2, r3, #12
   144ac:	2308      	movs	r3, #8
   144ae:	18fb      	adds	r3, r7, r3
   144b0:	799b      	ldrb	r3, [r3, #6]
   144b2:	011b      	lsls	r3, r3, #4
   144b4:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
   144b6:	2208      	movs	r2, #8
   144b8:	18ba      	adds	r2, r7, r2
   144ba:	79d2      	ldrb	r2, [r2, #7]
   144bc:	0912      	lsrs	r2, r2, #4
   144be:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144c0:	4313      	orrs	r3, r2
   144c2:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   144c4:	2308      	movs	r3, #8
   144c6:	18fb      	adds	r3, r7, r3
   144c8:	7a1b      	ldrb	r3, [r3, #8]
   144ca:	b29b      	uxth	r3, r3
   144cc:	021b      	lsls	r3, r3, #8
   144ce:	b299      	uxth	r1, r3
   144d0:	2308      	movs	r3, #8
   144d2:	18fb      	adds	r3, r7, r3
   144d4:	7a5b      	ldrb	r3, [r3, #9]
   144d6:	b29a      	uxth	r2, r3
   144d8:	231a      	movs	r3, #26
   144da:	18fb      	adds	r3, r7, r3
   144dc:	430a      	orrs	r2, r1
   144de:	801a      	strh	r2, [r3, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   144e0:	2308      	movs	r3, #8
   144e2:	18fb      	adds	r3, r7, r3
   144e4:	7b5b      	ldrb	r3, [r3, #13]
   144e6:	b29b      	uxth	r3, r3
   144e8:	009b      	lsls	r3, r3, #2
   144ea:	b299      	uxth	r1, r3
   144ec:	2308      	movs	r3, #8
   144ee:	18fb      	adds	r3, r7, r3
   144f0:	7b9b      	ldrb	r3, [r3, #14]
   144f2:	099b      	lsrs	r3, r3, #6
   144f4:	b2db      	uxtb	r3, r3
   144f6:	b29a      	uxth	r2, r3
   144f8:	2318      	movs	r3, #24
   144fa:	18fb      	adds	r3, r7, r3
   144fc:	430a      	orrs	r2, r1
   144fe:	801a      	strh	r2, [r3, #0]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
   14500:	2308      	movs	r3, #8
   14502:	18fb      	adds	r3, r7, r3
   14504:	7b9a      	ldrb	r2, [r3, #14]
   14506:	2317      	movs	r3, #23
   14508:	18fb      	adds	r3, r7, r3
   1450a:	210f      	movs	r1, #15
   1450c:	400a      	ands	r2, r1
   1450e:	701a      	strb	r2, [r3, #0]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   14510:	687b      	ldr	r3, [r7, #4]
   14512:	781b      	ldrb	r3, [r3, #0]
   14514:	b25a      	sxtb	r2, r3
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	7b9b      	ldrb	r3, [r3, #14]
   1451c:	b25b      	sxtb	r3, r3
   1451e:	2120      	movs	r1, #32
   14520:	400b      	ands	r3, r1
   14522:	b25b      	sxtb	r3, r3
   14524:	4313      	orrs	r3, r2
   14526:	b25b      	sxtb	r3, r3
   14528:	b2da      	uxtb	r2, r3
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   1452e:	687b      	ldr	r3, [r7, #4]
   14530:	781b      	ldrb	r3, [r3, #0]
   14532:	b25a      	sxtb	r2, r3
   14534:	2308      	movs	r3, #8
   14536:	18fb      	adds	r3, r7, r3
   14538:	7b9b      	ldrb	r3, [r3, #14]
   1453a:	b25b      	sxtb	r3, r3
   1453c:	2110      	movs	r1, #16
   1453e:	400b      	ands	r3, r1
   14540:	b25b      	sxtb	r3, r3
   14542:	4313      	orrs	r3, r2
   14544:	b25b      	sxtb	r3, r3
   14546:	b2da      	uxtb	r2, r3
   14548:	687b      	ldr	r3, [r7, #4]
   1454a:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	781b      	ldrb	r3, [r3, #0]
   14550:	b25b      	sxtb	r3, r3
   14552:	2b00      	cmp	r3, #0
   14554:	da2b      	bge.n	145ae <read_field_data+0x1aa>
				data->temperature = calc_temperature(adc_temp, dev);
   14556:	683a      	ldr	r2, [r7, #0]
   14558:	69fb      	ldr	r3, [r7, #28]
   1455a:	0011      	movs	r1, r2
   1455c:	0018      	movs	r0, r3
   1455e:	4b28      	ldr	r3, [pc, #160]	; (14600 <read_field_data+0x1fc>)
   14560:	4798      	blx	r3
   14562:	0003      	movs	r3, r0
   14564:	001a      	movs	r2, r3
   14566:	687b      	ldr	r3, [r7, #4]
   14568:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
   1456a:	683a      	ldr	r2, [r7, #0]
   1456c:	6a3b      	ldr	r3, [r7, #32]
   1456e:	0011      	movs	r1, r2
   14570:	0018      	movs	r0, r3
   14572:	4b24      	ldr	r3, [pc, #144]	; (14604 <read_field_data+0x200>)
   14574:	4798      	blx	r3
   14576:	0002      	movs	r2, r0
   14578:	687b      	ldr	r3, [r7, #4]
   1457a:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
   1457c:	683a      	ldr	r2, [r7, #0]
   1457e:	231a      	movs	r3, #26
   14580:	18fb      	adds	r3, r7, r3
   14582:	881b      	ldrh	r3, [r3, #0]
   14584:	0011      	movs	r1, r2
   14586:	0018      	movs	r0, r3
   14588:	4b1f      	ldr	r3, [pc, #124]	; (14608 <read_field_data+0x204>)
   1458a:	4798      	blx	r3
   1458c:	0002      	movs	r2, r0
   1458e:	687b      	ldr	r3, [r7, #4]
   14590:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   14592:	683a      	ldr	r2, [r7, #0]
   14594:	2317      	movs	r3, #23
   14596:	18fb      	adds	r3, r7, r3
   14598:	7819      	ldrb	r1, [r3, #0]
   1459a:	2318      	movs	r3, #24
   1459c:	18fb      	adds	r3, r7, r3
   1459e:	881b      	ldrh	r3, [r3, #0]
   145a0:	0018      	movs	r0, r3
   145a2:	4b1a      	ldr	r3, [pc, #104]	; (1460c <read_field_data+0x208>)
   145a4:	4798      	blx	r3
   145a6:	0002      	movs	r2, r0
   145a8:	687b      	ldr	r3, [r7, #4]
   145aa:	611a      	str	r2, [r3, #16]
				break;
   145ac:	e010      	b.n	145d0 <read_field_data+0x1cc>
			}
			/* Delay to poll the data */
			dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   145ae:	683b      	ldr	r3, [r7, #0]
   145b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   145b2:	200a      	movs	r0, #10
   145b4:	4798      	blx	r3
		}
		tries--;
   145b6:	2326      	movs	r3, #38	; 0x26
   145b8:	18fb      	adds	r3, r7, r3
   145ba:	781a      	ldrb	r2, [r3, #0]
   145bc:	2326      	movs	r3, #38	; 0x26
   145be:	18fb      	adds	r3, r7, r3
   145c0:	3a01      	subs	r2, #1
   145c2:	701a      	strb	r2, [r3, #0]
	} while (tries);
   145c4:	2326      	movs	r3, #38	; 0x26
   145c6:	18fb      	adds	r3, r7, r3
   145c8:	781b      	ldrb	r3, [r3, #0]
   145ca:	2b00      	cmp	r3, #0
   145cc:	d000      	beq.n	145d0 <read_field_data+0x1cc>
   145ce:	e732      	b.n	14436 <read_field_data+0x32>

	if (!tries)
   145d0:	2326      	movs	r3, #38	; 0x26
   145d2:	18fb      	adds	r3, r7, r3
   145d4:	781b      	ldrb	r3, [r3, #0]
   145d6:	2b00      	cmp	r3, #0
   145d8:	d103      	bne.n	145e2 <read_field_data+0x1de>
		rslt = BME680_W_NO_NEW_DATA;
   145da:	2327      	movs	r3, #39	; 0x27
   145dc:	18fb      	adds	r3, r7, r3
   145de:	2202      	movs	r2, #2
   145e0:	701a      	strb	r2, [r3, #0]

	return rslt;
   145e2:	2327      	movs	r3, #39	; 0x27
   145e4:	18fb      	adds	r3, r7, r3
   145e6:	781b      	ldrb	r3, [r3, #0]
   145e8:	b25b      	sxtb	r3, r3
}
   145ea:	0018      	movs	r0, r3
   145ec:	46bd      	mov	sp, r7
   145ee:	b00a      	add	sp, #40	; 0x28
   145f0:	bdb0      	pop	{r4, r5, r7, pc}
   145f2:	46c0      	nop			; (mov r8, r8)
   145f4:	0003796b 	.word	0x0003796b
   145f8:	0001482f 	.word	0x0001482f
   145fc:	00012ee5 	.word	0x00012ee5
   14600:	00013d31 	.word	0x00013d31
   14604:	00013e21 	.word	0x00013e21
   14608:	00013f79 	.word	0x00013f79
   1460c:	00014099 	.word	0x00014099

00014610 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   14610:	b590      	push	{r4, r7, lr}
   14612:	b085      	sub	sp, #20
   14614:	af00      	add	r7, sp, #0
   14616:	0002      	movs	r2, r0
   14618:	6039      	str	r1, [r7, #0]
   1461a:	1dfb      	adds	r3, r7, #7
   1461c:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   1461e:	230f      	movs	r3, #15
   14620:	18fc      	adds	r4, r7, r3
   14622:	683b      	ldr	r3, [r7, #0]
   14624:	0018      	movs	r0, r3
   14626:	4b3c      	ldr	r3, [pc, #240]	; (14718 <set_mem_page+0x108>)
   14628:	4798      	blx	r3
   1462a:	0003      	movs	r3, r0
   1462c:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1462e:	230f      	movs	r3, #15
   14630:	18fb      	adds	r3, r7, r3
   14632:	781b      	ldrb	r3, [r3, #0]
   14634:	b25b      	sxtb	r3, r3
   14636:	2b00      	cmp	r3, #0
   14638:	d166      	bne.n	14708 <set_mem_page+0xf8>
		if (reg_addr > 0x7f)
   1463a:	1dfb      	adds	r3, r7, #7
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	b25b      	sxtb	r3, r3
   14640:	2b00      	cmp	r3, #0
   14642:	da04      	bge.n	1464e <set_mem_page+0x3e>
			mem_page = BME680_MEM_PAGE1;
   14644:	230e      	movs	r3, #14
   14646:	18fb      	adds	r3, r7, r3
   14648:	2200      	movs	r2, #0
   1464a:	701a      	strb	r2, [r3, #0]
   1464c:	e003      	b.n	14656 <set_mem_page+0x46>
		else
			mem_page = BME680_MEM_PAGE0;
   1464e:	230e      	movs	r3, #14
   14650:	18fb      	adds	r3, r7, r3
   14652:	2210      	movs	r2, #16
   14654:	701a      	strb	r2, [r3, #0]

		if (mem_page != dev->mem_page) {
   14656:	683b      	ldr	r3, [r7, #0]
   14658:	78db      	ldrb	r3, [r3, #3]
   1465a:	220e      	movs	r2, #14
   1465c:	18ba      	adds	r2, r7, r2
   1465e:	7812      	ldrb	r2, [r2, #0]
   14660:	429a      	cmp	r2, r3
   14662:	d051      	beq.n	14708 <set_mem_page+0xf8>
			dev->mem_page = mem_page;
   14664:	683b      	ldr	r3, [r7, #0]
   14666:	220e      	movs	r2, #14
   14668:	18ba      	adds	r2, r7, r2
   1466a:	7812      	ldrb	r2, [r2, #0]
   1466c:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   1466e:	683b      	ldr	r3, [r7, #0]
   14670:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14672:	683b      	ldr	r3, [r7, #0]
   14674:	7858      	ldrb	r0, [r3, #1]
   14676:	230d      	movs	r3, #13
   14678:	18fa      	adds	r2, r7, r3
   1467a:	2301      	movs	r3, #1
   1467c:	21f3      	movs	r1, #243	; 0xf3
   1467e:	47a0      	blx	r4
   14680:	0003      	movs	r3, r0
   14682:	0019      	movs	r1, r3
   14684:	683b      	ldr	r3, [r7, #0]
   14686:	2254      	movs	r2, #84	; 0x54
   14688:	5499      	strb	r1, [r3, r2]
			if (dev->com_rslt != 0)
   1468a:	683b      	ldr	r3, [r7, #0]
   1468c:	2254      	movs	r2, #84	; 0x54
   1468e:	569b      	ldrsb	r3, [r3, r2]
   14690:	2b00      	cmp	r3, #0
   14692:	d003      	beq.n	1469c <set_mem_page+0x8c>
				rslt = BME680_E_COM_FAIL;
   14694:	230f      	movs	r3, #15
   14696:	18fb      	adds	r3, r7, r3
   14698:	22fe      	movs	r2, #254	; 0xfe
   1469a:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK) {
   1469c:	230f      	movs	r3, #15
   1469e:	18fb      	adds	r3, r7, r3
   146a0:	781b      	ldrb	r3, [r3, #0]
   146a2:	b25b      	sxtb	r3, r3
   146a4:	2b00      	cmp	r3, #0
   146a6:	d12f      	bne.n	14708 <set_mem_page+0xf8>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   146a8:	230d      	movs	r3, #13
   146aa:	18fb      	adds	r3, r7, r3
   146ac:	781b      	ldrb	r3, [r3, #0]
   146ae:	2210      	movs	r2, #16
   146b0:	4393      	bics	r3, r2
   146b2:	b2da      	uxtb	r2, r3
   146b4:	230d      	movs	r3, #13
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	701a      	strb	r2, [r3, #0]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   146ba:	683b      	ldr	r3, [r7, #0]
   146bc:	78db      	ldrb	r3, [r3, #3]
   146be:	b25b      	sxtb	r3, r3
   146c0:	2210      	movs	r2, #16
   146c2:	4013      	ands	r3, r2
   146c4:	b25a      	sxtb	r2, r3
   146c6:	230d      	movs	r3, #13
   146c8:	18fb      	adds	r3, r7, r3
   146ca:	781b      	ldrb	r3, [r3, #0]
   146cc:	b25b      	sxtb	r3, r3
   146ce:	4313      	orrs	r3, r2
   146d0:	b25b      	sxtb	r3, r3
   146d2:	b2da      	uxtb	r2, r3
   146d4:	230d      	movs	r3, #13
   146d6:	18fb      	adds	r3, r7, r3
   146d8:	701a      	strb	r2, [r3, #0]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   146da:	683b      	ldr	r3, [r7, #0]
   146dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   146de:	683b      	ldr	r3, [r7, #0]
   146e0:	7858      	ldrb	r0, [r3, #1]
   146e2:	230d      	movs	r3, #13
   146e4:	18fa      	adds	r2, r7, r3
   146e6:	2301      	movs	r3, #1
   146e8:	2173      	movs	r1, #115	; 0x73
   146ea:	47a0      	blx	r4
   146ec:	0003      	movs	r3, r0
   146ee:	0019      	movs	r1, r3
   146f0:	683b      	ldr	r3, [r7, #0]
   146f2:	2254      	movs	r2, #84	; 0x54
   146f4:	5499      	strb	r1, [r3, r2]
					&reg, 1);
				if (dev->com_rslt != 0)
   146f6:	683b      	ldr	r3, [r7, #0]
   146f8:	2254      	movs	r2, #84	; 0x54
   146fa:	569b      	ldrsb	r3, [r3, r2]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d003      	beq.n	14708 <set_mem_page+0xf8>
					rslt = BME680_E_COM_FAIL;
   14700:	230f      	movs	r3, #15
   14702:	18fb      	adds	r3, r7, r3
   14704:	22fe      	movs	r2, #254	; 0xfe
   14706:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return rslt;
   14708:	230f      	movs	r3, #15
   1470a:	18fb      	adds	r3, r7, r3
   1470c:	781b      	ldrb	r3, [r3, #0]
   1470e:	b25b      	sxtb	r3, r3
}
   14710:	0018      	movs	r0, r3
   14712:	46bd      	mov	sp, r7
   14714:	b005      	add	sp, #20
   14716:	bd90      	pop	{r4, r7, pc}
   14718:	0001482f 	.word	0x0001482f

0001471c <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   1471c:	b590      	push	{r4, r7, lr}
   1471e:	b085      	sub	sp, #20
   14720:	af00      	add	r7, sp, #0
   14722:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14724:	230f      	movs	r3, #15
   14726:	18fc      	adds	r4, r7, r3
   14728:	687b      	ldr	r3, [r7, #4]
   1472a:	0018      	movs	r0, r3
   1472c:	4b18      	ldr	r3, [pc, #96]	; (14790 <get_mem_page+0x74>)
   1472e:	4798      	blx	r3
   14730:	0003      	movs	r3, r0
   14732:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   14734:	230f      	movs	r3, #15
   14736:	18fb      	adds	r3, r7, r3
   14738:	781b      	ldrb	r3, [r3, #0]
   1473a:	b25b      	sxtb	r3, r3
   1473c:	2b00      	cmp	r3, #0
   1473e:	d11f      	bne.n	14780 <get_mem_page+0x64>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   14740:	687b      	ldr	r3, [r7, #4]
   14742:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14744:	687b      	ldr	r3, [r7, #4]
   14746:	7858      	ldrb	r0, [r3, #1]
   14748:	230e      	movs	r3, #14
   1474a:	18fa      	adds	r2, r7, r3
   1474c:	2301      	movs	r3, #1
   1474e:	21f3      	movs	r1, #243	; 0xf3
   14750:	47a0      	blx	r4
   14752:	0003      	movs	r3, r0
   14754:	0019      	movs	r1, r3
   14756:	687b      	ldr	r3, [r7, #4]
   14758:	2254      	movs	r2, #84	; 0x54
   1475a:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   1475c:	687b      	ldr	r3, [r7, #4]
   1475e:	2254      	movs	r2, #84	; 0x54
   14760:	569b      	ldrsb	r3, [r3, r2]
   14762:	2b00      	cmp	r3, #0
   14764:	d004      	beq.n	14770 <get_mem_page+0x54>
			rslt = BME680_E_COM_FAIL;
   14766:	230f      	movs	r3, #15
   14768:	18fb      	adds	r3, r7, r3
   1476a:	22fe      	movs	r2, #254	; 0xfe
   1476c:	701a      	strb	r2, [r3, #0]
   1476e:	e007      	b.n	14780 <get_mem_page+0x64>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   14770:	230e      	movs	r3, #14
   14772:	18fb      	adds	r3, r7, r3
   14774:	781b      	ldrb	r3, [r3, #0]
   14776:	2210      	movs	r2, #16
   14778:	4013      	ands	r3, r2
   1477a:	b2da      	uxtb	r2, r3
   1477c:	687b      	ldr	r3, [r7, #4]
   1477e:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
   14780:	230f      	movs	r3, #15
   14782:	18fb      	adds	r3, r7, r3
   14784:	781b      	ldrb	r3, [r3, #0]
   14786:	b25b      	sxtb	r3, r3
}
   14788:	0018      	movs	r0, r3
   1478a:	46bd      	mov	sp, r7
   1478c:	b005      	add	sp, #20
   1478e:	bd90      	pop	{r4, r7, pc}
   14790:	0001482f 	.word	0x0001482f

00014794 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
   14794:	b580      	push	{r7, lr}
   14796:	b086      	sub	sp, #24
   14798:	af00      	add	r7, sp, #0
   1479a:	60f8      	str	r0, [r7, #12]
   1479c:	0008      	movs	r0, r1
   1479e:	0011      	movs	r1, r2
   147a0:	607b      	str	r3, [r7, #4]
   147a2:	230b      	movs	r3, #11
   147a4:	18fb      	adds	r3, r7, r3
   147a6:	1c02      	adds	r2, r0, #0
   147a8:	701a      	strb	r2, [r3, #0]
   147aa:	230a      	movs	r3, #10
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	1c0a      	adds	r2, r1, #0
   147b0:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME680_OK;
   147b2:	2317      	movs	r3, #23
   147b4:	18fb      	adds	r3, r7, r3
   147b6:	2200      	movs	r2, #0
   147b8:	701a      	strb	r2, [r3, #0]

	if (value != NULL) {
   147ba:	68fb      	ldr	r3, [r7, #12]
   147bc:	2b00      	cmp	r3, #0
   147be:	d02a      	beq.n	14816 <boundary_check+0x82>
		/* Check if value is below minimum value */
		if (*value < min) {
   147c0:	68fb      	ldr	r3, [r7, #12]
   147c2:	781b      	ldrb	r3, [r3, #0]
   147c4:	220b      	movs	r2, #11
   147c6:	18ba      	adds	r2, r7, r2
   147c8:	7812      	ldrb	r2, [r2, #0]
   147ca:	429a      	cmp	r2, r3
   147cc:	d90d      	bls.n	147ea <boundary_check+0x56>
			/* Auto correct the invalid value to minimum value */
			*value = min;
   147ce:	68fb      	ldr	r3, [r7, #12]
   147d0:	220b      	movs	r2, #11
   147d2:	18ba      	adds	r2, r7, r2
   147d4:	7812      	ldrb	r2, [r2, #0]
   147d6:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	2246      	movs	r2, #70	; 0x46
   147dc:	5c9b      	ldrb	r3, [r3, r2]
   147de:	2201      	movs	r2, #1
   147e0:	4313      	orrs	r3, r2
   147e2:	b2d9      	uxtb	r1, r3
   147e4:	687b      	ldr	r3, [r7, #4]
   147e6:	2246      	movs	r2, #70	; 0x46
   147e8:	5499      	strb	r1, [r3, r2]
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   147ea:	68fb      	ldr	r3, [r7, #12]
   147ec:	781b      	ldrb	r3, [r3, #0]
   147ee:	220a      	movs	r2, #10
   147f0:	18ba      	adds	r2, r7, r2
   147f2:	7812      	ldrb	r2, [r2, #0]
   147f4:	429a      	cmp	r2, r3
   147f6:	d212      	bcs.n	1481e <boundary_check+0x8a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   147f8:	68fb      	ldr	r3, [r7, #12]
   147fa:	220a      	movs	r2, #10
   147fc:	18ba      	adds	r2, r7, r2
   147fe:	7812      	ldrb	r2, [r2, #0]
   14800:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   14802:	687b      	ldr	r3, [r7, #4]
   14804:	2246      	movs	r2, #70	; 0x46
   14806:	5c9b      	ldrb	r3, [r3, r2]
   14808:	2202      	movs	r2, #2
   1480a:	4313      	orrs	r3, r2
   1480c:	b2d9      	uxtb	r1, r3
   1480e:	687b      	ldr	r3, [r7, #4]
   14810:	2246      	movs	r2, #70	; 0x46
   14812:	5499      	strb	r1, [r3, r2]
   14814:	e003      	b.n	1481e <boundary_check+0x8a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   14816:	2317      	movs	r3, #23
   14818:	18fb      	adds	r3, r7, r3
   1481a:	22ff      	movs	r2, #255	; 0xff
   1481c:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   1481e:	2317      	movs	r3, #23
   14820:	18fb      	adds	r3, r7, r3
   14822:	781b      	ldrb	r3, [r3, #0]
   14824:	b25b      	sxtb	r3, r3
}
   14826:	0018      	movs	r0, r3
   14828:	46bd      	mov	sp, r7
   1482a:	b006      	add	sp, #24
   1482c:	bd80      	pop	{r7, pc}

0001482e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
   1482e:	b580      	push	{r7, lr}
   14830:	b084      	sub	sp, #16
   14832:	af00      	add	r7, sp, #0
   14834:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms_bme == NULL)) {
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	2b00      	cmp	r3, #0
   1483a:	d00b      	beq.n	14854 <null_ptr_check+0x26>
   1483c:	687b      	ldr	r3, [r7, #4]
   1483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14840:	2b00      	cmp	r3, #0
   14842:	d007      	beq.n	14854 <null_ptr_check+0x26>
   14844:	687b      	ldr	r3, [r7, #4]
   14846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   14848:	2b00      	cmp	r3, #0
   1484a:	d003      	beq.n	14854 <null_ptr_check+0x26>
   1484c:	687b      	ldr	r3, [r7, #4]
   1484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   14850:	2b00      	cmp	r3, #0
   14852:	d104      	bne.n	1485e <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   14854:	230f      	movs	r3, #15
   14856:	18fb      	adds	r3, r7, r3
   14858:	22ff      	movs	r2, #255	; 0xff
   1485a:	701a      	strb	r2, [r3, #0]
   1485c:	e003      	b.n	14866 <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
   1485e:	230f      	movs	r3, #15
   14860:	18fb      	adds	r3, r7, r3
   14862:	2200      	movs	r2, #0
   14864:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   14866:	230f      	movs	r3, #15
   14868:	18fb      	adds	r3, r7, r3
   1486a:	781b      	ldrb	r3, [r3, #0]
   1486c:	b25b      	sxtb	r3, r3
}
   1486e:	0018      	movs	r0, r3
   14870:	46bd      	mov	sp, r7
   14872:	b004      	add	sp, #16
   14874:	bd80      	pop	{r7, pc}
	...

00014878 <bme_write>:
//read buffer and write buffer function
uint8_t msgOutImu[64]; ///<USE ME AS A BUFFER FOR platform_write and platform_read
I2C_Data bmeData;
int8_t bme_write(uint8_t dev_id,uint8_t reg, uint8_t *bufp,uint16_t len)
{
   14878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1487a:	b087      	sub	sp, #28
   1487c:	af00      	add	r7, sp, #0
   1487e:	0006      	movs	r6, r0
   14880:	0008      	movs	r0, r1
   14882:	603a      	str	r2, [r7, #0]
   14884:	0019      	movs	r1, r3
   14886:	1dfb      	adds	r3, r7, #7
   14888:	1c32      	adds	r2, r6, #0
   1488a:	701a      	strb	r2, [r3, #0]
   1488c:	1dbb      	adds	r3, r7, #6
   1488e:	1c02      	adds	r2, r0, #0
   14890:	701a      	strb	r2, [r3, #0]
   14892:	1d3b      	adds	r3, r7, #4
   14894:	1c0a      	adds	r2, r1, #0
   14896:	801a      	strh	r2, [r3, #0]
	int8_t error = ERROR_NONE;
   14898:	230f      	movs	r3, #15
   1489a:	18fb      	adds	r3, r7, r3
   1489c:	2200      	movs	r2, #0
   1489e:	701a      	strb	r2, [r3, #0]

	msgOutImu[0] = reg;
   148a0:	4b25      	ldr	r3, [pc, #148]	; (14938 <bme_write+0xc0>)
   148a2:	1dba      	adds	r2, r7, #6
   148a4:	7812      	ldrb	r2, [r2, #0]
   148a6:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148a8:	2200      	movs	r2, #0
   148aa:	2300      	movs	r3, #0
   148ac:	613a      	str	r2, [r7, #16]
   148ae:	617b      	str	r3, [r7, #20]
   148b0:	e015      	b.n	148de <bme_write+0x66>
		msgOutImu[i+1] = bufp[i];
   148b2:	693a      	ldr	r2, [r7, #16]
   148b4:	697b      	ldr	r3, [r7, #20]
   148b6:	2001      	movs	r0, #1
   148b8:	2100      	movs	r1, #0
   148ba:	1812      	adds	r2, r2, r0
   148bc:	414b      	adcs	r3, r1
   148be:	6939      	ldr	r1, [r7, #16]
   148c0:	6838      	ldr	r0, [r7, #0]
   148c2:	1841      	adds	r1, r0, r1
   148c4:	7808      	ldrb	r0, [r1, #0]
   148c6:	491c      	ldr	r1, [pc, #112]	; (14938 <bme_write+0xc0>)
   148c8:	188b      	adds	r3, r1, r2
   148ca:	1c02      	adds	r2, r0, #0
   148cc:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148ce:	693a      	ldr	r2, [r7, #16]
   148d0:	697b      	ldr	r3, [r7, #20]
   148d2:	2001      	movs	r0, #1
   148d4:	2100      	movs	r1, #0
   148d6:	1812      	adds	r2, r2, r0
   148d8:	414b      	adcs	r3, r1
   148da:	613a      	str	r2, [r7, #16]
   148dc:	617b      	str	r3, [r7, #20]
   148de:	1d3b      	adds	r3, r7, #4
   148e0:	881b      	ldrh	r3, [r3, #0]
   148e2:	b29b      	uxth	r3, r3
   148e4:	001c      	movs	r4, r3
   148e6:	2300      	movs	r3, #0
   148e8:	001d      	movs	r5, r3
   148ea:	697b      	ldr	r3, [r7, #20]
   148ec:	42ab      	cmp	r3, r5
   148ee:	d3e0      	bcc.n	148b2 <bme_write+0x3a>
   148f0:	697b      	ldr	r3, [r7, #20]
   148f2:	42ab      	cmp	r3, r5
   148f4:	d102      	bne.n	148fc <bme_write+0x84>
   148f6:	693b      	ldr	r3, [r7, #16]
   148f8:	42a3      	cmp	r3, r4
   148fa:	d3da      	bcc.n	148b2 <bme_write+0x3a>
	}

	bmeData.address = 0x76;
   148fc:	4b0f      	ldr	r3, [pc, #60]	; (1493c <bme_write+0xc4>)
   148fe:	2276      	movs	r2, #118	; 0x76
   14900:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   14902:	4b0e      	ldr	r3, [pc, #56]	; (1493c <bme_write+0xc4>)
   14904:	4a0c      	ldr	r2, [pc, #48]	; (14938 <bme_write+0xc0>)
   14906:	605a      	str	r2, [r3, #4]
	bmeData.lenOut = len + 1;
   14908:	1d3b      	adds	r3, r7, #4
   1490a:	881b      	ldrh	r3, [r3, #0]
   1490c:	3301      	adds	r3, #1
   1490e:	b29a      	uxth	r2, r3
   14910:	4b0a      	ldr	r3, [pc, #40]	; (1493c <bme_write+0xc4>)
   14912:	81da      	strh	r2, [r3, #14]

	error = (int8_t)I2cWriteDataWait(&bmeData, 100);
   14914:	4b09      	ldr	r3, [pc, #36]	; (1493c <bme_write+0xc4>)
   14916:	2164      	movs	r1, #100	; 0x64
   14918:	0018      	movs	r0, r3
   1491a:	4b09      	ldr	r3, [pc, #36]	; (14940 <bme_write+0xc8>)
   1491c:	4798      	blx	r3
   1491e:	0002      	movs	r2, r0
   14920:	230f      	movs	r3, #15
   14922:	18fb      	adds	r3, r7, r3
   14924:	701a      	strb	r2, [r3, #0]
	return error;
   14926:	230f      	movs	r3, #15
   14928:	18fb      	adds	r3, r7, r3
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	b25b      	sxtb	r3, r3
}
   1492e:	0018      	movs	r0, r3
   14930:	46bd      	mov	sp, r7
   14932:	b007      	add	sp, #28
   14934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14936:	46c0      	nop			; (mov r8, r8)
   14938:	20004600 	.word	0x20004600
   1493c:	20004640 	.word	0x20004640
   14940:	00015a49 	.word	0x00015a49

00014944 <bme_read>:
int8_t bme_read(uint8_t dev_id,uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14944:	b590      	push	{r4, r7, lr}
   14946:	b085      	sub	sp, #20
   14948:	af00      	add	r7, sp, #0
   1494a:	0004      	movs	r4, r0
   1494c:	0008      	movs	r0, r1
   1494e:	603a      	str	r2, [r7, #0]
   14950:	0019      	movs	r1, r3
   14952:	1dfb      	adds	r3, r7, #7
   14954:	1c22      	adds	r2, r4, #0
   14956:	701a      	strb	r2, [r3, #0]
   14958:	1dbb      	adds	r3, r7, #6
   1495a:	1c02      	adds	r2, r0, #0
   1495c:	701a      	strb	r2, [r3, #0]
   1495e:	1d3b      	adds	r3, r7, #4
   14960:	1c0a      	adds	r2, r1, #0
   14962:	801a      	strh	r2, [r3, #0]
	
	int8_t error = ERROR_NONE;
   14964:	230f      	movs	r3, #15
   14966:	18fb      	adds	r3, r7, r3
   14968:	2200      	movs	r2, #0
   1496a:	701a      	strb	r2, [r3, #0]

	bmeData.address = 0x76;
   1496c:	4b12      	ldr	r3, [pc, #72]	; (149b8 <bme_read+0x74>)
   1496e:	2276      	movs	r2, #118	; 0x76
   14970:	701a      	strb	r2, [r3, #0]
	bmeData.lenIn = len;
   14972:	4b11      	ldr	r3, [pc, #68]	; (149b8 <bme_read+0x74>)
   14974:	1d3a      	adds	r2, r7, #4
   14976:	8812      	ldrh	r2, [r2, #0]
   14978:	819a      	strh	r2, [r3, #12]
	bmeData.msgIn = bufp;
   1497a:	4b0f      	ldr	r3, [pc, #60]	; (149b8 <bme_read+0x74>)
   1497c:	683a      	ldr	r2, [r7, #0]
   1497e:	609a      	str	r2, [r3, #8]
	bmeData.lenOut = 1;
   14980:	4b0d      	ldr	r3, [pc, #52]	; (149b8 <bme_read+0x74>)
   14982:	2201      	movs	r2, #1
   14984:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   14986:	4b0d      	ldr	r3, [pc, #52]	; (149bc <bme_read+0x78>)
   14988:	1dba      	adds	r2, r7, #6
   1498a:	7812      	ldrb	r2, [r2, #0]
   1498c:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   1498e:	4b0a      	ldr	r3, [pc, #40]	; (149b8 <bme_read+0x74>)
   14990:	4a0a      	ldr	r2, [pc, #40]	; (149bc <bme_read+0x78>)
   14992:	605a      	str	r2, [r3, #4]

	error = (int8_t)I2cReadDataWait(&bmeData, 50, 100);
   14994:	4b08      	ldr	r3, [pc, #32]	; (149b8 <bme_read+0x74>)
   14996:	2264      	movs	r2, #100	; 0x64
   14998:	2132      	movs	r1, #50	; 0x32
   1499a:	0018      	movs	r0, r3
   1499c:	4b08      	ldr	r3, [pc, #32]	; (149c0 <bme_read+0x7c>)
   1499e:	4798      	blx	r3
   149a0:	0002      	movs	r2, r0
   149a2:	230f      	movs	r3, #15
   149a4:	18fb      	adds	r3, r7, r3
   149a6:	701a      	strb	r2, [r3, #0]
	return error;
   149a8:	230f      	movs	r3, #15
   149aa:	18fb      	adds	r3, r7, r3
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	b25b      	sxtb	r3, r3
}
   149b0:	0018      	movs	r0, r3
   149b2:	46bd      	mov	sp, r7
   149b4:	b005      	add	sp, #20
   149b6:	bd90      	pop	{r4, r7, pc}
   149b8:	20004640 	.word	0x20004640
   149bc:	20004600 	.word	0x20004600
   149c0:	00015b21 	.word	0x00015b21

000149c4 <user_delay_ms>:
void user_delay_ms(uint32_t period){
   149c4:	b580      	push	{r7, lr}
   149c6:	b084      	sub	sp, #16
   149c8:	af00      	add	r7, sp, #0
   149ca:	6078      	str	r0, [r7, #4]
	{
	for(int j = 0;j<period;j++)
   149cc:	2300      	movs	r3, #0
   149ce:	60fb      	str	r3, [r7, #12]
   149d0:	e00e      	b.n	149f0 <user_delay_ms+0x2c>
	for(int i = 0;i<307;i++)
   149d2:	2300      	movs	r3, #0
   149d4:	60bb      	str	r3, [r7, #8]
   149d6:	e003      	b.n	149e0 <user_delay_ms+0x1c>
	__asm("nop");
   149d8:	46c0      	nop			; (mov r8, r8)
	for(int i = 0;i<307;i++)
   149da:	68bb      	ldr	r3, [r7, #8]
   149dc:	3301      	adds	r3, #1
   149de:	60bb      	str	r3, [r7, #8]
   149e0:	68ba      	ldr	r2, [r7, #8]
   149e2:	2399      	movs	r3, #153	; 0x99
   149e4:	005b      	lsls	r3, r3, #1
   149e6:	429a      	cmp	r2, r3
   149e8:	ddf6      	ble.n	149d8 <user_delay_ms+0x14>
	for(int j = 0;j<period;j++)
   149ea:	68fb      	ldr	r3, [r7, #12]
   149ec:	3301      	adds	r3, #1
   149ee:	60fb      	str	r3, [r7, #12]
   149f0:	68fa      	ldr	r2, [r7, #12]
   149f2:	687b      	ldr	r3, [r7, #4]
   149f4:	429a      	cmp	r2, r3
   149f6:	d3ec      	bcc.n	149d2 <user_delay_ms+0xe>
	}
}
   149f8:	46c0      	nop			; (mov r8, r8)
   149fa:	46bd      	mov	sp, r7
   149fc:	b004      	add	sp, #16
   149fe:	bd80      	pop	{r7, pc}

00014a00 <init_bme680>:
float bme_temperature = 0;
float bme_humidity = 0;
float bme_pressure = 0;
int bme_gas_resistence = 0;

void init_bme680(){
   14a00:	b590      	push	{r4, r7, lr}
   14a02:	b083      	sub	sp, #12
   14a04:	af00      	add	r7, sp, #0
	int8_t ret;
	gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
   14a06:	4b2b      	ldr	r3, [pc, #172]	; (14ab4 <init_bme680+0xb4>)
   14a08:	2276      	movs	r2, #118	; 0x76
   14a0a:	705a      	strb	r2, [r3, #1]
	gas_sensor.intf = BME680_I2C_INTF;
   14a0c:	4b29      	ldr	r3, [pc, #164]	; (14ab4 <init_bme680+0xb4>)
   14a0e:	2201      	movs	r2, #1
   14a10:	709a      	strb	r2, [r3, #2]
	gas_sensor.write = bme_write;
   14a12:	4b28      	ldr	r3, [pc, #160]	; (14ab4 <init_bme680+0xb4>)
   14a14:	4a28      	ldr	r2, [pc, #160]	; (14ab8 <init_bme680+0xb8>)
   14a16:	64da      	str	r2, [r3, #76]	; 0x4c
	gas_sensor.read = bme_read;
   14a18:	4b26      	ldr	r3, [pc, #152]	; (14ab4 <init_bme680+0xb4>)
   14a1a:	4a28      	ldr	r2, [pc, #160]	; (14abc <init_bme680+0xbc>)
   14a1c:	649a      	str	r2, [r3, #72]	; 0x48
	gas_sensor.delay_ms_bme = user_delay_ms;
   14a1e:	4b25      	ldr	r3, [pc, #148]	; (14ab4 <init_bme680+0xb4>)
   14a20:	4a27      	ldr	r2, [pc, #156]	; (14ac0 <init_bme680+0xc0>)
   14a22:	651a      	str	r2, [r3, #80]	; 0x50
	gas_sensor.amb_temp = 25;
   14a24:	4b23      	ldr	r3, [pc, #140]	; (14ab4 <init_bme680+0xb4>)
   14a26:	2219      	movs	r2, #25
   14a28:	711a      	strb	r2, [r3, #4]
	ret = BME680_OK;
   14a2a:	1dfb      	adds	r3, r7, #7
   14a2c:	2200      	movs	r2, #0
   14a2e:	701a      	strb	r2, [r3, #0]
	ret = bme680_init(&gas_sensor);
   14a30:	1dfc      	adds	r4, r7, #7
   14a32:	4b20      	ldr	r3, [pc, #128]	; (14ab4 <init_bme680+0xb4>)
   14a34:	0018      	movs	r0, r3
   14a36:	4b23      	ldr	r3, [pc, #140]	; (14ac4 <init_bme680+0xc4>)
   14a38:	4798      	blx	r3
   14a3a:	0003      	movs	r3, r0
   14a3c:	7023      	strb	r3, [r4, #0]
	
	
	uint8_t set_required_settings;
	gas_sensor.tph_sett.os_hum = BME680_OS_2X;
   14a3e:	4b1d      	ldr	r3, [pc, #116]	; (14ab4 <init_bme680+0xb4>)
   14a40:	2238      	movs	r2, #56	; 0x38
   14a42:	2102      	movs	r1, #2
   14a44:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_pres = BME680_OS_4X;
   14a46:	4b1b      	ldr	r3, [pc, #108]	; (14ab4 <init_bme680+0xb4>)
   14a48:	223a      	movs	r2, #58	; 0x3a
   14a4a:	2103      	movs	r1, #3
   14a4c:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_temp = BME680_OS_8X;
   14a4e:	4b19      	ldr	r3, [pc, #100]	; (14ab4 <init_bme680+0xb4>)
   14a50:	2239      	movs	r2, #57	; 0x39
   14a52:	2104      	movs	r1, #4
   14a54:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
   14a56:	4b17      	ldr	r3, [pc, #92]	; (14ab4 <init_bme680+0xb4>)
   14a58:	223b      	movs	r2, #59	; 0x3b
   14a5a:	2102      	movs	r1, #2
   14a5c:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   14a5e:	4b15      	ldr	r3, [pc, #84]	; (14ab4 <init_bme680+0xb4>)
   14a60:	223e      	movs	r2, #62	; 0x3e
   14a62:	2101      	movs	r1, #1
   14a64:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_temp = 320;
   14a66:	4b13      	ldr	r3, [pc, #76]	; (14ab4 <init_bme680+0xb4>)
   14a68:	2240      	movs	r2, #64	; 0x40
   14a6a:	21a0      	movs	r1, #160	; 0xa0
   14a6c:	0049      	lsls	r1, r1, #1
   14a6e:	5299      	strh	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_dur = 150;
   14a70:	4b10      	ldr	r3, [pc, #64]	; (14ab4 <init_bme680+0xb4>)
   14a72:	2242      	movs	r2, #66	; 0x42
   14a74:	2196      	movs	r1, #150	; 0x96
   14a76:	5299      	strh	r1, [r3, r2]
	gas_sensor.power_mode = BME680_FORCED_MODE;
   14a78:	4b0e      	ldr	r3, [pc, #56]	; (14ab4 <init_bme680+0xb4>)
   14a7a:	2244      	movs	r2, #68	; 0x44
   14a7c:	2101      	movs	r1, #1
   14a7e:	5499      	strb	r1, [r3, r2]
	set_required_settings =BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL |BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;
   14a80:	1dbb      	adds	r3, r7, #6
   14a82:	22df      	movs	r2, #223	; 0xdf
   14a84:	701a      	strb	r2, [r3, #0]
	
	ret = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
   14a86:	1dbb      	adds	r3, r7, #6
   14a88:	781b      	ldrb	r3, [r3, #0]
   14a8a:	b29b      	uxth	r3, r3
   14a8c:	1dfc      	adds	r4, r7, #7
   14a8e:	4a09      	ldr	r2, [pc, #36]	; (14ab4 <init_bme680+0xb4>)
   14a90:	0011      	movs	r1, r2
   14a92:	0018      	movs	r0, r3
   14a94:	4b0c      	ldr	r3, [pc, #48]	; (14ac8 <init_bme680+0xc8>)
   14a96:	4798      	blx	r3
   14a98:	0003      	movs	r3, r0
   14a9a:	7023      	strb	r3, [r4, #0]

	ret = bme680_set_sensor_mode(&gas_sensor);
   14a9c:	1dfc      	adds	r4, r7, #7
   14a9e:	4b05      	ldr	r3, [pc, #20]	; (14ab4 <init_bme680+0xb4>)
   14aa0:	0018      	movs	r0, r3
   14aa2:	4b0a      	ldr	r3, [pc, #40]	; (14acc <init_bme680+0xcc>)
   14aa4:	4798      	blx	r3
   14aa6:	0003      	movs	r3, r0
   14aa8:	7023      	strb	r3, [r4, #0]

}
   14aaa:	46c0      	nop			; (mov r8, r8)
   14aac:	46bd      	mov	sp, r7
   14aae:	b003      	add	sp, #12
   14ab0:	bd90      	pop	{r4, r7, pc}
   14ab2:	46c0      	nop			; (mov r8, r8)
   14ab4:	20004650 	.word	0x20004650
   14ab8:	00014879 	.word	0x00014879
   14abc:	00014945 	.word	0x00014945
   14ac0:	000149c5 	.word	0x000149c5
   14ac4:	00012e41 	.word	0x00012e41
   14ac8:	000131d1 	.word	0x000131d1
   14acc:	000136e9 	.word	0x000136e9

00014ad0 <read_sensor_data>:
void read_sensor_data(){
   14ad0:	b580      	push	{r7, lr}
   14ad2:	b082      	sub	sp, #8
   14ad4:	af00      	add	r7, sp, #0
	init_bme680();
   14ad6:	4b2a      	ldr	r3, [pc, #168]	; (14b80 <read_sensor_data+0xb0>)
   14ad8:	4798      	blx	r3
	bme_temperature = 0;
   14ada:	4b2a      	ldr	r3, [pc, #168]	; (14b84 <read_sensor_data+0xb4>)
   14adc:	2200      	movs	r2, #0
   14ade:	601a      	str	r2, [r3, #0]
	bme_humidity = 0;
   14ae0:	4b29      	ldr	r3, [pc, #164]	; (14b88 <read_sensor_data+0xb8>)
   14ae2:	2200      	movs	r2, #0
   14ae4:	601a      	str	r2, [r3, #0]
	bme_pressure = 0;
   14ae6:	4b29      	ldr	r3, [pc, #164]	; (14b8c <read_sensor_data+0xbc>)
   14ae8:	2200      	movs	r2, #0
   14aea:	601a      	str	r2, [r3, #0]
	uint8_t rslt;
	uint16_t meas_period;
	bme680_get_profile_dur(&meas_period, &gas_sensor);
   14aec:	4a28      	ldr	r2, [pc, #160]	; (14b90 <read_sensor_data+0xc0>)
   14aee:	1d3b      	adds	r3, r7, #4
   14af0:	0011      	movs	r1, r2
   14af2:	0018      	movs	r0, r3
   14af4:	4b27      	ldr	r3, [pc, #156]	; (14b94 <read_sensor_data+0xc4>)
   14af6:	4798      	blx	r3
	
	user_delay_ms(meas_period); /* Delay till the measurement is ready */
   14af8:	1d3b      	adds	r3, r7, #4
   14afa:	881b      	ldrh	r3, [r3, #0]
   14afc:	0018      	movs	r0, r3
   14afe:	4b26      	ldr	r3, [pc, #152]	; (14b98 <read_sensor_data+0xc8>)
   14b00:	4798      	blx	r3

	rslt = bme680_get_sensor_data(&data, &gas_sensor);
   14b02:	4a23      	ldr	r2, [pc, #140]	; (14b90 <read_sensor_data+0xc0>)
   14b04:	4b25      	ldr	r3, [pc, #148]	; (14b9c <read_sensor_data+0xcc>)
   14b06:	0011      	movs	r1, r2
   14b08:	0018      	movs	r0, r3
   14b0a:	4b25      	ldr	r3, [pc, #148]	; (14ba0 <read_sensor_data+0xd0>)
   14b0c:	4798      	blx	r3
   14b0e:	0003      	movs	r3, r0
   14b10:	001a      	movs	r2, r3
   14b12:	1dfb      	adds	r3, r7, #7
   14b14:	701a      	strb	r2, [r3, #0]
	
	bme_temperature = data.temperature / 100.0f;
   14b16:	4b21      	ldr	r3, [pc, #132]	; (14b9c <read_sensor_data+0xcc>)
   14b18:	2204      	movs	r2, #4
   14b1a:	5e9a      	ldrsh	r2, [r3, r2]
   14b1c:	4b21      	ldr	r3, [pc, #132]	; (14ba4 <read_sensor_data+0xd4>)
   14b1e:	0010      	movs	r0, r2
   14b20:	4798      	blx	r3
   14b22:	1c02      	adds	r2, r0, #0
   14b24:	4b20      	ldr	r3, [pc, #128]	; (14ba8 <read_sensor_data+0xd8>)
   14b26:	4921      	ldr	r1, [pc, #132]	; (14bac <read_sensor_data+0xdc>)
   14b28:	1c10      	adds	r0, r2, #0
   14b2a:	4798      	blx	r3
   14b2c:	1c03      	adds	r3, r0, #0
   14b2e:	1c1a      	adds	r2, r3, #0
   14b30:	4b14      	ldr	r3, [pc, #80]	; (14b84 <read_sensor_data+0xb4>)
   14b32:	601a      	str	r2, [r3, #0]
	bme_pressure = data.pressure / 100.0f;
   14b34:	4b19      	ldr	r3, [pc, #100]	; (14b9c <read_sensor_data+0xcc>)
   14b36:	689a      	ldr	r2, [r3, #8]
   14b38:	4b1d      	ldr	r3, [pc, #116]	; (14bb0 <read_sensor_data+0xe0>)
   14b3a:	0010      	movs	r0, r2
   14b3c:	4798      	blx	r3
   14b3e:	1c02      	adds	r2, r0, #0
   14b40:	4b19      	ldr	r3, [pc, #100]	; (14ba8 <read_sensor_data+0xd8>)
   14b42:	491a      	ldr	r1, [pc, #104]	; (14bac <read_sensor_data+0xdc>)
   14b44:	1c10      	adds	r0, r2, #0
   14b46:	4798      	blx	r3
   14b48:	1c03      	adds	r3, r0, #0
   14b4a:	1c1a      	adds	r2, r3, #0
   14b4c:	4b0f      	ldr	r3, [pc, #60]	; (14b8c <read_sensor_data+0xbc>)
   14b4e:	601a      	str	r2, [r3, #0]
	bme_humidity = data.humidity / 1000.0f;
   14b50:	4b12      	ldr	r3, [pc, #72]	; (14b9c <read_sensor_data+0xcc>)
   14b52:	68da      	ldr	r2, [r3, #12]
   14b54:	4b16      	ldr	r3, [pc, #88]	; (14bb0 <read_sensor_data+0xe0>)
   14b56:	0010      	movs	r0, r2
   14b58:	4798      	blx	r3
   14b5a:	1c02      	adds	r2, r0, #0
   14b5c:	4b12      	ldr	r3, [pc, #72]	; (14ba8 <read_sensor_data+0xd8>)
   14b5e:	4915      	ldr	r1, [pc, #84]	; (14bb4 <read_sensor_data+0xe4>)
   14b60:	1c10      	adds	r0, r2, #0
   14b62:	4798      	blx	r3
   14b64:	1c03      	adds	r3, r0, #0
   14b66:	1c1a      	adds	r2, r3, #0
   14b68:	4b07      	ldr	r3, [pc, #28]	; (14b88 <read_sensor_data+0xb8>)
   14b6a:	601a      	str	r2, [r3, #0]
	bme_gas_resistence = data.gas_resistance;
   14b6c:	4b0b      	ldr	r3, [pc, #44]	; (14b9c <read_sensor_data+0xcc>)
   14b6e:	691b      	ldr	r3, [r3, #16]
   14b70:	001a      	movs	r2, r3
   14b72:	4b11      	ldr	r3, [pc, #68]	; (14bb8 <read_sensor_data+0xe8>)
   14b74:	601a      	str	r2, [r3, #0]
}
   14b76:	46c0      	nop			; (mov r8, r8)
   14b78:	46bd      	mov	sp, r7
   14b7a:	b002      	add	sp, #8
   14b7c:	bd80      	pop	{r7, pc}
   14b7e:	46c0      	nop			; (mov r8, r8)
   14b80:	00014a01 	.word	0x00014a01
   14b84:	20000394 	.word	0x20000394
   14b88:	20000398 	.word	0x20000398
   14b8c:	2000039c 	.word	0x2000039c
   14b90:	20004650 	.word	0x20004650
   14b94:	00013809 	.word	0x00013809
   14b98:	000149c5 	.word	0x000149c5
   14b9c:	200046a8 	.word	0x200046a8
   14ba0:	000138d5 	.word	0x000138d5
   14ba4:	00035af5 	.word	0x00035af5
   14ba8:	000352ad 	.word	0x000352ad
   14bac:	42c80000 	.word	0x42c80000
   14bb0:	00035b95 	.word	0x00035b95
   14bb4:	447a0000 	.word	0x447a0000
   14bb8:	200003a0 	.word	0x200003a0

00014bbc <getTemperature>:

float getTemperature(){
   14bbc:	b580      	push	{r7, lr}
   14bbe:	af00      	add	r7, sp, #0
	return bme_temperature;
   14bc0:	4b02      	ldr	r3, [pc, #8]	; (14bcc <getTemperature+0x10>)
   14bc2:	681b      	ldr	r3, [r3, #0]
}
   14bc4:	1c18      	adds	r0, r3, #0
   14bc6:	46bd      	mov	sp, r7
   14bc8:	bd80      	pop	{r7, pc}
   14bca:	46c0      	nop			; (mov r8, r8)
   14bcc:	20000394 	.word	0x20000394

00014bd0 <getHumidity>:
float getHumidity(){
   14bd0:	b580      	push	{r7, lr}
   14bd2:	af00      	add	r7, sp, #0
	return bme_humidity;
   14bd4:	4b02      	ldr	r3, [pc, #8]	; (14be0 <getHumidity+0x10>)
   14bd6:	681b      	ldr	r3, [r3, #0]
}
   14bd8:	1c18      	adds	r0, r3, #0
   14bda:	46bd      	mov	sp, r7
   14bdc:	bd80      	pop	{r7, pc}
   14bde:	46c0      	nop			; (mov r8, r8)
   14be0:	20000398 	.word	0x20000398

00014be4 <getPressure>:
float getPressure(){
   14be4:	b580      	push	{r7, lr}
   14be6:	af00      	add	r7, sp, #0
	return bme_pressure;
   14be8:	4b02      	ldr	r3, [pc, #8]	; (14bf4 <getPressure+0x10>)
   14bea:	681b      	ldr	r3, [r3, #0]
}
   14bec:	1c18      	adds	r0, r3, #0
   14bee:	46bd      	mov	sp, r7
   14bf0:	bd80      	pop	{r7, pc}
   14bf2:	46c0      	nop			; (mov r8, r8)
   14bf4:	2000039c 	.word	0x2000039c

00014bf8 <getGasResistance>:
int getGasResistance(){
   14bf8:	b580      	push	{r7, lr}
   14bfa:	af00      	add	r7, sp, #0
	return bme_gas_resistence;
   14bfc:	4b02      	ldr	r3, [pc, #8]	; (14c08 <getGasResistance+0x10>)
   14bfe:	681b      	ldr	r3, [r3, #0]
   14c00:	0018      	movs	r0, r3
   14c02:	46bd      	mov	sp, r7
   14c04:	bd80      	pop	{r7, pc}
   14c06:	46c0      	nop			; (mov r8, r8)
   14c08:	200003a0 	.word	0x200003a0

00014c0c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14c0c:	b580      	push	{r7, lr}
   14c0e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14c10:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14c14:	4b02      	ldr	r3, [pc, #8]	; (14c20 <NVIC_SystemReset+0x14>)
   14c16:	4a03      	ldr	r2, [pc, #12]	; (14c24 <NVIC_SystemReset+0x18>)
   14c18:	60da      	str	r2, [r3, #12]
   14c1a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14c1e:	e7fe      	b.n	14c1e <NVIC_SystemReset+0x12>
   14c20:	e000ed00 	.word	0xe000ed00
   14c24:	05fa0004 	.word	0x05fa0004

00014c28 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   14c28:	b580      	push	{r7, lr}
   14c2a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14c2c:	4b02      	ldr	r3, [pc, #8]	; (14c38 <system_reset+0x10>)
   14c2e:	4798      	blx	r3
}
   14c30:	46c0      	nop			; (mov r8, r8)
   14c32:	46bd      	mov	sp, r7
   14c34:	bd80      	pop	{r7, pc}
   14c36:	46c0      	nop			; (mov r8, r8)
   14c38:	00014c0d 	.word	0x00014c0d

00014c3c <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   14c3c:	b580      	push	{r7, lr}
   14c3e:	b086      	sub	sp, #24
   14c40:	af00      	add	r7, sp, #0
   14c42:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   14c44:	4b9c      	ldr	r3, [pc, #624]	; (14eb8 <vCommandConsoleTask+0x27c>)
   14c46:	0018      	movs	r0, r3
   14c48:	4b9c      	ldr	r3, [pc, #624]	; (14ebc <vCommandConsoleTask+0x280>)
   14c4a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   14c4c:	4b9c      	ldr	r3, [pc, #624]	; (14ec0 <vCommandConsoleTask+0x284>)
   14c4e:	0018      	movs	r0, r3
   14c50:	4b9a      	ldr	r3, [pc, #616]	; (14ebc <vCommandConsoleTask+0x280>)
   14c52:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   14c54:	4b9b      	ldr	r3, [pc, #620]	; (14ec4 <vCommandConsoleTask+0x288>)
   14c56:	0018      	movs	r0, r3
   14c58:	4b98      	ldr	r3, [pc, #608]	; (14ebc <vCommandConsoleTask+0x280>)
   14c5a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   14c5c:	4b9a      	ldr	r3, [pc, #616]	; (14ec8 <vCommandConsoleTask+0x28c>)
   14c5e:	0018      	movs	r0, r3
   14c60:	4b96      	ldr	r3, [pc, #600]	; (14ebc <vCommandConsoleTask+0x280>)
   14c62:	4798      	blx	r3
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    // FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    // FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   14c64:	4b99      	ldr	r3, [pc, #612]	; (14ecc <vCommandConsoleTask+0x290>)
   14c66:	0018      	movs	r0, r3
   14c68:	4b94      	ldr	r3, [pc, #592]	; (14ebc <vCommandConsoleTask+0x280>)
   14c6a:	4798      	blx	r3
	//FreeRTOS_CLIRegisterCommand(&xDC);
	//FreeRTOS_CLIRegisterCommand(&xClear);
	FreeRTOS_CLIRegisterCommand(&xLock);
   14c6c:	4b98      	ldr	r3, [pc, #608]	; (14ed0 <vCommandConsoleTask+0x294>)
   14c6e:	0018      	movs	r0, r3
   14c70:	4b92      	ldr	r3, [pc, #584]	; (14ebc <vCommandConsoleTask+0x280>)
   14c72:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xUNLock);
   14c74:	4b97      	ldr	r3, [pc, #604]	; (14ed4 <vCommandConsoleTask+0x298>)
   14c76:	0018      	movs	r0, r3
   14c78:	4b90      	ldr	r3, [pc, #576]	; (14ebc <vCommandConsoleTask+0x280>)
   14c7a:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xBME);
   14c7c:	4b96      	ldr	r3, [pc, #600]	; (14ed8 <vCommandConsoleTask+0x29c>)
   14c7e:	0018      	movs	r0, r3
   14c80:	4b8e      	ldr	r3, [pc, #568]	; (14ebc <vCommandConsoleTask+0x280>)
   14c82:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   14c84:	2317      	movs	r3, #23
   14c86:	18fb      	adds	r3, r7, r3
   14c88:	2200      	movs	r2, #0
   14c8a:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   14c8c:	4b93      	ldr	r3, [pc, #588]	; (14edc <vCommandConsoleTask+0x2a0>)
   14c8e:	0018      	movs	r0, r3
   14c90:	4b93      	ldr	r3, [pc, #588]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14c92:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   14c94:	2203      	movs	r2, #3
   14c96:	2100      	movs	r1, #0
   14c98:	2001      	movs	r0, #1
   14c9a:	4b92      	ldr	r3, [pc, #584]	; (14ee4 <vCommandConsoleTask+0x2a8>)
   14c9c:	4798      	blx	r3
   14c9e:	0002      	movs	r2, r0
   14ca0:	4b91      	ldr	r3, [pc, #580]	; (14ee8 <vCommandConsoleTask+0x2ac>)
   14ca2:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   14ca4:	4b90      	ldr	r3, [pc, #576]	; (14ee8 <vCommandConsoleTask+0x2ac>)
   14ca6:	681b      	ldr	r3, [r3, #0]
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d107      	bne.n	14cbc <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   14cac:	4b8f      	ldr	r3, [pc, #572]	; (14eec <vCommandConsoleTask+0x2b0>)
   14cae:	0019      	movs	r1, r3
   14cb0:	2003      	movs	r0, #3
   14cb2:	4b8f      	ldr	r3, [pc, #572]	; (14ef0 <vCommandConsoleTask+0x2b4>)
   14cb4:	4798      	blx	r3
        vTaskSuspend(NULL);
   14cb6:	2000      	movs	r0, #0
   14cb8:	4b8e      	ldr	r3, [pc, #568]	; (14ef4 <vCommandConsoleTask+0x2b8>)
   14cba:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   14cbc:	230c      	movs	r3, #12
   14cbe:	18fb      	adds	r3, r7, r3
   14cc0:	0018      	movs	r0, r3
   14cc2:	4b8d      	ldr	r3, [pc, #564]	; (14ef8 <vCommandConsoleTask+0x2bc>)
   14cc4:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14cc6:	230c      	movs	r3, #12
   14cc8:	18fb      	adds	r3, r7, r3
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	2b0a      	cmp	r3, #10
   14cce:	d004      	beq.n	14cda <vCommandConsoleTask+0x9e>
   14cd0:	230c      	movs	r3, #12
   14cd2:	18fb      	adds	r3, r7, r3
   14cd4:	781b      	ldrb	r3, [r3, #0]
   14cd6:	2b0d      	cmp	r3, #13
   14cd8:	d137      	bne.n	14d4a <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14cda:	4b88      	ldr	r3, [pc, #544]	; (14efc <vCommandConsoleTask+0x2c0>)
   14cdc:	0018      	movs	r0, r3
   14cde:	4b80      	ldr	r3, [pc, #512]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14ce0:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   14ce2:	4b87      	ldr	r3, [pc, #540]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14ce4:	2200      	movs	r2, #0
   14ce6:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14ce8:	4b86      	ldr	r3, [pc, #536]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14cea:	2200      	movs	r2, #0
   14cec:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   14cee:	4986      	ldr	r1, [pc, #536]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14cf0:	4b86      	ldr	r3, [pc, #536]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14cf2:	2231      	movs	r2, #49	; 0x31
   14cf4:	0018      	movs	r0, r3
   14cf6:	4b86      	ldr	r3, [pc, #536]	; (14f10 <vCommandConsoleTask+0x2d4>)
   14cf8:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14cfa:	4b84      	ldr	r3, [pc, #528]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14cfc:	2231      	movs	r2, #49	; 0x31
   14cfe:	2100      	movs	r1, #0
   14d00:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   14d02:	4984      	ldr	r1, [pc, #528]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d04:	4b80      	ldr	r3, [pc, #512]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d06:	2264      	movs	r2, #100	; 0x64
   14d08:	0018      	movs	r0, r3
   14d0a:	4b83      	ldr	r3, [pc, #524]	; (14f18 <vCommandConsoleTask+0x2dc>)
   14d0c:	4798      	blx	r3
   14d0e:	0003      	movs	r3, r0
   14d10:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   14d12:	4b80      	ldr	r3, [pc, #512]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d14:	2263      	movs	r2, #99	; 0x63
   14d16:	2100      	movs	r1, #0
   14d18:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14d1a:	4b7e      	ldr	r3, [pc, #504]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d1c:	0018      	movs	r0, r3
   14d1e:	4b70      	ldr	r3, [pc, #448]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14d20:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   14d22:	693b      	ldr	r3, [r7, #16]
   14d24:	2b00      	cmp	r3, #0
   14d26:	d1ec      	bne.n	14d02 <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14d28:	2317      	movs	r3, #23
   14d2a:	18fb      	adds	r3, r7, r3
   14d2c:	2200      	movs	r2, #0
   14d2e:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14d30:	4b75      	ldr	r3, [pc, #468]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d32:	2232      	movs	r2, #50	; 0x32
   14d34:	2100      	movs	r1, #0
   14d36:	0018      	movs	r0, r3
   14d38:	4b78      	ldr	r3, [pc, #480]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14d3a:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14d3c:	4b75      	ldr	r3, [pc, #468]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d3e:	2264      	movs	r2, #100	; 0x64
   14d40:	2100      	movs	r1, #0
   14d42:	0018      	movs	r0, r3
   14d44:	4b75      	ldr	r3, [pc, #468]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14d46:	4798      	blx	r3
   14d48:	e0b5      	b.n	14eb6 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14d4a:	4b6d      	ldr	r3, [pc, #436]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14d4c:	781b      	ldrb	r3, [r3, #0]
   14d4e:	2b00      	cmp	r3, #0
   14d50:	d059      	beq.n	14e06 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   14d52:	4b6c      	ldr	r3, [pc, #432]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d54:	781b      	ldrb	r3, [r3, #0]
   14d56:	2b03      	cmp	r3, #3
   14d58:	d80c      	bhi.n	14d74 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14d5a:	4b6a      	ldr	r3, [pc, #424]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d5c:	781b      	ldrb	r3, [r3, #0]
   14d5e:	1c5a      	adds	r2, r3, #1
   14d60:	b2d1      	uxtb	r1, r2
   14d62:	4a68      	ldr	r2, [pc, #416]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d64:	7011      	strb	r1, [r2, #0]
   14d66:	001a      	movs	r2, r3
   14d68:	230c      	movs	r3, #12
   14d6a:	18fb      	adds	r3, r7, r3
   14d6c:	7819      	ldrb	r1, [r3, #0]
   14d6e:	4b6c      	ldr	r3, [pc, #432]	; (14f20 <vCommandConsoleTask+0x2e4>)
   14d70:	5499      	strb	r1, [r3, r2]
   14d72:	e005      	b.n	14d80 <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   14d74:	4b62      	ldr	r3, [pc, #392]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14d76:	2200      	movs	r2, #0
   14d78:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14d7a:	4b62      	ldr	r3, [pc, #392]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d7c:	2200      	movs	r2, #0
   14d7e:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   14d80:	4b60      	ldr	r3, [pc, #384]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d82:	781b      	ldrb	r3, [r3, #0]
   14d84:	2b01      	cmp	r3, #1
   14d86:	d999      	bls.n	14cbc <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   14d88:	4a66      	ldr	r2, [pc, #408]	; (14f24 <vCommandConsoleTask+0x2e8>)
   14d8a:	4b65      	ldr	r3, [pc, #404]	; (14f20 <vCommandConsoleTask+0x2e4>)
   14d8c:	0011      	movs	r1, r2
   14d8e:	0018      	movs	r0, r3
   14d90:	4b65      	ldr	r3, [pc, #404]	; (14f28 <vCommandConsoleTask+0x2ec>)
   14d92:	4798      	blx	r3
   14d94:	1e03      	subs	r3, r0, #0
   14d96:	d02f      	beq.n	14df8 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   14d98:	4964      	ldr	r1, [pc, #400]	; (14f2c <vCommandConsoleTask+0x2f0>)
   14d9a:	4b5b      	ldr	r3, [pc, #364]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d9c:	221b      	movs	r2, #27
   14d9e:	0018      	movs	r0, r3
   14da0:	4b63      	ldr	r3, [pc, #396]	; (14f30 <vCommandConsoleTask+0x2f4>)
   14da2:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   14da4:	4b58      	ldr	r3, [pc, #352]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14da6:	0018      	movs	r0, r3
   14da8:	4b4d      	ldr	r3, [pc, #308]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14daa:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   14dac:	2317      	movs	r3, #23
   14dae:	18fb      	adds	r3, r7, r3
   14db0:	2200      	movs	r2, #0
   14db2:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14db4:	4b54      	ldr	r3, [pc, #336]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14db6:	2232      	movs	r2, #50	; 0x32
   14db8:	2100      	movs	r1, #0
   14dba:	0018      	movs	r0, r3
   14dbc:	4b57      	ldr	r3, [pc, #348]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14dbe:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   14dc0:	4952      	ldr	r1, [pc, #328]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14dc2:	4b51      	ldr	r3, [pc, #324]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14dc4:	2231      	movs	r2, #49	; 0x31
   14dc6:	0018      	movs	r0, r3
   14dc8:	4b51      	ldr	r3, [pc, #324]	; (14f10 <vCommandConsoleTask+0x2d4>)
   14dca:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14dcc:	4b4e      	ldr	r3, [pc, #312]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14dce:	0018      	movs	r0, r3
   14dd0:	4b58      	ldr	r3, [pc, #352]	; (14f34 <vCommandConsoleTask+0x2f8>)
   14dd2:	4798      	blx	r3
   14dd4:	0003      	movs	r3, r0
   14dd6:	2b30      	cmp	r3, #48	; 0x30
   14dd8:	d806      	bhi.n	14de8 <vCommandConsoleTask+0x1ac>
   14dda:	4b4c      	ldr	r3, [pc, #304]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14ddc:	0018      	movs	r0, r3
   14dde:	4b55      	ldr	r3, [pc, #340]	; (14f34 <vCommandConsoleTask+0x2f8>)
   14de0:	4798      	blx	r3
   14de2:	0003      	movs	r3, r0
   14de4:	b2da      	uxtb	r2, r3
   14de6:	e000      	b.n	14dea <vCommandConsoleTask+0x1ae>
   14de8:	2231      	movs	r2, #49	; 0x31
   14dea:	2317      	movs	r3, #23
   14dec:	18fb      	adds	r3, r7, r3
   14dee:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   14df0:	4b45      	ldr	r3, [pc, #276]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14df2:	0018      	movs	r0, r3
   14df4:	4b3a      	ldr	r3, [pc, #232]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14df6:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14df8:	4b41      	ldr	r3, [pc, #260]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14dfa:	2200      	movs	r2, #0
   14dfc:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14dfe:	4b41      	ldr	r3, [pc, #260]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14e00:	2200      	movs	r2, #0
   14e02:	701a      	strb	r2, [r3, #0]
   14e04:	e75a      	b.n	14cbc <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14e06:	230c      	movs	r3, #12
   14e08:	18fb      	adds	r3, r7, r3
   14e0a:	781b      	ldrb	r3, [r3, #0]
   14e0c:	2b0d      	cmp	r3, #13
   14e0e:	d100      	bne.n	14e12 <vCommandConsoleTask+0x1d6>
   14e10:	e754      	b.n	14cbc <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e12:	230c      	movs	r3, #12
   14e14:	18fb      	adds	r3, r7, r3
   14e16:	781b      	ldrb	r3, [r3, #0]
   14e18:	2b08      	cmp	r3, #8
   14e1a:	d004      	beq.n	14e26 <vCommandConsoleTask+0x1ea>
   14e1c:	230c      	movs	r3, #12
   14e1e:	18fb      	adds	r3, r7, r3
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	2b7f      	cmp	r3, #127	; 0x7f
   14e24:	d11c      	bne.n	14e60 <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14e26:	2308      	movs	r3, #8
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	4a43      	ldr	r2, [pc, #268]	; (14f38 <vCommandConsoleTask+0x2fc>)
   14e2c:	6812      	ldr	r2, [r2, #0]
   14e2e:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   14e30:	2308      	movs	r3, #8
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	0018      	movs	r0, r3
   14e36:	4b2a      	ldr	r3, [pc, #168]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14e38:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14e3a:	2317      	movs	r3, #23
   14e3c:	18fb      	adds	r3, r7, r3
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	2b00      	cmp	r3, #0
   14e42:	d037      	beq.n	14eb4 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   14e44:	2317      	movs	r3, #23
   14e46:	18fb      	adds	r3, r7, r3
   14e48:	781a      	ldrb	r2, [r3, #0]
   14e4a:	2317      	movs	r3, #23
   14e4c:	18fb      	adds	r3, r7, r3
   14e4e:	3a01      	subs	r2, #1
   14e50:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   14e52:	2317      	movs	r3, #23
   14e54:	18fb      	adds	r3, r7, r3
   14e56:	781b      	ldrb	r3, [r3, #0]
   14e58:	4a2b      	ldr	r2, [pc, #172]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14e5a:	2100      	movs	r1, #0
   14e5c:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e5e:	e029      	b.n	14eb4 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   14e60:	230c      	movs	r3, #12
   14e62:	18fb      	adds	r3, r7, r3
   14e64:	781b      	ldrb	r3, [r3, #0]
   14e66:	2b1b      	cmp	r3, #27
   14e68:	d106      	bne.n	14e78 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   14e6a:	4b25      	ldr	r3, [pc, #148]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14e6c:	2201      	movs	r2, #1
   14e6e:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   14e70:	4b24      	ldr	r3, [pc, #144]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14e72:	2200      	movs	r2, #0
   14e74:	701a      	strb	r2, [r3, #0]
   14e76:	e721      	b.n	14cbc <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   14e78:	2317      	movs	r3, #23
   14e7a:	18fb      	adds	r3, r7, r3
   14e7c:	781b      	ldrb	r3, [r3, #0]
   14e7e:	2b31      	cmp	r3, #49	; 0x31
   14e80:	d80e      	bhi.n	14ea0 <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   14e82:	2317      	movs	r3, #23
   14e84:	18fb      	adds	r3, r7, r3
   14e86:	781b      	ldrb	r3, [r3, #0]
   14e88:	220c      	movs	r2, #12
   14e8a:	18ba      	adds	r2, r7, r2
   14e8c:	7811      	ldrb	r1, [r2, #0]
   14e8e:	4a1e      	ldr	r2, [pc, #120]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14e90:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   14e92:	2317      	movs	r3, #23
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	781a      	ldrb	r2, [r3, #0]
   14e98:	2317      	movs	r3, #23
   14e9a:	18fb      	adds	r3, r7, r3
   14e9c:	3201      	adds	r2, #1
   14e9e:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   14ea0:	230c      	movs	r3, #12
   14ea2:	18fb      	adds	r3, r7, r3
   14ea4:	2200      	movs	r2, #0
   14ea6:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   14ea8:	230c      	movs	r3, #12
   14eaa:	18fb      	adds	r3, r7, r3
   14eac:	0018      	movs	r0, r3
   14eae:	4b0c      	ldr	r3, [pc, #48]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14eb0:	4798      	blx	r3
   14eb2:	e703      	b.n	14cbc <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14eb4:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   14eb6:	e701      	b.n	14cbc <vCommandConsoleTask+0x80>
   14eb8:	0003914c 	.word	0x0003914c
   14ebc:	0001a2dd 	.word	0x0001a2dd
   14ec0:	0003913c 	.word	0x0003913c
   14ec4:	000391ac 	.word	0x000391ac
   14ec8:	0003917c 	.word	0x0003917c
   14ecc:	0003918c 	.word	0x0003918c
   14ed0:	0003915c 	.word	0x0003915c
   14ed4:	0003916c 	.word	0x0003916c
   14ed8:	0003919c 	.word	0x0003919c
   14edc:	00038dd0 	.word	0x00038dd0
   14ee0:	00020205 	.word	0x00020205
   14ee4:	0001c8a5 	.word	0x0001c8a5
   14ee8:	200046bc 	.word	0x200046bc
   14eec:	00038ff8 	.word	0x00038ff8
   14ef0:	000202f1 	.word	0x000202f1
   14ef4:	0001e691 	.word	0x0001e691
   14ef8:	00014f3d 	.word	0x00014f3d
   14efc:	00039018 	.word	0x00039018
   14f00:	200003b4 	.word	0x200003b4
   14f04:	200003b5 	.word	0x200003b5
   14f08:	200003ec 	.word	0x200003ec
   14f0c:	200003b8 	.word	0x200003b8
   14f10:	00037d53 	.word	0x00037d53
   14f14:	20000420 	.word	0x20000420
   14f18:	0001a34d 	.word	0x0001a34d
   14f1c:	0003796b 	.word	0x0003796b
   14f20:	20000484 	.word	0x20000484
   14f24:	0003901c 	.word	0x0003901c
   14f28:	00037c6d 	.word	0x00037c6d
   14f2c:	00039020 	.word	0x00039020
   14f30:	00037c29 	.word	0x00037c29
   14f34:	00037d23 	.word	0x00037d23
   14f38:	00039028 	.word	0x00039028

00014f3c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14f3c:	b580      	push	{r7, lr}
   14f3e:	b084      	sub	sp, #16
   14f40:	af00      	add	r7, sp, #0
   14f42:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f44:	687b      	ldr	r3, [r7, #4]
   14f46:	0018      	movs	r0, r3
   14f48:	4b0c      	ldr	r3, [pc, #48]	; (14f7c <FreeRTOS_read+0x40>)
   14f4a:	4798      	blx	r3
   14f4c:	0003      	movs	r3, r0
   14f4e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14f50:	e00d      	b.n	14f6e <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   14f52:	4b0b      	ldr	r3, [pc, #44]	; (14f80 <FreeRTOS_read+0x44>)
   14f54:	681a      	ldr	r2, [r3, #0]
   14f56:	2301      	movs	r3, #1
   14f58:	425b      	negs	r3, r3
   14f5a:	0019      	movs	r1, r3
   14f5c:	0010      	movs	r0, r2
   14f5e:	4b09      	ldr	r3, [pc, #36]	; (14f84 <FreeRTOS_read+0x48>)
   14f60:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f62:	687b      	ldr	r3, [r7, #4]
   14f64:	0018      	movs	r0, r3
   14f66:	4b05      	ldr	r3, [pc, #20]	; (14f7c <FreeRTOS_read+0x40>)
   14f68:	4798      	blx	r3
   14f6a:	0003      	movs	r3, r0
   14f6c:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   14f6e:	68fb      	ldr	r3, [r7, #12]
   14f70:	3301      	adds	r3, #1
   14f72:	d0ee      	beq.n	14f52 <FreeRTOS_read+0x16>
    }
}
   14f74:	46c0      	nop			; (mov r8, r8)
   14f76:	46bd      	mov	sp, r7
   14f78:	b004      	add	sp, #16
   14f7a:	bd80      	pop	{r7, pc}
   14f7c:	000202a1 	.word	0x000202a1
   14f80:	200046bc 	.word	0x200046bc
   14f84:	0001d85d 	.word	0x0001d85d

00014f88 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   14f88:	b580      	push	{r7, lr}
   14f8a:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   14f8c:	4b0a      	ldr	r3, [pc, #40]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f8e:	2200      	movs	r2, #0
   14f90:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   14f92:	4b0a      	ldr	r3, [pc, #40]	; (14fbc <CliCharReadySemaphoreGiveFromISR+0x34>)
   14f94:	681b      	ldr	r3, [r3, #0]
   14f96:	4a08      	ldr	r2, [pc, #32]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f98:	0011      	movs	r1, r2
   14f9a:	0018      	movs	r0, r3
   14f9c:	4b08      	ldr	r3, [pc, #32]	; (14fc0 <CliCharReadySemaphoreGiveFromISR+0x38>)
   14f9e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14fa0:	4b05      	ldr	r3, [pc, #20]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14fa2:	681b      	ldr	r3, [r3, #0]
   14fa4:	2b00      	cmp	r3, #0
   14fa6:	d003      	beq.n	14fb0 <CliCharReadySemaphoreGiveFromISR+0x28>
   14fa8:	4b06      	ldr	r3, [pc, #24]	; (14fc4 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   14faa:	2280      	movs	r2, #128	; 0x80
   14fac:	0552      	lsls	r2, r2, #21
   14fae:	601a      	str	r2, [r3, #0]
}
   14fb0:	46c0      	nop			; (mov r8, r8)
   14fb2:	46bd      	mov	sp, r7
   14fb4:	bd80      	pop	{r7, pc}
   14fb6:	46c0      	nop			; (mov r8, r8)
   14fb8:	20000488 	.word	0x20000488
   14fbc:	200046bc 	.word	0x200046bc
   14fc0:	0001d1d5 	.word	0x0001d1d5
   14fc4:	e000ed04 	.word	0xe000ed04

00014fc8 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14fc8:	b5b0      	push	{r4, r5, r7, lr}
   14fca:	b08a      	sub	sp, #40	; 0x28
   14fcc:	af02      	add	r7, sp, #8
   14fce:	60f8      	str	r0, [r7, #12]
   14fd0:	60b9      	str	r1, [r7, #8]
   14fd2:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   14fd4:	4b49      	ldr	r3, [pc, #292]	; (150fc <CLI_GetImuData+0x134>)
   14fd6:	4798      	blx	r3
   14fd8:	0003      	movs	r3, r0
   14fda:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   14fdc:	231b      	movs	r3, #27
   14fde:	18fa      	adds	r2, r7, r3
   14fe0:	69fb      	ldr	r3, [r7, #28]
   14fe2:	0011      	movs	r1, r2
   14fe4:	0018      	movs	r0, r3
   14fe6:	4b46      	ldr	r3, [pc, #280]	; (15100 <CLI_GetImuData+0x138>)
   14fe8:	4798      	blx	r3

    if (reg) {
   14fea:	231b      	movs	r3, #27
   14fec:	18fb      	adds	r3, r7, r3
   14fee:	781b      	ldrb	r3, [r3, #0]
   14ff0:	2b00      	cmp	r3, #0
   14ff2:	d064      	beq.n	150be <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   14ff4:	4b43      	ldr	r3, [pc, #268]	; (15104 <CLI_GetImuData+0x13c>)
   14ff6:	2206      	movs	r2, #6
   14ff8:	2100      	movs	r1, #0
   14ffa:	0018      	movs	r0, r3
   14ffc:	4b42      	ldr	r3, [pc, #264]	; (15108 <CLI_GetImuData+0x140>)
   14ffe:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   15000:	4a40      	ldr	r2, [pc, #256]	; (15104 <CLI_GetImuData+0x13c>)
   15002:	69fb      	ldr	r3, [r7, #28]
   15004:	0011      	movs	r1, r2
   15006:	0018      	movs	r0, r3
   15008:	4b40      	ldr	r3, [pc, #256]	; (1510c <CLI_GetImuData+0x144>)
   1500a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   1500c:	4b3d      	ldr	r3, [pc, #244]	; (15104 <CLI_GetImuData+0x13c>)
   1500e:	2200      	movs	r2, #0
   15010:	5e9b      	ldrsh	r3, [r3, r2]
   15012:	0018      	movs	r0, r3
   15014:	4b3e      	ldr	r3, [pc, #248]	; (15110 <CLI_GetImuData+0x148>)
   15016:	4798      	blx	r3
   15018:	1c02      	adds	r2, r0, #0
   1501a:	4b3e      	ldr	r3, [pc, #248]	; (15114 <CLI_GetImuData+0x14c>)
   1501c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1501e:	4b39      	ldr	r3, [pc, #228]	; (15104 <CLI_GetImuData+0x13c>)
   15020:	2202      	movs	r2, #2
   15022:	5e9b      	ldrsh	r3, [r3, r2]
   15024:	0018      	movs	r0, r3
   15026:	4b3a      	ldr	r3, [pc, #232]	; (15110 <CLI_GetImuData+0x148>)
   15028:	4798      	blx	r3
   1502a:	1c02      	adds	r2, r0, #0
   1502c:	4b39      	ldr	r3, [pc, #228]	; (15114 <CLI_GetImuData+0x14c>)
   1502e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   15030:	4b34      	ldr	r3, [pc, #208]	; (15104 <CLI_GetImuData+0x13c>)
   15032:	2204      	movs	r2, #4
   15034:	5e9b      	ldrsh	r3, [r3, r2]
   15036:	0018      	movs	r0, r3
   15038:	4b35      	ldr	r3, [pc, #212]	; (15110 <CLI_GetImuData+0x148>)
   1503a:	4798      	blx	r3
   1503c:	1c02      	adds	r2, r0, #0
   1503e:	4b35      	ldr	r3, [pc, #212]	; (15114 <CLI_GetImuData+0x14c>)
   15040:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   15042:	4b34      	ldr	r3, [pc, #208]	; (15114 <CLI_GetImuData+0x14c>)
   15044:	681a      	ldr	r2, [r3, #0]
   15046:	4b34      	ldr	r3, [pc, #208]	; (15118 <CLI_GetImuData+0x150>)
   15048:	1c10      	adds	r0, r2, #0
   1504a:	4798      	blx	r3
   1504c:	0005      	movs	r5, r0
   1504e:	4b31      	ldr	r3, [pc, #196]	; (15114 <CLI_GetImuData+0x14c>)
   15050:	685a      	ldr	r2, [r3, #4]
   15052:	4b31      	ldr	r3, [pc, #196]	; (15118 <CLI_GetImuData+0x150>)
   15054:	1c10      	adds	r0, r2, #0
   15056:	4798      	blx	r3
   15058:	0004      	movs	r4, r0
   1505a:	4b2e      	ldr	r3, [pc, #184]	; (15114 <CLI_GetImuData+0x14c>)
   1505c:	689a      	ldr	r2, [r3, #8]
   1505e:	4b2e      	ldr	r3, [pc, #184]	; (15118 <CLI_GetImuData+0x150>)
   15060:	1c10      	adds	r0, r2, #0
   15062:	4798      	blx	r3
   15064:	0003      	movs	r3, r0
   15066:	4a2d      	ldr	r2, [pc, #180]	; (1511c <CLI_GetImuData+0x154>)
   15068:	68b9      	ldr	r1, [r7, #8]
   1506a:	68f8      	ldr	r0, [r7, #12]
   1506c:	9301      	str	r3, [sp, #4]
   1506e:	9400      	str	r4, [sp, #0]
   15070:	002b      	movs	r3, r5
   15072:	4c2b      	ldr	r4, [pc, #172]	; (15120 <CLI_GetImuData+0x158>)
   15074:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   15076:	4b27      	ldr	r3, [pc, #156]	; (15114 <CLI_GetImuData+0x14c>)
   15078:	681a      	ldr	r2, [r3, #0]
   1507a:	4b27      	ldr	r3, [pc, #156]	; (15118 <CLI_GetImuData+0x150>)
   1507c:	1c10      	adds	r0, r2, #0
   1507e:	4798      	blx	r3
   15080:	0003      	movs	r3, r0
   15082:	b21a      	sxth	r2, r3
   15084:	2314      	movs	r3, #20
   15086:	18fb      	adds	r3, r7, r3
   15088:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   1508a:	4b22      	ldr	r3, [pc, #136]	; (15114 <CLI_GetImuData+0x14c>)
   1508c:	685a      	ldr	r2, [r3, #4]
   1508e:	4b22      	ldr	r3, [pc, #136]	; (15118 <CLI_GetImuData+0x150>)
   15090:	1c10      	adds	r0, r2, #0
   15092:	4798      	blx	r3
   15094:	0003      	movs	r3, r0
   15096:	b21a      	sxth	r2, r3
   15098:	2314      	movs	r3, #20
   1509a:	18fb      	adds	r3, r7, r3
   1509c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   1509e:	4b1d      	ldr	r3, [pc, #116]	; (15114 <CLI_GetImuData+0x14c>)
   150a0:	689a      	ldr	r2, [r3, #8]
   150a2:	4b1d      	ldr	r3, [pc, #116]	; (15118 <CLI_GetImuData+0x150>)
   150a4:	1c10      	adds	r0, r2, #0
   150a6:	4798      	blx	r3
   150a8:	0003      	movs	r3, r0
   150aa:	b21a      	sxth	r2, r3
   150ac:	2314      	movs	r3, #20
   150ae:	18fb      	adds	r3, r7, r3
   150b0:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   150b2:	2314      	movs	r3, #20
   150b4:	18fb      	adds	r3, r7, r3
   150b6:	0018      	movs	r0, r3
   150b8:	4b1a      	ldr	r3, [pc, #104]	; (15124 <CLI_GetImuData+0x15c>)
   150ba:	4798      	blx	r3
   150bc:	e019      	b.n	150f2 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   150be:	4a1a      	ldr	r2, [pc, #104]	; (15128 <CLI_GetImuData+0x160>)
   150c0:	68b9      	ldr	r1, [r7, #8]
   150c2:	68fb      	ldr	r3, [r7, #12]
   150c4:	0018      	movs	r0, r3
   150c6:	4b16      	ldr	r3, [pc, #88]	; (15120 <CLI_GetImuData+0x158>)
   150c8:	4798      	blx	r3
		imuPacket.xmg = -1;
   150ca:	2314      	movs	r3, #20
   150cc:	18fb      	adds	r3, r7, r3
   150ce:	2201      	movs	r2, #1
   150d0:	4252      	negs	r2, r2
   150d2:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   150d4:	2314      	movs	r3, #20
   150d6:	18fb      	adds	r3, r7, r3
   150d8:	2202      	movs	r2, #2
   150da:	4252      	negs	r2, r2
   150dc:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   150de:	2314      	movs	r3, #20
   150e0:	18fb      	adds	r3, r7, r3
   150e2:	2203      	movs	r2, #3
   150e4:	4252      	negs	r2, r2
   150e6:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   150e8:	2314      	movs	r3, #20
   150ea:	18fb      	adds	r3, r7, r3
   150ec:	0018      	movs	r0, r3
   150ee:	4b0d      	ldr	r3, [pc, #52]	; (15124 <CLI_GetImuData+0x15c>)
   150f0:	4798      	blx	r3
    }
    return pdFALSE;
   150f2:	2300      	movs	r3, #0
}
   150f4:	0018      	movs	r0, r3
   150f6:	46bd      	mov	sp, r7
   150f8:	b008      	add	sp, #32
   150fa:	bdb0      	pop	{r4, r5, r7, pc}
   150fc:	00016a51 	.word	0x00016a51
   15100:	000164fd 	.word	0x000164fd
   15104:	2000048c 	.word	0x2000048c
   15108:	0003796b 	.word	0x0003796b
   1510c:	00016539 	.word	0x00016539
   15110:	00015d8d 	.word	0x00015d8d
   15114:	20000494 	.word	0x20000494
   15118:	00035ab5 	.word	0x00035ab5
   1511c:	0003902c 	.word	0x0003902c
   15120:	00037bc5 	.word	0x00037bc5
   15124:	000198b5 	.word	0x000198b5
   15128:	00039050 	.word	0x00039050

0001512c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1512c:	b590      	push	{r4, r7, lr}
   1512e:	b087      	sub	sp, #28
   15130:	af00      	add	r7, sp, #0
   15132:	60f8      	str	r0, [r7, #12]
   15134:	60b9      	str	r1, [r7, #8]
   15136:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   15138:	2317      	movs	r3, #23
   1513a:	18fb      	adds	r3, r7, r3
   1513c:	221b      	movs	r2, #27
   1513e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   15140:	2317      	movs	r3, #23
   15142:	18fb      	adds	r3, r7, r3
   15144:	781b      	ldrb	r3, [r3, #0]
   15146:	4a08      	ldr	r2, [pc, #32]	; (15168 <xCliClearTerminalScreen+0x3c>)
   15148:	4808      	ldr	r0, [pc, #32]	; (1516c <xCliClearTerminalScreen+0x40>)
   1514a:	210f      	movs	r1, #15
   1514c:	4c08      	ldr	r4, [pc, #32]	; (15170 <xCliClearTerminalScreen+0x44>)
   1514e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   15150:	4a06      	ldr	r2, [pc, #24]	; (1516c <xCliClearTerminalScreen+0x40>)
   15152:	68b9      	ldr	r1, [r7, #8]
   15154:	68fb      	ldr	r3, [r7, #12]
   15156:	0018      	movs	r0, r3
   15158:	4b05      	ldr	r3, [pc, #20]	; (15170 <xCliClearTerminalScreen+0x44>)
   1515a:	4798      	blx	r3
    return pdFALSE;
   1515c:	2300      	movs	r3, #0
}
   1515e:	0018      	movs	r0, r3
   15160:	46bd      	mov	sp, r7
   15162:	b007      	add	sp, #28
   15164:	bd90      	pop	{r4, r7, pc}
   15166:	46c0      	nop			; (mov r8, r8)
   15168:	00039078 	.word	0x00039078
   1516c:	200003a4 	.word	0x200003a4
   15170:	00037bc5 	.word	0x00037bc5

00015174 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15174:	b580      	push	{r7, lr}
   15176:	b084      	sub	sp, #16
   15178:	af00      	add	r7, sp, #0
   1517a:	60f8      	str	r0, [r7, #12]
   1517c:	60b9      	str	r1, [r7, #8]
   1517e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   15180:	2002      	movs	r0, #2
   15182:	4b03      	ldr	r3, [pc, #12]	; (15190 <CLI_OTAU+0x1c>)
   15184:	4798      	blx	r3

    return pdFALSE;
   15186:	2300      	movs	r3, #0
}
   15188:	0018      	movs	r0, r3
   1518a:	46bd      	mov	sp, r7
   1518c:	b004      	add	sp, #16
   1518e:	bd80      	pop	{r7, pc}
   15190:	00019881 	.word	0x00019881

00015194 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15194:	b580      	push	{r7, lr}
   15196:	b084      	sub	sp, #16
   15198:	af00      	add	r7, sp, #0
   1519a:	60f8      	str	r0, [r7, #12]
   1519c:	60b9      	str	r1, [r7, #8]
   1519e:	607a      	str	r2, [r7, #4]
    system_reset();
   151a0:	4b03      	ldr	r3, [pc, #12]	; (151b0 <CLI_ResetDevice+0x1c>)
   151a2:	4798      	blx	r3
    return pdFALSE;
   151a4:	2300      	movs	r3, #0
}
   151a6:	0018      	movs	r0, r3
   151a8:	46bd      	mov	sp, r7
   151aa:	b004      	add	sp, #16
   151ac:	bd80      	pop	{r7, pc}
   151ae:	46c0      	nop			; (mov r8, r8)
   151b0:	00014c29 	.word	0x00014c29

000151b4 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   151b4:	b590      	push	{r4, r7, lr}
   151b6:	b08f      	sub	sp, #60	; 0x3c
   151b8:	af00      	add	r7, sp, #0
   151ba:	60f8      	str	r0, [r7, #12]
   151bc:	60b9      	str	r1, [r7, #8]
   151be:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   151c0:	2318      	movs	r3, #24
   151c2:	18fb      	adds	r3, r7, r3
   151c4:	2200      	movs	r2, #0
   151c6:	701a      	strb	r2, [r3, #0]
   151c8:	2318      	movs	r3, #24
   151ca:	18fb      	adds	r3, r7, r3
   151cc:	2200      	movs	r2, #0
   151ce:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   151d0:	2318      	movs	r3, #24
   151d2:	18fb      	adds	r3, r7, r3
   151d4:	2200      	movs	r2, #0
   151d6:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   151d8:	2318      	movs	r3, #24
   151da:	18fb      	adds	r3, r7, r3
   151dc:	2200      	movs	r2, #0
   151de:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   151e0:	231c      	movs	r3, #28
   151e2:	18fb      	adds	r3, r7, r3
   151e4:	2200      	movs	r2, #0
   151e6:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   151e8:	231c      	movs	r3, #28
   151ea:	18fb      	adds	r3, r7, r3
   151ec:	2214      	movs	r2, #20
   151ee:	18ba      	adds	r2, r7, r2
   151f0:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   151f2:	231c      	movs	r3, #28
   151f4:	18fb      	adds	r3, r7, r3
   151f6:	2201      	movs	r2, #1
   151f8:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   151fa:	231c      	movs	r3, #28
   151fc:	18fb      	adds	r3, r7, r3
   151fe:	2218      	movs	r2, #24
   15200:	18ba      	adds	r2, r7, r2
   15202:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   15204:	231c      	movs	r3, #28
   15206:	18fb      	adds	r3, r7, r3
   15208:	2201      	movs	r2, #1
   1520a:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   1520c:	4b2a      	ldr	r3, [pc, #168]	; (152b8 <CLI_i2cScan+0x104>)
   1520e:	0018      	movs	r0, r3
   15210:	4b2a      	ldr	r3, [pc, #168]	; (152bc <CLI_i2cScan+0x108>)
   15212:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   15214:	2300      	movs	r3, #0
   15216:	637b      	str	r3, [r7, #52]	; 0x34
   15218:	e042      	b.n	152a0 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1521c:	4a28      	ldr	r2, [pc, #160]	; (152c0 <CLI_i2cScan+0x10c>)
   1521e:	4829      	ldr	r0, [pc, #164]	; (152c4 <CLI_i2cScan+0x110>)
   15220:	210f      	movs	r1, #15
   15222:	4c29      	ldr	r4, [pc, #164]	; (152c8 <CLI_i2cScan+0x114>)
   15224:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   15226:	4b27      	ldr	r3, [pc, #156]	; (152c4 <CLI_i2cScan+0x110>)
   15228:	0018      	movs	r0, r3
   1522a:	4b24      	ldr	r3, [pc, #144]	; (152bc <CLI_i2cScan+0x108>)
   1522c:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1522e:	2300      	movs	r3, #0
   15230:	633b      	str	r3, [r7, #48]	; 0x30
   15232:	e02b      	b.n	1528c <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   15234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15236:	b2da      	uxtb	r2, r3
   15238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1523a:	b2db      	uxtb	r3, r3
   1523c:	18d3      	adds	r3, r2, r3
   1523e:	b2da      	uxtb	r2, r3
   15240:	231c      	movs	r3, #28
   15242:	18fb      	adds	r3, r7, r3
   15244:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   15246:	231c      	movs	r3, #28
   15248:	18fb      	adds	r3, r7, r3
   1524a:	2264      	movs	r2, #100	; 0x64
   1524c:	2164      	movs	r1, #100	; 0x64
   1524e:	0018      	movs	r0, r3
   15250:	4b1e      	ldr	r3, [pc, #120]	; (152cc <CLI_i2cScan+0x118>)
   15252:	4798      	blx	r3
   15254:	0003      	movs	r3, r0
   15256:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   15258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1525a:	2b00      	cmp	r3, #0
   1525c:	d10c      	bne.n	15278 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1525e:	231c      	movs	r3, #28
   15260:	18fb      	adds	r3, r7, r3
   15262:	781b      	ldrb	r3, [r3, #0]
   15264:	4a1a      	ldr	r2, [pc, #104]	; (152d0 <CLI_i2cScan+0x11c>)
   15266:	4817      	ldr	r0, [pc, #92]	; (152c4 <CLI_i2cScan+0x110>)
   15268:	210f      	movs	r1, #15
   1526a:	4c17      	ldr	r4, [pc, #92]	; (152c8 <CLI_i2cScan+0x114>)
   1526c:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1526e:	4b15      	ldr	r3, [pc, #84]	; (152c4 <CLI_i2cScan+0x110>)
   15270:	0018      	movs	r0, r3
   15272:	4b12      	ldr	r3, [pc, #72]	; (152bc <CLI_i2cScan+0x108>)
   15274:	4798      	blx	r3
   15276:	e006      	b.n	15286 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   15278:	4b12      	ldr	r3, [pc, #72]	; (152c4 <CLI_i2cScan+0x110>)
   1527a:	4a16      	ldr	r2, [pc, #88]	; (152d4 <CLI_i2cScan+0x120>)
   1527c:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1527e:	4b11      	ldr	r3, [pc, #68]	; (152c4 <CLI_i2cScan+0x110>)
   15280:	0018      	movs	r0, r3
   15282:	4b0e      	ldr	r3, [pc, #56]	; (152bc <CLI_i2cScan+0x108>)
   15284:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   15286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15288:	3301      	adds	r3, #1
   1528a:	633b      	str	r3, [r7, #48]	; 0x30
   1528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1528e:	2b0f      	cmp	r3, #15
   15290:	ddd0      	ble.n	15234 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   15292:	4b11      	ldr	r3, [pc, #68]	; (152d8 <CLI_i2cScan+0x124>)
   15294:	0018      	movs	r0, r3
   15296:	4b09      	ldr	r3, [pc, #36]	; (152bc <CLI_i2cScan+0x108>)
   15298:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1529c:	3310      	adds	r3, #16
   1529e:	637b      	str	r3, [r7, #52]	; 0x34
   152a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   152a2:	2b7f      	cmp	r3, #127	; 0x7f
   152a4:	ddb9      	ble.n	1521a <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   152a6:	4b0c      	ldr	r3, [pc, #48]	; (152d8 <CLI_i2cScan+0x124>)
   152a8:	0018      	movs	r0, r3
   152aa:	4b04      	ldr	r3, [pc, #16]	; (152bc <CLI_i2cScan+0x108>)
   152ac:	4798      	blx	r3
			return pdFALSE;
   152ae:	2300      	movs	r3, #0

}
   152b0:	0018      	movs	r0, r3
   152b2:	46bd      	mov	sp, r7
   152b4:	b00f      	add	sp, #60	; 0x3c
   152b6:	bd90      	pop	{r4, r7, pc}
   152b8:	000390f8 	.word	0x000390f8
   152bc:	00020205 	.word	0x00020205
   152c0:	0003912c 	.word	0x0003912c
   152c4:	200003a4 	.word	0x200003a4
   152c8:	00037bc5 	.word	0x00037bc5
   152cc:	00015c35 	.word	0x00015c35
   152d0:	00039134 	.word	0x00039134
   152d4:	00202058 	.word	0x00202058
   152d8:	00039018 	.word	0x00039018

000152dc <CLI_LOCK>:
}
BaseType_t CLI_CLLCD(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
	//LCD_clearScreen(WHITE);
	    return pdFALSE;
}
BaseType_t CLI_LOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152dc:	b580      	push	{r7, lr}
   152de:	b084      	sub	sp, #16
   152e0:	af00      	add	r7, sp, #0
   152e2:	60f8      	str	r0, [r7, #12]
   152e4:	60b9      	str	r1, [r7, #8]
   152e6:	607a      	str	r2, [r7, #4]
	lock();
   152e8:	4b03      	ldr	r3, [pc, #12]	; (152f8 <CLI_LOCK+0x1c>)
   152ea:	4798      	blx	r3
	    return pdFALSE;
   152ec:	2300      	movs	r3, #0
}
   152ee:	0018      	movs	r0, r3
   152f0:	46bd      	mov	sp, r7
   152f2:	b004      	add	sp, #16
   152f4:	bd80      	pop	{r7, pc}
   152f6:	46c0      	nop			; (mov r8, r8)
   152f8:	00016c55 	.word	0x00016c55

000152fc <CLI_UNLOCK>:
BaseType_t CLI_UNLOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152fc:	b580      	push	{r7, lr}
   152fe:	b084      	sub	sp, #16
   15300:	af00      	add	r7, sp, #0
   15302:	60f8      	str	r0, [r7, #12]
   15304:	60b9      	str	r1, [r7, #8]
   15306:	607a      	str	r2, [r7, #4]
	unlock();
   15308:	4b03      	ldr	r3, [pc, #12]	; (15318 <CLI_UNLOCK+0x1c>)
   1530a:	4798      	blx	r3
	    return pdFALSE;
   1530c:	2300      	movs	r3, #0
}
   1530e:	0018      	movs	r0, r3
   15310:	46bd      	mov	sp, r7
   15312:	b004      	add	sp, #16
   15314:	bd80      	pop	{r7, pc}
   15316:	46c0      	nop			; (mov r8, r8)
   15318:	00016cd1 	.word	0x00016cd1

0001531c <CLI_BME>:
BaseType_t CLI_BME(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1531c:	b580      	push	{r7, lr}
   1531e:	b084      	sub	sp, #16
   15320:	af00      	add	r7, sp, #0
   15322:	60f8      	str	r0, [r7, #12]
   15324:	60b9      	str	r1, [r7, #8]
   15326:	607a      	str	r2, [r7, #4]
	warning_speaker();
   15328:	4b03      	ldr	r3, [pc, #12]	; (15338 <CLI_BME+0x1c>)
   1532a:	4798      	blx	r3
	return pdFALSE;
   1532c:	2300      	movs	r3, #0
   1532e:	0018      	movs	r0, r3
   15330:	46bd      	mov	sp, r7
   15332:	b004      	add	sp, #16
   15334:	bd80      	pop	{r7, pc}
   15336:	46c0      	nop			; (mov r8, r8)
   15338:	00017081 	.word	0x00017081

0001533c <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   1533c:	b580      	push	{r7, lr}
   1533e:	b088      	sub	sp, #32
   15340:	af00      	add	r7, sp, #0
   15342:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   15344:	4b33      	ldr	r3, [pc, #204]	; (15414 <vControlHandlerTask+0xd8>)
   15346:	0018      	movs	r0, r3
   15348:	4b33      	ldr	r3, [pc, #204]	; (15418 <vControlHandlerTask+0xdc>)
   1534a:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   1534c:	2200      	movs	r2, #0
   1534e:	2114      	movs	r1, #20
   15350:	2002      	movs	r0, #2
   15352:	4b32      	ldr	r3, [pc, #200]	; (1541c <vControlHandlerTask+0xe0>)
   15354:	4798      	blx	r3
   15356:	0002      	movs	r2, r0
   15358:	4b31      	ldr	r3, [pc, #196]	; (15420 <vControlHandlerTask+0xe4>)
   1535a:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   1535c:	2200      	movs	r2, #0
   1535e:	2103      	movs	r1, #3
   15360:	2002      	movs	r0, #2
   15362:	4b2e      	ldr	r3, [pc, #184]	; (1541c <vControlHandlerTask+0xe0>)
   15364:	4798      	blx	r3
   15366:	0002      	movs	r2, r0
   15368:	4b2e      	ldr	r3, [pc, #184]	; (15424 <vControlHandlerTask+0xe8>)
   1536a:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   1536c:	4b2c      	ldr	r3, [pc, #176]	; (15420 <vControlHandlerTask+0xe4>)
   1536e:	681b      	ldr	r3, [r3, #0]
   15370:	2b00      	cmp	r3, #0
   15372:	d003      	beq.n	1537c <vControlHandlerTask+0x40>
   15374:	4b2b      	ldr	r3, [pc, #172]	; (15424 <vControlHandlerTask+0xe8>)
   15376:	681b      	ldr	r3, [r3, #0]
   15378:	2b00      	cmp	r3, #0
   1537a:	d103      	bne.n	15384 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   1537c:	4b2a      	ldr	r3, [pc, #168]	; (15428 <vControlHandlerTask+0xec>)
   1537e:	0018      	movs	r0, r3
   15380:	4b25      	ldr	r3, [pc, #148]	; (15418 <vControlHandlerTask+0xdc>)
   15382:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   15384:	4b29      	ldr	r3, [pc, #164]	; (1542c <vControlHandlerTask+0xf0>)
   15386:	2200      	movs	r2, #0
   15388:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   1538a:	4b28      	ldr	r3, [pc, #160]	; (1542c <vControlHandlerTask+0xf0>)
   1538c:	781b      	ldrb	r3, [r3, #0]
   1538e:	2b01      	cmp	r3, #1
   15390:	d01d      	beq.n	153ce <vControlHandlerTask+0x92>
   15392:	2b02      	cmp	r3, #2
   15394:	d035      	beq.n	15402 <vControlHandlerTask+0xc6>
   15396:	2b00      	cmp	r3, #0
   15398:	d12f      	bne.n	153fa <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   1539a:	4b21      	ldr	r3, [pc, #132]	; (15420 <vControlHandlerTask+0xe4>)
   1539c:	681b      	ldr	r3, [r3, #0]
   1539e:	220c      	movs	r2, #12
   153a0:	18b9      	adds	r1, r7, r2
   153a2:	2200      	movs	r2, #0
   153a4:	0018      	movs	r0, r3
   153a6:	4b22      	ldr	r3, [pc, #136]	; (15430 <vControlHandlerTask+0xf4>)
   153a8:	4798      	blx	r3
   153aa:	0003      	movs	r3, r0
   153ac:	2b01      	cmp	r3, #1
   153ae:	d12a      	bne.n	15406 <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   153b0:	4b20      	ldr	r3, [pc, #128]	; (15434 <vControlHandlerTask+0xf8>)
   153b2:	0019      	movs	r1, r3
   153b4:	2001      	movs	r0, #1
   153b6:	4b20      	ldr	r3, [pc, #128]	; (15438 <vControlHandlerTask+0xfc>)
   153b8:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   153ba:	230c      	movs	r3, #12
   153bc:	18fb      	adds	r3, r7, r3
   153be:	0018      	movs	r0, r3
   153c0:	4b1e      	ldr	r3, [pc, #120]	; (1543c <vControlHandlerTask+0x100>)
   153c2:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   153c4:	4b19      	ldr	r3, [pc, #100]	; (1542c <vControlHandlerTask+0xf0>)
   153c6:	2201      	movs	r2, #1
   153c8:	701a      	strb	r2, [r3, #0]
                }

                break;
   153ca:	46c0      	nop			; (mov r8, r8)
   153cc:	e01b      	b.n	15406 <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   153ce:	4b1c      	ldr	r3, [pc, #112]	; (15440 <vControlHandlerTask+0x104>)
   153d0:	4798      	blx	r3
   153d2:	1e03      	subs	r3, r0, #0
   153d4:	d019      	beq.n	1540a <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   153d6:	4b1b      	ldr	r3, [pc, #108]	; (15444 <vControlHandlerTask+0x108>)
   153d8:	4798      	blx	r3
   153da:	0003      	movs	r3, r0
   153dc:	0018      	movs	r0, r3
   153de:	4b1a      	ldr	r3, [pc, #104]	; (15448 <vControlHandlerTask+0x10c>)
   153e0:	4798      	blx	r3
   153e2:	0003      	movs	r3, r0
   153e4:	2b01      	cmp	r3, #1
   153e6:	d004      	beq.n	153f2 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   153e8:	4b18      	ldr	r3, [pc, #96]	; (1544c <vControlHandlerTask+0x110>)
   153ea:	0019      	movs	r1, r3
   153ec:	2001      	movs	r0, #1
   153ee:	4b12      	ldr	r3, [pc, #72]	; (15438 <vControlHandlerTask+0xfc>)
   153f0:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   153f2:	4b0e      	ldr	r3, [pc, #56]	; (1542c <vControlHandlerTask+0xf0>)
   153f4:	2200      	movs	r2, #0
   153f6:	701a      	strb	r2, [r3, #0]
                }

                break;
   153f8:	e007      	b.n	1540a <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   153fa:	4b0c      	ldr	r3, [pc, #48]	; (1542c <vControlHandlerTask+0xf0>)
   153fc:	2200      	movs	r2, #0
   153fe:	701a      	strb	r2, [r3, #0]
                break;
   15400:	e004      	b.n	1540c <vControlHandlerTask+0xd0>
                break;
   15402:	46c0      	nop			; (mov r8, r8)
   15404:	e002      	b.n	1540c <vControlHandlerTask+0xd0>
                break;
   15406:	46c0      	nop			; (mov r8, r8)
   15408:	e000      	b.n	1540c <vControlHandlerTask+0xd0>
                break;
   1540a:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   1540c:	2028      	movs	r0, #40	; 0x28
   1540e:	4b10      	ldr	r3, [pc, #64]	; (15450 <vControlHandlerTask+0x114>)
   15410:	4798      	blx	r3
        switch (controlState) {
   15412:	e7ba      	b.n	1538a <vControlHandlerTask+0x4e>
   15414:	000391bc 	.word	0x000391bc
   15418:	00020205 	.word	0x00020205
   1541c:	0001c8a5 	.word	0x0001c8a5
   15420:	200004a0 	.word	0x200004a0
   15424:	200004a4 	.word	0x200004a4
   15428:	000391dc 	.word	0x000391dc
   1542c:	200046c0 	.word	0x200046c0
   15430:	0001d405 	.word	0x0001d405
   15434:	00039208 	.word	0x00039208
   15438:	000202f1 	.word	0x000202f1
   1543c:	00018075 	.word	0x00018075
   15440:	000180b1 	.word	0x000180b1
   15444:	000180c5 	.word	0x000180c5
   15448:	0001990d 	.word	0x0001990d
   1544c:	00039230 	.word	0x00039230
   15450:	0001e5b1 	.word	0x0001e5b1

00015454 <system_interrupt_enable>:
   15454:	b580      	push	{r7, lr}
   15456:	b082      	sub	sp, #8
   15458:	af00      	add	r7, sp, #0
   1545a:	0002      	movs	r2, r0
   1545c:	1dfb      	adds	r3, r7, #7
   1545e:	701a      	strb	r2, [r3, #0]
   15460:	4b06      	ldr	r3, [pc, #24]	; (1547c <system_interrupt_enable+0x28>)
   15462:	1dfa      	adds	r2, r7, #7
   15464:	7812      	ldrb	r2, [r2, #0]
   15466:	0011      	movs	r1, r2
   15468:	221f      	movs	r2, #31
   1546a:	400a      	ands	r2, r1
   1546c:	2101      	movs	r1, #1
   1546e:	4091      	lsls	r1, r2
   15470:	000a      	movs	r2, r1
   15472:	601a      	str	r2, [r3, #0]
   15474:	46c0      	nop			; (mov r8, r8)
   15476:	46bd      	mov	sp, r7
   15478:	b002      	add	sp, #8
   1547a:	bd80      	pop	{r7, pc}
   1547c:	e000e100 	.word	0xe000e100

00015480 <i2c_master_is_syncing>:
   15480:	b580      	push	{r7, lr}
   15482:	b084      	sub	sp, #16
   15484:	af00      	add	r7, sp, #0
   15486:	6078      	str	r0, [r7, #4]
   15488:	687b      	ldr	r3, [r7, #4]
   1548a:	681b      	ldr	r3, [r3, #0]
   1548c:	60fb      	str	r3, [r7, #12]
   1548e:	68fb      	ldr	r3, [r7, #12]
   15490:	69db      	ldr	r3, [r3, #28]
   15492:	2207      	movs	r2, #7
   15494:	4013      	ands	r3, r2
   15496:	1e5a      	subs	r2, r3, #1
   15498:	4193      	sbcs	r3, r2
   1549a:	b2db      	uxtb	r3, r3
   1549c:	0018      	movs	r0, r3
   1549e:	46bd      	mov	sp, r7
   154a0:	b004      	add	sp, #16
   154a2:	bd80      	pop	{r7, pc}

000154a4 <_i2c_master_wait_for_sync>:
   154a4:	b580      	push	{r7, lr}
   154a6:	b082      	sub	sp, #8
   154a8:	af00      	add	r7, sp, #0
   154aa:	6078      	str	r0, [r7, #4]
   154ac:	46c0      	nop			; (mov r8, r8)
   154ae:	687b      	ldr	r3, [r7, #4]
   154b0:	0018      	movs	r0, r3
   154b2:	4b04      	ldr	r3, [pc, #16]	; (154c4 <_i2c_master_wait_for_sync+0x20>)
   154b4:	4798      	blx	r3
   154b6:	1e03      	subs	r3, r0, #0
   154b8:	d1f9      	bne.n	154ae <_i2c_master_wait_for_sync+0xa>
   154ba:	46c0      	nop			; (mov r8, r8)
   154bc:	46bd      	mov	sp, r7
   154be:	b002      	add	sp, #8
   154c0:	bd80      	pop	{r7, pc}
   154c2:	46c0      	nop			; (mov r8, r8)
   154c4:	00015481 	.word	0x00015481

000154c8 <i2c_master_get_config_defaults>:
   154c8:	b580      	push	{r7, lr}
   154ca:	b082      	sub	sp, #8
   154cc:	af00      	add	r7, sp, #0
   154ce:	6078      	str	r0, [r7, #4]
   154d0:	687b      	ldr	r3, [r7, #4]
   154d2:	2264      	movs	r2, #100	; 0x64
   154d4:	601a      	str	r2, [r3, #0]
   154d6:	687b      	ldr	r3, [r7, #4]
   154d8:	4a1b      	ldr	r2, [pc, #108]	; (15548 <i2c_master_get_config_defaults+0x80>)
   154da:	605a      	str	r2, [r3, #4]
   154dc:	687b      	ldr	r3, [r7, #4]
   154de:	2200      	movs	r2, #0
   154e0:	609a      	str	r2, [r3, #8]
   154e2:	687b      	ldr	r3, [r7, #4]
   154e4:	2200      	movs	r2, #0
   154e6:	731a      	strb	r2, [r3, #12]
   154e8:	687b      	ldr	r3, [r7, #4]
   154ea:	2200      	movs	r2, #0
   154ec:	761a      	strb	r2, [r3, #24]
   154ee:	687b      	ldr	r3, [r7, #4]
   154f0:	2280      	movs	r2, #128	; 0x80
   154f2:	0392      	lsls	r2, r2, #14
   154f4:	611a      	str	r2, [r3, #16]
   154f6:	687b      	ldr	r3, [r7, #4]
   154f8:	2201      	movs	r2, #1
   154fa:	4252      	negs	r2, r2
   154fc:	82da      	strh	r2, [r3, #22]
   154fe:	687b      	ldr	r3, [r7, #4]
   15500:	2201      	movs	r2, #1
   15502:	4252      	negs	r2, r2
   15504:	829a      	strh	r2, [r3, #20]
   15506:	687b      	ldr	r3, [r7, #4]
   15508:	2200      	movs	r2, #0
   1550a:	61da      	str	r2, [r3, #28]
   1550c:	687b      	ldr	r3, [r7, #4]
   1550e:	2200      	movs	r2, #0
   15510:	621a      	str	r2, [r3, #32]
   15512:	687b      	ldr	r3, [r7, #4]
   15514:	2224      	movs	r2, #36	; 0x24
   15516:	2100      	movs	r1, #0
   15518:	5499      	strb	r1, [r3, r2]
   1551a:	687b      	ldr	r3, [r7, #4]
   1551c:	2200      	movs	r2, #0
   1551e:	629a      	str	r2, [r3, #40]	; 0x28
   15520:	687b      	ldr	r3, [r7, #4]
   15522:	222c      	movs	r2, #44	; 0x2c
   15524:	2100      	movs	r1, #0
   15526:	5499      	strb	r1, [r3, r2]
   15528:	687b      	ldr	r3, [r7, #4]
   1552a:	222d      	movs	r2, #45	; 0x2d
   1552c:	2100      	movs	r1, #0
   1552e:	5499      	strb	r1, [r3, r2]
   15530:	687b      	ldr	r3, [r7, #4]
   15532:	222e      	movs	r2, #46	; 0x2e
   15534:	2100      	movs	r1, #0
   15536:	5499      	strb	r1, [r3, r2]
   15538:	687b      	ldr	r3, [r7, #4]
   1553a:	22d7      	movs	r2, #215	; 0xd7
   1553c:	861a      	strh	r2, [r3, #48]	; 0x30
   1553e:	46c0      	nop			; (mov r8, r8)
   15540:	46bd      	mov	sp, r7
   15542:	b002      	add	sp, #8
   15544:	bd80      	pop	{r7, pc}
   15546:	46c0      	nop			; (mov r8, r8)
   15548:	00000d48 	.word	0x00000d48

0001554c <i2c_master_enable>:
   1554c:	b580      	push	{r7, lr}
   1554e:	b084      	sub	sp, #16
   15550:	af00      	add	r7, sp, #0
   15552:	6078      	str	r0, [r7, #4]
   15554:	687b      	ldr	r3, [r7, #4]
   15556:	681b      	ldr	r3, [r3, #0]
   15558:	60bb      	str	r3, [r7, #8]
   1555a:	2300      	movs	r3, #0
   1555c:	60fb      	str	r3, [r7, #12]
   1555e:	687b      	ldr	r3, [r7, #4]
   15560:	0018      	movs	r0, r3
   15562:	4b14      	ldr	r3, [pc, #80]	; (155b4 <i2c_master_enable+0x68>)
   15564:	4798      	blx	r3
   15566:	68bb      	ldr	r3, [r7, #8]
   15568:	681b      	ldr	r3, [r3, #0]
   1556a:	2202      	movs	r2, #2
   1556c:	431a      	orrs	r2, r3
   1556e:	68bb      	ldr	r3, [r7, #8]
   15570:	601a      	str	r2, [r3, #0]
   15572:	687b      	ldr	r3, [r7, #4]
   15574:	681b      	ldr	r3, [r3, #0]
   15576:	0018      	movs	r0, r3
   15578:	4b0f      	ldr	r3, [pc, #60]	; (155b8 <i2c_master_enable+0x6c>)
   1557a:	4798      	blx	r3
   1557c:	0003      	movs	r3, r0
   1557e:	0018      	movs	r0, r3
   15580:	4b0e      	ldr	r3, [pc, #56]	; (155bc <i2c_master_enable+0x70>)
   15582:	4798      	blx	r3
   15584:	e00c      	b.n	155a0 <i2c_master_enable+0x54>
   15586:	68fb      	ldr	r3, [r7, #12]
   15588:	3301      	adds	r3, #1
   1558a:	60fb      	str	r3, [r7, #12]
   1558c:	687b      	ldr	r3, [r7, #4]
   1558e:	88db      	ldrh	r3, [r3, #6]
   15590:	001a      	movs	r2, r3
   15592:	68fb      	ldr	r3, [r7, #12]
   15594:	429a      	cmp	r2, r3
   15596:	d803      	bhi.n	155a0 <i2c_master_enable+0x54>
   15598:	68bb      	ldr	r3, [r7, #8]
   1559a:	2210      	movs	r2, #16
   1559c:	835a      	strh	r2, [r3, #26]
   1559e:	e006      	b.n	155ae <i2c_master_enable+0x62>
   155a0:	68bb      	ldr	r3, [r7, #8]
   155a2:	8b5b      	ldrh	r3, [r3, #26]
   155a4:	b29b      	uxth	r3, r3
   155a6:	001a      	movs	r2, r3
   155a8:	2310      	movs	r3, #16
   155aa:	4013      	ands	r3, r2
   155ac:	d0eb      	beq.n	15586 <i2c_master_enable+0x3a>
   155ae:	46bd      	mov	sp, r7
   155b0:	b004      	add	sp, #16
   155b2:	bd80      	pop	{r7, pc}
   155b4:	000154a5 	.word	0x000154a5
   155b8:	00029aa5 	.word	0x00029aa5
   155bc:	00015455 	.word	0x00015455

000155c0 <i2c_master_enable_callback>:
   155c0:	b580      	push	{r7, lr}
   155c2:	b082      	sub	sp, #8
   155c4:	af00      	add	r7, sp, #0
   155c6:	6078      	str	r0, [r7, #4]
   155c8:	000a      	movs	r2, r1
   155ca:	1cfb      	adds	r3, r7, #3
   155cc:	701a      	strb	r2, [r3, #0]
   155ce:	687b      	ldr	r3, [r7, #4]
   155d0:	7e5b      	ldrb	r3, [r3, #25]
   155d2:	b2db      	uxtb	r3, r3
   155d4:	b25a      	sxtb	r2, r3
   155d6:	1cfb      	adds	r3, r7, #3
   155d8:	781b      	ldrb	r3, [r3, #0]
   155da:	2101      	movs	r1, #1
   155dc:	4099      	lsls	r1, r3
   155de:	000b      	movs	r3, r1
   155e0:	b25b      	sxtb	r3, r3
   155e2:	4313      	orrs	r3, r2
   155e4:	b25b      	sxtb	r3, r3
   155e6:	b2da      	uxtb	r2, r3
   155e8:	687b      	ldr	r3, [r7, #4]
   155ea:	765a      	strb	r2, [r3, #25]
   155ec:	46c0      	nop			; (mov r8, r8)
   155ee:	46bd      	mov	sp, r7
   155f0:	b002      	add	sp, #8
   155f2:	bd80      	pop	{r7, pc}

000155f4 <I2cDriverConfigureSensorBus>:
   155f4:	b590      	push	{r4, r7, lr}
   155f6:	b091      	sub	sp, #68	; 0x44
   155f8:	af00      	add	r7, sp, #0
   155fa:	2300      	movs	r3, #0
   155fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   155fe:	233a      	movs	r3, #58	; 0x3a
   15600:	18fb      	adds	r3, r7, r3
   15602:	2200      	movs	r2, #0
   15604:	701a      	strb	r2, [r3, #0]
   15606:	1d3b      	adds	r3, r7, #4
   15608:	0018      	movs	r0, r3
   1560a:	4b21      	ldr	r3, [pc, #132]	; (15690 <I2cDriverConfigureSensorBus+0x9c>)
   1560c:	4798      	blx	r3
   1560e:	1d3b      	adds	r3, r7, #4
   15610:	4a20      	ldr	r2, [pc, #128]	; (15694 <I2cDriverConfigureSensorBus+0xa0>)
   15612:	61da      	str	r2, [r3, #28]
   15614:	1d3b      	adds	r3, r7, #4
   15616:	4a20      	ldr	r2, [pc, #128]	; (15698 <I2cDriverConfigureSensorBus+0xa4>)
   15618:	621a      	str	r2, [r3, #32]
   1561a:	1d3b      	adds	r3, r7, #4
   1561c:	22fa      	movs	r2, #250	; 0xfa
   1561e:	0092      	lsls	r2, r2, #2
   15620:	82da      	strh	r2, [r3, #22]
   15622:	233b      	movs	r3, #59	; 0x3b
   15624:	18fb      	adds	r3, r7, r3
   15626:	2203      	movs	r2, #3
   15628:	701a      	strb	r2, [r3, #0]
   1562a:	e01e      	b.n	1566a <I2cDriverConfigureSensorBus+0x76>
   1562c:	233a      	movs	r3, #58	; 0x3a
   1562e:	18fc      	adds	r4, r7, r3
   15630:	1d3a      	adds	r2, r7, #4
   15632:	491a      	ldr	r1, [pc, #104]	; (1569c <I2cDriverConfigureSensorBus+0xa8>)
   15634:	4b1a      	ldr	r3, [pc, #104]	; (156a0 <I2cDriverConfigureSensorBus+0xac>)
   15636:	0018      	movs	r0, r3
   15638:	4b1a      	ldr	r3, [pc, #104]	; (156a4 <I2cDriverConfigureSensorBus+0xb0>)
   1563a:	4798      	blx	r3
   1563c:	0003      	movs	r3, r0
   1563e:	7023      	strb	r3, [r4, #0]
   15640:	233a      	movs	r3, #58	; 0x3a
   15642:	18fb      	adds	r3, r7, r3
   15644:	781b      	ldrb	r3, [r3, #0]
   15646:	2b00      	cmp	r3, #0
   15648:	d104      	bne.n	15654 <I2cDriverConfigureSensorBus+0x60>
   1564a:	233a      	movs	r3, #58	; 0x3a
   1564c:	18fb      	adds	r3, r7, r3
   1564e:	781b      	ldrb	r3, [r3, #0]
   15650:	63fb      	str	r3, [r7, #60]	; 0x3c
   15652:	e00f      	b.n	15674 <I2cDriverConfigureSensorBus+0x80>
   15654:	4b12      	ldr	r3, [pc, #72]	; (156a0 <I2cDriverConfigureSensorBus+0xac>)
   15656:	0018      	movs	r0, r3
   15658:	4b13      	ldr	r3, [pc, #76]	; (156a8 <I2cDriverConfigureSensorBus+0xb4>)
   1565a:	4798      	blx	r3
   1565c:	233b      	movs	r3, #59	; 0x3b
   1565e:	18fb      	adds	r3, r7, r3
   15660:	781a      	ldrb	r2, [r3, #0]
   15662:	233b      	movs	r3, #59	; 0x3b
   15664:	18fb      	adds	r3, r7, r3
   15666:	3a01      	subs	r2, #1
   15668:	701a      	strb	r2, [r3, #0]
   1566a:	233b      	movs	r3, #59	; 0x3b
   1566c:	18fb      	adds	r3, r7, r3
   1566e:	781b      	ldrb	r3, [r3, #0]
   15670:	2b00      	cmp	r3, #0
   15672:	d1db      	bne.n	1562c <I2cDriverConfigureSensorBus+0x38>
   15674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15676:	2b00      	cmp	r3, #0
   15678:	d104      	bne.n	15684 <I2cDriverConfigureSensorBus+0x90>
   1567a:	4b09      	ldr	r3, [pc, #36]	; (156a0 <I2cDriverConfigureSensorBus+0xac>)
   1567c:	0018      	movs	r0, r3
   1567e:	4b0b      	ldr	r3, [pc, #44]	; (156ac <I2cDriverConfigureSensorBus+0xb8>)
   15680:	4798      	blx	r3
   15682:	e000      	b.n	15686 <I2cDriverConfigureSensorBus+0x92>
   15684:	46c0      	nop			; (mov r8, r8)
   15686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15688:	0018      	movs	r0, r3
   1568a:	46bd      	mov	sp, r7
   1568c:	b011      	add	sp, #68	; 0x44
   1568e:	bd90      	pop	{r4, r7, pc}
   15690:	000154c9 	.word	0x000154c9
   15694:	00080002 	.word	0x00080002
   15698:	00090002 	.word	0x00090002
   1569c:	42000800 	.word	0x42000800
   156a0:	200046c8 	.word	0x200046c8
   156a4:	00019f3d 	.word	0x00019f3d
   156a8:	0001a071 	.word	0x0001a071
   156ac:	0001554d 	.word	0x0001554d

000156b0 <I2cSensorsTxComplete>:
   156b0:	b580      	push	{r7, lr}
   156b2:	b084      	sub	sp, #16
   156b4:	af00      	add	r7, sp, #0
   156b6:	6078      	str	r0, [r7, #4]
   156b8:	4b0e      	ldr	r3, [pc, #56]	; (156f4 <I2cSensorsTxComplete+0x44>)
   156ba:	2200      	movs	r2, #0
   156bc:	701a      	strb	r2, [r3, #0]
   156be:	4b0d      	ldr	r3, [pc, #52]	; (156f4 <I2cSensorsTxComplete+0x44>)
   156c0:	2201      	movs	r2, #1
   156c2:	609a      	str	r2, [r3, #8]
   156c4:	2300      	movs	r3, #0
   156c6:	60fb      	str	r3, [r7, #12]
   156c8:	4b0b      	ldr	r3, [pc, #44]	; (156f8 <I2cSensorsTxComplete+0x48>)
   156ca:	681b      	ldr	r3, [r3, #0]
   156cc:	220c      	movs	r2, #12
   156ce:	18ba      	adds	r2, r7, r2
   156d0:	0011      	movs	r1, r2
   156d2:	0018      	movs	r0, r3
   156d4:	4b09      	ldr	r3, [pc, #36]	; (156fc <I2cSensorsTxComplete+0x4c>)
   156d6:	4798      	blx	r3
   156d8:	4b09      	ldr	r3, [pc, #36]	; (15700 <I2cSensorsTxComplete+0x50>)
   156da:	2200      	movs	r2, #0
   156dc:	701a      	strb	r2, [r3, #0]
   156de:	68fb      	ldr	r3, [r7, #12]
   156e0:	2b00      	cmp	r3, #0
   156e2:	d003      	beq.n	156ec <I2cSensorsTxComplete+0x3c>
   156e4:	4b07      	ldr	r3, [pc, #28]	; (15704 <I2cSensorsTxComplete+0x54>)
   156e6:	2280      	movs	r2, #128	; 0x80
   156e8:	0552      	lsls	r2, r2, #21
   156ea:	601a      	str	r2, [r3, #0]
   156ec:	46c0      	nop			; (mov r8, r8)
   156ee:	46bd      	mov	sp, r7
   156f0:	b004      	add	sp, #16
   156f2:	bd80      	pop	{r7, pc}
   156f4:	200004ac 	.word	0x200004ac
   156f8:	200046f0 	.word	0x200046f0
   156fc:	0001d1d5 	.word	0x0001d1d5
   15700:	200004a8 	.word	0x200004a8
   15704:	e000ed04 	.word	0xe000ed04

00015708 <I2cSensorsRxComplete>:
   15708:	b580      	push	{r7, lr}
   1570a:	b084      	sub	sp, #16
   1570c:	af00      	add	r7, sp, #0
   1570e:	6078      	str	r0, [r7, #4]
   15710:	4b0e      	ldr	r3, [pc, #56]	; (1574c <I2cSensorsRxComplete+0x44>)
   15712:	2200      	movs	r2, #0
   15714:	701a      	strb	r2, [r3, #0]
   15716:	4b0d      	ldr	r3, [pc, #52]	; (1574c <I2cSensorsRxComplete+0x44>)
   15718:	2201      	movs	r2, #1
   1571a:	609a      	str	r2, [r3, #8]
   1571c:	2300      	movs	r3, #0
   1571e:	60fb      	str	r3, [r7, #12]
   15720:	4b0b      	ldr	r3, [pc, #44]	; (15750 <I2cSensorsRxComplete+0x48>)
   15722:	681b      	ldr	r3, [r3, #0]
   15724:	220c      	movs	r2, #12
   15726:	18ba      	adds	r2, r7, r2
   15728:	0011      	movs	r1, r2
   1572a:	0018      	movs	r0, r3
   1572c:	4b09      	ldr	r3, [pc, #36]	; (15754 <I2cSensorsRxComplete+0x4c>)
   1572e:	4798      	blx	r3
   15730:	4b09      	ldr	r3, [pc, #36]	; (15758 <I2cSensorsRxComplete+0x50>)
   15732:	2200      	movs	r2, #0
   15734:	701a      	strb	r2, [r3, #0]
   15736:	68fb      	ldr	r3, [r7, #12]
   15738:	2b00      	cmp	r3, #0
   1573a:	d003      	beq.n	15744 <I2cSensorsRxComplete+0x3c>
   1573c:	4b07      	ldr	r3, [pc, #28]	; (1575c <I2cSensorsRxComplete+0x54>)
   1573e:	2280      	movs	r2, #128	; 0x80
   15740:	0552      	lsls	r2, r2, #21
   15742:	601a      	str	r2, [r3, #0]
   15744:	46c0      	nop			; (mov r8, r8)
   15746:	46bd      	mov	sp, r7
   15748:	b004      	add	sp, #16
   1574a:	bd80      	pop	{r7, pc}
   1574c:	200004ac 	.word	0x200004ac
   15750:	200046f0 	.word	0x200046f0
   15754:	0001d1d5 	.word	0x0001d1d5
   15758:	200004a8 	.word	0x200004a8
   1575c:	e000ed04 	.word	0xe000ed04

00015760 <I2cSensorsError>:
   15760:	b580      	push	{r7, lr}
   15762:	b084      	sub	sp, #16
   15764:	af00      	add	r7, sp, #0
   15766:	6078      	str	r0, [r7, #4]
   15768:	4b0e      	ldr	r3, [pc, #56]	; (157a4 <I2cSensorsError+0x44>)
   1576a:	2200      	movs	r2, #0
   1576c:	701a      	strb	r2, [r3, #0]
   1576e:	4b0d      	ldr	r3, [pc, #52]	; (157a4 <I2cSensorsError+0x44>)
   15770:	2201      	movs	r2, #1
   15772:	605a      	str	r2, [r3, #4]
   15774:	2300      	movs	r3, #0
   15776:	60fb      	str	r3, [r7, #12]
   15778:	4b0b      	ldr	r3, [pc, #44]	; (157a8 <I2cSensorsError+0x48>)
   1577a:	681b      	ldr	r3, [r3, #0]
   1577c:	220c      	movs	r2, #12
   1577e:	18ba      	adds	r2, r7, r2
   15780:	0011      	movs	r1, r2
   15782:	0018      	movs	r0, r3
   15784:	4b09      	ldr	r3, [pc, #36]	; (157ac <I2cSensorsError+0x4c>)
   15786:	4798      	blx	r3
   15788:	4b09      	ldr	r3, [pc, #36]	; (157b0 <I2cSensorsError+0x50>)
   1578a:	2201      	movs	r2, #1
   1578c:	701a      	strb	r2, [r3, #0]
   1578e:	68fb      	ldr	r3, [r7, #12]
   15790:	2b00      	cmp	r3, #0
   15792:	d003      	beq.n	1579c <I2cSensorsError+0x3c>
   15794:	4b07      	ldr	r3, [pc, #28]	; (157b4 <I2cSensorsError+0x54>)
   15796:	2280      	movs	r2, #128	; 0x80
   15798:	0552      	lsls	r2, r2, #21
   1579a:	601a      	str	r2, [r3, #0]
   1579c:	46c0      	nop			; (mov r8, r8)
   1579e:	46bd      	mov	sp, r7
   157a0:	b004      	add	sp, #16
   157a2:	bd80      	pop	{r7, pc}
   157a4:	200004ac 	.word	0x200004ac
   157a8:	200046f0 	.word	0x200046f0
   157ac:	0001d1d5 	.word	0x0001d1d5
   157b0:	200004a8 	.word	0x200004a8
   157b4:	e000ed04 	.word	0xe000ed04

000157b8 <I2cDriverRegisterSensorBusCallbacks>:
   157b8:	b580      	push	{r7, lr}
   157ba:	af00      	add	r7, sp, #0
   157bc:	4911      	ldr	r1, [pc, #68]	; (15804 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   157be:	4b12      	ldr	r3, [pc, #72]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157c0:	2200      	movs	r2, #0
   157c2:	0018      	movs	r0, r3
   157c4:	4b11      	ldr	r3, [pc, #68]	; (1580c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   157c6:	4798      	blx	r3
   157c8:	4b0f      	ldr	r3, [pc, #60]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157ca:	2100      	movs	r1, #0
   157cc:	0018      	movs	r0, r3
   157ce:	4b10      	ldr	r3, [pc, #64]	; (15810 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   157d0:	4798      	blx	r3
   157d2:	4910      	ldr	r1, [pc, #64]	; (15814 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   157d4:	4b0c      	ldr	r3, [pc, #48]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157d6:	2201      	movs	r2, #1
   157d8:	0018      	movs	r0, r3
   157da:	4b0c      	ldr	r3, [pc, #48]	; (1580c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   157dc:	4798      	blx	r3
   157de:	4b0a      	ldr	r3, [pc, #40]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157e0:	2101      	movs	r1, #1
   157e2:	0018      	movs	r0, r3
   157e4:	4b0a      	ldr	r3, [pc, #40]	; (15810 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   157e6:	4798      	blx	r3
   157e8:	490b      	ldr	r1, [pc, #44]	; (15818 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   157ea:	4b07      	ldr	r3, [pc, #28]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157ec:	2202      	movs	r2, #2
   157ee:	0018      	movs	r0, r3
   157f0:	4b06      	ldr	r3, [pc, #24]	; (1580c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   157f2:	4798      	blx	r3
   157f4:	4b04      	ldr	r3, [pc, #16]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157f6:	2102      	movs	r1, #2
   157f8:	0018      	movs	r0, r3
   157fa:	4b05      	ldr	r3, [pc, #20]	; (15810 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   157fc:	4798      	blx	r3
   157fe:	46c0      	nop			; (mov r8, r8)
   15800:	46bd      	mov	sp, r7
   15802:	bd80      	pop	{r7, pc}
   15804:	000156b1 	.word	0x000156b1
   15808:	200046c8 	.word	0x200046c8
   1580c:	00012909 	.word	0x00012909
   15810:	000155c1 	.word	0x000155c1
   15814:	00015709 	.word	0x00015709
   15818:	00015761 	.word	0x00015761

0001581c <I2cInitializeDriver>:
   1581c:	b580      	push	{r7, lr}
   1581e:	b082      	sub	sp, #8
   15820:	af00      	add	r7, sp, #0
   15822:	2300      	movs	r3, #0
   15824:	607b      	str	r3, [r7, #4]
   15826:	4b14      	ldr	r3, [pc, #80]	; (15878 <I2cInitializeDriver+0x5c>)
   15828:	4798      	blx	r3
   1582a:	0003      	movs	r3, r0
   1582c:	607b      	str	r3, [r7, #4]
   1582e:	687b      	ldr	r3, [r7, #4]
   15830:	2b00      	cmp	r3, #0
   15832:	d11a      	bne.n	1586a <I2cInitializeDriver+0x4e>
   15834:	4b11      	ldr	r3, [pc, #68]	; (1587c <I2cInitializeDriver+0x60>)
   15836:	4798      	blx	r3
   15838:	2001      	movs	r0, #1
   1583a:	4b11      	ldr	r3, [pc, #68]	; (15880 <I2cInitializeDriver+0x64>)
   1583c:	4798      	blx	r3
   1583e:	0002      	movs	r2, r0
   15840:	4b10      	ldr	r3, [pc, #64]	; (15884 <I2cInitializeDriver+0x68>)
   15842:	601a      	str	r2, [r3, #0]
   15844:	2203      	movs	r2, #3
   15846:	2100      	movs	r1, #0
   15848:	2001      	movs	r0, #1
   1584a:	4b0f      	ldr	r3, [pc, #60]	; (15888 <I2cInitializeDriver+0x6c>)
   1584c:	4798      	blx	r3
   1584e:	0002      	movs	r2, r0
   15850:	4b0e      	ldr	r3, [pc, #56]	; (1588c <I2cInitializeDriver+0x70>)
   15852:	601a      	str	r2, [r3, #0]
   15854:	4b0b      	ldr	r3, [pc, #44]	; (15884 <I2cInitializeDriver+0x68>)
   15856:	681b      	ldr	r3, [r3, #0]
   15858:	2b00      	cmp	r3, #0
   1585a:	d003      	beq.n	15864 <I2cInitializeDriver+0x48>
   1585c:	4b0b      	ldr	r3, [pc, #44]	; (1588c <I2cInitializeDriver+0x70>)
   1585e:	681b      	ldr	r3, [r3, #0]
   15860:	2b00      	cmp	r3, #0
   15862:	d103      	bne.n	1586c <I2cInitializeDriver+0x50>
   15864:	2306      	movs	r3, #6
   15866:	607b      	str	r3, [r7, #4]
   15868:	e000      	b.n	1586c <I2cInitializeDriver+0x50>
   1586a:	46c0      	nop			; (mov r8, r8)
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	0018      	movs	r0, r3
   15870:	46bd      	mov	sp, r7
   15872:	b002      	add	sp, #8
   15874:	bd80      	pop	{r7, pc}
   15876:	46c0      	nop			; (mov r8, r8)
   15878:	000155f5 	.word	0x000155f5
   1587c:	000157b9 	.word	0x000157b9
   15880:	0001cb0d 	.word	0x0001cb0d
   15884:	200046c4 	.word	0x200046c4
   15888:	0001c8a5 	.word	0x0001c8a5
   1588c:	200046f0 	.word	0x200046f0

00015890 <I2cWriteData>:
   15890:	b590      	push	{r4, r7, lr}
   15892:	b085      	sub	sp, #20
   15894:	af00      	add	r7, sp, #0
   15896:	6078      	str	r0, [r7, #4]
   15898:	2300      	movs	r3, #0
   1589a:	60fb      	str	r3, [r7, #12]
   1589c:	687b      	ldr	r3, [r7, #4]
   1589e:	2b00      	cmp	r3, #0
   158a0:	d003      	beq.n	158aa <I2cWriteData+0x1a>
   158a2:	687b      	ldr	r3, [r7, #4]
   158a4:	685b      	ldr	r3, [r3, #4]
   158a6:	2b00      	cmp	r3, #0
   158a8:	d103      	bne.n	158b2 <I2cWriteData+0x22>
   158aa:	2308      	movs	r3, #8
   158ac:	425b      	negs	r3, r3
   158ae:	60fb      	str	r3, [r7, #12]
   158b0:	e01f      	b.n	158f2 <I2cWriteData+0x62>
   158b2:	687b      	ldr	r3, [r7, #4]
   158b4:	781b      	ldrb	r3, [r3, #0]
   158b6:	b29a      	uxth	r2, r3
   158b8:	4b10      	ldr	r3, [pc, #64]	; (158fc <I2cWriteData+0x6c>)
   158ba:	801a      	strh	r2, [r3, #0]
   158bc:	687b      	ldr	r3, [r7, #4]
   158be:	685a      	ldr	r2, [r3, #4]
   158c0:	4b0e      	ldr	r3, [pc, #56]	; (158fc <I2cWriteData+0x6c>)
   158c2:	605a      	str	r2, [r3, #4]
   158c4:	687b      	ldr	r3, [r7, #4]
   158c6:	89da      	ldrh	r2, [r3, #14]
   158c8:	4b0c      	ldr	r3, [pc, #48]	; (158fc <I2cWriteData+0x6c>)
   158ca:	805a      	strh	r2, [r3, #2]
   158cc:	230b      	movs	r3, #11
   158ce:	18fc      	adds	r4, r7, r3
   158d0:	4a0a      	ldr	r2, [pc, #40]	; (158fc <I2cWriteData+0x6c>)
   158d2:	4b0b      	ldr	r3, [pc, #44]	; (15900 <I2cWriteData+0x70>)
   158d4:	0011      	movs	r1, r2
   158d6:	0018      	movs	r0, r3
   158d8:	4b0a      	ldr	r3, [pc, #40]	; (15904 <I2cWriteData+0x74>)
   158da:	4798      	blx	r3
   158dc:	0003      	movs	r3, r0
   158de:	7023      	strb	r3, [r4, #0]
   158e0:	230b      	movs	r3, #11
   158e2:	18fb      	adds	r3, r7, r3
   158e4:	781b      	ldrb	r3, [r3, #0]
   158e6:	2b00      	cmp	r3, #0
   158e8:	d003      	beq.n	158f2 <I2cWriteData+0x62>
   158ea:	2306      	movs	r3, #6
   158ec:	425b      	negs	r3, r3
   158ee:	60fb      	str	r3, [r7, #12]
   158f0:	46c0      	nop			; (mov r8, r8)
   158f2:	68fb      	ldr	r3, [r7, #12]
   158f4:	0018      	movs	r0, r3
   158f6:	46bd      	mov	sp, r7
   158f8:	b005      	add	sp, #20
   158fa:	bd90      	pop	{r4, r7, pc}
   158fc:	200046f4 	.word	0x200046f4
   15900:	200046c8 	.word	0x200046c8
   15904:	00012b8d 	.word	0x00012b8d

00015908 <I2cReadData>:
   15908:	b590      	push	{r4, r7, lr}
   1590a:	b085      	sub	sp, #20
   1590c:	af00      	add	r7, sp, #0
   1590e:	6078      	str	r0, [r7, #4]
   15910:	2300      	movs	r3, #0
   15912:	60fb      	str	r3, [r7, #12]
   15914:	687b      	ldr	r3, [r7, #4]
   15916:	2b00      	cmp	r3, #0
   15918:	d003      	beq.n	15922 <I2cReadData+0x1a>
   1591a:	687b      	ldr	r3, [r7, #4]
   1591c:	685b      	ldr	r3, [r3, #4]
   1591e:	2b00      	cmp	r3, #0
   15920:	d103      	bne.n	1592a <I2cReadData+0x22>
   15922:	2308      	movs	r3, #8
   15924:	425b      	negs	r3, r3
   15926:	60fb      	str	r3, [r7, #12]
   15928:	e01f      	b.n	1596a <I2cReadData+0x62>
   1592a:	687b      	ldr	r3, [r7, #4]
   1592c:	781b      	ldrb	r3, [r3, #0]
   1592e:	b29a      	uxth	r2, r3
   15930:	4b10      	ldr	r3, [pc, #64]	; (15974 <I2cReadData+0x6c>)
   15932:	801a      	strh	r2, [r3, #0]
   15934:	687b      	ldr	r3, [r7, #4]
   15936:	689a      	ldr	r2, [r3, #8]
   15938:	4b0e      	ldr	r3, [pc, #56]	; (15974 <I2cReadData+0x6c>)
   1593a:	605a      	str	r2, [r3, #4]
   1593c:	687b      	ldr	r3, [r7, #4]
   1593e:	899a      	ldrh	r2, [r3, #12]
   15940:	4b0c      	ldr	r3, [pc, #48]	; (15974 <I2cReadData+0x6c>)
   15942:	805a      	strh	r2, [r3, #2]
   15944:	230b      	movs	r3, #11
   15946:	18fc      	adds	r4, r7, r3
   15948:	4a0a      	ldr	r2, [pc, #40]	; (15974 <I2cReadData+0x6c>)
   1594a:	4b0b      	ldr	r3, [pc, #44]	; (15978 <I2cReadData+0x70>)
   1594c:	0011      	movs	r1, r2
   1594e:	0018      	movs	r0, r3
   15950:	4b0a      	ldr	r3, [pc, #40]	; (1597c <I2cReadData+0x74>)
   15952:	4798      	blx	r3
   15954:	0003      	movs	r3, r0
   15956:	7023      	strb	r3, [r4, #0]
   15958:	230b      	movs	r3, #11
   1595a:	18fb      	adds	r3, r7, r3
   1595c:	781b      	ldrb	r3, [r3, #0]
   1595e:	2b00      	cmp	r3, #0
   15960:	d003      	beq.n	1596a <I2cReadData+0x62>
   15962:	2306      	movs	r3, #6
   15964:	425b      	negs	r3, r3
   15966:	60fb      	str	r3, [r7, #12]
   15968:	46c0      	nop			; (mov r8, r8)
   1596a:	68fb      	ldr	r3, [r7, #12]
   1596c:	0018      	movs	r0, r3
   1596e:	46bd      	mov	sp, r7
   15970:	b005      	add	sp, #20
   15972:	bd90      	pop	{r4, r7, pc}
   15974:	200046f4 	.word	0x200046f4
   15978:	200046c8 	.word	0x200046c8
   1597c:	00012aa9 	.word	0x00012aa9

00015980 <I2cFreeMutex>:
   15980:	b590      	push	{r4, r7, lr}
   15982:	b083      	sub	sp, #12
   15984:	af00      	add	r7, sp, #0
   15986:	2300      	movs	r3, #0
   15988:	607b      	str	r3, [r7, #4]
   1598a:	4b09      	ldr	r3, [pc, #36]	; (159b0 <I2cFreeMutex+0x30>)
   1598c:	6818      	ldr	r0, [r3, #0]
   1598e:	2300      	movs	r3, #0
   15990:	2200      	movs	r2, #0
   15992:	2100      	movs	r1, #0
   15994:	4c07      	ldr	r4, [pc, #28]	; (159b4 <I2cFreeMutex+0x34>)
   15996:	47a0      	blx	r4
   15998:	0003      	movs	r3, r0
   1599a:	2b01      	cmp	r3, #1
   1599c:	d002      	beq.n	159a4 <I2cFreeMutex+0x24>
   1599e:	2314      	movs	r3, #20
   159a0:	425b      	negs	r3, r3
   159a2:	607b      	str	r3, [r7, #4]
   159a4:	687b      	ldr	r3, [r7, #4]
   159a6:	0018      	movs	r0, r3
   159a8:	46bd      	mov	sp, r7
   159aa:	b003      	add	sp, #12
   159ac:	bd90      	pop	{r4, r7, pc}
   159ae:	46c0      	nop			; (mov r8, r8)
   159b0:	200046c4 	.word	0x200046c4
   159b4:	0001cb4d 	.word	0x0001cb4d

000159b8 <I2cGetMutex>:
   159b8:	b580      	push	{r7, lr}
   159ba:	b084      	sub	sp, #16
   159bc:	af00      	add	r7, sp, #0
   159be:	6078      	str	r0, [r7, #4]
   159c0:	2300      	movs	r3, #0
   159c2:	60fb      	str	r3, [r7, #12]
   159c4:	4b08      	ldr	r3, [pc, #32]	; (159e8 <I2cGetMutex+0x30>)
   159c6:	681b      	ldr	r3, [r3, #0]
   159c8:	687a      	ldr	r2, [r7, #4]
   159ca:	0011      	movs	r1, r2
   159cc:	0018      	movs	r0, r3
   159ce:	4b07      	ldr	r3, [pc, #28]	; (159ec <I2cGetMutex+0x34>)
   159d0:	4798      	blx	r3
   159d2:	0003      	movs	r3, r0
   159d4:	2b01      	cmp	r3, #1
   159d6:	d002      	beq.n	159de <I2cGetMutex+0x26>
   159d8:	231d      	movs	r3, #29
   159da:	425b      	negs	r3, r3
   159dc:	60fb      	str	r3, [r7, #12]
   159de:	68fb      	ldr	r3, [r7, #12]
   159e0:	0018      	movs	r0, r3
   159e2:	46bd      	mov	sp, r7
   159e4:	b004      	add	sp, #16
   159e6:	bd80      	pop	{r7, pc}
   159e8:	200046c4 	.word	0x200046c4
   159ec:	0001d85d 	.word	0x0001d85d

000159f0 <I2cGetSemaphoreHandle>:
   159f0:	b580      	push	{r7, lr}
   159f2:	b084      	sub	sp, #16
   159f4:	af00      	add	r7, sp, #0
   159f6:	6078      	str	r0, [r7, #4]
   159f8:	2300      	movs	r3, #0
   159fa:	60fb      	str	r3, [r7, #12]
   159fc:	4b04      	ldr	r3, [pc, #16]	; (15a10 <I2cGetSemaphoreHandle+0x20>)
   159fe:	681a      	ldr	r2, [r3, #0]
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	601a      	str	r2, [r3, #0]
   15a04:	68fb      	ldr	r3, [r7, #12]
   15a06:	0018      	movs	r0, r3
   15a08:	46bd      	mov	sp, r7
   15a0a:	b004      	add	sp, #16
   15a0c:	bd80      	pop	{r7, pc}
   15a0e:	46c0      	nop			; (mov r8, r8)
   15a10:	200046f0 	.word	0x200046f0

00015a14 <I2cGetTaskErrorStatus>:
   15a14:	b580      	push	{r7, lr}
   15a16:	af00      	add	r7, sp, #0
   15a18:	4b02      	ldr	r3, [pc, #8]	; (15a24 <I2cGetTaskErrorStatus+0x10>)
   15a1a:	781b      	ldrb	r3, [r3, #0]
   15a1c:	0018      	movs	r0, r3
   15a1e:	46bd      	mov	sp, r7
   15a20:	bd80      	pop	{r7, pc}
   15a22:	46c0      	nop			; (mov r8, r8)
   15a24:	200004a8 	.word	0x200004a8

00015a28 <I2cSetTaskErrorStatus>:
   15a28:	b580      	push	{r7, lr}
   15a2a:	b082      	sub	sp, #8
   15a2c:	af00      	add	r7, sp, #0
   15a2e:	0002      	movs	r2, r0
   15a30:	1dfb      	adds	r3, r7, #7
   15a32:	701a      	strb	r2, [r3, #0]
   15a34:	4b03      	ldr	r3, [pc, #12]	; (15a44 <I2cSetTaskErrorStatus+0x1c>)
   15a36:	1dfa      	adds	r2, r7, #7
   15a38:	7812      	ldrb	r2, [r2, #0]
   15a3a:	701a      	strb	r2, [r3, #0]
   15a3c:	46c0      	nop			; (mov r8, r8)
   15a3e:	46bd      	mov	sp, r7
   15a40:	b002      	add	sp, #8
   15a42:	bd80      	pop	{r7, pc}
   15a44:	200004a8 	.word	0x200004a8

00015a48 <I2cWriteDataWait>:
   15a48:	b580      	push	{r7, lr}
   15a4a:	b084      	sub	sp, #16
   15a4c:	af00      	add	r7, sp, #0
   15a4e:	6078      	str	r0, [r7, #4]
   15a50:	6039      	str	r1, [r7, #0]
   15a52:	2300      	movs	r3, #0
   15a54:	60fb      	str	r3, [r7, #12]
   15a56:	2300      	movs	r3, #0
   15a58:	60bb      	str	r3, [r7, #8]
   15a5a:	2396      	movs	r3, #150	; 0x96
   15a5c:	005b      	lsls	r3, r3, #1
   15a5e:	0018      	movs	r0, r3
   15a60:	4b28      	ldr	r3, [pc, #160]	; (15b04 <I2cWriteDataWait+0xbc>)
   15a62:	4798      	blx	r3
   15a64:	0003      	movs	r3, r0
   15a66:	60fb      	str	r3, [r7, #12]
   15a68:	68fb      	ldr	r3, [r7, #12]
   15a6a:	2b00      	cmp	r3, #0
   15a6c:	d138      	bne.n	15ae0 <I2cWriteDataWait+0x98>
   15a6e:	2308      	movs	r3, #8
   15a70:	18fb      	adds	r3, r7, r3
   15a72:	0018      	movs	r0, r3
   15a74:	4b24      	ldr	r3, [pc, #144]	; (15b08 <I2cWriteDataWait+0xc0>)
   15a76:	4798      	blx	r3
   15a78:	0003      	movs	r3, r0
   15a7a:	60fb      	str	r3, [r7, #12]
   15a7c:	68fb      	ldr	r3, [r7, #12]
   15a7e:	2b00      	cmp	r3, #0
   15a80:	d130      	bne.n	15ae4 <I2cWriteDataWait+0x9c>
   15a82:	687b      	ldr	r3, [r7, #4]
   15a84:	0018      	movs	r0, r3
   15a86:	4b21      	ldr	r3, [pc, #132]	; (15b0c <I2cWriteDataWait+0xc4>)
   15a88:	4798      	blx	r3
   15a8a:	0003      	movs	r3, r0
   15a8c:	60fb      	str	r3, [r7, #12]
   15a8e:	68fb      	ldr	r3, [r7, #12]
   15a90:	2b00      	cmp	r3, #0
   15a92:	d12a      	bne.n	15aea <I2cWriteDataWait+0xa2>
   15a94:	68bb      	ldr	r3, [r7, #8]
   15a96:	683a      	ldr	r2, [r7, #0]
   15a98:	0011      	movs	r1, r2
   15a9a:	0018      	movs	r0, r3
   15a9c:	4b1c      	ldr	r3, [pc, #112]	; (15b10 <I2cWriteDataWait+0xc8>)
   15a9e:	4798      	blx	r3
   15aa0:	0003      	movs	r3, r0
   15aa2:	2b01      	cmp	r3, #1
   15aa4:	d111      	bne.n	15aca <I2cWriteDataWait+0x82>
   15aa6:	4b1b      	ldr	r3, [pc, #108]	; (15b14 <I2cWriteDataWait+0xcc>)
   15aa8:	4798      	blx	r3
   15aaa:	1e03      	subs	r3, r0, #0
   15aac:	d011      	beq.n	15ad2 <I2cWriteDataWait+0x8a>
   15aae:	2000      	movs	r0, #0
   15ab0:	4b19      	ldr	r3, [pc, #100]	; (15b18 <I2cWriteDataWait+0xd0>)
   15ab2:	4798      	blx	r3
   15ab4:	68fb      	ldr	r3, [r7, #12]
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d003      	beq.n	15ac2 <I2cWriteDataWait+0x7a>
   15aba:	2321      	movs	r3, #33	; 0x21
   15abc:	425b      	negs	r3, r3
   15abe:	60fb      	str	r3, [r7, #12]
   15ac0:	e014      	b.n	15aec <I2cWriteDataWait+0xa4>
   15ac2:	2303      	movs	r3, #3
   15ac4:	425b      	negs	r3, r3
   15ac6:	60fb      	str	r3, [r7, #12]
   15ac8:	e010      	b.n	15aec <I2cWriteDataWait+0xa4>
   15aca:	2303      	movs	r3, #3
   15acc:	425b      	negs	r3, r3
   15ace:	60fb      	str	r3, [r7, #12]
   15ad0:	e00c      	b.n	15aec <I2cWriteDataWait+0xa4>
   15ad2:	4b12      	ldr	r3, [pc, #72]	; (15b1c <I2cWriteDataWait+0xd4>)
   15ad4:	4798      	blx	r3
   15ad6:	0002      	movs	r2, r0
   15ad8:	68fb      	ldr	r3, [r7, #12]
   15ada:	4313      	orrs	r3, r2
   15adc:	60fb      	str	r3, [r7, #12]
   15ade:	e002      	b.n	15ae6 <I2cWriteDataWait+0x9e>
   15ae0:	46c0      	nop			; (mov r8, r8)
   15ae2:	e000      	b.n	15ae6 <I2cWriteDataWait+0x9e>
   15ae4:	46c0      	nop			; (mov r8, r8)
   15ae6:	68fb      	ldr	r3, [r7, #12]
   15ae8:	e007      	b.n	15afa <I2cWriteDataWait+0xb2>
   15aea:	46c0      	nop			; (mov r8, r8)
   15aec:	4b0b      	ldr	r3, [pc, #44]	; (15b1c <I2cWriteDataWait+0xd4>)
   15aee:	4798      	blx	r3
   15af0:	0002      	movs	r2, r0
   15af2:	68fb      	ldr	r3, [r7, #12]
   15af4:	4313      	orrs	r3, r2
   15af6:	60fb      	str	r3, [r7, #12]
   15af8:	68fb      	ldr	r3, [r7, #12]
   15afa:	0018      	movs	r0, r3
   15afc:	46bd      	mov	sp, r7
   15afe:	b004      	add	sp, #16
   15b00:	bd80      	pop	{r7, pc}
   15b02:	46c0      	nop			; (mov r8, r8)
   15b04:	000159b9 	.word	0x000159b9
   15b08:	000159f1 	.word	0x000159f1
   15b0c:	00015891 	.word	0x00015891
   15b10:	0001d85d 	.word	0x0001d85d
   15b14:	00015a15 	.word	0x00015a15
   15b18:	00015a29 	.word	0x00015a29
   15b1c:	00015981 	.word	0x00015981

00015b20 <I2cReadDataWait>:
   15b20:	b580      	push	{r7, lr}
   15b22:	b086      	sub	sp, #24
   15b24:	af00      	add	r7, sp, #0
   15b26:	60f8      	str	r0, [r7, #12]
   15b28:	60b9      	str	r1, [r7, #8]
   15b2a:	607a      	str	r2, [r7, #4]
   15b2c:	2300      	movs	r3, #0
   15b2e:	617b      	str	r3, [r7, #20]
   15b30:	2300      	movs	r3, #0
   15b32:	613b      	str	r3, [r7, #16]
   15b34:	2396      	movs	r3, #150	; 0x96
   15b36:	005b      	lsls	r3, r3, #1
   15b38:	0018      	movs	r0, r3
   15b3a:	4b35      	ldr	r3, [pc, #212]	; (15c10 <I2cReadDataWait+0xf0>)
   15b3c:	4798      	blx	r3
   15b3e:	0003      	movs	r3, r0
   15b40:	617b      	str	r3, [r7, #20]
   15b42:	697b      	ldr	r3, [r7, #20]
   15b44:	2b00      	cmp	r3, #0
   15b46:	d155      	bne.n	15bf4 <I2cReadDataWait+0xd4>
   15b48:	2310      	movs	r3, #16
   15b4a:	18fb      	adds	r3, r7, r3
   15b4c:	0018      	movs	r0, r3
   15b4e:	4b31      	ldr	r3, [pc, #196]	; (15c14 <I2cReadDataWait+0xf4>)
   15b50:	4798      	blx	r3
   15b52:	0003      	movs	r3, r0
   15b54:	617b      	str	r3, [r7, #20]
   15b56:	697b      	ldr	r3, [r7, #20]
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d14d      	bne.n	15bf8 <I2cReadDataWait+0xd8>
   15b5c:	68fb      	ldr	r3, [r7, #12]
   15b5e:	0018      	movs	r0, r3
   15b60:	4b2d      	ldr	r3, [pc, #180]	; (15c18 <I2cReadDataWait+0xf8>)
   15b62:	4798      	blx	r3
   15b64:	0003      	movs	r3, r0
   15b66:	617b      	str	r3, [r7, #20]
   15b68:	697b      	ldr	r3, [r7, #20]
   15b6a:	2b00      	cmp	r3, #0
   15b6c:	d147      	bne.n	15bfe <I2cReadDataWait+0xde>
   15b6e:	693b      	ldr	r3, [r7, #16]
   15b70:	687a      	ldr	r2, [r7, #4]
   15b72:	0011      	movs	r1, r2
   15b74:	0018      	movs	r0, r3
   15b76:	4b29      	ldr	r3, [pc, #164]	; (15c1c <I2cReadDataWait+0xfc>)
   15b78:	4798      	blx	r3
   15b7a:	0003      	movs	r3, r0
   15b7c:	2b01      	cmp	r3, #1
   15b7e:	d118      	bne.n	15bb2 <I2cReadDataWait+0x92>
   15b80:	4b27      	ldr	r3, [pc, #156]	; (15c20 <I2cReadDataWait+0x100>)
   15b82:	4798      	blx	r3
   15b84:	1e03      	subs	r3, r0, #0
   15b86:	d006      	beq.n	15b96 <I2cReadDataWait+0x76>
   15b88:	2000      	movs	r0, #0
   15b8a:	4b26      	ldr	r3, [pc, #152]	; (15c24 <I2cReadDataWait+0x104>)
   15b8c:	4798      	blx	r3
   15b8e:	2303      	movs	r3, #3
   15b90:	425b      	negs	r3, r3
   15b92:	617b      	str	r3, [r7, #20]
   15b94:	e034      	b.n	15c00 <I2cReadDataWait+0xe0>
   15b96:	68bb      	ldr	r3, [r7, #8]
   15b98:	0018      	movs	r0, r3
   15b9a:	4b23      	ldr	r3, [pc, #140]	; (15c28 <I2cReadDataWait+0x108>)
   15b9c:	4798      	blx	r3
   15b9e:	68fb      	ldr	r3, [r7, #12]
   15ba0:	0018      	movs	r0, r3
   15ba2:	4b22      	ldr	r3, [pc, #136]	; (15c2c <I2cReadDataWait+0x10c>)
   15ba4:	4798      	blx	r3
   15ba6:	0003      	movs	r3, r0
   15ba8:	617b      	str	r3, [r7, #20]
   15baa:	697b      	ldr	r3, [r7, #20]
   15bac:	2b00      	cmp	r3, #0
   15bae:	d004      	beq.n	15bba <I2cReadDataWait+0x9a>
   15bb0:	e026      	b.n	15c00 <I2cReadDataWait+0xe0>
   15bb2:	2303      	movs	r3, #3
   15bb4:	425b      	negs	r3, r3
   15bb6:	617b      	str	r3, [r7, #20]
   15bb8:	e022      	b.n	15c00 <I2cReadDataWait+0xe0>
   15bba:	693b      	ldr	r3, [r7, #16]
   15bbc:	687a      	ldr	r2, [r7, #4]
   15bbe:	0011      	movs	r1, r2
   15bc0:	0018      	movs	r0, r3
   15bc2:	4b16      	ldr	r3, [pc, #88]	; (15c1c <I2cReadDataWait+0xfc>)
   15bc4:	4798      	blx	r3
   15bc6:	0003      	movs	r3, r0
   15bc8:	2b01      	cmp	r3, #1
   15bca:	d10a      	bne.n	15be2 <I2cReadDataWait+0xc2>
   15bcc:	4b14      	ldr	r3, [pc, #80]	; (15c20 <I2cReadDataWait+0x100>)
   15bce:	4798      	blx	r3
   15bd0:	1e03      	subs	r3, r0, #0
   15bd2:	d00a      	beq.n	15bea <I2cReadDataWait+0xca>
   15bd4:	2000      	movs	r0, #0
   15bd6:	4b13      	ldr	r3, [pc, #76]	; (15c24 <I2cReadDataWait+0x104>)
   15bd8:	4798      	blx	r3
   15bda:	2303      	movs	r3, #3
   15bdc:	425b      	negs	r3, r3
   15bde:	617b      	str	r3, [r7, #20]
   15be0:	e00e      	b.n	15c00 <I2cReadDataWait+0xe0>
   15be2:	2303      	movs	r3, #3
   15be4:	425b      	negs	r3, r3
   15be6:	617b      	str	r3, [r7, #20]
   15be8:	e00a      	b.n	15c00 <I2cReadDataWait+0xe0>
   15bea:	4b11      	ldr	r3, [pc, #68]	; (15c30 <I2cReadDataWait+0x110>)
   15bec:	4798      	blx	r3
   15bee:	0003      	movs	r3, r0
   15bf0:	617b      	str	r3, [r7, #20]
   15bf2:	e002      	b.n	15bfa <I2cReadDataWait+0xda>
   15bf4:	46c0      	nop			; (mov r8, r8)
   15bf6:	e000      	b.n	15bfa <I2cReadDataWait+0xda>
   15bf8:	46c0      	nop			; (mov r8, r8)
   15bfa:	697b      	ldr	r3, [r7, #20]
   15bfc:	e003      	b.n	15c06 <I2cReadDataWait+0xe6>
   15bfe:	46c0      	nop			; (mov r8, r8)
   15c00:	4b0b      	ldr	r3, [pc, #44]	; (15c30 <I2cReadDataWait+0x110>)
   15c02:	4798      	blx	r3
   15c04:	697b      	ldr	r3, [r7, #20]
   15c06:	0018      	movs	r0, r3
   15c08:	46bd      	mov	sp, r7
   15c0a:	b006      	add	sp, #24
   15c0c:	bd80      	pop	{r7, pc}
   15c0e:	46c0      	nop			; (mov r8, r8)
   15c10:	000159b9 	.word	0x000159b9
   15c14:	000159f1 	.word	0x000159f1
   15c18:	00015891 	.word	0x00015891
   15c1c:	0001d85d 	.word	0x0001d85d
   15c20:	00015a15 	.word	0x00015a15
   15c24:	00015a29 	.word	0x00015a29
   15c28:	0001e5b1 	.word	0x0001e5b1
   15c2c:	00015909 	.word	0x00015909
   15c30:	00015981 	.word	0x00015981

00015c34 <I2cPingAddressWait>:
   15c34:	b580      	push	{r7, lr}
   15c36:	b086      	sub	sp, #24
   15c38:	af00      	add	r7, sp, #0
   15c3a:	60f8      	str	r0, [r7, #12]
   15c3c:	60b9      	str	r1, [r7, #8]
   15c3e:	607a      	str	r2, [r7, #4]
   15c40:	2300      	movs	r3, #0
   15c42:	617b      	str	r3, [r7, #20]
   15c44:	2300      	movs	r3, #0
   15c46:	613b      	str	r3, [r7, #16]
   15c48:	2396      	movs	r3, #150	; 0x96
   15c4a:	005b      	lsls	r3, r3, #1
   15c4c:	0018      	movs	r0, r3
   15c4e:	4b24      	ldr	r3, [pc, #144]	; (15ce0 <I2cPingAddressWait+0xac>)
   15c50:	4798      	blx	r3
   15c52:	0003      	movs	r3, r0
   15c54:	617b      	str	r3, [r7, #20]
   15c56:	697b      	ldr	r3, [r7, #20]
   15c58:	2b00      	cmp	r3, #0
   15c5a:	d133      	bne.n	15cc4 <I2cPingAddressWait+0x90>
   15c5c:	2310      	movs	r3, #16
   15c5e:	18fb      	adds	r3, r7, r3
   15c60:	0018      	movs	r0, r3
   15c62:	4b20      	ldr	r3, [pc, #128]	; (15ce4 <I2cPingAddressWait+0xb0>)
   15c64:	4798      	blx	r3
   15c66:	0003      	movs	r3, r0
   15c68:	617b      	str	r3, [r7, #20]
   15c6a:	697b      	ldr	r3, [r7, #20]
   15c6c:	2b00      	cmp	r3, #0
   15c6e:	d12b      	bne.n	15cc8 <I2cPingAddressWait+0x94>
   15c70:	68fb      	ldr	r3, [r7, #12]
   15c72:	0018      	movs	r0, r3
   15c74:	4b1c      	ldr	r3, [pc, #112]	; (15ce8 <I2cPingAddressWait+0xb4>)
   15c76:	4798      	blx	r3
   15c78:	0003      	movs	r3, r0
   15c7a:	617b      	str	r3, [r7, #20]
   15c7c:	697b      	ldr	r3, [r7, #20]
   15c7e:	2b00      	cmp	r3, #0
   15c80:	d125      	bne.n	15cce <I2cPingAddressWait+0x9a>
   15c82:	693b      	ldr	r3, [r7, #16]
   15c84:	687a      	ldr	r2, [r7, #4]
   15c86:	0011      	movs	r1, r2
   15c88:	0018      	movs	r0, r3
   15c8a:	4b18      	ldr	r3, [pc, #96]	; (15cec <I2cPingAddressWait+0xb8>)
   15c8c:	4798      	blx	r3
   15c8e:	0003      	movs	r3, r0
   15c90:	2b01      	cmp	r3, #1
   15c92:	d113      	bne.n	15cbc <I2cPingAddressWait+0x88>
   15c94:	4b16      	ldr	r3, [pc, #88]	; (15cf0 <I2cPingAddressWait+0xbc>)
   15c96:	4798      	blx	r3
   15c98:	1e03      	subs	r3, r0, #0
   15c9a:	d006      	beq.n	15caa <I2cPingAddressWait+0x76>
   15c9c:	2000      	movs	r0, #0
   15c9e:	4b15      	ldr	r3, [pc, #84]	; (15cf4 <I2cPingAddressWait+0xc0>)
   15ca0:	4798      	blx	r3
   15ca2:	2303      	movs	r3, #3
   15ca4:	425b      	negs	r3, r3
   15ca6:	617b      	str	r3, [r7, #20]
   15ca8:	e012      	b.n	15cd0 <I2cPingAddressWait+0x9c>
   15caa:	68bb      	ldr	r3, [r7, #8]
   15cac:	0018      	movs	r0, r3
   15cae:	4b12      	ldr	r3, [pc, #72]	; (15cf8 <I2cPingAddressWait+0xc4>)
   15cb0:	4798      	blx	r3
   15cb2:	4b12      	ldr	r3, [pc, #72]	; (15cfc <I2cPingAddressWait+0xc8>)
   15cb4:	4798      	blx	r3
   15cb6:	0003      	movs	r3, r0
   15cb8:	617b      	str	r3, [r7, #20]
   15cba:	e006      	b.n	15cca <I2cPingAddressWait+0x96>
   15cbc:	2303      	movs	r3, #3
   15cbe:	425b      	negs	r3, r3
   15cc0:	617b      	str	r3, [r7, #20]
   15cc2:	e005      	b.n	15cd0 <I2cPingAddressWait+0x9c>
   15cc4:	46c0      	nop			; (mov r8, r8)
   15cc6:	e000      	b.n	15cca <I2cPingAddressWait+0x96>
   15cc8:	46c0      	nop			; (mov r8, r8)
   15cca:	697b      	ldr	r3, [r7, #20]
   15ccc:	e003      	b.n	15cd6 <I2cPingAddressWait+0xa2>
   15cce:	46c0      	nop			; (mov r8, r8)
   15cd0:	4b0a      	ldr	r3, [pc, #40]	; (15cfc <I2cPingAddressWait+0xc8>)
   15cd2:	4798      	blx	r3
   15cd4:	697b      	ldr	r3, [r7, #20]
   15cd6:	0018      	movs	r0, r3
   15cd8:	46bd      	mov	sp, r7
   15cda:	b006      	add	sp, #24
   15cdc:	bd80      	pop	{r7, pc}
   15cde:	46c0      	nop			; (mov r8, r8)
   15ce0:	000159b9 	.word	0x000159b9
   15ce4:	000159f1 	.word	0x000159f1
   15ce8:	00015891 	.word	0x00015891
   15cec:	0001d85d 	.word	0x0001d85d
   15cf0:	00015a15 	.word	0x00015a15
   15cf4:	00015a29 	.word	0x00015a29
   15cf8:	0001e5b1 	.word	0x0001e5b1
   15cfc:	00015981 	.word	0x00015981

00015d00 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   15d00:	b5b0      	push	{r4, r5, r7, lr}
   15d02:	b086      	sub	sp, #24
   15d04:	af00      	add	r7, sp, #0
   15d06:	60f8      	str	r0, [r7, #12]
   15d08:	0008      	movs	r0, r1
   15d0a:	607a      	str	r2, [r7, #4]
   15d0c:	0019      	movs	r1, r3
   15d0e:	230b      	movs	r3, #11
   15d10:	18fb      	adds	r3, r7, r3
   15d12:	1c02      	adds	r2, r0, #0
   15d14:	701a      	strb	r2, [r3, #0]
   15d16:	2308      	movs	r3, #8
   15d18:	18fb      	adds	r3, r7, r3
   15d1a:	1c0a      	adds	r2, r1, #0
   15d1c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   15d1e:	68fb      	ldr	r3, [r7, #12]
   15d20:	685c      	ldr	r4, [r3, #4]
   15d22:	68fb      	ldr	r3, [r7, #12]
   15d24:	6898      	ldr	r0, [r3, #8]
   15d26:	2308      	movs	r3, #8
   15d28:	18fb      	adds	r3, r7, r3
   15d2a:	881d      	ldrh	r5, [r3, #0]
   15d2c:	687a      	ldr	r2, [r7, #4]
   15d2e:	230b      	movs	r3, #11
   15d30:	18fb      	adds	r3, r7, r3
   15d32:	7819      	ldrb	r1, [r3, #0]
   15d34:	002b      	movs	r3, r5
   15d36:	47a0      	blx	r4
   15d38:	0003      	movs	r3, r0
   15d3a:	617b      	str	r3, [r7, #20]

  return ret;
   15d3c:	697b      	ldr	r3, [r7, #20]
}
   15d3e:	0018      	movs	r0, r3
   15d40:	46bd      	mov	sp, r7
   15d42:	b006      	add	sp, #24
   15d44:	bdb0      	pop	{r4, r5, r7, pc}

00015d46 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   15d46:	b5b0      	push	{r4, r5, r7, lr}
   15d48:	b086      	sub	sp, #24
   15d4a:	af00      	add	r7, sp, #0
   15d4c:	60f8      	str	r0, [r7, #12]
   15d4e:	0008      	movs	r0, r1
   15d50:	607a      	str	r2, [r7, #4]
   15d52:	0019      	movs	r1, r3
   15d54:	230b      	movs	r3, #11
   15d56:	18fb      	adds	r3, r7, r3
   15d58:	1c02      	adds	r2, r0, #0
   15d5a:	701a      	strb	r2, [r3, #0]
   15d5c:	2308      	movs	r3, #8
   15d5e:	18fb      	adds	r3, r7, r3
   15d60:	1c0a      	adds	r2, r1, #0
   15d62:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   15d64:	68fb      	ldr	r3, [r7, #12]
   15d66:	681c      	ldr	r4, [r3, #0]
   15d68:	68fb      	ldr	r3, [r7, #12]
   15d6a:	6898      	ldr	r0, [r3, #8]
   15d6c:	2308      	movs	r3, #8
   15d6e:	18fb      	adds	r3, r7, r3
   15d70:	881d      	ldrh	r5, [r3, #0]
   15d72:	687a      	ldr	r2, [r7, #4]
   15d74:	230b      	movs	r3, #11
   15d76:	18fb      	adds	r3, r7, r3
   15d78:	7819      	ldrb	r1, [r3, #0]
   15d7a:	002b      	movs	r3, r5
   15d7c:	47a0      	blx	r4
   15d7e:	0003      	movs	r3, r0
   15d80:	617b      	str	r3, [r7, #20]

  return ret;
   15d82:	697b      	ldr	r3, [r7, #20]
}
   15d84:	0018      	movs	r0, r3
   15d86:	46bd      	mov	sp, r7
   15d88:	b006      	add	sp, #24
   15d8a:	bdb0      	pop	{r4, r5, r7, pc}

00015d8c <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   15d8c:	b580      	push	{r7, lr}
   15d8e:	b082      	sub	sp, #8
   15d90:	af00      	add	r7, sp, #0
   15d92:	0002      	movs	r2, r0
   15d94:	1dbb      	adds	r3, r7, #6
   15d96:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   15d98:	1dbb      	adds	r3, r7, #6
   15d9a:	2200      	movs	r2, #0
   15d9c:	5e9a      	ldrsh	r2, [r3, r2]
   15d9e:	4b06      	ldr	r3, [pc, #24]	; (15db8 <lsm6dso_from_fs2_to_mg+0x2c>)
   15da0:	0010      	movs	r0, r2
   15da2:	4798      	blx	r3
   15da4:	1c02      	adds	r2, r0, #0
   15da6:	4b05      	ldr	r3, [pc, #20]	; (15dbc <lsm6dso_from_fs2_to_mg+0x30>)
   15da8:	4905      	ldr	r1, [pc, #20]	; (15dc0 <lsm6dso_from_fs2_to_mg+0x34>)
   15daa:	1c10      	adds	r0, r2, #0
   15dac:	4798      	blx	r3
   15dae:	1c03      	adds	r3, r0, #0
}
   15db0:	1c18      	adds	r0, r3, #0
   15db2:	46bd      	mov	sp, r7
   15db4:	b002      	add	sp, #8
   15db6:	bd80      	pop	{r7, pc}
   15db8:	00035af5 	.word	0x00035af5
   15dbc:	0003553d 	.word	0x0003553d
   15dc0:	3d79db23 	.word	0x3d79db23

00015dc4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15dc4:	b590      	push	{r4, r7, lr}
   15dc6:	b085      	sub	sp, #20
   15dc8:	af00      	add	r7, sp, #0
   15dca:	6078      	str	r0, [r7, #4]
   15dcc:	000a      	movs	r2, r1
   15dce:	1cfb      	adds	r3, r7, #3
   15dd0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15dd2:	2308      	movs	r3, #8
   15dd4:	18fa      	adds	r2, r7, r3
   15dd6:	6878      	ldr	r0, [r7, #4]
   15dd8:	2301      	movs	r3, #1
   15dda:	2110      	movs	r1, #16
   15ddc:	4c12      	ldr	r4, [pc, #72]	; (15e28 <lsm6dso_xl_full_scale_set+0x64>)
   15dde:	47a0      	blx	r4
   15de0:	0003      	movs	r3, r0
   15de2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15de4:	68fb      	ldr	r3, [r7, #12]
   15de6:	2b00      	cmp	r3, #0
   15de8:	d119      	bne.n	15e1e <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   15dea:	1cfb      	adds	r3, r7, #3
   15dec:	781b      	ldrb	r3, [r3, #0]
   15dee:	2203      	movs	r2, #3
   15df0:	4013      	ands	r3, r2
   15df2:	b2da      	uxtb	r2, r3
   15df4:	2308      	movs	r3, #8
   15df6:	18fb      	adds	r3, r7, r3
   15df8:	2103      	movs	r1, #3
   15dfa:	400a      	ands	r2, r1
   15dfc:	0090      	lsls	r0, r2, #2
   15dfe:	781a      	ldrb	r2, [r3, #0]
   15e00:	210c      	movs	r1, #12
   15e02:	438a      	bics	r2, r1
   15e04:	1c11      	adds	r1, r2, #0
   15e06:	1c02      	adds	r2, r0, #0
   15e08:	430a      	orrs	r2, r1
   15e0a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15e0c:	2308      	movs	r3, #8
   15e0e:	18fa      	adds	r2, r7, r3
   15e10:	6878      	ldr	r0, [r7, #4]
   15e12:	2301      	movs	r3, #1
   15e14:	2110      	movs	r1, #16
   15e16:	4c05      	ldr	r4, [pc, #20]	; (15e2c <lsm6dso_xl_full_scale_set+0x68>)
   15e18:	47a0      	blx	r4
   15e1a:	0003      	movs	r3, r0
   15e1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e1e:	68fb      	ldr	r3, [r7, #12]
}
   15e20:	0018      	movs	r0, r3
   15e22:	46bd      	mov	sp, r7
   15e24:	b005      	add	sp, #20
   15e26:	bd90      	pop	{r4, r7, pc}
   15e28:	00015d01 	.word	0x00015d01
   15e2c:	00015d47 	.word	0x00015d47

00015e30 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   15e30:	b590      	push	{r4, r7, lr}
   15e32:	b087      	sub	sp, #28
   15e34:	af00      	add	r7, sp, #0
   15e36:	6078      	str	r0, [r7, #4]
   15e38:	000a      	movs	r2, r1
   15e3a:	1cfb      	adds	r3, r7, #3
   15e3c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   15e3e:	2317      	movs	r3, #23
   15e40:	18fb      	adds	r3, r7, r3
   15e42:	1cfa      	adds	r2, r7, #3
   15e44:	7812      	ldrb	r2, [r2, #0]
   15e46:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15e48:	230c      	movs	r3, #12
   15e4a:	18fa      	adds	r2, r7, r3
   15e4c:	687b      	ldr	r3, [r7, #4]
   15e4e:	0011      	movs	r1, r2
   15e50:	0018      	movs	r0, r3
   15e52:	4ba4      	ldr	r3, [pc, #656]	; (160e4 <lsm6dso_xl_data_rate_set+0x2b4>)
   15e54:	4798      	blx	r3
   15e56:	0003      	movs	r3, r0
   15e58:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15e5a:	693b      	ldr	r3, [r7, #16]
   15e5c:	2b00      	cmp	r3, #0
   15e5e:	d000      	beq.n	15e62 <lsm6dso_xl_data_rate_set+0x32>
   15e60:	e113      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15e62:	230c      	movs	r3, #12
   15e64:	18fb      	adds	r3, r7, r3
   15e66:	781b      	ldrb	r3, [r3, #0]
   15e68:	07db      	lsls	r3, r3, #31
   15e6a:	0fdb      	lsrs	r3, r3, #31
   15e6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15e6e:	230c      	movs	r3, #12
   15e70:	18fb      	adds	r3, r7, r3
   15e72:	781b      	ldrb	r3, [r3, #0]
   15e74:	079b      	lsls	r3, r3, #30
   15e76:	0fdb      	lsrs	r3, r3, #31
   15e78:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15e7a:	4313      	orrs	r3, r2
   15e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15e7e:	230c      	movs	r3, #12
   15e80:	18fb      	adds	r3, r7, r3
   15e82:	781b      	ldrb	r3, [r3, #0]
   15e84:	075b      	lsls	r3, r3, #29
   15e86:	0fdb      	lsrs	r3, r3, #31
   15e88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15e8a:	4313      	orrs	r3, r2
   15e8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15e8e:	230c      	movs	r3, #12
   15e90:	18fb      	adds	r3, r7, r3
   15e92:	781b      	ldrb	r3, [r3, #0]
   15e94:	071b      	lsls	r3, r3, #28
   15e96:	0fdb      	lsrs	r3, r3, #31
   15e98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15e9a:	4313      	orrs	r3, r2
   15e9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15e9e:	230c      	movs	r3, #12
   15ea0:	18fb      	adds	r3, r7, r3
   15ea2:	781b      	ldrb	r3, [r3, #0]
   15ea4:	06db      	lsls	r3, r3, #27
   15ea6:	0fdb      	lsrs	r3, r3, #31
   15ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15eaa:	4313      	orrs	r3, r2
   15eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15eae:	230c      	movs	r3, #12
   15eb0:	18fb      	adds	r3, r7, r3
   15eb2:	781b      	ldrb	r3, [r3, #0]
   15eb4:	069b      	lsls	r3, r3, #26
   15eb6:	0fdb      	lsrs	r3, r3, #31
   15eb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15eba:	4313      	orrs	r3, r2
   15ebc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15ebe:	230c      	movs	r3, #12
   15ec0:	18fb      	adds	r3, r7, r3
   15ec2:	781b      	ldrb	r3, [r3, #0]
   15ec4:	065b      	lsls	r3, r3, #25
   15ec6:	0fdb      	lsrs	r3, r3, #31
   15ec8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15eca:	4313      	orrs	r3, r2
   15ecc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15ece:	230c      	movs	r3, #12
   15ed0:	18fb      	adds	r3, r7, r3
   15ed2:	781b      	ldrb	r3, [r3, #0]
   15ed4:	061b      	lsls	r3, r3, #24
   15ed6:	0fdb      	lsrs	r3, r3, #31
   15ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15eda:	4313      	orrs	r3, r2
   15edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15ede:	230c      	movs	r3, #12
   15ee0:	18fb      	adds	r3, r7, r3
   15ee2:	785b      	ldrb	r3, [r3, #1]
   15ee4:	07db      	lsls	r3, r3, #31
   15ee6:	0fdb      	lsrs	r3, r3, #31
   15ee8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15eea:	4313      	orrs	r3, r2
   15eec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15eee:	230c      	movs	r3, #12
   15ef0:	18fb      	adds	r3, r7, r3
   15ef2:	785b      	ldrb	r3, [r3, #1]
   15ef4:	079b      	lsls	r3, r3, #30
   15ef6:	0fdb      	lsrs	r3, r3, #31
   15ef8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15efa:	4313      	orrs	r3, r2
   15efc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15efe:	230c      	movs	r3, #12
   15f00:	18fb      	adds	r3, r7, r3
   15f02:	785b      	ldrb	r3, [r3, #1]
   15f04:	075b      	lsls	r3, r3, #29
   15f06:	0fdb      	lsrs	r3, r3, #31
   15f08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15f0a:	4313      	orrs	r3, r2
   15f0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f0e:	230c      	movs	r3, #12
   15f10:	18fb      	adds	r3, r7, r3
   15f12:	785b      	ldrb	r3, [r3, #1]
   15f14:	071b      	lsls	r3, r3, #28
   15f16:	0fdb      	lsrs	r3, r3, #31
   15f18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15f1a:	4313      	orrs	r3, r2
   15f1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15f1e:	230c      	movs	r3, #12
   15f20:	18fb      	adds	r3, r7, r3
   15f22:	785b      	ldrb	r3, [r3, #1]
   15f24:	06db      	lsls	r3, r3, #27
   15f26:	0fdb      	lsrs	r3, r3, #31
   15f28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f2a:	4313      	orrs	r3, r2
   15f2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15f2e:	230c      	movs	r3, #12
   15f30:	18fb      	adds	r3, r7, r3
   15f32:	785b      	ldrb	r3, [r3, #1]
   15f34:	069b      	lsls	r3, r3, #26
   15f36:	0fdb      	lsrs	r3, r3, #31
   15f38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15f3a:	4313      	orrs	r3, r2
   15f3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15f3e:	230c      	movs	r3, #12
   15f40:	18fb      	adds	r3, r7, r3
   15f42:	785b      	ldrb	r3, [r3, #1]
   15f44:	065b      	lsls	r3, r3, #25
   15f46:	0fdb      	lsrs	r3, r3, #31
   15f48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15f4a:	4313      	orrs	r3, r2
   15f4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15f4e:	230c      	movs	r3, #12
   15f50:	18fb      	adds	r3, r7, r3
   15f52:	785b      	ldrb	r3, [r3, #1]
   15f54:	061b      	lsls	r3, r3, #24
   15f56:	0fdb      	lsrs	r3, r3, #31
   15f58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15f5a:	4313      	orrs	r3, r2
   15f5c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15f5e:	2b01      	cmp	r3, #1
   15f60:	d000      	beq.n	15f64 <lsm6dso_xl_data_rate_set+0x134>
   15f62:	e092      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15f64:	230b      	movs	r3, #11
   15f66:	18fa      	adds	r2, r7, r3
   15f68:	687b      	ldr	r3, [r7, #4]
   15f6a:	0011      	movs	r1, r2
   15f6c:	0018      	movs	r0, r3
   15f6e:	4b5e      	ldr	r3, [pc, #376]	; (160e8 <lsm6dso_xl_data_rate_set+0x2b8>)
   15f70:	4798      	blx	r3
   15f72:	0003      	movs	r3, r0
   15f74:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15f76:	693b      	ldr	r3, [r7, #16]
   15f78:	2b00      	cmp	r3, #0
   15f7a:	d000      	beq.n	15f7e <lsm6dso_xl_data_rate_set+0x14e>
   15f7c:	e085      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15f7e:	230b      	movs	r3, #11
   15f80:	18fb      	adds	r3, r7, r3
   15f82:	781b      	ldrb	r3, [r3, #0]
   15f84:	2b01      	cmp	r3, #1
   15f86:	d017      	beq.n	15fb8 <lsm6dso_xl_data_rate_set+0x188>
   15f88:	dc02      	bgt.n	15f90 <lsm6dso_xl_data_rate_set+0x160>
   15f8a:	2b00      	cmp	r3, #0
   15f8c:	d005      	beq.n	15f9a <lsm6dso_xl_data_rate_set+0x16a>
   15f8e:	e076      	b.n	1607e <lsm6dso_xl_data_rate_set+0x24e>
   15f90:	2b02      	cmp	r3, #2
   15f92:	d029      	beq.n	15fe8 <lsm6dso_xl_data_rate_set+0x1b8>
   15f94:	2b03      	cmp	r3, #3
   15f96:	d048      	beq.n	1602a <lsm6dso_xl_data_rate_set+0x1fa>
   15f98:	e071      	b.n	1607e <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   15f9a:	1cfb      	adds	r3, r7, #3
   15f9c:	781b      	ldrb	r3, [r3, #0]
   15f9e:	2b00      	cmp	r3, #0
   15fa0:	d104      	bne.n	15fac <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   15fa2:	2317      	movs	r3, #23
   15fa4:	18fb      	adds	r3, r7, r3
   15fa6:	2201      	movs	r2, #1
   15fa8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15faa:	e06e      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15fac:	2317      	movs	r3, #23
   15fae:	18fb      	adds	r3, r7, r3
   15fb0:	1cfa      	adds	r2, r7, #3
   15fb2:	7812      	ldrb	r2, [r2, #0]
   15fb4:	701a      	strb	r2, [r3, #0]
            break;
   15fb6:	e068      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15fb8:	1cfb      	adds	r3, r7, #3
   15fba:	781b      	ldrb	r3, [r3, #0]
   15fbc:	2b00      	cmp	r3, #0
   15fbe:	d104      	bne.n	15fca <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   15fc0:	2317      	movs	r3, #23
   15fc2:	18fb      	adds	r3, r7, r3
   15fc4:	2202      	movs	r2, #2
   15fc6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15fc8:	e05f      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15fca:	1cfb      	adds	r3, r7, #3
   15fcc:	781b      	ldrb	r3, [r3, #0]
   15fce:	2b01      	cmp	r3, #1
   15fd0:	d104      	bne.n	15fdc <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   15fd2:	2317      	movs	r3, #23
   15fd4:	18fb      	adds	r3, r7, r3
   15fd6:	2202      	movs	r2, #2
   15fd8:	701a      	strb	r2, [r3, #0]
            break;
   15fda:	e056      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15fdc:	2317      	movs	r3, #23
   15fde:	18fb      	adds	r3, r7, r3
   15fe0:	1cfa      	adds	r2, r7, #3
   15fe2:	7812      	ldrb	r2, [r2, #0]
   15fe4:	701a      	strb	r2, [r3, #0]
            break;
   15fe6:	e050      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15fe8:	1cfb      	adds	r3, r7, #3
   15fea:	781b      	ldrb	r3, [r3, #0]
   15fec:	2b00      	cmp	r3, #0
   15fee:	d104      	bne.n	15ffa <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   15ff0:	2317      	movs	r3, #23
   15ff2:	18fb      	adds	r3, r7, r3
   15ff4:	2203      	movs	r2, #3
   15ff6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15ff8:	e047      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15ffa:	1cfb      	adds	r3, r7, #3
   15ffc:	781b      	ldrb	r3, [r3, #0]
   15ffe:	2b01      	cmp	r3, #1
   16000:	d104      	bne.n	1600c <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16002:	2317      	movs	r3, #23
   16004:	18fb      	adds	r3, r7, r3
   16006:	2203      	movs	r2, #3
   16008:	701a      	strb	r2, [r3, #0]
            break;
   1600a:	e03e      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1600c:	1cfb      	adds	r3, r7, #3
   1600e:	781b      	ldrb	r3, [r3, #0]
   16010:	2b02      	cmp	r3, #2
   16012:	d104      	bne.n	1601e <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16014:	2317      	movs	r3, #23
   16016:	18fb      	adds	r3, r7, r3
   16018:	2203      	movs	r2, #3
   1601a:	701a      	strb	r2, [r3, #0]
            break;
   1601c:	e035      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1601e:	2317      	movs	r3, #23
   16020:	18fb      	adds	r3, r7, r3
   16022:	1cfa      	adds	r2, r7, #3
   16024:	7812      	ldrb	r2, [r2, #0]
   16026:	701a      	strb	r2, [r3, #0]
            break;
   16028:	e02f      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1602a:	1cfb      	adds	r3, r7, #3
   1602c:	781b      	ldrb	r3, [r3, #0]
   1602e:	2b00      	cmp	r3, #0
   16030:	d104      	bne.n	1603c <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16032:	2317      	movs	r3, #23
   16034:	18fb      	adds	r3, r7, r3
   16036:	2204      	movs	r2, #4
   16038:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1603a:	e026      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1603c:	1cfb      	adds	r3, r7, #3
   1603e:	781b      	ldrb	r3, [r3, #0]
   16040:	2b01      	cmp	r3, #1
   16042:	d104      	bne.n	1604e <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16044:	2317      	movs	r3, #23
   16046:	18fb      	adds	r3, r7, r3
   16048:	2204      	movs	r2, #4
   1604a:	701a      	strb	r2, [r3, #0]
            break;
   1604c:	e01d      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1604e:	1cfb      	adds	r3, r7, #3
   16050:	781b      	ldrb	r3, [r3, #0]
   16052:	2b02      	cmp	r3, #2
   16054:	d104      	bne.n	16060 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16056:	2317      	movs	r3, #23
   16058:	18fb      	adds	r3, r7, r3
   1605a:	2204      	movs	r2, #4
   1605c:	701a      	strb	r2, [r3, #0]
            break;
   1605e:	e014      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   16060:	1cfb      	adds	r3, r7, #3
   16062:	781b      	ldrb	r3, [r3, #0]
   16064:	2b03      	cmp	r3, #3
   16066:	d104      	bne.n	16072 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16068:	2317      	movs	r3, #23
   1606a:	18fb      	adds	r3, r7, r3
   1606c:	2204      	movs	r2, #4
   1606e:	701a      	strb	r2, [r3, #0]
            break;
   16070:	e00b      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   16072:	2317      	movs	r3, #23
   16074:	18fb      	adds	r3, r7, r3
   16076:	1cfa      	adds	r2, r7, #3
   16078:	7812      	ldrb	r2, [r2, #0]
   1607a:	701a      	strb	r2, [r3, #0]
            break;
   1607c:	e005      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   1607e:	2317      	movs	r3, #23
   16080:	18fb      	adds	r3, r7, r3
   16082:	1cfa      	adds	r2, r7, #3
   16084:	7812      	ldrb	r2, [r2, #0]
   16086:	701a      	strb	r2, [r3, #0]
            break;
   16088:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1608a:	693b      	ldr	r3, [r7, #16]
   1608c:	2b00      	cmp	r3, #0
   1608e:	d108      	bne.n	160a2 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16090:	2308      	movs	r3, #8
   16092:	18fa      	adds	r2, r7, r3
   16094:	6878      	ldr	r0, [r7, #4]
   16096:	2301      	movs	r3, #1
   16098:	2110      	movs	r1, #16
   1609a:	4c14      	ldr	r4, [pc, #80]	; (160ec <lsm6dso_xl_data_rate_set+0x2bc>)
   1609c:	47a0      	blx	r4
   1609e:	0003      	movs	r3, r0
   160a0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   160a2:	693b      	ldr	r3, [r7, #16]
   160a4:	2b00      	cmp	r3, #0
   160a6:	d118      	bne.n	160da <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   160a8:	2317      	movs	r3, #23
   160aa:	18fb      	adds	r3, r7, r3
   160ac:	781b      	ldrb	r3, [r3, #0]
   160ae:	220f      	movs	r2, #15
   160b0:	4013      	ands	r3, r2
   160b2:	b2da      	uxtb	r2, r3
   160b4:	2308      	movs	r3, #8
   160b6:	18fb      	adds	r3, r7, r3
   160b8:	0110      	lsls	r0, r2, #4
   160ba:	781a      	ldrb	r2, [r3, #0]
   160bc:	210f      	movs	r1, #15
   160be:	400a      	ands	r2, r1
   160c0:	1c11      	adds	r1, r2, #0
   160c2:	1c02      	adds	r2, r0, #0
   160c4:	430a      	orrs	r2, r1
   160c6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   160c8:	2308      	movs	r3, #8
   160ca:	18fa      	adds	r2, r7, r3
   160cc:	6878      	ldr	r0, [r7, #4]
   160ce:	2301      	movs	r3, #1
   160d0:	2110      	movs	r1, #16
   160d2:	4c07      	ldr	r4, [pc, #28]	; (160f0 <lsm6dso_xl_data_rate_set+0x2c0>)
   160d4:	47a0      	blx	r4
   160d6:	0003      	movs	r3, r0
   160d8:	613b      	str	r3, [r7, #16]
  }

  return ret;
   160da:	693b      	ldr	r3, [r7, #16]
}
   160dc:	0018      	movs	r0, r3
   160de:	46bd      	mov	sp, r7
   160e0:	b007      	add	sp, #28
   160e2:	bd90      	pop	{r4, r7, pc}
   160e4:	0001690d 	.word	0x0001690d
   160e8:	00016961 	.word	0x00016961
   160ec:	00015d01 	.word	0x00015d01
   160f0:	00015d47 	.word	0x00015d47

000160f4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   160f4:	b590      	push	{r4, r7, lr}
   160f6:	b085      	sub	sp, #20
   160f8:	af00      	add	r7, sp, #0
   160fa:	6078      	str	r0, [r7, #4]
   160fc:	000a      	movs	r2, r1
   160fe:	1cfb      	adds	r3, r7, #3
   16100:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16102:	2308      	movs	r3, #8
   16104:	18fa      	adds	r2, r7, r3
   16106:	6878      	ldr	r0, [r7, #4]
   16108:	2301      	movs	r3, #1
   1610a:	2111      	movs	r1, #17
   1610c:	4c12      	ldr	r4, [pc, #72]	; (16158 <lsm6dso_gy_full_scale_set+0x64>)
   1610e:	47a0      	blx	r4
   16110:	0003      	movs	r3, r0
   16112:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16114:	68fb      	ldr	r3, [r7, #12]
   16116:	2b00      	cmp	r3, #0
   16118:	d119      	bne.n	1614e <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1611a:	1cfb      	adds	r3, r7, #3
   1611c:	781b      	ldrb	r3, [r3, #0]
   1611e:	2207      	movs	r2, #7
   16120:	4013      	ands	r3, r2
   16122:	b2da      	uxtb	r2, r3
   16124:	2308      	movs	r3, #8
   16126:	18fb      	adds	r3, r7, r3
   16128:	2107      	movs	r1, #7
   1612a:	400a      	ands	r2, r1
   1612c:	1890      	adds	r0, r2, r2
   1612e:	781a      	ldrb	r2, [r3, #0]
   16130:	210e      	movs	r1, #14
   16132:	438a      	bics	r2, r1
   16134:	1c11      	adds	r1, r2, #0
   16136:	1c02      	adds	r2, r0, #0
   16138:	430a      	orrs	r2, r1
   1613a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1613c:	2308      	movs	r3, #8
   1613e:	18fa      	adds	r2, r7, r3
   16140:	6878      	ldr	r0, [r7, #4]
   16142:	2301      	movs	r3, #1
   16144:	2111      	movs	r1, #17
   16146:	4c05      	ldr	r4, [pc, #20]	; (1615c <lsm6dso_gy_full_scale_set+0x68>)
   16148:	47a0      	blx	r4
   1614a:	0003      	movs	r3, r0
   1614c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1614e:	68fb      	ldr	r3, [r7, #12]
}
   16150:	0018      	movs	r0, r3
   16152:	46bd      	mov	sp, r7
   16154:	b005      	add	sp, #20
   16156:	bd90      	pop	{r4, r7, pc}
   16158:	00015d01 	.word	0x00015d01
   1615c:	00015d47 	.word	0x00015d47

00016160 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   16160:	b590      	push	{r4, r7, lr}
   16162:	b087      	sub	sp, #28
   16164:	af00      	add	r7, sp, #0
   16166:	6078      	str	r0, [r7, #4]
   16168:	000a      	movs	r2, r1
   1616a:	1cfb      	adds	r3, r7, #3
   1616c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   1616e:	2317      	movs	r3, #23
   16170:	18fb      	adds	r3, r7, r3
   16172:	1cfa      	adds	r2, r7, #3
   16174:	7812      	ldrb	r2, [r2, #0]
   16176:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   16178:	230c      	movs	r3, #12
   1617a:	18fa      	adds	r2, r7, r3
   1617c:	687b      	ldr	r3, [r7, #4]
   1617e:	0011      	movs	r1, r2
   16180:	0018      	movs	r0, r3
   16182:	4ba4      	ldr	r3, [pc, #656]	; (16414 <lsm6dso_gy_data_rate_set+0x2b4>)
   16184:	4798      	blx	r3
   16186:	0003      	movs	r3, r0
   16188:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1618a:	693b      	ldr	r3, [r7, #16]
   1618c:	2b00      	cmp	r3, #0
   1618e:	d000      	beq.n	16192 <lsm6dso_gy_data_rate_set+0x32>
   16190:	e113      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   16192:	230c      	movs	r3, #12
   16194:	18fb      	adds	r3, r7, r3
   16196:	781b      	ldrb	r3, [r3, #0]
   16198:	07db      	lsls	r3, r3, #31
   1619a:	0fdb      	lsrs	r3, r3, #31
   1619c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1619e:	230c      	movs	r3, #12
   161a0:	18fb      	adds	r3, r7, r3
   161a2:	781b      	ldrb	r3, [r3, #0]
   161a4:	079b      	lsls	r3, r3, #30
   161a6:	0fdb      	lsrs	r3, r3, #31
   161a8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   161aa:	4313      	orrs	r3, r2
   161ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   161ae:	230c      	movs	r3, #12
   161b0:	18fb      	adds	r3, r7, r3
   161b2:	781b      	ldrb	r3, [r3, #0]
   161b4:	075b      	lsls	r3, r3, #29
   161b6:	0fdb      	lsrs	r3, r3, #31
   161b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   161ba:	4313      	orrs	r3, r2
   161bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   161be:	230c      	movs	r3, #12
   161c0:	18fb      	adds	r3, r7, r3
   161c2:	781b      	ldrb	r3, [r3, #0]
   161c4:	071b      	lsls	r3, r3, #28
   161c6:	0fdb      	lsrs	r3, r3, #31
   161c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   161ca:	4313      	orrs	r3, r2
   161cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   161ce:	230c      	movs	r3, #12
   161d0:	18fb      	adds	r3, r7, r3
   161d2:	781b      	ldrb	r3, [r3, #0]
   161d4:	06db      	lsls	r3, r3, #27
   161d6:	0fdb      	lsrs	r3, r3, #31
   161d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   161da:	4313      	orrs	r3, r2
   161dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   161de:	230c      	movs	r3, #12
   161e0:	18fb      	adds	r3, r7, r3
   161e2:	781b      	ldrb	r3, [r3, #0]
   161e4:	069b      	lsls	r3, r3, #26
   161e6:	0fdb      	lsrs	r3, r3, #31
   161e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   161ea:	4313      	orrs	r3, r2
   161ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   161ee:	230c      	movs	r3, #12
   161f0:	18fb      	adds	r3, r7, r3
   161f2:	781b      	ldrb	r3, [r3, #0]
   161f4:	065b      	lsls	r3, r3, #25
   161f6:	0fdb      	lsrs	r3, r3, #31
   161f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   161fa:	4313      	orrs	r3, r2
   161fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   161fe:	230c      	movs	r3, #12
   16200:	18fb      	adds	r3, r7, r3
   16202:	781b      	ldrb	r3, [r3, #0]
   16204:	061b      	lsls	r3, r3, #24
   16206:	0fdb      	lsrs	r3, r3, #31
   16208:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1620a:	4313      	orrs	r3, r2
   1620c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1620e:	230c      	movs	r3, #12
   16210:	18fb      	adds	r3, r7, r3
   16212:	785b      	ldrb	r3, [r3, #1]
   16214:	07db      	lsls	r3, r3, #31
   16216:	0fdb      	lsrs	r3, r3, #31
   16218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1621a:	4313      	orrs	r3, r2
   1621c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1621e:	230c      	movs	r3, #12
   16220:	18fb      	adds	r3, r7, r3
   16222:	785b      	ldrb	r3, [r3, #1]
   16224:	079b      	lsls	r3, r3, #30
   16226:	0fdb      	lsrs	r3, r3, #31
   16228:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1622a:	4313      	orrs	r3, r2
   1622c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1622e:	230c      	movs	r3, #12
   16230:	18fb      	adds	r3, r7, r3
   16232:	785b      	ldrb	r3, [r3, #1]
   16234:	075b      	lsls	r3, r3, #29
   16236:	0fdb      	lsrs	r3, r3, #31
   16238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1623a:	4313      	orrs	r3, r2
   1623c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1623e:	230c      	movs	r3, #12
   16240:	18fb      	adds	r3, r7, r3
   16242:	785b      	ldrb	r3, [r3, #1]
   16244:	071b      	lsls	r3, r3, #28
   16246:	0fdb      	lsrs	r3, r3, #31
   16248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1624a:	4313      	orrs	r3, r2
   1624c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1624e:	230c      	movs	r3, #12
   16250:	18fb      	adds	r3, r7, r3
   16252:	785b      	ldrb	r3, [r3, #1]
   16254:	06db      	lsls	r3, r3, #27
   16256:	0fdb      	lsrs	r3, r3, #31
   16258:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1625a:	4313      	orrs	r3, r2
   1625c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1625e:	230c      	movs	r3, #12
   16260:	18fb      	adds	r3, r7, r3
   16262:	785b      	ldrb	r3, [r3, #1]
   16264:	069b      	lsls	r3, r3, #26
   16266:	0fdb      	lsrs	r3, r3, #31
   16268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1626a:	4313      	orrs	r3, r2
   1626c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1626e:	230c      	movs	r3, #12
   16270:	18fb      	adds	r3, r7, r3
   16272:	785b      	ldrb	r3, [r3, #1]
   16274:	065b      	lsls	r3, r3, #25
   16276:	0fdb      	lsrs	r3, r3, #31
   16278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1627a:	4313      	orrs	r3, r2
   1627c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1627e:	230c      	movs	r3, #12
   16280:	18fb      	adds	r3, r7, r3
   16282:	785b      	ldrb	r3, [r3, #1]
   16284:	061b      	lsls	r3, r3, #24
   16286:	0fdb      	lsrs	r3, r3, #31
   16288:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1628a:	4313      	orrs	r3, r2
   1628c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1628e:	2b01      	cmp	r3, #1
   16290:	d000      	beq.n	16294 <lsm6dso_gy_data_rate_set+0x134>
   16292:	e092      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   16294:	230b      	movs	r3, #11
   16296:	18fa      	adds	r2, r7, r3
   16298:	687b      	ldr	r3, [r7, #4]
   1629a:	0011      	movs	r1, r2
   1629c:	0018      	movs	r0, r3
   1629e:	4b5e      	ldr	r3, [pc, #376]	; (16418 <lsm6dso_gy_data_rate_set+0x2b8>)
   162a0:	4798      	blx	r3
   162a2:	0003      	movs	r3, r0
   162a4:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   162a6:	693b      	ldr	r3, [r7, #16]
   162a8:	2b00      	cmp	r3, #0
   162aa:	d000      	beq.n	162ae <lsm6dso_gy_data_rate_set+0x14e>
   162ac:	e085      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   162ae:	230b      	movs	r3, #11
   162b0:	18fb      	adds	r3, r7, r3
   162b2:	781b      	ldrb	r3, [r3, #0]
   162b4:	2b01      	cmp	r3, #1
   162b6:	d017      	beq.n	162e8 <lsm6dso_gy_data_rate_set+0x188>
   162b8:	dc02      	bgt.n	162c0 <lsm6dso_gy_data_rate_set+0x160>
   162ba:	2b00      	cmp	r3, #0
   162bc:	d005      	beq.n	162ca <lsm6dso_gy_data_rate_set+0x16a>
   162be:	e076      	b.n	163ae <lsm6dso_gy_data_rate_set+0x24e>
   162c0:	2b02      	cmp	r3, #2
   162c2:	d029      	beq.n	16318 <lsm6dso_gy_data_rate_set+0x1b8>
   162c4:	2b03      	cmp	r3, #3
   162c6:	d048      	beq.n	1635a <lsm6dso_gy_data_rate_set+0x1fa>
   162c8:	e071      	b.n	163ae <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   162ca:	1cfb      	adds	r3, r7, #3
   162cc:	781b      	ldrb	r3, [r3, #0]
   162ce:	2b00      	cmp	r3, #0
   162d0:	d104      	bne.n	162dc <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   162d2:	2317      	movs	r3, #23
   162d4:	18fb      	adds	r3, r7, r3
   162d6:	2201      	movs	r2, #1
   162d8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   162da:	e06e      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   162dc:	2317      	movs	r3, #23
   162de:	18fb      	adds	r3, r7, r3
   162e0:	1cfa      	adds	r2, r7, #3
   162e2:	7812      	ldrb	r2, [r2, #0]
   162e4:	701a      	strb	r2, [r3, #0]
            break;
   162e6:	e068      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   162e8:	1cfb      	adds	r3, r7, #3
   162ea:	781b      	ldrb	r3, [r3, #0]
   162ec:	2b00      	cmp	r3, #0
   162ee:	d104      	bne.n	162fa <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   162f0:	2317      	movs	r3, #23
   162f2:	18fb      	adds	r3, r7, r3
   162f4:	2202      	movs	r2, #2
   162f6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   162f8:	e05f      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   162fa:	1cfb      	adds	r3, r7, #3
   162fc:	781b      	ldrb	r3, [r3, #0]
   162fe:	2b01      	cmp	r3, #1
   16300:	d104      	bne.n	1630c <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   16302:	2317      	movs	r3, #23
   16304:	18fb      	adds	r3, r7, r3
   16306:	2202      	movs	r2, #2
   16308:	701a      	strb	r2, [r3, #0]
            break;
   1630a:	e056      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1630c:	2317      	movs	r3, #23
   1630e:	18fb      	adds	r3, r7, r3
   16310:	1cfa      	adds	r2, r7, #3
   16312:	7812      	ldrb	r2, [r2, #0]
   16314:	701a      	strb	r2, [r3, #0]
            break;
   16316:	e050      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   16318:	1cfb      	adds	r3, r7, #3
   1631a:	781b      	ldrb	r3, [r3, #0]
   1631c:	2b00      	cmp	r3, #0
   1631e:	d104      	bne.n	1632a <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16320:	2317      	movs	r3, #23
   16322:	18fb      	adds	r3, r7, r3
   16324:	2203      	movs	r2, #3
   16326:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   16328:	e047      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1632a:	1cfb      	adds	r3, r7, #3
   1632c:	781b      	ldrb	r3, [r3, #0]
   1632e:	2b01      	cmp	r3, #1
   16330:	d104      	bne.n	1633c <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16332:	2317      	movs	r3, #23
   16334:	18fb      	adds	r3, r7, r3
   16336:	2203      	movs	r2, #3
   16338:	701a      	strb	r2, [r3, #0]
            break;
   1633a:	e03e      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1633c:	1cfb      	adds	r3, r7, #3
   1633e:	781b      	ldrb	r3, [r3, #0]
   16340:	2b02      	cmp	r3, #2
   16342:	d104      	bne.n	1634e <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16344:	2317      	movs	r3, #23
   16346:	18fb      	adds	r3, r7, r3
   16348:	2203      	movs	r2, #3
   1634a:	701a      	strb	r2, [r3, #0]
            break;
   1634c:	e035      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1634e:	2317      	movs	r3, #23
   16350:	18fb      	adds	r3, r7, r3
   16352:	1cfa      	adds	r2, r7, #3
   16354:	7812      	ldrb	r2, [r2, #0]
   16356:	701a      	strb	r2, [r3, #0]
            break;
   16358:	e02f      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1635a:	1cfb      	adds	r3, r7, #3
   1635c:	781b      	ldrb	r3, [r3, #0]
   1635e:	2b00      	cmp	r3, #0
   16360:	d104      	bne.n	1636c <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16362:	2317      	movs	r3, #23
   16364:	18fb      	adds	r3, r7, r3
   16366:	2204      	movs	r2, #4
   16368:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1636a:	e026      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1636c:	1cfb      	adds	r3, r7, #3
   1636e:	781b      	ldrb	r3, [r3, #0]
   16370:	2b01      	cmp	r3, #1
   16372:	d104      	bne.n	1637e <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16374:	2317      	movs	r3, #23
   16376:	18fb      	adds	r3, r7, r3
   16378:	2204      	movs	r2, #4
   1637a:	701a      	strb	r2, [r3, #0]
            break;
   1637c:	e01d      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1637e:	1cfb      	adds	r3, r7, #3
   16380:	781b      	ldrb	r3, [r3, #0]
   16382:	2b02      	cmp	r3, #2
   16384:	d104      	bne.n	16390 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16386:	2317      	movs	r3, #23
   16388:	18fb      	adds	r3, r7, r3
   1638a:	2204      	movs	r2, #4
   1638c:	701a      	strb	r2, [r3, #0]
            break;
   1638e:	e014      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   16390:	1cfb      	adds	r3, r7, #3
   16392:	781b      	ldrb	r3, [r3, #0]
   16394:	2b03      	cmp	r3, #3
   16396:	d104      	bne.n	163a2 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16398:	2317      	movs	r3, #23
   1639a:	18fb      	adds	r3, r7, r3
   1639c:	2204      	movs	r2, #4
   1639e:	701a      	strb	r2, [r3, #0]
            break;
   163a0:	e00b      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   163a2:	2317      	movs	r3, #23
   163a4:	18fb      	adds	r3, r7, r3
   163a6:	1cfa      	adds	r2, r7, #3
   163a8:	7812      	ldrb	r2, [r2, #0]
   163aa:	701a      	strb	r2, [r3, #0]
            break;
   163ac:	e005      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   163ae:	2317      	movs	r3, #23
   163b0:	18fb      	adds	r3, r7, r3
   163b2:	1cfa      	adds	r2, r7, #3
   163b4:	7812      	ldrb	r2, [r2, #0]
   163b6:	701a      	strb	r2, [r3, #0]
            break;
   163b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   163ba:	693b      	ldr	r3, [r7, #16]
   163bc:	2b00      	cmp	r3, #0
   163be:	d108      	bne.n	163d2 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   163c0:	2308      	movs	r3, #8
   163c2:	18fa      	adds	r2, r7, r3
   163c4:	6878      	ldr	r0, [r7, #4]
   163c6:	2301      	movs	r3, #1
   163c8:	2111      	movs	r1, #17
   163ca:	4c14      	ldr	r4, [pc, #80]	; (1641c <lsm6dso_gy_data_rate_set+0x2bc>)
   163cc:	47a0      	blx	r4
   163ce:	0003      	movs	r3, r0
   163d0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   163d2:	693b      	ldr	r3, [r7, #16]
   163d4:	2b00      	cmp	r3, #0
   163d6:	d118      	bne.n	1640a <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   163d8:	2317      	movs	r3, #23
   163da:	18fb      	adds	r3, r7, r3
   163dc:	781b      	ldrb	r3, [r3, #0]
   163de:	220f      	movs	r2, #15
   163e0:	4013      	ands	r3, r2
   163e2:	b2da      	uxtb	r2, r3
   163e4:	2308      	movs	r3, #8
   163e6:	18fb      	adds	r3, r7, r3
   163e8:	0110      	lsls	r0, r2, #4
   163ea:	781a      	ldrb	r2, [r3, #0]
   163ec:	210f      	movs	r1, #15
   163ee:	400a      	ands	r2, r1
   163f0:	1c11      	adds	r1, r2, #0
   163f2:	1c02      	adds	r2, r0, #0
   163f4:	430a      	orrs	r2, r1
   163f6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   163f8:	2308      	movs	r3, #8
   163fa:	18fa      	adds	r2, r7, r3
   163fc:	6878      	ldr	r0, [r7, #4]
   163fe:	2301      	movs	r3, #1
   16400:	2111      	movs	r1, #17
   16402:	4c07      	ldr	r4, [pc, #28]	; (16420 <lsm6dso_gy_data_rate_set+0x2c0>)
   16404:	47a0      	blx	r4
   16406:	0003      	movs	r3, r0
   16408:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1640a:	693b      	ldr	r3, [r7, #16]
}
   1640c:	0018      	movs	r0, r3
   1640e:	46bd      	mov	sp, r7
   16410:	b007      	add	sp, #28
   16412:	bd90      	pop	{r4, r7, pc}
   16414:	0001690d 	.word	0x0001690d
   16418:	00016961 	.word	0x00016961
   1641c:	00015d01 	.word	0x00015d01
   16420:	00015d47 	.word	0x00015d47

00016424 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16424:	b590      	push	{r4, r7, lr}
   16426:	b085      	sub	sp, #20
   16428:	af00      	add	r7, sp, #0
   1642a:	6078      	str	r0, [r7, #4]
   1642c:	000a      	movs	r2, r1
   1642e:	1cfb      	adds	r3, r7, #3
   16430:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16432:	2308      	movs	r3, #8
   16434:	18fa      	adds	r2, r7, r3
   16436:	6878      	ldr	r0, [r7, #4]
   16438:	2301      	movs	r3, #1
   1643a:	2112      	movs	r1, #18
   1643c:	4c12      	ldr	r4, [pc, #72]	; (16488 <lsm6dso_block_data_update_set+0x64>)
   1643e:	47a0      	blx	r4
   16440:	0003      	movs	r3, r0
   16442:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16444:	68fb      	ldr	r3, [r7, #12]
   16446:	2b00      	cmp	r3, #0
   16448:	d119      	bne.n	1647e <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   1644a:	1cfb      	adds	r3, r7, #3
   1644c:	781b      	ldrb	r3, [r3, #0]
   1644e:	2201      	movs	r2, #1
   16450:	4013      	ands	r3, r2
   16452:	b2da      	uxtb	r2, r3
   16454:	2308      	movs	r3, #8
   16456:	18fb      	adds	r3, r7, r3
   16458:	2101      	movs	r1, #1
   1645a:	400a      	ands	r2, r1
   1645c:	0190      	lsls	r0, r2, #6
   1645e:	781a      	ldrb	r2, [r3, #0]
   16460:	2140      	movs	r1, #64	; 0x40
   16462:	438a      	bics	r2, r1
   16464:	1c11      	adds	r1, r2, #0
   16466:	1c02      	adds	r2, r0, #0
   16468:	430a      	orrs	r2, r1
   1646a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1646c:	2308      	movs	r3, #8
   1646e:	18fa      	adds	r2, r7, r3
   16470:	6878      	ldr	r0, [r7, #4]
   16472:	2301      	movs	r3, #1
   16474:	2112      	movs	r1, #18
   16476:	4c05      	ldr	r4, [pc, #20]	; (1648c <lsm6dso_block_data_update_set+0x68>)
   16478:	47a0      	blx	r4
   1647a:	0003      	movs	r3, r0
   1647c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1647e:	68fb      	ldr	r3, [r7, #12]
}
   16480:	0018      	movs	r0, r3
   16482:	46bd      	mov	sp, r7
   16484:	b005      	add	sp, #20
   16486:	bd90      	pop	{r4, r7, pc}
   16488:	00015d01 	.word	0x00015d01
   1648c:	00015d47 	.word	0x00015d47

00016490 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   16490:	b590      	push	{r4, r7, lr}
   16492:	b085      	sub	sp, #20
   16494:	af00      	add	r7, sp, #0
   16496:	6078      	str	r0, [r7, #4]
   16498:	000a      	movs	r2, r1
   1649a:	1cfb      	adds	r3, r7, #3
   1649c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1649e:	2308      	movs	r3, #8
   164a0:	18fa      	adds	r2, r7, r3
   164a2:	6878      	ldr	r0, [r7, #4]
   164a4:	2301      	movs	r3, #1
   164a6:	2115      	movs	r1, #21
   164a8:	4c12      	ldr	r4, [pc, #72]	; (164f4 <lsm6dso_xl_offset_weight_set+0x64>)
   164aa:	47a0      	blx	r4
   164ac:	0003      	movs	r3, r0
   164ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   164b0:	68fb      	ldr	r3, [r7, #12]
   164b2:	2b00      	cmp	r3, #0
   164b4:	d119      	bne.n	164ea <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   164b6:	1cfb      	adds	r3, r7, #3
   164b8:	781b      	ldrb	r3, [r3, #0]
   164ba:	2201      	movs	r2, #1
   164bc:	4013      	ands	r3, r2
   164be:	b2da      	uxtb	r2, r3
   164c0:	2308      	movs	r3, #8
   164c2:	18fb      	adds	r3, r7, r3
   164c4:	2101      	movs	r1, #1
   164c6:	400a      	ands	r2, r1
   164c8:	00d0      	lsls	r0, r2, #3
   164ca:	781a      	ldrb	r2, [r3, #0]
   164cc:	2108      	movs	r1, #8
   164ce:	438a      	bics	r2, r1
   164d0:	1c11      	adds	r1, r2, #0
   164d2:	1c02      	adds	r2, r0, #0
   164d4:	430a      	orrs	r2, r1
   164d6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   164d8:	2308      	movs	r3, #8
   164da:	18fa      	adds	r2, r7, r3
   164dc:	6878      	ldr	r0, [r7, #4]
   164de:	2301      	movs	r3, #1
   164e0:	2115      	movs	r1, #21
   164e2:	4c05      	ldr	r4, [pc, #20]	; (164f8 <lsm6dso_xl_offset_weight_set+0x68>)
   164e4:	47a0      	blx	r4
   164e6:	0003      	movs	r3, r0
   164e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   164ea:	68fb      	ldr	r3, [r7, #12]
}
   164ec:	0018      	movs	r0, r3
   164ee:	46bd      	mov	sp, r7
   164f0:	b005      	add	sp, #20
   164f2:	bd90      	pop	{r4, r7, pc}
   164f4:	00015d01 	.word	0x00015d01
   164f8:	00015d47 	.word	0x00015d47

000164fc <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   164fc:	b590      	push	{r4, r7, lr}
   164fe:	b085      	sub	sp, #20
   16500:	af00      	add	r7, sp, #0
   16502:	6078      	str	r0, [r7, #4]
   16504:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   16506:	2308      	movs	r3, #8
   16508:	18fa      	adds	r2, r7, r3
   1650a:	6878      	ldr	r0, [r7, #4]
   1650c:	2301      	movs	r3, #1
   1650e:	211e      	movs	r1, #30
   16510:	4c08      	ldr	r4, [pc, #32]	; (16534 <lsm6dso_xl_flag_data_ready_get+0x38>)
   16512:	47a0      	blx	r4
   16514:	0003      	movs	r3, r0
   16516:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   16518:	2308      	movs	r3, #8
   1651a:	18fb      	adds	r3, r7, r3
   1651c:	781b      	ldrb	r3, [r3, #0]
   1651e:	07db      	lsls	r3, r3, #31
   16520:	0fdb      	lsrs	r3, r3, #31
   16522:	b2db      	uxtb	r3, r3
   16524:	001a      	movs	r2, r3
   16526:	683b      	ldr	r3, [r7, #0]
   16528:	701a      	strb	r2, [r3, #0]

  return ret;
   1652a:	68fb      	ldr	r3, [r7, #12]
}
   1652c:	0018      	movs	r0, r3
   1652e:	46bd      	mov	sp, r7
   16530:	b005      	add	sp, #20
   16532:	bd90      	pop	{r4, r7, pc}
   16534:	00015d01 	.word	0x00015d01

00016538 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   16538:	b590      	push	{r4, r7, lr}
   1653a:	b087      	sub	sp, #28
   1653c:	af00      	add	r7, sp, #0
   1653e:	6078      	str	r0, [r7, #4]
   16540:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   16542:	230c      	movs	r3, #12
   16544:	18fa      	adds	r2, r7, r3
   16546:	6878      	ldr	r0, [r7, #4]
   16548:	2306      	movs	r3, #6
   1654a:	2128      	movs	r1, #40	; 0x28
   1654c:	4c26      	ldr	r4, [pc, #152]	; (165e8 <lsm6dso_acceleration_raw_get+0xb0>)
   1654e:	47a0      	blx	r4
   16550:	0003      	movs	r3, r0
   16552:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   16554:	230c      	movs	r3, #12
   16556:	18fb      	adds	r3, r7, r3
   16558:	785b      	ldrb	r3, [r3, #1]
   1655a:	b21a      	sxth	r2, r3
   1655c:	683b      	ldr	r3, [r7, #0]
   1655e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   16560:	683b      	ldr	r3, [r7, #0]
   16562:	2200      	movs	r2, #0
   16564:	5e9b      	ldrsh	r3, [r3, r2]
   16566:	b29b      	uxth	r3, r3
   16568:	021b      	lsls	r3, r3, #8
   1656a:	b29a      	uxth	r2, r3
   1656c:	230c      	movs	r3, #12
   1656e:	18fb      	adds	r3, r7, r3
   16570:	781b      	ldrb	r3, [r3, #0]
   16572:	b29b      	uxth	r3, r3
   16574:	18d3      	adds	r3, r2, r3
   16576:	b29b      	uxth	r3, r3
   16578:	b21a      	sxth	r2, r3
   1657a:	683b      	ldr	r3, [r7, #0]
   1657c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   1657e:	683b      	ldr	r3, [r7, #0]
   16580:	3302      	adds	r3, #2
   16582:	220c      	movs	r2, #12
   16584:	18ba      	adds	r2, r7, r2
   16586:	78d2      	ldrb	r2, [r2, #3]
   16588:	b212      	sxth	r2, r2
   1658a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   1658c:	683b      	ldr	r3, [r7, #0]
   1658e:	3302      	adds	r3, #2
   16590:	683a      	ldr	r2, [r7, #0]
   16592:	3202      	adds	r2, #2
   16594:	2100      	movs	r1, #0
   16596:	5e52      	ldrsh	r2, [r2, r1]
   16598:	b292      	uxth	r2, r2
   1659a:	0212      	lsls	r2, r2, #8
   1659c:	b291      	uxth	r1, r2
   1659e:	220c      	movs	r2, #12
   165a0:	18ba      	adds	r2, r7, r2
   165a2:	7892      	ldrb	r2, [r2, #2]
   165a4:	b292      	uxth	r2, r2
   165a6:	188a      	adds	r2, r1, r2
   165a8:	b292      	uxth	r2, r2
   165aa:	b212      	sxth	r2, r2
   165ac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   165ae:	683b      	ldr	r3, [r7, #0]
   165b0:	3304      	adds	r3, #4
   165b2:	220c      	movs	r2, #12
   165b4:	18ba      	adds	r2, r7, r2
   165b6:	7952      	ldrb	r2, [r2, #5]
   165b8:	b212      	sxth	r2, r2
   165ba:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   165bc:	683b      	ldr	r3, [r7, #0]
   165be:	3304      	adds	r3, #4
   165c0:	683a      	ldr	r2, [r7, #0]
   165c2:	3204      	adds	r2, #4
   165c4:	2100      	movs	r1, #0
   165c6:	5e52      	ldrsh	r2, [r2, r1]
   165c8:	b292      	uxth	r2, r2
   165ca:	0212      	lsls	r2, r2, #8
   165cc:	b291      	uxth	r1, r2
   165ce:	220c      	movs	r2, #12
   165d0:	18ba      	adds	r2, r7, r2
   165d2:	7912      	ldrb	r2, [r2, #4]
   165d4:	b292      	uxth	r2, r2
   165d6:	188a      	adds	r2, r1, r2
   165d8:	b292      	uxth	r2, r2
   165da:	b212      	sxth	r2, r2
   165dc:	801a      	strh	r2, [r3, #0]

  return ret;
   165de:	697b      	ldr	r3, [r7, #20]
}
   165e0:	0018      	movs	r0, r3
   165e2:	46bd      	mov	sp, r7
   165e4:	b007      	add	sp, #28
   165e6:	bd90      	pop	{r4, r7, pc}
   165e8:	00015d01 	.word	0x00015d01

000165ec <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   165ec:	b590      	push	{r4, r7, lr}
   165ee:	b085      	sub	sp, #20
   165f0:	af00      	add	r7, sp, #0
   165f2:	6078      	str	r0, [r7, #4]
   165f4:	000a      	movs	r2, r1
   165f6:	1cfb      	adds	r3, r7, #3
   165f8:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   165fa:	2308      	movs	r3, #8
   165fc:	18fa      	adds	r2, r7, r3
   165fe:	6878      	ldr	r0, [r7, #4]
   16600:	2301      	movs	r3, #1
   16602:	2101      	movs	r1, #1
   16604:	4c11      	ldr	r4, [pc, #68]	; (1664c <lsm6dso_mem_bank_set+0x60>)
   16606:	47a0      	blx	r4
   16608:	0003      	movs	r3, r0
   1660a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1660c:	68fb      	ldr	r3, [r7, #12]
   1660e:	2b00      	cmp	r3, #0
   16610:	d117      	bne.n	16642 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   16612:	1cfb      	adds	r3, r7, #3
   16614:	781b      	ldrb	r3, [r3, #0]
   16616:	2203      	movs	r2, #3
   16618:	4013      	ands	r3, r2
   1661a:	b2da      	uxtb	r2, r3
   1661c:	2308      	movs	r3, #8
   1661e:	18fb      	adds	r3, r7, r3
   16620:	0190      	lsls	r0, r2, #6
   16622:	781a      	ldrb	r2, [r3, #0]
   16624:	213f      	movs	r1, #63	; 0x3f
   16626:	400a      	ands	r2, r1
   16628:	1c11      	adds	r1, r2, #0
   1662a:	1c02      	adds	r2, r0, #0
   1662c:	430a      	orrs	r2, r1
   1662e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   16630:	2308      	movs	r3, #8
   16632:	18fa      	adds	r2, r7, r3
   16634:	6878      	ldr	r0, [r7, #4]
   16636:	2301      	movs	r3, #1
   16638:	2101      	movs	r1, #1
   1663a:	4c05      	ldr	r4, [pc, #20]	; (16650 <lsm6dso_mem_bank_set+0x64>)
   1663c:	47a0      	blx	r4
   1663e:	0003      	movs	r3, r0
   16640:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16642:	68fb      	ldr	r3, [r7, #12]
}
   16644:	0018      	movs	r0, r3
   16646:	46bd      	mov	sp, r7
   16648:	b005      	add	sp, #20
   1664a:	bd90      	pop	{r4, r7, pc}
   1664c:	00015d01 	.word	0x00015d01
   16650:	00015d47 	.word	0x00015d47

00016654 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   16654:	b590      	push	{r4, r7, lr}
   16656:	b085      	sub	sp, #20
   16658:	af00      	add	r7, sp, #0
   1665a:	6078      	str	r0, [r7, #4]
   1665c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   1665e:	683a      	ldr	r2, [r7, #0]
   16660:	6878      	ldr	r0, [r7, #4]
   16662:	2301      	movs	r3, #1
   16664:	210f      	movs	r1, #15
   16666:	4c04      	ldr	r4, [pc, #16]	; (16678 <lsm6dso_device_id_get+0x24>)
   16668:	47a0      	blx	r4
   1666a:	0003      	movs	r3, r0
   1666c:	60fb      	str	r3, [r7, #12]

  return ret;
   1666e:	68fb      	ldr	r3, [r7, #12]
}
   16670:	0018      	movs	r0, r3
   16672:	46bd      	mov	sp, r7
   16674:	b005      	add	sp, #20
   16676:	bd90      	pop	{r4, r7, pc}
   16678:	00015d01 	.word	0x00015d01

0001667c <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1667c:	b590      	push	{r4, r7, lr}
   1667e:	b085      	sub	sp, #20
   16680:	af00      	add	r7, sp, #0
   16682:	6078      	str	r0, [r7, #4]
   16684:	000a      	movs	r2, r1
   16686:	1cfb      	adds	r3, r7, #3
   16688:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1668a:	2308      	movs	r3, #8
   1668c:	18fa      	adds	r2, r7, r3
   1668e:	6878      	ldr	r0, [r7, #4]
   16690:	2301      	movs	r3, #1
   16692:	2112      	movs	r1, #18
   16694:	4c12      	ldr	r4, [pc, #72]	; (166e0 <lsm6dso_reset_set+0x64>)
   16696:	47a0      	blx	r4
   16698:	0003      	movs	r3, r0
   1669a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1669c:	68fb      	ldr	r3, [r7, #12]
   1669e:	2b00      	cmp	r3, #0
   166a0:	d119      	bne.n	166d6 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   166a2:	1cfb      	adds	r3, r7, #3
   166a4:	781b      	ldrb	r3, [r3, #0]
   166a6:	2201      	movs	r2, #1
   166a8:	4013      	ands	r3, r2
   166aa:	b2da      	uxtb	r2, r3
   166ac:	2308      	movs	r3, #8
   166ae:	18fb      	adds	r3, r7, r3
   166b0:	2101      	movs	r1, #1
   166b2:	400a      	ands	r2, r1
   166b4:	0010      	movs	r0, r2
   166b6:	781a      	ldrb	r2, [r3, #0]
   166b8:	2101      	movs	r1, #1
   166ba:	438a      	bics	r2, r1
   166bc:	1c11      	adds	r1, r2, #0
   166be:	1c02      	adds	r2, r0, #0
   166c0:	430a      	orrs	r2, r1
   166c2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   166c4:	2308      	movs	r3, #8
   166c6:	18fa      	adds	r2, r7, r3
   166c8:	6878      	ldr	r0, [r7, #4]
   166ca:	2301      	movs	r3, #1
   166cc:	2112      	movs	r1, #18
   166ce:	4c05      	ldr	r4, [pc, #20]	; (166e4 <lsm6dso_reset_set+0x68>)
   166d0:	47a0      	blx	r4
   166d2:	0003      	movs	r3, r0
   166d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   166d6:	68fb      	ldr	r3, [r7, #12]
}
   166d8:	0018      	movs	r0, r3
   166da:	46bd      	mov	sp, r7
   166dc:	b005      	add	sp, #20
   166de:	bd90      	pop	{r4, r7, pc}
   166e0:	00015d01 	.word	0x00015d01
   166e4:	00015d47 	.word	0x00015d47

000166e8 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   166e8:	b590      	push	{r4, r7, lr}
   166ea:	b085      	sub	sp, #20
   166ec:	af00      	add	r7, sp, #0
   166ee:	6078      	str	r0, [r7, #4]
   166f0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   166f2:	2308      	movs	r3, #8
   166f4:	18fa      	adds	r2, r7, r3
   166f6:	6878      	ldr	r0, [r7, #4]
   166f8:	2301      	movs	r3, #1
   166fa:	2112      	movs	r1, #18
   166fc:	4c08      	ldr	r4, [pc, #32]	; (16720 <lsm6dso_reset_get+0x38>)
   166fe:	47a0      	blx	r4
   16700:	0003      	movs	r3, r0
   16702:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   16704:	2308      	movs	r3, #8
   16706:	18fb      	adds	r3, r7, r3
   16708:	781b      	ldrb	r3, [r3, #0]
   1670a:	07db      	lsls	r3, r3, #31
   1670c:	0fdb      	lsrs	r3, r3, #31
   1670e:	b2db      	uxtb	r3, r3
   16710:	001a      	movs	r2, r3
   16712:	683b      	ldr	r3, [r7, #0]
   16714:	701a      	strb	r2, [r3, #0]

  return ret;
   16716:	68fb      	ldr	r3, [r7, #12]
}
   16718:	0018      	movs	r0, r3
   1671a:	46bd      	mov	sp, r7
   1671c:	b005      	add	sp, #20
   1671e:	bd90      	pop	{r4, r7, pc}
   16720:	00015d01 	.word	0x00015d01

00016724 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16724:	b590      	push	{r4, r7, lr}
   16726:	b085      	sub	sp, #20
   16728:	af00      	add	r7, sp, #0
   1672a:	6078      	str	r0, [r7, #4]
   1672c:	000a      	movs	r2, r1
   1672e:	1cfb      	adds	r3, r7, #3
   16730:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16732:	2308      	movs	r3, #8
   16734:	18fa      	adds	r2, r7, r3
   16736:	6878      	ldr	r0, [r7, #4]
   16738:	2301      	movs	r3, #1
   1673a:	2110      	movs	r1, #16
   1673c:	4c12      	ldr	r4, [pc, #72]	; (16788 <lsm6dso_xl_filter_lp2_set+0x64>)
   1673e:	47a0      	blx	r4
   16740:	0003      	movs	r3, r0
   16742:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16744:	68fb      	ldr	r3, [r7, #12]
   16746:	2b00      	cmp	r3, #0
   16748:	d119      	bne.n	1677e <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   1674a:	1cfb      	adds	r3, r7, #3
   1674c:	781b      	ldrb	r3, [r3, #0]
   1674e:	2201      	movs	r2, #1
   16750:	4013      	ands	r3, r2
   16752:	b2da      	uxtb	r2, r3
   16754:	2308      	movs	r3, #8
   16756:	18fb      	adds	r3, r7, r3
   16758:	2101      	movs	r1, #1
   1675a:	400a      	ands	r2, r1
   1675c:	1890      	adds	r0, r2, r2
   1675e:	781a      	ldrb	r2, [r3, #0]
   16760:	2102      	movs	r1, #2
   16762:	438a      	bics	r2, r1
   16764:	1c11      	adds	r1, r2, #0
   16766:	1c02      	adds	r2, r0, #0
   16768:	430a      	orrs	r2, r1
   1676a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1676c:	2308      	movs	r3, #8
   1676e:	18fa      	adds	r2, r7, r3
   16770:	6878      	ldr	r0, [r7, #4]
   16772:	2301      	movs	r3, #1
   16774:	2110      	movs	r1, #16
   16776:	4c05      	ldr	r4, [pc, #20]	; (1678c <lsm6dso_xl_filter_lp2_set+0x68>)
   16778:	47a0      	blx	r4
   1677a:	0003      	movs	r3, r0
   1677c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1677e:	68fb      	ldr	r3, [r7, #12]
}
   16780:	0018      	movs	r0, r3
   16782:	46bd      	mov	sp, r7
   16784:	b005      	add	sp, #20
   16786:	bd90      	pop	{r4, r7, pc}
   16788:	00015d01 	.word	0x00015d01
   1678c:	00015d47 	.word	0x00015d47

00016790 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   16790:	b590      	push	{r4, r7, lr}
   16792:	b085      	sub	sp, #20
   16794:	af00      	add	r7, sp, #0
   16796:	6078      	str	r0, [r7, #4]
   16798:	000a      	movs	r2, r1
   1679a:	1cfb      	adds	r3, r7, #3
   1679c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   1679e:	2308      	movs	r3, #8
   167a0:	18fa      	adds	r2, r7, r3
   167a2:	6878      	ldr	r0, [r7, #4]
   167a4:	2301      	movs	r3, #1
   167a6:	2117      	movs	r1, #23
   167a8:	4c25      	ldr	r4, [pc, #148]	; (16840 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   167aa:	47a0      	blx	r4
   167ac:	0003      	movs	r3, r0
   167ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   167b0:	68fb      	ldr	r3, [r7, #12]
   167b2:	2b00      	cmp	r3, #0
   167b4:	d13f      	bne.n	16836 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   167b6:	1cfb      	adds	r3, r7, #3
   167b8:	781b      	ldrb	r3, [r3, #0]
   167ba:	091b      	lsrs	r3, r3, #4
   167bc:	b2db      	uxtb	r3, r3
   167be:	1c1a      	adds	r2, r3, #0
   167c0:	2301      	movs	r3, #1
   167c2:	4013      	ands	r3, r2
   167c4:	b2da      	uxtb	r2, r3
   167c6:	2308      	movs	r3, #8
   167c8:	18fb      	adds	r3, r7, r3
   167ca:	2101      	movs	r1, #1
   167cc:	400a      	ands	r2, r1
   167ce:	0090      	lsls	r0, r2, #2
   167d0:	781a      	ldrb	r2, [r3, #0]
   167d2:	2104      	movs	r1, #4
   167d4:	438a      	bics	r2, r1
   167d6:	1c11      	adds	r1, r2, #0
   167d8:	1c02      	adds	r2, r0, #0
   167da:	430a      	orrs	r2, r1
   167dc:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   167de:	1cfb      	adds	r3, r7, #3
   167e0:	781b      	ldrb	r3, [r3, #0]
   167e2:	095b      	lsrs	r3, r3, #5
   167e4:	b2db      	uxtb	r3, r3
   167e6:	1c1a      	adds	r2, r3, #0
   167e8:	2301      	movs	r3, #1
   167ea:	4013      	ands	r3, r2
   167ec:	b2da      	uxtb	r2, r3
   167ee:	2308      	movs	r3, #8
   167f0:	18fb      	adds	r3, r7, r3
   167f2:	2101      	movs	r1, #1
   167f4:	400a      	ands	r2, r1
   167f6:	0110      	lsls	r0, r2, #4
   167f8:	781a      	ldrb	r2, [r3, #0]
   167fa:	2110      	movs	r1, #16
   167fc:	438a      	bics	r2, r1
   167fe:	1c11      	adds	r1, r2, #0
   16800:	1c02      	adds	r2, r0, #0
   16802:	430a      	orrs	r2, r1
   16804:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   16806:	1cfb      	adds	r3, r7, #3
   16808:	781b      	ldrb	r3, [r3, #0]
   1680a:	2207      	movs	r2, #7
   1680c:	4013      	ands	r3, r2
   1680e:	b2da      	uxtb	r2, r3
   16810:	2308      	movs	r3, #8
   16812:	18fb      	adds	r3, r7, r3
   16814:	0150      	lsls	r0, r2, #5
   16816:	781a      	ldrb	r2, [r3, #0]
   16818:	211f      	movs	r1, #31
   1681a:	400a      	ands	r2, r1
   1681c:	1c11      	adds	r1, r2, #0
   1681e:	1c02      	adds	r2, r0, #0
   16820:	430a      	orrs	r2, r1
   16822:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16824:	2308      	movs	r3, #8
   16826:	18fa      	adds	r2, r7, r3
   16828:	6878      	ldr	r0, [r7, #4]
   1682a:	2301      	movs	r3, #1
   1682c:	2117      	movs	r1, #23
   1682e:	4c05      	ldr	r4, [pc, #20]	; (16844 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   16830:	47a0      	blx	r4
   16832:	0003      	movs	r3, r0
   16834:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16836:	68fb      	ldr	r3, [r7, #12]
}
   16838:	0018      	movs	r0, r3
   1683a:	46bd      	mov	sp, r7
   1683c:	b005      	add	sp, #20
   1683e:	bd90      	pop	{r4, r7, pc}
   16840:	00015d01 	.word	0x00015d01
   16844:	00015d47 	.word	0x00015d47

00016848 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   16848:	b590      	push	{r4, r7, lr}
   1684a:	b087      	sub	sp, #28
   1684c:	af00      	add	r7, sp, #0
   1684e:	6078      	str	r0, [r7, #4]
   16850:	000a      	movs	r2, r1
   16852:	1cfb      	adds	r3, r7, #3
   16854:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16856:	230c      	movs	r3, #12
   16858:	18fa      	adds	r2, r7, r3
   1685a:	6878      	ldr	r0, [r7, #4]
   1685c:	2301      	movs	r3, #1
   1685e:	2118      	movs	r1, #24
   16860:	4c28      	ldr	r4, [pc, #160]	; (16904 <lsm6dso_i3c_disable_set+0xbc>)
   16862:	47a0      	blx	r4
   16864:	0003      	movs	r3, r0
   16866:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   16868:	697b      	ldr	r3, [r7, #20]
   1686a:	2b00      	cmp	r3, #0
   1686c:	d11c      	bne.n	168a8 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   1686e:	1cfb      	adds	r3, r7, #3
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	09db      	lsrs	r3, r3, #7
   16874:	b2db      	uxtb	r3, r3
   16876:	1c1a      	adds	r2, r3, #0
   16878:	2301      	movs	r3, #1
   1687a:	4013      	ands	r3, r2
   1687c:	b2da      	uxtb	r2, r3
   1687e:	230c      	movs	r3, #12
   16880:	18fb      	adds	r3, r7, r3
   16882:	2101      	movs	r1, #1
   16884:	400a      	ands	r2, r1
   16886:	1890      	adds	r0, r2, r2
   16888:	781a      	ldrb	r2, [r3, #0]
   1688a:	2102      	movs	r1, #2
   1688c:	438a      	bics	r2, r1
   1688e:	1c11      	adds	r1, r2, #0
   16890:	1c02      	adds	r2, r0, #0
   16892:	430a      	orrs	r2, r1
   16894:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16896:	230c      	movs	r3, #12
   16898:	18fa      	adds	r2, r7, r3
   1689a:	6878      	ldr	r0, [r7, #4]
   1689c:	2301      	movs	r3, #1
   1689e:	2118      	movs	r1, #24
   168a0:	4c19      	ldr	r4, [pc, #100]	; (16908 <lsm6dso_i3c_disable_set+0xc0>)
   168a2:	47a0      	blx	r4
   168a4:	0003      	movs	r3, r0
   168a6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   168a8:	697b      	ldr	r3, [r7, #20]
   168aa:	2b00      	cmp	r3, #0
   168ac:	d108      	bne.n	168c0 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   168ae:	2310      	movs	r3, #16
   168b0:	18fa      	adds	r2, r7, r3
   168b2:	6878      	ldr	r0, [r7, #4]
   168b4:	2301      	movs	r3, #1
   168b6:	2162      	movs	r1, #98	; 0x62
   168b8:	4c12      	ldr	r4, [pc, #72]	; (16904 <lsm6dso_i3c_disable_set+0xbc>)
   168ba:	47a0      	blx	r4
   168bc:	0003      	movs	r3, r0
   168be:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   168c0:	697b      	ldr	r3, [r7, #20]
   168c2:	2b00      	cmp	r3, #0
   168c4:	d119      	bne.n	168fa <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   168c6:	1cfb      	adds	r3, r7, #3
   168c8:	781b      	ldrb	r3, [r3, #0]
   168ca:	2203      	movs	r2, #3
   168cc:	4013      	ands	r3, r2
   168ce:	b2da      	uxtb	r2, r3
   168d0:	2310      	movs	r3, #16
   168d2:	18fb      	adds	r3, r7, r3
   168d4:	2103      	movs	r1, #3
   168d6:	400a      	ands	r2, r1
   168d8:	00d0      	lsls	r0, r2, #3
   168da:	781a      	ldrb	r2, [r3, #0]
   168dc:	2118      	movs	r1, #24
   168de:	438a      	bics	r2, r1
   168e0:	1c11      	adds	r1, r2, #0
   168e2:	1c02      	adds	r2, r0, #0
   168e4:	430a      	orrs	r2, r1
   168e6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   168e8:	2310      	movs	r3, #16
   168ea:	18fa      	adds	r2, r7, r3
   168ec:	6878      	ldr	r0, [r7, #4]
   168ee:	2301      	movs	r3, #1
   168f0:	2162      	movs	r1, #98	; 0x62
   168f2:	4c05      	ldr	r4, [pc, #20]	; (16908 <lsm6dso_i3c_disable_set+0xc0>)
   168f4:	47a0      	blx	r4
   168f6:	0003      	movs	r3, r0
   168f8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   168fa:	697b      	ldr	r3, [r7, #20]
}
   168fc:	0018      	movs	r0, r3
   168fe:	46bd      	mov	sp, r7
   16900:	b007      	add	sp, #28
   16902:	bd90      	pop	{r4, r7, pc}
   16904:	00015d01 	.word	0x00015d01
   16908:	00015d47 	.word	0x00015d47

0001690c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   1690c:	b590      	push	{r4, r7, lr}
   1690e:	b085      	sub	sp, #20
   16910:	af00      	add	r7, sp, #0
   16912:	6078      	str	r0, [r7, #4]
   16914:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   16916:	687b      	ldr	r3, [r7, #4]
   16918:	2102      	movs	r1, #2
   1691a:	0018      	movs	r0, r3
   1691c:	4b0e      	ldr	r3, [pc, #56]	; (16958 <lsm6dso_fsm_enable_get+0x4c>)
   1691e:	4798      	blx	r3
   16920:	0003      	movs	r3, r0
   16922:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16924:	68fb      	ldr	r3, [r7, #12]
   16926:	2b00      	cmp	r3, #0
   16928:	d107      	bne.n	1693a <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   1692a:	683a      	ldr	r2, [r7, #0]
   1692c:	6878      	ldr	r0, [r7, #4]
   1692e:	2302      	movs	r3, #2
   16930:	2146      	movs	r1, #70	; 0x46
   16932:	4c0a      	ldr	r4, [pc, #40]	; (1695c <lsm6dso_fsm_enable_get+0x50>)
   16934:	47a0      	blx	r4
   16936:	0003      	movs	r3, r0
   16938:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   1693a:	68fb      	ldr	r3, [r7, #12]
   1693c:	2b00      	cmp	r3, #0
   1693e:	d106      	bne.n	1694e <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   16940:	687b      	ldr	r3, [r7, #4]
   16942:	2100      	movs	r1, #0
   16944:	0018      	movs	r0, r3
   16946:	4b04      	ldr	r3, [pc, #16]	; (16958 <lsm6dso_fsm_enable_get+0x4c>)
   16948:	4798      	blx	r3
   1694a:	0003      	movs	r3, r0
   1694c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1694e:	68fb      	ldr	r3, [r7, #12]
}
   16950:	0018      	movs	r0, r3
   16952:	46bd      	mov	sp, r7
   16954:	b005      	add	sp, #20
   16956:	bd90      	pop	{r4, r7, pc}
   16958:	000165ed 	.word	0x000165ed
   1695c:	00015d01 	.word	0x00015d01

00016960 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   16960:	b590      	push	{r4, r7, lr}
   16962:	b085      	sub	sp, #20
   16964:	af00      	add	r7, sp, #0
   16966:	6078      	str	r0, [r7, #4]
   16968:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1696a:	687b      	ldr	r3, [r7, #4]
   1696c:	2102      	movs	r1, #2
   1696e:	0018      	movs	r0, r3
   16970:	4b21      	ldr	r3, [pc, #132]	; (169f8 <lsm6dso_fsm_data_rate_get+0x98>)
   16972:	4798      	blx	r3
   16974:	0003      	movs	r3, r0
   16976:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16978:	68fb      	ldr	r3, [r7, #12]
   1697a:	2b00      	cmp	r3, #0
   1697c:	d108      	bne.n	16990 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   1697e:	2308      	movs	r3, #8
   16980:	18fa      	adds	r2, r7, r3
   16982:	6878      	ldr	r0, [r7, #4]
   16984:	2301      	movs	r3, #1
   16986:	215f      	movs	r1, #95	; 0x5f
   16988:	4c1c      	ldr	r4, [pc, #112]	; (169fc <lsm6dso_fsm_data_rate_get+0x9c>)
   1698a:	47a0      	blx	r4
   1698c:	0003      	movs	r3, r0
   1698e:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   16990:	68fb      	ldr	r3, [r7, #12]
   16992:	2b00      	cmp	r3, #0
   16994:	d12b      	bne.n	169ee <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   16996:	2308      	movs	r3, #8
   16998:	18fb      	adds	r3, r7, r3
   1699a:	781b      	ldrb	r3, [r3, #0]
   1699c:	06db      	lsls	r3, r3, #27
   1699e:	0f9b      	lsrs	r3, r3, #30
   169a0:	b2db      	uxtb	r3, r3
   169a2:	2b01      	cmp	r3, #1
   169a4:	d00c      	beq.n	169c0 <lsm6dso_fsm_data_rate_get+0x60>
   169a6:	dc02      	bgt.n	169ae <lsm6dso_fsm_data_rate_get+0x4e>
   169a8:	2b00      	cmp	r3, #0
   169aa:	d005      	beq.n	169b8 <lsm6dso_fsm_data_rate_get+0x58>
   169ac:	e014      	b.n	169d8 <lsm6dso_fsm_data_rate_get+0x78>
   169ae:	2b02      	cmp	r3, #2
   169b0:	d00a      	beq.n	169c8 <lsm6dso_fsm_data_rate_get+0x68>
   169b2:	2b03      	cmp	r3, #3
   169b4:	d00c      	beq.n	169d0 <lsm6dso_fsm_data_rate_get+0x70>
   169b6:	e00f      	b.n	169d8 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   169b8:	683b      	ldr	r3, [r7, #0]
   169ba:	2200      	movs	r2, #0
   169bc:	701a      	strb	r2, [r3, #0]
        break;
   169be:	e00f      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   169c0:	683b      	ldr	r3, [r7, #0]
   169c2:	2201      	movs	r2, #1
   169c4:	701a      	strb	r2, [r3, #0]
        break;
   169c6:	e00b      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   169c8:	683b      	ldr	r3, [r7, #0]
   169ca:	2202      	movs	r2, #2
   169cc:	701a      	strb	r2, [r3, #0]
        break;
   169ce:	e007      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   169d0:	683b      	ldr	r3, [r7, #0]
   169d2:	2203      	movs	r2, #3
   169d4:	701a      	strb	r2, [r3, #0]
        break;
   169d6:	e003      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   169d8:	683b      	ldr	r3, [r7, #0]
   169da:	2200      	movs	r2, #0
   169dc:	701a      	strb	r2, [r3, #0]
        break;
   169de:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   169e0:	687b      	ldr	r3, [r7, #4]
   169e2:	2100      	movs	r1, #0
   169e4:	0018      	movs	r0, r3
   169e6:	4b04      	ldr	r3, [pc, #16]	; (169f8 <lsm6dso_fsm_data_rate_get+0x98>)
   169e8:	4798      	blx	r3
   169ea:	0003      	movs	r3, r0
   169ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   169ee:	68fb      	ldr	r3, [r7, #12]
}
   169f0:	0018      	movs	r0, r3
   169f2:	46bd      	mov	sp, r7
   169f4:	b005      	add	sp, #20
   169f6:	bd90      	pop	{r4, r7, pc}
   169f8:	000165ed 	.word	0x000165ed
   169fc:	00015d01 	.word	0x00015d01

00016a00 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   16a00:	b580      	push	{r7, lr}
   16a02:	b084      	sub	sp, #16
   16a04:	af00      	add	r7, sp, #0
   16a06:	60f8      	str	r0, [r7, #12]
   16a08:	0008      	movs	r0, r1
   16a0a:	607a      	str	r2, [r7, #4]
   16a0c:	0019      	movs	r1, r3
   16a0e:	230b      	movs	r3, #11
   16a10:	18fb      	adds	r3, r7, r3
   16a12:	1c02      	adds	r2, r0, #0
   16a14:	701a      	strb	r2, [r3, #0]
   16a16:	2308      	movs	r3, #8
   16a18:	18fb      	adds	r3, r7, r3
   16a1a:	1c0a      	adds	r2, r1, #0
   16a1c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   16a1e:	2300      	movs	r3, #0

}
   16a20:	0018      	movs	r0, r3
   16a22:	46bd      	mov	sp, r7
   16a24:	b004      	add	sp, #16
   16a26:	bd80      	pop	{r7, pc}

00016a28 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   16a28:	b580      	push	{r7, lr}
   16a2a:	b084      	sub	sp, #16
   16a2c:	af00      	add	r7, sp, #0
   16a2e:	60f8      	str	r0, [r7, #12]
   16a30:	0008      	movs	r0, r1
   16a32:	607a      	str	r2, [r7, #4]
   16a34:	0019      	movs	r1, r3
   16a36:	230b      	movs	r3, #11
   16a38:	18fb      	adds	r3, r7, r3
   16a3a:	1c02      	adds	r2, r0, #0
   16a3c:	701a      	strb	r2, [r3, #0]
   16a3e:	2308      	movs	r3, #8
   16a40:	18fb      	adds	r3, r7, r3
   16a42:	1c0a      	adds	r2, r1, #0
   16a44:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   16a46:	2300      	movs	r3, #0


}
   16a48:	0018      	movs	r0, r3
   16a4a:	46bd      	mov	sp, r7
   16a4c:	b004      	add	sp, #16
   16a4e:	bd80      	pop	{r7, pc}

00016a50 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   16a50:	b580      	push	{r7, lr}
   16a52:	af00      	add	r7, sp, #0
return &dev_ctx;
   16a54:	4b01      	ldr	r3, [pc, #4]	; (16a5c <GetImuStruct+0xc>)
}
   16a56:	0018      	movs	r0, r3
   16a58:	46bd      	mov	sp, r7
   16a5a:	bd80      	pop	{r7, pc}
   16a5c:	20000014 	.word	0x20000014

00016a60 <InitImu>:



int32_t InitImu(void)
{
   16a60:	b580      	push	{r7, lr}
   16a62:	b082      	sub	sp, #8
   16a64:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   16a66:	2300      	movs	r3, #0
   16a68:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   16a6a:	4b23      	ldr	r3, [pc, #140]	; (16af8 <InitImu+0x98>)
   16a6c:	2101      	movs	r1, #1
   16a6e:	0018      	movs	r0, r3
   16a70:	4b22      	ldr	r3, [pc, #136]	; (16afc <InitImu+0x9c>)
   16a72:	4798      	blx	r3
   16a74:	0003      	movs	r3, r0
   16a76:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   16a78:	1cfa      	adds	r2, r7, #3
   16a7a:	4b1f      	ldr	r3, [pc, #124]	; (16af8 <InitImu+0x98>)
   16a7c:	0011      	movs	r1, r2
   16a7e:	0018      	movs	r0, r3
   16a80:	4b1f      	ldr	r3, [pc, #124]	; (16b00 <InitImu+0xa0>)
   16a82:	4798      	blx	r3
   16a84:	0002      	movs	r2, r0
   16a86:	687b      	ldr	r3, [r7, #4]
   16a88:	4313      	orrs	r3, r2
   16a8a:	607b      	str	r3, [r7, #4]
  } while (rst);
   16a8c:	1cfb      	adds	r3, r7, #3
   16a8e:	781b      	ldrb	r3, [r3, #0]
   16a90:	2b00      	cmp	r3, #0
   16a92:	d1f1      	bne.n	16a78 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   16a94:	4b18      	ldr	r3, [pc, #96]	; (16af8 <InitImu+0x98>)
   16a96:	2180      	movs	r1, #128	; 0x80
   16a98:	0018      	movs	r0, r3
   16a9a:	4b1a      	ldr	r3, [pc, #104]	; (16b04 <InitImu+0xa4>)
   16a9c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   16a9e:	4b16      	ldr	r3, [pc, #88]	; (16af8 <InitImu+0x98>)
   16aa0:	2101      	movs	r1, #1
   16aa2:	0018      	movs	r0, r3
   16aa4:	4b18      	ldr	r3, [pc, #96]	; (16b08 <InitImu+0xa8>)
   16aa6:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   16aa8:	4b13      	ldr	r3, [pc, #76]	; (16af8 <InitImu+0x98>)
   16aaa:	2100      	movs	r1, #0
   16aac:	0018      	movs	r0, r3
   16aae:	4b17      	ldr	r3, [pc, #92]	; (16b0c <InitImu+0xac>)
   16ab0:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   16ab2:	4b11      	ldr	r3, [pc, #68]	; (16af8 <InitImu+0x98>)
   16ab4:	2101      	movs	r1, #1
   16ab6:	0018      	movs	r0, r3
   16ab8:	4b15      	ldr	r3, [pc, #84]	; (16b10 <InitImu+0xb0>)
   16aba:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   16abc:	4b0e      	ldr	r3, [pc, #56]	; (16af8 <InitImu+0x98>)
   16abe:	2101      	movs	r1, #1
   16ac0:	0018      	movs	r0, r3
   16ac2:	4b14      	ldr	r3, [pc, #80]	; (16b14 <InitImu+0xb4>)
   16ac4:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   16ac6:	4b0c      	ldr	r3, [pc, #48]	; (16af8 <InitImu+0x98>)
   16ac8:	2100      	movs	r1, #0
   16aca:	0018      	movs	r0, r3
   16acc:	4b12      	ldr	r3, [pc, #72]	; (16b18 <InitImu+0xb8>)
   16ace:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   16ad0:	4b09      	ldr	r3, [pc, #36]	; (16af8 <InitImu+0x98>)
   16ad2:	2106      	movs	r1, #6
   16ad4:	0018      	movs	r0, r3
   16ad6:	4b11      	ldr	r3, [pc, #68]	; (16b1c <InitImu+0xbc>)
   16ad8:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   16ada:	4b07      	ldr	r3, [pc, #28]	; (16af8 <InitImu+0x98>)
   16adc:	2104      	movs	r1, #4
   16ade:	0018      	movs	r0, r3
   16ae0:	4b0f      	ldr	r3, [pc, #60]	; (16b20 <InitImu+0xc0>)
   16ae2:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   16ae4:	4b04      	ldr	r3, [pc, #16]	; (16af8 <InitImu+0x98>)
   16ae6:	2101      	movs	r1, #1
   16ae8:	0018      	movs	r0, r3
   16aea:	4b0e      	ldr	r3, [pc, #56]	; (16b24 <InitImu+0xc4>)
   16aec:	4798      	blx	r3

  return error;
   16aee:	687b      	ldr	r3, [r7, #4]
}
   16af0:	0018      	movs	r0, r3
   16af2:	46bd      	mov	sp, r7
   16af4:	b002      	add	sp, #8
   16af6:	bd80      	pop	{r7, pc}
   16af8:	20000014 	.word	0x20000014
   16afc:	0001667d 	.word	0x0001667d
   16b00:	000166e9 	.word	0x000166e9
   16b04:	00016849 	.word	0x00016849
   16b08:	00016425 	.word	0x00016425
   16b0c:	00016491 	.word	0x00016491
   16b10:	00015e31 	.word	0x00015e31
   16b14:	00016161 	.word	0x00016161
   16b18:	00015dc5 	.word	0x00015dc5
   16b1c:	000160f5 	.word	0x000160f5
   16b20:	00016791 	.word	0x00016791
   16b24:	00016725 	.word	0x00016725

00016b28 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16b28:	b580      	push	{r7, lr}
   16b2a:	b084      	sub	sp, #16
   16b2c:	af00      	add	r7, sp, #0
   16b2e:	0002      	movs	r2, r0
   16b30:	1dfb      	adds	r3, r7, #7
   16b32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16b34:	230f      	movs	r3, #15
   16b36:	18fb      	adds	r3, r7, r3
   16b38:	1dfa      	adds	r2, r7, #7
   16b3a:	7812      	ldrb	r2, [r2, #0]
   16b3c:	09d2      	lsrs	r2, r2, #7
   16b3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16b40:	230e      	movs	r3, #14
   16b42:	18fb      	adds	r3, r7, r3
   16b44:	1dfa      	adds	r2, r7, #7
   16b46:	7812      	ldrb	r2, [r2, #0]
   16b48:	0952      	lsrs	r2, r2, #5
   16b4a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16b4c:	4b0d      	ldr	r3, [pc, #52]	; (16b84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16b4e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16b50:	230f      	movs	r3, #15
   16b52:	18fb      	adds	r3, r7, r3
   16b54:	781b      	ldrb	r3, [r3, #0]
   16b56:	2b00      	cmp	r3, #0
   16b58:	d10f      	bne.n	16b7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16b5a:	230f      	movs	r3, #15
   16b5c:	18fb      	adds	r3, r7, r3
   16b5e:	781b      	ldrb	r3, [r3, #0]
   16b60:	009b      	lsls	r3, r3, #2
   16b62:	2210      	movs	r2, #16
   16b64:	4694      	mov	ip, r2
   16b66:	44bc      	add	ip, r7
   16b68:	4463      	add	r3, ip
   16b6a:	3b08      	subs	r3, #8
   16b6c:	681a      	ldr	r2, [r3, #0]
   16b6e:	230e      	movs	r3, #14
   16b70:	18fb      	adds	r3, r7, r3
   16b72:	781b      	ldrb	r3, [r3, #0]
   16b74:	01db      	lsls	r3, r3, #7
   16b76:	18d3      	adds	r3, r2, r3
   16b78:	e000      	b.n	16b7c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16b7a:	2300      	movs	r3, #0
	}
}
   16b7c:	0018      	movs	r0, r3
   16b7e:	46bd      	mov	sp, r7
   16b80:	b004      	add	sp, #16
   16b82:	bd80      	pop	{r7, pc}
   16b84:	41004400 	.word	0x41004400

00016b88 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16b88:	b580      	push	{r7, lr}
   16b8a:	b082      	sub	sp, #8
   16b8c:	af00      	add	r7, sp, #0
   16b8e:	0002      	movs	r2, r0
   16b90:	1dfb      	adds	r3, r7, #7
   16b92:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16b94:	1dfb      	adds	r3, r7, #7
   16b96:	781b      	ldrb	r3, [r3, #0]
   16b98:	0018      	movs	r0, r3
   16b9a:	4b03      	ldr	r3, [pc, #12]	; (16ba8 <port_get_group_from_gpio_pin+0x20>)
   16b9c:	4798      	blx	r3
   16b9e:	0003      	movs	r3, r0
}
   16ba0:	0018      	movs	r0, r3
   16ba2:	46bd      	mov	sp, r7
   16ba4:	b002      	add	sp, #8
   16ba6:	bd80      	pop	{r7, pc}
   16ba8:	00016b29 	.word	0x00016b29

00016bac <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   16bac:	b580      	push	{r7, lr}
   16bae:	b082      	sub	sp, #8
   16bb0:	af00      	add	r7, sp, #0
   16bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   16bb4:	687b      	ldr	r3, [r7, #4]
   16bb6:	2200      	movs	r2, #0
   16bb8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16bba:	687b      	ldr	r3, [r7, #4]
   16bbc:	2201      	movs	r2, #1
   16bbe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16bc0:	687b      	ldr	r3, [r7, #4]
   16bc2:	2200      	movs	r2, #0
   16bc4:	709a      	strb	r2, [r3, #2]
}
   16bc6:	46c0      	nop			; (mov r8, r8)
   16bc8:	46bd      	mov	sp, r7
   16bca:	b002      	add	sp, #8
   16bcc:	bd80      	pop	{r7, pc}
	...

00016bd0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16bd0:	b580      	push	{r7, lr}
   16bd2:	b084      	sub	sp, #16
   16bd4:	af00      	add	r7, sp, #0
   16bd6:	0002      	movs	r2, r0
   16bd8:	1dfb      	adds	r3, r7, #7
   16bda:	701a      	strb	r2, [r3, #0]
   16bdc:	1dbb      	adds	r3, r7, #6
   16bde:	1c0a      	adds	r2, r1, #0
   16be0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16be2:	1dfb      	adds	r3, r7, #7
   16be4:	781b      	ldrb	r3, [r3, #0]
   16be6:	0018      	movs	r0, r3
   16be8:	4b0d      	ldr	r3, [pc, #52]	; (16c20 <port_pin_set_output_level+0x50>)
   16bea:	4798      	blx	r3
   16bec:	0003      	movs	r3, r0
   16bee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16bf0:	1dfb      	adds	r3, r7, #7
   16bf2:	781b      	ldrb	r3, [r3, #0]
   16bf4:	221f      	movs	r2, #31
   16bf6:	4013      	ands	r3, r2
   16bf8:	2201      	movs	r2, #1
   16bfa:	409a      	lsls	r2, r3
   16bfc:	0013      	movs	r3, r2
   16bfe:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16c00:	1dbb      	adds	r3, r7, #6
   16c02:	781b      	ldrb	r3, [r3, #0]
   16c04:	2b00      	cmp	r3, #0
   16c06:	d003      	beq.n	16c10 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16c08:	68fb      	ldr	r3, [r7, #12]
   16c0a:	68ba      	ldr	r2, [r7, #8]
   16c0c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16c0e:	e002      	b.n	16c16 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16c10:	68fb      	ldr	r3, [r7, #12]
   16c12:	68ba      	ldr	r2, [r7, #8]
   16c14:	615a      	str	r2, [r3, #20]
}
   16c16:	46c0      	nop			; (mov r8, r8)
   16c18:	46bd      	mov	sp, r7
   16c1a:	b004      	add	sp, #16
   16c1c:	bd80      	pop	{r7, pc}
   16c1e:	46c0      	nop			; (mov r8, r8)
   16c20:	00016b89 	.word	0x00016b89

00016c24 <configure_port_servo_pins>:
#define SERVO_PIN PIN_PA03
bool LOCKER_STATUS_LOCKED = true;
bool LOCKER_STATUS_UNLOCKED = false;
bool locker_status = true;
void configure_port_servo_pins(void)
{
   16c24:	b580      	push	{r7, lr}
   16c26:	b082      	sub	sp, #8
   16c28:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   16c2a:	1d3b      	adds	r3, r7, #4
   16c2c:	0018      	movs	r0, r3
   16c2e:	4b07      	ldr	r3, [pc, #28]	; (16c4c <configure_port_servo_pins+0x28>)
   16c30:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16c32:	1d3b      	adds	r3, r7, #4
   16c34:	2201      	movs	r2, #1
   16c36:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SERVO_PIN, &config_port_pin);
   16c38:	1d3b      	adds	r3, r7, #4
   16c3a:	0019      	movs	r1, r3
   16c3c:	2003      	movs	r0, #3
   16c3e:	4b04      	ldr	r3, [pc, #16]	; (16c50 <configure_port_servo_pins+0x2c>)
   16c40:	4798      	blx	r3
	
}
   16c42:	46c0      	nop			; (mov r8, r8)
   16c44:	46bd      	mov	sp, r7
   16c46:	b002      	add	sp, #8
   16c48:	bd80      	pop	{r7, pc}
   16c4a:	46c0      	nop			; (mov r8, r8)
   16c4c:	00016bad 	.word	0x00016bad
   16c50:	00028dd5 	.word	0x00028dd5

00016c54 <lock>:

void lock()
{
   16c54:	b580      	push	{r7, lr}
   16c56:	b082      	sub	sp, #8
   16c58:	af00      	add	r7, sp, #0
	int count = 0;
   16c5a:	2300      	movs	r3, #0
   16c5c:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16c5e:	2100      	movs	r1, #0
   16c60:	2003      	movs	r0, #3
   16c62:	4b16      	ldr	r3, [pc, #88]	; (16cbc <lock+0x68>)
   16c64:	4798      	blx	r3
    for(int i = 0;i<1000;i++){
   16c66:	2300      	movs	r3, #0
   16c68:	603b      	str	r3, [r7, #0]
   16c6a:	e016      	b.n	16c9a <lock+0x46>
		if(count == 4)
   16c6c:	687b      	ldr	r3, [r7, #4]
   16c6e:	2b04      	cmp	r3, #4
   16c70:	d106      	bne.n	16c80 <lock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16c72:	2101      	movs	r1, #1
   16c74:	2003      	movs	r0, #3
   16c76:	4b11      	ldr	r3, [pc, #68]	; (16cbc <lock+0x68>)
   16c78:	4798      	blx	r3
			count = 0;
   16c7a:	2300      	movs	r3, #0
   16c7c:	607b      	str	r3, [r7, #4]
   16c7e:	e003      	b.n	16c88 <lock+0x34>
			
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16c80:	2100      	movs	r1, #0
   16c82:	2003      	movs	r0, #3
   16c84:	4b0d      	ldr	r3, [pc, #52]	; (16cbc <lock+0x68>)
   16c86:	4798      	blx	r3
			
		}
		vTaskDelay(1);
   16c88:	2001      	movs	r0, #1
   16c8a:	4b0d      	ldr	r3, [pc, #52]	; (16cc0 <lock+0x6c>)
   16c8c:	4798      	blx	r3
		//delay_ms(1);
		count++;
   16c8e:	687b      	ldr	r3, [r7, #4]
   16c90:	3301      	adds	r3, #1
   16c92:	607b      	str	r3, [r7, #4]
    for(int i = 0;i<1000;i++){
   16c94:	683b      	ldr	r3, [r7, #0]
   16c96:	3301      	adds	r3, #1
   16c98:	603b      	str	r3, [r7, #0]
   16c9a:	683b      	ldr	r3, [r7, #0]
   16c9c:	4a09      	ldr	r2, [pc, #36]	; (16cc4 <lock+0x70>)
   16c9e:	4293      	cmp	r3, r2
   16ca0:	dde4      	ble.n	16c6c <lock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16ca2:	2100      	movs	r1, #0
   16ca4:	2003      	movs	r0, #3
   16ca6:	4b05      	ldr	r3, [pc, #20]	; (16cbc <lock+0x68>)
   16ca8:	4798      	blx	r3
	locker_status = LOCKER_STATUS_LOCKED;
   16caa:	4b07      	ldr	r3, [pc, #28]	; (16cc8 <lock+0x74>)
   16cac:	781a      	ldrb	r2, [r3, #0]
   16cae:	4b07      	ldr	r3, [pc, #28]	; (16ccc <lock+0x78>)
   16cb0:	701a      	strb	r2, [r3, #0]
}
   16cb2:	46c0      	nop			; (mov r8, r8)
   16cb4:	46bd      	mov	sp, r7
   16cb6:	b002      	add	sp, #8
   16cb8:	bd80      	pop	{r7, pc}
   16cba:	46c0      	nop			; (mov r8, r8)
   16cbc:	00016bd1 	.word	0x00016bd1
   16cc0:	0001e5b1 	.word	0x0001e5b1
   16cc4:	000003e7 	.word	0x000003e7
   16cc8:	20000020 	.word	0x20000020
   16ccc:	20000021 	.word	0x20000021

00016cd0 <unlock>:

void unlock(){
   16cd0:	b580      	push	{r7, lr}
   16cd2:	b082      	sub	sp, #8
   16cd4:	af00      	add	r7, sp, #0
	int count = 0;
   16cd6:	2300      	movs	r3, #0
   16cd8:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16cda:	2100      	movs	r1, #0
   16cdc:	2003      	movs	r0, #3
   16cde:	4b16      	ldr	r3, [pc, #88]	; (16d38 <unlock+0x68>)
   16ce0:	4798      	blx	r3
	 for(int i = 0;i<950;i++){
   16ce2:	2300      	movs	r3, #0
   16ce4:	603b      	str	r3, [r7, #0]
   16ce6:	e016      	b.n	16d16 <unlock+0x46>
		if(count == 4)
   16ce8:	687b      	ldr	r3, [r7, #4]
   16cea:	2b04      	cmp	r3, #4
   16cec:	d106      	bne.n	16cfc <unlock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16cee:	2101      	movs	r1, #1
   16cf0:	2003      	movs	r0, #3
   16cf2:	4b11      	ldr	r3, [pc, #68]	; (16d38 <unlock+0x68>)
   16cf4:	4798      	blx	r3
			count = 0;
   16cf6:	2300      	movs	r3, #0
   16cf8:	607b      	str	r3, [r7, #4]
   16cfa:	e003      	b.n	16d04 <unlock+0x34>
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16cfc:	2100      	movs	r1, #0
   16cfe:	2003      	movs	r0, #3
   16d00:	4b0d      	ldr	r3, [pc, #52]	; (16d38 <unlock+0x68>)
   16d02:	4798      	blx	r3
		}
		vTaskDelay(9);
   16d04:	2009      	movs	r0, #9
   16d06:	4b0d      	ldr	r3, [pc, #52]	; (16d3c <unlock+0x6c>)
   16d08:	4798      	blx	r3
		//delay_ms(2);
		count++;
   16d0a:	687b      	ldr	r3, [r7, #4]
   16d0c:	3301      	adds	r3, #1
   16d0e:	607b      	str	r3, [r7, #4]
	 for(int i = 0;i<950;i++){
   16d10:	683b      	ldr	r3, [r7, #0]
   16d12:	3301      	adds	r3, #1
   16d14:	603b      	str	r3, [r7, #0]
   16d16:	683b      	ldr	r3, [r7, #0]
   16d18:	4a09      	ldr	r2, [pc, #36]	; (16d40 <unlock+0x70>)
   16d1a:	4293      	cmp	r3, r2
   16d1c:	dde4      	ble.n	16ce8 <unlock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16d1e:	2100      	movs	r1, #0
   16d20:	2003      	movs	r0, #3
   16d22:	4b05      	ldr	r3, [pc, #20]	; (16d38 <unlock+0x68>)
   16d24:	4798      	blx	r3
	locker_status = LOCKER_STATUS_UNLOCKED;
   16d26:	4b07      	ldr	r3, [pc, #28]	; (16d44 <unlock+0x74>)
   16d28:	781a      	ldrb	r2, [r3, #0]
   16d2a:	4b07      	ldr	r3, [pc, #28]	; (16d48 <unlock+0x78>)
   16d2c:	701a      	strb	r2, [r3, #0]
}
   16d2e:	46c0      	nop			; (mov r8, r8)
   16d30:	46bd      	mov	sp, r7
   16d32:	b002      	add	sp, #8
   16d34:	bd80      	pop	{r7, pc}
   16d36:	46c0      	nop			; (mov r8, r8)
   16d38:	00016bd1 	.word	0x00016bd1
   16d3c:	0001e5b1 	.word	0x0001e5b1
   16d40:	000003b5 	.word	0x000003b5
   16d44:	200004c0 	.word	0x200004c0
   16d48:	20000021 	.word	0x20000021

00016d4c <getLock>:
bool getLock(){
   16d4c:	b580      	push	{r7, lr}
   16d4e:	af00      	add	r7, sp, #0
	return locker_status;
   16d50:	4b02      	ldr	r3, [pc, #8]	; (16d5c <getLock+0x10>)
   16d52:	781b      	ldrb	r3, [r3, #0]
}
   16d54:	0018      	movs	r0, r3
   16d56:	46bd      	mov	sp, r7
   16d58:	bd80      	pop	{r7, pc}
   16d5a:	46c0      	nop			; (mov r8, r8)
   16d5c:	20000021 	.word	0x20000021

00016d60 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   16d60:	b580      	push	{r7, lr}
   16d62:	b082      	sub	sp, #8
   16d64:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   16d66:	1cfb      	adds	r3, r7, #3
   16d68:	2200      	movs	r2, #0
   16d6a:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16d6c:	4b11      	ldr	r3, [pc, #68]	; (16db4 <SeesawGetKeypadCount+0x54>)
   16d6e:	222e      	movs	r2, #46	; 0x2e
   16d70:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   16d72:	4b10      	ldr	r3, [pc, #64]	; (16db4 <SeesawGetKeypadCount+0x54>)
   16d74:	4a10      	ldr	r2, [pc, #64]	; (16db8 <SeesawGetKeypadCount+0x58>)
   16d76:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   16d78:	4b0e      	ldr	r3, [pc, #56]	; (16db4 <SeesawGetKeypadCount+0x54>)
   16d7a:	2202      	movs	r2, #2
   16d7c:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   16d7e:	4b0d      	ldr	r3, [pc, #52]	; (16db4 <SeesawGetKeypadCount+0x54>)
   16d80:	1cfa      	adds	r2, r7, #3
   16d82:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   16d84:	4b0b      	ldr	r3, [pc, #44]	; (16db4 <SeesawGetKeypadCount+0x54>)
   16d86:	2201      	movs	r2, #1
   16d88:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16d8a:	4b0a      	ldr	r3, [pc, #40]	; (16db4 <SeesawGetKeypadCount+0x54>)
   16d8c:	2264      	movs	r2, #100	; 0x64
   16d8e:	2100      	movs	r1, #0
   16d90:	0018      	movs	r0, r3
   16d92:	4b0a      	ldr	r3, [pc, #40]	; (16dbc <SeesawGetKeypadCount+0x5c>)
   16d94:	4798      	blx	r3
   16d96:	0003      	movs	r3, r0
   16d98:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   16d9a:	687b      	ldr	r3, [r7, #4]
   16d9c:	2b00      	cmp	r3, #0
   16d9e:	d003      	beq.n	16da8 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16da0:	4b07      	ldr	r3, [pc, #28]	; (16dc0 <SeesawGetKeypadCount+0x60>)
   16da2:	0018      	movs	r0, r3
   16da4:	4b07      	ldr	r3, [pc, #28]	; (16dc4 <SeesawGetKeypadCount+0x64>)
   16da6:	4798      	blx	r3
    }
    return count;
   16da8:	1cfb      	adds	r3, r7, #3
   16daa:	781b      	ldrb	r3, [r3, #0]
}
   16dac:	0018      	movs	r0, r3
   16dae:	46bd      	mov	sp, r7
   16db0:	b002      	add	sp, #8
   16db2:	bd80      	pop	{r7, pc}
   16db4:	20004700 	.word	0x20004700
   16db8:	00039260 	.word	0x00039260
   16dbc:	00015b21 	.word	0x00015b21
   16dc0:	00039324 	.word	0x00039324
   16dc4:	00020205 	.word	0x00020205

00016dc8 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   16dc8:	b580      	push	{r7, lr}
   16dca:	b084      	sub	sp, #16
   16dcc:	af00      	add	r7, sp, #0
   16dce:	6078      	str	r0, [r7, #4]
   16dd0:	000a      	movs	r2, r1
   16dd2:	1cfb      	adds	r3, r7, #3
   16dd4:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   16dd6:	1cfb      	adds	r3, r7, #3
   16dd8:	781b      	ldrb	r3, [r3, #0]
   16dda:	2b00      	cmp	r3, #0
   16ddc:	d101      	bne.n	16de2 <SeesawReadKeypad+0x1a>
   16dde:	2300      	movs	r3, #0
   16de0:	e026      	b.n	16e30 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16de2:	2308      	movs	r3, #8
   16de4:	18fb      	adds	r3, r7, r3
   16de6:	4a14      	ldr	r2, [pc, #80]	; (16e38 <SeesawReadKeypad+0x70>)
   16de8:	8812      	ldrh	r2, [r2, #0]
   16dea:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16dec:	4b13      	ldr	r3, [pc, #76]	; (16e3c <SeesawReadKeypad+0x74>)
   16dee:	222e      	movs	r2, #46	; 0x2e
   16df0:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   16df2:	4b12      	ldr	r3, [pc, #72]	; (16e3c <SeesawReadKeypad+0x74>)
   16df4:	2208      	movs	r2, #8
   16df6:	18ba      	adds	r2, r7, r2
   16df8:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16dfa:	4b10      	ldr	r3, [pc, #64]	; (16e3c <SeesawReadKeypad+0x74>)
   16dfc:	2202      	movs	r2, #2
   16dfe:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   16e00:	4b0e      	ldr	r3, [pc, #56]	; (16e3c <SeesawReadKeypad+0x74>)
   16e02:	687a      	ldr	r2, [r7, #4]
   16e04:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   16e06:	1cfb      	adds	r3, r7, #3
   16e08:	781b      	ldrb	r3, [r3, #0]
   16e0a:	b29a      	uxth	r2, r3
   16e0c:	4b0b      	ldr	r3, [pc, #44]	; (16e3c <SeesawReadKeypad+0x74>)
   16e0e:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16e10:	4b0a      	ldr	r3, [pc, #40]	; (16e3c <SeesawReadKeypad+0x74>)
   16e12:	2264      	movs	r2, #100	; 0x64
   16e14:	2100      	movs	r1, #0
   16e16:	0018      	movs	r0, r3
   16e18:	4b09      	ldr	r3, [pc, #36]	; (16e40 <SeesawReadKeypad+0x78>)
   16e1a:	4798      	blx	r3
   16e1c:	0003      	movs	r3, r0
   16e1e:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   16e20:	68fb      	ldr	r3, [r7, #12]
   16e22:	2b00      	cmp	r3, #0
   16e24:	d003      	beq.n	16e2e <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16e26:	4b07      	ldr	r3, [pc, #28]	; (16e44 <SeesawReadKeypad+0x7c>)
   16e28:	0018      	movs	r0, r3
   16e2a:	4b07      	ldr	r3, [pc, #28]	; (16e48 <SeesawReadKeypad+0x80>)
   16e2c:	4798      	blx	r3
    }
    return error;
   16e2e:	68fb      	ldr	r3, [r7, #12]
}
   16e30:	0018      	movs	r0, r3
   16e32:	46bd      	mov	sp, r7
   16e34:	b004      	add	sp, #16
   16e36:	bd80      	pop	{r7, pc}
   16e38:	00039348 	.word	0x00039348
   16e3c:	20004700 	.word	0x20004700
   16e40:	00015b21 	.word	0x00015b21
   16e44:	00039324 	.word	0x00039324
   16e48:	00020205 	.word	0x00020205

00016e4c <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16e4c:	b5b0      	push	{r4, r5, r7, lr}
   16e4e:	b086      	sub	sp, #24
   16e50:	af00      	add	r7, sp, #0
   16e52:	0005      	movs	r5, r0
   16e54:	000c      	movs	r4, r1
   16e56:	0010      	movs	r0, r2
   16e58:	0019      	movs	r1, r3
   16e5a:	1dfb      	adds	r3, r7, #7
   16e5c:	1c2a      	adds	r2, r5, #0
   16e5e:	701a      	strb	r2, [r3, #0]
   16e60:	1dbb      	adds	r3, r7, #6
   16e62:	1c22      	adds	r2, r4, #0
   16e64:	701a      	strb	r2, [r3, #0]
   16e66:	1d7b      	adds	r3, r7, #5
   16e68:	1c02      	adds	r2, r0, #0
   16e6a:	701a      	strb	r2, [r3, #0]
   16e6c:	1d3b      	adds	r3, r7, #4
   16e6e:	1c0a      	adds	r2, r1, #0
   16e70:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   16e72:	2308      	movs	r3, #8
   16e74:	18fb      	adds	r3, r7, r3
   16e76:	220e      	movs	r2, #14
   16e78:	701a      	strb	r2, [r3, #0]
   16e7a:	2308      	movs	r3, #8
   16e7c:	18fb      	adds	r3, r7, r3
   16e7e:	2204      	movs	r2, #4
   16e80:	705a      	strb	r2, [r3, #1]
   16e82:	2308      	movs	r3, #8
   16e84:	18fb      	adds	r3, r7, r3
   16e86:	2200      	movs	r2, #0
   16e88:	709a      	strb	r2, [r3, #2]
   16e8a:	2308      	movs	r3, #8
   16e8c:	18fb      	adds	r3, r7, r3
   16e8e:	2200      	movs	r2, #0
   16e90:	70da      	strb	r2, [r3, #3]
   16e92:	2308      	movs	r3, #8
   16e94:	18fb      	adds	r3, r7, r3
   16e96:	1d7a      	adds	r2, r7, #5
   16e98:	7812      	ldrb	r2, [r2, #0]
   16e9a:	711a      	strb	r2, [r3, #4]
   16e9c:	2308      	movs	r3, #8
   16e9e:	18fb      	adds	r3, r7, r3
   16ea0:	1dba      	adds	r2, r7, #6
   16ea2:	7812      	ldrb	r2, [r2, #0]
   16ea4:	715a      	strb	r2, [r3, #5]
   16ea6:	2308      	movs	r3, #8
   16ea8:	18fb      	adds	r3, r7, r3
   16eaa:	1d3a      	adds	r2, r7, #4
   16eac:	7812      	ldrb	r2, [r2, #0]
   16eae:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   16eb0:	1dfb      	adds	r3, r7, #7
   16eb2:	781b      	ldrb	r3, [r3, #0]
   16eb4:	b29b      	uxth	r3, r3
   16eb6:	2216      	movs	r2, #22
   16eb8:	18ba      	adds	r2, r7, r2
   16eba:	1c19      	adds	r1, r3, #0
   16ebc:	1c0b      	adds	r3, r1, #0
   16ebe:	18db      	adds	r3, r3, r3
   16ec0:	185b      	adds	r3, r3, r1
   16ec2:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   16ec4:	2316      	movs	r3, #22
   16ec6:	18fb      	adds	r3, r7, r3
   16ec8:	881b      	ldrh	r3, [r3, #0]
   16eca:	0a1b      	lsrs	r3, r3, #8
   16ecc:	b29b      	uxth	r3, r3
   16ece:	b2da      	uxtb	r2, r3
   16ed0:	2308      	movs	r3, #8
   16ed2:	18fb      	adds	r3, r7, r3
   16ed4:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   16ed6:	2316      	movs	r3, #22
   16ed8:	18fb      	adds	r3, r7, r3
   16eda:	881b      	ldrh	r3, [r3, #0]
   16edc:	b2da      	uxtb	r2, r3
   16ede:	2308      	movs	r3, #8
   16ee0:	18fb      	adds	r3, r7, r3
   16ee2:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   16ee4:	4b09      	ldr	r3, [pc, #36]	; (16f0c <SeesawSetLed+0xc0>)
   16ee6:	2208      	movs	r2, #8
   16ee8:	18ba      	adds	r2, r7, r2
   16eea:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16eec:	4b07      	ldr	r3, [pc, #28]	; (16f0c <SeesawSetLed+0xc0>)
   16eee:	2207      	movs	r2, #7
   16ef0:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16ef2:	4b06      	ldr	r3, [pc, #24]	; (16f0c <SeesawSetLed+0xc0>)
   16ef4:	2164      	movs	r1, #100	; 0x64
   16ef6:	0018      	movs	r0, r3
   16ef8:	4b05      	ldr	r3, [pc, #20]	; (16f10 <SeesawSetLed+0xc4>)
   16efa:	4798      	blx	r3
   16efc:	0003      	movs	r3, r0
   16efe:	613b      	str	r3, [r7, #16]
    return error;
   16f00:	693b      	ldr	r3, [r7, #16]
}
   16f02:	0018      	movs	r0, r3
   16f04:	46bd      	mov	sp, r7
   16f06:	b006      	add	sp, #24
   16f08:	bdb0      	pop	{r4, r5, r7, pc}
   16f0a:	46c0      	nop			; (mov r8, r8)
   16f0c:	20004700 	.word	0x20004700
   16f10:	00015a49 	.word	0x00015a49

00016f14 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16f14:	b580      	push	{r7, lr}
   16f16:	b082      	sub	sp, #8
   16f18:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   16f1a:	003b      	movs	r3, r7
   16f1c:	4a0a      	ldr	r2, [pc, #40]	; (16f48 <SeesawOrderLedUpdate+0x34>)
   16f1e:	8812      	ldrh	r2, [r2, #0]
   16f20:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   16f22:	4b0a      	ldr	r3, [pc, #40]	; (16f4c <SeesawOrderLedUpdate+0x38>)
   16f24:	003a      	movs	r2, r7
   16f26:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   16f28:	4b08      	ldr	r3, [pc, #32]	; (16f4c <SeesawOrderLedUpdate+0x38>)
   16f2a:	2202      	movs	r2, #2
   16f2c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16f2e:	4b07      	ldr	r3, [pc, #28]	; (16f4c <SeesawOrderLedUpdate+0x38>)
   16f30:	2164      	movs	r1, #100	; 0x64
   16f32:	0018      	movs	r0, r3
   16f34:	4b06      	ldr	r3, [pc, #24]	; (16f50 <SeesawOrderLedUpdate+0x3c>)
   16f36:	4798      	blx	r3
   16f38:	0003      	movs	r3, r0
   16f3a:	607b      	str	r3, [r7, #4]
    return error;
   16f3c:	687b      	ldr	r3, [r7, #4]
}
   16f3e:	0018      	movs	r0, r3
   16f40:	46bd      	mov	sp, r7
   16f42:	b002      	add	sp, #8
   16f44:	bd80      	pop	{r7, pc}
   16f46:	46c0      	nop			; (mov r8, r8)
   16f48:	0003934c 	.word	0x0003934c
   16f4c:	20004700 	.word	0x20004700
   16f50:	00015a49 	.word	0x00015a49

00016f54 <system_pinmux_get_group_from_gpio_pin>:
{
   16f54:	b580      	push	{r7, lr}
   16f56:	b084      	sub	sp, #16
   16f58:	af00      	add	r7, sp, #0
   16f5a:	0002      	movs	r2, r0
   16f5c:	1dfb      	adds	r3, r7, #7
   16f5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16f60:	230f      	movs	r3, #15
   16f62:	18fb      	adds	r3, r7, r3
   16f64:	1dfa      	adds	r2, r7, #7
   16f66:	7812      	ldrb	r2, [r2, #0]
   16f68:	09d2      	lsrs	r2, r2, #7
   16f6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16f6c:	230e      	movs	r3, #14
   16f6e:	18fb      	adds	r3, r7, r3
   16f70:	1dfa      	adds	r2, r7, #7
   16f72:	7812      	ldrb	r2, [r2, #0]
   16f74:	0952      	lsrs	r2, r2, #5
   16f76:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16f78:	4b0d      	ldr	r3, [pc, #52]	; (16fb0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16f7a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16f7c:	230f      	movs	r3, #15
   16f7e:	18fb      	adds	r3, r7, r3
   16f80:	781b      	ldrb	r3, [r3, #0]
   16f82:	2b00      	cmp	r3, #0
   16f84:	d10f      	bne.n	16fa6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16f86:	230f      	movs	r3, #15
   16f88:	18fb      	adds	r3, r7, r3
   16f8a:	781b      	ldrb	r3, [r3, #0]
   16f8c:	009b      	lsls	r3, r3, #2
   16f8e:	2210      	movs	r2, #16
   16f90:	4694      	mov	ip, r2
   16f92:	44bc      	add	ip, r7
   16f94:	4463      	add	r3, ip
   16f96:	3b08      	subs	r3, #8
   16f98:	681a      	ldr	r2, [r3, #0]
   16f9a:	230e      	movs	r3, #14
   16f9c:	18fb      	adds	r3, r7, r3
   16f9e:	781b      	ldrb	r3, [r3, #0]
   16fa0:	01db      	lsls	r3, r3, #7
   16fa2:	18d3      	adds	r3, r2, r3
   16fa4:	e000      	b.n	16fa8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16fa6:	2300      	movs	r3, #0
}
   16fa8:	0018      	movs	r0, r3
   16faa:	46bd      	mov	sp, r7
   16fac:	b004      	add	sp, #16
   16fae:	bd80      	pop	{r7, pc}
   16fb0:	41004400 	.word	0x41004400

00016fb4 <port_get_group_from_gpio_pin>:
{
   16fb4:	b580      	push	{r7, lr}
   16fb6:	b082      	sub	sp, #8
   16fb8:	af00      	add	r7, sp, #0
   16fba:	0002      	movs	r2, r0
   16fbc:	1dfb      	adds	r3, r7, #7
   16fbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16fc0:	1dfb      	adds	r3, r7, #7
   16fc2:	781b      	ldrb	r3, [r3, #0]
   16fc4:	0018      	movs	r0, r3
   16fc6:	4b03      	ldr	r3, [pc, #12]	; (16fd4 <port_get_group_from_gpio_pin+0x20>)
   16fc8:	4798      	blx	r3
   16fca:	0003      	movs	r3, r0
}
   16fcc:	0018      	movs	r0, r3
   16fce:	46bd      	mov	sp, r7
   16fd0:	b002      	add	sp, #8
   16fd2:	bd80      	pop	{r7, pc}
   16fd4:	00016f55 	.word	0x00016f55

00016fd8 <port_get_config_defaults>:
{
   16fd8:	b580      	push	{r7, lr}
   16fda:	b082      	sub	sp, #8
   16fdc:	af00      	add	r7, sp, #0
   16fde:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   16fe0:	687b      	ldr	r3, [r7, #4]
   16fe2:	2200      	movs	r2, #0
   16fe4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16fe6:	687b      	ldr	r3, [r7, #4]
   16fe8:	2201      	movs	r2, #1
   16fea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16fec:	687b      	ldr	r3, [r7, #4]
   16fee:	2200      	movs	r2, #0
   16ff0:	709a      	strb	r2, [r3, #2]
}
   16ff2:	46c0      	nop			; (mov r8, r8)
   16ff4:	46bd      	mov	sp, r7
   16ff6:	b002      	add	sp, #8
   16ff8:	bd80      	pop	{r7, pc}
	...

00016ffc <port_pin_set_output_level>:
{
   16ffc:	b580      	push	{r7, lr}
   16ffe:	b084      	sub	sp, #16
   17000:	af00      	add	r7, sp, #0
   17002:	0002      	movs	r2, r0
   17004:	1dfb      	adds	r3, r7, #7
   17006:	701a      	strb	r2, [r3, #0]
   17008:	1dbb      	adds	r3, r7, #6
   1700a:	1c0a      	adds	r2, r1, #0
   1700c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1700e:	1dfb      	adds	r3, r7, #7
   17010:	781b      	ldrb	r3, [r3, #0]
   17012:	0018      	movs	r0, r3
   17014:	4b0d      	ldr	r3, [pc, #52]	; (1704c <port_pin_set_output_level+0x50>)
   17016:	4798      	blx	r3
   17018:	0003      	movs	r3, r0
   1701a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1701c:	1dfb      	adds	r3, r7, #7
   1701e:	781b      	ldrb	r3, [r3, #0]
   17020:	221f      	movs	r2, #31
   17022:	4013      	ands	r3, r2
   17024:	2201      	movs	r2, #1
   17026:	409a      	lsls	r2, r3
   17028:	0013      	movs	r3, r2
   1702a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1702c:	1dbb      	adds	r3, r7, #6
   1702e:	781b      	ldrb	r3, [r3, #0]
   17030:	2b00      	cmp	r3, #0
   17032:	d003      	beq.n	1703c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   17034:	68fb      	ldr	r3, [r7, #12]
   17036:	68ba      	ldr	r2, [r7, #8]
   17038:	619a      	str	r2, [r3, #24]
}
   1703a:	e002      	b.n	17042 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1703c:	68fb      	ldr	r3, [r7, #12]
   1703e:	68ba      	ldr	r2, [r7, #8]
   17040:	615a      	str	r2, [r3, #20]
}
   17042:	46c0      	nop			; (mov r8, r8)
   17044:	46bd      	mov	sp, r7
   17046:	b004      	add	sp, #16
   17048:	bd80      	pop	{r7, pc}
   1704a:	46c0      	nop			; (mov r8, r8)
   1704c:	00016fb5 	.word	0x00016fb5

00017050 <configure_port_speaker_pins>:
 *  Author: HEY
 */ 
#include "speaker.h"
double flag = MAX_PERIOD;
void configure_port_speaker_pins(void)
{
   17050:	b580      	push	{r7, lr}
   17052:	b082      	sub	sp, #8
   17054:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   17056:	1d3b      	adds	r3, r7, #4
   17058:	0018      	movs	r0, r3
   1705a:	4b07      	ldr	r3, [pc, #28]	; (17078 <configure_port_speaker_pins+0x28>)
   1705c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1705e:	1d3b      	adds	r3, r7, #4
   17060:	2201      	movs	r2, #1
   17062:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SPEAKER_PIN, &config_port_pin);
   17064:	1d3b      	adds	r3, r7, #4
   17066:	0019      	movs	r1, r3
   17068:	2004      	movs	r0, #4
   1706a:	4b04      	ldr	r3, [pc, #16]	; (1707c <configure_port_speaker_pins+0x2c>)
   1706c:	4798      	blx	r3
	
}
   1706e:	46c0      	nop			; (mov r8, r8)
   17070:	46bd      	mov	sp, r7
   17072:	b002      	add	sp, #8
   17074:	bd80      	pop	{r7, pc}
   17076:	46c0      	nop			; (mov r8, r8)
   17078:	00016fd9 	.word	0x00016fd9
   1707c:	00028dd5 	.word	0x00028dd5

00017080 <warning_speaker>:
void warning_speaker(){
   17080:	b5b0      	push	{r4, r5, r7, lr}
   17082:	b082      	sub	sp, #8
   17084:	af00      	add	r7, sp, #0
	
	int count = 0;
   17086:	2300      	movs	r3, #0
   17088:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SPEAKER_PIN,0);
   1708a:	2100      	movs	r1, #0
   1708c:	2004      	movs	r0, #4
   1708e:	4b2e      	ldr	r3, [pc, #184]	; (17148 <warning_speaker+0xc8>)
   17090:	4798      	blx	r3
	for(int i = 0;i<10000;i++){
   17092:	2300      	movs	r3, #0
   17094:	603b      	str	r3, [r7, #0]
   17096:	e04b      	b.n	17130 <warning_speaker+0xb0>
		if(count == 4)
   17098:	687b      	ldr	r3, [r7, #4]
   1709a:	2b04      	cmp	r3, #4
   1709c:	d133      	bne.n	17106 <warning_speaker+0x86>
		{
			port_pin_set_output_level(SPEAKER_PIN,1);
   1709e:	2101      	movs	r1, #1
   170a0:	2004      	movs	r0, #4
   170a2:	4b29      	ldr	r3, [pc, #164]	; (17148 <warning_speaker+0xc8>)
   170a4:	4798      	blx	r3
			count = 0;
   170a6:	2300      	movs	r3, #0
   170a8:	607b      	str	r3, [r7, #4]
			if(flag <= MIN_PERIOD){
   170aa:	4b28      	ldr	r3, [pc, #160]	; (1714c <warning_speaker+0xcc>)
   170ac:	6818      	ldr	r0, [r3, #0]
   170ae:	6859      	ldr	r1, [r3, #4]
   170b0:	4c27      	ldr	r4, [pc, #156]	; (17150 <warning_speaker+0xd0>)
   170b2:	4a28      	ldr	r2, [pc, #160]	; (17154 <warning_speaker+0xd4>)
   170b4:	4b28      	ldr	r3, [pc, #160]	; (17158 <warning_speaker+0xd8>)
   170b6:	47a0      	blx	r4
   170b8:	1e03      	subs	r3, r0, #0
   170ba:	d005      	beq.n	170c8 <warning_speaker+0x48>
				flag = MAX_PERIOD;
   170bc:	4a23      	ldr	r2, [pc, #140]	; (1714c <warning_speaker+0xcc>)
   170be:	2300      	movs	r3, #0
   170c0:	4c26      	ldr	r4, [pc, #152]	; (1715c <warning_speaker+0xdc>)
   170c2:	6013      	str	r3, [r2, #0]
   170c4:	6054      	str	r4, [r2, #4]
   170c6:	e022      	b.n	1710e <warning_speaker+0x8e>
			}	else{
				flag = 1000 / (1000/flag + 50);
   170c8:	4b20      	ldr	r3, [pc, #128]	; (1714c <warning_speaker+0xcc>)
   170ca:	685c      	ldr	r4, [r3, #4]
   170cc:	681b      	ldr	r3, [r3, #0]
   170ce:	4d24      	ldr	r5, [pc, #144]	; (17160 <warning_speaker+0xe0>)
   170d0:	001a      	movs	r2, r3
   170d2:	0023      	movs	r3, r4
   170d4:	2000      	movs	r0, #0
   170d6:	4923      	ldr	r1, [pc, #140]	; (17164 <warning_speaker+0xe4>)
   170d8:	47a8      	blx	r5
   170da:	0003      	movs	r3, r0
   170dc:	000c      	movs	r4, r1
   170de:	0018      	movs	r0, r3
   170e0:	0021      	movs	r1, r4
   170e2:	4c21      	ldr	r4, [pc, #132]	; (17168 <warning_speaker+0xe8>)
   170e4:	2200      	movs	r2, #0
   170e6:	4b21      	ldr	r3, [pc, #132]	; (1716c <warning_speaker+0xec>)
   170e8:	47a0      	blx	r4
   170ea:	0003      	movs	r3, r0
   170ec:	000c      	movs	r4, r1
   170ee:	001a      	movs	r2, r3
   170f0:	0023      	movs	r3, r4
   170f2:	4c1b      	ldr	r4, [pc, #108]	; (17160 <warning_speaker+0xe0>)
   170f4:	2000      	movs	r0, #0
   170f6:	491b      	ldr	r1, [pc, #108]	; (17164 <warning_speaker+0xe4>)
   170f8:	47a0      	blx	r4
   170fa:	0003      	movs	r3, r0
   170fc:	000c      	movs	r4, r1
   170fe:	4a13      	ldr	r2, [pc, #76]	; (1714c <warning_speaker+0xcc>)
   17100:	6013      	str	r3, [r2, #0]
   17102:	6054      	str	r4, [r2, #4]
   17104:	e003      	b.n	1710e <warning_speaker+0x8e>
			}
		}
		else{
			port_pin_set_output_level(SPEAKER_PIN,0);
   17106:	2100      	movs	r1, #0
   17108:	2004      	movs	r0, #4
   1710a:	4b0f      	ldr	r3, [pc, #60]	; (17148 <warning_speaker+0xc8>)
   1710c:	4798      	blx	r3
			
		}
		vTaskDelay(flag);
   1710e:	4b0f      	ldr	r3, [pc, #60]	; (1714c <warning_speaker+0xcc>)
   17110:	685c      	ldr	r4, [r3, #4]
   17112:	681b      	ldr	r3, [r3, #0]
   17114:	4a16      	ldr	r2, [pc, #88]	; (17170 <warning_speaker+0xf0>)
   17116:	0018      	movs	r0, r3
   17118:	0021      	movs	r1, r4
   1711a:	4790      	blx	r2
   1711c:	0003      	movs	r3, r0
   1711e:	0018      	movs	r0, r3
   17120:	4b14      	ldr	r3, [pc, #80]	; (17174 <warning_speaker+0xf4>)
   17122:	4798      	blx	r3
		//delay_ms(1);
		count++;
   17124:	687b      	ldr	r3, [r7, #4]
   17126:	3301      	adds	r3, #1
   17128:	607b      	str	r3, [r7, #4]
	for(int i = 0;i<10000;i++){
   1712a:	683b      	ldr	r3, [r7, #0]
   1712c:	3301      	adds	r3, #1
   1712e:	603b      	str	r3, [r7, #0]
   17130:	683b      	ldr	r3, [r7, #0]
   17132:	4a11      	ldr	r2, [pc, #68]	; (17178 <warning_speaker+0xf8>)
   17134:	4293      	cmp	r3, r2
   17136:	ddaf      	ble.n	17098 <warning_speaker+0x18>
	}
	port_pin_set_output_level(SPEAKER_PIN,0);
   17138:	2100      	movs	r1, #0
   1713a:	2004      	movs	r0, #4
   1713c:	4b02      	ldr	r3, [pc, #8]	; (17148 <warning_speaker+0xc8>)
   1713e:	4798      	blx	r3

   17140:	46c0      	nop			; (mov r8, r8)
   17142:	46bd      	mov	sp, r7
   17144:	b002      	add	sp, #8
   17146:	bdb0      	pop	{r4, r5, r7, pc}
   17148:	00016ffd 	.word	0x00016ffd
   1714c:	20000028 	.word	0x20000028
   17150:	00035161 	.word	0x00035161
   17154:	9999999a 	.word	0x9999999a
   17158:	3fb99999 	.word	0x3fb99999
   1715c:	40340000 	.word	0x40340000
   17160:	00036241 	.word	0x00036241
   17164:	408f4000 	.word	0x408f4000
   17168:	00035c21 	.word	0x00035c21
   1716c:	40490000 	.word	0x40490000
   17170:	00035239 	.word	0x00035239
   17174:	0001e5b1 	.word	0x0001e5b1
   17178:	0000270f 	.word	0x0000270f

0001717c <system_pinmux_get_group_from_gpio_pin>:
{
   1717c:	b580      	push	{r7, lr}
   1717e:	b084      	sub	sp, #16
   17180:	af00      	add	r7, sp, #0
   17182:	0002      	movs	r2, r0
   17184:	1dfb      	adds	r3, r7, #7
   17186:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17188:	230f      	movs	r3, #15
   1718a:	18fb      	adds	r3, r7, r3
   1718c:	1dfa      	adds	r2, r7, #7
   1718e:	7812      	ldrb	r2, [r2, #0]
   17190:	09d2      	lsrs	r2, r2, #7
   17192:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17194:	230e      	movs	r3, #14
   17196:	18fb      	adds	r3, r7, r3
   17198:	1dfa      	adds	r2, r7, #7
   1719a:	7812      	ldrb	r2, [r2, #0]
   1719c:	0952      	lsrs	r2, r2, #5
   1719e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   171a0:	4b0d      	ldr	r3, [pc, #52]	; (171d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   171a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   171a4:	230f      	movs	r3, #15
   171a6:	18fb      	adds	r3, r7, r3
   171a8:	781b      	ldrb	r3, [r3, #0]
   171aa:	2b00      	cmp	r3, #0
   171ac:	d10f      	bne.n	171ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   171ae:	230f      	movs	r3, #15
   171b0:	18fb      	adds	r3, r7, r3
   171b2:	781b      	ldrb	r3, [r3, #0]
   171b4:	009b      	lsls	r3, r3, #2
   171b6:	2210      	movs	r2, #16
   171b8:	4694      	mov	ip, r2
   171ba:	44bc      	add	ip, r7
   171bc:	4463      	add	r3, ip
   171be:	3b08      	subs	r3, #8
   171c0:	681a      	ldr	r2, [r3, #0]
   171c2:	230e      	movs	r3, #14
   171c4:	18fb      	adds	r3, r7, r3
   171c6:	781b      	ldrb	r3, [r3, #0]
   171c8:	01db      	lsls	r3, r3, #7
   171ca:	18d3      	adds	r3, r2, r3
   171cc:	e000      	b.n	171d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   171ce:	2300      	movs	r3, #0
}
   171d0:	0018      	movs	r0, r3
   171d2:	46bd      	mov	sp, r7
   171d4:	b004      	add	sp, #16
   171d6:	bd80      	pop	{r7, pc}
   171d8:	41004400 	.word	0x41004400

000171dc <port_get_group_from_gpio_pin>:
{
   171dc:	b580      	push	{r7, lr}
   171de:	b082      	sub	sp, #8
   171e0:	af00      	add	r7, sp, #0
   171e2:	0002      	movs	r2, r0
   171e4:	1dfb      	adds	r3, r7, #7
   171e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   171e8:	1dfb      	adds	r3, r7, #7
   171ea:	781b      	ldrb	r3, [r3, #0]
   171ec:	0018      	movs	r0, r3
   171ee:	4b03      	ldr	r3, [pc, #12]	; (171fc <port_get_group_from_gpio_pin+0x20>)
   171f0:	4798      	blx	r3
   171f2:	0003      	movs	r3, r0
}
   171f4:	0018      	movs	r0, r3
   171f6:	46bd      	mov	sp, r7
   171f8:	b002      	add	sp, #8
   171fa:	bd80      	pop	{r7, pc}
   171fc:	0001717d 	.word	0x0001717d

00017200 <port_get_config_defaults>:
{
   17200:	b580      	push	{r7, lr}
   17202:	b082      	sub	sp, #8
   17204:	af00      	add	r7, sp, #0
   17206:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   17208:	687b      	ldr	r3, [r7, #4]
   1720a:	2200      	movs	r2, #0
   1720c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	2201      	movs	r2, #1
   17212:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   17214:	687b      	ldr	r3, [r7, #4]
   17216:	2200      	movs	r2, #0
   17218:	709a      	strb	r2, [r3, #2]
}
   1721a:	46c0      	nop			; (mov r8, r8)
   1721c:	46bd      	mov	sp, r7
   1721e:	b002      	add	sp, #8
   17220:	bd80      	pop	{r7, pc}
	...

00017224 <port_pin_set_output_level>:
{
   17224:	b580      	push	{r7, lr}
   17226:	b084      	sub	sp, #16
   17228:	af00      	add	r7, sp, #0
   1722a:	0002      	movs	r2, r0
   1722c:	1dfb      	adds	r3, r7, #7
   1722e:	701a      	strb	r2, [r3, #0]
   17230:	1dbb      	adds	r3, r7, #6
   17232:	1c0a      	adds	r2, r1, #0
   17234:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   17236:	1dfb      	adds	r3, r7, #7
   17238:	781b      	ldrb	r3, [r3, #0]
   1723a:	0018      	movs	r0, r3
   1723c:	4b0d      	ldr	r3, [pc, #52]	; (17274 <port_pin_set_output_level+0x50>)
   1723e:	4798      	blx	r3
   17240:	0003      	movs	r3, r0
   17242:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17244:	1dfb      	adds	r3, r7, #7
   17246:	781b      	ldrb	r3, [r3, #0]
   17248:	221f      	movs	r2, #31
   1724a:	4013      	ands	r3, r2
   1724c:	2201      	movs	r2, #1
   1724e:	409a      	lsls	r2, r3
   17250:	0013      	movs	r3, r2
   17252:	60bb      	str	r3, [r7, #8]
	if (level) {
   17254:	1dbb      	adds	r3, r7, #6
   17256:	781b      	ldrb	r3, [r3, #0]
   17258:	2b00      	cmp	r3, #0
   1725a:	d003      	beq.n	17264 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1725c:	68fb      	ldr	r3, [r7, #12]
   1725e:	68ba      	ldr	r2, [r7, #8]
   17260:	619a      	str	r2, [r3, #24]
}
   17262:	e002      	b.n	1726a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17264:	68fb      	ldr	r3, [r7, #12]
   17266:	68ba      	ldr	r2, [r7, #8]
   17268:	615a      	str	r2, [r3, #20]
}
   1726a:	46c0      	nop			; (mov r8, r8)
   1726c:	46bd      	mov	sp, r7
   1726e:	b004      	add	sp, #16
   17270:	bd80      	pop	{r7, pc}
   17272:	46c0      	nop			; (mov r8, r8)
   17274:	000171dd 	.word	0x000171dd

00017278 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   17278:	b580      	push	{r7, lr}
   1727a:	b084      	sub	sp, #16
   1727c:	af00      	add	r7, sp, #0
   1727e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   17280:	687b      	ldr	r3, [r7, #4]
   17282:	681b      	ldr	r3, [r3, #0]
   17284:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   17286:	68fb      	ldr	r3, [r7, #12]
   17288:	69db      	ldr	r3, [r3, #28]
   1728a:	1e5a      	subs	r2, r3, #1
   1728c:	4193      	sbcs	r3, r2
   1728e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   17290:	0018      	movs	r0, r3
   17292:	46bd      	mov	sp, r7
   17294:	b004      	add	sp, #16
   17296:	bd80      	pop	{r7, pc}

00017298 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   17298:	b580      	push	{r7, lr}
   1729a:	b082      	sub	sp, #8
   1729c:	af00      	add	r7, sp, #0
   1729e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   172a0:	687b      	ldr	r3, [r7, #4]
   172a2:	2201      	movs	r2, #1
   172a4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   172a6:	687b      	ldr	r3, [r7, #4]
   172a8:	2200      	movs	r2, #0
   172aa:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   172ac:	687b      	ldr	r3, [r7, #4]
   172ae:	2200      	movs	r2, #0
   172b0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   172b2:	687b      	ldr	r3, [r7, #4]
   172b4:	22c0      	movs	r2, #192	; 0xc0
   172b6:	0392      	lsls	r2, r2, #14
   172b8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   172ba:	687b      	ldr	r3, [r7, #4]
   172bc:	2200      	movs	r2, #0
   172be:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   172c0:	687b      	ldr	r3, [r7, #4]
   172c2:	2200      	movs	r2, #0
   172c4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   172c6:	687b      	ldr	r3, [r7, #4]
   172c8:	2201      	movs	r2, #1
   172ca:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   172cc:	687b      	ldr	r3, [r7, #4]
   172ce:	2201      	movs	r2, #1
   172d0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   172d2:	687b      	ldr	r3, [r7, #4]
   172d4:	2200      	movs	r2, #0
   172d6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   172d8:	687b      	ldr	r3, [r7, #4]
   172da:	2224      	movs	r2, #36	; 0x24
   172dc:	2100      	movs	r1, #0
   172de:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   172e0:	687b      	ldr	r3, [r7, #4]
   172e2:	3318      	adds	r3, #24
   172e4:	220c      	movs	r2, #12
   172e6:	2100      	movs	r1, #0
   172e8:	0018      	movs	r0, r3
   172ea:	4b0a      	ldr	r3, [pc, #40]	; (17314 <spi_get_config_defaults+0x7c>)
   172ec:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   172ee:	687b      	ldr	r3, [r7, #4]
   172f0:	4a09      	ldr	r2, [pc, #36]	; (17318 <spi_get_config_defaults+0x80>)
   172f2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   172f4:	687b      	ldr	r3, [r7, #4]
   172f6:	2200      	movs	r2, #0
   172f8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   172fa:	687b      	ldr	r3, [r7, #4]
   172fc:	2200      	movs	r2, #0
   172fe:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   17300:	687b      	ldr	r3, [r7, #4]
   17302:	2200      	movs	r2, #0
   17304:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   17306:	687b      	ldr	r3, [r7, #4]
   17308:	2200      	movs	r2, #0
   1730a:	635a      	str	r2, [r3, #52]	; 0x34

};
   1730c:	46c0      	nop			; (mov r8, r8)
   1730e:	46bd      	mov	sp, r7
   17310:	b002      	add	sp, #8
   17312:	bd80      	pop	{r7, pc}
   17314:	0003796b 	.word	0x0003796b
   17318:	000186a0 	.word	0x000186a0

0001731c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1731c:	b580      	push	{r7, lr}
   1731e:	b082      	sub	sp, #8
   17320:	af00      	add	r7, sp, #0
   17322:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	220a      	movs	r2, #10
   17328:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1732a:	687b      	ldr	r3, [r7, #4]
   1732c:	2200      	movs	r2, #0
   1732e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   17330:	687b      	ldr	r3, [r7, #4]
   17332:	2200      	movs	r2, #0
   17334:	709a      	strb	r2, [r3, #2]
}
   17336:	46c0      	nop			; (mov r8, r8)
   17338:	46bd      	mov	sp, r7
   1733a:	b002      	add	sp, #8
   1733c:	bd80      	pop	{r7, pc}
	...

00017340 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   17340:	b580      	push	{r7, lr}
   17342:	b084      	sub	sp, #16
   17344:	af00      	add	r7, sp, #0
   17346:	6078      	str	r0, [r7, #4]
   17348:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1734a:	683b      	ldr	r3, [r7, #0]
   1734c:	781a      	ldrb	r2, [r3, #0]
   1734e:	687b      	ldr	r3, [r7, #4]
   17350:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   17352:	683b      	ldr	r3, [r7, #0]
   17354:	785a      	ldrb	r2, [r3, #1]
   17356:	687b      	ldr	r3, [r7, #4]
   17358:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1735a:	683b      	ldr	r3, [r7, #0]
   1735c:	789a      	ldrb	r2, [r3, #2]
   1735e:	687b      	ldr	r3, [r7, #4]
   17360:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   17362:	230c      	movs	r3, #12
   17364:	18fb      	adds	r3, r7, r3
   17366:	0018      	movs	r0, r3
   17368:	4b0b      	ldr	r3, [pc, #44]	; (17398 <spi_attach_slave+0x58>)
   1736a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1736c:	230c      	movs	r3, #12
   1736e:	18fb      	adds	r3, r7, r3
   17370:	2201      	movs	r2, #1
   17372:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   17374:	687b      	ldr	r3, [r7, #4]
   17376:	781b      	ldrb	r3, [r3, #0]
   17378:	220c      	movs	r2, #12
   1737a:	18ba      	adds	r2, r7, r2
   1737c:	0011      	movs	r1, r2
   1737e:	0018      	movs	r0, r3
   17380:	4b06      	ldr	r3, [pc, #24]	; (1739c <spi_attach_slave+0x5c>)
   17382:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   17384:	687b      	ldr	r3, [r7, #4]
   17386:	781b      	ldrb	r3, [r3, #0]
   17388:	2101      	movs	r1, #1
   1738a:	0018      	movs	r0, r3
   1738c:	4b04      	ldr	r3, [pc, #16]	; (173a0 <spi_attach_slave+0x60>)
   1738e:	4798      	blx	r3
}
   17390:	46c0      	nop			; (mov r8, r8)
   17392:	46bd      	mov	sp, r7
   17394:	b004      	add	sp, #16
   17396:	bd80      	pop	{r7, pc}
   17398:	00017201 	.word	0x00017201
   1739c:	00028dd5 	.word	0x00028dd5
   173a0:	00017225 	.word	0x00017225

000173a4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   173a4:	b580      	push	{r7, lr}
   173a6:	b084      	sub	sp, #16
   173a8:	af00      	add	r7, sp, #0
   173aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   173ac:	687b      	ldr	r3, [r7, #4]
   173ae:	681b      	ldr	r3, [r3, #0]
   173b0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   173b2:	46c0      	nop			; (mov r8, r8)
   173b4:	687b      	ldr	r3, [r7, #4]
   173b6:	0018      	movs	r0, r3
   173b8:	4b06      	ldr	r3, [pc, #24]	; (173d4 <spi_enable+0x30>)
   173ba:	4798      	blx	r3
   173bc:	1e03      	subs	r3, r0, #0
   173be:	d1f9      	bne.n	173b4 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   173c0:	68fb      	ldr	r3, [r7, #12]
   173c2:	681b      	ldr	r3, [r3, #0]
   173c4:	2202      	movs	r2, #2
   173c6:	431a      	orrs	r2, r3
   173c8:	68fb      	ldr	r3, [r7, #12]
   173ca:	601a      	str	r2, [r3, #0]
}
   173cc:	46c0      	nop			; (mov r8, r8)
   173ce:	46bd      	mov	sp, r7
   173d0:	b004      	add	sp, #16
   173d2:	bd80      	pop	{r7, pc}
   173d4:	00017279 	.word	0x00017279

000173d8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   173d8:	b580      	push	{r7, lr}
   173da:	b084      	sub	sp, #16
   173dc:	af00      	add	r7, sp, #0
   173de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   173e0:	687b      	ldr	r3, [r7, #4]
   173e2:	681b      	ldr	r3, [r3, #0]
   173e4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   173e6:	68fb      	ldr	r3, [r7, #12]
   173e8:	7e1b      	ldrb	r3, [r3, #24]
   173ea:	b2db      	uxtb	r3, r3
   173ec:	001a      	movs	r2, r3
   173ee:	2301      	movs	r3, #1
   173f0:	4013      	ands	r3, r2
   173f2:	1e5a      	subs	r2, r3, #1
   173f4:	4193      	sbcs	r3, r2
   173f6:	b2db      	uxtb	r3, r3
}
   173f8:	0018      	movs	r0, r3
   173fa:	46bd      	mov	sp, r7
   173fc:	b004      	add	sp, #16
   173fe:	bd80      	pop	{r7, pc}

00017400 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   17400:	b580      	push	{r7, lr}
   17402:	b084      	sub	sp, #16
   17404:	af00      	add	r7, sp, #0
   17406:	6078      	str	r0, [r7, #4]
   17408:	000a      	movs	r2, r1
   1740a:	1cbb      	adds	r3, r7, #2
   1740c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1740e:	687b      	ldr	r3, [r7, #4]
   17410:	681b      	ldr	r3, [r3, #0]
   17412:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   17414:	687b      	ldr	r3, [r7, #4]
   17416:	0018      	movs	r0, r3
   17418:	4b0a      	ldr	r3, [pc, #40]	; (17444 <spi_write+0x44>)
   1741a:	4798      	blx	r3
   1741c:	0003      	movs	r3, r0
   1741e:	001a      	movs	r2, r3
   17420:	2301      	movs	r3, #1
   17422:	4053      	eors	r3, r2
   17424:	b2db      	uxtb	r3, r3
   17426:	2b00      	cmp	r3, #0
   17428:	d001      	beq.n	1742e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1742a:	2305      	movs	r3, #5
   1742c:	e006      	b.n	1743c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1742e:	1cbb      	adds	r3, r7, #2
   17430:	881b      	ldrh	r3, [r3, #0]
   17432:	05db      	lsls	r3, r3, #23
   17434:	0dda      	lsrs	r2, r3, #23
   17436:	68fb      	ldr	r3, [r7, #12]
   17438:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1743a:	2300      	movs	r3, #0
}
   1743c:	0018      	movs	r0, r3
   1743e:	46bd      	mov	sp, r7
   17440:	b004      	add	sp, #16
   17442:	bd80      	pop	{r7, pc}
   17444:	000173d9 	.word	0x000173d9

00017448 <configure_port_pins>:
	LCD_data(madctl);
}


void configure_port_pins(void)
{
   17448:	b580      	push	{r7, lr}
   1744a:	b082      	sub	sp, #8
   1744c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   1744e:	1d3b      	adds	r3, r7, #4
   17450:	0018      	movs	r0, r3
   17452:	4b0f      	ldr	r3, [pc, #60]	; (17490 <configure_port_pins+0x48>)
   17454:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   17456:	1d3b      	adds	r3, r7, #4
   17458:	2201      	movs	r2, #1
   1745a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
   1745c:	1d3b      	adds	r3, r7, #4
   1745e:	0019      	movs	r1, r3
   17460:	2022      	movs	r0, #34	; 0x22
   17462:	4b0c      	ldr	r3, [pc, #48]	; (17494 <configure_port_pins+0x4c>)
   17464:	4798      	blx	r3
	struct port_config config_port_pins;
	port_get_config_defaults(&config_port_pins);
   17466:	003b      	movs	r3, r7
   17468:	0018      	movs	r0, r3
   1746a:	4b09      	ldr	r3, [pc, #36]	; (17490 <configure_port_pins+0x48>)
   1746c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1746e:	1d3b      	adds	r3, r7, #4
   17470:	2201      	movs	r2, #1
   17472:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA20, &config_port_pins);
   17474:	003b      	movs	r3, r7
   17476:	0019      	movs	r1, r3
   17478:	2014      	movs	r0, #20
   1747a:	4b06      	ldr	r3, [pc, #24]	; (17494 <configure_port_pins+0x4c>)
   1747c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20,1);
   1747e:	2101      	movs	r1, #1
   17480:	2014      	movs	r0, #20
   17482:	4b05      	ldr	r3, [pc, #20]	; (17498 <configure_port_pins+0x50>)
   17484:	4798      	blx	r3
}
   17486:	46c0      	nop			; (mov r8, r8)
   17488:	46bd      	mov	sp, r7
   1748a:	b002      	add	sp, #8
   1748c:	bd80      	pop	{r7, pc}
   1748e:	46c0      	nop			; (mov r8, r8)
   17490:	00017201 	.word	0x00017201
   17494:	00028dd5 	.word	0x00028dd5
   17498:	00017225 	.word	0x00017225

0001749c <drawString>:
            LCD_drawPixel(x+i,y+j,c2);
        }
    }
}

void drawString(short x, short y, char* str, short fg, short bg){
   1749c:	b5b0      	push	{r4, r5, r7, lr}
   1749e:	b088      	sub	sp, #32
   174a0:	af02      	add	r7, sp, #8
   174a2:	0004      	movs	r4, r0
   174a4:	0008      	movs	r0, r1
   174a6:	60ba      	str	r2, [r7, #8]
   174a8:	0019      	movs	r1, r3
   174aa:	230e      	movs	r3, #14
   174ac:	18fb      	adds	r3, r7, r3
   174ae:	1c22      	adds	r2, r4, #0
   174b0:	801a      	strh	r2, [r3, #0]
   174b2:	230c      	movs	r3, #12
   174b4:	18fb      	adds	r3, r7, r3
   174b6:	1c02      	adds	r2, r0, #0
   174b8:	801a      	strh	r2, [r3, #0]
   174ba:	1dbb      	adds	r3, r7, #6
   174bc:	1c0a      	adds	r2, r1, #0
   174be:	801a      	strh	r2, [r3, #0]
    int i = 0;
   174c0:	2300      	movs	r3, #0
   174c2:	617b      	str	r3, [r7, #20]
    while(str[i]){
   174c4:	e021      	b.n	1750a <drawString+0x6e>
        drawChar(x+5*i,y,str[i],fg,bg);
   174c6:	697b      	ldr	r3, [r7, #20]
   174c8:	b29b      	uxth	r3, r3
   174ca:	1c1a      	adds	r2, r3, #0
   174cc:	0092      	lsls	r2, r2, #2
   174ce:	18d3      	adds	r3, r2, r3
   174d0:	b29a      	uxth	r2, r3
   174d2:	230e      	movs	r3, #14
   174d4:	18fb      	adds	r3, r7, r3
   174d6:	881b      	ldrh	r3, [r3, #0]
   174d8:	18d3      	adds	r3, r2, r3
   174da:	b29b      	uxth	r3, r3
   174dc:	b218      	sxth	r0, r3
   174de:	697b      	ldr	r3, [r7, #20]
   174e0:	68ba      	ldr	r2, [r7, #8]
   174e2:	18d3      	adds	r3, r2, r3
   174e4:	781a      	ldrb	r2, [r3, #0]
   174e6:	1dbb      	adds	r3, r7, #6
   174e8:	2400      	movs	r4, #0
   174ea:	5f1c      	ldrsh	r4, [r3, r4]
   174ec:	230c      	movs	r3, #12
   174ee:	18fb      	adds	r3, r7, r3
   174f0:	2100      	movs	r1, #0
   174f2:	5e59      	ldrsh	r1, [r3, r1]
   174f4:	2328      	movs	r3, #40	; 0x28
   174f6:	18fb      	adds	r3, r7, r3
   174f8:	2500      	movs	r5, #0
   174fa:	5f5b      	ldrsh	r3, [r3, r5]
   174fc:	9300      	str	r3, [sp, #0]
   174fe:	0023      	movs	r3, r4
   17500:	4c07      	ldr	r4, [pc, #28]	; (17520 <drawString+0x84>)
   17502:	47a0      	blx	r4
        i++;
   17504:	697b      	ldr	r3, [r7, #20]
   17506:	3301      	adds	r3, #1
   17508:	617b      	str	r3, [r7, #20]
    while(str[i]){
   1750a:	697b      	ldr	r3, [r7, #20]
   1750c:	68ba      	ldr	r2, [r7, #8]
   1750e:	18d3      	adds	r3, r2, r3
   17510:	781b      	ldrb	r3, [r3, #0]
   17512:	2b00      	cmp	r3, #0
   17514:	d1d7      	bne.n	174c6 <drawString+0x2a>
    }
}
   17516:	46c0      	nop			; (mov r8, r8)
   17518:	46bd      	mov	sp, r7
   1751a:	b006      	add	sp, #24
   1751c:	bdb0      	pop	{r4, r5, r7, pc}
   1751e:	46c0      	nop			; (mov r8, r8)
   17520:	00017525 	.word	0x00017525

00017524 <drawChar>:


void drawChar(short x, short y, unsigned char c, short fg, short bg){
   17524:	b5b0      	push	{r4, r5, r7, lr}
   17526:	b086      	sub	sp, #24
   17528:	af00      	add	r7, sp, #0
   1752a:	0005      	movs	r5, r0
   1752c:	000c      	movs	r4, r1
   1752e:	0010      	movs	r0, r2
   17530:	0019      	movs	r1, r3
   17532:	1dbb      	adds	r3, r7, #6
   17534:	1c2a      	adds	r2, r5, #0
   17536:	801a      	strh	r2, [r3, #0]
   17538:	1d3b      	adds	r3, r7, #4
   1753a:	1c22      	adds	r2, r4, #0
   1753c:	801a      	strh	r2, [r3, #0]
   1753e:	1cfb      	adds	r3, r7, #3
   17540:	1c02      	adds	r2, r0, #0
   17542:	701a      	strb	r2, [r3, #0]
   17544:	003b      	movs	r3, r7
   17546:	1c0a      	adds	r2, r1, #0
   17548:	801a      	strh	r2, [r3, #0]
    char row = c - 0x20;
   1754a:	230f      	movs	r3, #15
   1754c:	18fb      	adds	r3, r7, r3
   1754e:	1cfa      	adds	r2, r7, #3
   17550:	7812      	ldrb	r2, [r2, #0]
   17552:	3a20      	subs	r2, #32
   17554:	701a      	strb	r2, [r3, #0]
    int i;
    if ((MAX_X-x>7)&&(MAX_Y-y>7)){
   17556:	1dbb      	adds	r3, r7, #6
   17558:	2200      	movs	r2, #0
   1755a:	5e9b      	ldrsh	r3, [r3, r2]
   1755c:	22a0      	movs	r2, #160	; 0xa0
   1755e:	1ad3      	subs	r3, r2, r3
   17560:	2b07      	cmp	r3, #7
   17562:	dd53      	ble.n	1760c <drawChar+0xe8>
   17564:	1d3b      	adds	r3, r7, #4
   17566:	2200      	movs	r2, #0
   17568:	5e9b      	ldrsh	r3, [r3, r2]
   1756a:	2280      	movs	r2, #128	; 0x80
   1756c:	1ad3      	subs	r3, r2, r3
   1756e:	2b07      	cmp	r3, #7
   17570:	dd4c      	ble.n	1760c <drawChar+0xe8>
        for(i=0;i<5;i++){
   17572:	2300      	movs	r3, #0
   17574:	617b      	str	r3, [r7, #20]
   17576:	e046      	b.n	17606 <drawChar+0xe2>
            char pixels = ASCII[row][i]; // so we have a list of pixies to go through
   17578:	230f      	movs	r3, #15
   1757a:	18fb      	adds	r3, r7, r3
   1757c:	781a      	ldrb	r2, [r3, #0]
   1757e:	230e      	movs	r3, #14
   17580:	18f9      	adds	r1, r7, r3
   17582:	4824      	ldr	r0, [pc, #144]	; (17614 <drawChar+0xf0>)
   17584:	0013      	movs	r3, r2
   17586:	009b      	lsls	r3, r3, #2
   17588:	189b      	adds	r3, r3, r2
   1758a:	18c2      	adds	r2, r0, r3
   1758c:	697b      	ldr	r3, [r7, #20]
   1758e:	18d3      	adds	r3, r2, r3
   17590:	781b      	ldrb	r3, [r3, #0]
   17592:	700b      	strb	r3, [r1, #0]
            int j;
            for(j=0;j<8;j++){
   17594:	2300      	movs	r3, #0
   17596:	613b      	str	r3, [r7, #16]
   17598:	e02f      	b.n	175fa <drawChar+0xd6>
                if ((pixels>>j)&1==1){
   1759a:	230e      	movs	r3, #14
   1759c:	18fb      	adds	r3, r7, r3
   1759e:	781a      	ldrb	r2, [r3, #0]
   175a0:	693b      	ldr	r3, [r7, #16]
   175a2:	411a      	asrs	r2, r3
   175a4:	0013      	movs	r3, r2
   175a6:	2201      	movs	r2, #1
   175a8:	4013      	ands	r3, r2
   175aa:	d011      	beq.n	175d0 <drawChar+0xac>
                    LCD_drawPixel(x+i,y+j,fg);
   175ac:	697b      	ldr	r3, [r7, #20]
   175ae:	b29a      	uxth	r2, r3
   175b0:	1dbb      	adds	r3, r7, #6
   175b2:	881b      	ldrh	r3, [r3, #0]
   175b4:	18d3      	adds	r3, r2, r3
   175b6:	b298      	uxth	r0, r3
   175b8:	693b      	ldr	r3, [r7, #16]
   175ba:	b29a      	uxth	r2, r3
   175bc:	1d3b      	adds	r3, r7, #4
   175be:	881b      	ldrh	r3, [r3, #0]
   175c0:	18d3      	adds	r3, r2, r3
   175c2:	b299      	uxth	r1, r3
   175c4:	003b      	movs	r3, r7
   175c6:	881b      	ldrh	r3, [r3, #0]
   175c8:	001a      	movs	r2, r3
   175ca:	4b13      	ldr	r3, [pc, #76]	; (17618 <drawChar+0xf4>)
   175cc:	4798      	blx	r3
   175ce:	e011      	b.n	175f4 <drawChar+0xd0>
                }
                else {
                    LCD_drawPixel(x+i,y+j,bg);
   175d0:	697b      	ldr	r3, [r7, #20]
   175d2:	b29a      	uxth	r2, r3
   175d4:	1dbb      	adds	r3, r7, #6
   175d6:	881b      	ldrh	r3, [r3, #0]
   175d8:	18d3      	adds	r3, r2, r3
   175da:	b298      	uxth	r0, r3
   175dc:	693b      	ldr	r3, [r7, #16]
   175de:	b29a      	uxth	r2, r3
   175e0:	1d3b      	adds	r3, r7, #4
   175e2:	881b      	ldrh	r3, [r3, #0]
   175e4:	18d3      	adds	r3, r2, r3
   175e6:	b29b      	uxth	r3, r3
   175e8:	2228      	movs	r2, #40	; 0x28
   175ea:	18ba      	adds	r2, r7, r2
   175ec:	8812      	ldrh	r2, [r2, #0]
   175ee:	0019      	movs	r1, r3
   175f0:	4b09      	ldr	r3, [pc, #36]	; (17618 <drawChar+0xf4>)
   175f2:	4798      	blx	r3
            for(j=0;j<8;j++){
   175f4:	693b      	ldr	r3, [r7, #16]
   175f6:	3301      	adds	r3, #1
   175f8:	613b      	str	r3, [r7, #16]
   175fa:	693b      	ldr	r3, [r7, #16]
   175fc:	2b07      	cmp	r3, #7
   175fe:	ddcc      	ble.n	1759a <drawChar+0x76>
        for(i=0;i<5;i++){
   17600:	697b      	ldr	r3, [r7, #20]
   17602:	3301      	adds	r3, #1
   17604:	617b      	str	r3, [r7, #20]
   17606:	697b      	ldr	r3, [r7, #20]
   17608:	2b04      	cmp	r3, #4
   1760a:	ddb5      	ble.n	17578 <drawChar+0x54>
                }
            }
        }
    }
}
   1760c:	46c0      	nop			; (mov r8, r8)
   1760e:	46bd      	mov	sp, r7
   17610:	b006      	add	sp, #24
   17612:	bdb0      	pop	{r4, r5, r7, pc}
   17614:	00039374 	.word	0x00039374
   17618:	00017acd 	.word	0x00017acd

0001761c <configure_spi_master>:




void configure_spi_master(void)
{
   1761c:	b580      	push	{r7, lr}
   1761e:	b090      	sub	sp, #64	; 0x40
   17620:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
   17622:	1d3b      	adds	r3, r7, #4
   17624:	0018      	movs	r0, r3
   17626:	4b1c      	ldr	r3, [pc, #112]	; (17698 <configure_spi_master+0x7c>)
   17628:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
   1762a:	1d3b      	adds	r3, r7, #4
   1762c:	2205      	movs	r2, #5
   1762e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
   17630:	1d3a      	adds	r2, r7, #4
   17632:	4b1a      	ldr	r3, [pc, #104]	; (1769c <configure_spi_master+0x80>)
   17634:	0011      	movs	r1, r2
   17636:	0018      	movs	r0, r3
   17638:	4b19      	ldr	r3, [pc, #100]	; (176a0 <configure_spi_master+0x84>)
   1763a:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
   1763c:	2308      	movs	r3, #8
   1763e:	18fb      	adds	r3, r7, r3
   17640:	0018      	movs	r0, r3
   17642:	4b18      	ldr	r3, [pc, #96]	; (176a4 <configure_spi_master+0x88>)
   17644:	4798      	blx	r3
	/*config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;*/
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
   17646:	2308      	movs	r3, #8
   17648:	18fb      	adds	r3, r7, r3
   1764a:	2200      	movs	r2, #0
   1764c:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
   1764e:	2308      	movs	r3, #8
   17650:	18fb      	adds	r3, r7, r3
   17652:	4a15      	ldr	r2, [pc, #84]	; (176a8 <configure_spi_master+0x8c>)
   17654:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
   17656:	2308      	movs	r3, #8
   17658:	18fb      	adds	r3, r7, r3
   1765a:	4a14      	ldr	r2, [pc, #80]	; (176ac <configure_spi_master+0x90>)
   1765c:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
   1765e:	2308      	movs	r3, #8
   17660:	18fb      	adds	r3, r7, r3
   17662:	2201      	movs	r2, #1
   17664:	4252      	negs	r2, r2
   17666:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
   17668:	2308      	movs	r3, #8
   1766a:	18fb      	adds	r3, r7, r3
   1766c:	2201      	movs	r2, #1
   1766e:	4252      	negs	r2, r2
   17670:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  12000000; //12MHz  = 400ns per signal
   17672:	2308      	movs	r3, #8
   17674:	18fb      	adds	r3, r7, r3
   17676:	4a0e      	ldr	r2, [pc, #56]	; (176b0 <configure_spi_master+0x94>)
   17678:	619a      	str	r2, [r3, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
   1767a:	2308      	movs	r3, #8
   1767c:	18fa      	adds	r2, r7, r3
   1767e:	490d      	ldr	r1, [pc, #52]	; (176b4 <configure_spi_master+0x98>)
   17680:	4b0d      	ldr	r3, [pc, #52]	; (176b8 <configure_spi_master+0x9c>)
   17682:	0018      	movs	r0, r3
   17684:	4b0d      	ldr	r3, [pc, #52]	; (176bc <configure_spi_master+0xa0>)
   17686:	4798      	blx	r3
	spi_enable(&spi_master_instance);
   17688:	4b0b      	ldr	r3, [pc, #44]	; (176b8 <configure_spi_master+0x9c>)
   1768a:	0018      	movs	r0, r3
   1768c:	4b0c      	ldr	r3, [pc, #48]	; (176c0 <configure_spi_master+0xa4>)
   1768e:	4798      	blx	r3
}
   17690:	46c0      	nop			; (mov r8, r8)
   17692:	46bd      	mov	sp, r7
   17694:	b010      	add	sp, #64	; 0x40
   17696:	bd80      	pop	{r7, pc}
   17698:	0001731d 	.word	0x0001731d
   1769c:	2000471c 	.word	0x2000471c
   176a0:	00017341 	.word	0x00017341
   176a4:	00017299 	.word	0x00017299
   176a8:	00220003 	.word	0x00220003
   176ac:	00230003 	.word	0x00230003
   176b0:	00b71b00 	.word	0x00b71b00
   176b4:	42001c00 	.word	0x42001c00
   176b8:	20004710 	.word	0x20004710
   176bc:	0002a4d1 	.word	0x0002a4d1
   176c0:	000173a5 	.word	0x000173a5

000176c4 <spi_io>:



void spi_io(unsigned char o) {
   176c4:	b580      	push	{r7, lr}
   176c6:	b082      	sub	sp, #8
   176c8:	af00      	add	r7, sp, #0
   176ca:	0002      	movs	r2, r0
   176cc:	1dfb      	adds	r3, r7, #7
   176ce:	701a      	strb	r2, [r3, #0]
	spi_write(&spi_master_instance,o);
   176d0:	1dfb      	adds	r3, r7, #7
   176d2:	781b      	ldrb	r3, [r3, #0]
   176d4:	b29a      	uxth	r2, r3
   176d6:	4b04      	ldr	r3, [pc, #16]	; (176e8 <spi_io+0x24>)
   176d8:	0011      	movs	r1, r2
   176da:	0018      	movs	r0, r3
   176dc:	4b03      	ldr	r3, [pc, #12]	; (176ec <spi_io+0x28>)
   176de:	4798      	blx	r3
}
   176e0:	46c0      	nop			; (mov r8, r8)
   176e2:	46bd      	mov	sp, r7
   176e4:	b002      	add	sp, #8
   176e6:	bd80      	pop	{r7, pc}
   176e8:	20004710 	.word	0x20004710
   176ec:	00017401 	.word	0x00017401

000176f0 <LCD_command>:

void LCD_command(unsigned char com) {
   176f0:	b580      	push	{r7, lr}
   176f2:	b082      	sub	sp, #8
   176f4:	af00      	add	r7, sp, #0
   176f6:	0002      	movs	r2, r0
   176f8:	1dfb      	adds	r3, r7, #7
   176fa:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,false);
   176fc:	2100      	movs	r1, #0
   176fe:	2014      	movs	r0, #20
   17700:	4b0b      	ldr	r3, [pc, #44]	; (17730 <LCD_command+0x40>)
   17702:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   17704:	490b      	ldr	r1, [pc, #44]	; (17734 <LCD_command+0x44>)
   17706:	4b0c      	ldr	r3, [pc, #48]	; (17738 <LCD_command+0x48>)
   17708:	2201      	movs	r2, #1
   1770a:	0018      	movs	r0, r3
   1770c:	4b0b      	ldr	r3, [pc, #44]	; (1773c <LCD_command+0x4c>)
   1770e:	4798      	blx	r3
	spi_io(com);
   17710:	1dfb      	adds	r3, r7, #7
   17712:	781b      	ldrb	r3, [r3, #0]
   17714:	0018      	movs	r0, r3
   17716:	4b0a      	ldr	r3, [pc, #40]	; (17740 <LCD_command+0x50>)
   17718:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   1771a:	4906      	ldr	r1, [pc, #24]	; (17734 <LCD_command+0x44>)
   1771c:	4b06      	ldr	r3, [pc, #24]	; (17738 <LCD_command+0x48>)
   1771e:	2200      	movs	r2, #0
   17720:	0018      	movs	r0, r3
   17722:	4b06      	ldr	r3, [pc, #24]	; (1773c <LCD_command+0x4c>)
   17724:	4798      	blx	r3
}
   17726:	46c0      	nop			; (mov r8, r8)
   17728:	46bd      	mov	sp, r7
   1772a:	b002      	add	sp, #8
   1772c:	bd80      	pop	{r7, pc}
   1772e:	46c0      	nop			; (mov r8, r8)
   17730:	00017225 	.word	0x00017225
   17734:	2000471c 	.word	0x2000471c
   17738:	20004710 	.word	0x20004710
   1773c:	0002a785 	.word	0x0002a785
   17740:	000176c5 	.word	0x000176c5

00017744 <LCD_data>:

void LCD_data(unsigned char dat) {
   17744:	b580      	push	{r7, lr}
   17746:	b082      	sub	sp, #8
   17748:	af00      	add	r7, sp, #0
   1774a:	0002      	movs	r2, r0
   1774c:	1dfb      	adds	r3, r7, #7
   1774e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   17750:	2101      	movs	r1, #1
   17752:	2014      	movs	r0, #20
   17754:	4b0b      	ldr	r3, [pc, #44]	; (17784 <LCD_data+0x40>)
   17756:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   17758:	490b      	ldr	r1, [pc, #44]	; (17788 <LCD_data+0x44>)
   1775a:	4b0c      	ldr	r3, [pc, #48]	; (1778c <LCD_data+0x48>)
   1775c:	2201      	movs	r2, #1
   1775e:	0018      	movs	r0, r3
   17760:	4b0b      	ldr	r3, [pc, #44]	; (17790 <LCD_data+0x4c>)
   17762:	4798      	blx	r3
	spi_io(dat);
   17764:	1dfb      	adds	r3, r7, #7
   17766:	781b      	ldrb	r3, [r3, #0]
   17768:	0018      	movs	r0, r3
   1776a:	4b0a      	ldr	r3, [pc, #40]	; (17794 <LCD_data+0x50>)
   1776c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   1776e:	4906      	ldr	r1, [pc, #24]	; (17788 <LCD_data+0x44>)
   17770:	4b06      	ldr	r3, [pc, #24]	; (1778c <LCD_data+0x48>)
   17772:	2200      	movs	r2, #0
   17774:	0018      	movs	r0, r3
   17776:	4b06      	ldr	r3, [pc, #24]	; (17790 <LCD_data+0x4c>)
   17778:	4798      	blx	r3
}
   1777a:	46c0      	nop			; (mov r8, r8)
   1777c:	46bd      	mov	sp, r7
   1777e:	b002      	add	sp, #8
   17780:	bd80      	pop	{r7, pc}
   17782:	46c0      	nop			; (mov r8, r8)
   17784:	00017225 	.word	0x00017225
   17788:	2000471c 	.word	0x2000471c
   1778c:	20004710 	.word	0x20004710
   17790:	0002a785 	.word	0x0002a785
   17794:	000176c5 	.word	0x000176c5

00017798 <LCD_data16>:

void LCD_data16(unsigned short dat) {
   17798:	b580      	push	{r7, lr}
   1779a:	b082      	sub	sp, #8
   1779c:	af00      	add	r7, sp, #0
   1779e:	0002      	movs	r2, r0
   177a0:	1dbb      	adds	r3, r7, #6
   177a2:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   177a4:	2101      	movs	r1, #1
   177a6:	2014      	movs	r0, #20
   177a8:	4b0f      	ldr	r3, [pc, #60]	; (177e8 <LCD_data16+0x50>)
   177aa:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   177ac:	490f      	ldr	r1, [pc, #60]	; (177ec <LCD_data16+0x54>)
   177ae:	4b10      	ldr	r3, [pc, #64]	; (177f0 <LCD_data16+0x58>)
   177b0:	2201      	movs	r2, #1
   177b2:	0018      	movs	r0, r3
   177b4:	4b0f      	ldr	r3, [pc, #60]	; (177f4 <LCD_data16+0x5c>)
   177b6:	4798      	blx	r3
	spi_io(dat>>8);
   177b8:	1dbb      	adds	r3, r7, #6
   177ba:	881b      	ldrh	r3, [r3, #0]
   177bc:	0a1b      	lsrs	r3, r3, #8
   177be:	b29b      	uxth	r3, r3
   177c0:	b2db      	uxtb	r3, r3
   177c2:	0018      	movs	r0, r3
   177c4:	4b0c      	ldr	r3, [pc, #48]	; (177f8 <LCD_data16+0x60>)
   177c6:	4798      	blx	r3
	spi_io(dat);
   177c8:	1dbb      	adds	r3, r7, #6
   177ca:	881b      	ldrh	r3, [r3, #0]
   177cc:	b2db      	uxtb	r3, r3
   177ce:	0018      	movs	r0, r3
   177d0:	4b09      	ldr	r3, [pc, #36]	; (177f8 <LCD_data16+0x60>)
   177d2:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   177d4:	4905      	ldr	r1, [pc, #20]	; (177ec <LCD_data16+0x54>)
   177d6:	4b06      	ldr	r3, [pc, #24]	; (177f0 <LCD_data16+0x58>)
   177d8:	2200      	movs	r2, #0
   177da:	0018      	movs	r0, r3
   177dc:	4b05      	ldr	r3, [pc, #20]	; (177f4 <LCD_data16+0x5c>)
   177de:	4798      	blx	r3
}
   177e0:	46c0      	nop			; (mov r8, r8)
   177e2:	46bd      	mov	sp, r7
   177e4:	b002      	add	sp, #8
   177e6:	bd80      	pop	{r7, pc}
   177e8:	00017225 	.word	0x00017225
   177ec:	2000471c 	.word	0x2000471c
   177f0:	20004710 	.word	0x20004710
   177f4:	0002a785 	.word	0x0002a785
   177f8:	000176c5 	.word	0x000176c5

000177fc <LCD_init>:




void LCD_init() {
   177fc:	b580      	push	{r7, lr}
   177fe:	af00      	add	r7, sp, #0
	configure_spi_master();
   17800:	4baa      	ldr	r3, [pc, #680]	; (17aac <LCD_init+0x2b0>)
   17802:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   17804:	49aa      	ldr	r1, [pc, #680]	; (17ab0 <LCD_init+0x2b4>)
   17806:	4bab      	ldr	r3, [pc, #684]	; (17ab4 <LCD_init+0x2b8>)
   17808:	2200      	movs	r2, #0
   1780a:	0018      	movs	r0, r3
   1780c:	4baa      	ldr	r3, [pc, #680]	; (17ab8 <LCD_init+0x2bc>)
   1780e:	4798      	blx	r3
	delay_ms(10000);
   17810:	4baa      	ldr	r3, [pc, #680]	; (17abc <LCD_init+0x2c0>)
   17812:	0018      	movs	r0, r3
   17814:	4baa      	ldr	r3, [pc, #680]	; (17ac0 <LCD_init+0x2c4>)
   17816:	4798      	blx	r3
  LCD_command(ST7735_SWRESET);//software reset
   17818:	2001      	movs	r0, #1
   1781a:	4baa      	ldr	r3, [pc, #680]	; (17ac4 <LCD_init+0x2c8>)
   1781c:	4798      	blx	r3
  delay_ms(50);
   1781e:	2032      	movs	r0, #50	; 0x32
   17820:	4ba7      	ldr	r3, [pc, #668]	; (17ac0 <LCD_init+0x2c4>)
   17822:	4798      	blx	r3
	LCD_command(ST7735_SLPOUT);//exit sleep
   17824:	2011      	movs	r0, #17
   17826:	4ba7      	ldr	r3, [pc, #668]	; (17ac4 <LCD_init+0x2c8>)
   17828:	4798      	blx	r3
	delay_ms(5);
   1782a:	2005      	movs	r0, #5
   1782c:	4ba4      	ldr	r3, [pc, #656]	; (17ac0 <LCD_init+0x2c4>)
   1782e:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR1);//Frame Rate Control (In normal mode/Full colors)
   17830:	20b1      	movs	r0, #177	; 0xb1
   17832:	4ba4      	ldr	r3, [pc, #656]	; (17ac4 <LCD_init+0x2c8>)
   17834:	4798      	blx	r3
	LCD_data(0x01);
   17836:	2001      	movs	r0, #1
   17838:	4ba3      	ldr	r3, [pc, #652]	; (17ac8 <LCD_init+0x2cc>)
   1783a:	4798      	blx	r3
	LCD_data(0x2C);
   1783c:	202c      	movs	r0, #44	; 0x2c
   1783e:	4ba2      	ldr	r3, [pc, #648]	; (17ac8 <LCD_init+0x2cc>)
   17840:	4798      	blx	r3
	LCD_data(0x2D);
   17842:	202d      	movs	r0, #45	; 0x2d
   17844:	4ba0      	ldr	r3, [pc, #640]	; (17ac8 <LCD_init+0x2cc>)
   17846:	4798      	blx	r3
	delay_ms(1);
   17848:	2001      	movs	r0, #1
   1784a:	4b9d      	ldr	r3, [pc, #628]	; (17ac0 <LCD_init+0x2c4>)
   1784c:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR2);//Frame Rate Control (In normal mode/Full colors)
   1784e:	20b2      	movs	r0, #178	; 0xb2
   17850:	4b9c      	ldr	r3, [pc, #624]	; (17ac4 <LCD_init+0x2c8>)
   17852:	4798      	blx	r3
	LCD_data(0x01);
   17854:	2001      	movs	r0, #1
   17856:	4b9c      	ldr	r3, [pc, #624]	; (17ac8 <LCD_init+0x2cc>)
   17858:	4798      	blx	r3
	LCD_data(0x2C);
   1785a:	202c      	movs	r0, #44	; 0x2c
   1785c:	4b9a      	ldr	r3, [pc, #616]	; (17ac8 <LCD_init+0x2cc>)
   1785e:	4798      	blx	r3
	LCD_data(0x2D);
   17860:	202d      	movs	r0, #45	; 0x2d
   17862:	4b99      	ldr	r3, [pc, #612]	; (17ac8 <LCD_init+0x2cc>)
   17864:	4798      	blx	r3
	delay_ms(1);
   17866:	2001      	movs	r0, #1
   17868:	4b95      	ldr	r3, [pc, #596]	; (17ac0 <LCD_init+0x2c4>)
   1786a:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR3);//Frame Rate Control (In normal mode/Full colors)
   1786c:	20b3      	movs	r0, #179	; 0xb3
   1786e:	4b95      	ldr	r3, [pc, #596]	; (17ac4 <LCD_init+0x2c8>)
   17870:	4798      	blx	r3
	LCD_data(0x01);
   17872:	2001      	movs	r0, #1
   17874:	4b94      	ldr	r3, [pc, #592]	; (17ac8 <LCD_init+0x2cc>)
   17876:	4798      	blx	r3
	LCD_data(0x2C);
   17878:	202c      	movs	r0, #44	; 0x2c
   1787a:	4b93      	ldr	r3, [pc, #588]	; (17ac8 <LCD_init+0x2cc>)
   1787c:	4798      	blx	r3
	LCD_data(0x2D);
   1787e:	202d      	movs	r0, #45	; 0x2d
   17880:	4b91      	ldr	r3, [pc, #580]	; (17ac8 <LCD_init+0x2cc>)
   17882:	4798      	blx	r3
	LCD_data(0x01);
   17884:	2001      	movs	r0, #1
   17886:	4b90      	ldr	r3, [pc, #576]	; (17ac8 <LCD_init+0x2cc>)
   17888:	4798      	blx	r3
	LCD_data(0x2C);
   1788a:	202c      	movs	r0, #44	; 0x2c
   1788c:	4b8e      	ldr	r3, [pc, #568]	; (17ac8 <LCD_init+0x2cc>)
   1788e:	4798      	blx	r3
	LCD_data(0x2D);
   17890:	202d      	movs	r0, #45	; 0x2d
   17892:	4b8d      	ldr	r3, [pc, #564]	; (17ac8 <LCD_init+0x2cc>)
   17894:	4798      	blx	r3
	delay_ms(1);
   17896:	2001      	movs	r0, #1
   17898:	4b89      	ldr	r3, [pc, #548]	; (17ac0 <LCD_init+0x2c4>)
   1789a:	4798      	blx	r3
	LCD_command(ST7735_INVCTR);//display inversion
   1789c:	20b4      	movs	r0, #180	; 0xb4
   1789e:	4b89      	ldr	r3, [pc, #548]	; (17ac4 <LCD_init+0x2c8>)
   178a0:	4798      	blx	r3
	LCD_data(0x07);
   178a2:	2007      	movs	r0, #7
   178a4:	4b88      	ldr	r3, [pc, #544]	; (17ac8 <LCD_init+0x2cc>)
   178a6:	4798      	blx	r3
	delay_ms(1);
   178a8:	2001      	movs	r0, #1
   178aa:	4b85      	ldr	r3, [pc, #532]	; (17ac0 <LCD_init+0x2c4>)
   178ac:	4798      	blx	r3
	LCD_command(ST7735_PWCTR1);
   178ae:	20c0      	movs	r0, #192	; 0xc0
   178b0:	4b84      	ldr	r3, [pc, #528]	; (17ac4 <LCD_init+0x2c8>)
   178b2:	4798      	blx	r3
	LCD_data(0x0A);//4.30 - 0x0A
   178b4:	200a      	movs	r0, #10
   178b6:	4b84      	ldr	r3, [pc, #528]	; (17ac8 <LCD_init+0x2cc>)
   178b8:	4798      	blx	r3
	LCD_data(0x02);//0x05
   178ba:	2002      	movs	r0, #2
   178bc:	4b82      	ldr	r3, [pc, #520]	; (17ac8 <LCD_init+0x2cc>)
   178be:	4798      	blx	r3
	LCD_data(0x84);//added auto mode
   178c0:	2084      	movs	r0, #132	; 0x84
   178c2:	4b81      	ldr	r3, [pc, #516]	; (17ac8 <LCD_init+0x2cc>)
   178c4:	4798      	blx	r3
	delay_ms(1);
   178c6:	2001      	movs	r0, #1
   178c8:	4b7d      	ldr	r3, [pc, #500]	; (17ac0 <LCD_init+0x2c4>)
   178ca:	4798      	blx	r3
	LCD_command(ST7735_PWCTR2);
   178cc:	20c1      	movs	r0, #193	; 0xc1
   178ce:	4b7d      	ldr	r3, [pc, #500]	; (17ac4 <LCD_init+0x2c8>)
   178d0:	4798      	blx	r3
	LCD_data(0xC5);
   178d2:	20c5      	movs	r0, #197	; 0xc5
   178d4:	4b7c      	ldr	r3, [pc, #496]	; (17ac8 <LCD_init+0x2cc>)
   178d6:	4798      	blx	r3
	delay_ms(1);
   178d8:	2001      	movs	r0, #1
   178da:	4b79      	ldr	r3, [pc, #484]	; (17ac0 <LCD_init+0x2c4>)
   178dc:	4798      	blx	r3
	LCD_command( ST7735_PWCTR3);
   178de:	20c2      	movs	r0, #194	; 0xc2
   178e0:	4b78      	ldr	r3, [pc, #480]	; (17ac4 <LCD_init+0x2c8>)
   178e2:	4798      	blx	r3
	LCD_data(0x0A);
   178e4:	200a      	movs	r0, #10
   178e6:	4b78      	ldr	r3, [pc, #480]	; (17ac8 <LCD_init+0x2cc>)
   178e8:	4798      	blx	r3
	LCD_data(0x00);
   178ea:	2000      	movs	r0, #0
   178ec:	4b76      	ldr	r3, [pc, #472]	; (17ac8 <LCD_init+0x2cc>)
   178ee:	4798      	blx	r3
	delay_ms(1);
   178f0:	2001      	movs	r0, #1
   178f2:	4b73      	ldr	r3, [pc, #460]	; (17ac0 <LCD_init+0x2c4>)
   178f4:	4798      	blx	r3
	LCD_command( ST7735_PWCTR4);
   178f6:	20c3      	movs	r0, #195	; 0xc3
   178f8:	4b72      	ldr	r3, [pc, #456]	; (17ac4 <LCD_init+0x2c8>)
   178fa:	4798      	blx	r3
	LCD_data(0x8A);
   178fc:	208a      	movs	r0, #138	; 0x8a
   178fe:	4b72      	ldr	r3, [pc, #456]	; (17ac8 <LCD_init+0x2cc>)
   17900:	4798      	blx	r3
	LCD_data(0x2A);
   17902:	202a      	movs	r0, #42	; 0x2a
   17904:	4b70      	ldr	r3, [pc, #448]	; (17ac8 <LCD_init+0x2cc>)
   17906:	4798      	blx	r3
	delay_ms(1);
   17908:	2001      	movs	r0, #1
   1790a:	4b6d      	ldr	r3, [pc, #436]	; (17ac0 <LCD_init+0x2c4>)
   1790c:	4798      	blx	r3
	LCD_command( ST7735_PWCTR5);
   1790e:	20c4      	movs	r0, #196	; 0xc4
   17910:	4b6c      	ldr	r3, [pc, #432]	; (17ac4 <LCD_init+0x2c8>)
   17912:	4798      	blx	r3
	LCD_data(0x8A);
   17914:	208a      	movs	r0, #138	; 0x8a
   17916:	4b6c      	ldr	r3, [pc, #432]	; (17ac8 <LCD_init+0x2cc>)
   17918:	4798      	blx	r3
	LCD_data(0xEE);
   1791a:	20ee      	movs	r0, #238	; 0xee
   1791c:	4b6a      	ldr	r3, [pc, #424]	; (17ac8 <LCD_init+0x2cc>)
   1791e:	4798      	blx	r3
	delay_ms(1);
   17920:	2001      	movs	r0, #1
   17922:	4b67      	ldr	r3, [pc, #412]	; (17ac0 <LCD_init+0x2c4>)
   17924:	4798      	blx	r3
	LCD_command(ST7735_VMCTR1);
   17926:	20c5      	movs	r0, #197	; 0xc5
   17928:	4b66      	ldr	r3, [pc, #408]	; (17ac4 <LCD_init+0x2c8>)
   1792a:	4798      	blx	r3
	LCD_data(0x0E);
   1792c:	200e      	movs	r0, #14
   1792e:	4b66      	ldr	r3, [pc, #408]	; (17ac8 <LCD_init+0x2cc>)
   17930:	4798      	blx	r3
	delay_ms(1);
   17932:	2001      	movs	r0, #1
   17934:	4b62      	ldr	r3, [pc, #392]	; (17ac0 <LCD_init+0x2c4>)
   17936:	4798      	blx	r3
	LCD_command(ST7735_INVOFF);
   17938:	2020      	movs	r0, #32
   1793a:	4b62      	ldr	r3, [pc, #392]	; (17ac4 <LCD_init+0x2c8>)
   1793c:	4798      	blx	r3
	LCD_command(ST7735_MADCTL);
   1793e:	2036      	movs	r0, #54	; 0x36
   17940:	4b60      	ldr	r3, [pc, #384]	; (17ac4 <LCD_init+0x2c8>)
   17942:	4798      	blx	r3
	LCD_data(0xC8);
   17944:	20c8      	movs	r0, #200	; 0xc8
   17946:	4b60      	ldr	r3, [pc, #384]	; (17ac8 <LCD_init+0x2cc>)
   17948:	4798      	blx	r3
	delay_ms(1);
   1794a:	2001      	movs	r0, #1
   1794c:	4b5c      	ldr	r3, [pc, #368]	; (17ac0 <LCD_init+0x2c4>)
   1794e:	4798      	blx	r3
	LCD_command(ST7735_COLMOD);
   17950:	203a      	movs	r0, #58	; 0x3a
   17952:	4b5c      	ldr	r3, [pc, #368]	; (17ac4 <LCD_init+0x2c8>)
   17954:	4798      	blx	r3
	LCD_data(0x05);
   17956:	2005      	movs	r0, #5
   17958:	4b5b      	ldr	r3, [pc, #364]	; (17ac8 <LCD_init+0x2cc>)
   1795a:	4798      	blx	r3
	delay_ms(1);
   1795c:	2001      	movs	r0, #1
   1795e:	4b58      	ldr	r3, [pc, #352]	; (17ac0 <LCD_init+0x2c4>)
   17960:	4798      	blx	r3
	LCD_command(ST7735_CASET);
   17962:	202a      	movs	r0, #42	; 0x2a
   17964:	4b57      	ldr	r3, [pc, #348]	; (17ac4 <LCD_init+0x2c8>)
   17966:	4798      	blx	r3
	LCD_data(0x00);
   17968:	2000      	movs	r0, #0
   1796a:	4b57      	ldr	r3, [pc, #348]	; (17ac8 <LCD_init+0x2cc>)
   1796c:	4798      	blx	r3
	LCD_data(0x00);
   1796e:	2000      	movs	r0, #0
   17970:	4b55      	ldr	r3, [pc, #340]	; (17ac8 <LCD_init+0x2cc>)
   17972:	4798      	blx	r3
	LCD_data(0x00);
   17974:	2000      	movs	r0, #0
   17976:	4b54      	ldr	r3, [pc, #336]	; (17ac8 <LCD_init+0x2cc>)
   17978:	4798      	blx	r3
	LCD_data(0x7F);
   1797a:	207f      	movs	r0, #127	; 0x7f
   1797c:	4b52      	ldr	r3, [pc, #328]	; (17ac8 <LCD_init+0x2cc>)
   1797e:	4798      	blx	r3
	delay_ms(1);
   17980:	2001      	movs	r0, #1
   17982:	4b4f      	ldr	r3, [pc, #316]	; (17ac0 <LCD_init+0x2c4>)
   17984:	4798      	blx	r3
	LCD_command(ST7735_RASET);
   17986:	202b      	movs	r0, #43	; 0x2b
   17988:	4b4e      	ldr	r3, [pc, #312]	; (17ac4 <LCD_init+0x2c8>)
   1798a:	4798      	blx	r3
	LCD_data(0x00);
   1798c:	2000      	movs	r0, #0
   1798e:	4b4e      	ldr	r3, [pc, #312]	; (17ac8 <LCD_init+0x2cc>)
   17990:	4798      	blx	r3
	LCD_data(0x00);
   17992:	2000      	movs	r0, #0
   17994:	4b4c      	ldr	r3, [pc, #304]	; (17ac8 <LCD_init+0x2cc>)
   17996:	4798      	blx	r3
	LCD_data(0x00);
   17998:	2000      	movs	r0, #0
   1799a:	4b4b      	ldr	r3, [pc, #300]	; (17ac8 <LCD_init+0x2cc>)
   1799c:	4798      	blx	r3
	LCD_data(0x9F);
   1799e:	209f      	movs	r0, #159	; 0x9f
   179a0:	4b49      	ldr	r3, [pc, #292]	; (17ac8 <LCD_init+0x2cc>)
   179a2:	4798      	blx	r3
	delay_ms(1);
   179a4:	2001      	movs	r0, #1
   179a6:	4b46      	ldr	r3, [pc, #280]	; (17ac0 <LCD_init+0x2c4>)
   179a8:	4798      	blx	r3
	LCD_command(ST7735_GMCTRP1);
   179aa:	20e0      	movs	r0, #224	; 0xe0
   179ac:	4b45      	ldr	r3, [pc, #276]	; (17ac4 <LCD_init+0x2c8>)
   179ae:	4798      	blx	r3
	LCD_data(0x02);
   179b0:	2002      	movs	r0, #2
   179b2:	4b45      	ldr	r3, [pc, #276]	; (17ac8 <LCD_init+0x2cc>)
   179b4:	4798      	blx	r3
	LCD_data(0x1C);
   179b6:	201c      	movs	r0, #28
   179b8:	4b43      	ldr	r3, [pc, #268]	; (17ac8 <LCD_init+0x2cc>)
   179ba:	4798      	blx	r3
	LCD_data(0x07);
   179bc:	2007      	movs	r0, #7
   179be:	4b42      	ldr	r3, [pc, #264]	; (17ac8 <LCD_init+0x2cc>)
   179c0:	4798      	blx	r3
	LCD_data(0x12);
   179c2:	2012      	movs	r0, #18
   179c4:	4b40      	ldr	r3, [pc, #256]	; (17ac8 <LCD_init+0x2cc>)
   179c6:	4798      	blx	r3
	LCD_data(0x37);
   179c8:	2037      	movs	r0, #55	; 0x37
   179ca:	4b3f      	ldr	r3, [pc, #252]	; (17ac8 <LCD_init+0x2cc>)
   179cc:	4798      	blx	r3
	LCD_data(0x32);
   179ce:	2032      	movs	r0, #50	; 0x32
   179d0:	4b3d      	ldr	r3, [pc, #244]	; (17ac8 <LCD_init+0x2cc>)
   179d2:	4798      	blx	r3
	LCD_data(0x29);
   179d4:	2029      	movs	r0, #41	; 0x29
   179d6:	4b3c      	ldr	r3, [pc, #240]	; (17ac8 <LCD_init+0x2cc>)
   179d8:	4798      	blx	r3
	LCD_data(0x2D);
   179da:	202d      	movs	r0, #45	; 0x2d
   179dc:	4b3a      	ldr	r3, [pc, #232]	; (17ac8 <LCD_init+0x2cc>)
   179de:	4798      	blx	r3
	LCD_data(0x29);
   179e0:	2029      	movs	r0, #41	; 0x29
   179e2:	4b39      	ldr	r3, [pc, #228]	; (17ac8 <LCD_init+0x2cc>)
   179e4:	4798      	blx	r3
	LCD_data(0x25);
   179e6:	2025      	movs	r0, #37	; 0x25
   179e8:	4b37      	ldr	r3, [pc, #220]	; (17ac8 <LCD_init+0x2cc>)
   179ea:	4798      	blx	r3
	LCD_data(0x2B);
   179ec:	202b      	movs	r0, #43	; 0x2b
   179ee:	4b36      	ldr	r3, [pc, #216]	; (17ac8 <LCD_init+0x2cc>)
   179f0:	4798      	blx	r3
	LCD_data(0x39);
   179f2:	2039      	movs	r0, #57	; 0x39
   179f4:	4b34      	ldr	r3, [pc, #208]	; (17ac8 <LCD_init+0x2cc>)
   179f6:	4798      	blx	r3
	LCD_data(0x00);
   179f8:	2000      	movs	r0, #0
   179fa:	4b33      	ldr	r3, [pc, #204]	; (17ac8 <LCD_init+0x2cc>)
   179fc:	4798      	blx	r3
	LCD_data(0x01);
   179fe:	2001      	movs	r0, #1
   17a00:	4b31      	ldr	r3, [pc, #196]	; (17ac8 <LCD_init+0x2cc>)
   17a02:	4798      	blx	r3
	LCD_data(0x03);
   17a04:	2003      	movs	r0, #3
   17a06:	4b30      	ldr	r3, [pc, #192]	; (17ac8 <LCD_init+0x2cc>)
   17a08:	4798      	blx	r3
	LCD_data(0x10);
   17a0a:	2010      	movs	r0, #16
   17a0c:	4b2e      	ldr	r3, [pc, #184]	; (17ac8 <LCD_init+0x2cc>)
   17a0e:	4798      	blx	r3
	delay_ms(1);
   17a10:	2001      	movs	r0, #1
   17a12:	4b2b      	ldr	r3, [pc, #172]	; (17ac0 <LCD_init+0x2c4>)
   17a14:	4798      	blx	r3
	LCD_command(ST7735_GMCTRN1);
   17a16:	20e1      	movs	r0, #225	; 0xe1
   17a18:	4b2a      	ldr	r3, [pc, #168]	; (17ac4 <LCD_init+0x2c8>)
   17a1a:	4798      	blx	r3
	LCD_data(0x03);
   17a1c:	2003      	movs	r0, #3
   17a1e:	4b2a      	ldr	r3, [pc, #168]	; (17ac8 <LCD_init+0x2cc>)
   17a20:	4798      	blx	r3
	LCD_data(0x1D);
   17a22:	201d      	movs	r0, #29
   17a24:	4b28      	ldr	r3, [pc, #160]	; (17ac8 <LCD_init+0x2cc>)
   17a26:	4798      	blx	r3
	LCD_data(0x07);
   17a28:	2007      	movs	r0, #7
   17a2a:	4b27      	ldr	r3, [pc, #156]	; (17ac8 <LCD_init+0x2cc>)
   17a2c:	4798      	blx	r3
	LCD_data(0x06);
   17a2e:	2006      	movs	r0, #6
   17a30:	4b25      	ldr	r3, [pc, #148]	; (17ac8 <LCD_init+0x2cc>)
   17a32:	4798      	blx	r3
	LCD_data(0x2E);
   17a34:	202e      	movs	r0, #46	; 0x2e
   17a36:	4b24      	ldr	r3, [pc, #144]	; (17ac8 <LCD_init+0x2cc>)
   17a38:	4798      	blx	r3
	LCD_data(0x2C);
   17a3a:	202c      	movs	r0, #44	; 0x2c
   17a3c:	4b22      	ldr	r3, [pc, #136]	; (17ac8 <LCD_init+0x2cc>)
   17a3e:	4798      	blx	r3
	LCD_data(0x29);
   17a40:	2029      	movs	r0, #41	; 0x29
   17a42:	4b21      	ldr	r3, [pc, #132]	; (17ac8 <LCD_init+0x2cc>)
   17a44:	4798      	blx	r3
	LCD_data(0x2D);
   17a46:	202d      	movs	r0, #45	; 0x2d
   17a48:	4b1f      	ldr	r3, [pc, #124]	; (17ac8 <LCD_init+0x2cc>)
   17a4a:	4798      	blx	r3
	LCD_data(0x2E);
   17a4c:	202e      	movs	r0, #46	; 0x2e
   17a4e:	4b1e      	ldr	r3, [pc, #120]	; (17ac8 <LCD_init+0x2cc>)
   17a50:	4798      	blx	r3
	LCD_data(0x2E);
   17a52:	202e      	movs	r0, #46	; 0x2e
   17a54:	4b1c      	ldr	r3, [pc, #112]	; (17ac8 <LCD_init+0x2cc>)
   17a56:	4798      	blx	r3
	LCD_data(0x37);
   17a58:	2037      	movs	r0, #55	; 0x37
   17a5a:	4b1b      	ldr	r3, [pc, #108]	; (17ac8 <LCD_init+0x2cc>)
   17a5c:	4798      	blx	r3
	LCD_data(0x3F);
   17a5e:	203f      	movs	r0, #63	; 0x3f
   17a60:	4b19      	ldr	r3, [pc, #100]	; (17ac8 <LCD_init+0x2cc>)
   17a62:	4798      	blx	r3
	LCD_data(0x00);
   17a64:	2000      	movs	r0, #0
   17a66:	4b18      	ldr	r3, [pc, #96]	; (17ac8 <LCD_init+0x2cc>)
   17a68:	4798      	blx	r3
	LCD_data(0x00);
   17a6a:	2000      	movs	r0, #0
   17a6c:	4b16      	ldr	r3, [pc, #88]	; (17ac8 <LCD_init+0x2cc>)
   17a6e:	4798      	blx	r3
	LCD_data(0x02);
   17a70:	2002      	movs	r0, #2
   17a72:	4b15      	ldr	r3, [pc, #84]	; (17ac8 <LCD_init+0x2cc>)
   17a74:	4798      	blx	r3
	LCD_data(0x10);
   17a76:	2010      	movs	r0, #16
   17a78:	4b13      	ldr	r3, [pc, #76]	; (17ac8 <LCD_init+0x2cc>)
   17a7a:	4798      	blx	r3
	delay_ms(1);
   17a7c:	2001      	movs	r0, #1
   17a7e:	4b10      	ldr	r3, [pc, #64]	; (17ac0 <LCD_init+0x2c4>)
   17a80:	4798      	blx	r3
	LCD_command(ST7735_NORON);
   17a82:	2013      	movs	r0, #19
   17a84:	4b0f      	ldr	r3, [pc, #60]	; (17ac4 <LCD_init+0x2c8>)
   17a86:	4798      	blx	r3
	delay_ms(10);
   17a88:	200a      	movs	r0, #10
   17a8a:	4b0d      	ldr	r3, [pc, #52]	; (17ac0 <LCD_init+0x2c4>)
   17a8c:	4798      	blx	r3
	LCD_command(ST7735_DISPON);
   17a8e:	2029      	movs	r0, #41	; 0x29
   17a90:	4b0c      	ldr	r3, [pc, #48]	; (17ac4 <LCD_init+0x2c8>)
   17a92:	4798      	blx	r3
	delay_ms(100);
   17a94:	2064      	movs	r0, #100	; 0x64
   17a96:	4b0a      	ldr	r3, [pc, #40]	; (17ac0 <LCD_init+0x2c4>)
   17a98:	4798      	blx	r3
	LCD_command(ST7735_MADCTL); // rotation
   17a9a:	2036      	movs	r0, #54	; 0x36
   17a9c:	4b09      	ldr	r3, [pc, #36]	; (17ac4 <LCD_init+0x2c8>)
   17a9e:	4798      	blx	r3
    LCD_data(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
   17aa0:	20a0      	movs	r0, #160	; 0xa0
   17aa2:	4b09      	ldr	r3, [pc, #36]	; (17ac8 <LCD_init+0x2cc>)
   17aa4:	4798      	blx	r3
}
   17aa6:	46c0      	nop			; (mov r8, r8)
   17aa8:	46bd      	mov	sp, r7
   17aaa:	bd80      	pop	{r7, pc}
   17aac:	0001761d 	.word	0x0001761d
   17ab0:	2000471c 	.word	0x2000471c
   17ab4:	20004710 	.word	0x20004710
   17ab8:	0002a785 	.word	0x0002a785
   17abc:	00002710 	.word	0x00002710
   17ac0:	00022575 	.word	0x00022575
   17ac4:	000176f1 	.word	0x000176f1
   17ac8:	00017745 	.word	0x00017745

00017acc <LCD_drawPixel>:

void LCD_drawPixel(unsigned short x, unsigned short y, unsigned short color) {
   17acc:	b590      	push	{r4, r7, lr}
   17ace:	b083      	sub	sp, #12
   17ad0:	af00      	add	r7, sp, #0
   17ad2:	0004      	movs	r4, r0
   17ad4:	0008      	movs	r0, r1
   17ad6:	0011      	movs	r1, r2
   17ad8:	1dbb      	adds	r3, r7, #6
   17ada:	1c22      	adds	r2, r4, #0
   17adc:	801a      	strh	r2, [r3, #0]
   17ade:	1d3b      	adds	r3, r7, #4
   17ae0:	1c02      	adds	r2, r0, #0
   17ae2:	801a      	strh	r2, [r3, #0]
   17ae4:	1cbb      	adds	r3, r7, #2
   17ae6:	1c0a      	adds	r2, r1, #0
   17ae8:	801a      	strh	r2, [r3, #0]
  // check boundary
  LCD_setAddr(x,y,x+1,y+1);
   17aea:	1dbb      	adds	r3, r7, #6
   17aec:	881b      	ldrh	r3, [r3, #0]
   17aee:	3301      	adds	r3, #1
   17af0:	b29a      	uxth	r2, r3
   17af2:	1d3b      	adds	r3, r7, #4
   17af4:	881b      	ldrh	r3, [r3, #0]
   17af6:	3301      	adds	r3, #1
   17af8:	b29c      	uxth	r4, r3
   17afa:	1d3b      	adds	r3, r7, #4
   17afc:	8819      	ldrh	r1, [r3, #0]
   17afe:	1dbb      	adds	r3, r7, #6
   17b00:	8818      	ldrh	r0, [r3, #0]
   17b02:	0023      	movs	r3, r4
   17b04:	4c05      	ldr	r4, [pc, #20]	; (17b1c <LCD_drawPixel+0x50>)
   17b06:	47a0      	blx	r4
  LCD_data16(color);
   17b08:	1cbb      	adds	r3, r7, #2
   17b0a:	881b      	ldrh	r3, [r3, #0]
   17b0c:	0018      	movs	r0, r3
   17b0e:	4b04      	ldr	r3, [pc, #16]	; (17b20 <LCD_drawPixel+0x54>)
   17b10:	4798      	blx	r3
}
   17b12:	46c0      	nop			; (mov r8, r8)
   17b14:	46bd      	mov	sp, r7
   17b16:	b003      	add	sp, #12
   17b18:	bd90      	pop	{r4, r7, pc}
   17b1a:	46c0      	nop			; (mov r8, r8)
   17b1c:	00017b25 	.word	0x00017b25
   17b20:	00017799 	.word	0x00017799

00017b24 <LCD_setAddr>:

void LCD_setAddr(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1) {
   17b24:	b5b0      	push	{r4, r5, r7, lr}
   17b26:	b082      	sub	sp, #8
   17b28:	af00      	add	r7, sp, #0
   17b2a:	0005      	movs	r5, r0
   17b2c:	000c      	movs	r4, r1
   17b2e:	0010      	movs	r0, r2
   17b30:	0019      	movs	r1, r3
   17b32:	1dbb      	adds	r3, r7, #6
   17b34:	1c2a      	adds	r2, r5, #0
   17b36:	801a      	strh	r2, [r3, #0]
   17b38:	1d3b      	adds	r3, r7, #4
   17b3a:	1c22      	adds	r2, r4, #0
   17b3c:	801a      	strh	r2, [r3, #0]
   17b3e:	1cbb      	adds	r3, r7, #2
   17b40:	1c02      	adds	r2, r0, #0
   17b42:	801a      	strh	r2, [r3, #0]
   17b44:	003b      	movs	r3, r7
   17b46:	1c0a      	adds	r2, r1, #0
   17b48:	801a      	strh	r2, [r3, #0]
  LCD_command(ST7735_CASET); // Column
   17b4a:	202a      	movs	r0, #42	; 0x2a
   17b4c:	4b0f      	ldr	r3, [pc, #60]	; (17b8c <LCD_setAddr+0x68>)
   17b4e:	4798      	blx	r3
  LCD_data16(x0);
   17b50:	1dbb      	adds	r3, r7, #6
   17b52:	881b      	ldrh	r3, [r3, #0]
   17b54:	0018      	movs	r0, r3
   17b56:	4b0e      	ldr	r3, [pc, #56]	; (17b90 <LCD_setAddr+0x6c>)
   17b58:	4798      	blx	r3
	LCD_data16(x1);
   17b5a:	1cbb      	adds	r3, r7, #2
   17b5c:	881b      	ldrh	r3, [r3, #0]
   17b5e:	0018      	movs	r0, r3
   17b60:	4b0b      	ldr	r3, [pc, #44]	; (17b90 <LCD_setAddr+0x6c>)
   17b62:	4798      	blx	r3
	LCD_command(ST7735_RASET); // Page
   17b64:	202b      	movs	r0, #43	; 0x2b
   17b66:	4b09      	ldr	r3, [pc, #36]	; (17b8c <LCD_setAddr+0x68>)
   17b68:	4798      	blx	r3
	LCD_data16(y0);
   17b6a:	1d3b      	adds	r3, r7, #4
   17b6c:	881b      	ldrh	r3, [r3, #0]
   17b6e:	0018      	movs	r0, r3
   17b70:	4b07      	ldr	r3, [pc, #28]	; (17b90 <LCD_setAddr+0x6c>)
   17b72:	4798      	blx	r3
	LCD_data16(y1);
   17b74:	003b      	movs	r3, r7
   17b76:	881b      	ldrh	r3, [r3, #0]
   17b78:	0018      	movs	r0, r3
   17b7a:	4b05      	ldr	r3, [pc, #20]	; (17b90 <LCD_setAddr+0x6c>)
   17b7c:	4798      	blx	r3
	LCD_command(ST7735_RAMWR); // Into RAM
   17b7e:	202c      	movs	r0, #44	; 0x2c
   17b80:	4b02      	ldr	r3, [pc, #8]	; (17b8c <LCD_setAddr+0x68>)
   17b82:	4798      	blx	r3
}
   17b84:	46c0      	nop			; (mov r8, r8)
   17b86:	46bd      	mov	sp, r7
   17b88:	b002      	add	sp, #8
   17b8a:	bdb0      	pop	{r4, r5, r7, pc}
   17b8c:	000176f1 	.word	0x000176f1
   17b90:	00017799 	.word	0x00017799

00017b94 <LCD_clearScreen>:

void LCD_clearScreen(unsigned short color) {
   17b94:	b590      	push	{r4, r7, lr}
   17b96:	b085      	sub	sp, #20
   17b98:	af00      	add	r7, sp, #0
   17b9a:	0002      	movs	r2, r0
   17b9c:	1dbb      	adds	r3, r7, #6
   17b9e:	801a      	strh	r2, [r3, #0]
  int i;
  LCD_setAddr(0,0,_GRAMWIDTH,_GRAMHEIGH);
   17ba0:	2380      	movs	r3, #128	; 0x80
   17ba2:	22a0      	movs	r2, #160	; 0xa0
   17ba4:	2100      	movs	r1, #0
   17ba6:	2000      	movs	r0, #0
   17ba8:	4c0a      	ldr	r4, [pc, #40]	; (17bd4 <LCD_clearScreen+0x40>)
   17baa:	47a0      	blx	r4
	for (i = 0;i < _GRAMSIZE; i++){
   17bac:	2300      	movs	r3, #0
   17bae:	60fb      	str	r3, [r7, #12]
   17bb0:	e007      	b.n	17bc2 <LCD_clearScreen+0x2e>
		LCD_data16(color);
   17bb2:	1dbb      	adds	r3, r7, #6
   17bb4:	881b      	ldrh	r3, [r3, #0]
   17bb6:	0018      	movs	r0, r3
   17bb8:	4b07      	ldr	r3, [pc, #28]	; (17bd8 <LCD_clearScreen+0x44>)
   17bba:	4798      	blx	r3
	for (i = 0;i < _GRAMSIZE; i++){
   17bbc:	68fb      	ldr	r3, [r7, #12]
   17bbe:	3301      	adds	r3, #1
   17bc0:	60fb      	str	r3, [r7, #12]
   17bc2:	68fb      	ldr	r3, [r7, #12]
   17bc4:	4a05      	ldr	r2, [pc, #20]	; (17bdc <LCD_clearScreen+0x48>)
   17bc6:	4293      	cmp	r3, r2
   17bc8:	ddf3      	ble.n	17bb2 <LCD_clearScreen+0x1e>
	}
}
   17bca:	46c0      	nop			; (mov r8, r8)
   17bcc:	46bd      	mov	sp, r7
   17bce:	b005      	add	sp, #20
   17bd0:	bd90      	pop	{r4, r7, pc}
   17bd2:	46c0      	nop			; (mov r8, r8)
   17bd4:	00017b25 	.word	0x00017b25
   17bd8:	00017799 	.word	0x00017799
   17bdc:	00004fff 	.word	0x00004fff

00017be0 <LCD_menu>:
			}
		}
}*/


void LCD_menu(bool wifistatus){
   17be0:	b590      	push	{r4, r7, lr}
   17be2:	b08f      	sub	sp, #60	; 0x3c
   17be4:	af02      	add	r7, sp, #8
   17be6:	0002      	movs	r2, r0
   17be8:	1dfb      	adds	r3, r7, #7
   17bea:	701a      	strb	r2, [r3, #0]
	//LCD_clearScreen(WHITE);
	if(wifistatus)
   17bec:	1dfb      	adds	r3, r7, #7
   17bee:	781b      	ldrb	r3, [r3, #0]
   17bf0:	2b00      	cmp	r3, #0
   17bf2:	d009      	beq.n	17c08 <LCD_menu+0x28>
	drawString(20,30,"WIFI is Connected!    ",BLUE,WHITE);
   17bf4:	4a5a      	ldr	r2, [pc, #360]	; (17d60 <LCD_menu+0x180>)
   17bf6:	2301      	movs	r3, #1
   17bf8:	425b      	negs	r3, r3
   17bfa:	9300      	str	r3, [sp, #0]
   17bfc:	231f      	movs	r3, #31
   17bfe:	211e      	movs	r1, #30
   17c00:	2014      	movs	r0, #20
   17c02:	4c58      	ldr	r4, [pc, #352]	; (17d64 <LCD_menu+0x184>)
   17c04:	47a0      	blx	r4
   17c06:	e008      	b.n	17c1a <LCD_menu+0x3a>
	else
	drawString(20,30,"Wifi is not Connected!",BLUE,WHITE);
   17c08:	4a57      	ldr	r2, [pc, #348]	; (17d68 <LCD_menu+0x188>)
   17c0a:	2301      	movs	r3, #1
   17c0c:	425b      	negs	r3, r3
   17c0e:	9300      	str	r3, [sp, #0]
   17c10:	231f      	movs	r3, #31
   17c12:	211e      	movs	r1, #30
   17c14:	2014      	movs	r0, #20
   17c16:	4c53      	ldr	r4, [pc, #332]	; (17d64 <LCD_menu+0x184>)
   17c18:	47a0      	blx	r4
	drawString(20,40,"ESE-516",BLACK,WHITE);
   17c1a:	4a54      	ldr	r2, [pc, #336]	; (17d6c <LCD_menu+0x18c>)
   17c1c:	2301      	movs	r3, #1
   17c1e:	425b      	negs	r3, r3
   17c20:	9300      	str	r3, [sp, #0]
   17c22:	2300      	movs	r3, #0
   17c24:	2128      	movs	r1, #40	; 0x28
   17c26:	2014      	movs	r0, #20
   17c28:	4c4e      	ldr	r4, [pc, #312]	; (17d64 <LCD_menu+0x184>)
   17c2a:	47a0      	blx	r4
	drawString(50,50,"Welcome",BLACK,WHITE);
   17c2c:	4a50      	ldr	r2, [pc, #320]	; (17d70 <LCD_menu+0x190>)
   17c2e:	2301      	movs	r3, #1
   17c30:	425b      	negs	r3, r3
   17c32:	9300      	str	r3, [sp, #0]
   17c34:	2300      	movs	r3, #0
   17c36:	2132      	movs	r1, #50	; 0x32
   17c38:	2032      	movs	r0, #50	; 0x32
   17c3a:	4c4a      	ldr	r4, [pc, #296]	; (17d64 <LCD_menu+0x184>)
   17c3c:	47a0      	blx	r4
	if(getLock()){
   17c3e:	4b4d      	ldr	r3, [pc, #308]	; (17d74 <LCD_menu+0x194>)
   17c40:	4798      	blx	r3
   17c42:	1e03      	subs	r3, r0, #0
   17c44:	d00a      	beq.n	17c5c <LCD_menu+0x7c>
		drawString(20,60,"WatchDog Status:Locked  ",RED,WHITE);
   17c46:	494c      	ldr	r1, [pc, #304]	; (17d78 <LCD_menu+0x198>)
   17c48:	4a4c      	ldr	r2, [pc, #304]	; (17d7c <LCD_menu+0x19c>)
   17c4a:	2301      	movs	r3, #1
   17c4c:	425b      	negs	r3, r3
   17c4e:	9300      	str	r3, [sp, #0]
   17c50:	000b      	movs	r3, r1
   17c52:	213c      	movs	r1, #60	; 0x3c
   17c54:	2014      	movs	r0, #20
   17c56:	4c43      	ldr	r4, [pc, #268]	; (17d64 <LCD_menu+0x184>)
   17c58:	47a0      	blx	r4
   17c5a:	e009      	b.n	17c70 <LCD_menu+0x90>
	}
	else{drawString(20,60,"WatchDog Status:Unlocked",RED,WHITE);}
   17c5c:	4946      	ldr	r1, [pc, #280]	; (17d78 <LCD_menu+0x198>)
   17c5e:	4a48      	ldr	r2, [pc, #288]	; (17d80 <LCD_menu+0x1a0>)
   17c60:	2301      	movs	r3, #1
   17c62:	425b      	negs	r3, r3
   17c64:	9300      	str	r3, [sp, #0]
   17c66:	000b      	movs	r3, r1
   17c68:	213c      	movs	r1, #60	; 0x3c
   17c6a:	2014      	movs	r0, #20
   17c6c:	4c3d      	ldr	r4, [pc, #244]	; (17d64 <LCD_menu+0x184>)
   17c6e:	47a0      	blx	r4
	
	char buffer[20];
	memset(buffer,0,sizeof(buffer));
   17c70:	230c      	movs	r3, #12
   17c72:	18fb      	adds	r3, r7, r3
   17c74:	2214      	movs	r2, #20
   17c76:	2100      	movs	r1, #0
   17c78:	0018      	movs	r0, r3
   17c7a:	4b42      	ldr	r3, [pc, #264]	; (17d84 <LCD_menu+0x1a4>)
   17c7c:	4798      	blx	r3
	float temp = getTemperature();
   17c7e:	4b42      	ldr	r3, [pc, #264]	; (17d88 <LCD_menu+0x1a8>)
   17c80:	4798      	blx	r3
   17c82:	1c03      	adds	r3, r0, #0
   17c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	float hum = getHumidity();
   17c86:	4b41      	ldr	r3, [pc, #260]	; (17d8c <LCD_menu+0x1ac>)
   17c88:	4798      	blx	r3
   17c8a:	1c03      	adds	r3, r0, #0
   17c8c:	62bb      	str	r3, [r7, #40]	; 0x28
	float pressure = getPressure();
   17c8e:	4b40      	ldr	r3, [pc, #256]	; (17d90 <LCD_menu+0x1b0>)
   17c90:	4798      	blx	r3
   17c92:	1c03      	adds	r3, r0, #0
   17c94:	627b      	str	r3, [r7, #36]	; 0x24
	int gas = getGasResistance();
   17c96:	4b3f      	ldr	r3, [pc, #252]	; (17d94 <LCD_menu+0x1b4>)
   17c98:	4798      	blx	r3
   17c9a:	0003      	movs	r3, r0
   17c9c:	623b      	str	r3, [r7, #32]
	snprintf(buffer,sizeof(buffer),"Temperature: %d ",(int)temp);
   17c9e:	4b3e      	ldr	r3, [pc, #248]	; (17d98 <LCD_menu+0x1b8>)
   17ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17ca2:	4798      	blx	r3
   17ca4:	0003      	movs	r3, r0
   17ca6:	4a3d      	ldr	r2, [pc, #244]	; (17d9c <LCD_menu+0x1bc>)
   17ca8:	210c      	movs	r1, #12
   17caa:	1878      	adds	r0, r7, r1
   17cac:	2114      	movs	r1, #20
   17cae:	4c3c      	ldr	r4, [pc, #240]	; (17da0 <LCD_menu+0x1c0>)
   17cb0:	47a0      	blx	r4
	drawString(20,70,buffer,BLACK,WHITE);
   17cb2:	230c      	movs	r3, #12
   17cb4:	18fa      	adds	r2, r7, r3
   17cb6:	2301      	movs	r3, #1
   17cb8:	425b      	negs	r3, r3
   17cba:	9300      	str	r3, [sp, #0]
   17cbc:	2300      	movs	r3, #0
   17cbe:	2146      	movs	r1, #70	; 0x46
   17cc0:	2014      	movs	r0, #20
   17cc2:	4c28      	ldr	r4, [pc, #160]	; (17d64 <LCD_menu+0x184>)
   17cc4:	47a0      	blx	r4
	snprintf(buffer,sizeof(buffer),"Humidity: %d %%",(int)hum);
   17cc6:	4b34      	ldr	r3, [pc, #208]	; (17d98 <LCD_menu+0x1b8>)
   17cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17cca:	4798      	blx	r3
   17ccc:	0003      	movs	r3, r0
   17cce:	4a35      	ldr	r2, [pc, #212]	; (17da4 <LCD_menu+0x1c4>)
   17cd0:	210c      	movs	r1, #12
   17cd2:	1878      	adds	r0, r7, r1
   17cd4:	2114      	movs	r1, #20
   17cd6:	4c32      	ldr	r4, [pc, #200]	; (17da0 <LCD_menu+0x1c0>)
   17cd8:	47a0      	blx	r4
	drawString(20,80,buffer,BLACK,WHITE);
   17cda:	230c      	movs	r3, #12
   17cdc:	18fa      	adds	r2, r7, r3
   17cde:	2301      	movs	r3, #1
   17ce0:	425b      	negs	r3, r3
   17ce2:	9300      	str	r3, [sp, #0]
   17ce4:	2300      	movs	r3, #0
   17ce6:	2150      	movs	r1, #80	; 0x50
   17ce8:	2014      	movs	r0, #20
   17cea:	4c1e      	ldr	r4, [pc, #120]	; (17d64 <LCD_menu+0x184>)
   17cec:	47a0      	blx	r4
	snprintf(buffer,sizeof(buffer),"Pressure: %d hPa",(int)pressure);
   17cee:	4b2a      	ldr	r3, [pc, #168]	; (17d98 <LCD_menu+0x1b8>)
   17cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17cf2:	4798      	blx	r3
   17cf4:	0003      	movs	r3, r0
   17cf6:	4a2c      	ldr	r2, [pc, #176]	; (17da8 <LCD_menu+0x1c8>)
   17cf8:	210c      	movs	r1, #12
   17cfa:	1878      	adds	r0, r7, r1
   17cfc:	2114      	movs	r1, #20
   17cfe:	4c28      	ldr	r4, [pc, #160]	; (17da0 <LCD_menu+0x1c0>)
   17d00:	47a0      	blx	r4
	drawString(20,90,buffer,BLACK,WHITE);
   17d02:	230c      	movs	r3, #12
   17d04:	18fa      	adds	r2, r7, r3
   17d06:	2301      	movs	r3, #1
   17d08:	425b      	negs	r3, r3
   17d0a:	9300      	str	r3, [sp, #0]
   17d0c:	2300      	movs	r3, #0
   17d0e:	215a      	movs	r1, #90	; 0x5a
   17d10:	2014      	movs	r0, #20
   17d12:	4c14      	ldr	r4, [pc, #80]	; (17d64 <LCD_menu+0x184>)
   17d14:	47a0      	blx	r4
	pressure = (1200 - pressure) / 1200;
   17d16:	4b25      	ldr	r3, [pc, #148]	; (17dac <LCD_menu+0x1cc>)
   17d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17d1a:	4825      	ldr	r0, [pc, #148]	; (17db0 <LCD_menu+0x1d0>)
   17d1c:	4798      	blx	r3
   17d1e:	1c03      	adds	r3, r0, #0
   17d20:	1c1a      	adds	r2, r3, #0
   17d22:	4b24      	ldr	r3, [pc, #144]	; (17db4 <LCD_menu+0x1d4>)
   17d24:	4922      	ldr	r1, [pc, #136]	; (17db0 <LCD_menu+0x1d0>)
   17d26:	1c10      	adds	r0, r2, #0
   17d28:	4798      	blx	r3
   17d2a:	1c03      	adds	r3, r0, #0
   17d2c:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(buffer,sizeof(buffer),"Smoke: %d %%",(int)pressure);
   17d2e:	4b1a      	ldr	r3, [pc, #104]	; (17d98 <LCD_menu+0x1b8>)
   17d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17d32:	4798      	blx	r3
   17d34:	0003      	movs	r3, r0
   17d36:	4a20      	ldr	r2, [pc, #128]	; (17db8 <LCD_menu+0x1d8>)
   17d38:	210c      	movs	r1, #12
   17d3a:	1878      	adds	r0, r7, r1
   17d3c:	2114      	movs	r1, #20
   17d3e:	4c18      	ldr	r4, [pc, #96]	; (17da0 <LCD_menu+0x1c0>)
   17d40:	47a0      	blx	r4
	drawString(20,100,buffer,BLACK,WHITE);
   17d42:	230c      	movs	r3, #12
   17d44:	18fa      	adds	r2, r7, r3
   17d46:	2301      	movs	r3, #1
   17d48:	425b      	negs	r3, r3
   17d4a:	9300      	str	r3, [sp, #0]
   17d4c:	2300      	movs	r3, #0
   17d4e:	2164      	movs	r1, #100	; 0x64
   17d50:	2014      	movs	r0, #20
   17d52:	4c04      	ldr	r4, [pc, #16]	; (17d64 <LCD_menu+0x184>)
   17d54:	47a0      	blx	r4
	

}
   17d56:	46c0      	nop			; (mov r8, r8)
   17d58:	46bd      	mov	sp, r7
   17d5a:	b00d      	add	sp, #52	; 0x34
   17d5c:	bd90      	pop	{r4, r7, pc}
   17d5e:	46c0      	nop			; (mov r8, r8)
   17d60:	00039554 	.word	0x00039554
   17d64:	0001749d 	.word	0x0001749d
   17d68:	0003956c 	.word	0x0003956c
   17d6c:	00039584 	.word	0x00039584
   17d70:	0003958c 	.word	0x0003958c
   17d74:	00016d4d 	.word	0x00016d4d
   17d78:	fffff800 	.word	0xfffff800
   17d7c:	00039594 	.word	0x00039594
   17d80:	000395b0 	.word	0x000395b0
   17d84:	0003796b 	.word	0x0003796b
   17d88:	00014bbd 	.word	0x00014bbd
   17d8c:	00014bd1 	.word	0x00014bd1
   17d90:	00014be5 	.word	0x00014be5
   17d94:	00014bf9 	.word	0x00014bf9
   17d98:	00035ab5 	.word	0x00035ab5
   17d9c:	000395cc 	.word	0x000395cc
   17da0:	00037bc5 	.word	0x00037bc5
   17da4:	000395e0 	.word	0x000395e0
   17da8:	000395f0 	.word	0x000395f0
   17dac:	0003577d 	.word	0x0003577d
   17db0:	44960000 	.word	0x44960000
   17db4:	000352ad 	.word	0x000352ad
   17db8:	00039604 	.word	0x00039604

00017dbc <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   17dbc:	b590      	push	{r4, r7, lr}
   17dbe:	b087      	sub	sp, #28
   17dc0:	af00      	add	r7, sp, #0
   17dc2:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   17dc4:	4b92      	ldr	r3, [pc, #584]	; (18010 <vUiHandlerTask+0x254>)
   17dc6:	0018      	movs	r0, r3
   17dc8:	4b92      	ldr	r3, [pc, #584]	; (18014 <vUiHandlerTask+0x258>)
   17dca:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   17dcc:	4b92      	ldr	r3, [pc, #584]	; (18018 <vUiHandlerTask+0x25c>)
   17dce:	2201      	movs	r2, #1
   17dd0:	701a      	strb	r2, [r3, #0]
   
   configure_port_speaker_pins();
   17dd2:	4b92      	ldr	r3, [pc, #584]	; (1801c <vUiHandlerTask+0x260>)
   17dd4:	4798      	blx	r3
	configure_port_servo_pins();
   17dd6:	4b92      	ldr	r3, [pc, #584]	; (18020 <vUiHandlerTask+0x264>)
   17dd8:	4798      	blx	r3
	init_bme680();
   17dda:	4b92      	ldr	r3, [pc, #584]	; (18024 <vUiHandlerTask+0x268>)
   17ddc:	4798      	blx	r3
	read_sensor_data();
   17dde:	4b92      	ldr	r3, [pc, #584]	; (18028 <vUiHandlerTask+0x26c>)
   17de0:	4798      	blx	r3

		
		
		
		
	configure_port_pins();
   17de2:	4b92      	ldr	r3, [pc, #584]	; (1802c <vUiHandlerTask+0x270>)
   17de4:	4798      	blx	r3
		//servopulse(200);
		//configure_tcc();
		//setPulse(2.4);
		//lock();
		
	LCD_init();
   17de6:	4b92      	ldr	r3, [pc, #584]	; (18030 <vUiHandlerTask+0x274>)
   17de8:	4798      	blx	r3
	LCD_clearScreen(WHITE);
   17dea:	4b92      	ldr	r3, [pc, #584]	; (18034 <vUiHandlerTask+0x278>)
   17dec:	0018      	movs	r0, r3
   17dee:	4b92      	ldr	r3, [pc, #584]	; (18038 <vUiHandlerTask+0x27c>)
   17df0:	4798      	blx	r3
	
    while (1) {
	

	  // warning_speaker();
        switch (uiState) {
   17df2:	4b89      	ldr	r3, [pc, #548]	; (18018 <vUiHandlerTask+0x25c>)
   17df4:	781b      	ldrb	r3, [r3, #0]
   17df6:	2b01      	cmp	r3, #1
   17df8:	d100      	bne.n	17dfc <vUiHandlerTask+0x40>
   17dfa:	e101      	b.n	18000 <vUiHandlerTask+0x244>
   17dfc:	2b02      	cmp	r3, #2
   17dfe:	d002      	beq.n	17e06 <vUiHandlerTask+0x4a>
   17e00:	2b00      	cmp	r3, #0
   17e02:	d068      	beq.n	17ed6 <vUiHandlerTask+0x11a>
   17e04:	e0f8      	b.n	17ff8 <vUiHandlerTask+0x23c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   17e06:	4b8d      	ldr	r3, [pc, #564]	; (1803c <vUiHandlerTask+0x280>)
   17e08:	2200      	movs	r2, #0
   17e0a:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   17e0c:	4b8c      	ldr	r3, [pc, #560]	; (18040 <vUiHandlerTask+0x284>)
   17e0e:	2201      	movs	r2, #1
   17e10:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   17e12:	4b8c      	ldr	r3, [pc, #560]	; (18044 <vUiHandlerTask+0x288>)
   17e14:	2214      	movs	r2, #20
   17e16:	21ff      	movs	r1, #255	; 0xff
   17e18:	0018      	movs	r0, r3
   17e1a:	4b8b      	ldr	r3, [pc, #556]	; (18048 <vUiHandlerTask+0x28c>)
   17e1c:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   17e1e:	4b8b      	ldr	r3, [pc, #556]	; (1804c <vUiHandlerTask+0x290>)
   17e20:	2200      	movs	r2, #0
   17e22:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   17e24:	2317      	movs	r3, #23
   17e26:	18fc      	adds	r4, r7, r3
   17e28:	4b89      	ldr	r3, [pc, #548]	; (18050 <vUiHandlerTask+0x294>)
   17e2a:	4798      	blx	r3
   17e2c:	0003      	movs	r3, r0
   17e2e:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   17e30:	2317      	movs	r3, #23
   17e32:	18fb      	adds	r3, r7, r3
   17e34:	781b      	ldrb	r3, [r3, #0]
   17e36:	2b0f      	cmp	r3, #15
   17e38:	d903      	bls.n	17e42 <vUiHandlerTask+0x86>
   17e3a:	2317      	movs	r3, #23
   17e3c:	18fb      	adds	r3, r7, r3
   17e3e:	2210      	movs	r2, #16
   17e40:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   17e42:	2317      	movs	r3, #23
   17e44:	18fb      	adds	r3, r7, r3
   17e46:	781b      	ldrb	r3, [r3, #0]
   17e48:	2b00      	cmp	r3, #0
   17e4a:	d007      	beq.n	17e5c <vUiHandlerTask+0xa0>
                    SeesawReadKeypad(buttons,
   17e4c:	2317      	movs	r3, #23
   17e4e:	18fb      	adds	r3, r7, r3
   17e50:	781a      	ldrb	r2, [r3, #0]
   17e52:	4b80      	ldr	r3, [pc, #512]	; (18054 <vUiHandlerTask+0x298>)
   17e54:	0011      	movs	r1, r2
   17e56:	0018      	movs	r0, r3
   17e58:	4b7f      	ldr	r3, [pc, #508]	; (18058 <vUiHandlerTask+0x29c>)
   17e5a:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   17e5c:	4b7d      	ldr	r3, [pc, #500]	; (18054 <vUiHandlerTask+0x298>)
   17e5e:	2210      	movs	r2, #16
   17e60:	2100      	movs	r1, #0
   17e62:	0018      	movs	r0, r3
   17e64:	4b78      	ldr	r3, [pc, #480]	; (18048 <vUiHandlerTask+0x28c>)
   17e66:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   17e68:	4b7c      	ldr	r3, [pc, #496]	; (1805c <vUiHandlerTask+0x2a0>)
   17e6a:	781b      	ldrb	r3, [r3, #0]
   17e6c:	b2d9      	uxtb	r1, r3
   17e6e:	4b7c      	ldr	r3, [pc, #496]	; (18060 <vUiHandlerTask+0x2a4>)
   17e70:	781b      	ldrb	r3, [r3, #0]
   17e72:	b2da      	uxtb	r2, r3
   17e74:	4b7b      	ldr	r3, [pc, #492]	; (18064 <vUiHandlerTask+0x2a8>)
   17e76:	781b      	ldrb	r3, [r3, #0]
   17e78:	b2db      	uxtb	r3, r3
   17e7a:	2000      	movs	r0, #0
   17e7c:	4c7a      	ldr	r4, [pc, #488]	; (18068 <vUiHandlerTask+0x2ac>)
   17e7e:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17e80:	4b7a      	ldr	r3, [pc, #488]	; (1806c <vUiHandlerTask+0x2b0>)
   17e82:	4798      	blx	r3
                vTaskDelay(10);
   17e84:	200a      	movs	r0, #10
   17e86:	4b7a      	ldr	r3, [pc, #488]	; (18070 <vUiHandlerTask+0x2b4>)
   17e88:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   17e8a:	2300      	movs	r3, #0
   17e8c:	2200      	movs	r2, #0
   17e8e:	2100      	movs	r1, #0
   17e90:	2000      	movs	r0, #0
   17e92:	4c75      	ldr	r4, [pc, #468]	; (18068 <vUiHandlerTask+0x2ac>)
   17e94:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   17e96:	4b71      	ldr	r3, [pc, #452]	; (1805c <vUiHandlerTask+0x2a0>)
   17e98:	781b      	ldrb	r3, [r3, #0]
   17e9a:	b2d9      	uxtb	r1, r3
   17e9c:	4b70      	ldr	r3, [pc, #448]	; (18060 <vUiHandlerTask+0x2a4>)
   17e9e:	781b      	ldrb	r3, [r3, #0]
   17ea0:	b2da      	uxtb	r2, r3
   17ea2:	4b70      	ldr	r3, [pc, #448]	; (18064 <vUiHandlerTask+0x2a8>)
   17ea4:	781b      	ldrb	r3, [r3, #0]
   17ea6:	b2db      	uxtb	r3, r3
   17ea8:	200f      	movs	r0, #15
   17eaa:	4c6f      	ldr	r4, [pc, #444]	; (18068 <vUiHandlerTask+0x2ac>)
   17eac:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17eae:	4b6f      	ldr	r3, [pc, #444]	; (1806c <vUiHandlerTask+0x2b0>)
   17eb0:	4798      	blx	r3
                vTaskDelay(10);
   17eb2:	200a      	movs	r0, #10
   17eb4:	4b6e      	ldr	r3, [pc, #440]	; (18070 <vUiHandlerTask+0x2b4>)
   17eb6:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   17eb8:	2300      	movs	r3, #0
   17eba:	2200      	movs	r2, #0
   17ebc:	2100      	movs	r1, #0
   17ebe:	200f      	movs	r0, #15
   17ec0:	4c69      	ldr	r4, [pc, #420]	; (18068 <vUiHandlerTask+0x2ac>)
   17ec2:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17ec4:	4b69      	ldr	r3, [pc, #420]	; (1806c <vUiHandlerTask+0x2b0>)
   17ec6:	4798      	blx	r3
                vTaskDelay(10);
   17ec8:	200a      	movs	r0, #10
   17eca:	4b69      	ldr	r3, [pc, #420]	; (18070 <vUiHandlerTask+0x2b4>)
   17ecc:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   17ece:	4b52      	ldr	r3, [pc, #328]	; (18018 <vUiHandlerTask+0x25c>)
   17ed0:	2200      	movs	r2, #0
   17ed2:	701a      	strb	r2, [r3, #0]

                break;
   17ed4:	e097      	b.n	18006 <vUiHandlerTask+0x24a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   17ed6:	2316      	movs	r3, #22
   17ed8:	18fc      	adds	r4, r7, r3
   17eda:	4b5d      	ldr	r3, [pc, #372]	; (18050 <vUiHandlerTask+0x294>)
   17edc:	4798      	blx	r3
   17ede:	0003      	movs	r3, r0
   17ee0:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   17ee2:	4b5c      	ldr	r3, [pc, #368]	; (18054 <vUiHandlerTask+0x298>)
   17ee4:	2210      	movs	r2, #16
   17ee6:	2100      	movs	r1, #0
   17ee8:	0018      	movs	r0, r3
   17eea:	4b57      	ldr	r3, [pc, #348]	; (18048 <vUiHandlerTask+0x28c>)
   17eec:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   17eee:	2316      	movs	r3, #22
   17ef0:	18fb      	adds	r3, r7, r3
   17ef2:	781b      	ldrb	r3, [r3, #0]
   17ef4:	2b0f      	cmp	r3, #15
   17ef6:	d903      	bls.n	17f00 <vUiHandlerTask+0x144>
                    numPresses = BUTTON_PRESSES_MAX;
   17ef8:	2316      	movs	r3, #22
   17efa:	18fb      	adds	r3, r7, r3
   17efc:	2210      	movs	r2, #16
   17efe:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   17f00:	2316      	movs	r3, #22
   17f02:	18fb      	adds	r3, r7, r3
   17f04:	781b      	ldrb	r3, [r3, #0]
   17f06:	2b00      	cmp	r3, #0
   17f08:	d065      	beq.n	17fd6 <vUiHandlerTask+0x21a>
   17f0a:	2316      	movs	r3, #22
   17f0c:	18fb      	adds	r3, r7, r3
   17f0e:	781a      	ldrb	r2, [r3, #0]
   17f10:	4b50      	ldr	r3, [pc, #320]	; (18054 <vUiHandlerTask+0x298>)
   17f12:	0011      	movs	r1, r2
   17f14:	0018      	movs	r0, r3
   17f16:	4b50      	ldr	r3, [pc, #320]	; (18058 <vUiHandlerTask+0x29c>)
   17f18:	4798      	blx	r3
   17f1a:	1e03      	subs	r3, r0, #0
   17f1c:	d15b      	bne.n	17fd6 <vUiHandlerTask+0x21a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   17f1e:	2300      	movs	r3, #0
   17f20:	613b      	str	r3, [r7, #16]
   17f22:	e050      	b.n	17fc6 <vUiHandlerTask+0x20a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   17f24:	4a4b      	ldr	r2, [pc, #300]	; (18054 <vUiHandlerTask+0x298>)
   17f26:	693b      	ldr	r3, [r7, #16]
   17f28:	18d3      	adds	r3, r2, r3
   17f2a:	781b      	ldrb	r3, [r3, #0]
   17f2c:	089b      	lsrs	r3, r3, #2
   17f2e:	b2db      	uxtb	r3, r3
   17f30:	2b00      	cmp	r3, #0
   17f32:	da00      	bge.n	17f36 <vUiHandlerTask+0x17a>
   17f34:	3307      	adds	r3, #7
   17f36:	10db      	asrs	r3, r3, #3
   17f38:	b2db      	uxtb	r3, r3
   17f3a:	009b      	lsls	r3, r3, #2
   17f3c:	b2d9      	uxtb	r1, r3
   17f3e:	4a45      	ldr	r2, [pc, #276]	; (18054 <vUiHandlerTask+0x298>)
   17f40:	693b      	ldr	r3, [r7, #16]
   17f42:	18d3      	adds	r3, r2, r3
   17f44:	781b      	ldrb	r3, [r3, #0]
   17f46:	089b      	lsrs	r3, r3, #2
   17f48:	b2db      	uxtb	r3, r3
   17f4a:	2207      	movs	r2, #7
   17f4c:	4013      	ands	r3, r2
   17f4e:	b2da      	uxtb	r2, r3
   17f50:	230f      	movs	r3, #15
   17f52:	18fb      	adds	r3, r7, r3
   17f54:	188a      	adds	r2, r1, r2
   17f56:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   17f58:	4a3e      	ldr	r2, [pc, #248]	; (18054 <vUiHandlerTask+0x298>)
   17f5a:	693b      	ldr	r3, [r7, #16]
   17f5c:	18d3      	adds	r3, r2, r3
   17f5e:	781a      	ldrb	r2, [r3, #0]
   17f60:	230e      	movs	r3, #14
   17f62:	18fb      	adds	r3, r7, r3
   17f64:	2103      	movs	r1, #3
   17f66:	400a      	ands	r2, r1
   17f68:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   17f6a:	230e      	movs	r3, #14
   17f6c:	18fb      	adds	r3, r7, r3
   17f6e:	781b      	ldrb	r3, [r3, #0]
   17f70:	2b03      	cmp	r3, #3
   17f72:	d10f      	bne.n	17f94 <vUiHandlerTask+0x1d8>
                            SeesawSetLed(keynum, red, green, blue);
   17f74:	4b39      	ldr	r3, [pc, #228]	; (1805c <vUiHandlerTask+0x2a0>)
   17f76:	781b      	ldrb	r3, [r3, #0]
   17f78:	b2d9      	uxtb	r1, r3
   17f7a:	4b39      	ldr	r3, [pc, #228]	; (18060 <vUiHandlerTask+0x2a4>)
   17f7c:	781b      	ldrb	r3, [r3, #0]
   17f7e:	b2da      	uxtb	r2, r3
   17f80:	4b38      	ldr	r3, [pc, #224]	; (18064 <vUiHandlerTask+0x2a8>)
   17f82:	781b      	ldrb	r3, [r3, #0]
   17f84:	b2dc      	uxtb	r4, r3
   17f86:	230f      	movs	r3, #15
   17f88:	18fb      	adds	r3, r7, r3
   17f8a:	7818      	ldrb	r0, [r3, #0]
   17f8c:	0023      	movs	r3, r4
   17f8e:	4c36      	ldr	r4, [pc, #216]	; (18068 <vUiHandlerTask+0x2ac>)
   17f90:	47a0      	blx	r4
   17f92:	e015      	b.n	17fc0 <vUiHandlerTask+0x204>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   17f94:	230f      	movs	r3, #15
   17f96:	18fb      	adds	r3, r7, r3
   17f98:	7818      	ldrb	r0, [r3, #0]
   17f9a:	2300      	movs	r3, #0
   17f9c:	2200      	movs	r2, #0
   17f9e:	2100      	movs	r1, #0
   17fa0:	4c31      	ldr	r4, [pc, #196]	; (18068 <vUiHandlerTask+0x2ac>)
   17fa2:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   17fa4:	4b25      	ldr	r3, [pc, #148]	; (1803c <vUiHandlerTask+0x280>)
   17fa6:	781b      	ldrb	r3, [r3, #0]
   17fa8:	0019      	movs	r1, r3
   17faa:	4b26      	ldr	r3, [pc, #152]	; (18044 <vUiHandlerTask+0x288>)
   17fac:	220f      	movs	r2, #15
   17fae:	18ba      	adds	r2, r7, r2
   17fb0:	7812      	ldrb	r2, [r2, #0]
   17fb2:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   17fb4:	4b21      	ldr	r3, [pc, #132]	; (1803c <vUiHandlerTask+0x280>)
   17fb6:	781b      	ldrb	r3, [r3, #0]
   17fb8:	3301      	adds	r3, #1
   17fba:	b2da      	uxtb	r2, r3
   17fbc:	4b1f      	ldr	r3, [pc, #124]	; (1803c <vUiHandlerTask+0x280>)
   17fbe:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   17fc0:	693b      	ldr	r3, [r7, #16]
   17fc2:	3301      	adds	r3, #1
   17fc4:	613b      	str	r3, [r7, #16]
   17fc6:	2316      	movs	r3, #22
   17fc8:	18fb      	adds	r3, r7, r3
   17fca:	781a      	ldrb	r2, [r3, #0]
   17fcc:	693b      	ldr	r3, [r7, #16]
   17fce:	429a      	cmp	r2, r3
   17fd0:	dca8      	bgt.n	17f24 <vUiHandlerTask+0x168>
                        }
                    }
                    SeesawOrderLedUpdate();
   17fd2:	4b26      	ldr	r3, [pc, #152]	; (1806c <vUiHandlerTask+0x2b0>)
   17fd4:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   17fd6:	4b19      	ldr	r3, [pc, #100]	; (1803c <vUiHandlerTask+0x280>)
   17fd8:	781a      	ldrb	r2, [r3, #0]
   17fda:	4b19      	ldr	r3, [pc, #100]	; (18040 <vUiHandlerTask+0x284>)
   17fdc:	781b      	ldrb	r3, [r3, #0]
   17fde:	429a      	cmp	r2, r3
   17fe0:	d203      	bcs.n	17fea <vUiHandlerTask+0x22e>
   17fe2:	4b16      	ldr	r3, [pc, #88]	; (1803c <vUiHandlerTask+0x280>)
   17fe4:	781b      	ldrb	r3, [r3, #0]
   17fe6:	2b13      	cmp	r3, #19
   17fe8:	d90c      	bls.n	18004 <vUiHandlerTask+0x248>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   17fea:	4b18      	ldr	r3, [pc, #96]	; (1804c <vUiHandlerTask+0x290>)
   17fec:	2201      	movs	r2, #1
   17fee:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   17ff0:	4b09      	ldr	r3, [pc, #36]	; (18018 <vUiHandlerTask+0x25c>)
   17ff2:	2201      	movs	r2, #1
   17ff4:	701a      	strb	r2, [r3, #0]
                }

                break;
   17ff6:	e005      	b.n	18004 <vUiHandlerTask+0x248>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   17ff8:	4b07      	ldr	r3, [pc, #28]	; (18018 <vUiHandlerTask+0x25c>)
   17ffa:	2200      	movs	r2, #0
   17ffc:	701a      	strb	r2, [r3, #0]
                break;
   17ffe:	e002      	b.n	18006 <vUiHandlerTask+0x24a>
                break;
   18000:	46c0      	nop			; (mov r8, r8)
   18002:	e000      	b.n	18006 <vUiHandlerTask+0x24a>
                break;
   18004:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   18006:	2032      	movs	r0, #50	; 0x32
   18008:	4b19      	ldr	r3, [pc, #100]	; (18070 <vUiHandlerTask+0x2b4>)
   1800a:	4798      	blx	r3
        switch (uiState) {
   1800c:	e6f1      	b.n	17df2 <vUiHandlerTask+0x36>
   1800e:	46c0      	nop			; (mov r8, r8)
   18010:	00039614 	.word	0x00039614
   18014:	00020205 	.word	0x00020205
   18018:	20004758 	.word	0x20004758
   1801c:	00017051 	.word	0x00017051
   18020:	00016c25 	.word	0x00016c25
   18024:	00014a01 	.word	0x00014a01
   18028:	00014ad1 	.word	0x00014ad1
   1802c:	00017449 	.word	0x00017449
   18030:	000177fd 	.word	0x000177fd
   18034:	0000ffff 	.word	0x0000ffff
   18038:	00017b95 	.word	0x00017b95
   1803c:	200004c2 	.word	0x200004c2
   18040:	200004c3 	.word	0x200004c3
   18044:	20004720 	.word	0x20004720
   18048:	0003796b 	.word	0x0003796b
   1804c:	200004c4 	.word	0x200004c4
   18050:	00016d61 	.word	0x00016d61
   18054:	20004748 	.word	0x20004748
   18058:	00016dc9 	.word	0x00016dc9
   1805c:	200004c1 	.word	0x200004c1
   18060:	20000030 	.word	0x20000030
   18064:	20000031 	.word	0x20000031
   18068:	00016e4d 	.word	0x00016e4d
   1806c:	00016f15 	.word	0x00016f15
   18070:	0001e5b1 	.word	0x0001e5b1

00018074 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   18074:	b580      	push	{r7, lr}
   18076:	b082      	sub	sp, #8
   18078:	af00      	add	r7, sp, #0
   1807a:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   1807c:	4a08      	ldr	r2, [pc, #32]	; (180a0 <UiOrderShowMoves+0x2c>)
   1807e:	687b      	ldr	r3, [r7, #4]
   18080:	0010      	movs	r0, r2
   18082:	0019      	movs	r1, r3
   18084:	2314      	movs	r3, #20
   18086:	001a      	movs	r2, r3
   18088:	4b06      	ldr	r3, [pc, #24]	; (180a4 <UiOrderShowMoves+0x30>)
   1808a:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   1808c:	4b06      	ldr	r3, [pc, #24]	; (180a8 <UiOrderShowMoves+0x34>)
   1808e:	2202      	movs	r2, #2
   18090:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   18092:	4b06      	ldr	r3, [pc, #24]	; (180ac <UiOrderShowMoves+0x38>)
   18094:	2200      	movs	r2, #0
   18096:	701a      	strb	r2, [r3, #0]
}
   18098:	46c0      	nop			; (mov r8, r8)
   1809a:	46bd      	mov	sp, r7
   1809c:	b002      	add	sp, #8
   1809e:	bd80      	pop	{r7, pc}
   180a0:	20004734 	.word	0x20004734
   180a4:	00037935 	.word	0x00037935
   180a8:	20004758 	.word	0x20004758
   180ac:	200004c4 	.word	0x200004c4

000180b0 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   180b0:	b580      	push	{r7, lr}
   180b2:	af00      	add	r7, sp, #0
    return playIsDone;
   180b4:	4b02      	ldr	r3, [pc, #8]	; (180c0 <UiPlayIsDone+0x10>)
   180b6:	781b      	ldrb	r3, [r3, #0]
}
   180b8:	0018      	movs	r0, r3
   180ba:	46bd      	mov	sp, r7
   180bc:	bd80      	pop	{r7, pc}
   180be:	46c0      	nop			; (mov r8, r8)
   180c0:	200004c4 	.word	0x200004c4

000180c4 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   180c4:	b580      	push	{r7, lr}
   180c6:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   180c8:	4b01      	ldr	r3, [pc, #4]	; (180d0 <UiGetGamePacketOut+0xc>)
}
   180ca:	0018      	movs	r0, r3
   180cc:	46bd      	mov	sp, r7
   180ce:	bd80      	pop	{r7, pc}
   180d0:	20004720 	.word	0x20004720

000180d4 <system_pinmux_get_group_from_gpio_pin>:
{
   180d4:	b580      	push	{r7, lr}
   180d6:	b084      	sub	sp, #16
   180d8:	af00      	add	r7, sp, #0
   180da:	0002      	movs	r2, r0
   180dc:	1dfb      	adds	r3, r7, #7
   180de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   180e0:	230f      	movs	r3, #15
   180e2:	18fb      	adds	r3, r7, r3
   180e4:	1dfa      	adds	r2, r7, #7
   180e6:	7812      	ldrb	r2, [r2, #0]
   180e8:	09d2      	lsrs	r2, r2, #7
   180ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   180ec:	230e      	movs	r3, #14
   180ee:	18fb      	adds	r3, r7, r3
   180f0:	1dfa      	adds	r2, r7, #7
   180f2:	7812      	ldrb	r2, [r2, #0]
   180f4:	0952      	lsrs	r2, r2, #5
   180f6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   180f8:	4b0d      	ldr	r3, [pc, #52]	; (18130 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   180fa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   180fc:	230f      	movs	r3, #15
   180fe:	18fb      	adds	r3, r7, r3
   18100:	781b      	ldrb	r3, [r3, #0]
   18102:	2b00      	cmp	r3, #0
   18104:	d10f      	bne.n	18126 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   18106:	230f      	movs	r3, #15
   18108:	18fb      	adds	r3, r7, r3
   1810a:	781b      	ldrb	r3, [r3, #0]
   1810c:	009b      	lsls	r3, r3, #2
   1810e:	2210      	movs	r2, #16
   18110:	4694      	mov	ip, r2
   18112:	44bc      	add	ip, r7
   18114:	4463      	add	r3, ip
   18116:	3b08      	subs	r3, #8
   18118:	681a      	ldr	r2, [r3, #0]
   1811a:	230e      	movs	r3, #14
   1811c:	18fb      	adds	r3, r7, r3
   1811e:	781b      	ldrb	r3, [r3, #0]
   18120:	01db      	lsls	r3, r3, #7
   18122:	18d3      	adds	r3, r2, r3
   18124:	e000      	b.n	18128 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   18126:	2300      	movs	r3, #0
}
   18128:	0018      	movs	r0, r3
   1812a:	46bd      	mov	sp, r7
   1812c:	b004      	add	sp, #16
   1812e:	bd80      	pop	{r7, pc}
   18130:	41004400 	.word	0x41004400

00018134 <port_get_group_from_gpio_pin>:
{
   18134:	b580      	push	{r7, lr}
   18136:	b082      	sub	sp, #8
   18138:	af00      	add	r7, sp, #0
   1813a:	0002      	movs	r2, r0
   1813c:	1dfb      	adds	r3, r7, #7
   1813e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   18140:	1dfb      	adds	r3, r7, #7
   18142:	781b      	ldrb	r3, [r3, #0]
   18144:	0018      	movs	r0, r3
   18146:	4b03      	ldr	r3, [pc, #12]	; (18154 <port_get_group_from_gpio_pin+0x20>)
   18148:	4798      	blx	r3
   1814a:	0003      	movs	r3, r0
}
   1814c:	0018      	movs	r0, r3
   1814e:	46bd      	mov	sp, r7
   18150:	b002      	add	sp, #8
   18152:	bd80      	pop	{r7, pc}
   18154:	000180d5 	.word	0x000180d5

00018158 <port_pin_set_output_level>:
{
   18158:	b580      	push	{r7, lr}
   1815a:	b084      	sub	sp, #16
   1815c:	af00      	add	r7, sp, #0
   1815e:	0002      	movs	r2, r0
   18160:	1dfb      	adds	r3, r7, #7
   18162:	701a      	strb	r2, [r3, #0]
   18164:	1dbb      	adds	r3, r7, #6
   18166:	1c0a      	adds	r2, r1, #0
   18168:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1816a:	1dfb      	adds	r3, r7, #7
   1816c:	781b      	ldrb	r3, [r3, #0]
   1816e:	0018      	movs	r0, r3
   18170:	4b0d      	ldr	r3, [pc, #52]	; (181a8 <port_pin_set_output_level+0x50>)
   18172:	4798      	blx	r3
   18174:	0003      	movs	r3, r0
   18176:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   18178:	1dfb      	adds	r3, r7, #7
   1817a:	781b      	ldrb	r3, [r3, #0]
   1817c:	221f      	movs	r2, #31
   1817e:	4013      	ands	r3, r2
   18180:	2201      	movs	r2, #1
   18182:	409a      	lsls	r2, r3
   18184:	0013      	movs	r3, r2
   18186:	60bb      	str	r3, [r7, #8]
	if (level) {
   18188:	1dbb      	adds	r3, r7, #6
   1818a:	781b      	ldrb	r3, [r3, #0]
   1818c:	2b00      	cmp	r3, #0
   1818e:	d003      	beq.n	18198 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   18190:	68fb      	ldr	r3, [r7, #12]
   18192:	68ba      	ldr	r2, [r7, #8]
   18194:	619a      	str	r2, [r3, #24]
}
   18196:	e002      	b.n	1819e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   18198:	68fb      	ldr	r3, [r7, #12]
   1819a:	68ba      	ldr	r2, [r7, #8]
   1819c:	615a      	str	r2, [r3, #20]
}
   1819e:	46c0      	nop			; (mov r8, r8)
   181a0:	46bd      	mov	sp, r7
   181a2:	b004      	add	sp, #16
   181a4:	bd80      	pop	{r7, pc}
   181a6:	46c0      	nop			; (mov r8, r8)
   181a8:	00018135 	.word	0x00018135

000181ac <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   181ac:	b580      	push	{r7, lr}
   181ae:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   181b0:	4b02      	ldr	r3, [pc, #8]	; (181bc <init_state+0x10>)
   181b2:	2200      	movs	r2, #0
   181b4:	701a      	strb	r2, [r3, #0]
}
   181b6:	46c0      	nop			; (mov r8, r8)
   181b8:	46bd      	mov	sp, r7
   181ba:	bd80      	pop	{r7, pc}
   181bc:	200004dd 	.word	0x200004dd

000181c0 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   181c0:	b580      	push	{r7, lr}
   181c2:	b082      	sub	sp, #8
   181c4:	af00      	add	r7, sp, #0
   181c6:	0002      	movs	r2, r0
   181c8:	1dfb      	adds	r3, r7, #7
   181ca:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   181cc:	1dfb      	adds	r3, r7, #7
   181ce:	781b      	ldrb	r3, [r3, #0]
   181d0:	b25b      	sxtb	r3, r3
   181d2:	43db      	mvns	r3, r3
   181d4:	b25b      	sxtb	r3, r3
   181d6:	4a06      	ldr	r2, [pc, #24]	; (181f0 <clear_state+0x30>)
   181d8:	7812      	ldrb	r2, [r2, #0]
   181da:	b252      	sxtb	r2, r2
   181dc:	4013      	ands	r3, r2
   181de:	b25b      	sxtb	r3, r3
   181e0:	b2da      	uxtb	r2, r3
   181e2:	4b03      	ldr	r3, [pc, #12]	; (181f0 <clear_state+0x30>)
   181e4:	701a      	strb	r2, [r3, #0]
}
   181e6:	46c0      	nop			; (mov r8, r8)
   181e8:	46bd      	mov	sp, r7
   181ea:	b002      	add	sp, #8
   181ec:	bd80      	pop	{r7, pc}
   181ee:	46c0      	nop			; (mov r8, r8)
   181f0:	200004dd 	.word	0x200004dd

000181f4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   181f4:	b580      	push	{r7, lr}
   181f6:	b082      	sub	sp, #8
   181f8:	af00      	add	r7, sp, #0
   181fa:	0002      	movs	r2, r0
   181fc:	1dfb      	adds	r3, r7, #7
   181fe:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   18200:	4b05      	ldr	r3, [pc, #20]	; (18218 <add_state+0x24>)
   18202:	781a      	ldrb	r2, [r3, #0]
   18204:	1dfb      	adds	r3, r7, #7
   18206:	781b      	ldrb	r3, [r3, #0]
   18208:	4313      	orrs	r3, r2
   1820a:	b2da      	uxtb	r2, r3
   1820c:	4b02      	ldr	r3, [pc, #8]	; (18218 <add_state+0x24>)
   1820e:	701a      	strb	r2, [r3, #0]
}
   18210:	46c0      	nop			; (mov r8, r8)
   18212:	46bd      	mov	sp, r7
   18214:	b002      	add	sp, #8
   18216:	bd80      	pop	{r7, pc}
   18218:	200004dd 	.word	0x200004dd

0001821c <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   1821c:	b580      	push	{r7, lr}
   1821e:	b082      	sub	sp, #8
   18220:	af00      	add	r7, sp, #0
   18222:	0002      	movs	r2, r0
   18224:	1dfb      	adds	r3, r7, #7
   18226:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   18228:	4b06      	ldr	r3, [pc, #24]	; (18244 <is_state_set+0x28>)
   1822a:	781b      	ldrb	r3, [r3, #0]
   1822c:	1dfa      	adds	r2, r7, #7
   1822e:	7812      	ldrb	r2, [r2, #0]
   18230:	4013      	ands	r3, r2
   18232:	b2db      	uxtb	r3, r3
   18234:	1e5a      	subs	r2, r3, #1
   18236:	4193      	sbcs	r3, r2
   18238:	b2db      	uxtb	r3, r3
}
   1823a:	0018      	movs	r0, r3
   1823c:	46bd      	mov	sp, r7
   1823e:	b002      	add	sp, #8
   18240:	bd80      	pop	{r7, pc}
   18242:	46c0      	nop			; (mov r8, r8)
   18244:	200004dd 	.word	0x200004dd

00018248 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   18248:	b590      	push	{r4, r7, lr}
   1824a:	b085      	sub	sp, #20
   1824c:	af00      	add	r7, sp, #0
   1824e:	6078      	str	r0, [r7, #4]
   18250:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   18252:	687b      	ldr	r3, [r7, #4]
   18254:	2b00      	cmp	r3, #0
   18256:	d002      	beq.n	1825e <is_exist_file+0x16>
   18258:	683b      	ldr	r3, [r7, #0]
   1825a:	2b00      	cmp	r3, #0
   1825c:	d101      	bne.n	18262 <is_exist_file+0x1a>
        return false;
   1825e:	2300      	movs	r3, #0
   18260:	e013      	b.n	1828a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   18262:	230f      	movs	r3, #15
   18264:	18fc      	adds	r4, r7, r3
   18266:	6839      	ldr	r1, [r7, #0]
   18268:	4b0a      	ldr	r3, [pc, #40]	; (18294 <is_exist_file+0x4c>)
   1826a:	2200      	movs	r2, #0
   1826c:	0018      	movs	r0, r3
   1826e:	4b0a      	ldr	r3, [pc, #40]	; (18298 <is_exist_file+0x50>)
   18270:	4798      	blx	r3
   18272:	0003      	movs	r3, r0
   18274:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   18276:	4b07      	ldr	r3, [pc, #28]	; (18294 <is_exist_file+0x4c>)
   18278:	0018      	movs	r0, r3
   1827a:	4b08      	ldr	r3, [pc, #32]	; (1829c <is_exist_file+0x54>)
   1827c:	4798      	blx	r3
    return (ret == FR_OK);
   1827e:	230f      	movs	r3, #15
   18280:	18fb      	adds	r3, r7, r3
   18282:	781b      	ldrb	r3, [r3, #0]
   18284:	425a      	negs	r2, r3
   18286:	4153      	adcs	r3, r2
   18288:	b2db      	uxtb	r3, r3
}
   1828a:	0018      	movs	r0, r3
   1828c:	46bd      	mov	sp, r7
   1828e:	b005      	add	sp, #20
   18290:	bd90      	pop	{r4, r7, pc}
   18292:	46c0      	nop			; (mov r8, r8)
   18294:	20000710 	.word	0x20000710
   18298:	0002fd85 	.word	0x0002fd85
   1829c:	00030785 	.word	0x00030785

000182a0 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   182a0:	b580      	push	{r7, lr}
   182a2:	b09e      	sub	sp, #120	; 0x78
   182a4:	af00      	add	r7, sp, #0
   182a6:	60f8      	str	r0, [r7, #12]
   182a8:	60b9      	str	r1, [r7, #8]
   182aa:	1dfb      	adds	r3, r7, #7
   182ac:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   182ae:	2376      	movs	r3, #118	; 0x76
   182b0:	18fb      	adds	r3, r7, r3
   182b2:	2201      	movs	r2, #1
   182b4:	801a      	strh	r2, [r3, #0]
   182b6:	2374      	movs	r3, #116	; 0x74
   182b8:	18fb      	adds	r3, r7, r3
   182ba:	2200      	movs	r2, #0
   182bc:	801a      	strh	r2, [r3, #0]
   182be:	236e      	movs	r3, #110	; 0x6e
   182c0:	18fb      	adds	r3, r7, r3
   182c2:	2200      	movs	r2, #0
   182c4:	801a      	strh	r2, [r3, #0]
   182c6:	2372      	movs	r3, #114	; 0x72
   182c8:	18fb      	adds	r3, r7, r3
   182ca:	2200      	movs	r2, #0
   182cc:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   182ce:	2324      	movs	r3, #36	; 0x24
   182d0:	18fb      	adds	r3, r7, r3
   182d2:	0018      	movs	r0, r3
   182d4:	2341      	movs	r3, #65	; 0x41
   182d6:	001a      	movs	r2, r3
   182d8:	2100      	movs	r1, #0
   182da:	4b92      	ldr	r3, [pc, #584]	; (18524 <rename_to_unique+0x284>)
   182dc:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   182de:	2318      	movs	r3, #24
   182e0:	18fb      	adds	r3, r7, r3
   182e2:	0018      	movs	r0, r3
   182e4:	2309      	movs	r3, #9
   182e6:	001a      	movs	r2, r3
   182e8:	2100      	movs	r1, #0
   182ea:	4b8e      	ldr	r3, [pc, #568]	; (18524 <rename_to_unique+0x284>)
   182ec:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   182ee:	2314      	movs	r3, #20
   182f0:	18fb      	adds	r3, r7, r3
   182f2:	2200      	movs	r2, #0
   182f4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   182f6:	2300      	movs	r3, #0
   182f8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   182fa:	2371      	movs	r3, #113	; 0x71
   182fc:	18fb      	adds	r3, r7, r3
   182fe:	2200      	movs	r2, #0
   18300:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   18302:	68bb      	ldr	r3, [r7, #8]
   18304:	2b00      	cmp	r3, #0
   18306:	d101      	bne.n	1830c <rename_to_unique+0x6c>
        return false;
   18308:	2300      	movs	r3, #0
   1830a:	e106      	b.n	1851a <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   1830c:	68ba      	ldr	r2, [r7, #8]
   1830e:	68fb      	ldr	r3, [r7, #12]
   18310:	0011      	movs	r1, r2
   18312:	0018      	movs	r0, r3
   18314:	4b84      	ldr	r3, [pc, #528]	; (18528 <rename_to_unique+0x288>)
   18316:	4798      	blx	r3
   18318:	0003      	movs	r3, r0
   1831a:	001a      	movs	r2, r3
   1831c:	2301      	movs	r3, #1
   1831e:	4053      	eors	r3, r2
   18320:	b2db      	uxtb	r3, r3
   18322:	2b00      	cmp	r3, #0
   18324:	d001      	beq.n	1832a <rename_to_unique+0x8a>
        return true;
   18326:	2301      	movs	r3, #1
   18328:	e0f7      	b.n	1851a <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   1832a:	68bb      	ldr	r3, [r7, #8]
   1832c:	0018      	movs	r0, r3
   1832e:	4b7f      	ldr	r3, [pc, #508]	; (1852c <rename_to_unique+0x28c>)
   18330:	4798      	blx	r3
   18332:	0003      	movs	r3, r0
   18334:	2b40      	cmp	r3, #64	; 0x40
   18336:	d901      	bls.n	1833c <rename_to_unique+0x9c>
        return false;
   18338:	2300      	movs	r3, #0
   1833a:	e0ee      	b.n	1851a <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   1833c:	68bb      	ldr	r3, [r7, #8]
   1833e:	212e      	movs	r1, #46	; 0x2e
   18340:	0018      	movs	r0, r3
   18342:	4b7b      	ldr	r3, [pc, #492]	; (18530 <rename_to_unique+0x290>)
   18344:	4798      	blx	r3
   18346:	0003      	movs	r3, r0
   18348:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1834a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1834c:	2b00      	cmp	r3, #0
   1834e:	d052      	beq.n	183f6 <rename_to_unique+0x156>
        ext_len = strlen(p);
   18350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   18352:	0018      	movs	r0, r3
   18354:	4b75      	ldr	r3, [pc, #468]	; (1852c <rename_to_unique+0x28c>)
   18356:	4798      	blx	r3
   18358:	0002      	movs	r2, r0
   1835a:	236e      	movs	r3, #110	; 0x6e
   1835c:	18fb      	adds	r3, r7, r3
   1835e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   18360:	236e      	movs	r3, #110	; 0x6e
   18362:	18fb      	adds	r3, r7, r3
   18364:	881b      	ldrh	r3, [r3, #0]
   18366:	2b07      	cmp	r3, #7
   18368:	d837      	bhi.n	183da <rename_to_unique+0x13a>
            valid_ext = true;
   1836a:	2371      	movs	r3, #113	; 0x71
   1836c:	18fb      	adds	r3, r7, r3
   1836e:	2201      	movs	r2, #1
   18370:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   18372:	6eba      	ldr	r2, [r7, #104]	; 0x68
   18374:	2318      	movs	r3, #24
   18376:	18fb      	adds	r3, r7, r3
   18378:	0011      	movs	r1, r2
   1837a:	0018      	movs	r0, r3
   1837c:	4b6d      	ldr	r3, [pc, #436]	; (18534 <rename_to_unique+0x294>)
   1837e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   18380:	68bb      	ldr	r3, [r7, #8]
   18382:	0018      	movs	r0, r3
   18384:	4b69      	ldr	r3, [pc, #420]	; (1852c <rename_to_unique+0x28c>)
   18386:	4798      	blx	r3
   18388:	0002      	movs	r2, r0
   1838a:	236e      	movs	r3, #110	; 0x6e
   1838c:	18fb      	adds	r3, r7, r3
   1838e:	881b      	ldrh	r3, [r3, #0]
   18390:	1ad3      	subs	r3, r2, r3
   18392:	2b3c      	cmp	r3, #60	; 0x3c
   18394:	d911      	bls.n	183ba <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   18396:	2374      	movs	r3, #116	; 0x74
   18398:	18fb      	adds	r3, r7, r3
   1839a:	226e      	movs	r2, #110	; 0x6e
   1839c:	18ba      	adds	r2, r7, r2
   1839e:	8812      	ldrh	r2, [r2, #0]
   183a0:	213c      	movs	r1, #60	; 0x3c
   183a2:	1a8a      	subs	r2, r1, r2
   183a4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   183a6:	2374      	movs	r3, #116	; 0x74
   183a8:	18fb      	adds	r3, r7, r3
   183aa:	881a      	ldrh	r2, [r3, #0]
   183ac:	68b9      	ldr	r1, [r7, #8]
   183ae:	2324      	movs	r3, #36	; 0x24
   183b0:	18fb      	adds	r3, r7, r3
   183b2:	0018      	movs	r0, r3
   183b4:	4b60      	ldr	r3, [pc, #384]	; (18538 <rename_to_unique+0x298>)
   183b6:	4798      	blx	r3
   183b8:	e02a      	b.n	18410 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   183ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
   183bc:	68bb      	ldr	r3, [r7, #8]
   183be:	1ad2      	subs	r2, r2, r3
   183c0:	2374      	movs	r3, #116	; 0x74
   183c2:	18fb      	adds	r3, r7, r3
   183c4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   183c6:	2374      	movs	r3, #116	; 0x74
   183c8:	18fb      	adds	r3, r7, r3
   183ca:	881a      	ldrh	r2, [r3, #0]
   183cc:	68b9      	ldr	r1, [r7, #8]
   183ce:	2324      	movs	r3, #36	; 0x24
   183d0:	18fb      	adds	r3, r7, r3
   183d2:	0018      	movs	r0, r3
   183d4:	4b58      	ldr	r3, [pc, #352]	; (18538 <rename_to_unique+0x298>)
   183d6:	4798      	blx	r3
   183d8:	e01a      	b.n	18410 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   183da:	2374      	movs	r3, #116	; 0x74
   183dc:	18fb      	adds	r3, r7, r3
   183de:	223c      	movs	r2, #60	; 0x3c
   183e0:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   183e2:	2374      	movs	r3, #116	; 0x74
   183e4:	18fb      	adds	r3, r7, r3
   183e6:	881a      	ldrh	r2, [r3, #0]
   183e8:	68b9      	ldr	r1, [r7, #8]
   183ea:	2324      	movs	r3, #36	; 0x24
   183ec:	18fb      	adds	r3, r7, r3
   183ee:	0018      	movs	r0, r3
   183f0:	4b51      	ldr	r3, [pc, #324]	; (18538 <rename_to_unique+0x298>)
   183f2:	4798      	blx	r3
   183f4:	e00c      	b.n	18410 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   183f6:	2374      	movs	r3, #116	; 0x74
   183f8:	18fb      	adds	r3, r7, r3
   183fa:	223c      	movs	r2, #60	; 0x3c
   183fc:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   183fe:	2374      	movs	r3, #116	; 0x74
   18400:	18fb      	adds	r3, r7, r3
   18402:	881a      	ldrh	r2, [r3, #0]
   18404:	68b9      	ldr	r1, [r7, #8]
   18406:	2324      	movs	r3, #36	; 0x24
   18408:	18fb      	adds	r3, r7, r3
   1840a:	0018      	movs	r0, r3
   1840c:	4b4a      	ldr	r3, [pc, #296]	; (18538 <rename_to_unique+0x298>)
   1840e:	4798      	blx	r3
    }

    name[name_len++] = '-';
   18410:	2374      	movs	r3, #116	; 0x74
   18412:	18fb      	adds	r3, r7, r3
   18414:	881b      	ldrh	r3, [r3, #0]
   18416:	2274      	movs	r2, #116	; 0x74
   18418:	18ba      	adds	r2, r7, r2
   1841a:	1c59      	adds	r1, r3, #1
   1841c:	8011      	strh	r1, [r2, #0]
   1841e:	001a      	movs	r2, r3
   18420:	2324      	movs	r3, #36	; 0x24
   18422:	18fb      	adds	r3, r7, r3
   18424:	212d      	movs	r1, #45	; 0x2d
   18426:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   18428:	2376      	movs	r3, #118	; 0x76
   1842a:	18fb      	adds	r3, r7, r3
   1842c:	2200      	movs	r2, #0
   1842e:	801a      	strh	r2, [r3, #0]
   18430:	2372      	movs	r3, #114	; 0x72
   18432:	18fb      	adds	r3, r7, r3
   18434:	2201      	movs	r2, #1
   18436:	801a      	strh	r2, [r3, #0]
   18438:	e010      	b.n	1845c <rename_to_unique+0x1bc>
        count *= 10;
   1843a:	2372      	movs	r3, #114	; 0x72
   1843c:	18fa      	adds	r2, r7, r3
   1843e:	2372      	movs	r3, #114	; 0x72
   18440:	18fb      	adds	r3, r7, r3
   18442:	881b      	ldrh	r3, [r3, #0]
   18444:	1c19      	adds	r1, r3, #0
   18446:	0089      	lsls	r1, r1, #2
   18448:	18cb      	adds	r3, r1, r3
   1844a:	18db      	adds	r3, r3, r3
   1844c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1844e:	2376      	movs	r3, #118	; 0x76
   18450:	18fb      	adds	r3, r7, r3
   18452:	881a      	ldrh	r2, [r3, #0]
   18454:	2376      	movs	r3, #118	; 0x76
   18456:	18fb      	adds	r3, r7, r3
   18458:	3201      	adds	r2, #1
   1845a:	801a      	strh	r2, [r3, #0]
   1845c:	2376      	movs	r3, #118	; 0x76
   1845e:	18fb      	adds	r3, r7, r3
   18460:	881b      	ldrh	r3, [r3, #0]
   18462:	2b02      	cmp	r3, #2
   18464:	d9e9      	bls.n	1843a <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   18466:	2376      	movs	r3, #118	; 0x76
   18468:	18fb      	adds	r3, r7, r3
   1846a:	2201      	movs	r2, #1
   1846c:	801a      	strh	r2, [r3, #0]
   1846e:	e04b      	b.n	18508 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   18470:	2376      	movs	r3, #118	; 0x76
   18472:	18fb      	adds	r3, r7, r3
   18474:	881a      	ldrh	r2, [r3, #0]
   18476:	4931      	ldr	r1, [pc, #196]	; (1853c <rename_to_unique+0x29c>)
   18478:	2314      	movs	r3, #20
   1847a:	18fb      	adds	r3, r7, r3
   1847c:	0018      	movs	r0, r3
   1847e:	4b30      	ldr	r3, [pc, #192]	; (18540 <rename_to_unique+0x2a0>)
   18480:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   18482:	2374      	movs	r3, #116	; 0x74
   18484:	18fb      	adds	r3, r7, r3
   18486:	881b      	ldrh	r3, [r3, #0]
   18488:	2224      	movs	r2, #36	; 0x24
   1848a:	18ba      	adds	r2, r7, r2
   1848c:	18d3      	adds	r3, r2, r3
   1848e:	2214      	movs	r2, #20
   18490:	18b9      	adds	r1, r7, r2
   18492:	2203      	movs	r2, #3
   18494:	0018      	movs	r0, r3
   18496:	4b28      	ldr	r3, [pc, #160]	; (18538 <rename_to_unique+0x298>)
   18498:	4798      	blx	r3
        if (valid_ext) {
   1849a:	2371      	movs	r3, #113	; 0x71
   1849c:	18fb      	adds	r3, r7, r3
   1849e:	781b      	ldrb	r3, [r3, #0]
   184a0:	2b00      	cmp	r3, #0
   184a2:	d00c      	beq.n	184be <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   184a4:	2374      	movs	r3, #116	; 0x74
   184a6:	18fb      	adds	r3, r7, r3
   184a8:	881b      	ldrh	r3, [r3, #0]
   184aa:	3303      	adds	r3, #3
   184ac:	2224      	movs	r2, #36	; 0x24
   184ae:	18ba      	adds	r2, r7, r2
   184b0:	18d3      	adds	r3, r2, r3
   184b2:	2218      	movs	r2, #24
   184b4:	18ba      	adds	r2, r7, r2
   184b6:	0011      	movs	r1, r2
   184b8:	0018      	movs	r0, r3
   184ba:	4b1e      	ldr	r3, [pc, #120]	; (18534 <rename_to_unique+0x294>)
   184bc:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   184be:	2324      	movs	r3, #36	; 0x24
   184c0:	18fa      	adds	r2, r7, r3
   184c2:	68fb      	ldr	r3, [r7, #12]
   184c4:	0011      	movs	r1, r2
   184c6:	0018      	movs	r0, r3
   184c8:	4b17      	ldr	r3, [pc, #92]	; (18528 <rename_to_unique+0x288>)
   184ca:	4798      	blx	r3
   184cc:	0003      	movs	r3, r0
   184ce:	001a      	movs	r2, r3
   184d0:	2301      	movs	r3, #1
   184d2:	4053      	eors	r3, r2
   184d4:	b2db      	uxtb	r3, r3
   184d6:	2b00      	cmp	r3, #0
   184d8:	d00f      	beq.n	184fa <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   184da:	1dfb      	adds	r3, r7, #7
   184dc:	781a      	ldrb	r2, [r3, #0]
   184de:	68bb      	ldr	r3, [r7, #8]
   184e0:	2100      	movs	r1, #0
   184e2:	0018      	movs	r0, r3
   184e4:	4b0f      	ldr	r3, [pc, #60]	; (18524 <rename_to_unique+0x284>)
   184e6:	4798      	blx	r3
            strcpy(file_path_name, name);
   184e8:	2324      	movs	r3, #36	; 0x24
   184ea:	18fa      	adds	r2, r7, r3
   184ec:	68bb      	ldr	r3, [r7, #8]
   184ee:	0011      	movs	r1, r2
   184f0:	0018      	movs	r0, r3
   184f2:	4b10      	ldr	r3, [pc, #64]	; (18534 <rename_to_unique+0x294>)
   184f4:	4798      	blx	r3
            return true;
   184f6:	2301      	movs	r3, #1
   184f8:	e00f      	b.n	1851a <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   184fa:	2376      	movs	r3, #118	; 0x76
   184fc:	18fb      	adds	r3, r7, r3
   184fe:	881a      	ldrh	r2, [r3, #0]
   18500:	2376      	movs	r3, #118	; 0x76
   18502:	18fb      	adds	r3, r7, r3
   18504:	3201      	adds	r2, #1
   18506:	801a      	strh	r2, [r3, #0]
   18508:	2376      	movs	r3, #118	; 0x76
   1850a:	18fa      	adds	r2, r7, r3
   1850c:	2372      	movs	r3, #114	; 0x72
   1850e:	18fb      	adds	r3, r7, r3
   18510:	8812      	ldrh	r2, [r2, #0]
   18512:	881b      	ldrh	r3, [r3, #0]
   18514:	429a      	cmp	r2, r3
   18516:	d3ab      	bcc.n	18470 <rename_to_unique+0x1d0>
        }
    }
    return false;
   18518:	2300      	movs	r3, #0
}
   1851a:	0018      	movs	r0, r3
   1851c:	46bd      	mov	sp, r7
   1851e:	b01e      	add	sp, #120	; 0x78
   18520:	bd80      	pop	{r7, pc}
   18522:	46c0      	nop			; (mov r8, r8)
   18524:	0003796b 	.word	0x0003796b
   18528:	00018249 	.word	0x00018249
   1852c:	00037d23 	.word	0x00037d23
   18530:	00037d7d 	.word	0x00037d7d
   18534:	00037cd7 	.word	0x00037cd7
   18538:	00037d53 	.word	0x00037d53
   1853c:	0003963c 	.word	0x0003963c
   18540:	00037c29 	.word	0x00037c29

00018544 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   18544:	b590      	push	{r4, r7, lr}
   18546:	b083      	sub	sp, #12
   18548:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   1854a:	2001      	movs	r0, #1
   1854c:	4b22      	ldr	r3, [pc, #136]	; (185d8 <start_download+0x94>)
   1854e:	4798      	blx	r3
   18550:	0003      	movs	r3, r0
   18552:	001a      	movs	r2, r3
   18554:	2301      	movs	r3, #1
   18556:	4053      	eors	r3, r2
   18558:	b2db      	uxtb	r3, r3
   1855a:	2b00      	cmp	r3, #0
   1855c:	d005      	beq.n	1856a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1855e:	4b1f      	ldr	r3, [pc, #124]	; (185dc <start_download+0x98>)
   18560:	0019      	movs	r1, r3
   18562:	2001      	movs	r0, #1
   18564:	4b1e      	ldr	r3, [pc, #120]	; (185e0 <start_download+0x9c>)
   18566:	4798      	blx	r3
        return;
   18568:	e032      	b.n	185d0 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1856a:	2002      	movs	r0, #2
   1856c:	4b1a      	ldr	r3, [pc, #104]	; (185d8 <start_download+0x94>)
   1856e:	4798      	blx	r3
   18570:	0003      	movs	r3, r0
   18572:	001a      	movs	r2, r3
   18574:	2301      	movs	r3, #1
   18576:	4053      	eors	r3, r2
   18578:	b2db      	uxtb	r3, r3
   1857a:	2b00      	cmp	r3, #0
   1857c:	d005      	beq.n	1858a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1857e:	4b19      	ldr	r3, [pc, #100]	; (185e4 <start_download+0xa0>)
   18580:	0019      	movs	r1, r3
   18582:	2001      	movs	r0, #1
   18584:	4b16      	ldr	r3, [pc, #88]	; (185e0 <start_download+0x9c>)
   18586:	4798      	blx	r3
        return;
   18588:	e022      	b.n	185d0 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1858a:	2004      	movs	r0, #4
   1858c:	4b12      	ldr	r3, [pc, #72]	; (185d8 <start_download+0x94>)
   1858e:	4798      	blx	r3
   18590:	1e03      	subs	r3, r0, #0
   18592:	d005      	beq.n	185a0 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   18594:	4b14      	ldr	r3, [pc, #80]	; (185e8 <start_download+0xa4>)
   18596:	0019      	movs	r1, r3
   18598:	2001      	movs	r0, #1
   1859a:	4b11      	ldr	r3, [pc, #68]	; (185e0 <start_download+0x9c>)
   1859c:	4798      	blx	r3
        return;
   1859e:	e017      	b.n	185d0 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   185a0:	2008      	movs	r0, #8
   185a2:	4b0d      	ldr	r3, [pc, #52]	; (185d8 <start_download+0x94>)
   185a4:	4798      	blx	r3
   185a6:	1e03      	subs	r3, r0, #0
   185a8:	d005      	beq.n	185b6 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   185aa:	4b10      	ldr	r3, [pc, #64]	; (185ec <start_download+0xa8>)
   185ac:	0019      	movs	r1, r3
   185ae:	2001      	movs	r0, #1
   185b0:	4b0b      	ldr	r3, [pc, #44]	; (185e0 <start_download+0x9c>)
   185b2:	4798      	blx	r3
        return;
   185b4:	e00c      	b.n	185d0 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   185b6:	4b0e      	ldr	r3, [pc, #56]	; (185f0 <start_download+0xac>)
   185b8:	0019      	movs	r1, r3
   185ba:	2001      	movs	r0, #1
   185bc:	4b08      	ldr	r3, [pc, #32]	; (185e0 <start_download+0x9c>)
   185be:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   185c0:	490c      	ldr	r1, [pc, #48]	; (185f4 <start_download+0xb0>)
   185c2:	480d      	ldr	r0, [pc, #52]	; (185f8 <start_download+0xb4>)
   185c4:	2300      	movs	r3, #0
   185c6:	9300      	str	r3, [sp, #0]
   185c8:	2300      	movs	r3, #0
   185ca:	2201      	movs	r2, #1
   185cc:	4c0b      	ldr	r4, [pc, #44]	; (185fc <start_download+0xb8>)
   185ce:	47a0      	blx	r4
}
   185d0:	46bd      	mov	sp, r7
   185d2:	b001      	add	sp, #4
   185d4:	bd90      	pop	{r4, r7, pc}
   185d6:	46c0      	nop			; (mov r8, r8)
   185d8:	0001821d 	.word	0x0001821d
   185dc:	00039644 	.word	0x00039644
   185e0:	000202f1 	.word	0x000202f1
   185e4:	00039670 	.word	0x00039670
   185e8:	0003969c 	.word	0x0003969c
   185ec:	000396c8 	.word	0x000396c8
   185f0:	000396f4 	.word	0x000396f4
   185f4:	00039720 	.word	0x00039720
   185f8:	200047b4 	.word	0x200047b4
   185fc:	000333d9 	.word	0x000333d9

00018600 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   18600:	b5b0      	push	{r4, r5, r7, lr}
   18602:	b086      	sub	sp, #24
   18604:	af00      	add	r7, sp, #0
   18606:	6078      	str	r0, [r7, #4]
   18608:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   1860a:	687b      	ldr	r3, [r7, #4]
   1860c:	2b00      	cmp	r3, #0
   1860e:	d002      	beq.n	18616 <store_file_packet+0x16>
   18610:	683b      	ldr	r3, [r7, #0]
   18612:	2b00      	cmp	r3, #0
   18614:	d105      	bne.n	18622 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   18616:	4b58      	ldr	r3, [pc, #352]	; (18778 <store_file_packet+0x178>)
   18618:	0019      	movs	r1, r3
   1861a:	2001      	movs	r0, #1
   1861c:	4b57      	ldr	r3, [pc, #348]	; (1877c <store_file_packet+0x17c>)
   1861e:	4798      	blx	r3
        return;
   18620:	e0a6      	b.n	18770 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   18622:	2008      	movs	r0, #8
   18624:	4b56      	ldr	r3, [pc, #344]	; (18780 <store_file_packet+0x180>)
   18626:	4798      	blx	r3
   18628:	0003      	movs	r3, r0
   1862a:	001a      	movs	r2, r3
   1862c:	2301      	movs	r3, #1
   1862e:	4053      	eors	r3, r2
   18630:	b2db      	uxtb	r3, r3
   18632:	2b00      	cmp	r3, #0
   18634:	d055      	beq.n	186e2 <store_file_packet+0xe2>
        char *cp = NULL;
   18636:	2300      	movs	r3, #0
   18638:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1863a:	4b52      	ldr	r3, [pc, #328]	; (18784 <store_file_packet+0x184>)
   1863c:	2230      	movs	r2, #48	; 0x30
   1863e:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   18640:	4b50      	ldr	r3, [pc, #320]	; (18784 <store_file_packet+0x184>)
   18642:	223a      	movs	r2, #58	; 0x3a
   18644:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   18646:	4b50      	ldr	r3, [pc, #320]	; (18788 <store_file_packet+0x188>)
   18648:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1864a:	e002      	b.n	18652 <store_file_packet+0x52>
            cp--;
   1864c:	697b      	ldr	r3, [r7, #20]
   1864e:	3b01      	subs	r3, #1
   18650:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   18652:	697b      	ldr	r3, [r7, #20]
   18654:	781b      	ldrb	r3, [r3, #0]
   18656:	2b2f      	cmp	r3, #47	; 0x2f
   18658:	d1f8      	bne.n	1864c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   1865a:	697b      	ldr	r3, [r7, #20]
   1865c:	0018      	movs	r0, r3
   1865e:	4b4b      	ldr	r3, [pc, #300]	; (1878c <store_file_packet+0x18c>)
   18660:	4798      	blx	r3
   18662:	0003      	movs	r3, r0
   18664:	2b01      	cmp	r3, #1
   18666:	d924      	bls.n	186b2 <store_file_packet+0xb2>
            cp++;
   18668:	697b      	ldr	r3, [r7, #20]
   1866a:	3301      	adds	r3, #1
   1866c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1866e:	697a      	ldr	r2, [r7, #20]
   18670:	4b47      	ldr	r3, [pc, #284]	; (18790 <store_file_packet+0x190>)
   18672:	0011      	movs	r1, r2
   18674:	0018      	movs	r0, r3
   18676:	4b47      	ldr	r3, [pc, #284]	; (18794 <store_file_packet+0x194>)
   18678:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1867a:	4942      	ldr	r1, [pc, #264]	; (18784 <store_file_packet+0x184>)
   1867c:	4b46      	ldr	r3, [pc, #280]	; (18798 <store_file_packet+0x198>)
   1867e:	2240      	movs	r2, #64	; 0x40
   18680:	0018      	movs	r0, r3
   18682:	4b46      	ldr	r3, [pc, #280]	; (1879c <store_file_packet+0x19c>)
   18684:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   18686:	4a3f      	ldr	r2, [pc, #252]	; (18784 <store_file_packet+0x184>)
   18688:	4b45      	ldr	r3, [pc, #276]	; (187a0 <store_file_packet+0x1a0>)
   1868a:	0019      	movs	r1, r3
   1868c:	2001      	movs	r0, #1
   1868e:	4b3b      	ldr	r3, [pc, #236]	; (1877c <store_file_packet+0x17c>)
   18690:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   18692:	2313      	movs	r3, #19
   18694:	18fc      	adds	r4, r7, r3
   18696:	493b      	ldr	r1, [pc, #236]	; (18784 <store_file_packet+0x184>)
   18698:	4b3f      	ldr	r3, [pc, #252]	; (18798 <store_file_packet+0x198>)
   1869a:	220a      	movs	r2, #10
   1869c:	0018      	movs	r0, r3
   1869e:	4b41      	ldr	r3, [pc, #260]	; (187a4 <store_file_packet+0x1a4>)
   186a0:	4798      	blx	r3
   186a2:	0003      	movs	r3, r0
   186a4:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   186a6:	2313      	movs	r3, #19
   186a8:	18fb      	adds	r3, r7, r3
   186aa:	781b      	ldrb	r3, [r3, #0]
   186ac:	2b00      	cmp	r3, #0
   186ae:	d012      	beq.n	186d6 <store_file_packet+0xd6>
   186b0:	e008      	b.n	186c4 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   186b2:	4b3d      	ldr	r3, [pc, #244]	; (187a8 <store_file_packet+0x1a8>)
   186b4:	0019      	movs	r1, r3
   186b6:	2001      	movs	r0, #1
   186b8:	4b30      	ldr	r3, [pc, #192]	; (1877c <store_file_packet+0x17c>)
   186ba:	4798      	blx	r3
            add_state(CANCELED);
   186bc:	2020      	movs	r0, #32
   186be:	4b3b      	ldr	r3, [pc, #236]	; (187ac <store_file_packet+0x1ac>)
   186c0:	4798      	blx	r3
            return;
   186c2:	e055      	b.n	18770 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   186c4:	2313      	movs	r3, #19
   186c6:	18fb      	adds	r3, r7, r3
   186c8:	781a      	ldrb	r2, [r3, #0]
   186ca:	4b39      	ldr	r3, [pc, #228]	; (187b0 <store_file_packet+0x1b0>)
   186cc:	0019      	movs	r1, r3
   186ce:	2001      	movs	r0, #1
   186d0:	4b2a      	ldr	r3, [pc, #168]	; (1877c <store_file_packet+0x17c>)
   186d2:	4798      	blx	r3
            return;
   186d4:	e04c      	b.n	18770 <store_file_packet+0x170>
        }

        received_file_size = 0;
   186d6:	4b37      	ldr	r3, [pc, #220]	; (187b4 <store_file_packet+0x1b4>)
   186d8:	2200      	movs	r2, #0
   186da:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   186dc:	2008      	movs	r0, #8
   186de:	4b33      	ldr	r3, [pc, #204]	; (187ac <store_file_packet+0x1ac>)
   186e0:	4798      	blx	r3
    }

    if (data != NULL) {
   186e2:	687b      	ldr	r3, [r7, #4]
   186e4:	2b00      	cmp	r3, #0
   186e6:	d043      	beq.n	18770 <store_file_packet+0x170>
        UINT wsize = 0;
   186e8:	2300      	movs	r3, #0
   186ea:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   186ec:	2313      	movs	r3, #19
   186ee:	18fc      	adds	r4, r7, r3
   186f0:	230c      	movs	r3, #12
   186f2:	18fb      	adds	r3, r7, r3
   186f4:	683a      	ldr	r2, [r7, #0]
   186f6:	6879      	ldr	r1, [r7, #4]
   186f8:	4827      	ldr	r0, [pc, #156]	; (18798 <store_file_packet+0x198>)
   186fa:	4d2f      	ldr	r5, [pc, #188]	; (187b8 <store_file_packet+0x1b8>)
   186fc:	47a8      	blx	r5
   186fe:	0003      	movs	r3, r0
   18700:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   18702:	2313      	movs	r3, #19
   18704:	18fb      	adds	r3, r7, r3
   18706:	781b      	ldrb	r3, [r3, #0]
   18708:	2b00      	cmp	r3, #0
   1870a:	d00c      	beq.n	18726 <store_file_packet+0x126>
            f_close(&file_object);
   1870c:	4b22      	ldr	r3, [pc, #136]	; (18798 <store_file_packet+0x198>)
   1870e:	0018      	movs	r0, r3
   18710:	4b2a      	ldr	r3, [pc, #168]	; (187bc <store_file_packet+0x1bc>)
   18712:	4798      	blx	r3
            add_state(CANCELED);
   18714:	2020      	movs	r0, #32
   18716:	4b25      	ldr	r3, [pc, #148]	; (187ac <store_file_packet+0x1ac>)
   18718:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   1871a:	4b29      	ldr	r3, [pc, #164]	; (187c0 <store_file_packet+0x1c0>)
   1871c:	0019      	movs	r1, r3
   1871e:	2001      	movs	r0, #1
   18720:	4b16      	ldr	r3, [pc, #88]	; (1877c <store_file_packet+0x17c>)
   18722:	4798      	blx	r3
            return;
   18724:	e024      	b.n	18770 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   18726:	4b23      	ldr	r3, [pc, #140]	; (187b4 <store_file_packet+0x1b4>)
   18728:	681a      	ldr	r2, [r3, #0]
   1872a:	68fb      	ldr	r3, [r7, #12]
   1872c:	18d2      	adds	r2, r2, r3
   1872e:	4b21      	ldr	r3, [pc, #132]	; (187b4 <store_file_packet+0x1b4>)
   18730:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   18732:	4b20      	ldr	r3, [pc, #128]	; (187b4 <store_file_packet+0x1b4>)
   18734:	681a      	ldr	r2, [r3, #0]
   18736:	4b23      	ldr	r3, [pc, #140]	; (187c4 <store_file_packet+0x1c4>)
   18738:	681b      	ldr	r3, [r3, #0]
   1873a:	4923      	ldr	r1, [pc, #140]	; (187c8 <store_file_packet+0x1c8>)
   1873c:	2001      	movs	r0, #1
   1873e:	4c0f      	ldr	r4, [pc, #60]	; (1877c <store_file_packet+0x17c>)
   18740:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   18742:	4b1c      	ldr	r3, [pc, #112]	; (187b4 <store_file_packet+0x1b4>)
   18744:	681a      	ldr	r2, [r3, #0]
   18746:	4b1f      	ldr	r3, [pc, #124]	; (187c4 <store_file_packet+0x1c4>)
   18748:	681b      	ldr	r3, [r3, #0]
   1874a:	429a      	cmp	r2, r3
   1874c:	d310      	bcc.n	18770 <store_file_packet+0x170>
            f_close(&file_object);
   1874e:	4b12      	ldr	r3, [pc, #72]	; (18798 <store_file_packet+0x198>)
   18750:	0018      	movs	r0, r3
   18752:	4b1a      	ldr	r3, [pc, #104]	; (187bc <store_file_packet+0x1bc>)
   18754:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   18756:	4b1d      	ldr	r3, [pc, #116]	; (187cc <store_file_packet+0x1cc>)
   18758:	0019      	movs	r1, r3
   1875a:	2001      	movs	r0, #1
   1875c:	4b07      	ldr	r3, [pc, #28]	; (1877c <store_file_packet+0x17c>)
   1875e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   18760:	2100      	movs	r1, #0
   18762:	2017      	movs	r0, #23
   18764:	4b1a      	ldr	r3, [pc, #104]	; (187d0 <store_file_packet+0x1d0>)
   18766:	4798      	blx	r3
            add_state(COMPLETED);
   18768:	2010      	movs	r0, #16
   1876a:	4b10      	ldr	r3, [pc, #64]	; (187ac <store_file_packet+0x1ac>)
   1876c:	4798      	blx	r3
            return;
   1876e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   18770:	46bd      	mov	sp, r7
   18772:	b006      	add	sp, #24
   18774:	bdb0      	pop	{r4, r5, r7, pc}
   18776:	46c0      	nop			; (mov r8, r8)
   18778:	0003974c 	.word	0x0003974c
   1877c:	000202f1 	.word	0x000202f1
   18780:	0001821d 	.word	0x0001821d
   18784:	200000bc 	.word	0x200000bc
   18788:	0003974a 	.word	0x0003974a
   1878c:	00037d23 	.word	0x00037d23
   18790:	200000be 	.word	0x200000be
   18794:	00037cd7 	.word	0x00037cd7
   18798:	20000710 	.word	0x20000710
   1879c:	000182a1 	.word	0x000182a1
   187a0:	000397b0 	.word	0x000397b0
   187a4:	0002fd85 	.word	0x0002fd85
   187a8:	00039770 	.word	0x00039770
   187ac:	000181f5 	.word	0x000181f5
   187b0:	000397d8 	.word	0x000397d8
   187b4:	20000738 	.word	0x20000738
   187b8:	000302b5 	.word	0x000302b5
   187bc:	00030785 	.word	0x00030785
   187c0:	0003980c 	.word	0x0003980c
   187c4:	20000734 	.word	0x20000734
   187c8:	00039848 	.word	0x00039848
   187cc:	0003987c 	.word	0x0003987c
   187d0:	00018159 	.word	0x00018159

000187d4 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   187d4:	b590      	push	{r4, r7, lr}
   187d6:	b085      	sub	sp, #20
   187d8:	af00      	add	r7, sp, #0
   187da:	60f8      	str	r0, [r7, #12]
   187dc:	60b9      	str	r1, [r7, #8]
   187de:	607a      	str	r2, [r7, #4]
    switch (type) {
   187e0:	68bb      	ldr	r3, [r7, #8]
   187e2:	2b04      	cmp	r3, #4
   187e4:	d900      	bls.n	187e8 <http_client_callback+0x14>
   187e6:	e077      	b.n	188d8 <http_client_callback+0x104>
   187e8:	68bb      	ldr	r3, [r7, #8]
   187ea:	009a      	lsls	r2, r3, #2
   187ec:	4b3c      	ldr	r3, [pc, #240]	; (188e0 <http_client_callback+0x10c>)
   187ee:	18d3      	adds	r3, r2, r3
   187f0:	681b      	ldr	r3, [r3, #0]
   187f2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   187f4:	4b3b      	ldr	r3, [pc, #236]	; (188e4 <http_client_callback+0x110>)
   187f6:	0019      	movs	r1, r3
   187f8:	2001      	movs	r0, #1
   187fa:	4b3b      	ldr	r3, [pc, #236]	; (188e8 <http_client_callback+0x114>)
   187fc:	4798      	blx	r3
            break;
   187fe:	e06b      	b.n	188d8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   18800:	4b3a      	ldr	r3, [pc, #232]	; (188ec <http_client_callback+0x118>)
   18802:	0019      	movs	r1, r3
   18804:	2001      	movs	r0, #1
   18806:	4b38      	ldr	r3, [pc, #224]	; (188e8 <http_client_callback+0x114>)
   18808:	4798      	blx	r3
            add_state(GET_REQUESTED);
   1880a:	2004      	movs	r0, #4
   1880c:	4b38      	ldr	r3, [pc, #224]	; (188f0 <http_client_callback+0x11c>)
   1880e:	4798      	blx	r3
            break;
   18810:	e062      	b.n	188d8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   18812:	687b      	ldr	r3, [r7, #4]
   18814:	881b      	ldrh	r3, [r3, #0]
   18816:	001a      	movs	r2, r3
   18818:	687b      	ldr	r3, [r7, #4]
   1881a:	685b      	ldr	r3, [r3, #4]
   1881c:	4935      	ldr	r1, [pc, #212]	; (188f4 <http_client_callback+0x120>)
   1881e:	2001      	movs	r0, #1
   18820:	4c31      	ldr	r4, [pc, #196]	; (188e8 <http_client_callback+0x114>)
   18822:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   18824:	687b      	ldr	r3, [r7, #4]
   18826:	881b      	ldrh	r3, [r3, #0]
   18828:	2bc8      	cmp	r3, #200	; 0xc8
   1882a:	d10d      	bne.n	18848 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   1882c:	687b      	ldr	r3, [r7, #4]
   1882e:	685a      	ldr	r2, [r3, #4]
   18830:	4b31      	ldr	r3, [pc, #196]	; (188f8 <http_client_callback+0x124>)
   18832:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   18834:	4b31      	ldr	r3, [pc, #196]	; (188fc <http_client_callback+0x128>)
   18836:	2200      	movs	r2, #0
   18838:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   1883a:	687b      	ldr	r3, [r7, #4]
   1883c:	685a      	ldr	r2, [r3, #4]
   1883e:	2380      	movs	r3, #128	; 0x80
   18840:	009b      	lsls	r3, r3, #2
   18842:	429a      	cmp	r2, r3
   18844:	d843      	bhi.n	188ce <http_client_callback+0xfa>
   18846:	e003      	b.n	18850 <http_client_callback+0x7c>
                add_state(CANCELED);
   18848:	2020      	movs	r0, #32
   1884a:	4b29      	ldr	r3, [pc, #164]	; (188f0 <http_client_callback+0x11c>)
   1884c:	4798      	blx	r3
                return;
   1884e:	e043      	b.n	188d8 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   18850:	687b      	ldr	r3, [r7, #4]
   18852:	689a      	ldr	r2, [r3, #8]
   18854:	687b      	ldr	r3, [r7, #4]
   18856:	685b      	ldr	r3, [r3, #4]
   18858:	0019      	movs	r1, r3
   1885a:	0010      	movs	r0, r2
   1885c:	4b28      	ldr	r3, [pc, #160]	; (18900 <http_client_callback+0x12c>)
   1885e:	4798      	blx	r3
                add_state(COMPLETED);
   18860:	2010      	movs	r0, #16
   18862:	4b23      	ldr	r3, [pc, #140]	; (188f0 <http_client_callback+0x11c>)
   18864:	4798      	blx	r3
            }
            break;
   18866:	e032      	b.n	188ce <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   18868:	687b      	ldr	r3, [r7, #4]
   1886a:	685a      	ldr	r2, [r3, #4]
   1886c:	687b      	ldr	r3, [r7, #4]
   1886e:	681b      	ldr	r3, [r3, #0]
   18870:	0019      	movs	r1, r3
   18872:	0010      	movs	r0, r2
   18874:	4b22      	ldr	r3, [pc, #136]	; (18900 <http_client_callback+0x12c>)
   18876:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   18878:	687b      	ldr	r3, [r7, #4]
   1887a:	7a1b      	ldrb	r3, [r3, #8]
   1887c:	2b00      	cmp	r3, #0
   1887e:	d028      	beq.n	188d2 <http_client_callback+0xfe>
                add_state(COMPLETED);
   18880:	2010      	movs	r0, #16
   18882:	4b1b      	ldr	r3, [pc, #108]	; (188f0 <http_client_callback+0x11c>)
   18884:	4798      	blx	r3
            }

            break;
   18886:	e024      	b.n	188d2 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   18888:	687b      	ldr	r3, [r7, #4]
   1888a:	681a      	ldr	r2, [r3, #0]
   1888c:	4b1d      	ldr	r3, [pc, #116]	; (18904 <http_client_callback+0x130>)
   1888e:	0019      	movs	r1, r3
   18890:	2001      	movs	r0, #1
   18892:	4b15      	ldr	r3, [pc, #84]	; (188e8 <http_client_callback+0x114>)
   18894:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   18896:	687b      	ldr	r3, [r7, #4]
   18898:	681b      	ldr	r3, [r3, #0]
   1889a:	330b      	adds	r3, #11
   1889c:	d11b      	bne.n	188d6 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1889e:	2008      	movs	r0, #8
   188a0:	4b19      	ldr	r3, [pc, #100]	; (18908 <http_client_callback+0x134>)
   188a2:	4798      	blx	r3
   188a4:	1e03      	subs	r3, r0, #0
   188a6:	d006      	beq.n	188b6 <http_client_callback+0xe2>
                    f_close(&file_object);
   188a8:	4b18      	ldr	r3, [pc, #96]	; (1890c <http_client_callback+0x138>)
   188aa:	0018      	movs	r0, r3
   188ac:	4b18      	ldr	r3, [pc, #96]	; (18910 <http_client_callback+0x13c>)
   188ae:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   188b0:	2008      	movs	r0, #8
   188b2:	4b18      	ldr	r3, [pc, #96]	; (18914 <http_client_callback+0x140>)
   188b4:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   188b6:	2004      	movs	r0, #4
   188b8:	4b13      	ldr	r3, [pc, #76]	; (18908 <http_client_callback+0x134>)
   188ba:	4798      	blx	r3
   188bc:	1e03      	subs	r3, r0, #0
   188be:	d002      	beq.n	188c6 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   188c0:	2004      	movs	r0, #4
   188c2:	4b14      	ldr	r3, [pc, #80]	; (18914 <http_client_callback+0x140>)
   188c4:	4798      	blx	r3
                }

                start_download();
   188c6:	4b14      	ldr	r3, [pc, #80]	; (18918 <http_client_callback+0x144>)
   188c8:	4798      	blx	r3
            }

            break;
   188ca:	46c0      	nop			; (mov r8, r8)
   188cc:	e003      	b.n	188d6 <http_client_callback+0x102>
            break;
   188ce:	46c0      	nop			; (mov r8, r8)
   188d0:	e002      	b.n	188d8 <http_client_callback+0x104>
            break;
   188d2:	46c0      	nop			; (mov r8, r8)
   188d4:	e000      	b.n	188d8 <http_client_callback+0x104>
            break;
   188d6:	46c0      	nop			; (mov r8, r8)
    }
}
   188d8:	46bd      	mov	sp, r7
   188da:	b005      	add	sp, #20
   188dc:	bd90      	pop	{r4, r7, pc}
   188de:	46c0      	nop			; (mov r8, r8)
   188e0:	0003a030 	.word	0x0003a030
   188e4:	000398b0 	.word	0x000398b0
   188e8:	000202f1 	.word	0x000202f1
   188ec:	000398e8 	.word	0x000398e8
   188f0:	000181f5 	.word	0x000181f5
   188f4:	00039914 	.word	0x00039914
   188f8:	20000734 	.word	0x20000734
   188fc:	20000738 	.word	0x20000738
   18900:	00018601 	.word	0x00018601
   18904:	00039950 	.word	0x00039950
   18908:	0001821d 	.word	0x0001821d
   1890c:	20000710 	.word	0x20000710
   18910:	00030785 	.word	0x00030785
   18914:	000181c1 	.word	0x000181c1
   18918:	00018545 	.word	0x00018545

0001891c <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1891c:	b580      	push	{r7, lr}
   1891e:	b082      	sub	sp, #8
   18920:	af00      	add	r7, sp, #0
   18922:	603a      	str	r2, [r7, #0]
   18924:	1dfb      	adds	r3, r7, #7
   18926:	1c02      	adds	r2, r0, #0
   18928:	701a      	strb	r2, [r3, #0]
   1892a:	1dbb      	adds	r3, r7, #6
   1892c:	1c0a      	adds	r2, r1, #0
   1892e:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   18930:	683a      	ldr	r2, [r7, #0]
   18932:	1dbb      	adds	r3, r7, #6
   18934:	7819      	ldrb	r1, [r3, #0]
   18936:	1dfb      	adds	r3, r7, #7
   18938:	781b      	ldrb	r3, [r3, #0]
   1893a:	b25b      	sxtb	r3, r3
   1893c:	0018      	movs	r0, r3
   1893e:	4b03      	ldr	r3, [pc, #12]	; (1894c <socket_cb+0x30>)
   18940:	4798      	blx	r3
}
   18942:	46c0      	nop			; (mov r8, r8)
   18944:	46bd      	mov	sp, r7
   18946:	b002      	add	sp, #8
   18948:	bd80      	pop	{r7, pc}
   1894a:	46c0      	nop			; (mov r8, r8)
   1894c:	000330e9 	.word	0x000330e9

00018950 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   18950:	b5b0      	push	{r4, r5, r7, lr}
   18952:	b086      	sub	sp, #24
   18954:	af04      	add	r7, sp, #16
   18956:	6078      	str	r0, [r7, #4]
   18958:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1895a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   1895c:	22ff      	movs	r2, #255	; 0xff
   1895e:	4013      	ands	r3, r2
   18960:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   18962:	683b      	ldr	r3, [r7, #0]
   18964:	0a1b      	lsrs	r3, r3, #8
   18966:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   18968:	23ff      	movs	r3, #255	; 0xff
   1896a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   1896c:	683a      	ldr	r2, [r7, #0]
   1896e:	0c12      	lsrs	r2, r2, #16
   18970:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   18972:	22ff      	movs	r2, #255	; 0xff
   18974:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   18976:	6839      	ldr	r1, [r7, #0]
   18978:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1897a:	000d      	movs	r5, r1
   1897c:	6878      	ldr	r0, [r7, #4]
   1897e:	4909      	ldr	r1, [pc, #36]	; (189a4 <resolve_cb+0x54>)
   18980:	9502      	str	r5, [sp, #8]
   18982:	9201      	str	r2, [sp, #4]
   18984:	9300      	str	r3, [sp, #0]
   18986:	0023      	movs	r3, r4
   18988:	0002      	movs	r2, r0
   1898a:	2001      	movs	r0, #1
   1898c:	4c06      	ldr	r4, [pc, #24]	; (189a8 <resolve_cb+0x58>)
   1898e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   18990:	683a      	ldr	r2, [r7, #0]
   18992:	687b      	ldr	r3, [r7, #4]
   18994:	0011      	movs	r1, r2
   18996:	0018      	movs	r0, r3
   18998:	4b04      	ldr	r3, [pc, #16]	; (189ac <resolve_cb+0x5c>)
   1899a:	4798      	blx	r3
}
   1899c:	46c0      	nop			; (mov r8, r8)
   1899e:	46bd      	mov	sp, r7
   189a0:	b002      	add	sp, #8
   189a2:	bdb0      	pop	{r4, r5, r7, pc}
   189a4:	00039980 	.word	0x00039980
   189a8:	000202f1 	.word	0x000202f1
   189ac:	0003324d 	.word	0x0003324d

000189b0 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   189b0:	b590      	push	{r4, r7, lr}
   189b2:	b087      	sub	sp, #28
   189b4:	af02      	add	r7, sp, #8
   189b6:	0002      	movs	r2, r0
   189b8:	6039      	str	r1, [r7, #0]
   189ba:	1dfb      	adds	r3, r7, #7
   189bc:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   189be:	1dfb      	adds	r3, r7, #7
   189c0:	781b      	ldrb	r3, [r3, #0]
   189c2:	2b2c      	cmp	r3, #44	; 0x2c
   189c4:	d002      	beq.n	189cc <wifi_cb+0x1c>
   189c6:	2b32      	cmp	r3, #50	; 0x32
   189c8:	d04d      	beq.n	18a66 <wifi_cb+0xb6>
                }
            }
        } break;

        default:
            break;
   189ca:	e07f      	b.n	18acc <wifi_cb+0x11c>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   189cc:	683b      	ldr	r3, [r7, #0]
   189ce:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   189d0:	68fb      	ldr	r3, [r7, #12]
   189d2:	781b      	ldrb	r3, [r3, #0]
   189d4:	2b01      	cmp	r3, #1
   189d6:	d10a      	bne.n	189ee <wifi_cb+0x3e>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   189d8:	4b3e      	ldr	r3, [pc, #248]	; (18ad4 <wifi_cb+0x124>)
   189da:	0019      	movs	r1, r3
   189dc:	2001      	movs	r0, #1
   189de:	4b3e      	ldr	r3, [pc, #248]	; (18ad8 <wifi_cb+0x128>)
   189e0:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   189e2:	4b3e      	ldr	r3, [pc, #248]	; (18adc <wifi_cb+0x12c>)
   189e4:	4798      	blx	r3
				wifi_status = true;
   189e6:	4b3e      	ldr	r3, [pc, #248]	; (18ae0 <wifi_cb+0x130>)
   189e8:	2201      	movs	r2, #1
   189ea:	701a      	strb	r2, [r3, #0]
            break;
   189ec:	e06b      	b.n	18ac6 <wifi_cb+0x116>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   189ee:	68fb      	ldr	r3, [r7, #12]
   189f0:	781b      	ldrb	r3, [r3, #0]
   189f2:	2b00      	cmp	r3, #0
   189f4:	d167      	bne.n	18ac6 <wifi_cb+0x116>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   189f6:	4b3b      	ldr	r3, [pc, #236]	; (18ae4 <wifi_cb+0x134>)
   189f8:	0019      	movs	r1, r3
   189fa:	2001      	movs	r0, #1
   189fc:	4b36      	ldr	r3, [pc, #216]	; (18ad8 <wifi_cb+0x128>)
   189fe:	4798      	blx	r3
				wifi_status = false;
   18a00:	4b37      	ldr	r3, [pc, #220]	; (18ae0 <wifi_cb+0x130>)
   18a02:	2200      	movs	r2, #0
   18a04:	701a      	strb	r2, [r3, #0]
				drawString(20,30,"Wifi is not Connected!",RED,WHITE);
   18a06:	4938      	ldr	r1, [pc, #224]	; (18ae8 <wifi_cb+0x138>)
   18a08:	4a38      	ldr	r2, [pc, #224]	; (18aec <wifi_cb+0x13c>)
   18a0a:	2301      	movs	r3, #1
   18a0c:	425b      	negs	r3, r3
   18a0e:	9300      	str	r3, [sp, #0]
   18a10:	000b      	movs	r3, r1
   18a12:	211e      	movs	r1, #30
   18a14:	2014      	movs	r0, #20
   18a16:	4c36      	ldr	r4, [pc, #216]	; (18af0 <wifi_cb+0x140>)
   18a18:	47a0      	blx	r4
                clear_state(WIFI_CONNECTED);
   18a1a:	2002      	movs	r0, #2
   18a1c:	4b35      	ldr	r3, [pc, #212]	; (18af4 <wifi_cb+0x144>)
   18a1e:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   18a20:	2008      	movs	r0, #8
   18a22:	4b35      	ldr	r3, [pc, #212]	; (18af8 <wifi_cb+0x148>)
   18a24:	4798      	blx	r3
   18a26:	1e03      	subs	r3, r0, #0
   18a28:	d006      	beq.n	18a38 <wifi_cb+0x88>
                    f_close(&file_object);
   18a2a:	4b34      	ldr	r3, [pc, #208]	; (18afc <wifi_cb+0x14c>)
   18a2c:	0018      	movs	r0, r3
   18a2e:	4b34      	ldr	r3, [pc, #208]	; (18b00 <wifi_cb+0x150>)
   18a30:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   18a32:	2008      	movs	r0, #8
   18a34:	4b2f      	ldr	r3, [pc, #188]	; (18af4 <wifi_cb+0x144>)
   18a36:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   18a38:	2004      	movs	r0, #4
   18a3a:	4b2f      	ldr	r3, [pc, #188]	; (18af8 <wifi_cb+0x148>)
   18a3c:	4798      	blx	r3
   18a3e:	1e03      	subs	r3, r0, #0
   18a40:	d002      	beq.n	18a48 <wifi_cb+0x98>
                    clear_state(GET_REQUESTED);
   18a42:	2004      	movs	r0, #4
   18a44:	4b2b      	ldr	r3, [pc, #172]	; (18af4 <wifi_cb+0x144>)
   18a46:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   18a48:	4b2e      	ldr	r3, [pc, #184]	; (18b04 <wifi_cb+0x154>)
   18a4a:	2101      	movs	r1, #1
   18a4c:	0018      	movs	r0, r3
   18a4e:	4b2e      	ldr	r3, [pc, #184]	; (18b08 <wifi_cb+0x158>)
   18a50:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   18a52:	4a2e      	ldr	r2, [pc, #184]	; (18b0c <wifi_cb+0x15c>)
   18a54:	482e      	ldr	r0, [pc, #184]	; (18b10 <wifi_cb+0x160>)
   18a56:	23ff      	movs	r3, #255	; 0xff
   18a58:	9300      	str	r3, [sp, #0]
   18a5a:	0013      	movs	r3, r2
   18a5c:	2202      	movs	r2, #2
   18a5e:	2102      	movs	r1, #2
   18a60:	4c2c      	ldr	r4, [pc, #176]	; (18b14 <wifi_cb+0x164>)
   18a62:	47a0      	blx	r4
            break;
   18a64:	e02f      	b.n	18ac6 <wifi_cb+0x116>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   18a66:	683b      	ldr	r3, [r7, #0]
   18a68:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   18a6a:	68bb      	ldr	r3, [r7, #8]
   18a6c:	781b      	ldrb	r3, [r3, #0]
   18a6e:	0018      	movs	r0, r3
   18a70:	68bb      	ldr	r3, [r7, #8]
   18a72:	3301      	adds	r3, #1
   18a74:	781b      	ldrb	r3, [r3, #0]
   18a76:	001c      	movs	r4, r3
   18a78:	68bb      	ldr	r3, [r7, #8]
   18a7a:	3302      	adds	r3, #2
   18a7c:	781b      	ldrb	r3, [r3, #0]
   18a7e:	001a      	movs	r2, r3
   18a80:	68bb      	ldr	r3, [r7, #8]
   18a82:	3303      	adds	r3, #3
   18a84:	781b      	ldrb	r3, [r3, #0]
   18a86:	4924      	ldr	r1, [pc, #144]	; (18b18 <wifi_cb+0x168>)
   18a88:	9301      	str	r3, [sp, #4]
   18a8a:	9200      	str	r2, [sp, #0]
   18a8c:	0023      	movs	r3, r4
   18a8e:	0002      	movs	r2, r0
   18a90:	2001      	movs	r0, #1
   18a92:	4c11      	ldr	r4, [pc, #68]	; (18ad8 <wifi_cb+0x128>)
   18a94:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   18a96:	2002      	movs	r0, #2
   18a98:	4b20      	ldr	r3, [pc, #128]	; (18b1c <wifi_cb+0x16c>)
   18a9a:	4798      	blx	r3
            if (do_download_flag == 1) {
   18a9c:	4b20      	ldr	r3, [pc, #128]	; (18b20 <wifi_cb+0x170>)
   18a9e:	781b      	ldrb	r3, [r3, #0]
   18aa0:	2b01      	cmp	r3, #1
   18aa2:	d102      	bne.n	18aaa <wifi_cb+0xfa>
                start_download();
   18aa4:	4b1f      	ldr	r3, [pc, #124]	; (18b24 <wifi_cb+0x174>)
   18aa6:	4798      	blx	r3
        } break;
   18aa8:	e00f      	b.n	18aca <wifi_cb+0x11a>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   18aaa:	4a1f      	ldr	r2, [pc, #124]	; (18b28 <wifi_cb+0x178>)
   18aac:	4b15      	ldr	r3, [pc, #84]	; (18b04 <wifi_cb+0x154>)
   18aae:	0011      	movs	r1, r2
   18ab0:	0018      	movs	r0, r3
   18ab2:	4b1e      	ldr	r3, [pc, #120]	; (18b2c <wifi_cb+0x17c>)
   18ab4:	4798      	blx	r3
   18ab6:	1e03      	subs	r3, r0, #0
   18ab8:	d007      	beq.n	18aca <wifi_cb+0x11a>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   18aba:	4b1d      	ldr	r3, [pc, #116]	; (18b30 <wifi_cb+0x180>)
   18abc:	0019      	movs	r1, r3
   18abe:	2001      	movs	r0, #1
   18ac0:	4b05      	ldr	r3, [pc, #20]	; (18ad8 <wifi_cb+0x128>)
   18ac2:	4798      	blx	r3
        } break;
   18ac4:	e001      	b.n	18aca <wifi_cb+0x11a>
            break;
   18ac6:	46c0      	nop			; (mov r8, r8)
   18ac8:	e000      	b.n	18acc <wifi_cb+0x11c>
        } break;
   18aca:	46c0      	nop			; (mov r8, r8)
    }
}
   18acc:	46c0      	nop			; (mov r8, r8)
   18ace:	46bd      	mov	sp, r7
   18ad0:	b005      	add	sp, #20
   18ad2:	bd90      	pop	{r4, r7, pc}
   18ad4:	000399b0 	.word	0x000399b0
   18ad8:	000202f1 	.word	0x000202f1
   18adc:	0002485d 	.word	0x0002485d
   18ae0:	200004c5 	.word	0x200004c5
   18ae4:	000399d0 	.word	0x000399d0
   18ae8:	fffff800 	.word	0xfffff800
   18aec:	000399f4 	.word	0x000399f4
   18af0:	0001749d 	.word	0x0001749d
   18af4:	000181c1 	.word	0x000181c1
   18af8:	0001821d 	.word	0x0001821d
   18afc:	20000710 	.word	0x20000710
   18b00:	00030785 	.word	0x00030785
   18b04:	2000073c 	.word	0x2000073c
   18b08:	00031d95 	.word	0x00031d95
   18b0c:	00039a0c 	.word	0x00039a0c
   18b10:	00039a18 	.word	0x00039a18
   18b14:	00024389 	.word	0x00024389
   18b18:	00039a1c 	.word	0x00039a1c
   18b1c:	000181f5 	.word	0x000181f5
   18b20:	200004dc 	.word	0x200004dc
   18b24:	00018545 	.word	0x00018545
   18b28:	00039628 	.word	0x00039628
   18b2c:	00031c61 	.word	0x00031c61
   18b30:	00039a44 	.word	0x00039a44

00018b34 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   18b34:	b590      	push	{r4, r7, lr}
   18b36:	b083      	sub	sp, #12
   18b38:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   18b3a:	4b29      	ldr	r3, [pc, #164]	; (18be0 <init_storage+0xac>)
   18b3c:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   18b3e:	4b29      	ldr	r3, [pc, #164]	; (18be4 <init_storage+0xb0>)
   18b40:	0019      	movs	r1, r3
   18b42:	2001      	movs	r0, #1
   18b44:	4b28      	ldr	r3, [pc, #160]	; (18be8 <init_storage+0xb4>)
   18b46:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   18b48:	1dfc      	adds	r4, r7, #7
   18b4a:	2000      	movs	r0, #0
   18b4c:	4b27      	ldr	r3, [pc, #156]	; (18bec <init_storage+0xb8>)
   18b4e:	4798      	blx	r3
   18b50:	0003      	movs	r3, r0
   18b52:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   18b54:	1dfb      	adds	r3, r7, #7
   18b56:	781b      	ldrb	r3, [r3, #0]
   18b58:	2b01      	cmp	r3, #1
   18b5a:	d110      	bne.n	18b7e <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   18b5c:	4b24      	ldr	r3, [pc, #144]	; (18bf0 <init_storage+0xbc>)
   18b5e:	0019      	movs	r1, r3
   18b60:	2001      	movs	r0, #1
   18b62:	4b21      	ldr	r3, [pc, #132]	; (18be8 <init_storage+0xb4>)
   18b64:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   18b66:	4b23      	ldr	r3, [pc, #140]	; (18bf4 <init_storage+0xc0>)
   18b68:	0019      	movs	r1, r3
   18b6a:	2001      	movs	r0, #1
   18b6c:	4b1e      	ldr	r3, [pc, #120]	; (18be8 <init_storage+0xb4>)
   18b6e:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   18b70:	46c0      	nop			; (mov r8, r8)
   18b72:	2000      	movs	r0, #0
   18b74:	4b20      	ldr	r3, [pc, #128]	; (18bf8 <init_storage+0xc4>)
   18b76:	4798      	blx	r3
   18b78:	0003      	movs	r3, r0
   18b7a:	2b02      	cmp	r3, #2
   18b7c:	d1f9      	bne.n	18b72 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   18b7e:	1dfb      	adds	r3, r7, #7
   18b80:	781b      	ldrb	r3, [r3, #0]
   18b82:	2b00      	cmp	r3, #0
   18b84:	d1e0      	bne.n	18b48 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   18b86:	4b1d      	ldr	r3, [pc, #116]	; (18bfc <init_storage+0xc8>)
   18b88:	0019      	movs	r1, r3
   18b8a:	2001      	movs	r0, #1
   18b8c:	4b16      	ldr	r3, [pc, #88]	; (18be8 <init_storage+0xb4>)
   18b8e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   18b90:	238c      	movs	r3, #140	; 0x8c
   18b92:	009a      	lsls	r2, r3, #2
   18b94:	4b1a      	ldr	r3, [pc, #104]	; (18c00 <init_storage+0xcc>)
   18b96:	2100      	movs	r1, #0
   18b98:	0018      	movs	r0, r3
   18b9a:	4b1a      	ldr	r3, [pc, #104]	; (18c04 <init_storage+0xd0>)
   18b9c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   18b9e:	1dbc      	adds	r4, r7, #6
   18ba0:	4b17      	ldr	r3, [pc, #92]	; (18c00 <init_storage+0xcc>)
   18ba2:	0019      	movs	r1, r3
   18ba4:	2000      	movs	r0, #0
   18ba6:	4b18      	ldr	r3, [pc, #96]	; (18c08 <init_storage+0xd4>)
   18ba8:	4798      	blx	r3
   18baa:	0003      	movs	r3, r0
   18bac:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   18bae:	1dbb      	adds	r3, r7, #6
   18bb0:	781b      	ldrb	r3, [r3, #0]
   18bb2:	2b0b      	cmp	r3, #11
   18bb4:	d107      	bne.n	18bc6 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   18bb6:	1dbb      	adds	r3, r7, #6
   18bb8:	781a      	ldrb	r2, [r3, #0]
   18bba:	4b14      	ldr	r3, [pc, #80]	; (18c0c <init_storage+0xd8>)
   18bbc:	0019      	movs	r1, r3
   18bbe:	2001      	movs	r0, #1
   18bc0:	4b09      	ldr	r3, [pc, #36]	; (18be8 <init_storage+0xb4>)
   18bc2:	4798      	blx	r3
            return;
   18bc4:	e008      	b.n	18bd8 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   18bc6:	4b12      	ldr	r3, [pc, #72]	; (18c10 <init_storage+0xdc>)
   18bc8:	0019      	movs	r1, r3
   18bca:	2001      	movs	r0, #1
   18bcc:	4b06      	ldr	r3, [pc, #24]	; (18be8 <init_storage+0xb4>)
   18bce:	4798      	blx	r3
        add_state(STORAGE_READY);
   18bd0:	2001      	movs	r0, #1
   18bd2:	4b10      	ldr	r3, [pc, #64]	; (18c14 <init_storage+0xe0>)
   18bd4:	4798      	blx	r3
        return;
   18bd6:	46c0      	nop			; (mov r8, r8)
    }
}
   18bd8:	46bd      	mov	sp, r7
   18bda:	b003      	add	sp, #12
   18bdc:	bd90      	pop	{r4, r7, pc}
   18bde:	46c0      	nop			; (mov r8, r8)
   18be0:	00021109 	.word	0x00021109
   18be4:	00039a68 	.word	0x00039a68
   18be8:	000202f1 	.word	0x000202f1
   18bec:	000215e5 	.word	0x000215e5
   18bf0:	00039aa0 	.word	0x00039aa0
   18bf4:	00039ac8 	.word	0x00039ac8
   18bf8:	00021159 	.word	0x00021159
   18bfc:	00039afc 	.word	0x00039afc
   18c00:	200004e0 	.word	0x200004e0
   18c04:	0003796b 	.word	0x0003796b
   18c08:	0002fd2d 	.word	0x0002fd2d
   18c0c:	00039b20 	.word	0x00039b20
   18c10:	00039b50 	.word	0x00039b50
   18c14:	000181f5 	.word	0x000181f5

00018c18 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   18c18:	b580      	push	{r7, lr}
   18c1a:	b082      	sub	sp, #8
   18c1c:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   18c1e:	1d3b      	adds	r3, r7, #4
   18c20:	0018      	movs	r0, r3
   18c22:	4b08      	ldr	r3, [pc, #32]	; (18c44 <configure_timer+0x2c>)
   18c24:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   18c26:	1d3a      	adds	r2, r7, #4
   18c28:	4b07      	ldr	r3, [pc, #28]	; (18c48 <configure_timer+0x30>)
   18c2a:	0011      	movs	r1, r2
   18c2c:	0018      	movs	r0, r3
   18c2e:	4b07      	ldr	r3, [pc, #28]	; (18c4c <configure_timer+0x34>)
   18c30:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   18c32:	4b05      	ldr	r3, [pc, #20]	; (18c48 <configure_timer+0x30>)
   18c34:	0018      	movs	r0, r3
   18c36:	4b06      	ldr	r3, [pc, #24]	; (18c50 <configure_timer+0x38>)
   18c38:	4798      	blx	r3
}
   18c3a:	46c0      	nop			; (mov r8, r8)
   18c3c:	46bd      	mov	sp, r7
   18c3e:	b002      	add	sp, #8
   18c40:	bd80      	pop	{r7, pc}
   18c42:	46c0      	nop			; (mov r8, r8)
   18c44:	0003487d 	.word	0x0003487d
   18c48:	2000475c 	.word	0x2000475c
   18c4c:	000348a1 	.word	0x000348a1
   18c50:	0003498d 	.word	0x0003498d

00018c54 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   18c54:	b580      	push	{r7, lr}
   18c56:	b088      	sub	sp, #32
   18c58:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   18c5a:	003b      	movs	r3, r7
   18c5c:	0018      	movs	r0, r3
   18c5e:	4b16      	ldr	r3, [pc, #88]	; (18cb8 <configure_http_client+0x64>)
   18c60:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   18c62:	003b      	movs	r3, r7
   18c64:	2280      	movs	r2, #128	; 0x80
   18c66:	0092      	lsls	r2, r2, #2
   18c68:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   18c6a:	003b      	movs	r3, r7
   18c6c:	4a13      	ldr	r2, [pc, #76]	; (18cbc <configure_http_client+0x68>)
   18c6e:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   18c70:	003b      	movs	r3, r7
   18c72:	22bc      	movs	r2, #188	; 0xbc
   18c74:	32ff      	adds	r2, #255	; 0xff
   18c76:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   18c78:	003b      	movs	r3, r7
   18c7a:	2201      	movs	r2, #1
   18c7c:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   18c7e:	003a      	movs	r2, r7
   18c80:	4b0f      	ldr	r3, [pc, #60]	; (18cc0 <configure_http_client+0x6c>)
   18c82:	0011      	movs	r1, r2
   18c84:	0018      	movs	r0, r3
   18c86:	4b0f      	ldr	r3, [pc, #60]	; (18cc4 <configure_http_client+0x70>)
   18c88:	4798      	blx	r3
   18c8a:	0003      	movs	r3, r0
   18c8c:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   18c8e:	69fb      	ldr	r3, [r7, #28]
   18c90:	2b00      	cmp	r3, #0
   18c92:	da06      	bge.n	18ca2 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   18c94:	69fa      	ldr	r2, [r7, #28]
   18c96:	4b0c      	ldr	r3, [pc, #48]	; (18cc8 <configure_http_client+0x74>)
   18c98:	0019      	movs	r1, r3
   18c9a:	2001      	movs	r0, #1
   18c9c:	4b0b      	ldr	r3, [pc, #44]	; (18ccc <configure_http_client+0x78>)
   18c9e:	4798      	blx	r3
        while (1) {
   18ca0:	e7fe      	b.n	18ca0 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   18ca2:	4a0b      	ldr	r2, [pc, #44]	; (18cd0 <configure_http_client+0x7c>)
   18ca4:	4b06      	ldr	r3, [pc, #24]	; (18cc0 <configure_http_client+0x6c>)
   18ca6:	0011      	movs	r1, r2
   18ca8:	0018      	movs	r0, r3
   18caa:	4b0a      	ldr	r3, [pc, #40]	; (18cd4 <configure_http_client+0x80>)
   18cac:	4798      	blx	r3
}
   18cae:	46c0      	nop			; (mov r8, r8)
   18cb0:	46bd      	mov	sp, r7
   18cb2:	b008      	add	sp, #32
   18cb4:	bd80      	pop	{r7, pc}
   18cb6:	46c0      	nop			; (mov r8, r8)
   18cb8:	00032f11 	.word	0x00032f11
   18cbc:	2000475c 	.word	0x2000475c
   18cc0:	200047b4 	.word	0x200047b4
   18cc4:	00032f5d 	.word	0x00032f5d
   18cc8:	00039b74 	.word	0x00039b74
   18ccc:	000202f1 	.word	0x000202f1
   18cd0:	000187d5 	.word	0x000187d5
   18cd4:	00033049 	.word	0x00033049

00018cd8 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   18cd8:	b580      	push	{r7, lr}
   18cda:	b082      	sub	sp, #8
   18cdc:	af00      	add	r7, sp, #0
   18cde:	603a      	str	r2, [r7, #0]
   18ce0:	1dfb      	adds	r3, r7, #7
   18ce2:	1c02      	adds	r2, r0, #0
   18ce4:	701a      	strb	r2, [r3, #0]
   18ce6:	1dbb      	adds	r3, r7, #6
   18ce8:	1c0a      	adds	r2, r1, #0
   18cea:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   18cec:	683a      	ldr	r2, [r7, #0]
   18cee:	1dbb      	adds	r3, r7, #6
   18cf0:	7819      	ldrb	r1, [r3, #0]
   18cf2:	1dfb      	adds	r3, r7, #7
   18cf4:	781b      	ldrb	r3, [r3, #0]
   18cf6:	b25b      	sxtb	r3, r3
   18cf8:	0018      	movs	r0, r3
   18cfa:	4b03      	ldr	r3, [pc, #12]	; (18d08 <socket_event_handler+0x30>)
   18cfc:	4798      	blx	r3
}
   18cfe:	46c0      	nop			; (mov r8, r8)
   18d00:	46bd      	mov	sp, r7
   18d02:	b002      	add	sp, #8
   18d04:	bd80      	pop	{r7, pc}
   18d06:	46c0      	nop			; (mov r8, r8)
   18d08:	00031c09 	.word	0x00031c09

00018d0c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   18d0c:	b580      	push	{r7, lr}
   18d0e:	b082      	sub	sp, #8
   18d10:	af00      	add	r7, sp, #0
   18d12:	6078      	str	r0, [r7, #4]
   18d14:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   18d16:	683a      	ldr	r2, [r7, #0]
   18d18:	687b      	ldr	r3, [r7, #4]
   18d1a:	0011      	movs	r1, r2
   18d1c:	0018      	movs	r0, r3
   18d1e:	4b03      	ldr	r3, [pc, #12]	; (18d2c <socket_resolve_handler+0x20>)
   18d20:	4798      	blx	r3
}
   18d22:	46c0      	nop			; (mov r8, r8)
   18d24:	46bd      	mov	sp, r7
   18d26:	b002      	add	sp, #8
   18d28:	bd80      	pop	{r7, pc}
   18d2a:	46c0      	nop			; (mov r8, r8)
   18d2c:	00031c3d 	.word	0x00031c3d

00018d30 <SubscribeHandlerServoTopic>:
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
    }
}

void SubscribeHandlerServoTopic(MessageData *msgData)
{
   18d30:	b580      	push	{r7, lr}
   18d32:	b082      	sub	sp, #8
   18d34:	af00      	add	r7, sp, #0
   18d36:	6078      	str	r0, [r7, #4]
	//LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
	
	// Will receive something of the style "rgb(222, 224, 189)"
	if(strncmp((char *)msgData->topicName->lenstring.data, SERVO_TOPIC,msgData->message->payloadlen) == 0){
   18d38:	687b      	ldr	r3, [r7, #4]
   18d3a:	685b      	ldr	r3, [r3, #4]
   18d3c:	6898      	ldr	r0, [r3, #8]
   18d3e:	687b      	ldr	r3, [r7, #4]
   18d40:	681b      	ldr	r3, [r3, #0]
   18d42:	68da      	ldr	r2, [r3, #12]
   18d44:	4b13      	ldr	r3, [pc, #76]	; (18d94 <SubscribeHandlerServoTopic+0x64>)
   18d46:	0019      	movs	r1, r3
   18d48:	4b13      	ldr	r3, [pc, #76]	; (18d98 <SubscribeHandlerServoTopic+0x68>)
   18d4a:	4798      	blx	r3
   18d4c:	1e03      	subs	r3, r0, #0
   18d4e:	d11c      	bne.n	18d8a <SubscribeHandlerServoTopic+0x5a>
	if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   18d50:	687b      	ldr	r3, [r7, #4]
   18d52:	681b      	ldr	r3, [r3, #0]
   18d54:	6898      	ldr	r0, [r3, #8]
   18d56:	687b      	ldr	r3, [r7, #4]
   18d58:	681b      	ldr	r3, [r3, #0]
   18d5a:	68da      	ldr	r2, [r3, #12]
   18d5c:	4b0f      	ldr	r3, [pc, #60]	; (18d9c <SubscribeHandlerServoTopic+0x6c>)
   18d5e:	0019      	movs	r1, r3
   18d60:	4b0d      	ldr	r3, [pc, #52]	; (18d98 <SubscribeHandlerServoTopic+0x68>)
   18d62:	4798      	blx	r3
   18d64:	1e03      	subs	r3, r0, #0
   18d66:	d102      	bne.n	18d6e <SubscribeHandlerServoTopic+0x3e>
		lock();
   18d68:	4b0d      	ldr	r3, [pc, #52]	; (18da0 <SubscribeHandlerServoTopic+0x70>)
   18d6a:	4798      	blx	r3
	}
	else if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
		unlock();
	}
	}
}
   18d6c:	e00d      	b.n	18d8a <SubscribeHandlerServoTopic+0x5a>
	else if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   18d6e:	687b      	ldr	r3, [r7, #4]
   18d70:	681b      	ldr	r3, [r3, #0]
   18d72:	6898      	ldr	r0, [r3, #8]
   18d74:	687b      	ldr	r3, [r7, #4]
   18d76:	681b      	ldr	r3, [r3, #0]
   18d78:	68da      	ldr	r2, [r3, #12]
   18d7a:	4b0a      	ldr	r3, [pc, #40]	; (18da4 <SubscribeHandlerServoTopic+0x74>)
   18d7c:	0019      	movs	r1, r3
   18d7e:	4b06      	ldr	r3, [pc, #24]	; (18d98 <SubscribeHandlerServoTopic+0x68>)
   18d80:	4798      	blx	r3
   18d82:	1e03      	subs	r3, r0, #0
   18d84:	d101      	bne.n	18d8a <SubscribeHandlerServoTopic+0x5a>
		unlock();
   18d86:	4b08      	ldr	r3, [pc, #32]	; (18da8 <SubscribeHandlerServoTopic+0x78>)
   18d88:	4798      	blx	r3
}
   18d8a:	46c0      	nop			; (mov r8, r8)
   18d8c:	46bd      	mov	sp, r7
   18d8e:	b002      	add	sp, #8
   18d90:	bd80      	pop	{r7, pc}
   18d92:	46c0      	nop			; (mov r8, r8)
   18d94:	00039be0 	.word	0x00039be0
   18d98:	00037d31 	.word	0x00037d31
   18d9c:	00039bf0 	.word	0x00039bf0
   18da0:	00016c55 	.word	0x00016c55
   18da4:	00039bf8 	.word	0x00039bf8
   18da8:	00016cd1 	.word	0x00016cd1

00018dac <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   18dac:	b590      	push	{r4, r7, lr}
   18dae:	b08b      	sub	sp, #44	; 0x2c
   18db0:	af06      	add	r7, sp, #24
   18db2:	60f8      	str	r0, [r7, #12]
   18db4:	60b9      	str	r1, [r7, #8]
   18db6:	607a      	str	r2, [r7, #4]
    switch (type) {
   18db8:	68bb      	ldr	r3, [r7, #8]
   18dba:	2b01      	cmp	r3, #1
   18dbc:	d03b      	beq.n	18e36 <mqtt_callback+0x8a>
   18dbe:	2b05      	cmp	r3, #5
   18dc0:	d052      	beq.n	18e68 <mqtt_callback+0xbc>
   18dc2:	2b00      	cmp	r3, #0
   18dc4:	d000      	beq.n	18dc8 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   18dc6:	e055      	b.n	18e74 <mqtt_callback+0xc8>
            if (data->sock_connected.result >= 0) {
   18dc8:	687b      	ldr	r3, [r7, #4]
   18dca:	681b      	ldr	r3, [r3, #0]
   18dcc:	2b00      	cmp	r3, #0
   18dce:	db25      	blt.n	18e1c <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   18dd0:	4b2a      	ldr	r3, [pc, #168]	; (18e7c <mqtt_callback+0xd0>)
   18dd2:	0019      	movs	r1, r3
   18dd4:	2001      	movs	r0, #1
   18dd6:	4b2a      	ldr	r3, [pc, #168]	; (18e80 <mqtt_callback+0xd4>)
   18dd8:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   18dda:	492a      	ldr	r1, [pc, #168]	; (18e84 <mqtt_callback+0xd8>)
   18ddc:	4a2a      	ldr	r2, [pc, #168]	; (18e88 <mqtt_callback+0xdc>)
   18dde:	68f8      	ldr	r0, [r7, #12]
   18de0:	2300      	movs	r3, #0
   18de2:	9305      	str	r3, [sp, #20]
   18de4:	2300      	movs	r3, #0
   18de6:	9304      	str	r3, [sp, #16]
   18de8:	2300      	movs	r3, #0
   18dea:	9303      	str	r3, [sp, #12]
   18dec:	2300      	movs	r3, #0
   18dee:	9302      	str	r3, [sp, #8]
   18df0:	2300      	movs	r3, #0
   18df2:	9301      	str	r3, [sp, #4]
   18df4:	4b24      	ldr	r3, [pc, #144]	; (18e88 <mqtt_callback+0xdc>)
   18df6:	9300      	str	r3, [sp, #0]
   18df8:	000b      	movs	r3, r1
   18dfa:	2101      	movs	r1, #1
   18dfc:	4c23      	ldr	r4, [pc, #140]	; (18e8c <mqtt_callback+0xe0>)
   18dfe:	47a0      	blx	r4
   18e00:	1e03      	subs	r3, r0, #0
   18e02:	d005      	beq.n	18e10 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   18e04:	4b22      	ldr	r3, [pc, #136]	; (18e90 <mqtt_callback+0xe4>)
   18e06:	0019      	movs	r1, r3
   18e08:	2001      	movs	r0, #1
   18e0a:	4b1d      	ldr	r3, [pc, #116]	; (18e80 <mqtt_callback+0xd4>)
   18e0c:	4798      	blx	r3
        } break;
   18e0e:	e031      	b.n	18e74 <mqtt_callback+0xc8>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   18e10:	4b20      	ldr	r3, [pc, #128]	; (18e94 <mqtt_callback+0xe8>)
   18e12:	0019      	movs	r1, r3
   18e14:	2001      	movs	r0, #1
   18e16:	4b1a      	ldr	r3, [pc, #104]	; (18e80 <mqtt_callback+0xd4>)
   18e18:	4798      	blx	r3
        } break;
   18e1a:	e02b      	b.n	18e74 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   18e1c:	4a1e      	ldr	r2, [pc, #120]	; (18e98 <mqtt_callback+0xec>)
   18e1e:	4b1f      	ldr	r3, [pc, #124]	; (18e9c <mqtt_callback+0xf0>)
   18e20:	0019      	movs	r1, r3
   18e22:	2001      	movs	r0, #1
   18e24:	4b16      	ldr	r3, [pc, #88]	; (18e80 <mqtt_callback+0xd4>)
   18e26:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   18e28:	4a1b      	ldr	r2, [pc, #108]	; (18e98 <mqtt_callback+0xec>)
   18e2a:	68fb      	ldr	r3, [r7, #12]
   18e2c:	0011      	movs	r1, r2
   18e2e:	0018      	movs	r0, r3
   18e30:	4b1b      	ldr	r3, [pc, #108]	; (18ea0 <mqtt_callback+0xf4>)
   18e32:	4798      	blx	r3
        } break;
   18e34:	e01e      	b.n	18e74 <mqtt_callback+0xc8>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   18e36:	687b      	ldr	r3, [r7, #4]
   18e38:	781b      	ldrb	r3, [r3, #0]
   18e3a:	2b00      	cmp	r3, #0
   18e3c:	d10b      	bne.n	18e56 <mqtt_callback+0xaa>
				mqtt_subscribe(module_inst, SERVO_TOPIC, 2, SubscribeHandlerServoTopic);
   18e3e:	4b19      	ldr	r3, [pc, #100]	; (18ea4 <mqtt_callback+0xf8>)
   18e40:	4919      	ldr	r1, [pc, #100]	; (18ea8 <mqtt_callback+0xfc>)
   18e42:	68f8      	ldr	r0, [r7, #12]
   18e44:	2202      	movs	r2, #2
   18e46:	4c19      	ldr	r4, [pc, #100]	; (18eac <mqtt_callback+0x100>)
   18e48:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   18e4a:	4b19      	ldr	r3, [pc, #100]	; (18eb0 <mqtt_callback+0x104>)
   18e4c:	0019      	movs	r1, r3
   18e4e:	2001      	movs	r0, #1
   18e50:	4b0b      	ldr	r3, [pc, #44]	; (18e80 <mqtt_callback+0xd4>)
   18e52:	4798      	blx	r3
            break;
   18e54:	e00e      	b.n	18e74 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   18e56:	687b      	ldr	r3, [r7, #4]
   18e58:	781b      	ldrb	r3, [r3, #0]
   18e5a:	001a      	movs	r2, r3
   18e5c:	4b15      	ldr	r3, [pc, #84]	; (18eb4 <mqtt_callback+0x108>)
   18e5e:	0019      	movs	r1, r3
   18e60:	2001      	movs	r0, #1
   18e62:	4b07      	ldr	r3, [pc, #28]	; (18e80 <mqtt_callback+0xd4>)
   18e64:	4798      	blx	r3
            break;
   18e66:	e005      	b.n	18e74 <mqtt_callback+0xc8>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   18e68:	4b13      	ldr	r3, [pc, #76]	; (18eb8 <mqtt_callback+0x10c>)
   18e6a:	0019      	movs	r1, r3
   18e6c:	2001      	movs	r0, #1
   18e6e:	4b04      	ldr	r3, [pc, #16]	; (18e80 <mqtt_callback+0xd4>)
   18e70:	4798      	blx	r3
            break;
   18e72:	46c0      	nop			; (mov r8, r8)
}
   18e74:	46c0      	nop			; (mov r8, r8)
   18e76:	46bd      	mov	sp, r7
   18e78:	b005      	add	sp, #20
   18e7a:	bd90      	pop	{r4, r7, pc}
   18e7c:	00039d00 	.word	0x00039d00
   18e80:	000202f1 	.word	0x000202f1
   18e84:	00039d1c 	.word	0x00039d1c
   18e88:	00039d2c 	.word	0x00039d2c
   18e8c:	00031ca9 	.word	0x00031ca9
   18e90:	00039d30 	.word	0x00039d30
   18e94:	00039d58 	.word	0x00039d58
   18e98:	00039628 	.word	0x00039628
   18e9c:	00039d74 	.word	0x00039d74
   18ea0:	00031c61 	.word	0x00031c61
   18ea4:	00018d31 	.word	0x00018d31
   18ea8:	00039be0 	.word	0x00039be0
   18eac:	00031e49 	.word	0x00031e49
   18eb0:	00039dac 	.word	0x00039dac
   18eb4:	00039dc0 	.word	0x00039dc0
   18eb8:	00039df4 	.word	0x00039df4

00018ebc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   18ebc:	b580      	push	{r7, lr}
   18ebe:	b088      	sub	sp, #32
   18ec0:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   18ec2:	1d3b      	adds	r3, r7, #4
   18ec4:	0018      	movs	r0, r3
   18ec6:	4b1f      	ldr	r3, [pc, #124]	; (18f44 <configure_mqtt+0x88>)
   18ec8:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   18eca:	1d3b      	adds	r3, r7, #4
   18ecc:	4a1e      	ldr	r2, [pc, #120]	; (18f48 <configure_mqtt+0x8c>)
   18ece:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18ed0:	1d3b      	adds	r3, r7, #4
   18ed2:	2280      	movs	r2, #128	; 0x80
   18ed4:	0092      	lsls	r2, r2, #2
   18ed6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   18ed8:	1d3b      	adds	r3, r7, #4
   18eda:	4a1c      	ldr	r2, [pc, #112]	; (18f4c <configure_mqtt+0x90>)
   18edc:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18ede:	1d3b      	adds	r3, r7, #4
   18ee0:	2280      	movs	r2, #128	; 0x80
   18ee2:	0092      	lsls	r2, r2, #2
   18ee4:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   18ee6:	1d3b      	adds	r3, r7, #4
   18ee8:	4a19      	ldr	r2, [pc, #100]	; (18f50 <configure_mqtt+0x94>)
   18eea:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   18eec:	1d3b      	adds	r3, r7, #4
   18eee:	4a19      	ldr	r2, [pc, #100]	; (18f54 <configure_mqtt+0x98>)
   18ef0:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   18ef2:	1d3a      	adds	r2, r7, #4
   18ef4:	4b18      	ldr	r3, [pc, #96]	; (18f58 <configure_mqtt+0x9c>)
   18ef6:	0011      	movs	r1, r2
   18ef8:	0018      	movs	r0, r3
   18efa:	4b18      	ldr	r3, [pc, #96]	; (18f5c <configure_mqtt+0xa0>)
   18efc:	4798      	blx	r3
   18efe:	0003      	movs	r3, r0
   18f00:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18f02:	69fb      	ldr	r3, [r7, #28]
   18f04:	2b00      	cmp	r3, #0
   18f06:	da06      	bge.n	18f16 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   18f08:	69fa      	ldr	r2, [r7, #28]
   18f0a:	4b15      	ldr	r3, [pc, #84]	; (18f60 <configure_mqtt+0xa4>)
   18f0c:	0019      	movs	r1, r3
   18f0e:	2001      	movs	r0, #1
   18f10:	4b14      	ldr	r3, [pc, #80]	; (18f64 <configure_mqtt+0xa8>)
   18f12:	4798      	blx	r3
        while (1) {
   18f14:	e7fe      	b.n	18f14 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   18f16:	4a14      	ldr	r2, [pc, #80]	; (18f68 <configure_mqtt+0xac>)
   18f18:	4b0f      	ldr	r3, [pc, #60]	; (18f58 <configure_mqtt+0x9c>)
   18f1a:	0011      	movs	r1, r2
   18f1c:	0018      	movs	r0, r3
   18f1e:	4b13      	ldr	r3, [pc, #76]	; (18f6c <configure_mqtt+0xb0>)
   18f20:	4798      	blx	r3
   18f22:	0003      	movs	r3, r0
   18f24:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18f26:	69fb      	ldr	r3, [r7, #28]
   18f28:	2b00      	cmp	r3, #0
   18f2a:	da06      	bge.n	18f3a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   18f2c:	69fa      	ldr	r2, [r7, #28]
   18f2e:	4b10      	ldr	r3, [pc, #64]	; (18f70 <configure_mqtt+0xb4>)
   18f30:	0019      	movs	r1, r3
   18f32:	2001      	movs	r0, #1
   18f34:	4b0b      	ldr	r3, [pc, #44]	; (18f64 <configure_mqtt+0xa8>)
   18f36:	4798      	blx	r3
        while (1) {
   18f38:	e7fe      	b.n	18f38 <configure_mqtt+0x7c>
        }
    }
}
   18f3a:	46c0      	nop			; (mov r8, r8)
   18f3c:	46bd      	mov	sp, r7
   18f3e:	b008      	add	sp, #32
   18f40:	bd80      	pop	{r7, pc}
   18f42:	46c0      	nop			; (mov r8, r8)
   18f44:	00031ba1 	.word	0x00031ba1
   18f48:	20000774 	.word	0x20000774
   18f4c:	20000974 	.word	0x20000974
   18f50:	0000075b 	.word	0x0000075b
   18f54:	00001770 	.word	0x00001770
   18f58:	2000073c 	.word	0x2000073c
   18f5c:	00031af1 	.word	0x00031af1
   18f60:	00039e08 	.word	0x00039e08
   18f64:	000202f1 	.word	0x000202f1
   18f68:	00018dad 	.word	0x00018dad
   18f6c:	00031be1 	.word	0x00031be1
   18f70:	00039e3c 	.word	0x00039e3c

00018f74 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   18f74:	b580      	push	{r7, lr}
   18f76:	b084      	sub	sp, #16
   18f78:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   18f7a:	1d3b      	adds	r3, r7, #4
   18f7c:	0018      	movs	r0, r3
   18f7e:	4b0b      	ldr	r3, [pc, #44]	; (18fac <configure_extint_channel+0x38>)
   18f80:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   18f82:	1d3b      	adds	r3, r7, #4
   18f84:	2237      	movs	r2, #55	; 0x37
   18f86:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   18f88:	1d3b      	adds	r3, r7, #4
   18f8a:	2200      	movs	r2, #0
   18f8c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   18f8e:	1d3b      	adds	r3, r7, #4
   18f90:	2201      	movs	r2, #1
   18f92:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   18f94:	1d3b      	adds	r3, r7, #4
   18f96:	2202      	movs	r2, #2
   18f98:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   18f9a:	1d3b      	adds	r3, r7, #4
   18f9c:	0019      	movs	r1, r3
   18f9e:	2007      	movs	r0, #7
   18fa0:	4b03      	ldr	r3, [pc, #12]	; (18fb0 <configure_extint_channel+0x3c>)
   18fa2:	4798      	blx	r3
}
   18fa4:	46c0      	nop			; (mov r8, r8)
   18fa6:	46bd      	mov	sp, r7
   18fa8:	b004      	add	sp, #16
   18faa:	bd80      	pop	{r7, pc}
   18fac:	00028c7d 	.word	0x00028c7d
   18fb0:	00028cb1 	.word	0x00028cb1

00018fb4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   18fb4:	b580      	push	{r7, lr}
   18fb6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18fb8:	4b06      	ldr	r3, [pc, #24]	; (18fd4 <configure_extint_callbacks+0x20>)
   18fba:	2200      	movs	r2, #0
   18fbc:	2107      	movs	r1, #7
   18fbe:	0018      	movs	r0, r3
   18fc0:	4b05      	ldr	r3, [pc, #20]	; (18fd8 <configure_extint_callbacks+0x24>)
   18fc2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18fc4:	2100      	movs	r1, #0
   18fc6:	2007      	movs	r0, #7
   18fc8:	4b04      	ldr	r3, [pc, #16]	; (18fdc <configure_extint_callbacks+0x28>)
   18fca:	4798      	blx	r3
}
   18fcc:	46c0      	nop			; (mov r8, r8)
   18fce:	46bd      	mov	sp, r7
   18fd0:	bd80      	pop	{r7, pc}
   18fd2:	46c0      	nop			; (mov r8, r8)
   18fd4:	00018fe1 	.word	0x00018fe1
   18fd8:	0002887d 	.word	0x0002887d
   18fdc:	000288e1 	.word	0x000288e1

00018fe0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   18fe0:	b5b0      	push	{r4, r5, r7, lr}
   18fe2:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   18fe4:	4b0c      	ldr	r3, [pc, #48]	; (19018 <extint_detection_callback+0x38>)
   18fe6:	681b      	ldr	r3, [r3, #0]
   18fe8:	1c5a      	adds	r2, r3, #1
   18fea:	4b0b      	ldr	r3, [pc, #44]	; (19018 <extint_detection_callback+0x38>)
   18fec:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   18fee:	4b0a      	ldr	r3, [pc, #40]	; (19018 <extint_detection_callback+0x38>)
   18ff0:	681b      	ldr	r3, [r3, #0]
   18ff2:	2b28      	cmp	r3, #40	; 0x28
   18ff4:	d902      	bls.n	18ffc <extint_detection_callback+0x1c>
   18ff6:	4b08      	ldr	r3, [pc, #32]	; (19018 <extint_detection_callback+0x38>)
   18ff8:	2201      	movs	r2, #1
   18ffa:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   18ffc:	4b06      	ldr	r3, [pc, #24]	; (19018 <extint_detection_callback+0x38>)
   18ffe:	681b      	ldr	r3, [r3, #0]
   19000:	4a06      	ldr	r2, [pc, #24]	; (1901c <extint_detection_callback+0x3c>)
   19002:	4807      	ldr	r0, [pc, #28]	; (19020 <extint_detection_callback+0x40>)
   19004:	213f      	movs	r1, #63	; 0x3f
   19006:	4c07      	ldr	r4, [pc, #28]	; (19024 <extint_detection_callback+0x44>)
   19008:	47a0      	blx	r4
    isPressed = true;
   1900a:	4b07      	ldr	r3, [pc, #28]	; (19028 <extint_detection_callback+0x48>)
   1900c:	2201      	movs	r2, #1
   1900e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   19010:	46c0      	nop			; (mov r8, r8)
   19012:	46bd      	mov	sp, r7
   19014:	bdb0      	pop	{r4, r5, r7, pc}
   19016:	46c0      	nop			; (mov r8, r8)
   19018:	200000b8 	.word	0x200000b8
   1901c:	00039e70 	.word	0x00039e70
   19020:	20000074 	.word	0x20000074
   19024:	00037bc5 	.word	0x00037bc5
   19028:	20000b74 	.word	0x20000b74

0001902c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   1902c:	b580      	push	{r7, lr}
   1902e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   19030:	4a15      	ldr	r2, [pc, #84]	; (19088 <HTTP_DownloadFileInit+0x5c>)
   19032:	4b16      	ldr	r3, [pc, #88]	; (1908c <HTTP_DownloadFileInit+0x60>)
   19034:	0011      	movs	r1, r2
   19036:	0018      	movs	r0, r3
   19038:	4b15      	ldr	r3, [pc, #84]	; (19090 <HTTP_DownloadFileInit+0x64>)
   1903a:	4798      	blx	r3
   1903c:	1e03      	subs	r3, r0, #0
   1903e:	d008      	beq.n	19052 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   19040:	4b14      	ldr	r3, [pc, #80]	; (19094 <HTTP_DownloadFileInit+0x68>)
   19042:	0019      	movs	r1, r3
   19044:	2001      	movs	r0, #1
   19046:	4b14      	ldr	r3, [pc, #80]	; (19098 <HTTP_DownloadFileInit+0x6c>)
   19048:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   1904a:	e002      	b.n	19052 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   1904c:	2000      	movs	r0, #0
   1904e:	4b13      	ldr	r3, [pc, #76]	; (1909c <HTTP_DownloadFileInit+0x70>)
   19050:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   19052:	4b0e      	ldr	r3, [pc, #56]	; (1908c <HTTP_DownloadFileInit+0x60>)
   19054:	2234      	movs	r2, #52	; 0x34
   19056:	5c9b      	ldrb	r3, [r3, r2]
   19058:	2b00      	cmp	r3, #0
   1905a:	d1f7      	bne.n	1904c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   1905c:	4b10      	ldr	r3, [pc, #64]	; (190a0 <HTTP_DownloadFileInit+0x74>)
   1905e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   19060:	4b10      	ldr	r3, [pc, #64]	; (190a4 <HTTP_DownloadFileInit+0x78>)
   19062:	2201      	movs	r2, #1
   19064:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   19066:	4a10      	ldr	r2, [pc, #64]	; (190a8 <HTTP_DownloadFileInit+0x7c>)
   19068:	4b10      	ldr	r3, [pc, #64]	; (190ac <HTTP_DownloadFileInit+0x80>)
   1906a:	0011      	movs	r1, r2
   1906c:	0018      	movs	r0, r3
   1906e:	4b10      	ldr	r3, [pc, #64]	; (190b0 <HTTP_DownloadFileInit+0x84>)
   19070:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   19072:	4b10      	ldr	r3, [pc, #64]	; (190b4 <HTTP_DownloadFileInit+0x88>)
   19074:	4798      	blx	r3

    start_download();
   19076:	4b10      	ldr	r3, [pc, #64]	; (190b8 <HTTP_DownloadFileInit+0x8c>)
   19078:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1907a:	4b10      	ldr	r3, [pc, #64]	; (190bc <HTTP_DownloadFileInit+0x90>)
   1907c:	2203      	movs	r2, #3
   1907e:	701a      	strb	r2, [r3, #0]
}
   19080:	46c0      	nop			; (mov r8, r8)
   19082:	46bd      	mov	sp, r7
   19084:	bd80      	pop	{r7, pc}
   19086:	46c0      	nop			; (mov r8, r8)
   19088:	00039628 	.word	0x00039628
   1908c:	2000073c 	.word	0x2000073c
   19090:	00031d95 	.word	0x00031d95
   19094:	00039a44 	.word	0x00039a44
   19098:	000202f1 	.word	0x000202f1
   1909c:	0002436d 	.word	0x0002436d
   190a0:	00027929 	.word	0x00027929
   190a4:	200004dc 	.word	0x200004dc
   190a8:	00018951 	.word	0x00018951
   190ac:	0001891d 	.word	0x0001891d
   190b0:	00027971 	.word	0x00027971
   190b4:	000278d9 	.word	0x000278d9
   190b8:	00018545 	.word	0x00018545
   190bc:	200004c6 	.word	0x200004c6

000190c0 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   190c0:	b590      	push	{r4, r7, lr}
   190c2:	b085      	sub	sp, #20
   190c4:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   190c6:	e009      	b.n	190dc <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   190c8:	2000      	movs	r0, #0
   190ca:	4b2a      	ldr	r3, [pc, #168]	; (19174 <HTTP_DownloadFileTransaction+0xb4>)
   190cc:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   190ce:	4b2a      	ldr	r3, [pc, #168]	; (19178 <HTTP_DownloadFileTransaction+0xb8>)
   190d0:	0018      	movs	r0, r3
   190d2:	4b2a      	ldr	r3, [pc, #168]	; (1917c <HTTP_DownloadFileTransaction+0xbc>)
   190d4:	4798      	blx	r3
        vTaskDelay(5);
   190d6:	2005      	movs	r0, #5
   190d8:	4b29      	ldr	r3, [pc, #164]	; (19180 <HTTP_DownloadFileTransaction+0xc0>)
   190da:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   190dc:	2010      	movs	r0, #16
   190de:	4b29      	ldr	r3, [pc, #164]	; (19184 <HTTP_DownloadFileTransaction+0xc4>)
   190e0:	4798      	blx	r3
   190e2:	0003      	movs	r3, r0
   190e4:	001a      	movs	r2, r3
   190e6:	2301      	movs	r3, #1
   190e8:	4053      	eors	r3, r2
   190ea:	b2db      	uxtb	r3, r3
   190ec:	2b00      	cmp	r3, #0
   190ee:	d009      	beq.n	19104 <HTTP_DownloadFileTransaction+0x44>
   190f0:	2020      	movs	r0, #32
   190f2:	4b24      	ldr	r3, [pc, #144]	; (19184 <HTTP_DownloadFileTransaction+0xc4>)
   190f4:	4798      	blx	r3
   190f6:	0003      	movs	r3, r0
   190f8:	001a      	movs	r2, r3
   190fa:	2301      	movs	r3, #1
   190fc:	4053      	eors	r3, r2
   190fe:	b2db      	uxtb	r3, r3
   19100:	2b00      	cmp	r3, #0
   19102:	d1e1      	bne.n	190c8 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   19104:	4b20      	ldr	r3, [pc, #128]	; (19188 <HTTP_DownloadFileTransaction+0xc8>)
   19106:	4798      	blx	r3
    vTaskDelay(1000);
   19108:	23fa      	movs	r3, #250	; 0xfa
   1910a:	009b      	lsls	r3, r3, #2
   1910c:	0018      	movs	r0, r3
   1910e:	4b1c      	ldr	r3, [pc, #112]	; (19180 <HTTP_DownloadFileTransaction+0xc0>)
   19110:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   19112:	4b1e      	ldr	r3, [pc, #120]	; (1918c <HTTP_DownloadFileTransaction+0xcc>)
   19114:	2200      	movs	r2, #0
   19116:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   19118:	003b      	movs	r3, r7
   1911a:	4a1d      	ldr	r2, [pc, #116]	; (19190 <HTTP_DownloadFileTransaction+0xd0>)
   1911c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1911e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   19120:	003b      	movs	r3, r7
   19122:	2230      	movs	r2, #48	; 0x30
   19124:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   19126:	230f      	movs	r3, #15
   19128:	18fc      	adds	r4, r7, r3
   1912a:	0039      	movs	r1, r7
   1912c:	4b19      	ldr	r3, [pc, #100]	; (19194 <HTTP_DownloadFileTransaction+0xd4>)
   1912e:	220a      	movs	r2, #10
   19130:	0018      	movs	r0, r3
   19132:	4b19      	ldr	r3, [pc, #100]	; (19198 <HTTP_DownloadFileTransaction+0xd8>)
   19134:	4798      	blx	r3
   19136:	0003      	movs	r3, r0
   19138:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1913a:	230f      	movs	r3, #15
   1913c:	18fb      	adds	r3, r7, r3
   1913e:	781b      	ldrb	r3, [r3, #0]
   19140:	2b00      	cmp	r3, #0
   19142:	d008      	beq.n	19156 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   19144:	230f      	movs	r3, #15
   19146:	18fb      	adds	r3, r7, r3
   19148:	781a      	ldrb	r2, [r3, #0]
   1914a:	4b14      	ldr	r3, [pc, #80]	; (1919c <HTTP_DownloadFileTransaction+0xdc>)
   1914c:	0019      	movs	r1, r3
   1914e:	2000      	movs	r0, #0
   19150:	4b13      	ldr	r3, [pc, #76]	; (191a0 <HTTP_DownloadFileTransaction+0xe0>)
   19152:	4798      	blx	r3
   19154:	e003      	b.n	1915e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   19156:	4b13      	ldr	r3, [pc, #76]	; (191a4 <HTTP_DownloadFileTransaction+0xe4>)
   19158:	0018      	movs	r0, r3
   1915a:	4b13      	ldr	r3, [pc, #76]	; (191a8 <HTTP_DownloadFileTransaction+0xe8>)
   1915c:	4798      	blx	r3
    }
	
	f_close(&file_object);
   1915e:	4b0d      	ldr	r3, [pc, #52]	; (19194 <HTTP_DownloadFileTransaction+0xd4>)
   19160:	0018      	movs	r0, r3
   19162:	4b12      	ldr	r3, [pc, #72]	; (191ac <HTTP_DownloadFileTransaction+0xec>)
   19164:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   19166:	4b12      	ldr	r3, [pc, #72]	; (191b0 <HTTP_DownloadFileTransaction+0xf0>)
   19168:	2200      	movs	r2, #0
   1916a:	701a      	strb	r2, [r3, #0]
}
   1916c:	46c0      	nop			; (mov r8, r8)
   1916e:	46bd      	mov	sp, r7
   19170:	b005      	add	sp, #20
   19172:	bd90      	pop	{r4, r7, pc}
   19174:	0002436d 	.word	0x0002436d
   19178:	2000475c 	.word	0x2000475c
   1917c:	00034abd 	.word	0x00034abd
   19180:	0001e5b1 	.word	0x0001e5b1
   19184:	0001821d 	.word	0x0001821d
   19188:	00027929 	.word	0x00027929
   1918c:	200004dc 	.word	0x200004dc
   19190:	00039ea8 	.word	0x00039ea8
   19194:	20000710 	.word	0x20000710
   19198:	0002fd85 	.word	0x0002fd85
   1919c:	00039e84 	.word	0x00039e84
   191a0:	000202f1 	.word	0x000202f1
   191a4:	00039e94 	.word	0x00039e94
   191a8:	00020205 	.word	0x00020205
   191ac:	00030785 	.word	0x00030785
   191b0:	200004c6 	.word	0x200004c6

000191b4 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   191b4:	b580      	push	{r7, lr}
   191b6:	af00      	add	r7, sp, #0
    socketDeinit();
   191b8:	4b18      	ldr	r3, [pc, #96]	; (1921c <MQTT_InitRoutine+0x68>)
   191ba:	4798      	blx	r3
    configure_mqtt();
   191bc:	4b18      	ldr	r3, [pc, #96]	; (19220 <MQTT_InitRoutine+0x6c>)
   191be:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   191c0:	4a18      	ldr	r2, [pc, #96]	; (19224 <MQTT_InitRoutine+0x70>)
   191c2:	4b19      	ldr	r3, [pc, #100]	; (19228 <MQTT_InitRoutine+0x74>)
   191c4:	0011      	movs	r1, r2
   191c6:	0018      	movs	r0, r3
   191c8:	4b18      	ldr	r3, [pc, #96]	; (1922c <MQTT_InitRoutine+0x78>)
   191ca:	4798      	blx	r3
    socketInit();
   191cc:	4b18      	ldr	r3, [pc, #96]	; (19230 <MQTT_InitRoutine+0x7c>)
   191ce:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   191d0:	4b18      	ldr	r3, [pc, #96]	; (19234 <MQTT_InitRoutine+0x80>)
   191d2:	2234      	movs	r2, #52	; 0x34
   191d4:	5c9b      	ldrb	r3, [r3, r2]
   191d6:	2201      	movs	r2, #1
   191d8:	4053      	eors	r3, r2
   191da:	b2db      	uxtb	r3, r3
   191dc:	2b00      	cmp	r3, #0
   191de:	d00c      	beq.n	191fa <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   191e0:	4a15      	ldr	r2, [pc, #84]	; (19238 <MQTT_InitRoutine+0x84>)
   191e2:	4b14      	ldr	r3, [pc, #80]	; (19234 <MQTT_InitRoutine+0x80>)
   191e4:	0011      	movs	r1, r2
   191e6:	0018      	movs	r0, r3
   191e8:	4b14      	ldr	r3, [pc, #80]	; (1923c <MQTT_InitRoutine+0x88>)
   191ea:	4798      	blx	r3
   191ec:	1e03      	subs	r3, r0, #0
   191ee:	d004      	beq.n	191fa <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   191f0:	4b13      	ldr	r3, [pc, #76]	; (19240 <MQTT_InitRoutine+0x8c>)
   191f2:	0019      	movs	r1, r3
   191f4:	2001      	movs	r0, #1
   191f6:	4b13      	ldr	r3, [pc, #76]	; (19244 <MQTT_InitRoutine+0x90>)
   191f8:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   191fa:	4b0e      	ldr	r3, [pc, #56]	; (19234 <MQTT_InitRoutine+0x80>)
   191fc:	2234      	movs	r2, #52	; 0x34
   191fe:	5c9b      	ldrb	r3, [r3, r2]
   19200:	2b00      	cmp	r3, #0
   19202:	d004      	beq.n	1920e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   19204:	4b10      	ldr	r3, [pc, #64]	; (19248 <MQTT_InitRoutine+0x94>)
   19206:	0019      	movs	r1, r3
   19208:	2001      	movs	r0, #1
   1920a:	4b0e      	ldr	r3, [pc, #56]	; (19244 <MQTT_InitRoutine+0x90>)
   1920c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1920e:	4b0f      	ldr	r3, [pc, #60]	; (1924c <MQTT_InitRoutine+0x98>)
   19210:	2201      	movs	r2, #1
   19212:	701a      	strb	r2, [r3, #0]
}
   19214:	46c0      	nop			; (mov r8, r8)
   19216:	46bd      	mov	sp, r7
   19218:	bd80      	pop	{r7, pc}
   1921a:	46c0      	nop			; (mov r8, r8)
   1921c:	00027929 	.word	0x00027929
   19220:	00018ebd 	.word	0x00018ebd
   19224:	00018d0d 	.word	0x00018d0d
   19228:	00018cd9 	.word	0x00018cd9
   1922c:	00027971 	.word	0x00027971
   19230:	000278d9 	.word	0x000278d9
   19234:	2000073c 	.word	0x2000073c
   19238:	00039628 	.word	0x00039628
   1923c:	00031c61 	.word	0x00031c61
   19240:	00039a44 	.word	0x00039a44
   19244:	000202f1 	.word	0x000202f1
   19248:	00039eb4 	.word	0x00039eb4
   1924c:	200004c6 	.word	0x200004c6

00019250 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   19250:	b580      	push	{r7, lr}
   19252:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   19254:	2000      	movs	r0, #0
   19256:	4b0c      	ldr	r3, [pc, #48]	; (19288 <MQTT_HandleTransactions+0x38>)
   19258:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1925a:	4b0c      	ldr	r3, [pc, #48]	; (1928c <MQTT_HandleTransactions+0x3c>)
   1925c:	0018      	movs	r0, r3
   1925e:	4b0c      	ldr	r3, [pc, #48]	; (19290 <MQTT_HandleTransactions+0x40>)
   19260:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   19262:	4b0c      	ldr	r3, [pc, #48]	; (19294 <MQTT_HandleTransactions+0x44>)
   19264:	4798      	blx	r3
    MQTT_HandleImuMessages();
   19266:	4b0c      	ldr	r3, [pc, #48]	; (19298 <MQTT_HandleTransactions+0x48>)
   19268:	4798      	blx	r3
	MQTT_HandleBmeMessages();
   1926a:	4b0c      	ldr	r3, [pc, #48]	; (1929c <MQTT_HandleTransactions+0x4c>)
   1926c:	4798      	blx	r3


    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   1926e:	4b0c      	ldr	r3, [pc, #48]	; (192a0 <MQTT_HandleTransactions+0x50>)
   19270:	2234      	movs	r2, #52	; 0x34
   19272:	5c9b      	ldrb	r3, [r3, r2]
   19274:	2b00      	cmp	r3, #0
   19276:	d004      	beq.n	19282 <MQTT_HandleTransactions+0x32>
   19278:	4b09      	ldr	r3, [pc, #36]	; (192a0 <MQTT_HandleTransactions+0x50>)
   1927a:	2164      	movs	r1, #100	; 0x64
   1927c:	0018      	movs	r0, r3
   1927e:	4b09      	ldr	r3, [pc, #36]	; (192a4 <MQTT_HandleTransactions+0x54>)
   19280:	4798      	blx	r3
}
   19282:	46c0      	nop			; (mov r8, r8)
   19284:	46bd      	mov	sp, r7
   19286:	bd80      	pop	{r7, pc}
   19288:	0002436d 	.word	0x0002436d
   1928c:	2000475c 	.word	0x2000475c
   19290:	00034abd 	.word	0x00034abd
   19294:	000193c5 	.word	0x000193c5
   19298:	000192a9 	.word	0x000192a9
   1929c:	00019335 	.word	0x00019335
   192a0:	2000073c 	.word	0x2000073c
   192a4:	00031e91 	.word	0x00031e91

000192a8 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   192a8:	b590      	push	{r4, r7, lr}
   192aa:	b085      	sub	sp, #20
   192ac:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   192ae:	4b18      	ldr	r3, [pc, #96]	; (19310 <MQTT_HandleImuMessages+0x68>)
   192b0:	681b      	ldr	r3, [r3, #0]
   192b2:	0039      	movs	r1, r7
   192b4:	2200      	movs	r2, #0
   192b6:	0018      	movs	r0, r3
   192b8:	4b16      	ldr	r3, [pc, #88]	; (19314 <MQTT_HandleImuMessages+0x6c>)
   192ba:	4798      	blx	r3
   192bc:	0003      	movs	r3, r0
   192be:	2b01      	cmp	r3, #1
   192c0:	d121      	bne.n	19306 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   192c2:	003b      	movs	r3, r7
   192c4:	2200      	movs	r2, #0
   192c6:	5e9b      	ldrsh	r3, [r3, r2]
   192c8:	001c      	movs	r4, r3
   192ca:	003b      	movs	r3, r7
   192cc:	2202      	movs	r2, #2
   192ce:	5e9b      	ldrsh	r3, [r3, r2]
   192d0:	0019      	movs	r1, r3
   192d2:	003b      	movs	r3, r7
   192d4:	2204      	movs	r2, #4
   192d6:	5e9b      	ldrsh	r3, [r3, r2]
   192d8:	4a0f      	ldr	r2, [pc, #60]	; (19318 <MQTT_HandleImuMessages+0x70>)
   192da:	4810      	ldr	r0, [pc, #64]	; (1931c <MQTT_HandleImuMessages+0x74>)
   192dc:	9301      	str	r3, [sp, #4]
   192de:	9100      	str	r1, [sp, #0]
   192e0:	0023      	movs	r3, r4
   192e2:	213f      	movs	r1, #63	; 0x3f
   192e4:	4c0e      	ldr	r4, [pc, #56]	; (19320 <MQTT_HandleImuMessages+0x78>)
   192e6:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   192e8:	4b0c      	ldr	r3, [pc, #48]	; (1931c <MQTT_HandleImuMessages+0x74>)
   192ea:	0018      	movs	r0, r3
   192ec:	4b0d      	ldr	r3, [pc, #52]	; (19324 <MQTT_HandleImuMessages+0x7c>)
   192ee:	4798      	blx	r3
   192f0:	0004      	movs	r4, r0
   192f2:	4a0a      	ldr	r2, [pc, #40]	; (1931c <MQTT_HandleImuMessages+0x74>)
   192f4:	490c      	ldr	r1, [pc, #48]	; (19328 <MQTT_HandleImuMessages+0x80>)
   192f6:	480d      	ldr	r0, [pc, #52]	; (1932c <MQTT_HandleImuMessages+0x84>)
   192f8:	2300      	movs	r3, #0
   192fa:	9301      	str	r3, [sp, #4]
   192fc:	2301      	movs	r3, #1
   192fe:	9300      	str	r3, [sp, #0]
   19300:	0023      	movs	r3, r4
   19302:	4c0b      	ldr	r4, [pc, #44]	; (19330 <MQTT_HandleImuMessages+0x88>)
   19304:	47a0      	blx	r4
    }
}
   19306:	46c0      	nop			; (mov r8, r8)
   19308:	46bd      	mov	sp, r7
   1930a:	b003      	add	sp, #12
   1930c:	bd90      	pop	{r4, r7, pc}
   1930e:	46c0      	nop			; (mov r8, r8)
   19310:	200004d0 	.word	0x200004d0
   19314:	0001d405 	.word	0x0001d405
   19318:	00039ed0 	.word	0x00039ed0
   1931c:	20000034 	.word	0x20000034
   19320:	00037bc5 	.word	0x00037bc5
   19324:	00037d23 	.word	0x00037d23
   19328:	00039ef4 	.word	0x00039ef4
   1932c:	2000073c 	.word	0x2000073c
   19330:	00031ddd 	.word	0x00031ddd

00019334 <MQTT_HandleBmeMessages>:
static void MQTT_HandleBmeMessages(void)
{
   19334:	b5f0      	push	{r4, r5, r6, r7, lr}
   19336:	b08b      	sub	sp, #44	; 0x2c
   19338:	af04      	add	r7, sp, #16
	struct BMEDataPacket bmeDataVar;
	if (pdPASS == xQueueReceive(xQueueBmeBuffer, &bmeDataVar, 0)) {
   1933a:	4b19      	ldr	r3, [pc, #100]	; (193a0 <MQTT_HandleBmeMessages+0x6c>)
   1933c:	681b      	ldr	r3, [r3, #0]
   1933e:	1d39      	adds	r1, r7, #4
   19340:	2200      	movs	r2, #0
   19342:	0018      	movs	r0, r3
   19344:	4b17      	ldr	r3, [pc, #92]	; (193a4 <MQTT_HandleBmeMessages+0x70>)
   19346:	4798      	blx	r3
   19348:	0003      	movs	r3, r0
   1934a:	2b01      	cmp	r3, #1
   1934c:	d124      	bne.n	19398 <MQTT_HandleBmeMessages+0x64>
		snprintf(mqtt_msg, 63, "{\"temp\":%d, \"hum\": %d, \"pre\": %d, \"war\": %d, \"gas\": %d}", bmeDataVar.temperature, bmeDataVar.humidity, bmeDataVar.pressure,bmeDataVar.warning_status,bmeDataVar.gas_res);
   1934e:	1d3b      	adds	r3, r7, #4
   19350:	681e      	ldr	r6, [r3, #0]
   19352:	1d3b      	adds	r3, r7, #4
   19354:	685a      	ldr	r2, [r3, #4]
   19356:	1d3b      	adds	r3, r7, #4
   19358:	6899      	ldr	r1, [r3, #8]
   1935a:	1d3b      	adds	r3, r7, #4
   1935c:	68d8      	ldr	r0, [r3, #12]
   1935e:	1d3b      	adds	r3, r7, #4
   19360:	691b      	ldr	r3, [r3, #16]
   19362:	4d11      	ldr	r5, [pc, #68]	; (193a8 <MQTT_HandleBmeMessages+0x74>)
   19364:	4c11      	ldr	r4, [pc, #68]	; (193ac <MQTT_HandleBmeMessages+0x78>)
   19366:	9303      	str	r3, [sp, #12]
   19368:	9002      	str	r0, [sp, #8]
   1936a:	9101      	str	r1, [sp, #4]
   1936c:	9200      	str	r2, [sp, #0]
   1936e:	0033      	movs	r3, r6
   19370:	002a      	movs	r2, r5
   19372:	213f      	movs	r1, #63	; 0x3f
   19374:	0020      	movs	r0, r4
   19376:	4c0e      	ldr	r4, [pc, #56]	; (193b0 <MQTT_HandleBmeMessages+0x7c>)
   19378:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, BME_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1937a:	4b0c      	ldr	r3, [pc, #48]	; (193ac <MQTT_HandleBmeMessages+0x78>)
   1937c:	0018      	movs	r0, r3
   1937e:	4b0d      	ldr	r3, [pc, #52]	; (193b4 <MQTT_HandleBmeMessages+0x80>)
   19380:	4798      	blx	r3
   19382:	0004      	movs	r4, r0
   19384:	4a09      	ldr	r2, [pc, #36]	; (193ac <MQTT_HandleBmeMessages+0x78>)
   19386:	490c      	ldr	r1, [pc, #48]	; (193b8 <MQTT_HandleBmeMessages+0x84>)
   19388:	480c      	ldr	r0, [pc, #48]	; (193bc <MQTT_HandleBmeMessages+0x88>)
   1938a:	2300      	movs	r3, #0
   1938c:	9301      	str	r3, [sp, #4]
   1938e:	2301      	movs	r3, #1
   19390:	9300      	str	r3, [sp, #0]
   19392:	0023      	movs	r3, r4
   19394:	4c0a      	ldr	r4, [pc, #40]	; (193c0 <MQTT_HandleBmeMessages+0x8c>)
   19396:	47a0      	blx	r4
	}
}
   19398:	46c0      	nop			; (mov r8, r8)
   1939a:	46bd      	mov	sp, r7
   1939c:	b007      	add	sp, #28
   1939e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   193a0:	200004d8 	.word	0x200004d8
   193a4:	0001d405 	.word	0x0001d405
   193a8:	00039f08 	.word	0x00039f08
   193ac:	20000034 	.word	0x20000034
   193b0:	00037bc5 	.word	0x00037bc5
   193b4:	00037d23 	.word	0x00037d23
   193b8:	00039f40 	.word	0x00039f40
   193bc:	2000073c 	.word	0x2000073c
   193c0:	00031ddd 	.word	0x00031ddd

000193c4 <MQTT_HandleGameMessages>:


static void MQTT_HandleGameMessages(void)
{
   193c4:	b590      	push	{r4, r7, lr}
   193c6:	b08b      	sub	sp, #44	; 0x2c
   193c8:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   193ca:	4b39      	ldr	r3, [pc, #228]	; (194b0 <MQTT_HandleGameMessages+0xec>)
   193cc:	681b      	ldr	r3, [r3, #0]
   193ce:	2208      	movs	r2, #8
   193d0:	18b9      	adds	r1, r7, r2
   193d2:	2200      	movs	r2, #0
   193d4:	0018      	movs	r0, r3
   193d6:	4b37      	ldr	r3, [pc, #220]	; (194b4 <MQTT_HandleGameMessages+0xf0>)
   193d8:	4798      	blx	r3
   193da:	0003      	movs	r3, r0
   193dc:	2b01      	cmp	r3, #1
   193de:	d163      	bne.n	194a8 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   193e0:	4b35      	ldr	r3, [pc, #212]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   193e2:	4a36      	ldr	r2, [pc, #216]	; (194bc <MQTT_HandleGameMessages+0xf8>)
   193e4:	ca03      	ldmia	r2!, {r0, r1}
   193e6:	c303      	stmia	r3!, {r0, r1}
   193e8:	8812      	ldrh	r2, [r2, #0]
   193ea:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   193ec:	2300      	movs	r3, #0
   193ee:	61fb      	str	r3, [r7, #28]
   193f0:	e02d      	b.n	1944e <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   193f2:	2308      	movs	r3, #8
   193f4:	18fa      	adds	r2, r7, r3
   193f6:	69fb      	ldr	r3, [r7, #28]
   193f8:	18d3      	adds	r3, r2, r3
   193fa:	781b      	ldrb	r3, [r3, #0]
   193fc:	2bff      	cmp	r3, #255	; 0xff
   193fe:	d02a      	beq.n	19456 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   19400:	2308      	movs	r3, #8
   19402:	18fa      	adds	r2, r7, r3
   19404:	69fb      	ldr	r3, [r7, #28]
   19406:	18d3      	adds	r3, r2, r3
   19408:	781b      	ldrb	r3, [r3, #0]
   1940a:	4a2d      	ldr	r2, [pc, #180]	; (194c0 <MQTT_HandleGameMessages+0xfc>)
   1940c:	0038      	movs	r0, r7
   1940e:	2103      	movs	r1, #3
   19410:	4c2c      	ldr	r4, [pc, #176]	; (194c4 <MQTT_HandleGameMessages+0x100>)
   19412:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   19414:	003a      	movs	r2, r7
   19416:	4b28      	ldr	r3, [pc, #160]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   19418:	0011      	movs	r1, r2
   1941a:	0018      	movs	r0, r3
   1941c:	4b2a      	ldr	r3, [pc, #168]	; (194c8 <MQTT_HandleGameMessages+0x104>)
   1941e:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   19420:	69fb      	ldr	r3, [r7, #28]
   19422:	3301      	adds	r3, #1
   19424:	2208      	movs	r2, #8
   19426:	18ba      	adds	r2, r7, r2
   19428:	5cd3      	ldrb	r3, [r2, r3]
   1942a:	2bff      	cmp	r3, #255	; 0xff
   1942c:	d00c      	beq.n	19448 <MQTT_HandleGameMessages+0x84>
   1942e:	69fb      	ldr	r3, [r7, #28]
   19430:	3301      	adds	r3, #1
   19432:	2b13      	cmp	r3, #19
   19434:	dc08      	bgt.n	19448 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   19436:	003b      	movs	r3, r7
   19438:	222c      	movs	r2, #44	; 0x2c
   1943a:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   1943c:	003a      	movs	r2, r7
   1943e:	4b1e      	ldr	r3, [pc, #120]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   19440:	0011      	movs	r1, r2
   19442:	0018      	movs	r0, r3
   19444:	4b20      	ldr	r3, [pc, #128]	; (194c8 <MQTT_HandleGameMessages+0x104>)
   19446:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   19448:	69fb      	ldr	r3, [r7, #28]
   1944a:	3301      	adds	r3, #1
   1944c:	61fb      	str	r3, [r7, #28]
   1944e:	69fb      	ldr	r3, [r7, #28]
   19450:	2b13      	cmp	r3, #19
   19452:	ddce      	ble.n	193f2 <MQTT_HandleGameMessages+0x2e>
   19454:	e000      	b.n	19458 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   19456:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   19458:	4b17      	ldr	r3, [pc, #92]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   1945a:	0018      	movs	r0, r3
   1945c:	4b1b      	ldr	r3, [pc, #108]	; (194cc <MQTT_HandleGameMessages+0x108>)
   1945e:	4798      	blx	r3
   19460:	0003      	movs	r3, r0
   19462:	001a      	movs	r2, r3
   19464:	4b14      	ldr	r3, [pc, #80]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   19466:	18d2      	adds	r2, r2, r3
   19468:	4b19      	ldr	r3, [pc, #100]	; (194d0 <MQTT_HandleGameMessages+0x10c>)
   1946a:	0010      	movs	r0, r2
   1946c:	0019      	movs	r1, r3
   1946e:	2303      	movs	r3, #3
   19470:	001a      	movs	r2, r3
   19472:	4b18      	ldr	r3, [pc, #96]	; (194d4 <MQTT_HandleGameMessages+0x110>)
   19474:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   19476:	4b10      	ldr	r3, [pc, #64]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   19478:	0019      	movs	r1, r3
   1947a:	2001      	movs	r0, #1
   1947c:	4b16      	ldr	r3, [pc, #88]	; (194d8 <MQTT_HandleGameMessages+0x114>)
   1947e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   19480:	4b16      	ldr	r3, [pc, #88]	; (194dc <MQTT_HandleGameMessages+0x118>)
   19482:	0019      	movs	r1, r3
   19484:	2001      	movs	r0, #1
   19486:	4b14      	ldr	r3, [pc, #80]	; (194d8 <MQTT_HandleGameMessages+0x114>)
   19488:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1948a:	4b0b      	ldr	r3, [pc, #44]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   1948c:	0018      	movs	r0, r3
   1948e:	4b0f      	ldr	r3, [pc, #60]	; (194cc <MQTT_HandleGameMessages+0x108>)
   19490:	4798      	blx	r3
   19492:	0004      	movs	r4, r0
   19494:	4a08      	ldr	r2, [pc, #32]	; (194b8 <MQTT_HandleGameMessages+0xf4>)
   19496:	4912      	ldr	r1, [pc, #72]	; (194e0 <MQTT_HandleGameMessages+0x11c>)
   19498:	4812      	ldr	r0, [pc, #72]	; (194e4 <MQTT_HandleGameMessages+0x120>)
   1949a:	2300      	movs	r3, #0
   1949c:	9301      	str	r3, [sp, #4]
   1949e:	2301      	movs	r3, #1
   194a0:	9300      	str	r3, [sp, #0]
   194a2:	0023      	movs	r3, r4
   194a4:	4c10      	ldr	r4, [pc, #64]	; (194e8 <MQTT_HandleGameMessages+0x124>)
   194a6:	47a0      	blx	r4
    }
}
   194a8:	46c0      	nop			; (mov r8, r8)
   194aa:	46bd      	mov	sp, r7
   194ac:	b009      	add	sp, #36	; 0x24
   194ae:	bd90      	pop	{r4, r7, pc}
   194b0:	200004cc 	.word	0x200004cc
   194b4:	0001d405 	.word	0x0001d405
   194b8:	20000034 	.word	0x20000034
   194bc:	00039c00 	.word	0x00039c00
   194c0:	00039f50 	.word	0x00039f50
   194c4:	00037bc5 	.word	0x00037bc5
   194c8:	00037ca9 	.word	0x00037ca9
   194cc:	00037d23 	.word	0x00037d23
   194d0:	00039f54 	.word	0x00039f54
   194d4:	00037935 	.word	0x00037935
   194d8:	000202f1 	.word	0x000202f1
   194dc:	00039f58 	.word	0x00039f58
   194e0:	00039f5c 	.word	0x00039f5c
   194e4:	2000073c 	.word	0x2000073c
   194e8:	00031ddd 	.word	0x00031ddd

000194ec <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   194ec:	b590      	push	{r4, r7, lr}
   194ee:	b097      	sub	sp, #92	; 0x5c
   194f0:	af02      	add	r7, sp, #8
   194f2:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   194f4:	2064      	movs	r0, #100	; 0x64
   194f6:	4ba5      	ldr	r3, [pc, #660]	; (1978c <vWifiTask+0x2a0>)
   194f8:	4798      	blx	r3
    init_state();
   194fa:	4ba5      	ldr	r3, [pc, #660]	; (19790 <vWifiTask+0x2a4>)
   194fc:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   194fe:	2200      	movs	r2, #0
   19500:	2104      	movs	r1, #4
   19502:	2005      	movs	r0, #5
   19504:	4ba3      	ldr	r3, [pc, #652]	; (19794 <vWifiTask+0x2a8>)
   19506:	4798      	blx	r3
   19508:	0002      	movs	r2, r0
   1950a:	4ba3      	ldr	r3, [pc, #652]	; (19798 <vWifiTask+0x2ac>)
   1950c:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   1950e:	2200      	movs	r2, #0
   19510:	2106      	movs	r1, #6
   19512:	2005      	movs	r0, #5
   19514:	4b9f      	ldr	r3, [pc, #636]	; (19794 <vWifiTask+0x2a8>)
   19516:	4798      	blx	r3
   19518:	0002      	movs	r2, r0
   1951a:	4ba0      	ldr	r3, [pc, #640]	; (1979c <vWifiTask+0x2b0>)
   1951c:	601a      	str	r2, [r3, #0]
	xQueueBmeBuffer = xQueueCreate(5,sizeof(struct BMEDataPacket));
   1951e:	2200      	movs	r2, #0
   19520:	2114      	movs	r1, #20
   19522:	2005      	movs	r0, #5
   19524:	4b9b      	ldr	r3, [pc, #620]	; (19794 <vWifiTask+0x2a8>)
   19526:	4798      	blx	r3
   19528:	0002      	movs	r2, r0
   1952a:	4b9d      	ldr	r3, [pc, #628]	; (197a0 <vWifiTask+0x2b4>)
   1952c:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   1952e:	2200      	movs	r2, #0
   19530:	2114      	movs	r1, #20
   19532:	2002      	movs	r0, #2
   19534:	4b97      	ldr	r3, [pc, #604]	; (19794 <vWifiTask+0x2a8>)
   19536:	4798      	blx	r3
   19538:	0002      	movs	r2, r0
   1953a:	4b9a      	ldr	r3, [pc, #616]	; (197a4 <vWifiTask+0x2b8>)
   1953c:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   1953e:	2200      	movs	r2, #0
   19540:	2102      	movs	r1, #2
   19542:	2005      	movs	r0, #5
   19544:	4b93      	ldr	r3, [pc, #588]	; (19794 <vWifiTask+0x2a8>)
   19546:	4798      	blx	r3
   19548:	0002      	movs	r2, r0
   1954a:	4b97      	ldr	r3, [pc, #604]	; (197a8 <vWifiTask+0x2bc>)
   1954c:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueBmeBuffer == NULL) {
   1954e:	4b92      	ldr	r3, [pc, #584]	; (19798 <vWifiTask+0x2ac>)
   19550:	681b      	ldr	r3, [r3, #0]
   19552:	2b00      	cmp	r3, #0
   19554:	d00f      	beq.n	19576 <vWifiTask+0x8a>
   19556:	4b91      	ldr	r3, [pc, #580]	; (1979c <vWifiTask+0x2b0>)
   19558:	681b      	ldr	r3, [r3, #0]
   1955a:	2b00      	cmp	r3, #0
   1955c:	d00b      	beq.n	19576 <vWifiTask+0x8a>
   1955e:	4b91      	ldr	r3, [pc, #580]	; (197a4 <vWifiTask+0x2b8>)
   19560:	681b      	ldr	r3, [r3, #0]
   19562:	2b00      	cmp	r3, #0
   19564:	d007      	beq.n	19576 <vWifiTask+0x8a>
   19566:	4b90      	ldr	r3, [pc, #576]	; (197a8 <vWifiTask+0x2bc>)
   19568:	681b      	ldr	r3, [r3, #0]
   1956a:	2b00      	cmp	r3, #0
   1956c:	d003      	beq.n	19576 <vWifiTask+0x8a>
   1956e:	4b8c      	ldr	r3, [pc, #560]	; (197a0 <vWifiTask+0x2b4>)
   19570:	681b      	ldr	r3, [r3, #0]
   19572:	2b00      	cmp	r3, #0
   19574:	d103      	bne.n	1957e <vWifiTask+0x92>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   19576:	4b8d      	ldr	r3, [pc, #564]	; (197ac <vWifiTask+0x2c0>)
   19578:	0018      	movs	r0, r3
   1957a:	4b8d      	ldr	r3, [pc, #564]	; (197b0 <vWifiTask+0x2c4>)
   1957c:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1957e:	4b8d      	ldr	r3, [pc, #564]	; (197b4 <vWifiTask+0x2c8>)
   19580:	0018      	movs	r0, r3
   19582:	4b8b      	ldr	r3, [pc, #556]	; (197b0 <vWifiTask+0x2c4>)
   19584:	4798      	blx	r3
	
	
	/* Initialize the Locker */
	lock();
   19586:	4b8c      	ldr	r3, [pc, #560]	; (197b8 <vWifiTask+0x2cc>)
   19588:	4798      	blx	r3
	
    /* Initialize the Timer. */
    configure_timer();
   1958a:	4b8c      	ldr	r3, [pc, #560]	; (197bc <vWifiTask+0x2d0>)
   1958c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   1958e:	4b8c      	ldr	r3, [pc, #560]	; (197c0 <vWifiTask+0x2d4>)
   19590:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   19592:	4b8c      	ldr	r3, [pc, #560]	; (197c4 <vWifiTask+0x2d8>)
   19594:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   19596:	4b8c      	ldr	r3, [pc, #560]	; (197c8 <vWifiTask+0x2dc>)
   19598:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   1959a:	4b8c      	ldr	r3, [pc, #560]	; (197cc <vWifiTask+0x2e0>)
   1959c:	4798      	blx	r3
    configure_extint_callbacks();
   1959e:	4b8c      	ldr	r3, [pc, #560]	; (197d0 <vWifiTask+0x2e4>)
   195a0:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   195a2:	2324      	movs	r3, #36	; 0x24
   195a4:	18fb      	adds	r3, r7, r3
   195a6:	2218      	movs	r2, #24
   195a8:	2100      	movs	r1, #0
   195aa:	0018      	movs	r0, r3
   195ac:	4b89      	ldr	r3, [pc, #548]	; (197d4 <vWifiTask+0x2e8>)
   195ae:	4798      	blx	r3

    nm_bsp_init();
   195b0:	4b89      	ldr	r3, [pc, #548]	; (197d8 <vWifiTask+0x2ec>)
   195b2:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   195b4:	2324      	movs	r3, #36	; 0x24
   195b6:	18fb      	adds	r3, r7, r3
   195b8:	4a88      	ldr	r2, [pc, #544]	; (197dc <vWifiTask+0x2f0>)
   195ba:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   195bc:	234f      	movs	r3, #79	; 0x4f
   195be:	18fc      	adds	r4, r7, r3
   195c0:	2324      	movs	r3, #36	; 0x24
   195c2:	18fb      	adds	r3, r7, r3
   195c4:	0018      	movs	r0, r3
   195c6:	4b86      	ldr	r3, [pc, #536]	; (197e0 <vWifiTask+0x2f4>)
   195c8:	4798      	blx	r3
   195ca:	0003      	movs	r3, r0
   195cc:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   195ce:	234f      	movs	r3, #79	; 0x4f
   195d0:	18fb      	adds	r3, r7, r3
   195d2:	781b      	ldrb	r3, [r3, #0]
   195d4:	b25b      	sxtb	r3, r3
   195d6:	2b00      	cmp	r3, #0
   195d8:	d009      	beq.n	195ee <vWifiTask+0x102>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   195da:	234f      	movs	r3, #79	; 0x4f
   195dc:	18fb      	adds	r3, r7, r3
   195de:	2200      	movs	r2, #0
   195e0:	569a      	ldrsb	r2, [r3, r2]
   195e2:	4b80      	ldr	r3, [pc, #512]	; (197e4 <vWifiTask+0x2f8>)
   195e4:	0019      	movs	r1, r3
   195e6:	2001      	movs	r0, #1
   195e8:	4b7f      	ldr	r3, [pc, #508]	; (197e8 <vWifiTask+0x2fc>)
   195ea:	4798      	blx	r3
        while (1) {
   195ec:	e7fe      	b.n	195ec <vWifiTask+0x100>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   195ee:	4a7f      	ldr	r2, [pc, #508]	; (197ec <vWifiTask+0x300>)
   195f0:	4b7f      	ldr	r3, [pc, #508]	; (197f0 <vWifiTask+0x304>)
   195f2:	0019      	movs	r1, r3
   195f4:	2001      	movs	r0, #1
   195f6:	4b7c      	ldr	r3, [pc, #496]	; (197e8 <vWifiTask+0x2fc>)
   195f8:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   195fa:	4b7e      	ldr	r3, [pc, #504]	; (197f4 <vWifiTask+0x308>)
   195fc:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   195fe:	4a7e      	ldr	r2, [pc, #504]	; (197f8 <vWifiTask+0x30c>)
   19600:	4b7e      	ldr	r3, [pc, #504]	; (197fc <vWifiTask+0x310>)
   19602:	0011      	movs	r1, r2
   19604:	0018      	movs	r0, r3
   19606:	4b7e      	ldr	r3, [pc, #504]	; (19800 <vWifiTask+0x314>)
   19608:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1960a:	4a7e      	ldr	r2, [pc, #504]	; (19804 <vWifiTask+0x318>)
   1960c:	4877      	ldr	r0, [pc, #476]	; (197ec <vWifiTask+0x300>)
   1960e:	23ff      	movs	r3, #255	; 0xff
   19610:	9300      	str	r3, [sp, #0]
   19612:	0013      	movs	r3, r2
   19614:	2202      	movs	r2, #2
   19616:	2102      	movs	r1, #2
   19618:	4c7b      	ldr	r4, [pc, #492]	; (19808 <vWifiTask+0x31c>)
   1961a:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   1961c:	e006      	b.n	1962c <vWifiTask+0x140>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1961e:	2000      	movs	r0, #0
   19620:	4b7a      	ldr	r3, [pc, #488]	; (1980c <vWifiTask+0x320>)
   19622:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   19624:	4b7a      	ldr	r3, [pc, #488]	; (19810 <vWifiTask+0x324>)
   19626:	0018      	movs	r0, r3
   19628:	4b7a      	ldr	r3, [pc, #488]	; (19814 <vWifiTask+0x328>)
   1962a:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   1962c:	2002      	movs	r0, #2
   1962e:	4b7a      	ldr	r3, [pc, #488]	; (19818 <vWifiTask+0x32c>)
   19630:	4798      	blx	r3
   19632:	0003      	movs	r3, r0
   19634:	001a      	movs	r2, r3
   19636:	2301      	movs	r3, #1
   19638:	4053      	eors	r3, r2
   1963a:	b2db      	uxtb	r3, r3
   1963c:	2b00      	cmp	r3, #0
   1963e:	d1ee      	bne.n	1961e <vWifiTask+0x132>
    }

    vTaskDelay(10);
   19640:	200a      	movs	r0, #10
   19642:	4b52      	ldr	r3, [pc, #328]	; (1978c <vWifiTask+0x2a0>)
   19644:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   19646:	4b75      	ldr	r3, [pc, #468]	; (1981c <vWifiTask+0x330>)
   19648:	2201      	movs	r2, #1
   1964a:	701a      	strb	r2, [r3, #0]
   
    while (1) {
		read_sensor_data();
   1964c:	4b74      	ldr	r3, [pc, #464]	; (19820 <vWifiTask+0x334>)
   1964e:	4798      	blx	r3
		int temp = (int)getTemperature();
   19650:	4b74      	ldr	r3, [pc, #464]	; (19824 <vWifiTask+0x338>)
   19652:	4798      	blx	r3
   19654:	1c02      	adds	r2, r0, #0
   19656:	4b74      	ldr	r3, [pc, #464]	; (19828 <vWifiTask+0x33c>)
   19658:	1c10      	adds	r0, r2, #0
   1965a:	4798      	blx	r3
   1965c:	0003      	movs	r3, r0
   1965e:	64bb      	str	r3, [r7, #72]	; 0x48
		int hum = (int)getHumidity();
   19660:	4b72      	ldr	r3, [pc, #456]	; (1982c <vWifiTask+0x340>)
   19662:	4798      	blx	r3
   19664:	1c02      	adds	r2, r0, #0
   19666:	4b70      	ldr	r3, [pc, #448]	; (19828 <vWifiTask+0x33c>)
   19668:	1c10      	adds	r0, r2, #0
   1966a:	4798      	blx	r3
   1966c:	0003      	movs	r3, r0
   1966e:	647b      	str	r3, [r7, #68]	; 0x44
		int pressure = (int)getPressure();
   19670:	4b6f      	ldr	r3, [pc, #444]	; (19830 <vWifiTask+0x344>)
   19672:	4798      	blx	r3
   19674:	1c02      	adds	r2, r0, #0
   19676:	4b6c      	ldr	r3, [pc, #432]	; (19828 <vWifiTask+0x33c>)
   19678:	1c10      	adds	r0, r2, #0
   1967a:	4798      	blx	r3
   1967c:	0003      	movs	r3, r0
   1967e:	643b      	str	r3, [r7, #64]	; 0x40
		int gas = (int)getGasResistance();
   19680:	4b6c      	ldr	r3, [pc, #432]	; (19834 <vWifiTask+0x348>)
   19682:	4798      	blx	r3
   19684:	0003      	movs	r3, r0
   19686:	63fb      	str	r3, [r7, #60]	; 0x3c
		check_sensor_data(temp,hum,pressure,gas);
   19688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1968a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1968c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1968e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   19690:	4c69      	ldr	r4, [pc, #420]	; (19838 <vWifiTask+0x34c>)
   19692:	47a0      	blx	r4
		struct BMEDataPacket bme;
		bme.temperature = temp;
   19694:	2310      	movs	r3, #16
   19696:	18fb      	adds	r3, r7, r3
   19698:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1969a:	601a      	str	r2, [r3, #0]
		bme.humidity = hum;
   1969c:	2310      	movs	r3, #16
   1969e:	18fb      	adds	r3, r7, r3
   196a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   196a2:	605a      	str	r2, [r3, #4]
		bme.pressure = pressure;
   196a4:	2310      	movs	r3, #16
   196a6:	18fb      	adds	r3, r7, r3
   196a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   196aa:	609a      	str	r2, [r3, #8]
		bme.warning_status = current_warning;
   196ac:	4b63      	ldr	r3, [pc, #396]	; (1983c <vWifiTask+0x350>)
   196ae:	681a      	ldr	r2, [r3, #0]
   196b0:	2310      	movs	r3, #16
   196b2:	18fb      	adds	r3, r7, r3
   196b4:	60da      	str	r2, [r3, #12]
		bme.gas_res = (1200 - gas)/1200;
   196b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   196b8:	2296      	movs	r2, #150	; 0x96
   196ba:	00d2      	lsls	r2, r2, #3
   196bc:	1ad0      	subs	r0, r2, r3
   196be:	4b60      	ldr	r3, [pc, #384]	; (19840 <vWifiTask+0x354>)
   196c0:	2296      	movs	r2, #150	; 0x96
   196c2:	00d1      	lsls	r1, r2, #3
   196c4:	4798      	blx	r3
   196c6:	0003      	movs	r3, r0
   196c8:	001a      	movs	r2, r3
   196ca:	2310      	movs	r3, #16
   196cc:	18fb      	adds	r3, r7, r3
   196ce:	611a      	str	r2, [r3, #16]
		WifiAddBmeDataToQueue(&bme);
   196d0:	2310      	movs	r3, #16
   196d2:	18fb      	adds	r3, r7, r3
   196d4:	0018      	movs	r0, r3
   196d6:	4b5b      	ldr	r3, [pc, #364]	; (19844 <vWifiTask+0x358>)
   196d8:	4798      	blx	r3
		LCD_menu(wifi_status);
   196da:	4b5b      	ldr	r3, [pc, #364]	; (19848 <vWifiTask+0x35c>)
   196dc:	781b      	ldrb	r3, [r3, #0]
   196de:	0018      	movs	r0, r3
   196e0:	4b5a      	ldr	r3, [pc, #360]	; (1984c <vWifiTask+0x360>)
   196e2:	4798      	blx	r3
        switch (wifiStateMachine) {
   196e4:	4b4d      	ldr	r3, [pc, #308]	; (1981c <vWifiTask+0x330>)
   196e6:	781b      	ldrb	r3, [r3, #0]
   196e8:	b25b      	sxtb	r3, r3
   196ea:	2b01      	cmp	r3, #1
   196ec:	d00b      	beq.n	19706 <vWifiTask+0x21a>
   196ee:	dc02      	bgt.n	196f6 <vWifiTask+0x20a>
   196f0:	2b00      	cmp	r3, #0
   196f2:	d005      	beq.n	19700 <vWifiTask+0x214>
   196f4:	e010      	b.n	19718 <vWifiTask+0x22c>
   196f6:	2b02      	cmp	r3, #2
   196f8:	d008      	beq.n	1970c <vWifiTask+0x220>
   196fa:	2b03      	cmp	r3, #3
   196fc:	d009      	beq.n	19712 <vWifiTask+0x226>
   196fe:	e00b      	b.n	19718 <vWifiTask+0x22c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   19700:	4b53      	ldr	r3, [pc, #332]	; (19850 <vWifiTask+0x364>)
   19702:	4798      	blx	r3

                break;
   19704:	e00c      	b.n	19720 <vWifiTask+0x234>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   19706:	4b53      	ldr	r3, [pc, #332]	; (19854 <vWifiTask+0x368>)
   19708:	4798      	blx	r3
                break;
   1970a:	e009      	b.n	19720 <vWifiTask+0x234>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   1970c:	4b52      	ldr	r3, [pc, #328]	; (19858 <vWifiTask+0x36c>)
   1970e:	4798      	blx	r3
                break;
   19710:	e006      	b.n	19720 <vWifiTask+0x234>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   19712:	4b52      	ldr	r3, [pc, #328]	; (1985c <vWifiTask+0x370>)
   19714:	4798      	blx	r3
                break;
   19716:	e003      	b.n	19720 <vWifiTask+0x234>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   19718:	4b40      	ldr	r3, [pc, #256]	; (1981c <vWifiTask+0x330>)
   1971a:	2200      	movs	r2, #0
   1971c:	701a      	strb	r2, [r3, #0]
                break;
   1971e:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   19720:	230f      	movs	r3, #15
   19722:	18fb      	adds	r3, r7, r3
   19724:	2200      	movs	r2, #0
   19726:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   19728:	4b1b      	ldr	r3, [pc, #108]	; (19798 <vWifiTask+0x2ac>)
   1972a:	681b      	ldr	r3, [r3, #0]
   1972c:	220f      	movs	r2, #15
   1972e:	18b9      	adds	r1, r7, r2
   19730:	2200      	movs	r2, #0
   19732:	0018      	movs	r0, r3
   19734:	4b4a      	ldr	r3, [pc, #296]	; (19860 <vWifiTask+0x374>)
   19736:	4798      	blx	r3
   19738:	0003      	movs	r3, r0
   1973a:	2b01      	cmp	r3, #1
   1973c:	d105      	bne.n	1974a <vWifiTask+0x25e>
            wifiStateMachine = DataToReceive;  // Update new state
   1973e:	230f      	movs	r3, #15
   19740:	18fb      	adds	r3, r7, r3
   19742:	781b      	ldrb	r3, [r3, #0]
   19744:	b25a      	sxtb	r2, r3
   19746:	4b35      	ldr	r3, [pc, #212]	; (1981c <vWifiTask+0x330>)
   19748:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   1974a:	4b46      	ldr	r3, [pc, #280]	; (19864 <vWifiTask+0x378>)
   1974c:	781b      	ldrb	r3, [r3, #0]
   1974e:	b2db      	uxtb	r3, r3
   19750:	2b00      	cmp	r3, #0
   19752:	d017      	beq.n	19784 <vWifiTask+0x298>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   19754:	4b44      	ldr	r3, [pc, #272]	; (19868 <vWifiTask+0x37c>)
   19756:	0018      	movs	r0, r3
   19758:	4b44      	ldr	r3, [pc, #272]	; (1986c <vWifiTask+0x380>)
   1975a:	4798      	blx	r3
   1975c:	0004      	movs	r4, r0
   1975e:	4a42      	ldr	r2, [pc, #264]	; (19868 <vWifiTask+0x37c>)
   19760:	4943      	ldr	r1, [pc, #268]	; (19870 <vWifiTask+0x384>)
   19762:	4844      	ldr	r0, [pc, #272]	; (19874 <vWifiTask+0x388>)
   19764:	2300      	movs	r3, #0
   19766:	9301      	str	r3, [sp, #4]
   19768:	2301      	movs	r3, #1
   1976a:	9300      	str	r3, [sp, #0]
   1976c:	0023      	movs	r3, r4
   1976e:	4c42      	ldr	r4, [pc, #264]	; (19878 <vWifiTask+0x38c>)
   19770:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   19772:	4a3d      	ldr	r2, [pc, #244]	; (19868 <vWifiTask+0x37c>)
   19774:	4b41      	ldr	r3, [pc, #260]	; (1987c <vWifiTask+0x390>)
   19776:	0019      	movs	r1, r3
   19778:	2001      	movs	r0, #1
   1977a:	4b1b      	ldr	r3, [pc, #108]	; (197e8 <vWifiTask+0x2fc>)
   1977c:	4798      	blx	r3
            isPressed = false;
   1977e:	4b39      	ldr	r3, [pc, #228]	; (19864 <vWifiTask+0x378>)
   19780:	2200      	movs	r2, #0
   19782:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(1);
   19784:	2001      	movs	r0, #1
   19786:	4b01      	ldr	r3, [pc, #4]	; (1978c <vWifiTask+0x2a0>)
   19788:	4798      	blx	r3
    while (1) {
   1978a:	e75f      	b.n	1964c <vWifiTask+0x160>
   1978c:	0001e5b1 	.word	0x0001e5b1
   19790:	000181ad 	.word	0x000181ad
   19794:	0001c8a5 	.word	0x0001c8a5
   19798:	200004c8 	.word	0x200004c8
   1979c:	200004d0 	.word	0x200004d0
   197a0:	200004d8 	.word	0x200004d8
   197a4:	200004cc 	.word	0x200004cc
   197a8:	200004d4 	.word	0x200004d4
   197ac:	00039f70 	.word	0x00039f70
   197b0:	00020205 	.word	0x00020205
   197b4:	00039f98 	.word	0x00039f98
   197b8:	00016c55 	.word	0x00016c55
   197bc:	00018c19 	.word	0x00018c19
   197c0:	00018c55 	.word	0x00018c55
   197c4:	00018ebd 	.word	0x00018ebd
   197c8:	00018b35 	.word	0x00018b35
   197cc:	00018f75 	.word	0x00018f75
   197d0:	00018fb5 	.word	0x00018fb5
   197d4:	0003796b 	.word	0x0003796b
   197d8:	00022731 	.word	0x00022731
   197dc:	000189b1 	.word	0x000189b1
   197e0:	00024179 	.word	0x00024179
   197e4:	00039fb4 	.word	0x00039fb4
   197e8:	000202f1 	.word	0x000202f1
   197ec:	00039a18 	.word	0x00039a18
   197f0:	00039fe0 	.word	0x00039fe0
   197f4:	000278d9 	.word	0x000278d9
   197f8:	00018d0d 	.word	0x00018d0d
   197fc:	00018cd9 	.word	0x00018cd9
   19800:	00027971 	.word	0x00027971
   19804:	00039a0c 	.word	0x00039a0c
   19808:	00024389 	.word	0x00024389
   1980c:	0002436d 	.word	0x0002436d
   19810:	2000475c 	.word	0x2000475c
   19814:	00034abd 	.word	0x00034abd
   19818:	0001821d 	.word	0x0001821d
   1981c:	200004c6 	.word	0x200004c6
   19820:	00014ad1 	.word	0x00014ad1
   19824:	00014bbd 	.word	0x00014bbd
   19828:	00035ab5 	.word	0x00035ab5
   1982c:	00014bd1 	.word	0x00014bd1
   19830:	00014be5 	.word	0x00014be5
   19834:	00014bf9 	.word	0x00014bf9
   19838:	00019939 	.word	0x00019939
   1983c:	200000b4 	.word	0x200000b4
   19840:	00034f49 	.word	0x00034f49
   19844:	000198e1 	.word	0x000198e1
   19848:	200004c5 	.word	0x200004c5
   1984c:	00017be1 	.word	0x00017be1
   19850:	000191b5 	.word	0x000191b5
   19854:	00019251 	.word	0x00019251
   19858:	0001902d 	.word	0x0001902d
   1985c:	000190c1 	.word	0x000190c1
   19860:	0001d405 	.word	0x0001d405
   19864:	20000b74 	.word	0x20000b74
   19868:	20000074 	.word	0x20000074
   1986c:	00037d23 	.word	0x00037d23
   19870:	0003a004 	.word	0x0003a004
   19874:	2000073c 	.word	0x2000073c
   19878:	00031ddd 	.word	0x00031ddd
   1987c:	0003a020 	.word	0x0003a020

00019880 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   19880:	b590      	push	{r4, r7, lr}
   19882:	b083      	sub	sp, #12
   19884:	af00      	add	r7, sp, #0
   19886:	0002      	movs	r2, r0
   19888:	1dfb      	adds	r3, r7, #7
   1988a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1988c:	1dfb      	adds	r3, r7, #7
   1988e:	781b      	ldrb	r3, [r3, #0]
   19890:	2b03      	cmp	r3, #3
   19892:	d806      	bhi.n	198a2 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   19894:	4b05      	ldr	r3, [pc, #20]	; (198ac <WifiHandlerSetState+0x2c>)
   19896:	6818      	ldr	r0, [r3, #0]
   19898:	1df9      	adds	r1, r7, #7
   1989a:	2300      	movs	r3, #0
   1989c:	220a      	movs	r2, #10
   1989e:	4c04      	ldr	r4, [pc, #16]	; (198b0 <WifiHandlerSetState+0x30>)
   198a0:	47a0      	blx	r4
    }
}
   198a2:	46c0      	nop			; (mov r8, r8)
   198a4:	46bd      	mov	sp, r7
   198a6:	b003      	add	sp, #12
   198a8:	bd90      	pop	{r4, r7, pc}
   198aa:	46c0      	nop			; (mov r8, r8)
   198ac:	200004c8 	.word	0x200004c8
   198b0:	0001cb4d 	.word	0x0001cb4d

000198b4 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   198b4:	b590      	push	{r4, r7, lr}
   198b6:	b085      	sub	sp, #20
   198b8:	af00      	add	r7, sp, #0
   198ba:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   198bc:	4b06      	ldr	r3, [pc, #24]	; (198d8 <WifiAddImuDataToQueue+0x24>)
   198be:	6818      	ldr	r0, [r3, #0]
   198c0:	6879      	ldr	r1, [r7, #4]
   198c2:	2300      	movs	r3, #0
   198c4:	220a      	movs	r2, #10
   198c6:	4c05      	ldr	r4, [pc, #20]	; (198dc <WifiAddImuDataToQueue+0x28>)
   198c8:	47a0      	blx	r4
   198ca:	0003      	movs	r3, r0
   198cc:	60fb      	str	r3, [r7, #12]
    return error;
   198ce:	68fb      	ldr	r3, [r7, #12]
}
   198d0:	0018      	movs	r0, r3
   198d2:	46bd      	mov	sp, r7
   198d4:	b005      	add	sp, #20
   198d6:	bd90      	pop	{r4, r7, pc}
   198d8:	200004d0 	.word	0x200004d0
   198dc:	0001cb4d 	.word	0x0001cb4d

000198e0 <WifiAddBmeDataToQueue>:
int WifiAddBmeDataToQueue(struct BMEDataPacket *bmePacket)
{
   198e0:	b590      	push	{r4, r7, lr}
   198e2:	b085      	sub	sp, #20
   198e4:	af00      	add	r7, sp, #0
   198e6:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueBmeBuffer, bmePacket, (TickType_t)10);
   198e8:	4b06      	ldr	r3, [pc, #24]	; (19904 <WifiAddBmeDataToQueue+0x24>)
   198ea:	6818      	ldr	r0, [r3, #0]
   198ec:	6879      	ldr	r1, [r7, #4]
   198ee:	2300      	movs	r3, #0
   198f0:	220a      	movs	r2, #10
   198f2:	4c05      	ldr	r4, [pc, #20]	; (19908 <WifiAddBmeDataToQueue+0x28>)
   198f4:	47a0      	blx	r4
   198f6:	0003      	movs	r3, r0
   198f8:	60fb      	str	r3, [r7, #12]
	return error;
   198fa:	68fb      	ldr	r3, [r7, #12]
}
   198fc:	0018      	movs	r0, r3
   198fe:	46bd      	mov	sp, r7
   19900:	b005      	add	sp, #20
   19902:	bd90      	pop	{r4, r7, pc}
   19904:	200004d8 	.word	0x200004d8
   19908:	0001cb4d 	.word	0x0001cb4d

0001990c <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   1990c:	b590      	push	{r4, r7, lr}
   1990e:	b085      	sub	sp, #20
   19910:	af00      	add	r7, sp, #0
   19912:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   19914:	4b06      	ldr	r3, [pc, #24]	; (19930 <WifiAddGameDataToQueue+0x24>)
   19916:	6818      	ldr	r0, [r3, #0]
   19918:	6879      	ldr	r1, [r7, #4]
   1991a:	2300      	movs	r3, #0
   1991c:	220a      	movs	r2, #10
   1991e:	4c05      	ldr	r4, [pc, #20]	; (19934 <WifiAddGameDataToQueue+0x28>)
   19920:	47a0      	blx	r4
   19922:	0003      	movs	r3, r0
   19924:	60fb      	str	r3, [r7, #12]
    return error;
   19926:	68fb      	ldr	r3, [r7, #12]
}
   19928:	0018      	movs	r0, r3
   1992a:	46bd      	mov	sp, r7
   1992c:	b005      	add	sp, #20
   1992e:	bd90      	pop	{r4, r7, pc}
   19930:	200004cc 	.word	0x200004cc
   19934:	0001cb4d 	.word	0x0001cb4d

00019938 <check_sensor_data>:

void check_sensor_data(int temp,int hum,int pre,int gas){
   19938:	b580      	push	{r7, lr}
   1993a:	b084      	sub	sp, #16
   1993c:	af00      	add	r7, sp, #0
   1993e:	60f8      	str	r0, [r7, #12]
   19940:	60b9      	str	r1, [r7, #8]
   19942:	607a      	str	r2, [r7, #4]
   19944:	603b      	str	r3, [r7, #0]
	if(temp > MAX_TEMP)
   19946:	68fb      	ldr	r3, [r7, #12]
   19948:	2b1e      	cmp	r3, #30
   1994a:	dd04      	ble.n	19956 <check_sensor_data+0x1e>
	{
		current_warning = TEMP_WARNING;
   1994c:	4b08      	ldr	r3, [pc, #32]	; (19970 <check_sensor_data+0x38>)
   1994e:	2201      	movs	r2, #1
   19950:	601a      	str	r2, [r3, #0]
		warning_speaker();
   19952:	4b08      	ldr	r3, [pc, #32]	; (19974 <check_sensor_data+0x3c>)
   19954:	4798      	blx	r3
	}
	if(gas < MAX_GAS){
   19956:	683b      	ldr	r3, [r7, #0]
   19958:	2b63      	cmp	r3, #99	; 0x63
   1995a:	dc04      	bgt.n	19966 <check_sensor_data+0x2e>
		current_warning = GAS_WARNING;
   1995c:	4b04      	ldr	r3, [pc, #16]	; (19970 <check_sensor_data+0x38>)
   1995e:	2204      	movs	r2, #4
   19960:	601a      	str	r2, [r3, #0]
		warning_speaker();
   19962:	4b04      	ldr	r3, [pc, #16]	; (19974 <check_sensor_data+0x3c>)
   19964:	4798      	blx	r3
	}
   19966:	46c0      	nop			; (mov r8, r8)
   19968:	46bd      	mov	sp, r7
   1996a:	b004      	add	sp, #16
   1996c:	bd80      	pop	{r7, pc}
   1996e:	46c0      	nop			; (mov r8, r8)
   19970:	200000b4 	.word	0x200000b4
   19974:	00017081 	.word	0x00017081

00019978 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   19978:	b580      	push	{r7, lr}
   1997a:	b082      	sub	sp, #8
   1997c:	af00      	add	r7, sp, #0
   1997e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   19980:	687b      	ldr	r3, [r7, #4]
   19982:	2200      	movs	r2, #0
   19984:	701a      	strb	r2, [r3, #0]
}
   19986:	46c0      	nop			; (mov r8, r8)
   19988:	46bd      	mov	sp, r7
   1998a:	b002      	add	sp, #8
   1998c:	bd80      	pop	{r7, pc}
	...

00019990 <system_apb_clock_set_mask>:
{
   19990:	b580      	push	{r7, lr}
   19992:	b082      	sub	sp, #8
   19994:	af00      	add	r7, sp, #0
   19996:	0002      	movs	r2, r0
   19998:	6039      	str	r1, [r7, #0]
   1999a:	1dfb      	adds	r3, r7, #7
   1999c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1999e:	1dfb      	adds	r3, r7, #7
   199a0:	781b      	ldrb	r3, [r3, #0]
   199a2:	2b01      	cmp	r3, #1
   199a4:	d00a      	beq.n	199bc <system_apb_clock_set_mask+0x2c>
   199a6:	2b02      	cmp	r3, #2
   199a8:	d00f      	beq.n	199ca <system_apb_clock_set_mask+0x3a>
   199aa:	2b00      	cmp	r3, #0
   199ac:	d114      	bne.n	199d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   199ae:	4b0e      	ldr	r3, [pc, #56]	; (199e8 <system_apb_clock_set_mask+0x58>)
   199b0:	4a0d      	ldr	r2, [pc, #52]	; (199e8 <system_apb_clock_set_mask+0x58>)
   199b2:	6991      	ldr	r1, [r2, #24]
   199b4:	683a      	ldr	r2, [r7, #0]
   199b6:	430a      	orrs	r2, r1
   199b8:	619a      	str	r2, [r3, #24]
			break;
   199ba:	e00f      	b.n	199dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   199bc:	4b0a      	ldr	r3, [pc, #40]	; (199e8 <system_apb_clock_set_mask+0x58>)
   199be:	4a0a      	ldr	r2, [pc, #40]	; (199e8 <system_apb_clock_set_mask+0x58>)
   199c0:	69d1      	ldr	r1, [r2, #28]
   199c2:	683a      	ldr	r2, [r7, #0]
   199c4:	430a      	orrs	r2, r1
   199c6:	61da      	str	r2, [r3, #28]
			break;
   199c8:	e008      	b.n	199dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   199ca:	4b07      	ldr	r3, [pc, #28]	; (199e8 <system_apb_clock_set_mask+0x58>)
   199cc:	4a06      	ldr	r2, [pc, #24]	; (199e8 <system_apb_clock_set_mask+0x58>)
   199ce:	6a11      	ldr	r1, [r2, #32]
   199d0:	683a      	ldr	r2, [r7, #0]
   199d2:	430a      	orrs	r2, r1
   199d4:	621a      	str	r2, [r3, #32]
			break;
   199d6:	e001      	b.n	199dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   199d8:	2317      	movs	r3, #23
   199da:	e000      	b.n	199de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   199dc:	2300      	movs	r3, #0
}
   199de:	0018      	movs	r0, r3
   199e0:	46bd      	mov	sp, r7
   199e2:	b002      	add	sp, #8
   199e4:	bd80      	pop	{r7, pc}
   199e6:	46c0      	nop			; (mov r8, r8)
   199e8:	40000400 	.word	0x40000400

000199ec <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   199ec:	b580      	push	{r7, lr}
   199ee:	b082      	sub	sp, #8
   199f0:	af00      	add	r7, sp, #0
   199f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   199f4:	687b      	ldr	r3, [r7, #4]
   199f6:	2280      	movs	r2, #128	; 0x80
   199f8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   199fa:	687b      	ldr	r3, [r7, #4]
   199fc:	2200      	movs	r2, #0
   199fe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   19a00:	687b      	ldr	r3, [r7, #4]
   19a02:	2201      	movs	r2, #1
   19a04:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   19a06:	687b      	ldr	r3, [r7, #4]
   19a08:	2200      	movs	r2, #0
   19a0a:	70da      	strb	r2, [r3, #3]
}
   19a0c:	46c0      	nop			; (mov r8, r8)
   19a0e:	46bd      	mov	sp, r7
   19a10:	b002      	add	sp, #8
   19a12:	bd80      	pop	{r7, pc}

00019a14 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   19a14:	b580      	push	{r7, lr}
   19a16:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   19a18:	4b05      	ldr	r3, [pc, #20]	; (19a30 <system_is_debugger_present+0x1c>)
   19a1a:	789b      	ldrb	r3, [r3, #2]
   19a1c:	b2db      	uxtb	r3, r3
   19a1e:	001a      	movs	r2, r3
   19a20:	2302      	movs	r3, #2
   19a22:	4013      	ands	r3, r2
   19a24:	1e5a      	subs	r2, r3, #1
   19a26:	4193      	sbcs	r3, r2
   19a28:	b2db      	uxtb	r3, r3
}
   19a2a:	0018      	movs	r0, r3
   19a2c:	46bd      	mov	sp, r7
   19a2e:	bd80      	pop	{r7, pc}
   19a30:	41002000 	.word	0x41002000

00019a34 <system_interrupt_enter_critical_section>:
{
   19a34:	b580      	push	{r7, lr}
   19a36:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   19a38:	4b02      	ldr	r3, [pc, #8]	; (19a44 <system_interrupt_enter_critical_section+0x10>)
   19a3a:	4798      	blx	r3
}
   19a3c:	46c0      	nop			; (mov r8, r8)
   19a3e:	46bd      	mov	sp, r7
   19a40:	bd80      	pop	{r7, pc}
   19a42:	46c0      	nop			; (mov r8, r8)
   19a44:	000285d1 	.word	0x000285d1

00019a48 <system_interrupt_leave_critical_section>:
{
   19a48:	b580      	push	{r7, lr}
   19a4a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   19a4c:	4b02      	ldr	r3, [pc, #8]	; (19a58 <system_interrupt_leave_critical_section+0x10>)
   19a4e:	4798      	blx	r3
}
   19a50:	46c0      	nop			; (mov r8, r8)
   19a52:	46bd      	mov	sp, r7
   19a54:	bd80      	pop	{r7, pc}
   19a56:	46c0      	nop			; (mov r8, r8)
   19a58:	00028625 	.word	0x00028625

00019a5c <system_interrupt_disable>:
{
   19a5c:	b580      	push	{r7, lr}
   19a5e:	b082      	sub	sp, #8
   19a60:	af00      	add	r7, sp, #0
   19a62:	0002      	movs	r2, r0
   19a64:	1dfb      	adds	r3, r7, #7
   19a66:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19a68:	4a07      	ldr	r2, [pc, #28]	; (19a88 <system_interrupt_disable+0x2c>)
   19a6a:	1dfb      	adds	r3, r7, #7
   19a6c:	781b      	ldrb	r3, [r3, #0]
   19a6e:	0019      	movs	r1, r3
   19a70:	231f      	movs	r3, #31
   19a72:	400b      	ands	r3, r1
   19a74:	2101      	movs	r1, #1
   19a76:	4099      	lsls	r1, r3
   19a78:	000b      	movs	r3, r1
   19a7a:	0019      	movs	r1, r3
   19a7c:	2380      	movs	r3, #128	; 0x80
   19a7e:	50d1      	str	r1, [r2, r3]
}
   19a80:	46c0      	nop			; (mov r8, r8)
   19a82:	46bd      	mov	sp, r7
   19a84:	b002      	add	sp, #8
   19a86:	bd80      	pop	{r7, pc}
   19a88:	e000e100 	.word	0xe000e100

00019a8c <i2c_master_is_syncing>:
{
   19a8c:	b580      	push	{r7, lr}
   19a8e:	b084      	sub	sp, #16
   19a90:	af00      	add	r7, sp, #0
   19a92:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   19a94:	687b      	ldr	r3, [r7, #4]
   19a96:	681b      	ldr	r3, [r3, #0]
   19a98:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   19a9a:	68fb      	ldr	r3, [r7, #12]
   19a9c:	69db      	ldr	r3, [r3, #28]
   19a9e:	2207      	movs	r2, #7
   19aa0:	4013      	ands	r3, r2
   19aa2:	1e5a      	subs	r2, r3, #1
   19aa4:	4193      	sbcs	r3, r2
   19aa6:	b2db      	uxtb	r3, r3
}
   19aa8:	0018      	movs	r0, r3
   19aaa:	46bd      	mov	sp, r7
   19aac:	b004      	add	sp, #16
   19aae:	bd80      	pop	{r7, pc}

00019ab0 <_i2c_master_wait_for_sync>:
{
   19ab0:	b580      	push	{r7, lr}
   19ab2:	b082      	sub	sp, #8
   19ab4:	af00      	add	r7, sp, #0
   19ab6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   19ab8:	46c0      	nop			; (mov r8, r8)
   19aba:	687b      	ldr	r3, [r7, #4]
   19abc:	0018      	movs	r0, r3
   19abe:	4b04      	ldr	r3, [pc, #16]	; (19ad0 <_i2c_master_wait_for_sync+0x20>)
   19ac0:	4798      	blx	r3
   19ac2:	1e03      	subs	r3, r0, #0
   19ac4:	d1f9      	bne.n	19aba <_i2c_master_wait_for_sync+0xa>
}
   19ac6:	46c0      	nop			; (mov r8, r8)
   19ac8:	46bd      	mov	sp, r7
   19aca:	b002      	add	sp, #8
   19acc:	bd80      	pop	{r7, pc}
   19ace:	46c0      	nop			; (mov r8, r8)
   19ad0:	00019a8d 	.word	0x00019a8d

00019ad4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   19ad4:	b580      	push	{r7, lr}
   19ad6:	b084      	sub	sp, #16
   19ad8:	af00      	add	r7, sp, #0
   19ada:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19adc:	687b      	ldr	r3, [r7, #4]
   19ade:	681b      	ldr	r3, [r3, #0]
   19ae0:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   19ae2:	687b      	ldr	r3, [r7, #4]
   19ae4:	681b      	ldr	r3, [r3, #0]
   19ae6:	0018      	movs	r0, r3
   19ae8:	4b0d      	ldr	r3, [pc, #52]	; (19b20 <i2c_master_disable+0x4c>)
   19aea:	4798      	blx	r3
   19aec:	0003      	movs	r3, r0
   19aee:	0018      	movs	r0, r3
   19af0:	4b0c      	ldr	r3, [pc, #48]	; (19b24 <i2c_master_disable+0x50>)
   19af2:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   19af4:	687b      	ldr	r3, [r7, #4]
   19af6:	0018      	movs	r0, r3
   19af8:	4b0b      	ldr	r3, [pc, #44]	; (19b28 <i2c_master_disable+0x54>)
   19afa:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   19afc:	68fb      	ldr	r3, [r7, #12]
   19afe:	2283      	movs	r2, #131	; 0x83
   19b00:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   19b02:	68fb      	ldr	r3, [r7, #12]
   19b04:	2283      	movs	r2, #131	; 0x83
   19b06:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   19b08:	68fb      	ldr	r3, [r7, #12]
   19b0a:	681b      	ldr	r3, [r3, #0]
   19b0c:	2202      	movs	r2, #2
   19b0e:	4393      	bics	r3, r2
   19b10:	001a      	movs	r2, r3
   19b12:	68fb      	ldr	r3, [r7, #12]
   19b14:	601a      	str	r2, [r3, #0]

}
   19b16:	46c0      	nop			; (mov r8, r8)
   19b18:	46bd      	mov	sp, r7
   19b1a:	b004      	add	sp, #16
   19b1c:	bd80      	pop	{r7, pc}
   19b1e:	46c0      	nop			; (mov r8, r8)
   19b20:	00029aa5 	.word	0x00029aa5
   19b24:	00019a5d 	.word	0x00019a5d
   19b28:	00019ab1 	.word	0x00019ab1

00019b2c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   19b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b2e:	b097      	sub	sp, #92	; 0x5c
   19b30:	af00      	add	r7, sp, #0
   19b32:	6178      	str	r0, [r7, #20]
   19b34:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   19b36:	2300      	movs	r3, #0
   19b38:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   19b3a:	2300      	movs	r3, #0
   19b3c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   19b3e:	2300      	movs	r3, #0
   19b40:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   19b42:	233b      	movs	r3, #59	; 0x3b
   19b44:	2210      	movs	r2, #16
   19b46:	4694      	mov	ip, r2
   19b48:	44bc      	add	ip, r7
   19b4a:	4463      	add	r3, ip
   19b4c:	2200      	movs	r2, #0
   19b4e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19b50:	697b      	ldr	r3, [r7, #20]
   19b52:	681b      	ldr	r3, [r3, #0]
   19b54:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   19b56:	697b      	ldr	r3, [r7, #20]
   19b58:	681b      	ldr	r3, [r3, #0]
   19b5a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   19b5c:	2323      	movs	r3, #35	; 0x23
   19b5e:	2210      	movs	r2, #16
   19b60:	18ba      	adds	r2, r7, r2
   19b62:	18d4      	adds	r4, r2, r3
   19b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19b66:	0018      	movs	r0, r3
   19b68:	4bc0      	ldr	r3, [pc, #768]	; (19e6c <_i2c_master_set_config+0x340>)
   19b6a:	4798      	blx	r3
   19b6c:	0003      	movs	r3, r0
   19b6e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   19b70:	230c      	movs	r3, #12
   19b72:	2210      	movs	r2, #16
   19b74:	4694      	mov	ip, r2
   19b76:	44bc      	add	ip, r7
   19b78:	4463      	add	r3, ip
   19b7a:	0018      	movs	r0, r3
   19b7c:	4bbc      	ldr	r3, [pc, #752]	; (19e70 <_i2c_master_set_config+0x344>)
   19b7e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   19b80:	693b      	ldr	r3, [r7, #16]
   19b82:	69db      	ldr	r3, [r3, #28]
   19b84:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   19b86:	693b      	ldr	r3, [r7, #16]
   19b88:	6a1b      	ldr	r3, [r3, #32]
   19b8a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   19b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19b8e:	2b00      	cmp	r3, #0
   19b90:	d106      	bne.n	19ba0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   19b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19b94:	2100      	movs	r1, #0
   19b96:	0018      	movs	r0, r3
   19b98:	4bb6      	ldr	r3, [pc, #728]	; (19e74 <_i2c_master_set_config+0x348>)
   19b9a:	4798      	blx	r3
   19b9c:	0003      	movs	r3, r0
   19b9e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   19ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19ba2:	b2da      	uxtb	r2, r3
   19ba4:	230c      	movs	r3, #12
   19ba6:	2110      	movs	r1, #16
   19ba8:	468c      	mov	ip, r1
   19baa:	44bc      	add	ip, r7
   19bac:	4463      	add	r3, ip
   19bae:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   19bb0:	230c      	movs	r3, #12
   19bb2:	2210      	movs	r2, #16
   19bb4:	4694      	mov	ip, r2
   19bb6:	44bc      	add	ip, r7
   19bb8:	4463      	add	r3, ip
   19bba:	2202      	movs	r2, #2
   19bbc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   19bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19bc0:	0c1b      	lsrs	r3, r3, #16
   19bc2:	b2db      	uxtb	r3, r3
   19bc4:	220c      	movs	r2, #12
   19bc6:	2110      	movs	r1, #16
   19bc8:	468c      	mov	ip, r1
   19bca:	44bc      	add	ip, r7
   19bcc:	4462      	add	r2, ip
   19bce:	0011      	movs	r1, r2
   19bd0:	0018      	movs	r0, r3
   19bd2:	4ba9      	ldr	r3, [pc, #676]	; (19e78 <_i2c_master_set_config+0x34c>)
   19bd4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   19bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19bd8:	2b00      	cmp	r3, #0
   19bda:	d106      	bne.n	19bea <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   19bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19bde:	2101      	movs	r1, #1
   19be0:	0018      	movs	r0, r3
   19be2:	4ba4      	ldr	r3, [pc, #656]	; (19e74 <_i2c_master_set_config+0x348>)
   19be4:	4798      	blx	r3
   19be6:	0003      	movs	r3, r0
   19be8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   19bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19bec:	b2da      	uxtb	r2, r3
   19bee:	230c      	movs	r3, #12
   19bf0:	2110      	movs	r1, #16
   19bf2:	468c      	mov	ip, r1
   19bf4:	44bc      	add	ip, r7
   19bf6:	4463      	add	r3, ip
   19bf8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   19bfa:	230c      	movs	r3, #12
   19bfc:	2210      	movs	r2, #16
   19bfe:	4694      	mov	ip, r2
   19c00:	44bc      	add	ip, r7
   19c02:	4463      	add	r3, ip
   19c04:	2202      	movs	r2, #2
   19c06:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   19c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19c0a:	0c1b      	lsrs	r3, r3, #16
   19c0c:	b2db      	uxtb	r3, r3
   19c0e:	220c      	movs	r2, #12
   19c10:	2110      	movs	r1, #16
   19c12:	468c      	mov	ip, r1
   19c14:	44bc      	add	ip, r7
   19c16:	4462      	add	r2, ip
   19c18:	0011      	movs	r1, r2
   19c1a:	0018      	movs	r0, r3
   19c1c:	4b96      	ldr	r3, [pc, #600]	; (19e78 <_i2c_master_set_config+0x34c>)
   19c1e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   19c20:	693b      	ldr	r3, [r7, #16]
   19c22:	8a9a      	ldrh	r2, [r3, #20]
   19c24:	697b      	ldr	r3, [r7, #20]
   19c26:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   19c28:	693b      	ldr	r3, [r7, #16]
   19c2a:	8ada      	ldrh	r2, [r3, #22]
   19c2c:	697b      	ldr	r3, [r7, #20]
   19c2e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   19c30:	693b      	ldr	r3, [r7, #16]
   19c32:	7e1b      	ldrb	r3, [r3, #24]
   19c34:	2b00      	cmp	r3, #0
   19c36:	d103      	bne.n	19c40 <_i2c_master_set_config+0x114>
   19c38:	4b90      	ldr	r3, [pc, #576]	; (19e7c <_i2c_master_set_config+0x350>)
   19c3a:	4798      	blx	r3
   19c3c:	1e03      	subs	r3, r0, #0
   19c3e:	d002      	beq.n	19c46 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   19c40:	2380      	movs	r3, #128	; 0x80
   19c42:	657b      	str	r3, [r7, #84]	; 0x54
   19c44:	e001      	b.n	19c4a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   19c46:	2300      	movs	r3, #0
   19c48:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   19c4a:	693b      	ldr	r3, [r7, #16]
   19c4c:	691b      	ldr	r3, [r3, #16]
   19c4e:	2b00      	cmp	r3, #0
   19c50:	d004      	beq.n	19c5c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   19c52:	693b      	ldr	r3, [r7, #16]
   19c54:	691b      	ldr	r3, [r3, #16]
   19c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19c58:	4313      	orrs	r3, r2
   19c5a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   19c5c:	693b      	ldr	r3, [r7, #16]
   19c5e:	689b      	ldr	r3, [r3, #8]
   19c60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19c62:	4313      	orrs	r3, r2
   19c64:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   19c66:	693b      	ldr	r3, [r7, #16]
   19c68:	2224      	movs	r2, #36	; 0x24
   19c6a:	5c9b      	ldrb	r3, [r3, r2]
   19c6c:	2b00      	cmp	r3, #0
   19c6e:	d004      	beq.n	19c7a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   19c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19c72:	2280      	movs	r2, #128	; 0x80
   19c74:	05d2      	lsls	r2, r2, #23
   19c76:	4313      	orrs	r3, r2
   19c78:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   19c7a:	693b      	ldr	r3, [r7, #16]
   19c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19c7e:	2b00      	cmp	r3, #0
   19c80:	d004      	beq.n	19c8c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   19c82:	693b      	ldr	r3, [r7, #16]
   19c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19c86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19c88:	4313      	orrs	r3, r2
   19c8a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   19c8c:	693b      	ldr	r3, [r7, #16]
   19c8e:	222c      	movs	r2, #44	; 0x2c
   19c90:	5c9b      	ldrb	r3, [r3, r2]
   19c92:	2b00      	cmp	r3, #0
   19c94:	d105      	bne.n	19ca2 <_i2c_master_set_config+0x176>
   19c96:	693b      	ldr	r3, [r7, #16]
   19c98:	689a      	ldr	r2, [r3, #8]
   19c9a:	2380      	movs	r3, #128	; 0x80
   19c9c:	049b      	lsls	r3, r3, #18
   19c9e:	429a      	cmp	r2, r3
   19ca0:	d104      	bne.n	19cac <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   19ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19ca4:	2280      	movs	r2, #128	; 0x80
   19ca6:	0512      	lsls	r2, r2, #20
   19ca8:	4313      	orrs	r3, r2
   19caa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   19cac:	693b      	ldr	r3, [r7, #16]
   19cae:	222d      	movs	r2, #45	; 0x2d
   19cb0:	5c9b      	ldrb	r3, [r3, r2]
   19cb2:	2b00      	cmp	r3, #0
   19cb4:	d004      	beq.n	19cc0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   19cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19cb8:	2280      	movs	r2, #128	; 0x80
   19cba:	0412      	lsls	r2, r2, #16
   19cbc:	4313      	orrs	r3, r2
   19cbe:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   19cc0:	693b      	ldr	r3, [r7, #16]
   19cc2:	222e      	movs	r2, #46	; 0x2e
   19cc4:	5c9b      	ldrb	r3, [r3, r2]
   19cc6:	2b00      	cmp	r3, #0
   19cc8:	d004      	beq.n	19cd4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   19cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19ccc:	2280      	movs	r2, #128	; 0x80
   19cce:	03d2      	lsls	r2, r2, #15
   19cd0:	4313      	orrs	r3, r2
   19cd2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   19cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19cd6:	681a      	ldr	r2, [r3, #0]
   19cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19cda:	431a      	orrs	r2, r3
   19cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19cde:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   19ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19ce2:	2280      	movs	r2, #128	; 0x80
   19ce4:	0052      	lsls	r2, r2, #1
   19ce6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   19ce8:	2323      	movs	r3, #35	; 0x23
   19cea:	2210      	movs	r2, #16
   19cec:	4694      	mov	ip, r2
   19cee:	44bc      	add	ip, r7
   19cf0:	4463      	add	r3, ip
   19cf2:	781b      	ldrb	r3, [r3, #0]
   19cf4:	3314      	adds	r3, #20
   19cf6:	b2db      	uxtb	r3, r3
   19cf8:	0018      	movs	r0, r3
   19cfa:	4b61      	ldr	r3, [pc, #388]	; (19e80 <_i2c_master_set_config+0x354>)
   19cfc:	4798      	blx	r3
   19cfe:	0003      	movs	r3, r0
   19d00:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   19d02:	693b      	ldr	r3, [r7, #16]
   19d04:	681b      	ldr	r3, [r3, #0]
   19d06:	22fa      	movs	r2, #250	; 0xfa
   19d08:	0092      	lsls	r2, r2, #2
   19d0a:	4353      	muls	r3, r2
   19d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   19d0e:	693b      	ldr	r3, [r7, #16]
   19d10:	685b      	ldr	r3, [r3, #4]
   19d12:	22fa      	movs	r2, #250	; 0xfa
   19d14:	0092      	lsls	r2, r2, #2
   19d16:	4353      	muls	r3, r2
   19d18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   19d1a:	693b      	ldr	r3, [r7, #16]
   19d1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   19d1e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   19d20:	4b58      	ldr	r3, [pc, #352]	; (19e84 <_i2c_master_set_config+0x358>)
   19d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19d24:	4798      	blx	r3
   19d26:	0005      	movs	r5, r0
   19d28:	000e      	movs	r6, r1
   19d2a:	4b56      	ldr	r3, [pc, #344]	; (19e84 <_i2c_master_set_config+0x358>)
   19d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19d2e:	4798      	blx	r3
   19d30:	60b8      	str	r0, [r7, #8]
   19d32:	60f9      	str	r1, [r7, #12]
   19d34:	4b53      	ldr	r3, [pc, #332]	; (19e84 <_i2c_master_set_config+0x358>)
   19d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19d38:	4798      	blx	r3
   19d3a:	4c53      	ldr	r4, [pc, #332]	; (19e88 <_i2c_master_set_config+0x35c>)
   19d3c:	4a53      	ldr	r2, [pc, #332]	; (19e8c <_i2c_master_set_config+0x360>)
   19d3e:	4b54      	ldr	r3, [pc, #336]	; (19e90 <_i2c_master_set_config+0x364>)
   19d40:	47a0      	blx	r4
   19d42:	0003      	movs	r3, r0
   19d44:	000c      	movs	r4, r1
   19d46:	603b      	str	r3, [r7, #0]
   19d48:	607c      	str	r4, [r7, #4]
   19d4a:	4b4e      	ldr	r3, [pc, #312]	; (19e84 <_i2c_master_set_config+0x358>)
   19d4c:	6a38      	ldr	r0, [r7, #32]
   19d4e:	4798      	blx	r3
   19d50:	0002      	movs	r2, r0
   19d52:	000b      	movs	r3, r1
   19d54:	4c4c      	ldr	r4, [pc, #304]	; (19e88 <_i2c_master_set_config+0x35c>)
   19d56:	6838      	ldr	r0, [r7, #0]
   19d58:	6879      	ldr	r1, [r7, #4]
   19d5a:	47a0      	blx	r4
   19d5c:	0003      	movs	r3, r0
   19d5e:	000c      	movs	r4, r1
   19d60:	0018      	movs	r0, r3
   19d62:	0021      	movs	r1, r4
   19d64:	4c4b      	ldr	r4, [pc, #300]	; (19e94 <_i2c_master_set_config+0x368>)
   19d66:	2200      	movs	r2, #0
   19d68:	4b4b      	ldr	r3, [pc, #300]	; (19e98 <_i2c_master_set_config+0x36c>)
   19d6a:	47a0      	blx	r4
   19d6c:	0003      	movs	r3, r0
   19d6e:	000c      	movs	r4, r1
   19d70:	001a      	movs	r2, r3
   19d72:	0023      	movs	r3, r4
   19d74:	4c44      	ldr	r4, [pc, #272]	; (19e88 <_i2c_master_set_config+0x35c>)
   19d76:	68b8      	ldr	r0, [r7, #8]
   19d78:	68f9      	ldr	r1, [r7, #12]
   19d7a:	47a0      	blx	r4
   19d7c:	0003      	movs	r3, r0
   19d7e:	000c      	movs	r4, r1
   19d80:	001a      	movs	r2, r3
   19d82:	0023      	movs	r3, r4
   19d84:	4c45      	ldr	r4, [pc, #276]	; (19e9c <_i2c_master_set_config+0x370>)
   19d86:	0028      	movs	r0, r5
   19d88:	0031      	movs	r1, r6
   19d8a:	47a0      	blx	r4
   19d8c:	0003      	movs	r3, r0
   19d8e:	000c      	movs	r4, r1
   19d90:	001d      	movs	r5, r3
   19d92:	0026      	movs	r6, r4
   19d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d96:	005a      	lsls	r2, r3, #1
   19d98:	4b3a      	ldr	r3, [pc, #232]	; (19e84 <_i2c_master_set_config+0x358>)
   19d9a:	0010      	movs	r0, r2
   19d9c:	4798      	blx	r3
   19d9e:	0002      	movs	r2, r0
   19da0:	000b      	movs	r3, r1
   19da2:	4c3c      	ldr	r4, [pc, #240]	; (19e94 <_i2c_master_set_config+0x368>)
   19da4:	0028      	movs	r0, r5
   19da6:	0031      	movs	r1, r6
   19da8:	47a0      	blx	r4
   19daa:	0003      	movs	r3, r0
   19dac:	000c      	movs	r4, r1
   19dae:	0018      	movs	r0, r3
   19db0:	0021      	movs	r1, r4
   19db2:	4c3a      	ldr	r4, [pc, #232]	; (19e9c <_i2c_master_set_config+0x370>)
   19db4:	2200      	movs	r2, #0
   19db6:	4b3a      	ldr	r3, [pc, #232]	; (19ea0 <_i2c_master_set_config+0x374>)
   19db8:	47a0      	blx	r4
   19dba:	0003      	movs	r3, r0
   19dbc:	000c      	movs	r4, r1
   19dbe:	001d      	movs	r5, r3
   19dc0:	0026      	movs	r6, r4
   19dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19dc4:	005a      	lsls	r2, r3, #1
   19dc6:	4b2f      	ldr	r3, [pc, #188]	; (19e84 <_i2c_master_set_config+0x358>)
   19dc8:	0010      	movs	r0, r2
   19dca:	4798      	blx	r3
   19dcc:	0002      	movs	r2, r0
   19dce:	000b      	movs	r3, r1
   19dd0:	4c34      	ldr	r4, [pc, #208]	; (19ea4 <_i2c_master_set_config+0x378>)
   19dd2:	0028      	movs	r0, r5
   19dd4:	0031      	movs	r1, r6
   19dd6:	47a0      	blx	r4
   19dd8:	0003      	movs	r3, r0
   19dda:	000c      	movs	r4, r1
   19ddc:	0019      	movs	r1, r3
   19dde:	0022      	movs	r2, r4
   19de0:	4b31      	ldr	r3, [pc, #196]	; (19ea8 <_i2c_master_set_config+0x37c>)
   19de2:	0008      	movs	r0, r1
   19de4:	0011      	movs	r1, r2
   19de6:	4798      	blx	r3
   19de8:	0003      	movs	r3, r0
   19dea:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   19dec:	693b      	ldr	r3, [r7, #16]
   19dee:	689a      	ldr	r2, [r3, #8]
   19df0:	2380      	movs	r3, #128	; 0x80
   19df2:	049b      	lsls	r3, r3, #18
   19df4:	429a      	cmp	r2, r3
   19df6:	d16a      	bne.n	19ece <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   19df8:	4b22      	ldr	r3, [pc, #136]	; (19e84 <_i2c_master_set_config+0x358>)
   19dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19dfc:	4798      	blx	r3
   19dfe:	4c25      	ldr	r4, [pc, #148]	; (19e94 <_i2c_master_set_config+0x368>)
   19e00:	0002      	movs	r2, r0
   19e02:	000b      	movs	r3, r1
   19e04:	47a0      	blx	r4
   19e06:	0003      	movs	r3, r0
   19e08:	000c      	movs	r4, r1
   19e0a:	001d      	movs	r5, r3
   19e0c:	0026      	movs	r6, r4
   19e0e:	4b1d      	ldr	r3, [pc, #116]	; (19e84 <_i2c_master_set_config+0x358>)
   19e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19e12:	4798      	blx	r3
   19e14:	4c1c      	ldr	r4, [pc, #112]	; (19e88 <_i2c_master_set_config+0x35c>)
   19e16:	2200      	movs	r2, #0
   19e18:	4b24      	ldr	r3, [pc, #144]	; (19eac <_i2c_master_set_config+0x380>)
   19e1a:	47a0      	blx	r4
   19e1c:	0003      	movs	r3, r0
   19e1e:	000c      	movs	r4, r1
   19e20:	001a      	movs	r2, r3
   19e22:	0023      	movs	r3, r4
   19e24:	4c1f      	ldr	r4, [pc, #124]	; (19ea4 <_i2c_master_set_config+0x378>)
   19e26:	0028      	movs	r0, r5
   19e28:	0031      	movs	r1, r6
   19e2a:	47a0      	blx	r4
   19e2c:	0003      	movs	r3, r0
   19e2e:	000c      	movs	r4, r1
   19e30:	0018      	movs	r0, r3
   19e32:	0021      	movs	r1, r4
   19e34:	4c19      	ldr	r4, [pc, #100]	; (19e9c <_i2c_master_set_config+0x370>)
   19e36:	2200      	movs	r2, #0
   19e38:	4b19      	ldr	r3, [pc, #100]	; (19ea0 <_i2c_master_set_config+0x374>)
   19e3a:	47a0      	blx	r4
   19e3c:	0003      	movs	r3, r0
   19e3e:	000c      	movs	r4, r1
   19e40:	0019      	movs	r1, r3
   19e42:	0022      	movs	r2, r4
   19e44:	4b18      	ldr	r3, [pc, #96]	; (19ea8 <_i2c_master_set_config+0x37c>)
   19e46:	0008      	movs	r0, r1
   19e48:	0011      	movs	r1, r2
   19e4a:	4798      	blx	r3
   19e4c:	0003      	movs	r3, r0
   19e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   19e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19e52:	2b00      	cmp	r3, #0
   19e54:	d02e      	beq.n	19eb4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   19e56:	4b16      	ldr	r3, [pc, #88]	; (19eb0 <_i2c_master_set_config+0x384>)
   19e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19e5c:	4798      	blx	r3
   19e5e:	0003      	movs	r3, r0
   19e60:	1e9a      	subs	r2, r3, #2
   19e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19e64:	1ad3      	subs	r3, r2, r3
   19e66:	653b      	str	r3, [r7, #80]	; 0x50
   19e68:	e031      	b.n	19ece <_i2c_master_set_config+0x3a2>
   19e6a:	46c0      	nop			; (mov r8, r8)
   19e6c:	000299d5 	.word	0x000299d5
   19e70:	000199ed 	.word	0x000199ed
   19e74:	00029819 	.word	0x00029819
   19e78:	0002c621 	.word	0x0002c621
   19e7c:	00019a15 	.word	0x00019a15
   19e80:	0002c3e5 	.word	0x0002c3e5
   19e84:	0003763d 	.word	0x0003763d
   19e88:	00036aa9 	.word	0x00036aa9
   19e8c:	e826d695 	.word	0xe826d695
   19e90:	3e112e0b 	.word	0x3e112e0b
   19e94:	00035c21 	.word	0x00035c21
   19e98:	40240000 	.word	0x40240000
   19e9c:	00036fa9 	.word	0x00036fa9
   19ea0:	3ff00000 	.word	0x3ff00000
   19ea4:	00036241 	.word	0x00036241
   19ea8:	000375d5 	.word	0x000375d5
   19eac:	40080000 	.word	0x40080000
   19eb0:	00034e35 	.word	0x00034e35
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   19eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19eb6:	005a      	lsls	r2, r3, #1
   19eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19eba:	18d3      	adds	r3, r2, r3
   19ebc:	1e5a      	subs	r2, r3, #1
   19ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ec0:	0059      	lsls	r1, r3, #1
   19ec2:	4b1d      	ldr	r3, [pc, #116]	; (19f38 <_i2c_master_set_config+0x40c>)
   19ec4:	0010      	movs	r0, r2
   19ec6:	4798      	blx	r3
   19ec8:	0003      	movs	r3, r0
   19eca:	3b01      	subs	r3, #1
   19ecc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   19ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19ed0:	2bff      	cmp	r3, #255	; 0xff
   19ed2:	dc08      	bgt.n	19ee6 <_i2c_master_set_config+0x3ba>
   19ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19ed6:	2b00      	cmp	r3, #0
   19ed8:	db05      	blt.n	19ee6 <_i2c_master_set_config+0x3ba>
   19eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19edc:	2bff      	cmp	r3, #255	; 0xff
   19ede:	dc02      	bgt.n	19ee6 <_i2c_master_set_config+0x3ba>
   19ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19ee2:	2b00      	cmp	r3, #0
   19ee4:	da06      	bge.n	19ef4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   19ee6:	233b      	movs	r3, #59	; 0x3b
   19ee8:	2210      	movs	r2, #16
   19eea:	4694      	mov	ip, r2
   19eec:	44bc      	add	ip, r7
   19eee:	4463      	add	r3, ip
   19ef0:	2240      	movs	r2, #64	; 0x40
   19ef2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   19ef4:	233b      	movs	r3, #59	; 0x3b
   19ef6:	2210      	movs	r2, #16
   19ef8:	4694      	mov	ip, r2
   19efa:	44bc      	add	ip, r7
   19efc:	4463      	add	r3, ip
   19efe:	781b      	ldrb	r3, [r3, #0]
   19f00:	2b40      	cmp	r3, #64	; 0x40
   19f02:	d00e      	beq.n	19f22 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19f06:	22ff      	movs	r2, #255	; 0xff
   19f08:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19f0c:	041b      	lsls	r3, r3, #16
   19f0e:	0019      	movs	r1, r3
   19f10:	23ff      	movs	r3, #255	; 0xff
   19f12:	041b      	lsls	r3, r3, #16
   19f14:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19f16:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   19f1a:	0612      	lsls	r2, r2, #24
   19f1c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19f20:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   19f22:	233b      	movs	r3, #59	; 0x3b
   19f24:	2210      	movs	r2, #16
   19f26:	4694      	mov	ip, r2
   19f28:	44bc      	add	ip, r7
   19f2a:	4463      	add	r3, ip
   19f2c:	781b      	ldrb	r3, [r3, #0]
}
   19f2e:	0018      	movs	r0, r3
   19f30:	46bd      	mov	sp, r7
   19f32:	b017      	add	sp, #92	; 0x5c
   19f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f36:	46c0      	nop			; (mov r8, r8)
   19f38:	00034e35 	.word	0x00034e35

00019f3c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   19f3c:	b590      	push	{r4, r7, lr}
   19f3e:	b08b      	sub	sp, #44	; 0x2c
   19f40:	af00      	add	r7, sp, #0
   19f42:	60f8      	str	r0, [r7, #12]
   19f44:	60b9      	str	r1, [r7, #8]
   19f46:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   19f48:	68fb      	ldr	r3, [r7, #12]
   19f4a:	68ba      	ldr	r2, [r7, #8]
   19f4c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19f4e:	68fb      	ldr	r3, [r7, #12]
   19f50:	681b      	ldr	r3, [r3, #0]
   19f52:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   19f54:	68fb      	ldr	r3, [r7, #12]
   19f56:	681b      	ldr	r3, [r3, #0]
   19f58:	0018      	movs	r0, r3
   19f5a:	4b3b      	ldr	r3, [pc, #236]	; (1a048 <i2c_master_init+0x10c>)
   19f5c:	4798      	blx	r3
   19f5e:	0003      	movs	r3, r0
   19f60:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   19f62:	6a3b      	ldr	r3, [r7, #32]
   19f64:	3302      	adds	r3, #2
   19f66:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19f68:	6a3b      	ldr	r3, [r7, #32]
   19f6a:	3314      	adds	r3, #20
   19f6c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   19f6e:	2201      	movs	r2, #1
   19f70:	69fb      	ldr	r3, [r7, #28]
   19f72:	409a      	lsls	r2, r3
   19f74:	0013      	movs	r3, r2
   19f76:	0019      	movs	r1, r3
   19f78:	2002      	movs	r0, #2
   19f7a:	4b34      	ldr	r3, [pc, #208]	; (1a04c <i2c_master_init+0x110>)
   19f7c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   19f7e:	2314      	movs	r3, #20
   19f80:	18fb      	adds	r3, r7, r3
   19f82:	0018      	movs	r0, r3
   19f84:	4b32      	ldr	r3, [pc, #200]	; (1a050 <i2c_master_init+0x114>)
   19f86:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   19f88:	687b      	ldr	r3, [r7, #4]
   19f8a:	7b1a      	ldrb	r2, [r3, #12]
   19f8c:	2314      	movs	r3, #20
   19f8e:	18fb      	adds	r3, r7, r3
   19f90:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   19f92:	69bb      	ldr	r3, [r7, #24]
   19f94:	b2db      	uxtb	r3, r3
   19f96:	2214      	movs	r2, #20
   19f98:	18ba      	adds	r2, r7, r2
   19f9a:	0011      	movs	r1, r2
   19f9c:	0018      	movs	r0, r3
   19f9e:	4b2d      	ldr	r3, [pc, #180]	; (1a054 <i2c_master_init+0x118>)
   19fa0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   19fa2:	69bb      	ldr	r3, [r7, #24]
   19fa4:	b2db      	uxtb	r3, r3
   19fa6:	0018      	movs	r0, r3
   19fa8:	4b2b      	ldr	r3, [pc, #172]	; (1a058 <i2c_master_init+0x11c>)
   19faa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   19fac:	687b      	ldr	r3, [r7, #4]
   19fae:	7b1b      	ldrb	r3, [r3, #12]
   19fb0:	2100      	movs	r1, #0
   19fb2:	0018      	movs	r0, r3
   19fb4:	4b29      	ldr	r3, [pc, #164]	; (1a05c <i2c_master_init+0x120>)
   19fb6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   19fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19fba:	681b      	ldr	r3, [r3, #0]
   19fbc:	2202      	movs	r2, #2
   19fbe:	4013      	ands	r3, r2
   19fc0:	d001      	beq.n	19fc6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   19fc2:	231c      	movs	r3, #28
   19fc4:	e03b      	b.n	1a03e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   19fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19fc8:	681b      	ldr	r3, [r3, #0]
   19fca:	2201      	movs	r2, #1
   19fcc:	4013      	ands	r3, r2
   19fce:	d001      	beq.n	19fd4 <i2c_master_init+0x98>
		return STATUS_BUSY;
   19fd0:	2305      	movs	r3, #5
   19fd2:	e034      	b.n	1a03e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   19fd4:	68fb      	ldr	r3, [r7, #12]
   19fd6:	681b      	ldr	r3, [r3, #0]
   19fd8:	2217      	movs	r2, #23
   19fda:	18bc      	adds	r4, r7, r2
   19fdc:	0018      	movs	r0, r3
   19fde:	4b1a      	ldr	r3, [pc, #104]	; (1a048 <i2c_master_init+0x10c>)
   19fe0:	4798      	blx	r3
   19fe2:	0003      	movs	r3, r0
   19fe4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   19fe6:	4a1e      	ldr	r2, [pc, #120]	; (1a060 <i2c_master_init+0x124>)
   19fe8:	2317      	movs	r3, #23
   19fea:	18fb      	adds	r3, r7, r3
   19fec:	781b      	ldrb	r3, [r3, #0]
   19fee:	0011      	movs	r1, r2
   19ff0:	0018      	movs	r0, r3
   19ff2:	4b1c      	ldr	r3, [pc, #112]	; (1a064 <i2c_master_init+0x128>)
   19ff4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   19ff6:	2317      	movs	r3, #23
   19ff8:	18fb      	adds	r3, r7, r3
   19ffa:	781a      	ldrb	r2, [r3, #0]
   19ffc:	4b1a      	ldr	r3, [pc, #104]	; (1a068 <i2c_master_init+0x12c>)
   19ffe:	0092      	lsls	r2, r2, #2
   1a000:	68f9      	ldr	r1, [r7, #12]
   1a002:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   1a004:	68fb      	ldr	r3, [r7, #12]
   1a006:	2200      	movs	r2, #0
   1a008:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1a00a:	68fb      	ldr	r3, [r7, #12]
   1a00c:	2200      	movs	r2, #0
   1a00e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   1a010:	68fb      	ldr	r3, [r7, #12]
   1a012:	2200      	movs	r2, #0
   1a014:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1a016:	68fb      	ldr	r3, [r7, #12]
   1a018:	2200      	movs	r2, #0
   1a01a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   1a01c:	68fb      	ldr	r3, [r7, #12]
   1a01e:	2225      	movs	r2, #37	; 0x25
   1a020:	2100      	movs	r1, #0
   1a022:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1a024:	68fb      	ldr	r3, [r7, #12]
   1a026:	2200      	movs	r2, #0
   1a028:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a02c:	2214      	movs	r2, #20
   1a02e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1a030:	687a      	ldr	r2, [r7, #4]
   1a032:	68fb      	ldr	r3, [r7, #12]
   1a034:	0011      	movs	r1, r2
   1a036:	0018      	movs	r0, r3
   1a038:	4b0c      	ldr	r3, [pc, #48]	; (1a06c <i2c_master_init+0x130>)
   1a03a:	4798      	blx	r3
   1a03c:	0003      	movs	r3, r0
}
   1a03e:	0018      	movs	r0, r3
   1a040:	46bd      	mov	sp, r7
   1a042:	b00b      	add	sp, #44	; 0x2c
   1a044:	bd90      	pop	{r4, r7, pc}
   1a046:	46c0      	nop			; (mov r8, r8)
   1a048:	000299d5 	.word	0x000299d5
   1a04c:	00019991 	.word	0x00019991
   1a050:	00019979 	.word	0x00019979
   1a054:	0002c2c1 	.word	0x0002c2c1
   1a058:	0002c305 	.word	0x0002c305
   1a05c:	0002978d 	.word	0x0002978d
   1a060:	00012bcd 	.word	0x00012bcd
   1a064:	00029a39 	.word	0x00029a39
   1a068:	20005a84 	.word	0x20005a84
   1a06c:	00019b2d 	.word	0x00019b2d

0001a070 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1a070:	b580      	push	{r7, lr}
   1a072:	b084      	sub	sp, #16
   1a074:	af00      	add	r7, sp, #0
   1a076:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a078:	687b      	ldr	r3, [r7, #4]
   1a07a:	681b      	ldr	r3, [r3, #0]
   1a07c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1a07e:	687b      	ldr	r3, [r7, #4]
   1a080:	0018      	movs	r0, r3
   1a082:	4b0f      	ldr	r3, [pc, #60]	; (1a0c0 <i2c_master_reset+0x50>)
   1a084:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1a086:	687b      	ldr	r3, [r7, #4]
   1a088:	0018      	movs	r0, r3
   1a08a:	4b0e      	ldr	r3, [pc, #56]	; (1a0c4 <i2c_master_reset+0x54>)
   1a08c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1a08e:	4b0e      	ldr	r3, [pc, #56]	; (1a0c8 <i2c_master_reset+0x58>)
   1a090:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1a092:	687b      	ldr	r3, [r7, #4]
   1a094:	681b      	ldr	r3, [r3, #0]
   1a096:	0018      	movs	r0, r3
   1a098:	4b0c      	ldr	r3, [pc, #48]	; (1a0cc <i2c_master_reset+0x5c>)
   1a09a:	4798      	blx	r3
   1a09c:	0003      	movs	r3, r0
   1a09e:	0018      	movs	r0, r3
   1a0a0:	4b0b      	ldr	r3, [pc, #44]	; (1a0d0 <i2c_master_reset+0x60>)
   1a0a2:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   1a0a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0d4 <i2c_master_reset+0x64>)
   1a0a6:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1a0a8:	687b      	ldr	r3, [r7, #4]
   1a0aa:	0018      	movs	r0, r3
   1a0ac:	4b04      	ldr	r3, [pc, #16]	; (1a0c0 <i2c_master_reset+0x50>)
   1a0ae:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   1a0b0:	68fb      	ldr	r3, [r7, #12]
   1a0b2:	2201      	movs	r2, #1
   1a0b4:	601a      	str	r2, [r3, #0]
}
   1a0b6:	46c0      	nop			; (mov r8, r8)
   1a0b8:	46bd      	mov	sp, r7
   1a0ba:	b004      	add	sp, #16
   1a0bc:	bd80      	pop	{r7, pc}
   1a0be:	46c0      	nop			; (mov r8, r8)
   1a0c0:	00019ab1 	.word	0x00019ab1
   1a0c4:	00019ad5 	.word	0x00019ad5
   1a0c8:	00019a35 	.word	0x00019a35
   1a0cc:	00029aa5 	.word	0x00029aa5
   1a0d0:	0002c43d 	.word	0x0002c43d
   1a0d4:	00019a49 	.word	0x00019a49

0001a0d8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1a0d8:	b580      	push	{r7, lr}
   1a0da:	b084      	sub	sp, #16
   1a0dc:	af00      	add	r7, sp, #0
   1a0de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a0e0:	687b      	ldr	r3, [r7, #4]
   1a0e2:	681b      	ldr	r3, [r3, #0]
   1a0e4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1a0e6:	68fb      	ldr	r3, [r7, #12]
   1a0e8:	7e1b      	ldrb	r3, [r3, #24]
   1a0ea:	b2db      	uxtb	r3, r3
   1a0ec:	001a      	movs	r2, r3
   1a0ee:	2302      	movs	r3, #2
   1a0f0:	4013      	ands	r3, r2
   1a0f2:	d00b      	beq.n	1a10c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1a0f4:	68fb      	ldr	r3, [r7, #12]
   1a0f6:	2202      	movs	r2, #2
   1a0f8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1a0fa:	68fb      	ldr	r3, [r7, #12]
   1a0fc:	8b5b      	ldrh	r3, [r3, #26]
   1a0fe:	b29b      	uxth	r3, r3
   1a100:	001a      	movs	r2, r3
   1a102:	2302      	movs	r3, #2
   1a104:	4013      	ands	r3, r2
   1a106:	d011      	beq.n	1a12c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1a108:	2341      	movs	r3, #65	; 0x41
   1a10a:	e010      	b.n	1a12e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1a10c:	68fb      	ldr	r3, [r7, #12]
   1a10e:	8b5b      	ldrh	r3, [r3, #26]
   1a110:	b29b      	uxth	r3, r3
   1a112:	001a      	movs	r2, r3
   1a114:	2304      	movs	r3, #4
   1a116:	4013      	ands	r3, r2
   1a118:	d008      	beq.n	1a12c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1a11a:	68fb      	ldr	r3, [r7, #12]
   1a11c:	685b      	ldr	r3, [r3, #4]
   1a11e:	22c0      	movs	r2, #192	; 0xc0
   1a120:	0292      	lsls	r2, r2, #10
   1a122:	431a      	orrs	r2, r3
   1a124:	68fb      	ldr	r3, [r7, #12]
   1a126:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1a128:	2318      	movs	r3, #24
   1a12a:	e000      	b.n	1a12e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   1a12c:	2300      	movs	r3, #0
}
   1a12e:	0018      	movs	r0, r3
   1a130:	46bd      	mov	sp, r7
   1a132:	b004      	add	sp, #16
   1a134:	bd80      	pop	{r7, pc}

0001a136 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1a136:	b580      	push	{r7, lr}
   1a138:	b084      	sub	sp, #16
   1a13a:	af00      	add	r7, sp, #0
   1a13c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a13e:	687b      	ldr	r3, [r7, #4]
   1a140:	681b      	ldr	r3, [r3, #0]
   1a142:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1a144:	230e      	movs	r3, #14
   1a146:	18fb      	adds	r3, r7, r3
   1a148:	2200      	movs	r2, #0
   1a14a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a14c:	e00f      	b.n	1a16e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1a14e:	230e      	movs	r3, #14
   1a150:	18fb      	adds	r3, r7, r3
   1a152:	220e      	movs	r2, #14
   1a154:	18ba      	adds	r2, r7, r2
   1a156:	8812      	ldrh	r2, [r2, #0]
   1a158:	3201      	adds	r2, #1
   1a15a:	801a      	strh	r2, [r3, #0]
   1a15c:	687b      	ldr	r3, [r7, #4]
   1a15e:	891b      	ldrh	r3, [r3, #8]
   1a160:	220e      	movs	r2, #14
   1a162:	18ba      	adds	r2, r7, r2
   1a164:	8812      	ldrh	r2, [r2, #0]
   1a166:	429a      	cmp	r2, r3
   1a168:	d301      	bcc.n	1a16e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1a16a:	2312      	movs	r3, #18
   1a16c:	e00e      	b.n	1a18c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a16e:	68bb      	ldr	r3, [r7, #8]
   1a170:	7e1b      	ldrb	r3, [r3, #24]
   1a172:	b2db      	uxtb	r3, r3
   1a174:	001a      	movs	r2, r3
   1a176:	2301      	movs	r3, #1
   1a178:	4013      	ands	r3, r2
   1a17a:	d106      	bne.n	1a18a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1a17c:	68bb      	ldr	r3, [r7, #8]
   1a17e:	7e1b      	ldrb	r3, [r3, #24]
   1a180:	b2db      	uxtb	r3, r3
   1a182:	001a      	movs	r2, r3
   1a184:	2302      	movs	r3, #2
   1a186:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a188:	d0e1      	beq.n	1a14e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1a18a:	2300      	movs	r3, #0
}
   1a18c:	0018      	movs	r0, r3
   1a18e:	46bd      	mov	sp, r7
   1a190:	b004      	add	sp, #16
   1a192:	bd80      	pop	{r7, pc}

0001a194 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   1a194:	b590      	push	{r4, r7, lr}
   1a196:	b085      	sub	sp, #20
   1a198:	af00      	add	r7, sp, #0
   1a19a:	6078      	str	r0, [r7, #4]
   1a19c:	000a      	movs	r2, r1
   1a19e:	1cfb      	adds	r3, r7, #3
   1a1a0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a1a2:	687b      	ldr	r3, [r7, #4]
   1a1a4:	681b      	ldr	r3, [r3, #0]
   1a1a6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1a1a8:	68fb      	ldr	r3, [r7, #12]
   1a1aa:	685b      	ldr	r3, [r3, #4]
   1a1ac:	2280      	movs	r2, #128	; 0x80
   1a1ae:	02d2      	lsls	r2, r2, #11
   1a1b0:	431a      	orrs	r2, r3
   1a1b2:	68fb      	ldr	r3, [r7, #12]
   1a1b4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1a1b6:	1cfb      	adds	r3, r7, #3
   1a1b8:	781a      	ldrb	r2, [r3, #0]
   1a1ba:	68fb      	ldr	r3, [r7, #12]
   1a1bc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1a1be:	230b      	movs	r3, #11
   1a1c0:	18fc      	adds	r4, r7, r3
   1a1c2:	687b      	ldr	r3, [r7, #4]
   1a1c4:	0018      	movs	r0, r3
   1a1c6:	4b07      	ldr	r3, [pc, #28]	; (1a1e4 <_i2c_master_send_hs_master_code+0x50>)
   1a1c8:	4798      	blx	r3
   1a1ca:	0003      	movs	r3, r0
   1a1cc:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1a1ce:	68fb      	ldr	r3, [r7, #12]
   1a1d0:	2201      	movs	r2, #1
   1a1d2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   1a1d4:	230b      	movs	r3, #11
   1a1d6:	18fb      	adds	r3, r7, r3
   1a1d8:	781b      	ldrb	r3, [r3, #0]
}
   1a1da:	0018      	movs	r0, r3
   1a1dc:	46bd      	mov	sp, r7
   1a1de:	b005      	add	sp, #20
   1a1e0:	bd90      	pop	{r4, r7, pc}
   1a1e2:	46c0      	nop			; (mov r8, r8)
   1a1e4:	0001a137 	.word	0x0001a137

0001a1e8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1a1e8:	b580      	push	{r7, lr}
   1a1ea:	af00      	add	r7, sp, #0
   1a1ec:	2000      	movs	r0, #0
   1a1ee:	4b02      	ldr	r3, [pc, #8]	; (1a1f8 <TC3_Handler+0x10>)
   1a1f0:	4798      	blx	r3
   1a1f2:	46c0      	nop			; (mov r8, r8)
   1a1f4:	46bd      	mov	sp, r7
   1a1f6:	bd80      	pop	{r7, pc}
   1a1f8:	0001a225 	.word	0x0001a225

0001a1fc <TC4_Handler>:
   1a1fc:	b580      	push	{r7, lr}
   1a1fe:	af00      	add	r7, sp, #0
   1a200:	2001      	movs	r0, #1
   1a202:	4b02      	ldr	r3, [pc, #8]	; (1a20c <TC4_Handler+0x10>)
   1a204:	4798      	blx	r3
   1a206:	46c0      	nop			; (mov r8, r8)
   1a208:	46bd      	mov	sp, r7
   1a20a:	bd80      	pop	{r7, pc}
   1a20c:	0001a225 	.word	0x0001a225

0001a210 <TC5_Handler>:
   1a210:	b580      	push	{r7, lr}
   1a212:	af00      	add	r7, sp, #0
   1a214:	2002      	movs	r0, #2
   1a216:	4b02      	ldr	r3, [pc, #8]	; (1a220 <TC5_Handler+0x10>)
   1a218:	4798      	blx	r3
   1a21a:	46c0      	nop			; (mov r8, r8)
   1a21c:	46bd      	mov	sp, r7
   1a21e:	bd80      	pop	{r7, pc}
   1a220:	0001a225 	.word	0x0001a225

0001a224 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1a224:	b580      	push	{r7, lr}
   1a226:	b084      	sub	sp, #16
   1a228:	af00      	add	r7, sp, #0
   1a22a:	0002      	movs	r2, r0
   1a22c:	1dfb      	adds	r3, r7, #7
   1a22e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   1a230:	1dfb      	adds	r3, r7, #7
   1a232:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   1a234:	4b28      	ldr	r3, [pc, #160]	; (1a2d8 <_tc_interrupt_handler+0xb4>)
   1a236:	0092      	lsls	r2, r2, #2
   1a238:	58d3      	ldr	r3, [r2, r3]
   1a23a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a23c:	68fb      	ldr	r3, [r7, #12]
   1a23e:	681b      	ldr	r3, [r3, #0]
   1a240:	7b9b      	ldrb	r3, [r3, #14]
   1a242:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1a244:	68fa      	ldr	r2, [r7, #12]
   1a246:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a248:	4013      	ands	r3, r2
   1a24a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1a24c:	68fb      	ldr	r3, [r7, #12]
   1a24e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a250:	230b      	movs	r3, #11
   1a252:	18fb      	adds	r3, r7, r3
   1a254:	400a      	ands	r2, r1
   1a256:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1a258:	230b      	movs	r3, #11
   1a25a:	18fb      	adds	r3, r7, r3
   1a25c:	781b      	ldrb	r3, [r3, #0]
   1a25e:	2201      	movs	r2, #1
   1a260:	4013      	ands	r3, r2
   1a262:	d008      	beq.n	1a276 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1a264:	68fb      	ldr	r3, [r7, #12]
   1a266:	689b      	ldr	r3, [r3, #8]
   1a268:	68fa      	ldr	r2, [r7, #12]
   1a26a:	0010      	movs	r0, r2
   1a26c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1a26e:	68fb      	ldr	r3, [r7, #12]
   1a270:	681b      	ldr	r3, [r3, #0]
   1a272:	2201      	movs	r2, #1
   1a274:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1a276:	230b      	movs	r3, #11
   1a278:	18fb      	adds	r3, r7, r3
   1a27a:	781b      	ldrb	r3, [r3, #0]
   1a27c:	2202      	movs	r2, #2
   1a27e:	4013      	ands	r3, r2
   1a280:	d008      	beq.n	1a294 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1a282:	68fb      	ldr	r3, [r7, #12]
   1a284:	68db      	ldr	r3, [r3, #12]
   1a286:	68fa      	ldr	r2, [r7, #12]
   1a288:	0010      	movs	r0, r2
   1a28a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1a28c:	68fb      	ldr	r3, [r7, #12]
   1a28e:	681b      	ldr	r3, [r3, #0]
   1a290:	2202      	movs	r2, #2
   1a292:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1a294:	230b      	movs	r3, #11
   1a296:	18fb      	adds	r3, r7, r3
   1a298:	781b      	ldrb	r3, [r3, #0]
   1a29a:	2210      	movs	r2, #16
   1a29c:	4013      	ands	r3, r2
   1a29e:	d008      	beq.n	1a2b2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1a2a0:	68fb      	ldr	r3, [r7, #12]
   1a2a2:	691b      	ldr	r3, [r3, #16]
   1a2a4:	68fa      	ldr	r2, [r7, #12]
   1a2a6:	0010      	movs	r0, r2
   1a2a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1a2aa:	68fb      	ldr	r3, [r7, #12]
   1a2ac:	681b      	ldr	r3, [r3, #0]
   1a2ae:	2210      	movs	r2, #16
   1a2b0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1a2b2:	230b      	movs	r3, #11
   1a2b4:	18fb      	adds	r3, r7, r3
   1a2b6:	781b      	ldrb	r3, [r3, #0]
   1a2b8:	2220      	movs	r2, #32
   1a2ba:	4013      	ands	r3, r2
   1a2bc:	d008      	beq.n	1a2d0 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1a2be:	68fb      	ldr	r3, [r7, #12]
   1a2c0:	695b      	ldr	r3, [r3, #20]
   1a2c2:	68fa      	ldr	r2, [r7, #12]
   1a2c4:	0010      	movs	r0, r2
   1a2c6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1a2c8:	68fb      	ldr	r3, [r7, #12]
   1a2ca:	681b      	ldr	r3, [r3, #0]
   1a2cc:	2220      	movs	r2, #32
   1a2ce:	739a      	strb	r2, [r3, #14]
	}
}
   1a2d0:	46c0      	nop			; (mov r8, r8)
   1a2d2:	46bd      	mov	sp, r7
   1a2d4:	b004      	add	sp, #16
   1a2d6:	bd80      	pop	{r7, pc}
   1a2d8:	2000489c 	.word	0x2000489c

0001a2dc <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1a2dc:	b580      	push	{r7, lr}
   1a2de:	b084      	sub	sp, #16
   1a2e0:	af00      	add	r7, sp, #0
   1a2e2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   1a2e4:	2300      	movs	r3, #0
   1a2e6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1a2e8:	687b      	ldr	r3, [r7, #4]
   1a2ea:	2b00      	cmp	r3, #0
   1a2ec:	d101      	bne.n	1a2f2 <FreeRTOS_CLIRegisterCommand+0x16>
   1a2ee:	b672      	cpsid	i
   1a2f0:	e7fe      	b.n	1a2f0 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1a2f2:	2008      	movs	r0, #8
   1a2f4:	4b11      	ldr	r3, [pc, #68]	; (1a33c <FreeRTOS_CLIRegisterCommand+0x60>)
   1a2f6:	4798      	blx	r3
   1a2f8:	0003      	movs	r3, r0
   1a2fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1a2fc:	68bb      	ldr	r3, [r7, #8]
   1a2fe:	2b00      	cmp	r3, #0
   1a300:	d101      	bne.n	1a306 <FreeRTOS_CLIRegisterCommand+0x2a>
   1a302:	b672      	cpsid	i
   1a304:	e7fe      	b.n	1a304 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1a306:	68bb      	ldr	r3, [r7, #8]
   1a308:	2b00      	cmp	r3, #0
   1a30a:	d012      	beq.n	1a332 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1a30c:	4b0c      	ldr	r3, [pc, #48]	; (1a340 <FreeRTOS_CLIRegisterCommand+0x64>)
   1a30e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1a310:	68bb      	ldr	r3, [r7, #8]
   1a312:	687a      	ldr	r2, [r7, #4]
   1a314:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1a316:	68bb      	ldr	r3, [r7, #8]
   1a318:	2200      	movs	r2, #0
   1a31a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1a31c:	4b09      	ldr	r3, [pc, #36]	; (1a344 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a31e:	681b      	ldr	r3, [r3, #0]
   1a320:	68ba      	ldr	r2, [r7, #8]
   1a322:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1a324:	4b07      	ldr	r3, [pc, #28]	; (1a344 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a326:	68ba      	ldr	r2, [r7, #8]
   1a328:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1a32a:	4b07      	ldr	r3, [pc, #28]	; (1a348 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1a32c:	4798      	blx	r3

		xReturn = pdPASS;
   1a32e:	2301      	movs	r3, #1
   1a330:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1a332:	68fb      	ldr	r3, [r7, #12]
}
   1a334:	0018      	movs	r0, r3
   1a336:	46bd      	mov	sp, r7
   1a338:	b004      	add	sp, #16
   1a33a:	bd80      	pop	{r7, pc}
   1a33c:	0001c6f1 	.word	0x0001c6f1
   1a340:	0001c5b9 	.word	0x0001c5b9
   1a344:	20000108 	.word	0x20000108
   1a348:	0001c5dd 	.word	0x0001c5dd

0001a34c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1a34c:	b580      	push	{r7, lr}
   1a34e:	b088      	sub	sp, #32
   1a350:	af00      	add	r7, sp, #0
   1a352:	60f8      	str	r0, [r7, #12]
   1a354:	60b9      	str	r1, [r7, #8]
   1a356:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   1a358:	2301      	movs	r3, #1
   1a35a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1a35c:	4b3d      	ldr	r3, [pc, #244]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a35e:	681b      	ldr	r3, [r3, #0]
   1a360:	2b00      	cmp	r3, #0
   1a362:	d144      	bne.n	1a3ee <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a364:	4b3b      	ldr	r3, [pc, #236]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a366:	4a3c      	ldr	r2, [pc, #240]	; (1a458 <FreeRTOS_CLIProcessCommand+0x10c>)
   1a368:	601a      	str	r2, [r3, #0]
   1a36a:	e03a      	b.n	1a3e2 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1a36c:	4b39      	ldr	r3, [pc, #228]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a36e:	681b      	ldr	r3, [r3, #0]
   1a370:	681b      	ldr	r3, [r3, #0]
   1a372:	681b      	ldr	r3, [r3, #0]
   1a374:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1a376:	69bb      	ldr	r3, [r7, #24]
   1a378:	0018      	movs	r0, r3
   1a37a:	4b38      	ldr	r3, [pc, #224]	; (1a45c <FreeRTOS_CLIProcessCommand+0x110>)
   1a37c:	4798      	blx	r3
   1a37e:	0003      	movs	r3, r0
   1a380:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1a382:	68fa      	ldr	r2, [r7, #12]
   1a384:	697b      	ldr	r3, [r7, #20]
   1a386:	18d3      	adds	r3, r2, r3
   1a388:	781b      	ldrb	r3, [r3, #0]
   1a38a:	2b20      	cmp	r3, #32
   1a38c:	d005      	beq.n	1a39a <FreeRTOS_CLIProcessCommand+0x4e>
   1a38e:	68fa      	ldr	r2, [r7, #12]
   1a390:	697b      	ldr	r3, [r7, #20]
   1a392:	18d3      	adds	r3, r2, r3
   1a394:	781b      	ldrb	r3, [r3, #0]
   1a396:	2b00      	cmp	r3, #0
   1a398:	d11e      	bne.n	1a3d8 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1a39a:	697a      	ldr	r2, [r7, #20]
   1a39c:	69b9      	ldr	r1, [r7, #24]
   1a39e:	68fb      	ldr	r3, [r7, #12]
   1a3a0:	0018      	movs	r0, r3
   1a3a2:	4b2f      	ldr	r3, [pc, #188]	; (1a460 <FreeRTOS_CLIProcessCommand+0x114>)
   1a3a4:	4798      	blx	r3
   1a3a6:	1e03      	subs	r3, r0, #0
   1a3a8:	d116      	bne.n	1a3d8 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1a3aa:	4b2a      	ldr	r3, [pc, #168]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3ac:	681b      	ldr	r3, [r3, #0]
   1a3ae:	681b      	ldr	r3, [r3, #0]
   1a3b0:	7b1b      	ldrb	r3, [r3, #12]
   1a3b2:	b25b      	sxtb	r3, r3
   1a3b4:	2b00      	cmp	r3, #0
   1a3b6:	db19      	blt.n	1a3ec <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1a3b8:	68fb      	ldr	r3, [r7, #12]
   1a3ba:	0018      	movs	r0, r3
   1a3bc:	4b29      	ldr	r3, [pc, #164]	; (1a464 <FreeRTOS_CLIProcessCommand+0x118>)
   1a3be:	4798      	blx	r3
   1a3c0:	0003      	movs	r3, r0
   1a3c2:	001a      	movs	r2, r3
   1a3c4:	4b23      	ldr	r3, [pc, #140]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3c6:	681b      	ldr	r3, [r3, #0]
   1a3c8:	681b      	ldr	r3, [r3, #0]
   1a3ca:	7b1b      	ldrb	r3, [r3, #12]
   1a3cc:	b25b      	sxtb	r3, r3
   1a3ce:	429a      	cmp	r2, r3
   1a3d0:	d00c      	beq.n	1a3ec <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1a3d2:	2300      	movs	r3, #0
   1a3d4:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1a3d6:	e009      	b.n	1a3ec <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a3d8:	4b1e      	ldr	r3, [pc, #120]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3da:	681b      	ldr	r3, [r3, #0]
   1a3dc:	685a      	ldr	r2, [r3, #4]
   1a3de:	4b1d      	ldr	r3, [pc, #116]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3e0:	601a      	str	r2, [r3, #0]
   1a3e2:	4b1c      	ldr	r3, [pc, #112]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3e4:	681b      	ldr	r3, [r3, #0]
   1a3e6:	2b00      	cmp	r3, #0
   1a3e8:	d1c0      	bne.n	1a36c <FreeRTOS_CLIProcessCommand+0x20>
   1a3ea:	e000      	b.n	1a3ee <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1a3ec:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1a3ee:	4b19      	ldr	r3, [pc, #100]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3f0:	681b      	ldr	r3, [r3, #0]
   1a3f2:	2b00      	cmp	r3, #0
   1a3f4:	d00c      	beq.n	1a410 <FreeRTOS_CLIProcessCommand+0xc4>
   1a3f6:	69fb      	ldr	r3, [r7, #28]
   1a3f8:	2b00      	cmp	r3, #0
   1a3fa:	d109      	bne.n	1a410 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a3fc:	687a      	ldr	r2, [r7, #4]
   1a3fe:	491a      	ldr	r1, [pc, #104]	; (1a468 <FreeRTOS_CLIProcessCommand+0x11c>)
   1a400:	68bb      	ldr	r3, [r7, #8]
   1a402:	0018      	movs	r0, r3
   1a404:	4b19      	ldr	r3, [pc, #100]	; (1a46c <FreeRTOS_CLIProcessCommand+0x120>)
   1a406:	4798      	blx	r3
		pxCommand = NULL;
   1a408:	4b12      	ldr	r3, [pc, #72]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a40a:	2200      	movs	r2, #0
   1a40c:	601a      	str	r2, [r3, #0]
   1a40e:	e01c      	b.n	1a44a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   1a410:	4b10      	ldr	r3, [pc, #64]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a412:	681b      	ldr	r3, [r3, #0]
   1a414:	2b00      	cmp	r3, #0
   1a416:	d010      	beq.n	1a43a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1a418:	4b0e      	ldr	r3, [pc, #56]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a41a:	681b      	ldr	r3, [r3, #0]
   1a41c:	681b      	ldr	r3, [r3, #0]
   1a41e:	689b      	ldr	r3, [r3, #8]
   1a420:	68fa      	ldr	r2, [r7, #12]
   1a422:	6879      	ldr	r1, [r7, #4]
   1a424:	68b8      	ldr	r0, [r7, #8]
   1a426:	4798      	blx	r3
   1a428:	0003      	movs	r3, r0
   1a42a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1a42c:	69fb      	ldr	r3, [r7, #28]
   1a42e:	2b00      	cmp	r3, #0
   1a430:	d10b      	bne.n	1a44a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1a432:	4b08      	ldr	r3, [pc, #32]	; (1a454 <FreeRTOS_CLIProcessCommand+0x108>)
   1a434:	2200      	movs	r2, #0
   1a436:	601a      	str	r2, [r3, #0]
   1a438:	e007      	b.n	1a44a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a43a:	687a      	ldr	r2, [r7, #4]
   1a43c:	490c      	ldr	r1, [pc, #48]	; (1a470 <FreeRTOS_CLIProcessCommand+0x124>)
   1a43e:	68bb      	ldr	r3, [r7, #8]
   1a440:	0018      	movs	r0, r3
   1a442:	4b0a      	ldr	r3, [pc, #40]	; (1a46c <FreeRTOS_CLIProcessCommand+0x120>)
   1a444:	4798      	blx	r3
		xReturn = pdFALSE;
   1a446:	2300      	movs	r3, #0
   1a448:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1a44a:	69fb      	ldr	r3, [r7, #28]
}
   1a44c:	0018      	movs	r0, r3
   1a44e:	46bd      	mov	sp, r7
   1a450:	b008      	add	sp, #32
   1a452:	bd80      	pop	{r7, pc}
   1a454:	20000b78 	.word	0x20000b78
   1a458:	20000100 	.word	0x20000100
   1a45c:	00037d23 	.word	0x00037d23
   1a460:	00037d31 	.word	0x00037d31
   1a464:	0001a4d5 	.word	0x0001a4d5
   1a468:	0003a07c 	.word	0x0003a07c
   1a46c:	00037d53 	.word	0x00037d53
   1a470:	0003a0d4 	.word	0x0003a0d4

0001a474 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1a474:	b580      	push	{r7, lr}
   1a476:	b086      	sub	sp, #24
   1a478:	af00      	add	r7, sp, #0
   1a47a:	60f8      	str	r0, [r7, #12]
   1a47c:	60b9      	str	r1, [r7, #8]
   1a47e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1a480:	4b11      	ldr	r3, [pc, #68]	; (1a4c8 <prvHelpCommand+0x54>)
   1a482:	681b      	ldr	r3, [r3, #0]
   1a484:	2b00      	cmp	r3, #0
   1a486:	d102      	bne.n	1a48e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1a488:	4b0f      	ldr	r3, [pc, #60]	; (1a4c8 <prvHelpCommand+0x54>)
   1a48a:	4a10      	ldr	r2, [pc, #64]	; (1a4cc <prvHelpCommand+0x58>)
   1a48c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1a48e:	4b0e      	ldr	r3, [pc, #56]	; (1a4c8 <prvHelpCommand+0x54>)
   1a490:	681b      	ldr	r3, [r3, #0]
   1a492:	681b      	ldr	r3, [r3, #0]
   1a494:	6859      	ldr	r1, [r3, #4]
   1a496:	68ba      	ldr	r2, [r7, #8]
   1a498:	68fb      	ldr	r3, [r7, #12]
   1a49a:	0018      	movs	r0, r3
   1a49c:	4b0c      	ldr	r3, [pc, #48]	; (1a4d0 <prvHelpCommand+0x5c>)
   1a49e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1a4a0:	4b09      	ldr	r3, [pc, #36]	; (1a4c8 <prvHelpCommand+0x54>)
   1a4a2:	681b      	ldr	r3, [r3, #0]
   1a4a4:	685a      	ldr	r2, [r3, #4]
   1a4a6:	4b08      	ldr	r3, [pc, #32]	; (1a4c8 <prvHelpCommand+0x54>)
   1a4a8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1a4aa:	4b07      	ldr	r3, [pc, #28]	; (1a4c8 <prvHelpCommand+0x54>)
   1a4ac:	681b      	ldr	r3, [r3, #0]
   1a4ae:	2b00      	cmp	r3, #0
   1a4b0:	d102      	bne.n	1a4b8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1a4b2:	2300      	movs	r3, #0
   1a4b4:	617b      	str	r3, [r7, #20]
   1a4b6:	e001      	b.n	1a4bc <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1a4b8:	2301      	movs	r3, #1
   1a4ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1a4bc:	697b      	ldr	r3, [r7, #20]
}
   1a4be:	0018      	movs	r0, r3
   1a4c0:	46bd      	mov	sp, r7
   1a4c2:	b006      	add	sp, #24
   1a4c4:	bd80      	pop	{r7, pc}
   1a4c6:	46c0      	nop			; (mov r8, r8)
   1a4c8:	20000b7c 	.word	0x20000b7c
   1a4cc:	20000100 	.word	0x20000100
   1a4d0:	00037d53 	.word	0x00037d53

0001a4d4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   1a4d4:	b580      	push	{r7, lr}
   1a4d6:	b084      	sub	sp, #16
   1a4d8:	af00      	add	r7, sp, #0
   1a4da:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1a4dc:	230f      	movs	r3, #15
   1a4de:	18fb      	adds	r3, r7, r3
   1a4e0:	2200      	movs	r2, #0
   1a4e2:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   1a4e4:	2300      	movs	r3, #0
   1a4e6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1a4e8:	e018      	b.n	1a51c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1a4ea:	687b      	ldr	r3, [r7, #4]
   1a4ec:	781b      	ldrb	r3, [r3, #0]
   1a4ee:	2b20      	cmp	r3, #32
   1a4f0:	d10f      	bne.n	1a512 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1a4f2:	68bb      	ldr	r3, [r7, #8]
   1a4f4:	2b01      	cmp	r3, #1
   1a4f6:	d00e      	beq.n	1a516 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1a4f8:	230f      	movs	r3, #15
   1a4fa:	18fb      	adds	r3, r7, r3
   1a4fc:	781b      	ldrb	r3, [r3, #0]
   1a4fe:	b25b      	sxtb	r3, r3
   1a500:	b2db      	uxtb	r3, r3
   1a502:	3301      	adds	r3, #1
   1a504:	b2da      	uxtb	r2, r3
   1a506:	230f      	movs	r3, #15
   1a508:	18fb      	adds	r3, r7, r3
   1a50a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1a50c:	2301      	movs	r3, #1
   1a50e:	60bb      	str	r3, [r7, #8]
   1a510:	e001      	b.n	1a516 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1a512:	2300      	movs	r3, #0
   1a514:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1a516:	687b      	ldr	r3, [r7, #4]
   1a518:	3301      	adds	r3, #1
   1a51a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1a51c:	687b      	ldr	r3, [r7, #4]
   1a51e:	781b      	ldrb	r3, [r3, #0]
   1a520:	2b00      	cmp	r3, #0
   1a522:	d1e2      	bne.n	1a4ea <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1a524:	68bb      	ldr	r3, [r7, #8]
   1a526:	2b01      	cmp	r3, #1
   1a528:	d109      	bne.n	1a53e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1a52a:	230f      	movs	r3, #15
   1a52c:	18fb      	adds	r3, r7, r3
   1a52e:	781b      	ldrb	r3, [r3, #0]
   1a530:	b25b      	sxtb	r3, r3
   1a532:	b2db      	uxtb	r3, r3
   1a534:	3b01      	subs	r3, #1
   1a536:	b2da      	uxtb	r2, r3
   1a538:	230f      	movs	r3, #15
   1a53a:	18fb      	adds	r3, r7, r3
   1a53c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1a53e:	230f      	movs	r3, #15
   1a540:	18fb      	adds	r3, r7, r3
   1a542:	781b      	ldrb	r3, [r3, #0]
   1a544:	b25b      	sxtb	r3, r3
}
   1a546:	0018      	movs	r0, r3
   1a548:	46bd      	mov	sp, r7
   1a54a:	b004      	add	sp, #16
   1a54c:	bd80      	pop	{r7, pc}
	...

0001a550 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   1a550:	b580      	push	{r7, lr}
   1a552:	b082      	sub	sp, #8
   1a554:	af00      	add	r7, sp, #0
   1a556:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1a558:	687b      	ldr	r3, [r7, #4]
   1a55a:	0018      	movs	r0, r3
   1a55c:	4b03      	ldr	r3, [pc, #12]	; (1a56c <prvTraceGetQueueNumber+0x1c>)
   1a55e:	4798      	blx	r3
   1a560:	0003      	movs	r3, r0
}
   1a562:	0018      	movs	r0, r3
   1a564:	46bd      	mov	sp, r7
   1a566:	b002      	add	sp, #8
   1a568:	bd80      	pop	{r7, pc}
   1a56a:	46c0      	nop			; (mov r8, r8)
   1a56c:	0001dd15 	.word	0x0001dd15

0001a570 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1a570:	b580      	push	{r7, lr}
   1a572:	b082      	sub	sp, #8
   1a574:	af00      	add	r7, sp, #0
   1a576:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1a578:	687b      	ldr	r3, [r7, #4]
   1a57a:	0018      	movs	r0, r3
   1a57c:	4b03      	ldr	r3, [pc, #12]	; (1a58c <prvTraceGetQueueType+0x1c>)
   1a57e:	4798      	blx	r3
   1a580:	0003      	movs	r3, r0
}
   1a582:	0018      	movs	r0, r3
   1a584:	46bd      	mov	sp, r7
   1a586:	b002      	add	sp, #8
   1a588:	bd80      	pop	{r7, pc}
   1a58a:	46c0      	nop			; (mov r8, r8)
   1a58c:	0001dd41 	.word	0x0001dd41

0001a590 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1a590:	b580      	push	{r7, lr}
   1a592:	b082      	sub	sp, #8
   1a594:	af00      	add	r7, sp, #0
   1a596:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1a598:	687b      	ldr	r3, [r7, #4]
   1a59a:	0018      	movs	r0, r3
   1a59c:	4b03      	ldr	r3, [pc, #12]	; (1a5ac <prvTraceGetTaskNumberLow16+0x1c>)
   1a59e:	4798      	blx	r3
   1a5a0:	0003      	movs	r3, r0
   1a5a2:	b29b      	uxth	r3, r3
}
   1a5a4:	0018      	movs	r0, r3
   1a5a6:	46bd      	mov	sp, r7
   1a5a8:	b002      	add	sp, #8
   1a5aa:	bd80      	pop	{r7, pc}
   1a5ac:	0001f071 	.word	0x0001f071

0001a5b0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1a5b0:	b580      	push	{r7, lr}
   1a5b2:	b082      	sub	sp, #8
   1a5b4:	af00      	add	r7, sp, #0
   1a5b6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1a5b8:	687b      	ldr	r3, [r7, #4]
   1a5ba:	0018      	movs	r0, r3
   1a5bc:	4b04      	ldr	r3, [pc, #16]	; (1a5d0 <prvTraceGetTaskNumberHigh16+0x20>)
   1a5be:	4798      	blx	r3
   1a5c0:	0003      	movs	r3, r0
   1a5c2:	0c1b      	lsrs	r3, r3, #16
   1a5c4:	b29b      	uxth	r3, r3
}
   1a5c6:	0018      	movs	r0, r3
   1a5c8:	46bd      	mov	sp, r7
   1a5ca:	b002      	add	sp, #8
   1a5cc:	bd80      	pop	{r7, pc}
   1a5ce:	46c0      	nop			; (mov r8, r8)
   1a5d0:	0001f071 	.word	0x0001f071

0001a5d4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   1a5d4:	b580      	push	{r7, lr}
   1a5d6:	b082      	sub	sp, #8
   1a5d8:	af00      	add	r7, sp, #0
   1a5da:	6078      	str	r0, [r7, #4]
   1a5dc:	000a      	movs	r2, r1
   1a5de:	1cbb      	adds	r3, r7, #2
   1a5e0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1a5e2:	687b      	ldr	r3, [r7, #4]
   1a5e4:	0018      	movs	r0, r3
   1a5e6:	4b08      	ldr	r3, [pc, #32]	; (1a608 <prvTraceSetTaskNumberLow16+0x34>)
   1a5e8:	4798      	blx	r3
   1a5ea:	0003      	movs	r3, r0
   1a5ec:	0c1b      	lsrs	r3, r3, #16
   1a5ee:	041a      	lsls	r2, r3, #16
   1a5f0:	1cbb      	adds	r3, r7, #2
   1a5f2:	881b      	ldrh	r3, [r3, #0]
   1a5f4:	431a      	orrs	r2, r3
   1a5f6:	687b      	ldr	r3, [r7, #4]
   1a5f8:	0011      	movs	r1, r2
   1a5fa:	0018      	movs	r0, r3
   1a5fc:	4b03      	ldr	r3, [pc, #12]	; (1a60c <prvTraceSetTaskNumberLow16+0x38>)
   1a5fe:	4798      	blx	r3
}
   1a600:	46c0      	nop			; (mov r8, r8)
   1a602:	46bd      	mov	sp, r7
   1a604:	b002      	add	sp, #8
   1a606:	bd80      	pop	{r7, pc}
   1a608:	0001f071 	.word	0x0001f071
   1a60c:	0001f099 	.word	0x0001f099

0001a610 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1a610:	b580      	push	{r7, lr}
   1a612:	b082      	sub	sp, #8
   1a614:	af00      	add	r7, sp, #0
   1a616:	6078      	str	r0, [r7, #4]
   1a618:	000a      	movs	r2, r1
   1a61a:	1cbb      	adds	r3, r7, #2
   1a61c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1a61e:	687b      	ldr	r3, [r7, #4]
   1a620:	0018      	movs	r0, r3
   1a622:	4b09      	ldr	r3, [pc, #36]	; (1a648 <prvTraceSetTaskNumberHigh16+0x38>)
   1a624:	4798      	blx	r3
   1a626:	0003      	movs	r3, r0
   1a628:	041b      	lsls	r3, r3, #16
   1a62a:	0c1a      	lsrs	r2, r3, #16
   1a62c:	1cbb      	adds	r3, r7, #2
   1a62e:	881b      	ldrh	r3, [r3, #0]
   1a630:	041b      	lsls	r3, r3, #16
   1a632:	431a      	orrs	r2, r3
   1a634:	687b      	ldr	r3, [r7, #4]
   1a636:	0011      	movs	r1, r2
   1a638:	0018      	movs	r0, r3
   1a63a:	4b04      	ldr	r3, [pc, #16]	; (1a64c <prvTraceSetTaskNumberHigh16+0x3c>)
   1a63c:	4798      	blx	r3
}
   1a63e:	46c0      	nop			; (mov r8, r8)
   1a640:	46bd      	mov	sp, r7
   1a642:	b002      	add	sp, #8
   1a644:	bd80      	pop	{r7, pc}
   1a646:	46c0      	nop			; (mov r8, r8)
   1a648:	0001f071 	.word	0x0001f071
   1a64c:	0001f099 	.word	0x0001f099

0001a650 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   1a650:	b580      	push	{r7, lr}
   1a652:	b082      	sub	sp, #8
   1a654:	af00      	add	r7, sp, #0
   1a656:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1a658:	687b      	ldr	r3, [r7, #4]
   1a65a:	0018      	movs	r0, r3
   1a65c:	4b03      	ldr	r3, [pc, #12]	; (1a66c <prvTraceGetQueueNumberLow16+0x1c>)
   1a65e:	4798      	blx	r3
   1a660:	0003      	movs	r3, r0
   1a662:	b29b      	uxth	r3, r3
}
   1a664:	0018      	movs	r0, r3
   1a666:	46bd      	mov	sp, r7
   1a668:	b002      	add	sp, #8
   1a66a:	bd80      	pop	{r7, pc}
   1a66c:	0001a551 	.word	0x0001a551

0001a670 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1a670:	b580      	push	{r7, lr}
   1a672:	b082      	sub	sp, #8
   1a674:	af00      	add	r7, sp, #0
   1a676:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1a678:	687b      	ldr	r3, [r7, #4]
   1a67a:	0018      	movs	r0, r3
   1a67c:	4b04      	ldr	r3, [pc, #16]	; (1a690 <prvTraceGetQueueNumberHigh16+0x20>)
   1a67e:	4798      	blx	r3
   1a680:	0003      	movs	r3, r0
   1a682:	0c1b      	lsrs	r3, r3, #16
   1a684:	b29b      	uxth	r3, r3
}
   1a686:	0018      	movs	r0, r3
   1a688:	46bd      	mov	sp, r7
   1a68a:	b002      	add	sp, #8
   1a68c:	bd80      	pop	{r7, pc}
   1a68e:	46c0      	nop			; (mov r8, r8)
   1a690:	0001a551 	.word	0x0001a551

0001a694 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1a694:	b580      	push	{r7, lr}
   1a696:	b082      	sub	sp, #8
   1a698:	af00      	add	r7, sp, #0
   1a69a:	6078      	str	r0, [r7, #4]
   1a69c:	000a      	movs	r2, r1
   1a69e:	1cbb      	adds	r3, r7, #2
   1a6a0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1a6a2:	687b      	ldr	r3, [r7, #4]
   1a6a4:	0018      	movs	r0, r3
   1a6a6:	4b08      	ldr	r3, [pc, #32]	; (1a6c8 <prvTraceSetQueueNumberLow16+0x34>)
   1a6a8:	4798      	blx	r3
   1a6aa:	0003      	movs	r3, r0
   1a6ac:	0c1b      	lsrs	r3, r3, #16
   1a6ae:	041a      	lsls	r2, r3, #16
   1a6b0:	1cbb      	adds	r3, r7, #2
   1a6b2:	881b      	ldrh	r3, [r3, #0]
   1a6b4:	431a      	orrs	r2, r3
   1a6b6:	687b      	ldr	r3, [r7, #4]
   1a6b8:	0011      	movs	r1, r2
   1a6ba:	0018      	movs	r0, r3
   1a6bc:	4b03      	ldr	r3, [pc, #12]	; (1a6cc <prvTraceSetQueueNumberLow16+0x38>)
   1a6be:	4798      	blx	r3
}
   1a6c0:	46c0      	nop			; (mov r8, r8)
   1a6c2:	46bd      	mov	sp, r7
   1a6c4:	b002      	add	sp, #8
   1a6c6:	bd80      	pop	{r7, pc}
   1a6c8:	0001a551 	.word	0x0001a551
   1a6cc:	0001dd29 	.word	0x0001dd29

0001a6d0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1a6d0:	b580      	push	{r7, lr}
   1a6d2:	b082      	sub	sp, #8
   1a6d4:	af00      	add	r7, sp, #0
   1a6d6:	6078      	str	r0, [r7, #4]
   1a6d8:	000a      	movs	r2, r1
   1a6da:	1cbb      	adds	r3, r7, #2
   1a6dc:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1a6de:	687b      	ldr	r3, [r7, #4]
   1a6e0:	0018      	movs	r0, r3
   1a6e2:	4b09      	ldr	r3, [pc, #36]	; (1a708 <prvTraceSetQueueNumberHigh16+0x38>)
   1a6e4:	4798      	blx	r3
   1a6e6:	0003      	movs	r3, r0
   1a6e8:	041b      	lsls	r3, r3, #16
   1a6ea:	0c1a      	lsrs	r2, r3, #16
   1a6ec:	1cbb      	adds	r3, r7, #2
   1a6ee:	881b      	ldrh	r3, [r3, #0]
   1a6f0:	041b      	lsls	r3, r3, #16
   1a6f2:	431a      	orrs	r2, r3
   1a6f4:	687b      	ldr	r3, [r7, #4]
   1a6f6:	0011      	movs	r1, r2
   1a6f8:	0018      	movs	r0, r3
   1a6fa:	4b04      	ldr	r3, [pc, #16]	; (1a70c <prvTraceSetQueueNumberHigh16+0x3c>)
   1a6fc:	4798      	blx	r3
}
   1a6fe:	46c0      	nop			; (mov r8, r8)
   1a700:	46bd      	mov	sp, r7
   1a702:	b002      	add	sp, #8
   1a704:	bd80      	pop	{r7, pc}
   1a706:	46c0      	nop			; (mov r8, r8)
   1a708:	0001a551 	.word	0x0001a551
   1a70c:	0001dd29 	.word	0x0001dd29

0001a710 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   1a710:	b580      	push	{r7, lr}
   1a712:	b084      	sub	sp, #16
   1a714:	af00      	add	r7, sp, #0
   1a716:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   1a718:	2300      	movs	r3, #0
   1a71a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a71c:	2300      	movs	r3, #0
   1a71e:	60bb      	str	r3, [r7, #8]
   1a720:	e018      	b.n	1a754 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1a722:	4b14      	ldr	r3, [pc, #80]	; (1a774 <prvAddTaskToStackMonitor+0x64>)
   1a724:	68ba      	ldr	r2, [r7, #8]
   1a726:	00d2      	lsls	r2, r2, #3
   1a728:	58d3      	ldr	r3, [r2, r3]
   1a72a:	2b00      	cmp	r3, #0
   1a72c:	d10f      	bne.n	1a74e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1a72e:	4b11      	ldr	r3, [pc, #68]	; (1a774 <prvAddTaskToStackMonitor+0x64>)
   1a730:	68ba      	ldr	r2, [r7, #8]
   1a732:	00d2      	lsls	r2, r2, #3
   1a734:	6879      	ldr	r1, [r7, #4]
   1a736:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1a738:	4a0e      	ldr	r2, [pc, #56]	; (1a774 <prvAddTaskToStackMonitor+0x64>)
   1a73a:	68bb      	ldr	r3, [r7, #8]
   1a73c:	00db      	lsls	r3, r3, #3
   1a73e:	18d3      	adds	r3, r2, r3
   1a740:	3304      	adds	r3, #4
   1a742:	2201      	movs	r2, #1
   1a744:	4252      	negs	r2, r2
   1a746:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1a748:	2301      	movs	r3, #1
   1a74a:	60fb      	str	r3, [r7, #12]
			break;
   1a74c:	e005      	b.n	1a75a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a74e:	68bb      	ldr	r3, [r7, #8]
   1a750:	3301      	adds	r3, #1
   1a752:	60bb      	str	r3, [r7, #8]
   1a754:	68bb      	ldr	r3, [r7, #8]
   1a756:	2b09      	cmp	r3, #9
   1a758:	dde3      	ble.n	1a722 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1a75a:	68fb      	ldr	r3, [r7, #12]
   1a75c:	2b00      	cmp	r3, #0
   1a75e:	d104      	bne.n	1a76a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   1a760:	4b05      	ldr	r3, [pc, #20]	; (1a778 <prvAddTaskToStackMonitor+0x68>)
   1a762:	681b      	ldr	r3, [r3, #0]
   1a764:	1c5a      	adds	r2, r3, #1
   1a766:	4b04      	ldr	r3, [pc, #16]	; (1a778 <prvAddTaskToStackMonitor+0x68>)
   1a768:	601a      	str	r2, [r3, #0]
	}
}
   1a76a:	46c0      	nop			; (mov r8, r8)
   1a76c:	46bd      	mov	sp, r7
   1a76e:	b004      	add	sp, #16
   1a770:	bd80      	pop	{r7, pc}
   1a772:	46c0      	nop			; (mov r8, r8)
   1a774:	20000b84 	.word	0x20000b84
   1a778:	20000bd4 	.word	0x20000bd4

0001a77c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1a77c:	b590      	push	{r4, r7, lr}
   1a77e:	b085      	sub	sp, #20
   1a780:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1a782:	2300      	movs	r3, #0
   1a784:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1a786:	4b2b      	ldr	r3, [pc, #172]	; (1a834 <prvReportStackUsage+0xb8>)
   1a788:	681b      	ldr	r3, [r3, #0]
   1a78a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1a78c:	4b29      	ldr	r3, [pc, #164]	; (1a834 <prvReportStackUsage+0xb8>)
   1a78e:	681a      	ldr	r2, [r3, #0]
   1a790:	4b29      	ldr	r3, [pc, #164]	; (1a838 <prvReportStackUsage+0xbc>)
   1a792:	00d2      	lsls	r2, r2, #3
   1a794:	58d3      	ldr	r3, [r2, r3]
   1a796:	2b00      	cmp	r3, #0
   1a798:	d035      	beq.n	1a806 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1a79a:	4b26      	ldr	r3, [pc, #152]	; (1a834 <prvReportStackUsage+0xb8>)
   1a79c:	681a      	ldr	r2, [r3, #0]
   1a79e:	4b26      	ldr	r3, [pc, #152]	; (1a838 <prvReportStackUsage+0xbc>)
   1a7a0:	00d2      	lsls	r2, r2, #3
   1a7a2:	58d3      	ldr	r3, [r2, r3]
   1a7a4:	0018      	movs	r0, r3
   1a7a6:	4b25      	ldr	r3, [pc, #148]	; (1a83c <prvReportStackUsage+0xc0>)
   1a7a8:	4798      	blx	r3
   1a7aa:	0003      	movs	r3, r0
   1a7ac:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1a7ae:	4b21      	ldr	r3, [pc, #132]	; (1a834 <prvReportStackUsage+0xb8>)
   1a7b0:	681b      	ldr	r3, [r3, #0]
   1a7b2:	4a21      	ldr	r2, [pc, #132]	; (1a838 <prvReportStackUsage+0xbc>)
   1a7b4:	00db      	lsls	r3, r3, #3
   1a7b6:	18d3      	adds	r3, r2, r3
   1a7b8:	3304      	adds	r3, #4
   1a7ba:	681a      	ldr	r2, [r3, #0]
   1a7bc:	687b      	ldr	r3, [r7, #4]
   1a7be:	429a      	cmp	r2, r3
   1a7c0:	d907      	bls.n	1a7d2 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1a7c2:	4b1c      	ldr	r3, [pc, #112]	; (1a834 <prvReportStackUsage+0xb8>)
   1a7c4:	681b      	ldr	r3, [r3, #0]
   1a7c6:	4a1c      	ldr	r2, [pc, #112]	; (1a838 <prvReportStackUsage+0xbc>)
   1a7c8:	00db      	lsls	r3, r3, #3
   1a7ca:	18d3      	adds	r3, r2, r3
   1a7cc:	3304      	adds	r3, #4
   1a7ce:	687a      	ldr	r2, [r7, #4]
   1a7d0:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1a7d2:	4b18      	ldr	r3, [pc, #96]	; (1a834 <prvReportStackUsage+0xb8>)
   1a7d4:	681a      	ldr	r2, [r3, #0]
   1a7d6:	4b18      	ldr	r3, [pc, #96]	; (1a838 <prvReportStackUsage+0xbc>)
   1a7d8:	00d2      	lsls	r2, r2, #3
   1a7da:	58d3      	ldr	r3, [r2, r3]
   1a7dc:	0018      	movs	r0, r3
   1a7de:	4b18      	ldr	r3, [pc, #96]	; (1a840 <prvReportStackUsage+0xc4>)
   1a7e0:	4798      	blx	r3
   1a7e2:	0003      	movs	r3, r0
   1a7e4:	b2db      	uxtb	r3, r3
   1a7e6:	0019      	movs	r1, r3
   1a7e8:	4b12      	ldr	r3, [pc, #72]	; (1a834 <prvReportStackUsage+0xb8>)
   1a7ea:	681b      	ldr	r3, [r3, #0]
   1a7ec:	4a12      	ldr	r2, [pc, #72]	; (1a838 <prvReportStackUsage+0xbc>)
   1a7ee:	00db      	lsls	r3, r3, #3
   1a7f0:	18d3      	adds	r3, r2, r3
   1a7f2:	3304      	adds	r3, #4
   1a7f4:	681b      	ldr	r3, [r3, #0]
   1a7f6:	000a      	movs	r2, r1
   1a7f8:	2103      	movs	r1, #3
   1a7fa:	20ea      	movs	r0, #234	; 0xea
   1a7fc:	4c11      	ldr	r4, [pc, #68]	; (1a844 <prvReportStackUsage+0xc8>)
   1a7fe:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1a800:	68fb      	ldr	r3, [r7, #12]
   1a802:	3301      	adds	r3, #1
   1a804:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1a806:	4b0b      	ldr	r3, [pc, #44]	; (1a834 <prvReportStackUsage+0xb8>)
   1a808:	681b      	ldr	r3, [r3, #0]
   1a80a:	1c5a      	adds	r2, r3, #1
   1a80c:	4b0e      	ldr	r3, [pc, #56]	; (1a848 <prvReportStackUsage+0xcc>)
   1a80e:	210a      	movs	r1, #10
   1a810:	0010      	movs	r0, r2
   1a812:	4798      	blx	r3
   1a814:	000b      	movs	r3, r1
   1a816:	001a      	movs	r2, r3
   1a818:	4b06      	ldr	r3, [pc, #24]	; (1a834 <prvReportStackUsage+0xb8>)
   1a81a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1a81c:	68fb      	ldr	r3, [r7, #12]
   1a81e:	2b00      	cmp	r3, #0
   1a820:	dc04      	bgt.n	1a82c <prvReportStackUsage+0xb0>
   1a822:	4b04      	ldr	r3, [pc, #16]	; (1a834 <prvReportStackUsage+0xb8>)
   1a824:	681a      	ldr	r2, [r3, #0]
   1a826:	68bb      	ldr	r3, [r7, #8]
   1a828:	429a      	cmp	r2, r3
   1a82a:	d1af      	bne.n	1a78c <prvReportStackUsage+0x10>
}
   1a82c:	46c0      	nop			; (mov r8, r8)
   1a82e:	46bd      	mov	sp, r7
   1a830:	b005      	add	sp, #20
   1a832:	bd90      	pop	{r4, r7, pc}
   1a834:	20000bd8 	.word	0x20000bd8
   1a838:	20000b84 	.word	0x20000b84
   1a83c:	0001f211 	.word	0x0001f211
   1a840:	0001a591 	.word	0x0001a591
   1a844:	0001b0d9 	.word	0x0001b0d9
   1a848:	00035115 	.word	0x00035115

0001a84c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1a84c:	b580      	push	{r7, lr}
   1a84e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1a850:	4b02      	ldr	r3, [pc, #8]	; (1a85c <prvTraceGetCurrentTaskHandle+0x10>)
   1a852:	4798      	blx	r3
   1a854:	0003      	movs	r3, r0
}
   1a856:	0018      	movs	r0, r3
   1a858:	46bd      	mov	sp, r7
   1a85a:	bd80      	pop	{r7, pc}
   1a85c:	0001f2bd 	.word	0x0001f2bd

0001a860 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1a860:	b590      	push	{r4, r7, lr}
   1a862:	b085      	sub	sp, #20
   1a864:	af02      	add	r7, sp, #8
   1a866:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   1a868:	4b14      	ldr	r3, [pc, #80]	; (1a8bc <vTraceEnable+0x5c>)
   1a86a:	4798      	blx	r3

	if (startOption == TRC_START)
   1a86c:	687b      	ldr	r3, [r7, #4]
   1a86e:	2b01      	cmp	r3, #1
   1a870:	d102      	bne.n	1a878 <vTraceEnable+0x18>
	{
		vTraceStart();
   1a872:	4b13      	ldr	r3, [pc, #76]	; (1a8c0 <vTraceEnable+0x60>)
   1a874:	4798      	blx	r3
   1a876:	e00e      	b.n	1a896 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   1a878:	687b      	ldr	r3, [r7, #4]
   1a87a:	2b02      	cmp	r3, #2
   1a87c:	d104      	bne.n	1a888 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1a87e:	4b11      	ldr	r3, [pc, #68]	; (1a8c4 <vTraceEnable+0x64>)
   1a880:	0018      	movs	r0, r3
   1a882:	4b11      	ldr	r3, [pc, #68]	; (1a8c8 <vTraceEnable+0x68>)
   1a884:	4798      	blx	r3
   1a886:	e006      	b.n	1a896 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   1a888:	687b      	ldr	r3, [r7, #4]
   1a88a:	2b00      	cmp	r3, #0
   1a88c:	d003      	beq.n	1a896 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1a88e:	4b0f      	ldr	r3, [pc, #60]	; (1a8cc <vTraceEnable+0x6c>)
   1a890:	0018      	movs	r0, r3
   1a892:	4b0d      	ldr	r3, [pc, #52]	; (1a8c8 <vTraceEnable+0x68>)
   1a894:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1a896:	4b0e      	ldr	r3, [pc, #56]	; (1a8d0 <vTraceEnable+0x70>)
   1a898:	681b      	ldr	r3, [r3, #0]
   1a89a:	2b00      	cmp	r3, #0
   1a89c:	d10a      	bne.n	1a8b4 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1a89e:	2396      	movs	r3, #150	; 0x96
   1a8a0:	005a      	lsls	r2, r3, #1
   1a8a2:	490c      	ldr	r1, [pc, #48]	; (1a8d4 <vTraceEnable+0x74>)
   1a8a4:	480c      	ldr	r0, [pc, #48]	; (1a8d8 <vTraceEnable+0x78>)
   1a8a6:	4b0a      	ldr	r3, [pc, #40]	; (1a8d0 <vTraceEnable+0x70>)
   1a8a8:	9301      	str	r3, [sp, #4]
   1a8aa:	2304      	movs	r3, #4
   1a8ac:	9300      	str	r3, [sp, #0]
   1a8ae:	2300      	movs	r3, #0
   1a8b0:	4c0a      	ldr	r4, [pc, #40]	; (1a8dc <vTraceEnable+0x7c>)
   1a8b2:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   1a8b4:	46c0      	nop			; (mov r8, r8)
   1a8b6:	46bd      	mov	sp, r7
   1a8b8:	b003      	add	sp, #12
   1a8ba:	bd90      	pop	{r4, r7, pc}
   1a8bc:	0001b7a5 	.word	0x0001b7a5
   1a8c0:	0001acfd 	.word	0x0001acfd
   1a8c4:	0003a134 	.word	0x0003a134
   1a8c8:	0001be4d 	.word	0x0001be4d
   1a8cc:	0003a174 	.word	0x0003a174
   1a8d0:	20000b80 	.word	0x20000b80
   1a8d4:	0003a1a8 	.word	0x0003a1a8
   1a8d8:	0001a8e1 	.word	0x0001a8e1
   1a8dc:	0001e215 	.word	0x0001e215

0001a8e0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1a8e0:	b580      	push	{r7, lr}
   1a8e2:	b082      	sub	sp, #8
   1a8e4:	af00      	add	r7, sp, #0
   1a8e6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1a8e8:	4b04      	ldr	r3, [pc, #16]	; (1a8fc <TzCtrl+0x1c>)
   1a8ea:	4798      	blx	r3
   1a8ec:	1e03      	subs	r3, r0, #0
   1a8ee:	d001      	beq.n	1a8f4 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1a8f0:	4b03      	ldr	r3, [pc, #12]	; (1a900 <TzCtrl+0x20>)
   1a8f2:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1a8f4:	2004      	movs	r0, #4
   1a8f6:	4b03      	ldr	r3, [pc, #12]	; (1a904 <TzCtrl+0x24>)
   1a8f8:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1a8fa:	e7f5      	b.n	1a8e8 <TzCtrl+0x8>
   1a8fc:	0001ad41 	.word	0x0001ad41
   1a900:	0001a77d 	.word	0x0001a77d
   1a904:	0001e5b1 	.word	0x0001e5b1

0001a908 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   1a908:	b580      	push	{r7, lr}
   1a90a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1a90c:	4b60      	ldr	r3, [pc, #384]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a90e:	681b      	ldr	r3, [r3, #0]
   1a910:	2209      	movs	r2, #9
   1a912:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1a914:	4b5e      	ldr	r3, [pc, #376]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a916:	681b      	ldr	r3, [r3, #0]
   1a918:	2264      	movs	r2, #100	; 0x64
   1a91a:	210a      	movs	r1, #10
   1a91c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1a91e:	4b5c      	ldr	r3, [pc, #368]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a920:	681b      	ldr	r3, [r3, #0]
   1a922:	2265      	movs	r2, #101	; 0x65
   1a924:	210a      	movs	r1, #10
   1a926:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1a928:	4b59      	ldr	r3, [pc, #356]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a92a:	681b      	ldr	r3, [r3, #0]
   1a92c:	2266      	movs	r2, #102	; 0x66
   1a92e:	210a      	movs	r1, #10
   1a930:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1a932:	4b57      	ldr	r3, [pc, #348]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a934:	681b      	ldr	r3, [r3, #0]
   1a936:	2267      	movs	r2, #103	; 0x67
   1a938:	210f      	movs	r1, #15
   1a93a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1a93c:	4b54      	ldr	r3, [pc, #336]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a93e:	681b      	ldr	r3, [r3, #0]
   1a940:	2268      	movs	r2, #104	; 0x68
   1a942:	2105      	movs	r1, #5
   1a944:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1a946:	4b52      	ldr	r3, [pc, #328]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a948:	681b      	ldr	r3, [r3, #0]
   1a94a:	2269      	movs	r2, #105	; 0x69
   1a94c:	2105      	movs	r1, #5
   1a94e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1a950:	4b4f      	ldr	r3, [pc, #316]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a952:	681b      	ldr	r3, [r3, #0]
   1a954:	226a      	movs	r2, #106	; 0x6a
   1a956:	2105      	movs	r1, #5
   1a958:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1a95a:	4b4d      	ldr	r3, [pc, #308]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a95c:	681b      	ldr	r3, [r3, #0]
   1a95e:	226b      	movs	r2, #107	; 0x6b
   1a960:	2105      	movs	r1, #5
   1a962:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1a964:	4b4a      	ldr	r3, [pc, #296]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a966:	681b      	ldr	r3, [r3, #0]
   1a968:	226c      	movs	r2, #108	; 0x6c
   1a96a:	2105      	movs	r1, #5
   1a96c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1a96e:	4b48      	ldr	r3, [pc, #288]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a970:	681b      	ldr	r3, [r3, #0]
   1a972:	2270      	movs	r2, #112	; 0x70
   1a974:	210f      	movs	r1, #15
   1a976:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   1a978:	4b45      	ldr	r3, [pc, #276]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a97a:	681b      	ldr	r3, [r3, #0]
   1a97c:	2271      	movs	r2, #113	; 0x71
   1a97e:	210f      	movs	r1, #15
   1a980:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1a982:	4b43      	ldr	r3, [pc, #268]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a984:	681b      	ldr	r3, [r3, #0]
   1a986:	2272      	movs	r2, #114	; 0x72
   1a988:	210f      	movs	r1, #15
   1a98a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1a98c:	4b40      	ldr	r3, [pc, #256]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a98e:	681b      	ldr	r3, [r3, #0]
   1a990:	2273      	movs	r2, #115	; 0x73
   1a992:	210f      	movs	r1, #15
   1a994:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1a996:	4b3e      	ldr	r3, [pc, #248]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a998:	681b      	ldr	r3, [r3, #0]
   1a99a:	2274      	movs	r2, #116	; 0x74
   1a99c:	210f      	movs	r1, #15
   1a99e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1a9a0:	4b3b      	ldr	r3, [pc, #236]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9a2:	681b      	ldr	r3, [r3, #0]
   1a9a4:	2275      	movs	r2, #117	; 0x75
   1a9a6:	210f      	movs	r1, #15
   1a9a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1a9aa:	4b39      	ldr	r3, [pc, #228]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9ac:	681b      	ldr	r3, [r3, #0]
   1a9ae:	2276      	movs	r2, #118	; 0x76
   1a9b0:	210f      	movs	r1, #15
   1a9b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   1a9b4:	4b36      	ldr	r3, [pc, #216]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9b6:	681b      	ldr	r3, [r3, #0]
   1a9b8:	2277      	movs	r2, #119	; 0x77
   1a9ba:	210f      	movs	r1, #15
   1a9bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1a9be:	4b34      	ldr	r3, [pc, #208]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9c0:	681b      	ldr	r3, [r3, #0]
   1a9c2:	2278      	movs	r2, #120	; 0x78
   1a9c4:	210f      	movs	r1, #15
   1a9c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   1a9c8:	4b31      	ldr	r3, [pc, #196]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9ca:	681b      	ldr	r3, [r3, #0]
   1a9cc:	227c      	movs	r2, #124	; 0x7c
   1a9ce:	2110      	movs	r1, #16
   1a9d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1a9d2:	4b2f      	ldr	r3, [pc, #188]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9d4:	681b      	ldr	r3, [r3, #0]
   1a9d6:	227d      	movs	r2, #125	; 0x7d
   1a9d8:	2110      	movs	r1, #16
   1a9da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1a9dc:	4b2c      	ldr	r3, [pc, #176]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9de:	681b      	ldr	r3, [r3, #0]
   1a9e0:	227e      	movs	r2, #126	; 0x7e
   1a9e2:	2110      	movs	r1, #16
   1a9e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1a9e6:	4b2a      	ldr	r3, [pc, #168]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9e8:	681b      	ldr	r3, [r3, #0]
   1a9ea:	227f      	movs	r2, #127	; 0x7f
   1a9ec:	2113      	movs	r1, #19
   1a9ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1a9f0:	4b27      	ldr	r3, [pc, #156]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9f2:	681b      	ldr	r3, [r3, #0]
   1a9f4:	2280      	movs	r2, #128	; 0x80
   1a9f6:	2111      	movs	r1, #17
   1a9f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1a9fa:	4b25      	ldr	r3, [pc, #148]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1a9fc:	681b      	ldr	r3, [r3, #0]
   1a9fe:	2281      	movs	r2, #129	; 0x81
   1aa00:	2110      	movs	r1, #16
   1aa02:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1aa04:	4b22      	ldr	r3, [pc, #136]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa06:	681b      	ldr	r3, [r3, #0]
   1aa08:	2282      	movs	r2, #130	; 0x82
   1aa0a:	2113      	movs	r1, #19
   1aa0c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1aa0e:	4b20      	ldr	r3, [pc, #128]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa10:	681b      	ldr	r3, [r3, #0]
   1aa12:	2283      	movs	r2, #131	; 0x83
   1aa14:	2113      	movs	r1, #19
   1aa16:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   1aa18:	4b1d      	ldr	r3, [pc, #116]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa1a:	681b      	ldr	r3, [r3, #0]
   1aa1c:	2284      	movs	r2, #132	; 0x84
   1aa1e:	2113      	movs	r1, #19
   1aa20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1aa22:	4b1b      	ldr	r3, [pc, #108]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa24:	681b      	ldr	r3, [r3, #0]
   1aa26:	2288      	movs	r2, #136	; 0x88
   1aa28:	2100      	movs	r1, #0
   1aa2a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1aa2c:	4b18      	ldr	r3, [pc, #96]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa2e:	681b      	ldr	r3, [r3, #0]
   1aa30:	228a      	movs	r2, #138	; 0x8a
   1aa32:	21a0      	movs	r1, #160	; 0xa0
   1aa34:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1aa36:	4b16      	ldr	r3, [pc, #88]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa38:	681b      	ldr	r3, [r3, #0]
   1aa3a:	228c      	movs	r2, #140	; 0x8c
   1aa3c:	21a0      	movs	r1, #160	; 0xa0
   1aa3e:	0049      	lsls	r1, r1, #1
   1aa40:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1aa42:	4b13      	ldr	r3, [pc, #76]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa44:	681b      	ldr	r3, [r3, #0]
   1aa46:	228e      	movs	r2, #142	; 0x8e
   1aa48:	21f0      	movs	r1, #240	; 0xf0
   1aa4a:	0049      	lsls	r1, r1, #1
   1aa4c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1aa4e:	4b10      	ldr	r3, [pc, #64]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa50:	681b      	ldr	r3, [r3, #0]
   1aa52:	2290      	movs	r2, #144	; 0x90
   1aa54:	490f      	ldr	r1, [pc, #60]	; (1aa94 <vTraceInitObjectPropertyTable+0x18c>)
   1aa56:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   1aa58:	4b0d      	ldr	r3, [pc, #52]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa5a:	681b      	ldr	r3, [r3, #0]
   1aa5c:	2292      	movs	r2, #146	; 0x92
   1aa5e:	490e      	ldr	r1, [pc, #56]	; (1aa98 <vTraceInitObjectPropertyTable+0x190>)
   1aa60:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1aa62:	4b0b      	ldr	r3, [pc, #44]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa64:	681b      	ldr	r3, [r3, #0]
   1aa66:	2294      	movs	r2, #148	; 0x94
   1aa68:	490c      	ldr	r1, [pc, #48]	; (1aa9c <vTraceInitObjectPropertyTable+0x194>)
   1aa6a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1aa6c:	4b08      	ldr	r3, [pc, #32]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa6e:	681b      	ldr	r3, [r3, #0]
   1aa70:	2296      	movs	r2, #150	; 0x96
   1aa72:	490b      	ldr	r1, [pc, #44]	; (1aaa0 <vTraceInitObjectPropertyTable+0x198>)
   1aa74:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1aa76:	4b06      	ldr	r3, [pc, #24]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa78:	681b      	ldr	r3, [r3, #0]
   1aa7a:	2298      	movs	r2, #152	; 0x98
   1aa7c:	218c      	movs	r1, #140	; 0x8c
   1aa7e:	00c9      	lsls	r1, r1, #3
   1aa80:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1aa82:	4b03      	ldr	r3, [pc, #12]	; (1aa90 <vTraceInitObjectPropertyTable+0x188>)
   1aa84:	681b      	ldr	r3, [r3, #0]
   1aa86:	4a07      	ldr	r2, [pc, #28]	; (1aaa4 <vTraceInitObjectPropertyTable+0x19c>)
   1aa88:	661a      	str	r2, [r3, #96]	; 0x60
}
   1aa8a:	46c0      	nop			; (mov r8, r8)
   1aa8c:	46bd      	mov	sp, r7
   1aa8e:	bd80      	pop	{r7, pc}
   1aa90:	20000c98 	.word	0x20000c98
   1aa94:	000002fd 	.word	0x000002fd
   1aa98:	00000352 	.word	0x00000352
   1aa9c:	000003a2 	.word	0x000003a2
   1aaa0:	00000401 	.word	0x00000401
   1aaa4:	000004bf 	.word	0x000004bf

0001aaa8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1aaa8:	b580      	push	{r7, lr}
   1aaaa:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1aaac:	4b2e      	ldr	r3, [pc, #184]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aaae:	2200      	movs	r2, #0
   1aab0:	825a      	strh	r2, [r3, #18]
   1aab2:	4b2d      	ldr	r3, [pc, #180]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aab4:	8a5a      	ldrh	r2, [r3, #18]
   1aab6:	4b2c      	ldr	r3, [pc, #176]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aab8:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1aaba:	4b2b      	ldr	r3, [pc, #172]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aabc:	220a      	movs	r2, #10
   1aabe:	829a      	strh	r2, [r3, #20]
   1aac0:	4b29      	ldr	r3, [pc, #164]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aac2:	8a9a      	ldrh	r2, [r3, #20]
   1aac4:	4b28      	ldr	r3, [pc, #160]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aac6:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1aac8:	4b27      	ldr	r3, [pc, #156]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aaca:	2214      	movs	r2, #20
   1aacc:	82da      	strh	r2, [r3, #22]
   1aace:	4b26      	ldr	r3, [pc, #152]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aad0:	8ada      	ldrh	r2, [r3, #22]
   1aad2:	4b25      	ldr	r3, [pc, #148]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aad4:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1aad6:	4b24      	ldr	r3, [pc, #144]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aad8:	221e      	movs	r2, #30
   1aada:	831a      	strh	r2, [r3, #24]
   1aadc:	4b22      	ldr	r3, [pc, #136]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aade:	8b1a      	ldrh	r2, [r3, #24]
   1aae0:	4b21      	ldr	r3, [pc, #132]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aae2:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1aae4:	4b20      	ldr	r3, [pc, #128]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aae6:	222d      	movs	r2, #45	; 0x2d
   1aae8:	835a      	strh	r2, [r3, #26]
   1aaea:	4b1f      	ldr	r3, [pc, #124]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aaec:	8b5a      	ldrh	r2, [r3, #26]
   1aaee:	4b1e      	ldr	r3, [pc, #120]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aaf0:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1aaf2:	4b1d      	ldr	r3, [pc, #116]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aaf4:	2232      	movs	r2, #50	; 0x32
   1aaf6:	839a      	strh	r2, [r3, #28]
   1aaf8:	4b1b      	ldr	r3, [pc, #108]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aafa:	8b9a      	ldrh	r2, [r3, #28]
   1aafc:	4b1a      	ldr	r3, [pc, #104]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1aafe:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1ab00:	4b19      	ldr	r3, [pc, #100]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab02:	2237      	movs	r2, #55	; 0x37
   1ab04:	83da      	strh	r2, [r3, #30]
   1ab06:	4b18      	ldr	r3, [pc, #96]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab08:	8bda      	ldrh	r2, [r3, #30]
   1ab0a:	4b17      	ldr	r3, [pc, #92]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab0c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1ab0e:	4b16      	ldr	r3, [pc, #88]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab10:	223c      	movs	r2, #60	; 0x3c
   1ab12:	841a      	strh	r2, [r3, #32]
   1ab14:	4b14      	ldr	r3, [pc, #80]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab16:	8c1a      	ldrh	r2, [r3, #32]
   1ab18:	4b13      	ldr	r3, [pc, #76]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab1a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1ab1c:	4b12      	ldr	r3, [pc, #72]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab1e:	2241      	movs	r2, #65	; 0x41
   1ab20:	845a      	strh	r2, [r3, #34]	; 0x22
   1ab22:	4b11      	ldr	r3, [pc, #68]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab24:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1ab26:	4b10      	ldr	r3, [pc, #64]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab28:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1ab2a:	4b0f      	ldr	r3, [pc, #60]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab2c:	2209      	movs	r2, #9
   1ab2e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1ab30:	4b0d      	ldr	r3, [pc, #52]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab32:	2213      	movs	r2, #19
   1ab34:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1ab36:	4b0c      	ldr	r3, [pc, #48]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab38:	221d      	movs	r2, #29
   1ab3a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1ab3c:	4b0a      	ldr	r3, [pc, #40]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab3e:	222c      	movs	r2, #44	; 0x2c
   1ab40:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1ab42:	4b09      	ldr	r3, [pc, #36]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab44:	2231      	movs	r2, #49	; 0x31
   1ab46:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1ab48:	4b07      	ldr	r3, [pc, #28]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab4a:	2236      	movs	r2, #54	; 0x36
   1ab4c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1ab4e:	4b06      	ldr	r3, [pc, #24]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab50:	223b      	movs	r2, #59	; 0x3b
   1ab52:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1ab54:	4b04      	ldr	r3, [pc, #16]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab56:	2240      	movs	r2, #64	; 0x40
   1ab58:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1ab5a:	4b03      	ldr	r3, [pc, #12]	; (1ab68 <vTraceInitObjectHandleStack+0xc0>)
   1ab5c:	2245      	movs	r2, #69	; 0x45
   1ab5e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1ab60:	46c0      	nop			; (mov r8, r8)
   1ab62:	46bd      	mov	sp, r7
   1ab64:	bd80      	pop	{r7, pc}
   1ab66:	46c0      	nop			; (mov r8, r8)
   1ab68:	20000c08 	.word	0x20000c08

0001ab6c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1ab6c:	b580      	push	{r7, lr}
   1ab6e:	b082      	sub	sp, #8
   1ab70:	af00      	add	r7, sp, #0
   1ab72:	0002      	movs	r2, r0
   1ab74:	1dfb      	adds	r3, r7, #7
   1ab76:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   1ab78:	1dfb      	adds	r3, r7, #7
   1ab7a:	781b      	ldrb	r3, [r3, #0]
   1ab7c:	2b08      	cmp	r3, #8
   1ab7e:	d816      	bhi.n	1abae <pszTraceGetErrorNotEnoughHandles+0x42>
   1ab80:	009a      	lsls	r2, r3, #2
   1ab82:	4b0d      	ldr	r3, [pc, #52]	; (1abb8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1ab84:	18d3      	adds	r3, r2, r3
   1ab86:	681b      	ldr	r3, [r3, #0]
   1ab88:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1ab8a:	4b0c      	ldr	r3, [pc, #48]	; (1abbc <pszTraceGetErrorNotEnoughHandles+0x50>)
   1ab8c:	e010      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1ab8e:	4b0c      	ldr	r3, [pc, #48]	; (1abc0 <pszTraceGetErrorNotEnoughHandles+0x54>)
   1ab90:	e00e      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1ab92:	4b0c      	ldr	r3, [pc, #48]	; (1abc4 <pszTraceGetErrorNotEnoughHandles+0x58>)
   1ab94:	e00c      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1ab96:	4b0c      	ldr	r3, [pc, #48]	; (1abc8 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   1ab98:	e00a      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1ab9a:	4b0c      	ldr	r3, [pc, #48]	; (1abcc <pszTraceGetErrorNotEnoughHandles+0x60>)
   1ab9c:	e008      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1ab9e:	4b0c      	ldr	r3, [pc, #48]	; (1abd0 <pszTraceGetErrorNotEnoughHandles+0x64>)
   1aba0:	e006      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1aba2:	4b0c      	ldr	r3, [pc, #48]	; (1abd4 <pszTraceGetErrorNotEnoughHandles+0x68>)
   1aba4:	e004      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1aba6:	4b0c      	ldr	r3, [pc, #48]	; (1abd8 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1aba8:	e002      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1abaa:	4b0c      	ldr	r3, [pc, #48]	; (1abdc <pszTraceGetErrorNotEnoughHandles+0x70>)
   1abac:	e000      	b.n	1abb0 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1abae:	4b0c      	ldr	r3, [pc, #48]	; (1abe0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1abb0:	0018      	movs	r0, r3
   1abb2:	46bd      	mov	sp, r7
   1abb4:	b002      	add	sp, #8
   1abb6:	bd80      	pop	{r7, pc}
   1abb8:	0003a4b0 	.word	0x0003a4b0
   1abbc:	0003a1b0 	.word	0x0003a1b0
   1abc0:	0003a1f8 	.word	0x0003a1f8
   1abc4:	0003a240 	.word	0x0003a240
   1abc8:	0003a294 	.word	0x0003a294
   1abcc:	0003a2e0 	.word	0x0003a2e0
   1abd0:	0003a32c 	.word	0x0003a32c
   1abd4:	0003a378 	.word	0x0003a378
   1abd8:	0003a3cc 	.word	0x0003a3cc
   1abdc:	0003a424 	.word	0x0003a424
   1abe0:	0003a480 	.word	0x0003a480

0001abe4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   1abe4:	b590      	push	{r4, r7, lr}
   1abe6:	b087      	sub	sp, #28
   1abe8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1abea:	2317      	movs	r3, #23
   1abec:	18fb      	adds	r3, r7, r3
   1abee:	2200      	movs	r2, #0
   1abf0:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1abf2:	4b36      	ldr	r3, [pc, #216]	; (1accc <uiTraceStart+0xe8>)
   1abf4:	681b      	ldr	r3, [r3, #0]
   1abf6:	2b00      	cmp	r3, #0
   1abf8:	d10b      	bne.n	1ac12 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1abfa:	4b34      	ldr	r3, [pc, #208]	; (1accc <uiTraceStart+0xe8>)
   1abfc:	681b      	ldr	r3, [r3, #0]
   1abfe:	2b00      	cmp	r3, #0
   1ac00:	d105      	bne.n	1ac0e <uiTraceStart+0x2a>
   1ac02:	4b33      	ldr	r3, [pc, #204]	; (1acd0 <uiTraceStart+0xec>)
   1ac04:	0018      	movs	r0, r3
   1ac06:	4b33      	ldr	r3, [pc, #204]	; (1acd4 <uiTraceStart+0xf0>)
   1ac08:	4798      	blx	r3
   1ac0a:	2300      	movs	r3, #0
   1ac0c:	e059      	b.n	1acc2 <uiTraceStart+0xde>
		return 0;
   1ac0e:	2300      	movs	r3, #0
   1ac10:	e057      	b.n	1acc2 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1ac12:	4b2e      	ldr	r3, [pc, #184]	; (1accc <uiTraceStart+0xe8>)
   1ac14:	681b      	ldr	r3, [r3, #0]
   1ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ac18:	2b01      	cmp	r3, #1
   1ac1a:	d101      	bne.n	1ac20 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1ac1c:	2301      	movs	r3, #1
   1ac1e:	e050      	b.n	1acc2 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   1ac20:	4b2d      	ldr	r3, [pc, #180]	; (1acd8 <uiTraceStart+0xf4>)
   1ac22:	681b      	ldr	r3, [r3, #0]
   1ac24:	2b00      	cmp	r3, #0
   1ac26:	d149      	bne.n	1acbc <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ac28:	f3ef 8310 	mrs	r3, PRIMASK
   1ac2c:	60bb      	str	r3, [r7, #8]
  return(result);
   1ac2e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1ac30:	613b      	str	r3, [r7, #16]
   1ac32:	2301      	movs	r3, #1
   1ac34:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ac36:	68fb      	ldr	r3, [r7, #12]
   1ac38:	f383 8810 	msr	PRIMASK, r3
   1ac3c:	4b27      	ldr	r3, [pc, #156]	; (1acdc <uiTraceStart+0xf8>)
   1ac3e:	681b      	ldr	r3, [r3, #0]
   1ac40:	1c5a      	adds	r2, r3, #1
   1ac42:	4b26      	ldr	r3, [pc, #152]	; (1acdc <uiTraceStart+0xf8>)
   1ac44:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1ac46:	4b21      	ldr	r3, [pc, #132]	; (1accc <uiTraceStart+0xe8>)
   1ac48:	681b      	ldr	r3, [r3, #0]
   1ac4a:	2201      	movs	r2, #1
   1ac4c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1ac4e:	4b24      	ldr	r3, [pc, #144]	; (1ace0 <uiTraceStart+0xfc>)
   1ac50:	4798      	blx	r3
   1ac52:	0003      	movs	r3, r0
   1ac54:	0018      	movs	r0, r3
   1ac56:	4b23      	ldr	r3, [pc, #140]	; (1ace4 <uiTraceStart+0x100>)
   1ac58:	4798      	blx	r3
   1ac5a:	0003      	movs	r3, r0
   1ac5c:	001a      	movs	r2, r3
   1ac5e:	2317      	movs	r3, #23
   1ac60:	18fb      	adds	r3, r7, r3
   1ac62:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1ac64:	2317      	movs	r3, #23
   1ac66:	18fb      	adds	r3, r7, r3
   1ac68:	781b      	ldrb	r3, [r3, #0]
   1ac6a:	2b00      	cmp	r3, #0
   1ac6c:	d116      	bne.n	1ac9c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1ac6e:	2317      	movs	r3, #23
   1ac70:	18fc      	adds	r4, r7, r3
   1ac72:	2003      	movs	r0, #3
   1ac74:	4b1c      	ldr	r3, [pc, #112]	; (1ace8 <uiTraceStart+0x104>)
   1ac76:	4798      	blx	r3
   1ac78:	0003      	movs	r3, r0
   1ac7a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1ac7c:	4a1b      	ldr	r2, [pc, #108]	; (1acec <uiTraceStart+0x108>)
   1ac7e:	2317      	movs	r3, #23
   1ac80:	18fb      	adds	r3, r7, r3
   1ac82:	781b      	ldrb	r3, [r3, #0]
   1ac84:	0019      	movs	r1, r3
   1ac86:	2003      	movs	r0, #3
   1ac88:	4b19      	ldr	r3, [pc, #100]	; (1acf0 <uiTraceStart+0x10c>)
   1ac8a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1ac8c:	2317      	movs	r3, #23
   1ac8e:	18fb      	adds	r3, r7, r3
   1ac90:	781b      	ldrb	r3, [r3, #0]
   1ac92:	2200      	movs	r2, #0
   1ac94:	0019      	movs	r1, r3
   1ac96:	2003      	movs	r0, #3
   1ac98:	4b16      	ldr	r3, [pc, #88]	; (1acf4 <uiTraceStart+0x110>)
   1ac9a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1ac9c:	2317      	movs	r3, #23
   1ac9e:	18fb      	adds	r3, r7, r3
   1aca0:	781b      	ldrb	r3, [r3, #0]
   1aca2:	0018      	movs	r0, r3
   1aca4:	4b14      	ldr	r3, [pc, #80]	; (1acf8 <uiTraceStart+0x114>)
   1aca6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1aca8:	4b0c      	ldr	r3, [pc, #48]	; (1acdc <uiTraceStart+0xf8>)
   1acaa:	681b      	ldr	r3, [r3, #0]
   1acac:	1e5a      	subs	r2, r3, #1
   1acae:	4b0b      	ldr	r3, [pc, #44]	; (1acdc <uiTraceStart+0xf8>)
   1acb0:	601a      	str	r2, [r3, #0]
   1acb2:	693b      	ldr	r3, [r7, #16]
   1acb4:	607b      	str	r3, [r7, #4]
   1acb6:	687b      	ldr	r3, [r7, #4]
   1acb8:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1acbc:	4b03      	ldr	r3, [pc, #12]	; (1accc <uiTraceStart+0xe8>)
   1acbe:	681b      	ldr	r3, [r3, #0]
   1acc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1acc2:	0018      	movs	r0, r3
   1acc4:	46bd      	mov	sp, r7
   1acc6:	b007      	add	sp, #28
   1acc8:	bd90      	pop	{r4, r7, pc}
   1acca:	46c0      	nop			; (mov r8, r8)
   1accc:	20000c98 	.word	0x20000c98
   1acd0:	0003a4d4 	.word	0x0003a4d4
   1acd4:	0001be4d 	.word	0x0001be4d
   1acd8:	20000bf8 	.word	0x20000bf8
   1acdc:	20000bf0 	.word	0x20000bf0
   1ace0:	0001a84d 	.word	0x0001a84d
   1ace4:	0001a591 	.word	0x0001a591
   1ace8:	0001bb31 	.word	0x0001bb31
   1acec:	0003a518 	.word	0x0003a518
   1acf0:	0001bd61 	.word	0x0001bd61
   1acf4:	0001b4c5 	.word	0x0001b4c5
   1acf8:	0001b3ad 	.word	0x0001b3ad

0001acfc <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1acfc:	b580      	push	{r7, lr}
   1acfe:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1ad00:	4b02      	ldr	r3, [pc, #8]	; (1ad0c <vTraceStart+0x10>)
   1ad02:	4798      	blx	r3
}
   1ad04:	46c0      	nop			; (mov r8, r8)
   1ad06:	46bd      	mov	sp, r7
   1ad08:	bd80      	pop	{r7, pc}
   1ad0a:	46c0      	nop			; (mov r8, r8)
   1ad0c:	0001abe5 	.word	0x0001abe5

0001ad10 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   1ad10:	b580      	push	{r7, lr}
   1ad12:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1ad14:	4b08      	ldr	r3, [pc, #32]	; (1ad38 <vTraceStop+0x28>)
   1ad16:	681b      	ldr	r3, [r3, #0]
   1ad18:	2b00      	cmp	r3, #0
   1ad1a:	d003      	beq.n	1ad24 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1ad1c:	4b06      	ldr	r3, [pc, #24]	; (1ad38 <vTraceStop+0x28>)
   1ad1e:	681b      	ldr	r3, [r3, #0]
   1ad20:	2200      	movs	r2, #0
   1ad22:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1ad24:	4b05      	ldr	r3, [pc, #20]	; (1ad3c <vTraceStop+0x2c>)
   1ad26:	681b      	ldr	r3, [r3, #0]
   1ad28:	2b00      	cmp	r3, #0
   1ad2a:	d002      	beq.n	1ad32 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1ad2c:	4b03      	ldr	r3, [pc, #12]	; (1ad3c <vTraceStop+0x2c>)
   1ad2e:	681b      	ldr	r3, [r3, #0]
   1ad30:	4798      	blx	r3
	}
}
   1ad32:	46c0      	nop			; (mov r8, r8)
   1ad34:	46bd      	mov	sp, r7
   1ad36:	bd80      	pop	{r7, pc}
   1ad38:	20000c98 	.word	0x20000c98
   1ad3c:	20000c00 	.word	0x20000c00

0001ad40 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1ad40:	b580      	push	{r7, lr}
   1ad42:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1ad44:	4b05      	ldr	r3, [pc, #20]	; (1ad5c <xTraceIsRecordingEnabled+0x1c>)
   1ad46:	681b      	ldr	r3, [r3, #0]
   1ad48:	2b00      	cmp	r3, #0
   1ad4a:	d003      	beq.n	1ad54 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1ad4c:	4b03      	ldr	r3, [pc, #12]	; (1ad5c <xTraceIsRecordingEnabled+0x1c>)
   1ad4e:	681b      	ldr	r3, [r3, #0]
   1ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ad52:	e000      	b.n	1ad56 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1ad54:	2300      	movs	r3, #0
	}
}
   1ad56:	0018      	movs	r0, r3
   1ad58:	46bd      	mov	sp, r7
   1ad5a:	bd80      	pop	{r7, pc}
   1ad5c:	20000c98 	.word	0x20000c98

0001ad60 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1ad60:	b590      	push	{r4, r7, lr}
   1ad62:	b089      	sub	sp, #36	; 0x24
   1ad64:	af00      	add	r7, sp, #0
   1ad66:	0002      	movs	r2, r0
   1ad68:	1dfb      	adds	r3, r7, #7
   1ad6a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1ad6c:	1dfb      	adds	r3, r7, #7
   1ad6e:	781b      	ldrb	r3, [r3, #0]
   1ad70:	2b00      	cmp	r3, #0
   1ad72:	d057      	beq.n	1ae24 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1ad74:	4b2e      	ldr	r3, [pc, #184]	; (1ae30 <prvTraceStoreTaskReady+0xd0>)
   1ad76:	681b      	ldr	r3, [r3, #0]
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	d055      	beq.n	1ae28 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1ad7c:	1dfb      	adds	r3, r7, #7
   1ad7e:	781b      	ldrb	r3, [r3, #0]
   1ad80:	2b0f      	cmp	r3, #15
   1ad82:	d904      	bls.n	1ad8e <prvTraceStoreTaskReady+0x2e>
   1ad84:	4b2b      	ldr	r3, [pc, #172]	; (1ae34 <prvTraceStoreTaskReady+0xd4>)
   1ad86:	0018      	movs	r0, r3
   1ad88:	4b2b      	ldr	r3, [pc, #172]	; (1ae38 <prvTraceStoreTaskReady+0xd8>)
   1ad8a:	4798      	blx	r3
   1ad8c:	e04d      	b.n	1ae2a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1ad8e:	4b2b      	ldr	r3, [pc, #172]	; (1ae3c <prvTraceStoreTaskReady+0xdc>)
   1ad90:	681b      	ldr	r3, [r3, #0]
   1ad92:	2b00      	cmp	r3, #0
   1ad94:	d004      	beq.n	1ada0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1ad96:	4b2a      	ldr	r3, [pc, #168]	; (1ae40 <prvTraceStoreTaskReady+0xe0>)
   1ad98:	0018      	movs	r0, r3
   1ad9a:	4b27      	ldr	r3, [pc, #156]	; (1ae38 <prvTraceStoreTaskReady+0xd8>)
   1ad9c:	4798      	blx	r3
		return;
   1ad9e:	e044      	b.n	1ae2a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ada0:	f3ef 8310 	mrs	r3, PRIMASK
   1ada4:	60fb      	str	r3, [r7, #12]
  return(result);
   1ada6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1ada8:	61fb      	str	r3, [r7, #28]
   1adaa:	2301      	movs	r3, #1
   1adac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1adae:	693b      	ldr	r3, [r7, #16]
   1adb0:	f383 8810 	msr	PRIMASK, r3
   1adb4:	4b21      	ldr	r3, [pc, #132]	; (1ae3c <prvTraceStoreTaskReady+0xdc>)
   1adb6:	681b      	ldr	r3, [r3, #0]
   1adb8:	1c5a      	adds	r2, r3, #1
   1adba:	4b20      	ldr	r3, [pc, #128]	; (1ae3c <prvTraceStoreTaskReady+0xdc>)
   1adbc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1adbe:	4b21      	ldr	r3, [pc, #132]	; (1ae44 <prvTraceStoreTaskReady+0xe4>)
   1adc0:	681b      	ldr	r3, [r3, #0]
   1adc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1adc4:	2b00      	cmp	r3, #0
   1adc6:	d022      	beq.n	1ae0e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1adc8:	231a      	movs	r3, #26
   1adca:	18fc      	adds	r4, r7, r3
   1adcc:	4b1e      	ldr	r3, [pc, #120]	; (1ae48 <prvTraceStoreTaskReady+0xe8>)
   1adce:	0018      	movs	r0, r3
   1add0:	4b1e      	ldr	r3, [pc, #120]	; (1ae4c <prvTraceStoreTaskReady+0xec>)
   1add2:	4798      	blx	r3
   1add4:	0003      	movs	r3, r0
   1add6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1add8:	2319      	movs	r3, #25
   1adda:	18fb      	adds	r3, r7, r3
   1addc:	1dfa      	adds	r2, r7, #7
   1adde:	7812      	ldrb	r2, [r2, #0]
   1ade0:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1ade2:	4b1b      	ldr	r3, [pc, #108]	; (1ae50 <prvTraceStoreTaskReady+0xf0>)
   1ade4:	4798      	blx	r3
   1ade6:	0003      	movs	r3, r0
   1ade8:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1adea:	697b      	ldr	r3, [r7, #20]
   1adec:	2b00      	cmp	r3, #0
   1adee:	d00e      	beq.n	1ae0e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1adf0:	697b      	ldr	r3, [r7, #20]
   1adf2:	2202      	movs	r2, #2
   1adf4:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1adf6:	697b      	ldr	r3, [r7, #20]
   1adf8:	221a      	movs	r2, #26
   1adfa:	18ba      	adds	r2, r7, r2
   1adfc:	8812      	ldrh	r2, [r2, #0]
   1adfe:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1ae00:	697b      	ldr	r3, [r7, #20]
   1ae02:	2219      	movs	r2, #25
   1ae04:	18ba      	adds	r2, r7, r2
   1ae06:	7812      	ldrb	r2, [r2, #0]
   1ae08:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1ae0a:	4b12      	ldr	r3, [pc, #72]	; (1ae54 <prvTraceStoreTaskReady+0xf4>)
   1ae0c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1ae0e:	4b0b      	ldr	r3, [pc, #44]	; (1ae3c <prvTraceStoreTaskReady+0xdc>)
   1ae10:	681b      	ldr	r3, [r3, #0]
   1ae12:	1e5a      	subs	r2, r3, #1
   1ae14:	4b09      	ldr	r3, [pc, #36]	; (1ae3c <prvTraceStoreTaskReady+0xdc>)
   1ae16:	601a      	str	r2, [r3, #0]
   1ae18:	69fb      	ldr	r3, [r7, #28]
   1ae1a:	60bb      	str	r3, [r7, #8]
   1ae1c:	68bb      	ldr	r3, [r7, #8]
   1ae1e:	f383 8810 	msr	PRIMASK, r3
   1ae22:	e002      	b.n	1ae2a <prvTraceStoreTaskReady+0xca>
		return;
   1ae24:	46c0      	nop			; (mov r8, r8)
   1ae26:	e000      	b.n	1ae2a <prvTraceStoreTaskReady+0xca>
		return;
   1ae28:	46c0      	nop			; (mov r8, r8)
}
   1ae2a:	46bd      	mov	sp, r7
   1ae2c:	b009      	add	sp, #36	; 0x24
   1ae2e:	bd90      	pop	{r4, r7, pc}
   1ae30:	20000114 	.word	0x20000114
   1ae34:	0003a880 	.word	0x0003a880
   1ae38:	0001be4d 	.word	0x0001be4d
   1ae3c:	20000bf0 	.word	0x20000bf0
   1ae40:	0003a8c0 	.word	0x0003a8c0
   1ae44:	20000c98 	.word	0x20000c98
   1ae48:	0000ffff 	.word	0x0000ffff
   1ae4c:	0001c061 	.word	0x0001c061
   1ae50:	0001ba05 	.word	0x0001ba05
   1ae54:	0001c009 	.word	0x0001c009

0001ae58 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1ae58:	b580      	push	{r7, lr}
   1ae5a:	b08e      	sub	sp, #56	; 0x38
   1ae5c:	af00      	add	r7, sp, #0
   1ae5e:	60f8      	str	r0, [r7, #12]
   1ae60:	60b9      	str	r1, [r7, #8]
   1ae62:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1ae64:	4b48      	ldr	r3, [pc, #288]	; (1af88 <vTraceStoreMemMangEvent+0x130>)
   1ae66:	681b      	ldr	r3, [r3, #0]
   1ae68:	2b00      	cmp	r3, #0
   1ae6a:	d100      	bne.n	1ae6e <vTraceStoreMemMangEvent+0x16>
   1ae6c:	e088      	b.n	1af80 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1ae6e:	687b      	ldr	r3, [r7, #4]
   1ae70:	2b00      	cmp	r3, #0
   1ae72:	da03      	bge.n	1ae7c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1ae74:	687b      	ldr	r3, [r7, #4]
   1ae76:	425b      	negs	r3, r3
   1ae78:	637b      	str	r3, [r7, #52]	; 0x34
   1ae7a:	e001      	b.n	1ae80 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1ae7c:	687b      	ldr	r3, [r7, #4]
   1ae7e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ae80:	f3ef 8310 	mrs	r3, PRIMASK
   1ae84:	61bb      	str	r3, [r7, #24]
  return(result);
   1ae86:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1ae88:	633b      	str	r3, [r7, #48]	; 0x30
   1ae8a:	2301      	movs	r3, #1
   1ae8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ae8e:	69fb      	ldr	r3, [r7, #28]
   1ae90:	f383 8810 	msr	PRIMASK, r3
   1ae94:	4b3d      	ldr	r3, [pc, #244]	; (1af8c <vTraceStoreMemMangEvent+0x134>)
   1ae96:	681b      	ldr	r3, [r3, #0]
   1ae98:	1c5a      	adds	r2, r3, #1
   1ae9a:	4b3c      	ldr	r3, [pc, #240]	; (1af8c <vTraceStoreMemMangEvent+0x134>)
   1ae9c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1ae9e:	68bb      	ldr	r3, [r7, #8]
   1aea0:	2b00      	cmp	r3, #0
   1aea2:	d005      	beq.n	1aeb0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1aea4:	4b3a      	ldr	r3, [pc, #232]	; (1af90 <vTraceStoreMemMangEvent+0x138>)
   1aea6:	681a      	ldr	r2, [r3, #0]
   1aea8:	687b      	ldr	r3, [r7, #4]
   1aeaa:	18d2      	adds	r2, r2, r3
   1aeac:	4b38      	ldr	r3, [pc, #224]	; (1af90 <vTraceStoreMemMangEvent+0x138>)
   1aeae:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   1aeb0:	4b35      	ldr	r3, [pc, #212]	; (1af88 <vTraceStoreMemMangEvent+0x130>)
   1aeb2:	681b      	ldr	r3, [r3, #0]
   1aeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aeb6:	2b00      	cmp	r3, #0
   1aeb8:	d057      	beq.n	1af6a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1aeba:	20ff      	movs	r0, #255	; 0xff
   1aebc:	4b35      	ldr	r3, [pc, #212]	; (1af94 <vTraceStoreMemMangEvent+0x13c>)
   1aebe:	4798      	blx	r3
   1aec0:	0003      	movs	r3, r0
   1aec2:	001a      	movs	r2, r3
   1aec4:	232f      	movs	r3, #47	; 0x2f
   1aec6:	18fb      	adds	r3, r7, r3
   1aec8:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1aeca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1aecc:	4a32      	ldr	r2, [pc, #200]	; (1af98 <vTraceStoreMemMangEvent+0x140>)
   1aece:	0019      	movs	r1, r3
   1aed0:	0010      	movs	r0, r2
   1aed2:	4b32      	ldr	r3, [pc, #200]	; (1af9c <vTraceStoreMemMangEvent+0x144>)
   1aed4:	4798      	blx	r3
   1aed6:	0002      	movs	r2, r0
   1aed8:	232c      	movs	r3, #44	; 0x2c
   1aeda:	18fb      	adds	r3, r7, r3
   1aedc:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1aede:	4b30      	ldr	r3, [pc, #192]	; (1afa0 <vTraceStoreMemMangEvent+0x148>)
   1aee0:	4798      	blx	r3
   1aee2:	0003      	movs	r3, r0
   1aee4:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aee8:	2b00      	cmp	r3, #0
   1aeea:	d03e      	beq.n	1af6a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aeee:	222f      	movs	r2, #47	; 0x2f
   1aef0:	18ba      	adds	r2, r7, r2
   1aef2:	7812      	ldrb	r2, [r2, #0]
   1aef4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aef8:	2200      	movs	r2, #0
   1aefa:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aefe:	222c      	movs	r2, #44	; 0x2c
   1af00:	18ba      	adds	r2, r7, r2
   1af02:	8812      	ldrh	r2, [r2, #0]
   1af04:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1af06:	4b27      	ldr	r3, [pc, #156]	; (1afa4 <vTraceStoreMemMangEvent+0x14c>)
   1af08:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1af0a:	68bb      	ldr	r3, [r7, #8]
   1af0c:	4a22      	ldr	r2, [pc, #136]	; (1af98 <vTraceStoreMemMangEvent+0x140>)
   1af0e:	0019      	movs	r1, r3
   1af10:	0010      	movs	r0, r2
   1af12:	4b22      	ldr	r3, [pc, #136]	; (1af9c <vTraceStoreMemMangEvent+0x144>)
   1af14:	4798      	blx	r3
   1af16:	0002      	movs	r2, r0
   1af18:	2326      	movs	r3, #38	; 0x26
   1af1a:	18fb      	adds	r3, r7, r3
   1af1c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1af1e:	2325      	movs	r3, #37	; 0x25
   1af20:	18fb      	adds	r3, r7, r3
   1af22:	2200      	movs	r2, #0
   1af24:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1af26:	4b1e      	ldr	r3, [pc, #120]	; (1afa0 <vTraceStoreMemMangEvent+0x148>)
   1af28:	4798      	blx	r3
   1af2a:	0003      	movs	r3, r0
   1af2c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1af2e:	6a3b      	ldr	r3, [r7, #32]
   1af30:	2b00      	cmp	r3, #0
   1af32:	d01a      	beq.n	1af6a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1af34:	6a3b      	ldr	r3, [r7, #32]
   1af36:	2226      	movs	r2, #38	; 0x26
   1af38:	18ba      	adds	r2, r7, r2
   1af3a:	8812      	ldrh	r2, [r2, #0]
   1af3c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1af3e:	6a3b      	ldr	r3, [r7, #32]
   1af40:	2225      	movs	r2, #37	; 0x25
   1af42:	18ba      	adds	r2, r7, r2
   1af44:	7812      	ldrb	r2, [r2, #0]
   1af46:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1af48:	68fb      	ldr	r3, [r7, #12]
   1af4a:	b2db      	uxtb	r3, r3
   1af4c:	3301      	adds	r3, #1
   1af4e:	b2da      	uxtb	r2, r3
   1af50:	6a3b      	ldr	r3, [r7, #32]
   1af52:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1af54:	68fb      	ldr	r3, [r7, #12]
   1af56:	b2da      	uxtb	r2, r3
   1af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af5a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1af5c:	4b11      	ldr	r3, [pc, #68]	; (1afa4 <vTraceStoreMemMangEvent+0x14c>)
   1af5e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1af60:	4b09      	ldr	r3, [pc, #36]	; (1af88 <vTraceStoreMemMangEvent+0x130>)
   1af62:	681b      	ldr	r3, [r3, #0]
   1af64:	4a0a      	ldr	r2, [pc, #40]	; (1af90 <vTraceStoreMemMangEvent+0x138>)
   1af66:	6812      	ldr	r2, [r2, #0]
   1af68:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1af6a:	4b08      	ldr	r3, [pc, #32]	; (1af8c <vTraceStoreMemMangEvent+0x134>)
   1af6c:	681b      	ldr	r3, [r3, #0]
   1af6e:	1e5a      	subs	r2, r3, #1
   1af70:	4b06      	ldr	r3, [pc, #24]	; (1af8c <vTraceStoreMemMangEvent+0x134>)
   1af72:	601a      	str	r2, [r3, #0]
   1af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1af76:	617b      	str	r3, [r7, #20]
   1af78:	697b      	ldr	r3, [r7, #20]
   1af7a:	f383 8810 	msr	PRIMASK, r3
   1af7e:	e000      	b.n	1af82 <vTraceStoreMemMangEvent+0x12a>
		return;
   1af80:	46c0      	nop			; (mov r8, r8)
}
   1af82:	46bd      	mov	sp, r7
   1af84:	b00e      	add	sp, #56	; 0x38
   1af86:	bd80      	pop	{r7, pc}
   1af88:	20000c98 	.word	0x20000c98
   1af8c:	20000bf0 	.word	0x20000bf0
   1af90:	20000c04 	.word	0x20000c04
   1af94:	0001c061 	.word	0x0001c061
   1af98:	0000ffff 	.word	0x0000ffff
   1af9c:	0001b225 	.word	0x0001b225
   1afa0:	0001ba05 	.word	0x0001ba05
   1afa4:	0001c009 	.word	0x0001c009

0001afa8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1afa8:	b590      	push	{r4, r7, lr}
   1afaa:	b08b      	sub	sp, #44	; 0x2c
   1afac:	af00      	add	r7, sp, #0
   1afae:	60f8      	str	r0, [r7, #12]
   1afb0:	607a      	str	r2, [r7, #4]
   1afb2:	230b      	movs	r3, #11
   1afb4:	18fb      	adds	r3, r7, r3
   1afb6:	1c0a      	adds	r2, r1, #0
   1afb8:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1afba:	68fb      	ldr	r3, [r7, #12]
   1afbc:	2bfe      	cmp	r3, #254	; 0xfe
   1afbe:	d904      	bls.n	1afca <prvTraceStoreKernelCall+0x22>
   1afc0:	4b39      	ldr	r3, [pc, #228]	; (1b0a8 <prvTraceStoreKernelCall+0x100>)
   1afc2:	0018      	movs	r0, r3
   1afc4:	4b39      	ldr	r3, [pc, #228]	; (1b0ac <prvTraceStoreKernelCall+0x104>)
   1afc6:	4798      	blx	r3
   1afc8:	e06b      	b.n	1b0a2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1afca:	230b      	movs	r3, #11
   1afcc:	18fb      	adds	r3, r7, r3
   1afce:	781b      	ldrb	r3, [r3, #0]
   1afd0:	2b08      	cmp	r3, #8
   1afd2:	d904      	bls.n	1afde <prvTraceStoreKernelCall+0x36>
   1afd4:	4b36      	ldr	r3, [pc, #216]	; (1b0b0 <prvTraceStoreKernelCall+0x108>)
   1afd6:	0018      	movs	r0, r3
   1afd8:	4b34      	ldr	r3, [pc, #208]	; (1b0ac <prvTraceStoreKernelCall+0x104>)
   1afda:	4798      	blx	r3
   1afdc:	e061      	b.n	1b0a2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1afde:	4b35      	ldr	r3, [pc, #212]	; (1b0b4 <prvTraceStoreKernelCall+0x10c>)
   1afe0:	681a      	ldr	r2, [r3, #0]
   1afe2:	230b      	movs	r3, #11
   1afe4:	18fb      	adds	r3, r7, r3
   1afe6:	781b      	ldrb	r3, [r3, #0]
   1afe8:	2164      	movs	r1, #100	; 0x64
   1afea:	18d3      	adds	r3, r2, r3
   1afec:	185b      	adds	r3, r3, r1
   1afee:	781b      	ldrb	r3, [r3, #0]
   1aff0:	001a      	movs	r2, r3
   1aff2:	687b      	ldr	r3, [r7, #4]
   1aff4:	429a      	cmp	r2, r3
   1aff6:	d204      	bcs.n	1b002 <prvTraceStoreKernelCall+0x5a>
   1aff8:	4b2f      	ldr	r3, [pc, #188]	; (1b0b8 <prvTraceStoreKernelCall+0x110>)
   1affa:	0018      	movs	r0, r3
   1affc:	4b2b      	ldr	r3, [pc, #172]	; (1b0ac <prvTraceStoreKernelCall+0x104>)
   1affe:	4798      	blx	r3
   1b000:	e04f      	b.n	1b0a2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1b002:	4b2e      	ldr	r3, [pc, #184]	; (1b0bc <prvTraceStoreKernelCall+0x114>)
   1b004:	681b      	ldr	r3, [r3, #0]
   1b006:	2b00      	cmp	r3, #0
   1b008:	d004      	beq.n	1b014 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1b00a:	4b2d      	ldr	r3, [pc, #180]	; (1b0c0 <prvTraceStoreKernelCall+0x118>)
   1b00c:	0018      	movs	r0, r3
   1b00e:	4b27      	ldr	r3, [pc, #156]	; (1b0ac <prvTraceStoreKernelCall+0x104>)
   1b010:	4798      	blx	r3
		return;
   1b012:	e046      	b.n	1b0a2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1b014:	4b2b      	ldr	r3, [pc, #172]	; (1b0c4 <prvTraceStoreKernelCall+0x11c>)
   1b016:	781b      	ldrb	r3, [r3, #0]
   1b018:	2b00      	cmp	r3, #0
   1b01a:	d041      	beq.n	1b0a0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b01c:	f3ef 8310 	mrs	r3, PRIMASK
   1b020:	617b      	str	r3, [r7, #20]
  return(result);
   1b022:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1b024:	627b      	str	r3, [r7, #36]	; 0x24
   1b026:	2301      	movs	r3, #1
   1b028:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b02a:	69bb      	ldr	r3, [r7, #24]
   1b02c:	f383 8810 	msr	PRIMASK, r3
   1b030:	4b22      	ldr	r3, [pc, #136]	; (1b0bc <prvTraceStoreKernelCall+0x114>)
   1b032:	681b      	ldr	r3, [r3, #0]
   1b034:	1c5a      	adds	r2, r3, #1
   1b036:	4b21      	ldr	r3, [pc, #132]	; (1b0bc <prvTraceStoreKernelCall+0x114>)
   1b038:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1b03a:	4b1e      	ldr	r3, [pc, #120]	; (1b0b4 <prvTraceStoreKernelCall+0x10c>)
   1b03c:	681b      	ldr	r3, [r3, #0]
   1b03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b040:	2b00      	cmp	r3, #0
   1b042:	d022      	beq.n	1b08a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b044:	2322      	movs	r3, #34	; 0x22
   1b046:	18fc      	adds	r4, r7, r3
   1b048:	4b1f      	ldr	r3, [pc, #124]	; (1b0c8 <prvTraceStoreKernelCall+0x120>)
   1b04a:	0018      	movs	r0, r3
   1b04c:	4b1f      	ldr	r3, [pc, #124]	; (1b0cc <prvTraceStoreKernelCall+0x124>)
   1b04e:	4798      	blx	r3
   1b050:	0003      	movs	r3, r0
   1b052:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1b054:	2321      	movs	r3, #33	; 0x21
   1b056:	18fb      	adds	r3, r7, r3
   1b058:	687a      	ldr	r2, [r7, #4]
   1b05a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1b05c:	4b1c      	ldr	r3, [pc, #112]	; (1b0d0 <prvTraceStoreKernelCall+0x128>)
   1b05e:	4798      	blx	r3
   1b060:	0003      	movs	r3, r0
   1b062:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1b064:	69fb      	ldr	r3, [r7, #28]
   1b066:	2b00      	cmp	r3, #0
   1b068:	d00f      	beq.n	1b08a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1b06a:	69fb      	ldr	r3, [r7, #28]
   1b06c:	2222      	movs	r2, #34	; 0x22
   1b06e:	18ba      	adds	r2, r7, r2
   1b070:	8812      	ldrh	r2, [r2, #0]
   1b072:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1b074:	68fb      	ldr	r3, [r7, #12]
   1b076:	b2da      	uxtb	r2, r3
   1b078:	69fb      	ldr	r3, [r7, #28]
   1b07a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1b07c:	69fb      	ldr	r3, [r7, #28]
   1b07e:	2221      	movs	r2, #33	; 0x21
   1b080:	18ba      	adds	r2, r7, r2
   1b082:	7812      	ldrb	r2, [r2, #0]
   1b084:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1b086:	4b13      	ldr	r3, [pc, #76]	; (1b0d4 <prvTraceStoreKernelCall+0x12c>)
   1b088:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b08a:	4b0c      	ldr	r3, [pc, #48]	; (1b0bc <prvTraceStoreKernelCall+0x114>)
   1b08c:	681b      	ldr	r3, [r3, #0]
   1b08e:	1e5a      	subs	r2, r3, #1
   1b090:	4b0a      	ldr	r3, [pc, #40]	; (1b0bc <prvTraceStoreKernelCall+0x114>)
   1b092:	601a      	str	r2, [r3, #0]
   1b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b096:	613b      	str	r3, [r7, #16]
   1b098:	693b      	ldr	r3, [r7, #16]
   1b09a:	f383 8810 	msr	PRIMASK, r3
   1b09e:	e000      	b.n	1b0a2 <prvTraceStoreKernelCall+0xfa>
		return;
   1b0a0:	46c0      	nop			; (mov r8, r8)
}
   1b0a2:	46bd      	mov	sp, r7
   1b0a4:	b00b      	add	sp, #44	; 0x2c
   1b0a6:	bd90      	pop	{r4, r7, pc}
   1b0a8:	0003a930 	.word	0x0003a930
   1b0ac:	0001be4d 	.word	0x0001be4d
   1b0b0:	0003a968 	.word	0x0003a968
   1b0b4:	20000c98 	.word	0x20000c98
   1b0b8:	0003a9b0 	.word	0x0003a9b0
   1b0bc:	20000bf0 	.word	0x20000bf0
   1b0c0:	0003a9f8 	.word	0x0003a9f8
   1b0c4:	20000bfc 	.word	0x20000bfc
   1b0c8:	0000ffff 	.word	0x0000ffff
   1b0cc:	0001c061 	.word	0x0001c061
   1b0d0:	0001ba05 	.word	0x0001ba05
   1b0d4:	0001c009 	.word	0x0001c009

0001b0d8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1b0d8:	b580      	push	{r7, lr}
   1b0da:	b08a      	sub	sp, #40	; 0x28
   1b0dc:	af00      	add	r7, sp, #0
   1b0de:	60f8      	str	r0, [r7, #12]
   1b0e0:	607a      	str	r2, [r7, #4]
   1b0e2:	603b      	str	r3, [r7, #0]
   1b0e4:	230b      	movs	r3, #11
   1b0e6:	18fb      	adds	r3, r7, r3
   1b0e8:	1c0a      	adds	r2, r1, #0
   1b0ea:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1b0ec:	68fb      	ldr	r3, [r7, #12]
   1b0ee:	2bfe      	cmp	r3, #254	; 0xfe
   1b0f0:	d904      	bls.n	1b0fc <prvTraceStoreKernelCallWithParam+0x24>
   1b0f2:	4b40      	ldr	r3, [pc, #256]	; (1b1f4 <prvTraceStoreKernelCallWithParam+0x11c>)
   1b0f4:	0018      	movs	r0, r3
   1b0f6:	4b40      	ldr	r3, [pc, #256]	; (1b1f8 <prvTraceStoreKernelCallWithParam+0x120>)
   1b0f8:	4798      	blx	r3
   1b0fa:	e077      	b.n	1b1ec <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1b0fc:	230b      	movs	r3, #11
   1b0fe:	18fb      	adds	r3, r7, r3
   1b100:	781b      	ldrb	r3, [r3, #0]
   1b102:	2b08      	cmp	r3, #8
   1b104:	d904      	bls.n	1b110 <prvTraceStoreKernelCallWithParam+0x38>
   1b106:	4b3d      	ldr	r3, [pc, #244]	; (1b1fc <prvTraceStoreKernelCallWithParam+0x124>)
   1b108:	0018      	movs	r0, r3
   1b10a:	4b3b      	ldr	r3, [pc, #236]	; (1b1f8 <prvTraceStoreKernelCallWithParam+0x120>)
   1b10c:	4798      	blx	r3
   1b10e:	e06d      	b.n	1b1ec <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1b110:	4b3b      	ldr	r3, [pc, #236]	; (1b200 <prvTraceStoreKernelCallWithParam+0x128>)
   1b112:	681a      	ldr	r2, [r3, #0]
   1b114:	230b      	movs	r3, #11
   1b116:	18fb      	adds	r3, r7, r3
   1b118:	781b      	ldrb	r3, [r3, #0]
   1b11a:	2164      	movs	r1, #100	; 0x64
   1b11c:	18d3      	adds	r3, r2, r3
   1b11e:	185b      	adds	r3, r3, r1
   1b120:	781b      	ldrb	r3, [r3, #0]
   1b122:	001a      	movs	r2, r3
   1b124:	687b      	ldr	r3, [r7, #4]
   1b126:	429a      	cmp	r2, r3
   1b128:	d204      	bcs.n	1b134 <prvTraceStoreKernelCallWithParam+0x5c>
   1b12a:	4b36      	ldr	r3, [pc, #216]	; (1b204 <prvTraceStoreKernelCallWithParam+0x12c>)
   1b12c:	0018      	movs	r0, r3
   1b12e:	4b32      	ldr	r3, [pc, #200]	; (1b1f8 <prvTraceStoreKernelCallWithParam+0x120>)
   1b130:	4798      	blx	r3
   1b132:	e05b      	b.n	1b1ec <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1b134:	4b34      	ldr	r3, [pc, #208]	; (1b208 <prvTraceStoreKernelCallWithParam+0x130>)
   1b136:	681b      	ldr	r3, [r3, #0]
   1b138:	2b00      	cmp	r3, #0
   1b13a:	d004      	beq.n	1b146 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1b13c:	4b33      	ldr	r3, [pc, #204]	; (1b20c <prvTraceStoreKernelCallWithParam+0x134>)
   1b13e:	0018      	movs	r0, r3
   1b140:	4b2d      	ldr	r3, [pc, #180]	; (1b1f8 <prvTraceStoreKernelCallWithParam+0x120>)
   1b142:	4798      	blx	r3
		return;
   1b144:	e052      	b.n	1b1ec <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b146:	f3ef 8310 	mrs	r3, PRIMASK
   1b14a:	617b      	str	r3, [r7, #20]
  return(result);
   1b14c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b14e:	627b      	str	r3, [r7, #36]	; 0x24
   1b150:	2301      	movs	r3, #1
   1b152:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b154:	69bb      	ldr	r3, [r7, #24]
   1b156:	f383 8810 	msr	PRIMASK, r3
   1b15a:	4b2b      	ldr	r3, [pc, #172]	; (1b208 <prvTraceStoreKernelCallWithParam+0x130>)
   1b15c:	681b      	ldr	r3, [r3, #0]
   1b15e:	1c5a      	adds	r2, r3, #1
   1b160:	4b29      	ldr	r3, [pc, #164]	; (1b208 <prvTraceStoreKernelCallWithParam+0x130>)
   1b162:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1b164:	4b26      	ldr	r3, [pc, #152]	; (1b200 <prvTraceStoreKernelCallWithParam+0x128>)
   1b166:	681b      	ldr	r3, [r3, #0]
   1b168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b16a:	2b00      	cmp	r3, #0
   1b16c:	d034      	beq.n	1b1d8 <prvTraceStoreKernelCallWithParam+0x100>
   1b16e:	4b28      	ldr	r3, [pc, #160]	; (1b210 <prvTraceStoreKernelCallWithParam+0x138>)
   1b170:	781b      	ldrb	r3, [r3, #0]
   1b172:	2b00      	cmp	r3, #0
   1b174:	d030      	beq.n	1b1d8 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1b176:	20ff      	movs	r0, #255	; 0xff
   1b178:	4b26      	ldr	r3, [pc, #152]	; (1b214 <prvTraceStoreKernelCallWithParam+0x13c>)
   1b17a:	4798      	blx	r3
   1b17c:	0003      	movs	r3, r0
   1b17e:	001a      	movs	r2, r3
   1b180:	2323      	movs	r3, #35	; 0x23
   1b182:	18fb      	adds	r3, r7, r3
   1b184:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1b186:	683b      	ldr	r3, [r7, #0]
   1b188:	0019      	movs	r1, r3
   1b18a:	20ff      	movs	r0, #255	; 0xff
   1b18c:	4b22      	ldr	r3, [pc, #136]	; (1b218 <prvTraceStoreKernelCallWithParam+0x140>)
   1b18e:	4798      	blx	r3
   1b190:	0002      	movs	r2, r0
   1b192:	2322      	movs	r3, #34	; 0x22
   1b194:	18fb      	adds	r3, r7, r3
   1b196:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1b198:	2321      	movs	r3, #33	; 0x21
   1b19a:	18fb      	adds	r3, r7, r3
   1b19c:	687a      	ldr	r2, [r7, #4]
   1b19e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1b1a0:	4b1e      	ldr	r3, [pc, #120]	; (1b21c <prvTraceStoreKernelCallWithParam+0x144>)
   1b1a2:	4798      	blx	r3
   1b1a4:	0003      	movs	r3, r0
   1b1a6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1b1a8:	69fb      	ldr	r3, [r7, #28]
   1b1aa:	2b00      	cmp	r3, #0
   1b1ac:	d014      	beq.n	1b1d8 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1b1ae:	69fb      	ldr	r3, [r7, #28]
   1b1b0:	2223      	movs	r2, #35	; 0x23
   1b1b2:	18ba      	adds	r2, r7, r2
   1b1b4:	7812      	ldrb	r2, [r2, #0]
   1b1b6:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1b1b8:	68fb      	ldr	r3, [r7, #12]
   1b1ba:	b2da      	uxtb	r2, r3
   1b1bc:	69fb      	ldr	r3, [r7, #28]
   1b1be:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1b1c0:	69fb      	ldr	r3, [r7, #28]
   1b1c2:	2221      	movs	r2, #33	; 0x21
   1b1c4:	18ba      	adds	r2, r7, r2
   1b1c6:	7812      	ldrb	r2, [r2, #0]
   1b1c8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1b1ca:	69fb      	ldr	r3, [r7, #28]
   1b1cc:	2222      	movs	r2, #34	; 0x22
   1b1ce:	18ba      	adds	r2, r7, r2
   1b1d0:	7812      	ldrb	r2, [r2, #0]
   1b1d2:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b1d4:	4b12      	ldr	r3, [pc, #72]	; (1b220 <prvTraceStoreKernelCallWithParam+0x148>)
   1b1d6:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b1d8:	4b0b      	ldr	r3, [pc, #44]	; (1b208 <prvTraceStoreKernelCallWithParam+0x130>)
   1b1da:	681b      	ldr	r3, [r3, #0]
   1b1dc:	1e5a      	subs	r2, r3, #1
   1b1de:	4b0a      	ldr	r3, [pc, #40]	; (1b208 <prvTraceStoreKernelCallWithParam+0x130>)
   1b1e0:	601a      	str	r2, [r3, #0]
   1b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1e4:	613b      	str	r3, [r7, #16]
   1b1e6:	693b      	ldr	r3, [r7, #16]
   1b1e8:	f383 8810 	msr	PRIMASK, r3
}
   1b1ec:	46bd      	mov	sp, r7
   1b1ee:	b00a      	add	sp, #40	; 0x28
   1b1f0:	bd80      	pop	{r7, pc}
   1b1f2:	46c0      	nop			; (mov r8, r8)
   1b1f4:	0003aa30 	.word	0x0003aa30
   1b1f8:	0001be4d 	.word	0x0001be4d
   1b1fc:	0003aa70 	.word	0x0003aa70
   1b200:	20000c98 	.word	0x20000c98
   1b204:	0003aac0 	.word	0x0003aac0
   1b208:	20000bf0 	.word	0x20000bf0
   1b20c:	0003ab10 	.word	0x0003ab10
   1b210:	20000bfc 	.word	0x20000bfc
   1b214:	0001c061 	.word	0x0001c061
   1b218:	0001b225 	.word	0x0001b225
   1b21c:	0001ba05 	.word	0x0001ba05
   1b220:	0001c009 	.word	0x0001c009

0001b224 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1b224:	b580      	push	{r7, lr}
   1b226:	b084      	sub	sp, #16
   1b228:	af00      	add	r7, sp, #0
   1b22a:	6078      	str	r0, [r7, #4]
   1b22c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1b22e:	687b      	ldr	r3, [r7, #4]
   1b230:	2bff      	cmp	r3, #255	; 0xff
   1b232:	d009      	beq.n	1b248 <prvTraceGetParam+0x24>
   1b234:	687b      	ldr	r3, [r7, #4]
   1b236:	4a19      	ldr	r2, [pc, #100]	; (1b29c <prvTraceGetParam+0x78>)
   1b238:	4293      	cmp	r3, r2
   1b23a:	d005      	beq.n	1b248 <prvTraceGetParam+0x24>
   1b23c:	4b18      	ldr	r3, [pc, #96]	; (1b2a0 <prvTraceGetParam+0x7c>)
   1b23e:	0018      	movs	r0, r3
   1b240:	4b18      	ldr	r3, [pc, #96]	; (1b2a4 <prvTraceGetParam+0x80>)
   1b242:	4798      	blx	r3
   1b244:	683b      	ldr	r3, [r7, #0]
   1b246:	e024      	b.n	1b292 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1b248:	683a      	ldr	r2, [r7, #0]
   1b24a:	687b      	ldr	r3, [r7, #4]
   1b24c:	429a      	cmp	r2, r3
   1b24e:	d801      	bhi.n	1b254 <prvTraceGetParam+0x30>
	{
		return param;
   1b250:	683b      	ldr	r3, [r7, #0]
   1b252:	e01e      	b.n	1b292 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1b254:	4b14      	ldr	r3, [pc, #80]	; (1b2a8 <prvTraceGetParam+0x84>)
   1b256:	4798      	blx	r3
   1b258:	0003      	movs	r3, r0
   1b25a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1b25c:	68fb      	ldr	r3, [r7, #12]
   1b25e:	2b00      	cmp	r3, #0
   1b260:	d014      	beq.n	1b28c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1b262:	68fb      	ldr	r3, [r7, #12]
   1b264:	2201      	movs	r2, #1
   1b266:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1b268:	687b      	ldr	r3, [r7, #4]
   1b26a:	43db      	mvns	r3, r3
   1b26c:	683a      	ldr	r2, [r7, #0]
   1b26e:	4013      	ands	r3, r2
   1b270:	0a1b      	lsrs	r3, r3, #8
   1b272:	b2da      	uxtb	r2, r3
   1b274:	68fb      	ldr	r3, [r7, #12]
   1b276:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   1b278:	687b      	ldr	r3, [r7, #4]
   1b27a:	43db      	mvns	r3, r3
   1b27c:	683a      	ldr	r2, [r7, #0]
   1b27e:	4013      	ands	r3, r2
   1b280:	0c1b      	lsrs	r3, r3, #16
   1b282:	b29a      	uxth	r2, r3
   1b284:	68fb      	ldr	r3, [r7, #12]
   1b286:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b288:	4b08      	ldr	r3, [pc, #32]	; (1b2ac <prvTraceGetParam+0x88>)
   1b28a:	4798      	blx	r3
		}

		return param & param_max;
   1b28c:	683b      	ldr	r3, [r7, #0]
   1b28e:	687a      	ldr	r2, [r7, #4]
   1b290:	4013      	ands	r3, r2
	}
}
   1b292:	0018      	movs	r0, r3
   1b294:	46bd      	mov	sp, r7
   1b296:	b004      	add	sp, #16
   1b298:	bd80      	pop	{r7, pc}
   1b29a:	46c0      	nop			; (mov r8, r8)
   1b29c:	0000ffff 	.word	0x0000ffff
   1b2a0:	0003ab48 	.word	0x0003ab48
   1b2a4:	0001be4d 	.word	0x0001be4d
   1b2a8:	0001ba05 	.word	0x0001ba05
   1b2ac:	0001c009 	.word	0x0001c009

0001b2b0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   1b2b0:	b580      	push	{r7, lr}
   1b2b2:	b08a      	sub	sp, #40	; 0x28
   1b2b4:	af00      	add	r7, sp, #0
   1b2b6:	6078      	str	r0, [r7, #4]
   1b2b8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1b2ba:	2326      	movs	r3, #38	; 0x26
   1b2bc:	18fb      	adds	r3, r7, r3
   1b2be:	2200      	movs	r2, #0
   1b2c0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1b2c2:	687b      	ldr	r3, [r7, #4]
   1b2c4:	2bfe      	cmp	r3, #254	; 0xfe
   1b2c6:	d904      	bls.n	1b2d2 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1b2c8:	4b2d      	ldr	r3, [pc, #180]	; (1b380 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1b2ca:	0018      	movs	r0, r3
   1b2cc:	4b2d      	ldr	r3, [pc, #180]	; (1b384 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b2ce:	4798      	blx	r3
   1b2d0:	e053      	b.n	1b37a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1b2d2:	4b2d      	ldr	r3, [pc, #180]	; (1b388 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b2d4:	681b      	ldr	r3, [r3, #0]
   1b2d6:	2b00      	cmp	r3, #0
   1b2d8:	d004      	beq.n	1b2e4 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1b2da:	4b2c      	ldr	r3, [pc, #176]	; (1b38c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1b2dc:	0018      	movs	r0, r3
   1b2de:	4b29      	ldr	r3, [pc, #164]	; (1b384 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b2e0:	4798      	blx	r3
		return;
   1b2e2:	e04a      	b.n	1b37a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b2e4:	f3ef 8310 	mrs	r3, PRIMASK
   1b2e8:	613b      	str	r3, [r7, #16]
  return(result);
   1b2ea:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b2ec:	623b      	str	r3, [r7, #32]
   1b2ee:	2301      	movs	r3, #1
   1b2f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b2f2:	697b      	ldr	r3, [r7, #20]
   1b2f4:	f383 8810 	msr	PRIMASK, r3
   1b2f8:	4b23      	ldr	r3, [pc, #140]	; (1b388 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b2fa:	681b      	ldr	r3, [r3, #0]
   1b2fc:	1c5a      	adds	r2, r3, #1
   1b2fe:	4b22      	ldr	r3, [pc, #136]	; (1b388 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b300:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1b302:	4b23      	ldr	r3, [pc, #140]	; (1b390 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   1b304:	681b      	ldr	r3, [r3, #0]
   1b306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b308:	2b00      	cmp	r3, #0
   1b30a:	d02c      	beq.n	1b366 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1b30c:	4b21      	ldr	r3, [pc, #132]	; (1b394 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1b30e:	781b      	ldrb	r3, [r3, #0]
   1b310:	2b00      	cmp	r3, #0
   1b312:	d028      	beq.n	1b366 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1b314:	20ff      	movs	r0, #255	; 0xff
   1b316:	4b20      	ldr	r3, [pc, #128]	; (1b398 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1b318:	4798      	blx	r3
   1b31a:	0003      	movs	r3, r0
   1b31c:	001a      	movs	r2, r3
   1b31e:	231f      	movs	r3, #31
   1b320:	18fb      	adds	r3, r7, r3
   1b322:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1b324:	683b      	ldr	r3, [r7, #0]
   1b326:	4a1d      	ldr	r2, [pc, #116]	; (1b39c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1b328:	0019      	movs	r1, r3
   1b32a:	0010      	movs	r0, r2
   1b32c:	4b1c      	ldr	r3, [pc, #112]	; (1b3a0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1b32e:	4798      	blx	r3
   1b330:	0002      	movs	r2, r0
   1b332:	2326      	movs	r3, #38	; 0x26
   1b334:	18fb      	adds	r3, r7, r3
   1b336:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1b338:	4b1a      	ldr	r3, [pc, #104]	; (1b3a4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1b33a:	4798      	blx	r3
   1b33c:	0003      	movs	r3, r0
   1b33e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1b340:	69bb      	ldr	r3, [r7, #24]
   1b342:	2b00      	cmp	r3, #0
   1b344:	d00f      	beq.n	1b366 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1b346:	69bb      	ldr	r3, [r7, #24]
   1b348:	221f      	movs	r2, #31
   1b34a:	18ba      	adds	r2, r7, r2
   1b34c:	7812      	ldrb	r2, [r2, #0]
   1b34e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1b350:	687b      	ldr	r3, [r7, #4]
   1b352:	b2da      	uxtb	r2, r3
   1b354:	69bb      	ldr	r3, [r7, #24]
   1b356:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   1b358:	69bb      	ldr	r3, [r7, #24]
   1b35a:	2226      	movs	r2, #38	; 0x26
   1b35c:	18ba      	adds	r2, r7, r2
   1b35e:	8812      	ldrh	r2, [r2, #0]
   1b360:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b362:	4b11      	ldr	r3, [pc, #68]	; (1b3a8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1b364:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b366:	4b08      	ldr	r3, [pc, #32]	; (1b388 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b368:	681b      	ldr	r3, [r3, #0]
   1b36a:	1e5a      	subs	r2, r3, #1
   1b36c:	4b06      	ldr	r3, [pc, #24]	; (1b388 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b36e:	601a      	str	r2, [r3, #0]
   1b370:	6a3b      	ldr	r3, [r7, #32]
   1b372:	60fb      	str	r3, [r7, #12]
   1b374:	68fb      	ldr	r3, [r7, #12]
   1b376:	f383 8810 	msr	PRIMASK, r3
}
   1b37a:	46bd      	mov	sp, r7
   1b37c:	b00a      	add	sp, #40	; 0x28
   1b37e:	bd80      	pop	{r7, pc}
   1b380:	0003ab84 	.word	0x0003ab84
   1b384:	0001be4d 	.word	0x0001be4d
   1b388:	20000bf0 	.word	0x20000bf0
   1b38c:	0003abdc 	.word	0x0003abdc
   1b390:	20000c98 	.word	0x20000c98
   1b394:	20000bfc 	.word	0x20000bfc
   1b398:	0001c061 	.word	0x0001c061
   1b39c:	0000ffff 	.word	0x0000ffff
   1b3a0:	0001b225 	.word	0x0001b225
   1b3a4:	0001ba05 	.word	0x0001ba05
   1b3a8:	0001c009 	.word	0x0001c009

0001b3ac <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1b3ac:	b590      	push	{r4, r7, lr}
   1b3ae:	b089      	sub	sp, #36	; 0x24
   1b3b0:	af00      	add	r7, sp, #0
   1b3b2:	0002      	movs	r2, r0
   1b3b4:	1dfb      	adds	r3, r7, #7
   1b3b6:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1b3b8:	1dfb      	adds	r3, r7, #7
   1b3ba:	781b      	ldrb	r3, [r3, #0]
   1b3bc:	2b0f      	cmp	r3, #15
   1b3be:	d904      	bls.n	1b3ca <prvTraceStoreTaskswitch+0x1e>
   1b3c0:	4b34      	ldr	r3, [pc, #208]	; (1b494 <prvTraceStoreTaskswitch+0xe8>)
   1b3c2:	0018      	movs	r0, r3
   1b3c4:	4b34      	ldr	r3, [pc, #208]	; (1b498 <prvTraceStoreTaskswitch+0xec>)
   1b3c6:	4798      	blx	r3
   1b3c8:	e061      	b.n	1b48e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b3ca:	f3ef 8310 	mrs	r3, PRIMASK
   1b3ce:	60fb      	str	r3, [r7, #12]
  return(result);
   1b3d0:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1b3d2:	61fb      	str	r3, [r7, #28]
   1b3d4:	2301      	movs	r3, #1
   1b3d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b3d8:	693b      	ldr	r3, [r7, #16]
   1b3da:	f383 8810 	msr	PRIMASK, r3
   1b3de:	4b2f      	ldr	r3, [pc, #188]	; (1b49c <prvTraceStoreTaskswitch+0xf0>)
   1b3e0:	681b      	ldr	r3, [r3, #0]
   1b3e2:	1c5a      	adds	r2, r3, #1
   1b3e4:	4b2d      	ldr	r3, [pc, #180]	; (1b49c <prvTraceStoreTaskswitch+0xf0>)
   1b3e6:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1b3e8:	4b2d      	ldr	r3, [pc, #180]	; (1b4a0 <prvTraceStoreTaskswitch+0xf4>)
   1b3ea:	781b      	ldrb	r3, [r3, #0]
   1b3ec:	1dfa      	adds	r2, r7, #7
   1b3ee:	7812      	ldrb	r2, [r2, #0]
   1b3f0:	429a      	cmp	r2, r3
   1b3f2:	d042      	beq.n	1b47a <prvTraceStoreTaskswitch+0xce>
   1b3f4:	4b2b      	ldr	r3, [pc, #172]	; (1b4a4 <prvTraceStoreTaskswitch+0xf8>)
   1b3f6:	681b      	ldr	r3, [r3, #0]
   1b3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b3fa:	2b00      	cmp	r3, #0
   1b3fc:	d03d      	beq.n	1b47a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1b3fe:	4b2a      	ldr	r3, [pc, #168]	; (1b4a8 <prvTraceStoreTaskswitch+0xfc>)
   1b400:	2200      	movs	r2, #0
   1b402:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b404:	231a      	movs	r3, #26
   1b406:	18fc      	adds	r4, r7, r3
   1b408:	4b28      	ldr	r3, [pc, #160]	; (1b4ac <prvTraceStoreTaskswitch+0x100>)
   1b40a:	0018      	movs	r0, r3
   1b40c:	4b28      	ldr	r3, [pc, #160]	; (1b4b0 <prvTraceStoreTaskswitch+0x104>)
   1b40e:	4798      	blx	r3
   1b410:	0003      	movs	r3, r0
   1b412:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1b414:	4b22      	ldr	r3, [pc, #136]	; (1b4a0 <prvTraceStoreTaskswitch+0xf4>)
   1b416:	1dfa      	adds	r2, r7, #7
   1b418:	7812      	ldrb	r2, [r2, #0]
   1b41a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1b41c:	2319      	movs	r3, #25
   1b41e:	18fb      	adds	r3, r7, r3
   1b420:	4a1f      	ldr	r2, [pc, #124]	; (1b4a0 <prvTraceStoreTaskswitch+0xf4>)
   1b422:	7812      	ldrb	r2, [r2, #0]
   1b424:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1b426:	4b23      	ldr	r3, [pc, #140]	; (1b4b4 <prvTraceStoreTaskswitch+0x108>)
   1b428:	4798      	blx	r3
   1b42a:	0003      	movs	r3, r0
   1b42c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1b42e:	697b      	ldr	r3, [r7, #20]
   1b430:	2b00      	cmp	r3, #0
   1b432:	d022      	beq.n	1b47a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1b434:	4b1a      	ldr	r3, [pc, #104]	; (1b4a0 <prvTraceStoreTaskswitch+0xf4>)
   1b436:	781b      	ldrb	r3, [r3, #0]
   1b438:	0019      	movs	r1, r3
   1b43a:	2003      	movs	r0, #3
   1b43c:	4b1e      	ldr	r3, [pc, #120]	; (1b4b8 <prvTraceStoreTaskswitch+0x10c>)
   1b43e:	4798      	blx	r3
   1b440:	0003      	movs	r3, r0
   1b442:	2b01      	cmp	r3, #1
   1b444:	d103      	bne.n	1b44e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1b446:	697b      	ldr	r3, [r7, #20]
   1b448:	2207      	movs	r2, #7
   1b44a:	701a      	strb	r2, [r3, #0]
   1b44c:	e002      	b.n	1b454 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1b44e:	697b      	ldr	r3, [r7, #20]
   1b450:	2206      	movs	r2, #6
   1b452:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1b454:	697b      	ldr	r3, [r7, #20]
   1b456:	221a      	movs	r2, #26
   1b458:	18ba      	adds	r2, r7, r2
   1b45a:	8812      	ldrh	r2, [r2, #0]
   1b45c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1b45e:	697b      	ldr	r3, [r7, #20]
   1b460:	2219      	movs	r2, #25
   1b462:	18ba      	adds	r2, r7, r2
   1b464:	7812      	ldrb	r2, [r2, #0]
   1b466:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1b468:	4b0d      	ldr	r3, [pc, #52]	; (1b4a0 <prvTraceStoreTaskswitch+0xf4>)
   1b46a:	781b      	ldrb	r3, [r3, #0]
   1b46c:	2201      	movs	r2, #1
   1b46e:	0019      	movs	r1, r3
   1b470:	2003      	movs	r0, #3
   1b472:	4b12      	ldr	r3, [pc, #72]	; (1b4bc <prvTraceStoreTaskswitch+0x110>)
   1b474:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1b476:	4b12      	ldr	r3, [pc, #72]	; (1b4c0 <prvTraceStoreTaskswitch+0x114>)
   1b478:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1b47a:	4b08      	ldr	r3, [pc, #32]	; (1b49c <prvTraceStoreTaskswitch+0xf0>)
   1b47c:	681b      	ldr	r3, [r3, #0]
   1b47e:	1e5a      	subs	r2, r3, #1
   1b480:	4b06      	ldr	r3, [pc, #24]	; (1b49c <prvTraceStoreTaskswitch+0xf0>)
   1b482:	601a      	str	r2, [r3, #0]
   1b484:	69fb      	ldr	r3, [r7, #28]
   1b486:	60bb      	str	r3, [r7, #8]
   1b488:	68bb      	ldr	r3, [r7, #8]
   1b48a:	f383 8810 	msr	PRIMASK, r3
}
   1b48e:	46bd      	mov	sp, r7
   1b490:	b009      	add	sp, #36	; 0x24
   1b492:	bd90      	pop	{r4, r7, pc}
   1b494:	0003ac14 	.word	0x0003ac14
   1b498:	0001be4d 	.word	0x0001be4d
   1b49c:	20000bf0 	.word	0x20000bf0
   1b4a0:	20000bfc 	.word	0x20000bfc
   1b4a4:	20000c98 	.word	0x20000c98
   1b4a8:	20000bdc 	.word	0x20000bdc
   1b4ac:	0000ffff 	.word	0x0000ffff
   1b4b0:	0001c061 	.word	0x0001c061
   1b4b4:	0001ba05 	.word	0x0001ba05
   1b4b8:	0001b6a9 	.word	0x0001b6a9
   1b4bc:	0001b605 	.word	0x0001b605
   1b4c0:	0001c009 	.word	0x0001c009

0001b4c4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b4c4:	b590      	push	{r4, r7, lr}
   1b4c6:	b083      	sub	sp, #12
   1b4c8:	af00      	add	r7, sp, #0
   1b4ca:	0004      	movs	r4, r0
   1b4cc:	0008      	movs	r0, r1
   1b4ce:	0011      	movs	r1, r2
   1b4d0:	1dfb      	adds	r3, r7, #7
   1b4d2:	1c22      	adds	r2, r4, #0
   1b4d4:	701a      	strb	r2, [r3, #0]
   1b4d6:	1dbb      	adds	r3, r7, #6
   1b4d8:	1c02      	adds	r2, r0, #0
   1b4da:	701a      	strb	r2, [r3, #0]
   1b4dc:	1d7b      	adds	r3, r7, #5
   1b4de:	1c0a      	adds	r2, r1, #0
   1b4e0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b4e2:	1dfb      	adds	r3, r7, #7
   1b4e4:	781b      	ldrb	r3, [r3, #0]
   1b4e6:	2b08      	cmp	r3, #8
   1b4e8:	d904      	bls.n	1b4f4 <prvTraceSetPriorityProperty+0x30>
   1b4ea:	4b1a      	ldr	r3, [pc, #104]	; (1b554 <prvTraceSetPriorityProperty+0x90>)
   1b4ec:	0018      	movs	r0, r3
   1b4ee:	4b1a      	ldr	r3, [pc, #104]	; (1b558 <prvTraceSetPriorityProperty+0x94>)
   1b4f0:	4798      	blx	r3
   1b4f2:	e02c      	b.n	1b54e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b4f4:	4b19      	ldr	r3, [pc, #100]	; (1b55c <prvTraceSetPriorityProperty+0x98>)
   1b4f6:	681a      	ldr	r2, [r3, #0]
   1b4f8:	1dfb      	adds	r3, r7, #7
   1b4fa:	781b      	ldrb	r3, [r3, #0]
   1b4fc:	2164      	movs	r1, #100	; 0x64
   1b4fe:	18d3      	adds	r3, r2, r3
   1b500:	185b      	adds	r3, r3, r1
   1b502:	781b      	ldrb	r3, [r3, #0]
   1b504:	1dba      	adds	r2, r7, #6
   1b506:	7812      	ldrb	r2, [r2, #0]
   1b508:	429a      	cmp	r2, r3
   1b50a:	d904      	bls.n	1b516 <prvTraceSetPriorityProperty+0x52>
   1b50c:	4b14      	ldr	r3, [pc, #80]	; (1b560 <prvTraceSetPriorityProperty+0x9c>)
   1b50e:	0018      	movs	r0, r3
   1b510:	4b11      	ldr	r3, [pc, #68]	; (1b558 <prvTraceSetPriorityProperty+0x94>)
   1b512:	4798      	blx	r3
   1b514:	e01b      	b.n	1b54e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1b516:	4b11      	ldr	r3, [pc, #68]	; (1b55c <prvTraceSetPriorityProperty+0x98>)
   1b518:	681c      	ldr	r4, [r3, #0]
   1b51a:	1dfb      	adds	r3, r7, #7
   1b51c:	781a      	ldrb	r2, [r3, #0]
   1b51e:	1dbb      	adds	r3, r7, #6
   1b520:	781b      	ldrb	r3, [r3, #0]
   1b522:	0011      	movs	r1, r2
   1b524:	0018      	movs	r0, r3
   1b526:	4b0f      	ldr	r3, [pc, #60]	; (1b564 <prvTraceSetPriorityProperty+0xa0>)
   1b528:	4798      	blx	r3
   1b52a:	0003      	movs	r3, r0
   1b52c:	0018      	movs	r0, r3
   1b52e:	4b0b      	ldr	r3, [pc, #44]	; (1b55c <prvTraceSetPriorityProperty+0x98>)
   1b530:	681a      	ldr	r2, [r3, #0]
   1b532:	1dfb      	adds	r3, r7, #7
   1b534:	781b      	ldrb	r3, [r3, #0]
   1b536:	2170      	movs	r1, #112	; 0x70
   1b538:	18d3      	adds	r3, r2, r3
   1b53a:	185b      	adds	r3, r3, r1
   1b53c:	781b      	ldrb	r3, [r3, #0]
   1b53e:	18c3      	adds	r3, r0, r3
   1b540:	3301      	adds	r3, #1
   1b542:	229c      	movs	r2, #156	; 0x9c
   1b544:	18e3      	adds	r3, r4, r3
   1b546:	189b      	adds	r3, r3, r2
   1b548:	1d7a      	adds	r2, r7, #5
   1b54a:	7812      	ldrb	r2, [r2, #0]
   1b54c:	701a      	strb	r2, [r3, #0]
}
   1b54e:	46bd      	mov	sp, r7
   1b550:	b003      	add	sp, #12
   1b552:	bd90      	pop	{r4, r7, pc}
   1b554:	0003ada8 	.word	0x0003ada8
   1b558:	0001be4d 	.word	0x0001be4d
   1b55c:	20000c98 	.word	0x20000c98
   1b560:	0003adf4 	.word	0x0003adf4
   1b564:	0001ba59 	.word	0x0001ba59

0001b568 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1b568:	b590      	push	{r4, r7, lr}
   1b56a:	b083      	sub	sp, #12
   1b56c:	af00      	add	r7, sp, #0
   1b56e:	0002      	movs	r2, r0
   1b570:	1dfb      	adds	r3, r7, #7
   1b572:	701a      	strb	r2, [r3, #0]
   1b574:	1dbb      	adds	r3, r7, #6
   1b576:	1c0a      	adds	r2, r1, #0
   1b578:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b57a:	1dfb      	adds	r3, r7, #7
   1b57c:	781b      	ldrb	r3, [r3, #0]
   1b57e:	2b08      	cmp	r3, #8
   1b580:	d905      	bls.n	1b58e <prvTraceGetPriorityProperty+0x26>
   1b582:	4b1b      	ldr	r3, [pc, #108]	; (1b5f0 <prvTraceGetPriorityProperty+0x88>)
   1b584:	0018      	movs	r0, r3
   1b586:	4b1b      	ldr	r3, [pc, #108]	; (1b5f4 <prvTraceGetPriorityProperty+0x8c>)
   1b588:	4798      	blx	r3
   1b58a:	2300      	movs	r3, #0
   1b58c:	e02b      	b.n	1b5e6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b58e:	4b1a      	ldr	r3, [pc, #104]	; (1b5f8 <prvTraceGetPriorityProperty+0x90>)
   1b590:	681a      	ldr	r2, [r3, #0]
   1b592:	1dfb      	adds	r3, r7, #7
   1b594:	781b      	ldrb	r3, [r3, #0]
   1b596:	2164      	movs	r1, #100	; 0x64
   1b598:	18d3      	adds	r3, r2, r3
   1b59a:	185b      	adds	r3, r3, r1
   1b59c:	781b      	ldrb	r3, [r3, #0]
   1b59e:	1dba      	adds	r2, r7, #6
   1b5a0:	7812      	ldrb	r2, [r2, #0]
   1b5a2:	429a      	cmp	r2, r3
   1b5a4:	d905      	bls.n	1b5b2 <prvTraceGetPriorityProperty+0x4a>
   1b5a6:	4b15      	ldr	r3, [pc, #84]	; (1b5fc <prvTraceGetPriorityProperty+0x94>)
   1b5a8:	0018      	movs	r0, r3
   1b5aa:	4b12      	ldr	r3, [pc, #72]	; (1b5f4 <prvTraceGetPriorityProperty+0x8c>)
   1b5ac:	4798      	blx	r3
   1b5ae:	2300      	movs	r3, #0
   1b5b0:	e019      	b.n	1b5e6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1b5b2:	4b11      	ldr	r3, [pc, #68]	; (1b5f8 <prvTraceGetPriorityProperty+0x90>)
   1b5b4:	681c      	ldr	r4, [r3, #0]
   1b5b6:	1dfb      	adds	r3, r7, #7
   1b5b8:	781a      	ldrb	r2, [r3, #0]
   1b5ba:	1dbb      	adds	r3, r7, #6
   1b5bc:	781b      	ldrb	r3, [r3, #0]
   1b5be:	0011      	movs	r1, r2
   1b5c0:	0018      	movs	r0, r3
   1b5c2:	4b0f      	ldr	r3, [pc, #60]	; (1b600 <prvTraceGetPriorityProperty+0x98>)
   1b5c4:	4798      	blx	r3
   1b5c6:	0003      	movs	r3, r0
   1b5c8:	0018      	movs	r0, r3
   1b5ca:	4b0b      	ldr	r3, [pc, #44]	; (1b5f8 <prvTraceGetPriorityProperty+0x90>)
   1b5cc:	681a      	ldr	r2, [r3, #0]
   1b5ce:	1dfb      	adds	r3, r7, #7
   1b5d0:	781b      	ldrb	r3, [r3, #0]
   1b5d2:	2170      	movs	r1, #112	; 0x70
   1b5d4:	18d3      	adds	r3, r2, r3
   1b5d6:	185b      	adds	r3, r3, r1
   1b5d8:	781b      	ldrb	r3, [r3, #0]
   1b5da:	18c3      	adds	r3, r0, r3
   1b5dc:	3301      	adds	r3, #1
   1b5de:	229c      	movs	r2, #156	; 0x9c
   1b5e0:	18e3      	adds	r3, r4, r3
   1b5e2:	189b      	adds	r3, r3, r2
   1b5e4:	781b      	ldrb	r3, [r3, #0]
}
   1b5e6:	0018      	movs	r0, r3
   1b5e8:	46bd      	mov	sp, r7
   1b5ea:	b003      	add	sp, #12
   1b5ec:	bd90      	pop	{r4, r7, pc}
   1b5ee:	46c0      	nop			; (mov r8, r8)
   1b5f0:	0003ae34 	.word	0x0003ae34
   1b5f4:	0001be4d 	.word	0x0001be4d
   1b5f8:	20000c98 	.word	0x20000c98
   1b5fc:	0003ae80 	.word	0x0003ae80
   1b600:	0001ba59 	.word	0x0001ba59

0001b604 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b604:	b590      	push	{r4, r7, lr}
   1b606:	b083      	sub	sp, #12
   1b608:	af00      	add	r7, sp, #0
   1b60a:	0004      	movs	r4, r0
   1b60c:	0008      	movs	r0, r1
   1b60e:	0011      	movs	r1, r2
   1b610:	1dfb      	adds	r3, r7, #7
   1b612:	1c22      	adds	r2, r4, #0
   1b614:	701a      	strb	r2, [r3, #0]
   1b616:	1dbb      	adds	r3, r7, #6
   1b618:	1c02      	adds	r2, r0, #0
   1b61a:	701a      	strb	r2, [r3, #0]
   1b61c:	1d7b      	adds	r3, r7, #5
   1b61e:	1c0a      	adds	r2, r1, #0
   1b620:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b622:	1dfb      	adds	r3, r7, #7
   1b624:	781b      	ldrb	r3, [r3, #0]
   1b626:	2b08      	cmp	r3, #8
   1b628:	d904      	bls.n	1b634 <prvTraceSetObjectState+0x30>
   1b62a:	4b1a      	ldr	r3, [pc, #104]	; (1b694 <prvTraceSetObjectState+0x90>)
   1b62c:	0018      	movs	r0, r3
   1b62e:	4b1a      	ldr	r3, [pc, #104]	; (1b698 <prvTraceSetObjectState+0x94>)
   1b630:	4798      	blx	r3
   1b632:	e02b      	b.n	1b68c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b634:	4b19      	ldr	r3, [pc, #100]	; (1b69c <prvTraceSetObjectState+0x98>)
   1b636:	681a      	ldr	r2, [r3, #0]
   1b638:	1dfb      	adds	r3, r7, #7
   1b63a:	781b      	ldrb	r3, [r3, #0]
   1b63c:	2164      	movs	r1, #100	; 0x64
   1b63e:	18d3      	adds	r3, r2, r3
   1b640:	185b      	adds	r3, r3, r1
   1b642:	781b      	ldrb	r3, [r3, #0]
   1b644:	1dba      	adds	r2, r7, #6
   1b646:	7812      	ldrb	r2, [r2, #0]
   1b648:	429a      	cmp	r2, r3
   1b64a:	d904      	bls.n	1b656 <prvTraceSetObjectState+0x52>
   1b64c:	4b14      	ldr	r3, [pc, #80]	; (1b6a0 <prvTraceSetObjectState+0x9c>)
   1b64e:	0018      	movs	r0, r3
   1b650:	4b11      	ldr	r3, [pc, #68]	; (1b698 <prvTraceSetObjectState+0x94>)
   1b652:	4798      	blx	r3
   1b654:	e01a      	b.n	1b68c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1b656:	4b11      	ldr	r3, [pc, #68]	; (1b69c <prvTraceSetObjectState+0x98>)
   1b658:	681c      	ldr	r4, [r3, #0]
   1b65a:	1dfb      	adds	r3, r7, #7
   1b65c:	781a      	ldrb	r2, [r3, #0]
   1b65e:	1dbb      	adds	r3, r7, #6
   1b660:	781b      	ldrb	r3, [r3, #0]
   1b662:	0011      	movs	r1, r2
   1b664:	0018      	movs	r0, r3
   1b666:	4b0f      	ldr	r3, [pc, #60]	; (1b6a4 <prvTraceSetObjectState+0xa0>)
   1b668:	4798      	blx	r3
   1b66a:	0003      	movs	r3, r0
   1b66c:	0018      	movs	r0, r3
   1b66e:	4b0b      	ldr	r3, [pc, #44]	; (1b69c <prvTraceSetObjectState+0x98>)
   1b670:	681a      	ldr	r2, [r3, #0]
   1b672:	1dfb      	adds	r3, r7, #7
   1b674:	781b      	ldrb	r3, [r3, #0]
   1b676:	2170      	movs	r1, #112	; 0x70
   1b678:	18d3      	adds	r3, r2, r3
   1b67a:	185b      	adds	r3, r3, r1
   1b67c:	781b      	ldrb	r3, [r3, #0]
   1b67e:	18c3      	adds	r3, r0, r3
   1b680:	229c      	movs	r2, #156	; 0x9c
   1b682:	18e3      	adds	r3, r4, r3
   1b684:	189b      	adds	r3, r3, r2
   1b686:	1d7a      	adds	r2, r7, #5
   1b688:	7812      	ldrb	r2, [r2, #0]
   1b68a:	701a      	strb	r2, [r3, #0]
}
   1b68c:	46bd      	mov	sp, r7
   1b68e:	b003      	add	sp, #12
   1b690:	bd90      	pop	{r4, r7, pc}
   1b692:	46c0      	nop			; (mov r8, r8)
   1b694:	0003aec0 	.word	0x0003aec0
   1b698:	0001be4d 	.word	0x0001be4d
   1b69c:	20000c98 	.word	0x20000c98
   1b6a0:	0003af04 	.word	0x0003af04
   1b6a4:	0001ba59 	.word	0x0001ba59

0001b6a8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1b6a8:	b590      	push	{r4, r7, lr}
   1b6aa:	b083      	sub	sp, #12
   1b6ac:	af00      	add	r7, sp, #0
   1b6ae:	0002      	movs	r2, r0
   1b6b0:	1dfb      	adds	r3, r7, #7
   1b6b2:	701a      	strb	r2, [r3, #0]
   1b6b4:	1dbb      	adds	r3, r7, #6
   1b6b6:	1c0a      	adds	r2, r1, #0
   1b6b8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b6ba:	1dfb      	adds	r3, r7, #7
   1b6bc:	781b      	ldrb	r3, [r3, #0]
   1b6be:	2b08      	cmp	r3, #8
   1b6c0:	d905      	bls.n	1b6ce <prvTraceGetObjectState+0x26>
   1b6c2:	4b1a      	ldr	r3, [pc, #104]	; (1b72c <prvTraceGetObjectState+0x84>)
   1b6c4:	0018      	movs	r0, r3
   1b6c6:	4b1a      	ldr	r3, [pc, #104]	; (1b730 <prvTraceGetObjectState+0x88>)
   1b6c8:	4798      	blx	r3
   1b6ca:	2300      	movs	r3, #0
   1b6cc:	e02a      	b.n	1b724 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b6ce:	4b19      	ldr	r3, [pc, #100]	; (1b734 <prvTraceGetObjectState+0x8c>)
   1b6d0:	681a      	ldr	r2, [r3, #0]
   1b6d2:	1dfb      	adds	r3, r7, #7
   1b6d4:	781b      	ldrb	r3, [r3, #0]
   1b6d6:	2164      	movs	r1, #100	; 0x64
   1b6d8:	18d3      	adds	r3, r2, r3
   1b6da:	185b      	adds	r3, r3, r1
   1b6dc:	781b      	ldrb	r3, [r3, #0]
   1b6de:	1dba      	adds	r2, r7, #6
   1b6e0:	7812      	ldrb	r2, [r2, #0]
   1b6e2:	429a      	cmp	r2, r3
   1b6e4:	d905      	bls.n	1b6f2 <prvTraceGetObjectState+0x4a>
   1b6e6:	4b14      	ldr	r3, [pc, #80]	; (1b738 <prvTraceGetObjectState+0x90>)
   1b6e8:	0018      	movs	r0, r3
   1b6ea:	4b11      	ldr	r3, [pc, #68]	; (1b730 <prvTraceGetObjectState+0x88>)
   1b6ec:	4798      	blx	r3
   1b6ee:	2300      	movs	r3, #0
   1b6f0:	e018      	b.n	1b724 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1b6f2:	4b10      	ldr	r3, [pc, #64]	; (1b734 <prvTraceGetObjectState+0x8c>)
   1b6f4:	681c      	ldr	r4, [r3, #0]
   1b6f6:	1dfb      	adds	r3, r7, #7
   1b6f8:	781a      	ldrb	r2, [r3, #0]
   1b6fa:	1dbb      	adds	r3, r7, #6
   1b6fc:	781b      	ldrb	r3, [r3, #0]
   1b6fe:	0011      	movs	r1, r2
   1b700:	0018      	movs	r0, r3
   1b702:	4b0e      	ldr	r3, [pc, #56]	; (1b73c <prvTraceGetObjectState+0x94>)
   1b704:	4798      	blx	r3
   1b706:	0003      	movs	r3, r0
   1b708:	0018      	movs	r0, r3
   1b70a:	4b0a      	ldr	r3, [pc, #40]	; (1b734 <prvTraceGetObjectState+0x8c>)
   1b70c:	681a      	ldr	r2, [r3, #0]
   1b70e:	1dfb      	adds	r3, r7, #7
   1b710:	781b      	ldrb	r3, [r3, #0]
   1b712:	2170      	movs	r1, #112	; 0x70
   1b714:	18d3      	adds	r3, r2, r3
   1b716:	185b      	adds	r3, r3, r1
   1b718:	781b      	ldrb	r3, [r3, #0]
   1b71a:	18c3      	adds	r3, r0, r3
   1b71c:	229c      	movs	r2, #156	; 0x9c
   1b71e:	18e3      	adds	r3, r4, r3
   1b720:	189b      	adds	r3, r3, r2
   1b722:	781b      	ldrb	r3, [r3, #0]
}
   1b724:	0018      	movs	r0, r3
   1b726:	46bd      	mov	sp, r7
   1b728:	b003      	add	sp, #12
   1b72a:	bd90      	pop	{r4, r7, pc}
   1b72c:	0003af40 	.word	0x0003af40
   1b730:	0001be4d 	.word	0x0001be4d
   1b734:	20000c98 	.word	0x20000c98
   1b738:	0003af84 	.word	0x0003af84
   1b73c:	0001ba59 	.word	0x0001ba59

0001b740 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1b740:	b590      	push	{r4, r7, lr}
   1b742:	b083      	sub	sp, #12
   1b744:	af00      	add	r7, sp, #0
   1b746:	0002      	movs	r2, r0
   1b748:	1dfb      	adds	r3, r7, #7
   1b74a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1b74c:	4b11      	ldr	r3, [pc, #68]	; (1b794 <prvTraceSetTaskInstanceFinished+0x54>)
   1b74e:	681b      	ldr	r3, [r3, #0]
   1b750:	2267      	movs	r2, #103	; 0x67
   1b752:	5c9b      	ldrb	r3, [r3, r2]
   1b754:	1dfa      	adds	r2, r7, #7
   1b756:	7812      	ldrb	r2, [r2, #0]
   1b758:	429a      	cmp	r2, r3
   1b75a:	d904      	bls.n	1b766 <prvTraceSetTaskInstanceFinished+0x26>
   1b75c:	4b0e      	ldr	r3, [pc, #56]	; (1b798 <prvTraceSetTaskInstanceFinished+0x58>)
   1b75e:	0018      	movs	r0, r3
   1b760:	4b0e      	ldr	r3, [pc, #56]	; (1b79c <prvTraceSetTaskInstanceFinished+0x5c>)
   1b762:	4798      	blx	r3
   1b764:	e013      	b.n	1b78e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1b766:	4b0b      	ldr	r3, [pc, #44]	; (1b794 <prvTraceSetTaskInstanceFinished+0x54>)
   1b768:	681c      	ldr	r4, [r3, #0]
   1b76a:	1dfb      	adds	r3, r7, #7
   1b76c:	781b      	ldrb	r3, [r3, #0]
   1b76e:	2103      	movs	r1, #3
   1b770:	0018      	movs	r0, r3
   1b772:	4b0b      	ldr	r3, [pc, #44]	; (1b7a0 <prvTraceSetTaskInstanceFinished+0x60>)
   1b774:	4798      	blx	r3
   1b776:	0003      	movs	r3, r0
   1b778:	0019      	movs	r1, r3
   1b77a:	4b06      	ldr	r3, [pc, #24]	; (1b794 <prvTraceSetTaskInstanceFinished+0x54>)
   1b77c:	681b      	ldr	r3, [r3, #0]
   1b77e:	2273      	movs	r2, #115	; 0x73
   1b780:	5c9b      	ldrb	r3, [r3, r2]
   1b782:	18cb      	adds	r3, r1, r3
   1b784:	229c      	movs	r2, #156	; 0x9c
   1b786:	18e3      	adds	r3, r4, r3
   1b788:	189b      	adds	r3, r3, r2
   1b78a:	2200      	movs	r2, #0
   1b78c:	701a      	strb	r2, [r3, #0]
#endif
}
   1b78e:	46bd      	mov	sp, r7
   1b790:	b003      	add	sp, #12
   1b792:	bd90      	pop	{r4, r7, pc}
   1b794:	20000c98 	.word	0x20000c98
   1b798:	0003afc0 	.word	0x0003afc0
   1b79c:	0001be4d 	.word	0x0001be4d
   1b7a0:	0001ba59 	.word	0x0001ba59

0001b7a4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1b7a4:	b580      	push	{r7, lr}
   1b7a6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1b7a8:	4b75      	ldr	r3, [pc, #468]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7aa:	681b      	ldr	r3, [r3, #0]
   1b7ac:	2b00      	cmp	r3, #0
   1b7ae:	d103      	bne.n	1b7b8 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1b7b0:	4b73      	ldr	r3, [pc, #460]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7b2:	4a74      	ldr	r2, [pc, #464]	; (1b984 <prvTraceInitTraceData+0x1e0>)
   1b7b4:	601a      	str	r2, [r3, #0]
   1b7b6:	e006      	b.n	1b7c6 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1b7b8:	4b71      	ldr	r3, [pc, #452]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7ba:	681b      	ldr	r3, [r3, #0]
   1b7bc:	781b      	ldrb	r3, [r3, #0]
   1b7be:	b2db      	uxtb	r3, r3
   1b7c0:	2b01      	cmp	r3, #1
   1b7c2:	d100      	bne.n	1b7c6 <prvTraceInitTraceData+0x22>
   1b7c4:	e0d8      	b.n	1b978 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1b7c6:	4b70      	ldr	r3, [pc, #448]	; (1b988 <prvTraceInitTraceData+0x1e4>)
   1b7c8:	681a      	ldr	r2, [r3, #0]
   1b7ca:	4b70      	ldr	r3, [pc, #448]	; (1b98c <prvTraceInitTraceData+0x1e8>)
   1b7cc:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1b7ce:	4b6c      	ldr	r3, [pc, #432]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7d0:	6818      	ldr	r0, [r3, #0]
   1b7d2:	23bd      	movs	r3, #189	; 0xbd
   1b7d4:	011b      	lsls	r3, r3, #4
   1b7d6:	001a      	movs	r2, r3
   1b7d8:	2100      	movs	r1, #0
   1b7da:	4b6d      	ldr	r3, [pc, #436]	; (1b990 <prvTraceInitTraceData+0x1ec>)
   1b7dc:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1b7de:	4b68      	ldr	r3, [pc, #416]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7e0:	681b      	ldr	r3, [r3, #0]
   1b7e2:	4a6c      	ldr	r2, [pc, #432]	; (1b994 <prvTraceInitTraceData+0x1f0>)
   1b7e4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1b7e6:	4b66      	ldr	r3, [pc, #408]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7e8:	681b      	ldr	r3, [r3, #0]
   1b7ea:	2205      	movs	r2, #5
   1b7ec:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1b7ee:	4b64      	ldr	r3, [pc, #400]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7f0:	681b      	ldr	r3, [r3, #0]
   1b7f2:	2200      	movs	r2, #0
   1b7f4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1b7f6:	4b62      	ldr	r3, [pc, #392]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b7f8:	681b      	ldr	r3, [r3, #0]
   1b7fa:	22bd      	movs	r2, #189	; 0xbd
   1b7fc:	0112      	lsls	r2, r2, #4
   1b7fe:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1b800:	4b5f      	ldr	r3, [pc, #380]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b802:	681b      	ldr	r3, [r3, #0]
   1b804:	2296      	movs	r2, #150	; 0x96
   1b806:	0052      	lsls	r2, r2, #1
   1b808:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1b80a:	4b5d      	ldr	r3, [pc, #372]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b80c:	681b      	ldr	r3, [r3, #0]
   1b80e:	4a62      	ldr	r2, [pc, #392]	; (1b998 <prvTraceInitTraceData+0x1f4>)
   1b810:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1b812:	4b5b      	ldr	r3, [pc, #364]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b814:	681b      	ldr	r3, [r3, #0]
   1b816:	2200      	movs	r2, #0
   1b818:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1b81a:	4b59      	ldr	r3, [pc, #356]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b81c:	681b      	ldr	r3, [r3, #0]
   1b81e:	2200      	movs	r2, #0
   1b820:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1b822:	4b5e      	ldr	r3, [pc, #376]	; (1b99c <prvTraceInitTraceData+0x1f8>)
   1b824:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1b826:	4b56      	ldr	r3, [pc, #344]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b828:	681b      	ldr	r3, [r3, #0]
   1b82a:	4a5d      	ldr	r2, [pc, #372]	; (1b9a0 <prvTraceInitTraceData+0x1fc>)
   1b82c:	495d      	ldr	r1, [pc, #372]	; (1b9a4 <prvTraceInitTraceData+0x200>)
   1b82e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1b830:	4b53      	ldr	r3, [pc, #332]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b832:	681a      	ldr	r2, [r3, #0]
   1b834:	23ac      	movs	r3, #172	; 0xac
   1b836:	00db      	lsls	r3, r3, #3
   1b838:	21c8      	movs	r1, #200	; 0xc8
   1b83a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1b83c:	4b50      	ldr	r3, [pc, #320]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b83e:	681b      	ldr	r3, [r3, #0]
   1b840:	4a59      	ldr	r2, [pc, #356]	; (1b9a8 <prvTraceInitTraceData+0x204>)
   1b842:	2101      	movs	r1, #1
   1b844:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1b846:	4b4e      	ldr	r3, [pc, #312]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b848:	681a      	ldr	r2, [r3, #0]
   1b84a:	23d7      	movs	r3, #215	; 0xd7
   1b84c:	00db      	lsls	r3, r3, #3
   1b84e:	4957      	ldr	r1, [pc, #348]	; (1b9ac <prvTraceInitTraceData+0x208>)
   1b850:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1b852:	4b4b      	ldr	r3, [pc, #300]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b854:	681b      	ldr	r3, [r3, #0]
   1b856:	4a56      	ldr	r2, [pc, #344]	; (1b9b0 <prvTraceInitTraceData+0x20c>)
   1b858:	4694      	mov	ip, r2
   1b85a:	4463      	add	r3, ip
   1b85c:	4955      	ldr	r1, [pc, #340]	; (1b9b4 <prvTraceInitTraceData+0x210>)
   1b85e:	2250      	movs	r2, #80	; 0x50
   1b860:	0018      	movs	r0, r3
   1b862:	4b55      	ldr	r3, [pc, #340]	; (1b9b8 <prvTraceInitTraceData+0x214>)
   1b864:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1b866:	4b46      	ldr	r3, [pc, #280]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b868:	681b      	ldr	r3, [r3, #0]
   1b86a:	4a54      	ldr	r2, [pc, #336]	; (1b9bc <prvTraceInitTraceData+0x218>)
   1b86c:	4954      	ldr	r1, [pc, #336]	; (1b9c0 <prvTraceInitTraceData+0x21c>)
   1b86e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1b870:	4b43      	ldr	r3, [pc, #268]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b872:	681b      	ldr	r3, [r3, #0]
   1b874:	4a53      	ldr	r2, [pc, #332]	; (1b9c4 <prvTraceInitTraceData+0x220>)
   1b876:	210a      	movs	r1, #10
   1b878:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1b87a:	4b41      	ldr	r3, [pc, #260]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b87c:	681b      	ldr	r3, [r3, #0]
   1b87e:	4a52      	ldr	r2, [pc, #328]	; (1b9c8 <prvTraceInitTraceData+0x224>)
   1b880:	210b      	movs	r1, #11
   1b882:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1b884:	4b3e      	ldr	r3, [pc, #248]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b886:	681b      	ldr	r3, [r3, #0]
   1b888:	4a50      	ldr	r2, [pc, #320]	; (1b9cc <prvTraceInitTraceData+0x228>)
   1b88a:	210c      	movs	r1, #12
   1b88c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1b88e:	4b3c      	ldr	r3, [pc, #240]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b890:	681b      	ldr	r3, [r3, #0]
   1b892:	4a4f      	ldr	r2, [pc, #316]	; (1b9d0 <prvTraceInitTraceData+0x22c>)
   1b894:	210d      	movs	r1, #13
   1b896:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1b898:	4b39      	ldr	r3, [pc, #228]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b89a:	681b      	ldr	r3, [r3, #0]
   1b89c:	4a4d      	ldr	r2, [pc, #308]	; (1b9d4 <prvTraceInitTraceData+0x230>)
   1b89e:	2171      	movs	r1, #113	; 0x71
   1b8a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1b8a2:	4b37      	ldr	r3, [pc, #220]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8a4:	681b      	ldr	r3, [r3, #0]
   1b8a6:	4a4c      	ldr	r2, [pc, #304]	; (1b9d8 <prvTraceInitTraceData+0x234>)
   1b8a8:	2172      	movs	r1, #114	; 0x72
   1b8aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1b8ac:	4b34      	ldr	r3, [pc, #208]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8ae:	681b      	ldr	r3, [r3, #0]
   1b8b0:	4a4a      	ldr	r2, [pc, #296]	; (1b9dc <prvTraceInitTraceData+0x238>)
   1b8b2:	2173      	movs	r1, #115	; 0x73
   1b8b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1b8b6:	4b32      	ldr	r3, [pc, #200]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8b8:	681b      	ldr	r3, [r3, #0]
   1b8ba:	4a49      	ldr	r2, [pc, #292]	; (1b9e0 <prvTraceInitTraceData+0x23c>)
   1b8bc:	2174      	movs	r1, #116	; 0x74
   1b8be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1b8c0:	4b2f      	ldr	r3, [pc, #188]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8c2:	681b      	ldr	r3, [r3, #0]
   1b8c4:	4a47      	ldr	r2, [pc, #284]	; (1b9e4 <prvTraceInitTraceData+0x240>)
   1b8c6:	21f1      	movs	r1, #241	; 0xf1
   1b8c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1b8ca:	4b2d      	ldr	r3, [pc, #180]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8cc:	681b      	ldr	r3, [r3, #0]
   1b8ce:	4a46      	ldr	r2, [pc, #280]	; (1b9e8 <prvTraceInitTraceData+0x244>)
   1b8d0:	21f2      	movs	r1, #242	; 0xf2
   1b8d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1b8d4:	4b2a      	ldr	r3, [pc, #168]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8d6:	681b      	ldr	r3, [r3, #0]
   1b8d8:	4a44      	ldr	r2, [pc, #272]	; (1b9ec <prvTraceInitTraceData+0x248>)
   1b8da:	21f3      	movs	r1, #243	; 0xf3
   1b8dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1b8de:	4b28      	ldr	r3, [pc, #160]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8e0:	681b      	ldr	r3, [r3, #0]
   1b8e2:	4a43      	ldr	r2, [pc, #268]	; (1b9f0 <prvTraceInitTraceData+0x24c>)
   1b8e4:	21f4      	movs	r1, #244	; 0xf4
   1b8e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1b8e8:	4b42      	ldr	r3, [pc, #264]	; (1b9f4 <prvTraceInitTraceData+0x250>)
   1b8ea:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1b8ec:	4b24      	ldr	r3, [pc, #144]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8ee:	681b      	ldr	r3, [r3, #0]
   1b8f0:	22f4      	movs	r2, #244	; 0xf4
   1b8f2:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1b8f4:	4b22      	ldr	r3, [pc, #136]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8f6:	681b      	ldr	r3, [r3, #0]
   1b8f8:	22f3      	movs	r2, #243	; 0xf3
   1b8fa:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1b8fc:	4b20      	ldr	r3, [pc, #128]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b8fe:	681b      	ldr	r3, [r3, #0]
   1b900:	22f2      	movs	r2, #242	; 0xf2
   1b902:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1b904:	4b1e      	ldr	r3, [pc, #120]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b906:	681b      	ldr	r3, [r3, #0]
   1b908:	22f1      	movs	r2, #241	; 0xf1
   1b90a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1b90c:	4b1c      	ldr	r3, [pc, #112]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b90e:	681b      	ldr	r3, [r3, #0]
   1b910:	2274      	movs	r2, #116	; 0x74
   1b912:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1b914:	4b1a      	ldr	r3, [pc, #104]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b916:	681b      	ldr	r3, [r3, #0]
   1b918:	2273      	movs	r2, #115	; 0x73
   1b91a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1b91c:	4b18      	ldr	r3, [pc, #96]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b91e:	681b      	ldr	r3, [r3, #0]
   1b920:	2272      	movs	r2, #114	; 0x72
   1b922:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1b924:	4b16      	ldr	r3, [pc, #88]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b926:	681b      	ldr	r3, [r3, #0]
   1b928:	2271      	movs	r2, #113	; 0x71
   1b92a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1b92c:	4b14      	ldr	r3, [pc, #80]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b92e:	681b      	ldr	r3, [r3, #0]
   1b930:	2204      	movs	r2, #4
   1b932:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1b934:	4b12      	ldr	r3, [pc, #72]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b936:	681b      	ldr	r3, [r3, #0]
   1b938:	2203      	movs	r2, #3
   1b93a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1b93c:	4b10      	ldr	r3, [pc, #64]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b93e:	681b      	ldr	r3, [r3, #0]
   1b940:	2202      	movs	r2, #2
   1b942:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1b944:	4b0e      	ldr	r3, [pc, #56]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b946:	681b      	ldr	r3, [r3, #0]
   1b948:	2201      	movs	r2, #1
   1b94a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1b94c:	4b2a      	ldr	r3, [pc, #168]	; (1b9f8 <prvTraceInitTraceData+0x254>)
   1b94e:	681b      	ldr	r3, [r3, #0]
   1b950:	2b00      	cmp	r3, #0
   1b952:	d012      	beq.n	1b97a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1b954:	4b0a      	ldr	r3, [pc, #40]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b956:	681b      	ldr	r3, [r3, #0]
   1b958:	4a15      	ldr	r2, [pc, #84]	; (1b9b0 <prvTraceInitTraceData+0x20c>)
   1b95a:	1898      	adds	r0, r3, r2
   1b95c:	4b26      	ldr	r3, [pc, #152]	; (1b9f8 <prvTraceInitTraceData+0x254>)
   1b95e:	681b      	ldr	r3, [r3, #0]
   1b960:	2250      	movs	r2, #80	; 0x50
   1b962:	0019      	movs	r1, r3
   1b964:	4b14      	ldr	r3, [pc, #80]	; (1b9b8 <prvTraceInitTraceData+0x214>)
   1b966:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1b968:	4b05      	ldr	r3, [pc, #20]	; (1b980 <prvTraceInitTraceData+0x1dc>)
   1b96a:	681b      	ldr	r3, [r3, #0]
   1b96c:	4a23      	ldr	r2, [pc, #140]	; (1b9fc <prvTraceInitTraceData+0x258>)
   1b96e:	2101      	movs	r1, #1
   1b970:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1b972:	4b23      	ldr	r3, [pc, #140]	; (1ba00 <prvTraceInitTraceData+0x25c>)
   1b974:	4798      	blx	r3
   1b976:	e000      	b.n	1b97a <prvTraceInitTraceData+0x1d6>
			return;
   1b978:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1b97a:	46bd      	mov	sp, r7
   1b97c:	bd80      	pop	{r7, pc}
   1b97e:	46c0      	nop			; (mov r8, r8)
   1b980:	20000c98 	.word	0x20000c98
   1b984:	200048a8 	.word	0x200048a8
   1b988:	e000e018 	.word	0xe000e018
   1b98c:	20005478 	.word	0x20005478
   1b990:	0003796b 	.word	0x0003796b
   1b994:	00001aa1 	.word	0x00001aa1
   1b998:	f0f0f0f0 	.word	0xf0f0f0f0
   1b99c:	0001a909 	.word	0x0001a909
   1b9a0:	0000055c 	.word	0x0000055c
   1b9a4:	f1f1f1f1 	.word	0xf1f1f1f1
   1b9a8:	00000564 	.word	0x00000564
   1b9ac:	f2f2f2f2 	.word	0xf2f2f2f2
   1b9b0:	000006bc 	.word	0x000006bc
   1b9b4:	0003b008 	.word	0x0003b008
   1b9b8:	0001bd19 	.word	0x0001bd19
   1b9bc:	0000070c 	.word	0x0000070c
   1b9c0:	f3f3f3f3 	.word	0xf3f3f3f3
   1b9c4:	00000bc4 	.word	0x00000bc4
   1b9c8:	00000bc5 	.word	0x00000bc5
   1b9cc:	00000bc6 	.word	0x00000bc6
   1b9d0:	00000bc7 	.word	0x00000bc7
   1b9d4:	00000bc8 	.word	0x00000bc8
   1b9d8:	00000bc9 	.word	0x00000bc9
   1b9dc:	00000bca 	.word	0x00000bca
   1b9e0:	00000bcb 	.word	0x00000bcb
   1b9e4:	00000bcc 	.word	0x00000bcc
   1b9e8:	00000bcd 	.word	0x00000bcd
   1b9ec:	00000bce 	.word	0x00000bce
   1b9f0:	00000bcf 	.word	0x00000bcf
   1b9f4:	0001aaa9 	.word	0x0001aaa9
   1b9f8:	20000bf8 	.word	0x20000bf8
   1b9fc:	000006b4 	.word	0x000006b4
   1ba00:	0001ad11 	.word	0x0001ad11

0001ba04 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1ba04:	b580      	push	{r7, lr}
   1ba06:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1ba08:	4b10      	ldr	r3, [pc, #64]	; (1ba4c <prvTraceNextFreeEventBufferSlot+0x48>)
   1ba0a:	681b      	ldr	r3, [r3, #0]
   1ba0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ba0e:	2b00      	cmp	r3, #0
   1ba10:	d101      	bne.n	1ba16 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1ba12:	2300      	movs	r3, #0
   1ba14:	e017      	b.n	1ba46 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1ba16:	4b0d      	ldr	r3, [pc, #52]	; (1ba4c <prvTraceNextFreeEventBufferSlot+0x48>)
   1ba18:	681b      	ldr	r3, [r3, #0]
   1ba1a:	69da      	ldr	r2, [r3, #28]
   1ba1c:	232c      	movs	r3, #44	; 0x2c
   1ba1e:	33ff      	adds	r3, #255	; 0xff
   1ba20:	429a      	cmp	r2, r3
   1ba22:	d905      	bls.n	1ba30 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1ba24:	4b0a      	ldr	r3, [pc, #40]	; (1ba50 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1ba26:	0018      	movs	r0, r3
   1ba28:	4b0a      	ldr	r3, [pc, #40]	; (1ba54 <prvTraceNextFreeEventBufferSlot+0x50>)
   1ba2a:	4798      	blx	r3
		return NULL;
   1ba2c:	2300      	movs	r3, #0
   1ba2e:	e00a      	b.n	1ba46 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1ba30:	4b06      	ldr	r3, [pc, #24]	; (1ba4c <prvTraceNextFreeEventBufferSlot+0x48>)
   1ba32:	681a      	ldr	r2, [r3, #0]
   1ba34:	4b05      	ldr	r3, [pc, #20]	; (1ba4c <prvTraceNextFreeEventBufferSlot+0x48>)
   1ba36:	681b      	ldr	r3, [r3, #0]
   1ba38:	69db      	ldr	r3, [r3, #28]
   1ba3a:	009b      	lsls	r3, r3, #2
   1ba3c:	21e2      	movs	r1, #226	; 0xe2
   1ba3e:	00c9      	lsls	r1, r1, #3
   1ba40:	468c      	mov	ip, r1
   1ba42:	4463      	add	r3, ip
   1ba44:	18d3      	adds	r3, r2, r3
}
   1ba46:	0018      	movs	r0, r3
   1ba48:	46bd      	mov	sp, r7
   1ba4a:	bd80      	pop	{r7, pc}
   1ba4c:	20000c98 	.word	0x20000c98
   1ba50:	0003b01c 	.word	0x0003b01c
   1ba54:	0001be4d 	.word	0x0001be4d

0001ba58 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1ba58:	b580      	push	{r7, lr}
   1ba5a:	b082      	sub	sp, #8
   1ba5c:	af00      	add	r7, sp, #0
   1ba5e:	0002      	movs	r2, r0
   1ba60:	1dfb      	adds	r3, r7, #7
   1ba62:	701a      	strb	r2, [r3, #0]
   1ba64:	1dbb      	adds	r3, r7, #6
   1ba66:	1c0a      	adds	r2, r1, #0
   1ba68:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1ba6a:	1dbb      	adds	r3, r7, #6
   1ba6c:	781b      	ldrb	r3, [r3, #0]
   1ba6e:	2b08      	cmp	r3, #8
   1ba70:	d905      	bls.n	1ba7e <uiIndexOfObject+0x26>
   1ba72:	4b2a      	ldr	r3, [pc, #168]	; (1bb1c <uiIndexOfObject+0xc4>)
   1ba74:	0018      	movs	r0, r3
   1ba76:	4b2a      	ldr	r3, [pc, #168]	; (1bb20 <uiIndexOfObject+0xc8>)
   1ba78:	4798      	blx	r3
   1ba7a:	2300      	movs	r3, #0
   1ba7c:	e049      	b.n	1bb12 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1ba7e:	1dfb      	adds	r3, r7, #7
   1ba80:	781b      	ldrb	r3, [r3, #0]
   1ba82:	2b00      	cmp	r3, #0
   1ba84:	d00b      	beq.n	1ba9e <uiIndexOfObject+0x46>
   1ba86:	4b27      	ldr	r3, [pc, #156]	; (1bb24 <uiIndexOfObject+0xcc>)
   1ba88:	681a      	ldr	r2, [r3, #0]
   1ba8a:	1dbb      	adds	r3, r7, #6
   1ba8c:	781b      	ldrb	r3, [r3, #0]
   1ba8e:	2164      	movs	r1, #100	; 0x64
   1ba90:	18d3      	adds	r3, r2, r3
   1ba92:	185b      	adds	r3, r3, r1
   1ba94:	781b      	ldrb	r3, [r3, #0]
   1ba96:	1dfa      	adds	r2, r7, #7
   1ba98:	7812      	ldrb	r2, [r2, #0]
   1ba9a:	429a      	cmp	r2, r3
   1ba9c:	d905      	bls.n	1baaa <uiIndexOfObject+0x52>
   1ba9e:	4b22      	ldr	r3, [pc, #136]	; (1bb28 <uiIndexOfObject+0xd0>)
   1baa0:	0018      	movs	r0, r3
   1baa2:	4b1f      	ldr	r3, [pc, #124]	; (1bb20 <uiIndexOfObject+0xc8>)
   1baa4:	4798      	blx	r3
   1baa6:	2300      	movs	r3, #0
   1baa8:	e033      	b.n	1bb12 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1baaa:	1dbb      	adds	r3, r7, #6
   1baac:	781b      	ldrb	r3, [r3, #0]
   1baae:	2b08      	cmp	r3, #8
   1bab0:	d82a      	bhi.n	1bb08 <uiIndexOfObject+0xb0>
   1bab2:	1dfb      	adds	r3, r7, #7
   1bab4:	781b      	ldrb	r3, [r3, #0]
   1bab6:	2b00      	cmp	r3, #0
   1bab8:	d026      	beq.n	1bb08 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1baba:	4b1a      	ldr	r3, [pc, #104]	; (1bb24 <uiIndexOfObject+0xcc>)
   1babc:	681a      	ldr	r2, [r3, #0]
   1babe:	1dbb      	adds	r3, r7, #6
   1bac0:	781b      	ldrb	r3, [r3, #0]
   1bac2:	2164      	movs	r1, #100	; 0x64
   1bac4:	18d3      	adds	r3, r2, r3
   1bac6:	185b      	adds	r3, r3, r1
   1bac8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1baca:	1dfa      	adds	r2, r7, #7
   1bacc:	7812      	ldrb	r2, [r2, #0]
   1bace:	429a      	cmp	r2, r3
   1bad0:	d81a      	bhi.n	1bb08 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1bad2:	4b14      	ldr	r3, [pc, #80]	; (1bb24 <uiIndexOfObject+0xcc>)
   1bad4:	681a      	ldr	r2, [r3, #0]
   1bad6:	1dbb      	adds	r3, r7, #6
   1bad8:	781b      	ldrb	r3, [r3, #0]
   1bada:	3340      	adds	r3, #64	; 0x40
   1badc:	005b      	lsls	r3, r3, #1
   1bade:	18d3      	adds	r3, r2, r3
   1bae0:	3308      	adds	r3, #8
   1bae2:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1bae4:	4b0f      	ldr	r3, [pc, #60]	; (1bb24 <uiIndexOfObject+0xcc>)
   1bae6:	6819      	ldr	r1, [r3, #0]
   1bae8:	1dbb      	adds	r3, r7, #6
   1baea:	781b      	ldrb	r3, [r3, #0]
   1baec:	207c      	movs	r0, #124	; 0x7c
   1baee:	18cb      	adds	r3, r1, r3
   1baf0:	181b      	adds	r3, r3, r0
   1baf2:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1baf4:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1baf6:	1df9      	adds	r1, r7, #7
   1baf8:	7809      	ldrb	r1, [r1, #0]
   1bafa:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1bafc:	b289      	uxth	r1, r1
   1bafe:	434b      	muls	r3, r1
   1bb00:	b29b      	uxth	r3, r3
   1bb02:	18d3      	adds	r3, r2, r3
   1bb04:	b29b      	uxth	r3, r3
   1bb06:	e004      	b.n	1bb12 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1bb08:	4b08      	ldr	r3, [pc, #32]	; (1bb2c <uiIndexOfObject+0xd4>)
   1bb0a:	0018      	movs	r0, r3
   1bb0c:	4b04      	ldr	r3, [pc, #16]	; (1bb20 <uiIndexOfObject+0xc8>)
   1bb0e:	4798      	blx	r3
	return 0;
   1bb10:	2300      	movs	r3, #0
}
   1bb12:	0018      	movs	r0, r3
   1bb14:	46bd      	mov	sp, r7
   1bb16:	b002      	add	sp, #8
   1bb18:	bd80      	pop	{r7, pc}
   1bb1a:	46c0      	nop			; (mov r8, r8)
   1bb1c:	0003b044 	.word	0x0003b044
   1bb20:	0001be4d 	.word	0x0001be4d
   1bb24:	20000c98 	.word	0x20000c98
   1bb28:	0003b084 	.word	0x0003b084
   1bb2c:	0003b0c4 	.word	0x0003b0c4

0001bb30 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1bb30:	b580      	push	{r7, lr}
   1bb32:	b088      	sub	sp, #32
   1bb34:	af00      	add	r7, sp, #0
   1bb36:	0002      	movs	r2, r0
   1bb38:	1dfb      	adds	r3, r7, #7
   1bb3a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1bb3c:	4b5a      	ldr	r3, [pc, #360]	; (1bca8 <prvTraceGetObjectHandle+0x178>)
   1bb3e:	681b      	ldr	r3, [r3, #0]
   1bb40:	2b00      	cmp	r3, #0
   1bb42:	d105      	bne.n	1bb50 <prvTraceGetObjectHandle+0x20>
   1bb44:	4b59      	ldr	r3, [pc, #356]	; (1bcac <prvTraceGetObjectHandle+0x17c>)
   1bb46:	0018      	movs	r0, r3
   1bb48:	4b59      	ldr	r3, [pc, #356]	; (1bcb0 <prvTraceGetObjectHandle+0x180>)
   1bb4a:	4798      	blx	r3
   1bb4c:	2300      	movs	r3, #0
   1bb4e:	e0a7      	b.n	1bca0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1bb50:	1dfb      	adds	r3, r7, #7
   1bb52:	781b      	ldrb	r3, [r3, #0]
   1bb54:	2b08      	cmp	r3, #8
   1bb56:	d905      	bls.n	1bb64 <prvTraceGetObjectHandle+0x34>
   1bb58:	4b56      	ldr	r3, [pc, #344]	; (1bcb4 <prvTraceGetObjectHandle+0x184>)
   1bb5a:	0018      	movs	r0, r3
   1bb5c:	4b54      	ldr	r3, [pc, #336]	; (1bcb0 <prvTraceGetObjectHandle+0x180>)
   1bb5e:	4798      	blx	r3
   1bb60:	2300      	movs	r3, #0
   1bb62:	e09d      	b.n	1bca0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1bb64:	f3ef 8310 	mrs	r3, PRIMASK
   1bb68:	60fb      	str	r3, [r7, #12]
  return(result);
   1bb6a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1bb6c:	61bb      	str	r3, [r7, #24]
   1bb6e:	2301      	movs	r3, #1
   1bb70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1bb72:	693b      	ldr	r3, [r7, #16]
   1bb74:	f383 8810 	msr	PRIMASK, r3
   1bb78:	4b4f      	ldr	r3, [pc, #316]	; (1bcb8 <prvTraceGetObjectHandle+0x188>)
   1bb7a:	681b      	ldr	r3, [r3, #0]
   1bb7c:	1c5a      	adds	r2, r3, #1
   1bb7e:	4b4e      	ldr	r3, [pc, #312]	; (1bcb8 <prvTraceGetObjectHandle+0x188>)
   1bb80:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1bb82:	1dfb      	adds	r3, r7, #7
   1bb84:	781a      	ldrb	r2, [r3, #0]
   1bb86:	4b4d      	ldr	r3, [pc, #308]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bb88:	0052      	lsls	r2, r2, #1
   1bb8a:	5ad3      	ldrh	r3, [r2, r3]
   1bb8c:	001a      	movs	r2, r3
   1bb8e:	4b4c      	ldr	r3, [pc, #304]	; (1bcc0 <prvTraceGetObjectHandle+0x190>)
   1bb90:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1bb92:	4b4b      	ldr	r3, [pc, #300]	; (1bcc0 <prvTraceGetObjectHandle+0x190>)
   1bb94:	681b      	ldr	r3, [r3, #0]
   1bb96:	4a49      	ldr	r2, [pc, #292]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bb98:	2148      	movs	r1, #72	; 0x48
   1bb9a:	18d3      	adds	r3, r2, r3
   1bb9c:	185b      	adds	r3, r3, r1
   1bb9e:	781b      	ldrb	r3, [r3, #0]
   1bba0:	2b00      	cmp	r3, #0
   1bba2:	d117      	bne.n	1bbd4 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1bba4:	4b46      	ldr	r3, [pc, #280]	; (1bcc0 <prvTraceGetObjectHandle+0x190>)
   1bba6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1bba8:	4b45      	ldr	r3, [pc, #276]	; (1bcc0 <prvTraceGetObjectHandle+0x190>)
   1bbaa:	681b      	ldr	r3, [r3, #0]
   1bbac:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1bbae:	1dfb      	adds	r3, r7, #7
   1bbb0:	781b      	ldrb	r3, [r3, #0]
   1bbb2:	4842      	ldr	r0, [pc, #264]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bbb4:	3308      	adds	r3, #8
   1bbb6:	005b      	lsls	r3, r3, #1
   1bbb8:	18c3      	adds	r3, r0, r3
   1bbba:	3302      	adds	r3, #2
   1bbbc:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1bbbe:	b2db      	uxtb	r3, r3
   1bbc0:	1acb      	subs	r3, r1, r3
   1bbc2:	b2db      	uxtb	r3, r3
   1bbc4:	3301      	adds	r3, #1
   1bbc6:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1bbc8:	4b3c      	ldr	r3, [pc, #240]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bbca:	2148      	movs	r1, #72	; 0x48
   1bbcc:	189b      	adds	r3, r3, r2
   1bbce:	185b      	adds	r3, r3, r1
   1bbd0:	1c02      	adds	r2, r0, #0
   1bbd2:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1bbd4:	4b3a      	ldr	r3, [pc, #232]	; (1bcc0 <prvTraceGetObjectHandle+0x190>)
   1bbd6:	681a      	ldr	r2, [r3, #0]
   1bbd8:	231f      	movs	r3, #31
   1bbda:	18fb      	adds	r3, r7, r3
   1bbdc:	4937      	ldr	r1, [pc, #220]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bbde:	2048      	movs	r0, #72	; 0x48
   1bbe0:	188a      	adds	r2, r1, r2
   1bbe2:	1812      	adds	r2, r2, r0
   1bbe4:	7812      	ldrb	r2, [r2, #0]
   1bbe6:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1bbe8:	1dfb      	adds	r3, r7, #7
   1bbea:	781a      	ldrb	r2, [r3, #0]
   1bbec:	4b33      	ldr	r3, [pc, #204]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bbee:	0052      	lsls	r2, r2, #1
   1bbf0:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1bbf2:	1dfb      	adds	r3, r7, #7
   1bbf4:	781b      	ldrb	r3, [r3, #0]
   1bbf6:	4931      	ldr	r1, [pc, #196]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bbf8:	3310      	adds	r3, #16
   1bbfa:	005b      	lsls	r3, r3, #1
   1bbfc:	18cb      	adds	r3, r1, r3
   1bbfe:	3304      	adds	r3, #4
   1bc00:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1bc02:	429a      	cmp	r2, r3
   1bc04:	d90d      	bls.n	1bc22 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1bc06:	1dfb      	adds	r3, r7, #7
   1bc08:	781b      	ldrb	r3, [r3, #0]
   1bc0a:	0018      	movs	r0, r3
   1bc0c:	4b2d      	ldr	r3, [pc, #180]	; (1bcc4 <prvTraceGetObjectHandle+0x194>)
   1bc0e:	4798      	blx	r3
   1bc10:	0003      	movs	r3, r0
   1bc12:	0018      	movs	r0, r3
   1bc14:	4b26      	ldr	r3, [pc, #152]	; (1bcb0 <prvTraceGetObjectHandle+0x180>)
   1bc16:	4798      	blx	r3
		handle = 0;
   1bc18:	231f      	movs	r3, #31
   1bc1a:	18fb      	adds	r3, r7, r3
   1bc1c:	2200      	movs	r2, #0
   1bc1e:	701a      	strb	r2, [r3, #0]
   1bc20:	e031      	b.n	1bc86 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1bc22:	1dfb      	adds	r3, r7, #7
   1bc24:	781b      	ldrb	r3, [r3, #0]
   1bc26:	4a25      	ldr	r2, [pc, #148]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bc28:	0059      	lsls	r1, r3, #1
   1bc2a:	5a8a      	ldrh	r2, [r1, r2]
   1bc2c:	3201      	adds	r2, #1
   1bc2e:	b291      	uxth	r1, r2
   1bc30:	4a22      	ldr	r2, [pc, #136]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bc32:	005b      	lsls	r3, r3, #1
   1bc34:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1bc36:	1dfb      	adds	r3, r7, #7
   1bc38:	781a      	ldrb	r2, [r3, #0]
   1bc3a:	4b20      	ldr	r3, [pc, #128]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bc3c:	0052      	lsls	r2, r2, #1
   1bc3e:	5ad3      	ldrh	r3, [r2, r3]
   1bc40:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1bc42:	1dfb      	adds	r3, r7, #7
   1bc44:	781b      	ldrb	r3, [r3, #0]
   1bc46:	4a1d      	ldr	r2, [pc, #116]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bc48:	3308      	adds	r3, #8
   1bc4a:	005b      	lsls	r3, r3, #1
   1bc4c:	18d3      	adds	r3, r2, r3
   1bc4e:	3302      	adds	r3, #2
   1bc50:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1bc52:	1acb      	subs	r3, r1, r3
   1bc54:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1bc56:	1dfb      	adds	r3, r7, #7
   1bc58:	781b      	ldrb	r3, [r3, #0]
   1bc5a:	4a18      	ldr	r2, [pc, #96]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bc5c:	3318      	adds	r3, #24
   1bc5e:	005b      	lsls	r3, r3, #1
   1bc60:	18d3      	adds	r3, r2, r3
   1bc62:	3306      	adds	r3, #6
   1bc64:	881b      	ldrh	r3, [r3, #0]
   1bc66:	001a      	movs	r2, r3
		if (hndCount >
   1bc68:	697b      	ldr	r3, [r7, #20]
   1bc6a:	429a      	cmp	r2, r3
   1bc6c:	da0b      	bge.n	1bc86 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1bc6e:	1dfb      	adds	r3, r7, #7
   1bc70:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1bc72:	697a      	ldr	r2, [r7, #20]
   1bc74:	b2d2      	uxtb	r2, r2
   1bc76:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1bc78:	4a10      	ldr	r2, [pc, #64]	; (1bcbc <prvTraceGetObjectHandle+0x18c>)
   1bc7a:	3318      	adds	r3, #24
   1bc7c:	005b      	lsls	r3, r3, #1
   1bc7e:	18d3      	adds	r3, r2, r3
   1bc80:	3306      	adds	r3, #6
   1bc82:	1c0a      	adds	r2, r1, #0
   1bc84:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1bc86:	4b0c      	ldr	r3, [pc, #48]	; (1bcb8 <prvTraceGetObjectHandle+0x188>)
   1bc88:	681b      	ldr	r3, [r3, #0]
   1bc8a:	1e5a      	subs	r2, r3, #1
   1bc8c:	4b0a      	ldr	r3, [pc, #40]	; (1bcb8 <prvTraceGetObjectHandle+0x188>)
   1bc8e:	601a      	str	r2, [r3, #0]
   1bc90:	69bb      	ldr	r3, [r7, #24]
   1bc92:	60bb      	str	r3, [r7, #8]
   1bc94:	68bb      	ldr	r3, [r7, #8]
   1bc96:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1bc9a:	231f      	movs	r3, #31
   1bc9c:	18fb      	adds	r3, r7, r3
   1bc9e:	781b      	ldrb	r3, [r3, #0]
}
   1bca0:	0018      	movs	r0, r3
   1bca2:	46bd      	mov	sp, r7
   1bca4:	b008      	add	sp, #32
   1bca6:	bd80      	pop	{r7, pc}
   1bca8:	20000c98 	.word	0x20000c98
   1bcac:	0003a524 	.word	0x0003a524
   1bcb0:	0001be4d 	.word	0x0001be4d
   1bcb4:	0003b104 	.word	0x0003b104
   1bcb8:	20000bf0 	.word	0x20000bf0
   1bcbc:	20000c08 	.word	0x20000c08
   1bcc0:	20000c9c 	.word	0x20000c9c
   1bcc4:	0001ab6d 	.word	0x0001ab6d

0001bcc8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1bcc8:	b590      	push	{r4, r7, lr}
   1bcca:	b085      	sub	sp, #20
   1bccc:	af00      	add	r7, sp, #0
   1bcce:	0002      	movs	r2, r0
   1bcd0:	1dfb      	adds	r3, r7, #7
   1bcd2:	701a      	strb	r2, [r3, #0]
   1bcd4:	1dbb      	adds	r3, r7, #6
   1bcd6:	1c0a      	adds	r2, r1, #0
   1bcd8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1bcda:	230e      	movs	r3, #14
   1bcdc:	18fc      	adds	r4, r7, r3
   1bcde:	1dfb      	adds	r3, r7, #7
   1bce0:	781a      	ldrb	r2, [r3, #0]
   1bce2:	1dbb      	adds	r3, r7, #6
   1bce4:	781b      	ldrb	r3, [r3, #0]
   1bce6:	0011      	movs	r1, r2
   1bce8:	0018      	movs	r0, r3
   1bcea:	4b09      	ldr	r3, [pc, #36]	; (1bd10 <prvMarkObjectAsUsed+0x48>)
   1bcec:	4798      	blx	r3
   1bcee:	0003      	movs	r3, r0
   1bcf0:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1bcf2:	4b08      	ldr	r3, [pc, #32]	; (1bd14 <prvMarkObjectAsUsed+0x4c>)
   1bcf4:	681a      	ldr	r2, [r3, #0]
   1bcf6:	230e      	movs	r3, #14
   1bcf8:	18fb      	adds	r3, r7, r3
   1bcfa:	881b      	ldrh	r3, [r3, #0]
   1bcfc:	219c      	movs	r1, #156	; 0x9c
   1bcfe:	18d3      	adds	r3, r2, r3
   1bd00:	185b      	adds	r3, r3, r1
   1bd02:	2201      	movs	r2, #1
   1bd04:	701a      	strb	r2, [r3, #0]
}
   1bd06:	46c0      	nop			; (mov r8, r8)
   1bd08:	46bd      	mov	sp, r7
   1bd0a:	b005      	add	sp, #20
   1bd0c:	bd90      	pop	{r4, r7, pc}
   1bd0e:	46c0      	nop			; (mov r8, r8)
   1bd10:	0001ba59 	.word	0x0001ba59
   1bd14:	20000c98 	.word	0x20000c98

0001bd18 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1bd18:	b580      	push	{r7, lr}
   1bd1a:	b086      	sub	sp, #24
   1bd1c:	af00      	add	r7, sp, #0
   1bd1e:	60f8      	str	r0, [r7, #12]
   1bd20:	60b9      	str	r1, [r7, #8]
   1bd22:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1bd24:	2300      	movs	r3, #0
   1bd26:	617b      	str	r3, [r7, #20]
   1bd28:	e010      	b.n	1bd4c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1bd2a:	68fa      	ldr	r2, [r7, #12]
   1bd2c:	697b      	ldr	r3, [r7, #20]
   1bd2e:	18d3      	adds	r3, r2, r3
   1bd30:	68b9      	ldr	r1, [r7, #8]
   1bd32:	697a      	ldr	r2, [r7, #20]
   1bd34:	188a      	adds	r2, r1, r2
   1bd36:	7812      	ldrb	r2, [r2, #0]
   1bd38:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1bd3a:	68ba      	ldr	r2, [r7, #8]
   1bd3c:	697b      	ldr	r3, [r7, #20]
   1bd3e:	18d3      	adds	r3, r2, r3
   1bd40:	781b      	ldrb	r3, [r3, #0]
   1bd42:	2b00      	cmp	r3, #0
   1bd44:	d007      	beq.n	1bd56 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1bd46:	697b      	ldr	r3, [r7, #20]
   1bd48:	3301      	adds	r3, #1
   1bd4a:	617b      	str	r3, [r7, #20]
   1bd4c:	697a      	ldr	r2, [r7, #20]
   1bd4e:	687b      	ldr	r3, [r7, #4]
   1bd50:	429a      	cmp	r2, r3
   1bd52:	d3ea      	bcc.n	1bd2a <prvStrncpy+0x12>
			break;
	}
}
   1bd54:	e000      	b.n	1bd58 <prvStrncpy+0x40>
			break;
   1bd56:	46c0      	nop			; (mov r8, r8)
}
   1bd58:	46c0      	nop			; (mov r8, r8)
   1bd5a:	46bd      	mov	sp, r7
   1bd5c:	b006      	add	sp, #24
   1bd5e:	bd80      	pop	{r7, pc}

0001bd60 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1bd60:	b580      	push	{r7, lr}
   1bd62:	b082      	sub	sp, #8
   1bd64:	af00      	add	r7, sp, #0
   1bd66:	603a      	str	r2, [r7, #0]
   1bd68:	1dfb      	adds	r3, r7, #7
   1bd6a:	1c02      	adds	r2, r0, #0
   1bd6c:	701a      	strb	r2, [r3, #0]
   1bd6e:	1dbb      	adds	r3, r7, #6
   1bd70:	1c0a      	adds	r2, r1, #0
   1bd72:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1bd74:	683b      	ldr	r3, [r7, #0]
   1bd76:	2b00      	cmp	r3, #0
   1bd78:	d104      	bne.n	1bd84 <prvTraceSetObjectName+0x24>
   1bd7a:	4b2a      	ldr	r3, [pc, #168]	; (1be24 <prvTraceSetObjectName+0xc4>)
   1bd7c:	0018      	movs	r0, r3
   1bd7e:	4b2a      	ldr	r3, [pc, #168]	; (1be28 <prvTraceSetObjectName+0xc8>)
   1bd80:	4798      	blx	r3
   1bd82:	e04b      	b.n	1be1c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1bd84:	1dfb      	adds	r3, r7, #7
   1bd86:	781b      	ldrb	r3, [r3, #0]
   1bd88:	2b08      	cmp	r3, #8
   1bd8a:	d904      	bls.n	1bd96 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1bd8c:	4b27      	ldr	r3, [pc, #156]	; (1be2c <prvTraceSetObjectName+0xcc>)
   1bd8e:	0018      	movs	r0, r3
   1bd90:	4b25      	ldr	r3, [pc, #148]	; (1be28 <prvTraceSetObjectName+0xc8>)
   1bd92:	4798      	blx	r3
		return;
   1bd94:	e042      	b.n	1be1c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1bd96:	1dbb      	adds	r3, r7, #6
   1bd98:	781b      	ldrb	r3, [r3, #0]
   1bd9a:	2b00      	cmp	r3, #0
   1bd9c:	d104      	bne.n	1bda8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1bd9e:	4b24      	ldr	r3, [pc, #144]	; (1be30 <prvTraceSetObjectName+0xd0>)
   1bda0:	0018      	movs	r0, r3
   1bda2:	4b21      	ldr	r3, [pc, #132]	; (1be28 <prvTraceSetObjectName+0xc8>)
   1bda4:	4798      	blx	r3
		return;
   1bda6:	e039      	b.n	1be1c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1bda8:	4b22      	ldr	r3, [pc, #136]	; (1be34 <prvTraceSetObjectName+0xd4>)
   1bdaa:	681a      	ldr	r2, [r3, #0]
   1bdac:	1dfb      	adds	r3, r7, #7
   1bdae:	781b      	ldrb	r3, [r3, #0]
   1bdb0:	2164      	movs	r1, #100	; 0x64
   1bdb2:	18d3      	adds	r3, r2, r3
   1bdb4:	185b      	adds	r3, r3, r1
   1bdb6:	781b      	ldrb	r3, [r3, #0]
   1bdb8:	1dba      	adds	r2, r7, #6
   1bdba:	7812      	ldrb	r2, [r2, #0]
   1bdbc:	429a      	cmp	r2, r3
   1bdbe:	d909      	bls.n	1bdd4 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1bdc0:	1dfb      	adds	r3, r7, #7
   1bdc2:	781b      	ldrb	r3, [r3, #0]
   1bdc4:	0018      	movs	r0, r3
   1bdc6:	4b1c      	ldr	r3, [pc, #112]	; (1be38 <prvTraceSetObjectName+0xd8>)
   1bdc8:	4798      	blx	r3
   1bdca:	0003      	movs	r3, r0
   1bdcc:	0018      	movs	r0, r3
   1bdce:	4b16      	ldr	r3, [pc, #88]	; (1be28 <prvTraceSetObjectName+0xc8>)
   1bdd0:	4798      	blx	r3
   1bdd2:	e023      	b.n	1be1c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1bdd4:	1dfb      	adds	r3, r7, #7
   1bdd6:	781a      	ldrb	r2, [r3, #0]
   1bdd8:	1dbb      	adds	r3, r7, #6
   1bdda:	781b      	ldrb	r3, [r3, #0]
   1bddc:	0011      	movs	r1, r2
   1bdde:	0018      	movs	r0, r3
   1bde0:	4b16      	ldr	r3, [pc, #88]	; (1be3c <prvTraceSetObjectName+0xdc>)
   1bde2:	4798      	blx	r3
   1bde4:	0003      	movs	r3, r0
   1bde6:	001a      	movs	r2, r3
   1bde8:	4b15      	ldr	r3, [pc, #84]	; (1be40 <prvTraceSetObjectName+0xe0>)
   1bdea:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1bdec:	4b15      	ldr	r3, [pc, #84]	; (1be44 <prvTraceSetObjectName+0xe4>)
   1bdee:	681b      	ldr	r3, [r3, #0]
   1bdf0:	2b00      	cmp	r3, #0
   1bdf2:	d113      	bne.n	1be1c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1bdf4:	4b0f      	ldr	r3, [pc, #60]	; (1be34 <prvTraceSetObjectName+0xd4>)
   1bdf6:	681a      	ldr	r2, [r3, #0]
   1bdf8:	4b11      	ldr	r3, [pc, #68]	; (1be40 <prvTraceSetObjectName+0xe0>)
   1bdfa:	881b      	ldrh	r3, [r3, #0]
   1bdfc:	3398      	adds	r3, #152	; 0x98
   1bdfe:	18d3      	adds	r3, r2, r3
   1be00:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1be02:	4b0c      	ldr	r3, [pc, #48]	; (1be34 <prvTraceSetObjectName+0xd4>)
   1be04:	681a      	ldr	r2, [r3, #0]
   1be06:	1dfb      	adds	r3, r7, #7
   1be08:	781b      	ldrb	r3, [r3, #0]
   1be0a:	2170      	movs	r1, #112	; 0x70
   1be0c:	18d3      	adds	r3, r2, r3
   1be0e:	185b      	adds	r3, r3, r1
   1be10:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1be12:	001a      	movs	r2, r3
   1be14:	683b      	ldr	r3, [r7, #0]
   1be16:	0019      	movs	r1, r3
   1be18:	4b0b      	ldr	r3, [pc, #44]	; (1be48 <prvTraceSetObjectName+0xe8>)
   1be1a:	4798      	blx	r3
		}
	}
}
   1be1c:	46bd      	mov	sp, r7
   1be1e:	b002      	add	sp, #8
   1be20:	bd80      	pop	{r7, pc}
   1be22:	46c0      	nop			; (mov r8, r8)
   1be24:	0003b208 	.word	0x0003b208
   1be28:	0001be4d 	.word	0x0001be4d
   1be2c:	0003b23c 	.word	0x0003b23c
   1be30:	0003b26c 	.word	0x0003b26c
   1be34:	20000c98 	.word	0x20000c98
   1be38:	0001ab6d 	.word	0x0001ab6d
   1be3c:	0001ba59 	.word	0x0001ba59
   1be40:	20000ca0 	.word	0x20000ca0
   1be44:	20000bf8 	.word	0x20000bf8
   1be48:	0001bd19 	.word	0x0001bd19

0001be4c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1be4c:	b580      	push	{r7, lr}
   1be4e:	b082      	sub	sp, #8
   1be50:	af00      	add	r7, sp, #0
   1be52:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1be54:	4b11      	ldr	r3, [pc, #68]	; (1be9c <prvTraceError+0x50>)
   1be56:	681b      	ldr	r3, [r3, #0]
   1be58:	2b00      	cmp	r3, #0
   1be5a:	d001      	beq.n	1be60 <prvTraceError+0x14>
	{
		vTraceStop();
   1be5c:	4b10      	ldr	r3, [pc, #64]	; (1bea0 <prvTraceError+0x54>)
   1be5e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1be60:	4b10      	ldr	r3, [pc, #64]	; (1bea4 <prvTraceError+0x58>)
   1be62:	681b      	ldr	r3, [r3, #0]
   1be64:	2b00      	cmp	r3, #0
   1be66:	d115      	bne.n	1be94 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1be68:	4b0e      	ldr	r3, [pc, #56]	; (1bea4 <prvTraceError+0x58>)
   1be6a:	687a      	ldr	r2, [r7, #4]
   1be6c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1be6e:	4b0b      	ldr	r3, [pc, #44]	; (1be9c <prvTraceError+0x50>)
   1be70:	681b      	ldr	r3, [r3, #0]
   1be72:	2b00      	cmp	r3, #0
   1be74:	d00e      	beq.n	1be94 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1be76:	4b09      	ldr	r3, [pc, #36]	; (1be9c <prvTraceError+0x50>)
   1be78:	681b      	ldr	r3, [r3, #0]
   1be7a:	4a0b      	ldr	r2, [pc, #44]	; (1bea8 <prvTraceError+0x5c>)
   1be7c:	1898      	adds	r0, r3, r2
   1be7e:	4b09      	ldr	r3, [pc, #36]	; (1bea4 <prvTraceError+0x58>)
   1be80:	681b      	ldr	r3, [r3, #0]
   1be82:	2250      	movs	r2, #80	; 0x50
   1be84:	0019      	movs	r1, r3
   1be86:	4b09      	ldr	r3, [pc, #36]	; (1beac <prvTraceError+0x60>)
   1be88:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1be8a:	4b04      	ldr	r3, [pc, #16]	; (1be9c <prvTraceError+0x50>)
   1be8c:	681b      	ldr	r3, [r3, #0]
   1be8e:	4a08      	ldr	r2, [pc, #32]	; (1beb0 <prvTraceError+0x64>)
   1be90:	2101      	movs	r1, #1
   1be92:	5099      	str	r1, [r3, r2]
		}
	}
}
   1be94:	46c0      	nop			; (mov r8, r8)
   1be96:	46bd      	mov	sp, r7
   1be98:	b002      	add	sp, #8
   1be9a:	bd80      	pop	{r7, pc}
   1be9c:	20000c98 	.word	0x20000c98
   1bea0:	0001ad11 	.word	0x0001ad11
   1bea4:	20000bf8 	.word	0x20000bf8
   1bea8:	000006bc 	.word	0x000006bc
   1beac:	0001bd19 	.word	0x0001bd19
   1beb0:	000006b4 	.word	0x000006b4

0001beb4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1beb4:	b580      	push	{r7, lr}
   1beb6:	b086      	sub	sp, #24
   1beb8:	af00      	add	r7, sp, #0
   1beba:	0002      	movs	r2, r0
   1bebc:	1dfb      	adds	r3, r7, #7
   1bebe:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1bec0:	2300      	movs	r3, #0
   1bec2:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1bec4:	2300      	movs	r3, #0
   1bec6:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1bec8:	1dfb      	adds	r3, r7, #7
   1beca:	781b      	ldrb	r3, [r3, #0]
   1becc:	2b00      	cmp	r3, #0
   1bece:	d000      	beq.n	1bed2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1bed0:	e089      	b.n	1bfe6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1bed2:	4b49      	ldr	r3, [pc, #292]	; (1bff8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1bed4:	0018      	movs	r0, r3
   1bed6:	4b49      	ldr	r3, [pc, #292]	; (1bffc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1bed8:	4798      	blx	r3
   1beda:	e08a      	b.n	1bff2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1bedc:	4b48      	ldr	r3, [pc, #288]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bede:	681b      	ldr	r3, [r3, #0]
   1bee0:	69da      	ldr	r2, [r3, #28]
   1bee2:	697b      	ldr	r3, [r7, #20]
   1bee4:	18d3      	adds	r3, r2, r3
   1bee6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1bee8:	4b45      	ldr	r3, [pc, #276]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1beea:	6819      	ldr	r1, [r3, #0]
   1beec:	693b      	ldr	r3, [r7, #16]
   1beee:	009a      	lsls	r2, r3, #2
   1bef0:	23e2      	movs	r3, #226	; 0xe2
   1bef2:	00db      	lsls	r3, r3, #3
   1bef4:	188a      	adds	r2, r1, r2
   1bef6:	18d3      	adds	r3, r2, r3
   1bef8:	781b      	ldrb	r3, [r3, #0]
   1befa:	2b98      	cmp	r3, #152	; 0x98
   1befc:	d934      	bls.n	1bf68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1befe:	4b40      	ldr	r3, [pc, #256]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf00:	6819      	ldr	r1, [r3, #0]
   1bf02:	693b      	ldr	r3, [r7, #16]
   1bf04:	009a      	lsls	r2, r3, #2
   1bf06:	23e2      	movs	r3, #226	; 0xe2
   1bf08:	00db      	lsls	r3, r3, #3
   1bf0a:	188a      	adds	r2, r1, r2
   1bf0c:	18d3      	adds	r3, r2, r3
   1bf0e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1bf10:	2ba7      	cmp	r3, #167	; 0xa7
   1bf12:	d829      	bhi.n	1bf68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1bf14:	4b3a      	ldr	r3, [pc, #232]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf16:	6819      	ldr	r1, [r3, #0]
   1bf18:	693b      	ldr	r3, [r7, #16]
   1bf1a:	009a      	lsls	r2, r3, #2
   1bf1c:	23e2      	movs	r3, #226	; 0xe2
   1bf1e:	00db      	lsls	r3, r3, #3
   1bf20:	188a      	adds	r2, r1, r2
   1bf22:	18d3      	adds	r3, r2, r3
   1bf24:	781a      	ldrb	r2, [r3, #0]
   1bf26:	230f      	movs	r3, #15
   1bf28:	18fb      	adds	r3, r7, r3
   1bf2a:	3268      	adds	r2, #104	; 0x68
   1bf2c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1bf2e:	230f      	movs	r3, #15
   1bf30:	18fb      	adds	r3, r7, r3
   1bf32:	781a      	ldrb	r2, [r3, #0]
   1bf34:	693b      	ldr	r3, [r7, #16]
   1bf36:	18d2      	adds	r2, r2, r3
   1bf38:	4b31      	ldr	r3, [pc, #196]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf3a:	681b      	ldr	r3, [r3, #0]
   1bf3c:	699b      	ldr	r3, [r3, #24]
   1bf3e:	429a      	cmp	r2, r3
   1bf40:	d24d      	bcs.n	1bfde <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1bf42:	4b2f      	ldr	r3, [pc, #188]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf44:	681a      	ldr	r2, [r3, #0]
   1bf46:	693b      	ldr	r3, [r7, #16]
   1bf48:	009b      	lsls	r3, r3, #2
   1bf4a:	21e2      	movs	r1, #226	; 0xe2
   1bf4c:	00c9      	lsls	r1, r1, #3
   1bf4e:	468c      	mov	ip, r1
   1bf50:	4463      	add	r3, ip
   1bf52:	18d0      	adds	r0, r2, r3
   1bf54:	230f      	movs	r3, #15
   1bf56:	18fb      	adds	r3, r7, r3
   1bf58:	781b      	ldrb	r3, [r3, #0]
   1bf5a:	3301      	adds	r3, #1
   1bf5c:	009b      	lsls	r3, r3, #2
   1bf5e:	001a      	movs	r2, r3
   1bf60:	2100      	movs	r1, #0
   1bf62:	4b28      	ldr	r3, [pc, #160]	; (1c004 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bf64:	4798      	blx	r3
		{
   1bf66:	e03a      	b.n	1bfde <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1bf68:	4b25      	ldr	r3, [pc, #148]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf6a:	6819      	ldr	r1, [r3, #0]
   1bf6c:	693b      	ldr	r3, [r7, #16]
   1bf6e:	009a      	lsls	r2, r3, #2
   1bf70:	23e2      	movs	r3, #226	; 0xe2
   1bf72:	00db      	lsls	r3, r3, #3
   1bf74:	188a      	adds	r2, r1, r2
   1bf76:	18d3      	adds	r3, r2, r3
   1bf78:	781b      	ldrb	r3, [r3, #0]
   1bf7a:	2b01      	cmp	r3, #1
   1bf7c:	d130      	bne.n	1bfe0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1bf7e:	693b      	ldr	r3, [r7, #16]
   1bf80:	1c5a      	adds	r2, r3, #1
   1bf82:	4b1f      	ldr	r3, [pc, #124]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf84:	681b      	ldr	r3, [r3, #0]
   1bf86:	699b      	ldr	r3, [r3, #24]
   1bf88:	429a      	cmp	r2, r3
   1bf8a:	d20e      	bcs.n	1bfaa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1bf8c:	4b1c      	ldr	r3, [pc, #112]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf8e:	681a      	ldr	r2, [r3, #0]
   1bf90:	693b      	ldr	r3, [r7, #16]
   1bf92:	009b      	lsls	r3, r3, #2
   1bf94:	21e2      	movs	r1, #226	; 0xe2
   1bf96:	00c9      	lsls	r1, r1, #3
   1bf98:	468c      	mov	ip, r1
   1bf9a:	4463      	add	r3, ip
   1bf9c:	18d3      	adds	r3, r2, r3
   1bf9e:	2208      	movs	r2, #8
   1bfa0:	2100      	movs	r1, #0
   1bfa2:	0018      	movs	r0, r3
   1bfa4:	4b17      	ldr	r3, [pc, #92]	; (1c004 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bfa6:	4798      	blx	r3
   1bfa8:	e01a      	b.n	1bfe0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1bfaa:	4b15      	ldr	r3, [pc, #84]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bfac:	681b      	ldr	r3, [r3, #0]
   1bfae:	22e2      	movs	r2, #226	; 0xe2
   1bfb0:	00d2      	lsls	r2, r2, #3
   1bfb2:	4694      	mov	ip, r2
   1bfb4:	4463      	add	r3, ip
   1bfb6:	2204      	movs	r2, #4
   1bfb8:	2100      	movs	r1, #0
   1bfba:	0018      	movs	r0, r3
   1bfbc:	4b11      	ldr	r3, [pc, #68]	; (1c004 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bfbe:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1bfc0:	4b0f      	ldr	r3, [pc, #60]	; (1c000 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bfc2:	681a      	ldr	r2, [r3, #0]
   1bfc4:	693b      	ldr	r3, [r7, #16]
   1bfc6:	009b      	lsls	r3, r3, #2
   1bfc8:	21e2      	movs	r1, #226	; 0xe2
   1bfca:	00c9      	lsls	r1, r1, #3
   1bfcc:	468c      	mov	ip, r1
   1bfce:	4463      	add	r3, ip
   1bfd0:	18d3      	adds	r3, r2, r3
   1bfd2:	2204      	movs	r2, #4
   1bfd4:	2100      	movs	r1, #0
   1bfd6:	0018      	movs	r0, r3
   1bfd8:	4b0a      	ldr	r3, [pc, #40]	; (1c004 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bfda:	4798      	blx	r3
   1bfdc:	e000      	b.n	1bfe0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1bfde:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1bfe0:	697b      	ldr	r3, [r7, #20]
   1bfe2:	3301      	adds	r3, #1
   1bfe4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1bfe6:	1dfb      	adds	r3, r7, #7
   1bfe8:	781a      	ldrb	r2, [r3, #0]
   1bfea:	697b      	ldr	r3, [r7, #20]
   1bfec:	429a      	cmp	r2, r3
   1bfee:	d900      	bls.n	1bff2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1bff0:	e774      	b.n	1bedc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1bff2:	46bd      	mov	sp, r7
   1bff4:	b006      	add	sp, #24
   1bff6:	bd80      	pop	{r7, pc}
   1bff8:	0003b2cc 	.word	0x0003b2cc
   1bffc:	0001be4d 	.word	0x0001be4d
   1c000:	20000c98 	.word	0x20000c98
   1c004:	0003796b 	.word	0x0003796b

0001c008 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1c008:	b580      	push	{r7, lr}
   1c00a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1c00c:	4b12      	ldr	r3, [pc, #72]	; (1c058 <prvTraceUpdateCounters+0x50>)
   1c00e:	681b      	ldr	r3, [r3, #0]
   1c010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c012:	2b00      	cmp	r3, #0
   1c014:	d01c      	beq.n	1c050 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1c016:	4b10      	ldr	r3, [pc, #64]	; (1c058 <prvTraceUpdateCounters+0x50>)
   1c018:	681b      	ldr	r3, [r3, #0]
   1c01a:	695a      	ldr	r2, [r3, #20]
   1c01c:	3201      	adds	r2, #1
   1c01e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1c020:	4b0d      	ldr	r3, [pc, #52]	; (1c058 <prvTraceUpdateCounters+0x50>)
   1c022:	681b      	ldr	r3, [r3, #0]
   1c024:	69da      	ldr	r2, [r3, #28]
   1c026:	3201      	adds	r2, #1
   1c028:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1c02a:	4b0b      	ldr	r3, [pc, #44]	; (1c058 <prvTraceUpdateCounters+0x50>)
   1c02c:	681b      	ldr	r3, [r3, #0]
   1c02e:	69da      	ldr	r2, [r3, #28]
   1c030:	232c      	movs	r3, #44	; 0x2c
   1c032:	33ff      	adds	r3, #255	; 0xff
   1c034:	429a      	cmp	r2, r3
   1c036:	d907      	bls.n	1c048 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1c038:	4b07      	ldr	r3, [pc, #28]	; (1c058 <prvTraceUpdateCounters+0x50>)
   1c03a:	681b      	ldr	r3, [r3, #0]
   1c03c:	2201      	movs	r2, #1
   1c03e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1c040:	4b05      	ldr	r3, [pc, #20]	; (1c058 <prvTraceUpdateCounters+0x50>)
   1c042:	681b      	ldr	r3, [r3, #0]
   1c044:	2200      	movs	r2, #0
   1c046:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1c048:	2001      	movs	r0, #1
   1c04a:	4b04      	ldr	r3, [pc, #16]	; (1c05c <prvTraceUpdateCounters+0x54>)
   1c04c:	4798      	blx	r3
   1c04e:	e000      	b.n	1c052 <prvTraceUpdateCounters+0x4a>
		return;
   1c050:	46c0      	nop			; (mov r8, r8)
#endif
}
   1c052:	46bd      	mov	sp, r7
   1c054:	bd80      	pop	{r7, pc}
   1c056:	46c0      	nop			; (mov r8, r8)
   1c058:	20000c98 	.word	0x20000c98
   1c05c:	0001beb5 	.word	0x0001beb5

0001c060 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1c060:	b5b0      	push	{r4, r5, r7, lr}
   1c062:	b086      	sub	sp, #24
   1c064:	af00      	add	r7, sp, #0
   1c066:	0002      	movs	r2, r0
   1c068:	1dbb      	adds	r3, r7, #6
   1c06a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1c06c:	2300      	movs	r3, #0
   1c06e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1c070:	2300      	movs	r3, #0
   1c072:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1c074:	2300      	movs	r3, #0
   1c076:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1c078:	1dbb      	adds	r3, r7, #6
   1c07a:	881b      	ldrh	r3, [r3, #0]
   1c07c:	2bff      	cmp	r3, #255	; 0xff
   1c07e:	d00a      	beq.n	1c096 <prvTraceGetDTS+0x36>
   1c080:	1dbb      	adds	r3, r7, #6
   1c082:	881b      	ldrh	r3, [r3, #0]
   1c084:	4a60      	ldr	r2, [pc, #384]	; (1c208 <prvTraceGetDTS+0x1a8>)
   1c086:	4293      	cmp	r3, r2
   1c088:	d005      	beq.n	1c096 <prvTraceGetDTS+0x36>
   1c08a:	4b60      	ldr	r3, [pc, #384]	; (1c20c <prvTraceGetDTS+0x1ac>)
   1c08c:	0018      	movs	r0, r3
   1c08e:	4b60      	ldr	r3, [pc, #384]	; (1c210 <prvTraceGetDTS+0x1b0>)
   1c090:	4798      	blx	r3
   1c092:	2300      	movs	r3, #0
   1c094:	e0b3      	b.n	1c1fe <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1c096:	4b5f      	ldr	r3, [pc, #380]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c098:	681b      	ldr	r3, [r3, #0]
   1c09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c09c:	2b00      	cmp	r3, #0
   1c09e:	d118      	bne.n	1c0d2 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1c0a0:	4b5d      	ldr	r3, [pc, #372]	; (1c218 <prvTraceGetDTS+0x1b8>)
   1c0a2:	681b      	ldr	r3, [r3, #0]
   1c0a4:	2b00      	cmp	r3, #0
   1c0a6:	d006      	beq.n	1c0b6 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1c0a8:	4b5a      	ldr	r3, [pc, #360]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c0aa:	681b      	ldr	r3, [r3, #0]
   1c0ac:	4a5a      	ldr	r2, [pc, #360]	; (1c218 <prvTraceGetDTS+0x1b8>)
   1c0ae:	6812      	ldr	r2, [r2, #0]
   1c0b0:	0892      	lsrs	r2, r2, #2
   1c0b2:	625a      	str	r2, [r3, #36]	; 0x24
   1c0b4:	e00d      	b.n	1c0d2 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1c0b6:	4b59      	ldr	r3, [pc, #356]	; (1c21c <prvTraceGetDTS+0x1bc>)
   1c0b8:	681a      	ldr	r2, [r3, #0]
   1c0ba:	4b59      	ldr	r3, [pc, #356]	; (1c220 <prvTraceGetDTS+0x1c0>)
   1c0bc:	681b      	ldr	r3, [r3, #0]
   1c0be:	429a      	cmp	r2, r3
   1c0c0:	d007      	beq.n	1c0d2 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1c0c2:	4b54      	ldr	r3, [pc, #336]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c0c4:	681c      	ldr	r4, [r3, #0]
   1c0c6:	2000      	movs	r0, #0
   1c0c8:	4b56      	ldr	r3, [pc, #344]	; (1c224 <prvTraceGetDTS+0x1c4>)
   1c0ca:	4798      	blx	r3
   1c0cc:	0003      	movs	r3, r0
   1c0ce:	089b      	lsrs	r3, r3, #2
   1c0d0:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1c0d2:	230c      	movs	r3, #12
   1c0d4:	18fb      	adds	r3, r7, r3
   1c0d6:	0018      	movs	r0, r3
   1c0d8:	4b53      	ldr	r3, [pc, #332]	; (1c228 <prvTraceGetDTS+0x1c8>)
   1c0da:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1c0dc:	68fa      	ldr	r2, [r7, #12]
   1c0de:	4b53      	ldr	r3, [pc, #332]	; (1c22c <prvTraceGetDTS+0x1cc>)
   1c0e0:	681b      	ldr	r3, [r3, #0]
   1c0e2:	1ad3      	subs	r3, r2, r3
   1c0e4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1c0e6:	68fa      	ldr	r2, [r7, #12]
   1c0e8:	4b50      	ldr	r3, [pc, #320]	; (1c22c <prvTraceGetDTS+0x1cc>)
   1c0ea:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1c0ec:	4b49      	ldr	r3, [pc, #292]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c0ee:	681b      	ldr	r3, [r3, #0]
   1c0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c0f2:	2b00      	cmp	r3, #0
   1c0f4:	d044      	beq.n	1c180 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1c0f6:	4b47      	ldr	r3, [pc, #284]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c0f8:	681b      	ldr	r3, [r3, #0]
   1c0fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c0fc:	693b      	ldr	r3, [r7, #16]
   1c0fe:	429a      	cmp	r2, r3
   1c100:	d21e      	bcs.n	1c140 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1c102:	4b44      	ldr	r3, [pc, #272]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c104:	681c      	ldr	r4, [r3, #0]
   1c106:	4b43      	ldr	r3, [pc, #268]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c108:	681b      	ldr	r3, [r3, #0]
   1c10a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1c10c:	4b41      	ldr	r3, [pc, #260]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c10e:	681b      	ldr	r3, [r3, #0]
   1c110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c112:	4b47      	ldr	r3, [pc, #284]	; (1c230 <prvTraceGetDTS+0x1d0>)
   1c114:	0011      	movs	r1, r2
   1c116:	6938      	ldr	r0, [r7, #16]
   1c118:	4798      	blx	r3
   1c11a:	0003      	movs	r3, r0
   1c11c:	18eb      	adds	r3, r5, r3
   1c11e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1c120:	4b3c      	ldr	r3, [pc, #240]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c122:	681c      	ldr	r4, [r3, #0]
   1c124:	4b3b      	ldr	r3, [pc, #236]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c126:	681b      	ldr	r3, [r3, #0]
   1c128:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1c12a:	4b3a      	ldr	r3, [pc, #232]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c12c:	681b      	ldr	r3, [r3, #0]
   1c12e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1c130:	693a      	ldr	r2, [r7, #16]
   1c132:	4b40      	ldr	r3, [pc, #256]	; (1c234 <prvTraceGetDTS+0x1d4>)
   1c134:	0010      	movs	r0, r2
   1c136:	4798      	blx	r3
   1c138:	000b      	movs	r3, r1
   1c13a:	18eb      	adds	r3, r5, r3
   1c13c:	62a3      	str	r3, [r4, #40]	; 0x28
   1c13e:	e007      	b.n	1c150 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1c140:	4b34      	ldr	r3, [pc, #208]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c142:	681b      	ldr	r3, [r3, #0]
   1c144:	4a33      	ldr	r2, [pc, #204]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c146:	6812      	ldr	r2, [r2, #0]
   1c148:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1c14a:	693a      	ldr	r2, [r7, #16]
   1c14c:	188a      	adds	r2, r1, r2
   1c14e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1c150:	4b30      	ldr	r3, [pc, #192]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c152:	681b      	ldr	r3, [r3, #0]
   1c154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c156:	4b2f      	ldr	r3, [pc, #188]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c158:	681b      	ldr	r3, [r3, #0]
   1c15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c15c:	429a      	cmp	r2, r3
   1c15e:	d313      	bcc.n	1c188 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1c160:	4b2c      	ldr	r3, [pc, #176]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c162:	681b      	ldr	r3, [r3, #0]
   1c164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c166:	3201      	adds	r2, #1
   1c168:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1c16a:	4b2a      	ldr	r3, [pc, #168]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c16c:	681b      	ldr	r3, [r3, #0]
   1c16e:	4a29      	ldr	r2, [pc, #164]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c170:	6812      	ldr	r2, [r2, #0]
   1c172:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1c174:	4a27      	ldr	r2, [pc, #156]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c176:	6812      	ldr	r2, [r2, #0]
   1c178:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1c17a:	1a8a      	subs	r2, r1, r2
   1c17c:	629a      	str	r2, [r3, #40]	; 0x28
   1c17e:	e003      	b.n	1c188 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1c180:	4b24      	ldr	r3, [pc, #144]	; (1c214 <prvTraceGetDTS+0x1b4>)
   1c182:	681b      	ldr	r3, [r3, #0]
   1c184:	68fa      	ldr	r2, [r7, #12]
   1c186:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1c188:	1dbb      	adds	r3, r7, #6
   1c18a:	881a      	ldrh	r2, [r3, #0]
   1c18c:	693b      	ldr	r3, [r7, #16]
   1c18e:	429a      	cmp	r2, r3
   1c190:	d22f      	bcs.n	1c1f2 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1c192:	4b29      	ldr	r3, [pc, #164]	; (1c238 <prvTraceGetDTS+0x1d8>)
   1c194:	4798      	blx	r3
   1c196:	0003      	movs	r3, r0
   1c198:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1c19a:	697b      	ldr	r3, [r7, #20]
   1c19c:	2b00      	cmp	r3, #0
   1c19e:	d028      	beq.n	1c1f2 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1c1a0:	1dbb      	adds	r3, r7, #6
   1c1a2:	881b      	ldrh	r3, [r3, #0]
   1c1a4:	4a18      	ldr	r2, [pc, #96]	; (1c208 <prvTraceGetDTS+0x1a8>)
   1c1a6:	4293      	cmp	r3, r2
   1c1a8:	d10b      	bne.n	1c1c2 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1c1aa:	697b      	ldr	r3, [r7, #20]
   1c1ac:	22a9      	movs	r2, #169	; 0xa9
   1c1ae:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1c1b0:	693b      	ldr	r3, [r7, #16]
   1c1b2:	0c1b      	lsrs	r3, r3, #16
   1c1b4:	b29a      	uxth	r2, r3
   1c1b6:	697b      	ldr	r3, [r7, #20]
   1c1b8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1c1ba:	697b      	ldr	r3, [r7, #20]
   1c1bc:	2200      	movs	r2, #0
   1c1be:	705a      	strb	r2, [r3, #1]
   1c1c0:	e015      	b.n	1c1ee <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1c1c2:	1dbb      	adds	r3, r7, #6
   1c1c4:	881b      	ldrh	r3, [r3, #0]
   1c1c6:	2bff      	cmp	r3, #255	; 0xff
   1c1c8:	d10d      	bne.n	1c1e6 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1c1ca:	697b      	ldr	r3, [r7, #20]
   1c1cc:	22a8      	movs	r2, #168	; 0xa8
   1c1ce:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1c1d0:	693b      	ldr	r3, [r7, #16]
   1c1d2:	0a1b      	lsrs	r3, r3, #8
   1c1d4:	b29a      	uxth	r2, r3
   1c1d6:	697b      	ldr	r3, [r7, #20]
   1c1d8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1c1da:	693b      	ldr	r3, [r7, #16]
   1c1dc:	0e1b      	lsrs	r3, r3, #24
   1c1de:	b2da      	uxtb	r2, r3
   1c1e0:	697b      	ldr	r3, [r7, #20]
   1c1e2:	705a      	strb	r2, [r3, #1]
   1c1e4:	e003      	b.n	1c1ee <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1c1e6:	4b15      	ldr	r3, [pc, #84]	; (1c23c <prvTraceGetDTS+0x1dc>)
   1c1e8:	0018      	movs	r0, r3
   1c1ea:	4b09      	ldr	r3, [pc, #36]	; (1c210 <prvTraceGetDTS+0x1b0>)
   1c1ec:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1c1ee:	4b14      	ldr	r3, [pc, #80]	; (1c240 <prvTraceGetDTS+0x1e0>)
   1c1f0:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1c1f2:	693b      	ldr	r3, [r7, #16]
   1c1f4:	b29b      	uxth	r3, r3
   1c1f6:	1dba      	adds	r2, r7, #6
   1c1f8:	8812      	ldrh	r2, [r2, #0]
   1c1fa:	4013      	ands	r3, r2
   1c1fc:	b29b      	uxth	r3, r3
}
   1c1fe:	0018      	movs	r0, r3
   1c200:	46bd      	mov	sp, r7
   1c202:	b006      	add	sp, #24
   1c204:	bdb0      	pop	{r4, r5, r7, pc}
   1c206:	46c0      	nop			; (mov r8, r8)
   1c208:	0000ffff 	.word	0x0000ffff
   1c20c:	0003b324 	.word	0x0003b324
   1c210:	0001be4d 	.word	0x0001be4d
   1c214:	20000c98 	.word	0x20000c98
   1c218:	20000bf4 	.word	0x20000bf4
   1c21c:	e000e018 	.word	0xe000e018
   1c220:	20005478 	.word	0x20005478
   1c224:	0002c1e9 	.word	0x0002c1e9
   1c228:	0001c245 	.word	0x0001c245
   1c22c:	20000ca4 	.word	0x20000ca4
   1c230:	00034e35 	.word	0x00034e35
   1c234:	00034f41 	.word	0x00034f41
   1c238:	0001ba05 	.word	0x0001ba05
   1c23c:	0003b364 	.word	0x0003b364
   1c240:	0001c009 	.word	0x0001c009

0001c244 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1c244:	b580      	push	{r7, lr}
   1c246:	b084      	sub	sp, #16
   1c248:	af00      	add	r7, sp, #0
   1c24a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1c24c:	2300      	movs	r3, #0
   1c24e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1c250:	2300      	movs	r3, #0
   1c252:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1c254:	4b2d      	ldr	r3, [pc, #180]	; (1c30c <prvTracePortGetTimeStamp+0xc8>)
   1c256:	681b      	ldr	r3, [r3, #0]
   1c258:	2b01      	cmp	r3, #1
   1c25a:	d107      	bne.n	1c26c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1c25c:	687b      	ldr	r3, [r7, #4]
   1c25e:	2b00      	cmp	r3, #0
   1c260:	d04f      	beq.n	1c302 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1c262:	4b2b      	ldr	r3, [pc, #172]	; (1c310 <prvTracePortGetTimeStamp+0xcc>)
   1c264:	681a      	ldr	r2, [r3, #0]
   1c266:	687b      	ldr	r3, [r7, #4]
   1c268:	601a      	str	r2, [r3, #0]
		return;
   1c26a:	e04a      	b.n	1c302 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1c26c:	4b29      	ldr	r3, [pc, #164]	; (1c314 <prvTracePortGetTimeStamp+0xd0>)
   1c26e:	681a      	ldr	r2, [r3, #0]
   1c270:	4b29      	ldr	r3, [pc, #164]	; (1c318 <prvTracePortGetTimeStamp+0xd4>)
   1c272:	681b      	ldr	r3, [r3, #0]
   1c274:	1ad3      	subs	r3, r2, r3
   1c276:	3301      	adds	r3, #1
   1c278:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1c27a:	4b28      	ldr	r3, [pc, #160]	; (1c31c <prvTracePortGetTimeStamp+0xd8>)
   1c27c:	681a      	ldr	r2, [r3, #0]
   1c27e:	4b28      	ldr	r3, [pc, #160]	; (1c320 <prvTracePortGetTimeStamp+0xdc>)
   1c280:	681b      	ldr	r3, [r3, #0]
   1c282:	1ad3      	subs	r3, r2, r3
   1c284:	3b01      	subs	r3, #1
   1c286:	2b00      	cmp	r3, #0
   1c288:	db03      	blt.n	1c292 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1c28a:	4b24      	ldr	r3, [pc, #144]	; (1c31c <prvTracePortGetTimeStamp+0xd8>)
   1c28c:	681b      	ldr	r3, [r3, #0]
   1c28e:	60fb      	str	r3, [r7, #12]
   1c290:	e002      	b.n	1c298 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1c292:	4b23      	ldr	r3, [pc, #140]	; (1c320 <prvTracePortGetTimeStamp+0xdc>)
   1c294:	681b      	ldr	r3, [r3, #0]
   1c296:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1c298:	4b20      	ldr	r3, [pc, #128]	; (1c31c <prvTracePortGetTimeStamp+0xd8>)
   1c29a:	681b      	ldr	r3, [r3, #0]
   1c29c:	68fa      	ldr	r2, [r7, #12]
   1c29e:	429a      	cmp	r2, r3
   1c2a0:	d107      	bne.n	1c2b2 <prvTracePortGetTimeStamp+0x6e>
   1c2a2:	4b20      	ldr	r3, [pc, #128]	; (1c324 <prvTracePortGetTimeStamp+0xe0>)
   1c2a4:	681b      	ldr	r3, [r3, #0]
   1c2a6:	68ba      	ldr	r2, [r7, #8]
   1c2a8:	429a      	cmp	r2, r3
   1c2aa:	d202      	bcs.n	1c2b2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1c2ac:	68fb      	ldr	r3, [r7, #12]
   1c2ae:	3301      	adds	r3, #1
   1c2b0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1c2b2:	687b      	ldr	r3, [r7, #4]
   1c2b4:	2b00      	cmp	r3, #0
   1c2b6:	d016      	beq.n	1c2e6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1c2b8:	4b16      	ldr	r3, [pc, #88]	; (1c314 <prvTracePortGetTimeStamp+0xd0>)
   1c2ba:	681b      	ldr	r3, [r3, #0]
   1c2bc:	3301      	adds	r3, #1
   1c2be:	089b      	lsrs	r3, r3, #2
   1c2c0:	68fa      	ldr	r2, [r7, #12]
   1c2c2:	435a      	muls	r2, r3
   1c2c4:	4b12      	ldr	r3, [pc, #72]	; (1c310 <prvTracePortGetTimeStamp+0xcc>)
   1c2c6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1c2c8:	4b12      	ldr	r3, [pc, #72]	; (1c314 <prvTracePortGetTimeStamp+0xd0>)
   1c2ca:	681b      	ldr	r3, [r3, #0]
   1c2cc:	3301      	adds	r3, #1
   1c2ce:	2203      	movs	r2, #3
   1c2d0:	4013      	ands	r3, r2
   1c2d2:	68fa      	ldr	r2, [r7, #12]
   1c2d4:	435a      	muls	r2, r3
   1c2d6:	68bb      	ldr	r3, [r7, #8]
   1c2d8:	18d3      	adds	r3, r2, r3
   1c2da:	089a      	lsrs	r2, r3, #2
   1c2dc:	4b0c      	ldr	r3, [pc, #48]	; (1c310 <prvTracePortGetTimeStamp+0xcc>)
   1c2de:	681b      	ldr	r3, [r3, #0]
   1c2e0:	18d2      	adds	r2, r2, r3
   1c2e2:	4b0b      	ldr	r3, [pc, #44]	; (1c310 <prvTracePortGetTimeStamp+0xcc>)
   1c2e4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1c2e6:	4b0d      	ldr	r3, [pc, #52]	; (1c31c <prvTracePortGetTimeStamp+0xd8>)
   1c2e8:	68fa      	ldr	r2, [r7, #12]
   1c2ea:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1c2ec:	687b      	ldr	r3, [r7, #4]
   1c2ee:	2b00      	cmp	r3, #0
   1c2f0:	d003      	beq.n	1c2fa <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1c2f2:	4b07      	ldr	r3, [pc, #28]	; (1c310 <prvTracePortGetTimeStamp+0xcc>)
   1c2f4:	681a      	ldr	r2, [r3, #0]
   1c2f6:	687b      	ldr	r3, [r7, #4]
   1c2f8:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1c2fa:	4b0a      	ldr	r3, [pc, #40]	; (1c324 <prvTracePortGetTimeStamp+0xe0>)
   1c2fc:	68ba      	ldr	r2, [r7, #8]
   1c2fe:	601a      	str	r2, [r3, #0]
   1c300:	e000      	b.n	1c304 <prvTracePortGetTimeStamp+0xc0>
		return;
   1c302:	46c0      	nop			; (mov r8, r8)
}
   1c304:	46bd      	mov	sp, r7
   1c306:	b004      	add	sp, #16
   1c308:	bd80      	pop	{r7, pc}
   1c30a:	46c0      	nop			; (mov r8, r8)
   1c30c:	20000be4 	.word	0x20000be4
   1c310:	20000be8 	.word	0x20000be8
   1c314:	e000e014 	.word	0xe000e014
   1c318:	e000e018 	.word	0xe000e018
   1c31c:	20000ca8 	.word	0x20000ca8
   1c320:	20000be0 	.word	0x20000be0
   1c324:	20000cac 	.word	0x20000cac

0001c328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1c328:	b580      	push	{r7, lr}
   1c32a:	b082      	sub	sp, #8
   1c32c:	af00      	add	r7, sp, #0
   1c32e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c330:	687b      	ldr	r3, [r7, #4]
   1c332:	3308      	adds	r3, #8
   1c334:	001a      	movs	r2, r3
   1c336:	687b      	ldr	r3, [r7, #4]
   1c338:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1c33a:	687b      	ldr	r3, [r7, #4]
   1c33c:	2201      	movs	r2, #1
   1c33e:	4252      	negs	r2, r2
   1c340:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c342:	687b      	ldr	r3, [r7, #4]
   1c344:	3308      	adds	r3, #8
   1c346:	001a      	movs	r2, r3
   1c348:	687b      	ldr	r3, [r7, #4]
   1c34a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c34c:	687b      	ldr	r3, [r7, #4]
   1c34e:	3308      	adds	r3, #8
   1c350:	001a      	movs	r2, r3
   1c352:	687b      	ldr	r3, [r7, #4]
   1c354:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1c356:	687b      	ldr	r3, [r7, #4]
   1c358:	2200      	movs	r2, #0
   1c35a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1c35c:	46c0      	nop			; (mov r8, r8)
   1c35e:	46bd      	mov	sp, r7
   1c360:	b002      	add	sp, #8
   1c362:	bd80      	pop	{r7, pc}

0001c364 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1c364:	b580      	push	{r7, lr}
   1c366:	b082      	sub	sp, #8
   1c368:	af00      	add	r7, sp, #0
   1c36a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1c36c:	687b      	ldr	r3, [r7, #4]
   1c36e:	2200      	movs	r2, #0
   1c370:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1c372:	46c0      	nop			; (mov r8, r8)
   1c374:	46bd      	mov	sp, r7
   1c376:	b002      	add	sp, #8
   1c378:	bd80      	pop	{r7, pc}

0001c37a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c37a:	b580      	push	{r7, lr}
   1c37c:	b084      	sub	sp, #16
   1c37e:	af00      	add	r7, sp, #0
   1c380:	6078      	str	r0, [r7, #4]
   1c382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1c384:	687b      	ldr	r3, [r7, #4]
   1c386:	685b      	ldr	r3, [r3, #4]
   1c388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1c38a:	683b      	ldr	r3, [r7, #0]
   1c38c:	68fa      	ldr	r2, [r7, #12]
   1c38e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1c390:	68fb      	ldr	r3, [r7, #12]
   1c392:	689a      	ldr	r2, [r3, #8]
   1c394:	683b      	ldr	r3, [r7, #0]
   1c396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1c398:	68fb      	ldr	r3, [r7, #12]
   1c39a:	689b      	ldr	r3, [r3, #8]
   1c39c:	683a      	ldr	r2, [r7, #0]
   1c39e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1c3a0:	68fb      	ldr	r3, [r7, #12]
   1c3a2:	683a      	ldr	r2, [r7, #0]
   1c3a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c3a6:	683b      	ldr	r3, [r7, #0]
   1c3a8:	687a      	ldr	r2, [r7, #4]
   1c3aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c3ac:	687b      	ldr	r3, [r7, #4]
   1c3ae:	681b      	ldr	r3, [r3, #0]
   1c3b0:	1c5a      	adds	r2, r3, #1
   1c3b2:	687b      	ldr	r3, [r7, #4]
   1c3b4:	601a      	str	r2, [r3, #0]
}
   1c3b6:	46c0      	nop			; (mov r8, r8)
   1c3b8:	46bd      	mov	sp, r7
   1c3ba:	b004      	add	sp, #16
   1c3bc:	bd80      	pop	{r7, pc}

0001c3be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c3be:	b580      	push	{r7, lr}
   1c3c0:	b084      	sub	sp, #16
   1c3c2:	af00      	add	r7, sp, #0
   1c3c4:	6078      	str	r0, [r7, #4]
   1c3c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1c3c8:	683b      	ldr	r3, [r7, #0]
   1c3ca:	681b      	ldr	r3, [r3, #0]
   1c3cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1c3ce:	68bb      	ldr	r3, [r7, #8]
   1c3d0:	3301      	adds	r3, #1
   1c3d2:	d103      	bne.n	1c3dc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1c3d4:	687b      	ldr	r3, [r7, #4]
   1c3d6:	691b      	ldr	r3, [r3, #16]
   1c3d8:	60fb      	str	r3, [r7, #12]
   1c3da:	e00c      	b.n	1c3f6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c3dc:	687b      	ldr	r3, [r7, #4]
   1c3de:	3308      	adds	r3, #8
   1c3e0:	60fb      	str	r3, [r7, #12]
   1c3e2:	e002      	b.n	1c3ea <vListInsert+0x2c>
   1c3e4:	68fb      	ldr	r3, [r7, #12]
   1c3e6:	685b      	ldr	r3, [r3, #4]
   1c3e8:	60fb      	str	r3, [r7, #12]
   1c3ea:	68fb      	ldr	r3, [r7, #12]
   1c3ec:	685b      	ldr	r3, [r3, #4]
   1c3ee:	681a      	ldr	r2, [r3, #0]
   1c3f0:	68bb      	ldr	r3, [r7, #8]
   1c3f2:	429a      	cmp	r2, r3
   1c3f4:	d9f6      	bls.n	1c3e4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1c3f6:	68fb      	ldr	r3, [r7, #12]
   1c3f8:	685a      	ldr	r2, [r3, #4]
   1c3fa:	683b      	ldr	r3, [r7, #0]
   1c3fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1c3fe:	683b      	ldr	r3, [r7, #0]
   1c400:	685b      	ldr	r3, [r3, #4]
   1c402:	683a      	ldr	r2, [r7, #0]
   1c404:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1c406:	683b      	ldr	r3, [r7, #0]
   1c408:	68fa      	ldr	r2, [r7, #12]
   1c40a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1c40c:	68fb      	ldr	r3, [r7, #12]
   1c40e:	683a      	ldr	r2, [r7, #0]
   1c410:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c412:	683b      	ldr	r3, [r7, #0]
   1c414:	687a      	ldr	r2, [r7, #4]
   1c416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c418:	687b      	ldr	r3, [r7, #4]
   1c41a:	681b      	ldr	r3, [r3, #0]
   1c41c:	1c5a      	adds	r2, r3, #1
   1c41e:	687b      	ldr	r3, [r7, #4]
   1c420:	601a      	str	r2, [r3, #0]
}
   1c422:	46c0      	nop			; (mov r8, r8)
   1c424:	46bd      	mov	sp, r7
   1c426:	b004      	add	sp, #16
   1c428:	bd80      	pop	{r7, pc}

0001c42a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1c42a:	b580      	push	{r7, lr}
   1c42c:	b084      	sub	sp, #16
   1c42e:	af00      	add	r7, sp, #0
   1c430:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1c432:	687b      	ldr	r3, [r7, #4]
   1c434:	691b      	ldr	r3, [r3, #16]
   1c436:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1c438:	687b      	ldr	r3, [r7, #4]
   1c43a:	685b      	ldr	r3, [r3, #4]
   1c43c:	687a      	ldr	r2, [r7, #4]
   1c43e:	6892      	ldr	r2, [r2, #8]
   1c440:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1c442:	687b      	ldr	r3, [r7, #4]
   1c444:	689b      	ldr	r3, [r3, #8]
   1c446:	687a      	ldr	r2, [r7, #4]
   1c448:	6852      	ldr	r2, [r2, #4]
   1c44a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1c44c:	68fb      	ldr	r3, [r7, #12]
   1c44e:	685a      	ldr	r2, [r3, #4]
   1c450:	687b      	ldr	r3, [r7, #4]
   1c452:	429a      	cmp	r2, r3
   1c454:	d103      	bne.n	1c45e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1c456:	687b      	ldr	r3, [r7, #4]
   1c458:	689a      	ldr	r2, [r3, #8]
   1c45a:	68fb      	ldr	r3, [r7, #12]
   1c45c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1c45e:	687b      	ldr	r3, [r7, #4]
   1c460:	2200      	movs	r2, #0
   1c462:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1c464:	68fb      	ldr	r3, [r7, #12]
   1c466:	681b      	ldr	r3, [r3, #0]
   1c468:	1e5a      	subs	r2, r3, #1
   1c46a:	68fb      	ldr	r3, [r7, #12]
   1c46c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1c46e:	68fb      	ldr	r3, [r7, #12]
   1c470:	681b      	ldr	r3, [r3, #0]
}
   1c472:	0018      	movs	r0, r3
   1c474:	46bd      	mov	sp, r7
   1c476:	b004      	add	sp, #16
   1c478:	bd80      	pop	{r7, pc}
	...

0001c47c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1c47c:	b580      	push	{r7, lr}
   1c47e:	b084      	sub	sp, #16
   1c480:	af00      	add	r7, sp, #0
   1c482:	60f8      	str	r0, [r7, #12]
   1c484:	60b9      	str	r1, [r7, #8]
   1c486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1c488:	68fb      	ldr	r3, [r7, #12]
   1c48a:	3b04      	subs	r3, #4
   1c48c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1c48e:	68fb      	ldr	r3, [r7, #12]
   1c490:	2280      	movs	r2, #128	; 0x80
   1c492:	0452      	lsls	r2, r2, #17
   1c494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c496:	68fb      	ldr	r3, [r7, #12]
   1c498:	3b04      	subs	r3, #4
   1c49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1c49c:	68ba      	ldr	r2, [r7, #8]
   1c49e:	68fb      	ldr	r3, [r7, #12]
   1c4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c4a2:	68fb      	ldr	r3, [r7, #12]
   1c4a4:	3b04      	subs	r3, #4
   1c4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1c4a8:	4a08      	ldr	r2, [pc, #32]	; (1c4cc <pxPortInitialiseStack+0x50>)
   1c4aa:	68fb      	ldr	r3, [r7, #12]
   1c4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1c4ae:	68fb      	ldr	r3, [r7, #12]
   1c4b0:	3b14      	subs	r3, #20
   1c4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1c4b4:	687a      	ldr	r2, [r7, #4]
   1c4b6:	68fb      	ldr	r3, [r7, #12]
   1c4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1c4ba:	68fb      	ldr	r3, [r7, #12]
   1c4bc:	3b20      	subs	r3, #32
   1c4be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1c4c0:	68fb      	ldr	r3, [r7, #12]
}
   1c4c2:	0018      	movs	r0, r3
   1c4c4:	46bd      	mov	sp, r7
   1c4c6:	b004      	add	sp, #16
   1c4c8:	bd80      	pop	{r7, pc}
   1c4ca:	46c0      	nop			; (mov r8, r8)
   1c4cc:	0001c4d1 	.word	0x0001c4d1

0001c4d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1c4d0:	b580      	push	{r7, lr}
   1c4d2:	b082      	sub	sp, #8
   1c4d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1c4d6:	2300      	movs	r3, #0
   1c4d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1c4da:	4b07      	ldr	r3, [pc, #28]	; (1c4f8 <prvTaskExitError+0x28>)
   1c4dc:	681b      	ldr	r3, [r3, #0]
   1c4de:	3301      	adds	r3, #1
   1c4e0:	d001      	beq.n	1c4e6 <prvTaskExitError+0x16>
   1c4e2:	b672      	cpsid	i
   1c4e4:	e7fe      	b.n	1c4e4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1c4e6:	b672      	cpsid	i
	while( ulDummy == 0 )
   1c4e8:	46c0      	nop			; (mov r8, r8)
   1c4ea:	687b      	ldr	r3, [r7, #4]
   1c4ec:	2b00      	cmp	r3, #0
   1c4ee:	d0fc      	beq.n	1c4ea <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1c4f0:	46c0      	nop			; (mov r8, r8)
   1c4f2:	46bd      	mov	sp, r7
   1c4f4:	b002      	add	sp, #8
   1c4f6:	bd80      	pop	{r7, pc}
   1c4f8:	2000011c 	.word	0x2000011c

0001c4fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1c4fc:	b580      	push	{r7, lr}
   1c4fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1c500:	46c0      	nop			; (mov r8, r8)
   1c502:	46bd      	mov	sp, r7
   1c504:	bd80      	pop	{r7, pc}
	...

0001c510 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1c510:	4a0b      	ldr	r2, [pc, #44]	; (1c540 <pxCurrentTCBConst2>)
   1c512:	6813      	ldr	r3, [r2, #0]
   1c514:	6818      	ldr	r0, [r3, #0]
   1c516:	3020      	adds	r0, #32
   1c518:	f380 8809 	msr	PSP, r0
   1c51c:	2002      	movs	r0, #2
   1c51e:	f380 8814 	msr	CONTROL, r0
   1c522:	f3bf 8f6f 	isb	sy
   1c526:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1c528:	46ae      	mov	lr, r5
   1c52a:	bc08      	pop	{r3}
   1c52c:	bc04      	pop	{r2}
   1c52e:	b662      	cpsie	i
   1c530:	4718      	bx	r3
   1c532:	46c0      	nop			; (mov r8, r8)
   1c534:	46c0      	nop			; (mov r8, r8)
   1c536:	46c0      	nop			; (mov r8, r8)
   1c538:	46c0      	nop			; (mov r8, r8)
   1c53a:	46c0      	nop			; (mov r8, r8)
   1c53c:	46c0      	nop			; (mov r8, r8)
   1c53e:	46c0      	nop			; (mov r8, r8)

0001c540 <pxCurrentTCBConst2>:
   1c540:	20003f80 	.word	0x20003f80
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1c544:	46c0      	nop			; (mov r8, r8)
   1c546:	46c0      	nop			; (mov r8, r8)

0001c548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1c548:	b580      	push	{r7, lr}
   1c54a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1c54c:	4b0e      	ldr	r3, [pc, #56]	; (1c588 <xPortStartScheduler+0x40>)
   1c54e:	4a0e      	ldr	r2, [pc, #56]	; (1c588 <xPortStartScheduler+0x40>)
   1c550:	6812      	ldr	r2, [r2, #0]
   1c552:	21ff      	movs	r1, #255	; 0xff
   1c554:	0409      	lsls	r1, r1, #16
   1c556:	430a      	orrs	r2, r1
   1c558:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1c55a:	4b0b      	ldr	r3, [pc, #44]	; (1c588 <xPortStartScheduler+0x40>)
   1c55c:	4a0a      	ldr	r2, [pc, #40]	; (1c588 <xPortStartScheduler+0x40>)
   1c55e:	6812      	ldr	r2, [r2, #0]
   1c560:	21ff      	movs	r1, #255	; 0xff
   1c562:	0609      	lsls	r1, r1, #24
   1c564:	430a      	orrs	r2, r1
   1c566:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1c568:	4b08      	ldr	r3, [pc, #32]	; (1c58c <xPortStartScheduler+0x44>)
   1c56a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1c56c:	4b08      	ldr	r3, [pc, #32]	; (1c590 <xPortStartScheduler+0x48>)
   1c56e:	2200      	movs	r2, #0
   1c570:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1c572:	4b08      	ldr	r3, [pc, #32]	; (1c594 <xPortStartScheduler+0x4c>)
   1c574:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1c576:	4b08      	ldr	r3, [pc, #32]	; (1c598 <xPortStartScheduler+0x50>)
   1c578:	4798      	blx	r3
	prvTaskExitError();
   1c57a:	4b08      	ldr	r3, [pc, #32]	; (1c59c <xPortStartScheduler+0x54>)
   1c57c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1c57e:	2300      	movs	r3, #0
}
   1c580:	0018      	movs	r0, r3
   1c582:	46bd      	mov	sp, r7
   1c584:	bd80      	pop	{r7, pc}
   1c586:	46c0      	nop			; (mov r8, r8)
   1c588:	e000ed20 	.word	0xe000ed20
   1c58c:	0001c6a9 	.word	0x0001c6a9
   1c590:	2000011c 	.word	0x2000011c
   1c594:	0001c511 	.word	0x0001c511
   1c598:	0001ec05 	.word	0x0001ec05
   1c59c:	0001c4d1 	.word	0x0001c4d1

0001c5a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1c5a0:	b580      	push	{r7, lr}
   1c5a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1c5a4:	4b03      	ldr	r3, [pc, #12]	; (1c5b4 <vPortYield+0x14>)
   1c5a6:	2280      	movs	r2, #128	; 0x80
   1c5a8:	0552      	lsls	r2, r2, #21
   1c5aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1c5ac:	46c0      	nop			; (mov r8, r8)
   1c5ae:	46bd      	mov	sp, r7
   1c5b0:	bd80      	pop	{r7, pc}
   1c5b2:	46c0      	nop			; (mov r8, r8)
   1c5b4:	e000ed04 	.word	0xe000ed04

0001c5b8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1c5b8:	b580      	push	{r7, lr}
   1c5ba:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1c5bc:	b672      	cpsid	i
    uxCriticalNesting++;
   1c5be:	4b06      	ldr	r3, [pc, #24]	; (1c5d8 <vPortEnterCritical+0x20>)
   1c5c0:	681b      	ldr	r3, [r3, #0]
   1c5c2:	1c5a      	adds	r2, r3, #1
   1c5c4:	4b04      	ldr	r3, [pc, #16]	; (1c5d8 <vPortEnterCritical+0x20>)
   1c5c6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1c5c8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1c5cc:	f3bf 8f6f 	isb	sy
}
   1c5d0:	46c0      	nop			; (mov r8, r8)
   1c5d2:	46bd      	mov	sp, r7
   1c5d4:	bd80      	pop	{r7, pc}
   1c5d6:	46c0      	nop			; (mov r8, r8)
   1c5d8:	2000011c 	.word	0x2000011c

0001c5dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1c5dc:	b580      	push	{r7, lr}
   1c5de:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1c5e0:	4b09      	ldr	r3, [pc, #36]	; (1c608 <vPortExitCritical+0x2c>)
   1c5e2:	681b      	ldr	r3, [r3, #0]
   1c5e4:	2b00      	cmp	r3, #0
   1c5e6:	d101      	bne.n	1c5ec <vPortExitCritical+0x10>
   1c5e8:	b672      	cpsid	i
   1c5ea:	e7fe      	b.n	1c5ea <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1c5ec:	4b06      	ldr	r3, [pc, #24]	; (1c608 <vPortExitCritical+0x2c>)
   1c5ee:	681b      	ldr	r3, [r3, #0]
   1c5f0:	1e5a      	subs	r2, r3, #1
   1c5f2:	4b05      	ldr	r3, [pc, #20]	; (1c608 <vPortExitCritical+0x2c>)
   1c5f4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1c5f6:	4b04      	ldr	r3, [pc, #16]	; (1c608 <vPortExitCritical+0x2c>)
   1c5f8:	681b      	ldr	r3, [r3, #0]
   1c5fa:	2b00      	cmp	r3, #0
   1c5fc:	d100      	bne.n	1c600 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1c5fe:	b662      	cpsie	i
    }
}
   1c600:	46c0      	nop			; (mov r8, r8)
   1c602:	46bd      	mov	sp, r7
   1c604:	bd80      	pop	{r7, pc}
   1c606:	46c0      	nop			; (mov r8, r8)
   1c608:	2000011c 	.word	0x2000011c

0001c60c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1c60c:	f3ef 8010 	mrs	r0, PRIMASK
   1c610:	b672      	cpsid	i
   1c612:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1c614:	46c0      	nop			; (mov r8, r8)
   1c616:	0018      	movs	r0, r3

0001c618 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1c618:	f380 8810 	msr	PRIMASK, r0
   1c61c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1c61e:	46c0      	nop			; (mov r8, r8)

0001c620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1c620:	f3ef 8009 	mrs	r0, PSP
   1c624:	4b0e      	ldr	r3, [pc, #56]	; (1c660 <pxCurrentTCBConst>)
   1c626:	681a      	ldr	r2, [r3, #0]
   1c628:	3820      	subs	r0, #32
   1c62a:	6010      	str	r0, [r2, #0]
   1c62c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c62e:	4644      	mov	r4, r8
   1c630:	464d      	mov	r5, r9
   1c632:	4656      	mov	r6, sl
   1c634:	465f      	mov	r7, fp
   1c636:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c638:	b508      	push	{r3, lr}
   1c63a:	b672      	cpsid	i
   1c63c:	f002 fae2 	bl	1ec04 <vTaskSwitchContext>
   1c640:	b662      	cpsie	i
   1c642:	bc0c      	pop	{r2, r3}
   1c644:	6811      	ldr	r1, [r2, #0]
   1c646:	6808      	ldr	r0, [r1, #0]
   1c648:	3010      	adds	r0, #16
   1c64a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c64c:	46a0      	mov	r8, r4
   1c64e:	46a9      	mov	r9, r5
   1c650:	46b2      	mov	sl, r6
   1c652:	46bb      	mov	fp, r7
   1c654:	f380 8809 	msr	PSP, r0
   1c658:	3820      	subs	r0, #32
   1c65a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c65c:	4718      	bx	r3
   1c65e:	46c0      	nop			; (mov r8, r8)

0001c660 <pxCurrentTCBConst>:
   1c660:	20003f80 	.word	0x20003f80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1c664:	46c0      	nop			; (mov r8, r8)
   1c666:	46c0      	nop			; (mov r8, r8)

0001c668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1c668:	b580      	push	{r7, lr}
   1c66a:	b082      	sub	sp, #8
   1c66c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1c66e:	4b0a      	ldr	r3, [pc, #40]	; (1c698 <SysTick_Handler+0x30>)
   1c670:	4798      	blx	r3
   1c672:	0003      	movs	r3, r0
   1c674:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1c676:	4b09      	ldr	r3, [pc, #36]	; (1c69c <SysTick_Handler+0x34>)
   1c678:	4798      	blx	r3
   1c67a:	1e03      	subs	r3, r0, #0
   1c67c:	d003      	beq.n	1c686 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1c67e:	4b08      	ldr	r3, [pc, #32]	; (1c6a0 <SysTick_Handler+0x38>)
   1c680:	2280      	movs	r2, #128	; 0x80
   1c682:	0552      	lsls	r2, r2, #21
   1c684:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1c686:	687b      	ldr	r3, [r7, #4]
   1c688:	0018      	movs	r0, r3
   1c68a:	4b06      	ldr	r3, [pc, #24]	; (1c6a4 <SysTick_Handler+0x3c>)
   1c68c:	4798      	blx	r3
}
   1c68e:	46c0      	nop			; (mov r8, r8)
   1c690:	46bd      	mov	sp, r7
   1c692:	b002      	add	sp, #8
   1c694:	bd80      	pop	{r7, pc}
   1c696:	46c0      	nop			; (mov r8, r8)
   1c698:	0001c60d 	.word	0x0001c60d
   1c69c:	0001ea15 	.word	0x0001ea15
   1c6a0:	e000ed04 	.word	0xe000ed04
   1c6a4:	0001c619 	.word	0x0001c619

0001c6a8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1c6a8:	b5b0      	push	{r4, r5, r7, lr}
   1c6aa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1c6ac:	4b0b      	ldr	r3, [pc, #44]	; (1c6dc <prvSetupTimerInterrupt+0x34>)
   1c6ae:	2200      	movs	r2, #0
   1c6b0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1c6b2:	4b0b      	ldr	r3, [pc, #44]	; (1c6e0 <prvSetupTimerInterrupt+0x38>)
   1c6b4:	2200      	movs	r2, #0
   1c6b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1c6b8:	4c0a      	ldr	r4, [pc, #40]	; (1c6e4 <prvSetupTimerInterrupt+0x3c>)
   1c6ba:	2000      	movs	r0, #0
   1c6bc:	4b0a      	ldr	r3, [pc, #40]	; (1c6e8 <prvSetupTimerInterrupt+0x40>)
   1c6be:	4798      	blx	r3
   1c6c0:	4b0a      	ldr	r3, [pc, #40]	; (1c6ec <prvSetupTimerInterrupt+0x44>)
   1c6c2:	22fa      	movs	r2, #250	; 0xfa
   1c6c4:	0091      	lsls	r1, r2, #2
   1c6c6:	4798      	blx	r3
   1c6c8:	0003      	movs	r3, r0
   1c6ca:	3b01      	subs	r3, #1
   1c6cc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1c6ce:	4b03      	ldr	r3, [pc, #12]	; (1c6dc <prvSetupTimerInterrupt+0x34>)
   1c6d0:	2207      	movs	r2, #7
   1c6d2:	601a      	str	r2, [r3, #0]
}
   1c6d4:	46c0      	nop			; (mov r8, r8)
   1c6d6:	46bd      	mov	sp, r7
   1c6d8:	bdb0      	pop	{r4, r5, r7, pc}
   1c6da:	46c0      	nop			; (mov r8, r8)
   1c6dc:	e000e010 	.word	0xe000e010
   1c6e0:	e000e018 	.word	0xe000e018
   1c6e4:	e000e014 	.word	0xe000e014
   1c6e8:	0002c1e9 	.word	0x0002c1e9
   1c6ec:	00034e35 	.word	0x00034e35

0001c6f0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1c6f0:	b580      	push	{r7, lr}
   1c6f2:	b084      	sub	sp, #16
   1c6f4:	af00      	add	r7, sp, #0
   1c6f6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1c6f8:	2300      	movs	r3, #0
   1c6fa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1c6fc:	687b      	ldr	r3, [r7, #4]
   1c6fe:	2207      	movs	r2, #7
   1c700:	4013      	ands	r3, r2
   1c702:	d004      	beq.n	1c70e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1c704:	687b      	ldr	r3, [r7, #4]
   1c706:	2207      	movs	r2, #7
   1c708:	4393      	bics	r3, r2
   1c70a:	3308      	adds	r3, #8
   1c70c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1c70e:	4b21      	ldr	r3, [pc, #132]	; (1c794 <pvPortMalloc+0xa4>)
   1c710:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1c712:	4b21      	ldr	r3, [pc, #132]	; (1c798 <pvPortMalloc+0xa8>)
   1c714:	681b      	ldr	r3, [r3, #0]
   1c716:	2b00      	cmp	r3, #0
   1c718:	d105      	bne.n	1c726 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1c71a:	4b20      	ldr	r3, [pc, #128]	; (1c79c <pvPortMalloc+0xac>)
   1c71c:	2207      	movs	r2, #7
   1c71e:	4393      	bics	r3, r2
   1c720:	001a      	movs	r2, r3
   1c722:	4b1d      	ldr	r3, [pc, #116]	; (1c798 <pvPortMalloc+0xa8>)
   1c724:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c726:	4b1e      	ldr	r3, [pc, #120]	; (1c7a0 <pvPortMalloc+0xb0>)
   1c728:	681a      	ldr	r2, [r3, #0]
   1c72a:	687b      	ldr	r3, [r7, #4]
   1c72c:	18d3      	adds	r3, r2, r3
   1c72e:	4a1d      	ldr	r2, [pc, #116]	; (1c7a4 <pvPortMalloc+0xb4>)
   1c730:	4293      	cmp	r3, r2
   1c732:	d813      	bhi.n	1c75c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1c734:	4b1a      	ldr	r3, [pc, #104]	; (1c7a0 <pvPortMalloc+0xb0>)
   1c736:	681a      	ldr	r2, [r3, #0]
   1c738:	687b      	ldr	r3, [r7, #4]
   1c73a:	18d2      	adds	r2, r2, r3
   1c73c:	4b18      	ldr	r3, [pc, #96]	; (1c7a0 <pvPortMalloc+0xb0>)
   1c73e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c740:	429a      	cmp	r2, r3
   1c742:	d90b      	bls.n	1c75c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1c744:	4b14      	ldr	r3, [pc, #80]	; (1c798 <pvPortMalloc+0xa8>)
   1c746:	681a      	ldr	r2, [r3, #0]
   1c748:	4b15      	ldr	r3, [pc, #84]	; (1c7a0 <pvPortMalloc+0xb0>)
   1c74a:	681b      	ldr	r3, [r3, #0]
   1c74c:	18d3      	adds	r3, r2, r3
   1c74e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1c750:	4b13      	ldr	r3, [pc, #76]	; (1c7a0 <pvPortMalloc+0xb0>)
   1c752:	681a      	ldr	r2, [r3, #0]
   1c754:	687b      	ldr	r3, [r7, #4]
   1c756:	18d2      	adds	r2, r2, r3
   1c758:	4b11      	ldr	r3, [pc, #68]	; (1c7a0 <pvPortMalloc+0xb0>)
   1c75a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1c75c:	68fb      	ldr	r3, [r7, #12]
   1c75e:	2b00      	cmp	r3, #0
   1c760:	d006      	beq.n	1c770 <pvPortMalloc+0x80>
   1c762:	68fb      	ldr	r3, [r7, #12]
   1c764:	687a      	ldr	r2, [r7, #4]
   1c766:	0019      	movs	r1, r3
   1c768:	2094      	movs	r0, #148	; 0x94
   1c76a:	4b0f      	ldr	r3, [pc, #60]	; (1c7a8 <pvPortMalloc+0xb8>)
   1c76c:	4798      	blx	r3
   1c76e:	e005      	b.n	1c77c <pvPortMalloc+0x8c>
   1c770:	68fb      	ldr	r3, [r7, #12]
   1c772:	687a      	ldr	r2, [r7, #4]
   1c774:	0019      	movs	r1, r3
   1c776:	20e8      	movs	r0, #232	; 0xe8
   1c778:	4b0b      	ldr	r3, [pc, #44]	; (1c7a8 <pvPortMalloc+0xb8>)
   1c77a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1c77c:	4b0b      	ldr	r3, [pc, #44]	; (1c7ac <pvPortMalloc+0xbc>)
   1c77e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1c780:	68fb      	ldr	r3, [r7, #12]
   1c782:	2b00      	cmp	r3, #0
   1c784:	d101      	bne.n	1c78a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1c786:	4b0a      	ldr	r3, [pc, #40]	; (1c7b0 <pvPortMalloc+0xc0>)
   1c788:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1c78a:	68fb      	ldr	r3, [r7, #12]
}
   1c78c:	0018      	movs	r0, r3
   1c78e:	46bd      	mov	sp, r7
   1c790:	b004      	add	sp, #16
   1c792:	bd80      	pop	{r7, pc}
   1c794:	0001e871 	.word	0x0001e871
   1c798:	20003f7c 	.word	0x20003f7c
   1c79c:	20000cb8 	.word	0x20000cb8
   1c7a0:	20003f78 	.word	0x20003f78
   1c7a4:	000032bf 	.word	0x000032bf
   1c7a8:	0001ae59 	.word	0x0001ae59
   1c7ac:	0001e889 	.word	0x0001e889
   1c7b0:	00034e05 	.word	0x00034e05

0001c7b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1c7b4:	b580      	push	{r7, lr}
   1c7b6:	b082      	sub	sp, #8
   1c7b8:	af00      	add	r7, sp, #0
   1c7ba:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1c7bc:	687b      	ldr	r3, [r7, #4]
   1c7be:	2b00      	cmp	r3, #0
   1c7c0:	d001      	beq.n	1c7c6 <vPortFree+0x12>
   1c7c2:	b672      	cpsid	i
   1c7c4:	e7fe      	b.n	1c7c4 <vPortFree+0x10>
}
   1c7c6:	46c0      	nop			; (mov r8, r8)
   1c7c8:	46bd      	mov	sp, r7
   1c7ca:	b002      	add	sp, #8
   1c7cc:	bd80      	pop	{r7, pc}
	...

0001c7d0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1c7d0:	b580      	push	{r7, lr}
   1c7d2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1c7d4:	4b03      	ldr	r3, [pc, #12]	; (1c7e4 <xPortGetFreeHeapSize+0x14>)
   1c7d6:	681b      	ldr	r3, [r3, #0]
   1c7d8:	22cb      	movs	r2, #203	; 0xcb
   1c7da:	0192      	lsls	r2, r2, #6
   1c7dc:	1ad3      	subs	r3, r2, r3
}
   1c7de:	0018      	movs	r0, r3
   1c7e0:	46bd      	mov	sp, r7
   1c7e2:	bd80      	pop	{r7, pc}
   1c7e4:	20003f78 	.word	0x20003f78

0001c7e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1c7e8:	b580      	push	{r7, lr}
   1c7ea:	b084      	sub	sp, #16
   1c7ec:	af00      	add	r7, sp, #0
   1c7ee:	6078      	str	r0, [r7, #4]
   1c7f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c7f2:	687b      	ldr	r3, [r7, #4]
   1c7f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1c7f6:	68fb      	ldr	r3, [r7, #12]
   1c7f8:	2b00      	cmp	r3, #0
   1c7fa:	d101      	bne.n	1c800 <xQueueGenericReset+0x18>
   1c7fc:	b672      	cpsid	i
   1c7fe:	e7fe      	b.n	1c7fe <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1c800:	4b23      	ldr	r3, [pc, #140]	; (1c890 <xQueueGenericReset+0xa8>)
   1c802:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1c804:	68fb      	ldr	r3, [r7, #12]
   1c806:	681a      	ldr	r2, [r3, #0]
   1c808:	68fb      	ldr	r3, [r7, #12]
   1c80a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1c80c:	68fb      	ldr	r3, [r7, #12]
   1c80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c810:	434b      	muls	r3, r1
   1c812:	18d2      	adds	r2, r2, r3
   1c814:	68fb      	ldr	r3, [r7, #12]
   1c816:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1c818:	68fb      	ldr	r3, [r7, #12]
   1c81a:	2200      	movs	r2, #0
   1c81c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1c81e:	68fb      	ldr	r3, [r7, #12]
   1c820:	681a      	ldr	r2, [r3, #0]
   1c822:	68fb      	ldr	r3, [r7, #12]
   1c824:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1c826:	68fb      	ldr	r3, [r7, #12]
   1c828:	681a      	ldr	r2, [r3, #0]
   1c82a:	68fb      	ldr	r3, [r7, #12]
   1c82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c82e:	1e59      	subs	r1, r3, #1
   1c830:	68fb      	ldr	r3, [r7, #12]
   1c832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c834:	434b      	muls	r3, r1
   1c836:	18d2      	adds	r2, r2, r3
   1c838:	68fb      	ldr	r3, [r7, #12]
   1c83a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1c83c:	68fb      	ldr	r3, [r7, #12]
   1c83e:	2244      	movs	r2, #68	; 0x44
   1c840:	21ff      	movs	r1, #255	; 0xff
   1c842:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1c844:	68fb      	ldr	r3, [r7, #12]
   1c846:	2245      	movs	r2, #69	; 0x45
   1c848:	21ff      	movs	r1, #255	; 0xff
   1c84a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1c84c:	683b      	ldr	r3, [r7, #0]
   1c84e:	2b00      	cmp	r3, #0
   1c850:	d10d      	bne.n	1c86e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c852:	68fb      	ldr	r3, [r7, #12]
   1c854:	691b      	ldr	r3, [r3, #16]
   1c856:	2b00      	cmp	r3, #0
   1c858:	d013      	beq.n	1c882 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c85a:	68fb      	ldr	r3, [r7, #12]
   1c85c:	3310      	adds	r3, #16
   1c85e:	0018      	movs	r0, r3
   1c860:	4b0c      	ldr	r3, [pc, #48]	; (1c894 <xQueueGenericReset+0xac>)
   1c862:	4798      	blx	r3
   1c864:	1e03      	subs	r3, r0, #0
   1c866:	d00c      	beq.n	1c882 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1c868:	4b0b      	ldr	r3, [pc, #44]	; (1c898 <xQueueGenericReset+0xb0>)
   1c86a:	4798      	blx	r3
   1c86c:	e009      	b.n	1c882 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1c86e:	68fb      	ldr	r3, [r7, #12]
   1c870:	3310      	adds	r3, #16
   1c872:	0018      	movs	r0, r3
   1c874:	4b09      	ldr	r3, [pc, #36]	; (1c89c <xQueueGenericReset+0xb4>)
   1c876:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1c878:	68fb      	ldr	r3, [r7, #12]
   1c87a:	3324      	adds	r3, #36	; 0x24
   1c87c:	0018      	movs	r0, r3
   1c87e:	4b07      	ldr	r3, [pc, #28]	; (1c89c <xQueueGenericReset+0xb4>)
   1c880:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1c882:	4b07      	ldr	r3, [pc, #28]	; (1c8a0 <xQueueGenericReset+0xb8>)
   1c884:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1c886:	2301      	movs	r3, #1
}
   1c888:	0018      	movs	r0, r3
   1c88a:	46bd      	mov	sp, r7
   1c88c:	b004      	add	sp, #16
   1c88e:	bd80      	pop	{r7, pc}
   1c890:	0001c5b9 	.word	0x0001c5b9
   1c894:	0001ee49 	.word	0x0001ee49
   1c898:	0001c5a1 	.word	0x0001c5a1
   1c89c:	0001c329 	.word	0x0001c329
   1c8a0:	0001c5dd 	.word	0x0001c5dd

0001c8a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1c8a4:	b590      	push	{r4, r7, lr}
   1c8a6:	b08b      	sub	sp, #44	; 0x2c
   1c8a8:	af02      	add	r7, sp, #8
   1c8aa:	60f8      	str	r0, [r7, #12]
   1c8ac:	60b9      	str	r1, [r7, #8]
   1c8ae:	1dfb      	adds	r3, r7, #7
   1c8b0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1c8b2:	68fb      	ldr	r3, [r7, #12]
   1c8b4:	2b00      	cmp	r3, #0
   1c8b6:	d101      	bne.n	1c8bc <xQueueGenericCreate+0x18>
   1c8b8:	b672      	cpsid	i
   1c8ba:	e7fe      	b.n	1c8ba <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1c8bc:	68bb      	ldr	r3, [r7, #8]
   1c8be:	2b00      	cmp	r3, #0
   1c8c0:	d102      	bne.n	1c8c8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1c8c2:	2300      	movs	r3, #0
   1c8c4:	61fb      	str	r3, [r7, #28]
   1c8c6:	e003      	b.n	1c8d0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c8c8:	68fb      	ldr	r3, [r7, #12]
   1c8ca:	68ba      	ldr	r2, [r7, #8]
   1c8cc:	4353      	muls	r3, r2
   1c8ce:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1c8d0:	69fb      	ldr	r3, [r7, #28]
   1c8d2:	3354      	adds	r3, #84	; 0x54
   1c8d4:	0018      	movs	r0, r3
   1c8d6:	4b19      	ldr	r3, [pc, #100]	; (1c93c <xQueueGenericCreate+0x98>)
   1c8d8:	4798      	blx	r3
   1c8da:	0003      	movs	r3, r0
   1c8dc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1c8de:	69bb      	ldr	r3, [r7, #24]
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	d00d      	beq.n	1c900 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1c8e4:	69bb      	ldr	r3, [r7, #24]
   1c8e6:	3354      	adds	r3, #84	; 0x54
   1c8e8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1c8ea:	1dfb      	adds	r3, r7, #7
   1c8ec:	781c      	ldrb	r4, [r3, #0]
   1c8ee:	697a      	ldr	r2, [r7, #20]
   1c8f0:	68b9      	ldr	r1, [r7, #8]
   1c8f2:	68f8      	ldr	r0, [r7, #12]
   1c8f4:	69bb      	ldr	r3, [r7, #24]
   1c8f6:	9300      	str	r3, [sp, #0]
   1c8f8:	0023      	movs	r3, r4
   1c8fa:	4c11      	ldr	r4, [pc, #68]	; (1c940 <xQueueGenericCreate+0x9c>)
   1c8fc:	47a0      	blx	r4
   1c8fe:	e017      	b.n	1c930 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1c900:	4b10      	ldr	r3, [pc, #64]	; (1c944 <xQueueGenericCreate+0xa0>)
   1c902:	4798      	blx	r3
   1c904:	0003      	movs	r3, r0
   1c906:	0018      	movs	r0, r3
   1c908:	4b0f      	ldr	r3, [pc, #60]	; (1c948 <xQueueGenericCreate+0xa4>)
   1c90a:	4798      	blx	r3
   1c90c:	0003      	movs	r3, r0
   1c90e:	001a      	movs	r2, r3
   1c910:	4b0e      	ldr	r3, [pc, #56]	; (1c94c <xQueueGenericCreate+0xa8>)
   1c912:	881b      	ldrh	r3, [r3, #0]
   1c914:	4013      	ands	r3, r2
   1c916:	b29b      	uxth	r3, r3
   1c918:	2b00      	cmp	r3, #0
   1c91a:	d009      	beq.n	1c930 <xQueueGenericCreate+0x8c>
   1c91c:	1dfb      	adds	r3, r7, #7
   1c91e:	781b      	ldrb	r3, [r3, #0]
   1c920:	4a0b      	ldr	r2, [pc, #44]	; (1c950 <xQueueGenericCreate+0xac>)
   1c922:	5cd3      	ldrb	r3, [r2, r3]
   1c924:	3340      	adds	r3, #64	; 0x40
   1c926:	b2db      	uxtb	r3, r3
   1c928:	2100      	movs	r1, #0
   1c92a:	0018      	movs	r0, r3
   1c92c:	4b09      	ldr	r3, [pc, #36]	; (1c954 <xQueueGenericCreate+0xb0>)
   1c92e:	4798      	blx	r3
		}

		return pxNewQueue;
   1c930:	69bb      	ldr	r3, [r7, #24]
	}
   1c932:	0018      	movs	r0, r3
   1c934:	46bd      	mov	sp, r7
   1c936:	b009      	add	sp, #36	; 0x24
   1c938:	bd90      	pop	{r4, r7, pc}
   1c93a:	46c0      	nop			; (mov r8, r8)
   1c93c:	0001c6f1 	.word	0x0001c6f1
   1c940:	0001c959 	.word	0x0001c959
   1c944:	0001a84d 	.word	0x0001a84d
   1c948:	0001a5b1 	.word	0x0001a5b1
   1c94c:	20000118 	.word	0x20000118
   1c950:	2000010c 	.word	0x2000010c
   1c954:	0001b2b1 	.word	0x0001b2b1

0001c958 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1c958:	b5b0      	push	{r4, r5, r7, lr}
   1c95a:	b084      	sub	sp, #16
   1c95c:	af00      	add	r7, sp, #0
   1c95e:	60f8      	str	r0, [r7, #12]
   1c960:	60b9      	str	r1, [r7, #8]
   1c962:	607a      	str	r2, [r7, #4]
   1c964:	001a      	movs	r2, r3
   1c966:	1cfb      	adds	r3, r7, #3
   1c968:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1c96a:	68bb      	ldr	r3, [r7, #8]
   1c96c:	2b00      	cmp	r3, #0
   1c96e:	d103      	bne.n	1c978 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1c970:	6a3b      	ldr	r3, [r7, #32]
   1c972:	6a3a      	ldr	r2, [r7, #32]
   1c974:	601a      	str	r2, [r3, #0]
   1c976:	e002      	b.n	1c97e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1c978:	6a3b      	ldr	r3, [r7, #32]
   1c97a:	687a      	ldr	r2, [r7, #4]
   1c97c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1c97e:	6a3b      	ldr	r3, [r7, #32]
   1c980:	68fa      	ldr	r2, [r7, #12]
   1c982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1c984:	6a3b      	ldr	r3, [r7, #32]
   1c986:	68ba      	ldr	r2, [r7, #8]
   1c988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1c98a:	6a3b      	ldr	r3, [r7, #32]
   1c98c:	2101      	movs	r1, #1
   1c98e:	0018      	movs	r0, r3
   1c990:	4b41      	ldr	r3, [pc, #260]	; (1ca98 <prvInitialiseNewQueue+0x140>)
   1c992:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1c994:	6a3b      	ldr	r3, [r7, #32]
   1c996:	1cfa      	adds	r2, r7, #3
   1c998:	2150      	movs	r1, #80	; 0x50
   1c99a:	7812      	ldrb	r2, [r2, #0]
   1c99c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1c99e:	6a3b      	ldr	r3, [r7, #32]
   1c9a0:	2200      	movs	r2, #0
   1c9a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1c9a4:	6a3b      	ldr	r3, [r7, #32]
   1c9a6:	0018      	movs	r0, r3
   1c9a8:	4b3c      	ldr	r3, [pc, #240]	; (1ca9c <prvInitialiseNewQueue+0x144>)
   1c9aa:	4798      	blx	r3
   1c9ac:	0003      	movs	r3, r0
   1c9ae:	001a      	movs	r2, r3
   1c9b0:	4b3b      	ldr	r3, [pc, #236]	; (1caa0 <prvInitialiseNewQueue+0x148>)
   1c9b2:	5c9b      	ldrb	r3, [r3, r2]
   1c9b4:	0018      	movs	r0, r3
   1c9b6:	4b3b      	ldr	r3, [pc, #236]	; (1caa4 <prvInitialiseNewQueue+0x14c>)
   1c9b8:	4798      	blx	r3
   1c9ba:	0003      	movs	r3, r0
   1c9bc:	b29a      	uxth	r2, r3
   1c9be:	6a3b      	ldr	r3, [r7, #32]
   1c9c0:	0011      	movs	r1, r2
   1c9c2:	0018      	movs	r0, r3
   1c9c4:	4b38      	ldr	r3, [pc, #224]	; (1caa8 <prvInitialiseNewQueue+0x150>)
   1c9c6:	4798      	blx	r3
   1c9c8:	4b38      	ldr	r3, [pc, #224]	; (1caac <prvInitialiseNewQueue+0x154>)
   1c9ca:	881a      	ldrh	r2, [r3, #0]
   1c9cc:	6a3b      	ldr	r3, [r7, #32]
   1c9ce:	0011      	movs	r1, r2
   1c9d0:	0018      	movs	r0, r3
   1c9d2:	4b37      	ldr	r3, [pc, #220]	; (1cab0 <prvInitialiseNewQueue+0x158>)
   1c9d4:	4798      	blx	r3
   1c9d6:	6a3b      	ldr	r3, [r7, #32]
   1c9d8:	0018      	movs	r0, r3
   1c9da:	4b30      	ldr	r3, [pc, #192]	; (1ca9c <prvInitialiseNewQueue+0x144>)
   1c9dc:	4798      	blx	r3
   1c9de:	0003      	movs	r3, r0
   1c9e0:	001a      	movs	r2, r3
   1c9e2:	4b2f      	ldr	r3, [pc, #188]	; (1caa0 <prvInitialiseNewQueue+0x148>)
   1c9e4:	5c9c      	ldrb	r4, [r3, r2]
   1c9e6:	6a3b      	ldr	r3, [r7, #32]
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	4b32      	ldr	r3, [pc, #200]	; (1cab4 <prvInitialiseNewQueue+0x15c>)
   1c9ec:	4798      	blx	r3
   1c9ee:	0003      	movs	r3, r0
   1c9f0:	b2db      	uxtb	r3, r3
   1c9f2:	0019      	movs	r1, r3
   1c9f4:	0020      	movs	r0, r4
   1c9f6:	4b30      	ldr	r3, [pc, #192]	; (1cab8 <prvInitialiseNewQueue+0x160>)
   1c9f8:	4798      	blx	r3
   1c9fa:	4b30      	ldr	r3, [pc, #192]	; (1cabc <prvInitialiseNewQueue+0x164>)
   1c9fc:	4798      	blx	r3
   1c9fe:	0003      	movs	r3, r0
   1ca00:	0018      	movs	r0, r3
   1ca02:	4b2f      	ldr	r3, [pc, #188]	; (1cac0 <prvInitialiseNewQueue+0x168>)
   1ca04:	4798      	blx	r3
   1ca06:	0003      	movs	r3, r0
   1ca08:	001a      	movs	r2, r3
   1ca0a:	4b2e      	ldr	r3, [pc, #184]	; (1cac4 <prvInitialiseNewQueue+0x16c>)
   1ca0c:	881b      	ldrh	r3, [r3, #0]
   1ca0e:	4013      	ands	r3, r2
   1ca10:	b29b      	uxth	r3, r3
   1ca12:	2b00      	cmp	r3, #0
   1ca14:	d029      	beq.n	1ca6a <prvInitialiseNewQueue+0x112>
   1ca16:	6a3b      	ldr	r3, [r7, #32]
   1ca18:	0018      	movs	r0, r3
   1ca1a:	4b2b      	ldr	r3, [pc, #172]	; (1cac8 <prvInitialiseNewQueue+0x170>)
   1ca1c:	4798      	blx	r3
   1ca1e:	0003      	movs	r3, r0
   1ca20:	001a      	movs	r2, r3
   1ca22:	4b28      	ldr	r3, [pc, #160]	; (1cac4 <prvInitialiseNewQueue+0x16c>)
   1ca24:	881b      	ldrh	r3, [r3, #0]
   1ca26:	4013      	ands	r3, r2
   1ca28:	b29b      	uxth	r3, r3
   1ca2a:	2b00      	cmp	r3, #0
   1ca2c:	d01d      	beq.n	1ca6a <prvInitialiseNewQueue+0x112>
   1ca2e:	6a3b      	ldr	r3, [r7, #32]
   1ca30:	0018      	movs	r0, r3
   1ca32:	4b1a      	ldr	r3, [pc, #104]	; (1ca9c <prvInitialiseNewQueue+0x144>)
   1ca34:	4798      	blx	r3
   1ca36:	0003      	movs	r3, r0
   1ca38:	001a      	movs	r2, r3
   1ca3a:	4b19      	ldr	r3, [pc, #100]	; (1caa0 <prvInitialiseNewQueue+0x148>)
   1ca3c:	5c9b      	ldrb	r3, [r3, r2]
   1ca3e:	3318      	adds	r3, #24
   1ca40:	b2db      	uxtb	r3, r3
   1ca42:	001d      	movs	r5, r3
   1ca44:	6a3b      	ldr	r3, [r7, #32]
   1ca46:	0018      	movs	r0, r3
   1ca48:	4b14      	ldr	r3, [pc, #80]	; (1ca9c <prvInitialiseNewQueue+0x144>)
   1ca4a:	4798      	blx	r3
   1ca4c:	0003      	movs	r3, r0
   1ca4e:	001a      	movs	r2, r3
   1ca50:	4b13      	ldr	r3, [pc, #76]	; (1caa0 <prvInitialiseNewQueue+0x148>)
   1ca52:	5c9c      	ldrb	r4, [r3, r2]
   1ca54:	6a3b      	ldr	r3, [r7, #32]
   1ca56:	0018      	movs	r0, r3
   1ca58:	4b16      	ldr	r3, [pc, #88]	; (1cab4 <prvInitialiseNewQueue+0x15c>)
   1ca5a:	4798      	blx	r3
   1ca5c:	0003      	movs	r3, r0
   1ca5e:	b2db      	uxtb	r3, r3
   1ca60:	001a      	movs	r2, r3
   1ca62:	0021      	movs	r1, r4
   1ca64:	0028      	movs	r0, r5
   1ca66:	4b19      	ldr	r3, [pc, #100]	; (1cacc <prvInitialiseNewQueue+0x174>)
   1ca68:	4798      	blx	r3
   1ca6a:	6a3b      	ldr	r3, [r7, #32]
   1ca6c:	0018      	movs	r0, r3
   1ca6e:	4b0b      	ldr	r3, [pc, #44]	; (1ca9c <prvInitialiseNewQueue+0x144>)
   1ca70:	4798      	blx	r3
   1ca72:	0003      	movs	r3, r0
   1ca74:	001a      	movs	r2, r3
   1ca76:	4b0a      	ldr	r3, [pc, #40]	; (1caa0 <prvInitialiseNewQueue+0x148>)
   1ca78:	5c9c      	ldrb	r4, [r3, r2]
   1ca7a:	6a3b      	ldr	r3, [r7, #32]
   1ca7c:	0018      	movs	r0, r3
   1ca7e:	4b0d      	ldr	r3, [pc, #52]	; (1cab4 <prvInitialiseNewQueue+0x15c>)
   1ca80:	4798      	blx	r3
   1ca82:	0003      	movs	r3, r0
   1ca84:	b2db      	uxtb	r3, r3
   1ca86:	2200      	movs	r2, #0
   1ca88:	0019      	movs	r1, r3
   1ca8a:	0020      	movs	r0, r4
   1ca8c:	4b10      	ldr	r3, [pc, #64]	; (1cad0 <prvInitialiseNewQueue+0x178>)
   1ca8e:	4798      	blx	r3
}
   1ca90:	46c0      	nop			; (mov r8, r8)
   1ca92:	46bd      	mov	sp, r7
   1ca94:	b004      	add	sp, #16
   1ca96:	bdb0      	pop	{r4, r5, r7, pc}
   1ca98:	0001c7e9 	.word	0x0001c7e9
   1ca9c:	0001a571 	.word	0x0001a571
   1caa0:	2000010c 	.word	0x2000010c
   1caa4:	0001bb31 	.word	0x0001bb31
   1caa8:	0001a695 	.word	0x0001a695
   1caac:	2000011a 	.word	0x2000011a
   1cab0:	0001a6d1 	.word	0x0001a6d1
   1cab4:	0001a651 	.word	0x0001a651
   1cab8:	0001bcc9 	.word	0x0001bcc9
   1cabc:	0001a84d 	.word	0x0001a84d
   1cac0:	0001a5b1 	.word	0x0001a5b1
   1cac4:	20000118 	.word	0x20000118
   1cac8:	0001a671 	.word	0x0001a671
   1cacc:	0001afa9 	.word	0x0001afa9
   1cad0:	0001b605 	.word	0x0001b605

0001cad4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1cad4:	b590      	push	{r4, r7, lr}
   1cad6:	b083      	sub	sp, #12
   1cad8:	af00      	add	r7, sp, #0
   1cada:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1cadc:	687b      	ldr	r3, [r7, #4]
   1cade:	2b00      	cmp	r3, #0
   1cae0:	d00e      	beq.n	1cb00 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	2200      	movs	r2, #0
   1cae6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1cae8:	687b      	ldr	r3, [r7, #4]
   1caea:	2200      	movs	r2, #0
   1caec:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1caee:	687b      	ldr	r3, [r7, #4]
   1caf0:	2200      	movs	r2, #0
   1caf2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1caf4:	6878      	ldr	r0, [r7, #4]
   1caf6:	2300      	movs	r3, #0
   1caf8:	2200      	movs	r2, #0
   1cafa:	2100      	movs	r1, #0
   1cafc:	4c02      	ldr	r4, [pc, #8]	; (1cb08 <prvInitialiseMutex+0x34>)
   1cafe:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1cb00:	46c0      	nop			; (mov r8, r8)
   1cb02:	46bd      	mov	sp, r7
   1cb04:	b003      	add	sp, #12
   1cb06:	bd90      	pop	{r4, r7, pc}
   1cb08:	0001cb4d 	.word	0x0001cb4d

0001cb0c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1cb0c:	b580      	push	{r7, lr}
   1cb0e:	b086      	sub	sp, #24
   1cb10:	af00      	add	r7, sp, #0
   1cb12:	0002      	movs	r2, r0
   1cb14:	1dfb      	adds	r3, r7, #7
   1cb16:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1cb18:	2301      	movs	r3, #1
   1cb1a:	617b      	str	r3, [r7, #20]
   1cb1c:	2300      	movs	r3, #0
   1cb1e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1cb20:	1dfb      	adds	r3, r7, #7
   1cb22:	781a      	ldrb	r2, [r3, #0]
   1cb24:	6939      	ldr	r1, [r7, #16]
   1cb26:	697b      	ldr	r3, [r7, #20]
   1cb28:	0018      	movs	r0, r3
   1cb2a:	4b06      	ldr	r3, [pc, #24]	; (1cb44 <xQueueCreateMutex+0x38>)
   1cb2c:	4798      	blx	r3
   1cb2e:	0003      	movs	r3, r0
   1cb30:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1cb32:	68fb      	ldr	r3, [r7, #12]
   1cb34:	0018      	movs	r0, r3
   1cb36:	4b04      	ldr	r3, [pc, #16]	; (1cb48 <xQueueCreateMutex+0x3c>)
   1cb38:	4798      	blx	r3

		return pxNewQueue;
   1cb3a:	68fb      	ldr	r3, [r7, #12]
	}
   1cb3c:	0018      	movs	r0, r3
   1cb3e:	46bd      	mov	sp, r7
   1cb40:	b006      	add	sp, #24
   1cb42:	bd80      	pop	{r7, pc}
   1cb44:	0001c8a5 	.word	0x0001c8a5
   1cb48:	0001cad5 	.word	0x0001cad5

0001cb4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1cb4c:	b5b0      	push	{r4, r5, r7, lr}
   1cb4e:	b08a      	sub	sp, #40	; 0x28
   1cb50:	af00      	add	r7, sp, #0
   1cb52:	60f8      	str	r0, [r7, #12]
   1cb54:	60b9      	str	r1, [r7, #8]
   1cb56:	607a      	str	r2, [r7, #4]
   1cb58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1cb5a:	2300      	movs	r3, #0
   1cb5c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cb5e:	68fb      	ldr	r3, [r7, #12]
   1cb60:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1cb62:	6a3b      	ldr	r3, [r7, #32]
   1cb64:	2b00      	cmp	r3, #0
   1cb66:	d101      	bne.n	1cb6c <xQueueGenericSend+0x20>
   1cb68:	b672      	cpsid	i
   1cb6a:	e7fe      	b.n	1cb6a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1cb6c:	68bb      	ldr	r3, [r7, #8]
   1cb6e:	2b00      	cmp	r3, #0
   1cb70:	d103      	bne.n	1cb7a <xQueueGenericSend+0x2e>
   1cb72:	6a3b      	ldr	r3, [r7, #32]
   1cb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cb76:	2b00      	cmp	r3, #0
   1cb78:	d101      	bne.n	1cb7e <xQueueGenericSend+0x32>
   1cb7a:	2301      	movs	r3, #1
   1cb7c:	e000      	b.n	1cb80 <xQueueGenericSend+0x34>
   1cb7e:	2300      	movs	r3, #0
   1cb80:	2b00      	cmp	r3, #0
   1cb82:	d101      	bne.n	1cb88 <xQueueGenericSend+0x3c>
   1cb84:	b672      	cpsid	i
   1cb86:	e7fe      	b.n	1cb86 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1cb88:	683b      	ldr	r3, [r7, #0]
   1cb8a:	2b02      	cmp	r3, #2
   1cb8c:	d103      	bne.n	1cb96 <xQueueGenericSend+0x4a>
   1cb8e:	6a3b      	ldr	r3, [r7, #32]
   1cb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cb92:	2b01      	cmp	r3, #1
   1cb94:	d101      	bne.n	1cb9a <xQueueGenericSend+0x4e>
   1cb96:	2301      	movs	r3, #1
   1cb98:	e000      	b.n	1cb9c <xQueueGenericSend+0x50>
   1cb9a:	2300      	movs	r3, #0
   1cb9c:	2b00      	cmp	r3, #0
   1cb9e:	d101      	bne.n	1cba4 <xQueueGenericSend+0x58>
   1cba0:	b672      	cpsid	i
   1cba2:	e7fe      	b.n	1cba2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1cba4:	4bbc      	ldr	r3, [pc, #752]	; (1ce98 <xQueueGenericSend+0x34c>)
   1cba6:	4798      	blx	r3
   1cba8:	1e03      	subs	r3, r0, #0
   1cbaa:	d102      	bne.n	1cbb2 <xQueueGenericSend+0x66>
   1cbac:	687b      	ldr	r3, [r7, #4]
   1cbae:	2b00      	cmp	r3, #0
   1cbb0:	d101      	bne.n	1cbb6 <xQueueGenericSend+0x6a>
   1cbb2:	2301      	movs	r3, #1
   1cbb4:	e000      	b.n	1cbb8 <xQueueGenericSend+0x6c>
   1cbb6:	2300      	movs	r3, #0
   1cbb8:	2b00      	cmp	r3, #0
   1cbba:	d101      	bne.n	1cbc0 <xQueueGenericSend+0x74>
   1cbbc:	b672      	cpsid	i
   1cbbe:	e7fe      	b.n	1cbbe <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1cbc0:	4bb6      	ldr	r3, [pc, #728]	; (1ce9c <xQueueGenericSend+0x350>)
   1cbc2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1cbc4:	6a3b      	ldr	r3, [r7, #32]
   1cbc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cbc8:	6a3b      	ldr	r3, [r7, #32]
   1cbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cbcc:	429a      	cmp	r2, r3
   1cbce:	d303      	bcc.n	1cbd8 <xQueueGenericSend+0x8c>
   1cbd0:	683b      	ldr	r3, [r7, #0]
   1cbd2:	2b02      	cmp	r3, #2
   1cbd4:	d000      	beq.n	1cbd8 <xQueueGenericSend+0x8c>
   1cbd6:	e08e      	b.n	1ccf6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1cbd8:	4bb1      	ldr	r3, [pc, #708]	; (1cea0 <xQueueGenericSend+0x354>)
   1cbda:	4798      	blx	r3
   1cbdc:	0003      	movs	r3, r0
   1cbde:	0018      	movs	r0, r3
   1cbe0:	4bb0      	ldr	r3, [pc, #704]	; (1cea4 <xQueueGenericSend+0x358>)
   1cbe2:	4798      	blx	r3
   1cbe4:	0003      	movs	r3, r0
   1cbe6:	001a      	movs	r2, r3
   1cbe8:	4baf      	ldr	r3, [pc, #700]	; (1cea8 <xQueueGenericSend+0x35c>)
   1cbea:	881b      	ldrh	r3, [r3, #0]
   1cbec:	4013      	ands	r3, r2
   1cbee:	b29b      	uxth	r3, r3
   1cbf0:	2b00      	cmp	r3, #0
   1cbf2:	d02e      	beq.n	1cc52 <xQueueGenericSend+0x106>
   1cbf4:	6a3b      	ldr	r3, [r7, #32]
   1cbf6:	0018      	movs	r0, r3
   1cbf8:	4bac      	ldr	r3, [pc, #688]	; (1ceac <xQueueGenericSend+0x360>)
   1cbfa:	4798      	blx	r3
   1cbfc:	0003      	movs	r3, r0
   1cbfe:	001a      	movs	r2, r3
   1cc00:	4ba9      	ldr	r3, [pc, #676]	; (1cea8 <xQueueGenericSend+0x35c>)
   1cc02:	881b      	ldrh	r3, [r3, #0]
   1cc04:	4013      	ands	r3, r2
   1cc06:	b29b      	uxth	r3, r3
   1cc08:	2b00      	cmp	r3, #0
   1cc0a:	d022      	beq.n	1cc52 <xQueueGenericSend+0x106>
   1cc0c:	683b      	ldr	r3, [r7, #0]
   1cc0e:	2b00      	cmp	r3, #0
   1cc10:	d10b      	bne.n	1cc2a <xQueueGenericSend+0xde>
   1cc12:	6a3b      	ldr	r3, [r7, #32]
   1cc14:	0018      	movs	r0, r3
   1cc16:	4ba6      	ldr	r3, [pc, #664]	; (1ceb0 <xQueueGenericSend+0x364>)
   1cc18:	4798      	blx	r3
   1cc1a:	0003      	movs	r3, r0
   1cc1c:	001a      	movs	r2, r3
   1cc1e:	4ba5      	ldr	r3, [pc, #660]	; (1ceb4 <xQueueGenericSend+0x368>)
   1cc20:	5c9b      	ldrb	r3, [r3, r2]
   1cc22:	3320      	adds	r3, #32
   1cc24:	b2db      	uxtb	r3, r3
   1cc26:	001d      	movs	r5, r3
   1cc28:	e000      	b.n	1cc2c <xQueueGenericSend+0xe0>
   1cc2a:	2525      	movs	r5, #37	; 0x25
   1cc2c:	6a3b      	ldr	r3, [r7, #32]
   1cc2e:	0018      	movs	r0, r3
   1cc30:	4b9f      	ldr	r3, [pc, #636]	; (1ceb0 <xQueueGenericSend+0x364>)
   1cc32:	4798      	blx	r3
   1cc34:	0003      	movs	r3, r0
   1cc36:	001a      	movs	r2, r3
   1cc38:	4b9e      	ldr	r3, [pc, #632]	; (1ceb4 <xQueueGenericSend+0x368>)
   1cc3a:	5c9c      	ldrb	r4, [r3, r2]
   1cc3c:	6a3b      	ldr	r3, [r7, #32]
   1cc3e:	0018      	movs	r0, r3
   1cc40:	4b9d      	ldr	r3, [pc, #628]	; (1ceb8 <xQueueGenericSend+0x36c>)
   1cc42:	4798      	blx	r3
   1cc44:	0003      	movs	r3, r0
   1cc46:	b2db      	uxtb	r3, r3
   1cc48:	001a      	movs	r2, r3
   1cc4a:	0021      	movs	r1, r4
   1cc4c:	0028      	movs	r0, r5
   1cc4e:	4b9b      	ldr	r3, [pc, #620]	; (1cebc <xQueueGenericSend+0x370>)
   1cc50:	4798      	blx	r3
   1cc52:	6a3b      	ldr	r3, [r7, #32]
   1cc54:	0018      	movs	r0, r3
   1cc56:	4b96      	ldr	r3, [pc, #600]	; (1ceb0 <xQueueGenericSend+0x364>)
   1cc58:	4798      	blx	r3
   1cc5a:	0003      	movs	r3, r0
   1cc5c:	001a      	movs	r2, r3
   1cc5e:	4b95      	ldr	r3, [pc, #596]	; (1ceb4 <xQueueGenericSend+0x368>)
   1cc60:	5c9c      	ldrb	r4, [r3, r2]
   1cc62:	6a3b      	ldr	r3, [r7, #32]
   1cc64:	0018      	movs	r0, r3
   1cc66:	4b94      	ldr	r3, [pc, #592]	; (1ceb8 <xQueueGenericSend+0x36c>)
   1cc68:	4798      	blx	r3
   1cc6a:	0003      	movs	r3, r0
   1cc6c:	b2dd      	uxtb	r5, r3
   1cc6e:	6a3b      	ldr	r3, [r7, #32]
   1cc70:	0018      	movs	r0, r3
   1cc72:	4b8f      	ldr	r3, [pc, #572]	; (1ceb0 <xQueueGenericSend+0x364>)
   1cc74:	4798      	blx	r3
   1cc76:	0003      	movs	r3, r0
   1cc78:	001a      	movs	r2, r3
   1cc7a:	4b8e      	ldr	r3, [pc, #568]	; (1ceb4 <xQueueGenericSend+0x368>)
   1cc7c:	5c9b      	ldrb	r3, [r3, r2]
   1cc7e:	2b02      	cmp	r3, #2
   1cc80:	d005      	beq.n	1cc8e <xQueueGenericSend+0x142>
   1cc82:	6a3b      	ldr	r3, [r7, #32]
   1cc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cc86:	b2db      	uxtb	r3, r3
   1cc88:	3301      	adds	r3, #1
   1cc8a:	b2db      	uxtb	r3, r3
   1cc8c:	e000      	b.n	1cc90 <xQueueGenericSend+0x144>
   1cc8e:	2300      	movs	r3, #0
   1cc90:	001a      	movs	r2, r3
   1cc92:	0029      	movs	r1, r5
   1cc94:	0020      	movs	r0, r4
   1cc96:	4b8a      	ldr	r3, [pc, #552]	; (1cec0 <xQueueGenericSend+0x374>)
   1cc98:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1cc9a:	683a      	ldr	r2, [r7, #0]
   1cc9c:	68b9      	ldr	r1, [r7, #8]
   1cc9e:	6a3b      	ldr	r3, [r7, #32]
   1cca0:	0018      	movs	r0, r3
   1cca2:	4b88      	ldr	r3, [pc, #544]	; (1cec4 <xQueueGenericSend+0x378>)
   1cca4:	4798      	blx	r3
   1cca6:	0003      	movs	r3, r0
   1cca8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ccaa:	6a3b      	ldr	r3, [r7, #32]
   1ccac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ccae:	2b00      	cmp	r3, #0
   1ccb0:	d00a      	beq.n	1ccc8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ccb2:	683a      	ldr	r2, [r7, #0]
   1ccb4:	6a3b      	ldr	r3, [r7, #32]
   1ccb6:	0011      	movs	r1, r2
   1ccb8:	0018      	movs	r0, r3
   1ccba:	4b83      	ldr	r3, [pc, #524]	; (1cec8 <xQueueGenericSend+0x37c>)
   1ccbc:	4798      	blx	r3
   1ccbe:	1e03      	subs	r3, r0, #0
   1ccc0:	d015      	beq.n	1ccee <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1ccc2:	4b82      	ldr	r3, [pc, #520]	; (1cecc <xQueueGenericSend+0x380>)
   1ccc4:	4798      	blx	r3
   1ccc6:	e012      	b.n	1ccee <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ccc8:	6a3b      	ldr	r3, [r7, #32]
   1ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cccc:	2b00      	cmp	r3, #0
   1ccce:	d009      	beq.n	1cce4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ccd0:	6a3b      	ldr	r3, [r7, #32]
   1ccd2:	3324      	adds	r3, #36	; 0x24
   1ccd4:	0018      	movs	r0, r3
   1ccd6:	4b7e      	ldr	r3, [pc, #504]	; (1ced0 <xQueueGenericSend+0x384>)
   1ccd8:	4798      	blx	r3
   1ccda:	1e03      	subs	r3, r0, #0
   1ccdc:	d007      	beq.n	1ccee <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1ccde:	4b7b      	ldr	r3, [pc, #492]	; (1cecc <xQueueGenericSend+0x380>)
   1cce0:	4798      	blx	r3
   1cce2:	e004      	b.n	1ccee <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1cce4:	69fb      	ldr	r3, [r7, #28]
   1cce6:	2b00      	cmp	r3, #0
   1cce8:	d001      	beq.n	1ccee <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1ccea:	4b78      	ldr	r3, [pc, #480]	; (1cecc <xQueueGenericSend+0x380>)
   1ccec:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1ccee:	4b79      	ldr	r3, [pc, #484]	; (1ced4 <xQueueGenericSend+0x388>)
   1ccf0:	4798      	blx	r3
				return pdPASS;
   1ccf2:	2301      	movs	r3, #1
   1ccf4:	e142      	b.n	1cf7c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ccf6:	687b      	ldr	r3, [r7, #4]
   1ccf8:	2b00      	cmp	r3, #0
   1ccfa:	d140      	bne.n	1cd7e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ccfc:	4b75      	ldr	r3, [pc, #468]	; (1ced4 <xQueueGenericSend+0x388>)
   1ccfe:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1cd00:	4b67      	ldr	r3, [pc, #412]	; (1cea0 <xQueueGenericSend+0x354>)
   1cd02:	4798      	blx	r3
   1cd04:	0003      	movs	r3, r0
   1cd06:	0018      	movs	r0, r3
   1cd08:	4b66      	ldr	r3, [pc, #408]	; (1cea4 <xQueueGenericSend+0x358>)
   1cd0a:	4798      	blx	r3
   1cd0c:	0003      	movs	r3, r0
   1cd0e:	001a      	movs	r2, r3
   1cd10:	4b65      	ldr	r3, [pc, #404]	; (1cea8 <xQueueGenericSend+0x35c>)
   1cd12:	881b      	ldrh	r3, [r3, #0]
   1cd14:	4013      	ands	r3, r2
   1cd16:	b29b      	uxth	r3, r3
   1cd18:	2b00      	cmp	r3, #0
   1cd1a:	d02e      	beq.n	1cd7a <xQueueGenericSend+0x22e>
   1cd1c:	6a3b      	ldr	r3, [r7, #32]
   1cd1e:	0018      	movs	r0, r3
   1cd20:	4b62      	ldr	r3, [pc, #392]	; (1ceac <xQueueGenericSend+0x360>)
   1cd22:	4798      	blx	r3
   1cd24:	0003      	movs	r3, r0
   1cd26:	001a      	movs	r2, r3
   1cd28:	4b5f      	ldr	r3, [pc, #380]	; (1cea8 <xQueueGenericSend+0x35c>)
   1cd2a:	881b      	ldrh	r3, [r3, #0]
   1cd2c:	4013      	ands	r3, r2
   1cd2e:	b29b      	uxth	r3, r3
   1cd30:	2b00      	cmp	r3, #0
   1cd32:	d022      	beq.n	1cd7a <xQueueGenericSend+0x22e>
   1cd34:	683b      	ldr	r3, [r7, #0]
   1cd36:	2b00      	cmp	r3, #0
   1cd38:	d10b      	bne.n	1cd52 <xQueueGenericSend+0x206>
   1cd3a:	6a3b      	ldr	r3, [r7, #32]
   1cd3c:	0018      	movs	r0, r3
   1cd3e:	4b5c      	ldr	r3, [pc, #368]	; (1ceb0 <xQueueGenericSend+0x364>)
   1cd40:	4798      	blx	r3
   1cd42:	0003      	movs	r3, r0
   1cd44:	001a      	movs	r2, r3
   1cd46:	4b5b      	ldr	r3, [pc, #364]	; (1ceb4 <xQueueGenericSend+0x368>)
   1cd48:	5c9b      	ldrb	r3, [r3, r2]
   1cd4a:	3348      	adds	r3, #72	; 0x48
   1cd4c:	b2db      	uxtb	r3, r3
   1cd4e:	001d      	movs	r5, r3
   1cd50:	e000      	b.n	1cd54 <xQueueGenericSend+0x208>
   1cd52:	254d      	movs	r5, #77	; 0x4d
   1cd54:	6a3b      	ldr	r3, [r7, #32]
   1cd56:	0018      	movs	r0, r3
   1cd58:	4b55      	ldr	r3, [pc, #340]	; (1ceb0 <xQueueGenericSend+0x364>)
   1cd5a:	4798      	blx	r3
   1cd5c:	0003      	movs	r3, r0
   1cd5e:	001a      	movs	r2, r3
   1cd60:	4b54      	ldr	r3, [pc, #336]	; (1ceb4 <xQueueGenericSend+0x368>)
   1cd62:	5c9c      	ldrb	r4, [r3, r2]
   1cd64:	6a3b      	ldr	r3, [r7, #32]
   1cd66:	0018      	movs	r0, r3
   1cd68:	4b53      	ldr	r3, [pc, #332]	; (1ceb8 <xQueueGenericSend+0x36c>)
   1cd6a:	4798      	blx	r3
   1cd6c:	0003      	movs	r3, r0
   1cd6e:	b2db      	uxtb	r3, r3
   1cd70:	001a      	movs	r2, r3
   1cd72:	0021      	movs	r1, r4
   1cd74:	0028      	movs	r0, r5
   1cd76:	4b51      	ldr	r3, [pc, #324]	; (1cebc <xQueueGenericSend+0x370>)
   1cd78:	4798      	blx	r3
					return errQUEUE_FULL;
   1cd7a:	2300      	movs	r3, #0
   1cd7c:	e0fe      	b.n	1cf7c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cd80:	2b00      	cmp	r3, #0
   1cd82:	d106      	bne.n	1cd92 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1cd84:	2314      	movs	r3, #20
   1cd86:	18fb      	adds	r3, r7, r3
   1cd88:	0018      	movs	r0, r3
   1cd8a:	4b53      	ldr	r3, [pc, #332]	; (1ced8 <xQueueGenericSend+0x38c>)
   1cd8c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1cd8e:	2301      	movs	r3, #1
   1cd90:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1cd92:	4b50      	ldr	r3, [pc, #320]	; (1ced4 <xQueueGenericSend+0x388>)
   1cd94:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1cd96:	4b51      	ldr	r3, [pc, #324]	; (1cedc <xQueueGenericSend+0x390>)
   1cd98:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1cd9a:	4b40      	ldr	r3, [pc, #256]	; (1ce9c <xQueueGenericSend+0x350>)
   1cd9c:	4798      	blx	r3
   1cd9e:	6a3b      	ldr	r3, [r7, #32]
   1cda0:	2244      	movs	r2, #68	; 0x44
   1cda2:	5c9b      	ldrb	r3, [r3, r2]
   1cda4:	b25b      	sxtb	r3, r3
   1cda6:	3301      	adds	r3, #1
   1cda8:	d103      	bne.n	1cdb2 <xQueueGenericSend+0x266>
   1cdaa:	6a3b      	ldr	r3, [r7, #32]
   1cdac:	2244      	movs	r2, #68	; 0x44
   1cdae:	2100      	movs	r1, #0
   1cdb0:	5499      	strb	r1, [r3, r2]
   1cdb2:	6a3b      	ldr	r3, [r7, #32]
   1cdb4:	2245      	movs	r2, #69	; 0x45
   1cdb6:	5c9b      	ldrb	r3, [r3, r2]
   1cdb8:	b25b      	sxtb	r3, r3
   1cdba:	3301      	adds	r3, #1
   1cdbc:	d103      	bne.n	1cdc6 <xQueueGenericSend+0x27a>
   1cdbe:	6a3b      	ldr	r3, [r7, #32]
   1cdc0:	2245      	movs	r2, #69	; 0x45
   1cdc2:	2100      	movs	r1, #0
   1cdc4:	5499      	strb	r1, [r3, r2]
   1cdc6:	4b43      	ldr	r3, [pc, #268]	; (1ced4 <xQueueGenericSend+0x388>)
   1cdc8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1cdca:	1d3a      	adds	r2, r7, #4
   1cdcc:	2314      	movs	r3, #20
   1cdce:	18fb      	adds	r3, r7, r3
   1cdd0:	0011      	movs	r1, r2
   1cdd2:	0018      	movs	r0, r3
   1cdd4:	4b42      	ldr	r3, [pc, #264]	; (1cee0 <xQueueGenericSend+0x394>)
   1cdd6:	4798      	blx	r3
   1cdd8:	1e03      	subs	r3, r0, #0
   1cdda:	d000      	beq.n	1cdde <xQueueGenericSend+0x292>
   1cddc:	e08a      	b.n	1cef4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1cdde:	6a3b      	ldr	r3, [r7, #32]
   1cde0:	0018      	movs	r0, r3
   1cde2:	4b40      	ldr	r3, [pc, #256]	; (1cee4 <xQueueGenericSend+0x398>)
   1cde4:	4798      	blx	r3
   1cde6:	1e03      	subs	r3, r0, #0
   1cde8:	d04f      	beq.n	1ce8a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1cdea:	4b2d      	ldr	r3, [pc, #180]	; (1cea0 <xQueueGenericSend+0x354>)
   1cdec:	4798      	blx	r3
   1cdee:	0003      	movs	r3, r0
   1cdf0:	0018      	movs	r0, r3
   1cdf2:	4b2c      	ldr	r3, [pc, #176]	; (1cea4 <xQueueGenericSend+0x358>)
   1cdf4:	4798      	blx	r3
   1cdf6:	0003      	movs	r3, r0
   1cdf8:	001a      	movs	r2, r3
   1cdfa:	4b2b      	ldr	r3, [pc, #172]	; (1cea8 <xQueueGenericSend+0x35c>)
   1cdfc:	881b      	ldrh	r3, [r3, #0]
   1cdfe:	4013      	ands	r3, r2
   1ce00:	b29b      	uxth	r3, r3
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	d02e      	beq.n	1ce64 <xQueueGenericSend+0x318>
   1ce06:	6a3b      	ldr	r3, [r7, #32]
   1ce08:	0018      	movs	r0, r3
   1ce0a:	4b28      	ldr	r3, [pc, #160]	; (1ceac <xQueueGenericSend+0x360>)
   1ce0c:	4798      	blx	r3
   1ce0e:	0003      	movs	r3, r0
   1ce10:	001a      	movs	r2, r3
   1ce12:	4b25      	ldr	r3, [pc, #148]	; (1cea8 <xQueueGenericSend+0x35c>)
   1ce14:	881b      	ldrh	r3, [r3, #0]
   1ce16:	4013      	ands	r3, r2
   1ce18:	b29b      	uxth	r3, r3
   1ce1a:	2b00      	cmp	r3, #0
   1ce1c:	d022      	beq.n	1ce64 <xQueueGenericSend+0x318>
   1ce1e:	683b      	ldr	r3, [r7, #0]
   1ce20:	2b00      	cmp	r3, #0
   1ce22:	d10b      	bne.n	1ce3c <xQueueGenericSend+0x2f0>
   1ce24:	6a3b      	ldr	r3, [r7, #32]
   1ce26:	0018      	movs	r0, r3
   1ce28:	4b21      	ldr	r3, [pc, #132]	; (1ceb0 <xQueueGenericSend+0x364>)
   1ce2a:	4798      	blx	r3
   1ce2c:	0003      	movs	r3, r0
   1ce2e:	001a      	movs	r2, r3
   1ce30:	4b20      	ldr	r3, [pc, #128]	; (1ceb4 <xQueueGenericSend+0x368>)
   1ce32:	5c9b      	ldrb	r3, [r3, r2]
   1ce34:	3370      	adds	r3, #112	; 0x70
   1ce36:	b2db      	uxtb	r3, r3
   1ce38:	001d      	movs	r5, r3
   1ce3a:	e000      	b.n	1ce3e <xQueueGenericSend+0x2f2>
   1ce3c:	2575      	movs	r5, #117	; 0x75
   1ce3e:	6a3b      	ldr	r3, [r7, #32]
   1ce40:	0018      	movs	r0, r3
   1ce42:	4b1b      	ldr	r3, [pc, #108]	; (1ceb0 <xQueueGenericSend+0x364>)
   1ce44:	4798      	blx	r3
   1ce46:	0003      	movs	r3, r0
   1ce48:	001a      	movs	r2, r3
   1ce4a:	4b1a      	ldr	r3, [pc, #104]	; (1ceb4 <xQueueGenericSend+0x368>)
   1ce4c:	5c9c      	ldrb	r4, [r3, r2]
   1ce4e:	6a3b      	ldr	r3, [r7, #32]
   1ce50:	0018      	movs	r0, r3
   1ce52:	4b19      	ldr	r3, [pc, #100]	; (1ceb8 <xQueueGenericSend+0x36c>)
   1ce54:	4798      	blx	r3
   1ce56:	0003      	movs	r3, r0
   1ce58:	b2db      	uxtb	r3, r3
   1ce5a:	001a      	movs	r2, r3
   1ce5c:	0021      	movs	r1, r4
   1ce5e:	0028      	movs	r0, r5
   1ce60:	4b16      	ldr	r3, [pc, #88]	; (1cebc <xQueueGenericSend+0x370>)
   1ce62:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1ce64:	6a3b      	ldr	r3, [r7, #32]
   1ce66:	3310      	adds	r3, #16
   1ce68:	687a      	ldr	r2, [r7, #4]
   1ce6a:	0011      	movs	r1, r2
   1ce6c:	0018      	movs	r0, r3
   1ce6e:	4b1e      	ldr	r3, [pc, #120]	; (1cee8 <xQueueGenericSend+0x39c>)
   1ce70:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1ce72:	6a3b      	ldr	r3, [r7, #32]
   1ce74:	0018      	movs	r0, r3
   1ce76:	4b1d      	ldr	r3, [pc, #116]	; (1ceec <xQueueGenericSend+0x3a0>)
   1ce78:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1ce7a:	4b1d      	ldr	r3, [pc, #116]	; (1cef0 <xQueueGenericSend+0x3a4>)
   1ce7c:	4798      	blx	r3
   1ce7e:	1e03      	subs	r3, r0, #0
   1ce80:	d000      	beq.n	1ce84 <xQueueGenericSend+0x338>
   1ce82:	e69d      	b.n	1cbc0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1ce84:	4b11      	ldr	r3, [pc, #68]	; (1cecc <xQueueGenericSend+0x380>)
   1ce86:	4798      	blx	r3
   1ce88:	e69a      	b.n	1cbc0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1ce8a:	6a3b      	ldr	r3, [r7, #32]
   1ce8c:	0018      	movs	r0, r3
   1ce8e:	4b17      	ldr	r3, [pc, #92]	; (1ceec <xQueueGenericSend+0x3a0>)
   1ce90:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1ce92:	4b17      	ldr	r3, [pc, #92]	; (1cef0 <xQueueGenericSend+0x3a4>)
   1ce94:	4798      	blx	r3
   1ce96:	e693      	b.n	1cbc0 <xQueueGenericSend+0x74>
   1ce98:	0001f2d9 	.word	0x0001f2d9
   1ce9c:	0001c5b9 	.word	0x0001c5b9
   1cea0:	0001a84d 	.word	0x0001a84d
   1cea4:	0001a5b1 	.word	0x0001a5b1
   1cea8:	20000118 	.word	0x20000118
   1ceac:	0001a671 	.word	0x0001a671
   1ceb0:	0001a571 	.word	0x0001a571
   1ceb4:	2000010c 	.word	0x2000010c
   1ceb8:	0001a651 	.word	0x0001a651
   1cebc:	0001afa9 	.word	0x0001afa9
   1cec0:	0001b605 	.word	0x0001b605
   1cec4:	0001dd85 	.word	0x0001dd85
   1cec8:	0001e089 	.word	0x0001e089
   1cecc:	0001c5a1 	.word	0x0001c5a1
   1ced0:	0001ee49 	.word	0x0001ee49
   1ced4:	0001c5dd 	.word	0x0001c5dd
   1ced8:	0001ef89 	.word	0x0001ef89
   1cedc:	0001e871 	.word	0x0001e871
   1cee0:	0001efb1 	.word	0x0001efb1
   1cee4:	0001dfd9 	.word	0x0001dfd9
   1cee8:	0001ed25 	.word	0x0001ed25
   1ceec:	0001deb5 	.word	0x0001deb5
   1cef0:	0001e889 	.word	0x0001e889
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1cef4:	6a3b      	ldr	r3, [r7, #32]
   1cef6:	0018      	movs	r0, r3
   1cef8:	4b22      	ldr	r3, [pc, #136]	; (1cf84 <xQueueGenericSend+0x438>)
   1cefa:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1cefc:	4b22      	ldr	r3, [pc, #136]	; (1cf88 <xQueueGenericSend+0x43c>)
   1cefe:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1cf00:	4b22      	ldr	r3, [pc, #136]	; (1cf8c <xQueueGenericSend+0x440>)
   1cf02:	4798      	blx	r3
   1cf04:	0003      	movs	r3, r0
   1cf06:	0018      	movs	r0, r3
   1cf08:	4b21      	ldr	r3, [pc, #132]	; (1cf90 <xQueueGenericSend+0x444>)
   1cf0a:	4798      	blx	r3
   1cf0c:	0003      	movs	r3, r0
   1cf0e:	001a      	movs	r2, r3
   1cf10:	4b20      	ldr	r3, [pc, #128]	; (1cf94 <xQueueGenericSend+0x448>)
   1cf12:	881b      	ldrh	r3, [r3, #0]
   1cf14:	4013      	ands	r3, r2
   1cf16:	b29b      	uxth	r3, r3
   1cf18:	2b00      	cmp	r3, #0
   1cf1a:	d02e      	beq.n	1cf7a <xQueueGenericSend+0x42e>
   1cf1c:	6a3b      	ldr	r3, [r7, #32]
   1cf1e:	0018      	movs	r0, r3
   1cf20:	4b1d      	ldr	r3, [pc, #116]	; (1cf98 <xQueueGenericSend+0x44c>)
   1cf22:	4798      	blx	r3
   1cf24:	0003      	movs	r3, r0
   1cf26:	001a      	movs	r2, r3
   1cf28:	4b1a      	ldr	r3, [pc, #104]	; (1cf94 <xQueueGenericSend+0x448>)
   1cf2a:	881b      	ldrh	r3, [r3, #0]
   1cf2c:	4013      	ands	r3, r2
   1cf2e:	b29b      	uxth	r3, r3
   1cf30:	2b00      	cmp	r3, #0
   1cf32:	d022      	beq.n	1cf7a <xQueueGenericSend+0x42e>
   1cf34:	683b      	ldr	r3, [r7, #0]
   1cf36:	2b00      	cmp	r3, #0
   1cf38:	d10b      	bne.n	1cf52 <xQueueGenericSend+0x406>
   1cf3a:	6a3b      	ldr	r3, [r7, #32]
   1cf3c:	0018      	movs	r0, r3
   1cf3e:	4b17      	ldr	r3, [pc, #92]	; (1cf9c <xQueueGenericSend+0x450>)
   1cf40:	4798      	blx	r3
   1cf42:	0003      	movs	r3, r0
   1cf44:	001a      	movs	r2, r3
   1cf46:	4b16      	ldr	r3, [pc, #88]	; (1cfa0 <xQueueGenericSend+0x454>)
   1cf48:	5c9b      	ldrb	r3, [r3, r2]
   1cf4a:	3348      	adds	r3, #72	; 0x48
   1cf4c:	b2db      	uxtb	r3, r3
   1cf4e:	001d      	movs	r5, r3
   1cf50:	e000      	b.n	1cf54 <xQueueGenericSend+0x408>
   1cf52:	254d      	movs	r5, #77	; 0x4d
   1cf54:	6a3b      	ldr	r3, [r7, #32]
   1cf56:	0018      	movs	r0, r3
   1cf58:	4b10      	ldr	r3, [pc, #64]	; (1cf9c <xQueueGenericSend+0x450>)
   1cf5a:	4798      	blx	r3
   1cf5c:	0003      	movs	r3, r0
   1cf5e:	001a      	movs	r2, r3
   1cf60:	4b0f      	ldr	r3, [pc, #60]	; (1cfa0 <xQueueGenericSend+0x454>)
   1cf62:	5c9c      	ldrb	r4, [r3, r2]
   1cf64:	6a3b      	ldr	r3, [r7, #32]
   1cf66:	0018      	movs	r0, r3
   1cf68:	4b0e      	ldr	r3, [pc, #56]	; (1cfa4 <xQueueGenericSend+0x458>)
   1cf6a:	4798      	blx	r3
   1cf6c:	0003      	movs	r3, r0
   1cf6e:	b2db      	uxtb	r3, r3
   1cf70:	001a      	movs	r2, r3
   1cf72:	0021      	movs	r1, r4
   1cf74:	0028      	movs	r0, r5
   1cf76:	4b0c      	ldr	r3, [pc, #48]	; (1cfa8 <xQueueGenericSend+0x45c>)
   1cf78:	4798      	blx	r3
			return errQUEUE_FULL;
   1cf7a:	2300      	movs	r3, #0
		}
	}
}
   1cf7c:	0018      	movs	r0, r3
   1cf7e:	46bd      	mov	sp, r7
   1cf80:	b00a      	add	sp, #40	; 0x28
   1cf82:	bdb0      	pop	{r4, r5, r7, pc}
   1cf84:	0001deb5 	.word	0x0001deb5
   1cf88:	0001e889 	.word	0x0001e889
   1cf8c:	0001a84d 	.word	0x0001a84d
   1cf90:	0001a5b1 	.word	0x0001a5b1
   1cf94:	20000118 	.word	0x20000118
   1cf98:	0001a671 	.word	0x0001a671
   1cf9c:	0001a571 	.word	0x0001a571
   1cfa0:	2000010c 	.word	0x2000010c
   1cfa4:	0001a651 	.word	0x0001a651
   1cfa8:	0001afa9 	.word	0x0001afa9

0001cfac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1cfac:	b5b0      	push	{r4, r5, r7, lr}
   1cfae:	b088      	sub	sp, #32
   1cfb0:	af00      	add	r7, sp, #0
   1cfb2:	60f8      	str	r0, [r7, #12]
   1cfb4:	60b9      	str	r1, [r7, #8]
   1cfb6:	607a      	str	r2, [r7, #4]
   1cfb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cfba:	68fb      	ldr	r3, [r7, #12]
   1cfbc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1cfbe:	69bb      	ldr	r3, [r7, #24]
   1cfc0:	2b00      	cmp	r3, #0
   1cfc2:	d101      	bne.n	1cfc8 <xQueueGenericSendFromISR+0x1c>
   1cfc4:	b672      	cpsid	i
   1cfc6:	e7fe      	b.n	1cfc6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1cfc8:	68bb      	ldr	r3, [r7, #8]
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	d103      	bne.n	1cfd6 <xQueueGenericSendFromISR+0x2a>
   1cfce:	69bb      	ldr	r3, [r7, #24]
   1cfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cfd2:	2b00      	cmp	r3, #0
   1cfd4:	d101      	bne.n	1cfda <xQueueGenericSendFromISR+0x2e>
   1cfd6:	2301      	movs	r3, #1
   1cfd8:	e000      	b.n	1cfdc <xQueueGenericSendFromISR+0x30>
   1cfda:	2300      	movs	r3, #0
   1cfdc:	2b00      	cmp	r3, #0
   1cfde:	d101      	bne.n	1cfe4 <xQueueGenericSendFromISR+0x38>
   1cfe0:	b672      	cpsid	i
   1cfe2:	e7fe      	b.n	1cfe2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1cfe4:	683b      	ldr	r3, [r7, #0]
   1cfe6:	2b02      	cmp	r3, #2
   1cfe8:	d103      	bne.n	1cff2 <xQueueGenericSendFromISR+0x46>
   1cfea:	69bb      	ldr	r3, [r7, #24]
   1cfec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cfee:	2b01      	cmp	r3, #1
   1cff0:	d101      	bne.n	1cff6 <xQueueGenericSendFromISR+0x4a>
   1cff2:	2301      	movs	r3, #1
   1cff4:	e000      	b.n	1cff8 <xQueueGenericSendFromISR+0x4c>
   1cff6:	2300      	movs	r3, #0
   1cff8:	2b00      	cmp	r3, #0
   1cffa:	d101      	bne.n	1d000 <xQueueGenericSendFromISR+0x54>
   1cffc:	b672      	cpsid	i
   1cffe:	e7fe      	b.n	1cffe <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1d000:	4b68      	ldr	r3, [pc, #416]	; (1d1a4 <xQueueGenericSendFromISR+0x1f8>)
   1d002:	4798      	blx	r3
   1d004:	0003      	movs	r3, r0
   1d006:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1d008:	69bb      	ldr	r3, [r7, #24]
   1d00a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d00c:	69bb      	ldr	r3, [r7, #24]
   1d00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d010:	429a      	cmp	r2, r3
   1d012:	d303      	bcc.n	1d01c <xQueueGenericSendFromISR+0x70>
   1d014:	683b      	ldr	r3, [r7, #0]
   1d016:	2b02      	cmp	r3, #2
   1d018:	d000      	beq.n	1d01c <xQueueGenericSendFromISR+0x70>
   1d01a:	e088      	b.n	1d12e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1d01c:	2313      	movs	r3, #19
   1d01e:	18fb      	adds	r3, r7, r3
   1d020:	69ba      	ldr	r2, [r7, #24]
   1d022:	2145      	movs	r1, #69	; 0x45
   1d024:	5c52      	ldrb	r2, [r2, r1]
   1d026:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d028:	69bb      	ldr	r3, [r7, #24]
   1d02a:	0018      	movs	r0, r3
   1d02c:	4b5e      	ldr	r3, [pc, #376]	; (1d1a8 <xQueueGenericSendFromISR+0x1fc>)
   1d02e:	4798      	blx	r3
   1d030:	0003      	movs	r3, r0
   1d032:	001a      	movs	r2, r3
   1d034:	4b5d      	ldr	r3, [pc, #372]	; (1d1ac <xQueueGenericSendFromISR+0x200>)
   1d036:	881b      	ldrh	r3, [r3, #0]
   1d038:	4013      	ands	r3, r2
   1d03a:	b29b      	uxth	r3, r3
   1d03c:	2b00      	cmp	r3, #0
   1d03e:	d022      	beq.n	1d086 <xQueueGenericSendFromISR+0xda>
   1d040:	683b      	ldr	r3, [r7, #0]
   1d042:	2b00      	cmp	r3, #0
   1d044:	d10b      	bne.n	1d05e <xQueueGenericSendFromISR+0xb2>
   1d046:	69bb      	ldr	r3, [r7, #24]
   1d048:	0018      	movs	r0, r3
   1d04a:	4b59      	ldr	r3, [pc, #356]	; (1d1b0 <xQueueGenericSendFromISR+0x204>)
   1d04c:	4798      	blx	r3
   1d04e:	0003      	movs	r3, r0
   1d050:	001a      	movs	r2, r3
   1d052:	4b58      	ldr	r3, [pc, #352]	; (1d1b4 <xQueueGenericSendFromISR+0x208>)
   1d054:	5c9b      	ldrb	r3, [r3, r2]
   1d056:	3330      	adds	r3, #48	; 0x30
   1d058:	b2db      	uxtb	r3, r3
   1d05a:	001d      	movs	r5, r3
   1d05c:	e000      	b.n	1d060 <xQueueGenericSendFromISR+0xb4>
   1d05e:	2535      	movs	r5, #53	; 0x35
   1d060:	69bb      	ldr	r3, [r7, #24]
   1d062:	0018      	movs	r0, r3
   1d064:	4b52      	ldr	r3, [pc, #328]	; (1d1b0 <xQueueGenericSendFromISR+0x204>)
   1d066:	4798      	blx	r3
   1d068:	0003      	movs	r3, r0
   1d06a:	001a      	movs	r2, r3
   1d06c:	4b51      	ldr	r3, [pc, #324]	; (1d1b4 <xQueueGenericSendFromISR+0x208>)
   1d06e:	5c9c      	ldrb	r4, [r3, r2]
   1d070:	69bb      	ldr	r3, [r7, #24]
   1d072:	0018      	movs	r0, r3
   1d074:	4b50      	ldr	r3, [pc, #320]	; (1d1b8 <xQueueGenericSendFromISR+0x20c>)
   1d076:	4798      	blx	r3
   1d078:	0003      	movs	r3, r0
   1d07a:	b2db      	uxtb	r3, r3
   1d07c:	001a      	movs	r2, r3
   1d07e:	0021      	movs	r1, r4
   1d080:	0028      	movs	r0, r5
   1d082:	4b4e      	ldr	r3, [pc, #312]	; (1d1bc <xQueueGenericSendFromISR+0x210>)
   1d084:	4798      	blx	r3
   1d086:	69bb      	ldr	r3, [r7, #24]
   1d088:	0018      	movs	r0, r3
   1d08a:	4b49      	ldr	r3, [pc, #292]	; (1d1b0 <xQueueGenericSendFromISR+0x204>)
   1d08c:	4798      	blx	r3
   1d08e:	0003      	movs	r3, r0
   1d090:	001a      	movs	r2, r3
   1d092:	4b48      	ldr	r3, [pc, #288]	; (1d1b4 <xQueueGenericSendFromISR+0x208>)
   1d094:	5c9c      	ldrb	r4, [r3, r2]
   1d096:	69bb      	ldr	r3, [r7, #24]
   1d098:	0018      	movs	r0, r3
   1d09a:	4b47      	ldr	r3, [pc, #284]	; (1d1b8 <xQueueGenericSendFromISR+0x20c>)
   1d09c:	4798      	blx	r3
   1d09e:	0003      	movs	r3, r0
   1d0a0:	b2d9      	uxtb	r1, r3
   1d0a2:	69bb      	ldr	r3, [r7, #24]
   1d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d0a6:	b2db      	uxtb	r3, r3
   1d0a8:	3301      	adds	r3, #1
   1d0aa:	b2db      	uxtb	r3, r3
   1d0ac:	001a      	movs	r2, r3
   1d0ae:	0020      	movs	r0, r4
   1d0b0:	4b43      	ldr	r3, [pc, #268]	; (1d1c0 <xQueueGenericSendFromISR+0x214>)
   1d0b2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1d0b4:	683a      	ldr	r2, [r7, #0]
   1d0b6:	68b9      	ldr	r1, [r7, #8]
   1d0b8:	69bb      	ldr	r3, [r7, #24]
   1d0ba:	0018      	movs	r0, r3
   1d0bc:	4b41      	ldr	r3, [pc, #260]	; (1d1c4 <xQueueGenericSendFromISR+0x218>)
   1d0be:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1d0c0:	2313      	movs	r3, #19
   1d0c2:	18fb      	adds	r3, r7, r3
   1d0c4:	781b      	ldrb	r3, [r3, #0]
   1d0c6:	b25b      	sxtb	r3, r3
   1d0c8:	3301      	adds	r3, #1
   1d0ca:	d124      	bne.n	1d116 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d0cc:	69bb      	ldr	r3, [r7, #24]
   1d0ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d0d0:	2b00      	cmp	r3, #0
   1d0d2:	d00e      	beq.n	1d0f2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1d0d4:	683a      	ldr	r2, [r7, #0]
   1d0d6:	69bb      	ldr	r3, [r7, #24]
   1d0d8:	0011      	movs	r1, r2
   1d0da:	0018      	movs	r0, r3
   1d0dc:	4b3a      	ldr	r3, [pc, #232]	; (1d1c8 <xQueueGenericSendFromISR+0x21c>)
   1d0de:	4798      	blx	r3
   1d0e0:	1e03      	subs	r3, r0, #0
   1d0e2:	d021      	beq.n	1d128 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d0e4:	687b      	ldr	r3, [r7, #4]
   1d0e6:	2b00      	cmp	r3, #0
   1d0e8:	d01e      	beq.n	1d128 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d0ea:	687b      	ldr	r3, [r7, #4]
   1d0ec:	2201      	movs	r2, #1
   1d0ee:	601a      	str	r2, [r3, #0]
   1d0f0:	e01a      	b.n	1d128 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d0f2:	69bb      	ldr	r3, [r7, #24]
   1d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d0f6:	2b00      	cmp	r3, #0
   1d0f8:	d016      	beq.n	1d128 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d0fa:	69bb      	ldr	r3, [r7, #24]
   1d0fc:	3324      	adds	r3, #36	; 0x24
   1d0fe:	0018      	movs	r0, r3
   1d100:	4b32      	ldr	r3, [pc, #200]	; (1d1cc <xQueueGenericSendFromISR+0x220>)
   1d102:	4798      	blx	r3
   1d104:	1e03      	subs	r3, r0, #0
   1d106:	d00f      	beq.n	1d128 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d108:	687b      	ldr	r3, [r7, #4]
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	d00c      	beq.n	1d128 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d10e:	687b      	ldr	r3, [r7, #4]
   1d110:	2201      	movs	r2, #1
   1d112:	601a      	str	r2, [r3, #0]
   1d114:	e008      	b.n	1d128 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d116:	2313      	movs	r3, #19
   1d118:	18fb      	adds	r3, r7, r3
   1d11a:	781b      	ldrb	r3, [r3, #0]
   1d11c:	3301      	adds	r3, #1
   1d11e:	b2db      	uxtb	r3, r3
   1d120:	b259      	sxtb	r1, r3
   1d122:	69bb      	ldr	r3, [r7, #24]
   1d124:	2245      	movs	r2, #69	; 0x45
   1d126:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d128:	2301      	movs	r3, #1
   1d12a:	61fb      	str	r3, [r7, #28]
		{
   1d12c:	e030      	b.n	1d190 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d12e:	69bb      	ldr	r3, [r7, #24]
   1d130:	0018      	movs	r0, r3
   1d132:	4b1d      	ldr	r3, [pc, #116]	; (1d1a8 <xQueueGenericSendFromISR+0x1fc>)
   1d134:	4798      	blx	r3
   1d136:	0003      	movs	r3, r0
   1d138:	001a      	movs	r2, r3
   1d13a:	4b1c      	ldr	r3, [pc, #112]	; (1d1ac <xQueueGenericSendFromISR+0x200>)
   1d13c:	881b      	ldrh	r3, [r3, #0]
   1d13e:	4013      	ands	r3, r2
   1d140:	b29b      	uxth	r3, r3
   1d142:	2b00      	cmp	r3, #0
   1d144:	d022      	beq.n	1d18c <xQueueGenericSendFromISR+0x1e0>
   1d146:	683b      	ldr	r3, [r7, #0]
   1d148:	2b00      	cmp	r3, #0
   1d14a:	d10b      	bne.n	1d164 <xQueueGenericSendFromISR+0x1b8>
   1d14c:	69bb      	ldr	r3, [r7, #24]
   1d14e:	0018      	movs	r0, r3
   1d150:	4b17      	ldr	r3, [pc, #92]	; (1d1b0 <xQueueGenericSendFromISR+0x204>)
   1d152:	4798      	blx	r3
   1d154:	0003      	movs	r3, r0
   1d156:	001a      	movs	r2, r3
   1d158:	4b16      	ldr	r3, [pc, #88]	; (1d1b4 <xQueueGenericSendFromISR+0x208>)
   1d15a:	5c9b      	ldrb	r3, [r3, r2]
   1d15c:	3358      	adds	r3, #88	; 0x58
   1d15e:	b2db      	uxtb	r3, r3
   1d160:	001d      	movs	r5, r3
   1d162:	e000      	b.n	1d166 <xQueueGenericSendFromISR+0x1ba>
   1d164:	255d      	movs	r5, #93	; 0x5d
   1d166:	69bb      	ldr	r3, [r7, #24]
   1d168:	0018      	movs	r0, r3
   1d16a:	4b11      	ldr	r3, [pc, #68]	; (1d1b0 <xQueueGenericSendFromISR+0x204>)
   1d16c:	4798      	blx	r3
   1d16e:	0003      	movs	r3, r0
   1d170:	001a      	movs	r2, r3
   1d172:	4b10      	ldr	r3, [pc, #64]	; (1d1b4 <xQueueGenericSendFromISR+0x208>)
   1d174:	5c9c      	ldrb	r4, [r3, r2]
   1d176:	69bb      	ldr	r3, [r7, #24]
   1d178:	0018      	movs	r0, r3
   1d17a:	4b0f      	ldr	r3, [pc, #60]	; (1d1b8 <xQueueGenericSendFromISR+0x20c>)
   1d17c:	4798      	blx	r3
   1d17e:	0003      	movs	r3, r0
   1d180:	b2db      	uxtb	r3, r3
   1d182:	001a      	movs	r2, r3
   1d184:	0021      	movs	r1, r4
   1d186:	0028      	movs	r0, r5
   1d188:	4b0c      	ldr	r3, [pc, #48]	; (1d1bc <xQueueGenericSendFromISR+0x210>)
   1d18a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d18c:	2300      	movs	r3, #0
   1d18e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d190:	697b      	ldr	r3, [r7, #20]
   1d192:	0018      	movs	r0, r3
   1d194:	4b0e      	ldr	r3, [pc, #56]	; (1d1d0 <xQueueGenericSendFromISR+0x224>)
   1d196:	4798      	blx	r3

	return xReturn;
   1d198:	69fb      	ldr	r3, [r7, #28]
}
   1d19a:	0018      	movs	r0, r3
   1d19c:	46bd      	mov	sp, r7
   1d19e:	b008      	add	sp, #32
   1d1a0:	bdb0      	pop	{r4, r5, r7, pc}
   1d1a2:	46c0      	nop			; (mov r8, r8)
   1d1a4:	0001c60d 	.word	0x0001c60d
   1d1a8:	0001a671 	.word	0x0001a671
   1d1ac:	20000118 	.word	0x20000118
   1d1b0:	0001a571 	.word	0x0001a571
   1d1b4:	2000010c 	.word	0x2000010c
   1d1b8:	0001a651 	.word	0x0001a651
   1d1bc:	0001afa9 	.word	0x0001afa9
   1d1c0:	0001b605 	.word	0x0001b605
   1d1c4:	0001dd85 	.word	0x0001dd85
   1d1c8:	0001e089 	.word	0x0001e089
   1d1cc:	0001ee49 	.word	0x0001ee49
   1d1d0:	0001c619 	.word	0x0001c619

0001d1d4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1d1d4:	b580      	push	{r7, lr}
   1d1d6:	b082      	sub	sp, #8
   1d1d8:	af00      	add	r7, sp, #0
   1d1da:	6078      	str	r0, [r7, #4]
   1d1dc:	6039      	str	r1, [r7, #0]
   1d1de:	6839      	ldr	r1, [r7, #0]
   1d1e0:	687b      	ldr	r3, [r7, #4]
   1d1e2:	2200      	movs	r2, #0
   1d1e4:	0018      	movs	r0, r3
   1d1e6:	4b03      	ldr	r3, [pc, #12]	; (1d1f4 <xQueueGiveFromISR+0x20>)
   1d1e8:	4798      	blx	r3
   1d1ea:	0003      	movs	r3, r0
   1d1ec:	0018      	movs	r0, r3
   1d1ee:	46bd      	mov	sp, r7
   1d1f0:	b002      	add	sp, #8
   1d1f2:	bd80      	pop	{r7, pc}
   1d1f4:	0001d1f9 	.word	0x0001d1f9

0001d1f8 <MyWrapper>:
{
   1d1f8:	b5b0      	push	{r4, r5, r7, lr}
   1d1fa:	b08a      	sub	sp, #40	; 0x28
   1d1fc:	af00      	add	r7, sp, #0
   1d1fe:	60f8      	str	r0, [r7, #12]
   1d200:	60b9      	str	r1, [r7, #8]
   1d202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d204:	68fb      	ldr	r3, [r7, #12]
   1d206:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1d208:	6a3b      	ldr	r3, [r7, #32]
   1d20a:	2b00      	cmp	r3, #0
   1d20c:	d101      	bne.n	1d212 <MyWrapper+0x1a>
   1d20e:	b672      	cpsid	i
   1d210:	e7fe      	b.n	1d210 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1d212:	6a3b      	ldr	r3, [r7, #32]
   1d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d216:	2b00      	cmp	r3, #0
   1d218:	d001      	beq.n	1d21e <MyWrapper+0x26>
   1d21a:	b672      	cpsid	i
   1d21c:	e7fe      	b.n	1d21c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1d21e:	6a3b      	ldr	r3, [r7, #32]
   1d220:	681b      	ldr	r3, [r3, #0]
   1d222:	2b00      	cmp	r3, #0
   1d224:	d103      	bne.n	1d22e <MyWrapper+0x36>
   1d226:	6a3b      	ldr	r3, [r7, #32]
   1d228:	685b      	ldr	r3, [r3, #4]
   1d22a:	2b00      	cmp	r3, #0
   1d22c:	d101      	bne.n	1d232 <MyWrapper+0x3a>
   1d22e:	2301      	movs	r3, #1
   1d230:	e000      	b.n	1d234 <MyWrapper+0x3c>
   1d232:	2300      	movs	r3, #0
   1d234:	2b00      	cmp	r3, #0
   1d236:	d101      	bne.n	1d23c <MyWrapper+0x44>
   1d238:	b672      	cpsid	i
   1d23a:	e7fe      	b.n	1d23a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1d23c:	4b66      	ldr	r3, [pc, #408]	; (1d3d8 <MyWrapper+0x1e0>)
   1d23e:	4798      	blx	r3
   1d240:	0003      	movs	r3, r0
   1d242:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d244:	6a3b      	ldr	r3, [r7, #32]
   1d246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d248:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1d24a:	6a3b      	ldr	r3, [r7, #32]
   1d24c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1d24e:	69bb      	ldr	r3, [r7, #24]
   1d250:	429a      	cmp	r2, r3
   1d252:	d800      	bhi.n	1d256 <MyWrapper+0x5e>
   1d254:	e085      	b.n	1d362 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1d256:	2317      	movs	r3, #23
   1d258:	18fb      	adds	r3, r7, r3
   1d25a:	6a3a      	ldr	r2, [r7, #32]
   1d25c:	2145      	movs	r1, #69	; 0x45
   1d25e:	5c52      	ldrb	r2, [r2, r1]
   1d260:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d262:	6a3b      	ldr	r3, [r7, #32]
   1d264:	0018      	movs	r0, r3
   1d266:	4b5d      	ldr	r3, [pc, #372]	; (1d3dc <MyWrapper+0x1e4>)
   1d268:	4798      	blx	r3
   1d26a:	0003      	movs	r3, r0
   1d26c:	001a      	movs	r2, r3
   1d26e:	4b5c      	ldr	r3, [pc, #368]	; (1d3e0 <MyWrapper+0x1e8>)
   1d270:	881b      	ldrh	r3, [r3, #0]
   1d272:	4013      	ands	r3, r2
   1d274:	b29b      	uxth	r3, r3
   1d276:	2b00      	cmp	r3, #0
   1d278:	d022      	beq.n	1d2c0 <MyWrapper+0xc8>
   1d27a:	687b      	ldr	r3, [r7, #4]
   1d27c:	2b00      	cmp	r3, #0
   1d27e:	d10b      	bne.n	1d298 <MyWrapper+0xa0>
   1d280:	6a3b      	ldr	r3, [r7, #32]
   1d282:	0018      	movs	r0, r3
   1d284:	4b57      	ldr	r3, [pc, #348]	; (1d3e4 <MyWrapper+0x1ec>)
   1d286:	4798      	blx	r3
   1d288:	0003      	movs	r3, r0
   1d28a:	001a      	movs	r2, r3
   1d28c:	4b56      	ldr	r3, [pc, #344]	; (1d3e8 <MyWrapper+0x1f0>)
   1d28e:	5c9b      	ldrb	r3, [r3, r2]
   1d290:	3330      	adds	r3, #48	; 0x30
   1d292:	b2db      	uxtb	r3, r3
   1d294:	001d      	movs	r5, r3
   1d296:	e000      	b.n	1d29a <MyWrapper+0xa2>
   1d298:	2535      	movs	r5, #53	; 0x35
   1d29a:	6a3b      	ldr	r3, [r7, #32]
   1d29c:	0018      	movs	r0, r3
   1d29e:	4b51      	ldr	r3, [pc, #324]	; (1d3e4 <MyWrapper+0x1ec>)
   1d2a0:	4798      	blx	r3
   1d2a2:	0003      	movs	r3, r0
   1d2a4:	001a      	movs	r2, r3
   1d2a6:	4b50      	ldr	r3, [pc, #320]	; (1d3e8 <MyWrapper+0x1f0>)
   1d2a8:	5c9c      	ldrb	r4, [r3, r2]
   1d2aa:	6a3b      	ldr	r3, [r7, #32]
   1d2ac:	0018      	movs	r0, r3
   1d2ae:	4b4f      	ldr	r3, [pc, #316]	; (1d3ec <MyWrapper+0x1f4>)
   1d2b0:	4798      	blx	r3
   1d2b2:	0003      	movs	r3, r0
   1d2b4:	b2db      	uxtb	r3, r3
   1d2b6:	001a      	movs	r2, r3
   1d2b8:	0021      	movs	r1, r4
   1d2ba:	0028      	movs	r0, r5
   1d2bc:	4b4c      	ldr	r3, [pc, #304]	; (1d3f0 <MyWrapper+0x1f8>)
   1d2be:	4798      	blx	r3
   1d2c0:	6a3b      	ldr	r3, [r7, #32]
   1d2c2:	0018      	movs	r0, r3
   1d2c4:	4b47      	ldr	r3, [pc, #284]	; (1d3e4 <MyWrapper+0x1ec>)
   1d2c6:	4798      	blx	r3
   1d2c8:	0003      	movs	r3, r0
   1d2ca:	001a      	movs	r2, r3
   1d2cc:	4b46      	ldr	r3, [pc, #280]	; (1d3e8 <MyWrapper+0x1f0>)
   1d2ce:	5c9c      	ldrb	r4, [r3, r2]
   1d2d0:	6a3b      	ldr	r3, [r7, #32]
   1d2d2:	0018      	movs	r0, r3
   1d2d4:	4b45      	ldr	r3, [pc, #276]	; (1d3ec <MyWrapper+0x1f4>)
   1d2d6:	4798      	blx	r3
   1d2d8:	0003      	movs	r3, r0
   1d2da:	b2d9      	uxtb	r1, r3
   1d2dc:	6a3b      	ldr	r3, [r7, #32]
   1d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d2e0:	b2db      	uxtb	r3, r3
   1d2e2:	3301      	adds	r3, #1
   1d2e4:	b2db      	uxtb	r3, r3
   1d2e6:	001a      	movs	r2, r3
   1d2e8:	0020      	movs	r0, r4
   1d2ea:	4b42      	ldr	r3, [pc, #264]	; (1d3f4 <MyWrapper+0x1fc>)
   1d2ec:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1d2ee:	69bb      	ldr	r3, [r7, #24]
   1d2f0:	1c5a      	adds	r2, r3, #1
   1d2f2:	6a3b      	ldr	r3, [r7, #32]
   1d2f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1d2f6:	2317      	movs	r3, #23
   1d2f8:	18fb      	adds	r3, r7, r3
   1d2fa:	781b      	ldrb	r3, [r3, #0]
   1d2fc:	b25b      	sxtb	r3, r3
   1d2fe:	3301      	adds	r3, #1
   1d300:	d123      	bne.n	1d34a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d302:	6a3b      	ldr	r3, [r7, #32]
   1d304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d306:	2b00      	cmp	r3, #0
   1d308:	d00d      	beq.n	1d326 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1d30a:	6a3b      	ldr	r3, [r7, #32]
   1d30c:	2100      	movs	r1, #0
   1d30e:	0018      	movs	r0, r3
   1d310:	4b39      	ldr	r3, [pc, #228]	; (1d3f8 <MyWrapper+0x200>)
   1d312:	4798      	blx	r3
   1d314:	1e03      	subs	r3, r0, #0
   1d316:	d021      	beq.n	1d35c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d318:	68bb      	ldr	r3, [r7, #8]
   1d31a:	2b00      	cmp	r3, #0
   1d31c:	d01e      	beq.n	1d35c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d31e:	68bb      	ldr	r3, [r7, #8]
   1d320:	2201      	movs	r2, #1
   1d322:	601a      	str	r2, [r3, #0]
   1d324:	e01a      	b.n	1d35c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d326:	6a3b      	ldr	r3, [r7, #32]
   1d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d32a:	2b00      	cmp	r3, #0
   1d32c:	d016      	beq.n	1d35c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d32e:	6a3b      	ldr	r3, [r7, #32]
   1d330:	3324      	adds	r3, #36	; 0x24
   1d332:	0018      	movs	r0, r3
   1d334:	4b31      	ldr	r3, [pc, #196]	; (1d3fc <MyWrapper+0x204>)
   1d336:	4798      	blx	r3
   1d338:	1e03      	subs	r3, r0, #0
   1d33a:	d00f      	beq.n	1d35c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d33c:	68bb      	ldr	r3, [r7, #8]
   1d33e:	2b00      	cmp	r3, #0
   1d340:	d00c      	beq.n	1d35c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d342:	68bb      	ldr	r3, [r7, #8]
   1d344:	2201      	movs	r2, #1
   1d346:	601a      	str	r2, [r3, #0]
   1d348:	e008      	b.n	1d35c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d34a:	2317      	movs	r3, #23
   1d34c:	18fb      	adds	r3, r7, r3
   1d34e:	781b      	ldrb	r3, [r3, #0]
   1d350:	3301      	adds	r3, #1
   1d352:	b2db      	uxtb	r3, r3
   1d354:	b259      	sxtb	r1, r3
   1d356:	6a3b      	ldr	r3, [r7, #32]
   1d358:	2245      	movs	r2, #69	; 0x45
   1d35a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d35c:	2301      	movs	r3, #1
   1d35e:	627b      	str	r3, [r7, #36]	; 0x24
   1d360:	e030      	b.n	1d3c4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d362:	6a3b      	ldr	r3, [r7, #32]
   1d364:	0018      	movs	r0, r3
   1d366:	4b1d      	ldr	r3, [pc, #116]	; (1d3dc <MyWrapper+0x1e4>)
   1d368:	4798      	blx	r3
   1d36a:	0003      	movs	r3, r0
   1d36c:	001a      	movs	r2, r3
   1d36e:	4b1c      	ldr	r3, [pc, #112]	; (1d3e0 <MyWrapper+0x1e8>)
   1d370:	881b      	ldrh	r3, [r3, #0]
   1d372:	4013      	ands	r3, r2
   1d374:	b29b      	uxth	r3, r3
   1d376:	2b00      	cmp	r3, #0
   1d378:	d022      	beq.n	1d3c0 <MyWrapper+0x1c8>
   1d37a:	687b      	ldr	r3, [r7, #4]
   1d37c:	2b00      	cmp	r3, #0
   1d37e:	d10b      	bne.n	1d398 <MyWrapper+0x1a0>
   1d380:	6a3b      	ldr	r3, [r7, #32]
   1d382:	0018      	movs	r0, r3
   1d384:	4b17      	ldr	r3, [pc, #92]	; (1d3e4 <MyWrapper+0x1ec>)
   1d386:	4798      	blx	r3
   1d388:	0003      	movs	r3, r0
   1d38a:	001a      	movs	r2, r3
   1d38c:	4b16      	ldr	r3, [pc, #88]	; (1d3e8 <MyWrapper+0x1f0>)
   1d38e:	5c9b      	ldrb	r3, [r3, r2]
   1d390:	3358      	adds	r3, #88	; 0x58
   1d392:	b2db      	uxtb	r3, r3
   1d394:	001d      	movs	r5, r3
   1d396:	e000      	b.n	1d39a <MyWrapper+0x1a2>
   1d398:	255d      	movs	r5, #93	; 0x5d
   1d39a:	6a3b      	ldr	r3, [r7, #32]
   1d39c:	0018      	movs	r0, r3
   1d39e:	4b11      	ldr	r3, [pc, #68]	; (1d3e4 <MyWrapper+0x1ec>)
   1d3a0:	4798      	blx	r3
   1d3a2:	0003      	movs	r3, r0
   1d3a4:	001a      	movs	r2, r3
   1d3a6:	4b10      	ldr	r3, [pc, #64]	; (1d3e8 <MyWrapper+0x1f0>)
   1d3a8:	5c9c      	ldrb	r4, [r3, r2]
   1d3aa:	6a3b      	ldr	r3, [r7, #32]
   1d3ac:	0018      	movs	r0, r3
   1d3ae:	4b0f      	ldr	r3, [pc, #60]	; (1d3ec <MyWrapper+0x1f4>)
   1d3b0:	4798      	blx	r3
   1d3b2:	0003      	movs	r3, r0
   1d3b4:	b2db      	uxtb	r3, r3
   1d3b6:	001a      	movs	r2, r3
   1d3b8:	0021      	movs	r1, r4
   1d3ba:	0028      	movs	r0, r5
   1d3bc:	4b0c      	ldr	r3, [pc, #48]	; (1d3f0 <MyWrapper+0x1f8>)
   1d3be:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d3c0:	2300      	movs	r3, #0
   1d3c2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d3c4:	69fb      	ldr	r3, [r7, #28]
   1d3c6:	0018      	movs	r0, r3
   1d3c8:	4b0d      	ldr	r3, [pc, #52]	; (1d400 <MyWrapper+0x208>)
   1d3ca:	4798      	blx	r3

	return xReturn;
   1d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d3ce:	0018      	movs	r0, r3
   1d3d0:	46bd      	mov	sp, r7
   1d3d2:	b00a      	add	sp, #40	; 0x28
   1d3d4:	bdb0      	pop	{r4, r5, r7, pc}
   1d3d6:	46c0      	nop			; (mov r8, r8)
   1d3d8:	0001c60d 	.word	0x0001c60d
   1d3dc:	0001a671 	.word	0x0001a671
   1d3e0:	20000118 	.word	0x20000118
   1d3e4:	0001a571 	.word	0x0001a571
   1d3e8:	2000010c 	.word	0x2000010c
   1d3ec:	0001a651 	.word	0x0001a651
   1d3f0:	0001afa9 	.word	0x0001afa9
   1d3f4:	0001b605 	.word	0x0001b605
   1d3f8:	0001e089 	.word	0x0001e089
   1d3fc:	0001ee49 	.word	0x0001ee49
   1d400:	0001c619 	.word	0x0001c619

0001d404 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1d404:	b5b0      	push	{r4, r5, r7, lr}
   1d406:	b08a      	sub	sp, #40	; 0x28
   1d408:	af00      	add	r7, sp, #0
   1d40a:	60f8      	str	r0, [r7, #12]
   1d40c:	60b9      	str	r1, [r7, #8]
   1d40e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1d410:	2300      	movs	r3, #0
   1d412:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d414:	68fb      	ldr	r3, [r7, #12]
   1d416:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d418:	6a3b      	ldr	r3, [r7, #32]
   1d41a:	2b00      	cmp	r3, #0
   1d41c:	d101      	bne.n	1d422 <xQueueReceive+0x1e>
   1d41e:	b672      	cpsid	i
   1d420:	e7fe      	b.n	1d420 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d422:	68bb      	ldr	r3, [r7, #8]
   1d424:	2b00      	cmp	r3, #0
   1d426:	d103      	bne.n	1d430 <xQueueReceive+0x2c>
   1d428:	6a3b      	ldr	r3, [r7, #32]
   1d42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d42c:	2b00      	cmp	r3, #0
   1d42e:	d101      	bne.n	1d434 <xQueueReceive+0x30>
   1d430:	2301      	movs	r3, #1
   1d432:	e000      	b.n	1d436 <xQueueReceive+0x32>
   1d434:	2300      	movs	r3, #0
   1d436:	2b00      	cmp	r3, #0
   1d438:	d101      	bne.n	1d43e <xQueueReceive+0x3a>
   1d43a:	b672      	cpsid	i
   1d43c:	e7fe      	b.n	1d43c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d43e:	4bbf      	ldr	r3, [pc, #764]	; (1d73c <xQueueReceive+0x338>)
   1d440:	4798      	blx	r3
   1d442:	1e03      	subs	r3, r0, #0
   1d444:	d102      	bne.n	1d44c <xQueueReceive+0x48>
   1d446:	687b      	ldr	r3, [r7, #4]
   1d448:	2b00      	cmp	r3, #0
   1d44a:	d101      	bne.n	1d450 <xQueueReceive+0x4c>
   1d44c:	2301      	movs	r3, #1
   1d44e:	e000      	b.n	1d452 <xQueueReceive+0x4e>
   1d450:	2300      	movs	r3, #0
   1d452:	2b00      	cmp	r3, #0
   1d454:	d101      	bne.n	1d45a <xQueueReceive+0x56>
   1d456:	b672      	cpsid	i
   1d458:	e7fe      	b.n	1d458 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d45a:	4bb9      	ldr	r3, [pc, #740]	; (1d740 <xQueueReceive+0x33c>)
   1d45c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d45e:	6a3b      	ldr	r3, [r7, #32]
   1d460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d462:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1d464:	69fb      	ldr	r3, [r7, #28]
   1d466:	2b00      	cmp	r3, #0
   1d468:	d100      	bne.n	1d46c <xQueueReceive+0x68>
   1d46a:	e07d      	b.n	1d568 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1d46c:	68ba      	ldr	r2, [r7, #8]
   1d46e:	6a3b      	ldr	r3, [r7, #32]
   1d470:	0011      	movs	r1, r2
   1d472:	0018      	movs	r0, r3
   1d474:	4bb3      	ldr	r3, [pc, #716]	; (1d744 <xQueueReceive+0x340>)
   1d476:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1d478:	4bb3      	ldr	r3, [pc, #716]	; (1d748 <xQueueReceive+0x344>)
   1d47a:	4798      	blx	r3
   1d47c:	0003      	movs	r3, r0
   1d47e:	0018      	movs	r0, r3
   1d480:	4bb2      	ldr	r3, [pc, #712]	; (1d74c <xQueueReceive+0x348>)
   1d482:	4798      	blx	r3
   1d484:	0003      	movs	r3, r0
   1d486:	001a      	movs	r2, r3
   1d488:	4bb1      	ldr	r3, [pc, #708]	; (1d750 <xQueueReceive+0x34c>)
   1d48a:	881b      	ldrh	r3, [r3, #0]
   1d48c:	4013      	ands	r3, r2
   1d48e:	b29b      	uxth	r3, r3
   1d490:	2b00      	cmp	r3, #0
   1d492:	d029      	beq.n	1d4e8 <xQueueReceive+0xe4>
   1d494:	6a3b      	ldr	r3, [r7, #32]
   1d496:	0018      	movs	r0, r3
   1d498:	4bae      	ldr	r3, [pc, #696]	; (1d754 <xQueueReceive+0x350>)
   1d49a:	4798      	blx	r3
   1d49c:	0003      	movs	r3, r0
   1d49e:	001a      	movs	r2, r3
   1d4a0:	4bab      	ldr	r3, [pc, #684]	; (1d750 <xQueueReceive+0x34c>)
   1d4a2:	881b      	ldrh	r3, [r3, #0]
   1d4a4:	4013      	ands	r3, r2
   1d4a6:	b29b      	uxth	r3, r3
   1d4a8:	2b00      	cmp	r3, #0
   1d4aa:	d01d      	beq.n	1d4e8 <xQueueReceive+0xe4>
   1d4ac:	6a3b      	ldr	r3, [r7, #32]
   1d4ae:	0018      	movs	r0, r3
   1d4b0:	4ba9      	ldr	r3, [pc, #676]	; (1d758 <xQueueReceive+0x354>)
   1d4b2:	4798      	blx	r3
   1d4b4:	0003      	movs	r3, r0
   1d4b6:	001a      	movs	r2, r3
   1d4b8:	4ba8      	ldr	r3, [pc, #672]	; (1d75c <xQueueReceive+0x358>)
   1d4ba:	5c9b      	ldrb	r3, [r3, r2]
   1d4bc:	3328      	adds	r3, #40	; 0x28
   1d4be:	b2db      	uxtb	r3, r3
   1d4c0:	001d      	movs	r5, r3
   1d4c2:	6a3b      	ldr	r3, [r7, #32]
   1d4c4:	0018      	movs	r0, r3
   1d4c6:	4ba4      	ldr	r3, [pc, #656]	; (1d758 <xQueueReceive+0x354>)
   1d4c8:	4798      	blx	r3
   1d4ca:	0003      	movs	r3, r0
   1d4cc:	001a      	movs	r2, r3
   1d4ce:	4ba3      	ldr	r3, [pc, #652]	; (1d75c <xQueueReceive+0x358>)
   1d4d0:	5c9c      	ldrb	r4, [r3, r2]
   1d4d2:	6a3b      	ldr	r3, [r7, #32]
   1d4d4:	0018      	movs	r0, r3
   1d4d6:	4ba2      	ldr	r3, [pc, #648]	; (1d760 <xQueueReceive+0x35c>)
   1d4d8:	4798      	blx	r3
   1d4da:	0003      	movs	r3, r0
   1d4dc:	b2db      	uxtb	r3, r3
   1d4de:	001a      	movs	r2, r3
   1d4e0:	0021      	movs	r1, r4
   1d4e2:	0028      	movs	r0, r5
   1d4e4:	4b9f      	ldr	r3, [pc, #636]	; (1d764 <xQueueReceive+0x360>)
   1d4e6:	4798      	blx	r3
   1d4e8:	6a3b      	ldr	r3, [r7, #32]
   1d4ea:	0018      	movs	r0, r3
   1d4ec:	4b9a      	ldr	r3, [pc, #616]	; (1d758 <xQueueReceive+0x354>)
   1d4ee:	4798      	blx	r3
   1d4f0:	0003      	movs	r3, r0
   1d4f2:	001a      	movs	r2, r3
   1d4f4:	4b99      	ldr	r3, [pc, #612]	; (1d75c <xQueueReceive+0x358>)
   1d4f6:	5c9c      	ldrb	r4, [r3, r2]
   1d4f8:	6a3b      	ldr	r3, [r7, #32]
   1d4fa:	0018      	movs	r0, r3
   1d4fc:	4b98      	ldr	r3, [pc, #608]	; (1d760 <xQueueReceive+0x35c>)
   1d4fe:	4798      	blx	r3
   1d500:	0003      	movs	r3, r0
   1d502:	b2dd      	uxtb	r5, r3
   1d504:	6a3b      	ldr	r3, [r7, #32]
   1d506:	0018      	movs	r0, r3
   1d508:	4b93      	ldr	r3, [pc, #588]	; (1d758 <xQueueReceive+0x354>)
   1d50a:	4798      	blx	r3
   1d50c:	0003      	movs	r3, r0
   1d50e:	001a      	movs	r2, r3
   1d510:	4b92      	ldr	r3, [pc, #584]	; (1d75c <xQueueReceive+0x358>)
   1d512:	5c9b      	ldrb	r3, [r3, r2]
   1d514:	2b02      	cmp	r3, #2
   1d516:	d108      	bne.n	1d52a <xQueueReceive+0x126>
   1d518:	4b8b      	ldr	r3, [pc, #556]	; (1d748 <xQueueReceive+0x344>)
   1d51a:	4798      	blx	r3
   1d51c:	0003      	movs	r3, r0
   1d51e:	0018      	movs	r0, r3
   1d520:	4b91      	ldr	r3, [pc, #580]	; (1d768 <xQueueReceive+0x364>)
   1d522:	4798      	blx	r3
   1d524:	0003      	movs	r3, r0
   1d526:	b2db      	uxtb	r3, r3
   1d528:	e004      	b.n	1d534 <xQueueReceive+0x130>
   1d52a:	6a3b      	ldr	r3, [r7, #32]
   1d52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d52e:	b2db      	uxtb	r3, r3
   1d530:	3b01      	subs	r3, #1
   1d532:	b2db      	uxtb	r3, r3
   1d534:	001a      	movs	r2, r3
   1d536:	0029      	movs	r1, r5
   1d538:	0020      	movs	r0, r4
   1d53a:	4b8c      	ldr	r3, [pc, #560]	; (1d76c <xQueueReceive+0x368>)
   1d53c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1d53e:	69fb      	ldr	r3, [r7, #28]
   1d540:	1e5a      	subs	r2, r3, #1
   1d542:	6a3b      	ldr	r3, [r7, #32]
   1d544:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d546:	6a3b      	ldr	r3, [r7, #32]
   1d548:	691b      	ldr	r3, [r3, #16]
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	d008      	beq.n	1d560 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d54e:	6a3b      	ldr	r3, [r7, #32]
   1d550:	3310      	adds	r3, #16
   1d552:	0018      	movs	r0, r3
   1d554:	4b86      	ldr	r3, [pc, #536]	; (1d770 <xQueueReceive+0x36c>)
   1d556:	4798      	blx	r3
   1d558:	1e03      	subs	r3, r0, #0
   1d55a:	d001      	beq.n	1d560 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d55c:	4b85      	ldr	r3, [pc, #532]	; (1d774 <xQueueReceive+0x370>)
   1d55e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d560:	4b85      	ldr	r3, [pc, #532]	; (1d778 <xQueueReceive+0x374>)
   1d562:	4798      	blx	r3
				return pdPASS;
   1d564:	2301      	movs	r3, #1
   1d566:	e15f      	b.n	1d828 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d568:	687b      	ldr	r3, [r7, #4]
   1d56a:	2b00      	cmp	r3, #0
   1d56c:	d13b      	bne.n	1d5e6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1d56e:	4b82      	ldr	r3, [pc, #520]	; (1d778 <xQueueReceive+0x374>)
   1d570:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d572:	4b75      	ldr	r3, [pc, #468]	; (1d748 <xQueueReceive+0x344>)
   1d574:	4798      	blx	r3
   1d576:	0003      	movs	r3, r0
   1d578:	0018      	movs	r0, r3
   1d57a:	4b74      	ldr	r3, [pc, #464]	; (1d74c <xQueueReceive+0x348>)
   1d57c:	4798      	blx	r3
   1d57e:	0003      	movs	r3, r0
   1d580:	001a      	movs	r2, r3
   1d582:	4b73      	ldr	r3, [pc, #460]	; (1d750 <xQueueReceive+0x34c>)
   1d584:	881b      	ldrh	r3, [r3, #0]
   1d586:	4013      	ands	r3, r2
   1d588:	b29b      	uxth	r3, r3
   1d58a:	2b00      	cmp	r3, #0
   1d58c:	d029      	beq.n	1d5e2 <xQueueReceive+0x1de>
   1d58e:	6a3b      	ldr	r3, [r7, #32]
   1d590:	0018      	movs	r0, r3
   1d592:	4b70      	ldr	r3, [pc, #448]	; (1d754 <xQueueReceive+0x350>)
   1d594:	4798      	blx	r3
   1d596:	0003      	movs	r3, r0
   1d598:	001a      	movs	r2, r3
   1d59a:	4b6d      	ldr	r3, [pc, #436]	; (1d750 <xQueueReceive+0x34c>)
   1d59c:	881b      	ldrh	r3, [r3, #0]
   1d59e:	4013      	ands	r3, r2
   1d5a0:	b29b      	uxth	r3, r3
   1d5a2:	2b00      	cmp	r3, #0
   1d5a4:	d01d      	beq.n	1d5e2 <xQueueReceive+0x1de>
   1d5a6:	6a3b      	ldr	r3, [r7, #32]
   1d5a8:	0018      	movs	r0, r3
   1d5aa:	4b6b      	ldr	r3, [pc, #428]	; (1d758 <xQueueReceive+0x354>)
   1d5ac:	4798      	blx	r3
   1d5ae:	0003      	movs	r3, r0
   1d5b0:	001a      	movs	r2, r3
   1d5b2:	4b6a      	ldr	r3, [pc, #424]	; (1d75c <xQueueReceive+0x358>)
   1d5b4:	5c9b      	ldrb	r3, [r3, r2]
   1d5b6:	3350      	adds	r3, #80	; 0x50
   1d5b8:	b2db      	uxtb	r3, r3
   1d5ba:	001d      	movs	r5, r3
   1d5bc:	6a3b      	ldr	r3, [r7, #32]
   1d5be:	0018      	movs	r0, r3
   1d5c0:	4b65      	ldr	r3, [pc, #404]	; (1d758 <xQueueReceive+0x354>)
   1d5c2:	4798      	blx	r3
   1d5c4:	0003      	movs	r3, r0
   1d5c6:	001a      	movs	r2, r3
   1d5c8:	4b64      	ldr	r3, [pc, #400]	; (1d75c <xQueueReceive+0x358>)
   1d5ca:	5c9c      	ldrb	r4, [r3, r2]
   1d5cc:	6a3b      	ldr	r3, [r7, #32]
   1d5ce:	0018      	movs	r0, r3
   1d5d0:	4b63      	ldr	r3, [pc, #396]	; (1d760 <xQueueReceive+0x35c>)
   1d5d2:	4798      	blx	r3
   1d5d4:	0003      	movs	r3, r0
   1d5d6:	b2db      	uxtb	r3, r3
   1d5d8:	001a      	movs	r2, r3
   1d5da:	0021      	movs	r1, r4
   1d5dc:	0028      	movs	r0, r5
   1d5de:	4b61      	ldr	r3, [pc, #388]	; (1d764 <xQueueReceive+0x360>)
   1d5e0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1d5e2:	2300      	movs	r3, #0
   1d5e4:	e120      	b.n	1d828 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d5e8:	2b00      	cmp	r3, #0
   1d5ea:	d106      	bne.n	1d5fa <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d5ec:	2314      	movs	r3, #20
   1d5ee:	18fb      	adds	r3, r7, r3
   1d5f0:	0018      	movs	r0, r3
   1d5f2:	4b62      	ldr	r3, [pc, #392]	; (1d77c <xQueueReceive+0x378>)
   1d5f4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d5f6:	2301      	movs	r3, #1
   1d5f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d5fa:	4b5f      	ldr	r3, [pc, #380]	; (1d778 <xQueueReceive+0x374>)
   1d5fc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d5fe:	4b60      	ldr	r3, [pc, #384]	; (1d780 <xQueueReceive+0x37c>)
   1d600:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d602:	4b4f      	ldr	r3, [pc, #316]	; (1d740 <xQueueReceive+0x33c>)
   1d604:	4798      	blx	r3
   1d606:	6a3b      	ldr	r3, [r7, #32]
   1d608:	2244      	movs	r2, #68	; 0x44
   1d60a:	5c9b      	ldrb	r3, [r3, r2]
   1d60c:	b25b      	sxtb	r3, r3
   1d60e:	3301      	adds	r3, #1
   1d610:	d103      	bne.n	1d61a <xQueueReceive+0x216>
   1d612:	6a3b      	ldr	r3, [r7, #32]
   1d614:	2244      	movs	r2, #68	; 0x44
   1d616:	2100      	movs	r1, #0
   1d618:	5499      	strb	r1, [r3, r2]
   1d61a:	6a3b      	ldr	r3, [r7, #32]
   1d61c:	2245      	movs	r2, #69	; 0x45
   1d61e:	5c9b      	ldrb	r3, [r3, r2]
   1d620:	b25b      	sxtb	r3, r3
   1d622:	3301      	adds	r3, #1
   1d624:	d103      	bne.n	1d62e <xQueueReceive+0x22a>
   1d626:	6a3b      	ldr	r3, [r7, #32]
   1d628:	2245      	movs	r2, #69	; 0x45
   1d62a:	2100      	movs	r1, #0
   1d62c:	5499      	strb	r1, [r3, r2]
   1d62e:	4b52      	ldr	r3, [pc, #328]	; (1d778 <xQueueReceive+0x374>)
   1d630:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d632:	1d3a      	adds	r2, r7, #4
   1d634:	2314      	movs	r3, #20
   1d636:	18fb      	adds	r3, r7, r3
   1d638:	0011      	movs	r1, r2
   1d63a:	0018      	movs	r0, r3
   1d63c:	4b51      	ldr	r3, [pc, #324]	; (1d784 <xQueueReceive+0x380>)
   1d63e:	4798      	blx	r3
   1d640:	1e03      	subs	r3, r0, #0
   1d642:	d000      	beq.n	1d646 <xQueueReceive+0x242>
   1d644:	e0aa      	b.n	1d79c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d646:	6a3b      	ldr	r3, [r7, #32]
   1d648:	0018      	movs	r0, r3
   1d64a:	4b4f      	ldr	r3, [pc, #316]	; (1d788 <xQueueReceive+0x384>)
   1d64c:	4798      	blx	r3
   1d64e:	1e03      	subs	r3, r0, #0
   1d650:	d06d      	beq.n	1d72e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1d652:	4b3d      	ldr	r3, [pc, #244]	; (1d748 <xQueueReceive+0x344>)
   1d654:	4798      	blx	r3
   1d656:	0003      	movs	r3, r0
   1d658:	0018      	movs	r0, r3
   1d65a:	4b3c      	ldr	r3, [pc, #240]	; (1d74c <xQueueReceive+0x348>)
   1d65c:	4798      	blx	r3
   1d65e:	0003      	movs	r3, r0
   1d660:	001a      	movs	r2, r3
   1d662:	4b3b      	ldr	r3, [pc, #236]	; (1d750 <xQueueReceive+0x34c>)
   1d664:	881b      	ldrh	r3, [r3, #0]
   1d666:	4013      	ands	r3, r2
   1d668:	b29b      	uxth	r3, r3
   1d66a:	2b00      	cmp	r3, #0
   1d66c:	d029      	beq.n	1d6c2 <xQueueReceive+0x2be>
   1d66e:	6a3b      	ldr	r3, [r7, #32]
   1d670:	0018      	movs	r0, r3
   1d672:	4b38      	ldr	r3, [pc, #224]	; (1d754 <xQueueReceive+0x350>)
   1d674:	4798      	blx	r3
   1d676:	0003      	movs	r3, r0
   1d678:	001a      	movs	r2, r3
   1d67a:	4b35      	ldr	r3, [pc, #212]	; (1d750 <xQueueReceive+0x34c>)
   1d67c:	881b      	ldrh	r3, [r3, #0]
   1d67e:	4013      	ands	r3, r2
   1d680:	b29b      	uxth	r3, r3
   1d682:	2b00      	cmp	r3, #0
   1d684:	d01d      	beq.n	1d6c2 <xQueueReceive+0x2be>
   1d686:	6a3b      	ldr	r3, [r7, #32]
   1d688:	0018      	movs	r0, r3
   1d68a:	4b33      	ldr	r3, [pc, #204]	; (1d758 <xQueueReceive+0x354>)
   1d68c:	4798      	blx	r3
   1d68e:	0003      	movs	r3, r0
   1d690:	001a      	movs	r2, r3
   1d692:	4b32      	ldr	r3, [pc, #200]	; (1d75c <xQueueReceive+0x358>)
   1d694:	5c9b      	ldrb	r3, [r3, r2]
   1d696:	3368      	adds	r3, #104	; 0x68
   1d698:	b2db      	uxtb	r3, r3
   1d69a:	001d      	movs	r5, r3
   1d69c:	6a3b      	ldr	r3, [r7, #32]
   1d69e:	0018      	movs	r0, r3
   1d6a0:	4b2d      	ldr	r3, [pc, #180]	; (1d758 <xQueueReceive+0x354>)
   1d6a2:	4798      	blx	r3
   1d6a4:	0003      	movs	r3, r0
   1d6a6:	001a      	movs	r2, r3
   1d6a8:	4b2c      	ldr	r3, [pc, #176]	; (1d75c <xQueueReceive+0x358>)
   1d6aa:	5c9c      	ldrb	r4, [r3, r2]
   1d6ac:	6a3b      	ldr	r3, [r7, #32]
   1d6ae:	0018      	movs	r0, r3
   1d6b0:	4b2b      	ldr	r3, [pc, #172]	; (1d760 <xQueueReceive+0x35c>)
   1d6b2:	4798      	blx	r3
   1d6b4:	0003      	movs	r3, r0
   1d6b6:	b2db      	uxtb	r3, r3
   1d6b8:	001a      	movs	r2, r3
   1d6ba:	0021      	movs	r1, r4
   1d6bc:	0028      	movs	r0, r5
   1d6be:	4b29      	ldr	r3, [pc, #164]	; (1d764 <xQueueReceive+0x360>)
   1d6c0:	4798      	blx	r3
   1d6c2:	6a3b      	ldr	r3, [r7, #32]
   1d6c4:	0018      	movs	r0, r3
   1d6c6:	4b24      	ldr	r3, [pc, #144]	; (1d758 <xQueueReceive+0x354>)
   1d6c8:	4798      	blx	r3
   1d6ca:	0003      	movs	r3, r0
   1d6cc:	001a      	movs	r2, r3
   1d6ce:	4b23      	ldr	r3, [pc, #140]	; (1d75c <xQueueReceive+0x358>)
   1d6d0:	5c9b      	ldrb	r3, [r3, r2]
   1d6d2:	2b02      	cmp	r3, #2
   1d6d4:	d018      	beq.n	1d708 <xQueueReceive+0x304>
   1d6d6:	4b1c      	ldr	r3, [pc, #112]	; (1d748 <xQueueReceive+0x344>)
   1d6d8:	4798      	blx	r3
   1d6da:	0003      	movs	r3, r0
   1d6dc:	0018      	movs	r0, r3
   1d6de:	4b1b      	ldr	r3, [pc, #108]	; (1d74c <xQueueReceive+0x348>)
   1d6e0:	4798      	blx	r3
   1d6e2:	0003      	movs	r3, r0
   1d6e4:	001a      	movs	r2, r3
   1d6e6:	4b1a      	ldr	r3, [pc, #104]	; (1d750 <xQueueReceive+0x34c>)
   1d6e8:	881b      	ldrh	r3, [r3, #0]
   1d6ea:	4013      	ands	r3, r2
   1d6ec:	b29b      	uxth	r3, r3
   1d6ee:	2b00      	cmp	r3, #0
   1d6f0:	d00a      	beq.n	1d708 <xQueueReceive+0x304>
   1d6f2:	4b15      	ldr	r3, [pc, #84]	; (1d748 <xQueueReceive+0x344>)
   1d6f4:	4798      	blx	r3
   1d6f6:	0003      	movs	r3, r0
   1d6f8:	0018      	movs	r0, r3
   1d6fa:	4b1b      	ldr	r3, [pc, #108]	; (1d768 <xQueueReceive+0x364>)
   1d6fc:	4798      	blx	r3
   1d6fe:	0003      	movs	r3, r0
   1d700:	b2db      	uxtb	r3, r3
   1d702:	0018      	movs	r0, r3
   1d704:	4b21      	ldr	r3, [pc, #132]	; (1d78c <xQueueReceive+0x388>)
   1d706:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1d708:	6a3b      	ldr	r3, [r7, #32]
   1d70a:	3324      	adds	r3, #36	; 0x24
   1d70c:	687a      	ldr	r2, [r7, #4]
   1d70e:	0011      	movs	r1, r2
   1d710:	0018      	movs	r0, r3
   1d712:	4b1f      	ldr	r3, [pc, #124]	; (1d790 <xQueueReceive+0x38c>)
   1d714:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1d716:	6a3b      	ldr	r3, [r7, #32]
   1d718:	0018      	movs	r0, r3
   1d71a:	4b1e      	ldr	r3, [pc, #120]	; (1d794 <xQueueReceive+0x390>)
   1d71c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d71e:	4b1e      	ldr	r3, [pc, #120]	; (1d798 <xQueueReceive+0x394>)
   1d720:	4798      	blx	r3
   1d722:	1e03      	subs	r3, r0, #0
   1d724:	d000      	beq.n	1d728 <xQueueReceive+0x324>
   1d726:	e698      	b.n	1d45a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1d728:	4b12      	ldr	r3, [pc, #72]	; (1d774 <xQueueReceive+0x370>)
   1d72a:	4798      	blx	r3
   1d72c:	e695      	b.n	1d45a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1d72e:	6a3b      	ldr	r3, [r7, #32]
   1d730:	0018      	movs	r0, r3
   1d732:	4b18      	ldr	r3, [pc, #96]	; (1d794 <xQueueReceive+0x390>)
   1d734:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d736:	4b18      	ldr	r3, [pc, #96]	; (1d798 <xQueueReceive+0x394>)
   1d738:	4798      	blx	r3
   1d73a:	e68e      	b.n	1d45a <xQueueReceive+0x56>
   1d73c:	0001f2d9 	.word	0x0001f2d9
   1d740:	0001c5b9 	.word	0x0001c5b9
   1d744:	0001de65 	.word	0x0001de65
   1d748:	0001a84d 	.word	0x0001a84d
   1d74c:	0001a5b1 	.word	0x0001a5b1
   1d750:	20000118 	.word	0x20000118
   1d754:	0001a671 	.word	0x0001a671
   1d758:	0001a571 	.word	0x0001a571
   1d75c:	2000010c 	.word	0x2000010c
   1d760:	0001a651 	.word	0x0001a651
   1d764:	0001afa9 	.word	0x0001afa9
   1d768:	0001a591 	.word	0x0001a591
   1d76c:	0001b605 	.word	0x0001b605
   1d770:	0001ee49 	.word	0x0001ee49
   1d774:	0001c5a1 	.word	0x0001c5a1
   1d778:	0001c5dd 	.word	0x0001c5dd
   1d77c:	0001ef89 	.word	0x0001ef89
   1d780:	0001e871 	.word	0x0001e871
   1d784:	0001efb1 	.word	0x0001efb1
   1d788:	0001dfa5 	.word	0x0001dfa5
   1d78c:	0001b741 	.word	0x0001b741
   1d790:	0001ed25 	.word	0x0001ed25
   1d794:	0001deb5 	.word	0x0001deb5
   1d798:	0001e889 	.word	0x0001e889
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1d79c:	6a3b      	ldr	r3, [r7, #32]
   1d79e:	0018      	movs	r0, r3
   1d7a0:	4b23      	ldr	r3, [pc, #140]	; (1d830 <xQueueReceive+0x42c>)
   1d7a2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d7a4:	4b23      	ldr	r3, [pc, #140]	; (1d834 <xQueueReceive+0x430>)
   1d7a6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d7a8:	6a3b      	ldr	r3, [r7, #32]
   1d7aa:	0018      	movs	r0, r3
   1d7ac:	4b22      	ldr	r3, [pc, #136]	; (1d838 <xQueueReceive+0x434>)
   1d7ae:	4798      	blx	r3
   1d7b0:	1e03      	subs	r3, r0, #0
   1d7b2:	d100      	bne.n	1d7b6 <xQueueReceive+0x3b2>
   1d7b4:	e651      	b.n	1d45a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d7b6:	4b21      	ldr	r3, [pc, #132]	; (1d83c <xQueueReceive+0x438>)
   1d7b8:	4798      	blx	r3
   1d7ba:	0003      	movs	r3, r0
   1d7bc:	0018      	movs	r0, r3
   1d7be:	4b20      	ldr	r3, [pc, #128]	; (1d840 <xQueueReceive+0x43c>)
   1d7c0:	4798      	blx	r3
   1d7c2:	0003      	movs	r3, r0
   1d7c4:	001a      	movs	r2, r3
   1d7c6:	4b1f      	ldr	r3, [pc, #124]	; (1d844 <xQueueReceive+0x440>)
   1d7c8:	881b      	ldrh	r3, [r3, #0]
   1d7ca:	4013      	ands	r3, r2
   1d7cc:	b29b      	uxth	r3, r3
   1d7ce:	2b00      	cmp	r3, #0
   1d7d0:	d029      	beq.n	1d826 <xQueueReceive+0x422>
   1d7d2:	6a3b      	ldr	r3, [r7, #32]
   1d7d4:	0018      	movs	r0, r3
   1d7d6:	4b1c      	ldr	r3, [pc, #112]	; (1d848 <xQueueReceive+0x444>)
   1d7d8:	4798      	blx	r3
   1d7da:	0003      	movs	r3, r0
   1d7dc:	001a      	movs	r2, r3
   1d7de:	4b19      	ldr	r3, [pc, #100]	; (1d844 <xQueueReceive+0x440>)
   1d7e0:	881b      	ldrh	r3, [r3, #0]
   1d7e2:	4013      	ands	r3, r2
   1d7e4:	b29b      	uxth	r3, r3
   1d7e6:	2b00      	cmp	r3, #0
   1d7e8:	d01d      	beq.n	1d826 <xQueueReceive+0x422>
   1d7ea:	6a3b      	ldr	r3, [r7, #32]
   1d7ec:	0018      	movs	r0, r3
   1d7ee:	4b17      	ldr	r3, [pc, #92]	; (1d84c <xQueueReceive+0x448>)
   1d7f0:	4798      	blx	r3
   1d7f2:	0003      	movs	r3, r0
   1d7f4:	001a      	movs	r2, r3
   1d7f6:	4b16      	ldr	r3, [pc, #88]	; (1d850 <xQueueReceive+0x44c>)
   1d7f8:	5c9b      	ldrb	r3, [r3, r2]
   1d7fa:	3350      	adds	r3, #80	; 0x50
   1d7fc:	b2db      	uxtb	r3, r3
   1d7fe:	001d      	movs	r5, r3
   1d800:	6a3b      	ldr	r3, [r7, #32]
   1d802:	0018      	movs	r0, r3
   1d804:	4b11      	ldr	r3, [pc, #68]	; (1d84c <xQueueReceive+0x448>)
   1d806:	4798      	blx	r3
   1d808:	0003      	movs	r3, r0
   1d80a:	001a      	movs	r2, r3
   1d80c:	4b10      	ldr	r3, [pc, #64]	; (1d850 <xQueueReceive+0x44c>)
   1d80e:	5c9c      	ldrb	r4, [r3, r2]
   1d810:	6a3b      	ldr	r3, [r7, #32]
   1d812:	0018      	movs	r0, r3
   1d814:	4b0f      	ldr	r3, [pc, #60]	; (1d854 <xQueueReceive+0x450>)
   1d816:	4798      	blx	r3
   1d818:	0003      	movs	r3, r0
   1d81a:	b2db      	uxtb	r3, r3
   1d81c:	001a      	movs	r2, r3
   1d81e:	0021      	movs	r1, r4
   1d820:	0028      	movs	r0, r5
   1d822:	4b0d      	ldr	r3, [pc, #52]	; (1d858 <xQueueReceive+0x454>)
   1d824:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1d826:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1d828:	0018      	movs	r0, r3
   1d82a:	46bd      	mov	sp, r7
   1d82c:	b00a      	add	sp, #40	; 0x28
   1d82e:	bdb0      	pop	{r4, r5, r7, pc}
   1d830:	0001deb5 	.word	0x0001deb5
   1d834:	0001e889 	.word	0x0001e889
   1d838:	0001dfa5 	.word	0x0001dfa5
   1d83c:	0001a84d 	.word	0x0001a84d
   1d840:	0001a5b1 	.word	0x0001a5b1
   1d844:	20000118 	.word	0x20000118
   1d848:	0001a671 	.word	0x0001a671
   1d84c:	0001a571 	.word	0x0001a571
   1d850:	2000010c 	.word	0x2000010c
   1d854:	0001a651 	.word	0x0001a651
   1d858:	0001afa9 	.word	0x0001afa9

0001d85c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1d85c:	b5b0      	push	{r4, r5, r7, lr}
   1d85e:	b08a      	sub	sp, #40	; 0x28
   1d860:	af00      	add	r7, sp, #0
   1d862:	6078      	str	r0, [r7, #4]
   1d864:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1d866:	2300      	movs	r3, #0
   1d868:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d86a:	687b      	ldr	r3, [r7, #4]
   1d86c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1d86e:	2300      	movs	r3, #0
   1d870:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d872:	69fb      	ldr	r3, [r7, #28]
   1d874:	2b00      	cmp	r3, #0
   1d876:	d101      	bne.n	1d87c <xQueueSemaphoreTake+0x20>
   1d878:	b672      	cpsid	i
   1d87a:	e7fe      	b.n	1d87a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1d87c:	69fb      	ldr	r3, [r7, #28]
   1d87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d880:	2b00      	cmp	r3, #0
   1d882:	d001      	beq.n	1d888 <xQueueSemaphoreTake+0x2c>
   1d884:	b672      	cpsid	i
   1d886:	e7fe      	b.n	1d886 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d888:	4bcb      	ldr	r3, [pc, #812]	; (1dbb8 <xQueueSemaphoreTake+0x35c>)
   1d88a:	4798      	blx	r3
   1d88c:	1e03      	subs	r3, r0, #0
   1d88e:	d102      	bne.n	1d896 <xQueueSemaphoreTake+0x3a>
   1d890:	683b      	ldr	r3, [r7, #0]
   1d892:	2b00      	cmp	r3, #0
   1d894:	d101      	bne.n	1d89a <xQueueSemaphoreTake+0x3e>
   1d896:	2301      	movs	r3, #1
   1d898:	e000      	b.n	1d89c <xQueueSemaphoreTake+0x40>
   1d89a:	2300      	movs	r3, #0
   1d89c:	2b00      	cmp	r3, #0
   1d89e:	d101      	bne.n	1d8a4 <xQueueSemaphoreTake+0x48>
   1d8a0:	b672      	cpsid	i
   1d8a2:	e7fe      	b.n	1d8a2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d8a4:	4bc5      	ldr	r3, [pc, #788]	; (1dbbc <xQueueSemaphoreTake+0x360>)
   1d8a6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1d8a8:	69fb      	ldr	r3, [r7, #28]
   1d8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d8ac:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1d8ae:	69bb      	ldr	r3, [r7, #24]
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	d100      	bne.n	1d8b6 <xQueueSemaphoreTake+0x5a>
   1d8b4:	e080      	b.n	1d9b8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1d8b6:	4bc2      	ldr	r3, [pc, #776]	; (1dbc0 <xQueueSemaphoreTake+0x364>)
   1d8b8:	4798      	blx	r3
   1d8ba:	0003      	movs	r3, r0
   1d8bc:	0018      	movs	r0, r3
   1d8be:	4bc1      	ldr	r3, [pc, #772]	; (1dbc4 <xQueueSemaphoreTake+0x368>)
   1d8c0:	4798      	blx	r3
   1d8c2:	0003      	movs	r3, r0
   1d8c4:	001a      	movs	r2, r3
   1d8c6:	4bc0      	ldr	r3, [pc, #768]	; (1dbc8 <xQueueSemaphoreTake+0x36c>)
   1d8c8:	881b      	ldrh	r3, [r3, #0]
   1d8ca:	4013      	ands	r3, r2
   1d8cc:	b29b      	uxth	r3, r3
   1d8ce:	2b00      	cmp	r3, #0
   1d8d0:	d029      	beq.n	1d926 <xQueueSemaphoreTake+0xca>
   1d8d2:	69fb      	ldr	r3, [r7, #28]
   1d8d4:	0018      	movs	r0, r3
   1d8d6:	4bbd      	ldr	r3, [pc, #756]	; (1dbcc <xQueueSemaphoreTake+0x370>)
   1d8d8:	4798      	blx	r3
   1d8da:	0003      	movs	r3, r0
   1d8dc:	001a      	movs	r2, r3
   1d8de:	4bba      	ldr	r3, [pc, #744]	; (1dbc8 <xQueueSemaphoreTake+0x36c>)
   1d8e0:	881b      	ldrh	r3, [r3, #0]
   1d8e2:	4013      	ands	r3, r2
   1d8e4:	b29b      	uxth	r3, r3
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	d01d      	beq.n	1d926 <xQueueSemaphoreTake+0xca>
   1d8ea:	69fb      	ldr	r3, [r7, #28]
   1d8ec:	0018      	movs	r0, r3
   1d8ee:	4bb8      	ldr	r3, [pc, #736]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1d8f0:	4798      	blx	r3
   1d8f2:	0003      	movs	r3, r0
   1d8f4:	001a      	movs	r2, r3
   1d8f6:	4bb7      	ldr	r3, [pc, #732]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1d8f8:	5c9b      	ldrb	r3, [r3, r2]
   1d8fa:	3328      	adds	r3, #40	; 0x28
   1d8fc:	b2db      	uxtb	r3, r3
   1d8fe:	001d      	movs	r5, r3
   1d900:	69fb      	ldr	r3, [r7, #28]
   1d902:	0018      	movs	r0, r3
   1d904:	4bb2      	ldr	r3, [pc, #712]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1d906:	4798      	blx	r3
   1d908:	0003      	movs	r3, r0
   1d90a:	001a      	movs	r2, r3
   1d90c:	4bb1      	ldr	r3, [pc, #708]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1d90e:	5c9c      	ldrb	r4, [r3, r2]
   1d910:	69fb      	ldr	r3, [r7, #28]
   1d912:	0018      	movs	r0, r3
   1d914:	4bb0      	ldr	r3, [pc, #704]	; (1dbd8 <xQueueSemaphoreTake+0x37c>)
   1d916:	4798      	blx	r3
   1d918:	0003      	movs	r3, r0
   1d91a:	b2db      	uxtb	r3, r3
   1d91c:	001a      	movs	r2, r3
   1d91e:	0021      	movs	r1, r4
   1d920:	0028      	movs	r0, r5
   1d922:	4bae      	ldr	r3, [pc, #696]	; (1dbdc <xQueueSemaphoreTake+0x380>)
   1d924:	4798      	blx	r3
   1d926:	69fb      	ldr	r3, [r7, #28]
   1d928:	0018      	movs	r0, r3
   1d92a:	4ba9      	ldr	r3, [pc, #676]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1d92c:	4798      	blx	r3
   1d92e:	0003      	movs	r3, r0
   1d930:	001a      	movs	r2, r3
   1d932:	4ba8      	ldr	r3, [pc, #672]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1d934:	5c9c      	ldrb	r4, [r3, r2]
   1d936:	69fb      	ldr	r3, [r7, #28]
   1d938:	0018      	movs	r0, r3
   1d93a:	4ba7      	ldr	r3, [pc, #668]	; (1dbd8 <xQueueSemaphoreTake+0x37c>)
   1d93c:	4798      	blx	r3
   1d93e:	0003      	movs	r3, r0
   1d940:	b2dd      	uxtb	r5, r3
   1d942:	69fb      	ldr	r3, [r7, #28]
   1d944:	0018      	movs	r0, r3
   1d946:	4ba2      	ldr	r3, [pc, #648]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1d948:	4798      	blx	r3
   1d94a:	0003      	movs	r3, r0
   1d94c:	001a      	movs	r2, r3
   1d94e:	4ba1      	ldr	r3, [pc, #644]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1d950:	5c9b      	ldrb	r3, [r3, r2]
   1d952:	2b02      	cmp	r3, #2
   1d954:	d108      	bne.n	1d968 <xQueueSemaphoreTake+0x10c>
   1d956:	4b9a      	ldr	r3, [pc, #616]	; (1dbc0 <xQueueSemaphoreTake+0x364>)
   1d958:	4798      	blx	r3
   1d95a:	0003      	movs	r3, r0
   1d95c:	0018      	movs	r0, r3
   1d95e:	4ba0      	ldr	r3, [pc, #640]	; (1dbe0 <xQueueSemaphoreTake+0x384>)
   1d960:	4798      	blx	r3
   1d962:	0003      	movs	r3, r0
   1d964:	b2db      	uxtb	r3, r3
   1d966:	e004      	b.n	1d972 <xQueueSemaphoreTake+0x116>
   1d968:	69fb      	ldr	r3, [r7, #28]
   1d96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d96c:	b2db      	uxtb	r3, r3
   1d96e:	3b01      	subs	r3, #1
   1d970:	b2db      	uxtb	r3, r3
   1d972:	001a      	movs	r2, r3
   1d974:	0029      	movs	r1, r5
   1d976:	0020      	movs	r0, r4
   1d978:	4b9a      	ldr	r3, [pc, #616]	; (1dbe4 <xQueueSemaphoreTake+0x388>)
   1d97a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1d97c:	69bb      	ldr	r3, [r7, #24]
   1d97e:	1e5a      	subs	r2, r3, #1
   1d980:	69fb      	ldr	r3, [r7, #28]
   1d982:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1d984:	69fb      	ldr	r3, [r7, #28]
   1d986:	681b      	ldr	r3, [r3, #0]
   1d988:	2b00      	cmp	r3, #0
   1d98a:	d104      	bne.n	1d996 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1d98c:	4b96      	ldr	r3, [pc, #600]	; (1dbe8 <xQueueSemaphoreTake+0x38c>)
   1d98e:	4798      	blx	r3
   1d990:	0002      	movs	r2, r0
   1d992:	69fb      	ldr	r3, [r7, #28]
   1d994:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d996:	69fb      	ldr	r3, [r7, #28]
   1d998:	691b      	ldr	r3, [r3, #16]
   1d99a:	2b00      	cmp	r3, #0
   1d99c:	d008      	beq.n	1d9b0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d99e:	69fb      	ldr	r3, [r7, #28]
   1d9a0:	3310      	adds	r3, #16
   1d9a2:	0018      	movs	r0, r3
   1d9a4:	4b91      	ldr	r3, [pc, #580]	; (1dbec <xQueueSemaphoreTake+0x390>)
   1d9a6:	4798      	blx	r3
   1d9a8:	1e03      	subs	r3, r0, #0
   1d9aa:	d001      	beq.n	1d9b0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d9ac:	4b90      	ldr	r3, [pc, #576]	; (1dbf0 <xQueueSemaphoreTake+0x394>)
   1d9ae:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d9b0:	4b90      	ldr	r3, [pc, #576]	; (1dbf4 <xQueueSemaphoreTake+0x398>)
   1d9b2:	4798      	blx	r3
				return pdPASS;
   1d9b4:	2301      	movs	r3, #1
   1d9b6:	e18b      	b.n	1dcd0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d9b8:	683b      	ldr	r3, [r7, #0]
   1d9ba:	2b00      	cmp	r3, #0
   1d9bc:	d140      	bne.n	1da40 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1d9be:	6a3b      	ldr	r3, [r7, #32]
   1d9c0:	2b00      	cmp	r3, #0
   1d9c2:	d001      	beq.n	1d9c8 <xQueueSemaphoreTake+0x16c>
   1d9c4:	b672      	cpsid	i
   1d9c6:	e7fe      	b.n	1d9c6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1d9c8:	4b8a      	ldr	r3, [pc, #552]	; (1dbf4 <xQueueSemaphoreTake+0x398>)
   1d9ca:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d9cc:	4b7c      	ldr	r3, [pc, #496]	; (1dbc0 <xQueueSemaphoreTake+0x364>)
   1d9ce:	4798      	blx	r3
   1d9d0:	0003      	movs	r3, r0
   1d9d2:	0018      	movs	r0, r3
   1d9d4:	4b7b      	ldr	r3, [pc, #492]	; (1dbc4 <xQueueSemaphoreTake+0x368>)
   1d9d6:	4798      	blx	r3
   1d9d8:	0003      	movs	r3, r0
   1d9da:	001a      	movs	r2, r3
   1d9dc:	4b7a      	ldr	r3, [pc, #488]	; (1dbc8 <xQueueSemaphoreTake+0x36c>)
   1d9de:	881b      	ldrh	r3, [r3, #0]
   1d9e0:	4013      	ands	r3, r2
   1d9e2:	b29b      	uxth	r3, r3
   1d9e4:	2b00      	cmp	r3, #0
   1d9e6:	d029      	beq.n	1da3c <xQueueSemaphoreTake+0x1e0>
   1d9e8:	69fb      	ldr	r3, [r7, #28]
   1d9ea:	0018      	movs	r0, r3
   1d9ec:	4b77      	ldr	r3, [pc, #476]	; (1dbcc <xQueueSemaphoreTake+0x370>)
   1d9ee:	4798      	blx	r3
   1d9f0:	0003      	movs	r3, r0
   1d9f2:	001a      	movs	r2, r3
   1d9f4:	4b74      	ldr	r3, [pc, #464]	; (1dbc8 <xQueueSemaphoreTake+0x36c>)
   1d9f6:	881b      	ldrh	r3, [r3, #0]
   1d9f8:	4013      	ands	r3, r2
   1d9fa:	b29b      	uxth	r3, r3
   1d9fc:	2b00      	cmp	r3, #0
   1d9fe:	d01d      	beq.n	1da3c <xQueueSemaphoreTake+0x1e0>
   1da00:	69fb      	ldr	r3, [r7, #28]
   1da02:	0018      	movs	r0, r3
   1da04:	4b72      	ldr	r3, [pc, #456]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1da06:	4798      	blx	r3
   1da08:	0003      	movs	r3, r0
   1da0a:	001a      	movs	r2, r3
   1da0c:	4b71      	ldr	r3, [pc, #452]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1da0e:	5c9b      	ldrb	r3, [r3, r2]
   1da10:	3350      	adds	r3, #80	; 0x50
   1da12:	b2db      	uxtb	r3, r3
   1da14:	001d      	movs	r5, r3
   1da16:	69fb      	ldr	r3, [r7, #28]
   1da18:	0018      	movs	r0, r3
   1da1a:	4b6d      	ldr	r3, [pc, #436]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1da1c:	4798      	blx	r3
   1da1e:	0003      	movs	r3, r0
   1da20:	001a      	movs	r2, r3
   1da22:	4b6c      	ldr	r3, [pc, #432]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1da24:	5c9c      	ldrb	r4, [r3, r2]
   1da26:	69fb      	ldr	r3, [r7, #28]
   1da28:	0018      	movs	r0, r3
   1da2a:	4b6b      	ldr	r3, [pc, #428]	; (1dbd8 <xQueueSemaphoreTake+0x37c>)
   1da2c:	4798      	blx	r3
   1da2e:	0003      	movs	r3, r0
   1da30:	b2db      	uxtb	r3, r3
   1da32:	001a      	movs	r2, r3
   1da34:	0021      	movs	r1, r4
   1da36:	0028      	movs	r0, r5
   1da38:	4b68      	ldr	r3, [pc, #416]	; (1dbdc <xQueueSemaphoreTake+0x380>)
   1da3a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1da3c:	2300      	movs	r3, #0
   1da3e:	e147      	b.n	1dcd0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1da42:	2b00      	cmp	r3, #0
   1da44:	d106      	bne.n	1da54 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1da46:	230c      	movs	r3, #12
   1da48:	18fb      	adds	r3, r7, r3
   1da4a:	0018      	movs	r0, r3
   1da4c:	4b6a      	ldr	r3, [pc, #424]	; (1dbf8 <xQueueSemaphoreTake+0x39c>)
   1da4e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1da50:	2301      	movs	r3, #1
   1da52:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1da54:	4b67      	ldr	r3, [pc, #412]	; (1dbf4 <xQueueSemaphoreTake+0x398>)
   1da56:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1da58:	4b68      	ldr	r3, [pc, #416]	; (1dbfc <xQueueSemaphoreTake+0x3a0>)
   1da5a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1da5c:	4b57      	ldr	r3, [pc, #348]	; (1dbbc <xQueueSemaphoreTake+0x360>)
   1da5e:	4798      	blx	r3
   1da60:	69fb      	ldr	r3, [r7, #28]
   1da62:	2244      	movs	r2, #68	; 0x44
   1da64:	5c9b      	ldrb	r3, [r3, r2]
   1da66:	b25b      	sxtb	r3, r3
   1da68:	3301      	adds	r3, #1
   1da6a:	d103      	bne.n	1da74 <xQueueSemaphoreTake+0x218>
   1da6c:	69fb      	ldr	r3, [r7, #28]
   1da6e:	2244      	movs	r2, #68	; 0x44
   1da70:	2100      	movs	r1, #0
   1da72:	5499      	strb	r1, [r3, r2]
   1da74:	69fb      	ldr	r3, [r7, #28]
   1da76:	2245      	movs	r2, #69	; 0x45
   1da78:	5c9b      	ldrb	r3, [r3, r2]
   1da7a:	b25b      	sxtb	r3, r3
   1da7c:	3301      	adds	r3, #1
   1da7e:	d103      	bne.n	1da88 <xQueueSemaphoreTake+0x22c>
   1da80:	69fb      	ldr	r3, [r7, #28]
   1da82:	2245      	movs	r2, #69	; 0x45
   1da84:	2100      	movs	r1, #0
   1da86:	5499      	strb	r1, [r3, r2]
   1da88:	4b5a      	ldr	r3, [pc, #360]	; (1dbf4 <xQueueSemaphoreTake+0x398>)
   1da8a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1da8c:	003a      	movs	r2, r7
   1da8e:	230c      	movs	r3, #12
   1da90:	18fb      	adds	r3, r7, r3
   1da92:	0011      	movs	r1, r2
   1da94:	0018      	movs	r0, r3
   1da96:	4b5a      	ldr	r3, [pc, #360]	; (1dc00 <xQueueSemaphoreTake+0x3a4>)
   1da98:	4798      	blx	r3
   1da9a:	1e03      	subs	r3, r0, #0
   1da9c:	d000      	beq.n	1daa0 <xQueueSemaphoreTake+0x244>
   1da9e:	e0bd      	b.n	1dc1c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1daa0:	69fb      	ldr	r3, [r7, #28]
   1daa2:	0018      	movs	r0, r3
   1daa4:	4b57      	ldr	r3, [pc, #348]	; (1dc04 <xQueueSemaphoreTake+0x3a8>)
   1daa6:	4798      	blx	r3
   1daa8:	1e03      	subs	r3, r0, #0
   1daaa:	d100      	bne.n	1daae <xQueueSemaphoreTake+0x252>
   1daac:	e07c      	b.n	1dba8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1daae:	4b44      	ldr	r3, [pc, #272]	; (1dbc0 <xQueueSemaphoreTake+0x364>)
   1dab0:	4798      	blx	r3
   1dab2:	0003      	movs	r3, r0
   1dab4:	0018      	movs	r0, r3
   1dab6:	4b43      	ldr	r3, [pc, #268]	; (1dbc4 <xQueueSemaphoreTake+0x368>)
   1dab8:	4798      	blx	r3
   1daba:	0003      	movs	r3, r0
   1dabc:	001a      	movs	r2, r3
   1dabe:	4b42      	ldr	r3, [pc, #264]	; (1dbc8 <xQueueSemaphoreTake+0x36c>)
   1dac0:	881b      	ldrh	r3, [r3, #0]
   1dac2:	4013      	ands	r3, r2
   1dac4:	b29b      	uxth	r3, r3
   1dac6:	2b00      	cmp	r3, #0
   1dac8:	d029      	beq.n	1db1e <xQueueSemaphoreTake+0x2c2>
   1daca:	69fb      	ldr	r3, [r7, #28]
   1dacc:	0018      	movs	r0, r3
   1dace:	4b3f      	ldr	r3, [pc, #252]	; (1dbcc <xQueueSemaphoreTake+0x370>)
   1dad0:	4798      	blx	r3
   1dad2:	0003      	movs	r3, r0
   1dad4:	001a      	movs	r2, r3
   1dad6:	4b3c      	ldr	r3, [pc, #240]	; (1dbc8 <xQueueSemaphoreTake+0x36c>)
   1dad8:	881b      	ldrh	r3, [r3, #0]
   1dada:	4013      	ands	r3, r2
   1dadc:	b29b      	uxth	r3, r3
   1dade:	2b00      	cmp	r3, #0
   1dae0:	d01d      	beq.n	1db1e <xQueueSemaphoreTake+0x2c2>
   1dae2:	69fb      	ldr	r3, [r7, #28]
   1dae4:	0018      	movs	r0, r3
   1dae6:	4b3a      	ldr	r3, [pc, #232]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1dae8:	4798      	blx	r3
   1daea:	0003      	movs	r3, r0
   1daec:	001a      	movs	r2, r3
   1daee:	4b39      	ldr	r3, [pc, #228]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1daf0:	5c9b      	ldrb	r3, [r3, r2]
   1daf2:	3368      	adds	r3, #104	; 0x68
   1daf4:	b2db      	uxtb	r3, r3
   1daf6:	001d      	movs	r5, r3
   1daf8:	69fb      	ldr	r3, [r7, #28]
   1dafa:	0018      	movs	r0, r3
   1dafc:	4b34      	ldr	r3, [pc, #208]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1dafe:	4798      	blx	r3
   1db00:	0003      	movs	r3, r0
   1db02:	001a      	movs	r2, r3
   1db04:	4b33      	ldr	r3, [pc, #204]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1db06:	5c9c      	ldrb	r4, [r3, r2]
   1db08:	69fb      	ldr	r3, [r7, #28]
   1db0a:	0018      	movs	r0, r3
   1db0c:	4b32      	ldr	r3, [pc, #200]	; (1dbd8 <xQueueSemaphoreTake+0x37c>)
   1db0e:	4798      	blx	r3
   1db10:	0003      	movs	r3, r0
   1db12:	b2db      	uxtb	r3, r3
   1db14:	001a      	movs	r2, r3
   1db16:	0021      	movs	r1, r4
   1db18:	0028      	movs	r0, r5
   1db1a:	4b30      	ldr	r3, [pc, #192]	; (1dbdc <xQueueSemaphoreTake+0x380>)
   1db1c:	4798      	blx	r3
   1db1e:	69fb      	ldr	r3, [r7, #28]
   1db20:	0018      	movs	r0, r3
   1db22:	4b2b      	ldr	r3, [pc, #172]	; (1dbd0 <xQueueSemaphoreTake+0x374>)
   1db24:	4798      	blx	r3
   1db26:	0003      	movs	r3, r0
   1db28:	001a      	movs	r2, r3
   1db2a:	4b2a      	ldr	r3, [pc, #168]	; (1dbd4 <xQueueSemaphoreTake+0x378>)
   1db2c:	5c9b      	ldrb	r3, [r3, r2]
   1db2e:	2b02      	cmp	r3, #2
   1db30:	d018      	beq.n	1db64 <xQueueSemaphoreTake+0x308>
   1db32:	4b23      	ldr	r3, [pc, #140]	; (1dbc0 <xQueueSemaphoreTake+0x364>)
   1db34:	4798      	blx	r3
   1db36:	0003      	movs	r3, r0
   1db38:	0018      	movs	r0, r3
   1db3a:	4b22      	ldr	r3, [pc, #136]	; (1dbc4 <xQueueSemaphoreTake+0x368>)
   1db3c:	4798      	blx	r3
   1db3e:	0003      	movs	r3, r0
   1db40:	001a      	movs	r2, r3
   1db42:	4b21      	ldr	r3, [pc, #132]	; (1dbc8 <xQueueSemaphoreTake+0x36c>)
   1db44:	881b      	ldrh	r3, [r3, #0]
   1db46:	4013      	ands	r3, r2
   1db48:	b29b      	uxth	r3, r3
   1db4a:	2b00      	cmp	r3, #0
   1db4c:	d00a      	beq.n	1db64 <xQueueSemaphoreTake+0x308>
   1db4e:	4b1c      	ldr	r3, [pc, #112]	; (1dbc0 <xQueueSemaphoreTake+0x364>)
   1db50:	4798      	blx	r3
   1db52:	0003      	movs	r3, r0
   1db54:	0018      	movs	r0, r3
   1db56:	4b22      	ldr	r3, [pc, #136]	; (1dbe0 <xQueueSemaphoreTake+0x384>)
   1db58:	4798      	blx	r3
   1db5a:	0003      	movs	r3, r0
   1db5c:	b2db      	uxtb	r3, r3
   1db5e:	0018      	movs	r0, r3
   1db60:	4b29      	ldr	r3, [pc, #164]	; (1dc08 <xQueueSemaphoreTake+0x3ac>)
   1db62:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1db64:	69fb      	ldr	r3, [r7, #28]
   1db66:	681b      	ldr	r3, [r3, #0]
   1db68:	2b00      	cmp	r3, #0
   1db6a:	d10a      	bne.n	1db82 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1db6c:	4b13      	ldr	r3, [pc, #76]	; (1dbbc <xQueueSemaphoreTake+0x360>)
   1db6e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1db70:	69fb      	ldr	r3, [r7, #28]
   1db72:	685b      	ldr	r3, [r3, #4]
   1db74:	0018      	movs	r0, r3
   1db76:	4b25      	ldr	r3, [pc, #148]	; (1dc0c <xQueueSemaphoreTake+0x3b0>)
   1db78:	4798      	blx	r3
   1db7a:	0003      	movs	r3, r0
   1db7c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1db7e:	4b1d      	ldr	r3, [pc, #116]	; (1dbf4 <xQueueSemaphoreTake+0x398>)
   1db80:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1db82:	69fb      	ldr	r3, [r7, #28]
   1db84:	3324      	adds	r3, #36	; 0x24
   1db86:	683a      	ldr	r2, [r7, #0]
   1db88:	0011      	movs	r1, r2
   1db8a:	0018      	movs	r0, r3
   1db8c:	4b20      	ldr	r3, [pc, #128]	; (1dc10 <xQueueSemaphoreTake+0x3b4>)
   1db8e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1db90:	69fb      	ldr	r3, [r7, #28]
   1db92:	0018      	movs	r0, r3
   1db94:	4b1f      	ldr	r3, [pc, #124]	; (1dc14 <xQueueSemaphoreTake+0x3b8>)
   1db96:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1db98:	4b1f      	ldr	r3, [pc, #124]	; (1dc18 <xQueueSemaphoreTake+0x3bc>)
   1db9a:	4798      	blx	r3
   1db9c:	1e03      	subs	r3, r0, #0
   1db9e:	d000      	beq.n	1dba2 <xQueueSemaphoreTake+0x346>
   1dba0:	e680      	b.n	1d8a4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1dba2:	4b13      	ldr	r3, [pc, #76]	; (1dbf0 <xQueueSemaphoreTake+0x394>)
   1dba4:	4798      	blx	r3
   1dba6:	e67d      	b.n	1d8a4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1dba8:	69fb      	ldr	r3, [r7, #28]
   1dbaa:	0018      	movs	r0, r3
   1dbac:	4b19      	ldr	r3, [pc, #100]	; (1dc14 <xQueueSemaphoreTake+0x3b8>)
   1dbae:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1dbb0:	4b19      	ldr	r3, [pc, #100]	; (1dc18 <xQueueSemaphoreTake+0x3bc>)
   1dbb2:	4798      	blx	r3
   1dbb4:	e676      	b.n	1d8a4 <xQueueSemaphoreTake+0x48>
   1dbb6:	46c0      	nop			; (mov r8, r8)
   1dbb8:	0001f2d9 	.word	0x0001f2d9
   1dbbc:	0001c5b9 	.word	0x0001c5b9
   1dbc0:	0001a84d 	.word	0x0001a84d
   1dbc4:	0001a5b1 	.word	0x0001a5b1
   1dbc8:	20000118 	.word	0x20000118
   1dbcc:	0001a671 	.word	0x0001a671
   1dbd0:	0001a571 	.word	0x0001a571
   1dbd4:	2000010c 	.word	0x2000010c
   1dbd8:	0001a651 	.word	0x0001a651
   1dbdc:	0001afa9 	.word	0x0001afa9
   1dbe0:	0001a591 	.word	0x0001a591
   1dbe4:	0001b605 	.word	0x0001b605
   1dbe8:	0001f7a5 	.word	0x0001f7a5
   1dbec:	0001ee49 	.word	0x0001ee49
   1dbf0:	0001c5a1 	.word	0x0001c5a1
   1dbf4:	0001c5dd 	.word	0x0001c5dd
   1dbf8:	0001ef89 	.word	0x0001ef89
   1dbfc:	0001e871 	.word	0x0001e871
   1dc00:	0001efb1 	.word	0x0001efb1
   1dc04:	0001dfa5 	.word	0x0001dfa5
   1dc08:	0001b741 	.word	0x0001b741
   1dc0c:	0001f311 	.word	0x0001f311
   1dc10:	0001ed25 	.word	0x0001ed25
   1dc14:	0001deb5 	.word	0x0001deb5
   1dc18:	0001e889 	.word	0x0001e889
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1dc1c:	69fb      	ldr	r3, [r7, #28]
   1dc1e:	0018      	movs	r0, r3
   1dc20:	4b2d      	ldr	r3, [pc, #180]	; (1dcd8 <xQueueSemaphoreTake+0x47c>)
   1dc22:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1dc24:	4b2d      	ldr	r3, [pc, #180]	; (1dcdc <xQueueSemaphoreTake+0x480>)
   1dc26:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1dc28:	69fb      	ldr	r3, [r7, #28]
   1dc2a:	0018      	movs	r0, r3
   1dc2c:	4b2c      	ldr	r3, [pc, #176]	; (1dce0 <xQueueSemaphoreTake+0x484>)
   1dc2e:	4798      	blx	r3
   1dc30:	1e03      	subs	r3, r0, #0
   1dc32:	d100      	bne.n	1dc36 <xQueueSemaphoreTake+0x3da>
   1dc34:	e636      	b.n	1d8a4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1dc36:	6a3b      	ldr	r3, [r7, #32]
   1dc38:	2b00      	cmp	r3, #0
   1dc3a:	d010      	beq.n	1dc5e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1dc3c:	4b29      	ldr	r3, [pc, #164]	; (1dce4 <xQueueSemaphoreTake+0x488>)
   1dc3e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1dc40:	69fb      	ldr	r3, [r7, #28]
   1dc42:	0018      	movs	r0, r3
   1dc44:	4b28      	ldr	r3, [pc, #160]	; (1dce8 <xQueueSemaphoreTake+0x48c>)
   1dc46:	4798      	blx	r3
   1dc48:	0003      	movs	r3, r0
   1dc4a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1dc4c:	69fb      	ldr	r3, [r7, #28]
   1dc4e:	685b      	ldr	r3, [r3, #4]
   1dc50:	697a      	ldr	r2, [r7, #20]
   1dc52:	0011      	movs	r1, r2
   1dc54:	0018      	movs	r0, r3
   1dc56:	4b25      	ldr	r3, [pc, #148]	; (1dcec <xQueueSemaphoreTake+0x490>)
   1dc58:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1dc5a:	4b25      	ldr	r3, [pc, #148]	; (1dcf0 <xQueueSemaphoreTake+0x494>)
   1dc5c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1dc5e:	4b25      	ldr	r3, [pc, #148]	; (1dcf4 <xQueueSemaphoreTake+0x498>)
   1dc60:	4798      	blx	r3
   1dc62:	0003      	movs	r3, r0
   1dc64:	0018      	movs	r0, r3
   1dc66:	4b24      	ldr	r3, [pc, #144]	; (1dcf8 <xQueueSemaphoreTake+0x49c>)
   1dc68:	4798      	blx	r3
   1dc6a:	0003      	movs	r3, r0
   1dc6c:	001a      	movs	r2, r3
   1dc6e:	4b23      	ldr	r3, [pc, #140]	; (1dcfc <xQueueSemaphoreTake+0x4a0>)
   1dc70:	881b      	ldrh	r3, [r3, #0]
   1dc72:	4013      	ands	r3, r2
   1dc74:	b29b      	uxth	r3, r3
   1dc76:	2b00      	cmp	r3, #0
   1dc78:	d029      	beq.n	1dcce <xQueueSemaphoreTake+0x472>
   1dc7a:	69fb      	ldr	r3, [r7, #28]
   1dc7c:	0018      	movs	r0, r3
   1dc7e:	4b20      	ldr	r3, [pc, #128]	; (1dd00 <xQueueSemaphoreTake+0x4a4>)
   1dc80:	4798      	blx	r3
   1dc82:	0003      	movs	r3, r0
   1dc84:	001a      	movs	r2, r3
   1dc86:	4b1d      	ldr	r3, [pc, #116]	; (1dcfc <xQueueSemaphoreTake+0x4a0>)
   1dc88:	881b      	ldrh	r3, [r3, #0]
   1dc8a:	4013      	ands	r3, r2
   1dc8c:	b29b      	uxth	r3, r3
   1dc8e:	2b00      	cmp	r3, #0
   1dc90:	d01d      	beq.n	1dcce <xQueueSemaphoreTake+0x472>
   1dc92:	69fb      	ldr	r3, [r7, #28]
   1dc94:	0018      	movs	r0, r3
   1dc96:	4b1b      	ldr	r3, [pc, #108]	; (1dd04 <xQueueSemaphoreTake+0x4a8>)
   1dc98:	4798      	blx	r3
   1dc9a:	0003      	movs	r3, r0
   1dc9c:	001a      	movs	r2, r3
   1dc9e:	4b1a      	ldr	r3, [pc, #104]	; (1dd08 <xQueueSemaphoreTake+0x4ac>)
   1dca0:	5c9b      	ldrb	r3, [r3, r2]
   1dca2:	3350      	adds	r3, #80	; 0x50
   1dca4:	b2db      	uxtb	r3, r3
   1dca6:	001d      	movs	r5, r3
   1dca8:	69fb      	ldr	r3, [r7, #28]
   1dcaa:	0018      	movs	r0, r3
   1dcac:	4b15      	ldr	r3, [pc, #84]	; (1dd04 <xQueueSemaphoreTake+0x4a8>)
   1dcae:	4798      	blx	r3
   1dcb0:	0003      	movs	r3, r0
   1dcb2:	001a      	movs	r2, r3
   1dcb4:	4b14      	ldr	r3, [pc, #80]	; (1dd08 <xQueueSemaphoreTake+0x4ac>)
   1dcb6:	5c9c      	ldrb	r4, [r3, r2]
   1dcb8:	69fb      	ldr	r3, [r7, #28]
   1dcba:	0018      	movs	r0, r3
   1dcbc:	4b13      	ldr	r3, [pc, #76]	; (1dd0c <xQueueSemaphoreTake+0x4b0>)
   1dcbe:	4798      	blx	r3
   1dcc0:	0003      	movs	r3, r0
   1dcc2:	b2db      	uxtb	r3, r3
   1dcc4:	001a      	movs	r2, r3
   1dcc6:	0021      	movs	r1, r4
   1dcc8:	0028      	movs	r0, r5
   1dcca:	4b11      	ldr	r3, [pc, #68]	; (1dd10 <xQueueSemaphoreTake+0x4b4>)
   1dccc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1dcce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1dcd0:	0018      	movs	r0, r3
   1dcd2:	46bd      	mov	sp, r7
   1dcd4:	b00a      	add	sp, #40	; 0x28
   1dcd6:	bdb0      	pop	{r4, r5, r7, pc}
   1dcd8:	0001deb5 	.word	0x0001deb5
   1dcdc:	0001e889 	.word	0x0001e889
   1dce0:	0001dfa5 	.word	0x0001dfa5
   1dce4:	0001c5b9 	.word	0x0001c5b9
   1dce8:	0001dd57 	.word	0x0001dd57
   1dcec:	0001f609 	.word	0x0001f609
   1dcf0:	0001c5dd 	.word	0x0001c5dd
   1dcf4:	0001a84d 	.word	0x0001a84d
   1dcf8:	0001a5b1 	.word	0x0001a5b1
   1dcfc:	20000118 	.word	0x20000118
   1dd00:	0001a671 	.word	0x0001a671
   1dd04:	0001a571 	.word	0x0001a571
   1dd08:	2000010c 	.word	0x2000010c
   1dd0c:	0001a651 	.word	0x0001a651
   1dd10:	0001afa9 	.word	0x0001afa9

0001dd14 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1dd14:	b580      	push	{r7, lr}
   1dd16:	b082      	sub	sp, #8
   1dd18:	af00      	add	r7, sp, #0
   1dd1a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1dd1c:	687b      	ldr	r3, [r7, #4]
   1dd1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1dd20:	0018      	movs	r0, r3
   1dd22:	46bd      	mov	sp, r7
   1dd24:	b002      	add	sp, #8
   1dd26:	bd80      	pop	{r7, pc}

0001dd28 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1dd28:	b580      	push	{r7, lr}
   1dd2a:	b082      	sub	sp, #8
   1dd2c:	af00      	add	r7, sp, #0
   1dd2e:	6078      	str	r0, [r7, #4]
   1dd30:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1dd32:	687b      	ldr	r3, [r7, #4]
   1dd34:	683a      	ldr	r2, [r7, #0]
   1dd36:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1dd38:	46c0      	nop			; (mov r8, r8)
   1dd3a:	46bd      	mov	sp, r7
   1dd3c:	b002      	add	sp, #8
   1dd3e:	bd80      	pop	{r7, pc}

0001dd40 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1dd40:	b580      	push	{r7, lr}
   1dd42:	b082      	sub	sp, #8
   1dd44:	af00      	add	r7, sp, #0
   1dd46:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1dd48:	687b      	ldr	r3, [r7, #4]
   1dd4a:	2250      	movs	r2, #80	; 0x50
   1dd4c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1dd4e:	0018      	movs	r0, r3
   1dd50:	46bd      	mov	sp, r7
   1dd52:	b002      	add	sp, #8
   1dd54:	bd80      	pop	{r7, pc}

0001dd56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1dd56:	b580      	push	{r7, lr}
   1dd58:	b084      	sub	sp, #16
   1dd5a:	af00      	add	r7, sp, #0
   1dd5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1dd5e:	687b      	ldr	r3, [r7, #4]
   1dd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dd62:	2b00      	cmp	r3, #0
   1dd64:	d006      	beq.n	1dd74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1dd66:	687b      	ldr	r3, [r7, #4]
   1dd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dd6a:	681b      	ldr	r3, [r3, #0]
   1dd6c:	2205      	movs	r2, #5
   1dd6e:	1ad3      	subs	r3, r2, r3
   1dd70:	60fb      	str	r3, [r7, #12]
   1dd72:	e001      	b.n	1dd78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1dd74:	2300      	movs	r3, #0
   1dd76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1dd78:	68fb      	ldr	r3, [r7, #12]
	}
   1dd7a:	0018      	movs	r0, r3
   1dd7c:	46bd      	mov	sp, r7
   1dd7e:	b004      	add	sp, #16
   1dd80:	bd80      	pop	{r7, pc}
	...

0001dd84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1dd84:	b580      	push	{r7, lr}
   1dd86:	b086      	sub	sp, #24
   1dd88:	af00      	add	r7, sp, #0
   1dd8a:	60f8      	str	r0, [r7, #12]
   1dd8c:	60b9      	str	r1, [r7, #8]
   1dd8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1dd90:	2300      	movs	r3, #0
   1dd92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1dd94:	68fb      	ldr	r3, [r7, #12]
   1dd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dd98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1dd9a:	68fb      	ldr	r3, [r7, #12]
   1dd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dd9e:	2b00      	cmp	r3, #0
   1dda0:	d10e      	bne.n	1ddc0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1dda2:	68fb      	ldr	r3, [r7, #12]
   1dda4:	681b      	ldr	r3, [r3, #0]
   1dda6:	2b00      	cmp	r3, #0
   1dda8:	d14e      	bne.n	1de48 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1ddaa:	68fb      	ldr	r3, [r7, #12]
   1ddac:	685b      	ldr	r3, [r3, #4]
   1ddae:	0018      	movs	r0, r3
   1ddb0:	4b2a      	ldr	r3, [pc, #168]	; (1de5c <prvCopyDataToQueue+0xd8>)
   1ddb2:	4798      	blx	r3
   1ddb4:	0003      	movs	r3, r0
   1ddb6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1ddb8:	68fb      	ldr	r3, [r7, #12]
   1ddba:	2200      	movs	r2, #0
   1ddbc:	605a      	str	r2, [r3, #4]
   1ddbe:	e043      	b.n	1de48 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1ddc0:	687b      	ldr	r3, [r7, #4]
   1ddc2:	2b00      	cmp	r3, #0
   1ddc4:	d119      	bne.n	1ddfa <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1ddc6:	68fb      	ldr	r3, [r7, #12]
   1ddc8:	6898      	ldr	r0, [r3, #8]
   1ddca:	68fb      	ldr	r3, [r7, #12]
   1ddcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ddce:	68bb      	ldr	r3, [r7, #8]
   1ddd0:	0019      	movs	r1, r3
   1ddd2:	4b23      	ldr	r3, [pc, #140]	; (1de60 <prvCopyDataToQueue+0xdc>)
   1ddd4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1ddd6:	68fb      	ldr	r3, [r7, #12]
   1ddd8:	689a      	ldr	r2, [r3, #8]
   1ddda:	68fb      	ldr	r3, [r7, #12]
   1dddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ddde:	18d2      	adds	r2, r2, r3
   1dde0:	68fb      	ldr	r3, [r7, #12]
   1dde2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1dde4:	68fb      	ldr	r3, [r7, #12]
   1dde6:	689a      	ldr	r2, [r3, #8]
   1dde8:	68fb      	ldr	r3, [r7, #12]
   1ddea:	685b      	ldr	r3, [r3, #4]
   1ddec:	429a      	cmp	r2, r3
   1ddee:	d32b      	bcc.n	1de48 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ddf0:	68fb      	ldr	r3, [r7, #12]
   1ddf2:	681a      	ldr	r2, [r3, #0]
   1ddf4:	68fb      	ldr	r3, [r7, #12]
   1ddf6:	609a      	str	r2, [r3, #8]
   1ddf8:	e026      	b.n	1de48 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ddfa:	68fb      	ldr	r3, [r7, #12]
   1ddfc:	68d8      	ldr	r0, [r3, #12]
   1ddfe:	68fb      	ldr	r3, [r7, #12]
   1de00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1de02:	68bb      	ldr	r3, [r7, #8]
   1de04:	0019      	movs	r1, r3
   1de06:	4b16      	ldr	r3, [pc, #88]	; (1de60 <prvCopyDataToQueue+0xdc>)
   1de08:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1de0a:	68fb      	ldr	r3, [r7, #12]
   1de0c:	68da      	ldr	r2, [r3, #12]
   1de0e:	68fb      	ldr	r3, [r7, #12]
   1de10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de12:	425b      	negs	r3, r3
   1de14:	18d2      	adds	r2, r2, r3
   1de16:	68fb      	ldr	r3, [r7, #12]
   1de18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1de1a:	68fb      	ldr	r3, [r7, #12]
   1de1c:	68da      	ldr	r2, [r3, #12]
   1de1e:	68fb      	ldr	r3, [r7, #12]
   1de20:	681b      	ldr	r3, [r3, #0]
   1de22:	429a      	cmp	r2, r3
   1de24:	d207      	bcs.n	1de36 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1de26:	68fb      	ldr	r3, [r7, #12]
   1de28:	685a      	ldr	r2, [r3, #4]
   1de2a:	68fb      	ldr	r3, [r7, #12]
   1de2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de2e:	425b      	negs	r3, r3
   1de30:	18d2      	adds	r2, r2, r3
   1de32:	68fb      	ldr	r3, [r7, #12]
   1de34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1de36:	687b      	ldr	r3, [r7, #4]
   1de38:	2b02      	cmp	r3, #2
   1de3a:	d105      	bne.n	1de48 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1de3c:	693b      	ldr	r3, [r7, #16]
   1de3e:	2b00      	cmp	r3, #0
   1de40:	d002      	beq.n	1de48 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1de42:	693b      	ldr	r3, [r7, #16]
   1de44:	3b01      	subs	r3, #1
   1de46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1de48:	693b      	ldr	r3, [r7, #16]
   1de4a:	1c5a      	adds	r2, r3, #1
   1de4c:	68fb      	ldr	r3, [r7, #12]
   1de4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1de50:	697b      	ldr	r3, [r7, #20]
}
   1de52:	0018      	movs	r0, r3
   1de54:	46bd      	mov	sp, r7
   1de56:	b006      	add	sp, #24
   1de58:	bd80      	pop	{r7, pc}
   1de5a:	46c0      	nop			; (mov r8, r8)
   1de5c:	0001f4a1 	.word	0x0001f4a1
   1de60:	00037935 	.word	0x00037935

0001de64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1de64:	b580      	push	{r7, lr}
   1de66:	b082      	sub	sp, #8
   1de68:	af00      	add	r7, sp, #0
   1de6a:	6078      	str	r0, [r7, #4]
   1de6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1de6e:	687b      	ldr	r3, [r7, #4]
   1de70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de72:	2b00      	cmp	r3, #0
   1de74:	d018      	beq.n	1dea8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1de76:	687b      	ldr	r3, [r7, #4]
   1de78:	68da      	ldr	r2, [r3, #12]
   1de7a:	687b      	ldr	r3, [r7, #4]
   1de7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de7e:	18d2      	adds	r2, r2, r3
   1de80:	687b      	ldr	r3, [r7, #4]
   1de82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1de84:	687b      	ldr	r3, [r7, #4]
   1de86:	68da      	ldr	r2, [r3, #12]
   1de88:	687b      	ldr	r3, [r7, #4]
   1de8a:	685b      	ldr	r3, [r3, #4]
   1de8c:	429a      	cmp	r2, r3
   1de8e:	d303      	bcc.n	1de98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1de90:	687b      	ldr	r3, [r7, #4]
   1de92:	681a      	ldr	r2, [r3, #0]
   1de94:	687b      	ldr	r3, [r7, #4]
   1de96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1de98:	687b      	ldr	r3, [r7, #4]
   1de9a:	68d9      	ldr	r1, [r3, #12]
   1de9c:	687b      	ldr	r3, [r7, #4]
   1de9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1dea0:	683b      	ldr	r3, [r7, #0]
   1dea2:	0018      	movs	r0, r3
   1dea4:	4b02      	ldr	r3, [pc, #8]	; (1deb0 <prvCopyDataFromQueue+0x4c>)
   1dea6:	4798      	blx	r3
	}
}
   1dea8:	46c0      	nop			; (mov r8, r8)
   1deaa:	46bd      	mov	sp, r7
   1deac:	b002      	add	sp, #8
   1deae:	bd80      	pop	{r7, pc}
   1deb0:	00037935 	.word	0x00037935

0001deb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1deb4:	b580      	push	{r7, lr}
   1deb6:	b084      	sub	sp, #16
   1deb8:	af00      	add	r7, sp, #0
   1deba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1debc:	4b34      	ldr	r3, [pc, #208]	; (1df90 <prvUnlockQueue+0xdc>)
   1debe:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1dec0:	230f      	movs	r3, #15
   1dec2:	18fb      	adds	r3, r7, r3
   1dec4:	687a      	ldr	r2, [r7, #4]
   1dec6:	2145      	movs	r1, #69	; 0x45
   1dec8:	5c52      	ldrb	r2, [r2, r1]
   1deca:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1decc:	e022      	b.n	1df14 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1dece:	687b      	ldr	r3, [r7, #4]
   1ded0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ded2:	2b00      	cmp	r3, #0
   1ded4:	d009      	beq.n	1deea <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ded6:	687b      	ldr	r3, [r7, #4]
   1ded8:	2100      	movs	r1, #0
   1deda:	0018      	movs	r0, r3
   1dedc:	4b2d      	ldr	r3, [pc, #180]	; (1df94 <prvUnlockQueue+0xe0>)
   1dede:	4798      	blx	r3
   1dee0:	1e03      	subs	r3, r0, #0
   1dee2:	d00f      	beq.n	1df04 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1dee4:	4b2c      	ldr	r3, [pc, #176]	; (1df98 <prvUnlockQueue+0xe4>)
   1dee6:	4798      	blx	r3
   1dee8:	e00c      	b.n	1df04 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1deea:	687b      	ldr	r3, [r7, #4]
   1deec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1deee:	2b00      	cmp	r3, #0
   1def0:	d017      	beq.n	1df22 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1def2:	687b      	ldr	r3, [r7, #4]
   1def4:	3324      	adds	r3, #36	; 0x24
   1def6:	0018      	movs	r0, r3
   1def8:	4b28      	ldr	r3, [pc, #160]	; (1df9c <prvUnlockQueue+0xe8>)
   1defa:	4798      	blx	r3
   1defc:	1e03      	subs	r3, r0, #0
   1defe:	d001      	beq.n	1df04 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1df00:	4b25      	ldr	r3, [pc, #148]	; (1df98 <prvUnlockQueue+0xe4>)
   1df02:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1df04:	230f      	movs	r3, #15
   1df06:	18fb      	adds	r3, r7, r3
   1df08:	781b      	ldrb	r3, [r3, #0]
   1df0a:	3b01      	subs	r3, #1
   1df0c:	b2da      	uxtb	r2, r3
   1df0e:	230f      	movs	r3, #15
   1df10:	18fb      	adds	r3, r7, r3
   1df12:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1df14:	230f      	movs	r3, #15
   1df16:	18fb      	adds	r3, r7, r3
   1df18:	781b      	ldrb	r3, [r3, #0]
   1df1a:	b25b      	sxtb	r3, r3
   1df1c:	2b00      	cmp	r3, #0
   1df1e:	dcd6      	bgt.n	1dece <prvUnlockQueue+0x1a>
   1df20:	e000      	b.n	1df24 <prvUnlockQueue+0x70>
						break;
   1df22:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1df24:	687b      	ldr	r3, [r7, #4]
   1df26:	2245      	movs	r2, #69	; 0x45
   1df28:	21ff      	movs	r1, #255	; 0xff
   1df2a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1df2c:	4b1c      	ldr	r3, [pc, #112]	; (1dfa0 <prvUnlockQueue+0xec>)
   1df2e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1df30:	4b17      	ldr	r3, [pc, #92]	; (1df90 <prvUnlockQueue+0xdc>)
   1df32:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1df34:	230e      	movs	r3, #14
   1df36:	18fb      	adds	r3, r7, r3
   1df38:	687a      	ldr	r2, [r7, #4]
   1df3a:	2144      	movs	r1, #68	; 0x44
   1df3c:	5c52      	ldrb	r2, [r2, r1]
   1df3e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1df40:	e014      	b.n	1df6c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1df42:	687b      	ldr	r3, [r7, #4]
   1df44:	691b      	ldr	r3, [r3, #16]
   1df46:	2b00      	cmp	r3, #0
   1df48:	d017      	beq.n	1df7a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1df4a:	687b      	ldr	r3, [r7, #4]
   1df4c:	3310      	adds	r3, #16
   1df4e:	0018      	movs	r0, r3
   1df50:	4b12      	ldr	r3, [pc, #72]	; (1df9c <prvUnlockQueue+0xe8>)
   1df52:	4798      	blx	r3
   1df54:	1e03      	subs	r3, r0, #0
   1df56:	d001      	beq.n	1df5c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1df58:	4b0f      	ldr	r3, [pc, #60]	; (1df98 <prvUnlockQueue+0xe4>)
   1df5a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1df5c:	230e      	movs	r3, #14
   1df5e:	18fb      	adds	r3, r7, r3
   1df60:	781b      	ldrb	r3, [r3, #0]
   1df62:	3b01      	subs	r3, #1
   1df64:	b2da      	uxtb	r2, r3
   1df66:	230e      	movs	r3, #14
   1df68:	18fb      	adds	r3, r7, r3
   1df6a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1df6c:	230e      	movs	r3, #14
   1df6e:	18fb      	adds	r3, r7, r3
   1df70:	781b      	ldrb	r3, [r3, #0]
   1df72:	b25b      	sxtb	r3, r3
   1df74:	2b00      	cmp	r3, #0
   1df76:	dce4      	bgt.n	1df42 <prvUnlockQueue+0x8e>
   1df78:	e000      	b.n	1df7c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1df7a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1df7c:	687b      	ldr	r3, [r7, #4]
   1df7e:	2244      	movs	r2, #68	; 0x44
   1df80:	21ff      	movs	r1, #255	; 0xff
   1df82:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1df84:	4b06      	ldr	r3, [pc, #24]	; (1dfa0 <prvUnlockQueue+0xec>)
   1df86:	4798      	blx	r3
}
   1df88:	46c0      	nop			; (mov r8, r8)
   1df8a:	46bd      	mov	sp, r7
   1df8c:	b004      	add	sp, #16
   1df8e:	bd80      	pop	{r7, pc}
   1df90:	0001c5b9 	.word	0x0001c5b9
   1df94:	0001e089 	.word	0x0001e089
   1df98:	0001f05d 	.word	0x0001f05d
   1df9c:	0001ee49 	.word	0x0001ee49
   1dfa0:	0001c5dd 	.word	0x0001c5dd

0001dfa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1dfa4:	b580      	push	{r7, lr}
   1dfa6:	b084      	sub	sp, #16
   1dfa8:	af00      	add	r7, sp, #0
   1dfaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1dfac:	4b08      	ldr	r3, [pc, #32]	; (1dfd0 <prvIsQueueEmpty+0x2c>)
   1dfae:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1dfb0:	687b      	ldr	r3, [r7, #4]
   1dfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dfb4:	2b00      	cmp	r3, #0
   1dfb6:	d102      	bne.n	1dfbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1dfb8:	2301      	movs	r3, #1
   1dfba:	60fb      	str	r3, [r7, #12]
   1dfbc:	e001      	b.n	1dfc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1dfbe:	2300      	movs	r3, #0
   1dfc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1dfc2:	4b04      	ldr	r3, [pc, #16]	; (1dfd4 <prvIsQueueEmpty+0x30>)
   1dfc4:	4798      	blx	r3

	return xReturn;
   1dfc6:	68fb      	ldr	r3, [r7, #12]
}
   1dfc8:	0018      	movs	r0, r3
   1dfca:	46bd      	mov	sp, r7
   1dfcc:	b004      	add	sp, #16
   1dfce:	bd80      	pop	{r7, pc}
   1dfd0:	0001c5b9 	.word	0x0001c5b9
   1dfd4:	0001c5dd 	.word	0x0001c5dd

0001dfd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1dfd8:	b580      	push	{r7, lr}
   1dfda:	b084      	sub	sp, #16
   1dfdc:	af00      	add	r7, sp, #0
   1dfde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1dfe0:	4b09      	ldr	r3, [pc, #36]	; (1e008 <prvIsQueueFull+0x30>)
   1dfe2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1dfe4:	687b      	ldr	r3, [r7, #4]
   1dfe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1dfe8:	687b      	ldr	r3, [r7, #4]
   1dfea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1dfec:	429a      	cmp	r2, r3
   1dfee:	d102      	bne.n	1dff6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1dff0:	2301      	movs	r3, #1
   1dff2:	60fb      	str	r3, [r7, #12]
   1dff4:	e001      	b.n	1dffa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1dff6:	2300      	movs	r3, #0
   1dff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1dffa:	4b04      	ldr	r3, [pc, #16]	; (1e00c <prvIsQueueFull+0x34>)
   1dffc:	4798      	blx	r3

	return xReturn;
   1dffe:	68fb      	ldr	r3, [r7, #12]
}
   1e000:	0018      	movs	r0, r3
   1e002:	46bd      	mov	sp, r7
   1e004:	b004      	add	sp, #16
   1e006:	bd80      	pop	{r7, pc}
   1e008:	0001c5b9 	.word	0x0001c5b9
   1e00c:	0001c5dd 	.word	0x0001c5dd

0001e010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1e010:	b580      	push	{r7, lr}
   1e012:	b086      	sub	sp, #24
   1e014:	af00      	add	r7, sp, #0
   1e016:	60f8      	str	r0, [r7, #12]
   1e018:	60b9      	str	r1, [r7, #8]
   1e01a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e01c:	68fb      	ldr	r3, [r7, #12]
   1e01e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1e020:	4b15      	ldr	r3, [pc, #84]	; (1e078 <vQueueWaitForMessageRestricted+0x68>)
   1e022:	4798      	blx	r3
   1e024:	697b      	ldr	r3, [r7, #20]
   1e026:	2244      	movs	r2, #68	; 0x44
   1e028:	5c9b      	ldrb	r3, [r3, r2]
   1e02a:	b25b      	sxtb	r3, r3
   1e02c:	3301      	adds	r3, #1
   1e02e:	d103      	bne.n	1e038 <vQueueWaitForMessageRestricted+0x28>
   1e030:	697b      	ldr	r3, [r7, #20]
   1e032:	2244      	movs	r2, #68	; 0x44
   1e034:	2100      	movs	r1, #0
   1e036:	5499      	strb	r1, [r3, r2]
   1e038:	697b      	ldr	r3, [r7, #20]
   1e03a:	2245      	movs	r2, #69	; 0x45
   1e03c:	5c9b      	ldrb	r3, [r3, r2]
   1e03e:	b25b      	sxtb	r3, r3
   1e040:	3301      	adds	r3, #1
   1e042:	d103      	bne.n	1e04c <vQueueWaitForMessageRestricted+0x3c>
   1e044:	697b      	ldr	r3, [r7, #20]
   1e046:	2245      	movs	r2, #69	; 0x45
   1e048:	2100      	movs	r1, #0
   1e04a:	5499      	strb	r1, [r3, r2]
   1e04c:	4b0b      	ldr	r3, [pc, #44]	; (1e07c <vQueueWaitForMessageRestricted+0x6c>)
   1e04e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1e050:	697b      	ldr	r3, [r7, #20]
   1e052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e054:	2b00      	cmp	r3, #0
   1e056:	d106      	bne.n	1e066 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1e058:	697b      	ldr	r3, [r7, #20]
   1e05a:	3324      	adds	r3, #36	; 0x24
   1e05c:	687a      	ldr	r2, [r7, #4]
   1e05e:	68b9      	ldr	r1, [r7, #8]
   1e060:	0018      	movs	r0, r3
   1e062:	4b07      	ldr	r3, [pc, #28]	; (1e080 <vQueueWaitForMessageRestricted+0x70>)
   1e064:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1e066:	697b      	ldr	r3, [r7, #20]
   1e068:	0018      	movs	r0, r3
   1e06a:	4b06      	ldr	r3, [pc, #24]	; (1e084 <vQueueWaitForMessageRestricted+0x74>)
   1e06c:	4798      	blx	r3
	}
   1e06e:	46c0      	nop			; (mov r8, r8)
   1e070:	46bd      	mov	sp, r7
   1e072:	b006      	add	sp, #24
   1e074:	bd80      	pop	{r7, pc}
   1e076:	46c0      	nop			; (mov r8, r8)
   1e078:	0001c5b9 	.word	0x0001c5b9
   1e07c:	0001c5dd 	.word	0x0001c5dd
   1e080:	0001ed69 	.word	0x0001ed69
   1e084:	0001deb5 	.word	0x0001deb5

0001e088 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1e088:	b5b0      	push	{r4, r5, r7, lr}
   1e08a:	b086      	sub	sp, #24
   1e08c:	af00      	add	r7, sp, #0
   1e08e:	6078      	str	r0, [r7, #4]
   1e090:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1e092:	687b      	ldr	r3, [r7, #4]
   1e094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e096:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1e098:	2300      	movs	r3, #0
   1e09a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1e09c:	693b      	ldr	r3, [r7, #16]
   1e09e:	2b00      	cmp	r3, #0
   1e0a0:	d101      	bne.n	1e0a6 <prvNotifyQueueSetContainer+0x1e>
   1e0a2:	b672      	cpsid	i
   1e0a4:	e7fe      	b.n	1e0a4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1e0a6:	693b      	ldr	r3, [r7, #16]
   1e0a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e0aa:	693b      	ldr	r3, [r7, #16]
   1e0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e0ae:	429a      	cmp	r2, r3
   1e0b0:	d301      	bcc.n	1e0b6 <prvNotifyQueueSetContainer+0x2e>
   1e0b2:	b672      	cpsid	i
   1e0b4:	e7fe      	b.n	1e0b4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1e0b6:	693b      	ldr	r3, [r7, #16]
   1e0b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e0ba:	693b      	ldr	r3, [r7, #16]
   1e0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e0be:	429a      	cmp	r2, r3
   1e0c0:	d300      	bcc.n	1e0c4 <prvNotifyQueueSetContainer+0x3c>
   1e0c2:	e08b      	b.n	1e1dc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1e0c4:	230f      	movs	r3, #15
   1e0c6:	18fb      	adds	r3, r7, r3
   1e0c8:	693a      	ldr	r2, [r7, #16]
   1e0ca:	2145      	movs	r1, #69	; 0x45
   1e0cc:	5c52      	ldrb	r2, [r2, r1]
   1e0ce:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1e0d0:	4b45      	ldr	r3, [pc, #276]	; (1e1e8 <prvNotifyQueueSetContainer+0x160>)
   1e0d2:	4798      	blx	r3
   1e0d4:	0003      	movs	r3, r0
   1e0d6:	0018      	movs	r0, r3
   1e0d8:	4b44      	ldr	r3, [pc, #272]	; (1e1ec <prvNotifyQueueSetContainer+0x164>)
   1e0da:	4798      	blx	r3
   1e0dc:	0003      	movs	r3, r0
   1e0de:	001a      	movs	r2, r3
   1e0e0:	4b43      	ldr	r3, [pc, #268]	; (1e1f0 <prvNotifyQueueSetContainer+0x168>)
   1e0e2:	881b      	ldrh	r3, [r3, #0]
   1e0e4:	4013      	ands	r3, r2
   1e0e6:	b29b      	uxth	r3, r3
   1e0e8:	2b00      	cmp	r3, #0
   1e0ea:	d02e      	beq.n	1e14a <prvNotifyQueueSetContainer+0xc2>
   1e0ec:	693b      	ldr	r3, [r7, #16]
   1e0ee:	0018      	movs	r0, r3
   1e0f0:	4b40      	ldr	r3, [pc, #256]	; (1e1f4 <prvNotifyQueueSetContainer+0x16c>)
   1e0f2:	4798      	blx	r3
   1e0f4:	0003      	movs	r3, r0
   1e0f6:	001a      	movs	r2, r3
   1e0f8:	4b3d      	ldr	r3, [pc, #244]	; (1e1f0 <prvNotifyQueueSetContainer+0x168>)
   1e0fa:	881b      	ldrh	r3, [r3, #0]
   1e0fc:	4013      	ands	r3, r2
   1e0fe:	b29b      	uxth	r3, r3
   1e100:	2b00      	cmp	r3, #0
   1e102:	d022      	beq.n	1e14a <prvNotifyQueueSetContainer+0xc2>
   1e104:	683b      	ldr	r3, [r7, #0]
   1e106:	2b00      	cmp	r3, #0
   1e108:	d10b      	bne.n	1e122 <prvNotifyQueueSetContainer+0x9a>
   1e10a:	693b      	ldr	r3, [r7, #16]
   1e10c:	0018      	movs	r0, r3
   1e10e:	4b3a      	ldr	r3, [pc, #232]	; (1e1f8 <prvNotifyQueueSetContainer+0x170>)
   1e110:	4798      	blx	r3
   1e112:	0003      	movs	r3, r0
   1e114:	001a      	movs	r2, r3
   1e116:	4b39      	ldr	r3, [pc, #228]	; (1e1fc <prvNotifyQueueSetContainer+0x174>)
   1e118:	5c9b      	ldrb	r3, [r3, r2]
   1e11a:	3320      	adds	r3, #32
   1e11c:	b2db      	uxtb	r3, r3
   1e11e:	001d      	movs	r5, r3
   1e120:	e000      	b.n	1e124 <prvNotifyQueueSetContainer+0x9c>
   1e122:	2525      	movs	r5, #37	; 0x25
   1e124:	693b      	ldr	r3, [r7, #16]
   1e126:	0018      	movs	r0, r3
   1e128:	4b33      	ldr	r3, [pc, #204]	; (1e1f8 <prvNotifyQueueSetContainer+0x170>)
   1e12a:	4798      	blx	r3
   1e12c:	0003      	movs	r3, r0
   1e12e:	001a      	movs	r2, r3
   1e130:	4b32      	ldr	r3, [pc, #200]	; (1e1fc <prvNotifyQueueSetContainer+0x174>)
   1e132:	5c9c      	ldrb	r4, [r3, r2]
   1e134:	693b      	ldr	r3, [r7, #16]
   1e136:	0018      	movs	r0, r3
   1e138:	4b31      	ldr	r3, [pc, #196]	; (1e200 <prvNotifyQueueSetContainer+0x178>)
   1e13a:	4798      	blx	r3
   1e13c:	0003      	movs	r3, r0
   1e13e:	b2db      	uxtb	r3, r3
   1e140:	001a      	movs	r2, r3
   1e142:	0021      	movs	r1, r4
   1e144:	0028      	movs	r0, r5
   1e146:	4b2f      	ldr	r3, [pc, #188]	; (1e204 <prvNotifyQueueSetContainer+0x17c>)
   1e148:	4798      	blx	r3
   1e14a:	693b      	ldr	r3, [r7, #16]
   1e14c:	0018      	movs	r0, r3
   1e14e:	4b2a      	ldr	r3, [pc, #168]	; (1e1f8 <prvNotifyQueueSetContainer+0x170>)
   1e150:	4798      	blx	r3
   1e152:	0003      	movs	r3, r0
   1e154:	001a      	movs	r2, r3
   1e156:	4b29      	ldr	r3, [pc, #164]	; (1e1fc <prvNotifyQueueSetContainer+0x174>)
   1e158:	5c9c      	ldrb	r4, [r3, r2]
   1e15a:	693b      	ldr	r3, [r7, #16]
   1e15c:	0018      	movs	r0, r3
   1e15e:	4b28      	ldr	r3, [pc, #160]	; (1e200 <prvNotifyQueueSetContainer+0x178>)
   1e160:	4798      	blx	r3
   1e162:	0003      	movs	r3, r0
   1e164:	b2dd      	uxtb	r5, r3
   1e166:	693b      	ldr	r3, [r7, #16]
   1e168:	0018      	movs	r0, r3
   1e16a:	4b23      	ldr	r3, [pc, #140]	; (1e1f8 <prvNotifyQueueSetContainer+0x170>)
   1e16c:	4798      	blx	r3
   1e16e:	0003      	movs	r3, r0
   1e170:	001a      	movs	r2, r3
   1e172:	4b22      	ldr	r3, [pc, #136]	; (1e1fc <prvNotifyQueueSetContainer+0x174>)
   1e174:	5c9b      	ldrb	r3, [r3, r2]
   1e176:	2b02      	cmp	r3, #2
   1e178:	d005      	beq.n	1e186 <prvNotifyQueueSetContainer+0xfe>
   1e17a:	693b      	ldr	r3, [r7, #16]
   1e17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e17e:	b2db      	uxtb	r3, r3
   1e180:	3301      	adds	r3, #1
   1e182:	b2db      	uxtb	r3, r3
   1e184:	e000      	b.n	1e188 <prvNotifyQueueSetContainer+0x100>
   1e186:	2300      	movs	r3, #0
   1e188:	001a      	movs	r2, r3
   1e18a:	0029      	movs	r1, r5
   1e18c:	0020      	movs	r0, r4
   1e18e:	4b1e      	ldr	r3, [pc, #120]	; (1e208 <prvNotifyQueueSetContainer+0x180>)
   1e190:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1e192:	683a      	ldr	r2, [r7, #0]
   1e194:	1d39      	adds	r1, r7, #4
   1e196:	693b      	ldr	r3, [r7, #16]
   1e198:	0018      	movs	r0, r3
   1e19a:	4b1c      	ldr	r3, [pc, #112]	; (1e20c <prvNotifyQueueSetContainer+0x184>)
   1e19c:	4798      	blx	r3
   1e19e:	0003      	movs	r3, r0
   1e1a0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1e1a2:	230f      	movs	r3, #15
   1e1a4:	18fb      	adds	r3, r7, r3
   1e1a6:	781b      	ldrb	r3, [r3, #0]
   1e1a8:	b25b      	sxtb	r3, r3
   1e1aa:	3301      	adds	r3, #1
   1e1ac:	d10d      	bne.n	1e1ca <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1e1ae:	693b      	ldr	r3, [r7, #16]
   1e1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e1b2:	2b00      	cmp	r3, #0
   1e1b4:	d012      	beq.n	1e1dc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1e1b6:	693b      	ldr	r3, [r7, #16]
   1e1b8:	3324      	adds	r3, #36	; 0x24
   1e1ba:	0018      	movs	r0, r3
   1e1bc:	4b14      	ldr	r3, [pc, #80]	; (1e210 <prvNotifyQueueSetContainer+0x188>)
   1e1be:	4798      	blx	r3
   1e1c0:	1e03      	subs	r3, r0, #0
   1e1c2:	d00b      	beq.n	1e1dc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1e1c4:	2301      	movs	r3, #1
   1e1c6:	617b      	str	r3, [r7, #20]
   1e1c8:	e008      	b.n	1e1dc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1e1ca:	230f      	movs	r3, #15
   1e1cc:	18fb      	adds	r3, r7, r3
   1e1ce:	781b      	ldrb	r3, [r3, #0]
   1e1d0:	3301      	adds	r3, #1
   1e1d2:	b2db      	uxtb	r3, r3
   1e1d4:	b259      	sxtb	r1, r3
   1e1d6:	693b      	ldr	r3, [r7, #16]
   1e1d8:	2245      	movs	r2, #69	; 0x45
   1e1da:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1e1dc:	697b      	ldr	r3, [r7, #20]
	}
   1e1de:	0018      	movs	r0, r3
   1e1e0:	46bd      	mov	sp, r7
   1e1e2:	b006      	add	sp, #24
   1e1e4:	bdb0      	pop	{r4, r5, r7, pc}
   1e1e6:	46c0      	nop			; (mov r8, r8)
   1e1e8:	0001a84d 	.word	0x0001a84d
   1e1ec:	0001a5b1 	.word	0x0001a5b1
   1e1f0:	20000118 	.word	0x20000118
   1e1f4:	0001a671 	.word	0x0001a671
   1e1f8:	0001a571 	.word	0x0001a571
   1e1fc:	2000010c 	.word	0x2000010c
   1e200:	0001a651 	.word	0x0001a651
   1e204:	0001afa9 	.word	0x0001afa9
   1e208:	0001b605 	.word	0x0001b605
   1e20c:	0001dd85 	.word	0x0001dd85
   1e210:	0001ee49 	.word	0x0001ee49

0001e214 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1e214:	b590      	push	{r4, r7, lr}
   1e216:	b08d      	sub	sp, #52	; 0x34
   1e218:	af04      	add	r7, sp, #16
   1e21a:	60f8      	str	r0, [r7, #12]
   1e21c:	60b9      	str	r1, [r7, #8]
   1e21e:	603b      	str	r3, [r7, #0]
   1e220:	1dbb      	adds	r3, r7, #6
   1e222:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e224:	1dbb      	adds	r3, r7, #6
   1e226:	881b      	ldrh	r3, [r3, #0]
   1e228:	009b      	lsls	r3, r3, #2
   1e22a:	0018      	movs	r0, r3
   1e22c:	4b1d      	ldr	r3, [pc, #116]	; (1e2a4 <xTaskCreate+0x90>)
   1e22e:	4798      	blx	r3
   1e230:	0003      	movs	r3, r0
   1e232:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1e234:	697b      	ldr	r3, [r7, #20]
   1e236:	2b00      	cmp	r3, #0
   1e238:	d010      	beq.n	1e25c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1e23a:	2054      	movs	r0, #84	; 0x54
   1e23c:	4b19      	ldr	r3, [pc, #100]	; (1e2a4 <xTaskCreate+0x90>)
   1e23e:	4798      	blx	r3
   1e240:	0003      	movs	r3, r0
   1e242:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1e244:	69fb      	ldr	r3, [r7, #28]
   1e246:	2b00      	cmp	r3, #0
   1e248:	d003      	beq.n	1e252 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1e24a:	69fb      	ldr	r3, [r7, #28]
   1e24c:	697a      	ldr	r2, [r7, #20]
   1e24e:	631a      	str	r2, [r3, #48]	; 0x30
   1e250:	e006      	b.n	1e260 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1e252:	697b      	ldr	r3, [r7, #20]
   1e254:	0018      	movs	r0, r3
   1e256:	4b14      	ldr	r3, [pc, #80]	; (1e2a8 <xTaskCreate+0x94>)
   1e258:	4798      	blx	r3
   1e25a:	e001      	b.n	1e260 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1e25c:	2300      	movs	r3, #0
   1e25e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1e260:	69fb      	ldr	r3, [r7, #28]
   1e262:	2b00      	cmp	r3, #0
   1e264:	d016      	beq.n	1e294 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1e266:	1dbb      	adds	r3, r7, #6
   1e268:	881a      	ldrh	r2, [r3, #0]
   1e26a:	683c      	ldr	r4, [r7, #0]
   1e26c:	68b9      	ldr	r1, [r7, #8]
   1e26e:	68f8      	ldr	r0, [r7, #12]
   1e270:	2300      	movs	r3, #0
   1e272:	9303      	str	r3, [sp, #12]
   1e274:	69fb      	ldr	r3, [r7, #28]
   1e276:	9302      	str	r3, [sp, #8]
   1e278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e27a:	9301      	str	r3, [sp, #4]
   1e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e27e:	9300      	str	r3, [sp, #0]
   1e280:	0023      	movs	r3, r4
   1e282:	4c0a      	ldr	r4, [pc, #40]	; (1e2ac <xTaskCreate+0x98>)
   1e284:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1e286:	69fb      	ldr	r3, [r7, #28]
   1e288:	0018      	movs	r0, r3
   1e28a:	4b09      	ldr	r3, [pc, #36]	; (1e2b0 <xTaskCreate+0x9c>)
   1e28c:	4798      	blx	r3
			xReturn = pdPASS;
   1e28e:	2301      	movs	r3, #1
   1e290:	61bb      	str	r3, [r7, #24]
   1e292:	e002      	b.n	1e29a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1e294:	2301      	movs	r3, #1
   1e296:	425b      	negs	r3, r3
   1e298:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1e29a:	69bb      	ldr	r3, [r7, #24]
	}
   1e29c:	0018      	movs	r0, r3
   1e29e:	46bd      	mov	sp, r7
   1e2a0:	b009      	add	sp, #36	; 0x24
   1e2a2:	bd90      	pop	{r4, r7, pc}
   1e2a4:	0001c6f1 	.word	0x0001c6f1
   1e2a8:	0001c7b5 	.word	0x0001c7b5
   1e2ac:	0001e2b5 	.word	0x0001e2b5
   1e2b0:	0001e3c5 	.word	0x0001e3c5

0001e2b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1e2b4:	b580      	push	{r7, lr}
   1e2b6:	b086      	sub	sp, #24
   1e2b8:	af00      	add	r7, sp, #0
   1e2ba:	60f8      	str	r0, [r7, #12]
   1e2bc:	60b9      	str	r1, [r7, #8]
   1e2be:	607a      	str	r2, [r7, #4]
   1e2c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1e2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1e2c6:	687b      	ldr	r3, [r7, #4]
   1e2c8:	009b      	lsls	r3, r3, #2
   1e2ca:	001a      	movs	r2, r3
   1e2cc:	21a5      	movs	r1, #165	; 0xa5
   1e2ce:	4b39      	ldr	r3, [pc, #228]	; (1e3b4 <prvInitialiseNewTask+0x100>)
   1e2d0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1e2d6:	687b      	ldr	r3, [r7, #4]
   1e2d8:	4937      	ldr	r1, [pc, #220]	; (1e3b8 <prvInitialiseNewTask+0x104>)
   1e2da:	468c      	mov	ip, r1
   1e2dc:	4463      	add	r3, ip
   1e2de:	009b      	lsls	r3, r3, #2
   1e2e0:	18d3      	adds	r3, r2, r3
   1e2e2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1e2e4:	693b      	ldr	r3, [r7, #16]
   1e2e6:	2207      	movs	r2, #7
   1e2e8:	4393      	bics	r3, r2
   1e2ea:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1e2ec:	693b      	ldr	r3, [r7, #16]
   1e2ee:	2207      	movs	r2, #7
   1e2f0:	4013      	ands	r3, r2
   1e2f2:	d001      	beq.n	1e2f8 <prvInitialiseNewTask+0x44>
   1e2f4:	b672      	cpsid	i
   1e2f6:	e7fe      	b.n	1e2f6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e2f8:	2300      	movs	r3, #0
   1e2fa:	617b      	str	r3, [r7, #20]
   1e2fc:	e013      	b.n	1e326 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e2fe:	68ba      	ldr	r2, [r7, #8]
   1e300:	697b      	ldr	r3, [r7, #20]
   1e302:	18d3      	adds	r3, r2, r3
   1e304:	7818      	ldrb	r0, [r3, #0]
   1e306:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e308:	2134      	movs	r1, #52	; 0x34
   1e30a:	697b      	ldr	r3, [r7, #20]
   1e30c:	18d3      	adds	r3, r2, r3
   1e30e:	185b      	adds	r3, r3, r1
   1e310:	1c02      	adds	r2, r0, #0
   1e312:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1e314:	68ba      	ldr	r2, [r7, #8]
   1e316:	697b      	ldr	r3, [r7, #20]
   1e318:	18d3      	adds	r3, r2, r3
   1e31a:	781b      	ldrb	r3, [r3, #0]
   1e31c:	2b00      	cmp	r3, #0
   1e31e:	d006      	beq.n	1e32e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e320:	697b      	ldr	r3, [r7, #20]
   1e322:	3301      	adds	r3, #1
   1e324:	617b      	str	r3, [r7, #20]
   1e326:	697b      	ldr	r3, [r7, #20]
   1e328:	2b07      	cmp	r3, #7
   1e32a:	d9e8      	bls.n	1e2fe <prvInitialiseNewTask+0x4a>
   1e32c:	e000      	b.n	1e330 <prvInitialiseNewTask+0x7c>
		{
			break;
   1e32e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e330:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e332:	223b      	movs	r2, #59	; 0x3b
   1e334:	2100      	movs	r1, #0
   1e336:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1e338:	6a3b      	ldr	r3, [r7, #32]
   1e33a:	2b04      	cmp	r3, #4
   1e33c:	d901      	bls.n	1e342 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1e33e:	2304      	movs	r3, #4
   1e340:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e344:	6a3a      	ldr	r2, [r7, #32]
   1e346:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e34a:	6a3a      	ldr	r2, [r7, #32]
   1e34c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e350:	2200      	movs	r2, #0
   1e352:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e356:	3304      	adds	r3, #4
   1e358:	0018      	movs	r0, r3
   1e35a:	4b18      	ldr	r3, [pc, #96]	; (1e3bc <prvInitialiseNewTask+0x108>)
   1e35c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e360:	3318      	adds	r3, #24
   1e362:	0018      	movs	r0, r3
   1e364:	4b15      	ldr	r3, [pc, #84]	; (1e3bc <prvInitialiseNewTask+0x108>)
   1e366:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e36c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e36e:	6a3b      	ldr	r3, [r7, #32]
   1e370:	2205      	movs	r2, #5
   1e372:	1ad2      	subs	r2, r2, r3
   1e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e376:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1e378:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e37c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1e37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e380:	2200      	movs	r2, #0
   1e382:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e386:	2250      	movs	r2, #80	; 0x50
   1e388:	2100      	movs	r1, #0
   1e38a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e38c:	683a      	ldr	r2, [r7, #0]
   1e38e:	68f9      	ldr	r1, [r7, #12]
   1e390:	693b      	ldr	r3, [r7, #16]
   1e392:	0018      	movs	r0, r3
   1e394:	4b0a      	ldr	r3, [pc, #40]	; (1e3c0 <prvInitialiseNewTask+0x10c>)
   1e396:	4798      	blx	r3
   1e398:	0002      	movs	r2, r0
   1e39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e39c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3a0:	2b00      	cmp	r3, #0
   1e3a2:	d002      	beq.n	1e3aa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e3a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e3aa:	46c0      	nop			; (mov r8, r8)
   1e3ac:	46bd      	mov	sp, r7
   1e3ae:	b006      	add	sp, #24
   1e3b0:	bd80      	pop	{r7, pc}
   1e3b2:	46c0      	nop			; (mov r8, r8)
   1e3b4:	0003796b 	.word	0x0003796b
   1e3b8:	3fffffff 	.word	0x3fffffff
   1e3bc:	0001c365 	.word	0x0001c365
   1e3c0:	0001c47d 	.word	0x0001c47d

0001e3c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1e3c4:	b580      	push	{r7, lr}
   1e3c6:	b082      	sub	sp, #8
   1e3c8:	af00      	add	r7, sp, #0
   1e3ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1e3cc:	4b60      	ldr	r3, [pc, #384]	; (1e550 <prvAddNewTaskToReadyList+0x18c>)
   1e3ce:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1e3d0:	4b60      	ldr	r3, [pc, #384]	; (1e554 <prvAddNewTaskToReadyList+0x190>)
   1e3d2:	681b      	ldr	r3, [r3, #0]
   1e3d4:	1c5a      	adds	r2, r3, #1
   1e3d6:	4b5f      	ldr	r3, [pc, #380]	; (1e554 <prvAddNewTaskToReadyList+0x190>)
   1e3d8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1e3da:	4b5f      	ldr	r3, [pc, #380]	; (1e558 <prvAddNewTaskToReadyList+0x194>)
   1e3dc:	681b      	ldr	r3, [r3, #0]
   1e3de:	2b00      	cmp	r3, #0
   1e3e0:	d109      	bne.n	1e3f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1e3e2:	4b5d      	ldr	r3, [pc, #372]	; (1e558 <prvAddNewTaskToReadyList+0x194>)
   1e3e4:	687a      	ldr	r2, [r7, #4]
   1e3e6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1e3e8:	4b5a      	ldr	r3, [pc, #360]	; (1e554 <prvAddNewTaskToReadyList+0x190>)
   1e3ea:	681b      	ldr	r3, [r3, #0]
   1e3ec:	2b01      	cmp	r3, #1
   1e3ee:	d110      	bne.n	1e412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1e3f0:	4b5a      	ldr	r3, [pc, #360]	; (1e55c <prvAddNewTaskToReadyList+0x198>)
   1e3f2:	4798      	blx	r3
   1e3f4:	e00d      	b.n	1e412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1e3f6:	4b5a      	ldr	r3, [pc, #360]	; (1e560 <prvAddNewTaskToReadyList+0x19c>)
   1e3f8:	681b      	ldr	r3, [r3, #0]
   1e3fa:	2b00      	cmp	r3, #0
   1e3fc:	d109      	bne.n	1e412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1e3fe:	4b56      	ldr	r3, [pc, #344]	; (1e558 <prvAddNewTaskToReadyList+0x194>)
   1e400:	681b      	ldr	r3, [r3, #0]
   1e402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e404:	687b      	ldr	r3, [r7, #4]
   1e406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e408:	429a      	cmp	r2, r3
   1e40a:	d802      	bhi.n	1e412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1e40c:	4b52      	ldr	r3, [pc, #328]	; (1e558 <prvAddNewTaskToReadyList+0x194>)
   1e40e:	687a      	ldr	r2, [r7, #4]
   1e410:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1e412:	4b54      	ldr	r3, [pc, #336]	; (1e564 <prvAddNewTaskToReadyList+0x1a0>)
   1e414:	681b      	ldr	r3, [r3, #0]
   1e416:	1c5a      	adds	r2, r3, #1
   1e418:	4b52      	ldr	r3, [pc, #328]	; (1e564 <prvAddNewTaskToReadyList+0x1a0>)
   1e41a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1e41c:	4b51      	ldr	r3, [pc, #324]	; (1e564 <prvAddNewTaskToReadyList+0x1a0>)
   1e41e:	681a      	ldr	r2, [r3, #0]
   1e420:	687b      	ldr	r3, [r7, #4]
   1e422:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1e424:	687b      	ldr	r3, [r7, #4]
   1e426:	2b00      	cmp	r3, #0
   1e428:	d052      	beq.n	1e4d0 <prvAddNewTaskToReadyList+0x10c>
   1e42a:	2003      	movs	r0, #3
   1e42c:	4b4e      	ldr	r3, [pc, #312]	; (1e568 <prvAddNewTaskToReadyList+0x1a4>)
   1e42e:	4798      	blx	r3
   1e430:	0003      	movs	r3, r0
   1e432:	b29a      	uxth	r2, r3
   1e434:	687b      	ldr	r3, [r7, #4]
   1e436:	0011      	movs	r1, r2
   1e438:	0018      	movs	r0, r3
   1e43a:	4b4c      	ldr	r3, [pc, #304]	; (1e56c <prvAddNewTaskToReadyList+0x1a8>)
   1e43c:	4798      	blx	r3
   1e43e:	4b4c      	ldr	r3, [pc, #304]	; (1e570 <prvAddNewTaskToReadyList+0x1ac>)
   1e440:	881a      	ldrh	r2, [r3, #0]
   1e442:	687b      	ldr	r3, [r7, #4]
   1e444:	0011      	movs	r1, r2
   1e446:	0018      	movs	r0, r3
   1e448:	4b4a      	ldr	r3, [pc, #296]	; (1e574 <prvAddNewTaskToReadyList+0x1b0>)
   1e44a:	4798      	blx	r3
   1e44c:	687b      	ldr	r3, [r7, #4]
   1e44e:	0018      	movs	r0, r3
   1e450:	4b49      	ldr	r3, [pc, #292]	; (1e578 <prvAddNewTaskToReadyList+0x1b4>)
   1e452:	4798      	blx	r3
   1e454:	0003      	movs	r3, r0
   1e456:	b2d9      	uxtb	r1, r3
   1e458:	687b      	ldr	r3, [r7, #4]
   1e45a:	3334      	adds	r3, #52	; 0x34
   1e45c:	001a      	movs	r2, r3
   1e45e:	2003      	movs	r0, #3
   1e460:	4b46      	ldr	r3, [pc, #280]	; (1e57c <prvAddNewTaskToReadyList+0x1b8>)
   1e462:	4798      	blx	r3
   1e464:	687b      	ldr	r3, [r7, #4]
   1e466:	0018      	movs	r0, r3
   1e468:	4b43      	ldr	r3, [pc, #268]	; (1e578 <prvAddNewTaskToReadyList+0x1b4>)
   1e46a:	4798      	blx	r3
   1e46c:	0003      	movs	r3, r0
   1e46e:	b2d9      	uxtb	r1, r3
   1e470:	687b      	ldr	r3, [r7, #4]
   1e472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e474:	b2db      	uxtb	r3, r3
   1e476:	001a      	movs	r2, r3
   1e478:	2003      	movs	r0, #3
   1e47a:	4b41      	ldr	r3, [pc, #260]	; (1e580 <prvAddNewTaskToReadyList+0x1bc>)
   1e47c:	4798      	blx	r3
   1e47e:	4b41      	ldr	r3, [pc, #260]	; (1e584 <prvAddNewTaskToReadyList+0x1c0>)
   1e480:	4798      	blx	r3
   1e482:	0003      	movs	r3, r0
   1e484:	0018      	movs	r0, r3
   1e486:	4b40      	ldr	r3, [pc, #256]	; (1e588 <prvAddNewTaskToReadyList+0x1c4>)
   1e488:	4798      	blx	r3
   1e48a:	0003      	movs	r3, r0
   1e48c:	001a      	movs	r2, r3
   1e48e:	4b3f      	ldr	r3, [pc, #252]	; (1e58c <prvAddNewTaskToReadyList+0x1c8>)
   1e490:	881b      	ldrh	r3, [r3, #0]
   1e492:	4013      	ands	r3, r2
   1e494:	b29b      	uxth	r3, r3
   1e496:	2b00      	cmp	r3, #0
   1e498:	d016      	beq.n	1e4c8 <prvAddNewTaskToReadyList+0x104>
   1e49a:	687b      	ldr	r3, [r7, #4]
   1e49c:	0018      	movs	r0, r3
   1e49e:	4b3a      	ldr	r3, [pc, #232]	; (1e588 <prvAddNewTaskToReadyList+0x1c4>)
   1e4a0:	4798      	blx	r3
   1e4a2:	0003      	movs	r3, r0
   1e4a4:	001a      	movs	r2, r3
   1e4a6:	4b39      	ldr	r3, [pc, #228]	; (1e58c <prvAddNewTaskToReadyList+0x1c8>)
   1e4a8:	881b      	ldrh	r3, [r3, #0]
   1e4aa:	4013      	ands	r3, r2
   1e4ac:	b29b      	uxth	r3, r3
   1e4ae:	2b00      	cmp	r3, #0
   1e4b0:	d00a      	beq.n	1e4c8 <prvAddNewTaskToReadyList+0x104>
   1e4b2:	687b      	ldr	r3, [r7, #4]
   1e4b4:	0018      	movs	r0, r3
   1e4b6:	4b30      	ldr	r3, [pc, #192]	; (1e578 <prvAddNewTaskToReadyList+0x1b4>)
   1e4b8:	4798      	blx	r3
   1e4ba:	0003      	movs	r3, r0
   1e4bc:	b2db      	uxtb	r3, r3
   1e4be:	001a      	movs	r2, r3
   1e4c0:	2103      	movs	r1, #3
   1e4c2:	201b      	movs	r0, #27
   1e4c4:	4b32      	ldr	r3, [pc, #200]	; (1e590 <prvAddNewTaskToReadyList+0x1cc>)
   1e4c6:	4798      	blx	r3
   1e4c8:	687b      	ldr	r3, [r7, #4]
   1e4ca:	0018      	movs	r0, r3
   1e4cc:	4b31      	ldr	r3, [pc, #196]	; (1e594 <prvAddNewTaskToReadyList+0x1d0>)
   1e4ce:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1e4d0:	687b      	ldr	r3, [r7, #4]
   1e4d2:	0018      	movs	r0, r3
   1e4d4:	4b2c      	ldr	r3, [pc, #176]	; (1e588 <prvAddNewTaskToReadyList+0x1c4>)
   1e4d6:	4798      	blx	r3
   1e4d8:	0003      	movs	r3, r0
   1e4da:	001a      	movs	r2, r3
   1e4dc:	4b2b      	ldr	r3, [pc, #172]	; (1e58c <prvAddNewTaskToReadyList+0x1c8>)
   1e4de:	881b      	ldrh	r3, [r3, #0]
   1e4e0:	4013      	ands	r3, r2
   1e4e2:	b29b      	uxth	r3, r3
   1e4e4:	2b00      	cmp	r3, #0
   1e4e6:	d008      	beq.n	1e4fa <prvAddNewTaskToReadyList+0x136>
   1e4e8:	687b      	ldr	r3, [r7, #4]
   1e4ea:	0018      	movs	r0, r3
   1e4ec:	4b22      	ldr	r3, [pc, #136]	; (1e578 <prvAddNewTaskToReadyList+0x1b4>)
   1e4ee:	4798      	blx	r3
   1e4f0:	0003      	movs	r3, r0
   1e4f2:	b2db      	uxtb	r3, r3
   1e4f4:	0018      	movs	r0, r3
   1e4f6:	4b28      	ldr	r3, [pc, #160]	; (1e598 <prvAddNewTaskToReadyList+0x1d4>)
   1e4f8:	4798      	blx	r3
   1e4fa:	687b      	ldr	r3, [r7, #4]
   1e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e4fe:	4b27      	ldr	r3, [pc, #156]	; (1e59c <prvAddNewTaskToReadyList+0x1d8>)
   1e500:	681b      	ldr	r3, [r3, #0]
   1e502:	429a      	cmp	r2, r3
   1e504:	d903      	bls.n	1e50e <prvAddNewTaskToReadyList+0x14a>
   1e506:	687b      	ldr	r3, [r7, #4]
   1e508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e50a:	4b24      	ldr	r3, [pc, #144]	; (1e59c <prvAddNewTaskToReadyList+0x1d8>)
   1e50c:	601a      	str	r2, [r3, #0]
   1e50e:	687b      	ldr	r3, [r7, #4]
   1e510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e512:	0013      	movs	r3, r2
   1e514:	009b      	lsls	r3, r3, #2
   1e516:	189b      	adds	r3, r3, r2
   1e518:	009b      	lsls	r3, r3, #2
   1e51a:	4a21      	ldr	r2, [pc, #132]	; (1e5a0 <prvAddNewTaskToReadyList+0x1dc>)
   1e51c:	189a      	adds	r2, r3, r2
   1e51e:	687b      	ldr	r3, [r7, #4]
   1e520:	3304      	adds	r3, #4
   1e522:	0019      	movs	r1, r3
   1e524:	0010      	movs	r0, r2
   1e526:	4b1f      	ldr	r3, [pc, #124]	; (1e5a4 <prvAddNewTaskToReadyList+0x1e0>)
   1e528:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1e52a:	4b1f      	ldr	r3, [pc, #124]	; (1e5a8 <prvAddNewTaskToReadyList+0x1e4>)
   1e52c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1e52e:	4b0c      	ldr	r3, [pc, #48]	; (1e560 <prvAddNewTaskToReadyList+0x19c>)
   1e530:	681b      	ldr	r3, [r3, #0]
   1e532:	2b00      	cmp	r3, #0
   1e534:	d008      	beq.n	1e548 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1e536:	4b08      	ldr	r3, [pc, #32]	; (1e558 <prvAddNewTaskToReadyList+0x194>)
   1e538:	681b      	ldr	r3, [r3, #0]
   1e53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e53c:	687b      	ldr	r3, [r7, #4]
   1e53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e540:	429a      	cmp	r2, r3
   1e542:	d201      	bcs.n	1e548 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1e544:	4b19      	ldr	r3, [pc, #100]	; (1e5ac <prvAddNewTaskToReadyList+0x1e8>)
   1e546:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e548:	46c0      	nop			; (mov r8, r8)
   1e54a:	46bd      	mov	sp, r7
   1e54c:	b002      	add	sp, #8
   1e54e:	bd80      	pop	{r7, pc}
   1e550:	0001c5b9 	.word	0x0001c5b9
   1e554:	20004058 	.word	0x20004058
   1e558:	20003f80 	.word	0x20003f80
   1e55c:	0001f0e5 	.word	0x0001f0e5
   1e560:	20004064 	.word	0x20004064
   1e564:	20004074 	.word	0x20004074
   1e568:	0001bb31 	.word	0x0001bb31
   1e56c:	0001a5d5 	.word	0x0001a5d5
   1e570:	2000011a 	.word	0x2000011a
   1e574:	0001a611 	.word	0x0001a611
   1e578:	0001a591 	.word	0x0001a591
   1e57c:	0001bd61 	.word	0x0001bd61
   1e580:	0001b4c5 	.word	0x0001b4c5
   1e584:	0001a84d 	.word	0x0001a84d
   1e588:	0001a5b1 	.word	0x0001a5b1
   1e58c:	20000118 	.word	0x20000118
   1e590:	0001afa9 	.word	0x0001afa9
   1e594:	0001a711 	.word	0x0001a711
   1e598:	0001ad61 	.word	0x0001ad61
   1e59c:	20004060 	.word	0x20004060
   1e5a0:	20003f84 	.word	0x20003f84
   1e5a4:	0001c37b 	.word	0x0001c37b
   1e5a8:	0001c5dd 	.word	0x0001c5dd
   1e5ac:	0001c5a1 	.word	0x0001c5a1

0001e5b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1e5b0:	b580      	push	{r7, lr}
   1e5b2:	b084      	sub	sp, #16
   1e5b4:	af00      	add	r7, sp, #0
   1e5b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1e5b8:	2300      	movs	r3, #0
   1e5ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1e5bc:	687b      	ldr	r3, [r7, #4]
   1e5be:	2b00      	cmp	r3, #0
   1e5c0:	d045      	beq.n	1e64e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1e5c2:	4b27      	ldr	r3, [pc, #156]	; (1e660 <vTaskDelay+0xb0>)
   1e5c4:	681b      	ldr	r3, [r3, #0]
   1e5c6:	2b00      	cmp	r3, #0
   1e5c8:	d001      	beq.n	1e5ce <vTaskDelay+0x1e>
   1e5ca:	b672      	cpsid	i
   1e5cc:	e7fe      	b.n	1e5cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1e5ce:	4b25      	ldr	r3, [pc, #148]	; (1e664 <vTaskDelay+0xb4>)
   1e5d0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1e5d2:	4b25      	ldr	r3, [pc, #148]	; (1e668 <vTaskDelay+0xb8>)
   1e5d4:	681b      	ldr	r3, [r3, #0]
   1e5d6:	0018      	movs	r0, r3
   1e5d8:	4b24      	ldr	r3, [pc, #144]	; (1e66c <vTaskDelay+0xbc>)
   1e5da:	4798      	blx	r3
   1e5dc:	0003      	movs	r3, r0
   1e5de:	001a      	movs	r2, r3
   1e5e0:	4b23      	ldr	r3, [pc, #140]	; (1e670 <vTaskDelay+0xc0>)
   1e5e2:	881b      	ldrh	r3, [r3, #0]
   1e5e4:	4013      	ands	r3, r2
   1e5e6:	b29b      	uxth	r3, r3
   1e5e8:	2b00      	cmp	r3, #0
   1e5ea:	d00e      	beq.n	1e60a <vTaskDelay+0x5a>
   1e5ec:	687b      	ldr	r3, [r7, #4]
   1e5ee:	0019      	movs	r1, r3
   1e5f0:	2089      	movs	r0, #137	; 0x89
   1e5f2:	4b20      	ldr	r3, [pc, #128]	; (1e674 <vTaskDelay+0xc4>)
   1e5f4:	4798      	blx	r3
   1e5f6:	4b1c      	ldr	r3, [pc, #112]	; (1e668 <vTaskDelay+0xb8>)
   1e5f8:	681b      	ldr	r3, [r3, #0]
   1e5fa:	0018      	movs	r0, r3
   1e5fc:	4b1e      	ldr	r3, [pc, #120]	; (1e678 <vTaskDelay+0xc8>)
   1e5fe:	4798      	blx	r3
   1e600:	0003      	movs	r3, r0
   1e602:	b2db      	uxtb	r3, r3
   1e604:	0018      	movs	r0, r3
   1e606:	4b1d      	ldr	r3, [pc, #116]	; (1e67c <vTaskDelay+0xcc>)
   1e608:	4798      	blx	r3
   1e60a:	4b1d      	ldr	r3, [pc, #116]	; (1e680 <vTaskDelay+0xd0>)
   1e60c:	4798      	blx	r3
   1e60e:	0003      	movs	r3, r0
   1e610:	0018      	movs	r0, r3
   1e612:	4b16      	ldr	r3, [pc, #88]	; (1e66c <vTaskDelay+0xbc>)
   1e614:	4798      	blx	r3
   1e616:	0003      	movs	r3, r0
   1e618:	001a      	movs	r2, r3
   1e61a:	4b15      	ldr	r3, [pc, #84]	; (1e670 <vTaskDelay+0xc0>)
   1e61c:	881b      	ldrh	r3, [r3, #0]
   1e61e:	4013      	ands	r3, r2
   1e620:	b29b      	uxth	r3, r3
   1e622:	2b00      	cmp	r3, #0
   1e624:	d00a      	beq.n	1e63c <vTaskDelay+0x8c>
   1e626:	4b16      	ldr	r3, [pc, #88]	; (1e680 <vTaskDelay+0xd0>)
   1e628:	4798      	blx	r3
   1e62a:	0003      	movs	r3, r0
   1e62c:	0018      	movs	r0, r3
   1e62e:	4b12      	ldr	r3, [pc, #72]	; (1e678 <vTaskDelay+0xc8>)
   1e630:	4798      	blx	r3
   1e632:	0003      	movs	r3, r0
   1e634:	b2db      	uxtb	r3, r3
   1e636:	0018      	movs	r0, r3
   1e638:	4b10      	ldr	r3, [pc, #64]	; (1e67c <vTaskDelay+0xcc>)
   1e63a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1e63c:	687b      	ldr	r3, [r7, #4]
   1e63e:	2100      	movs	r1, #0
   1e640:	0018      	movs	r0, r3
   1e642:	4b10      	ldr	r3, [pc, #64]	; (1e684 <vTaskDelay+0xd4>)
   1e644:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1e646:	4b10      	ldr	r3, [pc, #64]	; (1e688 <vTaskDelay+0xd8>)
   1e648:	4798      	blx	r3
   1e64a:	0003      	movs	r3, r0
   1e64c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1e64e:	68fb      	ldr	r3, [r7, #12]
   1e650:	2b00      	cmp	r3, #0
   1e652:	d101      	bne.n	1e658 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1e654:	4b0d      	ldr	r3, [pc, #52]	; (1e68c <vTaskDelay+0xdc>)
   1e656:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e658:	46c0      	nop			; (mov r8, r8)
   1e65a:	46bd      	mov	sp, r7
   1e65c:	b004      	add	sp, #16
   1e65e:	bd80      	pop	{r7, pc}
   1e660:	20004080 	.word	0x20004080
   1e664:	0001e871 	.word	0x0001e871
   1e668:	20003f80 	.word	0x20003f80
   1e66c:	0001a5b1 	.word	0x0001a5b1
   1e670:	20000118 	.word	0x20000118
   1e674:	0001b2b1 	.word	0x0001b2b1
   1e678:	0001a591 	.word	0x0001a591
   1e67c:	0001b741 	.word	0x0001b741
   1e680:	0001a84d 	.word	0x0001a84d
   1e684:	0001f7c9 	.word	0x0001f7c9
   1e688:	0001e889 	.word	0x0001e889
   1e68c:	0001c5a1 	.word	0x0001c5a1

0001e690 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1e690:	b580      	push	{r7, lr}
   1e692:	b084      	sub	sp, #16
   1e694:	af00      	add	r7, sp, #0
   1e696:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1e698:	4b42      	ldr	r3, [pc, #264]	; (1e7a4 <vTaskSuspend+0x114>)
   1e69a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1e69c:	687b      	ldr	r3, [r7, #4]
   1e69e:	2b00      	cmp	r3, #0
   1e6a0:	d102      	bne.n	1e6a8 <vTaskSuspend+0x18>
   1e6a2:	4b41      	ldr	r3, [pc, #260]	; (1e7a8 <vTaskSuspend+0x118>)
   1e6a4:	681b      	ldr	r3, [r3, #0]
   1e6a6:	e000      	b.n	1e6aa <vTaskSuspend+0x1a>
   1e6a8:	687b      	ldr	r3, [r7, #4]
   1e6aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1e6ac:	4b3f      	ldr	r3, [pc, #252]	; (1e7ac <vTaskSuspend+0x11c>)
   1e6ae:	4798      	blx	r3
   1e6b0:	0003      	movs	r3, r0
   1e6b2:	0018      	movs	r0, r3
   1e6b4:	4b3e      	ldr	r3, [pc, #248]	; (1e7b0 <vTaskSuspend+0x120>)
   1e6b6:	4798      	blx	r3
   1e6b8:	0003      	movs	r3, r0
   1e6ba:	001a      	movs	r2, r3
   1e6bc:	4b3d      	ldr	r3, [pc, #244]	; (1e7b4 <vTaskSuspend+0x124>)
   1e6be:	881b      	ldrh	r3, [r3, #0]
   1e6c0:	4013      	ands	r3, r2
   1e6c2:	b29b      	uxth	r3, r3
   1e6c4:	2b00      	cmp	r3, #0
   1e6c6:	d016      	beq.n	1e6f6 <vTaskSuspend+0x66>
   1e6c8:	68fb      	ldr	r3, [r7, #12]
   1e6ca:	0018      	movs	r0, r3
   1e6cc:	4b38      	ldr	r3, [pc, #224]	; (1e7b0 <vTaskSuspend+0x120>)
   1e6ce:	4798      	blx	r3
   1e6d0:	0003      	movs	r3, r0
   1e6d2:	001a      	movs	r2, r3
   1e6d4:	4b37      	ldr	r3, [pc, #220]	; (1e7b4 <vTaskSuspend+0x124>)
   1e6d6:	881b      	ldrh	r3, [r3, #0]
   1e6d8:	4013      	ands	r3, r2
   1e6da:	b29b      	uxth	r3, r3
   1e6dc:	2b00      	cmp	r3, #0
   1e6de:	d00a      	beq.n	1e6f6 <vTaskSuspend+0x66>
   1e6e0:	68fb      	ldr	r3, [r7, #12]
   1e6e2:	0018      	movs	r0, r3
   1e6e4:	4b34      	ldr	r3, [pc, #208]	; (1e7b8 <vTaskSuspend+0x128>)
   1e6e6:	4798      	blx	r3
   1e6e8:	0003      	movs	r3, r0
   1e6ea:	b2db      	uxtb	r3, r3
   1e6ec:	001a      	movs	r2, r3
   1e6ee:	2103      	movs	r1, #3
   1e6f0:	208a      	movs	r0, #138	; 0x8a
   1e6f2:	4b32      	ldr	r3, [pc, #200]	; (1e7bc <vTaskSuspend+0x12c>)
   1e6f4:	4798      	blx	r3
   1e6f6:	68fb      	ldr	r3, [r7, #12]
   1e6f8:	0018      	movs	r0, r3
   1e6fa:	4b2f      	ldr	r3, [pc, #188]	; (1e7b8 <vTaskSuspend+0x128>)
   1e6fc:	4798      	blx	r3
   1e6fe:	0003      	movs	r3, r0
   1e700:	b2db      	uxtb	r3, r3
   1e702:	0018      	movs	r0, r3
   1e704:	4b2e      	ldr	r3, [pc, #184]	; (1e7c0 <vTaskSuspend+0x130>)
   1e706:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e708:	68fb      	ldr	r3, [r7, #12]
   1e70a:	3304      	adds	r3, #4
   1e70c:	0018      	movs	r0, r3
   1e70e:	4b2d      	ldr	r3, [pc, #180]	; (1e7c4 <vTaskSuspend+0x134>)
   1e710:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e712:	68fb      	ldr	r3, [r7, #12]
   1e714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e716:	2b00      	cmp	r3, #0
   1e718:	d004      	beq.n	1e724 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e71a:	68fb      	ldr	r3, [r7, #12]
   1e71c:	3318      	adds	r3, #24
   1e71e:	0018      	movs	r0, r3
   1e720:	4b28      	ldr	r3, [pc, #160]	; (1e7c4 <vTaskSuspend+0x134>)
   1e722:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1e724:	68fb      	ldr	r3, [r7, #12]
   1e726:	1d1a      	adds	r2, r3, #4
   1e728:	4b27      	ldr	r3, [pc, #156]	; (1e7c8 <vTaskSuspend+0x138>)
   1e72a:	0011      	movs	r1, r2
   1e72c:	0018      	movs	r0, r3
   1e72e:	4b27      	ldr	r3, [pc, #156]	; (1e7cc <vTaskSuspend+0x13c>)
   1e730:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1e732:	68fb      	ldr	r3, [r7, #12]
   1e734:	2250      	movs	r2, #80	; 0x50
   1e736:	5c9b      	ldrb	r3, [r3, r2]
   1e738:	b2db      	uxtb	r3, r3
   1e73a:	2b01      	cmp	r3, #1
   1e73c:	d103      	bne.n	1e746 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e73e:	68fb      	ldr	r3, [r7, #12]
   1e740:	2250      	movs	r2, #80	; 0x50
   1e742:	2100      	movs	r1, #0
   1e744:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1e746:	4b22      	ldr	r3, [pc, #136]	; (1e7d0 <vTaskSuspend+0x140>)
   1e748:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1e74a:	4b22      	ldr	r3, [pc, #136]	; (1e7d4 <vTaskSuspend+0x144>)
   1e74c:	681b      	ldr	r3, [r3, #0]
   1e74e:	2b00      	cmp	r3, #0
   1e750:	d005      	beq.n	1e75e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1e752:	4b14      	ldr	r3, [pc, #80]	; (1e7a4 <vTaskSuspend+0x114>)
   1e754:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1e756:	4b20      	ldr	r3, [pc, #128]	; (1e7d8 <vTaskSuspend+0x148>)
   1e758:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1e75a:	4b1d      	ldr	r3, [pc, #116]	; (1e7d0 <vTaskSuspend+0x140>)
   1e75c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1e75e:	4b12      	ldr	r3, [pc, #72]	; (1e7a8 <vTaskSuspend+0x118>)
   1e760:	681b      	ldr	r3, [r3, #0]
   1e762:	68fa      	ldr	r2, [r7, #12]
   1e764:	429a      	cmp	r2, r3
   1e766:	d118      	bne.n	1e79a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1e768:	4b1a      	ldr	r3, [pc, #104]	; (1e7d4 <vTaskSuspend+0x144>)
   1e76a:	681b      	ldr	r3, [r3, #0]
   1e76c:	2b00      	cmp	r3, #0
   1e76e:	d008      	beq.n	1e782 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1e770:	4b1a      	ldr	r3, [pc, #104]	; (1e7dc <vTaskSuspend+0x14c>)
   1e772:	681b      	ldr	r3, [r3, #0]
   1e774:	2b00      	cmp	r3, #0
   1e776:	d001      	beq.n	1e77c <vTaskSuspend+0xec>
   1e778:	b672      	cpsid	i
   1e77a:	e7fe      	b.n	1e77a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1e77c:	4b18      	ldr	r3, [pc, #96]	; (1e7e0 <vTaskSuspend+0x150>)
   1e77e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e780:	e00b      	b.n	1e79a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1e782:	4b11      	ldr	r3, [pc, #68]	; (1e7c8 <vTaskSuspend+0x138>)
   1e784:	681a      	ldr	r2, [r3, #0]
   1e786:	4b17      	ldr	r3, [pc, #92]	; (1e7e4 <vTaskSuspend+0x154>)
   1e788:	681b      	ldr	r3, [r3, #0]
   1e78a:	429a      	cmp	r2, r3
   1e78c:	d103      	bne.n	1e796 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1e78e:	4b06      	ldr	r3, [pc, #24]	; (1e7a8 <vTaskSuspend+0x118>)
   1e790:	2200      	movs	r2, #0
   1e792:	601a      	str	r2, [r3, #0]
	}
   1e794:	e001      	b.n	1e79a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1e796:	4b14      	ldr	r3, [pc, #80]	; (1e7e8 <vTaskSuspend+0x158>)
   1e798:	4798      	blx	r3
	}
   1e79a:	46c0      	nop			; (mov r8, r8)
   1e79c:	46bd      	mov	sp, r7
   1e79e:	b004      	add	sp, #16
   1e7a0:	bd80      	pop	{r7, pc}
   1e7a2:	46c0      	nop			; (mov r8, r8)
   1e7a4:	0001c5b9 	.word	0x0001c5b9
   1e7a8:	20003f80 	.word	0x20003f80
   1e7ac:	0001a84d 	.word	0x0001a84d
   1e7b0:	0001a5b1 	.word	0x0001a5b1
   1e7b4:	20000118 	.word	0x20000118
   1e7b8:	0001a591 	.word	0x0001a591
   1e7bc:	0001afa9 	.word	0x0001afa9
   1e7c0:	0001b741 	.word	0x0001b741
   1e7c4:	0001c42b 	.word	0x0001c42b
   1e7c8:	20004044 	.word	0x20004044
   1e7cc:	0001c37b 	.word	0x0001c37b
   1e7d0:	0001c5dd 	.word	0x0001c5dd
   1e7d4:	20004064 	.word	0x20004064
   1e7d8:	0001f275 	.word	0x0001f275
   1e7dc:	20004080 	.word	0x20004080
   1e7e0:	0001c5a1 	.word	0x0001c5a1
   1e7e4:	20004058 	.word	0x20004058
   1e7e8:	0001ec05 	.word	0x0001ec05

0001e7ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1e7ec:	b590      	push	{r4, r7, lr}
   1e7ee:	b085      	sub	sp, #20
   1e7f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1e7f2:	4916      	ldr	r1, [pc, #88]	; (1e84c <vTaskStartScheduler+0x60>)
   1e7f4:	4816      	ldr	r0, [pc, #88]	; (1e850 <vTaskStartScheduler+0x64>)
   1e7f6:	4b17      	ldr	r3, [pc, #92]	; (1e854 <vTaskStartScheduler+0x68>)
   1e7f8:	9301      	str	r3, [sp, #4]
   1e7fa:	2300      	movs	r3, #0
   1e7fc:	9300      	str	r3, [sp, #0]
   1e7fe:	2300      	movs	r3, #0
   1e800:	2296      	movs	r2, #150	; 0x96
   1e802:	4c15      	ldr	r4, [pc, #84]	; (1e858 <vTaskStartScheduler+0x6c>)
   1e804:	47a0      	blx	r4
   1e806:	0003      	movs	r3, r0
   1e808:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1e80a:	687b      	ldr	r3, [r7, #4]
   1e80c:	2b01      	cmp	r3, #1
   1e80e:	d103      	bne.n	1e818 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1e810:	4b12      	ldr	r3, [pc, #72]	; (1e85c <vTaskStartScheduler+0x70>)
   1e812:	4798      	blx	r3
   1e814:	0003      	movs	r3, r0
   1e816:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1e818:	687b      	ldr	r3, [r7, #4]
   1e81a:	2b01      	cmp	r3, #1
   1e81c:	d10d      	bne.n	1e83a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1e81e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1e820:	4b0f      	ldr	r3, [pc, #60]	; (1e860 <vTaskStartScheduler+0x74>)
   1e822:	2201      	movs	r2, #1
   1e824:	4252      	negs	r2, r2
   1e826:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1e828:	4b0e      	ldr	r3, [pc, #56]	; (1e864 <vTaskStartScheduler+0x78>)
   1e82a:	2201      	movs	r2, #1
   1e82c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1e82e:	4b0e      	ldr	r3, [pc, #56]	; (1e868 <vTaskStartScheduler+0x7c>)
   1e830:	2200      	movs	r2, #0
   1e832:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1e834:	4b0d      	ldr	r3, [pc, #52]	; (1e86c <vTaskStartScheduler+0x80>)
   1e836:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1e838:	e004      	b.n	1e844 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1e83a:	687b      	ldr	r3, [r7, #4]
   1e83c:	3301      	adds	r3, #1
   1e83e:	d101      	bne.n	1e844 <vTaskStartScheduler+0x58>
   1e840:	b672      	cpsid	i
   1e842:	e7fe      	b.n	1e842 <vTaskStartScheduler+0x56>
}
   1e844:	46c0      	nop			; (mov r8, r8)
   1e846:	46bd      	mov	sp, r7
   1e848:	b003      	add	sp, #12
   1e84a:	bd90      	pop	{r4, r7, pc}
   1e84c:	0003b550 	.word	0x0003b550
   1e850:	0001f0bd 	.word	0x0001f0bd
   1e854:	2000407c 	.word	0x2000407c
   1e858:	0001e215 	.word	0x0001e215
   1e85c:	0001f87d 	.word	0x0001f87d
   1e860:	20004078 	.word	0x20004078
   1e864:	20004064 	.word	0x20004064
   1e868:	2000405c 	.word	0x2000405c
   1e86c:	0001c549 	.word	0x0001c549

0001e870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1e870:	b580      	push	{r7, lr}
   1e872:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1e874:	4b03      	ldr	r3, [pc, #12]	; (1e884 <vTaskSuspendAll+0x14>)
   1e876:	681b      	ldr	r3, [r3, #0]
   1e878:	1c5a      	adds	r2, r3, #1
   1e87a:	4b02      	ldr	r3, [pc, #8]	; (1e884 <vTaskSuspendAll+0x14>)
   1e87c:	601a      	str	r2, [r3, #0]
}
   1e87e:	46c0      	nop			; (mov r8, r8)
   1e880:	46bd      	mov	sp, r7
   1e882:	bd80      	pop	{r7, pc}
   1e884:	20004080 	.word	0x20004080

0001e888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1e888:	b580      	push	{r7, lr}
   1e88a:	b084      	sub	sp, #16
   1e88c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1e88e:	2300      	movs	r3, #0
   1e890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1e892:	2300      	movs	r3, #0
   1e894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1e896:	4b45      	ldr	r3, [pc, #276]	; (1e9ac <xTaskResumeAll+0x124>)
   1e898:	681b      	ldr	r3, [r3, #0]
   1e89a:	2b00      	cmp	r3, #0
   1e89c:	d101      	bne.n	1e8a2 <xTaskResumeAll+0x1a>
   1e89e:	b672      	cpsid	i
   1e8a0:	e7fe      	b.n	1e8a0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1e8a2:	4b43      	ldr	r3, [pc, #268]	; (1e9b0 <xTaskResumeAll+0x128>)
   1e8a4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1e8a6:	4b41      	ldr	r3, [pc, #260]	; (1e9ac <xTaskResumeAll+0x124>)
   1e8a8:	681b      	ldr	r3, [r3, #0]
   1e8aa:	1e5a      	subs	r2, r3, #1
   1e8ac:	4b3f      	ldr	r3, [pc, #252]	; (1e9ac <xTaskResumeAll+0x124>)
   1e8ae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e8b0:	4b3e      	ldr	r3, [pc, #248]	; (1e9ac <xTaskResumeAll+0x124>)
   1e8b2:	681b      	ldr	r3, [r3, #0]
   1e8b4:	2b00      	cmp	r3, #0
   1e8b6:	d000      	beq.n	1e8ba <xTaskResumeAll+0x32>
   1e8b8:	e071      	b.n	1e99e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1e8ba:	4b3e      	ldr	r3, [pc, #248]	; (1e9b4 <xTaskResumeAll+0x12c>)
   1e8bc:	681b      	ldr	r3, [r3, #0]
   1e8be:	2b00      	cmp	r3, #0
   1e8c0:	d100      	bne.n	1e8c4 <xTaskResumeAll+0x3c>
   1e8c2:	e06c      	b.n	1e99e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e8c4:	e044      	b.n	1e950 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1e8c6:	4b3c      	ldr	r3, [pc, #240]	; (1e9b8 <xTaskResumeAll+0x130>)
   1e8c8:	68db      	ldr	r3, [r3, #12]
   1e8ca:	68db      	ldr	r3, [r3, #12]
   1e8cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e8ce:	68fb      	ldr	r3, [r7, #12]
   1e8d0:	3318      	adds	r3, #24
   1e8d2:	0018      	movs	r0, r3
   1e8d4:	4b39      	ldr	r3, [pc, #228]	; (1e9bc <xTaskResumeAll+0x134>)
   1e8d6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e8d8:	68fb      	ldr	r3, [r7, #12]
   1e8da:	3304      	adds	r3, #4
   1e8dc:	0018      	movs	r0, r3
   1e8de:	4b37      	ldr	r3, [pc, #220]	; (1e9bc <xTaskResumeAll+0x134>)
   1e8e0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1e8e2:	68fb      	ldr	r3, [r7, #12]
   1e8e4:	0018      	movs	r0, r3
   1e8e6:	4b36      	ldr	r3, [pc, #216]	; (1e9c0 <xTaskResumeAll+0x138>)
   1e8e8:	4798      	blx	r3
   1e8ea:	0003      	movs	r3, r0
   1e8ec:	001a      	movs	r2, r3
   1e8ee:	4b35      	ldr	r3, [pc, #212]	; (1e9c4 <xTaskResumeAll+0x13c>)
   1e8f0:	881b      	ldrh	r3, [r3, #0]
   1e8f2:	4013      	ands	r3, r2
   1e8f4:	b29b      	uxth	r3, r3
   1e8f6:	2b00      	cmp	r3, #0
   1e8f8:	d008      	beq.n	1e90c <xTaskResumeAll+0x84>
   1e8fa:	68fb      	ldr	r3, [r7, #12]
   1e8fc:	0018      	movs	r0, r3
   1e8fe:	4b32      	ldr	r3, [pc, #200]	; (1e9c8 <xTaskResumeAll+0x140>)
   1e900:	4798      	blx	r3
   1e902:	0003      	movs	r3, r0
   1e904:	b2db      	uxtb	r3, r3
   1e906:	0018      	movs	r0, r3
   1e908:	4b30      	ldr	r3, [pc, #192]	; (1e9cc <xTaskResumeAll+0x144>)
   1e90a:	4798      	blx	r3
   1e90c:	68fb      	ldr	r3, [r7, #12]
   1e90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e910:	4b2f      	ldr	r3, [pc, #188]	; (1e9d0 <xTaskResumeAll+0x148>)
   1e912:	681b      	ldr	r3, [r3, #0]
   1e914:	429a      	cmp	r2, r3
   1e916:	d903      	bls.n	1e920 <xTaskResumeAll+0x98>
   1e918:	68fb      	ldr	r3, [r7, #12]
   1e91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e91c:	4b2c      	ldr	r3, [pc, #176]	; (1e9d0 <xTaskResumeAll+0x148>)
   1e91e:	601a      	str	r2, [r3, #0]
   1e920:	68fb      	ldr	r3, [r7, #12]
   1e922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e924:	0013      	movs	r3, r2
   1e926:	009b      	lsls	r3, r3, #2
   1e928:	189b      	adds	r3, r3, r2
   1e92a:	009b      	lsls	r3, r3, #2
   1e92c:	4a29      	ldr	r2, [pc, #164]	; (1e9d4 <xTaskResumeAll+0x14c>)
   1e92e:	189a      	adds	r2, r3, r2
   1e930:	68fb      	ldr	r3, [r7, #12]
   1e932:	3304      	adds	r3, #4
   1e934:	0019      	movs	r1, r3
   1e936:	0010      	movs	r0, r2
   1e938:	4b27      	ldr	r3, [pc, #156]	; (1e9d8 <xTaskResumeAll+0x150>)
   1e93a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e93c:	68fb      	ldr	r3, [r7, #12]
   1e93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e940:	4b26      	ldr	r3, [pc, #152]	; (1e9dc <xTaskResumeAll+0x154>)
   1e942:	681b      	ldr	r3, [r3, #0]
   1e944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e946:	429a      	cmp	r2, r3
   1e948:	d302      	bcc.n	1e950 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1e94a:	4b25      	ldr	r3, [pc, #148]	; (1e9e0 <xTaskResumeAll+0x158>)
   1e94c:	2201      	movs	r2, #1
   1e94e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e950:	4b19      	ldr	r3, [pc, #100]	; (1e9b8 <xTaskResumeAll+0x130>)
   1e952:	681b      	ldr	r3, [r3, #0]
   1e954:	2b00      	cmp	r3, #0
   1e956:	d1b6      	bne.n	1e8c6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1e958:	68fb      	ldr	r3, [r7, #12]
   1e95a:	2b00      	cmp	r3, #0
   1e95c:	d001      	beq.n	1e962 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1e95e:	4b21      	ldr	r3, [pc, #132]	; (1e9e4 <xTaskResumeAll+0x15c>)
   1e960:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1e962:	4b21      	ldr	r3, [pc, #132]	; (1e9e8 <xTaskResumeAll+0x160>)
   1e964:	681b      	ldr	r3, [r3, #0]
   1e966:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1e968:	687b      	ldr	r3, [r7, #4]
   1e96a:	2b00      	cmp	r3, #0
   1e96c:	d00f      	beq.n	1e98e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1e96e:	4b1f      	ldr	r3, [pc, #124]	; (1e9ec <xTaskResumeAll+0x164>)
   1e970:	4798      	blx	r3
   1e972:	1e03      	subs	r3, r0, #0
   1e974:	d002      	beq.n	1e97c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1e976:	4b1a      	ldr	r3, [pc, #104]	; (1e9e0 <xTaskResumeAll+0x158>)
   1e978:	2201      	movs	r2, #1
   1e97a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1e97c:	687b      	ldr	r3, [r7, #4]
   1e97e:	3b01      	subs	r3, #1
   1e980:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1e982:	687b      	ldr	r3, [r7, #4]
   1e984:	2b00      	cmp	r3, #0
   1e986:	d1f2      	bne.n	1e96e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1e988:	4b17      	ldr	r3, [pc, #92]	; (1e9e8 <xTaskResumeAll+0x160>)
   1e98a:	2200      	movs	r2, #0
   1e98c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1e98e:	4b14      	ldr	r3, [pc, #80]	; (1e9e0 <xTaskResumeAll+0x158>)
   1e990:	681b      	ldr	r3, [r3, #0]
   1e992:	2b00      	cmp	r3, #0
   1e994:	d003      	beq.n	1e99e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1e996:	2301      	movs	r3, #1
   1e998:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1e99a:	4b15      	ldr	r3, [pc, #84]	; (1e9f0 <xTaskResumeAll+0x168>)
   1e99c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e99e:	4b15      	ldr	r3, [pc, #84]	; (1e9f4 <xTaskResumeAll+0x16c>)
   1e9a0:	4798      	blx	r3

	return xAlreadyYielded;
   1e9a2:	68bb      	ldr	r3, [r7, #8]
}
   1e9a4:	0018      	movs	r0, r3
   1e9a6:	46bd      	mov	sp, r7
   1e9a8:	b004      	add	sp, #16
   1e9aa:	bd80      	pop	{r7, pc}
   1e9ac:	20004080 	.word	0x20004080
   1e9b0:	0001c5b9 	.word	0x0001c5b9
   1e9b4:	20004058 	.word	0x20004058
   1e9b8:	20004018 	.word	0x20004018
   1e9bc:	0001c42b 	.word	0x0001c42b
   1e9c0:	0001a5b1 	.word	0x0001a5b1
   1e9c4:	20000118 	.word	0x20000118
   1e9c8:	0001a591 	.word	0x0001a591
   1e9cc:	0001ad61 	.word	0x0001ad61
   1e9d0:	20004060 	.word	0x20004060
   1e9d4:	20003f84 	.word	0x20003f84
   1e9d8:	0001c37b 	.word	0x0001c37b
   1e9dc:	20003f80 	.word	0x20003f80
   1e9e0:	2000406c 	.word	0x2000406c
   1e9e4:	0001f275 	.word	0x0001f275
   1e9e8:	20004068 	.word	0x20004068
   1e9ec:	0001ea15 	.word	0x0001ea15
   1e9f0:	0001c5a1 	.word	0x0001c5a1
   1e9f4:	0001c5dd 	.word	0x0001c5dd

0001e9f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1e9f8:	b580      	push	{r7, lr}
   1e9fa:	b082      	sub	sp, #8
   1e9fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1e9fe:	4b04      	ldr	r3, [pc, #16]	; (1ea10 <xTaskGetTickCount+0x18>)
   1ea00:	681b      	ldr	r3, [r3, #0]
   1ea02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1ea04:	687b      	ldr	r3, [r7, #4]
}
   1ea06:	0018      	movs	r0, r3
   1ea08:	46bd      	mov	sp, r7
   1ea0a:	b002      	add	sp, #8
   1ea0c:	bd80      	pop	{r7, pc}
   1ea0e:	46c0      	nop			; (mov r8, r8)
   1ea10:	2000405c 	.word	0x2000405c

0001ea14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1ea14:	b580      	push	{r7, lr}
   1ea16:	b086      	sub	sp, #24
   1ea18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1ea1a:	2300      	movs	r3, #0
   1ea1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1ea1e:	4b64      	ldr	r3, [pc, #400]	; (1ebb0 <xTaskIncrementTick+0x19c>)
   1ea20:	681b      	ldr	r3, [r3, #0]
   1ea22:	2b01      	cmp	r3, #1
   1ea24:	d003      	beq.n	1ea2e <xTaskIncrementTick+0x1a>
   1ea26:	4b63      	ldr	r3, [pc, #396]	; (1ebb4 <xTaskIncrementTick+0x1a0>)
   1ea28:	681b      	ldr	r3, [r3, #0]
   1ea2a:	2b00      	cmp	r3, #0
   1ea2c:	d107      	bne.n	1ea3e <xTaskIncrementTick+0x2a>
   1ea2e:	4b62      	ldr	r3, [pc, #392]	; (1ebb8 <xTaskIncrementTick+0x1a4>)
   1ea30:	681b      	ldr	r3, [r3, #0]
   1ea32:	1c5a      	adds	r2, r3, #1
   1ea34:	4b60      	ldr	r3, [pc, #384]	; (1ebb8 <xTaskIncrementTick+0x1a4>)
   1ea36:	601a      	str	r2, [r3, #0]
   1ea38:	2000      	movs	r0, #0
   1ea3a:	4b60      	ldr	r3, [pc, #384]	; (1ebbc <xTaskIncrementTick+0x1a8>)
   1ea3c:	4798      	blx	r3
   1ea3e:	4b5c      	ldr	r3, [pc, #368]	; (1ebb0 <xTaskIncrementTick+0x19c>)
   1ea40:	681b      	ldr	r3, [r3, #0]
   1ea42:	2b00      	cmp	r3, #0
   1ea44:	d106      	bne.n	1ea54 <xTaskIncrementTick+0x40>
   1ea46:	4b5e      	ldr	r3, [pc, #376]	; (1ebc0 <xTaskIncrementTick+0x1ac>)
   1ea48:	681b      	ldr	r3, [r3, #0]
   1ea4a:	3301      	adds	r3, #1
   1ea4c:	0019      	movs	r1, r3
   1ea4e:	2003      	movs	r0, #3
   1ea50:	4b5c      	ldr	r3, [pc, #368]	; (1ebc4 <xTaskIncrementTick+0x1b0>)
   1ea52:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ea54:	4b56      	ldr	r3, [pc, #344]	; (1ebb0 <xTaskIncrementTick+0x19c>)
   1ea56:	681b      	ldr	r3, [r3, #0]
   1ea58:	2b00      	cmp	r3, #0
   1ea5a:	d000      	beq.n	1ea5e <xTaskIncrementTick+0x4a>
   1ea5c:	e098      	b.n	1eb90 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1ea5e:	4b58      	ldr	r3, [pc, #352]	; (1ebc0 <xTaskIncrementTick+0x1ac>)
   1ea60:	681b      	ldr	r3, [r3, #0]
   1ea62:	3301      	adds	r3, #1
   1ea64:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1ea66:	4b56      	ldr	r3, [pc, #344]	; (1ebc0 <xTaskIncrementTick+0x1ac>)
   1ea68:	693a      	ldr	r2, [r7, #16]
   1ea6a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1ea6c:	693b      	ldr	r3, [r7, #16]
   1ea6e:	2b00      	cmp	r3, #0
   1ea70:	d117      	bne.n	1eaa2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1ea72:	4b55      	ldr	r3, [pc, #340]	; (1ebc8 <xTaskIncrementTick+0x1b4>)
   1ea74:	681b      	ldr	r3, [r3, #0]
   1ea76:	681b      	ldr	r3, [r3, #0]
   1ea78:	2b00      	cmp	r3, #0
   1ea7a:	d001      	beq.n	1ea80 <xTaskIncrementTick+0x6c>
   1ea7c:	b672      	cpsid	i
   1ea7e:	e7fe      	b.n	1ea7e <xTaskIncrementTick+0x6a>
   1ea80:	4b51      	ldr	r3, [pc, #324]	; (1ebc8 <xTaskIncrementTick+0x1b4>)
   1ea82:	681b      	ldr	r3, [r3, #0]
   1ea84:	60fb      	str	r3, [r7, #12]
   1ea86:	4b51      	ldr	r3, [pc, #324]	; (1ebcc <xTaskIncrementTick+0x1b8>)
   1ea88:	681a      	ldr	r2, [r3, #0]
   1ea8a:	4b4f      	ldr	r3, [pc, #316]	; (1ebc8 <xTaskIncrementTick+0x1b4>)
   1ea8c:	601a      	str	r2, [r3, #0]
   1ea8e:	4b4f      	ldr	r3, [pc, #316]	; (1ebcc <xTaskIncrementTick+0x1b8>)
   1ea90:	68fa      	ldr	r2, [r7, #12]
   1ea92:	601a      	str	r2, [r3, #0]
   1ea94:	4b4e      	ldr	r3, [pc, #312]	; (1ebd0 <xTaskIncrementTick+0x1bc>)
   1ea96:	681b      	ldr	r3, [r3, #0]
   1ea98:	1c5a      	adds	r2, r3, #1
   1ea9a:	4b4d      	ldr	r3, [pc, #308]	; (1ebd0 <xTaskIncrementTick+0x1bc>)
   1ea9c:	601a      	str	r2, [r3, #0]
   1ea9e:	4b4d      	ldr	r3, [pc, #308]	; (1ebd4 <xTaskIncrementTick+0x1c0>)
   1eaa0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1eaa2:	4b4d      	ldr	r3, [pc, #308]	; (1ebd8 <xTaskIncrementTick+0x1c4>)
   1eaa4:	681b      	ldr	r3, [r3, #0]
   1eaa6:	693a      	ldr	r2, [r7, #16]
   1eaa8:	429a      	cmp	r2, r3
   1eaaa:	d363      	bcc.n	1eb74 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1eaac:	4b46      	ldr	r3, [pc, #280]	; (1ebc8 <xTaskIncrementTick+0x1b4>)
   1eaae:	681b      	ldr	r3, [r3, #0]
   1eab0:	681b      	ldr	r3, [r3, #0]
   1eab2:	2b00      	cmp	r3, #0
   1eab4:	d101      	bne.n	1eaba <xTaskIncrementTick+0xa6>
   1eab6:	2301      	movs	r3, #1
   1eab8:	e000      	b.n	1eabc <xTaskIncrementTick+0xa8>
   1eaba:	2300      	movs	r3, #0
   1eabc:	2b00      	cmp	r3, #0
   1eabe:	d004      	beq.n	1eaca <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1eac0:	4b45      	ldr	r3, [pc, #276]	; (1ebd8 <xTaskIncrementTick+0x1c4>)
   1eac2:	2201      	movs	r2, #1
   1eac4:	4252      	negs	r2, r2
   1eac6:	601a      	str	r2, [r3, #0]
					break;
   1eac8:	e054      	b.n	1eb74 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1eaca:	4b3f      	ldr	r3, [pc, #252]	; (1ebc8 <xTaskIncrementTick+0x1b4>)
   1eacc:	681b      	ldr	r3, [r3, #0]
   1eace:	68db      	ldr	r3, [r3, #12]
   1ead0:	68db      	ldr	r3, [r3, #12]
   1ead2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1ead4:	68bb      	ldr	r3, [r7, #8]
   1ead6:	685b      	ldr	r3, [r3, #4]
   1ead8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1eada:	693a      	ldr	r2, [r7, #16]
   1eadc:	687b      	ldr	r3, [r7, #4]
   1eade:	429a      	cmp	r2, r3
   1eae0:	d203      	bcs.n	1eaea <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1eae2:	4b3d      	ldr	r3, [pc, #244]	; (1ebd8 <xTaskIncrementTick+0x1c4>)
   1eae4:	687a      	ldr	r2, [r7, #4]
   1eae6:	601a      	str	r2, [r3, #0]
						break;
   1eae8:	e044      	b.n	1eb74 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1eaea:	68bb      	ldr	r3, [r7, #8]
   1eaec:	3304      	adds	r3, #4
   1eaee:	0018      	movs	r0, r3
   1eaf0:	4b3a      	ldr	r3, [pc, #232]	; (1ebdc <xTaskIncrementTick+0x1c8>)
   1eaf2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1eaf4:	68bb      	ldr	r3, [r7, #8]
   1eaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1eaf8:	2b00      	cmp	r3, #0
   1eafa:	d004      	beq.n	1eb06 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1eafc:	68bb      	ldr	r3, [r7, #8]
   1eafe:	3318      	adds	r3, #24
   1eb00:	0018      	movs	r0, r3
   1eb02:	4b36      	ldr	r3, [pc, #216]	; (1ebdc <xTaskIncrementTick+0x1c8>)
   1eb04:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1eb06:	68bb      	ldr	r3, [r7, #8]
   1eb08:	0018      	movs	r0, r3
   1eb0a:	4b35      	ldr	r3, [pc, #212]	; (1ebe0 <xTaskIncrementTick+0x1cc>)
   1eb0c:	4798      	blx	r3
   1eb0e:	0003      	movs	r3, r0
   1eb10:	001a      	movs	r2, r3
   1eb12:	4b34      	ldr	r3, [pc, #208]	; (1ebe4 <xTaskIncrementTick+0x1d0>)
   1eb14:	881b      	ldrh	r3, [r3, #0]
   1eb16:	4013      	ands	r3, r2
   1eb18:	b29b      	uxth	r3, r3
   1eb1a:	2b00      	cmp	r3, #0
   1eb1c:	d008      	beq.n	1eb30 <xTaskIncrementTick+0x11c>
   1eb1e:	68bb      	ldr	r3, [r7, #8]
   1eb20:	0018      	movs	r0, r3
   1eb22:	4b31      	ldr	r3, [pc, #196]	; (1ebe8 <xTaskIncrementTick+0x1d4>)
   1eb24:	4798      	blx	r3
   1eb26:	0003      	movs	r3, r0
   1eb28:	b2db      	uxtb	r3, r3
   1eb2a:	0018      	movs	r0, r3
   1eb2c:	4b2f      	ldr	r3, [pc, #188]	; (1ebec <xTaskIncrementTick+0x1d8>)
   1eb2e:	4798      	blx	r3
   1eb30:	68bb      	ldr	r3, [r7, #8]
   1eb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb34:	4b2e      	ldr	r3, [pc, #184]	; (1ebf0 <xTaskIncrementTick+0x1dc>)
   1eb36:	681b      	ldr	r3, [r3, #0]
   1eb38:	429a      	cmp	r2, r3
   1eb3a:	d903      	bls.n	1eb44 <xTaskIncrementTick+0x130>
   1eb3c:	68bb      	ldr	r3, [r7, #8]
   1eb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb40:	4b2b      	ldr	r3, [pc, #172]	; (1ebf0 <xTaskIncrementTick+0x1dc>)
   1eb42:	601a      	str	r2, [r3, #0]
   1eb44:	68bb      	ldr	r3, [r7, #8]
   1eb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb48:	0013      	movs	r3, r2
   1eb4a:	009b      	lsls	r3, r3, #2
   1eb4c:	189b      	adds	r3, r3, r2
   1eb4e:	009b      	lsls	r3, r3, #2
   1eb50:	4a28      	ldr	r2, [pc, #160]	; (1ebf4 <xTaskIncrementTick+0x1e0>)
   1eb52:	189a      	adds	r2, r3, r2
   1eb54:	68bb      	ldr	r3, [r7, #8]
   1eb56:	3304      	adds	r3, #4
   1eb58:	0019      	movs	r1, r3
   1eb5a:	0010      	movs	r0, r2
   1eb5c:	4b26      	ldr	r3, [pc, #152]	; (1ebf8 <xTaskIncrementTick+0x1e4>)
   1eb5e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1eb60:	68bb      	ldr	r3, [r7, #8]
   1eb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb64:	4b25      	ldr	r3, [pc, #148]	; (1ebfc <xTaskIncrementTick+0x1e8>)
   1eb66:	681b      	ldr	r3, [r3, #0]
   1eb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eb6a:	429a      	cmp	r2, r3
   1eb6c:	d39e      	bcc.n	1eaac <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1eb6e:	2301      	movs	r3, #1
   1eb70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1eb72:	e79b      	b.n	1eaac <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1eb74:	4b21      	ldr	r3, [pc, #132]	; (1ebfc <xTaskIncrementTick+0x1e8>)
   1eb76:	681b      	ldr	r3, [r3, #0]
   1eb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb7a:	491e      	ldr	r1, [pc, #120]	; (1ebf4 <xTaskIncrementTick+0x1e0>)
   1eb7c:	0013      	movs	r3, r2
   1eb7e:	009b      	lsls	r3, r3, #2
   1eb80:	189b      	adds	r3, r3, r2
   1eb82:	009b      	lsls	r3, r3, #2
   1eb84:	585b      	ldr	r3, [r3, r1]
   1eb86:	2b01      	cmp	r3, #1
   1eb88:	d907      	bls.n	1eb9a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1eb8a:	2301      	movs	r3, #1
   1eb8c:	617b      	str	r3, [r7, #20]
   1eb8e:	e004      	b.n	1eb9a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1eb90:	4b08      	ldr	r3, [pc, #32]	; (1ebb4 <xTaskIncrementTick+0x1a0>)
   1eb92:	681b      	ldr	r3, [r3, #0]
   1eb94:	1c5a      	adds	r2, r3, #1
   1eb96:	4b07      	ldr	r3, [pc, #28]	; (1ebb4 <xTaskIncrementTick+0x1a0>)
   1eb98:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1eb9a:	4b19      	ldr	r3, [pc, #100]	; (1ec00 <xTaskIncrementTick+0x1ec>)
   1eb9c:	681b      	ldr	r3, [r3, #0]
   1eb9e:	2b00      	cmp	r3, #0
   1eba0:	d001      	beq.n	1eba6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1eba2:	2301      	movs	r3, #1
   1eba4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1eba6:	697b      	ldr	r3, [r7, #20]
}
   1eba8:	0018      	movs	r0, r3
   1ebaa:	46bd      	mov	sp, r7
   1ebac:	b006      	add	sp, #24
   1ebae:	bd80      	pop	{r7, pc}
   1ebb0:	20004080 	.word	0x20004080
   1ebb4:	20004068 	.word	0x20004068
   1ebb8:	20000be0 	.word	0x20000be0
   1ebbc:	0001c245 	.word	0x0001c245
   1ebc0:	2000405c 	.word	0x2000405c
   1ebc4:	0001b2b1 	.word	0x0001b2b1
   1ebc8:	20004010 	.word	0x20004010
   1ebcc:	20004014 	.word	0x20004014
   1ebd0:	20004070 	.word	0x20004070
   1ebd4:	0001f275 	.word	0x0001f275
   1ebd8:	20004078 	.word	0x20004078
   1ebdc:	0001c42b 	.word	0x0001c42b
   1ebe0:	0001a5b1 	.word	0x0001a5b1
   1ebe4:	20000118 	.word	0x20000118
   1ebe8:	0001a591 	.word	0x0001a591
   1ebec:	0001ad61 	.word	0x0001ad61
   1ebf0:	20004060 	.word	0x20004060
   1ebf4:	20003f84 	.word	0x20003f84
   1ebf8:	0001c37b 	.word	0x0001c37b
   1ebfc:	20003f80 	.word	0x20003f80
   1ec00:	2000406c 	.word	0x2000406c

0001ec04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1ec04:	b580      	push	{r7, lr}
   1ec06:	b082      	sub	sp, #8
   1ec08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1ec0a:	4b3a      	ldr	r3, [pc, #232]	; (1ecf4 <vTaskSwitchContext+0xf0>)
   1ec0c:	681b      	ldr	r3, [r3, #0]
   1ec0e:	2b00      	cmp	r3, #0
   1ec10:	d003      	beq.n	1ec1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1ec12:	4b39      	ldr	r3, [pc, #228]	; (1ecf8 <vTaskSwitchContext+0xf4>)
   1ec14:	2201      	movs	r2, #1
   1ec16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1ec18:	e067      	b.n	1ecea <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1ec1a:	4b37      	ldr	r3, [pc, #220]	; (1ecf8 <vTaskSwitchContext+0xf4>)
   1ec1c:	2200      	movs	r2, #0
   1ec1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1ec20:	4b36      	ldr	r3, [pc, #216]	; (1ecfc <vTaskSwitchContext+0xf8>)
   1ec22:	681b      	ldr	r3, [r3, #0]
   1ec24:	681a      	ldr	r2, [r3, #0]
   1ec26:	4b35      	ldr	r3, [pc, #212]	; (1ecfc <vTaskSwitchContext+0xf8>)
   1ec28:	681b      	ldr	r3, [r3, #0]
   1ec2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ec2c:	429a      	cmp	r2, r3
   1ec2e:	d808      	bhi.n	1ec42 <vTaskSwitchContext+0x3e>
   1ec30:	4b32      	ldr	r3, [pc, #200]	; (1ecfc <vTaskSwitchContext+0xf8>)
   1ec32:	681a      	ldr	r2, [r3, #0]
   1ec34:	4b31      	ldr	r3, [pc, #196]	; (1ecfc <vTaskSwitchContext+0xf8>)
   1ec36:	681b      	ldr	r3, [r3, #0]
   1ec38:	3334      	adds	r3, #52	; 0x34
   1ec3a:	0019      	movs	r1, r3
   1ec3c:	0010      	movs	r0, r2
   1ec3e:	4b30      	ldr	r3, [pc, #192]	; (1ed00 <vTaskSwitchContext+0xfc>)
   1ec40:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1ec42:	4b30      	ldr	r3, [pc, #192]	; (1ed04 <vTaskSwitchContext+0x100>)
   1ec44:	681b      	ldr	r3, [r3, #0]
   1ec46:	607b      	str	r3, [r7, #4]
   1ec48:	e007      	b.n	1ec5a <vTaskSwitchContext+0x56>
   1ec4a:	687b      	ldr	r3, [r7, #4]
   1ec4c:	2b00      	cmp	r3, #0
   1ec4e:	d101      	bne.n	1ec54 <vTaskSwitchContext+0x50>
   1ec50:	b672      	cpsid	i
   1ec52:	e7fe      	b.n	1ec52 <vTaskSwitchContext+0x4e>
   1ec54:	687b      	ldr	r3, [r7, #4]
   1ec56:	3b01      	subs	r3, #1
   1ec58:	607b      	str	r3, [r7, #4]
   1ec5a:	492b      	ldr	r1, [pc, #172]	; (1ed08 <vTaskSwitchContext+0x104>)
   1ec5c:	687a      	ldr	r2, [r7, #4]
   1ec5e:	0013      	movs	r3, r2
   1ec60:	009b      	lsls	r3, r3, #2
   1ec62:	189b      	adds	r3, r3, r2
   1ec64:	009b      	lsls	r3, r3, #2
   1ec66:	585b      	ldr	r3, [r3, r1]
   1ec68:	2b00      	cmp	r3, #0
   1ec6a:	d0ee      	beq.n	1ec4a <vTaskSwitchContext+0x46>
   1ec6c:	687a      	ldr	r2, [r7, #4]
   1ec6e:	0013      	movs	r3, r2
   1ec70:	009b      	lsls	r3, r3, #2
   1ec72:	189b      	adds	r3, r3, r2
   1ec74:	009b      	lsls	r3, r3, #2
   1ec76:	4a24      	ldr	r2, [pc, #144]	; (1ed08 <vTaskSwitchContext+0x104>)
   1ec78:	189b      	adds	r3, r3, r2
   1ec7a:	603b      	str	r3, [r7, #0]
   1ec7c:	683b      	ldr	r3, [r7, #0]
   1ec7e:	685b      	ldr	r3, [r3, #4]
   1ec80:	685a      	ldr	r2, [r3, #4]
   1ec82:	683b      	ldr	r3, [r7, #0]
   1ec84:	605a      	str	r2, [r3, #4]
   1ec86:	683b      	ldr	r3, [r7, #0]
   1ec88:	685a      	ldr	r2, [r3, #4]
   1ec8a:	683b      	ldr	r3, [r7, #0]
   1ec8c:	3308      	adds	r3, #8
   1ec8e:	429a      	cmp	r2, r3
   1ec90:	d104      	bne.n	1ec9c <vTaskSwitchContext+0x98>
   1ec92:	683b      	ldr	r3, [r7, #0]
   1ec94:	685b      	ldr	r3, [r3, #4]
   1ec96:	685a      	ldr	r2, [r3, #4]
   1ec98:	683b      	ldr	r3, [r7, #0]
   1ec9a:	605a      	str	r2, [r3, #4]
   1ec9c:	683b      	ldr	r3, [r7, #0]
   1ec9e:	685b      	ldr	r3, [r3, #4]
   1eca0:	68da      	ldr	r2, [r3, #12]
   1eca2:	4b16      	ldr	r3, [pc, #88]	; (1ecfc <vTaskSwitchContext+0xf8>)
   1eca4:	601a      	str	r2, [r3, #0]
   1eca6:	4b17      	ldr	r3, [pc, #92]	; (1ed04 <vTaskSwitchContext+0x100>)
   1eca8:	687a      	ldr	r2, [r7, #4]
   1ecaa:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1ecac:	4b17      	ldr	r3, [pc, #92]	; (1ed0c <vTaskSwitchContext+0x108>)
   1ecae:	2201      	movs	r2, #1
   1ecb0:	601a      	str	r2, [r3, #0]
   1ecb2:	4b17      	ldr	r3, [pc, #92]	; (1ed10 <vTaskSwitchContext+0x10c>)
   1ecb4:	4798      	blx	r3
   1ecb6:	0003      	movs	r3, r0
   1ecb8:	0018      	movs	r0, r3
   1ecba:	4b16      	ldr	r3, [pc, #88]	; (1ed14 <vTaskSwitchContext+0x110>)
   1ecbc:	4798      	blx	r3
   1ecbe:	0003      	movs	r3, r0
   1ecc0:	001a      	movs	r2, r3
   1ecc2:	4b15      	ldr	r3, [pc, #84]	; (1ed18 <vTaskSwitchContext+0x114>)
   1ecc4:	881b      	ldrh	r3, [r3, #0]
   1ecc6:	4013      	ands	r3, r2
   1ecc8:	b29b      	uxth	r3, r3
   1ecca:	2b00      	cmp	r3, #0
   1eccc:	d00a      	beq.n	1ece4 <vTaskSwitchContext+0xe0>
   1ecce:	4b10      	ldr	r3, [pc, #64]	; (1ed10 <vTaskSwitchContext+0x10c>)
   1ecd0:	4798      	blx	r3
   1ecd2:	0003      	movs	r3, r0
   1ecd4:	0018      	movs	r0, r3
   1ecd6:	4b11      	ldr	r3, [pc, #68]	; (1ed1c <vTaskSwitchContext+0x118>)
   1ecd8:	4798      	blx	r3
   1ecda:	0003      	movs	r3, r0
   1ecdc:	b2db      	uxtb	r3, r3
   1ecde:	0018      	movs	r0, r3
   1ece0:	4b0f      	ldr	r3, [pc, #60]	; (1ed20 <vTaskSwitchContext+0x11c>)
   1ece2:	4798      	blx	r3
   1ece4:	4b09      	ldr	r3, [pc, #36]	; (1ed0c <vTaskSwitchContext+0x108>)
   1ece6:	2202      	movs	r2, #2
   1ece8:	601a      	str	r2, [r3, #0]
}
   1ecea:	46c0      	nop			; (mov r8, r8)
   1ecec:	46bd      	mov	sp, r7
   1ecee:	b002      	add	sp, #8
   1ecf0:	bd80      	pop	{r7, pc}
   1ecf2:	46c0      	nop			; (mov r8, r8)
   1ecf4:	20004080 	.word	0x20004080
   1ecf8:	2000406c 	.word	0x2000406c
   1ecfc:	20003f80 	.word	0x20003f80
   1ed00:	00034e1d 	.word	0x00034e1d
   1ed04:	20004060 	.word	0x20004060
   1ed08:	20003f84 	.word	0x20003f84
   1ed0c:	20000bec 	.word	0x20000bec
   1ed10:	0001a84d 	.word	0x0001a84d
   1ed14:	0001a5b1 	.word	0x0001a5b1
   1ed18:	20000118 	.word	0x20000118
   1ed1c:	0001a591 	.word	0x0001a591
   1ed20:	0001b3ad 	.word	0x0001b3ad

0001ed24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1ed24:	b580      	push	{r7, lr}
   1ed26:	b082      	sub	sp, #8
   1ed28:	af00      	add	r7, sp, #0
   1ed2a:	6078      	str	r0, [r7, #4]
   1ed2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1ed2e:	687b      	ldr	r3, [r7, #4]
   1ed30:	2b00      	cmp	r3, #0
   1ed32:	d101      	bne.n	1ed38 <vTaskPlaceOnEventList+0x14>
   1ed34:	b672      	cpsid	i
   1ed36:	e7fe      	b.n	1ed36 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ed38:	4b08      	ldr	r3, [pc, #32]	; (1ed5c <vTaskPlaceOnEventList+0x38>)
   1ed3a:	681b      	ldr	r3, [r3, #0]
   1ed3c:	3318      	adds	r3, #24
   1ed3e:	001a      	movs	r2, r3
   1ed40:	687b      	ldr	r3, [r7, #4]
   1ed42:	0011      	movs	r1, r2
   1ed44:	0018      	movs	r0, r3
   1ed46:	4b06      	ldr	r3, [pc, #24]	; (1ed60 <vTaskPlaceOnEventList+0x3c>)
   1ed48:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1ed4a:	683b      	ldr	r3, [r7, #0]
   1ed4c:	2101      	movs	r1, #1
   1ed4e:	0018      	movs	r0, r3
   1ed50:	4b04      	ldr	r3, [pc, #16]	; (1ed64 <vTaskPlaceOnEventList+0x40>)
   1ed52:	4798      	blx	r3
}
   1ed54:	46c0      	nop			; (mov r8, r8)
   1ed56:	46bd      	mov	sp, r7
   1ed58:	b002      	add	sp, #8
   1ed5a:	bd80      	pop	{r7, pc}
   1ed5c:	20003f80 	.word	0x20003f80
   1ed60:	0001c3bf 	.word	0x0001c3bf
   1ed64:	0001f7c9 	.word	0x0001f7c9

0001ed68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ed68:	b580      	push	{r7, lr}
   1ed6a:	b084      	sub	sp, #16
   1ed6c:	af00      	add	r7, sp, #0
   1ed6e:	60f8      	str	r0, [r7, #12]
   1ed70:	60b9      	str	r1, [r7, #8]
   1ed72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1ed74:	68fb      	ldr	r3, [r7, #12]
   1ed76:	2b00      	cmp	r3, #0
   1ed78:	d101      	bne.n	1ed7e <vTaskPlaceOnEventListRestricted+0x16>
   1ed7a:	b672      	cpsid	i
   1ed7c:	e7fe      	b.n	1ed7c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ed7e:	4b28      	ldr	r3, [pc, #160]	; (1ee20 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ed80:	681b      	ldr	r3, [r3, #0]
   1ed82:	3318      	adds	r3, #24
   1ed84:	001a      	movs	r2, r3
   1ed86:	68fb      	ldr	r3, [r7, #12]
   1ed88:	0011      	movs	r1, r2
   1ed8a:	0018      	movs	r0, r3
   1ed8c:	4b25      	ldr	r3, [pc, #148]	; (1ee24 <vTaskPlaceOnEventListRestricted+0xbc>)
   1ed8e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1ed90:	687b      	ldr	r3, [r7, #4]
   1ed92:	2b00      	cmp	r3, #0
   1ed94:	d002      	beq.n	1ed9c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1ed96:	2301      	movs	r3, #1
   1ed98:	425b      	negs	r3, r3
   1ed9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1ed9c:	4b20      	ldr	r3, [pc, #128]	; (1ee20 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ed9e:	681b      	ldr	r3, [r3, #0]
   1eda0:	0018      	movs	r0, r3
   1eda2:	4b21      	ldr	r3, [pc, #132]	; (1ee28 <vTaskPlaceOnEventListRestricted+0xc0>)
   1eda4:	4798      	blx	r3
   1eda6:	0003      	movs	r3, r0
   1eda8:	001a      	movs	r2, r3
   1edaa:	4b20      	ldr	r3, [pc, #128]	; (1ee2c <vTaskPlaceOnEventListRestricted+0xc4>)
   1edac:	881b      	ldrh	r3, [r3, #0]
   1edae:	4013      	ands	r3, r2
   1edb0:	b29b      	uxth	r3, r3
   1edb2:	2b00      	cmp	r3, #0
   1edb4:	d011      	beq.n	1edda <vTaskPlaceOnEventListRestricted+0x72>
   1edb6:	4b1e      	ldr	r3, [pc, #120]	; (1ee30 <vTaskPlaceOnEventListRestricted+0xc8>)
   1edb8:	681a      	ldr	r2, [r3, #0]
   1edba:	68bb      	ldr	r3, [r7, #8]
   1edbc:	18d3      	adds	r3, r2, r3
   1edbe:	0019      	movs	r1, r3
   1edc0:	2088      	movs	r0, #136	; 0x88
   1edc2:	4b1c      	ldr	r3, [pc, #112]	; (1ee34 <vTaskPlaceOnEventListRestricted+0xcc>)
   1edc4:	4798      	blx	r3
   1edc6:	4b16      	ldr	r3, [pc, #88]	; (1ee20 <vTaskPlaceOnEventListRestricted+0xb8>)
   1edc8:	681b      	ldr	r3, [r3, #0]
   1edca:	0018      	movs	r0, r3
   1edcc:	4b1a      	ldr	r3, [pc, #104]	; (1ee38 <vTaskPlaceOnEventListRestricted+0xd0>)
   1edce:	4798      	blx	r3
   1edd0:	0003      	movs	r3, r0
   1edd2:	b2db      	uxtb	r3, r3
   1edd4:	0018      	movs	r0, r3
   1edd6:	4b19      	ldr	r3, [pc, #100]	; (1ee3c <vTaskPlaceOnEventListRestricted+0xd4>)
   1edd8:	4798      	blx	r3
   1edda:	4b19      	ldr	r3, [pc, #100]	; (1ee40 <vTaskPlaceOnEventListRestricted+0xd8>)
   1eddc:	4798      	blx	r3
   1edde:	0003      	movs	r3, r0
   1ede0:	0018      	movs	r0, r3
   1ede2:	4b11      	ldr	r3, [pc, #68]	; (1ee28 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ede4:	4798      	blx	r3
   1ede6:	0003      	movs	r3, r0
   1ede8:	001a      	movs	r2, r3
   1edea:	4b10      	ldr	r3, [pc, #64]	; (1ee2c <vTaskPlaceOnEventListRestricted+0xc4>)
   1edec:	881b      	ldrh	r3, [r3, #0]
   1edee:	4013      	ands	r3, r2
   1edf0:	b29b      	uxth	r3, r3
   1edf2:	2b00      	cmp	r3, #0
   1edf4:	d00a      	beq.n	1ee0c <vTaskPlaceOnEventListRestricted+0xa4>
   1edf6:	4b12      	ldr	r3, [pc, #72]	; (1ee40 <vTaskPlaceOnEventListRestricted+0xd8>)
   1edf8:	4798      	blx	r3
   1edfa:	0003      	movs	r3, r0
   1edfc:	0018      	movs	r0, r3
   1edfe:	4b0e      	ldr	r3, [pc, #56]	; (1ee38 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ee00:	4798      	blx	r3
   1ee02:	0003      	movs	r3, r0
   1ee04:	b2db      	uxtb	r3, r3
   1ee06:	0018      	movs	r0, r3
   1ee08:	4b0c      	ldr	r3, [pc, #48]	; (1ee3c <vTaskPlaceOnEventListRestricted+0xd4>)
   1ee0a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ee0c:	687a      	ldr	r2, [r7, #4]
   1ee0e:	68bb      	ldr	r3, [r7, #8]
   1ee10:	0011      	movs	r1, r2
   1ee12:	0018      	movs	r0, r3
   1ee14:	4b0b      	ldr	r3, [pc, #44]	; (1ee44 <vTaskPlaceOnEventListRestricted+0xdc>)
   1ee16:	4798      	blx	r3
	}
   1ee18:	46c0      	nop			; (mov r8, r8)
   1ee1a:	46bd      	mov	sp, r7
   1ee1c:	b004      	add	sp, #16
   1ee1e:	bd80      	pop	{r7, pc}
   1ee20:	20003f80 	.word	0x20003f80
   1ee24:	0001c37b 	.word	0x0001c37b
   1ee28:	0001a5b1 	.word	0x0001a5b1
   1ee2c:	20000118 	.word	0x20000118
   1ee30:	2000405c 	.word	0x2000405c
   1ee34:	0001b2b1 	.word	0x0001b2b1
   1ee38:	0001a591 	.word	0x0001a591
   1ee3c:	0001b741 	.word	0x0001b741
   1ee40:	0001a84d 	.word	0x0001a84d
   1ee44:	0001f7c9 	.word	0x0001f7c9

0001ee48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ee48:	b580      	push	{r7, lr}
   1ee4a:	b084      	sub	sp, #16
   1ee4c:	af00      	add	r7, sp, #0
   1ee4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1ee50:	687b      	ldr	r3, [r7, #4]
   1ee52:	68db      	ldr	r3, [r3, #12]
   1ee54:	68db      	ldr	r3, [r3, #12]
   1ee56:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ee58:	68bb      	ldr	r3, [r7, #8]
   1ee5a:	2b00      	cmp	r3, #0
   1ee5c:	d101      	bne.n	1ee62 <xTaskRemoveFromEventList+0x1a>
   1ee5e:	b672      	cpsid	i
   1ee60:	e7fe      	b.n	1ee60 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ee62:	68bb      	ldr	r3, [r7, #8]
   1ee64:	3318      	adds	r3, #24
   1ee66:	0018      	movs	r0, r3
   1ee68:	4b2a      	ldr	r3, [pc, #168]	; (1ef14 <xTaskRemoveFromEventList+0xcc>)
   1ee6a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ee6c:	4b2a      	ldr	r3, [pc, #168]	; (1ef18 <xTaskRemoveFromEventList+0xd0>)
   1ee6e:	681b      	ldr	r3, [r3, #0]
   1ee70:	2b00      	cmp	r3, #0
   1ee72:	d132      	bne.n	1eeda <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ee74:	68bb      	ldr	r3, [r7, #8]
   1ee76:	3304      	adds	r3, #4
   1ee78:	0018      	movs	r0, r3
   1ee7a:	4b26      	ldr	r3, [pc, #152]	; (1ef14 <xTaskRemoveFromEventList+0xcc>)
   1ee7c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ee7e:	68bb      	ldr	r3, [r7, #8]
   1ee80:	0018      	movs	r0, r3
   1ee82:	4b26      	ldr	r3, [pc, #152]	; (1ef1c <xTaskRemoveFromEventList+0xd4>)
   1ee84:	4798      	blx	r3
   1ee86:	0003      	movs	r3, r0
   1ee88:	001a      	movs	r2, r3
   1ee8a:	4b25      	ldr	r3, [pc, #148]	; (1ef20 <xTaskRemoveFromEventList+0xd8>)
   1ee8c:	881b      	ldrh	r3, [r3, #0]
   1ee8e:	4013      	ands	r3, r2
   1ee90:	b29b      	uxth	r3, r3
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	d008      	beq.n	1eea8 <xTaskRemoveFromEventList+0x60>
   1ee96:	68bb      	ldr	r3, [r7, #8]
   1ee98:	0018      	movs	r0, r3
   1ee9a:	4b22      	ldr	r3, [pc, #136]	; (1ef24 <xTaskRemoveFromEventList+0xdc>)
   1ee9c:	4798      	blx	r3
   1ee9e:	0003      	movs	r3, r0
   1eea0:	b2db      	uxtb	r3, r3
   1eea2:	0018      	movs	r0, r3
   1eea4:	4b20      	ldr	r3, [pc, #128]	; (1ef28 <xTaskRemoveFromEventList+0xe0>)
   1eea6:	4798      	blx	r3
   1eea8:	68bb      	ldr	r3, [r7, #8]
   1eeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eeac:	4b1f      	ldr	r3, [pc, #124]	; (1ef2c <xTaskRemoveFromEventList+0xe4>)
   1eeae:	681b      	ldr	r3, [r3, #0]
   1eeb0:	429a      	cmp	r2, r3
   1eeb2:	d903      	bls.n	1eebc <xTaskRemoveFromEventList+0x74>
   1eeb4:	68bb      	ldr	r3, [r7, #8]
   1eeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eeb8:	4b1c      	ldr	r3, [pc, #112]	; (1ef2c <xTaskRemoveFromEventList+0xe4>)
   1eeba:	601a      	str	r2, [r3, #0]
   1eebc:	68bb      	ldr	r3, [r7, #8]
   1eebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eec0:	0013      	movs	r3, r2
   1eec2:	009b      	lsls	r3, r3, #2
   1eec4:	189b      	adds	r3, r3, r2
   1eec6:	009b      	lsls	r3, r3, #2
   1eec8:	4a19      	ldr	r2, [pc, #100]	; (1ef30 <xTaskRemoveFromEventList+0xe8>)
   1eeca:	189a      	adds	r2, r3, r2
   1eecc:	68bb      	ldr	r3, [r7, #8]
   1eece:	3304      	adds	r3, #4
   1eed0:	0019      	movs	r1, r3
   1eed2:	0010      	movs	r0, r2
   1eed4:	4b17      	ldr	r3, [pc, #92]	; (1ef34 <xTaskRemoveFromEventList+0xec>)
   1eed6:	4798      	blx	r3
   1eed8:	e007      	b.n	1eeea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1eeda:	68bb      	ldr	r3, [r7, #8]
   1eedc:	3318      	adds	r3, #24
   1eede:	001a      	movs	r2, r3
   1eee0:	4b15      	ldr	r3, [pc, #84]	; (1ef38 <xTaskRemoveFromEventList+0xf0>)
   1eee2:	0011      	movs	r1, r2
   1eee4:	0018      	movs	r0, r3
   1eee6:	4b13      	ldr	r3, [pc, #76]	; (1ef34 <xTaskRemoveFromEventList+0xec>)
   1eee8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1eeea:	68bb      	ldr	r3, [r7, #8]
   1eeec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eeee:	4b13      	ldr	r3, [pc, #76]	; (1ef3c <xTaskRemoveFromEventList+0xf4>)
   1eef0:	681b      	ldr	r3, [r3, #0]
   1eef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eef4:	429a      	cmp	r2, r3
   1eef6:	d905      	bls.n	1ef04 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1eef8:	2301      	movs	r3, #1
   1eefa:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1eefc:	4b10      	ldr	r3, [pc, #64]	; (1ef40 <xTaskRemoveFromEventList+0xf8>)
   1eefe:	2201      	movs	r2, #1
   1ef00:	601a      	str	r2, [r3, #0]
   1ef02:	e001      	b.n	1ef08 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1ef04:	2300      	movs	r3, #0
   1ef06:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1ef08:	68fb      	ldr	r3, [r7, #12]
}
   1ef0a:	0018      	movs	r0, r3
   1ef0c:	46bd      	mov	sp, r7
   1ef0e:	b004      	add	sp, #16
   1ef10:	bd80      	pop	{r7, pc}
   1ef12:	46c0      	nop			; (mov r8, r8)
   1ef14:	0001c42b 	.word	0x0001c42b
   1ef18:	20004080 	.word	0x20004080
   1ef1c:	0001a5b1 	.word	0x0001a5b1
   1ef20:	20000118 	.word	0x20000118
   1ef24:	0001a591 	.word	0x0001a591
   1ef28:	0001ad61 	.word	0x0001ad61
   1ef2c:	20004060 	.word	0x20004060
   1ef30:	20003f84 	.word	0x20003f84
   1ef34:	0001c37b 	.word	0x0001c37b
   1ef38:	20004018 	.word	0x20004018
   1ef3c:	20003f80 	.word	0x20003f80
   1ef40:	2000406c 	.word	0x2000406c

0001ef44 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ef44:	b580      	push	{r7, lr}
   1ef46:	b082      	sub	sp, #8
   1ef48:	af00      	add	r7, sp, #0
   1ef4a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1ef4c:	687b      	ldr	r3, [r7, #4]
   1ef4e:	2b00      	cmp	r3, #0
   1ef50:	d101      	bne.n	1ef56 <vTaskSetTimeOutState+0x12>
   1ef52:	b672      	cpsid	i
   1ef54:	e7fe      	b.n	1ef54 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1ef56:	4b08      	ldr	r3, [pc, #32]	; (1ef78 <vTaskSetTimeOutState+0x34>)
   1ef58:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ef5a:	4b08      	ldr	r3, [pc, #32]	; (1ef7c <vTaskSetTimeOutState+0x38>)
   1ef5c:	681a      	ldr	r2, [r3, #0]
   1ef5e:	687b      	ldr	r3, [r7, #4]
   1ef60:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1ef62:	4b07      	ldr	r3, [pc, #28]	; (1ef80 <vTaskSetTimeOutState+0x3c>)
   1ef64:	681a      	ldr	r2, [r3, #0]
   1ef66:	687b      	ldr	r3, [r7, #4]
   1ef68:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1ef6a:	4b06      	ldr	r3, [pc, #24]	; (1ef84 <vTaskSetTimeOutState+0x40>)
   1ef6c:	4798      	blx	r3
}
   1ef6e:	46c0      	nop			; (mov r8, r8)
   1ef70:	46bd      	mov	sp, r7
   1ef72:	b002      	add	sp, #8
   1ef74:	bd80      	pop	{r7, pc}
   1ef76:	46c0      	nop			; (mov r8, r8)
   1ef78:	0001c5b9 	.word	0x0001c5b9
   1ef7c:	20004070 	.word	0x20004070
   1ef80:	2000405c 	.word	0x2000405c
   1ef84:	0001c5dd 	.word	0x0001c5dd

0001ef88 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ef88:	b580      	push	{r7, lr}
   1ef8a:	b082      	sub	sp, #8
   1ef8c:	af00      	add	r7, sp, #0
   1ef8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ef90:	4b05      	ldr	r3, [pc, #20]	; (1efa8 <vTaskInternalSetTimeOutState+0x20>)
   1ef92:	681a      	ldr	r2, [r3, #0]
   1ef94:	687b      	ldr	r3, [r7, #4]
   1ef96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1ef98:	4b04      	ldr	r3, [pc, #16]	; (1efac <vTaskInternalSetTimeOutState+0x24>)
   1ef9a:	681a      	ldr	r2, [r3, #0]
   1ef9c:	687b      	ldr	r3, [r7, #4]
   1ef9e:	605a      	str	r2, [r3, #4]
}
   1efa0:	46c0      	nop			; (mov r8, r8)
   1efa2:	46bd      	mov	sp, r7
   1efa4:	b002      	add	sp, #8
   1efa6:	bd80      	pop	{r7, pc}
   1efa8:	20004070 	.word	0x20004070
   1efac:	2000405c 	.word	0x2000405c

0001efb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1efb0:	b580      	push	{r7, lr}
   1efb2:	b086      	sub	sp, #24
   1efb4:	af00      	add	r7, sp, #0
   1efb6:	6078      	str	r0, [r7, #4]
   1efb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1efba:	687b      	ldr	r3, [r7, #4]
   1efbc:	2b00      	cmp	r3, #0
   1efbe:	d101      	bne.n	1efc4 <xTaskCheckForTimeOut+0x14>
   1efc0:	b672      	cpsid	i
   1efc2:	e7fe      	b.n	1efc2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1efc4:	683b      	ldr	r3, [r7, #0]
   1efc6:	2b00      	cmp	r3, #0
   1efc8:	d101      	bne.n	1efce <xTaskCheckForTimeOut+0x1e>
   1efca:	b672      	cpsid	i
   1efcc:	e7fe      	b.n	1efcc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1efce:	4b1e      	ldr	r3, [pc, #120]	; (1f048 <xTaskCheckForTimeOut+0x98>)
   1efd0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1efd2:	4b1e      	ldr	r3, [pc, #120]	; (1f04c <xTaskCheckForTimeOut+0x9c>)
   1efd4:	681b      	ldr	r3, [r3, #0]
   1efd6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1efd8:	687b      	ldr	r3, [r7, #4]
   1efda:	685b      	ldr	r3, [r3, #4]
   1efdc:	693a      	ldr	r2, [r7, #16]
   1efde:	1ad3      	subs	r3, r2, r3
   1efe0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1efe2:	683b      	ldr	r3, [r7, #0]
   1efe4:	681b      	ldr	r3, [r3, #0]
   1efe6:	3301      	adds	r3, #1
   1efe8:	d102      	bne.n	1eff0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1efea:	2300      	movs	r3, #0
   1efec:	617b      	str	r3, [r7, #20]
   1efee:	e024      	b.n	1f03a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1eff0:	687b      	ldr	r3, [r7, #4]
   1eff2:	681a      	ldr	r2, [r3, #0]
   1eff4:	4b16      	ldr	r3, [pc, #88]	; (1f050 <xTaskCheckForTimeOut+0xa0>)
   1eff6:	681b      	ldr	r3, [r3, #0]
   1eff8:	429a      	cmp	r2, r3
   1effa:	d007      	beq.n	1f00c <xTaskCheckForTimeOut+0x5c>
   1effc:	687b      	ldr	r3, [r7, #4]
   1effe:	685a      	ldr	r2, [r3, #4]
   1f000:	693b      	ldr	r3, [r7, #16]
   1f002:	429a      	cmp	r2, r3
   1f004:	d802      	bhi.n	1f00c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1f006:	2301      	movs	r3, #1
   1f008:	617b      	str	r3, [r7, #20]
   1f00a:	e016      	b.n	1f03a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1f00c:	683b      	ldr	r3, [r7, #0]
   1f00e:	681a      	ldr	r2, [r3, #0]
   1f010:	68fb      	ldr	r3, [r7, #12]
   1f012:	429a      	cmp	r2, r3
   1f014:	d90c      	bls.n	1f030 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1f016:	683b      	ldr	r3, [r7, #0]
   1f018:	681a      	ldr	r2, [r3, #0]
   1f01a:	68fb      	ldr	r3, [r7, #12]
   1f01c:	1ad2      	subs	r2, r2, r3
   1f01e:	683b      	ldr	r3, [r7, #0]
   1f020:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1f022:	687b      	ldr	r3, [r7, #4]
   1f024:	0018      	movs	r0, r3
   1f026:	4b0b      	ldr	r3, [pc, #44]	; (1f054 <xTaskCheckForTimeOut+0xa4>)
   1f028:	4798      	blx	r3
			xReturn = pdFALSE;
   1f02a:	2300      	movs	r3, #0
   1f02c:	617b      	str	r3, [r7, #20]
   1f02e:	e004      	b.n	1f03a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1f030:	683b      	ldr	r3, [r7, #0]
   1f032:	2200      	movs	r2, #0
   1f034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1f036:	2301      	movs	r3, #1
   1f038:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1f03a:	4b07      	ldr	r3, [pc, #28]	; (1f058 <xTaskCheckForTimeOut+0xa8>)
   1f03c:	4798      	blx	r3

	return xReturn;
   1f03e:	697b      	ldr	r3, [r7, #20]
}
   1f040:	0018      	movs	r0, r3
   1f042:	46bd      	mov	sp, r7
   1f044:	b006      	add	sp, #24
   1f046:	bd80      	pop	{r7, pc}
   1f048:	0001c5b9 	.word	0x0001c5b9
   1f04c:	2000405c 	.word	0x2000405c
   1f050:	20004070 	.word	0x20004070
   1f054:	0001ef89 	.word	0x0001ef89
   1f058:	0001c5dd 	.word	0x0001c5dd

0001f05c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1f05c:	b580      	push	{r7, lr}
   1f05e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1f060:	4b02      	ldr	r3, [pc, #8]	; (1f06c <vTaskMissedYield+0x10>)
   1f062:	2201      	movs	r2, #1
   1f064:	601a      	str	r2, [r3, #0]
}
   1f066:	46c0      	nop			; (mov r8, r8)
   1f068:	46bd      	mov	sp, r7
   1f06a:	bd80      	pop	{r7, pc}
   1f06c:	2000406c 	.word	0x2000406c

0001f070 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1f070:	b580      	push	{r7, lr}
   1f072:	b084      	sub	sp, #16
   1f074:	af00      	add	r7, sp, #0
   1f076:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1f078:	687b      	ldr	r3, [r7, #4]
   1f07a:	2b00      	cmp	r3, #0
   1f07c:	d005      	beq.n	1f08a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1f07e:	687b      	ldr	r3, [r7, #4]
   1f080:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1f082:	68bb      	ldr	r3, [r7, #8]
   1f084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f086:	60fb      	str	r3, [r7, #12]
   1f088:	e001      	b.n	1f08e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1f08a:	2300      	movs	r3, #0
   1f08c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1f08e:	68fb      	ldr	r3, [r7, #12]
	}
   1f090:	0018      	movs	r0, r3
   1f092:	46bd      	mov	sp, r7
   1f094:	b004      	add	sp, #16
   1f096:	bd80      	pop	{r7, pc}

0001f098 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1f098:	b580      	push	{r7, lr}
   1f09a:	b084      	sub	sp, #16
   1f09c:	af00      	add	r7, sp, #0
   1f09e:	6078      	str	r0, [r7, #4]
   1f0a0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1f0a2:	687b      	ldr	r3, [r7, #4]
   1f0a4:	2b00      	cmp	r3, #0
   1f0a6:	d004      	beq.n	1f0b2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1f0a8:	687b      	ldr	r3, [r7, #4]
   1f0aa:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1f0ac:	68fb      	ldr	r3, [r7, #12]
   1f0ae:	683a      	ldr	r2, [r7, #0]
   1f0b0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1f0b2:	46c0      	nop			; (mov r8, r8)
   1f0b4:	46bd      	mov	sp, r7
   1f0b6:	b004      	add	sp, #16
   1f0b8:	bd80      	pop	{r7, pc}
	...

0001f0bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1f0bc:	b580      	push	{r7, lr}
   1f0be:	b082      	sub	sp, #8
   1f0c0:	af00      	add	r7, sp, #0
   1f0c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1f0c4:	4b04      	ldr	r3, [pc, #16]	; (1f0d8 <prvIdleTask+0x1c>)
   1f0c6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1f0c8:	4b04      	ldr	r3, [pc, #16]	; (1f0dc <prvIdleTask+0x20>)
   1f0ca:	681b      	ldr	r3, [r3, #0]
   1f0cc:	2b01      	cmp	r3, #1
   1f0ce:	d9f9      	bls.n	1f0c4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1f0d0:	4b03      	ldr	r3, [pc, #12]	; (1f0e0 <prvIdleTask+0x24>)
   1f0d2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1f0d4:	e7f6      	b.n	1f0c4 <prvIdleTask+0x8>
   1f0d6:	46c0      	nop			; (mov r8, r8)
   1f0d8:	0001f171 	.word	0x0001f171
   1f0dc:	20003f84 	.word	0x20003f84
   1f0e0:	0001c5a1 	.word	0x0001c5a1

0001f0e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1f0e4:	b580      	push	{r7, lr}
   1f0e6:	b082      	sub	sp, #8
   1f0e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f0ea:	2300      	movs	r3, #0
   1f0ec:	607b      	str	r3, [r7, #4]
   1f0ee:	e00c      	b.n	1f10a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1f0f0:	687a      	ldr	r2, [r7, #4]
   1f0f2:	0013      	movs	r3, r2
   1f0f4:	009b      	lsls	r3, r3, #2
   1f0f6:	189b      	adds	r3, r3, r2
   1f0f8:	009b      	lsls	r3, r3, #2
   1f0fa:	4a14      	ldr	r2, [pc, #80]	; (1f14c <prvInitialiseTaskLists+0x68>)
   1f0fc:	189b      	adds	r3, r3, r2
   1f0fe:	0018      	movs	r0, r3
   1f100:	4b13      	ldr	r3, [pc, #76]	; (1f150 <prvInitialiseTaskLists+0x6c>)
   1f102:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f104:	687b      	ldr	r3, [r7, #4]
   1f106:	3301      	adds	r3, #1
   1f108:	607b      	str	r3, [r7, #4]
   1f10a:	687b      	ldr	r3, [r7, #4]
   1f10c:	2b04      	cmp	r3, #4
   1f10e:	d9ef      	bls.n	1f0f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1f110:	4b10      	ldr	r3, [pc, #64]	; (1f154 <prvInitialiseTaskLists+0x70>)
   1f112:	0018      	movs	r0, r3
   1f114:	4b0e      	ldr	r3, [pc, #56]	; (1f150 <prvInitialiseTaskLists+0x6c>)
   1f116:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1f118:	4b0f      	ldr	r3, [pc, #60]	; (1f158 <prvInitialiseTaskLists+0x74>)
   1f11a:	0018      	movs	r0, r3
   1f11c:	4b0c      	ldr	r3, [pc, #48]	; (1f150 <prvInitialiseTaskLists+0x6c>)
   1f11e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1f120:	4b0e      	ldr	r3, [pc, #56]	; (1f15c <prvInitialiseTaskLists+0x78>)
   1f122:	0018      	movs	r0, r3
   1f124:	4b0a      	ldr	r3, [pc, #40]	; (1f150 <prvInitialiseTaskLists+0x6c>)
   1f126:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1f128:	4b0d      	ldr	r3, [pc, #52]	; (1f160 <prvInitialiseTaskLists+0x7c>)
   1f12a:	0018      	movs	r0, r3
   1f12c:	4b08      	ldr	r3, [pc, #32]	; (1f150 <prvInitialiseTaskLists+0x6c>)
   1f12e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1f130:	4b0c      	ldr	r3, [pc, #48]	; (1f164 <prvInitialiseTaskLists+0x80>)
   1f132:	0018      	movs	r0, r3
   1f134:	4b06      	ldr	r3, [pc, #24]	; (1f150 <prvInitialiseTaskLists+0x6c>)
   1f136:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1f138:	4b0b      	ldr	r3, [pc, #44]	; (1f168 <prvInitialiseTaskLists+0x84>)
   1f13a:	4a06      	ldr	r2, [pc, #24]	; (1f154 <prvInitialiseTaskLists+0x70>)
   1f13c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1f13e:	4b0b      	ldr	r3, [pc, #44]	; (1f16c <prvInitialiseTaskLists+0x88>)
   1f140:	4a05      	ldr	r2, [pc, #20]	; (1f158 <prvInitialiseTaskLists+0x74>)
   1f142:	601a      	str	r2, [r3, #0]
}
   1f144:	46c0      	nop			; (mov r8, r8)
   1f146:	46bd      	mov	sp, r7
   1f148:	b002      	add	sp, #8
   1f14a:	bd80      	pop	{r7, pc}
   1f14c:	20003f84 	.word	0x20003f84
   1f150:	0001c329 	.word	0x0001c329
   1f154:	20003fe8 	.word	0x20003fe8
   1f158:	20003ffc 	.word	0x20003ffc
   1f15c:	20004018 	.word	0x20004018
   1f160:	2000402c 	.word	0x2000402c
   1f164:	20004044 	.word	0x20004044
   1f168:	20004010 	.word	0x20004010
   1f16c:	20004014 	.word	0x20004014

0001f170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1f170:	b580      	push	{r7, lr}
   1f172:	b082      	sub	sp, #8
   1f174:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1f176:	e01a      	b.n	1f1ae <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1f178:	4b11      	ldr	r3, [pc, #68]	; (1f1c0 <prvCheckTasksWaitingTermination+0x50>)
   1f17a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1f17c:	4b11      	ldr	r3, [pc, #68]	; (1f1c4 <prvCheckTasksWaitingTermination+0x54>)
   1f17e:	68db      	ldr	r3, [r3, #12]
   1f180:	68db      	ldr	r3, [r3, #12]
   1f182:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f184:	687b      	ldr	r3, [r7, #4]
   1f186:	3304      	adds	r3, #4
   1f188:	0018      	movs	r0, r3
   1f18a:	4b0f      	ldr	r3, [pc, #60]	; (1f1c8 <prvCheckTasksWaitingTermination+0x58>)
   1f18c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1f18e:	4b0f      	ldr	r3, [pc, #60]	; (1f1cc <prvCheckTasksWaitingTermination+0x5c>)
   1f190:	681b      	ldr	r3, [r3, #0]
   1f192:	1e5a      	subs	r2, r3, #1
   1f194:	4b0d      	ldr	r3, [pc, #52]	; (1f1cc <prvCheckTasksWaitingTermination+0x5c>)
   1f196:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1f198:	4b0d      	ldr	r3, [pc, #52]	; (1f1d0 <prvCheckTasksWaitingTermination+0x60>)
   1f19a:	681b      	ldr	r3, [r3, #0]
   1f19c:	1e5a      	subs	r2, r3, #1
   1f19e:	4b0c      	ldr	r3, [pc, #48]	; (1f1d0 <prvCheckTasksWaitingTermination+0x60>)
   1f1a0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1f1a2:	4b0c      	ldr	r3, [pc, #48]	; (1f1d4 <prvCheckTasksWaitingTermination+0x64>)
   1f1a4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1f1a6:	687b      	ldr	r3, [r7, #4]
   1f1a8:	0018      	movs	r0, r3
   1f1aa:	4b0b      	ldr	r3, [pc, #44]	; (1f1d8 <prvCheckTasksWaitingTermination+0x68>)
   1f1ac:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1f1ae:	4b08      	ldr	r3, [pc, #32]	; (1f1d0 <prvCheckTasksWaitingTermination+0x60>)
   1f1b0:	681b      	ldr	r3, [r3, #0]
   1f1b2:	2b00      	cmp	r3, #0
   1f1b4:	d1e0      	bne.n	1f178 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1f1b6:	46c0      	nop			; (mov r8, r8)
   1f1b8:	46bd      	mov	sp, r7
   1f1ba:	b002      	add	sp, #8
   1f1bc:	bd80      	pop	{r7, pc}
   1f1be:	46c0      	nop			; (mov r8, r8)
   1f1c0:	0001c5b9 	.word	0x0001c5b9
   1f1c4:	2000402c 	.word	0x2000402c
   1f1c8:	0001c42b 	.word	0x0001c42b
   1f1cc:	20004058 	.word	0x20004058
   1f1d0:	20004040 	.word	0x20004040
   1f1d4:	0001c5dd 	.word	0x0001c5dd
   1f1d8:	0001f24d 	.word	0x0001f24d

0001f1dc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1f1dc:	b580      	push	{r7, lr}
   1f1de:	b084      	sub	sp, #16
   1f1e0:	af00      	add	r7, sp, #0
   1f1e2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1f1e4:	2300      	movs	r3, #0
   1f1e6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1f1e8:	e005      	b.n	1f1f6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1f1ea:	687b      	ldr	r3, [r7, #4]
   1f1ec:	3301      	adds	r3, #1
   1f1ee:	607b      	str	r3, [r7, #4]
			ulCount++;
   1f1f0:	68fb      	ldr	r3, [r7, #12]
   1f1f2:	3301      	adds	r3, #1
   1f1f4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1f1f6:	687b      	ldr	r3, [r7, #4]
   1f1f8:	781b      	ldrb	r3, [r3, #0]
   1f1fa:	2ba5      	cmp	r3, #165	; 0xa5
   1f1fc:	d0f5      	beq.n	1f1ea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1f1fe:	68fb      	ldr	r3, [r7, #12]
   1f200:	089b      	lsrs	r3, r3, #2
   1f202:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1f204:	68fb      	ldr	r3, [r7, #12]
   1f206:	b29b      	uxth	r3, r3
	}
   1f208:	0018      	movs	r0, r3
   1f20a:	46bd      	mov	sp, r7
   1f20c:	b004      	add	sp, #16
   1f20e:	bd80      	pop	{r7, pc}

0001f210 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1f210:	b580      	push	{r7, lr}
   1f212:	b086      	sub	sp, #24
   1f214:	af00      	add	r7, sp, #0
   1f216:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1f218:	687b      	ldr	r3, [r7, #4]
   1f21a:	2b00      	cmp	r3, #0
   1f21c:	d102      	bne.n	1f224 <uxTaskGetStackHighWaterMark+0x14>
   1f21e:	4b09      	ldr	r3, [pc, #36]	; (1f244 <uxTaskGetStackHighWaterMark+0x34>)
   1f220:	681b      	ldr	r3, [r3, #0]
   1f222:	e000      	b.n	1f226 <uxTaskGetStackHighWaterMark+0x16>
   1f224:	687b      	ldr	r3, [r7, #4]
   1f226:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1f228:	697b      	ldr	r3, [r7, #20]
   1f22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f22c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1f22e:	693b      	ldr	r3, [r7, #16]
   1f230:	0018      	movs	r0, r3
   1f232:	4b05      	ldr	r3, [pc, #20]	; (1f248 <uxTaskGetStackHighWaterMark+0x38>)
   1f234:	4798      	blx	r3
   1f236:	0003      	movs	r3, r0
   1f238:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1f23a:	68fb      	ldr	r3, [r7, #12]
	}
   1f23c:	0018      	movs	r0, r3
   1f23e:	46bd      	mov	sp, r7
   1f240:	b006      	add	sp, #24
   1f242:	bd80      	pop	{r7, pc}
   1f244:	20003f80 	.word	0x20003f80
   1f248:	0001f1dd 	.word	0x0001f1dd

0001f24c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1f24c:	b580      	push	{r7, lr}
   1f24e:	b082      	sub	sp, #8
   1f250:	af00      	add	r7, sp, #0
   1f252:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1f254:	687b      	ldr	r3, [r7, #4]
   1f256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f258:	0018      	movs	r0, r3
   1f25a:	4b05      	ldr	r3, [pc, #20]	; (1f270 <prvDeleteTCB+0x24>)
   1f25c:	4798      	blx	r3
			vPortFree( pxTCB );
   1f25e:	687b      	ldr	r3, [r7, #4]
   1f260:	0018      	movs	r0, r3
   1f262:	4b03      	ldr	r3, [pc, #12]	; (1f270 <prvDeleteTCB+0x24>)
   1f264:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1f266:	46c0      	nop			; (mov r8, r8)
   1f268:	46bd      	mov	sp, r7
   1f26a:	b002      	add	sp, #8
   1f26c:	bd80      	pop	{r7, pc}
   1f26e:	46c0      	nop			; (mov r8, r8)
   1f270:	0001c7b5 	.word	0x0001c7b5

0001f274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1f274:	b580      	push	{r7, lr}
   1f276:	b082      	sub	sp, #8
   1f278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f27a:	4b0e      	ldr	r3, [pc, #56]	; (1f2b4 <prvResetNextTaskUnblockTime+0x40>)
   1f27c:	681b      	ldr	r3, [r3, #0]
   1f27e:	681b      	ldr	r3, [r3, #0]
   1f280:	2b00      	cmp	r3, #0
   1f282:	d101      	bne.n	1f288 <prvResetNextTaskUnblockTime+0x14>
   1f284:	2301      	movs	r3, #1
   1f286:	e000      	b.n	1f28a <prvResetNextTaskUnblockTime+0x16>
   1f288:	2300      	movs	r3, #0
   1f28a:	2b00      	cmp	r3, #0
   1f28c:	d004      	beq.n	1f298 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1f28e:	4b0a      	ldr	r3, [pc, #40]	; (1f2b8 <prvResetNextTaskUnblockTime+0x44>)
   1f290:	2201      	movs	r2, #1
   1f292:	4252      	negs	r2, r2
   1f294:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1f296:	e008      	b.n	1f2aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f298:	4b06      	ldr	r3, [pc, #24]	; (1f2b4 <prvResetNextTaskUnblockTime+0x40>)
   1f29a:	681b      	ldr	r3, [r3, #0]
   1f29c:	68db      	ldr	r3, [r3, #12]
   1f29e:	68db      	ldr	r3, [r3, #12]
   1f2a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1f2a2:	687b      	ldr	r3, [r7, #4]
   1f2a4:	685a      	ldr	r2, [r3, #4]
   1f2a6:	4b04      	ldr	r3, [pc, #16]	; (1f2b8 <prvResetNextTaskUnblockTime+0x44>)
   1f2a8:	601a      	str	r2, [r3, #0]
}
   1f2aa:	46c0      	nop			; (mov r8, r8)
   1f2ac:	46bd      	mov	sp, r7
   1f2ae:	b002      	add	sp, #8
   1f2b0:	bd80      	pop	{r7, pc}
   1f2b2:	46c0      	nop			; (mov r8, r8)
   1f2b4:	20004010 	.word	0x20004010
   1f2b8:	20004078 	.word	0x20004078

0001f2bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1f2bc:	b580      	push	{r7, lr}
   1f2be:	b082      	sub	sp, #8
   1f2c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1f2c2:	4b04      	ldr	r3, [pc, #16]	; (1f2d4 <xTaskGetCurrentTaskHandle+0x18>)
   1f2c4:	681b      	ldr	r3, [r3, #0]
   1f2c6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1f2c8:	687b      	ldr	r3, [r7, #4]
	}
   1f2ca:	0018      	movs	r0, r3
   1f2cc:	46bd      	mov	sp, r7
   1f2ce:	b002      	add	sp, #8
   1f2d0:	bd80      	pop	{r7, pc}
   1f2d2:	46c0      	nop			; (mov r8, r8)
   1f2d4:	20003f80 	.word	0x20003f80

0001f2d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1f2d8:	b580      	push	{r7, lr}
   1f2da:	b082      	sub	sp, #8
   1f2dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1f2de:	4b0a      	ldr	r3, [pc, #40]	; (1f308 <xTaskGetSchedulerState+0x30>)
   1f2e0:	681b      	ldr	r3, [r3, #0]
   1f2e2:	2b00      	cmp	r3, #0
   1f2e4:	d102      	bne.n	1f2ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1f2e6:	2301      	movs	r3, #1
   1f2e8:	607b      	str	r3, [r7, #4]
   1f2ea:	e008      	b.n	1f2fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f2ec:	4b07      	ldr	r3, [pc, #28]	; (1f30c <xTaskGetSchedulerState+0x34>)
   1f2ee:	681b      	ldr	r3, [r3, #0]
   1f2f0:	2b00      	cmp	r3, #0
   1f2f2:	d102      	bne.n	1f2fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1f2f4:	2302      	movs	r3, #2
   1f2f6:	607b      	str	r3, [r7, #4]
   1f2f8:	e001      	b.n	1f2fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1f2fa:	2300      	movs	r3, #0
   1f2fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1f2fe:	687b      	ldr	r3, [r7, #4]
	}
   1f300:	0018      	movs	r0, r3
   1f302:	46bd      	mov	sp, r7
   1f304:	b002      	add	sp, #8
   1f306:	bd80      	pop	{r7, pc}
   1f308:	20004064 	.word	0x20004064
   1f30c:	20004080 	.word	0x20004080

0001f310 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1f310:	b590      	push	{r4, r7, lr}
   1f312:	b085      	sub	sp, #20
   1f314:	af00      	add	r7, sp, #0
   1f316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1f318:	687b      	ldr	r3, [r7, #4]
   1f31a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f31c:	2300      	movs	r3, #0
   1f31e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1f320:	687b      	ldr	r3, [r7, #4]
   1f322:	2b00      	cmp	r3, #0
   1f324:	d100      	bne.n	1f328 <xTaskPriorityInherit+0x18>
   1f326:	e09d      	b.n	1f464 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1f328:	68bb      	ldr	r3, [r7, #8]
   1f32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f32c:	4b50      	ldr	r3, [pc, #320]	; (1f470 <xTaskPriorityInherit+0x160>)
   1f32e:	681b      	ldr	r3, [r3, #0]
   1f330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f332:	429a      	cmp	r2, r3
   1f334:	d300      	bcc.n	1f338 <xTaskPriorityInherit+0x28>
   1f336:	e08c      	b.n	1f452 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f338:	68bb      	ldr	r3, [r7, #8]
   1f33a:	699b      	ldr	r3, [r3, #24]
   1f33c:	2b00      	cmp	r3, #0
   1f33e:	db06      	blt.n	1f34e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f340:	4b4b      	ldr	r3, [pc, #300]	; (1f470 <xTaskPriorityInherit+0x160>)
   1f342:	681b      	ldr	r3, [r3, #0]
   1f344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f346:	2205      	movs	r2, #5
   1f348:	1ad2      	subs	r2, r2, r3
   1f34a:	68bb      	ldr	r3, [r7, #8]
   1f34c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1f34e:	68bb      	ldr	r3, [r7, #8]
   1f350:	6959      	ldr	r1, [r3, #20]
   1f352:	68bb      	ldr	r3, [r7, #8]
   1f354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f356:	0013      	movs	r3, r2
   1f358:	009b      	lsls	r3, r3, #2
   1f35a:	189b      	adds	r3, r3, r2
   1f35c:	009b      	lsls	r3, r3, #2
   1f35e:	4a45      	ldr	r2, [pc, #276]	; (1f474 <xTaskPriorityInherit+0x164>)
   1f360:	189b      	adds	r3, r3, r2
   1f362:	4299      	cmp	r1, r3
   1f364:	d101      	bne.n	1f36a <xTaskPriorityInherit+0x5a>
   1f366:	2301      	movs	r3, #1
   1f368:	e000      	b.n	1f36c <xTaskPriorityInherit+0x5c>
   1f36a:	2300      	movs	r3, #0
   1f36c:	2b00      	cmp	r3, #0
   1f36e:	d037      	beq.n	1f3e0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f370:	68bb      	ldr	r3, [r7, #8]
   1f372:	3304      	adds	r3, #4
   1f374:	0018      	movs	r0, r3
   1f376:	4b40      	ldr	r3, [pc, #256]	; (1f478 <xTaskPriorityInherit+0x168>)
   1f378:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f37a:	4b3d      	ldr	r3, [pc, #244]	; (1f470 <xTaskPriorityInherit+0x160>)
   1f37c:	681b      	ldr	r3, [r3, #0]
   1f37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f380:	68bb      	ldr	r3, [r7, #8]
   1f382:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1f384:	68bb      	ldr	r3, [r7, #8]
   1f386:	0018      	movs	r0, r3
   1f388:	4b3c      	ldr	r3, [pc, #240]	; (1f47c <xTaskPriorityInherit+0x16c>)
   1f38a:	4798      	blx	r3
   1f38c:	0003      	movs	r3, r0
   1f38e:	001a      	movs	r2, r3
   1f390:	4b3b      	ldr	r3, [pc, #236]	; (1f480 <xTaskPriorityInherit+0x170>)
   1f392:	881b      	ldrh	r3, [r3, #0]
   1f394:	4013      	ands	r3, r2
   1f396:	b29b      	uxth	r3, r3
   1f398:	2b00      	cmp	r3, #0
   1f39a:	d008      	beq.n	1f3ae <xTaskPriorityInherit+0x9e>
   1f39c:	68bb      	ldr	r3, [r7, #8]
   1f39e:	0018      	movs	r0, r3
   1f3a0:	4b38      	ldr	r3, [pc, #224]	; (1f484 <xTaskPriorityInherit+0x174>)
   1f3a2:	4798      	blx	r3
   1f3a4:	0003      	movs	r3, r0
   1f3a6:	b2db      	uxtb	r3, r3
   1f3a8:	0018      	movs	r0, r3
   1f3aa:	4b37      	ldr	r3, [pc, #220]	; (1f488 <xTaskPriorityInherit+0x178>)
   1f3ac:	4798      	blx	r3
   1f3ae:	68bb      	ldr	r3, [r7, #8]
   1f3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3b2:	4b36      	ldr	r3, [pc, #216]	; (1f48c <xTaskPriorityInherit+0x17c>)
   1f3b4:	681b      	ldr	r3, [r3, #0]
   1f3b6:	429a      	cmp	r2, r3
   1f3b8:	d903      	bls.n	1f3c2 <xTaskPriorityInherit+0xb2>
   1f3ba:	68bb      	ldr	r3, [r7, #8]
   1f3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3be:	4b33      	ldr	r3, [pc, #204]	; (1f48c <xTaskPriorityInherit+0x17c>)
   1f3c0:	601a      	str	r2, [r3, #0]
   1f3c2:	68bb      	ldr	r3, [r7, #8]
   1f3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3c6:	0013      	movs	r3, r2
   1f3c8:	009b      	lsls	r3, r3, #2
   1f3ca:	189b      	adds	r3, r3, r2
   1f3cc:	009b      	lsls	r3, r3, #2
   1f3ce:	4a29      	ldr	r2, [pc, #164]	; (1f474 <xTaskPriorityInherit+0x164>)
   1f3d0:	189a      	adds	r2, r3, r2
   1f3d2:	68bb      	ldr	r3, [r7, #8]
   1f3d4:	3304      	adds	r3, #4
   1f3d6:	0019      	movs	r1, r3
   1f3d8:	0010      	movs	r0, r2
   1f3da:	4b2d      	ldr	r3, [pc, #180]	; (1f490 <xTaskPriorityInherit+0x180>)
   1f3dc:	4798      	blx	r3
   1f3de:	e004      	b.n	1f3ea <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f3e0:	4b23      	ldr	r3, [pc, #140]	; (1f470 <xTaskPriorityInherit+0x160>)
   1f3e2:	681b      	ldr	r3, [r3, #0]
   1f3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3e6:	68bb      	ldr	r3, [r7, #8]
   1f3e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1f3ea:	68bb      	ldr	r3, [r7, #8]
   1f3ec:	0018      	movs	r0, r3
   1f3ee:	4b23      	ldr	r3, [pc, #140]	; (1f47c <xTaskPriorityInherit+0x16c>)
   1f3f0:	4798      	blx	r3
   1f3f2:	0003      	movs	r3, r0
   1f3f4:	001a      	movs	r2, r3
   1f3f6:	4b22      	ldr	r3, [pc, #136]	; (1f480 <xTaskPriorityInherit+0x170>)
   1f3f8:	881b      	ldrh	r3, [r3, #0]
   1f3fa:	4013      	ands	r3, r2
   1f3fc:	b29b      	uxth	r3, r3
   1f3fe:	2b00      	cmp	r3, #0
   1f400:	d024      	beq.n	1f44c <xTaskPriorityInherit+0x13c>
   1f402:	68bb      	ldr	r3, [r7, #8]
   1f404:	0018      	movs	r0, r3
   1f406:	4b1f      	ldr	r3, [pc, #124]	; (1f484 <xTaskPriorityInherit+0x174>)
   1f408:	4798      	blx	r3
   1f40a:	0003      	movs	r3, r0
   1f40c:	b2db      	uxtb	r3, r3
   1f40e:	001c      	movs	r4, r3
   1f410:	68bb      	ldr	r3, [r7, #8]
   1f412:	0018      	movs	r0, r3
   1f414:	4b1b      	ldr	r3, [pc, #108]	; (1f484 <xTaskPriorityInherit+0x174>)
   1f416:	4798      	blx	r3
   1f418:	0003      	movs	r3, r0
   1f41a:	b2db      	uxtb	r3, r3
   1f41c:	0019      	movs	r1, r3
   1f41e:	2003      	movs	r0, #3
   1f420:	4b1c      	ldr	r3, [pc, #112]	; (1f494 <xTaskPriorityInherit+0x184>)
   1f422:	4798      	blx	r3
   1f424:	0003      	movs	r3, r0
   1f426:	0022      	movs	r2, r4
   1f428:	2103      	movs	r1, #3
   1f42a:	208e      	movs	r0, #142	; 0x8e
   1f42c:	4c1a      	ldr	r4, [pc, #104]	; (1f498 <xTaskPriorityInherit+0x188>)
   1f42e:	47a0      	blx	r4
   1f430:	68bb      	ldr	r3, [r7, #8]
   1f432:	0018      	movs	r0, r3
   1f434:	4b13      	ldr	r3, [pc, #76]	; (1f484 <xTaskPriorityInherit+0x174>)
   1f436:	4798      	blx	r3
   1f438:	0003      	movs	r3, r0
   1f43a:	b2d9      	uxtb	r1, r3
   1f43c:	4b0c      	ldr	r3, [pc, #48]	; (1f470 <xTaskPriorityInherit+0x160>)
   1f43e:	681b      	ldr	r3, [r3, #0]
   1f440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f442:	b2db      	uxtb	r3, r3
   1f444:	001a      	movs	r2, r3
   1f446:	2003      	movs	r0, #3
   1f448:	4b14      	ldr	r3, [pc, #80]	; (1f49c <xTaskPriorityInherit+0x18c>)
   1f44a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1f44c:	2301      	movs	r3, #1
   1f44e:	60fb      	str	r3, [r7, #12]
   1f450:	e008      	b.n	1f464 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1f452:	68bb      	ldr	r3, [r7, #8]
   1f454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f456:	4b06      	ldr	r3, [pc, #24]	; (1f470 <xTaskPriorityInherit+0x160>)
   1f458:	681b      	ldr	r3, [r3, #0]
   1f45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f45c:	429a      	cmp	r2, r3
   1f45e:	d201      	bcs.n	1f464 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1f460:	2301      	movs	r3, #1
   1f462:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f464:	68fb      	ldr	r3, [r7, #12]
	}
   1f466:	0018      	movs	r0, r3
   1f468:	46bd      	mov	sp, r7
   1f46a:	b005      	add	sp, #20
   1f46c:	bd90      	pop	{r4, r7, pc}
   1f46e:	46c0      	nop			; (mov r8, r8)
   1f470:	20003f80 	.word	0x20003f80
   1f474:	20003f84 	.word	0x20003f84
   1f478:	0001c42b 	.word	0x0001c42b
   1f47c:	0001a5b1 	.word	0x0001a5b1
   1f480:	20000118 	.word	0x20000118
   1f484:	0001a591 	.word	0x0001a591
   1f488:	0001ad61 	.word	0x0001ad61
   1f48c:	20004060 	.word	0x20004060
   1f490:	0001c37b 	.word	0x0001c37b
   1f494:	0001b569 	.word	0x0001b569
   1f498:	0001b0d9 	.word	0x0001b0d9
   1f49c:	0001b4c5 	.word	0x0001b4c5

0001f4a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1f4a0:	b590      	push	{r4, r7, lr}
   1f4a2:	b085      	sub	sp, #20
   1f4a4:	af00      	add	r7, sp, #0
   1f4a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f4a8:	687b      	ldr	r3, [r7, #4]
   1f4aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f4ac:	2300      	movs	r3, #0
   1f4ae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f4b0:	687b      	ldr	r3, [r7, #4]
   1f4b2:	2b00      	cmp	r3, #0
   1f4b4:	d100      	bne.n	1f4b8 <xTaskPriorityDisinherit+0x18>
   1f4b6:	e089      	b.n	1f5cc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1f4b8:	4b47      	ldr	r3, [pc, #284]	; (1f5d8 <xTaskPriorityDisinherit+0x138>)
   1f4ba:	681b      	ldr	r3, [r3, #0]
   1f4bc:	68ba      	ldr	r2, [r7, #8]
   1f4be:	429a      	cmp	r2, r3
   1f4c0:	d001      	beq.n	1f4c6 <xTaskPriorityDisinherit+0x26>
   1f4c2:	b672      	cpsid	i
   1f4c4:	e7fe      	b.n	1f4c4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1f4c6:	68bb      	ldr	r3, [r7, #8]
   1f4c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f4ca:	2b00      	cmp	r3, #0
   1f4cc:	d101      	bne.n	1f4d2 <xTaskPriorityDisinherit+0x32>
   1f4ce:	b672      	cpsid	i
   1f4d0:	e7fe      	b.n	1f4d0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1f4d2:	68bb      	ldr	r3, [r7, #8]
   1f4d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f4d6:	1e5a      	subs	r2, r3, #1
   1f4d8:	68bb      	ldr	r3, [r7, #8]
   1f4da:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1f4dc:	68bb      	ldr	r3, [r7, #8]
   1f4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f4e0:	68bb      	ldr	r3, [r7, #8]
   1f4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f4e4:	429a      	cmp	r2, r3
   1f4e6:	d071      	beq.n	1f5cc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1f4e8:	68bb      	ldr	r3, [r7, #8]
   1f4ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f4ec:	2b00      	cmp	r3, #0
   1f4ee:	d16d      	bne.n	1f5cc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f4f0:	68bb      	ldr	r3, [r7, #8]
   1f4f2:	3304      	adds	r3, #4
   1f4f4:	0018      	movs	r0, r3
   1f4f6:	4b39      	ldr	r3, [pc, #228]	; (1f5dc <xTaskPriorityDisinherit+0x13c>)
   1f4f8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f4fa:	68bb      	ldr	r3, [r7, #8]
   1f4fc:	0018      	movs	r0, r3
   1f4fe:	4b38      	ldr	r3, [pc, #224]	; (1f5e0 <xTaskPriorityDisinherit+0x140>)
   1f500:	4798      	blx	r3
   1f502:	0003      	movs	r3, r0
   1f504:	001a      	movs	r2, r3
   1f506:	4b37      	ldr	r3, [pc, #220]	; (1f5e4 <xTaskPriorityDisinherit+0x144>)
   1f508:	881b      	ldrh	r3, [r3, #0]
   1f50a:	4013      	ands	r3, r2
   1f50c:	b29b      	uxth	r3, r3
   1f50e:	2b00      	cmp	r3, #0
   1f510:	d023      	beq.n	1f55a <xTaskPriorityDisinherit+0xba>
   1f512:	68bb      	ldr	r3, [r7, #8]
   1f514:	0018      	movs	r0, r3
   1f516:	4b34      	ldr	r3, [pc, #208]	; (1f5e8 <xTaskPriorityDisinherit+0x148>)
   1f518:	4798      	blx	r3
   1f51a:	0003      	movs	r3, r0
   1f51c:	b2db      	uxtb	r3, r3
   1f51e:	001c      	movs	r4, r3
   1f520:	68bb      	ldr	r3, [r7, #8]
   1f522:	0018      	movs	r0, r3
   1f524:	4b30      	ldr	r3, [pc, #192]	; (1f5e8 <xTaskPriorityDisinherit+0x148>)
   1f526:	4798      	blx	r3
   1f528:	0003      	movs	r3, r0
   1f52a:	b2db      	uxtb	r3, r3
   1f52c:	0019      	movs	r1, r3
   1f52e:	2003      	movs	r0, #3
   1f530:	4b2e      	ldr	r3, [pc, #184]	; (1f5ec <xTaskPriorityDisinherit+0x14c>)
   1f532:	4798      	blx	r3
   1f534:	0003      	movs	r3, r0
   1f536:	0022      	movs	r2, r4
   1f538:	2103      	movs	r1, #3
   1f53a:	208f      	movs	r0, #143	; 0x8f
   1f53c:	4c2c      	ldr	r4, [pc, #176]	; (1f5f0 <xTaskPriorityDisinherit+0x150>)
   1f53e:	47a0      	blx	r4
   1f540:	68bb      	ldr	r3, [r7, #8]
   1f542:	0018      	movs	r0, r3
   1f544:	4b28      	ldr	r3, [pc, #160]	; (1f5e8 <xTaskPriorityDisinherit+0x148>)
   1f546:	4798      	blx	r3
   1f548:	0003      	movs	r3, r0
   1f54a:	b2d9      	uxtb	r1, r3
   1f54c:	68bb      	ldr	r3, [r7, #8]
   1f54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f550:	b2db      	uxtb	r3, r3
   1f552:	001a      	movs	r2, r3
   1f554:	2003      	movs	r0, #3
   1f556:	4b27      	ldr	r3, [pc, #156]	; (1f5f4 <xTaskPriorityDisinherit+0x154>)
   1f558:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1f55a:	68bb      	ldr	r3, [r7, #8]
   1f55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f55e:	68bb      	ldr	r3, [r7, #8]
   1f560:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f562:	68bb      	ldr	r3, [r7, #8]
   1f564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f566:	2205      	movs	r2, #5
   1f568:	1ad2      	subs	r2, r2, r3
   1f56a:	68bb      	ldr	r3, [r7, #8]
   1f56c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1f56e:	68bb      	ldr	r3, [r7, #8]
   1f570:	0018      	movs	r0, r3
   1f572:	4b1b      	ldr	r3, [pc, #108]	; (1f5e0 <xTaskPriorityDisinherit+0x140>)
   1f574:	4798      	blx	r3
   1f576:	0003      	movs	r3, r0
   1f578:	001a      	movs	r2, r3
   1f57a:	4b1a      	ldr	r3, [pc, #104]	; (1f5e4 <xTaskPriorityDisinherit+0x144>)
   1f57c:	881b      	ldrh	r3, [r3, #0]
   1f57e:	4013      	ands	r3, r2
   1f580:	b29b      	uxth	r3, r3
   1f582:	2b00      	cmp	r3, #0
   1f584:	d008      	beq.n	1f598 <xTaskPriorityDisinherit+0xf8>
   1f586:	68bb      	ldr	r3, [r7, #8]
   1f588:	0018      	movs	r0, r3
   1f58a:	4b17      	ldr	r3, [pc, #92]	; (1f5e8 <xTaskPriorityDisinherit+0x148>)
   1f58c:	4798      	blx	r3
   1f58e:	0003      	movs	r3, r0
   1f590:	b2db      	uxtb	r3, r3
   1f592:	0018      	movs	r0, r3
   1f594:	4b18      	ldr	r3, [pc, #96]	; (1f5f8 <xTaskPriorityDisinherit+0x158>)
   1f596:	4798      	blx	r3
   1f598:	68bb      	ldr	r3, [r7, #8]
   1f59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f59c:	4b17      	ldr	r3, [pc, #92]	; (1f5fc <xTaskPriorityDisinherit+0x15c>)
   1f59e:	681b      	ldr	r3, [r3, #0]
   1f5a0:	429a      	cmp	r2, r3
   1f5a2:	d903      	bls.n	1f5ac <xTaskPriorityDisinherit+0x10c>
   1f5a4:	68bb      	ldr	r3, [r7, #8]
   1f5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f5a8:	4b14      	ldr	r3, [pc, #80]	; (1f5fc <xTaskPriorityDisinherit+0x15c>)
   1f5aa:	601a      	str	r2, [r3, #0]
   1f5ac:	68bb      	ldr	r3, [r7, #8]
   1f5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f5b0:	0013      	movs	r3, r2
   1f5b2:	009b      	lsls	r3, r3, #2
   1f5b4:	189b      	adds	r3, r3, r2
   1f5b6:	009b      	lsls	r3, r3, #2
   1f5b8:	4a11      	ldr	r2, [pc, #68]	; (1f600 <xTaskPriorityDisinherit+0x160>)
   1f5ba:	189a      	adds	r2, r3, r2
   1f5bc:	68bb      	ldr	r3, [r7, #8]
   1f5be:	3304      	adds	r3, #4
   1f5c0:	0019      	movs	r1, r3
   1f5c2:	0010      	movs	r0, r2
   1f5c4:	4b0f      	ldr	r3, [pc, #60]	; (1f604 <xTaskPriorityDisinherit+0x164>)
   1f5c6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1f5c8:	2301      	movs	r3, #1
   1f5ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f5cc:	68fb      	ldr	r3, [r7, #12]
	}
   1f5ce:	0018      	movs	r0, r3
   1f5d0:	46bd      	mov	sp, r7
   1f5d2:	b005      	add	sp, #20
   1f5d4:	bd90      	pop	{r4, r7, pc}
   1f5d6:	46c0      	nop			; (mov r8, r8)
   1f5d8:	20003f80 	.word	0x20003f80
   1f5dc:	0001c42b 	.word	0x0001c42b
   1f5e0:	0001a5b1 	.word	0x0001a5b1
   1f5e4:	20000118 	.word	0x20000118
   1f5e8:	0001a591 	.word	0x0001a591
   1f5ec:	0001b569 	.word	0x0001b569
   1f5f0:	0001b0d9 	.word	0x0001b0d9
   1f5f4:	0001b4c5 	.word	0x0001b4c5
   1f5f8:	0001ad61 	.word	0x0001ad61
   1f5fc:	20004060 	.word	0x20004060
   1f600:	20003f84 	.word	0x20003f84
   1f604:	0001c37b 	.word	0x0001c37b

0001f608 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1f608:	b590      	push	{r4, r7, lr}
   1f60a:	b087      	sub	sp, #28
   1f60c:	af00      	add	r7, sp, #0
   1f60e:	6078      	str	r0, [r7, #4]
   1f610:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f612:	687b      	ldr	r3, [r7, #4]
   1f614:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1f616:	2301      	movs	r3, #1
   1f618:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f61a:	687b      	ldr	r3, [r7, #4]
   1f61c:	2b00      	cmp	r3, #0
   1f61e:	d100      	bne.n	1f622 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1f620:	e0a4      	b.n	1f76c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1f622:	693b      	ldr	r3, [r7, #16]
   1f624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f626:	2b00      	cmp	r3, #0
   1f628:	d101      	bne.n	1f62e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1f62a:	b672      	cpsid	i
   1f62c:	e7fe      	b.n	1f62c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1f62e:	693b      	ldr	r3, [r7, #16]
   1f630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f632:	683b      	ldr	r3, [r7, #0]
   1f634:	429a      	cmp	r2, r3
   1f636:	d202      	bcs.n	1f63e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1f638:	683b      	ldr	r3, [r7, #0]
   1f63a:	617b      	str	r3, [r7, #20]
   1f63c:	e002      	b.n	1f644 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1f63e:	693b      	ldr	r3, [r7, #16]
   1f640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f642:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1f644:	693b      	ldr	r3, [r7, #16]
   1f646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f648:	697b      	ldr	r3, [r7, #20]
   1f64a:	429a      	cmp	r2, r3
   1f64c:	d100      	bne.n	1f650 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1f64e:	e08d      	b.n	1f76c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1f650:	693b      	ldr	r3, [r7, #16]
   1f652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f654:	68fb      	ldr	r3, [r7, #12]
   1f656:	429a      	cmp	r2, r3
   1f658:	d000      	beq.n	1f65c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1f65a:	e087      	b.n	1f76c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1f65c:	4b45      	ldr	r3, [pc, #276]	; (1f774 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1f65e:	681b      	ldr	r3, [r3, #0]
   1f660:	693a      	ldr	r2, [r7, #16]
   1f662:	429a      	cmp	r2, r3
   1f664:	d101      	bne.n	1f66a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1f666:	b672      	cpsid	i
   1f668:	e7fe      	b.n	1f668 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f66a:	693b      	ldr	r3, [r7, #16]
   1f66c:	0018      	movs	r0, r3
   1f66e:	4b42      	ldr	r3, [pc, #264]	; (1f778 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f670:	4798      	blx	r3
   1f672:	0003      	movs	r3, r0
   1f674:	001a      	movs	r2, r3
   1f676:	4b41      	ldr	r3, [pc, #260]	; (1f77c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f678:	881b      	ldrh	r3, [r3, #0]
   1f67a:	4013      	ands	r3, r2
   1f67c:	b29b      	uxth	r3, r3
   1f67e:	2b00      	cmp	r3, #0
   1f680:	d023      	beq.n	1f6ca <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1f682:	693b      	ldr	r3, [r7, #16]
   1f684:	0018      	movs	r0, r3
   1f686:	4b3e      	ldr	r3, [pc, #248]	; (1f780 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f688:	4798      	blx	r3
   1f68a:	0003      	movs	r3, r0
   1f68c:	b2db      	uxtb	r3, r3
   1f68e:	001c      	movs	r4, r3
   1f690:	693b      	ldr	r3, [r7, #16]
   1f692:	0018      	movs	r0, r3
   1f694:	4b3a      	ldr	r3, [pc, #232]	; (1f780 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f696:	4798      	blx	r3
   1f698:	0003      	movs	r3, r0
   1f69a:	b2db      	uxtb	r3, r3
   1f69c:	0019      	movs	r1, r3
   1f69e:	2003      	movs	r0, #3
   1f6a0:	4b38      	ldr	r3, [pc, #224]	; (1f784 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1f6a2:	4798      	blx	r3
   1f6a4:	0003      	movs	r3, r0
   1f6a6:	0022      	movs	r2, r4
   1f6a8:	2103      	movs	r1, #3
   1f6aa:	208f      	movs	r0, #143	; 0x8f
   1f6ac:	4c36      	ldr	r4, [pc, #216]	; (1f788 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1f6ae:	47a0      	blx	r4
   1f6b0:	693b      	ldr	r3, [r7, #16]
   1f6b2:	0018      	movs	r0, r3
   1f6b4:	4b32      	ldr	r3, [pc, #200]	; (1f780 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f6b6:	4798      	blx	r3
   1f6b8:	0003      	movs	r3, r0
   1f6ba:	b2d9      	uxtb	r1, r3
   1f6bc:	693b      	ldr	r3, [r7, #16]
   1f6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f6c0:	b2db      	uxtb	r3, r3
   1f6c2:	001a      	movs	r2, r3
   1f6c4:	2003      	movs	r0, #3
   1f6c6:	4b31      	ldr	r3, [pc, #196]	; (1f78c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1f6c8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1f6ca:	693b      	ldr	r3, [r7, #16]
   1f6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f6ce:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1f6d0:	693b      	ldr	r3, [r7, #16]
   1f6d2:	697a      	ldr	r2, [r7, #20]
   1f6d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f6d6:	693b      	ldr	r3, [r7, #16]
   1f6d8:	699b      	ldr	r3, [r3, #24]
   1f6da:	2b00      	cmp	r3, #0
   1f6dc:	db04      	blt.n	1f6e8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f6de:	697b      	ldr	r3, [r7, #20]
   1f6e0:	2205      	movs	r2, #5
   1f6e2:	1ad2      	subs	r2, r2, r3
   1f6e4:	693b      	ldr	r3, [r7, #16]
   1f6e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1f6e8:	693b      	ldr	r3, [r7, #16]
   1f6ea:	6959      	ldr	r1, [r3, #20]
   1f6ec:	68ba      	ldr	r2, [r7, #8]
   1f6ee:	0013      	movs	r3, r2
   1f6f0:	009b      	lsls	r3, r3, #2
   1f6f2:	189b      	adds	r3, r3, r2
   1f6f4:	009b      	lsls	r3, r3, #2
   1f6f6:	4a26      	ldr	r2, [pc, #152]	; (1f790 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f6f8:	189b      	adds	r3, r3, r2
   1f6fa:	4299      	cmp	r1, r3
   1f6fc:	d101      	bne.n	1f702 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1f6fe:	2301      	movs	r3, #1
   1f700:	e000      	b.n	1f704 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1f702:	2300      	movs	r3, #0
   1f704:	2b00      	cmp	r3, #0
   1f706:	d031      	beq.n	1f76c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f708:	693b      	ldr	r3, [r7, #16]
   1f70a:	3304      	adds	r3, #4
   1f70c:	0018      	movs	r0, r3
   1f70e:	4b21      	ldr	r3, [pc, #132]	; (1f794 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1f710:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1f712:	693b      	ldr	r3, [r7, #16]
   1f714:	0018      	movs	r0, r3
   1f716:	4b18      	ldr	r3, [pc, #96]	; (1f778 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f718:	4798      	blx	r3
   1f71a:	0003      	movs	r3, r0
   1f71c:	001a      	movs	r2, r3
   1f71e:	4b17      	ldr	r3, [pc, #92]	; (1f77c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f720:	881b      	ldrh	r3, [r3, #0]
   1f722:	4013      	ands	r3, r2
   1f724:	b29b      	uxth	r3, r3
   1f726:	2b00      	cmp	r3, #0
   1f728:	d008      	beq.n	1f73c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1f72a:	693b      	ldr	r3, [r7, #16]
   1f72c:	0018      	movs	r0, r3
   1f72e:	4b14      	ldr	r3, [pc, #80]	; (1f780 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f730:	4798      	blx	r3
   1f732:	0003      	movs	r3, r0
   1f734:	b2db      	uxtb	r3, r3
   1f736:	0018      	movs	r0, r3
   1f738:	4b17      	ldr	r3, [pc, #92]	; (1f798 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1f73a:	4798      	blx	r3
   1f73c:	693b      	ldr	r3, [r7, #16]
   1f73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f740:	4b16      	ldr	r3, [pc, #88]	; (1f79c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f742:	681b      	ldr	r3, [r3, #0]
   1f744:	429a      	cmp	r2, r3
   1f746:	d903      	bls.n	1f750 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1f748:	693b      	ldr	r3, [r7, #16]
   1f74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f74c:	4b13      	ldr	r3, [pc, #76]	; (1f79c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f74e:	601a      	str	r2, [r3, #0]
   1f750:	693b      	ldr	r3, [r7, #16]
   1f752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f754:	0013      	movs	r3, r2
   1f756:	009b      	lsls	r3, r3, #2
   1f758:	189b      	adds	r3, r3, r2
   1f75a:	009b      	lsls	r3, r3, #2
   1f75c:	4a0c      	ldr	r2, [pc, #48]	; (1f790 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f75e:	189a      	adds	r2, r3, r2
   1f760:	693b      	ldr	r3, [r7, #16]
   1f762:	3304      	adds	r3, #4
   1f764:	0019      	movs	r1, r3
   1f766:	0010      	movs	r0, r2
   1f768:	4b0d      	ldr	r3, [pc, #52]	; (1f7a0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1f76a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1f76c:	46c0      	nop			; (mov r8, r8)
   1f76e:	46bd      	mov	sp, r7
   1f770:	b007      	add	sp, #28
   1f772:	bd90      	pop	{r4, r7, pc}
   1f774:	20003f80 	.word	0x20003f80
   1f778:	0001a5b1 	.word	0x0001a5b1
   1f77c:	20000118 	.word	0x20000118
   1f780:	0001a591 	.word	0x0001a591
   1f784:	0001b569 	.word	0x0001b569
   1f788:	0001b0d9 	.word	0x0001b0d9
   1f78c:	0001b4c5 	.word	0x0001b4c5
   1f790:	20003f84 	.word	0x20003f84
   1f794:	0001c42b 	.word	0x0001c42b
   1f798:	0001ad61 	.word	0x0001ad61
   1f79c:	20004060 	.word	0x20004060
   1f7a0:	0001c37b 	.word	0x0001c37b

0001f7a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1f7a4:	b580      	push	{r7, lr}
   1f7a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1f7a8:	4b06      	ldr	r3, [pc, #24]	; (1f7c4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f7aa:	681b      	ldr	r3, [r3, #0]
   1f7ac:	2b00      	cmp	r3, #0
   1f7ae:	d004      	beq.n	1f7ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1f7b0:	4b04      	ldr	r3, [pc, #16]	; (1f7c4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f7b2:	681b      	ldr	r3, [r3, #0]
   1f7b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f7b6:	3201      	adds	r2, #1
   1f7b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1f7ba:	4b02      	ldr	r3, [pc, #8]	; (1f7c4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f7bc:	681b      	ldr	r3, [r3, #0]
	}
   1f7be:	0018      	movs	r0, r3
   1f7c0:	46bd      	mov	sp, r7
   1f7c2:	bd80      	pop	{r7, pc}
   1f7c4:	20003f80 	.word	0x20003f80

0001f7c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1f7c8:	b580      	push	{r7, lr}
   1f7ca:	b084      	sub	sp, #16
   1f7cc:	af00      	add	r7, sp, #0
   1f7ce:	6078      	str	r0, [r7, #4]
   1f7d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1f7d2:	4b21      	ldr	r3, [pc, #132]	; (1f858 <prvAddCurrentTaskToDelayedList+0x90>)
   1f7d4:	681b      	ldr	r3, [r3, #0]
   1f7d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f7d8:	4b20      	ldr	r3, [pc, #128]	; (1f85c <prvAddCurrentTaskToDelayedList+0x94>)
   1f7da:	681b      	ldr	r3, [r3, #0]
   1f7dc:	3304      	adds	r3, #4
   1f7de:	0018      	movs	r0, r3
   1f7e0:	4b1f      	ldr	r3, [pc, #124]	; (1f860 <prvAddCurrentTaskToDelayedList+0x98>)
   1f7e2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1f7e4:	687b      	ldr	r3, [r7, #4]
   1f7e6:	3301      	adds	r3, #1
   1f7e8:	d10b      	bne.n	1f802 <prvAddCurrentTaskToDelayedList+0x3a>
   1f7ea:	683b      	ldr	r3, [r7, #0]
   1f7ec:	2b00      	cmp	r3, #0
   1f7ee:	d008      	beq.n	1f802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f7f0:	4b1a      	ldr	r3, [pc, #104]	; (1f85c <prvAddCurrentTaskToDelayedList+0x94>)
   1f7f2:	681b      	ldr	r3, [r3, #0]
   1f7f4:	1d1a      	adds	r2, r3, #4
   1f7f6:	4b1b      	ldr	r3, [pc, #108]	; (1f864 <prvAddCurrentTaskToDelayedList+0x9c>)
   1f7f8:	0011      	movs	r1, r2
   1f7fa:	0018      	movs	r0, r3
   1f7fc:	4b1a      	ldr	r3, [pc, #104]	; (1f868 <prvAddCurrentTaskToDelayedList+0xa0>)
   1f7fe:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1f800:	e026      	b.n	1f850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1f802:	68fa      	ldr	r2, [r7, #12]
   1f804:	687b      	ldr	r3, [r7, #4]
   1f806:	18d3      	adds	r3, r2, r3
   1f808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1f80a:	4b14      	ldr	r3, [pc, #80]	; (1f85c <prvAddCurrentTaskToDelayedList+0x94>)
   1f80c:	681b      	ldr	r3, [r3, #0]
   1f80e:	68ba      	ldr	r2, [r7, #8]
   1f810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1f812:	68ba      	ldr	r2, [r7, #8]
   1f814:	68fb      	ldr	r3, [r7, #12]
   1f816:	429a      	cmp	r2, r3
   1f818:	d209      	bcs.n	1f82e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f81a:	4b14      	ldr	r3, [pc, #80]	; (1f86c <prvAddCurrentTaskToDelayedList+0xa4>)
   1f81c:	681a      	ldr	r2, [r3, #0]
   1f81e:	4b0f      	ldr	r3, [pc, #60]	; (1f85c <prvAddCurrentTaskToDelayedList+0x94>)
   1f820:	681b      	ldr	r3, [r3, #0]
   1f822:	3304      	adds	r3, #4
   1f824:	0019      	movs	r1, r3
   1f826:	0010      	movs	r0, r2
   1f828:	4b11      	ldr	r3, [pc, #68]	; (1f870 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f82a:	4798      	blx	r3
}
   1f82c:	e010      	b.n	1f850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f82e:	4b11      	ldr	r3, [pc, #68]	; (1f874 <prvAddCurrentTaskToDelayedList+0xac>)
   1f830:	681a      	ldr	r2, [r3, #0]
   1f832:	4b0a      	ldr	r3, [pc, #40]	; (1f85c <prvAddCurrentTaskToDelayedList+0x94>)
   1f834:	681b      	ldr	r3, [r3, #0]
   1f836:	3304      	adds	r3, #4
   1f838:	0019      	movs	r1, r3
   1f83a:	0010      	movs	r0, r2
   1f83c:	4b0c      	ldr	r3, [pc, #48]	; (1f870 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f83e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1f840:	4b0d      	ldr	r3, [pc, #52]	; (1f878 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f842:	681b      	ldr	r3, [r3, #0]
   1f844:	68ba      	ldr	r2, [r7, #8]
   1f846:	429a      	cmp	r2, r3
   1f848:	d202      	bcs.n	1f850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1f84a:	4b0b      	ldr	r3, [pc, #44]	; (1f878 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f84c:	68ba      	ldr	r2, [r7, #8]
   1f84e:	601a      	str	r2, [r3, #0]
}
   1f850:	46c0      	nop			; (mov r8, r8)
   1f852:	46bd      	mov	sp, r7
   1f854:	b004      	add	sp, #16
   1f856:	bd80      	pop	{r7, pc}
   1f858:	2000405c 	.word	0x2000405c
   1f85c:	20003f80 	.word	0x20003f80
   1f860:	0001c42b 	.word	0x0001c42b
   1f864:	20004044 	.word	0x20004044
   1f868:	0001c37b 	.word	0x0001c37b
   1f86c:	20004014 	.word	0x20004014
   1f870:	0001c3bf 	.word	0x0001c3bf
   1f874:	20004010 	.word	0x20004010
   1f878:	20004078 	.word	0x20004078

0001f87c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1f87c:	b590      	push	{r4, r7, lr}
   1f87e:	b085      	sub	sp, #20
   1f880:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1f882:	2300      	movs	r3, #0
   1f884:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1f886:	4b0e      	ldr	r3, [pc, #56]	; (1f8c0 <xTimerCreateTimerTask+0x44>)
   1f888:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1f88a:	4b0e      	ldr	r3, [pc, #56]	; (1f8c4 <xTimerCreateTimerTask+0x48>)
   1f88c:	681b      	ldr	r3, [r3, #0]
   1f88e:	2b00      	cmp	r3, #0
   1f890:	d00b      	beq.n	1f8aa <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1f892:	490d      	ldr	r1, [pc, #52]	; (1f8c8 <xTimerCreateTimerTask+0x4c>)
   1f894:	480d      	ldr	r0, [pc, #52]	; (1f8cc <xTimerCreateTimerTask+0x50>)
   1f896:	4b0e      	ldr	r3, [pc, #56]	; (1f8d0 <xTimerCreateTimerTask+0x54>)
   1f898:	9301      	str	r3, [sp, #4]
   1f89a:	2302      	movs	r3, #2
   1f89c:	9300      	str	r3, [sp, #0]
   1f89e:	2300      	movs	r3, #0
   1f8a0:	2280      	movs	r2, #128	; 0x80
   1f8a2:	4c0c      	ldr	r4, [pc, #48]	; (1f8d4 <xTimerCreateTimerTask+0x58>)
   1f8a4:	47a0      	blx	r4
   1f8a6:	0003      	movs	r3, r0
   1f8a8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1f8aa:	687b      	ldr	r3, [r7, #4]
   1f8ac:	2b00      	cmp	r3, #0
   1f8ae:	d101      	bne.n	1f8b4 <xTimerCreateTimerTask+0x38>
   1f8b0:	b672      	cpsid	i
   1f8b2:	e7fe      	b.n	1f8b2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1f8b4:	687b      	ldr	r3, [r7, #4]
}
   1f8b6:	0018      	movs	r0, r3
   1f8b8:	46bd      	mov	sp, r7
   1f8ba:	b003      	add	sp, #12
   1f8bc:	bd90      	pop	{r4, r7, pc}
   1f8be:	46c0      	nop			; (mov r8, r8)
   1f8c0:	0001fdc5 	.word	0x0001fdc5
   1f8c4:	200040b4 	.word	0x200040b4
   1f8c8:	0003b558 	.word	0x0003b558
   1f8cc:	0001f9fd 	.word	0x0001f9fd
   1f8d0:	200040b8 	.word	0x200040b8
   1f8d4:	0001e215 	.word	0x0001e215

0001f8d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1f8d8:	b590      	push	{r4, r7, lr}
   1f8da:	b089      	sub	sp, #36	; 0x24
   1f8dc:	af00      	add	r7, sp, #0
   1f8de:	60f8      	str	r0, [r7, #12]
   1f8e0:	60b9      	str	r1, [r7, #8]
   1f8e2:	607a      	str	r2, [r7, #4]
   1f8e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1f8e6:	2300      	movs	r3, #0
   1f8e8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1f8ea:	68fb      	ldr	r3, [r7, #12]
   1f8ec:	2b00      	cmp	r3, #0
   1f8ee:	d101      	bne.n	1f8f4 <xTimerGenericCommand+0x1c>
   1f8f0:	b672      	cpsid	i
   1f8f2:	e7fe      	b.n	1f8f2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1f8f4:	4b1e      	ldr	r3, [pc, #120]	; (1f970 <xTimerGenericCommand+0x98>)
   1f8f6:	681b      	ldr	r3, [r3, #0]
   1f8f8:	2b00      	cmp	r3, #0
   1f8fa:	d033      	beq.n	1f964 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1f8fc:	2310      	movs	r3, #16
   1f8fe:	18fb      	adds	r3, r7, r3
   1f900:	68ba      	ldr	r2, [r7, #8]
   1f902:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1f904:	2310      	movs	r3, #16
   1f906:	18fb      	adds	r3, r7, r3
   1f908:	687a      	ldr	r2, [r7, #4]
   1f90a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1f90c:	2310      	movs	r3, #16
   1f90e:	18fb      	adds	r3, r7, r3
   1f910:	68fa      	ldr	r2, [r7, #12]
   1f912:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1f914:	68bb      	ldr	r3, [r7, #8]
   1f916:	2b05      	cmp	r3, #5
   1f918:	dc1a      	bgt.n	1f950 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f91a:	4b16      	ldr	r3, [pc, #88]	; (1f974 <xTimerGenericCommand+0x9c>)
   1f91c:	4798      	blx	r3
   1f91e:	0003      	movs	r3, r0
   1f920:	2b02      	cmp	r3, #2
   1f922:	d10a      	bne.n	1f93a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f924:	4b12      	ldr	r3, [pc, #72]	; (1f970 <xTimerGenericCommand+0x98>)
   1f926:	6818      	ldr	r0, [r3, #0]
   1f928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1f92a:	2310      	movs	r3, #16
   1f92c:	18f9      	adds	r1, r7, r3
   1f92e:	2300      	movs	r3, #0
   1f930:	4c11      	ldr	r4, [pc, #68]	; (1f978 <xTimerGenericCommand+0xa0>)
   1f932:	47a0      	blx	r4
   1f934:	0003      	movs	r3, r0
   1f936:	61fb      	str	r3, [r7, #28]
   1f938:	e014      	b.n	1f964 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1f93a:	4b0d      	ldr	r3, [pc, #52]	; (1f970 <xTimerGenericCommand+0x98>)
   1f93c:	6818      	ldr	r0, [r3, #0]
   1f93e:	2310      	movs	r3, #16
   1f940:	18f9      	adds	r1, r7, r3
   1f942:	2300      	movs	r3, #0
   1f944:	2200      	movs	r2, #0
   1f946:	4c0c      	ldr	r4, [pc, #48]	; (1f978 <xTimerGenericCommand+0xa0>)
   1f948:	47a0      	blx	r4
   1f94a:	0003      	movs	r3, r0
   1f94c:	61fb      	str	r3, [r7, #28]
   1f94e:	e009      	b.n	1f964 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f950:	4b07      	ldr	r3, [pc, #28]	; (1f970 <xTimerGenericCommand+0x98>)
   1f952:	6818      	ldr	r0, [r3, #0]
   1f954:	683a      	ldr	r2, [r7, #0]
   1f956:	2310      	movs	r3, #16
   1f958:	18f9      	adds	r1, r7, r3
   1f95a:	2300      	movs	r3, #0
   1f95c:	4c07      	ldr	r4, [pc, #28]	; (1f97c <xTimerGenericCommand+0xa4>)
   1f95e:	47a0      	blx	r4
   1f960:	0003      	movs	r3, r0
   1f962:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1f964:	69fb      	ldr	r3, [r7, #28]
}
   1f966:	0018      	movs	r0, r3
   1f968:	46bd      	mov	sp, r7
   1f96a:	b009      	add	sp, #36	; 0x24
   1f96c:	bd90      	pop	{r4, r7, pc}
   1f96e:	46c0      	nop			; (mov r8, r8)
   1f970:	200040b4 	.word	0x200040b4
   1f974:	0001f2d9 	.word	0x0001f2d9
   1f978:	0001cb4d 	.word	0x0001cb4d
   1f97c:	0001cfad 	.word	0x0001cfad

0001f980 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1f980:	b590      	push	{r4, r7, lr}
   1f982:	b087      	sub	sp, #28
   1f984:	af02      	add	r7, sp, #8
   1f986:	6078      	str	r0, [r7, #4]
   1f988:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f98a:	4b18      	ldr	r3, [pc, #96]	; (1f9ec <prvProcessExpiredTimer+0x6c>)
   1f98c:	681b      	ldr	r3, [r3, #0]
   1f98e:	68db      	ldr	r3, [r3, #12]
   1f990:	68db      	ldr	r3, [r3, #12]
   1f992:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f994:	68fb      	ldr	r3, [r7, #12]
   1f996:	3304      	adds	r3, #4
   1f998:	0018      	movs	r0, r3
   1f99a:	4b15      	ldr	r3, [pc, #84]	; (1f9f0 <prvProcessExpiredTimer+0x70>)
   1f99c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1f99e:	68fb      	ldr	r3, [r7, #12]
   1f9a0:	69db      	ldr	r3, [r3, #28]
   1f9a2:	2b01      	cmp	r3, #1
   1f9a4:	d119      	bne.n	1f9da <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1f9a6:	68fb      	ldr	r3, [r7, #12]
   1f9a8:	699a      	ldr	r2, [r3, #24]
   1f9aa:	687b      	ldr	r3, [r7, #4]
   1f9ac:	18d1      	adds	r1, r2, r3
   1f9ae:	687b      	ldr	r3, [r7, #4]
   1f9b0:	683a      	ldr	r2, [r7, #0]
   1f9b2:	68f8      	ldr	r0, [r7, #12]
   1f9b4:	4c0f      	ldr	r4, [pc, #60]	; (1f9f4 <prvProcessExpiredTimer+0x74>)
   1f9b6:	47a0      	blx	r4
   1f9b8:	1e03      	subs	r3, r0, #0
   1f9ba:	d00e      	beq.n	1f9da <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1f9bc:	687a      	ldr	r2, [r7, #4]
   1f9be:	68f8      	ldr	r0, [r7, #12]
   1f9c0:	2300      	movs	r3, #0
   1f9c2:	9300      	str	r3, [sp, #0]
   1f9c4:	2300      	movs	r3, #0
   1f9c6:	2100      	movs	r1, #0
   1f9c8:	4c0b      	ldr	r4, [pc, #44]	; (1f9f8 <prvProcessExpiredTimer+0x78>)
   1f9ca:	47a0      	blx	r4
   1f9cc:	0003      	movs	r3, r0
   1f9ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1f9d0:	68bb      	ldr	r3, [r7, #8]
   1f9d2:	2b00      	cmp	r3, #0
   1f9d4:	d101      	bne.n	1f9da <prvProcessExpiredTimer+0x5a>
   1f9d6:	b672      	cpsid	i
   1f9d8:	e7fe      	b.n	1f9d8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1f9da:	68fb      	ldr	r3, [r7, #12]
   1f9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f9de:	68fa      	ldr	r2, [r7, #12]
   1f9e0:	0010      	movs	r0, r2
   1f9e2:	4798      	blx	r3
}
   1f9e4:	46c0      	nop			; (mov r8, r8)
   1f9e6:	46bd      	mov	sp, r7
   1f9e8:	b005      	add	sp, #20
   1f9ea:	bd90      	pop	{r4, r7, pc}
   1f9ec:	200040ac 	.word	0x200040ac
   1f9f0:	0001c42b 	.word	0x0001c42b
   1f9f4:	0001fb65 	.word	0x0001fb65
   1f9f8:	0001f8d9 	.word	0x0001f8d9

0001f9fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1f9fc:	b580      	push	{r7, lr}
   1f9fe:	b084      	sub	sp, #16
   1fa00:	af00      	add	r7, sp, #0
   1fa02:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1fa04:	4b08      	ldr	r3, [pc, #32]	; (1fa28 <prvTimerTask+0x2c>)
   1fa06:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1fa08:	2308      	movs	r3, #8
   1fa0a:	18fb      	adds	r3, r7, r3
   1fa0c:	0018      	movs	r0, r3
   1fa0e:	4b07      	ldr	r3, [pc, #28]	; (1fa2c <prvTimerTask+0x30>)
   1fa10:	4798      	blx	r3
   1fa12:	0003      	movs	r3, r0
   1fa14:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1fa16:	68ba      	ldr	r2, [r7, #8]
   1fa18:	68fb      	ldr	r3, [r7, #12]
   1fa1a:	0011      	movs	r1, r2
   1fa1c:	0018      	movs	r0, r3
   1fa1e:	4b04      	ldr	r3, [pc, #16]	; (1fa30 <prvTimerTask+0x34>)
   1fa20:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1fa22:	4b04      	ldr	r3, [pc, #16]	; (1fa34 <prvTimerTask+0x38>)
   1fa24:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1fa26:	e7ef      	b.n	1fa08 <prvTimerTask+0xc>
   1fa28:	00034bb5 	.word	0x00034bb5
   1fa2c:	0001fadd 	.word	0x0001fadd
   1fa30:	0001fa39 	.word	0x0001fa39
   1fa34:	0001fbed 	.word	0x0001fbed

0001fa38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1fa38:	b580      	push	{r7, lr}
   1fa3a:	b084      	sub	sp, #16
   1fa3c:	af00      	add	r7, sp, #0
   1fa3e:	6078      	str	r0, [r7, #4]
   1fa40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1fa42:	4b1e      	ldr	r3, [pc, #120]	; (1fabc <prvProcessTimerOrBlockTask+0x84>)
   1fa44:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1fa46:	2308      	movs	r3, #8
   1fa48:	18fb      	adds	r3, r7, r3
   1fa4a:	0018      	movs	r0, r3
   1fa4c:	4b1c      	ldr	r3, [pc, #112]	; (1fac0 <prvProcessTimerOrBlockTask+0x88>)
   1fa4e:	4798      	blx	r3
   1fa50:	0003      	movs	r3, r0
   1fa52:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1fa54:	68bb      	ldr	r3, [r7, #8]
   1fa56:	2b00      	cmp	r3, #0
   1fa58:	d129      	bne.n	1faae <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1fa5a:	683b      	ldr	r3, [r7, #0]
   1fa5c:	2b00      	cmp	r3, #0
   1fa5e:	d10c      	bne.n	1fa7a <prvProcessTimerOrBlockTask+0x42>
   1fa60:	687a      	ldr	r2, [r7, #4]
   1fa62:	68fb      	ldr	r3, [r7, #12]
   1fa64:	429a      	cmp	r2, r3
   1fa66:	d808      	bhi.n	1fa7a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1fa68:	4b16      	ldr	r3, [pc, #88]	; (1fac4 <prvProcessTimerOrBlockTask+0x8c>)
   1fa6a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1fa6c:	68fa      	ldr	r2, [r7, #12]
   1fa6e:	687b      	ldr	r3, [r7, #4]
   1fa70:	0011      	movs	r1, r2
   1fa72:	0018      	movs	r0, r3
   1fa74:	4b14      	ldr	r3, [pc, #80]	; (1fac8 <prvProcessTimerOrBlockTask+0x90>)
   1fa76:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1fa78:	e01b      	b.n	1fab2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1fa7a:	683b      	ldr	r3, [r7, #0]
   1fa7c:	2b00      	cmp	r3, #0
   1fa7e:	d006      	beq.n	1fa8e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1fa80:	4b12      	ldr	r3, [pc, #72]	; (1facc <prvProcessTimerOrBlockTask+0x94>)
   1fa82:	681b      	ldr	r3, [r3, #0]
   1fa84:	681b      	ldr	r3, [r3, #0]
   1fa86:	425a      	negs	r2, r3
   1fa88:	4153      	adcs	r3, r2
   1fa8a:	b2db      	uxtb	r3, r3
   1fa8c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1fa8e:	4b10      	ldr	r3, [pc, #64]	; (1fad0 <prvProcessTimerOrBlockTask+0x98>)
   1fa90:	6818      	ldr	r0, [r3, #0]
   1fa92:	687a      	ldr	r2, [r7, #4]
   1fa94:	68fb      	ldr	r3, [r7, #12]
   1fa96:	1ad3      	subs	r3, r2, r3
   1fa98:	683a      	ldr	r2, [r7, #0]
   1fa9a:	0019      	movs	r1, r3
   1fa9c:	4b0d      	ldr	r3, [pc, #52]	; (1fad4 <prvProcessTimerOrBlockTask+0x9c>)
   1fa9e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1faa0:	4b08      	ldr	r3, [pc, #32]	; (1fac4 <prvProcessTimerOrBlockTask+0x8c>)
   1faa2:	4798      	blx	r3
   1faa4:	1e03      	subs	r3, r0, #0
   1faa6:	d104      	bne.n	1fab2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1faa8:	4b0b      	ldr	r3, [pc, #44]	; (1fad8 <prvProcessTimerOrBlockTask+0xa0>)
   1faaa:	4798      	blx	r3
}
   1faac:	e001      	b.n	1fab2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1faae:	4b05      	ldr	r3, [pc, #20]	; (1fac4 <prvProcessTimerOrBlockTask+0x8c>)
   1fab0:	4798      	blx	r3
}
   1fab2:	46c0      	nop			; (mov r8, r8)
   1fab4:	46bd      	mov	sp, r7
   1fab6:	b004      	add	sp, #16
   1fab8:	bd80      	pop	{r7, pc}
   1faba:	46c0      	nop			; (mov r8, r8)
   1fabc:	0001e871 	.word	0x0001e871
   1fac0:	0001fb1d 	.word	0x0001fb1d
   1fac4:	0001e889 	.word	0x0001e889
   1fac8:	0001f981 	.word	0x0001f981
   1facc:	200040b0 	.word	0x200040b0
   1fad0:	200040b4 	.word	0x200040b4
   1fad4:	0001e011 	.word	0x0001e011
   1fad8:	0001c5a1 	.word	0x0001c5a1

0001fadc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1fadc:	b580      	push	{r7, lr}
   1fade:	b084      	sub	sp, #16
   1fae0:	af00      	add	r7, sp, #0
   1fae2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1fae4:	4b0c      	ldr	r3, [pc, #48]	; (1fb18 <prvGetNextExpireTime+0x3c>)
   1fae6:	681b      	ldr	r3, [r3, #0]
   1fae8:	681b      	ldr	r3, [r3, #0]
   1faea:	425a      	negs	r2, r3
   1faec:	4153      	adcs	r3, r2
   1faee:	b2db      	uxtb	r3, r3
   1faf0:	001a      	movs	r2, r3
   1faf2:	687b      	ldr	r3, [r7, #4]
   1faf4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1faf6:	687b      	ldr	r3, [r7, #4]
   1faf8:	681b      	ldr	r3, [r3, #0]
   1fafa:	2b00      	cmp	r3, #0
   1fafc:	d105      	bne.n	1fb0a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fafe:	4b06      	ldr	r3, [pc, #24]	; (1fb18 <prvGetNextExpireTime+0x3c>)
   1fb00:	681b      	ldr	r3, [r3, #0]
   1fb02:	68db      	ldr	r3, [r3, #12]
   1fb04:	681b      	ldr	r3, [r3, #0]
   1fb06:	60fb      	str	r3, [r7, #12]
   1fb08:	e001      	b.n	1fb0e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1fb0a:	2300      	movs	r3, #0
   1fb0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1fb0e:	68fb      	ldr	r3, [r7, #12]
}
   1fb10:	0018      	movs	r0, r3
   1fb12:	46bd      	mov	sp, r7
   1fb14:	b004      	add	sp, #16
   1fb16:	bd80      	pop	{r7, pc}
   1fb18:	200040ac 	.word	0x200040ac

0001fb1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1fb1c:	b580      	push	{r7, lr}
   1fb1e:	b084      	sub	sp, #16
   1fb20:	af00      	add	r7, sp, #0
   1fb22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1fb24:	4b0c      	ldr	r3, [pc, #48]	; (1fb58 <prvSampleTimeNow+0x3c>)
   1fb26:	4798      	blx	r3
   1fb28:	0003      	movs	r3, r0
   1fb2a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1fb2c:	4b0b      	ldr	r3, [pc, #44]	; (1fb5c <prvSampleTimeNow+0x40>)
   1fb2e:	681b      	ldr	r3, [r3, #0]
   1fb30:	68fa      	ldr	r2, [r7, #12]
   1fb32:	429a      	cmp	r2, r3
   1fb34:	d205      	bcs.n	1fb42 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1fb36:	4b0a      	ldr	r3, [pc, #40]	; (1fb60 <prvSampleTimeNow+0x44>)
   1fb38:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1fb3a:	687b      	ldr	r3, [r7, #4]
   1fb3c:	2201      	movs	r2, #1
   1fb3e:	601a      	str	r2, [r3, #0]
   1fb40:	e002      	b.n	1fb48 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1fb42:	687b      	ldr	r3, [r7, #4]
   1fb44:	2200      	movs	r2, #0
   1fb46:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1fb48:	4b04      	ldr	r3, [pc, #16]	; (1fb5c <prvSampleTimeNow+0x40>)
   1fb4a:	68fa      	ldr	r2, [r7, #12]
   1fb4c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1fb4e:	68fb      	ldr	r3, [r7, #12]
}
   1fb50:	0018      	movs	r0, r3
   1fb52:	46bd      	mov	sp, r7
   1fb54:	b004      	add	sp, #16
   1fb56:	bd80      	pop	{r7, pc}
   1fb58:	0001e9f9 	.word	0x0001e9f9
   1fb5c:	200040bc 	.word	0x200040bc
   1fb60:	0001fd05 	.word	0x0001fd05

0001fb64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1fb64:	b580      	push	{r7, lr}
   1fb66:	b086      	sub	sp, #24
   1fb68:	af00      	add	r7, sp, #0
   1fb6a:	60f8      	str	r0, [r7, #12]
   1fb6c:	60b9      	str	r1, [r7, #8]
   1fb6e:	607a      	str	r2, [r7, #4]
   1fb70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1fb72:	2300      	movs	r3, #0
   1fb74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1fb76:	68fb      	ldr	r3, [r7, #12]
   1fb78:	68ba      	ldr	r2, [r7, #8]
   1fb7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1fb7c:	68fb      	ldr	r3, [r7, #12]
   1fb7e:	68fa      	ldr	r2, [r7, #12]
   1fb80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1fb82:	68ba      	ldr	r2, [r7, #8]
   1fb84:	687b      	ldr	r3, [r7, #4]
   1fb86:	429a      	cmp	r2, r3
   1fb88:	d812      	bhi.n	1fbb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fb8a:	687a      	ldr	r2, [r7, #4]
   1fb8c:	683b      	ldr	r3, [r7, #0]
   1fb8e:	1ad2      	subs	r2, r2, r3
   1fb90:	68fb      	ldr	r3, [r7, #12]
   1fb92:	699b      	ldr	r3, [r3, #24]
   1fb94:	429a      	cmp	r2, r3
   1fb96:	d302      	bcc.n	1fb9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1fb98:	2301      	movs	r3, #1
   1fb9a:	617b      	str	r3, [r7, #20]
   1fb9c:	e01b      	b.n	1fbd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1fb9e:	4b10      	ldr	r3, [pc, #64]	; (1fbe0 <prvInsertTimerInActiveList+0x7c>)
   1fba0:	681a      	ldr	r2, [r3, #0]
   1fba2:	68fb      	ldr	r3, [r7, #12]
   1fba4:	3304      	adds	r3, #4
   1fba6:	0019      	movs	r1, r3
   1fba8:	0010      	movs	r0, r2
   1fbaa:	4b0e      	ldr	r3, [pc, #56]	; (1fbe4 <prvInsertTimerInActiveList+0x80>)
   1fbac:	4798      	blx	r3
   1fbae:	e012      	b.n	1fbd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1fbb0:	687a      	ldr	r2, [r7, #4]
   1fbb2:	683b      	ldr	r3, [r7, #0]
   1fbb4:	429a      	cmp	r2, r3
   1fbb6:	d206      	bcs.n	1fbc6 <prvInsertTimerInActiveList+0x62>
   1fbb8:	68ba      	ldr	r2, [r7, #8]
   1fbba:	683b      	ldr	r3, [r7, #0]
   1fbbc:	429a      	cmp	r2, r3
   1fbbe:	d302      	bcc.n	1fbc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1fbc0:	2301      	movs	r3, #1
   1fbc2:	617b      	str	r3, [r7, #20]
   1fbc4:	e007      	b.n	1fbd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1fbc6:	4b08      	ldr	r3, [pc, #32]	; (1fbe8 <prvInsertTimerInActiveList+0x84>)
   1fbc8:	681a      	ldr	r2, [r3, #0]
   1fbca:	68fb      	ldr	r3, [r7, #12]
   1fbcc:	3304      	adds	r3, #4
   1fbce:	0019      	movs	r1, r3
   1fbd0:	0010      	movs	r0, r2
   1fbd2:	4b04      	ldr	r3, [pc, #16]	; (1fbe4 <prvInsertTimerInActiveList+0x80>)
   1fbd4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1fbd6:	697b      	ldr	r3, [r7, #20]
}
   1fbd8:	0018      	movs	r0, r3
   1fbda:	46bd      	mov	sp, r7
   1fbdc:	b006      	add	sp, #24
   1fbde:	bd80      	pop	{r7, pc}
   1fbe0:	200040b0 	.word	0x200040b0
   1fbe4:	0001c3bf 	.word	0x0001c3bf
   1fbe8:	200040ac 	.word	0x200040ac

0001fbec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1fbec:	b590      	push	{r4, r7, lr}
   1fbee:	b08b      	sub	sp, #44	; 0x2c
   1fbf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1fbf2:	e068      	b.n	1fcc6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1fbf4:	2308      	movs	r3, #8
   1fbf6:	18fb      	adds	r3, r7, r3
   1fbf8:	681b      	ldr	r3, [r3, #0]
   1fbfa:	2b00      	cmp	r3, #0
   1fbfc:	db63      	blt.n	1fcc6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1fbfe:	2308      	movs	r3, #8
   1fc00:	18fb      	adds	r3, r7, r3
   1fc02:	689b      	ldr	r3, [r3, #8]
   1fc04:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1fc06:	69fb      	ldr	r3, [r7, #28]
   1fc08:	695b      	ldr	r3, [r3, #20]
   1fc0a:	2b00      	cmp	r3, #0
   1fc0c:	d004      	beq.n	1fc18 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fc0e:	69fb      	ldr	r3, [r7, #28]
   1fc10:	3304      	adds	r3, #4
   1fc12:	0018      	movs	r0, r3
   1fc14:	4b33      	ldr	r3, [pc, #204]	; (1fce4 <prvProcessReceivedCommands+0xf8>)
   1fc16:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1fc18:	1d3b      	adds	r3, r7, #4
   1fc1a:	0018      	movs	r0, r3
   1fc1c:	4b32      	ldr	r3, [pc, #200]	; (1fce8 <prvProcessReceivedCommands+0xfc>)
   1fc1e:	4798      	blx	r3
   1fc20:	0003      	movs	r3, r0
   1fc22:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1fc24:	2308      	movs	r3, #8
   1fc26:	18fb      	adds	r3, r7, r3
   1fc28:	681b      	ldr	r3, [r3, #0]
   1fc2a:	2b09      	cmp	r3, #9
   1fc2c:	d84a      	bhi.n	1fcc4 <prvProcessReceivedCommands+0xd8>
   1fc2e:	009a      	lsls	r2, r3, #2
   1fc30:	4b2e      	ldr	r3, [pc, #184]	; (1fcec <prvProcessReceivedCommands+0x100>)
   1fc32:	18d3      	adds	r3, r2, r3
   1fc34:	681b      	ldr	r3, [r3, #0]
   1fc36:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1fc38:	2308      	movs	r3, #8
   1fc3a:	18fb      	adds	r3, r7, r3
   1fc3c:	685a      	ldr	r2, [r3, #4]
   1fc3e:	69fb      	ldr	r3, [r7, #28]
   1fc40:	699b      	ldr	r3, [r3, #24]
   1fc42:	18d1      	adds	r1, r2, r3
   1fc44:	2308      	movs	r3, #8
   1fc46:	18fb      	adds	r3, r7, r3
   1fc48:	685b      	ldr	r3, [r3, #4]
   1fc4a:	69ba      	ldr	r2, [r7, #24]
   1fc4c:	69f8      	ldr	r0, [r7, #28]
   1fc4e:	4c28      	ldr	r4, [pc, #160]	; (1fcf0 <prvProcessReceivedCommands+0x104>)
   1fc50:	47a0      	blx	r4
   1fc52:	1e03      	subs	r3, r0, #0
   1fc54:	d037      	beq.n	1fcc6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fc56:	69fb      	ldr	r3, [r7, #28]
   1fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc5a:	69fa      	ldr	r2, [r7, #28]
   1fc5c:	0010      	movs	r0, r2
   1fc5e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fc60:	69fb      	ldr	r3, [r7, #28]
   1fc62:	69db      	ldr	r3, [r3, #28]
   1fc64:	2b01      	cmp	r3, #1
   1fc66:	d12e      	bne.n	1fcc6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1fc68:	2308      	movs	r3, #8
   1fc6a:	18fb      	adds	r3, r7, r3
   1fc6c:	685a      	ldr	r2, [r3, #4]
   1fc6e:	69fb      	ldr	r3, [r7, #28]
   1fc70:	699b      	ldr	r3, [r3, #24]
   1fc72:	18d2      	adds	r2, r2, r3
   1fc74:	69f8      	ldr	r0, [r7, #28]
   1fc76:	2300      	movs	r3, #0
   1fc78:	9300      	str	r3, [sp, #0]
   1fc7a:	2300      	movs	r3, #0
   1fc7c:	2100      	movs	r1, #0
   1fc7e:	4c1d      	ldr	r4, [pc, #116]	; (1fcf4 <prvProcessReceivedCommands+0x108>)
   1fc80:	47a0      	blx	r4
   1fc82:	0003      	movs	r3, r0
   1fc84:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1fc86:	697b      	ldr	r3, [r7, #20]
   1fc88:	2b00      	cmp	r3, #0
   1fc8a:	d11c      	bne.n	1fcc6 <prvProcessReceivedCommands+0xda>
   1fc8c:	b672      	cpsid	i
   1fc8e:	e7fe      	b.n	1fc8e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1fc90:	2308      	movs	r3, #8
   1fc92:	18fb      	adds	r3, r7, r3
   1fc94:	685a      	ldr	r2, [r3, #4]
   1fc96:	69fb      	ldr	r3, [r7, #28]
   1fc98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1fc9a:	69fb      	ldr	r3, [r7, #28]
   1fc9c:	699b      	ldr	r3, [r3, #24]
   1fc9e:	2b00      	cmp	r3, #0
   1fca0:	d101      	bne.n	1fca6 <prvProcessReceivedCommands+0xba>
   1fca2:	b672      	cpsid	i
   1fca4:	e7fe      	b.n	1fca4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1fca6:	69fb      	ldr	r3, [r7, #28]
   1fca8:	699a      	ldr	r2, [r3, #24]
   1fcaa:	69bb      	ldr	r3, [r7, #24]
   1fcac:	18d1      	adds	r1, r2, r3
   1fcae:	69bb      	ldr	r3, [r7, #24]
   1fcb0:	69ba      	ldr	r2, [r7, #24]
   1fcb2:	69f8      	ldr	r0, [r7, #28]
   1fcb4:	4c0e      	ldr	r4, [pc, #56]	; (1fcf0 <prvProcessReceivedCommands+0x104>)
   1fcb6:	47a0      	blx	r4
					break;
   1fcb8:	e005      	b.n	1fcc6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1fcba:	69fb      	ldr	r3, [r7, #28]
   1fcbc:	0018      	movs	r0, r3
   1fcbe:	4b0e      	ldr	r3, [pc, #56]	; (1fcf8 <prvProcessReceivedCommands+0x10c>)
   1fcc0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1fcc2:	e000      	b.n	1fcc6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1fcc4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1fcc6:	4b0d      	ldr	r3, [pc, #52]	; (1fcfc <prvProcessReceivedCommands+0x110>)
   1fcc8:	681b      	ldr	r3, [r3, #0]
   1fcca:	2208      	movs	r2, #8
   1fccc:	18b9      	adds	r1, r7, r2
   1fcce:	2200      	movs	r2, #0
   1fcd0:	0018      	movs	r0, r3
   1fcd2:	4b0b      	ldr	r3, [pc, #44]	; (1fd00 <prvProcessReceivedCommands+0x114>)
   1fcd4:	4798      	blx	r3
   1fcd6:	1e03      	subs	r3, r0, #0
   1fcd8:	d18c      	bne.n	1fbf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1fcda:	46c0      	nop			; (mov r8, r8)
   1fcdc:	46bd      	mov	sp, r7
   1fcde:	b009      	add	sp, #36	; 0x24
   1fce0:	bd90      	pop	{r4, r7, pc}
   1fce2:	46c0      	nop			; (mov r8, r8)
   1fce4:	0001c42b 	.word	0x0001c42b
   1fce8:	0001fb1d 	.word	0x0001fb1d
   1fcec:	0003b560 	.word	0x0003b560
   1fcf0:	0001fb65 	.word	0x0001fb65
   1fcf4:	0001f8d9 	.word	0x0001f8d9
   1fcf8:	0001c7b5 	.word	0x0001c7b5
   1fcfc:	200040b4 	.word	0x200040b4
   1fd00:	0001d405 	.word	0x0001d405

0001fd04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1fd04:	b590      	push	{r4, r7, lr}
   1fd06:	b089      	sub	sp, #36	; 0x24
   1fd08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1fd0a:	e03e      	b.n	1fd8a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fd0c:	4b28      	ldr	r3, [pc, #160]	; (1fdb0 <prvSwitchTimerLists+0xac>)
   1fd0e:	681b      	ldr	r3, [r3, #0]
   1fd10:	68db      	ldr	r3, [r3, #12]
   1fd12:	681b      	ldr	r3, [r3, #0]
   1fd14:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fd16:	4b26      	ldr	r3, [pc, #152]	; (1fdb0 <prvSwitchTimerLists+0xac>)
   1fd18:	681b      	ldr	r3, [r3, #0]
   1fd1a:	68db      	ldr	r3, [r3, #12]
   1fd1c:	68db      	ldr	r3, [r3, #12]
   1fd1e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fd20:	693b      	ldr	r3, [r7, #16]
   1fd22:	3304      	adds	r3, #4
   1fd24:	0018      	movs	r0, r3
   1fd26:	4b23      	ldr	r3, [pc, #140]	; (1fdb4 <prvSwitchTimerLists+0xb0>)
   1fd28:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fd2a:	693b      	ldr	r3, [r7, #16]
   1fd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fd2e:	693a      	ldr	r2, [r7, #16]
   1fd30:	0010      	movs	r0, r2
   1fd32:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fd34:	693b      	ldr	r3, [r7, #16]
   1fd36:	69db      	ldr	r3, [r3, #28]
   1fd38:	2b01      	cmp	r3, #1
   1fd3a:	d126      	bne.n	1fd8a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1fd3c:	693b      	ldr	r3, [r7, #16]
   1fd3e:	699a      	ldr	r2, [r3, #24]
   1fd40:	697b      	ldr	r3, [r7, #20]
   1fd42:	18d3      	adds	r3, r2, r3
   1fd44:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1fd46:	68fa      	ldr	r2, [r7, #12]
   1fd48:	697b      	ldr	r3, [r7, #20]
   1fd4a:	429a      	cmp	r2, r3
   1fd4c:	d90e      	bls.n	1fd6c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1fd4e:	693b      	ldr	r3, [r7, #16]
   1fd50:	68fa      	ldr	r2, [r7, #12]
   1fd52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1fd54:	693b      	ldr	r3, [r7, #16]
   1fd56:	693a      	ldr	r2, [r7, #16]
   1fd58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1fd5a:	4b15      	ldr	r3, [pc, #84]	; (1fdb0 <prvSwitchTimerLists+0xac>)
   1fd5c:	681a      	ldr	r2, [r3, #0]
   1fd5e:	693b      	ldr	r3, [r7, #16]
   1fd60:	3304      	adds	r3, #4
   1fd62:	0019      	movs	r1, r3
   1fd64:	0010      	movs	r0, r2
   1fd66:	4b14      	ldr	r3, [pc, #80]	; (1fdb8 <prvSwitchTimerLists+0xb4>)
   1fd68:	4798      	blx	r3
   1fd6a:	e00e      	b.n	1fd8a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1fd6c:	697a      	ldr	r2, [r7, #20]
   1fd6e:	6938      	ldr	r0, [r7, #16]
   1fd70:	2300      	movs	r3, #0
   1fd72:	9300      	str	r3, [sp, #0]
   1fd74:	2300      	movs	r3, #0
   1fd76:	2100      	movs	r1, #0
   1fd78:	4c10      	ldr	r4, [pc, #64]	; (1fdbc <prvSwitchTimerLists+0xb8>)
   1fd7a:	47a0      	blx	r4
   1fd7c:	0003      	movs	r3, r0
   1fd7e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1fd80:	68bb      	ldr	r3, [r7, #8]
   1fd82:	2b00      	cmp	r3, #0
   1fd84:	d101      	bne.n	1fd8a <prvSwitchTimerLists+0x86>
   1fd86:	b672      	cpsid	i
   1fd88:	e7fe      	b.n	1fd88 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1fd8a:	4b09      	ldr	r3, [pc, #36]	; (1fdb0 <prvSwitchTimerLists+0xac>)
   1fd8c:	681b      	ldr	r3, [r3, #0]
   1fd8e:	681b      	ldr	r3, [r3, #0]
   1fd90:	2b00      	cmp	r3, #0
   1fd92:	d1bb      	bne.n	1fd0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1fd94:	4b06      	ldr	r3, [pc, #24]	; (1fdb0 <prvSwitchTimerLists+0xac>)
   1fd96:	681b      	ldr	r3, [r3, #0]
   1fd98:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1fd9a:	4b09      	ldr	r3, [pc, #36]	; (1fdc0 <prvSwitchTimerLists+0xbc>)
   1fd9c:	681a      	ldr	r2, [r3, #0]
   1fd9e:	4b04      	ldr	r3, [pc, #16]	; (1fdb0 <prvSwitchTimerLists+0xac>)
   1fda0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1fda2:	4b07      	ldr	r3, [pc, #28]	; (1fdc0 <prvSwitchTimerLists+0xbc>)
   1fda4:	687a      	ldr	r2, [r7, #4]
   1fda6:	601a      	str	r2, [r3, #0]
}
   1fda8:	46c0      	nop			; (mov r8, r8)
   1fdaa:	46bd      	mov	sp, r7
   1fdac:	b007      	add	sp, #28
   1fdae:	bd90      	pop	{r4, r7, pc}
   1fdb0:	200040ac 	.word	0x200040ac
   1fdb4:	0001c42b 	.word	0x0001c42b
   1fdb8:	0001c3bf 	.word	0x0001c3bf
   1fdbc:	0001f8d9 	.word	0x0001f8d9
   1fdc0:	200040b0 	.word	0x200040b0

0001fdc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1fdc4:	b580      	push	{r7, lr}
   1fdc6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1fdc8:	4b10      	ldr	r3, [pc, #64]	; (1fe0c <prvCheckForValidListAndQueue+0x48>)
   1fdca:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1fdcc:	4b10      	ldr	r3, [pc, #64]	; (1fe10 <prvCheckForValidListAndQueue+0x4c>)
   1fdce:	681b      	ldr	r3, [r3, #0]
   1fdd0:	2b00      	cmp	r3, #0
   1fdd2:	d115      	bne.n	1fe00 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1fdd4:	4b0f      	ldr	r3, [pc, #60]	; (1fe14 <prvCheckForValidListAndQueue+0x50>)
   1fdd6:	0018      	movs	r0, r3
   1fdd8:	4b0f      	ldr	r3, [pc, #60]	; (1fe18 <prvCheckForValidListAndQueue+0x54>)
   1fdda:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1fddc:	4b0f      	ldr	r3, [pc, #60]	; (1fe1c <prvCheckForValidListAndQueue+0x58>)
   1fdde:	0018      	movs	r0, r3
   1fde0:	4b0d      	ldr	r3, [pc, #52]	; (1fe18 <prvCheckForValidListAndQueue+0x54>)
   1fde2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1fde4:	4b0e      	ldr	r3, [pc, #56]	; (1fe20 <prvCheckForValidListAndQueue+0x5c>)
   1fde6:	4a0b      	ldr	r2, [pc, #44]	; (1fe14 <prvCheckForValidListAndQueue+0x50>)
   1fde8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1fdea:	4b0e      	ldr	r3, [pc, #56]	; (1fe24 <prvCheckForValidListAndQueue+0x60>)
   1fdec:	4a0b      	ldr	r2, [pc, #44]	; (1fe1c <prvCheckForValidListAndQueue+0x58>)
   1fdee:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1fdf0:	2200      	movs	r2, #0
   1fdf2:	210c      	movs	r1, #12
   1fdf4:	2005      	movs	r0, #5
   1fdf6:	4b0c      	ldr	r3, [pc, #48]	; (1fe28 <prvCheckForValidListAndQueue+0x64>)
   1fdf8:	4798      	blx	r3
   1fdfa:	0002      	movs	r2, r0
   1fdfc:	4b04      	ldr	r3, [pc, #16]	; (1fe10 <prvCheckForValidListAndQueue+0x4c>)
   1fdfe:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1fe00:	4b0a      	ldr	r3, [pc, #40]	; (1fe2c <prvCheckForValidListAndQueue+0x68>)
   1fe02:	4798      	blx	r3
}
   1fe04:	46c0      	nop			; (mov r8, r8)
   1fe06:	46bd      	mov	sp, r7
   1fe08:	bd80      	pop	{r7, pc}
   1fe0a:	46c0      	nop			; (mov r8, r8)
   1fe0c:	0001c5b9 	.word	0x0001c5b9
   1fe10:	200040b4 	.word	0x200040b4
   1fe14:	20004084 	.word	0x20004084
   1fe18:	0001c329 	.word	0x0001c329
   1fe1c:	20004098 	.word	0x20004098
   1fe20:	200040ac 	.word	0x200040ac
   1fe24:	200040b0 	.word	0x200040b0
   1fe28:	0001c8a5 	.word	0x0001c8a5
   1fe2c:	0001c5dd 	.word	0x0001c5dd

0001fe30 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1fe30:	b580      	push	{r7, lr}
   1fe32:	b082      	sub	sp, #8
   1fe34:	af00      	add	r7, sp, #0
   1fe36:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1fe38:	687b      	ldr	r3, [r7, #4]
   1fe3a:	7c1b      	ldrb	r3, [r3, #16]
   1fe3c:	2b00      	cmp	r3, #0
   1fe3e:	d00b      	beq.n	1fe58 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fe40:	687b      	ldr	r3, [r7, #4]
   1fe42:	689b      	ldr	r3, [r3, #8]
   1fe44:	1c5a      	adds	r2, r3, #1
   1fe46:	687b      	ldr	r3, [r7, #4]
   1fe48:	68d9      	ldr	r1, [r3, #12]
   1fe4a:	4b10      	ldr	r3, [pc, #64]	; (1fe8c <advance_pointer+0x5c>)
   1fe4c:	0010      	movs	r0, r2
   1fe4e:	4798      	blx	r3
   1fe50:	000b      	movs	r3, r1
   1fe52:	001a      	movs	r2, r3
   1fe54:	687b      	ldr	r3, [r7, #4]
   1fe56:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1fe58:	687b      	ldr	r3, [r7, #4]
   1fe5a:	685b      	ldr	r3, [r3, #4]
   1fe5c:	1c5a      	adds	r2, r3, #1
   1fe5e:	687b      	ldr	r3, [r7, #4]
   1fe60:	68d9      	ldr	r1, [r3, #12]
   1fe62:	4b0a      	ldr	r3, [pc, #40]	; (1fe8c <advance_pointer+0x5c>)
   1fe64:	0010      	movs	r0, r2
   1fe66:	4798      	blx	r3
   1fe68:	000b      	movs	r3, r1
   1fe6a:	001a      	movs	r2, r3
   1fe6c:	687b      	ldr	r3, [r7, #4]
   1fe6e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1fe70:	687b      	ldr	r3, [r7, #4]
   1fe72:	685a      	ldr	r2, [r3, #4]
   1fe74:	687b      	ldr	r3, [r7, #4]
   1fe76:	689b      	ldr	r3, [r3, #8]
   1fe78:	1ad3      	subs	r3, r2, r3
   1fe7a:	425a      	negs	r2, r3
   1fe7c:	4153      	adcs	r3, r2
   1fe7e:	b2da      	uxtb	r2, r3
   1fe80:	687b      	ldr	r3, [r7, #4]
   1fe82:	741a      	strb	r2, [r3, #16]
 }
   1fe84:	46c0      	nop			; (mov r8, r8)
   1fe86:	46bd      	mov	sp, r7
   1fe88:	b002      	add	sp, #8
   1fe8a:	bd80      	pop	{r7, pc}
   1fe8c:	00034f41 	.word	0x00034f41

0001fe90 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1fe90:	b580      	push	{r7, lr}
   1fe92:	b082      	sub	sp, #8
   1fe94:	af00      	add	r7, sp, #0
   1fe96:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1fe98:	687b      	ldr	r3, [r7, #4]
   1fe9a:	2200      	movs	r2, #0
   1fe9c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fe9e:	687b      	ldr	r3, [r7, #4]
   1fea0:	689b      	ldr	r3, [r3, #8]
   1fea2:	1c5a      	adds	r2, r3, #1
   1fea4:	687b      	ldr	r3, [r7, #4]
   1fea6:	68d9      	ldr	r1, [r3, #12]
   1fea8:	4b05      	ldr	r3, [pc, #20]	; (1fec0 <retreat_pointer+0x30>)
   1feaa:	0010      	movs	r0, r2
   1feac:	4798      	blx	r3
   1feae:	000b      	movs	r3, r1
   1feb0:	001a      	movs	r2, r3
   1feb2:	687b      	ldr	r3, [r7, #4]
   1feb4:	609a      	str	r2, [r3, #8]
 }
   1feb6:	46c0      	nop			; (mov r8, r8)
   1feb8:	46bd      	mov	sp, r7
   1feba:	b002      	add	sp, #8
   1febc:	bd80      	pop	{r7, pc}
   1febe:	46c0      	nop			; (mov r8, r8)
   1fec0:	00034f41 	.word	0x00034f41

0001fec4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1fec4:	b580      	push	{r7, lr}
   1fec6:	b084      	sub	sp, #16
   1fec8:	af00      	add	r7, sp, #0
   1feca:	6078      	str	r0, [r7, #4]
   1fecc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1fece:	2014      	movs	r0, #20
   1fed0:	4b09      	ldr	r3, [pc, #36]	; (1fef8 <circular_buf_init+0x34>)
   1fed2:	4798      	blx	r3
   1fed4:	0003      	movs	r3, r0
   1fed6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1fed8:	68fb      	ldr	r3, [r7, #12]
   1feda:	687a      	ldr	r2, [r7, #4]
   1fedc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1fede:	68fb      	ldr	r3, [r7, #12]
   1fee0:	683a      	ldr	r2, [r7, #0]
   1fee2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1fee4:	68fb      	ldr	r3, [r7, #12]
   1fee6:	0018      	movs	r0, r3
   1fee8:	4b04      	ldr	r3, [pc, #16]	; (1fefc <circular_buf_init+0x38>)
   1feea:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1feec:	68fb      	ldr	r3, [r7, #12]
 }
   1feee:	0018      	movs	r0, r3
   1fef0:	46bd      	mov	sp, r7
   1fef2:	b004      	add	sp, #16
   1fef4:	bd80      	pop	{r7, pc}
   1fef6:	46c0      	nop			; (mov r8, r8)
   1fef8:	0003790d 	.word	0x0003790d
   1fefc:	0001ff01 	.word	0x0001ff01

0001ff00 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1ff00:	b580      	push	{r7, lr}
   1ff02:	b082      	sub	sp, #8
   1ff04:	af00      	add	r7, sp, #0
   1ff06:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1ff08:	687b      	ldr	r3, [r7, #4]
   1ff0a:	2200      	movs	r2, #0
   1ff0c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1ff0e:	687b      	ldr	r3, [r7, #4]
   1ff10:	2200      	movs	r2, #0
   1ff12:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1ff14:	687b      	ldr	r3, [r7, #4]
   1ff16:	2200      	movs	r2, #0
   1ff18:	741a      	strb	r2, [r3, #16]
 }
   1ff1a:	46c0      	nop			; (mov r8, r8)
   1ff1c:	46bd      	mov	sp, r7
   1ff1e:	b002      	add	sp, #8
   1ff20:	bd80      	pop	{r7, pc}
	...

0001ff24 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1ff24:	b580      	push	{r7, lr}
   1ff26:	b082      	sub	sp, #8
   1ff28:	af00      	add	r7, sp, #0
   1ff2a:	6078      	str	r0, [r7, #4]
   1ff2c:	000a      	movs	r2, r1
   1ff2e:	1cfb      	adds	r3, r7, #3
   1ff30:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1ff32:	687b      	ldr	r3, [r7, #4]
   1ff34:	681a      	ldr	r2, [r3, #0]
   1ff36:	687b      	ldr	r3, [r7, #4]
   1ff38:	685b      	ldr	r3, [r3, #4]
   1ff3a:	18d3      	adds	r3, r2, r3
   1ff3c:	1cfa      	adds	r2, r7, #3
   1ff3e:	7812      	ldrb	r2, [r2, #0]
   1ff40:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1ff42:	687b      	ldr	r3, [r7, #4]
   1ff44:	0018      	movs	r0, r3
   1ff46:	4b03      	ldr	r3, [pc, #12]	; (1ff54 <circular_buf_put+0x30>)
   1ff48:	4798      	blx	r3
 }
   1ff4a:	46c0      	nop			; (mov r8, r8)
   1ff4c:	46bd      	mov	sp, r7
   1ff4e:	b002      	add	sp, #8
   1ff50:	bd80      	pop	{r7, pc}
   1ff52:	46c0      	nop			; (mov r8, r8)
   1ff54:	0001fe31 	.word	0x0001fe31

0001ff58 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1ff58:	b580      	push	{r7, lr}
   1ff5a:	b084      	sub	sp, #16
   1ff5c:	af00      	add	r7, sp, #0
   1ff5e:	6078      	str	r0, [r7, #4]
   1ff60:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1ff62:	2301      	movs	r3, #1
   1ff64:	425b      	negs	r3, r3
   1ff66:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1ff68:	687b      	ldr	r3, [r7, #4]
   1ff6a:	0018      	movs	r0, r3
   1ff6c:	4b0d      	ldr	r3, [pc, #52]	; (1ffa4 <circular_buf_get+0x4c>)
   1ff6e:	4798      	blx	r3
   1ff70:	0003      	movs	r3, r0
   1ff72:	001a      	movs	r2, r3
   1ff74:	2301      	movs	r3, #1
   1ff76:	4053      	eors	r3, r2
   1ff78:	b2db      	uxtb	r3, r3
   1ff7a:	2b00      	cmp	r3, #0
   1ff7c:	d00d      	beq.n	1ff9a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1ff7e:	687b      	ldr	r3, [r7, #4]
   1ff80:	681a      	ldr	r2, [r3, #0]
   1ff82:	687b      	ldr	r3, [r7, #4]
   1ff84:	689b      	ldr	r3, [r3, #8]
   1ff86:	18d3      	adds	r3, r2, r3
   1ff88:	781a      	ldrb	r2, [r3, #0]
   1ff8a:	683b      	ldr	r3, [r7, #0]
   1ff8c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1ff8e:	687b      	ldr	r3, [r7, #4]
   1ff90:	0018      	movs	r0, r3
   1ff92:	4b05      	ldr	r3, [pc, #20]	; (1ffa8 <circular_buf_get+0x50>)
   1ff94:	4798      	blx	r3

		 r = 0;
   1ff96:	2300      	movs	r3, #0
   1ff98:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1ff9a:	68fb      	ldr	r3, [r7, #12]
 }
   1ff9c:	0018      	movs	r0, r3
   1ff9e:	46bd      	mov	sp, r7
   1ffa0:	b004      	add	sp, #16
   1ffa2:	bd80      	pop	{r7, pc}
   1ffa4:	0001ffad 	.word	0x0001ffad
   1ffa8:	0001fe91 	.word	0x0001fe91

0001ffac <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1ffac:	b580      	push	{r7, lr}
   1ffae:	b082      	sub	sp, #8
   1ffb0:	af00      	add	r7, sp, #0
   1ffb2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1ffb4:	687b      	ldr	r3, [r7, #4]
   1ffb6:	7c1b      	ldrb	r3, [r3, #16]
   1ffb8:	2201      	movs	r2, #1
   1ffba:	4053      	eors	r3, r2
   1ffbc:	b2db      	uxtb	r3, r3
   1ffbe:	2b00      	cmp	r3, #0
   1ffc0:	d007      	beq.n	1ffd2 <circular_buf_empty+0x26>
   1ffc2:	687b      	ldr	r3, [r7, #4]
   1ffc4:	685a      	ldr	r2, [r3, #4]
   1ffc6:	687b      	ldr	r3, [r7, #4]
   1ffc8:	689b      	ldr	r3, [r3, #8]
   1ffca:	429a      	cmp	r2, r3
   1ffcc:	d101      	bne.n	1ffd2 <circular_buf_empty+0x26>
   1ffce:	2301      	movs	r3, #1
   1ffd0:	e000      	b.n	1ffd4 <circular_buf_empty+0x28>
   1ffd2:	2300      	movs	r3, #0
   1ffd4:	1c1a      	adds	r2, r3, #0
   1ffd6:	2301      	movs	r3, #1
   1ffd8:	4013      	ands	r3, r2
   1ffda:	b2db      	uxtb	r3, r3
 }
   1ffdc:	0018      	movs	r0, r3
   1ffde:	46bd      	mov	sp, r7
   1ffe0:	b002      	add	sp, #8
   1ffe2:	bd80      	pop	{r7, pc}

0001ffe4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1ffe4:	b580      	push	{r7, lr}
   1ffe6:	b082      	sub	sp, #8
   1ffe8:	af00      	add	r7, sp, #0
   1ffea:	0002      	movs	r2, r0
   1ffec:	1dfb      	adds	r3, r7, #7
   1ffee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fff0:	4b06      	ldr	r3, [pc, #24]	; (2000c <system_interrupt_enable+0x28>)
   1fff2:	1dfa      	adds	r2, r7, #7
   1fff4:	7812      	ldrb	r2, [r2, #0]
   1fff6:	0011      	movs	r1, r2
   1fff8:	221f      	movs	r2, #31
   1fffa:	400a      	ands	r2, r1
   1fffc:	2101      	movs	r1, #1
   1fffe:	4091      	lsls	r1, r2
   20000:	000a      	movs	r2, r1
   20002:	601a      	str	r2, [r3, #0]
}
   20004:	46c0      	nop			; (mov r8, r8)
   20006:	46bd      	mov	sp, r7
   20008:	b002      	add	sp, #8
   2000a:	bd80      	pop	{r7, pc}
   2000c:	e000e100 	.word	0xe000e100

00020010 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   20010:	b580      	push	{r7, lr}
   20012:	b084      	sub	sp, #16
   20014:	af00      	add	r7, sp, #0
   20016:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   20018:	687b      	ldr	r3, [r7, #4]
   2001a:	681b      	ldr	r3, [r3, #0]
   2001c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2001e:	68fb      	ldr	r3, [r7, #12]
   20020:	69db      	ldr	r3, [r3, #28]
   20022:	1e5a      	subs	r2, r3, #1
   20024:	4193      	sbcs	r3, r2
   20026:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   20028:	0018      	movs	r0, r3
   2002a:	46bd      	mov	sp, r7
   2002c:	b004      	add	sp, #16
   2002e:	bd80      	pop	{r7, pc}

00020030 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   20030:	b580      	push	{r7, lr}
   20032:	b082      	sub	sp, #8
   20034:	af00      	add	r7, sp, #0
   20036:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   20038:	46c0      	nop			; (mov r8, r8)
   2003a:	687b      	ldr	r3, [r7, #4]
   2003c:	0018      	movs	r0, r3
   2003e:	4b04      	ldr	r3, [pc, #16]	; (20050 <_usart_wait_for_sync+0x20>)
   20040:	4798      	blx	r3
   20042:	1e03      	subs	r3, r0, #0
   20044:	d1f9      	bne.n	2003a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   20046:	46c0      	nop			; (mov r8, r8)
   20048:	46bd      	mov	sp, r7
   2004a:	b002      	add	sp, #8
   2004c:	bd80      	pop	{r7, pc}
   2004e:	46c0      	nop			; (mov r8, r8)
   20050:	00020011 	.word	0x00020011

00020054 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   20054:	b580      	push	{r7, lr}
   20056:	b082      	sub	sp, #8
   20058:	af00      	add	r7, sp, #0
   2005a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   2005c:	687b      	ldr	r3, [r7, #4]
   2005e:	2280      	movs	r2, #128	; 0x80
   20060:	05d2      	lsls	r2, r2, #23
   20062:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   20064:	687b      	ldr	r3, [r7, #4]
   20066:	2200      	movs	r2, #0
   20068:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   2006a:	687b      	ldr	r3, [r7, #4]
   2006c:	22ff      	movs	r2, #255	; 0xff
   2006e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   20070:	687b      	ldr	r3, [r7, #4]
   20072:	2200      	movs	r2, #0
   20074:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   20076:	687b      	ldr	r3, [r7, #4]
   20078:	2200      	movs	r2, #0
   2007a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   2007c:	687b      	ldr	r3, [r7, #4]
   2007e:	2296      	movs	r2, #150	; 0x96
   20080:	0192      	lsls	r2, r2, #6
   20082:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   20084:	687b      	ldr	r3, [r7, #4]
   20086:	2224      	movs	r2, #36	; 0x24
   20088:	2101      	movs	r1, #1
   2008a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   2008c:	687b      	ldr	r3, [r7, #4]
   2008e:	2225      	movs	r2, #37	; 0x25
   20090:	2101      	movs	r1, #1
   20092:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   20094:	687b      	ldr	r3, [r7, #4]
   20096:	2226      	movs	r2, #38	; 0x26
   20098:	2100      	movs	r1, #0
   2009a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   2009c:	687b      	ldr	r3, [r7, #4]
   2009e:	2227      	movs	r2, #39	; 0x27
   200a0:	2100      	movs	r1, #0
   200a2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   200a4:	687b      	ldr	r3, [r7, #4]
   200a6:	2200      	movs	r2, #0
   200a8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   200aa:	687b      	ldr	r3, [r7, #4]
   200ac:	2288      	movs	r2, #136	; 0x88
   200ae:	0352      	lsls	r2, r2, #13
   200b0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   200b2:	687b      	ldr	r3, [r7, #4]
   200b4:	222c      	movs	r2, #44	; 0x2c
   200b6:	2100      	movs	r1, #0
   200b8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   200ba:	687b      	ldr	r3, [r7, #4]
   200bc:	222d      	movs	r2, #45	; 0x2d
   200be:	2100      	movs	r1, #0
   200c0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   200c2:	687b      	ldr	r3, [r7, #4]
   200c4:	2200      	movs	r2, #0
   200c6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   200c8:	687b      	ldr	r3, [r7, #4]
   200ca:	2200      	movs	r2, #0
   200cc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   200ce:	687b      	ldr	r3, [r7, #4]
   200d0:	2200      	movs	r2, #0
   200d2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   200d4:	687b      	ldr	r3, [r7, #4]
   200d6:	2200      	movs	r2, #0
   200d8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   200da:	687b      	ldr	r3, [r7, #4]
   200dc:	2200      	movs	r2, #0
   200de:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   200e0:	687b      	ldr	r3, [r7, #4]
   200e2:	2200      	movs	r2, #0
   200e4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   200e6:	687b      	ldr	r3, [r7, #4]
   200e8:	2200      	movs	r2, #0
   200ea:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   200ec:	687b      	ldr	r3, [r7, #4]
   200ee:	2200      	movs	r2, #0
   200f0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   200f2:	687b      	ldr	r3, [r7, #4]
   200f4:	2200      	movs	r2, #0
   200f6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   200f8:	687b      	ldr	r3, [r7, #4]
   200fa:	2200      	movs	r2, #0
   200fc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   200fe:	687b      	ldr	r3, [r7, #4]
   20100:	2213      	movs	r2, #19
   20102:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   20104:	687b      	ldr	r3, [r7, #4]
   20106:	2200      	movs	r2, #0
   20108:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   2010a:	46c0      	nop			; (mov r8, r8)
   2010c:	46bd      	mov	sp, r7
   2010e:	b002      	add	sp, #8
   20110:	bd80      	pop	{r7, pc}
	...

00020114 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   20114:	b580      	push	{r7, lr}
   20116:	b084      	sub	sp, #16
   20118:	af00      	add	r7, sp, #0
   2011a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2011c:	687b      	ldr	r3, [r7, #4]
   2011e:	681b      	ldr	r3, [r3, #0]
   20120:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20122:	687b      	ldr	r3, [r7, #4]
   20124:	681b      	ldr	r3, [r3, #0]
   20126:	0018      	movs	r0, r3
   20128:	4b09      	ldr	r3, [pc, #36]	; (20150 <usart_enable+0x3c>)
   2012a:	4798      	blx	r3
   2012c:	0003      	movs	r3, r0
   2012e:	0018      	movs	r0, r3
   20130:	4b08      	ldr	r3, [pc, #32]	; (20154 <usart_enable+0x40>)
   20132:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   20134:	687b      	ldr	r3, [r7, #4]
   20136:	0018      	movs	r0, r3
   20138:	4b07      	ldr	r3, [pc, #28]	; (20158 <usart_enable+0x44>)
   2013a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   2013c:	68fb      	ldr	r3, [r7, #12]
   2013e:	681b      	ldr	r3, [r3, #0]
   20140:	2202      	movs	r2, #2
   20142:	431a      	orrs	r2, r3
   20144:	68fb      	ldr	r3, [r7, #12]
   20146:	601a      	str	r2, [r3, #0]
}
   20148:	46c0      	nop			; (mov r8, r8)
   2014a:	46bd      	mov	sp, r7
   2014c:	b004      	add	sp, #16
   2014e:	bd80      	pop	{r7, pc}
   20150:	00029aa5 	.word	0x00029aa5
   20154:	0001ffe5 	.word	0x0001ffe5
   20158:	00020031 	.word	0x00020031

0002015c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   2015c:	b580      	push	{r7, lr}
   2015e:	b082      	sub	sp, #8
   20160:	af00      	add	r7, sp, #0
   20162:	6078      	str	r0, [r7, #4]
   20164:	000a      	movs	r2, r1
   20166:	1cfb      	adds	r3, r7, #3
   20168:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   2016a:	687b      	ldr	r3, [r7, #4]
   2016c:	2231      	movs	r2, #49	; 0x31
   2016e:	5c9b      	ldrb	r3, [r3, r2]
   20170:	b25a      	sxtb	r2, r3
   20172:	1cfb      	adds	r3, r7, #3
   20174:	781b      	ldrb	r3, [r3, #0]
   20176:	2101      	movs	r1, #1
   20178:	4099      	lsls	r1, r3
   2017a:	000b      	movs	r3, r1
   2017c:	b25b      	sxtb	r3, r3
   2017e:	4313      	orrs	r3, r2
   20180:	b25b      	sxtb	r3, r3
   20182:	b2d9      	uxtb	r1, r3
   20184:	687b      	ldr	r3, [r7, #4]
   20186:	2231      	movs	r2, #49	; 0x31
   20188:	5499      	strb	r1, [r3, r2]

}
   2018a:	46c0      	nop			; (mov r8, r8)
   2018c:	46bd      	mov	sp, r7
   2018e:	b002      	add	sp, #8
   20190:	bd80      	pop	{r7, pc}
	...

00020194 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   20194:	b580      	push	{r7, lr}
   20196:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   20198:	2380      	movs	r3, #128	; 0x80
   2019a:	009a      	lsls	r2, r3, #2
   2019c:	4b0f      	ldr	r3, [pc, #60]	; (201dc <InitializeSerialConsole+0x48>)
   2019e:	0011      	movs	r1, r2
   201a0:	0018      	movs	r0, r3
   201a2:	4b0f      	ldr	r3, [pc, #60]	; (201e0 <InitializeSerialConsole+0x4c>)
   201a4:	4798      	blx	r3
   201a6:	0002      	movs	r2, r0
   201a8:	4b0e      	ldr	r3, [pc, #56]	; (201e4 <InitializeSerialConsole+0x50>)
   201aa:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   201ac:	2380      	movs	r3, #128	; 0x80
   201ae:	009a      	lsls	r2, r3, #2
   201b0:	4b0d      	ldr	r3, [pc, #52]	; (201e8 <InitializeSerialConsole+0x54>)
   201b2:	0011      	movs	r1, r2
   201b4:	0018      	movs	r0, r3
   201b6:	4b0a      	ldr	r3, [pc, #40]	; (201e0 <InitializeSerialConsole+0x4c>)
   201b8:	4798      	blx	r3
   201ba:	0002      	movs	r2, r0
   201bc:	4b0b      	ldr	r3, [pc, #44]	; (201ec <InitializeSerialConsole+0x58>)
   201be:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   201c0:	4b0b      	ldr	r3, [pc, #44]	; (201f0 <InitializeSerialConsole+0x5c>)
   201c2:	4798      	blx	r3
    configure_usart_callbacks();
   201c4:	4b0b      	ldr	r3, [pc, #44]	; (201f4 <InitializeSerialConsole+0x60>)
   201c6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   201c8:	490b      	ldr	r1, [pc, #44]	; (201f8 <InitializeSerialConsole+0x64>)
   201ca:	4b0c      	ldr	r3, [pc, #48]	; (201fc <InitializeSerialConsole+0x68>)
   201cc:	2201      	movs	r2, #1
   201ce:	0018      	movs	r0, r3
   201d0:	4b0b      	ldr	r3, [pc, #44]	; (20200 <InitializeSerialConsole+0x6c>)
   201d2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   201d4:	46c0      	nop			; (mov r8, r8)
   201d6:	46bd      	mov	sp, r7
   201d8:	bd80      	pop	{r7, pc}
   201da:	46c0      	nop			; (mov r8, r8)
   201dc:	20005738 	.word	0x20005738
   201e0:	0001fec5 	.word	0x0001fec5
   201e4:	20005530 	.word	0x20005530
   201e8:	20005538 	.word	0x20005538
   201ec:	2000593c 	.word	0x2000593c
   201f0:	00020369 	.word	0x00020369
   201f4:	000203e1 	.word	0x000203e1
   201f8:	20005534 	.word	0x20005534
   201fc:	200054fc 	.word	0x200054fc
   20200:	0002b3a9 	.word	0x0002b3a9

00020204 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   20204:	b580      	push	{r7, lr}
   20206:	b084      	sub	sp, #16
   20208:	af00      	add	r7, sp, #0
   2020a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   2020c:	4b1a      	ldr	r3, [pc, #104]	; (20278 <SerialConsoleWriteString+0x74>)
   2020e:	4798      	blx	r3
    if (string != NULL) {
   20210:	687b      	ldr	r3, [r7, #4]
   20212:	2b00      	cmp	r3, #0
   20214:	d02a      	beq.n	2026c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   20216:	2300      	movs	r3, #0
   20218:	60fb      	str	r3, [r7, #12]
   2021a:	e00b      	b.n	20234 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   2021c:	4b17      	ldr	r3, [pc, #92]	; (2027c <SerialConsoleWriteString+0x78>)
   2021e:	6818      	ldr	r0, [r3, #0]
   20220:	687a      	ldr	r2, [r7, #4]
   20222:	68fb      	ldr	r3, [r7, #12]
   20224:	18d3      	adds	r3, r2, r3
   20226:	781b      	ldrb	r3, [r3, #0]
   20228:	0019      	movs	r1, r3
   2022a:	4b15      	ldr	r3, [pc, #84]	; (20280 <SerialConsoleWriteString+0x7c>)
   2022c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   2022e:	68fb      	ldr	r3, [r7, #12]
   20230:	3301      	adds	r3, #1
   20232:	60fb      	str	r3, [r7, #12]
   20234:	687b      	ldr	r3, [r7, #4]
   20236:	0018      	movs	r0, r3
   20238:	4b12      	ldr	r3, [pc, #72]	; (20284 <SerialConsoleWriteString+0x80>)
   2023a:	4798      	blx	r3
   2023c:	0002      	movs	r2, r0
   2023e:	68fb      	ldr	r3, [r7, #12]
   20240:	429a      	cmp	r2, r3
   20242:	d8eb      	bhi.n	2021c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   20244:	4b10      	ldr	r3, [pc, #64]	; (20288 <SerialConsoleWriteString+0x84>)
   20246:	2101      	movs	r1, #1
   20248:	0018      	movs	r0, r3
   2024a:	4b10      	ldr	r3, [pc, #64]	; (2028c <SerialConsoleWriteString+0x88>)
   2024c:	4798      	blx	r3
   2024e:	1e03      	subs	r3, r0, #0
   20250:	d10c      	bne.n	2026c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   20252:	4b0a      	ldr	r3, [pc, #40]	; (2027c <SerialConsoleWriteString+0x78>)
   20254:	681b      	ldr	r3, [r3, #0]
   20256:	4a0e      	ldr	r2, [pc, #56]	; (20290 <SerialConsoleWriteString+0x8c>)
   20258:	0011      	movs	r1, r2
   2025a:	0018      	movs	r0, r3
   2025c:	4b0d      	ldr	r3, [pc, #52]	; (20294 <SerialConsoleWriteString+0x90>)
   2025e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20260:	490b      	ldr	r1, [pc, #44]	; (20290 <SerialConsoleWriteString+0x8c>)
   20262:	4b09      	ldr	r3, [pc, #36]	; (20288 <SerialConsoleWriteString+0x84>)
   20264:	2201      	movs	r2, #1
   20266:	0018      	movs	r0, r3
   20268:	4b0b      	ldr	r3, [pc, #44]	; (20298 <SerialConsoleWriteString+0x94>)
   2026a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   2026c:	4b0b      	ldr	r3, [pc, #44]	; (2029c <SerialConsoleWriteString+0x98>)
   2026e:	4798      	blx	r3
}
   20270:	46c0      	nop			; (mov r8, r8)
   20272:	46bd      	mov	sp, r7
   20274:	b004      	add	sp, #16
   20276:	bd80      	pop	{r7, pc}
   20278:	0001e871 	.word	0x0001e871
   2027c:	2000593c 	.word	0x2000593c
   20280:	0001ff25 	.word	0x0001ff25
   20284:	00037d23 	.word	0x00037d23
   20288:	200054fc 	.word	0x200054fc
   2028c:	0002b3f1 	.word	0x0002b3f1
   20290:	20005938 	.word	0x20005938
   20294:	0001ff59 	.word	0x0001ff59
   20298:	0002b361 	.word	0x0002b361
   2029c:	0001e889 	.word	0x0001e889

000202a0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   202a0:	b580      	push	{r7, lr}
   202a2:	b084      	sub	sp, #16
   202a4:	af00      	add	r7, sp, #0
   202a6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   202a8:	4b08      	ldr	r3, [pc, #32]	; (202cc <SerialConsoleReadCharacter+0x2c>)
   202aa:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   202ac:	4b08      	ldr	r3, [pc, #32]	; (202d0 <SerialConsoleReadCharacter+0x30>)
   202ae:	681b      	ldr	r3, [r3, #0]
   202b0:	687a      	ldr	r2, [r7, #4]
   202b2:	0011      	movs	r1, r2
   202b4:	0018      	movs	r0, r3
   202b6:	4b07      	ldr	r3, [pc, #28]	; (202d4 <SerialConsoleReadCharacter+0x34>)
   202b8:	4798      	blx	r3
   202ba:	0003      	movs	r3, r0
   202bc:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   202be:	4b06      	ldr	r3, [pc, #24]	; (202d8 <SerialConsoleReadCharacter+0x38>)
   202c0:	4798      	blx	r3
    return a;
   202c2:	68fb      	ldr	r3, [r7, #12]
}
   202c4:	0018      	movs	r0, r3
   202c6:	46bd      	mov	sp, r7
   202c8:	b004      	add	sp, #16
   202ca:	bd80      	pop	{r7, pc}
   202cc:	0001e871 	.word	0x0001e871
   202d0:	20005530 	.word	0x20005530
   202d4:	0001ff59 	.word	0x0001ff59
   202d8:	0001e889 	.word	0x0001e889

000202dc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   202dc:	b580      	push	{r7, lr}
   202de:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   202e0:	4b02      	ldr	r3, [pc, #8]	; (202ec <getLogLevel+0x10>)
   202e2:	781b      	ldrb	r3, [r3, #0]
}
   202e4:	0018      	movs	r0, r3
   202e6:	46bd      	mov	sp, r7
   202e8:	bd80      	pop	{r7, pc}
   202ea:	46c0      	nop			; (mov r8, r8)
   202ec:	200040c0 	.word	0x200040c0

000202f0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   202f0:	b40e      	push	{r1, r2, r3}
   202f2:	b590      	push	{r4, r7, lr}
   202f4:	b084      	sub	sp, #16
   202f6:	af00      	add	r7, sp, #0
   202f8:	0002      	movs	r2, r0
   202fa:	1dfb      	adds	r3, r7, #7
   202fc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   202fe:	4b0e      	ldr	r3, [pc, #56]	; (20338 <LogMessage+0x48>)
   20300:	4798      	blx	r3
   20302:	0003      	movs	r3, r0
   20304:	001a      	movs	r2, r3
   20306:	1dfb      	adds	r3, r7, #7
   20308:	781b      	ldrb	r3, [r3, #0]
   2030a:	4293      	cmp	r3, r2
   2030c:	d30c      	bcc.n	20328 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   2030e:	2320      	movs	r3, #32
   20310:	18fb      	adds	r3, r7, r3
   20312:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   20314:	68fb      	ldr	r3, [r7, #12]
   20316:	69fa      	ldr	r2, [r7, #28]
   20318:	4808      	ldr	r0, [pc, #32]	; (2033c <LogMessage+0x4c>)
   2031a:	217f      	movs	r1, #127	; 0x7f
   2031c:	4c08      	ldr	r4, [pc, #32]	; (20340 <LogMessage+0x50>)
   2031e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   20320:	4b06      	ldr	r3, [pc, #24]	; (2033c <LogMessage+0x4c>)
   20322:	0018      	movs	r0, r3
   20324:	4b07      	ldr	r3, [pc, #28]	; (20344 <LogMessage+0x54>)
   20326:	4798      	blx	r3
        va_end(ap);
    }
};
   20328:	46c0      	nop			; (mov r8, r8)
   2032a:	46bd      	mov	sp, r7
   2032c:	b004      	add	sp, #16
   2032e:	bc90      	pop	{r4, r7}
   20330:	bc08      	pop	{r3}
   20332:	b003      	add	sp, #12
   20334:	4718      	bx	r3
   20336:	46c0      	nop			; (mov r8, r8)
   20338:	000202dd 	.word	0x000202dd
   2033c:	2000547c 	.word	0x2000547c
   20340:	00037f5d 	.word	0x00037f5d
   20344:	00020205 	.word	0x00020205

00020348 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   20348:	b40f      	push	{r0, r1, r2, r3}
   2034a:	b580      	push	{r7, lr}
   2034c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   2034e:	68bb      	ldr	r3, [r7, #8]
   20350:	0019      	movs	r1, r3
   20352:	2001      	movs	r0, #1
   20354:	4b03      	ldr	r3, [pc, #12]	; (20364 <LogMessageDebug+0x1c>)
   20356:	4798      	blx	r3
};
   20358:	46c0      	nop			; (mov r8, r8)
   2035a:	46bd      	mov	sp, r7
   2035c:	bc80      	pop	{r7}
   2035e:	bc08      	pop	{r3}
   20360:	b004      	add	sp, #16
   20362:	4718      	bx	r3
   20364:	000202f1 	.word	0x000202f1

00020368 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   20368:	b580      	push	{r7, lr}
   2036a:	b090      	sub	sp, #64	; 0x40
   2036c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   2036e:	003b      	movs	r3, r7
   20370:	0018      	movs	r0, r3
   20372:	4b14      	ldr	r3, [pc, #80]	; (203c4 <configure_usart+0x5c>)
   20374:	4798      	blx	r3

    config_usart.baudrate = 115200;
   20376:	003b      	movs	r3, r7
   20378:	22e1      	movs	r2, #225	; 0xe1
   2037a:	0252      	lsls	r2, r2, #9
   2037c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   2037e:	003b      	movs	r3, r7
   20380:	22c4      	movs	r2, #196	; 0xc4
   20382:	0392      	lsls	r2, r2, #14
   20384:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   20386:	003b      	movs	r3, r7
   20388:	2201      	movs	r2, #1
   2038a:	4252      	negs	r2, r2
   2038c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   2038e:	003b      	movs	r3, r7
   20390:	2201      	movs	r2, #1
   20392:	4252      	negs	r2, r2
   20394:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   20396:	003b      	movs	r3, r7
   20398:	4a0b      	ldr	r2, [pc, #44]	; (203c8 <configure_usart+0x60>)
   2039a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   2039c:	003b      	movs	r3, r7
   2039e:	4a0b      	ldr	r2, [pc, #44]	; (203cc <configure_usart+0x64>)
   203a0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   203a2:	46c0      	nop			; (mov r8, r8)
   203a4:	003a      	movs	r2, r7
   203a6:	490a      	ldr	r1, [pc, #40]	; (203d0 <configure_usart+0x68>)
   203a8:	4b0a      	ldr	r3, [pc, #40]	; (203d4 <configure_usart+0x6c>)
   203aa:	0018      	movs	r0, r3
   203ac:	4b0a      	ldr	r3, [pc, #40]	; (203d8 <configure_usart+0x70>)
   203ae:	4798      	blx	r3
   203b0:	1e03      	subs	r3, r0, #0
   203b2:	d1f7      	bne.n	203a4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   203b4:	4b07      	ldr	r3, [pc, #28]	; (203d4 <configure_usart+0x6c>)
   203b6:	0018      	movs	r0, r3
   203b8:	4b08      	ldr	r3, [pc, #32]	; (203dc <configure_usart+0x74>)
   203ba:	4798      	blx	r3
}
   203bc:	46c0      	nop			; (mov r8, r8)
   203be:	46bd      	mov	sp, r7
   203c0:	b010      	add	sp, #64	; 0x40
   203c2:	bd80      	pop	{r7, pc}
   203c4:	00020055 	.word	0x00020055
   203c8:	002a0003 	.word	0x002a0003
   203cc:	002b0003 	.word	0x002b0003
   203d0:	42001800 	.word	0x42001800
   203d4:	200054fc 	.word	0x200054fc
   203d8:	0002af65 	.word	0x0002af65
   203dc:	00020115 	.word	0x00020115

000203e0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   203e0:	b580      	push	{r7, lr}
   203e2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   203e4:	490c      	ldr	r1, [pc, #48]	; (20418 <configure_usart_callbacks+0x38>)
   203e6:	4b0d      	ldr	r3, [pc, #52]	; (2041c <configure_usart_callbacks+0x3c>)
   203e8:	2200      	movs	r2, #0
   203ea:	0018      	movs	r0, r3
   203ec:	4b0c      	ldr	r3, [pc, #48]	; (20420 <configure_usart_callbacks+0x40>)
   203ee:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   203f0:	490c      	ldr	r1, [pc, #48]	; (20424 <configure_usart_callbacks+0x44>)
   203f2:	4b0a      	ldr	r3, [pc, #40]	; (2041c <configure_usart_callbacks+0x3c>)
   203f4:	2201      	movs	r2, #1
   203f6:	0018      	movs	r0, r3
   203f8:	4b09      	ldr	r3, [pc, #36]	; (20420 <configure_usart_callbacks+0x40>)
   203fa:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   203fc:	4b07      	ldr	r3, [pc, #28]	; (2041c <configure_usart_callbacks+0x3c>)
   203fe:	2100      	movs	r1, #0
   20400:	0018      	movs	r0, r3
   20402:	4b09      	ldr	r3, [pc, #36]	; (20428 <configure_usart_callbacks+0x48>)
   20404:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   20406:	4b05      	ldr	r3, [pc, #20]	; (2041c <configure_usart_callbacks+0x3c>)
   20408:	2101      	movs	r1, #1
   2040a:	0018      	movs	r0, r3
   2040c:	4b06      	ldr	r3, [pc, #24]	; (20428 <configure_usart_callbacks+0x48>)
   2040e:	4798      	blx	r3
}
   20410:	46c0      	nop			; (mov r8, r8)
   20412:	46bd      	mov	sp, r7
   20414:	bd80      	pop	{r7, pc}
   20416:	46c0      	nop			; (mov r8, r8)
   20418:	00020475 	.word	0x00020475
   2041c:	200054fc 	.word	0x200054fc
   20420:	0002b319 	.word	0x0002b319
   20424:	0002042d 	.word	0x0002042d
   20428:	0002015d 	.word	0x0002015d

0002042c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   2042c:	b580      	push	{r7, lr}
   2042e:	b082      	sub	sp, #8
   20430:	af00      	add	r7, sp, #0
   20432:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   20434:	4b09      	ldr	r3, [pc, #36]	; (2045c <usart_read_callback+0x30>)
   20436:	681a      	ldr	r2, [r3, #0]
   20438:	4b09      	ldr	r3, [pc, #36]	; (20460 <usart_read_callback+0x34>)
   2043a:	781b      	ldrb	r3, [r3, #0]
   2043c:	0019      	movs	r1, r3
   2043e:	0010      	movs	r0, r2
   20440:	4b08      	ldr	r3, [pc, #32]	; (20464 <usart_read_callback+0x38>)
   20442:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   20444:	4906      	ldr	r1, [pc, #24]	; (20460 <usart_read_callback+0x34>)
   20446:	4b08      	ldr	r3, [pc, #32]	; (20468 <usart_read_callback+0x3c>)
   20448:	2201      	movs	r2, #1
   2044a:	0018      	movs	r0, r3
   2044c:	4b07      	ldr	r3, [pc, #28]	; (2046c <usart_read_callback+0x40>)
   2044e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   20450:	4b07      	ldr	r3, [pc, #28]	; (20470 <usart_read_callback+0x44>)
   20452:	4798      	blx	r3
}
   20454:	46c0      	nop			; (mov r8, r8)
   20456:	46bd      	mov	sp, r7
   20458:	b002      	add	sp, #8
   2045a:	bd80      	pop	{r7, pc}
   2045c:	20005530 	.word	0x20005530
   20460:	20005534 	.word	0x20005534
   20464:	0001ff25 	.word	0x0001ff25
   20468:	200054fc 	.word	0x200054fc
   2046c:	0002b3a9 	.word	0x0002b3a9
   20470:	00014f89 	.word	0x00014f89

00020474 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   20474:	b580      	push	{r7, lr}
   20476:	b082      	sub	sp, #8
   20478:	af00      	add	r7, sp, #0
   2047a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   2047c:	4b09      	ldr	r3, [pc, #36]	; (204a4 <usart_write_callback+0x30>)
   2047e:	681b      	ldr	r3, [r3, #0]
   20480:	4a09      	ldr	r2, [pc, #36]	; (204a8 <usart_write_callback+0x34>)
   20482:	0011      	movs	r1, r2
   20484:	0018      	movs	r0, r3
   20486:	4b09      	ldr	r3, [pc, #36]	; (204ac <usart_write_callback+0x38>)
   20488:	4798      	blx	r3
   2048a:	0003      	movs	r3, r0
   2048c:	3301      	adds	r3, #1
   2048e:	d005      	beq.n	2049c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20490:	4905      	ldr	r1, [pc, #20]	; (204a8 <usart_write_callback+0x34>)
   20492:	4b07      	ldr	r3, [pc, #28]	; (204b0 <usart_write_callback+0x3c>)
   20494:	2201      	movs	r2, #1
   20496:	0018      	movs	r0, r3
   20498:	4b06      	ldr	r3, [pc, #24]	; (204b4 <usart_write_callback+0x40>)
   2049a:	4798      	blx	r3
    }
}
   2049c:	46c0      	nop			; (mov r8, r8)
   2049e:	46bd      	mov	sp, r7
   204a0:	b002      	add	sp, #8
   204a2:	bd80      	pop	{r7, pc}
   204a4:	2000593c 	.word	0x2000593c
   204a8:	20005938 	.word	0x20005938
   204ac:	0001ff59 	.word	0x0001ff59
   204b0:	200054fc 	.word	0x200054fc
   204b4:	0002b361 	.word	0x0002b361

000204b8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   204b8:	b590      	push	{r4, r7, lr}
   204ba:	b087      	sub	sp, #28
   204bc:	af00      	add	r7, sp, #0
   204be:	60f8      	str	r0, [r7, #12]
   204c0:	000c      	movs	r4, r1
   204c2:	0010      	movs	r0, r2
   204c4:	0019      	movs	r1, r3
   204c6:	230a      	movs	r3, #10
   204c8:	18fb      	adds	r3, r7, r3
   204ca:	1c22      	adds	r2, r4, #0
   204cc:	801a      	strh	r2, [r3, #0]
   204ce:	2308      	movs	r3, #8
   204d0:	18fb      	adds	r3, r7, r3
   204d2:	1c02      	adds	r2, r0, #0
   204d4:	801a      	strh	r2, [r3, #0]
   204d6:	1dfb      	adds	r3, r7, #7
   204d8:	1c0a      	adds	r2, r1, #0
   204da:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   204dc:	230a      	movs	r3, #10
   204de:	18fb      	adds	r3, r7, r3
   204e0:	881a      	ldrh	r2, [r3, #0]
   204e2:	2308      	movs	r3, #8
   204e4:	18fb      	adds	r3, r7, r3
   204e6:	881b      	ldrh	r3, [r3, #0]
   204e8:	1ad3      	subs	r3, r2, r3
   204ea:	3307      	adds	r3, #7
   204ec:	2b00      	cmp	r3, #0
   204ee:	da00      	bge.n	204f2 <SDMMC_UNSTUFF_BITS+0x3a>
   204f0:	3307      	adds	r3, #7
   204f2:	10db      	asrs	r3, r3, #3
   204f4:	3b01      	subs	r3, #1
   204f6:	68fa      	ldr	r2, [r7, #12]
   204f8:	18d3      	adds	r3, r2, r3
   204fa:	781b      	ldrb	r3, [r3, #0]
   204fc:	0019      	movs	r1, r3
   204fe:	2308      	movs	r3, #8
   20500:	18fb      	adds	r3, r7, r3
   20502:	881b      	ldrh	r3, [r3, #0]
   20504:	2207      	movs	r2, #7
   20506:	4013      	ands	r3, r2
   20508:	4119      	asrs	r1, r3
   2050a:	000b      	movs	r3, r1
   2050c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   2050e:	2308      	movs	r3, #8
   20510:	18fb      	adds	r3, r7, r3
   20512:	881b      	ldrh	r3, [r3, #0]
   20514:	2207      	movs	r2, #7
   20516:	401a      	ands	r2, r3
   20518:	1dfb      	adds	r3, r7, #7
   2051a:	781b      	ldrb	r3, [r3, #0]
   2051c:	18d3      	adds	r3, r2, r3
   2051e:	2b08      	cmp	r3, #8
   20520:	dd1c      	ble.n	2055c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   20522:	230a      	movs	r3, #10
   20524:	18fb      	adds	r3, r7, r3
   20526:	881a      	ldrh	r2, [r3, #0]
   20528:	2308      	movs	r3, #8
   2052a:	18fb      	adds	r3, r7, r3
   2052c:	881b      	ldrh	r3, [r3, #0]
   2052e:	1ad3      	subs	r3, r2, r3
   20530:	3307      	adds	r3, #7
   20532:	2b00      	cmp	r3, #0
   20534:	da00      	bge.n	20538 <SDMMC_UNSTUFF_BITS+0x80>
   20536:	3307      	adds	r3, #7
   20538:	10db      	asrs	r3, r3, #3
   2053a:	3b02      	subs	r3, #2
   2053c:	68fa      	ldr	r2, [r7, #12]
   2053e:	18d3      	adds	r3, r2, r3
   20540:	781b      	ldrb	r3, [r3, #0]
   20542:	0019      	movs	r1, r3
   20544:	2308      	movs	r3, #8
   20546:	18fb      	adds	r3, r7, r3
   20548:	881b      	ldrh	r3, [r3, #0]
   2054a:	2207      	movs	r2, #7
   2054c:	4013      	ands	r3, r2
   2054e:	2208      	movs	r2, #8
   20550:	1ad3      	subs	r3, r2, r3
   20552:	4099      	lsls	r1, r3
   20554:	000b      	movs	r3, r1
   20556:	697a      	ldr	r2, [r7, #20]
   20558:	4313      	orrs	r3, r2
   2055a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2055c:	2308      	movs	r3, #8
   2055e:	18fb      	adds	r3, r7, r3
   20560:	881b      	ldrh	r3, [r3, #0]
   20562:	2207      	movs	r2, #7
   20564:	401a      	ands	r2, r3
   20566:	1dfb      	adds	r3, r7, #7
   20568:	781b      	ldrb	r3, [r3, #0]
   2056a:	18d3      	adds	r3, r2, r3
   2056c:	2b10      	cmp	r3, #16
   2056e:	dd1c      	ble.n	205aa <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   20570:	230a      	movs	r3, #10
   20572:	18fb      	adds	r3, r7, r3
   20574:	881a      	ldrh	r2, [r3, #0]
   20576:	2308      	movs	r3, #8
   20578:	18fb      	adds	r3, r7, r3
   2057a:	881b      	ldrh	r3, [r3, #0]
   2057c:	1ad3      	subs	r3, r2, r3
   2057e:	3307      	adds	r3, #7
   20580:	2b00      	cmp	r3, #0
   20582:	da00      	bge.n	20586 <SDMMC_UNSTUFF_BITS+0xce>
   20584:	3307      	adds	r3, #7
   20586:	10db      	asrs	r3, r3, #3
   20588:	3b03      	subs	r3, #3
   2058a:	68fa      	ldr	r2, [r7, #12]
   2058c:	18d3      	adds	r3, r2, r3
   2058e:	781b      	ldrb	r3, [r3, #0]
   20590:	0019      	movs	r1, r3
   20592:	2308      	movs	r3, #8
   20594:	18fb      	adds	r3, r7, r3
   20596:	881b      	ldrh	r3, [r3, #0]
   20598:	2207      	movs	r2, #7
   2059a:	4013      	ands	r3, r2
   2059c:	2210      	movs	r2, #16
   2059e:	1ad3      	subs	r3, r2, r3
   205a0:	4099      	lsls	r1, r3
   205a2:	000b      	movs	r3, r1
   205a4:	697a      	ldr	r2, [r7, #20]
   205a6:	4313      	orrs	r3, r2
   205a8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   205aa:	2308      	movs	r3, #8
   205ac:	18fb      	adds	r3, r7, r3
   205ae:	881b      	ldrh	r3, [r3, #0]
   205b0:	2207      	movs	r2, #7
   205b2:	401a      	ands	r2, r3
   205b4:	1dfb      	adds	r3, r7, #7
   205b6:	781b      	ldrb	r3, [r3, #0]
   205b8:	18d3      	adds	r3, r2, r3
   205ba:	2b10      	cmp	r3, #16
   205bc:	dd1c      	ble.n	205f8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   205be:	230a      	movs	r3, #10
   205c0:	18fb      	adds	r3, r7, r3
   205c2:	881a      	ldrh	r2, [r3, #0]
   205c4:	2308      	movs	r3, #8
   205c6:	18fb      	adds	r3, r7, r3
   205c8:	881b      	ldrh	r3, [r3, #0]
   205ca:	1ad3      	subs	r3, r2, r3
   205cc:	3307      	adds	r3, #7
   205ce:	2b00      	cmp	r3, #0
   205d0:	da00      	bge.n	205d4 <SDMMC_UNSTUFF_BITS+0x11c>
   205d2:	3307      	adds	r3, #7
   205d4:	10db      	asrs	r3, r3, #3
   205d6:	3b03      	subs	r3, #3
   205d8:	68fa      	ldr	r2, [r7, #12]
   205da:	18d3      	adds	r3, r2, r3
   205dc:	781b      	ldrb	r3, [r3, #0]
   205de:	0019      	movs	r1, r3
   205e0:	2308      	movs	r3, #8
   205e2:	18fb      	adds	r3, r7, r3
   205e4:	881b      	ldrh	r3, [r3, #0]
   205e6:	2207      	movs	r2, #7
   205e8:	4013      	ands	r3, r2
   205ea:	2210      	movs	r2, #16
   205ec:	1ad3      	subs	r3, r2, r3
   205ee:	4099      	lsls	r1, r3
   205f0:	000b      	movs	r3, r1
   205f2:	697a      	ldr	r2, [r7, #20]
   205f4:	4313      	orrs	r3, r2
   205f6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   205f8:	1dfb      	adds	r3, r7, #7
   205fa:	781b      	ldrb	r3, [r3, #0]
   205fc:	2201      	movs	r2, #1
   205fe:	409a      	lsls	r2, r3
   20600:	0013      	movs	r3, r2
   20602:	1e5a      	subs	r2, r3, #1
   20604:	697b      	ldr	r3, [r7, #20]
   20606:	4013      	ands	r3, r2
   20608:	617b      	str	r3, [r7, #20]
	return value;
   2060a:	697b      	ldr	r3, [r7, #20]
}
   2060c:	0018      	movs	r0, r3
   2060e:	46bd      	mov	sp, r7
   20610:	b007      	add	sp, #28
   20612:	bd90      	pop	{r4, r7, pc}

00020614 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   20614:	b580      	push	{r7, lr}
   20616:	b082      	sub	sp, #8
   20618:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   2061a:	4b23      	ldr	r3, [pc, #140]	; (206a8 <mmc_spi_op_cond+0x94>)
   2061c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   2061e:	4b23      	ldr	r3, [pc, #140]	; (206ac <mmc_spi_op_cond+0x98>)
   20620:	2100      	movs	r1, #0
   20622:	0018      	movs	r0, r3
   20624:	4b22      	ldr	r3, [pc, #136]	; (206b0 <mmc_spi_op_cond+0x9c>)
   20626:	4798      	blx	r3
   20628:	0003      	movs	r3, r0
   2062a:	001a      	movs	r2, r3
   2062c:	2301      	movs	r3, #1
   2062e:	4053      	eors	r3, r2
   20630:	b2db      	uxtb	r3, r3
   20632:	2b00      	cmp	r3, #0
   20634:	d001      	beq.n	2063a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   20636:	2300      	movs	r3, #0
   20638:	e031      	b.n	2069e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   2063a:	4b1e      	ldr	r3, [pc, #120]	; (206b4 <mmc_spi_op_cond+0xa0>)
   2063c:	4798      	blx	r3
   2063e:	0003      	movs	r3, r0
   20640:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   20642:	683b      	ldr	r3, [r7, #0]
   20644:	2201      	movs	r2, #1
   20646:	4013      	ands	r3, r2
   20648:	d006      	beq.n	20658 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   2064a:	687b      	ldr	r3, [r7, #4]
   2064c:	1e5a      	subs	r2, r3, #1
   2064e:	607a      	str	r2, [r7, #4]
   20650:	2b00      	cmp	r3, #0
   20652:	d1e4      	bne.n	2061e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   20654:	2300      	movs	r3, #0
   20656:	e022      	b.n	2069e <mmc_spi_op_cond+0x8a>
			break;
   20658:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   2065a:	4b17      	ldr	r3, [pc, #92]	; (206b8 <mmc_spi_op_cond+0xa4>)
   2065c:	2100      	movs	r1, #0
   2065e:	0018      	movs	r0, r3
   20660:	4b13      	ldr	r3, [pc, #76]	; (206b0 <mmc_spi_op_cond+0x9c>)
   20662:	4798      	blx	r3
   20664:	0003      	movs	r3, r0
   20666:	001a      	movs	r2, r3
   20668:	2301      	movs	r3, #1
   2066a:	4053      	eors	r3, r2
   2066c:	b2db      	uxtb	r3, r3
   2066e:	2b00      	cmp	r3, #0
   20670:	d001      	beq.n	20676 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20672:	2300      	movs	r3, #0
   20674:	e013      	b.n	2069e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   20676:	4b0f      	ldr	r3, [pc, #60]	; (206b4 <mmc_spi_op_cond+0xa0>)
   20678:	4798      	blx	r3
   2067a:	0002      	movs	r2, r0
   2067c:	23c0      	movs	r3, #192	; 0xc0
   2067e:	05db      	lsls	r3, r3, #23
   20680:	401a      	ands	r2, r3
   20682:	2380      	movs	r3, #128	; 0x80
   20684:	05db      	lsls	r3, r3, #23
   20686:	429a      	cmp	r2, r3
   20688:	d108      	bne.n	2069c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   2068a:	4b0c      	ldr	r3, [pc, #48]	; (206bc <mmc_spi_op_cond+0xa8>)
   2068c:	681a      	ldr	r2, [r3, #0]
   2068e:	4b0b      	ldr	r3, [pc, #44]	; (206bc <mmc_spi_op_cond+0xa8>)
   20690:	681b      	ldr	r3, [r3, #0]
   20692:	7adb      	ldrb	r3, [r3, #11]
   20694:	2108      	movs	r1, #8
   20696:	430b      	orrs	r3, r1
   20698:	b2db      	uxtb	r3, r3
   2069a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2069c:	2301      	movs	r3, #1
}
   2069e:	0018      	movs	r0, r3
   206a0:	46bd      	mov	sp, r7
   206a2:	b002      	add	sp, #8
   206a4:	bd80      	pop	{r7, pc}
   206a6:	46c0      	nop			; (mov r8, r8)
   206a8:	00001bee 	.word	0x00001bee
   206ac:	00001101 	.word	0x00001101
   206b0:	00022049 	.word	0x00022049
   206b4:	00022289 	.word	0x00022289
   206b8:	0000053a 	.word	0x0000053a
   206bc:	200040e8 	.word	0x200040e8

000206c0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   206c0:	b580      	push	{r7, lr}
   206c2:	b086      	sub	sp, #24
   206c4:	af00      	add	r7, sp, #0
   206c6:	0002      	movs	r2, r0
   206c8:	1dfb      	adds	r3, r7, #7
   206ca:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   206cc:	4b2e      	ldr	r3, [pc, #184]	; (20788 <sd_spi_op_cond+0xc8>)
   206ce:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   206d0:	4b2e      	ldr	r3, [pc, #184]	; (2078c <sd_spi_op_cond+0xcc>)
   206d2:	2100      	movs	r1, #0
   206d4:	0018      	movs	r0, r3
   206d6:	4b2e      	ldr	r3, [pc, #184]	; (20790 <sd_spi_op_cond+0xd0>)
   206d8:	4798      	blx	r3
   206da:	0003      	movs	r3, r0
   206dc:	001a      	movs	r2, r3
   206de:	2301      	movs	r3, #1
   206e0:	4053      	eors	r3, r2
   206e2:	b2db      	uxtb	r3, r3
   206e4:	2b00      	cmp	r3, #0
   206e6:	d001      	beq.n	206ec <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   206e8:	2300      	movs	r3, #0
   206ea:	e048      	b.n	2077e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   206ec:	2300      	movs	r3, #0
   206ee:	617b      	str	r3, [r7, #20]
		if (v2) {
   206f0:	1dfb      	adds	r3, r7, #7
   206f2:	781b      	ldrb	r3, [r3, #0]
   206f4:	2b00      	cmp	r3, #0
   206f6:	d004      	beq.n	20702 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   206f8:	697b      	ldr	r3, [r7, #20]
   206fa:	2280      	movs	r2, #128	; 0x80
   206fc:	05d2      	lsls	r2, r2, #23
   206fe:	4313      	orrs	r3, r2
   20700:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   20702:	697b      	ldr	r3, [r7, #20]
   20704:	4a23      	ldr	r2, [pc, #140]	; (20794 <sd_spi_op_cond+0xd4>)
   20706:	0019      	movs	r1, r3
   20708:	0010      	movs	r0, r2
   2070a:	4b21      	ldr	r3, [pc, #132]	; (20790 <sd_spi_op_cond+0xd0>)
   2070c:	4798      	blx	r3
   2070e:	0003      	movs	r3, r0
   20710:	001a      	movs	r2, r3
   20712:	2301      	movs	r3, #1
   20714:	4053      	eors	r3, r2
   20716:	b2db      	uxtb	r3, r3
   20718:	2b00      	cmp	r3, #0
   2071a:	d001      	beq.n	20720 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   2071c:	2300      	movs	r3, #0
   2071e:	e02e      	b.n	2077e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   20720:	4b1d      	ldr	r3, [pc, #116]	; (20798 <sd_spi_op_cond+0xd8>)
   20722:	4798      	blx	r3
   20724:	0003      	movs	r3, r0
   20726:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   20728:	68fb      	ldr	r3, [r7, #12]
   2072a:	2201      	movs	r2, #1
   2072c:	4013      	ands	r3, r2
   2072e:	d006      	beq.n	2073e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   20730:	693b      	ldr	r3, [r7, #16]
   20732:	1e5a      	subs	r2, r3, #1
   20734:	613a      	str	r2, [r7, #16]
   20736:	2b00      	cmp	r3, #0
   20738:	d1ca      	bne.n	206d0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   2073a:	2300      	movs	r3, #0
   2073c:	e01f      	b.n	2077e <sd_spi_op_cond+0xbe>
			break;
   2073e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   20740:	4b16      	ldr	r3, [pc, #88]	; (2079c <sd_spi_op_cond+0xdc>)
   20742:	2100      	movs	r1, #0
   20744:	0018      	movs	r0, r3
   20746:	4b12      	ldr	r3, [pc, #72]	; (20790 <sd_spi_op_cond+0xd0>)
   20748:	4798      	blx	r3
   2074a:	0003      	movs	r3, r0
   2074c:	001a      	movs	r2, r3
   2074e:	2301      	movs	r3, #1
   20750:	4053      	eors	r3, r2
   20752:	b2db      	uxtb	r3, r3
   20754:	2b00      	cmp	r3, #0
   20756:	d001      	beq.n	2075c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20758:	2300      	movs	r3, #0
   2075a:	e010      	b.n	2077e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   2075c:	4b0e      	ldr	r3, [pc, #56]	; (20798 <sd_spi_op_cond+0xd8>)
   2075e:	4798      	blx	r3
   20760:	0002      	movs	r2, r0
   20762:	2380      	movs	r3, #128	; 0x80
   20764:	05db      	lsls	r3, r3, #23
   20766:	4013      	ands	r3, r2
   20768:	d008      	beq.n	2077c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   2076a:	4b0d      	ldr	r3, [pc, #52]	; (207a0 <sd_spi_op_cond+0xe0>)
   2076c:	681a      	ldr	r2, [r3, #0]
   2076e:	4b0c      	ldr	r3, [pc, #48]	; (207a0 <sd_spi_op_cond+0xe0>)
   20770:	681b      	ldr	r3, [r3, #0]
   20772:	7adb      	ldrb	r3, [r3, #11]
   20774:	2108      	movs	r1, #8
   20776:	430b      	orrs	r3, r1
   20778:	b2db      	uxtb	r3, r3
   2077a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2077c:	2301      	movs	r3, #1
}
   2077e:	0018      	movs	r0, r3
   20780:	46bd      	mov	sp, r7
   20782:	b006      	add	sp, #24
   20784:	bd80      	pop	{r7, pc}
   20786:	46c0      	nop			; (mov r8, r8)
   20788:	00001bee 	.word	0x00001bee
   2078c:	00001137 	.word	0x00001137
   20790:	00022049 	.word	0x00022049
   20794:	00001129 	.word	0x00001129
   20798:	00022289 	.word	0x00022289
   2079c:	0000053a 	.word	0x0000053a
   207a0:	200040e8 	.word	0x200040e8

000207a4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   207a4:	b580      	push	{r7, lr}
   207a6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   207a8:	2301      	movs	r3, #1
}
   207aa:	0018      	movs	r0, r3
   207ac:	46bd      	mov	sp, r7
   207ae:	bd80      	pop	{r7, pc}

000207b0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   207b0:	b580      	push	{r7, lr}
   207b2:	b084      	sub	sp, #16
   207b4:	af00      	add	r7, sp, #0
   207b6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   207b8:	687b      	ldr	r3, [r7, #4]
   207ba:	2200      	movs	r2, #0
   207bc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   207be:	23d5      	movs	r3, #213	; 0xd5
   207c0:	005b      	lsls	r3, r3, #1
   207c2:	4a14      	ldr	r2, [pc, #80]	; (20814 <sd_cmd8+0x64>)
   207c4:	0019      	movs	r1, r3
   207c6:	0010      	movs	r0, r2
   207c8:	4b13      	ldr	r3, [pc, #76]	; (20818 <sd_cmd8+0x68>)
   207ca:	4798      	blx	r3
   207cc:	0003      	movs	r3, r0
   207ce:	001a      	movs	r2, r3
   207d0:	2301      	movs	r3, #1
   207d2:	4053      	eors	r3, r2
   207d4:	b2db      	uxtb	r3, r3
   207d6:	2b00      	cmp	r3, #0
   207d8:	d001      	beq.n	207de <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   207da:	2301      	movs	r3, #1
   207dc:	e015      	b.n	2080a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   207de:	4b0f      	ldr	r3, [pc, #60]	; (2081c <sd_cmd8+0x6c>)
   207e0:	4798      	blx	r3
   207e2:	0003      	movs	r3, r0
   207e4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   207e6:	68fb      	ldr	r3, [r7, #12]
   207e8:	3301      	adds	r3, #1
   207ea:	d101      	bne.n	207f0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   207ec:	2301      	movs	r3, #1
   207ee:	e00c      	b.n	2080a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   207f0:	68fb      	ldr	r3, [r7, #12]
   207f2:	051b      	lsls	r3, r3, #20
   207f4:	0d1a      	lsrs	r2, r3, #20
   207f6:	23d5      	movs	r3, #213	; 0xd5
   207f8:	005b      	lsls	r3, r3, #1
   207fa:	429a      	cmp	r2, r3
   207fc:	d001      	beq.n	20802 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   207fe:	2300      	movs	r3, #0
   20800:	e003      	b.n	2080a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   20802:	687b      	ldr	r3, [r7, #4]
   20804:	2201      	movs	r2, #1
   20806:	701a      	strb	r2, [r3, #0]
	return true;
   20808:	2301      	movs	r3, #1
}
   2080a:	0018      	movs	r0, r3
   2080c:	46bd      	mov	sp, r7
   2080e:	b004      	add	sp, #16
   20810:	bd80      	pop	{r7, pc}
   20812:	46c0      	nop			; (mov r8, r8)
   20814:	00005508 	.word	0x00005508
   20818:	00022049 	.word	0x00022049
   2081c:	00022289 	.word	0x00022289

00020820 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   20820:	b590      	push	{r4, r7, lr}
   20822:	b089      	sub	sp, #36	; 0x24
   20824:	af02      	add	r7, sp, #8
   20826:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   20828:	2380      	movs	r3, #128	; 0x80
   2082a:	009a      	lsls	r2, r3, #2
   2082c:	4841      	ldr	r0, [pc, #260]	; (20934 <mmc_cmd8+0x114>)
   2082e:	2300      	movs	r3, #0
   20830:	9300      	str	r3, [sp, #0]
   20832:	2301      	movs	r3, #1
   20834:	2100      	movs	r1, #0
   20836:	4c40      	ldr	r4, [pc, #256]	; (20938 <mmc_cmd8+0x118>)
   20838:	47a0      	blx	r4
   2083a:	0003      	movs	r3, r0
   2083c:	001a      	movs	r2, r3
   2083e:	2301      	movs	r3, #1
   20840:	4053      	eors	r3, r2
   20842:	b2db      	uxtb	r3, r3
   20844:	2b00      	cmp	r3, #0
   20846:	d001      	beq.n	2084c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   20848:	2300      	movs	r3, #0
   2084a:	e06e      	b.n	2092a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   2084c:	2316      	movs	r3, #22
   2084e:	18fb      	adds	r3, r7, r3
   20850:	2200      	movs	r2, #0
   20852:	801a      	strh	r2, [r3, #0]
   20854:	e014      	b.n	20880 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   20856:	2310      	movs	r3, #16
   20858:	18fb      	adds	r3, r7, r3
   2085a:	0018      	movs	r0, r3
   2085c:	4b37      	ldr	r3, [pc, #220]	; (2093c <mmc_cmd8+0x11c>)
   2085e:	4798      	blx	r3
   20860:	0003      	movs	r3, r0
   20862:	001a      	movs	r2, r3
   20864:	2301      	movs	r3, #1
   20866:	4053      	eors	r3, r2
   20868:	b2db      	uxtb	r3, r3
   2086a:	2b00      	cmp	r3, #0
   2086c:	d001      	beq.n	20872 <mmc_cmd8+0x52>
			return false;
   2086e:	2300      	movs	r3, #0
   20870:	e05b      	b.n	2092a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   20872:	2316      	movs	r3, #22
   20874:	18fb      	adds	r3, r7, r3
   20876:	881a      	ldrh	r2, [r3, #0]
   20878:	2316      	movs	r3, #22
   2087a:	18fb      	adds	r3, r7, r3
   2087c:	3201      	adds	r2, #1
   2087e:	801a      	strh	r2, [r3, #0]
   20880:	2316      	movs	r3, #22
   20882:	18fb      	adds	r3, r7, r3
   20884:	881b      	ldrh	r3, [r3, #0]
   20886:	2b31      	cmp	r3, #49	; 0x31
   20888:	d9e5      	bls.n	20856 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   2088a:	693b      	ldr	r3, [r7, #16]
   2088c:	b2db      	uxtb	r3, r3
   2088e:	2202      	movs	r2, #2
   20890:	4013      	ands	r3, r2
   20892:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   20894:	687b      	ldr	r3, [r7, #4]
   20896:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   20898:	4b29      	ldr	r3, [pc, #164]	; (20940 <mmc_cmd8+0x120>)
   2089a:	681b      	ldr	r3, [r3, #0]
   2089c:	330e      	adds	r3, #14
   2089e:	0018      	movs	r0, r3
   208a0:	230c      	movs	r3, #12
   208a2:	223e      	movs	r2, #62	; 0x3e
   208a4:	2180      	movs	r1, #128	; 0x80
   208a6:	4c27      	ldr	r4, [pc, #156]	; (20944 <mmc_cmd8+0x124>)
   208a8:	47a0      	blx	r4
   208aa:	0002      	movs	r2, r0
   208ac:	4b26      	ldr	r3, [pc, #152]	; (20948 <mmc_cmd8+0x128>)
   208ae:	429a      	cmp	r2, r3
   208b0:	d135      	bne.n	2091e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   208b2:	e014      	b.n	208de <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   208b4:	230c      	movs	r3, #12
   208b6:	18fb      	adds	r3, r7, r3
   208b8:	0018      	movs	r0, r3
   208ba:	4b20      	ldr	r3, [pc, #128]	; (2093c <mmc_cmd8+0x11c>)
   208bc:	4798      	blx	r3
   208be:	0003      	movs	r3, r0
   208c0:	001a      	movs	r2, r3
   208c2:	2301      	movs	r3, #1
   208c4:	4053      	eors	r3, r2
   208c6:	b2db      	uxtb	r3, r3
   208c8:	2b00      	cmp	r3, #0
   208ca:	d001      	beq.n	208d0 <mmc_cmd8+0xb0>
				return false;
   208cc:	2300      	movs	r3, #0
   208ce:	e02c      	b.n	2092a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   208d0:	2316      	movs	r3, #22
   208d2:	18fb      	adds	r3, r7, r3
   208d4:	881a      	ldrh	r2, [r3, #0]
   208d6:	2316      	movs	r3, #22
   208d8:	18fb      	adds	r3, r7, r3
   208da:	3201      	adds	r2, #1
   208dc:	801a      	strh	r2, [r3, #0]
   208de:	2316      	movs	r3, #22
   208e0:	18fb      	adds	r3, r7, r3
   208e2:	881b      	ldrh	r3, [r3, #0]
   208e4:	2b35      	cmp	r3, #53	; 0x35
   208e6:	d9e5      	bls.n	208b4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   208e8:	4b15      	ldr	r3, [pc, #84]	; (20940 <mmc_cmd8+0x120>)
   208ea:	681b      	ldr	r3, [r3, #0]
   208ec:	68fa      	ldr	r2, [r7, #12]
   208ee:	0852      	lsrs	r2, r2, #1
   208f0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   208f2:	e014      	b.n	2091e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   208f4:	230c      	movs	r3, #12
   208f6:	18fb      	adds	r3, r7, r3
   208f8:	0018      	movs	r0, r3
   208fa:	4b10      	ldr	r3, [pc, #64]	; (2093c <mmc_cmd8+0x11c>)
   208fc:	4798      	blx	r3
   208fe:	0003      	movs	r3, r0
   20900:	001a      	movs	r2, r3
   20902:	2301      	movs	r3, #1
   20904:	4053      	eors	r3, r2
   20906:	b2db      	uxtb	r3, r3
   20908:	2b00      	cmp	r3, #0
   2090a:	d001      	beq.n	20910 <mmc_cmd8+0xf0>
			return false;
   2090c:	2300      	movs	r3, #0
   2090e:	e00c      	b.n	2092a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   20910:	2316      	movs	r3, #22
   20912:	18fb      	adds	r3, r7, r3
   20914:	881a      	ldrh	r2, [r3, #0]
   20916:	2316      	movs	r3, #22
   20918:	18fb      	adds	r3, r7, r3
   2091a:	3201      	adds	r2, #1
   2091c:	801a      	strh	r2, [r3, #0]
   2091e:	2316      	movs	r3, #22
   20920:	18fb      	adds	r3, r7, r3
   20922:	881b      	ldrh	r3, [r3, #0]
   20924:	2b7f      	cmp	r3, #127	; 0x7f
   20926:	d9e5      	bls.n	208f4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   20928:	2301      	movs	r3, #1
}
   2092a:	0018      	movs	r0, r3
   2092c:	46bd      	mov	sp, r7
   2092e:	b007      	add	sp, #28
   20930:	bd90      	pop	{r4, r7, pc}
   20932:	46c0      	nop			; (mov r8, r8)
   20934:	00081108 	.word	0x00081108
   20938:	00022071 	.word	0x00022071
   2093c:	0002229d 	.word	0x0002229d
   20940:	200040e8 	.word	0x200040e8
   20944:	000204b9 	.word	0x000204b9
   20948:	00000fff 	.word	0x00000fff

0002094c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   2094c:	b590      	push	{r4, r7, lr}
   2094e:	b083      	sub	sp, #12
   20950:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   20952:	4b15      	ldr	r3, [pc, #84]	; (209a8 <sd_mmc_cmd9_spi+0x5c>)
   20954:	681b      	ldr	r3, [r3, #0]
   20956:	891b      	ldrh	r3, [r3, #8]
   20958:	0419      	lsls	r1, r3, #16
   2095a:	4814      	ldr	r0, [pc, #80]	; (209ac <sd_mmc_cmd9_spi+0x60>)
   2095c:	2301      	movs	r3, #1
   2095e:	9300      	str	r3, [sp, #0]
   20960:	2301      	movs	r3, #1
   20962:	2210      	movs	r2, #16
   20964:	4c12      	ldr	r4, [pc, #72]	; (209b0 <sd_mmc_cmd9_spi+0x64>)
   20966:	47a0      	blx	r4
   20968:	0003      	movs	r3, r0
   2096a:	001a      	movs	r2, r3
   2096c:	2301      	movs	r3, #1
   2096e:	4053      	eors	r3, r2
   20970:	b2db      	uxtb	r3, r3
   20972:	2b00      	cmp	r3, #0
   20974:	d001      	beq.n	2097a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   20976:	2300      	movs	r3, #0
   20978:	e012      	b.n	209a0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   2097a:	4b0b      	ldr	r3, [pc, #44]	; (209a8 <sd_mmc_cmd9_spi+0x5c>)
   2097c:	681b      	ldr	r3, [r3, #0]
   2097e:	330e      	adds	r3, #14
   20980:	2101      	movs	r1, #1
   20982:	0018      	movs	r0, r3
   20984:	4b0b      	ldr	r3, [pc, #44]	; (209b4 <sd_mmc_cmd9_spi+0x68>)
   20986:	4798      	blx	r3
   20988:	0003      	movs	r3, r0
   2098a:	001a      	movs	r2, r3
   2098c:	2301      	movs	r3, #1
   2098e:	4053      	eors	r3, r2
   20990:	b2db      	uxtb	r3, r3
   20992:	2b00      	cmp	r3, #0
   20994:	d001      	beq.n	2099a <sd_mmc_cmd9_spi+0x4e>
		return false;
   20996:	2300      	movs	r3, #0
   20998:	e002      	b.n	209a0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   2099a:	4b07      	ldr	r3, [pc, #28]	; (209b8 <sd_mmc_cmd9_spi+0x6c>)
   2099c:	4798      	blx	r3
   2099e:	0003      	movs	r3, r0
}
   209a0:	0018      	movs	r0, r3
   209a2:	46bd      	mov	sp, r7
   209a4:	b001      	add	sp, #4
   209a6:	bd90      	pop	{r4, r7, pc}
   209a8:	200040e8 	.word	0x200040e8
   209ac:	00081109 	.word	0x00081109
   209b0:	00022071 	.word	0x00022071
   209b4:	00022341 	.word	0x00022341
   209b8:	000223e5 	.word	0x000223e5

000209bc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   209bc:	b5b0      	push	{r4, r5, r7, lr}
   209be:	b084      	sub	sp, #16
   209c0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   209c2:	4b45      	ldr	r3, [pc, #276]	; (20ad8 <mmc_decode_csd+0x11c>)
   209c4:	681b      	ldr	r3, [r3, #0]
   209c6:	330e      	adds	r3, #14
   209c8:	0018      	movs	r0, r3
   209ca:	2304      	movs	r3, #4
   209cc:	227a      	movs	r2, #122	; 0x7a
   209ce:	2180      	movs	r1, #128	; 0x80
   209d0:	4c42      	ldr	r4, [pc, #264]	; (20adc <mmc_decode_csd+0x120>)
   209d2:	47a0      	blx	r4
   209d4:	0003      	movs	r3, r0
   209d6:	2b02      	cmp	r3, #2
   209d8:	d011      	beq.n	209fe <mmc_decode_csd+0x42>
   209da:	d802      	bhi.n	209e2 <mmc_decode_csd+0x26>
   209dc:	2b01      	cmp	r3, #1
   209de:	d009      	beq.n	209f4 <mmc_decode_csd+0x38>
   209e0:	e003      	b.n	209ea <mmc_decode_csd+0x2e>
   209e2:	2b03      	cmp	r3, #3
   209e4:	d010      	beq.n	20a08 <mmc_decode_csd+0x4c>
   209e6:	2b04      	cmp	r3, #4
   209e8:	d013      	beq.n	20a12 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   209ea:	4b3b      	ldr	r3, [pc, #236]	; (20ad8 <mmc_decode_csd+0x11c>)
   209ec:	681b      	ldr	r3, [r3, #0]
   209ee:	2212      	movs	r2, #18
   209f0:	731a      	strb	r2, [r3, #12]
		break;
   209f2:	e013      	b.n	20a1c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   209f4:	4b38      	ldr	r3, [pc, #224]	; (20ad8 <mmc_decode_csd+0x11c>)
   209f6:	681b      	ldr	r3, [r3, #0]
   209f8:	2214      	movs	r2, #20
   209fa:	731a      	strb	r2, [r3, #12]
		break;
   209fc:	e00e      	b.n	20a1c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   209fe:	4b36      	ldr	r3, [pc, #216]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a00:	681b      	ldr	r3, [r3, #0]
   20a02:	2222      	movs	r2, #34	; 0x22
   20a04:	731a      	strb	r2, [r3, #12]
		break;
   20a06:	e009      	b.n	20a1c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   20a08:	4b33      	ldr	r3, [pc, #204]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a0a:	681b      	ldr	r3, [r3, #0]
   20a0c:	2230      	movs	r2, #48	; 0x30
   20a0e:	731a      	strb	r2, [r3, #12]
		break;
   20a10:	e004      	b.n	20a1c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   20a12:	4b31      	ldr	r3, [pc, #196]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a14:	681b      	ldr	r3, [r3, #0]
   20a16:	2240      	movs	r2, #64	; 0x40
   20a18:	731a      	strb	r2, [r3, #12]
		break;
   20a1a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   20a1c:	4b2e      	ldr	r3, [pc, #184]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a1e:	681b      	ldr	r3, [r3, #0]
   20a20:	330e      	adds	r3, #14
   20a22:	0018      	movs	r0, r3
   20a24:	2308      	movs	r3, #8
   20a26:	2260      	movs	r2, #96	; 0x60
   20a28:	2180      	movs	r1, #128	; 0x80
   20a2a:	4c2c      	ldr	r4, [pc, #176]	; (20adc <mmc_decode_csd+0x120>)
   20a2c:	47a0      	blx	r4
   20a2e:	0003      	movs	r3, r0
   20a30:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   20a32:	68fb      	ldr	r3, [r7, #12]
   20a34:	2207      	movs	r2, #7
   20a36:	401a      	ands	r2, r3
   20a38:	4b29      	ldr	r3, [pc, #164]	; (20ae0 <mmc_decode_csd+0x124>)
   20a3a:	0092      	lsls	r2, r2, #2
   20a3c:	58d3      	ldr	r3, [r2, r3]
   20a3e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   20a40:	68fb      	ldr	r3, [r7, #12]
   20a42:	08db      	lsrs	r3, r3, #3
   20a44:	220f      	movs	r2, #15
   20a46:	401a      	ands	r2, r3
   20a48:	4b26      	ldr	r3, [pc, #152]	; (20ae4 <mmc_decode_csd+0x128>)
   20a4a:	0092      	lsls	r2, r2, #2
   20a4c:	58d3      	ldr	r3, [r2, r3]
   20a4e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20a50:	4b21      	ldr	r3, [pc, #132]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a52:	681b      	ldr	r3, [r3, #0]
   20a54:	68ba      	ldr	r2, [r7, #8]
   20a56:	6879      	ldr	r1, [r7, #4]
   20a58:	434a      	muls	r2, r1
   20a5a:	21fa      	movs	r1, #250	; 0xfa
   20a5c:	0089      	lsls	r1, r1, #2
   20a5e:	434a      	muls	r2, r1
   20a60:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   20a62:	4b1d      	ldr	r3, [pc, #116]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a64:	681b      	ldr	r3, [r3, #0]
   20a66:	330e      	adds	r3, #14
   20a68:	0018      	movs	r0, r3
   20a6a:	230c      	movs	r3, #12
   20a6c:	223e      	movs	r2, #62	; 0x3e
   20a6e:	2180      	movs	r1, #128	; 0x80
   20a70:	4c1a      	ldr	r4, [pc, #104]	; (20adc <mmc_decode_csd+0x120>)
   20a72:	47a0      	blx	r4
   20a74:	0002      	movs	r2, r0
   20a76:	4b1c      	ldr	r3, [pc, #112]	; (20ae8 <mmc_decode_csd+0x12c>)
   20a78:	429a      	cmp	r2, r3
   20a7a:	d028      	beq.n	20ace <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20a7c:	4b16      	ldr	r3, [pc, #88]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a7e:	681b      	ldr	r3, [r3, #0]
   20a80:	330e      	adds	r3, #14
   20a82:	0018      	movs	r0, r3
   20a84:	230c      	movs	r3, #12
   20a86:	223e      	movs	r2, #62	; 0x3e
   20a88:	2180      	movs	r1, #128	; 0x80
   20a8a:	4c14      	ldr	r4, [pc, #80]	; (20adc <mmc_decode_csd+0x120>)
   20a8c:	47a0      	blx	r4
   20a8e:	0003      	movs	r3, r0
   20a90:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20a92:	4b11      	ldr	r3, [pc, #68]	; (20ad8 <mmc_decode_csd+0x11c>)
   20a94:	681b      	ldr	r3, [r3, #0]
   20a96:	330e      	adds	r3, #14
   20a98:	0018      	movs	r0, r3
   20a9a:	2303      	movs	r3, #3
   20a9c:	222f      	movs	r2, #47	; 0x2f
   20a9e:	2180      	movs	r1, #128	; 0x80
   20aa0:	4d0e      	ldr	r5, [pc, #56]	; (20adc <mmc_decode_csd+0x120>)
   20aa2:	47a8      	blx	r5
   20aa4:	0003      	movs	r3, r0
   20aa6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20aa8:	409c      	lsls	r4, r3
   20aaa:	0023      	movs	r3, r4
   20aac:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   20aae:	4b0a      	ldr	r3, [pc, #40]	; (20ad8 <mmc_decode_csd+0x11c>)
   20ab0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   20ab2:	4b09      	ldr	r3, [pc, #36]	; (20ad8 <mmc_decode_csd+0x11c>)
   20ab4:	681b      	ldr	r3, [r3, #0]
   20ab6:	330e      	adds	r3, #14
   20ab8:	0018      	movs	r0, r3
   20aba:	2304      	movs	r3, #4
   20abc:	2250      	movs	r2, #80	; 0x50
   20abe:	2180      	movs	r1, #128	; 0x80
   20ac0:	4d06      	ldr	r5, [pc, #24]	; (20adc <mmc_decode_csd+0x120>)
   20ac2:	47a8      	blx	r5
   20ac4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   20ac6:	683b      	ldr	r3, [r7, #0]
   20ac8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   20aca:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   20acc:	6063      	str	r3, [r4, #4]
	}
}
   20ace:	46c0      	nop			; (mov r8, r8)
   20ad0:	46bd      	mov	sp, r7
   20ad2:	b004      	add	sp, #16
   20ad4:	bdb0      	pop	{r4, r5, r7, pc}
   20ad6:	46c0      	nop			; (mov r8, r8)
   20ad8:	200040e8 	.word	0x200040e8
   20adc:	000204b9 	.word	0x000204b9
   20ae0:	0003b588 	.word	0x0003b588
   20ae4:	0003b5e4 	.word	0x0003b5e4
   20ae8:	00000fff 	.word	0x00000fff

00020aec <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   20aec:	b5b0      	push	{r4, r5, r7, lr}
   20aee:	b084      	sub	sp, #16
   20af0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   20af2:	4b35      	ldr	r3, [pc, #212]	; (20bc8 <sd_decode_csd+0xdc>)
   20af4:	681b      	ldr	r3, [r3, #0]
   20af6:	330e      	adds	r3, #14
   20af8:	0018      	movs	r0, r3
   20afa:	2308      	movs	r3, #8
   20afc:	2260      	movs	r2, #96	; 0x60
   20afe:	2180      	movs	r1, #128	; 0x80
   20b00:	4c32      	ldr	r4, [pc, #200]	; (20bcc <sd_decode_csd+0xe0>)
   20b02:	47a0      	blx	r4
   20b04:	0003      	movs	r3, r0
   20b06:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   20b08:	68fb      	ldr	r3, [r7, #12]
   20b0a:	2207      	movs	r2, #7
   20b0c:	401a      	ands	r2, r3
   20b0e:	4b30      	ldr	r3, [pc, #192]	; (20bd0 <sd_decode_csd+0xe4>)
   20b10:	0092      	lsls	r2, r2, #2
   20b12:	58d3      	ldr	r3, [r2, r3]
   20b14:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   20b16:	68fb      	ldr	r3, [r7, #12]
   20b18:	08db      	lsrs	r3, r3, #3
   20b1a:	220f      	movs	r2, #15
   20b1c:	401a      	ands	r2, r3
   20b1e:	4b2d      	ldr	r3, [pc, #180]	; (20bd4 <sd_decode_csd+0xe8>)
   20b20:	0092      	lsls	r2, r2, #2
   20b22:	58d3      	ldr	r3, [r2, r3]
   20b24:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20b26:	4b28      	ldr	r3, [pc, #160]	; (20bc8 <sd_decode_csd+0xdc>)
   20b28:	681b      	ldr	r3, [r3, #0]
   20b2a:	68ba      	ldr	r2, [r7, #8]
   20b2c:	6879      	ldr	r1, [r7, #4]
   20b2e:	434a      	muls	r2, r1
   20b30:	21fa      	movs	r1, #250	; 0xfa
   20b32:	0089      	lsls	r1, r1, #2
   20b34:	434a      	muls	r2, r1
   20b36:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   20b38:	4b23      	ldr	r3, [pc, #140]	; (20bc8 <sd_decode_csd+0xdc>)
   20b3a:	681b      	ldr	r3, [r3, #0]
   20b3c:	330e      	adds	r3, #14
   20b3e:	0018      	movs	r0, r3
   20b40:	2302      	movs	r3, #2
   20b42:	227e      	movs	r2, #126	; 0x7e
   20b44:	2180      	movs	r1, #128	; 0x80
   20b46:	4c21      	ldr	r4, [pc, #132]	; (20bcc <sd_decode_csd+0xe0>)
   20b48:	47a0      	blx	r4
   20b4a:	1e03      	subs	r3, r0, #0
   20b4c:	d00f      	beq.n	20b6e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   20b4e:	4b1e      	ldr	r3, [pc, #120]	; (20bc8 <sd_decode_csd+0xdc>)
   20b50:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   20b52:	4b1d      	ldr	r3, [pc, #116]	; (20bc8 <sd_decode_csd+0xdc>)
   20b54:	681b      	ldr	r3, [r3, #0]
   20b56:	330e      	adds	r3, #14
   20b58:	0018      	movs	r0, r3
   20b5a:	2316      	movs	r3, #22
   20b5c:	2230      	movs	r2, #48	; 0x30
   20b5e:	2180      	movs	r1, #128	; 0x80
   20b60:	4d1a      	ldr	r5, [pc, #104]	; (20bcc <sd_decode_csd+0xe0>)
   20b62:	47a8      	blx	r5
   20b64:	0003      	movs	r3, r0
				* 512;
   20b66:	3301      	adds	r3, #1
   20b68:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   20b6a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   20b6c:	e028      	b.n	20bc0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   20b6e:	4b16      	ldr	r3, [pc, #88]	; (20bc8 <sd_decode_csd+0xdc>)
   20b70:	681b      	ldr	r3, [r3, #0]
   20b72:	330e      	adds	r3, #14
   20b74:	0018      	movs	r0, r3
   20b76:	230c      	movs	r3, #12
   20b78:	223e      	movs	r2, #62	; 0x3e
   20b7a:	2180      	movs	r1, #128	; 0x80
   20b7c:	4c13      	ldr	r4, [pc, #76]	; (20bcc <sd_decode_csd+0xe0>)
   20b7e:	47a0      	blx	r4
   20b80:	0003      	movs	r3, r0
   20b82:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20b84:	4b10      	ldr	r3, [pc, #64]	; (20bc8 <sd_decode_csd+0xdc>)
   20b86:	681b      	ldr	r3, [r3, #0]
   20b88:	330e      	adds	r3, #14
   20b8a:	0018      	movs	r0, r3
   20b8c:	2303      	movs	r3, #3
   20b8e:	222f      	movs	r2, #47	; 0x2f
   20b90:	2180      	movs	r1, #128	; 0x80
   20b92:	4d0e      	ldr	r5, [pc, #56]	; (20bcc <sd_decode_csd+0xe0>)
   20b94:	47a8      	blx	r5
   20b96:	0003      	movs	r3, r0
   20b98:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   20b9a:	409c      	lsls	r4, r3
   20b9c:	0023      	movs	r3, r4
   20b9e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   20ba0:	4b09      	ldr	r3, [pc, #36]	; (20bc8 <sd_decode_csd+0xdc>)
   20ba2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   20ba4:	4b08      	ldr	r3, [pc, #32]	; (20bc8 <sd_decode_csd+0xdc>)
   20ba6:	681b      	ldr	r3, [r3, #0]
   20ba8:	330e      	adds	r3, #14
   20baa:	0018      	movs	r0, r3
   20bac:	2304      	movs	r3, #4
   20bae:	2250      	movs	r2, #80	; 0x50
   20bb0:	2180      	movs	r1, #128	; 0x80
   20bb2:	4d06      	ldr	r5, [pc, #24]	; (20bcc <sd_decode_csd+0xe0>)
   20bb4:	47a8      	blx	r5
   20bb6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   20bb8:	683b      	ldr	r3, [r7, #0]
   20bba:	4093      	lsls	r3, r2
				/ 1024;
   20bbc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   20bbe:	6063      	str	r3, [r4, #4]
}
   20bc0:	46c0      	nop			; (mov r8, r8)
   20bc2:	46bd      	mov	sp, r7
   20bc4:	b004      	add	sp, #16
   20bc6:	bdb0      	pop	{r4, r5, r7, pc}
   20bc8:	200040e8 	.word	0x200040e8
   20bcc:	000204b9 	.word	0x000204b9
   20bd0:	0003b588 	.word	0x0003b588
   20bd4:	0003b5a4 	.word	0x0003b5a4

00020bd8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   20bd8:	b580      	push	{r7, lr}
   20bda:	b082      	sub	sp, #8
   20bdc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   20bde:	4b11      	ldr	r3, [pc, #68]	; (20c24 <sd_mmc_cmd13+0x4c>)
   20be0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   20be2:	4b11      	ldr	r3, [pc, #68]	; (20c28 <sd_mmc_cmd13+0x50>)
   20be4:	2100      	movs	r1, #0
   20be6:	0018      	movs	r0, r3
   20be8:	4b10      	ldr	r3, [pc, #64]	; (20c2c <sd_mmc_cmd13+0x54>)
   20bea:	4798      	blx	r3
   20bec:	0003      	movs	r3, r0
   20bee:	001a      	movs	r2, r3
   20bf0:	2301      	movs	r3, #1
   20bf2:	4053      	eors	r3, r2
   20bf4:	b2db      	uxtb	r3, r3
   20bf6:	2b00      	cmp	r3, #0
   20bf8:	d001      	beq.n	20bfe <sd_mmc_cmd13+0x26>
				return false;
   20bfa:	2300      	movs	r3, #0
   20bfc:	e00e      	b.n	20c1c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   20bfe:	4b0c      	ldr	r3, [pc, #48]	; (20c30 <sd_mmc_cmd13+0x58>)
   20c00:	4798      	blx	r3
   20c02:	0002      	movs	r2, r0
   20c04:	23ff      	movs	r3, #255	; 0xff
   20c06:	4013      	ands	r3, r2
   20c08:	d006      	beq.n	20c18 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   20c0a:	687b      	ldr	r3, [r7, #4]
   20c0c:	1e5a      	subs	r2, r3, #1
   20c0e:	607a      	str	r2, [r7, #4]
   20c10:	2b00      	cmp	r3, #0
   20c12:	d1e6      	bne.n	20be2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   20c14:	2300      	movs	r3, #0
   20c16:	e001      	b.n	20c1c <sd_mmc_cmd13+0x44>
				break;
   20c18:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   20c1a:	2301      	movs	r3, #1
}
   20c1c:	0018      	movs	r0, r3
   20c1e:	46bd      	mov	sp, r7
   20c20:	b002      	add	sp, #8
   20c22:	bd80      	pop	{r7, pc}
   20c24:	00030d40 	.word	0x00030d40
   20c28:	00001b0d 	.word	0x00001b0d
   20c2c:	00022049 	.word	0x00022049
   20c30:	00022289 	.word	0x00022289

00020c34 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   20c34:	b590      	push	{r4, r7, lr}
   20c36:	b085      	sub	sp, #20
   20c38:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   20c3a:	4b38      	ldr	r3, [pc, #224]	; (20d1c <sd_acmd51+0xe8>)
   20c3c:	681b      	ldr	r3, [r3, #0]
   20c3e:	891b      	ldrh	r3, [r3, #8]
   20c40:	041b      	lsls	r3, r3, #16
   20c42:	4a37      	ldr	r2, [pc, #220]	; (20d20 <sd_acmd51+0xec>)
   20c44:	0019      	movs	r1, r3
   20c46:	0010      	movs	r0, r2
   20c48:	4b36      	ldr	r3, [pc, #216]	; (20d24 <sd_acmd51+0xf0>)
   20c4a:	4798      	blx	r3
   20c4c:	0003      	movs	r3, r0
   20c4e:	001a      	movs	r2, r3
   20c50:	2301      	movs	r3, #1
   20c52:	4053      	eors	r3, r2
   20c54:	b2db      	uxtb	r3, r3
   20c56:	2b00      	cmp	r3, #0
   20c58:	d001      	beq.n	20c5e <sd_acmd51+0x2a>
		return false;
   20c5a:	2300      	movs	r3, #0
   20c5c:	e059      	b.n	20d12 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   20c5e:	4832      	ldr	r0, [pc, #200]	; (20d28 <sd_acmd51+0xf4>)
   20c60:	2301      	movs	r3, #1
   20c62:	9300      	str	r3, [sp, #0]
   20c64:	2301      	movs	r3, #1
   20c66:	2208      	movs	r2, #8
   20c68:	2100      	movs	r1, #0
   20c6a:	4c30      	ldr	r4, [pc, #192]	; (20d2c <sd_acmd51+0xf8>)
   20c6c:	47a0      	blx	r4
   20c6e:	0003      	movs	r3, r0
   20c70:	001a      	movs	r2, r3
   20c72:	2301      	movs	r3, #1
   20c74:	4053      	eors	r3, r2
   20c76:	b2db      	uxtb	r3, r3
   20c78:	2b00      	cmp	r3, #0
   20c7a:	d001      	beq.n	20c80 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   20c7c:	2300      	movs	r3, #0
   20c7e:	e048      	b.n	20d12 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   20c80:	003b      	movs	r3, r7
   20c82:	2101      	movs	r1, #1
   20c84:	0018      	movs	r0, r3
   20c86:	4b2a      	ldr	r3, [pc, #168]	; (20d30 <sd_acmd51+0xfc>)
   20c88:	4798      	blx	r3
   20c8a:	0003      	movs	r3, r0
   20c8c:	001a      	movs	r2, r3
   20c8e:	2301      	movs	r3, #1
   20c90:	4053      	eors	r3, r2
   20c92:	b2db      	uxtb	r3, r3
   20c94:	2b00      	cmp	r3, #0
   20c96:	d001      	beq.n	20c9c <sd_acmd51+0x68>
		return false;
   20c98:	2300      	movs	r3, #0
   20c9a:	e03a      	b.n	20d12 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   20c9c:	4b25      	ldr	r3, [pc, #148]	; (20d34 <sd_acmd51+0x100>)
   20c9e:	4798      	blx	r3
   20ca0:	0003      	movs	r3, r0
   20ca2:	001a      	movs	r2, r3
   20ca4:	2301      	movs	r3, #1
   20ca6:	4053      	eors	r3, r2
   20ca8:	b2db      	uxtb	r3, r3
   20caa:	2b00      	cmp	r3, #0
   20cac:	d001      	beq.n	20cb2 <sd_acmd51+0x7e>
		return false;
   20cae:	2300      	movs	r3, #0
   20cb0:	e02f      	b.n	20d12 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   20cb2:	0038      	movs	r0, r7
   20cb4:	2304      	movs	r3, #4
   20cb6:	2238      	movs	r2, #56	; 0x38
   20cb8:	2140      	movs	r1, #64	; 0x40
   20cba:	4c1f      	ldr	r4, [pc, #124]	; (20d38 <sd_acmd51+0x104>)
   20cbc:	47a0      	blx	r4
   20cbe:	0003      	movs	r3, r0
   20cc0:	2b01      	cmp	r3, #1
   20cc2:	d008      	beq.n	20cd6 <sd_acmd51+0xa2>
   20cc4:	d302      	bcc.n	20ccc <sd_acmd51+0x98>
   20cc6:	2b02      	cmp	r3, #2
   20cc8:	d00a      	beq.n	20ce0 <sd_acmd51+0xac>
   20cca:	e01c      	b.n	20d06 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   20ccc:	4b13      	ldr	r3, [pc, #76]	; (20d1c <sd_acmd51+0xe8>)
   20cce:	681b      	ldr	r3, [r3, #0]
   20cd0:	2210      	movs	r2, #16
   20cd2:	731a      	strb	r2, [r3, #12]
		break;
   20cd4:	e01c      	b.n	20d10 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   20cd6:	4b11      	ldr	r3, [pc, #68]	; (20d1c <sd_acmd51+0xe8>)
   20cd8:	681b      	ldr	r3, [r3, #0]
   20cda:	221a      	movs	r2, #26
   20cdc:	731a      	strb	r2, [r3, #12]
		break;
   20cde:	e017      	b.n	20d10 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   20ce0:	0038      	movs	r0, r7
   20ce2:	2301      	movs	r3, #1
   20ce4:	222f      	movs	r2, #47	; 0x2f
   20ce6:	2140      	movs	r1, #64	; 0x40
   20ce8:	4c13      	ldr	r4, [pc, #76]	; (20d38 <sd_acmd51+0x104>)
   20cea:	47a0      	blx	r4
   20cec:	0003      	movs	r3, r0
   20cee:	2b01      	cmp	r3, #1
   20cf0:	d104      	bne.n	20cfc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   20cf2:	4b0a      	ldr	r3, [pc, #40]	; (20d1c <sd_acmd51+0xe8>)
   20cf4:	681b      	ldr	r3, [r3, #0]
   20cf6:	2230      	movs	r2, #48	; 0x30
   20cf8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   20cfa:	e009      	b.n	20d10 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   20cfc:	4b07      	ldr	r3, [pc, #28]	; (20d1c <sd_acmd51+0xe8>)
   20cfe:	681b      	ldr	r3, [r3, #0]
   20d00:	2220      	movs	r2, #32
   20d02:	731a      	strb	r2, [r3, #12]
		break;
   20d04:	e004      	b.n	20d10 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   20d06:	4b05      	ldr	r3, [pc, #20]	; (20d1c <sd_acmd51+0xe8>)
   20d08:	681b      	ldr	r3, [r3, #0]
   20d0a:	2210      	movs	r2, #16
   20d0c:	731a      	strb	r2, [r3, #12]
		break;
   20d0e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20d10:	2301      	movs	r3, #1
}
   20d12:	0018      	movs	r0, r3
   20d14:	46bd      	mov	sp, r7
   20d16:	b003      	add	sp, #12
   20d18:	bd90      	pop	{r4, r7, pc}
   20d1a:	46c0      	nop			; (mov r8, r8)
   20d1c:	200040e8 	.word	0x200040e8
   20d20:	00001137 	.word	0x00001137
   20d24:	00022049 	.word	0x00022049
   20d28:	00081133 	.word	0x00081133
   20d2c:	00022071 	.word	0x00022071
   20d30:	00022341 	.word	0x00022341
   20d34:	000223e5 	.word	0x000223e5
   20d38:	000204b9 	.word	0x000204b9

00020d3c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   20d3c:	b580      	push	{r7, lr}
   20d3e:	b082      	sub	sp, #8
   20d40:	af00      	add	r7, sp, #0
   20d42:	0002      	movs	r2, r0
   20d44:	1dfb      	adds	r3, r7, #7
   20d46:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   20d48:	1dfb      	adds	r3, r7, #7
   20d4a:	781b      	ldrb	r3, [r3, #0]
   20d4c:	2b00      	cmp	r3, #0
   20d4e:	d001      	beq.n	20d54 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   20d50:	2304      	movs	r3, #4
   20d52:	e047      	b.n	20de4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   20d54:	1dfb      	adds	r3, r7, #7
   20d56:	781b      	ldrb	r3, [r3, #0]
   20d58:	4a24      	ldr	r2, [pc, #144]	; (20dec <sd_mmc_select_slot+0xb0>)
   20d5a:	015b      	lsls	r3, r3, #5
   20d5c:	18d3      	adds	r3, r2, r3
   20d5e:	330a      	adds	r3, #10
   20d60:	781b      	ldrb	r3, [r3, #0]
   20d62:	2b04      	cmp	r3, #4
   20d64:	d008      	beq.n	20d78 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   20d66:	1dfb      	adds	r3, r7, #7
   20d68:	781b      	ldrb	r3, [r3, #0]
   20d6a:	4a20      	ldr	r2, [pc, #128]	; (20dec <sd_mmc_select_slot+0xb0>)
   20d6c:	015b      	lsls	r3, r3, #5
   20d6e:	18d3      	adds	r3, r2, r3
   20d70:	330a      	adds	r3, #10
   20d72:	781b      	ldrb	r3, [r3, #0]
   20d74:	2b03      	cmp	r3, #3
   20d76:	d11d      	bne.n	20db4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   20d78:	1dfb      	adds	r3, r7, #7
   20d7a:	781b      	ldrb	r3, [r3, #0]
   20d7c:	4a1b      	ldr	r2, [pc, #108]	; (20dec <sd_mmc_select_slot+0xb0>)
   20d7e:	015b      	lsls	r3, r3, #5
   20d80:	18d3      	adds	r3, r2, r3
   20d82:	330a      	adds	r3, #10
   20d84:	2202      	movs	r2, #2
   20d86:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   20d88:	1dfb      	adds	r3, r7, #7
   20d8a:	781a      	ldrb	r2, [r3, #0]
   20d8c:	4b17      	ldr	r3, [pc, #92]	; (20dec <sd_mmc_select_slot+0xb0>)
   20d8e:	0152      	lsls	r2, r2, #5
   20d90:	4917      	ldr	r1, [pc, #92]	; (20df0 <sd_mmc_select_slot+0xb4>)
   20d92:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   20d94:	1dfb      	adds	r3, r7, #7
   20d96:	781b      	ldrb	r3, [r3, #0]
   20d98:	4a14      	ldr	r2, [pc, #80]	; (20dec <sd_mmc_select_slot+0xb0>)
   20d9a:	015b      	lsls	r3, r3, #5
   20d9c:	18d3      	adds	r3, r2, r3
   20d9e:	330d      	adds	r3, #13
   20da0:	2201      	movs	r2, #1
   20da2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   20da4:	1dfb      	adds	r3, r7, #7
   20da6:	781b      	ldrb	r3, [r3, #0]
   20da8:	4a10      	ldr	r2, [pc, #64]	; (20dec <sd_mmc_select_slot+0xb0>)
   20daa:	015b      	lsls	r3, r3, #5
   20dac:	18d3      	adds	r3, r2, r3
   20dae:	331e      	adds	r3, #30
   20db0:	2200      	movs	r2, #0
   20db2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   20db4:	4b0f      	ldr	r3, [pc, #60]	; (20df4 <sd_mmc_select_slot+0xb8>)
   20db6:	1dfa      	adds	r2, r7, #7
   20db8:	7812      	ldrb	r2, [r2, #0]
   20dba:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   20dbc:	1dfb      	adds	r3, r7, #7
   20dbe:	781b      	ldrb	r3, [r3, #0]
   20dc0:	015a      	lsls	r2, r3, #5
   20dc2:	4b0a      	ldr	r3, [pc, #40]	; (20dec <sd_mmc_select_slot+0xb0>)
   20dc4:	18d2      	adds	r2, r2, r3
   20dc6:	4b0c      	ldr	r3, [pc, #48]	; (20df8 <sd_mmc_select_slot+0xbc>)
   20dc8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   20dca:	4b0c      	ldr	r3, [pc, #48]	; (20dfc <sd_mmc_select_slot+0xc0>)
   20dcc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   20dce:	1dfb      	adds	r3, r7, #7
   20dd0:	781b      	ldrb	r3, [r3, #0]
   20dd2:	4a06      	ldr	r2, [pc, #24]	; (20dec <sd_mmc_select_slot+0xb0>)
   20dd4:	015b      	lsls	r3, r3, #5
   20dd6:	18d3      	adds	r3, r2, r3
   20dd8:	330a      	adds	r3, #10
   20dda:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   20ddc:	3b02      	subs	r3, #2
   20dde:	425a      	negs	r2, r3
   20de0:	4153      	adcs	r3, r2
   20de2:	b2db      	uxtb	r3, r3
}
   20de4:	0018      	movs	r0, r3
   20de6:	46bd      	mov	sp, r7
   20de8:	b002      	add	sp, #8
   20dea:	bd80      	pop	{r7, pc}
   20dec:	200040c4 	.word	0x200040c4
   20df0:	00061a80 	.word	0x00061a80
   20df4:	200040e4 	.word	0x200040e4
   20df8:	200040e8 	.word	0x200040e8
   20dfc:	00020e01 	.word	0x00020e01

00020e00 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   20e00:	b5b0      	push	{r4, r5, r7, lr}
   20e02:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20e04:	4b09      	ldr	r3, [pc, #36]	; (20e2c <sd_mmc_configure_slot+0x2c>)
   20e06:	7818      	ldrb	r0, [r3, #0]
   20e08:	4b09      	ldr	r3, [pc, #36]	; (20e30 <sd_mmc_configure_slot+0x30>)
   20e0a:	681b      	ldr	r3, [r3, #0]
   20e0c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20e0e:	4b08      	ldr	r3, [pc, #32]	; (20e30 <sd_mmc_configure_slot+0x30>)
   20e10:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20e12:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20e14:	4b06      	ldr	r3, [pc, #24]	; (20e30 <sd_mmc_configure_slot+0x30>)
   20e16:	681b      	ldr	r3, [r3, #0]
   20e18:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20e1a:	1e5c      	subs	r4, r3, #1
   20e1c:	41a3      	sbcs	r3, r4
   20e1e:	b2db      	uxtb	r3, r3
   20e20:	4c04      	ldr	r4, [pc, #16]	; (20e34 <sd_mmc_configure_slot+0x34>)
   20e22:	47a0      	blx	r4
}
   20e24:	46c0      	nop			; (mov r8, r8)
   20e26:	46bd      	mov	sp, r7
   20e28:	bdb0      	pop	{r4, r5, r7, pc}
   20e2a:	46c0      	nop			; (mov r8, r8)
   20e2c:	200040e4 	.word	0x200040e4
   20e30:	200040e8 	.word	0x200040e8
   20e34:	00021f31 	.word	0x00021f31

00020e38 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   20e38:	b580      	push	{r7, lr}
   20e3a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   20e3c:	4b05      	ldr	r3, [pc, #20]	; (20e54 <sd_mmc_deselect_slot+0x1c>)
   20e3e:	781b      	ldrb	r3, [r3, #0]
   20e40:	2b00      	cmp	r3, #0
   20e42:	d104      	bne.n	20e4e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   20e44:	4b03      	ldr	r3, [pc, #12]	; (20e54 <sd_mmc_deselect_slot+0x1c>)
   20e46:	781b      	ldrb	r3, [r3, #0]
   20e48:	0018      	movs	r0, r3
   20e4a:	4b03      	ldr	r3, [pc, #12]	; (20e58 <sd_mmc_deselect_slot+0x20>)
   20e4c:	4798      	blx	r3
	}
}
   20e4e:	46c0      	nop			; (mov r8, r8)
   20e50:	46bd      	mov	sp, r7
   20e52:	bd80      	pop	{r7, pc}
   20e54:	200040e4 	.word	0x200040e4
   20e58:	00021fb9 	.word	0x00021fb9

00020e5c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   20e5c:	b580      	push	{r7, lr}
   20e5e:	b082      	sub	sp, #8
   20e60:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   20e62:	1dfb      	adds	r3, r7, #7
   20e64:	2200      	movs	r2, #0
   20e66:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   20e68:	4b59      	ldr	r3, [pc, #356]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20e6a:	681b      	ldr	r3, [r3, #0]
   20e6c:	2201      	movs	r2, #1
   20e6e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   20e70:	4b57      	ldr	r3, [pc, #348]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20e72:	681b      	ldr	r3, [r3, #0]
   20e74:	2200      	movs	r2, #0
   20e76:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   20e78:	4b55      	ldr	r3, [pc, #340]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20e7a:	681b      	ldr	r3, [r3, #0]
   20e7c:	2200      	movs	r2, #0
   20e7e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   20e80:	4b54      	ldr	r3, [pc, #336]	; (20fd4 <sd_mmc_spi_card_init+0x178>)
   20e82:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   20e84:	2388      	movs	r3, #136	; 0x88
   20e86:	015b      	lsls	r3, r3, #5
   20e88:	2100      	movs	r1, #0
   20e8a:	0018      	movs	r0, r3
   20e8c:	4b52      	ldr	r3, [pc, #328]	; (20fd8 <sd_mmc_spi_card_init+0x17c>)
   20e8e:	4798      	blx	r3
   20e90:	0003      	movs	r3, r0
   20e92:	001a      	movs	r2, r3
   20e94:	2301      	movs	r3, #1
   20e96:	4053      	eors	r3, r2
   20e98:	b2db      	uxtb	r3, r3
   20e9a:	2b00      	cmp	r3, #0
   20e9c:	d001      	beq.n	20ea2 <sd_mmc_spi_card_init+0x46>
		return false;
   20e9e:	2300      	movs	r3, #0
   20ea0:	e092      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   20ea2:	1dfb      	adds	r3, r7, #7
   20ea4:	0018      	movs	r0, r3
   20ea6:	4b4d      	ldr	r3, [pc, #308]	; (20fdc <sd_mmc_spi_card_init+0x180>)
   20ea8:	4798      	blx	r3
   20eaa:	0003      	movs	r3, r0
   20eac:	001a      	movs	r2, r3
   20eae:	2301      	movs	r3, #1
   20eb0:	4053      	eors	r3, r2
   20eb2:	b2db      	uxtb	r3, r3
   20eb4:	2b00      	cmp	r3, #0
   20eb6:	d001      	beq.n	20ebc <sd_mmc_spi_card_init+0x60>
		return false;
   20eb8:	2300      	movs	r3, #0
   20eba:	e085      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   20ebc:	4b48      	ldr	r3, [pc, #288]	; (20fe0 <sd_mmc_spi_card_init+0x184>)
   20ebe:	4798      	blx	r3
   20ec0:	0003      	movs	r3, r0
   20ec2:	001a      	movs	r2, r3
   20ec4:	2301      	movs	r3, #1
   20ec6:	4053      	eors	r3, r2
   20ec8:	b2db      	uxtb	r3, r3
   20eca:	2b00      	cmp	r3, #0
   20ecc:	d001      	beq.n	20ed2 <sd_mmc_spi_card_init+0x76>
		return false;
   20ece:	2300      	movs	r3, #0
   20ed0:	e07a      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20ed2:	4b3f      	ldr	r3, [pc, #252]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20ed4:	681b      	ldr	r3, [r3, #0]
   20ed6:	7adb      	ldrb	r3, [r3, #11]
   20ed8:	001a      	movs	r2, r3
   20eda:	2301      	movs	r3, #1
   20edc:	4013      	ands	r3, r2
   20ede:	d021      	beq.n	20f24 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   20ee0:	1dfb      	adds	r3, r7, #7
   20ee2:	781b      	ldrb	r3, [r3, #0]
   20ee4:	0018      	movs	r0, r3
   20ee6:	4b3f      	ldr	r3, [pc, #252]	; (20fe4 <sd_mmc_spi_card_init+0x188>)
   20ee8:	4798      	blx	r3
   20eea:	0003      	movs	r3, r0
   20eec:	001a      	movs	r2, r3
   20eee:	2301      	movs	r3, #1
   20ef0:	4053      	eors	r3, r2
   20ef2:	b2db      	uxtb	r3, r3
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	d007      	beq.n	20f08 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   20ef8:	4b35      	ldr	r3, [pc, #212]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20efa:	681b      	ldr	r3, [r3, #0]
   20efc:	2202      	movs	r2, #2
   20efe:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   20f00:	4b39      	ldr	r3, [pc, #228]	; (20fe8 <sd_mmc_spi_card_init+0x18c>)
   20f02:	4798      	blx	r3
   20f04:	0003      	movs	r3, r0
   20f06:	e05f      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   20f08:	4b38      	ldr	r3, [pc, #224]	; (20fec <sd_mmc_spi_card_init+0x190>)
   20f0a:	2100      	movs	r1, #0
   20f0c:	0018      	movs	r0, r3
   20f0e:	4b32      	ldr	r3, [pc, #200]	; (20fd8 <sd_mmc_spi_card_init+0x17c>)
   20f10:	4798      	blx	r3
   20f12:	0003      	movs	r3, r0
   20f14:	001a      	movs	r2, r3
   20f16:	2301      	movs	r3, #1
   20f18:	4053      	eors	r3, r2
   20f1a:	b2db      	uxtb	r3, r3
   20f1c:	2b00      	cmp	r3, #0
   20f1e:	d001      	beq.n	20f24 <sd_mmc_spi_card_init+0xc8>
			return false;
   20f20:	2300      	movs	r3, #0
   20f22:	e051      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20f24:	4b2a      	ldr	r3, [pc, #168]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20f26:	681b      	ldr	r3, [r3, #0]
   20f28:	7adb      	ldrb	r3, [r3, #11]
   20f2a:	001a      	movs	r2, r3
   20f2c:	2301      	movs	r3, #1
   20f2e:	4013      	ands	r3, r2
   20f30:	d017      	beq.n	20f62 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   20f32:	4b2f      	ldr	r3, [pc, #188]	; (20ff0 <sd_mmc_spi_card_init+0x194>)
   20f34:	4798      	blx	r3
   20f36:	0003      	movs	r3, r0
   20f38:	001a      	movs	r2, r3
   20f3a:	2301      	movs	r3, #1
   20f3c:	4053      	eors	r3, r2
   20f3e:	b2db      	uxtb	r3, r3
   20f40:	2b00      	cmp	r3, #0
   20f42:	d001      	beq.n	20f48 <sd_mmc_spi_card_init+0xec>
			return false;
   20f44:	2300      	movs	r3, #0
   20f46:	e03f      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   20f48:	4b2a      	ldr	r3, [pc, #168]	; (20ff4 <sd_mmc_spi_card_init+0x198>)
   20f4a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   20f4c:	4b2a      	ldr	r3, [pc, #168]	; (20ff8 <sd_mmc_spi_card_init+0x19c>)
   20f4e:	4798      	blx	r3
   20f50:	0003      	movs	r3, r0
   20f52:	001a      	movs	r2, r3
   20f54:	2301      	movs	r3, #1
   20f56:	4053      	eors	r3, r2
   20f58:	b2db      	uxtb	r3, r3
   20f5a:	2b00      	cmp	r3, #0
   20f5c:	d001      	beq.n	20f62 <sd_mmc_spi_card_init+0x106>
			return false;
   20f5e:	2300      	movs	r3, #0
   20f60:	e032      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20f62:	4b1b      	ldr	r3, [pc, #108]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20f64:	681b      	ldr	r3, [r3, #0]
   20f66:	7adb      	ldrb	r3, [r3, #11]
   20f68:	001a      	movs	r2, r3
   20f6a:	2301      	movs	r3, #1
   20f6c:	4013      	ands	r3, r2
   20f6e:	d016      	beq.n	20f9e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   20f70:	4b17      	ldr	r3, [pc, #92]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20f72:	681b      	ldr	r3, [r3, #0]
   20f74:	7adb      	ldrb	r3, [r3, #11]
   20f76:	001a      	movs	r2, r3
   20f78:	2308      	movs	r3, #8
   20f7a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20f7c:	d10f      	bne.n	20f9e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   20f7e:	2380      	movs	r3, #128	; 0x80
   20f80:	009b      	lsls	r3, r3, #2
   20f82:	4a1e      	ldr	r2, [pc, #120]	; (20ffc <sd_mmc_spi_card_init+0x1a0>)
   20f84:	0019      	movs	r1, r3
   20f86:	0010      	movs	r0, r2
   20f88:	4b13      	ldr	r3, [pc, #76]	; (20fd8 <sd_mmc_spi_card_init+0x17c>)
   20f8a:	4798      	blx	r3
   20f8c:	0003      	movs	r3, r0
   20f8e:	001a      	movs	r2, r3
   20f90:	2301      	movs	r3, #1
   20f92:	4053      	eors	r3, r2
   20f94:	b2db      	uxtb	r3, r3
   20f96:	2b00      	cmp	r3, #0
   20f98:	d001      	beq.n	20f9e <sd_mmc_spi_card_init+0x142>
			return false;
   20f9a:	2300      	movs	r3, #0
   20f9c:	e014      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20f9e:	4b0c      	ldr	r3, [pc, #48]	; (20fd0 <sd_mmc_spi_card_init+0x174>)
   20fa0:	681b      	ldr	r3, [r3, #0]
   20fa2:	7adb      	ldrb	r3, [r3, #11]
   20fa4:	001a      	movs	r2, r3
   20fa6:	2301      	movs	r3, #1
   20fa8:	4013      	ands	r3, r2
   20faa:	d00a      	beq.n	20fc2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   20fac:	4b14      	ldr	r3, [pc, #80]	; (21000 <sd_mmc_spi_card_init+0x1a4>)
   20fae:	4798      	blx	r3
   20fb0:	0003      	movs	r3, r0
   20fb2:	001a      	movs	r2, r3
   20fb4:	2301      	movs	r3, #1
   20fb6:	4053      	eors	r3, r2
   20fb8:	b2db      	uxtb	r3, r3
   20fba:	2b00      	cmp	r3, #0
   20fbc:	d001      	beq.n	20fc2 <sd_mmc_spi_card_init+0x166>
			return false;
   20fbe:	2300      	movs	r3, #0
   20fc0:	e002      	b.n	20fc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   20fc2:	4b10      	ldr	r3, [pc, #64]	; (21004 <sd_mmc_spi_card_init+0x1a8>)
   20fc4:	4798      	blx	r3
	return true;
   20fc6:	2301      	movs	r3, #1
}
   20fc8:	0018      	movs	r0, r3
   20fca:	46bd      	mov	sp, r7
   20fcc:	b002      	add	sp, #8
   20fce:	bd80      	pop	{r7, pc}
   20fd0:	200040e8 	.word	0x200040e8
   20fd4:	00021ffd 	.word	0x00021ffd
   20fd8:	00022049 	.word	0x00022049
   20fdc:	000207b1 	.word	0x000207b1
   20fe0:	000207a5 	.word	0x000207a5
   20fe4:	000206c1 	.word	0x000206c1
   20fe8:	00021009 	.word	0x00021009
   20fec:	0000113b 	.word	0x0000113b
   20ff0:	0002094d 	.word	0x0002094d
   20ff4:	00020aed 	.word	0x00020aed
   20ff8:	00020c35 	.word	0x00020c35
   20ffc:	00001110 	.word	0x00001110
   21000:	00020bd9 	.word	0x00020bd9
   21004:	00020e01 	.word	0x00020e01

00021008 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   21008:	b580      	push	{r7, lr}
   2100a:	b082      	sub	sp, #8
   2100c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   2100e:	2388      	movs	r3, #136	; 0x88
   21010:	015b      	lsls	r3, r3, #5
   21012:	2100      	movs	r1, #0
   21014:	0018      	movs	r0, r3
   21016:	4b32      	ldr	r3, [pc, #200]	; (210e0 <sd_mmc_spi_install_mmc+0xd8>)
   21018:	4798      	blx	r3
   2101a:	0003      	movs	r3, r0
   2101c:	001a      	movs	r2, r3
   2101e:	2301      	movs	r3, #1
   21020:	4053      	eors	r3, r2
   21022:	b2db      	uxtb	r3, r3
   21024:	2b00      	cmp	r3, #0
   21026:	d001      	beq.n	2102c <sd_mmc_spi_install_mmc+0x24>
		return false;
   21028:	2300      	movs	r3, #0
   2102a:	e055      	b.n	210d8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   2102c:	4b2d      	ldr	r3, [pc, #180]	; (210e4 <sd_mmc_spi_install_mmc+0xdc>)
   2102e:	4798      	blx	r3
   21030:	0003      	movs	r3, r0
   21032:	001a      	movs	r2, r3
   21034:	2301      	movs	r3, #1
   21036:	4053      	eors	r3, r2
   21038:	b2db      	uxtb	r3, r3
   2103a:	2b00      	cmp	r3, #0
   2103c:	d001      	beq.n	21042 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   2103e:	2300      	movs	r3, #0
   21040:	e04a      	b.n	210d8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   21042:	4b29      	ldr	r3, [pc, #164]	; (210e8 <sd_mmc_spi_install_mmc+0xe0>)
   21044:	2100      	movs	r1, #0
   21046:	0018      	movs	r0, r3
   21048:	4b25      	ldr	r3, [pc, #148]	; (210e0 <sd_mmc_spi_install_mmc+0xd8>)
   2104a:	4798      	blx	r3
   2104c:	0003      	movs	r3, r0
   2104e:	001a      	movs	r2, r3
   21050:	2301      	movs	r3, #1
   21052:	4053      	eors	r3, r2
   21054:	b2db      	uxtb	r3, r3
   21056:	2b00      	cmp	r3, #0
   21058:	d001      	beq.n	2105e <sd_mmc_spi_install_mmc+0x56>
		return false;
   2105a:	2300      	movs	r3, #0
   2105c:	e03c      	b.n	210d8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   2105e:	4b23      	ldr	r3, [pc, #140]	; (210ec <sd_mmc_spi_install_mmc+0xe4>)
   21060:	4798      	blx	r3
   21062:	0003      	movs	r3, r0
   21064:	001a      	movs	r2, r3
   21066:	2301      	movs	r3, #1
   21068:	4053      	eors	r3, r2
   2106a:	b2db      	uxtb	r3, r3
   2106c:	2b00      	cmp	r3, #0
   2106e:	d001      	beq.n	21074 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   21070:	2300      	movs	r3, #0
   21072:	e031      	b.n	210d8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   21074:	4b1e      	ldr	r3, [pc, #120]	; (210f0 <sd_mmc_spi_install_mmc+0xe8>)
   21076:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   21078:	4b1e      	ldr	r3, [pc, #120]	; (210f4 <sd_mmc_spi_install_mmc+0xec>)
   2107a:	681b      	ldr	r3, [r3, #0]
   2107c:	7b1b      	ldrb	r3, [r3, #12]
   2107e:	2b3f      	cmp	r3, #63	; 0x3f
   21080:	d90c      	bls.n	2109c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   21082:	1dfb      	adds	r3, r7, #7
   21084:	0018      	movs	r0, r3
   21086:	4b1c      	ldr	r3, [pc, #112]	; (210f8 <sd_mmc_spi_install_mmc+0xf0>)
   21088:	4798      	blx	r3
   2108a:	0003      	movs	r3, r0
   2108c:	001a      	movs	r2, r3
   2108e:	2301      	movs	r3, #1
   21090:	4053      	eors	r3, r2
   21092:	b2db      	uxtb	r3, r3
   21094:	2b00      	cmp	r3, #0
   21096:	d001      	beq.n	2109c <sd_mmc_spi_install_mmc+0x94>
			return false;
   21098:	2300      	movs	r3, #0
   2109a:	e01d      	b.n	210d8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   2109c:	2380      	movs	r3, #128	; 0x80
   2109e:	009b      	lsls	r3, r3, #2
   210a0:	4a16      	ldr	r2, [pc, #88]	; (210fc <sd_mmc_spi_install_mmc+0xf4>)
   210a2:	0019      	movs	r1, r3
   210a4:	0010      	movs	r0, r2
   210a6:	4b0e      	ldr	r3, [pc, #56]	; (210e0 <sd_mmc_spi_install_mmc+0xd8>)
   210a8:	4798      	blx	r3
   210aa:	0003      	movs	r3, r0
   210ac:	001a      	movs	r2, r3
   210ae:	2301      	movs	r3, #1
   210b0:	4053      	eors	r3, r2
   210b2:	b2db      	uxtb	r3, r3
   210b4:	2b00      	cmp	r3, #0
   210b6:	d001      	beq.n	210bc <sd_mmc_spi_install_mmc+0xb4>
		return false;
   210b8:	2300      	movs	r3, #0
   210ba:	e00d      	b.n	210d8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   210bc:	4b10      	ldr	r3, [pc, #64]	; (21100 <sd_mmc_spi_install_mmc+0xf8>)
   210be:	4798      	blx	r3
   210c0:	0003      	movs	r3, r0
   210c2:	001a      	movs	r2, r3
   210c4:	2301      	movs	r3, #1
   210c6:	4053      	eors	r3, r2
   210c8:	b2db      	uxtb	r3, r3
   210ca:	2b00      	cmp	r3, #0
   210cc:	d001      	beq.n	210d2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   210ce:	2300      	movs	r3, #0
   210d0:	e002      	b.n	210d8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   210d2:	4b0c      	ldr	r3, [pc, #48]	; (21104 <sd_mmc_spi_install_mmc+0xfc>)
   210d4:	4798      	blx	r3
	return true;
   210d6:	2301      	movs	r3, #1
}
   210d8:	0018      	movs	r0, r3
   210da:	46bd      	mov	sp, r7
   210dc:	b002      	add	sp, #8
   210de:	bd80      	pop	{r7, pc}
   210e0:	00022049 	.word	0x00022049
   210e4:	00020615 	.word	0x00020615
   210e8:	0000113b 	.word	0x0000113b
   210ec:	0002094d 	.word	0x0002094d
   210f0:	000209bd 	.word	0x000209bd
   210f4:	200040e8 	.word	0x200040e8
   210f8:	00020821 	.word	0x00020821
   210fc:	00001110 	.word	0x00001110
   21100:	00020bd9 	.word	0x00020bd9
   21104:	00020e01 	.word	0x00020e01

00021108 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   21108:	b580      	push	{r7, lr}
   2110a:	b082      	sub	sp, #8
   2110c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   2110e:	1dfb      	adds	r3, r7, #7
   21110:	2200      	movs	r2, #0
   21112:	701a      	strb	r2, [r3, #0]
   21114:	e00c      	b.n	21130 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   21116:	1dfb      	adds	r3, r7, #7
   21118:	781b      	ldrb	r3, [r3, #0]
   2111a:	4a0c      	ldr	r2, [pc, #48]	; (2114c <sd_mmc_init+0x44>)
   2111c:	015b      	lsls	r3, r3, #5
   2111e:	18d3      	adds	r3, r2, r3
   21120:	330a      	adds	r3, #10
   21122:	2204      	movs	r2, #4
   21124:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   21126:	1dfb      	adds	r3, r7, #7
   21128:	781a      	ldrb	r2, [r3, #0]
   2112a:	1dfb      	adds	r3, r7, #7
   2112c:	3201      	adds	r2, #1
   2112e:	701a      	strb	r2, [r3, #0]
   21130:	1dfb      	adds	r3, r7, #7
   21132:	781b      	ldrb	r3, [r3, #0]
   21134:	2b00      	cmp	r3, #0
   21136:	d0ee      	beq.n	21116 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   21138:	4b05      	ldr	r3, [pc, #20]	; (21150 <sd_mmc_init+0x48>)
   2113a:	22ff      	movs	r2, #255	; 0xff
   2113c:	701a      	strb	r2, [r3, #0]
	driver_init();
   2113e:	4b05      	ldr	r3, [pc, #20]	; (21154 <sd_mmc_init+0x4c>)
   21140:	4798      	blx	r3
}
   21142:	46c0      	nop			; (mov r8, r8)
   21144:	46bd      	mov	sp, r7
   21146:	b002      	add	sp, #8
   21148:	bd80      	pop	{r7, pc}
   2114a:	46c0      	nop			; (mov r8, r8)
   2114c:	200040c4 	.word	0x200040c4
   21150:	200040e4 	.word	0x200040e4
   21154:	00021e69 	.word	0x00021e69

00021158 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   21158:	b590      	push	{r4, r7, lr}
   2115a:	b085      	sub	sp, #20
   2115c:	af00      	add	r7, sp, #0
   2115e:	0002      	movs	r2, r0
   21160:	1dfb      	adds	r3, r7, #7
   21162:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21164:	230f      	movs	r3, #15
   21166:	18fc      	adds	r4, r7, r3
   21168:	1dfb      	adds	r3, r7, #7
   2116a:	781b      	ldrb	r3, [r3, #0]
   2116c:	0018      	movs	r0, r3
   2116e:	4b13      	ldr	r3, [pc, #76]	; (211bc <sd_mmc_check+0x64>)
   21170:	4798      	blx	r3
   21172:	0003      	movs	r3, r0
   21174:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   21176:	230f      	movs	r3, #15
   21178:	18fb      	adds	r3, r7, r3
   2117a:	781b      	ldrb	r3, [r3, #0]
   2117c:	2b01      	cmp	r3, #1
   2117e:	d005      	beq.n	2118c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   21180:	4b0f      	ldr	r3, [pc, #60]	; (211c0 <sd_mmc_check+0x68>)
   21182:	4798      	blx	r3
		return sd_mmc_err;
   21184:	230f      	movs	r3, #15
   21186:	18fb      	adds	r3, r7, r3
   21188:	781b      	ldrb	r3, [r3, #0]
   2118a:	e012      	b.n	211b2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   2118c:	4b0d      	ldr	r3, [pc, #52]	; (211c4 <sd_mmc_check+0x6c>)
   2118e:	4798      	blx	r3
   21190:	1e03      	subs	r3, r0, #0
   21192:	d007      	beq.n	211a4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   21194:	4b0c      	ldr	r3, [pc, #48]	; (211c8 <sd_mmc_check+0x70>)
   21196:	681b      	ldr	r3, [r3, #0]
   21198:	2200      	movs	r2, #0
   2119a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   2119c:	4b08      	ldr	r3, [pc, #32]	; (211c0 <sd_mmc_check+0x68>)
   2119e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   211a0:	2301      	movs	r3, #1
   211a2:	e006      	b.n	211b2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   211a4:	4b08      	ldr	r3, [pc, #32]	; (211c8 <sd_mmc_check+0x70>)
   211a6:	681b      	ldr	r3, [r3, #0]
   211a8:	2203      	movs	r2, #3
   211aa:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   211ac:	4b04      	ldr	r3, [pc, #16]	; (211c0 <sd_mmc_check+0x68>)
   211ae:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   211b0:	2303      	movs	r3, #3
}
   211b2:	0018      	movs	r0, r3
   211b4:	46bd      	mov	sp, r7
   211b6:	b005      	add	sp, #20
   211b8:	bd90      	pop	{r4, r7, pc}
   211ba:	46c0      	nop			; (mov r8, r8)
   211bc:	00020d3d 	.word	0x00020d3d
   211c0:	00020e39 	.word	0x00020e39
   211c4:	00020e5d 	.word	0x00020e5d
   211c8:	200040e8 	.word	0x200040e8

000211cc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   211cc:	b580      	push	{r7, lr}
   211ce:	b082      	sub	sp, #8
   211d0:	af00      	add	r7, sp, #0
   211d2:	0002      	movs	r2, r0
   211d4:	1dfb      	adds	r3, r7, #7
   211d6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   211d8:	1dfb      	adds	r3, r7, #7
   211da:	781b      	ldrb	r3, [r3, #0]
   211dc:	0018      	movs	r0, r3
   211de:	4b07      	ldr	r3, [pc, #28]	; (211fc <sd_mmc_get_type+0x30>)
   211e0:	4798      	blx	r3
   211e2:	1e03      	subs	r3, r0, #0
   211e4:	d001      	beq.n	211ea <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   211e6:	2300      	movs	r3, #0
   211e8:	e004      	b.n	211f4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   211ea:	4b05      	ldr	r3, [pc, #20]	; (21200 <sd_mmc_get_type+0x34>)
   211ec:	4798      	blx	r3
	return sd_mmc_card->type;
   211ee:	4b05      	ldr	r3, [pc, #20]	; (21204 <sd_mmc_get_type+0x38>)
   211f0:	681b      	ldr	r3, [r3, #0]
   211f2:	7adb      	ldrb	r3, [r3, #11]
}
   211f4:	0018      	movs	r0, r3
   211f6:	46bd      	mov	sp, r7
   211f8:	b002      	add	sp, #8
   211fa:	bd80      	pop	{r7, pc}
   211fc:	00020d3d 	.word	0x00020d3d
   21200:	00020e39 	.word	0x00020e39
   21204:	200040e8 	.word	0x200040e8

00021208 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   21208:	b580      	push	{r7, lr}
   2120a:	b082      	sub	sp, #8
   2120c:	af00      	add	r7, sp, #0
   2120e:	0002      	movs	r2, r0
   21210:	1dfb      	adds	r3, r7, #7
   21212:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   21214:	1dfb      	adds	r3, r7, #7
   21216:	781b      	ldrb	r3, [r3, #0]
   21218:	0018      	movs	r0, r3
   2121a:	4b07      	ldr	r3, [pc, #28]	; (21238 <sd_mmc_get_capacity+0x30>)
   2121c:	4798      	blx	r3
   2121e:	1e03      	subs	r3, r0, #0
   21220:	d001      	beq.n	21226 <sd_mmc_get_capacity+0x1e>
		return 0;
   21222:	2300      	movs	r3, #0
   21224:	e004      	b.n	21230 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   21226:	4b05      	ldr	r3, [pc, #20]	; (2123c <sd_mmc_get_capacity+0x34>)
   21228:	4798      	blx	r3
	return sd_mmc_card->capacity;
   2122a:	4b05      	ldr	r3, [pc, #20]	; (21240 <sd_mmc_get_capacity+0x38>)
   2122c:	681b      	ldr	r3, [r3, #0]
   2122e:	685b      	ldr	r3, [r3, #4]
}
   21230:	0018      	movs	r0, r3
   21232:	46bd      	mov	sp, r7
   21234:	b002      	add	sp, #8
   21236:	bd80      	pop	{r7, pc}
   21238:	00020d3d 	.word	0x00020d3d
   2123c:	00020e39 	.word	0x00020e39
   21240:	200040e8 	.word	0x200040e8

00021244 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   21244:	b580      	push	{r7, lr}
   21246:	b082      	sub	sp, #8
   21248:	af00      	add	r7, sp, #0
   2124a:	0002      	movs	r2, r0
   2124c:	1dfb      	adds	r3, r7, #7
   2124e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   21250:	2300      	movs	r3, #0
}
   21252:	0018      	movs	r0, r3
   21254:	46bd      	mov	sp, r7
   21256:	b002      	add	sp, #8
   21258:	bd80      	pop	{r7, pc}
	...

0002125c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   2125c:	b590      	push	{r4, r7, lr}
   2125e:	b089      	sub	sp, #36	; 0x24
   21260:	af02      	add	r7, sp, #8
   21262:	6039      	str	r1, [r7, #0]
   21264:	0011      	movs	r1, r2
   21266:	1dfb      	adds	r3, r7, #7
   21268:	1c02      	adds	r2, r0, #0
   2126a:	701a      	strb	r2, [r3, #0]
   2126c:	1d3b      	adds	r3, r7, #4
   2126e:	1c0a      	adds	r2, r1, #0
   21270:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21272:	230f      	movs	r3, #15
   21274:	18fc      	adds	r4, r7, r3
   21276:	1dfb      	adds	r3, r7, #7
   21278:	781b      	ldrb	r3, [r3, #0]
   2127a:	0018      	movs	r0, r3
   2127c:	4b29      	ldr	r3, [pc, #164]	; (21324 <sd_mmc_init_read_blocks+0xc8>)
   2127e:	4798      	blx	r3
   21280:	0003      	movs	r3, r0
   21282:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21284:	230f      	movs	r3, #15
   21286:	18fb      	adds	r3, r7, r3
   21288:	781b      	ldrb	r3, [r3, #0]
   2128a:	2b00      	cmp	r3, #0
   2128c:	d003      	beq.n	21296 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   2128e:	230f      	movs	r3, #15
   21290:	18fb      	adds	r3, r7, r3
   21292:	781b      	ldrb	r3, [r3, #0]
   21294:	e041      	b.n	2131a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   21296:	4b24      	ldr	r3, [pc, #144]	; (21328 <sd_mmc_init_read_blocks+0xcc>)
   21298:	4798      	blx	r3
   2129a:	0003      	movs	r3, r0
   2129c:	001a      	movs	r2, r3
   2129e:	2301      	movs	r3, #1
   212a0:	4053      	eors	r3, r2
   212a2:	b2db      	uxtb	r3, r3
   212a4:	2b00      	cmp	r3, #0
   212a6:	d003      	beq.n	212b0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   212a8:	4b20      	ldr	r3, [pc, #128]	; (2132c <sd_mmc_init_read_blocks+0xd0>)
   212aa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   212ac:	2305      	movs	r3, #5
   212ae:	e034      	b.n	2131a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   212b0:	1d3b      	adds	r3, r7, #4
   212b2:	881b      	ldrh	r3, [r3, #0]
   212b4:	2b01      	cmp	r3, #1
   212b6:	d902      	bls.n	212be <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   212b8:	4b1d      	ldr	r3, [pc, #116]	; (21330 <sd_mmc_init_read_blocks+0xd4>)
   212ba:	617b      	str	r3, [r7, #20]
   212bc:	e001      	b.n	212c2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   212be:	4b1d      	ldr	r3, [pc, #116]	; (21334 <sd_mmc_init_read_blocks+0xd8>)
   212c0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   212c2:	4b1d      	ldr	r3, [pc, #116]	; (21338 <sd_mmc_init_read_blocks+0xdc>)
   212c4:	681b      	ldr	r3, [r3, #0]
   212c6:	7adb      	ldrb	r3, [r3, #11]
   212c8:	001a      	movs	r2, r3
   212ca:	2308      	movs	r3, #8
   212cc:	4013      	ands	r3, r2
   212ce:	d002      	beq.n	212d6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   212d0:	683b      	ldr	r3, [r7, #0]
   212d2:	613b      	str	r3, [r7, #16]
   212d4:	e002      	b.n	212dc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   212d6:	683b      	ldr	r3, [r7, #0]
   212d8:	025b      	lsls	r3, r3, #9
   212da:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   212dc:	1d3b      	adds	r3, r7, #4
   212de:	881c      	ldrh	r4, [r3, #0]
   212e0:	2380      	movs	r3, #128	; 0x80
   212e2:	009a      	lsls	r2, r3, #2
   212e4:	6939      	ldr	r1, [r7, #16]
   212e6:	6978      	ldr	r0, [r7, #20]
   212e8:	2301      	movs	r3, #1
   212ea:	9300      	str	r3, [sp, #0]
   212ec:	0023      	movs	r3, r4
   212ee:	4c13      	ldr	r4, [pc, #76]	; (2133c <sd_mmc_init_read_blocks+0xe0>)
   212f0:	47a0      	blx	r4
   212f2:	0003      	movs	r3, r0
   212f4:	001a      	movs	r2, r3
   212f6:	2301      	movs	r3, #1
   212f8:	4053      	eors	r3, r2
   212fa:	b2db      	uxtb	r3, r3
   212fc:	2b00      	cmp	r3, #0
   212fe:	d003      	beq.n	21308 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   21300:	4b0a      	ldr	r3, [pc, #40]	; (2132c <sd_mmc_init_read_blocks+0xd0>)
   21302:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   21304:	2305      	movs	r3, #5
   21306:	e008      	b.n	2131a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   21308:	4b0d      	ldr	r3, [pc, #52]	; (21340 <sd_mmc_init_read_blocks+0xe4>)
   2130a:	1d3a      	adds	r2, r7, #4
   2130c:	8812      	ldrh	r2, [r2, #0]
   2130e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   21310:	4b0c      	ldr	r3, [pc, #48]	; (21344 <sd_mmc_init_read_blocks+0xe8>)
   21312:	1d3a      	adds	r2, r7, #4
   21314:	8812      	ldrh	r2, [r2, #0]
   21316:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21318:	2300      	movs	r3, #0
}
   2131a:	0018      	movs	r0, r3
   2131c:	46bd      	mov	sp, r7
   2131e:	b007      	add	sp, #28
   21320:	bd90      	pop	{r4, r7, pc}
   21322:	46c0      	nop			; (mov r8, r8)
   21324:	00020d3d 	.word	0x00020d3d
   21328:	00020bd9 	.word	0x00020bd9
   2132c:	00020e39 	.word	0x00020e39
   21330:	00101112 	.word	0x00101112
   21334:	00081111 	.word	0x00081111
   21338:	200040e8 	.word	0x200040e8
   2133c:	00022071 	.word	0x00022071
   21340:	200040ee 	.word	0x200040ee
   21344:	200040ec 	.word	0x200040ec

00021348 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   21348:	b580      	push	{r7, lr}
   2134a:	b082      	sub	sp, #8
   2134c:	af00      	add	r7, sp, #0
   2134e:	6078      	str	r0, [r7, #4]
   21350:	000a      	movs	r2, r1
   21352:	1cbb      	adds	r3, r7, #2
   21354:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   21356:	1cbb      	adds	r3, r7, #2
   21358:	881a      	ldrh	r2, [r3, #0]
   2135a:	687b      	ldr	r3, [r7, #4]
   2135c:	0011      	movs	r1, r2
   2135e:	0018      	movs	r0, r3
   21360:	4b0d      	ldr	r3, [pc, #52]	; (21398 <sd_mmc_start_read_blocks+0x50>)
   21362:	4798      	blx	r3
   21364:	0003      	movs	r3, r0
   21366:	001a      	movs	r2, r3
   21368:	2301      	movs	r3, #1
   2136a:	4053      	eors	r3, r2
   2136c:	b2db      	uxtb	r3, r3
   2136e:	2b00      	cmp	r3, #0
   21370:	d004      	beq.n	2137c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   21372:	4b0a      	ldr	r3, [pc, #40]	; (2139c <sd_mmc_start_read_blocks+0x54>)
   21374:	2200      	movs	r2, #0
   21376:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21378:	2305      	movs	r3, #5
   2137a:	e008      	b.n	2138e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   2137c:	4b07      	ldr	r3, [pc, #28]	; (2139c <sd_mmc_start_read_blocks+0x54>)
   2137e:	881a      	ldrh	r2, [r3, #0]
   21380:	1cbb      	adds	r3, r7, #2
   21382:	881b      	ldrh	r3, [r3, #0]
   21384:	1ad3      	subs	r3, r2, r3
   21386:	b29a      	uxth	r2, r3
   21388:	4b04      	ldr	r3, [pc, #16]	; (2139c <sd_mmc_start_read_blocks+0x54>)
   2138a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   2138c:	2300      	movs	r3, #0
}
   2138e:	0018      	movs	r0, r3
   21390:	46bd      	mov	sp, r7
   21392:	b002      	add	sp, #8
   21394:	bd80      	pop	{r7, pc}
   21396:	46c0      	nop			; (mov r8, r8)
   21398:	00022341 	.word	0x00022341
   2139c:	200040ee 	.word	0x200040ee

000213a0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   213a0:	b580      	push	{r7, lr}
   213a2:	b082      	sub	sp, #8
   213a4:	af00      	add	r7, sp, #0
   213a6:	0002      	movs	r2, r0
   213a8:	1dfb      	adds	r3, r7, #7
   213aa:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   213ac:	4b1c      	ldr	r3, [pc, #112]	; (21420 <sd_mmc_wait_end_of_read_blocks+0x80>)
   213ae:	4798      	blx	r3
   213b0:	0003      	movs	r3, r0
   213b2:	001a      	movs	r2, r3
   213b4:	2301      	movs	r3, #1
   213b6:	4053      	eors	r3, r2
   213b8:	b2db      	uxtb	r3, r3
   213ba:	2b00      	cmp	r3, #0
   213bc:	d001      	beq.n	213c2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   213be:	2305      	movs	r3, #5
   213c0:	e029      	b.n	21416 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   213c2:	1dfb      	adds	r3, r7, #7
   213c4:	781b      	ldrb	r3, [r3, #0]
   213c6:	2b00      	cmp	r3, #0
   213c8:	d003      	beq.n	213d2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   213ca:	4b16      	ldr	r3, [pc, #88]	; (21424 <sd_mmc_wait_end_of_read_blocks+0x84>)
   213cc:	2200      	movs	r2, #0
   213ce:	801a      	strh	r2, [r3, #0]
   213d0:	e005      	b.n	213de <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   213d2:	4b14      	ldr	r3, [pc, #80]	; (21424 <sd_mmc_wait_end_of_read_blocks+0x84>)
   213d4:	881b      	ldrh	r3, [r3, #0]
   213d6:	2b00      	cmp	r3, #0
   213d8:	d001      	beq.n	213de <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   213da:	2300      	movs	r3, #0
   213dc:	e01b      	b.n	21416 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   213de:	4b12      	ldr	r3, [pc, #72]	; (21428 <sd_mmc_wait_end_of_read_blocks+0x88>)
   213e0:	881b      	ldrh	r3, [r3, #0]
   213e2:	2b01      	cmp	r3, #1
   213e4:	d103      	bne.n	213ee <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   213e6:	4b11      	ldr	r3, [pc, #68]	; (2142c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   213e8:	4798      	blx	r3
		return SD_MMC_OK;
   213ea:	2300      	movs	r3, #0
   213ec:	e013      	b.n	21416 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   213ee:	4b10      	ldr	r3, [pc, #64]	; (21430 <sd_mmc_wait_end_of_read_blocks+0x90>)
   213f0:	2100      	movs	r1, #0
   213f2:	0018      	movs	r0, r3
   213f4:	4b0f      	ldr	r3, [pc, #60]	; (21434 <sd_mmc_wait_end_of_read_blocks+0x94>)
   213f6:	4798      	blx	r3
   213f8:	0003      	movs	r3, r0
   213fa:	001a      	movs	r2, r3
   213fc:	2301      	movs	r3, #1
   213fe:	4053      	eors	r3, r2
   21400:	b2db      	uxtb	r3, r3
   21402:	2b00      	cmp	r3, #0
   21404:	d004      	beq.n	21410 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   21406:	4b0a      	ldr	r3, [pc, #40]	; (21430 <sd_mmc_wait_end_of_read_blocks+0x90>)
   21408:	2100      	movs	r1, #0
   2140a:	0018      	movs	r0, r3
   2140c:	4b09      	ldr	r3, [pc, #36]	; (21434 <sd_mmc_wait_end_of_read_blocks+0x94>)
   2140e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   21410:	4b06      	ldr	r3, [pc, #24]	; (2142c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   21412:	4798      	blx	r3
	return SD_MMC_OK;
   21414:	2300      	movs	r3, #0
}
   21416:	0018      	movs	r0, r3
   21418:	46bd      	mov	sp, r7
   2141a:	b002      	add	sp, #8
   2141c:	bd80      	pop	{r7, pc}
   2141e:	46c0      	nop			; (mov r8, r8)
   21420:	000223e5 	.word	0x000223e5
   21424:	200040ee 	.word	0x200040ee
   21428:	200040ec 	.word	0x200040ec
   2142c:	00020e39 	.word	0x00020e39
   21430:	0000310c 	.word	0x0000310c
   21434:	00022049 	.word	0x00022049

00021438 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   21438:	b590      	push	{r4, r7, lr}
   2143a:	b089      	sub	sp, #36	; 0x24
   2143c:	af02      	add	r7, sp, #8
   2143e:	6039      	str	r1, [r7, #0]
   21440:	0011      	movs	r1, r2
   21442:	1dfb      	adds	r3, r7, #7
   21444:	1c02      	adds	r2, r0, #0
   21446:	701a      	strb	r2, [r3, #0]
   21448:	1d3b      	adds	r3, r7, #4
   2144a:	1c0a      	adds	r2, r1, #0
   2144c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   2144e:	230f      	movs	r3, #15
   21450:	18fc      	adds	r4, r7, r3
   21452:	1dfb      	adds	r3, r7, #7
   21454:	781b      	ldrb	r3, [r3, #0]
   21456:	0018      	movs	r0, r3
   21458:	4b28      	ldr	r3, [pc, #160]	; (214fc <sd_mmc_init_write_blocks+0xc4>)
   2145a:	4798      	blx	r3
   2145c:	0003      	movs	r3, r0
   2145e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21460:	230f      	movs	r3, #15
   21462:	18fb      	adds	r3, r7, r3
   21464:	781b      	ldrb	r3, [r3, #0]
   21466:	2b00      	cmp	r3, #0
   21468:	d003      	beq.n	21472 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   2146a:	230f      	movs	r3, #15
   2146c:	18fb      	adds	r3, r7, r3
   2146e:	781b      	ldrb	r3, [r3, #0]
   21470:	e03f      	b.n	214f2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   21472:	1dfb      	adds	r3, r7, #7
   21474:	781b      	ldrb	r3, [r3, #0]
   21476:	0018      	movs	r0, r3
   21478:	4b21      	ldr	r3, [pc, #132]	; (21500 <sd_mmc_init_write_blocks+0xc8>)
   2147a:	4798      	blx	r3
   2147c:	1e03      	subs	r3, r0, #0
   2147e:	d003      	beq.n	21488 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   21480:	4b20      	ldr	r3, [pc, #128]	; (21504 <sd_mmc_init_write_blocks+0xcc>)
   21482:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   21484:	2307      	movs	r3, #7
   21486:	e034      	b.n	214f2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   21488:	1d3b      	adds	r3, r7, #4
   2148a:	881b      	ldrh	r3, [r3, #0]
   2148c:	2b01      	cmp	r3, #1
   2148e:	d902      	bls.n	21496 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   21490:	4b1d      	ldr	r3, [pc, #116]	; (21508 <sd_mmc_init_write_blocks+0xd0>)
   21492:	617b      	str	r3, [r7, #20]
   21494:	e001      	b.n	2149a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   21496:	4b1d      	ldr	r3, [pc, #116]	; (2150c <sd_mmc_init_write_blocks+0xd4>)
   21498:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   2149a:	4b1d      	ldr	r3, [pc, #116]	; (21510 <sd_mmc_init_write_blocks+0xd8>)
   2149c:	681b      	ldr	r3, [r3, #0]
   2149e:	7adb      	ldrb	r3, [r3, #11]
   214a0:	001a      	movs	r2, r3
   214a2:	2308      	movs	r3, #8
   214a4:	4013      	ands	r3, r2
   214a6:	d002      	beq.n	214ae <sd_mmc_init_write_blocks+0x76>
		arg = start;
   214a8:	683b      	ldr	r3, [r7, #0]
   214aa:	613b      	str	r3, [r7, #16]
   214ac:	e002      	b.n	214b4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   214ae:	683b      	ldr	r3, [r7, #0]
   214b0:	025b      	lsls	r3, r3, #9
   214b2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   214b4:	1d3b      	adds	r3, r7, #4
   214b6:	881c      	ldrh	r4, [r3, #0]
   214b8:	2380      	movs	r3, #128	; 0x80
   214ba:	009a      	lsls	r2, r3, #2
   214bc:	6939      	ldr	r1, [r7, #16]
   214be:	6978      	ldr	r0, [r7, #20]
   214c0:	2301      	movs	r3, #1
   214c2:	9300      	str	r3, [sp, #0]
   214c4:	0023      	movs	r3, r4
   214c6:	4c13      	ldr	r4, [pc, #76]	; (21514 <sd_mmc_init_write_blocks+0xdc>)
   214c8:	47a0      	blx	r4
   214ca:	0003      	movs	r3, r0
   214cc:	001a      	movs	r2, r3
   214ce:	2301      	movs	r3, #1
   214d0:	4053      	eors	r3, r2
   214d2:	b2db      	uxtb	r3, r3
   214d4:	2b00      	cmp	r3, #0
   214d6:	d003      	beq.n	214e0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   214d8:	4b0a      	ldr	r3, [pc, #40]	; (21504 <sd_mmc_init_write_blocks+0xcc>)
   214da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   214dc:	2305      	movs	r3, #5
   214de:	e008      	b.n	214f2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   214e0:	4b0d      	ldr	r3, [pc, #52]	; (21518 <sd_mmc_init_write_blocks+0xe0>)
   214e2:	1d3a      	adds	r2, r7, #4
   214e4:	8812      	ldrh	r2, [r2, #0]
   214e6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   214e8:	4b0c      	ldr	r3, [pc, #48]	; (2151c <sd_mmc_init_write_blocks+0xe4>)
   214ea:	1d3a      	adds	r2, r7, #4
   214ec:	8812      	ldrh	r2, [r2, #0]
   214ee:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   214f0:	2300      	movs	r3, #0
}
   214f2:	0018      	movs	r0, r3
   214f4:	46bd      	mov	sp, r7
   214f6:	b007      	add	sp, #28
   214f8:	bd90      	pop	{r4, r7, pc}
   214fa:	46c0      	nop			; (mov r8, r8)
   214fc:	00020d3d 	.word	0x00020d3d
   21500:	00021245 	.word	0x00021245
   21504:	00020e39 	.word	0x00020e39
   21508:	00109119 	.word	0x00109119
   2150c:	00089118 	.word	0x00089118
   21510:	200040e8 	.word	0x200040e8
   21514:	00022071 	.word	0x00022071
   21518:	200040ee 	.word	0x200040ee
   2151c:	200040ec 	.word	0x200040ec

00021520 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   21520:	b580      	push	{r7, lr}
   21522:	b082      	sub	sp, #8
   21524:	af00      	add	r7, sp, #0
   21526:	6078      	str	r0, [r7, #4]
   21528:	000a      	movs	r2, r1
   2152a:	1cbb      	adds	r3, r7, #2
   2152c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   2152e:	1cbb      	adds	r3, r7, #2
   21530:	881a      	ldrh	r2, [r3, #0]
   21532:	687b      	ldr	r3, [r7, #4]
   21534:	0011      	movs	r1, r2
   21536:	0018      	movs	r0, r3
   21538:	4b0d      	ldr	r3, [pc, #52]	; (21570 <sd_mmc_start_write_blocks+0x50>)
   2153a:	4798      	blx	r3
   2153c:	0003      	movs	r3, r0
   2153e:	001a      	movs	r2, r3
   21540:	2301      	movs	r3, #1
   21542:	4053      	eors	r3, r2
   21544:	b2db      	uxtb	r3, r3
   21546:	2b00      	cmp	r3, #0
   21548:	d004      	beq.n	21554 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   2154a:	4b0a      	ldr	r3, [pc, #40]	; (21574 <sd_mmc_start_write_blocks+0x54>)
   2154c:	2200      	movs	r2, #0
   2154e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21550:	2305      	movs	r3, #5
   21552:	e008      	b.n	21566 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   21554:	4b07      	ldr	r3, [pc, #28]	; (21574 <sd_mmc_start_write_blocks+0x54>)
   21556:	881a      	ldrh	r2, [r3, #0]
   21558:	1cbb      	adds	r3, r7, #2
   2155a:	881b      	ldrh	r3, [r3, #0]
   2155c:	1ad3      	subs	r3, r2, r3
   2155e:	b29a      	uxth	r2, r3
   21560:	4b04      	ldr	r3, [pc, #16]	; (21574 <sd_mmc_start_write_blocks+0x54>)
   21562:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21564:	2300      	movs	r3, #0
}
   21566:	0018      	movs	r0, r3
   21568:	46bd      	mov	sp, r7
   2156a:	b002      	add	sp, #8
   2156c:	bd80      	pop	{r7, pc}
   2156e:	46c0      	nop			; (mov r8, r8)
   21570:	000223f1 	.word	0x000223f1
   21574:	200040ee 	.word	0x200040ee

00021578 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   21578:	b580      	push	{r7, lr}
   2157a:	b082      	sub	sp, #8
   2157c:	af00      	add	r7, sp, #0
   2157e:	0002      	movs	r2, r0
   21580:	1dfb      	adds	r3, r7, #7
   21582:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   21584:	4b13      	ldr	r3, [pc, #76]	; (215d4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   21586:	4798      	blx	r3
   21588:	0003      	movs	r3, r0
   2158a:	001a      	movs	r2, r3
   2158c:	2301      	movs	r3, #1
   2158e:	4053      	eors	r3, r2
   21590:	b2db      	uxtb	r3, r3
   21592:	2b00      	cmp	r3, #0
   21594:	d001      	beq.n	2159a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   21596:	2305      	movs	r3, #5
   21598:	e018      	b.n	215cc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   2159a:	1dfb      	adds	r3, r7, #7
   2159c:	781b      	ldrb	r3, [r3, #0]
   2159e:	2b00      	cmp	r3, #0
   215a0:	d003      	beq.n	215aa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   215a2:	4b0d      	ldr	r3, [pc, #52]	; (215d8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   215a4:	2200      	movs	r2, #0
   215a6:	801a      	strh	r2, [r3, #0]
   215a8:	e005      	b.n	215b6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   215aa:	4b0b      	ldr	r3, [pc, #44]	; (215d8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   215ac:	881b      	ldrh	r3, [r3, #0]
   215ae:	2b00      	cmp	r3, #0
   215b0:	d001      	beq.n	215b6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   215b2:	2300      	movs	r3, #0
   215b4:	e00a      	b.n	215cc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   215b6:	4b09      	ldr	r3, [pc, #36]	; (215dc <sd_mmc_wait_end_of_write_blocks+0x64>)
   215b8:	881b      	ldrh	r3, [r3, #0]
   215ba:	2b01      	cmp	r3, #1
   215bc:	d103      	bne.n	215c6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   215be:	4b08      	ldr	r3, [pc, #32]	; (215e0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   215c0:	4798      	blx	r3
		return SD_MMC_OK;
   215c2:	2300      	movs	r3, #0
   215c4:	e002      	b.n	215cc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   215c6:	4b06      	ldr	r3, [pc, #24]	; (215e0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   215c8:	4798      	blx	r3
	return SD_MMC_OK;
   215ca:	2300      	movs	r3, #0
}
   215cc:	0018      	movs	r0, r3
   215ce:	46bd      	mov	sp, r7
   215d0:	b002      	add	sp, #8
   215d2:	bd80      	pop	{r7, pc}
   215d4:	000224b1 	.word	0x000224b1
   215d8:	200040ee 	.word	0x200040ee
   215dc:	200040ec 	.word	0x200040ec
   215e0:	00020e39 	.word	0x00020e39

000215e4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   215e4:	b580      	push	{r7, lr}
   215e6:	b082      	sub	sp, #8
   215e8:	af00      	add	r7, sp, #0
   215ea:	0002      	movs	r2, r0
   215ec:	1dfb      	adds	r3, r7, #7
   215ee:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   215f0:	1dfb      	adds	r3, r7, #7
   215f2:	781b      	ldrb	r3, [r3, #0]
   215f4:	0018      	movs	r0, r3
   215f6:	4b16      	ldr	r3, [pc, #88]	; (21650 <sd_mmc_test_unit_ready+0x6c>)
   215f8:	4798      	blx	r3
   215fa:	0003      	movs	r3, r0
   215fc:	2b01      	cmp	r3, #1
   215fe:	d019      	beq.n	21634 <sd_mmc_test_unit_ready+0x50>
   21600:	2b02      	cmp	r3, #2
   21602:	d019      	beq.n	21638 <sd_mmc_test_unit_ready+0x54>
   21604:	2b00      	cmp	r3, #0
   21606:	d11e      	bne.n	21646 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   21608:	1dfb      	adds	r3, r7, #7
   2160a:	781b      	ldrb	r3, [r3, #0]
   2160c:	4a11      	ldr	r2, [pc, #68]	; (21654 <sd_mmc_test_unit_ready+0x70>)
   2160e:	5cd3      	ldrb	r3, [r2, r3]
   21610:	2b00      	cmp	r3, #0
   21612:	d001      	beq.n	21618 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   21614:	2302      	movs	r3, #2
   21616:	e017      	b.n	21648 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   21618:	1dfb      	adds	r3, r7, #7
   2161a:	781b      	ldrb	r3, [r3, #0]
   2161c:	0018      	movs	r0, r3
   2161e:	4b0e      	ldr	r3, [pc, #56]	; (21658 <sd_mmc_test_unit_ready+0x74>)
   21620:	4798      	blx	r3
   21622:	0003      	movs	r3, r0
   21624:	001a      	movs	r2, r3
   21626:	2303      	movs	r3, #3
   21628:	4013      	ands	r3, r2
   2162a:	d001      	beq.n	21630 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   2162c:	2300      	movs	r3, #0
   2162e:	e00b      	b.n	21648 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   21630:	2302      	movs	r3, #2
   21632:	e009      	b.n	21648 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   21634:	2303      	movs	r3, #3
   21636:	e007      	b.n	21648 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   21638:	1dfb      	adds	r3, r7, #7
   2163a:	781b      	ldrb	r3, [r3, #0]
   2163c:	4a05      	ldr	r2, [pc, #20]	; (21654 <sd_mmc_test_unit_ready+0x70>)
   2163e:	2100      	movs	r1, #0
   21640:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   21642:	2302      	movs	r3, #2
   21644:	e000      	b.n	21648 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   21646:	2301      	movs	r3, #1
	}
}
   21648:	0018      	movs	r0, r3
   2164a:	46bd      	mov	sp, r7
   2164c:	b002      	add	sp, #8
   2164e:	bd80      	pop	{r7, pc}
   21650:	00021159 	.word	0x00021159
   21654:	200040f0 	.word	0x200040f0
   21658:	000211cd 	.word	0x000211cd

0002165c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   2165c:	b580      	push	{r7, lr}
   2165e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   21660:	2000      	movs	r0, #0
   21662:	4b03      	ldr	r3, [pc, #12]	; (21670 <sd_mmc_test_unit_ready_0+0x14>)
   21664:	4798      	blx	r3
   21666:	0003      	movs	r3, r0
}
   21668:	0018      	movs	r0, r3
   2166a:	46bd      	mov	sp, r7
   2166c:	bd80      	pop	{r7, pc}
   2166e:	46c0      	nop			; (mov r8, r8)
   21670:	000215e5 	.word	0x000215e5

00021674 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   21674:	b580      	push	{r7, lr}
   21676:	b082      	sub	sp, #8
   21678:	af00      	add	r7, sp, #0
   2167a:	0002      	movs	r2, r0
   2167c:	6039      	str	r1, [r7, #0]
   2167e:	1dfb      	adds	r3, r7, #7
   21680:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   21682:	1dfb      	adds	r3, r7, #7
   21684:	781b      	ldrb	r3, [r3, #0]
   21686:	0018      	movs	r0, r3
   21688:	4b08      	ldr	r3, [pc, #32]	; (216ac <sd_mmc_read_capacity+0x38>)
   2168a:	4798      	blx	r3
   2168c:	0003      	movs	r3, r0
   2168e:	005b      	lsls	r3, r3, #1
   21690:	1e5a      	subs	r2, r3, #1
   21692:	683b      	ldr	r3, [r7, #0]
   21694:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   21696:	1dfb      	adds	r3, r7, #7
   21698:	781b      	ldrb	r3, [r3, #0]
   2169a:	0018      	movs	r0, r3
   2169c:	4b04      	ldr	r3, [pc, #16]	; (216b0 <sd_mmc_read_capacity+0x3c>)
   2169e:	4798      	blx	r3
   216a0:	0003      	movs	r3, r0
}
   216a2:	0018      	movs	r0, r3
   216a4:	46bd      	mov	sp, r7
   216a6:	b002      	add	sp, #8
   216a8:	bd80      	pop	{r7, pc}
   216aa:	46c0      	nop			; (mov r8, r8)
   216ac:	00021209 	.word	0x00021209
   216b0:	000215e5 	.word	0x000215e5

000216b4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   216b4:	b580      	push	{r7, lr}
   216b6:	b082      	sub	sp, #8
   216b8:	af00      	add	r7, sp, #0
   216ba:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   216bc:	687b      	ldr	r3, [r7, #4]
   216be:	0019      	movs	r1, r3
   216c0:	2000      	movs	r0, #0
   216c2:	4b03      	ldr	r3, [pc, #12]	; (216d0 <sd_mmc_read_capacity_0+0x1c>)
   216c4:	4798      	blx	r3
   216c6:	0003      	movs	r3, r0
}
   216c8:	0018      	movs	r0, r3
   216ca:	46bd      	mov	sp, r7
   216cc:	b002      	add	sp, #8
   216ce:	bd80      	pop	{r7, pc}
   216d0:	00021675 	.word	0x00021675

000216d4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   216d4:	b580      	push	{r7, lr}
   216d6:	b082      	sub	sp, #8
   216d8:	af00      	add	r7, sp, #0
   216da:	0002      	movs	r2, r0
   216dc:	1dfb      	adds	r3, r7, #7
   216de:	701a      	strb	r2, [r3, #0]
   216e0:	1dbb      	adds	r3, r7, #6
   216e2:	1c0a      	adds	r2, r1, #0
   216e4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   216e6:	1dfb      	adds	r3, r7, #7
   216e8:	781b      	ldrb	r3, [r3, #0]
   216ea:	4a04      	ldr	r2, [pc, #16]	; (216fc <sd_mmc_unload+0x28>)
   216ec:	1db9      	adds	r1, r7, #6
   216ee:	7809      	ldrb	r1, [r1, #0]
   216f0:	54d1      	strb	r1, [r2, r3]
	return true;
   216f2:	2301      	movs	r3, #1
}
   216f4:	0018      	movs	r0, r3
   216f6:	46bd      	mov	sp, r7
   216f8:	b002      	add	sp, #8
   216fa:	bd80      	pop	{r7, pc}
   216fc:	200040f0 	.word	0x200040f0

00021700 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   21700:	b580      	push	{r7, lr}
   21702:	b082      	sub	sp, #8
   21704:	af00      	add	r7, sp, #0
   21706:	0002      	movs	r2, r0
   21708:	1dfb      	adds	r3, r7, #7
   2170a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   2170c:	1dfb      	adds	r3, r7, #7
   2170e:	781b      	ldrb	r3, [r3, #0]
   21710:	0019      	movs	r1, r3
   21712:	2000      	movs	r0, #0
   21714:	4b03      	ldr	r3, [pc, #12]	; (21724 <sd_mmc_unload_0+0x24>)
   21716:	4798      	blx	r3
   21718:	0003      	movs	r3, r0
}
   2171a:	0018      	movs	r0, r3
   2171c:	46bd      	mov	sp, r7
   2171e:	b002      	add	sp, #8
   21720:	bd80      	pop	{r7, pc}
   21722:	46c0      	nop			; (mov r8, r8)
   21724:	000216d5 	.word	0x000216d5

00021728 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   21728:	b580      	push	{r7, lr}
   2172a:	b082      	sub	sp, #8
   2172c:	af00      	add	r7, sp, #0
   2172e:	0002      	movs	r2, r0
   21730:	1dfb      	adds	r3, r7, #7
   21732:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   21734:	1dfb      	adds	r3, r7, #7
   21736:	781b      	ldrb	r3, [r3, #0]
   21738:	0018      	movs	r0, r3
   2173a:	4b03      	ldr	r3, [pc, #12]	; (21748 <sd_mmc_wr_protect+0x20>)
   2173c:	4798      	blx	r3
   2173e:	0003      	movs	r3, r0
}
   21740:	0018      	movs	r0, r3
   21742:	46bd      	mov	sp, r7
   21744:	b002      	add	sp, #8
   21746:	bd80      	pop	{r7, pc}
   21748:	00021245 	.word	0x00021245

0002174c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   2174c:	b580      	push	{r7, lr}
   2174e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   21750:	2000      	movs	r0, #0
   21752:	4b03      	ldr	r3, [pc, #12]	; (21760 <sd_mmc_wr_protect_0+0x14>)
   21754:	4798      	blx	r3
   21756:	0003      	movs	r3, r0
}
   21758:	0018      	movs	r0, r3
   2175a:	46bd      	mov	sp, r7
   2175c:	bd80      	pop	{r7, pc}
   2175e:	46c0      	nop			; (mov r8, r8)
   21760:	00021729 	.word	0x00021729

00021764 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   21764:	b580      	push	{r7, lr}
   21766:	b082      	sub	sp, #8
   21768:	af00      	add	r7, sp, #0
   2176a:	0002      	movs	r2, r0
   2176c:	1dfb      	adds	r3, r7, #7
   2176e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   21770:	2301      	movs	r3, #1
}
   21772:	0018      	movs	r0, r3
   21774:	46bd      	mov	sp, r7
   21776:	b002      	add	sp, #8
   21778:	bd80      	pop	{r7, pc}
	...

0002177c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   2177c:	b580      	push	{r7, lr}
   2177e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   21780:	2000      	movs	r0, #0
   21782:	4b03      	ldr	r3, [pc, #12]	; (21790 <sd_mmc_removal_0+0x14>)
   21784:	4798      	blx	r3
   21786:	0003      	movs	r3, r0
}
   21788:	0018      	movs	r0, r3
   2178a:	46bd      	mov	sp, r7
   2178c:	bd80      	pop	{r7, pc}
   2178e:	46c0      	nop			; (mov r8, r8)
   21790:	00021765 	.word	0x00021765

00021794 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   21794:	b580      	push	{r7, lr}
   21796:	b084      	sub	sp, #16
   21798:	af00      	add	r7, sp, #0
   2179a:	60b9      	str	r1, [r7, #8]
   2179c:	607a      	str	r2, [r7, #4]
   2179e:	230f      	movs	r3, #15
   217a0:	18fb      	adds	r3, r7, r3
   217a2:	1c02      	adds	r2, r0, #0
   217a4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   217a6:	68b9      	ldr	r1, [r7, #8]
   217a8:	230f      	movs	r3, #15
   217aa:	18fb      	adds	r3, r7, r3
   217ac:	781b      	ldrb	r3, [r3, #0]
   217ae:	2201      	movs	r2, #1
   217b0:	0018      	movs	r0, r3
   217b2:	4b10      	ldr	r3, [pc, #64]	; (217f4 <sd_mmc_mem_2_ram+0x60>)
   217b4:	4798      	blx	r3
   217b6:	1e03      	subs	r3, r0, #0
   217b8:	d005      	beq.n	217c6 <sd_mmc_mem_2_ram+0x32>
   217ba:	2b02      	cmp	r3, #2
   217bc:	d101      	bne.n	217c2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   217be:	2302      	movs	r3, #2
   217c0:	e013      	b.n	217ea <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   217c2:	2301      	movs	r3, #1
   217c4:	e011      	b.n	217ea <sd_mmc_mem_2_ram+0x56>
		break;
   217c6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   217c8:	687b      	ldr	r3, [r7, #4]
   217ca:	2101      	movs	r1, #1
   217cc:	0018      	movs	r0, r3
   217ce:	4b0a      	ldr	r3, [pc, #40]	; (217f8 <sd_mmc_mem_2_ram+0x64>)
   217d0:	4798      	blx	r3
   217d2:	1e03      	subs	r3, r0, #0
   217d4:	d001      	beq.n	217da <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   217d6:	2301      	movs	r3, #1
   217d8:	e007      	b.n	217ea <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   217da:	2000      	movs	r0, #0
   217dc:	4b07      	ldr	r3, [pc, #28]	; (217fc <sd_mmc_mem_2_ram+0x68>)
   217de:	4798      	blx	r3
   217e0:	1e03      	subs	r3, r0, #0
   217e2:	d001      	beq.n	217e8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   217e4:	2301      	movs	r3, #1
   217e6:	e000      	b.n	217ea <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   217e8:	2300      	movs	r3, #0
}
   217ea:	0018      	movs	r0, r3
   217ec:	46bd      	mov	sp, r7
   217ee:	b004      	add	sp, #16
   217f0:	bd80      	pop	{r7, pc}
   217f2:	46c0      	nop			; (mov r8, r8)
   217f4:	0002125d 	.word	0x0002125d
   217f8:	00021349 	.word	0x00021349
   217fc:	000213a1 	.word	0x000213a1

00021800 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   21800:	b580      	push	{r7, lr}
   21802:	b082      	sub	sp, #8
   21804:	af00      	add	r7, sp, #0
   21806:	6078      	str	r0, [r7, #4]
   21808:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   2180a:	683a      	ldr	r2, [r7, #0]
   2180c:	687b      	ldr	r3, [r7, #4]
   2180e:	0019      	movs	r1, r3
   21810:	2000      	movs	r0, #0
   21812:	4b03      	ldr	r3, [pc, #12]	; (21820 <sd_mmc_mem_2_ram_0+0x20>)
   21814:	4798      	blx	r3
   21816:	0003      	movs	r3, r0
}
   21818:	0018      	movs	r0, r3
   2181a:	46bd      	mov	sp, r7
   2181c:	b002      	add	sp, #8
   2181e:	bd80      	pop	{r7, pc}
   21820:	00021795 	.word	0x00021795

00021824 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   21824:	b580      	push	{r7, lr}
   21826:	b084      	sub	sp, #16
   21828:	af00      	add	r7, sp, #0
   2182a:	60b9      	str	r1, [r7, #8]
   2182c:	607a      	str	r2, [r7, #4]
   2182e:	230f      	movs	r3, #15
   21830:	18fb      	adds	r3, r7, r3
   21832:	1c02      	adds	r2, r0, #0
   21834:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   21836:	68b9      	ldr	r1, [r7, #8]
   21838:	230f      	movs	r3, #15
   2183a:	18fb      	adds	r3, r7, r3
   2183c:	781b      	ldrb	r3, [r3, #0]
   2183e:	2201      	movs	r2, #1
   21840:	0018      	movs	r0, r3
   21842:	4b10      	ldr	r3, [pc, #64]	; (21884 <sd_mmc_ram_2_mem+0x60>)
   21844:	4798      	blx	r3
   21846:	1e03      	subs	r3, r0, #0
   21848:	d005      	beq.n	21856 <sd_mmc_ram_2_mem+0x32>
   2184a:	2b02      	cmp	r3, #2
   2184c:	d101      	bne.n	21852 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2184e:	2302      	movs	r3, #2
   21850:	e013      	b.n	2187a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   21852:	2301      	movs	r3, #1
   21854:	e011      	b.n	2187a <sd_mmc_ram_2_mem+0x56>
		break;
   21856:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   21858:	687b      	ldr	r3, [r7, #4]
   2185a:	2101      	movs	r1, #1
   2185c:	0018      	movs	r0, r3
   2185e:	4b0a      	ldr	r3, [pc, #40]	; (21888 <sd_mmc_ram_2_mem+0x64>)
   21860:	4798      	blx	r3
   21862:	1e03      	subs	r3, r0, #0
   21864:	d001      	beq.n	2186a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   21866:	2301      	movs	r3, #1
   21868:	e007      	b.n	2187a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2186a:	2000      	movs	r0, #0
   2186c:	4b07      	ldr	r3, [pc, #28]	; (2188c <sd_mmc_ram_2_mem+0x68>)
   2186e:	4798      	blx	r3
   21870:	1e03      	subs	r3, r0, #0
   21872:	d001      	beq.n	21878 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   21874:	2301      	movs	r3, #1
   21876:	e000      	b.n	2187a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   21878:	2300      	movs	r3, #0
}
   2187a:	0018      	movs	r0, r3
   2187c:	46bd      	mov	sp, r7
   2187e:	b004      	add	sp, #16
   21880:	bd80      	pop	{r7, pc}
   21882:	46c0      	nop			; (mov r8, r8)
   21884:	00021439 	.word	0x00021439
   21888:	00021521 	.word	0x00021521
   2188c:	00021579 	.word	0x00021579

00021890 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   21890:	b580      	push	{r7, lr}
   21892:	b082      	sub	sp, #8
   21894:	af00      	add	r7, sp, #0
   21896:	6078      	str	r0, [r7, #4]
   21898:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2189a:	683a      	ldr	r2, [r7, #0]
   2189c:	687b      	ldr	r3, [r7, #4]
   2189e:	0019      	movs	r1, r3
   218a0:	2000      	movs	r0, #0
   218a2:	4b03      	ldr	r3, [pc, #12]	; (218b0 <sd_mmc_ram_2_mem_0+0x20>)
   218a4:	4798      	blx	r3
   218a6:	0003      	movs	r3, r0
}
   218a8:	0018      	movs	r0, r3
   218aa:	46bd      	mov	sp, r7
   218ac:	b002      	add	sp, #8
   218ae:	bd80      	pop	{r7, pc}
   218b0:	00021825 	.word	0x00021825

000218b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   218b4:	b580      	push	{r7, lr}
   218b6:	b084      	sub	sp, #16
   218b8:	af00      	add	r7, sp, #0
   218ba:	0002      	movs	r2, r0
   218bc:	1dfb      	adds	r3, r7, #7
   218be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   218c0:	230f      	movs	r3, #15
   218c2:	18fb      	adds	r3, r7, r3
   218c4:	1dfa      	adds	r2, r7, #7
   218c6:	7812      	ldrb	r2, [r2, #0]
   218c8:	09d2      	lsrs	r2, r2, #7
   218ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   218cc:	230e      	movs	r3, #14
   218ce:	18fb      	adds	r3, r7, r3
   218d0:	1dfa      	adds	r2, r7, #7
   218d2:	7812      	ldrb	r2, [r2, #0]
   218d4:	0952      	lsrs	r2, r2, #5
   218d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   218d8:	4b0d      	ldr	r3, [pc, #52]	; (21910 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   218da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   218dc:	230f      	movs	r3, #15
   218de:	18fb      	adds	r3, r7, r3
   218e0:	781b      	ldrb	r3, [r3, #0]
   218e2:	2b00      	cmp	r3, #0
   218e4:	d10f      	bne.n	21906 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   218e6:	230f      	movs	r3, #15
   218e8:	18fb      	adds	r3, r7, r3
   218ea:	781b      	ldrb	r3, [r3, #0]
   218ec:	009b      	lsls	r3, r3, #2
   218ee:	2210      	movs	r2, #16
   218f0:	4694      	mov	ip, r2
   218f2:	44bc      	add	ip, r7
   218f4:	4463      	add	r3, ip
   218f6:	3b08      	subs	r3, #8
   218f8:	681a      	ldr	r2, [r3, #0]
   218fa:	230e      	movs	r3, #14
   218fc:	18fb      	adds	r3, r7, r3
   218fe:	781b      	ldrb	r3, [r3, #0]
   21900:	01db      	lsls	r3, r3, #7
   21902:	18d3      	adds	r3, r2, r3
   21904:	e000      	b.n	21908 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   21906:	2300      	movs	r3, #0
	}
}
   21908:	0018      	movs	r0, r3
   2190a:	46bd      	mov	sp, r7
   2190c:	b004      	add	sp, #16
   2190e:	bd80      	pop	{r7, pc}
   21910:	41004400 	.word	0x41004400

00021914 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   21914:	b580      	push	{r7, lr}
   21916:	b082      	sub	sp, #8
   21918:	af00      	add	r7, sp, #0
   2191a:	0002      	movs	r2, r0
   2191c:	1dfb      	adds	r3, r7, #7
   2191e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21920:	1dfb      	adds	r3, r7, #7
   21922:	781b      	ldrb	r3, [r3, #0]
   21924:	0018      	movs	r0, r3
   21926:	4b03      	ldr	r3, [pc, #12]	; (21934 <port_get_group_from_gpio_pin+0x20>)
   21928:	4798      	blx	r3
   2192a:	0003      	movs	r3, r0
}
   2192c:	0018      	movs	r0, r3
   2192e:	46bd      	mov	sp, r7
   21930:	b002      	add	sp, #8
   21932:	bd80      	pop	{r7, pc}
   21934:	000218b5 	.word	0x000218b5

00021938 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   21938:	b580      	push	{r7, lr}
   2193a:	b082      	sub	sp, #8
   2193c:	af00      	add	r7, sp, #0
   2193e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   21940:	687b      	ldr	r3, [r7, #4]
   21942:	2200      	movs	r2, #0
   21944:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21946:	687b      	ldr	r3, [r7, #4]
   21948:	2201      	movs	r2, #1
   2194a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2194c:	687b      	ldr	r3, [r7, #4]
   2194e:	2200      	movs	r2, #0
   21950:	709a      	strb	r2, [r3, #2]
}
   21952:	46c0      	nop			; (mov r8, r8)
   21954:	46bd      	mov	sp, r7
   21956:	b002      	add	sp, #8
   21958:	bd80      	pop	{r7, pc}
	...

0002195c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   2195c:	b580      	push	{r7, lr}
   2195e:	b084      	sub	sp, #16
   21960:	af00      	add	r7, sp, #0
   21962:	0002      	movs	r2, r0
   21964:	1dfb      	adds	r3, r7, #7
   21966:	701a      	strb	r2, [r3, #0]
   21968:	1dbb      	adds	r3, r7, #6
   2196a:	1c0a      	adds	r2, r1, #0
   2196c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2196e:	1dfb      	adds	r3, r7, #7
   21970:	781b      	ldrb	r3, [r3, #0]
   21972:	0018      	movs	r0, r3
   21974:	4b0d      	ldr	r3, [pc, #52]	; (219ac <port_pin_set_output_level+0x50>)
   21976:	4798      	blx	r3
   21978:	0003      	movs	r3, r0
   2197a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2197c:	1dfb      	adds	r3, r7, #7
   2197e:	781b      	ldrb	r3, [r3, #0]
   21980:	221f      	movs	r2, #31
   21982:	4013      	ands	r3, r2
   21984:	2201      	movs	r2, #1
   21986:	409a      	lsls	r2, r3
   21988:	0013      	movs	r3, r2
   2198a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   2198c:	1dbb      	adds	r3, r7, #6
   2198e:	781b      	ldrb	r3, [r3, #0]
   21990:	2b00      	cmp	r3, #0
   21992:	d003      	beq.n	2199c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21994:	68fb      	ldr	r3, [r7, #12]
   21996:	68ba      	ldr	r2, [r7, #8]
   21998:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   2199a:	e002      	b.n	219a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2199c:	68fb      	ldr	r3, [r7, #12]
   2199e:	68ba      	ldr	r2, [r7, #8]
   219a0:	615a      	str	r2, [r3, #20]
}
   219a2:	46c0      	nop			; (mov r8, r8)
   219a4:	46bd      	mov	sp, r7
   219a6:	b004      	add	sp, #16
   219a8:	bd80      	pop	{r7, pc}
   219aa:	46c0      	nop			; (mov r8, r8)
   219ac:	00021915 	.word	0x00021915

000219b0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   219b0:	b580      	push	{r7, lr}
   219b2:	b084      	sub	sp, #16
   219b4:	af00      	add	r7, sp, #0
   219b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   219b8:	687b      	ldr	r3, [r7, #4]
   219ba:	681b      	ldr	r3, [r3, #0]
   219bc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   219be:	68fb      	ldr	r3, [r7, #12]
   219c0:	69db      	ldr	r3, [r3, #28]
   219c2:	1e5a      	subs	r2, r3, #1
   219c4:	4193      	sbcs	r3, r2
   219c6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   219c8:	0018      	movs	r0, r3
   219ca:	46bd      	mov	sp, r7
   219cc:	b004      	add	sp, #16
   219ce:	bd80      	pop	{r7, pc}

000219d0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   219d0:	b580      	push	{r7, lr}
   219d2:	b082      	sub	sp, #8
   219d4:	af00      	add	r7, sp, #0
   219d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   219d8:	687b      	ldr	r3, [r7, #4]
   219da:	2201      	movs	r2, #1
   219dc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   219de:	687b      	ldr	r3, [r7, #4]
   219e0:	2200      	movs	r2, #0
   219e2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   219e4:	687b      	ldr	r3, [r7, #4]
   219e6:	2200      	movs	r2, #0
   219e8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   219ea:	687b      	ldr	r3, [r7, #4]
   219ec:	22c0      	movs	r2, #192	; 0xc0
   219ee:	0392      	lsls	r2, r2, #14
   219f0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   219f2:	687b      	ldr	r3, [r7, #4]
   219f4:	2200      	movs	r2, #0
   219f6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   219f8:	687b      	ldr	r3, [r7, #4]
   219fa:	2200      	movs	r2, #0
   219fc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   219fe:	687b      	ldr	r3, [r7, #4]
   21a00:	2201      	movs	r2, #1
   21a02:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   21a04:	687b      	ldr	r3, [r7, #4]
   21a06:	2201      	movs	r2, #1
   21a08:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   21a0a:	687b      	ldr	r3, [r7, #4]
   21a0c:	2200      	movs	r2, #0
   21a0e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   21a10:	687b      	ldr	r3, [r7, #4]
   21a12:	2224      	movs	r2, #36	; 0x24
   21a14:	2100      	movs	r1, #0
   21a16:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   21a18:	687b      	ldr	r3, [r7, #4]
   21a1a:	3318      	adds	r3, #24
   21a1c:	220c      	movs	r2, #12
   21a1e:	2100      	movs	r1, #0
   21a20:	0018      	movs	r0, r3
   21a22:	4b0a      	ldr	r3, [pc, #40]	; (21a4c <spi_get_config_defaults+0x7c>)
   21a24:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   21a26:	687b      	ldr	r3, [r7, #4]
   21a28:	4a09      	ldr	r2, [pc, #36]	; (21a50 <spi_get_config_defaults+0x80>)
   21a2a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   21a2c:	687b      	ldr	r3, [r7, #4]
   21a2e:	2200      	movs	r2, #0
   21a30:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21a32:	687b      	ldr	r3, [r7, #4]
   21a34:	2200      	movs	r2, #0
   21a36:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   21a38:	687b      	ldr	r3, [r7, #4]
   21a3a:	2200      	movs	r2, #0
   21a3c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   21a3e:	687b      	ldr	r3, [r7, #4]
   21a40:	2200      	movs	r2, #0
   21a42:	635a      	str	r2, [r3, #52]	; 0x34

};
   21a44:	46c0      	nop			; (mov r8, r8)
   21a46:	46bd      	mov	sp, r7
   21a48:	b002      	add	sp, #8
   21a4a:	bd80      	pop	{r7, pc}
   21a4c:	0003796b 	.word	0x0003796b
   21a50:	000186a0 	.word	0x000186a0

00021a54 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   21a54:	b580      	push	{r7, lr}
   21a56:	b082      	sub	sp, #8
   21a58:	af00      	add	r7, sp, #0
   21a5a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   21a5c:	687b      	ldr	r3, [r7, #4]
   21a5e:	220a      	movs	r2, #10
   21a60:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21a62:	687b      	ldr	r3, [r7, #4]
   21a64:	2200      	movs	r2, #0
   21a66:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   21a68:	687b      	ldr	r3, [r7, #4]
   21a6a:	2200      	movs	r2, #0
   21a6c:	709a      	strb	r2, [r3, #2]
}
   21a6e:	46c0      	nop			; (mov r8, r8)
   21a70:	46bd      	mov	sp, r7
   21a72:	b002      	add	sp, #8
   21a74:	bd80      	pop	{r7, pc}
	...

00021a78 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   21a78:	b580      	push	{r7, lr}
   21a7a:	b084      	sub	sp, #16
   21a7c:	af00      	add	r7, sp, #0
   21a7e:	6078      	str	r0, [r7, #4]
   21a80:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   21a82:	683b      	ldr	r3, [r7, #0]
   21a84:	781a      	ldrb	r2, [r3, #0]
   21a86:	687b      	ldr	r3, [r7, #4]
   21a88:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   21a8a:	683b      	ldr	r3, [r7, #0]
   21a8c:	785a      	ldrb	r2, [r3, #1]
   21a8e:	687b      	ldr	r3, [r7, #4]
   21a90:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21a92:	683b      	ldr	r3, [r7, #0]
   21a94:	789a      	ldrb	r2, [r3, #2]
   21a96:	687b      	ldr	r3, [r7, #4]
   21a98:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   21a9a:	230c      	movs	r3, #12
   21a9c:	18fb      	adds	r3, r7, r3
   21a9e:	0018      	movs	r0, r3
   21aa0:	4b0b      	ldr	r3, [pc, #44]	; (21ad0 <spi_attach_slave+0x58>)
   21aa2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21aa4:	230c      	movs	r3, #12
   21aa6:	18fb      	adds	r3, r7, r3
   21aa8:	2201      	movs	r2, #1
   21aaa:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   21aac:	687b      	ldr	r3, [r7, #4]
   21aae:	781b      	ldrb	r3, [r3, #0]
   21ab0:	220c      	movs	r2, #12
   21ab2:	18ba      	adds	r2, r7, r2
   21ab4:	0011      	movs	r1, r2
   21ab6:	0018      	movs	r0, r3
   21ab8:	4b06      	ldr	r3, [pc, #24]	; (21ad4 <spi_attach_slave+0x5c>)
   21aba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   21abc:	687b      	ldr	r3, [r7, #4]
   21abe:	781b      	ldrb	r3, [r3, #0]
   21ac0:	2101      	movs	r1, #1
   21ac2:	0018      	movs	r0, r3
   21ac4:	4b04      	ldr	r3, [pc, #16]	; (21ad8 <spi_attach_slave+0x60>)
   21ac6:	4798      	blx	r3
}
   21ac8:	46c0      	nop			; (mov r8, r8)
   21aca:	46bd      	mov	sp, r7
   21acc:	b004      	add	sp, #16
   21ace:	bd80      	pop	{r7, pc}
   21ad0:	00021939 	.word	0x00021939
   21ad4:	00028dd5 	.word	0x00028dd5
   21ad8:	0002195d 	.word	0x0002195d

00021adc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   21adc:	b580      	push	{r7, lr}
   21ade:	b084      	sub	sp, #16
   21ae0:	af00      	add	r7, sp, #0
   21ae2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21ae4:	687b      	ldr	r3, [r7, #4]
   21ae6:	681b      	ldr	r3, [r3, #0]
   21ae8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   21aea:	46c0      	nop			; (mov r8, r8)
   21aec:	687b      	ldr	r3, [r7, #4]
   21aee:	0018      	movs	r0, r3
   21af0:	4b06      	ldr	r3, [pc, #24]	; (21b0c <spi_enable+0x30>)
   21af2:	4798      	blx	r3
   21af4:	1e03      	subs	r3, r0, #0
   21af6:	d1f9      	bne.n	21aec <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   21af8:	68fb      	ldr	r3, [r7, #12]
   21afa:	681b      	ldr	r3, [r3, #0]
   21afc:	2202      	movs	r2, #2
   21afe:	431a      	orrs	r2, r3
   21b00:	68fb      	ldr	r3, [r7, #12]
   21b02:	601a      	str	r2, [r3, #0]
}
   21b04:	46c0      	nop			; (mov r8, r8)
   21b06:	46bd      	mov	sp, r7
   21b08:	b004      	add	sp, #16
   21b0a:	bd80      	pop	{r7, pc}
   21b0c:	000219b1 	.word	0x000219b1

00021b10 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   21b10:	b580      	push	{r7, lr}
   21b12:	b084      	sub	sp, #16
   21b14:	af00      	add	r7, sp, #0
   21b16:	6078      	str	r0, [r7, #4]
   21b18:	000a      	movs	r2, r1
   21b1a:	1cfb      	adds	r3, r7, #3
   21b1c:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   21b1e:	230f      	movs	r3, #15
   21b20:	18fb      	adds	r3, r7, r3
   21b22:	2200      	movs	r2, #0
   21b24:	701a      	strb	r2, [r3, #0]
	while (size--) {
   21b26:	e038      	b.n	21b9a <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   21b28:	687b      	ldr	r3, [r7, #4]
   21b2a:	1c5a      	adds	r2, r3, #1
   21b2c:	607a      	str	r2, [r7, #4]
   21b2e:	220e      	movs	r2, #14
   21b30:	18ba      	adds	r2, r7, r2
   21b32:	781b      	ldrb	r3, [r3, #0]
   21b34:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   21b36:	230d      	movs	r3, #13
   21b38:	18fb      	adds	r3, r7, r3
   21b3a:	2200      	movs	r2, #0
   21b3c:	701a      	strb	r2, [r3, #0]
   21b3e:	e027      	b.n	21b90 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   21b40:	230f      	movs	r3, #15
   21b42:	18fa      	adds	r2, r7, r3
   21b44:	230f      	movs	r3, #15
   21b46:	18fb      	adds	r3, r7, r3
   21b48:	781b      	ldrb	r3, [r3, #0]
   21b4a:	18db      	adds	r3, r3, r3
   21b4c:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   21b4e:	230e      	movs	r3, #14
   21b50:	18fa      	adds	r2, r7, r3
   21b52:	230f      	movs	r3, #15
   21b54:	18fb      	adds	r3, r7, r3
   21b56:	7812      	ldrb	r2, [r2, #0]
   21b58:	781b      	ldrb	r3, [r3, #0]
   21b5a:	4053      	eors	r3, r2
   21b5c:	b2db      	uxtb	r3, r3
   21b5e:	b25b      	sxtb	r3, r3
   21b60:	2b00      	cmp	r3, #0
   21b62:	da07      	bge.n	21b74 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   21b64:	230f      	movs	r3, #15
   21b66:	18fb      	adds	r3, r7, r3
   21b68:	220f      	movs	r2, #15
   21b6a:	18ba      	adds	r2, r7, r2
   21b6c:	7812      	ldrb	r2, [r2, #0]
   21b6e:	2109      	movs	r1, #9
   21b70:	404a      	eors	r2, r1
   21b72:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   21b74:	230e      	movs	r3, #14
   21b76:	18fa      	adds	r2, r7, r3
   21b78:	230e      	movs	r3, #14
   21b7a:	18fb      	adds	r3, r7, r3
   21b7c:	781b      	ldrb	r3, [r3, #0]
   21b7e:	18db      	adds	r3, r3, r3
   21b80:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   21b82:	230d      	movs	r3, #13
   21b84:	18fb      	adds	r3, r7, r3
   21b86:	781a      	ldrb	r2, [r3, #0]
   21b88:	230d      	movs	r3, #13
   21b8a:	18fb      	adds	r3, r7, r3
   21b8c:	3201      	adds	r2, #1
   21b8e:	701a      	strb	r2, [r3, #0]
   21b90:	230d      	movs	r3, #13
   21b92:	18fb      	adds	r3, r7, r3
   21b94:	781b      	ldrb	r3, [r3, #0]
   21b96:	2b07      	cmp	r3, #7
   21b98:	d9d2      	bls.n	21b40 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   21b9a:	1cfb      	adds	r3, r7, #3
   21b9c:	781b      	ldrb	r3, [r3, #0]
   21b9e:	1cfa      	adds	r2, r7, #3
   21ba0:	1e59      	subs	r1, r3, #1
   21ba2:	7011      	strb	r1, [r2, #0]
   21ba4:	2b00      	cmp	r3, #0
   21ba6:	d1bf      	bne.n	21b28 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   21ba8:	230f      	movs	r3, #15
   21baa:	18fb      	adds	r3, r7, r3
   21bac:	781b      	ldrb	r3, [r3, #0]
   21bae:	005b      	lsls	r3, r3, #1
   21bb0:	b25b      	sxtb	r3, r3
   21bb2:	2201      	movs	r2, #1
   21bb4:	4313      	orrs	r3, r2
   21bb6:	b25a      	sxtb	r2, r3
   21bb8:	230f      	movs	r3, #15
   21bba:	18fb      	adds	r3, r7, r3
   21bbc:	701a      	strb	r2, [r3, #0]
	return crc;
   21bbe:	230f      	movs	r3, #15
   21bc0:	18fb      	adds	r3, r7, r3
   21bc2:	781b      	ldrb	r3, [r3, #0]
}
   21bc4:	0018      	movs	r0, r3
   21bc6:	46bd      	mov	sp, r7
   21bc8:	b004      	add	sp, #16
   21bca:	bd80      	pop	{r7, pc}

00021bcc <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   21bcc:	b590      	push	{r4, r7, lr}
   21bce:	b083      	sub	sp, #12
   21bd0:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   21bd2:	1c7b      	adds	r3, r7, #1
   21bd4:	22ff      	movs	r2, #255	; 0xff
   21bd6:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   21bd8:	1cbb      	adds	r3, r7, #2
   21bda:	22ff      	movs	r2, #255	; 0xff
   21bdc:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21bde:	1cbb      	adds	r3, r7, #2
   21be0:	881b      	ldrh	r3, [r3, #0]
   21be2:	1c79      	adds	r1, r7, #1
   21be4:	4811      	ldr	r0, [pc, #68]	; (21c2c <sd_mmc_spi_wait_busy+0x60>)
   21be6:	2201      	movs	r2, #1
   21be8:	4c11      	ldr	r4, [pc, #68]	; (21c30 <sd_mmc_spi_wait_busy+0x64>)
   21bea:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   21bec:	4b11      	ldr	r3, [pc, #68]	; (21c34 <sd_mmc_spi_wait_busy+0x68>)
   21bee:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21bf0:	1cbb      	adds	r3, r7, #2
   21bf2:	881b      	ldrh	r3, [r3, #0]
   21bf4:	1c79      	adds	r1, r7, #1
   21bf6:	480d      	ldr	r0, [pc, #52]	; (21c2c <sd_mmc_spi_wait_busy+0x60>)
   21bf8:	2201      	movs	r2, #1
   21bfa:	4c0d      	ldr	r4, [pc, #52]	; (21c30 <sd_mmc_spi_wait_busy+0x64>)
   21bfc:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21bfe:	1cbb      	adds	r3, r7, #2
   21c00:	881b      	ldrh	r3, [r3, #0]
   21c02:	1c79      	adds	r1, r7, #1
   21c04:	4809      	ldr	r0, [pc, #36]	; (21c2c <sd_mmc_spi_wait_busy+0x60>)
   21c06:	2201      	movs	r2, #1
   21c08:	4c09      	ldr	r4, [pc, #36]	; (21c30 <sd_mmc_spi_wait_busy+0x64>)
   21c0a:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   21c0c:	687b      	ldr	r3, [r7, #4]
   21c0e:	1e5a      	subs	r2, r3, #1
   21c10:	607a      	str	r2, [r7, #4]
   21c12:	2b00      	cmp	r3, #0
   21c14:	d101      	bne.n	21c1a <sd_mmc_spi_wait_busy+0x4e>
			return false;
   21c16:	2300      	movs	r3, #0
   21c18:	e004      	b.n	21c24 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   21c1a:	1c7b      	adds	r3, r7, #1
   21c1c:	781b      	ldrb	r3, [r3, #0]
   21c1e:	2bff      	cmp	r3, #255	; 0xff
   21c20:	d1ed      	bne.n	21bfe <sd_mmc_spi_wait_busy+0x32>
	return true;
   21c22:	2301      	movs	r3, #1
}
   21c24:	0018      	movs	r0, r3
   21c26:	46bd      	mov	sp, r7
   21c28:	b003      	add	sp, #12
   21c2a:	bd90      	pop	{r4, r7, pc}
   21c2c:	200040f4 	.word	0x200040f4
   21c30:	0002a5d9 	.word	0x0002a5d9
   21c34:	00030d40 	.word	0x00030d40

00021c38 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   21c38:	b590      	push	{r4, r7, lr}
   21c3a:	b083      	sub	sp, #12
   21c3c:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   21c3e:	1cbb      	adds	r3, r7, #2
   21c40:	22ff      	movs	r2, #255	; 0xff
   21c42:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   21c44:	1c7b      	adds	r3, r7, #1
   21c46:	2200      	movs	r2, #0
   21c48:	701a      	strb	r2, [r3, #0]
	i = 500000;
   21c4a:	4b18      	ldr	r3, [pc, #96]	; (21cac <sd_mmc_spi_start_read_block+0x74>)
   21c4c:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   21c4e:	687b      	ldr	r3, [r7, #4]
   21c50:	1e5a      	subs	r2, r3, #1
   21c52:	607a      	str	r2, [r7, #4]
   21c54:	2b00      	cmp	r3, #0
   21c56:	d104      	bne.n	21c62 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   21c58:	4b15      	ldr	r3, [pc, #84]	; (21cb0 <sd_mmc_spi_start_read_block+0x78>)
   21c5a:	2204      	movs	r2, #4
   21c5c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   21c5e:	2300      	movs	r3, #0
   21c60:	e020      	b.n	21ca4 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   21c62:	1cbb      	adds	r3, r7, #2
   21c64:	881b      	ldrh	r3, [r3, #0]
   21c66:	1c79      	adds	r1, r7, #1
   21c68:	4812      	ldr	r0, [pc, #72]	; (21cb4 <sd_mmc_spi_start_read_block+0x7c>)
   21c6a:	2201      	movs	r2, #1
   21c6c:	4c12      	ldr	r4, [pc, #72]	; (21cb8 <sd_mmc_spi_start_read_block+0x80>)
   21c6e:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   21c70:	1c7b      	adds	r3, r7, #1
   21c72:	781b      	ldrb	r3, [r3, #0]
   21c74:	001a      	movs	r2, r3
   21c76:	23f0      	movs	r3, #240	; 0xf0
   21c78:	4013      	ands	r3, r2
   21c7a:	d10e      	bne.n	21c9a <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   21c7c:	1c7b      	adds	r3, r7, #1
   21c7e:	781b      	ldrb	r3, [r3, #0]
   21c80:	001a      	movs	r2, r3
   21c82:	2307      	movs	r3, #7
   21c84:	4013      	ands	r3, r2
   21c86:	d003      	beq.n	21c90 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   21c88:	4b09      	ldr	r3, [pc, #36]	; (21cb0 <sd_mmc_spi_start_read_block+0x78>)
   21c8a:	2207      	movs	r2, #7
   21c8c:	701a      	strb	r2, [r3, #0]
   21c8e:	e002      	b.n	21c96 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   21c90:	4b07      	ldr	r3, [pc, #28]	; (21cb0 <sd_mmc_spi_start_read_block+0x78>)
   21c92:	220b      	movs	r2, #11
   21c94:	701a      	strb	r2, [r3, #0]
			}
			return false;
   21c96:	2300      	movs	r3, #0
   21c98:	e004      	b.n	21ca4 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   21c9a:	1c7b      	adds	r3, r7, #1
   21c9c:	781b      	ldrb	r3, [r3, #0]
   21c9e:	2bfe      	cmp	r3, #254	; 0xfe
   21ca0:	d1d5      	bne.n	21c4e <sd_mmc_spi_start_read_block+0x16>

	return true;
   21ca2:	2301      	movs	r3, #1
}
   21ca4:	0018      	movs	r0, r3
   21ca6:	46bd      	mov	sp, r7
   21ca8:	b003      	add	sp, #12
   21caa:	bd90      	pop	{r4, r7, pc}
   21cac:	0007a120 	.word	0x0007a120
   21cb0:	20004107 	.word	0x20004107
   21cb4:	200040f4 	.word	0x200040f4
   21cb8:	0002a5d9 	.word	0x0002a5d9

00021cbc <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   21cbc:	b590      	push	{r4, r7, lr}
   21cbe:	b083      	sub	sp, #12
   21cc0:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   21cc2:	1dbb      	adds	r3, r7, #6
   21cc4:	22ff      	movs	r2, #255	; 0xff
   21cc6:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   21cc8:	1dbb      	adds	r3, r7, #6
   21cca:	881b      	ldrh	r3, [r3, #0]
   21ccc:	1d39      	adds	r1, r7, #4
   21cce:	4804      	ldr	r0, [pc, #16]	; (21ce0 <sd_mmc_spi_stop_read_block+0x24>)
   21cd0:	2202      	movs	r2, #2
   21cd2:	4c04      	ldr	r4, [pc, #16]	; (21ce4 <sd_mmc_spi_stop_read_block+0x28>)
   21cd4:	47a0      	blx	r4
			dummy);
}
   21cd6:	46c0      	nop			; (mov r8, r8)
   21cd8:	46bd      	mov	sp, r7
   21cda:	b003      	add	sp, #12
   21cdc:	bd90      	pop	{r4, r7, pc}
   21cde:	46c0      	nop			; (mov r8, r8)
   21ce0:	200040f4 	.word	0x200040f4
   21ce4:	0002a5d9 	.word	0x0002a5d9

00021ce8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   21ce8:	b580      	push	{r7, lr}
   21cea:	b082      	sub	sp, #8
   21cec:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   21cee:	1dfb      	adds	r3, r7, #7
   21cf0:	22ff      	movs	r2, #255	; 0xff
   21cf2:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   21cf4:	1df9      	adds	r1, r7, #7
   21cf6:	4b0d      	ldr	r3, [pc, #52]	; (21d2c <sd_mmc_spi_start_write_block+0x44>)
   21cf8:	2201      	movs	r2, #1
   21cfa:	0018      	movs	r0, r3
   21cfc:	4b0c      	ldr	r3, [pc, #48]	; (21d30 <sd_mmc_spi_start_write_block+0x48>)
   21cfe:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   21d00:	4b0c      	ldr	r3, [pc, #48]	; (21d34 <sd_mmc_spi_start_write_block+0x4c>)
   21d02:	881b      	ldrh	r3, [r3, #0]
   21d04:	2b01      	cmp	r3, #1
   21d06:	d103      	bne.n	21d10 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   21d08:	1dbb      	adds	r3, r7, #6
   21d0a:	22fe      	movs	r2, #254	; 0xfe
   21d0c:	701a      	strb	r2, [r3, #0]
   21d0e:	e002      	b.n	21d16 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   21d10:	1dbb      	adds	r3, r7, #6
   21d12:	22fc      	movs	r2, #252	; 0xfc
   21d14:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   21d16:	1db9      	adds	r1, r7, #6
   21d18:	4b04      	ldr	r3, [pc, #16]	; (21d2c <sd_mmc_spi_start_write_block+0x44>)
   21d1a:	2201      	movs	r2, #1
   21d1c:	0018      	movs	r0, r3
   21d1e:	4b04      	ldr	r3, [pc, #16]	; (21d30 <sd_mmc_spi_start_write_block+0x48>)
   21d20:	4798      	blx	r3
}
   21d22:	46c0      	nop			; (mov r8, r8)
   21d24:	46bd      	mov	sp, r7
   21d26:	b002      	add	sp, #8
   21d28:	bd80      	pop	{r7, pc}
   21d2a:	46c0      	nop			; (mov r8, r8)
   21d2c:	200040f4 	.word	0x200040f4
   21d30:	0002a875 	.word	0x0002a875
   21d34:	20004112 	.word	0x20004112

00021d38 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   21d38:	b590      	push	{r4, r7, lr}
   21d3a:	b083      	sub	sp, #12
   21d3c:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   21d3e:	1dbb      	adds	r3, r7, #6
   21d40:	22ff      	movs	r2, #255	; 0xff
   21d42:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   21d44:	1cbb      	adds	r3, r7, #2
   21d46:	2201      	movs	r2, #1
   21d48:	4252      	negs	r2, r2
   21d4a:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   21d4c:	1cb9      	adds	r1, r7, #2
   21d4e:	4b1b      	ldr	r3, [pc, #108]	; (21dbc <sd_mmc_spi_stop_write_block+0x84>)
   21d50:	2202      	movs	r2, #2
   21d52:	0018      	movs	r0, r3
   21d54:	4b1a      	ldr	r3, [pc, #104]	; (21dc0 <sd_mmc_spi_stop_write_block+0x88>)
   21d56:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   21d58:	1dbb      	adds	r3, r7, #6
   21d5a:	881b      	ldrh	r3, [r3, #0]
   21d5c:	1d79      	adds	r1, r7, #5
   21d5e:	4817      	ldr	r0, [pc, #92]	; (21dbc <sd_mmc_spi_stop_write_block+0x84>)
   21d60:	2201      	movs	r2, #1
   21d62:	4c18      	ldr	r4, [pc, #96]	; (21dc4 <sd_mmc_spi_stop_write_block+0x8c>)
   21d64:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   21d66:	1d7b      	adds	r3, r7, #5
   21d68:	781b      	ldrb	r3, [r3, #0]
   21d6a:	001a      	movs	r2, r3
   21d6c:	2310      	movs	r3, #16
   21d6e:	4013      	ands	r3, r2
   21d70:	d105      	bne.n	21d7e <sd_mmc_spi_stop_write_block+0x46>
   21d72:	1d7b      	adds	r3, r7, #5
   21d74:	781b      	ldrb	r3, [r3, #0]
   21d76:	001a      	movs	r2, r3
   21d78:	2301      	movs	r3, #1
   21d7a:	4013      	ands	r3, r2
   21d7c:	d104      	bne.n	21d88 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   21d7e:	4b12      	ldr	r3, [pc, #72]	; (21dc8 <sd_mmc_spi_stop_write_block+0x90>)
   21d80:	2201      	movs	r2, #1
   21d82:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   21d84:	2300      	movs	r3, #0
   21d86:	e014      	b.n	21db2 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   21d88:	1d7b      	adds	r3, r7, #5
   21d8a:	781b      	ldrb	r3, [r3, #0]
   21d8c:	001a      	movs	r2, r3
   21d8e:	231e      	movs	r3, #30
   21d90:	4013      	ands	r3, r2
   21d92:	2b04      	cmp	r3, #4
   21d94:	d00b      	beq.n	21dae <sd_mmc_spi_stop_write_block+0x76>
   21d96:	2b0a      	cmp	r3, #10
   21d98:	d104      	bne.n	21da4 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   21d9a:	4b0b      	ldr	r3, [pc, #44]	; (21dc8 <sd_mmc_spi_stop_write_block+0x90>)
   21d9c:	2208      	movs	r2, #8
   21d9e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   21da0:	2300      	movs	r3, #0
   21da2:	e006      	b.n	21db2 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   21da4:	4b08      	ldr	r3, [pc, #32]	; (21dc8 <sd_mmc_spi_stop_write_block+0x90>)
   21da6:	220a      	movs	r2, #10
   21da8:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   21daa:	2300      	movs	r3, #0
   21dac:	e001      	b.n	21db2 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   21dae:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   21db0:	2301      	movs	r3, #1
}
   21db2:	0018      	movs	r0, r3
   21db4:	46bd      	mov	sp, r7
   21db6:	b003      	add	sp, #12
   21db8:	bd90      	pop	{r4, r7, pc}
   21dba:	46c0      	nop			; (mov r8, r8)
   21dbc:	200040f4 	.word	0x200040f4
   21dc0:	0002a875 	.word	0x0002a875
   21dc4:	0002a5d9 	.word	0x0002a5d9
   21dc8:	20004107 	.word	0x20004107

00021dcc <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   21dcc:	b590      	push	{r4, r7, lr}
   21dce:	b083      	sub	sp, #12
   21dd0:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   21dd2:	4b1d      	ldr	r3, [pc, #116]	; (21e48 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21dd4:	881b      	ldrh	r3, [r3, #0]
   21dd6:	2b01      	cmp	r3, #1
   21dd8:	d101      	bne.n	21dde <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   21dda:	2301      	movs	r3, #1
   21ddc:	e030      	b.n	21e40 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   21dde:	4b1a      	ldr	r3, [pc, #104]	; (21e48 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21de0:	881b      	ldrh	r3, [r3, #0]
   21de2:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   21de4:	4b19      	ldr	r3, [pc, #100]	; (21e4c <sd_mmc_spi_stop_multiwrite_block+0x80>)
   21de6:	681a      	ldr	r2, [r3, #0]
   21de8:	4b19      	ldr	r3, [pc, #100]	; (21e50 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   21dea:	881b      	ldrh	r3, [r3, #0]
   21dec:	0019      	movs	r1, r3
   21dee:	4b19      	ldr	r3, [pc, #100]	; (21e54 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   21df0:	0010      	movs	r0, r2
   21df2:	4798      	blx	r3
   21df4:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   21df6:	429c      	cmp	r4, r3
   21df8:	d901      	bls.n	21dfe <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   21dfa:	2301      	movs	r3, #1
   21dfc:	e020      	b.n	21e40 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   21dfe:	1dfb      	adds	r3, r7, #7
   21e00:	22ff      	movs	r2, #255	; 0xff
   21e02:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   21e04:	1df9      	adds	r1, r7, #7
   21e06:	4b14      	ldr	r3, [pc, #80]	; (21e58 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   21e08:	2201      	movs	r2, #1
   21e0a:	0018      	movs	r0, r3
   21e0c:	4b13      	ldr	r3, [pc, #76]	; (21e5c <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21e0e:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   21e10:	1dfb      	adds	r3, r7, #7
   21e12:	22fd      	movs	r2, #253	; 0xfd
   21e14:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   21e16:	1df9      	adds	r1, r7, #7
   21e18:	4b0f      	ldr	r3, [pc, #60]	; (21e58 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   21e1a:	2201      	movs	r2, #1
   21e1c:	0018      	movs	r0, r3
   21e1e:	4b0f      	ldr	r3, [pc, #60]	; (21e5c <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21e20:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   21e22:	4b0f      	ldr	r3, [pc, #60]	; (21e60 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   21e24:	4798      	blx	r3
   21e26:	0003      	movs	r3, r0
   21e28:	001a      	movs	r2, r3
   21e2a:	2301      	movs	r3, #1
   21e2c:	4053      	eors	r3, r2
   21e2e:	b2db      	uxtb	r3, r3
   21e30:	2b00      	cmp	r3, #0
   21e32:	d004      	beq.n	21e3e <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   21e34:	4b0b      	ldr	r3, [pc, #44]	; (21e64 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   21e36:	2205      	movs	r2, #5
   21e38:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   21e3a:	2300      	movs	r3, #0
   21e3c:	e000      	b.n	21e40 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   21e3e:	2301      	movs	r3, #1
}
   21e40:	0018      	movs	r0, r3
   21e42:	46bd      	mov	sp, r7
   21e44:	b003      	add	sp, #12
   21e46:	bd90      	pop	{r4, r7, pc}
   21e48:	20004112 	.word	0x20004112
   21e4c:	2000410c 	.word	0x2000410c
   21e50:	20004110 	.word	0x20004110
   21e54:	00034e35 	.word	0x00034e35
   21e58:	200040f4 	.word	0x200040f4
   21e5c:	0002a875 	.word	0x0002a875
   21e60:	00021bcd 	.word	0x00021bcd
   21e64:	20004107 	.word	0x20004107

00021e68 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   21e68:	b580      	push	{r7, lr}
   21e6a:	b090      	sub	sp, #64	; 0x40
   21e6c:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21e6e:	4b1f      	ldr	r3, [pc, #124]	; (21eec <sd_mmc_spi_init+0x84>)
   21e70:	2200      	movs	r2, #0
   21e72:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   21e74:	233c      	movs	r3, #60	; 0x3c
   21e76:	18fb      	adds	r3, r7, r3
   21e78:	0018      	movs	r0, r3
   21e7a:	4b1d      	ldr	r3, [pc, #116]	; (21ef0 <sd_mmc_spi_init+0x88>)
   21e7c:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   21e7e:	1d3b      	adds	r3, r7, #4
   21e80:	0018      	movs	r0, r3
   21e82:	4b1c      	ldr	r3, [pc, #112]	; (21ef4 <sd_mmc_spi_init+0x8c>)
   21e84:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   21e86:	1d3b      	adds	r3, r7, #4
   21e88:	2280      	movs	r2, #128	; 0x80
   21e8a:	0252      	lsls	r2, r2, #9
   21e8c:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   21e8e:	1d3b      	adds	r3, r7, #4
   21e90:	4a19      	ldr	r2, [pc, #100]	; (21ef8 <sd_mmc_spi_init+0x90>)
   21e92:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   21e94:	1d3b      	adds	r3, r7, #4
   21e96:	4a19      	ldr	r2, [pc, #100]	; (21efc <sd_mmc_spi_init+0x94>)
   21e98:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   21e9a:	1d3b      	adds	r3, r7, #4
   21e9c:	4a18      	ldr	r2, [pc, #96]	; (21f00 <sd_mmc_spi_init+0x98>)
   21e9e:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   21ea0:	1d3b      	adds	r3, r7, #4
   21ea2:	4a18      	ldr	r2, [pc, #96]	; (21f04 <sd_mmc_spi_init+0x9c>)
   21ea4:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   21ea6:	1d3b      	adds	r3, r7, #4
   21ea8:	2224      	movs	r2, #36	; 0x24
   21eaa:	2100      	movs	r1, #0
   21eac:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   21eae:	1d3b      	adds	r3, r7, #4
   21eb0:	4a15      	ldr	r2, [pc, #84]	; (21f08 <sd_mmc_spi_init+0xa0>)
   21eb2:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   21eb4:	1d3a      	adds	r2, r7, #4
   21eb6:	4915      	ldr	r1, [pc, #84]	; (21f0c <sd_mmc_spi_init+0xa4>)
   21eb8:	4b15      	ldr	r3, [pc, #84]	; (21f10 <sd_mmc_spi_init+0xa8>)
   21eba:	0018      	movs	r0, r3
   21ebc:	4b15      	ldr	r3, [pc, #84]	; (21f14 <sd_mmc_spi_init+0xac>)
   21ebe:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   21ec0:	4b13      	ldr	r3, [pc, #76]	; (21f10 <sd_mmc_spi_init+0xa8>)
   21ec2:	0018      	movs	r0, r3
   21ec4:	4b14      	ldr	r3, [pc, #80]	; (21f18 <sd_mmc_spi_init+0xb0>)
   21ec6:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   21ec8:	4b14      	ldr	r3, [pc, #80]	; (21f1c <sd_mmc_spi_init+0xb4>)
   21eca:	0018      	movs	r0, r3
   21ecc:	4b14      	ldr	r3, [pc, #80]	; (21f20 <sd_mmc_spi_init+0xb8>)
   21ece:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   21ed0:	4b14      	ldr	r3, [pc, #80]	; (21f24 <sd_mmc_spi_init+0xbc>)
   21ed2:	781a      	ldrb	r2, [r3, #0]
   21ed4:	4b11      	ldr	r3, [pc, #68]	; (21f1c <sd_mmc_spi_init+0xb4>)
   21ed6:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   21ed8:	4a10      	ldr	r2, [pc, #64]	; (21f1c <sd_mmc_spi_init+0xb4>)
   21eda:	4b13      	ldr	r3, [pc, #76]	; (21f28 <sd_mmc_spi_init+0xc0>)
   21edc:	0011      	movs	r1, r2
   21ede:	0018      	movs	r0, r3
   21ee0:	4b12      	ldr	r3, [pc, #72]	; (21f2c <sd_mmc_spi_init+0xc4>)
   21ee2:	4798      	blx	r3
}
   21ee4:	46c0      	nop			; (mov r8, r8)
   21ee6:	46bd      	mov	sp, r7
   21ee8:	b010      	add	sp, #64	; 0x40
   21eea:	bd80      	pop	{r7, pc}
   21eec:	20004107 	.word	0x20004107
   21ef0:	00021939 	.word	0x00021939
   21ef4:	000219d1 	.word	0x000219d1
   21ef8:	00100002 	.word	0x00100002
   21efc:	00110002 	.word	0x00110002
   21f00:	00120002 	.word	0x00120002
   21f04:	00130002 	.word	0x00130002
   21f08:	00061a80 	.word	0x00061a80
   21f0c:	42000c00 	.word	0x42000c00
   21f10:	200040f4 	.word	0x200040f4
   21f14:	0002a4d1 	.word	0x0002a4d1
   21f18:	00021add 	.word	0x00021add
   21f1c:	20004104 	.word	0x20004104
   21f20:	00021a55 	.word	0x00021a55
   21f24:	20000120 	.word	0x20000120
   21f28:	20004100 	.word	0x20004100
   21f2c:	00021a79 	.word	0x00021a79

00021f30 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   21f30:	b590      	push	{r4, r7, lr}
   21f32:	b083      	sub	sp, #12
   21f34:	af00      	add	r7, sp, #0
   21f36:	0004      	movs	r4, r0
   21f38:	6039      	str	r1, [r7, #0]
   21f3a:	0010      	movs	r0, r2
   21f3c:	0019      	movs	r1, r3
   21f3e:	1dfb      	adds	r3, r7, #7
   21f40:	1c22      	adds	r2, r4, #0
   21f42:	701a      	strb	r2, [r3, #0]
   21f44:	1dbb      	adds	r3, r7, #6
   21f46:	1c02      	adds	r2, r0, #0
   21f48:	701a      	strb	r2, [r3, #0]
   21f4a:	1d7b      	adds	r3, r7, #5
   21f4c:	1c0a      	adds	r2, r1, #0
   21f4e:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21f50:	4b13      	ldr	r3, [pc, #76]	; (21fa0 <sd_mmc_spi_select_device+0x70>)
   21f52:	2200      	movs	r2, #0
   21f54:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   21f56:	683b      	ldr	r3, [r7, #0]
   21f58:	4a12      	ldr	r2, [pc, #72]	; (21fa4 <sd_mmc_spi_select_device+0x74>)
   21f5a:	4293      	cmp	r3, r2
   21f5c:	d907      	bls.n	21f6e <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   21f5e:	4b11      	ldr	r3, [pc, #68]	; (21fa4 <sd_mmc_spi_select_device+0x74>)
   21f60:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   21f62:	e004      	b.n	21f6e <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   21f64:	683b      	ldr	r3, [r7, #0]
   21f66:	08db      	lsrs	r3, r3, #3
   21f68:	683a      	ldr	r2, [r7, #0]
   21f6a:	1ad3      	subs	r3, r2, r3
   21f6c:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   21f6e:	683a      	ldr	r2, [r7, #0]
   21f70:	4b0d      	ldr	r3, [pc, #52]	; (21fa8 <sd_mmc_spi_select_device+0x78>)
   21f72:	0011      	movs	r1, r2
   21f74:	0018      	movs	r0, r3
   21f76:	4b0d      	ldr	r3, [pc, #52]	; (21fac <sd_mmc_spi_select_device+0x7c>)
   21f78:	4798      	blx	r3
   21f7a:	0003      	movs	r3, r0
   21f7c:	2b17      	cmp	r3, #23
   21f7e:	d0f1      	beq.n	21f64 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   21f80:	1dfb      	adds	r3, r7, #7
   21f82:	781a      	ldrb	r2, [r3, #0]
   21f84:	0013      	movs	r3, r2
   21f86:	005b      	lsls	r3, r3, #1
   21f88:	189b      	adds	r3, r3, r2
   21f8a:	4a09      	ldr	r2, [pc, #36]	; (21fb0 <sd_mmc_spi_select_device+0x80>)
   21f8c:	1899      	adds	r1, r3, r2
   21f8e:	4b06      	ldr	r3, [pc, #24]	; (21fa8 <sd_mmc_spi_select_device+0x78>)
   21f90:	2201      	movs	r2, #1
   21f92:	0018      	movs	r0, r3
   21f94:	4b07      	ldr	r3, [pc, #28]	; (21fb4 <sd_mmc_spi_select_device+0x84>)
   21f96:	4798      	blx	r3
}
   21f98:	46c0      	nop			; (mov r8, r8)
   21f9a:	46bd      	mov	sp, r7
   21f9c:	b003      	add	sp, #12
   21f9e:	bd90      	pop	{r4, r7, pc}
   21fa0:	20004107 	.word	0x20004107
   21fa4:	00989680 	.word	0x00989680
   21fa8:	200040f4 	.word	0x200040f4
   21fac:	00029f69 	.word	0x00029f69
   21fb0:	20004100 	.word	0x20004100
   21fb4:	0002a785 	.word	0x0002a785

00021fb8 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   21fb8:	b580      	push	{r7, lr}
   21fba:	b082      	sub	sp, #8
   21fbc:	af00      	add	r7, sp, #0
   21fbe:	0002      	movs	r2, r0
   21fc0:	1dfb      	adds	r3, r7, #7
   21fc2:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21fc4:	4b09      	ldr	r3, [pc, #36]	; (21fec <sd_mmc_spi_deselect_device+0x34>)
   21fc6:	2200      	movs	r2, #0
   21fc8:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   21fca:	1dfb      	adds	r3, r7, #7
   21fcc:	781a      	ldrb	r2, [r3, #0]
   21fce:	0013      	movs	r3, r2
   21fd0:	005b      	lsls	r3, r3, #1
   21fd2:	189b      	adds	r3, r3, r2
   21fd4:	4a06      	ldr	r2, [pc, #24]	; (21ff0 <sd_mmc_spi_deselect_device+0x38>)
   21fd6:	1899      	adds	r1, r3, r2
   21fd8:	4b06      	ldr	r3, [pc, #24]	; (21ff4 <sd_mmc_spi_deselect_device+0x3c>)
   21fda:	2200      	movs	r2, #0
   21fdc:	0018      	movs	r0, r3
   21fde:	4b06      	ldr	r3, [pc, #24]	; (21ff8 <sd_mmc_spi_deselect_device+0x40>)
   21fe0:	4798      	blx	r3
}
   21fe2:	46c0      	nop			; (mov r8, r8)
   21fe4:	46bd      	mov	sp, r7
   21fe6:	b002      	add	sp, #8
   21fe8:	bd80      	pop	{r7, pc}
   21fea:	46c0      	nop			; (mov r8, r8)
   21fec:	20004107 	.word	0x20004107
   21ff0:	20004100 	.word	0x20004100
   21ff4:	200040f4 	.word	0x200040f4
   21ff8:	0002a785 	.word	0x0002a785

00021ffc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   21ffc:	b580      	push	{r7, lr}
   21ffe:	b082      	sub	sp, #8
   22000:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   22002:	1dbb      	adds	r3, r7, #6
   22004:	22ff      	movs	r2, #255	; 0xff
   22006:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22008:	4b0c      	ldr	r3, [pc, #48]	; (2203c <sd_mmc_spi_send_clock+0x40>)
   2200a:	2200      	movs	r2, #0
   2200c:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   2200e:	1dfb      	adds	r3, r7, #7
   22010:	2200      	movs	r2, #0
   22012:	701a      	strb	r2, [r3, #0]
   22014:	e00a      	b.n	2202c <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   22016:	1db9      	adds	r1, r7, #6
   22018:	4b09      	ldr	r3, [pc, #36]	; (22040 <sd_mmc_spi_send_clock+0x44>)
   2201a:	2201      	movs	r2, #1
   2201c:	0018      	movs	r0, r3
   2201e:	4b09      	ldr	r3, [pc, #36]	; (22044 <sd_mmc_spi_send_clock+0x48>)
   22020:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   22022:	1dfb      	adds	r3, r7, #7
   22024:	781a      	ldrb	r2, [r3, #0]
   22026:	1dfb      	adds	r3, r7, #7
   22028:	3201      	adds	r2, #1
   2202a:	701a      	strb	r2, [r3, #0]
   2202c:	1dfb      	adds	r3, r7, #7
   2202e:	781b      	ldrb	r3, [r3, #0]
   22030:	2b09      	cmp	r3, #9
   22032:	d9f0      	bls.n	22016 <sd_mmc_spi_send_clock+0x1a>
	}
}
   22034:	46c0      	nop			; (mov r8, r8)
   22036:	46bd      	mov	sp, r7
   22038:	b002      	add	sp, #8
   2203a:	bd80      	pop	{r7, pc}
   2203c:	20004107 	.word	0x20004107
   22040:	200040f4 	.word	0x200040f4
   22044:	0002a875 	.word	0x0002a875

00022048 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   22048:	b590      	push	{r4, r7, lr}
   2204a:	b085      	sub	sp, #20
   2204c:	af02      	add	r7, sp, #8
   2204e:	6078      	str	r0, [r7, #4]
   22050:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   22052:	6839      	ldr	r1, [r7, #0]
   22054:	6878      	ldr	r0, [r7, #4]
   22056:	2300      	movs	r3, #0
   22058:	9300      	str	r3, [sp, #0]
   2205a:	2300      	movs	r3, #0
   2205c:	2200      	movs	r2, #0
   2205e:	4c03      	ldr	r4, [pc, #12]	; (2206c <sd_mmc_spi_send_cmd+0x24>)
   22060:	47a0      	blx	r4
   22062:	0003      	movs	r3, r0
}
   22064:	0018      	movs	r0, r3
   22066:	46bd      	mov	sp, r7
   22068:	b003      	add	sp, #12
   2206a:	bd90      	pop	{r4, r7, pc}
   2206c:	00022071 	.word	0x00022071

00022070 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   22070:	b590      	push	{r4, r7, lr}
   22072:	b089      	sub	sp, #36	; 0x24
   22074:	af00      	add	r7, sp, #0
   22076:	60f8      	str	r0, [r7, #12]
   22078:	60b9      	str	r1, [r7, #8]
   2207a:	0019      	movs	r1, r3
   2207c:	1dbb      	adds	r3, r7, #6
   2207e:	801a      	strh	r2, [r3, #0]
   22080:	1d3b      	adds	r3, r7, #4
   22082:	1c0a      	adds	r2, r1, #0
   22084:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   22086:	231b      	movs	r3, #27
   22088:	18fb      	adds	r3, r7, r3
   2208a:	22ff      	movs	r2, #255	; 0xff
   2208c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   2208e:	231c      	movs	r3, #28
   22090:	18fb      	adds	r3, r7, r3
   22092:	22ff      	movs	r2, #255	; 0xff
   22094:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22096:	4b72      	ldr	r3, [pc, #456]	; (22260 <sd_mmc_spi_adtc_start+0x1f0>)
   22098:	2200      	movs	r2, #0
   2209a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   2209c:	68fb      	ldr	r3, [r7, #12]
   2209e:	b2db      	uxtb	r3, r3
   220a0:	223f      	movs	r2, #63	; 0x3f
   220a2:	4013      	ands	r3, r2
   220a4:	b2db      	uxtb	r3, r3
   220a6:	2240      	movs	r2, #64	; 0x40
   220a8:	4313      	orrs	r3, r2
   220aa:	b2da      	uxtb	r2, r3
   220ac:	2314      	movs	r3, #20
   220ae:	18fb      	adds	r3, r7, r3
   220b0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   220b2:	68bb      	ldr	r3, [r7, #8]
   220b4:	0e1b      	lsrs	r3, r3, #24
   220b6:	b2da      	uxtb	r2, r3
   220b8:	2314      	movs	r3, #20
   220ba:	18fb      	adds	r3, r7, r3
   220bc:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   220be:	68bb      	ldr	r3, [r7, #8]
   220c0:	0c1b      	lsrs	r3, r3, #16
   220c2:	b2da      	uxtb	r2, r3
   220c4:	2314      	movs	r3, #20
   220c6:	18fb      	adds	r3, r7, r3
   220c8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   220ca:	68bb      	ldr	r3, [r7, #8]
   220cc:	0a1b      	lsrs	r3, r3, #8
   220ce:	b2da      	uxtb	r2, r3
   220d0:	2314      	movs	r3, #20
   220d2:	18fb      	adds	r3, r7, r3
   220d4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   220d6:	68bb      	ldr	r3, [r7, #8]
   220d8:	b2da      	uxtb	r2, r3
   220da:	2314      	movs	r3, #20
   220dc:	18fb      	adds	r3, r7, r3
   220de:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   220e0:	2314      	movs	r3, #20
   220e2:	18fb      	adds	r3, r7, r3
   220e4:	2105      	movs	r1, #5
   220e6:	0018      	movs	r0, r3
   220e8:	4b5e      	ldr	r3, [pc, #376]	; (22264 <sd_mmc_spi_adtc_start+0x1f4>)
   220ea:	4798      	blx	r3
   220ec:	0003      	movs	r3, r0
   220ee:	001a      	movs	r2, r3
   220f0:	2314      	movs	r3, #20
   220f2:	18fb      	adds	r3, r7, r3
   220f4:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   220f6:	231b      	movs	r3, #27
   220f8:	18f9      	adds	r1, r7, r3
   220fa:	4b5b      	ldr	r3, [pc, #364]	; (22268 <sd_mmc_spi_adtc_start+0x1f8>)
   220fc:	2201      	movs	r2, #1
   220fe:	0018      	movs	r0, r3
   22100:	4b5a      	ldr	r3, [pc, #360]	; (2226c <sd_mmc_spi_adtc_start+0x1fc>)
   22102:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   22104:	2314      	movs	r3, #20
   22106:	18f9      	adds	r1, r7, r3
   22108:	4b57      	ldr	r3, [pc, #348]	; (22268 <sd_mmc_spi_adtc_start+0x1f8>)
   2210a:	2206      	movs	r2, #6
   2210c:	0018      	movs	r0, r3
   2210e:	4b57      	ldr	r3, [pc, #348]	; (2226c <sd_mmc_spi_adtc_start+0x1fc>)
   22110:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   22112:	2313      	movs	r3, #19
   22114:	18fb      	adds	r3, r7, r3
   22116:	22ff      	movs	r2, #255	; 0xff
   22118:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   2211a:	231c      	movs	r3, #28
   2211c:	18fb      	adds	r3, r7, r3
   2211e:	881b      	ldrh	r3, [r3, #0]
   22120:	2213      	movs	r2, #19
   22122:	18b9      	adds	r1, r7, r2
   22124:	4850      	ldr	r0, [pc, #320]	; (22268 <sd_mmc_spi_adtc_start+0x1f8>)
   22126:	2201      	movs	r2, #1
   22128:	4c51      	ldr	r4, [pc, #324]	; (22270 <sd_mmc_spi_adtc_start+0x200>)
   2212a:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   2212c:	231f      	movs	r3, #31
   2212e:	18fb      	adds	r3, r7, r3
   22130:	2207      	movs	r2, #7
   22132:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   22134:	231c      	movs	r3, #28
   22136:	18fb      	adds	r3, r7, r3
   22138:	881b      	ldrh	r3, [r3, #0]
   2213a:	2213      	movs	r2, #19
   2213c:	18b9      	adds	r1, r7, r2
   2213e:	484a      	ldr	r0, [pc, #296]	; (22268 <sd_mmc_spi_adtc_start+0x1f8>)
   22140:	2201      	movs	r2, #1
   22142:	4c4b      	ldr	r4, [pc, #300]	; (22270 <sd_mmc_spi_adtc_start+0x200>)
   22144:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   22146:	2313      	movs	r3, #19
   22148:	18fb      	adds	r3, r7, r3
   2214a:	781b      	ldrb	r3, [r3, #0]
   2214c:	b25b      	sxtb	r3, r3
   2214e:	2b00      	cmp	r3, #0
   22150:	da10      	bge.n	22174 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   22152:	231f      	movs	r3, #31
   22154:	18fb      	adds	r3, r7, r3
   22156:	221f      	movs	r2, #31
   22158:	18ba      	adds	r2, r7, r2
   2215a:	7812      	ldrb	r2, [r2, #0]
   2215c:	3a01      	subs	r2, #1
   2215e:	701a      	strb	r2, [r3, #0]
   22160:	231f      	movs	r3, #31
   22162:	18fb      	adds	r3, r7, r3
   22164:	781b      	ldrb	r3, [r3, #0]
   22166:	2b00      	cmp	r3, #0
   22168:	d1e4      	bne.n	22134 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   2216a:	4b3d      	ldr	r3, [pc, #244]	; (22260 <sd_mmc_spi_adtc_start+0x1f0>)
   2216c:	2202      	movs	r2, #2
   2216e:	701a      	strb	r2, [r3, #0]
			return false;
   22170:	2300      	movs	r3, #0
   22172:	e070      	b.n	22256 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   22174:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   22176:	2313      	movs	r3, #19
   22178:	18fb      	adds	r3, r7, r3
   2217a:	781b      	ldrb	r3, [r3, #0]
   2217c:	001a      	movs	r2, r3
   2217e:	4b3d      	ldr	r3, [pc, #244]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   22180:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   22182:	2313      	movs	r3, #19
   22184:	18fb      	adds	r3, r7, r3
   22186:	781b      	ldrb	r3, [r3, #0]
   22188:	001a      	movs	r2, r3
   2218a:	2308      	movs	r3, #8
   2218c:	4013      	ands	r3, r2
   2218e:	d004      	beq.n	2219a <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   22190:	4b33      	ldr	r3, [pc, #204]	; (22260 <sd_mmc_spi_adtc_start+0x1f0>)
   22192:	2206      	movs	r2, #6
   22194:	701a      	strb	r2, [r3, #0]
		return false;
   22196:	2300      	movs	r3, #0
   22198:	e05d      	b.n	22256 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   2219a:	2313      	movs	r3, #19
   2219c:	18fb      	adds	r3, r7, r3
   2219e:	781b      	ldrb	r3, [r3, #0]
   221a0:	001a      	movs	r2, r3
   221a2:	2304      	movs	r3, #4
   221a4:	4013      	ands	r3, r2
   221a6:	d004      	beq.n	221b2 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   221a8:	4b2d      	ldr	r3, [pc, #180]	; (22260 <sd_mmc_spi_adtc_start+0x1f0>)
   221aa:	2209      	movs	r2, #9
   221ac:	701a      	strb	r2, [r3, #0]
		return false;
   221ae:	2300      	movs	r3, #0
   221b0:	e051      	b.n	22256 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   221b2:	2313      	movs	r3, #19
   221b4:	18fb      	adds	r3, r7, r3
   221b6:	781b      	ldrb	r3, [r3, #0]
   221b8:	001a      	movs	r2, r3
   221ba:	2301      	movs	r3, #1
   221bc:	439a      	bics	r2, r3
   221be:	1e13      	subs	r3, r2, #0
   221c0:	d004      	beq.n	221cc <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   221c2:	4b27      	ldr	r3, [pc, #156]	; (22260 <sd_mmc_spi_adtc_start+0x1f0>)
   221c4:	2201      	movs	r2, #1
   221c6:	701a      	strb	r2, [r3, #0]
		return false;
   221c8:	2300      	movs	r3, #0
   221ca:	e044      	b.n	22256 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   221cc:	68fa      	ldr	r2, [r7, #12]
   221ce:	2380      	movs	r3, #128	; 0x80
   221d0:	019b      	lsls	r3, r3, #6
   221d2:	4013      	ands	r3, r2
   221d4:	d00d      	beq.n	221f2 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   221d6:	4b28      	ldr	r3, [pc, #160]	; (22278 <sd_mmc_spi_adtc_start+0x208>)
   221d8:	4798      	blx	r3
   221da:	0003      	movs	r3, r0
   221dc:	001a      	movs	r2, r3
   221de:	2301      	movs	r3, #1
   221e0:	4053      	eors	r3, r2
   221e2:	b2db      	uxtb	r3, r3
   221e4:	2b00      	cmp	r3, #0
   221e6:	d004      	beq.n	221f2 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   221e8:	4b1d      	ldr	r3, [pc, #116]	; (22260 <sd_mmc_spi_adtc_start+0x1f0>)
   221ea:	2203      	movs	r2, #3
   221ec:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   221ee:	2300      	movs	r3, #0
   221f0:	e031      	b.n	22256 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   221f2:	68fa      	ldr	r2, [r7, #12]
   221f4:	2380      	movs	r3, #128	; 0x80
   221f6:	009b      	lsls	r3, r3, #2
   221f8:	4013      	ands	r3, r2
   221fa:	d00e      	beq.n	2221a <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   221fc:	4b1d      	ldr	r3, [pc, #116]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   221fe:	2200      	movs	r2, #0
   22200:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   22202:	231c      	movs	r3, #28
   22204:	18fb      	adds	r3, r7, r3
   22206:	881b      	ldrh	r3, [r3, #0]
   22208:	491a      	ldr	r1, [pc, #104]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   2220a:	4817      	ldr	r0, [pc, #92]	; (22268 <sd_mmc_spi_adtc_start+0x1f8>)
   2220c:	2201      	movs	r2, #1
   2220e:	4c18      	ldr	r4, [pc, #96]	; (22270 <sd_mmc_spi_adtc_start+0x200>)
   22210:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   22212:	4b18      	ldr	r3, [pc, #96]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   22214:	681a      	ldr	r2, [r3, #0]
   22216:	4b17      	ldr	r3, [pc, #92]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   22218:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   2221a:	68fa      	ldr	r2, [r7, #12]
   2221c:	2380      	movs	r3, #128	; 0x80
   2221e:	00db      	lsls	r3, r3, #3
   22220:	4013      	ands	r3, r2
   22222:	d00c      	beq.n	2223e <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   22224:	231c      	movs	r3, #28
   22226:	18fb      	adds	r3, r7, r3
   22228:	881b      	ldrh	r3, [r3, #0]
   2222a:	4912      	ldr	r1, [pc, #72]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   2222c:	480e      	ldr	r0, [pc, #56]	; (22268 <sd_mmc_spi_adtc_start+0x1f8>)
   2222e:	2204      	movs	r2, #4
   22230:	4c0f      	ldr	r4, [pc, #60]	; (22270 <sd_mmc_spi_adtc_start+0x200>)
   22232:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   22234:	4b0f      	ldr	r3, [pc, #60]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   22236:	681b      	ldr	r3, [r3, #0]
   22238:	ba1a      	rev	r2, r3
   2223a:	4b0e      	ldr	r3, [pc, #56]	; (22274 <sd_mmc_spi_adtc_start+0x204>)
   2223c:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   2223e:	4b0f      	ldr	r3, [pc, #60]	; (2227c <sd_mmc_spi_adtc_start+0x20c>)
   22240:	1dba      	adds	r2, r7, #6
   22242:	8812      	ldrh	r2, [r2, #0]
   22244:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   22246:	4b0e      	ldr	r3, [pc, #56]	; (22280 <sd_mmc_spi_adtc_start+0x210>)
   22248:	1d3a      	adds	r2, r7, #4
   2224a:	8812      	ldrh	r2, [r2, #0]
   2224c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   2224e:	4b0d      	ldr	r3, [pc, #52]	; (22284 <sd_mmc_spi_adtc_start+0x214>)
   22250:	2200      	movs	r2, #0
   22252:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   22254:	2301      	movs	r3, #1
}
   22256:	0018      	movs	r0, r3
   22258:	46bd      	mov	sp, r7
   2225a:	b009      	add	sp, #36	; 0x24
   2225c:	bd90      	pop	{r4, r7, pc}
   2225e:	46c0      	nop			; (mov r8, r8)
   22260:	20004107 	.word	0x20004107
   22264:	00021b11 	.word	0x00021b11
   22268:	200040f4 	.word	0x200040f4
   2226c:	0002a875 	.word	0x0002a875
   22270:	0002a5d9 	.word	0x0002a5d9
   22274:	20004108 	.word	0x20004108
   22278:	00021bcd 	.word	0x00021bcd
   2227c:	20004110 	.word	0x20004110
   22280:	20004112 	.word	0x20004112
   22284:	2000410c 	.word	0x2000410c

00022288 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   22288:	b580      	push	{r7, lr}
   2228a:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   2228c:	4b02      	ldr	r3, [pc, #8]	; (22298 <sd_mmc_spi_get_response+0x10>)
   2228e:	681b      	ldr	r3, [r3, #0]
}
   22290:	0018      	movs	r0, r3
   22292:	46bd      	mov	sp, r7
   22294:	bd80      	pop	{r7, pc}
   22296:	46c0      	nop			; (mov r8, r8)
   22298:	20004108 	.word	0x20004108

0002229c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   2229c:	b590      	push	{r4, r7, lr}
   2229e:	b085      	sub	sp, #20
   222a0:	af00      	add	r7, sp, #0
   222a2:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   222a4:	230e      	movs	r3, #14
   222a6:	18fb      	adds	r3, r7, r3
   222a8:	22ff      	movs	r2, #255	; 0xff
   222aa:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   222ac:	4b1c      	ldr	r3, [pc, #112]	; (22320 <sd_mmc_spi_read_word+0x84>)
   222ae:	2200      	movs	r2, #0
   222b0:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   222b2:	4b1c      	ldr	r3, [pc, #112]	; (22324 <sd_mmc_spi_read_word+0x88>)
   222b4:	681a      	ldr	r2, [r3, #0]
   222b6:	4b1c      	ldr	r3, [pc, #112]	; (22328 <sd_mmc_spi_read_word+0x8c>)
   222b8:	881b      	ldrh	r3, [r3, #0]
   222ba:	0019      	movs	r1, r3
   222bc:	4b1b      	ldr	r3, [pc, #108]	; (2232c <sd_mmc_spi_read_word+0x90>)
   222be:	0010      	movs	r0, r2
   222c0:	4798      	blx	r3
   222c2:	1e0b      	subs	r3, r1, #0
   222c4:	d10a      	bne.n	222dc <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   222c6:	4b1a      	ldr	r3, [pc, #104]	; (22330 <sd_mmc_spi_read_word+0x94>)
   222c8:	4798      	blx	r3
   222ca:	0003      	movs	r3, r0
   222cc:	001a      	movs	r2, r3
   222ce:	2301      	movs	r3, #1
   222d0:	4053      	eors	r3, r2
   222d2:	b2db      	uxtb	r3, r3
   222d4:	2b00      	cmp	r3, #0
   222d6:	d001      	beq.n	222dc <sd_mmc_spi_read_word+0x40>
			return false;
   222d8:	2300      	movs	r3, #0
   222da:	e01d      	b.n	22318 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   222dc:	230e      	movs	r3, #14
   222de:	18fb      	adds	r3, r7, r3
   222e0:	881b      	ldrh	r3, [r3, #0]
   222e2:	1d39      	adds	r1, r7, #4
   222e4:	4813      	ldr	r0, [pc, #76]	; (22334 <sd_mmc_spi_read_word+0x98>)
   222e6:	2204      	movs	r2, #4
   222e8:	4c13      	ldr	r4, [pc, #76]	; (22338 <sd_mmc_spi_read_word+0x9c>)
   222ea:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   222ec:	687b      	ldr	r3, [r7, #4]
   222ee:	687a      	ldr	r2, [r7, #4]
   222f0:	6812      	ldr	r2, [r2, #0]
   222f2:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   222f4:	4b0b      	ldr	r3, [pc, #44]	; (22324 <sd_mmc_spi_read_word+0x88>)
   222f6:	681b      	ldr	r3, [r3, #0]
   222f8:	1d1a      	adds	r2, r3, #4
   222fa:	4b0a      	ldr	r3, [pc, #40]	; (22324 <sd_mmc_spi_read_word+0x88>)
   222fc:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   222fe:	4b09      	ldr	r3, [pc, #36]	; (22324 <sd_mmc_spi_read_word+0x88>)
   22300:	681a      	ldr	r2, [r3, #0]
   22302:	4b09      	ldr	r3, [pc, #36]	; (22328 <sd_mmc_spi_read_word+0x8c>)
   22304:	881b      	ldrh	r3, [r3, #0]
   22306:	0019      	movs	r1, r3
   22308:	4b08      	ldr	r3, [pc, #32]	; (2232c <sd_mmc_spi_read_word+0x90>)
   2230a:	0010      	movs	r0, r2
   2230c:	4798      	blx	r3
   2230e:	1e0b      	subs	r3, r1, #0
   22310:	d101      	bne.n	22316 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   22312:	4b0a      	ldr	r3, [pc, #40]	; (2233c <sd_mmc_spi_read_word+0xa0>)
   22314:	4798      	blx	r3
	}
	return true;
   22316:	2301      	movs	r3, #1
}
   22318:	0018      	movs	r0, r3
   2231a:	46bd      	mov	sp, r7
   2231c:	b005      	add	sp, #20
   2231e:	bd90      	pop	{r4, r7, pc}
   22320:	20004107 	.word	0x20004107
   22324:	2000410c 	.word	0x2000410c
   22328:	20004110 	.word	0x20004110
   2232c:	00034f41 	.word	0x00034f41
   22330:	00021c39 	.word	0x00021c39
   22334:	200040f4 	.word	0x200040f4
   22338:	0002a5d9 	.word	0x0002a5d9
   2233c:	00021cbd 	.word	0x00021cbd

00022340 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   22340:	b590      	push	{r4, r7, lr}
   22342:	b085      	sub	sp, #20
   22344:	af00      	add	r7, sp, #0
   22346:	6078      	str	r0, [r7, #4]
   22348:	000a      	movs	r2, r1
   2234a:	1cbb      	adds	r3, r7, #2
   2234c:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   2234e:	230a      	movs	r3, #10
   22350:	18fb      	adds	r3, r7, r3
   22352:	22ff      	movs	r2, #255	; 0xff
   22354:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22356:	4b1c      	ldr	r3, [pc, #112]	; (223c8 <sd_mmc_spi_start_read_blocks+0x88>)
   22358:	2200      	movs	r2, #0
   2235a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   2235c:	2300      	movs	r3, #0
   2235e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   22360:	e025      	b.n	223ae <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   22362:	4b1a      	ldr	r3, [pc, #104]	; (223cc <sd_mmc_spi_start_read_blocks+0x8c>)
   22364:	4798      	blx	r3
   22366:	0003      	movs	r3, r0
   22368:	001a      	movs	r2, r3
   2236a:	2301      	movs	r3, #1
   2236c:	4053      	eors	r3, r2
   2236e:	b2db      	uxtb	r3, r3
   22370:	2b00      	cmp	r3, #0
   22372:	d001      	beq.n	22378 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   22374:	2300      	movs	r3, #0
   22376:	e022      	b.n	223be <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   22378:	687a      	ldr	r2, [r7, #4]
   2237a:	68fb      	ldr	r3, [r7, #12]
   2237c:	18d1      	adds	r1, r2, r3
   2237e:	4b14      	ldr	r3, [pc, #80]	; (223d0 <sd_mmc_spi_start_read_blocks+0x90>)
   22380:	881a      	ldrh	r2, [r3, #0]
   22382:	230a      	movs	r3, #10
   22384:	18fb      	adds	r3, r7, r3
   22386:	881b      	ldrh	r3, [r3, #0]
   22388:	4812      	ldr	r0, [pc, #72]	; (223d4 <sd_mmc_spi_start_read_blocks+0x94>)
   2238a:	4c13      	ldr	r4, [pc, #76]	; (223d8 <sd_mmc_spi_start_read_blocks+0x98>)
   2238c:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   2238e:	4b10      	ldr	r3, [pc, #64]	; (223d0 <sd_mmc_spi_start_read_blocks+0x90>)
   22390:	881b      	ldrh	r3, [r3, #0]
   22392:	001a      	movs	r2, r3
   22394:	68fb      	ldr	r3, [r7, #12]
   22396:	189b      	adds	r3, r3, r2
   22398:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   2239a:	4b0d      	ldr	r3, [pc, #52]	; (223d0 <sd_mmc_spi_start_read_blocks+0x90>)
   2239c:	881b      	ldrh	r3, [r3, #0]
   2239e:	001a      	movs	r2, r3
   223a0:	4b0e      	ldr	r3, [pc, #56]	; (223dc <sd_mmc_spi_start_read_blocks+0x9c>)
   223a2:	681b      	ldr	r3, [r3, #0]
   223a4:	18d2      	adds	r2, r2, r3
   223a6:	4b0d      	ldr	r3, [pc, #52]	; (223dc <sd_mmc_spi_start_read_blocks+0x9c>)
   223a8:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   223aa:	4b0d      	ldr	r3, [pc, #52]	; (223e0 <sd_mmc_spi_start_read_blocks+0xa0>)
   223ac:	4798      	blx	r3
	while (nb_block--) {
   223ae:	1cbb      	adds	r3, r7, #2
   223b0:	881b      	ldrh	r3, [r3, #0]
   223b2:	1cba      	adds	r2, r7, #2
   223b4:	1e59      	subs	r1, r3, #1
   223b6:	8011      	strh	r1, [r2, #0]
   223b8:	2b00      	cmp	r3, #0
   223ba:	d1d2      	bne.n	22362 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   223bc:	2301      	movs	r3, #1
}
   223be:	0018      	movs	r0, r3
   223c0:	46bd      	mov	sp, r7
   223c2:	b005      	add	sp, #20
   223c4:	bd90      	pop	{r4, r7, pc}
   223c6:	46c0      	nop			; (mov r8, r8)
   223c8:	20004107 	.word	0x20004107
   223cc:	00021c39 	.word	0x00021c39
   223d0:	20004110 	.word	0x20004110
   223d4:	200040f4 	.word	0x200040f4
   223d8:	0002a5d9 	.word	0x0002a5d9
   223dc:	2000410c 	.word	0x2000410c
   223e0:	00021cbd 	.word	0x00021cbd

000223e4 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   223e4:	b580      	push	{r7, lr}
   223e6:	af00      	add	r7, sp, #0
	return true;
   223e8:	2301      	movs	r3, #1
}
   223ea:	0018      	movs	r0, r3
   223ec:	46bd      	mov	sp, r7
   223ee:	bd80      	pop	{r7, pc}

000223f0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   223f0:	b580      	push	{r7, lr}
   223f2:	b084      	sub	sp, #16
   223f4:	af00      	add	r7, sp, #0
   223f6:	6078      	str	r0, [r7, #4]
   223f8:	000a      	movs	r2, r1
   223fa:	1cbb      	adds	r3, r7, #2
   223fc:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   223fe:	4b24      	ldr	r3, [pc, #144]	; (22490 <sd_mmc_spi_start_write_blocks+0xa0>)
   22400:	2200      	movs	r2, #0
   22402:	701a      	strb	r2, [r3, #0]
	pos = 0;
   22404:	2300      	movs	r3, #0
   22406:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   22408:	e035      	b.n	22476 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   2240a:	4b22      	ldr	r3, [pc, #136]	; (22494 <sd_mmc_spi_start_write_blocks+0xa4>)
   2240c:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   2240e:	687a      	ldr	r2, [r7, #4]
   22410:	68fb      	ldr	r3, [r7, #12]
   22412:	18d1      	adds	r1, r2, r3
   22414:	4b20      	ldr	r3, [pc, #128]	; (22498 <sd_mmc_spi_start_write_blocks+0xa8>)
   22416:	881a      	ldrh	r2, [r3, #0]
   22418:	4b20      	ldr	r3, [pc, #128]	; (2249c <sd_mmc_spi_start_write_blocks+0xac>)
   2241a:	0018      	movs	r0, r3
   2241c:	4b20      	ldr	r3, [pc, #128]	; (224a0 <sd_mmc_spi_start_write_blocks+0xb0>)
   2241e:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   22420:	4b1d      	ldr	r3, [pc, #116]	; (22498 <sd_mmc_spi_start_write_blocks+0xa8>)
   22422:	881b      	ldrh	r3, [r3, #0]
   22424:	001a      	movs	r2, r3
   22426:	68fb      	ldr	r3, [r7, #12]
   22428:	189b      	adds	r3, r3, r2
   2242a:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   2242c:	4b1a      	ldr	r3, [pc, #104]	; (22498 <sd_mmc_spi_start_write_blocks+0xa8>)
   2242e:	881b      	ldrh	r3, [r3, #0]
   22430:	001a      	movs	r2, r3
   22432:	4b1c      	ldr	r3, [pc, #112]	; (224a4 <sd_mmc_spi_start_write_blocks+0xb4>)
   22434:	681b      	ldr	r3, [r3, #0]
   22436:	18d2      	adds	r2, r2, r3
   22438:	4b1a      	ldr	r3, [pc, #104]	; (224a4 <sd_mmc_spi_start_write_blocks+0xb4>)
   2243a:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   2243c:	4b1a      	ldr	r3, [pc, #104]	; (224a8 <sd_mmc_spi_start_write_blocks+0xb8>)
   2243e:	4798      	blx	r3
   22440:	0003      	movs	r3, r0
   22442:	001a      	movs	r2, r3
   22444:	2301      	movs	r3, #1
   22446:	4053      	eors	r3, r2
   22448:	b2db      	uxtb	r3, r3
   2244a:	2b00      	cmp	r3, #0
   2244c:	d001      	beq.n	22452 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   2244e:	2300      	movs	r3, #0
   22450:	e019      	b.n	22486 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   22452:	1cbb      	adds	r3, r7, #2
   22454:	881b      	ldrh	r3, [r3, #0]
   22456:	2b00      	cmp	r3, #0
   22458:	d00d      	beq.n	22476 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   2245a:	4b14      	ldr	r3, [pc, #80]	; (224ac <sd_mmc_spi_start_write_blocks+0xbc>)
   2245c:	4798      	blx	r3
   2245e:	0003      	movs	r3, r0
   22460:	001a      	movs	r2, r3
   22462:	2301      	movs	r3, #1
   22464:	4053      	eors	r3, r2
   22466:	b2db      	uxtb	r3, r3
   22468:	2b00      	cmp	r3, #0
   2246a:	d004      	beq.n	22476 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2246c:	4b08      	ldr	r3, [pc, #32]	; (22490 <sd_mmc_spi_start_write_blocks+0xa0>)
   2246e:	2205      	movs	r2, #5
   22470:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   22472:	2300      	movs	r3, #0
   22474:	e007      	b.n	22486 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   22476:	1cbb      	adds	r3, r7, #2
   22478:	881b      	ldrh	r3, [r3, #0]
   2247a:	1cba      	adds	r2, r7, #2
   2247c:	1e59      	subs	r1, r3, #1
   2247e:	8011      	strh	r1, [r2, #0]
   22480:	2b00      	cmp	r3, #0
   22482:	d1c2      	bne.n	2240a <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   22484:	2301      	movs	r3, #1
}
   22486:	0018      	movs	r0, r3
   22488:	46bd      	mov	sp, r7
   2248a:	b004      	add	sp, #16
   2248c:	bd80      	pop	{r7, pc}
   2248e:	46c0      	nop			; (mov r8, r8)
   22490:	20004107 	.word	0x20004107
   22494:	00021ce9 	.word	0x00021ce9
   22498:	20004110 	.word	0x20004110
   2249c:	200040f4 	.word	0x200040f4
   224a0:	0002a875 	.word	0x0002a875
   224a4:	2000410c 	.word	0x2000410c
   224a8:	00021d39 	.word	0x00021d39
   224ac:	00021bcd 	.word	0x00021bcd

000224b0 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   224b0:	b580      	push	{r7, lr}
   224b2:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   224b4:	4b09      	ldr	r3, [pc, #36]	; (224dc <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   224b6:	4798      	blx	r3
   224b8:	0003      	movs	r3, r0
   224ba:	001a      	movs	r2, r3
   224bc:	2301      	movs	r3, #1
   224be:	4053      	eors	r3, r2
   224c0:	b2db      	uxtb	r3, r3
   224c2:	2b00      	cmp	r3, #0
   224c4:	d004      	beq.n	224d0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   224c6:	4b06      	ldr	r3, [pc, #24]	; (224e0 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   224c8:	2205      	movs	r2, #5
   224ca:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   224cc:	2300      	movs	r3, #0
   224ce:	e002      	b.n	224d6 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   224d0:	4b04      	ldr	r3, [pc, #16]	; (224e4 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   224d2:	4798      	blx	r3
   224d4:	0003      	movs	r3, r0
}
   224d6:	0018      	movs	r0, r3
   224d8:	46bd      	mov	sp, r7
   224da:	bd80      	pop	{r7, pc}
   224dc:	00021bcd 	.word	0x00021bcd
   224e0:	20004107 	.word	0x20004107
   224e4:	00021dcd 	.word	0x00021dcd

000224e8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   224e8:	b580      	push	{r7, lr}
   224ea:	b082      	sub	sp, #8
   224ec:	af00      	add	r7, sp, #0
   224ee:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   224f0:	687b      	ldr	r3, [r7, #4]
   224f2:	2b00      	cmp	r3, #0
   224f4:	d00c      	beq.n	22510 <delay_cycles+0x28>
		SysTick->LOAD = n;
   224f6:	4b08      	ldr	r3, [pc, #32]	; (22518 <delay_cycles+0x30>)
   224f8:	687a      	ldr	r2, [r7, #4]
   224fa:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   224fc:	4b06      	ldr	r3, [pc, #24]	; (22518 <delay_cycles+0x30>)
   224fe:	2200      	movs	r2, #0
   22500:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   22502:	46c0      	nop			; (mov r8, r8)
   22504:	4b04      	ldr	r3, [pc, #16]	; (22518 <delay_cycles+0x30>)
   22506:	681a      	ldr	r2, [r3, #0]
   22508:	2380      	movs	r3, #128	; 0x80
   2250a:	025b      	lsls	r3, r3, #9
   2250c:	4013      	ands	r3, r2
   2250e:	d0f9      	beq.n	22504 <delay_cycles+0x1c>
		};
	}
}
   22510:	46c0      	nop			; (mov r8, r8)
   22512:	46bd      	mov	sp, r7
   22514:	b002      	add	sp, #8
   22516:	bd80      	pop	{r7, pc}
   22518:	e000e010 	.word	0xe000e010

0002251c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   2251c:	b580      	push	{r7, lr}
   2251e:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   22520:	2000      	movs	r0, #0
   22522:	4b0f      	ldr	r3, [pc, #60]	; (22560 <delay_init+0x44>)
   22524:	4798      	blx	r3
   22526:	0002      	movs	r2, r0
   22528:	4b0e      	ldr	r3, [pc, #56]	; (22564 <delay_init+0x48>)
   2252a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   2252c:	4b0d      	ldr	r3, [pc, #52]	; (22564 <delay_init+0x48>)
   2252e:	6818      	ldr	r0, [r3, #0]
   22530:	4b0d      	ldr	r3, [pc, #52]	; (22568 <delay_init+0x4c>)
   22532:	22fa      	movs	r2, #250	; 0xfa
   22534:	0091      	lsls	r1, r2, #2
   22536:	4798      	blx	r3
   22538:	0003      	movs	r3, r0
   2253a:	001a      	movs	r2, r3
   2253c:	4b09      	ldr	r3, [pc, #36]	; (22564 <delay_init+0x48>)
   2253e:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   22540:	4b08      	ldr	r3, [pc, #32]	; (22564 <delay_init+0x48>)
   22542:	6818      	ldr	r0, [r3, #0]
   22544:	4b08      	ldr	r3, [pc, #32]	; (22568 <delay_init+0x4c>)
   22546:	22fa      	movs	r2, #250	; 0xfa
   22548:	0091      	lsls	r1, r2, #2
   2254a:	4798      	blx	r3
   2254c:	0003      	movs	r3, r0
   2254e:	001a      	movs	r2, r3
   22550:	4b06      	ldr	r3, [pc, #24]	; (2256c <delay_init+0x50>)
   22552:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   22554:	4b06      	ldr	r3, [pc, #24]	; (22570 <delay_init+0x54>)
   22556:	2205      	movs	r2, #5
   22558:	601a      	str	r2, [r3, #0]
}
   2255a:	46c0      	nop			; (mov r8, r8)
   2255c:	46bd      	mov	sp, r7
   2255e:	bd80      	pop	{r7, pc}
   22560:	0002c1e9 	.word	0x0002c1e9
   22564:	20000124 	.word	0x20000124
   22568:	00034e35 	.word	0x00034e35
   2256c:	20000128 	.word	0x20000128
   22570:	e000e010 	.word	0xe000e010

00022574 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   22574:	b580      	push	{r7, lr}
   22576:	b082      	sub	sp, #8
   22578:	af00      	add	r7, sp, #0
   2257a:	6078      	str	r0, [r7, #4]
	while (n--) {
   2257c:	e004      	b.n	22588 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   2257e:	4b07      	ldr	r3, [pc, #28]	; (2259c <delay_cycles_ms+0x28>)
   22580:	681b      	ldr	r3, [r3, #0]
   22582:	0018      	movs	r0, r3
   22584:	4b06      	ldr	r3, [pc, #24]	; (225a0 <delay_cycles_ms+0x2c>)
   22586:	4798      	blx	r3
	while (n--) {
   22588:	687b      	ldr	r3, [r7, #4]
   2258a:	1e5a      	subs	r2, r3, #1
   2258c:	607a      	str	r2, [r7, #4]
   2258e:	2b00      	cmp	r3, #0
   22590:	d1f5      	bne.n	2257e <delay_cycles_ms+0xa>
	}
}
   22592:	46c0      	nop			; (mov r8, r8)
   22594:	46bd      	mov	sp, r7
   22596:	b002      	add	sp, #8
   22598:	bd80      	pop	{r7, pc}
   2259a:	46c0      	nop			; (mov r8, r8)
   2259c:	20000124 	.word	0x20000124
   225a0:	000224e9 	.word	0x000224e9

000225a4 <system_pinmux_get_group_from_gpio_pin>:
{
   225a4:	b580      	push	{r7, lr}
   225a6:	b084      	sub	sp, #16
   225a8:	af00      	add	r7, sp, #0
   225aa:	0002      	movs	r2, r0
   225ac:	1dfb      	adds	r3, r7, #7
   225ae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   225b0:	230f      	movs	r3, #15
   225b2:	18fb      	adds	r3, r7, r3
   225b4:	1dfa      	adds	r2, r7, #7
   225b6:	7812      	ldrb	r2, [r2, #0]
   225b8:	09d2      	lsrs	r2, r2, #7
   225ba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   225bc:	230e      	movs	r3, #14
   225be:	18fb      	adds	r3, r7, r3
   225c0:	1dfa      	adds	r2, r7, #7
   225c2:	7812      	ldrb	r2, [r2, #0]
   225c4:	0952      	lsrs	r2, r2, #5
   225c6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   225c8:	4b0d      	ldr	r3, [pc, #52]	; (22600 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   225ca:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   225cc:	230f      	movs	r3, #15
   225ce:	18fb      	adds	r3, r7, r3
   225d0:	781b      	ldrb	r3, [r3, #0]
   225d2:	2b00      	cmp	r3, #0
   225d4:	d10f      	bne.n	225f6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   225d6:	230f      	movs	r3, #15
   225d8:	18fb      	adds	r3, r7, r3
   225da:	781b      	ldrb	r3, [r3, #0]
   225dc:	009b      	lsls	r3, r3, #2
   225de:	2210      	movs	r2, #16
   225e0:	4694      	mov	ip, r2
   225e2:	44bc      	add	ip, r7
   225e4:	4463      	add	r3, ip
   225e6:	3b08      	subs	r3, #8
   225e8:	681a      	ldr	r2, [r3, #0]
   225ea:	230e      	movs	r3, #14
   225ec:	18fb      	adds	r3, r7, r3
   225ee:	781b      	ldrb	r3, [r3, #0]
   225f0:	01db      	lsls	r3, r3, #7
   225f2:	18d3      	adds	r3, r2, r3
   225f4:	e000      	b.n	225f8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   225f6:	2300      	movs	r3, #0
}
   225f8:	0018      	movs	r0, r3
   225fa:	46bd      	mov	sp, r7
   225fc:	b004      	add	sp, #16
   225fe:	bd80      	pop	{r7, pc}
   22600:	41004400 	.word	0x41004400

00022604 <system_interrupt_enable_global>:
{
   22604:	b580      	push	{r7, lr}
   22606:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   22608:	4b04      	ldr	r3, [pc, #16]	; (2261c <system_interrupt_enable_global+0x18>)
   2260a:	2201      	movs	r2, #1
   2260c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   2260e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   22612:	b662      	cpsie	i
}
   22614:	46c0      	nop			; (mov r8, r8)
   22616:	46bd      	mov	sp, r7
   22618:	bd80      	pop	{r7, pc}
   2261a:	46c0      	nop			; (mov r8, r8)
   2261c:	2000012e 	.word	0x2000012e

00022620 <port_get_group_from_gpio_pin>:
{
   22620:	b580      	push	{r7, lr}
   22622:	b082      	sub	sp, #8
   22624:	af00      	add	r7, sp, #0
   22626:	0002      	movs	r2, r0
   22628:	1dfb      	adds	r3, r7, #7
   2262a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2262c:	1dfb      	adds	r3, r7, #7
   2262e:	781b      	ldrb	r3, [r3, #0]
   22630:	0018      	movs	r0, r3
   22632:	4b03      	ldr	r3, [pc, #12]	; (22640 <port_get_group_from_gpio_pin+0x20>)
   22634:	4798      	blx	r3
   22636:	0003      	movs	r3, r0
}
   22638:	0018      	movs	r0, r3
   2263a:	46bd      	mov	sp, r7
   2263c:	b002      	add	sp, #8
   2263e:	bd80      	pop	{r7, pc}
   22640:	000225a5 	.word	0x000225a5

00022644 <port_get_config_defaults>:
{
   22644:	b580      	push	{r7, lr}
   22646:	b082      	sub	sp, #8
   22648:	af00      	add	r7, sp, #0
   2264a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2264c:	687b      	ldr	r3, [r7, #4]
   2264e:	2200      	movs	r2, #0
   22650:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22652:	687b      	ldr	r3, [r7, #4]
   22654:	2201      	movs	r2, #1
   22656:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   22658:	687b      	ldr	r3, [r7, #4]
   2265a:	2200      	movs	r2, #0
   2265c:	709a      	strb	r2, [r3, #2]
}
   2265e:	46c0      	nop			; (mov r8, r8)
   22660:	46bd      	mov	sp, r7
   22662:	b002      	add	sp, #8
   22664:	bd80      	pop	{r7, pc}
	...

00022668 <port_pin_set_output_level>:
{
   22668:	b580      	push	{r7, lr}
   2266a:	b084      	sub	sp, #16
   2266c:	af00      	add	r7, sp, #0
   2266e:	0002      	movs	r2, r0
   22670:	1dfb      	adds	r3, r7, #7
   22672:	701a      	strb	r2, [r3, #0]
   22674:	1dbb      	adds	r3, r7, #6
   22676:	1c0a      	adds	r2, r1, #0
   22678:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2267a:	1dfb      	adds	r3, r7, #7
   2267c:	781b      	ldrb	r3, [r3, #0]
   2267e:	0018      	movs	r0, r3
   22680:	4b0d      	ldr	r3, [pc, #52]	; (226b8 <port_pin_set_output_level+0x50>)
   22682:	4798      	blx	r3
   22684:	0003      	movs	r3, r0
   22686:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   22688:	1dfb      	adds	r3, r7, #7
   2268a:	781b      	ldrb	r3, [r3, #0]
   2268c:	221f      	movs	r2, #31
   2268e:	4013      	ands	r3, r2
   22690:	2201      	movs	r2, #1
   22692:	409a      	lsls	r2, r3
   22694:	0013      	movs	r3, r2
   22696:	60bb      	str	r3, [r7, #8]
	if (level) {
   22698:	1dbb      	adds	r3, r7, #6
   2269a:	781b      	ldrb	r3, [r3, #0]
   2269c:	2b00      	cmp	r3, #0
   2269e:	d003      	beq.n	226a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   226a0:	68fb      	ldr	r3, [r7, #12]
   226a2:	68ba      	ldr	r2, [r7, #8]
   226a4:	619a      	str	r2, [r3, #24]
}
   226a6:	e002      	b.n	226ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   226a8:	68fb      	ldr	r3, [r7, #12]
   226aa:	68ba      	ldr	r2, [r7, #8]
   226ac:	615a      	str	r2, [r3, #20]
}
   226ae:	46c0      	nop			; (mov r8, r8)
   226b0:	46bd      	mov	sp, r7
   226b2:	b004      	add	sp, #16
   226b4:	bd80      	pop	{r7, pc}
   226b6:	46c0      	nop			; (mov r8, r8)
   226b8:	00022621 	.word	0x00022621

000226bc <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   226bc:	b580      	push	{r7, lr}
   226be:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   226c0:	4b04      	ldr	r3, [pc, #16]	; (226d4 <chip_isr+0x18>)
   226c2:	681b      	ldr	r3, [r3, #0]
   226c4:	2b00      	cmp	r3, #0
   226c6:	d002      	beq.n	226ce <chip_isr+0x12>
		gpfIsr();
   226c8:	4b02      	ldr	r3, [pc, #8]	; (226d4 <chip_isr+0x18>)
   226ca:	681b      	ldr	r3, [r3, #0]
   226cc:	4798      	blx	r3
	}
}
   226ce:	46c0      	nop			; (mov r8, r8)
   226d0:	46bd      	mov	sp, r7
   226d2:	bd80      	pop	{r7, pc}
   226d4:	20004114 	.word	0x20004114

000226d8 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   226d8:	b580      	push	{r7, lr}
   226da:	b082      	sub	sp, #8
   226dc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   226de:	1d3b      	adds	r3, r7, #4
   226e0:	0018      	movs	r0, r3
   226e2:	4b10      	ldr	r3, [pc, #64]	; (22724 <init_chip_pins+0x4c>)
   226e4:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   226e6:	1d3b      	adds	r3, r7, #4
   226e8:	2201      	movs	r2, #1
   226ea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   226ec:	1d3b      	adds	r3, r7, #4
   226ee:	0019      	movs	r1, r3
   226f0:	201b      	movs	r0, #27
   226f2:	4b0d      	ldr	r3, [pc, #52]	; (22728 <init_chip_pins+0x50>)
   226f4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   226f6:	1d3b      	adds	r3, r7, #4
   226f8:	0019      	movs	r1, r3
   226fa:	201c      	movs	r0, #28
   226fc:	4b0a      	ldr	r3, [pc, #40]	; (22728 <init_chip_pins+0x50>)
   226fe:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   22700:	1d3b      	adds	r3, r7, #4
   22702:	0019      	movs	r1, r3
   22704:	2028      	movs	r0, #40	; 0x28
   22706:	4b08      	ldr	r3, [pc, #32]	; (22728 <init_chip_pins+0x50>)
   22708:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   2270a:	2100      	movs	r1, #0
   2270c:	201c      	movs	r0, #28
   2270e:	4b07      	ldr	r3, [pc, #28]	; (2272c <init_chip_pins+0x54>)
   22710:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   22712:	2100      	movs	r1, #0
   22714:	201b      	movs	r0, #27
   22716:	4b05      	ldr	r3, [pc, #20]	; (2272c <init_chip_pins+0x54>)
   22718:	4798      	blx	r3
}
   2271a:	46c0      	nop			; (mov r8, r8)
   2271c:	46bd      	mov	sp, r7
   2271e:	b002      	add	sp, #8
   22720:	bd80      	pop	{r7, pc}
   22722:	46c0      	nop			; (mov r8, r8)
   22724:	00022645 	.word	0x00022645
   22728:	00028dd5 	.word	0x00028dd5
   2272c:	00022669 	.word	0x00022669

00022730 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   22730:	b580      	push	{r7, lr}
   22732:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   22734:	4b0b      	ldr	r3, [pc, #44]	; (22764 <nm_bsp_init+0x34>)
   22736:	2200      	movs	r2, #0
   22738:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   2273a:	4b0b      	ldr	r3, [pc, #44]	; (22768 <nm_bsp_init+0x38>)
   2273c:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   2273e:	4b0b      	ldr	r3, [pc, #44]	; (2276c <nm_bsp_init+0x3c>)
   22740:	681b      	ldr	r3, [r3, #0]
   22742:	2201      	movs	r2, #1
   22744:	4013      	ands	r3, r2
   22746:	d004      	beq.n	22752 <nm_bsp_init+0x22>
   22748:	4b08      	ldr	r3, [pc, #32]	; (2276c <nm_bsp_init+0x3c>)
   2274a:	681b      	ldr	r3, [r3, #0]
   2274c:	2202      	movs	r2, #2
   2274e:	4013      	ands	r3, r2
   22750:	d101      	bne.n	22756 <nm_bsp_init+0x26>
	    delay_init();
   22752:	4b07      	ldr	r3, [pc, #28]	; (22770 <nm_bsp_init+0x40>)
   22754:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   22756:	4b07      	ldr	r3, [pc, #28]	; (22774 <nm_bsp_init+0x44>)
   22758:	4798      	blx	r3

	return M2M_SUCCESS;
   2275a:	2300      	movs	r3, #0
}
   2275c:	0018      	movs	r0, r3
   2275e:	46bd      	mov	sp, r7
   22760:	bd80      	pop	{r7, pc}
   22762:	46c0      	nop			; (mov r8, r8)
   22764:	20004114 	.word	0x20004114
   22768:	000226d9 	.word	0x000226d9
   2276c:	e000e010 	.word	0xe000e010
   22770:	0002251d 	.word	0x0002251d
   22774:	00022605 	.word	0x00022605

00022778 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   22778:	b580      	push	{r7, lr}
   2277a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   2277c:	2100      	movs	r1, #0
   2277e:	201c      	movs	r0, #28
   22780:	4b0b      	ldr	r3, [pc, #44]	; (227b0 <nm_bsp_reset+0x38>)
   22782:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   22784:	2100      	movs	r1, #0
   22786:	201b      	movs	r0, #27
   22788:	4b09      	ldr	r3, [pc, #36]	; (227b0 <nm_bsp_reset+0x38>)
   2278a:	4798      	blx	r3
	nm_bsp_sleep(1);
   2278c:	2001      	movs	r0, #1
   2278e:	4b09      	ldr	r3, [pc, #36]	; (227b4 <nm_bsp_reset+0x3c>)
   22790:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   22792:	2101      	movs	r1, #1
   22794:	201c      	movs	r0, #28
   22796:	4b06      	ldr	r3, [pc, #24]	; (227b0 <nm_bsp_reset+0x38>)
   22798:	4798      	blx	r3
	nm_bsp_sleep(10);
   2279a:	200a      	movs	r0, #10
   2279c:	4b05      	ldr	r3, [pc, #20]	; (227b4 <nm_bsp_reset+0x3c>)
   2279e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   227a0:	2101      	movs	r1, #1
   227a2:	201b      	movs	r0, #27
   227a4:	4b02      	ldr	r3, [pc, #8]	; (227b0 <nm_bsp_reset+0x38>)
   227a6:	4798      	blx	r3
}
   227a8:	46c0      	nop			; (mov r8, r8)
   227aa:	46bd      	mov	sp, r7
   227ac:	bd80      	pop	{r7, pc}
   227ae:	46c0      	nop			; (mov r8, r8)
   227b0:	00022669 	.word	0x00022669
   227b4:	000227b9 	.word	0x000227b9

000227b8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   227b8:	b580      	push	{r7, lr}
   227ba:	b082      	sub	sp, #8
   227bc:	af00      	add	r7, sp, #0
   227be:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   227c0:	687b      	ldr	r3, [r7, #4]
   227c2:	0018      	movs	r0, r3
   227c4:	4b02      	ldr	r3, [pc, #8]	; (227d0 <nm_bsp_sleep+0x18>)
   227c6:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   227c8:	46c0      	nop			; (mov r8, r8)
   227ca:	46bd      	mov	sp, r7
   227cc:	b002      	add	sp, #8
   227ce:	bd80      	pop	{r7, pc}
   227d0:	0001e5b1 	.word	0x0001e5b1

000227d4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   227d4:	b580      	push	{r7, lr}
   227d6:	b086      	sub	sp, #24
   227d8:	af00      	add	r7, sp, #0
   227da:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   227dc:	4b15      	ldr	r3, [pc, #84]	; (22834 <nm_bsp_register_isr+0x60>)
   227de:	687a      	ldr	r2, [r7, #4]
   227e0:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   227e2:	230c      	movs	r3, #12
   227e4:	18fb      	adds	r3, r7, r3
   227e6:	0018      	movs	r0, r3
   227e8:	4b13      	ldr	r3, [pc, #76]	; (22838 <nm_bsp_register_isr+0x64>)
   227ea:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   227ec:	230c      	movs	r3, #12
   227ee:	18fb      	adds	r3, r7, r3
   227f0:	2229      	movs	r2, #41	; 0x29
   227f2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   227f4:	230c      	movs	r3, #12
   227f6:	18fb      	adds	r3, r7, r3
   227f8:	2200      	movs	r2, #0
   227fa:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   227fc:	230c      	movs	r3, #12
   227fe:	18fb      	adds	r3, r7, r3
   22800:	2201      	movs	r2, #1
   22802:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   22804:	230c      	movs	r3, #12
   22806:	18fb      	adds	r3, r7, r3
   22808:	2202      	movs	r2, #2
   2280a:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   2280c:	230c      	movs	r3, #12
   2280e:	18fb      	adds	r3, r7, r3
   22810:	0019      	movs	r1, r3
   22812:	2009      	movs	r0, #9
   22814:	4b09      	ldr	r3, [pc, #36]	; (2283c <nm_bsp_register_isr+0x68>)
   22816:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   22818:	4b09      	ldr	r3, [pc, #36]	; (22840 <nm_bsp_register_isr+0x6c>)
   2281a:	2200      	movs	r2, #0
   2281c:	2109      	movs	r1, #9
   2281e:	0018      	movs	r0, r3
   22820:	4b08      	ldr	r3, [pc, #32]	; (22844 <nm_bsp_register_isr+0x70>)
   22822:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   22824:	2100      	movs	r1, #0
   22826:	2009      	movs	r0, #9
   22828:	4b07      	ldr	r3, [pc, #28]	; (22848 <nm_bsp_register_isr+0x74>)
   2282a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   2282c:	46c0      	nop			; (mov r8, r8)
   2282e:	46bd      	mov	sp, r7
   22830:	b006      	add	sp, #24
   22832:	bd80      	pop	{r7, pc}
   22834:	20004114 	.word	0x20004114
   22838:	00028c7d 	.word	0x00028c7d
   2283c:	00028cb1 	.word	0x00028cb1
   22840:	000226bd 	.word	0x000226bd
   22844:	0002887d 	.word	0x0002887d
   22848:	000288e1 	.word	0x000288e1

0002284c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   2284c:	b580      	push	{r7, lr}
   2284e:	b082      	sub	sp, #8
   22850:	af00      	add	r7, sp, #0
   22852:	0002      	movs	r2, r0
   22854:	1dfb      	adds	r3, r7, #7
   22856:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   22858:	1dfb      	adds	r3, r7, #7
   2285a:	781b      	ldrb	r3, [r3, #0]
   2285c:	2b00      	cmp	r3, #0
   2285e:	d004      	beq.n	2286a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   22860:	2100      	movs	r1, #0
   22862:	2009      	movs	r0, #9
   22864:	4b05      	ldr	r3, [pc, #20]	; (2287c <nm_bsp_interrupt_ctrl+0x30>)
   22866:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   22868:	e003      	b.n	22872 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2286a:	2100      	movs	r1, #0
   2286c:	2009      	movs	r0, #9
   2286e:	4b04      	ldr	r3, [pc, #16]	; (22880 <nm_bsp_interrupt_ctrl+0x34>)
   22870:	4798      	blx	r3
}
   22872:	46c0      	nop			; (mov r8, r8)
   22874:	46bd      	mov	sp, r7
   22876:	b002      	add	sp, #8
   22878:	bd80      	pop	{r7, pc}
   2287a:	46c0      	nop			; (mov r8, r8)
   2287c:	000288e1 	.word	0x000288e1
   22880:	00028929 	.word	0x00028929

00022884 <system_pinmux_get_group_from_gpio_pin>:
{
   22884:	b580      	push	{r7, lr}
   22886:	b084      	sub	sp, #16
   22888:	af00      	add	r7, sp, #0
   2288a:	0002      	movs	r2, r0
   2288c:	1dfb      	adds	r3, r7, #7
   2288e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22890:	230f      	movs	r3, #15
   22892:	18fb      	adds	r3, r7, r3
   22894:	1dfa      	adds	r2, r7, #7
   22896:	7812      	ldrb	r2, [r2, #0]
   22898:	09d2      	lsrs	r2, r2, #7
   2289a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2289c:	230e      	movs	r3, #14
   2289e:	18fb      	adds	r3, r7, r3
   228a0:	1dfa      	adds	r2, r7, #7
   228a2:	7812      	ldrb	r2, [r2, #0]
   228a4:	0952      	lsrs	r2, r2, #5
   228a6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   228a8:	4b0d      	ldr	r3, [pc, #52]	; (228e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   228aa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   228ac:	230f      	movs	r3, #15
   228ae:	18fb      	adds	r3, r7, r3
   228b0:	781b      	ldrb	r3, [r3, #0]
   228b2:	2b00      	cmp	r3, #0
   228b4:	d10f      	bne.n	228d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   228b6:	230f      	movs	r3, #15
   228b8:	18fb      	adds	r3, r7, r3
   228ba:	781b      	ldrb	r3, [r3, #0]
   228bc:	009b      	lsls	r3, r3, #2
   228be:	2210      	movs	r2, #16
   228c0:	4694      	mov	ip, r2
   228c2:	44bc      	add	ip, r7
   228c4:	4463      	add	r3, ip
   228c6:	3b08      	subs	r3, #8
   228c8:	681a      	ldr	r2, [r3, #0]
   228ca:	230e      	movs	r3, #14
   228cc:	18fb      	adds	r3, r7, r3
   228ce:	781b      	ldrb	r3, [r3, #0]
   228d0:	01db      	lsls	r3, r3, #7
   228d2:	18d3      	adds	r3, r2, r3
   228d4:	e000      	b.n	228d8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   228d6:	2300      	movs	r3, #0
}
   228d8:	0018      	movs	r0, r3
   228da:	46bd      	mov	sp, r7
   228dc:	b004      	add	sp, #16
   228de:	bd80      	pop	{r7, pc}
   228e0:	41004400 	.word	0x41004400

000228e4 <port_get_group_from_gpio_pin>:
{
   228e4:	b580      	push	{r7, lr}
   228e6:	b082      	sub	sp, #8
   228e8:	af00      	add	r7, sp, #0
   228ea:	0002      	movs	r2, r0
   228ec:	1dfb      	adds	r3, r7, #7
   228ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   228f0:	1dfb      	adds	r3, r7, #7
   228f2:	781b      	ldrb	r3, [r3, #0]
   228f4:	0018      	movs	r0, r3
   228f6:	4b03      	ldr	r3, [pc, #12]	; (22904 <port_get_group_from_gpio_pin+0x20>)
   228f8:	4798      	blx	r3
   228fa:	0003      	movs	r3, r0
}
   228fc:	0018      	movs	r0, r3
   228fe:	46bd      	mov	sp, r7
   22900:	b002      	add	sp, #8
   22902:	bd80      	pop	{r7, pc}
   22904:	00022885 	.word	0x00022885

00022908 <port_get_config_defaults>:
{
   22908:	b580      	push	{r7, lr}
   2290a:	b082      	sub	sp, #8
   2290c:	af00      	add	r7, sp, #0
   2290e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   22910:	687b      	ldr	r3, [r7, #4]
   22912:	2200      	movs	r2, #0
   22914:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22916:	687b      	ldr	r3, [r7, #4]
   22918:	2201      	movs	r2, #1
   2291a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2291c:	687b      	ldr	r3, [r7, #4]
   2291e:	2200      	movs	r2, #0
   22920:	709a      	strb	r2, [r3, #2]
}
   22922:	46c0      	nop			; (mov r8, r8)
   22924:	46bd      	mov	sp, r7
   22926:	b002      	add	sp, #8
   22928:	bd80      	pop	{r7, pc}
	...

0002292c <port_pin_set_output_level>:
{
   2292c:	b580      	push	{r7, lr}
   2292e:	b084      	sub	sp, #16
   22930:	af00      	add	r7, sp, #0
   22932:	0002      	movs	r2, r0
   22934:	1dfb      	adds	r3, r7, #7
   22936:	701a      	strb	r2, [r3, #0]
   22938:	1dbb      	adds	r3, r7, #6
   2293a:	1c0a      	adds	r2, r1, #0
   2293c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2293e:	1dfb      	adds	r3, r7, #7
   22940:	781b      	ldrb	r3, [r3, #0]
   22942:	0018      	movs	r0, r3
   22944:	4b0d      	ldr	r3, [pc, #52]	; (2297c <port_pin_set_output_level+0x50>)
   22946:	4798      	blx	r3
   22948:	0003      	movs	r3, r0
   2294a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2294c:	1dfb      	adds	r3, r7, #7
   2294e:	781b      	ldrb	r3, [r3, #0]
   22950:	221f      	movs	r2, #31
   22952:	4013      	ands	r3, r2
   22954:	2201      	movs	r2, #1
   22956:	409a      	lsls	r2, r3
   22958:	0013      	movs	r3, r2
   2295a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2295c:	1dbb      	adds	r3, r7, #6
   2295e:	781b      	ldrb	r3, [r3, #0]
   22960:	2b00      	cmp	r3, #0
   22962:	d003      	beq.n	2296c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22964:	68fb      	ldr	r3, [r7, #12]
   22966:	68ba      	ldr	r2, [r7, #8]
   22968:	619a      	str	r2, [r3, #24]
}
   2296a:	e002      	b.n	22972 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2296c:	68fb      	ldr	r3, [r7, #12]
   2296e:	68ba      	ldr	r2, [r7, #8]
   22970:	615a      	str	r2, [r3, #20]
}
   22972:	46c0      	nop			; (mov r8, r8)
   22974:	46bd      	mov	sp, r7
   22976:	b004      	add	sp, #16
   22978:	bd80      	pop	{r7, pc}
   2297a:	46c0      	nop			; (mov r8, r8)
   2297c:	000228e5 	.word	0x000228e5

00022980 <spi_is_syncing>:
{
   22980:	b580      	push	{r7, lr}
   22982:	b084      	sub	sp, #16
   22984:	af00      	add	r7, sp, #0
   22986:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22988:	687b      	ldr	r3, [r7, #4]
   2298a:	681b      	ldr	r3, [r3, #0]
   2298c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2298e:	68fb      	ldr	r3, [r7, #12]
   22990:	69db      	ldr	r3, [r3, #28]
   22992:	1e5a      	subs	r2, r3, #1
   22994:	4193      	sbcs	r3, r2
   22996:	b2db      	uxtb	r3, r3
}
   22998:	0018      	movs	r0, r3
   2299a:	46bd      	mov	sp, r7
   2299c:	b004      	add	sp, #16
   2299e:	bd80      	pop	{r7, pc}

000229a0 <spi_get_config_defaults>:
{
   229a0:	b580      	push	{r7, lr}
   229a2:	b082      	sub	sp, #8
   229a4:	af00      	add	r7, sp, #0
   229a6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   229a8:	687b      	ldr	r3, [r7, #4]
   229aa:	2201      	movs	r2, #1
   229ac:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   229ae:	687b      	ldr	r3, [r7, #4]
   229b0:	2200      	movs	r2, #0
   229b2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   229b4:	687b      	ldr	r3, [r7, #4]
   229b6:	2200      	movs	r2, #0
   229b8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   229ba:	687b      	ldr	r3, [r7, #4]
   229bc:	22c0      	movs	r2, #192	; 0xc0
   229be:	0392      	lsls	r2, r2, #14
   229c0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   229c2:	687b      	ldr	r3, [r7, #4]
   229c4:	2200      	movs	r2, #0
   229c6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   229c8:	687b      	ldr	r3, [r7, #4]
   229ca:	2200      	movs	r2, #0
   229cc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   229ce:	687b      	ldr	r3, [r7, #4]
   229d0:	2201      	movs	r2, #1
   229d2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   229d4:	687b      	ldr	r3, [r7, #4]
   229d6:	2201      	movs	r2, #1
   229d8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   229da:	687b      	ldr	r3, [r7, #4]
   229dc:	2200      	movs	r2, #0
   229de:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   229e0:	687b      	ldr	r3, [r7, #4]
   229e2:	2224      	movs	r2, #36	; 0x24
   229e4:	2100      	movs	r1, #0
   229e6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   229e8:	687b      	ldr	r3, [r7, #4]
   229ea:	3318      	adds	r3, #24
   229ec:	220c      	movs	r2, #12
   229ee:	2100      	movs	r1, #0
   229f0:	0018      	movs	r0, r3
   229f2:	4b0a      	ldr	r3, [pc, #40]	; (22a1c <spi_get_config_defaults+0x7c>)
   229f4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   229f6:	687b      	ldr	r3, [r7, #4]
   229f8:	4a09      	ldr	r2, [pc, #36]	; (22a20 <spi_get_config_defaults+0x80>)
   229fa:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   229fc:	687b      	ldr	r3, [r7, #4]
   229fe:	2200      	movs	r2, #0
   22a00:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   22a02:	687b      	ldr	r3, [r7, #4]
   22a04:	2200      	movs	r2, #0
   22a06:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   22a08:	687b      	ldr	r3, [r7, #4]
   22a0a:	2200      	movs	r2, #0
   22a0c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   22a0e:	687b      	ldr	r3, [r7, #4]
   22a10:	2200      	movs	r2, #0
   22a12:	635a      	str	r2, [r3, #52]	; 0x34
};
   22a14:	46c0      	nop			; (mov r8, r8)
   22a16:	46bd      	mov	sp, r7
   22a18:	b002      	add	sp, #8
   22a1a:	bd80      	pop	{r7, pc}
   22a1c:	0003796b 	.word	0x0003796b
   22a20:	000186a0 	.word	0x000186a0

00022a24 <spi_slave_inst_get_config_defaults>:
{
   22a24:	b580      	push	{r7, lr}
   22a26:	b082      	sub	sp, #8
   22a28:	af00      	add	r7, sp, #0
   22a2a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   22a2c:	687b      	ldr	r3, [r7, #4]
   22a2e:	220a      	movs	r2, #10
   22a30:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   22a32:	687b      	ldr	r3, [r7, #4]
   22a34:	2200      	movs	r2, #0
   22a36:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   22a38:	687b      	ldr	r3, [r7, #4]
   22a3a:	2200      	movs	r2, #0
   22a3c:	709a      	strb	r2, [r3, #2]
}
   22a3e:	46c0      	nop			; (mov r8, r8)
   22a40:	46bd      	mov	sp, r7
   22a42:	b002      	add	sp, #8
   22a44:	bd80      	pop	{r7, pc}
	...

00022a48 <spi_attach_slave>:
{
   22a48:	b580      	push	{r7, lr}
   22a4a:	b084      	sub	sp, #16
   22a4c:	af00      	add	r7, sp, #0
   22a4e:	6078      	str	r0, [r7, #4]
   22a50:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   22a52:	683b      	ldr	r3, [r7, #0]
   22a54:	781a      	ldrb	r2, [r3, #0]
   22a56:	687b      	ldr	r3, [r7, #4]
   22a58:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   22a5a:	683b      	ldr	r3, [r7, #0]
   22a5c:	785a      	ldrb	r2, [r3, #1]
   22a5e:	687b      	ldr	r3, [r7, #4]
   22a60:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   22a62:	683b      	ldr	r3, [r7, #0]
   22a64:	789a      	ldrb	r2, [r3, #2]
   22a66:	687b      	ldr	r3, [r7, #4]
   22a68:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   22a6a:	230c      	movs	r3, #12
   22a6c:	18fb      	adds	r3, r7, r3
   22a6e:	0018      	movs	r0, r3
   22a70:	4b0b      	ldr	r3, [pc, #44]	; (22aa0 <spi_attach_slave+0x58>)
   22a72:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   22a74:	230c      	movs	r3, #12
   22a76:	18fb      	adds	r3, r7, r3
   22a78:	2201      	movs	r2, #1
   22a7a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   22a7c:	687b      	ldr	r3, [r7, #4]
   22a7e:	781b      	ldrb	r3, [r3, #0]
   22a80:	220c      	movs	r2, #12
   22a82:	18ba      	adds	r2, r7, r2
   22a84:	0011      	movs	r1, r2
   22a86:	0018      	movs	r0, r3
   22a88:	4b06      	ldr	r3, [pc, #24]	; (22aa4 <spi_attach_slave+0x5c>)
   22a8a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   22a8c:	687b      	ldr	r3, [r7, #4]
   22a8e:	781b      	ldrb	r3, [r3, #0]
   22a90:	2101      	movs	r1, #1
   22a92:	0018      	movs	r0, r3
   22a94:	4b04      	ldr	r3, [pc, #16]	; (22aa8 <spi_attach_slave+0x60>)
   22a96:	4798      	blx	r3
}
   22a98:	46c0      	nop			; (mov r8, r8)
   22a9a:	46bd      	mov	sp, r7
   22a9c:	b004      	add	sp, #16
   22a9e:	bd80      	pop	{r7, pc}
   22aa0:	00022909 	.word	0x00022909
   22aa4:	00028dd5 	.word	0x00028dd5
   22aa8:	0002292d 	.word	0x0002292d

00022aac <spi_enable>:
{
   22aac:	b580      	push	{r7, lr}
   22aae:	b084      	sub	sp, #16
   22ab0:	af00      	add	r7, sp, #0
   22ab2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22ab4:	687b      	ldr	r3, [r7, #4]
   22ab6:	681b      	ldr	r3, [r3, #0]
   22ab8:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
   22aba:	46c0      	nop			; (mov r8, r8)
   22abc:	687b      	ldr	r3, [r7, #4]
   22abe:	0018      	movs	r0, r3
   22ac0:	4b06      	ldr	r3, [pc, #24]	; (22adc <spi_enable+0x30>)
   22ac2:	4798      	blx	r3
   22ac4:	1e03      	subs	r3, r0, #0
   22ac6:	d1f9      	bne.n	22abc <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   22ac8:	68fb      	ldr	r3, [r7, #12]
   22aca:	681b      	ldr	r3, [r3, #0]
   22acc:	2202      	movs	r2, #2
   22ace:	431a      	orrs	r2, r3
   22ad0:	68fb      	ldr	r3, [r7, #12]
   22ad2:	601a      	str	r2, [r3, #0]
}
   22ad4:	46c0      	nop			; (mov r8, r8)
   22ad6:	46bd      	mov	sp, r7
   22ad8:	b004      	add	sp, #16
   22ada:	bd80      	pop	{r7, pc}
   22adc:	00022981 	.word	0x00022981

00022ae0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   22ae0:	b580      	push	{r7, lr}
   22ae2:	b084      	sub	sp, #16
   22ae4:	af00      	add	r7, sp, #0
   22ae6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22ae8:	687b      	ldr	r3, [r7, #4]
   22aea:	681b      	ldr	r3, [r3, #0]
   22aec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   22aee:	46c0      	nop			; (mov r8, r8)
   22af0:	687b      	ldr	r3, [r7, #4]
   22af2:	0018      	movs	r0, r3
   22af4:	4b0a      	ldr	r3, [pc, #40]	; (22b20 <spi_disable+0x40>)
   22af6:	4798      	blx	r3
   22af8:	1e03      	subs	r3, r0, #0
   22afa:	d1f9      	bne.n	22af0 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   22afc:	68fb      	ldr	r3, [r7, #12]
   22afe:	228f      	movs	r2, #143	; 0x8f
   22b00:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   22b02:	68fb      	ldr	r3, [r7, #12]
   22b04:	228f      	movs	r2, #143	; 0x8f
   22b06:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   22b08:	68fb      	ldr	r3, [r7, #12]
   22b0a:	681b      	ldr	r3, [r3, #0]
   22b0c:	2202      	movs	r2, #2
   22b0e:	4393      	bics	r3, r2
   22b10:	001a      	movs	r2, r3
   22b12:	68fb      	ldr	r3, [r7, #12]
   22b14:	601a      	str	r2, [r3, #0]
}
   22b16:	46c0      	nop			; (mov r8, r8)
   22b18:	46bd      	mov	sp, r7
   22b1a:	b004      	add	sp, #16
   22b1c:	bd80      	pop	{r7, pc}
   22b1e:	46c0      	nop			; (mov r8, r8)
   22b20:	00022981 	.word	0x00022981

00022b24 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   22b24:	b580      	push	{r7, lr}
   22b26:	b084      	sub	sp, #16
   22b28:	af00      	add	r7, sp, #0
   22b2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22b2c:	687b      	ldr	r3, [r7, #4]
   22b2e:	681b      	ldr	r3, [r3, #0]
   22b30:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   22b32:	68fb      	ldr	r3, [r7, #12]
   22b34:	7e1b      	ldrb	r3, [r3, #24]
   22b36:	b2db      	uxtb	r3, r3
   22b38:	001a      	movs	r2, r3
   22b3a:	2302      	movs	r3, #2
   22b3c:	4013      	ands	r3, r2
   22b3e:	1e5a      	subs	r2, r3, #1
   22b40:	4193      	sbcs	r3, r2
   22b42:	b2db      	uxtb	r3, r3
}
   22b44:	0018      	movs	r0, r3
   22b46:	46bd      	mov	sp, r7
   22b48:	b004      	add	sp, #16
   22b4a:	bd80      	pop	{r7, pc}

00022b4c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   22b4c:	b580      	push	{r7, lr}
   22b4e:	b084      	sub	sp, #16
   22b50:	af00      	add	r7, sp, #0
   22b52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22b54:	687b      	ldr	r3, [r7, #4]
   22b56:	681b      	ldr	r3, [r3, #0]
   22b58:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   22b5a:	68fb      	ldr	r3, [r7, #12]
   22b5c:	7e1b      	ldrb	r3, [r3, #24]
   22b5e:	b2db      	uxtb	r3, r3
   22b60:	001a      	movs	r2, r3
   22b62:	2301      	movs	r3, #1
   22b64:	4013      	ands	r3, r2
   22b66:	1e5a      	subs	r2, r3, #1
   22b68:	4193      	sbcs	r3, r2
   22b6a:	b2db      	uxtb	r3, r3
}
   22b6c:	0018      	movs	r0, r3
   22b6e:	46bd      	mov	sp, r7
   22b70:	b004      	add	sp, #16
   22b72:	bd80      	pop	{r7, pc}

00022b74 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   22b74:	b580      	push	{r7, lr}
   22b76:	b084      	sub	sp, #16
   22b78:	af00      	add	r7, sp, #0
   22b7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22b7c:	687b      	ldr	r3, [r7, #4]
   22b7e:	681b      	ldr	r3, [r3, #0]
   22b80:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   22b82:	68fb      	ldr	r3, [r7, #12]
   22b84:	7e1b      	ldrb	r3, [r3, #24]
   22b86:	b2db      	uxtb	r3, r3
   22b88:	001a      	movs	r2, r3
   22b8a:	2304      	movs	r3, #4
   22b8c:	4013      	ands	r3, r2
   22b8e:	1e5a      	subs	r2, r3, #1
   22b90:	4193      	sbcs	r3, r2
   22b92:	b2db      	uxtb	r3, r3
}
   22b94:	0018      	movs	r0, r3
   22b96:	46bd      	mov	sp, r7
   22b98:	b004      	add	sp, #16
   22b9a:	bd80      	pop	{r7, pc}

00022b9c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   22b9c:	b580      	push	{r7, lr}
   22b9e:	b084      	sub	sp, #16
   22ba0:	af00      	add	r7, sp, #0
   22ba2:	6078      	str	r0, [r7, #4]
   22ba4:	000a      	movs	r2, r1
   22ba6:	1cbb      	adds	r3, r7, #2
   22ba8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22baa:	687b      	ldr	r3, [r7, #4]
   22bac:	681b      	ldr	r3, [r3, #0]
   22bae:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   22bb0:	687b      	ldr	r3, [r7, #4]
   22bb2:	0018      	movs	r0, r3
   22bb4:	4b0a      	ldr	r3, [pc, #40]	; (22be0 <spi_write+0x44>)
   22bb6:	4798      	blx	r3
   22bb8:	0003      	movs	r3, r0
   22bba:	001a      	movs	r2, r3
   22bbc:	2301      	movs	r3, #1
   22bbe:	4053      	eors	r3, r2
   22bc0:	b2db      	uxtb	r3, r3
   22bc2:	2b00      	cmp	r3, #0
   22bc4:	d001      	beq.n	22bca <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   22bc6:	2305      	movs	r3, #5
   22bc8:	e006      	b.n	22bd8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   22bca:	1cbb      	adds	r3, r7, #2
   22bcc:	881b      	ldrh	r3, [r3, #0]
   22bce:	05db      	lsls	r3, r3, #23
   22bd0:	0dda      	lsrs	r2, r3, #23
   22bd2:	68fb      	ldr	r3, [r7, #12]
   22bd4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   22bd6:	2300      	movs	r3, #0
}
   22bd8:	0018      	movs	r0, r3
   22bda:	46bd      	mov	sp, r7
   22bdc:	b004      	add	sp, #16
   22bde:	bd80      	pop	{r7, pc}
   22be0:	00022b4d 	.word	0x00022b4d

00022be4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   22be4:	b580      	push	{r7, lr}
   22be6:	b084      	sub	sp, #16
   22be8:	af00      	add	r7, sp, #0
   22bea:	6078      	str	r0, [r7, #4]
   22bec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22bee:	687b      	ldr	r3, [r7, #4]
   22bf0:	681b      	ldr	r3, [r3, #0]
   22bf2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   22bf4:	687b      	ldr	r3, [r7, #4]
   22bf6:	0018      	movs	r0, r3
   22bf8:	4b1b      	ldr	r3, [pc, #108]	; (22c68 <spi_read+0x84>)
   22bfa:	4798      	blx	r3
   22bfc:	0003      	movs	r3, r0
   22bfe:	001a      	movs	r2, r3
   22c00:	2301      	movs	r3, #1
   22c02:	4053      	eors	r3, r2
   22c04:	b2db      	uxtb	r3, r3
   22c06:	2b00      	cmp	r3, #0
   22c08:	d001      	beq.n	22c0e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   22c0a:	2310      	movs	r3, #16
   22c0c:	e027      	b.n	22c5e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   22c0e:	230f      	movs	r3, #15
   22c10:	18fb      	adds	r3, r7, r3
   22c12:	2200      	movs	r2, #0
   22c14:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   22c16:	68bb      	ldr	r3, [r7, #8]
   22c18:	8b5b      	ldrh	r3, [r3, #26]
   22c1a:	b29b      	uxth	r3, r3
   22c1c:	001a      	movs	r2, r3
   22c1e:	2304      	movs	r3, #4
   22c20:	4013      	ands	r3, r2
   22c22:	d006      	beq.n	22c32 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   22c24:	230f      	movs	r3, #15
   22c26:	18fb      	adds	r3, r7, r3
   22c28:	221e      	movs	r2, #30
   22c2a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   22c2c:	68bb      	ldr	r3, [r7, #8]
   22c2e:	2204      	movs	r2, #4
   22c30:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   22c32:	687b      	ldr	r3, [r7, #4]
   22c34:	799b      	ldrb	r3, [r3, #6]
   22c36:	2b01      	cmp	r3, #1
   22c38:	d108      	bne.n	22c4c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   22c3a:	68bb      	ldr	r3, [r7, #8]
   22c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22c3e:	b29b      	uxth	r3, r3
   22c40:	05db      	lsls	r3, r3, #23
   22c42:	0ddb      	lsrs	r3, r3, #23
   22c44:	b29a      	uxth	r2, r3
   22c46:	683b      	ldr	r3, [r7, #0]
   22c48:	801a      	strh	r2, [r3, #0]
   22c4a:	e005      	b.n	22c58 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   22c4c:	68bb      	ldr	r3, [r7, #8]
   22c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22c50:	b2db      	uxtb	r3, r3
   22c52:	b29a      	uxth	r2, r3
   22c54:	683b      	ldr	r3, [r7, #0]
   22c56:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   22c58:	230f      	movs	r3, #15
   22c5a:	18fb      	adds	r3, r7, r3
   22c5c:	781b      	ldrb	r3, [r3, #0]
}
   22c5e:	0018      	movs	r0, r3
   22c60:	46bd      	mov	sp, r7
   22c62:	b004      	add	sp, #16
   22c64:	bd80      	pop	{r7, pc}
   22c66:	46c0      	nop			; (mov r8, r8)
   22c68:	00022b75 	.word	0x00022b75

00022c6c <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   22c6c:	b580      	push	{r7, lr}
   22c6e:	b086      	sub	sp, #24
   22c70:	af00      	add	r7, sp, #0
   22c72:	60f8      	str	r0, [r7, #12]
   22c74:	60b9      	str	r1, [r7, #8]
   22c76:	1dbb      	adds	r3, r7, #6
   22c78:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   22c7a:	2313      	movs	r3, #19
   22c7c:	18fb      	adds	r3, r7, r3
   22c7e:	22ff      	movs	r2, #255	; 0xff
   22c80:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   22c82:	2317      	movs	r3, #23
   22c84:	18fb      	adds	r3, r7, r3
   22c86:	2200      	movs	r2, #0
   22c88:	701a      	strb	r2, [r3, #0]
   22c8a:	2316      	movs	r3, #22
   22c8c:	18fb      	adds	r3, r7, r3
   22c8e:	2200      	movs	r2, #0
   22c90:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   22c92:	2314      	movs	r3, #20
   22c94:	18fb      	adds	r3, r7, r3
   22c96:	2200      	movs	r2, #0
   22c98:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   22c9a:	2310      	movs	r3, #16
   22c9c:	18fb      	adds	r3, r7, r3
   22c9e:	2200      	movs	r2, #0
   22ca0:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   22ca2:	68bb      	ldr	r3, [r7, #8]
   22ca4:	2b00      	cmp	r3, #0
   22ca6:	d102      	bne.n	22cae <spi_rw+0x42>
   22ca8:	68fb      	ldr	r3, [r7, #12]
   22caa:	2b00      	cmp	r3, #0
   22cac:	d003      	beq.n	22cb6 <spi_rw+0x4a>
   22cae:	1dbb      	adds	r3, r7, #6
   22cb0:	881b      	ldrh	r3, [r3, #0]
   22cb2:	2b00      	cmp	r3, #0
   22cb4:	d102      	bne.n	22cbc <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   22cb6:	230f      	movs	r3, #15
   22cb8:	425b      	negs	r3, r3
   22cba:	e07e      	b.n	22dba <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   22cbc:	68fb      	ldr	r3, [r7, #12]
   22cbe:	2b00      	cmp	r3, #0
   22cc0:	d106      	bne.n	22cd0 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   22cc2:	2313      	movs	r3, #19
   22cc4:	18fb      	adds	r3, r7, r3
   22cc6:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   22cc8:	2317      	movs	r3, #23
   22cca:	18fb      	adds	r3, r7, r3
   22ccc:	2201      	movs	r2, #1
   22cce:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   22cd0:	68bb      	ldr	r3, [r7, #8]
   22cd2:	2b00      	cmp	r3, #0
   22cd4:	d106      	bne.n	22ce4 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   22cd6:	2313      	movs	r3, #19
   22cd8:	18fb      	adds	r3, r7, r3
   22cda:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   22cdc:	2316      	movs	r3, #22
   22cde:	18fb      	adds	r3, r7, r3
   22ce0:	2201      	movs	r2, #1
   22ce2:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   22ce4:	4937      	ldr	r1, [pc, #220]	; (22dc4 <spi_rw+0x158>)
   22ce6:	4b38      	ldr	r3, [pc, #224]	; (22dc8 <spi_rw+0x15c>)
   22ce8:	2201      	movs	r2, #1
   22cea:	0018      	movs	r0, r3
   22cec:	4b37      	ldr	r3, [pc, #220]	; (22dcc <spi_rw+0x160>)
   22cee:	4798      	blx	r3

	while (u16Sz) {
   22cf0:	e04c      	b.n	22d8c <spi_rw+0x120>
		txd_data = *pu8Mosi;
   22cf2:	68fb      	ldr	r3, [r7, #12]
   22cf4:	781a      	ldrb	r2, [r3, #0]
   22cf6:	2314      	movs	r3, #20
   22cf8:	18fb      	adds	r3, r7, r3
   22cfa:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   22cfc:	46c0      	nop			; (mov r8, r8)
   22cfe:	4b32      	ldr	r3, [pc, #200]	; (22dc8 <spi_rw+0x15c>)
   22d00:	0018      	movs	r0, r3
   22d02:	4b33      	ldr	r3, [pc, #204]	; (22dd0 <spi_rw+0x164>)
   22d04:	4798      	blx	r3
   22d06:	0003      	movs	r3, r0
   22d08:	001a      	movs	r2, r3
   22d0a:	2301      	movs	r3, #1
   22d0c:	4053      	eors	r3, r2
   22d0e:	b2db      	uxtb	r3, r3
   22d10:	2b00      	cmp	r3, #0
   22d12:	d1f4      	bne.n	22cfe <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   22d14:	46c0      	nop			; (mov r8, r8)
   22d16:	2314      	movs	r3, #20
   22d18:	18fb      	adds	r3, r7, r3
   22d1a:	881a      	ldrh	r2, [r3, #0]
   22d1c:	4b2a      	ldr	r3, [pc, #168]	; (22dc8 <spi_rw+0x15c>)
   22d1e:	0011      	movs	r1, r2
   22d20:	0018      	movs	r0, r3
   22d22:	4b2c      	ldr	r3, [pc, #176]	; (22dd4 <spi_rw+0x168>)
   22d24:	4798      	blx	r3
   22d26:	1e03      	subs	r3, r0, #0
   22d28:	d1f5      	bne.n	22d16 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   22d2a:	46c0      	nop			; (mov r8, r8)
   22d2c:	4b26      	ldr	r3, [pc, #152]	; (22dc8 <spi_rw+0x15c>)
   22d2e:	0018      	movs	r0, r3
   22d30:	4b29      	ldr	r3, [pc, #164]	; (22dd8 <spi_rw+0x16c>)
   22d32:	4798      	blx	r3
   22d34:	0003      	movs	r3, r0
   22d36:	001a      	movs	r2, r3
   22d38:	2301      	movs	r3, #1
   22d3a:	4053      	eors	r3, r2
   22d3c:	b2db      	uxtb	r3, r3
   22d3e:	2b00      	cmp	r3, #0
   22d40:	d1f4      	bne.n	22d2c <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   22d42:	46c0      	nop			; (mov r8, r8)
   22d44:	2310      	movs	r3, #16
   22d46:	18fa      	adds	r2, r7, r3
   22d48:	4b1f      	ldr	r3, [pc, #124]	; (22dc8 <spi_rw+0x15c>)
   22d4a:	0011      	movs	r1, r2
   22d4c:	0018      	movs	r0, r3
   22d4e:	4b23      	ldr	r3, [pc, #140]	; (22ddc <spi_rw+0x170>)
   22d50:	4798      	blx	r3
   22d52:	1e03      	subs	r3, r0, #0
   22d54:	d1f6      	bne.n	22d44 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   22d56:	2310      	movs	r3, #16
   22d58:	18fb      	adds	r3, r7, r3
   22d5a:	881b      	ldrh	r3, [r3, #0]
   22d5c:	b2da      	uxtb	r2, r3
   22d5e:	68bb      	ldr	r3, [r7, #8]
   22d60:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   22d62:	1dbb      	adds	r3, r7, #6
   22d64:	881a      	ldrh	r2, [r3, #0]
   22d66:	1dbb      	adds	r3, r7, #6
   22d68:	3a01      	subs	r2, #1
   22d6a:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   22d6c:	2316      	movs	r3, #22
   22d6e:	18fb      	adds	r3, r7, r3
   22d70:	781b      	ldrb	r3, [r3, #0]
   22d72:	2b00      	cmp	r3, #0
   22d74:	d102      	bne.n	22d7c <spi_rw+0x110>
			pu8Miso++;
   22d76:	68bb      	ldr	r3, [r7, #8]
   22d78:	3301      	adds	r3, #1
   22d7a:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   22d7c:	2317      	movs	r3, #23
   22d7e:	18fb      	adds	r3, r7, r3
   22d80:	781b      	ldrb	r3, [r3, #0]
   22d82:	2b00      	cmp	r3, #0
   22d84:	d102      	bne.n	22d8c <spi_rw+0x120>
			pu8Mosi++;
   22d86:	68fb      	ldr	r3, [r7, #12]
   22d88:	3301      	adds	r3, #1
   22d8a:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   22d8c:	1dbb      	adds	r3, r7, #6
   22d8e:	881b      	ldrh	r3, [r3, #0]
   22d90:	2b00      	cmp	r3, #0
   22d92:	d1ae      	bne.n	22cf2 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   22d94:	46c0      	nop			; (mov r8, r8)
   22d96:	4b0c      	ldr	r3, [pc, #48]	; (22dc8 <spi_rw+0x15c>)
   22d98:	0018      	movs	r0, r3
   22d9a:	4b11      	ldr	r3, [pc, #68]	; (22de0 <spi_rw+0x174>)
   22d9c:	4798      	blx	r3
   22d9e:	0003      	movs	r3, r0
   22da0:	001a      	movs	r2, r3
   22da2:	2301      	movs	r3, #1
   22da4:	4053      	eors	r3, r2
   22da6:	b2db      	uxtb	r3, r3
   22da8:	2b00      	cmp	r3, #0
   22daa:	d1f4      	bne.n	22d96 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   22dac:	4905      	ldr	r1, [pc, #20]	; (22dc4 <spi_rw+0x158>)
   22dae:	4b06      	ldr	r3, [pc, #24]	; (22dc8 <spi_rw+0x15c>)
   22db0:	2200      	movs	r2, #0
   22db2:	0018      	movs	r0, r3
   22db4:	4b05      	ldr	r3, [pc, #20]	; (22dcc <spi_rw+0x160>)
   22db6:	4798      	blx	r3

	return M2M_SUCCESS;
   22db8:	2300      	movs	r3, #0
}
   22dba:	0018      	movs	r0, r3
   22dbc:	46bd      	mov	sp, r7
   22dbe:	b006      	add	sp, #24
   22dc0:	bd80      	pop	{r7, pc}
   22dc2:	46c0      	nop			; (mov r8, r8)
   22dc4:	20005940 	.word	0x20005940
   22dc8:	20005944 	.word	0x20005944
   22dcc:	0002a785 	.word	0x0002a785
   22dd0:	00022b4d 	.word	0x00022b4d
   22dd4:	00022b9d 	.word	0x00022b9d
   22dd8:	00022b75 	.word	0x00022b75
   22ddc:	00022be5 	.word	0x00022be5
   22de0:	00022b25 	.word	0x00022b25

00022de4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   22de4:	b580      	push	{r7, lr}
   22de6:	b092      	sub	sp, #72	; 0x48
   22de8:	af00      	add	r7, sp, #0
   22dea:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   22dec:	2347      	movs	r3, #71	; 0x47
   22dee:	18fb      	adds	r3, r7, r3
   22df0:	2200      	movs	r2, #0
   22df2:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   22df4:	2308      	movs	r3, #8
   22df6:	18fb      	adds	r3, r7, r3
   22df8:	0018      	movs	r0, r3
   22dfa:	4b26      	ldr	r3, [pc, #152]	; (22e94 <nm_bus_init+0xb0>)
   22dfc:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   22dfe:	2308      	movs	r3, #8
   22e00:	18fb      	adds	r3, r7, r3
   22e02:	220e      	movs	r2, #14
   22e04:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   22e06:	2308      	movs	r3, #8
   22e08:	18fa      	adds	r2, r7, r3
   22e0a:	4b23      	ldr	r3, [pc, #140]	; (22e98 <nm_bus_init+0xb4>)
   22e0c:	0011      	movs	r1, r2
   22e0e:	0018      	movs	r0, r3
   22e10:	4b22      	ldr	r3, [pc, #136]	; (22e9c <nm_bus_init+0xb8>)
   22e12:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   22e14:	230c      	movs	r3, #12
   22e16:	18fb      	adds	r3, r7, r3
   22e18:	0018      	movs	r0, r3
   22e1a:	4b21      	ldr	r3, [pc, #132]	; (22ea0 <nm_bus_init+0xbc>)
   22e1c:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   22e1e:	230c      	movs	r3, #12
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	22c0      	movs	r2, #192	; 0xc0
   22e24:	0392      	lsls	r2, r2, #14
   22e26:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   22e28:	230c      	movs	r3, #12
   22e2a:	18fb      	adds	r3, r7, r3
   22e2c:	4a1d      	ldr	r2, [pc, #116]	; (22ea4 <nm_bus_init+0xc0>)
   22e2e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   22e30:	230c      	movs	r3, #12
   22e32:	18fb      	adds	r3, r7, r3
   22e34:	4a1c      	ldr	r2, [pc, #112]	; (22ea8 <nm_bus_init+0xc4>)
   22e36:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   22e38:	230c      	movs	r3, #12
   22e3a:	18fb      	adds	r3, r7, r3
   22e3c:	2201      	movs	r2, #1
   22e3e:	4252      	negs	r2, r2
   22e40:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   22e42:	230c      	movs	r3, #12
   22e44:	18fb      	adds	r3, r7, r3
   22e46:	4a19      	ldr	r2, [pc, #100]	; (22eac <nm_bus_init+0xc8>)
   22e48:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   22e4a:	230c      	movs	r3, #12
   22e4c:	18fb      	adds	r3, r7, r3
   22e4e:	2200      	movs	r2, #0
   22e50:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   22e52:	230c      	movs	r3, #12
   22e54:	18fb      	adds	r3, r7, r3
   22e56:	4a16      	ldr	r2, [pc, #88]	; (22eb0 <nm_bus_init+0xcc>)
   22e58:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   22e5a:	230c      	movs	r3, #12
   22e5c:	18fa      	adds	r2, r7, r3
   22e5e:	4915      	ldr	r1, [pc, #84]	; (22eb4 <nm_bus_init+0xd0>)
   22e60:	4b15      	ldr	r3, [pc, #84]	; (22eb8 <nm_bus_init+0xd4>)
   22e62:	0018      	movs	r0, r3
   22e64:	4b15      	ldr	r3, [pc, #84]	; (22ebc <nm_bus_init+0xd8>)
   22e66:	4798      	blx	r3
   22e68:	1e03      	subs	r3, r0, #0
   22e6a:	d002      	beq.n	22e72 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   22e6c:	2306      	movs	r3, #6
   22e6e:	425b      	negs	r3, r3
   22e70:	e00c      	b.n	22e8c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   22e72:	4b11      	ldr	r3, [pc, #68]	; (22eb8 <nm_bus_init+0xd4>)
   22e74:	0018      	movs	r0, r3
   22e76:	4b12      	ldr	r3, [pc, #72]	; (22ec0 <nm_bus_init+0xdc>)
   22e78:	4798      	blx	r3

	nm_bsp_reset();
   22e7a:	4b12      	ldr	r3, [pc, #72]	; (22ec4 <nm_bus_init+0xe0>)
   22e7c:	4798      	blx	r3
	nm_bsp_sleep(1);
   22e7e:	2001      	movs	r0, #1
   22e80:	4b11      	ldr	r3, [pc, #68]	; (22ec8 <nm_bus_init+0xe4>)
   22e82:	4798      	blx	r3
#endif
	return result;
   22e84:	2347      	movs	r3, #71	; 0x47
   22e86:	18fb      	adds	r3, r7, r3
   22e88:	781b      	ldrb	r3, [r3, #0]
   22e8a:	b25b      	sxtb	r3, r3
}
   22e8c:	0018      	movs	r0, r3
   22e8e:	46bd      	mov	sp, r7
   22e90:	b012      	add	sp, #72	; 0x48
   22e92:	bd80      	pop	{r7, pc}
   22e94:	00022a25 	.word	0x00022a25
   22e98:	20005940 	.word	0x20005940
   22e9c:	00022a49 	.word	0x00022a49
   22ea0:	000229a1 	.word	0x000229a1
   22ea4:	000c0002 	.word	0x000c0002
   22ea8:	000d0002 	.word	0x000d0002
   22eac:	000f0002 	.word	0x000f0002
   22eb0:	00124f80 	.word	0x00124f80
   22eb4:	42001000 	.word	0x42001000
   22eb8:	20005944 	.word	0x20005944
   22ebc:	0002a4d1 	.word	0x0002a4d1
   22ec0:	00022aad 	.word	0x00022aad
   22ec4:	00022779 	.word	0x00022779
   22ec8:	000227b9 	.word	0x000227b9

00022ecc <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   22ecc:	b590      	push	{r4, r7, lr}
   22ece:	b085      	sub	sp, #20
   22ed0:	af00      	add	r7, sp, #0
   22ed2:	0002      	movs	r2, r0
   22ed4:	6039      	str	r1, [r7, #0]
   22ed6:	1dfb      	adds	r3, r7, #7
   22ed8:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   22eda:	230f      	movs	r3, #15
   22edc:	18fb      	adds	r3, r7, r3
   22ede:	2200      	movs	r2, #0
   22ee0:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   22ee2:	1dfb      	adds	r3, r7, #7
   22ee4:	781b      	ldrb	r3, [r3, #0]
   22ee6:	2b03      	cmp	r3, #3
   22ee8:	d10f      	bne.n	22f0a <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   22eea:	683b      	ldr	r3, [r7, #0]
   22eec:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   22eee:	68bb      	ldr	r3, [r7, #8]
   22ef0:	6818      	ldr	r0, [r3, #0]
   22ef2:	68bb      	ldr	r3, [r7, #8]
   22ef4:	6859      	ldr	r1, [r3, #4]
   22ef6:	68bb      	ldr	r3, [r7, #8]
   22ef8:	891b      	ldrh	r3, [r3, #8]
   22efa:	220f      	movs	r2, #15
   22efc:	18bc      	adds	r4, r7, r2
   22efe:	001a      	movs	r2, r3
   22f00:	4b10      	ldr	r3, [pc, #64]	; (22f44 <nm_bus_ioctl+0x78>)
   22f02:	4798      	blx	r3
   22f04:	0003      	movs	r3, r0
   22f06:	7023      	strb	r3, [r4, #0]
		}
		break;
   22f08:	e013      	b.n	22f32 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   22f0a:	230f      	movs	r3, #15
   22f0c:	18fb      	adds	r3, r7, r3
   22f0e:	22ff      	movs	r2, #255	; 0xff
   22f10:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   22f12:	2383      	movs	r3, #131	; 0x83
   22f14:	005a      	lsls	r2, r3, #1
   22f16:	490c      	ldr	r1, [pc, #48]	; (22f48 <nm_bus_ioctl+0x7c>)
   22f18:	4b0c      	ldr	r3, [pc, #48]	; (22f4c <nm_bus_ioctl+0x80>)
   22f1a:	0018      	movs	r0, r3
   22f1c:	4b0c      	ldr	r3, [pc, #48]	; (22f50 <nm_bus_ioctl+0x84>)
   22f1e:	4798      	blx	r3
   22f20:	4b0c      	ldr	r3, [pc, #48]	; (22f54 <nm_bus_ioctl+0x88>)
   22f22:	0018      	movs	r0, r3
   22f24:	4b0a      	ldr	r3, [pc, #40]	; (22f50 <nm_bus_ioctl+0x84>)
   22f26:	4798      	blx	r3
   22f28:	4b0b      	ldr	r3, [pc, #44]	; (22f58 <nm_bus_ioctl+0x8c>)
   22f2a:	0018      	movs	r0, r3
   22f2c:	4b08      	ldr	r3, [pc, #32]	; (22f50 <nm_bus_ioctl+0x84>)
   22f2e:	4798      	blx	r3
			break;
   22f30:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   22f32:	230f      	movs	r3, #15
   22f34:	18fb      	adds	r3, r7, r3
   22f36:	781b      	ldrb	r3, [r3, #0]
   22f38:	b25b      	sxtb	r3, r3
}
   22f3a:	0018      	movs	r0, r3
   22f3c:	46bd      	mov	sp, r7
   22f3e:	b005      	add	sp, #20
   22f40:	bd90      	pop	{r4, r7, pc}
   22f42:	46c0      	nop			; (mov r8, r8)
   22f44:	00022c6d 	.word	0x00022c6d
   22f48:	0003b650 	.word	0x0003b650
   22f4c:	0003b624 	.word	0x0003b624
   22f50:	00020349 	.word	0x00020349
   22f54:	0003b638 	.word	0x0003b638
   22f58:	0003b64c 	.word	0x0003b64c

00022f5c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   22f5c:	b580      	push	{r7, lr}
   22f5e:	b082      	sub	sp, #8
   22f60:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   22f62:	1dfb      	adds	r3, r7, #7
   22f64:	2200      	movs	r2, #0
   22f66:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   22f68:	1d3b      	adds	r3, r7, #4
   22f6a:	0018      	movs	r0, r3
   22f6c:	4b13      	ldr	r3, [pc, #76]	; (22fbc <nm_bus_deinit+0x60>)
   22f6e:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   22f70:	1d3b      	adds	r3, r7, #4
   22f72:	2200      	movs	r2, #0
   22f74:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   22f76:	1d3b      	adds	r3, r7, #4
   22f78:	2200      	movs	r2, #0
   22f7a:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   22f7c:	4b10      	ldr	r3, [pc, #64]	; (22fc0 <nm_bus_deinit+0x64>)
   22f7e:	0018      	movs	r0, r3
   22f80:	4b10      	ldr	r3, [pc, #64]	; (22fc4 <nm_bus_deinit+0x68>)
   22f82:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   22f84:	1d3b      	adds	r3, r7, #4
   22f86:	0019      	movs	r1, r3
   22f88:	200c      	movs	r0, #12
   22f8a:	4b0f      	ldr	r3, [pc, #60]	; (22fc8 <nm_bus_deinit+0x6c>)
   22f8c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   22f8e:	1d3b      	adds	r3, r7, #4
   22f90:	0019      	movs	r1, r3
   22f92:	200f      	movs	r0, #15
   22f94:	4b0c      	ldr	r3, [pc, #48]	; (22fc8 <nm_bus_deinit+0x6c>)
   22f96:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   22f98:	1d3b      	adds	r3, r7, #4
   22f9a:	0019      	movs	r1, r3
   22f9c:	200d      	movs	r0, #13
   22f9e:	4b0a      	ldr	r3, [pc, #40]	; (22fc8 <nm_bus_deinit+0x6c>)
   22fa0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   22fa2:	1d3b      	adds	r3, r7, #4
   22fa4:	0019      	movs	r1, r3
   22fa6:	200e      	movs	r0, #14
   22fa8:	4b07      	ldr	r3, [pc, #28]	; (22fc8 <nm_bus_deinit+0x6c>)
   22faa:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   22fac:	1dfb      	adds	r3, r7, #7
   22fae:	781b      	ldrb	r3, [r3, #0]
   22fb0:	b25b      	sxtb	r3, r3
}
   22fb2:	0018      	movs	r0, r3
   22fb4:	46bd      	mov	sp, r7
   22fb6:	b002      	add	sp, #8
   22fb8:	bd80      	pop	{r7, pc}
   22fba:	46c0      	nop			; (mov r8, r8)
   22fbc:	00022909 	.word	0x00022909
   22fc0:	20005944 	.word	0x20005944
   22fc4:	00022ae1 	.word	0x00022ae1
   22fc8:	00028dd5 	.word	0x00028dd5

00022fcc <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   22fcc:	b580      	push	{r7, lr}
   22fce:	b084      	sub	sp, #16
   22fd0:	af00      	add	r7, sp, #0
   22fd2:	60f8      	str	r0, [r7, #12]
   22fd4:	60b9      	str	r1, [r7, #8]
   22fd6:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   22fd8:	687b      	ldr	r3, [r7, #4]
   22fda:	2b00      	cmp	r3, #0
   22fdc:	d010      	beq.n	23000 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   22fde:	68bb      	ldr	r3, [r7, #8]
   22fe0:	781a      	ldrb	r2, [r3, #0]
   22fe2:	68fb      	ldr	r3, [r7, #12]
   22fe4:	701a      	strb	r2, [r3, #0]
		pDst++;
   22fe6:	68fb      	ldr	r3, [r7, #12]
   22fe8:	3301      	adds	r3, #1
   22fea:	60fb      	str	r3, [r7, #12]
		pSrc++;
   22fec:	68bb      	ldr	r3, [r7, #8]
   22fee:	3301      	adds	r3, #1
   22ff0:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   22ff2:	687b      	ldr	r3, [r7, #4]
   22ff4:	3b01      	subs	r3, #1
   22ff6:	607b      	str	r3, [r7, #4]
   22ff8:	687b      	ldr	r3, [r7, #4]
   22ffa:	2b00      	cmp	r3, #0
   22ffc:	d1ef      	bne.n	22fde <m2m_memcpy+0x12>
   22ffe:	e000      	b.n	23002 <m2m_memcpy+0x36>
	if(sz == 0) return;
   23000:	46c0      	nop			; (mov r8, r8)
}
   23002:	46bd      	mov	sp, r7
   23004:	b004      	add	sp, #16
   23006:	bd80      	pop	{r7, pc}

00023008 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   23008:	b580      	push	{r7, lr}
   2300a:	b084      	sub	sp, #16
   2300c:	af00      	add	r7, sp, #0
   2300e:	60f8      	str	r0, [r7, #12]
   23010:	607a      	str	r2, [r7, #4]
   23012:	230b      	movs	r3, #11
   23014:	18fb      	adds	r3, r7, r3
   23016:	1c0a      	adds	r2, r1, #0
   23018:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   2301a:	687b      	ldr	r3, [r7, #4]
   2301c:	2b00      	cmp	r3, #0
   2301e:	d00e      	beq.n	2303e <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   23020:	68fb      	ldr	r3, [r7, #12]
   23022:	220b      	movs	r2, #11
   23024:	18ba      	adds	r2, r7, r2
   23026:	7812      	ldrb	r2, [r2, #0]
   23028:	701a      	strb	r2, [r3, #0]
		pBuf++;
   2302a:	68fb      	ldr	r3, [r7, #12]
   2302c:	3301      	adds	r3, #1
   2302e:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   23030:	687b      	ldr	r3, [r7, #4]
   23032:	3b01      	subs	r3, #1
   23034:	607b      	str	r3, [r7, #4]
   23036:	687b      	ldr	r3, [r7, #4]
   23038:	2b00      	cmp	r3, #0
   2303a:	d1f1      	bne.n	23020 <m2m_memset+0x18>
   2303c:	e000      	b.n	23040 <m2m_memset+0x38>
	if(sz == 0) return;
   2303e:	46c0      	nop			; (mov r8, r8)
}
   23040:	46bd      	mov	sp, r7
   23042:	b004      	add	sp, #16
   23044:	bd80      	pop	{r7, pc}

00023046 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   23046:	b580      	push	{r7, lr}
   23048:	b084      	sub	sp, #16
   2304a:	af00      	add	r7, sp, #0
   2304c:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   2304e:	230e      	movs	r3, #14
   23050:	18fb      	adds	r3, r7, r3
   23052:	2200      	movs	r2, #0
   23054:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   23056:	e009      	b.n	2306c <m2m_strlen+0x26>
	{
		u16StrLen ++;
   23058:	230e      	movs	r3, #14
   2305a:	18fb      	adds	r3, r7, r3
   2305c:	881a      	ldrh	r2, [r3, #0]
   2305e:	230e      	movs	r3, #14
   23060:	18fb      	adds	r3, r7, r3
   23062:	3201      	adds	r2, #1
   23064:	801a      	strh	r2, [r3, #0]
		pcStr++;
   23066:	687b      	ldr	r3, [r7, #4]
   23068:	3301      	adds	r3, #1
   2306a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   2306c:	687b      	ldr	r3, [r7, #4]
   2306e:	781b      	ldrb	r3, [r3, #0]
   23070:	2b00      	cmp	r3, #0
   23072:	d1f1      	bne.n	23058 <m2m_strlen+0x12>
	}
	return u16StrLen;
   23074:	230e      	movs	r3, #14
   23076:	18fb      	adds	r3, r7, r3
   23078:	881b      	ldrh	r3, [r3, #0]
}
   2307a:	0018      	movs	r0, r3
   2307c:	46bd      	mov	sp, r7
   2307e:	b004      	add	sp, #16
   23080:	bd80      	pop	{r7, pc}
	...

00023084 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   23084:	b580      	push	{r7, lr}
   23086:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   23088:	4b04      	ldr	r3, [pc, #16]	; (2309c <isr+0x18>)
   2308a:	78db      	ldrb	r3, [r3, #3]
   2308c:	b2db      	uxtb	r3, r3
   2308e:	3301      	adds	r3, #1
   23090:	b2da      	uxtb	r2, r3
   23092:	4b02      	ldr	r3, [pc, #8]	; (2309c <isr+0x18>)
   23094:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   23096:	46c0      	nop			; (mov r8, r8)
   23098:	46bd      	mov	sp, r7
   2309a:	bd80      	pop	{r7, pc}
   2309c:	20005950 	.word	0x20005950

000230a0 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   230a0:	b590      	push	{r4, r7, lr}
   230a2:	b083      	sub	sp, #12
   230a4:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   230a6:	1dfb      	adds	r3, r7, #7
   230a8:	2200      	movs	r2, #0
   230aa:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   230ac:	4b14      	ldr	r3, [pc, #80]	; (23100 <hif_set_rx_done+0x60>)
   230ae:	2200      	movs	r2, #0
   230b0:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   230b2:	2001      	movs	r0, #1
   230b4:	4b13      	ldr	r3, [pc, #76]	; (23104 <hif_set_rx_done+0x64>)
   230b6:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   230b8:	1dfc      	adds	r4, r7, #7
   230ba:	003b      	movs	r3, r7
   230bc:	4a12      	ldr	r2, [pc, #72]	; (23108 <hif_set_rx_done+0x68>)
   230be:	0019      	movs	r1, r3
   230c0:	0010      	movs	r0, r2
   230c2:	4b12      	ldr	r3, [pc, #72]	; (2310c <hif_set_rx_done+0x6c>)
   230c4:	4798      	blx	r3
   230c6:	0003      	movs	r3, r0
   230c8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   230ca:	1dfb      	adds	r3, r7, #7
   230cc:	781b      	ldrb	r3, [r3, #0]
   230ce:	b25b      	sxtb	r3, r3
   230d0:	2b00      	cmp	r3, #0
   230d2:	d10d      	bne.n	230f0 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   230d4:	683b      	ldr	r3, [r7, #0]
   230d6:	2202      	movs	r2, #2
   230d8:	4313      	orrs	r3, r2
   230da:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   230dc:	683b      	ldr	r3, [r7, #0]
   230de:	1dfc      	adds	r4, r7, #7
   230e0:	4a09      	ldr	r2, [pc, #36]	; (23108 <hif_set_rx_done+0x68>)
   230e2:	0019      	movs	r1, r3
   230e4:	0010      	movs	r0, r2
   230e6:	4b0a      	ldr	r3, [pc, #40]	; (23110 <hif_set_rx_done+0x70>)
   230e8:	4798      	blx	r3
   230ea:	0003      	movs	r3, r0
   230ec:	7023      	strb	r3, [r4, #0]
   230ee:	e000      	b.n	230f2 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   230f0:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   230f2:	1dfb      	adds	r3, r7, #7
   230f4:	781b      	ldrb	r3, [r3, #0]
   230f6:	b25b      	sxtb	r3, r3

}
   230f8:	0018      	movs	r0, r3
   230fa:	46bd      	mov	sp, r7
   230fc:	b003      	add	sp, #12
   230fe:	bd90      	pop	{r4, r7, pc}
   23100:	20005950 	.word	0x20005950
   23104:	0002284d 	.word	0x0002284d
   23108:	00001070 	.word	0x00001070
   2310c:	00025099 	.word	0x00025099
   23110:	000250bd 	.word	0x000250bd

00023114 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   23114:	b580      	push	{r7, lr}
   23116:	b082      	sub	sp, #8
   23118:	af00      	add	r7, sp, #0
   2311a:	603a      	str	r2, [r7, #0]
   2311c:	1dfb      	adds	r3, r7, #7
   2311e:	1c02      	adds	r2, r0, #0
   23120:	701a      	strb	r2, [r3, #0]
   23122:	1d3b      	adds	r3, r7, #4
   23124:	1c0a      	adds	r2, r1, #0
   23126:	801a      	strh	r2, [r3, #0]


}
   23128:	46c0      	nop			; (mov r8, r8)
   2312a:	46bd      	mov	sp, r7
   2312c:	b002      	add	sp, #8
   2312e:	bd80      	pop	{r7, pc}

00023130 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   23130:	b590      	push	{r4, r7, lr}
   23132:	b083      	sub	sp, #12
   23134:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23136:	1dfb      	adds	r3, r7, #7
   23138:	2200      	movs	r2, #0
   2313a:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   2313c:	4b16      	ldr	r3, [pc, #88]	; (23198 <hif_chip_wake+0x68>)
   2313e:	789b      	ldrb	r3, [r3, #2]
   23140:	b2db      	uxtb	r3, r3
   23142:	2b00      	cmp	r3, #0
   23144:	d003      	beq.n	2314e <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   23146:	1dfb      	adds	r3, r7, #7
   23148:	781b      	ldrb	r3, [r3, #0]
   2314a:	b25b      	sxtb	r3, r3
   2314c:	e01f      	b.n	2318e <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   2314e:	4b12      	ldr	r3, [pc, #72]	; (23198 <hif_chip_wake+0x68>)
   23150:	785b      	ldrb	r3, [r3, #1]
   23152:	b2db      	uxtb	r3, r3
   23154:	2b00      	cmp	r3, #0
   23156:	d10e      	bne.n	23176 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   23158:	4b0f      	ldr	r3, [pc, #60]	; (23198 <hif_chip_wake+0x68>)
   2315a:	781b      	ldrb	r3, [r3, #0]
   2315c:	b2db      	uxtb	r3, r3
   2315e:	2b00      	cmp	r3, #0
   23160:	d009      	beq.n	23176 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   23162:	1dfc      	adds	r4, r7, #7
   23164:	4b0d      	ldr	r3, [pc, #52]	; (2319c <hif_chip_wake+0x6c>)
   23166:	4798      	blx	r3
   23168:	0003      	movs	r3, r0
   2316a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2316c:	1dfb      	adds	r3, r7, #7
   2316e:	781b      	ldrb	r3, [r3, #0]
   23170:	b25b      	sxtb	r3, r3
   23172:	2b00      	cmp	r3, #0
   23174:	d107      	bne.n	23186 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   23176:	4b08      	ldr	r3, [pc, #32]	; (23198 <hif_chip_wake+0x68>)
   23178:	785b      	ldrb	r3, [r3, #1]
   2317a:	b2db      	uxtb	r3, r3
   2317c:	3301      	adds	r3, #1
   2317e:	b2da      	uxtb	r2, r3
   23180:	4b05      	ldr	r3, [pc, #20]	; (23198 <hif_chip_wake+0x68>)
   23182:	705a      	strb	r2, [r3, #1]
   23184:	e000      	b.n	23188 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   23186:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   23188:	1dfb      	adds	r3, r7, #7
   2318a:	781b      	ldrb	r3, [r3, #0]
   2318c:	b25b      	sxtb	r3, r3
}
   2318e:	0018      	movs	r0, r3
   23190:	46bd      	mov	sp, r7
   23192:	b003      	add	sp, #12
   23194:	bd90      	pop	{r4, r7, pc}
   23196:	46c0      	nop			; (mov r8, r8)
   23198:	20005950 	.word	0x20005950
   2319c:	00024b69 	.word	0x00024b69

000231a0 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   231a0:	b580      	push	{r7, lr}
   231a2:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   231a4:	4b07      	ldr	r3, [pc, #28]	; (231c4 <hif_chip_sleep_sc+0x24>)
   231a6:	785b      	ldrb	r3, [r3, #1]
   231a8:	b2db      	uxtb	r3, r3
   231aa:	2b00      	cmp	r3, #0
   231ac:	d006      	beq.n	231bc <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   231ae:	4b05      	ldr	r3, [pc, #20]	; (231c4 <hif_chip_sleep_sc+0x24>)
   231b0:	785b      	ldrb	r3, [r3, #1]
   231b2:	b2db      	uxtb	r3, r3
   231b4:	3b01      	subs	r3, #1
   231b6:	b2da      	uxtb	r2, r3
   231b8:	4b02      	ldr	r3, [pc, #8]	; (231c4 <hif_chip_sleep_sc+0x24>)
   231ba:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   231bc:	2300      	movs	r3, #0
}
   231be:	0018      	movs	r0, r3
   231c0:	46bd      	mov	sp, r7
   231c2:	bd80      	pop	{r7, pc}
   231c4:	20005950 	.word	0x20005950

000231c8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   231c8:	b590      	push	{r4, r7, lr}
   231ca:	b083      	sub	sp, #12
   231cc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   231ce:	1dfb      	adds	r3, r7, #7
   231d0:	2200      	movs	r2, #0
   231d2:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   231d4:	4b10      	ldr	r3, [pc, #64]	; (23218 <hif_chip_sleep+0x50>)
   231d6:	785b      	ldrb	r3, [r3, #1]
   231d8:	b2db      	uxtb	r3, r3
   231da:	2b00      	cmp	r3, #0
   231dc:	d006      	beq.n	231ec <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   231de:	4b0e      	ldr	r3, [pc, #56]	; (23218 <hif_chip_sleep+0x50>)
   231e0:	785b      	ldrb	r3, [r3, #1]
   231e2:	b2db      	uxtb	r3, r3
   231e4:	3b01      	subs	r3, #1
   231e6:	b2da      	uxtb	r2, r3
   231e8:	4b0b      	ldr	r3, [pc, #44]	; (23218 <hif_chip_sleep+0x50>)
   231ea:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   231ec:	4b0a      	ldr	r3, [pc, #40]	; (23218 <hif_chip_sleep+0x50>)
   231ee:	785b      	ldrb	r3, [r3, #1]
   231f0:	b2db      	uxtb	r3, r3
   231f2:	2b00      	cmp	r3, #0
   231f4:	d109      	bne.n	2320a <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   231f6:	4b08      	ldr	r3, [pc, #32]	; (23218 <hif_chip_sleep+0x50>)
   231f8:	781b      	ldrb	r3, [r3, #0]
   231fa:	b2db      	uxtb	r3, r3
   231fc:	2b00      	cmp	r3, #0
   231fe:	d004      	beq.n	2320a <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   23200:	1dfc      	adds	r4, r7, #7
   23202:	4b06      	ldr	r3, [pc, #24]	; (2321c <hif_chip_sleep+0x54>)
   23204:	4798      	blx	r3
   23206:	0003      	movs	r3, r0
   23208:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   2320a:	1dfb      	adds	r3, r7, #7
   2320c:	781b      	ldrb	r3, [r3, #0]
   2320e:	b25b      	sxtb	r3, r3
}
   23210:	0018      	movs	r0, r3
   23212:	46bd      	mov	sp, r7
   23214:	b003      	add	sp, #12
   23216:	bd90      	pop	{r4, r7, pc}
   23218:	20005950 	.word	0x20005950
   2321c:	00024a91 	.word	0x00024a91

00023220 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   23220:	b580      	push	{r7, lr}
   23222:	b082      	sub	sp, #8
   23224:	af00      	add	r7, sp, #0
   23226:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   23228:	4b09      	ldr	r3, [pc, #36]	; (23250 <hif_init+0x30>)
   2322a:	222c      	movs	r2, #44	; 0x2c
   2322c:	2100      	movs	r1, #0
   2322e:	0018      	movs	r0, r3
   23230:	4b08      	ldr	r3, [pc, #32]	; (23254 <hif_init+0x34>)
   23232:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   23234:	4b08      	ldr	r3, [pc, #32]	; (23258 <hif_init+0x38>)
   23236:	0018      	movs	r0, r3
   23238:	4b08      	ldr	r3, [pc, #32]	; (2325c <hif_init+0x3c>)
   2323a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   2323c:	4b08      	ldr	r3, [pc, #32]	; (23260 <hif_init+0x40>)
   2323e:	0019      	movs	r1, r3
   23240:	2003      	movs	r0, #3
   23242:	4b08      	ldr	r3, [pc, #32]	; (23264 <hif_init+0x44>)
   23244:	4798      	blx	r3
	return M2M_SUCCESS;
   23246:	2300      	movs	r3, #0
}
   23248:	0018      	movs	r0, r3
   2324a:	46bd      	mov	sp, r7
   2324c:	b002      	add	sp, #8
   2324e:	bd80      	pop	{r7, pc}
   23250:	20005950 	.word	0x20005950
   23254:	00023009 	.word	0x00023009
   23258:	00023085 	.word	0x00023085
   2325c:	000227d5 	.word	0x000227d5
   23260:	00023115 	.word	0x00023115
   23264:	00023d05 	.word	0x00023d05

00023268 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   23268:	b590      	push	{r4, r7, lr}
   2326a:	b089      	sub	sp, #36	; 0x24
   2326c:	af00      	add	r7, sp, #0
   2326e:	0004      	movs	r4, r0
   23270:	0008      	movs	r0, r1
   23272:	603a      	str	r2, [r7, #0]
   23274:	0019      	movs	r1, r3
   23276:	1dfb      	adds	r3, r7, #7
   23278:	1c22      	adds	r2, r4, #0
   2327a:	701a      	strb	r2, [r3, #0]
   2327c:	1dbb      	adds	r3, r7, #6
   2327e:	1c02      	adds	r2, r0, #0
   23280:	701a      	strb	r2, [r3, #0]
   23282:	1d3b      	adds	r3, r7, #4
   23284:	1c0a      	adds	r2, r1, #0
   23286:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   23288:	231f      	movs	r3, #31
   2328a:	18fb      	adds	r3, r7, r3
   2328c:	22ff      	movs	r2, #255	; 0xff
   2328e:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   23290:	1dbb      	adds	r3, r7, #6
   23292:	781b      	ldrb	r3, [r3, #0]
   23294:	227f      	movs	r2, #127	; 0x7f
   23296:	4013      	ands	r3, r2
   23298:	b2da      	uxtb	r2, r3
   2329a:	2318      	movs	r3, #24
   2329c:	18fb      	adds	r3, r7, r3
   2329e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   232a0:	2318      	movs	r3, #24
   232a2:	18fb      	adds	r3, r7, r3
   232a4:	1dfa      	adds	r2, r7, #7
   232a6:	7812      	ldrb	r2, [r2, #0]
   232a8:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   232aa:	2318      	movs	r3, #24
   232ac:	18fb      	adds	r3, r7, r3
   232ae:	2208      	movs	r2, #8
   232b0:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   232b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   232b4:	2b00      	cmp	r3, #0
   232b6:	d011      	beq.n	232dc <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   232b8:	2318      	movs	r3, #24
   232ba:	18fb      	adds	r3, r7, r3
   232bc:	885b      	ldrh	r3, [r3, #2]
   232be:	b29a      	uxth	r2, r3
   232c0:	2338      	movs	r3, #56	; 0x38
   232c2:	18f9      	adds	r1, r7, r3
   232c4:	2334      	movs	r3, #52	; 0x34
   232c6:	18fb      	adds	r3, r7, r3
   232c8:	8809      	ldrh	r1, [r1, #0]
   232ca:	881b      	ldrh	r3, [r3, #0]
   232cc:	18cb      	adds	r3, r1, r3
   232ce:	b29b      	uxth	r3, r3
   232d0:	18d3      	adds	r3, r2, r3
   232d2:	b29a      	uxth	r2, r3
   232d4:	2318      	movs	r3, #24
   232d6:	18fb      	adds	r3, r7, r3
   232d8:	805a      	strh	r2, [r3, #2]
   232da:	e00a      	b.n	232f2 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   232dc:	2318      	movs	r3, #24
   232de:	18fb      	adds	r3, r7, r3
   232e0:	885b      	ldrh	r3, [r3, #2]
   232e2:	b29a      	uxth	r2, r3
   232e4:	1d3b      	adds	r3, r7, #4
   232e6:	881b      	ldrh	r3, [r3, #0]
   232e8:	18d3      	adds	r3, r2, r3
   232ea:	b29a      	uxth	r2, r3
   232ec:	2318      	movs	r3, #24
   232ee:	18fb      	adds	r3, r7, r3
   232f0:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   232f2:	231f      	movs	r3, #31
   232f4:	18fc      	adds	r4, r7, r3
   232f6:	4bb2      	ldr	r3, [pc, #712]	; (235c0 <hif_send+0x358>)
   232f8:	4798      	blx	r3
   232fa:	0003      	movs	r3, r0
   232fc:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   232fe:	231f      	movs	r3, #31
   23300:	18fb      	adds	r3, r7, r3
   23302:	781b      	ldrb	r3, [r3, #0]
   23304:	b25b      	sxtb	r3, r3
   23306:	2b00      	cmp	r3, #0
   23308:	d000      	beq.n	2330c <hif_send+0xa4>
   2330a:	e129      	b.n	23560 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   2330c:	2300      	movs	r3, #0
   2330e:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   23310:	230e      	movs	r3, #14
   23312:	18fb      	adds	r3, r7, r3
   23314:	2200      	movs	r2, #0
   23316:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   23318:	2300      	movs	r3, #0
   2331a:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   2331c:	1dfb      	adds	r3, r7, #7
   2331e:	781a      	ldrb	r2, [r3, #0]
   23320:	697b      	ldr	r3, [r7, #20]
   23322:	4313      	orrs	r3, r2
   23324:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   23326:	1dbb      	adds	r3, r7, #6
   23328:	781b      	ldrb	r3, [r3, #0]
   2332a:	021a      	lsls	r2, r3, #8
   2332c:	697b      	ldr	r3, [r7, #20]
   2332e:	4313      	orrs	r3, r2
   23330:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   23332:	2318      	movs	r3, #24
   23334:	18fb      	adds	r3, r7, r3
   23336:	885b      	ldrh	r3, [r3, #2]
   23338:	b29b      	uxth	r3, r3
   2333a:	041a      	lsls	r2, r3, #16
   2333c:	697b      	ldr	r3, [r7, #20]
   2333e:	4313      	orrs	r3, r2
   23340:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   23342:	697b      	ldr	r3, [r7, #20]
   23344:	221f      	movs	r2, #31
   23346:	18bc      	adds	r4, r7, r2
   23348:	4a9e      	ldr	r2, [pc, #632]	; (235c4 <hif_send+0x35c>)
   2334a:	0019      	movs	r1, r3
   2334c:	0010      	movs	r0, r2
   2334e:	4b9e      	ldr	r3, [pc, #632]	; (235c8 <hif_send+0x360>)
   23350:	4798      	blx	r3
   23352:	0003      	movs	r3, r0
   23354:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23356:	231f      	movs	r3, #31
   23358:	18fb      	adds	r3, r7, r3
   2335a:	781b      	ldrb	r3, [r3, #0]
   2335c:	b25b      	sxtb	r3, r3
   2335e:	2b00      	cmp	r3, #0
   23360:	d000      	beq.n	23364 <hif_send+0xfc>
   23362:	e119      	b.n	23598 <hif_send+0x330>

		reg = 0UL;
   23364:	2300      	movs	r3, #0
   23366:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   23368:	697b      	ldr	r3, [r7, #20]
   2336a:	2202      	movs	r2, #2
   2336c:	4313      	orrs	r3, r2
   2336e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   23370:	697b      	ldr	r3, [r7, #20]
   23372:	221f      	movs	r2, #31
   23374:	18bc      	adds	r4, r7, r2
   23376:	4a95      	ldr	r2, [pc, #596]	; (235cc <hif_send+0x364>)
   23378:	0019      	movs	r1, r3
   2337a:	0010      	movs	r0, r2
   2337c:	4b92      	ldr	r3, [pc, #584]	; (235c8 <hif_send+0x360>)
   2337e:	4798      	blx	r3
   23380:	0003      	movs	r3, r0
   23382:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23384:	231f      	movs	r3, #31
   23386:	18fb      	adds	r3, r7, r3
   23388:	781b      	ldrb	r3, [r3, #0]
   2338a:	b25b      	sxtb	r3, r3
   2338c:	2b00      	cmp	r3, #0
   2338e:	d000      	beq.n	23392 <hif_send+0x12a>
   23390:	e104      	b.n	2359c <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   23392:	2300      	movs	r3, #0
   23394:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   23396:	230e      	movs	r3, #14
   23398:	18fb      	adds	r3, r7, r3
   2339a:	2200      	movs	r2, #0
   2339c:	801a      	strh	r2, [r3, #0]
   2339e:	e050      	b.n	23442 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   233a0:	231f      	movs	r3, #31
   233a2:	18fc      	adds	r4, r7, r3
   233a4:	2314      	movs	r3, #20
   233a6:	18fb      	adds	r3, r7, r3
   233a8:	4a88      	ldr	r2, [pc, #544]	; (235cc <hif_send+0x364>)
   233aa:	0019      	movs	r1, r3
   233ac:	0010      	movs	r0, r2
   233ae:	4b88      	ldr	r3, [pc, #544]	; (235d0 <hif_send+0x368>)
   233b0:	4798      	blx	r3
   233b2:	0003      	movs	r3, r0
   233b4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   233b6:	231f      	movs	r3, #31
   233b8:	18fb      	adds	r3, r7, r3
   233ba:	781b      	ldrb	r3, [r3, #0]
   233bc:	b25b      	sxtb	r3, r3
   233be:	2b00      	cmp	r3, #0
   233c0:	d147      	bne.n	23452 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   233c2:	230e      	movs	r3, #14
   233c4:	18fb      	adds	r3, r7, r3
   233c6:	881b      	ldrh	r3, [r3, #0]
   233c8:	b29a      	uxth	r2, r3
   233ca:	23f4      	movs	r3, #244	; 0xf4
   233cc:	33ff      	adds	r3, #255	; 0xff
   233ce:	429a      	cmp	r2, r3
   233d0:	d916      	bls.n	23400 <hif_send+0x198>
				if(cnt < 501) {
   233d2:	230e      	movs	r3, #14
   233d4:	18fb      	adds	r3, r7, r3
   233d6:	881b      	ldrh	r3, [r3, #0]
   233d8:	b29a      	uxth	r2, r3
   233da:	23fa      	movs	r3, #250	; 0xfa
   233dc:	005b      	lsls	r3, r3, #1
   233de:	429a      	cmp	r2, r3
   233e0:	d80b      	bhi.n	233fa <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   233e2:	4b7c      	ldr	r3, [pc, #496]	; (235d4 <hif_send+0x36c>)
   233e4:	0018      	movs	r0, r3
   233e6:	4b7c      	ldr	r3, [pc, #496]	; (235d8 <hif_send+0x370>)
   233e8:	4798      	blx	r3
   233ea:	4b7c      	ldr	r3, [pc, #496]	; (235dc <hif_send+0x374>)
   233ec:	0018      	movs	r0, r3
   233ee:	4b7a      	ldr	r3, [pc, #488]	; (235d8 <hif_send+0x370>)
   233f0:	4798      	blx	r3
   233f2:	4b7b      	ldr	r3, [pc, #492]	; (235e0 <hif_send+0x378>)
   233f4:	0018      	movs	r0, r3
   233f6:	4b78      	ldr	r3, [pc, #480]	; (235d8 <hif_send+0x370>)
   233f8:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   233fa:	2001      	movs	r0, #1
   233fc:	4b79      	ldr	r3, [pc, #484]	; (235e4 <hif_send+0x37c>)
   233fe:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   23400:	697b      	ldr	r3, [r7, #20]
   23402:	2202      	movs	r2, #2
   23404:	4013      	ands	r3, r2
   23406:	d113      	bne.n	23430 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   23408:	231f      	movs	r3, #31
   2340a:	18fc      	adds	r4, r7, r3
   2340c:	2310      	movs	r3, #16
   2340e:	18fb      	adds	r3, r7, r3
   23410:	4a75      	ldr	r2, [pc, #468]	; (235e8 <hif_send+0x380>)
   23412:	0019      	movs	r1, r3
   23414:	0010      	movs	r0, r2
   23416:	4b6e      	ldr	r3, [pc, #440]	; (235d0 <hif_send+0x368>)
   23418:	4798      	blx	r3
   2341a:	0003      	movs	r3, r0
   2341c:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   2341e:	231f      	movs	r3, #31
   23420:	18fb      	adds	r3, r7, r3
   23422:	781b      	ldrb	r3, [r3, #0]
   23424:	b25b      	sxtb	r3, r3
   23426:	2b00      	cmp	r3, #0
   23428:	d015      	beq.n	23456 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   2342a:	2300      	movs	r3, #0
   2342c:	613b      	str	r3, [r7, #16]
					goto ERR1;
   2342e:	e0bc      	b.n	235aa <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   23430:	230e      	movs	r3, #14
   23432:	18fb      	adds	r3, r7, r3
   23434:	881b      	ldrh	r3, [r3, #0]
   23436:	b29b      	uxth	r3, r3
   23438:	3301      	adds	r3, #1
   2343a:	b29a      	uxth	r2, r3
   2343c:	230e      	movs	r3, #14
   2343e:	18fb      	adds	r3, r7, r3
   23440:	801a      	strh	r2, [r3, #0]
   23442:	230e      	movs	r3, #14
   23444:	18fb      	adds	r3, r7, r3
   23446:	881b      	ldrh	r3, [r3, #0]
   23448:	b29b      	uxth	r3, r3
   2344a:	4a68      	ldr	r2, [pc, #416]	; (235ec <hif_send+0x384>)
   2344c:	4293      	cmp	r3, r2
   2344e:	d9a7      	bls.n	233a0 <hif_send+0x138>
   23450:	e002      	b.n	23458 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   23452:	46c0      	nop			; (mov r8, r8)
   23454:	e000      	b.n	23458 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   23456:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   23458:	693b      	ldr	r3, [r7, #16]
   2345a:	2b00      	cmp	r3, #0
   2345c:	d100      	bne.n	23460 <hif_send+0x1f8>
   2345e:	e074      	b.n	2354a <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   23460:	693b      	ldr	r3, [r7, #16]
   23462:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   23464:	2318      	movs	r3, #24
   23466:	18fb      	adds	r3, r7, r3
   23468:	885b      	ldrh	r3, [r3, #2]
   2346a:	b29a      	uxth	r2, r3
   2346c:	2318      	movs	r3, #24
   2346e:	18fb      	adds	r3, r7, r3
   23470:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   23472:	68bb      	ldr	r3, [r7, #8]
   23474:	221f      	movs	r2, #31
   23476:	18bc      	adds	r4, r7, r2
   23478:	2218      	movs	r2, #24
   2347a:	18b9      	adds	r1, r7, r2
   2347c:	2208      	movs	r2, #8
   2347e:	0018      	movs	r0, r3
   23480:	4b5b      	ldr	r3, [pc, #364]	; (235f0 <hif_send+0x388>)
   23482:	4798      	blx	r3
   23484:	0003      	movs	r3, r0
   23486:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   23488:	231f      	movs	r3, #31
   2348a:	18fb      	adds	r3, r7, r3
   2348c:	781b      	ldrb	r3, [r3, #0]
   2348e:	b25b      	sxtb	r3, r3
   23490:	2b00      	cmp	r3, #0
   23492:	d000      	beq.n	23496 <hif_send+0x22e>
   23494:	e084      	b.n	235a0 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   23496:	68bb      	ldr	r3, [r7, #8]
   23498:	3308      	adds	r3, #8
   2349a:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   2349c:	683b      	ldr	r3, [r7, #0]
   2349e:	2b00      	cmp	r3, #0
   234a0:	d016      	beq.n	234d0 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   234a2:	68b8      	ldr	r0, [r7, #8]
   234a4:	1d3b      	adds	r3, r7, #4
   234a6:	881a      	ldrh	r2, [r3, #0]
   234a8:	231f      	movs	r3, #31
   234aa:	18fc      	adds	r4, r7, r3
   234ac:	683b      	ldr	r3, [r7, #0]
   234ae:	0019      	movs	r1, r3
   234b0:	4b4f      	ldr	r3, [pc, #316]	; (235f0 <hif_send+0x388>)
   234b2:	4798      	blx	r3
   234b4:	0003      	movs	r3, r0
   234b6:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   234b8:	231f      	movs	r3, #31
   234ba:	18fb      	adds	r3, r7, r3
   234bc:	781b      	ldrb	r3, [r3, #0]
   234be:	b25b      	sxtb	r3, r3
   234c0:	2b00      	cmp	r3, #0
   234c2:	d000      	beq.n	234c6 <hif_send+0x25e>
   234c4:	e06e      	b.n	235a4 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   234c6:	1d3b      	adds	r3, r7, #4
   234c8:	881a      	ldrh	r2, [r3, #0]
   234ca:	68bb      	ldr	r3, [r7, #8]
   234cc:	18d3      	adds	r3, r2, r3
   234ce:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   234d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   234d2:	2b00      	cmp	r3, #0
   234d4:	d021      	beq.n	2351a <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   234d6:	2338      	movs	r3, #56	; 0x38
   234d8:	18fb      	adds	r3, r7, r3
   234da:	881a      	ldrh	r2, [r3, #0]
   234dc:	1d3b      	adds	r3, r7, #4
   234de:	881b      	ldrh	r3, [r3, #0]
   234e0:	1ad3      	subs	r3, r2, r3
   234e2:	001a      	movs	r2, r3
   234e4:	68bb      	ldr	r3, [r7, #8]
   234e6:	18d3      	adds	r3, r2, r3
   234e8:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   234ea:	68b8      	ldr	r0, [r7, #8]
   234ec:	2334      	movs	r3, #52	; 0x34
   234ee:	18fb      	adds	r3, r7, r3
   234f0:	881a      	ldrh	r2, [r3, #0]
   234f2:	231f      	movs	r3, #31
   234f4:	18fc      	adds	r4, r7, r3
   234f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   234f8:	0019      	movs	r1, r3
   234fa:	4b3d      	ldr	r3, [pc, #244]	; (235f0 <hif_send+0x388>)
   234fc:	4798      	blx	r3
   234fe:	0003      	movs	r3, r0
   23500:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   23502:	231f      	movs	r3, #31
   23504:	18fb      	adds	r3, r7, r3
   23506:	781b      	ldrb	r3, [r3, #0]
   23508:	b25b      	sxtb	r3, r3
   2350a:	2b00      	cmp	r3, #0
   2350c:	d14c      	bne.n	235a8 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   2350e:	2334      	movs	r3, #52	; 0x34
   23510:	18fb      	adds	r3, r7, r3
   23512:	881a      	ldrh	r2, [r3, #0]
   23514:	68bb      	ldr	r3, [r7, #8]
   23516:	18d3      	adds	r3, r2, r3
   23518:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   2351a:	693b      	ldr	r3, [r7, #16]
   2351c:	009b      	lsls	r3, r3, #2
   2351e:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   23520:	697b      	ldr	r3, [r7, #20]
   23522:	2202      	movs	r2, #2
   23524:	4313      	orrs	r3, r2
   23526:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   23528:	697b      	ldr	r3, [r7, #20]
   2352a:	221f      	movs	r2, #31
   2352c:	18bc      	adds	r4, r7, r2
   2352e:	4a31      	ldr	r2, [pc, #196]	; (235f4 <hif_send+0x38c>)
   23530:	0019      	movs	r1, r3
   23532:	0010      	movs	r0, r2
   23534:	4b24      	ldr	r3, [pc, #144]	; (235c8 <hif_send+0x360>)
   23536:	4798      	blx	r3
   23538:	0003      	movs	r3, r0
   2353a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   2353c:	231f      	movs	r3, #31
   2353e:	18fb      	adds	r3, r7, r3
   23540:	781b      	ldrb	r3, [r3, #0]
   23542:	b25b      	sxtb	r3, r3
   23544:	2b00      	cmp	r3, #0
   23546:	d01c      	beq.n	23582 <hif_send+0x31a>
   23548:	e02f      	b.n	235aa <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   2354a:	231f      	movs	r3, #31
   2354c:	18fc      	adds	r4, r7, r3
   2354e:	4b2a      	ldr	r3, [pc, #168]	; (235f8 <hif_send+0x390>)
   23550:	4798      	blx	r3
   23552:	0003      	movs	r3, r0
   23554:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   23556:	231f      	movs	r3, #31
   23558:	18fb      	adds	r3, r7, r3
   2355a:	22fd      	movs	r2, #253	; 0xfd
   2355c:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   2355e:	e026      	b.n	235ae <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   23560:	2398      	movs	r3, #152	; 0x98
   23562:	33ff      	adds	r3, #255	; 0xff
   23564:	001a      	movs	r2, r3
   23566:	4925      	ldr	r1, [pc, #148]	; (235fc <hif_send+0x394>)
   23568:	4b25      	ldr	r3, [pc, #148]	; (23600 <hif_send+0x398>)
   2356a:	0018      	movs	r0, r3
   2356c:	4b1a      	ldr	r3, [pc, #104]	; (235d8 <hif_send+0x370>)
   2356e:	4798      	blx	r3
   23570:	4b24      	ldr	r3, [pc, #144]	; (23604 <hif_send+0x39c>)
   23572:	0018      	movs	r0, r3
   23574:	4b18      	ldr	r3, [pc, #96]	; (235d8 <hif_send+0x370>)
   23576:	4798      	blx	r3
   23578:	4b19      	ldr	r3, [pc, #100]	; (235e0 <hif_send+0x378>)
   2357a:	0018      	movs	r0, r3
   2357c:	4b16      	ldr	r3, [pc, #88]	; (235d8 <hif_send+0x370>)
   2357e:	4798      	blx	r3
		goto ERR2;
   23580:	e015      	b.n	235ae <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   23582:	231f      	movs	r3, #31
   23584:	18fc      	adds	r4, r7, r3
   23586:	4b1c      	ldr	r3, [pc, #112]	; (235f8 <hif_send+0x390>)
   23588:	4798      	blx	r3
   2358a:	0003      	movs	r3, r0
   2358c:	7023      	strb	r3, [r4, #0]
	return ret;
   2358e:	231f      	movs	r3, #31
   23590:	18fb      	adds	r3, r7, r3
   23592:	781b      	ldrb	r3, [r3, #0]
   23594:	b25b      	sxtb	r3, r3
   23596:	e00e      	b.n	235b6 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   23598:	46c0      	nop			; (mov r8, r8)
   2359a:	e006      	b.n	235aa <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   2359c:	46c0      	nop			; (mov r8, r8)
   2359e:	e004      	b.n	235aa <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   235a0:	46c0      	nop			; (mov r8, r8)
   235a2:	e002      	b.n	235aa <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   235a4:	46c0      	nop			; (mov r8, r8)
   235a6:	e000      	b.n	235aa <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   235a8:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   235aa:	4b17      	ldr	r3, [pc, #92]	; (23608 <hif_send+0x3a0>)
   235ac:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   235ae:	231f      	movs	r3, #31
   235b0:	18fb      	adds	r3, r7, r3
   235b2:	781b      	ldrb	r3, [r3, #0]
   235b4:	b25b      	sxtb	r3, r3
}
   235b6:	0018      	movs	r0, r3
   235b8:	46bd      	mov	sp, r7
   235ba:	b009      	add	sp, #36	; 0x24
   235bc:	bd90      	pop	{r4, r7, pc}
   235be:	46c0      	nop			; (mov r8, r8)
   235c0:	00023131 	.word	0x00023131
   235c4:	0000108c 	.word	0x0000108c
   235c8:	000250bd 	.word	0x000250bd
   235cc:	00001078 	.word	0x00001078
   235d0:	00025099 	.word	0x00025099
   235d4:	0003b660 	.word	0x0003b660
   235d8:	00020349 	.word	0x00020349
   235dc:	0003b66c 	.word	0x0003b66c
   235e0:	0003b680 	.word	0x0003b680
   235e4:	000227b9 	.word	0x000227b9
   235e8:	00150400 	.word	0x00150400
   235ec:	000003e7 	.word	0x000003e7
   235f0:	00025205 	.word	0x00025205
   235f4:	0000106c 	.word	0x0000106c
   235f8:	000231c9 	.word	0x000231c9
   235fc:	0003b988 	.word	0x0003b988
   23600:	0003b684 	.word	0x0003b684
   23604:	0003b698 	.word	0x0003b698
   23608:	000231a1 	.word	0x000231a1

0002360c <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   2360c:	b590      	push	{r4, r7, lr}
   2360e:	b087      	sub	sp, #28
   23610:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   23612:	230f      	movs	r3, #15
   23614:	18fb      	adds	r3, r7, r3
   23616:	2200      	movs	r2, #0
   23618:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   2361a:	230f      	movs	r3, #15
   2361c:	18fc      	adds	r4, r7, r3
   2361e:	2308      	movs	r3, #8
   23620:	18fb      	adds	r3, r7, r3
   23622:	4adc      	ldr	r2, [pc, #880]	; (23994 <hif_isr+0x388>)
   23624:	0019      	movs	r1, r3
   23626:	0010      	movs	r0, r2
   23628:	4bdb      	ldr	r3, [pc, #876]	; (23998 <hif_isr+0x38c>)
   2362a:	4798      	blx	r3
   2362c:	0003      	movs	r3, r0
   2362e:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   23630:	230f      	movs	r3, #15
   23632:	18fb      	adds	r3, r7, r3
   23634:	781b      	ldrb	r3, [r3, #0]
   23636:	b25b      	sxtb	r3, r3
   23638:	2b00      	cmp	r3, #0
   2363a:	d000      	beq.n	2363e <hif_isr+0x32>
   2363c:	e21e      	b.n	23a7c <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   2363e:	68bb      	ldr	r3, [r7, #8]
   23640:	2201      	movs	r2, #1
   23642:	4013      	ands	r3, r2
   23644:	d100      	bne.n	23648 <hif_isr+0x3c>
   23646:	e204      	b.n	23a52 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   23648:	2000      	movs	r0, #0
   2364a:	4bd4      	ldr	r3, [pc, #848]	; (2399c <hif_isr+0x390>)
   2364c:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   2364e:	68bb      	ldr	r3, [r7, #8]
   23650:	2201      	movs	r2, #1
   23652:	4393      	bics	r3, r2
   23654:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   23656:	68bb      	ldr	r3, [r7, #8]
   23658:	220f      	movs	r2, #15
   2365a:	18bc      	adds	r4, r7, r2
   2365c:	4acd      	ldr	r2, [pc, #820]	; (23994 <hif_isr+0x388>)
   2365e:	0019      	movs	r1, r3
   23660:	0010      	movs	r0, r2
   23662:	4bcf      	ldr	r3, [pc, #828]	; (239a0 <hif_isr+0x394>)
   23664:	4798      	blx	r3
   23666:	0003      	movs	r3, r0
   23668:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2366a:	230f      	movs	r3, #15
   2366c:	18fb      	adds	r3, r7, r3
   2366e:	781b      	ldrb	r3, [r3, #0]
   23670:	b25b      	sxtb	r3, r3
   23672:	2b00      	cmp	r3, #0
   23674:	d000      	beq.n	23678 <hif_isr+0x6c>
   23676:	e210      	b.n	23a9a <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   23678:	4bca      	ldr	r3, [pc, #808]	; (239a4 <hif_isr+0x398>)
   2367a:	2201      	movs	r2, #1
   2367c:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   2367e:	68bb      	ldr	r3, [r7, #8]
   23680:	089b      	lsrs	r3, r3, #2
   23682:	b29a      	uxth	r2, r3
   23684:	230c      	movs	r3, #12
   23686:	18fb      	adds	r3, r7, r3
   23688:	0512      	lsls	r2, r2, #20
   2368a:	0d12      	lsrs	r2, r2, #20
   2368c:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   2368e:	230c      	movs	r3, #12
   23690:	18fb      	adds	r3, r7, r3
   23692:	881b      	ldrh	r3, [r3, #0]
   23694:	2b00      	cmp	r3, #0
   23696:	d100      	bne.n	2369a <hif_isr+0x8e>
   23698:	e1c8      	b.n	23a2c <hif_isr+0x420>
				uint32 address = 0;
   2369a:	2300      	movs	r3, #0
   2369c:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   2369e:	230f      	movs	r3, #15
   236a0:	18fc      	adds	r4, r7, r3
   236a2:	003b      	movs	r3, r7
   236a4:	4ac0      	ldr	r2, [pc, #768]	; (239a8 <hif_isr+0x39c>)
   236a6:	0019      	movs	r1, r3
   236a8:	0010      	movs	r0, r2
   236aa:	4bbb      	ldr	r3, [pc, #748]	; (23998 <hif_isr+0x38c>)
   236ac:	4798      	blx	r3
   236ae:	0003      	movs	r3, r0
   236b0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   236b2:	230f      	movs	r3, #15
   236b4:	18fb      	adds	r3, r7, r3
   236b6:	781b      	ldrb	r3, [r3, #0]
   236b8:	b25b      	sxtb	r3, r3
   236ba:	2b00      	cmp	r3, #0
   236bc:	d012      	beq.n	236e4 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   236be:	23e4      	movs	r3, #228	; 0xe4
   236c0:	005a      	lsls	r2, r3, #1
   236c2:	49ba      	ldr	r1, [pc, #744]	; (239ac <hif_isr+0x3a0>)
   236c4:	4bba      	ldr	r3, [pc, #744]	; (239b0 <hif_isr+0x3a4>)
   236c6:	0018      	movs	r0, r3
   236c8:	4bba      	ldr	r3, [pc, #744]	; (239b4 <hif_isr+0x3a8>)
   236ca:	4798      	blx	r3
   236cc:	4bba      	ldr	r3, [pc, #744]	; (239b8 <hif_isr+0x3ac>)
   236ce:	0018      	movs	r0, r3
   236d0:	4bb8      	ldr	r3, [pc, #736]	; (239b4 <hif_isr+0x3a8>)
   236d2:	4798      	blx	r3
   236d4:	4bb9      	ldr	r3, [pc, #740]	; (239bc <hif_isr+0x3b0>)
   236d6:	0018      	movs	r0, r3
   236d8:	4bb6      	ldr	r3, [pc, #728]	; (239b4 <hif_isr+0x3a8>)
   236da:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   236dc:	2001      	movs	r0, #1
   236de:	4baf      	ldr	r3, [pc, #700]	; (2399c <hif_isr+0x390>)
   236e0:	4798      	blx	r3
					goto ERR1;
   236e2:	e1db      	b.n	23a9c <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   236e4:	683a      	ldr	r2, [r7, #0]
   236e6:	4baf      	ldr	r3, [pc, #700]	; (239a4 <hif_isr+0x398>)
   236e8:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   236ea:	230c      	movs	r3, #12
   236ec:	18fb      	adds	r3, r7, r3
   236ee:	881a      	ldrh	r2, [r3, #0]
   236f0:	4bac      	ldr	r3, [pc, #688]	; (239a4 <hif_isr+0x398>)
   236f2:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   236f4:	683b      	ldr	r3, [r7, #0]
   236f6:	220f      	movs	r2, #15
   236f8:	18bc      	adds	r4, r7, r2
   236fa:	1d39      	adds	r1, r7, #4
   236fc:	2204      	movs	r2, #4
   236fe:	0018      	movs	r0, r3
   23700:	4baf      	ldr	r3, [pc, #700]	; (239c0 <hif_isr+0x3b4>)
   23702:	4798      	blx	r3
   23704:	0003      	movs	r3, r0
   23706:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   23708:	1d3b      	adds	r3, r7, #4
   2370a:	885b      	ldrh	r3, [r3, #2]
   2370c:	b29a      	uxth	r2, r3
   2370e:	1d3b      	adds	r3, r7, #4
   23710:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   23712:	230f      	movs	r3, #15
   23714:	18fb      	adds	r3, r7, r3
   23716:	781b      	ldrb	r3, [r3, #0]
   23718:	b25b      	sxtb	r3, r3
   2371a:	2b00      	cmp	r3, #0
   2371c:	d012      	beq.n	23744 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   2371e:	23e9      	movs	r3, #233	; 0xe9
   23720:	005a      	lsls	r2, r3, #1
   23722:	49a2      	ldr	r1, [pc, #648]	; (239ac <hif_isr+0x3a0>)
   23724:	4ba2      	ldr	r3, [pc, #648]	; (239b0 <hif_isr+0x3a4>)
   23726:	0018      	movs	r0, r3
   23728:	4ba2      	ldr	r3, [pc, #648]	; (239b4 <hif_isr+0x3a8>)
   2372a:	4798      	blx	r3
   2372c:	4ba5      	ldr	r3, [pc, #660]	; (239c4 <hif_isr+0x3b8>)
   2372e:	0018      	movs	r0, r3
   23730:	4ba0      	ldr	r3, [pc, #640]	; (239b4 <hif_isr+0x3a8>)
   23732:	4798      	blx	r3
   23734:	4ba1      	ldr	r3, [pc, #644]	; (239bc <hif_isr+0x3b0>)
   23736:	0018      	movs	r0, r3
   23738:	4b9e      	ldr	r3, [pc, #632]	; (239b4 <hif_isr+0x3a8>)
   2373a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   2373c:	2001      	movs	r0, #1
   2373e:	4b97      	ldr	r3, [pc, #604]	; (2399c <hif_isr+0x390>)
   23740:	4798      	blx	r3
					goto ERR1;
   23742:	e1ab      	b.n	23a9c <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   23744:	1d3b      	adds	r3, r7, #4
   23746:	885b      	ldrh	r3, [r3, #2]
   23748:	b29b      	uxth	r3, r3
   2374a:	220c      	movs	r2, #12
   2374c:	18ba      	adds	r2, r7, r2
   2374e:	8812      	ldrh	r2, [r2, #0]
   23750:	429a      	cmp	r2, r3
   23752:	d02f      	beq.n	237b4 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   23754:	230c      	movs	r3, #12
   23756:	18fb      	adds	r3, r7, r3
   23758:	881b      	ldrh	r3, [r3, #0]
   2375a:	1d3a      	adds	r2, r7, #4
   2375c:	8852      	ldrh	r2, [r2, #2]
   2375e:	b292      	uxth	r2, r2
   23760:	1a9b      	subs	r3, r3, r2
   23762:	2b04      	cmp	r3, #4
   23764:	dd26      	ble.n	237b4 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   23766:	23dc      	movs	r3, #220	; 0xdc
   23768:	33ff      	adds	r3, #255	; 0xff
   2376a:	001a      	movs	r2, r3
   2376c:	498f      	ldr	r1, [pc, #572]	; (239ac <hif_isr+0x3a0>)
   2376e:	4b90      	ldr	r3, [pc, #576]	; (239b0 <hif_isr+0x3a4>)
   23770:	0018      	movs	r0, r3
   23772:	4b90      	ldr	r3, [pc, #576]	; (239b4 <hif_isr+0x3a8>)
   23774:	4798      	blx	r3
   23776:	230c      	movs	r3, #12
   23778:	18fb      	adds	r3, r7, r3
   2377a:	8819      	ldrh	r1, [r3, #0]
   2377c:	1d3b      	adds	r3, r7, #4
   2377e:	885b      	ldrh	r3, [r3, #2]
   23780:	b29b      	uxth	r3, r3
   23782:	001a      	movs	r2, r3
   23784:	1d3b      	adds	r3, r7, #4
   23786:	781b      	ldrb	r3, [r3, #0]
   23788:	b2db      	uxtb	r3, r3
   2378a:	001c      	movs	r4, r3
   2378c:	1d3b      	adds	r3, r7, #4
   2378e:	785b      	ldrb	r3, [r3, #1]
   23790:	b2db      	uxtb	r3, r3
   23792:	488d      	ldr	r0, [pc, #564]	; (239c8 <hif_isr+0x3bc>)
   23794:	9300      	str	r3, [sp, #0]
   23796:	0023      	movs	r3, r4
   23798:	4c86      	ldr	r4, [pc, #536]	; (239b4 <hif_isr+0x3a8>)
   2379a:	47a0      	blx	r4
   2379c:	4b87      	ldr	r3, [pc, #540]	; (239bc <hif_isr+0x3b0>)
   2379e:	0018      	movs	r0, r3
   237a0:	4b84      	ldr	r3, [pc, #528]	; (239b4 <hif_isr+0x3a8>)
   237a2:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   237a4:	2001      	movs	r0, #1
   237a6:	4b7d      	ldr	r3, [pc, #500]	; (2399c <hif_isr+0x390>)
   237a8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   237aa:	230f      	movs	r3, #15
   237ac:	18fb      	adds	r3, r7, r3
   237ae:	22fa      	movs	r2, #250	; 0xfa
   237b0:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   237b2:	e173      	b.n	23a9c <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   237b4:	1d3b      	adds	r3, r7, #4
   237b6:	781b      	ldrb	r3, [r3, #0]
   237b8:	b2db      	uxtb	r3, r3
   237ba:	2b01      	cmp	r3, #1
   237bc:	d122      	bne.n	23804 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   237be:	4b79      	ldr	r3, [pc, #484]	; (239a4 <hif_isr+0x398>)
   237c0:	691b      	ldr	r3, [r3, #16]
   237c2:	2b00      	cmp	r3, #0
   237c4:	d00d      	beq.n	237e2 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   237c6:	4b77      	ldr	r3, [pc, #476]	; (239a4 <hif_isr+0x398>)
   237c8:	691b      	ldr	r3, [r3, #16]
   237ca:	1d3a      	adds	r2, r7, #4
   237cc:	7852      	ldrb	r2, [r2, #1]
   237ce:	b2d0      	uxtb	r0, r2
   237d0:	1d3a      	adds	r2, r7, #4
   237d2:	8852      	ldrh	r2, [r2, #2]
   237d4:	b292      	uxth	r2, r2
   237d6:	3a08      	subs	r2, #8
   237d8:	b291      	uxth	r1, r2
   237da:	683a      	ldr	r2, [r7, #0]
   237dc:	3208      	adds	r2, #8
   237de:	4798      	blx	r3
   237e0:	e102      	b.n	239e8 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   237e2:	23e8      	movs	r3, #232	; 0xe8
   237e4:	33ff      	adds	r3, #255	; 0xff
   237e6:	001a      	movs	r2, r3
   237e8:	4970      	ldr	r1, [pc, #448]	; (239ac <hif_isr+0x3a0>)
   237ea:	4b71      	ldr	r3, [pc, #452]	; (239b0 <hif_isr+0x3a4>)
   237ec:	0018      	movs	r0, r3
   237ee:	4b71      	ldr	r3, [pc, #452]	; (239b4 <hif_isr+0x3a8>)
   237f0:	4798      	blx	r3
   237f2:	4b76      	ldr	r3, [pc, #472]	; (239cc <hif_isr+0x3c0>)
   237f4:	0018      	movs	r0, r3
   237f6:	4b6f      	ldr	r3, [pc, #444]	; (239b4 <hif_isr+0x3a8>)
   237f8:	4798      	blx	r3
   237fa:	4b70      	ldr	r3, [pc, #448]	; (239bc <hif_isr+0x3b0>)
   237fc:	0018      	movs	r0, r3
   237fe:	4b6d      	ldr	r3, [pc, #436]	; (239b4 <hif_isr+0x3a8>)
   23800:	4798      	blx	r3
   23802:	e0f1      	b.n	239e8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   23804:	1d3b      	adds	r3, r7, #4
   23806:	781b      	ldrb	r3, [r3, #0]
   23808:	b2db      	uxtb	r3, r3
   2380a:	2b02      	cmp	r3, #2
   2380c:	d122      	bne.n	23854 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   2380e:	4b65      	ldr	r3, [pc, #404]	; (239a4 <hif_isr+0x398>)
   23810:	695b      	ldr	r3, [r3, #20]
   23812:	2b00      	cmp	r3, #0
   23814:	d00d      	beq.n	23832 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23816:	4b63      	ldr	r3, [pc, #396]	; (239a4 <hif_isr+0x398>)
   23818:	695b      	ldr	r3, [r3, #20]
   2381a:	1d3a      	adds	r2, r7, #4
   2381c:	7852      	ldrb	r2, [r2, #1]
   2381e:	b2d0      	uxtb	r0, r2
   23820:	1d3a      	adds	r2, r7, #4
   23822:	8852      	ldrh	r2, [r2, #2]
   23824:	b292      	uxth	r2, r2
   23826:	3a08      	subs	r2, #8
   23828:	b291      	uxth	r1, r2
   2382a:	683a      	ldr	r2, [r7, #0]
   2382c:	3208      	adds	r2, #8
   2382e:	4798      	blx	r3
   23830:	e0da      	b.n	239e8 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   23832:	23f0      	movs	r3, #240	; 0xf0
   23834:	33ff      	adds	r3, #255	; 0xff
   23836:	001a      	movs	r2, r3
   23838:	495c      	ldr	r1, [pc, #368]	; (239ac <hif_isr+0x3a0>)
   2383a:	4b5d      	ldr	r3, [pc, #372]	; (239b0 <hif_isr+0x3a4>)
   2383c:	0018      	movs	r0, r3
   2383e:	4b5d      	ldr	r3, [pc, #372]	; (239b4 <hif_isr+0x3a8>)
   23840:	4798      	blx	r3
   23842:	4b63      	ldr	r3, [pc, #396]	; (239d0 <hif_isr+0x3c4>)
   23844:	0018      	movs	r0, r3
   23846:	4b5b      	ldr	r3, [pc, #364]	; (239b4 <hif_isr+0x3a8>)
   23848:	4798      	blx	r3
   2384a:	4b5c      	ldr	r3, [pc, #368]	; (239bc <hif_isr+0x3b0>)
   2384c:	0018      	movs	r0, r3
   2384e:	4b59      	ldr	r3, [pc, #356]	; (239b4 <hif_isr+0x3a8>)
   23850:	4798      	blx	r3
   23852:	e0c9      	b.n	239e8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   23854:	1d3b      	adds	r3, r7, #4
   23856:	781b      	ldrb	r3, [r3, #0]
   23858:	b2db      	uxtb	r3, r3
   2385a:	2b04      	cmp	r3, #4
   2385c:	d122      	bne.n	238a4 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   2385e:	4b51      	ldr	r3, [pc, #324]	; (239a4 <hif_isr+0x398>)
   23860:	699b      	ldr	r3, [r3, #24]
   23862:	2b00      	cmp	r3, #0
   23864:	d00d      	beq.n	23882 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23866:	4b4f      	ldr	r3, [pc, #316]	; (239a4 <hif_isr+0x398>)
   23868:	699b      	ldr	r3, [r3, #24]
   2386a:	1d3a      	adds	r2, r7, #4
   2386c:	7852      	ldrb	r2, [r2, #1]
   2386e:	b2d0      	uxtb	r0, r2
   23870:	1d3a      	adds	r2, r7, #4
   23872:	8852      	ldrh	r2, [r2, #2]
   23874:	b292      	uxth	r2, r2
   23876:	3a08      	subs	r2, #8
   23878:	b291      	uxth	r1, r2
   2387a:	683a      	ldr	r2, [r7, #0]
   2387c:	3208      	adds	r2, #8
   2387e:	4798      	blx	r3
   23880:	e0b2      	b.n	239e8 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   23882:	23f8      	movs	r3, #248	; 0xf8
   23884:	33ff      	adds	r3, #255	; 0xff
   23886:	001a      	movs	r2, r3
   23888:	4948      	ldr	r1, [pc, #288]	; (239ac <hif_isr+0x3a0>)
   2388a:	4b49      	ldr	r3, [pc, #292]	; (239b0 <hif_isr+0x3a4>)
   2388c:	0018      	movs	r0, r3
   2388e:	4b49      	ldr	r3, [pc, #292]	; (239b4 <hif_isr+0x3a8>)
   23890:	4798      	blx	r3
   23892:	4b50      	ldr	r3, [pc, #320]	; (239d4 <hif_isr+0x3c8>)
   23894:	0018      	movs	r0, r3
   23896:	4b47      	ldr	r3, [pc, #284]	; (239b4 <hif_isr+0x3a8>)
   23898:	4798      	blx	r3
   2389a:	4b48      	ldr	r3, [pc, #288]	; (239bc <hif_isr+0x3b0>)
   2389c:	0018      	movs	r0, r3
   2389e:	4b45      	ldr	r3, [pc, #276]	; (239b4 <hif_isr+0x3a8>)
   238a0:	4798      	blx	r3
   238a2:	e0a1      	b.n	239e8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   238a4:	1d3b      	adds	r3, r7, #4
   238a6:	781b      	ldrb	r3, [r3, #0]
   238a8:	b2db      	uxtb	r3, r3
   238aa:	2b06      	cmp	r3, #6
   238ac:	d121      	bne.n	238f2 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   238ae:	4b3d      	ldr	r3, [pc, #244]	; (239a4 <hif_isr+0x398>)
   238b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   238b2:	2b00      	cmp	r3, #0
   238b4:	d00d      	beq.n	238d2 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   238b6:	4b3b      	ldr	r3, [pc, #236]	; (239a4 <hif_isr+0x398>)
   238b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   238ba:	1d3a      	adds	r2, r7, #4
   238bc:	7852      	ldrb	r2, [r2, #1]
   238be:	b2d0      	uxtb	r0, r2
   238c0:	1d3a      	adds	r2, r7, #4
   238c2:	8852      	ldrh	r2, [r2, #2]
   238c4:	b292      	uxth	r2, r2
   238c6:	3a08      	subs	r2, #8
   238c8:	b291      	uxth	r1, r2
   238ca:	683a      	ldr	r2, [r7, #0]
   238cc:	3208      	adds	r2, #8
   238ce:	4798      	blx	r3
   238d0:	e08a      	b.n	239e8 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   238d2:	2380      	movs	r3, #128	; 0x80
   238d4:	009a      	lsls	r2, r3, #2
   238d6:	4935      	ldr	r1, [pc, #212]	; (239ac <hif_isr+0x3a0>)
   238d8:	4b35      	ldr	r3, [pc, #212]	; (239b0 <hif_isr+0x3a4>)
   238da:	0018      	movs	r0, r3
   238dc:	4b35      	ldr	r3, [pc, #212]	; (239b4 <hif_isr+0x3a8>)
   238de:	4798      	blx	r3
   238e0:	4b3d      	ldr	r3, [pc, #244]	; (239d8 <hif_isr+0x3cc>)
   238e2:	0018      	movs	r0, r3
   238e4:	4b33      	ldr	r3, [pc, #204]	; (239b4 <hif_isr+0x3a8>)
   238e6:	4798      	blx	r3
   238e8:	4b34      	ldr	r3, [pc, #208]	; (239bc <hif_isr+0x3b0>)
   238ea:	0018      	movs	r0, r3
   238ec:	4b31      	ldr	r3, [pc, #196]	; (239b4 <hif_isr+0x3a8>)
   238ee:	4798      	blx	r3
   238f0:	e07a      	b.n	239e8 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   238f2:	1d3b      	adds	r3, r7, #4
   238f4:	781b      	ldrb	r3, [r3, #0]
   238f6:	b2db      	uxtb	r3, r3
   238f8:	2b07      	cmp	r3, #7
   238fa:	d120      	bne.n	2393e <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   238fc:	4b29      	ldr	r3, [pc, #164]	; (239a4 <hif_isr+0x398>)
   238fe:	69db      	ldr	r3, [r3, #28]
   23900:	2b00      	cmp	r3, #0
   23902:	d00d      	beq.n	23920 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23904:	4b27      	ldr	r3, [pc, #156]	; (239a4 <hif_isr+0x398>)
   23906:	69db      	ldr	r3, [r3, #28]
   23908:	1d3a      	adds	r2, r7, #4
   2390a:	7852      	ldrb	r2, [r2, #1]
   2390c:	b2d0      	uxtb	r0, r2
   2390e:	1d3a      	adds	r2, r7, #4
   23910:	8852      	ldrh	r2, [r2, #2]
   23912:	b292      	uxth	r2, r2
   23914:	3a08      	subs	r2, #8
   23916:	b291      	uxth	r1, r2
   23918:	683a      	ldr	r2, [r7, #0]
   2391a:	3208      	adds	r2, #8
   2391c:	4798      	blx	r3
   2391e:	e063      	b.n	239e8 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   23920:	4a2e      	ldr	r2, [pc, #184]	; (239dc <hif_isr+0x3d0>)
   23922:	4922      	ldr	r1, [pc, #136]	; (239ac <hif_isr+0x3a0>)
   23924:	4b22      	ldr	r3, [pc, #136]	; (239b0 <hif_isr+0x3a4>)
   23926:	0018      	movs	r0, r3
   23928:	4b22      	ldr	r3, [pc, #136]	; (239b4 <hif_isr+0x3a8>)
   2392a:	4798      	blx	r3
   2392c:	4b2c      	ldr	r3, [pc, #176]	; (239e0 <hif_isr+0x3d4>)
   2392e:	0018      	movs	r0, r3
   23930:	4b20      	ldr	r3, [pc, #128]	; (239b4 <hif_isr+0x3a8>)
   23932:	4798      	blx	r3
   23934:	4b21      	ldr	r3, [pc, #132]	; (239bc <hif_isr+0x3b0>)
   23936:	0018      	movs	r0, r3
   23938:	4b1e      	ldr	r3, [pc, #120]	; (239b4 <hif_isr+0x3a8>)
   2393a:	4798      	blx	r3
   2393c:	e054      	b.n	239e8 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   2393e:	1d3b      	adds	r3, r7, #4
   23940:	781b      	ldrb	r3, [r3, #0]
   23942:	b2db      	uxtb	r3, r3
   23944:	2b05      	cmp	r3, #5
   23946:	d111      	bne.n	2396c <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   23948:	4b16      	ldr	r3, [pc, #88]	; (239a4 <hif_isr+0x398>)
   2394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2394c:	2b00      	cmp	r3, #0
   2394e:	d04b      	beq.n	239e8 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23950:	4b14      	ldr	r3, [pc, #80]	; (239a4 <hif_isr+0x398>)
   23952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23954:	1d3a      	adds	r2, r7, #4
   23956:	7852      	ldrb	r2, [r2, #1]
   23958:	b2d0      	uxtb	r0, r2
   2395a:	1d3a      	adds	r2, r7, #4
   2395c:	8852      	ldrh	r2, [r2, #2]
   2395e:	b292      	uxth	r2, r2
   23960:	3a08      	subs	r2, #8
   23962:	b291      	uxth	r1, r2
   23964:	683a      	ldr	r2, [r7, #0]
   23966:	3208      	adds	r2, #8
   23968:	4798      	blx	r3
   2396a:	e03d      	b.n	239e8 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   2396c:	2384      	movs	r3, #132	; 0x84
   2396e:	009a      	lsls	r2, r3, #2
   23970:	490e      	ldr	r1, [pc, #56]	; (239ac <hif_isr+0x3a0>)
   23972:	4b0f      	ldr	r3, [pc, #60]	; (239b0 <hif_isr+0x3a4>)
   23974:	0018      	movs	r0, r3
   23976:	4b0f      	ldr	r3, [pc, #60]	; (239b4 <hif_isr+0x3a8>)
   23978:	4798      	blx	r3
   2397a:	4b1a      	ldr	r3, [pc, #104]	; (239e4 <hif_isr+0x3d8>)
   2397c:	0018      	movs	r0, r3
   2397e:	4b0d      	ldr	r3, [pc, #52]	; (239b4 <hif_isr+0x3a8>)
   23980:	4798      	blx	r3
   23982:	4b0e      	ldr	r3, [pc, #56]	; (239bc <hif_isr+0x3b0>)
   23984:	0018      	movs	r0, r3
   23986:	4b0b      	ldr	r3, [pc, #44]	; (239b4 <hif_isr+0x3a8>)
   23988:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2398a:	230f      	movs	r3, #15
   2398c:	18fb      	adds	r3, r7, r3
   2398e:	22fa      	movs	r2, #250	; 0xfa
   23990:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   23992:	e083      	b.n	23a9c <hif_isr+0x490>
   23994:	00001070 	.word	0x00001070
   23998:	00025099 	.word	0x00025099
   2399c:	0002284d 	.word	0x0002284d
   239a0:	000250bd 	.word	0x000250bd
   239a4:	20005950 	.word	0x20005950
   239a8:	00001084 	.word	0x00001084
   239ac:	0003b994 	.word	0x0003b994
   239b0:	0003b684 	.word	0x0003b684
   239b4:	00020349 	.word	0x00020349
   239b8:	0003b6b8 	.word	0x0003b6b8
   239bc:	0003b680 	.word	0x0003b680
   239c0:	0002510d 	.word	0x0002510d
   239c4:	0003b6e0 	.word	0x0003b6e0
   239c8:	0003b6f8 	.word	0x0003b6f8
   239cc:	0003b738 	.word	0x0003b738
   239d0:	0003b75c 	.word	0x0003b75c
   239d4:	0003b780 	.word	0x0003b780
   239d8:	0003b7a0 	.word	0x0003b7a0
   239dc:	00000207 	.word	0x00000207
   239e0:	0003b7c4 	.word	0x0003b7c4
   239e4:	0003b7e8 	.word	0x0003b7e8
				}
				if(gstrHifCxt.u8HifRXDone)
   239e8:	4b30      	ldr	r3, [pc, #192]	; (23aac <hif_isr+0x4a0>)
   239ea:	789b      	ldrb	r3, [r3, #2]
   239ec:	b2db      	uxtb	r3, r3
   239ee:	2b00      	cmp	r3, #0
   239f0:	d054      	beq.n	23a9c <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   239f2:	4a2f      	ldr	r2, [pc, #188]	; (23ab0 <hif_isr+0x4a4>)
   239f4:	492f      	ldr	r1, [pc, #188]	; (23ab4 <hif_isr+0x4a8>)
   239f6:	4b30      	ldr	r3, [pc, #192]	; (23ab8 <hif_isr+0x4ac>)
   239f8:	0018      	movs	r0, r3
   239fa:	4b30      	ldr	r3, [pc, #192]	; (23abc <hif_isr+0x4b0>)
   239fc:	4798      	blx	r3
   239fe:	1d3b      	adds	r3, r7, #4
   23a00:	781b      	ldrb	r3, [r3, #0]
   23a02:	b2db      	uxtb	r3, r3
   23a04:	0019      	movs	r1, r3
   23a06:	1d3b      	adds	r3, r7, #4
   23a08:	785b      	ldrb	r3, [r3, #1]
   23a0a:	b2db      	uxtb	r3, r3
   23a0c:	001a      	movs	r2, r3
   23a0e:	4b2c      	ldr	r3, [pc, #176]	; (23ac0 <hif_isr+0x4b4>)
   23a10:	0018      	movs	r0, r3
   23a12:	4b2a      	ldr	r3, [pc, #168]	; (23abc <hif_isr+0x4b0>)
   23a14:	4798      	blx	r3
   23a16:	4b2b      	ldr	r3, [pc, #172]	; (23ac4 <hif_isr+0x4b8>)
   23a18:	0018      	movs	r0, r3
   23a1a:	4b28      	ldr	r3, [pc, #160]	; (23abc <hif_isr+0x4b0>)
   23a1c:	4798      	blx	r3
					ret = hif_set_rx_done();
   23a1e:	230f      	movs	r3, #15
   23a20:	18fc      	adds	r4, r7, r3
   23a22:	4b29      	ldr	r3, [pc, #164]	; (23ac8 <hif_isr+0x4bc>)
   23a24:	4798      	blx	r3
   23a26:	0003      	movs	r3, r0
   23a28:	7023      	strb	r3, [r4, #0]
   23a2a:	e037      	b.n	23a9c <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   23a2c:	4a27      	ldr	r2, [pc, #156]	; (23acc <hif_isr+0x4c0>)
   23a2e:	4921      	ldr	r1, [pc, #132]	; (23ab4 <hif_isr+0x4a8>)
   23a30:	4b21      	ldr	r3, [pc, #132]	; (23ab8 <hif_isr+0x4ac>)
   23a32:	0018      	movs	r0, r3
   23a34:	4b21      	ldr	r3, [pc, #132]	; (23abc <hif_isr+0x4b0>)
   23a36:	4798      	blx	r3
   23a38:	4b25      	ldr	r3, [pc, #148]	; (23ad0 <hif_isr+0x4c4>)
   23a3a:	0018      	movs	r0, r3
   23a3c:	4b1f      	ldr	r3, [pc, #124]	; (23abc <hif_isr+0x4b0>)
   23a3e:	4798      	blx	r3
   23a40:	4b20      	ldr	r3, [pc, #128]	; (23ac4 <hif_isr+0x4b8>)
   23a42:	0018      	movs	r0, r3
   23a44:	4b1d      	ldr	r3, [pc, #116]	; (23abc <hif_isr+0x4b0>)
   23a46:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   23a48:	230f      	movs	r3, #15
   23a4a:	18fb      	adds	r3, r7, r3
   23a4c:	22fe      	movs	r2, #254	; 0xfe
   23a4e:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   23a50:	e024      	b.n	23a9c <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   23a52:	4a20      	ldr	r2, [pc, #128]	; (23ad4 <hif_isr+0x4c8>)
   23a54:	4917      	ldr	r1, [pc, #92]	; (23ab4 <hif_isr+0x4a8>)
   23a56:	4b18      	ldr	r3, [pc, #96]	; (23ab8 <hif_isr+0x4ac>)
   23a58:	0018      	movs	r0, r3
   23a5a:	4b18      	ldr	r3, [pc, #96]	; (23abc <hif_isr+0x4b0>)
   23a5c:	4798      	blx	r3
   23a5e:	68ba      	ldr	r2, [r7, #8]
   23a60:	4b1d      	ldr	r3, [pc, #116]	; (23ad8 <hif_isr+0x4cc>)
   23a62:	0011      	movs	r1, r2
   23a64:	0018      	movs	r0, r3
   23a66:	4b15      	ldr	r3, [pc, #84]	; (23abc <hif_isr+0x4b0>)
   23a68:	4798      	blx	r3
   23a6a:	4b16      	ldr	r3, [pc, #88]	; (23ac4 <hif_isr+0x4b8>)
   23a6c:	0018      	movs	r0, r3
   23a6e:	4b13      	ldr	r3, [pc, #76]	; (23abc <hif_isr+0x4b0>)
   23a70:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23a72:	230f      	movs	r3, #15
   23a74:	18fb      	adds	r3, r7, r3
   23a76:	22f4      	movs	r2, #244	; 0xf4
   23a78:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23a7a:	e00f      	b.n	23a9c <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   23a7c:	4a17      	ldr	r2, [pc, #92]	; (23adc <hif_isr+0x4d0>)
   23a7e:	490d      	ldr	r1, [pc, #52]	; (23ab4 <hif_isr+0x4a8>)
   23a80:	4b0d      	ldr	r3, [pc, #52]	; (23ab8 <hif_isr+0x4ac>)
   23a82:	0018      	movs	r0, r3
   23a84:	4b0d      	ldr	r3, [pc, #52]	; (23abc <hif_isr+0x4b0>)
   23a86:	4798      	blx	r3
   23a88:	4b15      	ldr	r3, [pc, #84]	; (23ae0 <hif_isr+0x4d4>)
   23a8a:	0018      	movs	r0, r3
   23a8c:	4b0b      	ldr	r3, [pc, #44]	; (23abc <hif_isr+0x4b0>)
   23a8e:	4798      	blx	r3
   23a90:	4b0c      	ldr	r3, [pc, #48]	; (23ac4 <hif_isr+0x4b8>)
   23a92:	0018      	movs	r0, r3
   23a94:	4b09      	ldr	r3, [pc, #36]	; (23abc <hif_isr+0x4b0>)
   23a96:	4798      	blx	r3
		goto ERR1;
   23a98:	e000      	b.n	23a9c <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   23a9a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23a9c:	230f      	movs	r3, #15
   23a9e:	18fb      	adds	r3, r7, r3
   23aa0:	781b      	ldrb	r3, [r3, #0]
   23aa2:	b25b      	sxtb	r3, r3
}
   23aa4:	0018      	movs	r0, r3
   23aa6:	46bd      	mov	sp, r7
   23aa8:	b005      	add	sp, #20
   23aaa:	bd90      	pop	{r4, r7, pc}
   23aac:	20005950 	.word	0x20005950
   23ab0:	00000216 	.word	0x00000216
   23ab4:	0003b994 	.word	0x0003b994
   23ab8:	0003b684 	.word	0x0003b684
   23abc:	00020349 	.word	0x00020349
   23ac0:	0003b800 	.word	0x0003b800
   23ac4:	0003b680 	.word	0x0003b680
   23ac8:	000230a1 	.word	0x000230a1
   23acc:	0000021d 	.word	0x0000021d
   23ad0:	0003b82c 	.word	0x0003b82c
   23ad4:	00000225 	.word	0x00000225
   23ad8:	0003b840 	.word	0x0003b840
   23adc:	0000022e 	.word	0x0000022e
   23ae0:	0003b85c 	.word	0x0003b85c

00023ae4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   23ae4:	b590      	push	{r4, r7, lr}
   23ae6:	b083      	sub	sp, #12
   23ae8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   23aea:	1dfb      	adds	r3, r7, #7
   23aec:	2200      	movs	r2, #0
   23aee:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   23af0:	4b1c      	ldr	r3, [pc, #112]	; (23b64 <hif_handle_isr+0x80>)
   23af2:	2200      	movs	r2, #0
   23af4:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   23af6:	e024      	b.n	23b42 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   23af8:	4b1a      	ldr	r3, [pc, #104]	; (23b64 <hif_handle_isr+0x80>)
   23afa:	78db      	ldrb	r3, [r3, #3]
   23afc:	b2db      	uxtb	r3, r3
   23afe:	3b01      	subs	r3, #1
   23b00:	b2da      	uxtb	r2, r3
   23b02:	4b18      	ldr	r3, [pc, #96]	; (23b64 <hif_handle_isr+0x80>)
   23b04:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   23b06:	1dfc      	adds	r4, r7, #7
   23b08:	4b17      	ldr	r3, [pc, #92]	; (23b68 <hif_handle_isr+0x84>)
   23b0a:	4798      	blx	r3
   23b0c:	0003      	movs	r3, r0
   23b0e:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   23b10:	1dfb      	adds	r3, r7, #7
   23b12:	781b      	ldrb	r3, [r3, #0]
   23b14:	b25b      	sxtb	r3, r3
   23b16:	2b00      	cmp	r3, #0
   23b18:	d100      	bne.n	23b1c <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   23b1a:	e012      	b.n	23b42 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   23b1c:	4a13      	ldr	r2, [pc, #76]	; (23b6c <hif_handle_isr+0x88>)
   23b1e:	4914      	ldr	r1, [pc, #80]	; (23b70 <hif_handle_isr+0x8c>)
   23b20:	4b14      	ldr	r3, [pc, #80]	; (23b74 <hif_handle_isr+0x90>)
   23b22:	0018      	movs	r0, r3
   23b24:	4b14      	ldr	r3, [pc, #80]	; (23b78 <hif_handle_isr+0x94>)
   23b26:	4798      	blx	r3
   23b28:	1dfb      	adds	r3, r7, #7
   23b2a:	2200      	movs	r2, #0
   23b2c:	569a      	ldrsb	r2, [r3, r2]
   23b2e:	4b13      	ldr	r3, [pc, #76]	; (23b7c <hif_handle_isr+0x98>)
   23b30:	0011      	movs	r1, r2
   23b32:	0018      	movs	r0, r3
   23b34:	4b10      	ldr	r3, [pc, #64]	; (23b78 <hif_handle_isr+0x94>)
   23b36:	4798      	blx	r3
   23b38:	4b11      	ldr	r3, [pc, #68]	; (23b80 <hif_handle_isr+0x9c>)
   23b3a:	0018      	movs	r0, r3
   23b3c:	4b0e      	ldr	r3, [pc, #56]	; (23b78 <hif_handle_isr+0x94>)
   23b3e:	4798      	blx	r3
			ret = hif_isr();
   23b40:	e7e1      	b.n	23b06 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   23b42:	4b08      	ldr	r3, [pc, #32]	; (23b64 <hif_handle_isr+0x80>)
   23b44:	78db      	ldrb	r3, [r3, #3]
   23b46:	b2db      	uxtb	r3, r3
   23b48:	2b00      	cmp	r3, #0
   23b4a:	d004      	beq.n	23b56 <hif_handle_isr+0x72>
   23b4c:	4b05      	ldr	r3, [pc, #20]	; (23b64 <hif_handle_isr+0x80>)
   23b4e:	791b      	ldrb	r3, [r3, #4]
   23b50:	b2db      	uxtb	r3, r3
   23b52:	2b00      	cmp	r3, #0
   23b54:	d0d0      	beq.n	23af8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   23b56:	1dfb      	adds	r3, r7, #7
   23b58:	781b      	ldrb	r3, [r3, #0]
   23b5a:	b25b      	sxtb	r3, r3
}
   23b5c:	0018      	movs	r0, r3
   23b5e:	46bd      	mov	sp, r7
   23b60:	b003      	add	sp, #12
   23b62:	bd90      	pop	{r4, r7, pc}
   23b64:	20005950 	.word	0x20005950
   23b68:	0002360d 	.word	0x0002360d
   23b6c:	00000257 	.word	0x00000257
   23b70:	0003b99c 	.word	0x0003b99c
   23b74:	0003b684 	.word	0x0003b684
   23b78:	00020349 	.word	0x00020349
   23b7c:	0003b880 	.word	0x0003b880
   23b80:	0003b680 	.word	0x0003b680

00023b84 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   23b84:	b590      	push	{r4, r7, lr}
   23b86:	b087      	sub	sp, #28
   23b88:	af00      	add	r7, sp, #0
   23b8a:	60f8      	str	r0, [r7, #12]
   23b8c:	60b9      	str	r1, [r7, #8]
   23b8e:	0019      	movs	r1, r3
   23b90:	1dbb      	adds	r3, r7, #6
   23b92:	801a      	strh	r2, [r3, #0]
   23b94:	1d7b      	adds	r3, r7, #5
   23b96:	1c0a      	adds	r2, r1, #0
   23b98:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23b9a:	2317      	movs	r3, #23
   23b9c:	18fb      	adds	r3, r7, r3
   23b9e:	2200      	movs	r2, #0
   23ba0:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   23ba2:	68fb      	ldr	r3, [r7, #12]
   23ba4:	2b00      	cmp	r3, #0
   23ba6:	d006      	beq.n	23bb6 <hif_receive+0x32>
   23ba8:	68bb      	ldr	r3, [r7, #8]
   23baa:	2b00      	cmp	r3, #0
   23bac:	d003      	beq.n	23bb6 <hif_receive+0x32>
   23bae:	1dbb      	adds	r3, r7, #6
   23bb0:	881b      	ldrh	r3, [r3, #0]
   23bb2:	2b00      	cmp	r3, #0
   23bb4:	d11e      	bne.n	23bf4 <hif_receive+0x70>
	{
		if(isDone)
   23bb6:	1d7b      	adds	r3, r7, #5
   23bb8:	781b      	ldrb	r3, [r3, #0]
   23bba:	2b00      	cmp	r3, #0
   23bbc:	d006      	beq.n	23bcc <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   23bbe:	2317      	movs	r3, #23
   23bc0:	18fc      	adds	r4, r7, r3
   23bc2:	4b45      	ldr	r3, [pc, #276]	; (23cd8 <hif_receive+0x154>)
   23bc4:	4798      	blx	r3
   23bc6:	0003      	movs	r3, r0
   23bc8:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   23bca:	e07c      	b.n	23cc6 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   23bcc:	2317      	movs	r3, #23
   23bce:	18fb      	adds	r3, r7, r3
   23bd0:	22f4      	movs	r2, #244	; 0xf4
   23bd2:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   23bd4:	239e      	movs	r3, #158	; 0x9e
   23bd6:	009a      	lsls	r2, r3, #2
   23bd8:	4940      	ldr	r1, [pc, #256]	; (23cdc <hif_receive+0x158>)
   23bda:	4b41      	ldr	r3, [pc, #260]	; (23ce0 <hif_receive+0x15c>)
   23bdc:	0018      	movs	r0, r3
   23bde:	4b41      	ldr	r3, [pc, #260]	; (23ce4 <hif_receive+0x160>)
   23be0:	4798      	blx	r3
   23be2:	4b41      	ldr	r3, [pc, #260]	; (23ce8 <hif_receive+0x164>)
   23be4:	0018      	movs	r0, r3
   23be6:	4b3f      	ldr	r3, [pc, #252]	; (23ce4 <hif_receive+0x160>)
   23be8:	4798      	blx	r3
   23bea:	4b40      	ldr	r3, [pc, #256]	; (23cec <hif_receive+0x168>)
   23bec:	0018      	movs	r0, r3
   23bee:	4b3d      	ldr	r3, [pc, #244]	; (23ce4 <hif_receive+0x160>)
   23bf0:	4798      	blx	r3
		goto ERR1;
   23bf2:	e068      	b.n	23cc6 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   23bf4:	1dbb      	adds	r3, r7, #6
   23bf6:	881a      	ldrh	r2, [r3, #0]
   23bf8:	4b3d      	ldr	r3, [pc, #244]	; (23cf0 <hif_receive+0x16c>)
   23bfa:	68db      	ldr	r3, [r3, #12]
   23bfc:	429a      	cmp	r2, r3
   23bfe:	d917      	bls.n	23c30 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   23c00:	2317      	movs	r3, #23
   23c02:	18fb      	adds	r3, r7, r3
   23c04:	22f4      	movs	r2, #244	; 0xf4
   23c06:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   23c08:	23a0      	movs	r3, #160	; 0xa0
   23c0a:	009a      	lsls	r2, r3, #2
   23c0c:	4933      	ldr	r1, [pc, #204]	; (23cdc <hif_receive+0x158>)
   23c0e:	4b34      	ldr	r3, [pc, #208]	; (23ce0 <hif_receive+0x15c>)
   23c10:	0018      	movs	r0, r3
   23c12:	4b34      	ldr	r3, [pc, #208]	; (23ce4 <hif_receive+0x160>)
   23c14:	4798      	blx	r3
   23c16:	1dbb      	adds	r3, r7, #6
   23c18:	8819      	ldrh	r1, [r3, #0]
   23c1a:	4b35      	ldr	r3, [pc, #212]	; (23cf0 <hif_receive+0x16c>)
   23c1c:	68da      	ldr	r2, [r3, #12]
   23c1e:	4b35      	ldr	r3, [pc, #212]	; (23cf4 <hif_receive+0x170>)
   23c20:	0018      	movs	r0, r3
   23c22:	4b30      	ldr	r3, [pc, #192]	; (23ce4 <hif_receive+0x160>)
   23c24:	4798      	blx	r3
   23c26:	4b31      	ldr	r3, [pc, #196]	; (23cec <hif_receive+0x168>)
   23c28:	0018      	movs	r0, r3
   23c2a:	4b2e      	ldr	r3, [pc, #184]	; (23ce4 <hif_receive+0x160>)
   23c2c:	4798      	blx	r3
		goto ERR1;
   23c2e:	e04a      	b.n	23cc6 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   23c30:	4b2f      	ldr	r3, [pc, #188]	; (23cf0 <hif_receive+0x16c>)
   23c32:	689a      	ldr	r2, [r3, #8]
   23c34:	68fb      	ldr	r3, [r7, #12]
   23c36:	429a      	cmp	r2, r3
   23c38:	d80a      	bhi.n	23c50 <hif_receive+0xcc>
   23c3a:	1dbb      	adds	r3, r7, #6
   23c3c:	881a      	ldrh	r2, [r3, #0]
   23c3e:	68fb      	ldr	r3, [r7, #12]
   23c40:	18d2      	adds	r2, r2, r3
   23c42:	4b2b      	ldr	r3, [pc, #172]	; (23cf0 <hif_receive+0x16c>)
   23c44:	6899      	ldr	r1, [r3, #8]
   23c46:	4b2a      	ldr	r3, [pc, #168]	; (23cf0 <hif_receive+0x16c>)
   23c48:	68db      	ldr	r3, [r3, #12]
   23c4a:	18cb      	adds	r3, r1, r3
   23c4c:	429a      	cmp	r2, r3
   23c4e:	d912      	bls.n	23c76 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   23c50:	2317      	movs	r3, #23
   23c52:	18fb      	adds	r3, r7, r3
   23c54:	22f4      	movs	r2, #244	; 0xf4
   23c56:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   23c58:	4a27      	ldr	r2, [pc, #156]	; (23cf8 <hif_receive+0x174>)
   23c5a:	4920      	ldr	r1, [pc, #128]	; (23cdc <hif_receive+0x158>)
   23c5c:	4b20      	ldr	r3, [pc, #128]	; (23ce0 <hif_receive+0x15c>)
   23c5e:	0018      	movs	r0, r3
   23c60:	4b20      	ldr	r3, [pc, #128]	; (23ce4 <hif_receive+0x160>)
   23c62:	4798      	blx	r3
   23c64:	4b25      	ldr	r3, [pc, #148]	; (23cfc <hif_receive+0x178>)
   23c66:	0018      	movs	r0, r3
   23c68:	4b1e      	ldr	r3, [pc, #120]	; (23ce4 <hif_receive+0x160>)
   23c6a:	4798      	blx	r3
   23c6c:	4b1f      	ldr	r3, [pc, #124]	; (23cec <hif_receive+0x168>)
   23c6e:	0018      	movs	r0, r3
   23c70:	4b1c      	ldr	r3, [pc, #112]	; (23ce4 <hif_receive+0x160>)
   23c72:	4798      	blx	r3
		goto ERR1;
   23c74:	e027      	b.n	23cc6 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   23c76:	1dbb      	adds	r3, r7, #6
   23c78:	881a      	ldrh	r2, [r3, #0]
   23c7a:	2317      	movs	r3, #23
   23c7c:	18fc      	adds	r4, r7, r3
   23c7e:	68b9      	ldr	r1, [r7, #8]
   23c80:	68fb      	ldr	r3, [r7, #12]
   23c82:	0018      	movs	r0, r3
   23c84:	4b1e      	ldr	r3, [pc, #120]	; (23d00 <hif_receive+0x17c>)
   23c86:	4798      	blx	r3
   23c88:	0003      	movs	r3, r0
   23c8a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23c8c:	2317      	movs	r3, #23
   23c8e:	18fb      	adds	r3, r7, r3
   23c90:	781b      	ldrb	r3, [r3, #0]
   23c92:	b25b      	sxtb	r3, r3
   23c94:	2b00      	cmp	r3, #0
   23c96:	d115      	bne.n	23cc4 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   23c98:	4b15      	ldr	r3, [pc, #84]	; (23cf0 <hif_receive+0x16c>)
   23c9a:	689a      	ldr	r2, [r3, #8]
   23c9c:	4b14      	ldr	r3, [pc, #80]	; (23cf0 <hif_receive+0x16c>)
   23c9e:	68db      	ldr	r3, [r3, #12]
   23ca0:	18d2      	adds	r2, r2, r3
   23ca2:	1dbb      	adds	r3, r7, #6
   23ca4:	8819      	ldrh	r1, [r3, #0]
   23ca6:	68fb      	ldr	r3, [r7, #12]
   23ca8:	18cb      	adds	r3, r1, r3
   23caa:	429a      	cmp	r2, r3
   23cac:	d003      	beq.n	23cb6 <hif_receive+0x132>
   23cae:	1d7b      	adds	r3, r7, #5
   23cb0:	781b      	ldrb	r3, [r3, #0]
   23cb2:	2b00      	cmp	r3, #0
   23cb4:	d007      	beq.n	23cc6 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   23cb6:	2317      	movs	r3, #23
   23cb8:	18fc      	adds	r4, r7, r3
   23cba:	4b07      	ldr	r3, [pc, #28]	; (23cd8 <hif_receive+0x154>)
   23cbc:	4798      	blx	r3
   23cbe:	0003      	movs	r3, r0
   23cc0:	7023      	strb	r3, [r4, #0]
   23cc2:	e000      	b.n	23cc6 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   23cc4:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23cc6:	2317      	movs	r3, #23
   23cc8:	18fb      	adds	r3, r7, r3
   23cca:	781b      	ldrb	r3, [r3, #0]
   23ccc:	b25b      	sxtb	r3, r3
}
   23cce:	0018      	movs	r0, r3
   23cd0:	46bd      	mov	sp, r7
   23cd2:	b007      	add	sp, #28
   23cd4:	bd90      	pop	{r4, r7, pc}
   23cd6:	46c0      	nop			; (mov r8, r8)
   23cd8:	000230a1 	.word	0x000230a1
   23cdc:	0003b9ac 	.word	0x0003b9ac
   23ce0:	0003b684 	.word	0x0003b684
   23ce4:	00020349 	.word	0x00020349
   23ce8:	0003b8b0 	.word	0x0003b8b0
   23cec:	0003b680 	.word	0x0003b680
   23cf0:	20005950 	.word	0x20005950
   23cf4:	0003b8d0 	.word	0x0003b8d0
   23cf8:	00000286 	.word	0x00000286
   23cfc:	0003b918 	.word	0x0003b918
   23d00:	0002510d 	.word	0x0002510d

00023d04 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   23d04:	b580      	push	{r7, lr}
   23d06:	b084      	sub	sp, #16
   23d08:	af00      	add	r7, sp, #0
   23d0a:	0002      	movs	r2, r0
   23d0c:	6039      	str	r1, [r7, #0]
   23d0e:	1dfb      	adds	r3, r7, #7
   23d10:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23d12:	230f      	movs	r3, #15
   23d14:	18fb      	adds	r3, r7, r3
   23d16:	2200      	movs	r2, #0
   23d18:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   23d1a:	1dfb      	adds	r3, r7, #7
   23d1c:	781b      	ldrb	r3, [r3, #0]
   23d1e:	2b07      	cmp	r3, #7
   23d20:	d820      	bhi.n	23d64 <hif_register_cb+0x60>
   23d22:	009a      	lsls	r2, r3, #2
   23d24:	4b1e      	ldr	r3, [pc, #120]	; (23da0 <hif_register_cb+0x9c>)
   23d26:	18d3      	adds	r3, r2, r3
   23d28:	681b      	ldr	r3, [r3, #0]
   23d2a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   23d2c:	4b1d      	ldr	r3, [pc, #116]	; (23da4 <hif_register_cb+0xa0>)
   23d2e:	683a      	ldr	r2, [r7, #0]
   23d30:	615a      	str	r2, [r3, #20]
			break;
   23d32:	e02d      	b.n	23d90 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   23d34:	4b1b      	ldr	r3, [pc, #108]	; (23da4 <hif_register_cb+0xa0>)
   23d36:	683a      	ldr	r2, [r7, #0]
   23d38:	611a      	str	r2, [r3, #16]
			break;
   23d3a:	e029      	b.n	23d90 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   23d3c:	4b19      	ldr	r3, [pc, #100]	; (23da4 <hif_register_cb+0xa0>)
   23d3e:	683a      	ldr	r2, [r7, #0]
   23d40:	619a      	str	r2, [r3, #24]
			break;
   23d42:	e025      	b.n	23d90 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   23d44:	4b17      	ldr	r3, [pc, #92]	; (23da4 <hif_register_cb+0xa0>)
   23d46:	683a      	ldr	r2, [r7, #0]
   23d48:	621a      	str	r2, [r3, #32]
			break;
   23d4a:	e021      	b.n	23d90 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   23d4c:	4b15      	ldr	r3, [pc, #84]	; (23da4 <hif_register_cb+0xa0>)
   23d4e:	683a      	ldr	r2, [r7, #0]
   23d50:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   23d52:	e01d      	b.n	23d90 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   23d54:	4b13      	ldr	r3, [pc, #76]	; (23da4 <hif_register_cb+0xa0>)
   23d56:	683a      	ldr	r2, [r7, #0]
   23d58:	61da      	str	r2, [r3, #28]
			break;
   23d5a:	e019      	b.n	23d90 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   23d5c:	4b11      	ldr	r3, [pc, #68]	; (23da4 <hif_register_cb+0xa0>)
   23d5e:	683a      	ldr	r2, [r7, #0]
   23d60:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   23d62:	e015      	b.n	23d90 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   23d64:	4a10      	ldr	r2, [pc, #64]	; (23da8 <hif_register_cb+0xa4>)
   23d66:	4911      	ldr	r1, [pc, #68]	; (23dac <hif_register_cb+0xa8>)
   23d68:	4b11      	ldr	r3, [pc, #68]	; (23db0 <hif_register_cb+0xac>)
   23d6a:	0018      	movs	r0, r3
   23d6c:	4b11      	ldr	r3, [pc, #68]	; (23db4 <hif_register_cb+0xb0>)
   23d6e:	4798      	blx	r3
   23d70:	1dfb      	adds	r3, r7, #7
   23d72:	781a      	ldrb	r2, [r3, #0]
   23d74:	4b10      	ldr	r3, [pc, #64]	; (23db8 <hif_register_cb+0xb4>)
   23d76:	0011      	movs	r1, r2
   23d78:	0018      	movs	r0, r3
   23d7a:	4b0e      	ldr	r3, [pc, #56]	; (23db4 <hif_register_cb+0xb0>)
   23d7c:	4798      	blx	r3
   23d7e:	4b0f      	ldr	r3, [pc, #60]	; (23dbc <hif_register_cb+0xb8>)
   23d80:	0018      	movs	r0, r3
   23d82:	4b0c      	ldr	r3, [pc, #48]	; (23db4 <hif_register_cb+0xb0>)
   23d84:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23d86:	230f      	movs	r3, #15
   23d88:	18fb      	adds	r3, r7, r3
   23d8a:	22f4      	movs	r2, #244	; 0xf4
   23d8c:	701a      	strb	r2, [r3, #0]
			break;
   23d8e:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   23d90:	230f      	movs	r3, #15
   23d92:	18fb      	adds	r3, r7, r3
   23d94:	781b      	ldrb	r3, [r3, #0]
   23d96:	b25b      	sxtb	r3, r3
}
   23d98:	0018      	movs	r0, r3
   23d9a:	46bd      	mov	sp, r7
   23d9c:	b004      	add	sp, #16
   23d9e:	bd80      	pop	{r7, pc}
   23da0:	0003b968 	.word	0x0003b968
   23da4:	20005950 	.word	0x20005950
   23da8:	000002be 	.word	0x000002be
   23dac:	0003b9b8 	.word	0x0003b9b8
   23db0:	0003b684 	.word	0x0003b684
   23db4:	00020349 	.word	0x00020349
   23db8:	0003b95c 	.word	0x0003b95c
   23dbc:	0003b680 	.word	0x0003b680

00023dc0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   23dc0:	b590      	push	{r4, r7, lr}
   23dc2:	b0af      	sub	sp, #188	; 0xbc
   23dc4:	af02      	add	r7, sp, #8
   23dc6:	603a      	str	r2, [r7, #0]
   23dc8:	1dfb      	adds	r3, r7, #7
   23dca:	1c02      	adds	r2, r0, #0
   23dcc:	701a      	strb	r2, [r3, #0]
   23dce:	1d3b      	adds	r3, r7, #4
   23dd0:	1c0a      	adds	r2, r1, #0
   23dd2:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   23dd4:	1dfb      	adds	r3, r7, #7
   23dd6:	781b      	ldrb	r3, [r3, #0]
   23dd8:	2b2c      	cmp	r3, #44	; 0x2c
   23dda:	d116      	bne.n	23e0a <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   23ddc:	23a4      	movs	r3, #164	; 0xa4
   23dde:	18f9      	adds	r1, r7, r3
   23de0:	6838      	ldr	r0, [r7, #0]
   23de2:	2300      	movs	r3, #0
   23de4:	2204      	movs	r2, #4
   23de6:	4cca      	ldr	r4, [pc, #808]	; (24110 <m2m_wifi_cb+0x350>)
   23de8:	47a0      	blx	r4
   23dea:	1e03      	subs	r3, r0, #0
   23dec:	d000      	beq.n	23df0 <m2m_wifi_cb+0x30>
   23dee:	e1b4      	b.n	2415a <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   23df0:	4bc8      	ldr	r3, [pc, #800]	; (24114 <m2m_wifi_cb+0x354>)
   23df2:	681b      	ldr	r3, [r3, #0]
   23df4:	2b00      	cmp	r3, #0
   23df6:	d100      	bne.n	23dfa <m2m_wifi_cb+0x3a>
   23df8:	e1af      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   23dfa:	4bc6      	ldr	r3, [pc, #792]	; (24114 <m2m_wifi_cb+0x354>)
   23dfc:	681b      	ldr	r3, [r3, #0]
   23dfe:	22a4      	movs	r2, #164	; 0xa4
   23e00:	18ba      	adds	r2, r7, r2
   23e02:	0011      	movs	r1, r2
   23e04:	202c      	movs	r0, #44	; 0x2c
   23e06:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   23e08:	e1a7      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   23e0a:	1dfb      	adds	r3, r7, #7
   23e0c:	781b      	ldrb	r3, [r3, #0]
   23e0e:	2b1b      	cmp	r3, #27
   23e10:	d116      	bne.n	23e40 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   23e12:	239c      	movs	r3, #156	; 0x9c
   23e14:	18f9      	adds	r1, r7, r3
   23e16:	6838      	ldr	r0, [r7, #0]
   23e18:	2300      	movs	r3, #0
   23e1a:	2208      	movs	r2, #8
   23e1c:	4cbc      	ldr	r4, [pc, #752]	; (24110 <m2m_wifi_cb+0x350>)
   23e1e:	47a0      	blx	r4
   23e20:	1e03      	subs	r3, r0, #0
   23e22:	d000      	beq.n	23e26 <m2m_wifi_cb+0x66>
   23e24:	e199      	b.n	2415a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23e26:	4bbb      	ldr	r3, [pc, #748]	; (24114 <m2m_wifi_cb+0x354>)
   23e28:	681b      	ldr	r3, [r3, #0]
   23e2a:	2b00      	cmp	r3, #0
   23e2c:	d100      	bne.n	23e30 <m2m_wifi_cb+0x70>
   23e2e:	e194      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   23e30:	4bb8      	ldr	r3, [pc, #736]	; (24114 <m2m_wifi_cb+0x354>)
   23e32:	681b      	ldr	r3, [r3, #0]
   23e34:	229c      	movs	r2, #156	; 0x9c
   23e36:	18ba      	adds	r2, r7, r2
   23e38:	0011      	movs	r1, r2
   23e3a:	201b      	movs	r0, #27
   23e3c:	4798      	blx	r3
}
   23e3e:	e18c      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   23e40:	1dfb      	adds	r3, r7, #7
   23e42:	781b      	ldrb	r3, [r3, #0]
   23e44:	2b06      	cmp	r3, #6
   23e46:	d116      	bne.n	23e76 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   23e48:	230c      	movs	r3, #12
   23e4a:	18f9      	adds	r1, r7, r3
   23e4c:	6838      	ldr	r0, [r7, #0]
   23e4e:	2301      	movs	r3, #1
   23e50:	2230      	movs	r2, #48	; 0x30
   23e52:	4caf      	ldr	r4, [pc, #700]	; (24110 <m2m_wifi_cb+0x350>)
   23e54:	47a0      	blx	r4
   23e56:	1e03      	subs	r3, r0, #0
   23e58:	d000      	beq.n	23e5c <m2m_wifi_cb+0x9c>
   23e5a:	e17e      	b.n	2415a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   23e5c:	4bad      	ldr	r3, [pc, #692]	; (24114 <m2m_wifi_cb+0x354>)
   23e5e:	681b      	ldr	r3, [r3, #0]
   23e60:	2b00      	cmp	r3, #0
   23e62:	d100      	bne.n	23e66 <m2m_wifi_cb+0xa6>
   23e64:	e179      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   23e66:	4bab      	ldr	r3, [pc, #684]	; (24114 <m2m_wifi_cb+0x354>)
   23e68:	681b      	ldr	r3, [r3, #0]
   23e6a:	220c      	movs	r2, #12
   23e6c:	18ba      	adds	r2, r7, r2
   23e6e:	0011      	movs	r1, r2
   23e70:	2006      	movs	r0, #6
   23e72:	4798      	blx	r3
}
   23e74:	e171      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   23e76:	1dfb      	adds	r3, r7, #7
   23e78:	781b      	ldrb	r3, [r3, #0]
   23e7a:	2b0e      	cmp	r3, #14
   23e7c:	d100      	bne.n	23e80 <m2m_wifi_cb+0xc0>
   23e7e:	e16c      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   23e80:	1dfb      	adds	r3, r7, #7
   23e82:	781b      	ldrb	r3, [r3, #0]
   23e84:	2b32      	cmp	r3, #50	; 0x32
   23e86:	d116      	bne.n	23eb6 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   23e88:	2384      	movs	r3, #132	; 0x84
   23e8a:	18f9      	adds	r1, r7, r3
   23e8c:	6838      	ldr	r0, [r7, #0]
   23e8e:	2300      	movs	r3, #0
   23e90:	2218      	movs	r2, #24
   23e92:	4c9f      	ldr	r4, [pc, #636]	; (24110 <m2m_wifi_cb+0x350>)
   23e94:	47a0      	blx	r4
   23e96:	1e03      	subs	r3, r0, #0
   23e98:	d000      	beq.n	23e9c <m2m_wifi_cb+0xdc>
   23e9a:	e15e      	b.n	2415a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23e9c:	4b9d      	ldr	r3, [pc, #628]	; (24114 <m2m_wifi_cb+0x354>)
   23e9e:	681b      	ldr	r3, [r3, #0]
   23ea0:	2b00      	cmp	r3, #0
   23ea2:	d100      	bne.n	23ea6 <m2m_wifi_cb+0xe6>
   23ea4:	e159      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   23ea6:	4b9b      	ldr	r3, [pc, #620]	; (24114 <m2m_wifi_cb+0x354>)
   23ea8:	681b      	ldr	r3, [r3, #0]
   23eaa:	2284      	movs	r2, #132	; 0x84
   23eac:	18ba      	adds	r2, r7, r2
   23eae:	0011      	movs	r1, r2
   23eb0:	2032      	movs	r0, #50	; 0x32
   23eb2:	4798      	blx	r3
}
   23eb4:	e151      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   23eb6:	1dfb      	adds	r3, r7, #7
   23eb8:	781b      	ldrb	r3, [r3, #0]
   23eba:	2b2f      	cmp	r3, #47	; 0x2f
   23ebc:	d11d      	bne.n	23efa <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   23ebe:	230c      	movs	r3, #12
   23ec0:	18fb      	adds	r3, r7, r3
   23ec2:	2264      	movs	r2, #100	; 0x64
   23ec4:	2100      	movs	r1, #0
   23ec6:	0018      	movs	r0, r3
   23ec8:	4b93      	ldr	r3, [pc, #588]	; (24118 <m2m_wifi_cb+0x358>)
   23eca:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   23ecc:	230c      	movs	r3, #12
   23ece:	18f9      	adds	r1, r7, r3
   23ed0:	6838      	ldr	r0, [r7, #0]
   23ed2:	2300      	movs	r3, #0
   23ed4:	2264      	movs	r2, #100	; 0x64
   23ed6:	4c8e      	ldr	r4, [pc, #568]	; (24110 <m2m_wifi_cb+0x350>)
   23ed8:	47a0      	blx	r4
   23eda:	1e03      	subs	r3, r0, #0
   23edc:	d000      	beq.n	23ee0 <m2m_wifi_cb+0x120>
   23ede:	e13c      	b.n	2415a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23ee0:	4b8c      	ldr	r3, [pc, #560]	; (24114 <m2m_wifi_cb+0x354>)
   23ee2:	681b      	ldr	r3, [r3, #0]
   23ee4:	2b00      	cmp	r3, #0
   23ee6:	d100      	bne.n	23eea <m2m_wifi_cb+0x12a>
   23ee8:	e137      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   23eea:	4b8a      	ldr	r3, [pc, #552]	; (24114 <m2m_wifi_cb+0x354>)
   23eec:	681b      	ldr	r3, [r3, #0]
   23eee:	220c      	movs	r2, #12
   23ef0:	18ba      	adds	r2, r7, r2
   23ef2:	0011      	movs	r1, r2
   23ef4:	202f      	movs	r0, #47	; 0x2f
   23ef6:	4798      	blx	r3
}
   23ef8:	e12f      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   23efa:	1dfb      	adds	r3, r7, #7
   23efc:	781b      	ldrb	r3, [r3, #0]
   23efe:	2b34      	cmp	r3, #52	; 0x34
   23f00:	d137      	bne.n	23f72 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   23f02:	2380      	movs	r3, #128	; 0x80
   23f04:	18f9      	adds	r1, r7, r3
   23f06:	6838      	ldr	r0, [r7, #0]
   23f08:	2300      	movs	r3, #0
   23f0a:	2204      	movs	r2, #4
   23f0c:	4c80      	ldr	r4, [pc, #512]	; (24110 <m2m_wifi_cb+0x350>)
   23f0e:	47a0      	blx	r4
   23f10:	1e03      	subs	r3, r0, #0
   23f12:	d000      	beq.n	23f16 <m2m_wifi_cb+0x156>
   23f14:	e121      	b.n	2415a <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   23f16:	4b81      	ldr	r3, [pc, #516]	; (2411c <m2m_wifi_cb+0x35c>)
   23f18:	0018      	movs	r0, r3
   23f1a:	4b81      	ldr	r3, [pc, #516]	; (24120 <m2m_wifi_cb+0x360>)
   23f1c:	4798      	blx	r3
   23f1e:	2380      	movs	r3, #128	; 0x80
   23f20:	18fb      	adds	r3, r7, r3
   23f22:	681b      	ldr	r3, [r3, #0]
   23f24:	0e1b      	lsrs	r3, r3, #24
   23f26:	b2db      	uxtb	r3, r3
   23f28:	0019      	movs	r1, r3
   23f2a:	2380      	movs	r3, #128	; 0x80
   23f2c:	18fb      	adds	r3, r7, r3
   23f2e:	681b      	ldr	r3, [r3, #0]
   23f30:	0c1b      	lsrs	r3, r3, #16
   23f32:	b2db      	uxtb	r3, r3
   23f34:	001a      	movs	r2, r3
   23f36:	2380      	movs	r3, #128	; 0x80
   23f38:	18fb      	adds	r3, r7, r3
   23f3a:	681b      	ldr	r3, [r3, #0]
   23f3c:	0a1b      	lsrs	r3, r3, #8
   23f3e:	b2db      	uxtb	r3, r3
   23f40:	001c      	movs	r4, r3
   23f42:	2380      	movs	r3, #128	; 0x80
   23f44:	18fb      	adds	r3, r7, r3
   23f46:	681b      	ldr	r3, [r3, #0]
   23f48:	b2db      	uxtb	r3, r3
   23f4a:	4876      	ldr	r0, [pc, #472]	; (24124 <m2m_wifi_cb+0x364>)
   23f4c:	9300      	str	r3, [sp, #0]
   23f4e:	0023      	movs	r3, r4
   23f50:	4c73      	ldr	r4, [pc, #460]	; (24120 <m2m_wifi_cb+0x360>)
   23f52:	47a0      	blx	r4
   23f54:	4b74      	ldr	r3, [pc, #464]	; (24128 <m2m_wifi_cb+0x368>)
   23f56:	0018      	movs	r0, r3
   23f58:	4b71      	ldr	r3, [pc, #452]	; (24120 <m2m_wifi_cb+0x360>)
   23f5a:	4798      	blx	r3
			if (gpfAppWifiCb)
   23f5c:	4b6d      	ldr	r3, [pc, #436]	; (24114 <m2m_wifi_cb+0x354>)
   23f5e:	681b      	ldr	r3, [r3, #0]
   23f60:	2b00      	cmp	r3, #0
   23f62:	d100      	bne.n	23f66 <m2m_wifi_cb+0x1a6>
   23f64:	e0f9      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   23f66:	4b6b      	ldr	r3, [pc, #428]	; (24114 <m2m_wifi_cb+0x354>)
   23f68:	681b      	ldr	r3, [r3, #0]
   23f6a:	2100      	movs	r1, #0
   23f6c:	2034      	movs	r0, #52	; 0x34
   23f6e:	4798      	blx	r3
}
   23f70:	e0f3      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   23f72:	1dfb      	adds	r3, r7, #7
   23f74:	781b      	ldrb	r3, [r3, #0]
   23f76:	2b11      	cmp	r3, #17
   23f78:	d11e      	bne.n	23fb8 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   23f7a:	4b6c      	ldr	r3, [pc, #432]	; (2412c <m2m_wifi_cb+0x36c>)
   23f7c:	2200      	movs	r2, #0
   23f7e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   23f80:	237c      	movs	r3, #124	; 0x7c
   23f82:	18f9      	adds	r1, r7, r3
   23f84:	6838      	ldr	r0, [r7, #0]
   23f86:	2300      	movs	r3, #0
   23f88:	2204      	movs	r2, #4
   23f8a:	4c61      	ldr	r4, [pc, #388]	; (24110 <m2m_wifi_cb+0x350>)
   23f8c:	47a0      	blx	r4
   23f8e:	1e03      	subs	r3, r0, #0
   23f90:	d000      	beq.n	23f94 <m2m_wifi_cb+0x1d4>
   23f92:	e0e2      	b.n	2415a <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   23f94:	237c      	movs	r3, #124	; 0x7c
   23f96:	18fb      	adds	r3, r7, r3
   23f98:	781a      	ldrb	r2, [r3, #0]
   23f9a:	4b65      	ldr	r3, [pc, #404]	; (24130 <m2m_wifi_cb+0x370>)
   23f9c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   23f9e:	4b5d      	ldr	r3, [pc, #372]	; (24114 <m2m_wifi_cb+0x354>)
   23fa0:	681b      	ldr	r3, [r3, #0]
   23fa2:	2b00      	cmp	r3, #0
   23fa4:	d100      	bne.n	23fa8 <m2m_wifi_cb+0x1e8>
   23fa6:	e0d8      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   23fa8:	4b5a      	ldr	r3, [pc, #360]	; (24114 <m2m_wifi_cb+0x354>)
   23faa:	681b      	ldr	r3, [r3, #0]
   23fac:	227c      	movs	r2, #124	; 0x7c
   23fae:	18ba      	adds	r2, r7, r2
   23fb0:	0011      	movs	r1, r2
   23fb2:	2011      	movs	r0, #17
   23fb4:	4798      	blx	r3
}
   23fb6:	e0d0      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   23fb8:	1dfb      	adds	r3, r7, #7
   23fba:	781b      	ldrb	r3, [r3, #0]
   23fbc:	2b13      	cmp	r3, #19
   23fbe:	d116      	bne.n	23fee <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   23fc0:	230c      	movs	r3, #12
   23fc2:	18f9      	adds	r1, r7, r3
   23fc4:	6838      	ldr	r0, [r7, #0]
   23fc6:	2300      	movs	r3, #0
   23fc8:	222c      	movs	r2, #44	; 0x2c
   23fca:	4c51      	ldr	r4, [pc, #324]	; (24110 <m2m_wifi_cb+0x350>)
   23fcc:	47a0      	blx	r4
   23fce:	1e03      	subs	r3, r0, #0
   23fd0:	d000      	beq.n	23fd4 <m2m_wifi_cb+0x214>
   23fd2:	e0c2      	b.n	2415a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23fd4:	4b4f      	ldr	r3, [pc, #316]	; (24114 <m2m_wifi_cb+0x354>)
   23fd6:	681b      	ldr	r3, [r3, #0]
   23fd8:	2b00      	cmp	r3, #0
   23fda:	d100      	bne.n	23fde <m2m_wifi_cb+0x21e>
   23fdc:	e0bd      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   23fde:	4b4d      	ldr	r3, [pc, #308]	; (24114 <m2m_wifi_cb+0x354>)
   23fe0:	681b      	ldr	r3, [r3, #0]
   23fe2:	220c      	movs	r2, #12
   23fe4:	18ba      	adds	r2, r7, r2
   23fe6:	0011      	movs	r1, r2
   23fe8:	2013      	movs	r0, #19
   23fea:	4798      	blx	r3
}
   23fec:	e0b5      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   23fee:	1dfb      	adds	r3, r7, #7
   23ff0:	781b      	ldrb	r3, [r3, #0]
   23ff2:	2b04      	cmp	r3, #4
   23ff4:	d116      	bne.n	24024 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   23ff6:	23a8      	movs	r3, #168	; 0xa8
   23ff8:	18f9      	adds	r1, r7, r3
   23ffa:	6838      	ldr	r0, [r7, #0]
   23ffc:	2300      	movs	r3, #0
   23ffe:	2204      	movs	r2, #4
   24000:	4c43      	ldr	r4, [pc, #268]	; (24110 <m2m_wifi_cb+0x350>)
   24002:	47a0      	blx	r4
   24004:	1e03      	subs	r3, r0, #0
   24006:	d000      	beq.n	2400a <m2m_wifi_cb+0x24a>
   24008:	e0a7      	b.n	2415a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2400a:	4b42      	ldr	r3, [pc, #264]	; (24114 <m2m_wifi_cb+0x354>)
   2400c:	681b      	ldr	r3, [r3, #0]
   2400e:	2b00      	cmp	r3, #0
   24010:	d100      	bne.n	24014 <m2m_wifi_cb+0x254>
   24012:	e0a2      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   24014:	4b3f      	ldr	r3, [pc, #252]	; (24114 <m2m_wifi_cb+0x354>)
   24016:	681b      	ldr	r3, [r3, #0]
   24018:	22a8      	movs	r2, #168	; 0xa8
   2401a:	18ba      	adds	r2, r7, r2
   2401c:	0011      	movs	r1, r2
   2401e:	2004      	movs	r0, #4
   24020:	4798      	blx	r3
}
   24022:	e09a      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   24024:	1dfb      	adds	r3, r7, #7
   24026:	781b      	ldrb	r3, [r3, #0]
   24028:	2b65      	cmp	r3, #101	; 0x65
   2402a:	d116      	bne.n	2405a <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2402c:	23a8      	movs	r3, #168	; 0xa8
   2402e:	18f9      	adds	r1, r7, r3
   24030:	6838      	ldr	r0, [r7, #0]
   24032:	2300      	movs	r3, #0
   24034:	2204      	movs	r2, #4
   24036:	4c36      	ldr	r4, [pc, #216]	; (24110 <m2m_wifi_cb+0x350>)
   24038:	47a0      	blx	r4
   2403a:	1e03      	subs	r3, r0, #0
   2403c:	d000      	beq.n	24040 <m2m_wifi_cb+0x280>
   2403e:	e08c      	b.n	2415a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24040:	4b34      	ldr	r3, [pc, #208]	; (24114 <m2m_wifi_cb+0x354>)
   24042:	681b      	ldr	r3, [r3, #0]
   24044:	2b00      	cmp	r3, #0
   24046:	d100      	bne.n	2404a <m2m_wifi_cb+0x28a>
   24048:	e087      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2404a:	4b32      	ldr	r3, [pc, #200]	; (24114 <m2m_wifi_cb+0x354>)
   2404c:	681b      	ldr	r3, [r3, #0]
   2404e:	22a8      	movs	r2, #168	; 0xa8
   24050:	18ba      	adds	r2, r7, r2
   24052:	0011      	movs	r1, r2
   24054:	2065      	movs	r0, #101	; 0x65
   24056:	4798      	blx	r3
}
   24058:	e07f      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2405a:	1dfb      	adds	r3, r7, #7
   2405c:	781b      	ldrb	r3, [r3, #0]
   2405e:	2b09      	cmp	r3, #9
   24060:	d116      	bne.n	24090 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   24062:	230c      	movs	r3, #12
   24064:	18f9      	adds	r1, r7, r3
   24066:	6838      	ldr	r0, [r7, #0]
   24068:	2301      	movs	r3, #1
   2406a:	2264      	movs	r2, #100	; 0x64
   2406c:	4c28      	ldr	r4, [pc, #160]	; (24110 <m2m_wifi_cb+0x350>)
   2406e:	47a0      	blx	r4
   24070:	1e03      	subs	r3, r0, #0
   24072:	d000      	beq.n	24076 <m2m_wifi_cb+0x2b6>
   24074:	e071      	b.n	2415a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   24076:	4b27      	ldr	r3, [pc, #156]	; (24114 <m2m_wifi_cb+0x354>)
   24078:	681b      	ldr	r3, [r3, #0]
   2407a:	2b00      	cmp	r3, #0
   2407c:	d100      	bne.n	24080 <m2m_wifi_cb+0x2c0>
   2407e:	e06c      	b.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   24080:	4b24      	ldr	r3, [pc, #144]	; (24114 <m2m_wifi_cb+0x354>)
   24082:	681b      	ldr	r3, [r3, #0]
   24084:	220c      	movs	r2, #12
   24086:	18ba      	adds	r2, r7, r2
   24088:	0011      	movs	r1, r2
   2408a:	2009      	movs	r0, #9
   2408c:	4798      	blx	r3
}
   2408e:	e064      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   24090:	1dfb      	adds	r3, r7, #7
   24092:	781b      	ldrb	r3, [r3, #0]
   24094:	2b2a      	cmp	r3, #42	; 0x2a
   24096:	d114      	bne.n	240c2 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   24098:	2378      	movs	r3, #120	; 0x78
   2409a:	18f9      	adds	r1, r7, r3
   2409c:	6838      	ldr	r0, [r7, #0]
   2409e:	2301      	movs	r3, #1
   240a0:	2204      	movs	r2, #4
   240a2:	4c1b      	ldr	r4, [pc, #108]	; (24110 <m2m_wifi_cb+0x350>)
   240a4:	47a0      	blx	r4
   240a6:	1e03      	subs	r3, r0, #0
   240a8:	d157      	bne.n	2415a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   240aa:	4b1a      	ldr	r3, [pc, #104]	; (24114 <m2m_wifi_cb+0x354>)
   240ac:	681b      	ldr	r3, [r3, #0]
   240ae:	2b00      	cmp	r3, #0
   240b0:	d053      	beq.n	2415a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   240b2:	4b18      	ldr	r3, [pc, #96]	; (24114 <m2m_wifi_cb+0x354>)
   240b4:	681b      	ldr	r3, [r3, #0]
   240b6:	2278      	movs	r2, #120	; 0x78
   240b8:	18ba      	adds	r2, r7, r2
   240ba:	0011      	movs	r1, r2
   240bc:	202a      	movs	r0, #42	; 0x2a
   240be:	4798      	blx	r3
}
   240c0:	e04b      	b.n	2415a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   240c2:	1dfb      	adds	r3, r7, #7
   240c4:	781b      	ldrb	r3, [r3, #0]
   240c6:	2b20      	cmp	r3, #32
   240c8:	d134      	bne.n	24134 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   240ca:	2370      	movs	r3, #112	; 0x70
   240cc:	18f9      	adds	r1, r7, r3
   240ce:	6838      	ldr	r0, [r7, #0]
   240d0:	2300      	movs	r3, #0
   240d2:	2208      	movs	r2, #8
   240d4:	4c0e      	ldr	r4, [pc, #56]	; (24110 <m2m_wifi_cb+0x350>)
   240d6:	47a0      	blx	r4
   240d8:	1e03      	subs	r3, r0, #0
   240da:	d13e      	bne.n	2415a <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   240dc:	683b      	ldr	r3, [r7, #0]
   240de:	3308      	adds	r3, #8
   240e0:	0018      	movs	r0, r3
   240e2:	2370      	movs	r3, #112	; 0x70
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	6819      	ldr	r1, [r3, #0]
   240e8:	2370      	movs	r3, #112	; 0x70
   240ea:	18fb      	adds	r3, r7, r3
   240ec:	889a      	ldrh	r2, [r3, #4]
   240ee:	2301      	movs	r3, #1
   240f0:	4c07      	ldr	r4, [pc, #28]	; (24110 <m2m_wifi_cb+0x350>)
   240f2:	47a0      	blx	r4
   240f4:	1e03      	subs	r3, r0, #0
   240f6:	d130      	bne.n	2415a <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   240f8:	4b06      	ldr	r3, [pc, #24]	; (24114 <m2m_wifi_cb+0x354>)
   240fa:	681b      	ldr	r3, [r3, #0]
   240fc:	2b00      	cmp	r3, #0
   240fe:	d02c      	beq.n	2415a <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   24100:	4b04      	ldr	r3, [pc, #16]	; (24114 <m2m_wifi_cb+0x354>)
   24102:	681b      	ldr	r3, [r3, #0]
   24104:	2270      	movs	r2, #112	; 0x70
   24106:	18ba      	adds	r2, r7, r2
   24108:	0011      	movs	r1, r2
   2410a:	2020      	movs	r0, #32
   2410c:	4798      	blx	r3
}
   2410e:	e024      	b.n	2415a <m2m_wifi_cb+0x39a>
   24110:	00023b85 	.word	0x00023b85
   24114:	2000411c 	.word	0x2000411c
   24118:	00023009 	.word	0x00023009
   2411c:	0003b9c8 	.word	0x0003b9c8
   24120:	00020349 	.word	0x00020349
   24124:	0003b9d4 	.word	0x0003b9d4
   24128:	0003b9f4 	.word	0x0003b9f4
   2412c:	20004119 	.word	0x20004119
   24130:	20004118 	.word	0x20004118
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   24134:	2324      	movs	r3, #36	; 0x24
   24136:	33ff      	adds	r3, #255	; 0xff
   24138:	001a      	movs	r2, r3
   2413a:	490a      	ldr	r1, [pc, #40]	; (24164 <m2m_wifi_cb+0x3a4>)
   2413c:	4b0a      	ldr	r3, [pc, #40]	; (24168 <m2m_wifi_cb+0x3a8>)
   2413e:	0018      	movs	r0, r3
   24140:	4b0a      	ldr	r3, [pc, #40]	; (2416c <m2m_wifi_cb+0x3ac>)
   24142:	4798      	blx	r3
   24144:	1dfb      	adds	r3, r7, #7
   24146:	781a      	ldrb	r2, [r3, #0]
   24148:	4b09      	ldr	r3, [pc, #36]	; (24170 <m2m_wifi_cb+0x3b0>)
   2414a:	0011      	movs	r1, r2
   2414c:	0018      	movs	r0, r3
   2414e:	4b07      	ldr	r3, [pc, #28]	; (2416c <m2m_wifi_cb+0x3ac>)
   24150:	4798      	blx	r3
   24152:	4b08      	ldr	r3, [pc, #32]	; (24174 <m2m_wifi_cb+0x3b4>)
   24154:	0018      	movs	r0, r3
   24156:	4b05      	ldr	r3, [pc, #20]	; (2416c <m2m_wifi_cb+0x3ac>)
   24158:	4798      	blx	r3
}
   2415a:	46c0      	nop			; (mov r8, r8)
   2415c:	46bd      	mov	sp, r7
   2415e:	b02d      	add	sp, #180	; 0xb4
   24160:	bd90      	pop	{r4, r7, pc}
   24162:	46c0      	nop			; (mov r8, r8)
   24164:	0003bd94 	.word	0x0003bd94
   24168:	0003b9f8 	.word	0x0003b9f8
   2416c:	00020349 	.word	0x00020349
   24170:	0003ba0c 	.word	0x0003ba0c
   24174:	0003b9f4 	.word	0x0003b9f4

00024178 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   24178:	b590      	push	{r4, r7, lr}
   2417a:	b091      	sub	sp, #68	; 0x44
   2417c:	af02      	add	r7, sp, #8
   2417e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   24180:	2337      	movs	r3, #55	; 0x37
   24182:	18fb      	adds	r3, r7, r3
   24184:	2200      	movs	r2, #0
   24186:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   24188:	230b      	movs	r3, #11
   2418a:	18fb      	adds	r3, r7, r3
   2418c:	2201      	movs	r2, #1
   2418e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   24190:	687b      	ldr	r3, [r7, #4]
   24192:	2b00      	cmp	r3, #0
   24194:	d104      	bne.n	241a0 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   24196:	2337      	movs	r3, #55	; 0x37
   24198:	18fb      	adds	r3, r7, r3
   2419a:	22f4      	movs	r2, #244	; 0xf4
   2419c:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   2419e:	e0b3      	b.n	24308 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   241a0:	687b      	ldr	r3, [r7, #4]
   241a2:	681a      	ldr	r2, [r3, #0]
   241a4:	4b5c      	ldr	r3, [pc, #368]	; (24318 <m2m_wifi_init+0x1a0>)
   241a6:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   241a8:	4b5c      	ldr	r3, [pc, #368]	; (2431c <m2m_wifi_init+0x1a4>)
   241aa:	2200      	movs	r2, #0
   241ac:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   241ae:	2337      	movs	r3, #55	; 0x37
   241b0:	18fc      	adds	r4, r7, r3
   241b2:	230b      	movs	r3, #11
   241b4:	18fb      	adds	r3, r7, r3
   241b6:	0018      	movs	r0, r3
   241b8:	4b59      	ldr	r3, [pc, #356]	; (24320 <m2m_wifi_init+0x1a8>)
   241ba:	4798      	blx	r3
   241bc:	0003      	movs	r3, r0
   241be:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   241c0:	2337      	movs	r3, #55	; 0x37
   241c2:	18fb      	adds	r3, r7, r3
   241c4:	781b      	ldrb	r3, [r3, #0]
   241c6:	b25b      	sxtb	r3, r3
   241c8:	2b00      	cmp	r3, #0
   241ca:	d000      	beq.n	241ce <m2m_wifi_init+0x56>
   241cc:	e099      	b.n	24302 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   241ce:	2337      	movs	r3, #55	; 0x37
   241d0:	18fc      	adds	r4, r7, r3
   241d2:	2000      	movs	r0, #0
   241d4:	4b53      	ldr	r3, [pc, #332]	; (24324 <m2m_wifi_init+0x1ac>)
   241d6:	4798      	blx	r3
   241d8:	0003      	movs	r3, r0
   241da:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   241dc:	2337      	movs	r3, #55	; 0x37
   241de:	18fb      	adds	r3, r7, r3
   241e0:	781b      	ldrb	r3, [r3, #0]
   241e2:	b25b      	sxtb	r3, r3
   241e4:	2b00      	cmp	r3, #0
   241e6:	d000      	beq.n	241ea <m2m_wifi_init+0x72>
   241e8:	e086      	b.n	242f8 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   241ea:	4b4f      	ldr	r3, [pc, #316]	; (24328 <m2m_wifi_init+0x1b0>)
   241ec:	0019      	movs	r1, r3
   241ee:	2001      	movs	r0, #1
   241f0:	4b4e      	ldr	r3, [pc, #312]	; (2432c <m2m_wifi_init+0x1b4>)
   241f2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   241f4:	2337      	movs	r3, #55	; 0x37
   241f6:	18fc      	adds	r4, r7, r3
   241f8:	230c      	movs	r3, #12
   241fa:	18fb      	adds	r3, r7, r3
   241fc:	0018      	movs	r0, r3
   241fe:	4b4c      	ldr	r3, [pc, #304]	; (24330 <m2m_wifi_init+0x1b8>)
   24200:	4798      	blx	r3
   24202:	0003      	movs	r3, r0
   24204:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   24206:	4b4b      	ldr	r3, [pc, #300]	; (24334 <m2m_wifi_init+0x1bc>)
   24208:	0018      	movs	r0, r3
   2420a:	4b4b      	ldr	r3, [pc, #300]	; (24338 <m2m_wifi_init+0x1c0>)
   2420c:	4798      	blx	r3
   2420e:	230c      	movs	r3, #12
   24210:	18fb      	adds	r3, r7, r3
   24212:	791b      	ldrb	r3, [r3, #4]
   24214:	0019      	movs	r1, r3
   24216:	230c      	movs	r3, #12
   24218:	18fb      	adds	r3, r7, r3
   2421a:	795b      	ldrb	r3, [r3, #5]
   2421c:	001a      	movs	r2, r3
   2421e:	230c      	movs	r3, #12
   24220:	18fb      	adds	r3, r7, r3
   24222:	799b      	ldrb	r3, [r3, #6]
   24224:	001c      	movs	r4, r3
   24226:	230c      	movs	r3, #12
   24228:	18fb      	adds	r3, r7, r3
   2422a:	8c1b      	ldrh	r3, [r3, #32]
   2422c:	4843      	ldr	r0, [pc, #268]	; (2433c <m2m_wifi_init+0x1c4>)
   2422e:	9300      	str	r3, [sp, #0]
   24230:	0023      	movs	r3, r4
   24232:	4c41      	ldr	r4, [pc, #260]	; (24338 <m2m_wifi_init+0x1c0>)
   24234:	47a0      	blx	r4
   24236:	4b42      	ldr	r3, [pc, #264]	; (24340 <m2m_wifi_init+0x1c8>)
   24238:	0018      	movs	r0, r3
   2423a:	4b3f      	ldr	r3, [pc, #252]	; (24338 <m2m_wifi_init+0x1c0>)
   2423c:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   2423e:	4b3d      	ldr	r3, [pc, #244]	; (24334 <m2m_wifi_init+0x1bc>)
   24240:	0018      	movs	r0, r3
   24242:	4b3d      	ldr	r3, [pc, #244]	; (24338 <m2m_wifi_init+0x1c0>)
   24244:	4798      	blx	r3
   24246:	230c      	movs	r3, #12
   24248:	18fb      	adds	r3, r7, r3
   2424a:	3316      	adds	r3, #22
   2424c:	001a      	movs	r2, r3
   2424e:	230c      	movs	r3, #12
   24250:	18fb      	adds	r3, r7, r3
   24252:	330a      	adds	r3, #10
   24254:	0019      	movs	r1, r3
   24256:	4b3b      	ldr	r3, [pc, #236]	; (24344 <m2m_wifi_init+0x1cc>)
   24258:	0018      	movs	r0, r3
   2425a:	4b37      	ldr	r3, [pc, #220]	; (24338 <m2m_wifi_init+0x1c0>)
   2425c:	4798      	blx	r3
   2425e:	4b38      	ldr	r3, [pc, #224]	; (24340 <m2m_wifi_init+0x1c8>)
   24260:	0018      	movs	r0, r3
   24262:	4b35      	ldr	r3, [pc, #212]	; (24338 <m2m_wifi_init+0x1c0>)
   24264:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   24266:	4b33      	ldr	r3, [pc, #204]	; (24334 <m2m_wifi_init+0x1bc>)
   24268:	0018      	movs	r0, r3
   2426a:	4b33      	ldr	r3, [pc, #204]	; (24338 <m2m_wifi_init+0x1c0>)
   2426c:	4798      	blx	r3
   2426e:	230c      	movs	r3, #12
   24270:	18fb      	adds	r3, r7, r3
   24272:	79db      	ldrb	r3, [r3, #7]
   24274:	0019      	movs	r1, r3
   24276:	230c      	movs	r3, #12
   24278:	18fb      	adds	r3, r7, r3
   2427a:	7a1b      	ldrb	r3, [r3, #8]
   2427c:	001a      	movs	r2, r3
   2427e:	230c      	movs	r3, #12
   24280:	18fb      	adds	r3, r7, r3
   24282:	7a5b      	ldrb	r3, [r3, #9]
   24284:	4830      	ldr	r0, [pc, #192]	; (24348 <m2m_wifi_init+0x1d0>)
   24286:	4c2c      	ldr	r4, [pc, #176]	; (24338 <m2m_wifi_init+0x1c0>)
   24288:	47a0      	blx	r4
   2428a:	4b2d      	ldr	r3, [pc, #180]	; (24340 <m2m_wifi_init+0x1c8>)
   2428c:	0018      	movs	r0, r3
   2428e:	4b2a      	ldr	r3, [pc, #168]	; (24338 <m2m_wifi_init+0x1c0>)
   24290:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   24292:	4b28      	ldr	r3, [pc, #160]	; (24334 <m2m_wifi_init+0x1bc>)
   24294:	0018      	movs	r0, r3
   24296:	4b28      	ldr	r3, [pc, #160]	; (24338 <m2m_wifi_init+0x1c0>)
   24298:	4798      	blx	r3
   2429a:	482c      	ldr	r0, [pc, #176]	; (2434c <m2m_wifi_init+0x1d4>)
   2429c:	2304      	movs	r3, #4
   2429e:	2205      	movs	r2, #5
   242a0:	2113      	movs	r1, #19
   242a2:	4c25      	ldr	r4, [pc, #148]	; (24338 <m2m_wifi_init+0x1c0>)
   242a4:	47a0      	blx	r4
   242a6:	4b26      	ldr	r3, [pc, #152]	; (24340 <m2m_wifi_init+0x1c8>)
   242a8:	0018      	movs	r0, r3
   242aa:	4b23      	ldr	r3, [pc, #140]	; (24338 <m2m_wifi_init+0x1c0>)
   242ac:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   242ae:	4b21      	ldr	r3, [pc, #132]	; (24334 <m2m_wifi_init+0x1bc>)
   242b0:	0018      	movs	r0, r3
   242b2:	4b21      	ldr	r3, [pc, #132]	; (24338 <m2m_wifi_init+0x1c0>)
   242b4:	4798      	blx	r3
   242b6:	4a26      	ldr	r2, [pc, #152]	; (24350 <m2m_wifi_init+0x1d8>)
   242b8:	4926      	ldr	r1, [pc, #152]	; (24354 <m2m_wifi_init+0x1dc>)
   242ba:	4b27      	ldr	r3, [pc, #156]	; (24358 <m2m_wifi_init+0x1e0>)
   242bc:	0018      	movs	r0, r3
   242be:	4b1e      	ldr	r3, [pc, #120]	; (24338 <m2m_wifi_init+0x1c0>)
   242c0:	4798      	blx	r3
   242c2:	4b1f      	ldr	r3, [pc, #124]	; (24340 <m2m_wifi_init+0x1c8>)
   242c4:	0018      	movs	r0, r3
   242c6:	4b1c      	ldr	r3, [pc, #112]	; (24338 <m2m_wifi_init+0x1c0>)
   242c8:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   242ca:	2337      	movs	r3, #55	; 0x37
   242cc:	18fb      	adds	r3, r7, r3
   242ce:	781b      	ldrb	r3, [r3, #0]
   242d0:	b25b      	sxtb	r3, r3
   242d2:	330d      	adds	r3, #13
   242d4:	d117      	bne.n	24306 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   242d6:	23e8      	movs	r3, #232	; 0xe8
   242d8:	33ff      	adds	r3, #255	; 0xff
   242da:	001a      	movs	r2, r3
   242dc:	491f      	ldr	r1, [pc, #124]	; (2435c <m2m_wifi_init+0x1e4>)
   242de:	4b20      	ldr	r3, [pc, #128]	; (24360 <m2m_wifi_init+0x1e8>)
   242e0:	0018      	movs	r0, r3
   242e2:	4b15      	ldr	r3, [pc, #84]	; (24338 <m2m_wifi_init+0x1c0>)
   242e4:	4798      	blx	r3
   242e6:	4b1f      	ldr	r3, [pc, #124]	; (24364 <m2m_wifi_init+0x1ec>)
   242e8:	0018      	movs	r0, r3
   242ea:	4b13      	ldr	r3, [pc, #76]	; (24338 <m2m_wifi_init+0x1c0>)
   242ec:	4798      	blx	r3
   242ee:	4b14      	ldr	r3, [pc, #80]	; (24340 <m2m_wifi_init+0x1c8>)
   242f0:	0018      	movs	r0, r3
   242f2:	4b11      	ldr	r3, [pc, #68]	; (24338 <m2m_wifi_init+0x1c0>)
   242f4:	4798      	blx	r3
	}

	goto _EXIT0;
   242f6:	e006      	b.n	24306 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   242f8:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   242fa:	2000      	movs	r0, #0
   242fc:	4b1a      	ldr	r3, [pc, #104]	; (24368 <m2m_wifi_init+0x1f0>)
   242fe:	4798      	blx	r3
   24300:	e002      	b.n	24308 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   24302:	46c0      	nop			; (mov r8, r8)
   24304:	e000      	b.n	24308 <m2m_wifi_init+0x190>
	goto _EXIT0;
   24306:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   24308:	2337      	movs	r3, #55	; 0x37
   2430a:	18fb      	adds	r3, r7, r3
   2430c:	781b      	ldrb	r3, [r3, #0]
   2430e:	b25b      	sxtb	r3, r3
}
   24310:	0018      	movs	r0, r3
   24312:	46bd      	mov	sp, r7
   24314:	b00f      	add	sp, #60	; 0x3c
   24316:	bd90      	pop	{r4, r7, pc}
   24318:	2000411c 	.word	0x2000411c
   2431c:	20004119 	.word	0x20004119
   24320:	0002549d 	.word	0x0002549d
   24324:	00023221 	.word	0x00023221
   24328:	00023dc1 	.word	0x00023dc1
   2432c:	00023d05 	.word	0x00023d05
   24330:	000252d1 	.word	0x000252d1
   24334:	0003b9c8 	.word	0x0003b9c8
   24338:	00020349 	.word	0x00020349
   2433c:	0003bb6c 	.word	0x0003bb6c
   24340:	0003b9f4 	.word	0x0003b9f4
   24344:	0003bb94 	.word	0x0003bb94
   24348:	0003bbb0 	.word	0x0003bbb0
   2434c:	0003bbd4 	.word	0x0003bbd4
   24350:	0003bbec 	.word	0x0003bbec
   24354:	0003bbf8 	.word	0x0003bbf8
   24358:	0003bc04 	.word	0x0003bc04
   2435c:	0003bda0 	.word	0x0003bda0
   24360:	0003b9f8 	.word	0x0003b9f8
   24364:	0003bc1c 	.word	0x0003bc1c
   24368:	0002562d 	.word	0x0002562d

0002436c <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   2436c:	b580      	push	{r7, lr}
   2436e:	b082      	sub	sp, #8
   24370:	af00      	add	r7, sp, #0
   24372:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   24374:	4b03      	ldr	r3, [pc, #12]	; (24384 <m2m_wifi_handle_events+0x18>)
   24376:	4798      	blx	r3
   24378:	0003      	movs	r3, r0
}
   2437a:	0018      	movs	r0, r3
   2437c:	46bd      	mov	sp, r7
   2437e:	b002      	add	sp, #8
   24380:	bd80      	pop	{r7, pc}
   24382:	46c0      	nop			; (mov r8, r8)
   24384:	00023ae5 	.word	0x00023ae5

00024388 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   24388:	b590      	push	{r4, r7, lr}
   2438a:	b087      	sub	sp, #28
   2438c:	af02      	add	r7, sp, #8
   2438e:	60f8      	str	r0, [r7, #12]
   24390:	0008      	movs	r0, r1
   24392:	0011      	movs	r1, r2
   24394:	607b      	str	r3, [r7, #4]
   24396:	230b      	movs	r3, #11
   24398:	18fb      	adds	r3, r7, r3
   2439a:	1c02      	adds	r2, r0, #0
   2439c:	701a      	strb	r2, [r3, #0]
   2439e:	230a      	movs	r3, #10
   243a0:	18fb      	adds	r3, r7, r3
   243a2:	1c0a      	adds	r2, r1, #0
   243a4:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   243a6:	687c      	ldr	r4, [r7, #4]
   243a8:	230a      	movs	r3, #10
   243aa:	18fb      	adds	r3, r7, r3
   243ac:	781a      	ldrb	r2, [r3, #0]
   243ae:	230b      	movs	r3, #11
   243b0:	18fb      	adds	r3, r7, r3
   243b2:	7819      	ldrb	r1, [r3, #0]
   243b4:	68f8      	ldr	r0, [r7, #12]
   243b6:	2300      	movs	r3, #0
   243b8:	9301      	str	r3, [sp, #4]
   243ba:	2320      	movs	r3, #32
   243bc:	18fb      	adds	r3, r7, r3
   243be:	881b      	ldrh	r3, [r3, #0]
   243c0:	9300      	str	r3, [sp, #0]
   243c2:	0023      	movs	r3, r4
   243c4:	4c03      	ldr	r4, [pc, #12]	; (243d4 <m2m_wifi_connect+0x4c>)
   243c6:	47a0      	blx	r4
   243c8:	0003      	movs	r3, r0
}
   243ca:	0018      	movs	r0, r3
   243cc:	46bd      	mov	sp, r7
   243ce:	b005      	add	sp, #20
   243d0:	bd90      	pop	{r4, r7, pc}
   243d2:	46c0      	nop			; (mov r8, r8)
   243d4:	000243d9 	.word	0x000243d9

000243d8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   243d8:	b5b0      	push	{r4, r5, r7, lr}
   243da:	b0aa      	sub	sp, #168	; 0xa8
   243dc:	af04      	add	r7, sp, #16
   243de:	60f8      	str	r0, [r7, #12]
   243e0:	0008      	movs	r0, r1
   243e2:	0011      	movs	r1, r2
   243e4:	607b      	str	r3, [r7, #4]
   243e6:	230b      	movs	r3, #11
   243e8:	18fb      	adds	r3, r7, r3
   243ea:	1c02      	adds	r2, r0, #0
   243ec:	701a      	strb	r2, [r3, #0]
   243ee:	230a      	movs	r3, #10
   243f0:	18fb      	adds	r3, r7, r3
   243f2:	1c0a      	adds	r2, r1, #0
   243f4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   243f6:	2397      	movs	r3, #151	; 0x97
   243f8:	18fb      	adds	r3, r7, r3
   243fa:	2200      	movs	r2, #0
   243fc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   243fe:	230a      	movs	r3, #10
   24400:	18fb      	adds	r3, r7, r3
   24402:	781b      	ldrb	r3, [r3, #0]
   24404:	2b01      	cmp	r3, #1
   24406:	d100      	bne.n	2440a <m2m_wifi_connect_sc+0x32>
   24408:	e085      	b.n	24516 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   2440a:	687b      	ldr	r3, [r7, #4]
   2440c:	2b00      	cmp	r3, #0
   2440e:	d112      	bne.n	24436 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   24410:	4ad8      	ldr	r2, [pc, #864]	; (24774 <m2m_wifi_connect_sc+0x39c>)
   24412:	49d9      	ldr	r1, [pc, #868]	; (24778 <m2m_wifi_connect_sc+0x3a0>)
   24414:	4bd9      	ldr	r3, [pc, #868]	; (2477c <m2m_wifi_connect_sc+0x3a4>)
   24416:	0018      	movs	r0, r3
   24418:	4bd9      	ldr	r3, [pc, #868]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2441a:	4798      	blx	r3
   2441c:	4bd9      	ldr	r3, [pc, #868]	; (24784 <m2m_wifi_connect_sc+0x3ac>)
   2441e:	0018      	movs	r0, r3
   24420:	4bd7      	ldr	r3, [pc, #860]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   24422:	4798      	blx	r3
   24424:	4bd8      	ldr	r3, [pc, #864]	; (24788 <m2m_wifi_connect_sc+0x3b0>)
   24426:	0018      	movs	r0, r3
   24428:	4bd5      	ldr	r3, [pc, #852]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2442a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2442c:	2397      	movs	r3, #151	; 0x97
   2442e:	18fb      	adds	r3, r7, r3
   24430:	22f4      	movs	r2, #244	; 0xf4
   24432:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24434:	e1f9      	b.n	2482a <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   24436:	230a      	movs	r3, #10
   24438:	18fb      	adds	r3, r7, r3
   2443a:	781b      	ldrb	r3, [r3, #0]
   2443c:	2b02      	cmp	r3, #2
   2443e:	d16a      	bne.n	24516 <m2m_wifi_connect_sc+0x13e>
   24440:	687b      	ldr	r3, [r7, #4]
   24442:	0018      	movs	r0, r3
   24444:	4bd1      	ldr	r3, [pc, #836]	; (2478c <m2m_wifi_connect_sc+0x3b4>)
   24446:	4798      	blx	r3
   24448:	0003      	movs	r3, r0
   2444a:	2b40      	cmp	r3, #64	; 0x40
   2444c:	d163      	bne.n	24516 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   2444e:	2396      	movs	r3, #150	; 0x96
   24450:	18fb      	adds	r3, r7, r3
   24452:	2200      	movs	r2, #0
   24454:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   24456:	687b      	ldr	r3, [r7, #4]
   24458:	2290      	movs	r2, #144	; 0x90
   2445a:	18ba      	adds	r2, r7, r2
   2445c:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2445e:	e055      	b.n	2450c <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   24460:	2396      	movs	r3, #150	; 0x96
   24462:	18fb      	adds	r3, r7, r3
   24464:	781b      	ldrb	r3, [r3, #0]
   24466:	2290      	movs	r2, #144	; 0x90
   24468:	18ba      	adds	r2, r7, r2
   2446a:	6812      	ldr	r2, [r2, #0]
   2446c:	18d3      	adds	r3, r2, r3
   2446e:	781b      	ldrb	r3, [r3, #0]
   24470:	2b2f      	cmp	r3, #47	; 0x2f
   24472:	d931      	bls.n	244d8 <m2m_wifi_connect_sc+0x100>
   24474:	2396      	movs	r3, #150	; 0x96
   24476:	18fb      	adds	r3, r7, r3
   24478:	781b      	ldrb	r3, [r3, #0]
   2447a:	2290      	movs	r2, #144	; 0x90
   2447c:	18ba      	adds	r2, r7, r2
   2447e:	6812      	ldr	r2, [r2, #0]
   24480:	18d3      	adds	r3, r2, r3
   24482:	781b      	ldrb	r3, [r3, #0]
   24484:	2b39      	cmp	r3, #57	; 0x39
   24486:	d909      	bls.n	2449c <m2m_wifi_connect_sc+0xc4>
   24488:	2396      	movs	r3, #150	; 0x96
   2448a:	18fb      	adds	r3, r7, r3
   2448c:	781b      	ldrb	r3, [r3, #0]
   2448e:	2290      	movs	r2, #144	; 0x90
   24490:	18ba      	adds	r2, r7, r2
   24492:	6812      	ldr	r2, [r2, #0]
   24494:	18d3      	adds	r3, r2, r3
   24496:	781b      	ldrb	r3, [r3, #0]
   24498:	2b40      	cmp	r3, #64	; 0x40
   2449a:	d91d      	bls.n	244d8 <m2m_wifi_connect_sc+0x100>
   2449c:	2396      	movs	r3, #150	; 0x96
   2449e:	18fb      	adds	r3, r7, r3
   244a0:	781b      	ldrb	r3, [r3, #0]
   244a2:	2290      	movs	r2, #144	; 0x90
   244a4:	18ba      	adds	r2, r7, r2
   244a6:	6812      	ldr	r2, [r2, #0]
   244a8:	18d3      	adds	r3, r2, r3
   244aa:	781b      	ldrb	r3, [r3, #0]
   244ac:	2b46      	cmp	r3, #70	; 0x46
   244ae:	d909      	bls.n	244c4 <m2m_wifi_connect_sc+0xec>
   244b0:	2396      	movs	r3, #150	; 0x96
   244b2:	18fb      	adds	r3, r7, r3
   244b4:	781b      	ldrb	r3, [r3, #0]
   244b6:	2290      	movs	r2, #144	; 0x90
   244b8:	18ba      	adds	r2, r7, r2
   244ba:	6812      	ldr	r2, [r2, #0]
   244bc:	18d3      	adds	r3, r2, r3
   244be:	781b      	ldrb	r3, [r3, #0]
   244c0:	2b60      	cmp	r3, #96	; 0x60
   244c2:	d909      	bls.n	244d8 <m2m_wifi_connect_sc+0x100>
   244c4:	2396      	movs	r3, #150	; 0x96
   244c6:	18fb      	adds	r3, r7, r3
   244c8:	781b      	ldrb	r3, [r3, #0]
   244ca:	2290      	movs	r2, #144	; 0x90
   244cc:	18ba      	adds	r2, r7, r2
   244ce:	6812      	ldr	r2, [r2, #0]
   244d0:	18d3      	adds	r3, r2, r3
   244d2:	781b      	ldrb	r3, [r3, #0]
   244d4:	2b66      	cmp	r3, #102	; 0x66
   244d6:	d912      	bls.n	244fe <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   244d8:	4aad      	ldr	r2, [pc, #692]	; (24790 <m2m_wifi_connect_sc+0x3b8>)
   244da:	49a7      	ldr	r1, [pc, #668]	; (24778 <m2m_wifi_connect_sc+0x3a0>)
   244dc:	4ba7      	ldr	r3, [pc, #668]	; (2477c <m2m_wifi_connect_sc+0x3a4>)
   244de:	0018      	movs	r0, r3
   244e0:	4ba7      	ldr	r3, [pc, #668]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   244e2:	4798      	blx	r3
   244e4:	4bab      	ldr	r3, [pc, #684]	; (24794 <m2m_wifi_connect_sc+0x3bc>)
   244e6:	0018      	movs	r0, r3
   244e8:	4ba5      	ldr	r3, [pc, #660]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   244ea:	4798      	blx	r3
   244ec:	4ba6      	ldr	r3, [pc, #664]	; (24788 <m2m_wifi_connect_sc+0x3b0>)
   244ee:	0018      	movs	r0, r3
   244f0:	4ba3      	ldr	r3, [pc, #652]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   244f2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   244f4:	2397      	movs	r3, #151	; 0x97
   244f6:	18fb      	adds	r3, r7, r3
   244f8:	22f4      	movs	r2, #244	; 0xf4
   244fa:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   244fc:	e195      	b.n	2482a <m2m_wifi_connect_sc+0x452>
				}
				i++;
   244fe:	2396      	movs	r3, #150	; 0x96
   24500:	18fb      	adds	r3, r7, r3
   24502:	781a      	ldrb	r2, [r3, #0]
   24504:	2396      	movs	r3, #150	; 0x96
   24506:	18fb      	adds	r3, r7, r3
   24508:	3201      	adds	r2, #1
   2450a:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2450c:	2396      	movs	r3, #150	; 0x96
   2450e:	18fb      	adds	r3, r7, r3
   24510:	781b      	ldrb	r3, [r3, #0]
   24512:	2b3f      	cmp	r3, #63	; 0x3f
   24514:	d9a4      	bls.n	24460 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   24516:	230b      	movs	r3, #11
   24518:	18fb      	adds	r3, r7, r3
   2451a:	781b      	ldrb	r3, [r3, #0]
   2451c:	2b00      	cmp	r3, #0
   2451e:	d004      	beq.n	2452a <m2m_wifi_connect_sc+0x152>
   24520:	230b      	movs	r3, #11
   24522:	18fb      	adds	r3, r7, r3
   24524:	781b      	ldrb	r3, [r3, #0]
   24526:	2b20      	cmp	r3, #32
   24528:	d913      	bls.n	24552 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   2452a:	238c      	movs	r3, #140	; 0x8c
   2452c:	009a      	lsls	r2, r3, #2
   2452e:	4992      	ldr	r1, [pc, #584]	; (24778 <m2m_wifi_connect_sc+0x3a0>)
   24530:	4b92      	ldr	r3, [pc, #584]	; (2477c <m2m_wifi_connect_sc+0x3a4>)
   24532:	0018      	movs	r0, r3
   24534:	4b92      	ldr	r3, [pc, #584]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   24536:	4798      	blx	r3
   24538:	4b97      	ldr	r3, [pc, #604]	; (24798 <m2m_wifi_connect_sc+0x3c0>)
   2453a:	0018      	movs	r0, r3
   2453c:	4b90      	ldr	r3, [pc, #576]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2453e:	4798      	blx	r3
   24540:	4b91      	ldr	r3, [pc, #580]	; (24788 <m2m_wifi_connect_sc+0x3b0>)
   24542:	0018      	movs	r0, r3
   24544:	4b8e      	ldr	r3, [pc, #568]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   24546:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   24548:	2397      	movs	r3, #151	; 0x97
   2454a:	18fb      	adds	r3, r7, r3
   2454c:	22f4      	movs	r2, #244	; 0xf4
   2454e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   24550:	e16b      	b.n	2482a <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   24552:	23a8      	movs	r3, #168	; 0xa8
   24554:	18fb      	adds	r3, r7, r3
   24556:	881b      	ldrh	r3, [r3, #0]
   24558:	2b00      	cmp	r3, #0
   2455a:	d004      	beq.n	24566 <m2m_wifi_connect_sc+0x18e>
   2455c:	23a8      	movs	r3, #168	; 0xa8
   2455e:	18fb      	adds	r3, r7, r3
   24560:	881b      	ldrh	r3, [r3, #0]
   24562:	2b0e      	cmp	r3, #14
   24564:	d917      	bls.n	24596 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   24566:	23a8      	movs	r3, #168	; 0xa8
   24568:	18fb      	adds	r3, r7, r3
   2456a:	881b      	ldrh	r3, [r3, #0]
   2456c:	2bff      	cmp	r3, #255	; 0xff
   2456e:	d012      	beq.n	24596 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   24570:	4a8a      	ldr	r2, [pc, #552]	; (2479c <m2m_wifi_connect_sc+0x3c4>)
   24572:	4981      	ldr	r1, [pc, #516]	; (24778 <m2m_wifi_connect_sc+0x3a0>)
   24574:	4b81      	ldr	r3, [pc, #516]	; (2477c <m2m_wifi_connect_sc+0x3a4>)
   24576:	0018      	movs	r0, r3
   24578:	4b81      	ldr	r3, [pc, #516]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2457a:	4798      	blx	r3
   2457c:	4b88      	ldr	r3, [pc, #544]	; (247a0 <m2m_wifi_connect_sc+0x3c8>)
   2457e:	0018      	movs	r0, r3
   24580:	4b7f      	ldr	r3, [pc, #508]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   24582:	4798      	blx	r3
   24584:	4b80      	ldr	r3, [pc, #512]	; (24788 <m2m_wifi_connect_sc+0x3b0>)
   24586:	0018      	movs	r0, r3
   24588:	4b7d      	ldr	r3, [pc, #500]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2458a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2458c:	2397      	movs	r3, #151	; 0x97
   2458e:	18fb      	adds	r3, r7, r3
   24590:	22f4      	movs	r2, #244	; 0xf4
   24592:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24594:	e149      	b.n	2482a <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   24596:	230b      	movs	r3, #11
   24598:	18fb      	adds	r3, r7, r3
   2459a:	781a      	ldrb	r2, [r3, #0]
   2459c:	68f9      	ldr	r1, [r7, #12]
   2459e:	2314      	movs	r3, #20
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	3346      	adds	r3, #70	; 0x46
   245a4:	0018      	movs	r0, r3
   245a6:	4b7f      	ldr	r3, [pc, #508]	; (247a4 <m2m_wifi_connect_sc+0x3cc>)
   245a8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   245aa:	230b      	movs	r3, #11
   245ac:	18fb      	adds	r3, r7, r3
   245ae:	781b      	ldrb	r3, [r3, #0]
   245b0:	2214      	movs	r2, #20
   245b2:	18ba      	adds	r2, r7, r2
   245b4:	2146      	movs	r1, #70	; 0x46
   245b6:	18d3      	adds	r3, r2, r3
   245b8:	185b      	adds	r3, r3, r1
   245ba:	2200      	movs	r2, #0
   245bc:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   245be:	2314      	movs	r3, #20
   245c0:	18fb      	adds	r3, r7, r3
   245c2:	22a8      	movs	r2, #168	; 0xa8
   245c4:	18ba      	adds	r2, r7, r2
   245c6:	2144      	movs	r1, #68	; 0x44
   245c8:	8812      	ldrh	r2, [r2, #0]
   245ca:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   245cc:	23ac      	movs	r3, #172	; 0xac
   245ce:	18fb      	adds	r3, r7, r3
   245d0:	781b      	ldrb	r3, [r3, #0]
   245d2:	1e5a      	subs	r2, r3, #1
   245d4:	4193      	sbcs	r3, r2
   245d6:	b2db      	uxtb	r3, r3
   245d8:	0019      	movs	r1, r3
   245da:	2314      	movs	r3, #20
   245dc:	18fb      	adds	r3, r7, r3
   245de:	2267      	movs	r2, #103	; 0x67
   245e0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   245e2:	2314      	movs	r3, #20
   245e4:	18fb      	adds	r3, r7, r3
   245e6:	228c      	movs	r2, #140	; 0x8c
   245e8:	18ba      	adds	r2, r7, r2
   245ea:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   245ec:	238c      	movs	r3, #140	; 0x8c
   245ee:	18fb      	adds	r3, r7, r3
   245f0:	681b      	ldr	r3, [r3, #0]
   245f2:	220a      	movs	r2, #10
   245f4:	18ba      	adds	r2, r7, r2
   245f6:	2141      	movs	r1, #65	; 0x41
   245f8:	7812      	ldrb	r2, [r2, #0]
   245fa:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   245fc:	230a      	movs	r3, #10
   245fe:	18fb      	adds	r3, r7, r3
   24600:	781b      	ldrb	r3, [r3, #0]
   24602:	2b03      	cmp	r3, #3
   24604:	d000      	beq.n	24608 <m2m_wifi_connect_sc+0x230>
   24606:	e07d      	b.n	24704 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   24608:	687b      	ldr	r3, [r7, #4]
   2460a:	2288      	movs	r2, #136	; 0x88
   2460c:	18ba      	adds	r2, r7, r2
   2460e:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   24610:	238c      	movs	r3, #140	; 0x8c
   24612:	18fb      	adds	r3, r7, r3
   24614:	681b      	ldr	r3, [r3, #0]
   24616:	2284      	movs	r2, #132	; 0x84
   24618:	18ba      	adds	r2, r7, r2
   2461a:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   2461c:	2388      	movs	r3, #136	; 0x88
   2461e:	18fb      	adds	r3, r7, r3
   24620:	681b      	ldr	r3, [r3, #0]
   24622:	781b      	ldrb	r3, [r3, #0]
   24624:	3b01      	subs	r3, #1
   24626:	b2da      	uxtb	r2, r3
   24628:	2384      	movs	r3, #132	; 0x84
   2462a:	18fb      	adds	r3, r7, r3
   2462c:	681b      	ldr	r3, [r3, #0]
   2462e:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   24630:	2384      	movs	r3, #132	; 0x84
   24632:	18fb      	adds	r3, r7, r3
   24634:	681b      	ldr	r3, [r3, #0]
   24636:	781b      	ldrb	r3, [r3, #0]
   24638:	2b03      	cmp	r3, #3
   2463a:	d919      	bls.n	24670 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   2463c:	2394      	movs	r3, #148	; 0x94
   2463e:	009a      	lsls	r2, r3, #2
   24640:	494d      	ldr	r1, [pc, #308]	; (24778 <m2m_wifi_connect_sc+0x3a0>)
   24642:	4b4e      	ldr	r3, [pc, #312]	; (2477c <m2m_wifi_connect_sc+0x3a4>)
   24644:	0018      	movs	r0, r3
   24646:	4b4e      	ldr	r3, [pc, #312]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   24648:	4798      	blx	r3
   2464a:	2384      	movs	r3, #132	; 0x84
   2464c:	18fb      	adds	r3, r7, r3
   2464e:	681b      	ldr	r3, [r3, #0]
   24650:	781b      	ldrb	r3, [r3, #0]
   24652:	001a      	movs	r2, r3
   24654:	4b54      	ldr	r3, [pc, #336]	; (247a8 <m2m_wifi_connect_sc+0x3d0>)
   24656:	0011      	movs	r1, r2
   24658:	0018      	movs	r0, r3
   2465a:	4b49      	ldr	r3, [pc, #292]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2465c:	4798      	blx	r3
   2465e:	4b4a      	ldr	r3, [pc, #296]	; (24788 <m2m_wifi_connect_sc+0x3b0>)
   24660:	0018      	movs	r0, r3
   24662:	4b47      	ldr	r3, [pc, #284]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   24664:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24666:	2397      	movs	r3, #151	; 0x97
   24668:	18fb      	adds	r3, r7, r3
   2466a:	22f4      	movs	r2, #244	; 0xf4
   2466c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2466e:	e0dc      	b.n	2482a <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   24670:	2388      	movs	r3, #136	; 0x88
   24672:	18fb      	adds	r3, r7, r3
   24674:	681b      	ldr	r3, [r3, #0]
   24676:	785b      	ldrb	r3, [r3, #1]
   24678:	3b01      	subs	r3, #1
   2467a:	b2da      	uxtb	r2, r3
   2467c:	2384      	movs	r3, #132	; 0x84
   2467e:	18fb      	adds	r3, r7, r3
   24680:	681b      	ldr	r3, [r3, #0]
   24682:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   24684:	2384      	movs	r3, #132	; 0x84
   24686:	18fb      	adds	r3, r7, r3
   24688:	681b      	ldr	r3, [r3, #0]
   2468a:	785b      	ldrb	r3, [r3, #1]
   2468c:	2b0a      	cmp	r3, #10
   2468e:	d01e      	beq.n	246ce <m2m_wifi_connect_sc+0x2f6>
   24690:	2384      	movs	r3, #132	; 0x84
   24692:	18fb      	adds	r3, r7, r3
   24694:	681b      	ldr	r3, [r3, #0]
   24696:	785b      	ldrb	r3, [r3, #1]
   24698:	2b1a      	cmp	r3, #26
   2469a:	d018      	beq.n	246ce <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   2469c:	4a43      	ldr	r2, [pc, #268]	; (247ac <m2m_wifi_connect_sc+0x3d4>)
   2469e:	4936      	ldr	r1, [pc, #216]	; (24778 <m2m_wifi_connect_sc+0x3a0>)
   246a0:	4b36      	ldr	r3, [pc, #216]	; (2477c <m2m_wifi_connect_sc+0x3a4>)
   246a2:	0018      	movs	r0, r3
   246a4:	4b36      	ldr	r3, [pc, #216]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   246a6:	4798      	blx	r3
   246a8:	2384      	movs	r3, #132	; 0x84
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	681b      	ldr	r3, [r3, #0]
   246ae:	785b      	ldrb	r3, [r3, #1]
   246b0:	001a      	movs	r2, r3
   246b2:	4b3f      	ldr	r3, [pc, #252]	; (247b0 <m2m_wifi_connect_sc+0x3d8>)
   246b4:	0011      	movs	r1, r2
   246b6:	0018      	movs	r0, r3
   246b8:	4b31      	ldr	r3, [pc, #196]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   246ba:	4798      	blx	r3
   246bc:	4b32      	ldr	r3, [pc, #200]	; (24788 <m2m_wifi_connect_sc+0x3b0>)
   246be:	0018      	movs	r0, r3
   246c0:	4b2f      	ldr	r3, [pc, #188]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   246c2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   246c4:	2397      	movs	r3, #151	; 0x97
   246c6:	18fb      	adds	r3, r7, r3
   246c8:	22f4      	movs	r2, #244	; 0xf4
   246ca:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   246cc:	e0ad      	b.n	2482a <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   246ce:	2384      	movs	r3, #132	; 0x84
   246d0:	18fb      	adds	r3, r7, r3
   246d2:	681b      	ldr	r3, [r3, #0]
   246d4:	1c98      	adds	r0, r3, #2
   246d6:	2388      	movs	r3, #136	; 0x88
   246d8:	18fb      	adds	r3, r7, r3
   246da:	681b      	ldr	r3, [r3, #0]
   246dc:	1c99      	adds	r1, r3, #2
   246de:	2388      	movs	r3, #136	; 0x88
   246e0:	18fb      	adds	r3, r7, r3
   246e2:	681b      	ldr	r3, [r3, #0]
   246e4:	785b      	ldrb	r3, [r3, #1]
   246e6:	001a      	movs	r2, r3
   246e8:	4b2e      	ldr	r3, [pc, #184]	; (247a4 <m2m_wifi_connect_sc+0x3cc>)
   246ea:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   246ec:	2388      	movs	r3, #136	; 0x88
   246ee:	18fb      	adds	r3, r7, r3
   246f0:	681b      	ldr	r3, [r3, #0]
   246f2:	785b      	ldrb	r3, [r3, #1]
   246f4:	001a      	movs	r2, r3
   246f6:	2384      	movs	r3, #132	; 0x84
   246f8:	18fb      	adds	r3, r7, r3
   246fa:	681b      	ldr	r3, [r3, #0]
   246fc:	189b      	adds	r3, r3, r2
   246fe:	2200      	movs	r2, #0
   24700:	709a      	strb	r2, [r3, #2]
   24702:	e081      	b.n	24808 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   24704:	230a      	movs	r3, #10
   24706:	18fb      	adds	r3, r7, r3
   24708:	781b      	ldrb	r3, [r3, #0]
   2470a:	2b02      	cmp	r3, #2
   2470c:	d156      	bne.n	247bc <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   2470e:	2382      	movs	r3, #130	; 0x82
   24710:	18fc      	adds	r4, r7, r3
   24712:	687b      	ldr	r3, [r7, #4]
   24714:	0018      	movs	r0, r3
   24716:	4b1d      	ldr	r3, [pc, #116]	; (2478c <m2m_wifi_connect_sc+0x3b4>)
   24718:	4798      	blx	r3
   2471a:	0003      	movs	r3, r0
   2471c:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   2471e:	2382      	movs	r3, #130	; 0x82
   24720:	18fb      	adds	r3, r7, r3
   24722:	881b      	ldrh	r3, [r3, #0]
   24724:	2b00      	cmp	r3, #0
   24726:	d004      	beq.n	24732 <m2m_wifi_connect_sc+0x35a>
   24728:	2382      	movs	r3, #130	; 0x82
   2472a:	18fb      	adds	r3, r7, r3
   2472c:	881b      	ldrh	r3, [r3, #0]
   2472e:	2b40      	cmp	r3, #64	; 0x40
   24730:	d912      	bls.n	24758 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   24732:	4a20      	ldr	r2, [pc, #128]	; (247b4 <m2m_wifi_connect_sc+0x3dc>)
   24734:	4910      	ldr	r1, [pc, #64]	; (24778 <m2m_wifi_connect_sc+0x3a0>)
   24736:	4b11      	ldr	r3, [pc, #68]	; (2477c <m2m_wifi_connect_sc+0x3a4>)
   24738:	0018      	movs	r0, r3
   2473a:	4b11      	ldr	r3, [pc, #68]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2473c:	4798      	blx	r3
   2473e:	4b1e      	ldr	r3, [pc, #120]	; (247b8 <m2m_wifi_connect_sc+0x3e0>)
   24740:	0018      	movs	r0, r3
   24742:	4b0f      	ldr	r3, [pc, #60]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   24744:	4798      	blx	r3
   24746:	4b10      	ldr	r3, [pc, #64]	; (24788 <m2m_wifi_connect_sc+0x3b0>)
   24748:	0018      	movs	r0, r3
   2474a:	4b0d      	ldr	r3, [pc, #52]	; (24780 <m2m_wifi_connect_sc+0x3a8>)
   2474c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2474e:	2397      	movs	r3, #151	; 0x97
   24750:	18fb      	adds	r3, r7, r3
   24752:	22f4      	movs	r2, #244	; 0xf4
   24754:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24756:	e068      	b.n	2482a <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   24758:	238c      	movs	r3, #140	; 0x8c
   2475a:	18fb      	adds	r3, r7, r3
   2475c:	6818      	ldr	r0, [r3, #0]
   2475e:	2382      	movs	r3, #130	; 0x82
   24760:	18fb      	adds	r3, r7, r3
   24762:	881b      	ldrh	r3, [r3, #0]
   24764:	3301      	adds	r3, #1
   24766:	001a      	movs	r2, r3
   24768:	687b      	ldr	r3, [r7, #4]
   2476a:	0019      	movs	r1, r3
   2476c:	4b0d      	ldr	r3, [pc, #52]	; (247a4 <m2m_wifi_connect_sc+0x3cc>)
   2476e:	4798      	blx	r3
   24770:	e04a      	b.n	24808 <m2m_wifi_connect_sc+0x430>
   24772:	46c0      	nop			; (mov r8, r8)
   24774:	0000021a 	.word	0x0000021a
   24778:	0003bdb0 	.word	0x0003bdb0
   2477c:	0003b9f8 	.word	0x0003b9f8
   24780:	00020349 	.word	0x00020349
   24784:	0003bc38 	.word	0x0003bc38
   24788:	0003b9f4 	.word	0x0003b9f4
   2478c:	00023047 	.word	0x00023047
   24790:	00000226 	.word	0x00000226
   24794:	0003bc4c 	.word	0x0003bc4c
   24798:	0003bc5c 	.word	0x0003bc5c
   2479c:	00000239 	.word	0x00000239
   247a0:	0003bc70 	.word	0x0003bc70
   247a4:	00022fcd 	.word	0x00022fcd
   247a8:	0003bc7c 	.word	0x0003bc7c
   247ac:	00000257 	.word	0x00000257
   247b0:	0003bc98 	.word	0x0003bc98
   247b4:	00000266 	.word	0x00000266
   247b8:	0003bcb4 	.word	0x0003bcb4
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   247bc:	230a      	movs	r3, #10
   247be:	18fb      	adds	r3, r7, r3
   247c0:	781b      	ldrb	r3, [r3, #0]
   247c2:	2b04      	cmp	r3, #4
   247c4:	d108      	bne.n	247d8 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   247c6:	238c      	movs	r3, #140	; 0x8c
   247c8:	18fb      	adds	r3, r7, r3
   247ca:	681b      	ldr	r3, [r3, #0]
   247cc:	6879      	ldr	r1, [r7, #4]
   247ce:	223e      	movs	r2, #62	; 0x3e
   247d0:	0018      	movs	r0, r3
   247d2:	4b1a      	ldr	r3, [pc, #104]	; (2483c <m2m_wifi_connect_sc+0x464>)
   247d4:	4798      	blx	r3
   247d6:	e017      	b.n	24808 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   247d8:	230a      	movs	r3, #10
   247da:	18fb      	adds	r3, r7, r3
   247dc:	781b      	ldrb	r3, [r3, #0]
   247de:	2b01      	cmp	r3, #1
   247e0:	d012      	beq.n	24808 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   247e2:	4a17      	ldr	r2, [pc, #92]	; (24840 <m2m_wifi_connect_sc+0x468>)
   247e4:	4917      	ldr	r1, [pc, #92]	; (24844 <m2m_wifi_connect_sc+0x46c>)
   247e6:	4b18      	ldr	r3, [pc, #96]	; (24848 <m2m_wifi_connect_sc+0x470>)
   247e8:	0018      	movs	r0, r3
   247ea:	4b18      	ldr	r3, [pc, #96]	; (2484c <m2m_wifi_connect_sc+0x474>)
   247ec:	4798      	blx	r3
   247ee:	4b18      	ldr	r3, [pc, #96]	; (24850 <m2m_wifi_connect_sc+0x478>)
   247f0:	0018      	movs	r0, r3
   247f2:	4b16      	ldr	r3, [pc, #88]	; (2484c <m2m_wifi_connect_sc+0x474>)
   247f4:	4798      	blx	r3
   247f6:	4b17      	ldr	r3, [pc, #92]	; (24854 <m2m_wifi_connect_sc+0x47c>)
   247f8:	0018      	movs	r0, r3
   247fa:	4b14      	ldr	r3, [pc, #80]	; (2484c <m2m_wifi_connect_sc+0x474>)
   247fc:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   247fe:	2397      	movs	r3, #151	; 0x97
   24800:	18fb      	adds	r3, r7, r3
   24802:	22f4      	movs	r2, #244	; 0xf4
   24804:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   24806:	e010      	b.n	2482a <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   24808:	2397      	movs	r3, #151	; 0x97
   2480a:	18fc      	adds	r4, r7, r3
   2480c:	2314      	movs	r3, #20
   2480e:	18fa      	adds	r2, r7, r3
   24810:	2300      	movs	r3, #0
   24812:	9302      	str	r3, [sp, #8]
   24814:	2300      	movs	r3, #0
   24816:	9301      	str	r3, [sp, #4]
   24818:	2300      	movs	r3, #0
   2481a:	9300      	str	r3, [sp, #0]
   2481c:	236c      	movs	r3, #108	; 0x6c
   2481e:	2128      	movs	r1, #40	; 0x28
   24820:	2001      	movs	r0, #1
   24822:	4d0d      	ldr	r5, [pc, #52]	; (24858 <m2m_wifi_connect_sc+0x480>)
   24824:	47a8      	blx	r5
   24826:	0003      	movs	r3, r0
   24828:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   2482a:	2397      	movs	r3, #151	; 0x97
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	781b      	ldrb	r3, [r3, #0]
   24830:	b25b      	sxtb	r3, r3
}
   24832:	0018      	movs	r0, r3
   24834:	46bd      	mov	sp, r7
   24836:	b026      	add	sp, #152	; 0x98
   24838:	bdb0      	pop	{r4, r5, r7, pc}
   2483a:	46c0      	nop			; (mov r8, r8)
   2483c:	00022fcd 	.word	0x00022fcd
   24840:	00000276 	.word	0x00000276
   24844:	0003bdb0 	.word	0x0003bdb0
   24848:	0003b9f8 	.word	0x0003b9f8
   2484c:	00020349 	.word	0x00020349
   24850:	0003bcd0 	.word	0x0003bcd0
   24854:	0003b9f4 	.word	0x0003b9f4
   24858:	00023269 	.word	0x00023269

0002485c <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   2485c:	b580      	push	{r7, lr}
   2485e:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   24860:	2300      	movs	r3, #0
}
   24862:	0018      	movs	r0, r3
   24864:	46bd      	mov	sp, r7
   24866:	bd80      	pop	{r7, pc}

00024868 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   24868:	b590      	push	{r4, r7, lr}
   2486a:	b087      	sub	sp, #28
   2486c:	af00      	add	r7, sp, #0
   2486e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24870:	2317      	movs	r3, #23
   24872:	18fb      	adds	r3, r7, r3
   24874:	2200      	movs	r2, #0
   24876:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   24878:	687b      	ldr	r3, [r7, #4]
   2487a:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   2487c:	693b      	ldr	r3, [r7, #16]
   2487e:	2280      	movs	r2, #128	; 0x80
   24880:	0052      	lsls	r2, r2, #1
   24882:	4313      	orrs	r3, r2
   24884:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   24886:	693a      	ldr	r2, [r7, #16]
   24888:	23a5      	movs	r3, #165	; 0xa5
   2488a:	015b      	lsls	r3, r3, #5
   2488c:	0011      	movs	r1, r2
   2488e:	0018      	movs	r0, r3
   24890:	4b12      	ldr	r3, [pc, #72]	; (248dc <chip_apply_conf+0x74>)
   24892:	4798      	blx	r3
		if(val32 != 0) {		
   24894:	693b      	ldr	r3, [r7, #16]
   24896:	2b00      	cmp	r3, #0
   24898:	d018      	beq.n	248cc <chip_apply_conf+0x64>
			uint32 reg = 0;
   2489a:	2300      	movs	r3, #0
   2489c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2489e:	2317      	movs	r3, #23
   248a0:	18fc      	adds	r4, r7, r3
   248a2:	230c      	movs	r3, #12
   248a4:	18fa      	adds	r2, r7, r3
   248a6:	23a5      	movs	r3, #165	; 0xa5
   248a8:	015b      	lsls	r3, r3, #5
   248aa:	0011      	movs	r1, r2
   248ac:	0018      	movs	r0, r3
   248ae:	4b0c      	ldr	r3, [pc, #48]	; (248e0 <chip_apply_conf+0x78>)
   248b0:	4798      	blx	r3
   248b2:	0003      	movs	r3, r0
   248b4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   248b6:	2317      	movs	r3, #23
   248b8:	18fb      	adds	r3, r7, r3
   248ba:	781b      	ldrb	r3, [r3, #0]
   248bc:	b25b      	sxtb	r3, r3
   248be:	2b00      	cmp	r3, #0
   248c0:	d1e1      	bne.n	24886 <chip_apply_conf+0x1e>
				if(reg == val32)
   248c2:	68fa      	ldr	r2, [r7, #12]
   248c4:	693b      	ldr	r3, [r7, #16]
   248c6:	429a      	cmp	r2, r3
   248c8:	d002      	beq.n	248d0 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   248ca:	e7dc      	b.n	24886 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   248cc:	46c0      	nop			; (mov r8, r8)
   248ce:	e000      	b.n	248d2 <chip_apply_conf+0x6a>
					break;
   248d0:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   248d2:	2300      	movs	r3, #0
}
   248d4:	0018      	movs	r0, r3
   248d6:	46bd      	mov	sp, r7
   248d8:	b007      	add	sp, #28
   248da:	bd90      	pop	{r4, r7, pc}
   248dc:	000250bd 	.word	0x000250bd
   248e0:	00025099 	.word	0x00025099

000248e4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   248e4:	b590      	push	{r4, r7, lr}
   248e6:	b083      	sub	sp, #12
   248e8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   248ea:	2300      	movs	r3, #0
   248ec:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   248ee:	1dfb      	adds	r3, r7, #7
   248f0:	2200      	movs	r2, #0
   248f2:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   248f4:	1dfc      	adds	r4, r7, #7
   248f6:	003b      	movs	r3, r7
   248f8:	4a24      	ldr	r2, [pc, #144]	; (2498c <enable_interrupts+0xa8>)
   248fa:	0019      	movs	r1, r3
   248fc:	0010      	movs	r0, r2
   248fe:	4b24      	ldr	r3, [pc, #144]	; (24990 <enable_interrupts+0xac>)
   24900:	4798      	blx	r3
   24902:	0003      	movs	r3, r0
   24904:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   24906:	1dfb      	adds	r3, r7, #7
   24908:	781b      	ldrb	r3, [r3, #0]
   2490a:	b25b      	sxtb	r3, r3
   2490c:	2b00      	cmp	r3, #0
   2490e:	d131      	bne.n	24974 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   24910:	683b      	ldr	r3, [r7, #0]
   24912:	2280      	movs	r2, #128	; 0x80
   24914:	0052      	lsls	r2, r2, #1
   24916:	4313      	orrs	r3, r2
   24918:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   2491a:	683b      	ldr	r3, [r7, #0]
   2491c:	1dfc      	adds	r4, r7, #7
   2491e:	4a1b      	ldr	r2, [pc, #108]	; (2498c <enable_interrupts+0xa8>)
   24920:	0019      	movs	r1, r3
   24922:	0010      	movs	r0, r2
   24924:	4b1b      	ldr	r3, [pc, #108]	; (24994 <enable_interrupts+0xb0>)
   24926:	4798      	blx	r3
   24928:	0003      	movs	r3, r0
   2492a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2492c:	1dfb      	adds	r3, r7, #7
   2492e:	781b      	ldrb	r3, [r3, #0]
   24930:	b25b      	sxtb	r3, r3
   24932:	2b00      	cmp	r3, #0
   24934:	d120      	bne.n	24978 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   24936:	1dfc      	adds	r4, r7, #7
   24938:	003a      	movs	r2, r7
   2493a:	23d0      	movs	r3, #208	; 0xd0
   2493c:	015b      	lsls	r3, r3, #5
   2493e:	0011      	movs	r1, r2
   24940:	0018      	movs	r0, r3
   24942:	4b13      	ldr	r3, [pc, #76]	; (24990 <enable_interrupts+0xac>)
   24944:	4798      	blx	r3
   24946:	0003      	movs	r3, r0
   24948:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2494a:	1dfb      	adds	r3, r7, #7
   2494c:	781b      	ldrb	r3, [r3, #0]
   2494e:	b25b      	sxtb	r3, r3
   24950:	2b00      	cmp	r3, #0
   24952:	d113      	bne.n	2497c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   24954:	683b      	ldr	r3, [r7, #0]
   24956:	2280      	movs	r2, #128	; 0x80
   24958:	0252      	lsls	r2, r2, #9
   2495a:	4313      	orrs	r3, r2
   2495c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2495e:	683a      	ldr	r2, [r7, #0]
   24960:	1dfc      	adds	r4, r7, #7
   24962:	23d0      	movs	r3, #208	; 0xd0
   24964:	015b      	lsls	r3, r3, #5
   24966:	0011      	movs	r1, r2
   24968:	0018      	movs	r0, r3
   2496a:	4b0a      	ldr	r3, [pc, #40]	; (24994 <enable_interrupts+0xb0>)
   2496c:	4798      	blx	r3
   2496e:	0003      	movs	r3, r0
   24970:	7023      	strb	r3, [r4, #0]
   24972:	e004      	b.n	2497e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24974:	46c0      	nop			; (mov r8, r8)
   24976:	e002      	b.n	2497e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24978:	46c0      	nop			; (mov r8, r8)
   2497a:	e000      	b.n	2497e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2497c:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2497e:	1dfb      	adds	r3, r7, #7
   24980:	781b      	ldrb	r3, [r3, #0]
   24982:	b25b      	sxtb	r3, r3
}
   24984:	0018      	movs	r0, r3
   24986:	46bd      	mov	sp, r7
   24988:	b003      	add	sp, #12
   2498a:	bd90      	pop	{r4, r7, pc}
   2498c:	00001408 	.word	0x00001408
   24990:	00025099 	.word	0x00025099
   24994:	000250bd 	.word	0x000250bd

00024998 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   24998:	b580      	push	{r7, lr}
   2499a:	b082      	sub	sp, #8
   2499c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2499e:	4b32      	ldr	r3, [pc, #200]	; (24a68 <nmi_get_chipid+0xd0>)
   249a0:	681b      	ldr	r3, [r3, #0]
   249a2:	2b00      	cmp	r3, #0
   249a4:	d159      	bne.n	24a5a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   249a6:	4a30      	ldr	r2, [pc, #192]	; (24a68 <nmi_get_chipid+0xd0>)
   249a8:	2380      	movs	r3, #128	; 0x80
   249aa:	015b      	lsls	r3, r3, #5
   249ac:	0011      	movs	r1, r2
   249ae:	0018      	movs	r0, r3
   249b0:	4b2e      	ldr	r3, [pc, #184]	; (24a6c <nmi_get_chipid+0xd4>)
   249b2:	4798      	blx	r3
   249b4:	1e03      	subs	r3, r0, #0
   249b6:	d004      	beq.n	249c2 <nmi_get_chipid+0x2a>
			chipid = 0;
   249b8:	4b2b      	ldr	r3, [pc, #172]	; (24a68 <nmi_get_chipid+0xd0>)
   249ba:	2200      	movs	r2, #0
   249bc:	601a      	str	r2, [r3, #0]
			return 0;
   249be:	2300      	movs	r3, #0
   249c0:	e04d      	b.n	24a5e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   249c2:	1d3b      	adds	r3, r7, #4
   249c4:	4a2a      	ldr	r2, [pc, #168]	; (24a70 <nmi_get_chipid+0xd8>)
   249c6:	0019      	movs	r1, r3
   249c8:	0010      	movs	r0, r2
   249ca:	4b28      	ldr	r3, [pc, #160]	; (24a6c <nmi_get_chipid+0xd4>)
   249cc:	4798      	blx	r3
   249ce:	1e03      	subs	r3, r0, #0
   249d0:	d004      	beq.n	249dc <nmi_get_chipid+0x44>
			chipid = 0;
   249d2:	4b25      	ldr	r3, [pc, #148]	; (24a68 <nmi_get_chipid+0xd0>)
   249d4:	2200      	movs	r2, #0
   249d6:	601a      	str	r2, [r3, #0]
			return 0;
   249d8:	2300      	movs	r3, #0
   249da:	e040      	b.n	24a5e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   249dc:	4b22      	ldr	r3, [pc, #136]	; (24a68 <nmi_get_chipid+0xd0>)
   249de:	681b      	ldr	r3, [r3, #0]
   249e0:	4a24      	ldr	r2, [pc, #144]	; (24a74 <nmi_get_chipid+0xdc>)
   249e2:	4293      	cmp	r3, r2
   249e4:	d106      	bne.n	249f4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   249e6:	687b      	ldr	r3, [r7, #4]
   249e8:	2b01      	cmp	r3, #1
   249ea:	d029      	beq.n	24a40 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   249ec:	4b1e      	ldr	r3, [pc, #120]	; (24a68 <nmi_get_chipid+0xd0>)
   249ee:	4a22      	ldr	r2, [pc, #136]	; (24a78 <nmi_get_chipid+0xe0>)
   249f0:	601a      	str	r2, [r3, #0]
   249f2:	e025      	b.n	24a40 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   249f4:	4b1c      	ldr	r3, [pc, #112]	; (24a68 <nmi_get_chipid+0xd0>)
   249f6:	681b      	ldr	r3, [r3, #0]
   249f8:	4a20      	ldr	r2, [pc, #128]	; (24a7c <nmi_get_chipid+0xe4>)
   249fa:	4293      	cmp	r3, r2
   249fc:	d10d      	bne.n	24a1a <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   249fe:	687b      	ldr	r3, [r7, #4]
   24a00:	2b03      	cmp	r3, #3
   24a02:	d01d      	beq.n	24a40 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   24a04:	687b      	ldr	r3, [r7, #4]
   24a06:	2b04      	cmp	r3, #4
   24a08:	d103      	bne.n	24a12 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   24a0a:	4b17      	ldr	r3, [pc, #92]	; (24a68 <nmi_get_chipid+0xd0>)
   24a0c:	4a1c      	ldr	r2, [pc, #112]	; (24a80 <nmi_get_chipid+0xe8>)
   24a0e:	601a      	str	r2, [r3, #0]
   24a10:	e016      	b.n	24a40 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   24a12:	4b15      	ldr	r3, [pc, #84]	; (24a68 <nmi_get_chipid+0xd0>)
   24a14:	4a1b      	ldr	r2, [pc, #108]	; (24a84 <nmi_get_chipid+0xec>)
   24a16:	601a      	str	r2, [r3, #0]
   24a18:	e012      	b.n	24a40 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   24a1a:	4b13      	ldr	r3, [pc, #76]	; (24a68 <nmi_get_chipid+0xd0>)
   24a1c:	681b      	ldr	r3, [r3, #0]
   24a1e:	4a1a      	ldr	r2, [pc, #104]	; (24a88 <nmi_get_chipid+0xf0>)
   24a20:	4293      	cmp	r3, r2
   24a22:	d10d      	bne.n	24a40 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   24a24:	4a10      	ldr	r2, [pc, #64]	; (24a68 <nmi_get_chipid+0xd0>)
   24a26:	23ec      	movs	r3, #236	; 0xec
   24a28:	039b      	lsls	r3, r3, #14
   24a2a:	0011      	movs	r1, r2
   24a2c:	0018      	movs	r0, r3
   24a2e:	4b0f      	ldr	r3, [pc, #60]	; (24a6c <nmi_get_chipid+0xd4>)
   24a30:	4798      	blx	r3
   24a32:	1e03      	subs	r3, r0, #0
   24a34:	d004      	beq.n	24a40 <nmi_get_chipid+0xa8>
			chipid = 0;
   24a36:	4b0c      	ldr	r3, [pc, #48]	; (24a68 <nmi_get_chipid+0xd0>)
   24a38:	2200      	movs	r2, #0
   24a3a:	601a      	str	r2, [r3, #0]
			return 0;
   24a3c:	2300      	movs	r3, #0
   24a3e:	e00e      	b.n	24a5e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   24a40:	4b09      	ldr	r3, [pc, #36]	; (24a68 <nmi_get_chipid+0xd0>)
   24a42:	681b      	ldr	r3, [r3, #0]
   24a44:	4a11      	ldr	r2, [pc, #68]	; (24a8c <nmi_get_chipid+0xf4>)
   24a46:	401a      	ands	r2, r3
   24a48:	4b07      	ldr	r3, [pc, #28]	; (24a68 <nmi_get_chipid+0xd0>)
   24a4a:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   24a4c:	4b06      	ldr	r3, [pc, #24]	; (24a68 <nmi_get_chipid+0xd0>)
   24a4e:	681b      	ldr	r3, [r3, #0]
   24a50:	22a0      	movs	r2, #160	; 0xa0
   24a52:	02d2      	lsls	r2, r2, #11
   24a54:	431a      	orrs	r2, r3
   24a56:	4b04      	ldr	r3, [pc, #16]	; (24a68 <nmi_get_chipid+0xd0>)
   24a58:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   24a5a:	4b03      	ldr	r3, [pc, #12]	; (24a68 <nmi_get_chipid+0xd0>)
   24a5c:	681b      	ldr	r3, [r3, #0]
}
   24a5e:	0018      	movs	r0, r3
   24a60:	46bd      	mov	sp, r7
   24a62:	b002      	add	sp, #8
   24a64:	bd80      	pop	{r7, pc}
   24a66:	46c0      	nop			; (mov r8, r8)
   24a68:	20004120 	.word	0x20004120
   24a6c:	00025099 	.word	0x00025099
   24a70:	000013f4 	.word	0x000013f4
   24a74:	001002a0 	.word	0x001002a0
   24a78:	001002a1 	.word	0x001002a1
   24a7c:	001002b0 	.word	0x001002b0
   24a80:	001002b1 	.word	0x001002b1
   24a84:	001002b2 	.word	0x001002b2
   24a88:	001000f0 	.word	0x001000f0
   24a8c:	fff0ffff 	.word	0xfff0ffff

00024a90 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   24a90:	b590      	push	{r4, r7, lr}
   24a92:	b083      	sub	sp, #12
   24a94:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   24a96:	1dfb      	adds	r3, r7, #7
   24a98:	2200      	movs	r2, #0
   24a9a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   24a9c:	1dfc      	adds	r4, r7, #7
   24a9e:	003b      	movs	r3, r7
   24aa0:	0019      	movs	r1, r3
   24aa2:	2010      	movs	r0, #16
   24aa4:	4b2e      	ldr	r3, [pc, #184]	; (24b60 <chip_sleep+0xd0>)
   24aa6:	4798      	blx	r3
   24aa8:	0003      	movs	r3, r0
   24aaa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   24aac:	1dfb      	adds	r3, r7, #7
   24aae:	781b      	ldrb	r3, [r3, #0]
   24ab0:	b25b      	sxtb	r3, r3
   24ab2:	2b00      	cmp	r3, #0
   24ab4:	d145      	bne.n	24b42 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   24ab6:	683b      	ldr	r3, [r7, #0]
   24ab8:	2201      	movs	r2, #1
   24aba:	4013      	ands	r3, r2
   24abc:	d000      	beq.n	24ac0 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   24abe:	e7ed      	b.n	24a9c <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   24ac0:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   24ac2:	1dfc      	adds	r4, r7, #7
   24ac4:	003b      	movs	r3, r7
   24ac6:	0019      	movs	r1, r3
   24ac8:	2001      	movs	r0, #1
   24aca:	4b25      	ldr	r3, [pc, #148]	; (24b60 <chip_sleep+0xd0>)
   24acc:	4798      	blx	r3
   24ace:	0003      	movs	r3, r0
   24ad0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   24ad2:	1dfb      	adds	r3, r7, #7
   24ad4:	781b      	ldrb	r3, [r3, #0]
   24ad6:	b25b      	sxtb	r3, r3
   24ad8:	2b00      	cmp	r3, #0
   24ada:	d134      	bne.n	24b46 <chip_sleep+0xb6>
	if(reg & NBIT1)
   24adc:	683b      	ldr	r3, [r7, #0]
   24ade:	2202      	movs	r2, #2
   24ae0:	4013      	ands	r3, r2
   24ae2:	d010      	beq.n	24b06 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   24ae4:	683b      	ldr	r3, [r7, #0]
   24ae6:	2202      	movs	r2, #2
   24ae8:	4393      	bics	r3, r2
   24aea:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   24aec:	683b      	ldr	r3, [r7, #0]
   24aee:	1dfc      	adds	r4, r7, #7
   24af0:	0019      	movs	r1, r3
   24af2:	2001      	movs	r0, #1
   24af4:	4b1b      	ldr	r3, [pc, #108]	; (24b64 <chip_sleep+0xd4>)
   24af6:	4798      	blx	r3
   24af8:	0003      	movs	r3, r0
   24afa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   24afc:	1dfb      	adds	r3, r7, #7
   24afe:	781b      	ldrb	r3, [r3, #0]
   24b00:	b25b      	sxtb	r3, r3
   24b02:	2b00      	cmp	r3, #0
   24b04:	d121      	bne.n	24b4a <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   24b06:	1dfc      	adds	r4, r7, #7
   24b08:	003b      	movs	r3, r7
   24b0a:	0019      	movs	r1, r3
   24b0c:	200b      	movs	r0, #11
   24b0e:	4b14      	ldr	r3, [pc, #80]	; (24b60 <chip_sleep+0xd0>)
   24b10:	4798      	blx	r3
   24b12:	0003      	movs	r3, r0
   24b14:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   24b16:	1dfb      	adds	r3, r7, #7
   24b18:	781b      	ldrb	r3, [r3, #0]
   24b1a:	b25b      	sxtb	r3, r3
   24b1c:	2b00      	cmp	r3, #0
   24b1e:	d116      	bne.n	24b4e <chip_sleep+0xbe>
	if(reg & NBIT0)
   24b20:	683b      	ldr	r3, [r7, #0]
   24b22:	2201      	movs	r2, #1
   24b24:	4013      	ands	r3, r2
   24b26:	d013      	beq.n	24b50 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   24b28:	683b      	ldr	r3, [r7, #0]
   24b2a:	2201      	movs	r2, #1
   24b2c:	4393      	bics	r3, r2
   24b2e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   24b30:	683b      	ldr	r3, [r7, #0]
   24b32:	1dfc      	adds	r4, r7, #7
   24b34:	0019      	movs	r1, r3
   24b36:	200b      	movs	r0, #11
   24b38:	4b0a      	ldr	r3, [pc, #40]	; (24b64 <chip_sleep+0xd4>)
   24b3a:	4798      	blx	r3
   24b3c:	0003      	movs	r3, r0
   24b3e:	7023      	strb	r3, [r4, #0]
   24b40:	e006      	b.n	24b50 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   24b42:	46c0      	nop			; (mov r8, r8)
   24b44:	e004      	b.n	24b50 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   24b46:	46c0      	nop			; (mov r8, r8)
   24b48:	e002      	b.n	24b50 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   24b4a:	46c0      	nop			; (mov r8, r8)
   24b4c:	e000      	b.n	24b50 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   24b4e:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   24b50:	1dfb      	adds	r3, r7, #7
   24b52:	781b      	ldrb	r3, [r3, #0]
   24b54:	b25b      	sxtb	r3, r3
}
   24b56:	0018      	movs	r0, r3
   24b58:	46bd      	mov	sp, r7
   24b5a:	b003      	add	sp, #12
   24b5c:	bd90      	pop	{r4, r7, pc}
   24b5e:	46c0      	nop			; (mov r8, r8)
   24b60:	00025099 	.word	0x00025099
   24b64:	000250bd 	.word	0x000250bd

00024b68 <chip_wake>:
sint8 chip_wake(void)
{
   24b68:	b590      	push	{r4, r7, lr}
   24b6a:	b085      	sub	sp, #20
   24b6c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   24b6e:	230f      	movs	r3, #15
   24b70:	18fb      	adds	r3, r7, r3
   24b72:	2200      	movs	r2, #0
   24b74:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   24b76:	2300      	movs	r3, #0
   24b78:	607b      	str	r3, [r7, #4]
   24b7a:	2300      	movs	r3, #0
   24b7c:	603b      	str	r3, [r7, #0]
   24b7e:	2300      	movs	r3, #0
   24b80:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   24b82:	230f      	movs	r3, #15
   24b84:	18fc      	adds	r4, r7, r3
   24b86:	1d3b      	adds	r3, r7, #4
   24b88:	0019      	movs	r1, r3
   24b8a:	200b      	movs	r0, #11
   24b8c:	4b4e      	ldr	r3, [pc, #312]	; (24cc8 <chip_wake+0x160>)
   24b8e:	4798      	blx	r3
   24b90:	0003      	movs	r3, r0
   24b92:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24b94:	230f      	movs	r3, #15
   24b96:	18fb      	adds	r3, r7, r3
   24b98:	781b      	ldrb	r3, [r3, #0]
   24b9a:	b25b      	sxtb	r3, r3
   24b9c:	2b00      	cmp	r3, #0
   24b9e:	d000      	beq.n	24ba2 <chip_wake+0x3a>
   24ba0:	e082      	b.n	24ca8 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   24ba2:	687b      	ldr	r3, [r7, #4]
   24ba4:	2201      	movs	r2, #1
   24ba6:	4013      	ands	r3, r2
   24ba8:	d111      	bne.n	24bce <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   24baa:	687b      	ldr	r3, [r7, #4]
   24bac:	2201      	movs	r2, #1
   24bae:	4313      	orrs	r3, r2
   24bb0:	220f      	movs	r2, #15
   24bb2:	18bc      	adds	r4, r7, r2
   24bb4:	0019      	movs	r1, r3
   24bb6:	200b      	movs	r0, #11
   24bb8:	4b44      	ldr	r3, [pc, #272]	; (24ccc <chip_wake+0x164>)
   24bba:	4798      	blx	r3
   24bbc:	0003      	movs	r3, r0
   24bbe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24bc0:	230f      	movs	r3, #15
   24bc2:	18fb      	adds	r3, r7, r3
   24bc4:	781b      	ldrb	r3, [r3, #0]
   24bc6:	b25b      	sxtb	r3, r3
   24bc8:	2b00      	cmp	r3, #0
   24bca:	d000      	beq.n	24bce <chip_wake+0x66>
   24bcc:	e06e      	b.n	24cac <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   24bce:	230f      	movs	r3, #15
   24bd0:	18fc      	adds	r4, r7, r3
   24bd2:	1d3b      	adds	r3, r7, #4
   24bd4:	0019      	movs	r1, r3
   24bd6:	2001      	movs	r0, #1
   24bd8:	4b3b      	ldr	r3, [pc, #236]	; (24cc8 <chip_wake+0x160>)
   24bda:	4798      	blx	r3
   24bdc:	0003      	movs	r3, r0
   24bde:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24be0:	230f      	movs	r3, #15
   24be2:	18fb      	adds	r3, r7, r3
   24be4:	781b      	ldrb	r3, [r3, #0]
   24be6:	b25b      	sxtb	r3, r3
   24be8:	2b00      	cmp	r3, #0
   24bea:	d161      	bne.n	24cb0 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   24bec:	687b      	ldr	r3, [r7, #4]
   24bee:	2202      	movs	r2, #2
   24bf0:	4013      	ands	r3, r2
   24bf2:	d110      	bne.n	24c16 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   24bf4:	687b      	ldr	r3, [r7, #4]
   24bf6:	2202      	movs	r2, #2
   24bf8:	4313      	orrs	r3, r2
   24bfa:	220f      	movs	r2, #15
   24bfc:	18bc      	adds	r4, r7, r2
   24bfe:	0019      	movs	r1, r3
   24c00:	2001      	movs	r0, #1
   24c02:	4b32      	ldr	r3, [pc, #200]	; (24ccc <chip_wake+0x164>)
   24c04:	4798      	blx	r3
   24c06:	0003      	movs	r3, r0
   24c08:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   24c0a:	230f      	movs	r3, #15
   24c0c:	18fb      	adds	r3, r7, r3
   24c0e:	781b      	ldrb	r3, [r3, #0]
   24c10:	b25b      	sxtb	r3, r3
   24c12:	2b00      	cmp	r3, #0
   24c14:	d14e      	bne.n	24cb4 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   24c16:	230f      	movs	r3, #15
   24c18:	18fc      	adds	r4, r7, r3
   24c1a:	003b      	movs	r3, r7
   24c1c:	0019      	movs	r1, r3
   24c1e:	200f      	movs	r0, #15
   24c20:	4b29      	ldr	r3, [pc, #164]	; (24cc8 <chip_wake+0x160>)
   24c22:	4798      	blx	r3
   24c24:	0003      	movs	r3, r0
   24c26:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   24c28:	230f      	movs	r3, #15
   24c2a:	18fb      	adds	r3, r7, r3
   24c2c:	781b      	ldrb	r3, [r3, #0]
   24c2e:	b25b      	sxtb	r3, r3
   24c30:	2b00      	cmp	r3, #0
   24c32:	d014      	beq.n	24c5e <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   24c34:	23a8      	movs	r3, #168	; 0xa8
   24c36:	005a      	lsls	r2, r3, #1
   24c38:	4925      	ldr	r1, [pc, #148]	; (24cd0 <chip_wake+0x168>)
   24c3a:	4b26      	ldr	r3, [pc, #152]	; (24cd4 <chip_wake+0x16c>)
   24c3c:	0018      	movs	r0, r3
   24c3e:	4b26      	ldr	r3, [pc, #152]	; (24cd8 <chip_wake+0x170>)
   24c40:	4798      	blx	r3
   24c42:	230f      	movs	r3, #15
   24c44:	18fb      	adds	r3, r7, r3
   24c46:	2100      	movs	r1, #0
   24c48:	5659      	ldrsb	r1, [r3, r1]
   24c4a:	683a      	ldr	r2, [r7, #0]
   24c4c:	4b23      	ldr	r3, [pc, #140]	; (24cdc <chip_wake+0x174>)
   24c4e:	0018      	movs	r0, r3
   24c50:	4b21      	ldr	r3, [pc, #132]	; (24cd8 <chip_wake+0x170>)
   24c52:	4798      	blx	r3
   24c54:	4b22      	ldr	r3, [pc, #136]	; (24ce0 <chip_wake+0x178>)
   24c56:	0018      	movs	r0, r3
   24c58:	4b1f      	ldr	r3, [pc, #124]	; (24cd8 <chip_wake+0x170>)
   24c5a:	4798      	blx	r3
			goto _WAKE_EXIT;
   24c5c:	e02b      	b.n	24cb6 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   24c5e:	683b      	ldr	r3, [r7, #0]
   24c60:	2204      	movs	r2, #4
   24c62:	4013      	ands	r3, r2
   24c64:	d11c      	bne.n	24ca0 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   24c66:	2002      	movs	r0, #2
   24c68:	4b1e      	ldr	r3, [pc, #120]	; (24ce4 <chip_wake+0x17c>)
   24c6a:	4798      	blx	r3
		trials++;
   24c6c:	68bb      	ldr	r3, [r7, #8]
   24c6e:	3301      	adds	r3, #1
   24c70:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   24c72:	68bb      	ldr	r3, [r7, #8]
   24c74:	2b04      	cmp	r3, #4
   24c76:	d9ce      	bls.n	24c16 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   24c78:	23ad      	movs	r3, #173	; 0xad
   24c7a:	005a      	lsls	r2, r3, #1
   24c7c:	4914      	ldr	r1, [pc, #80]	; (24cd0 <chip_wake+0x168>)
   24c7e:	4b15      	ldr	r3, [pc, #84]	; (24cd4 <chip_wake+0x16c>)
   24c80:	0018      	movs	r0, r3
   24c82:	4b15      	ldr	r3, [pc, #84]	; (24cd8 <chip_wake+0x170>)
   24c84:	4798      	blx	r3
   24c86:	4b18      	ldr	r3, [pc, #96]	; (24ce8 <chip_wake+0x180>)
   24c88:	0018      	movs	r0, r3
   24c8a:	4b13      	ldr	r3, [pc, #76]	; (24cd8 <chip_wake+0x170>)
   24c8c:	4798      	blx	r3
   24c8e:	4b14      	ldr	r3, [pc, #80]	; (24ce0 <chip_wake+0x178>)
   24c90:	0018      	movs	r0, r3
   24c92:	4b11      	ldr	r3, [pc, #68]	; (24cd8 <chip_wake+0x170>)
   24c94:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   24c96:	230f      	movs	r3, #15
   24c98:	18fb      	adds	r3, r7, r3
   24c9a:	22fc      	movs	r2, #252	; 0xfc
   24c9c:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   24c9e:	e00a      	b.n	24cb6 <chip_wake+0x14e>
			break;
   24ca0:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   24ca2:	4b12      	ldr	r3, [pc, #72]	; (24cec <chip_wake+0x184>)
   24ca4:	4798      	blx	r3
   24ca6:	e006      	b.n	24cb6 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24ca8:	46c0      	nop			; (mov r8, r8)
   24caa:	e004      	b.n	24cb6 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24cac:	46c0      	nop			; (mov r8, r8)
   24cae:	e002      	b.n	24cb6 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24cb0:	46c0      	nop			; (mov r8, r8)
   24cb2:	e000      	b.n	24cb6 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   24cb4:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   24cb6:	230f      	movs	r3, #15
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	781b      	ldrb	r3, [r3, #0]
   24cbc:	b25b      	sxtb	r3, r3
}
   24cbe:	0018      	movs	r0, r3
   24cc0:	46bd      	mov	sp, r7
   24cc2:	b005      	add	sp, #20
   24cc4:	bd90      	pop	{r4, r7, pc}
   24cc6:	46c0      	nop			; (mov r8, r8)
   24cc8:	00025099 	.word	0x00025099
   24ccc:	000250bd 	.word	0x000250bd
   24cd0:	0003be50 	.word	0x0003be50
   24cd4:	0003bdc4 	.word	0x0003bdc4
   24cd8:	00020349 	.word	0x00020349
   24cdc:	0003bdd8 	.word	0x0003bdd8
   24ce0:	0003bdf0 	.word	0x0003bdf0
   24ce4:	000227b9 	.word	0x000227b9
   24ce8:	0003bdf4 	.word	0x0003bdf4
   24cec:	00025059 	.word	0x00025059

00024cf0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   24cf0:	b580      	push	{r7, lr}
   24cf2:	b088      	sub	sp, #32
   24cf4:	af00      	add	r7, sp, #0
   24cf6:	0002      	movs	r2, r0
   24cf8:	1dfb      	adds	r3, r7, #7
   24cfa:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24cfc:	2313      	movs	r3, #19
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	2200      	movs	r2, #0
   24d02:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24d04:	2300      	movs	r3, #0
   24d06:	61fb      	str	r3, [r7, #28]
   24d08:	2300      	movs	r3, #0
   24d0a:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   24d0c:	2300      	movs	r3, #0
   24d0e:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   24d10:	4b4a      	ldr	r3, [pc, #296]	; (24e3c <wait_for_bootrom+0x14c>)
   24d12:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   24d14:	2300      	movs	r3, #0
   24d16:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   24d18:	4b49      	ldr	r3, [pc, #292]	; (24e40 <wait_for_bootrom+0x150>)
   24d1a:	0018      	movs	r0, r3
   24d1c:	4b49      	ldr	r3, [pc, #292]	; (24e44 <wait_for_bootrom+0x154>)
   24d1e:	4798      	blx	r3
   24d20:	0003      	movs	r3, r0
   24d22:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   24d24:	69fb      	ldr	r3, [r7, #28]
   24d26:	2b00      	cmp	r3, #0
   24d28:	db03      	blt.n	24d32 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   24d2a:	2001      	movs	r0, #1
   24d2c:	4b46      	ldr	r3, [pc, #280]	; (24e48 <wait_for_bootrom+0x158>)
   24d2e:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   24d30:	e7f2      	b.n	24d18 <wait_for_bootrom+0x28>
			break;
   24d32:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   24d34:	4b45      	ldr	r3, [pc, #276]	; (24e4c <wait_for_bootrom+0x15c>)
   24d36:	0018      	movs	r0, r3
   24d38:	4b42      	ldr	r3, [pc, #264]	; (24e44 <wait_for_bootrom+0x154>)
   24d3a:	4798      	blx	r3
   24d3c:	0003      	movs	r3, r0
   24d3e:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   24d40:	69fb      	ldr	r3, [r7, #28]
   24d42:	2201      	movs	r2, #1
   24d44:	4013      	ands	r3, r2
   24d46:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   24d48:	69fb      	ldr	r3, [r7, #28]
   24d4a:	2b00      	cmp	r3, #0
   24d4c:	d112      	bne.n	24d74 <wait_for_bootrom+0x84>
	{
		reg = 0;
   24d4e:	2300      	movs	r3, #0
   24d50:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   24d52:	e00b      	b.n	24d6c <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   24d54:	2001      	movs	r0, #1
   24d56:	4b3c      	ldr	r3, [pc, #240]	; (24e48 <wait_for_bootrom+0x158>)
   24d58:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   24d5a:	4b3d      	ldr	r3, [pc, #244]	; (24e50 <wait_for_bootrom+0x160>)
   24d5c:	0018      	movs	r0, r3
   24d5e:	4b39      	ldr	r3, [pc, #228]	; (24e44 <wait_for_bootrom+0x154>)
   24d60:	4798      	blx	r3
   24d62:	0003      	movs	r3, r0
   24d64:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   24d66:	69bb      	ldr	r3, [r7, #24]
   24d68:	3301      	adds	r3, #1
   24d6a:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   24d6c:	69fb      	ldr	r3, [r7, #28]
   24d6e:	4a39      	ldr	r2, [pc, #228]	; (24e54 <wait_for_bootrom+0x164>)
   24d70:	4293      	cmp	r3, r2
   24d72:	d1ef      	bne.n	24d54 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   24d74:	1dfb      	adds	r3, r7, #7
   24d76:	781b      	ldrb	r3, [r3, #0]
   24d78:	2b02      	cmp	r3, #2
   24d7a:	d10d      	bne.n	24d98 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   24d7c:	4a36      	ldr	r2, [pc, #216]	; (24e58 <wait_for_bootrom+0x168>)
   24d7e:	4b37      	ldr	r3, [pc, #220]	; (24e5c <wait_for_bootrom+0x16c>)
   24d80:	0011      	movs	r1, r2
   24d82:	0018      	movs	r0, r3
   24d84:	4b36      	ldr	r3, [pc, #216]	; (24e60 <wait_for_bootrom+0x170>)
   24d86:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   24d88:	2380      	movs	r3, #128	; 0x80
   24d8a:	035b      	lsls	r3, r3, #13
   24d8c:	4a35      	ldr	r2, [pc, #212]	; (24e64 <wait_for_bootrom+0x174>)
   24d8e:	0019      	movs	r1, r3
   24d90:	0010      	movs	r0, r2
   24d92:	4b33      	ldr	r3, [pc, #204]	; (24e60 <wait_for_bootrom+0x170>)
   24d94:	4798      	blx	r3
   24d96:	e022      	b.n	24dde <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   24d98:	1dfb      	adds	r3, r7, #7
   24d9a:	781b      	ldrb	r3, [r3, #0]
   24d9c:	2b03      	cmp	r3, #3
   24d9e:	d10b      	bne.n	24db8 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   24da0:	4a2d      	ldr	r2, [pc, #180]	; (24e58 <wait_for_bootrom+0x168>)
   24da2:	4b2e      	ldr	r3, [pc, #184]	; (24e5c <wait_for_bootrom+0x16c>)
   24da4:	0011      	movs	r1, r2
   24da6:	0018      	movs	r0, r3
   24da8:	4b2d      	ldr	r3, [pc, #180]	; (24e60 <wait_for_bootrom+0x170>)
   24daa:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   24dac:	4b2d      	ldr	r3, [pc, #180]	; (24e64 <wait_for_bootrom+0x174>)
   24dae:	2100      	movs	r1, #0
   24db0:	0018      	movs	r0, r3
   24db2:	4b2b      	ldr	r3, [pc, #172]	; (24e60 <wait_for_bootrom+0x170>)
   24db4:	4798      	blx	r3
   24db6:	e012      	b.n	24dde <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   24db8:	1dfb      	adds	r3, r7, #7
   24dba:	781b      	ldrb	r3, [r3, #0]
   24dbc:	2b04      	cmp	r3, #4
   24dbe:	d108      	bne.n	24dd2 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   24dc0:	2380      	movs	r3, #128	; 0x80
   24dc2:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   24dc4:	68fb      	ldr	r3, [r7, #12]
   24dc6:	4a27      	ldr	r2, [pc, #156]	; (24e64 <wait_for_bootrom+0x174>)
   24dc8:	0019      	movs	r1, r3
   24dca:	0010      	movs	r0, r2
   24dcc:	4b24      	ldr	r3, [pc, #144]	; (24e60 <wait_for_bootrom+0x170>)
   24dce:	4798      	blx	r3
   24dd0:	e005      	b.n	24dde <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   24dd2:	68fb      	ldr	r3, [r7, #12]
   24dd4:	4a23      	ldr	r2, [pc, #140]	; (24e64 <wait_for_bootrom+0x174>)
   24dd6:	0019      	movs	r1, r3
   24dd8:	0010      	movs	r0, r2
   24dda:	4b21      	ldr	r3, [pc, #132]	; (24e60 <wait_for_bootrom+0x170>)
   24ddc:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   24dde:	4b22      	ldr	r3, [pc, #136]	; (24e68 <wait_for_bootrom+0x178>)
   24de0:	4798      	blx	r3
   24de2:	0003      	movs	r3, r0
   24de4:	051b      	lsls	r3, r3, #20
   24de6:	0d1b      	lsrs	r3, r3, #20
   24de8:	4a20      	ldr	r2, [pc, #128]	; (24e6c <wait_for_bootrom+0x17c>)
   24dea:	4293      	cmp	r3, r2
   24dec:	d906      	bls.n	24dfc <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   24dee:	697b      	ldr	r3, [r7, #20]
   24df0:	2202      	movs	r2, #2
   24df2:	4313      	orrs	r3, r2
   24df4:	0018      	movs	r0, r3
   24df6:	4b1e      	ldr	r3, [pc, #120]	; (24e70 <wait_for_bootrom+0x180>)
   24df8:	4798      	blx	r3
   24dfa:	e003      	b.n	24e04 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   24dfc:	697b      	ldr	r3, [r7, #20]
   24dfe:	0018      	movs	r0, r3
   24e00:	4b1b      	ldr	r3, [pc, #108]	; (24e70 <wait_for_bootrom+0x180>)
   24e02:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   24e04:	4b1b      	ldr	r3, [pc, #108]	; (24e74 <wait_for_bootrom+0x184>)
   24e06:	0018      	movs	r0, r3
   24e08:	4b1b      	ldr	r3, [pc, #108]	; (24e78 <wait_for_bootrom+0x188>)
   24e0a:	4798      	blx	r3
   24e0c:	68fa      	ldr	r2, [r7, #12]
   24e0e:	4b1b      	ldr	r3, [pc, #108]	; (24e7c <wait_for_bootrom+0x18c>)
   24e10:	0011      	movs	r1, r2
   24e12:	0018      	movs	r0, r3
   24e14:	4b18      	ldr	r3, [pc, #96]	; (24e78 <wait_for_bootrom+0x188>)
   24e16:	4798      	blx	r3
   24e18:	4b19      	ldr	r3, [pc, #100]	; (24e80 <wait_for_bootrom+0x190>)
   24e1a:	0018      	movs	r0, r3
   24e1c:	4b16      	ldr	r3, [pc, #88]	; (24e78 <wait_for_bootrom+0x188>)
   24e1e:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   24e20:	4a18      	ldr	r2, [pc, #96]	; (24e84 <wait_for_bootrom+0x194>)
   24e22:	4b0b      	ldr	r3, [pc, #44]	; (24e50 <wait_for_bootrom+0x160>)
   24e24:	0011      	movs	r1, r2
   24e26:	0018      	movs	r0, r3
   24e28:	4b0d      	ldr	r3, [pc, #52]	; (24e60 <wait_for_bootrom+0x170>)
   24e2a:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   24e2c:	2313      	movs	r3, #19
   24e2e:	18fb      	adds	r3, r7, r3
   24e30:	781b      	ldrb	r3, [r3, #0]
   24e32:	b25b      	sxtb	r3, r3
}
   24e34:	0018      	movs	r0, r3
   24e36:	46bd      	mov	sp, r7
   24e38:	b008      	add	sp, #32
   24e3a:	bd80      	pop	{r7, pc}
   24e3c:	13301354 	.word	0x13301354
   24e40:	00001014 	.word	0x00001014
   24e44:	00025079 	.word	0x00025079
   24e48:	000227b9 	.word	0x000227b9
   24e4c:	000207bc 	.word	0x000207bc
   24e50:	000c000c 	.word	0x000c000c
   24e54:	10add09e 	.word	0x10add09e
   24e58:	3c1cd57d 	.word	0x3c1cd57d
   24e5c:	000207ac 	.word	0x000207ac
   24e60:	000250bd 	.word	0x000250bd
   24e64:	0000108c 	.word	0x0000108c
   24e68:	00024999 	.word	0x00024999
   24e6c:	0000039f 	.word	0x0000039f
   24e70:	00024869 	.word	0x00024869
   24e74:	0003be10 	.word	0x0003be10
   24e78:	00020349 	.word	0x00020349
   24e7c:	0003be1c 	.word	0x0003be1c
   24e80:	0003bdf0 	.word	0x0003bdf0
   24e84:	ef522f61 	.word	0xef522f61

00024e88 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   24e88:	b580      	push	{r7, lr}
   24e8a:	b088      	sub	sp, #32
   24e8c:	af00      	add	r7, sp, #0
   24e8e:	0002      	movs	r2, r0
   24e90:	1dfb      	adds	r3, r7, #7
   24e92:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24e94:	231f      	movs	r3, #31
   24e96:	18fb      	adds	r3, r7, r3
   24e98:	2200      	movs	r2, #0
   24e9a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24e9c:	2300      	movs	r3, #0
   24e9e:	61bb      	str	r3, [r7, #24]
   24ea0:	2300      	movs	r3, #0
   24ea2:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   24ea4:	2301      	movs	r3, #1
   24ea6:	425b      	negs	r3, r3
   24ea8:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   24eaa:	4b1d      	ldr	r3, [pc, #116]	; (24f20 <wait_for_firmware_start+0x98>)
   24eac:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   24eae:	4b1d      	ldr	r3, [pc, #116]	; (24f24 <wait_for_firmware_start+0x9c>)
   24eb0:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   24eb2:	1dfb      	adds	r3, r7, #7
   24eb4:	781b      	ldrb	r3, [r3, #0]
   24eb6:	2b02      	cmp	r3, #2
   24eb8:	d003      	beq.n	24ec2 <wait_for_firmware_start+0x3a>
   24eba:	1dfb      	adds	r3, r7, #7
   24ebc:	781b      	ldrb	r3, [r3, #0]
   24ebe:	2b03      	cmp	r3, #3
   24ec0:	d119      	bne.n	24ef6 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   24ec2:	4b19      	ldr	r3, [pc, #100]	; (24f28 <wait_for_firmware_start+0xa0>)
   24ec4:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   24ec6:	4b19      	ldr	r3, [pc, #100]	; (24f2c <wait_for_firmware_start+0xa4>)
   24ec8:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   24eca:	e014      	b.n	24ef6 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   24ecc:	2002      	movs	r0, #2
   24ece:	4b18      	ldr	r3, [pc, #96]	; (24f30 <wait_for_firmware_start+0xa8>)
   24ed0:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   24ed2:	68fb      	ldr	r3, [r7, #12]
   24ed4:	0018      	movs	r0, r3
   24ed6:	4b17      	ldr	r3, [pc, #92]	; (24f34 <wait_for_firmware_start+0xac>)
   24ed8:	4798      	blx	r3
   24eda:	0003      	movs	r3, r0
   24edc:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   24ede:	697b      	ldr	r3, [r7, #20]
   24ee0:	3301      	adds	r3, #1
   24ee2:	617b      	str	r3, [r7, #20]
   24ee4:	697a      	ldr	r2, [r7, #20]
   24ee6:	693b      	ldr	r3, [r7, #16]
   24ee8:	429a      	cmp	r2, r3
   24eea:	d304      	bcc.n	24ef6 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   24eec:	231f      	movs	r3, #31
   24eee:	18fb      	adds	r3, r7, r3
   24ef0:	22fb      	movs	r2, #251	; 0xfb
   24ef2:	701a      	strb	r2, [r3, #0]
			goto ERR;
   24ef4:	e00c      	b.n	24f10 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   24ef6:	68ba      	ldr	r2, [r7, #8]
   24ef8:	69bb      	ldr	r3, [r7, #24]
   24efa:	429a      	cmp	r2, r3
   24efc:	d1e6      	bne.n	24ecc <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   24efe:	68bb      	ldr	r3, [r7, #8]
   24f00:	4a08      	ldr	r2, [pc, #32]	; (24f24 <wait_for_firmware_start+0x9c>)
   24f02:	4293      	cmp	r3, r2
   24f04:	d104      	bne.n	24f10 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   24f06:	4b06      	ldr	r3, [pc, #24]	; (24f20 <wait_for_firmware_start+0x98>)
   24f08:	2100      	movs	r1, #0
   24f0a:	0018      	movs	r0, r3
   24f0c:	4b0a      	ldr	r3, [pc, #40]	; (24f38 <wait_for_firmware_start+0xb0>)
   24f0e:	4798      	blx	r3
	}
ERR:
	return ret;
   24f10:	231f      	movs	r3, #31
   24f12:	18fb      	adds	r3, r7, r3
   24f14:	781b      	ldrb	r3, [r3, #0]
   24f16:	b25b      	sxtb	r3, r3
}
   24f18:	0018      	movs	r0, r3
   24f1a:	46bd      	mov	sp, r7
   24f1c:	b008      	add	sp, #32
   24f1e:	bd80      	pop	{r7, pc}
   24f20:	0000108c 	.word	0x0000108c
   24f24:	02532636 	.word	0x02532636
   24f28:	000207ac 	.word	0x000207ac
   24f2c:	d75dc1c3 	.word	0xd75dc1c3
   24f30:	000227b9 	.word	0x000227b9
   24f34:	00025079 	.word	0x00025079
   24f38:	000250bd 	.word	0x000250bd

00024f3c <chip_deinit>:

sint8 chip_deinit(void)
{
   24f3c:	b590      	push	{r4, r7, lr}
   24f3e:	b083      	sub	sp, #12
   24f40:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   24f42:	2300      	movs	r3, #0
   24f44:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   24f46:	1dfc      	adds	r4, r7, #7
   24f48:	003a      	movs	r2, r7
   24f4a:	23a0      	movs	r3, #160	; 0xa0
   24f4c:	015b      	lsls	r3, r3, #5
   24f4e:	0011      	movs	r1, r2
   24f50:	0018      	movs	r0, r3
   24f52:	4b20      	ldr	r3, [pc, #128]	; (24fd4 <chip_deinit+0x98>)
   24f54:	4798      	blx	r3
   24f56:	0003      	movs	r3, r0
   24f58:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   24f5a:	1dfb      	adds	r3, r7, #7
   24f5c:	781b      	ldrb	r3, [r3, #0]
   24f5e:	b25b      	sxtb	r3, r3
   24f60:	2b00      	cmp	r3, #0
   24f62:	d00e      	beq.n	24f82 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   24f64:	4a1c      	ldr	r2, [pc, #112]	; (24fd8 <chip_deinit+0x9c>)
   24f66:	491d      	ldr	r1, [pc, #116]	; (24fdc <chip_deinit+0xa0>)
   24f68:	4b1d      	ldr	r3, [pc, #116]	; (24fe0 <chip_deinit+0xa4>)
   24f6a:	0018      	movs	r0, r3
   24f6c:	4b1d      	ldr	r3, [pc, #116]	; (24fe4 <chip_deinit+0xa8>)
   24f6e:	4798      	blx	r3
   24f70:	4b1d      	ldr	r3, [pc, #116]	; (24fe8 <chip_deinit+0xac>)
   24f72:	0018      	movs	r0, r3
   24f74:	4b1b      	ldr	r3, [pc, #108]	; (24fe4 <chip_deinit+0xa8>)
   24f76:	4798      	blx	r3
   24f78:	4b1c      	ldr	r3, [pc, #112]	; (24fec <chip_deinit+0xb0>)
   24f7a:	0018      	movs	r0, r3
   24f7c:	4b19      	ldr	r3, [pc, #100]	; (24fe4 <chip_deinit+0xa8>)
   24f7e:	4798      	blx	r3
		goto ERR1;
   24f80:	e021      	b.n	24fc6 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   24f82:	683b      	ldr	r3, [r7, #0]
   24f84:	4a1a      	ldr	r2, [pc, #104]	; (24ff0 <chip_deinit+0xb4>)
   24f86:	4013      	ands	r3, r2
   24f88:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   24f8a:	683a      	ldr	r2, [r7, #0]
   24f8c:	1dfc      	adds	r4, r7, #7
   24f8e:	23a0      	movs	r3, #160	; 0xa0
   24f90:	015b      	lsls	r3, r3, #5
   24f92:	0011      	movs	r1, r2
   24f94:	0018      	movs	r0, r3
   24f96:	4b17      	ldr	r3, [pc, #92]	; (24ff4 <chip_deinit+0xb8>)
   24f98:	4798      	blx	r3
   24f9a:	0003      	movs	r3, r0
   24f9c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   24f9e:	1dfb      	adds	r3, r7, #7
   24fa0:	781b      	ldrb	r3, [r3, #0]
   24fa2:	b25b      	sxtb	r3, r3
   24fa4:	2b00      	cmp	r3, #0
   24fa6:	d00e      	beq.n	24fc6 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   24fa8:	4a13      	ldr	r2, [pc, #76]	; (24ff8 <chip_deinit+0xbc>)
   24faa:	490c      	ldr	r1, [pc, #48]	; (24fdc <chip_deinit+0xa0>)
   24fac:	4b0c      	ldr	r3, [pc, #48]	; (24fe0 <chip_deinit+0xa4>)
   24fae:	0018      	movs	r0, r3
   24fb0:	4b0c      	ldr	r3, [pc, #48]	; (24fe4 <chip_deinit+0xa8>)
   24fb2:	4798      	blx	r3
   24fb4:	4b0c      	ldr	r3, [pc, #48]	; (24fe8 <chip_deinit+0xac>)
   24fb6:	0018      	movs	r0, r3
   24fb8:	4b0a      	ldr	r3, [pc, #40]	; (24fe4 <chip_deinit+0xa8>)
   24fba:	4798      	blx	r3
   24fbc:	4b0b      	ldr	r3, [pc, #44]	; (24fec <chip_deinit+0xb0>)
   24fbe:	0018      	movs	r0, r3
   24fc0:	4b08      	ldr	r3, [pc, #32]	; (24fe4 <chip_deinit+0xa8>)
   24fc2:	4798      	blx	r3
		goto ERR1;
   24fc4:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   24fc6:	1dfb      	adds	r3, r7, #7
   24fc8:	781b      	ldrb	r3, [r3, #0]
   24fca:	b25b      	sxtb	r3, r3
}
   24fcc:	0018      	movs	r0, r3
   24fce:	46bd      	mov	sp, r7
   24fd0:	b003      	add	sp, #12
   24fd2:	bd90      	pop	{r4, r7, pc}
   24fd4:	00025099 	.word	0x00025099
   24fd8:	00000201 	.word	0x00000201
   24fdc:	0003be5c 	.word	0x0003be5c
   24fe0:	0003bdc4 	.word	0x0003bdc4
   24fe4:	00020349 	.word	0x00020349
   24fe8:	0003be34 	.word	0x0003be34
   24fec:	0003bdf0 	.word	0x0003bdf0
   24ff0:	fffffbff 	.word	0xfffffbff
   24ff4:	000250bd 	.word	0x000250bd
   24ff8:	00000207 	.word	0x00000207

00024ffc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   24ffc:	b590      	push	{r4, r7, lr}
   24ffe:	b085      	sub	sp, #20
   25000:	af00      	add	r7, sp, #0
   25002:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   25004:	230f      	movs	r3, #15
   25006:	18fb      	adds	r3, r7, r3
   25008:	2200      	movs	r2, #0
   2500a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   2500c:	230f      	movs	r3, #15
   2500e:	18fc      	adds	r4, r7, r3
   25010:	687b      	ldr	r3, [r7, #4]
   25012:	0018      	movs	r0, r3
   25014:	4b05      	ldr	r3, [pc, #20]	; (2502c <nm_bus_iface_init+0x30>)
   25016:	4798      	blx	r3
   25018:	0003      	movs	r3, r0
   2501a:	7023      	strb	r3, [r4, #0]
	return ret;
   2501c:	230f      	movs	r3, #15
   2501e:	18fb      	adds	r3, r7, r3
   25020:	781b      	ldrb	r3, [r3, #0]
   25022:	b25b      	sxtb	r3, r3
}
   25024:	0018      	movs	r0, r3
   25026:	46bd      	mov	sp, r7
   25028:	b005      	add	sp, #20
   2502a:	bd90      	pop	{r4, r7, pc}
   2502c:	00022de5 	.word	0x00022de5

00025030 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   25030:	b590      	push	{r4, r7, lr}
   25032:	b083      	sub	sp, #12
   25034:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   25036:	1dfb      	adds	r3, r7, #7
   25038:	2200      	movs	r2, #0
   2503a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   2503c:	1dfc      	adds	r4, r7, #7
   2503e:	4b05      	ldr	r3, [pc, #20]	; (25054 <nm_bus_iface_deinit+0x24>)
   25040:	4798      	blx	r3
   25042:	0003      	movs	r3, r0
   25044:	7023      	strb	r3, [r4, #0]

	return ret;
   25046:	1dfb      	adds	r3, r7, #7
   25048:	781b      	ldrb	r3, [r3, #0]
   2504a:	b25b      	sxtb	r3, r3
}
   2504c:	0018      	movs	r0, r3
   2504e:	46bd      	mov	sp, r7
   25050:	b003      	add	sp, #12
   25052:	bd90      	pop	{r4, r7, pc}
   25054:	00022f5d 	.word	0x00022f5d

00025058 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   25058:	b580      	push	{r7, lr}
   2505a:	b082      	sub	sp, #8
   2505c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2505e:	1dfb      	adds	r3, r7, #7
   25060:	2200      	movs	r2, #0
   25062:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   25064:	4b03      	ldr	r3, [pc, #12]	; (25074 <nm_bus_reset+0x1c>)
   25066:	4798      	blx	r3
   25068:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   2506a:	0018      	movs	r0, r3
   2506c:	46bd      	mov	sp, r7
   2506e:	b002      	add	sp, #8
   25070:	bd80      	pop	{r7, pc}
   25072:	46c0      	nop			; (mov r8, r8)
   25074:	00026e85 	.word	0x00026e85

00025078 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   25078:	b580      	push	{r7, lr}
   2507a:	b082      	sub	sp, #8
   2507c:	af00      	add	r7, sp, #0
   2507e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   25080:	687b      	ldr	r3, [r7, #4]
   25082:	0018      	movs	r0, r3
   25084:	4b03      	ldr	r3, [pc, #12]	; (25094 <nm_read_reg+0x1c>)
   25086:	4798      	blx	r3
   25088:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   2508a:	0018      	movs	r0, r3
   2508c:	46bd      	mov	sp, r7
   2508e:	b002      	add	sp, #8
   25090:	bd80      	pop	{r7, pc}
   25092:	46c0      	nop			; (mov r8, r8)
   25094:	00027019 	.word	0x00027019

00025098 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25098:	b580      	push	{r7, lr}
   2509a:	b082      	sub	sp, #8
   2509c:	af00      	add	r7, sp, #0
   2509e:	6078      	str	r0, [r7, #4]
   250a0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   250a2:	683a      	ldr	r2, [r7, #0]
   250a4:	687b      	ldr	r3, [r7, #4]
   250a6:	0011      	movs	r1, r2
   250a8:	0018      	movs	r0, r3
   250aa:	4b03      	ldr	r3, [pc, #12]	; (250b8 <nm_read_reg_with_ret+0x20>)
   250ac:	4798      	blx	r3
   250ae:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   250b0:	0018      	movs	r0, r3
   250b2:	46bd      	mov	sp, r7
   250b4:	b002      	add	sp, #8
   250b6:	bd80      	pop	{r7, pc}
   250b8:	0002703d 	.word	0x0002703d

000250bc <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   250bc:	b580      	push	{r7, lr}
   250be:	b082      	sub	sp, #8
   250c0:	af00      	add	r7, sp, #0
   250c2:	6078      	str	r0, [r7, #4]
   250c4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   250c6:	683a      	ldr	r2, [r7, #0]
   250c8:	687b      	ldr	r3, [r7, #4]
   250ca:	0011      	movs	r1, r2
   250cc:	0018      	movs	r0, r3
   250ce:	4b03      	ldr	r3, [pc, #12]	; (250dc <nm_write_reg+0x20>)
   250d0:	4798      	blx	r3
   250d2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   250d4:	0018      	movs	r0, r3
   250d6:	46bd      	mov	sp, r7
   250d8:	b002      	add	sp, #8
   250da:	bd80      	pop	{r7, pc}
   250dc:	0002708d 	.word	0x0002708d

000250e0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   250e0:	b580      	push	{r7, lr}
   250e2:	b084      	sub	sp, #16
   250e4:	af00      	add	r7, sp, #0
   250e6:	60f8      	str	r0, [r7, #12]
   250e8:	60b9      	str	r1, [r7, #8]
   250ea:	1dbb      	adds	r3, r7, #6
   250ec:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   250ee:	1dbb      	adds	r3, r7, #6
   250f0:	881a      	ldrh	r2, [r3, #0]
   250f2:	68b9      	ldr	r1, [r7, #8]
   250f4:	68fb      	ldr	r3, [r7, #12]
   250f6:	0018      	movs	r0, r3
   250f8:	4b03      	ldr	r3, [pc, #12]	; (25108 <p_nm_read_block+0x28>)
   250fa:	4798      	blx	r3
   250fc:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   250fe:	0018      	movs	r0, r3
   25100:	46bd      	mov	sp, r7
   25102:	b004      	add	sp, #16
   25104:	bd80      	pop	{r7, pc}
   25106:	46c0      	nop			; (mov r8, r8)
   25108:	000270dd 	.word	0x000270dd

0002510c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2510c:	b580      	push	{r7, lr}
   2510e:	b086      	sub	sp, #24
   25110:	af00      	add	r7, sp, #0
   25112:	60f8      	str	r0, [r7, #12]
   25114:	60b9      	str	r1, [r7, #8]
   25116:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   25118:	4b2d      	ldr	r3, [pc, #180]	; (251d0 <nm_read_block+0xc4>)
   2511a:	881a      	ldrh	r2, [r3, #0]
   2511c:	2310      	movs	r3, #16
   2511e:	18fb      	adds	r3, r7, r3
   25120:	3a08      	subs	r2, #8
   25122:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   25124:	2300      	movs	r3, #0
   25126:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25128:	2313      	movs	r3, #19
   2512a:	18fb      	adds	r3, r7, r3
   2512c:	2200      	movs	r2, #0
   2512e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25130:	2310      	movs	r3, #16
   25132:	18fb      	adds	r3, r7, r3
   25134:	881a      	ldrh	r2, [r3, #0]
   25136:	687b      	ldr	r3, [r7, #4]
   25138:	429a      	cmp	r2, r3
   2513a:	d313      	bcc.n	25164 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2513c:	68ba      	ldr	r2, [r7, #8]
   2513e:	697b      	ldr	r3, [r7, #20]
   25140:	18d1      	adds	r1, r2, r3
   25142:	687b      	ldr	r3, [r7, #4]
   25144:	b29a      	uxth	r2, r3
   25146:	68fb      	ldr	r3, [r7, #12]
   25148:	0018      	movs	r0, r3
   2514a:	4b22      	ldr	r3, [pc, #136]	; (251d4 <nm_read_block+0xc8>)
   2514c:	4798      	blx	r3
   2514e:	0003      	movs	r3, r0
   25150:	b2da      	uxtb	r2, r3
   25152:	2313      	movs	r3, #19
   25154:	18fb      	adds	r3, r7, r3
   25156:	781b      	ldrb	r3, [r3, #0]
   25158:	18d3      	adds	r3, r2, r3
   2515a:	b2da      	uxtb	r2, r3
   2515c:	2313      	movs	r3, #19
   2515e:	18fb      	adds	r3, r7, r3
   25160:	701a      	strb	r2, [r3, #0]
			break;
   25162:	e02d      	b.n	251c0 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   25164:	68ba      	ldr	r2, [r7, #8]
   25166:	697b      	ldr	r3, [r7, #20]
   25168:	18d1      	adds	r1, r2, r3
   2516a:	2310      	movs	r3, #16
   2516c:	18fb      	adds	r3, r7, r3
   2516e:	881a      	ldrh	r2, [r3, #0]
   25170:	68fb      	ldr	r3, [r7, #12]
   25172:	0018      	movs	r0, r3
   25174:	4b17      	ldr	r3, [pc, #92]	; (251d4 <nm_read_block+0xc8>)
   25176:	4798      	blx	r3
   25178:	0003      	movs	r3, r0
   2517a:	b2da      	uxtb	r2, r3
   2517c:	2313      	movs	r3, #19
   2517e:	18fb      	adds	r3, r7, r3
   25180:	781b      	ldrb	r3, [r3, #0]
   25182:	18d3      	adds	r3, r2, r3
   25184:	b2da      	uxtb	r2, r3
   25186:	2313      	movs	r3, #19
   25188:	18fb      	adds	r3, r7, r3
   2518a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2518c:	2313      	movs	r3, #19
   2518e:	18fb      	adds	r3, r7, r3
   25190:	781b      	ldrb	r3, [r3, #0]
   25192:	b25b      	sxtb	r3, r3
   25194:	2b00      	cmp	r3, #0
   25196:	d112      	bne.n	251be <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   25198:	2310      	movs	r3, #16
   2519a:	18fb      	adds	r3, r7, r3
   2519c:	881b      	ldrh	r3, [r3, #0]
   2519e:	687a      	ldr	r2, [r7, #4]
   251a0:	1ad3      	subs	r3, r2, r3
   251a2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   251a4:	2310      	movs	r3, #16
   251a6:	18fb      	adds	r3, r7, r3
   251a8:	881b      	ldrh	r3, [r3, #0]
   251aa:	697a      	ldr	r2, [r7, #20]
   251ac:	18d3      	adds	r3, r2, r3
   251ae:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   251b0:	2310      	movs	r3, #16
   251b2:	18fb      	adds	r3, r7, r3
   251b4:	881b      	ldrh	r3, [r3, #0]
   251b6:	68fa      	ldr	r2, [r7, #12]
   251b8:	18d3      	adds	r3, r2, r3
   251ba:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   251bc:	e7b8      	b.n	25130 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   251be:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   251c0:	2313      	movs	r3, #19
   251c2:	18fb      	adds	r3, r7, r3
   251c4:	781b      	ldrb	r3, [r3, #0]
   251c6:	b25b      	sxtb	r3, r3
}
   251c8:	0018      	movs	r0, r3
   251ca:	46bd      	mov	sp, r7
   251cc:	b006      	add	sp, #24
   251ce:	bd80      	pop	{r7, pc}
   251d0:	2000012c 	.word	0x2000012c
   251d4:	000250e1 	.word	0x000250e1

000251d8 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   251d8:	b580      	push	{r7, lr}
   251da:	b084      	sub	sp, #16
   251dc:	af00      	add	r7, sp, #0
   251de:	60f8      	str	r0, [r7, #12]
   251e0:	60b9      	str	r1, [r7, #8]
   251e2:	1dbb      	adds	r3, r7, #6
   251e4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   251e6:	1dbb      	adds	r3, r7, #6
   251e8:	881a      	ldrh	r2, [r3, #0]
   251ea:	68b9      	ldr	r1, [r7, #8]
   251ec:	68fb      	ldr	r3, [r7, #12]
   251ee:	0018      	movs	r0, r3
   251f0:	4b03      	ldr	r3, [pc, #12]	; (25200 <p_nm_write_block+0x28>)
   251f2:	4798      	blx	r3
   251f4:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   251f6:	0018      	movs	r0, r3
   251f8:	46bd      	mov	sp, r7
   251fa:	b004      	add	sp, #16
   251fc:	bd80      	pop	{r7, pc}
   251fe:	46c0      	nop			; (mov r8, r8)
   25200:	00027135 	.word	0x00027135

00025204 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   25204:	b580      	push	{r7, lr}
   25206:	b086      	sub	sp, #24
   25208:	af00      	add	r7, sp, #0
   2520a:	60f8      	str	r0, [r7, #12]
   2520c:	60b9      	str	r1, [r7, #8]
   2520e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   25210:	4b2d      	ldr	r3, [pc, #180]	; (252c8 <nm_write_block+0xc4>)
   25212:	881a      	ldrh	r2, [r3, #0]
   25214:	2310      	movs	r3, #16
   25216:	18fb      	adds	r3, r7, r3
   25218:	3a08      	subs	r2, #8
   2521a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2521c:	2300      	movs	r3, #0
   2521e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25220:	2313      	movs	r3, #19
   25222:	18fb      	adds	r3, r7, r3
   25224:	2200      	movs	r2, #0
   25226:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25228:	2310      	movs	r3, #16
   2522a:	18fb      	adds	r3, r7, r3
   2522c:	881a      	ldrh	r2, [r3, #0]
   2522e:	687b      	ldr	r3, [r7, #4]
   25230:	429a      	cmp	r2, r3
   25232:	d313      	bcc.n	2525c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   25234:	68ba      	ldr	r2, [r7, #8]
   25236:	697b      	ldr	r3, [r7, #20]
   25238:	18d1      	adds	r1, r2, r3
   2523a:	687b      	ldr	r3, [r7, #4]
   2523c:	b29a      	uxth	r2, r3
   2523e:	68fb      	ldr	r3, [r7, #12]
   25240:	0018      	movs	r0, r3
   25242:	4b22      	ldr	r3, [pc, #136]	; (252cc <nm_write_block+0xc8>)
   25244:	4798      	blx	r3
   25246:	0003      	movs	r3, r0
   25248:	b2da      	uxtb	r2, r3
   2524a:	2313      	movs	r3, #19
   2524c:	18fb      	adds	r3, r7, r3
   2524e:	781b      	ldrb	r3, [r3, #0]
   25250:	18d3      	adds	r3, r2, r3
   25252:	b2da      	uxtb	r2, r3
   25254:	2313      	movs	r3, #19
   25256:	18fb      	adds	r3, r7, r3
   25258:	701a      	strb	r2, [r3, #0]
			break;
   2525a:	e02d      	b.n	252b8 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2525c:	68ba      	ldr	r2, [r7, #8]
   2525e:	697b      	ldr	r3, [r7, #20]
   25260:	18d1      	adds	r1, r2, r3
   25262:	2310      	movs	r3, #16
   25264:	18fb      	adds	r3, r7, r3
   25266:	881a      	ldrh	r2, [r3, #0]
   25268:	68fb      	ldr	r3, [r7, #12]
   2526a:	0018      	movs	r0, r3
   2526c:	4b17      	ldr	r3, [pc, #92]	; (252cc <nm_write_block+0xc8>)
   2526e:	4798      	blx	r3
   25270:	0003      	movs	r3, r0
   25272:	b2da      	uxtb	r2, r3
   25274:	2313      	movs	r3, #19
   25276:	18fb      	adds	r3, r7, r3
   25278:	781b      	ldrb	r3, [r3, #0]
   2527a:	18d3      	adds	r3, r2, r3
   2527c:	b2da      	uxtb	r2, r3
   2527e:	2313      	movs	r3, #19
   25280:	18fb      	adds	r3, r7, r3
   25282:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   25284:	2313      	movs	r3, #19
   25286:	18fb      	adds	r3, r7, r3
   25288:	781b      	ldrb	r3, [r3, #0]
   2528a:	b25b      	sxtb	r3, r3
   2528c:	2b00      	cmp	r3, #0
   2528e:	d112      	bne.n	252b6 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   25290:	2310      	movs	r3, #16
   25292:	18fb      	adds	r3, r7, r3
   25294:	881b      	ldrh	r3, [r3, #0]
   25296:	687a      	ldr	r2, [r7, #4]
   25298:	1ad3      	subs	r3, r2, r3
   2529a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2529c:	2310      	movs	r3, #16
   2529e:	18fb      	adds	r3, r7, r3
   252a0:	881b      	ldrh	r3, [r3, #0]
   252a2:	697a      	ldr	r2, [r7, #20]
   252a4:	18d3      	adds	r3, r2, r3
   252a6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   252a8:	2310      	movs	r3, #16
   252aa:	18fb      	adds	r3, r7, r3
   252ac:	881b      	ldrh	r3, [r3, #0]
   252ae:	68fa      	ldr	r2, [r7, #12]
   252b0:	18d3      	adds	r3, r2, r3
   252b2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   252b4:	e7b8      	b.n	25228 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   252b6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   252b8:	2313      	movs	r3, #19
   252ba:	18fb      	adds	r3, r7, r3
   252bc:	781b      	ldrb	r3, [r3, #0]
   252be:	b25b      	sxtb	r3, r3
}
   252c0:	0018      	movs	r0, r3
   252c2:	46bd      	mov	sp, r7
   252c4:	b006      	add	sp, #24
   252c6:	bd80      	pop	{r7, pc}
   252c8:	2000012c 	.word	0x2000012c
   252cc:	000251d9 	.word	0x000251d9

000252d0 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   252d0:	b590      	push	{r4, r7, lr}
   252d2:	b089      	sub	sp, #36	; 0x24
   252d4:	af00      	add	r7, sp, #0
   252d6:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   252d8:	2300      	movs	r3, #0
   252da:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   252dc:	231f      	movs	r3, #31
   252de:	18fb      	adds	r3, r7, r3
   252e0:	2200      	movs	r2, #0
   252e2:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   252e4:	230c      	movs	r3, #12
   252e6:	18fb      	adds	r3, r7, r3
   252e8:	0018      	movs	r0, r3
   252ea:	2308      	movs	r3, #8
   252ec:	001a      	movs	r2, r3
   252ee:	2100      	movs	r1, #0
   252f0:	4b64      	ldr	r3, [pc, #400]	; (25484 <nm_get_firmware_full_info+0x1b4>)
   252f2:	4798      	blx	r3
	if (pstrRev != NULL)
   252f4:	687b      	ldr	r3, [r7, #4]
   252f6:	2b00      	cmp	r3, #0
   252f8:	d100      	bne.n	252fc <nm_get_firmware_full_info+0x2c>
   252fa:	e0ba      	b.n	25472 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   252fc:	687b      	ldr	r3, [r7, #4]
   252fe:	2228      	movs	r2, #40	; 0x28
   25300:	2100      	movs	r1, #0
   25302:	0018      	movs	r0, r3
   25304:	4b60      	ldr	r3, [pc, #384]	; (25488 <nm_get_firmware_full_info+0x1b8>)
   25306:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   25308:	231f      	movs	r3, #31
   2530a:	18fc      	adds	r4, r7, r3
   2530c:	2314      	movs	r3, #20
   2530e:	18fb      	adds	r3, r7, r3
   25310:	4a5e      	ldr	r2, [pc, #376]	; (2548c <nm_get_firmware_full_info+0x1bc>)
   25312:	0019      	movs	r1, r3
   25314:	0010      	movs	r0, r2
   25316:	4b5e      	ldr	r3, [pc, #376]	; (25490 <nm_get_firmware_full_info+0x1c0>)
   25318:	4798      	blx	r3
   2531a:	0003      	movs	r3, r0
   2531c:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   2531e:	231f      	movs	r3, #31
   25320:	18fb      	adds	r3, r7, r3
   25322:	781b      	ldrb	r3, [r3, #0]
   25324:	b25b      	sxtb	r3, r3
   25326:	2b00      	cmp	r3, #0
   25328:	d000      	beq.n	2532c <nm_get_firmware_full_info+0x5c>
   2532a:	e0a2      	b.n	25472 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   2532c:	697b      	ldr	r3, [r7, #20]
   2532e:	2b00      	cmp	r3, #0
   25330:	d100      	bne.n	25334 <nm_get_firmware_full_info+0x64>
   25332:	e09a      	b.n	2546a <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   25334:	697b      	ldr	r3, [r7, #20]
   25336:	22c0      	movs	r2, #192	; 0xc0
   25338:	0292      	lsls	r2, r2, #10
   2533a:	4313      	orrs	r3, r2
   2533c:	221f      	movs	r2, #31
   2533e:	18bc      	adds	r4, r7, r2
   25340:	220c      	movs	r2, #12
   25342:	18b9      	adds	r1, r7, r2
   25344:	2208      	movs	r2, #8
   25346:	0018      	movs	r0, r3
   25348:	4b52      	ldr	r3, [pc, #328]	; (25494 <nm_get_firmware_full_info+0x1c4>)
   2534a:	4798      	blx	r3
   2534c:	0003      	movs	r3, r0
   2534e:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   25350:	231f      	movs	r3, #31
   25352:	18fb      	adds	r3, r7, r3
   25354:	781b      	ldrb	r3, [r3, #0]
   25356:	b25b      	sxtb	r3, r3
   25358:	2b00      	cmp	r3, #0
   2535a:	d000      	beq.n	2535e <nm_get_firmware_full_info+0x8e>
   2535c:	e089      	b.n	25472 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   2535e:	230c      	movs	r3, #12
   25360:	18fb      	adds	r3, r7, r3
   25362:	685b      	ldr	r3, [r3, #4]
   25364:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   25366:	697b      	ldr	r3, [r7, #20]
   25368:	041b      	lsls	r3, r3, #16
   2536a:	0c1b      	lsrs	r3, r3, #16
   2536c:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   2536e:	697b      	ldr	r3, [r7, #20]
   25370:	2b00      	cmp	r3, #0
   25372:	d100      	bne.n	25376 <nm_get_firmware_full_info+0xa6>
   25374:	e074      	b.n	25460 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   25376:	697b      	ldr	r3, [r7, #20]
   25378:	22c0      	movs	r2, #192	; 0xc0
   2537a:	0292      	lsls	r2, r2, #10
   2537c:	4313      	orrs	r3, r2
   2537e:	221f      	movs	r2, #31
   25380:	18bc      	adds	r4, r7, r2
   25382:	6879      	ldr	r1, [r7, #4]
   25384:	2228      	movs	r2, #40	; 0x28
   25386:	0018      	movs	r0, r3
   25388:	4b42      	ldr	r3, [pc, #264]	; (25494 <nm_get_firmware_full_info+0x1c4>)
   2538a:	4798      	blx	r3
   2538c:	0003      	movs	r3, r0
   2538e:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   25390:	231f      	movs	r3, #31
   25392:	18fb      	adds	r3, r7, r3
   25394:	781b      	ldrb	r3, [r3, #0]
   25396:	b25b      	sxtb	r3, r3
   25398:	2b00      	cmp	r3, #0
   2539a:	d16a      	bne.n	25472 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   2539c:	687b      	ldr	r3, [r7, #4]
   2539e:	791b      	ldrb	r3, [r3, #4]
   253a0:	021b      	lsls	r3, r3, #8
   253a2:	b21a      	sxth	r2, r3
   253a4:	687b      	ldr	r3, [r7, #4]
   253a6:	795b      	ldrb	r3, [r3, #5]
   253a8:	011b      	lsls	r3, r3, #4
   253aa:	b21b      	sxth	r3, r3
   253ac:	21ff      	movs	r1, #255	; 0xff
   253ae:	400b      	ands	r3, r1
   253b0:	b21b      	sxth	r3, r3
   253b2:	4313      	orrs	r3, r2
   253b4:	b21a      	sxth	r2, r3
   253b6:	687b      	ldr	r3, [r7, #4]
   253b8:	799b      	ldrb	r3, [r3, #6]
   253ba:	b21b      	sxth	r3, r3
   253bc:	210f      	movs	r1, #15
   253be:	400b      	ands	r3, r1
   253c0:	b21b      	sxth	r3, r3
   253c2:	4313      	orrs	r3, r2
   253c4:	b21a      	sxth	r2, r3
   253c6:	231c      	movs	r3, #28
   253c8:	18fb      	adds	r3, r7, r3
   253ca:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   253cc:	231a      	movs	r3, #26
   253ce:	18fb      	adds	r3, r7, r3
   253d0:	4a31      	ldr	r2, [pc, #196]	; (25498 <nm_get_firmware_full_info+0x1c8>)
   253d2:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   253d4:	687b      	ldr	r3, [r7, #4]
   253d6:	79db      	ldrb	r3, [r3, #7]
   253d8:	021b      	lsls	r3, r3, #8
   253da:	b21a      	sxth	r2, r3
   253dc:	687b      	ldr	r3, [r7, #4]
   253de:	7a1b      	ldrb	r3, [r3, #8]
   253e0:	011b      	lsls	r3, r3, #4
   253e2:	b21b      	sxth	r3, r3
   253e4:	21ff      	movs	r1, #255	; 0xff
   253e6:	400b      	ands	r3, r1
   253e8:	b21b      	sxth	r3, r3
   253ea:	4313      	orrs	r3, r2
   253ec:	b21a      	sxth	r2, r3
   253ee:	687b      	ldr	r3, [r7, #4]
   253f0:	7a5b      	ldrb	r3, [r3, #9]
   253f2:	b21b      	sxth	r3, r3
   253f4:	210f      	movs	r1, #15
   253f6:	400b      	ands	r3, r1
   253f8:	b21b      	sxth	r3, r3
   253fa:	4313      	orrs	r3, r2
   253fc:	b21a      	sxth	r2, r3
   253fe:	2318      	movs	r3, #24
   25400:	18fb      	adds	r3, r7, r3
   25402:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   25404:	231c      	movs	r3, #28
   25406:	18fb      	adds	r3, r7, r3
   25408:	881b      	ldrh	r3, [r3, #0]
   2540a:	2b00      	cmp	r3, #0
   2540c:	d009      	beq.n	25422 <nm_get_firmware_full_info+0x152>
   2540e:	2318      	movs	r3, #24
   25410:	18fb      	adds	r3, r7, r3
   25412:	881b      	ldrh	r3, [r3, #0]
   25414:	2b00      	cmp	r3, #0
   25416:	d004      	beq.n	25422 <nm_get_firmware_full_info+0x152>
   25418:	2318      	movs	r3, #24
   2541a:	18fb      	adds	r3, r7, r3
   2541c:	881b      	ldrh	r3, [r3, #0]
   2541e:	2b00      	cmp	r3, #0
   25420:	d104      	bne.n	2542c <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   25422:	231f      	movs	r3, #31
   25424:	18fb      	adds	r3, r7, r3
   25426:	22f4      	movs	r2, #244	; 0xf4
   25428:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2542a:	e022      	b.n	25472 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   2542c:	231a      	movs	r3, #26
   2542e:	18fa      	adds	r2, r7, r3
   25430:	2318      	movs	r3, #24
   25432:	18fb      	adds	r3, r7, r3
   25434:	8812      	ldrh	r2, [r2, #0]
   25436:	881b      	ldrh	r3, [r3, #0]
   25438:	429a      	cmp	r2, r3
   2543a:	d204      	bcs.n	25446 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   2543c:	231f      	movs	r3, #31
   2543e:	18fb      	adds	r3, r7, r3
   25440:	22f3      	movs	r2, #243	; 0xf3
   25442:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   25444:	e015      	b.n	25472 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   25446:	231a      	movs	r3, #26
   25448:	18fa      	adds	r2, r7, r3
   2544a:	231c      	movs	r3, #28
   2544c:	18fb      	adds	r3, r7, r3
   2544e:	8812      	ldrh	r2, [r2, #0]
   25450:	881b      	ldrh	r3, [r3, #0]
   25452:	429a      	cmp	r2, r3
   25454:	d90d      	bls.n	25472 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   25456:	231f      	movs	r3, #31
   25458:	18fb      	adds	r3, r7, r3
   2545a:	22f3      	movs	r2, #243	; 0xf3
   2545c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2545e:	e008      	b.n	25472 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   25460:	231f      	movs	r3, #31
   25462:	18fb      	adds	r3, r7, r3
   25464:	22f4      	movs	r2, #244	; 0xf4
   25466:	701a      	strb	r2, [r3, #0]
   25468:	e003      	b.n	25472 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   2546a:	231f      	movs	r3, #31
   2546c:	18fb      	adds	r3, r7, r3
   2546e:	22f4      	movs	r2, #244	; 0xf4
   25470:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   25472:	231f      	movs	r3, #31
   25474:	18fb      	adds	r3, r7, r3
   25476:	781b      	ldrb	r3, [r3, #0]
   25478:	b25b      	sxtb	r3, r3
}
   2547a:	0018      	movs	r0, r3
   2547c:	46bd      	mov	sp, r7
   2547e:	b009      	add	sp, #36	; 0x24
   25480:	bd90      	pop	{r4, r7, pc}
   25482:	46c0      	nop			; (mov r8, r8)
   25484:	0003796b 	.word	0x0003796b
   25488:	00023009 	.word	0x00023009
   2548c:	000c0008 	.word	0x000c0008
   25490:	00025099 	.word	0x00025099
   25494:	0002510d 	.word	0x0002510d
   25498:	00001354 	.word	0x00001354

0002549c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   2549c:	b590      	push	{r4, r7, lr}
   2549e:	b085      	sub	sp, #20
   254a0:	af00      	add	r7, sp, #0
   254a2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   254a4:	230f      	movs	r3, #15
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	2200      	movs	r2, #0
   254aa:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   254ac:	687b      	ldr	r3, [r7, #4]
   254ae:	2b00      	cmp	r3, #0
   254b0:	d013      	beq.n	254da <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   254b2:	230e      	movs	r3, #14
   254b4:	18fb      	adds	r3, r7, r3
   254b6:	687a      	ldr	r2, [r7, #4]
   254b8:	7812      	ldrb	r2, [r2, #0]
   254ba:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   254bc:	230e      	movs	r3, #14
   254be:	18fb      	adds	r3, r7, r3
   254c0:	781b      	ldrb	r3, [r3, #0]
   254c2:	2b00      	cmp	r3, #0
   254c4:	d004      	beq.n	254d0 <nm_drv_init+0x34>
   254c6:	230e      	movs	r3, #14
   254c8:	18fb      	adds	r3, r7, r3
   254ca:	781b      	ldrb	r3, [r3, #0]
   254cc:	2b04      	cmp	r3, #4
   254ce:	d908      	bls.n	254e2 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   254d0:	230e      	movs	r3, #14
   254d2:	18fb      	adds	r3, r7, r3
   254d4:	2201      	movs	r2, #1
   254d6:	701a      	strb	r2, [r3, #0]
   254d8:	e003      	b.n	254e2 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   254da:	230e      	movs	r3, #14
   254dc:	18fb      	adds	r3, r7, r3
   254de:	2201      	movs	r2, #1
   254e0:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   254e2:	230f      	movs	r3, #15
   254e4:	18fc      	adds	r4, r7, r3
   254e6:	2000      	movs	r0, #0
   254e8:	4b41      	ldr	r3, [pc, #260]	; (255f0 <nm_drv_init+0x154>)
   254ea:	4798      	blx	r3
   254ec:	0003      	movs	r3, r0
   254ee:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   254f0:	230f      	movs	r3, #15
   254f2:	18fb      	adds	r3, r7, r3
   254f4:	781b      	ldrb	r3, [r3, #0]
   254f6:	b25b      	sxtb	r3, r3
   254f8:	2b00      	cmp	r3, #0
   254fa:	d00f      	beq.n	2551c <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   254fc:	2390      	movs	r3, #144	; 0x90
   254fe:	005a      	lsls	r2, r3, #1
   25500:	493c      	ldr	r1, [pc, #240]	; (255f4 <nm_drv_init+0x158>)
   25502:	4b3d      	ldr	r3, [pc, #244]	; (255f8 <nm_drv_init+0x15c>)
   25504:	0018      	movs	r0, r3
   25506:	4b3d      	ldr	r3, [pc, #244]	; (255fc <nm_drv_init+0x160>)
   25508:	4798      	blx	r3
   2550a:	4b3d      	ldr	r3, [pc, #244]	; (25600 <nm_drv_init+0x164>)
   2550c:	0018      	movs	r0, r3
   2550e:	4b3b      	ldr	r3, [pc, #236]	; (255fc <nm_drv_init+0x160>)
   25510:	4798      	blx	r3
   25512:	4b3c      	ldr	r3, [pc, #240]	; (25604 <nm_drv_init+0x168>)
   25514:	0018      	movs	r0, r3
   25516:	4b39      	ldr	r3, [pc, #228]	; (255fc <nm_drv_init+0x160>)
   25518:	4798      	blx	r3
		goto ERR1;
   2551a:	e061      	b.n	255e0 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   2551c:	4b3a      	ldr	r3, [pc, #232]	; (25608 <nm_drv_init+0x16c>)
   2551e:	0018      	movs	r0, r3
   25520:	4b36      	ldr	r3, [pc, #216]	; (255fc <nm_drv_init+0x160>)
   25522:	4798      	blx	r3
   25524:	4b39      	ldr	r3, [pc, #228]	; (2560c <nm_drv_init+0x170>)
   25526:	4798      	blx	r3
   25528:	0002      	movs	r2, r0
   2552a:	4b39      	ldr	r3, [pc, #228]	; (25610 <nm_drv_init+0x174>)
   2552c:	0011      	movs	r1, r2
   2552e:	0018      	movs	r0, r3
   25530:	4b32      	ldr	r3, [pc, #200]	; (255fc <nm_drv_init+0x160>)
   25532:	4798      	blx	r3
   25534:	4b33      	ldr	r3, [pc, #204]	; (25604 <nm_drv_init+0x168>)
   25536:	0018      	movs	r0, r3
   25538:	4b30      	ldr	r3, [pc, #192]	; (255fc <nm_drv_init+0x160>)
   2553a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   2553c:	4b35      	ldr	r3, [pc, #212]	; (25614 <nm_drv_init+0x178>)
   2553e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   25540:	230f      	movs	r3, #15
   25542:	18fc      	adds	r4, r7, r3
   25544:	230e      	movs	r3, #14
   25546:	18fb      	adds	r3, r7, r3
   25548:	781b      	ldrb	r3, [r3, #0]
   2554a:	0018      	movs	r0, r3
   2554c:	4b32      	ldr	r3, [pc, #200]	; (25618 <nm_drv_init+0x17c>)
   2554e:	4798      	blx	r3
   25550:	0003      	movs	r3, r0
   25552:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25554:	230f      	movs	r3, #15
   25556:	18fb      	adds	r3, r7, r3
   25558:	781b      	ldrb	r3, [r3, #0]
   2555a:	b25b      	sxtb	r3, r3
   2555c:	2b00      	cmp	r3, #0
   2555e:	d13a      	bne.n	255d6 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   25560:	230f      	movs	r3, #15
   25562:	18fc      	adds	r4, r7, r3
   25564:	230e      	movs	r3, #14
   25566:	18fb      	adds	r3, r7, r3
   25568:	781b      	ldrb	r3, [r3, #0]
   2556a:	0018      	movs	r0, r3
   2556c:	4b2b      	ldr	r3, [pc, #172]	; (2561c <nm_drv_init+0x180>)
   2556e:	4798      	blx	r3
   25570:	0003      	movs	r3, r0
   25572:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25574:	230f      	movs	r3, #15
   25576:	18fb      	adds	r3, r7, r3
   25578:	781b      	ldrb	r3, [r3, #0]
   2557a:	b25b      	sxtb	r3, r3
   2557c:	2b00      	cmp	r3, #0
   2557e:	d12c      	bne.n	255da <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   25580:	230e      	movs	r3, #14
   25582:	18fb      	adds	r3, r7, r3
   25584:	781b      	ldrb	r3, [r3, #0]
   25586:	2b02      	cmp	r3, #2
   25588:	d02a      	beq.n	255e0 <nm_drv_init+0x144>
   2558a:	230e      	movs	r3, #14
   2558c:	18fb      	adds	r3, r7, r3
   2558e:	781b      	ldrb	r3, [r3, #0]
   25590:	2b03      	cmp	r3, #3
   25592:	d025      	beq.n	255e0 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   25594:	230f      	movs	r3, #15
   25596:	18fc      	adds	r4, r7, r3
   25598:	4b21      	ldr	r3, [pc, #132]	; (25620 <nm_drv_init+0x184>)
   2559a:	4798      	blx	r3
   2559c:	0003      	movs	r3, r0
   2559e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   255a0:	230f      	movs	r3, #15
   255a2:	18fb      	adds	r3, r7, r3
   255a4:	781b      	ldrb	r3, [r3, #0]
   255a6:	b25b      	sxtb	r3, r3
   255a8:	2b00      	cmp	r3, #0
   255aa:	d00f      	beq.n	255cc <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   255ac:	23a7      	movs	r3, #167	; 0xa7
   255ae:	005a      	lsls	r2, r3, #1
   255b0:	4910      	ldr	r1, [pc, #64]	; (255f4 <nm_drv_init+0x158>)
   255b2:	4b11      	ldr	r3, [pc, #68]	; (255f8 <nm_drv_init+0x15c>)
   255b4:	0018      	movs	r0, r3
   255b6:	4b11      	ldr	r3, [pc, #68]	; (255fc <nm_drv_init+0x160>)
   255b8:	4798      	blx	r3
   255ba:	4b1a      	ldr	r3, [pc, #104]	; (25624 <nm_drv_init+0x188>)
   255bc:	0018      	movs	r0, r3
   255be:	4b0f      	ldr	r3, [pc, #60]	; (255fc <nm_drv_init+0x160>)
   255c0:	4798      	blx	r3
   255c2:	4b10      	ldr	r3, [pc, #64]	; (25604 <nm_drv_init+0x168>)
   255c4:	0018      	movs	r0, r3
   255c6:	4b0d      	ldr	r3, [pc, #52]	; (255fc <nm_drv_init+0x160>)
   255c8:	4798      	blx	r3
		goto ERR2;
   255ca:	e007      	b.n	255dc <nm_drv_init+0x140>
	}
	return ret;
   255cc:	230f      	movs	r3, #15
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	781b      	ldrb	r3, [r3, #0]
   255d2:	b25b      	sxtb	r3, r3
   255d4:	e008      	b.n	255e8 <nm_drv_init+0x14c>
		goto ERR2;
   255d6:	46c0      	nop			; (mov r8, r8)
   255d8:	e000      	b.n	255dc <nm_drv_init+0x140>
		goto ERR2;
   255da:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   255dc:	4b12      	ldr	r3, [pc, #72]	; (25628 <nm_drv_init+0x18c>)
   255de:	4798      	blx	r3
ERR1:
	return ret;
   255e0:	230f      	movs	r3, #15
   255e2:	18fb      	adds	r3, r7, r3
   255e4:	781b      	ldrb	r3, [r3, #0]
   255e6:	b25b      	sxtb	r3, r3
}
   255e8:	0018      	movs	r0, r3
   255ea:	46bd      	mov	sp, r7
   255ec:	b005      	add	sp, #20
   255ee:	bd90      	pop	{r4, r7, pc}
   255f0:	00024ffd 	.word	0x00024ffd
   255f4:	0003bf38 	.word	0x0003bf38
   255f8:	0003be68 	.word	0x0003be68
   255fc:	00020349 	.word	0x00020349
   25600:	0003be7c 	.word	0x0003be7c
   25604:	0003be98 	.word	0x0003be98
   25608:	0003be9c 	.word	0x0003be9c
   2560c:	00024999 	.word	0x00024999
   25610:	0003bea8 	.word	0x0003bea8
   25614:	00026eb5 	.word	0x00026eb5
   25618:	00024cf1 	.word	0x00024cf1
   2561c:	00024e89 	.word	0x00024e89
   25620:	000248e5 	.word	0x000248e5
   25624:	0003beb8 	.word	0x0003beb8
   25628:	00025031 	.word	0x00025031

0002562c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   2562c:	b590      	push	{r4, r7, lr}
   2562e:	b085      	sub	sp, #20
   25630:	af00      	add	r7, sp, #0
   25632:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   25634:	230f      	movs	r3, #15
   25636:	18fc      	adds	r4, r7, r3
   25638:	4b2e      	ldr	r3, [pc, #184]	; (256f4 <nm_drv_deinit+0xc8>)
   2563a:	4798      	blx	r3
   2563c:	0003      	movs	r3, r0
   2563e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25640:	230f      	movs	r3, #15
   25642:	18fb      	adds	r3, r7, r3
   25644:	781b      	ldrb	r3, [r3, #0]
   25646:	b25b      	sxtb	r3, r3
   25648:	2b00      	cmp	r3, #0
   2564a:	d010      	beq.n	2566e <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   2564c:	2366      	movs	r3, #102	; 0x66
   2564e:	33ff      	adds	r3, #255	; 0xff
   25650:	001a      	movs	r2, r3
   25652:	4929      	ldr	r1, [pc, #164]	; (256f8 <nm_drv_deinit+0xcc>)
   25654:	4b29      	ldr	r3, [pc, #164]	; (256fc <nm_drv_deinit+0xd0>)
   25656:	0018      	movs	r0, r3
   25658:	4b29      	ldr	r3, [pc, #164]	; (25700 <nm_drv_deinit+0xd4>)
   2565a:	4798      	blx	r3
   2565c:	4b29      	ldr	r3, [pc, #164]	; (25704 <nm_drv_deinit+0xd8>)
   2565e:	0018      	movs	r0, r3
   25660:	4b27      	ldr	r3, [pc, #156]	; (25700 <nm_drv_deinit+0xd4>)
   25662:	4798      	blx	r3
   25664:	4b28      	ldr	r3, [pc, #160]	; (25708 <nm_drv_deinit+0xdc>)
   25666:	0018      	movs	r0, r3
   25668:	4b25      	ldr	r3, [pc, #148]	; (25700 <nm_drv_deinit+0xd4>)
   2566a:	4798      	blx	r3
		goto ERR1;
   2566c:	e03a      	b.n	256e4 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   2566e:	230f      	movs	r3, #15
   25670:	18fc      	adds	r4, r7, r3
   25672:	2000      	movs	r0, #0
   25674:	4b25      	ldr	r3, [pc, #148]	; (2570c <nm_drv_deinit+0xe0>)
   25676:	4798      	blx	r3
   25678:	0003      	movs	r3, r0
   2567a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2567c:	230f      	movs	r3, #15
   2567e:	18fb      	adds	r3, r7, r3
   25680:	781b      	ldrb	r3, [r3, #0]
   25682:	b25b      	sxtb	r3, r3
   25684:	2b00      	cmp	r3, #0
   25686:	d00f      	beq.n	256a8 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   25688:	23b6      	movs	r3, #182	; 0xb6
   2568a:	005a      	lsls	r2, r3, #1
   2568c:	491a      	ldr	r1, [pc, #104]	; (256f8 <nm_drv_deinit+0xcc>)
   2568e:	4b1b      	ldr	r3, [pc, #108]	; (256fc <nm_drv_deinit+0xd0>)
   25690:	0018      	movs	r0, r3
   25692:	4b1b      	ldr	r3, [pc, #108]	; (25700 <nm_drv_deinit+0xd4>)
   25694:	4798      	blx	r3
   25696:	4b1e      	ldr	r3, [pc, #120]	; (25710 <nm_drv_deinit+0xe4>)
   25698:	0018      	movs	r0, r3
   2569a:	4b19      	ldr	r3, [pc, #100]	; (25700 <nm_drv_deinit+0xd4>)
   2569c:	4798      	blx	r3
   2569e:	4b1a      	ldr	r3, [pc, #104]	; (25708 <nm_drv_deinit+0xdc>)
   256a0:	0018      	movs	r0, r3
   256a2:	4b17      	ldr	r3, [pc, #92]	; (25700 <nm_drv_deinit+0xd4>)
   256a4:	4798      	blx	r3
		goto ERR1;
   256a6:	e01d      	b.n	256e4 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   256a8:	230f      	movs	r3, #15
   256aa:	18fc      	adds	r4, r7, r3
   256ac:	4b19      	ldr	r3, [pc, #100]	; (25714 <nm_drv_deinit+0xe8>)
   256ae:	4798      	blx	r3
   256b0:	0003      	movs	r3, r0
   256b2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   256b4:	230f      	movs	r3, #15
   256b6:	18fb      	adds	r3, r7, r3
   256b8:	781b      	ldrb	r3, [r3, #0]
   256ba:	b25b      	sxtb	r3, r3
   256bc:	2b00      	cmp	r3, #0
   256be:	d00f      	beq.n	256e0 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   256c0:	23b9      	movs	r3, #185	; 0xb9
   256c2:	005a      	lsls	r2, r3, #1
   256c4:	490c      	ldr	r1, [pc, #48]	; (256f8 <nm_drv_deinit+0xcc>)
   256c6:	4b0d      	ldr	r3, [pc, #52]	; (256fc <nm_drv_deinit+0xd0>)
   256c8:	0018      	movs	r0, r3
   256ca:	4b0d      	ldr	r3, [pc, #52]	; (25700 <nm_drv_deinit+0xd4>)
   256cc:	4798      	blx	r3
   256ce:	4b12      	ldr	r3, [pc, #72]	; (25718 <nm_drv_deinit+0xec>)
   256d0:	0018      	movs	r0, r3
   256d2:	4b0b      	ldr	r3, [pc, #44]	; (25700 <nm_drv_deinit+0xd4>)
   256d4:	4798      	blx	r3
   256d6:	4b0c      	ldr	r3, [pc, #48]	; (25708 <nm_drv_deinit+0xdc>)
   256d8:	0018      	movs	r0, r3
   256da:	4b09      	ldr	r3, [pc, #36]	; (25700 <nm_drv_deinit+0xd4>)
   256dc:	4798      	blx	r3
		goto ERR1;
   256de:	e001      	b.n	256e4 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   256e0:	4b0e      	ldr	r3, [pc, #56]	; (2571c <nm_drv_deinit+0xf0>)
   256e2:	4798      	blx	r3
#endif

ERR1:
	return ret;
   256e4:	230f      	movs	r3, #15
   256e6:	18fb      	adds	r3, r7, r3
   256e8:	781b      	ldrb	r3, [r3, #0]
   256ea:	b25b      	sxtb	r3, r3
}
   256ec:	0018      	movs	r0, r3
   256ee:	46bd      	mov	sp, r7
   256f0:	b005      	add	sp, #20
   256f2:	bd90      	pop	{r4, r7, pc}
   256f4:	00024f3d 	.word	0x00024f3d
   256f8:	0003bf44 	.word	0x0003bf44
   256fc:	0003be68 	.word	0x0003be68
   25700:	00020349 	.word	0x00020349
   25704:	0003bed8 	.word	0x0003bed8
   25708:	0003be98 	.word	0x0003be98
   2570c:	0002835d 	.word	0x0002835d
   25710:	0003bef8 	.word	0x0003bef8
   25714:	00025031 	.word	0x00025031
   25718:	0003bf1c 	.word	0x0003bf1c
   2571c:	00027001 	.word	0x00027001

00025720 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   25720:	b580      	push	{r7, lr}
   25722:	b086      	sub	sp, #24
   25724:	af00      	add	r7, sp, #0
   25726:	6078      	str	r0, [r7, #4]
   25728:	000a      	movs	r2, r1
   2572a:	1cbb      	adds	r3, r7, #2
   2572c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   2572e:	230c      	movs	r3, #12
   25730:	18fb      	adds	r3, r7, r3
   25732:	2200      	movs	r2, #0
   25734:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   25736:	230c      	movs	r3, #12
   25738:	18fb      	adds	r3, r7, r3
   2573a:	687a      	ldr	r2, [r7, #4]
   2573c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2573e:	230c      	movs	r3, #12
   25740:	18fb      	adds	r3, r7, r3
   25742:	1cba      	adds	r2, r7, #2
   25744:	8812      	ldrh	r2, [r2, #0]
   25746:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   25748:	230c      	movs	r3, #12
   2574a:	18fb      	adds	r3, r7, r3
   2574c:	0019      	movs	r1, r3
   2574e:	2003      	movs	r0, #3
   25750:	4b03      	ldr	r3, [pc, #12]	; (25760 <nmi_spi_read+0x40>)
   25752:	4798      	blx	r3
   25754:	0003      	movs	r3, r0
}
   25756:	0018      	movs	r0, r3
   25758:	46bd      	mov	sp, r7
   2575a:	b006      	add	sp, #24
   2575c:	bd80      	pop	{r7, pc}
   2575e:	46c0      	nop			; (mov r8, r8)
   25760:	00022ecd 	.word	0x00022ecd

00025764 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   25764:	b580      	push	{r7, lr}
   25766:	b086      	sub	sp, #24
   25768:	af00      	add	r7, sp, #0
   2576a:	6078      	str	r0, [r7, #4]
   2576c:	000a      	movs	r2, r1
   2576e:	1cbb      	adds	r3, r7, #2
   25770:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   25772:	230c      	movs	r3, #12
   25774:	18fb      	adds	r3, r7, r3
   25776:	687a      	ldr	r2, [r7, #4]
   25778:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   2577a:	230c      	movs	r3, #12
   2577c:	18fb      	adds	r3, r7, r3
   2577e:	2200      	movs	r2, #0
   25780:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25782:	230c      	movs	r3, #12
   25784:	18fb      	adds	r3, r7, r3
   25786:	1cba      	adds	r2, r7, #2
   25788:	8812      	ldrh	r2, [r2, #0]
   2578a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   2578c:	230c      	movs	r3, #12
   2578e:	18fb      	adds	r3, r7, r3
   25790:	0019      	movs	r1, r3
   25792:	2003      	movs	r0, #3
   25794:	4b03      	ldr	r3, [pc, #12]	; (257a4 <nmi_spi_write+0x40>)
   25796:	4798      	blx	r3
   25798:	0003      	movs	r3, r0
}
   2579a:	0018      	movs	r0, r3
   2579c:	46bd      	mov	sp, r7
   2579e:	b006      	add	sp, #24
   257a0:	bd80      	pop	{r7, pc}
   257a2:	46c0      	nop			; (mov r8, r8)
   257a4:	00022ecd 	.word	0x00022ecd

000257a8 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   257a8:	b580      	push	{r7, lr}
   257aa:	b088      	sub	sp, #32
   257ac:	af00      	add	r7, sp, #0
   257ae:	60f8      	str	r0, [r7, #12]
   257b0:	60b9      	str	r1, [r7, #8]
   257b2:	1dbb      	adds	r3, r7, #6
   257b4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   257b6:	2314      	movs	r3, #20
   257b8:	18fb      	adds	r3, r7, r3
   257ba:	68fa      	ldr	r2, [r7, #12]
   257bc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   257be:	2314      	movs	r3, #20
   257c0:	18fb      	adds	r3, r7, r3
   257c2:	68ba      	ldr	r2, [r7, #8]
   257c4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   257c6:	2314      	movs	r3, #20
   257c8:	18fb      	adds	r3, r7, r3
   257ca:	1dba      	adds	r2, r7, #6
   257cc:	8812      	ldrh	r2, [r2, #0]
   257ce:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   257d0:	2314      	movs	r3, #20
   257d2:	18fb      	adds	r3, r7, r3
   257d4:	0019      	movs	r1, r3
   257d6:	2003      	movs	r0, #3
   257d8:	4b03      	ldr	r3, [pc, #12]	; (257e8 <nmi_spi_rw+0x40>)
   257da:	4798      	blx	r3
   257dc:	0003      	movs	r3, r0
}
   257de:	0018      	movs	r0, r3
   257e0:	46bd      	mov	sp, r7
   257e2:	b008      	add	sp, #32
   257e4:	bd80      	pop	{r7, pc}
   257e6:	46c0      	nop			; (mov r8, r8)
   257e8:	00022ecd 	.word	0x00022ecd

000257ec <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   257ec:	b580      	push	{r7, lr}
   257ee:	b082      	sub	sp, #8
   257f0:	af00      	add	r7, sp, #0
   257f2:	0002      	movs	r2, r0
   257f4:	1dfb      	adds	r3, r7, #7
   257f6:	701a      	strb	r2, [r3, #0]
   257f8:	1dbb      	adds	r3, r7, #6
   257fa:	1c0a      	adds	r2, r1, #0
   257fc:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   257fe:	1dfb      	adds	r3, r7, #7
   25800:	781b      	ldrb	r3, [r3, #0]
   25802:	005a      	lsls	r2, r3, #1
   25804:	1dbb      	adds	r3, r7, #6
   25806:	781b      	ldrb	r3, [r3, #0]
   25808:	4053      	eors	r3, r2
   2580a:	4a03      	ldr	r2, [pc, #12]	; (25818 <crc7_byte+0x2c>)
   2580c:	5cd3      	ldrb	r3, [r2, r3]
}
   2580e:	0018      	movs	r0, r3
   25810:	46bd      	mov	sp, r7
   25812:	b002      	add	sp, #8
   25814:	bd80      	pop	{r7, pc}
   25816:	46c0      	nop			; (mov r8, r8)
   25818:	0003bf54 	.word	0x0003bf54

0002581c <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   2581c:	b590      	push	{r4, r7, lr}
   2581e:	b085      	sub	sp, #20
   25820:	af00      	add	r7, sp, #0
   25822:	60b9      	str	r1, [r7, #8]
   25824:	607a      	str	r2, [r7, #4]
   25826:	230f      	movs	r3, #15
   25828:	18fb      	adds	r3, r7, r3
   2582a:	1c02      	adds	r2, r0, #0
   2582c:	701a      	strb	r2, [r3, #0]
	while (len--)
   2582e:	e00e      	b.n	2584e <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   25830:	68bb      	ldr	r3, [r7, #8]
   25832:	1c5a      	adds	r2, r3, #1
   25834:	60ba      	str	r2, [r7, #8]
   25836:	781a      	ldrb	r2, [r3, #0]
   25838:	230f      	movs	r3, #15
   2583a:	18fc      	adds	r4, r7, r3
   2583c:	230f      	movs	r3, #15
   2583e:	18fb      	adds	r3, r7, r3
   25840:	781b      	ldrb	r3, [r3, #0]
   25842:	0011      	movs	r1, r2
   25844:	0018      	movs	r0, r3
   25846:	4b08      	ldr	r3, [pc, #32]	; (25868 <crc7+0x4c>)
   25848:	4798      	blx	r3
   2584a:	0003      	movs	r3, r0
   2584c:	7023      	strb	r3, [r4, #0]
	while (len--)
   2584e:	687b      	ldr	r3, [r7, #4]
   25850:	1e5a      	subs	r2, r3, #1
   25852:	607a      	str	r2, [r7, #4]
   25854:	2b00      	cmp	r3, #0
   25856:	d1eb      	bne.n	25830 <crc7+0x14>
	return crc;
   25858:	230f      	movs	r3, #15
   2585a:	18fb      	adds	r3, r7, r3
   2585c:	781b      	ldrb	r3, [r3, #0]
}
   2585e:	0018      	movs	r0, r3
   25860:	46bd      	mov	sp, r7
   25862:	b005      	add	sp, #20
   25864:	bd90      	pop	{r4, r7, pc}
   25866:	46c0      	nop			; (mov r8, r8)
   25868:	000257ed 	.word	0x000257ed

0002586c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   2586c:	b590      	push	{r4, r7, lr}
   2586e:	b089      	sub	sp, #36	; 0x24
   25870:	af00      	add	r7, sp, #0
   25872:	60b9      	str	r1, [r7, #8]
   25874:	607a      	str	r2, [r7, #4]
   25876:	603b      	str	r3, [r7, #0]
   25878:	230f      	movs	r3, #15
   2587a:	18fb      	adds	r3, r7, r3
   2587c:	1c02      	adds	r2, r0, #0
   2587e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   25880:	231f      	movs	r3, #31
   25882:	18fb      	adds	r3, r7, r3
   25884:	2205      	movs	r2, #5
   25886:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25888:	231e      	movs	r3, #30
   2588a:	18fb      	adds	r3, r7, r3
   2588c:	2201      	movs	r2, #1
   2588e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   25890:	2314      	movs	r3, #20
   25892:	18fb      	adds	r3, r7, r3
   25894:	220f      	movs	r2, #15
   25896:	18ba      	adds	r2, r7, r2
   25898:	7812      	ldrb	r2, [r2, #0]
   2589a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2589c:	230f      	movs	r3, #15
   2589e:	18fb      	adds	r3, r7, r3
   258a0:	781b      	ldrb	r3, [r3, #0]
   258a2:	3bc1      	subs	r3, #193	; 0xc1
   258a4:	2b0e      	cmp	r3, #14
   258a6:	d900      	bls.n	258aa <spi_cmd+0x3e>
   258a8:	e11b      	b.n	25ae2 <spi_cmd+0x276>
   258aa:	009a      	lsls	r2, r3, #2
   258ac:	4bb6      	ldr	r3, [pc, #728]	; (25b88 <spi_cmd+0x31c>)
   258ae:	18d3      	adds	r3, r2, r3
   258b0:	681b      	ldr	r3, [r3, #0]
   258b2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   258b4:	68bb      	ldr	r3, [r7, #8]
   258b6:	0c1b      	lsrs	r3, r3, #16
   258b8:	b2da      	uxtb	r2, r3
   258ba:	2314      	movs	r3, #20
   258bc:	18fb      	adds	r3, r7, r3
   258be:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   258c0:	68bb      	ldr	r3, [r7, #8]
   258c2:	0a1b      	lsrs	r3, r3, #8
   258c4:	b2da      	uxtb	r2, r3
   258c6:	2314      	movs	r3, #20
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   258cc:	68bb      	ldr	r3, [r7, #8]
   258ce:	b2da      	uxtb	r2, r3
   258d0:	2314      	movs	r3, #20
   258d2:	18fb      	adds	r3, r7, r3
   258d4:	70da      	strb	r2, [r3, #3]
		len = 5;
   258d6:	231f      	movs	r3, #31
   258d8:	18fb      	adds	r3, r7, r3
   258da:	2205      	movs	r2, #5
   258dc:	701a      	strb	r2, [r3, #0]
		break;
   258de:	e105      	b.n	25aec <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   258e0:	68bb      	ldr	r3, [r7, #8]
   258e2:	0a1b      	lsrs	r3, r3, #8
   258e4:	b2da      	uxtb	r2, r3
   258e6:	2314      	movs	r3, #20
   258e8:	18fb      	adds	r3, r7, r3
   258ea:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   258ec:	2330      	movs	r3, #48	; 0x30
   258ee:	18fb      	adds	r3, r7, r3
   258f0:	781b      	ldrb	r3, [r3, #0]
   258f2:	2b00      	cmp	r3, #0
   258f4:	d009      	beq.n	2590a <spi_cmd+0x9e>
   258f6:	2314      	movs	r3, #20
   258f8:	18fb      	adds	r3, r7, r3
   258fa:	785b      	ldrb	r3, [r3, #1]
   258fc:	2280      	movs	r2, #128	; 0x80
   258fe:	4252      	negs	r2, r2
   25900:	4313      	orrs	r3, r2
   25902:	b2da      	uxtb	r2, r3
   25904:	2314      	movs	r3, #20
   25906:	18fb      	adds	r3, r7, r3
   25908:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   2590a:	68bb      	ldr	r3, [r7, #8]
   2590c:	b2da      	uxtb	r2, r3
   2590e:	2314      	movs	r3, #20
   25910:	18fb      	adds	r3, r7, r3
   25912:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25914:	2314      	movs	r3, #20
   25916:	18fb      	adds	r3, r7, r3
   25918:	2200      	movs	r2, #0
   2591a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2591c:	231f      	movs	r3, #31
   2591e:	18fb      	adds	r3, r7, r3
   25920:	2205      	movs	r2, #5
   25922:	701a      	strb	r2, [r3, #0]
		break;
   25924:	e0e2      	b.n	25aec <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   25926:	2314      	movs	r3, #20
   25928:	18fb      	adds	r3, r7, r3
   2592a:	2200      	movs	r2, #0
   2592c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2592e:	2314      	movs	r3, #20
   25930:	18fb      	adds	r3, r7, r3
   25932:	2200      	movs	r2, #0
   25934:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25936:	2314      	movs	r3, #20
   25938:	18fb      	adds	r3, r7, r3
   2593a:	2200      	movs	r2, #0
   2593c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2593e:	231f      	movs	r3, #31
   25940:	18fb      	adds	r3, r7, r3
   25942:	2205      	movs	r2, #5
   25944:	701a      	strb	r2, [r3, #0]
		break;
   25946:	e0d1      	b.n	25aec <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   25948:	2314      	movs	r3, #20
   2594a:	18fb      	adds	r3, r7, r3
   2594c:	2200      	movs	r2, #0
   2594e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   25950:	2314      	movs	r3, #20
   25952:	18fb      	adds	r3, r7, r3
   25954:	2200      	movs	r2, #0
   25956:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25958:	2314      	movs	r3, #20
   2595a:	18fb      	adds	r3, r7, r3
   2595c:	2200      	movs	r2, #0
   2595e:	70da      	strb	r2, [r3, #3]
		len = 5;
   25960:	231f      	movs	r3, #31
   25962:	18fb      	adds	r3, r7, r3
   25964:	2205      	movs	r2, #5
   25966:	701a      	strb	r2, [r3, #0]
		break;
   25968:	e0c0      	b.n	25aec <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   2596a:	2314      	movs	r3, #20
   2596c:	18fb      	adds	r3, r7, r3
   2596e:	22ff      	movs	r2, #255	; 0xff
   25970:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   25972:	2314      	movs	r3, #20
   25974:	18fb      	adds	r3, r7, r3
   25976:	22ff      	movs	r2, #255	; 0xff
   25978:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   2597a:	2314      	movs	r3, #20
   2597c:	18fb      	adds	r3, r7, r3
   2597e:	22ff      	movs	r2, #255	; 0xff
   25980:	70da      	strb	r2, [r3, #3]
		len = 5;
   25982:	231f      	movs	r3, #31
   25984:	18fb      	adds	r3, r7, r3
   25986:	2205      	movs	r2, #5
   25988:	701a      	strb	r2, [r3, #0]
		break;
   2598a:	e0af      	b.n	25aec <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   2598c:	68bb      	ldr	r3, [r7, #8]
   2598e:	0c1b      	lsrs	r3, r3, #16
   25990:	b2da      	uxtb	r2, r3
   25992:	2314      	movs	r3, #20
   25994:	18fb      	adds	r3, r7, r3
   25996:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25998:	68bb      	ldr	r3, [r7, #8]
   2599a:	0a1b      	lsrs	r3, r3, #8
   2599c:	b2da      	uxtb	r2, r3
   2599e:	2314      	movs	r3, #20
   259a0:	18fb      	adds	r3, r7, r3
   259a2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   259a4:	68bb      	ldr	r3, [r7, #8]
   259a6:	b2da      	uxtb	r2, r3
   259a8:	2314      	movs	r3, #20
   259aa:	18fb      	adds	r3, r7, r3
   259ac:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   259ae:	683b      	ldr	r3, [r7, #0]
   259b0:	0a1b      	lsrs	r3, r3, #8
   259b2:	b2da      	uxtb	r2, r3
   259b4:	2314      	movs	r3, #20
   259b6:	18fb      	adds	r3, r7, r3
   259b8:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   259ba:	683b      	ldr	r3, [r7, #0]
   259bc:	b2da      	uxtb	r2, r3
   259be:	2314      	movs	r3, #20
   259c0:	18fb      	adds	r3, r7, r3
   259c2:	715a      	strb	r2, [r3, #5]
		len = 7;
   259c4:	231f      	movs	r3, #31
   259c6:	18fb      	adds	r3, r7, r3
   259c8:	2207      	movs	r2, #7
   259ca:	701a      	strb	r2, [r3, #0]
		break;
   259cc:	e08e      	b.n	25aec <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   259ce:	68bb      	ldr	r3, [r7, #8]
   259d0:	0c1b      	lsrs	r3, r3, #16
   259d2:	b2da      	uxtb	r2, r3
   259d4:	2314      	movs	r3, #20
   259d6:	18fb      	adds	r3, r7, r3
   259d8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   259da:	68bb      	ldr	r3, [r7, #8]
   259dc:	0a1b      	lsrs	r3, r3, #8
   259de:	b2da      	uxtb	r2, r3
   259e0:	2314      	movs	r3, #20
   259e2:	18fb      	adds	r3, r7, r3
   259e4:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   259e6:	68bb      	ldr	r3, [r7, #8]
   259e8:	b2da      	uxtb	r2, r3
   259ea:	2314      	movs	r3, #20
   259ec:	18fb      	adds	r3, r7, r3
   259ee:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   259f0:	683b      	ldr	r3, [r7, #0]
   259f2:	0c1b      	lsrs	r3, r3, #16
   259f4:	b2da      	uxtb	r2, r3
   259f6:	2314      	movs	r3, #20
   259f8:	18fb      	adds	r3, r7, r3
   259fa:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   259fc:	683b      	ldr	r3, [r7, #0]
   259fe:	0a1b      	lsrs	r3, r3, #8
   25a00:	b2da      	uxtb	r2, r3
   25a02:	2314      	movs	r3, #20
   25a04:	18fb      	adds	r3, r7, r3
   25a06:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   25a08:	683b      	ldr	r3, [r7, #0]
   25a0a:	b2da      	uxtb	r2, r3
   25a0c:	2314      	movs	r3, #20
   25a0e:	18fb      	adds	r3, r7, r3
   25a10:	719a      	strb	r2, [r3, #6]
		len = 8;
   25a12:	231f      	movs	r3, #31
   25a14:	18fb      	adds	r3, r7, r3
   25a16:	2208      	movs	r2, #8
   25a18:	701a      	strb	r2, [r3, #0]
		break;
   25a1a:	e067      	b.n	25aec <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   25a1c:	68bb      	ldr	r3, [r7, #8]
   25a1e:	0a1b      	lsrs	r3, r3, #8
   25a20:	b2da      	uxtb	r2, r3
   25a22:	2314      	movs	r3, #20
   25a24:	18fb      	adds	r3, r7, r3
   25a26:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   25a28:	2330      	movs	r3, #48	; 0x30
   25a2a:	18fb      	adds	r3, r7, r3
   25a2c:	781b      	ldrb	r3, [r3, #0]
   25a2e:	2b00      	cmp	r3, #0
   25a30:	d009      	beq.n	25a46 <spi_cmd+0x1da>
   25a32:	2314      	movs	r3, #20
   25a34:	18fb      	adds	r3, r7, r3
   25a36:	785b      	ldrb	r3, [r3, #1]
   25a38:	2280      	movs	r2, #128	; 0x80
   25a3a:	4252      	negs	r2, r2
   25a3c:	4313      	orrs	r3, r2
   25a3e:	b2da      	uxtb	r2, r3
   25a40:	2314      	movs	r3, #20
   25a42:	18fb      	adds	r3, r7, r3
   25a44:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   25a46:	68bb      	ldr	r3, [r7, #8]
   25a48:	b2da      	uxtb	r2, r3
   25a4a:	2314      	movs	r3, #20
   25a4c:	18fb      	adds	r3, r7, r3
   25a4e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   25a50:	687b      	ldr	r3, [r7, #4]
   25a52:	0e1b      	lsrs	r3, r3, #24
   25a54:	b2da      	uxtb	r2, r3
   25a56:	2314      	movs	r3, #20
   25a58:	18fb      	adds	r3, r7, r3
   25a5a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   25a5c:	687b      	ldr	r3, [r7, #4]
   25a5e:	0c1b      	lsrs	r3, r3, #16
   25a60:	b2da      	uxtb	r2, r3
   25a62:	2314      	movs	r3, #20
   25a64:	18fb      	adds	r3, r7, r3
   25a66:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   25a68:	687b      	ldr	r3, [r7, #4]
   25a6a:	0a1b      	lsrs	r3, r3, #8
   25a6c:	b2da      	uxtb	r2, r3
   25a6e:	2314      	movs	r3, #20
   25a70:	18fb      	adds	r3, r7, r3
   25a72:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   25a74:	687b      	ldr	r3, [r7, #4]
   25a76:	b2da      	uxtb	r2, r3
   25a78:	2314      	movs	r3, #20
   25a7a:	18fb      	adds	r3, r7, r3
   25a7c:	719a      	strb	r2, [r3, #6]
		len = 8;
   25a7e:	231f      	movs	r3, #31
   25a80:	18fb      	adds	r3, r7, r3
   25a82:	2208      	movs	r2, #8
   25a84:	701a      	strb	r2, [r3, #0]
		break;
   25a86:	e031      	b.n	25aec <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   25a88:	68bb      	ldr	r3, [r7, #8]
   25a8a:	0c1b      	lsrs	r3, r3, #16
   25a8c:	b2da      	uxtb	r2, r3
   25a8e:	2314      	movs	r3, #20
   25a90:	18fb      	adds	r3, r7, r3
   25a92:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25a94:	68bb      	ldr	r3, [r7, #8]
   25a96:	0a1b      	lsrs	r3, r3, #8
   25a98:	b2da      	uxtb	r2, r3
   25a9a:	2314      	movs	r3, #20
   25a9c:	18fb      	adds	r3, r7, r3
   25a9e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   25aa0:	68bb      	ldr	r3, [r7, #8]
   25aa2:	b2da      	uxtb	r2, r3
   25aa4:	2314      	movs	r3, #20
   25aa6:	18fb      	adds	r3, r7, r3
   25aa8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   25aaa:	687b      	ldr	r3, [r7, #4]
   25aac:	0e1b      	lsrs	r3, r3, #24
   25aae:	b2da      	uxtb	r2, r3
   25ab0:	2314      	movs	r3, #20
   25ab2:	18fb      	adds	r3, r7, r3
   25ab4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   25ab6:	687b      	ldr	r3, [r7, #4]
   25ab8:	0c1b      	lsrs	r3, r3, #16
   25aba:	b2da      	uxtb	r2, r3
   25abc:	2314      	movs	r3, #20
   25abe:	18fb      	adds	r3, r7, r3
   25ac0:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   25ac2:	687b      	ldr	r3, [r7, #4]
   25ac4:	0a1b      	lsrs	r3, r3, #8
   25ac6:	b2da      	uxtb	r2, r3
   25ac8:	2314      	movs	r3, #20
   25aca:	18fb      	adds	r3, r7, r3
   25acc:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   25ace:	687b      	ldr	r3, [r7, #4]
   25ad0:	b2da      	uxtb	r2, r3
   25ad2:	2314      	movs	r3, #20
   25ad4:	18fb      	adds	r3, r7, r3
   25ad6:	71da      	strb	r2, [r3, #7]
		len = 9;
   25ad8:	231f      	movs	r3, #31
   25ada:	18fb      	adds	r3, r7, r3
   25adc:	2209      	movs	r2, #9
   25ade:	701a      	strb	r2, [r3, #0]
		break;
   25ae0:	e004      	b.n	25aec <spi_cmd+0x280>
	default:
		result = N_FAIL;
   25ae2:	231e      	movs	r3, #30
   25ae4:	18fb      	adds	r3, r7, r3
   25ae6:	2200      	movs	r2, #0
   25ae8:	701a      	strb	r2, [r3, #0]
		break;
   25aea:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   25aec:	231e      	movs	r3, #30
   25aee:	18fb      	adds	r3, r7, r3
   25af0:	781b      	ldrb	r3, [r3, #0]
   25af2:	b25b      	sxtb	r3, r3
   25af4:	2b00      	cmp	r3, #0
   25af6:	d03f      	beq.n	25b78 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   25af8:	4b24      	ldr	r3, [pc, #144]	; (25b8c <spi_cmd+0x320>)
   25afa:	781b      	ldrb	r3, [r3, #0]
   25afc:	2b00      	cmp	r3, #0
   25afe:	d115      	bne.n	25b2c <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   25b00:	231f      	movs	r3, #31
   25b02:	18fb      	adds	r3, r7, r3
   25b04:	781b      	ldrb	r3, [r3, #0]
   25b06:	1e5c      	subs	r4, r3, #1
   25b08:	231f      	movs	r3, #31
   25b0a:	18fb      	adds	r3, r7, r3
   25b0c:	781b      	ldrb	r3, [r3, #0]
   25b0e:	3b01      	subs	r3, #1
   25b10:	001a      	movs	r2, r3
   25b12:	2314      	movs	r3, #20
   25b14:	18fb      	adds	r3, r7, r3
   25b16:	0019      	movs	r1, r3
   25b18:	207f      	movs	r0, #127	; 0x7f
   25b1a:	4b1d      	ldr	r3, [pc, #116]	; (25b90 <spi_cmd+0x324>)
   25b1c:	4798      	blx	r3
   25b1e:	0003      	movs	r3, r0
   25b20:	18db      	adds	r3, r3, r3
   25b22:	b2da      	uxtb	r2, r3
   25b24:	2314      	movs	r3, #20
   25b26:	18fb      	adds	r3, r7, r3
   25b28:	551a      	strb	r2, [r3, r4]
   25b2a:	e006      	b.n	25b3a <spi_cmd+0x2ce>
		else
			len-=1;
   25b2c:	231f      	movs	r3, #31
   25b2e:	18fb      	adds	r3, r7, r3
   25b30:	221f      	movs	r2, #31
   25b32:	18ba      	adds	r2, r7, r2
   25b34:	7812      	ldrb	r2, [r2, #0]
   25b36:	3a01      	subs	r2, #1
   25b38:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   25b3a:	231f      	movs	r3, #31
   25b3c:	18fb      	adds	r3, r7, r3
   25b3e:	781b      	ldrb	r3, [r3, #0]
   25b40:	b29a      	uxth	r2, r3
   25b42:	2314      	movs	r3, #20
   25b44:	18fb      	adds	r3, r7, r3
   25b46:	0011      	movs	r1, r2
   25b48:	0018      	movs	r0, r3
   25b4a:	4b12      	ldr	r3, [pc, #72]	; (25b94 <spi_cmd+0x328>)
   25b4c:	4798      	blx	r3
   25b4e:	1e03      	subs	r3, r0, #0
   25b50:	d012      	beq.n	25b78 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   25b52:	2390      	movs	r3, #144	; 0x90
   25b54:	005a      	lsls	r2, r3, #1
   25b56:	4910      	ldr	r1, [pc, #64]	; (25b98 <spi_cmd+0x32c>)
   25b58:	4b10      	ldr	r3, [pc, #64]	; (25b9c <spi_cmd+0x330>)
   25b5a:	0018      	movs	r0, r3
   25b5c:	4b10      	ldr	r3, [pc, #64]	; (25ba0 <spi_cmd+0x334>)
   25b5e:	4798      	blx	r3
   25b60:	4b10      	ldr	r3, [pc, #64]	; (25ba4 <spi_cmd+0x338>)
   25b62:	0018      	movs	r0, r3
   25b64:	4b0e      	ldr	r3, [pc, #56]	; (25ba0 <spi_cmd+0x334>)
   25b66:	4798      	blx	r3
   25b68:	4b0f      	ldr	r3, [pc, #60]	; (25ba8 <spi_cmd+0x33c>)
   25b6a:	0018      	movs	r0, r3
   25b6c:	4b0c      	ldr	r3, [pc, #48]	; (25ba0 <spi_cmd+0x334>)
   25b6e:	4798      	blx	r3
			result = N_FAIL;
   25b70:	231e      	movs	r3, #30
   25b72:	18fb      	adds	r3, r7, r3
   25b74:	2200      	movs	r2, #0
   25b76:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   25b78:	231e      	movs	r3, #30
   25b7a:	18fb      	adds	r3, r7, r3
   25b7c:	781b      	ldrb	r3, [r3, #0]
   25b7e:	b25b      	sxtb	r3, r3
}
   25b80:	0018      	movs	r0, r3
   25b82:	46bd      	mov	sp, r7
   25b84:	b009      	add	sp, #36	; 0x24
   25b86:	bd90      	pop	{r4, r7, pc}
   25b88:	0003c5cc 	.word	0x0003c5cc
   25b8c:	20004124 	.word	0x20004124
   25b90:	0002581d 	.word	0x0002581d
   25b94:	00025765 	.word	0x00025765
   25b98:	0003c644 	.word	0x0003c644
   25b9c:	0003c054 	.word	0x0003c054
   25ba0:	00020349 	.word	0x00020349
   25ba4:	0003c068 	.word	0x0003c068
   25ba8:	0003c094 	.word	0x0003c094

00025bac <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   25bac:	b590      	push	{r4, r7, lr}
   25bae:	b085      	sub	sp, #20
   25bb0:	af00      	add	r7, sp, #0
   25bb2:	0002      	movs	r2, r0
   25bb4:	1dfb      	adds	r3, r7, #7
   25bb6:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   25bb8:	230e      	movs	r3, #14
   25bba:	18fb      	adds	r3, r7, r3
   25bbc:	2201      	movs	r2, #1
   25bbe:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   25bc0:	4b32      	ldr	r3, [pc, #200]	; (25c8c <spi_data_rsp+0xe0>)
   25bc2:	781b      	ldrb	r3, [r3, #0]
   25bc4:	2b00      	cmp	r3, #0
   25bc6:	d104      	bne.n	25bd2 <spi_data_rsp+0x26>
		len = 2;
   25bc8:	230f      	movs	r3, #15
   25bca:	18fb      	adds	r3, r7, r3
   25bcc:	2202      	movs	r2, #2
   25bce:	701a      	strb	r2, [r3, #0]
   25bd0:	e003      	b.n	25bda <spi_data_rsp+0x2e>
	else
		len = 3;
   25bd2:	230f      	movs	r3, #15
   25bd4:	18fb      	adds	r3, r7, r3
   25bd6:	2203      	movs	r2, #3
   25bd8:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   25bda:	230f      	movs	r3, #15
   25bdc:	18fb      	adds	r3, r7, r3
   25bde:	781b      	ldrb	r3, [r3, #0]
   25be0:	b29a      	uxth	r2, r3
   25be2:	2308      	movs	r3, #8
   25be4:	18fb      	adds	r3, r7, r3
   25be6:	0011      	movs	r1, r2
   25be8:	0018      	movs	r0, r3
   25bea:	4b29      	ldr	r3, [pc, #164]	; (25c90 <spi_data_rsp+0xe4>)
   25bec:	4798      	blx	r3
   25bee:	1e03      	subs	r3, r0, #0
   25bf0:	d013      	beq.n	25c1a <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   25bf2:	239a      	movs	r3, #154	; 0x9a
   25bf4:	005a      	lsls	r2, r3, #1
   25bf6:	4927      	ldr	r1, [pc, #156]	; (25c94 <spi_data_rsp+0xe8>)
   25bf8:	4b27      	ldr	r3, [pc, #156]	; (25c98 <spi_data_rsp+0xec>)
   25bfa:	0018      	movs	r0, r3
   25bfc:	4b27      	ldr	r3, [pc, #156]	; (25c9c <spi_data_rsp+0xf0>)
   25bfe:	4798      	blx	r3
   25c00:	4b27      	ldr	r3, [pc, #156]	; (25ca0 <spi_data_rsp+0xf4>)
   25c02:	0018      	movs	r0, r3
   25c04:	4b25      	ldr	r3, [pc, #148]	; (25c9c <spi_data_rsp+0xf0>)
   25c06:	4798      	blx	r3
   25c08:	4b26      	ldr	r3, [pc, #152]	; (25ca4 <spi_data_rsp+0xf8>)
   25c0a:	0018      	movs	r0, r3
   25c0c:	4b23      	ldr	r3, [pc, #140]	; (25c9c <spi_data_rsp+0xf0>)
   25c0e:	4798      	blx	r3
		result = N_FAIL;
   25c10:	230e      	movs	r3, #14
   25c12:	18fb      	adds	r3, r7, r3
   25c14:	2200      	movs	r2, #0
   25c16:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   25c18:	e030      	b.n	25c7c <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   25c1a:	230f      	movs	r3, #15
   25c1c:	18fb      	adds	r3, r7, r3
   25c1e:	781b      	ldrb	r3, [r3, #0]
   25c20:	3b01      	subs	r3, #1
   25c22:	2208      	movs	r2, #8
   25c24:	18ba      	adds	r2, r7, r2
   25c26:	5cd3      	ldrb	r3, [r2, r3]
   25c28:	2b00      	cmp	r3, #0
   25c2a:	d108      	bne.n	25c3e <spi_data_rsp+0x92>
   25c2c:	230f      	movs	r3, #15
   25c2e:	18fb      	adds	r3, r7, r3
   25c30:	781b      	ldrb	r3, [r3, #0]
   25c32:	3b02      	subs	r3, #2
   25c34:	2208      	movs	r2, #8
   25c36:	18ba      	adds	r2, r7, r2
   25c38:	5cd3      	ldrb	r3, [r2, r3]
   25c3a:	2bc3      	cmp	r3, #195	; 0xc3
   25c3c:	d01e      	beq.n	25c7c <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   25c3e:	233c      	movs	r3, #60	; 0x3c
   25c40:	33ff      	adds	r3, #255	; 0xff
   25c42:	001a      	movs	r2, r3
   25c44:	4913      	ldr	r1, [pc, #76]	; (25c94 <spi_data_rsp+0xe8>)
   25c46:	4b14      	ldr	r3, [pc, #80]	; (25c98 <spi_data_rsp+0xec>)
   25c48:	0018      	movs	r0, r3
   25c4a:	4b14      	ldr	r3, [pc, #80]	; (25c9c <spi_data_rsp+0xf0>)
   25c4c:	4798      	blx	r3
   25c4e:	2308      	movs	r3, #8
   25c50:	18fb      	adds	r3, r7, r3
   25c52:	781b      	ldrb	r3, [r3, #0]
   25c54:	0019      	movs	r1, r3
   25c56:	2308      	movs	r3, #8
   25c58:	18fb      	adds	r3, r7, r3
   25c5a:	785b      	ldrb	r3, [r3, #1]
   25c5c:	001a      	movs	r2, r3
   25c5e:	2308      	movs	r3, #8
   25c60:	18fb      	adds	r3, r7, r3
   25c62:	789b      	ldrb	r3, [r3, #2]
   25c64:	4810      	ldr	r0, [pc, #64]	; (25ca8 <spi_data_rsp+0xfc>)
   25c66:	4c0d      	ldr	r4, [pc, #52]	; (25c9c <spi_data_rsp+0xf0>)
   25c68:	47a0      	blx	r4
   25c6a:	4b0e      	ldr	r3, [pc, #56]	; (25ca4 <spi_data_rsp+0xf8>)
   25c6c:	0018      	movs	r0, r3
   25c6e:	4b0b      	ldr	r3, [pc, #44]	; (25c9c <spi_data_rsp+0xf0>)
   25c70:	4798      	blx	r3
		result = N_FAIL;
   25c72:	230e      	movs	r3, #14
   25c74:	18fb      	adds	r3, r7, r3
   25c76:	2200      	movs	r2, #0
   25c78:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   25c7a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   25c7c:	230e      	movs	r3, #14
   25c7e:	18fb      	adds	r3, r7, r3
   25c80:	781b      	ldrb	r3, [r3, #0]
   25c82:	b25b      	sxtb	r3, r3
}
   25c84:	0018      	movs	r0, r3
   25c86:	46bd      	mov	sp, r7
   25c88:	b005      	add	sp, #20
   25c8a:	bd90      	pop	{r4, r7, pc}
   25c8c:	20004124 	.word	0x20004124
   25c90:	00025721 	.word	0x00025721
   25c94:	0003c64c 	.word	0x0003c64c
   25c98:	0003c054 	.word	0x0003c054
   25c9c:	00020349 	.word	0x00020349
   25ca0:	0003c098 	.word	0x0003c098
   25ca4:	0003c094 	.word	0x0003c094
   25ca8:	0003c0b8 	.word	0x0003c0b8

00025cac <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   25cac:	b580      	push	{r7, lr}
   25cae:	b084      	sub	sp, #16
   25cb0:	af00      	add	r7, sp, #0
   25cb2:	0002      	movs	r2, r0
   25cb4:	1dfb      	adds	r3, r7, #7
   25cb6:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   25cb8:	230f      	movs	r3, #15
   25cba:	18fb      	adds	r3, r7, r3
   25cbc:	2201      	movs	r2, #1
   25cbe:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   25cc0:	1dfb      	adds	r3, r7, #7
   25cc2:	781b      	ldrb	r3, [r3, #0]
   25cc4:	2bcf      	cmp	r3, #207	; 0xcf
   25cc6:	d007      	beq.n	25cd8 <spi_cmd_rsp+0x2c>
   25cc8:	1dfb      	adds	r3, r7, #7
   25cca:	781b      	ldrb	r3, [r3, #0]
   25ccc:	2bc5      	cmp	r3, #197	; 0xc5
   25cce:	d003      	beq.n	25cd8 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   25cd0:	1dfb      	adds	r3, r7, #7
   25cd2:	781b      	ldrb	r3, [r3, #0]
   25cd4:	2bc6      	cmp	r3, #198	; 0xc6
   25cd6:	d10c      	bne.n	25cf2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25cd8:	230d      	movs	r3, #13
   25cda:	18fb      	adds	r3, r7, r3
   25cdc:	2101      	movs	r1, #1
   25cde:	0018      	movs	r0, r3
   25ce0:	4b3b      	ldr	r3, [pc, #236]	; (25dd0 <spi_cmd_rsp+0x124>)
   25ce2:	4798      	blx	r3
   25ce4:	1e03      	subs	r3, r0, #0
   25ce6:	d004      	beq.n	25cf2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   25ce8:	230f      	movs	r3, #15
   25cea:	18fb      	adds	r3, r7, r3
   25cec:	2200      	movs	r2, #0
   25cee:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25cf0:	e065      	b.n	25dbe <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   25cf2:	230e      	movs	r3, #14
   25cf4:	18fb      	adds	r3, r7, r3
   25cf6:	220a      	movs	r2, #10
   25cf8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25cfa:	230d      	movs	r3, #13
   25cfc:	18fb      	adds	r3, r7, r3
   25cfe:	2101      	movs	r1, #1
   25d00:	0018      	movs	r0, r3
   25d02:	4b33      	ldr	r3, [pc, #204]	; (25dd0 <spi_cmd_rsp+0x124>)
   25d04:	4798      	blx	r3
   25d06:	1e03      	subs	r3, r0, #0
   25d08:	d014      	beq.n	25d34 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   25d0a:	235c      	movs	r3, #92	; 0x5c
   25d0c:	33ff      	adds	r3, #255	; 0xff
   25d0e:	001a      	movs	r2, r3
   25d10:	4930      	ldr	r1, [pc, #192]	; (25dd4 <spi_cmd_rsp+0x128>)
   25d12:	4b31      	ldr	r3, [pc, #196]	; (25dd8 <spi_cmd_rsp+0x12c>)
   25d14:	0018      	movs	r0, r3
   25d16:	4b31      	ldr	r3, [pc, #196]	; (25ddc <spi_cmd_rsp+0x130>)
   25d18:	4798      	blx	r3
   25d1a:	4b31      	ldr	r3, [pc, #196]	; (25de0 <spi_cmd_rsp+0x134>)
   25d1c:	0018      	movs	r0, r3
   25d1e:	4b2f      	ldr	r3, [pc, #188]	; (25ddc <spi_cmd_rsp+0x130>)
   25d20:	4798      	blx	r3
   25d22:	4b30      	ldr	r3, [pc, #192]	; (25de4 <spi_cmd_rsp+0x138>)
   25d24:	0018      	movs	r0, r3
   25d26:	4b2d      	ldr	r3, [pc, #180]	; (25ddc <spi_cmd_rsp+0x130>)
   25d28:	4798      	blx	r3
			result = N_FAIL;
   25d2a:	230f      	movs	r3, #15
   25d2c:	18fb      	adds	r3, r7, r3
   25d2e:	2200      	movs	r2, #0
   25d30:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25d32:	e044      	b.n	25dbe <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   25d34:	230d      	movs	r3, #13
   25d36:	18fb      	adds	r3, r7, r3
   25d38:	781b      	ldrb	r3, [r3, #0]
   25d3a:	1dfa      	adds	r2, r7, #7
   25d3c:	7812      	ldrb	r2, [r2, #0]
   25d3e:	429a      	cmp	r2, r3
   25d40:	d00b      	beq.n	25d5a <spi_cmd_rsp+0xae>
   25d42:	230e      	movs	r3, #14
   25d44:	18fb      	adds	r3, r7, r3
   25d46:	781b      	ldrb	r3, [r3, #0]
   25d48:	b25b      	sxtb	r3, r3
   25d4a:	b2da      	uxtb	r2, r3
   25d4c:	3a01      	subs	r2, #1
   25d4e:	b2d1      	uxtb	r1, r2
   25d50:	220e      	movs	r2, #14
   25d52:	18ba      	adds	r2, r7, r2
   25d54:	7011      	strb	r1, [r2, #0]
   25d56:	2b00      	cmp	r3, #0
   25d58:	dccf      	bgt.n	25cfa <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   25d5a:	230e      	movs	r3, #14
   25d5c:	18fb      	adds	r3, r7, r3
   25d5e:	220a      	movs	r2, #10
   25d60:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25d62:	230d      	movs	r3, #13
   25d64:	18fb      	adds	r3, r7, r3
   25d66:	2101      	movs	r1, #1
   25d68:	0018      	movs	r0, r3
   25d6a:	4b19      	ldr	r3, [pc, #100]	; (25dd0 <spi_cmd_rsp+0x124>)
   25d6c:	4798      	blx	r3
   25d6e:	1e03      	subs	r3, r0, #0
   25d70:	d014      	beq.n	25d9c <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   25d72:	236a      	movs	r3, #106	; 0x6a
   25d74:	33ff      	adds	r3, #255	; 0xff
   25d76:	001a      	movs	r2, r3
   25d78:	4916      	ldr	r1, [pc, #88]	; (25dd4 <spi_cmd_rsp+0x128>)
   25d7a:	4b17      	ldr	r3, [pc, #92]	; (25dd8 <spi_cmd_rsp+0x12c>)
   25d7c:	0018      	movs	r0, r3
   25d7e:	4b17      	ldr	r3, [pc, #92]	; (25ddc <spi_cmd_rsp+0x130>)
   25d80:	4798      	blx	r3
   25d82:	4b17      	ldr	r3, [pc, #92]	; (25de0 <spi_cmd_rsp+0x134>)
   25d84:	0018      	movs	r0, r3
   25d86:	4b15      	ldr	r3, [pc, #84]	; (25ddc <spi_cmd_rsp+0x130>)
   25d88:	4798      	blx	r3
   25d8a:	4b16      	ldr	r3, [pc, #88]	; (25de4 <spi_cmd_rsp+0x138>)
   25d8c:	0018      	movs	r0, r3
   25d8e:	4b13      	ldr	r3, [pc, #76]	; (25ddc <spi_cmd_rsp+0x130>)
   25d90:	4798      	blx	r3
			result = N_FAIL;
   25d92:	230f      	movs	r3, #15
   25d94:	18fb      	adds	r3, r7, r3
   25d96:	2200      	movs	r2, #0
   25d98:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25d9a:	e010      	b.n	25dbe <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   25d9c:	230d      	movs	r3, #13
   25d9e:	18fb      	adds	r3, r7, r3
   25da0:	781b      	ldrb	r3, [r3, #0]
   25da2:	2b00      	cmp	r3, #0
   25da4:	d00b      	beq.n	25dbe <spi_cmd_rsp+0x112>
   25da6:	230e      	movs	r3, #14
   25da8:	18fb      	adds	r3, r7, r3
   25daa:	781b      	ldrb	r3, [r3, #0]
   25dac:	b25b      	sxtb	r3, r3
   25dae:	b2da      	uxtb	r2, r3
   25db0:	3a01      	subs	r2, #1
   25db2:	b2d1      	uxtb	r1, r2
   25db4:	220e      	movs	r2, #14
   25db6:	18ba      	adds	r2, r7, r2
   25db8:	7011      	strb	r1, [r2, #0]
   25dba:	2b00      	cmp	r3, #0
   25dbc:	dcd1      	bgt.n	25d62 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   25dbe:	230f      	movs	r3, #15
   25dc0:	18fb      	adds	r3, r7, r3
   25dc2:	781b      	ldrb	r3, [r3, #0]
   25dc4:	b25b      	sxtb	r3, r3
}
   25dc6:	0018      	movs	r0, r3
   25dc8:	46bd      	mov	sp, r7
   25dca:	b004      	add	sp, #16
   25dcc:	bd80      	pop	{r7, pc}
   25dce:	46c0      	nop			; (mov r8, r8)
   25dd0:	00025721 	.word	0x00025721
   25dd4:	0003c65c 	.word	0x0003c65c
   25dd8:	0003c054 	.word	0x0003c054
   25ddc:	00020349 	.word	0x00020349
   25de0:	0003c0e8 	.word	0x0003c0e8
   25de4:	0003c094 	.word	0x0003c094

00025de8 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   25de8:	b590      	push	{r4, r7, lr}
   25dea:	b09f      	sub	sp, #124	; 0x7c
   25dec:	af00      	add	r7, sp, #0
   25dee:	60b9      	str	r1, [r7, #8]
   25df0:	607a      	str	r2, [r7, #4]
   25df2:	603b      	str	r3, [r7, #0]
   25df4:	230f      	movs	r3, #15
   25df6:	18fb      	adds	r3, r7, r3
   25df8:	1c02      	adds	r2, r0, #0
   25dfa:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   25dfc:	2300      	movs	r3, #0
   25dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   25e00:	2301      	movs	r3, #1
   25e02:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   25e04:	2338      	movs	r3, #56	; 0x38
   25e06:	18fb      	adds	r3, r7, r3
   25e08:	220f      	movs	r2, #15
   25e0a:	18ba      	adds	r2, r7, r2
   25e0c:	7812      	ldrb	r2, [r2, #0]
   25e0e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   25e10:	230f      	movs	r3, #15
   25e12:	18fb      	adds	r3, r7, r3
   25e14:	781b      	ldrb	r3, [r3, #0]
   25e16:	3bc1      	subs	r3, #193	; 0xc1
   25e18:	2b0e      	cmp	r3, #14
   25e1a:	d900      	bls.n	25e1e <spi_cmd_complete+0x36>
   25e1c:	e103      	b.n	26026 <spi_cmd_complete+0x23e>
   25e1e:	009a      	lsls	r2, r3, #2
   25e20:	4bd1      	ldr	r3, [pc, #836]	; (26168 <spi_cmd_complete+0x380>)
   25e22:	18d3      	adds	r3, r2, r3
   25e24:	681b      	ldr	r3, [r3, #0]
   25e26:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   25e28:	68bb      	ldr	r3, [r7, #8]
   25e2a:	0c1b      	lsrs	r3, r3, #16
   25e2c:	b2da      	uxtb	r2, r3
   25e2e:	2338      	movs	r3, #56	; 0x38
   25e30:	18fb      	adds	r3, r7, r3
   25e32:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25e34:	68bb      	ldr	r3, [r7, #8]
   25e36:	0a1b      	lsrs	r3, r3, #8
   25e38:	b2da      	uxtb	r2, r3
   25e3a:	2338      	movs	r3, #56	; 0x38
   25e3c:	18fb      	adds	r3, r7, r3
   25e3e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25e40:	68bb      	ldr	r3, [r7, #8]
   25e42:	b2da      	uxtb	r2, r3
   25e44:	2338      	movs	r3, #56	; 0x38
   25e46:	18fb      	adds	r3, r7, r3
   25e48:	70da      	strb	r2, [r3, #3]
		len = 5;
   25e4a:	2305      	movs	r3, #5
   25e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   25e4e:	e0ed      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   25e50:	68bb      	ldr	r3, [r7, #8]
   25e52:	0a1b      	lsrs	r3, r3, #8
   25e54:	b2da      	uxtb	r2, r3
   25e56:	2338      	movs	r3, #56	; 0x38
   25e58:	18fb      	adds	r3, r7, r3
   25e5a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   25e5c:	2388      	movs	r3, #136	; 0x88
   25e5e:	18fb      	adds	r3, r7, r3
   25e60:	781b      	ldrb	r3, [r3, #0]
   25e62:	2b01      	cmp	r3, #1
   25e64:	d109      	bne.n	25e7a <spi_cmd_complete+0x92>
   25e66:	2338      	movs	r3, #56	; 0x38
   25e68:	18fb      	adds	r3, r7, r3
   25e6a:	785b      	ldrb	r3, [r3, #1]
   25e6c:	2280      	movs	r2, #128	; 0x80
   25e6e:	4252      	negs	r2, r2
   25e70:	4313      	orrs	r3, r2
   25e72:	b2da      	uxtb	r2, r3
   25e74:	2338      	movs	r3, #56	; 0x38
   25e76:	18fb      	adds	r3, r7, r3
   25e78:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   25e7a:	68bb      	ldr	r3, [r7, #8]
   25e7c:	b2da      	uxtb	r2, r3
   25e7e:	2338      	movs	r3, #56	; 0x38
   25e80:	18fb      	adds	r3, r7, r3
   25e82:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25e84:	2338      	movs	r3, #56	; 0x38
   25e86:	18fb      	adds	r3, r7, r3
   25e88:	2200      	movs	r2, #0
   25e8a:	70da      	strb	r2, [r3, #3]
		len = 5;
   25e8c:	2305      	movs	r3, #5
   25e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25e90:	e0cc      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   25e92:	2338      	movs	r3, #56	; 0x38
   25e94:	18fb      	adds	r3, r7, r3
   25e96:	2200      	movs	r2, #0
   25e98:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25e9a:	2338      	movs	r3, #56	; 0x38
   25e9c:	18fb      	adds	r3, r7, r3
   25e9e:	2200      	movs	r2, #0
   25ea0:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25ea2:	2338      	movs	r3, #56	; 0x38
   25ea4:	18fb      	adds	r3, r7, r3
   25ea6:	2200      	movs	r2, #0
   25ea8:	70da      	strb	r2, [r3, #3]
		len = 5;
   25eaa:	2305      	movs	r3, #5
   25eac:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25eae:	e0bd      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   25eb0:	2338      	movs	r3, #56	; 0x38
   25eb2:	18fb      	adds	r3, r7, r3
   25eb4:	2200      	movs	r2, #0
   25eb6:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25eb8:	2338      	movs	r3, #56	; 0x38
   25eba:	18fb      	adds	r3, r7, r3
   25ebc:	2200      	movs	r2, #0
   25ebe:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25ec0:	2338      	movs	r3, #56	; 0x38
   25ec2:	18fb      	adds	r3, r7, r3
   25ec4:	2200      	movs	r2, #0
   25ec6:	70da      	strb	r2, [r3, #3]
		len = 5;
   25ec8:	2305      	movs	r3, #5
   25eca:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25ecc:	e0ae      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   25ece:	2338      	movs	r3, #56	; 0x38
   25ed0:	18fb      	adds	r3, r7, r3
   25ed2:	22ff      	movs	r2, #255	; 0xff
   25ed4:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   25ed6:	2338      	movs	r3, #56	; 0x38
   25ed8:	18fb      	adds	r3, r7, r3
   25eda:	22ff      	movs	r2, #255	; 0xff
   25edc:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   25ede:	2338      	movs	r3, #56	; 0x38
   25ee0:	18fb      	adds	r3, r7, r3
   25ee2:	22ff      	movs	r2, #255	; 0xff
   25ee4:	70da      	strb	r2, [r3, #3]
		len = 5;
   25ee6:	2305      	movs	r3, #5
   25ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25eea:	e09f      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   25eec:	68bb      	ldr	r3, [r7, #8]
   25eee:	0c1b      	lsrs	r3, r3, #16
   25ef0:	b2da      	uxtb	r2, r3
   25ef2:	2338      	movs	r3, #56	; 0x38
   25ef4:	18fb      	adds	r3, r7, r3
   25ef6:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25ef8:	68bb      	ldr	r3, [r7, #8]
   25efa:	0a1b      	lsrs	r3, r3, #8
   25efc:	b2da      	uxtb	r2, r3
   25efe:	2338      	movs	r3, #56	; 0x38
   25f00:	18fb      	adds	r3, r7, r3
   25f02:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25f04:	68bb      	ldr	r3, [r7, #8]
   25f06:	b2da      	uxtb	r2, r3
   25f08:	2338      	movs	r3, #56	; 0x38
   25f0a:	18fb      	adds	r3, r7, r3
   25f0c:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   25f0e:	683b      	ldr	r3, [r7, #0]
   25f10:	0a1b      	lsrs	r3, r3, #8
   25f12:	b2da      	uxtb	r2, r3
   25f14:	2338      	movs	r3, #56	; 0x38
   25f16:	18fb      	adds	r3, r7, r3
   25f18:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   25f1a:	683b      	ldr	r3, [r7, #0]
   25f1c:	b2da      	uxtb	r2, r3
   25f1e:	2338      	movs	r3, #56	; 0x38
   25f20:	18fb      	adds	r3, r7, r3
   25f22:	715a      	strb	r2, [r3, #5]
		len = 7;
   25f24:	2307      	movs	r3, #7
   25f26:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25f28:	e080      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   25f2a:	68bb      	ldr	r3, [r7, #8]
   25f2c:	0c1b      	lsrs	r3, r3, #16
   25f2e:	b2da      	uxtb	r2, r3
   25f30:	2338      	movs	r3, #56	; 0x38
   25f32:	18fb      	adds	r3, r7, r3
   25f34:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25f36:	68bb      	ldr	r3, [r7, #8]
   25f38:	0a1b      	lsrs	r3, r3, #8
   25f3a:	b2da      	uxtb	r2, r3
   25f3c:	2338      	movs	r3, #56	; 0x38
   25f3e:	18fb      	adds	r3, r7, r3
   25f40:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25f42:	68bb      	ldr	r3, [r7, #8]
   25f44:	b2da      	uxtb	r2, r3
   25f46:	2338      	movs	r3, #56	; 0x38
   25f48:	18fb      	adds	r3, r7, r3
   25f4a:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   25f4c:	683b      	ldr	r3, [r7, #0]
   25f4e:	0c1b      	lsrs	r3, r3, #16
   25f50:	b2da      	uxtb	r2, r3
   25f52:	2338      	movs	r3, #56	; 0x38
   25f54:	18fb      	adds	r3, r7, r3
   25f56:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   25f58:	683b      	ldr	r3, [r7, #0]
   25f5a:	0a1b      	lsrs	r3, r3, #8
   25f5c:	b2da      	uxtb	r2, r3
   25f5e:	2338      	movs	r3, #56	; 0x38
   25f60:	18fb      	adds	r3, r7, r3
   25f62:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   25f64:	683b      	ldr	r3, [r7, #0]
   25f66:	b2da      	uxtb	r2, r3
   25f68:	2338      	movs	r3, #56	; 0x38
   25f6a:	18fb      	adds	r3, r7, r3
   25f6c:	719a      	strb	r2, [r3, #6]
		len = 8;
   25f6e:	2308      	movs	r3, #8
   25f70:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25f72:	e05b      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   25f74:	68bb      	ldr	r3, [r7, #8]
   25f76:	0a1b      	lsrs	r3, r3, #8
   25f78:	b2da      	uxtb	r2, r3
   25f7a:	2338      	movs	r3, #56	; 0x38
   25f7c:	18fb      	adds	r3, r7, r3
   25f7e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   25f80:	2388      	movs	r3, #136	; 0x88
   25f82:	18fb      	adds	r3, r7, r3
   25f84:	781b      	ldrb	r3, [r3, #0]
   25f86:	2b01      	cmp	r3, #1
   25f88:	d109      	bne.n	25f9e <spi_cmd_complete+0x1b6>
   25f8a:	2338      	movs	r3, #56	; 0x38
   25f8c:	18fb      	adds	r3, r7, r3
   25f8e:	785b      	ldrb	r3, [r3, #1]
   25f90:	2280      	movs	r2, #128	; 0x80
   25f92:	4252      	negs	r2, r2
   25f94:	4313      	orrs	r3, r2
   25f96:	b2da      	uxtb	r2, r3
   25f98:	2338      	movs	r3, #56	; 0x38
   25f9a:	18fb      	adds	r3, r7, r3
   25f9c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   25f9e:	68bb      	ldr	r3, [r7, #8]
   25fa0:	b2da      	uxtb	r2, r3
   25fa2:	2338      	movs	r3, #56	; 0x38
   25fa4:	18fb      	adds	r3, r7, r3
   25fa6:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   25fa8:	687b      	ldr	r3, [r7, #4]
   25faa:	78da      	ldrb	r2, [r3, #3]
   25fac:	2338      	movs	r3, #56	; 0x38
   25fae:	18fb      	adds	r3, r7, r3
   25fb0:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   25fb2:	687b      	ldr	r3, [r7, #4]
   25fb4:	789a      	ldrb	r2, [r3, #2]
   25fb6:	2338      	movs	r3, #56	; 0x38
   25fb8:	18fb      	adds	r3, r7, r3
   25fba:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   25fbc:	687b      	ldr	r3, [r7, #4]
   25fbe:	785a      	ldrb	r2, [r3, #1]
   25fc0:	2338      	movs	r3, #56	; 0x38
   25fc2:	18fb      	adds	r3, r7, r3
   25fc4:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   25fc6:	687b      	ldr	r3, [r7, #4]
   25fc8:	781a      	ldrb	r2, [r3, #0]
   25fca:	2338      	movs	r3, #56	; 0x38
   25fcc:	18fb      	adds	r3, r7, r3
   25fce:	719a      	strb	r2, [r3, #6]
		len = 8;
   25fd0:	2308      	movs	r3, #8
   25fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25fd4:	e02a      	b.n	2602c <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   25fd6:	68bb      	ldr	r3, [r7, #8]
   25fd8:	0c1b      	lsrs	r3, r3, #16
   25fda:	b2da      	uxtb	r2, r3
   25fdc:	2338      	movs	r3, #56	; 0x38
   25fde:	18fb      	adds	r3, r7, r3
   25fe0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25fe2:	68bb      	ldr	r3, [r7, #8]
   25fe4:	0a1b      	lsrs	r3, r3, #8
   25fe6:	b2da      	uxtb	r2, r3
   25fe8:	2338      	movs	r3, #56	; 0x38
   25fea:	18fb      	adds	r3, r7, r3
   25fec:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   25fee:	68bb      	ldr	r3, [r7, #8]
   25ff0:	b2da      	uxtb	r2, r3
   25ff2:	2338      	movs	r3, #56	; 0x38
   25ff4:	18fb      	adds	r3, r7, r3
   25ff6:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   25ff8:	687b      	ldr	r3, [r7, #4]
   25ffa:	78da      	ldrb	r2, [r3, #3]
   25ffc:	2338      	movs	r3, #56	; 0x38
   25ffe:	18fb      	adds	r3, r7, r3
   26000:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   26002:	687b      	ldr	r3, [r7, #4]
   26004:	789a      	ldrb	r2, [r3, #2]
   26006:	2338      	movs	r3, #56	; 0x38
   26008:	18fb      	adds	r3, r7, r3
   2600a:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   2600c:	687b      	ldr	r3, [r7, #4]
   2600e:	785a      	ldrb	r2, [r3, #1]
   26010:	2338      	movs	r3, #56	; 0x38
   26012:	18fb      	adds	r3, r7, r3
   26014:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   26016:	687b      	ldr	r3, [r7, #4]
   26018:	781a      	ldrb	r2, [r3, #0]
   2601a:	2338      	movs	r3, #56	; 0x38
   2601c:	18fb      	adds	r3, r7, r3
   2601e:	71da      	strb	r2, [r3, #7]
		len = 9;
   26020:	2309      	movs	r3, #9
   26022:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26024:	e002      	b.n	2602c <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   26026:	2300      	movs	r3, #0
   26028:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   2602a:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   2602c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2602e:	2b01      	cmp	r3, #1
   26030:	d001      	beq.n	26036 <spi_cmd_complete+0x24e>
		return result;
   26032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26034:	e33a      	b.n	266ac <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   26036:	4b4d      	ldr	r3, [pc, #308]	; (2616c <spi_cmd_complete+0x384>)
   26038:	781b      	ldrb	r3, [r3, #0]
   2603a:	2b00      	cmp	r3, #0
   2603c:	d111      	bne.n	26062 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   2603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26040:	1e5c      	subs	r4, r3, #1
   26042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26044:	3b01      	subs	r3, #1
   26046:	001a      	movs	r2, r3
   26048:	2338      	movs	r3, #56	; 0x38
   2604a:	18fb      	adds	r3, r7, r3
   2604c:	0019      	movs	r1, r3
   2604e:	207f      	movs	r0, #127	; 0x7f
   26050:	4b47      	ldr	r3, [pc, #284]	; (26170 <spi_cmd_complete+0x388>)
   26052:	4798      	blx	r3
   26054:	0003      	movs	r3, r0
   26056:	18db      	adds	r3, r3, r3
   26058:	b2da      	uxtb	r2, r3
   2605a:	2338      	movs	r3, #56	; 0x38
   2605c:	18fb      	adds	r3, r7, r3
   2605e:	551a      	strb	r2, [r3, r4]
   26060:	e002      	b.n	26068 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   26062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26064:	3b01      	subs	r3, #1
   26066:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   26068:	230f      	movs	r3, #15
   2606a:	18fb      	adds	r3, r7, r3
   2606c:	781b      	ldrb	r3, [r3, #0]
   2606e:	2bcf      	cmp	r3, #207	; 0xcf
   26070:	d009      	beq.n	26086 <spi_cmd_complete+0x29e>
   26072:	230f      	movs	r3, #15
   26074:	18fb      	adds	r3, r7, r3
   26076:	781b      	ldrb	r3, [r3, #0]
   26078:	2bc5      	cmp	r3, #197	; 0xc5
   2607a:	d004      	beq.n	26086 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   2607c:	230f      	movs	r3, #15
   2607e:	18fb      	adds	r3, r7, r3
   26080:	781b      	ldrb	r3, [r3, #0]
   26082:	2bc6      	cmp	r3, #198	; 0xc6
   26084:	d103      	bne.n	2608e <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   26086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26088:	3306      	adds	r3, #6
   2608a:	673b      	str	r3, [r7, #112]	; 0x70
   2608c:	e018      	b.n	260c0 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2608e:	230f      	movs	r3, #15
   26090:	18fb      	adds	r3, r7, r3
   26092:	781b      	ldrb	r3, [r3, #0]
   26094:	2bc4      	cmp	r3, #196	; 0xc4
   26096:	d004      	beq.n	260a2 <spi_cmd_complete+0x2ba>
   26098:	230f      	movs	r3, #15
   2609a:	18fb      	adds	r3, r7, r3
   2609c:	781b      	ldrb	r3, [r3, #0]
   2609e:	2bca      	cmp	r3, #202	; 0xca
   260a0:	d10b      	bne.n	260ba <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   260a2:	4b32      	ldr	r3, [pc, #200]	; (2616c <spi_cmd_complete+0x384>)
   260a4:	781b      	ldrb	r3, [r3, #0]
   260a6:	2b00      	cmp	r3, #0
   260a8:	d103      	bne.n	260b2 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   260aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   260ac:	330c      	adds	r3, #12
   260ae:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   260b0:	e006      	b.n	260c0 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   260b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   260b4:	330a      	adds	r3, #10
   260b6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   260b8:	e002      	b.n	260c0 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   260ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   260bc:	3305      	adds	r3, #5
   260be:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   260c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   260c2:	2b20      	cmp	r3, #32
   260c4:	d914      	bls.n	260f0 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   260c6:	23f7      	movs	r3, #247	; 0xf7
   260c8:	005a      	lsls	r2, r3, #1
   260ca:	492a      	ldr	r1, [pc, #168]	; (26174 <spi_cmd_complete+0x38c>)
   260cc:	4b2a      	ldr	r3, [pc, #168]	; (26178 <spi_cmd_complete+0x390>)
   260ce:	0018      	movs	r0, r3
   260d0:	4b2a      	ldr	r3, [pc, #168]	; (2617c <spi_cmd_complete+0x394>)
   260d2:	4798      	blx	r3
   260d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   260d6:	4b2a      	ldr	r3, [pc, #168]	; (26180 <spi_cmd_complete+0x398>)
   260d8:	2220      	movs	r2, #32
   260da:	0018      	movs	r0, r3
   260dc:	4b27      	ldr	r3, [pc, #156]	; (2617c <spi_cmd_complete+0x394>)
   260de:	4798      	blx	r3
   260e0:	4b28      	ldr	r3, [pc, #160]	; (26184 <spi_cmd_complete+0x39c>)
   260e2:	0018      	movs	r0, r3
   260e4:	4b25      	ldr	r3, [pc, #148]	; (2617c <spi_cmd_complete+0x394>)
   260e6:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   260e8:	2300      	movs	r3, #0
   260ea:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   260ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   260ee:	e2dd      	b.n	266ac <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   260f0:	2377      	movs	r3, #119	; 0x77
   260f2:	18fb      	adds	r3, r7, r3
   260f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   260f6:	701a      	strb	r2, [r3, #0]
   260f8:	e00d      	b.n	26116 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   260fa:	2377      	movs	r3, #119	; 0x77
   260fc:	18fb      	adds	r3, r7, r3
   260fe:	781b      	ldrb	r3, [r3, #0]
   26100:	2238      	movs	r2, #56	; 0x38
   26102:	18ba      	adds	r2, r7, r2
   26104:	2100      	movs	r1, #0
   26106:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   26108:	2377      	movs	r3, #119	; 0x77
   2610a:	18fb      	adds	r3, r7, r3
   2610c:	781a      	ldrb	r2, [r3, #0]
   2610e:	2377      	movs	r3, #119	; 0x77
   26110:	18fb      	adds	r3, r7, r3
   26112:	3201      	adds	r2, #1
   26114:	701a      	strb	r2, [r3, #0]
   26116:	2377      	movs	r3, #119	; 0x77
   26118:	18fb      	adds	r3, r7, r3
   2611a:	781a      	ldrb	r2, [r3, #0]
   2611c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2611e:	429a      	cmp	r2, r3
   26120:	d3eb      	bcc.n	260fa <spi_cmd_complete+0x312>
	}
	rix = len;
   26122:	2376      	movs	r3, #118	; 0x76
   26124:	18fb      	adds	r3, r7, r3
   26126:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26128:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   2612a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2612c:	b29a      	uxth	r2, r3
   2612e:	2318      	movs	r3, #24
   26130:	18f9      	adds	r1, r7, r3
   26132:	2338      	movs	r3, #56	; 0x38
   26134:	18fb      	adds	r3, r7, r3
   26136:	0018      	movs	r0, r3
   26138:	4b13      	ldr	r3, [pc, #76]	; (26188 <spi_cmd_complete+0x3a0>)
   2613a:	4798      	blx	r3
   2613c:	1e03      	subs	r3, r0, #0
   2613e:	d027      	beq.n	26190 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   26140:	23fa      	movs	r3, #250	; 0xfa
   26142:	33ff      	adds	r3, #255	; 0xff
   26144:	001a      	movs	r2, r3
   26146:	490b      	ldr	r1, [pc, #44]	; (26174 <spi_cmd_complete+0x38c>)
   26148:	4b0b      	ldr	r3, [pc, #44]	; (26178 <spi_cmd_complete+0x390>)
   2614a:	0018      	movs	r0, r3
   2614c:	4b0b      	ldr	r3, [pc, #44]	; (2617c <spi_cmd_complete+0x394>)
   2614e:	4798      	blx	r3
   26150:	4b0e      	ldr	r3, [pc, #56]	; (2618c <spi_cmd_complete+0x3a4>)
   26152:	0018      	movs	r0, r3
   26154:	4b09      	ldr	r3, [pc, #36]	; (2617c <spi_cmd_complete+0x394>)
   26156:	4798      	blx	r3
   26158:	4b0a      	ldr	r3, [pc, #40]	; (26184 <spi_cmd_complete+0x39c>)
   2615a:	0018      	movs	r0, r3
   2615c:	4b07      	ldr	r3, [pc, #28]	; (2617c <spi_cmd_complete+0x394>)
   2615e:	4798      	blx	r3
		result = N_FAIL;
   26160:	2300      	movs	r3, #0
   26162:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26166:	e2a1      	b.n	266ac <spi_cmd_complete+0x8c4>
   26168:	0003c608 	.word	0x0003c608
   2616c:	20004124 	.word	0x20004124
   26170:	0002581d 	.word	0x0002581d
   26174:	0003c668 	.word	0x0003c668
   26178:	0003c054 	.word	0x0003c054
   2617c:	00020349 	.word	0x00020349
   26180:	0003c11c 	.word	0x0003c11c
   26184:	0003c094 	.word	0x0003c094
   26188:	000257a9 	.word	0x000257a9
   2618c:	0003c068 	.word	0x0003c068
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   26190:	230f      	movs	r3, #15
   26192:	18fb      	adds	r3, r7, r3
   26194:	781b      	ldrb	r3, [r3, #0]
   26196:	2bcf      	cmp	r3, #207	; 0xcf
   26198:	d009      	beq.n	261ae <spi_cmd_complete+0x3c6>
   2619a:	230f      	movs	r3, #15
   2619c:	18fb      	adds	r3, r7, r3
   2619e:	781b      	ldrb	r3, [r3, #0]
   261a0:	2bc5      	cmp	r3, #197	; 0xc5
   261a2:	d004      	beq.n	261ae <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   261a4:	230f      	movs	r3, #15
   261a6:	18fb      	adds	r3, r7, r3
   261a8:	781b      	ldrb	r3, [r3, #0]
   261aa:	2bc6      	cmp	r3, #198	; 0xc6
   261ac:	d106      	bne.n	261bc <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   261ae:	2376      	movs	r3, #118	; 0x76
   261b0:	18fb      	adds	r3, r7, r3
   261b2:	781a      	ldrb	r2, [r3, #0]
   261b4:	2376      	movs	r3, #118	; 0x76
   261b6:	18fb      	adds	r3, r7, r3
   261b8:	3201      	adds	r2, #1
   261ba:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   261bc:	2376      	movs	r3, #118	; 0x76
   261be:	18fb      	adds	r3, r7, r3
   261c0:	781b      	ldrb	r3, [r3, #0]
   261c2:	2276      	movs	r2, #118	; 0x76
   261c4:	18ba      	adds	r2, r7, r2
   261c6:	1c59      	adds	r1, r3, #1
   261c8:	7011      	strb	r1, [r2, #0]
   261ca:	001a      	movs	r2, r3
   261cc:	2318      	movs	r3, #24
   261ce:	18fb      	adds	r3, r7, r3
   261d0:	5c9a      	ldrb	r2, [r3, r2]
   261d2:	2317      	movs	r3, #23
   261d4:	18fb      	adds	r3, r7, r3
   261d6:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   261d8:	2317      	movs	r3, #23
   261da:	18fb      	adds	r3, r7, r3
   261dc:	781b      	ldrb	r3, [r3, #0]
   261de:	220f      	movs	r2, #15
   261e0:	18ba      	adds	r2, r7, r2
   261e2:	7812      	ldrb	r2, [r2, #0]
   261e4:	429a      	cmp	r2, r3
   261e6:	d018      	beq.n	2621a <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   261e8:	4add      	ldr	r2, [pc, #884]	; (26560 <spi_cmd_complete+0x778>)
   261ea:	49de      	ldr	r1, [pc, #888]	; (26564 <spi_cmd_complete+0x77c>)
   261ec:	4bde      	ldr	r3, [pc, #888]	; (26568 <spi_cmd_complete+0x780>)
   261ee:	0018      	movs	r0, r3
   261f0:	4bde      	ldr	r3, [pc, #888]	; (2656c <spi_cmd_complete+0x784>)
   261f2:	4798      	blx	r3
   261f4:	230f      	movs	r3, #15
   261f6:	18fb      	adds	r3, r7, r3
   261f8:	7819      	ldrb	r1, [r3, #0]
   261fa:	2317      	movs	r3, #23
   261fc:	18fb      	adds	r3, r7, r3
   261fe:	781b      	ldrb	r3, [r3, #0]
   26200:	001a      	movs	r2, r3
   26202:	4bdb      	ldr	r3, [pc, #876]	; (26570 <spi_cmd_complete+0x788>)
   26204:	0018      	movs	r0, r3
   26206:	4bd9      	ldr	r3, [pc, #868]	; (2656c <spi_cmd_complete+0x784>)
   26208:	4798      	blx	r3
   2620a:	4bda      	ldr	r3, [pc, #872]	; (26574 <spi_cmd_complete+0x78c>)
   2620c:	0018      	movs	r0, r3
   2620e:	4bd7      	ldr	r3, [pc, #860]	; (2656c <spi_cmd_complete+0x784>)
   26210:	4798      	blx	r3
		result = N_FAIL;
   26212:	2300      	movs	r3, #0
   26214:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26218:	e248      	b.n	266ac <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   2621a:	2376      	movs	r3, #118	; 0x76
   2621c:	18fb      	adds	r3, r7, r3
   2621e:	781b      	ldrb	r3, [r3, #0]
   26220:	2276      	movs	r2, #118	; 0x76
   26222:	18ba      	adds	r2, r7, r2
   26224:	1c59      	adds	r1, r3, #1
   26226:	7011      	strb	r1, [r2, #0]
   26228:	001a      	movs	r2, r3
   2622a:	2318      	movs	r3, #24
   2622c:	18fb      	adds	r3, r7, r3
   2622e:	5c9a      	ldrb	r2, [r3, r2]
   26230:	2317      	movs	r3, #23
   26232:	18fb      	adds	r3, r7, r3
   26234:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   26236:	2317      	movs	r3, #23
   26238:	18fb      	adds	r3, r7, r3
   2623a:	781b      	ldrb	r3, [r3, #0]
   2623c:	2b00      	cmp	r3, #0
   2623e:	d016      	beq.n	2626e <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   26240:	4acd      	ldr	r2, [pc, #820]	; (26578 <spi_cmd_complete+0x790>)
   26242:	49c8      	ldr	r1, [pc, #800]	; (26564 <spi_cmd_complete+0x77c>)
   26244:	4bc8      	ldr	r3, [pc, #800]	; (26568 <spi_cmd_complete+0x780>)
   26246:	0018      	movs	r0, r3
   26248:	4bc8      	ldr	r3, [pc, #800]	; (2656c <spi_cmd_complete+0x784>)
   2624a:	4798      	blx	r3
   2624c:	2317      	movs	r3, #23
   2624e:	18fb      	adds	r3, r7, r3
   26250:	781b      	ldrb	r3, [r3, #0]
   26252:	001a      	movs	r2, r3
   26254:	4bc9      	ldr	r3, [pc, #804]	; (2657c <spi_cmd_complete+0x794>)
   26256:	0011      	movs	r1, r2
   26258:	0018      	movs	r0, r3
   2625a:	4bc4      	ldr	r3, [pc, #784]	; (2656c <spi_cmd_complete+0x784>)
   2625c:	4798      	blx	r3
   2625e:	4bc5      	ldr	r3, [pc, #788]	; (26574 <spi_cmd_complete+0x78c>)
   26260:	0018      	movs	r0, r3
   26262:	4bc2      	ldr	r3, [pc, #776]	; (2656c <spi_cmd_complete+0x784>)
   26264:	4798      	blx	r3
		result = N_FAIL;
   26266:	2300      	movs	r3, #0
   26268:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2626a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2626c:	e21e      	b.n	266ac <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   2626e:	230f      	movs	r3, #15
   26270:	18fb      	adds	r3, r7, r3
   26272:	781b      	ldrb	r3, [r3, #0]
   26274:	2bc4      	cmp	r3, #196	; 0xc4
   26276:	d00f      	beq.n	26298 <spi_cmd_complete+0x4b0>
   26278:	230f      	movs	r3, #15
   2627a:	18fb      	adds	r3, r7, r3
   2627c:	781b      	ldrb	r3, [r3, #0]
   2627e:	2bca      	cmp	r3, #202	; 0xca
   26280:	d00a      	beq.n	26298 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26282:	230f      	movs	r3, #15
   26284:	18fb      	adds	r3, r7, r3
   26286:	781b      	ldrb	r3, [r3, #0]
   26288:	2bc2      	cmp	r3, #194	; 0xc2
   2628a:	d005      	beq.n	26298 <spi_cmd_complete+0x4b0>
   2628c:	230f      	movs	r3, #15
   2628e:	18fb      	adds	r3, r7, r3
   26290:	781b      	ldrb	r3, [r3, #0]
   26292:	2bc8      	cmp	r3, #200	; 0xc8
   26294:	d000      	beq.n	26298 <spi_cmd_complete+0x4b0>
   26296:	e208      	b.n	266aa <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   26298:	230a      	movs	r3, #10
   2629a:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   2629c:	2376      	movs	r3, #118	; 0x76
   2629e:	18fb      	adds	r3, r7, r3
   262a0:	781a      	ldrb	r2, [r3, #0]
   262a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   262a4:	429a      	cmp	r2, r3
   262a6:	d218      	bcs.n	262da <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   262a8:	2376      	movs	r3, #118	; 0x76
   262aa:	18fb      	adds	r3, r7, r3
   262ac:	781b      	ldrb	r3, [r3, #0]
   262ae:	2276      	movs	r2, #118	; 0x76
   262b0:	18ba      	adds	r2, r7, r2
   262b2:	1c59      	adds	r1, r3, #1
   262b4:	7011      	strb	r1, [r2, #0]
   262b6:	001a      	movs	r2, r3
   262b8:	2318      	movs	r3, #24
   262ba:	18fb      	adds	r3, r7, r3
   262bc:	5c9a      	ldrb	r2, [r3, r2]
   262be:	2317      	movs	r3, #23
   262c0:	18fb      	adds	r3, r7, r3
   262c2:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   262c4:	2317      	movs	r3, #23
   262c6:	18fb      	adds	r3, r7, r3
   262c8:	781b      	ldrb	r3, [r3, #0]
   262ca:	091b      	lsrs	r3, r3, #4
   262cc:	b2db      	uxtb	r3, r3
   262ce:	001a      	movs	r2, r3
   262d0:	230f      	movs	r3, #15
   262d2:	4013      	ands	r3, r2
   262d4:	2b0f      	cmp	r3, #15
   262d6:	d103      	bne.n	262e0 <spi_cmd_complete+0x4f8>
					break;
   262d8:	e007      	b.n	262ea <spi_cmd_complete+0x502>
					retry = 0;
   262da:	2300      	movs	r3, #0
   262dc:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   262de:	e004      	b.n	262ea <spi_cmd_complete+0x502>
			} while (retry--);
   262e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   262e2:	1e5a      	subs	r2, r3, #1
   262e4:	667a      	str	r2, [r7, #100]	; 0x64
   262e6:	2b00      	cmp	r3, #0
   262e8:	d1d8      	bne.n	2629c <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   262ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   262ec:	2b00      	cmp	r3, #0
   262ee:	dc18      	bgt.n	26322 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   262f0:	2395      	movs	r3, #149	; 0x95
   262f2:	009a      	lsls	r2, r3, #2
   262f4:	499b      	ldr	r1, [pc, #620]	; (26564 <spi_cmd_complete+0x77c>)
   262f6:	4b9c      	ldr	r3, [pc, #624]	; (26568 <spi_cmd_complete+0x780>)
   262f8:	0018      	movs	r0, r3
   262fa:	4b9c      	ldr	r3, [pc, #624]	; (2656c <spi_cmd_complete+0x784>)
   262fc:	4798      	blx	r3
   262fe:	2317      	movs	r3, #23
   26300:	18fb      	adds	r3, r7, r3
   26302:	781b      	ldrb	r3, [r3, #0]
   26304:	001a      	movs	r2, r3
   26306:	4b9e      	ldr	r3, [pc, #632]	; (26580 <spi_cmd_complete+0x798>)
   26308:	0011      	movs	r1, r2
   2630a:	0018      	movs	r0, r3
   2630c:	4b97      	ldr	r3, [pc, #604]	; (2656c <spi_cmd_complete+0x784>)
   2630e:	4798      	blx	r3
   26310:	4b98      	ldr	r3, [pc, #608]	; (26574 <spi_cmd_complete+0x78c>)
   26312:	0018      	movs	r0, r3
   26314:	4b95      	ldr	r3, [pc, #596]	; (2656c <spi_cmd_complete+0x784>)
   26316:	4798      	blx	r3
				result = N_RESET;
   26318:	2301      	movs	r3, #1
   2631a:	425b      	negs	r3, r3
   2631c:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   2631e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26320:	e1c4      	b.n	266ac <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   26322:	230f      	movs	r3, #15
   26324:	18fb      	adds	r3, r7, r3
   26326:	781b      	ldrb	r3, [r3, #0]
   26328:	2bc4      	cmp	r3, #196	; 0xc4
   2632a:	d005      	beq.n	26338 <spi_cmd_complete+0x550>
   2632c:	230f      	movs	r3, #15
   2632e:	18fb      	adds	r3, r7, r3
   26330:	781b      	ldrb	r3, [r3, #0]
   26332:	2bca      	cmp	r3, #202	; 0xca
   26334:	d000      	beq.n	26338 <spi_cmd_complete+0x550>
   26336:	e08e      	b.n	26456 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   26338:	2376      	movs	r3, #118	; 0x76
   2633a:	18fb      	adds	r3, r7, r3
   2633c:	781b      	ldrb	r3, [r3, #0]
   2633e:	3303      	adds	r3, #3
   26340:	001a      	movs	r2, r3
   26342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26344:	429a      	cmp	r2, r3
   26346:	d23c      	bcs.n	263c2 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   26348:	2376      	movs	r3, #118	; 0x76
   2634a:	18fb      	adds	r3, r7, r3
   2634c:	781b      	ldrb	r3, [r3, #0]
   2634e:	2276      	movs	r2, #118	; 0x76
   26350:	18ba      	adds	r2, r7, r2
   26352:	1c59      	adds	r1, r3, #1
   26354:	7011      	strb	r1, [r2, #0]
   26356:	001a      	movs	r2, r3
   26358:	2318      	movs	r3, #24
   2635a:	18fb      	adds	r3, r7, r3
   2635c:	5c9a      	ldrb	r2, [r3, r2]
   2635e:	687b      	ldr	r3, [r7, #4]
   26360:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   26362:	687b      	ldr	r3, [r7, #4]
   26364:	1c5a      	adds	r2, r3, #1
   26366:	2376      	movs	r3, #118	; 0x76
   26368:	18fb      	adds	r3, r7, r3
   2636a:	781b      	ldrb	r3, [r3, #0]
   2636c:	2176      	movs	r1, #118	; 0x76
   2636e:	1879      	adds	r1, r7, r1
   26370:	1c58      	adds	r0, r3, #1
   26372:	7008      	strb	r0, [r1, #0]
   26374:	0019      	movs	r1, r3
   26376:	2318      	movs	r3, #24
   26378:	18fb      	adds	r3, r7, r3
   2637a:	5c5b      	ldrb	r3, [r3, r1]
   2637c:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   2637e:	687b      	ldr	r3, [r7, #4]
   26380:	1c9a      	adds	r2, r3, #2
   26382:	2376      	movs	r3, #118	; 0x76
   26384:	18fb      	adds	r3, r7, r3
   26386:	781b      	ldrb	r3, [r3, #0]
   26388:	2176      	movs	r1, #118	; 0x76
   2638a:	1879      	adds	r1, r7, r1
   2638c:	1c58      	adds	r0, r3, #1
   2638e:	7008      	strb	r0, [r1, #0]
   26390:	0019      	movs	r1, r3
   26392:	2318      	movs	r3, #24
   26394:	18fb      	adds	r3, r7, r3
   26396:	5c5b      	ldrb	r3, [r3, r1]
   26398:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   2639a:	687b      	ldr	r3, [r7, #4]
   2639c:	1cda      	adds	r2, r3, #3
   2639e:	2376      	movs	r3, #118	; 0x76
   263a0:	18fb      	adds	r3, r7, r3
   263a2:	781b      	ldrb	r3, [r3, #0]
   263a4:	2176      	movs	r1, #118	; 0x76
   263a6:	1879      	adds	r1, r7, r1
   263a8:	1c58      	adds	r0, r3, #1
   263aa:	7008      	strb	r0, [r1, #0]
   263ac:	0019      	movs	r1, r3
   263ae:	2318      	movs	r3, #24
   263b0:	18fb      	adds	r3, r7, r3
   263b2:	5c5b      	ldrb	r3, [r3, r1]
   263b4:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   263b6:	4b73      	ldr	r3, [pc, #460]	; (26584 <spi_cmd_complete+0x79c>)
   263b8:	781b      	ldrb	r3, [r3, #0]
   263ba:	2b00      	cmp	r3, #0
   263bc:	d000      	beq.n	263c0 <spi_cmd_complete+0x5d8>
   263be:	e174      	b.n	266aa <spi_cmd_complete+0x8c2>
   263c0:	e011      	b.n	263e6 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   263c2:	4a71      	ldr	r2, [pc, #452]	; (26588 <spi_cmd_complete+0x7a0>)
   263c4:	4967      	ldr	r1, [pc, #412]	; (26564 <spi_cmd_complete+0x77c>)
   263c6:	4b68      	ldr	r3, [pc, #416]	; (26568 <spi_cmd_complete+0x780>)
   263c8:	0018      	movs	r0, r3
   263ca:	4b68      	ldr	r3, [pc, #416]	; (2656c <spi_cmd_complete+0x784>)
   263cc:	4798      	blx	r3
   263ce:	4b6f      	ldr	r3, [pc, #444]	; (2658c <spi_cmd_complete+0x7a4>)
   263d0:	0018      	movs	r0, r3
   263d2:	4b66      	ldr	r3, [pc, #408]	; (2656c <spi_cmd_complete+0x784>)
   263d4:	4798      	blx	r3
   263d6:	4b67      	ldr	r3, [pc, #412]	; (26574 <spi_cmd_complete+0x78c>)
   263d8:	0018      	movs	r0, r3
   263da:	4b64      	ldr	r3, [pc, #400]	; (2656c <spi_cmd_complete+0x784>)
   263dc:	4798      	blx	r3
					result = N_FAIL;
   263de:	2300      	movs	r3, #0
   263e0:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   263e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   263e4:	e162      	b.n	266ac <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   263e6:	2376      	movs	r3, #118	; 0x76
   263e8:	18fb      	adds	r3, r7, r3
   263ea:	781b      	ldrb	r3, [r3, #0]
   263ec:	3301      	adds	r3, #1
   263ee:	001a      	movs	r2, r3
   263f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   263f2:	429a      	cmp	r2, r3
   263f4:	d21c      	bcs.n	26430 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   263f6:	2376      	movs	r3, #118	; 0x76
   263f8:	18fb      	adds	r3, r7, r3
   263fa:	781b      	ldrb	r3, [r3, #0]
   263fc:	2276      	movs	r2, #118	; 0x76
   263fe:	18ba      	adds	r2, r7, r2
   26400:	1c59      	adds	r1, r3, #1
   26402:	7011      	strb	r1, [r2, #0]
   26404:	001a      	movs	r2, r3
   26406:	2318      	movs	r3, #24
   26408:	18fb      	adds	r3, r7, r3
   2640a:	5c9a      	ldrb	r2, [r3, r2]
   2640c:	2314      	movs	r3, #20
   2640e:	18fb      	adds	r3, r7, r3
   26410:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   26412:	2376      	movs	r3, #118	; 0x76
   26414:	18fb      	adds	r3, r7, r3
   26416:	781b      	ldrb	r3, [r3, #0]
   26418:	2276      	movs	r2, #118	; 0x76
   2641a:	18ba      	adds	r2, r7, r2
   2641c:	1c59      	adds	r1, r3, #1
   2641e:	7011      	strb	r1, [r2, #0]
   26420:	001a      	movs	r2, r3
   26422:	2318      	movs	r3, #24
   26424:	18fb      	adds	r3, r7, r3
   26426:	5c9a      	ldrb	r2, [r3, r2]
   26428:	2314      	movs	r3, #20
   2642a:	18fb      	adds	r3, r7, r3
   2642c:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   2642e:	e13c      	b.n	266aa <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   26430:	239c      	movs	r3, #156	; 0x9c
   26432:	009a      	lsls	r2, r3, #2
   26434:	494b      	ldr	r1, [pc, #300]	; (26564 <spi_cmd_complete+0x77c>)
   26436:	4b4c      	ldr	r3, [pc, #304]	; (26568 <spi_cmd_complete+0x780>)
   26438:	0018      	movs	r0, r3
   2643a:	4b4c      	ldr	r3, [pc, #304]	; (2656c <spi_cmd_complete+0x784>)
   2643c:	4798      	blx	r3
   2643e:	4b54      	ldr	r3, [pc, #336]	; (26590 <spi_cmd_complete+0x7a8>)
   26440:	0018      	movs	r0, r3
   26442:	4b4a      	ldr	r3, [pc, #296]	; (2656c <spi_cmd_complete+0x784>)
   26444:	4798      	blx	r3
   26446:	4b4b      	ldr	r3, [pc, #300]	; (26574 <spi_cmd_complete+0x78c>)
   26448:	0018      	movs	r0, r3
   2644a:	4b48      	ldr	r3, [pc, #288]	; (2656c <spi_cmd_complete+0x784>)
   2644c:	4798      	blx	r3
						result = N_FAIL;
   2644e:	2300      	movs	r3, #0
   26450:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   26452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26454:	e12a      	b.n	266ac <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26456:	230f      	movs	r3, #15
   26458:	18fb      	adds	r3, r7, r3
   2645a:	781b      	ldrb	r3, [r3, #0]
   2645c:	2bc2      	cmp	r3, #194	; 0xc2
   2645e:	d005      	beq.n	2646c <spi_cmd_complete+0x684>
   26460:	230f      	movs	r3, #15
   26462:	18fb      	adds	r3, r7, r3
   26464:	781b      	ldrb	r3, [r3, #0]
   26466:	2bc8      	cmp	r3, #200	; 0xc8
   26468:	d000      	beq.n	2646c <spi_cmd_complete+0x684>
   2646a:	e11e      	b.n	266aa <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   2646c:	2300      	movs	r3, #0
   2646e:	663b      	str	r3, [r7, #96]	; 0x60
   26470:	e011      	b.n	26496 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   26472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26474:	1c5a      	adds	r2, r3, #1
   26476:	663a      	str	r2, [r7, #96]	; 0x60
   26478:	001a      	movs	r2, r3
   2647a:	687b      	ldr	r3, [r7, #4]
   2647c:	189a      	adds	r2, r3, r2
   2647e:	2376      	movs	r3, #118	; 0x76
   26480:	18fb      	adds	r3, r7, r3
   26482:	781b      	ldrb	r3, [r3, #0]
   26484:	2176      	movs	r1, #118	; 0x76
   26486:	1879      	adds	r1, r7, r1
   26488:	1c58      	adds	r0, r3, #1
   2648a:	7008      	strb	r0, [r1, #0]
   2648c:	0019      	movs	r1, r3
   2648e:	2318      	movs	r3, #24
   26490:	18fb      	adds	r3, r7, r3
   26492:	5c5b      	ldrb	r3, [r3, r1]
   26494:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   26496:	2376      	movs	r3, #118	; 0x76
   26498:	18fb      	adds	r3, r7, r3
   2649a:	781a      	ldrb	r2, [r3, #0]
   2649c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2649e:	429a      	cmp	r2, r3
   264a0:	d203      	bcs.n	264aa <spi_cmd_complete+0x6c2>
   264a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   264a4:	683b      	ldr	r3, [r7, #0]
   264a6:	429a      	cmp	r2, r3
   264a8:	d3e3      	bcc.n	26472 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   264aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   264ac:	683a      	ldr	r2, [r7, #0]
   264ae:	1ad3      	subs	r3, r2, r3
   264b0:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   264b2:	683b      	ldr	r3, [r7, #0]
   264b4:	2b00      	cmp	r3, #0
   264b6:	d100      	bne.n	264ba <spi_cmd_complete+0x6d2>
   264b8:	e0f1      	b.n	2669e <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   264ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   264bc:	2280      	movs	r2, #128	; 0x80
   264be:	0192      	lsls	r2, r2, #6
   264c0:	1ad3      	subs	r3, r2, r3
   264c2:	001a      	movs	r2, r3
   264c4:	683b      	ldr	r3, [r7, #0]
   264c6:	429a      	cmp	r2, r3
   264c8:	d302      	bcc.n	264d0 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   264ca:	683b      	ldr	r3, [r7, #0]
   264cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   264ce:	e004      	b.n	264da <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   264d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   264d2:	2280      	movs	r2, #128	; 0x80
   264d4:	0192      	lsls	r2, r2, #6
   264d6:	1ad3      	subs	r3, r2, r3
   264d8:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   264da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   264dc:	687a      	ldr	r2, [r7, #4]
   264de:	18d3      	adds	r3, r2, r3
   264e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   264e2:	b292      	uxth	r2, r2
   264e4:	0011      	movs	r1, r2
   264e6:	0018      	movs	r0, r3
   264e8:	4b2a      	ldr	r3, [pc, #168]	; (26594 <spi_cmd_complete+0x7ac>)
   264ea:	4798      	blx	r3
   264ec:	1e03      	subs	r3, r0, #0
   264ee:	d010      	beq.n	26512 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   264f0:	4a29      	ldr	r2, [pc, #164]	; (26598 <spi_cmd_complete+0x7b0>)
   264f2:	491c      	ldr	r1, [pc, #112]	; (26564 <spi_cmd_complete+0x77c>)
   264f4:	4b1c      	ldr	r3, [pc, #112]	; (26568 <spi_cmd_complete+0x780>)
   264f6:	0018      	movs	r0, r3
   264f8:	4b1c      	ldr	r3, [pc, #112]	; (2656c <spi_cmd_complete+0x784>)
   264fa:	4798      	blx	r3
   264fc:	4b27      	ldr	r3, [pc, #156]	; (2659c <spi_cmd_complete+0x7b4>)
   264fe:	0018      	movs	r0, r3
   26500:	4b1a      	ldr	r3, [pc, #104]	; (2656c <spi_cmd_complete+0x784>)
   26502:	4798      	blx	r3
   26504:	4b1b      	ldr	r3, [pc, #108]	; (26574 <spi_cmd_complete+0x78c>)
   26506:	0018      	movs	r0, r3
   26508:	4b18      	ldr	r3, [pc, #96]	; (2656c <spi_cmd_complete+0x784>)
   2650a:	4798      	blx	r3
						result = N_FAIL;
   2650c:	2300      	movs	r3, #0
   2650e:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   26510:	e0cb      	b.n	266aa <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   26512:	4b1c      	ldr	r3, [pc, #112]	; (26584 <spi_cmd_complete+0x79c>)
   26514:	781b      	ldrb	r3, [r3, #0]
   26516:	2b00      	cmp	r3, #0
   26518:	d119      	bne.n	2654e <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   2651a:	2314      	movs	r3, #20
   2651c:	18fb      	adds	r3, r7, r3
   2651e:	2102      	movs	r1, #2
   26520:	0018      	movs	r0, r3
   26522:	4b1c      	ldr	r3, [pc, #112]	; (26594 <spi_cmd_complete+0x7ac>)
   26524:	4798      	blx	r3
   26526:	1e03      	subs	r3, r0, #0
   26528:	d011      	beq.n	2654e <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   2652a:	23a6      	movs	r3, #166	; 0xa6
   2652c:	009a      	lsls	r2, r3, #2
   2652e:	490d      	ldr	r1, [pc, #52]	; (26564 <spi_cmd_complete+0x77c>)
   26530:	4b0d      	ldr	r3, [pc, #52]	; (26568 <spi_cmd_complete+0x780>)
   26532:	0018      	movs	r0, r3
   26534:	4b0d      	ldr	r3, [pc, #52]	; (2656c <spi_cmd_complete+0x784>)
   26536:	4798      	blx	r3
   26538:	4b19      	ldr	r3, [pc, #100]	; (265a0 <spi_cmd_complete+0x7b8>)
   2653a:	0018      	movs	r0, r3
   2653c:	4b0b      	ldr	r3, [pc, #44]	; (2656c <spi_cmd_complete+0x784>)
   2653e:	4798      	blx	r3
   26540:	4b0c      	ldr	r3, [pc, #48]	; (26574 <spi_cmd_complete+0x78c>)
   26542:	0018      	movs	r0, r3
   26544:	4b09      	ldr	r3, [pc, #36]	; (2656c <spi_cmd_complete+0x784>)
   26546:	4798      	blx	r3
							result = N_FAIL;
   26548:	2300      	movs	r3, #0
   2654a:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   2654c:	e0ad      	b.n	266aa <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   2654e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26552:	18d3      	adds	r3, r2, r3
   26554:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26558:	683a      	ldr	r2, [r7, #0]
   2655a:	1ad3      	subs	r3, r2, r3
   2655c:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   2655e:	e09e      	b.n	2669e <spi_cmd_complete+0x8b6>
   26560:	0000022f 	.word	0x0000022f
   26564:	0003c668 	.word	0x0003c668
   26568:	0003c054 	.word	0x0003c054
   2656c:	00020349 	.word	0x00020349
   26570:	0003c14c 	.word	0x0003c14c
   26574:	0003c094 	.word	0x0003c094
   26578:	00000239 	.word	0x00000239
   2657c:	0003c188 	.word	0x0003c188
   26580:	0003c1bc 	.word	0x0003c1bc
   26584:	20004124 	.word	0x20004124
   26588:	00000263 	.word	0x00000263
   2658c:	0003c1ec 	.word	0x0003c1ec
   26590:	0003c21c 	.word	0x0003c21c
   26594:	00025721 	.word	0x00025721
   26598:	0000028e 	.word	0x0000028e
   2659c:	0003c24c 	.word	0x0003c24c
   265a0:	0003c280 	.word	0x0003c280
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   265a4:	683a      	ldr	r2, [r7, #0]
   265a6:	2380      	movs	r3, #128	; 0x80
   265a8:	019b      	lsls	r3, r3, #6
   265aa:	429a      	cmp	r2, r3
   265ac:	d802      	bhi.n	265b4 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   265ae:	683b      	ldr	r3, [r7, #0]
   265b0:	65bb      	str	r3, [r7, #88]	; 0x58
   265b2:	e002      	b.n	265ba <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   265b4:	2380      	movs	r3, #128	; 0x80
   265b6:	019b      	lsls	r3, r3, #6
   265b8:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   265ba:	230a      	movs	r3, #10
   265bc:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   265be:	2317      	movs	r3, #23
   265c0:	18fb      	adds	r3, r7, r3
   265c2:	2101      	movs	r1, #1
   265c4:	0018      	movs	r0, r3
   265c6:	4b3b      	ldr	r3, [pc, #236]	; (266b4 <spi_cmd_complete+0x8cc>)
   265c8:	4798      	blx	r3
   265ca:	1e03      	subs	r3, r0, #0
   265cc:	d011      	beq.n	265f2 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   265ce:	23ae      	movs	r3, #174	; 0xae
   265d0:	009a      	lsls	r2, r3, #2
   265d2:	4939      	ldr	r1, [pc, #228]	; (266b8 <spi_cmd_complete+0x8d0>)
   265d4:	4b39      	ldr	r3, [pc, #228]	; (266bc <spi_cmd_complete+0x8d4>)
   265d6:	0018      	movs	r0, r3
   265d8:	4b39      	ldr	r3, [pc, #228]	; (266c0 <spi_cmd_complete+0x8d8>)
   265da:	4798      	blx	r3
   265dc:	4b39      	ldr	r3, [pc, #228]	; (266c4 <spi_cmd_complete+0x8dc>)
   265de:	0018      	movs	r0, r3
   265e0:	4b37      	ldr	r3, [pc, #220]	; (266c0 <spi_cmd_complete+0x8d8>)
   265e2:	4798      	blx	r3
   265e4:	4b38      	ldr	r3, [pc, #224]	; (266c8 <spi_cmd_complete+0x8e0>)
   265e6:	0018      	movs	r0, r3
   265e8:	4b35      	ldr	r3, [pc, #212]	; (266c0 <spi_cmd_complete+0x8d8>)
   265ea:	4798      	blx	r3
							result = N_FAIL;
   265ec:	2300      	movs	r3, #0
   265ee:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   265f0:	e010      	b.n	26614 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   265f2:	2317      	movs	r3, #23
   265f4:	18fb      	adds	r3, r7, r3
   265f6:	781b      	ldrb	r3, [r3, #0]
   265f8:	091b      	lsrs	r3, r3, #4
   265fa:	b2db      	uxtb	r3, r3
   265fc:	001a      	movs	r2, r3
   265fe:	230f      	movs	r3, #15
   26600:	4013      	ands	r3, r2
   26602:	2b0f      	cmp	r3, #15
   26604:	d005      	beq.n	26612 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   26606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26608:	1e5a      	subs	r2, r3, #1
   2660a:	667a      	str	r2, [r7, #100]	; 0x64
   2660c:	2b00      	cmp	r3, #0
   2660e:	d1d6      	bne.n	265be <spi_cmd_complete+0x7d6>
   26610:	e000      	b.n	26614 <spi_cmd_complete+0x82c>
							break;
   26612:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   26614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26616:	2b00      	cmp	r3, #0
   26618:	d046      	beq.n	266a8 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   2661a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2661c:	687a      	ldr	r2, [r7, #4]
   2661e:	18d3      	adds	r3, r2, r3
   26620:	6dba      	ldr	r2, [r7, #88]	; 0x58
   26622:	b292      	uxth	r2, r2
   26624:	0011      	movs	r1, r2
   26626:	0018      	movs	r0, r3
   26628:	4b22      	ldr	r3, [pc, #136]	; (266b4 <spi_cmd_complete+0x8cc>)
   2662a:	4798      	blx	r3
   2662c:	1e03      	subs	r3, r0, #0
   2662e:	d011      	beq.n	26654 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   26630:	23b2      	movs	r3, #178	; 0xb2
   26632:	009a      	lsls	r2, r3, #2
   26634:	4920      	ldr	r1, [pc, #128]	; (266b8 <spi_cmd_complete+0x8d0>)
   26636:	4b21      	ldr	r3, [pc, #132]	; (266bc <spi_cmd_complete+0x8d4>)
   26638:	0018      	movs	r0, r3
   2663a:	4b21      	ldr	r3, [pc, #132]	; (266c0 <spi_cmd_complete+0x8d8>)
   2663c:	4798      	blx	r3
   2663e:	4b23      	ldr	r3, [pc, #140]	; (266cc <spi_cmd_complete+0x8e4>)
   26640:	0018      	movs	r0, r3
   26642:	4b1f      	ldr	r3, [pc, #124]	; (266c0 <spi_cmd_complete+0x8d8>)
   26644:	4798      	blx	r3
   26646:	4b20      	ldr	r3, [pc, #128]	; (266c8 <spi_cmd_complete+0x8e0>)
   26648:	0018      	movs	r0, r3
   2664a:	4b1d      	ldr	r3, [pc, #116]	; (266c0 <spi_cmd_complete+0x8d8>)
   2664c:	4798      	blx	r3
						result = N_FAIL;
   2664e:	2300      	movs	r3, #0
   26650:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   26652:	e02a      	b.n	266aa <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   26654:	4b1e      	ldr	r3, [pc, #120]	; (266d0 <spi_cmd_complete+0x8e8>)
   26656:	781b      	ldrb	r3, [r3, #0]
   26658:	2b00      	cmp	r3, #0
   2665a:	d118      	bne.n	2668e <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   2665c:	2314      	movs	r3, #20
   2665e:	18fb      	adds	r3, r7, r3
   26660:	2102      	movs	r1, #2
   26662:	0018      	movs	r0, r3
   26664:	4b13      	ldr	r3, [pc, #76]	; (266b4 <spi_cmd_complete+0x8cc>)
   26666:	4798      	blx	r3
   26668:	1e03      	subs	r3, r0, #0
   2666a:	d010      	beq.n	2668e <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   2666c:	4a19      	ldr	r2, [pc, #100]	; (266d4 <spi_cmd_complete+0x8ec>)
   2666e:	4912      	ldr	r1, [pc, #72]	; (266b8 <spi_cmd_complete+0x8d0>)
   26670:	4b12      	ldr	r3, [pc, #72]	; (266bc <spi_cmd_complete+0x8d4>)
   26672:	0018      	movs	r0, r3
   26674:	4b12      	ldr	r3, [pc, #72]	; (266c0 <spi_cmd_complete+0x8d8>)
   26676:	4798      	blx	r3
   26678:	4b17      	ldr	r3, [pc, #92]	; (266d8 <spi_cmd_complete+0x8f0>)
   2667a:	0018      	movs	r0, r3
   2667c:	4b10      	ldr	r3, [pc, #64]	; (266c0 <spi_cmd_complete+0x8d8>)
   2667e:	4798      	blx	r3
   26680:	4b11      	ldr	r3, [pc, #68]	; (266c8 <spi_cmd_complete+0x8e0>)
   26682:	0018      	movs	r0, r3
   26684:	4b0e      	ldr	r3, [pc, #56]	; (266c0 <spi_cmd_complete+0x8d8>)
   26686:	4798      	blx	r3
							result = N_FAIL;
   26688:	2300      	movs	r3, #0
   2668a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   2668c:	e00d      	b.n	266aa <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2668e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26692:	18d3      	adds	r3, r2, r3
   26694:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26698:	683a      	ldr	r2, [r7, #0]
   2669a:	1ad3      	subs	r3, r2, r3
   2669c:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2669e:	683b      	ldr	r3, [r7, #0]
   266a0:	2b00      	cmp	r3, #0
   266a2:	d000      	beq.n	266a6 <spi_cmd_complete+0x8be>
   266a4:	e77e      	b.n	265a4 <spi_cmd_complete+0x7bc>
   266a6:	e000      	b.n	266aa <spi_cmd_complete+0x8c2>
						break;
   266a8:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   266aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   266ac:	0018      	movs	r0, r3
   266ae:	46bd      	mov	sp, r7
   266b0:	b01f      	add	sp, #124	; 0x7c
   266b2:	bd90      	pop	{r4, r7, pc}
   266b4:	00025721 	.word	0x00025721
   266b8:	0003c668 	.word	0x0003c668
   266bc:	0003c054 	.word	0x0003c054
   266c0:	00020349 	.word	0x00020349
   266c4:	0003c2b8 	.word	0x0003c2b8
   266c8:	0003c094 	.word	0x0003c094
   266cc:	0003c24c 	.word	0x0003c24c
   266d0:	20004124 	.word	0x20004124
   266d4:	000002d2 	.word	0x000002d2
   266d8:	0003c280 	.word	0x0003c280

000266dc <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   266dc:	b580      	push	{r7, lr}
   266de:	b086      	sub	sp, #24
   266e0:	af00      	add	r7, sp, #0
   266e2:	6078      	str	r0, [r7, #4]
   266e4:	000a      	movs	r2, r1
   266e6:	1cbb      	adds	r3, r7, #2
   266e8:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   266ea:	2313      	movs	r3, #19
   266ec:	18fb      	adds	r3, r7, r3
   266ee:	2201      	movs	r2, #1
   266f0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   266f2:	230c      	movs	r3, #12
   266f4:	18fb      	adds	r3, r7, r3
   266f6:	2200      	movs	r2, #0
   266f8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   266fa:	2316      	movs	r3, #22
   266fc:	18fb      	adds	r3, r7, r3
   266fe:	2200      	movs	r2, #0
   26700:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   26702:	1cbb      	adds	r3, r7, #2
   26704:	881a      	ldrh	r2, [r3, #0]
   26706:	2380      	movs	r3, #128	; 0x80
   26708:	019b      	lsls	r3, r3, #6
   2670a:	429a      	cmp	r2, r3
   2670c:	d805      	bhi.n	2671a <spi_data_write+0x3e>
			nbytes = sz;
   2670e:	2314      	movs	r3, #20
   26710:	18fb      	adds	r3, r7, r3
   26712:	1cba      	adds	r2, r7, #2
   26714:	8812      	ldrh	r2, [r2, #0]
   26716:	801a      	strh	r2, [r3, #0]
   26718:	e004      	b.n	26724 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   2671a:	2314      	movs	r3, #20
   2671c:	18fb      	adds	r3, r7, r3
   2671e:	2280      	movs	r2, #128	; 0x80
   26720:	0192      	lsls	r2, r2, #6
   26722:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   26724:	2311      	movs	r3, #17
   26726:	18fb      	adds	r3, r7, r3
   26728:	22f0      	movs	r2, #240	; 0xf0
   2672a:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   2672c:	2316      	movs	r3, #22
   2672e:	18fb      	adds	r3, r7, r3
   26730:	2200      	movs	r2, #0
   26732:	5e9b      	ldrsh	r3, [r3, r2]
   26734:	2b00      	cmp	r3, #0
   26736:	d10f      	bne.n	26758 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   26738:	1cbb      	adds	r3, r7, #2
   2673a:	881a      	ldrh	r2, [r3, #0]
   2673c:	2380      	movs	r3, #128	; 0x80
   2673e:	019b      	lsls	r3, r3, #6
   26740:	429a      	cmp	r2, r3
   26742:	d804      	bhi.n	2674e <spi_data_write+0x72>
				order = 0x3;
   26744:	2312      	movs	r3, #18
   26746:	18fb      	adds	r3, r7, r3
   26748:	2203      	movs	r2, #3
   2674a:	701a      	strb	r2, [r3, #0]
   2674c:	e013      	b.n	26776 <spi_data_write+0x9a>
			else
				order = 0x1;
   2674e:	2312      	movs	r3, #18
   26750:	18fb      	adds	r3, r7, r3
   26752:	2201      	movs	r2, #1
   26754:	701a      	strb	r2, [r3, #0]
   26756:	e00e      	b.n	26776 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   26758:	1cbb      	adds	r3, r7, #2
   2675a:	881a      	ldrh	r2, [r3, #0]
   2675c:	2380      	movs	r3, #128	; 0x80
   2675e:	019b      	lsls	r3, r3, #6
   26760:	429a      	cmp	r2, r3
   26762:	d804      	bhi.n	2676e <spi_data_write+0x92>
				order = 0x3;
   26764:	2312      	movs	r3, #18
   26766:	18fb      	adds	r3, r7, r3
   26768:	2203      	movs	r2, #3
   2676a:	701a      	strb	r2, [r3, #0]
   2676c:	e003      	b.n	26776 <spi_data_write+0x9a>
			else
				order = 0x2;
   2676e:	2312      	movs	r3, #18
   26770:	18fb      	adds	r3, r7, r3
   26772:	2202      	movs	r2, #2
   26774:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   26776:	2311      	movs	r3, #17
   26778:	18fb      	adds	r3, r7, r3
   2677a:	781a      	ldrb	r2, [r3, #0]
   2677c:	2312      	movs	r3, #18
   2677e:	18fb      	adds	r3, r7, r3
   26780:	781b      	ldrb	r3, [r3, #0]
   26782:	4313      	orrs	r3, r2
   26784:	b2da      	uxtb	r2, r3
   26786:	2311      	movs	r3, #17
   26788:	18fb      	adds	r3, r7, r3
   2678a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   2678c:	2311      	movs	r3, #17
   2678e:	18fb      	adds	r3, r7, r3
   26790:	2101      	movs	r1, #1
   26792:	0018      	movs	r0, r3
   26794:	4b3c      	ldr	r3, [pc, #240]	; (26888 <spi_data_write+0x1ac>)
   26796:	4798      	blx	r3
   26798:	1e03      	subs	r3, r0, #0
   2679a:	d012      	beq.n	267c2 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   2679c:	4a3b      	ldr	r2, [pc, #236]	; (2688c <spi_data_write+0x1b0>)
   2679e:	493c      	ldr	r1, [pc, #240]	; (26890 <spi_data_write+0x1b4>)
   267a0:	4b3c      	ldr	r3, [pc, #240]	; (26894 <spi_data_write+0x1b8>)
   267a2:	0018      	movs	r0, r3
   267a4:	4b3c      	ldr	r3, [pc, #240]	; (26898 <spi_data_write+0x1bc>)
   267a6:	4798      	blx	r3
   267a8:	4b3c      	ldr	r3, [pc, #240]	; (2689c <spi_data_write+0x1c0>)
   267aa:	0018      	movs	r0, r3
   267ac:	4b3a      	ldr	r3, [pc, #232]	; (26898 <spi_data_write+0x1bc>)
   267ae:	4798      	blx	r3
   267b0:	4b3b      	ldr	r3, [pc, #236]	; (268a0 <spi_data_write+0x1c4>)
   267b2:	0018      	movs	r0, r3
   267b4:	4b38      	ldr	r3, [pc, #224]	; (26898 <spi_data_write+0x1bc>)
   267b6:	4798      	blx	r3
			result = N_FAIL;
   267b8:	2313      	movs	r3, #19
   267ba:	18fb      	adds	r3, r7, r3
   267bc:	2200      	movs	r2, #0
   267be:	701a      	strb	r2, [r3, #0]
			break;
   267c0:	e059      	b.n	26876 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   267c2:	2316      	movs	r3, #22
   267c4:	18fb      	adds	r3, r7, r3
   267c6:	2200      	movs	r2, #0
   267c8:	5e9b      	ldrsh	r3, [r3, r2]
   267ca:	687a      	ldr	r2, [r7, #4]
   267cc:	18d2      	adds	r2, r2, r3
   267ce:	2314      	movs	r3, #20
   267d0:	18fb      	adds	r3, r7, r3
   267d2:	881b      	ldrh	r3, [r3, #0]
   267d4:	0019      	movs	r1, r3
   267d6:	0010      	movs	r0, r2
   267d8:	4b2b      	ldr	r3, [pc, #172]	; (26888 <spi_data_write+0x1ac>)
   267da:	4798      	blx	r3
   267dc:	1e03      	subs	r3, r0, #0
   267de:	d012      	beq.n	26806 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   267e0:	4a30      	ldr	r2, [pc, #192]	; (268a4 <spi_data_write+0x1c8>)
   267e2:	492b      	ldr	r1, [pc, #172]	; (26890 <spi_data_write+0x1b4>)
   267e4:	4b2b      	ldr	r3, [pc, #172]	; (26894 <spi_data_write+0x1b8>)
   267e6:	0018      	movs	r0, r3
   267e8:	4b2b      	ldr	r3, [pc, #172]	; (26898 <spi_data_write+0x1bc>)
   267ea:	4798      	blx	r3
   267ec:	4b2e      	ldr	r3, [pc, #184]	; (268a8 <spi_data_write+0x1cc>)
   267ee:	0018      	movs	r0, r3
   267f0:	4b29      	ldr	r3, [pc, #164]	; (26898 <spi_data_write+0x1bc>)
   267f2:	4798      	blx	r3
   267f4:	4b2a      	ldr	r3, [pc, #168]	; (268a0 <spi_data_write+0x1c4>)
   267f6:	0018      	movs	r0, r3
   267f8:	4b27      	ldr	r3, [pc, #156]	; (26898 <spi_data_write+0x1bc>)
   267fa:	4798      	blx	r3
			result = N_FAIL;
   267fc:	2313      	movs	r3, #19
   267fe:	18fb      	adds	r3, r7, r3
   26800:	2200      	movs	r2, #0
   26802:	701a      	strb	r2, [r3, #0]
			break;
   26804:	e037      	b.n	26876 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   26806:	4b29      	ldr	r3, [pc, #164]	; (268ac <spi_data_write+0x1d0>)
   26808:	781b      	ldrb	r3, [r3, #0]
   2680a:	2b00      	cmp	r3, #0
   2680c:	d11b      	bne.n	26846 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   2680e:	230c      	movs	r3, #12
   26810:	18fb      	adds	r3, r7, r3
   26812:	2102      	movs	r1, #2
   26814:	0018      	movs	r0, r3
   26816:	4b1c      	ldr	r3, [pc, #112]	; (26888 <spi_data_write+0x1ac>)
   26818:	4798      	blx	r3
   2681a:	1e03      	subs	r3, r0, #0
   2681c:	d013      	beq.n	26846 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   2681e:	23d7      	movs	r3, #215	; 0xd7
   26820:	009a      	lsls	r2, r3, #2
   26822:	491b      	ldr	r1, [pc, #108]	; (26890 <spi_data_write+0x1b4>)
   26824:	4b1b      	ldr	r3, [pc, #108]	; (26894 <spi_data_write+0x1b8>)
   26826:	0018      	movs	r0, r3
   26828:	4b1b      	ldr	r3, [pc, #108]	; (26898 <spi_data_write+0x1bc>)
   2682a:	4798      	blx	r3
   2682c:	4b20      	ldr	r3, [pc, #128]	; (268b0 <spi_data_write+0x1d4>)
   2682e:	0018      	movs	r0, r3
   26830:	4b19      	ldr	r3, [pc, #100]	; (26898 <spi_data_write+0x1bc>)
   26832:	4798      	blx	r3
   26834:	4b1a      	ldr	r3, [pc, #104]	; (268a0 <spi_data_write+0x1c4>)
   26836:	0018      	movs	r0, r3
   26838:	4b17      	ldr	r3, [pc, #92]	; (26898 <spi_data_write+0x1bc>)
   2683a:	4798      	blx	r3
				result = N_FAIL;
   2683c:	2313      	movs	r3, #19
   2683e:	18fb      	adds	r3, r7, r3
   26840:	2200      	movs	r2, #0
   26842:	701a      	strb	r2, [r3, #0]
				break;
   26844:	e017      	b.n	26876 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   26846:	2316      	movs	r3, #22
   26848:	18fb      	adds	r3, r7, r3
   2684a:	881a      	ldrh	r2, [r3, #0]
   2684c:	2314      	movs	r3, #20
   2684e:	18fb      	adds	r3, r7, r3
   26850:	881b      	ldrh	r3, [r3, #0]
   26852:	18d3      	adds	r3, r2, r3
   26854:	b29a      	uxth	r2, r3
   26856:	2316      	movs	r3, #22
   26858:	18fb      	adds	r3, r7, r3
   2685a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   2685c:	1cbb      	adds	r3, r7, #2
   2685e:	1cb9      	adds	r1, r7, #2
   26860:	2214      	movs	r2, #20
   26862:	18ba      	adds	r2, r7, r2
   26864:	8809      	ldrh	r1, [r1, #0]
   26866:	8812      	ldrh	r2, [r2, #0]
   26868:	1a8a      	subs	r2, r1, r2
   2686a:	801a      	strh	r2, [r3, #0]
	} while (sz);
   2686c:	1cbb      	adds	r3, r7, #2
   2686e:	881b      	ldrh	r3, [r3, #0]
   26870:	2b00      	cmp	r3, #0
   26872:	d000      	beq.n	26876 <spi_data_write+0x19a>
   26874:	e745      	b.n	26702 <spi_data_write+0x26>


	return result;
   26876:	2313      	movs	r3, #19
   26878:	18fb      	adds	r3, r7, r3
   2687a:	781b      	ldrb	r3, [r3, #0]
   2687c:	b25b      	sxtb	r3, r3
}
   2687e:	0018      	movs	r0, r3
   26880:	46bd      	mov	sp, r7
   26882:	b006      	add	sp, #24
   26884:	bd80      	pop	{r7, pc}
   26886:	46c0      	nop			; (mov r8, r8)
   26888:	00025765 	.word	0x00025765
   2688c:	00000349 	.word	0x00000349
   26890:	0003c67c 	.word	0x0003c67c
   26894:	0003c054 	.word	0x0003c054
   26898:	00020349 	.word	0x00020349
   2689c:	0003c31c 	.word	0x0003c31c
   268a0:	0003c094 	.word	0x0003c094
   268a4:	00000352 	.word	0x00000352
   268a8:	0003c354 	.word	0x0003c354
   268ac:	20004124 	.word	0x20004124
   268b0:	0003c388 	.word	0x0003c388

000268b4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   268b4:	b590      	push	{r4, r7, lr}
   268b6:	b087      	sub	sp, #28
   268b8:	af02      	add	r7, sp, #8
   268ba:	6078      	str	r0, [r7, #4]
   268bc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   268be:	230f      	movs	r3, #15
   268c0:	18fb      	adds	r3, r7, r3
   268c2:	220a      	movs	r2, #10
   268c4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   268c6:	230c      	movs	r3, #12
   268c8:	18fb      	adds	r3, r7, r3
   268ca:	2201      	movs	r2, #1
   268cc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   268ce:	230e      	movs	r3, #14
   268d0:	18fb      	adds	r3, r7, r3
   268d2:	22c9      	movs	r2, #201	; 0xc9
   268d4:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   268d6:	230d      	movs	r3, #13
   268d8:	18fb      	adds	r3, r7, r3
   268da:	2200      	movs	r2, #0
   268dc:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   268de:	687b      	ldr	r3, [r7, #4]
   268e0:	2b30      	cmp	r3, #48	; 0x30
   268e2:	d808      	bhi.n	268f6 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   268e4:	230e      	movs	r3, #14
   268e6:	18fb      	adds	r3, r7, r3
   268e8:	22c3      	movs	r2, #195	; 0xc3
   268ea:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   268ec:	230d      	movs	r3, #13
   268ee:	18fb      	adds	r3, r7, r3
   268f0:	2201      	movs	r2, #1
   268f2:	701a      	strb	r2, [r3, #0]
   268f4:	e007      	b.n	26906 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   268f6:	230e      	movs	r3, #14
   268f8:	18fb      	adds	r3, r7, r3
   268fa:	22c9      	movs	r2, #201	; 0xc9
   268fc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   268fe:	230d      	movs	r3, #13
   26900:	18fb      	adds	r3, r7, r3
   26902:	2200      	movs	r2, #0
   26904:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   26906:	003a      	movs	r2, r7
   26908:	6879      	ldr	r1, [r7, #4]
   2690a:	230e      	movs	r3, #14
   2690c:	18fb      	adds	r3, r7, r3
   2690e:	7818      	ldrb	r0, [r3, #0]
   26910:	230d      	movs	r3, #13
   26912:	18fb      	adds	r3, r7, r3
   26914:	781b      	ldrb	r3, [r3, #0]
   26916:	9300      	str	r3, [sp, #0]
   26918:	2304      	movs	r3, #4
   2691a:	4c2e      	ldr	r4, [pc, #184]	; (269d4 <spi_write_reg+0x120>)
   2691c:	47a0      	blx	r4
   2691e:	0002      	movs	r2, r0
   26920:	230c      	movs	r3, #12
   26922:	18fb      	adds	r3, r7, r3
   26924:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26926:	230c      	movs	r3, #12
   26928:	18fb      	adds	r3, r7, r3
   2692a:	781b      	ldrb	r3, [r3, #0]
   2692c:	b25b      	sxtb	r3, r3
   2692e:	2b01      	cmp	r3, #1
   26930:	d010      	beq.n	26954 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   26932:	4a29      	ldr	r2, [pc, #164]	; (269d8 <spi_write_reg+0x124>)
   26934:	4929      	ldr	r1, [pc, #164]	; (269dc <spi_write_reg+0x128>)
   26936:	4b2a      	ldr	r3, [pc, #168]	; (269e0 <spi_write_reg+0x12c>)
   26938:	0018      	movs	r0, r3
   2693a:	4b2a      	ldr	r3, [pc, #168]	; (269e4 <spi_write_reg+0x130>)
   2693c:	4798      	blx	r3
   2693e:	687a      	ldr	r2, [r7, #4]
   26940:	4b29      	ldr	r3, [pc, #164]	; (269e8 <spi_write_reg+0x134>)
   26942:	0011      	movs	r1, r2
   26944:	0018      	movs	r0, r3
   26946:	4b27      	ldr	r3, [pc, #156]	; (269e4 <spi_write_reg+0x130>)
   26948:	4798      	blx	r3
   2694a:	4b28      	ldr	r3, [pc, #160]	; (269ec <spi_write_reg+0x138>)
   2694c:	0018      	movs	r0, r3
   2694e:	4b25      	ldr	r3, [pc, #148]	; (269e4 <spi_write_reg+0x130>)
   26950:	4798      	blx	r3
		goto _FAIL_;
   26952:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   26954:	230c      	movs	r3, #12
   26956:	18fb      	adds	r3, r7, r3
   26958:	781b      	ldrb	r3, [r3, #0]
   2695a:	b25b      	sxtb	r3, r3
   2695c:	2b01      	cmp	r3, #1
   2695e:	d030      	beq.n	269c2 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   26960:	2001      	movs	r0, #1
   26962:	4b23      	ldr	r3, [pc, #140]	; (269f0 <spi_write_reg+0x13c>)
   26964:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26966:	2300      	movs	r3, #0
   26968:	9300      	str	r3, [sp, #0]
   2696a:	2300      	movs	r3, #0
   2696c:	2200      	movs	r2, #0
   2696e:	2100      	movs	r1, #0
   26970:	20cf      	movs	r0, #207	; 0xcf
   26972:	4c20      	ldr	r4, [pc, #128]	; (269f4 <spi_write_reg+0x140>)
   26974:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26976:	20cf      	movs	r0, #207	; 0xcf
   26978:	4b1f      	ldr	r3, [pc, #124]	; (269f8 <spi_write_reg+0x144>)
   2697a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   2697c:	23ea      	movs	r3, #234	; 0xea
   2697e:	009a      	lsls	r2, r3, #2
   26980:	4916      	ldr	r1, [pc, #88]	; (269dc <spi_write_reg+0x128>)
   26982:	4b17      	ldr	r3, [pc, #92]	; (269e0 <spi_write_reg+0x12c>)
   26984:	0018      	movs	r0, r3
   26986:	4b17      	ldr	r3, [pc, #92]	; (269e4 <spi_write_reg+0x130>)
   26988:	4798      	blx	r3
   2698a:	230f      	movs	r3, #15
   2698c:	18fb      	adds	r3, r7, r3
   2698e:	7819      	ldrb	r1, [r3, #0]
   26990:	683b      	ldr	r3, [r7, #0]
   26992:	687a      	ldr	r2, [r7, #4]
   26994:	4819      	ldr	r0, [pc, #100]	; (269fc <spi_write_reg+0x148>)
   26996:	4c13      	ldr	r4, [pc, #76]	; (269e4 <spi_write_reg+0x130>)
   26998:	47a0      	blx	r4
   2699a:	4b14      	ldr	r3, [pc, #80]	; (269ec <spi_write_reg+0x138>)
   2699c:	0018      	movs	r0, r3
   2699e:	4b11      	ldr	r3, [pc, #68]	; (269e4 <spi_write_reg+0x130>)
   269a0:	4798      	blx	r3
		nm_bsp_sleep(1);
   269a2:	2001      	movs	r0, #1
   269a4:	4b12      	ldr	r3, [pc, #72]	; (269f0 <spi_write_reg+0x13c>)
   269a6:	4798      	blx	r3
		retry--;
   269a8:	230f      	movs	r3, #15
   269aa:	18fb      	adds	r3, r7, r3
   269ac:	781a      	ldrb	r2, [r3, #0]
   269ae:	230f      	movs	r3, #15
   269b0:	18fb      	adds	r3, r7, r3
   269b2:	3a01      	subs	r2, #1
   269b4:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   269b6:	230f      	movs	r3, #15
   269b8:	18fb      	adds	r3, r7, r3
   269ba:	781b      	ldrb	r3, [r3, #0]
   269bc:	2b00      	cmp	r3, #0
   269be:	d000      	beq.n	269c2 <spi_write_reg+0x10e>
   269c0:	e78d      	b.n	268de <spi_write_reg+0x2a>
	}

	return result;
   269c2:	230c      	movs	r3, #12
   269c4:	18fb      	adds	r3, r7, r3
   269c6:	781b      	ldrb	r3, [r3, #0]
   269c8:	b25b      	sxtb	r3, r3
}
   269ca:	0018      	movs	r0, r3
   269cc:	46bd      	mov	sp, r7
   269ce:	b005      	add	sp, #20
   269d0:	bd90      	pop	{r4, r7, pc}
   269d2:	46c0      	nop			; (mov r8, r8)
   269d4:	00025de9 	.word	0x00025de9
   269d8:	0000039d 	.word	0x0000039d
   269dc:	0003c68c 	.word	0x0003c68c
   269e0:	0003c054 	.word	0x0003c054
   269e4:	00020349 	.word	0x00020349
   269e8:	0003c3c0 	.word	0x0003c3c0
   269ec:	0003c094 	.word	0x0003c094
   269f0:	000227b9 	.word	0x000227b9
   269f4:	0002586d 	.word	0x0002586d
   269f8:	00025cad 	.word	0x00025cad
   269fc:	0003c3ec 	.word	0x0003c3ec

00026a00 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   26a00:	b590      	push	{r4, r7, lr}
   26a02:	b089      	sub	sp, #36	; 0x24
   26a04:	af02      	add	r7, sp, #8
   26a06:	60f8      	str	r0, [r7, #12]
   26a08:	60b9      	str	r1, [r7, #8]
   26a0a:	1dbb      	adds	r3, r7, #6
   26a0c:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   26a0e:	2316      	movs	r3, #22
   26a10:	18fb      	adds	r3, r7, r3
   26a12:	220a      	movs	r2, #10
   26a14:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   26a16:	2315      	movs	r3, #21
   26a18:	18fb      	adds	r3, r7, r3
   26a1a:	22c7      	movs	r2, #199	; 0xc7
   26a1c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   26a1e:	1dbb      	adds	r3, r7, #6
   26a20:	881a      	ldrh	r2, [r3, #0]
   26a22:	68f9      	ldr	r1, [r7, #12]
   26a24:	2315      	movs	r3, #21
   26a26:	18fb      	adds	r3, r7, r3
   26a28:	7818      	ldrb	r0, [r3, #0]
   26a2a:	2300      	movs	r3, #0
   26a2c:	9300      	str	r3, [sp, #0]
   26a2e:	0013      	movs	r3, r2
   26a30:	2200      	movs	r2, #0
   26a32:	4c4d      	ldr	r4, [pc, #308]	; (26b68 <nm_spi_write+0x168>)
   26a34:	47a0      	blx	r4
   26a36:	0002      	movs	r2, r0
   26a38:	2317      	movs	r3, #23
   26a3a:	18fb      	adds	r3, r7, r3
   26a3c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26a3e:	2317      	movs	r3, #23
   26a40:	18fb      	adds	r3, r7, r3
   26a42:	781b      	ldrb	r3, [r3, #0]
   26a44:	b25b      	sxtb	r3, r3
   26a46:	2b01      	cmp	r3, #1
   26a48:	d010      	beq.n	26a6c <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   26a4a:	4a48      	ldr	r2, [pc, #288]	; (26b6c <nm_spi_write+0x16c>)
   26a4c:	4948      	ldr	r1, [pc, #288]	; (26b70 <nm_spi_write+0x170>)
   26a4e:	4b49      	ldr	r3, [pc, #292]	; (26b74 <nm_spi_write+0x174>)
   26a50:	0018      	movs	r0, r3
   26a52:	4b49      	ldr	r3, [pc, #292]	; (26b78 <nm_spi_write+0x178>)
   26a54:	4798      	blx	r3
   26a56:	68fa      	ldr	r2, [r7, #12]
   26a58:	4b48      	ldr	r3, [pc, #288]	; (26b7c <nm_spi_write+0x17c>)
   26a5a:	0011      	movs	r1, r2
   26a5c:	0018      	movs	r0, r3
   26a5e:	4b46      	ldr	r3, [pc, #280]	; (26b78 <nm_spi_write+0x178>)
   26a60:	4798      	blx	r3
   26a62:	4b47      	ldr	r3, [pc, #284]	; (26b80 <nm_spi_write+0x180>)
   26a64:	0018      	movs	r0, r3
   26a66:	4b44      	ldr	r3, [pc, #272]	; (26b78 <nm_spi_write+0x178>)
   26a68:	4798      	blx	r3
		goto _FAIL_;
   26a6a:	e03e      	b.n	26aea <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   26a6c:	2317      	movs	r3, #23
   26a6e:	18fc      	adds	r4, r7, r3
   26a70:	1dbb      	adds	r3, r7, #6
   26a72:	881a      	ldrh	r2, [r3, #0]
   26a74:	68bb      	ldr	r3, [r7, #8]
   26a76:	0011      	movs	r1, r2
   26a78:	0018      	movs	r0, r3
   26a7a:	4b42      	ldr	r3, [pc, #264]	; (26b84 <nm_spi_write+0x184>)
   26a7c:	4798      	blx	r3
   26a7e:	0003      	movs	r3, r0
   26a80:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   26a82:	2317      	movs	r3, #23
   26a84:	18fb      	adds	r3, r7, r3
   26a86:	781b      	ldrb	r3, [r3, #0]
   26a88:	b25b      	sxtb	r3, r3
   26a8a:	2b01      	cmp	r3, #1
   26a8c:	d00e      	beq.n	26aac <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   26a8e:	4a3e      	ldr	r2, [pc, #248]	; (26b88 <nm_spi_write+0x188>)
   26a90:	4937      	ldr	r1, [pc, #220]	; (26b70 <nm_spi_write+0x170>)
   26a92:	4b38      	ldr	r3, [pc, #224]	; (26b74 <nm_spi_write+0x174>)
   26a94:	0018      	movs	r0, r3
   26a96:	4b38      	ldr	r3, [pc, #224]	; (26b78 <nm_spi_write+0x178>)
   26a98:	4798      	blx	r3
   26a9a:	4b3c      	ldr	r3, [pc, #240]	; (26b8c <nm_spi_write+0x18c>)
   26a9c:	0018      	movs	r0, r3
   26a9e:	4b36      	ldr	r3, [pc, #216]	; (26b78 <nm_spi_write+0x178>)
   26aa0:	4798      	blx	r3
   26aa2:	4b37      	ldr	r3, [pc, #220]	; (26b80 <nm_spi_write+0x180>)
   26aa4:	0018      	movs	r0, r3
   26aa6:	4b34      	ldr	r3, [pc, #208]	; (26b78 <nm_spi_write+0x178>)
   26aa8:	4798      	blx	r3
		goto _FAIL_;
   26aaa:	e01e      	b.n	26aea <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   26aac:	2317      	movs	r3, #23
   26aae:	18fc      	adds	r4, r7, r3
   26ab0:	2315      	movs	r3, #21
   26ab2:	18fb      	adds	r3, r7, r3
   26ab4:	781b      	ldrb	r3, [r3, #0]
   26ab6:	0018      	movs	r0, r3
   26ab8:	4b35      	ldr	r3, [pc, #212]	; (26b90 <nm_spi_write+0x190>)
   26aba:	4798      	blx	r3
   26abc:	0003      	movs	r3, r0
   26abe:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   26ac0:	2317      	movs	r3, #23
   26ac2:	18fb      	adds	r3, r7, r3
   26ac4:	781b      	ldrb	r3, [r3, #0]
   26ac6:	b25b      	sxtb	r3, r3
   26ac8:	2b01      	cmp	r3, #1
   26aca:	d00e      	beq.n	26aea <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   26acc:	4a31      	ldr	r2, [pc, #196]	; (26b94 <nm_spi_write+0x194>)
   26ace:	4928      	ldr	r1, [pc, #160]	; (26b70 <nm_spi_write+0x170>)
   26ad0:	4b28      	ldr	r3, [pc, #160]	; (26b74 <nm_spi_write+0x174>)
   26ad2:	0018      	movs	r0, r3
   26ad4:	4b28      	ldr	r3, [pc, #160]	; (26b78 <nm_spi_write+0x178>)
   26ad6:	4798      	blx	r3
   26ad8:	4b2c      	ldr	r3, [pc, #176]	; (26b8c <nm_spi_write+0x18c>)
   26ada:	0018      	movs	r0, r3
   26adc:	4b26      	ldr	r3, [pc, #152]	; (26b78 <nm_spi_write+0x178>)
   26ade:	4798      	blx	r3
   26ae0:	4b27      	ldr	r3, [pc, #156]	; (26b80 <nm_spi_write+0x180>)
   26ae2:	0018      	movs	r0, r3
   26ae4:	4b24      	ldr	r3, [pc, #144]	; (26b78 <nm_spi_write+0x178>)
   26ae6:	4798      	blx	r3
		goto _FAIL_;
   26ae8:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   26aea:	2317      	movs	r3, #23
   26aec:	18fb      	adds	r3, r7, r3
   26aee:	781b      	ldrb	r3, [r3, #0]
   26af0:	b25b      	sxtb	r3, r3
   26af2:	2b01      	cmp	r3, #1
   26af4:	d030      	beq.n	26b58 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   26af6:	2001      	movs	r0, #1
   26af8:	4b27      	ldr	r3, [pc, #156]	; (26b98 <nm_spi_write+0x198>)
   26afa:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26afc:	2300      	movs	r3, #0
   26afe:	9300      	str	r3, [sp, #0]
   26b00:	2300      	movs	r3, #0
   26b02:	2200      	movs	r2, #0
   26b04:	2100      	movs	r1, #0
   26b06:	20cf      	movs	r0, #207	; 0xcf
   26b08:	4c24      	ldr	r4, [pc, #144]	; (26b9c <nm_spi_write+0x19c>)
   26b0a:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26b0c:	20cf      	movs	r0, #207	; 0xcf
   26b0e:	4b24      	ldr	r3, [pc, #144]	; (26ba0 <nm_spi_write+0x1a0>)
   26b10:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   26b12:	4a24      	ldr	r2, [pc, #144]	; (26ba4 <nm_spi_write+0x1a4>)
   26b14:	4916      	ldr	r1, [pc, #88]	; (26b70 <nm_spi_write+0x170>)
   26b16:	4b17      	ldr	r3, [pc, #92]	; (26b74 <nm_spi_write+0x174>)
   26b18:	0018      	movs	r0, r3
   26b1a:	4b17      	ldr	r3, [pc, #92]	; (26b78 <nm_spi_write+0x178>)
   26b1c:	4798      	blx	r3
   26b1e:	2316      	movs	r3, #22
   26b20:	18fb      	adds	r3, r7, r3
   26b22:	7819      	ldrb	r1, [r3, #0]
   26b24:	1dbb      	adds	r3, r7, #6
   26b26:	881b      	ldrh	r3, [r3, #0]
   26b28:	68fa      	ldr	r2, [r7, #12]
   26b2a:	481f      	ldr	r0, [pc, #124]	; (26ba8 <nm_spi_write+0x1a8>)
   26b2c:	4c12      	ldr	r4, [pc, #72]	; (26b78 <nm_spi_write+0x178>)
   26b2e:	47a0      	blx	r4
   26b30:	4b13      	ldr	r3, [pc, #76]	; (26b80 <nm_spi_write+0x180>)
   26b32:	0018      	movs	r0, r3
   26b34:	4b10      	ldr	r3, [pc, #64]	; (26b78 <nm_spi_write+0x178>)
   26b36:	4798      	blx	r3
		nm_bsp_sleep(1);
   26b38:	2001      	movs	r0, #1
   26b3a:	4b17      	ldr	r3, [pc, #92]	; (26b98 <nm_spi_write+0x198>)
   26b3c:	4798      	blx	r3
		retry--;
   26b3e:	2316      	movs	r3, #22
   26b40:	18fb      	adds	r3, r7, r3
   26b42:	781a      	ldrb	r2, [r3, #0]
   26b44:	2316      	movs	r3, #22
   26b46:	18fb      	adds	r3, r7, r3
   26b48:	3a01      	subs	r2, #1
   26b4a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26b4c:	2316      	movs	r3, #22
   26b4e:	18fb      	adds	r3, r7, r3
   26b50:	781b      	ldrb	r3, [r3, #0]
   26b52:	2b00      	cmp	r3, #0
   26b54:	d000      	beq.n	26b58 <nm_spi_write+0x158>
   26b56:	e762      	b.n	26a1e <nm_spi_write+0x1e>
	}


	return result;
   26b58:	2317      	movs	r3, #23
   26b5a:	18fb      	adds	r3, r7, r3
   26b5c:	781b      	ldrb	r3, [r3, #0]
   26b5e:	b25b      	sxtb	r3, r3
}
   26b60:	0018      	movs	r0, r3
   26b62:	46bd      	mov	sp, r7
   26b64:	b007      	add	sp, #28
   26b66:	bd90      	pop	{r4, r7, pc}
   26b68:	00025de9 	.word	0x00025de9
   26b6c:	000003cf 	.word	0x000003cf
   26b70:	0003c69c 	.word	0x0003c69c
   26b74:	0003c054 	.word	0x0003c054
   26b78:	00020349 	.word	0x00020349
   26b7c:	0003c408 	.word	0x0003c408
   26b80:	0003c094 	.word	0x0003c094
   26b84:	000266dd 	.word	0x000266dd
   26b88:	000003d9 	.word	0x000003d9
   26b8c:	0003c438 	.word	0x0003c438
   26b90:	00025bad 	.word	0x00025bad
   26b94:	000003e1 	.word	0x000003e1
   26b98:	000227b9 	.word	0x000227b9
   26b9c:	0002586d 	.word	0x0002586d
   26ba0:	00025cad 	.word	0x00025cad
   26ba4:	000003eb 	.word	0x000003eb
   26ba8:	0003c460 	.word	0x0003c460

00026bac <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   26bac:	b590      	push	{r4, r7, lr}
   26bae:	b087      	sub	sp, #28
   26bb0:	af02      	add	r7, sp, #8
   26bb2:	6078      	str	r0, [r7, #4]
   26bb4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   26bb6:	230f      	movs	r3, #15
   26bb8:	18fb      	adds	r3, r7, r3
   26bba:	220a      	movs	r2, #10
   26bbc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   26bbe:	230c      	movs	r3, #12
   26bc0:	18fb      	adds	r3, r7, r3
   26bc2:	2201      	movs	r2, #1
   26bc4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   26bc6:	230e      	movs	r3, #14
   26bc8:	18fb      	adds	r3, r7, r3
   26bca:	22ca      	movs	r2, #202	; 0xca
   26bcc:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   26bce:	230d      	movs	r3, #13
   26bd0:	18fb      	adds	r3, r7, r3
   26bd2:	2200      	movs	r2, #0
   26bd4:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   26bd6:	687b      	ldr	r3, [r7, #4]
   26bd8:	2bff      	cmp	r3, #255	; 0xff
   26bda:	d808      	bhi.n	26bee <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   26bdc:	230e      	movs	r3, #14
   26bde:	18fb      	adds	r3, r7, r3
   26be0:	22c4      	movs	r2, #196	; 0xc4
   26be2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   26be4:	230d      	movs	r3, #13
   26be6:	18fb      	adds	r3, r7, r3
   26be8:	2201      	movs	r2, #1
   26bea:	701a      	strb	r2, [r3, #0]
   26bec:	e007      	b.n	26bfe <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   26bee:	230e      	movs	r3, #14
   26bf0:	18fb      	adds	r3, r7, r3
   26bf2:	22ca      	movs	r2, #202	; 0xca
   26bf4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   26bf6:	230d      	movs	r3, #13
   26bf8:	18fb      	adds	r3, r7, r3
   26bfa:	2200      	movs	r2, #0
   26bfc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   26bfe:	2308      	movs	r3, #8
   26c00:	18fa      	adds	r2, r7, r3
   26c02:	6879      	ldr	r1, [r7, #4]
   26c04:	230e      	movs	r3, #14
   26c06:	18fb      	adds	r3, r7, r3
   26c08:	7818      	ldrb	r0, [r3, #0]
   26c0a:	230d      	movs	r3, #13
   26c0c:	18fb      	adds	r3, r7, r3
   26c0e:	781b      	ldrb	r3, [r3, #0]
   26c10:	9300      	str	r3, [sp, #0]
   26c12:	2304      	movs	r3, #4
   26c14:	4c37      	ldr	r4, [pc, #220]	; (26cf4 <spi_read_reg+0x148>)
   26c16:	47a0      	blx	r4
   26c18:	0002      	movs	r2, r0
   26c1a:	230c      	movs	r3, #12
   26c1c:	18fb      	adds	r3, r7, r3
   26c1e:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26c20:	230c      	movs	r3, #12
   26c22:	18fb      	adds	r3, r7, r3
   26c24:	781b      	ldrb	r3, [r3, #0]
   26c26:	b25b      	sxtb	r3, r3
   26c28:	2b01      	cmp	r3, #1
   26c2a:	d010      	beq.n	26c4e <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   26c2c:	4a32      	ldr	r2, [pc, #200]	; (26cf8 <spi_read_reg+0x14c>)
   26c2e:	4933      	ldr	r1, [pc, #204]	; (26cfc <spi_read_reg+0x150>)
   26c30:	4b33      	ldr	r3, [pc, #204]	; (26d00 <spi_read_reg+0x154>)
   26c32:	0018      	movs	r0, r3
   26c34:	4b33      	ldr	r3, [pc, #204]	; (26d04 <spi_read_reg+0x158>)
   26c36:	4798      	blx	r3
   26c38:	687a      	ldr	r2, [r7, #4]
   26c3a:	4b33      	ldr	r3, [pc, #204]	; (26d08 <spi_read_reg+0x15c>)
   26c3c:	0011      	movs	r1, r2
   26c3e:	0018      	movs	r0, r3
   26c40:	4b30      	ldr	r3, [pc, #192]	; (26d04 <spi_read_reg+0x158>)
   26c42:	4798      	blx	r3
   26c44:	4b31      	ldr	r3, [pc, #196]	; (26d0c <spi_read_reg+0x160>)
   26c46:	0018      	movs	r0, r3
   26c48:	4b2e      	ldr	r3, [pc, #184]	; (26d04 <spi_read_reg+0x158>)
   26c4a:	4798      	blx	r3
		goto _FAIL_;
   26c4c:	e014      	b.n	26c78 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   26c4e:	2308      	movs	r3, #8
   26c50:	18fb      	adds	r3, r7, r3
   26c52:	781b      	ldrb	r3, [r3, #0]
   26c54:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   26c56:	2308      	movs	r3, #8
   26c58:	18fb      	adds	r3, r7, r3
   26c5a:	785b      	ldrb	r3, [r3, #1]
   26c5c:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   26c5e:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   26c60:	2308      	movs	r3, #8
   26c62:	18fb      	adds	r3, r7, r3
   26c64:	789b      	ldrb	r3, [r3, #2]
   26c66:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   26c68:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   26c6a:	2308      	movs	r3, #8
   26c6c:	18fb      	adds	r3, r7, r3
   26c6e:	78db      	ldrb	r3, [r3, #3]
   26c70:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   26c72:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   26c74:	683b      	ldr	r3, [r7, #0]
   26c76:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   26c78:	230c      	movs	r3, #12
   26c7a:	18fb      	adds	r3, r7, r3
   26c7c:	781b      	ldrb	r3, [r3, #0]
   26c7e:	b25b      	sxtb	r3, r3
   26c80:	2b01      	cmp	r3, #1
   26c82:	d02f      	beq.n	26ce4 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   26c84:	2001      	movs	r0, #1
   26c86:	4b22      	ldr	r3, [pc, #136]	; (26d10 <spi_read_reg+0x164>)
   26c88:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26c8a:	2300      	movs	r3, #0
   26c8c:	9300      	str	r3, [sp, #0]
   26c8e:	2300      	movs	r3, #0
   26c90:	2200      	movs	r2, #0
   26c92:	2100      	movs	r1, #0
   26c94:	20cf      	movs	r0, #207	; 0xcf
   26c96:	4c1f      	ldr	r4, [pc, #124]	; (26d14 <spi_read_reg+0x168>)
   26c98:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26c9a:	20cf      	movs	r0, #207	; 0xcf
   26c9c:	4b1e      	ldr	r3, [pc, #120]	; (26d18 <spi_read_reg+0x16c>)
   26c9e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   26ca0:	4a1e      	ldr	r2, [pc, #120]	; (26d1c <spi_read_reg+0x170>)
   26ca2:	4916      	ldr	r1, [pc, #88]	; (26cfc <spi_read_reg+0x150>)
   26ca4:	4b16      	ldr	r3, [pc, #88]	; (26d00 <spi_read_reg+0x154>)
   26ca6:	0018      	movs	r0, r3
   26ca8:	4b16      	ldr	r3, [pc, #88]	; (26d04 <spi_read_reg+0x158>)
   26caa:	4798      	blx	r3
   26cac:	230f      	movs	r3, #15
   26cae:	18fb      	adds	r3, r7, r3
   26cb0:	7819      	ldrb	r1, [r3, #0]
   26cb2:	687a      	ldr	r2, [r7, #4]
   26cb4:	4b1a      	ldr	r3, [pc, #104]	; (26d20 <spi_read_reg+0x174>)
   26cb6:	0018      	movs	r0, r3
   26cb8:	4b12      	ldr	r3, [pc, #72]	; (26d04 <spi_read_reg+0x158>)
   26cba:	4798      	blx	r3
   26cbc:	4b13      	ldr	r3, [pc, #76]	; (26d0c <spi_read_reg+0x160>)
   26cbe:	0018      	movs	r0, r3
   26cc0:	4b10      	ldr	r3, [pc, #64]	; (26d04 <spi_read_reg+0x158>)
   26cc2:	4798      	blx	r3
		nm_bsp_sleep(1);
   26cc4:	2001      	movs	r0, #1
   26cc6:	4b12      	ldr	r3, [pc, #72]	; (26d10 <spi_read_reg+0x164>)
   26cc8:	4798      	blx	r3
		retry--;
   26cca:	230f      	movs	r3, #15
   26ccc:	18fb      	adds	r3, r7, r3
   26cce:	781a      	ldrb	r2, [r3, #0]
   26cd0:	230f      	movs	r3, #15
   26cd2:	18fb      	adds	r3, r7, r3
   26cd4:	3a01      	subs	r2, #1
   26cd6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26cd8:	230f      	movs	r3, #15
   26cda:	18fb      	adds	r3, r7, r3
   26cdc:	781b      	ldrb	r3, [r3, #0]
   26cde:	2b00      	cmp	r3, #0
   26ce0:	d000      	beq.n	26ce4 <spi_read_reg+0x138>
   26ce2:	e778      	b.n	26bd6 <spi_read_reg+0x2a>
	}
		
	return result;
   26ce4:	230c      	movs	r3, #12
   26ce6:	18fb      	adds	r3, r7, r3
   26ce8:	781b      	ldrb	r3, [r3, #0]
   26cea:	b25b      	sxtb	r3, r3
}
   26cec:	0018      	movs	r0, r3
   26cee:	46bd      	mov	sp, r7
   26cf0:	b005      	add	sp, #20
   26cf2:	bd90      	pop	{r4, r7, pc}
   26cf4:	00025de9 	.word	0x00025de9
   26cf8:	00000423 	.word	0x00000423
   26cfc:	0003c6ac 	.word	0x0003c6ac
   26d00:	0003c054 	.word	0x0003c054
   26d04:	00020349 	.word	0x00020349
   26d08:	0003c47c 	.word	0x0003c47c
   26d0c:	0003c094 	.word	0x0003c094
   26d10:	000227b9 	.word	0x000227b9
   26d14:	0002586d 	.word	0x0002586d
   26d18:	00025cad 	.word	0x00025cad
   26d1c:	00000435 	.word	0x00000435
   26d20:	0003c4a8 	.word	0x0003c4a8

00026d24 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   26d24:	b590      	push	{r4, r7, lr}
   26d26:	b089      	sub	sp, #36	; 0x24
   26d28:	af02      	add	r7, sp, #8
   26d2a:	60f8      	str	r0, [r7, #12]
   26d2c:	60b9      	str	r1, [r7, #8]
   26d2e:	1dbb      	adds	r3, r7, #6
   26d30:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   26d32:	2316      	movs	r3, #22
   26d34:	18fb      	adds	r3, r7, r3
   26d36:	22c8      	movs	r2, #200	; 0xc8
   26d38:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   26d3a:	2317      	movs	r3, #23
   26d3c:	18fb      	adds	r3, r7, r3
   26d3e:	220a      	movs	r2, #10
   26d40:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   26d42:	1dbb      	adds	r3, r7, #6
   26d44:	881c      	ldrh	r4, [r3, #0]
   26d46:	68ba      	ldr	r2, [r7, #8]
   26d48:	68f9      	ldr	r1, [r7, #12]
   26d4a:	2316      	movs	r3, #22
   26d4c:	18fb      	adds	r3, r7, r3
   26d4e:	7818      	ldrb	r0, [r3, #0]
   26d50:	2300      	movs	r3, #0
   26d52:	9300      	str	r3, [sp, #0]
   26d54:	0023      	movs	r3, r4
   26d56:	4c2e      	ldr	r4, [pc, #184]	; (26e10 <nm_spi_read+0xec>)
   26d58:	47a0      	blx	r4
   26d5a:	0002      	movs	r2, r0
   26d5c:	2315      	movs	r3, #21
   26d5e:	18fb      	adds	r3, r7, r3
   26d60:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26d62:	2315      	movs	r3, #21
   26d64:	18fb      	adds	r3, r7, r3
   26d66:	781b      	ldrb	r3, [r3, #0]
   26d68:	b25b      	sxtb	r3, r3
   26d6a:	2b01      	cmp	r3, #1
   26d6c:	d010      	beq.n	26d90 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   26d6e:	4a29      	ldr	r2, [pc, #164]	; (26e14 <nm_spi_read+0xf0>)
   26d70:	4929      	ldr	r1, [pc, #164]	; (26e18 <nm_spi_read+0xf4>)
   26d72:	4b2a      	ldr	r3, [pc, #168]	; (26e1c <nm_spi_read+0xf8>)
   26d74:	0018      	movs	r0, r3
   26d76:	4b2a      	ldr	r3, [pc, #168]	; (26e20 <nm_spi_read+0xfc>)
   26d78:	4798      	blx	r3
   26d7a:	68fa      	ldr	r2, [r7, #12]
   26d7c:	4b29      	ldr	r3, [pc, #164]	; (26e24 <nm_spi_read+0x100>)
   26d7e:	0011      	movs	r1, r2
   26d80:	0018      	movs	r0, r3
   26d82:	4b27      	ldr	r3, [pc, #156]	; (26e20 <nm_spi_read+0xfc>)
   26d84:	4798      	blx	r3
   26d86:	4b28      	ldr	r3, [pc, #160]	; (26e28 <nm_spi_read+0x104>)
   26d88:	0018      	movs	r0, r3
   26d8a:	4b25      	ldr	r3, [pc, #148]	; (26e20 <nm_spi_read+0xfc>)
   26d8c:	4798      	blx	r3
		goto _FAIL_;
   26d8e:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   26d90:	2315      	movs	r3, #21
   26d92:	18fb      	adds	r3, r7, r3
   26d94:	781b      	ldrb	r3, [r3, #0]
   26d96:	b25b      	sxtb	r3, r3
   26d98:	2b01      	cmp	r3, #1
   26d9a:	d030      	beq.n	26dfe <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   26d9c:	2001      	movs	r0, #1
   26d9e:	4b23      	ldr	r3, [pc, #140]	; (26e2c <nm_spi_read+0x108>)
   26da0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26da2:	2300      	movs	r3, #0
   26da4:	9300      	str	r3, [sp, #0]
   26da6:	2300      	movs	r3, #0
   26da8:	2200      	movs	r2, #0
   26daa:	2100      	movs	r1, #0
   26dac:	20cf      	movs	r0, #207	; 0xcf
   26dae:	4c20      	ldr	r4, [pc, #128]	; (26e30 <nm_spi_read+0x10c>)
   26db0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26db2:	20cf      	movs	r0, #207	; 0xcf
   26db4:	4b1f      	ldr	r3, [pc, #124]	; (26e34 <nm_spi_read+0x110>)
   26db6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   26db8:	4a1f      	ldr	r2, [pc, #124]	; (26e38 <nm_spi_read+0x114>)
   26dba:	4917      	ldr	r1, [pc, #92]	; (26e18 <nm_spi_read+0xf4>)
   26dbc:	4b17      	ldr	r3, [pc, #92]	; (26e1c <nm_spi_read+0xf8>)
   26dbe:	0018      	movs	r0, r3
   26dc0:	4b17      	ldr	r3, [pc, #92]	; (26e20 <nm_spi_read+0xfc>)
   26dc2:	4798      	blx	r3
   26dc4:	2317      	movs	r3, #23
   26dc6:	18fb      	adds	r3, r7, r3
   26dc8:	7819      	ldrb	r1, [r3, #0]
   26dca:	1dbb      	adds	r3, r7, #6
   26dcc:	881b      	ldrh	r3, [r3, #0]
   26dce:	68fa      	ldr	r2, [r7, #12]
   26dd0:	481a      	ldr	r0, [pc, #104]	; (26e3c <nm_spi_read+0x118>)
   26dd2:	4c13      	ldr	r4, [pc, #76]	; (26e20 <nm_spi_read+0xfc>)
   26dd4:	47a0      	blx	r4
   26dd6:	4b14      	ldr	r3, [pc, #80]	; (26e28 <nm_spi_read+0x104>)
   26dd8:	0018      	movs	r0, r3
   26dda:	4b11      	ldr	r3, [pc, #68]	; (26e20 <nm_spi_read+0xfc>)
   26ddc:	4798      	blx	r3
		nm_bsp_sleep(1);
   26dde:	2001      	movs	r0, #1
   26de0:	4b12      	ldr	r3, [pc, #72]	; (26e2c <nm_spi_read+0x108>)
   26de2:	4798      	blx	r3
		retry--;
   26de4:	2317      	movs	r3, #23
   26de6:	18fb      	adds	r3, r7, r3
   26de8:	781a      	ldrb	r2, [r3, #0]
   26dea:	2317      	movs	r3, #23
   26dec:	18fb      	adds	r3, r7, r3
   26dee:	3a01      	subs	r2, #1
   26df0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26df2:	2317      	movs	r3, #23
   26df4:	18fb      	adds	r3, r7, r3
   26df6:	781b      	ldrb	r3, [r3, #0]
   26df8:	2b00      	cmp	r3, #0
   26dfa:	d000      	beq.n	26dfe <nm_spi_read+0xda>
   26dfc:	e7a1      	b.n	26d42 <nm_spi_read+0x1e>
	}

	return result;
   26dfe:	2315      	movs	r3, #21
   26e00:	18fb      	adds	r3, r7, r3
   26e02:	781b      	ldrb	r3, [r3, #0]
   26e04:	b25b      	sxtb	r3, r3
}
   26e06:	0018      	movs	r0, r3
   26e08:	46bd      	mov	sp, r7
   26e0a:	b007      	add	sp, #28
   26e0c:	bd90      	pop	{r4, r7, pc}
   26e0e:	46c0      	nop			; (mov r8, r8)
   26e10:	00025de9 	.word	0x00025de9
   26e14:	00000472 	.word	0x00000472
   26e18:	0003c6bc 	.word	0x0003c6bc
   26e1c:	0003c054 	.word	0x0003c054
   26e20:	00020349 	.word	0x00020349
   26e24:	0003c4c0 	.word	0x0003c4c0
   26e28:	0003c094 	.word	0x0003c094
   26e2c:	000227b9 	.word	0x000227b9
   26e30:	0002586d 	.word	0x0002586d
   26e34:	00025cad 	.word	0x00025cad
   26e38:	0000047d 	.word	0x0000047d
   26e3c:	0003c460 	.word	0x0003c460

00026e40 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   26e40:	b580      	push	{r7, lr}
   26e42:	b082      	sub	sp, #8
   26e44:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   26e46:	4b0c      	ldr	r3, [pc, #48]	; (26e78 <spi_init_pkt_sz+0x38>)
   26e48:	0018      	movs	r0, r3
   26e4a:	4b0c      	ldr	r3, [pc, #48]	; (26e7c <spi_init_pkt_sz+0x3c>)
   26e4c:	4798      	blx	r3
   26e4e:	0003      	movs	r3, r0
   26e50:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   26e52:	687b      	ldr	r3, [r7, #4]
   26e54:	2270      	movs	r2, #112	; 0x70
   26e56:	4393      	bics	r3, r2
   26e58:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   26e5a:	687b      	ldr	r3, [r7, #4]
   26e5c:	2250      	movs	r2, #80	; 0x50
   26e5e:	4313      	orrs	r3, r2
   26e60:	607b      	str	r3, [r7, #4]
   26e62:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   26e64:	687b      	ldr	r3, [r7, #4]
   26e66:	4a04      	ldr	r2, [pc, #16]	; (26e78 <spi_init_pkt_sz+0x38>)
   26e68:	0019      	movs	r1, r3
   26e6a:	0010      	movs	r0, r2
   26e6c:	4b04      	ldr	r3, [pc, #16]	; (26e80 <spi_init_pkt_sz+0x40>)
   26e6e:	4798      	blx	r3
}
   26e70:	46c0      	nop			; (mov r8, r8)
   26e72:	46bd      	mov	sp, r7
   26e74:	b002      	add	sp, #8
   26e76:	bd80      	pop	{r7, pc}
   26e78:	0000e824 	.word	0x0000e824
   26e7c:	00027019 	.word	0x00027019
   26e80:	0002708d 	.word	0x0002708d

00026e84 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   26e84:	b590      	push	{r4, r7, lr}
   26e86:	b083      	sub	sp, #12
   26e88:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26e8a:	2300      	movs	r3, #0
   26e8c:	9300      	str	r3, [sp, #0]
   26e8e:	2300      	movs	r3, #0
   26e90:	2200      	movs	r2, #0
   26e92:	2100      	movs	r1, #0
   26e94:	20cf      	movs	r0, #207	; 0xcf
   26e96:	4c05      	ldr	r4, [pc, #20]	; (26eac <nm_spi_reset+0x28>)
   26e98:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   26e9a:	20cf      	movs	r0, #207	; 0xcf
   26e9c:	4b04      	ldr	r3, [pc, #16]	; (26eb0 <nm_spi_reset+0x2c>)
   26e9e:	4798      	blx	r3
	return M2M_SUCCESS;
   26ea0:	2300      	movs	r3, #0
}
   26ea2:	0018      	movs	r0, r3
   26ea4:	46bd      	mov	sp, r7
   26ea6:	b001      	add	sp, #4
   26ea8:	bd90      	pop	{r4, r7, pc}
   26eaa:	46c0      	nop			; (mov r8, r8)
   26eac:	0002586d 	.word	0x0002586d
   26eb0:	00025cad 	.word	0x00025cad

00026eb4 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   26eb4:	b580      	push	{r7, lr}
   26eb6:	b082      	sub	sp, #8
   26eb8:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   26eba:	2300      	movs	r3, #0
   26ebc:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   26ebe:	4b40      	ldr	r3, [pc, #256]	; (26fc0 <nm_spi_init+0x10c>)
   26ec0:	2200      	movs	r2, #0
   26ec2:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   26ec4:	003b      	movs	r3, r7
   26ec6:	4a3f      	ldr	r2, [pc, #252]	; (26fc4 <nm_spi_init+0x110>)
   26ec8:	0019      	movs	r1, r3
   26eca:	0010      	movs	r0, r2
   26ecc:	4b3e      	ldr	r3, [pc, #248]	; (26fc8 <nm_spi_init+0x114>)
   26ece:	4798      	blx	r3
   26ed0:	1e03      	subs	r3, r0, #0
   26ed2:	d129      	bne.n	26f28 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   26ed4:	4b3a      	ldr	r3, [pc, #232]	; (26fc0 <nm_spi_init+0x10c>)
   26ed6:	2201      	movs	r2, #1
   26ed8:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   26eda:	2398      	movs	r3, #152	; 0x98
   26edc:	00da      	lsls	r2, r3, #3
   26ede:	493b      	ldr	r1, [pc, #236]	; (26fcc <nm_spi_init+0x118>)
   26ee0:	4b3b      	ldr	r3, [pc, #236]	; (26fd0 <nm_spi_init+0x11c>)
   26ee2:	0018      	movs	r0, r3
   26ee4:	4b3b      	ldr	r3, [pc, #236]	; (26fd4 <nm_spi_init+0x120>)
   26ee6:	4798      	blx	r3
   26ee8:	4b3b      	ldr	r3, [pc, #236]	; (26fd8 <nm_spi_init+0x124>)
   26eea:	0018      	movs	r0, r3
   26eec:	4b39      	ldr	r3, [pc, #228]	; (26fd4 <nm_spi_init+0x120>)
   26eee:	4798      	blx	r3
   26ef0:	4b3a      	ldr	r3, [pc, #232]	; (26fdc <nm_spi_init+0x128>)
   26ef2:	0018      	movs	r0, r3
   26ef4:	4b37      	ldr	r3, [pc, #220]	; (26fd4 <nm_spi_init+0x120>)
   26ef6:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   26ef8:	003b      	movs	r3, r7
   26efa:	4a32      	ldr	r2, [pc, #200]	; (26fc4 <nm_spi_init+0x110>)
   26efc:	0019      	movs	r1, r3
   26efe:	0010      	movs	r0, r2
   26f00:	4b31      	ldr	r3, [pc, #196]	; (26fc8 <nm_spi_init+0x114>)
   26f02:	4798      	blx	r3
   26f04:	1e03      	subs	r3, r0, #0
   26f06:	d10f      	bne.n	26f28 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   26f08:	4a35      	ldr	r2, [pc, #212]	; (26fe0 <nm_spi_init+0x12c>)
   26f0a:	4930      	ldr	r1, [pc, #192]	; (26fcc <nm_spi_init+0x118>)
   26f0c:	4b30      	ldr	r3, [pc, #192]	; (26fd0 <nm_spi_init+0x11c>)
   26f0e:	0018      	movs	r0, r3
   26f10:	4b30      	ldr	r3, [pc, #192]	; (26fd4 <nm_spi_init+0x120>)
   26f12:	4798      	blx	r3
   26f14:	4b33      	ldr	r3, [pc, #204]	; (26fe4 <nm_spi_init+0x130>)
   26f16:	0018      	movs	r0, r3
   26f18:	4b2e      	ldr	r3, [pc, #184]	; (26fd4 <nm_spi_init+0x120>)
   26f1a:	4798      	blx	r3
   26f1c:	4b2f      	ldr	r3, [pc, #188]	; (26fdc <nm_spi_init+0x128>)
   26f1e:	0018      	movs	r0, r3
   26f20:	4b2c      	ldr	r3, [pc, #176]	; (26fd4 <nm_spi_init+0x120>)
   26f22:	4798      	blx	r3
			return 0;
   26f24:	2300      	movs	r3, #0
   26f26:	e047      	b.n	26fb8 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   26f28:	4b25      	ldr	r3, [pc, #148]	; (26fc0 <nm_spi_init+0x10c>)
   26f2a:	781b      	ldrb	r3, [r3, #0]
   26f2c:	2b00      	cmp	r3, #0
   26f2e:	d126      	bne.n	26f7e <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   26f30:	683b      	ldr	r3, [r7, #0]
   26f32:	220c      	movs	r2, #12
   26f34:	4393      	bics	r3, r2
   26f36:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   26f38:	683b      	ldr	r3, [r7, #0]
   26f3a:	2270      	movs	r2, #112	; 0x70
   26f3c:	4393      	bics	r3, r2
   26f3e:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   26f40:	683b      	ldr	r3, [r7, #0]
   26f42:	2250      	movs	r2, #80	; 0x50
   26f44:	4313      	orrs	r3, r2
   26f46:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   26f48:	683b      	ldr	r3, [r7, #0]
   26f4a:	4a1e      	ldr	r2, [pc, #120]	; (26fc4 <nm_spi_init+0x110>)
   26f4c:	0019      	movs	r1, r3
   26f4e:	0010      	movs	r0, r2
   26f50:	4b25      	ldr	r3, [pc, #148]	; (26fe8 <nm_spi_init+0x134>)
   26f52:	4798      	blx	r3
   26f54:	1e03      	subs	r3, r0, #0
   26f56:	d10f      	bne.n	26f78 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   26f58:	4a24      	ldr	r2, [pc, #144]	; (26fec <nm_spi_init+0x138>)
   26f5a:	491c      	ldr	r1, [pc, #112]	; (26fcc <nm_spi_init+0x118>)
   26f5c:	4b1c      	ldr	r3, [pc, #112]	; (26fd0 <nm_spi_init+0x11c>)
   26f5e:	0018      	movs	r0, r3
   26f60:	4b1c      	ldr	r3, [pc, #112]	; (26fd4 <nm_spi_init+0x120>)
   26f62:	4798      	blx	r3
   26f64:	4b22      	ldr	r3, [pc, #136]	; (26ff0 <nm_spi_init+0x13c>)
   26f66:	0018      	movs	r0, r3
   26f68:	4b1a      	ldr	r3, [pc, #104]	; (26fd4 <nm_spi_init+0x120>)
   26f6a:	4798      	blx	r3
   26f6c:	4b1b      	ldr	r3, [pc, #108]	; (26fdc <nm_spi_init+0x128>)
   26f6e:	0018      	movs	r0, r3
   26f70:	4b18      	ldr	r3, [pc, #96]	; (26fd4 <nm_spi_init+0x120>)
   26f72:	4798      	blx	r3
			return 0;
   26f74:	2300      	movs	r3, #0
   26f76:	e01f      	b.n	26fb8 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   26f78:	4b11      	ldr	r3, [pc, #68]	; (26fc0 <nm_spi_init+0x10c>)
   26f7a:	2201      	movs	r2, #1
   26f7c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   26f7e:	1d3a      	adds	r2, r7, #4
   26f80:	2380      	movs	r3, #128	; 0x80
   26f82:	015b      	lsls	r3, r3, #5
   26f84:	0011      	movs	r1, r2
   26f86:	0018      	movs	r0, r3
   26f88:	4b0f      	ldr	r3, [pc, #60]	; (26fc8 <nm_spi_init+0x114>)
   26f8a:	4798      	blx	r3
   26f8c:	1e03      	subs	r3, r0, #0
   26f8e:	d110      	bne.n	26fb2 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   26f90:	4a18      	ldr	r2, [pc, #96]	; (26ff4 <nm_spi_init+0x140>)
   26f92:	490e      	ldr	r1, [pc, #56]	; (26fcc <nm_spi_init+0x118>)
   26f94:	4b0e      	ldr	r3, [pc, #56]	; (26fd0 <nm_spi_init+0x11c>)
   26f96:	0018      	movs	r0, r3
   26f98:	4b0e      	ldr	r3, [pc, #56]	; (26fd4 <nm_spi_init+0x120>)
   26f9a:	4798      	blx	r3
   26f9c:	4b16      	ldr	r3, [pc, #88]	; (26ff8 <nm_spi_init+0x144>)
   26f9e:	0018      	movs	r0, r3
   26fa0:	4b0c      	ldr	r3, [pc, #48]	; (26fd4 <nm_spi_init+0x120>)
   26fa2:	4798      	blx	r3
   26fa4:	4b0d      	ldr	r3, [pc, #52]	; (26fdc <nm_spi_init+0x128>)
   26fa6:	0018      	movs	r0, r3
   26fa8:	4b0a      	ldr	r3, [pc, #40]	; (26fd4 <nm_spi_init+0x120>)
   26faa:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   26fac:	2306      	movs	r3, #6
   26fae:	425b      	negs	r3, r3
   26fb0:	e002      	b.n	26fb8 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   26fb2:	4b12      	ldr	r3, [pc, #72]	; (26ffc <nm_spi_init+0x148>)
   26fb4:	4798      	blx	r3


	return M2M_SUCCESS;
   26fb6:	2300      	movs	r3, #0
}
   26fb8:	0018      	movs	r0, r3
   26fba:	46bd      	mov	sp, r7
   26fbc:	b002      	add	sp, #8
   26fbe:	bd80      	pop	{r7, pc}
   26fc0:	20004124 	.word	0x20004124
   26fc4:	0000e824 	.word	0x0000e824
   26fc8:	00026bad 	.word	0x00026bad
   26fcc:	0003c6c8 	.word	0x0003c6c8
   26fd0:	0003c054 	.word	0x0003c054
   26fd4:	00020349 	.word	0x00020349
   26fd8:	0003c4f0 	.word	0x0003c4f0
   26fdc:	0003c094 	.word	0x0003c094
   26fe0:	000004c3 	.word	0x000004c3
   26fe4:	0003c540 	.word	0x0003c540
   26fe8:	000268b5 	.word	0x000268b5
   26fec:	000004cd 	.word	0x000004cd
   26ff0:	0003c570 	.word	0x0003c570
   26ff4:	000004d7 	.word	0x000004d7
   26ff8:	0003c5a4 	.word	0x0003c5a4
   26ffc:	00026e41 	.word	0x00026e41

00027000 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   27000:	b580      	push	{r7, lr}
   27002:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   27004:	4b03      	ldr	r3, [pc, #12]	; (27014 <nm_spi_deinit+0x14>)
   27006:	2200      	movs	r2, #0
   27008:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   2700a:	2300      	movs	r3, #0
}
   2700c:	0018      	movs	r0, r3
   2700e:	46bd      	mov	sp, r7
   27010:	bd80      	pop	{r7, pc}
   27012:	46c0      	nop			; (mov r8, r8)
   27014:	20004124 	.word	0x20004124

00027018 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   27018:	b580      	push	{r7, lr}
   2701a:	b084      	sub	sp, #16
   2701c:	af00      	add	r7, sp, #0
   2701e:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   27020:	230c      	movs	r3, #12
   27022:	18fa      	adds	r2, r7, r3
   27024:	687b      	ldr	r3, [r7, #4]
   27026:	0011      	movs	r1, r2
   27028:	0018      	movs	r0, r3
   2702a:	4b03      	ldr	r3, [pc, #12]	; (27038 <nm_spi_read_reg+0x20>)
   2702c:	4798      	blx	r3

	return u32Val;
   2702e:	68fb      	ldr	r3, [r7, #12]
}
   27030:	0018      	movs	r0, r3
   27032:	46bd      	mov	sp, r7
   27034:	b004      	add	sp, #16
   27036:	bd80      	pop	{r7, pc}
   27038:	00026bad 	.word	0x00026bad

0002703c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   2703c:	b590      	push	{r4, r7, lr}
   2703e:	b085      	sub	sp, #20
   27040:	af00      	add	r7, sp, #0
   27042:	6078      	str	r0, [r7, #4]
   27044:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   27046:	230f      	movs	r3, #15
   27048:	18fc      	adds	r4, r7, r3
   2704a:	683a      	ldr	r2, [r7, #0]
   2704c:	687b      	ldr	r3, [r7, #4]
   2704e:	0011      	movs	r1, r2
   27050:	0018      	movs	r0, r3
   27052:	4b0d      	ldr	r3, [pc, #52]	; (27088 <nm_spi_read_reg_with_ret+0x4c>)
   27054:	4798      	blx	r3
   27056:	0003      	movs	r3, r0
   27058:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2705a:	230f      	movs	r3, #15
   2705c:	18fb      	adds	r3, r7, r3
   2705e:	781b      	ldrb	r3, [r3, #0]
   27060:	b25b      	sxtb	r3, r3
   27062:	2b01      	cmp	r3, #1
   27064:	d104      	bne.n	27070 <nm_spi_read_reg_with_ret+0x34>
   27066:	230f      	movs	r3, #15
   27068:	18fb      	adds	r3, r7, r3
   2706a:	2200      	movs	r2, #0
   2706c:	701a      	strb	r2, [r3, #0]
   2706e:	e003      	b.n	27078 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27070:	230f      	movs	r3, #15
   27072:	18fb      	adds	r3, r7, r3
   27074:	22fa      	movs	r2, #250	; 0xfa
   27076:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27078:	230f      	movs	r3, #15
   2707a:	18fb      	adds	r3, r7, r3
   2707c:	781b      	ldrb	r3, [r3, #0]
   2707e:	b25b      	sxtb	r3, r3
}
   27080:	0018      	movs	r0, r3
   27082:	46bd      	mov	sp, r7
   27084:	b005      	add	sp, #20
   27086:	bd90      	pop	{r4, r7, pc}
   27088:	00026bad 	.word	0x00026bad

0002708c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   2708c:	b590      	push	{r4, r7, lr}
   2708e:	b085      	sub	sp, #20
   27090:	af00      	add	r7, sp, #0
   27092:	6078      	str	r0, [r7, #4]
   27094:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   27096:	230f      	movs	r3, #15
   27098:	18fc      	adds	r4, r7, r3
   2709a:	683a      	ldr	r2, [r7, #0]
   2709c:	687b      	ldr	r3, [r7, #4]
   2709e:	0011      	movs	r1, r2
   270a0:	0018      	movs	r0, r3
   270a2:	4b0d      	ldr	r3, [pc, #52]	; (270d8 <nm_spi_write_reg+0x4c>)
   270a4:	4798      	blx	r3
   270a6:	0003      	movs	r3, r0
   270a8:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   270aa:	230f      	movs	r3, #15
   270ac:	18fb      	adds	r3, r7, r3
   270ae:	781b      	ldrb	r3, [r3, #0]
   270b0:	b25b      	sxtb	r3, r3
   270b2:	2b01      	cmp	r3, #1
   270b4:	d104      	bne.n	270c0 <nm_spi_write_reg+0x34>
   270b6:	230f      	movs	r3, #15
   270b8:	18fb      	adds	r3, r7, r3
   270ba:	2200      	movs	r2, #0
   270bc:	701a      	strb	r2, [r3, #0]
   270be:	e003      	b.n	270c8 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   270c0:	230f      	movs	r3, #15
   270c2:	18fb      	adds	r3, r7, r3
   270c4:	22fa      	movs	r2, #250	; 0xfa
   270c6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   270c8:	230f      	movs	r3, #15
   270ca:	18fb      	adds	r3, r7, r3
   270cc:	781b      	ldrb	r3, [r3, #0]
   270ce:	b25b      	sxtb	r3, r3
}
   270d0:	0018      	movs	r0, r3
   270d2:	46bd      	mov	sp, r7
   270d4:	b005      	add	sp, #20
   270d6:	bd90      	pop	{r4, r7, pc}
   270d8:	000268b5 	.word	0x000268b5

000270dc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   270dc:	b590      	push	{r4, r7, lr}
   270de:	b087      	sub	sp, #28
   270e0:	af00      	add	r7, sp, #0
   270e2:	60f8      	str	r0, [r7, #12]
   270e4:	60b9      	str	r1, [r7, #8]
   270e6:	1dbb      	adds	r3, r7, #6
   270e8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   270ea:	2317      	movs	r3, #23
   270ec:	18fc      	adds	r4, r7, r3
   270ee:	1dbb      	adds	r3, r7, #6
   270f0:	881a      	ldrh	r2, [r3, #0]
   270f2:	68b9      	ldr	r1, [r7, #8]
   270f4:	68fb      	ldr	r3, [r7, #12]
   270f6:	0018      	movs	r0, r3
   270f8:	4b0d      	ldr	r3, [pc, #52]	; (27130 <nm_spi_read_block+0x54>)
   270fa:	4798      	blx	r3
   270fc:	0003      	movs	r3, r0
   270fe:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27100:	2317      	movs	r3, #23
   27102:	18fb      	adds	r3, r7, r3
   27104:	781b      	ldrb	r3, [r3, #0]
   27106:	b25b      	sxtb	r3, r3
   27108:	2b01      	cmp	r3, #1
   2710a:	d104      	bne.n	27116 <nm_spi_read_block+0x3a>
   2710c:	2317      	movs	r3, #23
   2710e:	18fb      	adds	r3, r7, r3
   27110:	2200      	movs	r2, #0
   27112:	701a      	strb	r2, [r3, #0]
   27114:	e003      	b.n	2711e <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27116:	2317      	movs	r3, #23
   27118:	18fb      	adds	r3, r7, r3
   2711a:	22fa      	movs	r2, #250	; 0xfa
   2711c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2711e:	2317      	movs	r3, #23
   27120:	18fb      	adds	r3, r7, r3
   27122:	781b      	ldrb	r3, [r3, #0]
   27124:	b25b      	sxtb	r3, r3
}
   27126:	0018      	movs	r0, r3
   27128:	46bd      	mov	sp, r7
   2712a:	b007      	add	sp, #28
   2712c:	bd90      	pop	{r4, r7, pc}
   2712e:	46c0      	nop			; (mov r8, r8)
   27130:	00026d25 	.word	0x00026d25

00027134 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   27134:	b590      	push	{r4, r7, lr}
   27136:	b087      	sub	sp, #28
   27138:	af00      	add	r7, sp, #0
   2713a:	60f8      	str	r0, [r7, #12]
   2713c:	60b9      	str	r1, [r7, #8]
   2713e:	1dbb      	adds	r3, r7, #6
   27140:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   27142:	2317      	movs	r3, #23
   27144:	18fc      	adds	r4, r7, r3
   27146:	1dbb      	adds	r3, r7, #6
   27148:	881a      	ldrh	r2, [r3, #0]
   2714a:	68b9      	ldr	r1, [r7, #8]
   2714c:	68fb      	ldr	r3, [r7, #12]
   2714e:	0018      	movs	r0, r3
   27150:	4b0d      	ldr	r3, [pc, #52]	; (27188 <nm_spi_write_block+0x54>)
   27152:	4798      	blx	r3
   27154:	0003      	movs	r3, r0
   27156:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27158:	2317      	movs	r3, #23
   2715a:	18fb      	adds	r3, r7, r3
   2715c:	781b      	ldrb	r3, [r3, #0]
   2715e:	b25b      	sxtb	r3, r3
   27160:	2b01      	cmp	r3, #1
   27162:	d104      	bne.n	2716e <nm_spi_write_block+0x3a>
   27164:	2317      	movs	r3, #23
   27166:	18fb      	adds	r3, r7, r3
   27168:	2200      	movs	r2, #0
   2716a:	701a      	strb	r2, [r3, #0]
   2716c:	e003      	b.n	27176 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2716e:	2317      	movs	r3, #23
   27170:	18fb      	adds	r3, r7, r3
   27172:	22fa      	movs	r2, #250	; 0xfa
   27174:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27176:	2317      	movs	r3, #23
   27178:	18fb      	adds	r3, r7, r3
   2717a:	781b      	ldrb	r3, [r3, #0]
   2717c:	b25b      	sxtb	r3, r3
}
   2717e:	0018      	movs	r0, r3
   27180:	46bd      	mov	sp, r7
   27182:	b007      	add	sp, #28
   27184:	bd90      	pop	{r4, r7, pc}
   27186:	46c0      	nop			; (mov r8, r8)
   27188:	00026a01 	.word	0x00026a01

0002718c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   2718c:	b590      	push	{r4, r7, lr}
   2718e:	b089      	sub	sp, #36	; 0x24
   27190:	af00      	add	r7, sp, #0
   27192:	60b9      	str	r1, [r7, #8]
   27194:	0011      	movs	r1, r2
   27196:	607b      	str	r3, [r7, #4]
   27198:	230f      	movs	r3, #15
   2719a:	18fb      	adds	r3, r7, r3
   2719c:	1c02      	adds	r2, r0, #0
   2719e:	701a      	strb	r2, [r3, #0]
   271a0:	230e      	movs	r3, #14
   271a2:	18fb      	adds	r3, r7, r3
   271a4:	1c0a      	adds	r2, r1, #0
   271a6:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   271a8:	2330      	movs	r3, #48	; 0x30
   271aa:	18fb      	adds	r3, r7, r3
   271ac:	881b      	ldrh	r3, [r3, #0]
   271ae:	2b00      	cmp	r3, #0
   271b0:	d100      	bne.n	271b4 <Socket_ReadSocketData+0x28>
   271b2:	e0d7      	b.n	27364 <Socket_ReadSocketData+0x1d8>
   271b4:	230f      	movs	r3, #15
   271b6:	18fb      	adds	r3, r7, r3
   271b8:	2200      	movs	r2, #0
   271ba:	569a      	ldrsb	r2, [r3, r2]
   271bc:	4b6b      	ldr	r3, [pc, #428]	; (2736c <Socket_ReadSocketData+0x1e0>)
   271be:	0112      	lsls	r2, r2, #4
   271c0:	58d3      	ldr	r3, [r2, r3]
   271c2:	2b00      	cmp	r3, #0
   271c4:	d100      	bne.n	271c8 <Socket_ReadSocketData+0x3c>
   271c6:	e0cd      	b.n	27364 <Socket_ReadSocketData+0x1d8>
   271c8:	230f      	movs	r3, #15
   271ca:	18fb      	adds	r3, r7, r3
   271cc:	781b      	ldrb	r3, [r3, #0]
   271ce:	b25b      	sxtb	r3, r3
   271d0:	4a66      	ldr	r2, [pc, #408]	; (2736c <Socket_ReadSocketData+0x1e0>)
   271d2:	011b      	lsls	r3, r3, #4
   271d4:	18d3      	adds	r3, r2, r3
   271d6:	3304      	adds	r3, #4
   271d8:	881b      	ldrh	r3, [r3, #0]
   271da:	b29b      	uxth	r3, r3
   271dc:	2b00      	cmp	r3, #0
   271de:	d100      	bne.n	271e2 <Socket_ReadSocketData+0x56>
   271e0:	e0c0      	b.n	27364 <Socket_ReadSocketData+0x1d8>
   271e2:	230f      	movs	r3, #15
   271e4:	18fb      	adds	r3, r7, r3
   271e6:	781b      	ldrb	r3, [r3, #0]
   271e8:	b25b      	sxtb	r3, r3
   271ea:	4a60      	ldr	r2, [pc, #384]	; (2736c <Socket_ReadSocketData+0x1e0>)
   271ec:	011b      	lsls	r3, r3, #4
   271ee:	18d3      	adds	r3, r2, r3
   271f0:	330a      	adds	r3, #10
   271f2:	781b      	ldrb	r3, [r3, #0]
   271f4:	b2db      	uxtb	r3, r3
   271f6:	2b01      	cmp	r3, #1
   271f8:	d000      	beq.n	271fc <Socket_ReadSocketData+0x70>
   271fa:	e0b3      	b.n	27364 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   271fc:	687b      	ldr	r3, [r7, #4]
   271fe:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   27200:	68bb      	ldr	r3, [r7, #8]
   27202:	2230      	movs	r2, #48	; 0x30
   27204:	18ba      	adds	r2, r7, r2
   27206:	8812      	ldrh	r2, [r2, #0]
   27208:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   2720a:	2319      	movs	r3, #25
   2720c:	18fb      	adds	r3, r7, r3
   2720e:	2201      	movs	r2, #1
   27210:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   27212:	231a      	movs	r3, #26
   27214:	18fb      	adds	r3, r7, r3
   27216:	2230      	movs	r2, #48	; 0x30
   27218:	18ba      	adds	r2, r7, r2
   2721a:	8812      	ldrh	r2, [r2, #0]
   2721c:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   2721e:	230f      	movs	r3, #15
   27220:	18fb      	adds	r3, r7, r3
   27222:	781b      	ldrb	r3, [r3, #0]
   27224:	b25b      	sxtb	r3, r3
   27226:	4a51      	ldr	r2, [pc, #324]	; (2736c <Socket_ReadSocketData+0x1e0>)
   27228:	011b      	lsls	r3, r3, #4
   2722a:	18d3      	adds	r3, r2, r3
   2722c:	3304      	adds	r3, #4
   2722e:	881b      	ldrh	r3, [r3, #0]
   27230:	b29b      	uxth	r3, r3
   27232:	221a      	movs	r2, #26
   27234:	18ba      	adds	r2, r7, r2
   27236:	8812      	ldrh	r2, [r2, #0]
   27238:	1ad3      	subs	r3, r2, r3
   2723a:	b29a      	uxth	r2, r3
   2723c:	2316      	movs	r3, #22
   2723e:	18fb      	adds	r3, r7, r3
   27240:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   27242:	2316      	movs	r3, #22
   27244:	18fb      	adds	r3, r7, r3
   27246:	2200      	movs	r2, #0
   27248:	5e9b      	ldrsh	r3, [r3, r2]
   2724a:	2b00      	cmp	r3, #0
   2724c:	dd0f      	ble.n	2726e <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   2724e:	2319      	movs	r3, #25
   27250:	18fb      	adds	r3, r7, r3
   27252:	2200      	movs	r2, #0
   27254:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   27256:	230f      	movs	r3, #15
   27258:	18fb      	adds	r3, r7, r3
   2725a:	2200      	movs	r2, #0
   2725c:	569a      	ldrsb	r2, [r3, r2]
   2725e:	231a      	movs	r3, #26
   27260:	18fb      	adds	r3, r7, r3
   27262:	4942      	ldr	r1, [pc, #264]	; (2736c <Socket_ReadSocketData+0x1e0>)
   27264:	0112      	lsls	r2, r2, #4
   27266:	188a      	adds	r2, r1, r2
   27268:	3204      	adds	r2, #4
   2726a:	8812      	ldrh	r2, [r2, #0]
   2726c:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   2726e:	230f      	movs	r3, #15
   27270:	18fb      	adds	r3, r7, r3
   27272:	2200      	movs	r2, #0
   27274:	569a      	ldrsb	r2, [r3, r2]
   27276:	4b3d      	ldr	r3, [pc, #244]	; (2736c <Socket_ReadSocketData+0x1e0>)
   27278:	0112      	lsls	r2, r2, #4
   2727a:	58d1      	ldr	r1, [r2, r3]
   2727c:	2319      	movs	r3, #25
   2727e:	18fb      	adds	r3, r7, r3
   27280:	781c      	ldrb	r4, [r3, #0]
   27282:	231a      	movs	r3, #26
   27284:	18fb      	adds	r3, r7, r3
   27286:	881a      	ldrh	r2, [r3, #0]
   27288:	69f8      	ldr	r0, [r7, #28]
   2728a:	0023      	movs	r3, r4
   2728c:	4c38      	ldr	r4, [pc, #224]	; (27370 <Socket_ReadSocketData+0x1e4>)
   2728e:	47a0      	blx	r4
   27290:	1e03      	subs	r3, r0, #0
   27292:	d14f      	bne.n	27334 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   27294:	230f      	movs	r3, #15
   27296:	18fb      	adds	r3, r7, r3
   27298:	2200      	movs	r2, #0
   2729a:	569a      	ldrsb	r2, [r3, r2]
   2729c:	4b33      	ldr	r3, [pc, #204]	; (2736c <Socket_ReadSocketData+0x1e0>)
   2729e:	0112      	lsls	r2, r2, #4
   272a0:	58d2      	ldr	r2, [r2, r3]
   272a2:	68bb      	ldr	r3, [r7, #8]
   272a4:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   272a6:	231a      	movs	r3, #26
   272a8:	18fb      	adds	r3, r7, r3
   272aa:	2200      	movs	r2, #0
   272ac:	5e9a      	ldrsh	r2, [r3, r2]
   272ae:	68bb      	ldr	r3, [r7, #8]
   272b0:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   272b2:	68bb      	ldr	r3, [r7, #8]
   272b4:	88da      	ldrh	r2, [r3, #6]
   272b6:	231a      	movs	r3, #26
   272b8:	18fb      	adds	r3, r7, r3
   272ba:	881b      	ldrh	r3, [r3, #0]
   272bc:	1ad3      	subs	r3, r2, r3
   272be:	b29a      	uxth	r2, r3
   272c0:	68bb      	ldr	r3, [r7, #8]
   272c2:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   272c4:	4b2b      	ldr	r3, [pc, #172]	; (27374 <Socket_ReadSocketData+0x1e8>)
   272c6:	681b      	ldr	r3, [r3, #0]
   272c8:	2b00      	cmp	r3, #0
   272ca:	d00b      	beq.n	272e4 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   272cc:	4b29      	ldr	r3, [pc, #164]	; (27374 <Socket_ReadSocketData+0x1e8>)
   272ce:	681b      	ldr	r3, [r3, #0]
   272d0:	68bc      	ldr	r4, [r7, #8]
   272d2:	220e      	movs	r2, #14
   272d4:	18ba      	adds	r2, r7, r2
   272d6:	7811      	ldrb	r1, [r2, #0]
   272d8:	220f      	movs	r2, #15
   272da:	18ba      	adds	r2, r7, r2
   272dc:	2000      	movs	r0, #0
   272de:	5610      	ldrsb	r0, [r2, r0]
   272e0:	0022      	movs	r2, r4
   272e2:	4798      	blx	r3

				u16ReadCount -= u16Read;
   272e4:	2330      	movs	r3, #48	; 0x30
   272e6:	18f9      	adds	r1, r7, r3
   272e8:	2330      	movs	r3, #48	; 0x30
   272ea:	18fa      	adds	r2, r7, r3
   272ec:	231a      	movs	r3, #26
   272ee:	18fb      	adds	r3, r7, r3
   272f0:	8812      	ldrh	r2, [r2, #0]
   272f2:	881b      	ldrh	r3, [r3, #0]
   272f4:	1ad3      	subs	r3, r2, r3
   272f6:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   272f8:	231a      	movs	r3, #26
   272fa:	18fb      	adds	r3, r7, r3
   272fc:	881b      	ldrh	r3, [r3, #0]
   272fe:	69fa      	ldr	r2, [r7, #28]
   27300:	18d3      	adds	r3, r2, r3
   27302:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   27304:	230f      	movs	r3, #15
   27306:	18fb      	adds	r3, r7, r3
   27308:	781b      	ldrb	r3, [r3, #0]
   2730a:	b25b      	sxtb	r3, r3
   2730c:	4a17      	ldr	r2, [pc, #92]	; (2736c <Socket_ReadSocketData+0x1e0>)
   2730e:	011b      	lsls	r3, r3, #4
   27310:	18d3      	adds	r3, r2, r3
   27312:	330a      	adds	r3, #10
   27314:	781b      	ldrb	r3, [r3, #0]
   27316:	b2db      	uxtb	r3, r3
   27318:	2b00      	cmp	r3, #0
   2731a:	d11c      	bne.n	27356 <Socket_ReadSocketData+0x1ca>
   2731c:	2330      	movs	r3, #48	; 0x30
   2731e:	18fb      	adds	r3, r7, r3
   27320:	881b      	ldrh	r3, [r3, #0]
   27322:	2b00      	cmp	r3, #0
   27324:	d017      	beq.n	27356 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   27326:	2301      	movs	r3, #1
   27328:	2200      	movs	r2, #0
   2732a:	2100      	movs	r1, #0
   2732c:	2000      	movs	r0, #0
   2732e:	4c10      	ldr	r4, [pc, #64]	; (27370 <Socket_ReadSocketData+0x1e4>)
   27330:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   27332:	e017      	b.n	27364 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   27334:	4b10      	ldr	r3, [pc, #64]	; (27378 <Socket_ReadSocketData+0x1ec>)
   27336:	0018      	movs	r0, r3
   27338:	4b10      	ldr	r3, [pc, #64]	; (2737c <Socket_ReadSocketData+0x1f0>)
   2733a:	4798      	blx	r3
   2733c:	2330      	movs	r3, #48	; 0x30
   2733e:	18fb      	adds	r3, r7, r3
   27340:	881a      	ldrh	r2, [r3, #0]
   27342:	4b0f      	ldr	r3, [pc, #60]	; (27380 <Socket_ReadSocketData+0x1f4>)
   27344:	0011      	movs	r1, r2
   27346:	0018      	movs	r0, r3
   27348:	4b0c      	ldr	r3, [pc, #48]	; (2737c <Socket_ReadSocketData+0x1f0>)
   2734a:	4798      	blx	r3
   2734c:	4b0d      	ldr	r3, [pc, #52]	; (27384 <Socket_ReadSocketData+0x1f8>)
   2734e:	0018      	movs	r0, r3
   27350:	4b0a      	ldr	r3, [pc, #40]	; (2737c <Socket_ReadSocketData+0x1f0>)
   27352:	4798      	blx	r3
				break;
   27354:	e006      	b.n	27364 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   27356:	2330      	movs	r3, #48	; 0x30
   27358:	18fb      	adds	r3, r7, r3
   2735a:	881b      	ldrh	r3, [r3, #0]
   2735c:	2b00      	cmp	r3, #0
   2735e:	d000      	beq.n	27362 <Socket_ReadSocketData+0x1d6>
   27360:	e753      	b.n	2720a <Socket_ReadSocketData+0x7e>
	}
}
   27362:	e7ff      	b.n	27364 <Socket_ReadSocketData+0x1d8>
   27364:	46c0      	nop			; (mov r8, r8)
   27366:	46bd      	mov	sp, r7
   27368:	b009      	add	sp, #36	; 0x24
   2736a:	bd90      	pop	{r4, r7, pc}
   2736c:	20005980 	.word	0x20005980
   27370:	00023b85 	.word	0x00023b85
   27374:	20005a30 	.word	0x20005a30
   27378:	0003c6d4 	.word	0x0003c6d4
   2737c:	00020349 	.word	0x00020349
   27380:	0003c6e0 	.word	0x0003c6e0
   27384:	0003c6f4 	.word	0x0003c6f4

00027388 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   27388:	b590      	push	{r4, r7, lr}
   2738a:	b0bb      	sub	sp, #236	; 0xec
   2738c:	af02      	add	r7, sp, #8
   2738e:	603a      	str	r2, [r7, #0]
   27390:	1dfb      	adds	r3, r7, #7
   27392:	1c02      	adds	r2, r0, #0
   27394:	701a      	strb	r2, [r3, #0]
   27396:	1d3b      	adds	r3, r7, #4
   27398:	1c0a      	adds	r2, r1, #0
   2739a:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   2739c:	1dfb      	adds	r3, r7, #7
   2739e:	781b      	ldrb	r3, [r3, #0]
   273a0:	2b41      	cmp	r3, #65	; 0x41
   273a2:	d003      	beq.n	273ac <m2m_ip_cb+0x24>
   273a4:	1dfb      	adds	r3, r7, #7
   273a6:	781b      	ldrb	r3, [r3, #0]
   273a8:	2b54      	cmp	r3, #84	; 0x54
   273aa:	d120      	bne.n	273ee <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   273ac:	23cc      	movs	r3, #204	; 0xcc
   273ae:	18f9      	adds	r1, r7, r3
   273b0:	6838      	ldr	r0, [r7, #0]
   273b2:	2300      	movs	r3, #0
   273b4:	2204      	movs	r2, #4
   273b6:	4c98      	ldr	r4, [pc, #608]	; (27618 <m2m_ip_cb+0x290>)
   273b8:	47a0      	blx	r4
   273ba:	1e03      	subs	r3, r0, #0
   273bc:	d000      	beq.n	273c0 <m2m_ip_cb+0x38>
   273be:	e275      	b.n	278ac <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   273c0:	23cc      	movs	r3, #204	; 0xcc
   273c2:	18fb      	adds	r3, r7, r3
   273c4:	2201      	movs	r2, #1
   273c6:	569a      	ldrsb	r2, [r3, r2]
   273c8:	23c8      	movs	r3, #200	; 0xc8
   273ca:	18fb      	adds	r3, r7, r3
   273cc:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   273ce:	4b93      	ldr	r3, [pc, #588]	; (2761c <m2m_ip_cb+0x294>)
   273d0:	681b      	ldr	r3, [r3, #0]
   273d2:	2b00      	cmp	r3, #0
   273d4:	d100      	bne.n	273d8 <m2m_ip_cb+0x50>
   273d6:	e269      	b.n	278ac <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   273d8:	4b90      	ldr	r3, [pc, #576]	; (2761c <m2m_ip_cb+0x294>)
   273da:	681b      	ldr	r3, [r3, #0]
   273dc:	22cc      	movs	r2, #204	; 0xcc
   273de:	18ba      	adds	r2, r7, r2
   273e0:	2000      	movs	r0, #0
   273e2:	5610      	ldrsb	r0, [r2, r0]
   273e4:	22c8      	movs	r2, #200	; 0xc8
   273e6:	18ba      	adds	r2, r7, r2
   273e8:	2101      	movs	r1, #1
   273ea:	4798      	blx	r3
	{
   273ec:	e25e      	b.n	278ac <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   273ee:	1dfb      	adds	r3, r7, #7
   273f0:	781b      	ldrb	r3, [r3, #0]
   273f2:	2b42      	cmp	r3, #66	; 0x42
   273f4:	d120      	bne.n	27438 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   273f6:	23c4      	movs	r3, #196	; 0xc4
   273f8:	18f9      	adds	r1, r7, r3
   273fa:	6838      	ldr	r0, [r7, #0]
   273fc:	2300      	movs	r3, #0
   273fe:	2204      	movs	r2, #4
   27400:	4c85      	ldr	r4, [pc, #532]	; (27618 <m2m_ip_cb+0x290>)
   27402:	47a0      	blx	r4
   27404:	1e03      	subs	r3, r0, #0
   27406:	d000      	beq.n	2740a <m2m_ip_cb+0x82>
   27408:	e257      	b.n	278ba <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   2740a:	23c4      	movs	r3, #196	; 0xc4
   2740c:	18fb      	adds	r3, r7, r3
   2740e:	2201      	movs	r2, #1
   27410:	569a      	ldrsb	r2, [r3, r2]
   27412:	23c0      	movs	r3, #192	; 0xc0
   27414:	18fb      	adds	r3, r7, r3
   27416:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   27418:	4b80      	ldr	r3, [pc, #512]	; (2761c <m2m_ip_cb+0x294>)
   2741a:	681b      	ldr	r3, [r3, #0]
   2741c:	2b00      	cmp	r3, #0
   2741e:	d100      	bne.n	27422 <m2m_ip_cb+0x9a>
   27420:	e24b      	b.n	278ba <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   27422:	4b7e      	ldr	r3, [pc, #504]	; (2761c <m2m_ip_cb+0x294>)
   27424:	681b      	ldr	r3, [r3, #0]
   27426:	22c4      	movs	r2, #196	; 0xc4
   27428:	18ba      	adds	r2, r7, r2
   2742a:	2000      	movs	r0, #0
   2742c:	5610      	ldrsb	r0, [r2, r0]
   2742e:	22c0      	movs	r2, #192	; 0xc0
   27430:	18ba      	adds	r2, r7, r2
   27432:	2102      	movs	r1, #2
   27434:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   27436:	e240      	b.n	278ba <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   27438:	1dfb      	adds	r3, r7, #7
   2743a:	781b      	ldrb	r3, [r3, #0]
   2743c:	2b43      	cmp	r3, #67	; 0x43
   2743e:	d000      	beq.n	27442 <m2m_ip_cb+0xba>
   27440:	e086      	b.n	27550 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   27442:	23b4      	movs	r3, #180	; 0xb4
   27444:	18f9      	adds	r1, r7, r3
   27446:	6838      	ldr	r0, [r7, #0]
   27448:	2300      	movs	r3, #0
   2744a:	220c      	movs	r2, #12
   2744c:	4c72      	ldr	r4, [pc, #456]	; (27618 <m2m_ip_cb+0x290>)
   2744e:	47a0      	blx	r4
   27450:	1e03      	subs	r3, r0, #0
   27452:	d000      	beq.n	27456 <m2m_ip_cb+0xce>
   27454:	e231      	b.n	278ba <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   27456:	23b4      	movs	r3, #180	; 0xb4
   27458:	18fb      	adds	r3, r7, r3
   2745a:	7a5b      	ldrb	r3, [r3, #9]
   2745c:	b25b      	sxtb	r3, r3
   2745e:	2b00      	cmp	r3, #0
   27460:	db4f      	blt.n	27502 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   27462:	23b4      	movs	r3, #180	; 0xb4
   27464:	18fb      	adds	r3, r7, r3
   27466:	7a5b      	ldrb	r3, [r3, #9]
   27468:	b25b      	sxtb	r3, r3
   2746a:	0018      	movs	r0, r3
   2746c:	23b4      	movs	r3, #180	; 0xb4
   2746e:	18fb      	adds	r3, r7, r3
   27470:	7a1b      	ldrb	r3, [r3, #8]
   27472:	b25b      	sxtb	r3, r3
   27474:	4a6a      	ldr	r2, [pc, #424]	; (27620 <m2m_ip_cb+0x298>)
   27476:	011b      	lsls	r3, r3, #4
   27478:	18d3      	adds	r3, r2, r3
   2747a:	330b      	adds	r3, #11
   2747c:	781b      	ldrb	r3, [r3, #0]
   2747e:	b2d9      	uxtb	r1, r3
   27480:	4a67      	ldr	r2, [pc, #412]	; (27620 <m2m_ip_cb+0x298>)
   27482:	0103      	lsls	r3, r0, #4
   27484:	18d3      	adds	r3, r2, r3
   27486:	330b      	adds	r3, #11
   27488:	1c0a      	adds	r2, r1, #0
   2748a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   2748c:	23b4      	movs	r3, #180	; 0xb4
   2748e:	18fb      	adds	r3, r7, r3
   27490:	7a5b      	ldrb	r3, [r3, #9]
   27492:	b25b      	sxtb	r3, r3
   27494:	4a62      	ldr	r2, [pc, #392]	; (27620 <m2m_ip_cb+0x298>)
   27496:	011b      	lsls	r3, r3, #4
   27498:	18d3      	adds	r3, r2, r3
   2749a:	330a      	adds	r3, #10
   2749c:	2201      	movs	r2, #1
   2749e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   274a0:	23b4      	movs	r3, #180	; 0xb4
   274a2:	18fb      	adds	r3, r7, r3
   274a4:	7a5b      	ldrb	r3, [r3, #9]
   274a6:	b25b      	sxtb	r3, r3
   274a8:	0018      	movs	r0, r3
   274aa:	23b4      	movs	r3, #180	; 0xb4
   274ac:	18fb      	adds	r3, r7, r3
   274ae:	895b      	ldrh	r3, [r3, #10]
   274b0:	3b08      	subs	r3, #8
   274b2:	b299      	uxth	r1, r3
   274b4:	4a5a      	ldr	r2, [pc, #360]	; (27620 <m2m_ip_cb+0x298>)
   274b6:	0103      	lsls	r3, r0, #4
   274b8:	18d3      	adds	r3, r2, r3
   274ba:	3308      	adds	r3, #8
   274bc:	1c0a      	adds	r2, r1, #0
   274be:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   274c0:	4b58      	ldr	r3, [pc, #352]	; (27624 <m2m_ip_cb+0x29c>)
   274c2:	881b      	ldrh	r3, [r3, #0]
   274c4:	b29b      	uxth	r3, r3
   274c6:	3301      	adds	r3, #1
   274c8:	b29a      	uxth	r2, r3
   274ca:	4b56      	ldr	r3, [pc, #344]	; (27624 <m2m_ip_cb+0x29c>)
   274cc:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   274ce:	4b55      	ldr	r3, [pc, #340]	; (27624 <m2m_ip_cb+0x29c>)
   274d0:	881b      	ldrh	r3, [r3, #0]
   274d2:	b29b      	uxth	r3, r3
   274d4:	2b00      	cmp	r3, #0
   274d6:	d106      	bne.n	274e6 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   274d8:	4b52      	ldr	r3, [pc, #328]	; (27624 <m2m_ip_cb+0x29c>)
   274da:	881b      	ldrh	r3, [r3, #0]
   274dc:	b29b      	uxth	r3, r3
   274de:	3301      	adds	r3, #1
   274e0:	b29a      	uxth	r2, r3
   274e2:	4b50      	ldr	r3, [pc, #320]	; (27624 <m2m_ip_cb+0x29c>)
   274e4:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   274e6:	23b4      	movs	r3, #180	; 0xb4
   274e8:	18fb      	adds	r3, r7, r3
   274ea:	7a5b      	ldrb	r3, [r3, #9]
   274ec:	b25b      	sxtb	r3, r3
   274ee:	0018      	movs	r0, r3
   274f0:	4b4c      	ldr	r3, [pc, #304]	; (27624 <m2m_ip_cb+0x29c>)
   274f2:	881b      	ldrh	r3, [r3, #0]
   274f4:	b299      	uxth	r1, r3
   274f6:	4a4a      	ldr	r2, [pc, #296]	; (27620 <m2m_ip_cb+0x298>)
   274f8:	0103      	lsls	r3, r0, #4
   274fa:	18d3      	adds	r3, r2, r3
   274fc:	3306      	adds	r3, #6
   274fe:	1c0a      	adds	r2, r1, #0
   27500:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   27502:	23b4      	movs	r3, #180	; 0xb4
   27504:	18fb      	adds	r3, r7, r3
   27506:	2209      	movs	r2, #9
   27508:	569a      	ldrsb	r2, [r3, r2]
   2750a:	23a0      	movs	r3, #160	; 0xa0
   2750c:	18fb      	adds	r3, r7, r3
   2750e:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   27510:	23a0      	movs	r3, #160	; 0xa0
   27512:	18fb      	adds	r3, r7, r3
   27514:	2202      	movs	r2, #2
   27516:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   27518:	23b4      	movs	r3, #180	; 0xb4
   2751a:	18fb      	adds	r3, r7, r3
   2751c:	885a      	ldrh	r2, [r3, #2]
   2751e:	23a0      	movs	r3, #160	; 0xa0
   27520:	18fb      	adds	r3, r7, r3
   27522:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   27524:	23b4      	movs	r3, #180	; 0xb4
   27526:	18fb      	adds	r3, r7, r3
   27528:	685a      	ldr	r2, [r3, #4]
   2752a:	23a0      	movs	r3, #160	; 0xa0
   2752c:	18fb      	adds	r3, r7, r3
   2752e:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   27530:	4b3a      	ldr	r3, [pc, #232]	; (2761c <m2m_ip_cb+0x294>)
   27532:	681b      	ldr	r3, [r3, #0]
   27534:	2b00      	cmp	r3, #0
   27536:	d100      	bne.n	2753a <m2m_ip_cb+0x1b2>
   27538:	e1bf      	b.n	278ba <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   2753a:	4b38      	ldr	r3, [pc, #224]	; (2761c <m2m_ip_cb+0x294>)
   2753c:	681b      	ldr	r3, [r3, #0]
   2753e:	22b4      	movs	r2, #180	; 0xb4
   27540:	18ba      	adds	r2, r7, r2
   27542:	2008      	movs	r0, #8
   27544:	5610      	ldrsb	r0, [r2, r0]
   27546:	22a0      	movs	r2, #160	; 0xa0
   27548:	18ba      	adds	r2, r7, r2
   2754a:	2104      	movs	r1, #4
   2754c:	4798      	blx	r3
}
   2754e:	e1b4      	b.n	278ba <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   27550:	1dfb      	adds	r3, r7, #7
   27552:	781b      	ldrb	r3, [r3, #0]
   27554:	2b44      	cmp	r3, #68	; 0x44
   27556:	d003      	beq.n	27560 <m2m_ip_cb+0x1d8>
   27558:	1dfb      	adds	r3, r7, #7
   2755a:	781b      	ldrb	r3, [r3, #0]
   2755c:	2b4b      	cmp	r3, #75	; 0x4b
   2755e:	d13d      	bne.n	275dc <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   27560:	239c      	movs	r3, #156	; 0x9c
   27562:	18f9      	adds	r1, r7, r3
   27564:	6838      	ldr	r0, [r7, #0]
   27566:	2300      	movs	r3, #0
   27568:	2204      	movs	r2, #4
   2756a:	4c2b      	ldr	r4, [pc, #172]	; (27618 <m2m_ip_cb+0x290>)
   2756c:	47a0      	blx	r4
   2756e:	1e03      	subs	r3, r0, #0
   27570:	d000      	beq.n	27574 <m2m_ip_cb+0x1ec>
   27572:	e19d      	b.n	278b0 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   27574:	239c      	movs	r3, #156	; 0x9c
   27576:	18fb      	adds	r3, r7, r3
   27578:	2200      	movs	r2, #0
   2757a:	569a      	ldrsb	r2, [r3, r2]
   2757c:	2398      	movs	r3, #152	; 0x98
   2757e:	18fb      	adds	r3, r7, r3
   27580:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   27582:	239c      	movs	r3, #156	; 0x9c
   27584:	18fb      	adds	r3, r7, r3
   27586:	2201      	movs	r2, #1
   27588:	569a      	ldrsb	r2, [r3, r2]
   2758a:	2398      	movs	r3, #152	; 0x98
   2758c:	18fb      	adds	r3, r7, r3
   2758e:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   27590:	239c      	movs	r3, #156	; 0x9c
   27592:	18fb      	adds	r3, r7, r3
   27594:	785b      	ldrb	r3, [r3, #1]
   27596:	b25b      	sxtb	r3, r3
   27598:	2b00      	cmp	r3, #0
   2759a:	d10f      	bne.n	275bc <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   2759c:	239c      	movs	r3, #156	; 0x9c
   2759e:	18fb      	adds	r3, r7, r3
   275a0:	781b      	ldrb	r3, [r3, #0]
   275a2:	b25b      	sxtb	r3, r3
   275a4:	0018      	movs	r0, r3
   275a6:	239c      	movs	r3, #156	; 0x9c
   275a8:	18fb      	adds	r3, r7, r3
   275aa:	885b      	ldrh	r3, [r3, #2]
   275ac:	3b08      	subs	r3, #8
   275ae:	b299      	uxth	r1, r3
   275b0:	4a1b      	ldr	r2, [pc, #108]	; (27620 <m2m_ip_cb+0x298>)
   275b2:	0103      	lsls	r3, r0, #4
   275b4:	18d3      	adds	r3, r2, r3
   275b6:	3308      	adds	r3, #8
   275b8:	1c0a      	adds	r2, r1, #0
   275ba:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   275bc:	4b17      	ldr	r3, [pc, #92]	; (2761c <m2m_ip_cb+0x294>)
   275be:	681b      	ldr	r3, [r3, #0]
   275c0:	2b00      	cmp	r3, #0
   275c2:	d100      	bne.n	275c6 <m2m_ip_cb+0x23e>
   275c4:	e174      	b.n	278b0 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   275c6:	4b15      	ldr	r3, [pc, #84]	; (2761c <m2m_ip_cb+0x294>)
   275c8:	681b      	ldr	r3, [r3, #0]
   275ca:	229c      	movs	r2, #156	; 0x9c
   275cc:	18ba      	adds	r2, r7, r2
   275ce:	2000      	movs	r0, #0
   275d0:	5610      	ldrsb	r0, [r2, r0]
   275d2:	2298      	movs	r2, #152	; 0x98
   275d4:	18ba      	adds	r2, r7, r2
   275d6:	2105      	movs	r1, #5
   275d8:	4798      	blx	r3
	{
   275da:	e169      	b.n	278b0 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   275dc:	1dfb      	adds	r3, r7, #7
   275de:	781b      	ldrb	r3, [r3, #0]
   275e0:	2b4a      	cmp	r3, #74	; 0x4a
   275e2:	d123      	bne.n	2762c <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   275e4:	230c      	movs	r3, #12
   275e6:	18f9      	adds	r1, r7, r3
   275e8:	6838      	ldr	r0, [r7, #0]
   275ea:	2300      	movs	r3, #0
   275ec:	2244      	movs	r2, #68	; 0x44
   275ee:	4c0a      	ldr	r4, [pc, #40]	; (27618 <m2m_ip_cb+0x290>)
   275f0:	47a0      	blx	r4
   275f2:	1e03      	subs	r3, r0, #0
   275f4:	d000      	beq.n	275f8 <m2m_ip_cb+0x270>
   275f6:	e160      	b.n	278ba <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   275f8:	4b0b      	ldr	r3, [pc, #44]	; (27628 <m2m_ip_cb+0x2a0>)
   275fa:	681b      	ldr	r3, [r3, #0]
   275fc:	2b00      	cmp	r3, #0
   275fe:	d100      	bne.n	27602 <m2m_ip_cb+0x27a>
   27600:	e15b      	b.n	278ba <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   27602:	4b09      	ldr	r3, [pc, #36]	; (27628 <m2m_ip_cb+0x2a0>)
   27604:	681a      	ldr	r2, [r3, #0]
   27606:	230c      	movs	r3, #12
   27608:	18fb      	adds	r3, r7, r3
   2760a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2760c:	230c      	movs	r3, #12
   2760e:	18fb      	adds	r3, r7, r3
   27610:	0018      	movs	r0, r3
   27612:	4790      	blx	r2
}
   27614:	e151      	b.n	278ba <m2m_ip_cb+0x532>
   27616:	46c0      	nop			; (mov r8, r8)
   27618:	00023b85 	.word	0x00023b85
   2761c:	20005a30 	.word	0x20005a30
   27620:	20005980 	.word	0x20005980
   27624:	20004126 	.word	0x20004126
   27628:	20005a38 	.word	0x20005a38
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   2762c:	1dfb      	adds	r3, r7, #7
   2762e:	781b      	ldrb	r3, [r3, #0]
   27630:	2b46      	cmp	r3, #70	; 0x46
   27632:	d008      	beq.n	27646 <m2m_ip_cb+0x2be>
   27634:	1dfb      	adds	r3, r7, #7
   27636:	781b      	ldrb	r3, [r3, #0]
   27638:	2b48      	cmp	r3, #72	; 0x48
   2763a:	d004      	beq.n	27646 <m2m_ip_cb+0x2be>
   2763c:	1dfb      	adds	r3, r7, #7
   2763e:	781b      	ldrb	r3, [r3, #0]
   27640:	2b4d      	cmp	r3, #77	; 0x4d
   27642:	d000      	beq.n	27646 <m2m_ip_cb+0x2be>
   27644:	e0b4      	b.n	277b0 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   27646:	23df      	movs	r3, #223	; 0xdf
   27648:	18fb      	adds	r3, r7, r3
   2764a:	2206      	movs	r2, #6
   2764c:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   2764e:	1dfb      	adds	r3, r7, #7
   27650:	781b      	ldrb	r3, [r3, #0]
   27652:	2b48      	cmp	r3, #72	; 0x48
   27654:	d103      	bne.n	2765e <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   27656:	23df      	movs	r3, #223	; 0xdf
   27658:	18fb      	adds	r3, r7, r3
   2765a:	2209      	movs	r2, #9
   2765c:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   2765e:	23d8      	movs	r3, #216	; 0xd8
   27660:	18fb      	adds	r3, r7, r3
   27662:	2210      	movs	r2, #16
   27664:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   27666:	23d8      	movs	r3, #216	; 0xd8
   27668:	18fb      	adds	r3, r7, r3
   2766a:	881a      	ldrh	r2, [r3, #0]
   2766c:	2388      	movs	r3, #136	; 0x88
   2766e:	18f9      	adds	r1, r7, r3
   27670:	6838      	ldr	r0, [r7, #0]
   27672:	2300      	movs	r3, #0
   27674:	4c93      	ldr	r4, [pc, #588]	; (278c4 <m2m_ip_cb+0x53c>)
   27676:	47a0      	blx	r4
   27678:	1e03      	subs	r3, r0, #0
   2767a:	d000      	beq.n	2767e <m2m_ip_cb+0x2f6>
   2767c:	e11a      	b.n	278b4 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2767e:	23d6      	movs	r3, #214	; 0xd6
   27680:	18fb      	adds	r3, r7, r3
   27682:	2200      	movs	r2, #0
   27684:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   27686:	23d5      	movs	r3, #213	; 0xd5
   27688:	18fb      	adds	r3, r7, r3
   2768a:	2288      	movs	r2, #136	; 0x88
   2768c:	18ba      	adds	r2, r7, r2
   2768e:	7b12      	ldrb	r2, [r2, #12]
   27690:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   27692:	23d6      	movs	r3, #214	; 0xd6
   27694:	18fb      	adds	r3, r7, r3
   27696:	2288      	movs	r2, #136	; 0x88
   27698:	18ba      	adds	r2, r7, r2
   2769a:	89d2      	ldrh	r2, [r2, #14]
   2769c:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2769e:	23d5      	movs	r3, #213	; 0xd5
   276a0:	18fb      	adds	r3, r7, r3
   276a2:	781b      	ldrb	r3, [r3, #0]
   276a4:	b25b      	sxtb	r3, r3
   276a6:	4a88      	ldr	r2, [pc, #544]	; (278c8 <m2m_ip_cb+0x540>)
   276a8:	011b      	lsls	r3, r3, #4
   276aa:	18d3      	adds	r3, r2, r3
   276ac:	330c      	adds	r3, #12
   276ae:	2200      	movs	r2, #0
   276b0:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   276b2:	23d2      	movs	r3, #210	; 0xd2
   276b4:	18fb      	adds	r3, r7, r3
   276b6:	2288      	movs	r2, #136	; 0x88
   276b8:	18ba      	adds	r2, r7, r2
   276ba:	8912      	ldrh	r2, [r2, #8]
   276bc:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   276be:	23d0      	movs	r3, #208	; 0xd0
   276c0:	18fb      	adds	r3, r7, r3
   276c2:	2288      	movs	r2, #136	; 0x88
   276c4:	18ba      	adds	r2, r7, r2
   276c6:	8952      	ldrh	r2, [r2, #10]
   276c8:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   276ca:	2388      	movs	r3, #136	; 0x88
   276cc:	18fb      	adds	r3, r7, r3
   276ce:	885a      	ldrh	r2, [r3, #2]
   276d0:	2370      	movs	r3, #112	; 0x70
   276d2:	18fb      	adds	r3, r7, r3
   276d4:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   276d6:	2388      	movs	r3, #136	; 0x88
   276d8:	18fb      	adds	r3, r7, r3
   276da:	685a      	ldr	r2, [r3, #4]
   276dc:	2370      	movs	r3, #112	; 0x70
   276de:	18fb      	adds	r3, r7, r3
   276e0:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   276e2:	23d5      	movs	r3, #213	; 0xd5
   276e4:	18fb      	adds	r3, r7, r3
   276e6:	781b      	ldrb	r3, [r3, #0]
   276e8:	b25b      	sxtb	r3, r3
   276ea:	4a77      	ldr	r2, [pc, #476]	; (278c8 <m2m_ip_cb+0x540>)
   276ec:	011b      	lsls	r3, r3, #4
   276ee:	18d3      	adds	r3, r2, r3
   276f0:	3306      	adds	r3, #6
   276f2:	881b      	ldrh	r3, [r3, #0]
   276f4:	b29b      	uxth	r3, r3
   276f6:	22d6      	movs	r2, #214	; 0xd6
   276f8:	18ba      	adds	r2, r7, r2
   276fa:	8812      	ldrh	r2, [r2, #0]
   276fc:	429a      	cmp	r2, r3
   276fe:	d148      	bne.n	27792 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   27700:	23d2      	movs	r3, #210	; 0xd2
   27702:	18fb      	adds	r3, r7, r3
   27704:	2200      	movs	r2, #0
   27706:	5e9b      	ldrsh	r3, [r3, r2]
   27708:	2b00      	cmp	r3, #0
   2770a:	dd25      	ble.n	27758 <m2m_ip_cb+0x3d0>
   2770c:	23d2      	movs	r3, #210	; 0xd2
   2770e:	18fb      	adds	r3, r7, r3
   27710:	2200      	movs	r2, #0
   27712:	5e9a      	ldrsh	r2, [r3, r2]
   27714:	1d3b      	adds	r3, r7, #4
   27716:	881b      	ldrh	r3, [r3, #0]
   27718:	429a      	cmp	r2, r3
   2771a:	da1d      	bge.n	27758 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   2771c:	23d0      	movs	r3, #208	; 0xd0
   2771e:	18fb      	adds	r3, r7, r3
   27720:	881b      	ldrh	r3, [r3, #0]
   27722:	683a      	ldr	r2, [r7, #0]
   27724:	18d3      	adds	r3, r2, r3
   27726:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   27728:	23d8      	movs	r3, #216	; 0xd8
   2772a:	18fb      	adds	r3, r7, r3
   2772c:	22d2      	movs	r2, #210	; 0xd2
   2772e:	18ba      	adds	r2, r7, r2
   27730:	8812      	ldrh	r2, [r2, #0]
   27732:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   27734:	683c      	ldr	r4, [r7, #0]
   27736:	23df      	movs	r3, #223	; 0xdf
   27738:	18fb      	adds	r3, r7, r3
   2773a:	781a      	ldrb	r2, [r3, #0]
   2773c:	2370      	movs	r3, #112	; 0x70
   2773e:	18f9      	adds	r1, r7, r3
   27740:	23d5      	movs	r3, #213	; 0xd5
   27742:	18fb      	adds	r3, r7, r3
   27744:	2000      	movs	r0, #0
   27746:	5618      	ldrsb	r0, [r3, r0]
   27748:	23d8      	movs	r3, #216	; 0xd8
   2774a:	18fb      	adds	r3, r7, r3
   2774c:	881b      	ldrh	r3, [r3, #0]
   2774e:	9300      	str	r3, [sp, #0]
   27750:	0023      	movs	r3, r4
   27752:	4c5e      	ldr	r4, [pc, #376]	; (278cc <m2m_ip_cb+0x544>)
   27754:	47a0      	blx	r4
	{
   27756:	e0ad      	b.n	278b4 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   27758:	2370      	movs	r3, #112	; 0x70
   2775a:	18fb      	adds	r3, r7, r3
   2775c:	22d2      	movs	r2, #210	; 0xd2
   2775e:	18ba      	adds	r2, r7, r2
   27760:	8812      	ldrh	r2, [r2, #0]
   27762:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   27764:	2370      	movs	r3, #112	; 0x70
   27766:	18fb      	adds	r3, r7, r3
   27768:	2200      	movs	r2, #0
   2776a:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   2776c:	4b58      	ldr	r3, [pc, #352]	; (278d0 <m2m_ip_cb+0x548>)
   2776e:	681b      	ldr	r3, [r3, #0]
   27770:	2b00      	cmp	r3, #0
   27772:	d100      	bne.n	27776 <m2m_ip_cb+0x3ee>
   27774:	e09e      	b.n	278b4 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   27776:	4b56      	ldr	r3, [pc, #344]	; (278d0 <m2m_ip_cb+0x548>)
   27778:	681b      	ldr	r3, [r3, #0]
   2777a:	2270      	movs	r2, #112	; 0x70
   2777c:	18bc      	adds	r4, r7, r2
   2777e:	22df      	movs	r2, #223	; 0xdf
   27780:	18ba      	adds	r2, r7, r2
   27782:	7811      	ldrb	r1, [r2, #0]
   27784:	22d5      	movs	r2, #213	; 0xd5
   27786:	18ba      	adds	r2, r7, r2
   27788:	2000      	movs	r0, #0
   2778a:	5610      	ldrsb	r0, [r2, r0]
   2778c:	0022      	movs	r2, r4
   2778e:	4798      	blx	r3
	{
   27790:	e090      	b.n	278b4 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   27792:	23d8      	movs	r3, #216	; 0xd8
   27794:	18fa      	adds	r2, r7, r3
   27796:	1d3b      	adds	r3, r7, #4
   27798:	8812      	ldrh	r2, [r2, #0]
   2779a:	881b      	ldrh	r3, [r3, #0]
   2779c:	429a      	cmp	r2, r3
   2779e:	d300      	bcc.n	277a2 <m2m_ip_cb+0x41a>
   277a0:	e088      	b.n	278b4 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   277a2:	2301      	movs	r3, #1
   277a4:	2200      	movs	r2, #0
   277a6:	2100      	movs	r1, #0
   277a8:	2000      	movs	r0, #0
   277aa:	4c46      	ldr	r4, [pc, #280]	; (278c4 <m2m_ip_cb+0x53c>)
   277ac:	47a0      	blx	r4
	{
   277ae:	e081      	b.n	278b4 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   277b0:	1dfb      	adds	r3, r7, #7
   277b2:	781b      	ldrb	r3, [r3, #0]
   277b4:	2b45      	cmp	r3, #69	; 0x45
   277b6:	d007      	beq.n	277c8 <m2m_ip_cb+0x440>
   277b8:	1dfb      	adds	r3, r7, #7
   277ba:	781b      	ldrb	r3, [r3, #0]
   277bc:	2b47      	cmp	r3, #71	; 0x47
   277be:	d003      	beq.n	277c8 <m2m_ip_cb+0x440>
   277c0:	1dfb      	adds	r3, r7, #7
   277c2:	781b      	ldrb	r3, [r3, #0]
   277c4:	2b4c      	cmp	r3, #76	; 0x4c
   277c6:	d14c      	bne.n	27862 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   277c8:	23de      	movs	r3, #222	; 0xde
   277ca:	18fb      	adds	r3, r7, r3
   277cc:	2207      	movs	r2, #7
   277ce:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   277d0:	1dfb      	adds	r3, r7, #7
   277d2:	781b      	ldrb	r3, [r3, #0]
   277d4:	2b47      	cmp	r3, #71	; 0x47
   277d6:	d103      	bne.n	277e0 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   277d8:	23de      	movs	r3, #222	; 0xde
   277da:	18fb      	adds	r3, r7, r3
   277dc:	2208      	movs	r2, #8
   277de:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   277e0:	2364      	movs	r3, #100	; 0x64
   277e2:	18f9      	adds	r1, r7, r3
   277e4:	6838      	ldr	r0, [r7, #0]
   277e6:	2300      	movs	r3, #0
   277e8:	2208      	movs	r2, #8
   277ea:	4c36      	ldr	r4, [pc, #216]	; (278c4 <m2m_ip_cb+0x53c>)
   277ec:	47a0      	blx	r4
   277ee:	1e03      	subs	r3, r0, #0
   277f0:	d162      	bne.n	278b8 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   277f2:	23dc      	movs	r3, #220	; 0xdc
   277f4:	18fb      	adds	r3, r7, r3
   277f6:	2200      	movs	r2, #0
   277f8:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   277fa:	23db      	movs	r3, #219	; 0xdb
   277fc:	18fb      	adds	r3, r7, r3
   277fe:	2264      	movs	r2, #100	; 0x64
   27800:	18ba      	adds	r2, r7, r2
   27802:	7812      	ldrb	r2, [r2, #0]
   27804:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   27806:	23dc      	movs	r3, #220	; 0xdc
   27808:	18fb      	adds	r3, r7, r3
   2780a:	2264      	movs	r2, #100	; 0x64
   2780c:	18ba      	adds	r2, r7, r2
   2780e:	8892      	ldrh	r2, [r2, #4]
   27810:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   27812:	2364      	movs	r3, #100	; 0x64
   27814:	18fb      	adds	r3, r7, r3
   27816:	2202      	movs	r2, #2
   27818:	5e9a      	ldrsh	r2, [r3, r2]
   2781a:	236e      	movs	r3, #110	; 0x6e
   2781c:	18fb      	adds	r3, r7, r3
   2781e:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   27820:	23db      	movs	r3, #219	; 0xdb
   27822:	18fb      	adds	r3, r7, r3
   27824:	781b      	ldrb	r3, [r3, #0]
   27826:	b25b      	sxtb	r3, r3
   27828:	4a27      	ldr	r2, [pc, #156]	; (278c8 <m2m_ip_cb+0x540>)
   2782a:	011b      	lsls	r3, r3, #4
   2782c:	18d3      	adds	r3, r2, r3
   2782e:	3306      	adds	r3, #6
   27830:	881b      	ldrh	r3, [r3, #0]
   27832:	b29b      	uxth	r3, r3
   27834:	22dc      	movs	r2, #220	; 0xdc
   27836:	18ba      	adds	r2, r7, r2
   27838:	8812      	ldrh	r2, [r2, #0]
   2783a:	429a      	cmp	r2, r3
   2783c:	d13c      	bne.n	278b8 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   2783e:	4b24      	ldr	r3, [pc, #144]	; (278d0 <m2m_ip_cb+0x548>)
   27840:	681b      	ldr	r3, [r3, #0]
   27842:	2b00      	cmp	r3, #0
   27844:	d038      	beq.n	278b8 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   27846:	4b22      	ldr	r3, [pc, #136]	; (278d0 <m2m_ip_cb+0x548>)
   27848:	681b      	ldr	r3, [r3, #0]
   2784a:	226e      	movs	r2, #110	; 0x6e
   2784c:	18bc      	adds	r4, r7, r2
   2784e:	22de      	movs	r2, #222	; 0xde
   27850:	18ba      	adds	r2, r7, r2
   27852:	7811      	ldrb	r1, [r2, #0]
   27854:	22db      	movs	r2, #219	; 0xdb
   27856:	18ba      	adds	r2, r7, r2
   27858:	2000      	movs	r0, #0
   2785a:	5610      	ldrsb	r0, [r2, r0]
   2785c:	0022      	movs	r2, r4
   2785e:	4798      	blx	r3
	{
   27860:	e02a      	b.n	278b8 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   27862:	1dfb      	adds	r3, r7, #7
   27864:	781b      	ldrb	r3, [r3, #0]
   27866:	2b52      	cmp	r3, #82	; 0x52
   27868:	d127      	bne.n	278ba <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   2786a:	2350      	movs	r3, #80	; 0x50
   2786c:	18f9      	adds	r1, r7, r3
   2786e:	6838      	ldr	r0, [r7, #0]
   27870:	2301      	movs	r3, #1
   27872:	2214      	movs	r2, #20
   27874:	4c13      	ldr	r4, [pc, #76]	; (278c4 <m2m_ip_cb+0x53c>)
   27876:	47a0      	blx	r4
   27878:	1e03      	subs	r3, r0, #0
   2787a:	d11e      	bne.n	278ba <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   2787c:	2350      	movs	r3, #80	; 0x50
   2787e:	18fb      	adds	r3, r7, r3
   27880:	685b      	ldr	r3, [r3, #4]
   27882:	001a      	movs	r2, r3
   27884:	4b13      	ldr	r3, [pc, #76]	; (278d4 <m2m_ip_cb+0x54c>)
   27886:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   27888:	4b12      	ldr	r3, [pc, #72]	; (278d4 <m2m_ip_cb+0x54c>)
   2788a:	681b      	ldr	r3, [r3, #0]
   2788c:	2b00      	cmp	r3, #0
   2788e:	d014      	beq.n	278ba <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   27890:	4b10      	ldr	r3, [pc, #64]	; (278d4 <m2m_ip_cb+0x54c>)
   27892:	681c      	ldr	r4, [r3, #0]
   27894:	2350      	movs	r3, #80	; 0x50
   27896:	18fb      	adds	r3, r7, r3
   27898:	6818      	ldr	r0, [r3, #0]
   2789a:	2350      	movs	r3, #80	; 0x50
   2789c:	18fb      	adds	r3, r7, r3
   2789e:	6899      	ldr	r1, [r3, #8]
   278a0:	2350      	movs	r3, #80	; 0x50
   278a2:	18fb      	adds	r3, r7, r3
   278a4:	7c1b      	ldrb	r3, [r3, #16]
   278a6:	001a      	movs	r2, r3
   278a8:	47a0      	blx	r4
}
   278aa:	e006      	b.n	278ba <m2m_ip_cb+0x532>
	{
   278ac:	46c0      	nop			; (mov r8, r8)
   278ae:	e004      	b.n	278ba <m2m_ip_cb+0x532>
	{
   278b0:	46c0      	nop			; (mov r8, r8)
   278b2:	e002      	b.n	278ba <m2m_ip_cb+0x532>
	{
   278b4:	46c0      	nop			; (mov r8, r8)
   278b6:	e000      	b.n	278ba <m2m_ip_cb+0x532>
	{
   278b8:	46c0      	nop			; (mov r8, r8)
}
   278ba:	46c0      	nop			; (mov r8, r8)
   278bc:	46bd      	mov	sp, r7
   278be:	b039      	add	sp, #228	; 0xe4
   278c0:	bd90      	pop	{r4, r7, pc}
   278c2:	46c0      	nop			; (mov r8, r8)
   278c4:	00023b85 	.word	0x00023b85
   278c8:	20005980 	.word	0x20005980
   278cc:	0002718d 	.word	0x0002718d
   278d0:	20005a30 	.word	0x20005a30
   278d4:	20005a34 	.word	0x20005a34

000278d8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   278d8:	b580      	push	{r7, lr}
   278da:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   278dc:	4b0c      	ldr	r3, [pc, #48]	; (27910 <socketInit+0x38>)
   278de:	781b      	ldrb	r3, [r3, #0]
   278e0:	b2db      	uxtb	r3, r3
   278e2:	2b00      	cmp	r3, #0
   278e4:	d110      	bne.n	27908 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   278e6:	4b0b      	ldr	r3, [pc, #44]	; (27914 <socketInit+0x3c>)
   278e8:	22b0      	movs	r2, #176	; 0xb0
   278ea:	2100      	movs	r1, #0
   278ec:	0018      	movs	r0, r3
   278ee:	4b0a      	ldr	r3, [pc, #40]	; (27918 <socketInit+0x40>)
   278f0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   278f2:	4b0a      	ldr	r3, [pc, #40]	; (2791c <socketInit+0x44>)
   278f4:	0019      	movs	r1, r3
   278f6:	2002      	movs	r0, #2
   278f8:	4b09      	ldr	r3, [pc, #36]	; (27920 <socketInit+0x48>)
   278fa:	4798      	blx	r3
		gbSocketInit	= 1;
   278fc:	4b04      	ldr	r3, [pc, #16]	; (27910 <socketInit+0x38>)
   278fe:	2201      	movs	r2, #1
   27900:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   27902:	4b08      	ldr	r3, [pc, #32]	; (27924 <socketInit+0x4c>)
   27904:	2200      	movs	r2, #0
   27906:	801a      	strh	r2, [r3, #0]
	}
}
   27908:	46c0      	nop			; (mov r8, r8)
   2790a:	46bd      	mov	sp, r7
   2790c:	bd80      	pop	{r7, pc}
   2790e:	46c0      	nop			; (mov r8, r8)
   27910:	20004128 	.word	0x20004128
   27914:	20005980 	.word	0x20005980
   27918:	00023009 	.word	0x00023009
   2791c:	00027389 	.word	0x00027389
   27920:	00023d05 	.word	0x00023d05
   27924:	20004126 	.word	0x20004126

00027928 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   27928:	b580      	push	{r7, lr}
   2792a:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2792c:	4b0a      	ldr	r3, [pc, #40]	; (27958 <socketDeinit+0x30>)
   2792e:	22b0      	movs	r2, #176	; 0xb0
   27930:	2100      	movs	r1, #0
   27932:	0018      	movs	r0, r3
   27934:	4b09      	ldr	r3, [pc, #36]	; (2795c <socketDeinit+0x34>)
   27936:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   27938:	2100      	movs	r1, #0
   2793a:	2002      	movs	r0, #2
   2793c:	4b08      	ldr	r3, [pc, #32]	; (27960 <socketDeinit+0x38>)
   2793e:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   27940:	4b08      	ldr	r3, [pc, #32]	; (27964 <socketDeinit+0x3c>)
   27942:	2200      	movs	r2, #0
   27944:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   27946:	4b08      	ldr	r3, [pc, #32]	; (27968 <socketDeinit+0x40>)
   27948:	2200      	movs	r2, #0
   2794a:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   2794c:	4b07      	ldr	r3, [pc, #28]	; (2796c <socketDeinit+0x44>)
   2794e:	2200      	movs	r2, #0
   27950:	701a      	strb	r2, [r3, #0]
}
   27952:	46c0      	nop			; (mov r8, r8)
   27954:	46bd      	mov	sp, r7
   27956:	bd80      	pop	{r7, pc}
   27958:	20005980 	.word	0x20005980
   2795c:	00023009 	.word	0x00023009
   27960:	00023d05 	.word	0x00023d05
   27964:	20005a30 	.word	0x20005a30
   27968:	20005a38 	.word	0x20005a38
   2796c:	20004128 	.word	0x20004128

00027970 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   27970:	b580      	push	{r7, lr}
   27972:	b082      	sub	sp, #8
   27974:	af00      	add	r7, sp, #0
   27976:	6078      	str	r0, [r7, #4]
   27978:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   2797a:	4b05      	ldr	r3, [pc, #20]	; (27990 <registerSocketCallback+0x20>)
   2797c:	687a      	ldr	r2, [r7, #4]
   2797e:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   27980:	4b04      	ldr	r3, [pc, #16]	; (27994 <registerSocketCallback+0x24>)
   27982:	683a      	ldr	r2, [r7, #0]
   27984:	601a      	str	r2, [r3, #0]
}
   27986:	46c0      	nop			; (mov r8, r8)
   27988:	46bd      	mov	sp, r7
   2798a:	b002      	add	sp, #8
   2798c:	bd80      	pop	{r7, pc}
   2798e:	46c0      	nop			; (mov r8, r8)
   27990:	20005a30 	.word	0x20005a30
   27994:	20005a38 	.word	0x20005a38

00027998 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   27998:	b590      	push	{r4, r7, lr}
   2799a:	b08d      	sub	sp, #52	; 0x34
   2799c:	af04      	add	r7, sp, #16
   2799e:	0004      	movs	r4, r0
   279a0:	0008      	movs	r0, r1
   279a2:	0011      	movs	r1, r2
   279a4:	1dbb      	adds	r3, r7, #6
   279a6:	1c22      	adds	r2, r4, #0
   279a8:	801a      	strh	r2, [r3, #0]
   279aa:	1d7b      	adds	r3, r7, #5
   279ac:	1c02      	adds	r2, r0, #0
   279ae:	701a      	strb	r2, [r3, #0]
   279b0:	1d3b      	adds	r3, r7, #4
   279b2:	1c0a      	adds	r2, r1, #0
   279b4:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   279b6:	231f      	movs	r3, #31
   279b8:	18fb      	adds	r3, r7, r3
   279ba:	22ff      	movs	r2, #255	; 0xff
   279bc:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   279be:	1dbb      	adds	r3, r7, #6
   279c0:	881b      	ldrh	r3, [r3, #0]
   279c2:	2b02      	cmp	r3, #2
   279c4:	d000      	beq.n	279c8 <socket+0x30>
   279c6:	e0ce      	b.n	27b66 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   279c8:	1d7b      	adds	r3, r7, #5
   279ca:	781b      	ldrb	r3, [r3, #0]
   279cc:	2b01      	cmp	r3, #1
   279ce:	d135      	bne.n	27a3c <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   279d0:	231e      	movs	r3, #30
   279d2:	18fb      	adds	r3, r7, r3
   279d4:	2200      	movs	r2, #0
   279d6:	701a      	strb	r2, [r3, #0]
   279d8:	e02a      	b.n	27a30 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   279da:	2317      	movs	r3, #23
   279dc:	18fb      	adds	r3, r7, r3
   279de:	4a66      	ldr	r2, [pc, #408]	; (27b78 <socket+0x1e0>)
   279e0:	7812      	ldrb	r2, [r2, #0]
   279e2:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   279e4:	4b64      	ldr	r3, [pc, #400]	; (27b78 <socket+0x1e0>)
   279e6:	781b      	ldrb	r3, [r3, #0]
   279e8:	b2db      	uxtb	r3, r3
   279ea:	011a      	lsls	r2, r3, #4
   279ec:	4b63      	ldr	r3, [pc, #396]	; (27b7c <socket+0x1e4>)
   279ee:	18d3      	adds	r3, r2, r3
   279f0:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   279f2:	4b61      	ldr	r3, [pc, #388]	; (27b78 <socket+0x1e0>)
   279f4:	781b      	ldrb	r3, [r3, #0]
   279f6:	b2db      	uxtb	r3, r3
   279f8:	1c5a      	adds	r2, r3, #1
   279fa:	4b61      	ldr	r3, [pc, #388]	; (27b80 <socket+0x1e8>)
   279fc:	2107      	movs	r1, #7
   279fe:	0010      	movs	r0, r2
   27a00:	4798      	blx	r3
   27a02:	000b      	movs	r3, r1
   27a04:	b2da      	uxtb	r2, r3
   27a06:	4b5c      	ldr	r3, [pc, #368]	; (27b78 <socket+0x1e0>)
   27a08:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   27a0a:	69bb      	ldr	r3, [r7, #24]
   27a0c:	7a9b      	ldrb	r3, [r3, #10]
   27a0e:	b2db      	uxtb	r3, r3
   27a10:	2b00      	cmp	r3, #0
   27a12:	d106      	bne.n	27a22 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   27a14:	231f      	movs	r3, #31
   27a16:	18fb      	adds	r3, r7, r3
   27a18:	2217      	movs	r2, #23
   27a1a:	18ba      	adds	r2, r7, r2
   27a1c:	7812      	ldrb	r2, [r2, #0]
   27a1e:	701a      	strb	r2, [r3, #0]
					break;
   27a20:	e04c      	b.n	27abc <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   27a22:	231e      	movs	r3, #30
   27a24:	18fb      	adds	r3, r7, r3
   27a26:	781a      	ldrb	r2, [r3, #0]
   27a28:	231e      	movs	r3, #30
   27a2a:	18fb      	adds	r3, r7, r3
   27a2c:	3201      	adds	r2, #1
   27a2e:	701a      	strb	r2, [r3, #0]
   27a30:	231e      	movs	r3, #30
   27a32:	18fb      	adds	r3, r7, r3
   27a34:	781b      	ldrb	r3, [r3, #0]
   27a36:	2b06      	cmp	r3, #6
   27a38:	d9cf      	bls.n	279da <socket+0x42>
   27a3a:	e03f      	b.n	27abc <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   27a3c:	1d7b      	adds	r3, r7, #5
   27a3e:	781b      	ldrb	r3, [r3, #0]
   27a40:	2b02      	cmp	r3, #2
   27a42:	d13b      	bne.n	27abc <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   27a44:	4b4f      	ldr	r3, [pc, #316]	; (27b84 <socket+0x1ec>)
   27a46:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   27a48:	231e      	movs	r3, #30
   27a4a:	18fb      	adds	r3, r7, r3
   27a4c:	2200      	movs	r2, #0
   27a4e:	701a      	strb	r2, [r3, #0]
   27a50:	e02f      	b.n	27ab2 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   27a52:	2317      	movs	r3, #23
   27a54:	18fb      	adds	r3, r7, r3
   27a56:	4a4c      	ldr	r2, [pc, #304]	; (27b88 <socket+0x1f0>)
   27a58:	7812      	ldrb	r2, [r2, #0]
   27a5a:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   27a5c:	4b4a      	ldr	r3, [pc, #296]	; (27b88 <socket+0x1f0>)
   27a5e:	781b      	ldrb	r3, [r3, #0]
   27a60:	b2db      	uxtb	r3, r3
   27a62:	011b      	lsls	r3, r3, #4
   27a64:	693a      	ldr	r2, [r7, #16]
   27a66:	18d3      	adds	r3, r2, r3
   27a68:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   27a6a:	4b47      	ldr	r3, [pc, #284]	; (27b88 <socket+0x1f0>)
   27a6c:	781b      	ldrb	r3, [r3, #0]
   27a6e:	b2db      	uxtb	r3, r3
   27a70:	3301      	adds	r3, #1
   27a72:	4a46      	ldr	r2, [pc, #280]	; (27b8c <socket+0x1f4>)
   27a74:	4013      	ands	r3, r2
   27a76:	d504      	bpl.n	27a82 <socket+0xea>
   27a78:	3b01      	subs	r3, #1
   27a7a:	2204      	movs	r2, #4
   27a7c:	4252      	negs	r2, r2
   27a7e:	4313      	orrs	r3, r2
   27a80:	3301      	adds	r3, #1
   27a82:	b2da      	uxtb	r2, r3
   27a84:	4b40      	ldr	r3, [pc, #256]	; (27b88 <socket+0x1f0>)
   27a86:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   27a88:	69bb      	ldr	r3, [r7, #24]
   27a8a:	7a9b      	ldrb	r3, [r3, #10]
   27a8c:	b2db      	uxtb	r3, r3
   27a8e:	2b00      	cmp	r3, #0
   27a90:	d108      	bne.n	27aa4 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   27a92:	2317      	movs	r3, #23
   27a94:	18fb      	adds	r3, r7, r3
   27a96:	781b      	ldrb	r3, [r3, #0]
   27a98:	3307      	adds	r3, #7
   27a9a:	b2da      	uxtb	r2, r3
   27a9c:	231f      	movs	r3, #31
   27a9e:	18fb      	adds	r3, r7, r3
   27aa0:	701a      	strb	r2, [r3, #0]
					break;
   27aa2:	e00b      	b.n	27abc <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   27aa4:	231e      	movs	r3, #30
   27aa6:	18fb      	adds	r3, r7, r3
   27aa8:	781a      	ldrb	r2, [r3, #0]
   27aaa:	231e      	movs	r3, #30
   27aac:	18fb      	adds	r3, r7, r3
   27aae:	3201      	adds	r2, #1
   27ab0:	701a      	strb	r2, [r3, #0]
   27ab2:	231e      	movs	r3, #30
   27ab4:	18fb      	adds	r3, r7, r3
   27ab6:	781b      	ldrb	r3, [r3, #0]
   27ab8:	2b03      	cmp	r3, #3
   27aba:	d9ca      	bls.n	27a52 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   27abc:	231f      	movs	r3, #31
   27abe:	18fb      	adds	r3, r7, r3
   27ac0:	781b      	ldrb	r3, [r3, #0]
   27ac2:	2b7f      	cmp	r3, #127	; 0x7f
   27ac4:	d84f      	bhi.n	27b66 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   27ac6:	69bb      	ldr	r3, [r7, #24]
   27ac8:	2210      	movs	r2, #16
   27aca:	2100      	movs	r1, #0
   27acc:	0018      	movs	r0, r3
   27ace:	4b30      	ldr	r3, [pc, #192]	; (27b90 <socket+0x1f8>)
   27ad0:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   27ad2:	69bb      	ldr	r3, [r7, #24]
   27ad4:	2201      	movs	r2, #1
   27ad6:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   27ad8:	4b2e      	ldr	r3, [pc, #184]	; (27b94 <socket+0x1fc>)
   27ada:	881b      	ldrh	r3, [r3, #0]
   27adc:	b29b      	uxth	r3, r3
   27ade:	3301      	adds	r3, #1
   27ae0:	b29a      	uxth	r2, r3
   27ae2:	4b2c      	ldr	r3, [pc, #176]	; (27b94 <socket+0x1fc>)
   27ae4:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   27ae6:	4b2b      	ldr	r3, [pc, #172]	; (27b94 <socket+0x1fc>)
   27ae8:	881b      	ldrh	r3, [r3, #0]
   27aea:	b29b      	uxth	r3, r3
   27aec:	2b00      	cmp	r3, #0
   27aee:	d106      	bne.n	27afe <socket+0x166>
				++gu16SessionID;
   27af0:	4b28      	ldr	r3, [pc, #160]	; (27b94 <socket+0x1fc>)
   27af2:	881b      	ldrh	r3, [r3, #0]
   27af4:	b29b      	uxth	r3, r3
   27af6:	3301      	adds	r3, #1
   27af8:	b29a      	uxth	r2, r3
   27afa:	4b26      	ldr	r3, [pc, #152]	; (27b94 <socket+0x1fc>)
   27afc:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   27afe:	4b25      	ldr	r3, [pc, #148]	; (27b94 <socket+0x1fc>)
   27b00:	881b      	ldrh	r3, [r3, #0]
   27b02:	b29a      	uxth	r2, r3
   27b04:	69bb      	ldr	r3, [r7, #24]
   27b06:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   27b08:	4b23      	ldr	r3, [pc, #140]	; (27b98 <socket+0x200>)
   27b0a:	0018      	movs	r0, r3
   27b0c:	4b23      	ldr	r3, [pc, #140]	; (27b9c <socket+0x204>)
   27b0e:	4798      	blx	r3
   27b10:	231f      	movs	r3, #31
   27b12:	18fb      	adds	r3, r7, r3
   27b14:	2100      	movs	r1, #0
   27b16:	5659      	ldrsb	r1, [r3, r1]
   27b18:	4b1e      	ldr	r3, [pc, #120]	; (27b94 <socket+0x1fc>)
   27b1a:	881b      	ldrh	r3, [r3, #0]
   27b1c:	b29b      	uxth	r3, r3
   27b1e:	001a      	movs	r2, r3
   27b20:	4b1f      	ldr	r3, [pc, #124]	; (27ba0 <socket+0x208>)
   27b22:	0018      	movs	r0, r3
   27b24:	4b1d      	ldr	r3, [pc, #116]	; (27b9c <socket+0x204>)
   27b26:	4798      	blx	r3
   27b28:	4b1e      	ldr	r3, [pc, #120]	; (27ba4 <socket+0x20c>)
   27b2a:	0018      	movs	r0, r3
   27b2c:	4b1b      	ldr	r3, [pc, #108]	; (27b9c <socket+0x204>)
   27b2e:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   27b30:	1d3b      	adds	r3, r7, #4
   27b32:	781b      	ldrb	r3, [r3, #0]
   27b34:	2201      	movs	r2, #1
   27b36:	4013      	ands	r3, r2
   27b38:	d015      	beq.n	27b66 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   27b3a:	230c      	movs	r3, #12
   27b3c:	18fb      	adds	r3, r7, r3
   27b3e:	221f      	movs	r2, #31
   27b40:	18ba      	adds	r2, r7, r2
   27b42:	7812      	ldrb	r2, [r2, #0]
   27b44:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   27b46:	69bb      	ldr	r3, [r7, #24]
   27b48:	2221      	movs	r2, #33	; 0x21
   27b4a:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   27b4c:	230c      	movs	r3, #12
   27b4e:	18fa      	adds	r2, r7, r3
   27b50:	2300      	movs	r3, #0
   27b52:	9302      	str	r3, [sp, #8]
   27b54:	2300      	movs	r3, #0
   27b56:	9301      	str	r3, [sp, #4]
   27b58:	2300      	movs	r3, #0
   27b5a:	9300      	str	r3, [sp, #0]
   27b5c:	2304      	movs	r3, #4
   27b5e:	2150      	movs	r1, #80	; 0x50
   27b60:	2002      	movs	r0, #2
   27b62:	4c11      	ldr	r4, [pc, #68]	; (27ba8 <socket+0x210>)
   27b64:	47a0      	blx	r4
			}
		}
	}
	return sock;
   27b66:	231f      	movs	r3, #31
   27b68:	18fb      	adds	r3, r7, r3
   27b6a:	781b      	ldrb	r3, [r3, #0]
   27b6c:	b25b      	sxtb	r3, r3
}
   27b6e:	0018      	movs	r0, r3
   27b70:	46bd      	mov	sp, r7
   27b72:	b009      	add	sp, #36	; 0x24
   27b74:	bd90      	pop	{r4, r7, pc}
   27b76:	46c0      	nop			; (mov r8, r8)
   27b78:	20004129 	.word	0x20004129
   27b7c:	20005980 	.word	0x20005980
   27b80:	00035115 	.word	0x00035115
   27b84:	200059f0 	.word	0x200059f0
   27b88:	2000412a 	.word	0x2000412a
   27b8c:	80000003 	.word	0x80000003
   27b90:	00023009 	.word	0x00023009
   27b94:	20004126 	.word	0x20004126
   27b98:	0003c6d4 	.word	0x0003c6d4
   27b9c:	00020349 	.word	0x00020349
   27ba0:	0003c6f8 	.word	0x0003c6f8
   27ba4:	0003c6f4 	.word	0x0003c6f4
   27ba8:	00023269 	.word	0x00023269

00027bac <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   27bac:	b5b0      	push	{r4, r5, r7, lr}
   27bae:	b08a      	sub	sp, #40	; 0x28
   27bb0:	af04      	add	r7, sp, #16
   27bb2:	6039      	str	r1, [r7, #0]
   27bb4:	0011      	movs	r1, r2
   27bb6:	1dfb      	adds	r3, r7, #7
   27bb8:	1c02      	adds	r2, r0, #0
   27bba:	701a      	strb	r2, [r3, #0]
   27bbc:	1dbb      	adds	r3, r7, #6
   27bbe:	1c0a      	adds	r2, r1, #0
   27bc0:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   27bc2:	2317      	movs	r3, #23
   27bc4:	18fb      	adds	r3, r7, r3
   27bc6:	22fa      	movs	r2, #250	; 0xfa
   27bc8:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   27bca:	1dfb      	adds	r3, r7, #7
   27bcc:	781b      	ldrb	r3, [r3, #0]
   27bce:	2b7f      	cmp	r3, #127	; 0x7f
   27bd0:	d867      	bhi.n	27ca2 <connect+0xf6>
   27bd2:	683b      	ldr	r3, [r7, #0]
   27bd4:	2b00      	cmp	r3, #0
   27bd6:	d064      	beq.n	27ca2 <connect+0xf6>
   27bd8:	1dfb      	adds	r3, r7, #7
   27bda:	781b      	ldrb	r3, [r3, #0]
   27bdc:	b25b      	sxtb	r3, r3
   27bde:	4a35      	ldr	r2, [pc, #212]	; (27cb4 <connect+0x108>)
   27be0:	011b      	lsls	r3, r3, #4
   27be2:	18d3      	adds	r3, r2, r3
   27be4:	330a      	adds	r3, #10
   27be6:	781b      	ldrb	r3, [r3, #0]
   27be8:	b2db      	uxtb	r3, r3
   27bea:	2b01      	cmp	r3, #1
   27bec:	d159      	bne.n	27ca2 <connect+0xf6>
   27bee:	1dbb      	adds	r3, r7, #6
   27bf0:	781b      	ldrb	r3, [r3, #0]
   27bf2:	2b00      	cmp	r3, #0
   27bf4:	d055      	beq.n	27ca2 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   27bf6:	2316      	movs	r3, #22
   27bf8:	18fb      	adds	r3, r7, r3
   27bfa:	2244      	movs	r2, #68	; 0x44
   27bfc:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   27bfe:	1dfb      	adds	r3, r7, #7
   27c00:	781b      	ldrb	r3, [r3, #0]
   27c02:	b25b      	sxtb	r3, r3
   27c04:	4a2b      	ldr	r2, [pc, #172]	; (27cb4 <connect+0x108>)
   27c06:	011b      	lsls	r3, r3, #4
   27c08:	18d3      	adds	r3, r2, r3
   27c0a:	330b      	adds	r3, #11
   27c0c:	781b      	ldrb	r3, [r3, #0]
   27c0e:	b2db      	uxtb	r3, r3
   27c10:	001a      	movs	r2, r3
   27c12:	2301      	movs	r3, #1
   27c14:	4013      	ands	r3, r2
   27c16:	d00f      	beq.n	27c38 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   27c18:	2316      	movs	r3, #22
   27c1a:	18fb      	adds	r3, r7, r3
   27c1c:	224b      	movs	r2, #75	; 0x4b
   27c1e:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   27c20:	1dfb      	adds	r3, r7, #7
   27c22:	781b      	ldrb	r3, [r3, #0]
   27c24:	b25b      	sxtb	r3, r3
   27c26:	4a23      	ldr	r2, [pc, #140]	; (27cb4 <connect+0x108>)
   27c28:	011b      	lsls	r3, r3, #4
   27c2a:	18d3      	adds	r3, r2, r3
   27c2c:	330b      	adds	r3, #11
   27c2e:	781b      	ldrb	r3, [r3, #0]
   27c30:	b2da      	uxtb	r2, r3
   27c32:	2308      	movs	r3, #8
   27c34:	18fb      	adds	r3, r7, r3
   27c36:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   27c38:	2308      	movs	r3, #8
   27c3a:	18fb      	adds	r3, r7, r3
   27c3c:	1dfa      	adds	r2, r7, #7
   27c3e:	7812      	ldrb	r2, [r2, #0]
   27c40:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   27c42:	6839      	ldr	r1, [r7, #0]
   27c44:	2308      	movs	r3, #8
   27c46:	18fb      	adds	r3, r7, r3
   27c48:	2208      	movs	r2, #8
   27c4a:	0018      	movs	r0, r3
   27c4c:	4b1a      	ldr	r3, [pc, #104]	; (27cb8 <connect+0x10c>)
   27c4e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   27c50:	1dfb      	adds	r3, r7, #7
   27c52:	781b      	ldrb	r3, [r3, #0]
   27c54:	b25b      	sxtb	r3, r3
   27c56:	4a17      	ldr	r2, [pc, #92]	; (27cb4 <connect+0x108>)
   27c58:	011b      	lsls	r3, r3, #4
   27c5a:	18d3      	adds	r3, r2, r3
   27c5c:	3306      	adds	r3, #6
   27c5e:	881b      	ldrh	r3, [r3, #0]
   27c60:	b29a      	uxth	r2, r3
   27c62:	2308      	movs	r3, #8
   27c64:	18fb      	adds	r3, r7, r3
   27c66:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   27c68:	2317      	movs	r3, #23
   27c6a:	18fc      	adds	r4, r7, r3
   27c6c:	2308      	movs	r3, #8
   27c6e:	18fa      	adds	r2, r7, r3
   27c70:	2316      	movs	r3, #22
   27c72:	18fb      	adds	r3, r7, r3
   27c74:	7819      	ldrb	r1, [r3, #0]
   27c76:	2300      	movs	r3, #0
   27c78:	9302      	str	r3, [sp, #8]
   27c7a:	2300      	movs	r3, #0
   27c7c:	9301      	str	r3, [sp, #4]
   27c7e:	2300      	movs	r3, #0
   27c80:	9300      	str	r3, [sp, #0]
   27c82:	230c      	movs	r3, #12
   27c84:	2002      	movs	r0, #2
   27c86:	4d0d      	ldr	r5, [pc, #52]	; (27cbc <connect+0x110>)
   27c88:	47a8      	blx	r5
   27c8a:	0003      	movs	r3, r0
   27c8c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   27c8e:	2317      	movs	r3, #23
   27c90:	18fb      	adds	r3, r7, r3
   27c92:	781b      	ldrb	r3, [r3, #0]
   27c94:	b25b      	sxtb	r3, r3
   27c96:	2b00      	cmp	r3, #0
   27c98:	d003      	beq.n	27ca2 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   27c9a:	2317      	movs	r3, #23
   27c9c:	18fb      	adds	r3, r7, r3
   27c9e:	22f7      	movs	r2, #247	; 0xf7
   27ca0:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   27ca2:	2317      	movs	r3, #23
   27ca4:	18fb      	adds	r3, r7, r3
   27ca6:	781b      	ldrb	r3, [r3, #0]
   27ca8:	b25b      	sxtb	r3, r3
}
   27caa:	0018      	movs	r0, r3
   27cac:	46bd      	mov	sp, r7
   27cae:	b006      	add	sp, #24
   27cb0:	bdb0      	pop	{r4, r5, r7, pc}
   27cb2:	46c0      	nop			; (mov r8, r8)
   27cb4:	20005980 	.word	0x20005980
   27cb8:	00022fcd 	.word	0x00022fcd
   27cbc:	00023269 	.word	0x00023269

00027cc0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   27cc0:	b590      	push	{r4, r7, lr}
   27cc2:	b08f      	sub	sp, #60	; 0x3c
   27cc4:	af04      	add	r7, sp, #16
   27cc6:	0004      	movs	r4, r0
   27cc8:	60b9      	str	r1, [r7, #8]
   27cca:	0010      	movs	r0, r2
   27ccc:	0019      	movs	r1, r3
   27cce:	230f      	movs	r3, #15
   27cd0:	18fb      	adds	r3, r7, r3
   27cd2:	1c22      	adds	r2, r4, #0
   27cd4:	701a      	strb	r2, [r3, #0]
   27cd6:	230c      	movs	r3, #12
   27cd8:	18fb      	adds	r3, r7, r3
   27cda:	1c02      	adds	r2, r0, #0
   27cdc:	801a      	strh	r2, [r3, #0]
   27cde:	1dbb      	adds	r3, r7, #6
   27ce0:	1c0a      	adds	r2, r1, #0
   27ce2:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   27ce4:	2326      	movs	r3, #38	; 0x26
   27ce6:	18fb      	adds	r3, r7, r3
   27ce8:	2206      	movs	r2, #6
   27cea:	4252      	negs	r2, r2
   27cec:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   27cee:	230f      	movs	r3, #15
   27cf0:	18fb      	adds	r3, r7, r3
   27cf2:	781b      	ldrb	r3, [r3, #0]
   27cf4:	2b7f      	cmp	r3, #127	; 0x7f
   27cf6:	d900      	bls.n	27cfa <send+0x3a>
   27cf8:	e087      	b.n	27e0a <send+0x14a>
   27cfa:	68bb      	ldr	r3, [r7, #8]
   27cfc:	2b00      	cmp	r3, #0
   27cfe:	d100      	bne.n	27d02 <send+0x42>
   27d00:	e083      	b.n	27e0a <send+0x14a>
   27d02:	230c      	movs	r3, #12
   27d04:	18fb      	adds	r3, r7, r3
   27d06:	881a      	ldrh	r2, [r3, #0]
   27d08:	23af      	movs	r3, #175	; 0xaf
   27d0a:	00db      	lsls	r3, r3, #3
   27d0c:	429a      	cmp	r2, r3
   27d0e:	d900      	bls.n	27d12 <send+0x52>
   27d10:	e07b      	b.n	27e0a <send+0x14a>
   27d12:	230f      	movs	r3, #15
   27d14:	18fb      	adds	r3, r7, r3
   27d16:	781b      	ldrb	r3, [r3, #0]
   27d18:	b25b      	sxtb	r3, r3
   27d1a:	4a40      	ldr	r2, [pc, #256]	; (27e1c <send+0x15c>)
   27d1c:	011b      	lsls	r3, r3, #4
   27d1e:	18d3      	adds	r3, r2, r3
   27d20:	330a      	adds	r3, #10
   27d22:	781b      	ldrb	r3, [r3, #0]
   27d24:	b2db      	uxtb	r3, r3
   27d26:	2b01      	cmp	r3, #1
   27d28:	d16f      	bne.n	27e0a <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   27d2a:	2323      	movs	r3, #35	; 0x23
   27d2c:	18fb      	adds	r3, r7, r3
   27d2e:	2245      	movs	r2, #69	; 0x45
   27d30:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   27d32:	2324      	movs	r3, #36	; 0x24
   27d34:	18fb      	adds	r3, r7, r3
   27d36:	2250      	movs	r2, #80	; 0x50
   27d38:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   27d3a:	2310      	movs	r3, #16
   27d3c:	18fb      	adds	r3, r7, r3
   27d3e:	220f      	movs	r2, #15
   27d40:	18ba      	adds	r2, r7, r2
   27d42:	7812      	ldrb	r2, [r2, #0]
   27d44:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   27d46:	2310      	movs	r3, #16
   27d48:	18fb      	adds	r3, r7, r3
   27d4a:	220c      	movs	r2, #12
   27d4c:	18ba      	adds	r2, r7, r2
   27d4e:	8812      	ldrh	r2, [r2, #0]
   27d50:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   27d52:	230f      	movs	r3, #15
   27d54:	18fb      	adds	r3, r7, r3
   27d56:	781b      	ldrb	r3, [r3, #0]
   27d58:	b25b      	sxtb	r3, r3
   27d5a:	4a30      	ldr	r2, [pc, #192]	; (27e1c <send+0x15c>)
   27d5c:	011b      	lsls	r3, r3, #4
   27d5e:	18d3      	adds	r3, r2, r3
   27d60:	3306      	adds	r3, #6
   27d62:	881b      	ldrh	r3, [r3, #0]
   27d64:	b29a      	uxth	r2, r3
   27d66:	2310      	movs	r3, #16
   27d68:	18fb      	adds	r3, r7, r3
   27d6a:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   27d6c:	230f      	movs	r3, #15
   27d6e:	18fb      	adds	r3, r7, r3
   27d70:	781b      	ldrb	r3, [r3, #0]
   27d72:	b25b      	sxtb	r3, r3
   27d74:	2b06      	cmp	r3, #6
   27d76:	dd03      	ble.n	27d80 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   27d78:	2324      	movs	r3, #36	; 0x24
   27d7a:	18fb      	adds	r3, r7, r3
   27d7c:	2244      	movs	r2, #68	; 0x44
   27d7e:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27d80:	230f      	movs	r3, #15
   27d82:	18fb      	adds	r3, r7, r3
   27d84:	781b      	ldrb	r3, [r3, #0]
   27d86:	b25b      	sxtb	r3, r3
   27d88:	4a24      	ldr	r2, [pc, #144]	; (27e1c <send+0x15c>)
   27d8a:	011b      	lsls	r3, r3, #4
   27d8c:	18d3      	adds	r3, r2, r3
   27d8e:	330b      	adds	r3, #11
   27d90:	781b      	ldrb	r3, [r3, #0]
   27d92:	b2db      	uxtb	r3, r3
   27d94:	001a      	movs	r2, r3
   27d96:	2301      	movs	r3, #1
   27d98:	4013      	ands	r3, r2
   27d9a:	d00f      	beq.n	27dbc <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   27d9c:	2323      	movs	r3, #35	; 0x23
   27d9e:	18fb      	adds	r3, r7, r3
   27da0:	224c      	movs	r2, #76	; 0x4c
   27da2:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   27da4:	230f      	movs	r3, #15
   27da6:	18fb      	adds	r3, r7, r3
   27da8:	2200      	movs	r2, #0
   27daa:	569a      	ldrsb	r2, [r3, r2]
   27dac:	2324      	movs	r3, #36	; 0x24
   27dae:	18fb      	adds	r3, r7, r3
   27db0:	491a      	ldr	r1, [pc, #104]	; (27e1c <send+0x15c>)
   27db2:	0112      	lsls	r2, r2, #4
   27db4:	188a      	adds	r2, r1, r2
   27db6:	3208      	adds	r2, #8
   27db8:	8812      	ldrh	r2, [r2, #0]
   27dba:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   27dbc:	2323      	movs	r3, #35	; 0x23
   27dbe:	18fb      	adds	r3, r7, r3
   27dc0:	781b      	ldrb	r3, [r3, #0]
   27dc2:	2280      	movs	r2, #128	; 0x80
   27dc4:	4252      	negs	r2, r2
   27dc6:	4313      	orrs	r3, r2
   27dc8:	b2d9      	uxtb	r1, r3
   27dca:	2310      	movs	r3, #16
   27dcc:	18fa      	adds	r2, r7, r3
   27dce:	2324      	movs	r3, #36	; 0x24
   27dd0:	18fb      	adds	r3, r7, r3
   27dd2:	881b      	ldrh	r3, [r3, #0]
   27dd4:	9302      	str	r3, [sp, #8]
   27dd6:	230c      	movs	r3, #12
   27dd8:	18fb      	adds	r3, r7, r3
   27dda:	881b      	ldrh	r3, [r3, #0]
   27ddc:	9301      	str	r3, [sp, #4]
   27dde:	68bb      	ldr	r3, [r7, #8]
   27de0:	9300      	str	r3, [sp, #0]
   27de2:	2310      	movs	r3, #16
   27de4:	2002      	movs	r0, #2
   27de6:	4c0e      	ldr	r4, [pc, #56]	; (27e20 <send+0x160>)
   27de8:	47a0      	blx	r4
   27dea:	0003      	movs	r3, r0
   27dec:	001a      	movs	r2, r3
   27dee:	2326      	movs	r3, #38	; 0x26
   27df0:	18fb      	adds	r3, r7, r3
   27df2:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   27df4:	2326      	movs	r3, #38	; 0x26
   27df6:	18fb      	adds	r3, r7, r3
   27df8:	2200      	movs	r2, #0
   27dfa:	5e9b      	ldrsh	r3, [r3, r2]
   27dfc:	2b00      	cmp	r3, #0
   27dfe:	d004      	beq.n	27e0a <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   27e00:	2326      	movs	r3, #38	; 0x26
   27e02:	18fb      	adds	r3, r7, r3
   27e04:	220e      	movs	r2, #14
   27e06:	4252      	negs	r2, r2
   27e08:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   27e0a:	2326      	movs	r3, #38	; 0x26
   27e0c:	18fb      	adds	r3, r7, r3
   27e0e:	2200      	movs	r2, #0
   27e10:	5e9b      	ldrsh	r3, [r3, r2]
}
   27e12:	0018      	movs	r0, r3
   27e14:	46bd      	mov	sp, r7
   27e16:	b00b      	add	sp, #44	; 0x2c
   27e18:	bd90      	pop	{r4, r7, pc}
   27e1a:	46c0      	nop			; (mov r8, r8)
   27e1c:	20005980 	.word	0x20005980
   27e20:	00023269 	.word	0x00023269

00027e24 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   27e24:	b590      	push	{r4, r7, lr}
   27e26:	b08d      	sub	sp, #52	; 0x34
   27e28:	af04      	add	r7, sp, #16
   27e2a:	60b9      	str	r1, [r7, #8]
   27e2c:	0011      	movs	r1, r2
   27e2e:	607b      	str	r3, [r7, #4]
   27e30:	230f      	movs	r3, #15
   27e32:	18fb      	adds	r3, r7, r3
   27e34:	1c02      	adds	r2, r0, #0
   27e36:	701a      	strb	r2, [r3, #0]
   27e38:	230c      	movs	r3, #12
   27e3a:	18fb      	adds	r3, r7, r3
   27e3c:	1c0a      	adds	r2, r1, #0
   27e3e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   27e40:	231e      	movs	r3, #30
   27e42:	18fb      	adds	r3, r7, r3
   27e44:	2206      	movs	r2, #6
   27e46:	4252      	negs	r2, r2
   27e48:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   27e4a:	230f      	movs	r3, #15
   27e4c:	18fb      	adds	r3, r7, r3
   27e4e:	781b      	ldrb	r3, [r3, #0]
   27e50:	2b7f      	cmp	r3, #127	; 0x7f
   27e52:	d900      	bls.n	27e56 <recv+0x32>
   27e54:	e099      	b.n	27f8a <recv+0x166>
   27e56:	68bb      	ldr	r3, [r7, #8]
   27e58:	2b00      	cmp	r3, #0
   27e5a:	d100      	bne.n	27e5e <recv+0x3a>
   27e5c:	e095      	b.n	27f8a <recv+0x166>
   27e5e:	230c      	movs	r3, #12
   27e60:	18fb      	adds	r3, r7, r3
   27e62:	881b      	ldrh	r3, [r3, #0]
   27e64:	2b00      	cmp	r3, #0
   27e66:	d100      	bne.n	27e6a <recv+0x46>
   27e68:	e08f      	b.n	27f8a <recv+0x166>
   27e6a:	230f      	movs	r3, #15
   27e6c:	18fb      	adds	r3, r7, r3
   27e6e:	781b      	ldrb	r3, [r3, #0]
   27e70:	b25b      	sxtb	r3, r3
   27e72:	4a4a      	ldr	r2, [pc, #296]	; (27f9c <recv+0x178>)
   27e74:	011b      	lsls	r3, r3, #4
   27e76:	18d3      	adds	r3, r2, r3
   27e78:	330a      	adds	r3, #10
   27e7a:	781b      	ldrb	r3, [r3, #0]
   27e7c:	b2db      	uxtb	r3, r3
   27e7e:	2b01      	cmp	r3, #1
   27e80:	d000      	beq.n	27e84 <recv+0x60>
   27e82:	e082      	b.n	27f8a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   27e84:	231e      	movs	r3, #30
   27e86:	18fb      	adds	r3, r7, r3
   27e88:	2200      	movs	r2, #0
   27e8a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   27e8c:	230f      	movs	r3, #15
   27e8e:	18fb      	adds	r3, r7, r3
   27e90:	2200      	movs	r2, #0
   27e92:	569a      	ldrsb	r2, [r3, r2]
   27e94:	4b41      	ldr	r3, [pc, #260]	; (27f9c <recv+0x178>)
   27e96:	0112      	lsls	r2, r2, #4
   27e98:	68b9      	ldr	r1, [r7, #8]
   27e9a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   27e9c:	230f      	movs	r3, #15
   27e9e:	18fb      	adds	r3, r7, r3
   27ea0:	781b      	ldrb	r3, [r3, #0]
   27ea2:	b25b      	sxtb	r3, r3
   27ea4:	4a3d      	ldr	r2, [pc, #244]	; (27f9c <recv+0x178>)
   27ea6:	011b      	lsls	r3, r3, #4
   27ea8:	18d3      	adds	r3, r2, r3
   27eaa:	3304      	adds	r3, #4
   27eac:	220c      	movs	r2, #12
   27eae:	18ba      	adds	r2, r7, r2
   27eb0:	8812      	ldrh	r2, [r2, #0]
   27eb2:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   27eb4:	230f      	movs	r3, #15
   27eb6:	18fb      	adds	r3, r7, r3
   27eb8:	781b      	ldrb	r3, [r3, #0]
   27eba:	b25b      	sxtb	r3, r3
   27ebc:	4a37      	ldr	r2, [pc, #220]	; (27f9c <recv+0x178>)
   27ebe:	011b      	lsls	r3, r3, #4
   27ec0:	18d3      	adds	r3, r2, r3
   27ec2:	330c      	adds	r3, #12
   27ec4:	781b      	ldrb	r3, [r3, #0]
   27ec6:	b2db      	uxtb	r3, r3
   27ec8:	2b00      	cmp	r3, #0
   27eca:	d15e      	bne.n	27f8a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   27ecc:	231d      	movs	r3, #29
   27ece:	18fb      	adds	r3, r7, r3
   27ed0:	2246      	movs	r2, #70	; 0x46
   27ed2:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   27ed4:	230f      	movs	r3, #15
   27ed6:	18fb      	adds	r3, r7, r3
   27ed8:	781b      	ldrb	r3, [r3, #0]
   27eda:	b25b      	sxtb	r3, r3
   27edc:	4a2f      	ldr	r2, [pc, #188]	; (27f9c <recv+0x178>)
   27ede:	011b      	lsls	r3, r3, #4
   27ee0:	18d3      	adds	r3, r2, r3
   27ee2:	330c      	adds	r3, #12
   27ee4:	2201      	movs	r2, #1
   27ee6:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27ee8:	230f      	movs	r3, #15
   27eea:	18fb      	adds	r3, r7, r3
   27eec:	781b      	ldrb	r3, [r3, #0]
   27eee:	b25b      	sxtb	r3, r3
   27ef0:	4a2a      	ldr	r2, [pc, #168]	; (27f9c <recv+0x178>)
   27ef2:	011b      	lsls	r3, r3, #4
   27ef4:	18d3      	adds	r3, r2, r3
   27ef6:	330b      	adds	r3, #11
   27ef8:	781b      	ldrb	r3, [r3, #0]
   27efa:	b2db      	uxtb	r3, r3
   27efc:	001a      	movs	r2, r3
   27efe:	2301      	movs	r3, #1
   27f00:	4013      	ands	r3, r2
   27f02:	d003      	beq.n	27f0c <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   27f04:	231d      	movs	r3, #29
   27f06:	18fb      	adds	r3, r7, r3
   27f08:	224d      	movs	r2, #77	; 0x4d
   27f0a:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   27f0c:	687b      	ldr	r3, [r7, #4]
   27f0e:	2b00      	cmp	r3, #0
   27f10:	d105      	bne.n	27f1e <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   27f12:	2314      	movs	r3, #20
   27f14:	18fb      	adds	r3, r7, r3
   27f16:	2201      	movs	r2, #1
   27f18:	4252      	negs	r2, r2
   27f1a:	601a      	str	r2, [r3, #0]
   27f1c:	e003      	b.n	27f26 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   27f1e:	2314      	movs	r3, #20
   27f20:	18fb      	adds	r3, r7, r3
   27f22:	687a      	ldr	r2, [r7, #4]
   27f24:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   27f26:	2314      	movs	r3, #20
   27f28:	18fb      	adds	r3, r7, r3
   27f2a:	220f      	movs	r2, #15
   27f2c:	18ba      	adds	r2, r7, r2
   27f2e:	7812      	ldrb	r2, [r2, #0]
   27f30:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   27f32:	230f      	movs	r3, #15
   27f34:	18fb      	adds	r3, r7, r3
   27f36:	781b      	ldrb	r3, [r3, #0]
   27f38:	b25b      	sxtb	r3, r3
   27f3a:	4a18      	ldr	r2, [pc, #96]	; (27f9c <recv+0x178>)
   27f3c:	011b      	lsls	r3, r3, #4
   27f3e:	18d3      	adds	r3, r2, r3
   27f40:	3306      	adds	r3, #6
   27f42:	881b      	ldrh	r3, [r3, #0]
   27f44:	b29a      	uxth	r2, r3
   27f46:	2314      	movs	r3, #20
   27f48:	18fb      	adds	r3, r7, r3
   27f4a:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   27f4c:	2314      	movs	r3, #20
   27f4e:	18fa      	adds	r2, r7, r3
   27f50:	231d      	movs	r3, #29
   27f52:	18fb      	adds	r3, r7, r3
   27f54:	7819      	ldrb	r1, [r3, #0]
   27f56:	2300      	movs	r3, #0
   27f58:	9302      	str	r3, [sp, #8]
   27f5a:	2300      	movs	r3, #0
   27f5c:	9301      	str	r3, [sp, #4]
   27f5e:	2300      	movs	r3, #0
   27f60:	9300      	str	r3, [sp, #0]
   27f62:	2308      	movs	r3, #8
   27f64:	2002      	movs	r0, #2
   27f66:	4c0e      	ldr	r4, [pc, #56]	; (27fa0 <recv+0x17c>)
   27f68:	47a0      	blx	r4
   27f6a:	0003      	movs	r3, r0
   27f6c:	001a      	movs	r2, r3
   27f6e:	231e      	movs	r3, #30
   27f70:	18fb      	adds	r3, r7, r3
   27f72:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   27f74:	231e      	movs	r3, #30
   27f76:	18fb      	adds	r3, r7, r3
   27f78:	2200      	movs	r2, #0
   27f7a:	5e9b      	ldrsh	r3, [r3, r2]
   27f7c:	2b00      	cmp	r3, #0
   27f7e:	d004      	beq.n	27f8a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   27f80:	231e      	movs	r3, #30
   27f82:	18fb      	adds	r3, r7, r3
   27f84:	220e      	movs	r2, #14
   27f86:	4252      	negs	r2, r2
   27f88:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   27f8a:	231e      	movs	r3, #30
   27f8c:	18fb      	adds	r3, r7, r3
   27f8e:	2200      	movs	r2, #0
   27f90:	5e9b      	ldrsh	r3, [r3, r2]
}
   27f92:	0018      	movs	r0, r3
   27f94:	46bd      	mov	sp, r7
   27f96:	b009      	add	sp, #36	; 0x24
   27f98:	bd90      	pop	{r4, r7, pc}
   27f9a:	46c0      	nop			; (mov r8, r8)
   27f9c:	20005980 	.word	0x20005980
   27fa0:	00023269 	.word	0x00023269

00027fa4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   27fa4:	b5b0      	push	{r4, r5, r7, lr}
   27fa6:	b088      	sub	sp, #32
   27fa8:	af04      	add	r7, sp, #16
   27faa:	0002      	movs	r2, r0
   27fac:	1dfb      	adds	r3, r7, #7
   27fae:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   27fb0:	230f      	movs	r3, #15
   27fb2:	18fb      	adds	r3, r7, r3
   27fb4:	22fa      	movs	r2, #250	; 0xfa
   27fb6:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   27fb8:	4b43      	ldr	r3, [pc, #268]	; (280c8 <close+0x124>)
   27fba:	0018      	movs	r0, r3
   27fbc:	4b43      	ldr	r3, [pc, #268]	; (280cc <close+0x128>)
   27fbe:	4798      	blx	r3
   27fc0:	1dfb      	adds	r3, r7, #7
   27fc2:	2200      	movs	r2, #0
   27fc4:	569a      	ldrsb	r2, [r3, r2]
   27fc6:	4b42      	ldr	r3, [pc, #264]	; (280d0 <close+0x12c>)
   27fc8:	0011      	movs	r1, r2
   27fca:	0018      	movs	r0, r3
   27fcc:	4b3f      	ldr	r3, [pc, #252]	; (280cc <close+0x128>)
   27fce:	4798      	blx	r3
   27fd0:	4b40      	ldr	r3, [pc, #256]	; (280d4 <close+0x130>)
   27fd2:	0018      	movs	r0, r3
   27fd4:	4b3d      	ldr	r3, [pc, #244]	; (280cc <close+0x128>)
   27fd6:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   27fd8:	1dfb      	adds	r3, r7, #7
   27fda:	781b      	ldrb	r3, [r3, #0]
   27fdc:	2b7f      	cmp	r3, #127	; 0x7f
   27fde:	d86a      	bhi.n	280b6 <close+0x112>
   27fe0:	1dfb      	adds	r3, r7, #7
   27fe2:	781b      	ldrb	r3, [r3, #0]
   27fe4:	b25b      	sxtb	r3, r3
   27fe6:	4a3c      	ldr	r2, [pc, #240]	; (280d8 <close+0x134>)
   27fe8:	011b      	lsls	r3, r3, #4
   27fea:	18d3      	adds	r3, r2, r3
   27fec:	330a      	adds	r3, #10
   27fee:	781b      	ldrb	r3, [r3, #0]
   27ff0:	b2db      	uxtb	r3, r3
   27ff2:	2b01      	cmp	r3, #1
   27ff4:	d15f      	bne.n	280b6 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   27ff6:	230e      	movs	r3, #14
   27ff8:	18fb      	adds	r3, r7, r3
   27ffa:	2249      	movs	r2, #73	; 0x49
   27ffc:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   27ffe:	2308      	movs	r3, #8
   28000:	18fb      	adds	r3, r7, r3
   28002:	1dfa      	adds	r2, r7, #7
   28004:	7812      	ldrb	r2, [r2, #0]
   28006:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   28008:	1dfb      	adds	r3, r7, #7
   2800a:	781b      	ldrb	r3, [r3, #0]
   2800c:	b25b      	sxtb	r3, r3
   2800e:	4a32      	ldr	r2, [pc, #200]	; (280d8 <close+0x134>)
   28010:	011b      	lsls	r3, r3, #4
   28012:	18d3      	adds	r3, r2, r3
   28014:	3306      	adds	r3, #6
   28016:	881b      	ldrh	r3, [r3, #0]
   28018:	b29a      	uxth	r2, r3
   2801a:	2308      	movs	r3, #8
   2801c:	18fb      	adds	r3, r7, r3
   2801e:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   28020:	1dfb      	adds	r3, r7, #7
   28022:	781b      	ldrb	r3, [r3, #0]
   28024:	b25b      	sxtb	r3, r3
   28026:	4a2c      	ldr	r2, [pc, #176]	; (280d8 <close+0x134>)
   28028:	011b      	lsls	r3, r3, #4
   2802a:	18d3      	adds	r3, r2, r3
   2802c:	330a      	adds	r3, #10
   2802e:	2200      	movs	r2, #0
   28030:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   28032:	1dfb      	adds	r3, r7, #7
   28034:	781b      	ldrb	r3, [r3, #0]
   28036:	b25b      	sxtb	r3, r3
   28038:	4a27      	ldr	r2, [pc, #156]	; (280d8 <close+0x134>)
   2803a:	011b      	lsls	r3, r3, #4
   2803c:	18d3      	adds	r3, r2, r3
   2803e:	3306      	adds	r3, #6
   28040:	2200      	movs	r2, #0
   28042:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   28044:	1dfb      	adds	r3, r7, #7
   28046:	781b      	ldrb	r3, [r3, #0]
   28048:	b25b      	sxtb	r3, r3
   2804a:	4a23      	ldr	r2, [pc, #140]	; (280d8 <close+0x134>)
   2804c:	011b      	lsls	r3, r3, #4
   2804e:	18d3      	adds	r3, r2, r3
   28050:	330b      	adds	r3, #11
   28052:	781b      	ldrb	r3, [r3, #0]
   28054:	b2db      	uxtb	r3, r3
   28056:	001a      	movs	r2, r3
   28058:	2301      	movs	r3, #1
   2805a:	4013      	ands	r3, r2
   2805c:	d003      	beq.n	28066 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   2805e:	230e      	movs	r3, #14
   28060:	18fb      	adds	r3, r7, r3
   28062:	224e      	movs	r2, #78	; 0x4e
   28064:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   28066:	230f      	movs	r3, #15
   28068:	18fc      	adds	r4, r7, r3
   2806a:	2308      	movs	r3, #8
   2806c:	18fa      	adds	r2, r7, r3
   2806e:	230e      	movs	r3, #14
   28070:	18fb      	adds	r3, r7, r3
   28072:	7819      	ldrb	r1, [r3, #0]
   28074:	2300      	movs	r3, #0
   28076:	9302      	str	r3, [sp, #8]
   28078:	2300      	movs	r3, #0
   2807a:	9301      	str	r3, [sp, #4]
   2807c:	2300      	movs	r3, #0
   2807e:	9300      	str	r3, [sp, #0]
   28080:	2304      	movs	r3, #4
   28082:	2002      	movs	r0, #2
   28084:	4d15      	ldr	r5, [pc, #84]	; (280dc <close+0x138>)
   28086:	47a8      	blx	r5
   28088:	0003      	movs	r3, r0
   2808a:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2808c:	230f      	movs	r3, #15
   2808e:	18fb      	adds	r3, r7, r3
   28090:	781b      	ldrb	r3, [r3, #0]
   28092:	b25b      	sxtb	r3, r3
   28094:	2b00      	cmp	r3, #0
   28096:	d003      	beq.n	280a0 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   28098:	230f      	movs	r3, #15
   2809a:	18fb      	adds	r3, r7, r3
   2809c:	22f7      	movs	r2, #247	; 0xf7
   2809e:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   280a0:	1dfb      	adds	r3, r7, #7
   280a2:	781b      	ldrb	r3, [r3, #0]
   280a4:	b25b      	sxtb	r3, r3
   280a6:	011a      	lsls	r2, r3, #4
   280a8:	4b0b      	ldr	r3, [pc, #44]	; (280d8 <close+0x134>)
   280aa:	18d3      	adds	r3, r2, r3
   280ac:	2210      	movs	r2, #16
   280ae:	2100      	movs	r1, #0
   280b0:	0018      	movs	r0, r3
   280b2:	4b0b      	ldr	r3, [pc, #44]	; (280e0 <close+0x13c>)
   280b4:	4798      	blx	r3
	}
	return s8Ret;
   280b6:	230f      	movs	r3, #15
   280b8:	18fb      	adds	r3, r7, r3
   280ba:	781b      	ldrb	r3, [r3, #0]
   280bc:	b25b      	sxtb	r3, r3
}
   280be:	0018      	movs	r0, r3
   280c0:	46bd      	mov	sp, r7
   280c2:	b004      	add	sp, #16
   280c4:	bdb0      	pop	{r4, r5, r7, pc}
   280c6:	46c0      	nop			; (mov r8, r8)
   280c8:	0003c6d4 	.word	0x0003c6d4
   280cc:	00020349 	.word	0x00020349
   280d0:	0003c714 	.word	0x0003c714
   280d4:	0003c6f4 	.word	0x0003c6f4
   280d8:	20005980 	.word	0x20005980
   280dc:	00023269 	.word	0x00023269
   280e0:	00023009 	.word	0x00023009

000280e4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   280e4:	b580      	push	{r7, lr}
   280e6:	b086      	sub	sp, #24
   280e8:	af00      	add	r7, sp, #0
   280ea:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   280ec:	2300      	movs	r3, #0
   280ee:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   280f0:	2317      	movs	r3, #23
   280f2:	18fb      	adds	r3, r7, r3
   280f4:	2200      	movs	r2, #0
   280f6:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   280f8:	2316      	movs	r3, #22
   280fa:	18fb      	adds	r3, r7, r3
   280fc:	2200      	movs	r2, #0
   280fe:	701a      	strb	r2, [r3, #0]
   28100:	e060      	b.n	281c4 <nmi_inet_addr+0xe0>
	{
		j = 0;
   28102:	2315      	movs	r3, #21
   28104:	18fb      	adds	r3, r7, r3
   28106:	2200      	movs	r2, #0
   28108:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   2810a:	2314      	movs	r3, #20
   2810c:	18fb      	adds	r3, r7, r3
   2810e:	687a      	ldr	r2, [r7, #4]
   28110:	7812      	ldrb	r2, [r2, #0]
   28112:	701a      	strb	r2, [r3, #0]
			++j;
   28114:	2315      	movs	r3, #21
   28116:	18fb      	adds	r3, r7, r3
   28118:	2215      	movs	r2, #21
   2811a:	18ba      	adds	r2, r7, r2
   2811c:	7812      	ldrb	r2, [r2, #0]
   2811e:	3201      	adds	r2, #1
   28120:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   28122:	2315      	movs	r3, #21
   28124:	18fb      	adds	r3, r7, r3
   28126:	781b      	ldrb	r3, [r3, #0]
   28128:	2b04      	cmp	r3, #4
   2812a:	d901      	bls.n	28130 <nmi_inet_addr+0x4c>
			{
				return 0;
   2812c:	2300      	movs	r3, #0
   2812e:	e057      	b.n	281e0 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   28130:	2314      	movs	r3, #20
   28132:	18fb      	adds	r3, r7, r3
   28134:	781b      	ldrb	r3, [r3, #0]
   28136:	2b2e      	cmp	r3, #46	; 0x2e
   28138:	d004      	beq.n	28144 <nmi_inet_addr+0x60>
   2813a:	2314      	movs	r3, #20
   2813c:	18fb      	adds	r3, r7, r3
   2813e:	781b      	ldrb	r3, [r3, #0]
   28140:	2b00      	cmp	r3, #0
   28142:	d10d      	bne.n	28160 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   28144:	2316      	movs	r3, #22
   28146:	18fb      	adds	r3, r7, r3
   28148:	781b      	ldrb	r3, [r3, #0]
   2814a:	220c      	movs	r2, #12
   2814c:	18ba      	adds	r2, r7, r2
   2814e:	2117      	movs	r1, #23
   28150:	1879      	adds	r1, r7, r1
   28152:	7809      	ldrb	r1, [r1, #0]
   28154:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   28156:	2317      	movs	r3, #23
   28158:	18fb      	adds	r3, r7, r3
   2815a:	2200      	movs	r2, #0
   2815c:	701a      	strb	r2, [r3, #0]
   2815e:	e01d      	b.n	2819c <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   28160:	2314      	movs	r3, #20
   28162:	18fb      	adds	r3, r7, r3
   28164:	781b      	ldrb	r3, [r3, #0]
   28166:	2b2f      	cmp	r3, #47	; 0x2f
   28168:	d916      	bls.n	28198 <nmi_inet_addr+0xb4>
   2816a:	2314      	movs	r3, #20
   2816c:	18fb      	adds	r3, r7, r3
   2816e:	781b      	ldrb	r3, [r3, #0]
   28170:	2b39      	cmp	r3, #57	; 0x39
   28172:	d811      	bhi.n	28198 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   28174:	2317      	movs	r3, #23
   28176:	18fb      	adds	r3, r7, r3
   28178:	781b      	ldrb	r3, [r3, #0]
   2817a:	1c1a      	adds	r2, r3, #0
   2817c:	0092      	lsls	r2, r2, #2
   2817e:	18d3      	adds	r3, r2, r3
   28180:	18db      	adds	r3, r3, r3
   28182:	b2da      	uxtb	r2, r3
   28184:	2314      	movs	r3, #20
   28186:	18fb      	adds	r3, r7, r3
   28188:	781b      	ldrb	r3, [r3, #0]
   2818a:	18d3      	adds	r3, r2, r3
   2818c:	b2da      	uxtb	r2, r3
   2818e:	2317      	movs	r3, #23
   28190:	18fb      	adds	r3, r7, r3
   28192:	3a30      	subs	r2, #48	; 0x30
   28194:	701a      	strb	r2, [r3, #0]
   28196:	e001      	b.n	2819c <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   28198:	2300      	movs	r3, #0
   2819a:	e021      	b.n	281e0 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   2819c:	687b      	ldr	r3, [r7, #4]
   2819e:	3301      	adds	r3, #1
   281a0:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   281a2:	2314      	movs	r3, #20
   281a4:	18fb      	adds	r3, r7, r3
   281a6:	781b      	ldrb	r3, [r3, #0]
   281a8:	2b2e      	cmp	r3, #46	; 0x2e
   281aa:	d004      	beq.n	281b6 <nmi_inet_addr+0xd2>
   281ac:	2314      	movs	r3, #20
   281ae:	18fb      	adds	r3, r7, r3
   281b0:	781b      	ldrb	r3, [r3, #0]
   281b2:	2b00      	cmp	r3, #0
   281b4:	d1a9      	bne.n	2810a <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   281b6:	2316      	movs	r3, #22
   281b8:	18fb      	adds	r3, r7, r3
   281ba:	2216      	movs	r2, #22
   281bc:	18ba      	adds	r2, r7, r2
   281be:	7812      	ldrb	r2, [r2, #0]
   281c0:	3201      	adds	r2, #1
   281c2:	701a      	strb	r2, [r3, #0]
   281c4:	2316      	movs	r3, #22
   281c6:	18fb      	adds	r3, r7, r3
   281c8:	781b      	ldrb	r3, [r3, #0]
   281ca:	2b03      	cmp	r3, #3
   281cc:	d999      	bls.n	28102 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   281ce:	230c      	movs	r3, #12
   281d0:	18f9      	adds	r1, r7, r3
   281d2:	2310      	movs	r3, #16
   281d4:	18fb      	adds	r3, r7, r3
   281d6:	2204      	movs	r2, #4
   281d8:	0018      	movs	r0, r3
   281da:	4b03      	ldr	r3, [pc, #12]	; (281e8 <nmi_inet_addr+0x104>)
   281dc:	4798      	blx	r3
	return u32IP;
   281de:	693b      	ldr	r3, [r7, #16]
}
   281e0:	0018      	movs	r0, r3
   281e2:	46bd      	mov	sp, r7
   281e4:	b006      	add	sp, #24
   281e6:	bd80      	pop	{r7, pc}
   281e8:	00022fcd 	.word	0x00022fcd

000281ec <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   281ec:	b5b0      	push	{r4, r5, r7, lr}
   281ee:	b088      	sub	sp, #32
   281f0:	af04      	add	r7, sp, #16
   281f2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   281f4:	230f      	movs	r3, #15
   281f6:	18fb      	adds	r3, r7, r3
   281f8:	22fa      	movs	r2, #250	; 0xfa
   281fa:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   281fc:	687b      	ldr	r3, [r7, #4]
   281fe:	0018      	movs	r0, r3
   28200:	4b14      	ldr	r3, [pc, #80]	; (28254 <gethostbyname+0x68>)
   28202:	4798      	blx	r3
   28204:	0003      	movs	r3, r0
   28206:	001a      	movs	r2, r3
   28208:	230e      	movs	r3, #14
   2820a:	18fb      	adds	r3, r7, r3
   2820c:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   2820e:	230e      	movs	r3, #14
   28210:	18fb      	adds	r3, r7, r3
   28212:	781b      	ldrb	r3, [r3, #0]
   28214:	2b40      	cmp	r3, #64	; 0x40
   28216:	d815      	bhi.n	28244 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   28218:	230e      	movs	r3, #14
   2821a:	18fb      	adds	r3, r7, r3
   2821c:	781b      	ldrb	r3, [r3, #0]
   2821e:	b29b      	uxth	r3, r3
   28220:	3301      	adds	r3, #1
   28222:	b299      	uxth	r1, r3
   28224:	230f      	movs	r3, #15
   28226:	18fc      	adds	r4, r7, r3
   28228:	687a      	ldr	r2, [r7, #4]
   2822a:	2300      	movs	r3, #0
   2822c:	9302      	str	r3, [sp, #8]
   2822e:	2300      	movs	r3, #0
   28230:	9301      	str	r3, [sp, #4]
   28232:	2300      	movs	r3, #0
   28234:	9300      	str	r3, [sp, #0]
   28236:	000b      	movs	r3, r1
   28238:	214a      	movs	r1, #74	; 0x4a
   2823a:	2002      	movs	r0, #2
   2823c:	4d06      	ldr	r5, [pc, #24]	; (28258 <gethostbyname+0x6c>)
   2823e:	47a8      	blx	r5
   28240:	0003      	movs	r3, r0
   28242:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   28244:	230f      	movs	r3, #15
   28246:	18fb      	adds	r3, r7, r3
   28248:	781b      	ldrb	r3, [r3, #0]
   2824a:	b25b      	sxtb	r3, r3
}
   2824c:	0018      	movs	r0, r3
   2824e:	46bd      	mov	sp, r7
   28250:	b004      	add	sp, #16
   28252:	bdb0      	pop	{r4, r5, r7, pc}
   28254:	00023047 	.word	0x00023047
   28258:	00023269 	.word	0x00023269

0002825c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   2825c:	b580      	push	{r7, lr}
   2825e:	b082      	sub	sp, #8
   28260:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   28262:	003b      	movs	r3, r7
   28264:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   28266:	687b      	ldr	r3, [r7, #4]
   28268:	22b9      	movs	r2, #185	; 0xb9
   2826a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   2826c:	4b13      	ldr	r3, [pc, #76]	; (282bc <spi_flash_enter_low_power_mode+0x60>)
   2826e:	2100      	movs	r1, #0
   28270:	0018      	movs	r0, r3
   28272:	4b13      	ldr	r3, [pc, #76]	; (282c0 <spi_flash_enter_low_power_mode+0x64>)
   28274:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   28276:	687b      	ldr	r3, [r7, #4]
   28278:	781b      	ldrb	r3, [r3, #0]
   2827a:	001a      	movs	r2, r3
   2827c:	4b11      	ldr	r3, [pc, #68]	; (282c4 <spi_flash_enter_low_power_mode+0x68>)
   2827e:	0011      	movs	r1, r2
   28280:	0018      	movs	r0, r3
   28282:	4b0f      	ldr	r3, [pc, #60]	; (282c0 <spi_flash_enter_low_power_mode+0x64>)
   28284:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   28286:	4b10      	ldr	r3, [pc, #64]	; (282c8 <spi_flash_enter_low_power_mode+0x6c>)
   28288:	2101      	movs	r1, #1
   2828a:	0018      	movs	r0, r3
   2828c:	4b0c      	ldr	r3, [pc, #48]	; (282c0 <spi_flash_enter_low_power_mode+0x64>)
   2828e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   28290:	4b0e      	ldr	r3, [pc, #56]	; (282cc <spi_flash_enter_low_power_mode+0x70>)
   28292:	2100      	movs	r1, #0
   28294:	0018      	movs	r0, r3
   28296:	4b0a      	ldr	r3, [pc, #40]	; (282c0 <spi_flash_enter_low_power_mode+0x64>)
   28298:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   2829a:	4b0d      	ldr	r3, [pc, #52]	; (282d0 <spi_flash_enter_low_power_mode+0x74>)
   2829c:	2181      	movs	r1, #129	; 0x81
   2829e:	0018      	movs	r0, r3
   282a0:	4b07      	ldr	r3, [pc, #28]	; (282c0 <spi_flash_enter_low_power_mode+0x64>)
   282a2:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   282a4:	46c0      	nop			; (mov r8, r8)
   282a6:	4b0b      	ldr	r3, [pc, #44]	; (282d4 <spi_flash_enter_low_power_mode+0x78>)
   282a8:	0018      	movs	r0, r3
   282aa:	4b0b      	ldr	r3, [pc, #44]	; (282d8 <spi_flash_enter_low_power_mode+0x7c>)
   282ac:	4798      	blx	r3
   282ae:	0003      	movs	r3, r0
   282b0:	2b01      	cmp	r3, #1
   282b2:	d1f8      	bne.n	282a6 <spi_flash_enter_low_power_mode+0x4a>
}
   282b4:	46c0      	nop			; (mov r8, r8)
   282b6:	46bd      	mov	sp, r7
   282b8:	b002      	add	sp, #8
   282ba:	bd80      	pop	{r7, pc}
   282bc:	00010208 	.word	0x00010208
   282c0:	000250bd 	.word	0x000250bd
   282c4:	0001020c 	.word	0x0001020c
   282c8:	00010214 	.word	0x00010214
   282cc:	0001021c 	.word	0x0001021c
   282d0:	00010204 	.word	0x00010204
   282d4:	00010218 	.word	0x00010218
   282d8:	00025079 	.word	0x00025079

000282dc <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   282dc:	b580      	push	{r7, lr}
   282de:	b082      	sub	sp, #8
   282e0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   282e2:	003b      	movs	r3, r7
   282e4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   282e6:	687b      	ldr	r3, [r7, #4]
   282e8:	22ab      	movs	r2, #171	; 0xab
   282ea:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   282ec:	4b13      	ldr	r3, [pc, #76]	; (2833c <spi_flash_leave_low_power_mode+0x60>)
   282ee:	2100      	movs	r1, #0
   282f0:	0018      	movs	r0, r3
   282f2:	4b13      	ldr	r3, [pc, #76]	; (28340 <spi_flash_leave_low_power_mode+0x64>)
   282f4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   282f6:	687b      	ldr	r3, [r7, #4]
   282f8:	781b      	ldrb	r3, [r3, #0]
   282fa:	001a      	movs	r2, r3
   282fc:	4b11      	ldr	r3, [pc, #68]	; (28344 <spi_flash_leave_low_power_mode+0x68>)
   282fe:	0011      	movs	r1, r2
   28300:	0018      	movs	r0, r3
   28302:	4b0f      	ldr	r3, [pc, #60]	; (28340 <spi_flash_leave_low_power_mode+0x64>)
   28304:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   28306:	4b10      	ldr	r3, [pc, #64]	; (28348 <spi_flash_leave_low_power_mode+0x6c>)
   28308:	2101      	movs	r1, #1
   2830a:	0018      	movs	r0, r3
   2830c:	4b0c      	ldr	r3, [pc, #48]	; (28340 <spi_flash_leave_low_power_mode+0x64>)
   2830e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   28310:	4b0e      	ldr	r3, [pc, #56]	; (2834c <spi_flash_leave_low_power_mode+0x70>)
   28312:	2100      	movs	r1, #0
   28314:	0018      	movs	r0, r3
   28316:	4b0a      	ldr	r3, [pc, #40]	; (28340 <spi_flash_leave_low_power_mode+0x64>)
   28318:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   2831a:	4b0d      	ldr	r3, [pc, #52]	; (28350 <spi_flash_leave_low_power_mode+0x74>)
   2831c:	2181      	movs	r1, #129	; 0x81
   2831e:	0018      	movs	r0, r3
   28320:	4b07      	ldr	r3, [pc, #28]	; (28340 <spi_flash_leave_low_power_mode+0x64>)
   28322:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   28324:	46c0      	nop			; (mov r8, r8)
   28326:	4b0b      	ldr	r3, [pc, #44]	; (28354 <spi_flash_leave_low_power_mode+0x78>)
   28328:	0018      	movs	r0, r3
   2832a:	4b0b      	ldr	r3, [pc, #44]	; (28358 <spi_flash_leave_low_power_mode+0x7c>)
   2832c:	4798      	blx	r3
   2832e:	0003      	movs	r3, r0
   28330:	2b01      	cmp	r3, #1
   28332:	d1f8      	bne.n	28326 <spi_flash_leave_low_power_mode+0x4a>
}
   28334:	46c0      	nop			; (mov r8, r8)
   28336:	46bd      	mov	sp, r7
   28338:	b002      	add	sp, #8
   2833a:	bd80      	pop	{r7, pc}
   2833c:	00010208 	.word	0x00010208
   28340:	000250bd 	.word	0x000250bd
   28344:	0001020c 	.word	0x0001020c
   28348:	00010214 	.word	0x00010214
   2834c:	0001021c 	.word	0x0001021c
   28350:	00010204 	.word	0x00010204
   28354:	00010218 	.word	0x00010218
   28358:	00025079 	.word	0x00025079

0002835c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   2835c:	b590      	push	{r4, r7, lr}
   2835e:	b085      	sub	sp, #20
   28360:	af00      	add	r7, sp, #0
   28362:	0002      	movs	r2, r0
   28364:	1dfb      	adds	r3, r7, #7
   28366:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   28368:	230f      	movs	r3, #15
   2836a:	18fb      	adds	r3, r7, r3
   2836c:	2200      	movs	r2, #0
   2836e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   28370:	4b24      	ldr	r3, [pc, #144]	; (28404 <spi_flash_enable+0xa8>)
   28372:	4798      	blx	r3
   28374:	0003      	movs	r3, r0
   28376:	051b      	lsls	r3, r3, #20
   28378:	0d1b      	lsrs	r3, r3, #20
   2837a:	4a23      	ldr	r2, [pc, #140]	; (28408 <spi_flash_enable+0xac>)
   2837c:	4293      	cmp	r3, r2
   2837e:	d938      	bls.n	283f2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   28380:	230f      	movs	r3, #15
   28382:	18fc      	adds	r4, r7, r3
   28384:	2308      	movs	r3, #8
   28386:	18fb      	adds	r3, r7, r3
   28388:	4a20      	ldr	r2, [pc, #128]	; (2840c <spi_flash_enable+0xb0>)
   2838a:	0019      	movs	r1, r3
   2838c:	0010      	movs	r0, r2
   2838e:	4b20      	ldr	r3, [pc, #128]	; (28410 <spi_flash_enable+0xb4>)
   28390:	4798      	blx	r3
   28392:	0003      	movs	r3, r0
   28394:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   28396:	230f      	movs	r3, #15
   28398:	18fb      	adds	r3, r7, r3
   2839a:	781b      	ldrb	r3, [r3, #0]
   2839c:	b25b      	sxtb	r3, r3
   2839e:	2b00      	cmp	r3, #0
   283a0:	d126      	bne.n	283f0 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   283a2:	68bb      	ldr	r3, [r7, #8]
   283a4:	4a1b      	ldr	r2, [pc, #108]	; (28414 <spi_flash_enable+0xb8>)
   283a6:	4013      	ands	r3, r2
   283a8:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   283aa:	68bb      	ldr	r3, [r7, #8]
   283ac:	4a1a      	ldr	r2, [pc, #104]	; (28418 <spi_flash_enable+0xbc>)
   283ae:	4313      	orrs	r3, r2
   283b0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   283b2:	68bb      	ldr	r3, [r7, #8]
   283b4:	4a15      	ldr	r2, [pc, #84]	; (2840c <spi_flash_enable+0xb0>)
   283b6:	0019      	movs	r1, r3
   283b8:	0010      	movs	r0, r2
   283ba:	4b18      	ldr	r3, [pc, #96]	; (2841c <spi_flash_enable+0xc0>)
   283bc:	4798      	blx	r3
		if(enable) {
   283be:	1dfb      	adds	r3, r7, #7
   283c0:	781b      	ldrb	r3, [r3, #0]
   283c2:	2b00      	cmp	r3, #0
   283c4:	d002      	beq.n	283cc <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   283c6:	4b16      	ldr	r3, [pc, #88]	; (28420 <spi_flash_enable+0xc4>)
   283c8:	4798      	blx	r3
   283ca:	e001      	b.n	283d0 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   283cc:	4b15      	ldr	r3, [pc, #84]	; (28424 <spi_flash_enable+0xc8>)
   283ce:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   283d0:	68bb      	ldr	r3, [r7, #8]
   283d2:	4a10      	ldr	r2, [pc, #64]	; (28414 <spi_flash_enable+0xb8>)
   283d4:	4013      	ands	r3, r2
   283d6:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   283d8:	68bb      	ldr	r3, [r7, #8]
   283da:	2280      	movs	r2, #128	; 0x80
   283dc:	0252      	lsls	r2, r2, #9
   283de:	4313      	orrs	r3, r2
   283e0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   283e2:	68bb      	ldr	r3, [r7, #8]
   283e4:	4a09      	ldr	r2, [pc, #36]	; (2840c <spi_flash_enable+0xb0>)
   283e6:	0019      	movs	r1, r3
   283e8:	0010      	movs	r0, r2
   283ea:	4b0c      	ldr	r3, [pc, #48]	; (2841c <spi_flash_enable+0xc0>)
   283ec:	4798      	blx	r3
   283ee:	e000      	b.n	283f2 <spi_flash_enable+0x96>
			goto ERR1;
   283f0:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   283f2:	230f      	movs	r3, #15
   283f4:	18fb      	adds	r3, r7, r3
   283f6:	781b      	ldrb	r3, [r3, #0]
   283f8:	b25b      	sxtb	r3, r3
}
   283fa:	0018      	movs	r0, r3
   283fc:	46bd      	mov	sp, r7
   283fe:	b005      	add	sp, #20
   28400:	bd90      	pop	{r4, r7, pc}
   28402:	46c0      	nop			; (mov r8, r8)
   28404:	00024999 	.word	0x00024999
   28408:	0000039f 	.word	0x0000039f
   2840c:	00001410 	.word	0x00001410
   28410:	00025099 	.word	0x00025099
   28414:	f8888fff 	.word	0xf8888fff
   28418:	01111000 	.word	0x01111000
   2841c:	000250bd 	.word	0x000250bd
   28420:	000282dd 	.word	0x000282dd
   28424:	0002825d 	.word	0x0002825d

00028428 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   28428:	b580      	push	{r7, lr}
   2842a:	b084      	sub	sp, #16
   2842c:	af00      	add	r7, sp, #0
   2842e:	0002      	movs	r2, r0
   28430:	1dfb      	adds	r3, r7, #7
   28432:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   28434:	1dfb      	adds	r3, r7, #7
   28436:	781b      	ldrb	r3, [r3, #0]
   28438:	2b00      	cmp	r3, #0
   2843a:	d108      	bne.n	2844e <mem_test_unit_ready+0x26>
   2843c:	1dfb      	adds	r3, r7, #7
   2843e:	781a      	ldrb	r2, [r3, #0]
   28440:	4b08      	ldr	r3, [pc, #32]	; (28464 <mem_test_unit_ready+0x3c>)
   28442:	0152      	lsls	r2, r2, #5
   28444:	58d3      	ldr	r3, [r2, r3]
   28446:	4798      	blx	r3
   28448:	0003      	movs	r3, r0
   2844a:	001a      	movs	r2, r3
   2844c:	e000      	b.n	28450 <mem_test_unit_ready+0x28>
   2844e:	2201      	movs	r2, #1
  status =
   28450:	230f      	movs	r3, #15
   28452:	18fb      	adds	r3, r7, r3
   28454:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   28456:	230f      	movs	r3, #15
   28458:	18fb      	adds	r3, r7, r3
   2845a:	781b      	ldrb	r3, [r3, #0]
}
   2845c:	0018      	movs	r0, r3
   2845e:	46bd      	mov	sp, r7
   28460:	b004      	add	sp, #16
   28462:	bd80      	pop	{r7, pc}
   28464:	0003c7a0 	.word	0x0003c7a0

00028468 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   28468:	b580      	push	{r7, lr}
   2846a:	b084      	sub	sp, #16
   2846c:	af00      	add	r7, sp, #0
   2846e:	0002      	movs	r2, r0
   28470:	6039      	str	r1, [r7, #0]
   28472:	1dfb      	adds	r3, r7, #7
   28474:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   28476:	1dfb      	adds	r3, r7, #7
   28478:	781b      	ldrb	r3, [r3, #0]
   2847a:	2b00      	cmp	r3, #0
   2847c:	d10c      	bne.n	28498 <mem_read_capacity+0x30>
   2847e:	1dfb      	adds	r3, r7, #7
   28480:	781b      	ldrb	r3, [r3, #0]
   28482:	4a0b      	ldr	r2, [pc, #44]	; (284b0 <mem_read_capacity+0x48>)
   28484:	015b      	lsls	r3, r3, #5
   28486:	18d3      	adds	r3, r2, r3
   28488:	3304      	adds	r3, #4
   2848a:	681b      	ldr	r3, [r3, #0]
   2848c:	683a      	ldr	r2, [r7, #0]
   2848e:	0010      	movs	r0, r2
   28490:	4798      	blx	r3
   28492:	0003      	movs	r3, r0
   28494:	001a      	movs	r2, r3
   28496:	e000      	b.n	2849a <mem_read_capacity+0x32>
   28498:	2201      	movs	r2, #1
  status =
   2849a:	230f      	movs	r3, #15
   2849c:	18fb      	adds	r3, r7, r3
   2849e:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   284a0:	230f      	movs	r3, #15
   284a2:	18fb      	adds	r3, r7, r3
   284a4:	781b      	ldrb	r3, [r3, #0]
}
   284a6:	0018      	movs	r0, r3
   284a8:	46bd      	mov	sp, r7
   284aa:	b004      	add	sp, #16
   284ac:	bd80      	pop	{r7, pc}
   284ae:	46c0      	nop			; (mov r8, r8)
   284b0:	0003c7a0 	.word	0x0003c7a0

000284b4 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   284b4:	b580      	push	{r7, lr}
   284b6:	b084      	sub	sp, #16
   284b8:	af00      	add	r7, sp, #0
   284ba:	0002      	movs	r2, r0
   284bc:	1dfb      	adds	r3, r7, #7
   284be:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   284c0:	1dfb      	adds	r3, r7, #7
   284c2:	781b      	ldrb	r3, [r3, #0]
   284c4:	425a      	negs	r2, r3
   284c6:	4153      	adcs	r3, r2
   284c8:	b2da      	uxtb	r2, r3
  sector_size =
   284ca:	230f      	movs	r3, #15
   284cc:	18fb      	adds	r3, r7, r3
   284ce:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   284d0:	230f      	movs	r3, #15
   284d2:	18fb      	adds	r3, r7, r3
   284d4:	781b      	ldrb	r3, [r3, #0]
}
   284d6:	0018      	movs	r0, r3
   284d8:	46bd      	mov	sp, r7
   284da:	b004      	add	sp, #16
   284dc:	bd80      	pop	{r7, pc}
	...

000284e0 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   284e0:	b580      	push	{r7, lr}
   284e2:	b084      	sub	sp, #16
   284e4:	af00      	add	r7, sp, #0
   284e6:	0002      	movs	r2, r0
   284e8:	1dfb      	adds	r3, r7, #7
   284ea:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   284ec:	1dfb      	adds	r3, r7, #7
   284ee:	781b      	ldrb	r3, [r3, #0]
   284f0:	2b00      	cmp	r3, #0
   284f2:	d109      	bne.n	28508 <mem_wr_protect+0x28>
   284f4:	1dfb      	adds	r3, r7, #7
   284f6:	781b      	ldrb	r3, [r3, #0]
   284f8:	4a0a      	ldr	r2, [pc, #40]	; (28524 <mem_wr_protect+0x44>)
   284fa:	015b      	lsls	r3, r3, #5
   284fc:	18d3      	adds	r3, r2, r3
   284fe:	330c      	adds	r3, #12
   28500:	681b      	ldr	r3, [r3, #0]
   28502:	4798      	blx	r3
   28504:	1e03      	subs	r3, r0, #0
   28506:	d001      	beq.n	2850c <mem_wr_protect+0x2c>
   28508:	2201      	movs	r2, #1
   2850a:	e000      	b.n	2850e <mem_wr_protect+0x2e>
   2850c:	2200      	movs	r2, #0
  wr_protect =
   2850e:	230f      	movs	r3, #15
   28510:	18fb      	adds	r3, r7, r3
   28512:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   28514:	230f      	movs	r3, #15
   28516:	18fb      	adds	r3, r7, r3
   28518:	781b      	ldrb	r3, [r3, #0]
}
   2851a:	0018      	movs	r0, r3
   2851c:	46bd      	mov	sp, r7
   2851e:	b004      	add	sp, #16
   28520:	bd80      	pop	{r7, pc}
   28522:	46c0      	nop			; (mov r8, r8)
   28524:	0003c7a0 	.word	0x0003c7a0

00028528 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   28528:	b580      	push	{r7, lr}
   2852a:	b086      	sub	sp, #24
   2852c:	af00      	add	r7, sp, #0
   2852e:	60b9      	str	r1, [r7, #8]
   28530:	607a      	str	r2, [r7, #4]
   28532:	230f      	movs	r3, #15
   28534:	18fb      	adds	r3, r7, r3
   28536:	1c02      	adds	r2, r0, #0
   28538:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   2853a:	230f      	movs	r3, #15
   2853c:	18fb      	adds	r3, r7, r3
   2853e:	781b      	ldrb	r3, [r3, #0]
   28540:	2b00      	cmp	r3, #0
   28542:	d10e      	bne.n	28562 <memory_2_ram+0x3a>
   28544:	230f      	movs	r3, #15
   28546:	18fb      	adds	r3, r7, r3
   28548:	781b      	ldrb	r3, [r3, #0]
   2854a:	4a0b      	ldr	r2, [pc, #44]	; (28578 <memory_2_ram+0x50>)
   2854c:	015b      	lsls	r3, r3, #5
   2854e:	18d3      	adds	r3, r2, r3
   28550:	3314      	adds	r3, #20
   28552:	681b      	ldr	r3, [r3, #0]
   28554:	6879      	ldr	r1, [r7, #4]
   28556:	68ba      	ldr	r2, [r7, #8]
   28558:	0010      	movs	r0, r2
   2855a:	4798      	blx	r3
   2855c:	0003      	movs	r3, r0
   2855e:	001a      	movs	r2, r3
   28560:	e000      	b.n	28564 <memory_2_ram+0x3c>
   28562:	2201      	movs	r2, #1
  status =
   28564:	2317      	movs	r3, #23
   28566:	18fb      	adds	r3, r7, r3
   28568:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   2856a:	2317      	movs	r3, #23
   2856c:	18fb      	adds	r3, r7, r3
   2856e:	781b      	ldrb	r3, [r3, #0]
}
   28570:	0018      	movs	r0, r3
   28572:	46bd      	mov	sp, r7
   28574:	b006      	add	sp, #24
   28576:	bd80      	pop	{r7, pc}
   28578:	0003c7a0 	.word	0x0003c7a0

0002857c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   2857c:	b580      	push	{r7, lr}
   2857e:	b086      	sub	sp, #24
   28580:	af00      	add	r7, sp, #0
   28582:	60b9      	str	r1, [r7, #8]
   28584:	607a      	str	r2, [r7, #4]
   28586:	230f      	movs	r3, #15
   28588:	18fb      	adds	r3, r7, r3
   2858a:	1c02      	adds	r2, r0, #0
   2858c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2858e:	230f      	movs	r3, #15
   28590:	18fb      	adds	r3, r7, r3
   28592:	781b      	ldrb	r3, [r3, #0]
   28594:	2b00      	cmp	r3, #0
   28596:	d10e      	bne.n	285b6 <ram_2_memory+0x3a>
   28598:	230f      	movs	r3, #15
   2859a:	18fb      	adds	r3, r7, r3
   2859c:	781b      	ldrb	r3, [r3, #0]
   2859e:	4a0b      	ldr	r2, [pc, #44]	; (285cc <ram_2_memory+0x50>)
   285a0:	015b      	lsls	r3, r3, #5
   285a2:	18d3      	adds	r3, r2, r3
   285a4:	3318      	adds	r3, #24
   285a6:	681b      	ldr	r3, [r3, #0]
   285a8:	6879      	ldr	r1, [r7, #4]
   285aa:	68ba      	ldr	r2, [r7, #8]
   285ac:	0010      	movs	r0, r2
   285ae:	4798      	blx	r3
   285b0:	0003      	movs	r3, r0
   285b2:	001a      	movs	r2, r3
   285b4:	e000      	b.n	285b8 <ram_2_memory+0x3c>
   285b6:	2201      	movs	r2, #1
  status =
   285b8:	2317      	movs	r3, #23
   285ba:	18fb      	adds	r3, r7, r3
   285bc:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   285be:	2317      	movs	r3, #23
   285c0:	18fb      	adds	r3, r7, r3
   285c2:	781b      	ldrb	r3, [r3, #0]
}
   285c4:	0018      	movs	r0, r3
   285c6:	46bd      	mov	sp, r7
   285c8:	b006      	add	sp, #24
   285ca:	bd80      	pop	{r7, pc}
   285cc:	0003c7a0 	.word	0x0003c7a0

000285d0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   285d0:	b580      	push	{r7, lr}
   285d2:	b082      	sub	sp, #8
   285d4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   285d6:	4b10      	ldr	r3, [pc, #64]	; (28618 <cpu_irq_enter_critical+0x48>)
   285d8:	681b      	ldr	r3, [r3, #0]
   285da:	2b00      	cmp	r3, #0
   285dc:	d112      	bne.n	28604 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   285de:	f3ef 8310 	mrs	r3, PRIMASK
   285e2:	607b      	str	r3, [r7, #4]
  return(result);
   285e4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   285e6:	2b00      	cmp	r3, #0
   285e8:	d109      	bne.n	285fe <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   285ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   285ec:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   285f0:	4b0a      	ldr	r3, [pc, #40]	; (2861c <cpu_irq_enter_critical+0x4c>)
   285f2:	2200      	movs	r2, #0
   285f4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   285f6:	4b0a      	ldr	r3, [pc, #40]	; (28620 <cpu_irq_enter_critical+0x50>)
   285f8:	2201      	movs	r2, #1
   285fa:	701a      	strb	r2, [r3, #0]
   285fc:	e002      	b.n	28604 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   285fe:	4b08      	ldr	r3, [pc, #32]	; (28620 <cpu_irq_enter_critical+0x50>)
   28600:	2200      	movs	r2, #0
   28602:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   28604:	4b04      	ldr	r3, [pc, #16]	; (28618 <cpu_irq_enter_critical+0x48>)
   28606:	681b      	ldr	r3, [r3, #0]
   28608:	1c5a      	adds	r2, r3, #1
   2860a:	4b03      	ldr	r3, [pc, #12]	; (28618 <cpu_irq_enter_critical+0x48>)
   2860c:	601a      	str	r2, [r3, #0]
}
   2860e:	46c0      	nop			; (mov r8, r8)
   28610:	46bd      	mov	sp, r7
   28612:	b002      	add	sp, #8
   28614:	bd80      	pop	{r7, pc}
   28616:	46c0      	nop			; (mov r8, r8)
   28618:	2000412c 	.word	0x2000412c
   2861c:	2000012e 	.word	0x2000012e
   28620:	20004130 	.word	0x20004130

00028624 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   28624:	b580      	push	{r7, lr}
   28626:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   28628:	4b0b      	ldr	r3, [pc, #44]	; (28658 <cpu_irq_leave_critical+0x34>)
   2862a:	681b      	ldr	r3, [r3, #0]
   2862c:	1e5a      	subs	r2, r3, #1
   2862e:	4b0a      	ldr	r3, [pc, #40]	; (28658 <cpu_irq_leave_critical+0x34>)
   28630:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   28632:	4b09      	ldr	r3, [pc, #36]	; (28658 <cpu_irq_leave_critical+0x34>)
   28634:	681b      	ldr	r3, [r3, #0]
   28636:	2b00      	cmp	r3, #0
   28638:	d10a      	bne.n	28650 <cpu_irq_leave_critical+0x2c>
   2863a:	4b08      	ldr	r3, [pc, #32]	; (2865c <cpu_irq_leave_critical+0x38>)
   2863c:	781b      	ldrb	r3, [r3, #0]
   2863e:	b2db      	uxtb	r3, r3
   28640:	2b00      	cmp	r3, #0
   28642:	d005      	beq.n	28650 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   28644:	4b06      	ldr	r3, [pc, #24]	; (28660 <cpu_irq_leave_critical+0x3c>)
   28646:	2201      	movs	r2, #1
   28648:	701a      	strb	r2, [r3, #0]
   2864a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2864e:	b662      	cpsie	i
	}
}
   28650:	46c0      	nop			; (mov r8, r8)
   28652:	46bd      	mov	sp, r7
   28654:	bd80      	pop	{r7, pc}
   28656:	46c0      	nop			; (mov r8, r8)
   28658:	2000412c 	.word	0x2000412c
   2865c:	20004130 	.word	0x20004130
   28660:	2000012e 	.word	0x2000012e

00028664 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   28664:	b580      	push	{r7, lr}
   28666:	b084      	sub	sp, #16
   28668:	af00      	add	r7, sp, #0
   2866a:	0002      	movs	r2, r0
   2866c:	1dfb      	adds	r3, r7, #7
   2866e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28670:	230f      	movs	r3, #15
   28672:	18fb      	adds	r3, r7, r3
   28674:	1dfa      	adds	r2, r7, #7
   28676:	7812      	ldrb	r2, [r2, #0]
   28678:	09d2      	lsrs	r2, r2, #7
   2867a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2867c:	230e      	movs	r3, #14
   2867e:	18fb      	adds	r3, r7, r3
   28680:	1dfa      	adds	r2, r7, #7
   28682:	7812      	ldrb	r2, [r2, #0]
   28684:	0952      	lsrs	r2, r2, #5
   28686:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28688:	4b0d      	ldr	r3, [pc, #52]	; (286c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2868a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   2868c:	230f      	movs	r3, #15
   2868e:	18fb      	adds	r3, r7, r3
   28690:	781b      	ldrb	r3, [r3, #0]
   28692:	2b00      	cmp	r3, #0
   28694:	d10f      	bne.n	286b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   28696:	230f      	movs	r3, #15
   28698:	18fb      	adds	r3, r7, r3
   2869a:	781b      	ldrb	r3, [r3, #0]
   2869c:	009b      	lsls	r3, r3, #2
   2869e:	2210      	movs	r2, #16
   286a0:	4694      	mov	ip, r2
   286a2:	44bc      	add	ip, r7
   286a4:	4463      	add	r3, ip
   286a6:	3b08      	subs	r3, #8
   286a8:	681a      	ldr	r2, [r3, #0]
   286aa:	230e      	movs	r3, #14
   286ac:	18fb      	adds	r3, r7, r3
   286ae:	781b      	ldrb	r3, [r3, #0]
   286b0:	01db      	lsls	r3, r3, #7
   286b2:	18d3      	adds	r3, r2, r3
   286b4:	e000      	b.n	286b8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   286b6:	2300      	movs	r3, #0
	}
}
   286b8:	0018      	movs	r0, r3
   286ba:	46bd      	mov	sp, r7
   286bc:	b004      	add	sp, #16
   286be:	bd80      	pop	{r7, pc}
   286c0:	41004400 	.word	0x41004400

000286c4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   286c4:	b580      	push	{r7, lr}
   286c6:	b082      	sub	sp, #8
   286c8:	af00      	add	r7, sp, #0
   286ca:	0002      	movs	r2, r0
   286cc:	1dfb      	adds	r3, r7, #7
   286ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   286d0:	1dfb      	adds	r3, r7, #7
   286d2:	781b      	ldrb	r3, [r3, #0]
   286d4:	0018      	movs	r0, r3
   286d6:	4b03      	ldr	r3, [pc, #12]	; (286e4 <port_get_group_from_gpio_pin+0x20>)
   286d8:	4798      	blx	r3
   286da:	0003      	movs	r3, r0
}
   286dc:	0018      	movs	r0, r3
   286de:	46bd      	mov	sp, r7
   286e0:	b002      	add	sp, #8
   286e2:	bd80      	pop	{r7, pc}
   286e4:	00028665 	.word	0x00028665

000286e8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   286e8:	b580      	push	{r7, lr}
   286ea:	b082      	sub	sp, #8
   286ec:	af00      	add	r7, sp, #0
   286ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   286f0:	687b      	ldr	r3, [r7, #4]
   286f2:	2200      	movs	r2, #0
   286f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   286f6:	687b      	ldr	r3, [r7, #4]
   286f8:	2201      	movs	r2, #1
   286fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   286fc:	687b      	ldr	r3, [r7, #4]
   286fe:	2200      	movs	r2, #0
   28700:	709a      	strb	r2, [r3, #2]
}
   28702:	46c0      	nop			; (mov r8, r8)
   28704:	46bd      	mov	sp, r7
   28706:	b002      	add	sp, #8
   28708:	bd80      	pop	{r7, pc}
	...

0002870c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   2870c:	b580      	push	{r7, lr}
   2870e:	b084      	sub	sp, #16
   28710:	af00      	add	r7, sp, #0
   28712:	0002      	movs	r2, r0
   28714:	1dfb      	adds	r3, r7, #7
   28716:	701a      	strb	r2, [r3, #0]
   28718:	1dbb      	adds	r3, r7, #6
   2871a:	1c0a      	adds	r2, r1, #0
   2871c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2871e:	1dfb      	adds	r3, r7, #7
   28720:	781b      	ldrb	r3, [r3, #0]
   28722:	0018      	movs	r0, r3
   28724:	4b0d      	ldr	r3, [pc, #52]	; (2875c <port_pin_set_output_level+0x50>)
   28726:	4798      	blx	r3
   28728:	0003      	movs	r3, r0
   2872a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2872c:	1dfb      	adds	r3, r7, #7
   2872e:	781b      	ldrb	r3, [r3, #0]
   28730:	221f      	movs	r2, #31
   28732:	4013      	ands	r3, r2
   28734:	2201      	movs	r2, #1
   28736:	409a      	lsls	r2, r3
   28738:	0013      	movs	r3, r2
   2873a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   2873c:	1dbb      	adds	r3, r7, #6
   2873e:	781b      	ldrb	r3, [r3, #0]
   28740:	2b00      	cmp	r3, #0
   28742:	d003      	beq.n	2874c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28744:	68fb      	ldr	r3, [r7, #12]
   28746:	68ba      	ldr	r2, [r7, #8]
   28748:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   2874a:	e002      	b.n	28752 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2874c:	68fb      	ldr	r3, [r7, #12]
   2874e:	68ba      	ldr	r2, [r7, #8]
   28750:	615a      	str	r2, [r3, #20]
}
   28752:	46c0      	nop			; (mov r8, r8)
   28754:	46bd      	mov	sp, r7
   28756:	b004      	add	sp, #16
   28758:	bd80      	pop	{r7, pc}
   2875a:	46c0      	nop			; (mov r8, r8)
   2875c:	000286c5 	.word	0x000286c5

00028760 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   28760:	b580      	push	{r7, lr}
   28762:	b082      	sub	sp, #8
   28764:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   28766:	1d3b      	adds	r3, r7, #4
   28768:	0018      	movs	r0, r3
   2876a:	4b0e      	ldr	r3, [pc, #56]	; (287a4 <system_board_init+0x44>)
   2876c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2876e:	1d3b      	adds	r3, r7, #4
   28770:	2201      	movs	r2, #1
   28772:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   28774:	1d3b      	adds	r3, r7, #4
   28776:	0019      	movs	r1, r3
   28778:	2017      	movs	r0, #23
   2877a:	4b0b      	ldr	r3, [pc, #44]	; (287a8 <system_board_init+0x48>)
   2877c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   2877e:	2101      	movs	r1, #1
   28780:	2017      	movs	r0, #23
   28782:	4b0a      	ldr	r3, [pc, #40]	; (287ac <system_board_init+0x4c>)
   28784:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   28786:	1d3b      	adds	r3, r7, #4
   28788:	2200      	movs	r2, #0
   2878a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   2878c:	1d3b      	adds	r3, r7, #4
   2878e:	2201      	movs	r2, #1
   28790:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   28792:	1d3b      	adds	r3, r7, #4
   28794:	0019      	movs	r1, r3
   28796:	2037      	movs	r0, #55	; 0x37
   28798:	4b03      	ldr	r3, [pc, #12]	; (287a8 <system_board_init+0x48>)
   2879a:	4798      	blx	r3
}
   2879c:	46c0      	nop			; (mov r8, r8)
   2879e:	46bd      	mov	sp, r7
   287a0:	b002      	add	sp, #8
   287a2:	bd80      	pop	{r7, pc}
   287a4:	000286e9 	.word	0x000286e9
   287a8:	00028dd5 	.word	0x00028dd5
   287ac:	0002870d 	.word	0x0002870d

000287b0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   287b0:	b580      	push	{r7, lr}
   287b2:	b084      	sub	sp, #16
   287b4:	af00      	add	r7, sp, #0
   287b6:	0002      	movs	r2, r0
   287b8:	1dfb      	adds	r3, r7, #7
   287ba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   287bc:	230f      	movs	r3, #15
   287be:	18fb      	adds	r3, r7, r3
   287c0:	1dfa      	adds	r2, r7, #7
   287c2:	7812      	ldrb	r2, [r2, #0]
   287c4:	0952      	lsrs	r2, r2, #5
   287c6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   287c8:	230f      	movs	r3, #15
   287ca:	18fb      	adds	r3, r7, r3
   287cc:	781b      	ldrb	r3, [r3, #0]
   287ce:	2b00      	cmp	r3, #0
   287d0:	d10c      	bne.n	287ec <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   287d2:	4b09      	ldr	r3, [pc, #36]	; (287f8 <_extint_get_eic_from_channel+0x48>)
   287d4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   287d6:	230f      	movs	r3, #15
   287d8:	18fb      	adds	r3, r7, r3
   287da:	781b      	ldrb	r3, [r3, #0]
   287dc:	009b      	lsls	r3, r3, #2
   287de:	2210      	movs	r2, #16
   287e0:	4694      	mov	ip, r2
   287e2:	44bc      	add	ip, r7
   287e4:	4463      	add	r3, ip
   287e6:	3b08      	subs	r3, #8
   287e8:	681b      	ldr	r3, [r3, #0]
   287ea:	e000      	b.n	287ee <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   287ec:	2300      	movs	r3, #0
	}
}
   287ee:	0018      	movs	r0, r3
   287f0:	46bd      	mov	sp, r7
   287f2:	b004      	add	sp, #16
   287f4:	bd80      	pop	{r7, pc}
   287f6:	46c0      	nop			; (mov r8, r8)
   287f8:	40001800 	.word	0x40001800

000287fc <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   287fc:	b580      	push	{r7, lr}
   287fe:	b084      	sub	sp, #16
   28800:	af00      	add	r7, sp, #0
   28802:	0002      	movs	r2, r0
   28804:	1dfb      	adds	r3, r7, #7
   28806:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   28808:	1dfb      	adds	r3, r7, #7
   2880a:	781b      	ldrb	r3, [r3, #0]
   2880c:	0018      	movs	r0, r3
   2880e:	4b0b      	ldr	r3, [pc, #44]	; (2883c <extint_chan_is_detected+0x40>)
   28810:	4798      	blx	r3
   28812:	0003      	movs	r3, r0
   28814:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   28816:	1dfb      	adds	r3, r7, #7
   28818:	781b      	ldrb	r3, [r3, #0]
   2881a:	221f      	movs	r2, #31
   2881c:	4013      	ands	r3, r2
   2881e:	2201      	movs	r2, #1
   28820:	409a      	lsls	r2, r3
   28822:	0013      	movs	r3, r2
   28824:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   28826:	68fb      	ldr	r3, [r7, #12]
   28828:	691b      	ldr	r3, [r3, #16]
   2882a:	68ba      	ldr	r2, [r7, #8]
   2882c:	4013      	ands	r3, r2
   2882e:	1e5a      	subs	r2, r3, #1
   28830:	4193      	sbcs	r3, r2
   28832:	b2db      	uxtb	r3, r3
}
   28834:	0018      	movs	r0, r3
   28836:	46bd      	mov	sp, r7
   28838:	b004      	add	sp, #16
   2883a:	bd80      	pop	{r7, pc}
   2883c:	000287b1 	.word	0x000287b1

00028840 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   28840:	b580      	push	{r7, lr}
   28842:	b084      	sub	sp, #16
   28844:	af00      	add	r7, sp, #0
   28846:	0002      	movs	r2, r0
   28848:	1dfb      	adds	r3, r7, #7
   2884a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2884c:	1dfb      	adds	r3, r7, #7
   2884e:	781b      	ldrb	r3, [r3, #0]
   28850:	0018      	movs	r0, r3
   28852:	4b09      	ldr	r3, [pc, #36]	; (28878 <extint_chan_clear_detected+0x38>)
   28854:	4798      	blx	r3
   28856:	0003      	movs	r3, r0
   28858:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2885a:	1dfb      	adds	r3, r7, #7
   2885c:	781b      	ldrb	r3, [r3, #0]
   2885e:	221f      	movs	r2, #31
   28860:	4013      	ands	r3, r2
   28862:	2201      	movs	r2, #1
   28864:	409a      	lsls	r2, r3
   28866:	0013      	movs	r3, r2
   28868:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   2886a:	68fb      	ldr	r3, [r7, #12]
   2886c:	68ba      	ldr	r2, [r7, #8]
   2886e:	611a      	str	r2, [r3, #16]
}
   28870:	46c0      	nop			; (mov r8, r8)
   28872:	46bd      	mov	sp, r7
   28874:	b004      	add	sp, #16
   28876:	bd80      	pop	{r7, pc}
   28878:	000287b1 	.word	0x000287b1

0002887c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2887c:	b580      	push	{r7, lr}
   2887e:	b082      	sub	sp, #8
   28880:	af00      	add	r7, sp, #0
   28882:	6078      	str	r0, [r7, #4]
   28884:	0008      	movs	r0, r1
   28886:	0011      	movs	r1, r2
   28888:	1cfb      	adds	r3, r7, #3
   2888a:	1c02      	adds	r2, r0, #0
   2888c:	701a      	strb	r2, [r3, #0]
   2888e:	1cbb      	adds	r3, r7, #2
   28890:	1c0a      	adds	r2, r1, #0
   28892:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   28894:	1cbb      	adds	r3, r7, #2
   28896:	781b      	ldrb	r3, [r3, #0]
   28898:	2b00      	cmp	r3, #0
   2889a:	d001      	beq.n	288a0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2889c:	2317      	movs	r3, #23
   2889e:	e019      	b.n	288d4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   288a0:	1cfb      	adds	r3, r7, #3
   288a2:	781a      	ldrb	r2, [r3, #0]
   288a4:	4b0d      	ldr	r3, [pc, #52]	; (288dc <extint_register_callback+0x60>)
   288a6:	0092      	lsls	r2, r2, #2
   288a8:	58d3      	ldr	r3, [r2, r3]
   288aa:	2b00      	cmp	r3, #0
   288ac:	d107      	bne.n	288be <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   288ae:	1cfb      	adds	r3, r7, #3
   288b0:	781a      	ldrb	r2, [r3, #0]
   288b2:	4b0a      	ldr	r3, [pc, #40]	; (288dc <extint_register_callback+0x60>)
   288b4:	0092      	lsls	r2, r2, #2
   288b6:	6879      	ldr	r1, [r7, #4]
   288b8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   288ba:	2300      	movs	r3, #0
   288bc:	e00a      	b.n	288d4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   288be:	1cfb      	adds	r3, r7, #3
   288c0:	781a      	ldrb	r2, [r3, #0]
   288c2:	4b06      	ldr	r3, [pc, #24]	; (288dc <extint_register_callback+0x60>)
   288c4:	0092      	lsls	r2, r2, #2
   288c6:	58d2      	ldr	r2, [r2, r3]
   288c8:	687b      	ldr	r3, [r7, #4]
   288ca:	429a      	cmp	r2, r3
   288cc:	d101      	bne.n	288d2 <extint_register_callback+0x56>
		return STATUS_OK;
   288ce:	2300      	movs	r3, #0
   288d0:	e000      	b.n	288d4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   288d2:	231d      	movs	r3, #29
}
   288d4:	0018      	movs	r0, r3
   288d6:	46bd      	mov	sp, r7
   288d8:	b002      	add	sp, #8
   288da:	bd80      	pop	{r7, pc}
   288dc:	20005a40 	.word	0x20005a40

000288e0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   288e0:	b580      	push	{r7, lr}
   288e2:	b084      	sub	sp, #16
   288e4:	af00      	add	r7, sp, #0
   288e6:	0002      	movs	r2, r0
   288e8:	1dfb      	adds	r3, r7, #7
   288ea:	701a      	strb	r2, [r3, #0]
   288ec:	1dbb      	adds	r3, r7, #6
   288ee:	1c0a      	adds	r2, r1, #0
   288f0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   288f2:	1dbb      	adds	r3, r7, #6
   288f4:	781b      	ldrb	r3, [r3, #0]
   288f6:	2b00      	cmp	r3, #0
   288f8:	d10e      	bne.n	28918 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   288fa:	1dfb      	adds	r3, r7, #7
   288fc:	781b      	ldrb	r3, [r3, #0]
   288fe:	0018      	movs	r0, r3
   28900:	4b08      	ldr	r3, [pc, #32]	; (28924 <extint_chan_enable_callback+0x44>)
   28902:	4798      	blx	r3
   28904:	0003      	movs	r3, r0
   28906:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   28908:	1dfb      	adds	r3, r7, #7
   2890a:	781b      	ldrb	r3, [r3, #0]
   2890c:	2201      	movs	r2, #1
   2890e:	409a      	lsls	r2, r3
   28910:	68fb      	ldr	r3, [r7, #12]
   28912:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   28914:	2300      	movs	r3, #0
   28916:	e000      	b.n	2891a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   28918:	2317      	movs	r3, #23
}
   2891a:	0018      	movs	r0, r3
   2891c:	46bd      	mov	sp, r7
   2891e:	b004      	add	sp, #16
   28920:	bd80      	pop	{r7, pc}
   28922:	46c0      	nop			; (mov r8, r8)
   28924:	000287b1 	.word	0x000287b1

00028928 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   28928:	b580      	push	{r7, lr}
   2892a:	b084      	sub	sp, #16
   2892c:	af00      	add	r7, sp, #0
   2892e:	0002      	movs	r2, r0
   28930:	1dfb      	adds	r3, r7, #7
   28932:	701a      	strb	r2, [r3, #0]
   28934:	1dbb      	adds	r3, r7, #6
   28936:	1c0a      	adds	r2, r1, #0
   28938:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2893a:	1dbb      	adds	r3, r7, #6
   2893c:	781b      	ldrb	r3, [r3, #0]
   2893e:	2b00      	cmp	r3, #0
   28940:	d10e      	bne.n	28960 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   28942:	1dfb      	adds	r3, r7, #7
   28944:	781b      	ldrb	r3, [r3, #0]
   28946:	0018      	movs	r0, r3
   28948:	4b08      	ldr	r3, [pc, #32]	; (2896c <extint_chan_disable_callback+0x44>)
   2894a:	4798      	blx	r3
   2894c:	0003      	movs	r3, r0
   2894e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   28950:	1dfb      	adds	r3, r7, #7
   28952:	781b      	ldrb	r3, [r3, #0]
   28954:	2201      	movs	r2, #1
   28956:	409a      	lsls	r2, r3
   28958:	68fb      	ldr	r3, [r7, #12]
   2895a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2895c:	2300      	movs	r3, #0
   2895e:	e000      	b.n	28962 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   28960:	2317      	movs	r3, #23
}
   28962:	0018      	movs	r0, r3
   28964:	46bd      	mov	sp, r7
   28966:	b004      	add	sp, #16
   28968:	bd80      	pop	{r7, pc}
   2896a:	46c0      	nop			; (mov r8, r8)
   2896c:	000287b1 	.word	0x000287b1

00028970 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   28970:	b580      	push	{r7, lr}
   28972:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   28974:	4b15      	ldr	r3, [pc, #84]	; (289cc <EIC_Handler+0x5c>)
   28976:	2200      	movs	r2, #0
   28978:	701a      	strb	r2, [r3, #0]
   2897a:	e020      	b.n	289be <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   2897c:	4b13      	ldr	r3, [pc, #76]	; (289cc <EIC_Handler+0x5c>)
   2897e:	781b      	ldrb	r3, [r3, #0]
   28980:	0018      	movs	r0, r3
   28982:	4b13      	ldr	r3, [pc, #76]	; (289d0 <EIC_Handler+0x60>)
   28984:	4798      	blx	r3
   28986:	1e03      	subs	r3, r0, #0
   28988:	d013      	beq.n	289b2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   2898a:	4b10      	ldr	r3, [pc, #64]	; (289cc <EIC_Handler+0x5c>)
   2898c:	781b      	ldrb	r3, [r3, #0]
   2898e:	0018      	movs	r0, r3
   28990:	4b10      	ldr	r3, [pc, #64]	; (289d4 <EIC_Handler+0x64>)
   28992:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   28994:	4b0d      	ldr	r3, [pc, #52]	; (289cc <EIC_Handler+0x5c>)
   28996:	781b      	ldrb	r3, [r3, #0]
   28998:	001a      	movs	r2, r3
   2899a:	4b0f      	ldr	r3, [pc, #60]	; (289d8 <EIC_Handler+0x68>)
   2899c:	0092      	lsls	r2, r2, #2
   2899e:	58d3      	ldr	r3, [r2, r3]
   289a0:	2b00      	cmp	r3, #0
   289a2:	d006      	beq.n	289b2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   289a4:	4b09      	ldr	r3, [pc, #36]	; (289cc <EIC_Handler+0x5c>)
   289a6:	781b      	ldrb	r3, [r3, #0]
   289a8:	001a      	movs	r2, r3
   289aa:	4b0b      	ldr	r3, [pc, #44]	; (289d8 <EIC_Handler+0x68>)
   289ac:	0092      	lsls	r2, r2, #2
   289ae:	58d3      	ldr	r3, [r2, r3]
   289b0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   289b2:	4b06      	ldr	r3, [pc, #24]	; (289cc <EIC_Handler+0x5c>)
   289b4:	781b      	ldrb	r3, [r3, #0]
   289b6:	3301      	adds	r3, #1
   289b8:	b2da      	uxtb	r2, r3
   289ba:	4b04      	ldr	r3, [pc, #16]	; (289cc <EIC_Handler+0x5c>)
   289bc:	701a      	strb	r2, [r3, #0]
   289be:	4b03      	ldr	r3, [pc, #12]	; (289cc <EIC_Handler+0x5c>)
   289c0:	781b      	ldrb	r3, [r3, #0]
   289c2:	2b0f      	cmp	r3, #15
   289c4:	d9da      	bls.n	2897c <EIC_Handler+0xc>
			}
		}
	}
}
   289c6:	46c0      	nop			; (mov r8, r8)
   289c8:	46bd      	mov	sp, r7
   289ca:	bd80      	pop	{r7, pc}
   289cc:	20005a3c 	.word	0x20005a3c
   289d0:	000287fd 	.word	0x000287fd
   289d4:	00028841 	.word	0x00028841
   289d8:	20005a40 	.word	0x20005a40

000289dc <system_gclk_chan_get_config_defaults>:
{
   289dc:	b580      	push	{r7, lr}
   289de:	b082      	sub	sp, #8
   289e0:	af00      	add	r7, sp, #0
   289e2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   289e4:	687b      	ldr	r3, [r7, #4]
   289e6:	2200      	movs	r2, #0
   289e8:	701a      	strb	r2, [r3, #0]
}
   289ea:	46c0      	nop			; (mov r8, r8)
   289ec:	46bd      	mov	sp, r7
   289ee:	b002      	add	sp, #8
   289f0:	bd80      	pop	{r7, pc}
	...

000289f4 <system_apb_clock_set_mask>:
{
   289f4:	b580      	push	{r7, lr}
   289f6:	b082      	sub	sp, #8
   289f8:	af00      	add	r7, sp, #0
   289fa:	0002      	movs	r2, r0
   289fc:	6039      	str	r1, [r7, #0]
   289fe:	1dfb      	adds	r3, r7, #7
   28a00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28a02:	1dfb      	adds	r3, r7, #7
   28a04:	781b      	ldrb	r3, [r3, #0]
   28a06:	2b01      	cmp	r3, #1
   28a08:	d00a      	beq.n	28a20 <system_apb_clock_set_mask+0x2c>
   28a0a:	2b02      	cmp	r3, #2
   28a0c:	d00f      	beq.n	28a2e <system_apb_clock_set_mask+0x3a>
   28a0e:	2b00      	cmp	r3, #0
   28a10:	d114      	bne.n	28a3c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28a12:	4b0e      	ldr	r3, [pc, #56]	; (28a4c <system_apb_clock_set_mask+0x58>)
   28a14:	4a0d      	ldr	r2, [pc, #52]	; (28a4c <system_apb_clock_set_mask+0x58>)
   28a16:	6991      	ldr	r1, [r2, #24]
   28a18:	683a      	ldr	r2, [r7, #0]
   28a1a:	430a      	orrs	r2, r1
   28a1c:	619a      	str	r2, [r3, #24]
			break;
   28a1e:	e00f      	b.n	28a40 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28a20:	4b0a      	ldr	r3, [pc, #40]	; (28a4c <system_apb_clock_set_mask+0x58>)
   28a22:	4a0a      	ldr	r2, [pc, #40]	; (28a4c <system_apb_clock_set_mask+0x58>)
   28a24:	69d1      	ldr	r1, [r2, #28]
   28a26:	683a      	ldr	r2, [r7, #0]
   28a28:	430a      	orrs	r2, r1
   28a2a:	61da      	str	r2, [r3, #28]
			break;
   28a2c:	e008      	b.n	28a40 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28a2e:	4b07      	ldr	r3, [pc, #28]	; (28a4c <system_apb_clock_set_mask+0x58>)
   28a30:	4a06      	ldr	r2, [pc, #24]	; (28a4c <system_apb_clock_set_mask+0x58>)
   28a32:	6a11      	ldr	r1, [r2, #32]
   28a34:	683a      	ldr	r2, [r7, #0]
   28a36:	430a      	orrs	r2, r1
   28a38:	621a      	str	r2, [r3, #32]
			break;
   28a3a:	e001      	b.n	28a40 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28a3c:	2317      	movs	r3, #23
   28a3e:	e000      	b.n	28a42 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28a40:	2300      	movs	r3, #0
}
   28a42:	0018      	movs	r0, r3
   28a44:	46bd      	mov	sp, r7
   28a46:	b002      	add	sp, #8
   28a48:	bd80      	pop	{r7, pc}
   28a4a:	46c0      	nop			; (mov r8, r8)
   28a4c:	40000400 	.word	0x40000400

00028a50 <system_pinmux_get_config_defaults>:
{
   28a50:	b580      	push	{r7, lr}
   28a52:	b082      	sub	sp, #8
   28a54:	af00      	add	r7, sp, #0
   28a56:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28a58:	687b      	ldr	r3, [r7, #4]
   28a5a:	2280      	movs	r2, #128	; 0x80
   28a5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28a5e:	687b      	ldr	r3, [r7, #4]
   28a60:	2200      	movs	r2, #0
   28a62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28a64:	687b      	ldr	r3, [r7, #4]
   28a66:	2201      	movs	r2, #1
   28a68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28a6a:	687b      	ldr	r3, [r7, #4]
   28a6c:	2200      	movs	r2, #0
   28a6e:	70da      	strb	r2, [r3, #3]
}
   28a70:	46c0      	nop			; (mov r8, r8)
   28a72:	46bd      	mov	sp, r7
   28a74:	b002      	add	sp, #8
   28a76:	bd80      	pop	{r7, pc}

00028a78 <system_interrupt_enable>:
{
   28a78:	b580      	push	{r7, lr}
   28a7a:	b082      	sub	sp, #8
   28a7c:	af00      	add	r7, sp, #0
   28a7e:	0002      	movs	r2, r0
   28a80:	1dfb      	adds	r3, r7, #7
   28a82:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28a84:	4b06      	ldr	r3, [pc, #24]	; (28aa0 <system_interrupt_enable+0x28>)
   28a86:	1dfa      	adds	r2, r7, #7
   28a88:	7812      	ldrb	r2, [r2, #0]
   28a8a:	0011      	movs	r1, r2
   28a8c:	221f      	movs	r2, #31
   28a8e:	400a      	ands	r2, r1
   28a90:	2101      	movs	r1, #1
   28a92:	4091      	lsls	r1, r2
   28a94:	000a      	movs	r2, r1
   28a96:	601a      	str	r2, [r3, #0]
}
   28a98:	46c0      	nop			; (mov r8, r8)
   28a9a:	46bd      	mov	sp, r7
   28a9c:	b002      	add	sp, #8
   28a9e:	bd80      	pop	{r7, pc}
   28aa0:	e000e100 	.word	0xe000e100

00028aa4 <_extint_get_eic_from_channel>:
{
   28aa4:	b580      	push	{r7, lr}
   28aa6:	b084      	sub	sp, #16
   28aa8:	af00      	add	r7, sp, #0
   28aaa:	0002      	movs	r2, r0
   28aac:	1dfb      	adds	r3, r7, #7
   28aae:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   28ab0:	230f      	movs	r3, #15
   28ab2:	18fb      	adds	r3, r7, r3
   28ab4:	1dfa      	adds	r2, r7, #7
   28ab6:	7812      	ldrb	r2, [r2, #0]
   28ab8:	0952      	lsrs	r2, r2, #5
   28aba:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   28abc:	230f      	movs	r3, #15
   28abe:	18fb      	adds	r3, r7, r3
   28ac0:	781b      	ldrb	r3, [r3, #0]
   28ac2:	2b00      	cmp	r3, #0
   28ac4:	d10c      	bne.n	28ae0 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28ac6:	4b09      	ldr	r3, [pc, #36]	; (28aec <_extint_get_eic_from_channel+0x48>)
   28ac8:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   28aca:	230f      	movs	r3, #15
   28acc:	18fb      	adds	r3, r7, r3
   28ace:	781b      	ldrb	r3, [r3, #0]
   28ad0:	009b      	lsls	r3, r3, #2
   28ad2:	2210      	movs	r2, #16
   28ad4:	4694      	mov	ip, r2
   28ad6:	44bc      	add	ip, r7
   28ad8:	4463      	add	r3, ip
   28ada:	3b08      	subs	r3, #8
   28adc:	681b      	ldr	r3, [r3, #0]
   28ade:	e000      	b.n	28ae2 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   28ae0:	2300      	movs	r3, #0
}
   28ae2:	0018      	movs	r0, r3
   28ae4:	46bd      	mov	sp, r7
   28ae6:	b004      	add	sp, #16
   28ae8:	bd80      	pop	{r7, pc}
   28aea:	46c0      	nop			; (mov r8, r8)
   28aec:	40001800 	.word	0x40001800

00028af0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   28af0:	b580      	push	{r7, lr}
   28af2:	b082      	sub	sp, #8
   28af4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28af6:	4b0f      	ldr	r3, [pc, #60]	; (28b34 <extint_is_syncing+0x44>)
   28af8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28afa:	2300      	movs	r3, #0
   28afc:	607b      	str	r3, [r7, #4]
   28afe:	e011      	b.n	28b24 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   28b00:	687b      	ldr	r3, [r7, #4]
   28b02:	009b      	lsls	r3, r3, #2
   28b04:	2208      	movs	r2, #8
   28b06:	4694      	mov	ip, r2
   28b08:	44bc      	add	ip, r7
   28b0a:	4463      	add	r3, ip
   28b0c:	3b08      	subs	r3, #8
   28b0e:	681b      	ldr	r3, [r3, #0]
   28b10:	785b      	ldrb	r3, [r3, #1]
   28b12:	b2db      	uxtb	r3, r3
   28b14:	b25b      	sxtb	r3, r3
   28b16:	2b00      	cmp	r3, #0
   28b18:	da01      	bge.n	28b1e <extint_is_syncing+0x2e>
			return true;
   28b1a:	2301      	movs	r3, #1
   28b1c:	e006      	b.n	28b2c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28b1e:	687b      	ldr	r3, [r7, #4]
   28b20:	3301      	adds	r3, #1
   28b22:	607b      	str	r3, [r7, #4]
   28b24:	687b      	ldr	r3, [r7, #4]
   28b26:	2b00      	cmp	r3, #0
   28b28:	d0ea      	beq.n	28b00 <extint_is_syncing+0x10>
		}
	}
	return false;
   28b2a:	2300      	movs	r3, #0
}
   28b2c:	0018      	movs	r0, r3
   28b2e:	46bd      	mov	sp, r7
   28b30:	b002      	add	sp, #8
   28b32:	bd80      	pop	{r7, pc}
   28b34:	40001800 	.word	0x40001800

00028b38 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   28b38:	b580      	push	{r7, lr}
   28b3a:	b084      	sub	sp, #16
   28b3c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28b3e:	4b2d      	ldr	r3, [pc, #180]	; (28bf4 <_system_extint_init+0xbc>)
   28b40:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   28b42:	2140      	movs	r1, #64	; 0x40
   28b44:	2000      	movs	r0, #0
   28b46:	4b2c      	ldr	r3, [pc, #176]	; (28bf8 <_system_extint_init+0xc0>)
   28b48:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28b4a:	003b      	movs	r3, r7
   28b4c:	0018      	movs	r0, r3
   28b4e:	4b2b      	ldr	r3, [pc, #172]	; (28bfc <_system_extint_init+0xc4>)
   28b50:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   28b52:	003b      	movs	r3, r7
   28b54:	2200      	movs	r2, #0
   28b56:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   28b58:	003b      	movs	r3, r7
   28b5a:	0019      	movs	r1, r3
   28b5c:	2005      	movs	r0, #5
   28b5e:	4b28      	ldr	r3, [pc, #160]	; (28c00 <_system_extint_init+0xc8>)
   28b60:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   28b62:	2005      	movs	r0, #5
   28b64:	4b27      	ldr	r3, [pc, #156]	; (28c04 <_system_extint_init+0xcc>)
   28b66:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28b68:	2300      	movs	r3, #0
   28b6a:	60fb      	str	r3, [r7, #12]
   28b6c:	e018      	b.n	28ba0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   28b6e:	68fb      	ldr	r3, [r7, #12]
   28b70:	009b      	lsls	r3, r3, #2
   28b72:	2210      	movs	r2, #16
   28b74:	4694      	mov	ip, r2
   28b76:	44bc      	add	ip, r7
   28b78:	4463      	add	r3, ip
   28b7a:	3b0c      	subs	r3, #12
   28b7c:	681a      	ldr	r2, [r3, #0]
   28b7e:	68fb      	ldr	r3, [r7, #12]
   28b80:	009b      	lsls	r3, r3, #2
   28b82:	2110      	movs	r1, #16
   28b84:	468c      	mov	ip, r1
   28b86:	44bc      	add	ip, r7
   28b88:	4463      	add	r3, ip
   28b8a:	3b0c      	subs	r3, #12
   28b8c:	681b      	ldr	r3, [r3, #0]
   28b8e:	781b      	ldrb	r3, [r3, #0]
   28b90:	b2db      	uxtb	r3, r3
   28b92:	2101      	movs	r1, #1
   28b94:	430b      	orrs	r3, r1
   28b96:	b2db      	uxtb	r3, r3
   28b98:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28b9a:	68fb      	ldr	r3, [r7, #12]
   28b9c:	3301      	adds	r3, #1
   28b9e:	60fb      	str	r3, [r7, #12]
   28ba0:	68fb      	ldr	r3, [r7, #12]
   28ba2:	2b00      	cmp	r3, #0
   28ba4:	d0e3      	beq.n	28b6e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   28ba6:	46c0      	nop			; (mov r8, r8)
   28ba8:	4b17      	ldr	r3, [pc, #92]	; (28c08 <_system_extint_init+0xd0>)
   28baa:	4798      	blx	r3
   28bac:	1e03      	subs	r3, r0, #0
   28bae:	d1fb      	bne.n	28ba8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   28bb0:	230b      	movs	r3, #11
   28bb2:	18fb      	adds	r3, r7, r3
   28bb4:	2200      	movs	r2, #0
   28bb6:	701a      	strb	r2, [r3, #0]
   28bb8:	e00d      	b.n	28bd6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   28bba:	230b      	movs	r3, #11
   28bbc:	18fb      	adds	r3, r7, r3
   28bbe:	781a      	ldrb	r2, [r3, #0]
   28bc0:	4b12      	ldr	r3, [pc, #72]	; (28c0c <_system_extint_init+0xd4>)
   28bc2:	0092      	lsls	r2, r2, #2
   28bc4:	2100      	movs	r1, #0
   28bc6:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   28bc8:	230b      	movs	r3, #11
   28bca:	18fb      	adds	r3, r7, r3
   28bcc:	781a      	ldrb	r2, [r3, #0]
   28bce:	230b      	movs	r3, #11
   28bd0:	18fb      	adds	r3, r7, r3
   28bd2:	3201      	adds	r2, #1
   28bd4:	701a      	strb	r2, [r3, #0]
   28bd6:	230b      	movs	r3, #11
   28bd8:	18fb      	adds	r3, r7, r3
   28bda:	781b      	ldrb	r3, [r3, #0]
   28bdc:	2b0f      	cmp	r3, #15
   28bde:	d9ec      	bls.n	28bba <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   28be0:	2004      	movs	r0, #4
   28be2:	4b0b      	ldr	r3, [pc, #44]	; (28c10 <_system_extint_init+0xd8>)
   28be4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   28be6:	4b0b      	ldr	r3, [pc, #44]	; (28c14 <_system_extint_init+0xdc>)
   28be8:	4798      	blx	r3
}
   28bea:	46c0      	nop			; (mov r8, r8)
   28bec:	46bd      	mov	sp, r7
   28bee:	b004      	add	sp, #16
   28bf0:	bd80      	pop	{r7, pc}
   28bf2:	46c0      	nop			; (mov r8, r8)
   28bf4:	40001800 	.word	0x40001800
   28bf8:	000289f5 	.word	0x000289f5
   28bfc:	000289dd 	.word	0x000289dd
   28c00:	0002c2c1 	.word	0x0002c2c1
   28c04:	0002c305 	.word	0x0002c305
   28c08:	00028af1 	.word	0x00028af1
   28c0c:	20005a40 	.word	0x20005a40
   28c10:	00028a79 	.word	0x00028a79
   28c14:	00028c19 	.word	0x00028c19

00028c18 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   28c18:	b580      	push	{r7, lr}
   28c1a:	b082      	sub	sp, #8
   28c1c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28c1e:	4b15      	ldr	r3, [pc, #84]	; (28c74 <_extint_enable+0x5c>)
   28c20:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28c22:	2300      	movs	r3, #0
   28c24:	607b      	str	r3, [r7, #4]
   28c26:	e018      	b.n	28c5a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   28c28:	687b      	ldr	r3, [r7, #4]
   28c2a:	009b      	lsls	r3, r3, #2
   28c2c:	2208      	movs	r2, #8
   28c2e:	4694      	mov	ip, r2
   28c30:	44bc      	add	ip, r7
   28c32:	4463      	add	r3, ip
   28c34:	3b08      	subs	r3, #8
   28c36:	681a      	ldr	r2, [r3, #0]
   28c38:	687b      	ldr	r3, [r7, #4]
   28c3a:	009b      	lsls	r3, r3, #2
   28c3c:	2108      	movs	r1, #8
   28c3e:	468c      	mov	ip, r1
   28c40:	44bc      	add	ip, r7
   28c42:	4463      	add	r3, ip
   28c44:	3b08      	subs	r3, #8
   28c46:	681b      	ldr	r3, [r3, #0]
   28c48:	781b      	ldrb	r3, [r3, #0]
   28c4a:	b2db      	uxtb	r3, r3
   28c4c:	2102      	movs	r1, #2
   28c4e:	430b      	orrs	r3, r1
   28c50:	b2db      	uxtb	r3, r3
   28c52:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28c54:	687b      	ldr	r3, [r7, #4]
   28c56:	3301      	adds	r3, #1
   28c58:	607b      	str	r3, [r7, #4]
   28c5a:	687b      	ldr	r3, [r7, #4]
   28c5c:	2b00      	cmp	r3, #0
   28c5e:	d0e3      	beq.n	28c28 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   28c60:	46c0      	nop			; (mov r8, r8)
   28c62:	4b05      	ldr	r3, [pc, #20]	; (28c78 <_extint_enable+0x60>)
   28c64:	4798      	blx	r3
   28c66:	1e03      	subs	r3, r0, #0
   28c68:	d1fb      	bne.n	28c62 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   28c6a:	46c0      	nop			; (mov r8, r8)
   28c6c:	46bd      	mov	sp, r7
   28c6e:	b002      	add	sp, #8
   28c70:	bd80      	pop	{r7, pc}
   28c72:	46c0      	nop			; (mov r8, r8)
   28c74:	40001800 	.word	0x40001800
   28c78:	00028af1 	.word	0x00028af1

00028c7c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   28c7c:	b580      	push	{r7, lr}
   28c7e:	b082      	sub	sp, #8
   28c80:	af00      	add	r7, sp, #0
   28c82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   28c84:	687b      	ldr	r3, [r7, #4]
   28c86:	2200      	movs	r2, #0
   28c88:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   28c8a:	687b      	ldr	r3, [r7, #4]
   28c8c:	2200      	movs	r2, #0
   28c8e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   28c90:	687b      	ldr	r3, [r7, #4]
   28c92:	2201      	movs	r2, #1
   28c94:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   28c96:	687b      	ldr	r3, [r7, #4]
   28c98:	2201      	movs	r2, #1
   28c9a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   28c9c:	687b      	ldr	r3, [r7, #4]
   28c9e:	2200      	movs	r2, #0
   28ca0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   28ca2:	687b      	ldr	r3, [r7, #4]
   28ca4:	2202      	movs	r2, #2
   28ca6:	72da      	strb	r2, [r3, #11]
}
   28ca8:	46c0      	nop			; (mov r8, r8)
   28caa:	46bd      	mov	sp, r7
   28cac:	b002      	add	sp, #8
   28cae:	bd80      	pop	{r7, pc}

00028cb0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   28cb0:	b580      	push	{r7, lr}
   28cb2:	b086      	sub	sp, #24
   28cb4:	af00      	add	r7, sp, #0
   28cb6:	0002      	movs	r2, r0
   28cb8:	6039      	str	r1, [r7, #0]
   28cba:	1dfb      	adds	r3, r7, #7
   28cbc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   28cbe:	2308      	movs	r3, #8
   28cc0:	18fb      	adds	r3, r7, r3
   28cc2:	0018      	movs	r0, r3
   28cc4:	4b36      	ldr	r3, [pc, #216]	; (28da0 <extint_chan_set_config+0xf0>)
   28cc6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   28cc8:	683b      	ldr	r3, [r7, #0]
   28cca:	685b      	ldr	r3, [r3, #4]
   28ccc:	b2da      	uxtb	r2, r3
   28cce:	2308      	movs	r3, #8
   28cd0:	18fb      	adds	r3, r7, r3
   28cd2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28cd4:	2308      	movs	r3, #8
   28cd6:	18fb      	adds	r3, r7, r3
   28cd8:	2200      	movs	r2, #0
   28cda:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   28cdc:	683b      	ldr	r3, [r7, #0]
   28cde:	7a1a      	ldrb	r2, [r3, #8]
   28ce0:	2308      	movs	r3, #8
   28ce2:	18fb      	adds	r3, r7, r3
   28ce4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   28ce6:	683b      	ldr	r3, [r7, #0]
   28ce8:	681b      	ldr	r3, [r3, #0]
   28cea:	b2db      	uxtb	r3, r3
   28cec:	2208      	movs	r2, #8
   28cee:	18ba      	adds	r2, r7, r2
   28cf0:	0011      	movs	r1, r2
   28cf2:	0018      	movs	r0, r3
   28cf4:	4b2b      	ldr	r3, [pc, #172]	; (28da4 <extint_chan_set_config+0xf4>)
   28cf6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   28cf8:	1dfb      	adds	r3, r7, #7
   28cfa:	781b      	ldrb	r3, [r3, #0]
   28cfc:	0018      	movs	r0, r3
   28cfe:	4b2a      	ldr	r3, [pc, #168]	; (28da8 <extint_chan_set_config+0xf8>)
   28d00:	4798      	blx	r3
   28d02:	0003      	movs	r3, r0
   28d04:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   28d06:	1dfb      	adds	r3, r7, #7
   28d08:	781b      	ldrb	r3, [r3, #0]
   28d0a:	2207      	movs	r2, #7
   28d0c:	4013      	ands	r3, r2
   28d0e:	009b      	lsls	r3, r3, #2
   28d10:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   28d12:	683b      	ldr	r3, [r7, #0]
   28d14:	7adb      	ldrb	r3, [r3, #11]
   28d16:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   28d18:	683b      	ldr	r3, [r7, #0]
   28d1a:	7a9b      	ldrb	r3, [r3, #10]
   28d1c:	2b00      	cmp	r3, #0
   28d1e:	d003      	beq.n	28d28 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   28d20:	697b      	ldr	r3, [r7, #20]
   28d22:	2208      	movs	r2, #8
   28d24:	4313      	orrs	r3, r2
   28d26:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   28d28:	1dfb      	adds	r3, r7, #7
   28d2a:	781b      	ldrb	r3, [r3, #0]
   28d2c:	08db      	lsrs	r3, r3, #3
   28d2e:	b2db      	uxtb	r3, r3
   28d30:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   28d32:	1dfb      	adds	r3, r7, #7
   28d34:	781b      	ldrb	r3, [r3, #0]
   28d36:	08db      	lsrs	r3, r3, #3
   28d38:	b2db      	uxtb	r3, r3
   28d3a:	001a      	movs	r2, r3
   28d3c:	693b      	ldr	r3, [r7, #16]
   28d3e:	3206      	adds	r2, #6
   28d40:	0092      	lsls	r2, r2, #2
   28d42:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   28d44:	210f      	movs	r1, #15
   28d46:	68fa      	ldr	r2, [r7, #12]
   28d48:	4091      	lsls	r1, r2
   28d4a:	000a      	movs	r2, r1
   28d4c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   28d4e:	401a      	ands	r2, r3
			(new_config << config_pos);
   28d50:	6979      	ldr	r1, [r7, #20]
   28d52:	68fb      	ldr	r3, [r7, #12]
   28d54:	4099      	lsls	r1, r3
   28d56:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   28d58:	431a      	orrs	r2, r3
   28d5a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   28d5c:	693b      	ldr	r3, [r7, #16]
   28d5e:	1d82      	adds	r2, r0, #6
   28d60:	0092      	lsls	r2, r2, #2
   28d62:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   28d64:	683b      	ldr	r3, [r7, #0]
   28d66:	7a5b      	ldrb	r3, [r3, #9]
   28d68:	2b00      	cmp	r3, #0
   28d6a:	d00a      	beq.n	28d82 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   28d6c:	693b      	ldr	r3, [r7, #16]
   28d6e:	695a      	ldr	r2, [r3, #20]
   28d70:	1dfb      	adds	r3, r7, #7
   28d72:	781b      	ldrb	r3, [r3, #0]
   28d74:	2101      	movs	r1, #1
   28d76:	4099      	lsls	r1, r3
   28d78:	000b      	movs	r3, r1
   28d7a:	431a      	orrs	r2, r3
   28d7c:	693b      	ldr	r3, [r7, #16]
   28d7e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   28d80:	e00a      	b.n	28d98 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   28d82:	693b      	ldr	r3, [r7, #16]
   28d84:	695b      	ldr	r3, [r3, #20]
   28d86:	1dfa      	adds	r2, r7, #7
   28d88:	7812      	ldrb	r2, [r2, #0]
   28d8a:	2101      	movs	r1, #1
   28d8c:	4091      	lsls	r1, r2
   28d8e:	000a      	movs	r2, r1
   28d90:	43d2      	mvns	r2, r2
   28d92:	401a      	ands	r2, r3
   28d94:	693b      	ldr	r3, [r7, #16]
   28d96:	615a      	str	r2, [r3, #20]
}
   28d98:	46c0      	nop			; (mov r8, r8)
   28d9a:	46bd      	mov	sp, r7
   28d9c:	b006      	add	sp, #24
   28d9e:	bd80      	pop	{r7, pc}
   28da0:	00028a51 	.word	0x00028a51
   28da4:	0002c621 	.word	0x0002c621
   28da8:	00028aa5 	.word	0x00028aa5

00028dac <system_pinmux_get_config_defaults>:
{
   28dac:	b580      	push	{r7, lr}
   28dae:	b082      	sub	sp, #8
   28db0:	af00      	add	r7, sp, #0
   28db2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28db4:	687b      	ldr	r3, [r7, #4]
   28db6:	2280      	movs	r2, #128	; 0x80
   28db8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28dba:	687b      	ldr	r3, [r7, #4]
   28dbc:	2200      	movs	r2, #0
   28dbe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28dc0:	687b      	ldr	r3, [r7, #4]
   28dc2:	2201      	movs	r2, #1
   28dc4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28dc6:	687b      	ldr	r3, [r7, #4]
   28dc8:	2200      	movs	r2, #0
   28dca:	70da      	strb	r2, [r3, #3]
}
   28dcc:	46c0      	nop			; (mov r8, r8)
   28dce:	46bd      	mov	sp, r7
   28dd0:	b002      	add	sp, #8
   28dd2:	bd80      	pop	{r7, pc}

00028dd4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   28dd4:	b580      	push	{r7, lr}
   28dd6:	b084      	sub	sp, #16
   28dd8:	af00      	add	r7, sp, #0
   28dda:	0002      	movs	r2, r0
   28ddc:	6039      	str	r1, [r7, #0]
   28dde:	1dfb      	adds	r3, r7, #7
   28de0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   28de2:	230c      	movs	r3, #12
   28de4:	18fb      	adds	r3, r7, r3
   28de6:	0018      	movs	r0, r3
   28de8:	4b10      	ldr	r3, [pc, #64]	; (28e2c <port_pin_set_config+0x58>)
   28dea:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   28dec:	230c      	movs	r3, #12
   28dee:	18fb      	adds	r3, r7, r3
   28df0:	2280      	movs	r2, #128	; 0x80
   28df2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   28df4:	683b      	ldr	r3, [r7, #0]
   28df6:	781a      	ldrb	r2, [r3, #0]
   28df8:	230c      	movs	r3, #12
   28dfa:	18fb      	adds	r3, r7, r3
   28dfc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   28dfe:	683b      	ldr	r3, [r7, #0]
   28e00:	785a      	ldrb	r2, [r3, #1]
   28e02:	230c      	movs	r3, #12
   28e04:	18fb      	adds	r3, r7, r3
   28e06:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   28e08:	683b      	ldr	r3, [r7, #0]
   28e0a:	789a      	ldrb	r2, [r3, #2]
   28e0c:	230c      	movs	r3, #12
   28e0e:	18fb      	adds	r3, r7, r3
   28e10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   28e12:	230c      	movs	r3, #12
   28e14:	18fa      	adds	r2, r7, r3
   28e16:	1dfb      	adds	r3, r7, #7
   28e18:	781b      	ldrb	r3, [r3, #0]
   28e1a:	0011      	movs	r1, r2
   28e1c:	0018      	movs	r0, r3
   28e1e:	4b04      	ldr	r3, [pc, #16]	; (28e30 <port_pin_set_config+0x5c>)
   28e20:	4798      	blx	r3
}
   28e22:	46c0      	nop			; (mov r8, r8)
   28e24:	46bd      	mov	sp, r7
   28e26:	b004      	add	sp, #16
   28e28:	bd80      	pop	{r7, pc}
   28e2a:	46c0      	nop			; (mov r8, r8)
   28e2c:	00028dad 	.word	0x00028dad
   28e30:	0002c621 	.word	0x0002c621

00028e34 <system_gclk_chan_get_config_defaults>:
{
   28e34:	b580      	push	{r7, lr}
   28e36:	b082      	sub	sp, #8
   28e38:	af00      	add	r7, sp, #0
   28e3a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28e3c:	687b      	ldr	r3, [r7, #4]
   28e3e:	2200      	movs	r2, #0
   28e40:	701a      	strb	r2, [r3, #0]
}
   28e42:	46c0      	nop			; (mov r8, r8)
   28e44:	46bd      	mov	sp, r7
   28e46:	b002      	add	sp, #8
   28e48:	bd80      	pop	{r7, pc}
	...

00028e4c <system_apb_clock_set_mask>:
{
   28e4c:	b580      	push	{r7, lr}
   28e4e:	b082      	sub	sp, #8
   28e50:	af00      	add	r7, sp, #0
   28e52:	0002      	movs	r2, r0
   28e54:	6039      	str	r1, [r7, #0]
   28e56:	1dfb      	adds	r3, r7, #7
   28e58:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28e5a:	1dfb      	adds	r3, r7, #7
   28e5c:	781b      	ldrb	r3, [r3, #0]
   28e5e:	2b01      	cmp	r3, #1
   28e60:	d00a      	beq.n	28e78 <system_apb_clock_set_mask+0x2c>
   28e62:	2b02      	cmp	r3, #2
   28e64:	d00f      	beq.n	28e86 <system_apb_clock_set_mask+0x3a>
   28e66:	2b00      	cmp	r3, #0
   28e68:	d114      	bne.n	28e94 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28e6a:	4b0e      	ldr	r3, [pc, #56]	; (28ea4 <system_apb_clock_set_mask+0x58>)
   28e6c:	4a0d      	ldr	r2, [pc, #52]	; (28ea4 <system_apb_clock_set_mask+0x58>)
   28e6e:	6991      	ldr	r1, [r2, #24]
   28e70:	683a      	ldr	r2, [r7, #0]
   28e72:	430a      	orrs	r2, r1
   28e74:	619a      	str	r2, [r3, #24]
			break;
   28e76:	e00f      	b.n	28e98 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28e78:	4b0a      	ldr	r3, [pc, #40]	; (28ea4 <system_apb_clock_set_mask+0x58>)
   28e7a:	4a0a      	ldr	r2, [pc, #40]	; (28ea4 <system_apb_clock_set_mask+0x58>)
   28e7c:	69d1      	ldr	r1, [r2, #28]
   28e7e:	683a      	ldr	r2, [r7, #0]
   28e80:	430a      	orrs	r2, r1
   28e82:	61da      	str	r2, [r3, #28]
			break;
   28e84:	e008      	b.n	28e98 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28e86:	4b07      	ldr	r3, [pc, #28]	; (28ea4 <system_apb_clock_set_mask+0x58>)
   28e88:	4a06      	ldr	r2, [pc, #24]	; (28ea4 <system_apb_clock_set_mask+0x58>)
   28e8a:	6a11      	ldr	r1, [r2, #32]
   28e8c:	683a      	ldr	r2, [r7, #0]
   28e8e:	430a      	orrs	r2, r1
   28e90:	621a      	str	r2, [r3, #32]
			break;
   28e92:	e001      	b.n	28e98 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28e94:	2317      	movs	r3, #23
   28e96:	e000      	b.n	28e9a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28e98:	2300      	movs	r3, #0
}
   28e9a:	0018      	movs	r0, r3
   28e9c:	46bd      	mov	sp, r7
   28e9e:	b002      	add	sp, #8
   28ea0:	bd80      	pop	{r7, pc}
   28ea2:	46c0      	nop			; (mov r8, r8)
   28ea4:	40000400 	.word	0x40000400

00028ea8 <system_interrupt_enable>:
{
   28ea8:	b580      	push	{r7, lr}
   28eaa:	b082      	sub	sp, #8
   28eac:	af00      	add	r7, sp, #0
   28eae:	0002      	movs	r2, r0
   28eb0:	1dfb      	adds	r3, r7, #7
   28eb2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28eb4:	4b06      	ldr	r3, [pc, #24]	; (28ed0 <system_interrupt_enable+0x28>)
   28eb6:	1dfa      	adds	r2, r7, #7
   28eb8:	7812      	ldrb	r2, [r2, #0]
   28eba:	0011      	movs	r1, r2
   28ebc:	221f      	movs	r2, #31
   28ebe:	400a      	ands	r2, r1
   28ec0:	2101      	movs	r1, #1
   28ec2:	4091      	lsls	r1, r2
   28ec4:	000a      	movs	r2, r1
   28ec6:	601a      	str	r2, [r3, #0]
}
   28ec8:	46c0      	nop			; (mov r8, r8)
   28eca:	46bd      	mov	sp, r7
   28ecc:	b002      	add	sp, #8
   28ece:	bd80      	pop	{r7, pc}
   28ed0:	e000e100 	.word	0xe000e100

00028ed4 <system_interrupt_disable>:
{
   28ed4:	b580      	push	{r7, lr}
   28ed6:	b082      	sub	sp, #8
   28ed8:	af00      	add	r7, sp, #0
   28eda:	0002      	movs	r2, r0
   28edc:	1dfb      	adds	r3, r7, #7
   28ede:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28ee0:	4a07      	ldr	r2, [pc, #28]	; (28f00 <system_interrupt_disable+0x2c>)
   28ee2:	1dfb      	adds	r3, r7, #7
   28ee4:	781b      	ldrb	r3, [r3, #0]
   28ee6:	0019      	movs	r1, r3
   28ee8:	231f      	movs	r3, #31
   28eea:	400b      	ands	r3, r1
   28eec:	2101      	movs	r1, #1
   28eee:	4099      	lsls	r1, r3
   28ef0:	000b      	movs	r3, r1
   28ef2:	0019      	movs	r1, r3
   28ef4:	2380      	movs	r3, #128	; 0x80
   28ef6:	50d1      	str	r1, [r2, r3]
}
   28ef8:	46c0      	nop			; (mov r8, r8)
   28efa:	46bd      	mov	sp, r7
   28efc:	b002      	add	sp, #8
   28efe:	bd80      	pop	{r7, pc}
   28f00:	e000e100 	.word	0xe000e100

00028f04 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   28f04:	b580      	push	{r7, lr}
   28f06:	b084      	sub	sp, #16
   28f08:	af00      	add	r7, sp, #0
   28f0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28f0c:	687b      	ldr	r3, [r7, #4]
   28f0e:	681b      	ldr	r3, [r3, #0]
   28f10:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   28f12:	68fb      	ldr	r3, [r7, #12]
   28f14:	7a9b      	ldrb	r3, [r3, #10]
   28f16:	b2db      	uxtb	r3, r3
   28f18:	b25b      	sxtb	r3, r3
   28f1a:	2b00      	cmp	r3, #0
   28f1c:	da01      	bge.n	28f22 <rtc_calendar_is_syncing+0x1e>
                return true;
   28f1e:	2301      	movs	r3, #1
   28f20:	e000      	b.n	28f24 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   28f22:	2300      	movs	r3, #0
}
   28f24:	0018      	movs	r0, r3
   28f26:	46bd      	mov	sp, r7
   28f28:	b004      	add	sp, #16
   28f2a:	bd80      	pop	{r7, pc}

00028f2c <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   28f2c:	b580      	push	{r7, lr}
   28f2e:	b084      	sub	sp, #16
   28f30:	af00      	add	r7, sp, #0
   28f32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28f34:	687b      	ldr	r3, [r7, #4]
   28f36:	681b      	ldr	r3, [r3, #0]
   28f38:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   28f3a:	2003      	movs	r0, #3
   28f3c:	4b0a      	ldr	r3, [pc, #40]	; (28f68 <rtc_calendar_enable+0x3c>)
   28f3e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   28f40:	46c0      	nop			; (mov r8, r8)
   28f42:	687b      	ldr	r3, [r7, #4]
   28f44:	0018      	movs	r0, r3
   28f46:	4b09      	ldr	r3, [pc, #36]	; (28f6c <rtc_calendar_enable+0x40>)
   28f48:	4798      	blx	r3
   28f4a:	1e03      	subs	r3, r0, #0
   28f4c:	d1f9      	bne.n	28f42 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   28f4e:	68fb      	ldr	r3, [r7, #12]
   28f50:	881b      	ldrh	r3, [r3, #0]
   28f52:	b29b      	uxth	r3, r3
   28f54:	2202      	movs	r2, #2
   28f56:	4313      	orrs	r3, r2
   28f58:	b29a      	uxth	r2, r3
   28f5a:	68fb      	ldr	r3, [r7, #12]
   28f5c:	801a      	strh	r2, [r3, #0]
}
   28f5e:	46c0      	nop			; (mov r8, r8)
   28f60:	46bd      	mov	sp, r7
   28f62:	b004      	add	sp, #16
   28f64:	bd80      	pop	{r7, pc}
   28f66:	46c0      	nop			; (mov r8, r8)
   28f68:	00028ea9 	.word	0x00028ea9
   28f6c:	00028f05 	.word	0x00028f05

00028f70 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   28f70:	b580      	push	{r7, lr}
   28f72:	b084      	sub	sp, #16
   28f74:	af00      	add	r7, sp, #0
   28f76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28f78:	687b      	ldr	r3, [r7, #4]
   28f7a:	681b      	ldr	r3, [r3, #0]
   28f7c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   28f7e:	2003      	movs	r0, #3
   28f80:	4b0d      	ldr	r3, [pc, #52]	; (28fb8 <rtc_calendar_disable+0x48>)
   28f82:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   28f84:	46c0      	nop			; (mov r8, r8)
   28f86:	687b      	ldr	r3, [r7, #4]
   28f88:	0018      	movs	r0, r3
   28f8a:	4b0c      	ldr	r3, [pc, #48]	; (28fbc <rtc_calendar_disable+0x4c>)
   28f8c:	4798      	blx	r3
   28f8e:	1e03      	subs	r3, r0, #0
   28f90:	d1f9      	bne.n	28f86 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   28f92:	68fb      	ldr	r3, [r7, #12]
   28f94:	22c1      	movs	r2, #193	; 0xc1
   28f96:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   28f98:	68fb      	ldr	r3, [r7, #12]
   28f9a:	22c1      	movs	r2, #193	; 0xc1
   28f9c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   28f9e:	68fb      	ldr	r3, [r7, #12]
   28fa0:	881b      	ldrh	r3, [r3, #0]
   28fa2:	b29b      	uxth	r3, r3
   28fa4:	2202      	movs	r2, #2
   28fa6:	4393      	bics	r3, r2
   28fa8:	b29a      	uxth	r2, r3
   28faa:	68fb      	ldr	r3, [r7, #12]
   28fac:	801a      	strh	r2, [r3, #0]
}
   28fae:	46c0      	nop			; (mov r8, r8)
   28fb0:	46bd      	mov	sp, r7
   28fb2:	b004      	add	sp, #16
   28fb4:	bd80      	pop	{r7, pc}
   28fb6:	46c0      	nop			; (mov r8, r8)
   28fb8:	00028ed5 	.word	0x00028ed5
   28fbc:	00028f05 	.word	0x00028f05

00028fc0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   28fc0:	b580      	push	{r7, lr}
   28fc2:	b084      	sub	sp, #16
   28fc4:	af00      	add	r7, sp, #0
   28fc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28fc8:	687b      	ldr	r3, [r7, #4]
   28fca:	681b      	ldr	r3, [r3, #0]
   28fcc:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   28fce:	687b      	ldr	r3, [r7, #4]
   28fd0:	0018      	movs	r0, r3
   28fd2:	4b0d      	ldr	r3, [pc, #52]	; (29008 <rtc_calendar_reset+0x48>)
   28fd4:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   28fd6:	687b      	ldr	r3, [r7, #4]
   28fd8:	2200      	movs	r2, #0
   28fda:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   28fdc:	687b      	ldr	r3, [r7, #4]
   28fde:	2200      	movs	r2, #0
   28fe0:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   28fe2:	46c0      	nop			; (mov r8, r8)
   28fe4:	687b      	ldr	r3, [r7, #4]
   28fe6:	0018      	movs	r0, r3
   28fe8:	4b08      	ldr	r3, [pc, #32]	; (2900c <rtc_calendar_reset+0x4c>)
   28fea:	4798      	blx	r3
   28fec:	1e03      	subs	r3, r0, #0
   28fee:	d1f9      	bne.n	28fe4 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   28ff0:	68fb      	ldr	r3, [r7, #12]
   28ff2:	881b      	ldrh	r3, [r3, #0]
   28ff4:	b29b      	uxth	r3, r3
   28ff6:	2201      	movs	r2, #1
   28ff8:	4313      	orrs	r3, r2
   28ffa:	b29a      	uxth	r2, r3
   28ffc:	68fb      	ldr	r3, [r7, #12]
   28ffe:	801a      	strh	r2, [r3, #0]
}
   29000:	46c0      	nop			; (mov r8, r8)
   29002:	46bd      	mov	sp, r7
   29004:	b004      	add	sp, #16
   29006:	bd80      	pop	{r7, pc}
   29008:	00028f71 	.word	0x00028f71
   2900c:	00028f05 	.word	0x00028f05

00029010 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   29010:	b580      	push	{r7, lr}
   29012:	b084      	sub	sp, #16
   29014:	af00      	add	r7, sp, #0
   29016:	6078      	str	r0, [r7, #4]
   29018:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   2901a:	683b      	ldr	r3, [r7, #0]
   2901c:	88db      	ldrh	r3, [r3, #6]
   2901e:	001a      	movs	r2, r3
   29020:	687b      	ldr	r3, [r7, #4]
   29022:	88db      	ldrh	r3, [r3, #6]
   29024:	1ad3      	subs	r3, r2, r3
   29026:	069b      	lsls	r3, r3, #26
   29028:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   2902a:	683b      	ldr	r3, [r7, #0]
   2902c:	795b      	ldrb	r3, [r3, #5]
   2902e:	059b      	lsls	r3, r3, #22
   29030:	001a      	movs	r2, r3
   29032:	68fb      	ldr	r3, [r7, #12]
   29034:	4313      	orrs	r3, r2
   29036:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   29038:	683b      	ldr	r3, [r7, #0]
   2903a:	791b      	ldrb	r3, [r3, #4]
   2903c:	045b      	lsls	r3, r3, #17
   2903e:	001a      	movs	r2, r3
   29040:	68fb      	ldr	r3, [r7, #12]
   29042:	4313      	orrs	r3, r2
   29044:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   29046:	683b      	ldr	r3, [r7, #0]
   29048:	789b      	ldrb	r3, [r3, #2]
   2904a:	031b      	lsls	r3, r3, #12
   2904c:	001a      	movs	r2, r3
   2904e:	68fb      	ldr	r3, [r7, #12]
   29050:	4313      	orrs	r3, r2
   29052:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   29054:	687b      	ldr	r3, [r7, #4]
   29056:	791b      	ldrb	r3, [r3, #4]
   29058:	2201      	movs	r2, #1
   2905a:	4053      	eors	r3, r2
   2905c:	b2db      	uxtb	r3, r3
   2905e:	2b00      	cmp	r3, #0
   29060:	d008      	beq.n	29074 <rtc_calendar_time_to_register_value+0x64>
   29062:	683b      	ldr	r3, [r7, #0]
   29064:	78db      	ldrb	r3, [r3, #3]
   29066:	2b00      	cmp	r3, #0
   29068:	d004      	beq.n	29074 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   2906a:	68fb      	ldr	r3, [r7, #12]
   2906c:	2280      	movs	r2, #128	; 0x80
   2906e:	0252      	lsls	r2, r2, #9
   29070:	4313      	orrs	r3, r2
   29072:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   29074:	683b      	ldr	r3, [r7, #0]
   29076:	785b      	ldrb	r3, [r3, #1]
   29078:	019b      	lsls	r3, r3, #6
   2907a:	001a      	movs	r2, r3
   2907c:	68fb      	ldr	r3, [r7, #12]
   2907e:	4313      	orrs	r3, r2
   29080:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   29082:	683b      	ldr	r3, [r7, #0]
   29084:	781b      	ldrb	r3, [r3, #0]
   29086:	001a      	movs	r2, r3
   29088:	68fb      	ldr	r3, [r7, #12]
   2908a:	4313      	orrs	r3, r2
   2908c:	60fb      	str	r3, [r7, #12]

	return register_value;
   2908e:	68fb      	ldr	r3, [r7, #12]
}
   29090:	0018      	movs	r0, r3
   29092:	46bd      	mov	sp, r7
   29094:	b004      	add	sp, #16
   29096:	bd80      	pop	{r7, pc}

00029098 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   29098:	b580      	push	{r7, lr}
   2909a:	b084      	sub	sp, #16
   2909c:	af00      	add	r7, sp, #0
   2909e:	60f8      	str	r0, [r7, #12]
   290a0:	60b9      	str	r1, [r7, #8]
   290a2:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   290a4:	68bb      	ldr	r3, [r7, #8]
   290a6:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   290a8:	b29a      	uxth	r2, r3
   290aa:	68fb      	ldr	r3, [r7, #12]
   290ac:	88db      	ldrh	r3, [r3, #6]
   290ae:	18d3      	adds	r3, r2, r3
   290b0:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   290b2:	687b      	ldr	r3, [r7, #4]
   290b4:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   290b6:	68bb      	ldr	r3, [r7, #8]
   290b8:	0d9b      	lsrs	r3, r3, #22
   290ba:	b2db      	uxtb	r3, r3
   290bc:	220f      	movs	r2, #15
   290be:	4013      	ands	r3, r2
   290c0:	b2da      	uxtb	r2, r3
   290c2:	687b      	ldr	r3, [r7, #4]
   290c4:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   290c6:	68bb      	ldr	r3, [r7, #8]
   290c8:	0c5b      	lsrs	r3, r3, #17
   290ca:	b2db      	uxtb	r3, r3
   290cc:	221f      	movs	r2, #31
   290ce:	4013      	ands	r3, r2
   290d0:	b2da      	uxtb	r2, r3
   290d2:	687b      	ldr	r3, [r7, #4]
   290d4:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   290d6:	68fb      	ldr	r3, [r7, #12]
   290d8:	791b      	ldrb	r3, [r3, #4]
   290da:	2b00      	cmp	r3, #0
   290dc:	d008      	beq.n	290f0 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   290de:	68bb      	ldr	r3, [r7, #8]
   290e0:	0b1b      	lsrs	r3, r3, #12
   290e2:	b2db      	uxtb	r3, r3
   290e4:	221f      	movs	r2, #31
   290e6:	4013      	ands	r3, r2
   290e8:	b2da      	uxtb	r2, r3
   290ea:	687b      	ldr	r3, [r7, #4]
   290ec:	709a      	strb	r2, [r3, #2]
   290ee:	e010      	b.n	29112 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   290f0:	68bb      	ldr	r3, [r7, #8]
   290f2:	0b1b      	lsrs	r3, r3, #12
   290f4:	b2db      	uxtb	r3, r3
   290f6:	220f      	movs	r2, #15
   290f8:	4013      	ands	r3, r2
   290fa:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   290fc:	687b      	ldr	r3, [r7, #4]
   290fe:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   29100:	68ba      	ldr	r2, [r7, #8]
   29102:	2380      	movs	r3, #128	; 0x80
   29104:	025b      	lsls	r3, r3, #9
   29106:	4013      	ands	r3, r2
   29108:	1e5a      	subs	r2, r3, #1
   2910a:	4193      	sbcs	r3, r2
   2910c:	b2da      	uxtb	r2, r3
   2910e:	687b      	ldr	r3, [r7, #4]
   29110:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   29112:	68bb      	ldr	r3, [r7, #8]
   29114:	099b      	lsrs	r3, r3, #6
   29116:	b2db      	uxtb	r3, r3
   29118:	223f      	movs	r2, #63	; 0x3f
   2911a:	4013      	ands	r3, r2
   2911c:	b2da      	uxtb	r2, r3
   2911e:	687b      	ldr	r3, [r7, #4]
   29120:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   29122:	68bb      	ldr	r3, [r7, #8]
   29124:	b2db      	uxtb	r3, r3
   29126:	223f      	movs	r2, #63	; 0x3f
   29128:	4013      	ands	r3, r2
   2912a:	b2da      	uxtb	r2, r3
   2912c:	687b      	ldr	r3, [r7, #4]
   2912e:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   29130:	46c0      	nop			; (mov r8, r8)
   29132:	46bd      	mov	sp, r7
   29134:	b004      	add	sp, #16
   29136:	bd80      	pop	{r7, pc}

00029138 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   29138:	b580      	push	{r7, lr}
   2913a:	b084      	sub	sp, #16
   2913c:	af00      	add	r7, sp, #0
   2913e:	6078      	str	r0, [r7, #4]
   29140:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29142:	687b      	ldr	r3, [r7, #4]
   29144:	681b      	ldr	r3, [r3, #0]
   29146:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   29148:	683b      	ldr	r3, [r7, #0]
   2914a:	881a      	ldrh	r2, [r3, #0]
   2914c:	230e      	movs	r3, #14
   2914e:	18fb      	adds	r3, r7, r3
   29150:	2108      	movs	r1, #8
   29152:	430a      	orrs	r2, r1
   29154:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   29156:	683b      	ldr	r3, [r7, #0]
   29158:	791b      	ldrb	r3, [r3, #4]
   2915a:	2201      	movs	r2, #1
   2915c:	4053      	eors	r3, r2
   2915e:	b2db      	uxtb	r3, r3
   29160:	2b00      	cmp	r3, #0
   29162:	d007      	beq.n	29174 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   29164:	230e      	movs	r3, #14
   29166:	18fb      	adds	r3, r7, r3
   29168:	220e      	movs	r2, #14
   2916a:	18ba      	adds	r2, r7, r2
   2916c:	8812      	ldrh	r2, [r2, #0]
   2916e:	2140      	movs	r1, #64	; 0x40
   29170:	430a      	orrs	r2, r1
   29172:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   29174:	683b      	ldr	r3, [r7, #0]
   29176:	789b      	ldrb	r3, [r3, #2]
   29178:	2b00      	cmp	r3, #0
   2917a:	d007      	beq.n	2918c <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   2917c:	230e      	movs	r3, #14
   2917e:	18fb      	adds	r3, r7, r3
   29180:	220e      	movs	r2, #14
   29182:	18ba      	adds	r2, r7, r2
   29184:	8812      	ldrh	r2, [r2, #0]
   29186:	2180      	movs	r1, #128	; 0x80
   29188:	430a      	orrs	r2, r1
   2918a:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   2918c:	68bb      	ldr	r3, [r7, #8]
   2918e:	220e      	movs	r2, #14
   29190:	18ba      	adds	r2, r7, r2
   29192:	8812      	ldrh	r2, [r2, #0]
   29194:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   29196:	683b      	ldr	r3, [r7, #0]
   29198:	78db      	ldrb	r3, [r3, #3]
   2919a:	2b00      	cmp	r3, #0
   2919c:	d008      	beq.n	291b0 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   2919e:	68bb      	ldr	r3, [r7, #8]
   291a0:	885b      	ldrh	r3, [r3, #2]
   291a2:	b29b      	uxth	r3, r3
   291a4:	2280      	movs	r2, #128	; 0x80
   291a6:	01d2      	lsls	r2, r2, #7
   291a8:	4313      	orrs	r3, r2
   291aa:	b29a      	uxth	r2, r3
   291ac:	68bb      	ldr	r3, [r7, #8]
   291ae:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   291b0:	230d      	movs	r3, #13
   291b2:	18fb      	adds	r3, r7, r3
   291b4:	2200      	movs	r2, #0
   291b6:	701a      	strb	r2, [r3, #0]
   291b8:	e017      	b.n	291ea <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   291ba:	230d      	movs	r3, #13
   291bc:	18fb      	adds	r3, r7, r3
   291be:	781a      	ldrb	r2, [r3, #0]
   291c0:	0013      	movs	r3, r2
   291c2:	009b      	lsls	r3, r3, #2
   291c4:	189b      	adds	r3, r3, r2
   291c6:	005b      	lsls	r3, r3, #1
   291c8:	3308      	adds	r3, #8
   291ca:	683a      	ldr	r2, [r7, #0]
   291cc:	18d1      	adds	r1, r2, r3
   291ce:	230d      	movs	r3, #13
   291d0:	18fb      	adds	r3, r7, r3
   291d2:	781a      	ldrb	r2, [r3, #0]
   291d4:	687b      	ldr	r3, [r7, #4]
   291d6:	0018      	movs	r0, r3
   291d8:	4b08      	ldr	r3, [pc, #32]	; (291fc <_rtc_calendar_set_config+0xc4>)
   291da:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   291dc:	230d      	movs	r3, #13
   291de:	18fb      	adds	r3, r7, r3
   291e0:	781a      	ldrb	r2, [r3, #0]
   291e2:	230d      	movs	r3, #13
   291e4:	18fb      	adds	r3, r7, r3
   291e6:	3201      	adds	r2, #1
   291e8:	701a      	strb	r2, [r3, #0]
   291ea:	230d      	movs	r3, #13
   291ec:	18fb      	adds	r3, r7, r3
   291ee:	781b      	ldrb	r3, [r3, #0]
   291f0:	2b00      	cmp	r3, #0
   291f2:	d0e2      	beq.n	291ba <_rtc_calendar_set_config+0x82>
	}
}
   291f4:	46c0      	nop			; (mov r8, r8)
   291f6:	46bd      	mov	sp, r7
   291f8:	b004      	add	sp, #16
   291fa:	bd80      	pop	{r7, pc}
   291fc:	00029321 	.word	0x00029321

00029200 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   29200:	b580      	push	{r7, lr}
   29202:	b086      	sub	sp, #24
   29204:	af00      	add	r7, sp, #0
   29206:	60f8      	str	r0, [r7, #12]
   29208:	60b9      	str	r1, [r7, #8]
   2920a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2920c:	68fb      	ldr	r3, [r7, #12]
   2920e:	68ba      	ldr	r2, [r7, #8]
   29210:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   29212:	2120      	movs	r1, #32
   29214:	2000      	movs	r0, #0
   29216:	4b18      	ldr	r3, [pc, #96]	; (29278 <rtc_calendar_init+0x78>)
   29218:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2921a:	2314      	movs	r3, #20
   2921c:	18fb      	adds	r3, r7, r3
   2921e:	0018      	movs	r0, r3
   29220:	4b16      	ldr	r3, [pc, #88]	; (2927c <rtc_calendar_init+0x7c>)
   29222:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   29224:	2314      	movs	r3, #20
   29226:	18fb      	adds	r3, r7, r3
   29228:	2202      	movs	r2, #2
   2922a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   2922c:	2314      	movs	r3, #20
   2922e:	18fb      	adds	r3, r7, r3
   29230:	0019      	movs	r1, r3
   29232:	2004      	movs	r0, #4
   29234:	4b12      	ldr	r3, [pc, #72]	; (29280 <rtc_calendar_init+0x80>)
   29236:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   29238:	2004      	movs	r0, #4
   2923a:	4b12      	ldr	r3, [pc, #72]	; (29284 <rtc_calendar_init+0x84>)
   2923c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   2923e:	68fb      	ldr	r3, [r7, #12]
   29240:	0018      	movs	r0, r3
   29242:	4b11      	ldr	r3, [pc, #68]	; (29288 <rtc_calendar_init+0x88>)
   29244:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   29246:	687b      	ldr	r3, [r7, #4]
   29248:	791a      	ldrb	r2, [r3, #4]
   2924a:	68fb      	ldr	r3, [r7, #12]
   2924c:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   2924e:	687b      	ldr	r3, [r7, #4]
   29250:	78da      	ldrb	r2, [r3, #3]
   29252:	68fb      	ldr	r3, [r7, #12]
   29254:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   29256:	687b      	ldr	r3, [r7, #4]
   29258:	88da      	ldrh	r2, [r3, #6]
   2925a:	68fb      	ldr	r3, [r7, #12]
   2925c:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   2925e:	4b0b      	ldr	r3, [pc, #44]	; (2928c <rtc_calendar_init+0x8c>)
   29260:	68fa      	ldr	r2, [r7, #12]
   29262:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   29264:	687a      	ldr	r2, [r7, #4]
   29266:	68fb      	ldr	r3, [r7, #12]
   29268:	0011      	movs	r1, r2
   2926a:	0018      	movs	r0, r3
   2926c:	4b08      	ldr	r3, [pc, #32]	; (29290 <rtc_calendar_init+0x90>)
   2926e:	4798      	blx	r3
}
   29270:	46c0      	nop			; (mov r8, r8)
   29272:	46bd      	mov	sp, r7
   29274:	b006      	add	sp, #24
   29276:	bd80      	pop	{r7, pc}
   29278:	00028e4d 	.word	0x00028e4d
   2927c:	00028e35 	.word	0x00028e35
   29280:	0002c2c1 	.word	0x0002c2c1
   29284:	0002c305 	.word	0x0002c305
   29288:	00028fc1 	.word	0x00028fc1
   2928c:	20005a80 	.word	0x20005a80
   29290:	00029139 	.word	0x00029139

00029294 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   29294:	b580      	push	{r7, lr}
   29296:	b084      	sub	sp, #16
   29298:	af00      	add	r7, sp, #0
   2929a:	6078      	str	r0, [r7, #4]
   2929c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2929e:	687b      	ldr	r3, [r7, #4]
   292a0:	681b      	ldr	r3, [r3, #0]
   292a2:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   292a4:	687b      	ldr	r3, [r7, #4]
   292a6:	795b      	ldrb	r3, [r3, #5]
   292a8:	2201      	movs	r2, #1
   292aa:	4053      	eors	r3, r2
   292ac:	b2db      	uxtb	r3, r3
   292ae:	2b00      	cmp	r3, #0
   292b0:	d00a      	beq.n	292c8 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   292b2:	68fb      	ldr	r3, [r7, #12]
   292b4:	4a16      	ldr	r2, [pc, #88]	; (29310 <rtc_calendar_get_time+0x7c>)
   292b6:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   292b8:	46c0      	nop			; (mov r8, r8)
   292ba:	687b      	ldr	r3, [r7, #4]
   292bc:	0018      	movs	r0, r3
   292be:	4b15      	ldr	r3, [pc, #84]	; (29314 <rtc_calendar_get_time+0x80>)
   292c0:	4798      	blx	r3
   292c2:	1e03      	subs	r3, r0, #0
   292c4:	d1f9      	bne.n	292ba <rtc_calendar_get_time+0x26>
   292c6:	e016      	b.n	292f6 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   292c8:	68fb      	ldr	r3, [r7, #12]
   292ca:	885b      	ldrh	r3, [r3, #2]
   292cc:	b29b      	uxth	r3, r3
   292ce:	001a      	movs	r2, r3
   292d0:	2380      	movs	r3, #128	; 0x80
   292d2:	01db      	lsls	r3, r3, #7
   292d4:	4013      	ands	r3, r2
   292d6:	d10e      	bne.n	292f6 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   292d8:	68fb      	ldr	r3, [r7, #12]
   292da:	885b      	ldrh	r3, [r3, #2]
   292dc:	b29b      	uxth	r3, r3
   292de:	4a0e      	ldr	r2, [pc, #56]	; (29318 <rtc_calendar_get_time+0x84>)
   292e0:	4313      	orrs	r3, r2
   292e2:	b29a      	uxth	r2, r3
   292e4:	68fb      	ldr	r3, [r7, #12]
   292e6:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   292e8:	46c0      	nop			; (mov r8, r8)
   292ea:	687b      	ldr	r3, [r7, #4]
   292ec:	0018      	movs	r0, r3
   292ee:	4b09      	ldr	r3, [pc, #36]	; (29314 <rtc_calendar_get_time+0x80>)
   292f0:	4798      	blx	r3
   292f2:	1e03      	subs	r3, r0, #0
   292f4:	d1f9      	bne.n	292ea <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   292f6:	68fb      	ldr	r3, [r7, #12]
   292f8:	691b      	ldr	r3, [r3, #16]
   292fa:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   292fc:	683a      	ldr	r2, [r7, #0]
   292fe:	68b9      	ldr	r1, [r7, #8]
   29300:	687b      	ldr	r3, [r7, #4]
   29302:	0018      	movs	r0, r3
   29304:	4b05      	ldr	r3, [pc, #20]	; (2931c <rtc_calendar_get_time+0x88>)
   29306:	4798      	blx	r3
}
   29308:	46c0      	nop			; (mov r8, r8)
   2930a:	46bd      	mov	sp, r7
   2930c:	b004      	add	sp, #16
   2930e:	bd80      	pop	{r7, pc}
   29310:	ffff8000 	.word	0xffff8000
   29314:	00028f05 	.word	0x00028f05
   29318:	ffffc000 	.word	0xffffc000
   2931c:	00029099 	.word	0x00029099

00029320 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   29320:	b580      	push	{r7, lr}
   29322:	b086      	sub	sp, #24
   29324:	af00      	add	r7, sp, #0
   29326:	60f8      	str	r0, [r7, #12]
   29328:	60b9      	str	r1, [r7, #8]
   2932a:	1dfb      	adds	r3, r7, #7
   2932c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2932e:	68fb      	ldr	r3, [r7, #12]
   29330:	681b      	ldr	r3, [r3, #0]
   29332:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   29334:	1dfb      	adds	r3, r7, #7
   29336:	781b      	ldrb	r3, [r3, #0]
   29338:	2b01      	cmp	r3, #1
   2933a:	d901      	bls.n	29340 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   2933c:	2317      	movs	r3, #23
   2933e:	e021      	b.n	29384 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   29340:	68ba      	ldr	r2, [r7, #8]
   29342:	68fb      	ldr	r3, [r7, #12]
   29344:	0011      	movs	r1, r2
   29346:	0018      	movs	r0, r3
   29348:	4b10      	ldr	r3, [pc, #64]	; (2938c <rtc_calendar_set_alarm+0x6c>)
   2934a:	4798      	blx	r3
   2934c:	0003      	movs	r3, r0
   2934e:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   29350:	46c0      	nop			; (mov r8, r8)
   29352:	68fb      	ldr	r3, [r7, #12]
   29354:	0018      	movs	r0, r3
   29356:	4b0e      	ldr	r3, [pc, #56]	; (29390 <rtc_calendar_set_alarm+0x70>)
   29358:	4798      	blx	r3
   2935a:	1e03      	subs	r3, r0, #0
   2935c:	d1f9      	bne.n	29352 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   2935e:	1dfb      	adds	r3, r7, #7
   29360:	781a      	ldrb	r2, [r3, #0]
   29362:	697b      	ldr	r3, [r7, #20]
   29364:	3203      	adds	r2, #3
   29366:	00d2      	lsls	r2, r2, #3
   29368:	6939      	ldr	r1, [r7, #16]
   2936a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   2936c:	1dfb      	adds	r3, r7, #7
   2936e:	781b      	ldrb	r3, [r3, #0]
   29370:	68ba      	ldr	r2, [r7, #8]
   29372:	7a11      	ldrb	r1, [r2, #8]
   29374:	697a      	ldr	r2, [r7, #20]
   29376:	3303      	adds	r3, #3
   29378:	00db      	lsls	r3, r3, #3
   2937a:	18d3      	adds	r3, r2, r3
   2937c:	3304      	adds	r3, #4
   2937e:	1c0a      	adds	r2, r1, #0
   29380:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   29382:	2300      	movs	r3, #0
}
   29384:	0018      	movs	r0, r3
   29386:	46bd      	mov	sp, r7
   29388:	b006      	add	sp, #24
   2938a:	bd80      	pop	{r7, pc}
   2938c:	00029011 	.word	0x00029011
   29390:	00028f05 	.word	0x00028f05

00029394 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   29394:	b580      	push	{r7, lr}
   29396:	b086      	sub	sp, #24
   29398:	af00      	add	r7, sp, #0
   2939a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   2939c:	4b28      	ldr	r3, [pc, #160]	; (29440 <_rtc_interrupt_handler+0xac>)
   2939e:	687a      	ldr	r2, [r7, #4]
   293a0:	0092      	lsls	r2, r2, #2
   293a2:	58d3      	ldr	r3, [r2, r3]
   293a4:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   293a6:	697b      	ldr	r3, [r7, #20]
   293a8:	681b      	ldr	r3, [r3, #0]
   293aa:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   293ac:	230e      	movs	r3, #14
   293ae:	18fb      	adds	r3, r7, r3
   293b0:	697a      	ldr	r2, [r7, #20]
   293b2:	8a52      	ldrh	r2, [r2, #18]
   293b4:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   293b6:	697b      	ldr	r3, [r7, #20]
   293b8:	8a1b      	ldrh	r3, [r3, #16]
   293ba:	b29a      	uxth	r2, r3
   293bc:	230e      	movs	r3, #14
   293be:	18fb      	adds	r3, r7, r3
   293c0:	210e      	movs	r1, #14
   293c2:	1879      	adds	r1, r7, r1
   293c4:	8809      	ldrh	r1, [r1, #0]
   293c6:	400a      	ands	r2, r1
   293c8:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   293ca:	693b      	ldr	r3, [r7, #16]
   293cc:	7a1b      	ldrb	r3, [r3, #8]
   293ce:	b2da      	uxtb	r2, r3
   293d0:	230c      	movs	r3, #12
   293d2:	18fb      	adds	r3, r7, r3
   293d4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   293d6:	693b      	ldr	r3, [r7, #16]
   293d8:	79db      	ldrb	r3, [r3, #7]
   293da:	b2db      	uxtb	r3, r3
   293dc:	b29a      	uxth	r2, r3
   293de:	230c      	movs	r3, #12
   293e0:	18fb      	adds	r3, r7, r3
   293e2:	210c      	movs	r1, #12
   293e4:	1879      	adds	r1, r7, r1
   293e6:	8809      	ldrh	r1, [r1, #0]
   293e8:	400a      	ands	r2, r1
   293ea:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   293ec:	230c      	movs	r3, #12
   293ee:	18fb      	adds	r3, r7, r3
   293f0:	881b      	ldrh	r3, [r3, #0]
   293f2:	2280      	movs	r2, #128	; 0x80
   293f4:	4013      	ands	r3, r2
   293f6:	d00c      	beq.n	29412 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   293f8:	230e      	movs	r3, #14
   293fa:	18fb      	adds	r3, r7, r3
   293fc:	881b      	ldrh	r3, [r3, #0]
   293fe:	2202      	movs	r2, #2
   29400:	4013      	ands	r3, r2
   29402:	d002      	beq.n	2940a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   29404:	697b      	ldr	r3, [r7, #20]
   29406:	68db      	ldr	r3, [r3, #12]
   29408:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   2940a:	693b      	ldr	r3, [r7, #16]
   2940c:	2280      	movs	r2, #128	; 0x80
   2940e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   29410:	e011      	b.n	29436 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   29412:	230c      	movs	r3, #12
   29414:	18fb      	adds	r3, r7, r3
   29416:	881b      	ldrh	r3, [r3, #0]
   29418:	2201      	movs	r2, #1
   2941a:	4013      	ands	r3, r2
   2941c:	d00b      	beq.n	29436 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   2941e:	230e      	movs	r3, #14
   29420:	18fb      	adds	r3, r7, r3
   29422:	881b      	ldrh	r3, [r3, #0]
   29424:	2201      	movs	r2, #1
   29426:	4013      	ands	r3, r2
   29428:	d002      	beq.n	29430 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   2942a:	697b      	ldr	r3, [r7, #20]
   2942c:	689b      	ldr	r3, [r3, #8]
   2942e:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   29430:	693b      	ldr	r3, [r7, #16]
   29432:	2201      	movs	r2, #1
   29434:	721a      	strb	r2, [r3, #8]
}
   29436:	46c0      	nop			; (mov r8, r8)
   29438:	46bd      	mov	sp, r7
   2943a:	b006      	add	sp, #24
   2943c:	bd80      	pop	{r7, pc}
   2943e:	46c0      	nop			; (mov r8, r8)
   29440:	20005a80 	.word	0x20005a80

00029444 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   29444:	b580      	push	{r7, lr}
   29446:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   29448:	2000      	movs	r0, #0
   2944a:	4b02      	ldr	r3, [pc, #8]	; (29454 <RTC_Handler+0x10>)
   2944c:	4798      	blx	r3
}
   2944e:	46c0      	nop			; (mov r8, r8)
   29450:	46bd      	mov	sp, r7
   29452:	bd80      	pop	{r7, pc}
   29454:	00029395 	.word	0x00029395

00029458 <system_gclk_chan_get_config_defaults>:
{
   29458:	b580      	push	{r7, lr}
   2945a:	b082      	sub	sp, #8
   2945c:	af00      	add	r7, sp, #0
   2945e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29460:	687b      	ldr	r3, [r7, #4]
   29462:	2200      	movs	r2, #0
   29464:	701a      	strb	r2, [r3, #0]
}
   29466:	46c0      	nop			; (mov r8, r8)
   29468:	46bd      	mov	sp, r7
   2946a:	b002      	add	sp, #8
   2946c:	bd80      	pop	{r7, pc}

0002946e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   2946e:	b5f0      	push	{r4, r5, r6, r7, lr}
   29470:	b08d      	sub	sp, #52	; 0x34
   29472:	af00      	add	r7, sp, #0
   29474:	60b8      	str	r0, [r7, #8]
   29476:	60f9      	str	r1, [r7, #12]
   29478:	603a      	str	r2, [r7, #0]
   2947a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   2947c:	2300      	movs	r3, #0
   2947e:	2400      	movs	r4, #0
   29480:	623b      	str	r3, [r7, #32]
   29482:	627c      	str	r4, [r7, #36]	; 0x24
   29484:	2300      	movs	r3, #0
   29486:	2400      	movs	r4, #0
   29488:	61bb      	str	r3, [r7, #24]
   2948a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   2948c:	233f      	movs	r3, #63	; 0x3f
   2948e:	62fb      	str	r3, [r7, #44]	; 0x2c
   29490:	e053      	b.n	2953a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   29492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29494:	3b20      	subs	r3, #32
   29496:	2b00      	cmp	r3, #0
   29498:	db04      	blt.n	294a4 <long_division+0x36>
   2949a:	2201      	movs	r2, #1
   2949c:	409a      	lsls	r2, r3
   2949e:	0013      	movs	r3, r2
   294a0:	617b      	str	r3, [r7, #20]
   294a2:	e00b      	b.n	294bc <long_division+0x4e>
   294a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   294a6:	2220      	movs	r2, #32
   294a8:	1ad3      	subs	r3, r2, r3
   294aa:	2201      	movs	r2, #1
   294ac:	40da      	lsrs	r2, r3
   294ae:	0013      	movs	r3, r2
   294b0:	2100      	movs	r1, #0
   294b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   294b4:	4091      	lsls	r1, r2
   294b6:	000a      	movs	r2, r1
   294b8:	4313      	orrs	r3, r2
   294ba:	617b      	str	r3, [r7, #20]
   294bc:	2201      	movs	r2, #1
   294be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   294c0:	409a      	lsls	r2, r3
   294c2:	0013      	movs	r3, r2
   294c4:	613b      	str	r3, [r7, #16]

		r = r << 1;
   294c6:	69bb      	ldr	r3, [r7, #24]
   294c8:	69fc      	ldr	r4, [r7, #28]
   294ca:	18db      	adds	r3, r3, r3
   294cc:	4164      	adcs	r4, r4
   294ce:	61bb      	str	r3, [r7, #24]
   294d0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   294d2:	68bb      	ldr	r3, [r7, #8]
   294d4:	693a      	ldr	r2, [r7, #16]
   294d6:	401a      	ands	r2, r3
   294d8:	0015      	movs	r5, r2
   294da:	68fb      	ldr	r3, [r7, #12]
   294dc:	697a      	ldr	r2, [r7, #20]
   294de:	401a      	ands	r2, r3
   294e0:	0016      	movs	r6, r2
   294e2:	002b      	movs	r3, r5
   294e4:	4333      	orrs	r3, r6
   294e6:	d007      	beq.n	294f8 <long_division+0x8a>
			r |= 0x01;
   294e8:	69bb      	ldr	r3, [r7, #24]
   294ea:	2201      	movs	r2, #1
   294ec:	4313      	orrs	r3, r2
   294ee:	61bb      	str	r3, [r7, #24]
   294f0:	69fb      	ldr	r3, [r7, #28]
   294f2:	2200      	movs	r2, #0
   294f4:	4313      	orrs	r3, r2
   294f6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   294f8:	687a      	ldr	r2, [r7, #4]
   294fa:	69fb      	ldr	r3, [r7, #28]
   294fc:	429a      	cmp	r2, r3
   294fe:	d819      	bhi.n	29534 <long_division+0xc6>
   29500:	687a      	ldr	r2, [r7, #4]
   29502:	69fb      	ldr	r3, [r7, #28]
   29504:	429a      	cmp	r2, r3
   29506:	d103      	bne.n	29510 <long_division+0xa2>
   29508:	683a      	ldr	r2, [r7, #0]
   2950a:	69bb      	ldr	r3, [r7, #24]
   2950c:	429a      	cmp	r2, r3
   2950e:	d811      	bhi.n	29534 <long_division+0xc6>
			r = r - d;
   29510:	69b9      	ldr	r1, [r7, #24]
   29512:	69fa      	ldr	r2, [r7, #28]
   29514:	683b      	ldr	r3, [r7, #0]
   29516:	687c      	ldr	r4, [r7, #4]
   29518:	1ac9      	subs	r1, r1, r3
   2951a:	41a2      	sbcs	r2, r4
   2951c:	000b      	movs	r3, r1
   2951e:	0014      	movs	r4, r2
   29520:	61bb      	str	r3, [r7, #24]
   29522:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   29524:	6a3a      	ldr	r2, [r7, #32]
   29526:	693b      	ldr	r3, [r7, #16]
   29528:	4313      	orrs	r3, r2
   2952a:	623b      	str	r3, [r7, #32]
   2952c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2952e:	697b      	ldr	r3, [r7, #20]
   29530:	4313      	orrs	r3, r2
   29532:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   29534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29536:	3b01      	subs	r3, #1
   29538:	62fb      	str	r3, [r7, #44]	; 0x2c
   2953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2953c:	2b00      	cmp	r3, #0
   2953e:	daa8      	bge.n	29492 <long_division+0x24>
		}
	}

	return q;
   29540:	6a3b      	ldr	r3, [r7, #32]
   29542:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   29544:	0018      	movs	r0, r3
   29546:	0021      	movs	r1, r4
   29548:	46bd      	mov	sp, r7
   2954a:	b00d      	add	sp, #52	; 0x34
   2954c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002954e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   2954e:	b580      	push	{r7, lr}
   29550:	b086      	sub	sp, #24
   29552:	af00      	add	r7, sp, #0
   29554:	60f8      	str	r0, [r7, #12]
   29556:	60b9      	str	r1, [r7, #8]
   29558:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   2955a:	2316      	movs	r3, #22
   2955c:	18fb      	adds	r3, r7, r3
   2955e:	2200      	movs	r2, #0
   29560:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   29562:	68bb      	ldr	r3, [r7, #8]
   29564:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   29566:	68bb      	ldr	r3, [r7, #8]
   29568:	085a      	lsrs	r2, r3, #1
   2956a:	68fb      	ldr	r3, [r7, #12]
   2956c:	429a      	cmp	r2, r3
   2956e:	d201      	bcs.n	29574 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29570:	2340      	movs	r3, #64	; 0x40
   29572:	e026      	b.n	295c2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   29574:	68bb      	ldr	r3, [r7, #8]
   29576:	085b      	lsrs	r3, r3, #1
   29578:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   2957a:	e00a      	b.n	29592 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   2957c:	693a      	ldr	r2, [r7, #16]
   2957e:	68fb      	ldr	r3, [r7, #12]
   29580:	1ad3      	subs	r3, r2, r3
   29582:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   29584:	2316      	movs	r3, #22
   29586:	18fb      	adds	r3, r7, r3
   29588:	881a      	ldrh	r2, [r3, #0]
   2958a:	2316      	movs	r3, #22
   2958c:	18fb      	adds	r3, r7, r3
   2958e:	3201      	adds	r2, #1
   29590:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   29592:	693a      	ldr	r2, [r7, #16]
   29594:	68fb      	ldr	r3, [r7, #12]
   29596:	429a      	cmp	r2, r3
   29598:	d2f0      	bcs.n	2957c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   2959a:	2316      	movs	r3, #22
   2959c:	18fb      	adds	r3, r7, r3
   2959e:	2216      	movs	r2, #22
   295a0:	18ba      	adds	r2, r7, r2
   295a2:	8812      	ldrh	r2, [r2, #0]
   295a4:	3a01      	subs	r2, #1
   295a6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   295a8:	2316      	movs	r3, #22
   295aa:	18fb      	adds	r3, r7, r3
   295ac:	881b      	ldrh	r3, [r3, #0]
   295ae:	2bff      	cmp	r3, #255	; 0xff
   295b0:	d901      	bls.n	295b6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   295b2:	2340      	movs	r3, #64	; 0x40
   295b4:	e005      	b.n	295c2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   295b6:	687b      	ldr	r3, [r7, #4]
   295b8:	2216      	movs	r2, #22
   295ba:	18ba      	adds	r2, r7, r2
   295bc:	8812      	ldrh	r2, [r2, #0]
   295be:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   295c0:	2300      	movs	r3, #0
	}
}
   295c2:	0018      	movs	r0, r3
   295c4:	46bd      	mov	sp, r7
   295c6:	b006      	add	sp, #24
   295c8:	bd80      	pop	{r7, pc}
	...

000295cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   295cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   295ce:	b0a1      	sub	sp, #132	; 0x84
   295d0:	af00      	add	r7, sp, #0
   295d2:	64f8      	str	r0, [r7, #76]	; 0x4c
   295d4:	64b9      	str	r1, [r7, #72]	; 0x48
   295d6:	647a      	str	r2, [r7, #68]	; 0x44
   295d8:	2243      	movs	r2, #67	; 0x43
   295da:	18ba      	adds	r2, r7, r2
   295dc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   295de:	2300      	movs	r3, #0
   295e0:	2400      	movs	r4, #0
   295e2:	673b      	str	r3, [r7, #112]	; 0x70
   295e4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   295e6:	2300      	movs	r3, #0
   295e8:	2400      	movs	r4, #0
   295ea:	66bb      	str	r3, [r7, #104]	; 0x68
   295ec:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   295ee:	2300      	movs	r3, #0
   295f0:	2400      	movs	r4, #0
   295f2:	67bb      	str	r3, [r7, #120]	; 0x78
   295f4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   295f6:	2300      	movs	r3, #0
   295f8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   295fa:	2358      	movs	r3, #88	; 0x58
   295fc:	2240      	movs	r2, #64	; 0x40
   295fe:	4694      	mov	ip, r2
   29600:	44bc      	add	ip, r7
   29602:	4463      	add	r3, ip
   29604:	781a      	ldrb	r2, [r3, #0]
   29606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29608:	435a      	muls	r2, r3
   2960a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2960c:	429a      	cmp	r2, r3
   2960e:	d901      	bls.n	29614 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29610:	2340      	movs	r3, #64	; 0x40
   29612:	e0b3      	b.n	2977c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   29614:	2343      	movs	r3, #67	; 0x43
   29616:	18fb      	adds	r3, r7, r3
   29618:	781b      	ldrb	r3, [r3, #0]
   2961a:	2b00      	cmp	r3, #0
   2961c:	d13d      	bne.n	2969a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   2961e:	2358      	movs	r3, #88	; 0x58
   29620:	2240      	movs	r2, #64	; 0x40
   29622:	4694      	mov	ip, r2
   29624:	44bc      	add	ip, r7
   29626:	4463      	add	r3, ip
   29628:	781b      	ldrb	r3, [r3, #0]
   2962a:	b2db      	uxtb	r3, r3
   2962c:	613b      	str	r3, [r7, #16]
   2962e:	2300      	movs	r3, #0
   29630:	617b      	str	r3, [r7, #20]
   29632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29634:	60bb      	str	r3, [r7, #8]
   29636:	2300      	movs	r3, #0
   29638:	60fb      	str	r3, [r7, #12]
   2963a:	4c52      	ldr	r4, [pc, #328]	; (29784 <_sercom_get_async_baud_val+0x1b8>)
   2963c:	68ba      	ldr	r2, [r7, #8]
   2963e:	68fb      	ldr	r3, [r7, #12]
   29640:	6938      	ldr	r0, [r7, #16]
   29642:	6979      	ldr	r1, [r7, #20]
   29644:	47a0      	blx	r4
   29646:	0003      	movs	r3, r0
   29648:	000c      	movs	r4, r1
   2964a:	001b      	movs	r3, r3
   2964c:	65fb      	str	r3, [r7, #92]	; 0x5c
   2964e:	2300      	movs	r3, #0
   29650:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   29652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29654:	603b      	str	r3, [r7, #0]
   29656:	2300      	movs	r3, #0
   29658:	607b      	str	r3, [r7, #4]
   2965a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   2965c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2965e:	683a      	ldr	r2, [r7, #0]
   29660:	687b      	ldr	r3, [r7, #4]
   29662:	4c49      	ldr	r4, [pc, #292]	; (29788 <_sercom_get_async_baud_val+0x1bc>)
   29664:	47a0      	blx	r4
   29666:	0003      	movs	r3, r0
   29668:	000c      	movs	r4, r1
   2966a:	673b      	str	r3, [r7, #112]	; 0x70
   2966c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   2966e:	2100      	movs	r1, #0
   29670:	2201      	movs	r2, #1
   29672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   29674:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   29676:	1ac9      	subs	r1, r1, r3
   29678:	41a2      	sbcs	r2, r4
   2967a:	000b      	movs	r3, r1
   2967c:	0014      	movs	r4, r2
   2967e:	66bb      	str	r3, [r7, #104]	; 0x68
   29680:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   29682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   29684:	0c1b      	lsrs	r3, r3, #16
   29686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   29688:	0416      	lsls	r6, r2, #16
   2968a:	431e      	orrs	r6, r3
   2968c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2968e:	041d      	lsls	r5, r3, #16
   29690:	0033      	movs	r3, r6
   29692:	67bb      	str	r3, [r7, #120]	; 0x78
   29694:	2300      	movs	r3, #0
   29696:	67fb      	str	r3, [r7, #124]	; 0x7c
   29698:	e06a      	b.n	29770 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   2969a:	2343      	movs	r3, #67	; 0x43
   2969c:	18fb      	adds	r3, r7, r3
   2969e:	781b      	ldrb	r3, [r3, #0]
   296a0:	2b01      	cmp	r3, #1
   296a2:	d165      	bne.n	29770 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   296a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   296a6:	633b      	str	r3, [r7, #48]	; 0x30
   296a8:	2300      	movs	r3, #0
   296aa:	637b      	str	r3, [r7, #52]	; 0x34
   296ac:	2358      	movs	r3, #88	; 0x58
   296ae:	2240      	movs	r2, #64	; 0x40
   296b0:	4694      	mov	ip, r2
   296b2:	44bc      	add	ip, r7
   296b4:	4463      	add	r3, ip
   296b6:	781b      	ldrb	r3, [r3, #0]
   296b8:	b2db      	uxtb	r3, r3
   296ba:	62bb      	str	r3, [r7, #40]	; 0x28
   296bc:	2300      	movs	r3, #0
   296be:	62fb      	str	r3, [r7, #44]	; 0x2c
   296c0:	4c30      	ldr	r4, [pc, #192]	; (29784 <_sercom_get_async_baud_val+0x1b8>)
   296c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   296c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   296c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   296c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
   296ca:	47a0      	blx	r4
   296cc:	0003      	movs	r3, r0
   296ce:	000c      	movs	r4, r1
   296d0:	65bb      	str	r3, [r7, #88]	; 0x58
   296d2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   296d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   296d6:	623b      	str	r3, [r7, #32]
   296d8:	2300      	movs	r3, #0
   296da:	627b      	str	r3, [r7, #36]	; 0x24
   296dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   296de:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   296e0:	001a      	movs	r2, r3
   296e2:	0023      	movs	r3, r4
   296e4:	6a38      	ldr	r0, [r7, #32]
   296e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   296e8:	4c27      	ldr	r4, [pc, #156]	; (29788 <_sercom_get_async_baud_val+0x1bc>)
   296ea:	47a0      	blx	r4
   296ec:	0003      	movs	r3, r0
   296ee:	000c      	movs	r4, r1
   296f0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   296f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   296f4:	2380      	movs	r3, #128	; 0x80
   296f6:	019b      	lsls	r3, r3, #6
   296f8:	429a      	cmp	r2, r3
   296fa:	d901      	bls.n	29700 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   296fc:	2340      	movs	r3, #64	; 0x40
   296fe:	e03d      	b.n	2977c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   29700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29702:	61bb      	str	r3, [r7, #24]
   29704:	2300      	movs	r3, #0
   29706:	61fb      	str	r3, [r7, #28]
   29708:	69b9      	ldr	r1, [r7, #24]
   2970a:	69fa      	ldr	r2, [r7, #28]
   2970c:	000b      	movs	r3, r1
   2970e:	0f5b      	lsrs	r3, r3, #29
   29710:	0010      	movs	r0, r2
   29712:	00c0      	lsls	r0, r0, #3
   29714:	63f8      	str	r0, [r7, #60]	; 0x3c
   29716:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   29718:	4318      	orrs	r0, r3
   2971a:	63f8      	str	r0, [r7, #60]	; 0x3c
   2971c:	000b      	movs	r3, r1
   2971e:	00db      	lsls	r3, r3, #3
   29720:	63bb      	str	r3, [r7, #56]	; 0x38
   29722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   29724:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   29726:	001a      	movs	r2, r3
   29728:	0023      	movs	r3, r4
   2972a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   2972c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2972e:	4c16      	ldr	r4, [pc, #88]	; (29788 <_sercom_get_async_baud_val+0x1bc>)
   29730:	47a0      	blx	r4
   29732:	0003      	movs	r3, r0
   29734:	000c      	movs	r4, r1
   29736:	65bb      	str	r3, [r7, #88]	; 0x58
   29738:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   2973a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2973c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2973e:	b2d9      	uxtb	r1, r3
   29740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29742:	b2db      	uxtb	r3, r3
   29744:	00db      	lsls	r3, r3, #3
   29746:	b2da      	uxtb	r2, r3
   29748:	2317      	movs	r3, #23
   2974a:	2040      	movs	r0, #64	; 0x40
   2974c:	4684      	mov	ip, r0
   2974e:	44bc      	add	ip, r7
   29750:	4463      	add	r3, ip
   29752:	1a8a      	subs	r2, r1, r2
   29754:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   29756:	2317      	movs	r3, #23
   29758:	2240      	movs	r2, #64	; 0x40
   2975a:	4694      	mov	ip, r2
   2975c:	44bc      	add	ip, r7
   2975e:	4463      	add	r3, ip
   29760:	781b      	ldrb	r3, [r3, #0]
   29762:	035b      	lsls	r3, r3, #13
   29764:	001a      	movs	r2, r3
   29766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29768:	4313      	orrs	r3, r2
   2976a:	67bb      	str	r3, [r7, #120]	; 0x78
   2976c:	2300      	movs	r3, #0
   2976e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   29770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   29772:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   29774:	b29a      	uxth	r2, r3
   29776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29778:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   2977a:	2300      	movs	r3, #0
}
   2977c:	0018      	movs	r0, r3
   2977e:	46bd      	mov	sp, r7
   29780:	b021      	add	sp, #132	; 0x84
   29782:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29784:	000351e5 	.word	0x000351e5
   29788:	0002946f 	.word	0x0002946f

0002978c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   2978c:	b580      	push	{r7, lr}
   2978e:	b084      	sub	sp, #16
   29790:	af00      	add	r7, sp, #0
   29792:	0002      	movs	r2, r0
   29794:	1dfb      	adds	r3, r7, #7
   29796:	701a      	strb	r2, [r3, #0]
   29798:	1dbb      	adds	r3, r7, #6
   2979a:	1c0a      	adds	r2, r1, #0
   2979c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2979e:	4b1a      	ldr	r3, [pc, #104]	; (29808 <sercom_set_gclk_generator+0x7c>)
   297a0:	781b      	ldrb	r3, [r3, #0]
   297a2:	2201      	movs	r2, #1
   297a4:	4053      	eors	r3, r2
   297a6:	b2db      	uxtb	r3, r3
   297a8:	2b00      	cmp	r3, #0
   297aa:	d103      	bne.n	297b4 <sercom_set_gclk_generator+0x28>
   297ac:	1dbb      	adds	r3, r7, #6
   297ae:	781b      	ldrb	r3, [r3, #0]
   297b0:	2b00      	cmp	r3, #0
   297b2:	d01b      	beq.n	297ec <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   297b4:	230c      	movs	r3, #12
   297b6:	18fb      	adds	r3, r7, r3
   297b8:	0018      	movs	r0, r3
   297ba:	4b14      	ldr	r3, [pc, #80]	; (2980c <sercom_set_gclk_generator+0x80>)
   297bc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   297be:	230c      	movs	r3, #12
   297c0:	18fb      	adds	r3, r7, r3
   297c2:	1dfa      	adds	r2, r7, #7
   297c4:	7812      	ldrb	r2, [r2, #0]
   297c6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   297c8:	230c      	movs	r3, #12
   297ca:	18fb      	adds	r3, r7, r3
   297cc:	0019      	movs	r1, r3
   297ce:	2013      	movs	r0, #19
   297d0:	4b0f      	ldr	r3, [pc, #60]	; (29810 <sercom_set_gclk_generator+0x84>)
   297d2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   297d4:	2013      	movs	r0, #19
   297d6:	4b0f      	ldr	r3, [pc, #60]	; (29814 <sercom_set_gclk_generator+0x88>)
   297d8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   297da:	4b0b      	ldr	r3, [pc, #44]	; (29808 <sercom_set_gclk_generator+0x7c>)
   297dc:	1dfa      	adds	r2, r7, #7
   297de:	7812      	ldrb	r2, [r2, #0]
   297e0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   297e2:	4b09      	ldr	r3, [pc, #36]	; (29808 <sercom_set_gclk_generator+0x7c>)
   297e4:	2201      	movs	r2, #1
   297e6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   297e8:	2300      	movs	r3, #0
   297ea:	e008      	b.n	297fe <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   297ec:	4b06      	ldr	r3, [pc, #24]	; (29808 <sercom_set_gclk_generator+0x7c>)
   297ee:	785b      	ldrb	r3, [r3, #1]
   297f0:	1dfa      	adds	r2, r7, #7
   297f2:	7812      	ldrb	r2, [r2, #0]
   297f4:	429a      	cmp	r2, r3
   297f6:	d101      	bne.n	297fc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   297f8:	2300      	movs	r3, #0
   297fa:	e000      	b.n	297fe <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   297fc:	231d      	movs	r3, #29
}
   297fe:	0018      	movs	r0, r3
   29800:	46bd      	mov	sp, r7
   29802:	b004      	add	sp, #16
   29804:	bd80      	pop	{r7, pc}
   29806:	46c0      	nop			; (mov r8, r8)
   29808:	20004134 	.word	0x20004134
   2980c:	00029459 	.word	0x00029459
   29810:	0002c2c1 	.word	0x0002c2c1
   29814:	0002c305 	.word	0x0002c305

00029818 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   29818:	b580      	push	{r7, lr}
   2981a:	b082      	sub	sp, #8
   2981c:	af00      	add	r7, sp, #0
   2981e:	6078      	str	r0, [r7, #4]
   29820:	000a      	movs	r2, r1
   29822:	1cfb      	adds	r3, r7, #3
   29824:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   29826:	687b      	ldr	r3, [r7, #4]
   29828:	4a4d      	ldr	r2, [pc, #308]	; (29960 <_sercom_get_default_pad+0x148>)
   2982a:	4293      	cmp	r3, r2
   2982c:	d03f      	beq.n	298ae <_sercom_get_default_pad+0x96>
   2982e:	4a4c      	ldr	r2, [pc, #304]	; (29960 <_sercom_get_default_pad+0x148>)
   29830:	4293      	cmp	r3, r2
   29832:	d806      	bhi.n	29842 <_sercom_get_default_pad+0x2a>
   29834:	4a4b      	ldr	r2, [pc, #300]	; (29964 <_sercom_get_default_pad+0x14c>)
   29836:	4293      	cmp	r3, r2
   29838:	d00f      	beq.n	2985a <_sercom_get_default_pad+0x42>
   2983a:	4a4b      	ldr	r2, [pc, #300]	; (29968 <_sercom_get_default_pad+0x150>)
   2983c:	4293      	cmp	r3, r2
   2983e:	d021      	beq.n	29884 <_sercom_get_default_pad+0x6c>
   29840:	e089      	b.n	29956 <_sercom_get_default_pad+0x13e>
   29842:	4a4a      	ldr	r2, [pc, #296]	; (2996c <_sercom_get_default_pad+0x154>)
   29844:	4293      	cmp	r3, r2
   29846:	d100      	bne.n	2984a <_sercom_get_default_pad+0x32>
   29848:	e05b      	b.n	29902 <_sercom_get_default_pad+0xea>
   2984a:	4a49      	ldr	r2, [pc, #292]	; (29970 <_sercom_get_default_pad+0x158>)
   2984c:	4293      	cmp	r3, r2
   2984e:	d100      	bne.n	29852 <_sercom_get_default_pad+0x3a>
   29850:	e06c      	b.n	2992c <_sercom_get_default_pad+0x114>
   29852:	4a48      	ldr	r2, [pc, #288]	; (29974 <_sercom_get_default_pad+0x15c>)
   29854:	4293      	cmp	r3, r2
   29856:	d03f      	beq.n	298d8 <_sercom_get_default_pad+0xc0>
   29858:	e07d      	b.n	29956 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   2985a:	1cfb      	adds	r3, r7, #3
   2985c:	781b      	ldrb	r3, [r3, #0]
   2985e:	2b01      	cmp	r3, #1
   29860:	d00a      	beq.n	29878 <_sercom_get_default_pad+0x60>
   29862:	dc02      	bgt.n	2986a <_sercom_get_default_pad+0x52>
   29864:	2b00      	cmp	r3, #0
   29866:	d005      	beq.n	29874 <_sercom_get_default_pad+0x5c>
   29868:	e075      	b.n	29956 <_sercom_get_default_pad+0x13e>
   2986a:	2b02      	cmp	r3, #2
   2986c:	d006      	beq.n	2987c <_sercom_get_default_pad+0x64>
   2986e:	2b03      	cmp	r3, #3
   29870:	d006      	beq.n	29880 <_sercom_get_default_pad+0x68>
   29872:	e070      	b.n	29956 <_sercom_get_default_pad+0x13e>
   29874:	4b40      	ldr	r3, [pc, #256]	; (29978 <_sercom_get_default_pad+0x160>)
   29876:	e06f      	b.n	29958 <_sercom_get_default_pad+0x140>
   29878:	4b40      	ldr	r3, [pc, #256]	; (2997c <_sercom_get_default_pad+0x164>)
   2987a:	e06d      	b.n	29958 <_sercom_get_default_pad+0x140>
   2987c:	4b40      	ldr	r3, [pc, #256]	; (29980 <_sercom_get_default_pad+0x168>)
   2987e:	e06b      	b.n	29958 <_sercom_get_default_pad+0x140>
   29880:	4b40      	ldr	r3, [pc, #256]	; (29984 <_sercom_get_default_pad+0x16c>)
   29882:	e069      	b.n	29958 <_sercom_get_default_pad+0x140>
   29884:	1cfb      	adds	r3, r7, #3
   29886:	781b      	ldrb	r3, [r3, #0]
   29888:	2b01      	cmp	r3, #1
   2988a:	d00a      	beq.n	298a2 <_sercom_get_default_pad+0x8a>
   2988c:	dc02      	bgt.n	29894 <_sercom_get_default_pad+0x7c>
   2988e:	2b00      	cmp	r3, #0
   29890:	d005      	beq.n	2989e <_sercom_get_default_pad+0x86>
   29892:	e060      	b.n	29956 <_sercom_get_default_pad+0x13e>
   29894:	2b02      	cmp	r3, #2
   29896:	d006      	beq.n	298a6 <_sercom_get_default_pad+0x8e>
   29898:	2b03      	cmp	r3, #3
   2989a:	d006      	beq.n	298aa <_sercom_get_default_pad+0x92>
   2989c:	e05b      	b.n	29956 <_sercom_get_default_pad+0x13e>
   2989e:	2303      	movs	r3, #3
   298a0:	e05a      	b.n	29958 <_sercom_get_default_pad+0x140>
   298a2:	4b39      	ldr	r3, [pc, #228]	; (29988 <_sercom_get_default_pad+0x170>)
   298a4:	e058      	b.n	29958 <_sercom_get_default_pad+0x140>
   298a6:	4b39      	ldr	r3, [pc, #228]	; (2998c <_sercom_get_default_pad+0x174>)
   298a8:	e056      	b.n	29958 <_sercom_get_default_pad+0x140>
   298aa:	4b39      	ldr	r3, [pc, #228]	; (29990 <_sercom_get_default_pad+0x178>)
   298ac:	e054      	b.n	29958 <_sercom_get_default_pad+0x140>
   298ae:	1cfb      	adds	r3, r7, #3
   298b0:	781b      	ldrb	r3, [r3, #0]
   298b2:	2b01      	cmp	r3, #1
   298b4:	d00a      	beq.n	298cc <_sercom_get_default_pad+0xb4>
   298b6:	dc02      	bgt.n	298be <_sercom_get_default_pad+0xa6>
   298b8:	2b00      	cmp	r3, #0
   298ba:	d005      	beq.n	298c8 <_sercom_get_default_pad+0xb0>
   298bc:	e04b      	b.n	29956 <_sercom_get_default_pad+0x13e>
   298be:	2b02      	cmp	r3, #2
   298c0:	d006      	beq.n	298d0 <_sercom_get_default_pad+0xb8>
   298c2:	2b03      	cmp	r3, #3
   298c4:	d006      	beq.n	298d4 <_sercom_get_default_pad+0xbc>
   298c6:	e046      	b.n	29956 <_sercom_get_default_pad+0x13e>
   298c8:	4b32      	ldr	r3, [pc, #200]	; (29994 <_sercom_get_default_pad+0x17c>)
   298ca:	e045      	b.n	29958 <_sercom_get_default_pad+0x140>
   298cc:	4b32      	ldr	r3, [pc, #200]	; (29998 <_sercom_get_default_pad+0x180>)
   298ce:	e043      	b.n	29958 <_sercom_get_default_pad+0x140>
   298d0:	4b32      	ldr	r3, [pc, #200]	; (2999c <_sercom_get_default_pad+0x184>)
   298d2:	e041      	b.n	29958 <_sercom_get_default_pad+0x140>
   298d4:	4b32      	ldr	r3, [pc, #200]	; (299a0 <_sercom_get_default_pad+0x188>)
   298d6:	e03f      	b.n	29958 <_sercom_get_default_pad+0x140>
   298d8:	1cfb      	adds	r3, r7, #3
   298da:	781b      	ldrb	r3, [r3, #0]
   298dc:	2b01      	cmp	r3, #1
   298de:	d00a      	beq.n	298f6 <_sercom_get_default_pad+0xde>
   298e0:	dc02      	bgt.n	298e8 <_sercom_get_default_pad+0xd0>
   298e2:	2b00      	cmp	r3, #0
   298e4:	d005      	beq.n	298f2 <_sercom_get_default_pad+0xda>
   298e6:	e036      	b.n	29956 <_sercom_get_default_pad+0x13e>
   298e8:	2b02      	cmp	r3, #2
   298ea:	d006      	beq.n	298fa <_sercom_get_default_pad+0xe2>
   298ec:	2b03      	cmp	r3, #3
   298ee:	d006      	beq.n	298fe <_sercom_get_default_pad+0xe6>
   298f0:	e031      	b.n	29956 <_sercom_get_default_pad+0x13e>
   298f2:	4b2c      	ldr	r3, [pc, #176]	; (299a4 <_sercom_get_default_pad+0x18c>)
   298f4:	e030      	b.n	29958 <_sercom_get_default_pad+0x140>
   298f6:	4b2c      	ldr	r3, [pc, #176]	; (299a8 <_sercom_get_default_pad+0x190>)
   298f8:	e02e      	b.n	29958 <_sercom_get_default_pad+0x140>
   298fa:	4b2c      	ldr	r3, [pc, #176]	; (299ac <_sercom_get_default_pad+0x194>)
   298fc:	e02c      	b.n	29958 <_sercom_get_default_pad+0x140>
   298fe:	4b2c      	ldr	r3, [pc, #176]	; (299b0 <_sercom_get_default_pad+0x198>)
   29900:	e02a      	b.n	29958 <_sercom_get_default_pad+0x140>
   29902:	1cfb      	adds	r3, r7, #3
   29904:	781b      	ldrb	r3, [r3, #0]
   29906:	2b01      	cmp	r3, #1
   29908:	d00a      	beq.n	29920 <_sercom_get_default_pad+0x108>
   2990a:	dc02      	bgt.n	29912 <_sercom_get_default_pad+0xfa>
   2990c:	2b00      	cmp	r3, #0
   2990e:	d005      	beq.n	2991c <_sercom_get_default_pad+0x104>
   29910:	e021      	b.n	29956 <_sercom_get_default_pad+0x13e>
   29912:	2b02      	cmp	r3, #2
   29914:	d006      	beq.n	29924 <_sercom_get_default_pad+0x10c>
   29916:	2b03      	cmp	r3, #3
   29918:	d006      	beq.n	29928 <_sercom_get_default_pad+0x110>
   2991a:	e01c      	b.n	29956 <_sercom_get_default_pad+0x13e>
   2991c:	4b25      	ldr	r3, [pc, #148]	; (299b4 <_sercom_get_default_pad+0x19c>)
   2991e:	e01b      	b.n	29958 <_sercom_get_default_pad+0x140>
   29920:	4b25      	ldr	r3, [pc, #148]	; (299b8 <_sercom_get_default_pad+0x1a0>)
   29922:	e019      	b.n	29958 <_sercom_get_default_pad+0x140>
   29924:	4b25      	ldr	r3, [pc, #148]	; (299bc <_sercom_get_default_pad+0x1a4>)
   29926:	e017      	b.n	29958 <_sercom_get_default_pad+0x140>
   29928:	4b25      	ldr	r3, [pc, #148]	; (299c0 <_sercom_get_default_pad+0x1a8>)
   2992a:	e015      	b.n	29958 <_sercom_get_default_pad+0x140>
   2992c:	1cfb      	adds	r3, r7, #3
   2992e:	781b      	ldrb	r3, [r3, #0]
   29930:	2b01      	cmp	r3, #1
   29932:	d00a      	beq.n	2994a <_sercom_get_default_pad+0x132>
   29934:	dc02      	bgt.n	2993c <_sercom_get_default_pad+0x124>
   29936:	2b00      	cmp	r3, #0
   29938:	d005      	beq.n	29946 <_sercom_get_default_pad+0x12e>
   2993a:	e00c      	b.n	29956 <_sercom_get_default_pad+0x13e>
   2993c:	2b02      	cmp	r3, #2
   2993e:	d006      	beq.n	2994e <_sercom_get_default_pad+0x136>
   29940:	2b03      	cmp	r3, #3
   29942:	d006      	beq.n	29952 <_sercom_get_default_pad+0x13a>
   29944:	e007      	b.n	29956 <_sercom_get_default_pad+0x13e>
   29946:	4b1f      	ldr	r3, [pc, #124]	; (299c4 <_sercom_get_default_pad+0x1ac>)
   29948:	e006      	b.n	29958 <_sercom_get_default_pad+0x140>
   2994a:	4b1f      	ldr	r3, [pc, #124]	; (299c8 <_sercom_get_default_pad+0x1b0>)
   2994c:	e004      	b.n	29958 <_sercom_get_default_pad+0x140>
   2994e:	4b1f      	ldr	r3, [pc, #124]	; (299cc <_sercom_get_default_pad+0x1b4>)
   29950:	e002      	b.n	29958 <_sercom_get_default_pad+0x140>
   29952:	4b1f      	ldr	r3, [pc, #124]	; (299d0 <_sercom_get_default_pad+0x1b8>)
   29954:	e000      	b.n	29958 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   29956:	2300      	movs	r3, #0
}
   29958:	0018      	movs	r0, r3
   2995a:	46bd      	mov	sp, r7
   2995c:	b002      	add	sp, #8
   2995e:	bd80      	pop	{r7, pc}
   29960:	42001000 	.word	0x42001000
   29964:	42000800 	.word	0x42000800
   29968:	42000c00 	.word	0x42000c00
   2996c:	42001800 	.word	0x42001800
   29970:	42001c00 	.word	0x42001c00
   29974:	42001400 	.word	0x42001400
   29978:	00040003 	.word	0x00040003
   2997c:	00050003 	.word	0x00050003
   29980:	00060003 	.word	0x00060003
   29984:	00070003 	.word	0x00070003
   29988:	00010003 	.word	0x00010003
   2998c:	001e0003 	.word	0x001e0003
   29990:	001f0003 	.word	0x001f0003
   29994:	00080003 	.word	0x00080003
   29998:	00090003 	.word	0x00090003
   2999c:	000a0003 	.word	0x000a0003
   299a0:	000b0003 	.word	0x000b0003
   299a4:	00100003 	.word	0x00100003
   299a8:	00110003 	.word	0x00110003
   299ac:	00120003 	.word	0x00120003
   299b0:	00130003 	.word	0x00130003
   299b4:	000c0003 	.word	0x000c0003
   299b8:	000d0003 	.word	0x000d0003
   299bc:	000e0003 	.word	0x000e0003
   299c0:	000f0003 	.word	0x000f0003
   299c4:	00160003 	.word	0x00160003
   299c8:	00170003 	.word	0x00170003
   299cc:	00180003 	.word	0x00180003
   299d0:	00190003 	.word	0x00190003

000299d4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   299d4:	b590      	push	{r4, r7, lr}
   299d6:	b08b      	sub	sp, #44	; 0x2c
   299d8:	af00      	add	r7, sp, #0
   299da:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   299dc:	230c      	movs	r3, #12
   299de:	18fb      	adds	r3, r7, r3
   299e0:	4a0f      	ldr	r2, [pc, #60]	; (29a20 <_sercom_get_sercom_inst_index+0x4c>)
   299e2:	ca13      	ldmia	r2!, {r0, r1, r4}
   299e4:	c313      	stmia	r3!, {r0, r1, r4}
   299e6:	ca13      	ldmia	r2!, {r0, r1, r4}
   299e8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   299ea:	2300      	movs	r3, #0
   299ec:	627b      	str	r3, [r7, #36]	; 0x24
   299ee:	e00e      	b.n	29a0e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   299f0:	230c      	movs	r3, #12
   299f2:	18fb      	adds	r3, r7, r3
   299f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   299f6:	0092      	lsls	r2, r2, #2
   299f8:	58d3      	ldr	r3, [r2, r3]
   299fa:	001a      	movs	r2, r3
   299fc:	687b      	ldr	r3, [r7, #4]
   299fe:	429a      	cmp	r2, r3
   29a00:	d102      	bne.n	29a08 <_sercom_get_sercom_inst_index+0x34>
			return i;
   29a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29a04:	b2db      	uxtb	r3, r3
   29a06:	e006      	b.n	29a16 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29a0a:	3301      	adds	r3, #1
   29a0c:	627b      	str	r3, [r7, #36]	; 0x24
   29a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29a10:	2b05      	cmp	r3, #5
   29a12:	d9ed      	bls.n	299f0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   29a14:	2300      	movs	r3, #0
}
   29a16:	0018      	movs	r0, r3
   29a18:	46bd      	mov	sp, r7
   29a1a:	b00b      	add	sp, #44	; 0x2c
   29a1c:	bd90      	pop	{r4, r7, pc}
   29a1e:	46c0      	nop			; (mov r8, r8)
   29a20:	0003c7c0 	.word	0x0003c7c0

00029a24 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   29a24:	b580      	push	{r7, lr}
   29a26:	b082      	sub	sp, #8
   29a28:	af00      	add	r7, sp, #0
   29a2a:	0002      	movs	r2, r0
   29a2c:	1dfb      	adds	r3, r7, #7
   29a2e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   29a30:	46c0      	nop			; (mov r8, r8)
   29a32:	46bd      	mov	sp, r7
   29a34:	b002      	add	sp, #8
   29a36:	bd80      	pop	{r7, pc}

00029a38 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   29a38:	b580      	push	{r7, lr}
   29a3a:	b084      	sub	sp, #16
   29a3c:	af00      	add	r7, sp, #0
   29a3e:	0002      	movs	r2, r0
   29a40:	6039      	str	r1, [r7, #0]
   29a42:	1dfb      	adds	r3, r7, #7
   29a44:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   29a46:	4b13      	ldr	r3, [pc, #76]	; (29a94 <_sercom_set_handler+0x5c>)
   29a48:	781b      	ldrb	r3, [r3, #0]
   29a4a:	2201      	movs	r2, #1
   29a4c:	4053      	eors	r3, r2
   29a4e:	b2db      	uxtb	r3, r3
   29a50:	2b00      	cmp	r3, #0
   29a52:	d015      	beq.n	29a80 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29a54:	2300      	movs	r3, #0
   29a56:	60fb      	str	r3, [r7, #12]
   29a58:	e00c      	b.n	29a74 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   29a5a:	4b0f      	ldr	r3, [pc, #60]	; (29a98 <_sercom_set_handler+0x60>)
   29a5c:	68fa      	ldr	r2, [r7, #12]
   29a5e:	0092      	lsls	r2, r2, #2
   29a60:	490e      	ldr	r1, [pc, #56]	; (29a9c <_sercom_set_handler+0x64>)
   29a62:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   29a64:	4b0e      	ldr	r3, [pc, #56]	; (29aa0 <_sercom_set_handler+0x68>)
   29a66:	68fa      	ldr	r2, [r7, #12]
   29a68:	0092      	lsls	r2, r2, #2
   29a6a:	2100      	movs	r1, #0
   29a6c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29a6e:	68fb      	ldr	r3, [r7, #12]
   29a70:	3301      	adds	r3, #1
   29a72:	60fb      	str	r3, [r7, #12]
   29a74:	68fb      	ldr	r3, [r7, #12]
   29a76:	2b05      	cmp	r3, #5
   29a78:	d9ef      	bls.n	29a5a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   29a7a:	4b06      	ldr	r3, [pc, #24]	; (29a94 <_sercom_set_handler+0x5c>)
   29a7c:	2201      	movs	r2, #1
   29a7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   29a80:	1dfb      	adds	r3, r7, #7
   29a82:	781a      	ldrb	r2, [r3, #0]
   29a84:	4b04      	ldr	r3, [pc, #16]	; (29a98 <_sercom_set_handler+0x60>)
   29a86:	0092      	lsls	r2, r2, #2
   29a88:	6839      	ldr	r1, [r7, #0]
   29a8a:	50d1      	str	r1, [r2, r3]
}
   29a8c:	46c0      	nop			; (mov r8, r8)
   29a8e:	46bd      	mov	sp, r7
   29a90:	b004      	add	sp, #16
   29a92:	bd80      	pop	{r7, pc}
   29a94:	20004136 	.word	0x20004136
   29a98:	20004138 	.word	0x20004138
   29a9c:	00029a25 	.word	0x00029a25
   29aa0:	20005a84 	.word	0x20005a84

00029aa4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   29aa4:	b590      	push	{r4, r7, lr}
   29aa6:	b085      	sub	sp, #20
   29aa8:	af00      	add	r7, sp, #0
   29aaa:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   29aac:	2308      	movs	r3, #8
   29aae:	18fb      	adds	r3, r7, r3
   29ab0:	4a0b      	ldr	r2, [pc, #44]	; (29ae0 <_sercom_get_interrupt_vector+0x3c>)
   29ab2:	6811      	ldr	r1, [r2, #0]
   29ab4:	6019      	str	r1, [r3, #0]
   29ab6:	8892      	ldrh	r2, [r2, #4]
   29ab8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   29aba:	230f      	movs	r3, #15
   29abc:	18fc      	adds	r4, r7, r3
   29abe:	687b      	ldr	r3, [r7, #4]
   29ac0:	0018      	movs	r0, r3
   29ac2:	4b08      	ldr	r3, [pc, #32]	; (29ae4 <_sercom_get_interrupt_vector+0x40>)
   29ac4:	4798      	blx	r3
   29ac6:	0003      	movs	r3, r0
   29ac8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   29aca:	230f      	movs	r3, #15
   29acc:	18fb      	adds	r3, r7, r3
   29ace:	781b      	ldrb	r3, [r3, #0]
   29ad0:	2208      	movs	r2, #8
   29ad2:	18ba      	adds	r2, r7, r2
   29ad4:	5cd3      	ldrb	r3, [r2, r3]
   29ad6:	b25b      	sxtb	r3, r3
}
   29ad8:	0018      	movs	r0, r3
   29ada:	46bd      	mov	sp, r7
   29adc:	b005      	add	sp, #20
   29ade:	bd90      	pop	{r4, r7, pc}
   29ae0:	0003c7d8 	.word	0x0003c7d8
   29ae4:	000299d5 	.word	0x000299d5

00029ae8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   29ae8:	b580      	push	{r7, lr}
   29aea:	af00      	add	r7, sp, #0
   29aec:	4b03      	ldr	r3, [pc, #12]	; (29afc <SERCOM0_Handler+0x14>)
   29aee:	681b      	ldr	r3, [r3, #0]
   29af0:	2000      	movs	r0, #0
   29af2:	4798      	blx	r3
   29af4:	46c0      	nop			; (mov r8, r8)
   29af6:	46bd      	mov	sp, r7
   29af8:	bd80      	pop	{r7, pc}
   29afa:	46c0      	nop			; (mov r8, r8)
   29afc:	20004138 	.word	0x20004138

00029b00 <SERCOM1_Handler>:
   29b00:	b580      	push	{r7, lr}
   29b02:	af00      	add	r7, sp, #0
   29b04:	4b03      	ldr	r3, [pc, #12]	; (29b14 <SERCOM1_Handler+0x14>)
   29b06:	685b      	ldr	r3, [r3, #4]
   29b08:	2001      	movs	r0, #1
   29b0a:	4798      	blx	r3
   29b0c:	46c0      	nop			; (mov r8, r8)
   29b0e:	46bd      	mov	sp, r7
   29b10:	bd80      	pop	{r7, pc}
   29b12:	46c0      	nop			; (mov r8, r8)
   29b14:	20004138 	.word	0x20004138

00029b18 <SERCOM2_Handler>:
   29b18:	b580      	push	{r7, lr}
   29b1a:	af00      	add	r7, sp, #0
   29b1c:	4b03      	ldr	r3, [pc, #12]	; (29b2c <SERCOM2_Handler+0x14>)
   29b1e:	689b      	ldr	r3, [r3, #8]
   29b20:	2002      	movs	r0, #2
   29b22:	4798      	blx	r3
   29b24:	46c0      	nop			; (mov r8, r8)
   29b26:	46bd      	mov	sp, r7
   29b28:	bd80      	pop	{r7, pc}
   29b2a:	46c0      	nop			; (mov r8, r8)
   29b2c:	20004138 	.word	0x20004138

00029b30 <SERCOM3_Handler>:
   29b30:	b580      	push	{r7, lr}
   29b32:	af00      	add	r7, sp, #0
   29b34:	4b03      	ldr	r3, [pc, #12]	; (29b44 <SERCOM3_Handler+0x14>)
   29b36:	68db      	ldr	r3, [r3, #12]
   29b38:	2003      	movs	r0, #3
   29b3a:	4798      	blx	r3
   29b3c:	46c0      	nop			; (mov r8, r8)
   29b3e:	46bd      	mov	sp, r7
   29b40:	bd80      	pop	{r7, pc}
   29b42:	46c0      	nop			; (mov r8, r8)
   29b44:	20004138 	.word	0x20004138

00029b48 <SERCOM4_Handler>:
   29b48:	b580      	push	{r7, lr}
   29b4a:	af00      	add	r7, sp, #0
   29b4c:	4b03      	ldr	r3, [pc, #12]	; (29b5c <SERCOM4_Handler+0x14>)
   29b4e:	691b      	ldr	r3, [r3, #16]
   29b50:	2004      	movs	r0, #4
   29b52:	4798      	blx	r3
   29b54:	46c0      	nop			; (mov r8, r8)
   29b56:	46bd      	mov	sp, r7
   29b58:	bd80      	pop	{r7, pc}
   29b5a:	46c0      	nop			; (mov r8, r8)
   29b5c:	20004138 	.word	0x20004138

00029b60 <SERCOM5_Handler>:
   29b60:	b580      	push	{r7, lr}
   29b62:	af00      	add	r7, sp, #0
   29b64:	4b03      	ldr	r3, [pc, #12]	; (29b74 <SERCOM5_Handler+0x14>)
   29b66:	695b      	ldr	r3, [r3, #20]
   29b68:	2005      	movs	r0, #5
   29b6a:	4798      	blx	r3
   29b6c:	46c0      	nop			; (mov r8, r8)
   29b6e:	46bd      	mov	sp, r7
   29b70:	bd80      	pop	{r7, pc}
   29b72:	46c0      	nop			; (mov r8, r8)
   29b74:	20004138 	.word	0x20004138

00029b78 <system_pinmux_get_config_defaults>:
{
   29b78:	b580      	push	{r7, lr}
   29b7a:	b082      	sub	sp, #8
   29b7c:	af00      	add	r7, sp, #0
   29b7e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29b80:	687b      	ldr	r3, [r7, #4]
   29b82:	2280      	movs	r2, #128	; 0x80
   29b84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29b86:	687b      	ldr	r3, [r7, #4]
   29b88:	2200      	movs	r2, #0
   29b8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29b8c:	687b      	ldr	r3, [r7, #4]
   29b8e:	2201      	movs	r2, #1
   29b90:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29b92:	687b      	ldr	r3, [r7, #4]
   29b94:	2200      	movs	r2, #0
   29b96:	70da      	strb	r2, [r3, #3]
}
   29b98:	46c0      	nop			; (mov r8, r8)
   29b9a:	46bd      	mov	sp, r7
   29b9c:	b002      	add	sp, #8
   29b9e:	bd80      	pop	{r7, pc}

00029ba0 <system_pinmux_get_group_from_gpio_pin>:
{
   29ba0:	b580      	push	{r7, lr}
   29ba2:	b084      	sub	sp, #16
   29ba4:	af00      	add	r7, sp, #0
   29ba6:	0002      	movs	r2, r0
   29ba8:	1dfb      	adds	r3, r7, #7
   29baa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29bac:	230f      	movs	r3, #15
   29bae:	18fb      	adds	r3, r7, r3
   29bb0:	1dfa      	adds	r2, r7, #7
   29bb2:	7812      	ldrb	r2, [r2, #0]
   29bb4:	09d2      	lsrs	r2, r2, #7
   29bb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29bb8:	230e      	movs	r3, #14
   29bba:	18fb      	adds	r3, r7, r3
   29bbc:	1dfa      	adds	r2, r7, #7
   29bbe:	7812      	ldrb	r2, [r2, #0]
   29bc0:	0952      	lsrs	r2, r2, #5
   29bc2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29bc4:	4b0d      	ldr	r3, [pc, #52]	; (29bfc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29bc6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29bc8:	230f      	movs	r3, #15
   29bca:	18fb      	adds	r3, r7, r3
   29bcc:	781b      	ldrb	r3, [r3, #0]
   29bce:	2b00      	cmp	r3, #0
   29bd0:	d10f      	bne.n	29bf2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29bd2:	230f      	movs	r3, #15
   29bd4:	18fb      	adds	r3, r7, r3
   29bd6:	781b      	ldrb	r3, [r3, #0]
   29bd8:	009b      	lsls	r3, r3, #2
   29bda:	2210      	movs	r2, #16
   29bdc:	4694      	mov	ip, r2
   29bde:	44bc      	add	ip, r7
   29be0:	4463      	add	r3, ip
   29be2:	3b08      	subs	r3, #8
   29be4:	681a      	ldr	r2, [r3, #0]
   29be6:	230e      	movs	r3, #14
   29be8:	18fb      	adds	r3, r7, r3
   29bea:	781b      	ldrb	r3, [r3, #0]
   29bec:	01db      	lsls	r3, r3, #7
   29bee:	18d3      	adds	r3, r2, r3
   29bf0:	e000      	b.n	29bf4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29bf2:	2300      	movs	r3, #0
}
   29bf4:	0018      	movs	r0, r3
   29bf6:	46bd      	mov	sp, r7
   29bf8:	b004      	add	sp, #16
   29bfa:	bd80      	pop	{r7, pc}
   29bfc:	41004400 	.word	0x41004400

00029c00 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   29c00:	b580      	push	{r7, lr}
   29c02:	b086      	sub	sp, #24
   29c04:	af00      	add	r7, sp, #0
   29c06:	0002      	movs	r2, r0
   29c08:	1dfb      	adds	r3, r7, #7
   29c0a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29c0c:	1dfb      	adds	r3, r7, #7
   29c0e:	781b      	ldrb	r3, [r3, #0]
   29c10:	0018      	movs	r0, r3
   29c12:	4b19      	ldr	r3, [pc, #100]	; (29c78 <system_pinmux_pin_get_mux_position+0x78>)
   29c14:	4798      	blx	r3
   29c16:	0003      	movs	r3, r0
   29c18:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   29c1a:	1dfb      	adds	r3, r7, #7
   29c1c:	781b      	ldrb	r3, [r3, #0]
   29c1e:	221f      	movs	r2, #31
   29c20:	4013      	ands	r3, r2
   29c22:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   29c24:	697a      	ldr	r2, [r7, #20]
   29c26:	2140      	movs	r1, #64	; 0x40
   29c28:	693b      	ldr	r3, [r7, #16]
   29c2a:	18d3      	adds	r3, r2, r3
   29c2c:	185b      	adds	r3, r3, r1
   29c2e:	781b      	ldrb	r3, [r3, #0]
   29c30:	b2db      	uxtb	r3, r3
   29c32:	001a      	movs	r2, r3
   29c34:	2301      	movs	r3, #1
   29c36:	4013      	ands	r3, r2
   29c38:	d101      	bne.n	29c3e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   29c3a:	2380      	movs	r3, #128	; 0x80
   29c3c:	e018      	b.n	29c70 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   29c3e:	693b      	ldr	r3, [r7, #16]
   29c40:	085b      	lsrs	r3, r3, #1
   29c42:	697a      	ldr	r2, [r7, #20]
   29c44:	2130      	movs	r1, #48	; 0x30
   29c46:	18d3      	adds	r3, r2, r3
   29c48:	185b      	adds	r3, r3, r1
   29c4a:	781b      	ldrb	r3, [r3, #0]
   29c4c:	b2db      	uxtb	r3, r3
   29c4e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   29c50:	693b      	ldr	r3, [r7, #16]
   29c52:	2201      	movs	r2, #1
   29c54:	4013      	ands	r3, r2
   29c56:	d006      	beq.n	29c66 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   29c58:	68fb      	ldr	r3, [r7, #12]
   29c5a:	091b      	lsrs	r3, r3, #4
   29c5c:	b2db      	uxtb	r3, r3
   29c5e:	220f      	movs	r2, #15
   29c60:	4013      	ands	r3, r2
   29c62:	b2db      	uxtb	r3, r3
   29c64:	e004      	b.n	29c70 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   29c66:	68fb      	ldr	r3, [r7, #12]
   29c68:	b2db      	uxtb	r3, r3
   29c6a:	220f      	movs	r2, #15
   29c6c:	4013      	ands	r3, r2
   29c6e:	b2db      	uxtb	r3, r3
	}
}
   29c70:	0018      	movs	r0, r3
   29c72:	46bd      	mov	sp, r7
   29c74:	b006      	add	sp, #24
   29c76:	bd80      	pop	{r7, pc}
   29c78:	00029ba1 	.word	0x00029ba1

00029c7c <port_get_group_from_gpio_pin>:
{
   29c7c:	b580      	push	{r7, lr}
   29c7e:	b082      	sub	sp, #8
   29c80:	af00      	add	r7, sp, #0
   29c82:	0002      	movs	r2, r0
   29c84:	1dfb      	adds	r3, r7, #7
   29c86:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29c88:	1dfb      	adds	r3, r7, #7
   29c8a:	781b      	ldrb	r3, [r3, #0]
   29c8c:	0018      	movs	r0, r3
   29c8e:	4b03      	ldr	r3, [pc, #12]	; (29c9c <port_get_group_from_gpio_pin+0x20>)
   29c90:	4798      	blx	r3
   29c92:	0003      	movs	r3, r0
}
   29c94:	0018      	movs	r0, r3
   29c96:	46bd      	mov	sp, r7
   29c98:	b002      	add	sp, #8
   29c9a:	bd80      	pop	{r7, pc}
   29c9c:	00029ba1 	.word	0x00029ba1

00029ca0 <port_pin_set_output_level>:
{
   29ca0:	b580      	push	{r7, lr}
   29ca2:	b084      	sub	sp, #16
   29ca4:	af00      	add	r7, sp, #0
   29ca6:	0002      	movs	r2, r0
   29ca8:	1dfb      	adds	r3, r7, #7
   29caa:	701a      	strb	r2, [r3, #0]
   29cac:	1dbb      	adds	r3, r7, #6
   29cae:	1c0a      	adds	r2, r1, #0
   29cb0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   29cb2:	1dfb      	adds	r3, r7, #7
   29cb4:	781b      	ldrb	r3, [r3, #0]
   29cb6:	0018      	movs	r0, r3
   29cb8:	4b0d      	ldr	r3, [pc, #52]	; (29cf0 <port_pin_set_output_level+0x50>)
   29cba:	4798      	blx	r3
   29cbc:	0003      	movs	r3, r0
   29cbe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   29cc0:	1dfb      	adds	r3, r7, #7
   29cc2:	781b      	ldrb	r3, [r3, #0]
   29cc4:	221f      	movs	r2, #31
   29cc6:	4013      	ands	r3, r2
   29cc8:	2201      	movs	r2, #1
   29cca:	409a      	lsls	r2, r3
   29ccc:	0013      	movs	r3, r2
   29cce:	60bb      	str	r3, [r7, #8]
	if (level) {
   29cd0:	1dbb      	adds	r3, r7, #6
   29cd2:	781b      	ldrb	r3, [r3, #0]
   29cd4:	2b00      	cmp	r3, #0
   29cd6:	d003      	beq.n	29ce0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   29cd8:	68fb      	ldr	r3, [r7, #12]
   29cda:	68ba      	ldr	r2, [r7, #8]
   29cdc:	619a      	str	r2, [r3, #24]
}
   29cde:	e002      	b.n	29ce6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   29ce0:	68fb      	ldr	r3, [r7, #12]
   29ce2:	68ba      	ldr	r2, [r7, #8]
   29ce4:	615a      	str	r2, [r3, #20]
}
   29ce6:	46c0      	nop			; (mov r8, r8)
   29ce8:	46bd      	mov	sp, r7
   29cea:	b004      	add	sp, #16
   29cec:	bd80      	pop	{r7, pc}
   29cee:	46c0      	nop			; (mov r8, r8)
   29cf0:	00029c7d 	.word	0x00029c7d

00029cf4 <system_gclk_chan_get_config_defaults>:
{
   29cf4:	b580      	push	{r7, lr}
   29cf6:	b082      	sub	sp, #8
   29cf8:	af00      	add	r7, sp, #0
   29cfa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29cfc:	687b      	ldr	r3, [r7, #4]
   29cfe:	2200      	movs	r2, #0
   29d00:	701a      	strb	r2, [r3, #0]
}
   29d02:	46c0      	nop			; (mov r8, r8)
   29d04:	46bd      	mov	sp, r7
   29d06:	b002      	add	sp, #8
   29d08:	bd80      	pop	{r7, pc}
	...

00029d0c <system_apb_clock_set_mask>:
{
   29d0c:	b580      	push	{r7, lr}
   29d0e:	b082      	sub	sp, #8
   29d10:	af00      	add	r7, sp, #0
   29d12:	0002      	movs	r2, r0
   29d14:	6039      	str	r1, [r7, #0]
   29d16:	1dfb      	adds	r3, r7, #7
   29d18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29d1a:	1dfb      	adds	r3, r7, #7
   29d1c:	781b      	ldrb	r3, [r3, #0]
   29d1e:	2b01      	cmp	r3, #1
   29d20:	d00a      	beq.n	29d38 <system_apb_clock_set_mask+0x2c>
   29d22:	2b02      	cmp	r3, #2
   29d24:	d00f      	beq.n	29d46 <system_apb_clock_set_mask+0x3a>
   29d26:	2b00      	cmp	r3, #0
   29d28:	d114      	bne.n	29d54 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29d2a:	4b0e      	ldr	r3, [pc, #56]	; (29d64 <system_apb_clock_set_mask+0x58>)
   29d2c:	4a0d      	ldr	r2, [pc, #52]	; (29d64 <system_apb_clock_set_mask+0x58>)
   29d2e:	6991      	ldr	r1, [r2, #24]
   29d30:	683a      	ldr	r2, [r7, #0]
   29d32:	430a      	orrs	r2, r1
   29d34:	619a      	str	r2, [r3, #24]
			break;
   29d36:	e00f      	b.n	29d58 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29d38:	4b0a      	ldr	r3, [pc, #40]	; (29d64 <system_apb_clock_set_mask+0x58>)
   29d3a:	4a0a      	ldr	r2, [pc, #40]	; (29d64 <system_apb_clock_set_mask+0x58>)
   29d3c:	69d1      	ldr	r1, [r2, #28]
   29d3e:	683a      	ldr	r2, [r7, #0]
   29d40:	430a      	orrs	r2, r1
   29d42:	61da      	str	r2, [r3, #28]
			break;
   29d44:	e008      	b.n	29d58 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29d46:	4b07      	ldr	r3, [pc, #28]	; (29d64 <system_apb_clock_set_mask+0x58>)
   29d48:	4a06      	ldr	r2, [pc, #24]	; (29d64 <system_apb_clock_set_mask+0x58>)
   29d4a:	6a11      	ldr	r1, [r2, #32]
   29d4c:	683a      	ldr	r2, [r7, #0]
   29d4e:	430a      	orrs	r2, r1
   29d50:	621a      	str	r2, [r3, #32]
			break;
   29d52:	e001      	b.n	29d58 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29d54:	2317      	movs	r3, #23
   29d56:	e000      	b.n	29d5a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29d58:	2300      	movs	r3, #0
}
   29d5a:	0018      	movs	r0, r3
   29d5c:	46bd      	mov	sp, r7
   29d5e:	b002      	add	sp, #8
   29d60:	bd80      	pop	{r7, pc}
   29d62:	46c0      	nop			; (mov r8, r8)
   29d64:	40000400 	.word	0x40000400

00029d68 <system_is_debugger_present>:
{
   29d68:	b580      	push	{r7, lr}
   29d6a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29d6c:	4b05      	ldr	r3, [pc, #20]	; (29d84 <system_is_debugger_present+0x1c>)
   29d6e:	789b      	ldrb	r3, [r3, #2]
   29d70:	b2db      	uxtb	r3, r3
   29d72:	001a      	movs	r2, r3
   29d74:	2302      	movs	r3, #2
   29d76:	4013      	ands	r3, r2
   29d78:	1e5a      	subs	r2, r3, #1
   29d7a:	4193      	sbcs	r3, r2
   29d7c:	b2db      	uxtb	r3, r3
}
   29d7e:	0018      	movs	r0, r3
   29d80:	46bd      	mov	sp, r7
   29d82:	bd80      	pop	{r7, pc}
   29d84:	41002000 	.word	0x41002000

00029d88 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   29d88:	b580      	push	{r7, lr}
   29d8a:	b084      	sub	sp, #16
   29d8c:	af00      	add	r7, sp, #0
   29d8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29d90:	687b      	ldr	r3, [r7, #4]
   29d92:	681b      	ldr	r3, [r3, #0]
   29d94:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   29d96:	68fb      	ldr	r3, [r7, #12]
   29d98:	69db      	ldr	r3, [r3, #28]
   29d9a:	1e5a      	subs	r2, r3, #1
   29d9c:	4193      	sbcs	r3, r2
   29d9e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   29da0:	0018      	movs	r0, r3
   29da2:	46bd      	mov	sp, r7
   29da4:	b004      	add	sp, #16
   29da6:	bd80      	pop	{r7, pc}

00029da8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   29da8:	b580      	push	{r7, lr}
   29daa:	b084      	sub	sp, #16
   29dac:	af00      	add	r7, sp, #0
   29dae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29db0:	687b      	ldr	r3, [r7, #4]
   29db2:	681b      	ldr	r3, [r3, #0]
   29db4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   29db6:	46c0      	nop			; (mov r8, r8)
   29db8:	687b      	ldr	r3, [r7, #4]
   29dba:	0018      	movs	r0, r3
   29dbc:	4b06      	ldr	r3, [pc, #24]	; (29dd8 <spi_enable+0x30>)
   29dbe:	4798      	blx	r3
   29dc0:	1e03      	subs	r3, r0, #0
   29dc2:	d1f9      	bne.n	29db8 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   29dc4:	68fb      	ldr	r3, [r7, #12]
   29dc6:	681b      	ldr	r3, [r3, #0]
   29dc8:	2202      	movs	r2, #2
   29dca:	431a      	orrs	r2, r3
   29dcc:	68fb      	ldr	r3, [r7, #12]
   29dce:	601a      	str	r2, [r3, #0]
}
   29dd0:	46c0      	nop			; (mov r8, r8)
   29dd2:	46bd      	mov	sp, r7
   29dd4:	b004      	add	sp, #16
   29dd6:	bd80      	pop	{r7, pc}
   29dd8:	00029d89 	.word	0x00029d89

00029ddc <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   29ddc:	b580      	push	{r7, lr}
   29dde:	b084      	sub	sp, #16
   29de0:	af00      	add	r7, sp, #0
   29de2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29de4:	687b      	ldr	r3, [r7, #4]
   29de6:	681b      	ldr	r3, [r3, #0]
   29de8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   29dea:	46c0      	nop			; (mov r8, r8)
   29dec:	687b      	ldr	r3, [r7, #4]
   29dee:	0018      	movs	r0, r3
   29df0:	4b0a      	ldr	r3, [pc, #40]	; (29e1c <spi_disable+0x40>)
   29df2:	4798      	blx	r3
   29df4:	1e03      	subs	r3, r0, #0
   29df6:	d1f9      	bne.n	29dec <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   29df8:	68fb      	ldr	r3, [r7, #12]
   29dfa:	228f      	movs	r2, #143	; 0x8f
   29dfc:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   29dfe:	68fb      	ldr	r3, [r7, #12]
   29e00:	228f      	movs	r2, #143	; 0x8f
   29e02:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   29e04:	68fb      	ldr	r3, [r7, #12]
   29e06:	681b      	ldr	r3, [r3, #0]
   29e08:	2202      	movs	r2, #2
   29e0a:	4393      	bics	r3, r2
   29e0c:	001a      	movs	r2, r3
   29e0e:	68fb      	ldr	r3, [r7, #12]
   29e10:	601a      	str	r2, [r3, #0]
}
   29e12:	46c0      	nop			; (mov r8, r8)
   29e14:	46bd      	mov	sp, r7
   29e16:	b004      	add	sp, #16
   29e18:	bd80      	pop	{r7, pc}
   29e1a:	46c0      	nop			; (mov r8, r8)
   29e1c:	00029d89 	.word	0x00029d89

00029e20 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   29e20:	b580      	push	{r7, lr}
   29e22:	b084      	sub	sp, #16
   29e24:	af00      	add	r7, sp, #0
   29e26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e28:	687b      	ldr	r3, [r7, #4]
   29e2a:	681b      	ldr	r3, [r3, #0]
   29e2c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   29e2e:	68fb      	ldr	r3, [r7, #12]
   29e30:	7e1b      	ldrb	r3, [r3, #24]
   29e32:	b2db      	uxtb	r3, r3
   29e34:	001a      	movs	r2, r3
   29e36:	2302      	movs	r3, #2
   29e38:	4013      	ands	r3, r2
   29e3a:	1e5a      	subs	r2, r3, #1
   29e3c:	4193      	sbcs	r3, r2
   29e3e:	b2db      	uxtb	r3, r3
}
   29e40:	0018      	movs	r0, r3
   29e42:	46bd      	mov	sp, r7
   29e44:	b004      	add	sp, #16
   29e46:	bd80      	pop	{r7, pc}

00029e48 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   29e48:	b580      	push	{r7, lr}
   29e4a:	b084      	sub	sp, #16
   29e4c:	af00      	add	r7, sp, #0
   29e4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e50:	687b      	ldr	r3, [r7, #4]
   29e52:	681b      	ldr	r3, [r3, #0]
   29e54:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   29e56:	68fb      	ldr	r3, [r7, #12]
   29e58:	7e1b      	ldrb	r3, [r3, #24]
   29e5a:	b2db      	uxtb	r3, r3
   29e5c:	001a      	movs	r2, r3
   29e5e:	2301      	movs	r3, #1
   29e60:	4013      	ands	r3, r2
   29e62:	1e5a      	subs	r2, r3, #1
   29e64:	4193      	sbcs	r3, r2
   29e66:	b2db      	uxtb	r3, r3
}
   29e68:	0018      	movs	r0, r3
   29e6a:	46bd      	mov	sp, r7
   29e6c:	b004      	add	sp, #16
   29e6e:	bd80      	pop	{r7, pc}

00029e70 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   29e70:	b580      	push	{r7, lr}
   29e72:	b084      	sub	sp, #16
   29e74:	af00      	add	r7, sp, #0
   29e76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e78:	687b      	ldr	r3, [r7, #4]
   29e7a:	681b      	ldr	r3, [r3, #0]
   29e7c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   29e7e:	68fb      	ldr	r3, [r7, #12]
   29e80:	7e1b      	ldrb	r3, [r3, #24]
   29e82:	b2db      	uxtb	r3, r3
   29e84:	001a      	movs	r2, r3
   29e86:	2304      	movs	r3, #4
   29e88:	4013      	ands	r3, r2
   29e8a:	1e5a      	subs	r2, r3, #1
   29e8c:	4193      	sbcs	r3, r2
   29e8e:	b2db      	uxtb	r3, r3
}
   29e90:	0018      	movs	r0, r3
   29e92:	46bd      	mov	sp, r7
   29e94:	b004      	add	sp, #16
   29e96:	bd80      	pop	{r7, pc}

00029e98 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   29e98:	b580      	push	{r7, lr}
   29e9a:	b084      	sub	sp, #16
   29e9c:	af00      	add	r7, sp, #0
   29e9e:	6078      	str	r0, [r7, #4]
   29ea0:	000a      	movs	r2, r1
   29ea2:	1cbb      	adds	r3, r7, #2
   29ea4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29ea6:	687b      	ldr	r3, [r7, #4]
   29ea8:	681b      	ldr	r3, [r3, #0]
   29eaa:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   29eac:	687b      	ldr	r3, [r7, #4]
   29eae:	0018      	movs	r0, r3
   29eb0:	4b0a      	ldr	r3, [pc, #40]	; (29edc <spi_write+0x44>)
   29eb2:	4798      	blx	r3
   29eb4:	0003      	movs	r3, r0
   29eb6:	001a      	movs	r2, r3
   29eb8:	2301      	movs	r3, #1
   29eba:	4053      	eors	r3, r2
   29ebc:	b2db      	uxtb	r3, r3
   29ebe:	2b00      	cmp	r3, #0
   29ec0:	d001      	beq.n	29ec6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   29ec2:	2305      	movs	r3, #5
   29ec4:	e006      	b.n	29ed4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   29ec6:	1cbb      	adds	r3, r7, #2
   29ec8:	881b      	ldrh	r3, [r3, #0]
   29eca:	05db      	lsls	r3, r3, #23
   29ecc:	0dda      	lsrs	r2, r3, #23
   29ece:	68fb      	ldr	r3, [r7, #12]
   29ed0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   29ed2:	2300      	movs	r3, #0
}
   29ed4:	0018      	movs	r0, r3
   29ed6:	46bd      	mov	sp, r7
   29ed8:	b004      	add	sp, #16
   29eda:	bd80      	pop	{r7, pc}
   29edc:	00029e49 	.word	0x00029e49

00029ee0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   29ee0:	b580      	push	{r7, lr}
   29ee2:	b084      	sub	sp, #16
   29ee4:	af00      	add	r7, sp, #0
   29ee6:	6078      	str	r0, [r7, #4]
   29ee8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29eea:	687b      	ldr	r3, [r7, #4]
   29eec:	681b      	ldr	r3, [r3, #0]
   29eee:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   29ef0:	687b      	ldr	r3, [r7, #4]
   29ef2:	0018      	movs	r0, r3
   29ef4:	4b1b      	ldr	r3, [pc, #108]	; (29f64 <spi_read+0x84>)
   29ef6:	4798      	blx	r3
   29ef8:	0003      	movs	r3, r0
   29efa:	001a      	movs	r2, r3
   29efc:	2301      	movs	r3, #1
   29efe:	4053      	eors	r3, r2
   29f00:	b2db      	uxtb	r3, r3
   29f02:	2b00      	cmp	r3, #0
   29f04:	d001      	beq.n	29f0a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   29f06:	2310      	movs	r3, #16
   29f08:	e027      	b.n	29f5a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   29f0a:	230f      	movs	r3, #15
   29f0c:	18fb      	adds	r3, r7, r3
   29f0e:	2200      	movs	r2, #0
   29f10:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29f12:	68bb      	ldr	r3, [r7, #8]
   29f14:	8b5b      	ldrh	r3, [r3, #26]
   29f16:	b29b      	uxth	r3, r3
   29f18:	001a      	movs	r2, r3
   29f1a:	2304      	movs	r3, #4
   29f1c:	4013      	ands	r3, r2
   29f1e:	d006      	beq.n	29f2e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   29f20:	230f      	movs	r3, #15
   29f22:	18fb      	adds	r3, r7, r3
   29f24:	221e      	movs	r2, #30
   29f26:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   29f28:	68bb      	ldr	r3, [r7, #8]
   29f2a:	2204      	movs	r2, #4
   29f2c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29f2e:	687b      	ldr	r3, [r7, #4]
   29f30:	799b      	ldrb	r3, [r3, #6]
   29f32:	2b01      	cmp	r3, #1
   29f34:	d108      	bne.n	29f48 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   29f36:	68bb      	ldr	r3, [r7, #8]
   29f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f3a:	b29b      	uxth	r3, r3
   29f3c:	05db      	lsls	r3, r3, #23
   29f3e:	0ddb      	lsrs	r3, r3, #23
   29f40:	b29a      	uxth	r2, r3
   29f42:	683b      	ldr	r3, [r7, #0]
   29f44:	801a      	strh	r2, [r3, #0]
   29f46:	e005      	b.n	29f54 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   29f48:	68bb      	ldr	r3, [r7, #8]
   29f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f4c:	b2db      	uxtb	r3, r3
   29f4e:	b29a      	uxth	r2, r3
   29f50:	683b      	ldr	r3, [r7, #0]
   29f52:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   29f54:	230f      	movs	r3, #15
   29f56:	18fb      	adds	r3, r7, r3
   29f58:	781b      	ldrb	r3, [r3, #0]
}
   29f5a:	0018      	movs	r0, r3
   29f5c:	46bd      	mov	sp, r7
   29f5e:	b004      	add	sp, #16
   29f60:	bd80      	pop	{r7, pc}
   29f62:	46c0      	nop			; (mov r8, r8)
   29f64:	00029e71 	.word	0x00029e71

00029f68 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   29f68:	b590      	push	{r4, r7, lr}
   29f6a:	b089      	sub	sp, #36	; 0x24
   29f6c:	af00      	add	r7, sp, #0
   29f6e:	6078      	str	r0, [r7, #4]
   29f70:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   29f72:	230c      	movs	r3, #12
   29f74:	18fb      	adds	r3, r7, r3
   29f76:	2200      	movs	r2, #0
   29f78:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   29f7a:	687b      	ldr	r3, [r7, #4]
   29f7c:	681b      	ldr	r3, [r3, #0]
   29f7e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   29f80:	687b      	ldr	r3, [r7, #4]
   29f82:	0018      	movs	r0, r3
   29f84:	4b24      	ldr	r3, [pc, #144]	; (2a018 <spi_set_baudrate+0xb0>)
   29f86:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   29f88:	46c0      	nop			; (mov r8, r8)
   29f8a:	687b      	ldr	r3, [r7, #4]
   29f8c:	0018      	movs	r0, r3
   29f8e:	4b23      	ldr	r3, [pc, #140]	; (2a01c <spi_set_baudrate+0xb4>)
   29f90:	4798      	blx	r3
   29f92:	1e03      	subs	r3, r0, #0
   29f94:	d1f9      	bne.n	29f8a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29f96:	687b      	ldr	r3, [r7, #4]
   29f98:	681b      	ldr	r3, [r3, #0]
   29f9a:	0018      	movs	r0, r3
   29f9c:	4b20      	ldr	r3, [pc, #128]	; (2a020 <spi_set_baudrate+0xb8>)
   29f9e:	4798      	blx	r3
   29fa0:	0003      	movs	r3, r0
   29fa2:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29fa4:	69bb      	ldr	r3, [r7, #24]
   29fa6:	3314      	adds	r3, #20
   29fa8:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   29faa:	697b      	ldr	r3, [r7, #20]
   29fac:	b2db      	uxtb	r3, r3
   29fae:	0018      	movs	r0, r3
   29fb0:	4b1c      	ldr	r3, [pc, #112]	; (2a024 <spi_set_baudrate+0xbc>)
   29fb2:	4798      	blx	r3
   29fb4:	0003      	movs	r3, r0
   29fb6:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   29fb8:	230f      	movs	r3, #15
   29fba:	18fc      	adds	r4, r7, r3
   29fbc:	230c      	movs	r3, #12
   29fbe:	18fa      	adds	r2, r7, r3
   29fc0:	6939      	ldr	r1, [r7, #16]
   29fc2:	683b      	ldr	r3, [r7, #0]
   29fc4:	0018      	movs	r0, r3
   29fc6:	4b18      	ldr	r3, [pc, #96]	; (2a028 <spi_set_baudrate+0xc0>)
   29fc8:	4798      	blx	r3
   29fca:	0003      	movs	r3, r0
   29fcc:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   29fce:	230f      	movs	r3, #15
   29fd0:	18fb      	adds	r3, r7, r3
   29fd2:	781b      	ldrb	r3, [r3, #0]
   29fd4:	2b00      	cmp	r3, #0
   29fd6:	d001      	beq.n	29fdc <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   29fd8:	2317      	movs	r3, #23
   29fda:	e018      	b.n	2a00e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   29fdc:	230c      	movs	r3, #12
   29fde:	18fb      	adds	r3, r7, r3
   29fe0:	881b      	ldrh	r3, [r3, #0]
   29fe2:	b2da      	uxtb	r2, r3
   29fe4:	69fb      	ldr	r3, [r7, #28]
   29fe6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   29fe8:	46c0      	nop			; (mov r8, r8)
   29fea:	687b      	ldr	r3, [r7, #4]
   29fec:	0018      	movs	r0, r3
   29fee:	4b0b      	ldr	r3, [pc, #44]	; (2a01c <spi_set_baudrate+0xb4>)
   29ff0:	4798      	blx	r3
   29ff2:	1e03      	subs	r3, r0, #0
   29ff4:	d1f9      	bne.n	29fea <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   29ff6:	687b      	ldr	r3, [r7, #4]
   29ff8:	0018      	movs	r0, r3
   29ffa:	4b0c      	ldr	r3, [pc, #48]	; (2a02c <spi_set_baudrate+0xc4>)
   29ffc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   29ffe:	46c0      	nop			; (mov r8, r8)
   2a000:	687b      	ldr	r3, [r7, #4]
   2a002:	0018      	movs	r0, r3
   2a004:	4b05      	ldr	r3, [pc, #20]	; (2a01c <spi_set_baudrate+0xb4>)
   2a006:	4798      	blx	r3
   2a008:	1e03      	subs	r3, r0, #0
   2a00a:	d1f9      	bne.n	2a000 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   2a00c:	2300      	movs	r3, #0
}
   2a00e:	0018      	movs	r0, r3
   2a010:	46bd      	mov	sp, r7
   2a012:	b009      	add	sp, #36	; 0x24
   2a014:	bd90      	pop	{r4, r7, pc}
   2a016:	46c0      	nop			; (mov r8, r8)
   2a018:	00029ddd 	.word	0x00029ddd
   2a01c:	00029d89 	.word	0x00029d89
   2a020:	000299d5 	.word	0x000299d5
   2a024:	0002c3e5 	.word	0x0002c3e5
   2a028:	0002954f 	.word	0x0002954f
   2a02c:	00029da9 	.word	0x00029da9

0002a030 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   2a030:	b580      	push	{r7, lr}
   2a032:	b084      	sub	sp, #16
   2a034:	af00      	add	r7, sp, #0
   2a036:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a038:	687b      	ldr	r3, [r7, #4]
   2a03a:	681b      	ldr	r3, [r3, #0]
   2a03c:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2a03e:	68fb      	ldr	r3, [r7, #12]
   2a040:	2202      	movs	r2, #2
   2a042:	761a      	strb	r2, [r3, #24]
}
   2a044:	46c0      	nop			; (mov r8, r8)
   2a046:	46bd      	mov	sp, r7
   2a048:	b004      	add	sp, #16
   2a04a:	bd80      	pop	{r7, pc}

0002a04c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2a04c:	b590      	push	{r4, r7, lr}
   2a04e:	b093      	sub	sp, #76	; 0x4c
   2a050:	af00      	add	r7, sp, #0
   2a052:	6078      	str	r0, [r7, #4]
   2a054:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a056:	687b      	ldr	r3, [r7, #4]
   2a058:	681b      	ldr	r3, [r3, #0]
   2a05a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2a05c:	687b      	ldr	r3, [r7, #4]
   2a05e:	681b      	ldr	r3, [r3, #0]
   2a060:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2a062:	231c      	movs	r3, #28
   2a064:	18fb      	adds	r3, r7, r3
   2a066:	0018      	movs	r0, r3
   2a068:	4b85      	ldr	r3, [pc, #532]	; (2a280 <_spi_set_config+0x234>)
   2a06a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a06c:	231c      	movs	r3, #28
   2a06e:	18fb      	adds	r3, r7, r3
   2a070:	2200      	movs	r2, #0
   2a072:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   2a074:	683b      	ldr	r3, [r7, #0]
   2a076:	781b      	ldrb	r3, [r3, #0]
   2a078:	2b00      	cmp	r3, #0
   2a07a:	d103      	bne.n	2a084 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2a07c:	231c      	movs	r3, #28
   2a07e:	18fb      	adds	r3, r7, r3
   2a080:	2200      	movs	r2, #0
   2a082:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2a084:	683b      	ldr	r3, [r7, #0]
   2a086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2a088:	230c      	movs	r3, #12
   2a08a:	18fb      	adds	r3, r7, r3
   2a08c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2a08e:	683b      	ldr	r3, [r7, #0]
   2a090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2a092:	230c      	movs	r3, #12
   2a094:	18fb      	adds	r3, r7, r3
   2a096:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2a098:	683b      	ldr	r3, [r7, #0]
   2a09a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2a09c:	230c      	movs	r3, #12
   2a09e:	18fb      	adds	r3, r7, r3
   2a0a0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2a0a2:	683b      	ldr	r3, [r7, #0]
   2a0a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2a0a6:	230c      	movs	r3, #12
   2a0a8:	18fb      	adds	r3, r7, r3
   2a0aa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a0ac:	2347      	movs	r3, #71	; 0x47
   2a0ae:	18fb      	adds	r3, r7, r3
   2a0b0:	2200      	movs	r2, #0
   2a0b2:	701a      	strb	r2, [r3, #0]
   2a0b4:	e02c      	b.n	2a110 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2a0b6:	2347      	movs	r3, #71	; 0x47
   2a0b8:	18fb      	adds	r3, r7, r3
   2a0ba:	781a      	ldrb	r2, [r3, #0]
   2a0bc:	230c      	movs	r3, #12
   2a0be:	18fb      	adds	r3, r7, r3
   2a0c0:	0092      	lsls	r2, r2, #2
   2a0c2:	58d3      	ldr	r3, [r2, r3]
   2a0c4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2a0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0c8:	2b00      	cmp	r3, #0
   2a0ca:	d109      	bne.n	2a0e0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2a0cc:	2347      	movs	r3, #71	; 0x47
   2a0ce:	18fb      	adds	r3, r7, r3
   2a0d0:	781a      	ldrb	r2, [r3, #0]
   2a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a0d4:	0011      	movs	r1, r2
   2a0d6:	0018      	movs	r0, r3
   2a0d8:	4b6a      	ldr	r3, [pc, #424]	; (2a284 <_spi_set_config+0x238>)
   2a0da:	4798      	blx	r3
   2a0dc:	0003      	movs	r3, r0
   2a0de:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2a0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0e2:	3301      	adds	r3, #1
   2a0e4:	d00d      	beq.n	2a102 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2a0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0e8:	b2da      	uxtb	r2, r3
   2a0ea:	231c      	movs	r3, #28
   2a0ec:	18fb      	adds	r3, r7, r3
   2a0ee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2a0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0f2:	0c1b      	lsrs	r3, r3, #16
   2a0f4:	b2db      	uxtb	r3, r3
   2a0f6:	221c      	movs	r2, #28
   2a0f8:	18ba      	adds	r2, r7, r2
   2a0fa:	0011      	movs	r1, r2
   2a0fc:	0018      	movs	r0, r3
   2a0fe:	4b62      	ldr	r3, [pc, #392]	; (2a288 <_spi_set_config+0x23c>)
   2a100:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a102:	2347      	movs	r3, #71	; 0x47
   2a104:	18fb      	adds	r3, r7, r3
   2a106:	781a      	ldrb	r2, [r3, #0]
   2a108:	2347      	movs	r3, #71	; 0x47
   2a10a:	18fb      	adds	r3, r7, r3
   2a10c:	3201      	adds	r2, #1
   2a10e:	701a      	strb	r2, [r3, #0]
   2a110:	2347      	movs	r3, #71	; 0x47
   2a112:	18fb      	adds	r3, r7, r3
   2a114:	781b      	ldrb	r3, [r3, #0]
   2a116:	2b03      	cmp	r3, #3
   2a118:	d9cd      	bls.n	2a0b6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2a11a:	683b      	ldr	r3, [r7, #0]
   2a11c:	781a      	ldrb	r2, [r3, #0]
   2a11e:	687b      	ldr	r3, [r7, #4]
   2a120:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   2a122:	683b      	ldr	r3, [r7, #0]
   2a124:	7c1a      	ldrb	r2, [r3, #16]
   2a126:	687b      	ldr	r3, [r7, #4]
   2a128:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2a12a:	683b      	ldr	r3, [r7, #0]
   2a12c:	7c9a      	ldrb	r2, [r3, #18]
   2a12e:	687b      	ldr	r3, [r7, #4]
   2a130:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   2a132:	683b      	ldr	r3, [r7, #0]
   2a134:	7d1a      	ldrb	r2, [r3, #20]
   2a136:	687b      	ldr	r3, [r7, #4]
   2a138:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2a13a:	230a      	movs	r3, #10
   2a13c:	18fb      	adds	r3, r7, r3
   2a13e:	2200      	movs	r2, #0
   2a140:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2a142:	2300      	movs	r3, #0
   2a144:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   2a146:	2300      	movs	r3, #0
   2a148:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2a14a:	683b      	ldr	r3, [r7, #0]
   2a14c:	781b      	ldrb	r3, [r3, #0]
   2a14e:	2b01      	cmp	r3, #1
   2a150:	d129      	bne.n	2a1a6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a152:	687b      	ldr	r3, [r7, #4]
   2a154:	681b      	ldr	r3, [r3, #0]
   2a156:	0018      	movs	r0, r3
   2a158:	4b4c      	ldr	r3, [pc, #304]	; (2a28c <_spi_set_config+0x240>)
   2a15a:	4798      	blx	r3
   2a15c:	0003      	movs	r3, r0
   2a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a162:	3314      	adds	r3, #20
   2a164:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a168:	b2db      	uxtb	r3, r3
   2a16a:	0018      	movs	r0, r3
   2a16c:	4b48      	ldr	r3, [pc, #288]	; (2a290 <_spi_set_config+0x244>)
   2a16e:	4798      	blx	r3
   2a170:	0003      	movs	r3, r0
   2a172:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   2a174:	683b      	ldr	r3, [r7, #0]
   2a176:	699b      	ldr	r3, [r3, #24]
   2a178:	2223      	movs	r2, #35	; 0x23
   2a17a:	18bc      	adds	r4, r7, r2
   2a17c:	220a      	movs	r2, #10
   2a17e:	18ba      	adds	r2, r7, r2
   2a180:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a182:	0018      	movs	r0, r3
   2a184:	4b43      	ldr	r3, [pc, #268]	; (2a294 <_spi_set_config+0x248>)
   2a186:	4798      	blx	r3
   2a188:	0003      	movs	r3, r0
   2a18a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2a18c:	2323      	movs	r3, #35	; 0x23
   2a18e:	18fb      	adds	r3, r7, r3
   2a190:	781b      	ldrb	r3, [r3, #0]
   2a192:	2b00      	cmp	r3, #0
   2a194:	d001      	beq.n	2a19a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2a196:	2317      	movs	r3, #23
   2a198:	e06d      	b.n	2a276 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2a19a:	230a      	movs	r3, #10
   2a19c:	18fb      	adds	r3, r7, r3
   2a19e:	881b      	ldrh	r3, [r3, #0]
   2a1a0:	b2da      	uxtb	r2, r3
   2a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a1a4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a1a6:	683b      	ldr	r3, [r7, #0]
   2a1a8:	781b      	ldrb	r3, [r3, #0]
   2a1aa:	2b00      	cmp	r3, #0
   2a1ac:	d11a      	bne.n	2a1e4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   2a1ae:	683b      	ldr	r3, [r7, #0]
   2a1b0:	699b      	ldr	r3, [r3, #24]
   2a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   2a1b4:	683b      	ldr	r3, [r7, #0]
   2a1b6:	8b9b      	ldrh	r3, [r3, #28]
   2a1b8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   2a1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a1be:	683a      	ldr	r2, [r7, #0]
   2a1c0:	7f92      	ldrb	r2, [r2, #30]
   2a1c2:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   2a1c4:	683a      	ldr	r2, [r7, #0]
   2a1c6:	7fd2      	ldrb	r2, [r2, #31]
   2a1c8:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a1ca:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
   2a1cc:	431a      	orrs	r2, r3
   2a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a1d0:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
   2a1d2:	683b      	ldr	r3, [r7, #0]
   2a1d4:	2220      	movs	r2, #32
   2a1d6:	5c9b      	ldrb	r3, [r3, r2]
   2a1d8:	2b00      	cmp	r3, #0
   2a1da:	d003      	beq.n	2a1e4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   2a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a1de:	2240      	movs	r2, #64	; 0x40
   2a1e0:	4313      	orrs	r3, r2
   2a1e2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   2a1e4:	683b      	ldr	r3, [r7, #0]
   2a1e6:	685b      	ldr	r3, [r3, #4]
   2a1e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a1ea:	4313      	orrs	r3, r2
   2a1ec:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2a1ee:	683b      	ldr	r3, [r7, #0]
   2a1f0:	689b      	ldr	r3, [r3, #8]
   2a1f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a1f4:	4313      	orrs	r3, r2
   2a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2a1f8:	683b      	ldr	r3, [r7, #0]
   2a1fa:	68db      	ldr	r3, [r3, #12]
   2a1fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a1fe:	4313      	orrs	r3, r2
   2a200:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2a202:	683b      	ldr	r3, [r7, #0]
   2a204:	7c1b      	ldrb	r3, [r3, #16]
   2a206:	001a      	movs	r2, r3
   2a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a20a:	4313      	orrs	r3, r2
   2a20c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2a20e:	683b      	ldr	r3, [r7, #0]
   2a210:	7c5b      	ldrb	r3, [r3, #17]
   2a212:	2b00      	cmp	r3, #0
   2a214:	d103      	bne.n	2a21e <_spi_set_config+0x1d2>
   2a216:	4b20      	ldr	r3, [pc, #128]	; (2a298 <_spi_set_config+0x24c>)
   2a218:	4798      	blx	r3
   2a21a:	1e03      	subs	r3, r0, #0
   2a21c:	d003      	beq.n	2a226 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   2a21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a220:	2280      	movs	r2, #128	; 0x80
   2a222:	4313      	orrs	r3, r2
   2a224:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   2a226:	683b      	ldr	r3, [r7, #0]
   2a228:	7c9b      	ldrb	r3, [r3, #18]
   2a22a:	2b00      	cmp	r3, #0
   2a22c:	d004      	beq.n	2a238 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   2a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a230:	2280      	movs	r2, #128	; 0x80
   2a232:	0292      	lsls	r2, r2, #10
   2a234:	4313      	orrs	r3, r2
   2a236:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2a238:	683b      	ldr	r3, [r7, #0]
   2a23a:	7cdb      	ldrb	r3, [r3, #19]
   2a23c:	2b00      	cmp	r3, #0
   2a23e:	d004      	beq.n	2a24a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a242:	2280      	movs	r2, #128	; 0x80
   2a244:	0092      	lsls	r2, r2, #2
   2a246:	4313      	orrs	r3, r2
   2a248:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2a24a:	683b      	ldr	r3, [r7, #0]
   2a24c:	7d1b      	ldrb	r3, [r3, #20]
   2a24e:	2b00      	cmp	r3, #0
   2a250:	d004      	beq.n	2a25c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a254:	2280      	movs	r2, #128	; 0x80
   2a256:	0192      	lsls	r2, r2, #6
   2a258:	4313      	orrs	r3, r2
   2a25a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2a25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a25e:	681a      	ldr	r2, [r3, #0]
   2a260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a262:	431a      	orrs	r2, r3
   2a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a266:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2a268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a26a:	685a      	ldr	r2, [r3, #4]
   2a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a26e:	431a      	orrs	r2, r3
   2a270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a272:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   2a274:	2300      	movs	r3, #0
}
   2a276:	0018      	movs	r0, r3
   2a278:	46bd      	mov	sp, r7
   2a27a:	b013      	add	sp, #76	; 0x4c
   2a27c:	bd90      	pop	{r4, r7, pc}
   2a27e:	46c0      	nop			; (mov r8, r8)
   2a280:	00029b79 	.word	0x00029b79
   2a284:	00029819 	.word	0x00029819
   2a288:	0002c621 	.word	0x0002c621
   2a28c:	000299d5 	.word	0x000299d5
   2a290:	0002c3e5 	.word	0x0002c3e5
   2a294:	0002954f 	.word	0x0002954f
   2a298:	00029d69 	.word	0x00029d69

0002a29c <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2a29c:	b590      	push	{r4, r7, lr}
   2a29e:	b091      	sub	sp, #68	; 0x44
   2a2a0:	af00      	add	r7, sp, #0
   2a2a2:	6078      	str	r0, [r7, #4]
   2a2a4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a2a6:	687b      	ldr	r3, [r7, #4]
   2a2a8:	681b      	ldr	r3, [r3, #0]
   2a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   2a2ac:	687b      	ldr	r3, [r7, #4]
   2a2ae:	681b      	ldr	r3, [r3, #0]
   2a2b0:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   2a2b2:	683b      	ldr	r3, [r7, #0]
   2a2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2a2b6:	230c      	movs	r3, #12
   2a2b8:	18fb      	adds	r3, r7, r3
   2a2ba:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   2a2bc:	683b      	ldr	r3, [r7, #0]
   2a2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2a2c0:	230c      	movs	r3, #12
   2a2c2:	18fb      	adds	r3, r7, r3
   2a2c4:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
   2a2c6:	683b      	ldr	r3, [r7, #0]
   2a2c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2a2ca:	230c      	movs	r3, #12
   2a2cc:	18fb      	adds	r3, r7, r3
   2a2ce:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
   2a2d0:	683b      	ldr	r3, [r7, #0]
   2a2d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2a2d4:	230c      	movs	r3, #12
   2a2d6:	18fb      	adds	r3, r7, r3
   2a2d8:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a2da:	233f      	movs	r3, #63	; 0x3f
   2a2dc:	18fb      	adds	r3, r7, r3
   2a2de:	2200      	movs	r2, #0
   2a2e0:	701a      	strb	r2, [r3, #0]
   2a2e2:	e030      	b.n	2a346 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2a2e4:	233f      	movs	r3, #63	; 0x3f
   2a2e6:	18fb      	adds	r3, r7, r3
   2a2e8:	781a      	ldrb	r2, [r3, #0]
   2a2ea:	230c      	movs	r3, #12
   2a2ec:	18fb      	adds	r3, r7, r3
   2a2ee:	0092      	lsls	r2, r2, #2
   2a2f0:	58d3      	ldr	r3, [r2, r3]
   2a2f2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   2a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a2f6:	2b00      	cmp	r3, #0
   2a2f8:	d109      	bne.n	2a30e <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2a2fa:	233f      	movs	r3, #63	; 0x3f
   2a2fc:	18fb      	adds	r3, r7, r3
   2a2fe:	781a      	ldrb	r2, [r3, #0]
   2a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a302:	0011      	movs	r1, r2
   2a304:	0018      	movs	r0, r3
   2a306:	4b6e      	ldr	r3, [pc, #440]	; (2a4c0 <_spi_check_config+0x224>)
   2a308:	4798      	blx	r3
   2a30a:	0003      	movs	r3, r0
   2a30c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   2a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a310:	3301      	adds	r3, #1
   2a312:	d010      	beq.n	2a336 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   2a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a316:	041b      	lsls	r3, r3, #16
   2a318:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   2a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a31c:	0c1b      	lsrs	r3, r3, #16
   2a31e:	b2db      	uxtb	r3, r3
   2a320:	0018      	movs	r0, r3
   2a322:	4b68      	ldr	r3, [pc, #416]	; (2a4c4 <_spi_check_config+0x228>)
   2a324:	4798      	blx	r3
   2a326:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
   2a328:	429c      	cmp	r4, r3
   2a32a:	d005      	beq.n	2a338 <_spi_check_config+0x9c>
			module->hw = NULL;
   2a32c:	687b      	ldr	r3, [r7, #4]
   2a32e:	2200      	movs	r2, #0
   2a330:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   2a332:	231c      	movs	r3, #28
   2a334:	e0bf      	b.n	2a4b6 <_spi_check_config+0x21a>
			continue;
   2a336:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a338:	233f      	movs	r3, #63	; 0x3f
   2a33a:	18fb      	adds	r3, r7, r3
   2a33c:	781a      	ldrb	r2, [r3, #0]
   2a33e:	233f      	movs	r3, #63	; 0x3f
   2a340:	18fb      	adds	r3, r7, r3
   2a342:	3201      	adds	r2, #1
   2a344:	701a      	strb	r2, [r3, #0]
   2a346:	233f      	movs	r3, #63	; 0x3f
   2a348:	18fb      	adds	r3, r7, r3
   2a34a:	781b      	ldrb	r3, [r3, #0]
   2a34c:	2b03      	cmp	r3, #3
   2a34e:	d9c9      	bls.n	2a2e4 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   2a350:	2013      	movs	r0, #19
   2a352:	4b5d      	ldr	r3, [pc, #372]	; (2a4c8 <_spi_check_config+0x22c>)
   2a354:	4798      	blx	r3
   2a356:	0003      	movs	r3, r0
   2a358:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   2a35a:	2300      	movs	r3, #0
   2a35c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   2a35e:	2300      	movs	r3, #0
   2a360:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
   2a362:	2300      	movs	r3, #0
   2a364:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   2a366:	683b      	ldr	r3, [r7, #0]
   2a368:	781b      	ldrb	r3, [r3, #0]
   2a36a:	2b01      	cmp	r3, #1
   2a36c:	d121      	bne.n	2a3b2 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
   2a36e:	683b      	ldr	r3, [r7, #0]
   2a370:	699b      	ldr	r3, [r3, #24]
   2a372:	221f      	movs	r2, #31
   2a374:	18bc      	adds	r4, r7, r2
   2a376:	220a      	movs	r2, #10
   2a378:	18ba      	adds	r2, r7, r2
   2a37a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a37c:	0018      	movs	r0, r3
   2a37e:	4b53      	ldr	r3, [pc, #332]	; (2a4cc <_spi_check_config+0x230>)
   2a380:	4798      	blx	r3
   2a382:	0003      	movs	r3, r0
   2a384:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   2a386:	231f      	movs	r3, #31
   2a388:	18fb      	adds	r3, r7, r3
   2a38a:	781b      	ldrb	r3, [r3, #0]
   2a38c:	2b00      	cmp	r3, #0
   2a38e:	d001      	beq.n	2a394 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2a390:	2317      	movs	r3, #23
   2a392:	e090      	b.n	2a4b6 <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   2a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a396:	7b1b      	ldrb	r3, [r3, #12]
   2a398:	b2da      	uxtb	r2, r3
   2a39a:	230a      	movs	r3, #10
   2a39c:	18fb      	adds	r3, r7, r3
   2a39e:	881b      	ldrh	r3, [r3, #0]
   2a3a0:	b2db      	uxtb	r3, r3
   2a3a2:	429a      	cmp	r2, r3
   2a3a4:	d001      	beq.n	2a3aa <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
   2a3a6:	231c      	movs	r3, #28
   2a3a8:	e085      	b.n	2a4b6 <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   2a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3ac:	220c      	movs	r2, #12
   2a3ae:	4313      	orrs	r3, r2
   2a3b0:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a3b2:	683b      	ldr	r3, [r7, #0]
   2a3b4:	781b      	ldrb	r3, [r3, #0]
   2a3b6:	2b00      	cmp	r3, #0
   2a3b8:	d129      	bne.n	2a40e <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
   2a3ba:	683b      	ldr	r3, [r7, #0]
   2a3bc:	699b      	ldr	r3, [r3, #24]
   2a3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a3c0:	4313      	orrs	r3, r2
   2a3c2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
   2a3c4:	683b      	ldr	r3, [r7, #0]
   2a3c6:	8b9b      	ldrh	r3, [r3, #28]
   2a3c8:	001a      	movs	r2, r3
   2a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a3cc:	4313      	orrs	r3, r2
   2a3ce:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a3d0:	683b      	ldr	r3, [r7, #0]
   2a3d2:	7f9b      	ldrb	r3, [r3, #30]
   2a3d4:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   2a3d6:	683b      	ldr	r3, [r7, #0]
   2a3d8:	7fdb      	ldrb	r3, [r3, #31]
   2a3da:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a3dc:	4313      	orrs	r3, r2
   2a3de:	001a      	movs	r2, r3
   2a3e0:	6a3b      	ldr	r3, [r7, #32]
   2a3e2:	4313      	orrs	r3, r2
   2a3e4:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
   2a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a3e8:	681a      	ldr	r2, [r3, #0]
   2a3ea:	6a3b      	ldr	r3, [r7, #32]
   2a3ec:	429a      	cmp	r2, r3
   2a3ee:	d001      	beq.n	2a3f4 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
   2a3f0:	231c      	movs	r3, #28
   2a3f2:	e060      	b.n	2a4b6 <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
   2a3f4:	683b      	ldr	r3, [r7, #0]
   2a3f6:	2220      	movs	r2, #32
   2a3f8:	5c9b      	ldrb	r3, [r3, r2]
   2a3fa:	2b00      	cmp	r3, #0
   2a3fc:	d003      	beq.n	2a406 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   2a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a400:	2240      	movs	r2, #64	; 0x40
   2a402:	4313      	orrs	r3, r2
   2a404:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
   2a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a408:	2208      	movs	r2, #8
   2a40a:	4313      	orrs	r3, r2
   2a40c:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   2a40e:	683b      	ldr	r3, [r7, #0]
   2a410:	685b      	ldr	r3, [r3, #4]
   2a412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a414:	4313      	orrs	r3, r2
   2a416:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2a418:	683b      	ldr	r3, [r7, #0]
   2a41a:	689b      	ldr	r3, [r3, #8]
   2a41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a41e:	4313      	orrs	r3, r2
   2a420:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2a422:	683b      	ldr	r3, [r7, #0]
   2a424:	68db      	ldr	r3, [r3, #12]
   2a426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a428:	4313      	orrs	r3, r2
   2a42a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2a42c:	683b      	ldr	r3, [r7, #0]
   2a42e:	7c1b      	ldrb	r3, [r3, #16]
   2a430:	001a      	movs	r2, r3
   2a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a434:	4313      	orrs	r3, r2
   2a436:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   2a438:	683b      	ldr	r3, [r7, #0]
   2a43a:	7c5b      	ldrb	r3, [r3, #17]
   2a43c:	2b00      	cmp	r3, #0
   2a43e:	d003      	beq.n	2a448 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   2a440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a442:	2280      	movs	r2, #128	; 0x80
   2a444:	4313      	orrs	r3, r2
   2a446:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   2a448:	683b      	ldr	r3, [r7, #0]
   2a44a:	7c9b      	ldrb	r3, [r3, #18]
   2a44c:	2b00      	cmp	r3, #0
   2a44e:	d004      	beq.n	2a45a <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   2a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a452:	2280      	movs	r2, #128	; 0x80
   2a454:	0292      	lsls	r2, r2, #10
   2a456:	4313      	orrs	r3, r2
   2a458:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2a45a:	683b      	ldr	r3, [r7, #0]
   2a45c:	7cdb      	ldrb	r3, [r3, #19]
   2a45e:	2b00      	cmp	r3, #0
   2a460:	d004      	beq.n	2a46c <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a464:	2280      	movs	r2, #128	; 0x80
   2a466:	0092      	lsls	r2, r2, #2
   2a468:	4313      	orrs	r3, r2
   2a46a:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2a46c:	683b      	ldr	r3, [r7, #0]
   2a46e:	7d1b      	ldrb	r3, [r3, #20]
   2a470:	2b00      	cmp	r3, #0
   2a472:	d004      	beq.n	2a47e <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a476:	2280      	movs	r2, #128	; 0x80
   2a478:	0192      	lsls	r2, r2, #6
   2a47a:	4313      	orrs	r3, r2
   2a47c:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   2a47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a480:	2202      	movs	r2, #2
   2a482:	4313      	orrs	r3, r2
   2a484:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   2a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a488:	681a      	ldr	r2, [r3, #0]
   2a48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a48c:	429a      	cmp	r2, r3
   2a48e:	d10e      	bne.n	2a4ae <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
   2a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a492:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   2a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a496:	429a      	cmp	r2, r3
   2a498:	d109      	bne.n	2a4ae <_spi_check_config+0x212>
		module->mode           = config->mode;
   2a49a:	683b      	ldr	r3, [r7, #0]
   2a49c:	781a      	ldrb	r2, [r3, #0]
   2a49e:	687b      	ldr	r3, [r7, #4]
   2a4a0:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   2a4a2:	683b      	ldr	r3, [r7, #0]
   2a4a4:	7c1a      	ldrb	r2, [r3, #16]
   2a4a6:	687b      	ldr	r3, [r7, #4]
   2a4a8:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   2a4aa:	2300      	movs	r3, #0
   2a4ac:	e003      	b.n	2a4b6 <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   2a4ae:	687b      	ldr	r3, [r7, #4]
   2a4b0:	2200      	movs	r2, #0
   2a4b2:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   2a4b4:	231c      	movs	r3, #28
}
   2a4b6:	0018      	movs	r0, r3
   2a4b8:	46bd      	mov	sp, r7
   2a4ba:	b011      	add	sp, #68	; 0x44
   2a4bc:	bd90      	pop	{r4, r7, pc}
   2a4be:	46c0      	nop			; (mov r8, r8)
   2a4c0:	00029819 	.word	0x00029819
   2a4c4:	00029c01 	.word	0x00029c01
   2a4c8:	0002c3e5 	.word	0x0002c3e5
   2a4cc:	0002954f 	.word	0x0002954f

0002a4d0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2a4d0:	b580      	push	{r7, lr}
   2a4d2:	b08a      	sub	sp, #40	; 0x28
   2a4d4:	af00      	add	r7, sp, #0
   2a4d6:	60f8      	str	r0, [r7, #12]
   2a4d8:	60b9      	str	r1, [r7, #8]
   2a4da:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2a4dc:	68fb      	ldr	r3, [r7, #12]
   2a4de:	68ba      	ldr	r2, [r7, #8]
   2a4e0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a4e2:	68fb      	ldr	r3, [r7, #12]
   2a4e4:	681b      	ldr	r3, [r3, #0]
   2a4e6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   2a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a4ea:	681b      	ldr	r3, [r3, #0]
   2a4ec:	2202      	movs	r2, #2
   2a4ee:	4013      	ands	r3, r2
   2a4f0:	d007      	beq.n	2a502 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   2a4f2:	687a      	ldr	r2, [r7, #4]
   2a4f4:	68fb      	ldr	r3, [r7, #12]
   2a4f6:	0011      	movs	r1, r2
   2a4f8:	0018      	movs	r0, r3
   2a4fa:	4b2f      	ldr	r3, [pc, #188]	; (2a5b8 <spi_init+0xe8>)
   2a4fc:	4798      	blx	r3
   2a4fe:	0003      	movs	r3, r0
   2a500:	e055      	b.n	2a5ae <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a504:	681b      	ldr	r3, [r3, #0]
   2a506:	2201      	movs	r2, #1
   2a508:	4013      	ands	r3, r2
   2a50a:	d001      	beq.n	2a510 <spi_init+0x40>
		return STATUS_BUSY;
   2a50c:	2305      	movs	r3, #5
   2a50e:	e04e      	b.n	2a5ae <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a510:	68fb      	ldr	r3, [r7, #12]
   2a512:	681b      	ldr	r3, [r3, #0]
   2a514:	0018      	movs	r0, r3
   2a516:	4b29      	ldr	r3, [pc, #164]	; (2a5bc <spi_init+0xec>)
   2a518:	4798      	blx	r3
   2a51a:	0003      	movs	r3, r0
   2a51c:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2a51e:	6a3b      	ldr	r3, [r7, #32]
   2a520:	3302      	adds	r3, #2
   2a522:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a524:	6a3b      	ldr	r3, [r7, #32]
   2a526:	3314      	adds	r3, #20
   2a528:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2a52a:	2201      	movs	r2, #1
   2a52c:	69fb      	ldr	r3, [r7, #28]
   2a52e:	409a      	lsls	r2, r3
   2a530:	0013      	movs	r3, r2
   2a532:	0019      	movs	r1, r3
   2a534:	2002      	movs	r0, #2
   2a536:	4b22      	ldr	r3, [pc, #136]	; (2a5c0 <spi_init+0xf0>)
   2a538:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2a53a:	2314      	movs	r3, #20
   2a53c:	18fb      	adds	r3, r7, r3
   2a53e:	0018      	movs	r0, r3
   2a540:	4b20      	ldr	r3, [pc, #128]	; (2a5c4 <spi_init+0xf4>)
   2a542:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2a544:	687b      	ldr	r3, [r7, #4]
   2a546:	2224      	movs	r2, #36	; 0x24
   2a548:	5c9a      	ldrb	r2, [r3, r2]
   2a54a:	2314      	movs	r3, #20
   2a54c:	18fb      	adds	r3, r7, r3
   2a54e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2a550:	69bb      	ldr	r3, [r7, #24]
   2a552:	b2db      	uxtb	r3, r3
   2a554:	2214      	movs	r2, #20
   2a556:	18ba      	adds	r2, r7, r2
   2a558:	0011      	movs	r1, r2
   2a55a:	0018      	movs	r0, r3
   2a55c:	4b1a      	ldr	r3, [pc, #104]	; (2a5c8 <spi_init+0xf8>)
   2a55e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2a560:	69bb      	ldr	r3, [r7, #24]
   2a562:	b2db      	uxtb	r3, r3
   2a564:	0018      	movs	r0, r3
   2a566:	4b19      	ldr	r3, [pc, #100]	; (2a5cc <spi_init+0xfc>)
   2a568:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2a56a:	687b      	ldr	r3, [r7, #4]
   2a56c:	2224      	movs	r2, #36	; 0x24
   2a56e:	5c9b      	ldrb	r3, [r3, r2]
   2a570:	2100      	movs	r1, #0
   2a572:	0018      	movs	r0, r3
   2a574:	4b16      	ldr	r3, [pc, #88]	; (2a5d0 <spi_init+0x100>)
   2a576:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   2a578:	687b      	ldr	r3, [r7, #4]
   2a57a:	781b      	ldrb	r3, [r3, #0]
   2a57c:	2b01      	cmp	r3, #1
   2a57e:	d105      	bne.n	2a58c <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   2a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a582:	681b      	ldr	r3, [r3, #0]
   2a584:	220c      	movs	r2, #12
   2a586:	431a      	orrs	r2, r3
   2a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a58a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a58c:	687b      	ldr	r3, [r7, #4]
   2a58e:	781b      	ldrb	r3, [r3, #0]
   2a590:	2b00      	cmp	r3, #0
   2a592:	d105      	bne.n	2a5a0 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   2a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a596:	681b      	ldr	r3, [r3, #0]
   2a598:	2208      	movs	r2, #8
   2a59a:	431a      	orrs	r2, r3
   2a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a59e:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2a5a0:	687a      	ldr	r2, [r7, #4]
   2a5a2:	68fb      	ldr	r3, [r7, #12]
   2a5a4:	0011      	movs	r1, r2
   2a5a6:	0018      	movs	r0, r3
   2a5a8:	4b0a      	ldr	r3, [pc, #40]	; (2a5d4 <spi_init+0x104>)
   2a5aa:	4798      	blx	r3
   2a5ac:	0003      	movs	r3, r0
}
   2a5ae:	0018      	movs	r0, r3
   2a5b0:	46bd      	mov	sp, r7
   2a5b2:	b00a      	add	sp, #40	; 0x28
   2a5b4:	bd80      	pop	{r7, pc}
   2a5b6:	46c0      	nop			; (mov r8, r8)
   2a5b8:	0002a29d 	.word	0x0002a29d
   2a5bc:	000299d5 	.word	0x000299d5
   2a5c0:	00029d0d 	.word	0x00029d0d
   2a5c4:	00029cf5 	.word	0x00029cf5
   2a5c8:	0002c2c1 	.word	0x0002c2c1
   2a5cc:	0002c305 	.word	0x0002c305
   2a5d0:	0002978d 	.word	0x0002978d
   2a5d4:	0002a04d 	.word	0x0002a04d

0002a5d8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2a5d8:	b590      	push	{r4, r7, lr}
   2a5da:	b089      	sub	sp, #36	; 0x24
   2a5dc:	af00      	add	r7, sp, #0
   2a5de:	60f8      	str	r0, [r7, #12]
   2a5e0:	60b9      	str	r1, [r7, #8]
   2a5e2:	0019      	movs	r1, r3
   2a5e4:	1dbb      	adds	r3, r7, #6
   2a5e6:	801a      	strh	r2, [r3, #0]
   2a5e8:	1d3b      	adds	r3, r7, #4
   2a5ea:	1c0a      	adds	r2, r1, #0
   2a5ec:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   2a5ee:	1dbb      	adds	r3, r7, #6
   2a5f0:	881b      	ldrh	r3, [r3, #0]
   2a5f2:	2b00      	cmp	r3, #0
   2a5f4:	d101      	bne.n	2a5fa <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
   2a5f6:	2317      	movs	r3, #23
   2a5f8:	e0b2      	b.n	2a760 <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
   2a5fa:	68fb      	ldr	r3, [r7, #12]
   2a5fc:	79db      	ldrb	r3, [r3, #7]
   2a5fe:	2201      	movs	r2, #1
   2a600:	4053      	eors	r3, r2
   2a602:	b2db      	uxtb	r3, r3
   2a604:	2b00      	cmp	r3, #0
   2a606:	d001      	beq.n	2a60c <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
   2a608:	231c      	movs	r3, #28
   2a60a:	e0a9      	b.n	2a760 <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   2a60c:	68fb      	ldr	r3, [r7, #12]
   2a60e:	795b      	ldrb	r3, [r3, #5]
   2a610:	2b00      	cmp	r3, #0
   2a612:	d109      	bne.n	2a628 <spi_read_buffer_wait+0x50>
   2a614:	68fb      	ldr	r3, [r7, #12]
   2a616:	0018      	movs	r0, r3
   2a618:	4b53      	ldr	r3, [pc, #332]	; (2a768 <spi_read_buffer_wait+0x190>)
   2a61a:	4798      	blx	r3
   2a61c:	1e03      	subs	r3, r0, #0
   2a61e:	d003      	beq.n	2a628 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   2a620:	68fb      	ldr	r3, [r7, #12]
   2a622:	0018      	movs	r0, r3
   2a624:	4b51      	ldr	r3, [pc, #324]	; (2a76c <spi_read_buffer_wait+0x194>)
   2a626:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   2a628:	231e      	movs	r3, #30
   2a62a:	18fb      	adds	r3, r7, r3
   2a62c:	2200      	movs	r2, #0
   2a62e:	801a      	strh	r2, [r3, #0]

	while (length--) {
   2a630:	e08d      	b.n	2a74e <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2a632:	68fb      	ldr	r3, [r7, #12]
   2a634:	795b      	ldrb	r3, [r3, #5]
   2a636:	2b01      	cmp	r3, #1
   2a638:	d112      	bne.n	2a660 <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   2a63a:	46c0      	nop			; (mov r8, r8)
   2a63c:	68fb      	ldr	r3, [r7, #12]
   2a63e:	0018      	movs	r0, r3
   2a640:	4b4b      	ldr	r3, [pc, #300]	; (2a770 <spi_read_buffer_wait+0x198>)
   2a642:	4798      	blx	r3
   2a644:	0003      	movs	r3, r0
   2a646:	001a      	movs	r2, r3
   2a648:	2301      	movs	r3, #1
   2a64a:	4053      	eors	r3, r2
   2a64c:	b2db      	uxtb	r3, r3
   2a64e:	2b00      	cmp	r3, #0
   2a650:	d1f4      	bne.n	2a63c <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2a652:	1d3b      	adds	r3, r7, #4
   2a654:	881a      	ldrh	r2, [r3, #0]
   2a656:	68fb      	ldr	r3, [r7, #12]
   2a658:	0011      	movs	r1, r2
   2a65a:	0018      	movs	r0, r3
   2a65c:	4b45      	ldr	r3, [pc, #276]	; (2a774 <spi_read_buffer_wait+0x19c>)
   2a65e:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   2a660:	68fb      	ldr	r3, [r7, #12]
   2a662:	795b      	ldrb	r3, [r3, #5]
   2a664:	2b00      	cmp	r3, #0
   2a666:	d12a      	bne.n	2a6be <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a668:	2300      	movs	r3, #0
   2a66a:	61bb      	str	r3, [r7, #24]
   2a66c:	e008      	b.n	2a680 <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
   2a66e:	68fb      	ldr	r3, [r7, #12]
   2a670:	0018      	movs	r0, r3
   2a672:	4b41      	ldr	r3, [pc, #260]	; (2a778 <spi_read_buffer_wait+0x1a0>)
   2a674:	4798      	blx	r3
   2a676:	1e03      	subs	r3, r0, #0
   2a678:	d107      	bne.n	2a68a <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a67a:	69bb      	ldr	r3, [r7, #24]
   2a67c:	3301      	adds	r3, #1
   2a67e:	61bb      	str	r3, [r7, #24]
   2a680:	69bb      	ldr	r3, [r7, #24]
   2a682:	4a3e      	ldr	r2, [pc, #248]	; (2a77c <spi_read_buffer_wait+0x1a4>)
   2a684:	4293      	cmp	r3, r2
   2a686:	d9f2      	bls.n	2a66e <spi_read_buffer_wait+0x96>
   2a688:	e000      	b.n	2a68c <spi_read_buffer_wait+0xb4>
					break;
   2a68a:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a68c:	68fb      	ldr	r3, [r7, #12]
   2a68e:	0018      	movs	r0, r3
   2a690:	4b35      	ldr	r3, [pc, #212]	; (2a768 <spi_read_buffer_wait+0x190>)
   2a692:	4798      	blx	r3
   2a694:	1e03      	subs	r3, r0, #0
   2a696:	d005      	beq.n	2a6a4 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
   2a698:	68fb      	ldr	r3, [r7, #12]
   2a69a:	0018      	movs	r0, r3
   2a69c:	4b33      	ldr	r3, [pc, #204]	; (2a76c <spi_read_buffer_wait+0x194>)
   2a69e:	4798      	blx	r3
				return STATUS_ABORTED;
   2a6a0:	2304      	movs	r3, #4
   2a6a2:	e05d      	b.n	2a760 <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
   2a6a4:	68fb      	ldr	r3, [r7, #12]
   2a6a6:	0018      	movs	r0, r3
   2a6a8:	4b33      	ldr	r3, [pc, #204]	; (2a778 <spi_read_buffer_wait+0x1a0>)
   2a6aa:	4798      	blx	r3
   2a6ac:	0003      	movs	r3, r0
   2a6ae:	001a      	movs	r2, r3
   2a6b0:	2301      	movs	r3, #1
   2a6b2:	4053      	eors	r3, r2
   2a6b4:	b2db      	uxtb	r3, r3
   2a6b6:	2b00      	cmp	r3, #0
   2a6b8:	d001      	beq.n	2a6be <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a6ba:	2312      	movs	r3, #18
   2a6bc:	e050      	b.n	2a760 <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2a6be:	46c0      	nop			; (mov r8, r8)
   2a6c0:	68fb      	ldr	r3, [r7, #12]
   2a6c2:	0018      	movs	r0, r3
   2a6c4:	4b2c      	ldr	r3, [pc, #176]	; (2a778 <spi_read_buffer_wait+0x1a0>)
   2a6c6:	4798      	blx	r3
   2a6c8:	0003      	movs	r3, r0
   2a6ca:	001a      	movs	r2, r3
   2a6cc:	2301      	movs	r3, #1
   2a6ce:	4053      	eors	r3, r2
   2a6d0:	b2db      	uxtb	r3, r3
   2a6d2:	2b00      	cmp	r3, #0
   2a6d4:	d1f4      	bne.n	2a6c0 <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
   2a6d6:	2314      	movs	r3, #20
   2a6d8:	18fb      	adds	r3, r7, r3
   2a6da:	2200      	movs	r2, #0
   2a6dc:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2a6de:	2317      	movs	r3, #23
   2a6e0:	18fc      	adds	r4, r7, r3
   2a6e2:	2314      	movs	r3, #20
   2a6e4:	18fa      	adds	r2, r7, r3
   2a6e6:	68fb      	ldr	r3, [r7, #12]
   2a6e8:	0011      	movs	r1, r2
   2a6ea:	0018      	movs	r0, r3
   2a6ec:	4b24      	ldr	r3, [pc, #144]	; (2a780 <spi_read_buffer_wait+0x1a8>)
   2a6ee:	4798      	blx	r3
   2a6f0:	0003      	movs	r3, r0
   2a6f2:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2a6f4:	2317      	movs	r3, #23
   2a6f6:	18fb      	adds	r3, r7, r3
   2a6f8:	781b      	ldrb	r3, [r3, #0]
   2a6fa:	2b00      	cmp	r3, #0
   2a6fc:	d003      	beq.n	2a706 <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
   2a6fe:	2317      	movs	r3, #23
   2a700:	18fb      	adds	r3, r7, r3
   2a702:	781b      	ldrb	r3, [r3, #0]
   2a704:	e02c      	b.n	2a760 <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2a706:	231e      	movs	r3, #30
   2a708:	18fb      	adds	r3, r7, r3
   2a70a:	881b      	ldrh	r3, [r3, #0]
   2a70c:	221e      	movs	r2, #30
   2a70e:	18ba      	adds	r2, r7, r2
   2a710:	1c59      	adds	r1, r3, #1
   2a712:	8011      	strh	r1, [r2, #0]
   2a714:	001a      	movs	r2, r3
   2a716:	68bb      	ldr	r3, [r7, #8]
   2a718:	189b      	adds	r3, r3, r2
   2a71a:	2214      	movs	r2, #20
   2a71c:	18ba      	adds	r2, r7, r2
   2a71e:	8812      	ldrh	r2, [r2, #0]
   2a720:	b2d2      	uxtb	r2, r2
   2a722:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a724:	68fb      	ldr	r3, [r7, #12]
   2a726:	799b      	ldrb	r3, [r3, #6]
   2a728:	2b01      	cmp	r3, #1
   2a72a:	d110      	bne.n	2a74e <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
   2a72c:	231e      	movs	r3, #30
   2a72e:	18fb      	adds	r3, r7, r3
   2a730:	881b      	ldrh	r3, [r3, #0]
   2a732:	221e      	movs	r2, #30
   2a734:	18ba      	adds	r2, r7, r2
   2a736:	1c59      	adds	r1, r3, #1
   2a738:	8011      	strh	r1, [r2, #0]
   2a73a:	001a      	movs	r2, r3
   2a73c:	68bb      	ldr	r3, [r7, #8]
   2a73e:	189b      	adds	r3, r3, r2
   2a740:	2214      	movs	r2, #20
   2a742:	18ba      	adds	r2, r7, r2
   2a744:	8812      	ldrh	r2, [r2, #0]
   2a746:	0a12      	lsrs	r2, r2, #8
   2a748:	b292      	uxth	r2, r2
   2a74a:	b2d2      	uxtb	r2, r2
   2a74c:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2a74e:	1dbb      	adds	r3, r7, #6
   2a750:	881b      	ldrh	r3, [r3, #0]
   2a752:	1dba      	adds	r2, r7, #6
   2a754:	1e59      	subs	r1, r3, #1
   2a756:	8011      	strh	r1, [r2, #0]
   2a758:	2b00      	cmp	r3, #0
   2a75a:	d000      	beq.n	2a75e <spi_read_buffer_wait+0x186>
   2a75c:	e769      	b.n	2a632 <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
   2a75e:	2300      	movs	r3, #0
}
   2a760:	0018      	movs	r0, r3
   2a762:	46bd      	mov	sp, r7
   2a764:	b009      	add	sp, #36	; 0x24
   2a766:	bd90      	pop	{r4, r7, pc}
   2a768:	00029e21 	.word	0x00029e21
   2a76c:	0002a031 	.word	0x0002a031
   2a770:	00029e49 	.word	0x00029e49
   2a774:	00029e99 	.word	0x00029e99
   2a778:	00029e71 	.word	0x00029e71
   2a77c:	00002710 	.word	0x00002710
   2a780:	00029ee1 	.word	0x00029ee1

0002a784 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2a784:	b580      	push	{r7, lr}
   2a786:	b086      	sub	sp, #24
   2a788:	af00      	add	r7, sp, #0
   2a78a:	60f8      	str	r0, [r7, #12]
   2a78c:	60b9      	str	r1, [r7, #8]
   2a78e:	1dfb      	adds	r3, r7, #7
   2a790:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2a792:	68fb      	ldr	r3, [r7, #12]
   2a794:	795b      	ldrb	r3, [r3, #5]
   2a796:	2b01      	cmp	r3, #1
   2a798:	d001      	beq.n	2a79e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2a79a:	2315      	movs	r3, #21
   2a79c:	e05c      	b.n	2a858 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2a79e:	68fb      	ldr	r3, [r7, #12]
   2a7a0:	7a1b      	ldrb	r3, [r3, #8]
   2a7a2:	2201      	movs	r2, #1
   2a7a4:	4053      	eors	r3, r2
   2a7a6:	b2db      	uxtb	r3, r3
   2a7a8:	2b00      	cmp	r3, #0
   2a7aa:	d054      	beq.n	2a856 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2a7ac:	1dfb      	adds	r3, r7, #7
   2a7ae:	781b      	ldrb	r3, [r3, #0]
   2a7b0:	2b00      	cmp	r3, #0
   2a7b2:	d04a      	beq.n	2a84a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   2a7b4:	68bb      	ldr	r3, [r7, #8]
   2a7b6:	785b      	ldrb	r3, [r3, #1]
   2a7b8:	2b00      	cmp	r3, #0
   2a7ba:	d03f      	beq.n	2a83c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2a7bc:	68fb      	ldr	r3, [r7, #12]
   2a7be:	0018      	movs	r0, r3
   2a7c0:	4b27      	ldr	r3, [pc, #156]	; (2a860 <spi_select_slave+0xdc>)
   2a7c2:	4798      	blx	r3
   2a7c4:	0003      	movs	r3, r0
   2a7c6:	001a      	movs	r2, r3
   2a7c8:	2301      	movs	r3, #1
   2a7ca:	4053      	eors	r3, r2
   2a7cc:	b2db      	uxtb	r3, r3
   2a7ce:	2b00      	cmp	r3, #0
   2a7d0:	d007      	beq.n	2a7e2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2a7d2:	68bb      	ldr	r3, [r7, #8]
   2a7d4:	781b      	ldrb	r3, [r3, #0]
   2a7d6:	2101      	movs	r1, #1
   2a7d8:	0018      	movs	r0, r3
   2a7da:	4b22      	ldr	r3, [pc, #136]	; (2a864 <spi_select_slave+0xe0>)
   2a7dc:	4798      	blx	r3
					return STATUS_BUSY;
   2a7de:	2305      	movs	r3, #5
   2a7e0:	e03a      	b.n	2a858 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a7e2:	68bb      	ldr	r3, [r7, #8]
   2a7e4:	781b      	ldrb	r3, [r3, #0]
   2a7e6:	2100      	movs	r1, #0
   2a7e8:	0018      	movs	r0, r3
   2a7ea:	4b1e      	ldr	r3, [pc, #120]	; (2a864 <spi_select_slave+0xe0>)
   2a7ec:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2a7ee:	68bb      	ldr	r3, [r7, #8]
   2a7f0:	789b      	ldrb	r3, [r3, #2]
   2a7f2:	b29a      	uxth	r2, r3
   2a7f4:	68fb      	ldr	r3, [r7, #12]
   2a7f6:	0011      	movs	r1, r2
   2a7f8:	0018      	movs	r0, r3
   2a7fa:	4b1b      	ldr	r3, [pc, #108]	; (2a868 <spi_select_slave+0xe4>)
   2a7fc:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2a7fe:	68fb      	ldr	r3, [r7, #12]
   2a800:	79db      	ldrb	r3, [r3, #7]
   2a802:	2201      	movs	r2, #1
   2a804:	4053      	eors	r3, r2
   2a806:	b2db      	uxtb	r3, r3
   2a808:	2b00      	cmp	r3, #0
   2a80a:	d024      	beq.n	2a856 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2a80c:	46c0      	nop			; (mov r8, r8)
   2a80e:	68fb      	ldr	r3, [r7, #12]
   2a810:	0018      	movs	r0, r3
   2a812:	4b16      	ldr	r3, [pc, #88]	; (2a86c <spi_select_slave+0xe8>)
   2a814:	4798      	blx	r3
   2a816:	0003      	movs	r3, r0
   2a818:	001a      	movs	r2, r3
   2a81a:	2301      	movs	r3, #1
   2a81c:	4053      	eors	r3, r2
   2a81e:	b2db      	uxtb	r3, r3
   2a820:	2b00      	cmp	r3, #0
   2a822:	d1f4      	bne.n	2a80e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2a824:	2316      	movs	r3, #22
   2a826:	18fb      	adds	r3, r7, r3
   2a828:	2200      	movs	r2, #0
   2a82a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2a82c:	2316      	movs	r3, #22
   2a82e:	18fa      	adds	r2, r7, r3
   2a830:	68fb      	ldr	r3, [r7, #12]
   2a832:	0011      	movs	r1, r2
   2a834:	0018      	movs	r0, r3
   2a836:	4b0e      	ldr	r3, [pc, #56]	; (2a870 <spi_select_slave+0xec>)
   2a838:	4798      	blx	r3
   2a83a:	e00c      	b.n	2a856 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a83c:	68bb      	ldr	r3, [r7, #8]
   2a83e:	781b      	ldrb	r3, [r3, #0]
   2a840:	2100      	movs	r1, #0
   2a842:	0018      	movs	r0, r3
   2a844:	4b07      	ldr	r3, [pc, #28]	; (2a864 <spi_select_slave+0xe0>)
   2a846:	4798      	blx	r3
   2a848:	e005      	b.n	2a856 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2a84a:	68bb      	ldr	r3, [r7, #8]
   2a84c:	781b      	ldrb	r3, [r3, #0]
   2a84e:	2101      	movs	r1, #1
   2a850:	0018      	movs	r0, r3
   2a852:	4b04      	ldr	r3, [pc, #16]	; (2a864 <spi_select_slave+0xe0>)
   2a854:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2a856:	2300      	movs	r3, #0
}
   2a858:	0018      	movs	r0, r3
   2a85a:	46bd      	mov	sp, r7
   2a85c:	b006      	add	sp, #24
   2a85e:	bd80      	pop	{r7, pc}
   2a860:	00029e49 	.word	0x00029e49
   2a864:	00029ca1 	.word	0x00029ca1
   2a868:	00029e99 	.word	0x00029e99
   2a86c:	00029e71 	.word	0x00029e71
   2a870:	00029ee1 	.word	0x00029ee1

0002a874 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2a874:	b580      	push	{r7, lr}
   2a876:	b08a      	sub	sp, #40	; 0x28
   2a878:	af00      	add	r7, sp, #0
   2a87a:	60f8      	str	r0, [r7, #12]
   2a87c:	60b9      	str	r1, [r7, #8]
   2a87e:	1dbb      	adds	r3, r7, #6
   2a880:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
   2a882:	1dbb      	adds	r3, r7, #6
   2a884:	881b      	ldrh	r3, [r3, #0]
   2a886:	2b00      	cmp	r3, #0
   2a888:	d101      	bne.n	2a88e <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2a88a:	2317      	movs	r3, #23
   2a88c:	e16a      	b.n	2ab64 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   2a88e:	68fb      	ldr	r3, [r7, #12]
   2a890:	795b      	ldrb	r3, [r3, #5]
   2a892:	2b00      	cmp	r3, #0
   2a894:	d109      	bne.n	2a8aa <spi_write_buffer_wait+0x36>
   2a896:	68fb      	ldr	r3, [r7, #12]
   2a898:	0018      	movs	r0, r3
   2a89a:	4bb4      	ldr	r3, [pc, #720]	; (2ab6c <spi_write_buffer_wait+0x2f8>)
   2a89c:	4798      	blx	r3
   2a89e:	1e03      	subs	r3, r0, #0
   2a8a0:	d003      	beq.n	2a8aa <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   2a8a2:	68fb      	ldr	r3, [r7, #12]
   2a8a4:	0018      	movs	r0, r3
   2a8a6:	4bb2      	ldr	r3, [pc, #712]	; (2ab70 <spi_write_buffer_wait+0x2fc>)
   2a8a8:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   2a8aa:	2326      	movs	r3, #38	; 0x26
   2a8ac:	18fb      	adds	r3, r7, r3
   2a8ae:	2200      	movs	r2, #0
   2a8b0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2a8b2:	2324      	movs	r3, #36	; 0x24
   2a8b4:	18fb      	adds	r3, r7, r3
   2a8b6:	1dba      	adds	r2, r7, #6
   2a8b8:	8812      	ldrh	r2, [r2, #0]
   2a8ba:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2a8bc:	e0fe      	b.n	2aabc <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   2a8be:	68fb      	ldr	r3, [r7, #12]
   2a8c0:	795b      	ldrb	r3, [r3, #5]
   2a8c2:	2b00      	cmp	r3, #0
   2a8c4:	d12a      	bne.n	2a91c <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a8c6:	2300      	movs	r3, #0
   2a8c8:	623b      	str	r3, [r7, #32]
   2a8ca:	e008      	b.n	2a8de <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
   2a8cc:	68fb      	ldr	r3, [r7, #12]
   2a8ce:	0018      	movs	r0, r3
   2a8d0:	4ba8      	ldr	r3, [pc, #672]	; (2ab74 <spi_write_buffer_wait+0x300>)
   2a8d2:	4798      	blx	r3
   2a8d4:	1e03      	subs	r3, r0, #0
   2a8d6:	d107      	bne.n	2a8e8 <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a8d8:	6a3b      	ldr	r3, [r7, #32]
   2a8da:	3301      	adds	r3, #1
   2a8dc:	623b      	str	r3, [r7, #32]
   2a8de:	6a3b      	ldr	r3, [r7, #32]
   2a8e0:	4aa5      	ldr	r2, [pc, #660]	; (2ab78 <spi_write_buffer_wait+0x304>)
   2a8e2:	4293      	cmp	r3, r2
   2a8e4:	d9f2      	bls.n	2a8cc <spi_write_buffer_wait+0x58>
   2a8e6:	e000      	b.n	2a8ea <spi_write_buffer_wait+0x76>
					break;
   2a8e8:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a8ea:	68fb      	ldr	r3, [r7, #12]
   2a8ec:	0018      	movs	r0, r3
   2a8ee:	4b9f      	ldr	r3, [pc, #636]	; (2ab6c <spi_write_buffer_wait+0x2f8>)
   2a8f0:	4798      	blx	r3
   2a8f2:	1e03      	subs	r3, r0, #0
   2a8f4:	d005      	beq.n	2a902 <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
   2a8f6:	68fb      	ldr	r3, [r7, #12]
   2a8f8:	0018      	movs	r0, r3
   2a8fa:	4b9d      	ldr	r3, [pc, #628]	; (2ab70 <spi_write_buffer_wait+0x2fc>)
   2a8fc:	4798      	blx	r3
				return STATUS_ABORTED;
   2a8fe:	2304      	movs	r3, #4
   2a900:	e130      	b.n	2ab64 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
   2a902:	68fb      	ldr	r3, [r7, #12]
   2a904:	0018      	movs	r0, r3
   2a906:	4b9b      	ldr	r3, [pc, #620]	; (2ab74 <spi_write_buffer_wait+0x300>)
   2a908:	4798      	blx	r3
   2a90a:	0003      	movs	r3, r0
   2a90c:	001a      	movs	r2, r3
   2a90e:	2301      	movs	r3, #1
   2a910:	4053      	eors	r3, r2
   2a912:	b2db      	uxtb	r3, r3
   2a914:	2b00      	cmp	r3, #0
   2a916:	d001      	beq.n	2a91c <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a918:	2312      	movs	r3, #18
   2a91a:	e123      	b.n	2ab64 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2a91c:	46c0      	nop			; (mov r8, r8)
   2a91e:	68fb      	ldr	r3, [r7, #12]
   2a920:	0018      	movs	r0, r3
   2a922:	4b94      	ldr	r3, [pc, #592]	; (2ab74 <spi_write_buffer_wait+0x300>)
   2a924:	4798      	blx	r3
   2a926:	0003      	movs	r3, r0
   2a928:	001a      	movs	r2, r3
   2a92a:	2301      	movs	r3, #1
   2a92c:	4053      	eors	r3, r2
   2a92e:	b2db      	uxtb	r3, r3
   2a930:	2b00      	cmp	r3, #0
   2a932:	d1f4      	bne.n	2a91e <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2a934:	2326      	movs	r3, #38	; 0x26
   2a936:	18fb      	adds	r3, r7, r3
   2a938:	881b      	ldrh	r3, [r3, #0]
   2a93a:	2226      	movs	r2, #38	; 0x26
   2a93c:	18ba      	adds	r2, r7, r2
   2a93e:	1c59      	adds	r1, r3, #1
   2a940:	8011      	strh	r1, [r2, #0]
   2a942:	001a      	movs	r2, r3
   2a944:	68bb      	ldr	r3, [r7, #8]
   2a946:	189b      	adds	r3, r3, r2
   2a948:	781a      	ldrb	r2, [r3, #0]
   2a94a:	231e      	movs	r3, #30
   2a94c:	18fb      	adds	r3, r7, r3
   2a94e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a950:	68fb      	ldr	r3, [r7, #12]
   2a952:	799b      	ldrb	r3, [r3, #6]
   2a954:	2b01      	cmp	r3, #1
   2a956:	d115      	bne.n	2a984 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2a958:	2326      	movs	r3, #38	; 0x26
   2a95a:	18fb      	adds	r3, r7, r3
   2a95c:	881b      	ldrh	r3, [r3, #0]
   2a95e:	2226      	movs	r2, #38	; 0x26
   2a960:	18ba      	adds	r2, r7, r2
   2a962:	1c59      	adds	r1, r3, #1
   2a964:	8011      	strh	r1, [r2, #0]
   2a966:	001a      	movs	r2, r3
   2a968:	68bb      	ldr	r3, [r7, #8]
   2a96a:	189b      	adds	r3, r3, r2
   2a96c:	781b      	ldrb	r3, [r3, #0]
   2a96e:	021b      	lsls	r3, r3, #8
   2a970:	b21a      	sxth	r2, r3
   2a972:	231e      	movs	r3, #30
   2a974:	18fb      	adds	r3, r7, r3
   2a976:	2100      	movs	r1, #0
   2a978:	5e5b      	ldrsh	r3, [r3, r1]
   2a97a:	4313      	orrs	r3, r2
   2a97c:	b21a      	sxth	r2, r3
   2a97e:	231e      	movs	r3, #30
   2a980:	18fb      	adds	r3, r7, r3
   2a982:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2a984:	231e      	movs	r3, #30
   2a986:	18fb      	adds	r3, r7, r3
   2a988:	881a      	ldrh	r2, [r3, #0]
   2a98a:	68fb      	ldr	r3, [r7, #12]
   2a98c:	0011      	movs	r1, r2
   2a98e:	0018      	movs	r0, r3
   2a990:	4b7a      	ldr	r3, [pc, #488]	; (2ab7c <spi_write_buffer_wait+0x308>)
   2a992:	4798      	blx	r3

		if (module->receiver_enabled) {
   2a994:	68fb      	ldr	r3, [r7, #12]
   2a996:	79db      	ldrb	r3, [r3, #7]
   2a998:	2224      	movs	r2, #36	; 0x24
   2a99a:	18ba      	adds	r2, r7, r2
   2a99c:	2124      	movs	r1, #36	; 0x24
   2a99e:	1879      	adds	r1, r7, r1
   2a9a0:	8809      	ldrh	r1, [r1, #0]
   2a9a2:	8011      	strh	r1, [r2, #0]
   2a9a4:	2b00      	cmp	r3, #0
   2a9a6:	d100      	bne.n	2a9aa <spi_write_buffer_wait+0x136>
   2a9a8:	e088      	b.n	2aabc <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   2a9aa:	68fb      	ldr	r3, [r7, #12]
   2a9ac:	795b      	ldrb	r3, [r3, #5]
   2a9ae:	2b00      	cmp	r3, #0
   2a9b0:	d000      	beq.n	2a9b4 <spi_write_buffer_wait+0x140>
   2a9b2:	e069      	b.n	2aa88 <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a9b4:	2300      	movs	r3, #0
   2a9b6:	61bb      	str	r3, [r7, #24]
   2a9b8:	e047      	b.n	2aa4a <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
   2a9ba:	1dbb      	adds	r3, r7, #6
   2a9bc:	881b      	ldrh	r3, [r3, #0]
   2a9be:	2b00      	cmp	r3, #0
   2a9c0:	d03a      	beq.n	2aa38 <spi_write_buffer_wait+0x1c4>
   2a9c2:	68fb      	ldr	r3, [r7, #12]
   2a9c4:	0018      	movs	r0, r3
   2a9c6:	4b6b      	ldr	r3, [pc, #428]	; (2ab74 <spi_write_buffer_wait+0x300>)
   2a9c8:	4798      	blx	r3
   2a9ca:	1e03      	subs	r3, r0, #0
   2a9cc:	d034      	beq.n	2aa38 <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
   2a9ce:	2326      	movs	r3, #38	; 0x26
   2a9d0:	18fb      	adds	r3, r7, r3
   2a9d2:	881b      	ldrh	r3, [r3, #0]
   2a9d4:	2226      	movs	r2, #38	; 0x26
   2a9d6:	18ba      	adds	r2, r7, r2
   2a9d8:	1c59      	adds	r1, r3, #1
   2a9da:	8011      	strh	r1, [r2, #0]
   2a9dc:	001a      	movs	r2, r3
   2a9de:	68bb      	ldr	r3, [r7, #8]
   2a9e0:	189b      	adds	r3, r3, r2
   2a9e2:	781a      	ldrb	r2, [r3, #0]
   2a9e4:	231e      	movs	r3, #30
   2a9e6:	18fb      	adds	r3, r7, r3
   2a9e8:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a9ea:	68fb      	ldr	r3, [r7, #12]
   2a9ec:	799b      	ldrb	r3, [r3, #6]
   2a9ee:	2b01      	cmp	r3, #1
   2a9f0:	d115      	bne.n	2aa1e <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
   2a9f2:	2326      	movs	r3, #38	; 0x26
   2a9f4:	18fb      	adds	r3, r7, r3
   2a9f6:	881b      	ldrh	r3, [r3, #0]
   2a9f8:	2226      	movs	r2, #38	; 0x26
   2a9fa:	18ba      	adds	r2, r7, r2
   2a9fc:	1c59      	adds	r1, r3, #1
   2a9fe:	8011      	strh	r1, [r2, #0]
   2aa00:	001a      	movs	r2, r3
   2aa02:	68bb      	ldr	r3, [r7, #8]
   2aa04:	189b      	adds	r3, r3, r2
   2aa06:	781b      	ldrb	r3, [r3, #0]
   2aa08:	021b      	lsls	r3, r3, #8
   2aa0a:	b21a      	sxth	r2, r3
   2aa0c:	231e      	movs	r3, #30
   2aa0e:	18fb      	adds	r3, r7, r3
   2aa10:	2100      	movs	r1, #0
   2aa12:	5e5b      	ldrsh	r3, [r3, r1]
   2aa14:	4313      	orrs	r3, r2
   2aa16:	b21a      	sxth	r2, r3
   2aa18:	231e      	movs	r3, #30
   2aa1a:	18fb      	adds	r3, r7, r3
   2aa1c:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   2aa1e:	231e      	movs	r3, #30
   2aa20:	18fb      	adds	r3, r7, r3
   2aa22:	881a      	ldrh	r2, [r3, #0]
   2aa24:	68fb      	ldr	r3, [r7, #12]
   2aa26:	0011      	movs	r1, r2
   2aa28:	0018      	movs	r0, r3
   2aa2a:	4b54      	ldr	r3, [pc, #336]	; (2ab7c <spi_write_buffer_wait+0x308>)
   2aa2c:	4798      	blx	r3
						length--;
   2aa2e:	1dbb      	adds	r3, r7, #6
   2aa30:	881a      	ldrh	r2, [r3, #0]
   2aa32:	1dbb      	adds	r3, r7, #6
   2aa34:	3a01      	subs	r2, #1
   2aa36:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   2aa38:	68fb      	ldr	r3, [r7, #12]
   2aa3a:	0018      	movs	r0, r3
   2aa3c:	4b50      	ldr	r3, [pc, #320]	; (2ab80 <spi_write_buffer_wait+0x30c>)
   2aa3e:	4798      	blx	r3
   2aa40:	1e03      	subs	r3, r0, #0
   2aa42:	d107      	bne.n	2aa54 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2aa44:	69bb      	ldr	r3, [r7, #24]
   2aa46:	3301      	adds	r3, #1
   2aa48:	61bb      	str	r3, [r7, #24]
   2aa4a:	69bb      	ldr	r3, [r7, #24]
   2aa4c:	4a4a      	ldr	r2, [pc, #296]	; (2ab78 <spi_write_buffer_wait+0x304>)
   2aa4e:	4293      	cmp	r3, r2
   2aa50:	d9b3      	bls.n	2a9ba <spi_write_buffer_wait+0x146>
   2aa52:	e000      	b.n	2aa56 <spi_write_buffer_wait+0x1e2>
						break;
   2aa54:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   2aa56:	68fb      	ldr	r3, [r7, #12]
   2aa58:	0018      	movs	r0, r3
   2aa5a:	4b44      	ldr	r3, [pc, #272]	; (2ab6c <spi_write_buffer_wait+0x2f8>)
   2aa5c:	4798      	blx	r3
   2aa5e:	1e03      	subs	r3, r0, #0
   2aa60:	d005      	beq.n	2aa6e <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
   2aa62:	68fb      	ldr	r3, [r7, #12]
   2aa64:	0018      	movs	r0, r3
   2aa66:	4b42      	ldr	r3, [pc, #264]	; (2ab70 <spi_write_buffer_wait+0x2fc>)
   2aa68:	4798      	blx	r3
					return STATUS_ABORTED;
   2aa6a:	2304      	movs	r3, #4
   2aa6c:	e07a      	b.n	2ab64 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
   2aa6e:	68fb      	ldr	r3, [r7, #12]
   2aa70:	0018      	movs	r0, r3
   2aa72:	4b43      	ldr	r3, [pc, #268]	; (2ab80 <spi_write_buffer_wait+0x30c>)
   2aa74:	4798      	blx	r3
   2aa76:	0003      	movs	r3, r0
   2aa78:	001a      	movs	r2, r3
   2aa7a:	2301      	movs	r3, #1
   2aa7c:	4053      	eors	r3, r2
   2aa7e:	b2db      	uxtb	r3, r3
   2aa80:	2b00      	cmp	r3, #0
   2aa82:	d001      	beq.n	2aa88 <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2aa84:	2312      	movs	r3, #18
   2aa86:	e06d      	b.n	2ab64 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2aa88:	46c0      	nop			; (mov r8, r8)
   2aa8a:	68fb      	ldr	r3, [r7, #12]
   2aa8c:	0018      	movs	r0, r3
   2aa8e:	4b3c      	ldr	r3, [pc, #240]	; (2ab80 <spi_write_buffer_wait+0x30c>)
   2aa90:	4798      	blx	r3
   2aa92:	0003      	movs	r3, r0
   2aa94:	001a      	movs	r2, r3
   2aa96:	2301      	movs	r3, #1
   2aa98:	4053      	eors	r3, r2
   2aa9a:	b2db      	uxtb	r3, r3
   2aa9c:	2b00      	cmp	r3, #0
   2aa9e:	d1f4      	bne.n	2aa8a <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2aaa0:	2312      	movs	r3, #18
   2aaa2:	18fa      	adds	r2, r7, r3
   2aaa4:	68fb      	ldr	r3, [r7, #12]
   2aaa6:	0011      	movs	r1, r2
   2aaa8:	0018      	movs	r0, r3
   2aaaa:	4b36      	ldr	r3, [pc, #216]	; (2ab84 <spi_write_buffer_wait+0x310>)
   2aaac:	4798      	blx	r3
			flush_length--;
   2aaae:	2324      	movs	r3, #36	; 0x24
   2aab0:	18fb      	adds	r3, r7, r3
   2aab2:	881a      	ldrh	r2, [r3, #0]
   2aab4:	2324      	movs	r3, #36	; 0x24
   2aab6:	18fb      	adds	r3, r7, r3
   2aab8:	3a01      	subs	r2, #1
   2aaba:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2aabc:	1dbb      	adds	r3, r7, #6
   2aabe:	881b      	ldrh	r3, [r3, #0]
   2aac0:	1dba      	adds	r2, r7, #6
   2aac2:	1e59      	subs	r1, r3, #1
   2aac4:	8011      	strh	r1, [r2, #0]
   2aac6:	2b00      	cmp	r3, #0
   2aac8:	d000      	beq.n	2aacc <spi_write_buffer_wait+0x258>
   2aaca:	e6f8      	b.n	2a8be <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2aacc:	68fb      	ldr	r3, [r7, #12]
   2aace:	795b      	ldrb	r3, [r3, #5]
   2aad0:	2b01      	cmp	r3, #1
   2aad2:	d10b      	bne.n	2aaec <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   2aad4:	46c0      	nop			; (mov r8, r8)
   2aad6:	68fb      	ldr	r3, [r7, #12]
   2aad8:	0018      	movs	r0, r3
   2aada:	4b24      	ldr	r3, [pc, #144]	; (2ab6c <spi_write_buffer_wait+0x2f8>)
   2aadc:	4798      	blx	r3
   2aade:	0003      	movs	r3, r0
   2aae0:	001a      	movs	r2, r3
   2aae2:	2301      	movs	r3, #1
   2aae4:	4053      	eors	r3, r2
   2aae6:	b2db      	uxtb	r3, r3
   2aae8:	2b00      	cmp	r3, #0
   2aaea:	d1f4      	bne.n	2aad6 <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   2aaec:	68fb      	ldr	r3, [r7, #12]
   2aaee:	795b      	ldrb	r3, [r3, #5]
   2aaf0:	2b00      	cmp	r3, #0
   2aaf2:	d136      	bne.n	2ab62 <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
   2aaf4:	68fb      	ldr	r3, [r7, #12]
   2aaf6:	79db      	ldrb	r3, [r3, #7]
   2aaf8:	2b00      	cmp	r3, #0
   2aafa:	d032      	beq.n	2ab62 <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
   2aafc:	e02c      	b.n	2ab58 <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2aafe:	2300      	movs	r3, #0
   2ab00:	617b      	str	r3, [r7, #20]
   2ab02:	e008      	b.n	2ab16 <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
   2ab04:	68fb      	ldr	r3, [r7, #12]
   2ab06:	0018      	movs	r0, r3
   2ab08:	4b1d      	ldr	r3, [pc, #116]	; (2ab80 <spi_write_buffer_wait+0x30c>)
   2ab0a:	4798      	blx	r3
   2ab0c:	1e03      	subs	r3, r0, #0
   2ab0e:	d107      	bne.n	2ab20 <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2ab10:	697b      	ldr	r3, [r7, #20]
   2ab12:	3301      	adds	r3, #1
   2ab14:	617b      	str	r3, [r7, #20]
   2ab16:	697b      	ldr	r3, [r7, #20]
   2ab18:	4a17      	ldr	r2, [pc, #92]	; (2ab78 <spi_write_buffer_wait+0x304>)
   2ab1a:	4293      	cmp	r3, r2
   2ab1c:	d9f2      	bls.n	2ab04 <spi_write_buffer_wait+0x290>
   2ab1e:	e000      	b.n	2ab22 <spi_write_buffer_wait+0x2ae>
						break;
   2ab20:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   2ab22:	68fb      	ldr	r3, [r7, #12]
   2ab24:	0018      	movs	r0, r3
   2ab26:	4b16      	ldr	r3, [pc, #88]	; (2ab80 <spi_write_buffer_wait+0x30c>)
   2ab28:	4798      	blx	r3
   2ab2a:	0003      	movs	r3, r0
   2ab2c:	001a      	movs	r2, r3
   2ab2e:	2301      	movs	r3, #1
   2ab30:	4053      	eors	r3, r2
   2ab32:	b2db      	uxtb	r3, r3
   2ab34:	2b00      	cmp	r3, #0
   2ab36:	d001      	beq.n	2ab3c <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2ab38:	2312      	movs	r3, #18
   2ab3a:	e013      	b.n	2ab64 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   2ab3c:	2310      	movs	r3, #16
   2ab3e:	18fa      	adds	r2, r7, r3
   2ab40:	68fb      	ldr	r3, [r7, #12]
   2ab42:	0011      	movs	r1, r2
   2ab44:	0018      	movs	r0, r3
   2ab46:	4b0f      	ldr	r3, [pc, #60]	; (2ab84 <spi_write_buffer_wait+0x310>)
   2ab48:	4798      	blx	r3
				flush_length--;
   2ab4a:	2324      	movs	r3, #36	; 0x24
   2ab4c:	18fb      	adds	r3, r7, r3
   2ab4e:	881a      	ldrh	r2, [r3, #0]
   2ab50:	2324      	movs	r3, #36	; 0x24
   2ab52:	18fb      	adds	r3, r7, r3
   2ab54:	3a01      	subs	r2, #1
   2ab56:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
   2ab58:	2324      	movs	r3, #36	; 0x24
   2ab5a:	18fb      	adds	r3, r7, r3
   2ab5c:	881b      	ldrh	r3, [r3, #0]
   2ab5e:	2b00      	cmp	r3, #0
   2ab60:	d1cd      	bne.n	2aafe <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
   2ab62:	2300      	movs	r3, #0
}
   2ab64:	0018      	movs	r0, r3
   2ab66:	46bd      	mov	sp, r7
   2ab68:	b00a      	add	sp, #40	; 0x28
   2ab6a:	bd80      	pop	{r7, pc}
   2ab6c:	00029e21 	.word	0x00029e21
   2ab70:	0002a031 	.word	0x0002a031
   2ab74:	00029e49 	.word	0x00029e49
   2ab78:	00002710 	.word	0x00002710
   2ab7c:	00029e99 	.word	0x00029e99
   2ab80:	00029e71 	.word	0x00029e71
   2ab84:	00029ee1 	.word	0x00029ee1

0002ab88 <system_gclk_chan_get_config_defaults>:
{
   2ab88:	b580      	push	{r7, lr}
   2ab8a:	b082      	sub	sp, #8
   2ab8c:	af00      	add	r7, sp, #0
   2ab8e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2ab90:	687b      	ldr	r3, [r7, #4]
   2ab92:	2200      	movs	r2, #0
   2ab94:	701a      	strb	r2, [r3, #0]
}
   2ab96:	46c0      	nop			; (mov r8, r8)
   2ab98:	46bd      	mov	sp, r7
   2ab9a:	b002      	add	sp, #8
   2ab9c:	bd80      	pop	{r7, pc}
	...

0002aba0 <system_apb_clock_set_mask>:
{
   2aba0:	b580      	push	{r7, lr}
   2aba2:	b082      	sub	sp, #8
   2aba4:	af00      	add	r7, sp, #0
   2aba6:	0002      	movs	r2, r0
   2aba8:	6039      	str	r1, [r7, #0]
   2abaa:	1dfb      	adds	r3, r7, #7
   2abac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2abae:	1dfb      	adds	r3, r7, #7
   2abb0:	781b      	ldrb	r3, [r3, #0]
   2abb2:	2b01      	cmp	r3, #1
   2abb4:	d00a      	beq.n	2abcc <system_apb_clock_set_mask+0x2c>
   2abb6:	2b02      	cmp	r3, #2
   2abb8:	d00f      	beq.n	2abda <system_apb_clock_set_mask+0x3a>
   2abba:	2b00      	cmp	r3, #0
   2abbc:	d114      	bne.n	2abe8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2abbe:	4b0e      	ldr	r3, [pc, #56]	; (2abf8 <system_apb_clock_set_mask+0x58>)
   2abc0:	4a0d      	ldr	r2, [pc, #52]	; (2abf8 <system_apb_clock_set_mask+0x58>)
   2abc2:	6991      	ldr	r1, [r2, #24]
   2abc4:	683a      	ldr	r2, [r7, #0]
   2abc6:	430a      	orrs	r2, r1
   2abc8:	619a      	str	r2, [r3, #24]
			break;
   2abca:	e00f      	b.n	2abec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2abcc:	4b0a      	ldr	r3, [pc, #40]	; (2abf8 <system_apb_clock_set_mask+0x58>)
   2abce:	4a0a      	ldr	r2, [pc, #40]	; (2abf8 <system_apb_clock_set_mask+0x58>)
   2abd0:	69d1      	ldr	r1, [r2, #28]
   2abd2:	683a      	ldr	r2, [r7, #0]
   2abd4:	430a      	orrs	r2, r1
   2abd6:	61da      	str	r2, [r3, #28]
			break;
   2abd8:	e008      	b.n	2abec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2abda:	4b07      	ldr	r3, [pc, #28]	; (2abf8 <system_apb_clock_set_mask+0x58>)
   2abdc:	4a06      	ldr	r2, [pc, #24]	; (2abf8 <system_apb_clock_set_mask+0x58>)
   2abde:	6a11      	ldr	r1, [r2, #32]
   2abe0:	683a      	ldr	r2, [r7, #0]
   2abe2:	430a      	orrs	r2, r1
   2abe4:	621a      	str	r2, [r3, #32]
			break;
   2abe6:	e001      	b.n	2abec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2abe8:	2317      	movs	r3, #23
   2abea:	e000      	b.n	2abee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2abec:	2300      	movs	r3, #0
}
   2abee:	0018      	movs	r0, r3
   2abf0:	46bd      	mov	sp, r7
   2abf2:	b002      	add	sp, #8
   2abf4:	bd80      	pop	{r7, pc}
   2abf6:	46c0      	nop			; (mov r8, r8)
   2abf8:	40000400 	.word	0x40000400

0002abfc <system_pinmux_get_config_defaults>:
{
   2abfc:	b580      	push	{r7, lr}
   2abfe:	b082      	sub	sp, #8
   2ac00:	af00      	add	r7, sp, #0
   2ac02:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2ac04:	687b      	ldr	r3, [r7, #4]
   2ac06:	2280      	movs	r2, #128	; 0x80
   2ac08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2ac0a:	687b      	ldr	r3, [r7, #4]
   2ac0c:	2200      	movs	r2, #0
   2ac0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2ac10:	687b      	ldr	r3, [r7, #4]
   2ac12:	2201      	movs	r2, #1
   2ac14:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2ac16:	687b      	ldr	r3, [r7, #4]
   2ac18:	2200      	movs	r2, #0
   2ac1a:	70da      	strb	r2, [r3, #3]
}
   2ac1c:	46c0      	nop			; (mov r8, r8)
   2ac1e:	46bd      	mov	sp, r7
   2ac20:	b002      	add	sp, #8
   2ac22:	bd80      	pop	{r7, pc}

0002ac24 <system_is_debugger_present>:
{
   2ac24:	b580      	push	{r7, lr}
   2ac26:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2ac28:	4b05      	ldr	r3, [pc, #20]	; (2ac40 <system_is_debugger_present+0x1c>)
   2ac2a:	789b      	ldrb	r3, [r3, #2]
   2ac2c:	b2db      	uxtb	r3, r3
   2ac2e:	001a      	movs	r2, r3
   2ac30:	2302      	movs	r3, #2
   2ac32:	4013      	ands	r3, r2
   2ac34:	1e5a      	subs	r2, r3, #1
   2ac36:	4193      	sbcs	r3, r2
   2ac38:	b2db      	uxtb	r3, r3
}
   2ac3a:	0018      	movs	r0, r3
   2ac3c:	46bd      	mov	sp, r7
   2ac3e:	bd80      	pop	{r7, pc}
   2ac40:	41002000 	.word	0x41002000

0002ac44 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   2ac44:	b580      	push	{r7, lr}
   2ac46:	b084      	sub	sp, #16
   2ac48:	af00      	add	r7, sp, #0
   2ac4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   2ac4c:	687b      	ldr	r3, [r7, #4]
   2ac4e:	681b      	ldr	r3, [r3, #0]
   2ac50:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2ac52:	68fb      	ldr	r3, [r7, #12]
   2ac54:	69db      	ldr	r3, [r3, #28]
   2ac56:	1e5a      	subs	r2, r3, #1
   2ac58:	4193      	sbcs	r3, r2
   2ac5a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   2ac5c:	0018      	movs	r0, r3
   2ac5e:	46bd      	mov	sp, r7
   2ac60:	b004      	add	sp, #16
   2ac62:	bd80      	pop	{r7, pc}

0002ac64 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   2ac64:	b580      	push	{r7, lr}
   2ac66:	b082      	sub	sp, #8
   2ac68:	af00      	add	r7, sp, #0
   2ac6a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   2ac6c:	46c0      	nop			; (mov r8, r8)
   2ac6e:	687b      	ldr	r3, [r7, #4]
   2ac70:	0018      	movs	r0, r3
   2ac72:	4b04      	ldr	r3, [pc, #16]	; (2ac84 <_usart_wait_for_sync+0x20>)
   2ac74:	4798      	blx	r3
   2ac76:	1e03      	subs	r3, r0, #0
   2ac78:	d1f9      	bne.n	2ac6e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   2ac7a:	46c0      	nop			; (mov r8, r8)
   2ac7c:	46bd      	mov	sp, r7
   2ac7e:	b002      	add	sp, #8
   2ac80:	bd80      	pop	{r7, pc}
   2ac82:	46c0      	nop			; (mov r8, r8)
   2ac84:	0002ac45 	.word	0x0002ac45

0002ac88 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   2ac88:	b5b0      	push	{r4, r5, r7, lr}
   2ac8a:	b08c      	sub	sp, #48	; 0x30
   2ac8c:	af02      	add	r7, sp, #8
   2ac8e:	6078      	str	r0, [r7, #4]
   2ac90:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2ac92:	687b      	ldr	r3, [r7, #4]
   2ac94:	681b      	ldr	r3, [r3, #0]
   2ac96:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2ac98:	687b      	ldr	r3, [r7, #4]
   2ac9a:	681b      	ldr	r3, [r3, #0]
   2ac9c:	0018      	movs	r0, r3
   2ac9e:	4bab      	ldr	r3, [pc, #684]	; (2af4c <_usart_set_config+0x2c4>)
   2aca0:	4798      	blx	r3
   2aca2:	0003      	movs	r3, r0
   2aca4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2aca6:	697b      	ldr	r3, [r7, #20]
   2aca8:	3314      	adds	r3, #20
   2acaa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2acac:	2300      	movs	r3, #0
   2acae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2acb0:	2300      	movs	r3, #0
   2acb2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2acb4:	230a      	movs	r3, #10
   2acb6:	18fb      	adds	r3, r7, r3
   2acb8:	2200      	movs	r2, #0
   2acba:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2acbc:	231f      	movs	r3, #31
   2acbe:	18fb      	adds	r3, r7, r3
   2acc0:	2200      	movs	r2, #0
   2acc2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2acc4:	231e      	movs	r3, #30
   2acc6:	18fb      	adds	r3, r7, r3
   2acc8:	2210      	movs	r2, #16
   2acca:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2accc:	683b      	ldr	r3, [r7, #0]
   2acce:	8a1b      	ldrh	r3, [r3, #16]
   2acd0:	2280      	movs	r2, #128	; 0x80
   2acd2:	01d2      	lsls	r2, r2, #7
   2acd4:	4293      	cmp	r3, r2
   2acd6:	d01c      	beq.n	2ad12 <_usart_set_config+0x8a>
   2acd8:	2280      	movs	r2, #128	; 0x80
   2acda:	01d2      	lsls	r2, r2, #7
   2acdc:	4293      	cmp	r3, r2
   2acde:	dc06      	bgt.n	2acee <_usart_set_config+0x66>
   2ace0:	2b00      	cmp	r3, #0
   2ace2:	d00d      	beq.n	2ad00 <_usart_set_config+0x78>
   2ace4:	2280      	movs	r2, #128	; 0x80
   2ace6:	0192      	lsls	r2, r2, #6
   2ace8:	4293      	cmp	r3, r2
   2acea:	d024      	beq.n	2ad36 <_usart_set_config+0xae>
   2acec:	e035      	b.n	2ad5a <_usart_set_config+0xd2>
   2acee:	22c0      	movs	r2, #192	; 0xc0
   2acf0:	01d2      	lsls	r2, r2, #7
   2acf2:	4293      	cmp	r3, r2
   2acf4:	d028      	beq.n	2ad48 <_usart_set_config+0xc0>
   2acf6:	2280      	movs	r2, #128	; 0x80
   2acf8:	0212      	lsls	r2, r2, #8
   2acfa:	4293      	cmp	r3, r2
   2acfc:	d012      	beq.n	2ad24 <_usart_set_config+0x9c>
   2acfe:	e02c      	b.n	2ad5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2ad00:	231f      	movs	r3, #31
   2ad02:	18fb      	adds	r3, r7, r3
   2ad04:	2200      	movs	r2, #0
   2ad06:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2ad08:	231e      	movs	r3, #30
   2ad0a:	18fb      	adds	r3, r7, r3
   2ad0c:	2210      	movs	r2, #16
   2ad0e:	701a      	strb	r2, [r3, #0]
			break;
   2ad10:	e023      	b.n	2ad5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2ad12:	231f      	movs	r3, #31
   2ad14:	18fb      	adds	r3, r7, r3
   2ad16:	2200      	movs	r2, #0
   2ad18:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2ad1a:	231e      	movs	r3, #30
   2ad1c:	18fb      	adds	r3, r7, r3
   2ad1e:	2208      	movs	r2, #8
   2ad20:	701a      	strb	r2, [r3, #0]
			break;
   2ad22:	e01a      	b.n	2ad5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2ad24:	231f      	movs	r3, #31
   2ad26:	18fb      	adds	r3, r7, r3
   2ad28:	2200      	movs	r2, #0
   2ad2a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2ad2c:	231e      	movs	r3, #30
   2ad2e:	18fb      	adds	r3, r7, r3
   2ad30:	2203      	movs	r2, #3
   2ad32:	701a      	strb	r2, [r3, #0]
			break;
   2ad34:	e011      	b.n	2ad5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2ad36:	231f      	movs	r3, #31
   2ad38:	18fb      	adds	r3, r7, r3
   2ad3a:	2201      	movs	r2, #1
   2ad3c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2ad3e:	231e      	movs	r3, #30
   2ad40:	18fb      	adds	r3, r7, r3
   2ad42:	2210      	movs	r2, #16
   2ad44:	701a      	strb	r2, [r3, #0]
			break;
   2ad46:	e008      	b.n	2ad5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2ad48:	231f      	movs	r3, #31
   2ad4a:	18fb      	adds	r3, r7, r3
   2ad4c:	2201      	movs	r2, #1
   2ad4e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2ad50:	231e      	movs	r3, #30
   2ad52:	18fb      	adds	r3, r7, r3
   2ad54:	2208      	movs	r2, #8
   2ad56:	701a      	strb	r2, [r3, #0]
			break;
   2ad58:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2ad5a:	683b      	ldr	r3, [r7, #0]
   2ad5c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2ad5e:	683b      	ldr	r3, [r7, #0]
   2ad60:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2ad62:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2ad64:	683b      	ldr	r3, [r7, #0]
   2ad66:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   2ad68:	4313      	orrs	r3, r2
		config->sample_rate |
   2ad6a:	683a      	ldr	r2, [r7, #0]
   2ad6c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2ad6e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2ad70:	683a      	ldr	r2, [r7, #0]
   2ad72:	7e12      	ldrb	r2, [r2, #24]
   2ad74:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2ad76:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   2ad78:	683a      	ldr	r2, [r7, #0]
   2ad7a:	2126      	movs	r1, #38	; 0x26
   2ad7c:	5c52      	ldrb	r2, [r2, r1]
   2ad7e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2ad80:	4313      	orrs	r3, r2
   2ad82:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2ad84:	231d      	movs	r3, #29
   2ad86:	18fb      	adds	r3, r7, r3
   2ad88:	2200      	movs	r2, #0
   2ad8a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2ad8c:	683b      	ldr	r3, [r7, #0]
   2ad8e:	685b      	ldr	r3, [r3, #4]
   2ad90:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2ad92:	68fb      	ldr	r3, [r7, #12]
   2ad94:	2b00      	cmp	r3, #0
   2ad96:	d01e      	beq.n	2add6 <_usart_set_config+0x14e>
   2ad98:	2280      	movs	r2, #128	; 0x80
   2ad9a:	0552      	lsls	r2, r2, #21
   2ad9c:	4293      	cmp	r3, r2
   2ad9e:	d14f      	bne.n	2ae40 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2ada0:	683b      	ldr	r3, [r7, #0]
   2ada2:	2227      	movs	r2, #39	; 0x27
   2ada4:	5c9b      	ldrb	r3, [r3, r2]
   2ada6:	2201      	movs	r2, #1
   2ada8:	4053      	eors	r3, r2
   2adaa:	b2db      	uxtb	r3, r3
   2adac:	2b00      	cmp	r3, #0
   2adae:	d046      	beq.n	2ae3e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2adb0:	683b      	ldr	r3, [r7, #0]
   2adb2:	6a1d      	ldr	r5, [r3, #32]
   2adb4:	693b      	ldr	r3, [r7, #16]
   2adb6:	b2db      	uxtb	r3, r3
   2adb8:	0018      	movs	r0, r3
   2adba:	4b65      	ldr	r3, [pc, #404]	; (2af50 <_usart_set_config+0x2c8>)
   2adbc:	4798      	blx	r3
   2adbe:	0001      	movs	r1, r0
   2adc0:	231d      	movs	r3, #29
   2adc2:	18fc      	adds	r4, r7, r3
   2adc4:	230a      	movs	r3, #10
   2adc6:	18fb      	adds	r3, r7, r3
   2adc8:	001a      	movs	r2, r3
   2adca:	0028      	movs	r0, r5
   2adcc:	4b61      	ldr	r3, [pc, #388]	; (2af54 <_usart_set_config+0x2cc>)
   2adce:	4798      	blx	r3
   2add0:	0003      	movs	r3, r0
   2add2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2add4:	e033      	b.n	2ae3e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2add6:	683b      	ldr	r3, [r7, #0]
   2add8:	2227      	movs	r2, #39	; 0x27
   2adda:	5c9b      	ldrb	r3, [r3, r2]
   2addc:	2b00      	cmp	r3, #0
   2adde:	d014      	beq.n	2ae0a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2ade0:	683b      	ldr	r3, [r7, #0]
   2ade2:	6a18      	ldr	r0, [r3, #32]
   2ade4:	683b      	ldr	r3, [r7, #0]
   2ade6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   2ade8:	231d      	movs	r3, #29
   2adea:	18fc      	adds	r4, r7, r3
   2adec:	231f      	movs	r3, #31
   2adee:	18fb      	adds	r3, r7, r3
   2adf0:	781d      	ldrb	r5, [r3, #0]
   2adf2:	230a      	movs	r3, #10
   2adf4:	18fa      	adds	r2, r7, r3
   2adf6:	231e      	movs	r3, #30
   2adf8:	18fb      	adds	r3, r7, r3
   2adfa:	781b      	ldrb	r3, [r3, #0]
   2adfc:	9300      	str	r3, [sp, #0]
   2adfe:	002b      	movs	r3, r5
   2ae00:	4d55      	ldr	r5, [pc, #340]	; (2af58 <_usart_set_config+0x2d0>)
   2ae02:	47a8      	blx	r5
   2ae04:	0003      	movs	r3, r0
   2ae06:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   2ae08:	e01a      	b.n	2ae40 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2ae0a:	683b      	ldr	r3, [r7, #0]
   2ae0c:	6a1d      	ldr	r5, [r3, #32]
   2ae0e:	693b      	ldr	r3, [r7, #16]
   2ae10:	b2db      	uxtb	r3, r3
   2ae12:	0018      	movs	r0, r3
   2ae14:	4b4e      	ldr	r3, [pc, #312]	; (2af50 <_usart_set_config+0x2c8>)
   2ae16:	4798      	blx	r3
				status_code =
   2ae18:	231d      	movs	r3, #29
   2ae1a:	18fc      	adds	r4, r7, r3
   2ae1c:	231f      	movs	r3, #31
   2ae1e:	18fb      	adds	r3, r7, r3
   2ae20:	7819      	ldrb	r1, [r3, #0]
   2ae22:	230a      	movs	r3, #10
   2ae24:	18fa      	adds	r2, r7, r3
   2ae26:	231e      	movs	r3, #30
   2ae28:	18fb      	adds	r3, r7, r3
   2ae2a:	781b      	ldrb	r3, [r3, #0]
   2ae2c:	9300      	str	r3, [sp, #0]
   2ae2e:	000b      	movs	r3, r1
   2ae30:	0001      	movs	r1, r0
   2ae32:	0028      	movs	r0, r5
   2ae34:	4d48      	ldr	r5, [pc, #288]	; (2af58 <_usart_set_config+0x2d0>)
   2ae36:	47a8      	blx	r5
   2ae38:	0003      	movs	r3, r0
   2ae3a:	7023      	strb	r3, [r4, #0]
			break;
   2ae3c:	e000      	b.n	2ae40 <_usart_set_config+0x1b8>
			break;
   2ae3e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2ae40:	231d      	movs	r3, #29
   2ae42:	18fb      	adds	r3, r7, r3
   2ae44:	781b      	ldrb	r3, [r3, #0]
   2ae46:	2b00      	cmp	r3, #0
   2ae48:	d003      	beq.n	2ae52 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2ae4a:	231d      	movs	r3, #29
   2ae4c:	18fb      	adds	r3, r7, r3
   2ae4e:	781b      	ldrb	r3, [r3, #0]
   2ae50:	e077      	b.n	2af42 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2ae52:	683b      	ldr	r3, [r7, #0]
   2ae54:	7e5b      	ldrb	r3, [r3, #25]
   2ae56:	2b00      	cmp	r3, #0
   2ae58:	d003      	beq.n	2ae62 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2ae5a:	683b      	ldr	r3, [r7, #0]
   2ae5c:	7e9a      	ldrb	r2, [r3, #26]
   2ae5e:	69bb      	ldr	r3, [r7, #24]
   2ae60:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2ae62:	687b      	ldr	r3, [r7, #4]
   2ae64:	0018      	movs	r0, r3
   2ae66:	4b3d      	ldr	r3, [pc, #244]	; (2af5c <_usart_set_config+0x2d4>)
   2ae68:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2ae6a:	230a      	movs	r3, #10
   2ae6c:	18fb      	adds	r3, r7, r3
   2ae6e:	881a      	ldrh	r2, [r3, #0]
   2ae70:	69bb      	ldr	r3, [r7, #24]
   2ae72:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2ae74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ae76:	68fb      	ldr	r3, [r7, #12]
   2ae78:	4313      	orrs	r3, r2
   2ae7a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2ae7c:	683b      	ldr	r3, [r7, #0]
   2ae7e:	2227      	movs	r2, #39	; 0x27
   2ae80:	5c9b      	ldrb	r3, [r3, r2]
   2ae82:	2201      	movs	r2, #1
   2ae84:	4053      	eors	r3, r2
   2ae86:	b2db      	uxtb	r3, r3
   2ae88:	2b00      	cmp	r3, #0
   2ae8a:	d003      	beq.n	2ae94 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ae8e:	2204      	movs	r2, #4
   2ae90:	4313      	orrs	r3, r2
   2ae92:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2ae94:	683b      	ldr	r3, [r7, #0]
   2ae96:	7e5b      	ldrb	r3, [r3, #25]
   2ae98:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2ae9a:	683b      	ldr	r3, [r7, #0]
   2ae9c:	7f1b      	ldrb	r3, [r3, #28]
   2ae9e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2aea0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2aea2:	683b      	ldr	r3, [r7, #0]
   2aea4:	7f5b      	ldrb	r3, [r3, #29]
   2aea6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2aea8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2aeaa:	683b      	ldr	r3, [r7, #0]
   2aeac:	2124      	movs	r1, #36	; 0x24
   2aeae:	5c5b      	ldrb	r3, [r3, r1]
   2aeb0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2aeb2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2aeb4:	683b      	ldr	r3, [r7, #0]
   2aeb6:	2125      	movs	r1, #37	; 0x25
   2aeb8:	5c5b      	ldrb	r3, [r3, r1]
   2aeba:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2aebc:	4313      	orrs	r3, r2
	ctrlb =  
   2aebe:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2aec0:	683b      	ldr	r3, [r7, #0]
   2aec2:	7a9b      	ldrb	r3, [r3, #10]
   2aec4:	001a      	movs	r2, r3
   2aec6:	6a3b      	ldr	r3, [r7, #32]
   2aec8:	4313      	orrs	r3, r2
   2aeca:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2aecc:	683b      	ldr	r3, [r7, #0]
   2aece:	7adb      	ldrb	r3, [r3, #11]
   2aed0:	001a      	movs	r2, r3
   2aed2:	6a3b      	ldr	r3, [r7, #32]
   2aed4:	4313      	orrs	r3, r2
   2aed6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   2aed8:	683b      	ldr	r3, [r7, #0]
   2aeda:	891b      	ldrh	r3, [r3, #8]
   2aedc:	2bff      	cmp	r3, #255	; 0xff
   2aede:	d00b      	beq.n	2aef8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2aee2:	2280      	movs	r2, #128	; 0x80
   2aee4:	0452      	lsls	r2, r2, #17
   2aee6:	4313      	orrs	r3, r2
   2aee8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2aeea:	683b      	ldr	r3, [r7, #0]
   2aeec:	891b      	ldrh	r3, [r3, #8]
   2aeee:	001a      	movs	r2, r3
   2aef0:	6a3b      	ldr	r3, [r7, #32]
   2aef2:	4313      	orrs	r3, r2
   2aef4:	623b      	str	r3, [r7, #32]
   2aef6:	e008      	b.n	2af0a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   2aef8:	683b      	ldr	r3, [r7, #0]
   2aefa:	7edb      	ldrb	r3, [r3, #27]
   2aefc:	2b00      	cmp	r3, #0
   2aefe:	d004      	beq.n	2af0a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2af02:	2280      	movs	r2, #128	; 0x80
   2af04:	04d2      	lsls	r2, r2, #19
   2af06:	4313      	orrs	r3, r2
   2af08:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2af0a:	683b      	ldr	r3, [r7, #0]
   2af0c:	222c      	movs	r2, #44	; 0x2c
   2af0e:	5c9b      	ldrb	r3, [r3, r2]
   2af10:	2b00      	cmp	r3, #0
   2af12:	d103      	bne.n	2af1c <_usart_set_config+0x294>
   2af14:	4b12      	ldr	r3, [pc, #72]	; (2af60 <_usart_set_config+0x2d8>)
   2af16:	4798      	blx	r3
   2af18:	1e03      	subs	r3, r0, #0
   2af1a:	d003      	beq.n	2af24 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2af1e:	2280      	movs	r2, #128	; 0x80
   2af20:	4313      	orrs	r3, r2
   2af22:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2af24:	687b      	ldr	r3, [r7, #4]
   2af26:	0018      	movs	r0, r3
   2af28:	4b0c      	ldr	r3, [pc, #48]	; (2af5c <_usart_set_config+0x2d4>)
   2af2a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2af2c:	69bb      	ldr	r3, [r7, #24]
   2af2e:	6a3a      	ldr	r2, [r7, #32]
   2af30:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2af32:	687b      	ldr	r3, [r7, #4]
   2af34:	0018      	movs	r0, r3
   2af36:	4b09      	ldr	r3, [pc, #36]	; (2af5c <_usart_set_config+0x2d4>)
   2af38:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2af3a:	69bb      	ldr	r3, [r7, #24]
   2af3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2af3e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2af40:	2300      	movs	r3, #0
}
   2af42:	0018      	movs	r0, r3
   2af44:	46bd      	mov	sp, r7
   2af46:	b00a      	add	sp, #40	; 0x28
   2af48:	bdb0      	pop	{r4, r5, r7, pc}
   2af4a:	46c0      	nop			; (mov r8, r8)
   2af4c:	000299d5 	.word	0x000299d5
   2af50:	0002c3e5 	.word	0x0002c3e5
   2af54:	0002954f 	.word	0x0002954f
   2af58:	000295cd 	.word	0x000295cd
   2af5c:	0002ac65 	.word	0x0002ac65
   2af60:	0002ac25 	.word	0x0002ac25

0002af64 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2af64:	b590      	push	{r4, r7, lr}
   2af66:	b093      	sub	sp, #76	; 0x4c
   2af68:	af00      	add	r7, sp, #0
   2af6a:	60f8      	str	r0, [r7, #12]
   2af6c:	60b9      	str	r1, [r7, #8]
   2af6e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2af70:	233b      	movs	r3, #59	; 0x3b
   2af72:	18fb      	adds	r3, r7, r3
   2af74:	2200      	movs	r2, #0
   2af76:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   2af78:	68fb      	ldr	r3, [r7, #12]
   2af7a:	68ba      	ldr	r2, [r7, #8]
   2af7c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2af7e:	68fb      	ldr	r3, [r7, #12]
   2af80:	681b      	ldr	r3, [r3, #0]
   2af82:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2af84:	68fb      	ldr	r3, [r7, #12]
   2af86:	681b      	ldr	r3, [r3, #0]
   2af88:	0018      	movs	r0, r3
   2af8a:	4b86      	ldr	r3, [pc, #536]	; (2b1a4 <usart_init+0x240>)
   2af8c:	4798      	blx	r3
   2af8e:	0003      	movs	r3, r0
   2af90:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2af94:	3302      	adds	r3, #2
   2af96:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2af9a:	3314      	adds	r3, #20
   2af9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2af9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2afa0:	681b      	ldr	r3, [r3, #0]
   2afa2:	2201      	movs	r2, #1
   2afa4:	4013      	ands	r3, r2
   2afa6:	d001      	beq.n	2afac <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   2afa8:	2305      	movs	r3, #5
   2afaa:	e0f6      	b.n	2b19a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2afac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2afae:	681b      	ldr	r3, [r3, #0]
   2afb0:	2202      	movs	r2, #2
   2afb2:	4013      	ands	r3, r2
   2afb4:	d001      	beq.n	2afba <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2afb6:	231c      	movs	r3, #28
   2afb8:	e0ef      	b.n	2b19a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2afba:	2201      	movs	r2, #1
   2afbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2afbe:	409a      	lsls	r2, r3
   2afc0:	0013      	movs	r3, r2
   2afc2:	0019      	movs	r1, r3
   2afc4:	2002      	movs	r0, #2
   2afc6:	4b78      	ldr	r3, [pc, #480]	; (2b1a8 <usart_init+0x244>)
   2afc8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2afca:	2324      	movs	r3, #36	; 0x24
   2afcc:	18fb      	adds	r3, r7, r3
   2afce:	0018      	movs	r0, r3
   2afd0:	4b76      	ldr	r3, [pc, #472]	; (2b1ac <usart_init+0x248>)
   2afd2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2afd4:	687b      	ldr	r3, [r7, #4]
   2afd6:	222d      	movs	r2, #45	; 0x2d
   2afd8:	5c9a      	ldrb	r2, [r3, r2]
   2afda:	2324      	movs	r3, #36	; 0x24
   2afdc:	18fb      	adds	r3, r7, r3
   2afde:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2afe2:	b2db      	uxtb	r3, r3
   2afe4:	2224      	movs	r2, #36	; 0x24
   2afe6:	18ba      	adds	r2, r7, r2
   2afe8:	0011      	movs	r1, r2
   2afea:	0018      	movs	r0, r3
   2afec:	4b70      	ldr	r3, [pc, #448]	; (2b1b0 <usart_init+0x24c>)
   2afee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2aff2:	b2db      	uxtb	r3, r3
   2aff4:	0018      	movs	r0, r3
   2aff6:	4b6f      	ldr	r3, [pc, #444]	; (2b1b4 <usart_init+0x250>)
   2aff8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2affa:	687b      	ldr	r3, [r7, #4]
   2affc:	222d      	movs	r2, #45	; 0x2d
   2affe:	5c9b      	ldrb	r3, [r3, r2]
   2b000:	2100      	movs	r1, #0
   2b002:	0018      	movs	r0, r3
   2b004:	4b6c      	ldr	r3, [pc, #432]	; (2b1b8 <usart_init+0x254>)
   2b006:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   2b008:	687b      	ldr	r3, [r7, #4]
   2b00a:	7ada      	ldrb	r2, [r3, #11]
   2b00c:	68fb      	ldr	r3, [r7, #12]
   2b00e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2b010:	687b      	ldr	r3, [r7, #4]
   2b012:	2224      	movs	r2, #36	; 0x24
   2b014:	5c9a      	ldrb	r2, [r3, r2]
   2b016:	68fb      	ldr	r3, [r7, #12]
   2b018:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2b01a:	687b      	ldr	r3, [r7, #4]
   2b01c:	2225      	movs	r2, #37	; 0x25
   2b01e:	5c9a      	ldrb	r2, [r3, r2]
   2b020:	68fb      	ldr	r3, [r7, #12]
   2b022:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2b024:	687b      	ldr	r3, [r7, #4]
   2b026:	7eda      	ldrb	r2, [r3, #27]
   2b028:	68fb      	ldr	r3, [r7, #12]
   2b02a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2b02c:	687b      	ldr	r3, [r7, #4]
   2b02e:	7f1a      	ldrb	r2, [r3, #28]
   2b030:	68fb      	ldr	r3, [r7, #12]
   2b032:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   2b034:	233b      	movs	r3, #59	; 0x3b
   2b036:	18fc      	adds	r4, r7, r3
   2b038:	687a      	ldr	r2, [r7, #4]
   2b03a:	68fb      	ldr	r3, [r7, #12]
   2b03c:	0011      	movs	r1, r2
   2b03e:	0018      	movs	r0, r3
   2b040:	4b5e      	ldr	r3, [pc, #376]	; (2b1bc <usart_init+0x258>)
   2b042:	4798      	blx	r3
   2b044:	0003      	movs	r3, r0
   2b046:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   2b048:	233b      	movs	r3, #59	; 0x3b
   2b04a:	18fb      	adds	r3, r7, r3
   2b04c:	781b      	ldrb	r3, [r3, #0]
   2b04e:	2b00      	cmp	r3, #0
   2b050:	d003      	beq.n	2b05a <usart_init+0xf6>
		return status_code;
   2b052:	233b      	movs	r3, #59	; 0x3b
   2b054:	18fb      	adds	r3, r7, r3
   2b056:	781b      	ldrb	r3, [r3, #0]
   2b058:	e09f      	b.n	2b19a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2b05a:	2320      	movs	r3, #32
   2b05c:	18fb      	adds	r3, r7, r3
   2b05e:	0018      	movs	r0, r3
   2b060:	4b57      	ldr	r3, [pc, #348]	; (2b1c0 <usart_init+0x25c>)
   2b062:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b064:	2320      	movs	r3, #32
   2b066:	18fb      	adds	r3, r7, r3
   2b068:	2200      	movs	r2, #0
   2b06a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2b06c:	2320      	movs	r3, #32
   2b06e:	18fb      	adds	r3, r7, r3
   2b070:	2200      	movs	r2, #0
   2b072:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2b074:	687b      	ldr	r3, [r7, #4]
   2b076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2b078:	2310      	movs	r3, #16
   2b07a:	18fb      	adds	r3, r7, r3
   2b07c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2b07e:	687b      	ldr	r3, [r7, #4]
   2b080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2b082:	2310      	movs	r3, #16
   2b084:	18fb      	adds	r3, r7, r3
   2b086:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2b088:	687b      	ldr	r3, [r7, #4]
   2b08a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2b08c:	2310      	movs	r3, #16
   2b08e:	18fb      	adds	r3, r7, r3
   2b090:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2b092:	687b      	ldr	r3, [r7, #4]
   2b094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2b096:	2310      	movs	r3, #16
   2b098:	18fb      	adds	r3, r7, r3
   2b09a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2b09c:	2347      	movs	r3, #71	; 0x47
   2b09e:	18fb      	adds	r3, r7, r3
   2b0a0:	2200      	movs	r2, #0
   2b0a2:	701a      	strb	r2, [r3, #0]
   2b0a4:	e02c      	b.n	2b100 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2b0a6:	2347      	movs	r3, #71	; 0x47
   2b0a8:	18fb      	adds	r3, r7, r3
   2b0aa:	781a      	ldrb	r2, [r3, #0]
   2b0ac:	2310      	movs	r3, #16
   2b0ae:	18fb      	adds	r3, r7, r3
   2b0b0:	0092      	lsls	r2, r2, #2
   2b0b2:	58d3      	ldr	r3, [r2, r3]
   2b0b4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2b0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b0b8:	2b00      	cmp	r3, #0
   2b0ba:	d109      	bne.n	2b0d0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2b0bc:	2347      	movs	r3, #71	; 0x47
   2b0be:	18fb      	adds	r3, r7, r3
   2b0c0:	781a      	ldrb	r2, [r3, #0]
   2b0c2:	68bb      	ldr	r3, [r7, #8]
   2b0c4:	0011      	movs	r1, r2
   2b0c6:	0018      	movs	r0, r3
   2b0c8:	4b3e      	ldr	r3, [pc, #248]	; (2b1c4 <usart_init+0x260>)
   2b0ca:	4798      	blx	r3
   2b0cc:	0003      	movs	r3, r0
   2b0ce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2b0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b0d2:	3301      	adds	r3, #1
   2b0d4:	d00d      	beq.n	2b0f2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2b0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b0d8:	b2da      	uxtb	r2, r3
   2b0da:	2320      	movs	r3, #32
   2b0dc:	18fb      	adds	r3, r7, r3
   2b0de:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2b0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b0e2:	0c1b      	lsrs	r3, r3, #16
   2b0e4:	b2db      	uxtb	r3, r3
   2b0e6:	2220      	movs	r2, #32
   2b0e8:	18ba      	adds	r2, r7, r2
   2b0ea:	0011      	movs	r1, r2
   2b0ec:	0018      	movs	r0, r3
   2b0ee:	4b36      	ldr	r3, [pc, #216]	; (2b1c8 <usart_init+0x264>)
   2b0f0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2b0f2:	2347      	movs	r3, #71	; 0x47
   2b0f4:	18fb      	adds	r3, r7, r3
   2b0f6:	781a      	ldrb	r2, [r3, #0]
   2b0f8:	2347      	movs	r3, #71	; 0x47
   2b0fa:	18fb      	adds	r3, r7, r3
   2b0fc:	3201      	adds	r2, #1
   2b0fe:	701a      	strb	r2, [r3, #0]
   2b100:	2347      	movs	r3, #71	; 0x47
   2b102:	18fb      	adds	r3, r7, r3
   2b104:	781b      	ldrb	r3, [r3, #0]
   2b106:	2b03      	cmp	r3, #3
   2b108:	d9cd      	bls.n	2b0a6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2b10a:	2300      	movs	r3, #0
   2b10c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b10e:	e00a      	b.n	2b126 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2b110:	68fa      	ldr	r2, [r7, #12]
   2b112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b114:	3302      	adds	r3, #2
   2b116:	009b      	lsls	r3, r3, #2
   2b118:	18d3      	adds	r3, r2, r3
   2b11a:	3304      	adds	r3, #4
   2b11c:	2200      	movs	r2, #0
   2b11e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2b120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b122:	3301      	adds	r3, #1
   2b124:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b128:	2b05      	cmp	r3, #5
   2b12a:	d9f1      	bls.n	2b110 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2b12c:	68fb      	ldr	r3, [r7, #12]
   2b12e:	2200      	movs	r2, #0
   2b130:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2b132:	68fb      	ldr	r3, [r7, #12]
   2b134:	2200      	movs	r2, #0
   2b136:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   2b138:	68fb      	ldr	r3, [r7, #12]
   2b13a:	2200      	movs	r2, #0
   2b13c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2b13e:	68fb      	ldr	r3, [r7, #12]
   2b140:	2200      	movs	r2, #0
   2b142:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   2b144:	68fb      	ldr	r3, [r7, #12]
   2b146:	2230      	movs	r2, #48	; 0x30
   2b148:	2100      	movs	r1, #0
   2b14a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2b14c:	68fb      	ldr	r3, [r7, #12]
   2b14e:	2231      	movs	r2, #49	; 0x31
   2b150:	2100      	movs	r1, #0
   2b152:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2b154:	68fb      	ldr	r3, [r7, #12]
   2b156:	2232      	movs	r2, #50	; 0x32
   2b158:	2100      	movs	r1, #0
   2b15a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2b15c:	68fb      	ldr	r3, [r7, #12]
   2b15e:	2233      	movs	r2, #51	; 0x33
   2b160:	2100      	movs	r1, #0
   2b162:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2b164:	68fb      	ldr	r3, [r7, #12]
   2b166:	681b      	ldr	r3, [r3, #0]
   2b168:	2227      	movs	r2, #39	; 0x27
   2b16a:	18bc      	adds	r4, r7, r2
   2b16c:	0018      	movs	r0, r3
   2b16e:	4b0d      	ldr	r3, [pc, #52]	; (2b1a4 <usart_init+0x240>)
   2b170:	4798      	blx	r3
   2b172:	0003      	movs	r3, r0
   2b174:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2b176:	4a15      	ldr	r2, [pc, #84]	; (2b1cc <usart_init+0x268>)
   2b178:	2327      	movs	r3, #39	; 0x27
   2b17a:	18fb      	adds	r3, r7, r3
   2b17c:	781b      	ldrb	r3, [r3, #0]
   2b17e:	0011      	movs	r1, r2
   2b180:	0018      	movs	r0, r3
   2b182:	4b13      	ldr	r3, [pc, #76]	; (2b1d0 <usart_init+0x26c>)
   2b184:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2b186:	2327      	movs	r3, #39	; 0x27
   2b188:	18fb      	adds	r3, r7, r3
   2b18a:	781a      	ldrb	r2, [r3, #0]
   2b18c:	4b11      	ldr	r3, [pc, #68]	; (2b1d4 <usart_init+0x270>)
   2b18e:	0092      	lsls	r2, r2, #2
   2b190:	68f9      	ldr	r1, [r7, #12]
   2b192:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2b194:	233b      	movs	r3, #59	; 0x3b
   2b196:	18fb      	adds	r3, r7, r3
   2b198:	781b      	ldrb	r3, [r3, #0]
}
   2b19a:	0018      	movs	r0, r3
   2b19c:	46bd      	mov	sp, r7
   2b19e:	b013      	add	sp, #76	; 0x4c
   2b1a0:	bd90      	pop	{r4, r7, pc}
   2b1a2:	46c0      	nop			; (mov r8, r8)
   2b1a4:	000299d5 	.word	0x000299d5
   2b1a8:	0002aba1 	.word	0x0002aba1
   2b1ac:	0002ab89 	.word	0x0002ab89
   2b1b0:	0002c2c1 	.word	0x0002c2c1
   2b1b4:	0002c305 	.word	0x0002c305
   2b1b8:	0002978d 	.word	0x0002978d
   2b1bc:	0002ac89 	.word	0x0002ac89
   2b1c0:	0002abfd 	.word	0x0002abfd
   2b1c4:	00029819 	.word	0x00029819
   2b1c8:	0002c621 	.word	0x0002c621
   2b1cc:	0002b441 	.word	0x0002b441
   2b1d0:	00029a39 	.word	0x00029a39
   2b1d4:	20005a84 	.word	0x20005a84

0002b1d8 <system_interrupt_enter_critical_section>:
{
   2b1d8:	b580      	push	{r7, lr}
   2b1da:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2b1dc:	4b02      	ldr	r3, [pc, #8]	; (2b1e8 <system_interrupt_enter_critical_section+0x10>)
   2b1de:	4798      	blx	r3
}
   2b1e0:	46c0      	nop			; (mov r8, r8)
   2b1e2:	46bd      	mov	sp, r7
   2b1e4:	bd80      	pop	{r7, pc}
   2b1e6:	46c0      	nop			; (mov r8, r8)
   2b1e8:	000285d1 	.word	0x000285d1

0002b1ec <system_interrupt_leave_critical_section>:
{
   2b1ec:	b580      	push	{r7, lr}
   2b1ee:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2b1f0:	4b02      	ldr	r3, [pc, #8]	; (2b1fc <system_interrupt_leave_critical_section+0x10>)
   2b1f2:	4798      	blx	r3
}
   2b1f4:	46c0      	nop			; (mov r8, r8)
   2b1f6:	46bd      	mov	sp, r7
   2b1f8:	bd80      	pop	{r7, pc}
   2b1fa:	46c0      	nop			; (mov r8, r8)
   2b1fc:	00028625 	.word	0x00028625

0002b200 <usart_is_syncing>:
{
   2b200:	b580      	push	{r7, lr}
   2b202:	b084      	sub	sp, #16
   2b204:	af00      	add	r7, sp, #0
   2b206:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b208:	687b      	ldr	r3, [r7, #4]
   2b20a:	681b      	ldr	r3, [r3, #0]
   2b20c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2b20e:	68fb      	ldr	r3, [r7, #12]
   2b210:	69db      	ldr	r3, [r3, #28]
   2b212:	1e5a      	subs	r2, r3, #1
   2b214:	4193      	sbcs	r3, r2
   2b216:	b2db      	uxtb	r3, r3
}
   2b218:	0018      	movs	r0, r3
   2b21a:	46bd      	mov	sp, r7
   2b21c:	b004      	add	sp, #16
   2b21e:	bd80      	pop	{r7, pc}

0002b220 <_usart_wait_for_sync>:
{
   2b220:	b580      	push	{r7, lr}
   2b222:	b082      	sub	sp, #8
   2b224:	af00      	add	r7, sp, #0
   2b226:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2b228:	46c0      	nop			; (mov r8, r8)
   2b22a:	687b      	ldr	r3, [r7, #4]
   2b22c:	0018      	movs	r0, r3
   2b22e:	4b04      	ldr	r3, [pc, #16]	; (2b240 <_usart_wait_for_sync+0x20>)
   2b230:	4798      	blx	r3
   2b232:	1e03      	subs	r3, r0, #0
   2b234:	d1f9      	bne.n	2b22a <_usart_wait_for_sync+0xa>
}
   2b236:	46c0      	nop			; (mov r8, r8)
   2b238:	46bd      	mov	sp, r7
   2b23a:	b002      	add	sp, #8
   2b23c:	bd80      	pop	{r7, pc}
   2b23e:	46c0      	nop			; (mov r8, r8)
   2b240:	0002b201 	.word	0x0002b201

0002b244 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b244:	b580      	push	{r7, lr}
   2b246:	b086      	sub	sp, #24
   2b248:	af00      	add	r7, sp, #0
   2b24a:	60f8      	str	r0, [r7, #12]
   2b24c:	60b9      	str	r1, [r7, #8]
   2b24e:	1dbb      	adds	r3, r7, #6
   2b250:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b252:	68fb      	ldr	r3, [r7, #12]
   2b254:	681b      	ldr	r3, [r3, #0]
   2b256:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b258:	4b0f      	ldr	r3, [pc, #60]	; (2b298 <_usart_write_buffer+0x54>)
   2b25a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2b25c:	68fb      	ldr	r3, [r7, #12]
   2b25e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b260:	b29b      	uxth	r3, r3
   2b262:	2b00      	cmp	r3, #0
   2b264:	d003      	beq.n	2b26e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b266:	4b0d      	ldr	r3, [pc, #52]	; (2b29c <_usart_write_buffer+0x58>)
   2b268:	4798      	blx	r3
		return STATUS_BUSY;
   2b26a:	2305      	movs	r3, #5
   2b26c:	e010      	b.n	2b290 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2b26e:	68fb      	ldr	r3, [r7, #12]
   2b270:	1dba      	adds	r2, r7, #6
   2b272:	8812      	ldrh	r2, [r2, #0]
   2b274:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   2b276:	4b09      	ldr	r3, [pc, #36]	; (2b29c <_usart_write_buffer+0x58>)
   2b278:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2b27a:	68fb      	ldr	r3, [r7, #12]
   2b27c:	68ba      	ldr	r2, [r7, #8]
   2b27e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2b280:	68fb      	ldr	r3, [r7, #12]
   2b282:	2233      	movs	r2, #51	; 0x33
   2b284:	2105      	movs	r1, #5
   2b286:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   2b288:	697b      	ldr	r3, [r7, #20]
   2b28a:	2201      	movs	r2, #1
   2b28c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2b28e:	2300      	movs	r3, #0
}
   2b290:	0018      	movs	r0, r3
   2b292:	46bd      	mov	sp, r7
   2b294:	b006      	add	sp, #24
   2b296:	bd80      	pop	{r7, pc}
   2b298:	0002b1d9 	.word	0x0002b1d9
   2b29c:	0002b1ed 	.word	0x0002b1ed

0002b2a0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b2a0:	b580      	push	{r7, lr}
   2b2a2:	b086      	sub	sp, #24
   2b2a4:	af00      	add	r7, sp, #0
   2b2a6:	60f8      	str	r0, [r7, #12]
   2b2a8:	60b9      	str	r1, [r7, #8]
   2b2aa:	1dbb      	adds	r3, r7, #6
   2b2ac:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b2ae:	68fb      	ldr	r3, [r7, #12]
   2b2b0:	681b      	ldr	r3, [r3, #0]
   2b2b2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b2b4:	4b16      	ldr	r3, [pc, #88]	; (2b310 <_usart_read_buffer+0x70>)
   2b2b6:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   2b2b8:	68fb      	ldr	r3, [r7, #12]
   2b2ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b2bc:	b29b      	uxth	r3, r3
   2b2be:	2b00      	cmp	r3, #0
   2b2c0:	d003      	beq.n	2b2ca <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b2c2:	4b14      	ldr	r3, [pc, #80]	; (2b314 <_usart_read_buffer+0x74>)
   2b2c4:	4798      	blx	r3
		return STATUS_BUSY;
   2b2c6:	2305      	movs	r3, #5
   2b2c8:	e01e      	b.n	2b308 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2b2ca:	68fb      	ldr	r3, [r7, #12]
   2b2cc:	1dba      	adds	r2, r7, #6
   2b2ce:	8812      	ldrh	r2, [r2, #0]
   2b2d0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2b2d2:	4b10      	ldr	r3, [pc, #64]	; (2b314 <_usart_read_buffer+0x74>)
   2b2d4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2b2d6:	68fb      	ldr	r3, [r7, #12]
   2b2d8:	68ba      	ldr	r2, [r7, #8]
   2b2da:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2b2dc:	68fb      	ldr	r3, [r7, #12]
   2b2de:	2232      	movs	r2, #50	; 0x32
   2b2e0:	2105      	movs	r1, #5
   2b2e2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2b2e4:	697b      	ldr	r3, [r7, #20]
   2b2e6:	2204      	movs	r2, #4
   2b2e8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2b2ea:	68fb      	ldr	r3, [r7, #12]
   2b2ec:	7a1b      	ldrb	r3, [r3, #8]
   2b2ee:	2b00      	cmp	r3, #0
   2b2f0:	d002      	beq.n	2b2f8 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b2f2:	697b      	ldr	r3, [r7, #20]
   2b2f4:	2220      	movs	r2, #32
   2b2f6:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   2b2f8:	68fb      	ldr	r3, [r7, #12]
   2b2fa:	7a5b      	ldrb	r3, [r3, #9]
   2b2fc:	2b00      	cmp	r3, #0
   2b2fe:	d002      	beq.n	2b306 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2b300:	697b      	ldr	r3, [r7, #20]
   2b302:	2208      	movs	r2, #8
   2b304:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2b306:	2300      	movs	r3, #0
}
   2b308:	0018      	movs	r0, r3
   2b30a:	46bd      	mov	sp, r7
   2b30c:	b006      	add	sp, #24
   2b30e:	bd80      	pop	{r7, pc}
   2b310:	0002b1d9 	.word	0x0002b1d9
   2b314:	0002b1ed 	.word	0x0002b1ed

0002b318 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   2b318:	b580      	push	{r7, lr}
   2b31a:	b084      	sub	sp, #16
   2b31c:	af00      	add	r7, sp, #0
   2b31e:	60f8      	str	r0, [r7, #12]
   2b320:	60b9      	str	r1, [r7, #8]
   2b322:	1dfb      	adds	r3, r7, #7
   2b324:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b326:	1dfb      	adds	r3, r7, #7
   2b328:	781b      	ldrb	r3, [r3, #0]
   2b32a:	68fa      	ldr	r2, [r7, #12]
   2b32c:	3302      	adds	r3, #2
   2b32e:	009b      	lsls	r3, r3, #2
   2b330:	18d3      	adds	r3, r2, r3
   2b332:	3304      	adds	r3, #4
   2b334:	68ba      	ldr	r2, [r7, #8]
   2b336:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   2b338:	68fb      	ldr	r3, [r7, #12]
   2b33a:	2230      	movs	r2, #48	; 0x30
   2b33c:	5c9b      	ldrb	r3, [r3, r2]
   2b33e:	b25a      	sxtb	r2, r3
   2b340:	1dfb      	adds	r3, r7, #7
   2b342:	781b      	ldrb	r3, [r3, #0]
   2b344:	2101      	movs	r1, #1
   2b346:	4099      	lsls	r1, r3
   2b348:	000b      	movs	r3, r1
   2b34a:	b25b      	sxtb	r3, r3
   2b34c:	4313      	orrs	r3, r2
   2b34e:	b25b      	sxtb	r3, r3
   2b350:	b2d9      	uxtb	r1, r3
   2b352:	68fb      	ldr	r3, [r7, #12]
   2b354:	2230      	movs	r2, #48	; 0x30
   2b356:	5499      	strb	r1, [r3, r2]
}
   2b358:	46c0      	nop			; (mov r8, r8)
   2b35a:	46bd      	mov	sp, r7
   2b35c:	b004      	add	sp, #16
   2b35e:	bd80      	pop	{r7, pc}

0002b360 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b360:	b580      	push	{r7, lr}
   2b362:	b084      	sub	sp, #16
   2b364:	af00      	add	r7, sp, #0
   2b366:	60f8      	str	r0, [r7, #12]
   2b368:	60b9      	str	r1, [r7, #8]
   2b36a:	1dbb      	adds	r3, r7, #6
   2b36c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2b36e:	1dbb      	adds	r3, r7, #6
   2b370:	881b      	ldrh	r3, [r3, #0]
   2b372:	2b00      	cmp	r3, #0
   2b374:	d101      	bne.n	2b37a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b376:	2317      	movs	r3, #23
   2b378:	e010      	b.n	2b39c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2b37a:	68fb      	ldr	r3, [r7, #12]
   2b37c:	79db      	ldrb	r3, [r3, #7]
   2b37e:	2201      	movs	r2, #1
   2b380:	4053      	eors	r3, r2
   2b382:	b2db      	uxtb	r3, r3
   2b384:	2b00      	cmp	r3, #0
   2b386:	d001      	beq.n	2b38c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b388:	231c      	movs	r3, #28
   2b38a:	e007      	b.n	2b39c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2b38c:	1dbb      	adds	r3, r7, #6
   2b38e:	881a      	ldrh	r2, [r3, #0]
   2b390:	68b9      	ldr	r1, [r7, #8]
   2b392:	68fb      	ldr	r3, [r7, #12]
   2b394:	0018      	movs	r0, r3
   2b396:	4b03      	ldr	r3, [pc, #12]	; (2b3a4 <usart_write_buffer_job+0x44>)
   2b398:	4798      	blx	r3
   2b39a:	0003      	movs	r3, r0
}
   2b39c:	0018      	movs	r0, r3
   2b39e:	46bd      	mov	sp, r7
   2b3a0:	b004      	add	sp, #16
   2b3a2:	bd80      	pop	{r7, pc}
   2b3a4:	0002b245 	.word	0x0002b245

0002b3a8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b3a8:	b580      	push	{r7, lr}
   2b3aa:	b084      	sub	sp, #16
   2b3ac:	af00      	add	r7, sp, #0
   2b3ae:	60f8      	str	r0, [r7, #12]
   2b3b0:	60b9      	str	r1, [r7, #8]
   2b3b2:	1dbb      	adds	r3, r7, #6
   2b3b4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2b3b6:	1dbb      	adds	r3, r7, #6
   2b3b8:	881b      	ldrh	r3, [r3, #0]
   2b3ba:	2b00      	cmp	r3, #0
   2b3bc:	d101      	bne.n	2b3c2 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b3be:	2317      	movs	r3, #23
   2b3c0:	e010      	b.n	2b3e4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2b3c2:	68fb      	ldr	r3, [r7, #12]
   2b3c4:	799b      	ldrb	r3, [r3, #6]
   2b3c6:	2201      	movs	r2, #1
   2b3c8:	4053      	eors	r3, r2
   2b3ca:	b2db      	uxtb	r3, r3
   2b3cc:	2b00      	cmp	r3, #0
   2b3ce:	d001      	beq.n	2b3d4 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b3d0:	231c      	movs	r3, #28
   2b3d2:	e007      	b.n	2b3e4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2b3d4:	1dbb      	adds	r3, r7, #6
   2b3d6:	881a      	ldrh	r2, [r3, #0]
   2b3d8:	68b9      	ldr	r1, [r7, #8]
   2b3da:	68fb      	ldr	r3, [r7, #12]
   2b3dc:	0018      	movs	r0, r3
   2b3de:	4b03      	ldr	r3, [pc, #12]	; (2b3ec <usart_read_buffer_job+0x44>)
   2b3e0:	4798      	blx	r3
   2b3e2:	0003      	movs	r3, r0
}
   2b3e4:	0018      	movs	r0, r3
   2b3e6:	46bd      	mov	sp, r7
   2b3e8:	b004      	add	sp, #16
   2b3ea:	bd80      	pop	{r7, pc}
   2b3ec:	0002b2a1 	.word	0x0002b2a1

0002b3f0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2b3f0:	b580      	push	{r7, lr}
   2b3f2:	b084      	sub	sp, #16
   2b3f4:	af00      	add	r7, sp, #0
   2b3f6:	6078      	str	r0, [r7, #4]
   2b3f8:	000a      	movs	r2, r1
   2b3fa:	1cfb      	adds	r3, r7, #3
   2b3fc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2b3fe:	1cfb      	adds	r3, r7, #3
   2b400:	781b      	ldrb	r3, [r3, #0]
   2b402:	2b00      	cmp	r3, #0
   2b404:	d002      	beq.n	2b40c <usart_get_job_status+0x1c>
   2b406:	2b01      	cmp	r3, #1
   2b408:	d007      	beq.n	2b41a <usart_get_job_status+0x2a>
   2b40a:	e00d      	b.n	2b428 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2b40c:	230f      	movs	r3, #15
   2b40e:	18fb      	adds	r3, r7, r3
   2b410:	687a      	ldr	r2, [r7, #4]
   2b412:	2132      	movs	r1, #50	; 0x32
   2b414:	5c52      	ldrb	r2, [r2, r1]
   2b416:	701a      	strb	r2, [r3, #0]
			break;
   2b418:	e00b      	b.n	2b432 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2b41a:	230f      	movs	r3, #15
   2b41c:	18fb      	adds	r3, r7, r3
   2b41e:	687a      	ldr	r2, [r7, #4]
   2b420:	2133      	movs	r1, #51	; 0x33
   2b422:	5c52      	ldrb	r2, [r2, r1]
   2b424:	701a      	strb	r2, [r3, #0]
			break;
   2b426:	e004      	b.n	2b432 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   2b428:	230f      	movs	r3, #15
   2b42a:	18fb      	adds	r3, r7, r3
   2b42c:	2217      	movs	r2, #23
   2b42e:	701a      	strb	r2, [r3, #0]
			break;
   2b430:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2b432:	230f      	movs	r3, #15
   2b434:	18fb      	adds	r3, r7, r3
   2b436:	781b      	ldrb	r3, [r3, #0]
}
   2b438:	0018      	movs	r0, r3
   2b43a:	46bd      	mov	sp, r7
   2b43c:	b004      	add	sp, #16
   2b43e:	bd80      	pop	{r7, pc}

0002b440 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2b440:	b580      	push	{r7, lr}
   2b442:	b088      	sub	sp, #32
   2b444:	af00      	add	r7, sp, #0
   2b446:	0002      	movs	r2, r0
   2b448:	1dfb      	adds	r3, r7, #7
   2b44a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2b44c:	1dfb      	adds	r3, r7, #7
   2b44e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2b450:	4ba3      	ldr	r3, [pc, #652]	; (2b6e0 <_usart_interrupt_handler+0x2a0>)
   2b452:	0092      	lsls	r2, r2, #2
   2b454:	58d3      	ldr	r3, [r2, r3]
   2b456:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   2b458:	69bb      	ldr	r3, [r7, #24]
   2b45a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2b45c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2b45e:	69bb      	ldr	r3, [r7, #24]
   2b460:	0018      	movs	r0, r3
   2b462:	4ba0      	ldr	r3, [pc, #640]	; (2b6e4 <_usart_interrupt_handler+0x2a4>)
   2b464:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2b466:	697b      	ldr	r3, [r7, #20]
   2b468:	7e1b      	ldrb	r3, [r3, #24]
   2b46a:	b2da      	uxtb	r2, r3
   2b46c:	2312      	movs	r3, #18
   2b46e:	18fb      	adds	r3, r7, r3
   2b470:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2b472:	697b      	ldr	r3, [r7, #20]
   2b474:	7d9b      	ldrb	r3, [r3, #22]
   2b476:	b2db      	uxtb	r3, r3
   2b478:	b29a      	uxth	r2, r3
   2b47a:	2312      	movs	r3, #18
   2b47c:	18fb      	adds	r3, r7, r3
   2b47e:	2112      	movs	r1, #18
   2b480:	1879      	adds	r1, r7, r1
   2b482:	8809      	ldrh	r1, [r1, #0]
   2b484:	400a      	ands	r2, r1
   2b486:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   2b488:	69bb      	ldr	r3, [r7, #24]
   2b48a:	2230      	movs	r2, #48	; 0x30
   2b48c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2b48e:	69ba      	ldr	r2, [r7, #24]
   2b490:	2131      	movs	r1, #49	; 0x31
   2b492:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2b494:	4013      	ands	r3, r2
   2b496:	b2da      	uxtb	r2, r3
   2b498:	2310      	movs	r3, #16
   2b49a:	18fb      	adds	r3, r7, r3
   2b49c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2b49e:	2312      	movs	r3, #18
   2b4a0:	18fb      	adds	r3, r7, r3
   2b4a2:	881b      	ldrh	r3, [r3, #0]
   2b4a4:	2201      	movs	r2, #1
   2b4a6:	4013      	ands	r3, r2
   2b4a8:	d044      	beq.n	2b534 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2b4aa:	69bb      	ldr	r3, [r7, #24]
   2b4ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b4ae:	b29b      	uxth	r3, r3
   2b4b0:	2b00      	cmp	r3, #0
   2b4b2:	d03c      	beq.n	2b52e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2b4b4:	69bb      	ldr	r3, [r7, #24]
   2b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4b8:	781b      	ldrb	r3, [r3, #0]
   2b4ba:	b2da      	uxtb	r2, r3
   2b4bc:	231c      	movs	r3, #28
   2b4be:	18fb      	adds	r3, r7, r3
   2b4c0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2b4c2:	69bb      	ldr	r3, [r7, #24]
   2b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4c6:	1c5a      	adds	r2, r3, #1
   2b4c8:	69bb      	ldr	r3, [r7, #24]
   2b4ca:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2b4cc:	69bb      	ldr	r3, [r7, #24]
   2b4ce:	795b      	ldrb	r3, [r3, #5]
   2b4d0:	2b01      	cmp	r3, #1
   2b4d2:	d113      	bne.n	2b4fc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2b4d4:	69bb      	ldr	r3, [r7, #24]
   2b4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4d8:	781b      	ldrb	r3, [r3, #0]
   2b4da:	b2db      	uxtb	r3, r3
   2b4dc:	021b      	lsls	r3, r3, #8
   2b4de:	b21a      	sxth	r2, r3
   2b4e0:	231c      	movs	r3, #28
   2b4e2:	18fb      	adds	r3, r7, r3
   2b4e4:	2100      	movs	r1, #0
   2b4e6:	5e5b      	ldrsh	r3, [r3, r1]
   2b4e8:	4313      	orrs	r3, r2
   2b4ea:	b21a      	sxth	r2, r3
   2b4ec:	231c      	movs	r3, #28
   2b4ee:	18fb      	adds	r3, r7, r3
   2b4f0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2b4f2:	69bb      	ldr	r3, [r7, #24]
   2b4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4f6:	1c5a      	adds	r2, r3, #1
   2b4f8:	69bb      	ldr	r3, [r7, #24]
   2b4fa:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2b4fc:	231c      	movs	r3, #28
   2b4fe:	18fb      	adds	r3, r7, r3
   2b500:	881b      	ldrh	r3, [r3, #0]
   2b502:	05db      	lsls	r3, r3, #23
   2b504:	0ddb      	lsrs	r3, r3, #23
   2b506:	b29a      	uxth	r2, r3
   2b508:	697b      	ldr	r3, [r7, #20]
   2b50a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2b50c:	69bb      	ldr	r3, [r7, #24]
   2b50e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b510:	b29b      	uxth	r3, r3
   2b512:	3b01      	subs	r3, #1
   2b514:	b29b      	uxth	r3, r3
   2b516:	69ba      	ldr	r2, [r7, #24]
   2b518:	1c19      	adds	r1, r3, #0
   2b51a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2b51c:	2b00      	cmp	r3, #0
   2b51e:	d109      	bne.n	2b534 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2b520:	697b      	ldr	r3, [r7, #20]
   2b522:	2201      	movs	r2, #1
   2b524:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2b526:	697b      	ldr	r3, [r7, #20]
   2b528:	2202      	movs	r2, #2
   2b52a:	759a      	strb	r2, [r3, #22]
   2b52c:	e002      	b.n	2b534 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2b52e:	697b      	ldr	r3, [r7, #20]
   2b530:	2201      	movs	r2, #1
   2b532:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2b534:	2312      	movs	r3, #18
   2b536:	18fb      	adds	r3, r7, r3
   2b538:	881b      	ldrh	r3, [r3, #0]
   2b53a:	2202      	movs	r2, #2
   2b53c:	4013      	ands	r3, r2
   2b53e:	d011      	beq.n	2b564 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2b540:	697b      	ldr	r3, [r7, #20]
   2b542:	2202      	movs	r2, #2
   2b544:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2b546:	69bb      	ldr	r3, [r7, #24]
   2b548:	2233      	movs	r2, #51	; 0x33
   2b54a:	2100      	movs	r1, #0
   2b54c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2b54e:	2310      	movs	r3, #16
   2b550:	18fb      	adds	r3, r7, r3
   2b552:	881b      	ldrh	r3, [r3, #0]
   2b554:	2201      	movs	r2, #1
   2b556:	4013      	ands	r3, r2
   2b558:	d004      	beq.n	2b564 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2b55a:	69bb      	ldr	r3, [r7, #24]
   2b55c:	68db      	ldr	r3, [r3, #12]
   2b55e:	69ba      	ldr	r2, [r7, #24]
   2b560:	0010      	movs	r0, r2
   2b562:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2b564:	2312      	movs	r3, #18
   2b566:	18fb      	adds	r3, r7, r3
   2b568:	881b      	ldrh	r3, [r3, #0]
   2b56a:	2204      	movs	r2, #4
   2b56c:	4013      	ands	r3, r2
   2b56e:	d100      	bne.n	2b572 <_usart_interrupt_handler+0x132>
   2b570:	e0bd      	b.n	2b6ee <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2b572:	69bb      	ldr	r3, [r7, #24]
   2b574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b576:	b29b      	uxth	r3, r3
   2b578:	2b00      	cmp	r3, #0
   2b57a:	d100      	bne.n	2b57e <_usart_interrupt_handler+0x13e>
   2b57c:	e0b4      	b.n	2b6e8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2b57e:	697b      	ldr	r3, [r7, #20]
   2b580:	8b5b      	ldrh	r3, [r3, #26]
   2b582:	b29b      	uxth	r3, r3
   2b584:	b2da      	uxtb	r2, r3
   2b586:	231f      	movs	r3, #31
   2b588:	18fb      	adds	r3, r7, r3
   2b58a:	213f      	movs	r1, #63	; 0x3f
   2b58c:	400a      	ands	r2, r1
   2b58e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2b590:	231f      	movs	r3, #31
   2b592:	18fb      	adds	r3, r7, r3
   2b594:	781b      	ldrb	r3, [r3, #0]
   2b596:	2208      	movs	r2, #8
   2b598:	4013      	ands	r3, r2
   2b59a:	d007      	beq.n	2b5ac <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2b59c:	231f      	movs	r3, #31
   2b59e:	18fb      	adds	r3, r7, r3
   2b5a0:	221f      	movs	r2, #31
   2b5a2:	18ba      	adds	r2, r7, r2
   2b5a4:	7812      	ldrb	r2, [r2, #0]
   2b5a6:	2108      	movs	r1, #8
   2b5a8:	438a      	bics	r2, r1
   2b5aa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2b5ac:	231f      	movs	r3, #31
   2b5ae:	18fb      	adds	r3, r7, r3
   2b5b0:	781b      	ldrb	r3, [r3, #0]
   2b5b2:	2b00      	cmp	r3, #0
   2b5b4:	d050      	beq.n	2b658 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2b5b6:	231f      	movs	r3, #31
   2b5b8:	18fb      	adds	r3, r7, r3
   2b5ba:	781b      	ldrb	r3, [r3, #0]
   2b5bc:	2202      	movs	r2, #2
   2b5be:	4013      	ands	r3, r2
   2b5c0:	d007      	beq.n	2b5d2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2b5c2:	69bb      	ldr	r3, [r7, #24]
   2b5c4:	2232      	movs	r2, #50	; 0x32
   2b5c6:	211a      	movs	r1, #26
   2b5c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2b5ca:	697b      	ldr	r3, [r7, #20]
   2b5cc:	2202      	movs	r2, #2
   2b5ce:	835a      	strh	r2, [r3, #26]
   2b5d0:	e036      	b.n	2b640 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2b5d2:	231f      	movs	r3, #31
   2b5d4:	18fb      	adds	r3, r7, r3
   2b5d6:	781b      	ldrb	r3, [r3, #0]
   2b5d8:	2204      	movs	r2, #4
   2b5da:	4013      	ands	r3, r2
   2b5dc:	d007      	beq.n	2b5ee <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2b5de:	69bb      	ldr	r3, [r7, #24]
   2b5e0:	2232      	movs	r2, #50	; 0x32
   2b5e2:	211e      	movs	r1, #30
   2b5e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2b5e6:	697b      	ldr	r3, [r7, #20]
   2b5e8:	2204      	movs	r2, #4
   2b5ea:	835a      	strh	r2, [r3, #26]
   2b5ec:	e028      	b.n	2b640 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2b5ee:	231f      	movs	r3, #31
   2b5f0:	18fb      	adds	r3, r7, r3
   2b5f2:	781b      	ldrb	r3, [r3, #0]
   2b5f4:	2201      	movs	r2, #1
   2b5f6:	4013      	ands	r3, r2
   2b5f8:	d007      	beq.n	2b60a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2b5fa:	69bb      	ldr	r3, [r7, #24]
   2b5fc:	2232      	movs	r2, #50	; 0x32
   2b5fe:	2113      	movs	r1, #19
   2b600:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2b602:	697b      	ldr	r3, [r7, #20]
   2b604:	2201      	movs	r2, #1
   2b606:	835a      	strh	r2, [r3, #26]
   2b608:	e01a      	b.n	2b640 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2b60a:	231f      	movs	r3, #31
   2b60c:	18fb      	adds	r3, r7, r3
   2b60e:	781b      	ldrb	r3, [r3, #0]
   2b610:	2210      	movs	r2, #16
   2b612:	4013      	ands	r3, r2
   2b614:	d007      	beq.n	2b626 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2b616:	69bb      	ldr	r3, [r7, #24]
   2b618:	2232      	movs	r2, #50	; 0x32
   2b61a:	2142      	movs	r1, #66	; 0x42
   2b61c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2b61e:	697b      	ldr	r3, [r7, #20]
   2b620:	2210      	movs	r2, #16
   2b622:	835a      	strh	r2, [r3, #26]
   2b624:	e00c      	b.n	2b640 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2b626:	231f      	movs	r3, #31
   2b628:	18fb      	adds	r3, r7, r3
   2b62a:	781b      	ldrb	r3, [r3, #0]
   2b62c:	2220      	movs	r2, #32
   2b62e:	4013      	ands	r3, r2
   2b630:	d006      	beq.n	2b640 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2b632:	69bb      	ldr	r3, [r7, #24]
   2b634:	2232      	movs	r2, #50	; 0x32
   2b636:	2141      	movs	r1, #65	; 0x41
   2b638:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2b63a:	697b      	ldr	r3, [r7, #20]
   2b63c:	2220      	movs	r2, #32
   2b63e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2b640:	2310      	movs	r3, #16
   2b642:	18fb      	adds	r3, r7, r3
   2b644:	881b      	ldrh	r3, [r3, #0]
   2b646:	2204      	movs	r2, #4
   2b648:	4013      	ands	r3, r2
				if (callback_status
   2b64a:	d050      	beq.n	2b6ee <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2b64c:	69bb      	ldr	r3, [r7, #24]
   2b64e:	695b      	ldr	r3, [r3, #20]
   2b650:	69ba      	ldr	r2, [r7, #24]
   2b652:	0010      	movs	r0, r2
   2b654:	4798      	blx	r3
   2b656:	e04a      	b.n	2b6ee <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2b658:	697b      	ldr	r3, [r7, #20]
   2b65a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2b65c:	b29a      	uxth	r2, r3
   2b65e:	230e      	movs	r3, #14
   2b660:	18fb      	adds	r3, r7, r3
   2b662:	05d2      	lsls	r2, r2, #23
   2b664:	0dd2      	lsrs	r2, r2, #23
   2b666:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2b668:	69bb      	ldr	r3, [r7, #24]
   2b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b66c:	220e      	movs	r2, #14
   2b66e:	18ba      	adds	r2, r7, r2
   2b670:	8812      	ldrh	r2, [r2, #0]
   2b672:	b2d2      	uxtb	r2, r2
   2b674:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2b676:	69bb      	ldr	r3, [r7, #24]
   2b678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b67a:	1c5a      	adds	r2, r3, #1
   2b67c:	69bb      	ldr	r3, [r7, #24]
   2b67e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2b680:	69bb      	ldr	r3, [r7, #24]
   2b682:	795b      	ldrb	r3, [r3, #5]
   2b684:	2b01      	cmp	r3, #1
   2b686:	d10d      	bne.n	2b6a4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2b688:	69bb      	ldr	r3, [r7, #24]
   2b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b68c:	220e      	movs	r2, #14
   2b68e:	18ba      	adds	r2, r7, r2
   2b690:	8812      	ldrh	r2, [r2, #0]
   2b692:	0a12      	lsrs	r2, r2, #8
   2b694:	b292      	uxth	r2, r2
   2b696:	b2d2      	uxtb	r2, r2
   2b698:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2b69a:	69bb      	ldr	r3, [r7, #24]
   2b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b69e:	1c5a      	adds	r2, r3, #1
   2b6a0:	69bb      	ldr	r3, [r7, #24]
   2b6a2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2b6a4:	69bb      	ldr	r3, [r7, #24]
   2b6a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b6a8:	b29b      	uxth	r3, r3
   2b6aa:	3b01      	subs	r3, #1
   2b6ac:	b29b      	uxth	r3, r3
   2b6ae:	69ba      	ldr	r2, [r7, #24]
   2b6b0:	1c19      	adds	r1, r3, #0
   2b6b2:	8591      	strh	r1, [r2, #44]	; 0x2c
   2b6b4:	2b00      	cmp	r3, #0
   2b6b6:	d11a      	bne.n	2b6ee <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b6b8:	697b      	ldr	r3, [r7, #20]
   2b6ba:	2204      	movs	r2, #4
   2b6bc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2b6be:	69bb      	ldr	r3, [r7, #24]
   2b6c0:	2232      	movs	r2, #50	; 0x32
   2b6c2:	2100      	movs	r1, #0
   2b6c4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2b6c6:	2310      	movs	r3, #16
   2b6c8:	18fb      	adds	r3, r7, r3
   2b6ca:	881b      	ldrh	r3, [r3, #0]
   2b6cc:	2202      	movs	r2, #2
   2b6ce:	4013      	ands	r3, r2
					if (callback_status
   2b6d0:	d00d      	beq.n	2b6ee <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2b6d2:	69bb      	ldr	r3, [r7, #24]
   2b6d4:	691b      	ldr	r3, [r3, #16]
   2b6d6:	69ba      	ldr	r2, [r7, #24]
   2b6d8:	0010      	movs	r0, r2
   2b6da:	4798      	blx	r3
   2b6dc:	e007      	b.n	2b6ee <_usart_interrupt_handler+0x2ae>
   2b6de:	46c0      	nop			; (mov r8, r8)
   2b6e0:	20005a84 	.word	0x20005a84
   2b6e4:	0002b221 	.word	0x0002b221
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b6e8:	697b      	ldr	r3, [r7, #20]
   2b6ea:	2204      	movs	r2, #4
   2b6ec:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2b6ee:	2312      	movs	r3, #18
   2b6f0:	18fb      	adds	r3, r7, r3
   2b6f2:	881b      	ldrh	r3, [r3, #0]
   2b6f4:	2210      	movs	r2, #16
   2b6f6:	4013      	ands	r3, r2
   2b6f8:	d010      	beq.n	2b71c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2b6fa:	697b      	ldr	r3, [r7, #20]
   2b6fc:	2210      	movs	r2, #16
   2b6fe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2b700:	697b      	ldr	r3, [r7, #20]
   2b702:	2210      	movs	r2, #16
   2b704:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2b706:	2310      	movs	r3, #16
   2b708:	18fb      	adds	r3, r7, r3
   2b70a:	881b      	ldrh	r3, [r3, #0]
   2b70c:	2210      	movs	r2, #16
   2b70e:	4013      	ands	r3, r2
   2b710:	d004      	beq.n	2b71c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2b712:	69bb      	ldr	r3, [r7, #24]
   2b714:	69db      	ldr	r3, [r3, #28]
   2b716:	69ba      	ldr	r2, [r7, #24]
   2b718:	0010      	movs	r0, r2
   2b71a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2b71c:	2312      	movs	r3, #18
   2b71e:	18fb      	adds	r3, r7, r3
   2b720:	881b      	ldrh	r3, [r3, #0]
   2b722:	2220      	movs	r2, #32
   2b724:	4013      	ands	r3, r2
   2b726:	d010      	beq.n	2b74a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2b728:	697b      	ldr	r3, [r7, #20]
   2b72a:	2220      	movs	r2, #32
   2b72c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b72e:	697b      	ldr	r3, [r7, #20]
   2b730:	2220      	movs	r2, #32
   2b732:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2b734:	2310      	movs	r3, #16
   2b736:	18fb      	adds	r3, r7, r3
   2b738:	881b      	ldrh	r3, [r3, #0]
   2b73a:	2208      	movs	r2, #8
   2b73c:	4013      	ands	r3, r2
   2b73e:	d004      	beq.n	2b74a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2b740:	69bb      	ldr	r3, [r7, #24]
   2b742:	699b      	ldr	r3, [r3, #24]
   2b744:	69ba      	ldr	r2, [r7, #24]
   2b746:	0010      	movs	r0, r2
   2b748:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2b74a:	2312      	movs	r3, #18
   2b74c:	18fb      	adds	r3, r7, r3
   2b74e:	881b      	ldrh	r3, [r3, #0]
   2b750:	2208      	movs	r2, #8
   2b752:	4013      	ands	r3, r2
   2b754:	d010      	beq.n	2b778 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2b756:	697b      	ldr	r3, [r7, #20]
   2b758:	2208      	movs	r2, #8
   2b75a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2b75c:	697b      	ldr	r3, [r7, #20]
   2b75e:	2208      	movs	r2, #8
   2b760:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2b762:	2310      	movs	r3, #16
   2b764:	18fb      	adds	r3, r7, r3
   2b766:	881b      	ldrh	r3, [r3, #0]
   2b768:	2220      	movs	r2, #32
   2b76a:	4013      	ands	r3, r2
   2b76c:	d004      	beq.n	2b778 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2b76e:	69bb      	ldr	r3, [r7, #24]
   2b770:	6a1b      	ldr	r3, [r3, #32]
   2b772:	69ba      	ldr	r2, [r7, #24]
   2b774:	0010      	movs	r0, r2
   2b776:	4798      	blx	r3
		}
	}
#endif
}
   2b778:	46c0      	nop			; (mov r8, r8)
   2b77a:	46bd      	mov	sp, r7
   2b77c:	b008      	add	sp, #32
   2b77e:	bd80      	pop	{r7, pc}

0002b780 <system_gclk_gen_get_config_defaults>:
{
   2b780:	b580      	push	{r7, lr}
   2b782:	b082      	sub	sp, #8
   2b784:	af00      	add	r7, sp, #0
   2b786:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2b788:	687b      	ldr	r3, [r7, #4]
   2b78a:	2201      	movs	r2, #1
   2b78c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2b78e:	687b      	ldr	r3, [r7, #4]
   2b790:	2200      	movs	r2, #0
   2b792:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2b794:	687b      	ldr	r3, [r7, #4]
   2b796:	2206      	movs	r2, #6
   2b798:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2b79a:	687b      	ldr	r3, [r7, #4]
   2b79c:	2200      	movs	r2, #0
   2b79e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2b7a0:	687b      	ldr	r3, [r7, #4]
   2b7a2:	2200      	movs	r2, #0
   2b7a4:	725a      	strb	r2, [r3, #9]
}
   2b7a6:	46c0      	nop			; (mov r8, r8)
   2b7a8:	46bd      	mov	sp, r7
   2b7aa:	b002      	add	sp, #8
   2b7ac:	bd80      	pop	{r7, pc}

0002b7ae <system_gclk_chan_get_config_defaults>:
{
   2b7ae:	b580      	push	{r7, lr}
   2b7b0:	b082      	sub	sp, #8
   2b7b2:	af00      	add	r7, sp, #0
   2b7b4:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b7b6:	687b      	ldr	r3, [r7, #4]
   2b7b8:	2200      	movs	r2, #0
   2b7ba:	701a      	strb	r2, [r3, #0]
}
   2b7bc:	46c0      	nop			; (mov r8, r8)
   2b7be:	46bd      	mov	sp, r7
   2b7c0:	b002      	add	sp, #8
   2b7c2:	bd80      	pop	{r7, pc}

0002b7c4 <system_clock_source_osc8m_get_config_defaults>:
{
   2b7c4:	b580      	push	{r7, lr}
   2b7c6:	b082      	sub	sp, #8
   2b7c8:	af00      	add	r7, sp, #0
   2b7ca:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2b7cc:	687b      	ldr	r3, [r7, #4]
   2b7ce:	2203      	movs	r2, #3
   2b7d0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2b7d2:	687b      	ldr	r3, [r7, #4]
   2b7d4:	2200      	movs	r2, #0
   2b7d6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2b7d8:	687b      	ldr	r3, [r7, #4]
   2b7da:	2201      	movs	r2, #1
   2b7dc:	709a      	strb	r2, [r3, #2]
}
   2b7de:	46c0      	nop			; (mov r8, r8)
   2b7e0:	46bd      	mov	sp, r7
   2b7e2:	b002      	add	sp, #8
   2b7e4:	bd80      	pop	{r7, pc}
	...

0002b7e8 <system_cpu_clock_set_divider>:
{
   2b7e8:	b580      	push	{r7, lr}
   2b7ea:	b082      	sub	sp, #8
   2b7ec:	af00      	add	r7, sp, #0
   2b7ee:	0002      	movs	r2, r0
   2b7f0:	1dfb      	adds	r3, r7, #7
   2b7f2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2b7f4:	4a03      	ldr	r2, [pc, #12]	; (2b804 <system_cpu_clock_set_divider+0x1c>)
   2b7f6:	1dfb      	adds	r3, r7, #7
   2b7f8:	781b      	ldrb	r3, [r3, #0]
   2b7fa:	7213      	strb	r3, [r2, #8]
}
   2b7fc:	46c0      	nop			; (mov r8, r8)
   2b7fe:	46bd      	mov	sp, r7
   2b800:	b002      	add	sp, #8
   2b802:	bd80      	pop	{r7, pc}
   2b804:	40000400 	.word	0x40000400

0002b808 <system_apb_clock_set_divider>:
{
   2b808:	b580      	push	{r7, lr}
   2b80a:	b082      	sub	sp, #8
   2b80c:	af00      	add	r7, sp, #0
   2b80e:	0002      	movs	r2, r0
   2b810:	1dfb      	adds	r3, r7, #7
   2b812:	701a      	strb	r2, [r3, #0]
   2b814:	1dbb      	adds	r3, r7, #6
   2b816:	1c0a      	adds	r2, r1, #0
   2b818:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b81a:	1dfb      	adds	r3, r7, #7
   2b81c:	781b      	ldrb	r3, [r3, #0]
   2b81e:	2b01      	cmp	r3, #1
   2b820:	d008      	beq.n	2b834 <system_apb_clock_set_divider+0x2c>
   2b822:	2b02      	cmp	r3, #2
   2b824:	d00b      	beq.n	2b83e <system_apb_clock_set_divider+0x36>
   2b826:	2b00      	cmp	r3, #0
   2b828:	d10e      	bne.n	2b848 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2b82a:	4a0b      	ldr	r2, [pc, #44]	; (2b858 <system_apb_clock_set_divider+0x50>)
   2b82c:	1dbb      	adds	r3, r7, #6
   2b82e:	781b      	ldrb	r3, [r3, #0]
   2b830:	7253      	strb	r3, [r2, #9]
			break;
   2b832:	e00b      	b.n	2b84c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2b834:	4a08      	ldr	r2, [pc, #32]	; (2b858 <system_apb_clock_set_divider+0x50>)
   2b836:	1dbb      	adds	r3, r7, #6
   2b838:	781b      	ldrb	r3, [r3, #0]
   2b83a:	7293      	strb	r3, [r2, #10]
			break;
   2b83c:	e006      	b.n	2b84c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2b83e:	4a06      	ldr	r2, [pc, #24]	; (2b858 <system_apb_clock_set_divider+0x50>)
   2b840:	1dbb      	adds	r3, r7, #6
   2b842:	781b      	ldrb	r3, [r3, #0]
   2b844:	72d3      	strb	r3, [r2, #11]
			break;
   2b846:	e001      	b.n	2b84c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2b848:	2317      	movs	r3, #23
   2b84a:	e000      	b.n	2b84e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2b84c:	2300      	movs	r3, #0
}
   2b84e:	0018      	movs	r0, r3
   2b850:	46bd      	mov	sp, r7
   2b852:	b002      	add	sp, #8
   2b854:	bd80      	pop	{r7, pc}
   2b856:	46c0      	nop			; (mov r8, r8)
   2b858:	40000400 	.word	0x40000400

0002b85c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2b85c:	b580      	push	{r7, lr}
   2b85e:	b082      	sub	sp, #8
   2b860:	af00      	add	r7, sp, #0
   2b862:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2b864:	687b      	ldr	r3, [r7, #4]
   2b866:	2201      	movs	r2, #1
   2b868:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2b86a:	687b      	ldr	r3, [r7, #4]
   2b86c:	2200      	movs	r2, #0
   2b86e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2b870:	687b      	ldr	r3, [r7, #4]
   2b872:	2200      	movs	r2, #0
   2b874:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2b876:	687b      	ldr	r3, [r7, #4]
   2b878:	2200      	movs	r2, #0
   2b87a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2b87c:	687b      	ldr	r3, [r7, #4]
   2b87e:	2200      	movs	r2, #0
   2b880:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2b882:	687b      	ldr	r3, [r7, #4]
   2b884:	4a0a      	ldr	r2, [pc, #40]	; (2b8b0 <system_clock_source_dpll_get_config_defaults+0x54>)
   2b886:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2b888:	687b      	ldr	r3, [r7, #4]
   2b88a:	2280      	movs	r2, #128	; 0x80
   2b88c:	0212      	lsls	r2, r2, #8
   2b88e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2b890:	687b      	ldr	r3, [r7, #4]
   2b892:	2201      	movs	r2, #1
   2b894:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2b896:	687b      	ldr	r3, [r7, #4]
   2b898:	2200      	movs	r2, #0
   2b89a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2b89c:	687b      	ldr	r3, [r7, #4]
   2b89e:	2200      	movs	r2, #0
   2b8a0:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2b8a2:	687b      	ldr	r3, [r7, #4]
   2b8a4:	2200      	movs	r2, #0
   2b8a6:	749a      	strb	r2, [r3, #18]
};
   2b8a8:	46c0      	nop			; (mov r8, r8)
   2b8aa:	46bd      	mov	sp, r7
   2b8ac:	b002      	add	sp, #8
   2b8ae:	bd80      	pop	{r7, pc}
   2b8b0:	02dc6c00 	.word	0x02dc6c00

0002b8b4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2b8b4:	b580      	push	{r7, lr}
   2b8b6:	b082      	sub	sp, #8
   2b8b8:	af00      	add	r7, sp, #0
   2b8ba:	0002      	movs	r2, r0
   2b8bc:	1dfb      	adds	r3, r7, #7
   2b8be:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2b8c0:	4a08      	ldr	r2, [pc, #32]	; (2b8e4 <system_flash_set_waitstates+0x30>)
   2b8c2:	1dfb      	adds	r3, r7, #7
   2b8c4:	781b      	ldrb	r3, [r3, #0]
   2b8c6:	210f      	movs	r1, #15
   2b8c8:	400b      	ands	r3, r1
   2b8ca:	b2d9      	uxtb	r1, r3
   2b8cc:	6853      	ldr	r3, [r2, #4]
   2b8ce:	200f      	movs	r0, #15
   2b8d0:	4001      	ands	r1, r0
   2b8d2:	0049      	lsls	r1, r1, #1
   2b8d4:	201e      	movs	r0, #30
   2b8d6:	4383      	bics	r3, r0
   2b8d8:	430b      	orrs	r3, r1
   2b8da:	6053      	str	r3, [r2, #4]
}
   2b8dc:	46c0      	nop			; (mov r8, r8)
   2b8de:	46bd      	mov	sp, r7
   2b8e0:	b002      	add	sp, #8
   2b8e2:	bd80      	pop	{r7, pc}
   2b8e4:	41004000 	.word	0x41004000

0002b8e8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2b8e8:	b580      	push	{r7, lr}
   2b8ea:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2b8ec:	46c0      	nop			; (mov r8, r8)
   2b8ee:	4b04      	ldr	r3, [pc, #16]	; (2b900 <_system_dfll_wait_for_sync+0x18>)
   2b8f0:	68db      	ldr	r3, [r3, #12]
   2b8f2:	2210      	movs	r2, #16
   2b8f4:	4013      	ands	r3, r2
   2b8f6:	d0fa      	beq.n	2b8ee <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2b8f8:	46c0      	nop			; (mov r8, r8)
   2b8fa:	46bd      	mov	sp, r7
   2b8fc:	bd80      	pop	{r7, pc}
   2b8fe:	46c0      	nop			; (mov r8, r8)
   2b900:	40000800 	.word	0x40000800

0002b904 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2b904:	b580      	push	{r7, lr}
   2b906:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2b908:	4b0c      	ldr	r3, [pc, #48]	; (2b93c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b90a:	2202      	movs	r2, #2
   2b90c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b90e:	4b0c      	ldr	r3, [pc, #48]	; (2b940 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b910:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2b912:	4a0a      	ldr	r2, [pc, #40]	; (2b93c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b914:	4b0b      	ldr	r3, [pc, #44]	; (2b944 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b916:	689b      	ldr	r3, [r3, #8]
   2b918:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2b91a:	4a08      	ldr	r2, [pc, #32]	; (2b93c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b91c:	4b09      	ldr	r3, [pc, #36]	; (2b944 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b91e:	685b      	ldr	r3, [r3, #4]
   2b920:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2b922:	4b06      	ldr	r3, [pc, #24]	; (2b93c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b924:	2200      	movs	r2, #0
   2b926:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b928:	4b05      	ldr	r3, [pc, #20]	; (2b940 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b92a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2b92c:	4a03      	ldr	r2, [pc, #12]	; (2b93c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b92e:	4b05      	ldr	r3, [pc, #20]	; (2b944 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b930:	681b      	ldr	r3, [r3, #0]
   2b932:	b29b      	uxth	r3, r3
   2b934:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2b936:	46c0      	nop			; (mov r8, r8)
   2b938:	46bd      	mov	sp, r7
   2b93a:	bd80      	pop	{r7, pc}
   2b93c:	40000800 	.word	0x40000800
   2b940:	0002b8e9 	.word	0x0002b8e9
   2b944:	20004150 	.word	0x20004150

0002b948 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2b948:	b580      	push	{r7, lr}
   2b94a:	b082      	sub	sp, #8
   2b94c:	af00      	add	r7, sp, #0
   2b94e:	0002      	movs	r2, r0
   2b950:	1dfb      	adds	r3, r7, #7
   2b952:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2b954:	1dfb      	adds	r3, r7, #7
   2b956:	781b      	ldrb	r3, [r3, #0]
   2b958:	2b08      	cmp	r3, #8
   2b95a:	d841      	bhi.n	2b9e0 <system_clock_source_get_hz+0x98>
   2b95c:	009a      	lsls	r2, r3, #2
   2b95e:	4b23      	ldr	r3, [pc, #140]	; (2b9ec <system_clock_source_get_hz+0xa4>)
   2b960:	18d3      	adds	r3, r2, r3
   2b962:	681b      	ldr	r3, [r3, #0]
   2b964:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2b966:	4b22      	ldr	r3, [pc, #136]	; (2b9f0 <system_clock_source_get_hz+0xa8>)
   2b968:	691b      	ldr	r3, [r3, #16]
   2b96a:	e03a      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2b96c:	4b21      	ldr	r3, [pc, #132]	; (2b9f4 <system_clock_source_get_hz+0xac>)
   2b96e:	6a1b      	ldr	r3, [r3, #32]
   2b970:	059b      	lsls	r3, r3, #22
   2b972:	0f9b      	lsrs	r3, r3, #30
   2b974:	b2db      	uxtb	r3, r3
   2b976:	001a      	movs	r2, r3
   2b978:	4b1f      	ldr	r3, [pc, #124]	; (2b9f8 <system_clock_source_get_hz+0xb0>)
   2b97a:	40d3      	lsrs	r3, r2
   2b97c:	e031      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2b97e:	2380      	movs	r3, #128	; 0x80
   2b980:	021b      	lsls	r3, r3, #8
   2b982:	e02e      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2b984:	2380      	movs	r3, #128	; 0x80
   2b986:	021b      	lsls	r3, r3, #8
   2b988:	e02b      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2b98a:	4b19      	ldr	r3, [pc, #100]	; (2b9f0 <system_clock_source_get_hz+0xa8>)
   2b98c:	695b      	ldr	r3, [r3, #20]
   2b98e:	e028      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2b990:	4b17      	ldr	r3, [pc, #92]	; (2b9f0 <system_clock_source_get_hz+0xa8>)
   2b992:	681b      	ldr	r3, [r3, #0]
   2b994:	2202      	movs	r2, #2
   2b996:	4013      	ands	r3, r2
   2b998:	d101      	bne.n	2b99e <system_clock_source_get_hz+0x56>
			return 0;
   2b99a:	2300      	movs	r3, #0
   2b99c:	e021      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2b99e:	4b17      	ldr	r3, [pc, #92]	; (2b9fc <system_clock_source_get_hz+0xb4>)
   2b9a0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2b9a2:	4b13      	ldr	r3, [pc, #76]	; (2b9f0 <system_clock_source_get_hz+0xa8>)
   2b9a4:	681b      	ldr	r3, [r3, #0]
   2b9a6:	2224      	movs	r2, #36	; 0x24
   2b9a8:	4013      	ands	r3, r2
   2b9aa:	2b04      	cmp	r3, #4
   2b9ac:	d109      	bne.n	2b9c2 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b9ae:	2000      	movs	r0, #0
   2b9b0:	4b13      	ldr	r3, [pc, #76]	; (2ba00 <system_clock_source_get_hz+0xb8>)
   2b9b2:	4798      	blx	r3
   2b9b4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2b9b6:	4b0e      	ldr	r3, [pc, #56]	; (2b9f0 <system_clock_source_get_hz+0xa8>)
   2b9b8:	689b      	ldr	r3, [r3, #8]
   2b9ba:	041b      	lsls	r3, r3, #16
   2b9bc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b9be:	4353      	muls	r3, r2
   2b9c0:	e00f      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2b9c2:	4b10      	ldr	r3, [pc, #64]	; (2ba04 <system_clock_source_get_hz+0xbc>)
   2b9c4:	e00d      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2b9c6:	4a0b      	ldr	r2, [pc, #44]	; (2b9f4 <system_clock_source_get_hz+0xac>)
   2b9c8:	2350      	movs	r3, #80	; 0x50
   2b9ca:	5cd3      	ldrb	r3, [r2, r3]
   2b9cc:	b2db      	uxtb	r3, r3
   2b9ce:	001a      	movs	r2, r3
   2b9d0:	2304      	movs	r3, #4
   2b9d2:	4013      	ands	r3, r2
   2b9d4:	d101      	bne.n	2b9da <system_clock_source_get_hz+0x92>
			return 0;
   2b9d6:	2300      	movs	r3, #0
   2b9d8:	e003      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2b9da:	4b05      	ldr	r3, [pc, #20]	; (2b9f0 <system_clock_source_get_hz+0xa8>)
   2b9dc:	68db      	ldr	r3, [r3, #12]
   2b9de:	e000      	b.n	2b9e2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2b9e0:	2300      	movs	r3, #0
	}
}
   2b9e2:	0018      	movs	r0, r3
   2b9e4:	46bd      	mov	sp, r7
   2b9e6:	b002      	add	sp, #8
   2b9e8:	bd80      	pop	{r7, pc}
   2b9ea:	46c0      	nop			; (mov r8, r8)
   2b9ec:	0003c7e0 	.word	0x0003c7e0
   2b9f0:	20004150 	.word	0x20004150
   2b9f4:	40000800 	.word	0x40000800
   2b9f8:	007a1200 	.word	0x007a1200
   2b9fc:	0002b8e9 	.word	0x0002b8e9
   2ba00:	0002c3e5 	.word	0x0002c3e5
   2ba04:	02dc6c00 	.word	0x02dc6c00

0002ba08 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2ba08:	b580      	push	{r7, lr}
   2ba0a:	b084      	sub	sp, #16
   2ba0c:	af00      	add	r7, sp, #0
   2ba0e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2ba10:	4b1a      	ldr	r3, [pc, #104]	; (2ba7c <system_clock_source_osc8m_set_config+0x74>)
   2ba12:	6a1b      	ldr	r3, [r3, #32]
   2ba14:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2ba16:	687b      	ldr	r3, [r7, #4]
   2ba18:	781b      	ldrb	r3, [r3, #0]
   2ba1a:	1c1a      	adds	r2, r3, #0
   2ba1c:	2303      	movs	r3, #3
   2ba1e:	4013      	ands	r3, r2
   2ba20:	b2da      	uxtb	r2, r3
   2ba22:	230d      	movs	r3, #13
   2ba24:	18fb      	adds	r3, r7, r3
   2ba26:	2103      	movs	r1, #3
   2ba28:	400a      	ands	r2, r1
   2ba2a:	0010      	movs	r0, r2
   2ba2c:	781a      	ldrb	r2, [r3, #0]
   2ba2e:	2103      	movs	r1, #3
   2ba30:	438a      	bics	r2, r1
   2ba32:	1c11      	adds	r1, r2, #0
   2ba34:	1c02      	adds	r2, r0, #0
   2ba36:	430a      	orrs	r2, r1
   2ba38:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2ba3a:	687b      	ldr	r3, [r7, #4]
   2ba3c:	789a      	ldrb	r2, [r3, #2]
   2ba3e:	230c      	movs	r3, #12
   2ba40:	18fb      	adds	r3, r7, r3
   2ba42:	01d0      	lsls	r0, r2, #7
   2ba44:	781a      	ldrb	r2, [r3, #0]
   2ba46:	217f      	movs	r1, #127	; 0x7f
   2ba48:	400a      	ands	r2, r1
   2ba4a:	1c11      	adds	r1, r2, #0
   2ba4c:	1c02      	adds	r2, r0, #0
   2ba4e:	430a      	orrs	r2, r1
   2ba50:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2ba52:	687b      	ldr	r3, [r7, #4]
   2ba54:	785a      	ldrb	r2, [r3, #1]
   2ba56:	230c      	movs	r3, #12
   2ba58:	18fb      	adds	r3, r7, r3
   2ba5a:	2101      	movs	r1, #1
   2ba5c:	400a      	ands	r2, r1
   2ba5e:	0190      	lsls	r0, r2, #6
   2ba60:	781a      	ldrb	r2, [r3, #0]
   2ba62:	2140      	movs	r1, #64	; 0x40
   2ba64:	438a      	bics	r2, r1
   2ba66:	1c11      	adds	r1, r2, #0
   2ba68:	1c02      	adds	r2, r0, #0
   2ba6a:	430a      	orrs	r2, r1
   2ba6c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2ba6e:	4b03      	ldr	r3, [pc, #12]	; (2ba7c <system_clock_source_osc8m_set_config+0x74>)
   2ba70:	68fa      	ldr	r2, [r7, #12]
   2ba72:	621a      	str	r2, [r3, #32]
}
   2ba74:	46c0      	nop			; (mov r8, r8)
   2ba76:	46bd      	mov	sp, r7
   2ba78:	b004      	add	sp, #16
   2ba7a:	bd80      	pop	{r7, pc}
   2ba7c:	40000800 	.word	0x40000800

0002ba80 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2ba80:	b580      	push	{r7, lr}
   2ba82:	b086      	sub	sp, #24
   2ba84:	af00      	add	r7, sp, #0
   2ba86:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2ba88:	687b      	ldr	r3, [r7, #4]
   2ba8a:	68db      	ldr	r3, [r3, #12]
   2ba8c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2ba8e:	687b      	ldr	r3, [r7, #4]
   2ba90:	7d1b      	ldrb	r3, [r3, #20]
   2ba92:	2b01      	cmp	r3, #1
   2ba94:	d10a      	bne.n	2baac <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2ba96:	687b      	ldr	r3, [r7, #4]
   2ba98:	8a1b      	ldrh	r3, [r3, #16]
   2ba9a:	3301      	adds	r3, #1
   2ba9c:	005b      	lsls	r3, r3, #1
   2ba9e:	001a      	movs	r2, r3
   2baa0:	4b36      	ldr	r3, [pc, #216]	; (2bb7c <system_clock_source_dpll_set_config+0xfc>)
   2baa2:	0011      	movs	r1, r2
   2baa4:	6978      	ldr	r0, [r7, #20]
   2baa6:	4798      	blx	r3
   2baa8:	0003      	movs	r3, r0
   2baaa:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2baac:	687b      	ldr	r3, [r7, #4]
   2baae:	689b      	ldr	r3, [r3, #8]
   2bab0:	011a      	lsls	r2, r3, #4
   2bab2:	4b32      	ldr	r3, [pc, #200]	; (2bb7c <system_clock_source_dpll_set_config+0xfc>)
   2bab4:	6979      	ldr	r1, [r7, #20]
   2bab6:	0010      	movs	r0, r2
   2bab8:	4798      	blx	r3
   2baba:	0003      	movs	r3, r0
   2babc:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2babe:	693b      	ldr	r3, [r7, #16]
   2bac0:	b2da      	uxtb	r2, r3
   2bac2:	230f      	movs	r3, #15
   2bac4:	18fb      	adds	r3, r7, r3
   2bac6:	210f      	movs	r1, #15
   2bac8:	400a      	ands	r2, r1
   2baca:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2bacc:	693b      	ldr	r3, [r7, #16]
   2bace:	091b      	lsrs	r3, r3, #4
   2bad0:	3b01      	subs	r3, #1
   2bad2:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2bad4:	492a      	ldr	r1, [pc, #168]	; (2bb80 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2bad6:	687b      	ldr	r3, [r7, #4]
   2bad8:	781b      	ldrb	r3, [r3, #0]
   2bada:	01db      	lsls	r3, r3, #7
   2badc:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2bade:	687b      	ldr	r3, [r7, #4]
   2bae0:	785b      	ldrb	r3, [r3, #1]
   2bae2:	019b      	lsls	r3, r3, #6
   2bae4:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2bae6:	4313      	orrs	r3, r2
   2bae8:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2baea:	2344      	movs	r3, #68	; 0x44
   2baec:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2baee:	4b24      	ldr	r3, [pc, #144]	; (2bb80 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2baf0:	220f      	movs	r2, #15
   2baf2:	18ba      	adds	r2, r7, r2
   2baf4:	7812      	ldrb	r2, [r2, #0]
   2baf6:	0412      	lsls	r2, r2, #16
   2baf8:	0011      	movs	r1, r2
   2bafa:	22f0      	movs	r2, #240	; 0xf0
   2bafc:	0312      	lsls	r2, r2, #12
   2bafe:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2bb00:	693a      	ldr	r2, [r7, #16]
   2bb02:	0512      	lsls	r2, r2, #20
   2bb04:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2bb06:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2bb08:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2bb0a:	4b1d      	ldr	r3, [pc, #116]	; (2bb80 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2bb0c:	687a      	ldr	r2, [r7, #4]
   2bb0e:	8a12      	ldrh	r2, [r2, #16]
   2bb10:	0412      	lsls	r2, r2, #16
   2bb12:	0011      	movs	r1, r2
   2bb14:	4a1b      	ldr	r2, [pc, #108]	; (2bb84 <system_clock_source_dpll_set_config+0x104>)
   2bb16:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2bb18:	687a      	ldr	r2, [r7, #4]
   2bb1a:	7892      	ldrb	r2, [r2, #2]
   2bb1c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2bb1e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2bb20:	687a      	ldr	r2, [r7, #4]
   2bb22:	7cd2      	ldrb	r2, [r2, #19]
   2bb24:	0212      	lsls	r2, r2, #8
   2bb26:	0010      	movs	r0, r2
   2bb28:	22e0      	movs	r2, #224	; 0xe0
   2bb2a:	00d2      	lsls	r2, r2, #3
   2bb2c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2bb2e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2bb30:	687a      	ldr	r2, [r7, #4]
   2bb32:	7d12      	ldrb	r2, [r2, #20]
   2bb34:	0112      	lsls	r2, r2, #4
   2bb36:	0010      	movs	r0, r2
   2bb38:	2230      	movs	r2, #48	; 0x30
   2bb3a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2bb3c:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2bb3e:	687a      	ldr	r2, [r7, #4]
   2bb40:	78d2      	ldrb	r2, [r2, #3]
   2bb42:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2bb44:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2bb46:	687a      	ldr	r2, [r7, #4]
   2bb48:	7912      	ldrb	r2, [r2, #4]
   2bb4a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2bb4c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2bb4e:	687a      	ldr	r2, [r7, #4]
   2bb50:	7c92      	ldrb	r2, [r2, #18]
   2bb52:	0010      	movs	r0, r2
   2bb54:	2203      	movs	r2, #3
   2bb56:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2bb58:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2bb5a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2bb5c:	693b      	ldr	r3, [r7, #16]
   2bb5e:	3301      	adds	r3, #1
   2bb60:	011a      	lsls	r2, r3, #4
   2bb62:	230f      	movs	r3, #15
   2bb64:	18fb      	adds	r3, r7, r3
   2bb66:	781b      	ldrb	r3, [r3, #0]
   2bb68:	18d3      	adds	r3, r2, r3
   2bb6a:	697a      	ldr	r2, [r7, #20]
   2bb6c:	4353      	muls	r3, r2
   2bb6e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2bb70:	4b05      	ldr	r3, [pc, #20]	; (2bb88 <system_clock_source_dpll_set_config+0x108>)
   2bb72:	60da      	str	r2, [r3, #12]
}
   2bb74:	46c0      	nop			; (mov r8, r8)
   2bb76:	46bd      	mov	sp, r7
   2bb78:	b006      	add	sp, #24
   2bb7a:	bd80      	pop	{r7, pc}
   2bb7c:	00034e35 	.word	0x00034e35
   2bb80:	40000800 	.word	0x40000800
   2bb84:	07ff0000 	.word	0x07ff0000
   2bb88:	20004150 	.word	0x20004150

0002bb8c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2bb8c:	b580      	push	{r7, lr}
   2bb8e:	b082      	sub	sp, #8
   2bb90:	af00      	add	r7, sp, #0
   2bb92:	0002      	movs	r2, r0
   2bb94:	1dfb      	adds	r3, r7, #7
   2bb96:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2bb98:	1dfb      	adds	r3, r7, #7
   2bb9a:	781b      	ldrb	r3, [r3, #0]
   2bb9c:	2b08      	cmp	r3, #8
   2bb9e:	d83b      	bhi.n	2bc18 <system_clock_source_enable+0x8c>
   2bba0:	009a      	lsls	r2, r3, #2
   2bba2:	4b21      	ldr	r3, [pc, #132]	; (2bc28 <system_clock_source_enable+0x9c>)
   2bba4:	18d3      	adds	r3, r2, r3
   2bba6:	681b      	ldr	r3, [r3, #0]
   2bba8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2bbaa:	4b20      	ldr	r3, [pc, #128]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbac:	4a1f      	ldr	r2, [pc, #124]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbae:	6a12      	ldr	r2, [r2, #32]
   2bbb0:	2102      	movs	r1, #2
   2bbb2:	430a      	orrs	r2, r1
   2bbb4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2bbb6:	2300      	movs	r3, #0
   2bbb8:	e031      	b.n	2bc1e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2bbba:	4b1c      	ldr	r3, [pc, #112]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbbc:	4a1b      	ldr	r2, [pc, #108]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbbe:	6992      	ldr	r2, [r2, #24]
   2bbc0:	2102      	movs	r1, #2
   2bbc2:	430a      	orrs	r2, r1
   2bbc4:	619a      	str	r2, [r3, #24]
		break;
   2bbc6:	e029      	b.n	2bc1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2bbc8:	4a18      	ldr	r2, [pc, #96]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbca:	4b18      	ldr	r3, [pc, #96]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbcc:	8a1b      	ldrh	r3, [r3, #16]
   2bbce:	b29b      	uxth	r3, r3
   2bbd0:	2102      	movs	r1, #2
   2bbd2:	430b      	orrs	r3, r1
   2bbd4:	b29b      	uxth	r3, r3
   2bbd6:	8213      	strh	r3, [r2, #16]
		break;
   2bbd8:	e020      	b.n	2bc1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2bbda:	4a14      	ldr	r2, [pc, #80]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbdc:	4b13      	ldr	r3, [pc, #76]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bbde:	8a9b      	ldrh	r3, [r3, #20]
   2bbe0:	b29b      	uxth	r3, r3
   2bbe2:	2102      	movs	r1, #2
   2bbe4:	430b      	orrs	r3, r1
   2bbe6:	b29b      	uxth	r3, r3
   2bbe8:	8293      	strh	r3, [r2, #20]
		break;
   2bbea:	e017      	b.n	2bc1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2bbec:	4b10      	ldr	r3, [pc, #64]	; (2bc30 <system_clock_source_enable+0xa4>)
   2bbee:	681b      	ldr	r3, [r3, #0]
   2bbf0:	2202      	movs	r2, #2
   2bbf2:	431a      	orrs	r2, r3
   2bbf4:	4b0e      	ldr	r3, [pc, #56]	; (2bc30 <system_clock_source_enable+0xa4>)
   2bbf6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2bbf8:	4b0e      	ldr	r3, [pc, #56]	; (2bc34 <system_clock_source_enable+0xa8>)
   2bbfa:	4798      	blx	r3
		break;
   2bbfc:	e00e      	b.n	2bc1c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2bbfe:	4a0b      	ldr	r2, [pc, #44]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bc00:	490a      	ldr	r1, [pc, #40]	; (2bc2c <system_clock_source_enable+0xa0>)
   2bc02:	2344      	movs	r3, #68	; 0x44
   2bc04:	5ccb      	ldrb	r3, [r1, r3]
   2bc06:	b2db      	uxtb	r3, r3
   2bc08:	2102      	movs	r1, #2
   2bc0a:	430b      	orrs	r3, r1
   2bc0c:	b2d9      	uxtb	r1, r3
   2bc0e:	2344      	movs	r3, #68	; 0x44
   2bc10:	54d1      	strb	r1, [r2, r3]
		break;
   2bc12:	e003      	b.n	2bc1c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2bc14:	2300      	movs	r3, #0
   2bc16:	e002      	b.n	2bc1e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2bc18:	2317      	movs	r3, #23
   2bc1a:	e000      	b.n	2bc1e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2bc1c:	2300      	movs	r3, #0
}
   2bc1e:	0018      	movs	r0, r3
   2bc20:	46bd      	mov	sp, r7
   2bc22:	b002      	add	sp, #8
   2bc24:	bd80      	pop	{r7, pc}
   2bc26:	46c0      	nop			; (mov r8, r8)
   2bc28:	0003c804 	.word	0x0003c804
   2bc2c:	40000800 	.word	0x40000800
   2bc30:	20004150 	.word	0x20004150
   2bc34:	0002b905 	.word	0x0002b905

0002bc38 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2bc38:	b580      	push	{r7, lr}
   2bc3a:	b084      	sub	sp, #16
   2bc3c:	af00      	add	r7, sp, #0
   2bc3e:	0002      	movs	r2, r0
   2bc40:	1dfb      	adds	r3, r7, #7
   2bc42:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2bc44:	2300      	movs	r3, #0
   2bc46:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2bc48:	1dfb      	adds	r3, r7, #7
   2bc4a:	781b      	ldrb	r3, [r3, #0]
   2bc4c:	2b08      	cmp	r3, #8
   2bc4e:	d821      	bhi.n	2bc94 <system_clock_source_is_ready+0x5c>
   2bc50:	009a      	lsls	r2, r3, #2
   2bc52:	4b18      	ldr	r3, [pc, #96]	; (2bcb4 <system_clock_source_is_ready+0x7c>)
   2bc54:	18d3      	adds	r3, r2, r3
   2bc56:	681b      	ldr	r3, [r3, #0]
   2bc58:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2bc5a:	2308      	movs	r3, #8
   2bc5c:	60fb      	str	r3, [r7, #12]
		break;
   2bc5e:	e01b      	b.n	2bc98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2bc60:	2304      	movs	r3, #4
   2bc62:	60fb      	str	r3, [r7, #12]
		break;
   2bc64:	e018      	b.n	2bc98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2bc66:	2301      	movs	r3, #1
   2bc68:	60fb      	str	r3, [r7, #12]
		break;
   2bc6a:	e015      	b.n	2bc98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2bc6c:	2302      	movs	r3, #2
   2bc6e:	60fb      	str	r3, [r7, #12]
		break;
   2bc70:	e012      	b.n	2bc98 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2bc72:	2310      	movs	r3, #16
   2bc74:	60fb      	str	r3, [r7, #12]
		}
		break;
   2bc76:	e00f      	b.n	2bc98 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2bc78:	4a0f      	ldr	r2, [pc, #60]	; (2bcb8 <system_clock_source_is_ready+0x80>)
   2bc7a:	2350      	movs	r3, #80	; 0x50
   2bc7c:	5cd3      	ldrb	r3, [r2, r3]
   2bc7e:	b2db      	uxtb	r3, r3
   2bc80:	001a      	movs	r2, r3
   2bc82:	2303      	movs	r3, #3
   2bc84:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2bc86:	3b03      	subs	r3, #3
   2bc88:	425a      	negs	r2, r3
   2bc8a:	4153      	adcs	r3, r2
   2bc8c:	b2db      	uxtb	r3, r3
   2bc8e:	e00c      	b.n	2bcaa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2bc90:	2301      	movs	r3, #1
   2bc92:	e00a      	b.n	2bcaa <system_clock_source_is_ready+0x72>

	default:
		return false;
   2bc94:	2300      	movs	r3, #0
   2bc96:	e008      	b.n	2bcaa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2bc98:	4b07      	ldr	r3, [pc, #28]	; (2bcb8 <system_clock_source_is_ready+0x80>)
   2bc9a:	68db      	ldr	r3, [r3, #12]
   2bc9c:	68fa      	ldr	r2, [r7, #12]
   2bc9e:	401a      	ands	r2, r3
   2bca0:	68fb      	ldr	r3, [r7, #12]
   2bca2:	1ad3      	subs	r3, r2, r3
   2bca4:	425a      	negs	r2, r3
   2bca6:	4153      	adcs	r3, r2
   2bca8:	b2db      	uxtb	r3, r3
}
   2bcaa:	0018      	movs	r0, r3
   2bcac:	46bd      	mov	sp, r7
   2bcae:	b004      	add	sp, #16
   2bcb0:	bd80      	pop	{r7, pc}
   2bcb2:	46c0      	nop			; (mov r8, r8)
   2bcb4:	0003c828 	.word	0x0003c828
   2bcb8:	40000800 	.word	0x40000800

0002bcbc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2bcbc:	b580      	push	{r7, lr}
   2bcbe:	b082      	sub	sp, #8
   2bcc0:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2bcc2:	003b      	movs	r3, r7
   2bcc4:	2203      	movs	r2, #3
   2bcc6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2bcc8:	2300      	movs	r3, #0
   2bcca:	607b      	str	r3, [r7, #4]
   2bccc:	e009      	b.n	2bce2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2bcce:	687b      	ldr	r3, [r7, #4]
   2bcd0:	b2db      	uxtb	r3, r3
   2bcd2:	003a      	movs	r2, r7
   2bcd4:	0011      	movs	r1, r2
   2bcd6:	0018      	movs	r0, r3
   2bcd8:	4b05      	ldr	r3, [pc, #20]	; (2bcf0 <_switch_peripheral_gclk+0x34>)
   2bcda:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2bcdc:	687b      	ldr	r3, [r7, #4]
   2bcde:	3301      	adds	r3, #1
   2bce0:	607b      	str	r3, [r7, #4]
   2bce2:	687b      	ldr	r3, [r7, #4]
   2bce4:	2b24      	cmp	r3, #36	; 0x24
   2bce6:	d9f2      	bls.n	2bcce <_switch_peripheral_gclk+0x12>
	}
}
   2bce8:	46c0      	nop			; (mov r8, r8)
   2bcea:	46bd      	mov	sp, r7
   2bcec:	b002      	add	sp, #8
   2bcee:	bd80      	pop	{r7, pc}
   2bcf0:	0002c2c1 	.word	0x0002c2c1

0002bcf4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2bcf4:	b580      	push	{r7, lr}
   2bcf6:	b0a6      	sub	sp, #152	; 0x98
   2bcf8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2bcfa:	4b92      	ldr	r3, [pc, #584]	; (2bf44 <system_clock_init+0x250>)
   2bcfc:	22c2      	movs	r2, #194	; 0xc2
   2bcfe:	00d2      	lsls	r2, r2, #3
   2bd00:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2bd02:	2003      	movs	r0, #3
   2bd04:	4b90      	ldr	r3, [pc, #576]	; (2bf48 <system_clock_init+0x254>)
   2bd06:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2bd08:	4b90      	ldr	r3, [pc, #576]	; (2bf4c <system_clock_init+0x258>)
   2bd0a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2bd0c:	2394      	movs	r3, #148	; 0x94
   2bd0e:	18fb      	adds	r3, r7, r3
   2bd10:	0018      	movs	r0, r3
   2bd12:	4b8f      	ldr	r3, [pc, #572]	; (2bf50 <system_clock_init+0x25c>)
   2bd14:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2bd16:	2394      	movs	r3, #148	; 0x94
   2bd18:	18fb      	adds	r3, r7, r3
   2bd1a:	2200      	movs	r2, #0
   2bd1c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2bd1e:	2394      	movs	r3, #148	; 0x94
   2bd20:	18fb      	adds	r3, r7, r3
   2bd22:	2201      	movs	r2, #1
   2bd24:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2bd26:	2394      	movs	r3, #148	; 0x94
   2bd28:	18fb      	adds	r3, r7, r3
   2bd2a:	2200      	movs	r2, #0
   2bd2c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2bd2e:	2394      	movs	r3, #148	; 0x94
   2bd30:	18fb      	adds	r3, r7, r3
   2bd32:	0018      	movs	r0, r3
   2bd34:	4b87      	ldr	r3, [pc, #540]	; (2bf54 <system_clock_init+0x260>)
   2bd36:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2bd38:	2006      	movs	r0, #6
   2bd3a:	4b87      	ldr	r3, [pc, #540]	; (2bf58 <system_clock_init+0x264>)
   2bd3c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2bd3e:	4b87      	ldr	r3, [pc, #540]	; (2bf5c <system_clock_init+0x268>)
   2bd40:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2bd42:	2360      	movs	r3, #96	; 0x60
   2bd44:	18fb      	adds	r3, r7, r3
   2bd46:	0018      	movs	r0, r3
   2bd48:	4b85      	ldr	r3, [pc, #532]	; (2bf60 <system_clock_init+0x26c>)
   2bd4a:	4798      	blx	r3
   2bd4c:	2360      	movs	r3, #96	; 0x60
   2bd4e:	18fb      	adds	r3, r7, r3
   2bd50:	2206      	movs	r2, #6
   2bd52:	701a      	strb	r2, [r3, #0]
   2bd54:	2360      	movs	r3, #96	; 0x60
   2bd56:	18fb      	adds	r3, r7, r3
   2bd58:	2208      	movs	r2, #8
   2bd5a:	605a      	str	r2, [r3, #4]
   2bd5c:	2360      	movs	r3, #96	; 0x60
   2bd5e:	18fb      	adds	r3, r7, r3
   2bd60:	2200      	movs	r2, #0
   2bd62:	721a      	strb	r2, [r3, #8]
   2bd64:	2360      	movs	r3, #96	; 0x60
   2bd66:	18fb      	adds	r3, r7, r3
   2bd68:	2200      	movs	r2, #0
   2bd6a:	725a      	strb	r2, [r3, #9]
   2bd6c:	2360      	movs	r3, #96	; 0x60
   2bd6e:	18fb      	adds	r3, r7, r3
   2bd70:	0019      	movs	r1, r3
   2bd72:	2001      	movs	r0, #1
   2bd74:	4b7b      	ldr	r3, [pc, #492]	; (2bf64 <system_clock_init+0x270>)
   2bd76:	4798      	blx	r3
   2bd78:	2001      	movs	r0, #1
   2bd7a:	4b7b      	ldr	r3, [pc, #492]	; (2bf68 <system_clock_init+0x274>)
   2bd7c:	4798      	blx	r3
   2bd7e:	2354      	movs	r3, #84	; 0x54
   2bd80:	18fb      	adds	r3, r7, r3
   2bd82:	0018      	movs	r0, r3
   2bd84:	4b76      	ldr	r3, [pc, #472]	; (2bf60 <system_clock_init+0x26c>)
   2bd86:	4798      	blx	r3
   2bd88:	2354      	movs	r3, #84	; 0x54
   2bd8a:	18fb      	adds	r3, r7, r3
   2bd8c:	2203      	movs	r2, #3
   2bd8e:	701a      	strb	r2, [r3, #0]
   2bd90:	2354      	movs	r3, #84	; 0x54
   2bd92:	18fb      	adds	r3, r7, r3
   2bd94:	2201      	movs	r2, #1
   2bd96:	605a      	str	r2, [r3, #4]
   2bd98:	2354      	movs	r3, #84	; 0x54
   2bd9a:	18fb      	adds	r3, r7, r3
   2bd9c:	2201      	movs	r2, #1
   2bd9e:	721a      	strb	r2, [r3, #8]
   2bda0:	2354      	movs	r3, #84	; 0x54
   2bda2:	18fb      	adds	r3, r7, r3
   2bda4:	2200      	movs	r2, #0
   2bda6:	725a      	strb	r2, [r3, #9]
   2bda8:	2354      	movs	r3, #84	; 0x54
   2bdaa:	18fb      	adds	r3, r7, r3
   2bdac:	0019      	movs	r1, r3
   2bdae:	2002      	movs	r0, #2
   2bdb0:	4b6c      	ldr	r3, [pc, #432]	; (2bf64 <system_clock_init+0x270>)
   2bdb2:	4798      	blx	r3
   2bdb4:	2002      	movs	r0, #2
   2bdb6:	4b6c      	ldr	r3, [pc, #432]	; (2bf68 <system_clock_init+0x274>)
   2bdb8:	4798      	blx	r3
   2bdba:	233c      	movs	r3, #60	; 0x3c
   2bdbc:	18fb      	adds	r3, r7, r3
   2bdbe:	0018      	movs	r0, r3
   2bdc0:	4b67      	ldr	r3, [pc, #412]	; (2bf60 <system_clock_init+0x26c>)
   2bdc2:	4798      	blx	r3
   2bdc4:	233c      	movs	r3, #60	; 0x3c
   2bdc6:	18fb      	adds	r3, r7, r3
   2bdc8:	2203      	movs	r2, #3
   2bdca:	701a      	strb	r2, [r3, #0]
   2bdcc:	233c      	movs	r3, #60	; 0x3c
   2bdce:	18fb      	adds	r3, r7, r3
   2bdd0:	2220      	movs	r2, #32
   2bdd2:	605a      	str	r2, [r3, #4]
   2bdd4:	233c      	movs	r3, #60	; 0x3c
   2bdd6:	18fb      	adds	r3, r7, r3
   2bdd8:	2200      	movs	r2, #0
   2bdda:	721a      	strb	r2, [r3, #8]
   2bddc:	233c      	movs	r3, #60	; 0x3c
   2bdde:	18fb      	adds	r3, r7, r3
   2bde0:	2200      	movs	r2, #0
   2bde2:	725a      	strb	r2, [r3, #9]
   2bde4:	233c      	movs	r3, #60	; 0x3c
   2bde6:	18fb      	adds	r3, r7, r3
   2bde8:	0019      	movs	r1, r3
   2bdea:	2004      	movs	r0, #4
   2bdec:	4b5d      	ldr	r3, [pc, #372]	; (2bf64 <system_clock_init+0x270>)
   2bdee:	4798      	blx	r3
   2bdf0:	2004      	movs	r0, #4
   2bdf2:	4b5d      	ldr	r3, [pc, #372]	; (2bf68 <system_clock_init+0x274>)
   2bdf4:	4798      	blx	r3
   2bdf6:	2330      	movs	r3, #48	; 0x30
   2bdf8:	18fb      	adds	r3, r7, r3
   2bdfa:	0018      	movs	r0, r3
   2bdfc:	4b58      	ldr	r3, [pc, #352]	; (2bf60 <system_clock_init+0x26c>)
   2bdfe:	4798      	blx	r3
   2be00:	2330      	movs	r3, #48	; 0x30
   2be02:	18fb      	adds	r3, r7, r3
   2be04:	2206      	movs	r2, #6
   2be06:	701a      	strb	r2, [r3, #0]
   2be08:	2330      	movs	r3, #48	; 0x30
   2be0a:	18fb      	adds	r3, r7, r3
   2be0c:	2201      	movs	r2, #1
   2be0e:	605a      	str	r2, [r3, #4]
   2be10:	2330      	movs	r3, #48	; 0x30
   2be12:	18fb      	adds	r3, r7, r3
   2be14:	2200      	movs	r2, #0
   2be16:	721a      	strb	r2, [r3, #8]
   2be18:	2330      	movs	r3, #48	; 0x30
   2be1a:	18fb      	adds	r3, r7, r3
   2be1c:	2200      	movs	r2, #0
   2be1e:	725a      	strb	r2, [r3, #9]
   2be20:	2330      	movs	r3, #48	; 0x30
   2be22:	18fb      	adds	r3, r7, r3
   2be24:	0019      	movs	r1, r3
   2be26:	2005      	movs	r0, #5
   2be28:	4b4e      	ldr	r3, [pc, #312]	; (2bf64 <system_clock_init+0x270>)
   2be2a:	4798      	blx	r3
   2be2c:	2005      	movs	r0, #5
   2be2e:	4b4e      	ldr	r3, [pc, #312]	; (2bf68 <system_clock_init+0x274>)
   2be30:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2be32:	2390      	movs	r3, #144	; 0x90
   2be34:	18fb      	adds	r3, r7, r3
   2be36:	0018      	movs	r0, r3
   2be38:	4b4c      	ldr	r3, [pc, #304]	; (2bf6c <system_clock_init+0x278>)
   2be3a:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2be3c:	2390      	movs	r3, #144	; 0x90
   2be3e:	18fb      	adds	r3, r7, r3
   2be40:	2201      	movs	r2, #1
   2be42:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2be44:	2390      	movs	r3, #144	; 0x90
   2be46:	18fb      	adds	r3, r7, r3
   2be48:	0019      	movs	r1, r3
   2be4a:	2001      	movs	r0, #1
   2be4c:	4b48      	ldr	r3, [pc, #288]	; (2bf70 <system_clock_init+0x27c>)
   2be4e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2be50:	2001      	movs	r0, #1
   2be52:	4b48      	ldr	r3, [pc, #288]	; (2bf74 <system_clock_init+0x280>)
   2be54:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2be56:	2378      	movs	r3, #120	; 0x78
   2be58:	18fb      	adds	r3, r7, r3
   2be5a:	0018      	movs	r0, r3
   2be5c:	4b46      	ldr	r3, [pc, #280]	; (2bf78 <system_clock_init+0x284>)
   2be5e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2be60:	2378      	movs	r3, #120	; 0x78
   2be62:	18fb      	adds	r3, r7, r3
   2be64:	2200      	movs	r2, #0
   2be66:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2be68:	2378      	movs	r3, #120	; 0x78
   2be6a:	18fb      	adds	r3, r7, r3
   2be6c:	2200      	movs	r2, #0
   2be6e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2be70:	2378      	movs	r3, #120	; 0x78
   2be72:	18fb      	adds	r3, r7, r3
   2be74:	2200      	movs	r2, #0
   2be76:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2be78:	2378      	movs	r3, #120	; 0x78
   2be7a:	18fb      	adds	r3, r7, r3
   2be7c:	2200      	movs	r2, #0
   2be7e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2be80:	2378      	movs	r3, #120	; 0x78
   2be82:	18fb      	adds	r3, r7, r3
   2be84:	2200      	movs	r2, #0
   2be86:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2be88:	2378      	movs	r3, #120	; 0x78
   2be8a:	18fb      	adds	r3, r7, r3
   2be8c:	2200      	movs	r2, #0
   2be8e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2be90:	2378      	movs	r3, #120	; 0x78
   2be92:	18fb      	adds	r3, r7, r3
   2be94:	2200      	movs	r2, #0
   2be96:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2be98:	2378      	movs	r3, #120	; 0x78
   2be9a:	18fb      	adds	r3, r7, r3
   2be9c:	2202      	movs	r2, #2
   2be9e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2bea0:	2378      	movs	r3, #120	; 0x78
   2bea2:	18fb      	adds	r3, r7, r3
   2bea4:	4a35      	ldr	r2, [pc, #212]	; (2bf7c <system_clock_init+0x288>)
   2bea6:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2bea8:	2378      	movs	r3, #120	; 0x78
   2beaa:	18fb      	adds	r3, r7, r3
   2beac:	2201      	movs	r2, #1
   2beae:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2beb0:	2378      	movs	r3, #120	; 0x78
   2beb2:	18fb      	adds	r3, r7, r3
   2beb4:	4a32      	ldr	r2, [pc, #200]	; (2bf80 <system_clock_init+0x28c>)
   2beb6:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2beb8:	2378      	movs	r3, #120	; 0x78
   2beba:	18fb      	adds	r3, r7, r3
   2bebc:	0018      	movs	r0, r3
   2bebe:	4b31      	ldr	r3, [pc, #196]	; (2bf84 <system_clock_init+0x290>)
   2bec0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2bec2:	2008      	movs	r0, #8
   2bec4:	4b24      	ldr	r3, [pc, #144]	; (2bf58 <system_clock_init+0x264>)
   2bec6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2bec8:	46c0      	nop			; (mov r8, r8)
   2beca:	2008      	movs	r0, #8
   2becc:	4b2e      	ldr	r3, [pc, #184]	; (2bf88 <system_clock_init+0x294>)
   2bece:	4798      	blx	r3
   2bed0:	0003      	movs	r3, r0
   2bed2:	001a      	movs	r2, r3
   2bed4:	2301      	movs	r3, #1
   2bed6:	4053      	eors	r3, r2
   2bed8:	b2db      	uxtb	r3, r3
   2beda:	2b00      	cmp	r3, #0
   2bedc:	d1f5      	bne.n	2beca <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2bede:	4919      	ldr	r1, [pc, #100]	; (2bf44 <system_clock_init+0x250>)
   2bee0:	2244      	movs	r2, #68	; 0x44
   2bee2:	5c8b      	ldrb	r3, [r1, r2]
   2bee4:	2080      	movs	r0, #128	; 0x80
   2bee6:	4240      	negs	r0, r0
   2bee8:	4303      	orrs	r3, r0
   2beea:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2beec:	2000      	movs	r0, #0
   2beee:	4b27      	ldr	r3, [pc, #156]	; (2bf8c <system_clock_init+0x298>)
   2bef0:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2bef2:	2100      	movs	r1, #0
   2bef4:	2000      	movs	r0, #0
   2bef6:	4b26      	ldr	r3, [pc, #152]	; (2bf90 <system_clock_init+0x29c>)
   2bef8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2befa:	2100      	movs	r1, #0
   2befc:	2001      	movs	r0, #1
   2befe:	4b24      	ldr	r3, [pc, #144]	; (2bf90 <system_clock_init+0x29c>)
   2bf00:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2bf02:	2100      	movs	r1, #0
   2bf04:	2002      	movs	r0, #2
   2bf06:	4b22      	ldr	r3, [pc, #136]	; (2bf90 <system_clock_init+0x29c>)
   2bf08:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2bf0a:	003b      	movs	r3, r7
   2bf0c:	0018      	movs	r0, r3
   2bf0e:	4b14      	ldr	r3, [pc, #80]	; (2bf60 <system_clock_init+0x26c>)
   2bf10:	4798      	blx	r3
   2bf12:	003b      	movs	r3, r7
   2bf14:	2208      	movs	r2, #8
   2bf16:	701a      	strb	r2, [r3, #0]
   2bf18:	003b      	movs	r3, r7
   2bf1a:	2201      	movs	r2, #1
   2bf1c:	605a      	str	r2, [r3, #4]
   2bf1e:	003b      	movs	r3, r7
   2bf20:	2200      	movs	r2, #0
   2bf22:	721a      	strb	r2, [r3, #8]
   2bf24:	003b      	movs	r3, r7
   2bf26:	2201      	movs	r2, #1
   2bf28:	725a      	strb	r2, [r3, #9]
   2bf2a:	003b      	movs	r3, r7
   2bf2c:	0019      	movs	r1, r3
   2bf2e:	2000      	movs	r0, #0
   2bf30:	4b0c      	ldr	r3, [pc, #48]	; (2bf64 <system_clock_init+0x270>)
   2bf32:	4798      	blx	r3
   2bf34:	2000      	movs	r0, #0
   2bf36:	4b0c      	ldr	r3, [pc, #48]	; (2bf68 <system_clock_init+0x274>)
   2bf38:	4798      	blx	r3
#endif
}
   2bf3a:	46c0      	nop			; (mov r8, r8)
   2bf3c:	46bd      	mov	sp, r7
   2bf3e:	b026      	add	sp, #152	; 0x98
   2bf40:	bd80      	pop	{r7, pc}
   2bf42:	46c0      	nop			; (mov r8, r8)
   2bf44:	40000800 	.word	0x40000800
   2bf48:	0002b8b5 	.word	0x0002b8b5
   2bf4c:	0002bcbd 	.word	0x0002bcbd
   2bf50:	0002b7c5 	.word	0x0002b7c5
   2bf54:	0002ba09 	.word	0x0002ba09
   2bf58:	0002bb8d 	.word	0x0002bb8d
   2bf5c:	0002c039 	.word	0x0002c039
   2bf60:	0002b781 	.word	0x0002b781
   2bf64:	0002c069 	.word	0x0002c069
   2bf68:	0002c18d 	.word	0x0002c18d
   2bf6c:	0002b7af 	.word	0x0002b7af
   2bf70:	0002c2c1 	.word	0x0002c2c1
   2bf74:	0002c305 	.word	0x0002c305
   2bf78:	0002b85d 	.word	0x0002b85d
   2bf7c:	000f4240 	.word	0x000f4240
   2bf80:	02dc6c00 	.word	0x02dc6c00
   2bf84:	0002ba81 	.word	0x0002ba81
   2bf88:	0002bc39 	.word	0x0002bc39
   2bf8c:	0002b7e9 	.word	0x0002b7e9
   2bf90:	0002b809 	.word	0x0002b809

0002bf94 <system_apb_clock_set_mask>:
{
   2bf94:	b580      	push	{r7, lr}
   2bf96:	b082      	sub	sp, #8
   2bf98:	af00      	add	r7, sp, #0
   2bf9a:	0002      	movs	r2, r0
   2bf9c:	6039      	str	r1, [r7, #0]
   2bf9e:	1dfb      	adds	r3, r7, #7
   2bfa0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2bfa2:	1dfb      	adds	r3, r7, #7
   2bfa4:	781b      	ldrb	r3, [r3, #0]
   2bfa6:	2b01      	cmp	r3, #1
   2bfa8:	d00a      	beq.n	2bfc0 <system_apb_clock_set_mask+0x2c>
   2bfaa:	2b02      	cmp	r3, #2
   2bfac:	d00f      	beq.n	2bfce <system_apb_clock_set_mask+0x3a>
   2bfae:	2b00      	cmp	r3, #0
   2bfb0:	d114      	bne.n	2bfdc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2bfb2:	4b0e      	ldr	r3, [pc, #56]	; (2bfec <system_apb_clock_set_mask+0x58>)
   2bfb4:	4a0d      	ldr	r2, [pc, #52]	; (2bfec <system_apb_clock_set_mask+0x58>)
   2bfb6:	6991      	ldr	r1, [r2, #24]
   2bfb8:	683a      	ldr	r2, [r7, #0]
   2bfba:	430a      	orrs	r2, r1
   2bfbc:	619a      	str	r2, [r3, #24]
			break;
   2bfbe:	e00f      	b.n	2bfe0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2bfc0:	4b0a      	ldr	r3, [pc, #40]	; (2bfec <system_apb_clock_set_mask+0x58>)
   2bfc2:	4a0a      	ldr	r2, [pc, #40]	; (2bfec <system_apb_clock_set_mask+0x58>)
   2bfc4:	69d1      	ldr	r1, [r2, #28]
   2bfc6:	683a      	ldr	r2, [r7, #0]
   2bfc8:	430a      	orrs	r2, r1
   2bfca:	61da      	str	r2, [r3, #28]
			break;
   2bfcc:	e008      	b.n	2bfe0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2bfce:	4b07      	ldr	r3, [pc, #28]	; (2bfec <system_apb_clock_set_mask+0x58>)
   2bfd0:	4a06      	ldr	r2, [pc, #24]	; (2bfec <system_apb_clock_set_mask+0x58>)
   2bfd2:	6a11      	ldr	r1, [r2, #32]
   2bfd4:	683a      	ldr	r2, [r7, #0]
   2bfd6:	430a      	orrs	r2, r1
   2bfd8:	621a      	str	r2, [r3, #32]
			break;
   2bfda:	e001      	b.n	2bfe0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2bfdc:	2317      	movs	r3, #23
   2bfde:	e000      	b.n	2bfe2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2bfe0:	2300      	movs	r3, #0
}
   2bfe2:	0018      	movs	r0, r3
   2bfe4:	46bd      	mov	sp, r7
   2bfe6:	b002      	add	sp, #8
   2bfe8:	bd80      	pop	{r7, pc}
   2bfea:	46c0      	nop			; (mov r8, r8)
   2bfec:	40000400 	.word	0x40000400

0002bff0 <system_interrupt_enter_critical_section>:
{
   2bff0:	b580      	push	{r7, lr}
   2bff2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2bff4:	4b02      	ldr	r3, [pc, #8]	; (2c000 <system_interrupt_enter_critical_section+0x10>)
   2bff6:	4798      	blx	r3
}
   2bff8:	46c0      	nop			; (mov r8, r8)
   2bffa:	46bd      	mov	sp, r7
   2bffc:	bd80      	pop	{r7, pc}
   2bffe:	46c0      	nop			; (mov r8, r8)
   2c000:	000285d1 	.word	0x000285d1

0002c004 <system_interrupt_leave_critical_section>:
{
   2c004:	b580      	push	{r7, lr}
   2c006:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2c008:	4b02      	ldr	r3, [pc, #8]	; (2c014 <system_interrupt_leave_critical_section+0x10>)
   2c00a:	4798      	blx	r3
}
   2c00c:	46c0      	nop			; (mov r8, r8)
   2c00e:	46bd      	mov	sp, r7
   2c010:	bd80      	pop	{r7, pc}
   2c012:	46c0      	nop			; (mov r8, r8)
   2c014:	00028625 	.word	0x00028625

0002c018 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2c018:	b580      	push	{r7, lr}
   2c01a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2c01c:	4b05      	ldr	r3, [pc, #20]	; (2c034 <system_gclk_is_syncing+0x1c>)
   2c01e:	785b      	ldrb	r3, [r3, #1]
   2c020:	b2db      	uxtb	r3, r3
   2c022:	b25b      	sxtb	r3, r3
   2c024:	2b00      	cmp	r3, #0
   2c026:	da01      	bge.n	2c02c <system_gclk_is_syncing+0x14>
		return true;
   2c028:	2301      	movs	r3, #1
   2c02a:	e000      	b.n	2c02e <system_gclk_is_syncing+0x16>
	}

	return false;
   2c02c:	2300      	movs	r3, #0
}
   2c02e:	0018      	movs	r0, r3
   2c030:	46bd      	mov	sp, r7
   2c032:	bd80      	pop	{r7, pc}
   2c034:	40000c00 	.word	0x40000c00

0002c038 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2c038:	b580      	push	{r7, lr}
   2c03a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2c03c:	2108      	movs	r1, #8
   2c03e:	2000      	movs	r0, #0
   2c040:	4b07      	ldr	r3, [pc, #28]	; (2c060 <system_gclk_init+0x28>)
   2c042:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2c044:	4b07      	ldr	r3, [pc, #28]	; (2c064 <system_gclk_init+0x2c>)
   2c046:	2201      	movs	r2, #1
   2c048:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2c04a:	46c0      	nop			; (mov r8, r8)
   2c04c:	4b05      	ldr	r3, [pc, #20]	; (2c064 <system_gclk_init+0x2c>)
   2c04e:	781b      	ldrb	r3, [r3, #0]
   2c050:	b2db      	uxtb	r3, r3
   2c052:	001a      	movs	r2, r3
   2c054:	2301      	movs	r3, #1
   2c056:	4013      	ands	r3, r2
   2c058:	d1f8      	bne.n	2c04c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2c05a:	46c0      	nop			; (mov r8, r8)
   2c05c:	46bd      	mov	sp, r7
   2c05e:	bd80      	pop	{r7, pc}
   2c060:	0002bf95 	.word	0x0002bf95
   2c064:	40000c00 	.word	0x40000c00

0002c068 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2c068:	b580      	push	{r7, lr}
   2c06a:	b086      	sub	sp, #24
   2c06c:	af00      	add	r7, sp, #0
   2c06e:	0002      	movs	r2, r0
   2c070:	6039      	str	r1, [r7, #0]
   2c072:	1dfb      	adds	r3, r7, #7
   2c074:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2c076:	1dfb      	adds	r3, r7, #7
   2c078:	781b      	ldrb	r3, [r3, #0]
   2c07a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2c07c:	1dfb      	adds	r3, r7, #7
   2c07e:	781b      	ldrb	r3, [r3, #0]
   2c080:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2c082:	683b      	ldr	r3, [r7, #0]
   2c084:	781b      	ldrb	r3, [r3, #0]
   2c086:	021b      	lsls	r3, r3, #8
   2c088:	001a      	movs	r2, r3
   2c08a:	697b      	ldr	r3, [r7, #20]
   2c08c:	4313      	orrs	r3, r2
   2c08e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2c090:	683b      	ldr	r3, [r7, #0]
   2c092:	785b      	ldrb	r3, [r3, #1]
   2c094:	2b00      	cmp	r3, #0
   2c096:	d004      	beq.n	2c0a2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2c098:	697b      	ldr	r3, [r7, #20]
   2c09a:	2280      	movs	r2, #128	; 0x80
   2c09c:	02d2      	lsls	r2, r2, #11
   2c09e:	4313      	orrs	r3, r2
   2c0a0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2c0a2:	683b      	ldr	r3, [r7, #0]
   2c0a4:	7a5b      	ldrb	r3, [r3, #9]
   2c0a6:	2b00      	cmp	r3, #0
   2c0a8:	d004      	beq.n	2c0b4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2c0aa:	697b      	ldr	r3, [r7, #20]
   2c0ac:	2280      	movs	r2, #128	; 0x80
   2c0ae:	0312      	lsls	r2, r2, #12
   2c0b0:	4313      	orrs	r3, r2
   2c0b2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2c0b4:	683b      	ldr	r3, [r7, #0]
   2c0b6:	685b      	ldr	r3, [r3, #4]
   2c0b8:	2b01      	cmp	r3, #1
   2c0ba:	d92c      	bls.n	2c116 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2c0bc:	683b      	ldr	r3, [r7, #0]
   2c0be:	685a      	ldr	r2, [r3, #4]
   2c0c0:	683b      	ldr	r3, [r7, #0]
   2c0c2:	685b      	ldr	r3, [r3, #4]
   2c0c4:	3b01      	subs	r3, #1
   2c0c6:	4013      	ands	r3, r2
   2c0c8:	d11a      	bne.n	2c100 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2c0ca:	2300      	movs	r3, #0
   2c0cc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2c0ce:	2302      	movs	r3, #2
   2c0d0:	60bb      	str	r3, [r7, #8]
   2c0d2:	e005      	b.n	2c0e0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2c0d4:	68fb      	ldr	r3, [r7, #12]
   2c0d6:	3301      	adds	r3, #1
   2c0d8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2c0da:	68bb      	ldr	r3, [r7, #8]
   2c0dc:	005b      	lsls	r3, r3, #1
   2c0de:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2c0e0:	683b      	ldr	r3, [r7, #0]
   2c0e2:	685a      	ldr	r2, [r3, #4]
   2c0e4:	68bb      	ldr	r3, [r7, #8]
   2c0e6:	429a      	cmp	r2, r3
   2c0e8:	d8f4      	bhi.n	2c0d4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2c0ea:	68fb      	ldr	r3, [r7, #12]
   2c0ec:	021b      	lsls	r3, r3, #8
   2c0ee:	693a      	ldr	r2, [r7, #16]
   2c0f0:	4313      	orrs	r3, r2
   2c0f2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2c0f4:	697b      	ldr	r3, [r7, #20]
   2c0f6:	2280      	movs	r2, #128	; 0x80
   2c0f8:	0352      	lsls	r2, r2, #13
   2c0fa:	4313      	orrs	r3, r2
   2c0fc:	617b      	str	r3, [r7, #20]
   2c0fe:	e00a      	b.n	2c116 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2c100:	683b      	ldr	r3, [r7, #0]
   2c102:	685b      	ldr	r3, [r3, #4]
   2c104:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2c106:	693a      	ldr	r2, [r7, #16]
   2c108:	4313      	orrs	r3, r2
   2c10a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2c10c:	697b      	ldr	r3, [r7, #20]
   2c10e:	2280      	movs	r2, #128	; 0x80
   2c110:	0292      	lsls	r2, r2, #10
   2c112:	4313      	orrs	r3, r2
   2c114:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2c116:	683b      	ldr	r3, [r7, #0]
   2c118:	7a1b      	ldrb	r3, [r3, #8]
   2c11a:	2b00      	cmp	r3, #0
   2c11c:	d004      	beq.n	2c128 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2c11e:	697b      	ldr	r3, [r7, #20]
   2c120:	2280      	movs	r2, #128	; 0x80
   2c122:	0392      	lsls	r2, r2, #14
   2c124:	4313      	orrs	r3, r2
   2c126:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2c128:	46c0      	nop			; (mov r8, r8)
   2c12a:	4b13      	ldr	r3, [pc, #76]	; (2c178 <system_gclk_gen_set_config+0x110>)
   2c12c:	4798      	blx	r3
   2c12e:	1e03      	subs	r3, r0, #0
   2c130:	d1fb      	bne.n	2c12a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c132:	4b12      	ldr	r3, [pc, #72]	; (2c17c <system_gclk_gen_set_config+0x114>)
   2c134:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2c136:	4a12      	ldr	r2, [pc, #72]	; (2c180 <system_gclk_gen_set_config+0x118>)
   2c138:	1dfb      	adds	r3, r7, #7
   2c13a:	781b      	ldrb	r3, [r3, #0]
   2c13c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2c13e:	46c0      	nop			; (mov r8, r8)
   2c140:	4b0d      	ldr	r3, [pc, #52]	; (2c178 <system_gclk_gen_set_config+0x110>)
   2c142:	4798      	blx	r3
   2c144:	1e03      	subs	r3, r0, #0
   2c146:	d1fb      	bne.n	2c140 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2c148:	4b0e      	ldr	r3, [pc, #56]	; (2c184 <system_gclk_gen_set_config+0x11c>)
   2c14a:	693a      	ldr	r2, [r7, #16]
   2c14c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2c14e:	46c0      	nop			; (mov r8, r8)
   2c150:	4b09      	ldr	r3, [pc, #36]	; (2c178 <system_gclk_gen_set_config+0x110>)
   2c152:	4798      	blx	r3
   2c154:	1e03      	subs	r3, r0, #0
   2c156:	d1fb      	bne.n	2c150 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2c158:	4b0a      	ldr	r3, [pc, #40]	; (2c184 <system_gclk_gen_set_config+0x11c>)
   2c15a:	4a0a      	ldr	r2, [pc, #40]	; (2c184 <system_gclk_gen_set_config+0x11c>)
   2c15c:	6851      	ldr	r1, [r2, #4]
   2c15e:	2280      	movs	r2, #128	; 0x80
   2c160:	0252      	lsls	r2, r2, #9
   2c162:	4011      	ands	r1, r2
   2c164:	697a      	ldr	r2, [r7, #20]
   2c166:	430a      	orrs	r2, r1
   2c168:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2c16a:	4b07      	ldr	r3, [pc, #28]	; (2c188 <system_gclk_gen_set_config+0x120>)
   2c16c:	4798      	blx	r3
}
   2c16e:	46c0      	nop			; (mov r8, r8)
   2c170:	46bd      	mov	sp, r7
   2c172:	b006      	add	sp, #24
   2c174:	bd80      	pop	{r7, pc}
   2c176:	46c0      	nop			; (mov r8, r8)
   2c178:	0002c019 	.word	0x0002c019
   2c17c:	0002bff1 	.word	0x0002bff1
   2c180:	40000c08 	.word	0x40000c08
   2c184:	40000c00 	.word	0x40000c00
   2c188:	0002c005 	.word	0x0002c005

0002c18c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2c18c:	b580      	push	{r7, lr}
   2c18e:	b082      	sub	sp, #8
   2c190:	af00      	add	r7, sp, #0
   2c192:	0002      	movs	r2, r0
   2c194:	1dfb      	adds	r3, r7, #7
   2c196:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2c198:	46c0      	nop			; (mov r8, r8)
   2c19a:	4b0e      	ldr	r3, [pc, #56]	; (2c1d4 <system_gclk_gen_enable+0x48>)
   2c19c:	4798      	blx	r3
   2c19e:	1e03      	subs	r3, r0, #0
   2c1a0:	d1fb      	bne.n	2c19a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c1a2:	4b0d      	ldr	r3, [pc, #52]	; (2c1d8 <system_gclk_gen_enable+0x4c>)
   2c1a4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c1a6:	4a0d      	ldr	r2, [pc, #52]	; (2c1dc <system_gclk_gen_enable+0x50>)
   2c1a8:	1dfb      	adds	r3, r7, #7
   2c1aa:	781b      	ldrb	r3, [r3, #0]
   2c1ac:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c1ae:	46c0      	nop			; (mov r8, r8)
   2c1b0:	4b08      	ldr	r3, [pc, #32]	; (2c1d4 <system_gclk_gen_enable+0x48>)
   2c1b2:	4798      	blx	r3
   2c1b4:	1e03      	subs	r3, r0, #0
   2c1b6:	d1fb      	bne.n	2c1b0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2c1b8:	4b09      	ldr	r3, [pc, #36]	; (2c1e0 <system_gclk_gen_enable+0x54>)
   2c1ba:	4a09      	ldr	r2, [pc, #36]	; (2c1e0 <system_gclk_gen_enable+0x54>)
   2c1bc:	6852      	ldr	r2, [r2, #4]
   2c1be:	2180      	movs	r1, #128	; 0x80
   2c1c0:	0249      	lsls	r1, r1, #9
   2c1c2:	430a      	orrs	r2, r1
   2c1c4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2c1c6:	4b07      	ldr	r3, [pc, #28]	; (2c1e4 <system_gclk_gen_enable+0x58>)
   2c1c8:	4798      	blx	r3
}
   2c1ca:	46c0      	nop			; (mov r8, r8)
   2c1cc:	46bd      	mov	sp, r7
   2c1ce:	b002      	add	sp, #8
   2c1d0:	bd80      	pop	{r7, pc}
   2c1d2:	46c0      	nop			; (mov r8, r8)
   2c1d4:	0002c019 	.word	0x0002c019
   2c1d8:	0002bff1 	.word	0x0002bff1
   2c1dc:	40000c04 	.word	0x40000c04
   2c1e0:	40000c00 	.word	0x40000c00
   2c1e4:	0002c005 	.word	0x0002c005

0002c1e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2c1e8:	b580      	push	{r7, lr}
   2c1ea:	b086      	sub	sp, #24
   2c1ec:	af00      	add	r7, sp, #0
   2c1ee:	0002      	movs	r2, r0
   2c1f0:	1dfb      	adds	r3, r7, #7
   2c1f2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2c1f4:	46c0      	nop			; (mov r8, r8)
   2c1f6:	4b2a      	ldr	r3, [pc, #168]	; (2c2a0 <system_gclk_gen_get_hz+0xb8>)
   2c1f8:	4798      	blx	r3
   2c1fa:	1e03      	subs	r3, r0, #0
   2c1fc:	d1fb      	bne.n	2c1f6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c1fe:	4b29      	ldr	r3, [pc, #164]	; (2c2a4 <system_gclk_gen_get_hz+0xbc>)
   2c200:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c202:	4a29      	ldr	r2, [pc, #164]	; (2c2a8 <system_gclk_gen_get_hz+0xc0>)
   2c204:	1dfb      	adds	r3, r7, #7
   2c206:	781b      	ldrb	r3, [r3, #0]
   2c208:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c20a:	46c0      	nop			; (mov r8, r8)
   2c20c:	4b24      	ldr	r3, [pc, #144]	; (2c2a0 <system_gclk_gen_get_hz+0xb8>)
   2c20e:	4798      	blx	r3
   2c210:	1e03      	subs	r3, r0, #0
   2c212:	d1fb      	bne.n	2c20c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2c214:	4b25      	ldr	r3, [pc, #148]	; (2c2ac <system_gclk_gen_get_hz+0xc4>)
   2c216:	685b      	ldr	r3, [r3, #4]
   2c218:	04db      	lsls	r3, r3, #19
   2c21a:	0edb      	lsrs	r3, r3, #27
   2c21c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2c21e:	0018      	movs	r0, r3
   2c220:	4b23      	ldr	r3, [pc, #140]	; (2c2b0 <system_gclk_gen_get_hz+0xc8>)
   2c222:	4798      	blx	r3
   2c224:	0003      	movs	r3, r0
   2c226:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c228:	4a1f      	ldr	r2, [pc, #124]	; (2c2a8 <system_gclk_gen_get_hz+0xc0>)
   2c22a:	1dfb      	adds	r3, r7, #7
   2c22c:	781b      	ldrb	r3, [r3, #0]
   2c22e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2c230:	4b1e      	ldr	r3, [pc, #120]	; (2c2ac <system_gclk_gen_get_hz+0xc4>)
   2c232:	685b      	ldr	r3, [r3, #4]
   2c234:	02db      	lsls	r3, r3, #11
   2c236:	0fdb      	lsrs	r3, r3, #31
   2c238:	b2da      	uxtb	r2, r3
   2c23a:	2313      	movs	r3, #19
   2c23c:	18fb      	adds	r3, r7, r3
   2c23e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2c240:	4a1c      	ldr	r2, [pc, #112]	; (2c2b4 <system_gclk_gen_get_hz+0xcc>)
   2c242:	1dfb      	adds	r3, r7, #7
   2c244:	781b      	ldrb	r3, [r3, #0]
   2c246:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c248:	46c0      	nop			; (mov r8, r8)
   2c24a:	4b15      	ldr	r3, [pc, #84]	; (2c2a0 <system_gclk_gen_get_hz+0xb8>)
   2c24c:	4798      	blx	r3
   2c24e:	1e03      	subs	r3, r0, #0
   2c250:	d1fb      	bne.n	2c24a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2c252:	4b16      	ldr	r3, [pc, #88]	; (2c2ac <system_gclk_gen_get_hz+0xc4>)
   2c254:	689b      	ldr	r3, [r3, #8]
   2c256:	021b      	lsls	r3, r3, #8
   2c258:	0c1b      	lsrs	r3, r3, #16
   2c25a:	b29b      	uxth	r3, r3
   2c25c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2c25e:	4b16      	ldr	r3, [pc, #88]	; (2c2b8 <system_gclk_gen_get_hz+0xd0>)
   2c260:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2c262:	2313      	movs	r3, #19
   2c264:	18fb      	adds	r3, r7, r3
   2c266:	781b      	ldrb	r3, [r3, #0]
   2c268:	2b00      	cmp	r3, #0
   2c26a:	d109      	bne.n	2c280 <system_gclk_gen_get_hz+0x98>
   2c26c:	68fb      	ldr	r3, [r7, #12]
   2c26e:	2b01      	cmp	r3, #1
   2c270:	d906      	bls.n	2c280 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2c272:	4b12      	ldr	r3, [pc, #72]	; (2c2bc <system_gclk_gen_get_hz+0xd4>)
   2c274:	68f9      	ldr	r1, [r7, #12]
   2c276:	6978      	ldr	r0, [r7, #20]
   2c278:	4798      	blx	r3
   2c27a:	0003      	movs	r3, r0
   2c27c:	617b      	str	r3, [r7, #20]
   2c27e:	e00a      	b.n	2c296 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2c280:	2313      	movs	r3, #19
   2c282:	18fb      	adds	r3, r7, r3
   2c284:	781b      	ldrb	r3, [r3, #0]
   2c286:	2b00      	cmp	r3, #0
   2c288:	d005      	beq.n	2c296 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2c28a:	68fb      	ldr	r3, [r7, #12]
   2c28c:	3301      	adds	r3, #1
   2c28e:	697a      	ldr	r2, [r7, #20]
   2c290:	40da      	lsrs	r2, r3
   2c292:	0013      	movs	r3, r2
   2c294:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2c296:	697b      	ldr	r3, [r7, #20]
}
   2c298:	0018      	movs	r0, r3
   2c29a:	46bd      	mov	sp, r7
   2c29c:	b006      	add	sp, #24
   2c29e:	bd80      	pop	{r7, pc}
   2c2a0:	0002c019 	.word	0x0002c019
   2c2a4:	0002bff1 	.word	0x0002bff1
   2c2a8:	40000c04 	.word	0x40000c04
   2c2ac:	40000c00 	.word	0x40000c00
   2c2b0:	0002b949 	.word	0x0002b949
   2c2b4:	40000c08 	.word	0x40000c08
   2c2b8:	0002c005 	.word	0x0002c005
   2c2bc:	00034e35 	.word	0x00034e35

0002c2c0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2c2c0:	b580      	push	{r7, lr}
   2c2c2:	b084      	sub	sp, #16
   2c2c4:	af00      	add	r7, sp, #0
   2c2c6:	0002      	movs	r2, r0
   2c2c8:	6039      	str	r1, [r7, #0]
   2c2ca:	1dfb      	adds	r3, r7, #7
   2c2cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2c2ce:	1dfb      	adds	r3, r7, #7
   2c2d0:	781b      	ldrb	r3, [r3, #0]
   2c2d2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2c2d4:	683b      	ldr	r3, [r7, #0]
   2c2d6:	781b      	ldrb	r3, [r3, #0]
   2c2d8:	021b      	lsls	r3, r3, #8
   2c2da:	001a      	movs	r2, r3
   2c2dc:	68fb      	ldr	r3, [r7, #12]
   2c2de:	4313      	orrs	r3, r2
   2c2e0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2c2e2:	1dfb      	adds	r3, r7, #7
   2c2e4:	781b      	ldrb	r3, [r3, #0]
   2c2e6:	0018      	movs	r0, r3
   2c2e8:	4b04      	ldr	r3, [pc, #16]	; (2c2fc <system_gclk_chan_set_config+0x3c>)
   2c2ea:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2c2ec:	4b04      	ldr	r3, [pc, #16]	; (2c300 <system_gclk_chan_set_config+0x40>)
   2c2ee:	68fa      	ldr	r2, [r7, #12]
   2c2f0:	b292      	uxth	r2, r2
   2c2f2:	805a      	strh	r2, [r3, #2]
}
   2c2f4:	46c0      	nop			; (mov r8, r8)
   2c2f6:	46bd      	mov	sp, r7
   2c2f8:	b004      	add	sp, #16
   2c2fa:	bd80      	pop	{r7, pc}
   2c2fc:	0002c34d 	.word	0x0002c34d
   2c300:	40000c00 	.word	0x40000c00

0002c304 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2c304:	b580      	push	{r7, lr}
   2c306:	b082      	sub	sp, #8
   2c308:	af00      	add	r7, sp, #0
   2c30a:	0002      	movs	r2, r0
   2c30c:	1dfb      	adds	r3, r7, #7
   2c30e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c310:	4b0a      	ldr	r3, [pc, #40]	; (2c33c <system_gclk_chan_enable+0x38>)
   2c312:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c314:	4a0a      	ldr	r2, [pc, #40]	; (2c340 <system_gclk_chan_enable+0x3c>)
   2c316:	1dfb      	adds	r3, r7, #7
   2c318:	781b      	ldrb	r3, [r3, #0]
   2c31a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2c31c:	4909      	ldr	r1, [pc, #36]	; (2c344 <system_gclk_chan_enable+0x40>)
   2c31e:	4b09      	ldr	r3, [pc, #36]	; (2c344 <system_gclk_chan_enable+0x40>)
   2c320:	885b      	ldrh	r3, [r3, #2]
   2c322:	b29b      	uxth	r3, r3
   2c324:	2280      	movs	r2, #128	; 0x80
   2c326:	01d2      	lsls	r2, r2, #7
   2c328:	4313      	orrs	r3, r2
   2c32a:	b29b      	uxth	r3, r3
   2c32c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2c32e:	4b06      	ldr	r3, [pc, #24]	; (2c348 <system_gclk_chan_enable+0x44>)
   2c330:	4798      	blx	r3
}
   2c332:	46c0      	nop			; (mov r8, r8)
   2c334:	46bd      	mov	sp, r7
   2c336:	b002      	add	sp, #8
   2c338:	bd80      	pop	{r7, pc}
   2c33a:	46c0      	nop			; (mov r8, r8)
   2c33c:	0002bff1 	.word	0x0002bff1
   2c340:	40000c02 	.word	0x40000c02
   2c344:	40000c00 	.word	0x40000c00
   2c348:	0002c005 	.word	0x0002c005

0002c34c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2c34c:	b580      	push	{r7, lr}
   2c34e:	b084      	sub	sp, #16
   2c350:	af00      	add	r7, sp, #0
   2c352:	0002      	movs	r2, r0
   2c354:	1dfb      	adds	r3, r7, #7
   2c356:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c358:	4b1c      	ldr	r3, [pc, #112]	; (2c3cc <system_gclk_chan_disable+0x80>)
   2c35a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c35c:	4a1c      	ldr	r2, [pc, #112]	; (2c3d0 <system_gclk_chan_disable+0x84>)
   2c35e:	1dfb      	adds	r3, r7, #7
   2c360:	781b      	ldrb	r3, [r3, #0]
   2c362:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2c364:	4b1b      	ldr	r3, [pc, #108]	; (2c3d4 <system_gclk_chan_disable+0x88>)
   2c366:	885b      	ldrh	r3, [r3, #2]
   2c368:	051b      	lsls	r3, r3, #20
   2c36a:	0f1b      	lsrs	r3, r3, #28
   2c36c:	b2db      	uxtb	r3, r3
   2c36e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2c370:	4a18      	ldr	r2, [pc, #96]	; (2c3d4 <system_gclk_chan_disable+0x88>)
   2c372:	8853      	ldrh	r3, [r2, #2]
   2c374:	4918      	ldr	r1, [pc, #96]	; (2c3d8 <system_gclk_chan_disable+0x8c>)
   2c376:	400b      	ands	r3, r1
   2c378:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2c37a:	4a16      	ldr	r2, [pc, #88]	; (2c3d4 <system_gclk_chan_disable+0x88>)
   2c37c:	4b15      	ldr	r3, [pc, #84]	; (2c3d4 <system_gclk_chan_disable+0x88>)
   2c37e:	885b      	ldrh	r3, [r3, #2]
   2c380:	b29b      	uxth	r3, r3
   2c382:	4916      	ldr	r1, [pc, #88]	; (2c3dc <system_gclk_chan_disable+0x90>)
   2c384:	400b      	ands	r3, r1
   2c386:	b29b      	uxth	r3, r3
   2c388:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2c38a:	46c0      	nop			; (mov r8, r8)
   2c38c:	4b11      	ldr	r3, [pc, #68]	; (2c3d4 <system_gclk_chan_disable+0x88>)
   2c38e:	885b      	ldrh	r3, [r3, #2]
   2c390:	b29b      	uxth	r3, r3
   2c392:	001a      	movs	r2, r3
   2c394:	2380      	movs	r3, #128	; 0x80
   2c396:	01db      	lsls	r3, r3, #7
   2c398:	4013      	ands	r3, r2
   2c39a:	d1f7      	bne.n	2c38c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2c39c:	4a0d      	ldr	r2, [pc, #52]	; (2c3d4 <system_gclk_chan_disable+0x88>)
   2c39e:	68fb      	ldr	r3, [r7, #12]
   2c3a0:	b2db      	uxtb	r3, r3
   2c3a2:	1c19      	adds	r1, r3, #0
   2c3a4:	230f      	movs	r3, #15
   2c3a6:	400b      	ands	r3, r1
   2c3a8:	b2d9      	uxtb	r1, r3
   2c3aa:	8853      	ldrh	r3, [r2, #2]
   2c3ac:	1c08      	adds	r0, r1, #0
   2c3ae:	210f      	movs	r1, #15
   2c3b0:	4001      	ands	r1, r0
   2c3b2:	0208      	lsls	r0, r1, #8
   2c3b4:	4908      	ldr	r1, [pc, #32]	; (2c3d8 <system_gclk_chan_disable+0x8c>)
   2c3b6:	400b      	ands	r3, r1
   2c3b8:	1c19      	adds	r1, r3, #0
   2c3ba:	1c03      	adds	r3, r0, #0
   2c3bc:	430b      	orrs	r3, r1
   2c3be:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2c3c0:	4b07      	ldr	r3, [pc, #28]	; (2c3e0 <system_gclk_chan_disable+0x94>)
   2c3c2:	4798      	blx	r3
}
   2c3c4:	46c0      	nop			; (mov r8, r8)
   2c3c6:	46bd      	mov	sp, r7
   2c3c8:	b004      	add	sp, #16
   2c3ca:	bd80      	pop	{r7, pc}
   2c3cc:	0002bff1 	.word	0x0002bff1
   2c3d0:	40000c02 	.word	0x40000c02
   2c3d4:	40000c00 	.word	0x40000c00
   2c3d8:	fffff0ff 	.word	0xfffff0ff
   2c3dc:	ffffbfff 	.word	0xffffbfff
   2c3e0:	0002c005 	.word	0x0002c005

0002c3e4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2c3e4:	b580      	push	{r7, lr}
   2c3e6:	b084      	sub	sp, #16
   2c3e8:	af00      	add	r7, sp, #0
   2c3ea:	0002      	movs	r2, r0
   2c3ec:	1dfb      	adds	r3, r7, #7
   2c3ee:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2c3f0:	4b0d      	ldr	r3, [pc, #52]	; (2c428 <system_gclk_chan_get_hz+0x44>)
   2c3f2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c3f4:	4a0d      	ldr	r2, [pc, #52]	; (2c42c <system_gclk_chan_get_hz+0x48>)
   2c3f6:	1dfb      	adds	r3, r7, #7
   2c3f8:	781b      	ldrb	r3, [r3, #0]
   2c3fa:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2c3fc:	4b0c      	ldr	r3, [pc, #48]	; (2c430 <system_gclk_chan_get_hz+0x4c>)
   2c3fe:	885b      	ldrh	r3, [r3, #2]
   2c400:	051b      	lsls	r3, r3, #20
   2c402:	0f1b      	lsrs	r3, r3, #28
   2c404:	b2da      	uxtb	r2, r3
   2c406:	230f      	movs	r3, #15
   2c408:	18fb      	adds	r3, r7, r3
   2c40a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2c40c:	4b09      	ldr	r3, [pc, #36]	; (2c434 <system_gclk_chan_get_hz+0x50>)
   2c40e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2c410:	230f      	movs	r3, #15
   2c412:	18fb      	adds	r3, r7, r3
   2c414:	781b      	ldrb	r3, [r3, #0]
   2c416:	0018      	movs	r0, r3
   2c418:	4b07      	ldr	r3, [pc, #28]	; (2c438 <system_gclk_chan_get_hz+0x54>)
   2c41a:	4798      	blx	r3
   2c41c:	0003      	movs	r3, r0
}
   2c41e:	0018      	movs	r0, r3
   2c420:	46bd      	mov	sp, r7
   2c422:	b004      	add	sp, #16
   2c424:	bd80      	pop	{r7, pc}
   2c426:	46c0      	nop			; (mov r8, r8)
   2c428:	0002bff1 	.word	0x0002bff1
   2c42c:	40000c02 	.word	0x40000c02
   2c430:	40000c00 	.word	0x40000c00
   2c434:	0002c005 	.word	0x0002c005
   2c438:	0002c1e9 	.word	0x0002c1e9

0002c43c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2c43c:	b580      	push	{r7, lr}
   2c43e:	b084      	sub	sp, #16
   2c440:	af00      	add	r7, sp, #0
   2c442:	0002      	movs	r2, r0
   2c444:	1dfb      	adds	r3, r7, #7
   2c446:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2c448:	230f      	movs	r3, #15
   2c44a:	18fb      	adds	r3, r7, r3
   2c44c:	2200      	movs	r2, #0
   2c44e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2c450:	1dfb      	adds	r3, r7, #7
   2c452:	781b      	ldrb	r3, [r3, #0]
   2c454:	2b7f      	cmp	r3, #127	; 0x7f
   2c456:	d80b      	bhi.n	2c470 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2c458:	4a13      	ldr	r2, [pc, #76]	; (2c4a8 <system_interrupt_clear_pending+0x6c>)
   2c45a:	1dfb      	adds	r3, r7, #7
   2c45c:	781b      	ldrb	r3, [r3, #0]
   2c45e:	b25b      	sxtb	r3, r3
   2c460:	2101      	movs	r1, #1
   2c462:	4099      	lsls	r1, r3
   2c464:	000b      	movs	r3, r1
   2c466:	0019      	movs	r1, r3
   2c468:	23c0      	movs	r3, #192	; 0xc0
   2c46a:	005b      	lsls	r3, r3, #1
   2c46c:	50d1      	str	r1, [r2, r3]
   2c46e:	e014      	b.n	2c49a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2c470:	1dfb      	adds	r3, r7, #7
   2c472:	781b      	ldrb	r3, [r3, #0]
   2c474:	b25b      	sxtb	r3, r3
   2c476:	330e      	adds	r3, #14
   2c478:	d101      	bne.n	2c47e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2c47a:	2317      	movs	r3, #23
   2c47c:	e010      	b.n	2c4a0 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2c47e:	1dfb      	adds	r3, r7, #7
   2c480:	781b      	ldrb	r3, [r3, #0]
   2c482:	b25b      	sxtb	r3, r3
   2c484:	3301      	adds	r3, #1
   2c486:	d104      	bne.n	2c492 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2c488:	4b08      	ldr	r3, [pc, #32]	; (2c4ac <system_interrupt_clear_pending+0x70>)
   2c48a:	2280      	movs	r2, #128	; 0x80
   2c48c:	0492      	lsls	r2, r2, #18
   2c48e:	605a      	str	r2, [r3, #4]
   2c490:	e003      	b.n	2c49a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2c492:	230f      	movs	r3, #15
   2c494:	18fb      	adds	r3, r7, r3
   2c496:	2217      	movs	r2, #23
   2c498:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2c49a:	230f      	movs	r3, #15
   2c49c:	18fb      	adds	r3, r7, r3
   2c49e:	781b      	ldrb	r3, [r3, #0]
}
   2c4a0:	0018      	movs	r0, r3
   2c4a2:	46bd      	mov	sp, r7
   2c4a4:	b004      	add	sp, #16
   2c4a6:	bd80      	pop	{r7, pc}
   2c4a8:	e000e100 	.word	0xe000e100
   2c4ac:	e000ed00 	.word	0xe000ed00

0002c4b0 <system_pinmux_get_group_from_gpio_pin>:
{
   2c4b0:	b580      	push	{r7, lr}
   2c4b2:	b084      	sub	sp, #16
   2c4b4:	af00      	add	r7, sp, #0
   2c4b6:	0002      	movs	r2, r0
   2c4b8:	1dfb      	adds	r3, r7, #7
   2c4ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2c4bc:	230f      	movs	r3, #15
   2c4be:	18fb      	adds	r3, r7, r3
   2c4c0:	1dfa      	adds	r2, r7, #7
   2c4c2:	7812      	ldrb	r2, [r2, #0]
   2c4c4:	09d2      	lsrs	r2, r2, #7
   2c4c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2c4c8:	230e      	movs	r3, #14
   2c4ca:	18fb      	adds	r3, r7, r3
   2c4cc:	1dfa      	adds	r2, r7, #7
   2c4ce:	7812      	ldrb	r2, [r2, #0]
   2c4d0:	0952      	lsrs	r2, r2, #5
   2c4d2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2c4d4:	4b0d      	ldr	r3, [pc, #52]	; (2c50c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2c4d6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2c4d8:	230f      	movs	r3, #15
   2c4da:	18fb      	adds	r3, r7, r3
   2c4dc:	781b      	ldrb	r3, [r3, #0]
   2c4de:	2b00      	cmp	r3, #0
   2c4e0:	d10f      	bne.n	2c502 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2c4e2:	230f      	movs	r3, #15
   2c4e4:	18fb      	adds	r3, r7, r3
   2c4e6:	781b      	ldrb	r3, [r3, #0]
   2c4e8:	009b      	lsls	r3, r3, #2
   2c4ea:	2210      	movs	r2, #16
   2c4ec:	4694      	mov	ip, r2
   2c4ee:	44bc      	add	ip, r7
   2c4f0:	4463      	add	r3, ip
   2c4f2:	3b08      	subs	r3, #8
   2c4f4:	681a      	ldr	r2, [r3, #0]
   2c4f6:	230e      	movs	r3, #14
   2c4f8:	18fb      	adds	r3, r7, r3
   2c4fa:	781b      	ldrb	r3, [r3, #0]
   2c4fc:	01db      	lsls	r3, r3, #7
   2c4fe:	18d3      	adds	r3, r2, r3
   2c500:	e000      	b.n	2c504 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2c502:	2300      	movs	r3, #0
}
   2c504:	0018      	movs	r0, r3
   2c506:	46bd      	mov	sp, r7
   2c508:	b004      	add	sp, #16
   2c50a:	bd80      	pop	{r7, pc}
   2c50c:	41004400 	.word	0x41004400

0002c510 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2c510:	b580      	push	{r7, lr}
   2c512:	b088      	sub	sp, #32
   2c514:	af00      	add	r7, sp, #0
   2c516:	60f8      	str	r0, [r7, #12]
   2c518:	60b9      	str	r1, [r7, #8]
   2c51a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2c51c:	2300      	movs	r3, #0
   2c51e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2c520:	687b      	ldr	r3, [r7, #4]
   2c522:	78db      	ldrb	r3, [r3, #3]
   2c524:	2201      	movs	r2, #1
   2c526:	4053      	eors	r3, r2
   2c528:	b2db      	uxtb	r3, r3
   2c52a:	2b00      	cmp	r3, #0
   2c52c:	d035      	beq.n	2c59a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2c52e:	687b      	ldr	r3, [r7, #4]
   2c530:	781b      	ldrb	r3, [r3, #0]
   2c532:	2b80      	cmp	r3, #128	; 0x80
   2c534:	d00b      	beq.n	2c54e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2c536:	69fb      	ldr	r3, [r7, #28]
   2c538:	2280      	movs	r2, #128	; 0x80
   2c53a:	0252      	lsls	r2, r2, #9
   2c53c:	4313      	orrs	r3, r2
   2c53e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2c540:	687b      	ldr	r3, [r7, #4]
   2c542:	781b      	ldrb	r3, [r3, #0]
   2c544:	061b      	lsls	r3, r3, #24
   2c546:	001a      	movs	r2, r3
   2c548:	69fb      	ldr	r3, [r7, #28]
   2c54a:	4313      	orrs	r3, r2
   2c54c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2c54e:	687b      	ldr	r3, [r7, #4]
   2c550:	785b      	ldrb	r3, [r3, #1]
   2c552:	2b00      	cmp	r3, #0
   2c554:	d003      	beq.n	2c55e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c556:	687b      	ldr	r3, [r7, #4]
   2c558:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2c55a:	2b02      	cmp	r3, #2
   2c55c:	d110      	bne.n	2c580 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2c55e:	69fb      	ldr	r3, [r7, #28]
   2c560:	2280      	movs	r2, #128	; 0x80
   2c562:	0292      	lsls	r2, r2, #10
   2c564:	4313      	orrs	r3, r2
   2c566:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2c568:	687b      	ldr	r3, [r7, #4]
   2c56a:	789b      	ldrb	r3, [r3, #2]
   2c56c:	2b00      	cmp	r3, #0
   2c56e:	d004      	beq.n	2c57a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2c570:	69fb      	ldr	r3, [r7, #28]
   2c572:	2280      	movs	r2, #128	; 0x80
   2c574:	02d2      	lsls	r2, r2, #11
   2c576:	4313      	orrs	r3, r2
   2c578:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2c57a:	68fb      	ldr	r3, [r7, #12]
   2c57c:	68ba      	ldr	r2, [r7, #8]
   2c57e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c580:	687b      	ldr	r3, [r7, #4]
   2c582:	785b      	ldrb	r3, [r3, #1]
   2c584:	2b01      	cmp	r3, #1
   2c586:	d003      	beq.n	2c590 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c588:	687b      	ldr	r3, [r7, #4]
   2c58a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c58c:	2b02      	cmp	r3, #2
   2c58e:	d107      	bne.n	2c5a0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2c590:	69fb      	ldr	r3, [r7, #28]
   2c592:	4a22      	ldr	r2, [pc, #136]	; (2c61c <_system_pinmux_config+0x10c>)
   2c594:	4013      	ands	r3, r2
   2c596:	61fb      	str	r3, [r7, #28]
   2c598:	e002      	b.n	2c5a0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2c59a:	68fb      	ldr	r3, [r7, #12]
   2c59c:	68ba      	ldr	r2, [r7, #8]
   2c59e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2c5a0:	68bb      	ldr	r3, [r7, #8]
   2c5a2:	041b      	lsls	r3, r3, #16
   2c5a4:	0c1b      	lsrs	r3, r3, #16
   2c5a6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2c5a8:	68bb      	ldr	r3, [r7, #8]
   2c5aa:	0c1b      	lsrs	r3, r3, #16
   2c5ac:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c5ae:	69ba      	ldr	r2, [r7, #24]
   2c5b0:	69fb      	ldr	r3, [r7, #28]
   2c5b2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2c5b4:	22a0      	movs	r2, #160	; 0xa0
   2c5b6:	05d2      	lsls	r2, r2, #23
   2c5b8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c5ba:	68fb      	ldr	r3, [r7, #12]
   2c5bc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c5be:	697a      	ldr	r2, [r7, #20]
   2c5c0:	69fb      	ldr	r3, [r7, #28]
   2c5c2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2c5c4:	22d0      	movs	r2, #208	; 0xd0
   2c5c6:	0612      	lsls	r2, r2, #24
   2c5c8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c5ca:	68fb      	ldr	r3, [r7, #12]
   2c5cc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2c5ce:	687b      	ldr	r3, [r7, #4]
   2c5d0:	78db      	ldrb	r3, [r3, #3]
   2c5d2:	2201      	movs	r2, #1
   2c5d4:	4053      	eors	r3, r2
   2c5d6:	b2db      	uxtb	r3, r3
   2c5d8:	2b00      	cmp	r3, #0
   2c5da:	d01a      	beq.n	2c612 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2c5dc:	69fa      	ldr	r2, [r7, #28]
   2c5de:	2380      	movs	r3, #128	; 0x80
   2c5e0:	02db      	lsls	r3, r3, #11
   2c5e2:	4013      	ands	r3, r2
   2c5e4:	d00a      	beq.n	2c5fc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2c5e6:	687b      	ldr	r3, [r7, #4]
   2c5e8:	789b      	ldrb	r3, [r3, #2]
   2c5ea:	2b01      	cmp	r3, #1
   2c5ec:	d103      	bne.n	2c5f6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2c5ee:	68fb      	ldr	r3, [r7, #12]
   2c5f0:	68ba      	ldr	r2, [r7, #8]
   2c5f2:	619a      	str	r2, [r3, #24]
   2c5f4:	e002      	b.n	2c5fc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2c5f6:	68fb      	ldr	r3, [r7, #12]
   2c5f8:	68ba      	ldr	r2, [r7, #8]
   2c5fa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c5fc:	687b      	ldr	r3, [r7, #4]
   2c5fe:	785b      	ldrb	r3, [r3, #1]
   2c600:	2b01      	cmp	r3, #1
   2c602:	d003      	beq.n	2c60c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c604:	687b      	ldr	r3, [r7, #4]
   2c606:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c608:	2b02      	cmp	r3, #2
   2c60a:	d102      	bne.n	2c612 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2c60c:	68fb      	ldr	r3, [r7, #12]
   2c60e:	68ba      	ldr	r2, [r7, #8]
   2c610:	609a      	str	r2, [r3, #8]
		}
	}
}
   2c612:	46c0      	nop			; (mov r8, r8)
   2c614:	46bd      	mov	sp, r7
   2c616:	b008      	add	sp, #32
   2c618:	bd80      	pop	{r7, pc}
   2c61a:	46c0      	nop			; (mov r8, r8)
   2c61c:	fffbffff 	.word	0xfffbffff

0002c620 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2c620:	b580      	push	{r7, lr}
   2c622:	b084      	sub	sp, #16
   2c624:	af00      	add	r7, sp, #0
   2c626:	0002      	movs	r2, r0
   2c628:	6039      	str	r1, [r7, #0]
   2c62a:	1dfb      	adds	r3, r7, #7
   2c62c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2c62e:	1dfb      	adds	r3, r7, #7
   2c630:	781b      	ldrb	r3, [r3, #0]
   2c632:	0018      	movs	r0, r3
   2c634:	4b0a      	ldr	r3, [pc, #40]	; (2c660 <system_pinmux_pin_set_config+0x40>)
   2c636:	4798      	blx	r3
   2c638:	0003      	movs	r3, r0
   2c63a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2c63c:	1dfb      	adds	r3, r7, #7
   2c63e:	781b      	ldrb	r3, [r3, #0]
   2c640:	221f      	movs	r2, #31
   2c642:	4013      	ands	r3, r2
   2c644:	2201      	movs	r2, #1
   2c646:	409a      	lsls	r2, r3
   2c648:	0013      	movs	r3, r2
   2c64a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2c64c:	683a      	ldr	r2, [r7, #0]
   2c64e:	68b9      	ldr	r1, [r7, #8]
   2c650:	68fb      	ldr	r3, [r7, #12]
   2c652:	0018      	movs	r0, r3
   2c654:	4b03      	ldr	r3, [pc, #12]	; (2c664 <system_pinmux_pin_set_config+0x44>)
   2c656:	4798      	blx	r3
}
   2c658:	46c0      	nop			; (mov r8, r8)
   2c65a:	46bd      	mov	sp, r7
   2c65c:	b004      	add	sp, #16
   2c65e:	bd80      	pop	{r7, pc}
   2c660:	0002c4b1 	.word	0x0002c4b1
   2c664:	0002c511 	.word	0x0002c511

0002c668 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2c668:	b580      	push	{r7, lr}
   2c66a:	af00      	add	r7, sp, #0
	return;
   2c66c:	46c0      	nop			; (mov r8, r8)
}
   2c66e:	46bd      	mov	sp, r7
   2c670:	bd80      	pop	{r7, pc}
	...

0002c674 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2c674:	b580      	push	{r7, lr}
   2c676:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2c678:	4b06      	ldr	r3, [pc, #24]	; (2c694 <system_init+0x20>)
   2c67a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2c67c:	4b06      	ldr	r3, [pc, #24]	; (2c698 <system_init+0x24>)
   2c67e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2c680:	4b06      	ldr	r3, [pc, #24]	; (2c69c <system_init+0x28>)
   2c682:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2c684:	4b06      	ldr	r3, [pc, #24]	; (2c6a0 <system_init+0x2c>)
   2c686:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2c688:	4b06      	ldr	r3, [pc, #24]	; (2c6a4 <system_init+0x30>)
   2c68a:	4798      	blx	r3
}
   2c68c:	46c0      	nop			; (mov r8, r8)
   2c68e:	46bd      	mov	sp, r7
   2c690:	bd80      	pop	{r7, pc}
   2c692:	46c0      	nop			; (mov r8, r8)
   2c694:	0002bcf5 	.word	0x0002bcf5
   2c698:	00028761 	.word	0x00028761
   2c69c:	00012669 	.word	0x00012669
   2c6a0:	00028b39 	.word	0x00028b39
   2c6a4:	0002c669 	.word	0x0002c669

0002c6a8 <system_gclk_chan_get_config_defaults>:
{
   2c6a8:	b580      	push	{r7, lr}
   2c6aa:	b082      	sub	sp, #8
   2c6ac:	af00      	add	r7, sp, #0
   2c6ae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2c6b0:	687b      	ldr	r3, [r7, #4]
   2c6b2:	2200      	movs	r2, #0
   2c6b4:	701a      	strb	r2, [r3, #0]
}
   2c6b6:	46c0      	nop			; (mov r8, r8)
   2c6b8:	46bd      	mov	sp, r7
   2c6ba:	b002      	add	sp, #8
   2c6bc:	bd80      	pop	{r7, pc}
	...

0002c6c0 <system_apb_clock_set_mask>:
{
   2c6c0:	b580      	push	{r7, lr}
   2c6c2:	b082      	sub	sp, #8
   2c6c4:	af00      	add	r7, sp, #0
   2c6c6:	0002      	movs	r2, r0
   2c6c8:	6039      	str	r1, [r7, #0]
   2c6ca:	1dfb      	adds	r3, r7, #7
   2c6cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2c6ce:	1dfb      	adds	r3, r7, #7
   2c6d0:	781b      	ldrb	r3, [r3, #0]
   2c6d2:	2b01      	cmp	r3, #1
   2c6d4:	d00a      	beq.n	2c6ec <system_apb_clock_set_mask+0x2c>
   2c6d6:	2b02      	cmp	r3, #2
   2c6d8:	d00f      	beq.n	2c6fa <system_apb_clock_set_mask+0x3a>
   2c6da:	2b00      	cmp	r3, #0
   2c6dc:	d114      	bne.n	2c708 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2c6de:	4b0e      	ldr	r3, [pc, #56]	; (2c718 <system_apb_clock_set_mask+0x58>)
   2c6e0:	4a0d      	ldr	r2, [pc, #52]	; (2c718 <system_apb_clock_set_mask+0x58>)
   2c6e2:	6991      	ldr	r1, [r2, #24]
   2c6e4:	683a      	ldr	r2, [r7, #0]
   2c6e6:	430a      	orrs	r2, r1
   2c6e8:	619a      	str	r2, [r3, #24]
			break;
   2c6ea:	e00f      	b.n	2c70c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2c6ec:	4b0a      	ldr	r3, [pc, #40]	; (2c718 <system_apb_clock_set_mask+0x58>)
   2c6ee:	4a0a      	ldr	r2, [pc, #40]	; (2c718 <system_apb_clock_set_mask+0x58>)
   2c6f0:	69d1      	ldr	r1, [r2, #28]
   2c6f2:	683a      	ldr	r2, [r7, #0]
   2c6f4:	430a      	orrs	r2, r1
   2c6f6:	61da      	str	r2, [r3, #28]
			break;
   2c6f8:	e008      	b.n	2c70c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2c6fa:	4b07      	ldr	r3, [pc, #28]	; (2c718 <system_apb_clock_set_mask+0x58>)
   2c6fc:	4a06      	ldr	r2, [pc, #24]	; (2c718 <system_apb_clock_set_mask+0x58>)
   2c6fe:	6a11      	ldr	r1, [r2, #32]
   2c700:	683a      	ldr	r2, [r7, #0]
   2c702:	430a      	orrs	r2, r1
   2c704:	621a      	str	r2, [r3, #32]
			break;
   2c706:	e001      	b.n	2c70c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2c708:	2317      	movs	r3, #23
   2c70a:	e000      	b.n	2c70e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2c70c:	2300      	movs	r3, #0
}
   2c70e:	0018      	movs	r0, r3
   2c710:	46bd      	mov	sp, r7
   2c712:	b002      	add	sp, #8
   2c714:	bd80      	pop	{r7, pc}
   2c716:	46c0      	nop			; (mov r8, r8)
   2c718:	40000400 	.word	0x40000400

0002c71c <system_pinmux_get_config_defaults>:
{
   2c71c:	b580      	push	{r7, lr}
   2c71e:	b082      	sub	sp, #8
   2c720:	af00      	add	r7, sp, #0
   2c722:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2c724:	687b      	ldr	r3, [r7, #4]
   2c726:	2280      	movs	r2, #128	; 0x80
   2c728:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2c72a:	687b      	ldr	r3, [r7, #4]
   2c72c:	2200      	movs	r2, #0
   2c72e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2c730:	687b      	ldr	r3, [r7, #4]
   2c732:	2201      	movs	r2, #1
   2c734:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2c736:	687b      	ldr	r3, [r7, #4]
   2c738:	2200      	movs	r2, #0
   2c73a:	70da      	strb	r2, [r3, #3]
}
   2c73c:	46c0      	nop			; (mov r8, r8)
   2c73e:	46bd      	mov	sp, r7
   2c740:	b002      	add	sp, #8
   2c742:	bd80      	pop	{r7, pc}

0002c744 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2c744:	b580      	push	{r7, lr}
   2c746:	b084      	sub	sp, #16
   2c748:	af00      	add	r7, sp, #0
   2c74a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c74c:	2300      	movs	r3, #0
   2c74e:	60fb      	str	r3, [r7, #12]
   2c750:	e00c      	b.n	2c76c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2c752:	4b0a      	ldr	r3, [pc, #40]	; (2c77c <_tcc_get_inst_index+0x38>)
   2c754:	68fa      	ldr	r2, [r7, #12]
   2c756:	0092      	lsls	r2, r2, #2
   2c758:	58d2      	ldr	r2, [r2, r3]
   2c75a:	687b      	ldr	r3, [r7, #4]
   2c75c:	429a      	cmp	r2, r3
   2c75e:	d102      	bne.n	2c766 <_tcc_get_inst_index+0x22>
			return i;
   2c760:	68fb      	ldr	r3, [r7, #12]
   2c762:	b2db      	uxtb	r3, r3
   2c764:	e006      	b.n	2c774 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c766:	68fb      	ldr	r3, [r7, #12]
   2c768:	3301      	adds	r3, #1
   2c76a:	60fb      	str	r3, [r7, #12]
   2c76c:	68fb      	ldr	r3, [r7, #12]
   2c76e:	2b02      	cmp	r3, #2
   2c770:	d9ef      	bls.n	2c752 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2c772:	2300      	movs	r3, #0
}
   2c774:	0018      	movs	r0, r3
   2c776:	46bd      	mov	sp, r7
   2c778:	b004      	add	sp, #16
   2c77a:	bd80      	pop	{r7, pc}
   2c77c:	0003c84c 	.word	0x0003c84c

0002c780 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2c780:	b590      	push	{r4, r7, lr}
   2c782:	b085      	sub	sp, #20
   2c784:	af00      	add	r7, sp, #0
   2c786:	6078      	str	r0, [r7, #4]
   2c788:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2c78a:	230f      	movs	r3, #15
   2c78c:	18fc      	adds	r4, r7, r3
   2c78e:	683b      	ldr	r3, [r7, #0]
   2c790:	0018      	movs	r0, r3
   2c792:	4bad      	ldr	r3, [pc, #692]	; (2ca48 <tcc_get_config_defaults+0x2c8>)
   2c794:	4798      	blx	r3
   2c796:	0003      	movs	r3, r0
   2c798:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2c79a:	687b      	ldr	r3, [r7, #4]
   2c79c:	2200      	movs	r2, #0
   2c79e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2c7a0:	230f      	movs	r3, #15
   2c7a2:	18fb      	adds	r3, r7, r3
   2c7a4:	781a      	ldrb	r2, [r3, #0]
   2c7a6:	4ba9      	ldr	r3, [pc, #676]	; (2ca4c <tcc_get_config_defaults+0x2cc>)
   2c7a8:	0092      	lsls	r2, r2, #2
   2c7aa:	58d2      	ldr	r2, [r2, r3]
   2c7ac:	687b      	ldr	r3, [r7, #4]
   2c7ae:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2c7b0:	687b      	ldr	r3, [r7, #4]
   2c7b2:	2200      	movs	r2, #0
   2c7b4:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2c7b6:	687b      	ldr	r3, [r7, #4]
   2c7b8:	2200      	movs	r2, #0
   2c7ba:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2c7bc:	687b      	ldr	r3, [r7, #4]
   2c7be:	2200      	movs	r2, #0
   2c7c0:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2c7c2:	687b      	ldr	r3, [r7, #4]
   2c7c4:	2200      	movs	r2, #0
   2c7c6:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2c7c8:	687b      	ldr	r3, [r7, #4]
   2c7ca:	2200      	movs	r2, #0
   2c7cc:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c7ce:	687b      	ldr	r3, [r7, #4]
   2c7d0:	2200      	movs	r2, #0
   2c7d2:	61da      	str	r2, [r3, #28]
   2c7d4:	687b      	ldr	r3, [r7, #4]
   2c7d6:	2200      	movs	r2, #0
   2c7d8:	621a      	str	r2, [r3, #32]
   2c7da:	687b      	ldr	r3, [r7, #4]
   2c7dc:	2200      	movs	r2, #0
   2c7de:	625a      	str	r2, [r3, #36]	; 0x24
   2c7e0:	687b      	ldr	r3, [r7, #4]
   2c7e2:	2200      	movs	r2, #0
   2c7e4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c7e6:	687b      	ldr	r3, [r7, #4]
   2c7e8:	2200      	movs	r2, #0
   2c7ea:	751a      	strb	r2, [r3, #20]
   2c7ec:	687b      	ldr	r3, [r7, #4]
   2c7ee:	2200      	movs	r2, #0
   2c7f0:	755a      	strb	r2, [r3, #21]
   2c7f2:	687b      	ldr	r3, [r7, #4]
   2c7f4:	2200      	movs	r2, #0
   2c7f6:	759a      	strb	r2, [r3, #22]
   2c7f8:	687b      	ldr	r3, [r7, #4]
   2c7fa:	2200      	movs	r2, #0
   2c7fc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2c7fe:	687b      	ldr	r3, [r7, #4]
   2c800:	2200      	movs	r2, #0
   2c802:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2c804:	687b      	ldr	r3, [r7, #4]
   2c806:	2200      	movs	r2, #0
   2c808:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c80a:	687b      	ldr	r3, [r7, #4]
   2c80c:	2200      	movs	r2, #0
   2c80e:	741a      	strb	r2, [r3, #16]
   2c810:	687b      	ldr	r3, [r7, #4]
   2c812:	2200      	movs	r2, #0
   2c814:	745a      	strb	r2, [r3, #17]
   2c816:	687b      	ldr	r3, [r7, #4]
   2c818:	2200      	movs	r2, #0
   2c81a:	749a      	strb	r2, [r3, #18]
   2c81c:	687b      	ldr	r3, [r7, #4]
   2c81e:	2200      	movs	r2, #0
   2c820:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2c822:	687b      	ldr	r3, [r7, #4]
   2c824:	222c      	movs	r2, #44	; 0x2c
   2c826:	2100      	movs	r1, #0
   2c828:	5499      	strb	r1, [r3, r2]
   2c82a:	687b      	ldr	r3, [r7, #4]
   2c82c:	222d      	movs	r2, #45	; 0x2d
   2c82e:	2100      	movs	r1, #0
   2c830:	5499      	strb	r1, [r3, r2]
   2c832:	687b      	ldr	r3, [r7, #4]
   2c834:	222e      	movs	r2, #46	; 0x2e
   2c836:	2100      	movs	r1, #0
   2c838:	5499      	strb	r1, [r3, r2]
   2c83a:	687b      	ldr	r3, [r7, #4]
   2c83c:	222f      	movs	r2, #47	; 0x2f
   2c83e:	2100      	movs	r1, #0
   2c840:	5499      	strb	r1, [r3, r2]
   2c842:	687b      	ldr	r3, [r7, #4]
   2c844:	2230      	movs	r2, #48	; 0x30
   2c846:	2100      	movs	r1, #0
   2c848:	5499      	strb	r1, [r3, r2]
   2c84a:	687b      	ldr	r3, [r7, #4]
   2c84c:	2231      	movs	r2, #49	; 0x31
   2c84e:	2100      	movs	r1, #0
   2c850:	5499      	strb	r1, [r3, r2]
   2c852:	687b      	ldr	r3, [r7, #4]
   2c854:	2232      	movs	r2, #50	; 0x32
   2c856:	2100      	movs	r1, #0
   2c858:	5499      	strb	r1, [r3, r2]
   2c85a:	687b      	ldr	r3, [r7, #4]
   2c85c:	2233      	movs	r2, #51	; 0x33
   2c85e:	2100      	movs	r1, #0
   2c860:	5499      	strb	r1, [r3, r2]
   2c862:	687b      	ldr	r3, [r7, #4]
   2c864:	2234      	movs	r2, #52	; 0x34
   2c866:	2100      	movs	r1, #0
   2c868:	5499      	strb	r1, [r3, r2]
   2c86a:	687b      	ldr	r3, [r7, #4]
   2c86c:	2235      	movs	r2, #53	; 0x35
   2c86e:	2100      	movs	r1, #0
   2c870:	5499      	strb	r1, [r3, r2]
   2c872:	687b      	ldr	r3, [r7, #4]
   2c874:	2236      	movs	r2, #54	; 0x36
   2c876:	2100      	movs	r1, #0
   2c878:	5499      	strb	r1, [r3, r2]
   2c87a:	687b      	ldr	r3, [r7, #4]
   2c87c:	2237      	movs	r2, #55	; 0x37
   2c87e:	2100      	movs	r1, #0
   2c880:	5499      	strb	r1, [r3, r2]
   2c882:	687b      	ldr	r3, [r7, #4]
   2c884:	2238      	movs	r2, #56	; 0x38
   2c886:	2100      	movs	r1, #0
   2c888:	5499      	strb	r1, [r3, r2]
   2c88a:	687b      	ldr	r3, [r7, #4]
   2c88c:	2239      	movs	r2, #57	; 0x39
   2c88e:	2100      	movs	r1, #0
   2c890:	5499      	strb	r1, [r3, r2]
   2c892:	687b      	ldr	r3, [r7, #4]
   2c894:	223a      	movs	r2, #58	; 0x3a
   2c896:	2100      	movs	r1, #0
   2c898:	5499      	strb	r1, [r3, r2]
   2c89a:	687b      	ldr	r3, [r7, #4]
   2c89c:	223b      	movs	r2, #59	; 0x3b
   2c89e:	2100      	movs	r1, #0
   2c8a0:	5499      	strb	r1, [r3, r2]
   2c8a2:	687b      	ldr	r3, [r7, #4]
   2c8a4:	223c      	movs	r2, #60	; 0x3c
   2c8a6:	2100      	movs	r1, #0
   2c8a8:	5499      	strb	r1, [r3, r2]
   2c8aa:	687b      	ldr	r3, [r7, #4]
   2c8ac:	223d      	movs	r2, #61	; 0x3d
   2c8ae:	2100      	movs	r1, #0
   2c8b0:	5499      	strb	r1, [r3, r2]
   2c8b2:	687b      	ldr	r3, [r7, #4]
   2c8b4:	223e      	movs	r2, #62	; 0x3e
   2c8b6:	2100      	movs	r1, #0
   2c8b8:	5499      	strb	r1, [r3, r2]
   2c8ba:	687b      	ldr	r3, [r7, #4]
   2c8bc:	223f      	movs	r2, #63	; 0x3f
   2c8be:	2100      	movs	r1, #0
   2c8c0:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2c8c2:	687b      	ldr	r3, [r7, #4]
   2c8c4:	2240      	movs	r2, #64	; 0x40
   2c8c6:	2100      	movs	r1, #0
   2c8c8:	5499      	strb	r1, [r3, r2]
   2c8ca:	687b      	ldr	r3, [r7, #4]
   2c8cc:	2241      	movs	r2, #65	; 0x41
   2c8ce:	2100      	movs	r1, #0
   2c8d0:	5499      	strb	r1, [r3, r2]
   2c8d2:	687b      	ldr	r3, [r7, #4]
   2c8d4:	2242      	movs	r2, #66	; 0x42
   2c8d6:	2100      	movs	r1, #0
   2c8d8:	5499      	strb	r1, [r3, r2]
   2c8da:	687b      	ldr	r3, [r7, #4]
   2c8dc:	2243      	movs	r2, #67	; 0x43
   2c8de:	2100      	movs	r1, #0
   2c8e0:	5499      	strb	r1, [r3, r2]
   2c8e2:	687b      	ldr	r3, [r7, #4]
   2c8e4:	2244      	movs	r2, #68	; 0x44
   2c8e6:	2100      	movs	r1, #0
   2c8e8:	5499      	strb	r1, [r3, r2]
   2c8ea:	687b      	ldr	r3, [r7, #4]
   2c8ec:	2245      	movs	r2, #69	; 0x45
   2c8ee:	2100      	movs	r1, #0
   2c8f0:	5499      	strb	r1, [r3, r2]
   2c8f2:	687b      	ldr	r3, [r7, #4]
   2c8f4:	2246      	movs	r2, #70	; 0x46
   2c8f6:	2100      	movs	r1, #0
   2c8f8:	5499      	strb	r1, [r3, r2]
   2c8fa:	687b      	ldr	r3, [r7, #4]
   2c8fc:	2247      	movs	r2, #71	; 0x47
   2c8fe:	2100      	movs	r1, #0
   2c900:	5499      	strb	r1, [r3, r2]
   2c902:	687b      	ldr	r3, [r7, #4]
   2c904:	2248      	movs	r2, #72	; 0x48
   2c906:	2100      	movs	r1, #0
   2c908:	5499      	strb	r1, [r3, r2]
   2c90a:	687b      	ldr	r3, [r7, #4]
   2c90c:	2249      	movs	r2, #73	; 0x49
   2c90e:	2100      	movs	r1, #0
   2c910:	5499      	strb	r1, [r3, r2]
   2c912:	687b      	ldr	r3, [r7, #4]
   2c914:	224a      	movs	r2, #74	; 0x4a
   2c916:	2100      	movs	r1, #0
   2c918:	5499      	strb	r1, [r3, r2]
   2c91a:	687b      	ldr	r3, [r7, #4]
   2c91c:	224b      	movs	r2, #75	; 0x4b
   2c91e:	2100      	movs	r1, #0
   2c920:	5499      	strb	r1, [r3, r2]
   2c922:	687b      	ldr	r3, [r7, #4]
   2c924:	224c      	movs	r2, #76	; 0x4c
   2c926:	2100      	movs	r1, #0
   2c928:	5499      	strb	r1, [r3, r2]
   2c92a:	687b      	ldr	r3, [r7, #4]
   2c92c:	224d      	movs	r2, #77	; 0x4d
   2c92e:	2100      	movs	r1, #0
   2c930:	5499      	strb	r1, [r3, r2]
   2c932:	687b      	ldr	r3, [r7, #4]
   2c934:	224e      	movs	r2, #78	; 0x4e
   2c936:	2100      	movs	r1, #0
   2c938:	5499      	strb	r1, [r3, r2]
   2c93a:	687b      	ldr	r3, [r7, #4]
   2c93c:	224f      	movs	r2, #79	; 0x4f
   2c93e:	2100      	movs	r1, #0
   2c940:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2c942:	687b      	ldr	r3, [r7, #4]
   2c944:	2250      	movs	r2, #80	; 0x50
   2c946:	2100      	movs	r1, #0
   2c948:	5499      	strb	r1, [r3, r2]
   2c94a:	687b      	ldr	r3, [r7, #4]
   2c94c:	2251      	movs	r2, #81	; 0x51
   2c94e:	2100      	movs	r1, #0
   2c950:	5499      	strb	r1, [r3, r2]
   2c952:	687b      	ldr	r3, [r7, #4]
   2c954:	2252      	movs	r2, #82	; 0x52
   2c956:	2100      	movs	r1, #0
   2c958:	5499      	strb	r1, [r3, r2]
   2c95a:	687b      	ldr	r3, [r7, #4]
   2c95c:	2253      	movs	r2, #83	; 0x53
   2c95e:	2100      	movs	r1, #0
   2c960:	5499      	strb	r1, [r3, r2]
   2c962:	687b      	ldr	r3, [r7, #4]
   2c964:	2254      	movs	r2, #84	; 0x54
   2c966:	2100      	movs	r1, #0
   2c968:	5499      	strb	r1, [r3, r2]
   2c96a:	687b      	ldr	r3, [r7, #4]
   2c96c:	2255      	movs	r2, #85	; 0x55
   2c96e:	2100      	movs	r1, #0
   2c970:	5499      	strb	r1, [r3, r2]
   2c972:	687b      	ldr	r3, [r7, #4]
   2c974:	2256      	movs	r2, #86	; 0x56
   2c976:	2100      	movs	r1, #0
   2c978:	5499      	strb	r1, [r3, r2]
   2c97a:	687b      	ldr	r3, [r7, #4]
   2c97c:	2257      	movs	r2, #87	; 0x57
   2c97e:	2100      	movs	r1, #0
   2c980:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2c982:	687b      	ldr	r3, [r7, #4]
   2c984:	2298      	movs	r2, #152	; 0x98
   2c986:	2100      	movs	r1, #0
   2c988:	5499      	strb	r1, [r3, r2]
   2c98a:	687b      	ldr	r3, [r7, #4]
   2c98c:	2200      	movs	r2, #0
   2c98e:	659a      	str	r2, [r3, #88]	; 0x58
   2c990:	687b      	ldr	r3, [r7, #4]
   2c992:	2200      	movs	r2, #0
   2c994:	679a      	str	r2, [r3, #120]	; 0x78
   2c996:	687b      	ldr	r3, [r7, #4]
   2c998:	2299      	movs	r2, #153	; 0x99
   2c99a:	2100      	movs	r1, #0
   2c99c:	5499      	strb	r1, [r3, r2]
   2c99e:	687b      	ldr	r3, [r7, #4]
   2c9a0:	2200      	movs	r2, #0
   2c9a2:	65da      	str	r2, [r3, #92]	; 0x5c
   2c9a4:	687b      	ldr	r3, [r7, #4]
   2c9a6:	2200      	movs	r2, #0
   2c9a8:	67da      	str	r2, [r3, #124]	; 0x7c
   2c9aa:	687b      	ldr	r3, [r7, #4]
   2c9ac:	229a      	movs	r2, #154	; 0x9a
   2c9ae:	2100      	movs	r1, #0
   2c9b0:	5499      	strb	r1, [r3, r2]
   2c9b2:	687b      	ldr	r3, [r7, #4]
   2c9b4:	2200      	movs	r2, #0
   2c9b6:	661a      	str	r2, [r3, #96]	; 0x60
   2c9b8:	687b      	ldr	r3, [r7, #4]
   2c9ba:	2280      	movs	r2, #128	; 0x80
   2c9bc:	2100      	movs	r1, #0
   2c9be:	5099      	str	r1, [r3, r2]
   2c9c0:	687b      	ldr	r3, [r7, #4]
   2c9c2:	229b      	movs	r2, #155	; 0x9b
   2c9c4:	2100      	movs	r1, #0
   2c9c6:	5499      	strb	r1, [r3, r2]
   2c9c8:	687b      	ldr	r3, [r7, #4]
   2c9ca:	2200      	movs	r2, #0
   2c9cc:	665a      	str	r2, [r3, #100]	; 0x64
   2c9ce:	687b      	ldr	r3, [r7, #4]
   2c9d0:	2284      	movs	r2, #132	; 0x84
   2c9d2:	2100      	movs	r1, #0
   2c9d4:	5099      	str	r1, [r3, r2]
   2c9d6:	687b      	ldr	r3, [r7, #4]
   2c9d8:	229c      	movs	r2, #156	; 0x9c
   2c9da:	2100      	movs	r1, #0
   2c9dc:	5499      	strb	r1, [r3, r2]
   2c9de:	687b      	ldr	r3, [r7, #4]
   2c9e0:	2200      	movs	r2, #0
   2c9e2:	669a      	str	r2, [r3, #104]	; 0x68
   2c9e4:	687b      	ldr	r3, [r7, #4]
   2c9e6:	2288      	movs	r2, #136	; 0x88
   2c9e8:	2100      	movs	r1, #0
   2c9ea:	5099      	str	r1, [r3, r2]
   2c9ec:	687b      	ldr	r3, [r7, #4]
   2c9ee:	229d      	movs	r2, #157	; 0x9d
   2c9f0:	2100      	movs	r1, #0
   2c9f2:	5499      	strb	r1, [r3, r2]
   2c9f4:	687b      	ldr	r3, [r7, #4]
   2c9f6:	2200      	movs	r2, #0
   2c9f8:	66da      	str	r2, [r3, #108]	; 0x6c
   2c9fa:	687b      	ldr	r3, [r7, #4]
   2c9fc:	228c      	movs	r2, #140	; 0x8c
   2c9fe:	2100      	movs	r1, #0
   2ca00:	5099      	str	r1, [r3, r2]
   2ca02:	687b      	ldr	r3, [r7, #4]
   2ca04:	229e      	movs	r2, #158	; 0x9e
   2ca06:	2100      	movs	r1, #0
   2ca08:	5499      	strb	r1, [r3, r2]
   2ca0a:	687b      	ldr	r3, [r7, #4]
   2ca0c:	2200      	movs	r2, #0
   2ca0e:	671a      	str	r2, [r3, #112]	; 0x70
   2ca10:	687b      	ldr	r3, [r7, #4]
   2ca12:	2290      	movs	r2, #144	; 0x90
   2ca14:	2100      	movs	r1, #0
   2ca16:	5099      	str	r1, [r3, r2]
   2ca18:	687b      	ldr	r3, [r7, #4]
   2ca1a:	229f      	movs	r2, #159	; 0x9f
   2ca1c:	2100      	movs	r1, #0
   2ca1e:	5499      	strb	r1, [r3, r2]
   2ca20:	687b      	ldr	r3, [r7, #4]
   2ca22:	2200      	movs	r2, #0
   2ca24:	675a      	str	r2, [r3, #116]	; 0x74
   2ca26:	687b      	ldr	r3, [r7, #4]
   2ca28:	2294      	movs	r2, #148	; 0x94
   2ca2a:	2100      	movs	r1, #0
   2ca2c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2ca2e:	687b      	ldr	r3, [r7, #4]
   2ca30:	22a0      	movs	r2, #160	; 0xa0
   2ca32:	2101      	movs	r1, #1
   2ca34:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2ca36:	687b      	ldr	r3, [r7, #4]
   2ca38:	22a1      	movs	r2, #161	; 0xa1
   2ca3a:	2100      	movs	r1, #0
   2ca3c:	5499      	strb	r1, [r3, r2]
}
   2ca3e:	46c0      	nop			; (mov r8, r8)
   2ca40:	46bd      	mov	sp, r7
   2ca42:	b005      	add	sp, #20
   2ca44:	bd90      	pop	{r4, r7, pc}
   2ca46:	46c0      	nop			; (mov r8, r8)
   2ca48:	0002c745 	.word	0x0002c745
   2ca4c:	0003c868 	.word	0x0003c868

0002ca50 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ca50:	b580      	push	{r7, lr}
   2ca52:	b086      	sub	sp, #24
   2ca54:	af00      	add	r7, sp, #0
   2ca56:	60b9      	str	r1, [r7, #8]
   2ca58:	607a      	str	r2, [r7, #4]
   2ca5a:	230f      	movs	r3, #15
   2ca5c:	18fb      	adds	r3, r7, r3
   2ca5e:	1c02      	adds	r2, r0, #0
   2ca60:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2ca62:	2300      	movs	r3, #0
   2ca64:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ca66:	2300      	movs	r3, #0
   2ca68:	613b      	str	r3, [r7, #16]
   2ca6a:	e01d      	b.n	2caa8 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2ca6c:	68ba      	ldr	r2, [r7, #8]
   2ca6e:	693b      	ldr	r3, [r7, #16]
   2ca70:	18d3      	adds	r3, r2, r3
   2ca72:	3310      	adds	r3, #16
   2ca74:	781b      	ldrb	r3, [r3, #0]
   2ca76:	2b01      	cmp	r3, #1
   2ca78:	d113      	bne.n	2caa2 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2ca7a:	230f      	movs	r3, #15
   2ca7c:	18fb      	adds	r3, r7, r3
   2ca7e:	781b      	ldrb	r3, [r3, #0]
   2ca80:	4a1b      	ldr	r2, [pc, #108]	; (2caf0 <_tcc_build_ctrla+0xa0>)
   2ca82:	5cd3      	ldrb	r3, [r2, r3]
   2ca84:	001a      	movs	r2, r3
   2ca86:	693b      	ldr	r3, [r7, #16]
   2ca88:	429a      	cmp	r2, r3
   2ca8a:	da01      	bge.n	2ca90 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2ca8c:	2317      	movs	r3, #23
   2ca8e:	e02a      	b.n	2cae6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2ca90:	2380      	movs	r3, #128	; 0x80
   2ca92:	045a      	lsls	r2, r3, #17
   2ca94:	693b      	ldr	r3, [r7, #16]
   2ca96:	409a      	lsls	r2, r3
   2ca98:	0013      	movs	r3, r2
   2ca9a:	001a      	movs	r2, r3
   2ca9c:	697b      	ldr	r3, [r7, #20]
   2ca9e:	4313      	orrs	r3, r2
   2caa0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2caa2:	693b      	ldr	r3, [r7, #16]
   2caa4:	3301      	adds	r3, #1
   2caa6:	613b      	str	r3, [r7, #16]
   2caa8:	693b      	ldr	r3, [r7, #16]
   2caaa:	2b03      	cmp	r3, #3
   2caac:	ddde      	ble.n	2ca6c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2caae:	68bb      	ldr	r3, [r7, #8]
   2cab0:	22a1      	movs	r2, #161	; 0xa1
   2cab2:	5c9b      	ldrb	r3, [r3, r2]
   2cab4:	2b00      	cmp	r3, #0
   2cab6:	d004      	beq.n	2cac2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2cab8:	697b      	ldr	r3, [r7, #20]
   2caba:	2280      	movs	r2, #128	; 0x80
   2cabc:	0112      	lsls	r2, r2, #4
   2cabe:	4313      	orrs	r3, r2
   2cac0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2cac2:	68bb      	ldr	r3, [r7, #8]
   2cac4:	7b1b      	ldrb	r3, [r3, #12]
   2cac6:	031b      	lsls	r3, r3, #12
   2cac8:	001a      	movs	r2, r3
   2caca:	697b      	ldr	r3, [r7, #20]
   2cacc:	4313      	orrs	r3, r2
   2cace:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2cad0:	68bb      	ldr	r3, [r7, #8]
   2cad2:	7adb      	ldrb	r3, [r3, #11]
   2cad4:	021b      	lsls	r3, r3, #8
   2cad6:	001a      	movs	r2, r3
   2cad8:	697b      	ldr	r3, [r7, #20]
   2cada:	4313      	orrs	r3, r2
   2cadc:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2cade:	687b      	ldr	r3, [r7, #4]
   2cae0:	697a      	ldr	r2, [r7, #20]
   2cae2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2cae4:	2300      	movs	r3, #0
}
   2cae6:	0018      	movs	r0, r3
   2cae8:	46bd      	mov	sp, r7
   2caea:	b006      	add	sp, #24
   2caec:	bd80      	pop	{r7, pc}
   2caee:	46c0      	nop			; (mov r8, r8)
   2caf0:	0003c874 	.word	0x0003c874

0002caf4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2caf4:	b580      	push	{r7, lr}
   2caf6:	b086      	sub	sp, #24
   2caf8:	af00      	add	r7, sp, #0
   2cafa:	60b9      	str	r1, [r7, #8]
   2cafc:	607a      	str	r2, [r7, #4]
   2cafe:	230f      	movs	r3, #15
   2cb00:	18fb      	adds	r3, r7, r3
   2cb02:	1c02      	adds	r2, r0, #0
   2cb04:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2cb06:	2317      	movs	r3, #23
   2cb08:	18fb      	adds	r3, r7, r3
   2cb0a:	2200      	movs	r2, #0
   2cb0c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2cb0e:	68bb      	ldr	r3, [r7, #8]
   2cb10:	7a1b      	ldrb	r3, [r3, #8]
   2cb12:	2b00      	cmp	r3, #0
   2cb14:	d007      	beq.n	2cb26 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2cb16:	2317      	movs	r3, #23
   2cb18:	18fb      	adds	r3, r7, r3
   2cb1a:	2217      	movs	r2, #23
   2cb1c:	18ba      	adds	r2, r7, r2
   2cb1e:	7812      	ldrb	r2, [r2, #0]
   2cb20:	2104      	movs	r1, #4
   2cb22:	430a      	orrs	r2, r1
   2cb24:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2cb26:	68bb      	ldr	r3, [r7, #8]
   2cb28:	7a5b      	ldrb	r3, [r3, #9]
   2cb2a:	2b01      	cmp	r3, #1
   2cb2c:	d107      	bne.n	2cb3e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2cb2e:	2317      	movs	r3, #23
   2cb30:	18fb      	adds	r3, r7, r3
   2cb32:	2217      	movs	r2, #23
   2cb34:	18ba      	adds	r2, r7, r2
   2cb36:	7812      	ldrb	r2, [r2, #0]
   2cb38:	2101      	movs	r1, #1
   2cb3a:	430a      	orrs	r2, r1
   2cb3c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2cb3e:	687b      	ldr	r3, [r7, #4]
   2cb40:	2217      	movs	r2, #23
   2cb42:	18ba      	adds	r2, r7, r2
   2cb44:	7812      	ldrb	r2, [r2, #0]
   2cb46:	701a      	strb	r2, [r3, #0]
}
   2cb48:	46c0      	nop			; (mov r8, r8)
   2cb4a:	46bd      	mov	sp, r7
   2cb4c:	b006      	add	sp, #24
   2cb4e:	bd80      	pop	{r7, pc}

0002cb50 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2cb50:	b580      	push	{r7, lr}
   2cb52:	b088      	sub	sp, #32
   2cb54:	af00      	add	r7, sp, #0
   2cb56:	60b9      	str	r1, [r7, #8]
   2cb58:	607a      	str	r2, [r7, #4]
   2cb5a:	230f      	movs	r3, #15
   2cb5c:	18fb      	adds	r3, r7, r3
   2cb5e:	1c02      	adds	r2, r0, #0
   2cb60:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2cb62:	230f      	movs	r3, #15
   2cb64:	18fb      	adds	r3, r7, r3
   2cb66:	781a      	ldrb	r2, [r3, #0]
   2cb68:	231b      	movs	r3, #27
   2cb6a:	18fb      	adds	r3, r7, r3
   2cb6c:	493e      	ldr	r1, [pc, #248]	; (2cc68 <_tcc_build_faults+0x118>)
   2cb6e:	5c8a      	ldrb	r2, [r1, r2]
   2cb70:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2cb72:	2300      	movs	r3, #0
   2cb74:	61fb      	str	r3, [r7, #28]
   2cb76:	e06e      	b.n	2cc56 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2cb78:	69fa      	ldr	r2, [r7, #28]
   2cb7a:	0013      	movs	r3, r2
   2cb7c:	009b      	lsls	r3, r3, #2
   2cb7e:	189b      	adds	r3, r3, r2
   2cb80:	005b      	lsls	r3, r3, #1
   2cb82:	3328      	adds	r3, #40	; 0x28
   2cb84:	68ba      	ldr	r2, [r7, #8]
   2cb86:	18d3      	adds	r3, r2, r3
   2cb88:	3304      	adds	r3, #4
   2cb8a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2cb8c:	697b      	ldr	r3, [r7, #20]
   2cb8e:	7a5b      	ldrb	r3, [r3, #9]
   2cb90:	221b      	movs	r2, #27
   2cb92:	18ba      	adds	r2, r7, r2
   2cb94:	7812      	ldrb	r2, [r2, #0]
   2cb96:	429a      	cmp	r2, r3
   2cb98:	d801      	bhi.n	2cb9e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2cb9a:	2317      	movs	r3, #23
   2cb9c:	e05f      	b.n	2cc5e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2cb9e:	697b      	ldr	r3, [r7, #20]
   2cba0:	781b      	ldrb	r3, [r3, #0]
   2cba2:	2b0f      	cmp	r3, #15
   2cba4:	d901      	bls.n	2cbaa <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2cba6:	2317      	movs	r3, #23
   2cba8:	e059      	b.n	2cc5e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2cbaa:	697b      	ldr	r3, [r7, #20]
   2cbac:	781b      	ldrb	r3, [r3, #0]
   2cbae:	061b      	lsls	r3, r3, #24
   2cbb0:	001a      	movs	r2, r3
   2cbb2:	23f0      	movs	r3, #240	; 0xf0
   2cbb4:	051b      	lsls	r3, r3, #20
   2cbb6:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2cbb8:	697b      	ldr	r3, [r7, #20]
   2cbba:	785b      	ldrb	r3, [r3, #1]
   2cbbc:	041b      	lsls	r3, r3, #16
   2cbbe:	0019      	movs	r1, r3
   2cbc0:	23ff      	movs	r3, #255	; 0xff
   2cbc2:	041b      	lsls	r3, r3, #16
   2cbc4:	400b      	ands	r3, r1
   2cbc6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2cbc8:	697b      	ldr	r3, [r7, #20]
   2cbca:	789b      	ldrb	r3, [r3, #2]
   2cbcc:	2b00      	cmp	r3, #0
   2cbce:	d001      	beq.n	2cbd4 <_tcc_build_faults+0x84>
   2cbd0:	2380      	movs	r3, #128	; 0x80
   2cbd2:	e000      	b.n	2cbd6 <_tcc_build_faults+0x86>
   2cbd4:	2300      	movs	r3, #0
   2cbd6:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2cbd8:	697b      	ldr	r3, [r7, #20]
   2cbda:	78db      	ldrb	r3, [r3, #3]
   2cbdc:	2b00      	cmp	r3, #0
   2cbde:	d001      	beq.n	2cbe4 <_tcc_build_faults+0x94>
   2cbe0:	2308      	movs	r3, #8
   2cbe2:	e000      	b.n	2cbe6 <_tcc_build_faults+0x96>
   2cbe4:	2300      	movs	r3, #0
   2cbe6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2cbe8:	697b      	ldr	r3, [r7, #20]
   2cbea:	791b      	ldrb	r3, [r3, #4]
   2cbec:	2b00      	cmp	r3, #0
   2cbee:	d001      	beq.n	2cbf4 <_tcc_build_faults+0xa4>
   2cbf0:	2310      	movs	r3, #16
   2cbf2:	e000      	b.n	2cbf6 <_tcc_build_faults+0xa6>
   2cbf4:	2300      	movs	r3, #0
   2cbf6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2cbf8:	697b      	ldr	r3, [r7, #20]
   2cbfa:	795b      	ldrb	r3, [r3, #5]
   2cbfc:	0019      	movs	r1, r3
   2cbfe:	2303      	movs	r3, #3
   2cc00:	400b      	ands	r3, r1
   2cc02:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2cc04:	697b      	ldr	r3, [r7, #20]
   2cc06:	799b      	ldrb	r3, [r3, #6]
   2cc08:	015b      	lsls	r3, r3, #5
   2cc0a:	0019      	movs	r1, r3
   2cc0c:	2360      	movs	r3, #96	; 0x60
   2cc0e:	400b      	ands	r3, r1
   2cc10:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2cc12:	697b      	ldr	r3, [r7, #20]
   2cc14:	79db      	ldrb	r3, [r3, #7]
   2cc16:	021b      	lsls	r3, r3, #8
   2cc18:	0019      	movs	r1, r3
   2cc1a:	23c0      	movs	r3, #192	; 0xc0
   2cc1c:	009b      	lsls	r3, r3, #2
   2cc1e:	400b      	ands	r3, r1
   2cc20:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2cc22:	697b      	ldr	r3, [r7, #20]
   2cc24:	7a1b      	ldrb	r3, [r3, #8]
   2cc26:	031b      	lsls	r3, r3, #12
   2cc28:	0019      	movs	r1, r3
   2cc2a:	23e0      	movs	r3, #224	; 0xe0
   2cc2c:	01db      	lsls	r3, r3, #7
   2cc2e:	400b      	ands	r3, r1
   2cc30:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2cc32:	697b      	ldr	r3, [r7, #20]
   2cc34:	7a5b      	ldrb	r3, [r3, #9]
   2cc36:	029b      	lsls	r3, r3, #10
   2cc38:	0019      	movs	r1, r3
   2cc3a:	23c0      	movs	r3, #192	; 0xc0
   2cc3c:	011b      	lsls	r3, r3, #4
   2cc3e:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2cc40:	4313      	orrs	r3, r2
   2cc42:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2cc44:	69fb      	ldr	r3, [r7, #28]
   2cc46:	009b      	lsls	r3, r3, #2
   2cc48:	687a      	ldr	r2, [r7, #4]
   2cc4a:	18d3      	adds	r3, r2, r3
   2cc4c:	693a      	ldr	r2, [r7, #16]
   2cc4e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2cc50:	69fb      	ldr	r3, [r7, #28]
   2cc52:	3301      	adds	r3, #1
   2cc54:	61fb      	str	r3, [r7, #28]
   2cc56:	69fb      	ldr	r3, [r7, #28]
   2cc58:	2b01      	cmp	r3, #1
   2cc5a:	dd8d      	ble.n	2cb78 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2cc5c:	2300      	movs	r3, #0
}
   2cc5e:	0018      	movs	r0, r3
   2cc60:	46bd      	mov	sp, r7
   2cc62:	b008      	add	sp, #32
   2cc64:	bd80      	pop	{r7, pc}
   2cc66:	46c0      	nop			; (mov r8, r8)
   2cc68:	0003c874 	.word	0x0003c874

0002cc6c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2cc6c:	b580      	push	{r7, lr}
   2cc6e:	b088      	sub	sp, #32
   2cc70:	af00      	add	r7, sp, #0
   2cc72:	60b9      	str	r1, [r7, #8]
   2cc74:	607a      	str	r2, [r7, #4]
   2cc76:	230f      	movs	r3, #15
   2cc78:	18fb      	adds	r3, r7, r3
   2cc7a:	1c02      	adds	r2, r0, #0
   2cc7c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2cc7e:	230f      	movs	r3, #15
   2cc80:	18fb      	adds	r3, r7, r3
   2cc82:	781a      	ldrb	r2, [r3, #0]
   2cc84:	2317      	movs	r3, #23
   2cc86:	18fb      	adds	r3, r7, r3
   2cc88:	492d      	ldr	r1, [pc, #180]	; (2cd40 <_tcc_build_drvctrl+0xd4>)
   2cc8a:	5c8a      	ldrb	r2, [r1, r2]
   2cc8c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2cc8e:	2300      	movs	r3, #0
   2cc90:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2cc92:	2300      	movs	r3, #0
   2cc94:	61fb      	str	r3, [r7, #28]
   2cc96:	e048      	b.n	2cd2a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2cc98:	68ba      	ldr	r2, [r7, #8]
   2cc9a:	2150      	movs	r1, #80	; 0x50
   2cc9c:	69fb      	ldr	r3, [r7, #28]
   2cc9e:	18d3      	adds	r3, r2, r3
   2cca0:	185b      	adds	r3, r3, r1
   2cca2:	781b      	ldrb	r3, [r3, #0]
   2cca4:	2b00      	cmp	r3, #0
   2cca6:	d010      	beq.n	2ccca <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2cca8:	2317      	movs	r3, #23
   2ccaa:	18fb      	adds	r3, r7, r3
   2ccac:	781a      	ldrb	r2, [r3, #0]
   2ccae:	69fb      	ldr	r3, [r7, #28]
   2ccb0:	429a      	cmp	r2, r3
   2ccb2:	d801      	bhi.n	2ccb8 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2ccb4:	2317      	movs	r3, #23
   2ccb6:	e03f      	b.n	2cd38 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2ccb8:	2380      	movs	r3, #128	; 0x80
   2ccba:	025a      	lsls	r2, r3, #9
   2ccbc:	69fb      	ldr	r3, [r7, #28]
   2ccbe:	409a      	lsls	r2, r3
   2ccc0:	0013      	movs	r3, r2
   2ccc2:	001a      	movs	r2, r3
   2ccc4:	69bb      	ldr	r3, [r7, #24]
   2ccc6:	4313      	orrs	r3, r2
   2ccc8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2ccca:	68ba      	ldr	r2, [r7, #8]
   2cccc:	69fb      	ldr	r3, [r7, #28]
   2ccce:	331c      	adds	r3, #28
   2ccd0:	005b      	lsls	r3, r3, #1
   2ccd2:	18d3      	adds	r3, r2, r3
   2ccd4:	3309      	adds	r3, #9
   2ccd6:	781b      	ldrb	r3, [r3, #0]
   2ccd8:	2b00      	cmp	r3, #0
   2ccda:	d023      	beq.n	2cd24 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2ccdc:	2317      	movs	r3, #23
   2ccde:	18fb      	adds	r3, r7, r3
   2cce0:	781a      	ldrb	r2, [r3, #0]
   2cce2:	69fb      	ldr	r3, [r7, #28]
   2cce4:	429a      	cmp	r2, r3
   2cce6:	d801      	bhi.n	2ccec <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2cce8:	2317      	movs	r3, #23
   2ccea:	e025      	b.n	2cd38 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2ccec:	68ba      	ldr	r2, [r7, #8]
   2ccee:	69fb      	ldr	r3, [r7, #28]
   2ccf0:	331c      	adds	r3, #28
   2ccf2:	005b      	lsls	r3, r3, #1
   2ccf4:	18d3      	adds	r3, r2, r3
   2ccf6:	3309      	adds	r3, #9
   2ccf8:	781b      	ldrb	r3, [r3, #0]
   2ccfa:	2b02      	cmp	r3, #2
   2ccfc:	d10a      	bne.n	2cd14 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2ccfe:	2302      	movs	r3, #2
   2cd00:	33ff      	adds	r3, #255	; 0xff
   2cd02:	001a      	movs	r2, r3
   2cd04:	69fb      	ldr	r3, [r7, #28]
   2cd06:	409a      	lsls	r2, r3
   2cd08:	0013      	movs	r3, r2
   2cd0a:	001a      	movs	r2, r3
   2cd0c:	69bb      	ldr	r3, [r7, #24]
   2cd0e:	4313      	orrs	r3, r2
   2cd10:	61bb      	str	r3, [r7, #24]
   2cd12:	e007      	b.n	2cd24 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2cd14:	2201      	movs	r2, #1
   2cd16:	69fb      	ldr	r3, [r7, #28]
   2cd18:	409a      	lsls	r2, r3
   2cd1a:	0013      	movs	r3, r2
   2cd1c:	001a      	movs	r2, r3
   2cd1e:	69bb      	ldr	r3, [r7, #24]
   2cd20:	4313      	orrs	r3, r2
   2cd22:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2cd24:	69fb      	ldr	r3, [r7, #28]
   2cd26:	3301      	adds	r3, #1
   2cd28:	61fb      	str	r3, [r7, #28]
   2cd2a:	69fb      	ldr	r3, [r7, #28]
   2cd2c:	2b07      	cmp	r3, #7
   2cd2e:	d9b3      	bls.n	2cc98 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2cd30:	687b      	ldr	r3, [r7, #4]
   2cd32:	69ba      	ldr	r2, [r7, #24]
   2cd34:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2cd36:	2300      	movs	r3, #0
}
   2cd38:	0018      	movs	r0, r3
   2cd3a:	46bd      	mov	sp, r7
   2cd3c:	b008      	add	sp, #32
   2cd3e:	bd80      	pop	{r7, pc}
   2cd40:	0003c878 	.word	0x0003c878

0002cd44 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2cd44:	b580      	push	{r7, lr}
   2cd46:	b088      	sub	sp, #32
   2cd48:	af00      	add	r7, sp, #0
   2cd4a:	60b9      	str	r1, [r7, #8]
   2cd4c:	607a      	str	r2, [r7, #4]
   2cd4e:	230f      	movs	r3, #15
   2cd50:	18fb      	adds	r3, r7, r3
   2cd52:	1c02      	adds	r2, r0, #0
   2cd54:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2cd56:	230f      	movs	r3, #15
   2cd58:	18fb      	adds	r3, r7, r3
   2cd5a:	781a      	ldrb	r2, [r3, #0]
   2cd5c:	2317      	movs	r3, #23
   2cd5e:	18fb      	adds	r3, r7, r3
   2cd60:	491d      	ldr	r1, [pc, #116]	; (2cdd8 <_tcc_build_waves+0x94>)
   2cd62:	5c8a      	ldrb	r2, [r1, r2]
   2cd64:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2cd66:	68bb      	ldr	r3, [r7, #8]
   2cd68:	3310      	adds	r3, #16
   2cd6a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2cd6c:	693b      	ldr	r3, [r7, #16]
   2cd6e:	7a5b      	ldrb	r3, [r3, #9]
   2cd70:	011b      	lsls	r3, r3, #4
   2cd72:	001a      	movs	r2, r3
   2cd74:	2330      	movs	r3, #48	; 0x30
   2cd76:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2cd78:	693b      	ldr	r3, [r7, #16]
   2cd7a:	7a1b      	ldrb	r3, [r3, #8]
   2cd7c:	0019      	movs	r1, r3
   2cd7e:	2307      	movs	r3, #7
   2cd80:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2cd82:	4313      	orrs	r3, r2
   2cd84:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2cd86:	2300      	movs	r3, #0
   2cd88:	61fb      	str	r3, [r7, #28]
   2cd8a:	e01a      	b.n	2cdc2 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2cd8c:	693a      	ldr	r2, [r7, #16]
   2cd8e:	69fb      	ldr	r3, [r7, #28]
   2cd90:	18d3      	adds	r3, r2, r3
   2cd92:	3304      	adds	r3, #4
   2cd94:	781b      	ldrb	r3, [r3, #0]
   2cd96:	2b00      	cmp	r3, #0
   2cd98:	d010      	beq.n	2cdbc <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2cd9a:	2317      	movs	r3, #23
   2cd9c:	18fb      	adds	r3, r7, r3
   2cd9e:	781a      	ldrb	r2, [r3, #0]
   2cda0:	69fb      	ldr	r3, [r7, #28]
   2cda2:	429a      	cmp	r2, r3
   2cda4:	dc01      	bgt.n	2cdaa <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2cda6:	2317      	movs	r3, #23
   2cda8:	e012      	b.n	2cdd0 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2cdaa:	2380      	movs	r3, #128	; 0x80
   2cdac:	025a      	lsls	r2, r3, #9
   2cdae:	69fb      	ldr	r3, [r7, #28]
   2cdb0:	409a      	lsls	r2, r3
   2cdb2:	0013      	movs	r3, r2
   2cdb4:	001a      	movs	r2, r3
   2cdb6:	69bb      	ldr	r3, [r7, #24]
   2cdb8:	4313      	orrs	r3, r2
   2cdba:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2cdbc:	69fb      	ldr	r3, [r7, #28]
   2cdbe:	3301      	adds	r3, #1
   2cdc0:	61fb      	str	r3, [r7, #28]
   2cdc2:	69fb      	ldr	r3, [r7, #28]
   2cdc4:	2b03      	cmp	r3, #3
   2cdc6:	dde1      	ble.n	2cd8c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2cdc8:	687b      	ldr	r3, [r7, #4]
   2cdca:	69ba      	ldr	r2, [r7, #24]
   2cdcc:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2cdce:	2300      	movs	r3, #0
}
   2cdd0:	0018      	movs	r0, r3
   2cdd2:	46bd      	mov	sp, r7
   2cdd4:	b008      	add	sp, #32
   2cdd6:	bd80      	pop	{r7, pc}
   2cdd8:	0003c874 	.word	0x0003c874

0002cddc <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2cddc:	b590      	push	{r4, r7, lr}
   2cdde:	b091      	sub	sp, #68	; 0x44
   2cde0:	af00      	add	r7, sp, #0
   2cde2:	60f8      	str	r0, [r7, #12]
   2cde4:	60b9      	str	r1, [r7, #8]
   2cde6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2cde8:	233b      	movs	r3, #59	; 0x3b
   2cdea:	18fc      	adds	r4, r7, r3
   2cdec:	68bb      	ldr	r3, [r7, #8]
   2cdee:	0018      	movs	r0, r3
   2cdf0:	4bc4      	ldr	r3, [pc, #784]	; (2d104 <tcc_init+0x328>)
   2cdf2:	4798      	blx	r3
   2cdf4:	0003      	movs	r3, r0
   2cdf6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2cdf8:	233b      	movs	r3, #59	; 0x3b
   2cdfa:	18fb      	adds	r3, r7, r3
   2cdfc:	781a      	ldrb	r2, [r3, #0]
   2cdfe:	4bc2      	ldr	r3, [pc, #776]	; (2d108 <tcc_init+0x32c>)
   2ce00:	0092      	lsls	r2, r2, #2
   2ce02:	58d3      	ldr	r3, [r2, r3]
   2ce04:	0019      	movs	r1, r3
   2ce06:	2002      	movs	r0, #2
   2ce08:	4bc0      	ldr	r3, [pc, #768]	; (2d10c <tcc_init+0x330>)
   2ce0a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2ce0c:	68bb      	ldr	r3, [r7, #8]
   2ce0e:	681b      	ldr	r3, [r3, #0]
   2ce10:	2202      	movs	r2, #2
   2ce12:	4013      	ands	r3, r2
   2ce14:	d001      	beq.n	2ce1a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2ce16:	231c      	movs	r3, #28
   2ce18:	e1be      	b.n	2d198 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2ce1a:	68bb      	ldr	r3, [r7, #8]
   2ce1c:	681b      	ldr	r3, [r3, #0]
   2ce1e:	2201      	movs	r2, #1
   2ce20:	4013      	ands	r3, r2
   2ce22:	d001      	beq.n	2ce28 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2ce24:	231c      	movs	r3, #28
   2ce26:	e1b7      	b.n	2d198 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2ce28:	233b      	movs	r3, #59	; 0x3b
   2ce2a:	18fb      	adds	r3, r7, r3
   2ce2c:	781a      	ldrb	r2, [r3, #0]
   2ce2e:	4bb8      	ldr	r3, [pc, #736]	; (2d110 <tcc_init+0x334>)
   2ce30:	0092      	lsls	r2, r2, #2
   2ce32:	58d3      	ldr	r3, [r2, r3]
   2ce34:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2ce36:	687b      	ldr	r3, [r7, #4]
   2ce38:	681a      	ldr	r2, [r3, #0]
   2ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ce3c:	429a      	cmp	r2, r3
   2ce3e:	d804      	bhi.n	2ce4a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2ce40:	687b      	ldr	r3, [r7, #4]
   2ce42:	685a      	ldr	r2, [r3, #4]
   2ce44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ce46:	429a      	cmp	r2, r3
   2ce48:	d901      	bls.n	2ce4e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2ce4a:	2317      	movs	r3, #23
   2ce4c:	e1a4      	b.n	2d198 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ce4e:	2300      	movs	r3, #0
   2ce50:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce52:	e00e      	b.n	2ce72 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2ce54:	687a      	ldr	r2, [r7, #4]
   2ce56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce58:	3306      	adds	r3, #6
   2ce5a:	009b      	lsls	r3, r3, #2
   2ce5c:	18d3      	adds	r3, r2, r3
   2ce5e:	3304      	adds	r3, #4
   2ce60:	681a      	ldr	r2, [r3, #0]
   2ce62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ce64:	429a      	cmp	r2, r3
   2ce66:	d901      	bls.n	2ce6c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2ce68:	2317      	movs	r3, #23
   2ce6a:	e195      	b.n	2d198 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ce6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce6e:	3301      	adds	r3, #1
   2ce70:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce74:	2b03      	cmp	r3, #3
   2ce76:	dded      	ble.n	2ce54 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ce78:	2300      	movs	r3, #0
   2ce7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce7c:	e019      	b.n	2ceb2 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2ce7e:	687a      	ldr	r2, [r7, #4]
   2ce80:	2198      	movs	r1, #152	; 0x98
   2ce82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce84:	18d3      	adds	r3, r2, r3
   2ce86:	185b      	adds	r3, r3, r1
   2ce88:	781b      	ldrb	r3, [r3, #0]
   2ce8a:	2201      	movs	r2, #1
   2ce8c:	4053      	eors	r3, r2
   2ce8e:	b2db      	uxtb	r3, r3
   2ce90:	2b00      	cmp	r3, #0
   2ce92:	d10a      	bne.n	2ceaa <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2ce94:	233b      	movs	r3, #59	; 0x3b
   2ce96:	18fb      	adds	r3, r7, r3
   2ce98:	781b      	ldrb	r3, [r3, #0]
   2ce9a:	4a9e      	ldr	r2, [pc, #632]	; (2d114 <tcc_init+0x338>)
   2ce9c:	5cd3      	ldrb	r3, [r2, r3]
   2ce9e:	001a      	movs	r2, r3
   2cea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cea2:	429a      	cmp	r2, r3
   2cea4:	dc02      	bgt.n	2ceac <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2cea6:	2317      	movs	r3, #23
   2cea8:	e176      	b.n	2d198 <tcc_init+0x3bc>
			continue;
   2ceaa:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ceac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ceae:	3301      	adds	r3, #1
   2ceb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ceb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ceb4:	2b07      	cmp	r3, #7
   2ceb6:	dde2      	ble.n	2ce7e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2ceb8:	2300      	movs	r3, #0
   2ceba:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2cebc:	2333      	movs	r3, #51	; 0x33
   2cebe:	18fc      	adds	r4, r7, r3
   2cec0:	232c      	movs	r3, #44	; 0x2c
   2cec2:	18fa      	adds	r2, r7, r3
   2cec4:	6879      	ldr	r1, [r7, #4]
   2cec6:	233b      	movs	r3, #59	; 0x3b
   2cec8:	18fb      	adds	r3, r7, r3
   2ceca:	781b      	ldrb	r3, [r3, #0]
   2cecc:	0018      	movs	r0, r3
   2cece:	4b92      	ldr	r3, [pc, #584]	; (2d118 <tcc_init+0x33c>)
   2ced0:	4798      	blx	r3
   2ced2:	0003      	movs	r3, r0
   2ced4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ced6:	2333      	movs	r3, #51	; 0x33
   2ced8:	18fb      	adds	r3, r7, r3
   2ceda:	781b      	ldrb	r3, [r3, #0]
   2cedc:	2b00      	cmp	r3, #0
   2cede:	d003      	beq.n	2cee8 <tcc_init+0x10c>
		return status;
   2cee0:	2333      	movs	r3, #51	; 0x33
   2cee2:	18fb      	adds	r3, r7, r3
   2cee4:	781b      	ldrb	r3, [r3, #0]
   2cee6:	e157      	b.n	2d198 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2cee8:	232b      	movs	r3, #43	; 0x2b
   2ceea:	18fa      	adds	r2, r7, r3
   2ceec:	6879      	ldr	r1, [r7, #4]
   2ceee:	233b      	movs	r3, #59	; 0x3b
   2cef0:	18fb      	adds	r3, r7, r3
   2cef2:	781b      	ldrb	r3, [r3, #0]
   2cef4:	0018      	movs	r0, r3
   2cef6:	4b89      	ldr	r3, [pc, #548]	; (2d11c <tcc_init+0x340>)
   2cef8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2cefa:	2333      	movs	r3, #51	; 0x33
   2cefc:	18fc      	adds	r4, r7, r3
   2cefe:	2320      	movs	r3, #32
   2cf00:	18fa      	adds	r2, r7, r3
   2cf02:	6879      	ldr	r1, [r7, #4]
   2cf04:	233b      	movs	r3, #59	; 0x3b
   2cf06:	18fb      	adds	r3, r7, r3
   2cf08:	781b      	ldrb	r3, [r3, #0]
   2cf0a:	0018      	movs	r0, r3
   2cf0c:	4b84      	ldr	r3, [pc, #528]	; (2d120 <tcc_init+0x344>)
   2cf0e:	4798      	blx	r3
   2cf10:	0003      	movs	r3, r0
   2cf12:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cf14:	2333      	movs	r3, #51	; 0x33
   2cf16:	18fb      	adds	r3, r7, r3
   2cf18:	781b      	ldrb	r3, [r3, #0]
   2cf1a:	2b00      	cmp	r3, #0
   2cf1c:	d003      	beq.n	2cf26 <tcc_init+0x14a>
		return status;
   2cf1e:	2333      	movs	r3, #51	; 0x33
   2cf20:	18fb      	adds	r3, r7, r3
   2cf22:	781b      	ldrb	r3, [r3, #0]
   2cf24:	e138      	b.n	2d198 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2cf26:	2300      	movs	r3, #0
   2cf28:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2cf2a:	2333      	movs	r3, #51	; 0x33
   2cf2c:	18fc      	adds	r4, r7, r3
   2cf2e:	231c      	movs	r3, #28
   2cf30:	18fa      	adds	r2, r7, r3
   2cf32:	6879      	ldr	r1, [r7, #4]
   2cf34:	233b      	movs	r3, #59	; 0x3b
   2cf36:	18fb      	adds	r3, r7, r3
   2cf38:	781b      	ldrb	r3, [r3, #0]
   2cf3a:	0018      	movs	r0, r3
   2cf3c:	4b79      	ldr	r3, [pc, #484]	; (2d124 <tcc_init+0x348>)
   2cf3e:	4798      	blx	r3
   2cf40:	0003      	movs	r3, r0
   2cf42:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cf44:	2333      	movs	r3, #51	; 0x33
   2cf46:	18fb      	adds	r3, r7, r3
   2cf48:	781b      	ldrb	r3, [r3, #0]
   2cf4a:	2b00      	cmp	r3, #0
   2cf4c:	d003      	beq.n	2cf56 <tcc_init+0x17a>
		return status;
   2cf4e:	2333      	movs	r3, #51	; 0x33
   2cf50:	18fb      	adds	r3, r7, r3
   2cf52:	781b      	ldrb	r3, [r3, #0]
   2cf54:	e120      	b.n	2d198 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2cf56:	2333      	movs	r3, #51	; 0x33
   2cf58:	18fc      	adds	r4, r7, r3
   2cf5a:	2318      	movs	r3, #24
   2cf5c:	18fa      	adds	r2, r7, r3
   2cf5e:	6879      	ldr	r1, [r7, #4]
   2cf60:	233b      	movs	r3, #59	; 0x3b
   2cf62:	18fb      	adds	r3, r7, r3
   2cf64:	781b      	ldrb	r3, [r3, #0]
   2cf66:	0018      	movs	r0, r3
   2cf68:	4b6f      	ldr	r3, [pc, #444]	; (2d128 <tcc_init+0x34c>)
   2cf6a:	4798      	blx	r3
   2cf6c:	0003      	movs	r3, r0
   2cf6e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cf70:	2333      	movs	r3, #51	; 0x33
   2cf72:	18fb      	adds	r3, r7, r3
   2cf74:	781b      	ldrb	r3, [r3, #0]
   2cf76:	2b00      	cmp	r3, #0
   2cf78:	d003      	beq.n	2cf82 <tcc_init+0x1a6>
		return status;
   2cf7a:	2333      	movs	r3, #51	; 0x33
   2cf7c:	18fb      	adds	r3, r7, r3
   2cf7e:	781b      	ldrb	r3, [r3, #0]
   2cf80:	e10a      	b.n	2d198 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2cf82:	2300      	movs	r3, #0
   2cf84:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cf86:	e009      	b.n	2cf9c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2cf88:	68fa      	ldr	r2, [r7, #12]
   2cf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf8c:	009b      	lsls	r3, r3, #2
   2cf8e:	18d3      	adds	r3, r2, r3
   2cf90:	3304      	adds	r3, #4
   2cf92:	2200      	movs	r2, #0
   2cf94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2cf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf98:	3301      	adds	r3, #1
   2cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf9e:	2b0b      	cmp	r3, #11
   2cfa0:	ddf2      	ble.n	2cf88 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2cfa2:	68fb      	ldr	r3, [r7, #12]
   2cfa4:	2200      	movs	r2, #0
   2cfa6:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2cfa8:	68fb      	ldr	r3, [r7, #12]
   2cfaa:	2200      	movs	r2, #0
   2cfac:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2cfae:	233b      	movs	r3, #59	; 0x3b
   2cfb0:	18fb      	adds	r3, r7, r3
   2cfb2:	781a      	ldrb	r2, [r3, #0]
   2cfb4:	4b5d      	ldr	r3, [pc, #372]	; (2d12c <tcc_init+0x350>)
   2cfb6:	0092      	lsls	r2, r2, #2
   2cfb8:	68f9      	ldr	r1, [r7, #12]
   2cfba:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2cfbc:	68fb      	ldr	r3, [r7, #12]
   2cfbe:	68ba      	ldr	r2, [r7, #8]
   2cfc0:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2cfc2:	687b      	ldr	r3, [r7, #4]
   2cfc4:	22a0      	movs	r2, #160	; 0xa0
   2cfc6:	5c99      	ldrb	r1, [r3, r2]
   2cfc8:	68fb      	ldr	r3, [r7, #12]
   2cfca:	223c      	movs	r2, #60	; 0x3c
   2cfcc:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2cfce:	2314      	movs	r3, #20
   2cfd0:	18fb      	adds	r3, r7, r3
   2cfd2:	0018      	movs	r0, r3
   2cfd4:	4b56      	ldr	r3, [pc, #344]	; (2d130 <tcc_init+0x354>)
   2cfd6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2cfd8:	687b      	ldr	r3, [r7, #4]
   2cfda:	7a9a      	ldrb	r2, [r3, #10]
   2cfdc:	2314      	movs	r3, #20
   2cfde:	18fb      	adds	r3, r7, r3
   2cfe0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2cfe2:	233b      	movs	r3, #59	; 0x3b
   2cfe4:	18fb      	adds	r3, r7, r3
   2cfe6:	781b      	ldrb	r3, [r3, #0]
   2cfe8:	4a52      	ldr	r2, [pc, #328]	; (2d134 <tcc_init+0x358>)
   2cfea:	5cd3      	ldrb	r3, [r2, r3]
   2cfec:	2214      	movs	r2, #20
   2cfee:	18ba      	adds	r2, r7, r2
   2cff0:	0011      	movs	r1, r2
   2cff2:	0018      	movs	r0, r3
   2cff4:	4b50      	ldr	r3, [pc, #320]	; (2d138 <tcc_init+0x35c>)
   2cff6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2cff8:	233b      	movs	r3, #59	; 0x3b
   2cffa:	18fb      	adds	r3, r7, r3
   2cffc:	781b      	ldrb	r3, [r3, #0]
   2cffe:	4a4d      	ldr	r2, [pc, #308]	; (2d134 <tcc_init+0x358>)
   2d000:	5cd3      	ldrb	r3, [r2, r3]
   2d002:	0018      	movs	r0, r3
   2d004:	4b4d      	ldr	r3, [pc, #308]	; (2d13c <tcc_init+0x360>)
   2d006:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2d008:	2300      	movs	r3, #0
   2d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d00c:	e02d      	b.n	2d06a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2d00e:	687a      	ldr	r2, [r7, #4]
   2d010:	2198      	movs	r1, #152	; 0x98
   2d012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d014:	18d3      	adds	r3, r2, r3
   2d016:	185b      	adds	r3, r3, r1
   2d018:	781b      	ldrb	r3, [r3, #0]
   2d01a:	2201      	movs	r2, #1
   2d01c:	4053      	eors	r3, r2
   2d01e:	b2db      	uxtb	r3, r3
   2d020:	2b00      	cmp	r3, #0
   2d022:	d11e      	bne.n	2d062 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2d024:	2310      	movs	r3, #16
   2d026:	18fb      	adds	r3, r7, r3
   2d028:	0018      	movs	r0, r3
   2d02a:	4b45      	ldr	r3, [pc, #276]	; (2d140 <tcc_init+0x364>)
   2d02c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2d02e:	687b      	ldr	r3, [r7, #4]
   2d030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d032:	321e      	adds	r2, #30
   2d034:	0092      	lsls	r2, r2, #2
   2d036:	58d3      	ldr	r3, [r2, r3]
   2d038:	b2da      	uxtb	r2, r3
   2d03a:	2310      	movs	r3, #16
   2d03c:	18fb      	adds	r3, r7, r3
   2d03e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2d040:	2310      	movs	r3, #16
   2d042:	18fb      	adds	r3, r7, r3
   2d044:	2201      	movs	r2, #1
   2d046:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2d048:	687b      	ldr	r3, [r7, #4]
   2d04a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d04c:	3216      	adds	r2, #22
   2d04e:	0092      	lsls	r2, r2, #2
   2d050:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2d052:	b2db      	uxtb	r3, r3
   2d054:	2210      	movs	r2, #16
   2d056:	18ba      	adds	r2, r7, r2
   2d058:	0011      	movs	r1, r2
   2d05a:	0018      	movs	r0, r3
   2d05c:	4b39      	ldr	r3, [pc, #228]	; (2d144 <tcc_init+0x368>)
   2d05e:	4798      	blx	r3
   2d060:	e000      	b.n	2d064 <tcc_init+0x288>
			continue;
   2d062:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2d064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d066:	3301      	adds	r3, #1
   2d068:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d06a:	233b      	movs	r3, #59	; 0x3b
   2d06c:	18fb      	adds	r3, r7, r3
   2d06e:	781b      	ldrb	r3, [r3, #0]
   2d070:	4a28      	ldr	r2, [pc, #160]	; (2d114 <tcc_init+0x338>)
   2d072:	5cd3      	ldrb	r3, [r2, r3]
   2d074:	001a      	movs	r2, r3
   2d076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d078:	429a      	cmp	r2, r3
   2d07a:	dcc8      	bgt.n	2d00e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2d07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d07e:	68bb      	ldr	r3, [r7, #8]
   2d080:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2d082:	46c0      	nop			; (mov r8, r8)
   2d084:	68bb      	ldr	r3, [r7, #8]
   2d086:	689b      	ldr	r3, [r3, #8]
   2d088:	2204      	movs	r2, #4
   2d08a:	4013      	ands	r3, r2
   2d08c:	d1fa      	bne.n	2d084 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2d08e:	68bb      	ldr	r3, [r7, #8]
   2d090:	22ff      	movs	r2, #255	; 0xff
   2d092:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2d094:	46c0      	nop			; (mov r8, r8)
   2d096:	68bb      	ldr	r3, [r7, #8]
   2d098:	689b      	ldr	r3, [r3, #8]
   2d09a:	2204      	movs	r2, #4
   2d09c:	4013      	ands	r3, r2
   2d09e:	d1fa      	bne.n	2d096 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2d0a0:	232b      	movs	r3, #43	; 0x2b
   2d0a2:	18fb      	adds	r3, r7, r3
   2d0a4:	781a      	ldrb	r2, [r3, #0]
   2d0a6:	68bb      	ldr	r3, [r7, #8]
   2d0a8:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2d0aa:	2320      	movs	r3, #32
   2d0ac:	18fb      	adds	r3, r7, r3
   2d0ae:	681a      	ldr	r2, [r3, #0]
   2d0b0:	68bb      	ldr	r3, [r7, #8]
   2d0b2:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2d0b4:	2320      	movs	r3, #32
   2d0b6:	18fb      	adds	r3, r7, r3
   2d0b8:	685a      	ldr	r2, [r3, #4]
   2d0ba:	68bb      	ldr	r3, [r7, #8]
   2d0bc:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2d0be:	69fa      	ldr	r2, [r7, #28]
   2d0c0:	68bb      	ldr	r3, [r7, #8]
   2d0c2:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2d0c4:	46c0      	nop			; (mov r8, r8)
   2d0c6:	68bb      	ldr	r3, [r7, #8]
   2d0c8:	689b      	ldr	r3, [r3, #8]
   2d0ca:	4a1f      	ldr	r2, [pc, #124]	; (2d148 <tcc_init+0x36c>)
   2d0cc:	4013      	ands	r3, r2
   2d0ce:	d1fa      	bne.n	2d0c6 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2d0d0:	69ba      	ldr	r2, [r7, #24]
   2d0d2:	68bb      	ldr	r3, [r7, #8]
   2d0d4:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2d0d6:	46c0      	nop			; (mov r8, r8)
   2d0d8:	68bb      	ldr	r3, [r7, #8]
   2d0da:	689b      	ldr	r3, [r3, #8]
   2d0dc:	2210      	movs	r2, #16
   2d0de:	4013      	ands	r3, r2
   2d0e0:	d1fa      	bne.n	2d0d8 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2d0e2:	687b      	ldr	r3, [r7, #4]
   2d0e4:	681a      	ldr	r2, [r3, #0]
   2d0e6:	68bb      	ldr	r3, [r7, #8]
   2d0e8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2d0ea:	46c0      	nop			; (mov r8, r8)
   2d0ec:	68bb      	ldr	r3, [r7, #8]
   2d0ee:	689b      	ldr	r3, [r3, #8]
   2d0f0:	4a16      	ldr	r2, [pc, #88]	; (2d14c <tcc_init+0x370>)
   2d0f2:	4013      	ands	r3, r2
   2d0f4:	d1fa      	bne.n	2d0ec <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2d0f6:	687b      	ldr	r3, [r7, #4]
   2d0f8:	685a      	ldr	r2, [r3, #4]
   2d0fa:	68bb      	ldr	r3, [r7, #8]
   2d0fc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2d0fe:	2300      	movs	r3, #0
   2d100:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d102:	e03f      	b.n	2d184 <tcc_init+0x3a8>
   2d104:	0002c745 	.word	0x0002c745
   2d108:	0003c85c 	.word	0x0003c85c
   2d10c:	0002c6c1 	.word	0x0002c6c1
   2d110:	0003c868 	.word	0x0003c868
   2d114:	0003c878 	.word	0x0003c878
   2d118:	0002ca51 	.word	0x0002ca51
   2d11c:	0002caf5 	.word	0x0002caf5
   2d120:	0002cb51 	.word	0x0002cb51
   2d124:	0002cc6d 	.word	0x0002cc6d
   2d128:	0002cd45 	.word	0x0002cd45
   2d12c:	20005a9c 	.word	0x20005a9c
   2d130:	0002c6a9 	.word	0x0002c6a9
   2d134:	0003c858 	.word	0x0003c858
   2d138:	0002c2c1 	.word	0x0002c2c1
   2d13c:	0002c305 	.word	0x0002c305
   2d140:	0002c71d 	.word	0x0002c71d
   2d144:	0002c621 	.word	0x0002c621
   2d148:	00020040 	.word	0x00020040
   2d14c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2d150:	46c0      	nop			; (mov r8, r8)
   2d152:	68bb      	ldr	r3, [r7, #8]
   2d154:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2d156:	4912      	ldr	r1, [pc, #72]	; (2d1a0 <tcc_init+0x3c4>)
   2d158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d15a:	4091      	lsls	r1, r2
   2d15c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2d15e:	4013      	ands	r3, r2
   2d160:	d1f7      	bne.n	2d152 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2d162:	687a      	ldr	r2, [r7, #4]
   2d164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d166:	3306      	adds	r3, #6
   2d168:	009b      	lsls	r3, r3, #2
   2d16a:	18d3      	adds	r3, r2, r3
   2d16c:	3304      	adds	r3, #4
   2d16e:	681a      	ldr	r2, [r3, #0]
   2d170:	68b9      	ldr	r1, [r7, #8]
   2d172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d174:	3310      	adds	r3, #16
   2d176:	009b      	lsls	r3, r3, #2
   2d178:	18cb      	adds	r3, r1, r3
   2d17a:	3304      	adds	r3, #4
   2d17c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2d17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d180:	3301      	adds	r3, #1
   2d182:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d184:	233b      	movs	r3, #59	; 0x3b
   2d186:	18fb      	adds	r3, r7, r3
   2d188:	781b      	ldrb	r3, [r3, #0]
   2d18a:	4a06      	ldr	r2, [pc, #24]	; (2d1a4 <tcc_init+0x3c8>)
   2d18c:	5cd3      	ldrb	r3, [r2, r3]
   2d18e:	001a      	movs	r2, r3
   2d190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d192:	429a      	cmp	r2, r3
   2d194:	dcdc      	bgt.n	2d150 <tcc_init+0x374>
	}

	return STATUS_OK;
   2d196:	2300      	movs	r3, #0
}
   2d198:	0018      	movs	r0, r3
   2d19a:	46bd      	mov	sp, r7
   2d19c:	b011      	add	sp, #68	; 0x44
   2d19e:	bd90      	pop	{r4, r7, pc}
   2d1a0:	00080100 	.word	0x00080100
   2d1a4:	0003c874 	.word	0x0003c874

0002d1a8 <system_interrupt_enable>:
{
   2d1a8:	b580      	push	{r7, lr}
   2d1aa:	b082      	sub	sp, #8
   2d1ac:	af00      	add	r7, sp, #0
   2d1ae:	0002      	movs	r2, r0
   2d1b0:	1dfb      	adds	r3, r7, #7
   2d1b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2d1b4:	4b06      	ldr	r3, [pc, #24]	; (2d1d0 <system_interrupt_enable+0x28>)
   2d1b6:	1dfa      	adds	r2, r7, #7
   2d1b8:	7812      	ldrb	r2, [r2, #0]
   2d1ba:	0011      	movs	r1, r2
   2d1bc:	221f      	movs	r2, #31
   2d1be:	400a      	ands	r2, r1
   2d1c0:	2101      	movs	r1, #1
   2d1c2:	4091      	lsls	r1, r2
   2d1c4:	000a      	movs	r2, r1
   2d1c6:	601a      	str	r2, [r3, #0]
}
   2d1c8:	46c0      	nop			; (mov r8, r8)
   2d1ca:	46bd      	mov	sp, r7
   2d1cc:	b002      	add	sp, #8
   2d1ce:	bd80      	pop	{r7, pc}
   2d1d0:	e000e100 	.word	0xe000e100

0002d1d4 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2d1d4:	b580      	push	{r7, lr}
   2d1d6:	b082      	sub	sp, #8
   2d1d8:	af00      	add	r7, sp, #0
   2d1da:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2d1dc:	4a04      	ldr	r2, [pc, #16]	; (2d1f0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2d1de:	687b      	ldr	r3, [r7, #4]
   2d1e0:	18d3      	adds	r3, r2, r3
   2d1e2:	781b      	ldrb	r3, [r3, #0]
   2d1e4:	b25b      	sxtb	r3, r3
}
   2d1e6:	0018      	movs	r0, r3
   2d1e8:	46bd      	mov	sp, r7
   2d1ea:	b002      	add	sp, #8
   2d1ec:	bd80      	pop	{r7, pc}
   2d1ee:	46c0      	nop			; (mov r8, r8)
   2d1f0:	20000130 	.word	0x20000130

0002d1f4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2d1f4:	b580      	push	{r7, lr}
   2d1f6:	b084      	sub	sp, #16
   2d1f8:	af00      	add	r7, sp, #0
   2d1fa:	60f8      	str	r0, [r7, #12]
   2d1fc:	60b9      	str	r1, [r7, #8]
   2d1fe:	1dfb      	adds	r3, r7, #7
   2d200:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2d202:	1dfb      	adds	r3, r7, #7
   2d204:	781b      	ldrb	r3, [r3, #0]
   2d206:	68fa      	ldr	r2, [r7, #12]
   2d208:	009b      	lsls	r3, r3, #2
   2d20a:	18d3      	adds	r3, r2, r3
   2d20c:	3304      	adds	r3, #4
   2d20e:	68ba      	ldr	r2, [r7, #8]
   2d210:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2d212:	68fb      	ldr	r3, [r7, #12]
   2d214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2d216:	1dfb      	adds	r3, r7, #7
   2d218:	7819      	ldrb	r1, [r3, #0]
   2d21a:	4b05      	ldr	r3, [pc, #20]	; (2d230 <tcc_register_callback+0x3c>)
   2d21c:	0089      	lsls	r1, r1, #2
   2d21e:	58cb      	ldr	r3, [r1, r3]
   2d220:	431a      	orrs	r2, r3
   2d222:	68fb      	ldr	r3, [r7, #12]
   2d224:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2d226:	2300      	movs	r3, #0
}
   2d228:	0018      	movs	r0, r3
   2d22a:	46bd      	mov	sp, r7
   2d22c:	b004      	add	sp, #16
   2d22e:	bd80      	pop	{r7, pc}
   2d230:	0003c87c 	.word	0x0003c87c

0002d234 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2d234:	b580      	push	{r7, lr}
   2d236:	b082      	sub	sp, #8
   2d238:	af00      	add	r7, sp, #0
   2d23a:	6078      	str	r0, [r7, #4]
   2d23c:	000a      	movs	r2, r1
   2d23e:	1cfb      	adds	r3, r7, #3
   2d240:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2d242:	687b      	ldr	r3, [r7, #4]
   2d244:	681b      	ldr	r3, [r3, #0]
   2d246:	0018      	movs	r0, r3
   2d248:	4b0f      	ldr	r3, [pc, #60]	; (2d288 <tcc_enable_callback+0x54>)
   2d24a:	4798      	blx	r3
   2d24c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2d24e:	0018      	movs	r0, r3
   2d250:	4b0e      	ldr	r3, [pc, #56]	; (2d28c <tcc_enable_callback+0x58>)
   2d252:	4798      	blx	r3
   2d254:	0003      	movs	r3, r0
   2d256:	0018      	movs	r0, r3
   2d258:	4b0d      	ldr	r3, [pc, #52]	; (2d290 <tcc_enable_callback+0x5c>)
   2d25a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2d25c:	687b      	ldr	r3, [r7, #4]
   2d25e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2d260:	1cfb      	adds	r3, r7, #3
   2d262:	7819      	ldrb	r1, [r3, #0]
   2d264:	4b0b      	ldr	r3, [pc, #44]	; (2d294 <tcc_enable_callback+0x60>)
   2d266:	0089      	lsls	r1, r1, #2
   2d268:	58cb      	ldr	r3, [r1, r3]
   2d26a:	431a      	orrs	r2, r3
   2d26c:	687b      	ldr	r3, [r7, #4]
   2d26e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2d270:	687b      	ldr	r3, [r7, #4]
   2d272:	681b      	ldr	r3, [r3, #0]
   2d274:	1cfa      	adds	r2, r7, #3
   2d276:	7811      	ldrb	r1, [r2, #0]
   2d278:	4a06      	ldr	r2, [pc, #24]	; (2d294 <tcc_enable_callback+0x60>)
   2d27a:	0089      	lsls	r1, r1, #2
   2d27c:	588a      	ldr	r2, [r1, r2]
   2d27e:	629a      	str	r2, [r3, #40]	; 0x28
}
   2d280:	46c0      	nop			; (mov r8, r8)
   2d282:	46bd      	mov	sp, r7
   2d284:	b002      	add	sp, #8
   2d286:	bd80      	pop	{r7, pc}
   2d288:	0002c745 	.word	0x0002c745
   2d28c:	0002d1d5 	.word	0x0002d1d5
   2d290:	0002d1a9 	.word	0x0002d1a9
   2d294:	0003c87c 	.word	0x0003c87c

0002d298 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2d298:	b580      	push	{r7, lr}
   2d29a:	af00      	add	r7, sp, #0
   2d29c:	2000      	movs	r0, #0
   2d29e:	4b02      	ldr	r3, [pc, #8]	; (2d2a8 <TCC0_Handler+0x10>)
   2d2a0:	4798      	blx	r3
   2d2a2:	46c0      	nop			; (mov r8, r8)
   2d2a4:	46bd      	mov	sp, r7
   2d2a6:	bd80      	pop	{r7, pc}
   2d2a8:	0002d2d5 	.word	0x0002d2d5

0002d2ac <TCC1_Handler>:
   2d2ac:	b580      	push	{r7, lr}
   2d2ae:	af00      	add	r7, sp, #0
   2d2b0:	2001      	movs	r0, #1
   2d2b2:	4b02      	ldr	r3, [pc, #8]	; (2d2bc <TCC1_Handler+0x10>)
   2d2b4:	4798      	blx	r3
   2d2b6:	46c0      	nop			; (mov r8, r8)
   2d2b8:	46bd      	mov	sp, r7
   2d2ba:	bd80      	pop	{r7, pc}
   2d2bc:	0002d2d5 	.word	0x0002d2d5

0002d2c0 <TCC2_Handler>:
   2d2c0:	b580      	push	{r7, lr}
   2d2c2:	af00      	add	r7, sp, #0
   2d2c4:	2002      	movs	r0, #2
   2d2c6:	4b02      	ldr	r3, [pc, #8]	; (2d2d0 <TCC2_Handler+0x10>)
   2d2c8:	4798      	blx	r3
   2d2ca:	46c0      	nop			; (mov r8, r8)
   2d2cc:	46bd      	mov	sp, r7
   2d2ce:	bd80      	pop	{r7, pc}
   2d2d0:	0002d2d5 	.word	0x0002d2d5

0002d2d4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2d2d4:	b580      	push	{r7, lr}
   2d2d6:	b086      	sub	sp, #24
   2d2d8:	af00      	add	r7, sp, #0
   2d2da:	0002      	movs	r2, r0
   2d2dc:	1dfb      	adds	r3, r7, #7
   2d2de:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2d2e0:	1dfb      	adds	r3, r7, #7
   2d2e2:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2d2e4:	4b18      	ldr	r3, [pc, #96]	; (2d348 <_tcc_interrupt_handler+0x74>)
   2d2e6:	0092      	lsls	r2, r2, #2
   2d2e8:	58d3      	ldr	r3, [r2, r3]
   2d2ea:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d2ec:	693b      	ldr	r3, [r7, #16]
   2d2ee:	681b      	ldr	r3, [r3, #0]
   2d2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2d2f2:	693b      	ldr	r3, [r7, #16]
   2d2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d2f6:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2d2f8:	693b      	ldr	r3, [r7, #16]
   2d2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d2fc:	4013      	ands	r3, r2
   2d2fe:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d300:	2300      	movs	r3, #0
   2d302:	617b      	str	r3, [r7, #20]
   2d304:	e019      	b.n	2d33a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2d306:	4b11      	ldr	r3, [pc, #68]	; (2d34c <_tcc_interrupt_handler+0x78>)
   2d308:	697a      	ldr	r2, [r7, #20]
   2d30a:	0092      	lsls	r2, r2, #2
   2d30c:	58d3      	ldr	r3, [r2, r3]
   2d30e:	68fa      	ldr	r2, [r7, #12]
   2d310:	4013      	ands	r3, r2
   2d312:	d00f      	beq.n	2d334 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2d314:	693a      	ldr	r2, [r7, #16]
   2d316:	697b      	ldr	r3, [r7, #20]
   2d318:	009b      	lsls	r3, r3, #2
   2d31a:	18d3      	adds	r3, r2, r3
   2d31c:	3304      	adds	r3, #4
   2d31e:	681b      	ldr	r3, [r3, #0]
   2d320:	693a      	ldr	r2, [r7, #16]
   2d322:	0010      	movs	r0, r2
   2d324:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2d326:	693b      	ldr	r3, [r7, #16]
   2d328:	681b      	ldr	r3, [r3, #0]
   2d32a:	4a08      	ldr	r2, [pc, #32]	; (2d34c <_tcc_interrupt_handler+0x78>)
   2d32c:	6979      	ldr	r1, [r7, #20]
   2d32e:	0089      	lsls	r1, r1, #2
   2d330:	588a      	ldr	r2, [r1, r2]
   2d332:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d334:	697b      	ldr	r3, [r7, #20]
   2d336:	3301      	adds	r3, #1
   2d338:	617b      	str	r3, [r7, #20]
   2d33a:	697b      	ldr	r3, [r7, #20]
   2d33c:	2b0b      	cmp	r3, #11
   2d33e:	dde2      	ble.n	2d306 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2d340:	46c0      	nop			; (mov r8, r8)
   2d342:	46bd      	mov	sp, r7
   2d344:	b006      	add	sp, #24
   2d346:	bd80      	pop	{r7, pc}
   2d348:	20005a9c 	.word	0x20005a9c
   2d34c:	0003c87c 	.word	0x0003c87c

0002d350 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2d350:	b580      	push	{r7, lr}
   2d352:	b082      	sub	sp, #8
   2d354:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2d356:	4b2f      	ldr	r3, [pc, #188]	; (2d414 <Reset_Handler+0xc4>)
   2d358:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2d35a:	4b2f      	ldr	r3, [pc, #188]	; (2d418 <Reset_Handler+0xc8>)
   2d35c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2d35e:	687a      	ldr	r2, [r7, #4]
   2d360:	683b      	ldr	r3, [r7, #0]
   2d362:	429a      	cmp	r2, r3
   2d364:	d00c      	beq.n	2d380 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2d366:	e007      	b.n	2d378 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2d368:	683b      	ldr	r3, [r7, #0]
   2d36a:	1d1a      	adds	r2, r3, #4
   2d36c:	603a      	str	r2, [r7, #0]
   2d36e:	687a      	ldr	r2, [r7, #4]
   2d370:	1d11      	adds	r1, r2, #4
   2d372:	6079      	str	r1, [r7, #4]
   2d374:	6812      	ldr	r2, [r2, #0]
   2d376:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2d378:	683a      	ldr	r2, [r7, #0]
   2d37a:	4b28      	ldr	r3, [pc, #160]	; (2d41c <Reset_Handler+0xcc>)
   2d37c:	429a      	cmp	r2, r3
   2d37e:	d3f3      	bcc.n	2d368 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2d380:	4b27      	ldr	r3, [pc, #156]	; (2d420 <Reset_Handler+0xd0>)
   2d382:	603b      	str	r3, [r7, #0]
   2d384:	e004      	b.n	2d390 <Reset_Handler+0x40>
                *pDest++ = 0;
   2d386:	683b      	ldr	r3, [r7, #0]
   2d388:	1d1a      	adds	r2, r3, #4
   2d38a:	603a      	str	r2, [r7, #0]
   2d38c:	2200      	movs	r2, #0
   2d38e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2d390:	683a      	ldr	r2, [r7, #0]
   2d392:	4b24      	ldr	r3, [pc, #144]	; (2d424 <Reset_Handler+0xd4>)
   2d394:	429a      	cmp	r2, r3
   2d396:	d3f6      	bcc.n	2d386 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2d398:	4b23      	ldr	r3, [pc, #140]	; (2d428 <Reset_Handler+0xd8>)
   2d39a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2d39c:	4b23      	ldr	r3, [pc, #140]	; (2d42c <Reset_Handler+0xdc>)
   2d39e:	687a      	ldr	r2, [r7, #4]
   2d3a0:	21ff      	movs	r1, #255	; 0xff
   2d3a2:	438a      	bics	r2, r1
   2d3a4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2d3a6:	4a22      	ldr	r2, [pc, #136]	; (2d430 <Reset_Handler+0xe0>)
   2d3a8:	2390      	movs	r3, #144	; 0x90
   2d3aa:	005b      	lsls	r3, r3, #1
   2d3ac:	2102      	movs	r1, #2
   2d3ae:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2d3b0:	4a20      	ldr	r2, [pc, #128]	; (2d434 <Reset_Handler+0xe4>)
   2d3b2:	78d3      	ldrb	r3, [r2, #3]
   2d3b4:	2103      	movs	r1, #3
   2d3b6:	438b      	bics	r3, r1
   2d3b8:	1c19      	adds	r1, r3, #0
   2d3ba:	2302      	movs	r3, #2
   2d3bc:	430b      	orrs	r3, r1
   2d3be:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2d3c0:	4a1c      	ldr	r2, [pc, #112]	; (2d434 <Reset_Handler+0xe4>)
   2d3c2:	78d3      	ldrb	r3, [r2, #3]
   2d3c4:	210c      	movs	r1, #12
   2d3c6:	438b      	bics	r3, r1
   2d3c8:	1c19      	adds	r1, r3, #0
   2d3ca:	2308      	movs	r3, #8
   2d3cc:	430b      	orrs	r3, r1
   2d3ce:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2d3d0:	4a19      	ldr	r2, [pc, #100]	; (2d438 <Reset_Handler+0xe8>)
   2d3d2:	7b93      	ldrb	r3, [r2, #14]
   2d3d4:	2130      	movs	r1, #48	; 0x30
   2d3d6:	438b      	bics	r3, r1
   2d3d8:	1c19      	adds	r1, r3, #0
   2d3da:	2320      	movs	r3, #32
   2d3dc:	430b      	orrs	r3, r1
   2d3de:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2d3e0:	4a15      	ldr	r2, [pc, #84]	; (2d438 <Reset_Handler+0xe8>)
   2d3e2:	7b93      	ldrb	r3, [r2, #14]
   2d3e4:	210c      	movs	r1, #12
   2d3e6:	438b      	bics	r3, r1
   2d3e8:	1c19      	adds	r1, r3, #0
   2d3ea:	2308      	movs	r3, #8
   2d3ec:	430b      	orrs	r3, r1
   2d3ee:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2d3f0:	4a11      	ldr	r2, [pc, #68]	; (2d438 <Reset_Handler+0xe8>)
   2d3f2:	7b93      	ldrb	r3, [r2, #14]
   2d3f4:	2103      	movs	r1, #3
   2d3f6:	438b      	bics	r3, r1
   2d3f8:	1c19      	adds	r1, r3, #0
   2d3fa:	2302      	movs	r3, #2
   2d3fc:	430b      	orrs	r3, r1
   2d3fe:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2d400:	4a0e      	ldr	r2, [pc, #56]	; (2d43c <Reset_Handler+0xec>)
   2d402:	6853      	ldr	r3, [r2, #4]
   2d404:	2180      	movs	r1, #128	; 0x80
   2d406:	430b      	orrs	r3, r1
   2d408:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2d40a:	4b0d      	ldr	r3, [pc, #52]	; (2d440 <Reset_Handler+0xf0>)
   2d40c:	4798      	blx	r3

        /* Branch to main function */
        main();
   2d40e:	4b0d      	ldr	r3, [pc, #52]	; (2d444 <Reset_Handler+0xf4>)
   2d410:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2d412:	e7fe      	b.n	2d412 <Reset_Handler+0xc2>
   2d414:	0003d684 	.word	0x0003d684
   2d418:	20000000 	.word	0x20000000
   2d41c:	20000308 	.word	0x20000308
   2d420:	20000310 	.word	0x20000310
   2d424:	20005b0c 	.word	0x20005b0c
   2d428:	00012000 	.word	0x00012000
   2d42c:	e000ed00 	.word	0xe000ed00
   2d430:	41007000 	.word	0x41007000
   2d434:	41005000 	.word	0x41005000
   2d438:	41004800 	.word	0x41004800
   2d43c:	41004000 	.word	0x41004000
   2d440:	000378c5 	.word	0x000378c5
   2d444:	00034b85 	.word	0x00034b85

0002d448 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2d448:	b580      	push	{r7, lr}
   2d44a:	af00      	add	r7, sp, #0
  __asm volatile (
   2d44c:	2004      	movs	r0, #4
   2d44e:	4671      	mov	r1, lr
   2d450:	4208      	tst	r0, r1
   2d452:	d002      	beq.n	2d45a <_MSP>
   2d454:	f3ef 8009 	mrs	r0, PSP
   2d458:	e001      	b.n	2d45e <_HALT>

0002d45a <_MSP>:
   2d45a:	f3ef 8008 	mrs	r0, MSP

0002d45e <_HALT>:
   2d45e:	6941      	ldr	r1, [r0, #20]
   2d460:	e004      	b.n	2d46c <HardFault_HandlerC>
   2d462:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2d464:	46c0      	nop			; (mov r8, r8)
   2d466:	46bd      	mov	sp, r7
   2d468:	bd80      	pop	{r7, pc}
	...

0002d46c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2d46c:	b580      	push	{r7, lr}
   2d46e:	b090      	sub	sp, #64	; 0x40
   2d470:	af00      	add	r7, sp, #0
   2d472:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2d474:	687b      	ldr	r3, [r7, #4]
   2d476:	681b      	ldr	r3, [r3, #0]
   2d478:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2d47a:	687b      	ldr	r3, [r7, #4]
   2d47c:	685b      	ldr	r3, [r3, #4]
   2d47e:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2d480:	687b      	ldr	r3, [r7, #4]
   2d482:	689b      	ldr	r3, [r3, #8]
   2d484:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2d486:	687b      	ldr	r3, [r7, #4]
   2d488:	68db      	ldr	r3, [r3, #12]
   2d48a:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2d48c:	687b      	ldr	r3, [r7, #4]
   2d48e:	691b      	ldr	r3, [r3, #16]
   2d490:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2d492:	687b      	ldr	r3, [r7, #4]
   2d494:	695b      	ldr	r3, [r3, #20]
   2d496:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2d498:	687b      	ldr	r3, [r7, #4]
   2d49a:	699b      	ldr	r3, [r3, #24]
   2d49c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2d49e:	687b      	ldr	r3, [r7, #4]
   2d4a0:	69db      	ldr	r3, [r3, #28]
   2d4a2:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2d4a4:	4b0b      	ldr	r3, [pc, #44]	; (2d4d4 <HardFault_HandlerC+0x68>)
   2d4a6:	681b      	ldr	r3, [r3, #0]
   2d4a8:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2d4aa:	4b0b      	ldr	r3, [pc, #44]	; (2d4d8 <HardFault_HandlerC+0x6c>)
   2d4ac:	681b      	ldr	r3, [r3, #0]
   2d4ae:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2d4b0:	4b0a      	ldr	r3, [pc, #40]	; (2d4dc <HardFault_HandlerC+0x70>)
   2d4b2:	681b      	ldr	r3, [r3, #0]
   2d4b4:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2d4b6:	4b0a      	ldr	r3, [pc, #40]	; (2d4e0 <HardFault_HandlerC+0x74>)
   2d4b8:	681b      	ldr	r3, [r3, #0]
   2d4ba:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2d4bc:	4b09      	ldr	r3, [pc, #36]	; (2d4e4 <HardFault_HandlerC+0x78>)
   2d4be:	681b      	ldr	r3, [r3, #0]
   2d4c0:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2d4c2:	4b09      	ldr	r3, [pc, #36]	; (2d4e8 <HardFault_HandlerC+0x7c>)
   2d4c4:	681b      	ldr	r3, [r3, #0]
   2d4c6:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2d4c8:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2d4ca:	46c0      	nop			; (mov r8, r8)
   2d4cc:	46bd      	mov	sp, r7
   2d4ce:	b010      	add	sp, #64	; 0x40
   2d4d0:	bd80      	pop	{r7, pc}
   2d4d2:	46c0      	nop			; (mov r8, r8)
   2d4d4:	e000ed28 	.word	0xe000ed28
   2d4d8:	e000ed2c 	.word	0xe000ed2c
   2d4dc:	e000ed30 	.word	0xe000ed30
   2d4e0:	e000ed3c 	.word	0xe000ed3c
   2d4e4:	e000ed34 	.word	0xe000ed34
   2d4e8:	e000ed38 	.word	0xe000ed38

0002d4ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2d4ec:	b580      	push	{r7, lr}
   2d4ee:	b086      	sub	sp, #24
   2d4f0:	af00      	add	r7, sp, #0
   2d4f2:	60f8      	str	r0, [r7, #12]
   2d4f4:	60b9      	str	r1, [r7, #8]
   2d4f6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2d4f8:	2300      	movs	r3, #0
   2d4fa:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2d4fc:	68fb      	ldr	r3, [r7, #12]
   2d4fe:	2b00      	cmp	r3, #0
   2d500:	d012      	beq.n	2d528 <_read+0x3c>
		return -1;
   2d502:	2301      	movs	r3, #1
   2d504:	425b      	negs	r3, r3
   2d506:	e013      	b.n	2d530 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2d508:	4b0b      	ldr	r3, [pc, #44]	; (2d538 <_read+0x4c>)
   2d50a:	681a      	ldr	r2, [r3, #0]
   2d50c:	4b0b      	ldr	r3, [pc, #44]	; (2d53c <_read+0x50>)
   2d50e:	681b      	ldr	r3, [r3, #0]
   2d510:	68b9      	ldr	r1, [r7, #8]
   2d512:	0018      	movs	r0, r3
   2d514:	4790      	blx	r2
		ptr++;
   2d516:	68bb      	ldr	r3, [r7, #8]
   2d518:	3301      	adds	r3, #1
   2d51a:	60bb      	str	r3, [r7, #8]
		nChars++;
   2d51c:	697b      	ldr	r3, [r7, #20]
   2d51e:	3301      	adds	r3, #1
   2d520:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2d522:	687b      	ldr	r3, [r7, #4]
   2d524:	3b01      	subs	r3, #1
   2d526:	607b      	str	r3, [r7, #4]
   2d528:	687b      	ldr	r3, [r7, #4]
   2d52a:	2b00      	cmp	r3, #0
   2d52c:	dcec      	bgt.n	2d508 <_read+0x1c>
	}
	return nChars;
   2d52e:	697b      	ldr	r3, [r7, #20]
}
   2d530:	0018      	movs	r0, r3
   2d532:	46bd      	mov	sp, r7
   2d534:	b006      	add	sp, #24
   2d536:	bd80      	pop	{r7, pc}
   2d538:	20005aa8 	.word	0x20005aa8
   2d53c:	20005ab0 	.word	0x20005ab0

0002d540 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2d540:	b580      	push	{r7, lr}
   2d542:	b086      	sub	sp, #24
   2d544:	af00      	add	r7, sp, #0
   2d546:	60f8      	str	r0, [r7, #12]
   2d548:	60b9      	str	r1, [r7, #8]
   2d54a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2d54c:	2300      	movs	r3, #0
   2d54e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2d550:	68fb      	ldr	r3, [r7, #12]
   2d552:	2b01      	cmp	r3, #1
   2d554:	d01d      	beq.n	2d592 <_write+0x52>
   2d556:	68fb      	ldr	r3, [r7, #12]
   2d558:	2b02      	cmp	r3, #2
   2d55a:	d01a      	beq.n	2d592 <_write+0x52>
   2d55c:	68fb      	ldr	r3, [r7, #12]
   2d55e:	2b03      	cmp	r3, #3
   2d560:	d017      	beq.n	2d592 <_write+0x52>
		return -1;
   2d562:	2301      	movs	r3, #1
   2d564:	425b      	negs	r3, r3
   2d566:	e018      	b.n	2d59a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2d568:	4b0e      	ldr	r3, [pc, #56]	; (2d5a4 <_write+0x64>)
   2d56a:	681a      	ldr	r2, [r3, #0]
   2d56c:	4b0e      	ldr	r3, [pc, #56]	; (2d5a8 <_write+0x68>)
   2d56e:	6818      	ldr	r0, [r3, #0]
   2d570:	68bb      	ldr	r3, [r7, #8]
   2d572:	1c59      	adds	r1, r3, #1
   2d574:	60b9      	str	r1, [r7, #8]
   2d576:	781b      	ldrb	r3, [r3, #0]
   2d578:	0019      	movs	r1, r3
   2d57a:	4790      	blx	r2
   2d57c:	1e03      	subs	r3, r0, #0
   2d57e:	da02      	bge.n	2d586 <_write+0x46>
			return -1;
   2d580:	2301      	movs	r3, #1
   2d582:	425b      	negs	r3, r3
   2d584:	e009      	b.n	2d59a <_write+0x5a>
		}
		++nChars;
   2d586:	697b      	ldr	r3, [r7, #20]
   2d588:	3301      	adds	r3, #1
   2d58a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2d58c:	687b      	ldr	r3, [r7, #4]
   2d58e:	3b01      	subs	r3, #1
   2d590:	607b      	str	r3, [r7, #4]
   2d592:	687b      	ldr	r3, [r7, #4]
   2d594:	2b00      	cmp	r3, #0
   2d596:	d1e7      	bne.n	2d568 <_write+0x28>
	}
	return nChars;
   2d598:	697b      	ldr	r3, [r7, #20]
}
   2d59a:	0018      	movs	r0, r3
   2d59c:	46bd      	mov	sp, r7
   2d59e:	b006      	add	sp, #24
   2d5a0:	bd80      	pop	{r7, pc}
   2d5a2:	46c0      	nop			; (mov r8, r8)
   2d5a4:	20005aac 	.word	0x20005aac
   2d5a8:	20005ab0 	.word	0x20005ab0

0002d5ac <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2d5ac:	b580      	push	{r7, lr}
   2d5ae:	b084      	sub	sp, #16
   2d5b0:	af00      	add	r7, sp, #0
   2d5b2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2d5b4:	4b0a      	ldr	r3, [pc, #40]	; (2d5e0 <_sbrk+0x34>)
   2d5b6:	681b      	ldr	r3, [r3, #0]
   2d5b8:	2b00      	cmp	r3, #0
   2d5ba:	d102      	bne.n	2d5c2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2d5bc:	4b08      	ldr	r3, [pc, #32]	; (2d5e0 <_sbrk+0x34>)
   2d5be:	4a09      	ldr	r2, [pc, #36]	; (2d5e4 <_sbrk+0x38>)
   2d5c0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2d5c2:	4b07      	ldr	r3, [pc, #28]	; (2d5e0 <_sbrk+0x34>)
   2d5c4:	681b      	ldr	r3, [r3, #0]
   2d5c6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2d5c8:	4b05      	ldr	r3, [pc, #20]	; (2d5e0 <_sbrk+0x34>)
   2d5ca:	681a      	ldr	r2, [r3, #0]
   2d5cc:	687b      	ldr	r3, [r7, #4]
   2d5ce:	18d2      	adds	r2, r2, r3
   2d5d0:	4b03      	ldr	r3, [pc, #12]	; (2d5e0 <_sbrk+0x34>)
   2d5d2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2d5d4:	68fb      	ldr	r3, [r7, #12]
}
   2d5d6:	0018      	movs	r0, r3
   2d5d8:	46bd      	mov	sp, r7
   2d5da:	b004      	add	sp, #16
   2d5dc:	bd80      	pop	{r7, pc}
   2d5de:	46c0      	nop			; (mov r8, r8)
   2d5e0:	20004168 	.word	0x20004168
   2d5e4:	20007b10 	.word	0x20007b10

0002d5e8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2d5e8:	b580      	push	{r7, lr}
   2d5ea:	b082      	sub	sp, #8
   2d5ec:	af00      	add	r7, sp, #0
   2d5ee:	6078      	str	r0, [r7, #4]
	return -1;
   2d5f0:	2301      	movs	r3, #1
   2d5f2:	425b      	negs	r3, r3
}
   2d5f4:	0018      	movs	r0, r3
   2d5f6:	46bd      	mov	sp, r7
   2d5f8:	b002      	add	sp, #8
   2d5fa:	bd80      	pop	{r7, pc}

0002d5fc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2d5fc:	b580      	push	{r7, lr}
   2d5fe:	b082      	sub	sp, #8
   2d600:	af00      	add	r7, sp, #0
   2d602:	6078      	str	r0, [r7, #4]
   2d604:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2d606:	683b      	ldr	r3, [r7, #0]
   2d608:	2280      	movs	r2, #128	; 0x80
   2d60a:	0192      	lsls	r2, r2, #6
   2d60c:	605a      	str	r2, [r3, #4]

	return 0;
   2d60e:	2300      	movs	r3, #0
}
   2d610:	0018      	movs	r0, r3
   2d612:	46bd      	mov	sp, r7
   2d614:	b002      	add	sp, #8
   2d616:	bd80      	pop	{r7, pc}

0002d618 <_isatty>:

extern int _isatty(int file)
{
   2d618:	b580      	push	{r7, lr}
   2d61a:	b082      	sub	sp, #8
   2d61c:	af00      	add	r7, sp, #0
   2d61e:	6078      	str	r0, [r7, #4]
	return 1;
   2d620:	2301      	movs	r3, #1
}
   2d622:	0018      	movs	r0, r3
   2d624:	46bd      	mov	sp, r7
   2d626:	b002      	add	sp, #8
   2d628:	bd80      	pop	{r7, pc}

0002d62a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2d62a:	b580      	push	{r7, lr}
   2d62c:	b084      	sub	sp, #16
   2d62e:	af00      	add	r7, sp, #0
   2d630:	60f8      	str	r0, [r7, #12]
   2d632:	60b9      	str	r1, [r7, #8]
   2d634:	607a      	str	r2, [r7, #4]
	return 0;
   2d636:	2300      	movs	r3, #0
}
   2d638:	0018      	movs	r0, r3
   2d63a:	46bd      	mov	sp, r7
   2d63c:	b004      	add	sp, #16
   2d63e:	bd80      	pop	{r7, pc}

0002d640 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2d640:	b580      	push	{r7, lr}
   2d642:	b082      	sub	sp, #8
   2d644:	af00      	add	r7, sp, #0
   2d646:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2d648:	687b      	ldr	r3, [r7, #4]
   2d64a:	2200      	movs	r2, #0
   2d64c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2d64e:	687b      	ldr	r3, [r7, #4]
   2d650:	2200      	movs	r2, #0
   2d652:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2d654:	687b      	ldr	r3, [r7, #4]
   2d656:	2200      	movs	r2, #0
   2d658:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2d65a:	687b      	ldr	r3, [r7, #4]
   2d65c:	2200      	movs	r2, #0
   2d65e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2d660:	687b      	ldr	r3, [r7, #4]
   2d662:	2201      	movs	r2, #1
   2d664:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2d666:	687b      	ldr	r3, [r7, #4]
   2d668:	2201      	movs	r2, #1
   2d66a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2d66c:	687b      	ldr	r3, [r7, #4]
   2d66e:	22fa      	movs	r2, #250	; 0xfa
   2d670:	00d2      	lsls	r2, r2, #3
   2d672:	80da      	strh	r2, [r3, #6]
}
   2d674:	46c0      	nop			; (mov r8, r8)
   2d676:	46bd      	mov	sp, r7
   2d678:	b002      	add	sp, #8
   2d67a:	bd80      	pop	{r7, pc}

0002d67c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2d67c:	b580      	push	{r7, lr}
   2d67e:	b086      	sub	sp, #24
   2d680:	af00      	add	r7, sp, #0
   2d682:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2d684:	230c      	movs	r3, #12
   2d686:	18fb      	adds	r3, r7, r3
   2d688:	0018      	movs	r0, r3
   2d68a:	4b23      	ldr	r3, [pc, #140]	; (2d718 <rtc_calendar_get_config_defaults+0x9c>)
   2d68c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2d68e:	687b      	ldr	r3, [r7, #4]
   2d690:	22a0      	movs	r2, #160	; 0xa0
   2d692:	0112      	lsls	r2, r2, #4
   2d694:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2d696:	687b      	ldr	r3, [r7, #4]
   2d698:	2200      	movs	r2, #0
   2d69a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2d69c:	687b      	ldr	r3, [r7, #4]
   2d69e:	2200      	movs	r2, #0
   2d6a0:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2d6a2:	687b      	ldr	r3, [r7, #4]
   2d6a4:	2200      	movs	r2, #0
   2d6a6:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2d6a8:	687b      	ldr	r3, [r7, #4]
   2d6aa:	22fa      	movs	r2, #250	; 0xfa
   2d6ac:	00d2      	lsls	r2, r2, #3
   2d6ae:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d6b0:	2317      	movs	r3, #23
   2d6b2:	18fb      	adds	r3, r7, r3
   2d6b4:	2200      	movs	r2, #0
   2d6b6:	701a      	strb	r2, [r3, #0]
   2d6b8:	e025      	b.n	2d706 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2d6ba:	2317      	movs	r3, #23
   2d6bc:	18fb      	adds	r3, r7, r3
   2d6be:	781a      	ldrb	r2, [r3, #0]
   2d6c0:	6879      	ldr	r1, [r7, #4]
   2d6c2:	2008      	movs	r0, #8
   2d6c4:	0013      	movs	r3, r2
   2d6c6:	009b      	lsls	r3, r3, #2
   2d6c8:	189b      	adds	r3, r3, r2
   2d6ca:	005b      	lsls	r3, r3, #1
   2d6cc:	18cb      	adds	r3, r1, r3
   2d6ce:	181a      	adds	r2, r3, r0
   2d6d0:	230c      	movs	r3, #12
   2d6d2:	18fb      	adds	r3, r7, r3
   2d6d4:	0010      	movs	r0, r2
   2d6d6:	0019      	movs	r1, r3
   2d6d8:	2308      	movs	r3, #8
   2d6da:	001a      	movs	r2, r3
   2d6dc:	4b0f      	ldr	r3, [pc, #60]	; (2d71c <rtc_calendar_get_config_defaults+0xa0>)
   2d6de:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d6e0:	2317      	movs	r3, #23
   2d6e2:	18fb      	adds	r3, r7, r3
   2d6e4:	781a      	ldrb	r2, [r3, #0]
   2d6e6:	6879      	ldr	r1, [r7, #4]
   2d6e8:	0013      	movs	r3, r2
   2d6ea:	009b      	lsls	r3, r3, #2
   2d6ec:	189b      	adds	r3, r3, r2
   2d6ee:	005b      	lsls	r3, r3, #1
   2d6f0:	18cb      	adds	r3, r1, r3
   2d6f2:	3310      	adds	r3, #16
   2d6f4:	2206      	movs	r2, #6
   2d6f6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d6f8:	2317      	movs	r3, #23
   2d6fa:	18fb      	adds	r3, r7, r3
   2d6fc:	781a      	ldrb	r2, [r3, #0]
   2d6fe:	2317      	movs	r3, #23
   2d700:	18fb      	adds	r3, r7, r3
   2d702:	3201      	adds	r2, #1
   2d704:	701a      	strb	r2, [r3, #0]
   2d706:	2317      	movs	r3, #23
   2d708:	18fb      	adds	r3, r7, r3
   2d70a:	781b      	ldrb	r3, [r3, #0]
   2d70c:	2b00      	cmp	r3, #0
   2d70e:	d0d4      	beq.n	2d6ba <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2d710:	46c0      	nop			; (mov r8, r8)
   2d712:	46bd      	mov	sp, r7
   2d714:	b006      	add	sp, #24
   2d716:	bd80      	pop	{r7, pc}
   2d718:	0002d641 	.word	0x0002d641
   2d71c:	00037935 	.word	0x00037935

0002d720 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2d720:	b580      	push	{r7, lr}
   2d722:	b088      	sub	sp, #32
   2d724:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2d726:	230c      	movs	r3, #12
   2d728:	18fb      	adds	r3, r7, r3
   2d72a:	0018      	movs	r0, r3
   2d72c:	4b1a      	ldr	r3, [pc, #104]	; (2d798 <configure_rtc_calendar+0x78>)
   2d72e:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2d730:	1d3b      	adds	r3, r7, #4
   2d732:	0018      	movs	r0, r3
   2d734:	4b19      	ldr	r3, [pc, #100]	; (2d79c <configure_rtc_calendar+0x7c>)
   2d736:	4798      	blx	r3
	init_time.year   = 2014;
   2d738:	1d3b      	adds	r3, r7, #4
   2d73a:	4a19      	ldr	r2, [pc, #100]	; (2d7a0 <configure_rtc_calendar+0x80>)
   2d73c:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2d73e:	1d3b      	adds	r3, r7, #4
   2d740:	2201      	movs	r2, #1
   2d742:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2d744:	1d3b      	adds	r3, r7, #4
   2d746:	2201      	movs	r2, #1
   2d748:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2d74a:	1d3b      	adds	r3, r7, #4
   2d74c:	2200      	movs	r2, #0
   2d74e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2d750:	1d3b      	adds	r3, r7, #4
   2d752:	2200      	movs	r2, #0
   2d754:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2d756:	1d3b      	adds	r3, r7, #4
   2d758:	2204      	movs	r2, #4
   2d75a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2d75c:	230c      	movs	r3, #12
   2d75e:	18fb      	adds	r3, r7, r3
   2d760:	2201      	movs	r2, #1
   2d762:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2d764:	230c      	movs	r3, #12
   2d766:	18fb      	adds	r3, r7, r3
   2d768:	1d3a      	adds	r2, r7, #4
   2d76a:	3308      	adds	r3, #8
   2d76c:	ca03      	ldmia	r2!, {r0, r1}
   2d76e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d770:	230c      	movs	r3, #12
   2d772:	18fb      	adds	r3, r7, r3
   2d774:	2206      	movs	r2, #6
   2d776:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2d778:	230c      	movs	r3, #12
   2d77a:	18fa      	adds	r2, r7, r3
   2d77c:	4909      	ldr	r1, [pc, #36]	; (2d7a4 <configure_rtc_calendar+0x84>)
   2d77e:	4b0a      	ldr	r3, [pc, #40]	; (2d7a8 <configure_rtc_calendar+0x88>)
   2d780:	0018      	movs	r0, r3
   2d782:	4b0a      	ldr	r3, [pc, #40]	; (2d7ac <configure_rtc_calendar+0x8c>)
   2d784:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2d786:	4b08      	ldr	r3, [pc, #32]	; (2d7a8 <configure_rtc_calendar+0x88>)
   2d788:	0018      	movs	r0, r3
   2d78a:	4b09      	ldr	r3, [pc, #36]	; (2d7b0 <configure_rtc_calendar+0x90>)
   2d78c:	4798      	blx	r3
}
   2d78e:	46c0      	nop			; (mov r8, r8)
   2d790:	46bd      	mov	sp, r7
   2d792:	b008      	add	sp, #32
   2d794:	bd80      	pop	{r7, pc}
   2d796:	46c0      	nop			; (mov r8, r8)
   2d798:	0002d67d 	.word	0x0002d67d
   2d79c:	0002d641 	.word	0x0002d641
   2d7a0:	000007de 	.word	0x000007de
   2d7a4:	40001400 	.word	0x40001400
   2d7a8:	20005ab4 	.word	0x20005ab4
   2d7ac:	00029201 	.word	0x00029201
   2d7b0:	00028f2d 	.word	0x00028f2d

0002d7b4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2d7b4:	b590      	push	{r4, r7, lr}
   2d7b6:	b085      	sub	sp, #20
   2d7b8:	af00      	add	r7, sp, #0
   2d7ba:	0002      	movs	r2, r0
   2d7bc:	1dfb      	adds	r3, r7, #7
   2d7be:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2d7c0:	4b1a      	ldr	r3, [pc, #104]	; (2d82c <disk_initialize+0x78>)
   2d7c2:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2d7c4:	1dfb      	adds	r3, r7, #7
   2d7c6:	781b      	ldrb	r3, [r3, #0]
   2d7c8:	2b01      	cmp	r3, #1
   2d7ca:	d901      	bls.n	2d7d0 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2d7cc:	2301      	movs	r3, #1
   2d7ce:	e029      	b.n	2d824 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2d7d0:	2300      	movs	r3, #0
   2d7d2:	60fb      	str	r3, [r7, #12]
   2d7d4:	e010      	b.n	2d7f8 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2d7d6:	230b      	movs	r3, #11
   2d7d8:	18fc      	adds	r4, r7, r3
   2d7da:	1dfb      	adds	r3, r7, #7
   2d7dc:	781b      	ldrb	r3, [r3, #0]
   2d7de:	0018      	movs	r0, r3
   2d7e0:	4b13      	ldr	r3, [pc, #76]	; (2d830 <disk_initialize+0x7c>)
   2d7e2:	4798      	blx	r3
   2d7e4:	0003      	movs	r3, r0
   2d7e6:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2d7e8:	230b      	movs	r3, #11
   2d7ea:	18fb      	adds	r3, r7, r3
   2d7ec:	781b      	ldrb	r3, [r3, #0]
   2d7ee:	2b03      	cmp	r3, #3
   2d7f0:	d106      	bne.n	2d800 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2d7f2:	68fb      	ldr	r3, [r7, #12]
   2d7f4:	3301      	adds	r3, #1
   2d7f6:	60fb      	str	r3, [r7, #12]
   2d7f8:	68fb      	ldr	r3, [r7, #12]
   2d7fa:	2b01      	cmp	r3, #1
   2d7fc:	ddeb      	ble.n	2d7d6 <disk_initialize+0x22>
   2d7fe:	e000      	b.n	2d802 <disk_initialize+0x4e>
			break;
   2d800:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2d802:	230b      	movs	r3, #11
   2d804:	18fb      	adds	r3, r7, r3
   2d806:	781b      	ldrb	r3, [r3, #0]
   2d808:	2b00      	cmp	r3, #0
   2d80a:	d001      	beq.n	2d810 <disk_initialize+0x5c>
		return STA_NOINIT;
   2d80c:	2301      	movs	r3, #1
   2d80e:	e009      	b.n	2d824 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2d810:	1dfb      	adds	r3, r7, #7
   2d812:	781b      	ldrb	r3, [r3, #0]
   2d814:	0018      	movs	r0, r3
   2d816:	4b07      	ldr	r3, [pc, #28]	; (2d834 <disk_initialize+0x80>)
   2d818:	4798      	blx	r3
   2d81a:	1e03      	subs	r3, r0, #0
   2d81c:	d001      	beq.n	2d822 <disk_initialize+0x6e>
		return STA_PROTECT;
   2d81e:	2304      	movs	r3, #4
   2d820:	e000      	b.n	2d824 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2d822:	2300      	movs	r3, #0
}
   2d824:	0018      	movs	r0, r3
   2d826:	46bd      	mov	sp, r7
   2d828:	b005      	add	sp, #20
   2d82a:	bd90      	pop	{r4, r7, pc}
   2d82c:	0002d721 	.word	0x0002d721
   2d830:	00028429 	.word	0x00028429
   2d834:	000284e1 	.word	0x000284e1

0002d838 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2d838:	b580      	push	{r7, lr}
   2d83a:	b082      	sub	sp, #8
   2d83c:	af00      	add	r7, sp, #0
   2d83e:	0002      	movs	r2, r0
   2d840:	1dfb      	adds	r3, r7, #7
   2d842:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2d844:	1dfb      	adds	r3, r7, #7
   2d846:	781b      	ldrb	r3, [r3, #0]
   2d848:	0018      	movs	r0, r3
   2d84a:	4b08      	ldr	r3, [pc, #32]	; (2d86c <disk_status+0x34>)
   2d84c:	4798      	blx	r3
   2d84e:	1e03      	subs	r3, r0, #0
   2d850:	d002      	beq.n	2d858 <disk_status+0x20>
   2d852:	2b02      	cmp	r3, #2
   2d854:	d002      	beq.n	2d85c <disk_status+0x24>
   2d856:	e003      	b.n	2d860 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2d858:	2300      	movs	r3, #0
   2d85a:	e002      	b.n	2d862 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2d85c:	2303      	movs	r3, #3
   2d85e:	e000      	b.n	2d862 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2d860:	2301      	movs	r3, #1
	}
}
   2d862:	0018      	movs	r0, r3
   2d864:	46bd      	mov	sp, r7
   2d866:	b002      	add	sp, #8
   2d868:	bd80      	pop	{r7, pc}
   2d86a:	46c0      	nop			; (mov r8, r8)
   2d86c:	00028429 	.word	0x00028429

0002d870 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2d870:	b590      	push	{r4, r7, lr}
   2d872:	b089      	sub	sp, #36	; 0x24
   2d874:	af00      	add	r7, sp, #0
   2d876:	60b9      	str	r1, [r7, #8]
   2d878:	607a      	str	r2, [r7, #4]
   2d87a:	0019      	movs	r1, r3
   2d87c:	230f      	movs	r3, #15
   2d87e:	18fb      	adds	r3, r7, r3
   2d880:	1c02      	adds	r2, r0, #0
   2d882:	701a      	strb	r2, [r3, #0]
   2d884:	230e      	movs	r3, #14
   2d886:	18fb      	adds	r3, r7, r3
   2d888:	1c0a      	adds	r2, r1, #0
   2d88a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d88c:	231b      	movs	r3, #27
   2d88e:	18fc      	adds	r4, r7, r3
   2d890:	230f      	movs	r3, #15
   2d892:	18fb      	adds	r3, r7, r3
   2d894:	781b      	ldrb	r3, [r3, #0]
   2d896:	0018      	movs	r0, r3
   2d898:	4b28      	ldr	r3, [pc, #160]	; (2d93c <disk_read+0xcc>)
   2d89a:	4798      	blx	r3
   2d89c:	0003      	movs	r3, r0
   2d89e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d8a0:	231b      	movs	r3, #27
   2d8a2:	18fb      	adds	r3, r7, r3
   2d8a4:	781b      	ldrb	r3, [r3, #0]
   2d8a6:	2b00      	cmp	r3, #0
   2d8a8:	d101      	bne.n	2d8ae <disk_read+0x3e>
		return RES_ERROR;
   2d8aa:	2301      	movs	r3, #1
   2d8ac:	e042      	b.n	2d934 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d8ae:	2314      	movs	r3, #20
   2d8b0:	18fa      	adds	r2, r7, r3
   2d8b2:	230f      	movs	r3, #15
   2d8b4:	18fb      	adds	r3, r7, r3
   2d8b6:	781b      	ldrb	r3, [r3, #0]
   2d8b8:	0011      	movs	r1, r2
   2d8ba:	0018      	movs	r0, r3
   2d8bc:	4b20      	ldr	r3, [pc, #128]	; (2d940 <disk_read+0xd0>)
   2d8be:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d8c0:	230e      	movs	r3, #14
   2d8c2:	18fb      	adds	r3, r7, r3
   2d8c4:	781b      	ldrb	r3, [r3, #0]
   2d8c6:	221b      	movs	r2, #27
   2d8c8:	18ba      	adds	r2, r7, r2
   2d8ca:	7812      	ldrb	r2, [r2, #0]
   2d8cc:	4353      	muls	r3, r2
   2d8ce:	001a      	movs	r2, r3
   2d8d0:	687b      	ldr	r3, [r7, #4]
   2d8d2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d8d4:	697b      	ldr	r3, [r7, #20]
   2d8d6:	3301      	adds	r3, #1
   2d8d8:	211b      	movs	r1, #27
   2d8da:	1879      	adds	r1, r7, r1
   2d8dc:	7809      	ldrb	r1, [r1, #0]
   2d8de:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d8e0:	429a      	cmp	r2, r3
   2d8e2:	d901      	bls.n	2d8e8 <disk_read+0x78>
		return RES_PARERR;
   2d8e4:	2304      	movs	r3, #4
   2d8e6:	e025      	b.n	2d934 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2d8e8:	2300      	movs	r3, #0
   2d8ea:	61fb      	str	r3, [r7, #28]
   2d8ec:	e01b      	b.n	2d926 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d8ee:	231b      	movs	r3, #27
   2d8f0:	18fb      	adds	r3, r7, r3
   2d8f2:	781b      	ldrb	r3, [r3, #0]
   2d8f4:	69fa      	ldr	r2, [r7, #28]
   2d8f6:	435a      	muls	r2, r3
   2d8f8:	687b      	ldr	r3, [r7, #4]
   2d8fa:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d8fc:	231b      	movs	r3, #27
   2d8fe:	18fb      	adds	r3, r7, r3
   2d900:	781b      	ldrb	r3, [r3, #0]
   2d902:	69fa      	ldr	r2, [r7, #28]
   2d904:	4353      	muls	r3, r2
   2d906:	025b      	lsls	r3, r3, #9
   2d908:	68ba      	ldr	r2, [r7, #8]
   2d90a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d90c:	230f      	movs	r3, #15
   2d90e:	18fb      	adds	r3, r7, r3
   2d910:	781b      	ldrb	r3, [r3, #0]
   2d912:	0018      	movs	r0, r3
   2d914:	4b0b      	ldr	r3, [pc, #44]	; (2d944 <disk_read+0xd4>)
   2d916:	4798      	blx	r3
   2d918:	1e03      	subs	r3, r0, #0
   2d91a:	d001      	beq.n	2d920 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d91c:	2301      	movs	r3, #1
   2d91e:	e009      	b.n	2d934 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2d920:	69fb      	ldr	r3, [r7, #28]
   2d922:	3301      	adds	r3, #1
   2d924:	61fb      	str	r3, [r7, #28]
   2d926:	230e      	movs	r3, #14
   2d928:	18fb      	adds	r3, r7, r3
   2d92a:	781a      	ldrb	r2, [r3, #0]
   2d92c:	69fb      	ldr	r3, [r7, #28]
   2d92e:	429a      	cmp	r2, r3
   2d930:	d8dd      	bhi.n	2d8ee <disk_read+0x7e>
		}
	}

	return RES_OK;
   2d932:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2d934:	0018      	movs	r0, r3
   2d936:	46bd      	mov	sp, r7
   2d938:	b009      	add	sp, #36	; 0x24
   2d93a:	bd90      	pop	{r4, r7, pc}
   2d93c:	000284b5 	.word	0x000284b5
   2d940:	00028469 	.word	0x00028469
   2d944:	00028529 	.word	0x00028529

0002d948 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2d948:	b590      	push	{r4, r7, lr}
   2d94a:	b089      	sub	sp, #36	; 0x24
   2d94c:	af00      	add	r7, sp, #0
   2d94e:	60b9      	str	r1, [r7, #8]
   2d950:	607a      	str	r2, [r7, #4]
   2d952:	0019      	movs	r1, r3
   2d954:	230f      	movs	r3, #15
   2d956:	18fb      	adds	r3, r7, r3
   2d958:	1c02      	adds	r2, r0, #0
   2d95a:	701a      	strb	r2, [r3, #0]
   2d95c:	230e      	movs	r3, #14
   2d95e:	18fb      	adds	r3, r7, r3
   2d960:	1c0a      	adds	r2, r1, #0
   2d962:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d964:	231b      	movs	r3, #27
   2d966:	18fc      	adds	r4, r7, r3
   2d968:	230f      	movs	r3, #15
   2d96a:	18fb      	adds	r3, r7, r3
   2d96c:	781b      	ldrb	r3, [r3, #0]
   2d96e:	0018      	movs	r0, r3
   2d970:	4b28      	ldr	r3, [pc, #160]	; (2da14 <disk_write+0xcc>)
   2d972:	4798      	blx	r3
   2d974:	0003      	movs	r3, r0
   2d976:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d978:	231b      	movs	r3, #27
   2d97a:	18fb      	adds	r3, r7, r3
   2d97c:	781b      	ldrb	r3, [r3, #0]
   2d97e:	2b00      	cmp	r3, #0
   2d980:	d101      	bne.n	2d986 <disk_write+0x3e>
		return RES_ERROR;
   2d982:	2301      	movs	r3, #1
   2d984:	e042      	b.n	2da0c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d986:	2314      	movs	r3, #20
   2d988:	18fa      	adds	r2, r7, r3
   2d98a:	230f      	movs	r3, #15
   2d98c:	18fb      	adds	r3, r7, r3
   2d98e:	781b      	ldrb	r3, [r3, #0]
   2d990:	0011      	movs	r1, r2
   2d992:	0018      	movs	r0, r3
   2d994:	4b20      	ldr	r3, [pc, #128]	; (2da18 <disk_write+0xd0>)
   2d996:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d998:	230e      	movs	r3, #14
   2d99a:	18fb      	adds	r3, r7, r3
   2d99c:	781b      	ldrb	r3, [r3, #0]
   2d99e:	221b      	movs	r2, #27
   2d9a0:	18ba      	adds	r2, r7, r2
   2d9a2:	7812      	ldrb	r2, [r2, #0]
   2d9a4:	4353      	muls	r3, r2
   2d9a6:	001a      	movs	r2, r3
   2d9a8:	687b      	ldr	r3, [r7, #4]
   2d9aa:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d9ac:	697b      	ldr	r3, [r7, #20]
   2d9ae:	3301      	adds	r3, #1
   2d9b0:	211b      	movs	r1, #27
   2d9b2:	1879      	adds	r1, r7, r1
   2d9b4:	7809      	ldrb	r1, [r1, #0]
   2d9b6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d9b8:	429a      	cmp	r2, r3
   2d9ba:	d901      	bls.n	2d9c0 <disk_write+0x78>
		return RES_PARERR;
   2d9bc:	2304      	movs	r3, #4
   2d9be:	e025      	b.n	2da0c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2d9c0:	2300      	movs	r3, #0
   2d9c2:	61fb      	str	r3, [r7, #28]
   2d9c4:	e01b      	b.n	2d9fe <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d9c6:	231b      	movs	r3, #27
   2d9c8:	18fb      	adds	r3, r7, r3
   2d9ca:	781b      	ldrb	r3, [r3, #0]
   2d9cc:	69fa      	ldr	r2, [r7, #28]
   2d9ce:	435a      	muls	r2, r3
   2d9d0:	687b      	ldr	r3, [r7, #4]
   2d9d2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d9d4:	231b      	movs	r3, #27
   2d9d6:	18fb      	adds	r3, r7, r3
   2d9d8:	781b      	ldrb	r3, [r3, #0]
   2d9da:	69fa      	ldr	r2, [r7, #28]
   2d9dc:	4353      	muls	r3, r2
   2d9de:	025b      	lsls	r3, r3, #9
   2d9e0:	68ba      	ldr	r2, [r7, #8]
   2d9e2:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d9e4:	230f      	movs	r3, #15
   2d9e6:	18fb      	adds	r3, r7, r3
   2d9e8:	781b      	ldrb	r3, [r3, #0]
   2d9ea:	0018      	movs	r0, r3
   2d9ec:	4b0b      	ldr	r3, [pc, #44]	; (2da1c <disk_write+0xd4>)
   2d9ee:	4798      	blx	r3
   2d9f0:	1e03      	subs	r3, r0, #0
   2d9f2:	d001      	beq.n	2d9f8 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d9f4:	2301      	movs	r3, #1
   2d9f6:	e009      	b.n	2da0c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2d9f8:	69fb      	ldr	r3, [r7, #28]
   2d9fa:	3301      	adds	r3, #1
   2d9fc:	61fb      	str	r3, [r7, #28]
   2d9fe:	230e      	movs	r3, #14
   2da00:	18fb      	adds	r3, r7, r3
   2da02:	781a      	ldrb	r2, [r3, #0]
   2da04:	69fb      	ldr	r3, [r7, #28]
   2da06:	429a      	cmp	r2, r3
   2da08:	d8dd      	bhi.n	2d9c6 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2da0a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2da0c:	0018      	movs	r0, r3
   2da0e:	46bd      	mov	sp, r7
   2da10:	b009      	add	sp, #36	; 0x24
   2da12:	bd90      	pop	{r4, r7, pc}
   2da14:	000284b5 	.word	0x000284b5
   2da18:	00028469 	.word	0x00028469
   2da1c:	0002857d 	.word	0x0002857d

0002da20 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2da20:	b590      	push	{r4, r7, lr}
   2da22:	b085      	sub	sp, #20
   2da24:	af00      	add	r7, sp, #0
   2da26:	603a      	str	r2, [r7, #0]
   2da28:	1dfb      	adds	r3, r7, #7
   2da2a:	1c02      	adds	r2, r0, #0
   2da2c:	701a      	strb	r2, [r3, #0]
   2da2e:	1dbb      	adds	r3, r7, #6
   2da30:	1c0a      	adds	r2, r1, #0
   2da32:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2da34:	230f      	movs	r3, #15
   2da36:	18fb      	adds	r3, r7, r3
   2da38:	2204      	movs	r2, #4
   2da3a:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2da3c:	1dbb      	adds	r3, r7, #6
   2da3e:	781b      	ldrb	r3, [r3, #0]
   2da40:	2b01      	cmp	r3, #1
   2da42:	d00f      	beq.n	2da64 <disk_ioctl+0x44>
   2da44:	dc02      	bgt.n	2da4c <disk_ioctl+0x2c>
   2da46:	2b00      	cmp	r3, #0
   2da48:	d044      	beq.n	2dad4 <disk_ioctl+0xb4>
   2da4a:	e054      	b.n	2daf6 <disk_ioctl+0xd6>
   2da4c:	2b02      	cmp	r3, #2
   2da4e:	d01a      	beq.n	2da86 <disk_ioctl+0x66>
   2da50:	2b03      	cmp	r3, #3
   2da52:	d150      	bne.n	2daf6 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2da54:	683b      	ldr	r3, [r7, #0]
   2da56:	2201      	movs	r2, #1
   2da58:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2da5a:	230f      	movs	r3, #15
   2da5c:	18fb      	adds	r3, r7, r3
   2da5e:	2200      	movs	r2, #0
   2da60:	701a      	strb	r2, [r3, #0]
		break;
   2da62:	e04c      	b.n	2dafe <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2da64:	2308      	movs	r3, #8
   2da66:	18fa      	adds	r2, r7, r3
   2da68:	1dfb      	adds	r3, r7, #7
   2da6a:	781b      	ldrb	r3, [r3, #0]
   2da6c:	0011      	movs	r1, r2
   2da6e:	0018      	movs	r0, r3
   2da70:	4b26      	ldr	r3, [pc, #152]	; (2db0c <disk_ioctl+0xec>)
   2da72:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2da74:	68bb      	ldr	r3, [r7, #8]
   2da76:	1c5a      	adds	r2, r3, #1
   2da78:	683b      	ldr	r3, [r7, #0]
   2da7a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2da7c:	230f      	movs	r3, #15
   2da7e:	18fb      	adds	r3, r7, r3
   2da80:	2200      	movs	r2, #0
   2da82:	701a      	strb	r2, [r3, #0]
	}
	break;
   2da84:	e03b      	b.n	2dafe <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2da86:	230e      	movs	r3, #14
   2da88:	18fc      	adds	r4, r7, r3
   2da8a:	1dfb      	adds	r3, r7, #7
   2da8c:	781b      	ldrb	r3, [r3, #0]
   2da8e:	0018      	movs	r0, r3
   2da90:	4b1f      	ldr	r3, [pc, #124]	; (2db10 <disk_ioctl+0xf0>)
   2da92:	4798      	blx	r3
   2da94:	0003      	movs	r3, r0
   2da96:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2da98:	230e      	movs	r3, #14
   2da9a:	18fb      	adds	r3, r7, r3
   2da9c:	781b      	ldrb	r3, [r3, #0]
   2da9e:	2b01      	cmp	r3, #1
   2daa0:	d010      	beq.n	2dac4 <disk_ioctl+0xa4>
   2daa2:	230e      	movs	r3, #14
   2daa4:	18fb      	adds	r3, r7, r3
   2daa6:	781b      	ldrb	r3, [r3, #0]
   2daa8:	2b02      	cmp	r3, #2
   2daaa:	d00b      	beq.n	2dac4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2daac:	230e      	movs	r3, #14
   2daae:	18fb      	adds	r3, r7, r3
   2dab0:	781b      	ldrb	r3, [r3, #0]
   2dab2:	2b04      	cmp	r3, #4
   2dab4:	d006      	beq.n	2dac4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2dab6:	230e      	movs	r3, #14
   2dab8:	18fb      	adds	r3, r7, r3
   2daba:	781b      	ldrb	r3, [r3, #0]
   2dabc:	2b08      	cmp	r3, #8
   2dabe:	d001      	beq.n	2dac4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2dac0:	2301      	movs	r3, #1
   2dac2:	e01f      	b.n	2db04 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2dac4:	683b      	ldr	r3, [r7, #0]
   2dac6:	2200      	movs	r2, #0
   2dac8:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2daca:	230f      	movs	r3, #15
   2dacc:	18fb      	adds	r3, r7, r3
   2dace:	2200      	movs	r2, #0
   2dad0:	701a      	strb	r2, [r3, #0]
	}
	break;
   2dad2:	e014      	b.n	2dafe <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2dad4:	1dfb      	adds	r3, r7, #7
   2dad6:	781b      	ldrb	r3, [r3, #0]
   2dad8:	0018      	movs	r0, r3
   2dada:	4b0e      	ldr	r3, [pc, #56]	; (2db14 <disk_ioctl+0xf4>)
   2dadc:	4798      	blx	r3
   2dade:	1e03      	subs	r3, r0, #0
   2dae0:	d104      	bne.n	2daec <disk_ioctl+0xcc>
			res = RES_OK;
   2dae2:	230f      	movs	r3, #15
   2dae4:	18fb      	adds	r3, r7, r3
   2dae6:	2200      	movs	r2, #0
   2dae8:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2daea:	e008      	b.n	2dafe <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2daec:	230f      	movs	r3, #15
   2daee:	18fb      	adds	r3, r7, r3
   2daf0:	2203      	movs	r2, #3
   2daf2:	701a      	strb	r2, [r3, #0]
		break;
   2daf4:	e003      	b.n	2dafe <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2daf6:	230f      	movs	r3, #15
   2daf8:	18fb      	adds	r3, r7, r3
   2dafa:	2204      	movs	r2, #4
   2dafc:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2dafe:	230f      	movs	r3, #15
   2db00:	18fb      	adds	r3, r7, r3
   2db02:	781b      	ldrb	r3, [r3, #0]
}
   2db04:	0018      	movs	r0, r3
   2db06:	46bd      	mov	sp, r7
   2db08:	b005      	add	sp, #20
   2db0a:	bd90      	pop	{r4, r7, pc}
   2db0c:	00028469 	.word	0x00028469
   2db10:	000284b5 	.word	0x000284b5
   2db14:	00028429 	.word	0x00028429

0002db18 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2db18:	b580      	push	{r7, lr}
   2db1a:	b084      	sub	sp, #16
   2db1c:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2db1e:	1d3a      	adds	r2, r7, #4
   2db20:	4b12      	ldr	r3, [pc, #72]	; (2db6c <get_fattime+0x54>)
   2db22:	0011      	movs	r1, r2
   2db24:	0018      	movs	r0, r3
   2db26:	4b12      	ldr	r3, [pc, #72]	; (2db70 <get_fattime+0x58>)
   2db28:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2db2a:	1d3b      	adds	r3, r7, #4
   2db2c:	88db      	ldrh	r3, [r3, #6]
   2db2e:	4a11      	ldr	r2, [pc, #68]	; (2db74 <get_fattime+0x5c>)
   2db30:	4694      	mov	ip, r2
   2db32:	4463      	add	r3, ip
   2db34:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2db36:	1d3b      	adds	r3, r7, #4
   2db38:	795b      	ldrb	r3, [r3, #5]
   2db3a:	055b      	lsls	r3, r3, #21
   2db3c:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2db3e:	1d3b      	adds	r3, r7, #4
   2db40:	791b      	ldrb	r3, [r3, #4]
   2db42:	041b      	lsls	r3, r3, #16
   2db44:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2db46:	1d3b      	adds	r3, r7, #4
   2db48:	789b      	ldrb	r3, [r3, #2]
   2db4a:	02db      	lsls	r3, r3, #11
   2db4c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2db4e:	1d3b      	adds	r3, r7, #4
   2db50:	785b      	ldrb	r3, [r3, #1]
   2db52:	015b      	lsls	r3, r3, #5
   2db54:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2db56:	1d3a      	adds	r2, r7, #4
   2db58:	7812      	ldrb	r2, [r2, #0]
   2db5a:	0852      	lsrs	r2, r2, #1
   2db5c:	b2d2      	uxtb	r2, r2
   2db5e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2db60:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2db62:	68fb      	ldr	r3, [r7, #12]
}
   2db64:	0018      	movs	r0, r3
   2db66:	46bd      	mov	sp, r7
   2db68:	b004      	add	sp, #16
   2db6a:	bd80      	pop	{r7, pc}
   2db6c:	20005ab4 	.word	0x20005ab4
   2db70:	00029295 	.word	0x00029295
   2db74:	fffff844 	.word	0xfffff844

0002db78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2db78:	b580      	push	{r7, lr}
   2db7a:	b086      	sub	sp, #24
   2db7c:	af00      	add	r7, sp, #0
   2db7e:	60f8      	str	r0, [r7, #12]
   2db80:	60b9      	str	r1, [r7, #8]
   2db82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2db84:	68fb      	ldr	r3, [r7, #12]
   2db86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2db88:	68bb      	ldr	r3, [r7, #8]
   2db8a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2db8c:	e007      	b.n	2db9e <mem_cpy+0x26>
		*d++ = *s++;
   2db8e:	697b      	ldr	r3, [r7, #20]
   2db90:	1c5a      	adds	r2, r3, #1
   2db92:	617a      	str	r2, [r7, #20]
   2db94:	693a      	ldr	r2, [r7, #16]
   2db96:	1c51      	adds	r1, r2, #1
   2db98:	6139      	str	r1, [r7, #16]
   2db9a:	7812      	ldrb	r2, [r2, #0]
   2db9c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2db9e:	687b      	ldr	r3, [r7, #4]
   2dba0:	1e5a      	subs	r2, r3, #1
   2dba2:	607a      	str	r2, [r7, #4]
   2dba4:	2b00      	cmp	r3, #0
   2dba6:	d1f2      	bne.n	2db8e <mem_cpy+0x16>
}
   2dba8:	46c0      	nop			; (mov r8, r8)
   2dbaa:	46bd      	mov	sp, r7
   2dbac:	b006      	add	sp, #24
   2dbae:	bd80      	pop	{r7, pc}

0002dbb0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2dbb0:	b580      	push	{r7, lr}
   2dbb2:	b086      	sub	sp, #24
   2dbb4:	af00      	add	r7, sp, #0
   2dbb6:	60f8      	str	r0, [r7, #12]
   2dbb8:	60b9      	str	r1, [r7, #8]
   2dbba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2dbbc:	68fb      	ldr	r3, [r7, #12]
   2dbbe:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2dbc0:	e005      	b.n	2dbce <mem_set+0x1e>
		*d++ = (BYTE)val;
   2dbc2:	697b      	ldr	r3, [r7, #20]
   2dbc4:	1c5a      	adds	r2, r3, #1
   2dbc6:	617a      	str	r2, [r7, #20]
   2dbc8:	68ba      	ldr	r2, [r7, #8]
   2dbca:	b2d2      	uxtb	r2, r2
   2dbcc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2dbce:	687b      	ldr	r3, [r7, #4]
   2dbd0:	1e5a      	subs	r2, r3, #1
   2dbd2:	607a      	str	r2, [r7, #4]
   2dbd4:	2b00      	cmp	r3, #0
   2dbd6:	d1f4      	bne.n	2dbc2 <mem_set+0x12>
}
   2dbd8:	46c0      	nop			; (mov r8, r8)
   2dbda:	46bd      	mov	sp, r7
   2dbdc:	b006      	add	sp, #24
   2dbde:	bd80      	pop	{r7, pc}

0002dbe0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2dbe0:	b580      	push	{r7, lr}
   2dbe2:	b088      	sub	sp, #32
   2dbe4:	af00      	add	r7, sp, #0
   2dbe6:	60f8      	str	r0, [r7, #12]
   2dbe8:	60b9      	str	r1, [r7, #8]
   2dbea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2dbec:	68fb      	ldr	r3, [r7, #12]
   2dbee:	61fb      	str	r3, [r7, #28]
   2dbf0:	68bb      	ldr	r3, [r7, #8]
   2dbf2:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2dbf4:	2300      	movs	r3, #0
   2dbf6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2dbf8:	46c0      	nop			; (mov r8, r8)
   2dbfa:	687b      	ldr	r3, [r7, #4]
   2dbfc:	1e5a      	subs	r2, r3, #1
   2dbfe:	607a      	str	r2, [r7, #4]
   2dc00:	2b00      	cmp	r3, #0
   2dc02:	d00d      	beq.n	2dc20 <mem_cmp+0x40>
   2dc04:	69fb      	ldr	r3, [r7, #28]
   2dc06:	1c5a      	adds	r2, r3, #1
   2dc08:	61fa      	str	r2, [r7, #28]
   2dc0a:	781b      	ldrb	r3, [r3, #0]
   2dc0c:	0019      	movs	r1, r3
   2dc0e:	69bb      	ldr	r3, [r7, #24]
   2dc10:	1c5a      	adds	r2, r3, #1
   2dc12:	61ba      	str	r2, [r7, #24]
   2dc14:	781b      	ldrb	r3, [r3, #0]
   2dc16:	1acb      	subs	r3, r1, r3
   2dc18:	617b      	str	r3, [r7, #20]
   2dc1a:	697b      	ldr	r3, [r7, #20]
   2dc1c:	2b00      	cmp	r3, #0
   2dc1e:	d0ec      	beq.n	2dbfa <mem_cmp+0x1a>
	return r;
   2dc20:	697b      	ldr	r3, [r7, #20]
}
   2dc22:	0018      	movs	r0, r3
   2dc24:	46bd      	mov	sp, r7
   2dc26:	b008      	add	sp, #32
   2dc28:	bd80      	pop	{r7, pc}

0002dc2a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2dc2a:	b580      	push	{r7, lr}
   2dc2c:	b082      	sub	sp, #8
   2dc2e:	af00      	add	r7, sp, #0
   2dc30:	6078      	str	r0, [r7, #4]
   2dc32:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2dc34:	e002      	b.n	2dc3c <chk_chr+0x12>
   2dc36:	687b      	ldr	r3, [r7, #4]
   2dc38:	3301      	adds	r3, #1
   2dc3a:	607b      	str	r3, [r7, #4]
   2dc3c:	687b      	ldr	r3, [r7, #4]
   2dc3e:	781b      	ldrb	r3, [r3, #0]
   2dc40:	2b00      	cmp	r3, #0
   2dc42:	d005      	beq.n	2dc50 <chk_chr+0x26>
   2dc44:	687b      	ldr	r3, [r7, #4]
   2dc46:	781b      	ldrb	r3, [r3, #0]
   2dc48:	001a      	movs	r2, r3
   2dc4a:	683b      	ldr	r3, [r7, #0]
   2dc4c:	429a      	cmp	r2, r3
   2dc4e:	d1f2      	bne.n	2dc36 <chk_chr+0xc>
	return *str;
   2dc50:	687b      	ldr	r3, [r7, #4]
   2dc52:	781b      	ldrb	r3, [r3, #0]
}
   2dc54:	0018      	movs	r0, r3
   2dc56:	46bd      	mov	sp, r7
   2dc58:	b002      	add	sp, #8
   2dc5a:	bd80      	pop	{r7, pc}

0002dc5c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2dc5c:	b590      	push	{r4, r7, lr}
   2dc5e:	b085      	sub	sp, #20
   2dc60:	af00      	add	r7, sp, #0
   2dc62:	6078      	str	r0, [r7, #4]
   2dc64:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2dc66:	687b      	ldr	r3, [r7, #4]
   2dc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2dc6a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2dc6c:	68fa      	ldr	r2, [r7, #12]
   2dc6e:	683b      	ldr	r3, [r7, #0]
   2dc70:	429a      	cmp	r2, r3
   2dc72:	d04e      	beq.n	2dd12 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2dc74:	687b      	ldr	r3, [r7, #4]
   2dc76:	791b      	ldrb	r3, [r3, #4]
   2dc78:	2b00      	cmp	r3, #0
   2dc7a:	d037      	beq.n	2dcec <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2dc7c:	687b      	ldr	r3, [r7, #4]
   2dc7e:	7858      	ldrb	r0, [r3, #1]
   2dc80:	687b      	ldr	r3, [r7, #4]
   2dc82:	3330      	adds	r3, #48	; 0x30
   2dc84:	0019      	movs	r1, r3
   2dc86:	68fa      	ldr	r2, [r7, #12]
   2dc88:	2301      	movs	r3, #1
   2dc8a:	4c24      	ldr	r4, [pc, #144]	; (2dd1c <move_window+0xc0>)
   2dc8c:	47a0      	blx	r4
   2dc8e:	1e03      	subs	r3, r0, #0
   2dc90:	d001      	beq.n	2dc96 <move_window+0x3a>
				return FR_DISK_ERR;
   2dc92:	2301      	movs	r3, #1
   2dc94:	e03e      	b.n	2dd14 <move_window+0xb8>
			fs->wflag = 0;
   2dc96:	687b      	ldr	r3, [r7, #4]
   2dc98:	2200      	movs	r2, #0
   2dc9a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2dc9c:	687b      	ldr	r3, [r7, #4]
   2dc9e:	6a1a      	ldr	r2, [r3, #32]
   2dca0:	687b      	ldr	r3, [r7, #4]
   2dca2:	69db      	ldr	r3, [r3, #28]
   2dca4:	18d2      	adds	r2, r2, r3
   2dca6:	68fb      	ldr	r3, [r7, #12]
   2dca8:	429a      	cmp	r2, r3
   2dcaa:	d91f      	bls.n	2dcec <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2dcac:	230b      	movs	r3, #11
   2dcae:	18fb      	adds	r3, r7, r3
   2dcb0:	687a      	ldr	r2, [r7, #4]
   2dcb2:	78d2      	ldrb	r2, [r2, #3]
   2dcb4:	701a      	strb	r2, [r3, #0]
   2dcb6:	e014      	b.n	2dce2 <move_window+0x86>
					wsect += fs->fsize;
   2dcb8:	687b      	ldr	r3, [r7, #4]
   2dcba:	69db      	ldr	r3, [r3, #28]
   2dcbc:	68fa      	ldr	r2, [r7, #12]
   2dcbe:	18d3      	adds	r3, r2, r3
   2dcc0:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2dcc2:	687b      	ldr	r3, [r7, #4]
   2dcc4:	7858      	ldrb	r0, [r3, #1]
   2dcc6:	687b      	ldr	r3, [r7, #4]
   2dcc8:	3330      	adds	r3, #48	; 0x30
   2dcca:	0019      	movs	r1, r3
   2dccc:	68fa      	ldr	r2, [r7, #12]
   2dcce:	2301      	movs	r3, #1
   2dcd0:	4c12      	ldr	r4, [pc, #72]	; (2dd1c <move_window+0xc0>)
   2dcd2:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2dcd4:	230b      	movs	r3, #11
   2dcd6:	18fb      	adds	r3, r7, r3
   2dcd8:	781a      	ldrb	r2, [r3, #0]
   2dcda:	230b      	movs	r3, #11
   2dcdc:	18fb      	adds	r3, r7, r3
   2dcde:	3a01      	subs	r2, #1
   2dce0:	701a      	strb	r2, [r3, #0]
   2dce2:	230b      	movs	r3, #11
   2dce4:	18fb      	adds	r3, r7, r3
   2dce6:	781b      	ldrb	r3, [r3, #0]
   2dce8:	2b01      	cmp	r3, #1
   2dcea:	d8e5      	bhi.n	2dcb8 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2dcec:	683b      	ldr	r3, [r7, #0]
   2dcee:	2b00      	cmp	r3, #0
   2dcf0:	d00f      	beq.n	2dd12 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2dcf2:	687b      	ldr	r3, [r7, #4]
   2dcf4:	7858      	ldrb	r0, [r3, #1]
   2dcf6:	687b      	ldr	r3, [r7, #4]
   2dcf8:	3330      	adds	r3, #48	; 0x30
   2dcfa:	0019      	movs	r1, r3
   2dcfc:	683a      	ldr	r2, [r7, #0]
   2dcfe:	2301      	movs	r3, #1
   2dd00:	4c07      	ldr	r4, [pc, #28]	; (2dd20 <move_window+0xc4>)
   2dd02:	47a0      	blx	r4
   2dd04:	1e03      	subs	r3, r0, #0
   2dd06:	d001      	beq.n	2dd0c <move_window+0xb0>
				return FR_DISK_ERR;
   2dd08:	2301      	movs	r3, #1
   2dd0a:	e003      	b.n	2dd14 <move_window+0xb8>
			fs->winsect = sector;
   2dd0c:	687b      	ldr	r3, [r7, #4]
   2dd0e:	683a      	ldr	r2, [r7, #0]
   2dd10:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2dd12:	2300      	movs	r3, #0
}
   2dd14:	0018      	movs	r0, r3
   2dd16:	46bd      	mov	sp, r7
   2dd18:	b005      	add	sp, #20
   2dd1a:	bd90      	pop	{r4, r7, pc}
   2dd1c:	0002d949 	.word	0x0002d949
   2dd20:	0002d871 	.word	0x0002d871

0002dd24 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2dd24:	b590      	push	{r4, r7, lr}
   2dd26:	b085      	sub	sp, #20
   2dd28:	af00      	add	r7, sp, #0
   2dd2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2dd2c:	230f      	movs	r3, #15
   2dd2e:	18fc      	adds	r4, r7, r3
   2dd30:	687b      	ldr	r3, [r7, #4]
   2dd32:	2100      	movs	r1, #0
   2dd34:	0018      	movs	r0, r3
   2dd36:	4b52      	ldr	r3, [pc, #328]	; (2de80 <sync+0x15c>)
   2dd38:	4798      	blx	r3
   2dd3a:	0003      	movs	r3, r0
   2dd3c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2dd3e:	230f      	movs	r3, #15
   2dd40:	18fb      	adds	r3, r7, r3
   2dd42:	781b      	ldrb	r3, [r3, #0]
   2dd44:	2b00      	cmp	r3, #0
   2dd46:	d000      	beq.n	2dd4a <sync+0x26>
   2dd48:	e093      	b.n	2de72 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2dd4a:	687b      	ldr	r3, [r7, #4]
   2dd4c:	781b      	ldrb	r3, [r3, #0]
   2dd4e:	2b03      	cmp	r3, #3
   2dd50:	d000      	beq.n	2dd54 <sync+0x30>
   2dd52:	e081      	b.n	2de58 <sync+0x134>
   2dd54:	687b      	ldr	r3, [r7, #4]
   2dd56:	795b      	ldrb	r3, [r3, #5]
   2dd58:	2b00      	cmp	r3, #0
   2dd5a:	d07d      	beq.n	2de58 <sync+0x134>
			fs->winsect = 0;
   2dd5c:	687b      	ldr	r3, [r7, #4]
   2dd5e:	2200      	movs	r2, #0
   2dd60:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2dd62:	687b      	ldr	r3, [r7, #4]
   2dd64:	3330      	adds	r3, #48	; 0x30
   2dd66:	0018      	movs	r0, r3
   2dd68:	2380      	movs	r3, #128	; 0x80
   2dd6a:	009b      	lsls	r3, r3, #2
   2dd6c:	001a      	movs	r2, r3
   2dd6e:	2100      	movs	r1, #0
   2dd70:	4b44      	ldr	r3, [pc, #272]	; (2de84 <sync+0x160>)
   2dd72:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2dd74:	687b      	ldr	r3, [r7, #4]
   2dd76:	4a44      	ldr	r2, [pc, #272]	; (2de88 <sync+0x164>)
   2dd78:	2155      	movs	r1, #85	; 0x55
   2dd7a:	5499      	strb	r1, [r3, r2]
   2dd7c:	687b      	ldr	r3, [r7, #4]
   2dd7e:	4a43      	ldr	r2, [pc, #268]	; (2de8c <sync+0x168>)
   2dd80:	21aa      	movs	r1, #170	; 0xaa
   2dd82:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2dd84:	687b      	ldr	r3, [r7, #4]
   2dd86:	2230      	movs	r2, #48	; 0x30
   2dd88:	2152      	movs	r1, #82	; 0x52
   2dd8a:	5499      	strb	r1, [r3, r2]
   2dd8c:	687b      	ldr	r3, [r7, #4]
   2dd8e:	2231      	movs	r2, #49	; 0x31
   2dd90:	2152      	movs	r1, #82	; 0x52
   2dd92:	5499      	strb	r1, [r3, r2]
   2dd94:	687b      	ldr	r3, [r7, #4]
   2dd96:	2232      	movs	r2, #50	; 0x32
   2dd98:	2161      	movs	r1, #97	; 0x61
   2dd9a:	5499      	strb	r1, [r3, r2]
   2dd9c:	687b      	ldr	r3, [r7, #4]
   2dd9e:	2233      	movs	r2, #51	; 0x33
   2dda0:	2141      	movs	r1, #65	; 0x41
   2dda2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2dda4:	687a      	ldr	r2, [r7, #4]
   2dda6:	2385      	movs	r3, #133	; 0x85
   2dda8:	009b      	lsls	r3, r3, #2
   2ddaa:	2172      	movs	r1, #114	; 0x72
   2ddac:	54d1      	strb	r1, [r2, r3]
   2ddae:	687b      	ldr	r3, [r7, #4]
   2ddb0:	4a37      	ldr	r2, [pc, #220]	; (2de90 <sync+0x16c>)
   2ddb2:	2172      	movs	r1, #114	; 0x72
   2ddb4:	5499      	strb	r1, [r3, r2]
   2ddb6:	687b      	ldr	r3, [r7, #4]
   2ddb8:	4a36      	ldr	r2, [pc, #216]	; (2de94 <sync+0x170>)
   2ddba:	2141      	movs	r1, #65	; 0x41
   2ddbc:	5499      	strb	r1, [r3, r2]
   2ddbe:	687b      	ldr	r3, [r7, #4]
   2ddc0:	4a35      	ldr	r2, [pc, #212]	; (2de98 <sync+0x174>)
   2ddc2:	2161      	movs	r1, #97	; 0x61
   2ddc4:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2ddc6:	687b      	ldr	r3, [r7, #4]
   2ddc8:	691b      	ldr	r3, [r3, #16]
   2ddca:	b2d9      	uxtb	r1, r3
   2ddcc:	687a      	ldr	r2, [r7, #4]
   2ddce:	2386      	movs	r3, #134	; 0x86
   2ddd0:	009b      	lsls	r3, r3, #2
   2ddd2:	54d1      	strb	r1, [r2, r3]
   2ddd4:	687b      	ldr	r3, [r7, #4]
   2ddd6:	691b      	ldr	r3, [r3, #16]
   2ddd8:	b29b      	uxth	r3, r3
   2ddda:	0a1b      	lsrs	r3, r3, #8
   2dddc:	b29b      	uxth	r3, r3
   2ddde:	b2d9      	uxtb	r1, r3
   2dde0:	687b      	ldr	r3, [r7, #4]
   2dde2:	4a2e      	ldr	r2, [pc, #184]	; (2de9c <sync+0x178>)
   2dde4:	5499      	strb	r1, [r3, r2]
   2dde6:	687b      	ldr	r3, [r7, #4]
   2dde8:	691b      	ldr	r3, [r3, #16]
   2ddea:	0c1b      	lsrs	r3, r3, #16
   2ddec:	b2d9      	uxtb	r1, r3
   2ddee:	687b      	ldr	r3, [r7, #4]
   2ddf0:	4a2b      	ldr	r2, [pc, #172]	; (2dea0 <sync+0x17c>)
   2ddf2:	5499      	strb	r1, [r3, r2]
   2ddf4:	687b      	ldr	r3, [r7, #4]
   2ddf6:	691b      	ldr	r3, [r3, #16]
   2ddf8:	0e1b      	lsrs	r3, r3, #24
   2ddfa:	b2d9      	uxtb	r1, r3
   2ddfc:	687b      	ldr	r3, [r7, #4]
   2ddfe:	4a29      	ldr	r2, [pc, #164]	; (2dea4 <sync+0x180>)
   2de00:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2de02:	687b      	ldr	r3, [r7, #4]
   2de04:	68db      	ldr	r3, [r3, #12]
   2de06:	b2d9      	uxtb	r1, r3
   2de08:	687a      	ldr	r2, [r7, #4]
   2de0a:	2387      	movs	r3, #135	; 0x87
   2de0c:	009b      	lsls	r3, r3, #2
   2de0e:	54d1      	strb	r1, [r2, r3]
   2de10:	687b      	ldr	r3, [r7, #4]
   2de12:	68db      	ldr	r3, [r3, #12]
   2de14:	b29b      	uxth	r3, r3
   2de16:	0a1b      	lsrs	r3, r3, #8
   2de18:	b29b      	uxth	r3, r3
   2de1a:	b2d9      	uxtb	r1, r3
   2de1c:	687b      	ldr	r3, [r7, #4]
   2de1e:	4a22      	ldr	r2, [pc, #136]	; (2dea8 <sync+0x184>)
   2de20:	5499      	strb	r1, [r3, r2]
   2de22:	687b      	ldr	r3, [r7, #4]
   2de24:	68db      	ldr	r3, [r3, #12]
   2de26:	0c1b      	lsrs	r3, r3, #16
   2de28:	b2d9      	uxtb	r1, r3
   2de2a:	687b      	ldr	r3, [r7, #4]
   2de2c:	4a1f      	ldr	r2, [pc, #124]	; (2deac <sync+0x188>)
   2de2e:	5499      	strb	r1, [r3, r2]
   2de30:	687b      	ldr	r3, [r7, #4]
   2de32:	68db      	ldr	r3, [r3, #12]
   2de34:	0e1b      	lsrs	r3, r3, #24
   2de36:	b2d9      	uxtb	r1, r3
   2de38:	687b      	ldr	r3, [r7, #4]
   2de3a:	4a1d      	ldr	r2, [pc, #116]	; (2deb0 <sync+0x18c>)
   2de3c:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2de3e:	687b      	ldr	r3, [r7, #4]
   2de40:	7858      	ldrb	r0, [r3, #1]
   2de42:	687b      	ldr	r3, [r7, #4]
   2de44:	3330      	adds	r3, #48	; 0x30
   2de46:	0019      	movs	r1, r3
   2de48:	687b      	ldr	r3, [r7, #4]
   2de4a:	695a      	ldr	r2, [r3, #20]
   2de4c:	2301      	movs	r3, #1
   2de4e:	4c19      	ldr	r4, [pc, #100]	; (2deb4 <sync+0x190>)
   2de50:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2de52:	687b      	ldr	r3, [r7, #4]
   2de54:	2200      	movs	r2, #0
   2de56:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2de58:	687b      	ldr	r3, [r7, #4]
   2de5a:	785b      	ldrb	r3, [r3, #1]
   2de5c:	2200      	movs	r2, #0
   2de5e:	2100      	movs	r1, #0
   2de60:	0018      	movs	r0, r3
   2de62:	4b15      	ldr	r3, [pc, #84]	; (2deb8 <sync+0x194>)
   2de64:	4798      	blx	r3
   2de66:	1e03      	subs	r3, r0, #0
   2de68:	d003      	beq.n	2de72 <sync+0x14e>
			res = FR_DISK_ERR;
   2de6a:	230f      	movs	r3, #15
   2de6c:	18fb      	adds	r3, r7, r3
   2de6e:	2201      	movs	r2, #1
   2de70:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2de72:	230f      	movs	r3, #15
   2de74:	18fb      	adds	r3, r7, r3
   2de76:	781b      	ldrb	r3, [r3, #0]
}
   2de78:	0018      	movs	r0, r3
   2de7a:	46bd      	mov	sp, r7
   2de7c:	b005      	add	sp, #20
   2de7e:	bd90      	pop	{r4, r7, pc}
   2de80:	0002dc5d 	.word	0x0002dc5d
   2de84:	0002dbb1 	.word	0x0002dbb1
   2de88:	0000022e 	.word	0x0000022e
   2de8c:	0000022f 	.word	0x0000022f
   2de90:	00000215 	.word	0x00000215
   2de94:	00000216 	.word	0x00000216
   2de98:	00000217 	.word	0x00000217
   2de9c:	00000219 	.word	0x00000219
   2dea0:	0000021a 	.word	0x0000021a
   2dea4:	0000021b 	.word	0x0000021b
   2dea8:	0000021d 	.word	0x0000021d
   2deac:	0000021e 	.word	0x0000021e
   2deb0:	0000021f 	.word	0x0000021f
   2deb4:	0002d949 	.word	0x0002d949
   2deb8:	0002da21 	.word	0x0002da21

0002debc <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2debc:	b580      	push	{r7, lr}
   2debe:	b082      	sub	sp, #8
   2dec0:	af00      	add	r7, sp, #0
   2dec2:	6078      	str	r0, [r7, #4]
   2dec4:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2dec6:	683b      	ldr	r3, [r7, #0]
   2dec8:	3b02      	subs	r3, #2
   2deca:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2decc:	687b      	ldr	r3, [r7, #4]
   2dece:	699b      	ldr	r3, [r3, #24]
   2ded0:	1e9a      	subs	r2, r3, #2
   2ded2:	683b      	ldr	r3, [r7, #0]
   2ded4:	429a      	cmp	r2, r3
   2ded6:	d801      	bhi.n	2dedc <clust2sect+0x20>
   2ded8:	2300      	movs	r3, #0
   2deda:	e007      	b.n	2deec <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2dedc:	687b      	ldr	r3, [r7, #4]
   2dede:	789b      	ldrb	r3, [r3, #2]
   2dee0:	001a      	movs	r2, r3
   2dee2:	683b      	ldr	r3, [r7, #0]
   2dee4:	435a      	muls	r2, r3
   2dee6:	687b      	ldr	r3, [r7, #4]
   2dee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2deea:	18d3      	adds	r3, r2, r3
}
   2deec:	0018      	movs	r0, r3
   2deee:	46bd      	mov	sp, r7
   2def0:	b002      	add	sp, #8
   2def2:	bd80      	pop	{r7, pc}

0002def4 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2def4:	b580      	push	{r7, lr}
   2def6:	b086      	sub	sp, #24
   2def8:	af00      	add	r7, sp, #0
   2defa:	6078      	str	r0, [r7, #4]
   2defc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2defe:	683b      	ldr	r3, [r7, #0]
   2df00:	2b01      	cmp	r3, #1
   2df02:	d904      	bls.n	2df0e <get_fat+0x1a>
   2df04:	687b      	ldr	r3, [r7, #4]
   2df06:	699a      	ldr	r2, [r3, #24]
   2df08:	683b      	ldr	r3, [r7, #0]
   2df0a:	429a      	cmp	r2, r3
   2df0c:	d801      	bhi.n	2df12 <get_fat+0x1e>
		return 1;
   2df0e:	2301      	movs	r3, #1
   2df10:	e09f      	b.n	2e052 <get_fat+0x15e>

	switch (fs->fs_type) {
   2df12:	687b      	ldr	r3, [r7, #4]
   2df14:	781b      	ldrb	r3, [r3, #0]
   2df16:	2b02      	cmp	r3, #2
   2df18:	d048      	beq.n	2dfac <get_fat+0xb8>
   2df1a:	2b03      	cmp	r3, #3
   2df1c:	d067      	beq.n	2dfee <get_fat+0xfa>
   2df1e:	2b01      	cmp	r3, #1
   2df20:	d000      	beq.n	2df24 <get_fat+0x30>
   2df22:	e094      	b.n	2e04e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2df24:	683b      	ldr	r3, [r7, #0]
   2df26:	617b      	str	r3, [r7, #20]
   2df28:	697b      	ldr	r3, [r7, #20]
   2df2a:	085b      	lsrs	r3, r3, #1
   2df2c:	697a      	ldr	r2, [r7, #20]
   2df2e:	18d3      	adds	r3, r2, r3
   2df30:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2df32:	687b      	ldr	r3, [r7, #4]
   2df34:	6a1a      	ldr	r2, [r3, #32]
   2df36:	697b      	ldr	r3, [r7, #20]
   2df38:	0a5b      	lsrs	r3, r3, #9
   2df3a:	18d2      	adds	r2, r2, r3
   2df3c:	687b      	ldr	r3, [r7, #4]
   2df3e:	0011      	movs	r1, r2
   2df40:	0018      	movs	r0, r3
   2df42:	4b46      	ldr	r3, [pc, #280]	; (2e05c <get_fat+0x168>)
   2df44:	4798      	blx	r3
   2df46:	1e03      	subs	r3, r0, #0
   2df48:	d000      	beq.n	2df4c <get_fat+0x58>
   2df4a:	e079      	b.n	2e040 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2df4c:	697b      	ldr	r3, [r7, #20]
   2df4e:	05db      	lsls	r3, r3, #23
   2df50:	0ddb      	lsrs	r3, r3, #23
   2df52:	687a      	ldr	r2, [r7, #4]
   2df54:	2130      	movs	r1, #48	; 0x30
   2df56:	18d3      	adds	r3, r2, r3
   2df58:	185b      	adds	r3, r3, r1
   2df5a:	781b      	ldrb	r3, [r3, #0]
   2df5c:	613b      	str	r3, [r7, #16]
   2df5e:	697b      	ldr	r3, [r7, #20]
   2df60:	3301      	adds	r3, #1
   2df62:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2df64:	687b      	ldr	r3, [r7, #4]
   2df66:	6a1a      	ldr	r2, [r3, #32]
   2df68:	697b      	ldr	r3, [r7, #20]
   2df6a:	0a5b      	lsrs	r3, r3, #9
   2df6c:	18d2      	adds	r2, r2, r3
   2df6e:	687b      	ldr	r3, [r7, #4]
   2df70:	0011      	movs	r1, r2
   2df72:	0018      	movs	r0, r3
   2df74:	4b39      	ldr	r3, [pc, #228]	; (2e05c <get_fat+0x168>)
   2df76:	4798      	blx	r3
   2df78:	1e03      	subs	r3, r0, #0
   2df7a:	d163      	bne.n	2e044 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2df7c:	697b      	ldr	r3, [r7, #20]
   2df7e:	05db      	lsls	r3, r3, #23
   2df80:	0ddb      	lsrs	r3, r3, #23
   2df82:	687a      	ldr	r2, [r7, #4]
   2df84:	2130      	movs	r1, #48	; 0x30
   2df86:	18d3      	adds	r3, r2, r3
   2df88:	185b      	adds	r3, r3, r1
   2df8a:	781b      	ldrb	r3, [r3, #0]
   2df8c:	021b      	lsls	r3, r3, #8
   2df8e:	001a      	movs	r2, r3
   2df90:	693b      	ldr	r3, [r7, #16]
   2df92:	4313      	orrs	r3, r2
   2df94:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2df96:	683b      	ldr	r3, [r7, #0]
   2df98:	2201      	movs	r2, #1
   2df9a:	4013      	ands	r3, r2
   2df9c:	d002      	beq.n	2dfa4 <get_fat+0xb0>
   2df9e:	693b      	ldr	r3, [r7, #16]
   2dfa0:	091b      	lsrs	r3, r3, #4
   2dfa2:	e056      	b.n	2e052 <get_fat+0x15e>
   2dfa4:	693b      	ldr	r3, [r7, #16]
   2dfa6:	051b      	lsls	r3, r3, #20
   2dfa8:	0d1b      	lsrs	r3, r3, #20
   2dfaa:	e052      	b.n	2e052 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2dfac:	687b      	ldr	r3, [r7, #4]
   2dfae:	6a1a      	ldr	r2, [r3, #32]
   2dfb0:	683b      	ldr	r3, [r7, #0]
   2dfb2:	0a1b      	lsrs	r3, r3, #8
   2dfb4:	18d2      	adds	r2, r2, r3
   2dfb6:	687b      	ldr	r3, [r7, #4]
   2dfb8:	0011      	movs	r1, r2
   2dfba:	0018      	movs	r0, r3
   2dfbc:	4b27      	ldr	r3, [pc, #156]	; (2e05c <get_fat+0x168>)
   2dfbe:	4798      	blx	r3
   2dfc0:	1e03      	subs	r3, r0, #0
   2dfc2:	d141      	bne.n	2e048 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2dfc4:	683b      	ldr	r3, [r7, #0]
   2dfc6:	005a      	lsls	r2, r3, #1
   2dfc8:	23ff      	movs	r3, #255	; 0xff
   2dfca:	005b      	lsls	r3, r3, #1
   2dfcc:	4013      	ands	r3, r2
   2dfce:	3330      	adds	r3, #48	; 0x30
   2dfd0:	687a      	ldr	r2, [r7, #4]
   2dfd2:	18d3      	adds	r3, r2, r3
   2dfd4:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2dfd6:	68fb      	ldr	r3, [r7, #12]
   2dfd8:	3301      	adds	r3, #1
   2dfda:	781b      	ldrb	r3, [r3, #0]
   2dfdc:	021b      	lsls	r3, r3, #8
   2dfde:	b21a      	sxth	r2, r3
   2dfe0:	68fb      	ldr	r3, [r7, #12]
   2dfe2:	781b      	ldrb	r3, [r3, #0]
   2dfe4:	b21b      	sxth	r3, r3
   2dfe6:	4313      	orrs	r3, r2
   2dfe8:	b21b      	sxth	r3, r3
   2dfea:	b29b      	uxth	r3, r3
   2dfec:	e031      	b.n	2e052 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2dfee:	687b      	ldr	r3, [r7, #4]
   2dff0:	6a1a      	ldr	r2, [r3, #32]
   2dff2:	683b      	ldr	r3, [r7, #0]
   2dff4:	09db      	lsrs	r3, r3, #7
   2dff6:	18d2      	adds	r2, r2, r3
   2dff8:	687b      	ldr	r3, [r7, #4]
   2dffa:	0011      	movs	r1, r2
   2dffc:	0018      	movs	r0, r3
   2dffe:	4b17      	ldr	r3, [pc, #92]	; (2e05c <get_fat+0x168>)
   2e000:	4798      	blx	r3
   2e002:	1e03      	subs	r3, r0, #0
   2e004:	d122      	bne.n	2e04c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2e006:	683b      	ldr	r3, [r7, #0]
   2e008:	009a      	lsls	r2, r3, #2
   2e00a:	23fe      	movs	r3, #254	; 0xfe
   2e00c:	005b      	lsls	r3, r3, #1
   2e00e:	4013      	ands	r3, r2
   2e010:	3330      	adds	r3, #48	; 0x30
   2e012:	687a      	ldr	r2, [r7, #4]
   2e014:	18d3      	adds	r3, r2, r3
   2e016:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2e018:	68fb      	ldr	r3, [r7, #12]
   2e01a:	3303      	adds	r3, #3
   2e01c:	781b      	ldrb	r3, [r3, #0]
   2e01e:	061a      	lsls	r2, r3, #24
   2e020:	68fb      	ldr	r3, [r7, #12]
   2e022:	3302      	adds	r3, #2
   2e024:	781b      	ldrb	r3, [r3, #0]
   2e026:	041b      	lsls	r3, r3, #16
   2e028:	4313      	orrs	r3, r2
   2e02a:	68fa      	ldr	r2, [r7, #12]
   2e02c:	3201      	adds	r2, #1
   2e02e:	7812      	ldrb	r2, [r2, #0]
   2e030:	0212      	lsls	r2, r2, #8
   2e032:	4313      	orrs	r3, r2
   2e034:	68fa      	ldr	r2, [r7, #12]
   2e036:	7812      	ldrb	r2, [r2, #0]
   2e038:	4313      	orrs	r3, r2
   2e03a:	011b      	lsls	r3, r3, #4
   2e03c:	091b      	lsrs	r3, r3, #4
   2e03e:	e008      	b.n	2e052 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e040:	46c0      	nop			; (mov r8, r8)
   2e042:	e004      	b.n	2e04e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e044:	46c0      	nop			; (mov r8, r8)
   2e046:	e002      	b.n	2e04e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2e048:	46c0      	nop			; (mov r8, r8)
   2e04a:	e000      	b.n	2e04e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2e04c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2e04e:	2301      	movs	r3, #1
   2e050:	425b      	negs	r3, r3
}
   2e052:	0018      	movs	r0, r3
   2e054:	46bd      	mov	sp, r7
   2e056:	b006      	add	sp, #24
   2e058:	bd80      	pop	{r7, pc}
   2e05a:	46c0      	nop			; (mov r8, r8)
   2e05c:	0002dc5d 	.word	0x0002dc5d

0002e060 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2e060:	b590      	push	{r4, r7, lr}
   2e062:	b089      	sub	sp, #36	; 0x24
   2e064:	af00      	add	r7, sp, #0
   2e066:	60f8      	str	r0, [r7, #12]
   2e068:	60b9      	str	r1, [r7, #8]
   2e06a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2e06c:	68bb      	ldr	r3, [r7, #8]
   2e06e:	2b01      	cmp	r3, #1
   2e070:	d904      	bls.n	2e07c <put_fat+0x1c>
   2e072:	68fb      	ldr	r3, [r7, #12]
   2e074:	699a      	ldr	r2, [r3, #24]
   2e076:	68bb      	ldr	r3, [r7, #8]
   2e078:	429a      	cmp	r2, r3
   2e07a:	d804      	bhi.n	2e086 <put_fat+0x26>
		res = FR_INT_ERR;
   2e07c:	231f      	movs	r3, #31
   2e07e:	18fb      	adds	r3, r7, r3
   2e080:	2202      	movs	r2, #2
   2e082:	701a      	strb	r2, [r3, #0]
   2e084:	e100      	b.n	2e288 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2e086:	68fb      	ldr	r3, [r7, #12]
   2e088:	781b      	ldrb	r3, [r3, #0]
   2e08a:	2b02      	cmp	r3, #2
   2e08c:	d100      	bne.n	2e090 <put_fat+0x30>
   2e08e:	e078      	b.n	2e182 <put_fat+0x122>
   2e090:	2b03      	cmp	r3, #3
   2e092:	d100      	bne.n	2e096 <put_fat+0x36>
   2e094:	e09e      	b.n	2e1d4 <put_fat+0x174>
   2e096:	2b01      	cmp	r3, #1
   2e098:	d000      	beq.n	2e09c <put_fat+0x3c>
   2e09a:	e0e6      	b.n	2e26a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2e09c:	68bb      	ldr	r3, [r7, #8]
   2e09e:	61bb      	str	r3, [r7, #24]
   2e0a0:	69bb      	ldr	r3, [r7, #24]
   2e0a2:	085b      	lsrs	r3, r3, #1
   2e0a4:	69ba      	ldr	r2, [r7, #24]
   2e0a6:	18d3      	adds	r3, r2, r3
   2e0a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2e0aa:	68fb      	ldr	r3, [r7, #12]
   2e0ac:	6a1a      	ldr	r2, [r3, #32]
   2e0ae:	69bb      	ldr	r3, [r7, #24]
   2e0b0:	0a5b      	lsrs	r3, r3, #9
   2e0b2:	18d2      	adds	r2, r2, r3
   2e0b4:	231f      	movs	r3, #31
   2e0b6:	18fc      	adds	r4, r7, r3
   2e0b8:	68fb      	ldr	r3, [r7, #12]
   2e0ba:	0011      	movs	r1, r2
   2e0bc:	0018      	movs	r0, r3
   2e0be:	4b76      	ldr	r3, [pc, #472]	; (2e298 <put_fat+0x238>)
   2e0c0:	4798      	blx	r3
   2e0c2:	0003      	movs	r3, r0
   2e0c4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e0c6:	231f      	movs	r3, #31
   2e0c8:	18fb      	adds	r3, r7, r3
   2e0ca:	781b      	ldrb	r3, [r3, #0]
   2e0cc:	2b00      	cmp	r3, #0
   2e0ce:	d000      	beq.n	2e0d2 <put_fat+0x72>
   2e0d0:	e0d0      	b.n	2e274 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2e0d2:	69bb      	ldr	r3, [r7, #24]
   2e0d4:	05db      	lsls	r3, r3, #23
   2e0d6:	0ddb      	lsrs	r3, r3, #23
   2e0d8:	3330      	adds	r3, #48	; 0x30
   2e0da:	68fa      	ldr	r2, [r7, #12]
   2e0dc:	18d3      	adds	r3, r2, r3
   2e0de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2e0e0:	68bb      	ldr	r3, [r7, #8]
   2e0e2:	2201      	movs	r2, #1
   2e0e4:	4013      	ands	r3, r2
   2e0e6:	d00d      	beq.n	2e104 <put_fat+0xa4>
   2e0e8:	697b      	ldr	r3, [r7, #20]
   2e0ea:	781b      	ldrb	r3, [r3, #0]
   2e0ec:	b25b      	sxtb	r3, r3
   2e0ee:	220f      	movs	r2, #15
   2e0f0:	4013      	ands	r3, r2
   2e0f2:	b25a      	sxtb	r2, r3
   2e0f4:	687b      	ldr	r3, [r7, #4]
   2e0f6:	b2db      	uxtb	r3, r3
   2e0f8:	011b      	lsls	r3, r3, #4
   2e0fa:	b25b      	sxtb	r3, r3
   2e0fc:	4313      	orrs	r3, r2
   2e0fe:	b25b      	sxtb	r3, r3
   2e100:	b2db      	uxtb	r3, r3
   2e102:	e001      	b.n	2e108 <put_fat+0xa8>
   2e104:	687b      	ldr	r3, [r7, #4]
   2e106:	b2db      	uxtb	r3, r3
   2e108:	697a      	ldr	r2, [r7, #20]
   2e10a:	7013      	strb	r3, [r2, #0]
			bc++;
   2e10c:	69bb      	ldr	r3, [r7, #24]
   2e10e:	3301      	adds	r3, #1
   2e110:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2e112:	68fb      	ldr	r3, [r7, #12]
   2e114:	2201      	movs	r2, #1
   2e116:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2e118:	68fb      	ldr	r3, [r7, #12]
   2e11a:	6a1a      	ldr	r2, [r3, #32]
   2e11c:	69bb      	ldr	r3, [r7, #24]
   2e11e:	0a5b      	lsrs	r3, r3, #9
   2e120:	18d2      	adds	r2, r2, r3
   2e122:	231f      	movs	r3, #31
   2e124:	18fc      	adds	r4, r7, r3
   2e126:	68fb      	ldr	r3, [r7, #12]
   2e128:	0011      	movs	r1, r2
   2e12a:	0018      	movs	r0, r3
   2e12c:	4b5a      	ldr	r3, [pc, #360]	; (2e298 <put_fat+0x238>)
   2e12e:	4798      	blx	r3
   2e130:	0003      	movs	r3, r0
   2e132:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e134:	231f      	movs	r3, #31
   2e136:	18fb      	adds	r3, r7, r3
   2e138:	781b      	ldrb	r3, [r3, #0]
   2e13a:	2b00      	cmp	r3, #0
   2e13c:	d000      	beq.n	2e140 <put_fat+0xe0>
   2e13e:	e09b      	b.n	2e278 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2e140:	69bb      	ldr	r3, [r7, #24]
   2e142:	05db      	lsls	r3, r3, #23
   2e144:	0ddb      	lsrs	r3, r3, #23
   2e146:	3330      	adds	r3, #48	; 0x30
   2e148:	68fa      	ldr	r2, [r7, #12]
   2e14a:	18d3      	adds	r3, r2, r3
   2e14c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2e14e:	68bb      	ldr	r3, [r7, #8]
   2e150:	2201      	movs	r2, #1
   2e152:	4013      	ands	r3, r2
   2e154:	d003      	beq.n	2e15e <put_fat+0xfe>
   2e156:	687b      	ldr	r3, [r7, #4]
   2e158:	091b      	lsrs	r3, r3, #4
   2e15a:	b2db      	uxtb	r3, r3
   2e15c:	e00e      	b.n	2e17c <put_fat+0x11c>
   2e15e:	697b      	ldr	r3, [r7, #20]
   2e160:	781b      	ldrb	r3, [r3, #0]
   2e162:	b25b      	sxtb	r3, r3
   2e164:	220f      	movs	r2, #15
   2e166:	4393      	bics	r3, r2
   2e168:	b25a      	sxtb	r2, r3
   2e16a:	687b      	ldr	r3, [r7, #4]
   2e16c:	0a1b      	lsrs	r3, r3, #8
   2e16e:	b25b      	sxtb	r3, r3
   2e170:	210f      	movs	r1, #15
   2e172:	400b      	ands	r3, r1
   2e174:	b25b      	sxtb	r3, r3
   2e176:	4313      	orrs	r3, r2
   2e178:	b25b      	sxtb	r3, r3
   2e17a:	b2db      	uxtb	r3, r3
   2e17c:	697a      	ldr	r2, [r7, #20]
   2e17e:	7013      	strb	r3, [r2, #0]
			break;
   2e180:	e07f      	b.n	2e282 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2e182:	68fb      	ldr	r3, [r7, #12]
   2e184:	6a1a      	ldr	r2, [r3, #32]
   2e186:	68bb      	ldr	r3, [r7, #8]
   2e188:	0a1b      	lsrs	r3, r3, #8
   2e18a:	18d2      	adds	r2, r2, r3
   2e18c:	231f      	movs	r3, #31
   2e18e:	18fc      	adds	r4, r7, r3
   2e190:	68fb      	ldr	r3, [r7, #12]
   2e192:	0011      	movs	r1, r2
   2e194:	0018      	movs	r0, r3
   2e196:	4b40      	ldr	r3, [pc, #256]	; (2e298 <put_fat+0x238>)
   2e198:	4798      	blx	r3
   2e19a:	0003      	movs	r3, r0
   2e19c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e19e:	231f      	movs	r3, #31
   2e1a0:	18fb      	adds	r3, r7, r3
   2e1a2:	781b      	ldrb	r3, [r3, #0]
   2e1a4:	2b00      	cmp	r3, #0
   2e1a6:	d169      	bne.n	2e27c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2e1a8:	68bb      	ldr	r3, [r7, #8]
   2e1aa:	005a      	lsls	r2, r3, #1
   2e1ac:	23ff      	movs	r3, #255	; 0xff
   2e1ae:	005b      	lsls	r3, r3, #1
   2e1b0:	4013      	ands	r3, r2
   2e1b2:	3330      	adds	r3, #48	; 0x30
   2e1b4:	68fa      	ldr	r2, [r7, #12]
   2e1b6:	18d3      	adds	r3, r2, r3
   2e1b8:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2e1ba:	687b      	ldr	r3, [r7, #4]
   2e1bc:	b2da      	uxtb	r2, r3
   2e1be:	697b      	ldr	r3, [r7, #20]
   2e1c0:	701a      	strb	r2, [r3, #0]
   2e1c2:	697b      	ldr	r3, [r7, #20]
   2e1c4:	3301      	adds	r3, #1
   2e1c6:	687a      	ldr	r2, [r7, #4]
   2e1c8:	b292      	uxth	r2, r2
   2e1ca:	0a12      	lsrs	r2, r2, #8
   2e1cc:	b292      	uxth	r2, r2
   2e1ce:	b2d2      	uxtb	r2, r2
   2e1d0:	701a      	strb	r2, [r3, #0]
			break;
   2e1d2:	e056      	b.n	2e282 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2e1d4:	68fb      	ldr	r3, [r7, #12]
   2e1d6:	6a1a      	ldr	r2, [r3, #32]
   2e1d8:	68bb      	ldr	r3, [r7, #8]
   2e1da:	09db      	lsrs	r3, r3, #7
   2e1dc:	18d2      	adds	r2, r2, r3
   2e1de:	231f      	movs	r3, #31
   2e1e0:	18fc      	adds	r4, r7, r3
   2e1e2:	68fb      	ldr	r3, [r7, #12]
   2e1e4:	0011      	movs	r1, r2
   2e1e6:	0018      	movs	r0, r3
   2e1e8:	4b2b      	ldr	r3, [pc, #172]	; (2e298 <put_fat+0x238>)
   2e1ea:	4798      	blx	r3
   2e1ec:	0003      	movs	r3, r0
   2e1ee:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e1f0:	231f      	movs	r3, #31
   2e1f2:	18fb      	adds	r3, r7, r3
   2e1f4:	781b      	ldrb	r3, [r3, #0]
   2e1f6:	2b00      	cmp	r3, #0
   2e1f8:	d142      	bne.n	2e280 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2e1fa:	68bb      	ldr	r3, [r7, #8]
   2e1fc:	009a      	lsls	r2, r3, #2
   2e1fe:	23fe      	movs	r3, #254	; 0xfe
   2e200:	005b      	lsls	r3, r3, #1
   2e202:	4013      	ands	r3, r2
   2e204:	3330      	adds	r3, #48	; 0x30
   2e206:	68fa      	ldr	r2, [r7, #12]
   2e208:	18d3      	adds	r3, r2, r3
   2e20a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2e20c:	697b      	ldr	r3, [r7, #20]
   2e20e:	3303      	adds	r3, #3
   2e210:	781b      	ldrb	r3, [r3, #0]
   2e212:	061a      	lsls	r2, r3, #24
   2e214:	697b      	ldr	r3, [r7, #20]
   2e216:	3302      	adds	r3, #2
   2e218:	781b      	ldrb	r3, [r3, #0]
   2e21a:	041b      	lsls	r3, r3, #16
   2e21c:	4313      	orrs	r3, r2
   2e21e:	697a      	ldr	r2, [r7, #20]
   2e220:	3201      	adds	r2, #1
   2e222:	7812      	ldrb	r2, [r2, #0]
   2e224:	0212      	lsls	r2, r2, #8
   2e226:	4313      	orrs	r3, r2
   2e228:	697a      	ldr	r2, [r7, #20]
   2e22a:	7812      	ldrb	r2, [r2, #0]
   2e22c:	4313      	orrs	r3, r2
   2e22e:	0f1b      	lsrs	r3, r3, #28
   2e230:	071b      	lsls	r3, r3, #28
   2e232:	687a      	ldr	r2, [r7, #4]
   2e234:	4313      	orrs	r3, r2
   2e236:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2e238:	687b      	ldr	r3, [r7, #4]
   2e23a:	b2da      	uxtb	r2, r3
   2e23c:	697b      	ldr	r3, [r7, #20]
   2e23e:	701a      	strb	r2, [r3, #0]
   2e240:	697b      	ldr	r3, [r7, #20]
   2e242:	3301      	adds	r3, #1
   2e244:	687a      	ldr	r2, [r7, #4]
   2e246:	b292      	uxth	r2, r2
   2e248:	0a12      	lsrs	r2, r2, #8
   2e24a:	b292      	uxth	r2, r2
   2e24c:	b2d2      	uxtb	r2, r2
   2e24e:	701a      	strb	r2, [r3, #0]
   2e250:	697b      	ldr	r3, [r7, #20]
   2e252:	3302      	adds	r3, #2
   2e254:	687a      	ldr	r2, [r7, #4]
   2e256:	0c12      	lsrs	r2, r2, #16
   2e258:	b2d2      	uxtb	r2, r2
   2e25a:	701a      	strb	r2, [r3, #0]
   2e25c:	697b      	ldr	r3, [r7, #20]
   2e25e:	3303      	adds	r3, #3
   2e260:	687a      	ldr	r2, [r7, #4]
   2e262:	0e12      	lsrs	r2, r2, #24
   2e264:	b2d2      	uxtb	r2, r2
   2e266:	701a      	strb	r2, [r3, #0]
			break;
   2e268:	e00b      	b.n	2e282 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2e26a:	231f      	movs	r3, #31
   2e26c:	18fb      	adds	r3, r7, r3
   2e26e:	2202      	movs	r2, #2
   2e270:	701a      	strb	r2, [r3, #0]
   2e272:	e006      	b.n	2e282 <put_fat+0x222>
			if (res != FR_OK) break;
   2e274:	46c0      	nop			; (mov r8, r8)
   2e276:	e004      	b.n	2e282 <put_fat+0x222>
			if (res != FR_OK) break;
   2e278:	46c0      	nop			; (mov r8, r8)
   2e27a:	e002      	b.n	2e282 <put_fat+0x222>
			if (res != FR_OK) break;
   2e27c:	46c0      	nop			; (mov r8, r8)
   2e27e:	e000      	b.n	2e282 <put_fat+0x222>
			if (res != FR_OK) break;
   2e280:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2e282:	68fb      	ldr	r3, [r7, #12]
   2e284:	2201      	movs	r2, #1
   2e286:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2e288:	231f      	movs	r3, #31
   2e28a:	18fb      	adds	r3, r7, r3
   2e28c:	781b      	ldrb	r3, [r3, #0]
}
   2e28e:	0018      	movs	r0, r3
   2e290:	46bd      	mov	sp, r7
   2e292:	b009      	add	sp, #36	; 0x24
   2e294:	bd90      	pop	{r4, r7, pc}
   2e296:	46c0      	nop			; (mov r8, r8)
   2e298:	0002dc5d 	.word	0x0002dc5d

0002e29c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2e29c:	b590      	push	{r4, r7, lr}
   2e29e:	b085      	sub	sp, #20
   2e2a0:	af00      	add	r7, sp, #0
   2e2a2:	6078      	str	r0, [r7, #4]
   2e2a4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2e2a6:	683b      	ldr	r3, [r7, #0]
   2e2a8:	2b01      	cmp	r3, #1
   2e2aa:	d904      	bls.n	2e2b6 <remove_chain+0x1a>
   2e2ac:	687b      	ldr	r3, [r7, #4]
   2e2ae:	699a      	ldr	r2, [r3, #24]
   2e2b0:	683b      	ldr	r3, [r7, #0]
   2e2b2:	429a      	cmp	r2, r3
   2e2b4:	d804      	bhi.n	2e2c0 <remove_chain+0x24>
		res = FR_INT_ERR;
   2e2b6:	230f      	movs	r3, #15
   2e2b8:	18fb      	adds	r3, r7, r3
   2e2ba:	2202      	movs	r2, #2
   2e2bc:	701a      	strb	r2, [r3, #0]
   2e2be:	e045      	b.n	2e34c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2e2c0:	230f      	movs	r3, #15
   2e2c2:	18fb      	adds	r3, r7, r3
   2e2c4:	2200      	movs	r2, #0
   2e2c6:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e2c8:	e037      	b.n	2e33a <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2e2ca:	683a      	ldr	r2, [r7, #0]
   2e2cc:	687b      	ldr	r3, [r7, #4]
   2e2ce:	0011      	movs	r1, r2
   2e2d0:	0018      	movs	r0, r3
   2e2d2:	4b22      	ldr	r3, [pc, #136]	; (2e35c <remove_chain+0xc0>)
   2e2d4:	4798      	blx	r3
   2e2d6:	0003      	movs	r3, r0
   2e2d8:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2e2da:	68bb      	ldr	r3, [r7, #8]
   2e2dc:	2b00      	cmp	r3, #0
   2e2de:	d032      	beq.n	2e346 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2e2e0:	68bb      	ldr	r3, [r7, #8]
   2e2e2:	2b01      	cmp	r3, #1
   2e2e4:	d104      	bne.n	2e2f0 <remove_chain+0x54>
   2e2e6:	230f      	movs	r3, #15
   2e2e8:	18fb      	adds	r3, r7, r3
   2e2ea:	2202      	movs	r2, #2
   2e2ec:	701a      	strb	r2, [r3, #0]
   2e2ee:	e02d      	b.n	2e34c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2e2f0:	68bb      	ldr	r3, [r7, #8]
   2e2f2:	3301      	adds	r3, #1
   2e2f4:	d104      	bne.n	2e300 <remove_chain+0x64>
   2e2f6:	230f      	movs	r3, #15
   2e2f8:	18fb      	adds	r3, r7, r3
   2e2fa:	2201      	movs	r2, #1
   2e2fc:	701a      	strb	r2, [r3, #0]
   2e2fe:	e025      	b.n	2e34c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2e300:	230f      	movs	r3, #15
   2e302:	18fc      	adds	r4, r7, r3
   2e304:	6839      	ldr	r1, [r7, #0]
   2e306:	687b      	ldr	r3, [r7, #4]
   2e308:	2200      	movs	r2, #0
   2e30a:	0018      	movs	r0, r3
   2e30c:	4b14      	ldr	r3, [pc, #80]	; (2e360 <remove_chain+0xc4>)
   2e30e:	4798      	blx	r3
   2e310:	0003      	movs	r3, r0
   2e312:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e314:	230f      	movs	r3, #15
   2e316:	18fb      	adds	r3, r7, r3
   2e318:	781b      	ldrb	r3, [r3, #0]
   2e31a:	2b00      	cmp	r3, #0
   2e31c:	d115      	bne.n	2e34a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2e31e:	687b      	ldr	r3, [r7, #4]
   2e320:	691b      	ldr	r3, [r3, #16]
   2e322:	3301      	adds	r3, #1
   2e324:	d007      	beq.n	2e336 <remove_chain+0x9a>
				fs->free_clust++;
   2e326:	687b      	ldr	r3, [r7, #4]
   2e328:	691b      	ldr	r3, [r3, #16]
   2e32a:	1c5a      	adds	r2, r3, #1
   2e32c:	687b      	ldr	r3, [r7, #4]
   2e32e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2e330:	687b      	ldr	r3, [r7, #4]
   2e332:	2201      	movs	r2, #1
   2e334:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2e336:	68bb      	ldr	r3, [r7, #8]
   2e338:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e33a:	687b      	ldr	r3, [r7, #4]
   2e33c:	699a      	ldr	r2, [r3, #24]
   2e33e:	683b      	ldr	r3, [r7, #0]
   2e340:	429a      	cmp	r2, r3
   2e342:	d8c2      	bhi.n	2e2ca <remove_chain+0x2e>
   2e344:	e002      	b.n	2e34c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2e346:	46c0      	nop			; (mov r8, r8)
   2e348:	e000      	b.n	2e34c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2e34a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2e34c:	230f      	movs	r3, #15
   2e34e:	18fb      	adds	r3, r7, r3
   2e350:	781b      	ldrb	r3, [r3, #0]
}
   2e352:	0018      	movs	r0, r3
   2e354:	46bd      	mov	sp, r7
   2e356:	b005      	add	sp, #20
   2e358:	bd90      	pop	{r4, r7, pc}
   2e35a:	46c0      	nop			; (mov r8, r8)
   2e35c:	0002def5 	.word	0x0002def5
   2e360:	0002e061 	.word	0x0002e061

0002e364 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2e364:	b590      	push	{r4, r7, lr}
   2e366:	b087      	sub	sp, #28
   2e368:	af00      	add	r7, sp, #0
   2e36a:	6078      	str	r0, [r7, #4]
   2e36c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2e36e:	683b      	ldr	r3, [r7, #0]
   2e370:	2b00      	cmp	r3, #0
   2e372:	d10d      	bne.n	2e390 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2e374:	687b      	ldr	r3, [r7, #4]
   2e376:	68db      	ldr	r3, [r3, #12]
   2e378:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2e37a:	693b      	ldr	r3, [r7, #16]
   2e37c:	2b00      	cmp	r3, #0
   2e37e:	d004      	beq.n	2e38a <create_chain+0x26>
   2e380:	687b      	ldr	r3, [r7, #4]
   2e382:	699a      	ldr	r2, [r3, #24]
   2e384:	693b      	ldr	r3, [r7, #16]
   2e386:	429a      	cmp	r2, r3
   2e388:	d818      	bhi.n	2e3bc <create_chain+0x58>
   2e38a:	2301      	movs	r3, #1
   2e38c:	613b      	str	r3, [r7, #16]
   2e38e:	e015      	b.n	2e3bc <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2e390:	683a      	ldr	r2, [r7, #0]
   2e392:	687b      	ldr	r3, [r7, #4]
   2e394:	0011      	movs	r1, r2
   2e396:	0018      	movs	r0, r3
   2e398:	4b3e      	ldr	r3, [pc, #248]	; (2e494 <create_chain+0x130>)
   2e39a:	4798      	blx	r3
   2e39c:	0003      	movs	r3, r0
   2e39e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2e3a0:	68bb      	ldr	r3, [r7, #8]
   2e3a2:	2b01      	cmp	r3, #1
   2e3a4:	d801      	bhi.n	2e3aa <create_chain+0x46>
   2e3a6:	2301      	movs	r3, #1
   2e3a8:	e070      	b.n	2e48c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2e3aa:	687b      	ldr	r3, [r7, #4]
   2e3ac:	699a      	ldr	r2, [r3, #24]
   2e3ae:	68bb      	ldr	r3, [r7, #8]
   2e3b0:	429a      	cmp	r2, r3
   2e3b2:	d901      	bls.n	2e3b8 <create_chain+0x54>
   2e3b4:	68bb      	ldr	r3, [r7, #8]
   2e3b6:	e069      	b.n	2e48c <create_chain+0x128>
		scl = clst;
   2e3b8:	683b      	ldr	r3, [r7, #0]
   2e3ba:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2e3bc:	693b      	ldr	r3, [r7, #16]
   2e3be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2e3c0:	697b      	ldr	r3, [r7, #20]
   2e3c2:	3301      	adds	r3, #1
   2e3c4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2e3c6:	687b      	ldr	r3, [r7, #4]
   2e3c8:	699a      	ldr	r2, [r3, #24]
   2e3ca:	697b      	ldr	r3, [r7, #20]
   2e3cc:	429a      	cmp	r2, r3
   2e3ce:	d807      	bhi.n	2e3e0 <create_chain+0x7c>
			ncl = 2;
   2e3d0:	2302      	movs	r3, #2
   2e3d2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2e3d4:	697a      	ldr	r2, [r7, #20]
   2e3d6:	693b      	ldr	r3, [r7, #16]
   2e3d8:	429a      	cmp	r2, r3
   2e3da:	d901      	bls.n	2e3e0 <create_chain+0x7c>
   2e3dc:	2300      	movs	r3, #0
   2e3de:	e055      	b.n	2e48c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2e3e0:	697a      	ldr	r2, [r7, #20]
   2e3e2:	687b      	ldr	r3, [r7, #4]
   2e3e4:	0011      	movs	r1, r2
   2e3e6:	0018      	movs	r0, r3
   2e3e8:	4b2a      	ldr	r3, [pc, #168]	; (2e494 <create_chain+0x130>)
   2e3ea:	4798      	blx	r3
   2e3ec:	0003      	movs	r3, r0
   2e3ee:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2e3f0:	68bb      	ldr	r3, [r7, #8]
   2e3f2:	2b00      	cmp	r3, #0
   2e3f4:	d00d      	beq.n	2e412 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2e3f6:	68bb      	ldr	r3, [r7, #8]
   2e3f8:	3301      	adds	r3, #1
   2e3fa:	d002      	beq.n	2e402 <create_chain+0x9e>
   2e3fc:	68bb      	ldr	r3, [r7, #8]
   2e3fe:	2b01      	cmp	r3, #1
   2e400:	d101      	bne.n	2e406 <create_chain+0xa2>
			return cs;
   2e402:	68bb      	ldr	r3, [r7, #8]
   2e404:	e042      	b.n	2e48c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2e406:	697a      	ldr	r2, [r7, #20]
   2e408:	693b      	ldr	r3, [r7, #16]
   2e40a:	429a      	cmp	r2, r3
   2e40c:	d1d8      	bne.n	2e3c0 <create_chain+0x5c>
   2e40e:	2300      	movs	r3, #0
   2e410:	e03c      	b.n	2e48c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2e412:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2e414:	230f      	movs	r3, #15
   2e416:	18fc      	adds	r4, r7, r3
   2e418:	4a1f      	ldr	r2, [pc, #124]	; (2e498 <create_chain+0x134>)
   2e41a:	6979      	ldr	r1, [r7, #20]
   2e41c:	687b      	ldr	r3, [r7, #4]
   2e41e:	0018      	movs	r0, r3
   2e420:	4b1e      	ldr	r3, [pc, #120]	; (2e49c <create_chain+0x138>)
   2e422:	4798      	blx	r3
   2e424:	0003      	movs	r3, r0
   2e426:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2e428:	230f      	movs	r3, #15
   2e42a:	18fb      	adds	r3, r7, r3
   2e42c:	781b      	ldrb	r3, [r3, #0]
   2e42e:	2b00      	cmp	r3, #0
   2e430:	d10c      	bne.n	2e44c <create_chain+0xe8>
   2e432:	683b      	ldr	r3, [r7, #0]
   2e434:	2b00      	cmp	r3, #0
   2e436:	d009      	beq.n	2e44c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2e438:	230f      	movs	r3, #15
   2e43a:	18fc      	adds	r4, r7, r3
   2e43c:	697a      	ldr	r2, [r7, #20]
   2e43e:	6839      	ldr	r1, [r7, #0]
   2e440:	687b      	ldr	r3, [r7, #4]
   2e442:	0018      	movs	r0, r3
   2e444:	4b15      	ldr	r3, [pc, #84]	; (2e49c <create_chain+0x138>)
   2e446:	4798      	blx	r3
   2e448:	0003      	movs	r3, r0
   2e44a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2e44c:	230f      	movs	r3, #15
   2e44e:	18fb      	adds	r3, r7, r3
   2e450:	781b      	ldrb	r3, [r3, #0]
   2e452:	2b00      	cmp	r3, #0
   2e454:	d10f      	bne.n	2e476 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2e456:	687b      	ldr	r3, [r7, #4]
   2e458:	697a      	ldr	r2, [r7, #20]
   2e45a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2e45c:	687b      	ldr	r3, [r7, #4]
   2e45e:	691b      	ldr	r3, [r3, #16]
   2e460:	3301      	adds	r3, #1
   2e462:	d012      	beq.n	2e48a <create_chain+0x126>
			fs->free_clust--;
   2e464:	687b      	ldr	r3, [r7, #4]
   2e466:	691b      	ldr	r3, [r3, #16]
   2e468:	1e5a      	subs	r2, r3, #1
   2e46a:	687b      	ldr	r3, [r7, #4]
   2e46c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2e46e:	687b      	ldr	r3, [r7, #4]
   2e470:	2201      	movs	r2, #1
   2e472:	715a      	strb	r2, [r3, #5]
   2e474:	e009      	b.n	2e48a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2e476:	230f      	movs	r3, #15
   2e478:	18fb      	adds	r3, r7, r3
   2e47a:	781b      	ldrb	r3, [r3, #0]
   2e47c:	2b01      	cmp	r3, #1
   2e47e:	d102      	bne.n	2e486 <create_chain+0x122>
   2e480:	2301      	movs	r3, #1
   2e482:	425b      	negs	r3, r3
   2e484:	e000      	b.n	2e488 <create_chain+0x124>
   2e486:	2301      	movs	r3, #1
   2e488:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2e48a:	697b      	ldr	r3, [r7, #20]
}
   2e48c:	0018      	movs	r0, r3
   2e48e:	46bd      	mov	sp, r7
   2e490:	b007      	add	sp, #28
   2e492:	bd90      	pop	{r4, r7, pc}
   2e494:	0002def5 	.word	0x0002def5
   2e498:	0fffffff 	.word	0x0fffffff
   2e49c:	0002e061 	.word	0x0002e061

0002e4a0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2e4a0:	b580      	push	{r7, lr}
   2e4a2:	b084      	sub	sp, #16
   2e4a4:	af00      	add	r7, sp, #0
   2e4a6:	6078      	str	r0, [r7, #4]
   2e4a8:	000a      	movs	r2, r1
   2e4aa:	1cbb      	adds	r3, r7, #2
   2e4ac:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2e4ae:	687b      	ldr	r3, [r7, #4]
   2e4b0:	1cba      	adds	r2, r7, #2
   2e4b2:	8812      	ldrh	r2, [r2, #0]
   2e4b4:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2e4b6:	687b      	ldr	r3, [r7, #4]
   2e4b8:	689b      	ldr	r3, [r3, #8]
   2e4ba:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2e4bc:	68fb      	ldr	r3, [r7, #12]
   2e4be:	2b01      	cmp	r3, #1
   2e4c0:	d005      	beq.n	2e4ce <dir_sdi+0x2e>
   2e4c2:	687b      	ldr	r3, [r7, #4]
   2e4c4:	681b      	ldr	r3, [r3, #0]
   2e4c6:	699a      	ldr	r2, [r3, #24]
   2e4c8:	68fb      	ldr	r3, [r7, #12]
   2e4ca:	429a      	cmp	r2, r3
   2e4cc:	d801      	bhi.n	2e4d2 <dir_sdi+0x32>
		return FR_INT_ERR;
   2e4ce:	2302      	movs	r3, #2
   2e4d0:	e075      	b.n	2e5be <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2e4d2:	68fb      	ldr	r3, [r7, #12]
   2e4d4:	2b00      	cmp	r3, #0
   2e4d6:	d108      	bne.n	2e4ea <dir_sdi+0x4a>
   2e4d8:	687b      	ldr	r3, [r7, #4]
   2e4da:	681b      	ldr	r3, [r3, #0]
   2e4dc:	781b      	ldrb	r3, [r3, #0]
   2e4de:	2b03      	cmp	r3, #3
   2e4e0:	d103      	bne.n	2e4ea <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2e4e2:	687b      	ldr	r3, [r7, #4]
   2e4e4:	681b      	ldr	r3, [r3, #0]
   2e4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e4e8:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2e4ea:	68fb      	ldr	r3, [r7, #12]
   2e4ec:	2b00      	cmp	r3, #0
   2e4ee:	d116      	bne.n	2e51e <dir_sdi+0x7e>
		dj->clust = clst;
   2e4f0:	687b      	ldr	r3, [r7, #4]
   2e4f2:	68fa      	ldr	r2, [r7, #12]
   2e4f4:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2e4f6:	687b      	ldr	r3, [r7, #4]
   2e4f8:	681b      	ldr	r3, [r3, #0]
   2e4fa:	891b      	ldrh	r3, [r3, #8]
   2e4fc:	1cba      	adds	r2, r7, #2
   2e4fe:	8812      	ldrh	r2, [r2, #0]
   2e500:	429a      	cmp	r2, r3
   2e502:	d301      	bcc.n	2e508 <dir_sdi+0x68>
			return FR_INT_ERR;
   2e504:	2302      	movs	r3, #2
   2e506:	e05a      	b.n	2e5be <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2e508:	687b      	ldr	r3, [r7, #4]
   2e50a:	681b      	ldr	r3, [r3, #0]
   2e50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e50e:	1cba      	adds	r2, r7, #2
   2e510:	8812      	ldrh	r2, [r2, #0]
   2e512:	0912      	lsrs	r2, r2, #4
   2e514:	b292      	uxth	r2, r2
   2e516:	189a      	adds	r2, r3, r2
   2e518:	687b      	ldr	r3, [r7, #4]
   2e51a:	611a      	str	r2, [r3, #16]
   2e51c:	e042      	b.n	2e5a4 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2e51e:	687b      	ldr	r3, [r7, #4]
   2e520:	681b      	ldr	r3, [r3, #0]
   2e522:	789b      	ldrb	r3, [r3, #2]
   2e524:	b29a      	uxth	r2, r3
   2e526:	230a      	movs	r3, #10
   2e528:	18fb      	adds	r3, r7, r3
   2e52a:	0112      	lsls	r2, r2, #4
   2e52c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2e52e:	e020      	b.n	2e572 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2e530:	687b      	ldr	r3, [r7, #4]
   2e532:	681b      	ldr	r3, [r3, #0]
   2e534:	68fa      	ldr	r2, [r7, #12]
   2e536:	0011      	movs	r1, r2
   2e538:	0018      	movs	r0, r3
   2e53a:	4b23      	ldr	r3, [pc, #140]	; (2e5c8 <dir_sdi+0x128>)
   2e53c:	4798      	blx	r3
   2e53e:	0003      	movs	r3, r0
   2e540:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2e542:	68fb      	ldr	r3, [r7, #12]
   2e544:	3301      	adds	r3, #1
   2e546:	d101      	bne.n	2e54c <dir_sdi+0xac>
   2e548:	2301      	movs	r3, #1
   2e54a:	e038      	b.n	2e5be <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2e54c:	68fb      	ldr	r3, [r7, #12]
   2e54e:	2b01      	cmp	r3, #1
   2e550:	d905      	bls.n	2e55e <dir_sdi+0xbe>
   2e552:	687b      	ldr	r3, [r7, #4]
   2e554:	681b      	ldr	r3, [r3, #0]
   2e556:	699a      	ldr	r2, [r3, #24]
   2e558:	68fb      	ldr	r3, [r7, #12]
   2e55a:	429a      	cmp	r2, r3
   2e55c:	d801      	bhi.n	2e562 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2e55e:	2302      	movs	r3, #2
   2e560:	e02d      	b.n	2e5be <dir_sdi+0x11e>
			idx -= ic;
   2e562:	1cbb      	adds	r3, r7, #2
   2e564:	1cb9      	adds	r1, r7, #2
   2e566:	220a      	movs	r2, #10
   2e568:	18ba      	adds	r2, r7, r2
   2e56a:	8809      	ldrh	r1, [r1, #0]
   2e56c:	8812      	ldrh	r2, [r2, #0]
   2e56e:	1a8a      	subs	r2, r1, r2
   2e570:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2e572:	1cba      	adds	r2, r7, #2
   2e574:	230a      	movs	r3, #10
   2e576:	18fb      	adds	r3, r7, r3
   2e578:	8812      	ldrh	r2, [r2, #0]
   2e57a:	881b      	ldrh	r3, [r3, #0]
   2e57c:	429a      	cmp	r2, r3
   2e57e:	d2d7      	bcs.n	2e530 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2e580:	687b      	ldr	r3, [r7, #4]
   2e582:	68fa      	ldr	r2, [r7, #12]
   2e584:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2e586:	687b      	ldr	r3, [r7, #4]
   2e588:	681b      	ldr	r3, [r3, #0]
   2e58a:	68fa      	ldr	r2, [r7, #12]
   2e58c:	0011      	movs	r1, r2
   2e58e:	0018      	movs	r0, r3
   2e590:	4b0e      	ldr	r3, [pc, #56]	; (2e5cc <dir_sdi+0x12c>)
   2e592:	4798      	blx	r3
   2e594:	0002      	movs	r2, r0
   2e596:	1cbb      	adds	r3, r7, #2
   2e598:	881b      	ldrh	r3, [r3, #0]
   2e59a:	091b      	lsrs	r3, r3, #4
   2e59c:	b29b      	uxth	r3, r3
   2e59e:	18d2      	adds	r2, r2, r3
   2e5a0:	687b      	ldr	r3, [r7, #4]
   2e5a2:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2e5a4:	687b      	ldr	r3, [r7, #4]
   2e5a6:	681b      	ldr	r3, [r3, #0]
   2e5a8:	3330      	adds	r3, #48	; 0x30
   2e5aa:	001a      	movs	r2, r3
   2e5ac:	1cbb      	adds	r3, r7, #2
   2e5ae:	881b      	ldrh	r3, [r3, #0]
   2e5b0:	210f      	movs	r1, #15
   2e5b2:	400b      	ands	r3, r1
   2e5b4:	015b      	lsls	r3, r3, #5
   2e5b6:	18d2      	adds	r2, r2, r3
   2e5b8:	687b      	ldr	r3, [r7, #4]
   2e5ba:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2e5bc:	2300      	movs	r3, #0
}
   2e5be:	0018      	movs	r0, r3
   2e5c0:	46bd      	mov	sp, r7
   2e5c2:	b004      	add	sp, #16
   2e5c4:	bd80      	pop	{r7, pc}
   2e5c6:	46c0      	nop			; (mov r8, r8)
   2e5c8:	0002def5 	.word	0x0002def5
   2e5cc:	0002debd 	.word	0x0002debd

0002e5d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2e5d0:	b590      	push	{r4, r7, lr}
   2e5d2:	b085      	sub	sp, #20
   2e5d4:	af00      	add	r7, sp, #0
   2e5d6:	6078      	str	r0, [r7, #4]
   2e5d8:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2e5da:	687b      	ldr	r3, [r7, #4]
   2e5dc:	88da      	ldrh	r2, [r3, #6]
   2e5de:	2308      	movs	r3, #8
   2e5e0:	18fb      	adds	r3, r7, r3
   2e5e2:	3201      	adds	r2, #1
   2e5e4:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2e5e6:	2308      	movs	r3, #8
   2e5e8:	18fb      	adds	r3, r7, r3
   2e5ea:	881b      	ldrh	r3, [r3, #0]
   2e5ec:	2b00      	cmp	r3, #0
   2e5ee:	d003      	beq.n	2e5f8 <dir_next+0x28>
   2e5f0:	687b      	ldr	r3, [r7, #4]
   2e5f2:	691b      	ldr	r3, [r3, #16]
   2e5f4:	2b00      	cmp	r3, #0
   2e5f6:	d101      	bne.n	2e5fc <dir_next+0x2c>
		return FR_NO_FILE;
   2e5f8:	2304      	movs	r3, #4
   2e5fa:	e0d2      	b.n	2e7a2 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2e5fc:	2308      	movs	r3, #8
   2e5fe:	18fb      	adds	r3, r7, r3
   2e600:	881b      	ldrh	r3, [r3, #0]
   2e602:	220f      	movs	r2, #15
   2e604:	4013      	ands	r3, r2
   2e606:	b29b      	uxth	r3, r3
   2e608:	2b00      	cmp	r3, #0
   2e60a:	d000      	beq.n	2e60e <dir_next+0x3e>
   2e60c:	e0b6      	b.n	2e77c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2e60e:	687b      	ldr	r3, [r7, #4]
   2e610:	691b      	ldr	r3, [r3, #16]
   2e612:	1c5a      	adds	r2, r3, #1
   2e614:	687b      	ldr	r3, [r7, #4]
   2e616:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2e618:	687b      	ldr	r3, [r7, #4]
   2e61a:	68db      	ldr	r3, [r3, #12]
   2e61c:	2b00      	cmp	r3, #0
   2e61e:	d10a      	bne.n	2e636 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2e620:	687b      	ldr	r3, [r7, #4]
   2e622:	681b      	ldr	r3, [r3, #0]
   2e624:	891b      	ldrh	r3, [r3, #8]
   2e626:	2208      	movs	r2, #8
   2e628:	18ba      	adds	r2, r7, r2
   2e62a:	8812      	ldrh	r2, [r2, #0]
   2e62c:	429a      	cmp	r2, r3
   2e62e:	d200      	bcs.n	2e632 <dir_next+0x62>
   2e630:	e0a4      	b.n	2e77c <dir_next+0x1ac>
				return FR_NO_FILE;
   2e632:	2304      	movs	r3, #4
   2e634:	e0b5      	b.n	2e7a2 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2e636:	2308      	movs	r3, #8
   2e638:	18fb      	adds	r3, r7, r3
   2e63a:	881b      	ldrh	r3, [r3, #0]
   2e63c:	091b      	lsrs	r3, r3, #4
   2e63e:	b29b      	uxth	r3, r3
   2e640:	001a      	movs	r2, r3
   2e642:	687b      	ldr	r3, [r7, #4]
   2e644:	681b      	ldr	r3, [r3, #0]
   2e646:	789b      	ldrb	r3, [r3, #2]
   2e648:	3b01      	subs	r3, #1
   2e64a:	4013      	ands	r3, r2
   2e64c:	d000      	beq.n	2e650 <dir_next+0x80>
   2e64e:	e095      	b.n	2e77c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2e650:	687b      	ldr	r3, [r7, #4]
   2e652:	681a      	ldr	r2, [r3, #0]
   2e654:	687b      	ldr	r3, [r7, #4]
   2e656:	68db      	ldr	r3, [r3, #12]
   2e658:	0019      	movs	r1, r3
   2e65a:	0010      	movs	r0, r2
   2e65c:	4b53      	ldr	r3, [pc, #332]	; (2e7ac <dir_next+0x1dc>)
   2e65e:	4798      	blx	r3
   2e660:	0003      	movs	r3, r0
   2e662:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2e664:	68fb      	ldr	r3, [r7, #12]
   2e666:	2b01      	cmp	r3, #1
   2e668:	d801      	bhi.n	2e66e <dir_next+0x9e>
   2e66a:	2302      	movs	r3, #2
   2e66c:	e099      	b.n	2e7a2 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2e66e:	68fb      	ldr	r3, [r7, #12]
   2e670:	3301      	adds	r3, #1
   2e672:	d101      	bne.n	2e678 <dir_next+0xa8>
   2e674:	2301      	movs	r3, #1
   2e676:	e094      	b.n	2e7a2 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2e678:	687b      	ldr	r3, [r7, #4]
   2e67a:	681b      	ldr	r3, [r3, #0]
   2e67c:	699a      	ldr	r2, [r3, #24]
   2e67e:	68fb      	ldr	r3, [r7, #12]
   2e680:	429a      	cmp	r2, r3
   2e682:	d900      	bls.n	2e686 <dir_next+0xb6>
   2e684:	e06d      	b.n	2e762 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2e686:	683b      	ldr	r3, [r7, #0]
   2e688:	2b00      	cmp	r3, #0
   2e68a:	d101      	bne.n	2e690 <dir_next+0xc0>
   2e68c:	2304      	movs	r3, #4
   2e68e:	e088      	b.n	2e7a2 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2e690:	687b      	ldr	r3, [r7, #4]
   2e692:	681a      	ldr	r2, [r3, #0]
   2e694:	687b      	ldr	r3, [r7, #4]
   2e696:	68db      	ldr	r3, [r3, #12]
   2e698:	0019      	movs	r1, r3
   2e69a:	0010      	movs	r0, r2
   2e69c:	4b44      	ldr	r3, [pc, #272]	; (2e7b0 <dir_next+0x1e0>)
   2e69e:	4798      	blx	r3
   2e6a0:	0003      	movs	r3, r0
   2e6a2:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2e6a4:	68fb      	ldr	r3, [r7, #12]
   2e6a6:	2b00      	cmp	r3, #0
   2e6a8:	d101      	bne.n	2e6ae <dir_next+0xde>
   2e6aa:	2307      	movs	r3, #7
   2e6ac:	e079      	b.n	2e7a2 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2e6ae:	68fb      	ldr	r3, [r7, #12]
   2e6b0:	2b01      	cmp	r3, #1
   2e6b2:	d101      	bne.n	2e6b8 <dir_next+0xe8>
   2e6b4:	2302      	movs	r3, #2
   2e6b6:	e074      	b.n	2e7a2 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2e6b8:	68fb      	ldr	r3, [r7, #12]
   2e6ba:	3301      	adds	r3, #1
   2e6bc:	d101      	bne.n	2e6c2 <dir_next+0xf2>
   2e6be:	2301      	movs	r3, #1
   2e6c0:	e06f      	b.n	2e7a2 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2e6c2:	687b      	ldr	r3, [r7, #4]
   2e6c4:	681b      	ldr	r3, [r3, #0]
   2e6c6:	2100      	movs	r1, #0
   2e6c8:	0018      	movs	r0, r3
   2e6ca:	4b3a      	ldr	r3, [pc, #232]	; (2e7b4 <dir_next+0x1e4>)
   2e6cc:	4798      	blx	r3
   2e6ce:	1e03      	subs	r3, r0, #0
   2e6d0:	d001      	beq.n	2e6d6 <dir_next+0x106>
   2e6d2:	2301      	movs	r3, #1
   2e6d4:	e065      	b.n	2e7a2 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2e6d6:	687b      	ldr	r3, [r7, #4]
   2e6d8:	681b      	ldr	r3, [r3, #0]
   2e6da:	3330      	adds	r3, #48	; 0x30
   2e6dc:	0018      	movs	r0, r3
   2e6de:	2380      	movs	r3, #128	; 0x80
   2e6e0:	009b      	lsls	r3, r3, #2
   2e6e2:	001a      	movs	r2, r3
   2e6e4:	2100      	movs	r1, #0
   2e6e6:	4b34      	ldr	r3, [pc, #208]	; (2e7b8 <dir_next+0x1e8>)
   2e6e8:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2e6ea:	687b      	ldr	r3, [r7, #4]
   2e6ec:	681c      	ldr	r4, [r3, #0]
   2e6ee:	687b      	ldr	r3, [r7, #4]
   2e6f0:	681b      	ldr	r3, [r3, #0]
   2e6f2:	68fa      	ldr	r2, [r7, #12]
   2e6f4:	0011      	movs	r1, r2
   2e6f6:	0018      	movs	r0, r3
   2e6f8:	4b30      	ldr	r3, [pc, #192]	; (2e7bc <dir_next+0x1ec>)
   2e6fa:	4798      	blx	r3
   2e6fc:	0003      	movs	r3, r0
   2e6fe:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e700:	230b      	movs	r3, #11
   2e702:	18fb      	adds	r3, r7, r3
   2e704:	2200      	movs	r2, #0
   2e706:	701a      	strb	r2, [r3, #0]
   2e708:	e019      	b.n	2e73e <dir_next+0x16e>
						dj->fs->wflag = 1;
   2e70a:	687b      	ldr	r3, [r7, #4]
   2e70c:	681b      	ldr	r3, [r3, #0]
   2e70e:	2201      	movs	r2, #1
   2e710:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2e712:	687b      	ldr	r3, [r7, #4]
   2e714:	681b      	ldr	r3, [r3, #0]
   2e716:	2100      	movs	r1, #0
   2e718:	0018      	movs	r0, r3
   2e71a:	4b26      	ldr	r3, [pc, #152]	; (2e7b4 <dir_next+0x1e4>)
   2e71c:	4798      	blx	r3
   2e71e:	1e03      	subs	r3, r0, #0
   2e720:	d001      	beq.n	2e726 <dir_next+0x156>
   2e722:	2301      	movs	r3, #1
   2e724:	e03d      	b.n	2e7a2 <dir_next+0x1d2>
						dj->fs->winsect++;
   2e726:	687b      	ldr	r3, [r7, #4]
   2e728:	681b      	ldr	r3, [r3, #0]
   2e72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e72c:	3201      	adds	r2, #1
   2e72e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e730:	230b      	movs	r3, #11
   2e732:	18fb      	adds	r3, r7, r3
   2e734:	781a      	ldrb	r2, [r3, #0]
   2e736:	230b      	movs	r3, #11
   2e738:	18fb      	adds	r3, r7, r3
   2e73a:	3201      	adds	r2, #1
   2e73c:	701a      	strb	r2, [r3, #0]
   2e73e:	687b      	ldr	r3, [r7, #4]
   2e740:	681b      	ldr	r3, [r3, #0]
   2e742:	789b      	ldrb	r3, [r3, #2]
   2e744:	220b      	movs	r2, #11
   2e746:	18ba      	adds	r2, r7, r2
   2e748:	7812      	ldrb	r2, [r2, #0]
   2e74a:	429a      	cmp	r2, r3
   2e74c:	d3dd      	bcc.n	2e70a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2e74e:	687b      	ldr	r3, [r7, #4]
   2e750:	681b      	ldr	r3, [r3, #0]
   2e752:	687a      	ldr	r2, [r7, #4]
   2e754:	6812      	ldr	r2, [r2, #0]
   2e756:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2e758:	220b      	movs	r2, #11
   2e75a:	18ba      	adds	r2, r7, r2
   2e75c:	7812      	ldrb	r2, [r2, #0]
   2e75e:	1a8a      	subs	r2, r1, r2
   2e760:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2e762:	687b      	ldr	r3, [r7, #4]
   2e764:	68fa      	ldr	r2, [r7, #12]
   2e766:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2e768:	687b      	ldr	r3, [r7, #4]
   2e76a:	681b      	ldr	r3, [r3, #0]
   2e76c:	68fa      	ldr	r2, [r7, #12]
   2e76e:	0011      	movs	r1, r2
   2e770:	0018      	movs	r0, r3
   2e772:	4b12      	ldr	r3, [pc, #72]	; (2e7bc <dir_next+0x1ec>)
   2e774:	4798      	blx	r3
   2e776:	0002      	movs	r2, r0
   2e778:	687b      	ldr	r3, [r7, #4]
   2e77a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2e77c:	687b      	ldr	r3, [r7, #4]
   2e77e:	2208      	movs	r2, #8
   2e780:	18ba      	adds	r2, r7, r2
   2e782:	8812      	ldrh	r2, [r2, #0]
   2e784:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2e786:	687b      	ldr	r3, [r7, #4]
   2e788:	681b      	ldr	r3, [r3, #0]
   2e78a:	3330      	adds	r3, #48	; 0x30
   2e78c:	001a      	movs	r2, r3
   2e78e:	2308      	movs	r3, #8
   2e790:	18fb      	adds	r3, r7, r3
   2e792:	881b      	ldrh	r3, [r3, #0]
   2e794:	210f      	movs	r1, #15
   2e796:	400b      	ands	r3, r1
   2e798:	015b      	lsls	r3, r3, #5
   2e79a:	18d2      	adds	r2, r2, r3
   2e79c:	687b      	ldr	r3, [r7, #4]
   2e79e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2e7a0:	2300      	movs	r3, #0
}
   2e7a2:	0018      	movs	r0, r3
   2e7a4:	46bd      	mov	sp, r7
   2e7a6:	b005      	add	sp, #20
   2e7a8:	bd90      	pop	{r4, r7, pc}
   2e7aa:	46c0      	nop			; (mov r8, r8)
   2e7ac:	0002def5 	.word	0x0002def5
   2e7b0:	0002e365 	.word	0x0002e365
   2e7b4:	0002dc5d 	.word	0x0002dc5d
   2e7b8:	0002dbb1 	.word	0x0002dbb1
   2e7bc:	0002debd 	.word	0x0002debd

0002e7c0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2e7c0:	b590      	push	{r4, r7, lr}
   2e7c2:	b087      	sub	sp, #28
   2e7c4:	af00      	add	r7, sp, #0
   2e7c6:	6078      	str	r0, [r7, #4]
   2e7c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2e7ca:	683b      	ldr	r3, [r7, #0]
   2e7cc:	781b      	ldrb	r3, [r3, #0]
   2e7ce:	001a      	movs	r2, r3
   2e7d0:	2340      	movs	r3, #64	; 0x40
   2e7d2:	439a      	bics	r2, r3
   2e7d4:	0013      	movs	r3, r2
   2e7d6:	1e5a      	subs	r2, r3, #1
   2e7d8:	0013      	movs	r3, r2
   2e7da:	005b      	lsls	r3, r3, #1
   2e7dc:	189b      	adds	r3, r3, r2
   2e7de:	009b      	lsls	r3, r3, #2
   2e7e0:	189b      	adds	r3, r3, r2
   2e7e2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2e7e4:	2300      	movs	r3, #0
   2e7e6:	613b      	str	r3, [r7, #16]
   2e7e8:	230e      	movs	r3, #14
   2e7ea:	18fb      	adds	r3, r7, r3
   2e7ec:	2201      	movs	r2, #1
   2e7ee:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2e7f0:	4a31      	ldr	r2, [pc, #196]	; (2e8b8 <cmp_lfn+0xf8>)
   2e7f2:	693b      	ldr	r3, [r7, #16]
   2e7f4:	18d3      	adds	r3, r2, r3
   2e7f6:	781b      	ldrb	r3, [r3, #0]
   2e7f8:	3301      	adds	r3, #1
   2e7fa:	683a      	ldr	r2, [r7, #0]
   2e7fc:	18d3      	adds	r3, r2, r3
   2e7fe:	781b      	ldrb	r3, [r3, #0]
   2e800:	021b      	lsls	r3, r3, #8
   2e802:	b21a      	sxth	r2, r3
   2e804:	492c      	ldr	r1, [pc, #176]	; (2e8b8 <cmp_lfn+0xf8>)
   2e806:	693b      	ldr	r3, [r7, #16]
   2e808:	18cb      	adds	r3, r1, r3
   2e80a:	781b      	ldrb	r3, [r3, #0]
   2e80c:	0019      	movs	r1, r3
   2e80e:	683b      	ldr	r3, [r7, #0]
   2e810:	185b      	adds	r3, r3, r1
   2e812:	781b      	ldrb	r3, [r3, #0]
   2e814:	b21b      	sxth	r3, r3
   2e816:	4313      	orrs	r3, r2
   2e818:	b21a      	sxth	r2, r3
   2e81a:	230c      	movs	r3, #12
   2e81c:	18fb      	adds	r3, r7, r3
   2e81e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2e820:	230e      	movs	r3, #14
   2e822:	18fb      	adds	r3, r7, r3
   2e824:	881b      	ldrh	r3, [r3, #0]
   2e826:	2b00      	cmp	r3, #0
   2e828:	d01f      	beq.n	2e86a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2e82a:	230e      	movs	r3, #14
   2e82c:	18fc      	adds	r4, r7, r3
   2e82e:	230c      	movs	r3, #12
   2e830:	18fb      	adds	r3, r7, r3
   2e832:	881b      	ldrh	r3, [r3, #0]
   2e834:	0018      	movs	r0, r3
   2e836:	4b21      	ldr	r3, [pc, #132]	; (2e8bc <cmp_lfn+0xfc>)
   2e838:	4798      	blx	r3
   2e83a:	0003      	movs	r3, r0
   2e83c:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2e83e:	697b      	ldr	r3, [r7, #20]
   2e840:	2bfe      	cmp	r3, #254	; 0xfe
   2e842:	d810      	bhi.n	2e866 <cmp_lfn+0xa6>
   2e844:	697b      	ldr	r3, [r7, #20]
   2e846:	1c5a      	adds	r2, r3, #1
   2e848:	617a      	str	r2, [r7, #20]
   2e84a:	005b      	lsls	r3, r3, #1
   2e84c:	687a      	ldr	r2, [r7, #4]
   2e84e:	18d3      	adds	r3, r2, r3
   2e850:	881b      	ldrh	r3, [r3, #0]
   2e852:	0018      	movs	r0, r3
   2e854:	4b19      	ldr	r3, [pc, #100]	; (2e8bc <cmp_lfn+0xfc>)
   2e856:	4798      	blx	r3
   2e858:	0003      	movs	r3, r0
   2e85a:	001a      	movs	r2, r3
   2e85c:	230e      	movs	r3, #14
   2e85e:	18fb      	adds	r3, r7, r3
   2e860:	881b      	ldrh	r3, [r3, #0]
   2e862:	4293      	cmp	r3, r2
   2e864:	d009      	beq.n	2e87a <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2e866:	2300      	movs	r3, #0
   2e868:	e022      	b.n	2e8b0 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2e86a:	230c      	movs	r3, #12
   2e86c:	18fb      	adds	r3, r7, r3
   2e86e:	881b      	ldrh	r3, [r3, #0]
   2e870:	4a13      	ldr	r2, [pc, #76]	; (2e8c0 <cmp_lfn+0x100>)
   2e872:	4293      	cmp	r3, r2
   2e874:	d001      	beq.n	2e87a <cmp_lfn+0xba>
   2e876:	2300      	movs	r3, #0
   2e878:	e01a      	b.n	2e8b0 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2e87a:	693b      	ldr	r3, [r7, #16]
   2e87c:	3301      	adds	r3, #1
   2e87e:	613b      	str	r3, [r7, #16]
   2e880:	693b      	ldr	r3, [r7, #16]
   2e882:	2b0c      	cmp	r3, #12
   2e884:	d9b4      	bls.n	2e7f0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2e886:	683b      	ldr	r3, [r7, #0]
   2e888:	781b      	ldrb	r3, [r3, #0]
   2e88a:	001a      	movs	r2, r3
   2e88c:	2340      	movs	r3, #64	; 0x40
   2e88e:	4013      	ands	r3, r2
   2e890:	d00d      	beq.n	2e8ae <cmp_lfn+0xee>
   2e892:	230e      	movs	r3, #14
   2e894:	18fb      	adds	r3, r7, r3
   2e896:	881b      	ldrh	r3, [r3, #0]
   2e898:	2b00      	cmp	r3, #0
   2e89a:	d008      	beq.n	2e8ae <cmp_lfn+0xee>
   2e89c:	697b      	ldr	r3, [r7, #20]
   2e89e:	005b      	lsls	r3, r3, #1
   2e8a0:	687a      	ldr	r2, [r7, #4]
   2e8a2:	18d3      	adds	r3, r2, r3
   2e8a4:	881b      	ldrh	r3, [r3, #0]
   2e8a6:	2b00      	cmp	r3, #0
   2e8a8:	d001      	beq.n	2e8ae <cmp_lfn+0xee>
		return 0;
   2e8aa:	2300      	movs	r3, #0
   2e8ac:	e000      	b.n	2e8b0 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2e8ae:	2301      	movs	r3, #1
}
   2e8b0:	0018      	movs	r0, r3
   2e8b2:	46bd      	mov	sp, r7
   2e8b4:	b007      	add	sp, #28
   2e8b6:	bd90      	pop	{r4, r7, pc}
   2e8b8:	0003c8ac 	.word	0x0003c8ac
   2e8bc:	0003086d 	.word	0x0003086d
   2e8c0:	0000ffff 	.word	0x0000ffff

0002e8c4 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2e8c4:	b580      	push	{r7, lr}
   2e8c6:	b088      	sub	sp, #32
   2e8c8:	af00      	add	r7, sp, #0
   2e8ca:	60f8      	str	r0, [r7, #12]
   2e8cc:	60b9      	str	r1, [r7, #8]
   2e8ce:	0019      	movs	r1, r3
   2e8d0:	1dfb      	adds	r3, r7, #7
   2e8d2:	701a      	strb	r2, [r3, #0]
   2e8d4:	1dbb      	adds	r3, r7, #6
   2e8d6:	1c0a      	adds	r2, r1, #0
   2e8d8:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2e8da:	68bb      	ldr	r3, [r7, #8]
   2e8dc:	330d      	adds	r3, #13
   2e8de:	1dba      	adds	r2, r7, #6
   2e8e0:	7812      	ldrb	r2, [r2, #0]
   2e8e2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2e8e4:	68bb      	ldr	r3, [r7, #8]
   2e8e6:	330b      	adds	r3, #11
   2e8e8:	220f      	movs	r2, #15
   2e8ea:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2e8ec:	68bb      	ldr	r3, [r7, #8]
   2e8ee:	330c      	adds	r3, #12
   2e8f0:	2200      	movs	r2, #0
   2e8f2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2e8f4:	68bb      	ldr	r3, [r7, #8]
   2e8f6:	331a      	adds	r3, #26
   2e8f8:	2200      	movs	r2, #0
   2e8fa:	701a      	strb	r2, [r3, #0]
   2e8fc:	68bb      	ldr	r3, [r7, #8]
   2e8fe:	331b      	adds	r3, #27
   2e900:	2200      	movs	r2, #0
   2e902:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2e904:	1dfb      	adds	r3, r7, #7
   2e906:	781b      	ldrb	r3, [r3, #0]
   2e908:	1e5a      	subs	r2, r3, #1
   2e90a:	0013      	movs	r3, r2
   2e90c:	005b      	lsls	r3, r3, #1
   2e90e:	189b      	adds	r3, r3, r2
   2e910:	009b      	lsls	r3, r3, #2
   2e912:	189b      	adds	r3, r3, r2
   2e914:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2e916:	2316      	movs	r3, #22
   2e918:	18fb      	adds	r3, r7, r3
   2e91a:	2200      	movs	r2, #0
   2e91c:	801a      	strh	r2, [r3, #0]
   2e91e:	2300      	movs	r3, #0
   2e920:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2e922:	2316      	movs	r3, #22
   2e924:	18fb      	adds	r3, r7, r3
   2e926:	881b      	ldrh	r3, [r3, #0]
   2e928:	4a28      	ldr	r2, [pc, #160]	; (2e9cc <fit_lfn+0x108>)
   2e92a:	4293      	cmp	r3, r2
   2e92c:	d009      	beq.n	2e942 <fit_lfn+0x7e>
   2e92e:	69fb      	ldr	r3, [r7, #28]
   2e930:	1c5a      	adds	r2, r3, #1
   2e932:	61fa      	str	r2, [r7, #28]
   2e934:	005b      	lsls	r3, r3, #1
   2e936:	68fa      	ldr	r2, [r7, #12]
   2e938:	18d2      	adds	r2, r2, r3
   2e93a:	2316      	movs	r3, #22
   2e93c:	18fb      	adds	r3, r7, r3
   2e93e:	8812      	ldrh	r2, [r2, #0]
   2e940:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2e942:	4a23      	ldr	r2, [pc, #140]	; (2e9d0 <fit_lfn+0x10c>)
   2e944:	69bb      	ldr	r3, [r7, #24]
   2e946:	18d3      	adds	r3, r2, r3
   2e948:	781b      	ldrb	r3, [r3, #0]
   2e94a:	001a      	movs	r2, r3
   2e94c:	68bb      	ldr	r3, [r7, #8]
   2e94e:	189b      	adds	r3, r3, r2
   2e950:	2216      	movs	r2, #22
   2e952:	18ba      	adds	r2, r7, r2
   2e954:	8812      	ldrh	r2, [r2, #0]
   2e956:	b2d2      	uxtb	r2, r2
   2e958:	701a      	strb	r2, [r3, #0]
   2e95a:	4a1d      	ldr	r2, [pc, #116]	; (2e9d0 <fit_lfn+0x10c>)
   2e95c:	69bb      	ldr	r3, [r7, #24]
   2e95e:	18d3      	adds	r3, r2, r3
   2e960:	781b      	ldrb	r3, [r3, #0]
   2e962:	3301      	adds	r3, #1
   2e964:	68ba      	ldr	r2, [r7, #8]
   2e966:	18d3      	adds	r3, r2, r3
   2e968:	2216      	movs	r2, #22
   2e96a:	18ba      	adds	r2, r7, r2
   2e96c:	8812      	ldrh	r2, [r2, #0]
   2e96e:	0a12      	lsrs	r2, r2, #8
   2e970:	b292      	uxth	r2, r2
   2e972:	b2d2      	uxtb	r2, r2
   2e974:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2e976:	2316      	movs	r3, #22
   2e978:	18fb      	adds	r3, r7, r3
   2e97a:	881b      	ldrh	r3, [r3, #0]
   2e97c:	2b00      	cmp	r3, #0
   2e97e:	d104      	bne.n	2e98a <fit_lfn+0xc6>
   2e980:	2316      	movs	r3, #22
   2e982:	18fb      	adds	r3, r7, r3
   2e984:	2201      	movs	r2, #1
   2e986:	4252      	negs	r2, r2
   2e988:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2e98a:	69bb      	ldr	r3, [r7, #24]
   2e98c:	3301      	adds	r3, #1
   2e98e:	61bb      	str	r3, [r7, #24]
   2e990:	69bb      	ldr	r3, [r7, #24]
   2e992:	2b0c      	cmp	r3, #12
   2e994:	d9c5      	bls.n	2e922 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2e996:	2316      	movs	r3, #22
   2e998:	18fb      	adds	r3, r7, r3
   2e99a:	881b      	ldrh	r3, [r3, #0]
   2e99c:	4a0b      	ldr	r2, [pc, #44]	; (2e9cc <fit_lfn+0x108>)
   2e99e:	4293      	cmp	r3, r2
   2e9a0:	d006      	beq.n	2e9b0 <fit_lfn+0xec>
   2e9a2:	69fb      	ldr	r3, [r7, #28]
   2e9a4:	005b      	lsls	r3, r3, #1
   2e9a6:	68fa      	ldr	r2, [r7, #12]
   2e9a8:	18d3      	adds	r3, r2, r3
   2e9aa:	881b      	ldrh	r3, [r3, #0]
   2e9ac:	2b00      	cmp	r3, #0
   2e9ae:	d105      	bne.n	2e9bc <fit_lfn+0xf8>
   2e9b0:	1dfb      	adds	r3, r7, #7
   2e9b2:	1dfa      	adds	r2, r7, #7
   2e9b4:	7812      	ldrb	r2, [r2, #0]
   2e9b6:	2140      	movs	r1, #64	; 0x40
   2e9b8:	430a      	orrs	r2, r1
   2e9ba:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2e9bc:	68bb      	ldr	r3, [r7, #8]
   2e9be:	1dfa      	adds	r2, r7, #7
   2e9c0:	7812      	ldrb	r2, [r2, #0]
   2e9c2:	701a      	strb	r2, [r3, #0]
}
   2e9c4:	46c0      	nop			; (mov r8, r8)
   2e9c6:	46bd      	mov	sp, r7
   2e9c8:	b008      	add	sp, #32
   2e9ca:	bd80      	pop	{r7, pc}
   2e9cc:	0000ffff 	.word	0x0000ffff
   2e9d0:	0003c8ac 	.word	0x0003c8ac

0002e9d4 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2e9d4:	b580      	push	{r7, lr}
   2e9d6:	b08a      	sub	sp, #40	; 0x28
   2e9d8:	af00      	add	r7, sp, #0
   2e9da:	60f8      	str	r0, [r7, #12]
   2e9dc:	60b9      	str	r1, [r7, #8]
   2e9de:	607a      	str	r2, [r7, #4]
   2e9e0:	001a      	movs	r2, r3
   2e9e2:	1cbb      	adds	r3, r7, #2
   2e9e4:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2e9e6:	68b9      	ldr	r1, [r7, #8]
   2e9e8:	68fb      	ldr	r3, [r7, #12]
   2e9ea:	220b      	movs	r2, #11
   2e9ec:	0018      	movs	r0, r3
   2e9ee:	4b38      	ldr	r3, [pc, #224]	; (2ead0 <gen_numname+0xfc>)
   2e9f0:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2e9f2:	1cbb      	adds	r3, r7, #2
   2e9f4:	881b      	ldrh	r3, [r3, #0]
   2e9f6:	2b05      	cmp	r3, #5
   2e9f8:	d911      	bls.n	2ea1e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2e9fa:	1cbb      	adds	r3, r7, #2
   2e9fc:	881b      	ldrh	r3, [r3, #0]
   2e9fe:	b29a      	uxth	r2, r3
   2ea00:	0852      	lsrs	r2, r2, #1
   2ea02:	03db      	lsls	r3, r3, #15
   2ea04:	4313      	orrs	r3, r2
   2ea06:	b299      	uxth	r1, r3
   2ea08:	687b      	ldr	r3, [r7, #4]
   2ea0a:	1c9a      	adds	r2, r3, #2
   2ea0c:	607a      	str	r2, [r7, #4]
   2ea0e:	881a      	ldrh	r2, [r3, #0]
   2ea10:	1cbb      	adds	r3, r7, #2
   2ea12:	188a      	adds	r2, r1, r2
   2ea14:	801a      	strh	r2, [r3, #0]
   2ea16:	687b      	ldr	r3, [r7, #4]
   2ea18:	881b      	ldrh	r3, [r3, #0]
   2ea1a:	2b00      	cmp	r3, #0
   2ea1c:	d1ed      	bne.n	2e9fa <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2ea1e:	2307      	movs	r3, #7
   2ea20:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2ea22:	1cbb      	adds	r3, r7, #2
   2ea24:	881b      	ldrh	r3, [r3, #0]
   2ea26:	b2db      	uxtb	r3, r3
   2ea28:	220f      	movs	r2, #15
   2ea2a:	4013      	ands	r3, r2
   2ea2c:	b2da      	uxtb	r2, r3
   2ea2e:	2327      	movs	r3, #39	; 0x27
   2ea30:	18fb      	adds	r3, r7, r3
   2ea32:	3230      	adds	r2, #48	; 0x30
   2ea34:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2ea36:	2327      	movs	r3, #39	; 0x27
   2ea38:	18fb      	adds	r3, r7, r3
   2ea3a:	781b      	ldrb	r3, [r3, #0]
   2ea3c:	2b39      	cmp	r3, #57	; 0x39
   2ea3e:	d906      	bls.n	2ea4e <gen_numname+0x7a>
   2ea40:	2327      	movs	r3, #39	; 0x27
   2ea42:	18fb      	adds	r3, r7, r3
   2ea44:	2227      	movs	r2, #39	; 0x27
   2ea46:	18ba      	adds	r2, r7, r2
   2ea48:	7812      	ldrb	r2, [r2, #0]
   2ea4a:	3207      	adds	r2, #7
   2ea4c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2ea4e:	6a3b      	ldr	r3, [r7, #32]
   2ea50:	1e5a      	subs	r2, r3, #1
   2ea52:	623a      	str	r2, [r7, #32]
   2ea54:	2214      	movs	r2, #20
   2ea56:	18ba      	adds	r2, r7, r2
   2ea58:	2127      	movs	r1, #39	; 0x27
   2ea5a:	1879      	adds	r1, r7, r1
   2ea5c:	7809      	ldrb	r1, [r1, #0]
   2ea5e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2ea60:	1cbb      	adds	r3, r7, #2
   2ea62:	1cba      	adds	r2, r7, #2
   2ea64:	8812      	ldrh	r2, [r2, #0]
   2ea66:	0912      	lsrs	r2, r2, #4
   2ea68:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2ea6a:	1cbb      	adds	r3, r7, #2
   2ea6c:	881b      	ldrh	r3, [r3, #0]
   2ea6e:	2b00      	cmp	r3, #0
   2ea70:	d1d7      	bne.n	2ea22 <gen_numname+0x4e>
	ns[i] = '~';
   2ea72:	2314      	movs	r3, #20
   2ea74:	18fa      	adds	r2, r7, r3
   2ea76:	6a3b      	ldr	r3, [r7, #32]
   2ea78:	18d3      	adds	r3, r2, r3
   2ea7a:	227e      	movs	r2, #126	; 0x7e
   2ea7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2ea7e:	2300      	movs	r3, #0
   2ea80:	61fb      	str	r3, [r7, #28]
   2ea82:	e002      	b.n	2ea8a <gen_numname+0xb6>
   2ea84:	69fb      	ldr	r3, [r7, #28]
   2ea86:	3301      	adds	r3, #1
   2ea88:	61fb      	str	r3, [r7, #28]
   2ea8a:	69fa      	ldr	r2, [r7, #28]
   2ea8c:	6a3b      	ldr	r3, [r7, #32]
   2ea8e:	429a      	cmp	r2, r3
   2ea90:	d205      	bcs.n	2ea9e <gen_numname+0xca>
   2ea92:	68fa      	ldr	r2, [r7, #12]
   2ea94:	69fb      	ldr	r3, [r7, #28]
   2ea96:	18d3      	adds	r3, r2, r3
   2ea98:	781b      	ldrb	r3, [r3, #0]
   2ea9a:	2b20      	cmp	r3, #32
   2ea9c:	d1f2      	bne.n	2ea84 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2ea9e:	69fb      	ldr	r3, [r7, #28]
   2eaa0:	1c5a      	adds	r2, r3, #1
   2eaa2:	61fa      	str	r2, [r7, #28]
   2eaa4:	68fa      	ldr	r2, [r7, #12]
   2eaa6:	18d2      	adds	r2, r2, r3
   2eaa8:	6a3b      	ldr	r3, [r7, #32]
   2eaaa:	2b07      	cmp	r3, #7
   2eaac:	d806      	bhi.n	2eabc <gen_numname+0xe8>
   2eaae:	6a3b      	ldr	r3, [r7, #32]
   2eab0:	1c59      	adds	r1, r3, #1
   2eab2:	6239      	str	r1, [r7, #32]
   2eab4:	2114      	movs	r1, #20
   2eab6:	1879      	adds	r1, r7, r1
   2eab8:	5ccb      	ldrb	r3, [r1, r3]
   2eaba:	e000      	b.n	2eabe <gen_numname+0xea>
   2eabc:	2320      	movs	r3, #32
   2eabe:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2eac0:	69fb      	ldr	r3, [r7, #28]
   2eac2:	2b07      	cmp	r3, #7
   2eac4:	d9eb      	bls.n	2ea9e <gen_numname+0xca>
}
   2eac6:	46c0      	nop			; (mov r8, r8)
   2eac8:	46bd      	mov	sp, r7
   2eaca:	b00a      	add	sp, #40	; 0x28
   2eacc:	bd80      	pop	{r7, pc}
   2eace:	46c0      	nop			; (mov r8, r8)
   2ead0:	0002db79 	.word	0x0002db79

0002ead4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2ead4:	b580      	push	{r7, lr}
   2ead6:	b084      	sub	sp, #16
   2ead8:	af00      	add	r7, sp, #0
   2eada:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2eadc:	230f      	movs	r3, #15
   2eade:	18fb      	adds	r3, r7, r3
   2eae0:	2200      	movs	r2, #0
   2eae2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2eae4:	230b      	movs	r3, #11
   2eae6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2eae8:	230f      	movs	r3, #15
   2eaea:	18fb      	adds	r3, r7, r3
   2eaec:	781b      	ldrb	r3, [r3, #0]
   2eaee:	b2da      	uxtb	r2, r3
   2eaf0:	0852      	lsrs	r2, r2, #1
   2eaf2:	01db      	lsls	r3, r3, #7
   2eaf4:	4313      	orrs	r3, r2
   2eaf6:	b2d9      	uxtb	r1, r3
   2eaf8:	687b      	ldr	r3, [r7, #4]
   2eafa:	1c5a      	adds	r2, r3, #1
   2eafc:	607a      	str	r2, [r7, #4]
   2eafe:	781a      	ldrb	r2, [r3, #0]
   2eb00:	230f      	movs	r3, #15
   2eb02:	18fb      	adds	r3, r7, r3
   2eb04:	188a      	adds	r2, r1, r2
   2eb06:	701a      	strb	r2, [r3, #0]
   2eb08:	68bb      	ldr	r3, [r7, #8]
   2eb0a:	3b01      	subs	r3, #1
   2eb0c:	60bb      	str	r3, [r7, #8]
   2eb0e:	68bb      	ldr	r3, [r7, #8]
   2eb10:	2b00      	cmp	r3, #0
   2eb12:	d1e9      	bne.n	2eae8 <sum_sfn+0x14>
	return sum;
   2eb14:	230f      	movs	r3, #15
   2eb16:	18fb      	adds	r3, r7, r3
   2eb18:	781b      	ldrb	r3, [r3, #0]
}
   2eb1a:	0018      	movs	r0, r3
   2eb1c:	46bd      	mov	sp, r7
   2eb1e:	b004      	add	sp, #16
   2eb20:	bd80      	pop	{r7, pc}
	...

0002eb24 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2eb24:	b590      	push	{r4, r7, lr}
   2eb26:	b087      	sub	sp, #28
   2eb28:	af00      	add	r7, sp, #0
   2eb2a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2eb2c:	2317      	movs	r3, #23
   2eb2e:	18fc      	adds	r4, r7, r3
   2eb30:	687b      	ldr	r3, [r7, #4]
   2eb32:	2100      	movs	r1, #0
   2eb34:	0018      	movs	r0, r3
   2eb36:	4b74      	ldr	r3, [pc, #464]	; (2ed08 <dir_find+0x1e4>)
   2eb38:	4798      	blx	r3
   2eb3a:	0003      	movs	r3, r0
   2eb3c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2eb3e:	2317      	movs	r3, #23
   2eb40:	18fb      	adds	r3, r7, r3
   2eb42:	781b      	ldrb	r3, [r3, #0]
   2eb44:	2b00      	cmp	r3, #0
   2eb46:	d003      	beq.n	2eb50 <dir_find+0x2c>
   2eb48:	2317      	movs	r3, #23
   2eb4a:	18fb      	adds	r3, r7, r3
   2eb4c:	781b      	ldrb	r3, [r3, #0]
   2eb4e:	e0d6      	b.n	2ecfe <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2eb50:	2314      	movs	r3, #20
   2eb52:	18fb      	adds	r3, r7, r3
   2eb54:	22ff      	movs	r2, #255	; 0xff
   2eb56:	701a      	strb	r2, [r3, #0]
   2eb58:	2315      	movs	r3, #21
   2eb5a:	18fb      	adds	r3, r7, r3
   2eb5c:	2214      	movs	r2, #20
   2eb5e:	18ba      	adds	r2, r7, r2
   2eb60:	7812      	ldrb	r2, [r2, #0]
   2eb62:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2eb64:	687b      	ldr	r3, [r7, #4]
   2eb66:	681a      	ldr	r2, [r3, #0]
   2eb68:	687b      	ldr	r3, [r7, #4]
   2eb6a:	691b      	ldr	r3, [r3, #16]
   2eb6c:	2117      	movs	r1, #23
   2eb6e:	187c      	adds	r4, r7, r1
   2eb70:	0019      	movs	r1, r3
   2eb72:	0010      	movs	r0, r2
   2eb74:	4b65      	ldr	r3, [pc, #404]	; (2ed0c <dir_find+0x1e8>)
   2eb76:	4798      	blx	r3
   2eb78:	0003      	movs	r3, r0
   2eb7a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2eb7c:	2317      	movs	r3, #23
   2eb7e:	18fb      	adds	r3, r7, r3
   2eb80:	781b      	ldrb	r3, [r3, #0]
   2eb82:	2b00      	cmp	r3, #0
   2eb84:	d000      	beq.n	2eb88 <dir_find+0x64>
   2eb86:	e0b2      	b.n	2ecee <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2eb88:	687b      	ldr	r3, [r7, #4]
   2eb8a:	695b      	ldr	r3, [r3, #20]
   2eb8c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2eb8e:	2316      	movs	r3, #22
   2eb90:	18fb      	adds	r3, r7, r3
   2eb92:	693a      	ldr	r2, [r7, #16]
   2eb94:	7812      	ldrb	r2, [r2, #0]
   2eb96:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2eb98:	2316      	movs	r3, #22
   2eb9a:	18fb      	adds	r3, r7, r3
   2eb9c:	781b      	ldrb	r3, [r3, #0]
   2eb9e:	2b00      	cmp	r3, #0
   2eba0:	d104      	bne.n	2ebac <dir_find+0x88>
   2eba2:	2317      	movs	r3, #23
   2eba4:	18fb      	adds	r3, r7, r3
   2eba6:	2204      	movs	r2, #4
   2eba8:	701a      	strb	r2, [r3, #0]
   2ebaa:	e0a5      	b.n	2ecf8 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2ebac:	693b      	ldr	r3, [r7, #16]
   2ebae:	330b      	adds	r3, #11
   2ebb0:	781a      	ldrb	r2, [r3, #0]
   2ebb2:	230f      	movs	r3, #15
   2ebb4:	18fb      	adds	r3, r7, r3
   2ebb6:	213f      	movs	r1, #63	; 0x3f
   2ebb8:	400a      	ands	r2, r1
   2ebba:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2ebbc:	2316      	movs	r3, #22
   2ebbe:	18fb      	adds	r3, r7, r3
   2ebc0:	781b      	ldrb	r3, [r3, #0]
   2ebc2:	2be5      	cmp	r3, #229	; 0xe5
   2ebc4:	d00a      	beq.n	2ebdc <dir_find+0xb8>
   2ebc6:	230f      	movs	r3, #15
   2ebc8:	18fb      	adds	r3, r7, r3
   2ebca:	781b      	ldrb	r3, [r3, #0]
   2ebcc:	2208      	movs	r2, #8
   2ebce:	4013      	ands	r3, r2
   2ebd0:	d009      	beq.n	2ebe6 <dir_find+0xc2>
   2ebd2:	230f      	movs	r3, #15
   2ebd4:	18fb      	adds	r3, r7, r3
   2ebd6:	781b      	ldrb	r3, [r3, #0]
   2ebd8:	2b0f      	cmp	r3, #15
   2ebda:	d004      	beq.n	2ebe6 <dir_find+0xc2>
			ord = 0xFF;
   2ebdc:	2315      	movs	r3, #21
   2ebde:	18fb      	adds	r3, r7, r3
   2ebe0:	22ff      	movs	r2, #255	; 0xff
   2ebe2:	701a      	strb	r2, [r3, #0]
   2ebe4:	e073      	b.n	2ecce <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2ebe6:	230f      	movs	r3, #15
   2ebe8:	18fb      	adds	r3, r7, r3
   2ebea:	781b      	ldrb	r3, [r3, #0]
   2ebec:	2b0f      	cmp	r3, #15
   2ebee:	d145      	bne.n	2ec7c <dir_find+0x158>
				if (dj->lfn) {
   2ebf0:	687b      	ldr	r3, [r7, #4]
   2ebf2:	69db      	ldr	r3, [r3, #28]
   2ebf4:	2b00      	cmp	r3, #0
   2ebf6:	d100      	bne.n	2ebfa <dir_find+0xd6>
   2ebf8:	e069      	b.n	2ecce <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2ebfa:	2316      	movs	r3, #22
   2ebfc:	18fb      	adds	r3, r7, r3
   2ebfe:	781b      	ldrb	r3, [r3, #0]
   2ec00:	2240      	movs	r2, #64	; 0x40
   2ec02:	4013      	ands	r3, r2
   2ec04:	d016      	beq.n	2ec34 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2ec06:	2314      	movs	r3, #20
   2ec08:	18fb      	adds	r3, r7, r3
   2ec0a:	693a      	ldr	r2, [r7, #16]
   2ec0c:	7b52      	ldrb	r2, [r2, #13]
   2ec0e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2ec10:	2316      	movs	r3, #22
   2ec12:	18fb      	adds	r3, r7, r3
   2ec14:	2216      	movs	r2, #22
   2ec16:	18ba      	adds	r2, r7, r2
   2ec18:	7812      	ldrb	r2, [r2, #0]
   2ec1a:	2140      	movs	r1, #64	; 0x40
   2ec1c:	438a      	bics	r2, r1
   2ec1e:	701a      	strb	r2, [r3, #0]
   2ec20:	2315      	movs	r3, #21
   2ec22:	18fb      	adds	r3, r7, r3
   2ec24:	2216      	movs	r2, #22
   2ec26:	18ba      	adds	r2, r7, r2
   2ec28:	7812      	ldrb	r2, [r2, #0]
   2ec2a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2ec2c:	687b      	ldr	r3, [r7, #4]
   2ec2e:	88da      	ldrh	r2, [r3, #6]
   2ec30:	687b      	ldr	r3, [r7, #4]
   2ec32:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2ec34:	2316      	movs	r3, #22
   2ec36:	18fa      	adds	r2, r7, r3
   2ec38:	2315      	movs	r3, #21
   2ec3a:	18fb      	adds	r3, r7, r3
   2ec3c:	7812      	ldrb	r2, [r2, #0]
   2ec3e:	781b      	ldrb	r3, [r3, #0]
   2ec40:	429a      	cmp	r2, r3
   2ec42:	d116      	bne.n	2ec72 <dir_find+0x14e>
   2ec44:	693b      	ldr	r3, [r7, #16]
   2ec46:	330d      	adds	r3, #13
   2ec48:	781b      	ldrb	r3, [r3, #0]
   2ec4a:	2214      	movs	r2, #20
   2ec4c:	18ba      	adds	r2, r7, r2
   2ec4e:	7812      	ldrb	r2, [r2, #0]
   2ec50:	429a      	cmp	r2, r3
   2ec52:	d10e      	bne.n	2ec72 <dir_find+0x14e>
   2ec54:	687b      	ldr	r3, [r7, #4]
   2ec56:	69db      	ldr	r3, [r3, #28]
   2ec58:	693a      	ldr	r2, [r7, #16]
   2ec5a:	0011      	movs	r1, r2
   2ec5c:	0018      	movs	r0, r3
   2ec5e:	4b2c      	ldr	r3, [pc, #176]	; (2ed10 <dir_find+0x1ec>)
   2ec60:	4798      	blx	r3
   2ec62:	1e03      	subs	r3, r0, #0
   2ec64:	d005      	beq.n	2ec72 <dir_find+0x14e>
   2ec66:	2315      	movs	r3, #21
   2ec68:	18fb      	adds	r3, r7, r3
   2ec6a:	781b      	ldrb	r3, [r3, #0]
   2ec6c:	3b01      	subs	r3, #1
   2ec6e:	b2da      	uxtb	r2, r3
   2ec70:	e000      	b.n	2ec74 <dir_find+0x150>
   2ec72:	22ff      	movs	r2, #255	; 0xff
   2ec74:	2315      	movs	r3, #21
   2ec76:	18fb      	adds	r3, r7, r3
   2ec78:	701a      	strb	r2, [r3, #0]
   2ec7a:	e028      	b.n	2ecce <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ec7c:	2315      	movs	r3, #21
   2ec7e:	18fb      	adds	r3, r7, r3
   2ec80:	781b      	ldrb	r3, [r3, #0]
   2ec82:	2b00      	cmp	r3, #0
   2ec84:	d10a      	bne.n	2ec9c <dir_find+0x178>
   2ec86:	693b      	ldr	r3, [r7, #16]
   2ec88:	0018      	movs	r0, r3
   2ec8a:	4b22      	ldr	r3, [pc, #136]	; (2ed14 <dir_find+0x1f0>)
   2ec8c:	4798      	blx	r3
   2ec8e:	0003      	movs	r3, r0
   2ec90:	001a      	movs	r2, r3
   2ec92:	2314      	movs	r3, #20
   2ec94:	18fb      	adds	r3, r7, r3
   2ec96:	781b      	ldrb	r3, [r3, #0]
   2ec98:	4293      	cmp	r3, r2
   2ec9a:	d02a      	beq.n	2ecf2 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2ec9c:	2315      	movs	r3, #21
   2ec9e:	18fb      	adds	r3, r7, r3
   2eca0:	22ff      	movs	r2, #255	; 0xff
   2eca2:	701a      	strb	r2, [r3, #0]
   2eca4:	687b      	ldr	r3, [r7, #4]
   2eca6:	2201      	movs	r2, #1
   2eca8:	4252      	negs	r2, r2
   2ecaa:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ecac:	687b      	ldr	r3, [r7, #4]
   2ecae:	699b      	ldr	r3, [r3, #24]
   2ecb0:	330b      	adds	r3, #11
   2ecb2:	781b      	ldrb	r3, [r3, #0]
   2ecb4:	001a      	movs	r2, r3
   2ecb6:	2301      	movs	r3, #1
   2ecb8:	4013      	ands	r3, r2
   2ecba:	d108      	bne.n	2ecce <dir_find+0x1aa>
   2ecbc:	687b      	ldr	r3, [r7, #4]
   2ecbe:	6999      	ldr	r1, [r3, #24]
   2ecc0:	693b      	ldr	r3, [r7, #16]
   2ecc2:	220b      	movs	r2, #11
   2ecc4:	0018      	movs	r0, r3
   2ecc6:	4b14      	ldr	r3, [pc, #80]	; (2ed18 <dir_find+0x1f4>)
   2ecc8:	4798      	blx	r3
   2ecca:	1e03      	subs	r3, r0, #0
   2eccc:	d013      	beq.n	2ecf6 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2ecce:	2317      	movs	r3, #23
   2ecd0:	18fc      	adds	r4, r7, r3
   2ecd2:	687b      	ldr	r3, [r7, #4]
   2ecd4:	2100      	movs	r1, #0
   2ecd6:	0018      	movs	r0, r3
   2ecd8:	4b10      	ldr	r3, [pc, #64]	; (2ed1c <dir_find+0x1f8>)
   2ecda:	4798      	blx	r3
   2ecdc:	0003      	movs	r3, r0
   2ecde:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ece0:	2317      	movs	r3, #23
   2ece2:	18fb      	adds	r3, r7, r3
   2ece4:	781b      	ldrb	r3, [r3, #0]
   2ece6:	2b00      	cmp	r3, #0
   2ece8:	d100      	bne.n	2ecec <dir_find+0x1c8>
   2ecea:	e73b      	b.n	2eb64 <dir_find+0x40>
   2ecec:	e004      	b.n	2ecf8 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2ecee:	46c0      	nop			; (mov r8, r8)
   2ecf0:	e002      	b.n	2ecf8 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ecf2:	46c0      	nop			; (mov r8, r8)
   2ecf4:	e000      	b.n	2ecf8 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ecf6:	46c0      	nop			; (mov r8, r8)

	return res;
   2ecf8:	2317      	movs	r3, #23
   2ecfa:	18fb      	adds	r3, r7, r3
   2ecfc:	781b      	ldrb	r3, [r3, #0]
}
   2ecfe:	0018      	movs	r0, r3
   2ed00:	46bd      	mov	sp, r7
   2ed02:	b007      	add	sp, #28
   2ed04:	bd90      	pop	{r4, r7, pc}
   2ed06:	46c0      	nop			; (mov r8, r8)
   2ed08:	0002e4a1 	.word	0x0002e4a1
   2ed0c:	0002dc5d 	.word	0x0002dc5d
   2ed10:	0002e7c1 	.word	0x0002e7c1
   2ed14:	0002ead5 	.word	0x0002ead5
   2ed18:	0002dbe1 	.word	0x0002dbe1
   2ed1c:	0002e5d1 	.word	0x0002e5d1

0002ed20 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2ed20:	b590      	push	{r4, r7, lr}
   2ed22:	b08d      	sub	sp, #52	; 0x34
   2ed24:	af00      	add	r7, sp, #0
   2ed26:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2ed28:	687b      	ldr	r3, [r7, #4]
   2ed2a:	699b      	ldr	r3, [r3, #24]
   2ed2c:	627b      	str	r3, [r7, #36]	; 0x24
   2ed2e:	687b      	ldr	r3, [r7, #4]
   2ed30:	69db      	ldr	r3, [r3, #28]
   2ed32:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2ed34:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ed36:	230c      	movs	r3, #12
   2ed38:	18fb      	adds	r3, r7, r3
   2ed3a:	220c      	movs	r2, #12
   2ed3c:	0018      	movs	r0, r3
   2ed3e:	4bc8      	ldr	r3, [pc, #800]	; (2f060 <dir_register+0x340>)
   2ed40:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2ed42:	230c      	movs	r3, #12
   2ed44:	18fb      	adds	r3, r7, r3
   2ed46:	7adb      	ldrb	r3, [r3, #11]
   2ed48:	001a      	movs	r2, r3
   2ed4a:	2301      	movs	r3, #1
   2ed4c:	4013      	ands	r3, r2
   2ed4e:	d048      	beq.n	2ede2 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed52:	330b      	adds	r3, #11
   2ed54:	2200      	movs	r2, #0
   2ed56:	701a      	strb	r2, [r3, #0]
   2ed58:	687b      	ldr	r3, [r7, #4]
   2ed5a:	2200      	movs	r2, #0
   2ed5c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2ed5e:	232c      	movs	r3, #44	; 0x2c
   2ed60:	18fb      	adds	r3, r7, r3
   2ed62:	2201      	movs	r2, #1
   2ed64:	801a      	strh	r2, [r3, #0]
   2ed66:	e01c      	b.n	2eda2 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2ed68:	232c      	movs	r3, #44	; 0x2c
   2ed6a:	18fb      	adds	r3, r7, r3
   2ed6c:	881b      	ldrh	r3, [r3, #0]
   2ed6e:	6a3a      	ldr	r2, [r7, #32]
   2ed70:	210c      	movs	r1, #12
   2ed72:	1879      	adds	r1, r7, r1
   2ed74:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2ed76:	4cbb      	ldr	r4, [pc, #748]	; (2f064 <dir_register+0x344>)
   2ed78:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2ed7a:	232f      	movs	r3, #47	; 0x2f
   2ed7c:	18fc      	adds	r4, r7, r3
   2ed7e:	687b      	ldr	r3, [r7, #4]
   2ed80:	0018      	movs	r0, r3
   2ed82:	4bb9      	ldr	r3, [pc, #740]	; (2f068 <dir_register+0x348>)
   2ed84:	4798      	blx	r3
   2ed86:	0003      	movs	r3, r0
   2ed88:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ed8a:	232f      	movs	r3, #47	; 0x2f
   2ed8c:	18fb      	adds	r3, r7, r3
   2ed8e:	781b      	ldrb	r3, [r3, #0]
   2ed90:	2b00      	cmp	r3, #0
   2ed92:	d10c      	bne.n	2edae <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2ed94:	232c      	movs	r3, #44	; 0x2c
   2ed96:	18fb      	adds	r3, r7, r3
   2ed98:	881a      	ldrh	r2, [r3, #0]
   2ed9a:	232c      	movs	r3, #44	; 0x2c
   2ed9c:	18fb      	adds	r3, r7, r3
   2ed9e:	3201      	adds	r2, #1
   2eda0:	801a      	strh	r2, [r3, #0]
   2eda2:	232c      	movs	r3, #44	; 0x2c
   2eda4:	18fb      	adds	r3, r7, r3
   2eda6:	881b      	ldrh	r3, [r3, #0]
   2eda8:	2b63      	cmp	r3, #99	; 0x63
   2edaa:	d9dd      	bls.n	2ed68 <dir_register+0x48>
   2edac:	e000      	b.n	2edb0 <dir_register+0x90>
			if (res != FR_OK) break;
   2edae:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2edb0:	232c      	movs	r3, #44	; 0x2c
   2edb2:	18fb      	adds	r3, r7, r3
   2edb4:	881b      	ldrh	r3, [r3, #0]
   2edb6:	2b64      	cmp	r3, #100	; 0x64
   2edb8:	d101      	bne.n	2edbe <dir_register+0x9e>
   2edba:	2307      	movs	r3, #7
   2edbc:	e14c      	b.n	2f058 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2edbe:	232f      	movs	r3, #47	; 0x2f
   2edc0:	18fb      	adds	r3, r7, r3
   2edc2:	781b      	ldrb	r3, [r3, #0]
   2edc4:	2b04      	cmp	r3, #4
   2edc6:	d003      	beq.n	2edd0 <dir_register+0xb0>
   2edc8:	232f      	movs	r3, #47	; 0x2f
   2edca:	18fb      	adds	r3, r7, r3
   2edcc:	781b      	ldrb	r3, [r3, #0]
   2edce:	e143      	b.n	2f058 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2edd2:	330b      	adds	r3, #11
   2edd4:	220c      	movs	r2, #12
   2edd6:	18ba      	adds	r2, r7, r2
   2edd8:	7ad2      	ldrb	r2, [r2, #11]
   2edda:	701a      	strb	r2, [r3, #0]
   2eddc:	687b      	ldr	r3, [r7, #4]
   2edde:	6a3a      	ldr	r2, [r7, #32]
   2ede0:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2ede2:	230c      	movs	r3, #12
   2ede4:	18fb      	adds	r3, r7, r3
   2ede6:	7adb      	ldrb	r3, [r3, #11]
   2ede8:	001a      	movs	r2, r3
   2edea:	2302      	movs	r3, #2
   2edec:	4013      	ands	r3, r2
   2edee:	d023      	beq.n	2ee38 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2edf0:	232a      	movs	r3, #42	; 0x2a
   2edf2:	18fb      	adds	r3, r7, r3
   2edf4:	2200      	movs	r2, #0
   2edf6:	801a      	strh	r2, [r3, #0]
   2edf8:	e006      	b.n	2ee08 <dir_register+0xe8>
   2edfa:	232a      	movs	r3, #42	; 0x2a
   2edfc:	18fb      	adds	r3, r7, r3
   2edfe:	881a      	ldrh	r2, [r3, #0]
   2ee00:	232a      	movs	r3, #42	; 0x2a
   2ee02:	18fb      	adds	r3, r7, r3
   2ee04:	3201      	adds	r2, #1
   2ee06:	801a      	strh	r2, [r3, #0]
   2ee08:	232a      	movs	r3, #42	; 0x2a
   2ee0a:	18fb      	adds	r3, r7, r3
   2ee0c:	881b      	ldrh	r3, [r3, #0]
   2ee0e:	005b      	lsls	r3, r3, #1
   2ee10:	6a3a      	ldr	r2, [r7, #32]
   2ee12:	18d3      	adds	r3, r2, r3
   2ee14:	881b      	ldrh	r3, [r3, #0]
   2ee16:	2b00      	cmp	r3, #0
   2ee18:	d1ef      	bne.n	2edfa <dir_register+0xda>
		ne = (ne + 25) / 13;
   2ee1a:	232a      	movs	r3, #42	; 0x2a
   2ee1c:	18fb      	adds	r3, r7, r3
   2ee1e:	881b      	ldrh	r3, [r3, #0]
   2ee20:	3319      	adds	r3, #25
   2ee22:	001a      	movs	r2, r3
   2ee24:	4b91      	ldr	r3, [pc, #580]	; (2f06c <dir_register+0x34c>)
   2ee26:	210d      	movs	r1, #13
   2ee28:	0010      	movs	r0, r2
   2ee2a:	4798      	blx	r3
   2ee2c:	0003      	movs	r3, r0
   2ee2e:	001a      	movs	r2, r3
   2ee30:	232a      	movs	r3, #42	; 0x2a
   2ee32:	18fb      	adds	r3, r7, r3
   2ee34:	801a      	strh	r2, [r3, #0]
   2ee36:	e003      	b.n	2ee40 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2ee38:	232a      	movs	r3, #42	; 0x2a
   2ee3a:	18fb      	adds	r3, r7, r3
   2ee3c:	2201      	movs	r2, #1
   2ee3e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2ee40:	232f      	movs	r3, #47	; 0x2f
   2ee42:	18fc      	adds	r4, r7, r3
   2ee44:	687b      	ldr	r3, [r7, #4]
   2ee46:	2100      	movs	r1, #0
   2ee48:	0018      	movs	r0, r3
   2ee4a:	4b89      	ldr	r3, [pc, #548]	; (2f070 <dir_register+0x350>)
   2ee4c:	4798      	blx	r3
   2ee4e:	0003      	movs	r3, r0
   2ee50:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2ee52:	232f      	movs	r3, #47	; 0x2f
   2ee54:	18fb      	adds	r3, r7, r3
   2ee56:	781b      	ldrb	r3, [r3, #0]
   2ee58:	2b00      	cmp	r3, #0
   2ee5a:	d003      	beq.n	2ee64 <dir_register+0x144>
   2ee5c:	232f      	movs	r3, #47	; 0x2f
   2ee5e:	18fb      	adds	r3, r7, r3
   2ee60:	781b      	ldrb	r3, [r3, #0]
   2ee62:	e0f9      	b.n	2f058 <dir_register+0x338>
	n = is = 0;
   2ee64:	2328      	movs	r3, #40	; 0x28
   2ee66:	18fb      	adds	r3, r7, r3
   2ee68:	2200      	movs	r2, #0
   2ee6a:	801a      	strh	r2, [r3, #0]
   2ee6c:	232c      	movs	r3, #44	; 0x2c
   2ee6e:	18fb      	adds	r3, r7, r3
   2ee70:	2228      	movs	r2, #40	; 0x28
   2ee72:	18ba      	adds	r2, r7, r2
   2ee74:	8812      	ldrh	r2, [r2, #0]
   2ee76:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2ee78:	687b      	ldr	r3, [r7, #4]
   2ee7a:	681a      	ldr	r2, [r3, #0]
   2ee7c:	687b      	ldr	r3, [r7, #4]
   2ee7e:	691b      	ldr	r3, [r3, #16]
   2ee80:	212f      	movs	r1, #47	; 0x2f
   2ee82:	187c      	adds	r4, r7, r1
   2ee84:	0019      	movs	r1, r3
   2ee86:	0010      	movs	r0, r2
   2ee88:	4b7a      	ldr	r3, [pc, #488]	; (2f074 <dir_register+0x354>)
   2ee8a:	4798      	blx	r3
   2ee8c:	0003      	movs	r3, r0
   2ee8e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2ee90:	232f      	movs	r3, #47	; 0x2f
   2ee92:	18fb      	adds	r3, r7, r3
   2ee94:	781b      	ldrb	r3, [r3, #0]
   2ee96:	2b00      	cmp	r3, #0
   2ee98:	d13c      	bne.n	2ef14 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2ee9a:	687b      	ldr	r3, [r7, #4]
   2ee9c:	695a      	ldr	r2, [r3, #20]
   2ee9e:	231f      	movs	r3, #31
   2eea0:	18fb      	adds	r3, r7, r3
   2eea2:	7812      	ldrb	r2, [r2, #0]
   2eea4:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2eea6:	231f      	movs	r3, #31
   2eea8:	18fb      	adds	r3, r7, r3
   2eeaa:	781b      	ldrb	r3, [r3, #0]
   2eeac:	2be5      	cmp	r3, #229	; 0xe5
   2eeae:	d004      	beq.n	2eeba <dir_register+0x19a>
   2eeb0:	231f      	movs	r3, #31
   2eeb2:	18fb      	adds	r3, r7, r3
   2eeb4:	781b      	ldrb	r3, [r3, #0]
   2eeb6:	2b00      	cmp	r3, #0
   2eeb8:	d119      	bne.n	2eeee <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2eeba:	232c      	movs	r3, #44	; 0x2c
   2eebc:	18fb      	adds	r3, r7, r3
   2eebe:	881b      	ldrh	r3, [r3, #0]
   2eec0:	2b00      	cmp	r3, #0
   2eec2:	d104      	bne.n	2eece <dir_register+0x1ae>
   2eec4:	2328      	movs	r3, #40	; 0x28
   2eec6:	18fb      	adds	r3, r7, r3
   2eec8:	687a      	ldr	r2, [r7, #4]
   2eeca:	88d2      	ldrh	r2, [r2, #6]
   2eecc:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2eece:	232c      	movs	r3, #44	; 0x2c
   2eed0:	18fb      	adds	r3, r7, r3
   2eed2:	222c      	movs	r2, #44	; 0x2c
   2eed4:	18ba      	adds	r2, r7, r2
   2eed6:	8812      	ldrh	r2, [r2, #0]
   2eed8:	3201      	adds	r2, #1
   2eeda:	801a      	strh	r2, [r3, #0]
   2eedc:	232c      	movs	r3, #44	; 0x2c
   2eede:	18fa      	adds	r2, r7, r3
   2eee0:	232a      	movs	r3, #42	; 0x2a
   2eee2:	18fb      	adds	r3, r7, r3
   2eee4:	8812      	ldrh	r2, [r2, #0]
   2eee6:	881b      	ldrh	r3, [r3, #0]
   2eee8:	429a      	cmp	r2, r3
   2eeea:	d104      	bne.n	2eef6 <dir_register+0x1d6>
   2eeec:	e013      	b.n	2ef16 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2eeee:	232c      	movs	r3, #44	; 0x2c
   2eef0:	18fb      	adds	r3, r7, r3
   2eef2:	2200      	movs	r2, #0
   2eef4:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2eef6:	232f      	movs	r3, #47	; 0x2f
   2eef8:	18fc      	adds	r4, r7, r3
   2eefa:	687b      	ldr	r3, [r7, #4]
   2eefc:	2101      	movs	r1, #1
   2eefe:	0018      	movs	r0, r3
   2ef00:	4b5d      	ldr	r3, [pc, #372]	; (2f078 <dir_register+0x358>)
   2ef02:	4798      	blx	r3
   2ef04:	0003      	movs	r3, r0
   2ef06:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ef08:	232f      	movs	r3, #47	; 0x2f
   2ef0a:	18fb      	adds	r3, r7, r3
   2ef0c:	781b      	ldrb	r3, [r3, #0]
   2ef0e:	2b00      	cmp	r3, #0
   2ef10:	d0b2      	beq.n	2ee78 <dir_register+0x158>
   2ef12:	e000      	b.n	2ef16 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2ef14:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2ef16:	232f      	movs	r3, #47	; 0x2f
   2ef18:	18fb      	adds	r3, r7, r3
   2ef1a:	781b      	ldrb	r3, [r3, #0]
   2ef1c:	2b00      	cmp	r3, #0
   2ef1e:	d163      	bne.n	2efe8 <dir_register+0x2c8>
   2ef20:	232a      	movs	r3, #42	; 0x2a
   2ef22:	18fb      	adds	r3, r7, r3
   2ef24:	881b      	ldrh	r3, [r3, #0]
   2ef26:	2b01      	cmp	r3, #1
   2ef28:	d95e      	bls.n	2efe8 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2ef2a:	232f      	movs	r3, #47	; 0x2f
   2ef2c:	18fc      	adds	r4, r7, r3
   2ef2e:	2328      	movs	r3, #40	; 0x28
   2ef30:	18fb      	adds	r3, r7, r3
   2ef32:	881a      	ldrh	r2, [r3, #0]
   2ef34:	687b      	ldr	r3, [r7, #4]
   2ef36:	0011      	movs	r1, r2
   2ef38:	0018      	movs	r0, r3
   2ef3a:	4b4d      	ldr	r3, [pc, #308]	; (2f070 <dir_register+0x350>)
   2ef3c:	4798      	blx	r3
   2ef3e:	0003      	movs	r3, r0
   2ef40:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2ef42:	232f      	movs	r3, #47	; 0x2f
   2ef44:	18fb      	adds	r3, r7, r3
   2ef46:	781b      	ldrb	r3, [r3, #0]
   2ef48:	2b00      	cmp	r3, #0
   2ef4a:	d14d      	bne.n	2efe8 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2ef4c:	687b      	ldr	r3, [r7, #4]
   2ef4e:	699b      	ldr	r3, [r3, #24]
   2ef50:	221e      	movs	r2, #30
   2ef52:	18bc      	adds	r4, r7, r2
   2ef54:	0018      	movs	r0, r3
   2ef56:	4b49      	ldr	r3, [pc, #292]	; (2f07c <dir_register+0x35c>)
   2ef58:	4798      	blx	r3
   2ef5a:	0003      	movs	r3, r0
   2ef5c:	7023      	strb	r3, [r4, #0]
			ne--;
   2ef5e:	232a      	movs	r3, #42	; 0x2a
   2ef60:	18fb      	adds	r3, r7, r3
   2ef62:	881a      	ldrh	r2, [r3, #0]
   2ef64:	232a      	movs	r3, #42	; 0x2a
   2ef66:	18fb      	adds	r3, r7, r3
   2ef68:	3a01      	subs	r2, #1
   2ef6a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2ef6c:	687b      	ldr	r3, [r7, #4]
   2ef6e:	681a      	ldr	r2, [r3, #0]
   2ef70:	687b      	ldr	r3, [r7, #4]
   2ef72:	691b      	ldr	r3, [r3, #16]
   2ef74:	212f      	movs	r1, #47	; 0x2f
   2ef76:	187c      	adds	r4, r7, r1
   2ef78:	0019      	movs	r1, r3
   2ef7a:	0010      	movs	r0, r2
   2ef7c:	4b3d      	ldr	r3, [pc, #244]	; (2f074 <dir_register+0x354>)
   2ef7e:	4798      	blx	r3
   2ef80:	0003      	movs	r3, r0
   2ef82:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2ef84:	232f      	movs	r3, #47	; 0x2f
   2ef86:	18fb      	adds	r3, r7, r3
   2ef88:	781b      	ldrb	r3, [r3, #0]
   2ef8a:	2b00      	cmp	r3, #0
   2ef8c:	d12b      	bne.n	2efe6 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2ef8e:	687b      	ldr	r3, [r7, #4]
   2ef90:	69d8      	ldr	r0, [r3, #28]
   2ef92:	687b      	ldr	r3, [r7, #4]
   2ef94:	6959      	ldr	r1, [r3, #20]
   2ef96:	232a      	movs	r3, #42	; 0x2a
   2ef98:	18fb      	adds	r3, r7, r3
   2ef9a:	881b      	ldrh	r3, [r3, #0]
   2ef9c:	b2da      	uxtb	r2, r3
   2ef9e:	231e      	movs	r3, #30
   2efa0:	18fb      	adds	r3, r7, r3
   2efa2:	781b      	ldrb	r3, [r3, #0]
   2efa4:	4c36      	ldr	r4, [pc, #216]	; (2f080 <dir_register+0x360>)
   2efa6:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2efa8:	687b      	ldr	r3, [r7, #4]
   2efaa:	681b      	ldr	r3, [r3, #0]
   2efac:	2201      	movs	r2, #1
   2efae:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2efb0:	232f      	movs	r3, #47	; 0x2f
   2efb2:	18fc      	adds	r4, r7, r3
   2efb4:	687b      	ldr	r3, [r7, #4]
   2efb6:	2100      	movs	r1, #0
   2efb8:	0018      	movs	r0, r3
   2efba:	4b2f      	ldr	r3, [pc, #188]	; (2f078 <dir_register+0x358>)
   2efbc:	4798      	blx	r3
   2efbe:	0003      	movs	r3, r0
   2efc0:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2efc2:	232f      	movs	r3, #47	; 0x2f
   2efc4:	18fb      	adds	r3, r7, r3
   2efc6:	781b      	ldrb	r3, [r3, #0]
   2efc8:	2b00      	cmp	r3, #0
   2efca:	d10d      	bne.n	2efe8 <dir_register+0x2c8>
   2efcc:	232a      	movs	r3, #42	; 0x2a
   2efce:	18fb      	adds	r3, r7, r3
   2efd0:	222a      	movs	r2, #42	; 0x2a
   2efd2:	18ba      	adds	r2, r7, r2
   2efd4:	8812      	ldrh	r2, [r2, #0]
   2efd6:	3a01      	subs	r2, #1
   2efd8:	801a      	strh	r2, [r3, #0]
   2efda:	232a      	movs	r3, #42	; 0x2a
   2efdc:	18fb      	adds	r3, r7, r3
   2efde:	881b      	ldrh	r3, [r3, #0]
   2efe0:	2b00      	cmp	r3, #0
   2efe2:	d1c3      	bne.n	2ef6c <dir_register+0x24c>
   2efe4:	e000      	b.n	2efe8 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2efe6:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2efe8:	232f      	movs	r3, #47	; 0x2f
   2efea:	18fb      	adds	r3, r7, r3
   2efec:	781b      	ldrb	r3, [r3, #0]
   2efee:	2b00      	cmp	r3, #0
   2eff0:	d12f      	bne.n	2f052 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2eff2:	687b      	ldr	r3, [r7, #4]
   2eff4:	681a      	ldr	r2, [r3, #0]
   2eff6:	687b      	ldr	r3, [r7, #4]
   2eff8:	691b      	ldr	r3, [r3, #16]
   2effa:	212f      	movs	r1, #47	; 0x2f
   2effc:	187c      	adds	r4, r7, r1
   2effe:	0019      	movs	r1, r3
   2f000:	0010      	movs	r0, r2
   2f002:	4b1c      	ldr	r3, [pc, #112]	; (2f074 <dir_register+0x354>)
   2f004:	4798      	blx	r3
   2f006:	0003      	movs	r3, r0
   2f008:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2f00a:	232f      	movs	r3, #47	; 0x2f
   2f00c:	18fb      	adds	r3, r7, r3
   2f00e:	781b      	ldrb	r3, [r3, #0]
   2f010:	2b00      	cmp	r3, #0
   2f012:	d11e      	bne.n	2f052 <dir_register+0x332>
			dir = dj->dir;
   2f014:	687b      	ldr	r3, [r7, #4]
   2f016:	695b      	ldr	r3, [r3, #20]
   2f018:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2f01a:	69bb      	ldr	r3, [r7, #24]
   2f01c:	2220      	movs	r2, #32
   2f01e:	2100      	movs	r1, #0
   2f020:	0018      	movs	r0, r3
   2f022:	4b18      	ldr	r3, [pc, #96]	; (2f084 <dir_register+0x364>)
   2f024:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2f026:	687b      	ldr	r3, [r7, #4]
   2f028:	6999      	ldr	r1, [r3, #24]
   2f02a:	69bb      	ldr	r3, [r7, #24]
   2f02c:	220b      	movs	r2, #11
   2f02e:	0018      	movs	r0, r3
   2f030:	4b0b      	ldr	r3, [pc, #44]	; (2f060 <dir_register+0x340>)
   2f032:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2f034:	69bb      	ldr	r3, [r7, #24]
   2f036:	330c      	adds	r3, #12
   2f038:	001a      	movs	r2, r3
   2f03a:	687b      	ldr	r3, [r7, #4]
   2f03c:	699b      	ldr	r3, [r3, #24]
   2f03e:	330b      	adds	r3, #11
   2f040:	781b      	ldrb	r3, [r3, #0]
   2f042:	2118      	movs	r1, #24
   2f044:	400b      	ands	r3, r1
   2f046:	b2db      	uxtb	r3, r3
   2f048:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2f04a:	687b      	ldr	r3, [r7, #4]
   2f04c:	681b      	ldr	r3, [r3, #0]
   2f04e:	2201      	movs	r2, #1
   2f050:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2f052:	232f      	movs	r3, #47	; 0x2f
   2f054:	18fb      	adds	r3, r7, r3
   2f056:	781b      	ldrb	r3, [r3, #0]
}
   2f058:	0018      	movs	r0, r3
   2f05a:	46bd      	mov	sp, r7
   2f05c:	b00d      	add	sp, #52	; 0x34
   2f05e:	bd90      	pop	{r4, r7, pc}
   2f060:	0002db79 	.word	0x0002db79
   2f064:	0002e9d5 	.word	0x0002e9d5
   2f068:	0002eb25 	.word	0x0002eb25
   2f06c:	00034f49 	.word	0x00034f49
   2f070:	0002e4a1 	.word	0x0002e4a1
   2f074:	0002dc5d 	.word	0x0002dc5d
   2f078:	0002e5d1 	.word	0x0002e5d1
   2f07c:	0002ead5 	.word	0x0002ead5
   2f080:	0002e8c5 	.word	0x0002e8c5
   2f084:	0002dbb1 	.word	0x0002dbb1

0002f088 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2f088:	b590      	push	{r4, r7, lr}
   2f08a:	b08b      	sub	sp, #44	; 0x2c
   2f08c:	af00      	add	r7, sp, #0
   2f08e:	6078      	str	r0, [r7, #4]
   2f090:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2f092:	683b      	ldr	r3, [r7, #0]
   2f094:	681b      	ldr	r3, [r3, #0]
   2f096:	613b      	str	r3, [r7, #16]
   2f098:	e002      	b.n	2f0a0 <create_name+0x18>
   2f09a:	693b      	ldr	r3, [r7, #16]
   2f09c:	3301      	adds	r3, #1
   2f09e:	613b      	str	r3, [r7, #16]
   2f0a0:	693b      	ldr	r3, [r7, #16]
   2f0a2:	781b      	ldrb	r3, [r3, #0]
   2f0a4:	2b2f      	cmp	r3, #47	; 0x2f
   2f0a6:	d0f8      	beq.n	2f09a <create_name+0x12>
   2f0a8:	693b      	ldr	r3, [r7, #16]
   2f0aa:	781b      	ldrb	r3, [r3, #0]
   2f0ac:	2b5c      	cmp	r3, #92	; 0x5c
   2f0ae:	d0f4      	beq.n	2f09a <create_name+0x12>
	lfn = dj->lfn;
   2f0b0:	687b      	ldr	r3, [r7, #4]
   2f0b2:	69db      	ldr	r3, [r3, #28]
   2f0b4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2f0b6:	2300      	movs	r3, #0
   2f0b8:	617b      	str	r3, [r7, #20]
   2f0ba:	697b      	ldr	r3, [r7, #20]
   2f0bc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2f0be:	69bb      	ldr	r3, [r7, #24]
   2f0c0:	1c5a      	adds	r2, r3, #1
   2f0c2:	61ba      	str	r2, [r7, #24]
   2f0c4:	693a      	ldr	r2, [r7, #16]
   2f0c6:	18d3      	adds	r3, r2, r3
   2f0c8:	781a      	ldrb	r2, [r3, #0]
   2f0ca:	2324      	movs	r3, #36	; 0x24
   2f0cc:	18fb      	adds	r3, r7, r3
   2f0ce:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2f0d0:	2324      	movs	r3, #36	; 0x24
   2f0d2:	18fb      	adds	r3, r7, r3
   2f0d4:	881b      	ldrh	r3, [r3, #0]
   2f0d6:	2b1f      	cmp	r3, #31
   2f0d8:	d944      	bls.n	2f164 <create_name+0xdc>
   2f0da:	2324      	movs	r3, #36	; 0x24
   2f0dc:	18fb      	adds	r3, r7, r3
   2f0de:	881b      	ldrh	r3, [r3, #0]
   2f0e0:	2b2f      	cmp	r3, #47	; 0x2f
   2f0e2:	d03f      	beq.n	2f164 <create_name+0xdc>
   2f0e4:	2324      	movs	r3, #36	; 0x24
   2f0e6:	18fb      	adds	r3, r7, r3
   2f0e8:	881b      	ldrh	r3, [r3, #0]
   2f0ea:	2b5c      	cmp	r3, #92	; 0x5c
   2f0ec:	d03a      	beq.n	2f164 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2f0ee:	697b      	ldr	r3, [r7, #20]
   2f0f0:	2bfe      	cmp	r3, #254	; 0xfe
   2f0f2:	d901      	bls.n	2f0f8 <create_name+0x70>
			return FR_INVALID_NAME;
   2f0f4:	2306      	movs	r3, #6
   2f0f6:	e1e7      	b.n	2f4c8 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2f0f8:	2324      	movs	r3, #36	; 0x24
   2f0fa:	18fb      	adds	r3, r7, r3
   2f0fc:	2224      	movs	r2, #36	; 0x24
   2f0fe:	18ba      	adds	r2, r7, r2
   2f100:	8812      	ldrh	r2, [r2, #0]
   2f102:	21ff      	movs	r1, #255	; 0xff
   2f104:	400a      	ands	r2, r1
   2f106:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2f108:	2324      	movs	r3, #36	; 0x24
   2f10a:	18fc      	adds	r4, r7, r3
   2f10c:	2324      	movs	r3, #36	; 0x24
   2f10e:	18fb      	adds	r3, r7, r3
   2f110:	881b      	ldrh	r3, [r3, #0]
   2f112:	2101      	movs	r1, #1
   2f114:	0018      	movs	r0, r3
   2f116:	4bba      	ldr	r3, [pc, #744]	; (2f400 <create_name+0x378>)
   2f118:	4798      	blx	r3
   2f11a:	0003      	movs	r3, r0
   2f11c:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2f11e:	2324      	movs	r3, #36	; 0x24
   2f120:	18fb      	adds	r3, r7, r3
   2f122:	881b      	ldrh	r3, [r3, #0]
   2f124:	2b00      	cmp	r3, #0
   2f126:	d101      	bne.n	2f12c <create_name+0xa4>
   2f128:	2306      	movs	r3, #6
   2f12a:	e1cd      	b.n	2f4c8 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2f12c:	2324      	movs	r3, #36	; 0x24
   2f12e:	18fb      	adds	r3, r7, r3
   2f130:	881b      	ldrh	r3, [r3, #0]
   2f132:	2b7f      	cmp	r3, #127	; 0x7f
   2f134:	d80b      	bhi.n	2f14e <create_name+0xc6>
   2f136:	2324      	movs	r3, #36	; 0x24
   2f138:	18fb      	adds	r3, r7, r3
   2f13a:	881a      	ldrh	r2, [r3, #0]
   2f13c:	4bb1      	ldr	r3, [pc, #708]	; (2f404 <create_name+0x37c>)
   2f13e:	0011      	movs	r1, r2
   2f140:	0018      	movs	r0, r3
   2f142:	4bb1      	ldr	r3, [pc, #708]	; (2f408 <create_name+0x380>)
   2f144:	4798      	blx	r3
   2f146:	1e03      	subs	r3, r0, #0
   2f148:	d001      	beq.n	2f14e <create_name+0xc6>
			return FR_INVALID_NAME;
   2f14a:	2306      	movs	r3, #6
   2f14c:	e1bc      	b.n	2f4c8 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2f14e:	697b      	ldr	r3, [r7, #20]
   2f150:	1c5a      	adds	r2, r3, #1
   2f152:	617a      	str	r2, [r7, #20]
   2f154:	005b      	lsls	r3, r3, #1
   2f156:	68fa      	ldr	r2, [r7, #12]
   2f158:	18d3      	adds	r3, r2, r3
   2f15a:	2224      	movs	r2, #36	; 0x24
   2f15c:	18ba      	adds	r2, r7, r2
   2f15e:	8812      	ldrh	r2, [r2, #0]
   2f160:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2f162:	e7ac      	b.n	2f0be <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2f164:	693a      	ldr	r2, [r7, #16]
   2f166:	69bb      	ldr	r3, [r7, #24]
   2f168:	18d2      	adds	r2, r2, r3
   2f16a:	683b      	ldr	r3, [r7, #0]
   2f16c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2f16e:	2324      	movs	r3, #36	; 0x24
   2f170:	18fb      	adds	r3, r7, r3
   2f172:	881b      	ldrh	r3, [r3, #0]
   2f174:	2b1f      	cmp	r3, #31
   2f176:	d801      	bhi.n	2f17c <create_name+0xf4>
   2f178:	2204      	movs	r2, #4
   2f17a:	e000      	b.n	2f17e <create_name+0xf6>
   2f17c:	2200      	movs	r2, #0
   2f17e:	2326      	movs	r3, #38	; 0x26
   2f180:	18fb      	adds	r3, r7, r3
   2f182:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2f184:	e017      	b.n	2f1b6 <create_name+0x12e>
		w = lfn[di-1];
   2f186:	697b      	ldr	r3, [r7, #20]
   2f188:	4aa0      	ldr	r2, [pc, #640]	; (2f40c <create_name+0x384>)
   2f18a:	4694      	mov	ip, r2
   2f18c:	4463      	add	r3, ip
   2f18e:	005b      	lsls	r3, r3, #1
   2f190:	68fa      	ldr	r2, [r7, #12]
   2f192:	18d2      	adds	r2, r2, r3
   2f194:	2324      	movs	r3, #36	; 0x24
   2f196:	18fb      	adds	r3, r7, r3
   2f198:	8812      	ldrh	r2, [r2, #0]
   2f19a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2f19c:	2324      	movs	r3, #36	; 0x24
   2f19e:	18fb      	adds	r3, r7, r3
   2f1a0:	881b      	ldrh	r3, [r3, #0]
   2f1a2:	2b20      	cmp	r3, #32
   2f1a4:	d004      	beq.n	2f1b0 <create_name+0x128>
   2f1a6:	2324      	movs	r3, #36	; 0x24
   2f1a8:	18fb      	adds	r3, r7, r3
   2f1aa:	881b      	ldrh	r3, [r3, #0]
   2f1ac:	2b2e      	cmp	r3, #46	; 0x2e
   2f1ae:	d106      	bne.n	2f1be <create_name+0x136>
		di--;
   2f1b0:	697b      	ldr	r3, [r7, #20]
   2f1b2:	3b01      	subs	r3, #1
   2f1b4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2f1b6:	697b      	ldr	r3, [r7, #20]
   2f1b8:	2b00      	cmp	r3, #0
   2f1ba:	d1e4      	bne.n	2f186 <create_name+0xfe>
   2f1bc:	e000      	b.n	2f1c0 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2f1be:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2f1c0:	697b      	ldr	r3, [r7, #20]
   2f1c2:	2b00      	cmp	r3, #0
   2f1c4:	d101      	bne.n	2f1ca <create_name+0x142>
   2f1c6:	2306      	movs	r3, #6
   2f1c8:	e17e      	b.n	2f4c8 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2f1ca:	697b      	ldr	r3, [r7, #20]
   2f1cc:	005b      	lsls	r3, r3, #1
   2f1ce:	68fa      	ldr	r2, [r7, #12]
   2f1d0:	18d3      	adds	r3, r2, r3
   2f1d2:	2200      	movs	r2, #0
   2f1d4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2f1d6:	687b      	ldr	r3, [r7, #4]
   2f1d8:	699b      	ldr	r3, [r3, #24]
   2f1da:	220b      	movs	r2, #11
   2f1dc:	2120      	movs	r1, #32
   2f1de:	0018      	movs	r0, r3
   2f1e0:	4b8b      	ldr	r3, [pc, #556]	; (2f410 <create_name+0x388>)
   2f1e2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2f1e4:	2300      	movs	r3, #0
   2f1e6:	61bb      	str	r3, [r7, #24]
   2f1e8:	e002      	b.n	2f1f0 <create_name+0x168>
   2f1ea:	69bb      	ldr	r3, [r7, #24]
   2f1ec:	3301      	adds	r3, #1
   2f1ee:	61bb      	str	r3, [r7, #24]
   2f1f0:	69bb      	ldr	r3, [r7, #24]
   2f1f2:	005b      	lsls	r3, r3, #1
   2f1f4:	68fa      	ldr	r2, [r7, #12]
   2f1f6:	18d3      	adds	r3, r2, r3
   2f1f8:	881b      	ldrh	r3, [r3, #0]
   2f1fa:	2b20      	cmp	r3, #32
   2f1fc:	d0f5      	beq.n	2f1ea <create_name+0x162>
   2f1fe:	69bb      	ldr	r3, [r7, #24]
   2f200:	005b      	lsls	r3, r3, #1
   2f202:	68fa      	ldr	r2, [r7, #12]
   2f204:	18d3      	adds	r3, r2, r3
   2f206:	881b      	ldrh	r3, [r3, #0]
   2f208:	2b2e      	cmp	r3, #46	; 0x2e
   2f20a:	d0ee      	beq.n	2f1ea <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2f20c:	69bb      	ldr	r3, [r7, #24]
   2f20e:	2b00      	cmp	r3, #0
   2f210:	d00b      	beq.n	2f22a <create_name+0x1a2>
   2f212:	2326      	movs	r3, #38	; 0x26
   2f214:	18fb      	adds	r3, r7, r3
   2f216:	2226      	movs	r2, #38	; 0x26
   2f218:	18ba      	adds	r2, r7, r2
   2f21a:	7812      	ldrb	r2, [r2, #0]
   2f21c:	2103      	movs	r1, #3
   2f21e:	430a      	orrs	r2, r1
   2f220:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2f222:	e002      	b.n	2f22a <create_name+0x1a2>
   2f224:	697b      	ldr	r3, [r7, #20]
   2f226:	3b01      	subs	r3, #1
   2f228:	617b      	str	r3, [r7, #20]
   2f22a:	697b      	ldr	r3, [r7, #20]
   2f22c:	2b00      	cmp	r3, #0
   2f22e:	d009      	beq.n	2f244 <create_name+0x1bc>
   2f230:	697b      	ldr	r3, [r7, #20]
   2f232:	4a76      	ldr	r2, [pc, #472]	; (2f40c <create_name+0x384>)
   2f234:	4694      	mov	ip, r2
   2f236:	4463      	add	r3, ip
   2f238:	005b      	lsls	r3, r3, #1
   2f23a:	68fa      	ldr	r2, [r7, #12]
   2f23c:	18d3      	adds	r3, r2, r3
   2f23e:	881b      	ldrh	r3, [r3, #0]
   2f240:	2b2e      	cmp	r3, #46	; 0x2e
   2f242:	d1ef      	bne.n	2f224 <create_name+0x19c>

	b = i = 0; ni = 8;
   2f244:	2300      	movs	r3, #0
   2f246:	623b      	str	r3, [r7, #32]
   2f248:	2327      	movs	r3, #39	; 0x27
   2f24a:	18fb      	adds	r3, r7, r3
   2f24c:	2200      	movs	r2, #0
   2f24e:	701a      	strb	r2, [r3, #0]
   2f250:	2308      	movs	r3, #8
   2f252:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2f254:	69bb      	ldr	r3, [r7, #24]
   2f256:	1c5a      	adds	r2, r3, #1
   2f258:	61ba      	str	r2, [r7, #24]
   2f25a:	005b      	lsls	r3, r3, #1
   2f25c:	68fa      	ldr	r2, [r7, #12]
   2f25e:	18d2      	adds	r2, r2, r3
   2f260:	2324      	movs	r3, #36	; 0x24
   2f262:	18fb      	adds	r3, r7, r3
   2f264:	8812      	ldrh	r2, [r2, #0]
   2f266:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2f268:	2324      	movs	r3, #36	; 0x24
   2f26a:	18fb      	adds	r3, r7, r3
   2f26c:	881b      	ldrh	r3, [r3, #0]
   2f26e:	2b00      	cmp	r3, #0
   2f270:	d100      	bne.n	2f274 <create_name+0x1ec>
   2f272:	e0c3      	b.n	2f3fc <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2f274:	2324      	movs	r3, #36	; 0x24
   2f276:	18fb      	adds	r3, r7, r3
   2f278:	881b      	ldrh	r3, [r3, #0]
   2f27a:	2b20      	cmp	r3, #32
   2f27c:	d008      	beq.n	2f290 <create_name+0x208>
   2f27e:	2324      	movs	r3, #36	; 0x24
   2f280:	18fb      	adds	r3, r7, r3
   2f282:	881b      	ldrh	r3, [r3, #0]
   2f284:	2b2e      	cmp	r3, #46	; 0x2e
   2f286:	d10c      	bne.n	2f2a2 <create_name+0x21a>
   2f288:	69ba      	ldr	r2, [r7, #24]
   2f28a:	697b      	ldr	r3, [r7, #20]
   2f28c:	429a      	cmp	r2, r3
   2f28e:	d008      	beq.n	2f2a2 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2f290:	2326      	movs	r3, #38	; 0x26
   2f292:	18fb      	adds	r3, r7, r3
   2f294:	2226      	movs	r2, #38	; 0x26
   2f296:	18ba      	adds	r2, r7, r2
   2f298:	7812      	ldrb	r2, [r2, #0]
   2f29a:	2103      	movs	r1, #3
   2f29c:	430a      	orrs	r2, r1
   2f29e:	701a      	strb	r2, [r3, #0]
   2f2a0:	e0ab      	b.n	2f3fa <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2f2a2:	6a3a      	ldr	r2, [r7, #32]
   2f2a4:	69fb      	ldr	r3, [r7, #28]
   2f2a6:	429a      	cmp	r2, r3
   2f2a8:	d203      	bcs.n	2f2b2 <create_name+0x22a>
   2f2aa:	69ba      	ldr	r2, [r7, #24]
   2f2ac:	697b      	ldr	r3, [r7, #20]
   2f2ae:	429a      	cmp	r2, r3
   2f2b0:	d12a      	bne.n	2f308 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2f2b2:	69fb      	ldr	r3, [r7, #28]
   2f2b4:	2b0b      	cmp	r3, #11
   2f2b6:	d108      	bne.n	2f2ca <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2f2b8:	2326      	movs	r3, #38	; 0x26
   2f2ba:	18fb      	adds	r3, r7, r3
   2f2bc:	2226      	movs	r2, #38	; 0x26
   2f2be:	18ba      	adds	r2, r7, r2
   2f2c0:	7812      	ldrb	r2, [r2, #0]
   2f2c2:	2103      	movs	r1, #3
   2f2c4:	430a      	orrs	r2, r1
   2f2c6:	701a      	strb	r2, [r3, #0]
   2f2c8:	e0a9      	b.n	2f41e <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2f2ca:	69ba      	ldr	r2, [r7, #24]
   2f2cc:	697b      	ldr	r3, [r7, #20]
   2f2ce:	429a      	cmp	r2, r3
   2f2d0:	d007      	beq.n	2f2e2 <create_name+0x25a>
   2f2d2:	2326      	movs	r3, #38	; 0x26
   2f2d4:	18fb      	adds	r3, r7, r3
   2f2d6:	2226      	movs	r2, #38	; 0x26
   2f2d8:	18ba      	adds	r2, r7, r2
   2f2da:	7812      	ldrb	r2, [r2, #0]
   2f2dc:	2103      	movs	r1, #3
   2f2de:	430a      	orrs	r2, r1
   2f2e0:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2f2e2:	69ba      	ldr	r2, [r7, #24]
   2f2e4:	697b      	ldr	r3, [r7, #20]
   2f2e6:	429a      	cmp	r2, r3
   2f2e8:	d900      	bls.n	2f2ec <create_name+0x264>
   2f2ea:	e097      	b.n	2f41c <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2f2ec:	697b      	ldr	r3, [r7, #20]
   2f2ee:	61bb      	str	r3, [r7, #24]
   2f2f0:	2308      	movs	r3, #8
   2f2f2:	623b      	str	r3, [r7, #32]
   2f2f4:	230b      	movs	r3, #11
   2f2f6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2f2f8:	2327      	movs	r3, #39	; 0x27
   2f2fa:	18fb      	adds	r3, r7, r3
   2f2fc:	2227      	movs	r2, #39	; 0x27
   2f2fe:	18ba      	adds	r2, r7, r2
   2f300:	7812      	ldrb	r2, [r2, #0]
   2f302:	0092      	lsls	r2, r2, #2
   2f304:	701a      	strb	r2, [r3, #0]
   2f306:	e078      	b.n	2f3fa <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2f308:	2324      	movs	r3, #36	; 0x24
   2f30a:	18fb      	adds	r3, r7, r3
   2f30c:	881b      	ldrh	r3, [r3, #0]
   2f30e:	2b7f      	cmp	r3, #127	; 0x7f
   2f310:	d920      	bls.n	2f354 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2f312:	2324      	movs	r3, #36	; 0x24
   2f314:	18fc      	adds	r4, r7, r3
   2f316:	2324      	movs	r3, #36	; 0x24
   2f318:	18fb      	adds	r3, r7, r3
   2f31a:	881b      	ldrh	r3, [r3, #0]
   2f31c:	2100      	movs	r1, #0
   2f31e:	0018      	movs	r0, r3
   2f320:	4b37      	ldr	r3, [pc, #220]	; (2f400 <create_name+0x378>)
   2f322:	4798      	blx	r3
   2f324:	0003      	movs	r3, r0
   2f326:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2f328:	2324      	movs	r3, #36	; 0x24
   2f32a:	18fb      	adds	r3, r7, r3
   2f32c:	881b      	ldrh	r3, [r3, #0]
   2f32e:	2b00      	cmp	r3, #0
   2f330:	d008      	beq.n	2f344 <create_name+0x2bc>
   2f332:	2324      	movs	r3, #36	; 0x24
   2f334:	18fb      	adds	r3, r7, r3
   2f336:	881b      	ldrh	r3, [r3, #0]
   2f338:	3b80      	subs	r3, #128	; 0x80
   2f33a:	4a36      	ldr	r2, [pc, #216]	; (2f414 <create_name+0x38c>)
   2f33c:	5cd2      	ldrb	r2, [r2, r3]
   2f33e:	2324      	movs	r3, #36	; 0x24
   2f340:	18fb      	adds	r3, r7, r3
   2f342:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2f344:	2326      	movs	r3, #38	; 0x26
   2f346:	18fb      	adds	r3, r7, r3
   2f348:	2226      	movs	r2, #38	; 0x26
   2f34a:	18ba      	adds	r2, r7, r2
   2f34c:	7812      	ldrb	r2, [r2, #0]
   2f34e:	2102      	movs	r1, #2
   2f350:	430a      	orrs	r2, r1
   2f352:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2f354:	2324      	movs	r3, #36	; 0x24
   2f356:	18fb      	adds	r3, r7, r3
   2f358:	881b      	ldrh	r3, [r3, #0]
   2f35a:	2b00      	cmp	r3, #0
   2f35c:	d009      	beq.n	2f372 <create_name+0x2ea>
   2f35e:	2324      	movs	r3, #36	; 0x24
   2f360:	18fb      	adds	r3, r7, r3
   2f362:	881a      	ldrh	r2, [r3, #0]
   2f364:	4b2c      	ldr	r3, [pc, #176]	; (2f418 <create_name+0x390>)
   2f366:	0011      	movs	r1, r2
   2f368:	0018      	movs	r0, r3
   2f36a:	4b27      	ldr	r3, [pc, #156]	; (2f408 <create_name+0x380>)
   2f36c:	4798      	blx	r3
   2f36e:	1e03      	subs	r3, r0, #0
   2f370:	d00c      	beq.n	2f38c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2f372:	2324      	movs	r3, #36	; 0x24
   2f374:	18fb      	adds	r3, r7, r3
   2f376:	225f      	movs	r2, #95	; 0x5f
   2f378:	801a      	strh	r2, [r3, #0]
   2f37a:	2326      	movs	r3, #38	; 0x26
   2f37c:	18fb      	adds	r3, r7, r3
   2f37e:	2226      	movs	r2, #38	; 0x26
   2f380:	18ba      	adds	r2, r7, r2
   2f382:	7812      	ldrb	r2, [r2, #0]
   2f384:	2103      	movs	r1, #3
   2f386:	430a      	orrs	r2, r1
   2f388:	701a      	strb	r2, [r3, #0]
   2f38a:	e02b      	b.n	2f3e4 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2f38c:	2324      	movs	r3, #36	; 0x24
   2f38e:	18fb      	adds	r3, r7, r3
   2f390:	881b      	ldrh	r3, [r3, #0]
   2f392:	2b40      	cmp	r3, #64	; 0x40
   2f394:	d90d      	bls.n	2f3b2 <create_name+0x32a>
   2f396:	2324      	movs	r3, #36	; 0x24
   2f398:	18fb      	adds	r3, r7, r3
   2f39a:	881b      	ldrh	r3, [r3, #0]
   2f39c:	2b5a      	cmp	r3, #90	; 0x5a
   2f39e:	d808      	bhi.n	2f3b2 <create_name+0x32a>
					b |= 2;
   2f3a0:	2327      	movs	r3, #39	; 0x27
   2f3a2:	18fb      	adds	r3, r7, r3
   2f3a4:	2227      	movs	r2, #39	; 0x27
   2f3a6:	18ba      	adds	r2, r7, r2
   2f3a8:	7812      	ldrb	r2, [r2, #0]
   2f3aa:	2102      	movs	r1, #2
   2f3ac:	430a      	orrs	r2, r1
   2f3ae:	701a      	strb	r2, [r3, #0]
   2f3b0:	e018      	b.n	2f3e4 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2f3b2:	2324      	movs	r3, #36	; 0x24
   2f3b4:	18fb      	adds	r3, r7, r3
   2f3b6:	881b      	ldrh	r3, [r3, #0]
   2f3b8:	2b60      	cmp	r3, #96	; 0x60
   2f3ba:	d913      	bls.n	2f3e4 <create_name+0x35c>
   2f3bc:	2324      	movs	r3, #36	; 0x24
   2f3be:	18fb      	adds	r3, r7, r3
   2f3c0:	881b      	ldrh	r3, [r3, #0]
   2f3c2:	2b7a      	cmp	r3, #122	; 0x7a
   2f3c4:	d80e      	bhi.n	2f3e4 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2f3c6:	2327      	movs	r3, #39	; 0x27
   2f3c8:	18fb      	adds	r3, r7, r3
   2f3ca:	2227      	movs	r2, #39	; 0x27
   2f3cc:	18ba      	adds	r2, r7, r2
   2f3ce:	7812      	ldrb	r2, [r2, #0]
   2f3d0:	2101      	movs	r1, #1
   2f3d2:	430a      	orrs	r2, r1
   2f3d4:	701a      	strb	r2, [r3, #0]
   2f3d6:	2324      	movs	r3, #36	; 0x24
   2f3d8:	18fb      	adds	r3, r7, r3
   2f3da:	2224      	movs	r2, #36	; 0x24
   2f3dc:	18ba      	adds	r2, r7, r2
   2f3de:	8812      	ldrh	r2, [r2, #0]
   2f3e0:	3a20      	subs	r2, #32
   2f3e2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2f3e4:	687b      	ldr	r3, [r7, #4]
   2f3e6:	699a      	ldr	r2, [r3, #24]
   2f3e8:	6a3b      	ldr	r3, [r7, #32]
   2f3ea:	1c59      	adds	r1, r3, #1
   2f3ec:	6239      	str	r1, [r7, #32]
   2f3ee:	18d3      	adds	r3, r2, r3
   2f3f0:	2224      	movs	r2, #36	; 0x24
   2f3f2:	18ba      	adds	r2, r7, r2
   2f3f4:	8812      	ldrh	r2, [r2, #0]
   2f3f6:	b2d2      	uxtb	r2, r2
   2f3f8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2f3fa:	e72b      	b.n	2f254 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2f3fc:	46c0      	nop			; (mov r8, r8)
   2f3fe:	e00e      	b.n	2f41e <create_name+0x396>
   2f400:	000307c1 	.word	0x000307c1
   2f404:	0003c8bc 	.word	0x0003c8bc
   2f408:	0002dc2b 	.word	0x0002dc2b
   2f40c:	7fffffff 	.word	0x7fffffff
   2f410:	0002dbb1 	.word	0x0002dbb1
   2f414:	0003c904 	.word	0x0003c904
   2f418:	0003c8c8 	.word	0x0003c8c8
			if (si > di) break;			/* No extension */
   2f41c:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2f41e:	687b      	ldr	r3, [r7, #4]
   2f420:	699b      	ldr	r3, [r3, #24]
   2f422:	781b      	ldrb	r3, [r3, #0]
   2f424:	2be5      	cmp	r3, #229	; 0xe5
   2f426:	d103      	bne.n	2f430 <create_name+0x3a8>
   2f428:	687b      	ldr	r3, [r7, #4]
   2f42a:	699b      	ldr	r3, [r3, #24]
   2f42c:	2205      	movs	r2, #5
   2f42e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2f430:	69fb      	ldr	r3, [r7, #28]
   2f432:	2b08      	cmp	r3, #8
   2f434:	d106      	bne.n	2f444 <create_name+0x3bc>
   2f436:	2327      	movs	r3, #39	; 0x27
   2f438:	18fb      	adds	r3, r7, r3
   2f43a:	2227      	movs	r2, #39	; 0x27
   2f43c:	18ba      	adds	r2, r7, r2
   2f43e:	7812      	ldrb	r2, [r2, #0]
   2f440:	0092      	lsls	r2, r2, #2
   2f442:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2f444:	2327      	movs	r3, #39	; 0x27
   2f446:	18fb      	adds	r3, r7, r3
   2f448:	781b      	ldrb	r3, [r3, #0]
   2f44a:	220c      	movs	r2, #12
   2f44c:	4013      	ands	r3, r2
   2f44e:	2b0c      	cmp	r3, #12
   2f450:	d006      	beq.n	2f460 <create_name+0x3d8>
   2f452:	2327      	movs	r3, #39	; 0x27
   2f454:	18fb      	adds	r3, r7, r3
   2f456:	781b      	ldrb	r3, [r3, #0]
   2f458:	2203      	movs	r2, #3
   2f45a:	4013      	ands	r3, r2
   2f45c:	2b03      	cmp	r3, #3
   2f45e:	d107      	bne.n	2f470 <create_name+0x3e8>
		cf |= NS_LFN;
   2f460:	2326      	movs	r3, #38	; 0x26
   2f462:	18fb      	adds	r3, r7, r3
   2f464:	2226      	movs	r2, #38	; 0x26
   2f466:	18ba      	adds	r2, r7, r2
   2f468:	7812      	ldrb	r2, [r2, #0]
   2f46a:	2102      	movs	r1, #2
   2f46c:	430a      	orrs	r2, r1
   2f46e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2f470:	2326      	movs	r3, #38	; 0x26
   2f472:	18fb      	adds	r3, r7, r3
   2f474:	781b      	ldrb	r3, [r3, #0]
   2f476:	2202      	movs	r2, #2
   2f478:	4013      	ands	r3, r2
   2f47a:	d11d      	bne.n	2f4b8 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2f47c:	2327      	movs	r3, #39	; 0x27
   2f47e:	18fb      	adds	r3, r7, r3
   2f480:	781b      	ldrb	r3, [r3, #0]
   2f482:	2203      	movs	r2, #3
   2f484:	4013      	ands	r3, r2
   2f486:	2b01      	cmp	r3, #1
   2f488:	d107      	bne.n	2f49a <create_name+0x412>
   2f48a:	2326      	movs	r3, #38	; 0x26
   2f48c:	18fb      	adds	r3, r7, r3
   2f48e:	2226      	movs	r2, #38	; 0x26
   2f490:	18ba      	adds	r2, r7, r2
   2f492:	7812      	ldrb	r2, [r2, #0]
   2f494:	2110      	movs	r1, #16
   2f496:	430a      	orrs	r2, r1
   2f498:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2f49a:	2327      	movs	r3, #39	; 0x27
   2f49c:	18fb      	adds	r3, r7, r3
   2f49e:	781b      	ldrb	r3, [r3, #0]
   2f4a0:	220c      	movs	r2, #12
   2f4a2:	4013      	ands	r3, r2
   2f4a4:	2b04      	cmp	r3, #4
   2f4a6:	d107      	bne.n	2f4b8 <create_name+0x430>
   2f4a8:	2326      	movs	r3, #38	; 0x26
   2f4aa:	18fb      	adds	r3, r7, r3
   2f4ac:	2226      	movs	r2, #38	; 0x26
   2f4ae:	18ba      	adds	r2, r7, r2
   2f4b0:	7812      	ldrb	r2, [r2, #0]
   2f4b2:	2108      	movs	r1, #8
   2f4b4:	430a      	orrs	r2, r1
   2f4b6:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2f4b8:	687b      	ldr	r3, [r7, #4]
   2f4ba:	699b      	ldr	r3, [r3, #24]
   2f4bc:	330b      	adds	r3, #11
   2f4be:	2226      	movs	r2, #38	; 0x26
   2f4c0:	18ba      	adds	r2, r7, r2
   2f4c2:	7812      	ldrb	r2, [r2, #0]
   2f4c4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2f4c6:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2f4c8:	0018      	movs	r0, r3
   2f4ca:	46bd      	mov	sp, r7
   2f4cc:	b00b      	add	sp, #44	; 0x2c
   2f4ce:	bd90      	pop	{r4, r7, pc}

0002f4d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2f4d0:	b590      	push	{r4, r7, lr}
   2f4d2:	b085      	sub	sp, #20
   2f4d4:	af00      	add	r7, sp, #0
   2f4d6:	6078      	str	r0, [r7, #4]
   2f4d8:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2f4da:	683b      	ldr	r3, [r7, #0]
   2f4dc:	781b      	ldrb	r3, [r3, #0]
   2f4de:	2b2f      	cmp	r3, #47	; 0x2f
   2f4e0:	d003      	beq.n	2f4ea <follow_path+0x1a>
   2f4e2:	683b      	ldr	r3, [r7, #0]
   2f4e4:	781b      	ldrb	r3, [r3, #0]
   2f4e6:	2b5c      	cmp	r3, #92	; 0x5c
   2f4e8:	d102      	bne.n	2f4f0 <follow_path+0x20>
		path++;
   2f4ea:	683b      	ldr	r3, [r7, #0]
   2f4ec:	3301      	adds	r3, #1
   2f4ee:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2f4f0:	687b      	ldr	r3, [r7, #4]
   2f4f2:	2200      	movs	r2, #0
   2f4f4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2f4f6:	683b      	ldr	r3, [r7, #0]
   2f4f8:	781b      	ldrb	r3, [r3, #0]
   2f4fa:	2b1f      	cmp	r3, #31
   2f4fc:	d80c      	bhi.n	2f518 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2f4fe:	230f      	movs	r3, #15
   2f500:	18fc      	adds	r4, r7, r3
   2f502:	687b      	ldr	r3, [r7, #4]
   2f504:	2100      	movs	r1, #0
   2f506:	0018      	movs	r0, r3
   2f508:	4b3c      	ldr	r3, [pc, #240]	; (2f5fc <follow_path+0x12c>)
   2f50a:	4798      	blx	r3
   2f50c:	0003      	movs	r3, r0
   2f50e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2f510:	687b      	ldr	r3, [r7, #4]
   2f512:	2200      	movs	r2, #0
   2f514:	615a      	str	r2, [r3, #20]
   2f516:	e06a      	b.n	2f5ee <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2f518:	230f      	movs	r3, #15
   2f51a:	18fc      	adds	r4, r7, r3
   2f51c:	003a      	movs	r2, r7
   2f51e:	687b      	ldr	r3, [r7, #4]
   2f520:	0011      	movs	r1, r2
   2f522:	0018      	movs	r0, r3
   2f524:	4b36      	ldr	r3, [pc, #216]	; (2f600 <follow_path+0x130>)
   2f526:	4798      	blx	r3
   2f528:	0003      	movs	r3, r0
   2f52a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2f52c:	230f      	movs	r3, #15
   2f52e:	18fb      	adds	r3, r7, r3
   2f530:	781b      	ldrb	r3, [r3, #0]
   2f532:	2b00      	cmp	r3, #0
   2f534:	d154      	bne.n	2f5e0 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2f536:	230f      	movs	r3, #15
   2f538:	18fc      	adds	r4, r7, r3
   2f53a:	687b      	ldr	r3, [r7, #4]
   2f53c:	0018      	movs	r0, r3
   2f53e:	4b31      	ldr	r3, [pc, #196]	; (2f604 <follow_path+0x134>)
   2f540:	4798      	blx	r3
   2f542:	0003      	movs	r3, r0
   2f544:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2f546:	687b      	ldr	r3, [r7, #4]
   2f548:	699a      	ldr	r2, [r3, #24]
   2f54a:	230e      	movs	r3, #14
   2f54c:	18fb      	adds	r3, r7, r3
   2f54e:	7ad2      	ldrb	r2, [r2, #11]
   2f550:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2f552:	230f      	movs	r3, #15
   2f554:	18fb      	adds	r3, r7, r3
   2f556:	781b      	ldrb	r3, [r3, #0]
   2f558:	2b00      	cmp	r3, #0
   2f55a:	d00f      	beq.n	2f57c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2f55c:	230f      	movs	r3, #15
   2f55e:	18fb      	adds	r3, r7, r3
   2f560:	781b      	ldrb	r3, [r3, #0]
   2f562:	2b04      	cmp	r3, #4
   2f564:	d13e      	bne.n	2f5e4 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2f566:	230e      	movs	r3, #14
   2f568:	18fb      	adds	r3, r7, r3
   2f56a:	781b      	ldrb	r3, [r3, #0]
   2f56c:	2204      	movs	r2, #4
   2f56e:	4013      	ands	r3, r2
   2f570:	d13a      	bne.n	2f5e8 <follow_path+0x118>
   2f572:	230f      	movs	r3, #15
   2f574:	18fb      	adds	r3, r7, r3
   2f576:	2205      	movs	r2, #5
   2f578:	701a      	strb	r2, [r3, #0]
				}
				break;
   2f57a:	e035      	b.n	2f5e8 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2f57c:	230e      	movs	r3, #14
   2f57e:	18fb      	adds	r3, r7, r3
   2f580:	781b      	ldrb	r3, [r3, #0]
   2f582:	2204      	movs	r2, #4
   2f584:	4013      	ands	r3, r2
   2f586:	d131      	bne.n	2f5ec <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2f588:	687b      	ldr	r3, [r7, #4]
   2f58a:	695b      	ldr	r3, [r3, #20]
   2f58c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2f58e:	68bb      	ldr	r3, [r7, #8]
   2f590:	330b      	adds	r3, #11
   2f592:	781b      	ldrb	r3, [r3, #0]
   2f594:	001a      	movs	r2, r3
   2f596:	2310      	movs	r3, #16
   2f598:	4013      	ands	r3, r2
   2f59a:	d104      	bne.n	2f5a6 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2f59c:	230f      	movs	r3, #15
   2f59e:	18fb      	adds	r3, r7, r3
   2f5a0:	2205      	movs	r2, #5
   2f5a2:	701a      	strb	r2, [r3, #0]
   2f5a4:	e023      	b.n	2f5ee <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2f5a6:	68bb      	ldr	r3, [r7, #8]
   2f5a8:	3315      	adds	r3, #21
   2f5aa:	781b      	ldrb	r3, [r3, #0]
   2f5ac:	021b      	lsls	r3, r3, #8
   2f5ae:	b21a      	sxth	r2, r3
   2f5b0:	68bb      	ldr	r3, [r7, #8]
   2f5b2:	3314      	adds	r3, #20
   2f5b4:	781b      	ldrb	r3, [r3, #0]
   2f5b6:	b21b      	sxth	r3, r3
   2f5b8:	4313      	orrs	r3, r2
   2f5ba:	b21b      	sxth	r3, r3
   2f5bc:	b29b      	uxth	r3, r3
   2f5be:	041b      	lsls	r3, r3, #16
   2f5c0:	68ba      	ldr	r2, [r7, #8]
   2f5c2:	321b      	adds	r2, #27
   2f5c4:	7812      	ldrb	r2, [r2, #0]
   2f5c6:	0212      	lsls	r2, r2, #8
   2f5c8:	b211      	sxth	r1, r2
   2f5ca:	68ba      	ldr	r2, [r7, #8]
   2f5cc:	321a      	adds	r2, #26
   2f5ce:	7812      	ldrb	r2, [r2, #0]
   2f5d0:	b212      	sxth	r2, r2
   2f5d2:	430a      	orrs	r2, r1
   2f5d4:	b212      	sxth	r2, r2
   2f5d6:	b292      	uxth	r2, r2
   2f5d8:	431a      	orrs	r2, r3
   2f5da:	687b      	ldr	r3, [r7, #4]
   2f5dc:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2f5de:	e79b      	b.n	2f518 <follow_path+0x48>
			if (res != FR_OK) break;
   2f5e0:	46c0      	nop			; (mov r8, r8)
   2f5e2:	e004      	b.n	2f5ee <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2f5e4:	46c0      	nop			; (mov r8, r8)
   2f5e6:	e002      	b.n	2f5ee <follow_path+0x11e>
				break;
   2f5e8:	46c0      	nop			; (mov r8, r8)
   2f5ea:	e000      	b.n	2f5ee <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2f5ec:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2f5ee:	230f      	movs	r3, #15
   2f5f0:	18fb      	adds	r3, r7, r3
   2f5f2:	781b      	ldrb	r3, [r3, #0]
}
   2f5f4:	0018      	movs	r0, r3
   2f5f6:	46bd      	mov	sp, r7
   2f5f8:	b005      	add	sp, #20
   2f5fa:	bd90      	pop	{r4, r7, pc}
   2f5fc:	0002e4a1 	.word	0x0002e4a1
   2f600:	0002f089 	.word	0x0002f089
   2f604:	0002eb25 	.word	0x0002eb25

0002f608 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2f608:	b590      	push	{r4, r7, lr}
   2f60a:	b083      	sub	sp, #12
   2f60c:	af00      	add	r7, sp, #0
   2f60e:	6078      	str	r0, [r7, #4]
   2f610:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2f612:	687b      	ldr	r3, [r7, #4]
   2f614:	7858      	ldrb	r0, [r3, #1]
   2f616:	687b      	ldr	r3, [r7, #4]
   2f618:	3330      	adds	r3, #48	; 0x30
   2f61a:	0019      	movs	r1, r3
   2f61c:	683a      	ldr	r2, [r7, #0]
   2f61e:	2301      	movs	r3, #1
   2f620:	4c2a      	ldr	r4, [pc, #168]	; (2f6cc <check_fs+0xc4>)
   2f622:	47a0      	blx	r4
   2f624:	1e03      	subs	r3, r0, #0
   2f626:	d001      	beq.n	2f62c <check_fs+0x24>
		return 3;
   2f628:	2303      	movs	r3, #3
   2f62a:	e04b      	b.n	2f6c4 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2f62c:	687b      	ldr	r3, [r7, #4]
   2f62e:	4a28      	ldr	r2, [pc, #160]	; (2f6d0 <check_fs+0xc8>)
   2f630:	4694      	mov	ip, r2
   2f632:	4463      	add	r3, ip
   2f634:	3301      	adds	r3, #1
   2f636:	781b      	ldrb	r3, [r3, #0]
   2f638:	021b      	lsls	r3, r3, #8
   2f63a:	b21a      	sxth	r2, r3
   2f63c:	687b      	ldr	r3, [r7, #4]
   2f63e:	4924      	ldr	r1, [pc, #144]	; (2f6d0 <check_fs+0xc8>)
   2f640:	5c5b      	ldrb	r3, [r3, r1]
   2f642:	b21b      	sxth	r3, r3
   2f644:	4313      	orrs	r3, r2
   2f646:	b21b      	sxth	r3, r3
   2f648:	4a22      	ldr	r2, [pc, #136]	; (2f6d4 <check_fs+0xcc>)
   2f64a:	4293      	cmp	r3, r2
   2f64c:	d001      	beq.n	2f652 <check_fs+0x4a>
		return 2;
   2f64e:	2302      	movs	r3, #2
   2f650:	e038      	b.n	2f6c4 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2f652:	687b      	ldr	r3, [r7, #4]
   2f654:	3366      	adds	r3, #102	; 0x66
   2f656:	3303      	adds	r3, #3
   2f658:	781b      	ldrb	r3, [r3, #0]
   2f65a:	061a      	lsls	r2, r3, #24
   2f65c:	687b      	ldr	r3, [r7, #4]
   2f65e:	3366      	adds	r3, #102	; 0x66
   2f660:	3302      	adds	r3, #2
   2f662:	781b      	ldrb	r3, [r3, #0]
   2f664:	041b      	lsls	r3, r3, #16
   2f666:	4313      	orrs	r3, r2
   2f668:	687a      	ldr	r2, [r7, #4]
   2f66a:	3266      	adds	r2, #102	; 0x66
   2f66c:	3201      	adds	r2, #1
   2f66e:	7812      	ldrb	r2, [r2, #0]
   2f670:	0212      	lsls	r2, r2, #8
   2f672:	4313      	orrs	r3, r2
   2f674:	687a      	ldr	r2, [r7, #4]
   2f676:	2166      	movs	r1, #102	; 0x66
   2f678:	5c52      	ldrb	r2, [r2, r1]
   2f67a:	4313      	orrs	r3, r2
   2f67c:	021b      	lsls	r3, r3, #8
   2f67e:	0a1b      	lsrs	r3, r3, #8
   2f680:	4a15      	ldr	r2, [pc, #84]	; (2f6d8 <check_fs+0xd0>)
   2f682:	4293      	cmp	r3, r2
   2f684:	d101      	bne.n	2f68a <check_fs+0x82>
		return 0;
   2f686:	2300      	movs	r3, #0
   2f688:	e01c      	b.n	2f6c4 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2f68a:	687b      	ldr	r3, [r7, #4]
   2f68c:	3382      	adds	r3, #130	; 0x82
   2f68e:	3303      	adds	r3, #3
   2f690:	781b      	ldrb	r3, [r3, #0]
   2f692:	061a      	lsls	r2, r3, #24
   2f694:	687b      	ldr	r3, [r7, #4]
   2f696:	3382      	adds	r3, #130	; 0x82
   2f698:	3302      	adds	r3, #2
   2f69a:	781b      	ldrb	r3, [r3, #0]
   2f69c:	041b      	lsls	r3, r3, #16
   2f69e:	4313      	orrs	r3, r2
   2f6a0:	687a      	ldr	r2, [r7, #4]
   2f6a2:	3282      	adds	r2, #130	; 0x82
   2f6a4:	3201      	adds	r2, #1
   2f6a6:	7812      	ldrb	r2, [r2, #0]
   2f6a8:	0212      	lsls	r2, r2, #8
   2f6aa:	4313      	orrs	r3, r2
   2f6ac:	687a      	ldr	r2, [r7, #4]
   2f6ae:	2182      	movs	r1, #130	; 0x82
   2f6b0:	5c52      	ldrb	r2, [r2, r1]
   2f6b2:	4313      	orrs	r3, r2
   2f6b4:	021b      	lsls	r3, r3, #8
   2f6b6:	0a1b      	lsrs	r3, r3, #8
   2f6b8:	4a07      	ldr	r2, [pc, #28]	; (2f6d8 <check_fs+0xd0>)
   2f6ba:	4293      	cmp	r3, r2
   2f6bc:	d101      	bne.n	2f6c2 <check_fs+0xba>
		return 0;
   2f6be:	2300      	movs	r3, #0
   2f6c0:	e000      	b.n	2f6c4 <check_fs+0xbc>

	return 1;
   2f6c2:	2301      	movs	r3, #1
}
   2f6c4:	0018      	movs	r0, r3
   2f6c6:	46bd      	mov	sp, r7
   2f6c8:	b003      	add	sp, #12
   2f6ca:	bd90      	pop	{r4, r7, pc}
   2f6cc:	0002d871 	.word	0x0002d871
   2f6d0:	0000022e 	.word	0x0000022e
   2f6d4:	ffffaa55 	.word	0xffffaa55
   2f6d8:	00544146 	.word	0x00544146

0002f6dc <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2f6dc:	b590      	push	{r4, r7, lr}
   2f6de:	b093      	sub	sp, #76	; 0x4c
   2f6e0:	af00      	add	r7, sp, #0
   2f6e2:	60f8      	str	r0, [r7, #12]
   2f6e4:	60b9      	str	r1, [r7, #8]
   2f6e6:	1dfb      	adds	r3, r7, #7
   2f6e8:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2f6ea:	68fb      	ldr	r3, [r7, #12]
   2f6ec:	681b      	ldr	r3, [r3, #0]
   2f6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f6f2:	781b      	ldrb	r3, [r3, #0]
   2f6f4:	3b30      	subs	r3, #48	; 0x30
   2f6f6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2f6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f6fa:	2b09      	cmp	r3, #9
   2f6fc:	d80b      	bhi.n	2f716 <chk_mounted+0x3a>
   2f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f700:	3301      	adds	r3, #1
   2f702:	781b      	ldrb	r3, [r3, #0]
   2f704:	2b3a      	cmp	r3, #58	; 0x3a
   2f706:	d106      	bne.n	2f716 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2f708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f70a:	3302      	adds	r3, #2
   2f70c:	62fb      	str	r3, [r7, #44]	; 0x2c
   2f70e:	68fb      	ldr	r3, [r7, #12]
   2f710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2f712:	601a      	str	r2, [r3, #0]
   2f714:	e001      	b.n	2f71a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2f716:	2300      	movs	r3, #0
   2f718:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2f71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f71c:	2b07      	cmp	r3, #7
   2f71e:	d901      	bls.n	2f724 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2f720:	230b      	movs	r3, #11
   2f722:	e2af      	b.n	2fc84 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2f724:	4bc5      	ldr	r3, [pc, #788]	; (2fa3c <chk_mounted+0x360>)
   2f726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2f728:	0092      	lsls	r2, r2, #2
   2f72a:	58d3      	ldr	r3, [r2, r3]
   2f72c:	62bb      	str	r3, [r7, #40]	; 0x28
   2f72e:	68bb      	ldr	r3, [r7, #8]
   2f730:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f732:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2f734:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f736:	2b00      	cmp	r3, #0
   2f738:	d101      	bne.n	2f73e <chk_mounted+0x62>
   2f73a:	230c      	movs	r3, #12
   2f73c:	e2a2      	b.n	2fc84 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2f73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f740:	781b      	ldrb	r3, [r3, #0]
   2f742:	2b00      	cmp	r3, #0
   2f744:	d01c      	beq.n	2f780 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f748:	785b      	ldrb	r3, [r3, #1]
   2f74a:	2227      	movs	r2, #39	; 0x27
   2f74c:	18bc      	adds	r4, r7, r2
   2f74e:	0018      	movs	r0, r3
   2f750:	4bbb      	ldr	r3, [pc, #748]	; (2fa40 <chk_mounted+0x364>)
   2f752:	4798      	blx	r3
   2f754:	0003      	movs	r3, r0
   2f756:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2f758:	2327      	movs	r3, #39	; 0x27
   2f75a:	18fb      	adds	r3, r7, r3
   2f75c:	781b      	ldrb	r3, [r3, #0]
   2f75e:	2201      	movs	r2, #1
   2f760:	4013      	ands	r3, r2
   2f762:	d10d      	bne.n	2f780 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2f764:	1dfb      	adds	r3, r7, #7
   2f766:	781b      	ldrb	r3, [r3, #0]
   2f768:	2b00      	cmp	r3, #0
   2f76a:	d007      	beq.n	2f77c <chk_mounted+0xa0>
   2f76c:	2327      	movs	r3, #39	; 0x27
   2f76e:	18fb      	adds	r3, r7, r3
   2f770:	781b      	ldrb	r3, [r3, #0]
   2f772:	2204      	movs	r2, #4
   2f774:	4013      	ands	r3, r2
   2f776:	d001      	beq.n	2f77c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2f778:	230a      	movs	r3, #10
   2f77a:	e283      	b.n	2fc84 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2f77c:	2300      	movs	r3, #0
   2f77e:	e281      	b.n	2fc84 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f782:	2200      	movs	r2, #0
   2f784:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2f786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f788:	b2da      	uxtb	r2, r3
   2f78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f78c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2f78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f790:	785b      	ldrb	r3, [r3, #1]
   2f792:	2227      	movs	r2, #39	; 0x27
   2f794:	18bc      	adds	r4, r7, r2
   2f796:	0018      	movs	r0, r3
   2f798:	4baa      	ldr	r3, [pc, #680]	; (2fa44 <chk_mounted+0x368>)
   2f79a:	4798      	blx	r3
   2f79c:	0003      	movs	r3, r0
   2f79e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2f7a0:	2327      	movs	r3, #39	; 0x27
   2f7a2:	18fb      	adds	r3, r7, r3
   2f7a4:	781b      	ldrb	r3, [r3, #0]
   2f7a6:	2201      	movs	r2, #1
   2f7a8:	4013      	ands	r3, r2
   2f7aa:	d001      	beq.n	2f7b0 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2f7ac:	2303      	movs	r3, #3
   2f7ae:	e269      	b.n	2fc84 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2f7b0:	1dfb      	adds	r3, r7, #7
   2f7b2:	781b      	ldrb	r3, [r3, #0]
   2f7b4:	2b00      	cmp	r3, #0
   2f7b6:	d007      	beq.n	2f7c8 <chk_mounted+0xec>
   2f7b8:	2327      	movs	r3, #39	; 0x27
   2f7ba:	18fb      	adds	r3, r7, r3
   2f7bc:	781b      	ldrb	r3, [r3, #0]
   2f7be:	2204      	movs	r2, #4
   2f7c0:	4013      	ands	r3, r2
   2f7c2:	d001      	beq.n	2f7c8 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2f7c4:	230a      	movs	r3, #10
   2f7c6:	e25d      	b.n	2fc84 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2f7c8:	2300      	movs	r3, #0
   2f7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   2f7cc:	2347      	movs	r3, #71	; 0x47
   2f7ce:	18fc      	adds	r4, r7, r3
   2f7d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f7d4:	0011      	movs	r1, r2
   2f7d6:	0018      	movs	r0, r3
   2f7d8:	4b9b      	ldr	r3, [pc, #620]	; (2fa48 <chk_mounted+0x36c>)
   2f7da:	4798      	blx	r3
   2f7dc:	0003      	movs	r3, r0
   2f7de:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2f7e0:	2347      	movs	r3, #71	; 0x47
   2f7e2:	18fb      	adds	r3, r7, r3
   2f7e4:	781b      	ldrb	r3, [r3, #0]
   2f7e6:	2b01      	cmp	r3, #1
   2f7e8:	d13b      	bne.n	2f862 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2f7ea:	2346      	movs	r3, #70	; 0x46
   2f7ec:	18fb      	adds	r3, r7, r3
   2f7ee:	2200      	movs	r2, #0
   2f7f0:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2f7f2:	2346      	movs	r3, #70	; 0x46
   2f7f4:	18fb      	adds	r3, r7, r3
   2f7f6:	781b      	ldrb	r3, [r3, #0]
   2f7f8:	2b00      	cmp	r3, #0
   2f7fa:	d006      	beq.n	2f80a <chk_mounted+0x12e>
   2f7fc:	2346      	movs	r3, #70	; 0x46
   2f7fe:	18fb      	adds	r3, r7, r3
   2f800:	781a      	ldrb	r2, [r3, #0]
   2f802:	2346      	movs	r3, #70	; 0x46
   2f804:	18fb      	adds	r3, r7, r3
   2f806:	3a01      	subs	r2, #1
   2f808:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2f80a:	2346      	movs	r3, #70	; 0x46
   2f80c:	18fb      	adds	r3, r7, r3
   2f80e:	781b      	ldrb	r3, [r3, #0]
   2f810:	011b      	lsls	r3, r3, #4
   2f812:	33bf      	adds	r3, #191	; 0xbf
   2f814:	33ff      	adds	r3, #255	; 0xff
   2f816:	3330      	adds	r3, #48	; 0x30
   2f818:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f81a:	18d3      	adds	r3, r2, r3
   2f81c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2f81e:	6a3b      	ldr	r3, [r7, #32]
   2f820:	3304      	adds	r3, #4
   2f822:	781b      	ldrb	r3, [r3, #0]
   2f824:	2b00      	cmp	r3, #0
   2f826:	d01c      	beq.n	2f862 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2f828:	6a3b      	ldr	r3, [r7, #32]
   2f82a:	330b      	adds	r3, #11
   2f82c:	781b      	ldrb	r3, [r3, #0]
   2f82e:	061a      	lsls	r2, r3, #24
   2f830:	6a3b      	ldr	r3, [r7, #32]
   2f832:	330a      	adds	r3, #10
   2f834:	781b      	ldrb	r3, [r3, #0]
   2f836:	041b      	lsls	r3, r3, #16
   2f838:	4313      	orrs	r3, r2
   2f83a:	6a3a      	ldr	r2, [r7, #32]
   2f83c:	3209      	adds	r2, #9
   2f83e:	7812      	ldrb	r2, [r2, #0]
   2f840:	0212      	lsls	r2, r2, #8
   2f842:	4313      	orrs	r3, r2
   2f844:	6a3a      	ldr	r2, [r7, #32]
   2f846:	3208      	adds	r2, #8
   2f848:	7812      	ldrb	r2, [r2, #0]
   2f84a:	4313      	orrs	r3, r2
   2f84c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2f84e:	2347      	movs	r3, #71	; 0x47
   2f850:	18fc      	adds	r4, r7, r3
   2f852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f856:	0011      	movs	r1, r2
   2f858:	0018      	movs	r0, r3
   2f85a:	4b7b      	ldr	r3, [pc, #492]	; (2fa48 <chk_mounted+0x36c>)
   2f85c:	4798      	blx	r3
   2f85e:	0003      	movs	r3, r0
   2f860:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2f862:	2347      	movs	r3, #71	; 0x47
   2f864:	18fb      	adds	r3, r7, r3
   2f866:	781b      	ldrb	r3, [r3, #0]
   2f868:	2b03      	cmp	r3, #3
   2f86a:	d101      	bne.n	2f870 <chk_mounted+0x194>
   2f86c:	2301      	movs	r3, #1
   2f86e:	e209      	b.n	2fc84 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2f870:	2347      	movs	r3, #71	; 0x47
   2f872:	18fb      	adds	r3, r7, r3
   2f874:	781b      	ldrb	r3, [r3, #0]
   2f876:	2b00      	cmp	r3, #0
   2f878:	d001      	beq.n	2f87e <chk_mounted+0x1a2>
   2f87a:	230d      	movs	r3, #13
   2f87c:	e202      	b.n	2fc84 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f880:	223c      	movs	r2, #60	; 0x3c
   2f882:	5c9b      	ldrb	r3, [r3, r2]
   2f884:	021b      	lsls	r3, r3, #8
   2f886:	b21a      	sxth	r2, r3
   2f888:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f88a:	213b      	movs	r1, #59	; 0x3b
   2f88c:	5c5b      	ldrb	r3, [r3, r1]
   2f88e:	b21b      	sxth	r3, r3
   2f890:	4313      	orrs	r3, r2
   2f892:	b21a      	sxth	r2, r3
   2f894:	2380      	movs	r3, #128	; 0x80
   2f896:	009b      	lsls	r3, r3, #2
   2f898:	429a      	cmp	r2, r3
   2f89a:	d001      	beq.n	2f8a0 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2f89c:	230d      	movs	r3, #13
   2f89e:	e1f1      	b.n	2fc84 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2f8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8a2:	2247      	movs	r2, #71	; 0x47
   2f8a4:	5c9b      	ldrb	r3, [r3, r2]
   2f8a6:	021b      	lsls	r3, r3, #8
   2f8a8:	b21a      	sxth	r2, r3
   2f8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8ac:	2146      	movs	r1, #70	; 0x46
   2f8ae:	5c5b      	ldrb	r3, [r3, r1]
   2f8b0:	b21b      	sxth	r3, r3
   2f8b2:	4313      	orrs	r3, r2
   2f8b4:	b21b      	sxth	r3, r3
   2f8b6:	b29b      	uxth	r3, r3
   2f8b8:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2f8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f8bc:	2b00      	cmp	r3, #0
   2f8be:	d112      	bne.n	2f8e6 <chk_mounted+0x20a>
   2f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8c2:	2257      	movs	r2, #87	; 0x57
   2f8c4:	5c9b      	ldrb	r3, [r3, r2]
   2f8c6:	061a      	lsls	r2, r3, #24
   2f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8ca:	2156      	movs	r1, #86	; 0x56
   2f8cc:	5c5b      	ldrb	r3, [r3, r1]
   2f8ce:	041b      	lsls	r3, r3, #16
   2f8d0:	4313      	orrs	r3, r2
   2f8d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f8d4:	2155      	movs	r1, #85	; 0x55
   2f8d6:	5c52      	ldrb	r2, [r2, r1]
   2f8d8:	0212      	lsls	r2, r2, #8
   2f8da:	4313      	orrs	r3, r2
   2f8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f8de:	2154      	movs	r1, #84	; 0x54
   2f8e0:	5c52      	ldrb	r2, [r2, r1]
   2f8e2:	4313      	orrs	r3, r2
   2f8e4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2f8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2f8ea:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2f8ec:	231f      	movs	r3, #31
   2f8ee:	18fb      	adds	r3, r7, r3
   2f8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f8f2:	2140      	movs	r1, #64	; 0x40
   2f8f4:	5c52      	ldrb	r2, [r2, r1]
   2f8f6:	701a      	strb	r2, [r3, #0]
   2f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8fa:	221f      	movs	r2, #31
   2f8fc:	18ba      	adds	r2, r7, r2
   2f8fe:	7812      	ldrb	r2, [r2, #0]
   2f900:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2f902:	231f      	movs	r3, #31
   2f904:	18fb      	adds	r3, r7, r3
   2f906:	781b      	ldrb	r3, [r3, #0]
   2f908:	2b01      	cmp	r3, #1
   2f90a:	d006      	beq.n	2f91a <chk_mounted+0x23e>
   2f90c:	231f      	movs	r3, #31
   2f90e:	18fb      	adds	r3, r7, r3
   2f910:	781b      	ldrb	r3, [r3, #0]
   2f912:	2b02      	cmp	r3, #2
   2f914:	d001      	beq.n	2f91a <chk_mounted+0x23e>
   2f916:	230d      	movs	r3, #13
   2f918:	e1b4      	b.n	2fc84 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2f91a:	231f      	movs	r3, #31
   2f91c:	18fb      	adds	r3, r7, r3
   2f91e:	781a      	ldrb	r2, [r3, #0]
   2f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f922:	4353      	muls	r3, r2
   2f924:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2f926:	231f      	movs	r3, #31
   2f928:	18fb      	adds	r3, r7, r3
   2f92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f92c:	213d      	movs	r1, #61	; 0x3d
   2f92e:	5c52      	ldrb	r2, [r2, r1]
   2f930:	701a      	strb	r2, [r3, #0]
   2f932:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f934:	221f      	movs	r2, #31
   2f936:	18ba      	adds	r2, r7, r2
   2f938:	7812      	ldrb	r2, [r2, #0]
   2f93a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2f93c:	231f      	movs	r3, #31
   2f93e:	18fb      	adds	r3, r7, r3
   2f940:	781b      	ldrb	r3, [r3, #0]
   2f942:	2b00      	cmp	r3, #0
   2f944:	d008      	beq.n	2f958 <chk_mounted+0x27c>
   2f946:	231f      	movs	r3, #31
   2f948:	18fb      	adds	r3, r7, r3
   2f94a:	781b      	ldrb	r3, [r3, #0]
   2f94c:	221f      	movs	r2, #31
   2f94e:	18ba      	adds	r2, r7, r2
   2f950:	7812      	ldrb	r2, [r2, #0]
   2f952:	3a01      	subs	r2, #1
   2f954:	4013      	ands	r3, r2
   2f956:	d001      	beq.n	2f95c <chk_mounted+0x280>
   2f958:	230d      	movs	r3, #13
   2f95a:	e193      	b.n	2fc84 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2f95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f95e:	2242      	movs	r2, #66	; 0x42
   2f960:	5c9b      	ldrb	r3, [r3, r2]
   2f962:	021b      	lsls	r3, r3, #8
   2f964:	b21a      	sxth	r2, r3
   2f966:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f968:	2141      	movs	r1, #65	; 0x41
   2f96a:	5c5b      	ldrb	r3, [r3, r1]
   2f96c:	b21b      	sxth	r3, r3
   2f96e:	4313      	orrs	r3, r2
   2f970:	b21b      	sxth	r3, r3
   2f972:	b29a      	uxth	r2, r3
   2f974:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f976:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f97a:	891b      	ldrh	r3, [r3, #8]
   2f97c:	220f      	movs	r2, #15
   2f97e:	4013      	ands	r3, r2
   2f980:	b29b      	uxth	r3, r3
   2f982:	2b00      	cmp	r3, #0
   2f984:	d001      	beq.n	2f98a <chk_mounted+0x2ae>
   2f986:	230d      	movs	r3, #13
   2f988:	e17c      	b.n	2fc84 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f98c:	2244      	movs	r2, #68	; 0x44
   2f98e:	5c9b      	ldrb	r3, [r3, r2]
   2f990:	021b      	lsls	r3, r3, #8
   2f992:	b21a      	sxth	r2, r3
   2f994:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f996:	2143      	movs	r1, #67	; 0x43
   2f998:	5c5b      	ldrb	r3, [r3, r1]
   2f99a:	b21b      	sxth	r3, r3
   2f99c:	4313      	orrs	r3, r2
   2f99e:	b21b      	sxth	r3, r3
   2f9a0:	b29b      	uxth	r3, r3
   2f9a2:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2f9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f9a6:	2b00      	cmp	r3, #0
   2f9a8:	d112      	bne.n	2f9d0 <chk_mounted+0x2f4>
   2f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9ac:	2253      	movs	r2, #83	; 0x53
   2f9ae:	5c9b      	ldrb	r3, [r3, r2]
   2f9b0:	061a      	lsls	r2, r3, #24
   2f9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9b4:	2152      	movs	r1, #82	; 0x52
   2f9b6:	5c5b      	ldrb	r3, [r3, r1]
   2f9b8:	041b      	lsls	r3, r3, #16
   2f9ba:	4313      	orrs	r3, r2
   2f9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f9be:	2151      	movs	r1, #81	; 0x51
   2f9c0:	5c52      	ldrb	r2, [r2, r1]
   2f9c2:	0212      	lsls	r2, r2, #8
   2f9c4:	4313      	orrs	r3, r2
   2f9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f9c8:	2150      	movs	r1, #80	; 0x50
   2f9ca:	5c52      	ldrb	r2, [r2, r1]
   2f9cc:	4313      	orrs	r3, r2
   2f9ce:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2f9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9d2:	223f      	movs	r2, #63	; 0x3f
   2f9d4:	5c9b      	ldrb	r3, [r3, r2]
   2f9d6:	021b      	lsls	r3, r3, #8
   2f9d8:	b21a      	sxth	r2, r3
   2f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9dc:	213e      	movs	r1, #62	; 0x3e
   2f9de:	5c5b      	ldrb	r3, [r3, r1]
   2f9e0:	b21b      	sxth	r3, r3
   2f9e2:	4313      	orrs	r3, r2
   2f9e4:	b21a      	sxth	r2, r3
   2f9e6:	231c      	movs	r3, #28
   2f9e8:	18fb      	adds	r3, r7, r3
   2f9ea:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2f9ec:	231c      	movs	r3, #28
   2f9ee:	18fb      	adds	r3, r7, r3
   2f9f0:	881b      	ldrh	r3, [r3, #0]
   2f9f2:	2b00      	cmp	r3, #0
   2f9f4:	d101      	bne.n	2f9fa <chk_mounted+0x31e>
   2f9f6:	230d      	movs	r3, #13
   2f9f8:	e144      	b.n	2fc84 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2f9fa:	231c      	movs	r3, #28
   2f9fc:	18fb      	adds	r3, r7, r3
   2f9fe:	881a      	ldrh	r2, [r3, #0]
   2fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fa02:	18d3      	adds	r3, r2, r3
   2fa04:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fa06:	8912      	ldrh	r2, [r2, #8]
   2fa08:	0912      	lsrs	r2, r2, #4
   2fa0a:	b292      	uxth	r2, r2
   2fa0c:	189b      	adds	r3, r3, r2
   2fa0e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2fa10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2fa12:	69bb      	ldr	r3, [r7, #24]
   2fa14:	429a      	cmp	r2, r3
   2fa16:	d201      	bcs.n	2fa1c <chk_mounted+0x340>
   2fa18:	230d      	movs	r3, #13
   2fa1a:	e133      	b.n	2fc84 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2fa1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2fa1e:	69bb      	ldr	r3, [r7, #24]
   2fa20:	1ad2      	subs	r2, r2, r3
   2fa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa24:	789b      	ldrb	r3, [r3, #2]
   2fa26:	0019      	movs	r1, r3
   2fa28:	4b08      	ldr	r3, [pc, #32]	; (2fa4c <chk_mounted+0x370>)
   2fa2a:	0010      	movs	r0, r2
   2fa2c:	4798      	blx	r3
   2fa2e:	0003      	movs	r3, r0
   2fa30:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2fa32:	697b      	ldr	r3, [r7, #20]
   2fa34:	2b00      	cmp	r3, #0
   2fa36:	d10b      	bne.n	2fa50 <chk_mounted+0x374>
   2fa38:	230d      	movs	r3, #13
   2fa3a:	e123      	b.n	2fc84 <chk_mounted+0x5a8>
   2fa3c:	2000416c 	.word	0x2000416c
   2fa40:	0002d839 	.word	0x0002d839
   2fa44:	0002d7b5 	.word	0x0002d7b5
   2fa48:	0002f609 	.word	0x0002f609
   2fa4c:	00034e35 	.word	0x00034e35
	fmt = FS_FAT12;
   2fa50:	2347      	movs	r3, #71	; 0x47
   2fa52:	18fb      	adds	r3, r7, r3
   2fa54:	2201      	movs	r2, #1
   2fa56:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2fa58:	697b      	ldr	r3, [r7, #20]
   2fa5a:	4a8c      	ldr	r2, [pc, #560]	; (2fc8c <chk_mounted+0x5b0>)
   2fa5c:	4293      	cmp	r3, r2
   2fa5e:	d903      	bls.n	2fa68 <chk_mounted+0x38c>
   2fa60:	2347      	movs	r3, #71	; 0x47
   2fa62:	18fb      	adds	r3, r7, r3
   2fa64:	2202      	movs	r2, #2
   2fa66:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2fa68:	697b      	ldr	r3, [r7, #20]
   2fa6a:	4a89      	ldr	r2, [pc, #548]	; (2fc90 <chk_mounted+0x5b4>)
   2fa6c:	4293      	cmp	r3, r2
   2fa6e:	d903      	bls.n	2fa78 <chk_mounted+0x39c>
   2fa70:	2347      	movs	r3, #71	; 0x47
   2fa72:	18fb      	adds	r3, r7, r3
   2fa74:	2203      	movs	r2, #3
   2fa76:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2fa78:	697b      	ldr	r3, [r7, #20]
   2fa7a:	1c9a      	adds	r2, r3, #2
   2fa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa7e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2fa80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fa82:	69bb      	ldr	r3, [r7, #24]
   2fa84:	18d2      	adds	r2, r2, r3
   2fa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa88:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2fa8a:	231c      	movs	r3, #28
   2fa8c:	18fb      	adds	r3, r7, r3
   2fa8e:	881a      	ldrh	r2, [r3, #0]
   2fa90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fa92:	18d2      	adds	r2, r2, r3
   2fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa96:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2fa98:	2347      	movs	r3, #71	; 0x47
   2fa9a:	18fb      	adds	r3, r7, r3
   2fa9c:	781b      	ldrb	r3, [r3, #0]
   2fa9e:	2b03      	cmp	r3, #3
   2faa0:	d11e      	bne.n	2fae0 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2faa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2faa4:	891b      	ldrh	r3, [r3, #8]
   2faa6:	2b00      	cmp	r3, #0
   2faa8:	d001      	beq.n	2faae <chk_mounted+0x3d2>
   2faaa:	230d      	movs	r3, #13
   2faac:	e0ea      	b.n	2fc84 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2faae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fab0:	225f      	movs	r2, #95	; 0x5f
   2fab2:	5c9b      	ldrb	r3, [r3, r2]
   2fab4:	061a      	lsls	r2, r3, #24
   2fab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fab8:	215e      	movs	r1, #94	; 0x5e
   2faba:	5c5b      	ldrb	r3, [r3, r1]
   2fabc:	041b      	lsls	r3, r3, #16
   2fabe:	4313      	orrs	r3, r2
   2fac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fac2:	215d      	movs	r1, #93	; 0x5d
   2fac4:	5c52      	ldrb	r2, [r2, r1]
   2fac6:	0212      	lsls	r2, r2, #8
   2fac8:	4313      	orrs	r3, r2
   2faca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2facc:	215c      	movs	r1, #92	; 0x5c
   2face:	5c52      	ldrb	r2, [r2, r1]
   2fad0:	431a      	orrs	r2, r3
   2fad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fad4:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fad8:	699b      	ldr	r3, [r3, #24]
   2fada:	009b      	lsls	r3, r3, #2
   2fadc:	633b      	str	r3, [r7, #48]	; 0x30
   2fade:	e020      	b.n	2fb22 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fae2:	891b      	ldrh	r3, [r3, #8]
   2fae4:	2b00      	cmp	r3, #0
   2fae6:	d101      	bne.n	2faec <chk_mounted+0x410>
   2fae8:	230d      	movs	r3, #13
   2faea:	e0cb      	b.n	2fc84 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2faec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2faee:	6a1a      	ldr	r2, [r3, #32]
   2faf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2faf2:	18d2      	adds	r2, r2, r3
   2faf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2faf6:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2faf8:	2347      	movs	r3, #71	; 0x47
   2fafa:	18fb      	adds	r3, r7, r3
   2fafc:	781b      	ldrb	r3, [r3, #0]
   2fafe:	2b02      	cmp	r3, #2
   2fb00:	d103      	bne.n	2fb0a <chk_mounted+0x42e>
   2fb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb04:	699b      	ldr	r3, [r3, #24]
   2fb06:	005b      	lsls	r3, r3, #1
   2fb08:	e00a      	b.n	2fb20 <chk_mounted+0x444>
   2fb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb0c:	699a      	ldr	r2, [r3, #24]
   2fb0e:	0013      	movs	r3, r2
   2fb10:	005b      	lsls	r3, r3, #1
   2fb12:	189b      	adds	r3, r3, r2
   2fb14:	085a      	lsrs	r2, r3, #1
   2fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb18:	699b      	ldr	r3, [r3, #24]
   2fb1a:	2101      	movs	r1, #1
   2fb1c:	400b      	ands	r3, r1
   2fb1e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2fb20:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2fb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb24:	69da      	ldr	r2, [r3, #28]
   2fb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fb28:	495a      	ldr	r1, [pc, #360]	; (2fc94 <chk_mounted+0x5b8>)
   2fb2a:	468c      	mov	ip, r1
   2fb2c:	4463      	add	r3, ip
   2fb2e:	0a5b      	lsrs	r3, r3, #9
   2fb30:	429a      	cmp	r2, r3
   2fb32:	d201      	bcs.n	2fb38 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2fb34:	230d      	movs	r3, #13
   2fb36:	e0a5      	b.n	2fc84 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb3a:	2201      	movs	r2, #1
   2fb3c:	4252      	negs	r2, r2
   2fb3e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb42:	2200      	movs	r2, #0
   2fb44:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2fb46:	2347      	movs	r3, #71	; 0x47
   2fb48:	18fb      	adds	r3, r7, r3
   2fb4a:	781b      	ldrb	r3, [r3, #0]
   2fb4c:	2b03      	cmp	r3, #3
   2fb4e:	d000      	beq.n	2fb52 <chk_mounted+0x476>
   2fb50:	e082      	b.n	2fc58 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb54:	2200      	movs	r2, #0
   2fb56:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2fb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb5a:	2261      	movs	r2, #97	; 0x61
   2fb5c:	5c9b      	ldrb	r3, [r3, r2]
   2fb5e:	021b      	lsls	r3, r3, #8
   2fb60:	b21a      	sxth	r2, r3
   2fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb64:	2160      	movs	r1, #96	; 0x60
   2fb66:	5c5b      	ldrb	r3, [r3, r1]
   2fb68:	b21b      	sxth	r3, r3
   2fb6a:	4313      	orrs	r3, r2
   2fb6c:	b21b      	sxth	r3, r3
   2fb6e:	b29b      	uxth	r3, r3
   2fb70:	001a      	movs	r2, r3
   2fb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fb74:	18d2      	adds	r2, r2, r3
   2fb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb78:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb7c:	7858      	ldrb	r0, [r3, #1]
   2fb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb80:	3330      	adds	r3, #48	; 0x30
   2fb82:	0019      	movs	r1, r3
   2fb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb86:	695a      	ldr	r2, [r3, #20]
   2fb88:	2301      	movs	r3, #1
   2fb8a:	4c43      	ldr	r4, [pc, #268]	; (2fc98 <chk_mounted+0x5bc>)
   2fb8c:	47a0      	blx	r4
   2fb8e:	1e03      	subs	r3, r0, #0
   2fb90:	d162      	bne.n	2fc58 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2fb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb94:	4a41      	ldr	r2, [pc, #260]	; (2fc9c <chk_mounted+0x5c0>)
   2fb96:	5c9b      	ldrb	r3, [r3, r2]
   2fb98:	021b      	lsls	r3, r3, #8
   2fb9a:	b21a      	sxth	r2, r3
   2fb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb9e:	4940      	ldr	r1, [pc, #256]	; (2fca0 <chk_mounted+0x5c4>)
   2fba0:	5c5b      	ldrb	r3, [r3, r1]
   2fba2:	b21b      	sxth	r3, r3
   2fba4:	4313      	orrs	r3, r2
   2fba6:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2fba8:	4a3e      	ldr	r2, [pc, #248]	; (2fca4 <chk_mounted+0x5c8>)
   2fbaa:	4293      	cmp	r3, r2
   2fbac:	d154      	bne.n	2fc58 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbb0:	2233      	movs	r2, #51	; 0x33
   2fbb2:	5c9b      	ldrb	r3, [r3, r2]
   2fbb4:	061a      	lsls	r2, r3, #24
   2fbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbb8:	2132      	movs	r1, #50	; 0x32
   2fbba:	5c5b      	ldrb	r3, [r3, r1]
   2fbbc:	041b      	lsls	r3, r3, #16
   2fbbe:	4313      	orrs	r3, r2
   2fbc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fbc2:	2131      	movs	r1, #49	; 0x31
   2fbc4:	5c52      	ldrb	r2, [r2, r1]
   2fbc6:	0212      	lsls	r2, r2, #8
   2fbc8:	4313      	orrs	r3, r2
   2fbca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fbcc:	2130      	movs	r1, #48	; 0x30
   2fbce:	5c52      	ldrb	r2, [r2, r1]
   2fbd0:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2fbd2:	4a35      	ldr	r2, [pc, #212]	; (2fca8 <chk_mounted+0x5cc>)
   2fbd4:	4293      	cmp	r3, r2
   2fbd6:	d13f      	bne.n	2fc58 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2fbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbda:	4a34      	ldr	r2, [pc, #208]	; (2fcac <chk_mounted+0x5d0>)
   2fbdc:	5c9b      	ldrb	r3, [r3, r2]
   2fbde:	061a      	lsls	r2, r3, #24
   2fbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbe2:	4933      	ldr	r1, [pc, #204]	; (2fcb0 <chk_mounted+0x5d4>)
   2fbe4:	5c5b      	ldrb	r3, [r3, r1]
   2fbe6:	041b      	lsls	r3, r3, #16
   2fbe8:	4313      	orrs	r3, r2
   2fbea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fbec:	4931      	ldr	r1, [pc, #196]	; (2fcb4 <chk_mounted+0x5d8>)
   2fbee:	5c52      	ldrb	r2, [r2, r1]
   2fbf0:	0212      	lsls	r2, r2, #8
   2fbf2:	4313      	orrs	r3, r2
   2fbf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fbf6:	2285      	movs	r2, #133	; 0x85
   2fbf8:	0092      	lsls	r2, r2, #2
   2fbfa:	5c8a      	ldrb	r2, [r1, r2]
   2fbfc:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2fbfe:	4a2e      	ldr	r2, [pc, #184]	; (2fcb8 <chk_mounted+0x5dc>)
   2fc00:	4293      	cmp	r3, r2
   2fc02:	d129      	bne.n	2fc58 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2fc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc06:	4a2d      	ldr	r2, [pc, #180]	; (2fcbc <chk_mounted+0x5e0>)
   2fc08:	5c9b      	ldrb	r3, [r3, r2]
   2fc0a:	061a      	lsls	r2, r3, #24
   2fc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc0e:	492c      	ldr	r1, [pc, #176]	; (2fcc0 <chk_mounted+0x5e4>)
   2fc10:	5c5b      	ldrb	r3, [r3, r1]
   2fc12:	041b      	lsls	r3, r3, #16
   2fc14:	4313      	orrs	r3, r2
   2fc16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fc18:	492a      	ldr	r1, [pc, #168]	; (2fcc4 <chk_mounted+0x5e8>)
   2fc1a:	5c52      	ldrb	r2, [r2, r1]
   2fc1c:	0212      	lsls	r2, r2, #8
   2fc1e:	4313      	orrs	r3, r2
   2fc20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fc22:	2287      	movs	r2, #135	; 0x87
   2fc24:	0092      	lsls	r2, r2, #2
   2fc26:	5c8a      	ldrb	r2, [r1, r2]
   2fc28:	431a      	orrs	r2, r3
   2fc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc2c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2fc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc30:	4a25      	ldr	r2, [pc, #148]	; (2fcc8 <chk_mounted+0x5ec>)
   2fc32:	5c9b      	ldrb	r3, [r3, r2]
   2fc34:	061a      	lsls	r2, r3, #24
   2fc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc38:	4924      	ldr	r1, [pc, #144]	; (2fccc <chk_mounted+0x5f0>)
   2fc3a:	5c5b      	ldrb	r3, [r3, r1]
   2fc3c:	041b      	lsls	r3, r3, #16
   2fc3e:	4313      	orrs	r3, r2
   2fc40:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fc42:	4923      	ldr	r1, [pc, #140]	; (2fcd0 <chk_mounted+0x5f4>)
   2fc44:	5c52      	ldrb	r2, [r2, r1]
   2fc46:	0212      	lsls	r2, r2, #8
   2fc48:	4313      	orrs	r3, r2
   2fc4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fc4c:	2286      	movs	r2, #134	; 0x86
   2fc4e:	0092      	lsls	r2, r2, #2
   2fc50:	5c8a      	ldrb	r2, [r1, r2]
   2fc52:	431a      	orrs	r2, r3
   2fc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc56:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc5a:	2247      	movs	r2, #71	; 0x47
   2fc5c:	18ba      	adds	r2, r7, r2
   2fc5e:	7812      	ldrb	r2, [r2, #0]
   2fc60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2fc62:	4b1c      	ldr	r3, [pc, #112]	; (2fcd4 <chk_mounted+0x5f8>)
   2fc64:	881b      	ldrh	r3, [r3, #0]
   2fc66:	3301      	adds	r3, #1
   2fc68:	b29a      	uxth	r2, r3
   2fc6a:	4b1a      	ldr	r3, [pc, #104]	; (2fcd4 <chk_mounted+0x5f8>)
   2fc6c:	801a      	strh	r2, [r3, #0]
   2fc6e:	4b19      	ldr	r3, [pc, #100]	; (2fcd4 <chk_mounted+0x5f8>)
   2fc70:	881a      	ldrh	r2, [r3, #0]
   2fc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc74:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc78:	2200      	movs	r2, #0
   2fc7a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc7e:	2200      	movs	r2, #0
   2fc80:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2fc82:	2300      	movs	r3, #0
}
   2fc84:	0018      	movs	r0, r3
   2fc86:	46bd      	mov	sp, r7
   2fc88:	b013      	add	sp, #76	; 0x4c
   2fc8a:	bd90      	pop	{r4, r7, pc}
   2fc8c:	00000ff5 	.word	0x00000ff5
   2fc90:	0000fff5 	.word	0x0000fff5
   2fc94:	000001ff 	.word	0x000001ff
   2fc98:	0002d871 	.word	0x0002d871
   2fc9c:	0000022f 	.word	0x0000022f
   2fca0:	0000022e 	.word	0x0000022e
   2fca4:	ffffaa55 	.word	0xffffaa55
   2fca8:	41615252 	.word	0x41615252
   2fcac:	00000217 	.word	0x00000217
   2fcb0:	00000216 	.word	0x00000216
   2fcb4:	00000215 	.word	0x00000215
   2fcb8:	61417272 	.word	0x61417272
   2fcbc:	0000021f 	.word	0x0000021f
   2fcc0:	0000021e 	.word	0x0000021e
   2fcc4:	0000021d 	.word	0x0000021d
   2fcc8:	0000021b 	.word	0x0000021b
   2fccc:	0000021a 	.word	0x0000021a
   2fcd0:	00000219 	.word	0x00000219
   2fcd4:	2000418c 	.word	0x2000418c

0002fcd8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2fcd8:	b580      	push	{r7, lr}
   2fcda:	b082      	sub	sp, #8
   2fcdc:	af00      	add	r7, sp, #0
   2fcde:	6078      	str	r0, [r7, #4]
   2fce0:	000a      	movs	r2, r1
   2fce2:	1cbb      	adds	r3, r7, #2
   2fce4:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2fce6:	687b      	ldr	r3, [r7, #4]
   2fce8:	2b00      	cmp	r3, #0
   2fcea:	d009      	beq.n	2fd00 <validate+0x28>
   2fcec:	687b      	ldr	r3, [r7, #4]
   2fcee:	781b      	ldrb	r3, [r3, #0]
   2fcf0:	2b00      	cmp	r3, #0
   2fcf2:	d005      	beq.n	2fd00 <validate+0x28>
   2fcf4:	687b      	ldr	r3, [r7, #4]
   2fcf6:	88db      	ldrh	r3, [r3, #6]
   2fcf8:	1cba      	adds	r2, r7, #2
   2fcfa:	8812      	ldrh	r2, [r2, #0]
   2fcfc:	429a      	cmp	r2, r3
   2fcfe:	d001      	beq.n	2fd04 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2fd00:	2309      	movs	r3, #9
   2fd02:	e00c      	b.n	2fd1e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2fd04:	687b      	ldr	r3, [r7, #4]
   2fd06:	785b      	ldrb	r3, [r3, #1]
   2fd08:	0018      	movs	r0, r3
   2fd0a:	4b07      	ldr	r3, [pc, #28]	; (2fd28 <validate+0x50>)
   2fd0c:	4798      	blx	r3
   2fd0e:	0003      	movs	r3, r0
   2fd10:	001a      	movs	r2, r3
   2fd12:	2301      	movs	r3, #1
   2fd14:	4013      	ands	r3, r2
   2fd16:	d001      	beq.n	2fd1c <validate+0x44>
		return FR_NOT_READY;
   2fd18:	2303      	movs	r3, #3
   2fd1a:	e000      	b.n	2fd1e <validate+0x46>

	return FR_OK;
   2fd1c:	2300      	movs	r3, #0
}
   2fd1e:	0018      	movs	r0, r3
   2fd20:	46bd      	mov	sp, r7
   2fd22:	b002      	add	sp, #8
   2fd24:	bd80      	pop	{r7, pc}
   2fd26:	46c0      	nop			; (mov r8, r8)
   2fd28:	0002d839 	.word	0x0002d839

0002fd2c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2fd2c:	b580      	push	{r7, lr}
   2fd2e:	b084      	sub	sp, #16
   2fd30:	af00      	add	r7, sp, #0
   2fd32:	0002      	movs	r2, r0
   2fd34:	6039      	str	r1, [r7, #0]
   2fd36:	1dfb      	adds	r3, r7, #7
   2fd38:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2fd3a:	1dfb      	adds	r3, r7, #7
   2fd3c:	781b      	ldrb	r3, [r3, #0]
   2fd3e:	2b07      	cmp	r3, #7
   2fd40:	d901      	bls.n	2fd46 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2fd42:	230b      	movs	r3, #11
   2fd44:	e018      	b.n	2fd78 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2fd46:	1dfb      	adds	r3, r7, #7
   2fd48:	781a      	ldrb	r2, [r3, #0]
   2fd4a:	4b0d      	ldr	r3, [pc, #52]	; (2fd80 <f_mount+0x54>)
   2fd4c:	0092      	lsls	r2, r2, #2
   2fd4e:	58d3      	ldr	r3, [r2, r3]
   2fd50:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2fd52:	68fb      	ldr	r3, [r7, #12]
   2fd54:	2b00      	cmp	r3, #0
   2fd56:	d002      	beq.n	2fd5e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2fd58:	68fb      	ldr	r3, [r7, #12]
   2fd5a:	2200      	movs	r2, #0
   2fd5c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2fd5e:	683b      	ldr	r3, [r7, #0]
   2fd60:	2b00      	cmp	r3, #0
   2fd62:	d002      	beq.n	2fd6a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2fd64:	683b      	ldr	r3, [r7, #0]
   2fd66:	2200      	movs	r2, #0
   2fd68:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2fd6a:	1dfb      	adds	r3, r7, #7
   2fd6c:	781a      	ldrb	r2, [r3, #0]
   2fd6e:	4b04      	ldr	r3, [pc, #16]	; (2fd80 <f_mount+0x54>)
   2fd70:	0092      	lsls	r2, r2, #2
   2fd72:	6839      	ldr	r1, [r7, #0]
   2fd74:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2fd76:	2300      	movs	r3, #0
}
   2fd78:	0018      	movs	r0, r3
   2fd7a:	46bd      	mov	sp, r7
   2fd7c:	b004      	add	sp, #16
   2fd7e:	bd80      	pop	{r7, pc}
   2fd80:	2000416c 	.word	0x2000416c

0002fd84 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2fd84:	b590      	push	{r4, r7, lr}
   2fd86:	4ce5      	ldr	r4, [pc, #916]	; (3011c <f_open+0x398>)
   2fd88:	44a5      	add	sp, r4
   2fd8a:	af00      	add	r7, sp, #0
   2fd8c:	60f8      	str	r0, [r7, #12]
   2fd8e:	60b9      	str	r1, [r7, #8]
   2fd90:	4be3      	ldr	r3, [pc, #908]	; (30120 <f_open+0x39c>)
   2fd92:	2194      	movs	r1, #148	; 0x94
   2fd94:	0089      	lsls	r1, r1, #2
   2fd96:	468c      	mov	ip, r1
   2fd98:	44bc      	add	ip, r7
   2fd9a:	4463      	add	r3, ip
   2fd9c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2fd9e:	68fb      	ldr	r3, [r7, #12]
   2fda0:	2200      	movs	r2, #0
   2fda2:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2fda4:	4bde      	ldr	r3, [pc, #888]	; (30120 <f_open+0x39c>)
   2fda6:	2294      	movs	r2, #148	; 0x94
   2fda8:	0092      	lsls	r2, r2, #2
   2fdaa:	4694      	mov	ip, r2
   2fdac:	44bc      	add	ip, r7
   2fdae:	4463      	add	r3, ip
   2fdb0:	4adb      	ldr	r2, [pc, #876]	; (30120 <f_open+0x39c>)
   2fdb2:	2194      	movs	r1, #148	; 0x94
   2fdb4:	0089      	lsls	r1, r1, #2
   2fdb6:	468c      	mov	ip, r1
   2fdb8:	44bc      	add	ip, r7
   2fdba:	4462      	add	r2, ip
   2fdbc:	7812      	ldrb	r2, [r2, #0]
   2fdbe:	211f      	movs	r1, #31
   2fdc0:	400a      	ands	r2, r1
   2fdc2:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2fdc4:	4bd6      	ldr	r3, [pc, #856]	; (30120 <f_open+0x39c>)
   2fdc6:	2294      	movs	r2, #148	; 0x94
   2fdc8:	0092      	lsls	r2, r2, #2
   2fdca:	4694      	mov	ip, r2
   2fdcc:	44bc      	add	ip, r7
   2fdce:	4463      	add	r3, ip
   2fdd0:	781b      	ldrb	r3, [r3, #0]
   2fdd2:	2201      	movs	r2, #1
   2fdd4:	4393      	bics	r3, r2
   2fdd6:	b2da      	uxtb	r2, r3
   2fdd8:	4bd2      	ldr	r3, [pc, #840]	; (30124 <f_open+0x3a0>)
   2fdda:	18fc      	adds	r4, r7, r3
   2fddc:	2387      	movs	r3, #135	; 0x87
   2fdde:	009b      	lsls	r3, r3, #2
   2fde0:	18f9      	adds	r1, r7, r3
   2fde2:	2308      	movs	r3, #8
   2fde4:	18fb      	adds	r3, r7, r3
   2fde6:	0018      	movs	r0, r3
   2fde8:	4bcf      	ldr	r3, [pc, #828]	; (30128 <f_open+0x3a4>)
   2fdea:	4798      	blx	r3
   2fdec:	0003      	movs	r3, r0
   2fdee:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2fdf0:	2387      	movs	r3, #135	; 0x87
   2fdf2:	009b      	lsls	r3, r3, #2
   2fdf4:	18fb      	adds	r3, r7, r3
   2fdf6:	2284      	movs	r2, #132	; 0x84
   2fdf8:	0092      	lsls	r2, r2, #2
   2fdfa:	18ba      	adds	r2, r7, r2
   2fdfc:	619a      	str	r2, [r3, #24]
   2fdfe:	2387      	movs	r3, #135	; 0x87
   2fe00:	009b      	lsls	r3, r3, #2
   2fe02:	18fb      	adds	r3, r7, r3
   2fe04:	2210      	movs	r2, #16
   2fe06:	18ba      	adds	r2, r7, r2
   2fe08:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2fe0a:	4bc6      	ldr	r3, [pc, #792]	; (30124 <f_open+0x3a0>)
   2fe0c:	18fb      	adds	r3, r7, r3
   2fe0e:	781b      	ldrb	r3, [r3, #0]
   2fe10:	2b00      	cmp	r3, #0
   2fe12:	d10b      	bne.n	2fe2c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2fe14:	68ba      	ldr	r2, [r7, #8]
   2fe16:	4bc3      	ldr	r3, [pc, #780]	; (30124 <f_open+0x3a0>)
   2fe18:	18fc      	adds	r4, r7, r3
   2fe1a:	2387      	movs	r3, #135	; 0x87
   2fe1c:	009b      	lsls	r3, r3, #2
   2fe1e:	18fb      	adds	r3, r7, r3
   2fe20:	0011      	movs	r1, r2
   2fe22:	0018      	movs	r0, r3
   2fe24:	4bc1      	ldr	r3, [pc, #772]	; (3012c <f_open+0x3a8>)
   2fe26:	4798      	blx	r3
   2fe28:	0003      	movs	r3, r0
   2fe2a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2fe2c:	2387      	movs	r3, #135	; 0x87
   2fe2e:	009b      	lsls	r3, r3, #2
   2fe30:	18fb      	adds	r3, r7, r3
   2fe32:	695b      	ldr	r3, [r3, #20]
   2fe34:	2292      	movs	r2, #146	; 0x92
   2fe36:	0092      	lsls	r2, r2, #2
   2fe38:	18ba      	adds	r2, r7, r2
   2fe3a:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2fe3c:	4bb9      	ldr	r3, [pc, #740]	; (30124 <f_open+0x3a0>)
   2fe3e:	18fb      	adds	r3, r7, r3
   2fe40:	781b      	ldrb	r3, [r3, #0]
   2fe42:	2b00      	cmp	r3, #0
   2fe44:	d109      	bne.n	2fe5a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2fe46:	2392      	movs	r3, #146	; 0x92
   2fe48:	009b      	lsls	r3, r3, #2
   2fe4a:	18fb      	adds	r3, r7, r3
   2fe4c:	681b      	ldr	r3, [r3, #0]
   2fe4e:	2b00      	cmp	r3, #0
   2fe50:	d103      	bne.n	2fe5a <f_open+0xd6>
			res = FR_INVALID_NAME;
   2fe52:	4bb4      	ldr	r3, [pc, #720]	; (30124 <f_open+0x3a0>)
   2fe54:	18fb      	adds	r3, r7, r3
   2fe56:	2206      	movs	r2, #6
   2fe58:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2fe5a:	4bb1      	ldr	r3, [pc, #708]	; (30120 <f_open+0x39c>)
   2fe5c:	2294      	movs	r2, #148	; 0x94
   2fe5e:	0092      	lsls	r2, r2, #2
   2fe60:	4694      	mov	ip, r2
   2fe62:	44bc      	add	ip, r7
   2fe64:	4463      	add	r3, ip
   2fe66:	781b      	ldrb	r3, [r3, #0]
   2fe68:	221c      	movs	r2, #28
   2fe6a:	4013      	ands	r3, r2
   2fe6c:	d100      	bne.n	2fe70 <f_open+0xec>
   2fe6e:	e141      	b.n	300f4 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2fe70:	4bac      	ldr	r3, [pc, #688]	; (30124 <f_open+0x3a0>)
   2fe72:	18fb      	adds	r3, r7, r3
   2fe74:	781b      	ldrb	r3, [r3, #0]
   2fe76:	2b00      	cmp	r3, #0
   2fe78:	d027      	beq.n	2feca <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2fe7a:	4baa      	ldr	r3, [pc, #680]	; (30124 <f_open+0x3a0>)
   2fe7c:	18fb      	adds	r3, r7, r3
   2fe7e:	781b      	ldrb	r3, [r3, #0]
   2fe80:	2b04      	cmp	r3, #4
   2fe82:	d109      	bne.n	2fe98 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2fe84:	4ba7      	ldr	r3, [pc, #668]	; (30124 <f_open+0x3a0>)
   2fe86:	18fc      	adds	r4, r7, r3
   2fe88:	2387      	movs	r3, #135	; 0x87
   2fe8a:	009b      	lsls	r3, r3, #2
   2fe8c:	18fb      	adds	r3, r7, r3
   2fe8e:	0018      	movs	r0, r3
   2fe90:	4ba7      	ldr	r3, [pc, #668]	; (30130 <f_open+0x3ac>)
   2fe92:	4798      	blx	r3
   2fe94:	0003      	movs	r3, r0
   2fe96:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2fe98:	4ba1      	ldr	r3, [pc, #644]	; (30120 <f_open+0x39c>)
   2fe9a:	2294      	movs	r2, #148	; 0x94
   2fe9c:	0092      	lsls	r2, r2, #2
   2fe9e:	4694      	mov	ip, r2
   2fea0:	44bc      	add	ip, r7
   2fea2:	4463      	add	r3, ip
   2fea4:	4a9e      	ldr	r2, [pc, #632]	; (30120 <f_open+0x39c>)
   2fea6:	2194      	movs	r1, #148	; 0x94
   2fea8:	0089      	lsls	r1, r1, #2
   2feaa:	468c      	mov	ip, r1
   2feac:	44bc      	add	ip, r7
   2feae:	4462      	add	r2, ip
   2feb0:	7812      	ldrb	r2, [r2, #0]
   2feb2:	2108      	movs	r1, #8
   2feb4:	430a      	orrs	r2, r1
   2feb6:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2feb8:	2387      	movs	r3, #135	; 0x87
   2feba:	009b      	lsls	r3, r3, #2
   2febc:	18fb      	adds	r3, r7, r3
   2febe:	695b      	ldr	r3, [r3, #20]
   2fec0:	2292      	movs	r2, #146	; 0x92
   2fec2:	0092      	lsls	r2, r2, #2
   2fec4:	18ba      	adds	r2, r7, r2
   2fec6:	6013      	str	r3, [r2, #0]
   2fec8:	e01c      	b.n	2ff04 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2feca:	2392      	movs	r3, #146	; 0x92
   2fecc:	009b      	lsls	r3, r3, #2
   2fece:	18fb      	adds	r3, r7, r3
   2fed0:	681b      	ldr	r3, [r3, #0]
   2fed2:	330b      	adds	r3, #11
   2fed4:	781b      	ldrb	r3, [r3, #0]
   2fed6:	001a      	movs	r2, r3
   2fed8:	2311      	movs	r3, #17
   2feda:	4013      	ands	r3, r2
   2fedc:	d004      	beq.n	2fee8 <f_open+0x164>
				res = FR_DENIED;
   2fede:	4b91      	ldr	r3, [pc, #580]	; (30124 <f_open+0x3a0>)
   2fee0:	18fb      	adds	r3, r7, r3
   2fee2:	2207      	movs	r2, #7
   2fee4:	701a      	strb	r2, [r3, #0]
   2fee6:	e00d      	b.n	2ff04 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2fee8:	4b8d      	ldr	r3, [pc, #564]	; (30120 <f_open+0x39c>)
   2feea:	2294      	movs	r2, #148	; 0x94
   2feec:	0092      	lsls	r2, r2, #2
   2feee:	4694      	mov	ip, r2
   2fef0:	44bc      	add	ip, r7
   2fef2:	4463      	add	r3, ip
   2fef4:	781b      	ldrb	r3, [r3, #0]
   2fef6:	2204      	movs	r2, #4
   2fef8:	4013      	ands	r3, r2
   2fefa:	d003      	beq.n	2ff04 <f_open+0x180>
					res = FR_EXIST;
   2fefc:	4b89      	ldr	r3, [pc, #548]	; (30124 <f_open+0x3a0>)
   2fefe:	18fb      	adds	r3, r7, r3
   2ff00:	2208      	movs	r2, #8
   2ff02:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2ff04:	4b87      	ldr	r3, [pc, #540]	; (30124 <f_open+0x3a0>)
   2ff06:	18fb      	adds	r3, r7, r3
   2ff08:	781b      	ldrb	r3, [r3, #0]
   2ff0a:	2b00      	cmp	r3, #0
   2ff0c:	d000      	beq.n	2ff10 <f_open+0x18c>
   2ff0e:	e12f      	b.n	30170 <f_open+0x3ec>
   2ff10:	4b83      	ldr	r3, [pc, #524]	; (30120 <f_open+0x39c>)
   2ff12:	2294      	movs	r2, #148	; 0x94
   2ff14:	0092      	lsls	r2, r2, #2
   2ff16:	4694      	mov	ip, r2
   2ff18:	44bc      	add	ip, r7
   2ff1a:	4463      	add	r3, ip
   2ff1c:	781b      	ldrb	r3, [r3, #0]
   2ff1e:	2208      	movs	r2, #8
   2ff20:	4013      	ands	r3, r2
   2ff22:	d100      	bne.n	2ff26 <f_open+0x1a2>
   2ff24:	e124      	b.n	30170 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2ff26:	4b83      	ldr	r3, [pc, #524]	; (30134 <f_open+0x3b0>)
   2ff28:	4798      	blx	r3
   2ff2a:	0003      	movs	r3, r0
   2ff2c:	2291      	movs	r2, #145	; 0x91
   2ff2e:	0092      	lsls	r2, r2, #2
   2ff30:	18ba      	adds	r2, r7, r2
   2ff32:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2ff34:	2392      	movs	r3, #146	; 0x92
   2ff36:	009b      	lsls	r3, r3, #2
   2ff38:	18fb      	adds	r3, r7, r3
   2ff3a:	681b      	ldr	r3, [r3, #0]
   2ff3c:	330e      	adds	r3, #14
   2ff3e:	2291      	movs	r2, #145	; 0x91
   2ff40:	0092      	lsls	r2, r2, #2
   2ff42:	18ba      	adds	r2, r7, r2
   2ff44:	6812      	ldr	r2, [r2, #0]
   2ff46:	b2d2      	uxtb	r2, r2
   2ff48:	701a      	strb	r2, [r3, #0]
   2ff4a:	2392      	movs	r3, #146	; 0x92
   2ff4c:	009b      	lsls	r3, r3, #2
   2ff4e:	18fb      	adds	r3, r7, r3
   2ff50:	681b      	ldr	r3, [r3, #0]
   2ff52:	330f      	adds	r3, #15
   2ff54:	2291      	movs	r2, #145	; 0x91
   2ff56:	0092      	lsls	r2, r2, #2
   2ff58:	18ba      	adds	r2, r7, r2
   2ff5a:	6812      	ldr	r2, [r2, #0]
   2ff5c:	b292      	uxth	r2, r2
   2ff5e:	0a12      	lsrs	r2, r2, #8
   2ff60:	b292      	uxth	r2, r2
   2ff62:	b2d2      	uxtb	r2, r2
   2ff64:	701a      	strb	r2, [r3, #0]
   2ff66:	2392      	movs	r3, #146	; 0x92
   2ff68:	009b      	lsls	r3, r3, #2
   2ff6a:	18fb      	adds	r3, r7, r3
   2ff6c:	681b      	ldr	r3, [r3, #0]
   2ff6e:	3310      	adds	r3, #16
   2ff70:	2291      	movs	r2, #145	; 0x91
   2ff72:	0092      	lsls	r2, r2, #2
   2ff74:	18ba      	adds	r2, r7, r2
   2ff76:	6812      	ldr	r2, [r2, #0]
   2ff78:	0c12      	lsrs	r2, r2, #16
   2ff7a:	b2d2      	uxtb	r2, r2
   2ff7c:	701a      	strb	r2, [r3, #0]
   2ff7e:	2392      	movs	r3, #146	; 0x92
   2ff80:	009b      	lsls	r3, r3, #2
   2ff82:	18fb      	adds	r3, r7, r3
   2ff84:	681b      	ldr	r3, [r3, #0]
   2ff86:	3311      	adds	r3, #17
   2ff88:	2291      	movs	r2, #145	; 0x91
   2ff8a:	0092      	lsls	r2, r2, #2
   2ff8c:	18ba      	adds	r2, r7, r2
   2ff8e:	6812      	ldr	r2, [r2, #0]
   2ff90:	0e12      	lsrs	r2, r2, #24
   2ff92:	b2d2      	uxtb	r2, r2
   2ff94:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2ff96:	2392      	movs	r3, #146	; 0x92
   2ff98:	009b      	lsls	r3, r3, #2
   2ff9a:	18fb      	adds	r3, r7, r3
   2ff9c:	681b      	ldr	r3, [r3, #0]
   2ff9e:	330b      	adds	r3, #11
   2ffa0:	2200      	movs	r2, #0
   2ffa2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2ffa4:	2392      	movs	r3, #146	; 0x92
   2ffa6:	009b      	lsls	r3, r3, #2
   2ffa8:	18fb      	adds	r3, r7, r3
   2ffaa:	681b      	ldr	r3, [r3, #0]
   2ffac:	331c      	adds	r3, #28
   2ffae:	2200      	movs	r2, #0
   2ffb0:	701a      	strb	r2, [r3, #0]
   2ffb2:	2392      	movs	r3, #146	; 0x92
   2ffb4:	009b      	lsls	r3, r3, #2
   2ffb6:	18fb      	adds	r3, r7, r3
   2ffb8:	681b      	ldr	r3, [r3, #0]
   2ffba:	331d      	adds	r3, #29
   2ffbc:	2200      	movs	r2, #0
   2ffbe:	701a      	strb	r2, [r3, #0]
   2ffc0:	2392      	movs	r3, #146	; 0x92
   2ffc2:	009b      	lsls	r3, r3, #2
   2ffc4:	18fb      	adds	r3, r7, r3
   2ffc6:	681b      	ldr	r3, [r3, #0]
   2ffc8:	331e      	adds	r3, #30
   2ffca:	2200      	movs	r2, #0
   2ffcc:	701a      	strb	r2, [r3, #0]
   2ffce:	2392      	movs	r3, #146	; 0x92
   2ffd0:	009b      	lsls	r3, r3, #2
   2ffd2:	18fb      	adds	r3, r7, r3
   2ffd4:	681b      	ldr	r3, [r3, #0]
   2ffd6:	331f      	adds	r3, #31
   2ffd8:	2200      	movs	r2, #0
   2ffda:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2ffdc:	2392      	movs	r3, #146	; 0x92
   2ffde:	009b      	lsls	r3, r3, #2
   2ffe0:	18fb      	adds	r3, r7, r3
   2ffe2:	681b      	ldr	r3, [r3, #0]
   2ffe4:	3315      	adds	r3, #21
   2ffe6:	781b      	ldrb	r3, [r3, #0]
   2ffe8:	021b      	lsls	r3, r3, #8
   2ffea:	b21a      	sxth	r2, r3
   2ffec:	2392      	movs	r3, #146	; 0x92
   2ffee:	009b      	lsls	r3, r3, #2
   2fff0:	18fb      	adds	r3, r7, r3
   2fff2:	681b      	ldr	r3, [r3, #0]
   2fff4:	3314      	adds	r3, #20
   2fff6:	781b      	ldrb	r3, [r3, #0]
   2fff8:	b21b      	sxth	r3, r3
   2fffa:	4313      	orrs	r3, r2
   2fffc:	b21b      	sxth	r3, r3
   2fffe:	b29b      	uxth	r3, r3
   30000:	041b      	lsls	r3, r3, #16
   30002:	2292      	movs	r2, #146	; 0x92
   30004:	0092      	lsls	r2, r2, #2
   30006:	18ba      	adds	r2, r7, r2
   30008:	6812      	ldr	r2, [r2, #0]
   3000a:	321b      	adds	r2, #27
   3000c:	7812      	ldrb	r2, [r2, #0]
   3000e:	0212      	lsls	r2, r2, #8
   30010:	b211      	sxth	r1, r2
   30012:	2292      	movs	r2, #146	; 0x92
   30014:	0092      	lsls	r2, r2, #2
   30016:	18ba      	adds	r2, r7, r2
   30018:	6812      	ldr	r2, [r2, #0]
   3001a:	321a      	adds	r2, #26
   3001c:	7812      	ldrb	r2, [r2, #0]
   3001e:	b212      	sxth	r2, r2
   30020:	430a      	orrs	r2, r1
   30022:	b212      	sxth	r2, r2
   30024:	b292      	uxth	r2, r2
   30026:	4313      	orrs	r3, r2
   30028:	2290      	movs	r2, #144	; 0x90
   3002a:	0092      	lsls	r2, r2, #2
   3002c:	18ba      	adds	r2, r7, r2
   3002e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   30030:	2392      	movs	r3, #146	; 0x92
   30032:	009b      	lsls	r3, r3, #2
   30034:	18fb      	adds	r3, r7, r3
   30036:	681b      	ldr	r3, [r3, #0]
   30038:	331a      	adds	r3, #26
   3003a:	2200      	movs	r2, #0
   3003c:	701a      	strb	r2, [r3, #0]
   3003e:	2392      	movs	r3, #146	; 0x92
   30040:	009b      	lsls	r3, r3, #2
   30042:	18fb      	adds	r3, r7, r3
   30044:	681b      	ldr	r3, [r3, #0]
   30046:	331b      	adds	r3, #27
   30048:	2200      	movs	r2, #0
   3004a:	701a      	strb	r2, [r3, #0]
   3004c:	2392      	movs	r3, #146	; 0x92
   3004e:	009b      	lsls	r3, r3, #2
   30050:	18fb      	adds	r3, r7, r3
   30052:	681b      	ldr	r3, [r3, #0]
   30054:	3314      	adds	r3, #20
   30056:	2200      	movs	r2, #0
   30058:	701a      	strb	r2, [r3, #0]
   3005a:	2392      	movs	r3, #146	; 0x92
   3005c:	009b      	lsls	r3, r3, #2
   3005e:	18fb      	adds	r3, r7, r3
   30060:	681b      	ldr	r3, [r3, #0]
   30062:	3315      	adds	r3, #21
   30064:	2200      	movs	r2, #0
   30066:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   30068:	2387      	movs	r3, #135	; 0x87
   3006a:	009b      	lsls	r3, r3, #2
   3006c:	18fb      	adds	r3, r7, r3
   3006e:	681b      	ldr	r3, [r3, #0]
   30070:	2201      	movs	r2, #1
   30072:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   30074:	2390      	movs	r3, #144	; 0x90
   30076:	009b      	lsls	r3, r3, #2
   30078:	18fb      	adds	r3, r7, r3
   3007a:	681b      	ldr	r3, [r3, #0]
   3007c:	2b00      	cmp	r3, #0
   3007e:	d100      	bne.n	30082 <f_open+0x2fe>
   30080:	e076      	b.n	30170 <f_open+0x3ec>
				dw = dj.fs->winsect;
   30082:	2387      	movs	r3, #135	; 0x87
   30084:	009b      	lsls	r3, r3, #2
   30086:	18fb      	adds	r3, r7, r3
   30088:	681b      	ldr	r3, [r3, #0]
   3008a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3008c:	2291      	movs	r2, #145	; 0x91
   3008e:	0092      	lsls	r2, r2, #2
   30090:	18ba      	adds	r2, r7, r2
   30092:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   30094:	2387      	movs	r3, #135	; 0x87
   30096:	009b      	lsls	r3, r3, #2
   30098:	18fb      	adds	r3, r7, r3
   3009a:	681b      	ldr	r3, [r3, #0]
   3009c:	4a21      	ldr	r2, [pc, #132]	; (30124 <f_open+0x3a0>)
   3009e:	18bc      	adds	r4, r7, r2
   300a0:	2290      	movs	r2, #144	; 0x90
   300a2:	0092      	lsls	r2, r2, #2
   300a4:	18ba      	adds	r2, r7, r2
   300a6:	6812      	ldr	r2, [r2, #0]
   300a8:	0011      	movs	r1, r2
   300aa:	0018      	movs	r0, r3
   300ac:	4b22      	ldr	r3, [pc, #136]	; (30138 <f_open+0x3b4>)
   300ae:	4798      	blx	r3
   300b0:	0003      	movs	r3, r0
   300b2:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   300b4:	4b1b      	ldr	r3, [pc, #108]	; (30124 <f_open+0x3a0>)
   300b6:	18fb      	adds	r3, r7, r3
   300b8:	781b      	ldrb	r3, [r3, #0]
   300ba:	2b00      	cmp	r3, #0
   300bc:	d158      	bne.n	30170 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   300be:	2387      	movs	r3, #135	; 0x87
   300c0:	009b      	lsls	r3, r3, #2
   300c2:	18fb      	adds	r3, r7, r3
   300c4:	681b      	ldr	r3, [r3, #0]
   300c6:	2290      	movs	r2, #144	; 0x90
   300c8:	0092      	lsls	r2, r2, #2
   300ca:	18ba      	adds	r2, r7, r2
   300cc:	6812      	ldr	r2, [r2, #0]
   300ce:	3a01      	subs	r2, #1
   300d0:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   300d2:	2387      	movs	r3, #135	; 0x87
   300d4:	009b      	lsls	r3, r3, #2
   300d6:	18fb      	adds	r3, r7, r3
   300d8:	681b      	ldr	r3, [r3, #0]
   300da:	4a12      	ldr	r2, [pc, #72]	; (30124 <f_open+0x3a0>)
   300dc:	18bc      	adds	r4, r7, r2
   300de:	2291      	movs	r2, #145	; 0x91
   300e0:	0092      	lsls	r2, r2, #2
   300e2:	18ba      	adds	r2, r7, r2
   300e4:	6812      	ldr	r2, [r2, #0]
   300e6:	0011      	movs	r1, r2
   300e8:	0018      	movs	r0, r3
   300ea:	4b14      	ldr	r3, [pc, #80]	; (3013c <f_open+0x3b8>)
   300ec:	4798      	blx	r3
   300ee:	0003      	movs	r3, r0
   300f0:	7023      	strb	r3, [r4, #0]
   300f2:	e03d      	b.n	30170 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   300f4:	4b0b      	ldr	r3, [pc, #44]	; (30124 <f_open+0x3a0>)
   300f6:	18fb      	adds	r3, r7, r3
   300f8:	781b      	ldrb	r3, [r3, #0]
   300fa:	2b00      	cmp	r3, #0
   300fc:	d138      	bne.n	30170 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   300fe:	2392      	movs	r3, #146	; 0x92
   30100:	009b      	lsls	r3, r3, #2
   30102:	18fb      	adds	r3, r7, r3
   30104:	681b      	ldr	r3, [r3, #0]
   30106:	330b      	adds	r3, #11
   30108:	781b      	ldrb	r3, [r3, #0]
   3010a:	001a      	movs	r2, r3
   3010c:	2310      	movs	r3, #16
   3010e:	4013      	ands	r3, r2
   30110:	d016      	beq.n	30140 <f_open+0x3bc>
				res = FR_NO_FILE;
   30112:	4b04      	ldr	r3, [pc, #16]	; (30124 <f_open+0x3a0>)
   30114:	18fb      	adds	r3, r7, r3
   30116:	2204      	movs	r2, #4
   30118:	701a      	strb	r2, [r3, #0]
   3011a:	e029      	b.n	30170 <f_open+0x3ec>
   3011c:	fffffdac 	.word	0xfffffdac
   30120:	fffffdb7 	.word	0xfffffdb7
   30124:	0000024f 	.word	0x0000024f
   30128:	0002f6dd 	.word	0x0002f6dd
   3012c:	0002f4d1 	.word	0x0002f4d1
   30130:	0002ed21 	.word	0x0002ed21
   30134:	0002db19 	.word	0x0002db19
   30138:	0002e29d 	.word	0x0002e29d
   3013c:	0002dc5d 	.word	0x0002dc5d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   30140:	4b5a      	ldr	r3, [pc, #360]	; (302ac <f_open+0x528>)
   30142:	2294      	movs	r2, #148	; 0x94
   30144:	0092      	lsls	r2, r2, #2
   30146:	4694      	mov	ip, r2
   30148:	44bc      	add	ip, r7
   3014a:	4463      	add	r3, ip
   3014c:	781b      	ldrb	r3, [r3, #0]
   3014e:	2202      	movs	r2, #2
   30150:	4013      	ands	r3, r2
   30152:	d00d      	beq.n	30170 <f_open+0x3ec>
   30154:	2392      	movs	r3, #146	; 0x92
   30156:	009b      	lsls	r3, r3, #2
   30158:	18fb      	adds	r3, r7, r3
   3015a:	681b      	ldr	r3, [r3, #0]
   3015c:	330b      	adds	r3, #11
   3015e:	781b      	ldrb	r3, [r3, #0]
   30160:	001a      	movs	r2, r3
   30162:	2301      	movs	r3, #1
   30164:	4013      	ands	r3, r2
   30166:	d003      	beq.n	30170 <f_open+0x3ec>
					res = FR_DENIED;
   30168:	4b51      	ldr	r3, [pc, #324]	; (302b0 <f_open+0x52c>)
   3016a:	18fb      	adds	r3, r7, r3
   3016c:	2207      	movs	r2, #7
   3016e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   30170:	4b4f      	ldr	r3, [pc, #316]	; (302b0 <f_open+0x52c>)
   30172:	18fb      	adds	r3, r7, r3
   30174:	781b      	ldrb	r3, [r3, #0]
   30176:	2b00      	cmp	r3, #0
   30178:	d126      	bne.n	301c8 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   3017a:	4b4c      	ldr	r3, [pc, #304]	; (302ac <f_open+0x528>)
   3017c:	2294      	movs	r2, #148	; 0x94
   3017e:	0092      	lsls	r2, r2, #2
   30180:	4694      	mov	ip, r2
   30182:	44bc      	add	ip, r7
   30184:	4463      	add	r3, ip
   30186:	781b      	ldrb	r3, [r3, #0]
   30188:	2208      	movs	r2, #8
   3018a:	4013      	ands	r3, r2
   3018c:	d00f      	beq.n	301ae <f_open+0x42a>
			mode |= FA__WRITTEN;
   3018e:	4b47      	ldr	r3, [pc, #284]	; (302ac <f_open+0x528>)
   30190:	2294      	movs	r2, #148	; 0x94
   30192:	0092      	lsls	r2, r2, #2
   30194:	4694      	mov	ip, r2
   30196:	44bc      	add	ip, r7
   30198:	4463      	add	r3, ip
   3019a:	4a44      	ldr	r2, [pc, #272]	; (302ac <f_open+0x528>)
   3019c:	2194      	movs	r1, #148	; 0x94
   3019e:	0089      	lsls	r1, r1, #2
   301a0:	468c      	mov	ip, r1
   301a2:	44bc      	add	ip, r7
   301a4:	4462      	add	r2, ip
   301a6:	7812      	ldrb	r2, [r2, #0]
   301a8:	2120      	movs	r1, #32
   301aa:	430a      	orrs	r2, r1
   301ac:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   301ae:	2387      	movs	r3, #135	; 0x87
   301b0:	009b      	lsls	r3, r3, #2
   301b2:	18fb      	adds	r3, r7, r3
   301b4:	681b      	ldr	r3, [r3, #0]
   301b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   301b8:	68fb      	ldr	r3, [r7, #12]
   301ba:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   301bc:	68fb      	ldr	r3, [r7, #12]
   301be:	2292      	movs	r2, #146	; 0x92
   301c0:	0092      	lsls	r2, r2, #2
   301c2:	18ba      	adds	r2, r7, r2
   301c4:	6812      	ldr	r2, [r2, #0]
   301c6:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   301c8:	4b39      	ldr	r3, [pc, #228]	; (302b0 <f_open+0x52c>)
   301ca:	18fb      	adds	r3, r7, r3
   301cc:	781b      	ldrb	r3, [r3, #0]
   301ce:	2b00      	cmp	r3, #0
   301d0:	d163      	bne.n	3029a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   301d2:	68fb      	ldr	r3, [r7, #12]
   301d4:	4a35      	ldr	r2, [pc, #212]	; (302ac <f_open+0x528>)
   301d6:	2194      	movs	r1, #148	; 0x94
   301d8:	0089      	lsls	r1, r1, #2
   301da:	468c      	mov	ip, r1
   301dc:	44bc      	add	ip, r7
   301de:	4462      	add	r2, ip
   301e0:	7812      	ldrb	r2, [r2, #0]
   301e2:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   301e4:	2392      	movs	r3, #146	; 0x92
   301e6:	009b      	lsls	r3, r3, #2
   301e8:	18fb      	adds	r3, r7, r3
   301ea:	681b      	ldr	r3, [r3, #0]
   301ec:	3315      	adds	r3, #21
   301ee:	781b      	ldrb	r3, [r3, #0]
   301f0:	021b      	lsls	r3, r3, #8
   301f2:	b21a      	sxth	r2, r3
   301f4:	2392      	movs	r3, #146	; 0x92
   301f6:	009b      	lsls	r3, r3, #2
   301f8:	18fb      	adds	r3, r7, r3
   301fa:	681b      	ldr	r3, [r3, #0]
   301fc:	3314      	adds	r3, #20
   301fe:	781b      	ldrb	r3, [r3, #0]
   30200:	b21b      	sxth	r3, r3
   30202:	4313      	orrs	r3, r2
   30204:	b21b      	sxth	r3, r3
   30206:	b29b      	uxth	r3, r3
   30208:	041b      	lsls	r3, r3, #16
   3020a:	2292      	movs	r2, #146	; 0x92
   3020c:	0092      	lsls	r2, r2, #2
   3020e:	18ba      	adds	r2, r7, r2
   30210:	6812      	ldr	r2, [r2, #0]
   30212:	321b      	adds	r2, #27
   30214:	7812      	ldrb	r2, [r2, #0]
   30216:	0212      	lsls	r2, r2, #8
   30218:	b211      	sxth	r1, r2
   3021a:	2292      	movs	r2, #146	; 0x92
   3021c:	0092      	lsls	r2, r2, #2
   3021e:	18ba      	adds	r2, r7, r2
   30220:	6812      	ldr	r2, [r2, #0]
   30222:	321a      	adds	r2, #26
   30224:	7812      	ldrb	r2, [r2, #0]
   30226:	b212      	sxth	r2, r2
   30228:	430a      	orrs	r2, r1
   3022a:	b212      	sxth	r2, r2
   3022c:	b292      	uxth	r2, r2
   3022e:	431a      	orrs	r2, r3
   30230:	68fb      	ldr	r3, [r7, #12]
   30232:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   30234:	2392      	movs	r3, #146	; 0x92
   30236:	009b      	lsls	r3, r3, #2
   30238:	18fb      	adds	r3, r7, r3
   3023a:	681b      	ldr	r3, [r3, #0]
   3023c:	331f      	adds	r3, #31
   3023e:	781b      	ldrb	r3, [r3, #0]
   30240:	061a      	lsls	r2, r3, #24
   30242:	2392      	movs	r3, #146	; 0x92
   30244:	009b      	lsls	r3, r3, #2
   30246:	18fb      	adds	r3, r7, r3
   30248:	681b      	ldr	r3, [r3, #0]
   3024a:	331e      	adds	r3, #30
   3024c:	781b      	ldrb	r3, [r3, #0]
   3024e:	041b      	lsls	r3, r3, #16
   30250:	4313      	orrs	r3, r2
   30252:	2292      	movs	r2, #146	; 0x92
   30254:	0092      	lsls	r2, r2, #2
   30256:	18ba      	adds	r2, r7, r2
   30258:	6812      	ldr	r2, [r2, #0]
   3025a:	321d      	adds	r2, #29
   3025c:	7812      	ldrb	r2, [r2, #0]
   3025e:	0212      	lsls	r2, r2, #8
   30260:	4313      	orrs	r3, r2
   30262:	2292      	movs	r2, #146	; 0x92
   30264:	0092      	lsls	r2, r2, #2
   30266:	18ba      	adds	r2, r7, r2
   30268:	6812      	ldr	r2, [r2, #0]
   3026a:	321c      	adds	r2, #28
   3026c:	7812      	ldrb	r2, [r2, #0]
   3026e:	431a      	orrs	r2, r3
   30270:	68fb      	ldr	r3, [r7, #12]
   30272:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   30274:	68fb      	ldr	r3, [r7, #12]
   30276:	2200      	movs	r2, #0
   30278:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   3027a:	68fb      	ldr	r3, [r7, #12]
   3027c:	2200      	movs	r2, #0
   3027e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   30280:	2387      	movs	r3, #135	; 0x87
   30282:	009b      	lsls	r3, r3, #2
   30284:	18fb      	adds	r3, r7, r3
   30286:	681a      	ldr	r2, [r3, #0]
   30288:	68fb      	ldr	r3, [r7, #12]
   3028a:	601a      	str	r2, [r3, #0]
   3028c:	2387      	movs	r3, #135	; 0x87
   3028e:	009b      	lsls	r3, r3, #2
   30290:	18fb      	adds	r3, r7, r3
   30292:	681b      	ldr	r3, [r3, #0]
   30294:	88da      	ldrh	r2, [r3, #6]
   30296:	68fb      	ldr	r3, [r7, #12]
   30298:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   3029a:	4b05      	ldr	r3, [pc, #20]	; (302b0 <f_open+0x52c>)
   3029c:	18fb      	adds	r3, r7, r3
   3029e:	781b      	ldrb	r3, [r3, #0]
}
   302a0:	0018      	movs	r0, r3
   302a2:	46bd      	mov	sp, r7
   302a4:	2395      	movs	r3, #149	; 0x95
   302a6:	009b      	lsls	r3, r3, #2
   302a8:	449d      	add	sp, r3
   302aa:	bd90      	pop	{r4, r7, pc}
   302ac:	fffffdb7 	.word	0xfffffdb7
   302b0:	0000024f 	.word	0x0000024f

000302b4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   302b4:	b590      	push	{r4, r7, lr}
   302b6:	b08b      	sub	sp, #44	; 0x2c
   302b8:	af00      	add	r7, sp, #0
   302ba:	60f8      	str	r0, [r7, #12]
   302bc:	60b9      	str	r1, [r7, #8]
   302be:	607a      	str	r2, [r7, #4]
   302c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   302c2:	68bb      	ldr	r3, [r7, #8]
   302c4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   302c6:	683b      	ldr	r3, [r7, #0]
   302c8:	2200      	movs	r2, #0
   302ca:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   302cc:	68fb      	ldr	r3, [r7, #12]
   302ce:	681a      	ldr	r2, [r3, #0]
   302d0:	68fb      	ldr	r3, [r7, #12]
   302d2:	889b      	ldrh	r3, [r3, #4]
   302d4:	2117      	movs	r1, #23
   302d6:	187c      	adds	r4, r7, r1
   302d8:	0019      	movs	r1, r3
   302da:	0010      	movs	r0, r2
   302dc:	4bc3      	ldr	r3, [pc, #780]	; (305ec <f_write+0x338>)
   302de:	4798      	blx	r3
   302e0:	0003      	movs	r3, r0
   302e2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   302e4:	2317      	movs	r3, #23
   302e6:	18fb      	adds	r3, r7, r3
   302e8:	781b      	ldrb	r3, [r3, #0]
   302ea:	2b00      	cmp	r3, #0
   302ec:	d003      	beq.n	302f6 <f_write+0x42>
   302ee:	2317      	movs	r3, #23
   302f0:	18fb      	adds	r3, r7, r3
   302f2:	781b      	ldrb	r3, [r3, #0]
   302f4:	e176      	b.n	305e4 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   302f6:	68fb      	ldr	r3, [r7, #12]
   302f8:	799b      	ldrb	r3, [r3, #6]
   302fa:	b25b      	sxtb	r3, r3
   302fc:	2b00      	cmp	r3, #0
   302fe:	da01      	bge.n	30304 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   30300:	2302      	movs	r3, #2
   30302:	e16f      	b.n	305e4 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   30304:	68fb      	ldr	r3, [r7, #12]
   30306:	799b      	ldrb	r3, [r3, #6]
   30308:	001a      	movs	r2, r3
   3030a:	2302      	movs	r3, #2
   3030c:	4013      	ands	r3, r2
   3030e:	d101      	bne.n	30314 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   30310:	2307      	movs	r3, #7
   30312:	e167      	b.n	305e4 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   30314:	68fb      	ldr	r3, [r7, #12]
   30316:	68da      	ldr	r2, [r3, #12]
   30318:	687b      	ldr	r3, [r7, #4]
   3031a:	18d2      	adds	r2, r2, r3
   3031c:	68fb      	ldr	r3, [r7, #12]
   3031e:	68db      	ldr	r3, [r3, #12]
   30320:	429a      	cmp	r2, r3
   30322:	d300      	bcc.n	30326 <f_write+0x72>
   30324:	e146      	b.n	305b4 <f_write+0x300>
   30326:	2300      	movs	r3, #0
   30328:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   3032a:	e143      	b.n	305b4 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   3032c:	68fb      	ldr	r3, [r7, #12]
   3032e:	689b      	ldr	r3, [r3, #8]
   30330:	05db      	lsls	r3, r3, #23
   30332:	0ddb      	lsrs	r3, r3, #23
   30334:	d000      	beq.n	30338 <f_write+0x84>
   30336:	e0f6      	b.n	30526 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   30338:	68fb      	ldr	r3, [r7, #12]
   3033a:	689b      	ldr	r3, [r3, #8]
   3033c:	0a5b      	lsrs	r3, r3, #9
   3033e:	b2da      	uxtb	r2, r3
   30340:	68fb      	ldr	r3, [r7, #12]
   30342:	681b      	ldr	r3, [r3, #0]
   30344:	789b      	ldrb	r3, [r3, #2]
   30346:	3b01      	subs	r3, #1
   30348:	b2d9      	uxtb	r1, r3
   3034a:	2316      	movs	r3, #22
   3034c:	18fb      	adds	r3, r7, r3
   3034e:	400a      	ands	r2, r1
   30350:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   30352:	2316      	movs	r3, #22
   30354:	18fb      	adds	r3, r7, r3
   30356:	781b      	ldrb	r3, [r3, #0]
   30358:	2b00      	cmp	r3, #0
   3035a:	d140      	bne.n	303de <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   3035c:	68fb      	ldr	r3, [r7, #12]
   3035e:	689b      	ldr	r3, [r3, #8]
   30360:	2b00      	cmp	r3, #0
   30362:	d111      	bne.n	30388 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   30364:	68fb      	ldr	r3, [r7, #12]
   30366:	691b      	ldr	r3, [r3, #16]
   30368:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   3036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3036c:	2b00      	cmp	r3, #0
   3036e:	d115      	bne.n	3039c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   30370:	68fb      	ldr	r3, [r7, #12]
   30372:	681b      	ldr	r3, [r3, #0]
   30374:	2100      	movs	r1, #0
   30376:	0018      	movs	r0, r3
   30378:	4b9d      	ldr	r3, [pc, #628]	; (305f0 <f_write+0x33c>)
   3037a:	4798      	blx	r3
   3037c:	0003      	movs	r3, r0
   3037e:	627b      	str	r3, [r7, #36]	; 0x24
   30380:	68fb      	ldr	r3, [r7, #12]
   30382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30384:	611a      	str	r2, [r3, #16]
   30386:	e009      	b.n	3039c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   30388:	68fb      	ldr	r3, [r7, #12]
   3038a:	681a      	ldr	r2, [r3, #0]
   3038c:	68fb      	ldr	r3, [r7, #12]
   3038e:	695b      	ldr	r3, [r3, #20]
   30390:	0019      	movs	r1, r3
   30392:	0010      	movs	r0, r2
   30394:	4b96      	ldr	r3, [pc, #600]	; (305f0 <f_write+0x33c>)
   30396:	4798      	blx	r3
   30398:	0003      	movs	r3, r0
   3039a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   3039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3039e:	2b00      	cmp	r3, #0
   303a0:	d100      	bne.n	303a4 <f_write+0xf0>
   303a2:	e10c      	b.n	305be <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   303a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   303a6:	2b01      	cmp	r3, #1
   303a8:	d109      	bne.n	303be <f_write+0x10a>
   303aa:	68fb      	ldr	r3, [r7, #12]
   303ac:	799b      	ldrb	r3, [r3, #6]
   303ae:	2280      	movs	r2, #128	; 0x80
   303b0:	4252      	negs	r2, r2
   303b2:	4313      	orrs	r3, r2
   303b4:	b2da      	uxtb	r2, r3
   303b6:	68fb      	ldr	r3, [r7, #12]
   303b8:	719a      	strb	r2, [r3, #6]
   303ba:	2302      	movs	r3, #2
   303bc:	e112      	b.n	305e4 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   303be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   303c0:	3301      	adds	r3, #1
   303c2:	d109      	bne.n	303d8 <f_write+0x124>
   303c4:	68fb      	ldr	r3, [r7, #12]
   303c6:	799b      	ldrb	r3, [r3, #6]
   303c8:	2280      	movs	r2, #128	; 0x80
   303ca:	4252      	negs	r2, r2
   303cc:	4313      	orrs	r3, r2
   303ce:	b2da      	uxtb	r2, r3
   303d0:	68fb      	ldr	r3, [r7, #12]
   303d2:	719a      	strb	r2, [r3, #6]
   303d4:	2301      	movs	r3, #1
   303d6:	e105      	b.n	305e4 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   303d8:	68fb      	ldr	r3, [r7, #12]
   303da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   303dc:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   303de:	68fb      	ldr	r3, [r7, #12]
   303e0:	681b      	ldr	r3, [r3, #0]
   303e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   303e4:	68fb      	ldr	r3, [r7, #12]
   303e6:	699b      	ldr	r3, [r3, #24]
   303e8:	429a      	cmp	r2, r3
   303ea:	d111      	bne.n	30410 <f_write+0x15c>
   303ec:	68fb      	ldr	r3, [r7, #12]
   303ee:	681b      	ldr	r3, [r3, #0]
   303f0:	2100      	movs	r1, #0
   303f2:	0018      	movs	r0, r3
   303f4:	4b7f      	ldr	r3, [pc, #508]	; (305f4 <f_write+0x340>)
   303f6:	4798      	blx	r3
   303f8:	1e03      	subs	r3, r0, #0
   303fa:	d009      	beq.n	30410 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   303fc:	68fb      	ldr	r3, [r7, #12]
   303fe:	799b      	ldrb	r3, [r3, #6]
   30400:	2280      	movs	r2, #128	; 0x80
   30402:	4252      	negs	r2, r2
   30404:	4313      	orrs	r3, r2
   30406:	b2da      	uxtb	r2, r3
   30408:	68fb      	ldr	r3, [r7, #12]
   3040a:	719a      	strb	r2, [r3, #6]
   3040c:	2301      	movs	r3, #1
   3040e:	e0e9      	b.n	305e4 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   30410:	68fb      	ldr	r3, [r7, #12]
   30412:	681a      	ldr	r2, [r3, #0]
   30414:	68fb      	ldr	r3, [r7, #12]
   30416:	695b      	ldr	r3, [r3, #20]
   30418:	0019      	movs	r1, r3
   3041a:	0010      	movs	r0, r2
   3041c:	4b76      	ldr	r3, [pc, #472]	; (305f8 <f_write+0x344>)
   3041e:	4798      	blx	r3
   30420:	0003      	movs	r3, r0
   30422:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   30424:	693b      	ldr	r3, [r7, #16]
   30426:	2b00      	cmp	r3, #0
   30428:	d109      	bne.n	3043e <f_write+0x18a>
   3042a:	68fb      	ldr	r3, [r7, #12]
   3042c:	799b      	ldrb	r3, [r3, #6]
   3042e:	2280      	movs	r2, #128	; 0x80
   30430:	4252      	negs	r2, r2
   30432:	4313      	orrs	r3, r2
   30434:	b2da      	uxtb	r2, r3
   30436:	68fb      	ldr	r3, [r7, #12]
   30438:	719a      	strb	r2, [r3, #6]
   3043a:	2302      	movs	r3, #2
   3043c:	e0d2      	b.n	305e4 <f_write+0x330>
			sect += csect;
   3043e:	2316      	movs	r3, #22
   30440:	18fb      	adds	r3, r7, r3
   30442:	781b      	ldrb	r3, [r3, #0]
   30444:	693a      	ldr	r2, [r7, #16]
   30446:	18d3      	adds	r3, r2, r3
   30448:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   3044a:	687b      	ldr	r3, [r7, #4]
   3044c:	0a5b      	lsrs	r3, r3, #9
   3044e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   30450:	69fb      	ldr	r3, [r7, #28]
   30452:	2b00      	cmp	r3, #0
   30454:	d048      	beq.n	304e8 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   30456:	2316      	movs	r3, #22
   30458:	18fb      	adds	r3, r7, r3
   3045a:	781a      	ldrb	r2, [r3, #0]
   3045c:	69fb      	ldr	r3, [r7, #28]
   3045e:	18d2      	adds	r2, r2, r3
   30460:	68fb      	ldr	r3, [r7, #12]
   30462:	681b      	ldr	r3, [r3, #0]
   30464:	789b      	ldrb	r3, [r3, #2]
   30466:	429a      	cmp	r2, r3
   30468:	d908      	bls.n	3047c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   3046a:	68fb      	ldr	r3, [r7, #12]
   3046c:	681b      	ldr	r3, [r3, #0]
   3046e:	789b      	ldrb	r3, [r3, #2]
   30470:	001a      	movs	r2, r3
   30472:	2316      	movs	r3, #22
   30474:	18fb      	adds	r3, r7, r3
   30476:	781b      	ldrb	r3, [r3, #0]
   30478:	1ad3      	subs	r3, r2, r3
   3047a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   3047c:	68fb      	ldr	r3, [r7, #12]
   3047e:	681b      	ldr	r3, [r3, #0]
   30480:	7858      	ldrb	r0, [r3, #1]
   30482:	69fb      	ldr	r3, [r7, #28]
   30484:	b2db      	uxtb	r3, r3
   30486:	693a      	ldr	r2, [r7, #16]
   30488:	69b9      	ldr	r1, [r7, #24]
   3048a:	4c5c      	ldr	r4, [pc, #368]	; (305fc <f_write+0x348>)
   3048c:	47a0      	blx	r4
   3048e:	1e03      	subs	r3, r0, #0
   30490:	d009      	beq.n	304a6 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   30492:	68fb      	ldr	r3, [r7, #12]
   30494:	799b      	ldrb	r3, [r3, #6]
   30496:	2280      	movs	r2, #128	; 0x80
   30498:	4252      	negs	r2, r2
   3049a:	4313      	orrs	r3, r2
   3049c:	b2da      	uxtb	r2, r3
   3049e:	68fb      	ldr	r3, [r7, #12]
   304a0:	719a      	strb	r2, [r3, #6]
   304a2:	2301      	movs	r3, #1
   304a4:	e09e      	b.n	305e4 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   304a6:	68fb      	ldr	r3, [r7, #12]
   304a8:	681b      	ldr	r3, [r3, #0]
   304aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   304ac:	693b      	ldr	r3, [r7, #16]
   304ae:	1ad2      	subs	r2, r2, r3
   304b0:	69fb      	ldr	r3, [r7, #28]
   304b2:	429a      	cmp	r2, r3
   304b4:	d214      	bcs.n	304e0 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   304b6:	68fb      	ldr	r3, [r7, #12]
   304b8:	681b      	ldr	r3, [r3, #0]
   304ba:	3330      	adds	r3, #48	; 0x30
   304bc:	0018      	movs	r0, r3
   304be:	68fb      	ldr	r3, [r7, #12]
   304c0:	681b      	ldr	r3, [r3, #0]
   304c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   304c4:	693b      	ldr	r3, [r7, #16]
   304c6:	1ad3      	subs	r3, r2, r3
   304c8:	025b      	lsls	r3, r3, #9
   304ca:	69ba      	ldr	r2, [r7, #24]
   304cc:	18d1      	adds	r1, r2, r3
   304ce:	2380      	movs	r3, #128	; 0x80
   304d0:	009b      	lsls	r3, r3, #2
   304d2:	001a      	movs	r2, r3
   304d4:	4b4a      	ldr	r3, [pc, #296]	; (30600 <f_write+0x34c>)
   304d6:	4798      	blx	r3
					fp->fs->wflag = 0;
   304d8:	68fb      	ldr	r3, [r7, #12]
   304da:	681b      	ldr	r3, [r3, #0]
   304dc:	2200      	movs	r2, #0
   304de:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   304e0:	69fb      	ldr	r3, [r7, #28]
   304e2:	025b      	lsls	r3, r3, #9
   304e4:	623b      	str	r3, [r7, #32]
				continue;
   304e6:	e051      	b.n	3058c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   304e8:	68fb      	ldr	r3, [r7, #12]
   304ea:	689a      	ldr	r2, [r3, #8]
   304ec:	68fb      	ldr	r3, [r7, #12]
   304ee:	68db      	ldr	r3, [r3, #12]
   304f0:	429a      	cmp	r2, r3
   304f2:	d315      	bcc.n	30520 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   304f4:	68fb      	ldr	r3, [r7, #12]
   304f6:	681b      	ldr	r3, [r3, #0]
   304f8:	2100      	movs	r1, #0
   304fa:	0018      	movs	r0, r3
   304fc:	4b3d      	ldr	r3, [pc, #244]	; (305f4 <f_write+0x340>)
   304fe:	4798      	blx	r3
   30500:	1e03      	subs	r3, r0, #0
   30502:	d009      	beq.n	30518 <f_write+0x264>
   30504:	68fb      	ldr	r3, [r7, #12]
   30506:	799b      	ldrb	r3, [r3, #6]
   30508:	2280      	movs	r2, #128	; 0x80
   3050a:	4252      	negs	r2, r2
   3050c:	4313      	orrs	r3, r2
   3050e:	b2da      	uxtb	r2, r3
   30510:	68fb      	ldr	r3, [r7, #12]
   30512:	719a      	strb	r2, [r3, #6]
   30514:	2301      	movs	r3, #1
   30516:	e065      	b.n	305e4 <f_write+0x330>
				fp->fs->winsect = sect;
   30518:	68fb      	ldr	r3, [r7, #12]
   3051a:	681b      	ldr	r3, [r3, #0]
   3051c:	693a      	ldr	r2, [r7, #16]
   3051e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   30520:	68fb      	ldr	r3, [r7, #12]
   30522:	693a      	ldr	r2, [r7, #16]
   30524:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   30526:	68fb      	ldr	r3, [r7, #12]
   30528:	689b      	ldr	r3, [r3, #8]
   3052a:	05db      	lsls	r3, r3, #23
   3052c:	0ddb      	lsrs	r3, r3, #23
   3052e:	2280      	movs	r2, #128	; 0x80
   30530:	0092      	lsls	r2, r2, #2
   30532:	1ad3      	subs	r3, r2, r3
   30534:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   30536:	6a3a      	ldr	r2, [r7, #32]
   30538:	687b      	ldr	r3, [r7, #4]
   3053a:	429a      	cmp	r2, r3
   3053c:	d901      	bls.n	30542 <f_write+0x28e>
   3053e:	687b      	ldr	r3, [r7, #4]
   30540:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   30542:	68fb      	ldr	r3, [r7, #12]
   30544:	681a      	ldr	r2, [r3, #0]
   30546:	68fb      	ldr	r3, [r7, #12]
   30548:	699b      	ldr	r3, [r3, #24]
   3054a:	0019      	movs	r1, r3
   3054c:	0010      	movs	r0, r2
   3054e:	4b29      	ldr	r3, [pc, #164]	; (305f4 <f_write+0x340>)
   30550:	4798      	blx	r3
   30552:	1e03      	subs	r3, r0, #0
   30554:	d009      	beq.n	3056a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   30556:	68fb      	ldr	r3, [r7, #12]
   30558:	799b      	ldrb	r3, [r3, #6]
   3055a:	2280      	movs	r2, #128	; 0x80
   3055c:	4252      	negs	r2, r2
   3055e:	4313      	orrs	r3, r2
   30560:	b2da      	uxtb	r2, r3
   30562:	68fb      	ldr	r3, [r7, #12]
   30564:	719a      	strb	r2, [r3, #6]
   30566:	2301      	movs	r3, #1
   30568:	e03c      	b.n	305e4 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   3056a:	68fb      	ldr	r3, [r7, #12]
   3056c:	681a      	ldr	r2, [r3, #0]
   3056e:	68fb      	ldr	r3, [r7, #12]
   30570:	689b      	ldr	r3, [r3, #8]
   30572:	05db      	lsls	r3, r3, #23
   30574:	0ddb      	lsrs	r3, r3, #23
   30576:	3330      	adds	r3, #48	; 0x30
   30578:	18d3      	adds	r3, r2, r3
   3057a:	6a3a      	ldr	r2, [r7, #32]
   3057c:	69b9      	ldr	r1, [r7, #24]
   3057e:	0018      	movs	r0, r3
   30580:	4b1f      	ldr	r3, [pc, #124]	; (30600 <f_write+0x34c>)
   30582:	4798      	blx	r3
		fp->fs->wflag = 1;
   30584:	68fb      	ldr	r3, [r7, #12]
   30586:	681b      	ldr	r3, [r3, #0]
   30588:	2201      	movs	r2, #1
   3058a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   3058c:	69ba      	ldr	r2, [r7, #24]
   3058e:	6a3b      	ldr	r3, [r7, #32]
   30590:	18d3      	adds	r3, r2, r3
   30592:	61bb      	str	r3, [r7, #24]
   30594:	68fb      	ldr	r3, [r7, #12]
   30596:	689a      	ldr	r2, [r3, #8]
   30598:	6a3b      	ldr	r3, [r7, #32]
   3059a:	18d2      	adds	r2, r2, r3
   3059c:	68fb      	ldr	r3, [r7, #12]
   3059e:	609a      	str	r2, [r3, #8]
   305a0:	683b      	ldr	r3, [r7, #0]
   305a2:	681a      	ldr	r2, [r3, #0]
   305a4:	6a3b      	ldr	r3, [r7, #32]
   305a6:	18d2      	adds	r2, r2, r3
   305a8:	683b      	ldr	r3, [r7, #0]
   305aa:	601a      	str	r2, [r3, #0]
   305ac:	687a      	ldr	r2, [r7, #4]
   305ae:	6a3b      	ldr	r3, [r7, #32]
   305b0:	1ad3      	subs	r3, r2, r3
   305b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   305b4:	687b      	ldr	r3, [r7, #4]
   305b6:	2b00      	cmp	r3, #0
   305b8:	d000      	beq.n	305bc <f_write+0x308>
   305ba:	e6b7      	b.n	3032c <f_write+0x78>
   305bc:	e000      	b.n	305c0 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   305be:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   305c0:	68fb      	ldr	r3, [r7, #12]
   305c2:	689a      	ldr	r2, [r3, #8]
   305c4:	68fb      	ldr	r3, [r7, #12]
   305c6:	68db      	ldr	r3, [r3, #12]
   305c8:	429a      	cmp	r2, r3
   305ca:	d903      	bls.n	305d4 <f_write+0x320>
   305cc:	68fb      	ldr	r3, [r7, #12]
   305ce:	689a      	ldr	r2, [r3, #8]
   305d0:	68fb      	ldr	r3, [r7, #12]
   305d2:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   305d4:	68fb      	ldr	r3, [r7, #12]
   305d6:	799b      	ldrb	r3, [r3, #6]
   305d8:	2220      	movs	r2, #32
   305da:	4313      	orrs	r3, r2
   305dc:	b2da      	uxtb	r2, r3
   305de:	68fb      	ldr	r3, [r7, #12]
   305e0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   305e2:	2300      	movs	r3, #0
}
   305e4:	0018      	movs	r0, r3
   305e6:	46bd      	mov	sp, r7
   305e8:	b00b      	add	sp, #44	; 0x2c
   305ea:	bd90      	pop	{r4, r7, pc}
   305ec:	0002fcd9 	.word	0x0002fcd9
   305f0:	0002e365 	.word	0x0002e365
   305f4:	0002dc5d 	.word	0x0002dc5d
   305f8:	0002debd 	.word	0x0002debd
   305fc:	0002d949 	.word	0x0002d949
   30600:	0002db79 	.word	0x0002db79

00030604 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   30604:	b590      	push	{r4, r7, lr}
   30606:	b087      	sub	sp, #28
   30608:	af00      	add	r7, sp, #0
   3060a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   3060c:	687b      	ldr	r3, [r7, #4]
   3060e:	681a      	ldr	r2, [r3, #0]
   30610:	687b      	ldr	r3, [r7, #4]
   30612:	889b      	ldrh	r3, [r3, #4]
   30614:	2117      	movs	r1, #23
   30616:	187c      	adds	r4, r7, r1
   30618:	0019      	movs	r1, r3
   3061a:	0010      	movs	r0, r2
   3061c:	4b55      	ldr	r3, [pc, #340]	; (30774 <f_sync+0x170>)
   3061e:	4798      	blx	r3
   30620:	0003      	movs	r3, r0
   30622:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   30624:	2317      	movs	r3, #23
   30626:	18fb      	adds	r3, r7, r3
   30628:	781b      	ldrb	r3, [r3, #0]
   3062a:	2b00      	cmp	r3, #0
   3062c:	d000      	beq.n	30630 <f_sync+0x2c>
   3062e:	e09a      	b.n	30766 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   30630:	687b      	ldr	r3, [r7, #4]
   30632:	799b      	ldrb	r3, [r3, #6]
   30634:	001a      	movs	r2, r3
   30636:	2320      	movs	r3, #32
   30638:	4013      	ands	r3, r2
   3063a:	d100      	bne.n	3063e <f_sync+0x3a>
   3063c:	e093      	b.n	30766 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   3063e:	687b      	ldr	r3, [r7, #4]
   30640:	681a      	ldr	r2, [r3, #0]
   30642:	687b      	ldr	r3, [r7, #4]
   30644:	69db      	ldr	r3, [r3, #28]
   30646:	2117      	movs	r1, #23
   30648:	187c      	adds	r4, r7, r1
   3064a:	0019      	movs	r1, r3
   3064c:	0010      	movs	r0, r2
   3064e:	4b4a      	ldr	r3, [pc, #296]	; (30778 <f_sync+0x174>)
   30650:	4798      	blx	r3
   30652:	0003      	movs	r3, r0
   30654:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   30656:	2317      	movs	r3, #23
   30658:	18fb      	adds	r3, r7, r3
   3065a:	781b      	ldrb	r3, [r3, #0]
   3065c:	2b00      	cmp	r3, #0
   3065e:	d000      	beq.n	30662 <f_sync+0x5e>
   30660:	e081      	b.n	30766 <f_sync+0x162>
				dir = fp->dir_ptr;
   30662:	687b      	ldr	r3, [r7, #4]
   30664:	6a1b      	ldr	r3, [r3, #32]
   30666:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   30668:	693b      	ldr	r3, [r7, #16]
   3066a:	330b      	adds	r3, #11
   3066c:	693a      	ldr	r2, [r7, #16]
   3066e:	320b      	adds	r2, #11
   30670:	7812      	ldrb	r2, [r2, #0]
   30672:	2120      	movs	r1, #32
   30674:	430a      	orrs	r2, r1
   30676:	b2d2      	uxtb	r2, r2
   30678:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   3067a:	693b      	ldr	r3, [r7, #16]
   3067c:	331c      	adds	r3, #28
   3067e:	001a      	movs	r2, r3
   30680:	687b      	ldr	r3, [r7, #4]
   30682:	68db      	ldr	r3, [r3, #12]
   30684:	b2db      	uxtb	r3, r3
   30686:	7013      	strb	r3, [r2, #0]
   30688:	693b      	ldr	r3, [r7, #16]
   3068a:	331d      	adds	r3, #29
   3068c:	001a      	movs	r2, r3
   3068e:	687b      	ldr	r3, [r7, #4]
   30690:	68db      	ldr	r3, [r3, #12]
   30692:	b29b      	uxth	r3, r3
   30694:	0a1b      	lsrs	r3, r3, #8
   30696:	b29b      	uxth	r3, r3
   30698:	b2db      	uxtb	r3, r3
   3069a:	7013      	strb	r3, [r2, #0]
   3069c:	693b      	ldr	r3, [r7, #16]
   3069e:	331e      	adds	r3, #30
   306a0:	001a      	movs	r2, r3
   306a2:	687b      	ldr	r3, [r7, #4]
   306a4:	68db      	ldr	r3, [r3, #12]
   306a6:	0c1b      	lsrs	r3, r3, #16
   306a8:	b2db      	uxtb	r3, r3
   306aa:	7013      	strb	r3, [r2, #0]
   306ac:	693b      	ldr	r3, [r7, #16]
   306ae:	331f      	adds	r3, #31
   306b0:	001a      	movs	r2, r3
   306b2:	687b      	ldr	r3, [r7, #4]
   306b4:	68db      	ldr	r3, [r3, #12]
   306b6:	0e1b      	lsrs	r3, r3, #24
   306b8:	b2db      	uxtb	r3, r3
   306ba:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   306bc:	693b      	ldr	r3, [r7, #16]
   306be:	331a      	adds	r3, #26
   306c0:	001a      	movs	r2, r3
   306c2:	687b      	ldr	r3, [r7, #4]
   306c4:	691b      	ldr	r3, [r3, #16]
   306c6:	b2db      	uxtb	r3, r3
   306c8:	7013      	strb	r3, [r2, #0]
   306ca:	693b      	ldr	r3, [r7, #16]
   306cc:	331b      	adds	r3, #27
   306ce:	001a      	movs	r2, r3
   306d0:	687b      	ldr	r3, [r7, #4]
   306d2:	691b      	ldr	r3, [r3, #16]
   306d4:	b29b      	uxth	r3, r3
   306d6:	0a1b      	lsrs	r3, r3, #8
   306d8:	b29b      	uxth	r3, r3
   306da:	b2db      	uxtb	r3, r3
   306dc:	7013      	strb	r3, [r2, #0]
   306de:	693b      	ldr	r3, [r7, #16]
   306e0:	3314      	adds	r3, #20
   306e2:	001a      	movs	r2, r3
   306e4:	687b      	ldr	r3, [r7, #4]
   306e6:	691b      	ldr	r3, [r3, #16]
   306e8:	0c1b      	lsrs	r3, r3, #16
   306ea:	b2db      	uxtb	r3, r3
   306ec:	7013      	strb	r3, [r2, #0]
   306ee:	693b      	ldr	r3, [r7, #16]
   306f0:	3315      	adds	r3, #21
   306f2:	001a      	movs	r2, r3
   306f4:	687b      	ldr	r3, [r7, #4]
   306f6:	691b      	ldr	r3, [r3, #16]
   306f8:	0c1b      	lsrs	r3, r3, #16
   306fa:	b29b      	uxth	r3, r3
   306fc:	0a1b      	lsrs	r3, r3, #8
   306fe:	b29b      	uxth	r3, r3
   30700:	b2db      	uxtb	r3, r3
   30702:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   30704:	4b1d      	ldr	r3, [pc, #116]	; (3077c <f_sync+0x178>)
   30706:	4798      	blx	r3
   30708:	0003      	movs	r3, r0
   3070a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   3070c:	693b      	ldr	r3, [r7, #16]
   3070e:	3316      	adds	r3, #22
   30710:	68fa      	ldr	r2, [r7, #12]
   30712:	b2d2      	uxtb	r2, r2
   30714:	701a      	strb	r2, [r3, #0]
   30716:	693b      	ldr	r3, [r7, #16]
   30718:	3317      	adds	r3, #23
   3071a:	68fa      	ldr	r2, [r7, #12]
   3071c:	b292      	uxth	r2, r2
   3071e:	0a12      	lsrs	r2, r2, #8
   30720:	b292      	uxth	r2, r2
   30722:	b2d2      	uxtb	r2, r2
   30724:	701a      	strb	r2, [r3, #0]
   30726:	693b      	ldr	r3, [r7, #16]
   30728:	3318      	adds	r3, #24
   3072a:	68fa      	ldr	r2, [r7, #12]
   3072c:	0c12      	lsrs	r2, r2, #16
   3072e:	b2d2      	uxtb	r2, r2
   30730:	701a      	strb	r2, [r3, #0]
   30732:	693b      	ldr	r3, [r7, #16]
   30734:	3319      	adds	r3, #25
   30736:	68fa      	ldr	r2, [r7, #12]
   30738:	0e12      	lsrs	r2, r2, #24
   3073a:	b2d2      	uxtb	r2, r2
   3073c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   3073e:	687b      	ldr	r3, [r7, #4]
   30740:	799b      	ldrb	r3, [r3, #6]
   30742:	2220      	movs	r2, #32
   30744:	4393      	bics	r3, r2
   30746:	b2da      	uxtb	r2, r3
   30748:	687b      	ldr	r3, [r7, #4]
   3074a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   3074c:	687b      	ldr	r3, [r7, #4]
   3074e:	681b      	ldr	r3, [r3, #0]
   30750:	2201      	movs	r2, #1
   30752:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   30754:	687b      	ldr	r3, [r7, #4]
   30756:	681b      	ldr	r3, [r3, #0]
   30758:	2217      	movs	r2, #23
   3075a:	18bc      	adds	r4, r7, r2
   3075c:	0018      	movs	r0, r3
   3075e:	4b08      	ldr	r3, [pc, #32]	; (30780 <f_sync+0x17c>)
   30760:	4798      	blx	r3
   30762:	0003      	movs	r3, r0
   30764:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   30766:	2317      	movs	r3, #23
   30768:	18fb      	adds	r3, r7, r3
   3076a:	781b      	ldrb	r3, [r3, #0]
}
   3076c:	0018      	movs	r0, r3
   3076e:	46bd      	mov	sp, r7
   30770:	b007      	add	sp, #28
   30772:	bd90      	pop	{r4, r7, pc}
   30774:	0002fcd9 	.word	0x0002fcd9
   30778:	0002dc5d 	.word	0x0002dc5d
   3077c:	0002db19 	.word	0x0002db19
   30780:	0002dd25 	.word	0x0002dd25

00030784 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   30784:	b590      	push	{r4, r7, lr}
   30786:	b085      	sub	sp, #20
   30788:	af00      	add	r7, sp, #0
   3078a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   3078c:	230f      	movs	r3, #15
   3078e:	18fc      	adds	r4, r7, r3
   30790:	687b      	ldr	r3, [r7, #4]
   30792:	0018      	movs	r0, r3
   30794:	4b09      	ldr	r3, [pc, #36]	; (307bc <f_close+0x38>)
   30796:	4798      	blx	r3
   30798:	0003      	movs	r3, r0
   3079a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   3079c:	230f      	movs	r3, #15
   3079e:	18fb      	adds	r3, r7, r3
   307a0:	781b      	ldrb	r3, [r3, #0]
   307a2:	2b00      	cmp	r3, #0
   307a4:	d102      	bne.n	307ac <f_close+0x28>
   307a6:	687b      	ldr	r3, [r7, #4]
   307a8:	2200      	movs	r2, #0
   307aa:	601a      	str	r2, [r3, #0]
	return res;
   307ac:	230f      	movs	r3, #15
   307ae:	18fb      	adds	r3, r7, r3
   307b0:	781b      	ldrb	r3, [r3, #0]
#endif
}
   307b2:	0018      	movs	r0, r3
   307b4:	46bd      	mov	sp, r7
   307b6:	b005      	add	sp, #20
   307b8:	bd90      	pop	{r4, r7, pc}
   307ba:	46c0      	nop			; (mov r8, r8)
   307bc:	00030605 	.word	0x00030605

000307c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   307c0:	b580      	push	{r7, lr}
   307c2:	b084      	sub	sp, #16
   307c4:	af00      	add	r7, sp, #0
   307c6:	0002      	movs	r2, r0
   307c8:	6039      	str	r1, [r7, #0]
   307ca:	1dbb      	adds	r3, r7, #6
   307cc:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   307ce:	1dbb      	adds	r3, r7, #6
   307d0:	881b      	ldrh	r3, [r3, #0]
   307d2:	2b7f      	cmp	r3, #127	; 0x7f
   307d4:	d805      	bhi.n	307e2 <ff_convert+0x22>
		c = src;
   307d6:	230e      	movs	r3, #14
   307d8:	18fb      	adds	r3, r7, r3
   307da:	1dba      	adds	r2, r7, #6
   307dc:	8812      	ldrh	r2, [r2, #0]
   307de:	801a      	strh	r2, [r3, #0]
   307e0:	e03a      	b.n	30858 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   307e2:	683b      	ldr	r3, [r7, #0]
   307e4:	2b00      	cmp	r3, #0
   307e6:	d010      	beq.n	3080a <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   307e8:	1dbb      	adds	r3, r7, #6
   307ea:	881b      	ldrh	r3, [r3, #0]
   307ec:	2bff      	cmp	r3, #255	; 0xff
   307ee:	d807      	bhi.n	30800 <ff_convert+0x40>
   307f0:	1dbb      	adds	r3, r7, #6
   307f2:	881b      	ldrh	r3, [r3, #0]
   307f4:	3b80      	subs	r3, #128	; 0x80
   307f6:	001a      	movs	r2, r3
   307f8:	4b1b      	ldr	r3, [pc, #108]	; (30868 <ff_convert+0xa8>)
   307fa:	0052      	lsls	r2, r2, #1
   307fc:	5ad2      	ldrh	r2, [r2, r3]
   307fe:	e000      	b.n	30802 <ff_convert+0x42>
   30800:	2200      	movs	r2, #0
   30802:	230e      	movs	r3, #14
   30804:	18fb      	adds	r3, r7, r3
   30806:	801a      	strh	r2, [r3, #0]
   30808:	e026      	b.n	30858 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   3080a:	230e      	movs	r3, #14
   3080c:	18fb      	adds	r3, r7, r3
   3080e:	2200      	movs	r2, #0
   30810:	801a      	strh	r2, [r3, #0]
   30812:	e010      	b.n	30836 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   30814:	230e      	movs	r3, #14
   30816:	18fb      	adds	r3, r7, r3
   30818:	881a      	ldrh	r2, [r3, #0]
   3081a:	4b13      	ldr	r3, [pc, #76]	; (30868 <ff_convert+0xa8>)
   3081c:	0052      	lsls	r2, r2, #1
   3081e:	5ad3      	ldrh	r3, [r2, r3]
   30820:	1dba      	adds	r2, r7, #6
   30822:	8812      	ldrh	r2, [r2, #0]
   30824:	429a      	cmp	r2, r3
   30826:	d00c      	beq.n	30842 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   30828:	230e      	movs	r3, #14
   3082a:	18fb      	adds	r3, r7, r3
   3082c:	881a      	ldrh	r2, [r3, #0]
   3082e:	230e      	movs	r3, #14
   30830:	18fb      	adds	r3, r7, r3
   30832:	3201      	adds	r2, #1
   30834:	801a      	strh	r2, [r3, #0]
   30836:	230e      	movs	r3, #14
   30838:	18fb      	adds	r3, r7, r3
   3083a:	881b      	ldrh	r3, [r3, #0]
   3083c:	2b7f      	cmp	r3, #127	; 0x7f
   3083e:	d9e9      	bls.n	30814 <ff_convert+0x54>
   30840:	e000      	b.n	30844 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   30842:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   30844:	230e      	movs	r3, #14
   30846:	18fb      	adds	r3, r7, r3
   30848:	881b      	ldrh	r3, [r3, #0]
   3084a:	3380      	adds	r3, #128	; 0x80
   3084c:	b29a      	uxth	r2, r3
   3084e:	230e      	movs	r3, #14
   30850:	18fb      	adds	r3, r7, r3
   30852:	21ff      	movs	r1, #255	; 0xff
   30854:	400a      	ands	r2, r1
   30856:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   30858:	230e      	movs	r3, #14
   3085a:	18fb      	adds	r3, r7, r3
   3085c:	881b      	ldrh	r3, [r3, #0]
}
   3085e:	0018      	movs	r0, r3
   30860:	46bd      	mov	sp, r7
   30862:	b004      	add	sp, #16
   30864:	bd80      	pop	{r7, pc}
   30866:	46c0      	nop			; (mov r8, r8)
   30868:	0003c984 	.word	0x0003c984

0003086c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   3086c:	b580      	push	{r7, lr}
   3086e:	b084      	sub	sp, #16
   30870:	af00      	add	r7, sp, #0
   30872:	0002      	movs	r2, r0
   30874:	1dbb      	adds	r3, r7, #6
   30876:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   30878:	2300      	movs	r3, #0
   3087a:	60fb      	str	r3, [r7, #12]
   3087c:	e002      	b.n	30884 <ff_wtoupper+0x18>
   3087e:	68fb      	ldr	r3, [r7, #12]
   30880:	3301      	adds	r3, #1
   30882:	60fb      	str	r3, [r7, #12]
   30884:	4b0f      	ldr	r3, [pc, #60]	; (308c4 <ff_wtoupper+0x58>)
   30886:	68fa      	ldr	r2, [r7, #12]
   30888:	0052      	lsls	r2, r2, #1
   3088a:	5ad3      	ldrh	r3, [r2, r3]
   3088c:	2b00      	cmp	r3, #0
   3088e:	d007      	beq.n	308a0 <ff_wtoupper+0x34>
   30890:	4b0c      	ldr	r3, [pc, #48]	; (308c4 <ff_wtoupper+0x58>)
   30892:	68fa      	ldr	r2, [r7, #12]
   30894:	0052      	lsls	r2, r2, #1
   30896:	5ad3      	ldrh	r3, [r2, r3]
   30898:	1dba      	adds	r2, r7, #6
   3089a:	8812      	ldrh	r2, [r2, #0]
   3089c:	429a      	cmp	r2, r3
   3089e:	d1ee      	bne.n	3087e <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   308a0:	4b08      	ldr	r3, [pc, #32]	; (308c4 <ff_wtoupper+0x58>)
   308a2:	68fa      	ldr	r2, [r7, #12]
   308a4:	0052      	lsls	r2, r2, #1
   308a6:	5ad3      	ldrh	r3, [r2, r3]
   308a8:	2b00      	cmp	r3, #0
   308aa:	d004      	beq.n	308b6 <ff_wtoupper+0x4a>
   308ac:	4b06      	ldr	r3, [pc, #24]	; (308c8 <ff_wtoupper+0x5c>)
   308ae:	68fa      	ldr	r2, [r7, #12]
   308b0:	0052      	lsls	r2, r2, #1
   308b2:	5ad3      	ldrh	r3, [r2, r3]
   308b4:	e001      	b.n	308ba <ff_wtoupper+0x4e>
   308b6:	1dbb      	adds	r3, r7, #6
   308b8:	881b      	ldrh	r3, [r3, #0]
}
   308ba:	0018      	movs	r0, r3
   308bc:	46bd      	mov	sp, r7
   308be:	b004      	add	sp, #16
   308c0:	bd80      	pop	{r7, pc}
   308c2:	46c0      	nop			; (mov r8, r8)
   308c4:	0003ca84 	.word	0x0003ca84
   308c8:	0003cc64 	.word	0x0003cc64

000308cc <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   308cc:	b580      	push	{r7, lr}
   308ce:	b084      	sub	sp, #16
   308d0:	af00      	add	r7, sp, #0
   308d2:	60f8      	str	r0, [r7, #12]
   308d4:	60b9      	str	r1, [r7, #8]
   308d6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   308d8:	68fb      	ldr	r3, [r7, #12]
   308da:	68ba      	ldr	r2, [r7, #8]
   308dc:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   308de:	68fb      	ldr	r3, [r7, #12]
   308e0:	687a      	ldr	r2, [r7, #4]
   308e2:	601a      	str	r2, [r3, #0]
}
   308e4:	46c0      	nop			; (mov r8, r8)
   308e6:	46bd      	mov	sp, r7
   308e8:	b004      	add	sp, #16
   308ea:	bd80      	pop	{r7, pc}

000308ec <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   308ec:	b580      	push	{r7, lr}
   308ee:	b082      	sub	sp, #8
   308f0:	af00      	add	r7, sp, #0
   308f2:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   308f4:	687b      	ldr	r3, [r7, #4]
   308f6:	681b      	ldr	r3, [r3, #0]
   308f8:	4a07      	ldr	r2, [pc, #28]	; (30918 <getNextPacketId+0x2c>)
   308fa:	4293      	cmp	r3, r2
   308fc:	d003      	beq.n	30906 <getNextPacketId+0x1a>
   308fe:	687b      	ldr	r3, [r7, #4]
   30900:	681b      	ldr	r3, [r3, #0]
   30902:	1c5a      	adds	r2, r3, #1
   30904:	e000      	b.n	30908 <getNextPacketId+0x1c>
   30906:	2201      	movs	r2, #1
   30908:	687b      	ldr	r3, [r7, #4]
   3090a:	601a      	str	r2, [r3, #0]
   3090c:	687b      	ldr	r3, [r7, #4]
   3090e:	681b      	ldr	r3, [r3, #0]
}
   30910:	0018      	movs	r0, r3
   30912:	46bd      	mov	sp, r7
   30914:	b002      	add	sp, #8
   30916:	bd80      	pop	{r7, pc}
   30918:	0000ffff 	.word	0x0000ffff

0003091c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   3091c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3091e:	b087      	sub	sp, #28
   30920:	af00      	add	r7, sp, #0
   30922:	60f8      	str	r0, [r7, #12]
   30924:	60b9      	str	r1, [r7, #8]
   30926:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   30928:	2301      	movs	r3, #1
   3092a:	425b      	negs	r3, r3
   3092c:	617b      	str	r3, [r7, #20]
        sent = 0;
   3092e:	2300      	movs	r3, #0
   30930:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   30932:	e01a      	b.n	3096a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   30934:	68fb      	ldr	r3, [r7, #12]
   30936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30938:	68dc      	ldr	r4, [r3, #12]
   3093a:	68fb      	ldr	r3, [r7, #12]
   3093c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   3093e:	68fb      	ldr	r3, [r7, #12]
   30940:	691a      	ldr	r2, [r3, #16]
   30942:	693b      	ldr	r3, [r7, #16]
   30944:	18d6      	adds	r6, r2, r3
   30946:	687b      	ldr	r3, [r7, #4]
   30948:	0018      	movs	r0, r3
   3094a:	4b1a      	ldr	r3, [pc, #104]	; (309b4 <sendPacket+0x98>)
   3094c:	4798      	blx	r3
   3094e:	0003      	movs	r3, r0
   30950:	68ba      	ldr	r2, [r7, #8]
   30952:	0031      	movs	r1, r6
   30954:	0028      	movs	r0, r5
   30956:	47a0      	blx	r4
   30958:	0003      	movs	r3, r0
   3095a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   3095c:	697b      	ldr	r3, [r7, #20]
   3095e:	2b00      	cmp	r3, #0
   30960:	db0e      	blt.n	30980 <sendPacket+0x64>
            break;
        sent += rc;
   30962:	693a      	ldr	r2, [r7, #16]
   30964:	697b      	ldr	r3, [r7, #20]
   30966:	18d3      	adds	r3, r2, r3
   30968:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   3096a:	693a      	ldr	r2, [r7, #16]
   3096c:	68bb      	ldr	r3, [r7, #8]
   3096e:	429a      	cmp	r2, r3
   30970:	da07      	bge.n	30982 <sendPacket+0x66>
   30972:	687b      	ldr	r3, [r7, #4]
   30974:	0018      	movs	r0, r3
   30976:	4b10      	ldr	r3, [pc, #64]	; (309b8 <sendPacket+0x9c>)
   30978:	4798      	blx	r3
   3097a:	1e03      	subs	r3, r0, #0
   3097c:	d0da      	beq.n	30934 <sendPacket+0x18>
   3097e:	e000      	b.n	30982 <sendPacket+0x66>
            break;
   30980:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   30982:	693a      	ldr	r2, [r7, #16]
   30984:	68bb      	ldr	r3, [r7, #8]
   30986:	429a      	cmp	r2, r3
   30988:	d10b      	bne.n	309a2 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   3098a:	68fb      	ldr	r3, [r7, #12]
   3098c:	3354      	adds	r3, #84	; 0x54
   3098e:	001a      	movs	r2, r3
   30990:	68fb      	ldr	r3, [r7, #12]
   30992:	699b      	ldr	r3, [r3, #24]
   30994:	0019      	movs	r1, r3
   30996:	0010      	movs	r0, r2
   30998:	4b08      	ldr	r3, [pc, #32]	; (309bc <sendPacket+0xa0>)
   3099a:	4798      	blx	r3
        rc = SUCCESS;
   3099c:	2300      	movs	r3, #0
   3099e:	617b      	str	r3, [r7, #20]
   309a0:	e002      	b.n	309a8 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   309a2:	2301      	movs	r3, #1
   309a4:	425b      	negs	r3, r3
   309a6:	617b      	str	r3, [r7, #20]
    return rc;
   309a8:	697b      	ldr	r3, [r7, #20]
}
   309aa:	0018      	movs	r0, r3
   309ac:	46bd      	mov	sp, r7
   309ae:	b007      	add	sp, #28
   309b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   309b2:	46c0      	nop			; (mov r8, r8)
   309b4:	0003177d 	.word	0x0003177d
   309b8:	00031701 	.word	0x00031701
   309bc:	00031755 	.word	0x00031755

000309c0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   309c0:	b580      	push	{r7, lr}
   309c2:	b086      	sub	sp, #24
   309c4:	af00      	add	r7, sp, #0
   309c6:	60f8      	str	r0, [r7, #12]
   309c8:	60b9      	str	r1, [r7, #8]
   309ca:	607a      	str	r2, [r7, #4]
   309cc:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   309ce:	68fb      	ldr	r3, [r7, #12]
   309d0:	68ba      	ldr	r2, [r7, #8]
   309d2:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   309d4:	2300      	movs	r3, #0
   309d6:	617b      	str	r3, [r7, #20]
   309d8:	e00a      	b.n	309f0 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   309da:	68fa      	ldr	r2, [r7, #12]
   309dc:	697b      	ldr	r3, [r7, #20]
   309de:	3304      	adds	r3, #4
   309e0:	00db      	lsls	r3, r3, #3
   309e2:	18d3      	adds	r3, r2, r3
   309e4:	3304      	adds	r3, #4
   309e6:	2200      	movs	r2, #0
   309e8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   309ea:	697b      	ldr	r3, [r7, #20]
   309ec:	3301      	adds	r3, #1
   309ee:	617b      	str	r3, [r7, #20]
   309f0:	697b      	ldr	r3, [r7, #20]
   309f2:	2b04      	cmp	r3, #4
   309f4:	ddf1      	ble.n	309da <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   309f6:	68fb      	ldr	r3, [r7, #12]
   309f8:	687a      	ldr	r2, [r7, #4]
   309fa:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   309fc:	68fb      	ldr	r3, [r7, #12]
   309fe:	683a      	ldr	r2, [r7, #0]
   30a00:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   30a02:	68fb      	ldr	r3, [r7, #12]
   30a04:	6a3a      	ldr	r2, [r7, #32]
   30a06:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   30a08:	68fb      	ldr	r3, [r7, #12]
   30a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30a0c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   30a0e:	68fb      	ldr	r3, [r7, #12]
   30a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30a12:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   30a14:	68fb      	ldr	r3, [r7, #12]
   30a16:	2200      	movs	r2, #0
   30a18:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   30a1a:	68fb      	ldr	r3, [r7, #12]
   30a1c:	2200      	movs	r2, #0
   30a1e:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   30a20:	68fb      	ldr	r3, [r7, #12]
   30a22:	2200      	movs	r2, #0
   30a24:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   30a26:	68fb      	ldr	r3, [r7, #12]
   30a28:	2201      	movs	r2, #1
   30a2a:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   30a2c:	68fb      	ldr	r3, [r7, #12]
   30a2e:	3354      	adds	r3, #84	; 0x54
   30a30:	0018      	movs	r0, r3
   30a32:	4b03      	ldr	r3, [pc, #12]	; (30a40 <MQTTClientInit+0x80>)
   30a34:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   30a36:	46c0      	nop			; (mov r8, r8)
   30a38:	46bd      	mov	sp, r7
   30a3a:	b006      	add	sp, #24
   30a3c:	bd80      	pop	{r7, pc}
   30a3e:	46c0      	nop			; (mov r8, r8)
   30a40:	000317a5 	.word	0x000317a5

00030a44 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   30a44:	b590      	push	{r4, r7, lr}
   30a46:	b08b      	sub	sp, #44	; 0x2c
   30a48:	af00      	add	r7, sp, #0
   30a4a:	60f8      	str	r0, [r7, #12]
   30a4c:	60b9      	str	r1, [r7, #8]
   30a4e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   30a50:	2301      	movs	r3, #1
   30a52:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   30a54:	2300      	movs	r3, #0
   30a56:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   30a58:	2304      	movs	r3, #4
   30a5a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   30a5c:	68bb      	ldr	r3, [r7, #8]
   30a5e:	2200      	movs	r2, #0
   30a60:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   30a62:	2301      	movs	r3, #1
   30a64:	425b      	negs	r3, r3
   30a66:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30a68:	6a3b      	ldr	r3, [r7, #32]
   30a6a:	3301      	adds	r3, #1
   30a6c:	623b      	str	r3, [r7, #32]
   30a6e:	6a3a      	ldr	r2, [r7, #32]
   30a70:	69fb      	ldr	r3, [r7, #28]
   30a72:	429a      	cmp	r2, r3
   30a74:	dd03      	ble.n	30a7e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   30a76:	2301      	movs	r3, #1
   30a78:	425b      	negs	r3, r3
   30a7a:	61bb      	str	r3, [r7, #24]
            goto exit;
   30a7c:	e026      	b.n	30acc <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   30a7e:	68fb      	ldr	r3, [r7, #12]
   30a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30a82:	689c      	ldr	r4, [r3, #8]
   30a84:	68fb      	ldr	r3, [r7, #12]
   30a86:	6d18      	ldr	r0, [r3, #80]	; 0x50
   30a88:	687b      	ldr	r3, [r7, #4]
   30a8a:	2217      	movs	r2, #23
   30a8c:	18b9      	adds	r1, r7, r2
   30a8e:	2201      	movs	r2, #1
   30a90:	47a0      	blx	r4
   30a92:	0003      	movs	r3, r0
   30a94:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   30a96:	69bb      	ldr	r3, [r7, #24]
   30a98:	2b01      	cmp	r3, #1
   30a9a:	d116      	bne.n	30aca <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   30a9c:	68bb      	ldr	r3, [r7, #8]
   30a9e:	681a      	ldr	r2, [r3, #0]
   30aa0:	2317      	movs	r3, #23
   30aa2:	18fb      	adds	r3, r7, r3
   30aa4:	781b      	ldrb	r3, [r3, #0]
   30aa6:	0019      	movs	r1, r3
   30aa8:	237f      	movs	r3, #127	; 0x7f
   30aaa:	400b      	ands	r3, r1
   30aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
   30aae:	434b      	muls	r3, r1
   30ab0:	18d2      	adds	r2, r2, r3
   30ab2:	68bb      	ldr	r3, [r7, #8]
   30ab4:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   30ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ab8:	01db      	lsls	r3, r3, #7
   30aba:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   30abc:	2317      	movs	r3, #23
   30abe:	18fb      	adds	r3, r7, r3
   30ac0:	781b      	ldrb	r3, [r3, #0]
   30ac2:	b25b      	sxtb	r3, r3
   30ac4:	2b00      	cmp	r3, #0
   30ac6:	dbcc      	blt.n	30a62 <decodePacket+0x1e>
   30ac8:	e000      	b.n	30acc <decodePacket+0x88>
            goto exit;
   30aca:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   30acc:	6a3b      	ldr	r3, [r7, #32]
}
   30ace:	0018      	movs	r0, r3
   30ad0:	46bd      	mov	sp, r7
   30ad2:	b00b      	add	sp, #44	; 0x2c
   30ad4:	bd90      	pop	{r4, r7, pc}
	...

00030ad8 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   30ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   30ada:	46c6      	mov	lr, r8
   30adc:	b500      	push	{lr}
   30ade:	b086      	sub	sp, #24
   30ae0:	af00      	add	r7, sp, #0
   30ae2:	6078      	str	r0, [r7, #4]
   30ae4:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   30ae6:	2301      	movs	r3, #1
   30ae8:	425b      	negs	r3, r3
   30aea:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   30aec:	2300      	movs	r3, #0
   30aee:	60fb      	str	r3, [r7, #12]
    int len = 0;
   30af0:	2300      	movs	r3, #0
   30af2:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   30af4:	2300      	movs	r3, #0
   30af6:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   30af8:	687b      	ldr	r3, [r7, #4]
   30afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30afc:	689c      	ldr	r4, [r3, #8]
   30afe:	687b      	ldr	r3, [r7, #4]
   30b00:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30b02:	687b      	ldr	r3, [r7, #4]
   30b04:	695e      	ldr	r6, [r3, #20]
   30b06:	683b      	ldr	r3, [r7, #0]
   30b08:	0018      	movs	r0, r3
   30b0a:	4b2b      	ldr	r3, [pc, #172]	; (30bb8 <readPacket+0xe0>)
   30b0c:	4798      	blx	r3
   30b0e:	0003      	movs	r3, r0
   30b10:	2201      	movs	r2, #1
   30b12:	0031      	movs	r1, r6
   30b14:	0028      	movs	r0, r5
   30b16:	47a0      	blx	r4
   30b18:	0003      	movs	r3, r0
   30b1a:	2b01      	cmp	r3, #1
   30b1c:	d141      	bne.n	30ba2 <readPacket+0xca>
        goto exit;

    len = 1;
   30b1e:	2301      	movs	r3, #1
   30b20:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   30b22:	683b      	ldr	r3, [r7, #0]
   30b24:	0018      	movs	r0, r3
   30b26:	4b24      	ldr	r3, [pc, #144]	; (30bb8 <readPacket+0xe0>)
   30b28:	4798      	blx	r3
   30b2a:	0002      	movs	r2, r0
   30b2c:	2308      	movs	r3, #8
   30b2e:	18f9      	adds	r1, r7, r3
   30b30:	687b      	ldr	r3, [r7, #4]
   30b32:	0018      	movs	r0, r3
   30b34:	4b21      	ldr	r3, [pc, #132]	; (30bbc <readPacket+0xe4>)
   30b36:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   30b38:	687b      	ldr	r3, [r7, #4]
   30b3a:	695b      	ldr	r3, [r3, #20]
   30b3c:	3301      	adds	r3, #1
   30b3e:	68ba      	ldr	r2, [r7, #8]
   30b40:	0011      	movs	r1, r2
   30b42:	0018      	movs	r0, r3
   30b44:	4b1e      	ldr	r3, [pc, #120]	; (30bc0 <readPacket+0xe8>)
   30b46:	4798      	blx	r3
   30b48:	0002      	movs	r2, r0
   30b4a:	693b      	ldr	r3, [r7, #16]
   30b4c:	189b      	adds	r3, r3, r2
   30b4e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   30b50:	68bb      	ldr	r3, [r7, #8]
   30b52:	2b00      	cmp	r3, #0
   30b54:	dd17      	ble.n	30b86 <readPacket+0xae>
   30b56:	687b      	ldr	r3, [r7, #4]
   30b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30b5a:	689c      	ldr	r4, [r3, #8]
   30b5c:	687b      	ldr	r3, [r7, #4]
   30b5e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30b60:	687b      	ldr	r3, [r7, #4]
   30b62:	695a      	ldr	r2, [r3, #20]
   30b64:	693b      	ldr	r3, [r7, #16]
   30b66:	18d6      	adds	r6, r2, r3
   30b68:	68bb      	ldr	r3, [r7, #8]
   30b6a:	4698      	mov	r8, r3
   30b6c:	683b      	ldr	r3, [r7, #0]
   30b6e:	0018      	movs	r0, r3
   30b70:	4b11      	ldr	r3, [pc, #68]	; (30bb8 <readPacket+0xe0>)
   30b72:	4798      	blx	r3
   30b74:	0003      	movs	r3, r0
   30b76:	4642      	mov	r2, r8
   30b78:	0031      	movs	r1, r6
   30b7a:	0028      	movs	r0, r5
   30b7c:	47a0      	blx	r4
   30b7e:	0002      	movs	r2, r0
   30b80:	68bb      	ldr	r3, [r7, #8]
   30b82:	429a      	cmp	r2, r3
   30b84:	d10f      	bne.n	30ba6 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   30b86:	687b      	ldr	r3, [r7, #4]
   30b88:	695b      	ldr	r3, [r3, #20]
   30b8a:	781a      	ldrb	r2, [r3, #0]
   30b8c:	230c      	movs	r3, #12
   30b8e:	18fb      	adds	r3, r7, r3
   30b90:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   30b92:	230c      	movs	r3, #12
   30b94:	18fb      	adds	r3, r7, r3
   30b96:	781b      	ldrb	r3, [r3, #0]
   30b98:	061b      	lsls	r3, r3, #24
   30b9a:	0f1b      	lsrs	r3, r3, #28
   30b9c:	b2db      	uxtb	r3, r3
   30b9e:	617b      	str	r3, [r7, #20]
   30ba0:	e002      	b.n	30ba8 <readPacket+0xd0>
        goto exit;
   30ba2:	46c0      	nop			; (mov r8, r8)
   30ba4:	e000      	b.n	30ba8 <readPacket+0xd0>
        goto exit;
   30ba6:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   30ba8:	697b      	ldr	r3, [r7, #20]
}
   30baa:	0018      	movs	r0, r3
   30bac:	46bd      	mov	sp, r7
   30bae:	b006      	add	sp, #24
   30bb0:	bc04      	pop	{r2}
   30bb2:	4690      	mov	r8, r2
   30bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30bb6:	46c0      	nop			; (mov r8, r8)
   30bb8:	0003177d 	.word	0x0003177d
   30bbc:	00030a45 	.word	0x00030a45
   30bc0:	00032555 	.word	0x00032555

00030bc4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   30bc4:	b580      	push	{r7, lr}
   30bc6:	b086      	sub	sp, #24
   30bc8:	af00      	add	r7, sp, #0
   30bca:	6078      	str	r0, [r7, #4]
   30bcc:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   30bce:	687b      	ldr	r3, [r7, #4]
   30bd0:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   30bd2:	683b      	ldr	r3, [r7, #0]
   30bd4:	689b      	ldr	r3, [r3, #8]
   30bd6:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   30bd8:	683b      	ldr	r3, [r7, #0]
   30bda:	685b      	ldr	r3, [r3, #4]
   30bdc:	001a      	movs	r2, r3
   30bde:	693b      	ldr	r3, [r7, #16]
   30be0:	189b      	adds	r3, r3, r2
   30be2:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   30be4:	e039      	b.n	30c5a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   30be6:	693b      	ldr	r3, [r7, #16]
   30be8:	781b      	ldrb	r3, [r3, #0]
   30bea:	2b2f      	cmp	r3, #47	; 0x2f
   30bec:	d103      	bne.n	30bf6 <isTopicMatched+0x32>
   30bee:	697b      	ldr	r3, [r7, #20]
   30bf0:	781b      	ldrb	r3, [r3, #0]
   30bf2:	2b2f      	cmp	r3, #47	; 0x2f
   30bf4:	d13a      	bne.n	30c6c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   30bf6:	697b      	ldr	r3, [r7, #20]
   30bf8:	781b      	ldrb	r3, [r3, #0]
   30bfa:	2b2b      	cmp	r3, #43	; 0x2b
   30bfc:	d009      	beq.n	30c12 <isTopicMatched+0x4e>
   30bfe:	697b      	ldr	r3, [r7, #20]
   30c00:	781b      	ldrb	r3, [r3, #0]
   30c02:	2b23      	cmp	r3, #35	; 0x23
   30c04:	d005      	beq.n	30c12 <isTopicMatched+0x4e>
   30c06:	697b      	ldr	r3, [r7, #20]
   30c08:	781a      	ldrb	r2, [r3, #0]
   30c0a:	693b      	ldr	r3, [r7, #16]
   30c0c:	781b      	ldrb	r3, [r3, #0]
   30c0e:	429a      	cmp	r2, r3
   30c10:	d12e      	bne.n	30c70 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   30c12:	697b      	ldr	r3, [r7, #20]
   30c14:	781b      	ldrb	r3, [r3, #0]
   30c16:	2b2b      	cmp	r3, #43	; 0x2b
   30c18:	d112      	bne.n	30c40 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   30c1a:	693b      	ldr	r3, [r7, #16]
   30c1c:	3301      	adds	r3, #1
   30c1e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   30c20:	e005      	b.n	30c2e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   30c22:	693b      	ldr	r3, [r7, #16]
   30c24:	3301      	adds	r3, #1
   30c26:	613b      	str	r3, [r7, #16]
   30c28:	693b      	ldr	r3, [r7, #16]
   30c2a:	3301      	adds	r3, #1
   30c2c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   30c2e:	68fa      	ldr	r2, [r7, #12]
   30c30:	68bb      	ldr	r3, [r7, #8]
   30c32:	429a      	cmp	r2, r3
   30c34:	d20b      	bcs.n	30c4e <isTopicMatched+0x8a>
   30c36:	68fb      	ldr	r3, [r7, #12]
   30c38:	781b      	ldrb	r3, [r3, #0]
   30c3a:	2b2f      	cmp	r3, #47	; 0x2f
   30c3c:	d1f1      	bne.n	30c22 <isTopicMatched+0x5e>
   30c3e:	e006      	b.n	30c4e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   30c40:	697b      	ldr	r3, [r7, #20]
   30c42:	781b      	ldrb	r3, [r3, #0]
   30c44:	2b23      	cmp	r3, #35	; 0x23
   30c46:	d102      	bne.n	30c4e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   30c48:	68bb      	ldr	r3, [r7, #8]
   30c4a:	3b01      	subs	r3, #1
   30c4c:	613b      	str	r3, [r7, #16]
        curf++;
   30c4e:	697b      	ldr	r3, [r7, #20]
   30c50:	3301      	adds	r3, #1
   30c52:	617b      	str	r3, [r7, #20]
        curn++;
   30c54:	693b      	ldr	r3, [r7, #16]
   30c56:	3301      	adds	r3, #1
   30c58:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   30c5a:	697b      	ldr	r3, [r7, #20]
   30c5c:	781b      	ldrb	r3, [r3, #0]
   30c5e:	2b00      	cmp	r3, #0
   30c60:	d007      	beq.n	30c72 <isTopicMatched+0xae>
   30c62:	693a      	ldr	r2, [r7, #16]
   30c64:	68bb      	ldr	r3, [r7, #8]
   30c66:	429a      	cmp	r2, r3
   30c68:	d3bd      	bcc.n	30be6 <isTopicMatched+0x22>
   30c6a:	e002      	b.n	30c72 <isTopicMatched+0xae>
            break;
   30c6c:	46c0      	nop			; (mov r8, r8)
   30c6e:	e000      	b.n	30c72 <isTopicMatched+0xae>
            break;
   30c70:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   30c72:	693a      	ldr	r2, [r7, #16]
   30c74:	68bb      	ldr	r3, [r7, #8]
   30c76:	429a      	cmp	r2, r3
   30c78:	d105      	bne.n	30c86 <isTopicMatched+0xc2>
   30c7a:	697b      	ldr	r3, [r7, #20]
   30c7c:	781b      	ldrb	r3, [r3, #0]
   30c7e:	2b00      	cmp	r3, #0
   30c80:	d101      	bne.n	30c86 <isTopicMatched+0xc2>
   30c82:	2301      	movs	r3, #1
   30c84:	e000      	b.n	30c88 <isTopicMatched+0xc4>
   30c86:	2300      	movs	r3, #0
   30c88:	b2db      	uxtb	r3, r3
}
   30c8a:	0018      	movs	r0, r3
   30c8c:	46bd      	mov	sp, r7
   30c8e:	b006      	add	sp, #24
   30c90:	bd80      	pop	{r7, pc}
	...

00030c94 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   30c94:	b580      	push	{r7, lr}
   30c96:	b08a      	sub	sp, #40	; 0x28
   30c98:	af00      	add	r7, sp, #0
   30c9a:	60f8      	str	r0, [r7, #12]
   30c9c:	60b9      	str	r1, [r7, #8]
   30c9e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   30ca0:	2301      	movs	r3, #1
   30ca2:	425b      	negs	r3, r3
   30ca4:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30ca6:	2300      	movs	r3, #0
   30ca8:	627b      	str	r3, [r7, #36]	; 0x24
   30caa:	e044      	b.n	30d36 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   30cac:	68fa      	ldr	r2, [r7, #12]
   30cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30cb0:	3304      	adds	r3, #4
   30cb2:	00db      	lsls	r3, r3, #3
   30cb4:	18d3      	adds	r3, r2, r3
   30cb6:	3304      	adds	r3, #4
   30cb8:	681b      	ldr	r3, [r3, #0]
   30cba:	2b00      	cmp	r3, #0
   30cbc:	d038      	beq.n	30d30 <deliverMessage+0x9c>
   30cbe:	68fa      	ldr	r2, [r7, #12]
   30cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30cc2:	3304      	adds	r3, #4
   30cc4:	00db      	lsls	r3, r3, #3
   30cc6:	18d3      	adds	r3, r2, r3
   30cc8:	3304      	adds	r3, #4
   30cca:	681a      	ldr	r2, [r3, #0]
   30ccc:	68bb      	ldr	r3, [r7, #8]
   30cce:	0011      	movs	r1, r2
   30cd0:	0018      	movs	r0, r3
   30cd2:	4b28      	ldr	r3, [pc, #160]	; (30d74 <deliverMessage+0xe0>)
   30cd4:	4798      	blx	r3
   30cd6:	1e03      	subs	r3, r0, #0
   30cd8:	d10d      	bne.n	30cf6 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   30cda:	68fa      	ldr	r2, [r7, #12]
   30cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30cde:	3304      	adds	r3, #4
   30ce0:	00db      	lsls	r3, r3, #3
   30ce2:	18d3      	adds	r3, r2, r3
   30ce4:	3304      	adds	r3, #4
   30ce6:	681b      	ldr	r3, [r3, #0]
   30ce8:	68ba      	ldr	r2, [r7, #8]
   30cea:	0011      	movs	r1, r2
   30cec:	0018      	movs	r0, r3
   30cee:	4b22      	ldr	r3, [pc, #136]	; (30d78 <deliverMessage+0xe4>)
   30cf0:	4798      	blx	r3
   30cf2:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   30cf4:	d01c      	beq.n	30d30 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   30cf6:	68fa      	ldr	r2, [r7, #12]
   30cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30cfa:	3304      	adds	r3, #4
   30cfc:	00db      	lsls	r3, r3, #3
   30cfe:	18d3      	adds	r3, r2, r3
   30d00:	3308      	adds	r3, #8
   30d02:	681b      	ldr	r3, [r3, #0]
   30d04:	2b00      	cmp	r3, #0
   30d06:	d013      	beq.n	30d30 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   30d08:	687a      	ldr	r2, [r7, #4]
   30d0a:	68b9      	ldr	r1, [r7, #8]
   30d0c:	2318      	movs	r3, #24
   30d0e:	18fb      	adds	r3, r7, r3
   30d10:	0018      	movs	r0, r3
   30d12:	4b1a      	ldr	r3, [pc, #104]	; (30d7c <deliverMessage+0xe8>)
   30d14:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   30d16:	68fa      	ldr	r2, [r7, #12]
   30d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d1a:	3304      	adds	r3, #4
   30d1c:	00db      	lsls	r3, r3, #3
   30d1e:	18d3      	adds	r3, r2, r3
   30d20:	3308      	adds	r3, #8
   30d22:	681b      	ldr	r3, [r3, #0]
   30d24:	2218      	movs	r2, #24
   30d26:	18ba      	adds	r2, r7, r2
   30d28:	0010      	movs	r0, r2
   30d2a:	4798      	blx	r3
                rc = SUCCESS;
   30d2c:	2300      	movs	r3, #0
   30d2e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d32:	3301      	adds	r3, #1
   30d34:	627b      	str	r3, [r7, #36]	; 0x24
   30d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d38:	2b04      	cmp	r3, #4
   30d3a:	ddb7      	ble.n	30cac <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   30d3c:	6a3b      	ldr	r3, [r7, #32]
   30d3e:	3301      	adds	r3, #1
   30d40:	d112      	bne.n	30d68 <deliverMessage+0xd4>
   30d42:	68fb      	ldr	r3, [r7, #12]
   30d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d46:	2b00      	cmp	r3, #0
   30d48:	d00e      	beq.n	30d68 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   30d4a:	687a      	ldr	r2, [r7, #4]
   30d4c:	68b9      	ldr	r1, [r7, #8]
   30d4e:	2310      	movs	r3, #16
   30d50:	18fb      	adds	r3, r7, r3
   30d52:	0018      	movs	r0, r3
   30d54:	4b09      	ldr	r3, [pc, #36]	; (30d7c <deliverMessage+0xe8>)
   30d56:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   30d58:	68fb      	ldr	r3, [r7, #12]
   30d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d5c:	2210      	movs	r2, #16
   30d5e:	18ba      	adds	r2, r7, r2
   30d60:	0010      	movs	r0, r2
   30d62:	4798      	blx	r3
        rc = SUCCESS;
   30d64:	2300      	movs	r3, #0
   30d66:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   30d68:	6a3b      	ldr	r3, [r7, #32]
}
   30d6a:	0018      	movs	r0, r3
   30d6c:	46bd      	mov	sp, r7
   30d6e:	b00a      	add	sp, #40	; 0x28
   30d70:	bd80      	pop	{r7, pc}
   30d72:	46c0      	nop			; (mov r8, r8)
   30d74:	00032969 	.word	0x00032969
   30d78:	00030bc5 	.word	0x00030bc5
   30d7c:	000308cd 	.word	0x000308cd

00030d80 <keepalive>:


int keepalive(MQTTClient* c)
{
   30d80:	b580      	push	{r7, lr}
   30d82:	b088      	sub	sp, #32
   30d84:	af00      	add	r7, sp, #0
   30d86:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   30d88:	2301      	movs	r3, #1
   30d8a:	425b      	negs	r3, r3
   30d8c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   30d8e:	687b      	ldr	r3, [r7, #4]
   30d90:	699b      	ldr	r3, [r3, #24]
   30d92:	2b00      	cmp	r3, #0
   30d94:	d102      	bne.n	30d9c <keepalive+0x1c>
    {
        rc = SUCCESS;
   30d96:	2300      	movs	r3, #0
   30d98:	61fb      	str	r3, [r7, #28]
        goto exit;
   30d9a:	e033      	b.n	30e04 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   30d9c:	687b      	ldr	r3, [r7, #4]
   30d9e:	3354      	adds	r3, #84	; 0x54
   30da0:	0018      	movs	r0, r3
   30da2:	4b1b      	ldr	r3, [pc, #108]	; (30e10 <keepalive+0x90>)
   30da4:	4798      	blx	r3
   30da6:	1e03      	subs	r3, r0, #0
   30da8:	d02c      	beq.n	30e04 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   30daa:	687b      	ldr	r3, [r7, #4]
   30dac:	7f1b      	ldrb	r3, [r3, #28]
   30dae:	2b00      	cmp	r3, #0
   30db0:	d128      	bne.n	30e04 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   30db2:	230c      	movs	r3, #12
   30db4:	18fb      	adds	r3, r7, r3
   30db6:	0018      	movs	r0, r3
   30db8:	4b16      	ldr	r3, [pc, #88]	; (30e14 <keepalive+0x94>)
   30dba:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   30dbc:	23fa      	movs	r3, #250	; 0xfa
   30dbe:	009a      	lsls	r2, r3, #2
   30dc0:	230c      	movs	r3, #12
   30dc2:	18fb      	adds	r3, r7, r3
   30dc4:	0011      	movs	r1, r2
   30dc6:	0018      	movs	r0, r3
   30dc8:	4b13      	ldr	r3, [pc, #76]	; (30e18 <keepalive+0x98>)
   30dca:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   30dcc:	687b      	ldr	r3, [r7, #4]
   30dce:	691a      	ldr	r2, [r3, #16]
   30dd0:	687b      	ldr	r3, [r7, #4]
   30dd2:	689b      	ldr	r3, [r3, #8]
   30dd4:	0019      	movs	r1, r3
   30dd6:	0010      	movs	r0, r2
   30dd8:	4b10      	ldr	r3, [pc, #64]	; (30e1c <keepalive+0x9c>)
   30dda:	4798      	blx	r3
   30ddc:	0003      	movs	r3, r0
   30dde:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   30de0:	69bb      	ldr	r3, [r7, #24]
   30de2:	2b00      	cmp	r3, #0
   30de4:	dd0e      	ble.n	30e04 <keepalive+0x84>
   30de6:	230c      	movs	r3, #12
   30de8:	18fa      	adds	r2, r7, r3
   30dea:	69b9      	ldr	r1, [r7, #24]
   30dec:	687b      	ldr	r3, [r7, #4]
   30dee:	0018      	movs	r0, r3
   30df0:	4b0b      	ldr	r3, [pc, #44]	; (30e20 <keepalive+0xa0>)
   30df2:	4798      	blx	r3
   30df4:	0003      	movs	r3, r0
   30df6:	61fb      	str	r3, [r7, #28]
   30df8:	69fb      	ldr	r3, [r7, #28]
   30dfa:	2b00      	cmp	r3, #0
   30dfc:	d102      	bne.n	30e04 <keepalive+0x84>
                c->ping_outstanding = 1;
   30dfe:	687b      	ldr	r3, [r7, #4]
   30e00:	2201      	movs	r2, #1
   30e02:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   30e04:	69fb      	ldr	r3, [r7, #28]
}
   30e06:	0018      	movs	r0, r3
   30e08:	46bd      	mov	sp, r7
   30e0a:	b008      	add	sp, #32
   30e0c:	bd80      	pop	{r7, pc}
   30e0e:	46c0      	nop			; (mov r8, r8)
   30e10:	00031701 	.word	0x00031701
   30e14:	000317a5 	.word	0x000317a5
   30e18:	0003172d 	.word	0x0003172d
   30e1c:	00032379 	.word	0x00032379
   30e20:	0003091d 	.word	0x0003091d

00030e24 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   30e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   30e26:	b095      	sub	sp, #84	; 0x54
   30e28:	af06      	add	r7, sp, #24
   30e2a:	6078      	str	r0, [r7, #4]
   30e2c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   30e2e:	683a      	ldr	r2, [r7, #0]
   30e30:	687b      	ldr	r3, [r7, #4]
   30e32:	0011      	movs	r1, r2
   30e34:	0018      	movs	r0, r3
   30e36:	4b70      	ldr	r3, [pc, #448]	; (30ff8 <cycle+0x1d4>)
   30e38:	4798      	blx	r3
   30e3a:	0002      	movs	r2, r0
   30e3c:	232e      	movs	r3, #46	; 0x2e
   30e3e:	18fb      	adds	r3, r7, r3
   30e40:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   30e42:	2300      	movs	r3, #0
   30e44:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   30e46:	2300      	movs	r3, #0
   30e48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   30e4a:	232e      	movs	r3, #46	; 0x2e
   30e4c:	18fb      	adds	r3, r7, r3
   30e4e:	881b      	ldrh	r3, [r3, #0]
   30e50:	2b0d      	cmp	r3, #13
   30e52:	d900      	bls.n	30e56 <cycle+0x32>
   30e54:	e0bd      	b.n	30fd2 <cycle+0x1ae>
   30e56:	009a      	lsls	r2, r3, #2
   30e58:	4b68      	ldr	r3, [pc, #416]	; (30ffc <cycle+0x1d8>)
   30e5a:	18d3      	adds	r3, r2, r3
   30e5c:	681b      	ldr	r3, [r3, #0]
   30e5e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   30e60:	687b      	ldr	r3, [r7, #4]
   30e62:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   30e64:	687b      	ldr	r3, [r7, #4]
   30e66:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   30e68:	001e      	movs	r6, r3
   30e6a:	2310      	movs	r3, #16
   30e6c:	18fb      	adds	r3, r7, r3
   30e6e:	1d1d      	adds	r5, r3, #4
   30e70:	2310      	movs	r3, #16
   30e72:	18fb      	adds	r3, r7, r3
   30e74:	1c5c      	adds	r4, r3, #1
   30e76:	230c      	movs	r3, #12
   30e78:	18f9      	adds	r1, r7, r3
   30e7a:	2310      	movs	r3, #16
   30e7c:	18fb      	adds	r3, r7, r3
   30e7e:	1c98      	adds	r0, r3, #2
   30e80:	9604      	str	r6, [sp, #16]
   30e82:	9203      	str	r2, [sp, #12]
   30e84:	2310      	movs	r3, #16
   30e86:	18fb      	adds	r3, r7, r3
   30e88:	330c      	adds	r3, #12
   30e8a:	9302      	str	r3, [sp, #8]
   30e8c:	2310      	movs	r3, #16
   30e8e:	18fb      	adds	r3, r7, r3
   30e90:	3308      	adds	r3, #8
   30e92:	9301      	str	r3, [sp, #4]
   30e94:	2320      	movs	r3, #32
   30e96:	18fb      	adds	r3, r7, r3
   30e98:	9300      	str	r3, [sp, #0]
   30e9a:	002b      	movs	r3, r5
   30e9c:	0022      	movs	r2, r4
   30e9e:	4c58      	ldr	r4, [pc, #352]	; (31000 <cycle+0x1dc>)
   30ea0:	47a0      	blx	r4
   30ea2:	0003      	movs	r3, r0
   30ea4:	2b01      	cmp	r3, #1
   30ea6:	d000      	beq.n	30eaa <cycle+0x86>
   30ea8:	e098      	b.n	30fdc <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   30eaa:	68fb      	ldr	r3, [r7, #12]
   30eac:	b2da      	uxtb	r2, r3
   30eae:	2310      	movs	r3, #16
   30eb0:	18fb      	adds	r3, r7, r3
   30eb2:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   30eb4:	2310      	movs	r3, #16
   30eb6:	18fa      	adds	r2, r7, r3
   30eb8:	2320      	movs	r3, #32
   30eba:	18f9      	adds	r1, r7, r3
   30ebc:	687b      	ldr	r3, [r7, #4]
   30ebe:	0018      	movs	r0, r3
   30ec0:	4b50      	ldr	r3, [pc, #320]	; (31004 <cycle+0x1e0>)
   30ec2:	4798      	blx	r3
            if (msg.qos != QOS0)
   30ec4:	2310      	movs	r3, #16
   30ec6:	18fb      	adds	r3, r7, r3
   30ec8:	781b      	ldrb	r3, [r3, #0]
   30eca:	2b00      	cmp	r3, #0
   30ecc:	d100      	bne.n	30ed0 <cycle+0xac>
   30ece:	e07d      	b.n	30fcc <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   30ed0:	2310      	movs	r3, #16
   30ed2:	18fb      	adds	r3, r7, r3
   30ed4:	781b      	ldrb	r3, [r3, #0]
   30ed6:	2b01      	cmp	r3, #1
   30ed8:	d10f      	bne.n	30efa <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   30eda:	687b      	ldr	r3, [r7, #4]
   30edc:	6918      	ldr	r0, [r3, #16]
   30ede:	687b      	ldr	r3, [r7, #4]
   30ee0:	689b      	ldr	r3, [r3, #8]
   30ee2:	0019      	movs	r1, r3
   30ee4:	2310      	movs	r3, #16
   30ee6:	18fb      	adds	r3, r7, r3
   30ee8:	889b      	ldrh	r3, [r3, #4]
   30eea:	9300      	str	r3, [sp, #0]
   30eec:	2300      	movs	r3, #0
   30eee:	2204      	movs	r2, #4
   30ef0:	4c45      	ldr	r4, [pc, #276]	; (31008 <cycle+0x1e4>)
   30ef2:	47a0      	blx	r4
   30ef4:	0003      	movs	r3, r0
   30ef6:	637b      	str	r3, [r7, #52]	; 0x34
   30ef8:	e013      	b.n	30f22 <cycle+0xfe>
                else if (msg.qos == QOS2)
   30efa:	2310      	movs	r3, #16
   30efc:	18fb      	adds	r3, r7, r3
   30efe:	781b      	ldrb	r3, [r3, #0]
   30f00:	2b02      	cmp	r3, #2
   30f02:	d10e      	bne.n	30f22 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   30f04:	687b      	ldr	r3, [r7, #4]
   30f06:	6918      	ldr	r0, [r3, #16]
   30f08:	687b      	ldr	r3, [r7, #4]
   30f0a:	689b      	ldr	r3, [r3, #8]
   30f0c:	0019      	movs	r1, r3
   30f0e:	2310      	movs	r3, #16
   30f10:	18fb      	adds	r3, r7, r3
   30f12:	889b      	ldrh	r3, [r3, #4]
   30f14:	9300      	str	r3, [sp, #0]
   30f16:	2300      	movs	r3, #0
   30f18:	2205      	movs	r2, #5
   30f1a:	4c3b      	ldr	r4, [pc, #236]	; (31008 <cycle+0x1e4>)
   30f1c:	47a0      	blx	r4
   30f1e:	0003      	movs	r3, r0
   30f20:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   30f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30f24:	2b00      	cmp	r3, #0
   30f26:	dc03      	bgt.n	30f30 <cycle+0x10c>
                    rc = FAILURE;
   30f28:	2301      	movs	r3, #1
   30f2a:	425b      	negs	r3, r3
   30f2c:	633b      	str	r3, [r7, #48]	; 0x30
   30f2e:	e007      	b.n	30f40 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   30f30:	683a      	ldr	r2, [r7, #0]
   30f32:	6b79      	ldr	r1, [r7, #52]	; 0x34
   30f34:	687b      	ldr	r3, [r7, #4]
   30f36:	0018      	movs	r0, r3
   30f38:	4b34      	ldr	r3, [pc, #208]	; (3100c <cycle+0x1e8>)
   30f3a:	4798      	blx	r3
   30f3c:	0003      	movs	r3, r0
   30f3e:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   30f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30f42:	3301      	adds	r3, #1
   30f44:	d142      	bne.n	30fcc <cycle+0x1a8>
                    goto exit; // there was a problem
   30f46:	46c0      	nop			; (mov r8, r8)
   30f48:	e049      	b.n	30fde <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   30f4a:	687b      	ldr	r3, [r7, #4]
   30f4c:	695c      	ldr	r4, [r3, #20]
   30f4e:	687b      	ldr	r3, [r7, #4]
   30f50:	68db      	ldr	r3, [r3, #12]
   30f52:	220a      	movs	r2, #10
   30f54:	18ba      	adds	r2, r7, r2
   30f56:	2109      	movs	r1, #9
   30f58:	1879      	adds	r1, r7, r1
   30f5a:	2008      	movs	r0, #8
   30f5c:	1838      	adds	r0, r7, r0
   30f5e:	9300      	str	r3, [sp, #0]
   30f60:	0023      	movs	r3, r4
   30f62:	4c2b      	ldr	r4, [pc, #172]	; (31010 <cycle+0x1ec>)
   30f64:	47a0      	blx	r4
   30f66:	0003      	movs	r3, r0
   30f68:	2b01      	cmp	r3, #1
   30f6a:	d003      	beq.n	30f74 <cycle+0x150>
                rc = FAILURE;
   30f6c:	2301      	movs	r3, #1
   30f6e:	425b      	negs	r3, r3
   30f70:	633b      	str	r3, [r7, #48]	; 0x30
   30f72:	e023      	b.n	30fbc <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   30f74:	687b      	ldr	r3, [r7, #4]
   30f76:	6918      	ldr	r0, [r3, #16]
   30f78:	687b      	ldr	r3, [r7, #4]
   30f7a:	689b      	ldr	r3, [r3, #8]
   30f7c:	0019      	movs	r1, r3
   30f7e:	230a      	movs	r3, #10
   30f80:	18fb      	adds	r3, r7, r3
   30f82:	881b      	ldrh	r3, [r3, #0]
   30f84:	9300      	str	r3, [sp, #0]
   30f86:	2300      	movs	r3, #0
   30f88:	2206      	movs	r2, #6
   30f8a:	4c1f      	ldr	r4, [pc, #124]	; (31008 <cycle+0x1e4>)
   30f8c:	47a0      	blx	r4
   30f8e:	0003      	movs	r3, r0
   30f90:	637b      	str	r3, [r7, #52]	; 0x34
   30f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30f94:	2b00      	cmp	r3, #0
   30f96:	dc03      	bgt.n	30fa0 <cycle+0x17c>
                rc = FAILURE;
   30f98:	2301      	movs	r3, #1
   30f9a:	425b      	negs	r3, r3
   30f9c:	633b      	str	r3, [r7, #48]	; 0x30
   30f9e:	e00d      	b.n	30fbc <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   30fa0:	683a      	ldr	r2, [r7, #0]
   30fa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   30fa4:	687b      	ldr	r3, [r7, #4]
   30fa6:	0018      	movs	r0, r3
   30fa8:	4b18      	ldr	r3, [pc, #96]	; (3100c <cycle+0x1e8>)
   30faa:	4798      	blx	r3
   30fac:	0003      	movs	r3, r0
   30fae:	633b      	str	r3, [r7, #48]	; 0x30
   30fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30fb2:	2b00      	cmp	r3, #0
   30fb4:	d002      	beq.n	30fbc <cycle+0x198>
                rc = FAILURE; // there was a problem
   30fb6:	2301      	movs	r3, #1
   30fb8:	425b      	negs	r3, r3
   30fba:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   30fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30fbe:	3301      	adds	r3, #1
   30fc0:	d106      	bne.n	30fd0 <cycle+0x1ac>
                goto exit; // there was a problem
   30fc2:	e00c      	b.n	30fde <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   30fc4:	687b      	ldr	r3, [r7, #4]
   30fc6:	2200      	movs	r2, #0
   30fc8:	771a      	strb	r2, [r3, #28]
            break;
   30fca:	e002      	b.n	30fd2 <cycle+0x1ae>
            break;
   30fcc:	46c0      	nop			; (mov r8, r8)
   30fce:	e000      	b.n	30fd2 <cycle+0x1ae>
            break;
   30fd0:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   30fd2:	687b      	ldr	r3, [r7, #4]
   30fd4:	0018      	movs	r0, r3
   30fd6:	4b0f      	ldr	r3, [pc, #60]	; (31014 <cycle+0x1f0>)
   30fd8:	4798      	blx	r3
   30fda:	e000      	b.n	30fde <cycle+0x1ba>
                goto exit;
   30fdc:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   30fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30fe0:	2b00      	cmp	r3, #0
   30fe2:	d103      	bne.n	30fec <cycle+0x1c8>
        rc = packet_type;
   30fe4:	232e      	movs	r3, #46	; 0x2e
   30fe6:	18fb      	adds	r3, r7, r3
   30fe8:	881b      	ldrh	r3, [r3, #0]
   30fea:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   30fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   30fee:	0018      	movs	r0, r3
   30ff0:	46bd      	mov	sp, r7
   30ff2:	b00f      	add	sp, #60	; 0x3c
   30ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30ff6:	46c0      	nop			; (mov r8, r8)
   30ff8:	00030ad9 	.word	0x00030ad9
   30ffc:	0003ce44 	.word	0x0003ce44
   31000:	0003239d 	.word	0x0003239d
   31004:	00030c95 	.word	0x00030c95
   31008:	00032b95 	.word	0x00032b95
   3100c:	0003091d 	.word	0x0003091d
   31010:	000324a1 	.word	0x000324a1
   31014:	00030d81 	.word	0x00030d81

00031018 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   31018:	b580      	push	{r7, lr}
   3101a:	b086      	sub	sp, #24
   3101c:	af00      	add	r7, sp, #0
   3101e:	6078      	str	r0, [r7, #4]
   31020:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   31022:	2300      	movs	r3, #0
   31024:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   31026:	2308      	movs	r3, #8
   31028:	18fb      	adds	r3, r7, r3
   3102a:	0018      	movs	r0, r3
   3102c:	4b11      	ldr	r3, [pc, #68]	; (31074 <MQTTYield+0x5c>)
   3102e:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   31030:	683a      	ldr	r2, [r7, #0]
   31032:	2308      	movs	r3, #8
   31034:	18fb      	adds	r3, r7, r3
   31036:	0011      	movs	r1, r2
   31038:	0018      	movs	r0, r3
   3103a:	4b0f      	ldr	r3, [pc, #60]	; (31078 <MQTTYield+0x60>)
   3103c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   3103e:	2308      	movs	r3, #8
   31040:	18fa      	adds	r2, r7, r3
   31042:	687b      	ldr	r3, [r7, #4]
   31044:	0011      	movs	r1, r2
   31046:	0018      	movs	r0, r3
   31048:	4b0c      	ldr	r3, [pc, #48]	; (3107c <MQTTYield+0x64>)
   3104a:	4798      	blx	r3
   3104c:	0003      	movs	r3, r0
   3104e:	3301      	adds	r3, #1
   31050:	d103      	bne.n	3105a <MQTTYield+0x42>
        {
            rc = FAILURE;
   31052:	2301      	movs	r3, #1
   31054:	425b      	negs	r3, r3
   31056:	617b      	str	r3, [r7, #20]
            break;
   31058:	e006      	b.n	31068 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   3105a:	2308      	movs	r3, #8
   3105c:	18fb      	adds	r3, r7, r3
   3105e:	0018      	movs	r0, r3
   31060:	4b07      	ldr	r3, [pc, #28]	; (31080 <MQTTYield+0x68>)
   31062:	4798      	blx	r3
   31064:	1e03      	subs	r3, r0, #0
   31066:	d0ea      	beq.n	3103e <MQTTYield+0x26>
        
    return rc;
   31068:	697b      	ldr	r3, [r7, #20]
}
   3106a:	0018      	movs	r0, r3
   3106c:	46bd      	mov	sp, r7
   3106e:	b006      	add	sp, #24
   31070:	bd80      	pop	{r7, pc}
   31072:	46c0      	nop			; (mov r8, r8)
   31074:	000317a5 	.word	0x000317a5
   31078:	0003172d 	.word	0x0003172d
   3107c:	00030e25 	.word	0x00030e25
   31080:	00031701 	.word	0x00031701

00031084 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   31084:	b580      	push	{r7, lr}
   31086:	b086      	sub	sp, #24
   31088:	af00      	add	r7, sp, #0
   3108a:	60f8      	str	r0, [r7, #12]
   3108c:	60b9      	str	r1, [r7, #8]
   3108e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   31090:	2301      	movs	r3, #1
   31092:	425b      	negs	r3, r3
   31094:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   31096:	687b      	ldr	r3, [r7, #4]
   31098:	0018      	movs	r0, r3
   3109a:	4b0b      	ldr	r3, [pc, #44]	; (310c8 <waitfor+0x44>)
   3109c:	4798      	blx	r3
   3109e:	1e03      	subs	r3, r0, #0
   310a0:	d10c      	bne.n	310bc <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   310a2:	687a      	ldr	r2, [r7, #4]
   310a4:	68fb      	ldr	r3, [r7, #12]
   310a6:	0011      	movs	r1, r2
   310a8:	0018      	movs	r0, r3
   310aa:	4b08      	ldr	r3, [pc, #32]	; (310cc <waitfor+0x48>)
   310ac:	4798      	blx	r3
   310ae:	0003      	movs	r3, r0
   310b0:	617b      	str	r3, [r7, #20]
   310b2:	697a      	ldr	r2, [r7, #20]
   310b4:	68bb      	ldr	r3, [r7, #8]
   310b6:	429a      	cmp	r2, r3
   310b8:	d1ed      	bne.n	31096 <waitfor+0x12>
   310ba:	e000      	b.n	310be <waitfor+0x3a>
            break; // we timed out
   310bc:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   310be:	697b      	ldr	r3, [r7, #20]
}
   310c0:	0018      	movs	r0, r3
   310c2:	46bd      	mov	sp, r7
   310c4:	b006      	add	sp, #24
   310c6:	bd80      	pop	{r7, pc}
   310c8:	00031701 	.word	0x00031701
   310cc:	00030e25 	.word	0x00030e25

000310d0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   310d0:	b590      	push	{r4, r7, lr}
   310d2:	b09f      	sub	sp, #124	; 0x7c
   310d4:	af00      	add	r7, sp, #0
   310d6:	6078      	str	r0, [r7, #4]
   310d8:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   310da:	2301      	movs	r3, #1
   310dc:	425b      	negs	r3, r3
   310de:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   310e0:	230c      	movs	r3, #12
   310e2:	18fa      	adds	r2, r7, r3
   310e4:	4b41      	ldr	r3, [pc, #260]	; (311ec <MQTTConnect+0x11c>)
   310e6:	0010      	movs	r0, r2
   310e8:	0019      	movs	r1, r3
   310ea:	2358      	movs	r3, #88	; 0x58
   310ec:	001a      	movs	r2, r3
   310ee:	4b40      	ldr	r3, [pc, #256]	; (311f0 <MQTTConnect+0x120>)
   310f0:	4798      	blx	r3
    int len = 0;
   310f2:	2300      	movs	r3, #0
   310f4:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   310f6:	687b      	ldr	r3, [r7, #4]
   310f8:	6a1b      	ldr	r3, [r3, #32]
   310fa:	2b00      	cmp	r3, #0
   310fc:	d166      	bne.n	311cc <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   310fe:	2364      	movs	r3, #100	; 0x64
   31100:	18fb      	adds	r3, r7, r3
   31102:	0018      	movs	r0, r3
   31104:	4b3b      	ldr	r3, [pc, #236]	; (311f4 <MQTTConnect+0x124>)
   31106:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   31108:	687b      	ldr	r3, [r7, #4]
   3110a:	685a      	ldr	r2, [r3, #4]
   3110c:	2364      	movs	r3, #100	; 0x64
   3110e:	18fb      	adds	r3, r7, r3
   31110:	0011      	movs	r1, r2
   31112:	0018      	movs	r0, r3
   31114:	4b38      	ldr	r3, [pc, #224]	; (311f8 <MQTTConnect+0x128>)
   31116:	4798      	blx	r3

    if (options == 0)
   31118:	683b      	ldr	r3, [r7, #0]
   3111a:	2b00      	cmp	r3, #0
   3111c:	d102      	bne.n	31124 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   3111e:	230c      	movs	r3, #12
   31120:	18fb      	adds	r3, r7, r3
   31122:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   31124:	683b      	ldr	r3, [r7, #0]
   31126:	8b1b      	ldrh	r3, [r3, #24]
   31128:	001a      	movs	r2, r3
   3112a:	687b      	ldr	r3, [r7, #4]
   3112c:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   3112e:	687b      	ldr	r3, [r7, #4]
   31130:	3354      	adds	r3, #84	; 0x54
   31132:	001a      	movs	r2, r3
   31134:	687b      	ldr	r3, [r7, #4]
   31136:	699b      	ldr	r3, [r3, #24]
   31138:	0019      	movs	r1, r3
   3113a:	0010      	movs	r0, r2
   3113c:	4b2f      	ldr	r3, [pc, #188]	; (311fc <MQTTConnect+0x12c>)
   3113e:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   31140:	687b      	ldr	r3, [r7, #4]
   31142:	6918      	ldr	r0, [r3, #16]
   31144:	687b      	ldr	r3, [r7, #4]
   31146:	689b      	ldr	r3, [r3, #8]
   31148:	0019      	movs	r1, r3
   3114a:	683b      	ldr	r3, [r7, #0]
   3114c:	001a      	movs	r2, r3
   3114e:	4b2c      	ldr	r3, [pc, #176]	; (31200 <MQTTConnect+0x130>)
   31150:	4798      	blx	r3
   31152:	0003      	movs	r3, r0
   31154:	673b      	str	r3, [r7, #112]	; 0x70
   31156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31158:	2b00      	cmp	r3, #0
   3115a:	dd39      	ble.n	311d0 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   3115c:	2364      	movs	r3, #100	; 0x64
   3115e:	18fa      	adds	r2, r7, r3
   31160:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31162:	687b      	ldr	r3, [r7, #4]
   31164:	0018      	movs	r0, r3
   31166:	4b27      	ldr	r3, [pc, #156]	; (31204 <MQTTConnect+0x134>)
   31168:	4798      	blx	r3
   3116a:	0003      	movs	r3, r0
   3116c:	677b      	str	r3, [r7, #116]	; 0x74
   3116e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31170:	2b00      	cmp	r3, #0
   31172:	d12f      	bne.n	311d4 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   31174:	2364      	movs	r3, #100	; 0x64
   31176:	18fa      	adds	r2, r7, r3
   31178:	687b      	ldr	r3, [r7, #4]
   3117a:	2102      	movs	r1, #2
   3117c:	0018      	movs	r0, r3
   3117e:	4b22      	ldr	r3, [pc, #136]	; (31208 <MQTTConnect+0x138>)
   31180:	4798      	blx	r3
   31182:	0003      	movs	r3, r0
   31184:	2b02      	cmp	r3, #2
   31186:	d11d      	bne.n	311c4 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   31188:	230b      	movs	r3, #11
   3118a:	18fb      	adds	r3, r7, r3
   3118c:	22ff      	movs	r2, #255	; 0xff
   3118e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   31190:	230a      	movs	r3, #10
   31192:	18fb      	adds	r3, r7, r3
   31194:	2200      	movs	r2, #0
   31196:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   31198:	687b      	ldr	r3, [r7, #4]
   3119a:	695a      	ldr	r2, [r3, #20]
   3119c:	687b      	ldr	r3, [r7, #4]
   3119e:	68db      	ldr	r3, [r3, #12]
   311a0:	210b      	movs	r1, #11
   311a2:	1879      	adds	r1, r7, r1
   311a4:	200a      	movs	r0, #10
   311a6:	1838      	adds	r0, r7, r0
   311a8:	4c18      	ldr	r4, [pc, #96]	; (3120c <MQTTConnect+0x13c>)
   311aa:	47a0      	blx	r4
   311ac:	0003      	movs	r3, r0
   311ae:	2b01      	cmp	r3, #1
   311b0:	d104      	bne.n	311bc <MQTTConnect+0xec>
            rc = connack_rc;
   311b2:	230b      	movs	r3, #11
   311b4:	18fb      	adds	r3, r7, r3
   311b6:	781b      	ldrb	r3, [r3, #0]
   311b8:	677b      	str	r3, [r7, #116]	; 0x74
   311ba:	e00c      	b.n	311d6 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   311bc:	2301      	movs	r3, #1
   311be:	425b      	negs	r3, r3
   311c0:	677b      	str	r3, [r7, #116]	; 0x74
   311c2:	e008      	b.n	311d6 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   311c4:	2301      	movs	r3, #1
   311c6:	425b      	negs	r3, r3
   311c8:	677b      	str	r3, [r7, #116]	; 0x74
   311ca:	e004      	b.n	311d6 <MQTTConnect+0x106>
		goto exit;
   311cc:	46c0      	nop			; (mov r8, r8)
   311ce:	e002      	b.n	311d6 <MQTTConnect+0x106>
        goto exit;
   311d0:	46c0      	nop			; (mov r8, r8)
   311d2:	e000      	b.n	311d6 <MQTTConnect+0x106>
        goto exit; // there was a problem
   311d4:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   311d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   311d8:	2b00      	cmp	r3, #0
   311da:	d102      	bne.n	311e2 <MQTTConnect+0x112>
        c->isconnected = 1;
   311dc:	687b      	ldr	r3, [r7, #4]
   311de:	2201      	movs	r2, #1
   311e0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   311e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   311e4:	0018      	movs	r0, r3
   311e6:	46bd      	mov	sp, r7
   311e8:	b01f      	add	sp, #124	; 0x7c
   311ea:	bd90      	pop	{r4, r7, pc}
   311ec:	0003ce7c 	.word	0x0003ce7c
   311f0:	00037935 	.word	0x00037935
   311f4:	000317a5 	.word	0x000317a5
   311f8:	0003172d 	.word	0x0003172d
   311fc:	00031755 	.word	0x00031755
   31200:	00031f81 	.word	0x00031f81
   31204:	0003091d 	.word	0x0003091d
   31208:	00031085 	.word	0x00031085
   3120c:	000321fd 	.word	0x000321fd

00031210 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   31210:	b5b0      	push	{r4, r5, r7, lr}
   31212:	b096      	sub	sp, #88	; 0x58
   31214:	af04      	add	r7, sp, #16
   31216:	60f8      	str	r0, [r7, #12]
   31218:	60b9      	str	r1, [r7, #8]
   3121a:	603b      	str	r3, [r7, #0]
   3121c:	1dfb      	adds	r3, r7, #7
   3121e:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   31220:	2301      	movs	r3, #1
   31222:	425b      	negs	r3, r3
   31224:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   31226:	2300      	movs	r3, #0
   31228:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   3122a:	2324      	movs	r3, #36	; 0x24
   3122c:	18fb      	adds	r3, r7, r3
   3122e:	2200      	movs	r2, #0
   31230:	601a      	str	r2, [r3, #0]
   31232:	2324      	movs	r3, #36	; 0x24
   31234:	18fb      	adds	r3, r7, r3
   31236:	2200      	movs	r2, #0
   31238:	605a      	str	r2, [r3, #4]
   3123a:	2324      	movs	r3, #36	; 0x24
   3123c:	18fb      	adds	r3, r7, r3
   3123e:	2200      	movs	r2, #0
   31240:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   31242:	1dfb      	adds	r3, r7, #7
   31244:	781b      	ldrb	r3, [r3, #0]
   31246:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   31248:	2324      	movs	r3, #36	; 0x24
   3124a:	18fb      	adds	r3, r7, r3
   3124c:	68ba      	ldr	r2, [r7, #8]
   3124e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   31250:	68fb      	ldr	r3, [r7, #12]
   31252:	6a1b      	ldr	r3, [r3, #32]
   31254:	2b00      	cmp	r3, #0
   31256:	d100      	bne.n	3125a <MQTTSubscribe+0x4a>
   31258:	e088      	b.n	3136c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   3125a:	2330      	movs	r3, #48	; 0x30
   3125c:	18fb      	adds	r3, r7, r3
   3125e:	0018      	movs	r0, r3
   31260:	4b47      	ldr	r3, [pc, #284]	; (31380 <MQTTSubscribe+0x170>)
   31262:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31264:	68fb      	ldr	r3, [r7, #12]
   31266:	685a      	ldr	r2, [r3, #4]
   31268:	2330      	movs	r3, #48	; 0x30
   3126a:	18fb      	adds	r3, r7, r3
   3126c:	0011      	movs	r1, r2
   3126e:	0018      	movs	r0, r3
   31270:	4b44      	ldr	r3, [pc, #272]	; (31384 <MQTTSubscribe+0x174>)
   31272:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   31274:	68fb      	ldr	r3, [r7, #12]
   31276:	691c      	ldr	r4, [r3, #16]
   31278:	68fb      	ldr	r3, [r7, #12]
   3127a:	689b      	ldr	r3, [r3, #8]
   3127c:	001d      	movs	r5, r3
   3127e:	68fb      	ldr	r3, [r7, #12]
   31280:	0018      	movs	r0, r3
   31282:	4b41      	ldr	r3, [pc, #260]	; (31388 <MQTTSubscribe+0x178>)
   31284:	4798      	blx	r3
   31286:	0003      	movs	r3, r0
   31288:	b29a      	uxth	r2, r3
   3128a:	2320      	movs	r3, #32
   3128c:	18fb      	adds	r3, r7, r3
   3128e:	9302      	str	r3, [sp, #8]
   31290:	2324      	movs	r3, #36	; 0x24
   31292:	18fb      	adds	r3, r7, r3
   31294:	9301      	str	r3, [sp, #4]
   31296:	2301      	movs	r3, #1
   31298:	9300      	str	r3, [sp, #0]
   3129a:	0013      	movs	r3, r2
   3129c:	2200      	movs	r2, #0
   3129e:	0029      	movs	r1, r5
   312a0:	0020      	movs	r0, r4
   312a2:	4c3a      	ldr	r4, [pc, #232]	; (3138c <MQTTSubscribe+0x17c>)
   312a4:	47a0      	blx	r4
   312a6:	0003      	movs	r3, r0
   312a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   312aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   312ac:	2b00      	cmp	r3, #0
   312ae:	dd5f      	ble.n	31370 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   312b0:	2330      	movs	r3, #48	; 0x30
   312b2:	18fa      	adds	r2, r7, r3
   312b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   312b6:	68fb      	ldr	r3, [r7, #12]
   312b8:	0018      	movs	r0, r3
   312ba:	4b35      	ldr	r3, [pc, #212]	; (31390 <MQTTSubscribe+0x180>)
   312bc:	4798      	blx	r3
   312be:	0003      	movs	r3, r0
   312c0:	647b      	str	r3, [r7, #68]	; 0x44
   312c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   312c4:	2b00      	cmp	r3, #0
   312c6:	d155      	bne.n	31374 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   312c8:	2330      	movs	r3, #48	; 0x30
   312ca:	18fa      	adds	r2, r7, r3
   312cc:	68fb      	ldr	r3, [r7, #12]
   312ce:	2109      	movs	r1, #9
   312d0:	0018      	movs	r0, r3
   312d2:	4b30      	ldr	r3, [pc, #192]	; (31394 <MQTTSubscribe+0x184>)
   312d4:	4798      	blx	r3
   312d6:	0003      	movs	r3, r0
   312d8:	2b09      	cmp	r3, #9
   312da:	d143      	bne.n	31364 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   312dc:	2300      	movs	r3, #0
   312de:	61fb      	str	r3, [r7, #28]
   312e0:	2301      	movs	r3, #1
   312e2:	425b      	negs	r3, r3
   312e4:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   312e6:	68fb      	ldr	r3, [r7, #12]
   312e8:	695a      	ldr	r2, [r3, #20]
   312ea:	68fb      	ldr	r3, [r7, #12]
   312ec:	68db      	ldr	r3, [r3, #12]
   312ee:	001c      	movs	r4, r3
   312f0:	2318      	movs	r3, #24
   312f2:	18fb      	adds	r3, r7, r3
   312f4:	211c      	movs	r1, #28
   312f6:	1879      	adds	r1, r7, r1
   312f8:	2016      	movs	r0, #22
   312fa:	1838      	adds	r0, r7, r0
   312fc:	9401      	str	r4, [sp, #4]
   312fe:	9200      	str	r2, [sp, #0]
   31300:	000a      	movs	r2, r1
   31302:	2101      	movs	r1, #1
   31304:	4c24      	ldr	r4, [pc, #144]	; (31398 <MQTTSubscribe+0x188>)
   31306:	47a0      	blx	r4
   31308:	0003      	movs	r3, r0
   3130a:	2b01      	cmp	r3, #1
   3130c:	d101      	bne.n	31312 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   3130e:	69bb      	ldr	r3, [r7, #24]
   31310:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   31312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   31314:	2b80      	cmp	r3, #128	; 0x80
   31316:	d02e      	beq.n	31376 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31318:	2300      	movs	r3, #0
   3131a:	643b      	str	r3, [r7, #64]	; 0x40
   3131c:	e01e      	b.n	3135c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   3131e:	68fa      	ldr	r2, [r7, #12]
   31320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31322:	3304      	adds	r3, #4
   31324:	00db      	lsls	r3, r3, #3
   31326:	18d3      	adds	r3, r2, r3
   31328:	3304      	adds	r3, #4
   3132a:	681b      	ldr	r3, [r3, #0]
   3132c:	2b00      	cmp	r3, #0
   3132e:	d112      	bne.n	31356 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   31330:	68fa      	ldr	r2, [r7, #12]
   31332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31334:	3304      	adds	r3, #4
   31336:	00db      	lsls	r3, r3, #3
   31338:	18d3      	adds	r3, r2, r3
   3133a:	3304      	adds	r3, #4
   3133c:	68ba      	ldr	r2, [r7, #8]
   3133e:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   31340:	68fa      	ldr	r2, [r7, #12]
   31342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31344:	3304      	adds	r3, #4
   31346:	00db      	lsls	r3, r3, #3
   31348:	18d3      	adds	r3, r2, r3
   3134a:	3308      	adds	r3, #8
   3134c:	683a      	ldr	r2, [r7, #0]
   3134e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   31350:	2300      	movs	r3, #0
   31352:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   31354:	e00f      	b.n	31376 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31358:	3301      	adds	r3, #1
   3135a:	643b      	str	r3, [r7, #64]	; 0x40
   3135c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3135e:	2b04      	cmp	r3, #4
   31360:	dddd      	ble.n	3131e <MQTTSubscribe+0x10e>
   31362:	e008      	b.n	31376 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   31364:	2301      	movs	r3, #1
   31366:	425b      	negs	r3, r3
   31368:	647b      	str	r3, [r7, #68]	; 0x44
   3136a:	e004      	b.n	31376 <MQTTSubscribe+0x166>
		goto exit;
   3136c:	46c0      	nop			; (mov r8, r8)
   3136e:	e002      	b.n	31376 <MQTTSubscribe+0x166>
        goto exit;
   31370:	46c0      	nop			; (mov r8, r8)
   31372:	e000      	b.n	31376 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   31374:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   31376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   31378:	0018      	movs	r0, r3
   3137a:	46bd      	mov	sp, r7
   3137c:	b012      	add	sp, #72	; 0x48
   3137e:	bdb0      	pop	{r4, r5, r7, pc}
   31380:	000317a5 	.word	0x000317a5
   31384:	0003172d 	.word	0x0003172d
   31388:	000308ed 	.word	0x000308ed
   3138c:	00032cdd 	.word	0x00032cdd
   31390:	0003091d 	.word	0x0003091d
   31394:	00031085 	.word	0x00031085
   31398:	00032e2d 	.word	0x00032e2d

0003139c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   3139c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3139e:	46ce      	mov	lr, r9
   313a0:	4647      	mov	r7, r8
   313a2:	b580      	push	{r7, lr}
   313a4:	b097      	sub	sp, #92	; 0x5c
   313a6:	af08      	add	r7, sp, #32
   313a8:	60f8      	str	r0, [r7, #12]
   313aa:	60b9      	str	r1, [r7, #8]
   313ac:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   313ae:	2301      	movs	r3, #1
   313b0:	425b      	negs	r3, r3
   313b2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   313b4:	2318      	movs	r3, #24
   313b6:	18fb      	adds	r3, r7, r3
   313b8:	2200      	movs	r2, #0
   313ba:	601a      	str	r2, [r3, #0]
   313bc:	2318      	movs	r3, #24
   313be:	18fb      	adds	r3, r7, r3
   313c0:	2200      	movs	r2, #0
   313c2:	605a      	str	r2, [r3, #4]
   313c4:	2318      	movs	r3, #24
   313c6:	18fb      	adds	r3, r7, r3
   313c8:	2200      	movs	r2, #0
   313ca:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   313cc:	2318      	movs	r3, #24
   313ce:	18fb      	adds	r3, r7, r3
   313d0:	68ba      	ldr	r2, [r7, #8]
   313d2:	601a      	str	r2, [r3, #0]
    int len = 0;
   313d4:	2300      	movs	r3, #0
   313d6:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   313d8:	68fb      	ldr	r3, [r7, #12]
   313da:	6a1b      	ldr	r3, [r3, #32]
   313dc:	2b00      	cmp	r3, #0
   313de:	d100      	bne.n	313e2 <MQTTPublish+0x46>
   313e0:	e0a0      	b.n	31524 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   313e2:	2324      	movs	r3, #36	; 0x24
   313e4:	18fb      	adds	r3, r7, r3
   313e6:	0018      	movs	r0, r3
   313e8:	4b55      	ldr	r3, [pc, #340]	; (31540 <MQTTPublish+0x1a4>)
   313ea:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   313ec:	68fb      	ldr	r3, [r7, #12]
   313ee:	685a      	ldr	r2, [r3, #4]
   313f0:	2324      	movs	r3, #36	; 0x24
   313f2:	18fb      	adds	r3, r7, r3
   313f4:	0011      	movs	r1, r2
   313f6:	0018      	movs	r0, r3
   313f8:	4b52      	ldr	r3, [pc, #328]	; (31544 <MQTTPublish+0x1a8>)
   313fa:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   313fc:	687b      	ldr	r3, [r7, #4]
   313fe:	781b      	ldrb	r3, [r3, #0]
   31400:	2b01      	cmp	r3, #1
   31402:	d003      	beq.n	3140c <MQTTPublish+0x70>
   31404:	687b      	ldr	r3, [r7, #4]
   31406:	781b      	ldrb	r3, [r3, #0]
   31408:	2b02      	cmp	r3, #2
   3140a:	d107      	bne.n	3141c <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   3140c:	68fb      	ldr	r3, [r7, #12]
   3140e:	0018      	movs	r0, r3
   31410:	4b4d      	ldr	r3, [pc, #308]	; (31548 <MQTTPublish+0x1ac>)
   31412:	4798      	blx	r3
   31414:	0003      	movs	r3, r0
   31416:	b29a      	uxth	r2, r3
   31418:	687b      	ldr	r3, [r7, #4]
   3141a:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   3141c:	68fb      	ldr	r3, [r7, #12]
   3141e:	691b      	ldr	r3, [r3, #16]
   31420:	469c      	mov	ip, r3
   31422:	68fb      	ldr	r3, [r7, #12]
   31424:	689b      	ldr	r3, [r3, #8]
   31426:	001d      	movs	r5, r3
   31428:	687b      	ldr	r3, [r7, #4]
   3142a:	781b      	ldrb	r3, [r3, #0]
   3142c:	001e      	movs	r6, r3
   3142e:	687b      	ldr	r3, [r7, #4]
   31430:	785b      	ldrb	r3, [r3, #1]
   31432:	4698      	mov	r8, r3
   31434:	687b      	ldr	r3, [r7, #4]
   31436:	889b      	ldrh	r3, [r3, #4]
   31438:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   3143a:	687b      	ldr	r3, [r7, #4]
   3143c:	689a      	ldr	r2, [r3, #8]
   3143e:	687b      	ldr	r3, [r7, #4]
   31440:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   31442:	9306      	str	r3, [sp, #24]
   31444:	9205      	str	r2, [sp, #20]
   31446:	2318      	movs	r3, #24
   31448:	18fa      	adds	r2, r7, r3
   3144a:	2308      	movs	r3, #8
   3144c:	446b      	add	r3, sp
   3144e:	ca13      	ldmia	r2!, {r0, r1, r4}
   31450:	c313      	stmia	r3!, {r0, r1, r4}
   31452:	464b      	mov	r3, r9
   31454:	9301      	str	r3, [sp, #4]
   31456:	4643      	mov	r3, r8
   31458:	9300      	str	r3, [sp, #0]
   3145a:	0033      	movs	r3, r6
   3145c:	2200      	movs	r2, #0
   3145e:	0029      	movs	r1, r5
   31460:	4660      	mov	r0, ip
   31462:	4c3a      	ldr	r4, [pc, #232]	; (3154c <MQTTPublish+0x1b0>)
   31464:	47a0      	blx	r4
   31466:	0003      	movs	r3, r0
   31468:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   3146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3146c:	2b00      	cmp	r3, #0
   3146e:	dd5b      	ble.n	31528 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31470:	2324      	movs	r3, #36	; 0x24
   31472:	18fa      	adds	r2, r7, r3
   31474:	6b39      	ldr	r1, [r7, #48]	; 0x30
   31476:	68fb      	ldr	r3, [r7, #12]
   31478:	0018      	movs	r0, r3
   3147a:	4b35      	ldr	r3, [pc, #212]	; (31550 <MQTTPublish+0x1b4>)
   3147c:	4798      	blx	r3
   3147e:	0003      	movs	r3, r0
   31480:	637b      	str	r3, [r7, #52]	; 0x34
   31482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31484:	2b00      	cmp	r3, #0
   31486:	d151      	bne.n	3152c <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   31488:	687b      	ldr	r3, [r7, #4]
   3148a:	781b      	ldrb	r3, [r3, #0]
   3148c:	2b01      	cmp	r3, #1
   3148e:	d122      	bne.n	314d6 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   31490:	2324      	movs	r3, #36	; 0x24
   31492:	18fa      	adds	r2, r7, r3
   31494:	68fb      	ldr	r3, [r7, #12]
   31496:	2104      	movs	r1, #4
   31498:	0018      	movs	r0, r3
   3149a:	4b2e      	ldr	r3, [pc, #184]	; (31554 <MQTTPublish+0x1b8>)
   3149c:	4798      	blx	r3
   3149e:	0003      	movs	r3, r0
   314a0:	2b04      	cmp	r3, #4
   314a2:	d114      	bne.n	314ce <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   314a4:	68fb      	ldr	r3, [r7, #12]
   314a6:	695c      	ldr	r4, [r3, #20]
   314a8:	68fb      	ldr	r3, [r7, #12]
   314aa:	68db      	ldr	r3, [r3, #12]
   314ac:	2216      	movs	r2, #22
   314ae:	18ba      	adds	r2, r7, r2
   314b0:	2115      	movs	r1, #21
   314b2:	1879      	adds	r1, r7, r1
   314b4:	2014      	movs	r0, #20
   314b6:	1838      	adds	r0, r7, r0
   314b8:	9300      	str	r3, [sp, #0]
   314ba:	0023      	movs	r3, r4
   314bc:	4c26      	ldr	r4, [pc, #152]	; (31558 <MQTTPublish+0x1bc>)
   314be:	47a0      	blx	r4
   314c0:	0003      	movs	r3, r0
   314c2:	2b01      	cmp	r3, #1
   314c4:	d033      	beq.n	3152e <MQTTPublish+0x192>
                rc = FAILURE;
   314c6:	2301      	movs	r3, #1
   314c8:	425b      	negs	r3, r3
   314ca:	637b      	str	r3, [r7, #52]	; 0x34
   314cc:	e02f      	b.n	3152e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   314ce:	2301      	movs	r3, #1
   314d0:	425b      	negs	r3, r3
   314d2:	637b      	str	r3, [r7, #52]	; 0x34
   314d4:	e02b      	b.n	3152e <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   314d6:	687b      	ldr	r3, [r7, #4]
   314d8:	781b      	ldrb	r3, [r3, #0]
   314da:	2b02      	cmp	r3, #2
   314dc:	d127      	bne.n	3152e <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   314de:	2324      	movs	r3, #36	; 0x24
   314e0:	18fa      	adds	r2, r7, r3
   314e2:	68fb      	ldr	r3, [r7, #12]
   314e4:	2107      	movs	r1, #7
   314e6:	0018      	movs	r0, r3
   314e8:	4b1a      	ldr	r3, [pc, #104]	; (31554 <MQTTPublish+0x1b8>)
   314ea:	4798      	blx	r3
   314ec:	0003      	movs	r3, r0
   314ee:	2b07      	cmp	r3, #7
   314f0:	d114      	bne.n	3151c <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   314f2:	68fb      	ldr	r3, [r7, #12]
   314f4:	695c      	ldr	r4, [r3, #20]
   314f6:	68fb      	ldr	r3, [r7, #12]
   314f8:	68db      	ldr	r3, [r3, #12]
   314fa:	2212      	movs	r2, #18
   314fc:	18ba      	adds	r2, r7, r2
   314fe:	2111      	movs	r1, #17
   31500:	1879      	adds	r1, r7, r1
   31502:	2010      	movs	r0, #16
   31504:	1838      	adds	r0, r7, r0
   31506:	9300      	str	r3, [sp, #0]
   31508:	0023      	movs	r3, r4
   3150a:	4c13      	ldr	r4, [pc, #76]	; (31558 <MQTTPublish+0x1bc>)
   3150c:	47a0      	blx	r4
   3150e:	0003      	movs	r3, r0
   31510:	2b01      	cmp	r3, #1
   31512:	d00c      	beq.n	3152e <MQTTPublish+0x192>
                rc = FAILURE;
   31514:	2301      	movs	r3, #1
   31516:	425b      	negs	r3, r3
   31518:	637b      	str	r3, [r7, #52]	; 0x34
   3151a:	e008      	b.n	3152e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   3151c:	2301      	movs	r3, #1
   3151e:	425b      	negs	r3, r3
   31520:	637b      	str	r3, [r7, #52]	; 0x34
   31522:	e004      	b.n	3152e <MQTTPublish+0x192>
		goto exit;
   31524:	46c0      	nop			; (mov r8, r8)
   31526:	e002      	b.n	3152e <MQTTPublish+0x192>
        goto exit;
   31528:	46c0      	nop			; (mov r8, r8)
   3152a:	e000      	b.n	3152e <MQTTPublish+0x192>
        goto exit; // there was a problem
   3152c:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   3152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   31530:	0018      	movs	r0, r3
   31532:	46bd      	mov	sp, r7
   31534:	b00f      	add	sp, #60	; 0x3c
   31536:	bc0c      	pop	{r2, r3}
   31538:	4690      	mov	r8, r2
   3153a:	4699      	mov	r9, r3
   3153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3153e:	46c0      	nop			; (mov r8, r8)
   31540:	000317a5 	.word	0x000317a5
   31544:	0003172d 	.word	0x0003172d
   31548:	000308ed 	.word	0x000308ed
   3154c:	00032a29 	.word	0x00032a29
   31550:	0003091d 	.word	0x0003091d
   31554:	00031085 	.word	0x00031085
   31558:	000324a1 	.word	0x000324a1

0003155c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   3155c:	b580      	push	{r7, lr}
   3155e:	b088      	sub	sp, #32
   31560:	af00      	add	r7, sp, #0
   31562:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   31564:	2301      	movs	r3, #1
   31566:	425b      	negs	r3, r3
   31568:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   3156a:	2300      	movs	r3, #0
   3156c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   3156e:	230c      	movs	r3, #12
   31570:	18fb      	adds	r3, r7, r3
   31572:	0018      	movs	r0, r3
   31574:	4b13      	ldr	r3, [pc, #76]	; (315c4 <MQTTDisconnect+0x68>)
   31576:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31578:	687b      	ldr	r3, [r7, #4]
   3157a:	685a      	ldr	r2, [r3, #4]
   3157c:	230c      	movs	r3, #12
   3157e:	18fb      	adds	r3, r7, r3
   31580:	0011      	movs	r1, r2
   31582:	0018      	movs	r0, r3
   31584:	4b10      	ldr	r3, [pc, #64]	; (315c8 <MQTTDisconnect+0x6c>)
   31586:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   31588:	687b      	ldr	r3, [r7, #4]
   3158a:	691a      	ldr	r2, [r3, #16]
   3158c:	687b      	ldr	r3, [r7, #4]
   3158e:	689b      	ldr	r3, [r3, #8]
   31590:	0019      	movs	r1, r3
   31592:	0010      	movs	r0, r2
   31594:	4b0d      	ldr	r3, [pc, #52]	; (315cc <MQTTDisconnect+0x70>)
   31596:	4798      	blx	r3
   31598:	0003      	movs	r3, r0
   3159a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   3159c:	69bb      	ldr	r3, [r7, #24]
   3159e:	2b00      	cmp	r3, #0
   315a0:	dd08      	ble.n	315b4 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   315a2:	230c      	movs	r3, #12
   315a4:	18fa      	adds	r2, r7, r3
   315a6:	69b9      	ldr	r1, [r7, #24]
   315a8:	687b      	ldr	r3, [r7, #4]
   315aa:	0018      	movs	r0, r3
   315ac:	4b08      	ldr	r3, [pc, #32]	; (315d0 <MQTTDisconnect+0x74>)
   315ae:	4798      	blx	r3
   315b0:	0003      	movs	r3, r0
   315b2:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   315b4:	687b      	ldr	r3, [r7, #4]
   315b6:	2200      	movs	r2, #0
   315b8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   315ba:	69fb      	ldr	r3, [r7, #28]
}
   315bc:	0018      	movs	r0, r3
   315be:	46bd      	mov	sp, r7
   315c0:	b008      	add	sp, #32
   315c2:	bd80      	pop	{r7, pc}
   315c4:	000317a5 	.word	0x000317a5
   315c8:	0003172d 	.word	0x0003172d
   315cc:	00032355 	.word	0x00032355
   315d0:	0003091d 	.word	0x0003091d

000315d4 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   315d4:	b580      	push	{r7, lr}
   315d6:	b084      	sub	sp, #16
   315d8:	af00      	add	r7, sp, #0
   315da:	0002      	movs	r2, r0
   315dc:	1dfb      	adds	r3, r7, #7
   315de:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   315e0:	2300      	movs	r3, #0
   315e2:	60fb      	str	r3, [r7, #12]
   315e4:	e01c      	b.n	31620 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   315e6:	4a12      	ldr	r2, [pc, #72]	; (31630 <isMQTTSocket+0x5c>)
   315e8:	68fb      	ldr	r3, [r7, #12]
   315ea:	2164      	movs	r1, #100	; 0x64
   315ec:	434b      	muls	r3, r1
   315ee:	18d3      	adds	r3, r2, r3
   315f0:	3360      	adds	r3, #96	; 0x60
   315f2:	681b      	ldr	r3, [r3, #0]
   315f4:	2b00      	cmp	r3, #0
   315f6:	d010      	beq.n	3161a <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   315f8:	4a0d      	ldr	r2, [pc, #52]	; (31630 <isMQTTSocket+0x5c>)
   315fa:	68fb      	ldr	r3, [r7, #12]
   315fc:	2164      	movs	r1, #100	; 0x64
   315fe:	434b      	muls	r3, r1
   31600:	18d3      	adds	r3, r2, r3
   31602:	3360      	adds	r3, #96	; 0x60
   31604:	681b      	ldr	r3, [r3, #0]
   31606:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   31608:	68bb      	ldr	r3, [r7, #8]
   3160a:	6a1a      	ldr	r2, [r3, #32]
   3160c:	1dfb      	adds	r3, r7, #7
   3160e:	781b      	ldrb	r3, [r3, #0]
   31610:	b25b      	sxtb	r3, r3
   31612:	429a      	cmp	r2, r3
   31614:	d101      	bne.n	3161a <isMQTTSocket+0x46>
				return true;
   31616:	2301      	movs	r3, #1
   31618:	e006      	b.n	31628 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3161a:	68fb      	ldr	r3, [r7, #12]
   3161c:	3301      	adds	r3, #1
   3161e:	60fb      	str	r3, [r7, #12]
   31620:	68fb      	ldr	r3, [r7, #12]
   31622:	2b06      	cmp	r3, #6
   31624:	d9df      	bls.n	315e6 <isMQTTSocket+0x12>
		}
	}
	return false;
   31626:	2300      	movs	r3, #0
}
   31628:	0018      	movs	r0, r3
   3162a:	46bd      	mov	sp, r7
   3162c:	b004      	add	sp, #16
   3162e:	bd80      	pop	{r7, pc}
   31630:	200042a8 	.word	0x200042a8

00031634 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   31634:	b580      	push	{r7, lr}
   31636:	b082      	sub	sp, #8
   31638:	af00      	add	r7, sp, #0
   3163a:	6078      	str	r0, [r7, #4]
   3163c:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   3163e:	4b0d      	ldr	r3, [pc, #52]	; (31674 <dnsResolveCallback+0x40>)
   31640:	781b      	ldrb	r3, [r3, #0]
   31642:	2201      	movs	r2, #1
   31644:	4053      	eors	r3, r2
   31646:	b2db      	uxtb	r3, r3
   31648:	2b00      	cmp	r3, #0
   3164a:	d00e      	beq.n	3166a <dnsResolveCallback+0x36>
   3164c:	4b0a      	ldr	r3, [pc, #40]	; (31678 <dnsResolveCallback+0x44>)
   3164e:	681b      	ldr	r3, [r3, #0]
   31650:	687a      	ldr	r2, [r7, #4]
   31652:	0011      	movs	r1, r2
   31654:	0018      	movs	r0, r3
   31656:	4b09      	ldr	r3, [pc, #36]	; (3167c <dnsResolveCallback+0x48>)
   31658:	4798      	blx	r3
   3165a:	1e03      	subs	r3, r0, #0
   3165c:	d105      	bne.n	3166a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   3165e:	683a      	ldr	r2, [r7, #0]
   31660:	4b07      	ldr	r3, [pc, #28]	; (31680 <dnsResolveCallback+0x4c>)
   31662:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   31664:	4b03      	ldr	r3, [pc, #12]	; (31674 <dnsResolveCallback+0x40>)
   31666:	2201      	movs	r2, #1
   31668:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   3166a:	46c0      	nop			; (mov r8, r8)
   3166c:	46bd      	mov	sp, r7
   3166e:	b002      	add	sp, #8
   31670:	bd80      	pop	{r7, pc}
   31672:	46c0      	nop			; (mov r8, r8)
   31674:	20004198 	.word	0x20004198
   31678:	200042a4 	.word	0x200042a4
   3167c:	00037cc3 	.word	0x00037cc3
   31680:	20004190 	.word	0x20004190

00031684 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   31684:	b580      	push	{r7, lr}
   31686:	b084      	sub	sp, #16
   31688:	af00      	add	r7, sp, #0
   3168a:	603a      	str	r2, [r7, #0]
   3168c:	1dfb      	adds	r3, r7, #7
   3168e:	1c02      	adds	r2, r0, #0
   31690:	701a      	strb	r2, [r3, #0]
   31692:	1dbb      	adds	r3, r7, #6
   31694:	1c0a      	adds	r2, r1, #0
   31696:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   31698:	1dfb      	adds	r3, r7, #7
   3169a:	781b      	ldrb	r3, [r3, #0]
   3169c:	b25b      	sxtb	r3, r3
   3169e:	0018      	movs	r0, r3
   316a0:	4b12      	ldr	r3, [pc, #72]	; (316ec <tcpClientSocketEventHandler+0x68>)
   316a2:	4798      	blx	r3
   316a4:	1e03      	subs	r3, r0, #0
   316a6:	d01c      	beq.n	316e2 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   316a8:	1dbb      	adds	r3, r7, #6
   316aa:	781b      	ldrb	r3, [r3, #0]
   316ac:	2b06      	cmp	r3, #6
   316ae:	d00c      	beq.n	316ca <tcpClientSocketEventHandler+0x46>
   316b0:	2b07      	cmp	r3, #7
   316b2:	d006      	beq.n	316c2 <tcpClientSocketEventHandler+0x3e>
   316b4:	2b05      	cmp	r3, #5
   316b6:	d000      	beq.n	316ba <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   316b8:	e013      	b.n	316e2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   316ba:	4b0d      	ldr	r3, [pc, #52]	; (316f0 <tcpClientSocketEventHandler+0x6c>)
   316bc:	2201      	movs	r2, #1
   316be:	701a      	strb	r2, [r3, #0]
			break;
   316c0:	e00f      	b.n	316e2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   316c2:	4b0c      	ldr	r3, [pc, #48]	; (316f4 <tcpClientSocketEventHandler+0x70>)
   316c4:	2201      	movs	r2, #1
   316c6:	701a      	strb	r2, [r3, #0]
			break;
   316c8:	e00b      	b.n	316e2 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   316ca:	683b      	ldr	r3, [r7, #0]
   316cc:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   316ce:	68fb      	ldr	r3, [r7, #12]
   316d0:	2204      	movs	r2, #4
   316d2:	5e9b      	ldrsh	r3, [r3, r2]
   316d4:	001a      	movs	r2, r3
   316d6:	4b08      	ldr	r3, [pc, #32]	; (316f8 <tcpClientSocketEventHandler+0x74>)
   316d8:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   316da:	4b08      	ldr	r3, [pc, #32]	; (316fc <tcpClientSocketEventHandler+0x78>)
   316dc:	2201      	movs	r2, #1
   316de:	701a      	strb	r2, [r3, #0]
			break;
   316e0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   316e2:	46c0      	nop			; (mov r8, r8)
   316e4:	46bd      	mov	sp, r7
   316e6:	b004      	add	sp, #16
   316e8:	bd80      	pop	{r7, pc}
   316ea:	46c0      	nop			; (mov r8, r8)
   316ec:	000315d5 	.word	0x000315d5
   316f0:	20004199 	.word	0x20004199
   316f4:	2000419a 	.word	0x2000419a
   316f8:	20004194 	.word	0x20004194
   316fc:	2000419b 	.word	0x2000419b

00031700 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   31700:	b580      	push	{r7, lr}
   31702:	b082      	sub	sp, #8
   31704:	af00      	add	r7, sp, #0
   31706:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   31708:	687b      	ldr	r3, [r7, #4]
   3170a:	3304      	adds	r3, #4
   3170c:	687a      	ldr	r2, [r7, #4]
   3170e:	0011      	movs	r1, r2
   31710:	0018      	movs	r0, r3
   31712:	4b05      	ldr	r3, [pc, #20]	; (31728 <TimerIsExpired+0x28>)
   31714:	4798      	blx	r3
   31716:	0003      	movs	r3, r0
   31718:	3b01      	subs	r3, #1
   3171a:	425a      	negs	r2, r3
   3171c:	4153      	adcs	r3, r2
   3171e:	b2db      	uxtb	r3, r3
}
   31720:	0018      	movs	r0, r3
   31722:	46bd      	mov	sp, r7
   31724:	b002      	add	sp, #8
   31726:	bd80      	pop	{r7, pc}
   31728:	0001efb1 	.word	0x0001efb1

0003172c <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   3172c:	b580      	push	{r7, lr}
   3172e:	b082      	sub	sp, #8
   31730:	af00      	add	r7, sp, #0
   31732:	6078      	str	r0, [r7, #4]
   31734:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   31736:	687b      	ldr	r3, [r7, #4]
   31738:	683a      	ldr	r2, [r7, #0]
   3173a:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   3173c:	687b      	ldr	r3, [r7, #4]
   3173e:	3304      	adds	r3, #4
   31740:	0018      	movs	r0, r3
   31742:	4b03      	ldr	r3, [pc, #12]	; (31750 <TimerCountdownMS+0x24>)
   31744:	4798      	blx	r3
}
   31746:	46c0      	nop			; (mov r8, r8)
   31748:	46bd      	mov	sp, r7
   3174a:	b002      	add	sp, #8
   3174c:	bd80      	pop	{r7, pc}
   3174e:	46c0      	nop			; (mov r8, r8)
   31750:	0001ef45 	.word	0x0001ef45

00031754 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   31754:	b580      	push	{r7, lr}
   31756:	b082      	sub	sp, #8
   31758:	af00      	add	r7, sp, #0
   3175a:	6078      	str	r0, [r7, #4]
   3175c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   3175e:	683b      	ldr	r3, [r7, #0]
   31760:	22fa      	movs	r2, #250	; 0xfa
   31762:	0092      	lsls	r2, r2, #2
   31764:	435a      	muls	r2, r3
   31766:	687b      	ldr	r3, [r7, #4]
   31768:	0011      	movs	r1, r2
   3176a:	0018      	movs	r0, r3
   3176c:	4b02      	ldr	r3, [pc, #8]	; (31778 <TimerCountdown+0x24>)
   3176e:	4798      	blx	r3
}
   31770:	46c0      	nop			; (mov r8, r8)
   31772:	46bd      	mov	sp, r7
   31774:	b002      	add	sp, #8
   31776:	bd80      	pop	{r7, pc}
   31778:	0003172d 	.word	0x0003172d

0003177c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   3177c:	b580      	push	{r7, lr}
   3177e:	b082      	sub	sp, #8
   31780:	af00      	add	r7, sp, #0
   31782:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   31784:	687b      	ldr	r3, [r7, #4]
   31786:	3304      	adds	r3, #4
   31788:	687a      	ldr	r2, [r7, #4]
   3178a:	0011      	movs	r1, r2
   3178c:	0018      	movs	r0, r3
   3178e:	4b04      	ldr	r3, [pc, #16]	; (317a0 <TimerLeftMS+0x24>)
   31790:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   31792:	687b      	ldr	r3, [r7, #4]
   31794:	681b      	ldr	r3, [r3, #0]
}
   31796:	0018      	movs	r0, r3
   31798:	46bd      	mov	sp, r7
   3179a:	b002      	add	sp, #8
   3179c:	bd80      	pop	{r7, pc}
   3179e:	46c0      	nop			; (mov r8, r8)
   317a0:	0001efb1 	.word	0x0001efb1

000317a4 <TimerInit>:


void TimerInit(Timer* timer) {
   317a4:	b580      	push	{r7, lr}
   317a6:	b082      	sub	sp, #8
   317a8:	af00      	add	r7, sp, #0
   317aa:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   317ac:	687b      	ldr	r3, [r7, #4]
   317ae:	2200      	movs	r2, #0
   317b0:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   317b2:	687b      	ldr	r3, [r7, #4]
   317b4:	3304      	adds	r3, #4
   317b6:	2208      	movs	r2, #8
   317b8:	2100      	movs	r1, #0
   317ba:	0018      	movs	r0, r3
   317bc:	4b02      	ldr	r3, [pc, #8]	; (317c8 <TimerInit+0x24>)
   317be:	4798      	blx	r3
}
   317c0:	46c0      	nop			; (mov r8, r8)
   317c2:	46bd      	mov	sp, r7
   317c4:	b002      	add	sp, #8
   317c6:	bd80      	pop	{r7, pc}
   317c8:	0003796b 	.word	0x0003796b

000317cc <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   317cc:	b590      	push	{r4, r7, lr}
   317ce:	b085      	sub	sp, #20
   317d0:	af00      	add	r7, sp, #0
   317d2:	60f8      	str	r0, [r7, #12]
   317d4:	60b9      	str	r1, [r7, #8]
   317d6:	607a      	str	r2, [r7, #4]
   317d8:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   317da:	683b      	ldr	r3, [r7, #0]
   317dc:	2b00      	cmp	r3, #0
   317de:	d101      	bne.n	317e4 <WINC1500_read+0x18>
   317e0:	230a      	movs	r3, #10
   317e2:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   317e4:	4b2c      	ldr	r3, [pc, #176]	; (31898 <WINC1500_read+0xcc>)
   317e6:	681b      	ldr	r3, [r3, #0]
   317e8:	2b00      	cmp	r3, #0
   317ea:	d131      	bne.n	31850 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   317ec:	4b2b      	ldr	r3, [pc, #172]	; (3189c <WINC1500_read+0xd0>)
   317ee:	2200      	movs	r2, #0
   317f0:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   317f2:	68fb      	ldr	r3, [r7, #12]
   317f4:	681b      	ldr	r3, [r3, #0]
   317f6:	b258      	sxtb	r0, r3
   317f8:	683c      	ldr	r4, [r7, #0]
   317fa:	2380      	movs	r3, #128	; 0x80
   317fc:	005a      	lsls	r2, r3, #1
   317fe:	4928      	ldr	r1, [pc, #160]	; (318a0 <WINC1500_read+0xd4>)
   31800:	0023      	movs	r3, r4
   31802:	4c28      	ldr	r4, [pc, #160]	; (318a4 <WINC1500_read+0xd8>)
   31804:	47a0      	blx	r4
   31806:	1e03      	subs	r3, r0, #0
   31808:	d005      	beq.n	31816 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   3180a:	2301      	movs	r3, #1
   3180c:	425b      	negs	r3, r3
   3180e:	e03e      	b.n	3188e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   31810:	2000      	movs	r0, #0
   31812:	4b25      	ldr	r3, [pc, #148]	; (318a8 <WINC1500_read+0xdc>)
   31814:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   31816:	4b21      	ldr	r3, [pc, #132]	; (3189c <WINC1500_read+0xd0>)
   31818:	781b      	ldrb	r3, [r3, #0]
   3181a:	2201      	movs	r2, #1
   3181c:	4053      	eors	r3, r2
   3181e:	b2db      	uxtb	r3, r3
   31820:	2b00      	cmp	r3, #0
   31822:	d1f5      	bne.n	31810 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   31824:	4b21      	ldr	r3, [pc, #132]	; (318ac <WINC1500_read+0xe0>)
   31826:	681b      	ldr	r3, [r3, #0]
   31828:	2b00      	cmp	r3, #0
   3182a:	dd08      	ble.n	3183e <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   3182c:	4b1f      	ldr	r3, [pc, #124]	; (318ac <WINC1500_read+0xe0>)
   3182e:	681b      	ldr	r3, [r3, #0]
   31830:	001a      	movs	r2, r3
   31832:	4b19      	ldr	r3, [pc, #100]	; (31898 <WINC1500_read+0xcc>)
   31834:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   31836:	4b1e      	ldr	r3, [pc, #120]	; (318b0 <WINC1500_read+0xe4>)
   31838:	2200      	movs	r2, #0
   3183a:	601a      	str	r2, [r3, #0]
   3183c:	e008      	b.n	31850 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   3183e:	4b16      	ldr	r3, [pc, #88]	; (31898 <WINC1500_read+0xcc>)
   31840:	2200      	movs	r2, #0
   31842:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   31844:	4b1a      	ldr	r3, [pc, #104]	; (318b0 <WINC1500_read+0xe4>)
   31846:	2200      	movs	r2, #0
   31848:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   3184a:	4b18      	ldr	r3, [pc, #96]	; (318ac <WINC1500_read+0xe0>)
   3184c:	681b      	ldr	r3, [r3, #0]
   3184e:	e01e      	b.n	3188e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   31850:	4b11      	ldr	r3, [pc, #68]	; (31898 <WINC1500_read+0xcc>)
   31852:	681b      	ldr	r3, [r3, #0]
   31854:	001a      	movs	r2, r3
   31856:	687b      	ldr	r3, [r7, #4]
   31858:	4293      	cmp	r3, r2
   3185a:	dd02      	ble.n	31862 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   3185c:	2301      	movs	r3, #1
   3185e:	425b      	negs	r3, r3
   31860:	e015      	b.n	3188e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   31862:	4b13      	ldr	r3, [pc, #76]	; (318b0 <WINC1500_read+0xe4>)
   31864:	681a      	ldr	r2, [r3, #0]
   31866:	4b0e      	ldr	r3, [pc, #56]	; (318a0 <WINC1500_read+0xd4>)
   31868:	18d1      	adds	r1, r2, r3
   3186a:	687a      	ldr	r2, [r7, #4]
   3186c:	68bb      	ldr	r3, [r7, #8]
   3186e:	0018      	movs	r0, r3
   31870:	4b10      	ldr	r3, [pc, #64]	; (318b4 <WINC1500_read+0xe8>)
   31872:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   31874:	4b08      	ldr	r3, [pc, #32]	; (31898 <WINC1500_read+0xcc>)
   31876:	681a      	ldr	r2, [r3, #0]
   31878:	687b      	ldr	r3, [r7, #4]
   3187a:	1ad2      	subs	r2, r2, r3
   3187c:	4b06      	ldr	r3, [pc, #24]	; (31898 <WINC1500_read+0xcc>)
   3187e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   31880:	4b0b      	ldr	r3, [pc, #44]	; (318b0 <WINC1500_read+0xe4>)
   31882:	681a      	ldr	r2, [r3, #0]
   31884:	687b      	ldr	r3, [r7, #4]
   31886:	18d2      	adds	r2, r2, r3
   31888:	4b09      	ldr	r3, [pc, #36]	; (318b0 <WINC1500_read+0xe4>)
   3188a:	601a      	str	r2, [r3, #0]
  
  return len;
   3188c:	687b      	ldr	r3, [r7, #4]
}
   3188e:	0018      	movs	r0, r3
   31890:	46bd      	mov	sp, r7
   31892:	b005      	add	sp, #20
   31894:	bd90      	pop	{r4, r7, pc}
   31896:	46c0      	nop			; (mov r8, r8)
   31898:	200042a0 	.word	0x200042a0
   3189c:	2000419b 	.word	0x2000419b
   318a0:	2000419c 	.word	0x2000419c
   318a4:	00027e25 	.word	0x00027e25
   318a8:	0002436d 	.word	0x0002436d
   318ac:	20004194 	.word	0x20004194
   318b0:	2000429c 	.word	0x2000429c
   318b4:	00037935 	.word	0x00037935

000318b8 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   318b8:	b590      	push	{r4, r7, lr}
   318ba:	b085      	sub	sp, #20
   318bc:	af00      	add	r7, sp, #0
   318be:	60f8      	str	r0, [r7, #12]
   318c0:	60b9      	str	r1, [r7, #8]
   318c2:	607a      	str	r2, [r7, #4]
   318c4:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   318c6:	4b10      	ldr	r3, [pc, #64]	; (31908 <WINC1500_write+0x50>)
   318c8:	2200      	movs	r2, #0
   318ca:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   318cc:	68fb      	ldr	r3, [r7, #12]
   318ce:	681b      	ldr	r3, [r3, #0]
   318d0:	b258      	sxtb	r0, r3
   318d2:	687b      	ldr	r3, [r7, #4]
   318d4:	b29a      	uxth	r2, r3
   318d6:	68b9      	ldr	r1, [r7, #8]
   318d8:	2300      	movs	r3, #0
   318da:	4c0c      	ldr	r4, [pc, #48]	; (3190c <WINC1500_write+0x54>)
   318dc:	47a0      	blx	r4
   318de:	1e03      	subs	r3, r0, #0
   318e0:	d005      	beq.n	318ee <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   318e2:	2301      	movs	r3, #1
   318e4:	425b      	negs	r3, r3
   318e6:	e00a      	b.n	318fe <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   318e8:	2000      	movs	r0, #0
   318ea:	4b09      	ldr	r3, [pc, #36]	; (31910 <WINC1500_write+0x58>)
   318ec:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   318ee:	4b06      	ldr	r3, [pc, #24]	; (31908 <WINC1500_write+0x50>)
   318f0:	781b      	ldrb	r3, [r3, #0]
   318f2:	2201      	movs	r2, #1
   318f4:	4053      	eors	r3, r2
   318f6:	b2db      	uxtb	r3, r3
   318f8:	2b00      	cmp	r3, #0
   318fa:	d1f5      	bne.n	318e8 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   318fc:	687b      	ldr	r3, [r7, #4]
}
   318fe:	0018      	movs	r0, r3
   31900:	46bd      	mov	sp, r7
   31902:	b005      	add	sp, #20
   31904:	bd90      	pop	{r4, r7, pc}
   31906:	46c0      	nop			; (mov r8, r8)
   31908:	2000419a 	.word	0x2000419a
   3190c:	00027cc1 	.word	0x00027cc1
   31910:	0002436d 	.word	0x0002436d

00031914 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   31914:	b580      	push	{r7, lr}
   31916:	b082      	sub	sp, #8
   31918:	af00      	add	r7, sp, #0
   3191a:	6078      	str	r0, [r7, #4]
	close(n->socket);
   3191c:	687b      	ldr	r3, [r7, #4]
   3191e:	681b      	ldr	r3, [r3, #0]
   31920:	b25b      	sxtb	r3, r3
   31922:	0018      	movs	r0, r3
   31924:	4b06      	ldr	r3, [pc, #24]	; (31940 <WINC1500_disconnect+0x2c>)
   31926:	4798      	blx	r3
	n->socket=-1;
   31928:	687b      	ldr	r3, [r7, #4]
   3192a:	2201      	movs	r2, #1
   3192c:	4252      	negs	r2, r2
   3192e:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   31930:	4b04      	ldr	r3, [pc, #16]	; (31944 <WINC1500_disconnect+0x30>)
   31932:	2200      	movs	r2, #0
   31934:	701a      	strb	r2, [r3, #0]
}
   31936:	46c0      	nop			; (mov r8, r8)
   31938:	46bd      	mov	sp, r7
   3193a:	b002      	add	sp, #8
   3193c:	bd80      	pop	{r7, pc}
   3193e:	46c0      	nop			; (mov r8, r8)
   31940:	00027fa5 	.word	0x00027fa5
   31944:	20004199 	.word	0x20004199

00031948 <NetworkInit>:


void NetworkInit(Network* n) {
   31948:	b580      	push	{r7, lr}
   3194a:	b082      	sub	sp, #8
   3194c:	af00      	add	r7, sp, #0
   3194e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   31950:	687b      	ldr	r3, [r7, #4]
   31952:	2201      	movs	r2, #1
   31954:	4252      	negs	r2, r2
   31956:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   31958:	687b      	ldr	r3, [r7, #4]
   3195a:	4a06      	ldr	r2, [pc, #24]	; (31974 <NetworkInit+0x2c>)
   3195c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   3195e:	687b      	ldr	r3, [r7, #4]
   31960:	4a05      	ldr	r2, [pc, #20]	; (31978 <NetworkInit+0x30>)
   31962:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   31964:	687b      	ldr	r3, [r7, #4]
   31966:	4a05      	ldr	r2, [pc, #20]	; (3197c <NetworkInit+0x34>)
   31968:	611a      	str	r2, [r3, #16]
}
   3196a:	46c0      	nop			; (mov r8, r8)
   3196c:	46bd      	mov	sp, r7
   3196e:	b002      	add	sp, #8
   31970:	bd80      	pop	{r7, pc}
   31972:	46c0      	nop			; (mov r8, r8)
   31974:	000317cd 	.word	0x000317cd
   31978:	000318b9 	.word	0x000318b9
   3197c:	00031915 	.word	0x00031915

00031980 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   31980:	b580      	push	{r7, lr}
   31982:	b088      	sub	sp, #32
   31984:	af00      	add	r7, sp, #0
   31986:	60f8      	str	r0, [r7, #12]
   31988:	60b9      	str	r1, [r7, #8]
   3198a:	607a      	str	r2, [r7, #4]
   3198c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   3198e:	4b37      	ldr	r3, [pc, #220]	; (31a6c <ConnectNetwork+0xec>)
   31990:	2200      	movs	r2, #0
   31992:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   31994:	4b36      	ldr	r3, [pc, #216]	; (31a70 <ConnectNetwork+0xf0>)
   31996:	68ba      	ldr	r2, [r7, #8]
   31998:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   3199a:	68bb      	ldr	r3, [r7, #8]
   3199c:	0018      	movs	r0, r3
   3199e:	4b35      	ldr	r3, [pc, #212]	; (31a74 <ConnectNetwork+0xf4>)
   319a0:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   319a2:	e002      	b.n	319aa <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   319a4:	2000      	movs	r0, #0
   319a6:	4b34      	ldr	r3, [pc, #208]	; (31a78 <ConnectNetwork+0xf8>)
   319a8:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   319aa:	4b30      	ldr	r3, [pc, #192]	; (31a6c <ConnectNetwork+0xec>)
   319ac:	781b      	ldrb	r3, [r3, #0]
   319ae:	2201      	movs	r2, #1
   319b0:	4053      	eors	r3, r2
   319b2:	b2db      	uxtb	r3, r3
   319b4:	2b00      	cmp	r3, #0
   319b6:	d1f5      	bne.n	319a4 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   319b8:	4b30      	ldr	r3, [pc, #192]	; (31a7c <ConnectNetwork+0xfc>)
   319ba:	681a      	ldr	r2, [r3, #0]
   319bc:	68fb      	ldr	r3, [r7, #12]
   319be:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   319c0:	2310      	movs	r3, #16
   319c2:	18fb      	adds	r3, r7, r3
   319c4:	2202      	movs	r2, #2
   319c6:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   319c8:	687b      	ldr	r3, [r7, #4]
   319ca:	b29b      	uxth	r3, r3
   319cc:	021b      	lsls	r3, r3, #8
   319ce:	b21a      	sxth	r2, r3
   319d0:	687b      	ldr	r3, [r7, #4]
   319d2:	b29b      	uxth	r3, r3
   319d4:	0a1b      	lsrs	r3, r3, #8
   319d6:	b29b      	uxth	r3, r3
   319d8:	b21b      	sxth	r3, r3
   319da:	4313      	orrs	r3, r2
   319dc:	b21b      	sxth	r3, r3
   319de:	b29a      	uxth	r2, r3
   319e0:	2310      	movs	r3, #16
   319e2:	18fb      	adds	r3, r7, r3
   319e4:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   319e6:	4b25      	ldr	r3, [pc, #148]	; (31a7c <ConnectNetwork+0xfc>)
   319e8:	681b      	ldr	r3, [r3, #0]
   319ea:	001a      	movs	r2, r3
   319ec:	2310      	movs	r3, #16
   319ee:	18fb      	adds	r3, r7, r3
   319f0:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   319f2:	68fb      	ldr	r3, [r7, #12]
   319f4:	681b      	ldr	r3, [r3, #0]
   319f6:	2b00      	cmp	r3, #0
   319f8:	da0a      	bge.n	31a10 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   319fa:	683b      	ldr	r3, [r7, #0]
   319fc:	b2db      	uxtb	r3, r3
   319fe:	001a      	movs	r2, r3
   31a00:	2101      	movs	r1, #1
   31a02:	2002      	movs	r0, #2
   31a04:	4b1e      	ldr	r3, [pc, #120]	; (31a80 <ConnectNetwork+0x100>)
   31a06:	4798      	blx	r3
   31a08:	0003      	movs	r3, r0
   31a0a:	001a      	movs	r2, r3
   31a0c:	68fb      	ldr	r3, [r7, #12]
   31a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   31a10:	68fb      	ldr	r3, [r7, #12]
   31a12:	681b      	ldr	r3, [r3, #0]
   31a14:	3301      	adds	r3, #1
   31a16:	d108      	bne.n	31a2a <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   31a18:	68fb      	ldr	r3, [r7, #12]
   31a1a:	681b      	ldr	r3, [r3, #0]
   31a1c:	b25b      	sxtb	r3, r3
   31a1e:	0018      	movs	r0, r3
   31a20:	4b18      	ldr	r3, [pc, #96]	; (31a84 <ConnectNetwork+0x104>)
   31a22:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   31a24:	2309      	movs	r3, #9
   31a26:	425b      	negs	r3, r3
   31a28:	e01c      	b.n	31a64 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   31a2a:	68fb      	ldr	r3, [r7, #12]
   31a2c:	681b      	ldr	r3, [r3, #0]
   31a2e:	b25b      	sxtb	r3, r3
   31a30:	2210      	movs	r2, #16
   31a32:	18b9      	adds	r1, r7, r2
   31a34:	2210      	movs	r2, #16
   31a36:	0018      	movs	r0, r3
   31a38:	4b13      	ldr	r3, [pc, #76]	; (31a88 <ConnectNetwork+0x108>)
   31a3a:	4798      	blx	r3
   31a3c:	1e03      	subs	r3, r0, #0
   31a3e:	d002      	beq.n	31a46 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   31a40:	2309      	movs	r3, #9
   31a42:	425b      	negs	r3, r3
   31a44:	e00e      	b.n	31a64 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   31a46:	4b11      	ldr	r3, [pc, #68]	; (31a8c <ConnectNetwork+0x10c>)
   31a48:	2200      	movs	r2, #0
   31a4a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   31a4c:	e002      	b.n	31a54 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   31a4e:	2000      	movs	r0, #0
   31a50:	4b09      	ldr	r3, [pc, #36]	; (31a78 <ConnectNetwork+0xf8>)
   31a52:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   31a54:	4b0d      	ldr	r3, [pc, #52]	; (31a8c <ConnectNetwork+0x10c>)
   31a56:	781b      	ldrb	r3, [r3, #0]
   31a58:	2201      	movs	r2, #1
   31a5a:	4053      	eors	r3, r2
   31a5c:	b2db      	uxtb	r3, r3
   31a5e:	2b00      	cmp	r3, #0
   31a60:	d1f5      	bne.n	31a4e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   31a62:	2300      	movs	r3, #0
   31a64:	0018      	movs	r0, r3
   31a66:	46bd      	mov	sp, r7
   31a68:	b008      	add	sp, #32
   31a6a:	bd80      	pop	{r7, pc}
   31a6c:	20004198 	.word	0x20004198
   31a70:	200042a4 	.word	0x200042a4
   31a74:	000281ed 	.word	0x000281ed
   31a78:	0002436d 	.word	0x0002436d
   31a7c:	20004190 	.word	0x20004190
   31a80:	00027999 	.word	0x00027999
   31a84:	00027fa5 	.word	0x00027fa5
   31a88:	00027bad 	.word	0x00027bad
   31a8c:	20004199 	.word	0x20004199

00031a90 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   31a90:	b580      	push	{r7, lr}
   31a92:	b084      	sub	sp, #16
   31a94:	af00      	add	r7, sp, #0
   31a96:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   31a98:	687b      	ldr	r3, [r7, #4]
   31a9a:	2b00      	cmp	r3, #0
   31a9c:	d022      	beq.n	31ae4 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   31a9e:	2300      	movs	r3, #0
   31aa0:	60fb      	str	r3, [r7, #12]
   31aa2:	e01b      	b.n	31adc <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   31aa4:	4a11      	ldr	r2, [pc, #68]	; (31aec <allocateClient+0x5c>)
   31aa6:	68fb      	ldr	r3, [r7, #12]
   31aa8:	2164      	movs	r1, #100	; 0x64
   31aaa:	434b      	muls	r3, r1
   31aac:	18d3      	adds	r3, r2, r3
   31aae:	3360      	adds	r3, #96	; 0x60
   31ab0:	681b      	ldr	r3, [r3, #0]
   31ab2:	2b00      	cmp	r3, #0
   31ab4:	d10f      	bne.n	31ad6 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   31ab6:	4a0d      	ldr	r2, [pc, #52]	; (31aec <allocateClient+0x5c>)
   31ab8:	68fb      	ldr	r3, [r7, #12]
   31aba:	2164      	movs	r1, #100	; 0x64
   31abc:	434b      	muls	r3, r1
   31abe:	18d3      	adds	r3, r2, r3
   31ac0:	3360      	adds	r3, #96	; 0x60
   31ac2:	687a      	ldr	r2, [r7, #4]
   31ac4:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   31ac6:	68fb      	ldr	r3, [r7, #12]
   31ac8:	2264      	movs	r2, #100	; 0x64
   31aca:	435a      	muls	r2, r3
   31acc:	4b07      	ldr	r3, [pc, #28]	; (31aec <allocateClient+0x5c>)
   31ace:	18d2      	adds	r2, r2, r3
   31ad0:	687b      	ldr	r3, [r7, #4]
   31ad2:	61da      	str	r2, [r3, #28]
			return;
   31ad4:	e007      	b.n	31ae6 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   31ad6:	68fb      	ldr	r3, [r7, #12]
   31ad8:	3301      	adds	r3, #1
   31ada:	60fb      	str	r3, [r7, #12]
   31adc:	68fb      	ldr	r3, [r7, #12]
   31ade:	2b06      	cmp	r3, #6
   31ae0:	d9e0      	bls.n	31aa4 <allocateClient+0x14>
   31ae2:	e000      	b.n	31ae6 <allocateClient+0x56>
		return;
   31ae4:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   31ae6:	46bd      	mov	sp, r7
   31ae8:	b004      	add	sp, #16
   31aea:	bd80      	pop	{r7, pc}
   31aec:	200042a8 	.word	0x200042a8

00031af0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   31af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   31af2:	b089      	sub	sp, #36	; 0x24
   31af4:	af04      	add	r7, sp, #16
   31af6:	6078      	str	r0, [r7, #4]
   31af8:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   31afa:	687b      	ldr	r3, [r7, #4]
   31afc:	2b00      	cmp	r3, #0
   31afe:	d00a      	beq.n	31b16 <mqtt_init+0x26>
   31b00:	683b      	ldr	r3, [r7, #0]
   31b02:	2b00      	cmp	r3, #0
   31b04:	d007      	beq.n	31b16 <mqtt_init+0x26>
   31b06:	683b      	ldr	r3, [r7, #0]
   31b08:	691b      	ldr	r3, [r3, #16]
   31b0a:	2b00      	cmp	r3, #0
   31b0c:	d003      	beq.n	31b16 <mqtt_init+0x26>
   31b0e:	683b      	ldr	r3, [r7, #0]
   31b10:	689b      	ldr	r3, [r3, #8]
   31b12:	2b00      	cmp	r3, #0
   31b14:	d102      	bne.n	31b1c <mqtt_init+0x2c>
		return FAILURE;
   31b16:	2301      	movs	r3, #1
   31b18:	425b      	negs	r3, r3
   31b1a:	e034      	b.n	31b86 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   31b1c:	683b      	ldr	r3, [r7, #0]
   31b1e:	889b      	ldrh	r3, [r3, #4]
   31b20:	001a      	movs	r2, r3
   31b22:	23fa      	movs	r3, #250	; 0xfa
   31b24:	009b      	lsls	r3, r3, #2
   31b26:	4353      	muls	r3, r2
   31b28:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   31b2a:	687b      	ldr	r3, [r7, #4]
   31b2c:	3320      	adds	r3, #32
   31b2e:	0018      	movs	r0, r3
   31b30:	4b17      	ldr	r3, [pc, #92]	; (31b90 <mqtt_init+0xa0>)
   31b32:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   31b34:	687b      	ldr	r3, [r7, #4]
   31b36:	3304      	adds	r3, #4
   31b38:	6839      	ldr	r1, [r7, #0]
   31b3a:	2218      	movs	r2, #24
   31b3c:	0018      	movs	r0, r3
   31b3e:	4b15      	ldr	r3, [pc, #84]	; (31b94 <mqtt_init+0xa4>)
   31b40:	4798      	blx	r3
	allocateClient(module);
   31b42:	687b      	ldr	r3, [r7, #4]
   31b44:	0018      	movs	r0, r3
   31b46:	4b14      	ldr	r3, [pc, #80]	; (31b98 <mqtt_init+0xa8>)
   31b48:	4798      	blx	r3
	
	if(module->client)
   31b4a:	687b      	ldr	r3, [r7, #4]
   31b4c:	69db      	ldr	r3, [r3, #28]
   31b4e:	2b00      	cmp	r3, #0
   31b50:	d017      	beq.n	31b82 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   31b52:	687b      	ldr	r3, [r7, #4]
   31b54:	69d8      	ldr	r0, [r3, #28]
   31b56:	687b      	ldr	r3, [r7, #4]
   31b58:	3320      	adds	r3, #32
   31b5a:	001c      	movs	r4, r3
   31b5c:	683b      	ldr	r3, [r7, #0]
   31b5e:	691e      	ldr	r6, [r3, #16]
   31b60:	683b      	ldr	r3, [r7, #0]
   31b62:	695a      	ldr	r2, [r3, #20]
   31b64:	683b      	ldr	r3, [r7, #0]
   31b66:	6899      	ldr	r1, [r3, #8]
   31b68:	683b      	ldr	r3, [r7, #0]
   31b6a:	68db      	ldr	r3, [r3, #12]
   31b6c:	68fd      	ldr	r5, [r7, #12]
   31b6e:	9302      	str	r3, [sp, #8]
   31b70:	9101      	str	r1, [sp, #4]
   31b72:	9200      	str	r2, [sp, #0]
   31b74:	0033      	movs	r3, r6
   31b76:	002a      	movs	r2, r5
   31b78:	0021      	movs	r1, r4
   31b7a:	4c08      	ldr	r4, [pc, #32]	; (31b9c <mqtt_init+0xac>)
   31b7c:	47a0      	blx	r4
		return SUCCESS;
   31b7e:	2300      	movs	r3, #0
   31b80:	e001      	b.n	31b86 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   31b82:	2301      	movs	r3, #1
   31b84:	425b      	negs	r3, r3
}
   31b86:	0018      	movs	r0, r3
   31b88:	46bd      	mov	sp, r7
   31b8a:	b005      	add	sp, #20
   31b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b8e:	46c0      	nop			; (mov r8, r8)
   31b90:	00031949 	.word	0x00031949
   31b94:	00037935 	.word	0x00037935
   31b98:	00031a91 	.word	0x00031a91
   31b9c:	000309c1 	.word	0x000309c1

00031ba0 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   31ba0:	b580      	push	{r7, lr}
   31ba2:	b082      	sub	sp, #8
   31ba4:	af00      	add	r7, sp, #0
   31ba6:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   31ba8:	687b      	ldr	r3, [r7, #4]
   31baa:	4a0c      	ldr	r2, [pc, #48]	; (31bdc <mqtt_get_config_defaults+0x3c>)
   31bac:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   31bae:	687b      	ldr	r3, [r7, #4]
   31bb0:	2200      	movs	r2, #0
   31bb2:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   31bb4:	687b      	ldr	r3, [r7, #4]
   31bb6:	223c      	movs	r2, #60	; 0x3c
   31bb8:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   31bba:	687b      	ldr	r3, [r7, #4]
   31bbc:	2200      	movs	r2, #0
   31bbe:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   31bc0:	687b      	ldr	r3, [r7, #4]
   31bc2:	2200      	movs	r2, #0
   31bc4:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   31bc6:	687b      	ldr	r3, [r7, #4]
   31bc8:	2200      	movs	r2, #0
   31bca:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   31bcc:	687b      	ldr	r3, [r7, #4]
   31bce:	2200      	movs	r2, #0
   31bd0:	615a      	str	r2, [r3, #20]
}
   31bd2:	46c0      	nop			; (mov r8, r8)
   31bd4:	46bd      	mov	sp, r7
   31bd6:	b002      	add	sp, #8
   31bd8:	bd80      	pop	{r7, pc}
   31bda:	46c0      	nop			; (mov r8, r8)
   31bdc:	0000075b 	.word	0x0000075b

00031be0 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   31be0:	b580      	push	{r7, lr}
   31be2:	b082      	sub	sp, #8
   31be4:	af00      	add	r7, sp, #0
   31be6:	6078      	str	r0, [r7, #4]
   31be8:	6039      	str	r1, [r7, #0]
	if(module)
   31bea:	687b      	ldr	r3, [r7, #4]
   31bec:	2b00      	cmp	r3, #0
   31bee:	d004      	beq.n	31bfa <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   31bf0:	687b      	ldr	r3, [r7, #4]
   31bf2:	683a      	ldr	r2, [r7, #0]
   31bf4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   31bf6:	2300      	movs	r3, #0
   31bf8:	e001      	b.n	31bfe <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   31bfa:	2301      	movs	r3, #1
   31bfc:	425b      	negs	r3, r3
}
   31bfe:	0018      	movs	r0, r3
   31c00:	46bd      	mov	sp, r7
   31c02:	b002      	add	sp, #8
   31c04:	bd80      	pop	{r7, pc}
	...

00031c08 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31c08:	b580      	push	{r7, lr}
   31c0a:	b082      	sub	sp, #8
   31c0c:	af00      	add	r7, sp, #0
   31c0e:	603a      	str	r2, [r7, #0]
   31c10:	1dfb      	adds	r3, r7, #7
   31c12:	1c02      	adds	r2, r0, #0
   31c14:	701a      	strb	r2, [r3, #0]
   31c16:	1dbb      	adds	r3, r7, #6
   31c18:	1c0a      	adds	r2, r1, #0
   31c1a:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   31c1c:	683a      	ldr	r2, [r7, #0]
   31c1e:	1dbb      	adds	r3, r7, #6
   31c20:	7819      	ldrb	r1, [r3, #0]
   31c22:	1dfb      	adds	r3, r7, #7
   31c24:	781b      	ldrb	r3, [r3, #0]
   31c26:	b25b      	sxtb	r3, r3
   31c28:	0018      	movs	r0, r3
   31c2a:	4b03      	ldr	r3, [pc, #12]	; (31c38 <mqtt_socket_event_handler+0x30>)
   31c2c:	4798      	blx	r3
}
   31c2e:	46c0      	nop			; (mov r8, r8)
   31c30:	46bd      	mov	sp, r7
   31c32:	b002      	add	sp, #8
   31c34:	bd80      	pop	{r7, pc}
   31c36:	46c0      	nop			; (mov r8, r8)
   31c38:	00031685 	.word	0x00031685

00031c3c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   31c3c:	b580      	push	{r7, lr}
   31c3e:	b082      	sub	sp, #8
   31c40:	af00      	add	r7, sp, #0
   31c42:	6078      	str	r0, [r7, #4]
   31c44:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   31c46:	683a      	ldr	r2, [r7, #0]
   31c48:	687b      	ldr	r3, [r7, #4]
   31c4a:	0011      	movs	r1, r2
   31c4c:	0018      	movs	r0, r3
   31c4e:	4b03      	ldr	r3, [pc, #12]	; (31c5c <mqtt_socket_resolve_handler+0x20>)
   31c50:	4798      	blx	r3
}
   31c52:	46c0      	nop			; (mov r8, r8)
   31c54:	46bd      	mov	sp, r7
   31c56:	b002      	add	sp, #8
   31c58:	bd80      	pop	{r7, pc}
   31c5a:	46c0      	nop			; (mov r8, r8)
   31c5c:	00031635 	.word	0x00031635

00031c60 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   31c60:	b590      	push	{r4, r7, lr}
   31c62:	b085      	sub	sp, #20
   31c64:	af00      	add	r7, sp, #0
   31c66:	6078      	str	r0, [r7, #4]
   31c68:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   31c6a:	687b      	ldr	r3, [r7, #4]
   31c6c:	3320      	adds	r3, #32
   31c6e:	0018      	movs	r0, r3
   31c70:	687b      	ldr	r3, [r7, #4]
   31c72:	889b      	ldrh	r3, [r3, #4]
   31c74:	001a      	movs	r2, r3
   31c76:	687b      	ldr	r3, [r7, #4]
   31c78:	799b      	ldrb	r3, [r3, #6]
   31c7a:	6839      	ldr	r1, [r7, #0]
   31c7c:	4c09      	ldr	r4, [pc, #36]	; (31ca4 <mqtt_connect+0x44>)
   31c7e:	47a0      	blx	r4
   31c80:	0003      	movs	r3, r0
   31c82:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   31c84:	687b      	ldr	r3, [r7, #4]
   31c86:	681b      	ldr	r3, [r3, #0]
   31c88:	2b00      	cmp	r3, #0
   31c8a:	d006      	beq.n	31c9a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   31c8c:	687b      	ldr	r3, [r7, #4]
   31c8e:	681b      	ldr	r3, [r3, #0]
   31c90:	220c      	movs	r2, #12
   31c92:	18ba      	adds	r2, r7, r2
   31c94:	6878      	ldr	r0, [r7, #4]
   31c96:	2100      	movs	r1, #0
   31c98:	4798      	blx	r3
	return connResult.sock_connected.result;
   31c9a:	68fb      	ldr	r3, [r7, #12]
}
   31c9c:	0018      	movs	r0, r3
   31c9e:	46bd      	mov	sp, r7
   31ca0:	b005      	add	sp, #20
   31ca2:	bd90      	pop	{r4, r7, pc}
   31ca4:	00031981 	.word	0x00031981

00031ca8 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   31ca8:	b580      	push	{r7, lr}
   31caa:	b09c      	sub	sp, #112	; 0x70
   31cac:	af00      	add	r7, sp, #0
   31cae:	60f8      	str	r0, [r7, #12]
   31cb0:	607a      	str	r2, [r7, #4]
   31cb2:	603b      	str	r3, [r7, #0]
   31cb4:	230b      	movs	r3, #11
   31cb6:	18fb      	adds	r3, r7, r3
   31cb8:	1c0a      	adds	r2, r1, #0
   31cba:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   31cbc:	2310      	movs	r3, #16
   31cbe:	18fa      	adds	r2, r7, r3
   31cc0:	4b31      	ldr	r3, [pc, #196]	; (31d88 <mqtt_connect_broker+0xe0>)
   31cc2:	0010      	movs	r0, r2
   31cc4:	0019      	movs	r1, r3
   31cc6:	2358      	movs	r3, #88	; 0x58
   31cc8:	001a      	movs	r2, r3
   31cca:	4b30      	ldr	r3, [pc, #192]	; (31d8c <mqtt_connect_broker+0xe4>)
   31ccc:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   31cce:	2310      	movs	r3, #16
   31cd0:	18fb      	adds	r3, r7, r3
   31cd2:	2204      	movs	r2, #4
   31cd4:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   31cd6:	2310      	movs	r3, #16
   31cd8:	18fb      	adds	r3, r7, r3
   31cda:	6fba      	ldr	r2, [r7, #120]	; 0x78
   31cdc:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   31cde:	2310      	movs	r3, #16
   31ce0:	18fb      	adds	r3, r7, r3
   31ce2:	687a      	ldr	r2, [r7, #4]
   31ce4:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   31ce6:	2310      	movs	r3, #16
   31ce8:	18fb      	adds	r3, r7, r3
   31cea:	683a      	ldr	r2, [r7, #0]
   31cec:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   31cee:	2310      	movs	r3, #16
   31cf0:	18fb      	adds	r3, r7, r3
   31cf2:	220b      	movs	r2, #11
   31cf4:	18ba      	adds	r2, r7, r2
   31cf6:	7812      	ldrb	r2, [r2, #0]
   31cf8:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   31cfa:	2310      	movs	r3, #16
   31cfc:	18fb      	adds	r3, r7, r3
   31cfe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   31d00:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   31d02:	2310      	movs	r3, #16
   31d04:	18fb      	adds	r3, r7, r3
   31d06:	2280      	movs	r2, #128	; 0x80
   31d08:	18ba      	adds	r2, r7, r2
   31d0a:	6812      	ldr	r2, [r2, #0]
   31d0c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   31d0e:	2310      	movs	r3, #16
   31d10:	18fb      	adds	r3, r7, r3
   31d12:	228c      	movs	r2, #140	; 0x8c
   31d14:	18ba      	adds	r2, r7, r2
   31d16:	213c      	movs	r1, #60	; 0x3c
   31d18:	7812      	ldrb	r2, [r2, #0]
   31d1a:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   31d1c:	2310      	movs	r3, #16
   31d1e:	18fb      	adds	r3, r7, r3
   31d20:	2288      	movs	r2, #136	; 0x88
   31d22:	18ba      	adds	r2, r7, r2
   31d24:	213d      	movs	r1, #61	; 0x3d
   31d26:	7812      	ldrb	r2, [r2, #0]
   31d28:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   31d2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   31d2c:	2b00      	cmp	r3, #0
   31d2e:	d008      	beq.n	31d42 <mqtt_connect_broker+0x9a>
   31d30:	2380      	movs	r3, #128	; 0x80
   31d32:	18fb      	adds	r3, r7, r3
   31d34:	681b      	ldr	r3, [r3, #0]
   31d36:	2b00      	cmp	r3, #0
   31d38:	d003      	beq.n	31d42 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   31d3a:	2310      	movs	r3, #16
   31d3c:	18fb      	adds	r3, r7, r3
   31d3e:	2201      	movs	r2, #1
   31d40:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   31d42:	68fb      	ldr	r3, [r7, #12]
   31d44:	69db      	ldr	r3, [r3, #28]
   31d46:	2210      	movs	r2, #16
   31d48:	18ba      	adds	r2, r7, r2
   31d4a:	0011      	movs	r1, r2
   31d4c:	0018      	movs	r0, r3
   31d4e:	4b10      	ldr	r3, [pc, #64]	; (31d90 <mqtt_connect_broker+0xe8>)
   31d50:	4798      	blx	r3
   31d52:	0003      	movs	r3, r0
   31d54:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   31d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   31d58:	b2da      	uxtb	r2, r3
   31d5a:	2368      	movs	r3, #104	; 0x68
   31d5c:	18fb      	adds	r3, r7, r3
   31d5e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   31d60:	68fb      	ldr	r3, [r7, #12]
   31d62:	681b      	ldr	r3, [r3, #0]
   31d64:	2b00      	cmp	r3, #0
   31d66:	d006      	beq.n	31d76 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   31d68:	68fb      	ldr	r3, [r7, #12]
   31d6a:	681b      	ldr	r3, [r3, #0]
   31d6c:	2268      	movs	r2, #104	; 0x68
   31d6e:	18ba      	adds	r2, r7, r2
   31d70:	68f8      	ldr	r0, [r7, #12]
   31d72:	2101      	movs	r1, #1
   31d74:	4798      	blx	r3
	
	module->isConnected = true;
   31d76:	68fb      	ldr	r3, [r7, #12]
   31d78:	2234      	movs	r2, #52	; 0x34
   31d7a:	2101      	movs	r1, #1
   31d7c:	5499      	strb	r1, [r3, r2]
	return rc;
   31d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   31d80:	0018      	movs	r0, r3
   31d82:	46bd      	mov	sp, r7
   31d84:	b01c      	add	sp, #112	; 0x70
   31d86:	bd80      	pop	{r7, pc}
   31d88:	0003ced4 	.word	0x0003ced4
   31d8c:	00037935 	.word	0x00037935
   31d90:	000310d1 	.word	0x000310d1

00031d94 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   31d94:	b580      	push	{r7, lr}
   31d96:	b084      	sub	sp, #16
   31d98:	af00      	add	r7, sp, #0
   31d9a:	6078      	str	r0, [r7, #4]
   31d9c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   31d9e:	687b      	ldr	r3, [r7, #4]
   31da0:	69db      	ldr	r3, [r3, #28]
   31da2:	0018      	movs	r0, r3
   31da4:	4b0c      	ldr	r3, [pc, #48]	; (31dd8 <mqtt_disconnect+0x44>)
   31da6:	4798      	blx	r3
   31da8:	0003      	movs	r3, r0
   31daa:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   31dac:	68fb      	ldr	r3, [r7, #12]
   31dae:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   31db0:	687b      	ldr	r3, [r7, #4]
   31db2:	681b      	ldr	r3, [r3, #0]
   31db4:	2b00      	cmp	r3, #0
   31db6:	d006      	beq.n	31dc6 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   31db8:	687b      	ldr	r3, [r7, #4]
   31dba:	681b      	ldr	r3, [r3, #0]
   31dbc:	2208      	movs	r2, #8
   31dbe:	18ba      	adds	r2, r7, r2
   31dc0:	6878      	ldr	r0, [r7, #4]
   31dc2:	2105      	movs	r1, #5
   31dc4:	4798      	blx	r3
	
	module->isConnected = false;
   31dc6:	687b      	ldr	r3, [r7, #4]
   31dc8:	2234      	movs	r2, #52	; 0x34
   31dca:	2100      	movs	r1, #0
   31dcc:	5499      	strb	r1, [r3, r2]
	return rc;
   31dce:	68fb      	ldr	r3, [r7, #12]
}
   31dd0:	0018      	movs	r0, r3
   31dd2:	46bd      	mov	sp, r7
   31dd4:	b004      	add	sp, #16
   31dd6:	bd80      	pop	{r7, pc}
   31dd8:	0003155d 	.word	0x0003155d

00031ddc <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   31ddc:	b580      	push	{r7, lr}
   31dde:	b08a      	sub	sp, #40	; 0x28
   31de0:	af00      	add	r7, sp, #0
   31de2:	60f8      	str	r0, [r7, #12]
   31de4:	60b9      	str	r1, [r7, #8]
   31de6:	607a      	str	r2, [r7, #4]
   31de8:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   31dea:	2314      	movs	r3, #20
   31dec:	18fb      	adds	r3, r7, r3
   31dee:	2230      	movs	r2, #48	; 0x30
   31df0:	18ba      	adds	r2, r7, r2
   31df2:	7812      	ldrb	r2, [r2, #0]
   31df4:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   31df6:	2314      	movs	r3, #20
   31df8:	18fb      	adds	r3, r7, r3
   31dfa:	687a      	ldr	r2, [r7, #4]
   31dfc:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   31dfe:	2314      	movs	r3, #20
   31e00:	18fb      	adds	r3, r7, r3
   31e02:	683a      	ldr	r2, [r7, #0]
   31e04:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   31e06:	2314      	movs	r3, #20
   31e08:	18fb      	adds	r3, r7, r3
   31e0a:	2234      	movs	r2, #52	; 0x34
   31e0c:	18ba      	adds	r2, r7, r2
   31e0e:	7812      	ldrb	r2, [r2, #0]
   31e10:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   31e12:	68fb      	ldr	r3, [r7, #12]
   31e14:	69db      	ldr	r3, [r3, #28]
   31e16:	2214      	movs	r2, #20
   31e18:	18ba      	adds	r2, r7, r2
   31e1a:	68b9      	ldr	r1, [r7, #8]
   31e1c:	0018      	movs	r0, r3
   31e1e:	4b09      	ldr	r3, [pc, #36]	; (31e44 <mqtt_publish+0x68>)
   31e20:	4798      	blx	r3
   31e22:	0003      	movs	r3, r0
   31e24:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   31e26:	68fb      	ldr	r3, [r7, #12]
   31e28:	681b      	ldr	r3, [r3, #0]
   31e2a:	2b00      	cmp	r3, #0
   31e2c:	d005      	beq.n	31e3a <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   31e2e:	68fb      	ldr	r3, [r7, #12]
   31e30:	681b      	ldr	r3, [r3, #0]
   31e32:	68f8      	ldr	r0, [r7, #12]
   31e34:	2200      	movs	r2, #0
   31e36:	2102      	movs	r1, #2
   31e38:	4798      	blx	r3
	
	return rc;
   31e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31e3c:	0018      	movs	r0, r3
   31e3e:	46bd      	mov	sp, r7
   31e40:	b00a      	add	sp, #40	; 0x28
   31e42:	bd80      	pop	{r7, pc}
   31e44:	0003139d 	.word	0x0003139d

00031e48 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   31e48:	b590      	push	{r4, r7, lr}
   31e4a:	b087      	sub	sp, #28
   31e4c:	af00      	add	r7, sp, #0
   31e4e:	60f8      	str	r0, [r7, #12]
   31e50:	60b9      	str	r1, [r7, #8]
   31e52:	603b      	str	r3, [r7, #0]
   31e54:	1dfb      	adds	r3, r7, #7
   31e56:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   31e58:	68fb      	ldr	r3, [r7, #12]
   31e5a:	69d8      	ldr	r0, [r3, #28]
   31e5c:	683c      	ldr	r4, [r7, #0]
   31e5e:	1dfb      	adds	r3, r7, #7
   31e60:	781a      	ldrb	r2, [r3, #0]
   31e62:	68b9      	ldr	r1, [r7, #8]
   31e64:	0023      	movs	r3, r4
   31e66:	4c09      	ldr	r4, [pc, #36]	; (31e8c <mqtt_subscribe+0x44>)
   31e68:	47a0      	blx	r4
   31e6a:	0003      	movs	r3, r0
   31e6c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   31e6e:	68fb      	ldr	r3, [r7, #12]
   31e70:	681b      	ldr	r3, [r3, #0]
   31e72:	2b00      	cmp	r3, #0
   31e74:	d005      	beq.n	31e82 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   31e76:	68fb      	ldr	r3, [r7, #12]
   31e78:	681b      	ldr	r3, [r3, #0]
   31e7a:	68f8      	ldr	r0, [r7, #12]
   31e7c:	2200      	movs	r2, #0
   31e7e:	2103      	movs	r1, #3
   31e80:	4798      	blx	r3
	
	return rc;
   31e82:	697b      	ldr	r3, [r7, #20]
}
   31e84:	0018      	movs	r0, r3
   31e86:	46bd      	mov	sp, r7
   31e88:	b007      	add	sp, #28
   31e8a:	bd90      	pop	{r4, r7, pc}
   31e8c:	00031211 	.word	0x00031211

00031e90 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   31e90:	b580      	push	{r7, lr}
   31e92:	b082      	sub	sp, #8
   31e94:	af00      	add	r7, sp, #0
   31e96:	6078      	str	r0, [r7, #4]
   31e98:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   31e9a:	687b      	ldr	r3, [r7, #4]
   31e9c:	69db      	ldr	r3, [r3, #28]
   31e9e:	683a      	ldr	r2, [r7, #0]
   31ea0:	0011      	movs	r1, r2
   31ea2:	0018      	movs	r0, r3
   31ea4:	4b03      	ldr	r3, [pc, #12]	; (31eb4 <mqtt_yield+0x24>)
   31ea6:	4798      	blx	r3
   31ea8:	0003      	movs	r3, r0
   31eaa:	0018      	movs	r0, r3
   31eac:	46bd      	mov	sp, r7
   31eae:	b002      	add	sp, #8
   31eb0:	bd80      	pop	{r7, pc}
   31eb2:	46c0      	nop			; (mov r8, r8)
   31eb4:	00031019 	.word	0x00031019

00031eb8 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   31eb8:	b590      	push	{r4, r7, lr}
   31eba:	b085      	sub	sp, #20
   31ebc:	af00      	add	r7, sp, #0
   31ebe:	6078      	str	r0, [r7, #4]
	int len = 0;
   31ec0:	2300      	movs	r3, #0
   31ec2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   31ec4:	687b      	ldr	r3, [r7, #4]
   31ec6:	7a1b      	ldrb	r3, [r3, #8]
   31ec8:	2b03      	cmp	r3, #3
   31eca:	d102      	bne.n	31ed2 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   31ecc:	230c      	movs	r3, #12
   31ece:	60fb      	str	r3, [r7, #12]
   31ed0:	e005      	b.n	31ede <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   31ed2:	687b      	ldr	r3, [r7, #4]
   31ed4:	7a1b      	ldrb	r3, [r3, #8]
   31ed6:	2b04      	cmp	r3, #4
   31ed8:	d101      	bne.n	31ede <MQTTSerialize_connectLength+0x26>
		len = 10;
   31eda:	230a      	movs	r3, #10
   31edc:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   31ede:	687b      	ldr	r3, [r7, #4]
   31ee0:	68d8      	ldr	r0, [r3, #12]
   31ee2:	6919      	ldr	r1, [r3, #16]
   31ee4:	695a      	ldr	r2, [r3, #20]
   31ee6:	4b25      	ldr	r3, [pc, #148]	; (31f7c <MQTTSerialize_connectLength+0xc4>)
   31ee8:	4798      	blx	r3
   31eea:	0003      	movs	r3, r0
   31eec:	3302      	adds	r3, #2
   31eee:	68fa      	ldr	r2, [r7, #12]
   31ef0:	18d3      	adds	r3, r2, r3
   31ef2:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   31ef4:	687b      	ldr	r3, [r7, #4]
   31ef6:	7edb      	ldrb	r3, [r3, #27]
   31ef8:	2b00      	cmp	r3, #0
   31efa:	d013      	beq.n	31f24 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   31efc:	687b      	ldr	r3, [r7, #4]
   31efe:	6a58      	ldr	r0, [r3, #36]	; 0x24
   31f00:	6a99      	ldr	r1, [r3, #40]	; 0x28
   31f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   31f04:	4b1d      	ldr	r3, [pc, #116]	; (31f7c <MQTTSerialize_connectLength+0xc4>)
   31f06:	4798      	blx	r3
   31f08:	0003      	movs	r3, r0
   31f0a:	1c9c      	adds	r4, r3, #2
   31f0c:	687b      	ldr	r3, [r7, #4]
   31f0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   31f10:	6b59      	ldr	r1, [r3, #52]	; 0x34
   31f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   31f14:	4b19      	ldr	r3, [pc, #100]	; (31f7c <MQTTSerialize_connectLength+0xc4>)
   31f16:	4798      	blx	r3
   31f18:	0003      	movs	r3, r0
   31f1a:	18e3      	adds	r3, r4, r3
   31f1c:	3302      	adds	r3, #2
   31f1e:	68fa      	ldr	r2, [r7, #12]
   31f20:	18d3      	adds	r3, r2, r3
   31f22:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   31f24:	687b      	ldr	r3, [r7, #4]
   31f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   31f28:	2b00      	cmp	r3, #0
   31f2a:	d103      	bne.n	31f34 <MQTTSerialize_connectLength+0x7c>
   31f2c:	687b      	ldr	r3, [r7, #4]
   31f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31f30:	2b00      	cmp	r3, #0
   31f32:	d00a      	beq.n	31f4a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   31f34:	687b      	ldr	r3, [r7, #4]
   31f36:	6c18      	ldr	r0, [r3, #64]	; 0x40
   31f38:	6c59      	ldr	r1, [r3, #68]	; 0x44
   31f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   31f3c:	4b0f      	ldr	r3, [pc, #60]	; (31f7c <MQTTSerialize_connectLength+0xc4>)
   31f3e:	4798      	blx	r3
   31f40:	0003      	movs	r3, r0
   31f42:	3302      	adds	r3, #2
   31f44:	68fa      	ldr	r2, [r7, #12]
   31f46:	18d3      	adds	r3, r2, r3
   31f48:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   31f4a:	687b      	ldr	r3, [r7, #4]
   31f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f4e:	2b00      	cmp	r3, #0
   31f50:	d103      	bne.n	31f5a <MQTTSerialize_connectLength+0xa2>
   31f52:	687b      	ldr	r3, [r7, #4]
   31f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31f56:	2b00      	cmp	r3, #0
   31f58:	d00a      	beq.n	31f70 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   31f5a:	687b      	ldr	r3, [r7, #4]
   31f5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   31f5e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   31f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31f62:	4b06      	ldr	r3, [pc, #24]	; (31f7c <MQTTSerialize_connectLength+0xc4>)
   31f64:	4798      	blx	r3
   31f66:	0003      	movs	r3, r0
   31f68:	3302      	adds	r3, #2
   31f6a:	68fa      	ldr	r2, [r7, #12]
   31f6c:	18d3      	adds	r3, r2, r3
   31f6e:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   31f70:	68fb      	ldr	r3, [r7, #12]
}
   31f72:	0018      	movs	r0, r3
   31f74:	46bd      	mov	sp, r7
   31f76:	b005      	add	sp, #20
   31f78:	bd90      	pop	{r4, r7, pc}
   31f7a:	46c0      	nop			; (mov r8, r8)
   31f7c:	00032929 	.word	0x00032929

00031f80 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   31f80:	b590      	push	{r4, r7, lr}
   31f82:	b08b      	sub	sp, #44	; 0x2c
   31f84:	af00      	add	r7, sp, #0
   31f86:	60f8      	str	r0, [r7, #12]
   31f88:	60b9      	str	r1, [r7, #8]
   31f8a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   31f8c:	68fb      	ldr	r3, [r7, #12]
   31f8e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   31f90:	2300      	movs	r3, #0
   31f92:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   31f94:	2300      	movs	r3, #0
   31f96:	617b      	str	r3, [r7, #20]
	int len = 0;
   31f98:	2300      	movs	r3, #0
   31f9a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   31f9c:	2301      	movs	r3, #1
   31f9e:	425b      	negs	r3, r3
   31fa0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   31fa2:	687b      	ldr	r3, [r7, #4]
   31fa4:	0018      	movs	r0, r3
   31fa6:	4b8c      	ldr	r3, [pc, #560]	; (321d8 <MQTTSerialize_connect+0x258>)
   31fa8:	4798      	blx	r3
   31faa:	0003      	movs	r3, r0
   31fac:	623b      	str	r3, [r7, #32]
   31fae:	6a3b      	ldr	r3, [r7, #32]
   31fb0:	0018      	movs	r0, r3
   31fb2:	4b8a      	ldr	r3, [pc, #552]	; (321dc <MQTTSerialize_connect+0x25c>)
   31fb4:	4798      	blx	r3
   31fb6:	0002      	movs	r2, r0
   31fb8:	68bb      	ldr	r3, [r7, #8]
   31fba:	429a      	cmp	r2, r3
   31fbc:	dd03      	ble.n	31fc6 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31fbe:	2302      	movs	r3, #2
   31fc0:	425b      	negs	r3, r3
   31fc2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   31fc4:	e103      	b.n	321ce <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   31fc6:	2318      	movs	r3, #24
   31fc8:	18fb      	adds	r3, r7, r3
   31fca:	2200      	movs	r2, #0
   31fcc:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   31fce:	2318      	movs	r3, #24
   31fd0:	18fb      	adds	r3, r7, r3
   31fd2:	781a      	ldrb	r2, [r3, #0]
   31fd4:	210f      	movs	r1, #15
   31fd6:	400a      	ands	r2, r1
   31fd8:	1c11      	adds	r1, r2, #0
   31fda:	2210      	movs	r2, #16
   31fdc:	430a      	orrs	r2, r1
   31fde:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31fe0:	2318      	movs	r3, #24
   31fe2:	18fb      	adds	r3, r7, r3
   31fe4:	781a      	ldrb	r2, [r3, #0]
   31fe6:	231c      	movs	r3, #28
   31fe8:	18fb      	adds	r3, r7, r3
   31fea:	0011      	movs	r1, r2
   31fec:	0018      	movs	r0, r3
   31fee:	4b7c      	ldr	r3, [pc, #496]	; (321e0 <MQTTSerialize_connect+0x260>)
   31ff0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   31ff2:	69fb      	ldr	r3, [r7, #28]
   31ff4:	6a3a      	ldr	r2, [r7, #32]
   31ff6:	0011      	movs	r1, r2
   31ff8:	0018      	movs	r0, r3
   31ffa:	4b7a      	ldr	r3, [pc, #488]	; (321e4 <MQTTSerialize_connect+0x264>)
   31ffc:	4798      	blx	r3
   31ffe:	0002      	movs	r2, r0
   32000:	69fb      	ldr	r3, [r7, #28]
   32002:	189b      	adds	r3, r3, r2
   32004:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   32006:	687b      	ldr	r3, [r7, #4]
   32008:	7a1b      	ldrb	r3, [r3, #8]
   3200a:	2b04      	cmp	r3, #4
   3200c:	d10d      	bne.n	3202a <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   3200e:	4a76      	ldr	r2, [pc, #472]	; (321e8 <MQTTSerialize_connect+0x268>)
   32010:	231c      	movs	r3, #28
   32012:	18fb      	adds	r3, r7, r3
   32014:	0011      	movs	r1, r2
   32016:	0018      	movs	r0, r3
   32018:	4b74      	ldr	r3, [pc, #464]	; (321ec <MQTTSerialize_connect+0x26c>)
   3201a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   3201c:	231c      	movs	r3, #28
   3201e:	18fb      	adds	r3, r7, r3
   32020:	2104      	movs	r1, #4
   32022:	0018      	movs	r0, r3
   32024:	4b6e      	ldr	r3, [pc, #440]	; (321e0 <MQTTSerialize_connect+0x260>)
   32026:	4798      	blx	r3
   32028:	e00c      	b.n	32044 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   3202a:	4a71      	ldr	r2, [pc, #452]	; (321f0 <MQTTSerialize_connect+0x270>)
   3202c:	231c      	movs	r3, #28
   3202e:	18fb      	adds	r3, r7, r3
   32030:	0011      	movs	r1, r2
   32032:	0018      	movs	r0, r3
   32034:	4b6d      	ldr	r3, [pc, #436]	; (321ec <MQTTSerialize_connect+0x26c>)
   32036:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   32038:	231c      	movs	r3, #28
   3203a:	18fb      	adds	r3, r7, r3
   3203c:	2103      	movs	r1, #3
   3203e:	0018      	movs	r0, r3
   32040:	4b67      	ldr	r3, [pc, #412]	; (321e0 <MQTTSerialize_connect+0x260>)
   32042:	4798      	blx	r3
	}

	flags.all = 0;
   32044:	2314      	movs	r3, #20
   32046:	18fb      	adds	r3, r7, r3
   32048:	2200      	movs	r2, #0
   3204a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   3204c:	687b      	ldr	r3, [r7, #4]
   3204e:	7e9b      	ldrb	r3, [r3, #26]
   32050:	1c1a      	adds	r2, r3, #0
   32052:	2301      	movs	r3, #1
   32054:	4013      	ands	r3, r2
   32056:	b2da      	uxtb	r2, r3
   32058:	2314      	movs	r3, #20
   3205a:	18fb      	adds	r3, r7, r3
   3205c:	2101      	movs	r1, #1
   3205e:	400a      	ands	r2, r1
   32060:	1890      	adds	r0, r2, r2
   32062:	781a      	ldrb	r2, [r3, #0]
   32064:	2102      	movs	r1, #2
   32066:	438a      	bics	r2, r1
   32068:	1c11      	adds	r1, r2, #0
   3206a:	1c02      	adds	r2, r0, #0
   3206c:	430a      	orrs	r2, r1
   3206e:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   32070:	687b      	ldr	r3, [r7, #4]
   32072:	7edb      	ldrb	r3, [r3, #27]
   32074:	1e5a      	subs	r2, r3, #1
   32076:	4193      	sbcs	r3, r2
   32078:	b2da      	uxtb	r2, r3
   3207a:	2314      	movs	r3, #20
   3207c:	18fb      	adds	r3, r7, r3
   3207e:	2101      	movs	r1, #1
   32080:	400a      	ands	r2, r1
   32082:	0090      	lsls	r0, r2, #2
   32084:	781a      	ldrb	r2, [r3, #0]
   32086:	2104      	movs	r1, #4
   32088:	438a      	bics	r2, r1
   3208a:	1c11      	adds	r1, r2, #0
   3208c:	1c02      	adds	r2, r0, #0
   3208e:	430a      	orrs	r2, r1
   32090:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   32092:	2314      	movs	r3, #20
   32094:	18fb      	adds	r3, r7, r3
   32096:	781b      	ldrb	r3, [r3, #0]
   32098:	2204      	movs	r2, #4
   3209a:	4013      	ands	r3, r2
   3209c:	b2db      	uxtb	r3, r3
   3209e:	2b00      	cmp	r3, #0
   320a0:	d025      	beq.n	320ee <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   320a2:	687b      	ldr	r3, [r7, #4]
   320a4:	223d      	movs	r2, #61	; 0x3d
   320a6:	5c9b      	ldrb	r3, [r3, r2]
   320a8:	1c1a      	adds	r2, r3, #0
   320aa:	2303      	movs	r3, #3
   320ac:	4013      	ands	r3, r2
   320ae:	b2da      	uxtb	r2, r3
   320b0:	2314      	movs	r3, #20
   320b2:	18fb      	adds	r3, r7, r3
   320b4:	2103      	movs	r1, #3
   320b6:	400a      	ands	r2, r1
   320b8:	00d0      	lsls	r0, r2, #3
   320ba:	781a      	ldrb	r2, [r3, #0]
   320bc:	2118      	movs	r1, #24
   320be:	438a      	bics	r2, r1
   320c0:	1c11      	adds	r1, r2, #0
   320c2:	1c02      	adds	r2, r0, #0
   320c4:	430a      	orrs	r2, r1
   320c6:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   320c8:	687b      	ldr	r3, [r7, #4]
   320ca:	223c      	movs	r2, #60	; 0x3c
   320cc:	5c9b      	ldrb	r3, [r3, r2]
   320ce:	1c1a      	adds	r2, r3, #0
   320d0:	2301      	movs	r3, #1
   320d2:	4013      	ands	r3, r2
   320d4:	b2da      	uxtb	r2, r3
   320d6:	2314      	movs	r3, #20
   320d8:	18fb      	adds	r3, r7, r3
   320da:	2101      	movs	r1, #1
   320dc:	400a      	ands	r2, r1
   320de:	0150      	lsls	r0, r2, #5
   320e0:	781a      	ldrb	r2, [r3, #0]
   320e2:	2120      	movs	r1, #32
   320e4:	438a      	bics	r2, r1
   320e6:	1c11      	adds	r1, r2, #0
   320e8:	1c02      	adds	r2, r0, #0
   320ea:	430a      	orrs	r2, r1
   320ec:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   320ee:	687b      	ldr	r3, [r7, #4]
   320f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   320f2:	2b00      	cmp	r3, #0
   320f4:	d103      	bne.n	320fe <MQTTSerialize_connect+0x17e>
   320f6:	687b      	ldr	r3, [r7, #4]
   320f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   320fa:	2b00      	cmp	r3, #0
   320fc:	d006      	beq.n	3210c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   320fe:	2314      	movs	r3, #20
   32100:	18fb      	adds	r3, r7, r3
   32102:	781a      	ldrb	r2, [r3, #0]
   32104:	2180      	movs	r1, #128	; 0x80
   32106:	4249      	negs	r1, r1
   32108:	430a      	orrs	r2, r1
   3210a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   3210c:	687b      	ldr	r3, [r7, #4]
   3210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32110:	2b00      	cmp	r3, #0
   32112:	d103      	bne.n	3211c <MQTTSerialize_connect+0x19c>
   32114:	687b      	ldr	r3, [r7, #4]
   32116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   32118:	2b00      	cmp	r3, #0
   3211a:	d005      	beq.n	32128 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   3211c:	2314      	movs	r3, #20
   3211e:	18fb      	adds	r3, r7, r3
   32120:	781a      	ldrb	r2, [r3, #0]
   32122:	2140      	movs	r1, #64	; 0x40
   32124:	430a      	orrs	r2, r1
   32126:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   32128:	2314      	movs	r3, #20
   3212a:	18fb      	adds	r3, r7, r3
   3212c:	781a      	ldrb	r2, [r3, #0]
   3212e:	231c      	movs	r3, #28
   32130:	18fb      	adds	r3, r7, r3
   32132:	0011      	movs	r1, r2
   32134:	0018      	movs	r0, r3
   32136:	4b2a      	ldr	r3, [pc, #168]	; (321e0 <MQTTSerialize_connect+0x260>)
   32138:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   3213a:	687b      	ldr	r3, [r7, #4]
   3213c:	8b1b      	ldrh	r3, [r3, #24]
   3213e:	001a      	movs	r2, r3
   32140:	231c      	movs	r3, #28
   32142:	18fb      	adds	r3, r7, r3
   32144:	0011      	movs	r1, r2
   32146:	0018      	movs	r0, r3
   32148:	4b2a      	ldr	r3, [pc, #168]	; (321f4 <MQTTSerialize_connect+0x274>)
   3214a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   3214c:	687b      	ldr	r3, [r7, #4]
   3214e:	221c      	movs	r2, #28
   32150:	18b8      	adds	r0, r7, r2
   32152:	68d9      	ldr	r1, [r3, #12]
   32154:	691a      	ldr	r2, [r3, #16]
   32156:	695b      	ldr	r3, [r3, #20]
   32158:	4c27      	ldr	r4, [pc, #156]	; (321f8 <MQTTSerialize_connect+0x278>)
   3215a:	47a0      	blx	r4
	if (options->willFlag)
   3215c:	687b      	ldr	r3, [r7, #4]
   3215e:	7edb      	ldrb	r3, [r3, #27]
   32160:	2b00      	cmp	r3, #0
   32162:	d00f      	beq.n	32184 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   32164:	687b      	ldr	r3, [r7, #4]
   32166:	221c      	movs	r2, #28
   32168:	18b8      	adds	r0, r7, r2
   3216a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   3216c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   32170:	4c21      	ldr	r4, [pc, #132]	; (321f8 <MQTTSerialize_connect+0x278>)
   32172:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   32174:	687b      	ldr	r3, [r7, #4]
   32176:	221c      	movs	r2, #28
   32178:	18b8      	adds	r0, r7, r2
   3217a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   3217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   32180:	4c1d      	ldr	r4, [pc, #116]	; (321f8 <MQTTSerialize_connect+0x278>)
   32182:	47a0      	blx	r4
	}
	if (flags.bits.username)
   32184:	2314      	movs	r3, #20
   32186:	18fb      	adds	r3, r7, r3
   32188:	781b      	ldrb	r3, [r3, #0]
   3218a:	227f      	movs	r2, #127	; 0x7f
   3218c:	4393      	bics	r3, r2
   3218e:	b2db      	uxtb	r3, r3
   32190:	2b00      	cmp	r3, #0
   32192:	d007      	beq.n	321a4 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   32194:	687b      	ldr	r3, [r7, #4]
   32196:	221c      	movs	r2, #28
   32198:	18b8      	adds	r0, r7, r2
   3219a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   3219c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   321a0:	4c15      	ldr	r4, [pc, #84]	; (321f8 <MQTTSerialize_connect+0x278>)
   321a2:	47a0      	blx	r4
	if (flags.bits.password)
   321a4:	2314      	movs	r3, #20
   321a6:	18fb      	adds	r3, r7, r3
   321a8:	781b      	ldrb	r3, [r3, #0]
   321aa:	2240      	movs	r2, #64	; 0x40
   321ac:	4013      	ands	r3, r2
   321ae:	b2db      	uxtb	r3, r3
   321b0:	2b00      	cmp	r3, #0
   321b2:	d007      	beq.n	321c4 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   321b4:	687b      	ldr	r3, [r7, #4]
   321b6:	221c      	movs	r2, #28
   321b8:	18b8      	adds	r0, r7, r2
   321ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   321bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   321be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   321c0:	4c0d      	ldr	r4, [pc, #52]	; (321f8 <MQTTSerialize_connect+0x278>)
   321c2:	47a0      	blx	r4

	rc = ptr - buf;
   321c4:	69fb      	ldr	r3, [r7, #28]
   321c6:	001a      	movs	r2, r3
   321c8:	68fb      	ldr	r3, [r7, #12]
   321ca:	1ad3      	subs	r3, r2, r3
   321cc:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   321ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   321d0:	0018      	movs	r0, r3
   321d2:	46bd      	mov	sp, r7
   321d4:	b00b      	add	sp, #44	; 0x2c
   321d6:	bd90      	pop	{r4, r7, pc}
   321d8:	00031eb9 	.word	0x00031eb9
   321dc:	0003264d 	.word	0x0003264d
   321e0:	0003276f 	.word	0x0003276f
   321e4:	00032555 	.word	0x00032555
   321e8:	0003cf2c 	.word	0x0003cf2c
   321ec:	000327f1 	.word	0x000327f1
   321f0:	0003cf34 	.word	0x0003cf34
   321f4:	00032799 	.word	0x00032799
   321f8:	00032841 	.word	0x00032841

000321fc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   321fc:	b580      	push	{r7, lr}
   321fe:	b08a      	sub	sp, #40	; 0x28
   32200:	af00      	add	r7, sp, #0
   32202:	60f8      	str	r0, [r7, #12]
   32204:	60b9      	str	r1, [r7, #8]
   32206:	607a      	str	r2, [r7, #4]
   32208:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3220a:	2300      	movs	r3, #0
   3220c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3220e:	687b      	ldr	r3, [r7, #4]
   32210:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32212:	2300      	movs	r3, #0
   32214:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32216:	2300      	movs	r3, #0
   32218:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   3221a:	2300      	movs	r3, #0
   3221c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3221e:	2318      	movs	r3, #24
   32220:	18fb      	adds	r3, r7, r3
   32222:	0018      	movs	r0, r3
   32224:	4b25      	ldr	r3, [pc, #148]	; (322bc <MQTTDeserialize_connack+0xc0>)
   32226:	4798      	blx	r3
   32228:	0003      	movs	r3, r0
   3222a:	001a      	movs	r2, r3
   3222c:	231c      	movs	r3, #28
   3222e:	18fb      	adds	r3, r7, r3
   32230:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   32232:	231c      	movs	r3, #28
   32234:	18fb      	adds	r3, r7, r3
   32236:	781b      	ldrb	r3, [r3, #0]
   32238:	220f      	movs	r2, #15
   3223a:	4393      	bics	r3, r2
   3223c:	b2db      	uxtb	r3, r3
   3223e:	2b20      	cmp	r3, #32
   32240:	d134      	bne.n	322ac <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32242:	69bb      	ldr	r3, [r7, #24]
   32244:	2214      	movs	r2, #20
   32246:	18ba      	adds	r2, r7, r2
   32248:	0011      	movs	r1, r2
   3224a:	0018      	movs	r0, r3
   3224c:	4b1c      	ldr	r3, [pc, #112]	; (322c0 <MQTTDeserialize_connack+0xc4>)
   3224e:	4798      	blx	r3
   32250:	0003      	movs	r3, r0
   32252:	627b      	str	r3, [r7, #36]	; 0x24
   32254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32256:	69bb      	ldr	r3, [r7, #24]
   32258:	189b      	adds	r3, r3, r2
   3225a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   3225c:	69bb      	ldr	r3, [r7, #24]
   3225e:	697a      	ldr	r2, [r7, #20]
   32260:	189b      	adds	r3, r3, r2
   32262:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32264:	6a3b      	ldr	r3, [r7, #32]
   32266:	69ba      	ldr	r2, [r7, #24]
   32268:	1a9b      	subs	r3, r3, r2
   3226a:	2b01      	cmp	r3, #1
   3226c:	dd20      	ble.n	322b0 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   3226e:	2318      	movs	r3, #24
   32270:	18fb      	adds	r3, r7, r3
   32272:	0018      	movs	r0, r3
   32274:	4b11      	ldr	r3, [pc, #68]	; (322bc <MQTTDeserialize_connack+0xc0>)
   32276:	4798      	blx	r3
   32278:	0003      	movs	r3, r0
   3227a:	001a      	movs	r2, r3
   3227c:	2310      	movs	r3, #16
   3227e:	18fb      	adds	r3, r7, r3
   32280:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   32282:	2310      	movs	r3, #16
   32284:	18fb      	adds	r3, r7, r3
   32286:	781b      	ldrb	r3, [r3, #0]
   32288:	061b      	lsls	r3, r3, #24
   3228a:	0fdb      	lsrs	r3, r3, #31
   3228c:	b2db      	uxtb	r3, r3
   3228e:	001a      	movs	r2, r3
   32290:	68fb      	ldr	r3, [r7, #12]
   32292:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   32294:	2318      	movs	r3, #24
   32296:	18fb      	adds	r3, r7, r3
   32298:	0018      	movs	r0, r3
   3229a:	4b08      	ldr	r3, [pc, #32]	; (322bc <MQTTDeserialize_connack+0xc0>)
   3229c:	4798      	blx	r3
   3229e:	0003      	movs	r3, r0
   322a0:	001a      	movs	r2, r3
   322a2:	68bb      	ldr	r3, [r7, #8]
   322a4:	701a      	strb	r2, [r3, #0]

	rc = 1;
   322a6:	2301      	movs	r3, #1
   322a8:	627b      	str	r3, [r7, #36]	; 0x24
   322aa:	e002      	b.n	322b2 <MQTTDeserialize_connack+0xb6>
		goto exit;
   322ac:	46c0      	nop			; (mov r8, r8)
   322ae:	e000      	b.n	322b2 <MQTTDeserialize_connack+0xb6>
		goto exit;
   322b0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   322b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   322b4:	0018      	movs	r0, r3
   322b6:	46bd      	mov	sp, r7
   322b8:	b00a      	add	sp, #40	; 0x28
   322ba:	bd80      	pop	{r7, pc}
   322bc:	00032743 	.word	0x00032743
   322c0:	000326dd 	.word	0x000326dd

000322c4 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   322c4:	b580      	push	{r7, lr}
   322c6:	b088      	sub	sp, #32
   322c8:	af00      	add	r7, sp, #0
   322ca:	60f8      	str	r0, [r7, #12]
   322cc:	60b9      	str	r1, [r7, #8]
   322ce:	1dfb      	adds	r3, r7, #7
   322d0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   322d2:	2300      	movs	r3, #0
   322d4:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   322d6:	2301      	movs	r3, #1
   322d8:	425b      	negs	r3, r3
   322da:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   322dc:	68fb      	ldr	r3, [r7, #12]
   322de:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   322e0:	68bb      	ldr	r3, [r7, #8]
   322e2:	2b01      	cmp	r3, #1
   322e4:	dc03      	bgt.n	322ee <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   322e6:	2302      	movs	r3, #2
   322e8:	425b      	negs	r3, r3
   322ea:	61fb      	str	r3, [r7, #28]
		goto exit;
   322ec:	e029      	b.n	32342 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   322ee:	2318      	movs	r3, #24
   322f0:	18fb      	adds	r3, r7, r3
   322f2:	2200      	movs	r2, #0
   322f4:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   322f6:	1dfb      	adds	r3, r7, #7
   322f8:	781b      	ldrb	r3, [r3, #0]
   322fa:	220f      	movs	r2, #15
   322fc:	4013      	ands	r3, r2
   322fe:	b2da      	uxtb	r2, r3
   32300:	2318      	movs	r3, #24
   32302:	18fb      	adds	r3, r7, r3
   32304:	0110      	lsls	r0, r2, #4
   32306:	781a      	ldrb	r2, [r3, #0]
   32308:	210f      	movs	r1, #15
   3230a:	400a      	ands	r2, r1
   3230c:	1c11      	adds	r1, r2, #0
   3230e:	1c02      	adds	r2, r0, #0
   32310:	430a      	orrs	r2, r1
   32312:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32314:	2318      	movs	r3, #24
   32316:	18fb      	adds	r3, r7, r3
   32318:	781a      	ldrb	r2, [r3, #0]
   3231a:	2314      	movs	r3, #20
   3231c:	18fb      	adds	r3, r7, r3
   3231e:	0011      	movs	r1, r2
   32320:	0018      	movs	r0, r3
   32322:	4b0a      	ldr	r3, [pc, #40]	; (3234c <MQTTSerialize_zero+0x88>)
   32324:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   32326:	697b      	ldr	r3, [r7, #20]
   32328:	2100      	movs	r1, #0
   3232a:	0018      	movs	r0, r3
   3232c:	4b08      	ldr	r3, [pc, #32]	; (32350 <MQTTSerialize_zero+0x8c>)
   3232e:	4798      	blx	r3
   32330:	0002      	movs	r2, r0
   32332:	697b      	ldr	r3, [r7, #20]
   32334:	189b      	adds	r3, r3, r2
   32336:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   32338:	697b      	ldr	r3, [r7, #20]
   3233a:	001a      	movs	r2, r3
   3233c:	68fb      	ldr	r3, [r7, #12]
   3233e:	1ad3      	subs	r3, r2, r3
   32340:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32342:	69fb      	ldr	r3, [r7, #28]
}
   32344:	0018      	movs	r0, r3
   32346:	46bd      	mov	sp, r7
   32348:	b008      	add	sp, #32
   3234a:	bd80      	pop	{r7, pc}
   3234c:	0003276f 	.word	0x0003276f
   32350:	00032555 	.word	0x00032555

00032354 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   32354:	b580      	push	{r7, lr}
   32356:	b082      	sub	sp, #8
   32358:	af00      	add	r7, sp, #0
   3235a:	6078      	str	r0, [r7, #4]
   3235c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   3235e:	6839      	ldr	r1, [r7, #0]
   32360:	687b      	ldr	r3, [r7, #4]
   32362:	220e      	movs	r2, #14
   32364:	0018      	movs	r0, r3
   32366:	4b03      	ldr	r3, [pc, #12]	; (32374 <MQTTSerialize_disconnect+0x20>)
   32368:	4798      	blx	r3
   3236a:	0003      	movs	r3, r0
}
   3236c:	0018      	movs	r0, r3
   3236e:	46bd      	mov	sp, r7
   32370:	b002      	add	sp, #8
   32372:	bd80      	pop	{r7, pc}
   32374:	000322c5 	.word	0x000322c5

00032378 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   32378:	b580      	push	{r7, lr}
   3237a:	b082      	sub	sp, #8
   3237c:	af00      	add	r7, sp, #0
   3237e:	6078      	str	r0, [r7, #4]
   32380:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   32382:	6839      	ldr	r1, [r7, #0]
   32384:	687b      	ldr	r3, [r7, #4]
   32386:	220c      	movs	r2, #12
   32388:	0018      	movs	r0, r3
   3238a:	4b03      	ldr	r3, [pc, #12]	; (32398 <MQTTSerialize_pingreq+0x20>)
   3238c:	4798      	blx	r3
   3238e:	0003      	movs	r3, r0
}
   32390:	0018      	movs	r0, r3
   32392:	46bd      	mov	sp, r7
   32394:	b002      	add	sp, #8
   32396:	bd80      	pop	{r7, pc}
   32398:	000322c5 	.word	0x000322c5

0003239c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   3239c:	b580      	push	{r7, lr}
   3239e:	b08a      	sub	sp, #40	; 0x28
   323a0:	af00      	add	r7, sp, #0
   323a2:	60f8      	str	r0, [r7, #12]
   323a4:	60b9      	str	r1, [r7, #8]
   323a6:	607a      	str	r2, [r7, #4]
   323a8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   323aa:	2300      	movs	r3, #0
   323ac:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   323ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   323b0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   323b2:	2300      	movs	r3, #0
   323b4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   323b6:	2300      	movs	r3, #0
   323b8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   323ba:	2300      	movs	r3, #0
   323bc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   323be:	2318      	movs	r3, #24
   323c0:	18fb      	adds	r3, r7, r3
   323c2:	0018      	movs	r0, r3
   323c4:	4b32      	ldr	r3, [pc, #200]	; (32490 <MQTTDeserialize_publish+0xf4>)
   323c6:	4798      	blx	r3
   323c8:	0003      	movs	r3, r0
   323ca:	001a      	movs	r2, r3
   323cc:	231c      	movs	r3, #28
   323ce:	18fb      	adds	r3, r7, r3
   323d0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   323d2:	231c      	movs	r3, #28
   323d4:	18fb      	adds	r3, r7, r3
   323d6:	781b      	ldrb	r3, [r3, #0]
   323d8:	220f      	movs	r2, #15
   323da:	4393      	bics	r3, r2
   323dc:	b2db      	uxtb	r3, r3
   323de:	2b30      	cmp	r3, #48	; 0x30
   323e0:	d150      	bne.n	32484 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   323e2:	231c      	movs	r3, #28
   323e4:	18fb      	adds	r3, r7, r3
   323e6:	781b      	ldrb	r3, [r3, #0]
   323e8:	071b      	lsls	r3, r3, #28
   323ea:	0fdb      	lsrs	r3, r3, #31
   323ec:	b2db      	uxtb	r3, r3
   323ee:	001a      	movs	r2, r3
   323f0:	68fb      	ldr	r3, [r7, #12]
   323f2:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   323f4:	231c      	movs	r3, #28
   323f6:	18fb      	adds	r3, r7, r3
   323f8:	781b      	ldrb	r3, [r3, #0]
   323fa:	075b      	lsls	r3, r3, #29
   323fc:	0f9b      	lsrs	r3, r3, #30
   323fe:	b2db      	uxtb	r3, r3
   32400:	001a      	movs	r2, r3
   32402:	68bb      	ldr	r3, [r7, #8]
   32404:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   32406:	231c      	movs	r3, #28
   32408:	18fb      	adds	r3, r7, r3
   3240a:	781b      	ldrb	r3, [r3, #0]
   3240c:	07db      	lsls	r3, r3, #31
   3240e:	0fdb      	lsrs	r3, r3, #31
   32410:	b2db      	uxtb	r3, r3
   32412:	001a      	movs	r2, r3
   32414:	687b      	ldr	r3, [r7, #4]
   32416:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32418:	69bb      	ldr	r3, [r7, #24]
   3241a:	2214      	movs	r2, #20
   3241c:	18ba      	adds	r2, r7, r2
   3241e:	0011      	movs	r1, r2
   32420:	0018      	movs	r0, r3
   32422:	4b1c      	ldr	r3, [pc, #112]	; (32494 <MQTTDeserialize_publish+0xf8>)
   32424:	4798      	blx	r3
   32426:	0003      	movs	r3, r0
   32428:	627b      	str	r3, [r7, #36]	; 0x24
   3242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3242c:	69bb      	ldr	r3, [r7, #24]
   3242e:	189b      	adds	r3, r3, r2
   32430:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32432:	69bb      	ldr	r3, [r7, #24]
   32434:	697a      	ldr	r2, [r7, #20]
   32436:	189b      	adds	r3, r3, r2
   32438:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   3243a:	6a3a      	ldr	r2, [r7, #32]
   3243c:	2318      	movs	r3, #24
   3243e:	18f9      	adds	r1, r7, r3
   32440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32442:	0018      	movs	r0, r3
   32444:	4b14      	ldr	r3, [pc, #80]	; (32498 <MQTTDeserialize_publish+0xfc>)
   32446:	4798      	blx	r3
   32448:	1e03      	subs	r3, r0, #0
   3244a:	d01c      	beq.n	32486 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   3244c:	6a3b      	ldr	r3, [r7, #32]
   3244e:	69ba      	ldr	r2, [r7, #24]
   32450:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   32452:	d418      	bmi.n	32486 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   32454:	68bb      	ldr	r3, [r7, #8]
   32456:	681b      	ldr	r3, [r3, #0]
   32458:	2b00      	cmp	r3, #0
   3245a:	dd08      	ble.n	3246e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   3245c:	2318      	movs	r3, #24
   3245e:	18fb      	adds	r3, r7, r3
   32460:	0018      	movs	r0, r3
   32462:	4b0e      	ldr	r3, [pc, #56]	; (3249c <MQTTDeserialize_publish+0x100>)
   32464:	4798      	blx	r3
   32466:	0003      	movs	r3, r0
   32468:	b29a      	uxth	r2, r3
   3246a:	683b      	ldr	r3, [r7, #0]
   3246c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   3246e:	6a3b      	ldr	r3, [r7, #32]
   32470:	69ba      	ldr	r2, [r7, #24]
   32472:	1a9a      	subs	r2, r3, r2
   32474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32476:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   32478:	69ba      	ldr	r2, [r7, #24]
   3247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   3247c:	601a      	str	r2, [r3, #0]
	rc = 1;
   3247e:	2301      	movs	r3, #1
   32480:	627b      	str	r3, [r7, #36]	; 0x24
   32482:	e000      	b.n	32486 <MQTTDeserialize_publish+0xea>
		goto exit;
   32484:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32488:	0018      	movs	r0, r3
   3248a:	46bd      	mov	sp, r7
   3248c:	b00a      	add	sp, #40	; 0x28
   3248e:	bd80      	pop	{r7, pc}
   32490:	00032743 	.word	0x00032743
   32494:	000326dd 	.word	0x000326dd
   32498:	000328c1 	.word	0x000328c1
   3249c:	00032711 	.word	0x00032711

000324a0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   324a0:	b580      	push	{r7, lr}
   324a2:	b08a      	sub	sp, #40	; 0x28
   324a4:	af00      	add	r7, sp, #0
   324a6:	60f8      	str	r0, [r7, #12]
   324a8:	60b9      	str	r1, [r7, #8]
   324aa:	607a      	str	r2, [r7, #4]
   324ac:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   324ae:	2300      	movs	r3, #0
   324b0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   324b2:	683b      	ldr	r3, [r7, #0]
   324b4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   324b6:	2300      	movs	r3, #0
   324b8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   324ba:	2300      	movs	r3, #0
   324bc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   324be:	2318      	movs	r3, #24
   324c0:	18fb      	adds	r3, r7, r3
   324c2:	0018      	movs	r0, r3
   324c4:	4b20      	ldr	r3, [pc, #128]	; (32548 <MQTTDeserialize_ack+0xa8>)
   324c6:	4798      	blx	r3
   324c8:	0003      	movs	r3, r0
   324ca:	001a      	movs	r2, r3
   324cc:	231c      	movs	r3, #28
   324ce:	18fb      	adds	r3, r7, r3
   324d0:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   324d2:	231c      	movs	r3, #28
   324d4:	18fb      	adds	r3, r7, r3
   324d6:	781b      	ldrb	r3, [r3, #0]
   324d8:	071b      	lsls	r3, r3, #28
   324da:	0fdb      	lsrs	r3, r3, #31
   324dc:	b2db      	uxtb	r3, r3
   324de:	001a      	movs	r2, r3
   324e0:	68bb      	ldr	r3, [r7, #8]
   324e2:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   324e4:	231c      	movs	r3, #28
   324e6:	18fb      	adds	r3, r7, r3
   324e8:	781b      	ldrb	r3, [r3, #0]
   324ea:	061b      	lsls	r3, r3, #24
   324ec:	0f1b      	lsrs	r3, r3, #28
   324ee:	b2db      	uxtb	r3, r3
   324f0:	001a      	movs	r2, r3
   324f2:	68fb      	ldr	r3, [r7, #12]
   324f4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   324f6:	69bb      	ldr	r3, [r7, #24]
   324f8:	2214      	movs	r2, #20
   324fa:	18ba      	adds	r2, r7, r2
   324fc:	0011      	movs	r1, r2
   324fe:	0018      	movs	r0, r3
   32500:	4b12      	ldr	r3, [pc, #72]	; (3254c <MQTTDeserialize_ack+0xac>)
   32502:	4798      	blx	r3
   32504:	0003      	movs	r3, r0
   32506:	627b      	str	r3, [r7, #36]	; 0x24
   32508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3250a:	69bb      	ldr	r3, [r7, #24]
   3250c:	189b      	adds	r3, r3, r2
   3250e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32510:	69bb      	ldr	r3, [r7, #24]
   32512:	697a      	ldr	r2, [r7, #20]
   32514:	189b      	adds	r3, r3, r2
   32516:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   32518:	6a3b      	ldr	r3, [r7, #32]
   3251a:	69ba      	ldr	r2, [r7, #24]
   3251c:	1a9b      	subs	r3, r3, r2
   3251e:	2b01      	cmp	r3, #1
   32520:	dd0b      	ble.n	3253a <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   32522:	2318      	movs	r3, #24
   32524:	18fb      	adds	r3, r7, r3
   32526:	0018      	movs	r0, r3
   32528:	4b09      	ldr	r3, [pc, #36]	; (32550 <MQTTDeserialize_ack+0xb0>)
   3252a:	4798      	blx	r3
   3252c:	0003      	movs	r3, r0
   3252e:	b29a      	uxth	r2, r3
   32530:	687b      	ldr	r3, [r7, #4]
   32532:	801a      	strh	r2, [r3, #0]

	rc = 1;
   32534:	2301      	movs	r3, #1
   32536:	627b      	str	r3, [r7, #36]	; 0x24
   32538:	e000      	b.n	3253c <MQTTDeserialize_ack+0x9c>
		goto exit;
   3253a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3253e:	0018      	movs	r0, r3
   32540:	46bd      	mov	sp, r7
   32542:	b00a      	add	sp, #40	; 0x28
   32544:	bd80      	pop	{r7, pc}
   32546:	46c0      	nop			; (mov r8, r8)
   32548:	00032743 	.word	0x00032743
   3254c:	000326dd 	.word	0x000326dd
   32550:	00032711 	.word	0x00032711

00032554 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   32554:	b580      	push	{r7, lr}
   32556:	b084      	sub	sp, #16
   32558:	af00      	add	r7, sp, #0
   3255a:	6078      	str	r0, [r7, #4]
   3255c:	6039      	str	r1, [r7, #0]
	int rc = 0;
   3255e:	2300      	movs	r3, #0
   32560:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   32562:	683b      	ldr	r3, [r7, #0]
   32564:	4a17      	ldr	r2, [pc, #92]	; (325c4 <MQTTPacket_encode+0x70>)
   32566:	4013      	ands	r3, r2
   32568:	d504      	bpl.n	32574 <MQTTPacket_encode+0x20>
   3256a:	3b01      	subs	r3, #1
   3256c:	2280      	movs	r2, #128	; 0x80
   3256e:	4252      	negs	r2, r2
   32570:	4313      	orrs	r3, r2
   32572:	3301      	adds	r3, #1
   32574:	001a      	movs	r2, r3
   32576:	230b      	movs	r3, #11
   32578:	18fb      	adds	r3, r7, r3
   3257a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   3257c:	683b      	ldr	r3, [r7, #0]
   3257e:	2b00      	cmp	r3, #0
   32580:	da00      	bge.n	32584 <MQTTPacket_encode+0x30>
   32582:	337f      	adds	r3, #127	; 0x7f
   32584:	11db      	asrs	r3, r3, #7
   32586:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   32588:	683b      	ldr	r3, [r7, #0]
   3258a:	2b00      	cmp	r3, #0
   3258c:	dd08      	ble.n	325a0 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   3258e:	230b      	movs	r3, #11
   32590:	18fb      	adds	r3, r7, r3
   32592:	220b      	movs	r2, #11
   32594:	18ba      	adds	r2, r7, r2
   32596:	7812      	ldrb	r2, [r2, #0]
   32598:	2180      	movs	r1, #128	; 0x80
   3259a:	4249      	negs	r1, r1
   3259c:	430a      	orrs	r2, r1
   3259e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   325a0:	68fb      	ldr	r3, [r7, #12]
   325a2:	1c5a      	adds	r2, r3, #1
   325a4:	60fa      	str	r2, [r7, #12]
   325a6:	001a      	movs	r2, r3
   325a8:	687b      	ldr	r3, [r7, #4]
   325aa:	189b      	adds	r3, r3, r2
   325ac:	220b      	movs	r2, #11
   325ae:	18ba      	adds	r2, r7, r2
   325b0:	7812      	ldrb	r2, [r2, #0]
   325b2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   325b4:	683b      	ldr	r3, [r7, #0]
   325b6:	2b00      	cmp	r3, #0
   325b8:	dcd3      	bgt.n	32562 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   325ba:	68fb      	ldr	r3, [r7, #12]
}
   325bc:	0018      	movs	r0, r3
   325be:	46bd      	mov	sp, r7
   325c0:	b004      	add	sp, #16
   325c2:	bd80      	pop	{r7, pc}
   325c4:	8000007f 	.word	0x8000007f

000325c8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   325c8:	b580      	push	{r7, lr}
   325ca:	b086      	sub	sp, #24
   325cc:	af00      	add	r7, sp, #0
   325ce:	6078      	str	r0, [r7, #4]
   325d0:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   325d2:	2301      	movs	r3, #1
   325d4:	617b      	str	r3, [r7, #20]
	int len = 0;
   325d6:	2300      	movs	r3, #0
   325d8:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   325da:	683b      	ldr	r3, [r7, #0]
   325dc:	2200      	movs	r2, #0
   325de:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   325e0:	2301      	movs	r3, #1
   325e2:	425b      	negs	r3, r3
   325e4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   325e6:	693b      	ldr	r3, [r7, #16]
   325e8:	3301      	adds	r3, #1
   325ea:	613b      	str	r3, [r7, #16]
   325ec:	693b      	ldr	r3, [r7, #16]
   325ee:	2b04      	cmp	r3, #4
   325f0:	dd03      	ble.n	325fa <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   325f2:	2301      	movs	r3, #1
   325f4:	425b      	negs	r3, r3
   325f6:	60fb      	str	r3, [r7, #12]
			goto exit;
   325f8:	e022      	b.n	32640 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   325fa:	230b      	movs	r3, #11
   325fc:	18fa      	adds	r2, r7, r3
   325fe:	687b      	ldr	r3, [r7, #4]
   32600:	2101      	movs	r1, #1
   32602:	0010      	movs	r0, r2
   32604:	4798      	blx	r3
   32606:	0003      	movs	r3, r0
   32608:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   3260a:	68fb      	ldr	r3, [r7, #12]
   3260c:	2b01      	cmp	r3, #1
   3260e:	d116      	bne.n	3263e <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   32610:	683b      	ldr	r3, [r7, #0]
   32612:	681a      	ldr	r2, [r3, #0]
   32614:	230b      	movs	r3, #11
   32616:	18fb      	adds	r3, r7, r3
   32618:	781b      	ldrb	r3, [r3, #0]
   3261a:	0019      	movs	r1, r3
   3261c:	237f      	movs	r3, #127	; 0x7f
   3261e:	400b      	ands	r3, r1
   32620:	6979      	ldr	r1, [r7, #20]
   32622:	434b      	muls	r3, r1
   32624:	18d2      	adds	r2, r2, r3
   32626:	683b      	ldr	r3, [r7, #0]
   32628:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   3262a:	697b      	ldr	r3, [r7, #20]
   3262c:	01db      	lsls	r3, r3, #7
   3262e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   32630:	230b      	movs	r3, #11
   32632:	18fb      	adds	r3, r7, r3
   32634:	781b      	ldrb	r3, [r3, #0]
   32636:	b25b      	sxtb	r3, r3
   32638:	2b00      	cmp	r3, #0
   3263a:	dbd1      	blt.n	325e0 <MQTTPacket_decode+0x18>
   3263c:	e000      	b.n	32640 <MQTTPacket_decode+0x78>
			goto exit;
   3263e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   32640:	693b      	ldr	r3, [r7, #16]
}
   32642:	0018      	movs	r0, r3
   32644:	46bd      	mov	sp, r7
   32646:	b006      	add	sp, #24
   32648:	bd80      	pop	{r7, pc}
	...

0003264c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   3264c:	b580      	push	{r7, lr}
   3264e:	b082      	sub	sp, #8
   32650:	af00      	add	r7, sp, #0
   32652:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   32654:	687b      	ldr	r3, [r7, #4]
   32656:	3301      	adds	r3, #1
   32658:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   3265a:	687b      	ldr	r3, [r7, #4]
   3265c:	2b7f      	cmp	r3, #127	; 0x7f
   3265e:	dc03      	bgt.n	32668 <MQTTPacket_len+0x1c>
		rem_len += 1;
   32660:	687b      	ldr	r3, [r7, #4]
   32662:	3301      	adds	r3, #1
   32664:	607b      	str	r3, [r7, #4]
   32666:	e012      	b.n	3268e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   32668:	687b      	ldr	r3, [r7, #4]
   3266a:	4a0b      	ldr	r2, [pc, #44]	; (32698 <MQTTPacket_len+0x4c>)
   3266c:	4293      	cmp	r3, r2
   3266e:	dc03      	bgt.n	32678 <MQTTPacket_len+0x2c>
		rem_len += 2;
   32670:	687b      	ldr	r3, [r7, #4]
   32672:	3302      	adds	r3, #2
   32674:	607b      	str	r3, [r7, #4]
   32676:	e00a      	b.n	3268e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   32678:	687b      	ldr	r3, [r7, #4]
   3267a:	4a08      	ldr	r2, [pc, #32]	; (3269c <MQTTPacket_len+0x50>)
   3267c:	4293      	cmp	r3, r2
   3267e:	dc03      	bgt.n	32688 <MQTTPacket_len+0x3c>
		rem_len += 3;
   32680:	687b      	ldr	r3, [r7, #4]
   32682:	3303      	adds	r3, #3
   32684:	607b      	str	r3, [r7, #4]
   32686:	e002      	b.n	3268e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   32688:	687b      	ldr	r3, [r7, #4]
   3268a:	3304      	adds	r3, #4
   3268c:	607b      	str	r3, [r7, #4]
	return rem_len;
   3268e:	687b      	ldr	r3, [r7, #4]
}
   32690:	0018      	movs	r0, r3
   32692:	46bd      	mov	sp, r7
   32694:	b002      	add	sp, #8
   32696:	bd80      	pop	{r7, pc}
   32698:	00003fff 	.word	0x00003fff
   3269c:	001ffffe 	.word	0x001ffffe

000326a0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   326a0:	b580      	push	{r7, lr}
   326a2:	b084      	sub	sp, #16
   326a4:	af00      	add	r7, sp, #0
   326a6:	6078      	str	r0, [r7, #4]
   326a8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   326aa:	2300      	movs	r3, #0
   326ac:	60fb      	str	r3, [r7, #12]
   326ae:	e00a      	b.n	326c6 <bufchar+0x26>
		*c = *bufptr++;
   326b0:	4b09      	ldr	r3, [pc, #36]	; (326d8 <bufchar+0x38>)
   326b2:	681b      	ldr	r3, [r3, #0]
   326b4:	1c59      	adds	r1, r3, #1
   326b6:	4a08      	ldr	r2, [pc, #32]	; (326d8 <bufchar+0x38>)
   326b8:	6011      	str	r1, [r2, #0]
   326ba:	781a      	ldrb	r2, [r3, #0]
   326bc:	687b      	ldr	r3, [r7, #4]
   326be:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   326c0:	68fb      	ldr	r3, [r7, #12]
   326c2:	3301      	adds	r3, #1
   326c4:	60fb      	str	r3, [r7, #12]
   326c6:	68fa      	ldr	r2, [r7, #12]
   326c8:	683b      	ldr	r3, [r7, #0]
   326ca:	429a      	cmp	r2, r3
   326cc:	dbf0      	blt.n	326b0 <bufchar+0x10>
	return count;
   326ce:	683b      	ldr	r3, [r7, #0]
}
   326d0:	0018      	movs	r0, r3
   326d2:	46bd      	mov	sp, r7
   326d4:	b004      	add	sp, #16
   326d6:	bd80      	pop	{r7, pc}
   326d8:	20004564 	.word	0x20004564

000326dc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   326dc:	b580      	push	{r7, lr}
   326de:	b082      	sub	sp, #8
   326e0:	af00      	add	r7, sp, #0
   326e2:	6078      	str	r0, [r7, #4]
   326e4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   326e6:	4b07      	ldr	r3, [pc, #28]	; (32704 <MQTTPacket_decodeBuf+0x28>)
   326e8:	687a      	ldr	r2, [r7, #4]
   326ea:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   326ec:	683a      	ldr	r2, [r7, #0]
   326ee:	4b06      	ldr	r3, [pc, #24]	; (32708 <MQTTPacket_decodeBuf+0x2c>)
   326f0:	0011      	movs	r1, r2
   326f2:	0018      	movs	r0, r3
   326f4:	4b05      	ldr	r3, [pc, #20]	; (3270c <MQTTPacket_decodeBuf+0x30>)
   326f6:	4798      	blx	r3
   326f8:	0003      	movs	r3, r0
}
   326fa:	0018      	movs	r0, r3
   326fc:	46bd      	mov	sp, r7
   326fe:	b002      	add	sp, #8
   32700:	bd80      	pop	{r7, pc}
   32702:	46c0      	nop			; (mov r8, r8)
   32704:	20004564 	.word	0x20004564
   32708:	000326a1 	.word	0x000326a1
   3270c:	000325c9 	.word	0x000325c9

00032710 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   32710:	b580      	push	{r7, lr}
   32712:	b084      	sub	sp, #16
   32714:	af00      	add	r7, sp, #0
   32716:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   32718:	687b      	ldr	r3, [r7, #4]
   3271a:	681b      	ldr	r3, [r3, #0]
   3271c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   3271e:	68fb      	ldr	r3, [r7, #12]
   32720:	781b      	ldrb	r3, [r3, #0]
   32722:	021b      	lsls	r3, r3, #8
   32724:	68fa      	ldr	r2, [r7, #12]
   32726:	3201      	adds	r2, #1
   32728:	7812      	ldrb	r2, [r2, #0]
   3272a:	189b      	adds	r3, r3, r2
   3272c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   3272e:	687b      	ldr	r3, [r7, #4]
   32730:	681b      	ldr	r3, [r3, #0]
   32732:	1c9a      	adds	r2, r3, #2
   32734:	687b      	ldr	r3, [r7, #4]
   32736:	601a      	str	r2, [r3, #0]
	return len;
   32738:	68bb      	ldr	r3, [r7, #8]
}
   3273a:	0018      	movs	r0, r3
   3273c:	46bd      	mov	sp, r7
   3273e:	b004      	add	sp, #16
   32740:	bd80      	pop	{r7, pc}

00032742 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   32742:	b580      	push	{r7, lr}
   32744:	b084      	sub	sp, #16
   32746:	af00      	add	r7, sp, #0
   32748:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3274a:	687b      	ldr	r3, [r7, #4]
   3274c:	681a      	ldr	r2, [r3, #0]
   3274e:	230f      	movs	r3, #15
   32750:	18fb      	adds	r3, r7, r3
   32752:	7812      	ldrb	r2, [r2, #0]
   32754:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32756:	687b      	ldr	r3, [r7, #4]
   32758:	681b      	ldr	r3, [r3, #0]
   3275a:	1c5a      	adds	r2, r3, #1
   3275c:	687b      	ldr	r3, [r7, #4]
   3275e:	601a      	str	r2, [r3, #0]
	return c;
   32760:	230f      	movs	r3, #15
   32762:	18fb      	adds	r3, r7, r3
   32764:	781b      	ldrb	r3, [r3, #0]
}
   32766:	0018      	movs	r0, r3
   32768:	46bd      	mov	sp, r7
   3276a:	b004      	add	sp, #16
   3276c:	bd80      	pop	{r7, pc}

0003276e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   3276e:	b580      	push	{r7, lr}
   32770:	b082      	sub	sp, #8
   32772:	af00      	add	r7, sp, #0
   32774:	6078      	str	r0, [r7, #4]
   32776:	000a      	movs	r2, r1
   32778:	1cfb      	adds	r3, r7, #3
   3277a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   3277c:	687b      	ldr	r3, [r7, #4]
   3277e:	681b      	ldr	r3, [r3, #0]
   32780:	1cfa      	adds	r2, r7, #3
   32782:	7812      	ldrb	r2, [r2, #0]
   32784:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32786:	687b      	ldr	r3, [r7, #4]
   32788:	681b      	ldr	r3, [r3, #0]
   3278a:	1c5a      	adds	r2, r3, #1
   3278c:	687b      	ldr	r3, [r7, #4]
   3278e:	601a      	str	r2, [r3, #0]
}
   32790:	46c0      	nop			; (mov r8, r8)
   32792:	46bd      	mov	sp, r7
   32794:	b002      	add	sp, #8
   32796:	bd80      	pop	{r7, pc}

00032798 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   32798:	b580      	push	{r7, lr}
   3279a:	b082      	sub	sp, #8
   3279c:	af00      	add	r7, sp, #0
   3279e:	6078      	str	r0, [r7, #4]
   327a0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   327a2:	687b      	ldr	r3, [r7, #4]
   327a4:	681a      	ldr	r2, [r3, #0]
   327a6:	683b      	ldr	r3, [r7, #0]
   327a8:	2b00      	cmp	r3, #0
   327aa:	da00      	bge.n	327ae <writeInt+0x16>
   327ac:	33ff      	adds	r3, #255	; 0xff
   327ae:	121b      	asrs	r3, r3, #8
   327b0:	b2db      	uxtb	r3, r3
   327b2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   327b4:	687b      	ldr	r3, [r7, #4]
   327b6:	681b      	ldr	r3, [r3, #0]
   327b8:	1c5a      	adds	r2, r3, #1
   327ba:	687b      	ldr	r3, [r7, #4]
   327bc:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   327be:	687b      	ldr	r3, [r7, #4]
   327c0:	681a      	ldr	r2, [r3, #0]
   327c2:	683b      	ldr	r3, [r7, #0]
   327c4:	4908      	ldr	r1, [pc, #32]	; (327e8 <writeInt+0x50>)
   327c6:	400b      	ands	r3, r1
   327c8:	d503      	bpl.n	327d2 <writeInt+0x3a>
   327ca:	3b01      	subs	r3, #1
   327cc:	4907      	ldr	r1, [pc, #28]	; (327ec <writeInt+0x54>)
   327ce:	430b      	orrs	r3, r1
   327d0:	3301      	adds	r3, #1
   327d2:	b2db      	uxtb	r3, r3
   327d4:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   327d6:	687b      	ldr	r3, [r7, #4]
   327d8:	681b      	ldr	r3, [r3, #0]
   327da:	1c5a      	adds	r2, r3, #1
   327dc:	687b      	ldr	r3, [r7, #4]
   327de:	601a      	str	r2, [r3, #0]
}
   327e0:	46c0      	nop			; (mov r8, r8)
   327e2:	46bd      	mov	sp, r7
   327e4:	b002      	add	sp, #8
   327e6:	bd80      	pop	{r7, pc}
   327e8:	800000ff 	.word	0x800000ff
   327ec:	ffffff00 	.word	0xffffff00

000327f0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   327f0:	b580      	push	{r7, lr}
   327f2:	b084      	sub	sp, #16
   327f4:	af00      	add	r7, sp, #0
   327f6:	6078      	str	r0, [r7, #4]
   327f8:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   327fa:	683b      	ldr	r3, [r7, #0]
   327fc:	0018      	movs	r0, r3
   327fe:	4b0d      	ldr	r3, [pc, #52]	; (32834 <writeCString+0x44>)
   32800:	4798      	blx	r3
   32802:	0003      	movs	r3, r0
   32804:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   32806:	68fa      	ldr	r2, [r7, #12]
   32808:	687b      	ldr	r3, [r7, #4]
   3280a:	0011      	movs	r1, r2
   3280c:	0018      	movs	r0, r3
   3280e:	4b0a      	ldr	r3, [pc, #40]	; (32838 <writeCString+0x48>)
   32810:	4798      	blx	r3
	memcpy(*pptr, string, len);
   32812:	687b      	ldr	r3, [r7, #4]
   32814:	681b      	ldr	r3, [r3, #0]
   32816:	68fa      	ldr	r2, [r7, #12]
   32818:	6839      	ldr	r1, [r7, #0]
   3281a:	0018      	movs	r0, r3
   3281c:	4b07      	ldr	r3, [pc, #28]	; (3283c <writeCString+0x4c>)
   3281e:	4798      	blx	r3
	*pptr += len;
   32820:	687b      	ldr	r3, [r7, #4]
   32822:	681a      	ldr	r2, [r3, #0]
   32824:	68fb      	ldr	r3, [r7, #12]
   32826:	18d2      	adds	r2, r2, r3
   32828:	687b      	ldr	r3, [r7, #4]
   3282a:	601a      	str	r2, [r3, #0]
}
   3282c:	46c0      	nop			; (mov r8, r8)
   3282e:	46bd      	mov	sp, r7
   32830:	b004      	add	sp, #16
   32832:	bd80      	pop	{r7, pc}
   32834:	00037d23 	.word	0x00037d23
   32838:	00032799 	.word	0x00032799
   3283c:	00037935 	.word	0x00037935

00032840 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   32840:	b580      	push	{r7, lr}
   32842:	b084      	sub	sp, #16
   32844:	af00      	add	r7, sp, #0
   32846:	60f8      	str	r0, [r7, #12]
   32848:	0038      	movs	r0, r7
   3284a:	6001      	str	r1, [r0, #0]
   3284c:	6042      	str	r2, [r0, #4]
   3284e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   32850:	003b      	movs	r3, r7
   32852:	685b      	ldr	r3, [r3, #4]
   32854:	2b00      	cmp	r3, #0
   32856:	dd17      	ble.n	32888 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   32858:	003b      	movs	r3, r7
   3285a:	685a      	ldr	r2, [r3, #4]
   3285c:	68fb      	ldr	r3, [r7, #12]
   3285e:	0011      	movs	r1, r2
   32860:	0018      	movs	r0, r3
   32862:	4b14      	ldr	r3, [pc, #80]	; (328b4 <writeMQTTString+0x74>)
   32864:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   32866:	68fb      	ldr	r3, [r7, #12]
   32868:	6818      	ldr	r0, [r3, #0]
   3286a:	003b      	movs	r3, r7
   3286c:	6899      	ldr	r1, [r3, #8]
   3286e:	003b      	movs	r3, r7
   32870:	685b      	ldr	r3, [r3, #4]
   32872:	001a      	movs	r2, r3
   32874:	4b10      	ldr	r3, [pc, #64]	; (328b8 <writeMQTTString+0x78>)
   32876:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   32878:	68fb      	ldr	r3, [r7, #12]
   3287a:	681a      	ldr	r2, [r3, #0]
   3287c:	003b      	movs	r3, r7
   3287e:	685b      	ldr	r3, [r3, #4]
   32880:	18d2      	adds	r2, r2, r3
   32882:	68fb      	ldr	r3, [r7, #12]
   32884:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   32886:	e010      	b.n	328aa <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   32888:	003b      	movs	r3, r7
   3288a:	681b      	ldr	r3, [r3, #0]
   3288c:	2b00      	cmp	r3, #0
   3288e:	d007      	beq.n	328a0 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   32890:	003b      	movs	r3, r7
   32892:	681a      	ldr	r2, [r3, #0]
   32894:	68fb      	ldr	r3, [r7, #12]
   32896:	0011      	movs	r1, r2
   32898:	0018      	movs	r0, r3
   3289a:	4b08      	ldr	r3, [pc, #32]	; (328bc <writeMQTTString+0x7c>)
   3289c:	4798      	blx	r3
}
   3289e:	e004      	b.n	328aa <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   328a0:	68fb      	ldr	r3, [r7, #12]
   328a2:	2100      	movs	r1, #0
   328a4:	0018      	movs	r0, r3
   328a6:	4b03      	ldr	r3, [pc, #12]	; (328b4 <writeMQTTString+0x74>)
   328a8:	4798      	blx	r3
}
   328aa:	46c0      	nop			; (mov r8, r8)
   328ac:	46bd      	mov	sp, r7
   328ae:	b004      	add	sp, #16
   328b0:	bd80      	pop	{r7, pc}
   328b2:	46c0      	nop			; (mov r8, r8)
   328b4:	00032799 	.word	0x00032799
   328b8:	00037935 	.word	0x00037935
   328bc:	000327f1 	.word	0x000327f1

000328c0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   328c0:	b580      	push	{r7, lr}
   328c2:	b086      	sub	sp, #24
   328c4:	af00      	add	r7, sp, #0
   328c6:	60f8      	str	r0, [r7, #12]
   328c8:	60b9      	str	r1, [r7, #8]
   328ca:	607a      	str	r2, [r7, #4]
	int rc = 0;
   328cc:	2300      	movs	r3, #0
   328ce:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   328d0:	687a      	ldr	r2, [r7, #4]
   328d2:	68bb      	ldr	r3, [r7, #8]
   328d4:	681b      	ldr	r3, [r3, #0]
   328d6:	1ad3      	subs	r3, r2, r3
   328d8:	2b01      	cmp	r3, #1
   328da:	dd1b      	ble.n	32914 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   328dc:	68bb      	ldr	r3, [r7, #8]
   328de:	0018      	movs	r0, r3
   328e0:	4b10      	ldr	r3, [pc, #64]	; (32924 <readMQTTLenString+0x64>)
   328e2:	4798      	blx	r3
   328e4:	0002      	movs	r2, r0
   328e6:	68fb      	ldr	r3, [r7, #12]
   328e8:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   328ea:	68bb      	ldr	r3, [r7, #8]
   328ec:	681a      	ldr	r2, [r3, #0]
   328ee:	68fb      	ldr	r3, [r7, #12]
   328f0:	685b      	ldr	r3, [r3, #4]
   328f2:	18d2      	adds	r2, r2, r3
   328f4:	687b      	ldr	r3, [r7, #4]
   328f6:	429a      	cmp	r2, r3
   328f8:	d80c      	bhi.n	32914 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   328fa:	68bb      	ldr	r3, [r7, #8]
   328fc:	681a      	ldr	r2, [r3, #0]
   328fe:	68fb      	ldr	r3, [r7, #12]
   32900:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   32902:	68bb      	ldr	r3, [r7, #8]
   32904:	681a      	ldr	r2, [r3, #0]
   32906:	68fb      	ldr	r3, [r7, #12]
   32908:	685b      	ldr	r3, [r3, #4]
   3290a:	18d2      	adds	r2, r2, r3
   3290c:	68bb      	ldr	r3, [r7, #8]
   3290e:	601a      	str	r2, [r3, #0]
			rc = 1;
   32910:	2301      	movs	r3, #1
   32912:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   32914:	68fb      	ldr	r3, [r7, #12]
   32916:	2200      	movs	r2, #0
   32918:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   3291a:	697b      	ldr	r3, [r7, #20]
}
   3291c:	0018      	movs	r0, r3
   3291e:	46bd      	mov	sp, r7
   32920:	b006      	add	sp, #24
   32922:	bd80      	pop	{r7, pc}
   32924:	00032711 	.word	0x00032711

00032928 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   32928:	b580      	push	{r7, lr}
   3292a:	b086      	sub	sp, #24
   3292c:	af00      	add	r7, sp, #0
   3292e:	1d3b      	adds	r3, r7, #4
   32930:	6018      	str	r0, [r3, #0]
   32932:	6059      	str	r1, [r3, #4]
   32934:	609a      	str	r2, [r3, #8]
	int rc = 0;
   32936:	2300      	movs	r3, #0
   32938:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   3293a:	1d3b      	adds	r3, r7, #4
   3293c:	681b      	ldr	r3, [r3, #0]
   3293e:	2b00      	cmp	r3, #0
   32940:	d007      	beq.n	32952 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   32942:	1d3b      	adds	r3, r7, #4
   32944:	681b      	ldr	r3, [r3, #0]
   32946:	0018      	movs	r0, r3
   32948:	4b06      	ldr	r3, [pc, #24]	; (32964 <MQTTstrlen+0x3c>)
   3294a:	4798      	blx	r3
   3294c:	0003      	movs	r3, r0
   3294e:	617b      	str	r3, [r7, #20]
   32950:	e002      	b.n	32958 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   32952:	1d3b      	adds	r3, r7, #4
   32954:	685b      	ldr	r3, [r3, #4]
   32956:	617b      	str	r3, [r7, #20]
	return rc;
   32958:	697b      	ldr	r3, [r7, #20]
}
   3295a:	0018      	movs	r0, r3
   3295c:	46bd      	mov	sp, r7
   3295e:	b006      	add	sp, #24
   32960:	bd80      	pop	{r7, pc}
   32962:	46c0      	nop			; (mov r8, r8)
   32964:	00037d23 	.word	0x00037d23

00032968 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   32968:	b580      	push	{r7, lr}
   3296a:	b086      	sub	sp, #24
   3296c:	af00      	add	r7, sp, #0
   3296e:	6078      	str	r0, [r7, #4]
   32970:	6039      	str	r1, [r7, #0]
	int alen = 0,
   32972:	2300      	movs	r3, #0
   32974:	617b      	str	r3, [r7, #20]
		blen = 0;
   32976:	2300      	movs	r3, #0
   32978:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3297a:	687b      	ldr	r3, [r7, #4]
   3297c:	681b      	ldr	r3, [r3, #0]
   3297e:	2b00      	cmp	r3, #0
   32980:	d00a      	beq.n	32998 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   32982:	687b      	ldr	r3, [r7, #4]
   32984:	681b      	ldr	r3, [r3, #0]
   32986:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   32988:	687b      	ldr	r3, [r7, #4]
   3298a:	681b      	ldr	r3, [r3, #0]
   3298c:	0018      	movs	r0, r3
   3298e:	4b12      	ldr	r3, [pc, #72]	; (329d8 <MQTTPacket_equals+0x70>)
   32990:	4798      	blx	r3
   32992:	0003      	movs	r3, r0
   32994:	617b      	str	r3, [r7, #20]
   32996:	e005      	b.n	329a4 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   32998:	687b      	ldr	r3, [r7, #4]
   3299a:	689b      	ldr	r3, [r3, #8]
   3299c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   3299e:	687b      	ldr	r3, [r7, #4]
   329a0:	685b      	ldr	r3, [r3, #4]
   329a2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   329a4:	683b      	ldr	r3, [r7, #0]
   329a6:	0018      	movs	r0, r3
   329a8:	4b0b      	ldr	r3, [pc, #44]	; (329d8 <MQTTPacket_equals+0x70>)
   329aa:	4798      	blx	r3
   329ac:	0003      	movs	r3, r0
   329ae:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   329b0:	697a      	ldr	r2, [r7, #20]
   329b2:	68fb      	ldr	r3, [r7, #12]
   329b4:	429a      	cmp	r2, r3
   329b6:	d109      	bne.n	329cc <MQTTPacket_equals+0x64>
   329b8:	697a      	ldr	r2, [r7, #20]
   329ba:	6839      	ldr	r1, [r7, #0]
   329bc:	693b      	ldr	r3, [r7, #16]
   329be:	0018      	movs	r0, r3
   329c0:	4b06      	ldr	r3, [pc, #24]	; (329dc <MQTTPacket_equals+0x74>)
   329c2:	4798      	blx	r3
   329c4:	1e03      	subs	r3, r0, #0
   329c6:	d101      	bne.n	329cc <MQTTPacket_equals+0x64>
   329c8:	2301      	movs	r3, #1
   329ca:	e000      	b.n	329ce <MQTTPacket_equals+0x66>
   329cc:	2300      	movs	r3, #0
}
   329ce:	0018      	movs	r0, r3
   329d0:	46bd      	mov	sp, r7
   329d2:	b006      	add	sp, #24
   329d4:	bd80      	pop	{r7, pc}
   329d6:	46c0      	nop			; (mov r8, r8)
   329d8:	00037d23 	.word	0x00037d23
   329dc:	00037d31 	.word	0x00037d31

000329e0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   329e0:	b580      	push	{r7, lr}
   329e2:	b086      	sub	sp, #24
   329e4:	af00      	add	r7, sp, #0
   329e6:	60f8      	str	r0, [r7, #12]
   329e8:	0038      	movs	r0, r7
   329ea:	6001      	str	r1, [r0, #0]
   329ec:	6042      	str	r2, [r0, #4]
   329ee:	6083      	str	r3, [r0, #8]
	int len = 0;
   329f0:	2300      	movs	r3, #0
   329f2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   329f4:	003b      	movs	r3, r7
   329f6:	6818      	ldr	r0, [r3, #0]
   329f8:	6859      	ldr	r1, [r3, #4]
   329fa:	689a      	ldr	r2, [r3, #8]
   329fc:	4b09      	ldr	r3, [pc, #36]	; (32a24 <MQTTSerialize_publishLength+0x44>)
   329fe:	4798      	blx	r3
   32a00:	0003      	movs	r3, r0
   32a02:	1c9a      	adds	r2, r3, #2
   32a04:	6a3b      	ldr	r3, [r7, #32]
   32a06:	18d3      	adds	r3, r2, r3
   32a08:	697a      	ldr	r2, [r7, #20]
   32a0a:	18d3      	adds	r3, r2, r3
   32a0c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   32a0e:	68fb      	ldr	r3, [r7, #12]
   32a10:	2b00      	cmp	r3, #0
   32a12:	dd02      	ble.n	32a1a <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   32a14:	697b      	ldr	r3, [r7, #20]
   32a16:	3302      	adds	r3, #2
   32a18:	617b      	str	r3, [r7, #20]
	return len;
   32a1a:	697b      	ldr	r3, [r7, #20]
}
   32a1c:	0018      	movs	r0, r3
   32a1e:	46bd      	mov	sp, r7
   32a20:	b006      	add	sp, #24
   32a22:	bd80      	pop	{r7, pc}
   32a24:	00032929 	.word	0x00032929

00032a28 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   32a28:	b590      	push	{r4, r7, lr}
   32a2a:	b08b      	sub	sp, #44	; 0x2c
   32a2c:	af02      	add	r7, sp, #8
   32a2e:	60f8      	str	r0, [r7, #12]
   32a30:	60b9      	str	r1, [r7, #8]
   32a32:	603b      	str	r3, [r7, #0]
   32a34:	1dfb      	adds	r3, r7, #7
   32a36:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   32a38:	68fb      	ldr	r3, [r7, #12]
   32a3a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   32a3c:	2300      	movs	r3, #0
   32a3e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   32a40:	2300      	movs	r3, #0
   32a42:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   32a44:	2300      	movs	r3, #0
   32a46:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   32a48:	2308      	movs	r3, #8
   32a4a:	2230      	movs	r2, #48	; 0x30
   32a4c:	4694      	mov	ip, r2
   32a4e:	44bc      	add	ip, r7
   32a50:	4463      	add	r3, ip
   32a52:	6838      	ldr	r0, [r7, #0]
   32a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
   32a56:	9200      	str	r2, [sp, #0]
   32a58:	6819      	ldr	r1, [r3, #0]
   32a5a:	685a      	ldr	r2, [r3, #4]
   32a5c:	689b      	ldr	r3, [r3, #8]
   32a5e:	4c46      	ldr	r4, [pc, #280]	; (32b78 <MQTTSerialize_publish+0x150>)
   32a60:	47a0      	blx	r4
   32a62:	0003      	movs	r3, r0
   32a64:	61bb      	str	r3, [r7, #24]
   32a66:	69bb      	ldr	r3, [r7, #24]
   32a68:	0018      	movs	r0, r3
   32a6a:	4b44      	ldr	r3, [pc, #272]	; (32b7c <MQTTSerialize_publish+0x154>)
   32a6c:	4798      	blx	r3
   32a6e:	0002      	movs	r2, r0
   32a70:	68bb      	ldr	r3, [r7, #8]
   32a72:	429a      	cmp	r2, r3
   32a74:	dd03      	ble.n	32a7e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32a76:	2302      	movs	r3, #2
   32a78:	425b      	negs	r3, r3
   32a7a:	61fb      	str	r3, [r7, #28]
		goto exit;
   32a7c:	e077      	b.n	32b6e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   32a7e:	2310      	movs	r3, #16
   32a80:	18fb      	adds	r3, r7, r3
   32a82:	781a      	ldrb	r2, [r3, #0]
   32a84:	210f      	movs	r1, #15
   32a86:	400a      	ands	r2, r1
   32a88:	1c11      	adds	r1, r2, #0
   32a8a:	2230      	movs	r2, #48	; 0x30
   32a8c:	430a      	orrs	r2, r1
   32a8e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32a90:	1dfb      	adds	r3, r7, #7
   32a92:	781b      	ldrb	r3, [r3, #0]
   32a94:	2201      	movs	r2, #1
   32a96:	4013      	ands	r3, r2
   32a98:	b2da      	uxtb	r2, r3
   32a9a:	2310      	movs	r3, #16
   32a9c:	18fb      	adds	r3, r7, r3
   32a9e:	2101      	movs	r1, #1
   32aa0:	400a      	ands	r2, r1
   32aa2:	00d0      	lsls	r0, r2, #3
   32aa4:	781a      	ldrb	r2, [r3, #0]
   32aa6:	2108      	movs	r1, #8
   32aa8:	438a      	bics	r2, r1
   32aaa:	1c11      	adds	r1, r2, #0
   32aac:	1c02      	adds	r2, r0, #0
   32aae:	430a      	orrs	r2, r1
   32ab0:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   32ab2:	683b      	ldr	r3, [r7, #0]
   32ab4:	b2db      	uxtb	r3, r3
   32ab6:	1c1a      	adds	r2, r3, #0
   32ab8:	2303      	movs	r3, #3
   32aba:	4013      	ands	r3, r2
   32abc:	b2da      	uxtb	r2, r3
   32abe:	2310      	movs	r3, #16
   32ac0:	18fb      	adds	r3, r7, r3
   32ac2:	2103      	movs	r1, #3
   32ac4:	400a      	ands	r2, r1
   32ac6:	1890      	adds	r0, r2, r2
   32ac8:	781a      	ldrb	r2, [r3, #0]
   32aca:	2106      	movs	r1, #6
   32acc:	438a      	bics	r2, r1
   32ace:	1c11      	adds	r1, r2, #0
   32ad0:	1c02      	adds	r2, r0, #0
   32ad2:	430a      	orrs	r2, r1
   32ad4:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   32ad6:	2330      	movs	r3, #48	; 0x30
   32ad8:	18fb      	adds	r3, r7, r3
   32ada:	781b      	ldrb	r3, [r3, #0]
   32adc:	2201      	movs	r2, #1
   32ade:	4013      	ands	r3, r2
   32ae0:	b2da      	uxtb	r2, r3
   32ae2:	2310      	movs	r3, #16
   32ae4:	18fb      	adds	r3, r7, r3
   32ae6:	2101      	movs	r1, #1
   32ae8:	400a      	ands	r2, r1
   32aea:	0010      	movs	r0, r2
   32aec:	781a      	ldrb	r2, [r3, #0]
   32aee:	2101      	movs	r1, #1
   32af0:	438a      	bics	r2, r1
   32af2:	1c11      	adds	r1, r2, #0
   32af4:	1c02      	adds	r2, r0, #0
   32af6:	430a      	orrs	r2, r1
   32af8:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32afa:	2310      	movs	r3, #16
   32afc:	18fb      	adds	r3, r7, r3
   32afe:	781a      	ldrb	r2, [r3, #0]
   32b00:	2314      	movs	r3, #20
   32b02:	18fb      	adds	r3, r7, r3
   32b04:	0011      	movs	r1, r2
   32b06:	0018      	movs	r0, r3
   32b08:	4b1d      	ldr	r3, [pc, #116]	; (32b80 <MQTTSerialize_publish+0x158>)
   32b0a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   32b0c:	697b      	ldr	r3, [r7, #20]
   32b0e:	69ba      	ldr	r2, [r7, #24]
   32b10:	0011      	movs	r1, r2
   32b12:	0018      	movs	r0, r3
   32b14:	4b1b      	ldr	r3, [pc, #108]	; (32b84 <MQTTSerialize_publish+0x15c>)
   32b16:	4798      	blx	r3
   32b18:	0002      	movs	r2, r0
   32b1a:	697b      	ldr	r3, [r7, #20]
   32b1c:	189b      	adds	r3, r3, r2
   32b1e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   32b20:	2308      	movs	r3, #8
   32b22:	2230      	movs	r2, #48	; 0x30
   32b24:	4694      	mov	ip, r2
   32b26:	44bc      	add	ip, r7
   32b28:	4463      	add	r3, ip
   32b2a:	2214      	movs	r2, #20
   32b2c:	18b8      	adds	r0, r7, r2
   32b2e:	6819      	ldr	r1, [r3, #0]
   32b30:	685a      	ldr	r2, [r3, #4]
   32b32:	689b      	ldr	r3, [r3, #8]
   32b34:	4c14      	ldr	r4, [pc, #80]	; (32b88 <MQTTSerialize_publish+0x160>)
   32b36:	47a0      	blx	r4

	if (qos > 0)
   32b38:	683b      	ldr	r3, [r7, #0]
   32b3a:	2b00      	cmp	r3, #0
   32b3c:	dd08      	ble.n	32b50 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   32b3e:	2334      	movs	r3, #52	; 0x34
   32b40:	18fb      	adds	r3, r7, r3
   32b42:	881a      	ldrh	r2, [r3, #0]
   32b44:	2314      	movs	r3, #20
   32b46:	18fb      	adds	r3, r7, r3
   32b48:	0011      	movs	r1, r2
   32b4a:	0018      	movs	r0, r3
   32b4c:	4b0f      	ldr	r3, [pc, #60]	; (32b8c <MQTTSerialize_publish+0x164>)
   32b4e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   32b50:	697b      	ldr	r3, [r7, #20]
   32b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
   32b54:	6c79      	ldr	r1, [r7, #68]	; 0x44
   32b56:	0018      	movs	r0, r3
   32b58:	4b0d      	ldr	r3, [pc, #52]	; (32b90 <MQTTSerialize_publish+0x168>)
   32b5a:	4798      	blx	r3
	ptr += payloadlen;
   32b5c:	697a      	ldr	r2, [r7, #20]
   32b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32b60:	18d3      	adds	r3, r2, r3
   32b62:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   32b64:	697b      	ldr	r3, [r7, #20]
   32b66:	001a      	movs	r2, r3
   32b68:	68fb      	ldr	r3, [r7, #12]
   32b6a:	1ad3      	subs	r3, r2, r3
   32b6c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32b6e:	69fb      	ldr	r3, [r7, #28]
}
   32b70:	0018      	movs	r0, r3
   32b72:	46bd      	mov	sp, r7
   32b74:	b009      	add	sp, #36	; 0x24
   32b76:	bd90      	pop	{r4, r7, pc}
   32b78:	000329e1 	.word	0x000329e1
   32b7c:	0003264d 	.word	0x0003264d
   32b80:	0003276f 	.word	0x0003276f
   32b84:	00032555 	.word	0x00032555
   32b88:	00032841 	.word	0x00032841
   32b8c:	00032799 	.word	0x00032799
   32b90:	00037935 	.word	0x00037935

00032b94 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   32b94:	b580      	push	{r7, lr}
   32b96:	b088      	sub	sp, #32
   32b98:	af00      	add	r7, sp, #0
   32b9a:	60f8      	str	r0, [r7, #12]
   32b9c:	60b9      	str	r1, [r7, #8]
   32b9e:	0019      	movs	r1, r3
   32ba0:	1dfb      	adds	r3, r7, #7
   32ba2:	701a      	strb	r2, [r3, #0]
   32ba4:	1dbb      	adds	r3, r7, #6
   32ba6:	1c0a      	adds	r2, r1, #0
   32ba8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   32baa:	2300      	movs	r3, #0
   32bac:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   32bae:	2300      	movs	r3, #0
   32bb0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   32bb2:	68fb      	ldr	r3, [r7, #12]
   32bb4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   32bb6:	68bb      	ldr	r3, [r7, #8]
   32bb8:	2b03      	cmp	r3, #3
   32bba:	dc03      	bgt.n	32bc4 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32bbc:	2302      	movs	r3, #2
   32bbe:	425b      	negs	r3, r3
   32bc0:	61fb      	str	r3, [r7, #28]
		goto exit;
   32bc2:	e055      	b.n	32c70 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   32bc4:	1dfb      	adds	r3, r7, #7
   32bc6:	781b      	ldrb	r3, [r3, #0]
   32bc8:	220f      	movs	r2, #15
   32bca:	4013      	ands	r3, r2
   32bcc:	b2da      	uxtb	r2, r3
   32bce:	2318      	movs	r3, #24
   32bd0:	18fb      	adds	r3, r7, r3
   32bd2:	0110      	lsls	r0, r2, #4
   32bd4:	781a      	ldrb	r2, [r3, #0]
   32bd6:	210f      	movs	r1, #15
   32bd8:	400a      	ands	r2, r1
   32bda:	1c11      	adds	r1, r2, #0
   32bdc:	1c02      	adds	r2, r0, #0
   32bde:	430a      	orrs	r2, r1
   32be0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32be2:	1dbb      	adds	r3, r7, #6
   32be4:	781b      	ldrb	r3, [r3, #0]
   32be6:	2201      	movs	r2, #1
   32be8:	4013      	ands	r3, r2
   32bea:	b2da      	uxtb	r2, r3
   32bec:	2318      	movs	r3, #24
   32bee:	18fb      	adds	r3, r7, r3
   32bf0:	2101      	movs	r1, #1
   32bf2:	400a      	ands	r2, r1
   32bf4:	00d0      	lsls	r0, r2, #3
   32bf6:	781a      	ldrb	r2, [r3, #0]
   32bf8:	2108      	movs	r1, #8
   32bfa:	438a      	bics	r2, r1
   32bfc:	1c11      	adds	r1, r2, #0
   32bfe:	1c02      	adds	r2, r0, #0
   32c00:	430a      	orrs	r2, r1
   32c02:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   32c04:	1dfb      	adds	r3, r7, #7
   32c06:	781b      	ldrb	r3, [r3, #0]
   32c08:	3b06      	subs	r3, #6
   32c0a:	425a      	negs	r2, r3
   32c0c:	4153      	adcs	r3, r2
   32c0e:	b2db      	uxtb	r3, r3
   32c10:	1c1a      	adds	r2, r3, #0
   32c12:	2303      	movs	r3, #3
   32c14:	4013      	ands	r3, r2
   32c16:	b2da      	uxtb	r2, r3
   32c18:	2318      	movs	r3, #24
   32c1a:	18fb      	adds	r3, r7, r3
   32c1c:	2103      	movs	r1, #3
   32c1e:	400a      	ands	r2, r1
   32c20:	1890      	adds	r0, r2, r2
   32c22:	781a      	ldrb	r2, [r3, #0]
   32c24:	2106      	movs	r1, #6
   32c26:	438a      	bics	r2, r1
   32c28:	1c11      	adds	r1, r2, #0
   32c2a:	1c02      	adds	r2, r0, #0
   32c2c:	430a      	orrs	r2, r1
   32c2e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32c30:	2318      	movs	r3, #24
   32c32:	18fb      	adds	r3, r7, r3
   32c34:	781a      	ldrb	r2, [r3, #0]
   32c36:	2314      	movs	r3, #20
   32c38:	18fb      	adds	r3, r7, r3
   32c3a:	0011      	movs	r1, r2
   32c3c:	0018      	movs	r0, r3
   32c3e:	4b0f      	ldr	r3, [pc, #60]	; (32c7c <MQTTSerialize_ack+0xe8>)
   32c40:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   32c42:	697b      	ldr	r3, [r7, #20]
   32c44:	2102      	movs	r1, #2
   32c46:	0018      	movs	r0, r3
   32c48:	4b0d      	ldr	r3, [pc, #52]	; (32c80 <MQTTSerialize_ack+0xec>)
   32c4a:	4798      	blx	r3
   32c4c:	0002      	movs	r2, r0
   32c4e:	697b      	ldr	r3, [r7, #20]
   32c50:	189b      	adds	r3, r3, r2
   32c52:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   32c54:	2328      	movs	r3, #40	; 0x28
   32c56:	18fb      	adds	r3, r7, r3
   32c58:	881a      	ldrh	r2, [r3, #0]
   32c5a:	2314      	movs	r3, #20
   32c5c:	18fb      	adds	r3, r7, r3
   32c5e:	0011      	movs	r1, r2
   32c60:	0018      	movs	r0, r3
   32c62:	4b08      	ldr	r3, [pc, #32]	; (32c84 <MQTTSerialize_ack+0xf0>)
   32c64:	4798      	blx	r3
	rc = ptr - buf;
   32c66:	697b      	ldr	r3, [r7, #20]
   32c68:	001a      	movs	r2, r3
   32c6a:	68fb      	ldr	r3, [r7, #12]
   32c6c:	1ad3      	subs	r3, r2, r3
   32c6e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32c70:	69fb      	ldr	r3, [r7, #28]
}
   32c72:	0018      	movs	r0, r3
   32c74:	46bd      	mov	sp, r7
   32c76:	b008      	add	sp, #32
   32c78:	bd80      	pop	{r7, pc}
   32c7a:	46c0      	nop			; (mov r8, r8)
   32c7c:	0003276f 	.word	0x0003276f
   32c80:	00032555 	.word	0x00032555
   32c84:	00032799 	.word	0x00032799

00032c88 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   32c88:	b580      	push	{r7, lr}
   32c8a:	b084      	sub	sp, #16
   32c8c:	af00      	add	r7, sp, #0
   32c8e:	6078      	str	r0, [r7, #4]
   32c90:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   32c92:	2302      	movs	r3, #2
   32c94:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   32c96:	2300      	movs	r3, #0
   32c98:	60fb      	str	r3, [r7, #12]
   32c9a:	e014      	b.n	32cc6 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   32c9c:	68fa      	ldr	r2, [r7, #12]
   32c9e:	0013      	movs	r3, r2
   32ca0:	005b      	lsls	r3, r3, #1
   32ca2:	189b      	adds	r3, r3, r2
   32ca4:	009b      	lsls	r3, r3, #2
   32ca6:	001a      	movs	r2, r3
   32ca8:	683b      	ldr	r3, [r7, #0]
   32caa:	189b      	adds	r3, r3, r2
   32cac:	6818      	ldr	r0, [r3, #0]
   32cae:	6859      	ldr	r1, [r3, #4]
   32cb0:	689a      	ldr	r2, [r3, #8]
   32cb2:	4b09      	ldr	r3, [pc, #36]	; (32cd8 <MQTTSerialize_subscribeLength+0x50>)
   32cb4:	4798      	blx	r3
   32cb6:	0003      	movs	r3, r0
   32cb8:	3303      	adds	r3, #3
   32cba:	68ba      	ldr	r2, [r7, #8]
   32cbc:	18d3      	adds	r3, r2, r3
   32cbe:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   32cc0:	68fb      	ldr	r3, [r7, #12]
   32cc2:	3301      	adds	r3, #1
   32cc4:	60fb      	str	r3, [r7, #12]
   32cc6:	68fa      	ldr	r2, [r7, #12]
   32cc8:	687b      	ldr	r3, [r7, #4]
   32cca:	429a      	cmp	r2, r3
   32ccc:	dbe6      	blt.n	32c9c <MQTTSerialize_subscribeLength+0x14>
	return len;
   32cce:	68bb      	ldr	r3, [r7, #8]
}
   32cd0:	0018      	movs	r0, r3
   32cd2:	46bd      	mov	sp, r7
   32cd4:	b004      	add	sp, #16
   32cd6:	bd80      	pop	{r7, pc}
   32cd8:	00032929 	.word	0x00032929

00032cdc <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   32cdc:	b590      	push	{r4, r7, lr}
   32cde:	b08b      	sub	sp, #44	; 0x2c
   32ce0:	af00      	add	r7, sp, #0
   32ce2:	60f8      	str	r0, [r7, #12]
   32ce4:	60b9      	str	r1, [r7, #8]
   32ce6:	0019      	movs	r1, r3
   32ce8:	1dfb      	adds	r3, r7, #7
   32cea:	701a      	strb	r2, [r3, #0]
   32cec:	1d3b      	adds	r3, r7, #4
   32cee:	1c0a      	adds	r2, r1, #0
   32cf0:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   32cf2:	68fb      	ldr	r3, [r7, #12]
   32cf4:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   32cf6:	2300      	movs	r3, #0
   32cf8:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   32cfa:	2300      	movs	r3, #0
   32cfc:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   32cfe:	2300      	movs	r3, #0
   32d00:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   32d02:	2300      	movs	r3, #0
   32d04:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   32d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   32d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32d0a:	0011      	movs	r1, r2
   32d0c:	0018      	movs	r0, r3
   32d0e:	4b41      	ldr	r3, [pc, #260]	; (32e14 <MQTTSerialize_subscribe+0x138>)
   32d10:	4798      	blx	r3
   32d12:	0003      	movs	r3, r0
   32d14:	61fb      	str	r3, [r7, #28]
   32d16:	69fb      	ldr	r3, [r7, #28]
   32d18:	0018      	movs	r0, r3
   32d1a:	4b3f      	ldr	r3, [pc, #252]	; (32e18 <MQTTSerialize_subscribe+0x13c>)
   32d1c:	4798      	blx	r3
   32d1e:	0002      	movs	r2, r0
   32d20:	68bb      	ldr	r3, [r7, #8]
   32d22:	429a      	cmp	r2, r3
   32d24:	dd03      	ble.n	32d2e <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32d26:	2302      	movs	r3, #2
   32d28:	425b      	negs	r3, r3
   32d2a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   32d2c:	e06c      	b.n	32e08 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   32d2e:	2314      	movs	r3, #20
   32d30:	18fb      	adds	r3, r7, r3
   32d32:	2200      	movs	r2, #0
   32d34:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   32d36:	2314      	movs	r3, #20
   32d38:	18fb      	adds	r3, r7, r3
   32d3a:	781a      	ldrb	r2, [r3, #0]
   32d3c:	210f      	movs	r1, #15
   32d3e:	400a      	ands	r2, r1
   32d40:	1c11      	adds	r1, r2, #0
   32d42:	2280      	movs	r2, #128	; 0x80
   32d44:	4252      	negs	r2, r2
   32d46:	430a      	orrs	r2, r1
   32d48:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32d4a:	1dfb      	adds	r3, r7, #7
   32d4c:	781b      	ldrb	r3, [r3, #0]
   32d4e:	2201      	movs	r2, #1
   32d50:	4013      	ands	r3, r2
   32d52:	b2da      	uxtb	r2, r3
   32d54:	2314      	movs	r3, #20
   32d56:	18fb      	adds	r3, r7, r3
   32d58:	2101      	movs	r1, #1
   32d5a:	400a      	ands	r2, r1
   32d5c:	00d0      	lsls	r0, r2, #3
   32d5e:	781a      	ldrb	r2, [r3, #0]
   32d60:	2108      	movs	r1, #8
   32d62:	438a      	bics	r2, r1
   32d64:	1c11      	adds	r1, r2, #0
   32d66:	1c02      	adds	r2, r0, #0
   32d68:	430a      	orrs	r2, r1
   32d6a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   32d6c:	2314      	movs	r3, #20
   32d6e:	18fb      	adds	r3, r7, r3
   32d70:	781a      	ldrb	r2, [r3, #0]
   32d72:	2106      	movs	r1, #6
   32d74:	438a      	bics	r2, r1
   32d76:	1c11      	adds	r1, r2, #0
   32d78:	2202      	movs	r2, #2
   32d7a:	430a      	orrs	r2, r1
   32d7c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32d7e:	2314      	movs	r3, #20
   32d80:	18fb      	adds	r3, r7, r3
   32d82:	781a      	ldrb	r2, [r3, #0]
   32d84:	2318      	movs	r3, #24
   32d86:	18fb      	adds	r3, r7, r3
   32d88:	0011      	movs	r1, r2
   32d8a:	0018      	movs	r0, r3
   32d8c:	4b23      	ldr	r3, [pc, #140]	; (32e1c <MQTTSerialize_subscribe+0x140>)
   32d8e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   32d90:	69bb      	ldr	r3, [r7, #24]
   32d92:	69fa      	ldr	r2, [r7, #28]
   32d94:	0011      	movs	r1, r2
   32d96:	0018      	movs	r0, r3
   32d98:	4b21      	ldr	r3, [pc, #132]	; (32e20 <MQTTSerialize_subscribe+0x144>)
   32d9a:	4798      	blx	r3
   32d9c:	0002      	movs	r2, r0
   32d9e:	69bb      	ldr	r3, [r7, #24]
   32da0:	189b      	adds	r3, r3, r2
   32da2:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   32da4:	1d3b      	adds	r3, r7, #4
   32da6:	881a      	ldrh	r2, [r3, #0]
   32da8:	2318      	movs	r3, #24
   32daa:	18fb      	adds	r3, r7, r3
   32dac:	0011      	movs	r1, r2
   32dae:	0018      	movs	r0, r3
   32db0:	4b1c      	ldr	r3, [pc, #112]	; (32e24 <MQTTSerialize_subscribe+0x148>)
   32db2:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   32db4:	2300      	movs	r3, #0
   32db6:	623b      	str	r3, [r7, #32]
   32db8:	e01d      	b.n	32df6 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   32dba:	6a3a      	ldr	r2, [r7, #32]
   32dbc:	0013      	movs	r3, r2
   32dbe:	005b      	lsls	r3, r3, #1
   32dc0:	189b      	adds	r3, r3, r2
   32dc2:	009b      	lsls	r3, r3, #2
   32dc4:	001a      	movs	r2, r3
   32dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32dc8:	189b      	adds	r3, r3, r2
   32dca:	2218      	movs	r2, #24
   32dcc:	18b8      	adds	r0, r7, r2
   32dce:	6819      	ldr	r1, [r3, #0]
   32dd0:	685a      	ldr	r2, [r3, #4]
   32dd2:	689b      	ldr	r3, [r3, #8]
   32dd4:	4c14      	ldr	r4, [pc, #80]	; (32e28 <MQTTSerialize_subscribe+0x14c>)
   32dd6:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   32dd8:	6a3b      	ldr	r3, [r7, #32]
   32dda:	009b      	lsls	r3, r3, #2
   32ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   32dde:	18d3      	adds	r3, r2, r3
   32de0:	681b      	ldr	r3, [r3, #0]
   32de2:	b2da      	uxtb	r2, r3
   32de4:	2318      	movs	r3, #24
   32de6:	18fb      	adds	r3, r7, r3
   32de8:	0011      	movs	r1, r2
   32dea:	0018      	movs	r0, r3
   32dec:	4b0b      	ldr	r3, [pc, #44]	; (32e1c <MQTTSerialize_subscribe+0x140>)
   32dee:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   32df0:	6a3b      	ldr	r3, [r7, #32]
   32df2:	3301      	adds	r3, #1
   32df4:	623b      	str	r3, [r7, #32]
   32df6:	6a3a      	ldr	r2, [r7, #32]
   32df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32dfa:	429a      	cmp	r2, r3
   32dfc:	dbdd      	blt.n	32dba <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   32dfe:	69bb      	ldr	r3, [r7, #24]
   32e00:	001a      	movs	r2, r3
   32e02:	68fb      	ldr	r3, [r7, #12]
   32e04:	1ad3      	subs	r3, r2, r3
   32e06:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32e0a:	0018      	movs	r0, r3
   32e0c:	46bd      	mov	sp, r7
   32e0e:	b00b      	add	sp, #44	; 0x2c
   32e10:	bd90      	pop	{r4, r7, pc}
   32e12:	46c0      	nop			; (mov r8, r8)
   32e14:	00032c89 	.word	0x00032c89
   32e18:	0003264d 	.word	0x0003264d
   32e1c:	0003276f 	.word	0x0003276f
   32e20:	00032555 	.word	0x00032555
   32e24:	00032799 	.word	0x00032799
   32e28:	00032841 	.word	0x00032841

00032e2c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   32e2c:	b590      	push	{r4, r7, lr}
   32e2e:	b08b      	sub	sp, #44	; 0x2c
   32e30:	af00      	add	r7, sp, #0
   32e32:	60f8      	str	r0, [r7, #12]
   32e34:	60b9      	str	r1, [r7, #8]
   32e36:	607a      	str	r2, [r7, #4]
   32e38:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   32e3a:	2300      	movs	r3, #0
   32e3c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32e40:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32e42:	2300      	movs	r3, #0
   32e44:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32e46:	2300      	movs	r3, #0
   32e48:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   32e4a:	2318      	movs	r3, #24
   32e4c:	18fb      	adds	r3, r7, r3
   32e4e:	0018      	movs	r0, r3
   32e50:	4b2c      	ldr	r3, [pc, #176]	; (32f04 <MQTTDeserialize_suback+0xd8>)
   32e52:	4798      	blx	r3
   32e54:	0003      	movs	r3, r0
   32e56:	001a      	movs	r2, r3
   32e58:	231c      	movs	r3, #28
   32e5a:	18fb      	adds	r3, r7, r3
   32e5c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   32e5e:	231c      	movs	r3, #28
   32e60:	18fb      	adds	r3, r7, r3
   32e62:	781b      	ldrb	r3, [r3, #0]
   32e64:	220f      	movs	r2, #15
   32e66:	4393      	bics	r3, r2
   32e68:	b2db      	uxtb	r3, r3
   32e6a:	2b90      	cmp	r3, #144	; 0x90
   32e6c:	d142      	bne.n	32ef4 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32e6e:	69bb      	ldr	r3, [r7, #24]
   32e70:	2214      	movs	r2, #20
   32e72:	18ba      	adds	r2, r7, r2
   32e74:	0011      	movs	r1, r2
   32e76:	0018      	movs	r0, r3
   32e78:	4b23      	ldr	r3, [pc, #140]	; (32f08 <MQTTDeserialize_suback+0xdc>)
   32e7a:	4798      	blx	r3
   32e7c:	0003      	movs	r3, r0
   32e7e:	627b      	str	r3, [r7, #36]	; 0x24
   32e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32e82:	69bb      	ldr	r3, [r7, #24]
   32e84:	189b      	adds	r3, r3, r2
   32e86:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32e88:	69bb      	ldr	r3, [r7, #24]
   32e8a:	697a      	ldr	r2, [r7, #20]
   32e8c:	189b      	adds	r3, r3, r2
   32e8e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32e90:	6a3b      	ldr	r3, [r7, #32]
   32e92:	69ba      	ldr	r2, [r7, #24]
   32e94:	1a9b      	subs	r3, r3, r2
   32e96:	2b01      	cmp	r3, #1
   32e98:	dd2e      	ble.n	32ef8 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   32e9a:	2318      	movs	r3, #24
   32e9c:	18fb      	adds	r3, r7, r3
   32e9e:	0018      	movs	r0, r3
   32ea0:	4b1a      	ldr	r3, [pc, #104]	; (32f0c <MQTTDeserialize_suback+0xe0>)
   32ea2:	4798      	blx	r3
   32ea4:	0003      	movs	r3, r0
   32ea6:	b29a      	uxth	r2, r3
   32ea8:	68fb      	ldr	r3, [r7, #12]
   32eaa:	801a      	strh	r2, [r3, #0]

	*count = 0;
   32eac:	687b      	ldr	r3, [r7, #4]
   32eae:	2200      	movs	r2, #0
   32eb0:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   32eb2:	e018      	b.n	32ee6 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   32eb4:	687b      	ldr	r3, [r7, #4]
   32eb6:	681a      	ldr	r2, [r3, #0]
   32eb8:	68bb      	ldr	r3, [r7, #8]
   32eba:	429a      	cmp	r2, r3
   32ebc:	dd03      	ble.n	32ec6 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   32ebe:	2301      	movs	r3, #1
   32ec0:	425b      	negs	r3, r3
   32ec2:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   32ec4:	e019      	b.n	32efa <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   32ec6:	687b      	ldr	r3, [r7, #4]
   32ec8:	681a      	ldr	r2, [r3, #0]
   32eca:	1c51      	adds	r1, r2, #1
   32ecc:	687b      	ldr	r3, [r7, #4]
   32ece:	6019      	str	r1, [r3, #0]
   32ed0:	0013      	movs	r3, r2
   32ed2:	009b      	lsls	r3, r3, #2
   32ed4:	683a      	ldr	r2, [r7, #0]
   32ed6:	18d4      	adds	r4, r2, r3
   32ed8:	2318      	movs	r3, #24
   32eda:	18fb      	adds	r3, r7, r3
   32edc:	0018      	movs	r0, r3
   32ede:	4b09      	ldr	r3, [pc, #36]	; (32f04 <MQTTDeserialize_suback+0xd8>)
   32ee0:	4798      	blx	r3
   32ee2:	0003      	movs	r3, r0
   32ee4:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   32ee6:	69ba      	ldr	r2, [r7, #24]
   32ee8:	6a3b      	ldr	r3, [r7, #32]
   32eea:	429a      	cmp	r2, r3
   32eec:	d3e2      	bcc.n	32eb4 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   32eee:	2301      	movs	r3, #1
   32ef0:	627b      	str	r3, [r7, #36]	; 0x24
   32ef2:	e002      	b.n	32efa <MQTTDeserialize_suback+0xce>
		goto exit;
   32ef4:	46c0      	nop			; (mov r8, r8)
   32ef6:	e000      	b.n	32efa <MQTTDeserialize_suback+0xce>
		goto exit;
   32ef8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32efc:	0018      	movs	r0, r3
   32efe:	46bd      	mov	sp, r7
   32f00:	b00b      	add	sp, #44	; 0x2c
   32f02:	bd90      	pop	{r4, r7, pc}
   32f04:	00032743 	.word	0x00032743
   32f08:	000326dd 	.word	0x000326dd
   32f0c:	00032711 	.word	0x00032711

00032f10 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   32f10:	b580      	push	{r7, lr}
   32f12:	b082      	sub	sp, #8
   32f14:	af00      	add	r7, sp, #0
   32f16:	6078      	str	r0, [r7, #4]
	config->port = 80;
   32f18:	687b      	ldr	r3, [r7, #4]
   32f1a:	2250      	movs	r2, #80	; 0x50
   32f1c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   32f1e:	687b      	ldr	r3, [r7, #4]
   32f20:	2200      	movs	r2, #0
   32f22:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   32f24:	687b      	ldr	r3, [r7, #4]
   32f26:	4a0b      	ldr	r2, [pc, #44]	; (32f54 <http_client_get_config_defaults+0x44>)
   32f28:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   32f2a:	687b      	ldr	r3, [r7, #4]
   32f2c:	2200      	movs	r2, #0
   32f2e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   32f30:	687b      	ldr	r3, [r7, #4]
   32f32:	2200      	movs	r2, #0
   32f34:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   32f36:	687b      	ldr	r3, [r7, #4]
   32f38:	2280      	movs	r2, #128	; 0x80
   32f3a:	0052      	lsls	r2, r2, #1
   32f3c:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   32f3e:	687b      	ldr	r3, [r7, #4]
   32f40:	2252      	movs	r2, #82	; 0x52
   32f42:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   32f44:	687b      	ldr	r3, [r7, #4]
   32f46:	4a04      	ldr	r2, [pc, #16]	; (32f58 <http_client_get_config_defaults+0x48>)
   32f48:	619a      	str	r2, [r3, #24]
}
   32f4a:	46c0      	nop			; (mov r8, r8)
   32f4c:	46bd      	mov	sp, r7
   32f4e:	b002      	add	sp, #8
   32f50:	bd80      	pop	{r7, pc}
   32f52:	46c0      	nop			; (mov r8, r8)
   32f54:	00004e20 	.word	0x00004e20
   32f58:	0003cf3c 	.word	0x0003cf3c

00032f5c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   32f5c:	b590      	push	{r4, r7, lr}
   32f5e:	b083      	sub	sp, #12
   32f60:	af00      	add	r7, sp, #0
   32f62:	6078      	str	r0, [r7, #4]
   32f64:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   32f66:	687b      	ldr	r3, [r7, #4]
   32f68:	2b00      	cmp	r3, #0
   32f6a:	d002      	beq.n	32f72 <http_client_init+0x16>
   32f6c:	683b      	ldr	r3, [r7, #0]
   32f6e:	2b00      	cmp	r3, #0
   32f70:	d102      	bne.n	32f78 <http_client_init+0x1c>
		return -EINVAL;
   32f72:	2316      	movs	r3, #22
   32f74:	425b      	negs	r3, r3
   32f76:	e058      	b.n	3302a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   32f78:	683b      	ldr	r3, [r7, #0]
   32f7a:	691b      	ldr	r3, [r3, #16]
   32f7c:	2b00      	cmp	r3, #0
   32f7e:	d102      	bne.n	32f86 <http_client_init+0x2a>
		return -EINVAL;
   32f80:	2316      	movs	r3, #22
   32f82:	425b      	negs	r3, r3
   32f84:	e051      	b.n	3302a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   32f86:	683b      	ldr	r3, [r7, #0]
   32f88:	685b      	ldr	r3, [r3, #4]
   32f8a:	2b00      	cmp	r3, #0
   32f8c:	d102      	bne.n	32f94 <http_client_init+0x38>
		return -EINVAL;
   32f8e:	2316      	movs	r3, #22
   32f90:	425b      	negs	r3, r3
   32f92:	e04a      	b.n	3302a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   32f94:	683b      	ldr	r3, [r7, #0]
   32f96:	695b      	ldr	r3, [r3, #20]
   32f98:	2b51      	cmp	r3, #81	; 0x51
   32f9a:	d802      	bhi.n	32fa2 <http_client_init+0x46>
		return -EINVAL;
   32f9c:	2316      	movs	r3, #22
   32f9e:	425b      	negs	r3, r3
   32fa0:	e043      	b.n	3302a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   32fa2:	687b      	ldr	r3, [r7, #4]
   32fa4:	22e8      	movs	r2, #232	; 0xe8
   32fa6:	2100      	movs	r1, #0
   32fa8:	0018      	movs	r0, r3
   32faa:	4b22      	ldr	r3, [pc, #136]	; (33034 <http_client_init+0xd8>)
   32fac:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   32fae:	687b      	ldr	r3, [r7, #4]
   32fb0:	3350      	adds	r3, #80	; 0x50
   32fb2:	6839      	ldr	r1, [r7, #0]
   32fb4:	221c      	movs	r2, #28
   32fb6:	0018      	movs	r0, r3
   32fb8:	4b1f      	ldr	r3, [pc, #124]	; (33038 <http_client_init+0xdc>)
   32fba:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   32fbc:	687b      	ldr	r3, [r7, #4]
   32fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32fc0:	2b00      	cmp	r3, #0
   32fc2:	d115      	bne.n	32ff0 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   32fc4:	683b      	ldr	r3, [r7, #0]
   32fc6:	691b      	ldr	r3, [r3, #16]
   32fc8:	0018      	movs	r0, r3
   32fca:	4b1c      	ldr	r3, [pc, #112]	; (3303c <http_client_init+0xe0>)
   32fcc:	4798      	blx	r3
   32fce:	0003      	movs	r3, r0
   32fd0:	001a      	movs	r2, r3
   32fd2:	687b      	ldr	r3, [r7, #4]
   32fd4:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   32fd6:	687b      	ldr	r3, [r7, #4]
   32fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32fda:	2b00      	cmp	r3, #0
   32fdc:	d102      	bne.n	32fe4 <http_client_init+0x88>
			return -ENOMEM;
   32fde:	230c      	movs	r3, #12
   32fe0:	425b      	negs	r3, r3
   32fe2:	e022      	b.n	3302a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   32fe4:	687b      	ldr	r3, [r7, #4]
   32fe6:	2241      	movs	r2, #65	; 0x41
   32fe8:	5c99      	ldrb	r1, [r3, r2]
   32fea:	2004      	movs	r0, #4
   32fec:	4301      	orrs	r1, r0
   32fee:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   32ff0:	683b      	ldr	r3, [r7, #0]
   32ff2:	891b      	ldrh	r3, [r3, #8]
   32ff4:	2b00      	cmp	r3, #0
   32ff6:	d010      	beq.n	3301a <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   32ff8:	683b      	ldr	r3, [r7, #0]
   32ffa:	6858      	ldr	r0, [r3, #4]
   32ffc:	687a      	ldr	r2, [r7, #4]
   32ffe:	4910      	ldr	r1, [pc, #64]	; (33040 <http_client_init+0xe4>)
   33000:	2300      	movs	r3, #0
   33002:	4c10      	ldr	r4, [pc, #64]	; (33044 <http_client_init+0xe8>)
   33004:	47a0      	blx	r4
   33006:	0002      	movs	r2, r0
   33008:	687b      	ldr	r3, [r7, #4]
   3300a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   3300c:	687b      	ldr	r3, [r7, #4]
   3300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   33010:	2b00      	cmp	r3, #0
   33012:	da02      	bge.n	3301a <http_client_init+0xbe>
			return -ENOSPC;
   33014:	231c      	movs	r3, #28
   33016:	425b      	negs	r3, r3
   33018:	e007      	b.n	3302a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   3301a:	687b      	ldr	r3, [r7, #4]
   3301c:	2200      	movs	r2, #0
   3301e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   33020:	687b      	ldr	r3, [r7, #4]
   33022:	22d8      	movs	r2, #216	; 0xd8
   33024:	2100      	movs	r1, #0
   33026:	5099      	str	r1, [r3, r2]

	return 0;
   33028:	2300      	movs	r3, #0
}
   3302a:	0018      	movs	r0, r3
   3302c:	46bd      	mov	sp, r7
   3302e:	b003      	add	sp, #12
   33030:	bd90      	pop	{r4, r7, pc}
   33032:	46c0      	nop			; (mov r8, r8)
   33034:	0003796b 	.word	0x0003796b
   33038:	00037935 	.word	0x00037935
   3303c:	0003790d 	.word	0x0003790d
   33040:	0003330d 	.word	0x0003330d
   33044:	000349b1 	.word	0x000349b1

00033048 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   33048:	b580      	push	{r7, lr}
   3304a:	b082      	sub	sp, #8
   3304c:	af00      	add	r7, sp, #0
   3304e:	6078      	str	r0, [r7, #4]
   33050:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   33052:	687b      	ldr	r3, [r7, #4]
   33054:	2b00      	cmp	r3, #0
   33056:	d102      	bne.n	3305e <http_client_register_callback+0x16>
		return -EINVAL;
   33058:	2316      	movs	r3, #22
   3305a:	425b      	negs	r3, r3
   3305c:	e003      	b.n	33066 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3305e:	687b      	ldr	r3, [r7, #4]
   33060:	683a      	ldr	r2, [r7, #0]
   33062:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   33064:	2300      	movs	r3, #0
}
   33066:	0018      	movs	r0, r3
   33068:	46bd      	mov	sp, r7
   3306a:	b002      	add	sp, #8
   3306c:	bd80      	pop	{r7, pc}
	...

00033070 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   33070:	b580      	push	{r7, lr}
   33072:	b082      	sub	sp, #8
   33074:	af00      	add	r7, sp, #0
   33076:	6078      	str	r0, [r7, #4]
	switch (err) {
   33078:	687b      	ldr	r3, [r7, #4]
   3307a:	330e      	adds	r3, #14
   3307c:	2b0e      	cmp	r3, #14
   3307e:	d825      	bhi.n	330cc <_hwerr_to_stderr+0x5c>
   33080:	009a      	lsls	r2, r3, #2
   33082:	4b18      	ldr	r3, [pc, #96]	; (330e4 <_hwerr_to_stderr+0x74>)
   33084:	18d3      	adds	r3, r2, r3
   33086:	681b      	ldr	r3, [r3, #0]
   33088:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   3308a:	2305      	movs	r3, #5
   3308c:	425b      	negs	r3, r3
   3308e:	e024      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   33090:	2302      	movs	r3, #2
   33092:	425b      	negs	r3, r3
   33094:	e021      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   33096:	2370      	movs	r3, #112	; 0x70
   33098:	425b      	negs	r3, r3
   3309a:	e01e      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   3309c:	230c      	movs	r3, #12
   3309e:	425b      	negs	r3, r3
   330a0:	e01b      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   330a2:	2316      	movs	r3, #22
   330a4:	425b      	negs	r3, r3
   330a6:	e018      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   330a8:	230c      	movs	r3, #12
   330aa:	425b      	negs	r3, r3
   330ac:	e015      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   330ae:	2305      	movs	r3, #5
   330b0:	425b      	negs	r3, r3
   330b2:	e012      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   330b4:	2379      	movs	r3, #121	; 0x79
   330b6:	425b      	negs	r3, r3
   330b8:	e00f      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   330ba:	2368      	movs	r3, #104	; 0x68
   330bc:	425b      	negs	r3, r3
   330be:	e00c      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   330c0:	230b      	movs	r3, #11
   330c2:	425b      	negs	r3, r3
   330c4:	e009      	b.n	330da <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   330c6:	2310      	movs	r3, #16
   330c8:	425b      	negs	r3, r3
   330ca:	e006      	b.n	330da <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   330cc:	687b      	ldr	r3, [r7, #4]
   330ce:	2b00      	cmp	r3, #0
   330d0:	da02      	bge.n	330d8 <_hwerr_to_stderr+0x68>
				return -EIO;
   330d2:	2305      	movs	r3, #5
   330d4:	425b      	negs	r3, r3
   330d6:	e000      	b.n	330da <_hwerr_to_stderr+0x6a>
			}
			return 0;
   330d8:	2300      	movs	r3, #0
	}
}
   330da:	0018      	movs	r0, r3
   330dc:	46bd      	mov	sp, r7
   330de:	b002      	add	sp, #8
   330e0:	bd80      	pop	{r7, pc}
   330e2:	46c0      	nop			; (mov r8, r8)
   330e4:	0003d078 	.word	0x0003d078

000330e8 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   330e8:	b580      	push	{r7, lr}
   330ea:	b08a      	sub	sp, #40	; 0x28
   330ec:	af00      	add	r7, sp, #0
   330ee:	603a      	str	r2, [r7, #0]
   330f0:	1dfb      	adds	r3, r7, #7
   330f2:	1c02      	adds	r2, r0, #0
   330f4:	701a      	strb	r2, [r3, #0]
   330f6:	1dbb      	adds	r3, r7, #6
   330f8:	1c0a      	adds	r2, r1, #0
   330fa:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   330fc:	1dfb      	adds	r3, r7, #7
   330fe:	2200      	movs	r2, #0
   33100:	569a      	ldrsb	r2, [r3, r2]
   33102:	4b4b      	ldr	r3, [pc, #300]	; (33230 <http_client_socket_event_handler+0x148>)
   33104:	0092      	lsls	r2, r2, #2
   33106:	58d3      	ldr	r3, [r2, r3]
   33108:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   3310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3310c:	2b00      	cmp	r3, #0
   3310e:	d100      	bne.n	33112 <http_client_socket_event_handler+0x2a>
   33110:	e08a      	b.n	33228 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   33112:	1dbb      	adds	r3, r7, #6
   33114:	781b      	ldrb	r3, [r3, #0]
   33116:	2b06      	cmp	r3, #6
   33118:	d040      	beq.n	3319c <http_client_socket_event_handler+0xb4>
   3311a:	2b07      	cmp	r3, #7
   3311c:	d060      	beq.n	331e0 <http_client_socket_event_handler+0xf8>
   3311e:	2b05      	cmp	r3, #5
   33120:	d000      	beq.n	33124 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   33122:	e082      	b.n	3322a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   33124:	683b      	ldr	r3, [r7, #0]
   33126:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   33128:	6a3b      	ldr	r3, [r7, #32]
   3312a:	785b      	ldrb	r3, [r3, #1]
   3312c:	b25b      	sxtb	r3, r3
   3312e:	001a      	movs	r2, r3
   33130:	230c      	movs	r3, #12
   33132:	18fb      	adds	r3, r7, r3
   33134:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   33136:	6a3b      	ldr	r3, [r7, #32]
   33138:	785b      	ldrb	r3, [r3, #1]
   3313a:	b25b      	sxtb	r3, r3
   3313c:	2b00      	cmp	r3, #0
   3313e:	da0c      	bge.n	3315a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   33140:	6a3b      	ldr	r3, [r7, #32]
   33142:	785b      	ldrb	r3, [r3, #1]
   33144:	b25b      	sxtb	r3, r3
   33146:	0018      	movs	r0, r3
   33148:	4b3a      	ldr	r3, [pc, #232]	; (33234 <http_client_socket_event_handler+0x14c>)
   3314a:	4798      	blx	r3
   3314c:	0002      	movs	r2, r0
   3314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33150:	0011      	movs	r1, r2
   33152:	0018      	movs	r0, r3
   33154:	4b38      	ldr	r3, [pc, #224]	; (33238 <http_client_socket_event_handler+0x150>)
   33156:	4798      	blx	r3
    	break;
   33158:	e067      	b.n	3322a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   3315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3315e:	2b00      	cmp	r3, #0
   33160:	d006      	beq.n	33170 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   33162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33166:	220c      	movs	r2, #12
   33168:	18ba      	adds	r2, r7, r2
   3316a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   3316c:	2100      	movs	r1, #0
   3316e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   33170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33172:	2203      	movs	r2, #3
   33174:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   33176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33178:	6d58      	ldr	r0, [r3, #84]	; 0x54
   3317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3317c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   3317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33180:	2258      	movs	r2, #88	; 0x58
   33182:	5a9b      	ldrh	r3, [r3, r2]
   33184:	001a      	movs	r2, r3
   33186:	4b2d      	ldr	r3, [pc, #180]	; (3323c <http_client_socket_event_handler+0x154>)
   33188:	4798      	blx	r3
    		_http_client_recv_packet(module);
   3318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3318c:	0018      	movs	r0, r3
   3318e:	4b2c      	ldr	r3, [pc, #176]	; (33240 <http_client_socket_event_handler+0x158>)
   33190:	4798      	blx	r3
			_http_client_request(module);
   33192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33194:	0018      	movs	r0, r3
   33196:	4b2b      	ldr	r3, [pc, #172]	; (33244 <http_client_socket_event_handler+0x15c>)
   33198:	4798      	blx	r3
    	break;
   3319a:	e046      	b.n	3322a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   3319c:	683b      	ldr	r3, [r7, #0]
   3319e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   331a0:	69fb      	ldr	r3, [r7, #28]
   331a2:	2204      	movs	r2, #4
   331a4:	5e9b      	ldrsh	r3, [r3, r2]
   331a6:	2b00      	cmp	r3, #0
   331a8:	dd09      	ble.n	331be <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   331aa:	69fb      	ldr	r3, [r7, #28]
   331ac:	2204      	movs	r2, #4
   331ae:	5e9b      	ldrsh	r3, [r3, r2]
   331b0:	001a      	movs	r2, r3
   331b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331b4:	0011      	movs	r1, r2
   331b6:	0018      	movs	r0, r3
   331b8:	4b23      	ldr	r3, [pc, #140]	; (33248 <http_client_socket_event_handler+0x160>)
   331ba:	4798      	blx	r3
   331bc:	e00b      	b.n	331d6 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   331be:	69fb      	ldr	r3, [r7, #28]
   331c0:	2204      	movs	r2, #4
   331c2:	5e9b      	ldrsh	r3, [r3, r2]
   331c4:	0018      	movs	r0, r3
   331c6:	4b1b      	ldr	r3, [pc, #108]	; (33234 <http_client_socket_event_handler+0x14c>)
   331c8:	4798      	blx	r3
   331ca:	0002      	movs	r2, r0
   331cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331ce:	0011      	movs	r1, r2
   331d0:	0018      	movs	r0, r3
   331d2:	4b19      	ldr	r3, [pc, #100]	; (33238 <http_client_socket_event_handler+0x150>)
   331d4:	4798      	blx	r3
		_http_client_recv_packet(module);
   331d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331d8:	0018      	movs	r0, r3
   331da:	4b19      	ldr	r3, [pc, #100]	; (33240 <http_client_socket_event_handler+0x158>)
   331dc:	4798      	blx	r3
		break;
   331de:	e024      	b.n	3322a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   331e0:	231a      	movs	r3, #26
   331e2:	18fb      	adds	r3, r7, r3
   331e4:	683a      	ldr	r2, [r7, #0]
   331e6:	8812      	ldrh	r2, [r2, #0]
   331e8:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   331ea:	231a      	movs	r3, #26
   331ec:	18fb      	adds	r3, r7, r3
   331ee:	2200      	movs	r2, #0
   331f0:	5e9b      	ldrsh	r3, [r3, r2]
   331f2:	2b00      	cmp	r3, #0
   331f4:	da0d      	bge.n	33212 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   331f6:	231a      	movs	r3, #26
   331f8:	18fb      	adds	r3, r7, r3
   331fa:	2200      	movs	r2, #0
   331fc:	5e9b      	ldrsh	r3, [r3, r2]
   331fe:	0018      	movs	r0, r3
   33200:	4b0c      	ldr	r3, [pc, #48]	; (33234 <http_client_socket_event_handler+0x14c>)
   33202:	4798      	blx	r3
   33204:	0002      	movs	r2, r0
   33206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33208:	0011      	movs	r1, r2
   3320a:	0018      	movs	r0, r3
   3320c:	4b0a      	ldr	r3, [pc, #40]	; (33238 <http_client_socket_event_handler+0x150>)
   3320e:	4798      	blx	r3
   33210:	e003      	b.n	3321a <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   33212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33214:	0018      	movs	r0, r3
   33216:	4b0b      	ldr	r3, [pc, #44]	; (33244 <http_client_socket_event_handler+0x15c>)
   33218:	4798      	blx	r3
		module->sending = 0;
   3321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3321c:	2241      	movs	r2, #65	; 0x41
   3321e:	5c99      	ldrb	r1, [r3, r2]
   33220:	2001      	movs	r0, #1
   33222:	4381      	bics	r1, r0
   33224:	5499      	strb	r1, [r3, r2]
    	break;
   33226:	e000      	b.n	3322a <http_client_socket_event_handler+0x142>
		return;
   33228:	46c0      	nop			; (mov r8, r8)
	}

}
   3322a:	46bd      	mov	sp, r7
   3322c:	b00a      	add	sp, #40	; 0x28
   3322e:	bd80      	pop	{r7, pc}
   33230:	20004568 	.word	0x20004568
   33234:	00033071 	.word	0x00033071
   33238:	000336e5 	.word	0x000336e5
   3323c:	00034a41 	.word	0x00034a41
   33240:	00033f71 	.word	0x00033f71
   33244:	00033839 	.word	0x00033839
   33248:	00033fd5 	.word	0x00033fd5

0003324c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   3324c:	b580      	push	{r7, lr}
   3324e:	b088      	sub	sp, #32
   33250:	af00      	add	r7, sp, #0
   33252:	6078      	str	r0, [r7, #4]
   33254:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   33256:	2300      	movs	r3, #0
   33258:	61fb      	str	r3, [r7, #28]
   3325a:	e048      	b.n	332ee <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   3325c:	4b27      	ldr	r3, [pc, #156]	; (332fc <http_client_socket_resolve_handler+0xb0>)
   3325e:	69fa      	ldr	r2, [r7, #28]
   33260:	0092      	lsls	r2, r2, #2
   33262:	58d3      	ldr	r3, [r2, r3]
   33264:	2b00      	cmp	r3, #0
   33266:	d03f      	beq.n	332e8 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   33268:	4b24      	ldr	r3, [pc, #144]	; (332fc <http_client_socket_resolve_handler+0xb0>)
   3326a:	69fa      	ldr	r2, [r7, #28]
   3326c:	0092      	lsls	r2, r2, #2
   3326e:	58d3      	ldr	r3, [r2, r3]
   33270:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   33272:	69bb      	ldr	r3, [r7, #24]
   33274:	1c5a      	adds	r2, r3, #1
   33276:	687b      	ldr	r3, [r7, #4]
   33278:	0011      	movs	r1, r2
   3327a:	0018      	movs	r0, r3
   3327c:	4b20      	ldr	r3, [pc, #128]	; (33300 <http_client_socket_resolve_handler+0xb4>)
   3327e:	4798      	blx	r3
   33280:	1e03      	subs	r3, r0, #0
   33282:	d131      	bne.n	332e8 <http_client_socket_resolve_handler+0x9c>
   33284:	69bb      	ldr	r3, [r7, #24]
   33286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33288:	2b01      	cmp	r3, #1
   3328a:	d12d      	bne.n	332e8 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   3328c:	683b      	ldr	r3, [r7, #0]
   3328e:	2b00      	cmp	r3, #0
   33290:	d107      	bne.n	332a2 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   33292:	2376      	movs	r3, #118	; 0x76
   33294:	425a      	negs	r2, r3
   33296:	69bb      	ldr	r3, [r7, #24]
   33298:	0011      	movs	r1, r2
   3329a:	0018      	movs	r0, r3
   3329c:	4b19      	ldr	r3, [pc, #100]	; (33304 <http_client_socket_resolve_handler+0xb8>)
   3329e:	4798      	blx	r3
					return;
   332a0:	e028      	b.n	332f4 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   332a2:	2308      	movs	r3, #8
   332a4:	18fb      	adds	r3, r7, r3
   332a6:	2202      	movs	r2, #2
   332a8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   332aa:	69bb      	ldr	r3, [r7, #24]
   332ac:	2250      	movs	r2, #80	; 0x50
   332ae:	5a9b      	ldrh	r3, [r3, r2]
   332b0:	021b      	lsls	r3, r3, #8
   332b2:	b21a      	sxth	r2, r3
   332b4:	69bb      	ldr	r3, [r7, #24]
   332b6:	2150      	movs	r1, #80	; 0x50
   332b8:	5a5b      	ldrh	r3, [r3, r1]
   332ba:	0a1b      	lsrs	r3, r3, #8
   332bc:	b29b      	uxth	r3, r3
   332be:	b21b      	sxth	r3, r3
   332c0:	4313      	orrs	r3, r2
   332c2:	b21b      	sxth	r3, r3
   332c4:	b29a      	uxth	r2, r3
   332c6:	2308      	movs	r3, #8
   332c8:	18fb      	adds	r3, r7, r3
   332ca:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   332cc:	2308      	movs	r3, #8
   332ce:	18fb      	adds	r3, r7, r3
   332d0:	683a      	ldr	r2, [r7, #0]
   332d2:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   332d4:	69bb      	ldr	r3, [r7, #24]
   332d6:	781b      	ldrb	r3, [r3, #0]
   332d8:	b25b      	sxtb	r3, r3
   332da:	2208      	movs	r2, #8
   332dc:	18b9      	adds	r1, r7, r2
   332de:	2210      	movs	r2, #16
   332e0:	0018      	movs	r0, r3
   332e2:	4b09      	ldr	r3, [pc, #36]	; (33308 <http_client_socket_resolve_handler+0xbc>)
   332e4:	4798      	blx	r3
				return;
   332e6:	e005      	b.n	332f4 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   332e8:	69fb      	ldr	r3, [r7, #28]
   332ea:	3301      	adds	r3, #1
   332ec:	61fb      	str	r3, [r7, #28]
   332ee:	69fb      	ldr	r3, [r7, #28]
   332f0:	2b06      	cmp	r3, #6
   332f2:	ddb3      	ble.n	3325c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   332f4:	46bd      	mov	sp, r7
   332f6:	b008      	add	sp, #32
   332f8:	bd80      	pop	{r7, pc}
   332fa:	46c0      	nop			; (mov r8, r8)
   332fc:	20004568 	.word	0x20004568
   33300:	00037cc3 	.word	0x00037cc3
   33304:	000336e5 	.word	0x000336e5
   33308:	00027bad 	.word	0x00027bad

0003330c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   3330c:	b580      	push	{r7, lr}
   3330e:	b086      	sub	sp, #24
   33310:	af00      	add	r7, sp, #0
   33312:	60f8      	str	r0, [r7, #12]
   33314:	60b9      	str	r1, [r7, #8]
   33316:	607a      	str	r2, [r7, #4]
   33318:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   3331a:	687b      	ldr	r3, [r7, #4]
   3331c:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   3331e:	697b      	ldr	r3, [r7, #20]
   33320:	2b00      	cmp	r3, #0
   33322:	d007      	beq.n	33334 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   33324:	233e      	movs	r3, #62	; 0x3e
   33326:	425a      	negs	r2, r3
   33328:	697b      	ldr	r3, [r7, #20]
   3332a:	0011      	movs	r1, r2
   3332c:	0018      	movs	r0, r3
   3332e:	4b03      	ldr	r3, [pc, #12]	; (3333c <http_client_timer_callback+0x30>)
   33330:	4798      	blx	r3
   33332:	e000      	b.n	33336 <http_client_timer_callback+0x2a>
		return;
   33334:	46c0      	nop			; (mov r8, r8)
}
   33336:	46bd      	mov	sp, r7
   33338:	b006      	add	sp, #24
   3333a:	bd80      	pop	{r7, pc}
   3333c:	000336e5 	.word	0x000336e5

00033340 <_is_ip>:

static int _is_ip(const char *host)
{
   33340:	b580      	push	{r7, lr}
   33342:	b084      	sub	sp, #16
   33344:	af00      	add	r7, sp, #0
   33346:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   33348:	2300      	movs	r3, #0
   3334a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   3334c:	e03a      	b.n	333c4 <_is_ip+0x84>
		ch = *host++;
   3334e:	687b      	ldr	r3, [r7, #4]
   33350:	1c5a      	adds	r2, r3, #1
   33352:	607a      	str	r2, [r7, #4]
   33354:	220b      	movs	r2, #11
   33356:	18ba      	adds	r2, r7, r2
   33358:	781b      	ldrb	r3, [r3, #0]
   3335a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   3335c:	230b      	movs	r3, #11
   3335e:	18fb      	adds	r3, r7, r3
   33360:	781b      	ldrb	r3, [r3, #0]
   33362:	2b60      	cmp	r3, #96	; 0x60
   33364:	d904      	bls.n	33370 <_is_ip+0x30>
   33366:	230b      	movs	r3, #11
   33368:	18fb      	adds	r3, r7, r3
   3336a:	781b      	ldrb	r3, [r3, #0]
   3336c:	2b66      	cmp	r3, #102	; 0x66
   3336e:	d913      	bls.n	33398 <_is_ip+0x58>
   33370:	230b      	movs	r3, #11
   33372:	18fb      	adds	r3, r7, r3
   33374:	781b      	ldrb	r3, [r3, #0]
   33376:	2b40      	cmp	r3, #64	; 0x40
   33378:	d904      	bls.n	33384 <_is_ip+0x44>
   3337a:	230b      	movs	r3, #11
   3337c:	18fb      	adds	r3, r7, r3
   3337e:	781b      	ldrb	r3, [r3, #0]
   33380:	2b46      	cmp	r3, #70	; 0x46
   33382:	d909      	bls.n	33398 <_is_ip+0x58>
   33384:	230b      	movs	r3, #11
   33386:	18fb      	adds	r3, r7, r3
   33388:	781b      	ldrb	r3, [r3, #0]
   3338a:	2b3a      	cmp	r3, #58	; 0x3a
   3338c:	d004      	beq.n	33398 <_is_ip+0x58>
   3338e:	230b      	movs	r3, #11
   33390:	18fb      	adds	r3, r7, r3
   33392:	781b      	ldrb	r3, [r3, #0]
   33394:	2b2f      	cmp	r3, #47	; 0x2f
   33396:	d102      	bne.n	3339e <_is_ip+0x5e>
			isv6 = 1;
   33398:	2301      	movs	r3, #1
   3339a:	60fb      	str	r3, [r7, #12]
   3339c:	e012      	b.n	333c4 <_is_ip+0x84>
		} else if (ch == '.') {
   3339e:	230b      	movs	r3, #11
   333a0:	18fb      	adds	r3, r7, r3
   333a2:	781b      	ldrb	r3, [r3, #0]
   333a4:	2b2e      	cmp	r3, #46	; 0x2e
   333a6:	d104      	bne.n	333b2 <_is_ip+0x72>
			if (isv6) {
   333a8:	68fb      	ldr	r3, [r7, #12]
   333aa:	2b00      	cmp	r3, #0
   333ac:	d00a      	beq.n	333c4 <_is_ip+0x84>
				return 0;
   333ae:	2300      	movs	r3, #0
   333b0:	e00d      	b.n	333ce <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   333b2:	230b      	movs	r3, #11
   333b4:	18fb      	adds	r3, r7, r3
   333b6:	781b      	ldrb	r3, [r3, #0]
   333b8:	2230      	movs	r2, #48	; 0x30
   333ba:	4013      	ands	r3, r2
   333bc:	2b30      	cmp	r3, #48	; 0x30
   333be:	d001      	beq.n	333c4 <_is_ip+0x84>
			return 0;
   333c0:	2300      	movs	r3, #0
   333c2:	e004      	b.n	333ce <_is_ip+0x8e>
	while (*host != '\0') {
   333c4:	687b      	ldr	r3, [r7, #4]
   333c6:	781b      	ldrb	r3, [r3, #0]
   333c8:	2b00      	cmp	r3, #0
   333ca:	d1c0      	bne.n	3334e <_is_ip+0xe>
		}
	}
	return 1;
   333cc:	2301      	movs	r3, #1
}
   333ce:	0018      	movs	r0, r3
   333d0:	46bd      	mov	sp, r7
   333d2:	b004      	add	sp, #16
   333d4:	bd80      	pop	{r7, pc}
	...

000333d8 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   333d8:	b5b0      	push	{r4, r5, r7, lr}
   333da:	b08e      	sub	sp, #56	; 0x38
   333dc:	af00      	add	r7, sp, #0
   333de:	60f8      	str	r0, [r7, #12]
   333e0:	60b9      	str	r1, [r7, #8]
   333e2:	603b      	str	r3, [r7, #0]
   333e4:	1dfb      	adds	r3, r7, #7
   333e6:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   333e8:	2337      	movs	r3, #55	; 0x37
   333ea:	18fb      	adds	r3, r7, r3
   333ec:	2200      	movs	r2, #0
   333ee:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   333f0:	2300      	movs	r3, #0
   333f2:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   333f4:	2300      	movs	r3, #0
   333f6:	633b      	str	r3, [r7, #48]	; 0x30
   333f8:	2300      	movs	r3, #0
   333fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   333fc:	2300      	movs	r3, #0
   333fe:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   33400:	68fb      	ldr	r3, [r7, #12]
   33402:	2b00      	cmp	r3, #0
   33404:	d102      	bne.n	3340c <http_client_send_request+0x34>
		return -EINVAL;
   33406:	2316      	movs	r3, #22
   33408:	425b      	negs	r3, r3
   3340a:	e145      	b.n	33698 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   3340c:	68fb      	ldr	r3, [r7, #12]
   3340e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33410:	2b02      	cmp	r3, #2
   33412:	d902      	bls.n	3341a <http_client_send_request+0x42>
		return -EBUSY;
   33414:	2310      	movs	r3, #16
   33416:	425b      	negs	r3, r3
   33418:	e13e      	b.n	33698 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   3341a:	49a1      	ldr	r1, [pc, #644]	; (336a0 <http_client_send_request+0x2c8>)
   3341c:	68bb      	ldr	r3, [r7, #8]
   3341e:	2207      	movs	r2, #7
   33420:	0018      	movs	r0, r3
   33422:	4ba0      	ldr	r3, [pc, #640]	; (336a4 <http_client_send_request+0x2cc>)
   33424:	4798      	blx	r3
   33426:	1e03      	subs	r3, r0, #0
   33428:	d102      	bne.n	33430 <http_client_send_request+0x58>
		i = 7;
   3342a:	2307      	movs	r3, #7
   3342c:	633b      	str	r3, [r7, #48]	; 0x30
   3342e:	e009      	b.n	33444 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   33430:	499d      	ldr	r1, [pc, #628]	; (336a8 <http_client_send_request+0x2d0>)
   33432:	68bb      	ldr	r3, [r7, #8]
   33434:	2208      	movs	r2, #8
   33436:	0018      	movs	r0, r3
   33438:	4b9a      	ldr	r3, [pc, #616]	; (336a4 <http_client_send_request+0x2cc>)
   3343a:	4798      	blx	r3
   3343c:	1e03      	subs	r3, r0, #0
   3343e:	d101      	bne.n	33444 <http_client_send_request+0x6c>
		i = 8;
   33440:	2308      	movs	r3, #8
   33442:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   33444:	68fb      	ldr	r3, [r7, #12]
   33446:	1c5c      	adds	r4, r3, #1
   33448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3344a:	68ba      	ldr	r2, [r7, #8]
   3344c:	18d5      	adds	r5, r2, r3
   3344e:	68fb      	ldr	r3, [r7, #12]
   33450:	3301      	adds	r3, #1
   33452:	0018      	movs	r0, r3
   33454:	4b95      	ldr	r3, [pc, #596]	; (336ac <http_client_send_request+0x2d4>)
   33456:	4798      	blx	r3
   33458:	0003      	movs	r3, r0
   3345a:	001a      	movs	r2, r3
   3345c:	0029      	movs	r1, r5
   3345e:	0020      	movs	r0, r4
   33460:	4b90      	ldr	r3, [pc, #576]	; (336a4 <http_client_send_request+0x2cc>)
   33462:	4798      	blx	r3
   33464:	0003      	movs	r3, r0
   33466:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33468:	e00d      	b.n	33486 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   3346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3346c:	1c5a      	adds	r2, r3, #1
   3346e:	62fa      	str	r2, [r7, #44]	; 0x2c
   33470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   33472:	68b9      	ldr	r1, [r7, #8]
   33474:	188a      	adds	r2, r1, r2
   33476:	7811      	ldrb	r1, [r2, #0]
   33478:	68fa      	ldr	r2, [r7, #12]
   3347a:	18d3      	adds	r3, r2, r3
   3347c:	1c0a      	adds	r2, r1, #0
   3347e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33482:	3301      	adds	r3, #1
   33484:	633b      	str	r3, [r7, #48]	; 0x30
   33486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33488:	68ba      	ldr	r2, [r7, #8]
   3348a:	18d3      	adds	r3, r2, r3
   3348c:	781b      	ldrb	r3, [r3, #0]
   3348e:	2b00      	cmp	r3, #0
   33490:	d005      	beq.n	3349e <http_client_send_request+0xc6>
   33492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33494:	68ba      	ldr	r2, [r7, #8]
   33496:	18d3      	adds	r3, r2, r3
   33498:	781b      	ldrb	r3, [r3, #0]
   3349a:	2b2f      	cmp	r3, #47	; 0x2f
   3349c:	d1e5      	bne.n	3346a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   3349e:	68fa      	ldr	r2, [r7, #12]
   334a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   334a2:	18d3      	adds	r3, r2, r3
   334a4:	3301      	adds	r3, #1
   334a6:	2200      	movs	r2, #0
   334a8:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   334aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   334ac:	68ba      	ldr	r2, [r7, #8]
   334ae:	18d3      	adds	r3, r2, r3
   334b0:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   334b2:	68fb      	ldr	r3, [r7, #12]
   334b4:	3301      	adds	r3, #1
   334b6:	781b      	ldrb	r3, [r3, #0]
   334b8:	2b00      	cmp	r3, #0
   334ba:	d102      	bne.n	334c2 <http_client_send_request+0xea>
		return -EINVAL;
   334bc:	2316      	movs	r3, #22
   334be:	425b      	negs	r3, r3
   334c0:	e0ea      	b.n	33698 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   334c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   334c4:	0018      	movs	r0, r3
   334c6:	4b79      	ldr	r3, [pc, #484]	; (336ac <http_client_send_request+0x2d4>)
   334c8:	4798      	blx	r3
   334ca:	0003      	movs	r3, r0
   334cc:	2b3f      	cmp	r3, #63	; 0x3f
   334ce:	d902      	bls.n	334d6 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   334d0:	235b      	movs	r3, #91	; 0x5b
   334d2:	425b      	negs	r3, r3
   334d4:	e0e0      	b.n	33698 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   334d6:	68fb      	ldr	r3, [r7, #12]
   334d8:	22d4      	movs	r2, #212	; 0xd4
   334da:	589b      	ldr	r3, [r3, r2]
   334dc:	2b00      	cmp	r3, #0
   334de:	d005      	beq.n	334ec <http_client_send_request+0x114>
		free(module->req.ext_header);
   334e0:	68fb      	ldr	r3, [r7, #12]
   334e2:	22d4      	movs	r2, #212	; 0xd4
   334e4:	589b      	ldr	r3, [r3, r2]
   334e6:	0018      	movs	r0, r3
   334e8:	4b71      	ldr	r3, [pc, #452]	; (336b0 <http_client_send_request+0x2d8>)
   334ea:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   334ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   334ee:	2b00      	cmp	r3, #0
   334f0:	d010      	beq.n	33514 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   334f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   334f4:	0018      	movs	r0, r3
   334f6:	4b6f      	ldr	r3, [pc, #444]	; (336b4 <http_client_send_request+0x2dc>)
   334f8:	4798      	blx	r3
   334fa:	0003      	movs	r3, r0
   334fc:	0019      	movs	r1, r3
   334fe:	68fb      	ldr	r3, [r7, #12]
   33500:	22d4      	movs	r2, #212	; 0xd4
   33502:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   33504:	68fb      	ldr	r3, [r7, #12]
   33506:	22d4      	movs	r2, #212	; 0xd4
   33508:	589b      	ldr	r3, [r3, r2]
   3350a:	2b00      	cmp	r3, #0
   3350c:	d106      	bne.n	3351c <http_client_send_request+0x144>
			return -ENOMEM;
   3350e:	230c      	movs	r3, #12
   33510:	425b      	negs	r3, r3
   33512:	e0c1      	b.n	33698 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   33514:	68fb      	ldr	r3, [r7, #12]
   33516:	22d4      	movs	r2, #212	; 0xd4
   33518:	2100      	movs	r1, #0
   3351a:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   3351c:	68fb      	ldr	r3, [r7, #12]
   3351e:	2241      	movs	r2, #65	; 0x41
   33520:	5c99      	ldrb	r1, [r3, r2]
   33522:	2001      	movs	r0, #1
   33524:	4381      	bics	r1, r0
   33526:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   33528:	68fb      	ldr	r3, [r7, #12]
   3352a:	2200      	movs	r2, #0
   3352c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   3352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33530:	781b      	ldrb	r3, [r3, #0]
   33532:	2b2f      	cmp	r3, #47	; 0x2f
   33534:	d107      	bne.n	33546 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   33536:	68fb      	ldr	r3, [r7, #12]
   33538:	3370      	adds	r3, #112	; 0x70
   3353a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3353c:	0011      	movs	r1, r2
   3353e:	0018      	movs	r0, r3
   33540:	4b5d      	ldr	r3, [pc, #372]	; (336b8 <http_client_send_request+0x2e0>)
   33542:	4798      	blx	r3
   33544:	e00f      	b.n	33566 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   33546:	68fb      	ldr	r3, [r7, #12]
   33548:	2270      	movs	r2, #112	; 0x70
   3354a:	212f      	movs	r1, #47	; 0x2f
   3354c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   3354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33550:	781b      	ldrb	r3, [r3, #0]
   33552:	2b00      	cmp	r3, #0
   33554:	d007      	beq.n	33566 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   33556:	68fb      	ldr	r3, [r7, #12]
   33558:	3370      	adds	r3, #112	; 0x70
   3355a:	3301      	adds	r3, #1
   3355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3355e:	0011      	movs	r1, r2
   33560:	0018      	movs	r0, r3
   33562:	4b55      	ldr	r3, [pc, #340]	; (336b8 <http_client_send_request+0x2e0>)
   33564:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   33566:	683b      	ldr	r3, [r7, #0]
   33568:	2b00      	cmp	r3, #0
   3356a:	d007      	beq.n	3357c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   3356c:	68fb      	ldr	r3, [r7, #12]
   3356e:	33b0      	adds	r3, #176	; 0xb0
   33570:	6839      	ldr	r1, [r7, #0]
   33572:	2218      	movs	r2, #24
   33574:	0018      	movs	r0, r3
   33576:	4b51      	ldr	r3, [pc, #324]	; (336bc <http_client_send_request+0x2e4>)
   33578:	4798      	blx	r3
   3357a:	e006      	b.n	3358a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   3357c:	68fb      	ldr	r3, [r7, #12]
   3357e:	33b0      	adds	r3, #176	; 0xb0
   33580:	2218      	movs	r2, #24
   33582:	2100      	movs	r1, #0
   33584:	0018      	movs	r0, r3
   33586:	4b4e      	ldr	r3, [pc, #312]	; (336c0 <http_client_send_request+0x2e8>)
   33588:	4798      	blx	r3
	}

	module->req.method = method;
   3358a:	68fb      	ldr	r3, [r7, #12]
   3358c:	1dfa      	adds	r2, r7, #7
   3358e:	21c8      	movs	r1, #200	; 0xc8
   33590:	7812      	ldrb	r2, [r2, #0]
   33592:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   33594:	68fb      	ldr	r3, [r7, #12]
   33596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33598:	2b01      	cmp	r3, #1
   3359a:	d003      	beq.n	335a4 <http_client_send_request+0x1cc>
   3359c:	d316      	bcc.n	335cc <http_client_send_request+0x1f4>
   3359e:	2b02      	cmp	r3, #2
   335a0:	d004      	beq.n	335ac <http_client_send_request+0x1d4>
   335a2:	e074      	b.n	3368e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   335a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   335a6:	2b00      	cmp	r3, #0
   335a8:	d100      	bne.n	335ac <http_client_send_request+0x1d4>
   335aa:	e073      	b.n	33694 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   335ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   335ae:	2b00      	cmp	r3, #0
   335b0:	d107      	bne.n	335c2 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   335b2:	68fb      	ldr	r3, [r7, #12]
   335b4:	2203      	movs	r2, #3
   335b6:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   335b8:	68fb      	ldr	r3, [r7, #12]
   335ba:	0018      	movs	r0, r3
   335bc:	4b41      	ldr	r3, [pc, #260]	; (336c4 <http_client_send_request+0x2ec>)
   335be:	4798      	blx	r3
			break;
   335c0:	e069      	b.n	33696 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   335c2:	68fb      	ldr	r3, [r7, #12]
   335c4:	2100      	movs	r1, #0
   335c6:	0018      	movs	r0, r3
   335c8:	4b3f      	ldr	r3, [pc, #252]	; (336c8 <http_client_send_request+0x2f0>)
   335ca:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   335cc:	68fb      	ldr	r3, [r7, #12]
   335ce:	2252      	movs	r2, #82	; 0x52
   335d0:	5c9b      	ldrb	r3, [r3, r2]
   335d2:	2b00      	cmp	r3, #0
   335d4:	d007      	beq.n	335e6 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   335d6:	2337      	movs	r3, #55	; 0x37
   335d8:	18fb      	adds	r3, r7, r3
   335da:	2237      	movs	r2, #55	; 0x37
   335dc:	18ba      	adds	r2, r7, r2
   335de:	7812      	ldrb	r2, [r2, #0]
   335e0:	2101      	movs	r1, #1
   335e2:	430a      	orrs	r2, r1
   335e4:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   335e6:	2337      	movs	r3, #55	; 0x37
   335e8:	18fb      	adds	r3, r7, r3
   335ea:	781b      	ldrb	r3, [r3, #0]
   335ec:	001a      	movs	r2, r3
   335ee:	2101      	movs	r1, #1
   335f0:	2002      	movs	r0, #2
   335f2:	4b36      	ldr	r3, [pc, #216]	; (336cc <http_client_send_request+0x2f4>)
   335f4:	4798      	blx	r3
   335f6:	0003      	movs	r3, r0
   335f8:	001a      	movs	r2, r3
   335fa:	68fb      	ldr	r3, [r7, #12]
   335fc:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   335fe:	68fb      	ldr	r3, [r7, #12]
   33600:	781b      	ldrb	r3, [r3, #0]
   33602:	b25b      	sxtb	r3, r3
   33604:	2b00      	cmp	r3, #0
   33606:	db3f      	blt.n	33688 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   33608:	68fb      	ldr	r3, [r7, #12]
   3360a:	781b      	ldrb	r3, [r3, #0]
   3360c:	b25b      	sxtb	r3, r3
   3360e:	001a      	movs	r2, r3
   33610:	4b2f      	ldr	r3, [pc, #188]	; (336d0 <http_client_send_request+0x2f8>)
   33612:	0092      	lsls	r2, r2, #2
   33614:	68f9      	ldr	r1, [r7, #12]
   33616:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   33618:	68fb      	ldr	r3, [r7, #12]
   3361a:	3301      	adds	r3, #1
   3361c:	0018      	movs	r0, r3
   3361e:	4b2d      	ldr	r3, [pc, #180]	; (336d4 <http_client_send_request+0x2fc>)
   33620:	4798      	blx	r3
   33622:	1e03      	subs	r3, r0, #0
   33624:	d027      	beq.n	33676 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   33626:	2314      	movs	r3, #20
   33628:	18fb      	adds	r3, r7, r3
   3362a:	2202      	movs	r2, #2
   3362c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3362e:	68fb      	ldr	r3, [r7, #12]
   33630:	2250      	movs	r2, #80	; 0x50
   33632:	5a9b      	ldrh	r3, [r3, r2]
   33634:	021b      	lsls	r3, r3, #8
   33636:	b21a      	sxth	r2, r3
   33638:	68fb      	ldr	r3, [r7, #12]
   3363a:	2150      	movs	r1, #80	; 0x50
   3363c:	5a5b      	ldrh	r3, [r3, r1]
   3363e:	0a1b      	lsrs	r3, r3, #8
   33640:	b29b      	uxth	r3, r3
   33642:	b21b      	sxth	r3, r3
   33644:	4313      	orrs	r3, r2
   33646:	b21b      	sxth	r3, r3
   33648:	b29a      	uxth	r2, r3
   3364a:	2314      	movs	r3, #20
   3364c:	18fb      	adds	r3, r7, r3
   3364e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   33650:	68fb      	ldr	r3, [r7, #12]
   33652:	3301      	adds	r3, #1
   33654:	0018      	movs	r0, r3
   33656:	4b20      	ldr	r3, [pc, #128]	; (336d8 <http_client_send_request+0x300>)
   33658:	4798      	blx	r3
   3365a:	0002      	movs	r2, r0
   3365c:	2314      	movs	r3, #20
   3365e:	18fb      	adds	r3, r7, r3
   33660:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   33662:	68fb      	ldr	r3, [r7, #12]
   33664:	781b      	ldrb	r3, [r3, #0]
   33666:	b25b      	sxtb	r3, r3
   33668:	2214      	movs	r2, #20
   3366a:	18b9      	adds	r1, r7, r2
   3366c:	2210      	movs	r2, #16
   3366e:	0018      	movs	r0, r3
   33670:	4b1a      	ldr	r3, [pc, #104]	; (336dc <http_client_send_request+0x304>)
   33672:	4798      	blx	r3
   33674:	e004      	b.n	33680 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   33676:	68fb      	ldr	r3, [r7, #12]
   33678:	3301      	adds	r3, #1
   3367a:	0018      	movs	r0, r3
   3367c:	4b18      	ldr	r3, [pc, #96]	; (336e0 <http_client_send_request+0x308>)
   3367e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   33680:	68fb      	ldr	r3, [r7, #12]
   33682:	2201      	movs	r2, #1
   33684:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   33686:	e006      	b.n	33696 <http_client_send_request+0x2be>
			return -ENOSPC;
   33688:	231c      	movs	r3, #28
   3368a:	425b      	negs	r3, r3
   3368c:	e004      	b.n	33698 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   3368e:	230b      	movs	r3, #11
   33690:	425b      	negs	r3, r3
   33692:	e001      	b.n	33698 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   33694:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   33696:	2300      	movs	r3, #0
}
   33698:	0018      	movs	r0, r3
   3369a:	46bd      	mov	sp, r7
   3369c:	b00e      	add	sp, #56	; 0x38
   3369e:	bdb0      	pop	{r4, r5, r7, pc}
   336a0:	0003cf48 	.word	0x0003cf48
   336a4:	00037d31 	.word	0x00037d31
   336a8:	0003cf50 	.word	0x0003cf50
   336ac:	00037d23 	.word	0x00037d23
   336b0:	00037921 	.word	0x00037921
   336b4:	00037ce9 	.word	0x00037ce9
   336b8:	00037cd7 	.word	0x00037cd7
   336bc:	00037935 	.word	0x00037935
   336c0:	0003796b 	.word	0x0003796b
   336c4:	00033839 	.word	0x00033839
   336c8:	000336e5 	.word	0x000336e5
   336cc:	00027999 	.word	0x00027999
   336d0:	20004568 	.word	0x20004568
   336d4:	00033341 	.word	0x00033341
   336d8:	000280e5 	.word	0x000280e5
   336dc:	00027bad 	.word	0x00027bad
   336e0:	000281ed 	.word	0x000281ed

000336e4 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   336e4:	b580      	push	{r7, lr}
   336e6:	b086      	sub	sp, #24
   336e8:	af00      	add	r7, sp, #0
   336ea:	6078      	str	r0, [r7, #4]
   336ec:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   336ee:	687b      	ldr	r3, [r7, #4]
   336f0:	22c0      	movs	r2, #192	; 0xc0
   336f2:	589b      	ldr	r3, [r3, r2]
   336f4:	2b00      	cmp	r3, #0
   336f6:	d007      	beq.n	33708 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   336f8:	687b      	ldr	r3, [r7, #4]
   336fa:	22c0      	movs	r2, #192	; 0xc0
   336fc:	589b      	ldr	r3, [r3, r2]
   336fe:	687a      	ldr	r2, [r7, #4]
   33700:	21c4      	movs	r1, #196	; 0xc4
   33702:	5852      	ldr	r2, [r2, r1]
   33704:	0010      	movs	r0, r2
   33706:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   33708:	687b      	ldr	r3, [r7, #4]
   3370a:	33b0      	adds	r3, #176	; 0xb0
   3370c:	2218      	movs	r2, #24
   3370e:	2100      	movs	r1, #0
   33710:	0018      	movs	r0, r3
   33712:	4b24      	ldr	r3, [pc, #144]	; (337a4 <_http_client_clear_conn+0xc0>)
   33714:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   33716:	687b      	ldr	r3, [r7, #4]
   33718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3371a:	2b00      	cmp	r3, #0
   3371c:	d005      	beq.n	3372a <_http_client_clear_conn+0x46>
		close(module->sock);
   3371e:	687b      	ldr	r3, [r7, #4]
   33720:	781b      	ldrb	r3, [r3, #0]
   33722:	b25b      	sxtb	r3, r3
   33724:	0018      	movs	r0, r3
   33726:	4b20      	ldr	r3, [pc, #128]	; (337a8 <_http_client_clear_conn+0xc4>)
   33728:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3372a:	687b      	ldr	r3, [r7, #4]
   3372c:	781b      	ldrb	r3, [r3, #0]
   3372e:	b25b      	sxtb	r3, r3
   33730:	001a      	movs	r2, r3
   33732:	4b1e      	ldr	r3, [pc, #120]	; (337ac <_http_client_clear_conn+0xc8>)
   33734:	0092      	lsls	r2, r2, #2
   33736:	2100      	movs	r1, #0
   33738:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   3373a:	687b      	ldr	r3, [r7, #4]
   3373c:	336c      	adds	r3, #108	; 0x6c
   3373e:	226c      	movs	r2, #108	; 0x6c
   33740:	2100      	movs	r1, #0
   33742:	0018      	movs	r0, r3
   33744:	4b17      	ldr	r3, [pc, #92]	; (337a4 <_http_client_clear_conn+0xc0>)
   33746:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   33748:	687b      	ldr	r3, [r7, #4]
   3374a:	33d8      	adds	r3, #216	; 0xd8
   3374c:	2210      	movs	r2, #16
   3374e:	2100      	movs	r1, #0
   33750:	0018      	movs	r0, r3
   33752:	4b14      	ldr	r3, [pc, #80]	; (337a4 <_http_client_clear_conn+0xc0>)
   33754:	4798      	blx	r3
	module->req.state = STATE_INIT;
   33756:	687b      	ldr	r3, [r7, #4]
   33758:	2200      	movs	r2, #0
   3375a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3375c:	687b      	ldr	r3, [r7, #4]
   3375e:	22d8      	movs	r2, #216	; 0xd8
   33760:	2100      	movs	r1, #0
   33762:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   33764:	687b      	ldr	r3, [r7, #4]
   33766:	2241      	movs	r2, #65	; 0x41
   33768:	5c99      	ldrb	r1, [r3, r2]
   3376a:	2001      	movs	r0, #1
   3376c:	4381      	bics	r1, r0
   3376e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   33770:	687b      	ldr	r3, [r7, #4]
   33772:	2241      	movs	r2, #65	; 0x41
   33774:	5c99      	ldrb	r1, [r3, r2]
   33776:	2002      	movs	r0, #2
   33778:	4381      	bics	r1, r0
   3377a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   3377c:	230c      	movs	r3, #12
   3377e:	18fb      	adds	r3, r7, r3
   33780:	683a      	ldr	r2, [r7, #0]
   33782:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   33784:	687b      	ldr	r3, [r7, #4]
   33786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33788:	2b00      	cmp	r3, #0
   3378a:	d006      	beq.n	3379a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   3378c:	687b      	ldr	r3, [r7, #4]
   3378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33790:	220c      	movs	r2, #12
   33792:	18ba      	adds	r2, r7, r2
   33794:	6878      	ldr	r0, [r7, #4]
   33796:	2104      	movs	r1, #4
   33798:	4798      	blx	r3
	}
}
   3379a:	46c0      	nop			; (mov r8, r8)
   3379c:	46bd      	mov	sp, r7
   3379e:	b006      	add	sp, #24
   337a0:	bd80      	pop	{r7, pc}
   337a2:	46c0      	nop			; (mov r8, r8)
   337a4:	0003796b 	.word	0x0003796b
   337a8:	00027fa5 	.word	0x00027fa5
   337ac:	20004568 	.word	0x20004568

000337b0 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   337b0:	b590      	push	{r4, r7, lr}
   337b2:	b087      	sub	sp, #28
   337b4:	af00      	add	r7, sp, #0
   337b6:	60f8      	str	r0, [r7, #12]
   337b8:	60b9      	str	r1, [r7, #8]
   337ba:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   337bc:	68fb      	ldr	r3, [r7, #12]
   337be:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   337c0:	697b      	ldr	r3, [r7, #20]
   337c2:	2241      	movs	r2, #65	; 0x41
   337c4:	5c99      	ldrb	r1, [r3, r2]
   337c6:	2001      	movs	r0, #1
   337c8:	4301      	orrs	r1, r0
   337ca:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   337cc:	697b      	ldr	r3, [r7, #20]
   337ce:	2000      	movs	r0, #0
   337d0:	5618      	ldrsb	r0, [r3, r0]
   337d2:	687b      	ldr	r3, [r7, #4]
   337d4:	b29a      	uxth	r2, r3
   337d6:	68b9      	ldr	r1, [r7, #8]
   337d8:	2300      	movs	r3, #0
   337da:	4c14      	ldr	r4, [pc, #80]	; (3382c <_http_client_send_wait+0x7c>)
   337dc:	47a0      	blx	r4
   337de:	0003      	movs	r3, r0
   337e0:	613b      	str	r3, [r7, #16]
   337e2:	693b      	ldr	r3, [r7, #16]
   337e4:	2b00      	cmp	r3, #0
   337e6:	da0f      	bge.n	33808 <_http_client_send_wait+0x58>
		module->sending = 0;
   337e8:	697b      	ldr	r3, [r7, #20]
   337ea:	2241      	movs	r2, #65	; 0x41
   337ec:	5c99      	ldrb	r1, [r3, r2]
   337ee:	2001      	movs	r0, #1
   337f0:	4381      	bics	r1, r0
   337f2:	5499      	strb	r1, [r3, r2]
		return result;
   337f4:	693b      	ldr	r3, [r7, #16]
   337f6:	e014      	b.n	33822 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   337f8:	2000      	movs	r0, #0
   337fa:	4b0d      	ldr	r3, [pc, #52]	; (33830 <_http_client_send_wait+0x80>)
   337fc:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   337fe:	697b      	ldr	r3, [r7, #20]
   33800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   33802:	0018      	movs	r0, r3
   33804:	4b0b      	ldr	r3, [pc, #44]	; (33834 <_http_client_send_wait+0x84>)
   33806:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   33808:	697b      	ldr	r3, [r7, #20]
   3380a:	2241      	movs	r2, #65	; 0x41
   3380c:	5c9b      	ldrb	r3, [r3, r2]
   3380e:	2201      	movs	r2, #1
   33810:	4013      	ands	r3, r2
   33812:	b2db      	uxtb	r3, r3
   33814:	2b00      	cmp	r3, #0
   33816:	d003      	beq.n	33820 <_http_client_send_wait+0x70>
   33818:	697b      	ldr	r3, [r7, #20]
   3381a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3381c:	2b02      	cmp	r3, #2
   3381e:	d8eb      	bhi.n	337f8 <_http_client_send_wait+0x48>
	}

	return 0;
   33820:	2300      	movs	r3, #0
}
   33822:	0018      	movs	r0, r3
   33824:	46bd      	mov	sp, r7
   33826:	b007      	add	sp, #28
   33828:	bd90      	pop	{r4, r7, pc}
   3382a:	46c0      	nop			; (mov r8, r8)
   3382c:	00027cc1 	.word	0x00027cc1
   33830:	0002436d 	.word	0x0002436d
   33834:	00034abd 	.word	0x00034abd

00033838 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   33838:	b5f0      	push	{r4, r5, r6, r7, lr}
   3383a:	46c6      	mov	lr, r8
   3383c:	b500      	push	{lr}
   3383e:	b0a0      	sub	sp, #128	; 0x80
   33840:	af02      	add	r7, sp, #8
   33842:	61f8      	str	r0, [r7, #28]
   33844:	4668      	mov	r0, sp
   33846:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   33848:	2318      	movs	r3, #24
   3384a:	2218      	movs	r2, #24
   3384c:	18ba      	adds	r2, r7, r2
   3384e:	18d0      	adds	r0, r2, r3
   33850:	4bbd      	ldr	r3, [pc, #756]	; (33b48 <_http_client_request+0x310>)
   33852:	469c      	mov	ip, r3
   33854:	4663      	mov	r3, ip
   33856:	cb16      	ldmia	r3!, {r1, r2, r4}
   33858:	c016      	stmia	r0!, {r1, r2, r4}
   3385a:	469c      	mov	ip, r3
   3385c:	4663      	mov	r3, ip
   3385e:	681b      	ldr	r3, [r3, #0]
   33860:	469c      	mov	ip, r3
   33862:	4663      	mov	r3, ip
   33864:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   33866:	69f8      	ldr	r0, [r7, #28]
   33868:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3386a:	4684      	mov	ip, r0
   3386c:	2301      	movs	r3, #1
   3386e:	425b      	negs	r3, r3
   33870:	4698      	mov	r8, r3
   33872:	44c4      	add	ip, r8
   33874:	4663      	mov	r3, ip
   33876:	66fb      	str	r3, [r7, #108]	; 0x6c
   33878:	6038      	str	r0, [r7, #0]
   3387a:	2300      	movs	r3, #0
   3387c:	607b      	str	r3, [r7, #4]
   3387e:	6839      	ldr	r1, [r7, #0]
   33880:	687a      	ldr	r2, [r7, #4]
   33882:	000b      	movs	r3, r1
   33884:	0f5b      	lsrs	r3, r3, #29
   33886:	469c      	mov	ip, r3
   33888:	0013      	movs	r3, r2
   3388a:	00db      	lsls	r3, r3, #3
   3388c:	617b      	str	r3, [r7, #20]
   3388e:	4663      	mov	r3, ip
   33890:	697c      	ldr	r4, [r7, #20]
   33892:	431c      	orrs	r4, r3
   33894:	617c      	str	r4, [r7, #20]
   33896:	000b      	movs	r3, r1
   33898:	00db      	lsls	r3, r3, #3
   3389a:	613b      	str	r3, [r7, #16]
   3389c:	0005      	movs	r5, r0
   3389e:	2200      	movs	r2, #0
   338a0:	0016      	movs	r6, r2
   338a2:	0f6a      	lsrs	r2, r5, #29
   338a4:	00f3      	lsls	r3, r6, #3
   338a6:	60fb      	str	r3, [r7, #12]
   338a8:	68fb      	ldr	r3, [r7, #12]
   338aa:	4313      	orrs	r3, r2
   338ac:	60fb      	str	r3, [r7, #12]
   338ae:	00eb      	lsls	r3, r5, #3
   338b0:	60bb      	str	r3, [r7, #8]
   338b2:	1dc3      	adds	r3, r0, #7
   338b4:	08db      	lsrs	r3, r3, #3
   338b6:	00db      	lsls	r3, r3, #3
   338b8:	466a      	mov	r2, sp
   338ba:	1ad3      	subs	r3, r2, r3
   338bc:	469d      	mov	sp, r3
   338be:	ab02      	add	r3, sp, #8
   338c0:	3300      	adds	r3, #0
   338c2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   338c4:	69fb      	ldr	r3, [r7, #28]
   338c6:	2b00      	cmp	r3, #0
   338c8:	d100      	bne.n	338cc <_http_client_request+0x94>
   338ca:	e346      	b.n	33f5a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   338cc:	69fb      	ldr	r3, [r7, #28]
   338ce:	2241      	movs	r2, #65	; 0x41
   338d0:	5c9b      	ldrb	r3, [r3, r2]
   338d2:	2201      	movs	r2, #1
   338d4:	4013      	ands	r3, r2
   338d6:	b2db      	uxtb	r3, r3
   338d8:	2b00      	cmp	r3, #0
   338da:	d000      	beq.n	338de <_http_client_request+0xa6>
   338dc:	e33f      	b.n	33f5e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   338de:	69fb      	ldr	r3, [r7, #28]
   338e0:	33b0      	adds	r3, #176	; 0xb0
   338e2:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   338e4:	69fb      	ldr	r3, [r7, #28]
   338e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   338e8:	2b03      	cmp	r3, #3
   338ea:	d003      	beq.n	338f4 <_http_client_request+0xbc>
   338ec:	2b04      	cmp	r3, #4
   338ee:	d100      	bne.n	338f2 <_http_client_request+0xba>
   338f0:	e1b3      	b.n	33c5a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   338f2:	e32f      	b.n	33f54 <_http_client_request+0x71c>
		module->req.content_length = 0;
   338f4:	69fb      	ldr	r3, [r7, #28]
   338f6:	22cc      	movs	r2, #204	; 0xcc
   338f8:	2100      	movs	r1, #0
   338fa:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   338fc:	69fb      	ldr	r3, [r7, #28]
   338fe:	22d0      	movs	r2, #208	; 0xd0
   33900:	2100      	movs	r1, #0
   33902:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   33904:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33906:	69fb      	ldr	r3, [r7, #28]
   33908:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3390a:	4c90      	ldr	r4, [pc, #576]	; (33b4c <_http_client_request+0x314>)
   3390c:	2334      	movs	r3, #52	; 0x34
   3390e:	2018      	movs	r0, #24
   33910:	1838      	adds	r0, r7, r0
   33912:	18c0      	adds	r0, r0, r3
   33914:	69fb      	ldr	r3, [r7, #28]
   33916:	9300      	str	r3, [sp, #0]
   33918:	0023      	movs	r3, r4
   3391a:	4c8d      	ldr	r4, [pc, #564]	; (33b50 <_http_client_request+0x318>)
   3391c:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   3391e:	69fb      	ldr	r3, [r7, #28]
   33920:	22c8      	movs	r2, #200	; 0xc8
   33922:	5c9b      	ldrb	r3, [r3, r2]
   33924:	2b01      	cmp	r3, #1
   33926:	d10a      	bne.n	3393e <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   33928:	498a      	ldr	r1, [pc, #552]	; (33b54 <_http_client_request+0x31c>)
   3392a:	2334      	movs	r3, #52	; 0x34
   3392c:	2218      	movs	r2, #24
   3392e:	4694      	mov	ip, r2
   33930:	44bc      	add	ip, r7
   33932:	4463      	add	r3, ip
   33934:	2204      	movs	r2, #4
   33936:	0018      	movs	r0, r3
   33938:	4b87      	ldr	r3, [pc, #540]	; (33b58 <_http_client_request+0x320>)
   3393a:	4798      	blx	r3
   3393c:	e04e      	b.n	339dc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   3393e:	69fb      	ldr	r3, [r7, #28]
   33940:	22c8      	movs	r2, #200	; 0xc8
   33942:	5c9b      	ldrb	r3, [r3, r2]
   33944:	2b02      	cmp	r3, #2
   33946:	d10a      	bne.n	3395e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   33948:	4984      	ldr	r1, [pc, #528]	; (33b5c <_http_client_request+0x324>)
   3394a:	2334      	movs	r3, #52	; 0x34
   3394c:	2218      	movs	r2, #24
   3394e:	4694      	mov	ip, r2
   33950:	44bc      	add	ip, r7
   33952:	4463      	add	r3, ip
   33954:	2205      	movs	r2, #5
   33956:	0018      	movs	r0, r3
   33958:	4b7f      	ldr	r3, [pc, #508]	; (33b58 <_http_client_request+0x320>)
   3395a:	4798      	blx	r3
   3395c:	e03e      	b.n	339dc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   3395e:	69fb      	ldr	r3, [r7, #28]
   33960:	22c8      	movs	r2, #200	; 0xc8
   33962:	5c9b      	ldrb	r3, [r3, r2]
   33964:	2b03      	cmp	r3, #3
   33966:	d10a      	bne.n	3397e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   33968:	497d      	ldr	r1, [pc, #500]	; (33b60 <_http_client_request+0x328>)
   3396a:	2334      	movs	r3, #52	; 0x34
   3396c:	2218      	movs	r2, #24
   3396e:	4694      	mov	ip, r2
   33970:	44bc      	add	ip, r7
   33972:	4463      	add	r3, ip
   33974:	2207      	movs	r2, #7
   33976:	0018      	movs	r0, r3
   33978:	4b77      	ldr	r3, [pc, #476]	; (33b58 <_http_client_request+0x320>)
   3397a:	4798      	blx	r3
   3397c:	e02e      	b.n	339dc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3397e:	69fb      	ldr	r3, [r7, #28]
   33980:	22c8      	movs	r2, #200	; 0xc8
   33982:	5c9b      	ldrb	r3, [r3, r2]
   33984:	2b04      	cmp	r3, #4
   33986:	d10a      	bne.n	3399e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   33988:	4976      	ldr	r1, [pc, #472]	; (33b64 <_http_client_request+0x32c>)
   3398a:	2334      	movs	r3, #52	; 0x34
   3398c:	2218      	movs	r2, #24
   3398e:	4694      	mov	ip, r2
   33990:	44bc      	add	ip, r7
   33992:	4463      	add	r3, ip
   33994:	2204      	movs	r2, #4
   33996:	0018      	movs	r0, r3
   33998:	4b6f      	ldr	r3, [pc, #444]	; (33b58 <_http_client_request+0x320>)
   3399a:	4798      	blx	r3
   3399c:	e01e      	b.n	339dc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3399e:	69fb      	ldr	r3, [r7, #28]
   339a0:	22c8      	movs	r2, #200	; 0xc8
   339a2:	5c9b      	ldrb	r3, [r3, r2]
   339a4:	2b05      	cmp	r3, #5
   339a6:	d10a      	bne.n	339be <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   339a8:	496f      	ldr	r1, [pc, #444]	; (33b68 <_http_client_request+0x330>)
   339aa:	2334      	movs	r3, #52	; 0x34
   339ac:	2218      	movs	r2, #24
   339ae:	4694      	mov	ip, r2
   339b0:	44bc      	add	ip, r7
   339b2:	4463      	add	r3, ip
   339b4:	2208      	movs	r2, #8
   339b6:	0018      	movs	r0, r3
   339b8:	4b67      	ldr	r3, [pc, #412]	; (33b58 <_http_client_request+0x320>)
   339ba:	4798      	blx	r3
   339bc:	e00e      	b.n	339dc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   339be:	69fb      	ldr	r3, [r7, #28]
   339c0:	22c8      	movs	r2, #200	; 0xc8
   339c2:	5c9b      	ldrb	r3, [r3, r2]
   339c4:	2b06      	cmp	r3, #6
   339c6:	d109      	bne.n	339dc <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   339c8:	4968      	ldr	r1, [pc, #416]	; (33b6c <_http_client_request+0x334>)
   339ca:	2334      	movs	r3, #52	; 0x34
   339cc:	2218      	movs	r2, #24
   339ce:	4694      	mov	ip, r2
   339d0:	44bc      	add	ip, r7
   339d2:	4463      	add	r3, ip
   339d4:	2205      	movs	r2, #5
   339d6:	0018      	movs	r0, r3
   339d8:	4b5f      	ldr	r3, [pc, #380]	; (33b58 <_http_client_request+0x320>)
   339da:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   339dc:	69fb      	ldr	r3, [r7, #28]
   339de:	3370      	adds	r3, #112	; 0x70
   339e0:	001c      	movs	r4, r3
   339e2:	69fb      	ldr	r3, [r7, #28]
   339e4:	3370      	adds	r3, #112	; 0x70
   339e6:	0018      	movs	r0, r3
   339e8:	4b61      	ldr	r3, [pc, #388]	; (33b70 <_http_client_request+0x338>)
   339ea:	4798      	blx	r3
   339ec:	0002      	movs	r2, r0
   339ee:	2334      	movs	r3, #52	; 0x34
   339f0:	2118      	movs	r1, #24
   339f2:	468c      	mov	ip, r1
   339f4:	44bc      	add	ip, r7
   339f6:	4463      	add	r3, ip
   339f8:	0021      	movs	r1, r4
   339fa:	0018      	movs	r0, r3
   339fc:	4b56      	ldr	r3, [pc, #344]	; (33b58 <_http_client_request+0x320>)
   339fe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   33a00:	495c      	ldr	r1, [pc, #368]	; (33b74 <_http_client_request+0x33c>)
   33a02:	2334      	movs	r3, #52	; 0x34
   33a04:	2218      	movs	r2, #24
   33a06:	4694      	mov	ip, r2
   33a08:	44bc      	add	ip, r7
   33a0a:	4463      	add	r3, ip
   33a0c:	220b      	movs	r2, #11
   33a0e:	0018      	movs	r0, r3
   33a10:	4b51      	ldr	r3, [pc, #324]	; (33b58 <_http_client_request+0x320>)
   33a12:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   33a14:	4958      	ldr	r1, [pc, #352]	; (33b78 <_http_client_request+0x340>)
   33a16:	2334      	movs	r3, #52	; 0x34
   33a18:	2218      	movs	r2, #24
   33a1a:	4694      	mov	ip, r2
   33a1c:	44bc      	add	ip, r7
   33a1e:	4463      	add	r3, ip
   33a20:	220c      	movs	r2, #12
   33a22:	0018      	movs	r0, r3
   33a24:	4b4c      	ldr	r3, [pc, #304]	; (33b58 <_http_client_request+0x320>)
   33a26:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   33a28:	69fb      	ldr	r3, [r7, #28]
   33a2a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   33a2c:	69fb      	ldr	r3, [r7, #28]
   33a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   33a30:	0018      	movs	r0, r3
   33a32:	4b4f      	ldr	r3, [pc, #316]	; (33b70 <_http_client_request+0x338>)
   33a34:	4798      	blx	r3
   33a36:	0002      	movs	r2, r0
   33a38:	2334      	movs	r3, #52	; 0x34
   33a3a:	2118      	movs	r1, #24
   33a3c:	468c      	mov	ip, r1
   33a3e:	44bc      	add	ip, r7
   33a40:	4463      	add	r3, ip
   33a42:	0021      	movs	r1, r4
   33a44:	0018      	movs	r0, r3
   33a46:	4b44      	ldr	r3, [pc, #272]	; (33b58 <_http_client_request+0x320>)
   33a48:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33a4a:	494c      	ldr	r1, [pc, #304]	; (33b7c <_http_client_request+0x344>)
   33a4c:	2334      	movs	r3, #52	; 0x34
   33a4e:	2218      	movs	r2, #24
   33a50:	4694      	mov	ip, r2
   33a52:	44bc      	add	ip, r7
   33a54:	4463      	add	r3, ip
   33a56:	2202      	movs	r2, #2
   33a58:	0018      	movs	r0, r3
   33a5a:	4b3f      	ldr	r3, [pc, #252]	; (33b58 <_http_client_request+0x320>)
   33a5c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   33a5e:	4948      	ldr	r1, [pc, #288]	; (33b80 <_http_client_request+0x348>)
   33a60:	2334      	movs	r3, #52	; 0x34
   33a62:	2218      	movs	r2, #24
   33a64:	4694      	mov	ip, r2
   33a66:	44bc      	add	ip, r7
   33a68:	4463      	add	r3, ip
   33a6a:	2206      	movs	r2, #6
   33a6c:	0018      	movs	r0, r3
   33a6e:	4b3a      	ldr	r3, [pc, #232]	; (33b58 <_http_client_request+0x320>)
   33a70:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   33a72:	69fb      	ldr	r3, [r7, #28]
   33a74:	1c5c      	adds	r4, r3, #1
   33a76:	69fb      	ldr	r3, [r7, #28]
   33a78:	3301      	adds	r3, #1
   33a7a:	0018      	movs	r0, r3
   33a7c:	4b3c      	ldr	r3, [pc, #240]	; (33b70 <_http_client_request+0x338>)
   33a7e:	4798      	blx	r3
   33a80:	0002      	movs	r2, r0
   33a82:	2334      	movs	r3, #52	; 0x34
   33a84:	2118      	movs	r1, #24
   33a86:	468c      	mov	ip, r1
   33a88:	44bc      	add	ip, r7
   33a8a:	4463      	add	r3, ip
   33a8c:	0021      	movs	r1, r4
   33a8e:	0018      	movs	r0, r3
   33a90:	4b31      	ldr	r3, [pc, #196]	; (33b58 <_http_client_request+0x320>)
   33a92:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33a94:	4939      	ldr	r1, [pc, #228]	; (33b7c <_http_client_request+0x344>)
   33a96:	2334      	movs	r3, #52	; 0x34
   33a98:	2218      	movs	r2, #24
   33a9a:	4694      	mov	ip, r2
   33a9c:	44bc      	add	ip, r7
   33a9e:	4463      	add	r3, ip
   33aa0:	2202      	movs	r2, #2
   33aa2:	0018      	movs	r0, r3
   33aa4:	4b2c      	ldr	r3, [pc, #176]	; (33b58 <_http_client_request+0x320>)
   33aa6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   33aa8:	4936      	ldr	r1, [pc, #216]	; (33b84 <_http_client_request+0x34c>)
   33aaa:	2334      	movs	r3, #52	; 0x34
   33aac:	2218      	movs	r2, #24
   33aae:	4694      	mov	ip, r2
   33ab0:	44bc      	add	ip, r7
   33ab2:	4463      	add	r3, ip
   33ab4:	2218      	movs	r2, #24
   33ab6:	0018      	movs	r0, r3
   33ab8:	4b27      	ldr	r3, [pc, #156]	; (33b58 <_http_client_request+0x320>)
   33aba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   33abc:	4932      	ldr	r1, [pc, #200]	; (33b88 <_http_client_request+0x350>)
   33abe:	2334      	movs	r3, #52	; 0x34
   33ac0:	2218      	movs	r2, #24
   33ac2:	4694      	mov	ip, r2
   33ac4:	44bc      	add	ip, r7
   33ac6:	4463      	add	r3, ip
   33ac8:	2213      	movs	r2, #19
   33aca:	0018      	movs	r0, r3
   33acc:	4b22      	ldr	r3, [pc, #136]	; (33b58 <_http_client_request+0x320>)
   33ace:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   33ad0:	492e      	ldr	r1, [pc, #184]	; (33b8c <_http_client_request+0x354>)
   33ad2:	2334      	movs	r3, #52	; 0x34
   33ad4:	2218      	movs	r2, #24
   33ad6:	4694      	mov	ip, r2
   33ad8:	44bc      	add	ip, r7
   33ada:	4463      	add	r3, ip
   33adc:	2217      	movs	r2, #23
   33ade:	0018      	movs	r0, r3
   33ae0:	4b1d      	ldr	r3, [pc, #116]	; (33b58 <_http_client_request+0x320>)
   33ae2:	4798      	blx	r3
		if (entity->read != NULL) {
   33ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33ae6:	68db      	ldr	r3, [r3, #12]
   33ae8:	2b00      	cmp	r3, #0
   33aea:	d100      	bne.n	33aee <_http_client_request+0x2b6>
   33aec:	e088      	b.n	33c00 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   33aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33af0:	781b      	ldrb	r3, [r3, #0]
   33af2:	2b00      	cmp	r3, #0
   33af4:	d00f      	beq.n	33b16 <_http_client_request+0x2de>
				module->req.content_length = -1;
   33af6:	69fb      	ldr	r3, [r7, #28]
   33af8:	21cc      	movs	r1, #204	; 0xcc
   33afa:	2201      	movs	r2, #1
   33afc:	4252      	negs	r2, r2
   33afe:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   33b00:	4923      	ldr	r1, [pc, #140]	; (33b90 <_http_client_request+0x358>)
   33b02:	2334      	movs	r3, #52	; 0x34
   33b04:	2218      	movs	r2, #24
   33b06:	4694      	mov	ip, r2
   33b08:	44bc      	add	ip, r7
   33b0a:	4463      	add	r3, ip
   33b0c:	221c      	movs	r2, #28
   33b0e:	0018      	movs	r0, r3
   33b10:	4b11      	ldr	r3, [pc, #68]	; (33b58 <_http_client_request+0x320>)
   33b12:	4798      	blx	r3
   33b14:	e074      	b.n	33c00 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   33b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33b18:	689b      	ldr	r3, [r3, #8]
   33b1a:	2b00      	cmp	r3, #0
   33b1c:	d070      	beq.n	33c00 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   33b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33b20:	689a      	ldr	r2, [r3, #8]
   33b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33b24:	695b      	ldr	r3, [r3, #20]
   33b26:	0018      	movs	r0, r3
   33b28:	4790      	blx	r2
   33b2a:	0001      	movs	r1, r0
   33b2c:	69fb      	ldr	r3, [r7, #28]
   33b2e:	22cc      	movs	r2, #204	; 0xcc
   33b30:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   33b32:	69fb      	ldr	r3, [r7, #28]
   33b34:	22cc      	movs	r2, #204	; 0xcc
   33b36:	589b      	ldr	r3, [r3, r2]
   33b38:	2b00      	cmp	r3, #0
   33b3a:	da2b      	bge.n	33b94 <_http_client_request+0x35c>
					module->req.content_length = 0;
   33b3c:	69fb      	ldr	r3, [r7, #28]
   33b3e:	22cc      	movs	r2, #204	; 0xcc
   33b40:	2100      	movs	r1, #0
   33b42:	5099      	str	r1, [r3, r2]
   33b44:	e05c      	b.n	33c00 <_http_client_request+0x3c8>
   33b46:	46c0      	nop			; (mov r8, r8)
   33b48:	0003d038 	.word	0x0003d038
   33b4c:	000337b1 	.word	0x000337b1
   33b50:	00034719 	.word	0x00034719
   33b54:	0003cf5c 	.word	0x0003cf5c
   33b58:	00034799 	.word	0x00034799
   33b5c:	0003cf64 	.word	0x0003cf64
   33b60:	0003cf6c 	.word	0x0003cf6c
   33b64:	0003cf74 	.word	0x0003cf74
   33b68:	0003cf7c 	.word	0x0003cf7c
   33b6c:	0003cf88 	.word	0x0003cf88
   33b70:	00037d23 	.word	0x00037d23
   33b74:	0003cf90 	.word	0x0003cf90
   33b78:	0003cf9c 	.word	0x0003cf9c
   33b7c:	0003cfac 	.word	0x0003cfac
   33b80:	0003cfb0 	.word	0x0003cfb0
   33b84:	0003cfb8 	.word	0x0003cfb8
   33b88:	0003cfd4 	.word	0x0003cfd4
   33b8c:	0003cfe8 	.word	0x0003cfe8
   33b90:	0003d000 	.word	0x0003d000
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   33b94:	69fb      	ldr	r3, [r7, #28]
   33b96:	22cc      	movs	r2, #204	; 0xcc
   33b98:	589b      	ldr	r3, [r3, r2]
   33b9a:	001a      	movs	r2, r3
   33b9c:	49e0      	ldr	r1, [pc, #896]	; (33f20 <_http_client_request+0x6e8>)
   33b9e:	2328      	movs	r3, #40	; 0x28
   33ba0:	2018      	movs	r0, #24
   33ba2:	4684      	mov	ip, r0
   33ba4:	44bc      	add	ip, r7
   33ba6:	4463      	add	r3, ip
   33ba8:	0018      	movs	r0, r3
   33baa:	4bde      	ldr	r3, [pc, #888]	; (33f24 <_http_client_request+0x6ec>)
   33bac:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   33bae:	49de      	ldr	r1, [pc, #888]	; (33f28 <_http_client_request+0x6f0>)
   33bb0:	2334      	movs	r3, #52	; 0x34
   33bb2:	2218      	movs	r2, #24
   33bb4:	4694      	mov	ip, r2
   33bb6:	44bc      	add	ip, r7
   33bb8:	4463      	add	r3, ip
   33bba:	2210      	movs	r2, #16
   33bbc:	0018      	movs	r0, r3
   33bbe:	4bdb      	ldr	r3, [pc, #876]	; (33f2c <_http_client_request+0x6f4>)
   33bc0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   33bc2:	2328      	movs	r3, #40	; 0x28
   33bc4:	2218      	movs	r2, #24
   33bc6:	4694      	mov	ip, r2
   33bc8:	44bc      	add	ip, r7
   33bca:	4463      	add	r3, ip
   33bcc:	0018      	movs	r0, r3
   33bce:	4bd8      	ldr	r3, [pc, #864]	; (33f30 <_http_client_request+0x6f8>)
   33bd0:	4798      	blx	r3
   33bd2:	0002      	movs	r2, r0
   33bd4:	2328      	movs	r3, #40	; 0x28
   33bd6:	2118      	movs	r1, #24
   33bd8:	1879      	adds	r1, r7, r1
   33bda:	18c9      	adds	r1, r1, r3
   33bdc:	2334      	movs	r3, #52	; 0x34
   33bde:	2018      	movs	r0, #24
   33be0:	4684      	mov	ip, r0
   33be2:	44bc      	add	ip, r7
   33be4:	4463      	add	r3, ip
   33be6:	0018      	movs	r0, r3
   33be8:	4bd0      	ldr	r3, [pc, #832]	; (33f2c <_http_client_request+0x6f4>)
   33bea:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33bec:	49d1      	ldr	r1, [pc, #836]	; (33f34 <_http_client_request+0x6fc>)
   33bee:	2334      	movs	r3, #52	; 0x34
   33bf0:	2218      	movs	r2, #24
   33bf2:	4694      	mov	ip, r2
   33bf4:	44bc      	add	ip, r7
   33bf6:	4463      	add	r3, ip
   33bf8:	2202      	movs	r2, #2
   33bfa:	0018      	movs	r0, r3
   33bfc:	4bcb      	ldr	r3, [pc, #812]	; (33f2c <_http_client_request+0x6f4>)
   33bfe:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   33c00:	69fb      	ldr	r3, [r7, #28]
   33c02:	22d4      	movs	r2, #212	; 0xd4
   33c04:	589b      	ldr	r3, [r3, r2]
   33c06:	2b00      	cmp	r3, #0
   33c08:	d012      	beq.n	33c30 <_http_client_request+0x3f8>
				module->req.ext_header,
   33c0a:	69fb      	ldr	r3, [r7, #28]
   33c0c:	22d4      	movs	r2, #212	; 0xd4
   33c0e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   33c10:	69fb      	ldr	r3, [r7, #28]
   33c12:	22d4      	movs	r2, #212	; 0xd4
   33c14:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   33c16:	0018      	movs	r0, r3
   33c18:	4bc5      	ldr	r3, [pc, #788]	; (33f30 <_http_client_request+0x6f8>)
   33c1a:	4798      	blx	r3
   33c1c:	0002      	movs	r2, r0
   33c1e:	2334      	movs	r3, #52	; 0x34
   33c20:	2118      	movs	r1, #24
   33c22:	468c      	mov	ip, r1
   33c24:	44bc      	add	ip, r7
   33c26:	4463      	add	r3, ip
   33c28:	0021      	movs	r1, r4
   33c2a:	0018      	movs	r0, r3
   33c2c:	4bbf      	ldr	r3, [pc, #764]	; (33f2c <_http_client_request+0x6f4>)
   33c2e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33c30:	49c0      	ldr	r1, [pc, #768]	; (33f34 <_http_client_request+0x6fc>)
   33c32:	2334      	movs	r3, #52	; 0x34
   33c34:	2218      	movs	r2, #24
   33c36:	4694      	mov	ip, r2
   33c38:	44bc      	add	ip, r7
   33c3a:	4463      	add	r3, ip
   33c3c:	2202      	movs	r2, #2
   33c3e:	0018      	movs	r0, r3
   33c40:	4bba      	ldr	r3, [pc, #744]	; (33f2c <_http_client_request+0x6f4>)
   33c42:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   33c44:	2334      	movs	r3, #52	; 0x34
   33c46:	2218      	movs	r2, #24
   33c48:	4694      	mov	ip, r2
   33c4a:	44bc      	add	ip, r7
   33c4c:	4463      	add	r3, ip
   33c4e:	0018      	movs	r0, r3
   33c50:	4bb9      	ldr	r3, [pc, #740]	; (33f38 <_http_client_request+0x700>)
   33c52:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   33c54:	69fb      	ldr	r3, [r7, #28]
   33c56:	2204      	movs	r2, #4
   33c58:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   33c5a:	69fb      	ldr	r3, [r7, #28]
   33c5c:	22cc      	movs	r2, #204	; 0xcc
   33c5e:	589b      	ldr	r3, [r3, r2]
   33c60:	2b00      	cmp	r3, #0
   33c62:	db00      	blt.n	33c66 <_http_client_request+0x42e>
   33c64:	e0c6      	b.n	33df4 <_http_client_request+0x5bc>
   33c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c68:	68db      	ldr	r3, [r3, #12]
   33c6a:	2b00      	cmp	r3, #0
   33c6c:	d100      	bne.n	33c70 <_http_client_request+0x438>
   33c6e:	e0c1      	b.n	33df4 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c72:	68dc      	ldr	r4, [r3, #12]
   33c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c76:	6958      	ldr	r0, [r3, #20]
   33c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33c7a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   33c7c:	69fb      	ldr	r3, [r7, #28]
   33c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33c80:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   33c82:	69fb      	ldr	r3, [r7, #28]
   33c84:	22d0      	movs	r2, #208	; 0xd0
   33c86:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33c88:	002a      	movs	r2, r5
   33c8a:	47a0      	blx	r4
   33c8c:	0003      	movs	r3, r0
   33c8e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   33c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c92:	2b00      	cmp	r3, #0
   33c94:	da01      	bge.n	33c9a <_http_client_request+0x462>
				size = 0;
   33c96:	2300      	movs	r3, #0
   33c98:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   33c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33c9c:	220a      	movs	r2, #10
   33c9e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   33ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33ca2:	220d      	movs	r2, #13
   33ca4:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   33ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ca8:	3305      	adds	r3, #5
   33caa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   33cac:	210d      	movs	r1, #13
   33cae:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   33cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33cb2:	3306      	adds	r3, #6
   33cb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
   33cb6:	210a      	movs	r1, #10
   33cb8:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   33cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33cbc:	2b00      	cmp	r3, #0
   33cbe:	db14      	blt.n	33cea <_http_client_request+0x4b2>
				ptr = buffer + 2;
   33cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33cc2:	3302      	adds	r3, #2
   33cc4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   33cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33cc8:	4a9c      	ldr	r2, [pc, #624]	; (33f3c <_http_client_request+0x704>)
   33cca:	4013      	ands	r3, r2
   33ccc:	d504      	bpl.n	33cd8 <_http_client_request+0x4a0>
   33cce:	3b01      	subs	r3, #1
   33cd0:	2210      	movs	r2, #16
   33cd2:	4252      	negs	r2, r2
   33cd4:	4313      	orrs	r3, r2
   33cd6:	3301      	adds	r3, #1
   33cd8:	001a      	movs	r2, r3
   33cda:	2318      	movs	r3, #24
   33cdc:	2118      	movs	r1, #24
   33cde:	468c      	mov	ip, r1
   33ce0:	44bc      	add	ip, r7
   33ce2:	4463      	add	r3, ip
   33ce4:	5c9a      	ldrb	r2, [r3, r2]
   33ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33ce8:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   33cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33cec:	2b0f      	cmp	r3, #15
   33cee:	dd19      	ble.n	33d24 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   33cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33cf2:	3301      	adds	r3, #1
   33cf4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   33cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33cf8:	2b00      	cmp	r3, #0
   33cfa:	da00      	bge.n	33cfe <_http_client_request+0x4c6>
   33cfc:	330f      	adds	r3, #15
   33cfe:	111b      	asrs	r3, r3, #4
   33d00:	001a      	movs	r2, r3
   33d02:	4b8e      	ldr	r3, [pc, #568]	; (33f3c <_http_client_request+0x704>)
   33d04:	4013      	ands	r3, r2
   33d06:	d504      	bpl.n	33d12 <_http_client_request+0x4da>
   33d08:	3b01      	subs	r3, #1
   33d0a:	2210      	movs	r2, #16
   33d0c:	4252      	negs	r2, r2
   33d0e:	4313      	orrs	r3, r2
   33d10:	3301      	adds	r3, #1
   33d12:	001a      	movs	r2, r3
   33d14:	2318      	movs	r3, #24
   33d16:	2118      	movs	r1, #24
   33d18:	468c      	mov	ip, r1
   33d1a:	44bc      	add	ip, r7
   33d1c:	4463      	add	r3, ip
   33d1e:	5c9a      	ldrb	r2, [r3, r2]
   33d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33d22:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   33d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d26:	2bff      	cmp	r3, #255	; 0xff
   33d28:	dd18      	ble.n	33d5c <_http_client_request+0x524>
				ptr = buffer;
   33d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33d2c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   33d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d30:	2b00      	cmp	r3, #0
   33d32:	da00      	bge.n	33d36 <_http_client_request+0x4fe>
   33d34:	33ff      	adds	r3, #255	; 0xff
   33d36:	121b      	asrs	r3, r3, #8
   33d38:	001a      	movs	r2, r3
   33d3a:	4b80      	ldr	r3, [pc, #512]	; (33f3c <_http_client_request+0x704>)
   33d3c:	4013      	ands	r3, r2
   33d3e:	d504      	bpl.n	33d4a <_http_client_request+0x512>
   33d40:	3b01      	subs	r3, #1
   33d42:	2210      	movs	r2, #16
   33d44:	4252      	negs	r2, r2
   33d46:	4313      	orrs	r3, r2
   33d48:	3301      	adds	r3, #1
   33d4a:	001a      	movs	r2, r3
   33d4c:	2318      	movs	r3, #24
   33d4e:	2118      	movs	r1, #24
   33d50:	468c      	mov	ip, r1
   33d52:	44bc      	add	ip, r7
   33d54:	4463      	add	r3, ip
   33d56:	5c9a      	ldrb	r2, [r3, r2]
   33d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33d5a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   33d5c:	69fb      	ldr	r3, [r7, #28]
   33d5e:	2000      	movs	r0, #0
   33d60:	5618      	ldrsb	r0, [r3, r0]
   33d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33d64:	3303      	adds	r3, #3
   33d66:	001a      	movs	r2, r3
   33d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33d6a:	1ad3      	subs	r3, r2, r3
   33d6c:	b29a      	uxth	r2, r3
   33d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d70:	b29b      	uxth	r3, r3
   33d72:	18d3      	adds	r3, r2, r3
   33d74:	b29b      	uxth	r3, r3
   33d76:	3304      	adds	r3, #4
   33d78:	b29a      	uxth	r2, r3
   33d7a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   33d7c:	2300      	movs	r3, #0
   33d7e:	4c70      	ldr	r4, [pc, #448]	; (33f40 <_http_client_request+0x708>)
   33d80:	47a0      	blx	r4
   33d82:	0003      	movs	r3, r0
   33d84:	663b      	str	r3, [r7, #96]	; 0x60
   33d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   33d88:	2b00      	cmp	r3, #0
   33d8a:	da07      	bge.n	33d9c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   33d8c:	2305      	movs	r3, #5
   33d8e:	425a      	negs	r2, r3
   33d90:	69fb      	ldr	r3, [r7, #28]
   33d92:	0011      	movs	r1, r2
   33d94:	0018      	movs	r0, r3
   33d96:	4b6b      	ldr	r3, [pc, #428]	; (33f44 <_http_client_request+0x70c>)
   33d98:	4798      	blx	r3
				return;
   33d9a:	e0e1      	b.n	33f60 <_http_client_request+0x728>
			module->req.sent_length += size;
   33d9c:	69fb      	ldr	r3, [r7, #28]
   33d9e:	22d0      	movs	r2, #208	; 0xd0
   33da0:	589a      	ldr	r2, [r3, r2]
   33da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33da4:	18d2      	adds	r2, r2, r3
   33da6:	69fb      	ldr	r3, [r7, #28]
   33da8:	21d0      	movs	r1, #208	; 0xd0
   33daa:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   33dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33dae:	2b00      	cmp	r3, #0
   33db0:	d000      	beq.n	33db4 <_http_client_request+0x57c>
   33db2:	e0c9      	b.n	33f48 <_http_client_request+0x710>
				if (module->req.entity.close) {
   33db4:	69fb      	ldr	r3, [r7, #28]
   33db6:	22c0      	movs	r2, #192	; 0xc0
   33db8:	589b      	ldr	r3, [r3, r2]
   33dba:	2b00      	cmp	r3, #0
   33dbc:	d007      	beq.n	33dce <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   33dbe:	69fb      	ldr	r3, [r7, #28]
   33dc0:	22c0      	movs	r2, #192	; 0xc0
   33dc2:	589b      	ldr	r3, [r3, r2]
   33dc4:	69fa      	ldr	r2, [r7, #28]
   33dc6:	21c4      	movs	r1, #196	; 0xc4
   33dc8:	5852      	ldr	r2, [r2, r1]
   33dca:	0010      	movs	r0, r2
   33dcc:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   33dce:	69fb      	ldr	r3, [r7, #28]
   33dd0:	2202      	movs	r2, #2
   33dd2:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   33dd4:	69fb      	ldr	r3, [r7, #28]
   33dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33dd8:	2b00      	cmp	r3, #0
   33dda:	d100      	bne.n	33dde <_http_client_request+0x5a6>
   33ddc:	e0b5      	b.n	33f4a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33dde:	69fb      	ldr	r3, [r7, #28]
   33de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33de2:	220c      	movs	r2, #12
   33de4:	2118      	movs	r1, #24
   33de6:	468c      	mov	ip, r1
   33de8:	44bc      	add	ip, r7
   33dea:	4462      	add	r2, ip
   33dec:	69f8      	ldr	r0, [r7, #28]
   33dee:	2101      	movs	r1, #1
   33df0:	4798      	blx	r3
				break;
   33df2:	e0aa      	b.n	33f4a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   33df4:	69fb      	ldr	r3, [r7, #28]
   33df6:	22cc      	movs	r2, #204	; 0xcc
   33df8:	589b      	ldr	r3, [r3, r2]
   33dfa:	2b00      	cmp	r3, #0
   33dfc:	dc00      	bgt.n	33e00 <_http_client_request+0x5c8>
   33dfe:	e07c      	b.n	33efa <_http_client_request+0x6c2>
   33e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33e02:	68db      	ldr	r3, [r3, #12]
   33e04:	2b00      	cmp	r3, #0
   33e06:	d100      	bne.n	33e0a <_http_client_request+0x5d2>
   33e08:	e077      	b.n	33efa <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   33e0a:	69fb      	ldr	r3, [r7, #28]
   33e0c:	22d0      	movs	r2, #208	; 0xd0
   33e0e:	589a      	ldr	r2, [r3, r2]
   33e10:	69fb      	ldr	r3, [r7, #28]
   33e12:	21cc      	movs	r1, #204	; 0xcc
   33e14:	585b      	ldr	r3, [r3, r1]
   33e16:	429a      	cmp	r2, r3
   33e18:	db1f      	blt.n	33e5a <_http_client_request+0x622>
				if (module->req.entity.close) {
   33e1a:	69fb      	ldr	r3, [r7, #28]
   33e1c:	22c0      	movs	r2, #192	; 0xc0
   33e1e:	589b      	ldr	r3, [r3, r2]
   33e20:	2b00      	cmp	r3, #0
   33e22:	d007      	beq.n	33e34 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   33e24:	69fb      	ldr	r3, [r7, #28]
   33e26:	22c0      	movs	r2, #192	; 0xc0
   33e28:	589b      	ldr	r3, [r3, r2]
   33e2a:	69fa      	ldr	r2, [r7, #28]
   33e2c:	21c4      	movs	r1, #196	; 0xc4
   33e2e:	5852      	ldr	r2, [r2, r1]
   33e30:	0010      	movs	r0, r2
   33e32:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   33e34:	69fb      	ldr	r3, [r7, #28]
   33e36:	2202      	movs	r2, #2
   33e38:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   33e3a:	69fb      	ldr	r3, [r7, #28]
   33e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33e3e:	2b00      	cmp	r3, #0
   33e40:	d100      	bne.n	33e44 <_http_client_request+0x60c>
   33e42:	e084      	b.n	33f4e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33e44:	69fb      	ldr	r3, [r7, #28]
   33e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33e48:	220c      	movs	r2, #12
   33e4a:	2118      	movs	r1, #24
   33e4c:	468c      	mov	ip, r1
   33e4e:	44bc      	add	ip, r7
   33e50:	4462      	add	r2, ip
   33e52:	69f8      	ldr	r0, [r7, #28]
   33e54:	2101      	movs	r1, #1
   33e56:	4798      	blx	r3
				break;
   33e58:	e079      	b.n	33f4e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   33e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33e5c:	68dc      	ldr	r4, [r3, #12]
   33e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33e60:	6958      	ldr	r0, [r3, #20]
   33e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33e64:	69fb      	ldr	r3, [r7, #28]
   33e66:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   33e68:	69fb      	ldr	r3, [r7, #28]
   33e6a:	22d0      	movs	r2, #208	; 0xd0
   33e6c:	589b      	ldr	r3, [r3, r2]
   33e6e:	002a      	movs	r2, r5
   33e70:	47a0      	blx	r4
   33e72:	0003      	movs	r3, r0
   33e74:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   33e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33e78:	2b00      	cmp	r3, #0
   33e7a:	da0d      	bge.n	33e98 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   33e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33e7e:	2b00      	cmp	r3, #0
   33e80:	d102      	bne.n	33e88 <_http_client_request+0x650>
   33e82:	234d      	movs	r3, #77	; 0x4d
   33e84:	425b      	negs	r3, r3
   33e86:	e001      	b.n	33e8c <_http_client_request+0x654>
   33e88:	2305      	movs	r3, #5
   33e8a:	425b      	negs	r3, r3
   33e8c:	69fa      	ldr	r2, [r7, #28]
   33e8e:	0019      	movs	r1, r3
   33e90:	0010      	movs	r0, r2
   33e92:	4b2c      	ldr	r3, [pc, #176]	; (33f44 <_http_client_request+0x70c>)
   33e94:	4798      	blx	r3
			if (size < 0) {
   33e96:	e057      	b.n	33f48 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   33e98:	69fb      	ldr	r3, [r7, #28]
   33e9a:	22cc      	movs	r2, #204	; 0xcc
   33e9c:	589a      	ldr	r2, [r3, r2]
   33e9e:	69fb      	ldr	r3, [r7, #28]
   33ea0:	21d0      	movs	r1, #208	; 0xd0
   33ea2:	585b      	ldr	r3, [r3, r1]
   33ea4:	1ad2      	subs	r2, r2, r3
   33ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ea8:	429a      	cmp	r2, r3
   33eaa:	da07      	bge.n	33ebc <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   33eac:	69fb      	ldr	r3, [r7, #28]
   33eae:	22cc      	movs	r2, #204	; 0xcc
   33eb0:	589a      	ldr	r2, [r3, r2]
   33eb2:	69fb      	ldr	r3, [r7, #28]
   33eb4:	21d0      	movs	r1, #208	; 0xd0
   33eb6:	585b      	ldr	r3, [r3, r1]
   33eb8:	1ad3      	subs	r3, r2, r3
   33eba:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   33ebc:	69fb      	ldr	r3, [r7, #28]
   33ebe:	2000      	movs	r0, #0
   33ec0:	5618      	ldrsb	r0, [r3, r0]
   33ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ec6:	b29a      	uxth	r2, r3
   33ec8:	2300      	movs	r3, #0
   33eca:	4c1d      	ldr	r4, [pc, #116]	; (33f40 <_http_client_request+0x708>)
   33ecc:	47a0      	blx	r4
   33ece:	0003      	movs	r3, r0
   33ed0:	663b      	str	r3, [r7, #96]	; 0x60
   33ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   33ed4:	2b00      	cmp	r3, #0
   33ed6:	da07      	bge.n	33ee8 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   33ed8:	2305      	movs	r3, #5
   33eda:	425a      	negs	r2, r3
   33edc:	69fb      	ldr	r3, [r7, #28]
   33ede:	0011      	movs	r1, r2
   33ee0:	0018      	movs	r0, r3
   33ee2:	4b18      	ldr	r3, [pc, #96]	; (33f44 <_http_client_request+0x70c>)
   33ee4:	4798      	blx	r3
					return;
   33ee6:	e03b      	b.n	33f60 <_http_client_request+0x728>
				module->req.sent_length += size;
   33ee8:	69fb      	ldr	r3, [r7, #28]
   33eea:	22d0      	movs	r2, #208	; 0xd0
   33eec:	589a      	ldr	r2, [r3, r2]
   33eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ef0:	18d2      	adds	r2, r2, r3
   33ef2:	69fb      	ldr	r3, [r7, #28]
   33ef4:	21d0      	movs	r1, #208	; 0xd0
   33ef6:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   33ef8:	e026      	b.n	33f48 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   33efa:	69fb      	ldr	r3, [r7, #28]
   33efc:	2202      	movs	r2, #2
   33efe:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   33f00:	69fb      	ldr	r3, [r7, #28]
   33f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33f04:	2b00      	cmp	r3, #0
   33f06:	d024      	beq.n	33f52 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33f08:	69fb      	ldr	r3, [r7, #28]
   33f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33f0c:	220c      	movs	r2, #12
   33f0e:	2118      	movs	r1, #24
   33f10:	468c      	mov	ip, r1
   33f12:	44bc      	add	ip, r7
   33f14:	4462      	add	r2, ip
   33f16:	69f8      	ldr	r0, [r7, #28]
   33f18:	2101      	movs	r1, #1
   33f1a:	4798      	blx	r3
			break;
   33f1c:	e019      	b.n	33f52 <_http_client_request+0x71a>
   33f1e:	46c0      	nop			; (mov r8, r8)
   33f20:	0003d020 	.word	0x0003d020
   33f24:	00037c29 	.word	0x00037c29
   33f28:	0003d024 	.word	0x0003d024
   33f2c:	00034799 	.word	0x00034799
   33f30:	00037d23 	.word	0x00037d23
   33f34:	0003cfac 	.word	0x0003cfac
   33f38:	000347d5 	.word	0x000347d5
   33f3c:	8000000f 	.word	0x8000000f
   33f40:	00027cc1 	.word	0x00027cc1
   33f44:	000336e5 	.word	0x000336e5
		break;
   33f48:	e004      	b.n	33f54 <_http_client_request+0x71c>
				break;
   33f4a:	46c0      	nop			; (mov r8, r8)
   33f4c:	e002      	b.n	33f54 <_http_client_request+0x71c>
				break;
   33f4e:	46c0      	nop			; (mov r8, r8)
   33f50:	e000      	b.n	33f54 <_http_client_request+0x71c>
			break;
   33f52:	46c0      	nop			; (mov r8, r8)
   33f54:	69bb      	ldr	r3, [r7, #24]
   33f56:	469d      	mov	sp, r3
   33f58:	e004      	b.n	33f64 <_http_client_request+0x72c>
		return;
   33f5a:	46c0      	nop			; (mov r8, r8)
   33f5c:	e000      	b.n	33f60 <_http_client_request+0x728>
		return;
   33f5e:	46c0      	nop			; (mov r8, r8)
   33f60:	69bb      	ldr	r3, [r7, #24]
   33f62:	469d      	mov	sp, r3
	}
}
   33f64:	46bd      	mov	sp, r7
   33f66:	b01e      	add	sp, #120	; 0x78
   33f68:	bc04      	pop	{r2}
   33f6a:	4690      	mov	r8, r2
   33f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33f6e:	46c0      	nop			; (mov r8, r8)

00033f70 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   33f70:	b590      	push	{r4, r7, lr}
   33f72:	b083      	sub	sp, #12
   33f74:	af00      	add	r7, sp, #0
   33f76:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   33f78:	687b      	ldr	r3, [r7, #4]
   33f7a:	2b00      	cmp	r3, #0
   33f7c:	d021      	beq.n	33fc2 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   33f7e:	687b      	ldr	r3, [r7, #4]
   33f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33f82:	687b      	ldr	r3, [r7, #4]
   33f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   33f86:	429a      	cmp	r2, r3
   33f88:	d307      	bcc.n	33f9a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   33f8a:	238b      	movs	r3, #139	; 0x8b
   33f8c:	425a      	negs	r2, r3
   33f8e:	687b      	ldr	r3, [r7, #4]
   33f90:	0011      	movs	r1, r2
   33f92:	0018      	movs	r0, r3
   33f94:	4b0d      	ldr	r3, [pc, #52]	; (33fcc <_http_client_recv_packet+0x5c>)
   33f96:	4798      	blx	r3
		return;
   33f98:	e014      	b.n	33fc4 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   33f9a:	687b      	ldr	r3, [r7, #4]
   33f9c:	2000      	movs	r0, #0
   33f9e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   33fa0:	687b      	ldr	r3, [r7, #4]
   33fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   33fa4:	687b      	ldr	r3, [r7, #4]
   33fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33fa8:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   33faa:	687b      	ldr	r3, [r7, #4]
   33fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   33fae:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   33fb0:	687b      	ldr	r3, [r7, #4]
   33fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   33fb4:	b29b      	uxth	r3, r3
   33fb6:	1ad3      	subs	r3, r2, r3
   33fb8:	b29a      	uxth	r2, r3
   33fba:	2300      	movs	r3, #0
   33fbc:	4c04      	ldr	r4, [pc, #16]	; (33fd0 <_http_client_recv_packet+0x60>)
   33fbe:	47a0      	blx	r4
   33fc0:	e000      	b.n	33fc4 <_http_client_recv_packet+0x54>
		return;
   33fc2:	46c0      	nop			; (mov r8, r8)
}
   33fc4:	46bd      	mov	sp, r7
   33fc6:	b003      	add	sp, #12
   33fc8:	bd90      	pop	{r4, r7, pc}
   33fca:	46c0      	nop			; (mov r8, r8)
   33fcc:	000336e5 	.word	0x000336e5
   33fd0:	00027e25 	.word	0x00027e25

00033fd4 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   33fd4:	b580      	push	{r7, lr}
   33fd6:	b082      	sub	sp, #8
   33fd8:	af00      	add	r7, sp, #0
   33fda:	6078      	str	r0, [r7, #4]
   33fdc:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   33fde:	687b      	ldr	r3, [r7, #4]
   33fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33fe2:	683b      	ldr	r3, [r7, #0]
   33fe4:	18d2      	adds	r2, r2, r3
   33fe6:	687b      	ldr	r3, [r7, #4]
   33fe8:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   33fea:	687b      	ldr	r3, [r7, #4]
   33fec:	2258      	movs	r2, #88	; 0x58
   33fee:	5a9b      	ldrh	r3, [r3, r2]
   33ff0:	2b00      	cmp	r3, #0
   33ff2:	d007      	beq.n	34004 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   33ff4:	687b      	ldr	r3, [r7, #4]
   33ff6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33ff8:	687b      	ldr	r3, [r7, #4]
   33ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   33ffc:	0019      	movs	r1, r3
   33ffe:	0010      	movs	r0, r2
   34000:	4b06      	ldr	r3, [pc, #24]	; (3401c <_http_client_recved_packet+0x48>)
   34002:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   34004:	46c0      	nop			; (mov r8, r8)
   34006:	687b      	ldr	r3, [r7, #4]
   34008:	0018      	movs	r0, r3
   3400a:	4b05      	ldr	r3, [pc, #20]	; (34020 <_http_client_recved_packet+0x4c>)
   3400c:	4798      	blx	r3
   3400e:	1e03      	subs	r3, r0, #0
   34010:	d1f9      	bne.n	34006 <_http_client_recved_packet+0x32>
}
   34012:	46c0      	nop			; (mov r8, r8)
   34014:	46bd      	mov	sp, r7
   34016:	b002      	add	sp, #8
   34018:	bd80      	pop	{r7, pc}
   3401a:	46c0      	nop			; (mov r8, r8)
   3401c:	00034a91 	.word	0x00034a91
   34020:	00034025 	.word	0x00034025

00034024 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   34024:	b580      	push	{r7, lr}
   34026:	b082      	sub	sp, #8
   34028:	af00      	add	r7, sp, #0
   3402a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   3402c:	687b      	ldr	r3, [r7, #4]
   3402e:	22d8      	movs	r2, #216	; 0xd8
   34030:	589b      	ldr	r3, [r3, r2]
   34032:	2b00      	cmp	r3, #0
   34034:	d002      	beq.n	3403c <_http_client_handle_response+0x18>
   34036:	2b01      	cmp	r3, #1
   34038:	d006      	beq.n	34048 <_http_client_handle_response+0x24>
   3403a:	e00b      	b.n	34054 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   3403c:	687b      	ldr	r3, [r7, #4]
   3403e:	0018      	movs	r0, r3
   34040:	4b07      	ldr	r3, [pc, #28]	; (34060 <_http_client_handle_response+0x3c>)
   34042:	4798      	blx	r3
   34044:	0003      	movs	r3, r0
   34046:	e006      	b.n	34056 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   34048:	687b      	ldr	r3, [r7, #4]
   3404a:	0018      	movs	r0, r3
   3404c:	4b05      	ldr	r3, [pc, #20]	; (34064 <_http_client_handle_response+0x40>)
   3404e:	4798      	blx	r3
   34050:	0003      	movs	r3, r0
   34052:	e000      	b.n	34056 <_http_client_handle_response+0x32>
	}
	return 0;
   34054:	2300      	movs	r3, #0
}
   34056:	0018      	movs	r0, r3
   34058:	46bd      	mov	sp, r7
   3405a:	b002      	add	sp, #8
   3405c:	bd80      	pop	{r7, pc}
   3405e:	46c0      	nop			; (mov r8, r8)
   34060:	00034069 	.word	0x00034069
   34064:	00034521 	.word	0x00034521

00034068 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   34068:	b590      	push	{r4, r7, lr}
   3406a:	b08b      	sub	sp, #44	; 0x2c
   3406c:	af00      	add	r7, sp, #0
   3406e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   34070:	687b      	ldr	r3, [r7, #4]
   34072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34074:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   34076:	4b9a      	ldr	r3, [pc, #616]	; (342e0 <_http_client_handle_header+0x278>)
   34078:	681a      	ldr	r2, [r3, #0]
   3407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3407c:	0011      	movs	r1, r2
   3407e:	0018      	movs	r0, r3
   34080:	4b98      	ldr	r3, [pc, #608]	; (342e4 <_http_client_handle_header+0x27c>)
   34082:	4798      	blx	r3
   34084:	0003      	movs	r3, r0
   34086:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   34088:	69bb      	ldr	r3, [r7, #24]
   3408a:	2b00      	cmp	r3, #0
   3408c:	d007      	beq.n	3409e <_http_client_handle_header+0x36>
   3408e:	687b      	ldr	r3, [r7, #4]
   34090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   34092:	687b      	ldr	r3, [r7, #4]
   34094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34096:	18d2      	adds	r2, r2, r3
   34098:	69bb      	ldr	r3, [r7, #24]
   3409a:	429a      	cmp	r2, r3
   3409c:	d807      	bhi.n	340ae <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   340a0:	687b      	ldr	r3, [r7, #4]
   340a2:	0011      	movs	r1, r2
   340a4:	0018      	movs	r0, r3
   340a6:	4b90      	ldr	r3, [pc, #576]	; (342e8 <_http_client_handle_header+0x280>)
   340a8:	4798      	blx	r3
			return 0;
   340aa:	2300      	movs	r3, #0
   340ac:	e114      	b.n	342d8 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   340ae:	4b8c      	ldr	r3, [pc, #560]	; (342e0 <_http_client_handle_header+0x278>)
   340b0:	681c      	ldr	r4, [r3, #0]
   340b2:	4b8b      	ldr	r3, [pc, #556]	; (342e0 <_http_client_handle_header+0x278>)
   340b4:	681b      	ldr	r3, [r3, #0]
   340b6:	0018      	movs	r0, r3
   340b8:	4b8c      	ldr	r3, [pc, #560]	; (342ec <_http_client_handle_header+0x284>)
   340ba:	4798      	blx	r3
   340bc:	0002      	movs	r2, r0
   340be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   340c0:	0021      	movs	r1, r4
   340c2:	0018      	movs	r0, r3
   340c4:	4b8a      	ldr	r3, [pc, #552]	; (342f0 <_http_client_handle_header+0x288>)
   340c6:	4798      	blx	r3
   340c8:	1e03      	subs	r3, r0, #0
   340ca:	d15d      	bne.n	34188 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   340cc:	4b84      	ldr	r3, [pc, #528]	; (342e0 <_http_client_handle_header+0x278>)
   340ce:	681b      	ldr	r3, [r3, #0]
   340d0:	0018      	movs	r0, r3
   340d2:	4b86      	ldr	r3, [pc, #536]	; (342ec <_http_client_handle_header+0x284>)
   340d4:	4798      	blx	r3
   340d6:	0002      	movs	r2, r0
   340d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   340da:	189a      	adds	r2, r3, r2
   340dc:	687b      	ldr	r3, [r7, #4]
   340de:	0011      	movs	r1, r2
   340e0:	0018      	movs	r0, r3
   340e2:	4b81      	ldr	r3, [pc, #516]	; (342e8 <_http_client_handle_header+0x280>)
   340e4:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   340e6:	687b      	ldr	r3, [r7, #4]
   340e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   340ea:	2b00      	cmp	r3, #0
   340ec:	d046      	beq.n	3417c <_http_client_handle_header+0x114>
   340ee:	687b      	ldr	r3, [r7, #4]
   340f0:	22e4      	movs	r2, #228	; 0xe4
   340f2:	5a9b      	ldrh	r3, [r3, r2]
   340f4:	2b00      	cmp	r3, #0
   340f6:	d041      	beq.n	3417c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   340f8:	687b      	ldr	r3, [r7, #4]
   340fa:	22dc      	movs	r2, #220	; 0xdc
   340fc:	589b      	ldr	r3, [r3, r2]
   340fe:	2b00      	cmp	r3, #0
   34100:	da19      	bge.n	34136 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   34102:	687b      	ldr	r3, [r7, #4]
   34104:	22e4      	movs	r2, #228	; 0xe4
   34106:	5a9a      	ldrh	r2, [r3, r2]
   34108:	230c      	movs	r3, #12
   3410a:	18fb      	adds	r3, r7, r3
   3410c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   3410e:	230c      	movs	r3, #12
   34110:	18fb      	adds	r3, r7, r3
   34112:	2201      	movs	r2, #1
   34114:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   34116:	687b      	ldr	r3, [r7, #4]
   34118:	22e0      	movs	r2, #224	; 0xe0
   3411a:	2100      	movs	r1, #0
   3411c:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   3411e:	230c      	movs	r3, #12
   34120:	18fb      	adds	r3, r7, r3
   34122:	2200      	movs	r2, #0
   34124:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34126:	687b      	ldr	r3, [r7, #4]
   34128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3412a:	220c      	movs	r2, #12
   3412c:	18ba      	adds	r2, r7, r2
   3412e:	6878      	ldr	r0, [r7, #4]
   34130:	2102      	movs	r1, #2
   34132:	4798      	blx	r3
   34134:	e022      	b.n	3417c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   34136:	687b      	ldr	r3, [r7, #4]
   34138:	22dc      	movs	r2, #220	; 0xdc
   3413a:	589a      	ldr	r2, [r3, r2]
   3413c:	687b      	ldr	r3, [r7, #4]
   3413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34140:	429a      	cmp	r2, r3
   34142:	dd1b      	ble.n	3417c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   34144:	687b      	ldr	r3, [r7, #4]
   34146:	22e4      	movs	r2, #228	; 0xe4
   34148:	5a9a      	ldrh	r2, [r3, r2]
   3414a:	230c      	movs	r3, #12
   3414c:	18fb      	adds	r3, r7, r3
   3414e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   34150:	687b      	ldr	r3, [r7, #4]
   34152:	22dc      	movs	r2, #220	; 0xdc
   34154:	589b      	ldr	r3, [r3, r2]
   34156:	001a      	movs	r2, r3
   34158:	230c      	movs	r3, #12
   3415a:	18fb      	adds	r3, r7, r3
   3415c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3415e:	230c      	movs	r3, #12
   34160:	18fb      	adds	r3, r7, r3
   34162:	2200      	movs	r2, #0
   34164:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   34166:	687b      	ldr	r3, [r7, #4]
   34168:	22e0      	movs	r2, #224	; 0xe0
   3416a:	2100      	movs	r1, #0
   3416c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3416e:	687b      	ldr	r3, [r7, #4]
   34170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34172:	220c      	movs	r2, #12
   34174:	18ba      	adds	r2, r7, r2
   34176:	6878      	ldr	r0, [r7, #4]
   34178:	2102      	movs	r1, #2
   3417a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   3417c:	687b      	ldr	r3, [r7, #4]
   3417e:	22d8      	movs	r2, #216	; 0xd8
   34180:	2101      	movs	r1, #1
   34182:	5099      	str	r1, [r3, r2]
			return 1;
   34184:	2301      	movs	r3, #1
   34186:	e0a7      	b.n	342d8 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   34188:	495a      	ldr	r1, [pc, #360]	; (342f4 <_http_client_handle_header+0x28c>)
   3418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3418c:	2210      	movs	r2, #16
   3418e:	0018      	movs	r0, r3
   34190:	4b57      	ldr	r3, [pc, #348]	; (342f0 <_http_client_handle_header+0x288>)
   34192:	4798      	blx	r3
   34194:	1e03      	subs	r3, r0, #0
   34196:	d109      	bne.n	341ac <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   34198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3419a:	3310      	adds	r3, #16
   3419c:	0018      	movs	r0, r3
   3419e:	4b56      	ldr	r3, [pc, #344]	; (342f8 <_http_client_handle_header+0x290>)
   341a0:	4798      	blx	r3
   341a2:	0001      	movs	r1, r0
   341a4:	687b      	ldr	r3, [r7, #4]
   341a6:	22dc      	movs	r2, #220	; 0xdc
   341a8:	5099      	str	r1, [r3, r2]
   341aa:	e08b      	b.n	342c4 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   341ac:	4953      	ldr	r1, [pc, #332]	; (342fc <_http_client_handle_header+0x294>)
   341ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   341b0:	2213      	movs	r2, #19
   341b2:	0018      	movs	r0, r3
   341b4:	4b4e      	ldr	r3, [pc, #312]	; (342f0 <_http_client_handle_header+0x288>)
   341b6:	4798      	blx	r3
   341b8:	1e03      	subs	r3, r0, #0
   341ba:	d127      	bne.n	3420c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   341bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   341be:	3313      	adds	r3, #19
   341c0:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   341c2:	e01e      	b.n	34202 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   341c4:	6a3b      	ldr	r3, [r7, #32]
   341c6:	781b      	ldrb	r3, [r3, #0]
   341c8:	2b20      	cmp	r3, #32
   341ca:	d103      	bne.n	341d4 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   341cc:	6a3b      	ldr	r3, [r7, #32]
   341ce:	3301      	adds	r3, #1
   341d0:	623b      	str	r3, [r7, #32]
   341d2:	e016      	b.n	34202 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   341d4:	6a3b      	ldr	r3, [r7, #32]
   341d6:	781b      	ldrb	r3, [r3, #0]
   341d8:	2b43      	cmp	r3, #67	; 0x43
   341da:	d003      	beq.n	341e4 <_http_client_handle_header+0x17c>
   341dc:	6a3b      	ldr	r3, [r7, #32]
   341de:	781b      	ldrb	r3, [r3, #0]
   341e0:	2b63      	cmp	r3, #99	; 0x63
   341e2:	d105      	bne.n	341f0 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   341e4:	687b      	ldr	r3, [r7, #4]
   341e6:	21cc      	movs	r1, #204	; 0xcc
   341e8:	2201      	movs	r2, #1
   341ea:	4252      	negs	r2, r2
   341ec:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   341ee:	e069      	b.n	342c4 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   341f0:	2386      	movs	r3, #134	; 0x86
   341f2:	425a      	negs	r2, r3
   341f4:	687b      	ldr	r3, [r7, #4]
   341f6:	0011      	movs	r1, r2
   341f8:	0018      	movs	r0, r3
   341fa:	4b41      	ldr	r3, [pc, #260]	; (34300 <_http_client_handle_header+0x298>)
   341fc:	4798      	blx	r3
					return 0;
   341fe:	2300      	movs	r3, #0
   34200:	e06a      	b.n	342d8 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34202:	69ba      	ldr	r2, [r7, #24]
   34204:	6a3b      	ldr	r3, [r7, #32]
   34206:	429a      	cmp	r2, r3
   34208:	d8dc      	bhi.n	341c4 <_http_client_handle_header+0x15c>
   3420a:	e05b      	b.n	342c4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   3420c:	493d      	ldr	r1, [pc, #244]	; (34304 <_http_client_handle_header+0x29c>)
   3420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34210:	220c      	movs	r2, #12
   34212:	0018      	movs	r0, r3
   34214:	4b36      	ldr	r3, [pc, #216]	; (342f0 <_http_client_handle_header+0x288>)
   34216:	4798      	blx	r3
   34218:	1e03      	subs	r3, r0, #0
   3421a:	d126      	bne.n	3426a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   3421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3421e:	330c      	adds	r3, #12
   34220:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34222:	e01d      	b.n	34260 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   34224:	69fb      	ldr	r3, [r7, #28]
   34226:	781b      	ldrb	r3, [r3, #0]
   34228:	2b20      	cmp	r3, #32
   3422a:	d103      	bne.n	34234 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3422c:	69fb      	ldr	r3, [r7, #28]
   3422e:	3301      	adds	r3, #1
   34230:	61fb      	str	r3, [r7, #28]
   34232:	e015      	b.n	34260 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   34234:	69fb      	ldr	r3, [r7, #28]
   34236:	781b      	ldrb	r3, [r3, #0]
   34238:	2b4b      	cmp	r3, #75	; 0x4b
   3423a:	d003      	beq.n	34244 <_http_client_handle_header+0x1dc>
   3423c:	69fb      	ldr	r3, [r7, #28]
   3423e:	781b      	ldrb	r3, [r3, #0]
   34240:	2b6b      	cmp	r3, #107	; 0x6b
   34242:	d106      	bne.n	34252 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   34244:	687b      	ldr	r3, [r7, #4]
   34246:	2241      	movs	r2, #65	; 0x41
   34248:	5c99      	ldrb	r1, [r3, r2]
   3424a:	2002      	movs	r0, #2
   3424c:	4301      	orrs	r1, r0
   3424e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   34250:	e038      	b.n	342c4 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   34252:	687b      	ldr	r3, [r7, #4]
   34254:	2241      	movs	r2, #65	; 0x41
   34256:	5c99      	ldrb	r1, [r3, r2]
   34258:	2002      	movs	r0, #2
   3425a:	4381      	bics	r1, r0
   3425c:	5499      	strb	r1, [r3, r2]
				break;
   3425e:	e031      	b.n	342c4 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34260:	69ba      	ldr	r2, [r7, #24]
   34262:	69fb      	ldr	r3, [r7, #28]
   34264:	429a      	cmp	r2, r3
   34266:	d8dd      	bhi.n	34224 <_http_client_handle_header+0x1bc>
   34268:	e02c      	b.n	342c4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   3426a:	4927      	ldr	r1, [pc, #156]	; (34308 <_http_client_handle_header+0x2a0>)
   3426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3426e:	2205      	movs	r2, #5
   34270:	0018      	movs	r0, r3
   34272:	4b1f      	ldr	r3, [pc, #124]	; (342f0 <_http_client_handle_header+0x288>)
   34274:	4798      	blx	r3
   34276:	1e03      	subs	r3, r0, #0
   34278:	d124      	bne.n	342c4 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   3427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3427c:	3309      	adds	r3, #9
   3427e:	0018      	movs	r0, r3
   34280:	4b1d      	ldr	r3, [pc, #116]	; (342f8 <_http_client_handle_header+0x290>)
   34282:	4798      	blx	r3
   34284:	0003      	movs	r3, r0
   34286:	b299      	uxth	r1, r3
   34288:	687b      	ldr	r3, [r7, #4]
   3428a:	22e4      	movs	r2, #228	; 0xe4
   3428c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3428e:	687b      	ldr	r3, [r7, #4]
   34290:	22dc      	movs	r2, #220	; 0xdc
   34292:	2100      	movs	r1, #0
   34294:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   34296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34298:	3305      	adds	r3, #5
   3429a:	781b      	ldrb	r3, [r3, #0]
   3429c:	2b31      	cmp	r3, #49	; 0x31
   3429e:	d804      	bhi.n	342aa <_http_client_handle_header+0x242>
   342a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   342a2:	3307      	adds	r3, #7
   342a4:	781b      	ldrb	r3, [r3, #0]
   342a6:	2b30      	cmp	r3, #48	; 0x30
   342a8:	d906      	bls.n	342b8 <_http_client_handle_header+0x250>
				module->permanent = 1;
   342aa:	687b      	ldr	r3, [r7, #4]
   342ac:	2241      	movs	r2, #65	; 0x41
   342ae:	5c99      	ldrb	r1, [r3, r2]
   342b0:	2002      	movs	r0, #2
   342b2:	4301      	orrs	r1, r0
   342b4:	5499      	strb	r1, [r3, r2]
   342b6:	e005      	b.n	342c4 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   342b8:	687b      	ldr	r3, [r7, #4]
   342ba:	2241      	movs	r2, #65	; 0x41
   342bc:	5c99      	ldrb	r1, [r3, r2]
   342be:	2002      	movs	r0, #2
   342c0:	4381      	bics	r1, r0
   342c2:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   342c4:	4b06      	ldr	r3, [pc, #24]	; (342e0 <_http_client_handle_header+0x278>)
   342c6:	681b      	ldr	r3, [r3, #0]
   342c8:	0018      	movs	r0, r3
   342ca:	4b08      	ldr	r3, [pc, #32]	; (342ec <_http_client_handle_header+0x284>)
   342cc:	4798      	blx	r3
   342ce:	0002      	movs	r2, r0
   342d0:	69bb      	ldr	r3, [r7, #24]
   342d2:	189b      	adds	r3, r3, r2
   342d4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   342d6:	e6ce      	b.n	34076 <_http_client_handle_header+0xe>
	}
}
   342d8:	0018      	movs	r0, r3
   342da:	46bd      	mov	sp, r7
   342dc:	b00b      	add	sp, #44	; 0x2c
   342de:	bd90      	pop	{r4, r7, pc}
   342e0:	20000134 	.word	0x20000134
   342e4:	00037da1 	.word	0x00037da1
   342e8:	000346cd 	.word	0x000346cd
   342ec:	00037d23 	.word	0x00037d23
   342f0:	00037d31 	.word	0x00037d31
   342f4:	0003d024 	.word	0x0003d024
   342f8:	000378b9 	.word	0x000378b9
   342fc:	0003d048 	.word	0x0003d048
   34300:	000336e5 	.word	0x000336e5
   34304:	0003d05c 	.word	0x0003d05c
   34308:	0003d06c 	.word	0x0003d06c

0003430c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   3430c:	b580      	push	{r7, lr}
   3430e:	b088      	sub	sp, #32
   34310:	af00      	add	r7, sp, #0
   34312:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   34314:	687b      	ldr	r3, [r7, #4]
   34316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34318:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   3431a:	2300      	movs	r3, #0
   3431c:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   3431e:	687b      	ldr	r3, [r7, #4]
   34320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34322:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   34324:	687b      	ldr	r3, [r7, #4]
   34326:	22e0      	movs	r2, #224	; 0xe0
   34328:	589b      	ldr	r3, [r3, r2]
   3432a:	2b00      	cmp	r3, #0
   3432c:	db71      	blt.n	34412 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   3432e:	687b      	ldr	r3, [r7, #4]
   34330:	22e0      	movs	r2, #224	; 0xe0
   34332:	589b      	ldr	r3, [r3, r2]
   34334:	2b00      	cmp	r3, #0
   34336:	d134      	bne.n	343a2 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   34338:	687b      	ldr	r3, [r7, #4]
   3433a:	22d8      	movs	r2, #216	; 0xd8
   3433c:	2100      	movs	r1, #0
   3433e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   34340:	687b      	ldr	r3, [r7, #4]
   34342:	22e4      	movs	r2, #228	; 0xe4
   34344:	2100      	movs	r1, #0
   34346:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34348:	2308      	movs	r3, #8
   3434a:	18fb      	adds	r3, r7, r3
   3434c:	2201      	movs	r2, #1
   3434e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   34350:	2308      	movs	r3, #8
   34352:	18fb      	adds	r3, r7, r3
   34354:	2200      	movs	r2, #0
   34356:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   34358:	2308      	movs	r3, #8
   3435a:	18fb      	adds	r3, r7, r3
   3435c:	2200      	movs	r2, #0
   3435e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   34360:	687b      	ldr	r3, [r7, #4]
   34362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34364:	2b00      	cmp	r3, #0
   34366:	d006      	beq.n	34376 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34368:	687b      	ldr	r3, [r7, #4]
   3436a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3436c:	2208      	movs	r2, #8
   3436e:	18ba      	adds	r2, r7, r2
   34370:	6878      	ldr	r0, [r7, #4]
   34372:	2103      	movs	r1, #3
   34374:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   34376:	687b      	ldr	r3, [r7, #4]
   34378:	2241      	movs	r2, #65	; 0x41
   3437a:	5c9b      	ldrb	r3, [r3, r2]
   3437c:	2202      	movs	r2, #2
   3437e:	4013      	ands	r3, r2
   34380:	b2db      	uxtb	r3, r3
   34382:	2b00      	cmp	r3, #0
   34384:	d105      	bne.n	34392 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   34386:	687b      	ldr	r3, [r7, #4]
   34388:	2100      	movs	r1, #0
   3438a:	0018      	movs	r0, r3
   3438c:	4b62      	ldr	r3, [pc, #392]	; (34518 <_http_client_read_chuked_entity+0x20c>)
   3438e:	4798      	blx	r3
					return;
   34390:	e0bf      	b.n	34512 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   34392:	697b      	ldr	r3, [r7, #20]
   34394:	1c9a      	adds	r2, r3, #2
   34396:	687b      	ldr	r3, [r7, #4]
   34398:	0011      	movs	r1, r2
   3439a:	0018      	movs	r0, r3
   3439c:	4b5f      	ldr	r3, [pc, #380]	; (3451c <_http_client_read_chuked_entity+0x210>)
   3439e:	4798      	blx	r3
   343a0:	e0b2      	b.n	34508 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   343a2:	687b      	ldr	r3, [r7, #4]
   343a4:	22e0      	movs	r2, #224	; 0xe0
   343a6:	589a      	ldr	r2, [r3, r2]
   343a8:	69fb      	ldr	r3, [r7, #28]
   343aa:	429a      	cmp	r2, r3
   343ac:	dd00      	ble.n	343b0 <_http_client_read_chuked_entity+0xa4>
   343ae:	e0ab      	b.n	34508 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   343b0:	687b      	ldr	r3, [r7, #4]
   343b2:	22e0      	movs	r2, #224	; 0xe0
   343b4:	589b      	ldr	r3, [r3, r2]
   343b6:	001a      	movs	r2, r3
   343b8:	2308      	movs	r3, #8
   343ba:	18fb      	adds	r3, r7, r3
   343bc:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   343be:	2308      	movs	r3, #8
   343c0:	18fb      	adds	r3, r7, r3
   343c2:	697a      	ldr	r2, [r7, #20]
   343c4:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   343c6:	2308      	movs	r3, #8
   343c8:	18fb      	adds	r3, r7, r3
   343ca:	2200      	movs	r2, #0
   343cc:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   343ce:	687b      	ldr	r3, [r7, #4]
   343d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   343d2:	2b00      	cmp	r3, #0
   343d4:	d006      	beq.n	343e4 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   343d6:	687b      	ldr	r3, [r7, #4]
   343d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   343da:	2208      	movs	r2, #8
   343dc:	18ba      	adds	r2, r7, r2
   343de:	6878      	ldr	r0, [r7, #4]
   343e0:	2103      	movs	r1, #3
   343e2:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   343e4:	687b      	ldr	r3, [r7, #4]
   343e6:	22e0      	movs	r2, #224	; 0xe0
   343e8:	589b      	ldr	r3, [r3, r2]
   343ea:	3302      	adds	r3, #2
   343ec:	697a      	ldr	r2, [r7, #20]
   343ee:	18d2      	adds	r2, r2, r3
   343f0:	687b      	ldr	r3, [r7, #4]
   343f2:	0011      	movs	r1, r2
   343f4:	0018      	movs	r0, r3
   343f6:	4b49      	ldr	r3, [pc, #292]	; (3451c <_http_client_read_chuked_entity+0x210>)
   343f8:	4798      	blx	r3
				length = (int)module->recved_size;
   343fa:	687b      	ldr	r3, [r7, #4]
   343fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   343fe:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   34400:	687b      	ldr	r3, [r7, #4]
   34402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34404:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   34406:	687b      	ldr	r3, [r7, #4]
   34408:	21e0      	movs	r1, #224	; 0xe0
   3440a:	2201      	movs	r2, #1
   3440c:	4252      	negs	r2, r2
   3440e:	505a      	str	r2, [r3, r1]
   34410:	e07a      	b.n	34508 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   34412:	687b      	ldr	r3, [r7, #4]
   34414:	22e0      	movs	r2, #224	; 0xe0
   34416:	2100      	movs	r1, #0
   34418:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   3441a:	e05a      	b.n	344d2 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   3441c:	697b      	ldr	r3, [r7, #20]
   3441e:	781b      	ldrb	r3, [r3, #0]
   34420:	2b0a      	cmp	r3, #10
   34422:	d106      	bne.n	34432 <_http_client_read_chuked_entity+0x126>
					buffer++;
   34424:	697b      	ldr	r3, [r7, #20]
   34426:	3301      	adds	r3, #1
   34428:	617b      	str	r3, [r7, #20]
					length--;
   3442a:	69fb      	ldr	r3, [r7, #28]
   3442c:	3b01      	subs	r3, #1
   3442e:	61fb      	str	r3, [r7, #28]
					break;
   34430:	e052      	b.n	344d8 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   34432:	69bb      	ldr	r3, [r7, #24]
   34434:	2b00      	cmp	r3, #0
   34436:	d145      	bne.n	344c4 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   34438:	697b      	ldr	r3, [r7, #20]
   3443a:	781b      	ldrb	r3, [r3, #0]
   3443c:	2b2f      	cmp	r3, #47	; 0x2f
   3443e:	d910      	bls.n	34462 <_http_client_read_chuked_entity+0x156>
   34440:	697b      	ldr	r3, [r7, #20]
   34442:	781b      	ldrb	r3, [r3, #0]
   34444:	2b39      	cmp	r3, #57	; 0x39
   34446:	d80c      	bhi.n	34462 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   34448:	687b      	ldr	r3, [r7, #4]
   3444a:	22e0      	movs	r2, #224	; 0xe0
   3444c:	589b      	ldr	r3, [r3, r2]
   3444e:	011b      	lsls	r3, r3, #4
   34450:	697a      	ldr	r2, [r7, #20]
   34452:	7812      	ldrb	r2, [r2, #0]
   34454:	189b      	adds	r3, r3, r2
   34456:	3b30      	subs	r3, #48	; 0x30
   34458:	001a      	movs	r2, r3
   3445a:	687b      	ldr	r3, [r7, #4]
   3445c:	21e0      	movs	r1, #224	; 0xe0
   3445e:	505a      	str	r2, [r3, r1]
   34460:	e031      	b.n	344c6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   34462:	697b      	ldr	r3, [r7, #20]
   34464:	781b      	ldrb	r3, [r3, #0]
   34466:	2b60      	cmp	r3, #96	; 0x60
   34468:	d910      	bls.n	3448c <_http_client_read_chuked_entity+0x180>
   3446a:	697b      	ldr	r3, [r7, #20]
   3446c:	781b      	ldrb	r3, [r3, #0]
   3446e:	2b66      	cmp	r3, #102	; 0x66
   34470:	d80c      	bhi.n	3448c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   34472:	687b      	ldr	r3, [r7, #4]
   34474:	22e0      	movs	r2, #224	; 0xe0
   34476:	589b      	ldr	r3, [r3, r2]
   34478:	011b      	lsls	r3, r3, #4
   3447a:	697a      	ldr	r2, [r7, #20]
   3447c:	7812      	ldrb	r2, [r2, #0]
   3447e:	189b      	adds	r3, r3, r2
   34480:	3b61      	subs	r3, #97	; 0x61
   34482:	001a      	movs	r2, r3
   34484:	687b      	ldr	r3, [r7, #4]
   34486:	21e0      	movs	r1, #224	; 0xe0
   34488:	505a      	str	r2, [r3, r1]
   3448a:	e01c      	b.n	344c6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   3448c:	697b      	ldr	r3, [r7, #20]
   3448e:	781b      	ldrb	r3, [r3, #0]
   34490:	2b40      	cmp	r3, #64	; 0x40
   34492:	d910      	bls.n	344b6 <_http_client_read_chuked_entity+0x1aa>
   34494:	697b      	ldr	r3, [r7, #20]
   34496:	781b      	ldrb	r3, [r3, #0]
   34498:	2b46      	cmp	r3, #70	; 0x46
   3449a:	d80c      	bhi.n	344b6 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   3449c:	687b      	ldr	r3, [r7, #4]
   3449e:	22e0      	movs	r2, #224	; 0xe0
   344a0:	589b      	ldr	r3, [r3, r2]
   344a2:	011b      	lsls	r3, r3, #4
   344a4:	697a      	ldr	r2, [r7, #20]
   344a6:	7812      	ldrb	r2, [r2, #0]
   344a8:	189b      	adds	r3, r3, r2
   344aa:	3b41      	subs	r3, #65	; 0x41
   344ac:	001a      	movs	r2, r3
   344ae:	687b      	ldr	r3, [r7, #4]
   344b0:	21e0      	movs	r1, #224	; 0xe0
   344b2:	505a      	str	r2, [r3, r1]
   344b4:	e007      	b.n	344c6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   344b6:	697b      	ldr	r3, [r7, #20]
   344b8:	781b      	ldrb	r3, [r3, #0]
   344ba:	2b3b      	cmp	r3, #59	; 0x3b
   344bc:	d103      	bne.n	344c6 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   344be:	2301      	movs	r3, #1
   344c0:	61bb      	str	r3, [r7, #24]
   344c2:	e000      	b.n	344c6 <_http_client_read_chuked_entity+0x1ba>
					continue;
   344c4:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   344c6:	697b      	ldr	r3, [r7, #20]
   344c8:	3301      	adds	r3, #1
   344ca:	617b      	str	r3, [r7, #20]
   344cc:	69fb      	ldr	r3, [r7, #28]
   344ce:	3b01      	subs	r3, #1
   344d0:	61fb      	str	r3, [r7, #28]
   344d2:	69fb      	ldr	r3, [r7, #28]
   344d4:	2b00      	cmp	r3, #0
   344d6:	dca1      	bgt.n	3441c <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   344d8:	687b      	ldr	r3, [r7, #4]
   344da:	22e0      	movs	r2, #224	; 0xe0
   344dc:	589a      	ldr	r2, [r3, r2]
   344de:	687b      	ldr	r3, [r7, #4]
   344e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   344e2:	429a      	cmp	r2, r3
   344e4:	dd07      	ble.n	344f6 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   344e6:	238b      	movs	r3, #139	; 0x8b
   344e8:	425a      	negs	r2, r3
   344ea:	687b      	ldr	r3, [r7, #4]
   344ec:	0011      	movs	r1, r2
   344ee:	0018      	movs	r0, r3
   344f0:	4b09      	ldr	r3, [pc, #36]	; (34518 <_http_client_read_chuked_entity+0x20c>)
   344f2:	4798      	blx	r3
				return;
   344f4:	e00d      	b.n	34512 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   344f6:	69fb      	ldr	r3, [r7, #28]
   344f8:	2b00      	cmp	r3, #0
   344fa:	d105      	bne.n	34508 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   344fc:	687b      	ldr	r3, [r7, #4]
   344fe:	21e0      	movs	r1, #224	; 0xe0
   34500:	2201      	movs	r2, #1
   34502:	4252      	negs	r2, r2
   34504:	505a      	str	r2, [r3, r1]
				return;
   34506:	e004      	b.n	34512 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   34508:	687b      	ldr	r3, [r7, #4]
   3450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3450c:	2b00      	cmp	r3, #0
   3450e:	d000      	beq.n	34512 <_http_client_read_chuked_entity+0x206>
   34510:	e708      	b.n	34324 <_http_client_read_chuked_entity+0x18>
}
   34512:	46bd      	mov	sp, r7
   34514:	b008      	add	sp, #32
   34516:	bd80      	pop	{r7, pc}
   34518:	000336e5 	.word	0x000336e5
   3451c:	000346cd 	.word	0x000346cd

00034520 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   34520:	b580      	push	{r7, lr}
   34522:	b086      	sub	sp, #24
   34524:	af00      	add	r7, sp, #0
   34526:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   34528:	687b      	ldr	r3, [r7, #4]
   3452a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3452c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   3452e:	687b      	ldr	r3, [r7, #4]
   34530:	22dc      	movs	r2, #220	; 0xdc
   34532:	589b      	ldr	r3, [r3, r2]
   34534:	2b00      	cmp	r3, #0
   34536:	db58      	blt.n	345ea <_http_client_handle_entity+0xca>
   34538:	687b      	ldr	r3, [r7, #4]
   3453a:	22dc      	movs	r2, #220	; 0xdc
   3453c:	589a      	ldr	r2, [r3, r2]
   3453e:	687b      	ldr	r3, [r7, #4]
   34540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34542:	429a      	cmp	r2, r3
   34544:	dc51      	bgt.n	345ea <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   34546:	687b      	ldr	r3, [r7, #4]
   34548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3454a:	0019      	movs	r1, r3
   3454c:	687b      	ldr	r3, [r7, #4]
   3454e:	22dc      	movs	r2, #220	; 0xdc
   34550:	589b      	ldr	r3, [r3, r2]
   34552:	4299      	cmp	r1, r3
   34554:	da00      	bge.n	34558 <_http_client_handle_entity+0x38>
   34556:	e0a9      	b.n	346ac <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   34558:	687b      	ldr	r3, [r7, #4]
   3455a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3455c:	2b00      	cmp	r3, #0
   3455e:	d020      	beq.n	345a2 <_http_client_handle_entity+0x82>
   34560:	687b      	ldr	r3, [r7, #4]
   34562:	22e4      	movs	r2, #228	; 0xe4
   34564:	5a9b      	ldrh	r3, [r3, r2]
   34566:	2b00      	cmp	r3, #0
   34568:	d01b      	beq.n	345a2 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   3456a:	687b      	ldr	r3, [r7, #4]
   3456c:	22e4      	movs	r2, #228	; 0xe4
   3456e:	5a9a      	ldrh	r2, [r3, r2]
   34570:	2308      	movs	r3, #8
   34572:	18fb      	adds	r3, r7, r3
   34574:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   34576:	2308      	movs	r3, #8
   34578:	18fb      	adds	r3, r7, r3
   3457a:	2200      	movs	r2, #0
   3457c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   3457e:	687b      	ldr	r3, [r7, #4]
   34580:	22dc      	movs	r2, #220	; 0xdc
   34582:	589b      	ldr	r3, [r3, r2]
   34584:	001a      	movs	r2, r3
   34586:	2308      	movs	r3, #8
   34588:	18fb      	adds	r3, r7, r3
   3458a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   3458c:	2308      	movs	r3, #8
   3458e:	18fb      	adds	r3, r7, r3
   34590:	697a      	ldr	r2, [r7, #20]
   34592:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34594:	687b      	ldr	r3, [r7, #4]
   34596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34598:	2208      	movs	r2, #8
   3459a:	18ba      	adds	r2, r7, r2
   3459c:	6878      	ldr	r0, [r7, #4]
   3459e:	2102      	movs	r1, #2
   345a0:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   345a2:	687b      	ldr	r3, [r7, #4]
   345a4:	22d8      	movs	r2, #216	; 0xd8
   345a6:	2100      	movs	r1, #0
   345a8:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   345aa:	687b      	ldr	r3, [r7, #4]
   345ac:	22e4      	movs	r2, #228	; 0xe4
   345ae:	2100      	movs	r1, #0
   345b0:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   345b2:	687b      	ldr	r3, [r7, #4]
   345b4:	2241      	movs	r2, #65	; 0x41
   345b6:	5c9b      	ldrb	r3, [r3, r2]
   345b8:	2202      	movs	r2, #2
   345ba:	4013      	ands	r3, r2
   345bc:	b2db      	uxtb	r3, r3
   345be:	2b00      	cmp	r3, #0
   345c0:	d105      	bne.n	345ce <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   345c2:	687b      	ldr	r3, [r7, #4]
   345c4:	2100      	movs	r1, #0
   345c6:	0018      	movs	r0, r3
   345c8:	4b3b      	ldr	r3, [pc, #236]	; (346b8 <_http_client_handle_entity+0x198>)
   345ca:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   345cc:	e06e      	b.n	346ac <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   345ce:	687b      	ldr	r3, [r7, #4]
   345d0:	22dc      	movs	r2, #220	; 0xdc
   345d2:	589b      	ldr	r3, [r3, r2]
   345d4:	001a      	movs	r2, r3
   345d6:	697b      	ldr	r3, [r7, #20]
   345d8:	189a      	adds	r2, r3, r2
   345da:	687b      	ldr	r3, [r7, #4]
   345dc:	0011      	movs	r1, r2
   345de:	0018      	movs	r0, r3
   345e0:	4b36      	ldr	r3, [pc, #216]	; (346bc <_http_client_handle_entity+0x19c>)
   345e2:	4798      	blx	r3
				return module->recved_size;
   345e4:	687b      	ldr	r3, [r7, #4]
   345e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   345e8:	e061      	b.n	346ae <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   345ea:	687b      	ldr	r3, [r7, #4]
   345ec:	22dc      	movs	r2, #220	; 0xdc
   345ee:	589b      	ldr	r3, [r3, r2]
   345f0:	2b00      	cmp	r3, #0
   345f2:	db57      	blt.n	346a4 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   345f4:	687b      	ldr	r3, [r7, #4]
   345f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   345f8:	2308      	movs	r3, #8
   345fa:	18fb      	adds	r3, r7, r3
   345fc:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   345fe:	2308      	movs	r3, #8
   34600:	18fb      	adds	r3, r7, r3
   34602:	697a      	ldr	r2, [r7, #20]
   34604:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   34606:	687b      	ldr	r3, [r7, #4]
   34608:	22e0      	movs	r2, #224	; 0xe0
   3460a:	589a      	ldr	r2, [r3, r2]
   3460c:	687b      	ldr	r3, [r7, #4]
   3460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34610:	18d2      	adds	r2, r2, r3
   34612:	687b      	ldr	r3, [r7, #4]
   34614:	21e0      	movs	r1, #224	; 0xe0
   34616:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   34618:	687b      	ldr	r3, [r7, #4]
   3461a:	22dc      	movs	r2, #220	; 0xdc
   3461c:	589a      	ldr	r2, [r3, r2]
   3461e:	687b      	ldr	r3, [r7, #4]
   34620:	21e0      	movs	r1, #224	; 0xe0
   34622:	585b      	ldr	r3, [r3, r1]
   34624:	429a      	cmp	r2, r3
   34626:	dc0c      	bgt.n	34642 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   34628:	687b      	ldr	r3, [r7, #4]
   3462a:	22d8      	movs	r2, #216	; 0xd8
   3462c:	2100      	movs	r1, #0
   3462e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   34630:	687b      	ldr	r3, [r7, #4]
   34632:	22e4      	movs	r2, #228	; 0xe4
   34634:	2100      	movs	r1, #0
   34636:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34638:	2308      	movs	r3, #8
   3463a:	18fb      	adds	r3, r7, r3
   3463c:	2201      	movs	r2, #1
   3463e:	721a      	strb	r2, [r3, #8]
   34640:	e003      	b.n	3464a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   34642:	2308      	movs	r3, #8
   34644:	18fb      	adds	r3, r7, r3
   34646:	2200      	movs	r2, #0
   34648:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   3464a:	687b      	ldr	r3, [r7, #4]
   3464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3464e:	2b00      	cmp	r3, #0
   34650:	d006      	beq.n	34660 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34652:	687b      	ldr	r3, [r7, #4]
   34654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34656:	2208      	movs	r2, #8
   34658:	18ba      	adds	r2, r7, r2
   3465a:	6878      	ldr	r0, [r7, #4]
   3465c:	2103      	movs	r1, #3
   3465e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   34660:	2308      	movs	r3, #8
   34662:	18fb      	adds	r3, r7, r3
   34664:	7a1b      	ldrb	r3, [r3, #8]
   34666:	2b01      	cmp	r3, #1
   34668:	d112      	bne.n	34690 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   3466a:	687b      	ldr	r3, [r7, #4]
   3466c:	2241      	movs	r2, #65	; 0x41
   3466e:	5c9b      	ldrb	r3, [r3, r2]
   34670:	2202      	movs	r2, #2
   34672:	4013      	ands	r3, r2
   34674:	b2db      	uxtb	r3, r3
   34676:	2b00      	cmp	r3, #0
   34678:	d10a      	bne.n	34690 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   3467a:	4b11      	ldr	r3, [pc, #68]	; (346c0 <_http_client_handle_entity+0x1a0>)
   3467c:	0018      	movs	r0, r3
   3467e:	4b11      	ldr	r3, [pc, #68]	; (346c4 <_http_client_handle_entity+0x1a4>)
   34680:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   34682:	687b      	ldr	r3, [r7, #4]
   34684:	2100      	movs	r1, #0
   34686:	0018      	movs	r0, r3
   34688:	4b0b      	ldr	r3, [pc, #44]	; (346b8 <_http_client_handle_entity+0x198>)
   3468a:	4798      	blx	r3
					return 0;
   3468c:	2300      	movs	r3, #0
   3468e:	e00e      	b.n	346ae <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   34690:	687b      	ldr	r3, [r7, #4]
   34692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34694:	697a      	ldr	r2, [r7, #20]
   34696:	18d2      	adds	r2, r2, r3
   34698:	687b      	ldr	r3, [r7, #4]
   3469a:	0011      	movs	r1, r2
   3469c:	0018      	movs	r0, r3
   3469e:	4b07      	ldr	r3, [pc, #28]	; (346bc <_http_client_handle_entity+0x19c>)
   346a0:	4798      	blx	r3
   346a2:	e003      	b.n	346ac <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   346a4:	687b      	ldr	r3, [r7, #4]
   346a6:	0018      	movs	r0, r3
   346a8:	4b07      	ldr	r3, [pc, #28]	; (346c8 <_http_client_handle_entity+0x1a8>)
   346aa:	4798      	blx	r3
		}
	}

	return 0;
   346ac:	2300      	movs	r3, #0
}
   346ae:	0018      	movs	r0, r3
   346b0:	46bd      	mov	sp, r7
   346b2:	b006      	add	sp, #24
   346b4:	bd80      	pop	{r7, pc}
   346b6:	46c0      	nop			; (mov r8, r8)
   346b8:	000336e5 	.word	0x000336e5
   346bc:	000346cd 	.word	0x000346cd
   346c0:	0003d074 	.word	0x0003d074
   346c4:	00037b8d 	.word	0x00037b8d
   346c8:	0003430d 	.word	0x0003430d

000346cc <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   346cc:	b580      	push	{r7, lr}
   346ce:	b084      	sub	sp, #16
   346d0:	af00      	add	r7, sp, #0
   346d2:	6078      	str	r0, [r7, #4]
   346d4:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   346d6:	687b      	ldr	r3, [r7, #4]
   346d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   346da:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   346dc:	687b      	ldr	r3, [r7, #4]
   346de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   346e0:	001a      	movs	r2, r3
   346e2:	683b      	ldr	r3, [r7, #0]
   346e4:	1ad2      	subs	r2, r2, r3
   346e6:	68fb      	ldr	r3, [r7, #12]
   346e8:	18d3      	adds	r3, r2, r3
   346ea:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   346ec:	68bb      	ldr	r3, [r7, #8]
   346ee:	2b00      	cmp	r3, #0
   346f0:	dd09      	ble.n	34706 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   346f2:	68ba      	ldr	r2, [r7, #8]
   346f4:	6839      	ldr	r1, [r7, #0]
   346f6:	68fb      	ldr	r3, [r7, #12]
   346f8:	0018      	movs	r0, r3
   346fa:	4b06      	ldr	r3, [pc, #24]	; (34714 <_http_client_move_buffer+0x48>)
   346fc:	4798      	blx	r3
		module->recved_size = remain;
   346fe:	68ba      	ldr	r2, [r7, #8]
   34700:	687b      	ldr	r3, [r7, #4]
   34702:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   34704:	e002      	b.n	3470c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   34706:	687b      	ldr	r3, [r7, #4]
   34708:	2200      	movs	r2, #0
   3470a:	645a      	str	r2, [r3, #68]	; 0x44
}
   3470c:	46c0      	nop			; (mov r8, r8)
   3470e:	46bd      	mov	sp, r7
   34710:	b004      	add	sp, #16
   34712:	bd80      	pop	{r7, pc}
   34714:	00037947 	.word	0x00037947

00034718 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   34718:	b580      	push	{r7, lr}
   3471a:	b084      	sub	sp, #16
   3471c:	af00      	add	r7, sp, #0
   3471e:	60f8      	str	r0, [r7, #12]
   34720:	60b9      	str	r1, [r7, #8]
   34722:	607a      	str	r2, [r7, #4]
   34724:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   34726:	68fb      	ldr	r3, [r7, #12]
   34728:	687a      	ldr	r2, [r7, #4]
   3472a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   3472c:	68fb      	ldr	r3, [r7, #12]
   3472e:	68ba      	ldr	r2, [r7, #8]
   34730:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   34732:	68fb      	ldr	r3, [r7, #12]
   34734:	2200      	movs	r2, #0
   34736:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   34738:	68fb      	ldr	r3, [r7, #12]
   3473a:	683a      	ldr	r2, [r7, #0]
   3473c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   3473e:	68fb      	ldr	r3, [r7, #12]
   34740:	69ba      	ldr	r2, [r7, #24]
   34742:	60da      	str	r2, [r3, #12]
}
   34744:	46c0      	nop			; (mov r8, r8)
   34746:	46bd      	mov	sp, r7
   34748:	b004      	add	sp, #16
   3474a:	bd80      	pop	{r7, pc}

0003474c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   3474c:	b580      	push	{r7, lr}
   3474e:	b084      	sub	sp, #16
   34750:	af00      	add	r7, sp, #0
   34752:	6078      	str	r0, [r7, #4]
   34754:	000a      	movs	r2, r1
   34756:	1cfb      	adds	r3, r7, #3
   34758:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   3475a:	687b      	ldr	r3, [r7, #4]
   3475c:	681a      	ldr	r2, [r3, #0]
   3475e:	687b      	ldr	r3, [r7, #4]
   34760:	685b      	ldr	r3, [r3, #4]
   34762:	1ad3      	subs	r3, r2, r3
   34764:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   34766:	68fb      	ldr	r3, [r7, #12]
   34768:	2b00      	cmp	r3, #0
   3476a:	dc03      	bgt.n	34774 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   3476c:	687b      	ldr	r3, [r7, #4]
   3476e:	0018      	movs	r0, r3
   34770:	4b08      	ldr	r3, [pc, #32]	; (34794 <stream_writer_send_8+0x48>)
   34772:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   34774:	687b      	ldr	r3, [r7, #4]
   34776:	6919      	ldr	r1, [r3, #16]
   34778:	687b      	ldr	r3, [r7, #4]
   3477a:	685b      	ldr	r3, [r3, #4]
   3477c:	1c58      	adds	r0, r3, #1
   3477e:	687a      	ldr	r2, [r7, #4]
   34780:	6050      	str	r0, [r2, #4]
   34782:	18cb      	adds	r3, r1, r3
   34784:	1cfa      	adds	r2, r7, #3
   34786:	7812      	ldrb	r2, [r2, #0]
   34788:	701a      	strb	r2, [r3, #0]
}
   3478a:	46c0      	nop			; (mov r8, r8)
   3478c:	46bd      	mov	sp, r7
   3478e:	b004      	add	sp, #16
   34790:	bd80      	pop	{r7, pc}
   34792:	46c0      	nop			; (mov r8, r8)
   34794:	000347d5 	.word	0x000347d5

00034798 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   34798:	b580      	push	{r7, lr}
   3479a:	b084      	sub	sp, #16
   3479c:	af00      	add	r7, sp, #0
   3479e:	60f8      	str	r0, [r7, #12]
   347a0:	60b9      	str	r1, [r7, #8]
   347a2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   347a4:	e00d      	b.n	347c2 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   347a6:	68bb      	ldr	r3, [r7, #8]
   347a8:	781b      	ldrb	r3, [r3, #0]
   347aa:	b25a      	sxtb	r2, r3
   347ac:	68fb      	ldr	r3, [r7, #12]
   347ae:	0011      	movs	r1, r2
   347b0:	0018      	movs	r0, r3
   347b2:	4b07      	ldr	r3, [pc, #28]	; (347d0 <stream_writer_send_buffer+0x38>)
   347b4:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   347b6:	687b      	ldr	r3, [r7, #4]
   347b8:	3b01      	subs	r3, #1
   347ba:	607b      	str	r3, [r7, #4]
   347bc:	68bb      	ldr	r3, [r7, #8]
   347be:	3301      	adds	r3, #1
   347c0:	60bb      	str	r3, [r7, #8]
   347c2:	687b      	ldr	r3, [r7, #4]
   347c4:	2b00      	cmp	r3, #0
   347c6:	d1ee      	bne.n	347a6 <stream_writer_send_buffer+0xe>
	}
}
   347c8:	46c0      	nop			; (mov r8, r8)
   347ca:	46bd      	mov	sp, r7
   347cc:	b004      	add	sp, #16
   347ce:	bd80      	pop	{r7, pc}
   347d0:	0003474d 	.word	0x0003474d

000347d4 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   347d4:	b590      	push	{r4, r7, lr}
   347d6:	b083      	sub	sp, #12
   347d8:	af00      	add	r7, sp, #0
   347da:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   347dc:	687b      	ldr	r3, [r7, #4]
   347de:	685b      	ldr	r3, [r3, #4]
   347e0:	2b00      	cmp	r3, #0
   347e2:	d00c      	beq.n	347fe <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   347e4:	687b      	ldr	r3, [r7, #4]
   347e6:	689c      	ldr	r4, [r3, #8]
   347e8:	687b      	ldr	r3, [r7, #4]
   347ea:	68d8      	ldr	r0, [r3, #12]
   347ec:	687b      	ldr	r3, [r7, #4]
   347ee:	6919      	ldr	r1, [r3, #16]
   347f0:	687b      	ldr	r3, [r7, #4]
   347f2:	685b      	ldr	r3, [r3, #4]
   347f4:	001a      	movs	r2, r3
   347f6:	47a0      	blx	r4
		writer->written = 0;
   347f8:	687b      	ldr	r3, [r7, #4]
   347fa:	2200      	movs	r2, #0
   347fc:	605a      	str	r2, [r3, #4]
	}
}
   347fe:	46c0      	nop			; (mov r8, r8)
   34800:	46bd      	mov	sp, r7
   34802:	b003      	add	sp, #12
   34804:	bd90      	pop	{r4, r7, pc}
	...

00034808 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   34808:	b580      	push	{r7, lr}
   3480a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   3480c:	2000      	movs	r0, #0
   3480e:	4b05      	ldr	r3, [pc, #20]	; (34824 <system_cpu_clock_get_hz+0x1c>)
   34810:	4798      	blx	r3
   34812:	0002      	movs	r2, r0
   34814:	4b04      	ldr	r3, [pc, #16]	; (34828 <system_cpu_clock_get_hz+0x20>)
   34816:	7a1b      	ldrb	r3, [r3, #8]
   34818:	b2db      	uxtb	r3, r3
   3481a:	40da      	lsrs	r2, r3
   3481c:	0013      	movs	r3, r2
}
   3481e:	0018      	movs	r0, r3
   34820:	46bd      	mov	sp, r7
   34822:	bd80      	pop	{r7, pc}
   34824:	0002c1e9 	.word	0x0002c1e9
   34828:	40000400 	.word	0x40000400

0003482c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   3482c:	b580      	push	{r7, lr}
   3482e:	b084      	sub	sp, #16
   34830:	af00      	add	r7, sp, #0
   34832:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   34834:	687b      	ldr	r3, [r7, #4]
   34836:	681b      	ldr	r3, [r3, #0]
   34838:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   3483a:	46c0      	nop			; (mov r8, r8)
   3483c:	68fb      	ldr	r3, [r7, #12]
   3483e:	689b      	ldr	r3, [r3, #8]
   34840:	2202      	movs	r2, #2
   34842:	4013      	ands	r3, r2
   34844:	d1fa      	bne.n	3483c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   34846:	68fb      	ldr	r3, [r7, #12]
   34848:	681b      	ldr	r3, [r3, #0]
   3484a:	2202      	movs	r2, #2
   3484c:	431a      	orrs	r2, r3
   3484e:	68fb      	ldr	r3, [r7, #12]
   34850:	601a      	str	r2, [r3, #0]
}
   34852:	46c0      	nop			; (mov r8, r8)
   34854:	46bd      	mov	sp, r7
   34856:	b004      	add	sp, #16
   34858:	bd80      	pop	{r7, pc}
	...

0003485c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   3485c:	b580      	push	{r7, lr}
   3485e:	b082      	sub	sp, #8
   34860:	af00      	add	r7, sp, #0
   34862:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   34864:	4b04      	ldr	r3, [pc, #16]	; (34878 <sw_timer_tcc_callback+0x1c>)
   34866:	681b      	ldr	r3, [r3, #0]
   34868:	1c5a      	adds	r2, r3, #1
   3486a:	4b03      	ldr	r3, [pc, #12]	; (34878 <sw_timer_tcc_callback+0x1c>)
   3486c:	601a      	str	r2, [r3, #0]
}
   3486e:	46c0      	nop			; (mov r8, r8)
   34870:	46bd      	mov	sp, r7
   34872:	b002      	add	sp, #8
   34874:	bd80      	pop	{r7, pc}
   34876:	46c0      	nop			; (mov r8, r8)
   34878:	20004584 	.word	0x20004584

0003487c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   3487c:	b580      	push	{r7, lr}
   3487e:	b082      	sub	sp, #8
   34880:	af00      	add	r7, sp, #0
   34882:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   34884:	687b      	ldr	r3, [r7, #4]
   34886:	2264      	movs	r2, #100	; 0x64
   34888:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   3488a:	687b      	ldr	r3, [r7, #4]
   3488c:	2200      	movs	r2, #0
   3488e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   34890:	687b      	ldr	r3, [r7, #4]
   34892:	2200      	movs	r2, #0
   34894:	705a      	strb	r2, [r3, #1]
}
   34896:	46c0      	nop			; (mov r8, r8)
   34898:	46bd      	mov	sp, r7
   3489a:	b002      	add	sp, #8
   3489c:	bd80      	pop	{r7, pc}
	...

000348a0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   348a0:	b590      	push	{r4, r7, lr}
   348a2:	b0b1      	sub	sp, #196	; 0xc4
   348a4:	af00      	add	r7, sp, #0
   348a6:	6078      	str	r0, [r7, #4]
   348a8:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   348aa:	230c      	movs	r3, #12
   348ac:	18fb      	adds	r3, r7, r3
   348ae:	4a2e      	ldr	r2, [pc, #184]	; (34968 <sw_timer_init+0xc8>)
   348b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   348b2:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   348b4:	683b      	ldr	r3, [r7, #0]
   348b6:	885b      	ldrh	r3, [r3, #2]
   348b8:	001a      	movs	r2, r3
   348ba:	687b      	ldr	r3, [r7, #4]
   348bc:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   348be:	687b      	ldr	r3, [r7, #4]
   348c0:	3314      	adds	r3, #20
   348c2:	22bc      	movs	r2, #188	; 0xbc
   348c4:	18ba      	adds	r2, r7, r2
   348c6:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   348c8:	683b      	ldr	r3, [r7, #0]
   348ca:	781b      	ldrb	r3, [r3, #0]
   348cc:	001a      	movs	r2, r3
   348ce:	230c      	movs	r3, #12
   348d0:	18fb      	adds	r3, r7, r3
   348d2:	0092      	lsls	r2, r2, #2
   348d4:	58d2      	ldr	r2, [r2, r3]
   348d6:	2318      	movs	r3, #24
   348d8:	18fb      	adds	r3, r7, r3
   348da:	0011      	movs	r1, r2
   348dc:	0018      	movs	r0, r3
   348de:	4b23      	ldr	r3, [pc, #140]	; (3496c <sw_timer_init+0xcc>)
   348e0:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   348e2:	4b23      	ldr	r3, [pc, #140]	; (34970 <sw_timer_init+0xd0>)
   348e4:	4798      	blx	r3
   348e6:	0004      	movs	r4, r0
   348e8:	683b      	ldr	r3, [r7, #0]
   348ea:	885b      	ldrh	r3, [r3, #2]
   348ec:	001a      	movs	r2, r3
   348ee:	4b21      	ldr	r3, [pc, #132]	; (34974 <sw_timer_init+0xd4>)
   348f0:	0011      	movs	r1, r2
   348f2:	22fa      	movs	r2, #250	; 0xfa
   348f4:	0210      	lsls	r0, r2, #8
   348f6:	4798      	blx	r3
   348f8:	0003      	movs	r3, r0
   348fa:	001a      	movs	r2, r3
   348fc:	4b1e      	ldr	r3, [pc, #120]	; (34978 <sw_timer_init+0xd8>)
   348fe:	0011      	movs	r1, r2
   34900:	0020      	movs	r0, r4
   34902:	4798      	blx	r3
   34904:	0003      	movs	r3, r0
   34906:	001a      	movs	r2, r3
   34908:	2318      	movs	r3, #24
   3490a:	18fb      	adds	r3, r7, r3
   3490c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   3490e:	2318      	movs	r3, #24
   34910:	18fb      	adds	r3, r7, r3
   34912:	2205      	movs	r2, #5
   34914:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   34916:	683b      	ldr	r3, [r7, #0]
   34918:	781b      	ldrb	r3, [r3, #0]
   3491a:	001a      	movs	r2, r3
   3491c:	230c      	movs	r3, #12
   3491e:	18fb      	adds	r3, r7, r3
   34920:	0092      	lsls	r2, r2, #2
   34922:	58d1      	ldr	r1, [r2, r3]
   34924:	2318      	movs	r3, #24
   34926:	18fa      	adds	r2, r7, r3
   34928:	23bc      	movs	r3, #188	; 0xbc
   3492a:	18fb      	adds	r3, r7, r3
   3492c:	681b      	ldr	r3, [r3, #0]
   3492e:	0018      	movs	r0, r3
   34930:	4b12      	ldr	r3, [pc, #72]	; (3497c <sw_timer_init+0xdc>)
   34932:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   34934:	683b      	ldr	r3, [r7, #0]
   34936:	785b      	ldrb	r3, [r3, #1]
   34938:	3308      	adds	r3, #8
   3493a:	b2da      	uxtb	r2, r3
   3493c:	4910      	ldr	r1, [pc, #64]	; (34980 <sw_timer_init+0xe0>)
   3493e:	23bc      	movs	r3, #188	; 0xbc
   34940:	18fb      	adds	r3, r7, r3
   34942:	681b      	ldr	r3, [r3, #0]
   34944:	0018      	movs	r0, r3
   34946:	4b0f      	ldr	r3, [pc, #60]	; (34984 <sw_timer_init+0xe4>)
   34948:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3494a:	683b      	ldr	r3, [r7, #0]
   3494c:	785b      	ldrb	r3, [r3, #1]
   3494e:	3308      	adds	r3, #8
   34950:	b2da      	uxtb	r2, r3
   34952:	23bc      	movs	r3, #188	; 0xbc
   34954:	18fb      	adds	r3, r7, r3
   34956:	681b      	ldr	r3, [r3, #0]
   34958:	0011      	movs	r1, r2
   3495a:	0018      	movs	r0, r3
   3495c:	4b0a      	ldr	r3, [pc, #40]	; (34988 <sw_timer_init+0xe8>)
   3495e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   34960:	46c0      	nop			; (mov r8, r8)
   34962:	46bd      	mov	sp, r7
   34964:	b031      	add	sp, #196	; 0xc4
   34966:	bd90      	pop	{r4, r7, pc}
   34968:	0003d0b4 	.word	0x0003d0b4
   3496c:	0002c781 	.word	0x0002c781
   34970:	00034809 	.word	0x00034809
   34974:	00034f49 	.word	0x00034f49
   34978:	00034e35 	.word	0x00034e35
   3497c:	0002cddd 	.word	0x0002cddd
   34980:	0003485d 	.word	0x0003485d
   34984:	0002d1f5 	.word	0x0002d1f5
   34988:	0002d235 	.word	0x0002d235

0003498c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   3498c:	b580      	push	{r7, lr}
   3498e:	b084      	sub	sp, #16
   34990:	af00      	add	r7, sp, #0
   34992:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   34994:	687b      	ldr	r3, [r7, #4]
   34996:	3314      	adds	r3, #20
   34998:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   3499a:	68fb      	ldr	r3, [r7, #12]
   3499c:	0018      	movs	r0, r3
   3499e:	4b03      	ldr	r3, [pc, #12]	; (349ac <sw_timer_enable+0x20>)
   349a0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   349a2:	46c0      	nop			; (mov r8, r8)
   349a4:	46bd      	mov	sp, r7
   349a6:	b004      	add	sp, #16
   349a8:	bd80      	pop	{r7, pc}
   349aa:	46c0      	nop			; (mov r8, r8)
   349ac:	0003482d 	.word	0x0003482d

000349b0 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   349b0:	b580      	push	{r7, lr}
   349b2:	b086      	sub	sp, #24
   349b4:	af00      	add	r7, sp, #0
   349b6:	60f8      	str	r0, [r7, #12]
   349b8:	60b9      	str	r1, [r7, #8]
   349ba:	607a      	str	r2, [r7, #4]
   349bc:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   349be:	2300      	movs	r3, #0
   349c0:	617b      	str	r3, [r7, #20]
   349c2:	e032      	b.n	34a2a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   349c4:	68f9      	ldr	r1, [r7, #12]
   349c6:	697a      	ldr	r2, [r7, #20]
   349c8:	0013      	movs	r3, r2
   349ca:	009b      	lsls	r3, r3, #2
   349cc:	189b      	adds	r3, r3, r2
   349ce:	009b      	lsls	r3, r3, #2
   349d0:	5c5b      	ldrb	r3, [r3, r1]
   349d2:	07db      	lsls	r3, r3, #31
   349d4:	0fdb      	lsrs	r3, r3, #31
   349d6:	b2db      	uxtb	r3, r3
   349d8:	2b00      	cmp	r3, #0
   349da:	d123      	bne.n	34a24 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   349dc:	697a      	ldr	r2, [r7, #20]
   349de:	0013      	movs	r3, r2
   349e0:	009b      	lsls	r3, r3, #2
   349e2:	189b      	adds	r3, r3, r2
   349e4:	009b      	lsls	r3, r3, #2
   349e6:	68fa      	ldr	r2, [r7, #12]
   349e8:	18d3      	adds	r3, r2, r3
   349ea:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   349ec:	693b      	ldr	r3, [r7, #16]
   349ee:	68ba      	ldr	r2, [r7, #8]
   349f0:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   349f2:	693b      	ldr	r3, [r7, #16]
   349f4:	781a      	ldrb	r2, [r3, #0]
   349f6:	2102      	movs	r1, #2
   349f8:	438a      	bics	r2, r1
   349fa:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   349fc:	693b      	ldr	r3, [r7, #16]
   349fe:	687a      	ldr	r2, [r7, #4]
   34a00:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   34a02:	68fb      	ldr	r3, [r7, #12]
   34a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   34a06:	4b0d      	ldr	r3, [pc, #52]	; (34a3c <sw_timer_register_callback+0x8c>)
   34a08:	0011      	movs	r1, r2
   34a0a:	6838      	ldr	r0, [r7, #0]
   34a0c:	4798      	blx	r3
   34a0e:	0003      	movs	r3, r0
   34a10:	001a      	movs	r2, r3
   34a12:	693b      	ldr	r3, [r7, #16]
   34a14:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   34a16:	693b      	ldr	r3, [r7, #16]
   34a18:	781a      	ldrb	r2, [r3, #0]
   34a1a:	2101      	movs	r1, #1
   34a1c:	430a      	orrs	r2, r1
   34a1e:	701a      	strb	r2, [r3, #0]
			return index;
   34a20:	697b      	ldr	r3, [r7, #20]
   34a22:	e007      	b.n	34a34 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34a24:	697b      	ldr	r3, [r7, #20]
   34a26:	3301      	adds	r3, #1
   34a28:	617b      	str	r3, [r7, #20]
   34a2a:	697b      	ldr	r3, [r7, #20]
   34a2c:	2b00      	cmp	r3, #0
   34a2e:	ddc9      	ble.n	349c4 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   34a30:	2301      	movs	r3, #1
   34a32:	425b      	negs	r3, r3
}
   34a34:	0018      	movs	r0, r3
   34a36:	46bd      	mov	sp, r7
   34a38:	b006      	add	sp, #24
   34a3a:	bd80      	pop	{r7, pc}
   34a3c:	00034e35 	.word	0x00034e35

00034a40 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   34a40:	b580      	push	{r7, lr}
   34a42:	b086      	sub	sp, #24
   34a44:	af00      	add	r7, sp, #0
   34a46:	60f8      	str	r0, [r7, #12]
   34a48:	60b9      	str	r1, [r7, #8]
   34a4a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   34a4c:	68ba      	ldr	r2, [r7, #8]
   34a4e:	0013      	movs	r3, r2
   34a50:	009b      	lsls	r3, r3, #2
   34a52:	189b      	adds	r3, r3, r2
   34a54:	009b      	lsls	r3, r3, #2
   34a56:	68fa      	ldr	r2, [r7, #12]
   34a58:	18d3      	adds	r3, r2, r3
   34a5a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   34a5c:	697b      	ldr	r3, [r7, #20]
   34a5e:	781a      	ldrb	r2, [r3, #0]
   34a60:	2102      	movs	r1, #2
   34a62:	430a      	orrs	r2, r1
   34a64:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   34a66:	68fb      	ldr	r3, [r7, #12]
   34a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   34a6a:	4b07      	ldr	r3, [pc, #28]	; (34a88 <sw_timer_enable_callback+0x48>)
   34a6c:	0011      	movs	r1, r2
   34a6e:	6878      	ldr	r0, [r7, #4]
   34a70:	4798      	blx	r3
   34a72:	0003      	movs	r3, r0
   34a74:	001a      	movs	r2, r3
   34a76:	4b05      	ldr	r3, [pc, #20]	; (34a8c <sw_timer_enable_callback+0x4c>)
   34a78:	681b      	ldr	r3, [r3, #0]
   34a7a:	18d2      	adds	r2, r2, r3
   34a7c:	697b      	ldr	r3, [r7, #20]
   34a7e:	611a      	str	r2, [r3, #16]
}
   34a80:	46c0      	nop			; (mov r8, r8)
   34a82:	46bd      	mov	sp, r7
   34a84:	b006      	add	sp, #24
   34a86:	bd80      	pop	{r7, pc}
   34a88:	00034e35 	.word	0x00034e35
   34a8c:	20004584 	.word	0x20004584

00034a90 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   34a90:	b580      	push	{r7, lr}
   34a92:	b084      	sub	sp, #16
   34a94:	af00      	add	r7, sp, #0
   34a96:	6078      	str	r0, [r7, #4]
   34a98:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   34a9a:	683a      	ldr	r2, [r7, #0]
   34a9c:	0013      	movs	r3, r2
   34a9e:	009b      	lsls	r3, r3, #2
   34aa0:	189b      	adds	r3, r3, r2
   34aa2:	009b      	lsls	r3, r3, #2
   34aa4:	687a      	ldr	r2, [r7, #4]
   34aa6:	18d3      	adds	r3, r2, r3
   34aa8:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   34aaa:	68fb      	ldr	r3, [r7, #12]
   34aac:	781a      	ldrb	r2, [r3, #0]
   34aae:	2102      	movs	r1, #2
   34ab0:	438a      	bics	r2, r1
   34ab2:	701a      	strb	r2, [r3, #0]
}
   34ab4:	46c0      	nop			; (mov r8, r8)
   34ab6:	46bd      	mov	sp, r7
   34ab8:	b004      	add	sp, #16
   34aba:	bd80      	pop	{r7, pc}

00034abc <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   34abc:	b590      	push	{r4, r7, lr}
   34abe:	b085      	sub	sp, #20
   34ac0:	af00      	add	r7, sp, #0
   34ac2:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34ac4:	2300      	movs	r3, #0
   34ac6:	60fb      	str	r3, [r7, #12]
   34ac8:	e053      	b.n	34b72 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   34aca:	6879      	ldr	r1, [r7, #4]
   34acc:	68fa      	ldr	r2, [r7, #12]
   34ace:	0013      	movs	r3, r2
   34ad0:	009b      	lsls	r3, r3, #2
   34ad2:	189b      	adds	r3, r3, r2
   34ad4:	009b      	lsls	r3, r3, #2
   34ad6:	5c5b      	ldrb	r3, [r3, r1]
   34ad8:	07db      	lsls	r3, r3, #31
   34ada:	0fdb      	lsrs	r3, r3, #31
   34adc:	b2db      	uxtb	r3, r3
   34ade:	2b00      	cmp	r3, #0
   34ae0:	d044      	beq.n	34b6c <sw_timer_task+0xb0>
   34ae2:	6879      	ldr	r1, [r7, #4]
   34ae4:	68fa      	ldr	r2, [r7, #12]
   34ae6:	0013      	movs	r3, r2
   34ae8:	009b      	lsls	r3, r3, #2
   34aea:	189b      	adds	r3, r3, r2
   34aec:	009b      	lsls	r3, r3, #2
   34aee:	5c5b      	ldrb	r3, [r3, r1]
   34af0:	079b      	lsls	r3, r3, #30
   34af2:	0fdb      	lsrs	r3, r3, #31
   34af4:	b2db      	uxtb	r3, r3
   34af6:	2b00      	cmp	r3, #0
   34af8:	d038      	beq.n	34b6c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   34afa:	68fa      	ldr	r2, [r7, #12]
   34afc:	0013      	movs	r3, r2
   34afe:	009b      	lsls	r3, r3, #2
   34b00:	189b      	adds	r3, r3, r2
   34b02:	009b      	lsls	r3, r3, #2
   34b04:	687a      	ldr	r2, [r7, #4]
   34b06:	18d3      	adds	r3, r2, r3
   34b08:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   34b0a:	68bb      	ldr	r3, [r7, #8]
   34b0c:	691a      	ldr	r2, [r3, #16]
   34b0e:	4b1c      	ldr	r3, [pc, #112]	; (34b80 <sw_timer_task+0xc4>)
   34b10:	681b      	ldr	r3, [r3, #0]
   34b12:	1ad3      	subs	r3, r2, r3
   34b14:	d52a      	bpl.n	34b6c <sw_timer_task+0xb0>
   34b16:	68bb      	ldr	r3, [r7, #8]
   34b18:	781b      	ldrb	r3, [r3, #0]
   34b1a:	2204      	movs	r2, #4
   34b1c:	4013      	ands	r3, r2
   34b1e:	b2db      	uxtb	r3, r3
   34b20:	2b00      	cmp	r3, #0
   34b22:	d123      	bne.n	34b6c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   34b24:	68bb      	ldr	r3, [r7, #8]
   34b26:	781a      	ldrb	r2, [r3, #0]
   34b28:	2104      	movs	r1, #4
   34b2a:	430a      	orrs	r2, r1
   34b2c:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   34b2e:	68bb      	ldr	r3, [r7, #8]
   34b30:	68db      	ldr	r3, [r3, #12]
   34b32:	2b00      	cmp	r3, #0
   34b34:	d007      	beq.n	34b46 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   34b36:	68bb      	ldr	r3, [r7, #8]
   34b38:	68da      	ldr	r2, [r3, #12]
   34b3a:	4b11      	ldr	r3, [pc, #68]	; (34b80 <sw_timer_task+0xc4>)
   34b3c:	681b      	ldr	r3, [r3, #0]
   34b3e:	18d2      	adds	r2, r2, r3
   34b40:	68bb      	ldr	r3, [r7, #8]
   34b42:	611a      	str	r2, [r3, #16]
   34b44:	e004      	b.n	34b50 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   34b46:	68bb      	ldr	r3, [r7, #8]
   34b48:	781a      	ldrb	r2, [r3, #0]
   34b4a:	2102      	movs	r1, #2
   34b4c:	438a      	bics	r2, r1
   34b4e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   34b50:	68bb      	ldr	r3, [r7, #8]
   34b52:	685c      	ldr	r4, [r3, #4]
   34b54:	68bb      	ldr	r3, [r7, #8]
   34b56:	689a      	ldr	r2, [r3, #8]
   34b58:	68bb      	ldr	r3, [r7, #8]
   34b5a:	68db      	ldr	r3, [r3, #12]
   34b5c:	68f9      	ldr	r1, [r7, #12]
   34b5e:	6878      	ldr	r0, [r7, #4]
   34b60:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   34b62:	68bb      	ldr	r3, [r7, #8]
   34b64:	781a      	ldrb	r2, [r3, #0]
   34b66:	2104      	movs	r1, #4
   34b68:	438a      	bics	r2, r1
   34b6a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34b6c:	68fb      	ldr	r3, [r7, #12]
   34b6e:	3301      	adds	r3, #1
   34b70:	60fb      	str	r3, [r7, #12]
   34b72:	68fb      	ldr	r3, [r7, #12]
   34b74:	2b00      	cmp	r3, #0
   34b76:	dda8      	ble.n	34aca <sw_timer_task+0xe>
			}
		}
	}
}
   34b78:	46c0      	nop			; (mov r8, r8)
   34b7a:	46bd      	mov	sp, r7
   34b7c:	b005      	add	sp, #20
   34b7e:	bd90      	pop	{r4, r7, pc}
   34b80:	20004584 	.word	0x20004584

00034b84 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   34b84:	b580      	push	{r7, lr}
   34b86:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   34b88:	4b06      	ldr	r3, [pc, #24]	; (34ba4 <main+0x20>)
   34b8a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   34b8c:	4b06      	ldr	r3, [pc, #24]	; (34ba8 <main+0x24>)
   34b8e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   34b90:	2001      	movs	r0, #1
   34b92:	4b06      	ldr	r3, [pc, #24]	; (34bac <main+0x28>)
   34b94:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   34b96:	4b06      	ldr	r3, [pc, #24]	; (34bb0 <main+0x2c>)
   34b98:	4798      	blx	r3

    return 0;  // Will not get here
   34b9a:	2300      	movs	r3, #0
}
   34b9c:	0018      	movs	r0, r3
   34b9e:	46bd      	mov	sp, r7
   34ba0:	bd80      	pop	{r7, pc}
   34ba2:	46c0      	nop			; (mov r8, r8)
   34ba4:	0002c675 	.word	0x0002c675
   34ba8:	00020195 	.word	0x00020195
   34bac:	0001a861 	.word	0x0001a861
   34bb0:	0001e7ed 	.word	0x0001e7ed

00034bb4 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   34bb4:	b580      	push	{r7, lr}
   34bb6:	b082      	sub	sp, #8
   34bb8:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   34bba:	4b22      	ldr	r3, [pc, #136]	; (34c44 <vApplicationDaemonTaskStartupHook+0x90>)
   34bbc:	0018      	movs	r0, r3
   34bbe:	4b22      	ldr	r3, [pc, #136]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34bc0:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   34bc2:	4b22      	ldr	r3, [pc, #136]	; (34c4c <vApplicationDaemonTaskStartupHook+0x98>)
   34bc4:	0018      	movs	r0, r3
   34bc6:	4b20      	ldr	r3, [pc, #128]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34bc8:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   34bca:	4b21      	ldr	r3, [pc, #132]	; (34c50 <vApplicationDaemonTaskStartupHook+0x9c>)
   34bcc:	4798      	blx	r3
   34bce:	1e03      	subs	r3, r0, #0
   34bd0:	d004      	beq.n	34bdc <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   34bd2:	4b20      	ldr	r3, [pc, #128]	; (34c54 <vApplicationDaemonTaskStartupHook+0xa0>)
   34bd4:	0018      	movs	r0, r3
   34bd6:	4b1c      	ldr	r3, [pc, #112]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34bd8:	4798      	blx	r3
   34bda:	e003      	b.n	34be4 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   34bdc:	4b1e      	ldr	r3, [pc, #120]	; (34c58 <vApplicationDaemonTaskStartupHook+0xa4>)
   34bde:	0018      	movs	r0, r3
   34be0:	4b19      	ldr	r3, [pc, #100]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34be2:	4798      	blx	r3
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
    }*/

   
    uint8_t whoamI = 0;
   34be4:	1dfb      	adds	r3, r7, #7
   34be6:	2200      	movs	r2, #0
   34be8:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   34bea:	4b1c      	ldr	r3, [pc, #112]	; (34c5c <vApplicationDaemonTaskStartupHook+0xa8>)
   34bec:	4798      	blx	r3
   34bee:	0002      	movs	r2, r0
   34bf0:	1dfb      	adds	r3, r7, #7
   34bf2:	0019      	movs	r1, r3
   34bf4:	0010      	movs	r0, r2
   34bf6:	4b1a      	ldr	r3, [pc, #104]	; (34c60 <vApplicationDaemonTaskStartupHook+0xac>)
   34bf8:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   34bfa:	1dfb      	adds	r3, r7, #7
   34bfc:	781b      	ldrb	r3, [r3, #0]
   34bfe:	2b6c      	cmp	r3, #108	; 0x6c
   34c00:	d004      	beq.n	34c0c <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   34c02:	4b18      	ldr	r3, [pc, #96]	; (34c64 <vApplicationDaemonTaskStartupHook+0xb0>)
   34c04:	0018      	movs	r0, r3
   34c06:	4b10      	ldr	r3, [pc, #64]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34c08:	4798      	blx	r3
   34c0a:	e010      	b.n	34c2e <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   34c0c:	4b16      	ldr	r3, [pc, #88]	; (34c68 <vApplicationDaemonTaskStartupHook+0xb4>)
   34c0e:	0018      	movs	r0, r3
   34c10:	4b0d      	ldr	r3, [pc, #52]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34c12:	4798      	blx	r3
        if (InitImu() == 0) {
   34c14:	4b15      	ldr	r3, [pc, #84]	; (34c6c <vApplicationDaemonTaskStartupHook+0xb8>)
   34c16:	4798      	blx	r3
   34c18:	1e03      	subs	r3, r0, #0
   34c1a:	d104      	bne.n	34c26 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   34c1c:	4b14      	ldr	r3, [pc, #80]	; (34c70 <vApplicationDaemonTaskStartupHook+0xbc>)
   34c1e:	0018      	movs	r0, r3
   34c20:	4b09      	ldr	r3, [pc, #36]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34c22:	4798      	blx	r3
   34c24:	e003      	b.n	34c2e <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   34c26:	4b13      	ldr	r3, [pc, #76]	; (34c74 <vApplicationDaemonTaskStartupHook+0xc0>)
   34c28:	0018      	movs	r0, r3
   34c2a:	4b07      	ldr	r3, [pc, #28]	; (34c48 <vApplicationDaemonTaskStartupHook+0x94>)
   34c2c:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   34c2e:	4b12      	ldr	r3, [pc, #72]	; (34c78 <vApplicationDaemonTaskStartupHook+0xc4>)
   34c30:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   34c32:	4b12      	ldr	r3, [pc, #72]	; (34c7c <vApplicationDaemonTaskStartupHook+0xc8>)
   34c34:	681b      	ldr	r3, [r3, #0]
   34c36:	0018      	movs	r0, r3
   34c38:	4b11      	ldr	r3, [pc, #68]	; (34c80 <vApplicationDaemonTaskStartupHook+0xcc>)
   34c3a:	4798      	blx	r3
}
   34c3c:	46c0      	nop			; (mov r8, r8)
   34c3e:	46bd      	mov	sp, r7
   34c40:	b002      	add	sp, #8
   34c42:	bd80      	pop	{r7, pc}
   34c44:	0003d0c0 	.word	0x0003d0c0
   34c48:	00020205 	.word	0x00020205
   34c4c:	0003d0e4 	.word	0x0003d0e4
   34c50:	0001581d 	.word	0x0001581d
   34c54:	0003d0fc 	.word	0x0003d0fc
   34c58:	0003d120 	.word	0x0003d120
   34c5c:	00016a51 	.word	0x00016a51
   34c60:	00016655 	.word	0x00016655
   34c64:	0003d13c 	.word	0x0003d13c
   34c68:	0003d150 	.word	0x0003d150
   34c6c:	00016a61 	.word	0x00016a61
   34c70:	0003d160 	.word	0x0003d160
   34c74:	0003d174 	.word	0x0003d174
   34c78:	00034c85 	.word	0x00034c85
   34c7c:	2000458c 	.word	0x2000458c
   34c80:	0001e691 	.word	0x0001e691

00034c84 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   34c84:	b590      	push	{r4, r7, lr}
   34c86:	b083      	sub	sp, #12
   34c88:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   34c8a:	4b44      	ldr	r3, [pc, #272]	; (34d9c <StartTasks+0x118>)
   34c8c:	4798      	blx	r3
   34c8e:	0003      	movs	r3, r0
   34c90:	4a43      	ldr	r2, [pc, #268]	; (34da0 <StartTasks+0x11c>)
   34c92:	4844      	ldr	r0, [pc, #272]	; (34da4 <StartTasks+0x120>)
   34c94:	2140      	movs	r1, #64	; 0x40
   34c96:	4c44      	ldr	r4, [pc, #272]	; (34da8 <StartTasks+0x124>)
   34c98:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34c9a:	4b42      	ldr	r3, [pc, #264]	; (34da4 <StartTasks+0x120>)
   34c9c:	0018      	movs	r0, r3
   34c9e:	4b43      	ldr	r3, [pc, #268]	; (34dac <StartTasks+0x128>)
   34ca0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   34ca2:	23c8      	movs	r3, #200	; 0xc8
   34ca4:	005a      	lsls	r2, r3, #1
   34ca6:	4942      	ldr	r1, [pc, #264]	; (34db0 <StartTasks+0x12c>)
   34ca8:	4842      	ldr	r0, [pc, #264]	; (34db4 <StartTasks+0x130>)
   34caa:	4b43      	ldr	r3, [pc, #268]	; (34db8 <StartTasks+0x134>)
   34cac:	9301      	str	r3, [sp, #4]
   34cae:	2304      	movs	r3, #4
   34cb0:	9300      	str	r3, [sp, #0]
   34cb2:	2300      	movs	r3, #0
   34cb4:	4c41      	ldr	r4, [pc, #260]	; (34dbc <StartTasks+0x138>)
   34cb6:	47a0      	blx	r4
   34cb8:	0003      	movs	r3, r0
   34cba:	2b01      	cmp	r3, #1
   34cbc:	d003      	beq.n	34cc6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   34cbe:	4b40      	ldr	r3, [pc, #256]	; (34dc0 <StartTasks+0x13c>)
   34cc0:	0018      	movs	r0, r3
   34cc2:	4b3a      	ldr	r3, [pc, #232]	; (34dac <StartTasks+0x128>)
   34cc4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   34cc6:	4b35      	ldr	r3, [pc, #212]	; (34d9c <StartTasks+0x118>)
   34cc8:	4798      	blx	r3
   34cca:	0003      	movs	r3, r0
   34ccc:	4a3d      	ldr	r2, [pc, #244]	; (34dc4 <StartTasks+0x140>)
   34cce:	4835      	ldr	r0, [pc, #212]	; (34da4 <StartTasks+0x120>)
   34cd0:	2140      	movs	r1, #64	; 0x40
   34cd2:	4c35      	ldr	r4, [pc, #212]	; (34da8 <StartTasks+0x124>)
   34cd4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34cd6:	4b33      	ldr	r3, [pc, #204]	; (34da4 <StartTasks+0x120>)
   34cd8:	0018      	movs	r0, r3
   34cda:	4b34      	ldr	r3, [pc, #208]	; (34dac <StartTasks+0x128>)
   34cdc:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   34cde:	23fa      	movs	r3, #250	; 0xfa
   34ce0:	009a      	lsls	r2, r3, #2
   34ce2:	4939      	ldr	r1, [pc, #228]	; (34dc8 <StartTasks+0x144>)
   34ce4:	4839      	ldr	r0, [pc, #228]	; (34dcc <StartTasks+0x148>)
   34ce6:	4b3a      	ldr	r3, [pc, #232]	; (34dd0 <StartTasks+0x14c>)
   34ce8:	9301      	str	r3, [sp, #4]
   34cea:	2303      	movs	r3, #3
   34cec:	9300      	str	r3, [sp, #0]
   34cee:	2300      	movs	r3, #0
   34cf0:	4c32      	ldr	r4, [pc, #200]	; (34dbc <StartTasks+0x138>)
   34cf2:	47a0      	blx	r4
   34cf4:	0003      	movs	r3, r0
   34cf6:	2b01      	cmp	r3, #1
   34cf8:	d003      	beq.n	34d02 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   34cfa:	4b36      	ldr	r3, [pc, #216]	; (34dd4 <StartTasks+0x150>)
   34cfc:	0018      	movs	r0, r3
   34cfe:	4b2b      	ldr	r3, [pc, #172]	; (34dac <StartTasks+0x128>)
   34d00:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   34d02:	4b26      	ldr	r3, [pc, #152]	; (34d9c <StartTasks+0x118>)
   34d04:	4798      	blx	r3
   34d06:	0003      	movs	r3, r0
   34d08:	4a33      	ldr	r2, [pc, #204]	; (34dd8 <StartTasks+0x154>)
   34d0a:	4826      	ldr	r0, [pc, #152]	; (34da4 <StartTasks+0x120>)
   34d0c:	2140      	movs	r1, #64	; 0x40
   34d0e:	4c26      	ldr	r4, [pc, #152]	; (34da8 <StartTasks+0x124>)
   34d10:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34d12:	4b24      	ldr	r3, [pc, #144]	; (34da4 <StartTasks+0x120>)
   34d14:	0018      	movs	r0, r3
   34d16:	4b25      	ldr	r3, [pc, #148]	; (34dac <StartTasks+0x128>)
   34d18:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   34d1a:	23c8      	movs	r3, #200	; 0xc8
   34d1c:	005a      	lsls	r2, r3, #1
   34d1e:	492f      	ldr	r1, [pc, #188]	; (34ddc <StartTasks+0x158>)
   34d20:	482f      	ldr	r0, [pc, #188]	; (34de0 <StartTasks+0x15c>)
   34d22:	4b30      	ldr	r3, [pc, #192]	; (34de4 <StartTasks+0x160>)
   34d24:	9301      	str	r3, [sp, #4]
   34d26:	2304      	movs	r3, #4
   34d28:	9300      	str	r3, [sp, #0]
   34d2a:	2300      	movs	r3, #0
   34d2c:	4c23      	ldr	r4, [pc, #140]	; (34dbc <StartTasks+0x138>)
   34d2e:	47a0      	blx	r4
   34d30:	0003      	movs	r3, r0
   34d32:	2b01      	cmp	r3, #1
   34d34:	d003      	beq.n	34d3e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   34d36:	4b2c      	ldr	r3, [pc, #176]	; (34de8 <StartTasks+0x164>)
   34d38:	0018      	movs	r0, r3
   34d3a:	4b1c      	ldr	r3, [pc, #112]	; (34dac <StartTasks+0x128>)
   34d3c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   34d3e:	4b17      	ldr	r3, [pc, #92]	; (34d9c <StartTasks+0x118>)
   34d40:	4798      	blx	r3
   34d42:	0003      	movs	r3, r0
   34d44:	4a29      	ldr	r2, [pc, #164]	; (34dec <StartTasks+0x168>)
   34d46:	4817      	ldr	r0, [pc, #92]	; (34da4 <StartTasks+0x120>)
   34d48:	2140      	movs	r1, #64	; 0x40
   34d4a:	4c17      	ldr	r4, [pc, #92]	; (34da8 <StartTasks+0x124>)
   34d4c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34d4e:	4b15      	ldr	r3, [pc, #84]	; (34da4 <StartTasks+0x120>)
   34d50:	0018      	movs	r0, r3
   34d52:	4b16      	ldr	r3, [pc, #88]	; (34dac <StartTasks+0x128>)
   34d54:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   34d56:	2380      	movs	r3, #128	; 0x80
   34d58:	005a      	lsls	r2, r3, #1
   34d5a:	4925      	ldr	r1, [pc, #148]	; (34df0 <StartTasks+0x16c>)
   34d5c:	4825      	ldr	r0, [pc, #148]	; (34df4 <StartTasks+0x170>)
   34d5e:	4b26      	ldr	r3, [pc, #152]	; (34df8 <StartTasks+0x174>)
   34d60:	9301      	str	r3, [sp, #4]
   34d62:	2304      	movs	r3, #4
   34d64:	9300      	str	r3, [sp, #0]
   34d66:	2300      	movs	r3, #0
   34d68:	4c14      	ldr	r4, [pc, #80]	; (34dbc <StartTasks+0x138>)
   34d6a:	47a0      	blx	r4
   34d6c:	0003      	movs	r3, r0
   34d6e:	2b01      	cmp	r3, #1
   34d70:	d003      	beq.n	34d7a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   34d72:	4b22      	ldr	r3, [pc, #136]	; (34dfc <StartTasks+0x178>)
   34d74:	0018      	movs	r0, r3
   34d76:	4b0d      	ldr	r3, [pc, #52]	; (34dac <StartTasks+0x128>)
   34d78:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   34d7a:	4b08      	ldr	r3, [pc, #32]	; (34d9c <StartTasks+0x118>)
   34d7c:	4798      	blx	r3
   34d7e:	0003      	movs	r3, r0
   34d80:	4a1f      	ldr	r2, [pc, #124]	; (34e00 <StartTasks+0x17c>)
   34d82:	4808      	ldr	r0, [pc, #32]	; (34da4 <StartTasks+0x120>)
   34d84:	2140      	movs	r1, #64	; 0x40
   34d86:	4c08      	ldr	r4, [pc, #32]	; (34da8 <StartTasks+0x124>)
   34d88:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34d8a:	4b06      	ldr	r3, [pc, #24]	; (34da4 <StartTasks+0x120>)
   34d8c:	0018      	movs	r0, r3
   34d8e:	4b07      	ldr	r3, [pc, #28]	; (34dac <StartTasks+0x128>)
   34d90:	4798      	blx	r3
}
   34d92:	46c0      	nop			; (mov r8, r8)
   34d94:	46bd      	mov	sp, r7
   34d96:	b001      	add	sp, #4
   34d98:	bd90      	pop	{r4, r7, pc}
   34d9a:	46c0      	nop			; (mov r8, r8)
   34d9c:	0001c7d1 	.word	0x0001c7d1
   34da0:	0003d190 	.word	0x0003d190
   34da4:	20005ac8 	.word	0x20005ac8
   34da8:	00037bc5 	.word	0x00037bc5
   34dac:	00020205 	.word	0x00020205
   34db0:	0003d1b4 	.word	0x0003d1b4
   34db4:	00014c3d 	.word	0x00014c3d
   34db8:	20004588 	.word	0x20004588
   34dbc:	0001e215 	.word	0x0001e215
   34dc0:	0003d1c0 	.word	0x0003d1c0
   34dc4:	0003d1ec 	.word	0x0003d1ec
   34dc8:	0003d20c 	.word	0x0003d20c
   34dcc:	000194ed 	.word	0x000194ed
   34dd0:	20004590 	.word	0x20004590
   34dd4:	0003d218 	.word	0x0003d218
   34dd8:	0003d244 	.word	0x0003d244
   34ddc:	0003d264 	.word	0x0003d264
   34de0:	00017dbd 	.word	0x00017dbd
   34de4:	20004594 	.word	0x20004594
   34de8:	0003d26c 	.word	0x0003d26c
   34dec:	0003d298 	.word	0x0003d298
   34df0:	0003d2bc 	.word	0x0003d2bc
   34df4:	0001533d 	.word	0x0001533d
   34df8:	20004598 	.word	0x20004598
   34dfc:	0003d2cc 	.word	0x0003d2cc
   34e00:	0003d2fc 	.word	0x0003d2fc

00034e04 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   34e04:	b580      	push	{r7, lr}
   34e06:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   34e08:	4b02      	ldr	r3, [pc, #8]	; (34e14 <vApplicationMallocFailedHook+0x10>)
   34e0a:	0018      	movs	r0, r3
   34e0c:	4b02      	ldr	r3, [pc, #8]	; (34e18 <vApplicationMallocFailedHook+0x14>)
   34e0e:	4798      	blx	r3
    while (1)
   34e10:	e7fe      	b.n	34e10 <vApplicationMallocFailedHook+0xc>
   34e12:	46c0      	nop			; (mov r8, r8)
   34e14:	0003d324 	.word	0x0003d324
   34e18:	00020205 	.word	0x00020205

00034e1c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   34e1c:	b580      	push	{r7, lr}
   34e1e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   34e20:	4b02      	ldr	r3, [pc, #8]	; (34e2c <vApplicationStackOverflowHook+0x10>)
   34e22:	0018      	movs	r0, r3
   34e24:	4b02      	ldr	r3, [pc, #8]	; (34e30 <vApplicationStackOverflowHook+0x14>)
   34e26:	4798      	blx	r3
    while (1)
   34e28:	e7fe      	b.n	34e28 <vApplicationStackOverflowHook+0xc>
   34e2a:	46c0      	nop			; (mov r8, r8)
   34e2c:	0003d350 	.word	0x0003d350
   34e30:	00020205 	.word	0x00020205

00034e34 <__udivsi3>:
   34e34:	2200      	movs	r2, #0
   34e36:	0843      	lsrs	r3, r0, #1
   34e38:	428b      	cmp	r3, r1
   34e3a:	d374      	bcc.n	34f26 <__udivsi3+0xf2>
   34e3c:	0903      	lsrs	r3, r0, #4
   34e3e:	428b      	cmp	r3, r1
   34e40:	d35f      	bcc.n	34f02 <__udivsi3+0xce>
   34e42:	0a03      	lsrs	r3, r0, #8
   34e44:	428b      	cmp	r3, r1
   34e46:	d344      	bcc.n	34ed2 <__udivsi3+0x9e>
   34e48:	0b03      	lsrs	r3, r0, #12
   34e4a:	428b      	cmp	r3, r1
   34e4c:	d328      	bcc.n	34ea0 <__udivsi3+0x6c>
   34e4e:	0c03      	lsrs	r3, r0, #16
   34e50:	428b      	cmp	r3, r1
   34e52:	d30d      	bcc.n	34e70 <__udivsi3+0x3c>
   34e54:	22ff      	movs	r2, #255	; 0xff
   34e56:	0209      	lsls	r1, r1, #8
   34e58:	ba12      	rev	r2, r2
   34e5a:	0c03      	lsrs	r3, r0, #16
   34e5c:	428b      	cmp	r3, r1
   34e5e:	d302      	bcc.n	34e66 <__udivsi3+0x32>
   34e60:	1212      	asrs	r2, r2, #8
   34e62:	0209      	lsls	r1, r1, #8
   34e64:	d065      	beq.n	34f32 <__udivsi3+0xfe>
   34e66:	0b03      	lsrs	r3, r0, #12
   34e68:	428b      	cmp	r3, r1
   34e6a:	d319      	bcc.n	34ea0 <__udivsi3+0x6c>
   34e6c:	e000      	b.n	34e70 <__udivsi3+0x3c>
   34e6e:	0a09      	lsrs	r1, r1, #8
   34e70:	0bc3      	lsrs	r3, r0, #15
   34e72:	428b      	cmp	r3, r1
   34e74:	d301      	bcc.n	34e7a <__udivsi3+0x46>
   34e76:	03cb      	lsls	r3, r1, #15
   34e78:	1ac0      	subs	r0, r0, r3
   34e7a:	4152      	adcs	r2, r2
   34e7c:	0b83      	lsrs	r3, r0, #14
   34e7e:	428b      	cmp	r3, r1
   34e80:	d301      	bcc.n	34e86 <__udivsi3+0x52>
   34e82:	038b      	lsls	r3, r1, #14
   34e84:	1ac0      	subs	r0, r0, r3
   34e86:	4152      	adcs	r2, r2
   34e88:	0b43      	lsrs	r3, r0, #13
   34e8a:	428b      	cmp	r3, r1
   34e8c:	d301      	bcc.n	34e92 <__udivsi3+0x5e>
   34e8e:	034b      	lsls	r3, r1, #13
   34e90:	1ac0      	subs	r0, r0, r3
   34e92:	4152      	adcs	r2, r2
   34e94:	0b03      	lsrs	r3, r0, #12
   34e96:	428b      	cmp	r3, r1
   34e98:	d301      	bcc.n	34e9e <__udivsi3+0x6a>
   34e9a:	030b      	lsls	r3, r1, #12
   34e9c:	1ac0      	subs	r0, r0, r3
   34e9e:	4152      	adcs	r2, r2
   34ea0:	0ac3      	lsrs	r3, r0, #11
   34ea2:	428b      	cmp	r3, r1
   34ea4:	d301      	bcc.n	34eaa <__udivsi3+0x76>
   34ea6:	02cb      	lsls	r3, r1, #11
   34ea8:	1ac0      	subs	r0, r0, r3
   34eaa:	4152      	adcs	r2, r2
   34eac:	0a83      	lsrs	r3, r0, #10
   34eae:	428b      	cmp	r3, r1
   34eb0:	d301      	bcc.n	34eb6 <__udivsi3+0x82>
   34eb2:	028b      	lsls	r3, r1, #10
   34eb4:	1ac0      	subs	r0, r0, r3
   34eb6:	4152      	adcs	r2, r2
   34eb8:	0a43      	lsrs	r3, r0, #9
   34eba:	428b      	cmp	r3, r1
   34ebc:	d301      	bcc.n	34ec2 <__udivsi3+0x8e>
   34ebe:	024b      	lsls	r3, r1, #9
   34ec0:	1ac0      	subs	r0, r0, r3
   34ec2:	4152      	adcs	r2, r2
   34ec4:	0a03      	lsrs	r3, r0, #8
   34ec6:	428b      	cmp	r3, r1
   34ec8:	d301      	bcc.n	34ece <__udivsi3+0x9a>
   34eca:	020b      	lsls	r3, r1, #8
   34ecc:	1ac0      	subs	r0, r0, r3
   34ece:	4152      	adcs	r2, r2
   34ed0:	d2cd      	bcs.n	34e6e <__udivsi3+0x3a>
   34ed2:	09c3      	lsrs	r3, r0, #7
   34ed4:	428b      	cmp	r3, r1
   34ed6:	d301      	bcc.n	34edc <__udivsi3+0xa8>
   34ed8:	01cb      	lsls	r3, r1, #7
   34eda:	1ac0      	subs	r0, r0, r3
   34edc:	4152      	adcs	r2, r2
   34ede:	0983      	lsrs	r3, r0, #6
   34ee0:	428b      	cmp	r3, r1
   34ee2:	d301      	bcc.n	34ee8 <__udivsi3+0xb4>
   34ee4:	018b      	lsls	r3, r1, #6
   34ee6:	1ac0      	subs	r0, r0, r3
   34ee8:	4152      	adcs	r2, r2
   34eea:	0943      	lsrs	r3, r0, #5
   34eec:	428b      	cmp	r3, r1
   34eee:	d301      	bcc.n	34ef4 <__udivsi3+0xc0>
   34ef0:	014b      	lsls	r3, r1, #5
   34ef2:	1ac0      	subs	r0, r0, r3
   34ef4:	4152      	adcs	r2, r2
   34ef6:	0903      	lsrs	r3, r0, #4
   34ef8:	428b      	cmp	r3, r1
   34efa:	d301      	bcc.n	34f00 <__udivsi3+0xcc>
   34efc:	010b      	lsls	r3, r1, #4
   34efe:	1ac0      	subs	r0, r0, r3
   34f00:	4152      	adcs	r2, r2
   34f02:	08c3      	lsrs	r3, r0, #3
   34f04:	428b      	cmp	r3, r1
   34f06:	d301      	bcc.n	34f0c <__udivsi3+0xd8>
   34f08:	00cb      	lsls	r3, r1, #3
   34f0a:	1ac0      	subs	r0, r0, r3
   34f0c:	4152      	adcs	r2, r2
   34f0e:	0883      	lsrs	r3, r0, #2
   34f10:	428b      	cmp	r3, r1
   34f12:	d301      	bcc.n	34f18 <__udivsi3+0xe4>
   34f14:	008b      	lsls	r3, r1, #2
   34f16:	1ac0      	subs	r0, r0, r3
   34f18:	4152      	adcs	r2, r2
   34f1a:	0843      	lsrs	r3, r0, #1
   34f1c:	428b      	cmp	r3, r1
   34f1e:	d301      	bcc.n	34f24 <__udivsi3+0xf0>
   34f20:	004b      	lsls	r3, r1, #1
   34f22:	1ac0      	subs	r0, r0, r3
   34f24:	4152      	adcs	r2, r2
   34f26:	1a41      	subs	r1, r0, r1
   34f28:	d200      	bcs.n	34f2c <__udivsi3+0xf8>
   34f2a:	4601      	mov	r1, r0
   34f2c:	4152      	adcs	r2, r2
   34f2e:	4610      	mov	r0, r2
   34f30:	4770      	bx	lr
   34f32:	e7ff      	b.n	34f34 <__udivsi3+0x100>
   34f34:	b501      	push	{r0, lr}
   34f36:	2000      	movs	r0, #0
   34f38:	f000 f8f0 	bl	3511c <__aeabi_idiv0>
   34f3c:	bd02      	pop	{r1, pc}
   34f3e:	46c0      	nop			; (mov r8, r8)

00034f40 <__aeabi_uidivmod>:
   34f40:	2900      	cmp	r1, #0
   34f42:	d0f7      	beq.n	34f34 <__udivsi3+0x100>
   34f44:	e776      	b.n	34e34 <__udivsi3>
   34f46:	4770      	bx	lr

00034f48 <__divsi3>:
   34f48:	4603      	mov	r3, r0
   34f4a:	430b      	orrs	r3, r1
   34f4c:	d47f      	bmi.n	3504e <__divsi3+0x106>
   34f4e:	2200      	movs	r2, #0
   34f50:	0843      	lsrs	r3, r0, #1
   34f52:	428b      	cmp	r3, r1
   34f54:	d374      	bcc.n	35040 <__divsi3+0xf8>
   34f56:	0903      	lsrs	r3, r0, #4
   34f58:	428b      	cmp	r3, r1
   34f5a:	d35f      	bcc.n	3501c <__divsi3+0xd4>
   34f5c:	0a03      	lsrs	r3, r0, #8
   34f5e:	428b      	cmp	r3, r1
   34f60:	d344      	bcc.n	34fec <__divsi3+0xa4>
   34f62:	0b03      	lsrs	r3, r0, #12
   34f64:	428b      	cmp	r3, r1
   34f66:	d328      	bcc.n	34fba <__divsi3+0x72>
   34f68:	0c03      	lsrs	r3, r0, #16
   34f6a:	428b      	cmp	r3, r1
   34f6c:	d30d      	bcc.n	34f8a <__divsi3+0x42>
   34f6e:	22ff      	movs	r2, #255	; 0xff
   34f70:	0209      	lsls	r1, r1, #8
   34f72:	ba12      	rev	r2, r2
   34f74:	0c03      	lsrs	r3, r0, #16
   34f76:	428b      	cmp	r3, r1
   34f78:	d302      	bcc.n	34f80 <__divsi3+0x38>
   34f7a:	1212      	asrs	r2, r2, #8
   34f7c:	0209      	lsls	r1, r1, #8
   34f7e:	d065      	beq.n	3504c <__divsi3+0x104>
   34f80:	0b03      	lsrs	r3, r0, #12
   34f82:	428b      	cmp	r3, r1
   34f84:	d319      	bcc.n	34fba <__divsi3+0x72>
   34f86:	e000      	b.n	34f8a <__divsi3+0x42>
   34f88:	0a09      	lsrs	r1, r1, #8
   34f8a:	0bc3      	lsrs	r3, r0, #15
   34f8c:	428b      	cmp	r3, r1
   34f8e:	d301      	bcc.n	34f94 <__divsi3+0x4c>
   34f90:	03cb      	lsls	r3, r1, #15
   34f92:	1ac0      	subs	r0, r0, r3
   34f94:	4152      	adcs	r2, r2
   34f96:	0b83      	lsrs	r3, r0, #14
   34f98:	428b      	cmp	r3, r1
   34f9a:	d301      	bcc.n	34fa0 <__divsi3+0x58>
   34f9c:	038b      	lsls	r3, r1, #14
   34f9e:	1ac0      	subs	r0, r0, r3
   34fa0:	4152      	adcs	r2, r2
   34fa2:	0b43      	lsrs	r3, r0, #13
   34fa4:	428b      	cmp	r3, r1
   34fa6:	d301      	bcc.n	34fac <__divsi3+0x64>
   34fa8:	034b      	lsls	r3, r1, #13
   34faa:	1ac0      	subs	r0, r0, r3
   34fac:	4152      	adcs	r2, r2
   34fae:	0b03      	lsrs	r3, r0, #12
   34fb0:	428b      	cmp	r3, r1
   34fb2:	d301      	bcc.n	34fb8 <__divsi3+0x70>
   34fb4:	030b      	lsls	r3, r1, #12
   34fb6:	1ac0      	subs	r0, r0, r3
   34fb8:	4152      	adcs	r2, r2
   34fba:	0ac3      	lsrs	r3, r0, #11
   34fbc:	428b      	cmp	r3, r1
   34fbe:	d301      	bcc.n	34fc4 <__divsi3+0x7c>
   34fc0:	02cb      	lsls	r3, r1, #11
   34fc2:	1ac0      	subs	r0, r0, r3
   34fc4:	4152      	adcs	r2, r2
   34fc6:	0a83      	lsrs	r3, r0, #10
   34fc8:	428b      	cmp	r3, r1
   34fca:	d301      	bcc.n	34fd0 <__divsi3+0x88>
   34fcc:	028b      	lsls	r3, r1, #10
   34fce:	1ac0      	subs	r0, r0, r3
   34fd0:	4152      	adcs	r2, r2
   34fd2:	0a43      	lsrs	r3, r0, #9
   34fd4:	428b      	cmp	r3, r1
   34fd6:	d301      	bcc.n	34fdc <__divsi3+0x94>
   34fd8:	024b      	lsls	r3, r1, #9
   34fda:	1ac0      	subs	r0, r0, r3
   34fdc:	4152      	adcs	r2, r2
   34fde:	0a03      	lsrs	r3, r0, #8
   34fe0:	428b      	cmp	r3, r1
   34fe2:	d301      	bcc.n	34fe8 <__divsi3+0xa0>
   34fe4:	020b      	lsls	r3, r1, #8
   34fe6:	1ac0      	subs	r0, r0, r3
   34fe8:	4152      	adcs	r2, r2
   34fea:	d2cd      	bcs.n	34f88 <__divsi3+0x40>
   34fec:	09c3      	lsrs	r3, r0, #7
   34fee:	428b      	cmp	r3, r1
   34ff0:	d301      	bcc.n	34ff6 <__divsi3+0xae>
   34ff2:	01cb      	lsls	r3, r1, #7
   34ff4:	1ac0      	subs	r0, r0, r3
   34ff6:	4152      	adcs	r2, r2
   34ff8:	0983      	lsrs	r3, r0, #6
   34ffa:	428b      	cmp	r3, r1
   34ffc:	d301      	bcc.n	35002 <__divsi3+0xba>
   34ffe:	018b      	lsls	r3, r1, #6
   35000:	1ac0      	subs	r0, r0, r3
   35002:	4152      	adcs	r2, r2
   35004:	0943      	lsrs	r3, r0, #5
   35006:	428b      	cmp	r3, r1
   35008:	d301      	bcc.n	3500e <__divsi3+0xc6>
   3500a:	014b      	lsls	r3, r1, #5
   3500c:	1ac0      	subs	r0, r0, r3
   3500e:	4152      	adcs	r2, r2
   35010:	0903      	lsrs	r3, r0, #4
   35012:	428b      	cmp	r3, r1
   35014:	d301      	bcc.n	3501a <__divsi3+0xd2>
   35016:	010b      	lsls	r3, r1, #4
   35018:	1ac0      	subs	r0, r0, r3
   3501a:	4152      	adcs	r2, r2
   3501c:	08c3      	lsrs	r3, r0, #3
   3501e:	428b      	cmp	r3, r1
   35020:	d301      	bcc.n	35026 <__divsi3+0xde>
   35022:	00cb      	lsls	r3, r1, #3
   35024:	1ac0      	subs	r0, r0, r3
   35026:	4152      	adcs	r2, r2
   35028:	0883      	lsrs	r3, r0, #2
   3502a:	428b      	cmp	r3, r1
   3502c:	d301      	bcc.n	35032 <__divsi3+0xea>
   3502e:	008b      	lsls	r3, r1, #2
   35030:	1ac0      	subs	r0, r0, r3
   35032:	4152      	adcs	r2, r2
   35034:	0843      	lsrs	r3, r0, #1
   35036:	428b      	cmp	r3, r1
   35038:	d301      	bcc.n	3503e <__divsi3+0xf6>
   3503a:	004b      	lsls	r3, r1, #1
   3503c:	1ac0      	subs	r0, r0, r3
   3503e:	4152      	adcs	r2, r2
   35040:	1a41      	subs	r1, r0, r1
   35042:	d200      	bcs.n	35046 <__divsi3+0xfe>
   35044:	4601      	mov	r1, r0
   35046:	4152      	adcs	r2, r2
   35048:	4610      	mov	r0, r2
   3504a:	4770      	bx	lr
   3504c:	e05d      	b.n	3510a <__divsi3+0x1c2>
   3504e:	0fca      	lsrs	r2, r1, #31
   35050:	d000      	beq.n	35054 <__divsi3+0x10c>
   35052:	4249      	negs	r1, r1
   35054:	1003      	asrs	r3, r0, #32
   35056:	d300      	bcc.n	3505a <__divsi3+0x112>
   35058:	4240      	negs	r0, r0
   3505a:	4053      	eors	r3, r2
   3505c:	2200      	movs	r2, #0
   3505e:	469c      	mov	ip, r3
   35060:	0903      	lsrs	r3, r0, #4
   35062:	428b      	cmp	r3, r1
   35064:	d32d      	bcc.n	350c2 <__divsi3+0x17a>
   35066:	0a03      	lsrs	r3, r0, #8
   35068:	428b      	cmp	r3, r1
   3506a:	d312      	bcc.n	35092 <__divsi3+0x14a>
   3506c:	22fc      	movs	r2, #252	; 0xfc
   3506e:	0189      	lsls	r1, r1, #6
   35070:	ba12      	rev	r2, r2
   35072:	0a03      	lsrs	r3, r0, #8
   35074:	428b      	cmp	r3, r1
   35076:	d30c      	bcc.n	35092 <__divsi3+0x14a>
   35078:	0189      	lsls	r1, r1, #6
   3507a:	1192      	asrs	r2, r2, #6
   3507c:	428b      	cmp	r3, r1
   3507e:	d308      	bcc.n	35092 <__divsi3+0x14a>
   35080:	0189      	lsls	r1, r1, #6
   35082:	1192      	asrs	r2, r2, #6
   35084:	428b      	cmp	r3, r1
   35086:	d304      	bcc.n	35092 <__divsi3+0x14a>
   35088:	0189      	lsls	r1, r1, #6
   3508a:	d03a      	beq.n	35102 <__divsi3+0x1ba>
   3508c:	1192      	asrs	r2, r2, #6
   3508e:	e000      	b.n	35092 <__divsi3+0x14a>
   35090:	0989      	lsrs	r1, r1, #6
   35092:	09c3      	lsrs	r3, r0, #7
   35094:	428b      	cmp	r3, r1
   35096:	d301      	bcc.n	3509c <__divsi3+0x154>
   35098:	01cb      	lsls	r3, r1, #7
   3509a:	1ac0      	subs	r0, r0, r3
   3509c:	4152      	adcs	r2, r2
   3509e:	0983      	lsrs	r3, r0, #6
   350a0:	428b      	cmp	r3, r1
   350a2:	d301      	bcc.n	350a8 <__divsi3+0x160>
   350a4:	018b      	lsls	r3, r1, #6
   350a6:	1ac0      	subs	r0, r0, r3
   350a8:	4152      	adcs	r2, r2
   350aa:	0943      	lsrs	r3, r0, #5
   350ac:	428b      	cmp	r3, r1
   350ae:	d301      	bcc.n	350b4 <__divsi3+0x16c>
   350b0:	014b      	lsls	r3, r1, #5
   350b2:	1ac0      	subs	r0, r0, r3
   350b4:	4152      	adcs	r2, r2
   350b6:	0903      	lsrs	r3, r0, #4
   350b8:	428b      	cmp	r3, r1
   350ba:	d301      	bcc.n	350c0 <__divsi3+0x178>
   350bc:	010b      	lsls	r3, r1, #4
   350be:	1ac0      	subs	r0, r0, r3
   350c0:	4152      	adcs	r2, r2
   350c2:	08c3      	lsrs	r3, r0, #3
   350c4:	428b      	cmp	r3, r1
   350c6:	d301      	bcc.n	350cc <__divsi3+0x184>
   350c8:	00cb      	lsls	r3, r1, #3
   350ca:	1ac0      	subs	r0, r0, r3
   350cc:	4152      	adcs	r2, r2
   350ce:	0883      	lsrs	r3, r0, #2
   350d0:	428b      	cmp	r3, r1
   350d2:	d301      	bcc.n	350d8 <__divsi3+0x190>
   350d4:	008b      	lsls	r3, r1, #2
   350d6:	1ac0      	subs	r0, r0, r3
   350d8:	4152      	adcs	r2, r2
   350da:	d2d9      	bcs.n	35090 <__divsi3+0x148>
   350dc:	0843      	lsrs	r3, r0, #1
   350de:	428b      	cmp	r3, r1
   350e0:	d301      	bcc.n	350e6 <__divsi3+0x19e>
   350e2:	004b      	lsls	r3, r1, #1
   350e4:	1ac0      	subs	r0, r0, r3
   350e6:	4152      	adcs	r2, r2
   350e8:	1a41      	subs	r1, r0, r1
   350ea:	d200      	bcs.n	350ee <__divsi3+0x1a6>
   350ec:	4601      	mov	r1, r0
   350ee:	4663      	mov	r3, ip
   350f0:	4152      	adcs	r2, r2
   350f2:	105b      	asrs	r3, r3, #1
   350f4:	4610      	mov	r0, r2
   350f6:	d301      	bcc.n	350fc <__divsi3+0x1b4>
   350f8:	4240      	negs	r0, r0
   350fa:	2b00      	cmp	r3, #0
   350fc:	d500      	bpl.n	35100 <__divsi3+0x1b8>
   350fe:	4249      	negs	r1, r1
   35100:	4770      	bx	lr
   35102:	4663      	mov	r3, ip
   35104:	105b      	asrs	r3, r3, #1
   35106:	d300      	bcc.n	3510a <__divsi3+0x1c2>
   35108:	4240      	negs	r0, r0
   3510a:	b501      	push	{r0, lr}
   3510c:	2000      	movs	r0, #0
   3510e:	f000 f805 	bl	3511c <__aeabi_idiv0>
   35112:	bd02      	pop	{r1, pc}

00035114 <__aeabi_idivmod>:
   35114:	2900      	cmp	r1, #0
   35116:	d0f8      	beq.n	3510a <__divsi3+0x1c2>
   35118:	e716      	b.n	34f48 <__divsi3>
   3511a:	4770      	bx	lr

0003511c <__aeabi_idiv0>:
   3511c:	4770      	bx	lr
   3511e:	46c0      	nop			; (mov r8, r8)

00035120 <__aeabi_cdrcmple>:
   35120:	4684      	mov	ip, r0
   35122:	1c10      	adds	r0, r2, #0
   35124:	4662      	mov	r2, ip
   35126:	468c      	mov	ip, r1
   35128:	1c19      	adds	r1, r3, #0
   3512a:	4663      	mov	r3, ip
   3512c:	e000      	b.n	35130 <__aeabi_cdcmpeq>
   3512e:	46c0      	nop			; (mov r8, r8)

00035130 <__aeabi_cdcmpeq>:
   35130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   35132:	f001 fc57 	bl	369e4 <__ledf2>
   35136:	2800      	cmp	r0, #0
   35138:	d401      	bmi.n	3513e <__aeabi_cdcmpeq+0xe>
   3513a:	2100      	movs	r1, #0
   3513c:	42c8      	cmn	r0, r1
   3513e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00035140 <__aeabi_dcmpeq>:
   35140:	b510      	push	{r4, lr}
   35142:	f001 fbb1 	bl	368a8 <__eqdf2>
   35146:	4240      	negs	r0, r0
   35148:	3001      	adds	r0, #1
   3514a:	bd10      	pop	{r4, pc}

0003514c <__aeabi_dcmplt>:
   3514c:	b510      	push	{r4, lr}
   3514e:	f001 fc49 	bl	369e4 <__ledf2>
   35152:	2800      	cmp	r0, #0
   35154:	db01      	blt.n	3515a <__aeabi_dcmplt+0xe>
   35156:	2000      	movs	r0, #0
   35158:	bd10      	pop	{r4, pc}
   3515a:	2001      	movs	r0, #1
   3515c:	bd10      	pop	{r4, pc}
   3515e:	46c0      	nop			; (mov r8, r8)

00035160 <__aeabi_dcmple>:
   35160:	b510      	push	{r4, lr}
   35162:	f001 fc3f 	bl	369e4 <__ledf2>
   35166:	2800      	cmp	r0, #0
   35168:	dd01      	ble.n	3516e <__aeabi_dcmple+0xe>
   3516a:	2000      	movs	r0, #0
   3516c:	bd10      	pop	{r4, pc}
   3516e:	2001      	movs	r0, #1
   35170:	bd10      	pop	{r4, pc}
   35172:	46c0      	nop			; (mov r8, r8)

00035174 <__aeabi_dcmpgt>:
   35174:	b510      	push	{r4, lr}
   35176:	f001 fbd1 	bl	3691c <__gedf2>
   3517a:	2800      	cmp	r0, #0
   3517c:	dc01      	bgt.n	35182 <__aeabi_dcmpgt+0xe>
   3517e:	2000      	movs	r0, #0
   35180:	bd10      	pop	{r4, pc}
   35182:	2001      	movs	r0, #1
   35184:	bd10      	pop	{r4, pc}
   35186:	46c0      	nop			; (mov r8, r8)

00035188 <__aeabi_dcmpge>:
   35188:	b510      	push	{r4, lr}
   3518a:	f001 fbc7 	bl	3691c <__gedf2>
   3518e:	2800      	cmp	r0, #0
   35190:	da01      	bge.n	35196 <__aeabi_dcmpge+0xe>
   35192:	2000      	movs	r0, #0
   35194:	bd10      	pop	{r4, pc}
   35196:	2001      	movs	r0, #1
   35198:	bd10      	pop	{r4, pc}
   3519a:	46c0      	nop			; (mov r8, r8)

0003519c <__aeabi_ldivmod>:
   3519c:	2b00      	cmp	r3, #0
   3519e:	d115      	bne.n	351cc <__aeabi_ldivmod+0x30>
   351a0:	2a00      	cmp	r2, #0
   351a2:	d113      	bne.n	351cc <__aeabi_ldivmod+0x30>
   351a4:	2900      	cmp	r1, #0
   351a6:	db06      	blt.n	351b6 <__aeabi_ldivmod+0x1a>
   351a8:	dc01      	bgt.n	351ae <__aeabi_ldivmod+0x12>
   351aa:	2800      	cmp	r0, #0
   351ac:	d006      	beq.n	351bc <__aeabi_ldivmod+0x20>
   351ae:	2000      	movs	r0, #0
   351b0:	43c0      	mvns	r0, r0
   351b2:	0841      	lsrs	r1, r0, #1
   351b4:	e002      	b.n	351bc <__aeabi_ldivmod+0x20>
   351b6:	2180      	movs	r1, #128	; 0x80
   351b8:	0609      	lsls	r1, r1, #24
   351ba:	2000      	movs	r0, #0
   351bc:	b407      	push	{r0, r1, r2}
   351be:	4802      	ldr	r0, [pc, #8]	; (351c8 <__aeabi_ldivmod+0x2c>)
   351c0:	a101      	add	r1, pc, #4	; (adr r1, 351c8 <__aeabi_ldivmod+0x2c>)
   351c2:	1840      	adds	r0, r0, r1
   351c4:	9002      	str	r0, [sp, #8]
   351c6:	bd03      	pop	{r0, r1, pc}
   351c8:	ffffff55 	.word	0xffffff55
   351cc:	b403      	push	{r0, r1}
   351ce:	4668      	mov	r0, sp
   351d0:	b501      	push	{r0, lr}
   351d2:	9802      	ldr	r0, [sp, #8]
   351d4:	f000 f84e 	bl	35274 <__gnu_ldivmod_helper>
   351d8:	9b01      	ldr	r3, [sp, #4]
   351da:	469e      	mov	lr, r3
   351dc:	b002      	add	sp, #8
   351de:	bc0c      	pop	{r2, r3}
   351e0:	4770      	bx	lr
   351e2:	46c0      	nop			; (mov r8, r8)

000351e4 <__aeabi_lmul>:
   351e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   351e6:	46ce      	mov	lr, r9
   351e8:	4647      	mov	r7, r8
   351ea:	0415      	lsls	r5, r2, #16
   351ec:	0c2d      	lsrs	r5, r5, #16
   351ee:	002e      	movs	r6, r5
   351f0:	b580      	push	{r7, lr}
   351f2:	0407      	lsls	r7, r0, #16
   351f4:	0c14      	lsrs	r4, r2, #16
   351f6:	0c3f      	lsrs	r7, r7, #16
   351f8:	4699      	mov	r9, r3
   351fa:	0c03      	lsrs	r3, r0, #16
   351fc:	437e      	muls	r6, r7
   351fe:	435d      	muls	r5, r3
   35200:	4367      	muls	r7, r4
   35202:	4363      	muls	r3, r4
   35204:	197f      	adds	r7, r7, r5
   35206:	0c34      	lsrs	r4, r6, #16
   35208:	19e4      	adds	r4, r4, r7
   3520a:	469c      	mov	ip, r3
   3520c:	42a5      	cmp	r5, r4
   3520e:	d903      	bls.n	35218 <__aeabi_lmul+0x34>
   35210:	2380      	movs	r3, #128	; 0x80
   35212:	025b      	lsls	r3, r3, #9
   35214:	4698      	mov	r8, r3
   35216:	44c4      	add	ip, r8
   35218:	464b      	mov	r3, r9
   3521a:	4351      	muls	r1, r2
   3521c:	4343      	muls	r3, r0
   3521e:	0436      	lsls	r6, r6, #16
   35220:	0c36      	lsrs	r6, r6, #16
   35222:	0c25      	lsrs	r5, r4, #16
   35224:	0424      	lsls	r4, r4, #16
   35226:	4465      	add	r5, ip
   35228:	19a4      	adds	r4, r4, r6
   3522a:	1859      	adds	r1, r3, r1
   3522c:	1949      	adds	r1, r1, r5
   3522e:	0020      	movs	r0, r4
   35230:	bc0c      	pop	{r2, r3}
   35232:	4690      	mov	r8, r2
   35234:	4699      	mov	r9, r3
   35236:	bdf0      	pop	{r4, r5, r6, r7, pc}

00035238 <__aeabi_d2uiz>:
   35238:	b570      	push	{r4, r5, r6, lr}
   3523a:	2200      	movs	r2, #0
   3523c:	4b0c      	ldr	r3, [pc, #48]	; (35270 <__aeabi_d2uiz+0x38>)
   3523e:	0004      	movs	r4, r0
   35240:	000d      	movs	r5, r1
   35242:	f7ff ffa1 	bl	35188 <__aeabi_dcmpge>
   35246:	2800      	cmp	r0, #0
   35248:	d104      	bne.n	35254 <__aeabi_d2uiz+0x1c>
   3524a:	0020      	movs	r0, r4
   3524c:	0029      	movs	r1, r5
   3524e:	f002 f9c1 	bl	375d4 <__aeabi_d2iz>
   35252:	bd70      	pop	{r4, r5, r6, pc}
   35254:	4b06      	ldr	r3, [pc, #24]	; (35270 <__aeabi_d2uiz+0x38>)
   35256:	2200      	movs	r2, #0
   35258:	0020      	movs	r0, r4
   3525a:	0029      	movs	r1, r5
   3525c:	f001 fea4 	bl	36fa8 <__aeabi_dsub>
   35260:	f002 f9b8 	bl	375d4 <__aeabi_d2iz>
   35264:	2380      	movs	r3, #128	; 0x80
   35266:	061b      	lsls	r3, r3, #24
   35268:	469c      	mov	ip, r3
   3526a:	4460      	add	r0, ip
   3526c:	e7f1      	b.n	35252 <__aeabi_d2uiz+0x1a>
   3526e:	46c0      	nop			; (mov r8, r8)
   35270:	41e00000 	.word	0x41e00000

00035274 <__gnu_ldivmod_helper>:
   35274:	b5f0      	push	{r4, r5, r6, r7, lr}
   35276:	b083      	sub	sp, #12
   35278:	0016      	movs	r6, r2
   3527a:	001f      	movs	r7, r3
   3527c:	9000      	str	r0, [sp, #0]
   3527e:	9101      	str	r1, [sp, #4]
   35280:	f002 fa32 	bl	376e8 <__divdi3>
   35284:	0004      	movs	r4, r0
   35286:	000d      	movs	r5, r1
   35288:	0002      	movs	r2, r0
   3528a:	000b      	movs	r3, r1
   3528c:	0030      	movs	r0, r6
   3528e:	0039      	movs	r1, r7
   35290:	f7ff ffa8 	bl	351e4 <__aeabi_lmul>
   35294:	9a00      	ldr	r2, [sp, #0]
   35296:	9b01      	ldr	r3, [sp, #4]
   35298:	1a12      	subs	r2, r2, r0
   3529a:	418b      	sbcs	r3, r1
   3529c:	9908      	ldr	r1, [sp, #32]
   3529e:	0020      	movs	r0, r4
   352a0:	600a      	str	r2, [r1, #0]
   352a2:	604b      	str	r3, [r1, #4]
   352a4:	0029      	movs	r1, r5
   352a6:	b003      	add	sp, #12
   352a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   352aa:	46c0      	nop			; (mov r8, r8)

000352ac <__aeabi_fdiv>:
   352ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   352ae:	4657      	mov	r7, sl
   352b0:	464e      	mov	r6, r9
   352b2:	46de      	mov	lr, fp
   352b4:	4645      	mov	r5, r8
   352b6:	b5e0      	push	{r5, r6, r7, lr}
   352b8:	0244      	lsls	r4, r0, #9
   352ba:	0043      	lsls	r3, r0, #1
   352bc:	0fc6      	lsrs	r6, r0, #31
   352be:	b083      	sub	sp, #12
   352c0:	1c0f      	adds	r7, r1, #0
   352c2:	0a64      	lsrs	r4, r4, #9
   352c4:	0e1b      	lsrs	r3, r3, #24
   352c6:	46b2      	mov	sl, r6
   352c8:	d053      	beq.n	35372 <__aeabi_fdiv+0xc6>
   352ca:	2bff      	cmp	r3, #255	; 0xff
   352cc:	d027      	beq.n	3531e <__aeabi_fdiv+0x72>
   352ce:	2280      	movs	r2, #128	; 0x80
   352d0:	00e4      	lsls	r4, r4, #3
   352d2:	04d2      	lsls	r2, r2, #19
   352d4:	4314      	orrs	r4, r2
   352d6:	227f      	movs	r2, #127	; 0x7f
   352d8:	4252      	negs	r2, r2
   352da:	4690      	mov	r8, r2
   352dc:	4498      	add	r8, r3
   352de:	2300      	movs	r3, #0
   352e0:	4699      	mov	r9, r3
   352e2:	469b      	mov	fp, r3
   352e4:	027d      	lsls	r5, r7, #9
   352e6:	0078      	lsls	r0, r7, #1
   352e8:	0ffb      	lsrs	r3, r7, #31
   352ea:	0a6d      	lsrs	r5, r5, #9
   352ec:	0e00      	lsrs	r0, r0, #24
   352ee:	9300      	str	r3, [sp, #0]
   352f0:	d024      	beq.n	3533c <__aeabi_fdiv+0x90>
   352f2:	28ff      	cmp	r0, #255	; 0xff
   352f4:	d046      	beq.n	35384 <__aeabi_fdiv+0xd8>
   352f6:	2380      	movs	r3, #128	; 0x80
   352f8:	2100      	movs	r1, #0
   352fa:	00ed      	lsls	r5, r5, #3
   352fc:	04db      	lsls	r3, r3, #19
   352fe:	431d      	orrs	r5, r3
   35300:	387f      	subs	r0, #127	; 0x7f
   35302:	4647      	mov	r7, r8
   35304:	1a38      	subs	r0, r7, r0
   35306:	464f      	mov	r7, r9
   35308:	430f      	orrs	r7, r1
   3530a:	00bf      	lsls	r7, r7, #2
   3530c:	46b9      	mov	r9, r7
   3530e:	0033      	movs	r3, r6
   35310:	9a00      	ldr	r2, [sp, #0]
   35312:	4f87      	ldr	r7, [pc, #540]	; (35530 <__aeabi_fdiv+0x284>)
   35314:	4053      	eors	r3, r2
   35316:	464a      	mov	r2, r9
   35318:	58ba      	ldr	r2, [r7, r2]
   3531a:	9301      	str	r3, [sp, #4]
   3531c:	4697      	mov	pc, r2
   3531e:	2c00      	cmp	r4, #0
   35320:	d14e      	bne.n	353c0 <__aeabi_fdiv+0x114>
   35322:	2308      	movs	r3, #8
   35324:	4699      	mov	r9, r3
   35326:	33f7      	adds	r3, #247	; 0xf7
   35328:	4698      	mov	r8, r3
   3532a:	3bfd      	subs	r3, #253	; 0xfd
   3532c:	469b      	mov	fp, r3
   3532e:	027d      	lsls	r5, r7, #9
   35330:	0078      	lsls	r0, r7, #1
   35332:	0ffb      	lsrs	r3, r7, #31
   35334:	0a6d      	lsrs	r5, r5, #9
   35336:	0e00      	lsrs	r0, r0, #24
   35338:	9300      	str	r3, [sp, #0]
   3533a:	d1da      	bne.n	352f2 <__aeabi_fdiv+0x46>
   3533c:	2d00      	cmp	r5, #0
   3533e:	d126      	bne.n	3538e <__aeabi_fdiv+0xe2>
   35340:	2000      	movs	r0, #0
   35342:	2101      	movs	r1, #1
   35344:	0033      	movs	r3, r6
   35346:	9a00      	ldr	r2, [sp, #0]
   35348:	4f7a      	ldr	r7, [pc, #488]	; (35534 <__aeabi_fdiv+0x288>)
   3534a:	4053      	eors	r3, r2
   3534c:	4642      	mov	r2, r8
   3534e:	1a10      	subs	r0, r2, r0
   35350:	464a      	mov	r2, r9
   35352:	430a      	orrs	r2, r1
   35354:	0092      	lsls	r2, r2, #2
   35356:	58ba      	ldr	r2, [r7, r2]
   35358:	001d      	movs	r5, r3
   3535a:	4697      	mov	pc, r2
   3535c:	9b00      	ldr	r3, [sp, #0]
   3535e:	002c      	movs	r4, r5
   35360:	469a      	mov	sl, r3
   35362:	468b      	mov	fp, r1
   35364:	465b      	mov	r3, fp
   35366:	2b02      	cmp	r3, #2
   35368:	d131      	bne.n	353ce <__aeabi_fdiv+0x122>
   3536a:	4653      	mov	r3, sl
   3536c:	21ff      	movs	r1, #255	; 0xff
   3536e:	2400      	movs	r4, #0
   35370:	e038      	b.n	353e4 <__aeabi_fdiv+0x138>
   35372:	2c00      	cmp	r4, #0
   35374:	d117      	bne.n	353a6 <__aeabi_fdiv+0xfa>
   35376:	2304      	movs	r3, #4
   35378:	4699      	mov	r9, r3
   3537a:	2300      	movs	r3, #0
   3537c:	4698      	mov	r8, r3
   3537e:	3301      	adds	r3, #1
   35380:	469b      	mov	fp, r3
   35382:	e7af      	b.n	352e4 <__aeabi_fdiv+0x38>
   35384:	20ff      	movs	r0, #255	; 0xff
   35386:	2d00      	cmp	r5, #0
   35388:	d10b      	bne.n	353a2 <__aeabi_fdiv+0xf6>
   3538a:	2102      	movs	r1, #2
   3538c:	e7da      	b.n	35344 <__aeabi_fdiv+0x98>
   3538e:	0028      	movs	r0, r5
   35390:	f002 f98c 	bl	376ac <__clzsi2>
   35394:	1f43      	subs	r3, r0, #5
   35396:	409d      	lsls	r5, r3
   35398:	2376      	movs	r3, #118	; 0x76
   3539a:	425b      	negs	r3, r3
   3539c:	1a18      	subs	r0, r3, r0
   3539e:	2100      	movs	r1, #0
   353a0:	e7af      	b.n	35302 <__aeabi_fdiv+0x56>
   353a2:	2103      	movs	r1, #3
   353a4:	e7ad      	b.n	35302 <__aeabi_fdiv+0x56>
   353a6:	0020      	movs	r0, r4
   353a8:	f002 f980 	bl	376ac <__clzsi2>
   353ac:	1f43      	subs	r3, r0, #5
   353ae:	409c      	lsls	r4, r3
   353b0:	2376      	movs	r3, #118	; 0x76
   353b2:	425b      	negs	r3, r3
   353b4:	1a1b      	subs	r3, r3, r0
   353b6:	4698      	mov	r8, r3
   353b8:	2300      	movs	r3, #0
   353ba:	4699      	mov	r9, r3
   353bc:	469b      	mov	fp, r3
   353be:	e791      	b.n	352e4 <__aeabi_fdiv+0x38>
   353c0:	230c      	movs	r3, #12
   353c2:	4699      	mov	r9, r3
   353c4:	33f3      	adds	r3, #243	; 0xf3
   353c6:	4698      	mov	r8, r3
   353c8:	3bfc      	subs	r3, #252	; 0xfc
   353ca:	469b      	mov	fp, r3
   353cc:	e78a      	b.n	352e4 <__aeabi_fdiv+0x38>
   353ce:	2b03      	cmp	r3, #3
   353d0:	d100      	bne.n	353d4 <__aeabi_fdiv+0x128>
   353d2:	e0a5      	b.n	35520 <__aeabi_fdiv+0x274>
   353d4:	4655      	mov	r5, sl
   353d6:	2b01      	cmp	r3, #1
   353d8:	d000      	beq.n	353dc <__aeabi_fdiv+0x130>
   353da:	e081      	b.n	354e0 <__aeabi_fdiv+0x234>
   353dc:	2301      	movs	r3, #1
   353de:	2100      	movs	r1, #0
   353e0:	2400      	movs	r4, #0
   353e2:	402b      	ands	r3, r5
   353e4:	0264      	lsls	r4, r4, #9
   353e6:	05c9      	lsls	r1, r1, #23
   353e8:	0a60      	lsrs	r0, r4, #9
   353ea:	07db      	lsls	r3, r3, #31
   353ec:	4308      	orrs	r0, r1
   353ee:	4318      	orrs	r0, r3
   353f0:	b003      	add	sp, #12
   353f2:	bc3c      	pop	{r2, r3, r4, r5}
   353f4:	4690      	mov	r8, r2
   353f6:	4699      	mov	r9, r3
   353f8:	46a2      	mov	sl, r4
   353fa:	46ab      	mov	fp, r5
   353fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   353fe:	2480      	movs	r4, #128	; 0x80
   35400:	2300      	movs	r3, #0
   35402:	03e4      	lsls	r4, r4, #15
   35404:	21ff      	movs	r1, #255	; 0xff
   35406:	e7ed      	b.n	353e4 <__aeabi_fdiv+0x138>
   35408:	21ff      	movs	r1, #255	; 0xff
   3540a:	2400      	movs	r4, #0
   3540c:	e7ea      	b.n	353e4 <__aeabi_fdiv+0x138>
   3540e:	2301      	movs	r3, #1
   35410:	1a59      	subs	r1, r3, r1
   35412:	291b      	cmp	r1, #27
   35414:	dd66      	ble.n	354e4 <__aeabi_fdiv+0x238>
   35416:	9a01      	ldr	r2, [sp, #4]
   35418:	4013      	ands	r3, r2
   3541a:	2100      	movs	r1, #0
   3541c:	2400      	movs	r4, #0
   3541e:	e7e1      	b.n	353e4 <__aeabi_fdiv+0x138>
   35420:	2380      	movs	r3, #128	; 0x80
   35422:	03db      	lsls	r3, r3, #15
   35424:	421c      	tst	r4, r3
   35426:	d038      	beq.n	3549a <__aeabi_fdiv+0x1ee>
   35428:	421d      	tst	r5, r3
   3542a:	d051      	beq.n	354d0 <__aeabi_fdiv+0x224>
   3542c:	431c      	orrs	r4, r3
   3542e:	0264      	lsls	r4, r4, #9
   35430:	0a64      	lsrs	r4, r4, #9
   35432:	0033      	movs	r3, r6
   35434:	21ff      	movs	r1, #255	; 0xff
   35436:	e7d5      	b.n	353e4 <__aeabi_fdiv+0x138>
   35438:	0163      	lsls	r3, r4, #5
   3543a:	016c      	lsls	r4, r5, #5
   3543c:	42a3      	cmp	r3, r4
   3543e:	d23b      	bcs.n	354b8 <__aeabi_fdiv+0x20c>
   35440:	261b      	movs	r6, #27
   35442:	2100      	movs	r1, #0
   35444:	3801      	subs	r0, #1
   35446:	2501      	movs	r5, #1
   35448:	001f      	movs	r7, r3
   3544a:	0049      	lsls	r1, r1, #1
   3544c:	005b      	lsls	r3, r3, #1
   3544e:	2f00      	cmp	r7, #0
   35450:	db01      	blt.n	35456 <__aeabi_fdiv+0x1aa>
   35452:	429c      	cmp	r4, r3
   35454:	d801      	bhi.n	3545a <__aeabi_fdiv+0x1ae>
   35456:	1b1b      	subs	r3, r3, r4
   35458:	4329      	orrs	r1, r5
   3545a:	3e01      	subs	r6, #1
   3545c:	2e00      	cmp	r6, #0
   3545e:	d1f3      	bne.n	35448 <__aeabi_fdiv+0x19c>
   35460:	001c      	movs	r4, r3
   35462:	1e63      	subs	r3, r4, #1
   35464:	419c      	sbcs	r4, r3
   35466:	430c      	orrs	r4, r1
   35468:	0001      	movs	r1, r0
   3546a:	317f      	adds	r1, #127	; 0x7f
   3546c:	2900      	cmp	r1, #0
   3546e:	ddce      	ble.n	3540e <__aeabi_fdiv+0x162>
   35470:	0763      	lsls	r3, r4, #29
   35472:	d004      	beq.n	3547e <__aeabi_fdiv+0x1d2>
   35474:	230f      	movs	r3, #15
   35476:	4023      	ands	r3, r4
   35478:	2b04      	cmp	r3, #4
   3547a:	d000      	beq.n	3547e <__aeabi_fdiv+0x1d2>
   3547c:	3404      	adds	r4, #4
   3547e:	0123      	lsls	r3, r4, #4
   35480:	d503      	bpl.n	3548a <__aeabi_fdiv+0x1de>
   35482:	0001      	movs	r1, r0
   35484:	4b2c      	ldr	r3, [pc, #176]	; (35538 <__aeabi_fdiv+0x28c>)
   35486:	3180      	adds	r1, #128	; 0x80
   35488:	401c      	ands	r4, r3
   3548a:	29fe      	cmp	r1, #254	; 0xfe
   3548c:	dd0d      	ble.n	354aa <__aeabi_fdiv+0x1fe>
   3548e:	2301      	movs	r3, #1
   35490:	9a01      	ldr	r2, [sp, #4]
   35492:	21ff      	movs	r1, #255	; 0xff
   35494:	4013      	ands	r3, r2
   35496:	2400      	movs	r4, #0
   35498:	e7a4      	b.n	353e4 <__aeabi_fdiv+0x138>
   3549a:	2380      	movs	r3, #128	; 0x80
   3549c:	03db      	lsls	r3, r3, #15
   3549e:	431c      	orrs	r4, r3
   354a0:	0264      	lsls	r4, r4, #9
   354a2:	0a64      	lsrs	r4, r4, #9
   354a4:	0033      	movs	r3, r6
   354a6:	21ff      	movs	r1, #255	; 0xff
   354a8:	e79c      	b.n	353e4 <__aeabi_fdiv+0x138>
   354aa:	2301      	movs	r3, #1
   354ac:	9a01      	ldr	r2, [sp, #4]
   354ae:	01a4      	lsls	r4, r4, #6
   354b0:	0a64      	lsrs	r4, r4, #9
   354b2:	b2c9      	uxtb	r1, r1
   354b4:	4013      	ands	r3, r2
   354b6:	e795      	b.n	353e4 <__aeabi_fdiv+0x138>
   354b8:	1b1b      	subs	r3, r3, r4
   354ba:	261a      	movs	r6, #26
   354bc:	2101      	movs	r1, #1
   354be:	e7c2      	b.n	35446 <__aeabi_fdiv+0x19a>
   354c0:	9b00      	ldr	r3, [sp, #0]
   354c2:	468b      	mov	fp, r1
   354c4:	469a      	mov	sl, r3
   354c6:	2400      	movs	r4, #0
   354c8:	e74c      	b.n	35364 <__aeabi_fdiv+0xb8>
   354ca:	0263      	lsls	r3, r4, #9
   354cc:	d5e5      	bpl.n	3549a <__aeabi_fdiv+0x1ee>
   354ce:	2500      	movs	r5, #0
   354d0:	2480      	movs	r4, #128	; 0x80
   354d2:	03e4      	lsls	r4, r4, #15
   354d4:	432c      	orrs	r4, r5
   354d6:	0264      	lsls	r4, r4, #9
   354d8:	0a64      	lsrs	r4, r4, #9
   354da:	9b00      	ldr	r3, [sp, #0]
   354dc:	21ff      	movs	r1, #255	; 0xff
   354de:	e781      	b.n	353e4 <__aeabi_fdiv+0x138>
   354e0:	9501      	str	r5, [sp, #4]
   354e2:	e7c1      	b.n	35468 <__aeabi_fdiv+0x1bc>
   354e4:	0023      	movs	r3, r4
   354e6:	2020      	movs	r0, #32
   354e8:	40cb      	lsrs	r3, r1
   354ea:	1a41      	subs	r1, r0, r1
   354ec:	408c      	lsls	r4, r1
   354ee:	1e61      	subs	r1, r4, #1
   354f0:	418c      	sbcs	r4, r1
   354f2:	431c      	orrs	r4, r3
   354f4:	0763      	lsls	r3, r4, #29
   354f6:	d004      	beq.n	35502 <__aeabi_fdiv+0x256>
   354f8:	230f      	movs	r3, #15
   354fa:	4023      	ands	r3, r4
   354fc:	2b04      	cmp	r3, #4
   354fe:	d000      	beq.n	35502 <__aeabi_fdiv+0x256>
   35500:	3404      	adds	r4, #4
   35502:	0163      	lsls	r3, r4, #5
   35504:	d505      	bpl.n	35512 <__aeabi_fdiv+0x266>
   35506:	2301      	movs	r3, #1
   35508:	9a01      	ldr	r2, [sp, #4]
   3550a:	2101      	movs	r1, #1
   3550c:	4013      	ands	r3, r2
   3550e:	2400      	movs	r4, #0
   35510:	e768      	b.n	353e4 <__aeabi_fdiv+0x138>
   35512:	2301      	movs	r3, #1
   35514:	9a01      	ldr	r2, [sp, #4]
   35516:	01a4      	lsls	r4, r4, #6
   35518:	0a64      	lsrs	r4, r4, #9
   3551a:	4013      	ands	r3, r2
   3551c:	2100      	movs	r1, #0
   3551e:	e761      	b.n	353e4 <__aeabi_fdiv+0x138>
   35520:	2380      	movs	r3, #128	; 0x80
   35522:	03db      	lsls	r3, r3, #15
   35524:	431c      	orrs	r4, r3
   35526:	0264      	lsls	r4, r4, #9
   35528:	0a64      	lsrs	r4, r4, #9
   3552a:	4653      	mov	r3, sl
   3552c:	21ff      	movs	r1, #255	; 0xff
   3552e:	e759      	b.n	353e4 <__aeabi_fdiv+0x138>
   35530:	0003d378 	.word	0x0003d378
   35534:	0003d3b8 	.word	0x0003d3b8
   35538:	f7ffffff 	.word	0xf7ffffff

0003553c <__aeabi_fmul>:
   3553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3553e:	4657      	mov	r7, sl
   35540:	464e      	mov	r6, r9
   35542:	4645      	mov	r5, r8
   35544:	46de      	mov	lr, fp
   35546:	b5e0      	push	{r5, r6, r7, lr}
   35548:	0247      	lsls	r7, r0, #9
   3554a:	0046      	lsls	r6, r0, #1
   3554c:	4688      	mov	r8, r1
   3554e:	0a7f      	lsrs	r7, r7, #9
   35550:	0e36      	lsrs	r6, r6, #24
   35552:	0fc4      	lsrs	r4, r0, #31
   35554:	2e00      	cmp	r6, #0
   35556:	d047      	beq.n	355e8 <__aeabi_fmul+0xac>
   35558:	2eff      	cmp	r6, #255	; 0xff
   3555a:	d024      	beq.n	355a6 <__aeabi_fmul+0x6a>
   3555c:	00fb      	lsls	r3, r7, #3
   3555e:	2780      	movs	r7, #128	; 0x80
   35560:	04ff      	lsls	r7, r7, #19
   35562:	431f      	orrs	r7, r3
   35564:	2300      	movs	r3, #0
   35566:	4699      	mov	r9, r3
   35568:	469a      	mov	sl, r3
   3556a:	3e7f      	subs	r6, #127	; 0x7f
   3556c:	4643      	mov	r3, r8
   3556e:	025d      	lsls	r5, r3, #9
   35570:	0058      	lsls	r0, r3, #1
   35572:	0fdb      	lsrs	r3, r3, #31
   35574:	0a6d      	lsrs	r5, r5, #9
   35576:	0e00      	lsrs	r0, r0, #24
   35578:	4698      	mov	r8, r3
   3557a:	d043      	beq.n	35604 <__aeabi_fmul+0xc8>
   3557c:	28ff      	cmp	r0, #255	; 0xff
   3557e:	d03b      	beq.n	355f8 <__aeabi_fmul+0xbc>
   35580:	00eb      	lsls	r3, r5, #3
   35582:	2580      	movs	r5, #128	; 0x80
   35584:	2200      	movs	r2, #0
   35586:	04ed      	lsls	r5, r5, #19
   35588:	431d      	orrs	r5, r3
   3558a:	387f      	subs	r0, #127	; 0x7f
   3558c:	1836      	adds	r6, r6, r0
   3558e:	1c73      	adds	r3, r6, #1
   35590:	4641      	mov	r1, r8
   35592:	469b      	mov	fp, r3
   35594:	464b      	mov	r3, r9
   35596:	4061      	eors	r1, r4
   35598:	4313      	orrs	r3, r2
   3559a:	2b0f      	cmp	r3, #15
   3559c:	d864      	bhi.n	35668 <__aeabi_fmul+0x12c>
   3559e:	4875      	ldr	r0, [pc, #468]	; (35774 <__aeabi_fmul+0x238>)
   355a0:	009b      	lsls	r3, r3, #2
   355a2:	58c3      	ldr	r3, [r0, r3]
   355a4:	469f      	mov	pc, r3
   355a6:	2f00      	cmp	r7, #0
   355a8:	d142      	bne.n	35630 <__aeabi_fmul+0xf4>
   355aa:	2308      	movs	r3, #8
   355ac:	4699      	mov	r9, r3
   355ae:	3b06      	subs	r3, #6
   355b0:	26ff      	movs	r6, #255	; 0xff
   355b2:	469a      	mov	sl, r3
   355b4:	e7da      	b.n	3556c <__aeabi_fmul+0x30>
   355b6:	4641      	mov	r1, r8
   355b8:	2a02      	cmp	r2, #2
   355ba:	d028      	beq.n	3560e <__aeabi_fmul+0xd2>
   355bc:	2a03      	cmp	r2, #3
   355be:	d100      	bne.n	355c2 <__aeabi_fmul+0x86>
   355c0:	e0ce      	b.n	35760 <__aeabi_fmul+0x224>
   355c2:	2a01      	cmp	r2, #1
   355c4:	d000      	beq.n	355c8 <__aeabi_fmul+0x8c>
   355c6:	e0ac      	b.n	35722 <__aeabi_fmul+0x1e6>
   355c8:	4011      	ands	r1, r2
   355ca:	2000      	movs	r0, #0
   355cc:	2200      	movs	r2, #0
   355ce:	b2cc      	uxtb	r4, r1
   355d0:	0240      	lsls	r0, r0, #9
   355d2:	05d2      	lsls	r2, r2, #23
   355d4:	0a40      	lsrs	r0, r0, #9
   355d6:	07e4      	lsls	r4, r4, #31
   355d8:	4310      	orrs	r0, r2
   355da:	4320      	orrs	r0, r4
   355dc:	bc3c      	pop	{r2, r3, r4, r5}
   355de:	4690      	mov	r8, r2
   355e0:	4699      	mov	r9, r3
   355e2:	46a2      	mov	sl, r4
   355e4:	46ab      	mov	fp, r5
   355e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   355e8:	2f00      	cmp	r7, #0
   355ea:	d115      	bne.n	35618 <__aeabi_fmul+0xdc>
   355ec:	2304      	movs	r3, #4
   355ee:	4699      	mov	r9, r3
   355f0:	3b03      	subs	r3, #3
   355f2:	2600      	movs	r6, #0
   355f4:	469a      	mov	sl, r3
   355f6:	e7b9      	b.n	3556c <__aeabi_fmul+0x30>
   355f8:	20ff      	movs	r0, #255	; 0xff
   355fa:	2202      	movs	r2, #2
   355fc:	2d00      	cmp	r5, #0
   355fe:	d0c5      	beq.n	3558c <__aeabi_fmul+0x50>
   35600:	2203      	movs	r2, #3
   35602:	e7c3      	b.n	3558c <__aeabi_fmul+0x50>
   35604:	2d00      	cmp	r5, #0
   35606:	d119      	bne.n	3563c <__aeabi_fmul+0x100>
   35608:	2000      	movs	r0, #0
   3560a:	2201      	movs	r2, #1
   3560c:	e7be      	b.n	3558c <__aeabi_fmul+0x50>
   3560e:	2401      	movs	r4, #1
   35610:	22ff      	movs	r2, #255	; 0xff
   35612:	400c      	ands	r4, r1
   35614:	2000      	movs	r0, #0
   35616:	e7db      	b.n	355d0 <__aeabi_fmul+0x94>
   35618:	0038      	movs	r0, r7
   3561a:	f002 f847 	bl	376ac <__clzsi2>
   3561e:	2676      	movs	r6, #118	; 0x76
   35620:	1f43      	subs	r3, r0, #5
   35622:	409f      	lsls	r7, r3
   35624:	2300      	movs	r3, #0
   35626:	4276      	negs	r6, r6
   35628:	1a36      	subs	r6, r6, r0
   3562a:	4699      	mov	r9, r3
   3562c:	469a      	mov	sl, r3
   3562e:	e79d      	b.n	3556c <__aeabi_fmul+0x30>
   35630:	230c      	movs	r3, #12
   35632:	4699      	mov	r9, r3
   35634:	3b09      	subs	r3, #9
   35636:	26ff      	movs	r6, #255	; 0xff
   35638:	469a      	mov	sl, r3
   3563a:	e797      	b.n	3556c <__aeabi_fmul+0x30>
   3563c:	0028      	movs	r0, r5
   3563e:	f002 f835 	bl	376ac <__clzsi2>
   35642:	1f43      	subs	r3, r0, #5
   35644:	409d      	lsls	r5, r3
   35646:	2376      	movs	r3, #118	; 0x76
   35648:	425b      	negs	r3, r3
   3564a:	1a18      	subs	r0, r3, r0
   3564c:	2200      	movs	r2, #0
   3564e:	e79d      	b.n	3558c <__aeabi_fmul+0x50>
   35650:	2080      	movs	r0, #128	; 0x80
   35652:	2400      	movs	r4, #0
   35654:	03c0      	lsls	r0, r0, #15
   35656:	22ff      	movs	r2, #255	; 0xff
   35658:	e7ba      	b.n	355d0 <__aeabi_fmul+0x94>
   3565a:	003d      	movs	r5, r7
   3565c:	4652      	mov	r2, sl
   3565e:	e7ab      	b.n	355b8 <__aeabi_fmul+0x7c>
   35660:	003d      	movs	r5, r7
   35662:	0021      	movs	r1, r4
   35664:	4652      	mov	r2, sl
   35666:	e7a7      	b.n	355b8 <__aeabi_fmul+0x7c>
   35668:	0c3b      	lsrs	r3, r7, #16
   3566a:	469c      	mov	ip, r3
   3566c:	042a      	lsls	r2, r5, #16
   3566e:	0c12      	lsrs	r2, r2, #16
   35670:	0c2b      	lsrs	r3, r5, #16
   35672:	0014      	movs	r4, r2
   35674:	4660      	mov	r0, ip
   35676:	4665      	mov	r5, ip
   35678:	043f      	lsls	r7, r7, #16
   3567a:	0c3f      	lsrs	r7, r7, #16
   3567c:	437c      	muls	r4, r7
   3567e:	4342      	muls	r2, r0
   35680:	435d      	muls	r5, r3
   35682:	437b      	muls	r3, r7
   35684:	0c27      	lsrs	r7, r4, #16
   35686:	189b      	adds	r3, r3, r2
   35688:	18ff      	adds	r7, r7, r3
   3568a:	42ba      	cmp	r2, r7
   3568c:	d903      	bls.n	35696 <__aeabi_fmul+0x15a>
   3568e:	2380      	movs	r3, #128	; 0x80
   35690:	025b      	lsls	r3, r3, #9
   35692:	469c      	mov	ip, r3
   35694:	4465      	add	r5, ip
   35696:	0424      	lsls	r4, r4, #16
   35698:	043a      	lsls	r2, r7, #16
   3569a:	0c24      	lsrs	r4, r4, #16
   3569c:	1912      	adds	r2, r2, r4
   3569e:	0193      	lsls	r3, r2, #6
   356a0:	1e5c      	subs	r4, r3, #1
   356a2:	41a3      	sbcs	r3, r4
   356a4:	0c3f      	lsrs	r7, r7, #16
   356a6:	0e92      	lsrs	r2, r2, #26
   356a8:	197d      	adds	r5, r7, r5
   356aa:	431a      	orrs	r2, r3
   356ac:	01ad      	lsls	r5, r5, #6
   356ae:	4315      	orrs	r5, r2
   356b0:	012b      	lsls	r3, r5, #4
   356b2:	d504      	bpl.n	356be <__aeabi_fmul+0x182>
   356b4:	2301      	movs	r3, #1
   356b6:	465e      	mov	r6, fp
   356b8:	086a      	lsrs	r2, r5, #1
   356ba:	401d      	ands	r5, r3
   356bc:	4315      	orrs	r5, r2
   356be:	0032      	movs	r2, r6
   356c0:	327f      	adds	r2, #127	; 0x7f
   356c2:	2a00      	cmp	r2, #0
   356c4:	dd25      	ble.n	35712 <__aeabi_fmul+0x1d6>
   356c6:	076b      	lsls	r3, r5, #29
   356c8:	d004      	beq.n	356d4 <__aeabi_fmul+0x198>
   356ca:	230f      	movs	r3, #15
   356cc:	402b      	ands	r3, r5
   356ce:	2b04      	cmp	r3, #4
   356d0:	d000      	beq.n	356d4 <__aeabi_fmul+0x198>
   356d2:	3504      	adds	r5, #4
   356d4:	012b      	lsls	r3, r5, #4
   356d6:	d503      	bpl.n	356e0 <__aeabi_fmul+0x1a4>
   356d8:	0032      	movs	r2, r6
   356da:	4b27      	ldr	r3, [pc, #156]	; (35778 <__aeabi_fmul+0x23c>)
   356dc:	3280      	adds	r2, #128	; 0x80
   356de:	401d      	ands	r5, r3
   356e0:	2afe      	cmp	r2, #254	; 0xfe
   356e2:	dc94      	bgt.n	3560e <__aeabi_fmul+0xd2>
   356e4:	2401      	movs	r4, #1
   356e6:	01a8      	lsls	r0, r5, #6
   356e8:	0a40      	lsrs	r0, r0, #9
   356ea:	b2d2      	uxtb	r2, r2
   356ec:	400c      	ands	r4, r1
   356ee:	e76f      	b.n	355d0 <__aeabi_fmul+0x94>
   356f0:	2080      	movs	r0, #128	; 0x80
   356f2:	03c0      	lsls	r0, r0, #15
   356f4:	4207      	tst	r7, r0
   356f6:	d007      	beq.n	35708 <__aeabi_fmul+0x1cc>
   356f8:	4205      	tst	r5, r0
   356fa:	d105      	bne.n	35708 <__aeabi_fmul+0x1cc>
   356fc:	4328      	orrs	r0, r5
   356fe:	0240      	lsls	r0, r0, #9
   35700:	0a40      	lsrs	r0, r0, #9
   35702:	4644      	mov	r4, r8
   35704:	22ff      	movs	r2, #255	; 0xff
   35706:	e763      	b.n	355d0 <__aeabi_fmul+0x94>
   35708:	4338      	orrs	r0, r7
   3570a:	0240      	lsls	r0, r0, #9
   3570c:	0a40      	lsrs	r0, r0, #9
   3570e:	22ff      	movs	r2, #255	; 0xff
   35710:	e75e      	b.n	355d0 <__aeabi_fmul+0x94>
   35712:	2401      	movs	r4, #1
   35714:	1aa3      	subs	r3, r4, r2
   35716:	2b1b      	cmp	r3, #27
   35718:	dd05      	ble.n	35726 <__aeabi_fmul+0x1ea>
   3571a:	400c      	ands	r4, r1
   3571c:	2200      	movs	r2, #0
   3571e:	2000      	movs	r0, #0
   35720:	e756      	b.n	355d0 <__aeabi_fmul+0x94>
   35722:	465e      	mov	r6, fp
   35724:	e7cb      	b.n	356be <__aeabi_fmul+0x182>
   35726:	002a      	movs	r2, r5
   35728:	2020      	movs	r0, #32
   3572a:	40da      	lsrs	r2, r3
   3572c:	1ac3      	subs	r3, r0, r3
   3572e:	409d      	lsls	r5, r3
   35730:	002b      	movs	r3, r5
   35732:	1e5d      	subs	r5, r3, #1
   35734:	41ab      	sbcs	r3, r5
   35736:	4313      	orrs	r3, r2
   35738:	075a      	lsls	r2, r3, #29
   3573a:	d004      	beq.n	35746 <__aeabi_fmul+0x20a>
   3573c:	220f      	movs	r2, #15
   3573e:	401a      	ands	r2, r3
   35740:	2a04      	cmp	r2, #4
   35742:	d000      	beq.n	35746 <__aeabi_fmul+0x20a>
   35744:	3304      	adds	r3, #4
   35746:	015a      	lsls	r2, r3, #5
   35748:	d504      	bpl.n	35754 <__aeabi_fmul+0x218>
   3574a:	2401      	movs	r4, #1
   3574c:	2201      	movs	r2, #1
   3574e:	400c      	ands	r4, r1
   35750:	2000      	movs	r0, #0
   35752:	e73d      	b.n	355d0 <__aeabi_fmul+0x94>
   35754:	2401      	movs	r4, #1
   35756:	019b      	lsls	r3, r3, #6
   35758:	0a58      	lsrs	r0, r3, #9
   3575a:	400c      	ands	r4, r1
   3575c:	2200      	movs	r2, #0
   3575e:	e737      	b.n	355d0 <__aeabi_fmul+0x94>
   35760:	2080      	movs	r0, #128	; 0x80
   35762:	2401      	movs	r4, #1
   35764:	03c0      	lsls	r0, r0, #15
   35766:	4328      	orrs	r0, r5
   35768:	0240      	lsls	r0, r0, #9
   3576a:	0a40      	lsrs	r0, r0, #9
   3576c:	400c      	ands	r4, r1
   3576e:	22ff      	movs	r2, #255	; 0xff
   35770:	e72e      	b.n	355d0 <__aeabi_fmul+0x94>
   35772:	46c0      	nop			; (mov r8, r8)
   35774:	0003d3f8 	.word	0x0003d3f8
   35778:	f7ffffff 	.word	0xf7ffffff

0003577c <__aeabi_fsub>:
   3577c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3577e:	464f      	mov	r7, r9
   35780:	46d6      	mov	lr, sl
   35782:	4646      	mov	r6, r8
   35784:	0044      	lsls	r4, r0, #1
   35786:	b5c0      	push	{r6, r7, lr}
   35788:	0fc2      	lsrs	r2, r0, #31
   3578a:	0247      	lsls	r7, r0, #9
   3578c:	0248      	lsls	r0, r1, #9
   3578e:	0a40      	lsrs	r0, r0, #9
   35790:	4684      	mov	ip, r0
   35792:	4666      	mov	r6, ip
   35794:	0a7b      	lsrs	r3, r7, #9
   35796:	0048      	lsls	r0, r1, #1
   35798:	0fc9      	lsrs	r1, r1, #31
   3579a:	469a      	mov	sl, r3
   3579c:	0e24      	lsrs	r4, r4, #24
   3579e:	0015      	movs	r5, r2
   357a0:	00db      	lsls	r3, r3, #3
   357a2:	0e00      	lsrs	r0, r0, #24
   357a4:	4689      	mov	r9, r1
   357a6:	00f6      	lsls	r6, r6, #3
   357a8:	28ff      	cmp	r0, #255	; 0xff
   357aa:	d100      	bne.n	357ae <__aeabi_fsub+0x32>
   357ac:	e08f      	b.n	358ce <__aeabi_fsub+0x152>
   357ae:	2101      	movs	r1, #1
   357b0:	464f      	mov	r7, r9
   357b2:	404f      	eors	r7, r1
   357b4:	0039      	movs	r1, r7
   357b6:	4291      	cmp	r1, r2
   357b8:	d066      	beq.n	35888 <__aeabi_fsub+0x10c>
   357ba:	1a22      	subs	r2, r4, r0
   357bc:	2a00      	cmp	r2, #0
   357be:	dc00      	bgt.n	357c2 <__aeabi_fsub+0x46>
   357c0:	e09d      	b.n	358fe <__aeabi_fsub+0x182>
   357c2:	2800      	cmp	r0, #0
   357c4:	d13d      	bne.n	35842 <__aeabi_fsub+0xc6>
   357c6:	2e00      	cmp	r6, #0
   357c8:	d100      	bne.n	357cc <__aeabi_fsub+0x50>
   357ca:	e08b      	b.n	358e4 <__aeabi_fsub+0x168>
   357cc:	1e51      	subs	r1, r2, #1
   357ce:	2900      	cmp	r1, #0
   357d0:	d000      	beq.n	357d4 <__aeabi_fsub+0x58>
   357d2:	e0b5      	b.n	35940 <__aeabi_fsub+0x1c4>
   357d4:	2401      	movs	r4, #1
   357d6:	1b9b      	subs	r3, r3, r6
   357d8:	015a      	lsls	r2, r3, #5
   357da:	d544      	bpl.n	35866 <__aeabi_fsub+0xea>
   357dc:	019b      	lsls	r3, r3, #6
   357de:	099f      	lsrs	r7, r3, #6
   357e0:	0038      	movs	r0, r7
   357e2:	f001 ff63 	bl	376ac <__clzsi2>
   357e6:	3805      	subs	r0, #5
   357e8:	4087      	lsls	r7, r0
   357ea:	4284      	cmp	r4, r0
   357ec:	dd00      	ble.n	357f0 <__aeabi_fsub+0x74>
   357ee:	e096      	b.n	3591e <__aeabi_fsub+0x1a2>
   357f0:	1b04      	subs	r4, r0, r4
   357f2:	003a      	movs	r2, r7
   357f4:	2020      	movs	r0, #32
   357f6:	3401      	adds	r4, #1
   357f8:	40e2      	lsrs	r2, r4
   357fa:	1b04      	subs	r4, r0, r4
   357fc:	40a7      	lsls	r7, r4
   357fe:	003b      	movs	r3, r7
   35800:	1e5f      	subs	r7, r3, #1
   35802:	41bb      	sbcs	r3, r7
   35804:	2400      	movs	r4, #0
   35806:	4313      	orrs	r3, r2
   35808:	075a      	lsls	r2, r3, #29
   3580a:	d004      	beq.n	35816 <__aeabi_fsub+0x9a>
   3580c:	220f      	movs	r2, #15
   3580e:	401a      	ands	r2, r3
   35810:	2a04      	cmp	r2, #4
   35812:	d000      	beq.n	35816 <__aeabi_fsub+0x9a>
   35814:	3304      	adds	r3, #4
   35816:	015a      	lsls	r2, r3, #5
   35818:	d527      	bpl.n	3586a <__aeabi_fsub+0xee>
   3581a:	3401      	adds	r4, #1
   3581c:	2cff      	cmp	r4, #255	; 0xff
   3581e:	d100      	bne.n	35822 <__aeabi_fsub+0xa6>
   35820:	e079      	b.n	35916 <__aeabi_fsub+0x19a>
   35822:	2201      	movs	r2, #1
   35824:	019b      	lsls	r3, r3, #6
   35826:	0a5b      	lsrs	r3, r3, #9
   35828:	b2e4      	uxtb	r4, r4
   3582a:	402a      	ands	r2, r5
   3582c:	025b      	lsls	r3, r3, #9
   3582e:	05e4      	lsls	r4, r4, #23
   35830:	0a58      	lsrs	r0, r3, #9
   35832:	07d2      	lsls	r2, r2, #31
   35834:	4320      	orrs	r0, r4
   35836:	4310      	orrs	r0, r2
   35838:	bc1c      	pop	{r2, r3, r4}
   3583a:	4690      	mov	r8, r2
   3583c:	4699      	mov	r9, r3
   3583e:	46a2      	mov	sl, r4
   35840:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35842:	2cff      	cmp	r4, #255	; 0xff
   35844:	d0e0      	beq.n	35808 <__aeabi_fsub+0x8c>
   35846:	2180      	movs	r1, #128	; 0x80
   35848:	04c9      	lsls	r1, r1, #19
   3584a:	430e      	orrs	r6, r1
   3584c:	2a1b      	cmp	r2, #27
   3584e:	dc7b      	bgt.n	35948 <__aeabi_fsub+0x1cc>
   35850:	0031      	movs	r1, r6
   35852:	2020      	movs	r0, #32
   35854:	40d1      	lsrs	r1, r2
   35856:	1a82      	subs	r2, r0, r2
   35858:	4096      	lsls	r6, r2
   3585a:	1e72      	subs	r2, r6, #1
   3585c:	4196      	sbcs	r6, r2
   3585e:	430e      	orrs	r6, r1
   35860:	1b9b      	subs	r3, r3, r6
   35862:	015a      	lsls	r2, r3, #5
   35864:	d4ba      	bmi.n	357dc <__aeabi_fsub+0x60>
   35866:	075a      	lsls	r2, r3, #29
   35868:	d1d0      	bne.n	3580c <__aeabi_fsub+0x90>
   3586a:	2201      	movs	r2, #1
   3586c:	08df      	lsrs	r7, r3, #3
   3586e:	402a      	ands	r2, r5
   35870:	2cff      	cmp	r4, #255	; 0xff
   35872:	d133      	bne.n	358dc <__aeabi_fsub+0x160>
   35874:	2f00      	cmp	r7, #0
   35876:	d100      	bne.n	3587a <__aeabi_fsub+0xfe>
   35878:	e0a8      	b.n	359cc <__aeabi_fsub+0x250>
   3587a:	2380      	movs	r3, #128	; 0x80
   3587c:	03db      	lsls	r3, r3, #15
   3587e:	433b      	orrs	r3, r7
   35880:	025b      	lsls	r3, r3, #9
   35882:	0a5b      	lsrs	r3, r3, #9
   35884:	24ff      	movs	r4, #255	; 0xff
   35886:	e7d1      	b.n	3582c <__aeabi_fsub+0xb0>
   35888:	1a21      	subs	r1, r4, r0
   3588a:	2900      	cmp	r1, #0
   3588c:	dd4c      	ble.n	35928 <__aeabi_fsub+0x1ac>
   3588e:	2800      	cmp	r0, #0
   35890:	d02a      	beq.n	358e8 <__aeabi_fsub+0x16c>
   35892:	2cff      	cmp	r4, #255	; 0xff
   35894:	d0b8      	beq.n	35808 <__aeabi_fsub+0x8c>
   35896:	2080      	movs	r0, #128	; 0x80
   35898:	04c0      	lsls	r0, r0, #19
   3589a:	4306      	orrs	r6, r0
   3589c:	291b      	cmp	r1, #27
   3589e:	dd00      	ble.n	358a2 <__aeabi_fsub+0x126>
   358a0:	e0af      	b.n	35a02 <__aeabi_fsub+0x286>
   358a2:	0030      	movs	r0, r6
   358a4:	2720      	movs	r7, #32
   358a6:	40c8      	lsrs	r0, r1
   358a8:	1a79      	subs	r1, r7, r1
   358aa:	408e      	lsls	r6, r1
   358ac:	1e71      	subs	r1, r6, #1
   358ae:	418e      	sbcs	r6, r1
   358b0:	4306      	orrs	r6, r0
   358b2:	199b      	adds	r3, r3, r6
   358b4:	0159      	lsls	r1, r3, #5
   358b6:	d5d6      	bpl.n	35866 <__aeabi_fsub+0xea>
   358b8:	3401      	adds	r4, #1
   358ba:	2cff      	cmp	r4, #255	; 0xff
   358bc:	d100      	bne.n	358c0 <__aeabi_fsub+0x144>
   358be:	e085      	b.n	359cc <__aeabi_fsub+0x250>
   358c0:	2201      	movs	r2, #1
   358c2:	497a      	ldr	r1, [pc, #488]	; (35aac <__aeabi_fsub+0x330>)
   358c4:	401a      	ands	r2, r3
   358c6:	085b      	lsrs	r3, r3, #1
   358c8:	400b      	ands	r3, r1
   358ca:	4313      	orrs	r3, r2
   358cc:	e79c      	b.n	35808 <__aeabi_fsub+0x8c>
   358ce:	2e00      	cmp	r6, #0
   358d0:	d000      	beq.n	358d4 <__aeabi_fsub+0x158>
   358d2:	e770      	b.n	357b6 <__aeabi_fsub+0x3a>
   358d4:	e76b      	b.n	357ae <__aeabi_fsub+0x32>
   358d6:	1e3b      	subs	r3, r7, #0
   358d8:	d1c5      	bne.n	35866 <__aeabi_fsub+0xea>
   358da:	2200      	movs	r2, #0
   358dc:	027b      	lsls	r3, r7, #9
   358de:	0a5b      	lsrs	r3, r3, #9
   358e0:	b2e4      	uxtb	r4, r4
   358e2:	e7a3      	b.n	3582c <__aeabi_fsub+0xb0>
   358e4:	0014      	movs	r4, r2
   358e6:	e78f      	b.n	35808 <__aeabi_fsub+0x8c>
   358e8:	2e00      	cmp	r6, #0
   358ea:	d04d      	beq.n	35988 <__aeabi_fsub+0x20c>
   358ec:	1e48      	subs	r0, r1, #1
   358ee:	2800      	cmp	r0, #0
   358f0:	d157      	bne.n	359a2 <__aeabi_fsub+0x226>
   358f2:	199b      	adds	r3, r3, r6
   358f4:	2401      	movs	r4, #1
   358f6:	015a      	lsls	r2, r3, #5
   358f8:	d5b5      	bpl.n	35866 <__aeabi_fsub+0xea>
   358fa:	2402      	movs	r4, #2
   358fc:	e7e0      	b.n	358c0 <__aeabi_fsub+0x144>
   358fe:	2a00      	cmp	r2, #0
   35900:	d125      	bne.n	3594e <__aeabi_fsub+0x1d2>
   35902:	1c62      	adds	r2, r4, #1
   35904:	b2d2      	uxtb	r2, r2
   35906:	2a01      	cmp	r2, #1
   35908:	dd72      	ble.n	359f0 <__aeabi_fsub+0x274>
   3590a:	1b9f      	subs	r7, r3, r6
   3590c:	017a      	lsls	r2, r7, #5
   3590e:	d535      	bpl.n	3597c <__aeabi_fsub+0x200>
   35910:	1af7      	subs	r7, r6, r3
   35912:	000d      	movs	r5, r1
   35914:	e764      	b.n	357e0 <__aeabi_fsub+0x64>
   35916:	2201      	movs	r2, #1
   35918:	2300      	movs	r3, #0
   3591a:	402a      	ands	r2, r5
   3591c:	e786      	b.n	3582c <__aeabi_fsub+0xb0>
   3591e:	003b      	movs	r3, r7
   35920:	4a63      	ldr	r2, [pc, #396]	; (35ab0 <__aeabi_fsub+0x334>)
   35922:	1a24      	subs	r4, r4, r0
   35924:	4013      	ands	r3, r2
   35926:	e76f      	b.n	35808 <__aeabi_fsub+0x8c>
   35928:	2900      	cmp	r1, #0
   3592a:	d16c      	bne.n	35a06 <__aeabi_fsub+0x28a>
   3592c:	1c61      	adds	r1, r4, #1
   3592e:	b2c8      	uxtb	r0, r1
   35930:	2801      	cmp	r0, #1
   35932:	dd4e      	ble.n	359d2 <__aeabi_fsub+0x256>
   35934:	29ff      	cmp	r1, #255	; 0xff
   35936:	d049      	beq.n	359cc <__aeabi_fsub+0x250>
   35938:	199b      	adds	r3, r3, r6
   3593a:	085b      	lsrs	r3, r3, #1
   3593c:	000c      	movs	r4, r1
   3593e:	e763      	b.n	35808 <__aeabi_fsub+0x8c>
   35940:	2aff      	cmp	r2, #255	; 0xff
   35942:	d041      	beq.n	359c8 <__aeabi_fsub+0x24c>
   35944:	000a      	movs	r2, r1
   35946:	e781      	b.n	3584c <__aeabi_fsub+0xd0>
   35948:	2601      	movs	r6, #1
   3594a:	1b9b      	subs	r3, r3, r6
   3594c:	e789      	b.n	35862 <__aeabi_fsub+0xe6>
   3594e:	2c00      	cmp	r4, #0
   35950:	d01c      	beq.n	3598c <__aeabi_fsub+0x210>
   35952:	28ff      	cmp	r0, #255	; 0xff
   35954:	d021      	beq.n	3599a <__aeabi_fsub+0x21e>
   35956:	2480      	movs	r4, #128	; 0x80
   35958:	04e4      	lsls	r4, r4, #19
   3595a:	4252      	negs	r2, r2
   3595c:	4323      	orrs	r3, r4
   3595e:	2a1b      	cmp	r2, #27
   35960:	dd00      	ble.n	35964 <__aeabi_fsub+0x1e8>
   35962:	e096      	b.n	35a92 <__aeabi_fsub+0x316>
   35964:	001c      	movs	r4, r3
   35966:	2520      	movs	r5, #32
   35968:	40d4      	lsrs	r4, r2
   3596a:	1aaa      	subs	r2, r5, r2
   3596c:	4093      	lsls	r3, r2
   3596e:	1e5a      	subs	r2, r3, #1
   35970:	4193      	sbcs	r3, r2
   35972:	4323      	orrs	r3, r4
   35974:	1af3      	subs	r3, r6, r3
   35976:	0004      	movs	r4, r0
   35978:	000d      	movs	r5, r1
   3597a:	e72d      	b.n	357d8 <__aeabi_fsub+0x5c>
   3597c:	2f00      	cmp	r7, #0
   3597e:	d000      	beq.n	35982 <__aeabi_fsub+0x206>
   35980:	e72e      	b.n	357e0 <__aeabi_fsub+0x64>
   35982:	2200      	movs	r2, #0
   35984:	2400      	movs	r4, #0
   35986:	e7a9      	b.n	358dc <__aeabi_fsub+0x160>
   35988:	000c      	movs	r4, r1
   3598a:	e73d      	b.n	35808 <__aeabi_fsub+0x8c>
   3598c:	2b00      	cmp	r3, #0
   3598e:	d058      	beq.n	35a42 <__aeabi_fsub+0x2c6>
   35990:	43d2      	mvns	r2, r2
   35992:	2a00      	cmp	r2, #0
   35994:	d0ee      	beq.n	35974 <__aeabi_fsub+0x1f8>
   35996:	28ff      	cmp	r0, #255	; 0xff
   35998:	d1e1      	bne.n	3595e <__aeabi_fsub+0x1e2>
   3599a:	0033      	movs	r3, r6
   3599c:	24ff      	movs	r4, #255	; 0xff
   3599e:	000d      	movs	r5, r1
   359a0:	e732      	b.n	35808 <__aeabi_fsub+0x8c>
   359a2:	29ff      	cmp	r1, #255	; 0xff
   359a4:	d010      	beq.n	359c8 <__aeabi_fsub+0x24c>
   359a6:	0001      	movs	r1, r0
   359a8:	e778      	b.n	3589c <__aeabi_fsub+0x120>
   359aa:	2b00      	cmp	r3, #0
   359ac:	d06e      	beq.n	35a8c <__aeabi_fsub+0x310>
   359ae:	24ff      	movs	r4, #255	; 0xff
   359b0:	2e00      	cmp	r6, #0
   359b2:	d100      	bne.n	359b6 <__aeabi_fsub+0x23a>
   359b4:	e728      	b.n	35808 <__aeabi_fsub+0x8c>
   359b6:	2280      	movs	r2, #128	; 0x80
   359b8:	4651      	mov	r1, sl
   359ba:	03d2      	lsls	r2, r2, #15
   359bc:	4211      	tst	r1, r2
   359be:	d003      	beq.n	359c8 <__aeabi_fsub+0x24c>
   359c0:	4661      	mov	r1, ip
   359c2:	4211      	tst	r1, r2
   359c4:	d100      	bne.n	359c8 <__aeabi_fsub+0x24c>
   359c6:	0033      	movs	r3, r6
   359c8:	24ff      	movs	r4, #255	; 0xff
   359ca:	e71d      	b.n	35808 <__aeabi_fsub+0x8c>
   359cc:	24ff      	movs	r4, #255	; 0xff
   359ce:	2300      	movs	r3, #0
   359d0:	e72c      	b.n	3582c <__aeabi_fsub+0xb0>
   359d2:	2c00      	cmp	r4, #0
   359d4:	d1e9      	bne.n	359aa <__aeabi_fsub+0x22e>
   359d6:	2b00      	cmp	r3, #0
   359d8:	d063      	beq.n	35aa2 <__aeabi_fsub+0x326>
   359da:	2e00      	cmp	r6, #0
   359dc:	d100      	bne.n	359e0 <__aeabi_fsub+0x264>
   359de:	e713      	b.n	35808 <__aeabi_fsub+0x8c>
   359e0:	199b      	adds	r3, r3, r6
   359e2:	015a      	lsls	r2, r3, #5
   359e4:	d400      	bmi.n	359e8 <__aeabi_fsub+0x26c>
   359e6:	e73e      	b.n	35866 <__aeabi_fsub+0xea>
   359e8:	4a31      	ldr	r2, [pc, #196]	; (35ab0 <__aeabi_fsub+0x334>)
   359ea:	000c      	movs	r4, r1
   359ec:	4013      	ands	r3, r2
   359ee:	e70b      	b.n	35808 <__aeabi_fsub+0x8c>
   359f0:	2c00      	cmp	r4, #0
   359f2:	d11e      	bne.n	35a32 <__aeabi_fsub+0x2b6>
   359f4:	2b00      	cmp	r3, #0
   359f6:	d12f      	bne.n	35a58 <__aeabi_fsub+0x2dc>
   359f8:	2e00      	cmp	r6, #0
   359fa:	d04f      	beq.n	35a9c <__aeabi_fsub+0x320>
   359fc:	0033      	movs	r3, r6
   359fe:	000d      	movs	r5, r1
   35a00:	e702      	b.n	35808 <__aeabi_fsub+0x8c>
   35a02:	2601      	movs	r6, #1
   35a04:	e755      	b.n	358b2 <__aeabi_fsub+0x136>
   35a06:	2c00      	cmp	r4, #0
   35a08:	d11f      	bne.n	35a4a <__aeabi_fsub+0x2ce>
   35a0a:	2b00      	cmp	r3, #0
   35a0c:	d043      	beq.n	35a96 <__aeabi_fsub+0x31a>
   35a0e:	43c9      	mvns	r1, r1
   35a10:	2900      	cmp	r1, #0
   35a12:	d00b      	beq.n	35a2c <__aeabi_fsub+0x2b0>
   35a14:	28ff      	cmp	r0, #255	; 0xff
   35a16:	d039      	beq.n	35a8c <__aeabi_fsub+0x310>
   35a18:	291b      	cmp	r1, #27
   35a1a:	dc44      	bgt.n	35aa6 <__aeabi_fsub+0x32a>
   35a1c:	001c      	movs	r4, r3
   35a1e:	2720      	movs	r7, #32
   35a20:	40cc      	lsrs	r4, r1
   35a22:	1a79      	subs	r1, r7, r1
   35a24:	408b      	lsls	r3, r1
   35a26:	1e59      	subs	r1, r3, #1
   35a28:	418b      	sbcs	r3, r1
   35a2a:	4323      	orrs	r3, r4
   35a2c:	199b      	adds	r3, r3, r6
   35a2e:	0004      	movs	r4, r0
   35a30:	e740      	b.n	358b4 <__aeabi_fsub+0x138>
   35a32:	2b00      	cmp	r3, #0
   35a34:	d11a      	bne.n	35a6c <__aeabi_fsub+0x2f0>
   35a36:	2e00      	cmp	r6, #0
   35a38:	d124      	bne.n	35a84 <__aeabi_fsub+0x308>
   35a3a:	2780      	movs	r7, #128	; 0x80
   35a3c:	2200      	movs	r2, #0
   35a3e:	03ff      	lsls	r7, r7, #15
   35a40:	e71b      	b.n	3587a <__aeabi_fsub+0xfe>
   35a42:	0033      	movs	r3, r6
   35a44:	0004      	movs	r4, r0
   35a46:	000d      	movs	r5, r1
   35a48:	e6de      	b.n	35808 <__aeabi_fsub+0x8c>
   35a4a:	28ff      	cmp	r0, #255	; 0xff
   35a4c:	d01e      	beq.n	35a8c <__aeabi_fsub+0x310>
   35a4e:	2480      	movs	r4, #128	; 0x80
   35a50:	04e4      	lsls	r4, r4, #19
   35a52:	4249      	negs	r1, r1
   35a54:	4323      	orrs	r3, r4
   35a56:	e7df      	b.n	35a18 <__aeabi_fsub+0x29c>
   35a58:	2e00      	cmp	r6, #0
   35a5a:	d100      	bne.n	35a5e <__aeabi_fsub+0x2e2>
   35a5c:	e6d4      	b.n	35808 <__aeabi_fsub+0x8c>
   35a5e:	1b9f      	subs	r7, r3, r6
   35a60:	017a      	lsls	r2, r7, #5
   35a62:	d400      	bmi.n	35a66 <__aeabi_fsub+0x2ea>
   35a64:	e737      	b.n	358d6 <__aeabi_fsub+0x15a>
   35a66:	1af3      	subs	r3, r6, r3
   35a68:	000d      	movs	r5, r1
   35a6a:	e6cd      	b.n	35808 <__aeabi_fsub+0x8c>
   35a6c:	24ff      	movs	r4, #255	; 0xff
   35a6e:	2e00      	cmp	r6, #0
   35a70:	d100      	bne.n	35a74 <__aeabi_fsub+0x2f8>
   35a72:	e6c9      	b.n	35808 <__aeabi_fsub+0x8c>
   35a74:	2280      	movs	r2, #128	; 0x80
   35a76:	4650      	mov	r0, sl
   35a78:	03d2      	lsls	r2, r2, #15
   35a7a:	4210      	tst	r0, r2
   35a7c:	d0a4      	beq.n	359c8 <__aeabi_fsub+0x24c>
   35a7e:	4660      	mov	r0, ip
   35a80:	4210      	tst	r0, r2
   35a82:	d1a1      	bne.n	359c8 <__aeabi_fsub+0x24c>
   35a84:	0033      	movs	r3, r6
   35a86:	000d      	movs	r5, r1
   35a88:	24ff      	movs	r4, #255	; 0xff
   35a8a:	e6bd      	b.n	35808 <__aeabi_fsub+0x8c>
   35a8c:	0033      	movs	r3, r6
   35a8e:	24ff      	movs	r4, #255	; 0xff
   35a90:	e6ba      	b.n	35808 <__aeabi_fsub+0x8c>
   35a92:	2301      	movs	r3, #1
   35a94:	e76e      	b.n	35974 <__aeabi_fsub+0x1f8>
   35a96:	0033      	movs	r3, r6
   35a98:	0004      	movs	r4, r0
   35a9a:	e6b5      	b.n	35808 <__aeabi_fsub+0x8c>
   35a9c:	2700      	movs	r7, #0
   35a9e:	2200      	movs	r2, #0
   35aa0:	e71c      	b.n	358dc <__aeabi_fsub+0x160>
   35aa2:	0033      	movs	r3, r6
   35aa4:	e6b0      	b.n	35808 <__aeabi_fsub+0x8c>
   35aa6:	2301      	movs	r3, #1
   35aa8:	e7c0      	b.n	35a2c <__aeabi_fsub+0x2b0>
   35aaa:	46c0      	nop			; (mov r8, r8)
   35aac:	7dffffff 	.word	0x7dffffff
   35ab0:	fbffffff 	.word	0xfbffffff

00035ab4 <__aeabi_f2iz>:
   35ab4:	0241      	lsls	r1, r0, #9
   35ab6:	0043      	lsls	r3, r0, #1
   35ab8:	0fc2      	lsrs	r2, r0, #31
   35aba:	0a49      	lsrs	r1, r1, #9
   35abc:	0e1b      	lsrs	r3, r3, #24
   35abe:	2000      	movs	r0, #0
   35ac0:	2b7e      	cmp	r3, #126	; 0x7e
   35ac2:	dd0d      	ble.n	35ae0 <__aeabi_f2iz+0x2c>
   35ac4:	2b9d      	cmp	r3, #157	; 0x9d
   35ac6:	dc0c      	bgt.n	35ae2 <__aeabi_f2iz+0x2e>
   35ac8:	2080      	movs	r0, #128	; 0x80
   35aca:	0400      	lsls	r0, r0, #16
   35acc:	4301      	orrs	r1, r0
   35ace:	2b95      	cmp	r3, #149	; 0x95
   35ad0:	dc0a      	bgt.n	35ae8 <__aeabi_f2iz+0x34>
   35ad2:	2096      	movs	r0, #150	; 0x96
   35ad4:	1ac3      	subs	r3, r0, r3
   35ad6:	40d9      	lsrs	r1, r3
   35ad8:	4248      	negs	r0, r1
   35ada:	2a00      	cmp	r2, #0
   35adc:	d100      	bne.n	35ae0 <__aeabi_f2iz+0x2c>
   35ade:	0008      	movs	r0, r1
   35ae0:	4770      	bx	lr
   35ae2:	4b03      	ldr	r3, [pc, #12]	; (35af0 <__aeabi_f2iz+0x3c>)
   35ae4:	18d0      	adds	r0, r2, r3
   35ae6:	e7fb      	b.n	35ae0 <__aeabi_f2iz+0x2c>
   35ae8:	3b96      	subs	r3, #150	; 0x96
   35aea:	4099      	lsls	r1, r3
   35aec:	e7f4      	b.n	35ad8 <__aeabi_f2iz+0x24>
   35aee:	46c0      	nop			; (mov r8, r8)
   35af0:	7fffffff 	.word	0x7fffffff

00035af4 <__aeabi_i2f>:
   35af4:	b570      	push	{r4, r5, r6, lr}
   35af6:	2800      	cmp	r0, #0
   35af8:	d030      	beq.n	35b5c <__aeabi_i2f+0x68>
   35afa:	17c3      	asrs	r3, r0, #31
   35afc:	18c4      	adds	r4, r0, r3
   35afe:	405c      	eors	r4, r3
   35b00:	0fc5      	lsrs	r5, r0, #31
   35b02:	0020      	movs	r0, r4
   35b04:	f001 fdd2 	bl	376ac <__clzsi2>
   35b08:	239e      	movs	r3, #158	; 0x9e
   35b0a:	1a1b      	subs	r3, r3, r0
   35b0c:	2b96      	cmp	r3, #150	; 0x96
   35b0e:	dc0d      	bgt.n	35b2c <__aeabi_i2f+0x38>
   35b10:	2296      	movs	r2, #150	; 0x96
   35b12:	1ad2      	subs	r2, r2, r3
   35b14:	4094      	lsls	r4, r2
   35b16:	002a      	movs	r2, r5
   35b18:	0264      	lsls	r4, r4, #9
   35b1a:	0a64      	lsrs	r4, r4, #9
   35b1c:	b2db      	uxtb	r3, r3
   35b1e:	0264      	lsls	r4, r4, #9
   35b20:	05db      	lsls	r3, r3, #23
   35b22:	0a60      	lsrs	r0, r4, #9
   35b24:	07d2      	lsls	r2, r2, #31
   35b26:	4318      	orrs	r0, r3
   35b28:	4310      	orrs	r0, r2
   35b2a:	bd70      	pop	{r4, r5, r6, pc}
   35b2c:	2b99      	cmp	r3, #153	; 0x99
   35b2e:	dc19      	bgt.n	35b64 <__aeabi_i2f+0x70>
   35b30:	2299      	movs	r2, #153	; 0x99
   35b32:	1ad2      	subs	r2, r2, r3
   35b34:	2a00      	cmp	r2, #0
   35b36:	dd29      	ble.n	35b8c <__aeabi_i2f+0x98>
   35b38:	4094      	lsls	r4, r2
   35b3a:	0022      	movs	r2, r4
   35b3c:	4c14      	ldr	r4, [pc, #80]	; (35b90 <__aeabi_i2f+0x9c>)
   35b3e:	4014      	ands	r4, r2
   35b40:	0751      	lsls	r1, r2, #29
   35b42:	d004      	beq.n	35b4e <__aeabi_i2f+0x5a>
   35b44:	210f      	movs	r1, #15
   35b46:	400a      	ands	r2, r1
   35b48:	2a04      	cmp	r2, #4
   35b4a:	d000      	beq.n	35b4e <__aeabi_i2f+0x5a>
   35b4c:	3404      	adds	r4, #4
   35b4e:	0162      	lsls	r2, r4, #5
   35b50:	d413      	bmi.n	35b7a <__aeabi_i2f+0x86>
   35b52:	01a4      	lsls	r4, r4, #6
   35b54:	0a64      	lsrs	r4, r4, #9
   35b56:	b2db      	uxtb	r3, r3
   35b58:	002a      	movs	r2, r5
   35b5a:	e7e0      	b.n	35b1e <__aeabi_i2f+0x2a>
   35b5c:	2200      	movs	r2, #0
   35b5e:	2300      	movs	r3, #0
   35b60:	2400      	movs	r4, #0
   35b62:	e7dc      	b.n	35b1e <__aeabi_i2f+0x2a>
   35b64:	2205      	movs	r2, #5
   35b66:	0021      	movs	r1, r4
   35b68:	1a12      	subs	r2, r2, r0
   35b6a:	40d1      	lsrs	r1, r2
   35b6c:	22b9      	movs	r2, #185	; 0xb9
   35b6e:	1ad2      	subs	r2, r2, r3
   35b70:	4094      	lsls	r4, r2
   35b72:	1e62      	subs	r2, r4, #1
   35b74:	4194      	sbcs	r4, r2
   35b76:	430c      	orrs	r4, r1
   35b78:	e7da      	b.n	35b30 <__aeabi_i2f+0x3c>
   35b7a:	4b05      	ldr	r3, [pc, #20]	; (35b90 <__aeabi_i2f+0x9c>)
   35b7c:	002a      	movs	r2, r5
   35b7e:	401c      	ands	r4, r3
   35b80:	239f      	movs	r3, #159	; 0x9f
   35b82:	01a4      	lsls	r4, r4, #6
   35b84:	1a1b      	subs	r3, r3, r0
   35b86:	0a64      	lsrs	r4, r4, #9
   35b88:	b2db      	uxtb	r3, r3
   35b8a:	e7c8      	b.n	35b1e <__aeabi_i2f+0x2a>
   35b8c:	0022      	movs	r2, r4
   35b8e:	e7d5      	b.n	35b3c <__aeabi_i2f+0x48>
   35b90:	fbffffff 	.word	0xfbffffff

00035b94 <__aeabi_ui2f>:
   35b94:	b510      	push	{r4, lr}
   35b96:	1e04      	subs	r4, r0, #0
   35b98:	d027      	beq.n	35bea <__aeabi_ui2f+0x56>
   35b9a:	f001 fd87 	bl	376ac <__clzsi2>
   35b9e:	239e      	movs	r3, #158	; 0x9e
   35ba0:	1a1b      	subs	r3, r3, r0
   35ba2:	2b96      	cmp	r3, #150	; 0x96
   35ba4:	dc0a      	bgt.n	35bbc <__aeabi_ui2f+0x28>
   35ba6:	2296      	movs	r2, #150	; 0x96
   35ba8:	1ad2      	subs	r2, r2, r3
   35baa:	4094      	lsls	r4, r2
   35bac:	0264      	lsls	r4, r4, #9
   35bae:	0a64      	lsrs	r4, r4, #9
   35bb0:	b2db      	uxtb	r3, r3
   35bb2:	0264      	lsls	r4, r4, #9
   35bb4:	05db      	lsls	r3, r3, #23
   35bb6:	0a60      	lsrs	r0, r4, #9
   35bb8:	4318      	orrs	r0, r3
   35bba:	bd10      	pop	{r4, pc}
   35bbc:	2b99      	cmp	r3, #153	; 0x99
   35bbe:	dc17      	bgt.n	35bf0 <__aeabi_ui2f+0x5c>
   35bc0:	2299      	movs	r2, #153	; 0x99
   35bc2:	1ad2      	subs	r2, r2, r3
   35bc4:	2a00      	cmp	r2, #0
   35bc6:	dd27      	ble.n	35c18 <__aeabi_ui2f+0x84>
   35bc8:	4094      	lsls	r4, r2
   35bca:	0022      	movs	r2, r4
   35bcc:	4c13      	ldr	r4, [pc, #76]	; (35c1c <__aeabi_ui2f+0x88>)
   35bce:	4014      	ands	r4, r2
   35bd0:	0751      	lsls	r1, r2, #29
   35bd2:	d004      	beq.n	35bde <__aeabi_ui2f+0x4a>
   35bd4:	210f      	movs	r1, #15
   35bd6:	400a      	ands	r2, r1
   35bd8:	2a04      	cmp	r2, #4
   35bda:	d000      	beq.n	35bde <__aeabi_ui2f+0x4a>
   35bdc:	3404      	adds	r4, #4
   35bde:	0162      	lsls	r2, r4, #5
   35be0:	d412      	bmi.n	35c08 <__aeabi_ui2f+0x74>
   35be2:	01a4      	lsls	r4, r4, #6
   35be4:	0a64      	lsrs	r4, r4, #9
   35be6:	b2db      	uxtb	r3, r3
   35be8:	e7e3      	b.n	35bb2 <__aeabi_ui2f+0x1e>
   35bea:	2300      	movs	r3, #0
   35bec:	2400      	movs	r4, #0
   35bee:	e7e0      	b.n	35bb2 <__aeabi_ui2f+0x1e>
   35bf0:	22b9      	movs	r2, #185	; 0xb9
   35bf2:	0021      	movs	r1, r4
   35bf4:	1ad2      	subs	r2, r2, r3
   35bf6:	4091      	lsls	r1, r2
   35bf8:	000a      	movs	r2, r1
   35bfa:	1e51      	subs	r1, r2, #1
   35bfc:	418a      	sbcs	r2, r1
   35bfe:	2105      	movs	r1, #5
   35c00:	1a09      	subs	r1, r1, r0
   35c02:	40cc      	lsrs	r4, r1
   35c04:	4314      	orrs	r4, r2
   35c06:	e7db      	b.n	35bc0 <__aeabi_ui2f+0x2c>
   35c08:	4b04      	ldr	r3, [pc, #16]	; (35c1c <__aeabi_ui2f+0x88>)
   35c0a:	401c      	ands	r4, r3
   35c0c:	239f      	movs	r3, #159	; 0x9f
   35c0e:	01a4      	lsls	r4, r4, #6
   35c10:	1a1b      	subs	r3, r3, r0
   35c12:	0a64      	lsrs	r4, r4, #9
   35c14:	b2db      	uxtb	r3, r3
   35c16:	e7cc      	b.n	35bb2 <__aeabi_ui2f+0x1e>
   35c18:	0022      	movs	r2, r4
   35c1a:	e7d7      	b.n	35bcc <__aeabi_ui2f+0x38>
   35c1c:	fbffffff 	.word	0xfbffffff

00035c20 <__aeabi_dadd>:
   35c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35c22:	4645      	mov	r5, r8
   35c24:	46de      	mov	lr, fp
   35c26:	4657      	mov	r7, sl
   35c28:	464e      	mov	r6, r9
   35c2a:	030c      	lsls	r4, r1, #12
   35c2c:	b5e0      	push	{r5, r6, r7, lr}
   35c2e:	004e      	lsls	r6, r1, #1
   35c30:	0fc9      	lsrs	r1, r1, #31
   35c32:	4688      	mov	r8, r1
   35c34:	000d      	movs	r5, r1
   35c36:	0a61      	lsrs	r1, r4, #9
   35c38:	0f44      	lsrs	r4, r0, #29
   35c3a:	430c      	orrs	r4, r1
   35c3c:	00c7      	lsls	r7, r0, #3
   35c3e:	0319      	lsls	r1, r3, #12
   35c40:	0058      	lsls	r0, r3, #1
   35c42:	0fdb      	lsrs	r3, r3, #31
   35c44:	469b      	mov	fp, r3
   35c46:	0a4b      	lsrs	r3, r1, #9
   35c48:	0f51      	lsrs	r1, r2, #29
   35c4a:	430b      	orrs	r3, r1
   35c4c:	0d76      	lsrs	r6, r6, #21
   35c4e:	0d40      	lsrs	r0, r0, #21
   35c50:	0019      	movs	r1, r3
   35c52:	00d2      	lsls	r2, r2, #3
   35c54:	45d8      	cmp	r8, fp
   35c56:	d100      	bne.n	35c5a <__aeabi_dadd+0x3a>
   35c58:	e0ae      	b.n	35db8 <__aeabi_dadd+0x198>
   35c5a:	1a35      	subs	r5, r6, r0
   35c5c:	2d00      	cmp	r5, #0
   35c5e:	dc00      	bgt.n	35c62 <__aeabi_dadd+0x42>
   35c60:	e0f6      	b.n	35e50 <__aeabi_dadd+0x230>
   35c62:	2800      	cmp	r0, #0
   35c64:	d10f      	bne.n	35c86 <__aeabi_dadd+0x66>
   35c66:	4313      	orrs	r3, r2
   35c68:	d100      	bne.n	35c6c <__aeabi_dadd+0x4c>
   35c6a:	e0db      	b.n	35e24 <__aeabi_dadd+0x204>
   35c6c:	1e6b      	subs	r3, r5, #1
   35c6e:	2b00      	cmp	r3, #0
   35c70:	d000      	beq.n	35c74 <__aeabi_dadd+0x54>
   35c72:	e137      	b.n	35ee4 <__aeabi_dadd+0x2c4>
   35c74:	1aba      	subs	r2, r7, r2
   35c76:	4297      	cmp	r7, r2
   35c78:	41bf      	sbcs	r7, r7
   35c7a:	1a64      	subs	r4, r4, r1
   35c7c:	427f      	negs	r7, r7
   35c7e:	1be4      	subs	r4, r4, r7
   35c80:	2601      	movs	r6, #1
   35c82:	0017      	movs	r7, r2
   35c84:	e024      	b.n	35cd0 <__aeabi_dadd+0xb0>
   35c86:	4bc6      	ldr	r3, [pc, #792]	; (35fa0 <__aeabi_dadd+0x380>)
   35c88:	429e      	cmp	r6, r3
   35c8a:	d04d      	beq.n	35d28 <__aeabi_dadd+0x108>
   35c8c:	2380      	movs	r3, #128	; 0x80
   35c8e:	041b      	lsls	r3, r3, #16
   35c90:	4319      	orrs	r1, r3
   35c92:	2d38      	cmp	r5, #56	; 0x38
   35c94:	dd00      	ble.n	35c98 <__aeabi_dadd+0x78>
   35c96:	e107      	b.n	35ea8 <__aeabi_dadd+0x288>
   35c98:	2d1f      	cmp	r5, #31
   35c9a:	dd00      	ble.n	35c9e <__aeabi_dadd+0x7e>
   35c9c:	e138      	b.n	35f10 <__aeabi_dadd+0x2f0>
   35c9e:	2020      	movs	r0, #32
   35ca0:	1b43      	subs	r3, r0, r5
   35ca2:	469a      	mov	sl, r3
   35ca4:	000b      	movs	r3, r1
   35ca6:	4650      	mov	r0, sl
   35ca8:	4083      	lsls	r3, r0
   35caa:	4699      	mov	r9, r3
   35cac:	0013      	movs	r3, r2
   35cae:	4648      	mov	r0, r9
   35cb0:	40eb      	lsrs	r3, r5
   35cb2:	4318      	orrs	r0, r3
   35cb4:	0003      	movs	r3, r0
   35cb6:	4650      	mov	r0, sl
   35cb8:	4082      	lsls	r2, r0
   35cba:	1e50      	subs	r0, r2, #1
   35cbc:	4182      	sbcs	r2, r0
   35cbe:	40e9      	lsrs	r1, r5
   35cc0:	431a      	orrs	r2, r3
   35cc2:	1aba      	subs	r2, r7, r2
   35cc4:	1a61      	subs	r1, r4, r1
   35cc6:	4297      	cmp	r7, r2
   35cc8:	41a4      	sbcs	r4, r4
   35cca:	0017      	movs	r7, r2
   35ccc:	4264      	negs	r4, r4
   35cce:	1b0c      	subs	r4, r1, r4
   35cd0:	0223      	lsls	r3, r4, #8
   35cd2:	d562      	bpl.n	35d9a <__aeabi_dadd+0x17a>
   35cd4:	0264      	lsls	r4, r4, #9
   35cd6:	0a65      	lsrs	r5, r4, #9
   35cd8:	2d00      	cmp	r5, #0
   35cda:	d100      	bne.n	35cde <__aeabi_dadd+0xbe>
   35cdc:	e0df      	b.n	35e9e <__aeabi_dadd+0x27e>
   35cde:	0028      	movs	r0, r5
   35ce0:	f001 fce4 	bl	376ac <__clzsi2>
   35ce4:	0003      	movs	r3, r0
   35ce6:	3b08      	subs	r3, #8
   35ce8:	2b1f      	cmp	r3, #31
   35cea:	dd00      	ble.n	35cee <__aeabi_dadd+0xce>
   35cec:	e0d2      	b.n	35e94 <__aeabi_dadd+0x274>
   35cee:	2220      	movs	r2, #32
   35cf0:	003c      	movs	r4, r7
   35cf2:	1ad2      	subs	r2, r2, r3
   35cf4:	409d      	lsls	r5, r3
   35cf6:	40d4      	lsrs	r4, r2
   35cf8:	409f      	lsls	r7, r3
   35cfa:	4325      	orrs	r5, r4
   35cfc:	429e      	cmp	r6, r3
   35cfe:	dd00      	ble.n	35d02 <__aeabi_dadd+0xe2>
   35d00:	e0c4      	b.n	35e8c <__aeabi_dadd+0x26c>
   35d02:	1b9e      	subs	r6, r3, r6
   35d04:	1c73      	adds	r3, r6, #1
   35d06:	2b1f      	cmp	r3, #31
   35d08:	dd00      	ble.n	35d0c <__aeabi_dadd+0xec>
   35d0a:	e0f1      	b.n	35ef0 <__aeabi_dadd+0x2d0>
   35d0c:	2220      	movs	r2, #32
   35d0e:	0038      	movs	r0, r7
   35d10:	0029      	movs	r1, r5
   35d12:	1ad2      	subs	r2, r2, r3
   35d14:	40d8      	lsrs	r0, r3
   35d16:	4091      	lsls	r1, r2
   35d18:	4097      	lsls	r7, r2
   35d1a:	002c      	movs	r4, r5
   35d1c:	4301      	orrs	r1, r0
   35d1e:	1e78      	subs	r0, r7, #1
   35d20:	4187      	sbcs	r7, r0
   35d22:	40dc      	lsrs	r4, r3
   35d24:	2600      	movs	r6, #0
   35d26:	430f      	orrs	r7, r1
   35d28:	077b      	lsls	r3, r7, #29
   35d2a:	d009      	beq.n	35d40 <__aeabi_dadd+0x120>
   35d2c:	230f      	movs	r3, #15
   35d2e:	403b      	ands	r3, r7
   35d30:	2b04      	cmp	r3, #4
   35d32:	d005      	beq.n	35d40 <__aeabi_dadd+0x120>
   35d34:	1d3b      	adds	r3, r7, #4
   35d36:	42bb      	cmp	r3, r7
   35d38:	41bf      	sbcs	r7, r7
   35d3a:	427f      	negs	r7, r7
   35d3c:	19e4      	adds	r4, r4, r7
   35d3e:	001f      	movs	r7, r3
   35d40:	0223      	lsls	r3, r4, #8
   35d42:	d52c      	bpl.n	35d9e <__aeabi_dadd+0x17e>
   35d44:	4b96      	ldr	r3, [pc, #600]	; (35fa0 <__aeabi_dadd+0x380>)
   35d46:	3601      	adds	r6, #1
   35d48:	429e      	cmp	r6, r3
   35d4a:	d100      	bne.n	35d4e <__aeabi_dadd+0x12e>
   35d4c:	e09a      	b.n	35e84 <__aeabi_dadd+0x264>
   35d4e:	4645      	mov	r5, r8
   35d50:	4b94      	ldr	r3, [pc, #592]	; (35fa4 <__aeabi_dadd+0x384>)
   35d52:	08ff      	lsrs	r7, r7, #3
   35d54:	401c      	ands	r4, r3
   35d56:	0760      	lsls	r0, r4, #29
   35d58:	0576      	lsls	r6, r6, #21
   35d5a:	0264      	lsls	r4, r4, #9
   35d5c:	4307      	orrs	r7, r0
   35d5e:	0b24      	lsrs	r4, r4, #12
   35d60:	0d76      	lsrs	r6, r6, #21
   35d62:	2100      	movs	r1, #0
   35d64:	0324      	lsls	r4, r4, #12
   35d66:	0b23      	lsrs	r3, r4, #12
   35d68:	0d0c      	lsrs	r4, r1, #20
   35d6a:	4a8f      	ldr	r2, [pc, #572]	; (35fa8 <__aeabi_dadd+0x388>)
   35d6c:	0524      	lsls	r4, r4, #20
   35d6e:	431c      	orrs	r4, r3
   35d70:	4014      	ands	r4, r2
   35d72:	0533      	lsls	r3, r6, #20
   35d74:	4323      	orrs	r3, r4
   35d76:	005b      	lsls	r3, r3, #1
   35d78:	07ed      	lsls	r5, r5, #31
   35d7a:	085b      	lsrs	r3, r3, #1
   35d7c:	432b      	orrs	r3, r5
   35d7e:	0038      	movs	r0, r7
   35d80:	0019      	movs	r1, r3
   35d82:	bc3c      	pop	{r2, r3, r4, r5}
   35d84:	4690      	mov	r8, r2
   35d86:	4699      	mov	r9, r3
   35d88:	46a2      	mov	sl, r4
   35d8a:	46ab      	mov	fp, r5
   35d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35d8e:	4664      	mov	r4, ip
   35d90:	4304      	orrs	r4, r0
   35d92:	d100      	bne.n	35d96 <__aeabi_dadd+0x176>
   35d94:	e211      	b.n	361ba <__aeabi_dadd+0x59a>
   35d96:	0004      	movs	r4, r0
   35d98:	4667      	mov	r7, ip
   35d9a:	077b      	lsls	r3, r7, #29
   35d9c:	d1c6      	bne.n	35d2c <__aeabi_dadd+0x10c>
   35d9e:	4645      	mov	r5, r8
   35da0:	0760      	lsls	r0, r4, #29
   35da2:	08ff      	lsrs	r7, r7, #3
   35da4:	4307      	orrs	r7, r0
   35da6:	08e4      	lsrs	r4, r4, #3
   35da8:	4b7d      	ldr	r3, [pc, #500]	; (35fa0 <__aeabi_dadd+0x380>)
   35daa:	429e      	cmp	r6, r3
   35dac:	d030      	beq.n	35e10 <__aeabi_dadd+0x1f0>
   35dae:	0324      	lsls	r4, r4, #12
   35db0:	0576      	lsls	r6, r6, #21
   35db2:	0b24      	lsrs	r4, r4, #12
   35db4:	0d76      	lsrs	r6, r6, #21
   35db6:	e7d4      	b.n	35d62 <__aeabi_dadd+0x142>
   35db8:	1a33      	subs	r3, r6, r0
   35dba:	469a      	mov	sl, r3
   35dbc:	2b00      	cmp	r3, #0
   35dbe:	dd78      	ble.n	35eb2 <__aeabi_dadd+0x292>
   35dc0:	2800      	cmp	r0, #0
   35dc2:	d031      	beq.n	35e28 <__aeabi_dadd+0x208>
   35dc4:	4876      	ldr	r0, [pc, #472]	; (35fa0 <__aeabi_dadd+0x380>)
   35dc6:	4286      	cmp	r6, r0
   35dc8:	d0ae      	beq.n	35d28 <__aeabi_dadd+0x108>
   35dca:	2080      	movs	r0, #128	; 0x80
   35dcc:	0400      	lsls	r0, r0, #16
   35dce:	4301      	orrs	r1, r0
   35dd0:	4653      	mov	r3, sl
   35dd2:	2b38      	cmp	r3, #56	; 0x38
   35dd4:	dc00      	bgt.n	35dd8 <__aeabi_dadd+0x1b8>
   35dd6:	e0e9      	b.n	35fac <__aeabi_dadd+0x38c>
   35dd8:	430a      	orrs	r2, r1
   35dda:	1e51      	subs	r1, r2, #1
   35ddc:	418a      	sbcs	r2, r1
   35dde:	2100      	movs	r1, #0
   35de0:	19d2      	adds	r2, r2, r7
   35de2:	42ba      	cmp	r2, r7
   35de4:	41bf      	sbcs	r7, r7
   35de6:	1909      	adds	r1, r1, r4
   35de8:	427c      	negs	r4, r7
   35dea:	0017      	movs	r7, r2
   35dec:	190c      	adds	r4, r1, r4
   35dee:	0223      	lsls	r3, r4, #8
   35df0:	d5d3      	bpl.n	35d9a <__aeabi_dadd+0x17a>
   35df2:	4b6b      	ldr	r3, [pc, #428]	; (35fa0 <__aeabi_dadd+0x380>)
   35df4:	3601      	adds	r6, #1
   35df6:	429e      	cmp	r6, r3
   35df8:	d100      	bne.n	35dfc <__aeabi_dadd+0x1dc>
   35dfa:	e13a      	b.n	36072 <__aeabi_dadd+0x452>
   35dfc:	2001      	movs	r0, #1
   35dfe:	4b69      	ldr	r3, [pc, #420]	; (35fa4 <__aeabi_dadd+0x384>)
   35e00:	401c      	ands	r4, r3
   35e02:	087b      	lsrs	r3, r7, #1
   35e04:	4007      	ands	r7, r0
   35e06:	431f      	orrs	r7, r3
   35e08:	07e0      	lsls	r0, r4, #31
   35e0a:	4307      	orrs	r7, r0
   35e0c:	0864      	lsrs	r4, r4, #1
   35e0e:	e78b      	b.n	35d28 <__aeabi_dadd+0x108>
   35e10:	0023      	movs	r3, r4
   35e12:	433b      	orrs	r3, r7
   35e14:	d100      	bne.n	35e18 <__aeabi_dadd+0x1f8>
   35e16:	e1cb      	b.n	361b0 <__aeabi_dadd+0x590>
   35e18:	2280      	movs	r2, #128	; 0x80
   35e1a:	0312      	lsls	r2, r2, #12
   35e1c:	4314      	orrs	r4, r2
   35e1e:	0324      	lsls	r4, r4, #12
   35e20:	0b24      	lsrs	r4, r4, #12
   35e22:	e79e      	b.n	35d62 <__aeabi_dadd+0x142>
   35e24:	002e      	movs	r6, r5
   35e26:	e77f      	b.n	35d28 <__aeabi_dadd+0x108>
   35e28:	0008      	movs	r0, r1
   35e2a:	4310      	orrs	r0, r2
   35e2c:	d100      	bne.n	35e30 <__aeabi_dadd+0x210>
   35e2e:	e0b4      	b.n	35f9a <__aeabi_dadd+0x37a>
   35e30:	1e58      	subs	r0, r3, #1
   35e32:	2800      	cmp	r0, #0
   35e34:	d000      	beq.n	35e38 <__aeabi_dadd+0x218>
   35e36:	e0de      	b.n	35ff6 <__aeabi_dadd+0x3d6>
   35e38:	18ba      	adds	r2, r7, r2
   35e3a:	42ba      	cmp	r2, r7
   35e3c:	419b      	sbcs	r3, r3
   35e3e:	1864      	adds	r4, r4, r1
   35e40:	425b      	negs	r3, r3
   35e42:	18e4      	adds	r4, r4, r3
   35e44:	0017      	movs	r7, r2
   35e46:	2601      	movs	r6, #1
   35e48:	0223      	lsls	r3, r4, #8
   35e4a:	d5a6      	bpl.n	35d9a <__aeabi_dadd+0x17a>
   35e4c:	2602      	movs	r6, #2
   35e4e:	e7d5      	b.n	35dfc <__aeabi_dadd+0x1dc>
   35e50:	2d00      	cmp	r5, #0
   35e52:	d16e      	bne.n	35f32 <__aeabi_dadd+0x312>
   35e54:	1c70      	adds	r0, r6, #1
   35e56:	0540      	lsls	r0, r0, #21
   35e58:	0d40      	lsrs	r0, r0, #21
   35e5a:	2801      	cmp	r0, #1
   35e5c:	dc00      	bgt.n	35e60 <__aeabi_dadd+0x240>
   35e5e:	e0f9      	b.n	36054 <__aeabi_dadd+0x434>
   35e60:	1ab8      	subs	r0, r7, r2
   35e62:	4684      	mov	ip, r0
   35e64:	4287      	cmp	r7, r0
   35e66:	4180      	sbcs	r0, r0
   35e68:	1ae5      	subs	r5, r4, r3
   35e6a:	4240      	negs	r0, r0
   35e6c:	1a2d      	subs	r5, r5, r0
   35e6e:	0228      	lsls	r0, r5, #8
   35e70:	d400      	bmi.n	35e74 <__aeabi_dadd+0x254>
   35e72:	e089      	b.n	35f88 <__aeabi_dadd+0x368>
   35e74:	1bd7      	subs	r7, r2, r7
   35e76:	42ba      	cmp	r2, r7
   35e78:	4192      	sbcs	r2, r2
   35e7a:	1b1c      	subs	r4, r3, r4
   35e7c:	4252      	negs	r2, r2
   35e7e:	1aa5      	subs	r5, r4, r2
   35e80:	46d8      	mov	r8, fp
   35e82:	e729      	b.n	35cd8 <__aeabi_dadd+0xb8>
   35e84:	4645      	mov	r5, r8
   35e86:	2400      	movs	r4, #0
   35e88:	2700      	movs	r7, #0
   35e8a:	e76a      	b.n	35d62 <__aeabi_dadd+0x142>
   35e8c:	4c45      	ldr	r4, [pc, #276]	; (35fa4 <__aeabi_dadd+0x384>)
   35e8e:	1af6      	subs	r6, r6, r3
   35e90:	402c      	ands	r4, r5
   35e92:	e749      	b.n	35d28 <__aeabi_dadd+0x108>
   35e94:	003d      	movs	r5, r7
   35e96:	3828      	subs	r0, #40	; 0x28
   35e98:	4085      	lsls	r5, r0
   35e9a:	2700      	movs	r7, #0
   35e9c:	e72e      	b.n	35cfc <__aeabi_dadd+0xdc>
   35e9e:	0038      	movs	r0, r7
   35ea0:	f001 fc04 	bl	376ac <__clzsi2>
   35ea4:	3020      	adds	r0, #32
   35ea6:	e71d      	b.n	35ce4 <__aeabi_dadd+0xc4>
   35ea8:	430a      	orrs	r2, r1
   35eaa:	1e51      	subs	r1, r2, #1
   35eac:	418a      	sbcs	r2, r1
   35eae:	2100      	movs	r1, #0
   35eb0:	e707      	b.n	35cc2 <__aeabi_dadd+0xa2>
   35eb2:	2b00      	cmp	r3, #0
   35eb4:	d000      	beq.n	35eb8 <__aeabi_dadd+0x298>
   35eb6:	e0f3      	b.n	360a0 <__aeabi_dadd+0x480>
   35eb8:	1c70      	adds	r0, r6, #1
   35eba:	0543      	lsls	r3, r0, #21
   35ebc:	0d5b      	lsrs	r3, r3, #21
   35ebe:	2b01      	cmp	r3, #1
   35ec0:	dc00      	bgt.n	35ec4 <__aeabi_dadd+0x2a4>
   35ec2:	e0ad      	b.n	36020 <__aeabi_dadd+0x400>
   35ec4:	4b36      	ldr	r3, [pc, #216]	; (35fa0 <__aeabi_dadd+0x380>)
   35ec6:	4298      	cmp	r0, r3
   35ec8:	d100      	bne.n	35ecc <__aeabi_dadd+0x2ac>
   35eca:	e0d1      	b.n	36070 <__aeabi_dadd+0x450>
   35ecc:	18ba      	adds	r2, r7, r2
   35ece:	42ba      	cmp	r2, r7
   35ed0:	41bf      	sbcs	r7, r7
   35ed2:	1864      	adds	r4, r4, r1
   35ed4:	427f      	negs	r7, r7
   35ed6:	19e4      	adds	r4, r4, r7
   35ed8:	07e7      	lsls	r7, r4, #31
   35eda:	0852      	lsrs	r2, r2, #1
   35edc:	4317      	orrs	r7, r2
   35ede:	0864      	lsrs	r4, r4, #1
   35ee0:	0006      	movs	r6, r0
   35ee2:	e721      	b.n	35d28 <__aeabi_dadd+0x108>
   35ee4:	482e      	ldr	r0, [pc, #184]	; (35fa0 <__aeabi_dadd+0x380>)
   35ee6:	4285      	cmp	r5, r0
   35ee8:	d100      	bne.n	35eec <__aeabi_dadd+0x2cc>
   35eea:	e093      	b.n	36014 <__aeabi_dadd+0x3f4>
   35eec:	001d      	movs	r5, r3
   35eee:	e6d0      	b.n	35c92 <__aeabi_dadd+0x72>
   35ef0:	0029      	movs	r1, r5
   35ef2:	3e1f      	subs	r6, #31
   35ef4:	40f1      	lsrs	r1, r6
   35ef6:	2b20      	cmp	r3, #32
   35ef8:	d100      	bne.n	35efc <__aeabi_dadd+0x2dc>
   35efa:	e08d      	b.n	36018 <__aeabi_dadd+0x3f8>
   35efc:	2240      	movs	r2, #64	; 0x40
   35efe:	1ad3      	subs	r3, r2, r3
   35f00:	409d      	lsls	r5, r3
   35f02:	432f      	orrs	r7, r5
   35f04:	1e7d      	subs	r5, r7, #1
   35f06:	41af      	sbcs	r7, r5
   35f08:	2400      	movs	r4, #0
   35f0a:	430f      	orrs	r7, r1
   35f0c:	2600      	movs	r6, #0
   35f0e:	e744      	b.n	35d9a <__aeabi_dadd+0x17a>
   35f10:	002b      	movs	r3, r5
   35f12:	0008      	movs	r0, r1
   35f14:	3b20      	subs	r3, #32
   35f16:	40d8      	lsrs	r0, r3
   35f18:	0003      	movs	r3, r0
   35f1a:	2d20      	cmp	r5, #32
   35f1c:	d100      	bne.n	35f20 <__aeabi_dadd+0x300>
   35f1e:	e07d      	b.n	3601c <__aeabi_dadd+0x3fc>
   35f20:	2040      	movs	r0, #64	; 0x40
   35f22:	1b45      	subs	r5, r0, r5
   35f24:	40a9      	lsls	r1, r5
   35f26:	430a      	orrs	r2, r1
   35f28:	1e51      	subs	r1, r2, #1
   35f2a:	418a      	sbcs	r2, r1
   35f2c:	2100      	movs	r1, #0
   35f2e:	431a      	orrs	r2, r3
   35f30:	e6c7      	b.n	35cc2 <__aeabi_dadd+0xa2>
   35f32:	2e00      	cmp	r6, #0
   35f34:	d050      	beq.n	35fd8 <__aeabi_dadd+0x3b8>
   35f36:	4e1a      	ldr	r6, [pc, #104]	; (35fa0 <__aeabi_dadd+0x380>)
   35f38:	42b0      	cmp	r0, r6
   35f3a:	d057      	beq.n	35fec <__aeabi_dadd+0x3cc>
   35f3c:	2680      	movs	r6, #128	; 0x80
   35f3e:	426b      	negs	r3, r5
   35f40:	4699      	mov	r9, r3
   35f42:	0436      	lsls	r6, r6, #16
   35f44:	4334      	orrs	r4, r6
   35f46:	464b      	mov	r3, r9
   35f48:	2b38      	cmp	r3, #56	; 0x38
   35f4a:	dd00      	ble.n	35f4e <__aeabi_dadd+0x32e>
   35f4c:	e0d6      	b.n	360fc <__aeabi_dadd+0x4dc>
   35f4e:	2b1f      	cmp	r3, #31
   35f50:	dd00      	ble.n	35f54 <__aeabi_dadd+0x334>
   35f52:	e135      	b.n	361c0 <__aeabi_dadd+0x5a0>
   35f54:	2620      	movs	r6, #32
   35f56:	1af5      	subs	r5, r6, r3
   35f58:	0026      	movs	r6, r4
   35f5a:	40ae      	lsls	r6, r5
   35f5c:	46b2      	mov	sl, r6
   35f5e:	003e      	movs	r6, r7
   35f60:	40de      	lsrs	r6, r3
   35f62:	46ac      	mov	ip, r5
   35f64:	0035      	movs	r5, r6
   35f66:	4656      	mov	r6, sl
   35f68:	432e      	orrs	r6, r5
   35f6a:	4665      	mov	r5, ip
   35f6c:	40af      	lsls	r7, r5
   35f6e:	1e7d      	subs	r5, r7, #1
   35f70:	41af      	sbcs	r7, r5
   35f72:	40dc      	lsrs	r4, r3
   35f74:	4337      	orrs	r7, r6
   35f76:	1bd7      	subs	r7, r2, r7
   35f78:	42ba      	cmp	r2, r7
   35f7a:	4192      	sbcs	r2, r2
   35f7c:	1b0c      	subs	r4, r1, r4
   35f7e:	4252      	negs	r2, r2
   35f80:	1aa4      	subs	r4, r4, r2
   35f82:	0006      	movs	r6, r0
   35f84:	46d8      	mov	r8, fp
   35f86:	e6a3      	b.n	35cd0 <__aeabi_dadd+0xb0>
   35f88:	4664      	mov	r4, ip
   35f8a:	4667      	mov	r7, ip
   35f8c:	432c      	orrs	r4, r5
   35f8e:	d000      	beq.n	35f92 <__aeabi_dadd+0x372>
   35f90:	e6a2      	b.n	35cd8 <__aeabi_dadd+0xb8>
   35f92:	2500      	movs	r5, #0
   35f94:	2600      	movs	r6, #0
   35f96:	2700      	movs	r7, #0
   35f98:	e706      	b.n	35da8 <__aeabi_dadd+0x188>
   35f9a:	001e      	movs	r6, r3
   35f9c:	e6c4      	b.n	35d28 <__aeabi_dadd+0x108>
   35f9e:	46c0      	nop			; (mov r8, r8)
   35fa0:	000007ff 	.word	0x000007ff
   35fa4:	ff7fffff 	.word	0xff7fffff
   35fa8:	800fffff 	.word	0x800fffff
   35fac:	2b1f      	cmp	r3, #31
   35fae:	dc63      	bgt.n	36078 <__aeabi_dadd+0x458>
   35fb0:	2020      	movs	r0, #32
   35fb2:	1ac3      	subs	r3, r0, r3
   35fb4:	0008      	movs	r0, r1
   35fb6:	4098      	lsls	r0, r3
   35fb8:	469c      	mov	ip, r3
   35fba:	4683      	mov	fp, r0
   35fbc:	4653      	mov	r3, sl
   35fbe:	0010      	movs	r0, r2
   35fc0:	40d8      	lsrs	r0, r3
   35fc2:	0003      	movs	r3, r0
   35fc4:	4658      	mov	r0, fp
   35fc6:	4318      	orrs	r0, r3
   35fc8:	4663      	mov	r3, ip
   35fca:	409a      	lsls	r2, r3
   35fcc:	1e53      	subs	r3, r2, #1
   35fce:	419a      	sbcs	r2, r3
   35fd0:	4653      	mov	r3, sl
   35fd2:	4302      	orrs	r2, r0
   35fd4:	40d9      	lsrs	r1, r3
   35fd6:	e703      	b.n	35de0 <__aeabi_dadd+0x1c0>
   35fd8:	0026      	movs	r6, r4
   35fda:	433e      	orrs	r6, r7
   35fdc:	d006      	beq.n	35fec <__aeabi_dadd+0x3cc>
   35fde:	43eb      	mvns	r3, r5
   35fe0:	4699      	mov	r9, r3
   35fe2:	2b00      	cmp	r3, #0
   35fe4:	d0c7      	beq.n	35f76 <__aeabi_dadd+0x356>
   35fe6:	4e94      	ldr	r6, [pc, #592]	; (36238 <__aeabi_dadd+0x618>)
   35fe8:	42b0      	cmp	r0, r6
   35fea:	d1ac      	bne.n	35f46 <__aeabi_dadd+0x326>
   35fec:	000c      	movs	r4, r1
   35fee:	0017      	movs	r7, r2
   35ff0:	0006      	movs	r6, r0
   35ff2:	46d8      	mov	r8, fp
   35ff4:	e698      	b.n	35d28 <__aeabi_dadd+0x108>
   35ff6:	4b90      	ldr	r3, [pc, #576]	; (36238 <__aeabi_dadd+0x618>)
   35ff8:	459a      	cmp	sl, r3
   35ffa:	d00b      	beq.n	36014 <__aeabi_dadd+0x3f4>
   35ffc:	4682      	mov	sl, r0
   35ffe:	e6e7      	b.n	35dd0 <__aeabi_dadd+0x1b0>
   36000:	2800      	cmp	r0, #0
   36002:	d000      	beq.n	36006 <__aeabi_dadd+0x3e6>
   36004:	e09e      	b.n	36144 <__aeabi_dadd+0x524>
   36006:	0018      	movs	r0, r3
   36008:	4310      	orrs	r0, r2
   3600a:	d100      	bne.n	3600e <__aeabi_dadd+0x3ee>
   3600c:	e0e9      	b.n	361e2 <__aeabi_dadd+0x5c2>
   3600e:	001c      	movs	r4, r3
   36010:	0017      	movs	r7, r2
   36012:	46d8      	mov	r8, fp
   36014:	4e88      	ldr	r6, [pc, #544]	; (36238 <__aeabi_dadd+0x618>)
   36016:	e687      	b.n	35d28 <__aeabi_dadd+0x108>
   36018:	2500      	movs	r5, #0
   3601a:	e772      	b.n	35f02 <__aeabi_dadd+0x2e2>
   3601c:	2100      	movs	r1, #0
   3601e:	e782      	b.n	35f26 <__aeabi_dadd+0x306>
   36020:	0023      	movs	r3, r4
   36022:	433b      	orrs	r3, r7
   36024:	2e00      	cmp	r6, #0
   36026:	d000      	beq.n	3602a <__aeabi_dadd+0x40a>
   36028:	e0ab      	b.n	36182 <__aeabi_dadd+0x562>
   3602a:	2b00      	cmp	r3, #0
   3602c:	d100      	bne.n	36030 <__aeabi_dadd+0x410>
   3602e:	e0e7      	b.n	36200 <__aeabi_dadd+0x5e0>
   36030:	000b      	movs	r3, r1
   36032:	4313      	orrs	r3, r2
   36034:	d100      	bne.n	36038 <__aeabi_dadd+0x418>
   36036:	e677      	b.n	35d28 <__aeabi_dadd+0x108>
   36038:	18ba      	adds	r2, r7, r2
   3603a:	42ba      	cmp	r2, r7
   3603c:	41bf      	sbcs	r7, r7
   3603e:	1864      	adds	r4, r4, r1
   36040:	427f      	negs	r7, r7
   36042:	19e4      	adds	r4, r4, r7
   36044:	0223      	lsls	r3, r4, #8
   36046:	d400      	bmi.n	3604a <__aeabi_dadd+0x42a>
   36048:	e0f2      	b.n	36230 <__aeabi_dadd+0x610>
   3604a:	4b7c      	ldr	r3, [pc, #496]	; (3623c <__aeabi_dadd+0x61c>)
   3604c:	0017      	movs	r7, r2
   3604e:	401c      	ands	r4, r3
   36050:	0006      	movs	r6, r0
   36052:	e669      	b.n	35d28 <__aeabi_dadd+0x108>
   36054:	0020      	movs	r0, r4
   36056:	4338      	orrs	r0, r7
   36058:	2e00      	cmp	r6, #0
   3605a:	d1d1      	bne.n	36000 <__aeabi_dadd+0x3e0>
   3605c:	2800      	cmp	r0, #0
   3605e:	d15b      	bne.n	36118 <__aeabi_dadd+0x4f8>
   36060:	001c      	movs	r4, r3
   36062:	4314      	orrs	r4, r2
   36064:	d100      	bne.n	36068 <__aeabi_dadd+0x448>
   36066:	e0a8      	b.n	361ba <__aeabi_dadd+0x59a>
   36068:	001c      	movs	r4, r3
   3606a:	0017      	movs	r7, r2
   3606c:	46d8      	mov	r8, fp
   3606e:	e65b      	b.n	35d28 <__aeabi_dadd+0x108>
   36070:	0006      	movs	r6, r0
   36072:	2400      	movs	r4, #0
   36074:	2700      	movs	r7, #0
   36076:	e697      	b.n	35da8 <__aeabi_dadd+0x188>
   36078:	4650      	mov	r0, sl
   3607a:	000b      	movs	r3, r1
   3607c:	3820      	subs	r0, #32
   3607e:	40c3      	lsrs	r3, r0
   36080:	4699      	mov	r9, r3
   36082:	4653      	mov	r3, sl
   36084:	2b20      	cmp	r3, #32
   36086:	d100      	bne.n	3608a <__aeabi_dadd+0x46a>
   36088:	e095      	b.n	361b6 <__aeabi_dadd+0x596>
   3608a:	2340      	movs	r3, #64	; 0x40
   3608c:	4650      	mov	r0, sl
   3608e:	1a1b      	subs	r3, r3, r0
   36090:	4099      	lsls	r1, r3
   36092:	430a      	orrs	r2, r1
   36094:	1e51      	subs	r1, r2, #1
   36096:	418a      	sbcs	r2, r1
   36098:	464b      	mov	r3, r9
   3609a:	2100      	movs	r1, #0
   3609c:	431a      	orrs	r2, r3
   3609e:	e69f      	b.n	35de0 <__aeabi_dadd+0x1c0>
   360a0:	2e00      	cmp	r6, #0
   360a2:	d130      	bne.n	36106 <__aeabi_dadd+0x4e6>
   360a4:	0026      	movs	r6, r4
   360a6:	433e      	orrs	r6, r7
   360a8:	d067      	beq.n	3617a <__aeabi_dadd+0x55a>
   360aa:	43db      	mvns	r3, r3
   360ac:	469a      	mov	sl, r3
   360ae:	2b00      	cmp	r3, #0
   360b0:	d01c      	beq.n	360ec <__aeabi_dadd+0x4cc>
   360b2:	4e61      	ldr	r6, [pc, #388]	; (36238 <__aeabi_dadd+0x618>)
   360b4:	42b0      	cmp	r0, r6
   360b6:	d060      	beq.n	3617a <__aeabi_dadd+0x55a>
   360b8:	4653      	mov	r3, sl
   360ba:	2b38      	cmp	r3, #56	; 0x38
   360bc:	dd00      	ble.n	360c0 <__aeabi_dadd+0x4a0>
   360be:	e096      	b.n	361ee <__aeabi_dadd+0x5ce>
   360c0:	2b1f      	cmp	r3, #31
   360c2:	dd00      	ble.n	360c6 <__aeabi_dadd+0x4a6>
   360c4:	e09f      	b.n	36206 <__aeabi_dadd+0x5e6>
   360c6:	2620      	movs	r6, #32
   360c8:	1af3      	subs	r3, r6, r3
   360ca:	0026      	movs	r6, r4
   360cc:	409e      	lsls	r6, r3
   360ce:	469c      	mov	ip, r3
   360d0:	46b3      	mov	fp, r6
   360d2:	4653      	mov	r3, sl
   360d4:	003e      	movs	r6, r7
   360d6:	40de      	lsrs	r6, r3
   360d8:	0033      	movs	r3, r6
   360da:	465e      	mov	r6, fp
   360dc:	431e      	orrs	r6, r3
   360de:	4663      	mov	r3, ip
   360e0:	409f      	lsls	r7, r3
   360e2:	1e7b      	subs	r3, r7, #1
   360e4:	419f      	sbcs	r7, r3
   360e6:	4653      	mov	r3, sl
   360e8:	40dc      	lsrs	r4, r3
   360ea:	4337      	orrs	r7, r6
   360ec:	18bf      	adds	r7, r7, r2
   360ee:	4297      	cmp	r7, r2
   360f0:	4192      	sbcs	r2, r2
   360f2:	1864      	adds	r4, r4, r1
   360f4:	4252      	negs	r2, r2
   360f6:	18a4      	adds	r4, r4, r2
   360f8:	0006      	movs	r6, r0
   360fa:	e678      	b.n	35dee <__aeabi_dadd+0x1ce>
   360fc:	4327      	orrs	r7, r4
   360fe:	1e7c      	subs	r4, r7, #1
   36100:	41a7      	sbcs	r7, r4
   36102:	2400      	movs	r4, #0
   36104:	e737      	b.n	35f76 <__aeabi_dadd+0x356>
   36106:	4e4c      	ldr	r6, [pc, #304]	; (36238 <__aeabi_dadd+0x618>)
   36108:	42b0      	cmp	r0, r6
   3610a:	d036      	beq.n	3617a <__aeabi_dadd+0x55a>
   3610c:	2680      	movs	r6, #128	; 0x80
   3610e:	425b      	negs	r3, r3
   36110:	0436      	lsls	r6, r6, #16
   36112:	469a      	mov	sl, r3
   36114:	4334      	orrs	r4, r6
   36116:	e7cf      	b.n	360b8 <__aeabi_dadd+0x498>
   36118:	0018      	movs	r0, r3
   3611a:	4310      	orrs	r0, r2
   3611c:	d100      	bne.n	36120 <__aeabi_dadd+0x500>
   3611e:	e603      	b.n	35d28 <__aeabi_dadd+0x108>
   36120:	1ab8      	subs	r0, r7, r2
   36122:	4684      	mov	ip, r0
   36124:	4567      	cmp	r7, ip
   36126:	41ad      	sbcs	r5, r5
   36128:	1ae0      	subs	r0, r4, r3
   3612a:	426d      	negs	r5, r5
   3612c:	1b40      	subs	r0, r0, r5
   3612e:	0205      	lsls	r5, r0, #8
   36130:	d400      	bmi.n	36134 <__aeabi_dadd+0x514>
   36132:	e62c      	b.n	35d8e <__aeabi_dadd+0x16e>
   36134:	1bd7      	subs	r7, r2, r7
   36136:	42ba      	cmp	r2, r7
   36138:	4192      	sbcs	r2, r2
   3613a:	1b1c      	subs	r4, r3, r4
   3613c:	4252      	negs	r2, r2
   3613e:	1aa4      	subs	r4, r4, r2
   36140:	46d8      	mov	r8, fp
   36142:	e5f1      	b.n	35d28 <__aeabi_dadd+0x108>
   36144:	0018      	movs	r0, r3
   36146:	4310      	orrs	r0, r2
   36148:	d100      	bne.n	3614c <__aeabi_dadd+0x52c>
   3614a:	e763      	b.n	36014 <__aeabi_dadd+0x3f4>
   3614c:	08f8      	lsrs	r0, r7, #3
   3614e:	0767      	lsls	r7, r4, #29
   36150:	4307      	orrs	r7, r0
   36152:	2080      	movs	r0, #128	; 0x80
   36154:	08e4      	lsrs	r4, r4, #3
   36156:	0300      	lsls	r0, r0, #12
   36158:	4204      	tst	r4, r0
   3615a:	d008      	beq.n	3616e <__aeabi_dadd+0x54e>
   3615c:	08dd      	lsrs	r5, r3, #3
   3615e:	4205      	tst	r5, r0
   36160:	d105      	bne.n	3616e <__aeabi_dadd+0x54e>
   36162:	08d2      	lsrs	r2, r2, #3
   36164:	0759      	lsls	r1, r3, #29
   36166:	4311      	orrs	r1, r2
   36168:	000f      	movs	r7, r1
   3616a:	002c      	movs	r4, r5
   3616c:	46d8      	mov	r8, fp
   3616e:	0f7b      	lsrs	r3, r7, #29
   36170:	00e4      	lsls	r4, r4, #3
   36172:	431c      	orrs	r4, r3
   36174:	00ff      	lsls	r7, r7, #3
   36176:	4e30      	ldr	r6, [pc, #192]	; (36238 <__aeabi_dadd+0x618>)
   36178:	e5d6      	b.n	35d28 <__aeabi_dadd+0x108>
   3617a:	000c      	movs	r4, r1
   3617c:	0017      	movs	r7, r2
   3617e:	0006      	movs	r6, r0
   36180:	e5d2      	b.n	35d28 <__aeabi_dadd+0x108>
   36182:	2b00      	cmp	r3, #0
   36184:	d038      	beq.n	361f8 <__aeabi_dadd+0x5d8>
   36186:	000b      	movs	r3, r1
   36188:	4313      	orrs	r3, r2
   3618a:	d100      	bne.n	3618e <__aeabi_dadd+0x56e>
   3618c:	e742      	b.n	36014 <__aeabi_dadd+0x3f4>
   3618e:	08f8      	lsrs	r0, r7, #3
   36190:	0767      	lsls	r7, r4, #29
   36192:	4307      	orrs	r7, r0
   36194:	2080      	movs	r0, #128	; 0x80
   36196:	08e4      	lsrs	r4, r4, #3
   36198:	0300      	lsls	r0, r0, #12
   3619a:	4204      	tst	r4, r0
   3619c:	d0e7      	beq.n	3616e <__aeabi_dadd+0x54e>
   3619e:	08cb      	lsrs	r3, r1, #3
   361a0:	4203      	tst	r3, r0
   361a2:	d1e4      	bne.n	3616e <__aeabi_dadd+0x54e>
   361a4:	08d2      	lsrs	r2, r2, #3
   361a6:	0749      	lsls	r1, r1, #29
   361a8:	4311      	orrs	r1, r2
   361aa:	000f      	movs	r7, r1
   361ac:	001c      	movs	r4, r3
   361ae:	e7de      	b.n	3616e <__aeabi_dadd+0x54e>
   361b0:	2700      	movs	r7, #0
   361b2:	2400      	movs	r4, #0
   361b4:	e5d5      	b.n	35d62 <__aeabi_dadd+0x142>
   361b6:	2100      	movs	r1, #0
   361b8:	e76b      	b.n	36092 <__aeabi_dadd+0x472>
   361ba:	2500      	movs	r5, #0
   361bc:	2700      	movs	r7, #0
   361be:	e5f3      	b.n	35da8 <__aeabi_dadd+0x188>
   361c0:	464e      	mov	r6, r9
   361c2:	0025      	movs	r5, r4
   361c4:	3e20      	subs	r6, #32
   361c6:	40f5      	lsrs	r5, r6
   361c8:	464b      	mov	r3, r9
   361ca:	002e      	movs	r6, r5
   361cc:	2b20      	cmp	r3, #32
   361ce:	d02d      	beq.n	3622c <__aeabi_dadd+0x60c>
   361d0:	2540      	movs	r5, #64	; 0x40
   361d2:	1aed      	subs	r5, r5, r3
   361d4:	40ac      	lsls	r4, r5
   361d6:	4327      	orrs	r7, r4
   361d8:	1e7c      	subs	r4, r7, #1
   361da:	41a7      	sbcs	r7, r4
   361dc:	2400      	movs	r4, #0
   361de:	4337      	orrs	r7, r6
   361e0:	e6c9      	b.n	35f76 <__aeabi_dadd+0x356>
   361e2:	2480      	movs	r4, #128	; 0x80
   361e4:	2500      	movs	r5, #0
   361e6:	0324      	lsls	r4, r4, #12
   361e8:	4e13      	ldr	r6, [pc, #76]	; (36238 <__aeabi_dadd+0x618>)
   361ea:	2700      	movs	r7, #0
   361ec:	e5dc      	b.n	35da8 <__aeabi_dadd+0x188>
   361ee:	4327      	orrs	r7, r4
   361f0:	1e7c      	subs	r4, r7, #1
   361f2:	41a7      	sbcs	r7, r4
   361f4:	2400      	movs	r4, #0
   361f6:	e779      	b.n	360ec <__aeabi_dadd+0x4cc>
   361f8:	000c      	movs	r4, r1
   361fa:	0017      	movs	r7, r2
   361fc:	4e0e      	ldr	r6, [pc, #56]	; (36238 <__aeabi_dadd+0x618>)
   361fe:	e593      	b.n	35d28 <__aeabi_dadd+0x108>
   36200:	000c      	movs	r4, r1
   36202:	0017      	movs	r7, r2
   36204:	e590      	b.n	35d28 <__aeabi_dadd+0x108>
   36206:	4656      	mov	r6, sl
   36208:	0023      	movs	r3, r4
   3620a:	3e20      	subs	r6, #32
   3620c:	40f3      	lsrs	r3, r6
   3620e:	4699      	mov	r9, r3
   36210:	4653      	mov	r3, sl
   36212:	2b20      	cmp	r3, #32
   36214:	d00e      	beq.n	36234 <__aeabi_dadd+0x614>
   36216:	2340      	movs	r3, #64	; 0x40
   36218:	4656      	mov	r6, sl
   3621a:	1b9b      	subs	r3, r3, r6
   3621c:	409c      	lsls	r4, r3
   3621e:	4327      	orrs	r7, r4
   36220:	1e7c      	subs	r4, r7, #1
   36222:	41a7      	sbcs	r7, r4
   36224:	464b      	mov	r3, r9
   36226:	2400      	movs	r4, #0
   36228:	431f      	orrs	r7, r3
   3622a:	e75f      	b.n	360ec <__aeabi_dadd+0x4cc>
   3622c:	2400      	movs	r4, #0
   3622e:	e7d2      	b.n	361d6 <__aeabi_dadd+0x5b6>
   36230:	0017      	movs	r7, r2
   36232:	e5b2      	b.n	35d9a <__aeabi_dadd+0x17a>
   36234:	2400      	movs	r4, #0
   36236:	e7f2      	b.n	3621e <__aeabi_dadd+0x5fe>
   36238:	000007ff 	.word	0x000007ff
   3623c:	ff7fffff 	.word	0xff7fffff

00036240 <__aeabi_ddiv>:
   36240:	b5f0      	push	{r4, r5, r6, r7, lr}
   36242:	4657      	mov	r7, sl
   36244:	4645      	mov	r5, r8
   36246:	46de      	mov	lr, fp
   36248:	464e      	mov	r6, r9
   3624a:	b5e0      	push	{r5, r6, r7, lr}
   3624c:	004c      	lsls	r4, r1, #1
   3624e:	030e      	lsls	r6, r1, #12
   36250:	b087      	sub	sp, #28
   36252:	4683      	mov	fp, r0
   36254:	4692      	mov	sl, r2
   36256:	001d      	movs	r5, r3
   36258:	4680      	mov	r8, r0
   3625a:	0b36      	lsrs	r6, r6, #12
   3625c:	0d64      	lsrs	r4, r4, #21
   3625e:	0fcf      	lsrs	r7, r1, #31
   36260:	2c00      	cmp	r4, #0
   36262:	d04f      	beq.n	36304 <__aeabi_ddiv+0xc4>
   36264:	4b6f      	ldr	r3, [pc, #444]	; (36424 <__aeabi_ddiv+0x1e4>)
   36266:	429c      	cmp	r4, r3
   36268:	d035      	beq.n	362d6 <__aeabi_ddiv+0x96>
   3626a:	2380      	movs	r3, #128	; 0x80
   3626c:	0f42      	lsrs	r2, r0, #29
   3626e:	041b      	lsls	r3, r3, #16
   36270:	00f6      	lsls	r6, r6, #3
   36272:	4313      	orrs	r3, r2
   36274:	4333      	orrs	r3, r6
   36276:	4699      	mov	r9, r3
   36278:	00c3      	lsls	r3, r0, #3
   3627a:	4698      	mov	r8, r3
   3627c:	4b6a      	ldr	r3, [pc, #424]	; (36428 <__aeabi_ddiv+0x1e8>)
   3627e:	2600      	movs	r6, #0
   36280:	469c      	mov	ip, r3
   36282:	2300      	movs	r3, #0
   36284:	4464      	add	r4, ip
   36286:	9303      	str	r3, [sp, #12]
   36288:	032b      	lsls	r3, r5, #12
   3628a:	0b1b      	lsrs	r3, r3, #12
   3628c:	469b      	mov	fp, r3
   3628e:	006b      	lsls	r3, r5, #1
   36290:	0fed      	lsrs	r5, r5, #31
   36292:	4650      	mov	r0, sl
   36294:	0d5b      	lsrs	r3, r3, #21
   36296:	9501      	str	r5, [sp, #4]
   36298:	d05e      	beq.n	36358 <__aeabi_ddiv+0x118>
   3629a:	4a62      	ldr	r2, [pc, #392]	; (36424 <__aeabi_ddiv+0x1e4>)
   3629c:	4293      	cmp	r3, r2
   3629e:	d053      	beq.n	36348 <__aeabi_ddiv+0x108>
   362a0:	465a      	mov	r2, fp
   362a2:	00d1      	lsls	r1, r2, #3
   362a4:	2280      	movs	r2, #128	; 0x80
   362a6:	0f40      	lsrs	r0, r0, #29
   362a8:	0412      	lsls	r2, r2, #16
   362aa:	4302      	orrs	r2, r0
   362ac:	430a      	orrs	r2, r1
   362ae:	4693      	mov	fp, r2
   362b0:	4652      	mov	r2, sl
   362b2:	00d1      	lsls	r1, r2, #3
   362b4:	4a5c      	ldr	r2, [pc, #368]	; (36428 <__aeabi_ddiv+0x1e8>)
   362b6:	4694      	mov	ip, r2
   362b8:	2200      	movs	r2, #0
   362ba:	4463      	add	r3, ip
   362bc:	0038      	movs	r0, r7
   362be:	4068      	eors	r0, r5
   362c0:	4684      	mov	ip, r0
   362c2:	9002      	str	r0, [sp, #8]
   362c4:	1ae4      	subs	r4, r4, r3
   362c6:	4316      	orrs	r6, r2
   362c8:	2e0f      	cmp	r6, #15
   362ca:	d900      	bls.n	362ce <__aeabi_ddiv+0x8e>
   362cc:	e0b4      	b.n	36438 <__aeabi_ddiv+0x1f8>
   362ce:	4b57      	ldr	r3, [pc, #348]	; (3642c <__aeabi_ddiv+0x1ec>)
   362d0:	00b6      	lsls	r6, r6, #2
   362d2:	599b      	ldr	r3, [r3, r6]
   362d4:	469f      	mov	pc, r3
   362d6:	0003      	movs	r3, r0
   362d8:	4333      	orrs	r3, r6
   362da:	4699      	mov	r9, r3
   362dc:	d16c      	bne.n	363b8 <__aeabi_ddiv+0x178>
   362de:	2300      	movs	r3, #0
   362e0:	4698      	mov	r8, r3
   362e2:	3302      	adds	r3, #2
   362e4:	2608      	movs	r6, #8
   362e6:	9303      	str	r3, [sp, #12]
   362e8:	e7ce      	b.n	36288 <__aeabi_ddiv+0x48>
   362ea:	46cb      	mov	fp, r9
   362ec:	4641      	mov	r1, r8
   362ee:	9a03      	ldr	r2, [sp, #12]
   362f0:	9701      	str	r7, [sp, #4]
   362f2:	2a02      	cmp	r2, #2
   362f4:	d165      	bne.n	363c2 <__aeabi_ddiv+0x182>
   362f6:	9b01      	ldr	r3, [sp, #4]
   362f8:	4c4a      	ldr	r4, [pc, #296]	; (36424 <__aeabi_ddiv+0x1e4>)
   362fa:	469c      	mov	ip, r3
   362fc:	2300      	movs	r3, #0
   362fe:	2200      	movs	r2, #0
   36300:	4698      	mov	r8, r3
   36302:	e06b      	b.n	363dc <__aeabi_ddiv+0x19c>
   36304:	0003      	movs	r3, r0
   36306:	4333      	orrs	r3, r6
   36308:	4699      	mov	r9, r3
   3630a:	d04e      	beq.n	363aa <__aeabi_ddiv+0x16a>
   3630c:	2e00      	cmp	r6, #0
   3630e:	d100      	bne.n	36312 <__aeabi_ddiv+0xd2>
   36310:	e1bc      	b.n	3668c <__aeabi_ddiv+0x44c>
   36312:	0030      	movs	r0, r6
   36314:	f001 f9ca 	bl	376ac <__clzsi2>
   36318:	0003      	movs	r3, r0
   3631a:	3b0b      	subs	r3, #11
   3631c:	2b1c      	cmp	r3, #28
   3631e:	dd00      	ble.n	36322 <__aeabi_ddiv+0xe2>
   36320:	e1ac      	b.n	3667c <__aeabi_ddiv+0x43c>
   36322:	221d      	movs	r2, #29
   36324:	1ad3      	subs	r3, r2, r3
   36326:	465a      	mov	r2, fp
   36328:	0001      	movs	r1, r0
   3632a:	40da      	lsrs	r2, r3
   3632c:	3908      	subs	r1, #8
   3632e:	408e      	lsls	r6, r1
   36330:	0013      	movs	r3, r2
   36332:	4333      	orrs	r3, r6
   36334:	4699      	mov	r9, r3
   36336:	465b      	mov	r3, fp
   36338:	408b      	lsls	r3, r1
   3633a:	4698      	mov	r8, r3
   3633c:	2300      	movs	r3, #0
   3633e:	4c3c      	ldr	r4, [pc, #240]	; (36430 <__aeabi_ddiv+0x1f0>)
   36340:	2600      	movs	r6, #0
   36342:	1a24      	subs	r4, r4, r0
   36344:	9303      	str	r3, [sp, #12]
   36346:	e79f      	b.n	36288 <__aeabi_ddiv+0x48>
   36348:	4651      	mov	r1, sl
   3634a:	465a      	mov	r2, fp
   3634c:	4311      	orrs	r1, r2
   3634e:	d129      	bne.n	363a4 <__aeabi_ddiv+0x164>
   36350:	2200      	movs	r2, #0
   36352:	4693      	mov	fp, r2
   36354:	3202      	adds	r2, #2
   36356:	e7b1      	b.n	362bc <__aeabi_ddiv+0x7c>
   36358:	4659      	mov	r1, fp
   3635a:	4301      	orrs	r1, r0
   3635c:	d01e      	beq.n	3639c <__aeabi_ddiv+0x15c>
   3635e:	465b      	mov	r3, fp
   36360:	2b00      	cmp	r3, #0
   36362:	d100      	bne.n	36366 <__aeabi_ddiv+0x126>
   36364:	e19e      	b.n	366a4 <__aeabi_ddiv+0x464>
   36366:	4658      	mov	r0, fp
   36368:	f001 f9a0 	bl	376ac <__clzsi2>
   3636c:	0003      	movs	r3, r0
   3636e:	3b0b      	subs	r3, #11
   36370:	2b1c      	cmp	r3, #28
   36372:	dd00      	ble.n	36376 <__aeabi_ddiv+0x136>
   36374:	e18f      	b.n	36696 <__aeabi_ddiv+0x456>
   36376:	0002      	movs	r2, r0
   36378:	4659      	mov	r1, fp
   3637a:	3a08      	subs	r2, #8
   3637c:	4091      	lsls	r1, r2
   3637e:	468b      	mov	fp, r1
   36380:	211d      	movs	r1, #29
   36382:	1acb      	subs	r3, r1, r3
   36384:	4651      	mov	r1, sl
   36386:	40d9      	lsrs	r1, r3
   36388:	000b      	movs	r3, r1
   3638a:	4659      	mov	r1, fp
   3638c:	430b      	orrs	r3, r1
   3638e:	4651      	mov	r1, sl
   36390:	469b      	mov	fp, r3
   36392:	4091      	lsls	r1, r2
   36394:	4b26      	ldr	r3, [pc, #152]	; (36430 <__aeabi_ddiv+0x1f0>)
   36396:	2200      	movs	r2, #0
   36398:	1a1b      	subs	r3, r3, r0
   3639a:	e78f      	b.n	362bc <__aeabi_ddiv+0x7c>
   3639c:	2300      	movs	r3, #0
   3639e:	2201      	movs	r2, #1
   363a0:	469b      	mov	fp, r3
   363a2:	e78b      	b.n	362bc <__aeabi_ddiv+0x7c>
   363a4:	4651      	mov	r1, sl
   363a6:	2203      	movs	r2, #3
   363a8:	e788      	b.n	362bc <__aeabi_ddiv+0x7c>
   363aa:	2300      	movs	r3, #0
   363ac:	4698      	mov	r8, r3
   363ae:	3301      	adds	r3, #1
   363b0:	2604      	movs	r6, #4
   363b2:	2400      	movs	r4, #0
   363b4:	9303      	str	r3, [sp, #12]
   363b6:	e767      	b.n	36288 <__aeabi_ddiv+0x48>
   363b8:	2303      	movs	r3, #3
   363ba:	46b1      	mov	r9, r6
   363bc:	9303      	str	r3, [sp, #12]
   363be:	260c      	movs	r6, #12
   363c0:	e762      	b.n	36288 <__aeabi_ddiv+0x48>
   363c2:	2a03      	cmp	r2, #3
   363c4:	d100      	bne.n	363c8 <__aeabi_ddiv+0x188>
   363c6:	e25c      	b.n	36882 <__aeabi_ddiv+0x642>
   363c8:	9b01      	ldr	r3, [sp, #4]
   363ca:	2a01      	cmp	r2, #1
   363cc:	d000      	beq.n	363d0 <__aeabi_ddiv+0x190>
   363ce:	e1e4      	b.n	3679a <__aeabi_ddiv+0x55a>
   363d0:	4013      	ands	r3, r2
   363d2:	469c      	mov	ip, r3
   363d4:	2300      	movs	r3, #0
   363d6:	2400      	movs	r4, #0
   363d8:	2200      	movs	r2, #0
   363da:	4698      	mov	r8, r3
   363dc:	2100      	movs	r1, #0
   363de:	0312      	lsls	r2, r2, #12
   363e0:	0b13      	lsrs	r3, r2, #12
   363e2:	0d0a      	lsrs	r2, r1, #20
   363e4:	0512      	lsls	r2, r2, #20
   363e6:	431a      	orrs	r2, r3
   363e8:	0523      	lsls	r3, r4, #20
   363ea:	4c12      	ldr	r4, [pc, #72]	; (36434 <__aeabi_ddiv+0x1f4>)
   363ec:	4640      	mov	r0, r8
   363ee:	4022      	ands	r2, r4
   363f0:	4313      	orrs	r3, r2
   363f2:	4662      	mov	r2, ip
   363f4:	005b      	lsls	r3, r3, #1
   363f6:	07d2      	lsls	r2, r2, #31
   363f8:	085b      	lsrs	r3, r3, #1
   363fa:	4313      	orrs	r3, r2
   363fc:	0019      	movs	r1, r3
   363fe:	b007      	add	sp, #28
   36400:	bc3c      	pop	{r2, r3, r4, r5}
   36402:	4690      	mov	r8, r2
   36404:	4699      	mov	r9, r3
   36406:	46a2      	mov	sl, r4
   36408:	46ab      	mov	fp, r5
   3640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3640c:	2300      	movs	r3, #0
   3640e:	2280      	movs	r2, #128	; 0x80
   36410:	469c      	mov	ip, r3
   36412:	0312      	lsls	r2, r2, #12
   36414:	4698      	mov	r8, r3
   36416:	4c03      	ldr	r4, [pc, #12]	; (36424 <__aeabi_ddiv+0x1e4>)
   36418:	e7e0      	b.n	363dc <__aeabi_ddiv+0x19c>
   3641a:	2300      	movs	r3, #0
   3641c:	4c01      	ldr	r4, [pc, #4]	; (36424 <__aeabi_ddiv+0x1e4>)
   3641e:	2200      	movs	r2, #0
   36420:	4698      	mov	r8, r3
   36422:	e7db      	b.n	363dc <__aeabi_ddiv+0x19c>
   36424:	000007ff 	.word	0x000007ff
   36428:	fffffc01 	.word	0xfffffc01
   3642c:	0003d438 	.word	0x0003d438
   36430:	fffffc0d 	.word	0xfffffc0d
   36434:	800fffff 	.word	0x800fffff
   36438:	45d9      	cmp	r9, fp
   3643a:	d900      	bls.n	3643e <__aeabi_ddiv+0x1fe>
   3643c:	e139      	b.n	366b2 <__aeabi_ddiv+0x472>
   3643e:	d100      	bne.n	36442 <__aeabi_ddiv+0x202>
   36440:	e134      	b.n	366ac <__aeabi_ddiv+0x46c>
   36442:	2300      	movs	r3, #0
   36444:	4646      	mov	r6, r8
   36446:	464d      	mov	r5, r9
   36448:	469a      	mov	sl, r3
   3644a:	3c01      	subs	r4, #1
   3644c:	465b      	mov	r3, fp
   3644e:	0e0a      	lsrs	r2, r1, #24
   36450:	021b      	lsls	r3, r3, #8
   36452:	431a      	orrs	r2, r3
   36454:	020b      	lsls	r3, r1, #8
   36456:	0c17      	lsrs	r7, r2, #16
   36458:	9303      	str	r3, [sp, #12]
   3645a:	0413      	lsls	r3, r2, #16
   3645c:	0c1b      	lsrs	r3, r3, #16
   3645e:	0039      	movs	r1, r7
   36460:	0028      	movs	r0, r5
   36462:	4690      	mov	r8, r2
   36464:	9301      	str	r3, [sp, #4]
   36466:	f7fe fce5 	bl	34e34 <__udivsi3>
   3646a:	0002      	movs	r2, r0
   3646c:	9b01      	ldr	r3, [sp, #4]
   3646e:	4683      	mov	fp, r0
   36470:	435a      	muls	r2, r3
   36472:	0028      	movs	r0, r5
   36474:	0039      	movs	r1, r7
   36476:	4691      	mov	r9, r2
   36478:	f7fe fd62 	bl	34f40 <__aeabi_uidivmod>
   3647c:	0c35      	lsrs	r5, r6, #16
   3647e:	0409      	lsls	r1, r1, #16
   36480:	430d      	orrs	r5, r1
   36482:	45a9      	cmp	r9, r5
   36484:	d90d      	bls.n	364a2 <__aeabi_ddiv+0x262>
   36486:	465b      	mov	r3, fp
   36488:	4445      	add	r5, r8
   3648a:	3b01      	subs	r3, #1
   3648c:	45a8      	cmp	r8, r5
   3648e:	d900      	bls.n	36492 <__aeabi_ddiv+0x252>
   36490:	e13a      	b.n	36708 <__aeabi_ddiv+0x4c8>
   36492:	45a9      	cmp	r9, r5
   36494:	d800      	bhi.n	36498 <__aeabi_ddiv+0x258>
   36496:	e137      	b.n	36708 <__aeabi_ddiv+0x4c8>
   36498:	2302      	movs	r3, #2
   3649a:	425b      	negs	r3, r3
   3649c:	469c      	mov	ip, r3
   3649e:	4445      	add	r5, r8
   364a0:	44e3      	add	fp, ip
   364a2:	464b      	mov	r3, r9
   364a4:	1aeb      	subs	r3, r5, r3
   364a6:	0039      	movs	r1, r7
   364a8:	0018      	movs	r0, r3
   364aa:	9304      	str	r3, [sp, #16]
   364ac:	f7fe fcc2 	bl	34e34 <__udivsi3>
   364b0:	9b01      	ldr	r3, [sp, #4]
   364b2:	0005      	movs	r5, r0
   364b4:	4343      	muls	r3, r0
   364b6:	0039      	movs	r1, r7
   364b8:	9804      	ldr	r0, [sp, #16]
   364ba:	4699      	mov	r9, r3
   364bc:	f7fe fd40 	bl	34f40 <__aeabi_uidivmod>
   364c0:	0433      	lsls	r3, r6, #16
   364c2:	0409      	lsls	r1, r1, #16
   364c4:	0c1b      	lsrs	r3, r3, #16
   364c6:	430b      	orrs	r3, r1
   364c8:	4599      	cmp	r9, r3
   364ca:	d909      	bls.n	364e0 <__aeabi_ddiv+0x2a0>
   364cc:	4443      	add	r3, r8
   364ce:	1e6a      	subs	r2, r5, #1
   364d0:	4598      	cmp	r8, r3
   364d2:	d900      	bls.n	364d6 <__aeabi_ddiv+0x296>
   364d4:	e11a      	b.n	3670c <__aeabi_ddiv+0x4cc>
   364d6:	4599      	cmp	r9, r3
   364d8:	d800      	bhi.n	364dc <__aeabi_ddiv+0x29c>
   364da:	e117      	b.n	3670c <__aeabi_ddiv+0x4cc>
   364dc:	3d02      	subs	r5, #2
   364de:	4443      	add	r3, r8
   364e0:	464a      	mov	r2, r9
   364e2:	1a9b      	subs	r3, r3, r2
   364e4:	465a      	mov	r2, fp
   364e6:	0412      	lsls	r2, r2, #16
   364e8:	432a      	orrs	r2, r5
   364ea:	9903      	ldr	r1, [sp, #12]
   364ec:	4693      	mov	fp, r2
   364ee:	0c10      	lsrs	r0, r2, #16
   364f0:	0c0a      	lsrs	r2, r1, #16
   364f2:	4691      	mov	r9, r2
   364f4:	0409      	lsls	r1, r1, #16
   364f6:	465a      	mov	r2, fp
   364f8:	0c09      	lsrs	r1, r1, #16
   364fa:	464e      	mov	r6, r9
   364fc:	000d      	movs	r5, r1
   364fe:	0412      	lsls	r2, r2, #16
   36500:	0c12      	lsrs	r2, r2, #16
   36502:	4345      	muls	r5, r0
   36504:	9105      	str	r1, [sp, #20]
   36506:	4351      	muls	r1, r2
   36508:	4372      	muls	r2, r6
   3650a:	4370      	muls	r0, r6
   3650c:	1952      	adds	r2, r2, r5
   3650e:	0c0e      	lsrs	r6, r1, #16
   36510:	18b2      	adds	r2, r6, r2
   36512:	4295      	cmp	r5, r2
   36514:	d903      	bls.n	3651e <__aeabi_ddiv+0x2de>
   36516:	2580      	movs	r5, #128	; 0x80
   36518:	026d      	lsls	r5, r5, #9
   3651a:	46ac      	mov	ip, r5
   3651c:	4460      	add	r0, ip
   3651e:	0c15      	lsrs	r5, r2, #16
   36520:	0409      	lsls	r1, r1, #16
   36522:	0412      	lsls	r2, r2, #16
   36524:	0c09      	lsrs	r1, r1, #16
   36526:	1828      	adds	r0, r5, r0
   36528:	1852      	adds	r2, r2, r1
   3652a:	4283      	cmp	r3, r0
   3652c:	d200      	bcs.n	36530 <__aeabi_ddiv+0x2f0>
   3652e:	e0ce      	b.n	366ce <__aeabi_ddiv+0x48e>
   36530:	d100      	bne.n	36534 <__aeabi_ddiv+0x2f4>
   36532:	e0c8      	b.n	366c6 <__aeabi_ddiv+0x486>
   36534:	1a1d      	subs	r5, r3, r0
   36536:	4653      	mov	r3, sl
   36538:	1a9e      	subs	r6, r3, r2
   3653a:	45b2      	cmp	sl, r6
   3653c:	4192      	sbcs	r2, r2
   3653e:	4252      	negs	r2, r2
   36540:	1aab      	subs	r3, r5, r2
   36542:	469a      	mov	sl, r3
   36544:	4598      	cmp	r8, r3
   36546:	d100      	bne.n	3654a <__aeabi_ddiv+0x30a>
   36548:	e117      	b.n	3677a <__aeabi_ddiv+0x53a>
   3654a:	0039      	movs	r1, r7
   3654c:	0018      	movs	r0, r3
   3654e:	f7fe fc71 	bl	34e34 <__udivsi3>
   36552:	9b01      	ldr	r3, [sp, #4]
   36554:	0005      	movs	r5, r0
   36556:	4343      	muls	r3, r0
   36558:	0039      	movs	r1, r7
   3655a:	4650      	mov	r0, sl
   3655c:	9304      	str	r3, [sp, #16]
   3655e:	f7fe fcef 	bl	34f40 <__aeabi_uidivmod>
   36562:	9804      	ldr	r0, [sp, #16]
   36564:	040b      	lsls	r3, r1, #16
   36566:	0c31      	lsrs	r1, r6, #16
   36568:	4319      	orrs	r1, r3
   3656a:	4288      	cmp	r0, r1
   3656c:	d909      	bls.n	36582 <__aeabi_ddiv+0x342>
   3656e:	4441      	add	r1, r8
   36570:	1e6b      	subs	r3, r5, #1
   36572:	4588      	cmp	r8, r1
   36574:	d900      	bls.n	36578 <__aeabi_ddiv+0x338>
   36576:	e107      	b.n	36788 <__aeabi_ddiv+0x548>
   36578:	4288      	cmp	r0, r1
   3657a:	d800      	bhi.n	3657e <__aeabi_ddiv+0x33e>
   3657c:	e104      	b.n	36788 <__aeabi_ddiv+0x548>
   3657e:	3d02      	subs	r5, #2
   36580:	4441      	add	r1, r8
   36582:	9b04      	ldr	r3, [sp, #16]
   36584:	1acb      	subs	r3, r1, r3
   36586:	0018      	movs	r0, r3
   36588:	0039      	movs	r1, r7
   3658a:	9304      	str	r3, [sp, #16]
   3658c:	f7fe fc52 	bl	34e34 <__udivsi3>
   36590:	9b01      	ldr	r3, [sp, #4]
   36592:	4682      	mov	sl, r0
   36594:	4343      	muls	r3, r0
   36596:	0039      	movs	r1, r7
   36598:	9804      	ldr	r0, [sp, #16]
   3659a:	9301      	str	r3, [sp, #4]
   3659c:	f7fe fcd0 	bl	34f40 <__aeabi_uidivmod>
   365a0:	9801      	ldr	r0, [sp, #4]
   365a2:	040b      	lsls	r3, r1, #16
   365a4:	0431      	lsls	r1, r6, #16
   365a6:	0c09      	lsrs	r1, r1, #16
   365a8:	4319      	orrs	r1, r3
   365aa:	4288      	cmp	r0, r1
   365ac:	d90d      	bls.n	365ca <__aeabi_ddiv+0x38a>
   365ae:	4653      	mov	r3, sl
   365b0:	4441      	add	r1, r8
   365b2:	3b01      	subs	r3, #1
   365b4:	4588      	cmp	r8, r1
   365b6:	d900      	bls.n	365ba <__aeabi_ddiv+0x37a>
   365b8:	e0e8      	b.n	3678c <__aeabi_ddiv+0x54c>
   365ba:	4288      	cmp	r0, r1
   365bc:	d800      	bhi.n	365c0 <__aeabi_ddiv+0x380>
   365be:	e0e5      	b.n	3678c <__aeabi_ddiv+0x54c>
   365c0:	2302      	movs	r3, #2
   365c2:	425b      	negs	r3, r3
   365c4:	469c      	mov	ip, r3
   365c6:	4441      	add	r1, r8
   365c8:	44e2      	add	sl, ip
   365ca:	9b01      	ldr	r3, [sp, #4]
   365cc:	042d      	lsls	r5, r5, #16
   365ce:	1ace      	subs	r6, r1, r3
   365d0:	4651      	mov	r1, sl
   365d2:	4329      	orrs	r1, r5
   365d4:	9d05      	ldr	r5, [sp, #20]
   365d6:	464f      	mov	r7, r9
   365d8:	002a      	movs	r2, r5
   365da:	040b      	lsls	r3, r1, #16
   365dc:	0c08      	lsrs	r0, r1, #16
   365de:	0c1b      	lsrs	r3, r3, #16
   365e0:	435a      	muls	r2, r3
   365e2:	4345      	muls	r5, r0
   365e4:	437b      	muls	r3, r7
   365e6:	4378      	muls	r0, r7
   365e8:	195b      	adds	r3, r3, r5
   365ea:	0c17      	lsrs	r7, r2, #16
   365ec:	18fb      	adds	r3, r7, r3
   365ee:	429d      	cmp	r5, r3
   365f0:	d903      	bls.n	365fa <__aeabi_ddiv+0x3ba>
   365f2:	2580      	movs	r5, #128	; 0x80
   365f4:	026d      	lsls	r5, r5, #9
   365f6:	46ac      	mov	ip, r5
   365f8:	4460      	add	r0, ip
   365fa:	0c1d      	lsrs	r5, r3, #16
   365fc:	0412      	lsls	r2, r2, #16
   365fe:	041b      	lsls	r3, r3, #16
   36600:	0c12      	lsrs	r2, r2, #16
   36602:	1828      	adds	r0, r5, r0
   36604:	189b      	adds	r3, r3, r2
   36606:	4286      	cmp	r6, r0
   36608:	d200      	bcs.n	3660c <__aeabi_ddiv+0x3cc>
   3660a:	e093      	b.n	36734 <__aeabi_ddiv+0x4f4>
   3660c:	d100      	bne.n	36610 <__aeabi_ddiv+0x3d0>
   3660e:	e08e      	b.n	3672e <__aeabi_ddiv+0x4ee>
   36610:	2301      	movs	r3, #1
   36612:	4319      	orrs	r1, r3
   36614:	4ba0      	ldr	r3, [pc, #640]	; (36898 <__aeabi_ddiv+0x658>)
   36616:	18e3      	adds	r3, r4, r3
   36618:	2b00      	cmp	r3, #0
   3661a:	dc00      	bgt.n	3661e <__aeabi_ddiv+0x3de>
   3661c:	e099      	b.n	36752 <__aeabi_ddiv+0x512>
   3661e:	074a      	lsls	r2, r1, #29
   36620:	d000      	beq.n	36624 <__aeabi_ddiv+0x3e4>
   36622:	e09e      	b.n	36762 <__aeabi_ddiv+0x522>
   36624:	465a      	mov	r2, fp
   36626:	01d2      	lsls	r2, r2, #7
   36628:	d506      	bpl.n	36638 <__aeabi_ddiv+0x3f8>
   3662a:	465a      	mov	r2, fp
   3662c:	4b9b      	ldr	r3, [pc, #620]	; (3689c <__aeabi_ddiv+0x65c>)
   3662e:	401a      	ands	r2, r3
   36630:	2380      	movs	r3, #128	; 0x80
   36632:	4693      	mov	fp, r2
   36634:	00db      	lsls	r3, r3, #3
   36636:	18e3      	adds	r3, r4, r3
   36638:	4a99      	ldr	r2, [pc, #612]	; (368a0 <__aeabi_ddiv+0x660>)
   3663a:	4293      	cmp	r3, r2
   3663c:	dd68      	ble.n	36710 <__aeabi_ddiv+0x4d0>
   3663e:	2301      	movs	r3, #1
   36640:	9a02      	ldr	r2, [sp, #8]
   36642:	4c98      	ldr	r4, [pc, #608]	; (368a4 <__aeabi_ddiv+0x664>)
   36644:	401a      	ands	r2, r3
   36646:	2300      	movs	r3, #0
   36648:	4694      	mov	ip, r2
   3664a:	4698      	mov	r8, r3
   3664c:	2200      	movs	r2, #0
   3664e:	e6c5      	b.n	363dc <__aeabi_ddiv+0x19c>
   36650:	2280      	movs	r2, #128	; 0x80
   36652:	464b      	mov	r3, r9
   36654:	0312      	lsls	r2, r2, #12
   36656:	4213      	tst	r3, r2
   36658:	d00a      	beq.n	36670 <__aeabi_ddiv+0x430>
   3665a:	465b      	mov	r3, fp
   3665c:	4213      	tst	r3, r2
   3665e:	d106      	bne.n	3666e <__aeabi_ddiv+0x42e>
   36660:	431a      	orrs	r2, r3
   36662:	0312      	lsls	r2, r2, #12
   36664:	0b12      	lsrs	r2, r2, #12
   36666:	46ac      	mov	ip, r5
   36668:	4688      	mov	r8, r1
   3666a:	4c8e      	ldr	r4, [pc, #568]	; (368a4 <__aeabi_ddiv+0x664>)
   3666c:	e6b6      	b.n	363dc <__aeabi_ddiv+0x19c>
   3666e:	464b      	mov	r3, r9
   36670:	431a      	orrs	r2, r3
   36672:	0312      	lsls	r2, r2, #12
   36674:	0b12      	lsrs	r2, r2, #12
   36676:	46bc      	mov	ip, r7
   36678:	4c8a      	ldr	r4, [pc, #552]	; (368a4 <__aeabi_ddiv+0x664>)
   3667a:	e6af      	b.n	363dc <__aeabi_ddiv+0x19c>
   3667c:	0003      	movs	r3, r0
   3667e:	465a      	mov	r2, fp
   36680:	3b28      	subs	r3, #40	; 0x28
   36682:	409a      	lsls	r2, r3
   36684:	2300      	movs	r3, #0
   36686:	4691      	mov	r9, r2
   36688:	4698      	mov	r8, r3
   3668a:	e657      	b.n	3633c <__aeabi_ddiv+0xfc>
   3668c:	4658      	mov	r0, fp
   3668e:	f001 f80d 	bl	376ac <__clzsi2>
   36692:	3020      	adds	r0, #32
   36694:	e640      	b.n	36318 <__aeabi_ddiv+0xd8>
   36696:	0003      	movs	r3, r0
   36698:	4652      	mov	r2, sl
   3669a:	3b28      	subs	r3, #40	; 0x28
   3669c:	409a      	lsls	r2, r3
   3669e:	2100      	movs	r1, #0
   366a0:	4693      	mov	fp, r2
   366a2:	e677      	b.n	36394 <__aeabi_ddiv+0x154>
   366a4:	f001 f802 	bl	376ac <__clzsi2>
   366a8:	3020      	adds	r0, #32
   366aa:	e65f      	b.n	3636c <__aeabi_ddiv+0x12c>
   366ac:	4588      	cmp	r8, r1
   366ae:	d200      	bcs.n	366b2 <__aeabi_ddiv+0x472>
   366b0:	e6c7      	b.n	36442 <__aeabi_ddiv+0x202>
   366b2:	464b      	mov	r3, r9
   366b4:	07de      	lsls	r6, r3, #31
   366b6:	085d      	lsrs	r5, r3, #1
   366b8:	4643      	mov	r3, r8
   366ba:	085b      	lsrs	r3, r3, #1
   366bc:	431e      	orrs	r6, r3
   366be:	4643      	mov	r3, r8
   366c0:	07db      	lsls	r3, r3, #31
   366c2:	469a      	mov	sl, r3
   366c4:	e6c2      	b.n	3644c <__aeabi_ddiv+0x20c>
   366c6:	2500      	movs	r5, #0
   366c8:	4592      	cmp	sl, r2
   366ca:	d300      	bcc.n	366ce <__aeabi_ddiv+0x48e>
   366cc:	e733      	b.n	36536 <__aeabi_ddiv+0x2f6>
   366ce:	9e03      	ldr	r6, [sp, #12]
   366d0:	4659      	mov	r1, fp
   366d2:	46b4      	mov	ip, r6
   366d4:	44e2      	add	sl, ip
   366d6:	45b2      	cmp	sl, r6
   366d8:	41ad      	sbcs	r5, r5
   366da:	426d      	negs	r5, r5
   366dc:	4445      	add	r5, r8
   366de:	18eb      	adds	r3, r5, r3
   366e0:	3901      	subs	r1, #1
   366e2:	4598      	cmp	r8, r3
   366e4:	d207      	bcs.n	366f6 <__aeabi_ddiv+0x4b6>
   366e6:	4298      	cmp	r0, r3
   366e8:	d900      	bls.n	366ec <__aeabi_ddiv+0x4ac>
   366ea:	e07f      	b.n	367ec <__aeabi_ddiv+0x5ac>
   366ec:	d100      	bne.n	366f0 <__aeabi_ddiv+0x4b0>
   366ee:	e0bc      	b.n	3686a <__aeabi_ddiv+0x62a>
   366f0:	1a1d      	subs	r5, r3, r0
   366f2:	468b      	mov	fp, r1
   366f4:	e71f      	b.n	36536 <__aeabi_ddiv+0x2f6>
   366f6:	4598      	cmp	r8, r3
   366f8:	d1fa      	bne.n	366f0 <__aeabi_ddiv+0x4b0>
   366fa:	9d03      	ldr	r5, [sp, #12]
   366fc:	4555      	cmp	r5, sl
   366fe:	d9f2      	bls.n	366e6 <__aeabi_ddiv+0x4a6>
   36700:	4643      	mov	r3, r8
   36702:	468b      	mov	fp, r1
   36704:	1a1d      	subs	r5, r3, r0
   36706:	e716      	b.n	36536 <__aeabi_ddiv+0x2f6>
   36708:	469b      	mov	fp, r3
   3670a:	e6ca      	b.n	364a2 <__aeabi_ddiv+0x262>
   3670c:	0015      	movs	r5, r2
   3670e:	e6e7      	b.n	364e0 <__aeabi_ddiv+0x2a0>
   36710:	465a      	mov	r2, fp
   36712:	08c9      	lsrs	r1, r1, #3
   36714:	0752      	lsls	r2, r2, #29
   36716:	430a      	orrs	r2, r1
   36718:	055b      	lsls	r3, r3, #21
   3671a:	4690      	mov	r8, r2
   3671c:	0d5c      	lsrs	r4, r3, #21
   3671e:	465a      	mov	r2, fp
   36720:	2301      	movs	r3, #1
   36722:	9902      	ldr	r1, [sp, #8]
   36724:	0252      	lsls	r2, r2, #9
   36726:	4019      	ands	r1, r3
   36728:	0b12      	lsrs	r2, r2, #12
   3672a:	468c      	mov	ip, r1
   3672c:	e656      	b.n	363dc <__aeabi_ddiv+0x19c>
   3672e:	2b00      	cmp	r3, #0
   36730:	d100      	bne.n	36734 <__aeabi_ddiv+0x4f4>
   36732:	e76f      	b.n	36614 <__aeabi_ddiv+0x3d4>
   36734:	4446      	add	r6, r8
   36736:	1e4a      	subs	r2, r1, #1
   36738:	45b0      	cmp	r8, r6
   3673a:	d929      	bls.n	36790 <__aeabi_ddiv+0x550>
   3673c:	0011      	movs	r1, r2
   3673e:	4286      	cmp	r6, r0
   36740:	d000      	beq.n	36744 <__aeabi_ddiv+0x504>
   36742:	e765      	b.n	36610 <__aeabi_ddiv+0x3d0>
   36744:	9a03      	ldr	r2, [sp, #12]
   36746:	4293      	cmp	r3, r2
   36748:	d000      	beq.n	3674c <__aeabi_ddiv+0x50c>
   3674a:	e761      	b.n	36610 <__aeabi_ddiv+0x3d0>
   3674c:	e762      	b.n	36614 <__aeabi_ddiv+0x3d4>
   3674e:	2101      	movs	r1, #1
   36750:	4249      	negs	r1, r1
   36752:	2001      	movs	r0, #1
   36754:	1ac2      	subs	r2, r0, r3
   36756:	2a38      	cmp	r2, #56	; 0x38
   36758:	dd21      	ble.n	3679e <__aeabi_ddiv+0x55e>
   3675a:	9b02      	ldr	r3, [sp, #8]
   3675c:	4003      	ands	r3, r0
   3675e:	469c      	mov	ip, r3
   36760:	e638      	b.n	363d4 <__aeabi_ddiv+0x194>
   36762:	220f      	movs	r2, #15
   36764:	400a      	ands	r2, r1
   36766:	2a04      	cmp	r2, #4
   36768:	d100      	bne.n	3676c <__aeabi_ddiv+0x52c>
   3676a:	e75b      	b.n	36624 <__aeabi_ddiv+0x3e4>
   3676c:	000a      	movs	r2, r1
   3676e:	1d11      	adds	r1, r2, #4
   36770:	4291      	cmp	r1, r2
   36772:	4192      	sbcs	r2, r2
   36774:	4252      	negs	r2, r2
   36776:	4493      	add	fp, r2
   36778:	e754      	b.n	36624 <__aeabi_ddiv+0x3e4>
   3677a:	4b47      	ldr	r3, [pc, #284]	; (36898 <__aeabi_ddiv+0x658>)
   3677c:	18e3      	adds	r3, r4, r3
   3677e:	2b00      	cmp	r3, #0
   36780:	dde5      	ble.n	3674e <__aeabi_ddiv+0x50e>
   36782:	2201      	movs	r2, #1
   36784:	4252      	negs	r2, r2
   36786:	e7f2      	b.n	3676e <__aeabi_ddiv+0x52e>
   36788:	001d      	movs	r5, r3
   3678a:	e6fa      	b.n	36582 <__aeabi_ddiv+0x342>
   3678c:	469a      	mov	sl, r3
   3678e:	e71c      	b.n	365ca <__aeabi_ddiv+0x38a>
   36790:	42b0      	cmp	r0, r6
   36792:	d839      	bhi.n	36808 <__aeabi_ddiv+0x5c8>
   36794:	d06e      	beq.n	36874 <__aeabi_ddiv+0x634>
   36796:	0011      	movs	r1, r2
   36798:	e73a      	b.n	36610 <__aeabi_ddiv+0x3d0>
   3679a:	9302      	str	r3, [sp, #8]
   3679c:	e73a      	b.n	36614 <__aeabi_ddiv+0x3d4>
   3679e:	2a1f      	cmp	r2, #31
   367a0:	dc3c      	bgt.n	3681c <__aeabi_ddiv+0x5dc>
   367a2:	2320      	movs	r3, #32
   367a4:	1a9b      	subs	r3, r3, r2
   367a6:	000c      	movs	r4, r1
   367a8:	4658      	mov	r0, fp
   367aa:	4099      	lsls	r1, r3
   367ac:	4098      	lsls	r0, r3
   367ae:	1e4b      	subs	r3, r1, #1
   367b0:	4199      	sbcs	r1, r3
   367b2:	465b      	mov	r3, fp
   367b4:	40d4      	lsrs	r4, r2
   367b6:	40d3      	lsrs	r3, r2
   367b8:	4320      	orrs	r0, r4
   367ba:	4308      	orrs	r0, r1
   367bc:	001a      	movs	r2, r3
   367be:	0743      	lsls	r3, r0, #29
   367c0:	d009      	beq.n	367d6 <__aeabi_ddiv+0x596>
   367c2:	230f      	movs	r3, #15
   367c4:	4003      	ands	r3, r0
   367c6:	2b04      	cmp	r3, #4
   367c8:	d005      	beq.n	367d6 <__aeabi_ddiv+0x596>
   367ca:	0001      	movs	r1, r0
   367cc:	1d08      	adds	r0, r1, #4
   367ce:	4288      	cmp	r0, r1
   367d0:	419b      	sbcs	r3, r3
   367d2:	425b      	negs	r3, r3
   367d4:	18d2      	adds	r2, r2, r3
   367d6:	0213      	lsls	r3, r2, #8
   367d8:	d53a      	bpl.n	36850 <__aeabi_ddiv+0x610>
   367da:	2301      	movs	r3, #1
   367dc:	9a02      	ldr	r2, [sp, #8]
   367de:	2401      	movs	r4, #1
   367e0:	401a      	ands	r2, r3
   367e2:	2300      	movs	r3, #0
   367e4:	4694      	mov	ip, r2
   367e6:	4698      	mov	r8, r3
   367e8:	2200      	movs	r2, #0
   367ea:	e5f7      	b.n	363dc <__aeabi_ddiv+0x19c>
   367ec:	2102      	movs	r1, #2
   367ee:	4249      	negs	r1, r1
   367f0:	468c      	mov	ip, r1
   367f2:	9d03      	ldr	r5, [sp, #12]
   367f4:	44e3      	add	fp, ip
   367f6:	46ac      	mov	ip, r5
   367f8:	44e2      	add	sl, ip
   367fa:	45aa      	cmp	sl, r5
   367fc:	41ad      	sbcs	r5, r5
   367fe:	426d      	negs	r5, r5
   36800:	4445      	add	r5, r8
   36802:	18ed      	adds	r5, r5, r3
   36804:	1a2d      	subs	r5, r5, r0
   36806:	e696      	b.n	36536 <__aeabi_ddiv+0x2f6>
   36808:	1e8a      	subs	r2, r1, #2
   3680a:	9903      	ldr	r1, [sp, #12]
   3680c:	004d      	lsls	r5, r1, #1
   3680e:	428d      	cmp	r5, r1
   36810:	4189      	sbcs	r1, r1
   36812:	4249      	negs	r1, r1
   36814:	4441      	add	r1, r8
   36816:	1876      	adds	r6, r6, r1
   36818:	9503      	str	r5, [sp, #12]
   3681a:	e78f      	b.n	3673c <__aeabi_ddiv+0x4fc>
   3681c:	201f      	movs	r0, #31
   3681e:	4240      	negs	r0, r0
   36820:	1ac3      	subs	r3, r0, r3
   36822:	4658      	mov	r0, fp
   36824:	40d8      	lsrs	r0, r3
   36826:	0003      	movs	r3, r0
   36828:	2a20      	cmp	r2, #32
   3682a:	d028      	beq.n	3687e <__aeabi_ddiv+0x63e>
   3682c:	2040      	movs	r0, #64	; 0x40
   3682e:	465d      	mov	r5, fp
   36830:	1a82      	subs	r2, r0, r2
   36832:	4095      	lsls	r5, r2
   36834:	4329      	orrs	r1, r5
   36836:	1e4a      	subs	r2, r1, #1
   36838:	4191      	sbcs	r1, r2
   3683a:	4319      	orrs	r1, r3
   3683c:	2307      	movs	r3, #7
   3683e:	2200      	movs	r2, #0
   36840:	400b      	ands	r3, r1
   36842:	d009      	beq.n	36858 <__aeabi_ddiv+0x618>
   36844:	230f      	movs	r3, #15
   36846:	2200      	movs	r2, #0
   36848:	400b      	ands	r3, r1
   3684a:	0008      	movs	r0, r1
   3684c:	2b04      	cmp	r3, #4
   3684e:	d1bd      	bne.n	367cc <__aeabi_ddiv+0x58c>
   36850:	0001      	movs	r1, r0
   36852:	0753      	lsls	r3, r2, #29
   36854:	0252      	lsls	r2, r2, #9
   36856:	0b12      	lsrs	r2, r2, #12
   36858:	08c9      	lsrs	r1, r1, #3
   3685a:	4319      	orrs	r1, r3
   3685c:	2301      	movs	r3, #1
   3685e:	4688      	mov	r8, r1
   36860:	9902      	ldr	r1, [sp, #8]
   36862:	2400      	movs	r4, #0
   36864:	4019      	ands	r1, r3
   36866:	468c      	mov	ip, r1
   36868:	e5b8      	b.n	363dc <__aeabi_ddiv+0x19c>
   3686a:	4552      	cmp	r2, sl
   3686c:	d8be      	bhi.n	367ec <__aeabi_ddiv+0x5ac>
   3686e:	468b      	mov	fp, r1
   36870:	2500      	movs	r5, #0
   36872:	e660      	b.n	36536 <__aeabi_ddiv+0x2f6>
   36874:	9d03      	ldr	r5, [sp, #12]
   36876:	429d      	cmp	r5, r3
   36878:	d3c6      	bcc.n	36808 <__aeabi_ddiv+0x5c8>
   3687a:	0011      	movs	r1, r2
   3687c:	e762      	b.n	36744 <__aeabi_ddiv+0x504>
   3687e:	2500      	movs	r5, #0
   36880:	e7d8      	b.n	36834 <__aeabi_ddiv+0x5f4>
   36882:	2280      	movs	r2, #128	; 0x80
   36884:	465b      	mov	r3, fp
   36886:	0312      	lsls	r2, r2, #12
   36888:	431a      	orrs	r2, r3
   3688a:	9b01      	ldr	r3, [sp, #4]
   3688c:	0312      	lsls	r2, r2, #12
   3688e:	0b12      	lsrs	r2, r2, #12
   36890:	469c      	mov	ip, r3
   36892:	4688      	mov	r8, r1
   36894:	4c03      	ldr	r4, [pc, #12]	; (368a4 <__aeabi_ddiv+0x664>)
   36896:	e5a1      	b.n	363dc <__aeabi_ddiv+0x19c>
   36898:	000003ff 	.word	0x000003ff
   3689c:	feffffff 	.word	0xfeffffff
   368a0:	000007fe 	.word	0x000007fe
   368a4:	000007ff 	.word	0x000007ff

000368a8 <__eqdf2>:
   368a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   368aa:	464f      	mov	r7, r9
   368ac:	4646      	mov	r6, r8
   368ae:	46d6      	mov	lr, sl
   368b0:	005c      	lsls	r4, r3, #1
   368b2:	b5c0      	push	{r6, r7, lr}
   368b4:	031f      	lsls	r7, r3, #12
   368b6:	0fdb      	lsrs	r3, r3, #31
   368b8:	469a      	mov	sl, r3
   368ba:	4b17      	ldr	r3, [pc, #92]	; (36918 <__eqdf2+0x70>)
   368bc:	030e      	lsls	r6, r1, #12
   368be:	004d      	lsls	r5, r1, #1
   368c0:	4684      	mov	ip, r0
   368c2:	4680      	mov	r8, r0
   368c4:	0b36      	lsrs	r6, r6, #12
   368c6:	0d6d      	lsrs	r5, r5, #21
   368c8:	0fc9      	lsrs	r1, r1, #31
   368ca:	4691      	mov	r9, r2
   368cc:	0b3f      	lsrs	r7, r7, #12
   368ce:	0d64      	lsrs	r4, r4, #21
   368d0:	2001      	movs	r0, #1
   368d2:	429d      	cmp	r5, r3
   368d4:	d008      	beq.n	368e8 <__eqdf2+0x40>
   368d6:	429c      	cmp	r4, r3
   368d8:	d001      	beq.n	368de <__eqdf2+0x36>
   368da:	42a5      	cmp	r5, r4
   368dc:	d00b      	beq.n	368f6 <__eqdf2+0x4e>
   368de:	bc1c      	pop	{r2, r3, r4}
   368e0:	4690      	mov	r8, r2
   368e2:	4699      	mov	r9, r3
   368e4:	46a2      	mov	sl, r4
   368e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   368e8:	4663      	mov	r3, ip
   368ea:	4333      	orrs	r3, r6
   368ec:	d1f7      	bne.n	368de <__eqdf2+0x36>
   368ee:	42ac      	cmp	r4, r5
   368f0:	d1f5      	bne.n	368de <__eqdf2+0x36>
   368f2:	433a      	orrs	r2, r7
   368f4:	d1f3      	bne.n	368de <__eqdf2+0x36>
   368f6:	2001      	movs	r0, #1
   368f8:	42be      	cmp	r6, r7
   368fa:	d1f0      	bne.n	368de <__eqdf2+0x36>
   368fc:	45c8      	cmp	r8, r9
   368fe:	d1ee      	bne.n	368de <__eqdf2+0x36>
   36900:	4551      	cmp	r1, sl
   36902:	d007      	beq.n	36914 <__eqdf2+0x6c>
   36904:	2d00      	cmp	r5, #0
   36906:	d1ea      	bne.n	368de <__eqdf2+0x36>
   36908:	4663      	mov	r3, ip
   3690a:	431e      	orrs	r6, r3
   3690c:	0030      	movs	r0, r6
   3690e:	1e46      	subs	r6, r0, #1
   36910:	41b0      	sbcs	r0, r6
   36912:	e7e4      	b.n	368de <__eqdf2+0x36>
   36914:	2000      	movs	r0, #0
   36916:	e7e2      	b.n	368de <__eqdf2+0x36>
   36918:	000007ff 	.word	0x000007ff

0003691c <__gedf2>:
   3691c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3691e:	4645      	mov	r5, r8
   36920:	46de      	mov	lr, fp
   36922:	4657      	mov	r7, sl
   36924:	464e      	mov	r6, r9
   36926:	b5e0      	push	{r5, r6, r7, lr}
   36928:	031f      	lsls	r7, r3, #12
   3692a:	0b3d      	lsrs	r5, r7, #12
   3692c:	4f2c      	ldr	r7, [pc, #176]	; (369e0 <__gedf2+0xc4>)
   3692e:	030e      	lsls	r6, r1, #12
   36930:	004c      	lsls	r4, r1, #1
   36932:	46ab      	mov	fp, r5
   36934:	005d      	lsls	r5, r3, #1
   36936:	4684      	mov	ip, r0
   36938:	0b36      	lsrs	r6, r6, #12
   3693a:	0d64      	lsrs	r4, r4, #21
   3693c:	0fc9      	lsrs	r1, r1, #31
   3693e:	4690      	mov	r8, r2
   36940:	0d6d      	lsrs	r5, r5, #21
   36942:	0fdb      	lsrs	r3, r3, #31
   36944:	42bc      	cmp	r4, r7
   36946:	d02a      	beq.n	3699e <__gedf2+0x82>
   36948:	4f25      	ldr	r7, [pc, #148]	; (369e0 <__gedf2+0xc4>)
   3694a:	42bd      	cmp	r5, r7
   3694c:	d02d      	beq.n	369aa <__gedf2+0x8e>
   3694e:	2c00      	cmp	r4, #0
   36950:	d10f      	bne.n	36972 <__gedf2+0x56>
   36952:	4330      	orrs	r0, r6
   36954:	0007      	movs	r7, r0
   36956:	4681      	mov	r9, r0
   36958:	4278      	negs	r0, r7
   3695a:	4178      	adcs	r0, r7
   3695c:	b2c0      	uxtb	r0, r0
   3695e:	2d00      	cmp	r5, #0
   36960:	d117      	bne.n	36992 <__gedf2+0x76>
   36962:	465f      	mov	r7, fp
   36964:	433a      	orrs	r2, r7
   36966:	d114      	bne.n	36992 <__gedf2+0x76>
   36968:	464b      	mov	r3, r9
   3696a:	2000      	movs	r0, #0
   3696c:	2b00      	cmp	r3, #0
   3696e:	d00a      	beq.n	36986 <__gedf2+0x6a>
   36970:	e006      	b.n	36980 <__gedf2+0x64>
   36972:	2d00      	cmp	r5, #0
   36974:	d102      	bne.n	3697c <__gedf2+0x60>
   36976:	4658      	mov	r0, fp
   36978:	4302      	orrs	r2, r0
   3697a:	d001      	beq.n	36980 <__gedf2+0x64>
   3697c:	4299      	cmp	r1, r3
   3697e:	d018      	beq.n	369b2 <__gedf2+0x96>
   36980:	4248      	negs	r0, r1
   36982:	2101      	movs	r1, #1
   36984:	4308      	orrs	r0, r1
   36986:	bc3c      	pop	{r2, r3, r4, r5}
   36988:	4690      	mov	r8, r2
   3698a:	4699      	mov	r9, r3
   3698c:	46a2      	mov	sl, r4
   3698e:	46ab      	mov	fp, r5
   36990:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36992:	2800      	cmp	r0, #0
   36994:	d0f2      	beq.n	3697c <__gedf2+0x60>
   36996:	2001      	movs	r0, #1
   36998:	3b01      	subs	r3, #1
   3699a:	4318      	orrs	r0, r3
   3699c:	e7f3      	b.n	36986 <__gedf2+0x6a>
   3699e:	0037      	movs	r7, r6
   369a0:	4307      	orrs	r7, r0
   369a2:	d0d1      	beq.n	36948 <__gedf2+0x2c>
   369a4:	2002      	movs	r0, #2
   369a6:	4240      	negs	r0, r0
   369a8:	e7ed      	b.n	36986 <__gedf2+0x6a>
   369aa:	465f      	mov	r7, fp
   369ac:	4317      	orrs	r7, r2
   369ae:	d0ce      	beq.n	3694e <__gedf2+0x32>
   369b0:	e7f8      	b.n	369a4 <__gedf2+0x88>
   369b2:	42ac      	cmp	r4, r5
   369b4:	dce4      	bgt.n	36980 <__gedf2+0x64>
   369b6:	da03      	bge.n	369c0 <__gedf2+0xa4>
   369b8:	1e48      	subs	r0, r1, #1
   369ba:	2101      	movs	r1, #1
   369bc:	4308      	orrs	r0, r1
   369be:	e7e2      	b.n	36986 <__gedf2+0x6a>
   369c0:	455e      	cmp	r6, fp
   369c2:	d8dd      	bhi.n	36980 <__gedf2+0x64>
   369c4:	d006      	beq.n	369d4 <__gedf2+0xb8>
   369c6:	2000      	movs	r0, #0
   369c8:	455e      	cmp	r6, fp
   369ca:	d2dc      	bcs.n	36986 <__gedf2+0x6a>
   369cc:	2301      	movs	r3, #1
   369ce:	1e48      	subs	r0, r1, #1
   369d0:	4318      	orrs	r0, r3
   369d2:	e7d8      	b.n	36986 <__gedf2+0x6a>
   369d4:	45c4      	cmp	ip, r8
   369d6:	d8d3      	bhi.n	36980 <__gedf2+0x64>
   369d8:	2000      	movs	r0, #0
   369da:	45c4      	cmp	ip, r8
   369dc:	d3f6      	bcc.n	369cc <__gedf2+0xb0>
   369de:	e7d2      	b.n	36986 <__gedf2+0x6a>
   369e0:	000007ff 	.word	0x000007ff

000369e4 <__ledf2>:
   369e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   369e6:	464e      	mov	r6, r9
   369e8:	4645      	mov	r5, r8
   369ea:	46de      	mov	lr, fp
   369ec:	4657      	mov	r7, sl
   369ee:	005c      	lsls	r4, r3, #1
   369f0:	b5e0      	push	{r5, r6, r7, lr}
   369f2:	031f      	lsls	r7, r3, #12
   369f4:	0fdb      	lsrs	r3, r3, #31
   369f6:	4699      	mov	r9, r3
   369f8:	4b2a      	ldr	r3, [pc, #168]	; (36aa4 <__ledf2+0xc0>)
   369fa:	030e      	lsls	r6, r1, #12
   369fc:	004d      	lsls	r5, r1, #1
   369fe:	0fc9      	lsrs	r1, r1, #31
   36a00:	4684      	mov	ip, r0
   36a02:	0b36      	lsrs	r6, r6, #12
   36a04:	0d6d      	lsrs	r5, r5, #21
   36a06:	468b      	mov	fp, r1
   36a08:	4690      	mov	r8, r2
   36a0a:	0b3f      	lsrs	r7, r7, #12
   36a0c:	0d64      	lsrs	r4, r4, #21
   36a0e:	429d      	cmp	r5, r3
   36a10:	d020      	beq.n	36a54 <__ledf2+0x70>
   36a12:	4b24      	ldr	r3, [pc, #144]	; (36aa4 <__ledf2+0xc0>)
   36a14:	429c      	cmp	r4, r3
   36a16:	d022      	beq.n	36a5e <__ledf2+0x7a>
   36a18:	2d00      	cmp	r5, #0
   36a1a:	d112      	bne.n	36a42 <__ledf2+0x5e>
   36a1c:	4330      	orrs	r0, r6
   36a1e:	4243      	negs	r3, r0
   36a20:	4143      	adcs	r3, r0
   36a22:	b2db      	uxtb	r3, r3
   36a24:	2c00      	cmp	r4, #0
   36a26:	d01f      	beq.n	36a68 <__ledf2+0x84>
   36a28:	2b00      	cmp	r3, #0
   36a2a:	d00c      	beq.n	36a46 <__ledf2+0x62>
   36a2c:	464b      	mov	r3, r9
   36a2e:	2001      	movs	r0, #1
   36a30:	3b01      	subs	r3, #1
   36a32:	4303      	orrs	r3, r0
   36a34:	0018      	movs	r0, r3
   36a36:	bc3c      	pop	{r2, r3, r4, r5}
   36a38:	4690      	mov	r8, r2
   36a3a:	4699      	mov	r9, r3
   36a3c:	46a2      	mov	sl, r4
   36a3e:	46ab      	mov	fp, r5
   36a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36a42:	2c00      	cmp	r4, #0
   36a44:	d016      	beq.n	36a74 <__ledf2+0x90>
   36a46:	45cb      	cmp	fp, r9
   36a48:	d017      	beq.n	36a7a <__ledf2+0x96>
   36a4a:	465b      	mov	r3, fp
   36a4c:	4259      	negs	r1, r3
   36a4e:	2301      	movs	r3, #1
   36a50:	430b      	orrs	r3, r1
   36a52:	e7ef      	b.n	36a34 <__ledf2+0x50>
   36a54:	0031      	movs	r1, r6
   36a56:	2302      	movs	r3, #2
   36a58:	4301      	orrs	r1, r0
   36a5a:	d1eb      	bne.n	36a34 <__ledf2+0x50>
   36a5c:	e7d9      	b.n	36a12 <__ledf2+0x2e>
   36a5e:	0039      	movs	r1, r7
   36a60:	2302      	movs	r3, #2
   36a62:	4311      	orrs	r1, r2
   36a64:	d1e6      	bne.n	36a34 <__ledf2+0x50>
   36a66:	e7d7      	b.n	36a18 <__ledf2+0x34>
   36a68:	433a      	orrs	r2, r7
   36a6a:	d1dd      	bne.n	36a28 <__ledf2+0x44>
   36a6c:	2300      	movs	r3, #0
   36a6e:	2800      	cmp	r0, #0
   36a70:	d0e0      	beq.n	36a34 <__ledf2+0x50>
   36a72:	e7ea      	b.n	36a4a <__ledf2+0x66>
   36a74:	433a      	orrs	r2, r7
   36a76:	d1e6      	bne.n	36a46 <__ledf2+0x62>
   36a78:	e7e7      	b.n	36a4a <__ledf2+0x66>
   36a7a:	42a5      	cmp	r5, r4
   36a7c:	dce5      	bgt.n	36a4a <__ledf2+0x66>
   36a7e:	db05      	blt.n	36a8c <__ledf2+0xa8>
   36a80:	42be      	cmp	r6, r7
   36a82:	d8e2      	bhi.n	36a4a <__ledf2+0x66>
   36a84:	d007      	beq.n	36a96 <__ledf2+0xb2>
   36a86:	2300      	movs	r3, #0
   36a88:	42be      	cmp	r6, r7
   36a8a:	d2d3      	bcs.n	36a34 <__ledf2+0x50>
   36a8c:	4659      	mov	r1, fp
   36a8e:	2301      	movs	r3, #1
   36a90:	3901      	subs	r1, #1
   36a92:	430b      	orrs	r3, r1
   36a94:	e7ce      	b.n	36a34 <__ledf2+0x50>
   36a96:	45c4      	cmp	ip, r8
   36a98:	d8d7      	bhi.n	36a4a <__ledf2+0x66>
   36a9a:	2300      	movs	r3, #0
   36a9c:	45c4      	cmp	ip, r8
   36a9e:	d3f5      	bcc.n	36a8c <__ledf2+0xa8>
   36aa0:	e7c8      	b.n	36a34 <__ledf2+0x50>
   36aa2:	46c0      	nop			; (mov r8, r8)
   36aa4:	000007ff 	.word	0x000007ff

00036aa8 <__aeabi_dmul>:
   36aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   36aaa:	4657      	mov	r7, sl
   36aac:	4645      	mov	r5, r8
   36aae:	46de      	mov	lr, fp
   36ab0:	464e      	mov	r6, r9
   36ab2:	b5e0      	push	{r5, r6, r7, lr}
   36ab4:	030c      	lsls	r4, r1, #12
   36ab6:	4698      	mov	r8, r3
   36ab8:	004e      	lsls	r6, r1, #1
   36aba:	0b23      	lsrs	r3, r4, #12
   36abc:	b087      	sub	sp, #28
   36abe:	0007      	movs	r7, r0
   36ac0:	4692      	mov	sl, r2
   36ac2:	469b      	mov	fp, r3
   36ac4:	0d76      	lsrs	r6, r6, #21
   36ac6:	0fcd      	lsrs	r5, r1, #31
   36ac8:	2e00      	cmp	r6, #0
   36aca:	d06b      	beq.n	36ba4 <__aeabi_dmul+0xfc>
   36acc:	4b6d      	ldr	r3, [pc, #436]	; (36c84 <__aeabi_dmul+0x1dc>)
   36ace:	429e      	cmp	r6, r3
   36ad0:	d035      	beq.n	36b3e <__aeabi_dmul+0x96>
   36ad2:	2480      	movs	r4, #128	; 0x80
   36ad4:	465b      	mov	r3, fp
   36ad6:	0f42      	lsrs	r2, r0, #29
   36ad8:	0424      	lsls	r4, r4, #16
   36ada:	00db      	lsls	r3, r3, #3
   36adc:	4314      	orrs	r4, r2
   36ade:	431c      	orrs	r4, r3
   36ae0:	00c3      	lsls	r3, r0, #3
   36ae2:	4699      	mov	r9, r3
   36ae4:	4b68      	ldr	r3, [pc, #416]	; (36c88 <__aeabi_dmul+0x1e0>)
   36ae6:	46a3      	mov	fp, r4
   36ae8:	469c      	mov	ip, r3
   36aea:	2300      	movs	r3, #0
   36aec:	2700      	movs	r7, #0
   36aee:	4466      	add	r6, ip
   36af0:	9302      	str	r3, [sp, #8]
   36af2:	4643      	mov	r3, r8
   36af4:	031c      	lsls	r4, r3, #12
   36af6:	005a      	lsls	r2, r3, #1
   36af8:	0fdb      	lsrs	r3, r3, #31
   36afa:	4650      	mov	r0, sl
   36afc:	0b24      	lsrs	r4, r4, #12
   36afe:	0d52      	lsrs	r2, r2, #21
   36b00:	4698      	mov	r8, r3
   36b02:	d100      	bne.n	36b06 <__aeabi_dmul+0x5e>
   36b04:	e076      	b.n	36bf4 <__aeabi_dmul+0x14c>
   36b06:	4b5f      	ldr	r3, [pc, #380]	; (36c84 <__aeabi_dmul+0x1dc>)
   36b08:	429a      	cmp	r2, r3
   36b0a:	d06d      	beq.n	36be8 <__aeabi_dmul+0x140>
   36b0c:	2380      	movs	r3, #128	; 0x80
   36b0e:	0f41      	lsrs	r1, r0, #29
   36b10:	041b      	lsls	r3, r3, #16
   36b12:	430b      	orrs	r3, r1
   36b14:	495c      	ldr	r1, [pc, #368]	; (36c88 <__aeabi_dmul+0x1e0>)
   36b16:	00e4      	lsls	r4, r4, #3
   36b18:	468c      	mov	ip, r1
   36b1a:	431c      	orrs	r4, r3
   36b1c:	00c3      	lsls	r3, r0, #3
   36b1e:	2000      	movs	r0, #0
   36b20:	4462      	add	r2, ip
   36b22:	4641      	mov	r1, r8
   36b24:	18b6      	adds	r6, r6, r2
   36b26:	4069      	eors	r1, r5
   36b28:	1c72      	adds	r2, r6, #1
   36b2a:	9101      	str	r1, [sp, #4]
   36b2c:	4694      	mov	ip, r2
   36b2e:	4307      	orrs	r7, r0
   36b30:	2f0f      	cmp	r7, #15
   36b32:	d900      	bls.n	36b36 <__aeabi_dmul+0x8e>
   36b34:	e0b0      	b.n	36c98 <__aeabi_dmul+0x1f0>
   36b36:	4a55      	ldr	r2, [pc, #340]	; (36c8c <__aeabi_dmul+0x1e4>)
   36b38:	00bf      	lsls	r7, r7, #2
   36b3a:	59d2      	ldr	r2, [r2, r7]
   36b3c:	4697      	mov	pc, r2
   36b3e:	465b      	mov	r3, fp
   36b40:	4303      	orrs	r3, r0
   36b42:	4699      	mov	r9, r3
   36b44:	d000      	beq.n	36b48 <__aeabi_dmul+0xa0>
   36b46:	e087      	b.n	36c58 <__aeabi_dmul+0x1b0>
   36b48:	2300      	movs	r3, #0
   36b4a:	469b      	mov	fp, r3
   36b4c:	3302      	adds	r3, #2
   36b4e:	2708      	movs	r7, #8
   36b50:	9302      	str	r3, [sp, #8]
   36b52:	e7ce      	b.n	36af2 <__aeabi_dmul+0x4a>
   36b54:	4642      	mov	r2, r8
   36b56:	9201      	str	r2, [sp, #4]
   36b58:	2802      	cmp	r0, #2
   36b5a:	d067      	beq.n	36c2c <__aeabi_dmul+0x184>
   36b5c:	2803      	cmp	r0, #3
   36b5e:	d100      	bne.n	36b62 <__aeabi_dmul+0xba>
   36b60:	e20e      	b.n	36f80 <__aeabi_dmul+0x4d8>
   36b62:	2801      	cmp	r0, #1
   36b64:	d000      	beq.n	36b68 <__aeabi_dmul+0xc0>
   36b66:	e162      	b.n	36e2e <__aeabi_dmul+0x386>
   36b68:	2300      	movs	r3, #0
   36b6a:	2400      	movs	r4, #0
   36b6c:	2200      	movs	r2, #0
   36b6e:	4699      	mov	r9, r3
   36b70:	9901      	ldr	r1, [sp, #4]
   36b72:	4001      	ands	r1, r0
   36b74:	b2cd      	uxtb	r5, r1
   36b76:	2100      	movs	r1, #0
   36b78:	0312      	lsls	r2, r2, #12
   36b7a:	0d0b      	lsrs	r3, r1, #20
   36b7c:	0b12      	lsrs	r2, r2, #12
   36b7e:	051b      	lsls	r3, r3, #20
   36b80:	4313      	orrs	r3, r2
   36b82:	4a43      	ldr	r2, [pc, #268]	; (36c90 <__aeabi_dmul+0x1e8>)
   36b84:	0524      	lsls	r4, r4, #20
   36b86:	4013      	ands	r3, r2
   36b88:	431c      	orrs	r4, r3
   36b8a:	0064      	lsls	r4, r4, #1
   36b8c:	07ed      	lsls	r5, r5, #31
   36b8e:	0864      	lsrs	r4, r4, #1
   36b90:	432c      	orrs	r4, r5
   36b92:	4648      	mov	r0, r9
   36b94:	0021      	movs	r1, r4
   36b96:	b007      	add	sp, #28
   36b98:	bc3c      	pop	{r2, r3, r4, r5}
   36b9a:	4690      	mov	r8, r2
   36b9c:	4699      	mov	r9, r3
   36b9e:	46a2      	mov	sl, r4
   36ba0:	46ab      	mov	fp, r5
   36ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36ba4:	4303      	orrs	r3, r0
   36ba6:	4699      	mov	r9, r3
   36ba8:	d04f      	beq.n	36c4a <__aeabi_dmul+0x1a2>
   36baa:	465b      	mov	r3, fp
   36bac:	2b00      	cmp	r3, #0
   36bae:	d100      	bne.n	36bb2 <__aeabi_dmul+0x10a>
   36bb0:	e189      	b.n	36ec6 <__aeabi_dmul+0x41e>
   36bb2:	4658      	mov	r0, fp
   36bb4:	f000 fd7a 	bl	376ac <__clzsi2>
   36bb8:	0003      	movs	r3, r0
   36bba:	3b0b      	subs	r3, #11
   36bbc:	2b1c      	cmp	r3, #28
   36bbe:	dd00      	ble.n	36bc2 <__aeabi_dmul+0x11a>
   36bc0:	e17a      	b.n	36eb8 <__aeabi_dmul+0x410>
   36bc2:	221d      	movs	r2, #29
   36bc4:	1ad3      	subs	r3, r2, r3
   36bc6:	003a      	movs	r2, r7
   36bc8:	0001      	movs	r1, r0
   36bca:	465c      	mov	r4, fp
   36bcc:	40da      	lsrs	r2, r3
   36bce:	3908      	subs	r1, #8
   36bd0:	408c      	lsls	r4, r1
   36bd2:	0013      	movs	r3, r2
   36bd4:	408f      	lsls	r7, r1
   36bd6:	4323      	orrs	r3, r4
   36bd8:	469b      	mov	fp, r3
   36bda:	46b9      	mov	r9, r7
   36bdc:	2300      	movs	r3, #0
   36bde:	4e2d      	ldr	r6, [pc, #180]	; (36c94 <__aeabi_dmul+0x1ec>)
   36be0:	2700      	movs	r7, #0
   36be2:	1a36      	subs	r6, r6, r0
   36be4:	9302      	str	r3, [sp, #8]
   36be6:	e784      	b.n	36af2 <__aeabi_dmul+0x4a>
   36be8:	4653      	mov	r3, sl
   36bea:	4323      	orrs	r3, r4
   36bec:	d12a      	bne.n	36c44 <__aeabi_dmul+0x19c>
   36bee:	2400      	movs	r4, #0
   36bf0:	2002      	movs	r0, #2
   36bf2:	e796      	b.n	36b22 <__aeabi_dmul+0x7a>
   36bf4:	4653      	mov	r3, sl
   36bf6:	4323      	orrs	r3, r4
   36bf8:	d020      	beq.n	36c3c <__aeabi_dmul+0x194>
   36bfa:	2c00      	cmp	r4, #0
   36bfc:	d100      	bne.n	36c00 <__aeabi_dmul+0x158>
   36bfe:	e157      	b.n	36eb0 <__aeabi_dmul+0x408>
   36c00:	0020      	movs	r0, r4
   36c02:	f000 fd53 	bl	376ac <__clzsi2>
   36c06:	0003      	movs	r3, r0
   36c08:	3b0b      	subs	r3, #11
   36c0a:	2b1c      	cmp	r3, #28
   36c0c:	dd00      	ble.n	36c10 <__aeabi_dmul+0x168>
   36c0e:	e149      	b.n	36ea4 <__aeabi_dmul+0x3fc>
   36c10:	211d      	movs	r1, #29
   36c12:	1acb      	subs	r3, r1, r3
   36c14:	4651      	mov	r1, sl
   36c16:	0002      	movs	r2, r0
   36c18:	40d9      	lsrs	r1, r3
   36c1a:	4653      	mov	r3, sl
   36c1c:	3a08      	subs	r2, #8
   36c1e:	4094      	lsls	r4, r2
   36c20:	4093      	lsls	r3, r2
   36c22:	430c      	orrs	r4, r1
   36c24:	4a1b      	ldr	r2, [pc, #108]	; (36c94 <__aeabi_dmul+0x1ec>)
   36c26:	1a12      	subs	r2, r2, r0
   36c28:	2000      	movs	r0, #0
   36c2a:	e77a      	b.n	36b22 <__aeabi_dmul+0x7a>
   36c2c:	2501      	movs	r5, #1
   36c2e:	9b01      	ldr	r3, [sp, #4]
   36c30:	4c14      	ldr	r4, [pc, #80]	; (36c84 <__aeabi_dmul+0x1dc>)
   36c32:	401d      	ands	r5, r3
   36c34:	2300      	movs	r3, #0
   36c36:	2200      	movs	r2, #0
   36c38:	4699      	mov	r9, r3
   36c3a:	e79c      	b.n	36b76 <__aeabi_dmul+0xce>
   36c3c:	2400      	movs	r4, #0
   36c3e:	2200      	movs	r2, #0
   36c40:	2001      	movs	r0, #1
   36c42:	e76e      	b.n	36b22 <__aeabi_dmul+0x7a>
   36c44:	4653      	mov	r3, sl
   36c46:	2003      	movs	r0, #3
   36c48:	e76b      	b.n	36b22 <__aeabi_dmul+0x7a>
   36c4a:	2300      	movs	r3, #0
   36c4c:	469b      	mov	fp, r3
   36c4e:	3301      	adds	r3, #1
   36c50:	2704      	movs	r7, #4
   36c52:	2600      	movs	r6, #0
   36c54:	9302      	str	r3, [sp, #8]
   36c56:	e74c      	b.n	36af2 <__aeabi_dmul+0x4a>
   36c58:	2303      	movs	r3, #3
   36c5a:	4681      	mov	r9, r0
   36c5c:	270c      	movs	r7, #12
   36c5e:	9302      	str	r3, [sp, #8]
   36c60:	e747      	b.n	36af2 <__aeabi_dmul+0x4a>
   36c62:	2280      	movs	r2, #128	; 0x80
   36c64:	2300      	movs	r3, #0
   36c66:	2500      	movs	r5, #0
   36c68:	0312      	lsls	r2, r2, #12
   36c6a:	4699      	mov	r9, r3
   36c6c:	4c05      	ldr	r4, [pc, #20]	; (36c84 <__aeabi_dmul+0x1dc>)
   36c6e:	e782      	b.n	36b76 <__aeabi_dmul+0xce>
   36c70:	465c      	mov	r4, fp
   36c72:	464b      	mov	r3, r9
   36c74:	9802      	ldr	r0, [sp, #8]
   36c76:	e76f      	b.n	36b58 <__aeabi_dmul+0xb0>
   36c78:	465c      	mov	r4, fp
   36c7a:	464b      	mov	r3, r9
   36c7c:	9501      	str	r5, [sp, #4]
   36c7e:	9802      	ldr	r0, [sp, #8]
   36c80:	e76a      	b.n	36b58 <__aeabi_dmul+0xb0>
   36c82:	46c0      	nop			; (mov r8, r8)
   36c84:	000007ff 	.word	0x000007ff
   36c88:	fffffc01 	.word	0xfffffc01
   36c8c:	0003d478 	.word	0x0003d478
   36c90:	800fffff 	.word	0x800fffff
   36c94:	fffffc0d 	.word	0xfffffc0d
   36c98:	464a      	mov	r2, r9
   36c9a:	4649      	mov	r1, r9
   36c9c:	0c17      	lsrs	r7, r2, #16
   36c9e:	0c1a      	lsrs	r2, r3, #16
   36ca0:	041b      	lsls	r3, r3, #16
   36ca2:	0c1b      	lsrs	r3, r3, #16
   36ca4:	0408      	lsls	r0, r1, #16
   36ca6:	0019      	movs	r1, r3
   36ca8:	0c00      	lsrs	r0, r0, #16
   36caa:	4341      	muls	r1, r0
   36cac:	0015      	movs	r5, r2
   36cae:	4688      	mov	r8, r1
   36cb0:	0019      	movs	r1, r3
   36cb2:	437d      	muls	r5, r7
   36cb4:	4379      	muls	r1, r7
   36cb6:	9503      	str	r5, [sp, #12]
   36cb8:	4689      	mov	r9, r1
   36cba:	0029      	movs	r1, r5
   36cbc:	0015      	movs	r5, r2
   36cbe:	4345      	muls	r5, r0
   36cc0:	444d      	add	r5, r9
   36cc2:	9502      	str	r5, [sp, #8]
   36cc4:	4645      	mov	r5, r8
   36cc6:	0c2d      	lsrs	r5, r5, #16
   36cc8:	46aa      	mov	sl, r5
   36cca:	9d02      	ldr	r5, [sp, #8]
   36ccc:	4455      	add	r5, sl
   36cce:	45a9      	cmp	r9, r5
   36cd0:	d906      	bls.n	36ce0 <__aeabi_dmul+0x238>
   36cd2:	468a      	mov	sl, r1
   36cd4:	2180      	movs	r1, #128	; 0x80
   36cd6:	0249      	lsls	r1, r1, #9
   36cd8:	4689      	mov	r9, r1
   36cda:	44ca      	add	sl, r9
   36cdc:	4651      	mov	r1, sl
   36cde:	9103      	str	r1, [sp, #12]
   36ce0:	0c29      	lsrs	r1, r5, #16
   36ce2:	9104      	str	r1, [sp, #16]
   36ce4:	4641      	mov	r1, r8
   36ce6:	0409      	lsls	r1, r1, #16
   36ce8:	042d      	lsls	r5, r5, #16
   36cea:	0c09      	lsrs	r1, r1, #16
   36cec:	4688      	mov	r8, r1
   36cee:	0029      	movs	r1, r5
   36cf0:	0c25      	lsrs	r5, r4, #16
   36cf2:	0424      	lsls	r4, r4, #16
   36cf4:	4441      	add	r1, r8
   36cf6:	0c24      	lsrs	r4, r4, #16
   36cf8:	9105      	str	r1, [sp, #20]
   36cfa:	0021      	movs	r1, r4
   36cfc:	4341      	muls	r1, r0
   36cfe:	4688      	mov	r8, r1
   36d00:	0021      	movs	r1, r4
   36d02:	4379      	muls	r1, r7
   36d04:	468a      	mov	sl, r1
   36d06:	4368      	muls	r0, r5
   36d08:	4641      	mov	r1, r8
   36d0a:	4450      	add	r0, sl
   36d0c:	4681      	mov	r9, r0
   36d0e:	0c08      	lsrs	r0, r1, #16
   36d10:	4448      	add	r0, r9
   36d12:	436f      	muls	r7, r5
   36d14:	4582      	cmp	sl, r0
   36d16:	d903      	bls.n	36d20 <__aeabi_dmul+0x278>
   36d18:	2180      	movs	r1, #128	; 0x80
   36d1a:	0249      	lsls	r1, r1, #9
   36d1c:	4689      	mov	r9, r1
   36d1e:	444f      	add	r7, r9
   36d20:	0c01      	lsrs	r1, r0, #16
   36d22:	4689      	mov	r9, r1
   36d24:	0039      	movs	r1, r7
   36d26:	4449      	add	r1, r9
   36d28:	9102      	str	r1, [sp, #8]
   36d2a:	4641      	mov	r1, r8
   36d2c:	040f      	lsls	r7, r1, #16
   36d2e:	9904      	ldr	r1, [sp, #16]
   36d30:	0c3f      	lsrs	r7, r7, #16
   36d32:	4688      	mov	r8, r1
   36d34:	0400      	lsls	r0, r0, #16
   36d36:	19c0      	adds	r0, r0, r7
   36d38:	4480      	add	r8, r0
   36d3a:	4641      	mov	r1, r8
   36d3c:	9104      	str	r1, [sp, #16]
   36d3e:	4659      	mov	r1, fp
   36d40:	0c0f      	lsrs	r7, r1, #16
   36d42:	0409      	lsls	r1, r1, #16
   36d44:	0c09      	lsrs	r1, r1, #16
   36d46:	4688      	mov	r8, r1
   36d48:	4359      	muls	r1, r3
   36d4a:	468a      	mov	sl, r1
   36d4c:	0039      	movs	r1, r7
   36d4e:	4351      	muls	r1, r2
   36d50:	4689      	mov	r9, r1
   36d52:	4641      	mov	r1, r8
   36d54:	434a      	muls	r2, r1
   36d56:	4651      	mov	r1, sl
   36d58:	0c09      	lsrs	r1, r1, #16
   36d5a:	468b      	mov	fp, r1
   36d5c:	437b      	muls	r3, r7
   36d5e:	18d2      	adds	r2, r2, r3
   36d60:	445a      	add	r2, fp
   36d62:	4293      	cmp	r3, r2
   36d64:	d903      	bls.n	36d6e <__aeabi_dmul+0x2c6>
   36d66:	2380      	movs	r3, #128	; 0x80
   36d68:	025b      	lsls	r3, r3, #9
   36d6a:	469b      	mov	fp, r3
   36d6c:	44d9      	add	r9, fp
   36d6e:	4651      	mov	r1, sl
   36d70:	0409      	lsls	r1, r1, #16
   36d72:	0c09      	lsrs	r1, r1, #16
   36d74:	468a      	mov	sl, r1
   36d76:	4641      	mov	r1, r8
   36d78:	4361      	muls	r1, r4
   36d7a:	437c      	muls	r4, r7
   36d7c:	0c13      	lsrs	r3, r2, #16
   36d7e:	0412      	lsls	r2, r2, #16
   36d80:	444b      	add	r3, r9
   36d82:	4452      	add	r2, sl
   36d84:	46a1      	mov	r9, r4
   36d86:	468a      	mov	sl, r1
   36d88:	003c      	movs	r4, r7
   36d8a:	4641      	mov	r1, r8
   36d8c:	436c      	muls	r4, r5
   36d8e:	434d      	muls	r5, r1
   36d90:	4651      	mov	r1, sl
   36d92:	444d      	add	r5, r9
   36d94:	0c0f      	lsrs	r7, r1, #16
   36d96:	197d      	adds	r5, r7, r5
   36d98:	45a9      	cmp	r9, r5
   36d9a:	d903      	bls.n	36da4 <__aeabi_dmul+0x2fc>
   36d9c:	2180      	movs	r1, #128	; 0x80
   36d9e:	0249      	lsls	r1, r1, #9
   36da0:	4688      	mov	r8, r1
   36da2:	4444      	add	r4, r8
   36da4:	9f04      	ldr	r7, [sp, #16]
   36da6:	9903      	ldr	r1, [sp, #12]
   36da8:	46b8      	mov	r8, r7
   36daa:	4441      	add	r1, r8
   36dac:	468b      	mov	fp, r1
   36dae:	4583      	cmp	fp, r0
   36db0:	4180      	sbcs	r0, r0
   36db2:	4241      	negs	r1, r0
   36db4:	4688      	mov	r8, r1
   36db6:	4651      	mov	r1, sl
   36db8:	0408      	lsls	r0, r1, #16
   36dba:	042f      	lsls	r7, r5, #16
   36dbc:	0c00      	lsrs	r0, r0, #16
   36dbe:	183f      	adds	r7, r7, r0
   36dc0:	4658      	mov	r0, fp
   36dc2:	9902      	ldr	r1, [sp, #8]
   36dc4:	1810      	adds	r0, r2, r0
   36dc6:	4689      	mov	r9, r1
   36dc8:	4290      	cmp	r0, r2
   36dca:	4192      	sbcs	r2, r2
   36dcc:	444f      	add	r7, r9
   36dce:	46ba      	mov	sl, r7
   36dd0:	4252      	negs	r2, r2
   36dd2:	4699      	mov	r9, r3
   36dd4:	4693      	mov	fp, r2
   36dd6:	44c2      	add	sl, r8
   36dd8:	44d1      	add	r9, sl
   36dda:	44cb      	add	fp, r9
   36ddc:	428f      	cmp	r7, r1
   36dde:	41bf      	sbcs	r7, r7
   36de0:	45c2      	cmp	sl, r8
   36de2:	4189      	sbcs	r1, r1
   36de4:	4599      	cmp	r9, r3
   36de6:	419b      	sbcs	r3, r3
   36de8:	4593      	cmp	fp, r2
   36dea:	4192      	sbcs	r2, r2
   36dec:	427f      	negs	r7, r7
   36dee:	4249      	negs	r1, r1
   36df0:	0c2d      	lsrs	r5, r5, #16
   36df2:	4252      	negs	r2, r2
   36df4:	430f      	orrs	r7, r1
   36df6:	425b      	negs	r3, r3
   36df8:	4313      	orrs	r3, r2
   36dfa:	197f      	adds	r7, r7, r5
   36dfc:	18ff      	adds	r7, r7, r3
   36dfe:	465b      	mov	r3, fp
   36e00:	193c      	adds	r4, r7, r4
   36e02:	0ddb      	lsrs	r3, r3, #23
   36e04:	9a05      	ldr	r2, [sp, #20]
   36e06:	0264      	lsls	r4, r4, #9
   36e08:	431c      	orrs	r4, r3
   36e0a:	0243      	lsls	r3, r0, #9
   36e0c:	4313      	orrs	r3, r2
   36e0e:	1e5d      	subs	r5, r3, #1
   36e10:	41ab      	sbcs	r3, r5
   36e12:	465a      	mov	r2, fp
   36e14:	0dc0      	lsrs	r0, r0, #23
   36e16:	4303      	orrs	r3, r0
   36e18:	0252      	lsls	r2, r2, #9
   36e1a:	4313      	orrs	r3, r2
   36e1c:	01e2      	lsls	r2, r4, #7
   36e1e:	d556      	bpl.n	36ece <__aeabi_dmul+0x426>
   36e20:	2001      	movs	r0, #1
   36e22:	085a      	lsrs	r2, r3, #1
   36e24:	4003      	ands	r3, r0
   36e26:	4313      	orrs	r3, r2
   36e28:	07e2      	lsls	r2, r4, #31
   36e2a:	4313      	orrs	r3, r2
   36e2c:	0864      	lsrs	r4, r4, #1
   36e2e:	485a      	ldr	r0, [pc, #360]	; (36f98 <__aeabi_dmul+0x4f0>)
   36e30:	4460      	add	r0, ip
   36e32:	2800      	cmp	r0, #0
   36e34:	dd4d      	ble.n	36ed2 <__aeabi_dmul+0x42a>
   36e36:	075a      	lsls	r2, r3, #29
   36e38:	d009      	beq.n	36e4e <__aeabi_dmul+0x3a6>
   36e3a:	220f      	movs	r2, #15
   36e3c:	401a      	ands	r2, r3
   36e3e:	2a04      	cmp	r2, #4
   36e40:	d005      	beq.n	36e4e <__aeabi_dmul+0x3a6>
   36e42:	1d1a      	adds	r2, r3, #4
   36e44:	429a      	cmp	r2, r3
   36e46:	419b      	sbcs	r3, r3
   36e48:	425b      	negs	r3, r3
   36e4a:	18e4      	adds	r4, r4, r3
   36e4c:	0013      	movs	r3, r2
   36e4e:	01e2      	lsls	r2, r4, #7
   36e50:	d504      	bpl.n	36e5c <__aeabi_dmul+0x3b4>
   36e52:	2080      	movs	r0, #128	; 0x80
   36e54:	4a51      	ldr	r2, [pc, #324]	; (36f9c <__aeabi_dmul+0x4f4>)
   36e56:	00c0      	lsls	r0, r0, #3
   36e58:	4014      	ands	r4, r2
   36e5a:	4460      	add	r0, ip
   36e5c:	4a50      	ldr	r2, [pc, #320]	; (36fa0 <__aeabi_dmul+0x4f8>)
   36e5e:	4290      	cmp	r0, r2
   36e60:	dd00      	ble.n	36e64 <__aeabi_dmul+0x3bc>
   36e62:	e6e3      	b.n	36c2c <__aeabi_dmul+0x184>
   36e64:	2501      	movs	r5, #1
   36e66:	08db      	lsrs	r3, r3, #3
   36e68:	0762      	lsls	r2, r4, #29
   36e6a:	431a      	orrs	r2, r3
   36e6c:	0264      	lsls	r4, r4, #9
   36e6e:	9b01      	ldr	r3, [sp, #4]
   36e70:	4691      	mov	r9, r2
   36e72:	0b22      	lsrs	r2, r4, #12
   36e74:	0544      	lsls	r4, r0, #21
   36e76:	0d64      	lsrs	r4, r4, #21
   36e78:	401d      	ands	r5, r3
   36e7a:	e67c      	b.n	36b76 <__aeabi_dmul+0xce>
   36e7c:	2280      	movs	r2, #128	; 0x80
   36e7e:	4659      	mov	r1, fp
   36e80:	0312      	lsls	r2, r2, #12
   36e82:	4211      	tst	r1, r2
   36e84:	d008      	beq.n	36e98 <__aeabi_dmul+0x3f0>
   36e86:	4214      	tst	r4, r2
   36e88:	d106      	bne.n	36e98 <__aeabi_dmul+0x3f0>
   36e8a:	4322      	orrs	r2, r4
   36e8c:	0312      	lsls	r2, r2, #12
   36e8e:	0b12      	lsrs	r2, r2, #12
   36e90:	4645      	mov	r5, r8
   36e92:	4699      	mov	r9, r3
   36e94:	4c43      	ldr	r4, [pc, #268]	; (36fa4 <__aeabi_dmul+0x4fc>)
   36e96:	e66e      	b.n	36b76 <__aeabi_dmul+0xce>
   36e98:	465b      	mov	r3, fp
   36e9a:	431a      	orrs	r2, r3
   36e9c:	0312      	lsls	r2, r2, #12
   36e9e:	0b12      	lsrs	r2, r2, #12
   36ea0:	4c40      	ldr	r4, [pc, #256]	; (36fa4 <__aeabi_dmul+0x4fc>)
   36ea2:	e668      	b.n	36b76 <__aeabi_dmul+0xce>
   36ea4:	0003      	movs	r3, r0
   36ea6:	4654      	mov	r4, sl
   36ea8:	3b28      	subs	r3, #40	; 0x28
   36eaa:	409c      	lsls	r4, r3
   36eac:	2300      	movs	r3, #0
   36eae:	e6b9      	b.n	36c24 <__aeabi_dmul+0x17c>
   36eb0:	f000 fbfc 	bl	376ac <__clzsi2>
   36eb4:	3020      	adds	r0, #32
   36eb6:	e6a6      	b.n	36c06 <__aeabi_dmul+0x15e>
   36eb8:	0003      	movs	r3, r0
   36eba:	3b28      	subs	r3, #40	; 0x28
   36ebc:	409f      	lsls	r7, r3
   36ebe:	2300      	movs	r3, #0
   36ec0:	46bb      	mov	fp, r7
   36ec2:	4699      	mov	r9, r3
   36ec4:	e68a      	b.n	36bdc <__aeabi_dmul+0x134>
   36ec6:	f000 fbf1 	bl	376ac <__clzsi2>
   36eca:	3020      	adds	r0, #32
   36ecc:	e674      	b.n	36bb8 <__aeabi_dmul+0x110>
   36ece:	46b4      	mov	ip, r6
   36ed0:	e7ad      	b.n	36e2e <__aeabi_dmul+0x386>
   36ed2:	2501      	movs	r5, #1
   36ed4:	1a2a      	subs	r2, r5, r0
   36ed6:	2a38      	cmp	r2, #56	; 0x38
   36ed8:	dd06      	ble.n	36ee8 <__aeabi_dmul+0x440>
   36eda:	9b01      	ldr	r3, [sp, #4]
   36edc:	2400      	movs	r4, #0
   36ede:	401d      	ands	r5, r3
   36ee0:	2300      	movs	r3, #0
   36ee2:	2200      	movs	r2, #0
   36ee4:	4699      	mov	r9, r3
   36ee6:	e646      	b.n	36b76 <__aeabi_dmul+0xce>
   36ee8:	2a1f      	cmp	r2, #31
   36eea:	dc21      	bgt.n	36f30 <__aeabi_dmul+0x488>
   36eec:	2520      	movs	r5, #32
   36eee:	0020      	movs	r0, r4
   36ef0:	1aad      	subs	r5, r5, r2
   36ef2:	001e      	movs	r6, r3
   36ef4:	40ab      	lsls	r3, r5
   36ef6:	40a8      	lsls	r0, r5
   36ef8:	40d6      	lsrs	r6, r2
   36efa:	1e5d      	subs	r5, r3, #1
   36efc:	41ab      	sbcs	r3, r5
   36efe:	4330      	orrs	r0, r6
   36f00:	4318      	orrs	r0, r3
   36f02:	40d4      	lsrs	r4, r2
   36f04:	0743      	lsls	r3, r0, #29
   36f06:	d009      	beq.n	36f1c <__aeabi_dmul+0x474>
   36f08:	230f      	movs	r3, #15
   36f0a:	4003      	ands	r3, r0
   36f0c:	2b04      	cmp	r3, #4
   36f0e:	d005      	beq.n	36f1c <__aeabi_dmul+0x474>
   36f10:	0003      	movs	r3, r0
   36f12:	1d18      	adds	r0, r3, #4
   36f14:	4298      	cmp	r0, r3
   36f16:	419b      	sbcs	r3, r3
   36f18:	425b      	negs	r3, r3
   36f1a:	18e4      	adds	r4, r4, r3
   36f1c:	0223      	lsls	r3, r4, #8
   36f1e:	d521      	bpl.n	36f64 <__aeabi_dmul+0x4bc>
   36f20:	2501      	movs	r5, #1
   36f22:	9b01      	ldr	r3, [sp, #4]
   36f24:	2401      	movs	r4, #1
   36f26:	401d      	ands	r5, r3
   36f28:	2300      	movs	r3, #0
   36f2a:	2200      	movs	r2, #0
   36f2c:	4699      	mov	r9, r3
   36f2e:	e622      	b.n	36b76 <__aeabi_dmul+0xce>
   36f30:	251f      	movs	r5, #31
   36f32:	0021      	movs	r1, r4
   36f34:	426d      	negs	r5, r5
   36f36:	1a28      	subs	r0, r5, r0
   36f38:	40c1      	lsrs	r1, r0
   36f3a:	0008      	movs	r0, r1
   36f3c:	2a20      	cmp	r2, #32
   36f3e:	d01d      	beq.n	36f7c <__aeabi_dmul+0x4d4>
   36f40:	355f      	adds	r5, #95	; 0x5f
   36f42:	1aaa      	subs	r2, r5, r2
   36f44:	4094      	lsls	r4, r2
   36f46:	4323      	orrs	r3, r4
   36f48:	1e5c      	subs	r4, r3, #1
   36f4a:	41a3      	sbcs	r3, r4
   36f4c:	2507      	movs	r5, #7
   36f4e:	4303      	orrs	r3, r0
   36f50:	401d      	ands	r5, r3
   36f52:	2200      	movs	r2, #0
   36f54:	2d00      	cmp	r5, #0
   36f56:	d009      	beq.n	36f6c <__aeabi_dmul+0x4c4>
   36f58:	220f      	movs	r2, #15
   36f5a:	2400      	movs	r4, #0
   36f5c:	401a      	ands	r2, r3
   36f5e:	0018      	movs	r0, r3
   36f60:	2a04      	cmp	r2, #4
   36f62:	d1d6      	bne.n	36f12 <__aeabi_dmul+0x46a>
   36f64:	0003      	movs	r3, r0
   36f66:	0765      	lsls	r5, r4, #29
   36f68:	0264      	lsls	r4, r4, #9
   36f6a:	0b22      	lsrs	r2, r4, #12
   36f6c:	08db      	lsrs	r3, r3, #3
   36f6e:	432b      	orrs	r3, r5
   36f70:	2501      	movs	r5, #1
   36f72:	4699      	mov	r9, r3
   36f74:	9b01      	ldr	r3, [sp, #4]
   36f76:	2400      	movs	r4, #0
   36f78:	401d      	ands	r5, r3
   36f7a:	e5fc      	b.n	36b76 <__aeabi_dmul+0xce>
   36f7c:	2400      	movs	r4, #0
   36f7e:	e7e2      	b.n	36f46 <__aeabi_dmul+0x49e>
   36f80:	2280      	movs	r2, #128	; 0x80
   36f82:	2501      	movs	r5, #1
   36f84:	0312      	lsls	r2, r2, #12
   36f86:	4322      	orrs	r2, r4
   36f88:	9901      	ldr	r1, [sp, #4]
   36f8a:	0312      	lsls	r2, r2, #12
   36f8c:	0b12      	lsrs	r2, r2, #12
   36f8e:	400d      	ands	r5, r1
   36f90:	4699      	mov	r9, r3
   36f92:	4c04      	ldr	r4, [pc, #16]	; (36fa4 <__aeabi_dmul+0x4fc>)
   36f94:	e5ef      	b.n	36b76 <__aeabi_dmul+0xce>
   36f96:	46c0      	nop			; (mov r8, r8)
   36f98:	000003ff 	.word	0x000003ff
   36f9c:	feffffff 	.word	0xfeffffff
   36fa0:	000007fe 	.word	0x000007fe
   36fa4:	000007ff 	.word	0x000007ff

00036fa8 <__aeabi_dsub>:
   36fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   36faa:	4646      	mov	r6, r8
   36fac:	46d6      	mov	lr, sl
   36fae:	464f      	mov	r7, r9
   36fb0:	030c      	lsls	r4, r1, #12
   36fb2:	b5c0      	push	{r6, r7, lr}
   36fb4:	0fcd      	lsrs	r5, r1, #31
   36fb6:	004e      	lsls	r6, r1, #1
   36fb8:	0a61      	lsrs	r1, r4, #9
   36fba:	0f44      	lsrs	r4, r0, #29
   36fbc:	430c      	orrs	r4, r1
   36fbe:	00c1      	lsls	r1, r0, #3
   36fc0:	0058      	lsls	r0, r3, #1
   36fc2:	0d40      	lsrs	r0, r0, #21
   36fc4:	4684      	mov	ip, r0
   36fc6:	468a      	mov	sl, r1
   36fc8:	000f      	movs	r7, r1
   36fca:	0319      	lsls	r1, r3, #12
   36fcc:	0f50      	lsrs	r0, r2, #29
   36fce:	0a49      	lsrs	r1, r1, #9
   36fd0:	4301      	orrs	r1, r0
   36fd2:	48c6      	ldr	r0, [pc, #792]	; (372ec <__aeabi_dsub+0x344>)
   36fd4:	0d76      	lsrs	r6, r6, #21
   36fd6:	46a8      	mov	r8, r5
   36fd8:	0fdb      	lsrs	r3, r3, #31
   36fda:	00d2      	lsls	r2, r2, #3
   36fdc:	4584      	cmp	ip, r0
   36fde:	d100      	bne.n	36fe2 <__aeabi_dsub+0x3a>
   36fe0:	e0d8      	b.n	37194 <__aeabi_dsub+0x1ec>
   36fe2:	2001      	movs	r0, #1
   36fe4:	4043      	eors	r3, r0
   36fe6:	42ab      	cmp	r3, r5
   36fe8:	d100      	bne.n	36fec <__aeabi_dsub+0x44>
   36fea:	e0a6      	b.n	3713a <__aeabi_dsub+0x192>
   36fec:	4660      	mov	r0, ip
   36fee:	1a35      	subs	r5, r6, r0
   36ff0:	2d00      	cmp	r5, #0
   36ff2:	dc00      	bgt.n	36ff6 <__aeabi_dsub+0x4e>
   36ff4:	e105      	b.n	37202 <__aeabi_dsub+0x25a>
   36ff6:	2800      	cmp	r0, #0
   36ff8:	d110      	bne.n	3701c <__aeabi_dsub+0x74>
   36ffa:	000b      	movs	r3, r1
   36ffc:	4313      	orrs	r3, r2
   36ffe:	d100      	bne.n	37002 <__aeabi_dsub+0x5a>
   37000:	e0d7      	b.n	371b2 <__aeabi_dsub+0x20a>
   37002:	1e6b      	subs	r3, r5, #1
   37004:	2b00      	cmp	r3, #0
   37006:	d000      	beq.n	3700a <__aeabi_dsub+0x62>
   37008:	e14b      	b.n	372a2 <__aeabi_dsub+0x2fa>
   3700a:	4653      	mov	r3, sl
   3700c:	1a9f      	subs	r7, r3, r2
   3700e:	45ba      	cmp	sl, r7
   37010:	4180      	sbcs	r0, r0
   37012:	1a64      	subs	r4, r4, r1
   37014:	4240      	negs	r0, r0
   37016:	1a24      	subs	r4, r4, r0
   37018:	2601      	movs	r6, #1
   3701a:	e01e      	b.n	3705a <__aeabi_dsub+0xb2>
   3701c:	4bb3      	ldr	r3, [pc, #716]	; (372ec <__aeabi_dsub+0x344>)
   3701e:	429e      	cmp	r6, r3
   37020:	d048      	beq.n	370b4 <__aeabi_dsub+0x10c>
   37022:	2380      	movs	r3, #128	; 0x80
   37024:	041b      	lsls	r3, r3, #16
   37026:	4319      	orrs	r1, r3
   37028:	2d38      	cmp	r5, #56	; 0x38
   3702a:	dd00      	ble.n	3702e <__aeabi_dsub+0x86>
   3702c:	e119      	b.n	37262 <__aeabi_dsub+0x2ba>
   3702e:	2d1f      	cmp	r5, #31
   37030:	dd00      	ble.n	37034 <__aeabi_dsub+0x8c>
   37032:	e14c      	b.n	372ce <__aeabi_dsub+0x326>
   37034:	2320      	movs	r3, #32
   37036:	000f      	movs	r7, r1
   37038:	1b5b      	subs	r3, r3, r5
   3703a:	0010      	movs	r0, r2
   3703c:	409a      	lsls	r2, r3
   3703e:	409f      	lsls	r7, r3
   37040:	40e8      	lsrs	r0, r5
   37042:	1e53      	subs	r3, r2, #1
   37044:	419a      	sbcs	r2, r3
   37046:	40e9      	lsrs	r1, r5
   37048:	4307      	orrs	r7, r0
   3704a:	4317      	orrs	r7, r2
   3704c:	4653      	mov	r3, sl
   3704e:	1bdf      	subs	r7, r3, r7
   37050:	1a61      	subs	r1, r4, r1
   37052:	45ba      	cmp	sl, r7
   37054:	41a4      	sbcs	r4, r4
   37056:	4264      	negs	r4, r4
   37058:	1b0c      	subs	r4, r1, r4
   3705a:	0223      	lsls	r3, r4, #8
   3705c:	d400      	bmi.n	37060 <__aeabi_dsub+0xb8>
   3705e:	e0c5      	b.n	371ec <__aeabi_dsub+0x244>
   37060:	0264      	lsls	r4, r4, #9
   37062:	0a65      	lsrs	r5, r4, #9
   37064:	2d00      	cmp	r5, #0
   37066:	d100      	bne.n	3706a <__aeabi_dsub+0xc2>
   37068:	e0f6      	b.n	37258 <__aeabi_dsub+0x2b0>
   3706a:	0028      	movs	r0, r5
   3706c:	f000 fb1e 	bl	376ac <__clzsi2>
   37070:	0003      	movs	r3, r0
   37072:	3b08      	subs	r3, #8
   37074:	2b1f      	cmp	r3, #31
   37076:	dd00      	ble.n	3707a <__aeabi_dsub+0xd2>
   37078:	e0e9      	b.n	3724e <__aeabi_dsub+0x2a6>
   3707a:	2220      	movs	r2, #32
   3707c:	003c      	movs	r4, r7
   3707e:	1ad2      	subs	r2, r2, r3
   37080:	409d      	lsls	r5, r3
   37082:	40d4      	lsrs	r4, r2
   37084:	409f      	lsls	r7, r3
   37086:	4325      	orrs	r5, r4
   37088:	429e      	cmp	r6, r3
   3708a:	dd00      	ble.n	3708e <__aeabi_dsub+0xe6>
   3708c:	e0db      	b.n	37246 <__aeabi_dsub+0x29e>
   3708e:	1b9e      	subs	r6, r3, r6
   37090:	1c73      	adds	r3, r6, #1
   37092:	2b1f      	cmp	r3, #31
   37094:	dd00      	ble.n	37098 <__aeabi_dsub+0xf0>
   37096:	e10a      	b.n	372ae <__aeabi_dsub+0x306>
   37098:	2220      	movs	r2, #32
   3709a:	0038      	movs	r0, r7
   3709c:	1ad2      	subs	r2, r2, r3
   3709e:	0029      	movs	r1, r5
   370a0:	4097      	lsls	r7, r2
   370a2:	002c      	movs	r4, r5
   370a4:	4091      	lsls	r1, r2
   370a6:	40d8      	lsrs	r0, r3
   370a8:	1e7a      	subs	r2, r7, #1
   370aa:	4197      	sbcs	r7, r2
   370ac:	40dc      	lsrs	r4, r3
   370ae:	2600      	movs	r6, #0
   370b0:	4301      	orrs	r1, r0
   370b2:	430f      	orrs	r7, r1
   370b4:	077b      	lsls	r3, r7, #29
   370b6:	d009      	beq.n	370cc <__aeabi_dsub+0x124>
   370b8:	230f      	movs	r3, #15
   370ba:	403b      	ands	r3, r7
   370bc:	2b04      	cmp	r3, #4
   370be:	d005      	beq.n	370cc <__aeabi_dsub+0x124>
   370c0:	1d3b      	adds	r3, r7, #4
   370c2:	42bb      	cmp	r3, r7
   370c4:	41bf      	sbcs	r7, r7
   370c6:	427f      	negs	r7, r7
   370c8:	19e4      	adds	r4, r4, r7
   370ca:	001f      	movs	r7, r3
   370cc:	0223      	lsls	r3, r4, #8
   370ce:	d525      	bpl.n	3711c <__aeabi_dsub+0x174>
   370d0:	4b86      	ldr	r3, [pc, #536]	; (372ec <__aeabi_dsub+0x344>)
   370d2:	3601      	adds	r6, #1
   370d4:	429e      	cmp	r6, r3
   370d6:	d100      	bne.n	370da <__aeabi_dsub+0x132>
   370d8:	e0af      	b.n	3723a <__aeabi_dsub+0x292>
   370da:	4b85      	ldr	r3, [pc, #532]	; (372f0 <__aeabi_dsub+0x348>)
   370dc:	2501      	movs	r5, #1
   370de:	401c      	ands	r4, r3
   370e0:	4643      	mov	r3, r8
   370e2:	0762      	lsls	r2, r4, #29
   370e4:	08ff      	lsrs	r7, r7, #3
   370e6:	0264      	lsls	r4, r4, #9
   370e8:	0576      	lsls	r6, r6, #21
   370ea:	4317      	orrs	r7, r2
   370ec:	0b24      	lsrs	r4, r4, #12
   370ee:	0d76      	lsrs	r6, r6, #21
   370f0:	401d      	ands	r5, r3
   370f2:	2100      	movs	r1, #0
   370f4:	0324      	lsls	r4, r4, #12
   370f6:	0b23      	lsrs	r3, r4, #12
   370f8:	0d0c      	lsrs	r4, r1, #20
   370fa:	4a7e      	ldr	r2, [pc, #504]	; (372f4 <__aeabi_dsub+0x34c>)
   370fc:	0524      	lsls	r4, r4, #20
   370fe:	431c      	orrs	r4, r3
   37100:	4014      	ands	r4, r2
   37102:	0533      	lsls	r3, r6, #20
   37104:	4323      	orrs	r3, r4
   37106:	005b      	lsls	r3, r3, #1
   37108:	07ed      	lsls	r5, r5, #31
   3710a:	085b      	lsrs	r3, r3, #1
   3710c:	432b      	orrs	r3, r5
   3710e:	0038      	movs	r0, r7
   37110:	0019      	movs	r1, r3
   37112:	bc1c      	pop	{r2, r3, r4}
   37114:	4690      	mov	r8, r2
   37116:	4699      	mov	r9, r3
   37118:	46a2      	mov	sl, r4
   3711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3711c:	2501      	movs	r5, #1
   3711e:	4643      	mov	r3, r8
   37120:	0762      	lsls	r2, r4, #29
   37122:	08ff      	lsrs	r7, r7, #3
   37124:	4317      	orrs	r7, r2
   37126:	08e4      	lsrs	r4, r4, #3
   37128:	401d      	ands	r5, r3
   3712a:	4b70      	ldr	r3, [pc, #448]	; (372ec <__aeabi_dsub+0x344>)
   3712c:	429e      	cmp	r6, r3
   3712e:	d036      	beq.n	3719e <__aeabi_dsub+0x1f6>
   37130:	0324      	lsls	r4, r4, #12
   37132:	0576      	lsls	r6, r6, #21
   37134:	0b24      	lsrs	r4, r4, #12
   37136:	0d76      	lsrs	r6, r6, #21
   37138:	e7db      	b.n	370f2 <__aeabi_dsub+0x14a>
   3713a:	4663      	mov	r3, ip
   3713c:	1af3      	subs	r3, r6, r3
   3713e:	2b00      	cmp	r3, #0
   37140:	dc00      	bgt.n	37144 <__aeabi_dsub+0x19c>
   37142:	e094      	b.n	3726e <__aeabi_dsub+0x2c6>
   37144:	4660      	mov	r0, ip
   37146:	2800      	cmp	r0, #0
   37148:	d035      	beq.n	371b6 <__aeabi_dsub+0x20e>
   3714a:	4868      	ldr	r0, [pc, #416]	; (372ec <__aeabi_dsub+0x344>)
   3714c:	4286      	cmp	r6, r0
   3714e:	d0b1      	beq.n	370b4 <__aeabi_dsub+0x10c>
   37150:	2780      	movs	r7, #128	; 0x80
   37152:	043f      	lsls	r7, r7, #16
   37154:	4339      	orrs	r1, r7
   37156:	2b38      	cmp	r3, #56	; 0x38
   37158:	dc00      	bgt.n	3715c <__aeabi_dsub+0x1b4>
   3715a:	e0fd      	b.n	37358 <__aeabi_dsub+0x3b0>
   3715c:	430a      	orrs	r2, r1
   3715e:	0017      	movs	r7, r2
   37160:	2100      	movs	r1, #0
   37162:	1e7a      	subs	r2, r7, #1
   37164:	4197      	sbcs	r7, r2
   37166:	4457      	add	r7, sl
   37168:	4557      	cmp	r7, sl
   3716a:	4180      	sbcs	r0, r0
   3716c:	1909      	adds	r1, r1, r4
   3716e:	4244      	negs	r4, r0
   37170:	190c      	adds	r4, r1, r4
   37172:	0223      	lsls	r3, r4, #8
   37174:	d53a      	bpl.n	371ec <__aeabi_dsub+0x244>
   37176:	4b5d      	ldr	r3, [pc, #372]	; (372ec <__aeabi_dsub+0x344>)
   37178:	3601      	adds	r6, #1
   3717a:	429e      	cmp	r6, r3
   3717c:	d100      	bne.n	37180 <__aeabi_dsub+0x1d8>
   3717e:	e14b      	b.n	37418 <__aeabi_dsub+0x470>
   37180:	2201      	movs	r2, #1
   37182:	4b5b      	ldr	r3, [pc, #364]	; (372f0 <__aeabi_dsub+0x348>)
   37184:	401c      	ands	r4, r3
   37186:	087b      	lsrs	r3, r7, #1
   37188:	4017      	ands	r7, r2
   3718a:	431f      	orrs	r7, r3
   3718c:	07e2      	lsls	r2, r4, #31
   3718e:	4317      	orrs	r7, r2
   37190:	0864      	lsrs	r4, r4, #1
   37192:	e78f      	b.n	370b4 <__aeabi_dsub+0x10c>
   37194:	0008      	movs	r0, r1
   37196:	4310      	orrs	r0, r2
   37198:	d000      	beq.n	3719c <__aeabi_dsub+0x1f4>
   3719a:	e724      	b.n	36fe6 <__aeabi_dsub+0x3e>
   3719c:	e721      	b.n	36fe2 <__aeabi_dsub+0x3a>
   3719e:	0023      	movs	r3, r4
   371a0:	433b      	orrs	r3, r7
   371a2:	d100      	bne.n	371a6 <__aeabi_dsub+0x1fe>
   371a4:	e1b9      	b.n	3751a <__aeabi_dsub+0x572>
   371a6:	2280      	movs	r2, #128	; 0x80
   371a8:	0312      	lsls	r2, r2, #12
   371aa:	4314      	orrs	r4, r2
   371ac:	0324      	lsls	r4, r4, #12
   371ae:	0b24      	lsrs	r4, r4, #12
   371b0:	e79f      	b.n	370f2 <__aeabi_dsub+0x14a>
   371b2:	002e      	movs	r6, r5
   371b4:	e77e      	b.n	370b4 <__aeabi_dsub+0x10c>
   371b6:	0008      	movs	r0, r1
   371b8:	4310      	orrs	r0, r2
   371ba:	d100      	bne.n	371be <__aeabi_dsub+0x216>
   371bc:	e0ca      	b.n	37354 <__aeabi_dsub+0x3ac>
   371be:	1e58      	subs	r0, r3, #1
   371c0:	4684      	mov	ip, r0
   371c2:	2800      	cmp	r0, #0
   371c4:	d000      	beq.n	371c8 <__aeabi_dsub+0x220>
   371c6:	e0e7      	b.n	37398 <__aeabi_dsub+0x3f0>
   371c8:	4452      	add	r2, sl
   371ca:	4552      	cmp	r2, sl
   371cc:	4180      	sbcs	r0, r0
   371ce:	1864      	adds	r4, r4, r1
   371d0:	4240      	negs	r0, r0
   371d2:	1824      	adds	r4, r4, r0
   371d4:	0017      	movs	r7, r2
   371d6:	2601      	movs	r6, #1
   371d8:	0223      	lsls	r3, r4, #8
   371da:	d507      	bpl.n	371ec <__aeabi_dsub+0x244>
   371dc:	2602      	movs	r6, #2
   371de:	e7cf      	b.n	37180 <__aeabi_dsub+0x1d8>
   371e0:	4664      	mov	r4, ip
   371e2:	432c      	orrs	r4, r5
   371e4:	d100      	bne.n	371e8 <__aeabi_dsub+0x240>
   371e6:	e1b3      	b.n	37550 <__aeabi_dsub+0x5a8>
   371e8:	002c      	movs	r4, r5
   371ea:	4667      	mov	r7, ip
   371ec:	077b      	lsls	r3, r7, #29
   371ee:	d000      	beq.n	371f2 <__aeabi_dsub+0x24a>
   371f0:	e762      	b.n	370b8 <__aeabi_dsub+0x110>
   371f2:	0763      	lsls	r3, r4, #29
   371f4:	08ff      	lsrs	r7, r7, #3
   371f6:	431f      	orrs	r7, r3
   371f8:	2501      	movs	r5, #1
   371fa:	4643      	mov	r3, r8
   371fc:	08e4      	lsrs	r4, r4, #3
   371fe:	401d      	ands	r5, r3
   37200:	e793      	b.n	3712a <__aeabi_dsub+0x182>
   37202:	2d00      	cmp	r5, #0
   37204:	d178      	bne.n	372f8 <__aeabi_dsub+0x350>
   37206:	1c75      	adds	r5, r6, #1
   37208:	056d      	lsls	r5, r5, #21
   3720a:	0d6d      	lsrs	r5, r5, #21
   3720c:	2d01      	cmp	r5, #1
   3720e:	dc00      	bgt.n	37212 <__aeabi_dsub+0x26a>
   37210:	e0f2      	b.n	373f8 <__aeabi_dsub+0x450>
   37212:	4650      	mov	r0, sl
   37214:	1a80      	subs	r0, r0, r2
   37216:	4582      	cmp	sl, r0
   37218:	41bf      	sbcs	r7, r7
   3721a:	1a65      	subs	r5, r4, r1
   3721c:	427f      	negs	r7, r7
   3721e:	1bed      	subs	r5, r5, r7
   37220:	4684      	mov	ip, r0
   37222:	0228      	lsls	r0, r5, #8
   37224:	d400      	bmi.n	37228 <__aeabi_dsub+0x280>
   37226:	e08c      	b.n	37342 <__aeabi_dsub+0x39a>
   37228:	4650      	mov	r0, sl
   3722a:	1a17      	subs	r7, r2, r0
   3722c:	42ba      	cmp	r2, r7
   3722e:	4192      	sbcs	r2, r2
   37230:	1b0c      	subs	r4, r1, r4
   37232:	4255      	negs	r5, r2
   37234:	1b65      	subs	r5, r4, r5
   37236:	4698      	mov	r8, r3
   37238:	e714      	b.n	37064 <__aeabi_dsub+0xbc>
   3723a:	2501      	movs	r5, #1
   3723c:	4643      	mov	r3, r8
   3723e:	2400      	movs	r4, #0
   37240:	401d      	ands	r5, r3
   37242:	2700      	movs	r7, #0
   37244:	e755      	b.n	370f2 <__aeabi_dsub+0x14a>
   37246:	4c2a      	ldr	r4, [pc, #168]	; (372f0 <__aeabi_dsub+0x348>)
   37248:	1af6      	subs	r6, r6, r3
   3724a:	402c      	ands	r4, r5
   3724c:	e732      	b.n	370b4 <__aeabi_dsub+0x10c>
   3724e:	003d      	movs	r5, r7
   37250:	3828      	subs	r0, #40	; 0x28
   37252:	4085      	lsls	r5, r0
   37254:	2700      	movs	r7, #0
   37256:	e717      	b.n	37088 <__aeabi_dsub+0xe0>
   37258:	0038      	movs	r0, r7
   3725a:	f000 fa27 	bl	376ac <__clzsi2>
   3725e:	3020      	adds	r0, #32
   37260:	e706      	b.n	37070 <__aeabi_dsub+0xc8>
   37262:	430a      	orrs	r2, r1
   37264:	0017      	movs	r7, r2
   37266:	2100      	movs	r1, #0
   37268:	1e7a      	subs	r2, r7, #1
   3726a:	4197      	sbcs	r7, r2
   3726c:	e6ee      	b.n	3704c <__aeabi_dsub+0xa4>
   3726e:	2b00      	cmp	r3, #0
   37270:	d000      	beq.n	37274 <__aeabi_dsub+0x2cc>
   37272:	e0e5      	b.n	37440 <__aeabi_dsub+0x498>
   37274:	1c73      	adds	r3, r6, #1
   37276:	469c      	mov	ip, r3
   37278:	055b      	lsls	r3, r3, #21
   3727a:	0d5b      	lsrs	r3, r3, #21
   3727c:	2b01      	cmp	r3, #1
   3727e:	dc00      	bgt.n	37282 <__aeabi_dsub+0x2da>
   37280:	e09f      	b.n	373c2 <__aeabi_dsub+0x41a>
   37282:	4b1a      	ldr	r3, [pc, #104]	; (372ec <__aeabi_dsub+0x344>)
   37284:	459c      	cmp	ip, r3
   37286:	d100      	bne.n	3728a <__aeabi_dsub+0x2e2>
   37288:	e0c5      	b.n	37416 <__aeabi_dsub+0x46e>
   3728a:	4452      	add	r2, sl
   3728c:	4552      	cmp	r2, sl
   3728e:	4180      	sbcs	r0, r0
   37290:	1864      	adds	r4, r4, r1
   37292:	4240      	negs	r0, r0
   37294:	1824      	adds	r4, r4, r0
   37296:	07e7      	lsls	r7, r4, #31
   37298:	0852      	lsrs	r2, r2, #1
   3729a:	4317      	orrs	r7, r2
   3729c:	0864      	lsrs	r4, r4, #1
   3729e:	4666      	mov	r6, ip
   372a0:	e708      	b.n	370b4 <__aeabi_dsub+0x10c>
   372a2:	4812      	ldr	r0, [pc, #72]	; (372ec <__aeabi_dsub+0x344>)
   372a4:	4285      	cmp	r5, r0
   372a6:	d100      	bne.n	372aa <__aeabi_dsub+0x302>
   372a8:	e085      	b.n	373b6 <__aeabi_dsub+0x40e>
   372aa:	001d      	movs	r5, r3
   372ac:	e6bc      	b.n	37028 <__aeabi_dsub+0x80>
   372ae:	0029      	movs	r1, r5
   372b0:	3e1f      	subs	r6, #31
   372b2:	40f1      	lsrs	r1, r6
   372b4:	2b20      	cmp	r3, #32
   372b6:	d100      	bne.n	372ba <__aeabi_dsub+0x312>
   372b8:	e07f      	b.n	373ba <__aeabi_dsub+0x412>
   372ba:	2240      	movs	r2, #64	; 0x40
   372bc:	1ad3      	subs	r3, r2, r3
   372be:	409d      	lsls	r5, r3
   372c0:	432f      	orrs	r7, r5
   372c2:	1e7d      	subs	r5, r7, #1
   372c4:	41af      	sbcs	r7, r5
   372c6:	2400      	movs	r4, #0
   372c8:	430f      	orrs	r7, r1
   372ca:	2600      	movs	r6, #0
   372cc:	e78e      	b.n	371ec <__aeabi_dsub+0x244>
   372ce:	002b      	movs	r3, r5
   372d0:	000f      	movs	r7, r1
   372d2:	3b20      	subs	r3, #32
   372d4:	40df      	lsrs	r7, r3
   372d6:	2d20      	cmp	r5, #32
   372d8:	d071      	beq.n	373be <__aeabi_dsub+0x416>
   372da:	2340      	movs	r3, #64	; 0x40
   372dc:	1b5d      	subs	r5, r3, r5
   372de:	40a9      	lsls	r1, r5
   372e0:	430a      	orrs	r2, r1
   372e2:	1e51      	subs	r1, r2, #1
   372e4:	418a      	sbcs	r2, r1
   372e6:	2100      	movs	r1, #0
   372e8:	4317      	orrs	r7, r2
   372ea:	e6af      	b.n	3704c <__aeabi_dsub+0xa4>
   372ec:	000007ff 	.word	0x000007ff
   372f0:	ff7fffff 	.word	0xff7fffff
   372f4:	800fffff 	.word	0x800fffff
   372f8:	2e00      	cmp	r6, #0
   372fa:	d03e      	beq.n	3737a <__aeabi_dsub+0x3d2>
   372fc:	4eb3      	ldr	r6, [pc, #716]	; (375cc <__aeabi_dsub+0x624>)
   372fe:	45b4      	cmp	ip, r6
   37300:	d045      	beq.n	3738e <__aeabi_dsub+0x3e6>
   37302:	2680      	movs	r6, #128	; 0x80
   37304:	0436      	lsls	r6, r6, #16
   37306:	426d      	negs	r5, r5
   37308:	4334      	orrs	r4, r6
   3730a:	2d38      	cmp	r5, #56	; 0x38
   3730c:	dd00      	ble.n	37310 <__aeabi_dsub+0x368>
   3730e:	e0a8      	b.n	37462 <__aeabi_dsub+0x4ba>
   37310:	2d1f      	cmp	r5, #31
   37312:	dd00      	ble.n	37316 <__aeabi_dsub+0x36e>
   37314:	e11f      	b.n	37556 <__aeabi_dsub+0x5ae>
   37316:	2620      	movs	r6, #32
   37318:	0027      	movs	r7, r4
   3731a:	4650      	mov	r0, sl
   3731c:	1b76      	subs	r6, r6, r5
   3731e:	40b7      	lsls	r7, r6
   37320:	40e8      	lsrs	r0, r5
   37322:	4307      	orrs	r7, r0
   37324:	4650      	mov	r0, sl
   37326:	40b0      	lsls	r0, r6
   37328:	1e46      	subs	r6, r0, #1
   3732a:	41b0      	sbcs	r0, r6
   3732c:	40ec      	lsrs	r4, r5
   3732e:	4338      	orrs	r0, r7
   37330:	1a17      	subs	r7, r2, r0
   37332:	42ba      	cmp	r2, r7
   37334:	4192      	sbcs	r2, r2
   37336:	1b0c      	subs	r4, r1, r4
   37338:	4252      	negs	r2, r2
   3733a:	1aa4      	subs	r4, r4, r2
   3733c:	4666      	mov	r6, ip
   3733e:	4698      	mov	r8, r3
   37340:	e68b      	b.n	3705a <__aeabi_dsub+0xb2>
   37342:	4664      	mov	r4, ip
   37344:	4667      	mov	r7, ip
   37346:	432c      	orrs	r4, r5
   37348:	d000      	beq.n	3734c <__aeabi_dsub+0x3a4>
   3734a:	e68b      	b.n	37064 <__aeabi_dsub+0xbc>
   3734c:	2500      	movs	r5, #0
   3734e:	2600      	movs	r6, #0
   37350:	2700      	movs	r7, #0
   37352:	e6ea      	b.n	3712a <__aeabi_dsub+0x182>
   37354:	001e      	movs	r6, r3
   37356:	e6ad      	b.n	370b4 <__aeabi_dsub+0x10c>
   37358:	2b1f      	cmp	r3, #31
   3735a:	dc60      	bgt.n	3741e <__aeabi_dsub+0x476>
   3735c:	2720      	movs	r7, #32
   3735e:	1af8      	subs	r0, r7, r3
   37360:	000f      	movs	r7, r1
   37362:	4684      	mov	ip, r0
   37364:	4087      	lsls	r7, r0
   37366:	0010      	movs	r0, r2
   37368:	40d8      	lsrs	r0, r3
   3736a:	4307      	orrs	r7, r0
   3736c:	4660      	mov	r0, ip
   3736e:	4082      	lsls	r2, r0
   37370:	1e50      	subs	r0, r2, #1
   37372:	4182      	sbcs	r2, r0
   37374:	40d9      	lsrs	r1, r3
   37376:	4317      	orrs	r7, r2
   37378:	e6f5      	b.n	37166 <__aeabi_dsub+0x1be>
   3737a:	0026      	movs	r6, r4
   3737c:	4650      	mov	r0, sl
   3737e:	4306      	orrs	r6, r0
   37380:	d005      	beq.n	3738e <__aeabi_dsub+0x3e6>
   37382:	43ed      	mvns	r5, r5
   37384:	2d00      	cmp	r5, #0
   37386:	d0d3      	beq.n	37330 <__aeabi_dsub+0x388>
   37388:	4e90      	ldr	r6, [pc, #576]	; (375cc <__aeabi_dsub+0x624>)
   3738a:	45b4      	cmp	ip, r6
   3738c:	d1bd      	bne.n	3730a <__aeabi_dsub+0x362>
   3738e:	000c      	movs	r4, r1
   37390:	0017      	movs	r7, r2
   37392:	4666      	mov	r6, ip
   37394:	4698      	mov	r8, r3
   37396:	e68d      	b.n	370b4 <__aeabi_dsub+0x10c>
   37398:	488c      	ldr	r0, [pc, #560]	; (375cc <__aeabi_dsub+0x624>)
   3739a:	4283      	cmp	r3, r0
   3739c:	d00b      	beq.n	373b6 <__aeabi_dsub+0x40e>
   3739e:	4663      	mov	r3, ip
   373a0:	e6d9      	b.n	37156 <__aeabi_dsub+0x1ae>
   373a2:	2d00      	cmp	r5, #0
   373a4:	d000      	beq.n	373a8 <__aeabi_dsub+0x400>
   373a6:	e096      	b.n	374d6 <__aeabi_dsub+0x52e>
   373a8:	0008      	movs	r0, r1
   373aa:	4310      	orrs	r0, r2
   373ac:	d100      	bne.n	373b0 <__aeabi_dsub+0x408>
   373ae:	e0e2      	b.n	37576 <__aeabi_dsub+0x5ce>
   373b0:	000c      	movs	r4, r1
   373b2:	0017      	movs	r7, r2
   373b4:	4698      	mov	r8, r3
   373b6:	4e85      	ldr	r6, [pc, #532]	; (375cc <__aeabi_dsub+0x624>)
   373b8:	e67c      	b.n	370b4 <__aeabi_dsub+0x10c>
   373ba:	2500      	movs	r5, #0
   373bc:	e780      	b.n	372c0 <__aeabi_dsub+0x318>
   373be:	2100      	movs	r1, #0
   373c0:	e78e      	b.n	372e0 <__aeabi_dsub+0x338>
   373c2:	0023      	movs	r3, r4
   373c4:	4650      	mov	r0, sl
   373c6:	4303      	orrs	r3, r0
   373c8:	2e00      	cmp	r6, #0
   373ca:	d000      	beq.n	373ce <__aeabi_dsub+0x426>
   373cc:	e0a8      	b.n	37520 <__aeabi_dsub+0x578>
   373ce:	2b00      	cmp	r3, #0
   373d0:	d100      	bne.n	373d4 <__aeabi_dsub+0x42c>
   373d2:	e0de      	b.n	37592 <__aeabi_dsub+0x5ea>
   373d4:	000b      	movs	r3, r1
   373d6:	4313      	orrs	r3, r2
   373d8:	d100      	bne.n	373dc <__aeabi_dsub+0x434>
   373da:	e66b      	b.n	370b4 <__aeabi_dsub+0x10c>
   373dc:	4452      	add	r2, sl
   373de:	4552      	cmp	r2, sl
   373e0:	4180      	sbcs	r0, r0
   373e2:	1864      	adds	r4, r4, r1
   373e4:	4240      	negs	r0, r0
   373e6:	1824      	adds	r4, r4, r0
   373e8:	0017      	movs	r7, r2
   373ea:	0223      	lsls	r3, r4, #8
   373ec:	d400      	bmi.n	373f0 <__aeabi_dsub+0x448>
   373ee:	e6fd      	b.n	371ec <__aeabi_dsub+0x244>
   373f0:	4b77      	ldr	r3, [pc, #476]	; (375d0 <__aeabi_dsub+0x628>)
   373f2:	4666      	mov	r6, ip
   373f4:	401c      	ands	r4, r3
   373f6:	e65d      	b.n	370b4 <__aeabi_dsub+0x10c>
   373f8:	0025      	movs	r5, r4
   373fa:	4650      	mov	r0, sl
   373fc:	4305      	orrs	r5, r0
   373fe:	2e00      	cmp	r6, #0
   37400:	d1cf      	bne.n	373a2 <__aeabi_dsub+0x3fa>
   37402:	2d00      	cmp	r5, #0
   37404:	d14f      	bne.n	374a6 <__aeabi_dsub+0x4fe>
   37406:	000c      	movs	r4, r1
   37408:	4314      	orrs	r4, r2
   3740a:	d100      	bne.n	3740e <__aeabi_dsub+0x466>
   3740c:	e0a0      	b.n	37550 <__aeabi_dsub+0x5a8>
   3740e:	000c      	movs	r4, r1
   37410:	0017      	movs	r7, r2
   37412:	4698      	mov	r8, r3
   37414:	e64e      	b.n	370b4 <__aeabi_dsub+0x10c>
   37416:	4666      	mov	r6, ip
   37418:	2400      	movs	r4, #0
   3741a:	2700      	movs	r7, #0
   3741c:	e685      	b.n	3712a <__aeabi_dsub+0x182>
   3741e:	001f      	movs	r7, r3
   37420:	0008      	movs	r0, r1
   37422:	3f20      	subs	r7, #32
   37424:	40f8      	lsrs	r0, r7
   37426:	0007      	movs	r7, r0
   37428:	2b20      	cmp	r3, #32
   3742a:	d100      	bne.n	3742e <__aeabi_dsub+0x486>
   3742c:	e08e      	b.n	3754c <__aeabi_dsub+0x5a4>
   3742e:	2040      	movs	r0, #64	; 0x40
   37430:	1ac3      	subs	r3, r0, r3
   37432:	4099      	lsls	r1, r3
   37434:	430a      	orrs	r2, r1
   37436:	1e51      	subs	r1, r2, #1
   37438:	418a      	sbcs	r2, r1
   3743a:	2100      	movs	r1, #0
   3743c:	4317      	orrs	r7, r2
   3743e:	e692      	b.n	37166 <__aeabi_dsub+0x1be>
   37440:	2e00      	cmp	r6, #0
   37442:	d114      	bne.n	3746e <__aeabi_dsub+0x4c6>
   37444:	0026      	movs	r6, r4
   37446:	4650      	mov	r0, sl
   37448:	4306      	orrs	r6, r0
   3744a:	d062      	beq.n	37512 <__aeabi_dsub+0x56a>
   3744c:	43db      	mvns	r3, r3
   3744e:	2b00      	cmp	r3, #0
   37450:	d15c      	bne.n	3750c <__aeabi_dsub+0x564>
   37452:	1887      	adds	r7, r0, r2
   37454:	4297      	cmp	r7, r2
   37456:	4192      	sbcs	r2, r2
   37458:	1864      	adds	r4, r4, r1
   3745a:	4252      	negs	r2, r2
   3745c:	18a4      	adds	r4, r4, r2
   3745e:	4666      	mov	r6, ip
   37460:	e687      	b.n	37172 <__aeabi_dsub+0x1ca>
   37462:	4650      	mov	r0, sl
   37464:	4320      	orrs	r0, r4
   37466:	1e44      	subs	r4, r0, #1
   37468:	41a0      	sbcs	r0, r4
   3746a:	2400      	movs	r4, #0
   3746c:	e760      	b.n	37330 <__aeabi_dsub+0x388>
   3746e:	4e57      	ldr	r6, [pc, #348]	; (375cc <__aeabi_dsub+0x624>)
   37470:	45b4      	cmp	ip, r6
   37472:	d04e      	beq.n	37512 <__aeabi_dsub+0x56a>
   37474:	2680      	movs	r6, #128	; 0x80
   37476:	0436      	lsls	r6, r6, #16
   37478:	425b      	negs	r3, r3
   3747a:	4334      	orrs	r4, r6
   3747c:	2b38      	cmp	r3, #56	; 0x38
   3747e:	dd00      	ble.n	37482 <__aeabi_dsub+0x4da>
   37480:	e07f      	b.n	37582 <__aeabi_dsub+0x5da>
   37482:	2b1f      	cmp	r3, #31
   37484:	dd00      	ble.n	37488 <__aeabi_dsub+0x4e0>
   37486:	e08b      	b.n	375a0 <__aeabi_dsub+0x5f8>
   37488:	2620      	movs	r6, #32
   3748a:	0027      	movs	r7, r4
   3748c:	4650      	mov	r0, sl
   3748e:	1af6      	subs	r6, r6, r3
   37490:	40b7      	lsls	r7, r6
   37492:	40d8      	lsrs	r0, r3
   37494:	4307      	orrs	r7, r0
   37496:	4650      	mov	r0, sl
   37498:	40b0      	lsls	r0, r6
   3749a:	1e46      	subs	r6, r0, #1
   3749c:	41b0      	sbcs	r0, r6
   3749e:	4307      	orrs	r7, r0
   374a0:	40dc      	lsrs	r4, r3
   374a2:	18bf      	adds	r7, r7, r2
   374a4:	e7d6      	b.n	37454 <__aeabi_dsub+0x4ac>
   374a6:	000d      	movs	r5, r1
   374a8:	4315      	orrs	r5, r2
   374aa:	d100      	bne.n	374ae <__aeabi_dsub+0x506>
   374ac:	e602      	b.n	370b4 <__aeabi_dsub+0x10c>
   374ae:	4650      	mov	r0, sl
   374b0:	1a80      	subs	r0, r0, r2
   374b2:	4582      	cmp	sl, r0
   374b4:	41bf      	sbcs	r7, r7
   374b6:	1a65      	subs	r5, r4, r1
   374b8:	427f      	negs	r7, r7
   374ba:	1bed      	subs	r5, r5, r7
   374bc:	4684      	mov	ip, r0
   374be:	0228      	lsls	r0, r5, #8
   374c0:	d400      	bmi.n	374c4 <__aeabi_dsub+0x51c>
   374c2:	e68d      	b.n	371e0 <__aeabi_dsub+0x238>
   374c4:	4650      	mov	r0, sl
   374c6:	1a17      	subs	r7, r2, r0
   374c8:	42ba      	cmp	r2, r7
   374ca:	4192      	sbcs	r2, r2
   374cc:	1b0c      	subs	r4, r1, r4
   374ce:	4252      	negs	r2, r2
   374d0:	1aa4      	subs	r4, r4, r2
   374d2:	4698      	mov	r8, r3
   374d4:	e5ee      	b.n	370b4 <__aeabi_dsub+0x10c>
   374d6:	000d      	movs	r5, r1
   374d8:	4315      	orrs	r5, r2
   374da:	d100      	bne.n	374de <__aeabi_dsub+0x536>
   374dc:	e76b      	b.n	373b6 <__aeabi_dsub+0x40e>
   374de:	4650      	mov	r0, sl
   374e0:	0767      	lsls	r7, r4, #29
   374e2:	08c0      	lsrs	r0, r0, #3
   374e4:	4307      	orrs	r7, r0
   374e6:	2080      	movs	r0, #128	; 0x80
   374e8:	08e4      	lsrs	r4, r4, #3
   374ea:	0300      	lsls	r0, r0, #12
   374ec:	4204      	tst	r4, r0
   374ee:	d007      	beq.n	37500 <__aeabi_dsub+0x558>
   374f0:	08cd      	lsrs	r5, r1, #3
   374f2:	4205      	tst	r5, r0
   374f4:	d104      	bne.n	37500 <__aeabi_dsub+0x558>
   374f6:	002c      	movs	r4, r5
   374f8:	4698      	mov	r8, r3
   374fa:	08d7      	lsrs	r7, r2, #3
   374fc:	0749      	lsls	r1, r1, #29
   374fe:	430f      	orrs	r7, r1
   37500:	0f7b      	lsrs	r3, r7, #29
   37502:	00e4      	lsls	r4, r4, #3
   37504:	431c      	orrs	r4, r3
   37506:	00ff      	lsls	r7, r7, #3
   37508:	4e30      	ldr	r6, [pc, #192]	; (375cc <__aeabi_dsub+0x624>)
   3750a:	e5d3      	b.n	370b4 <__aeabi_dsub+0x10c>
   3750c:	4e2f      	ldr	r6, [pc, #188]	; (375cc <__aeabi_dsub+0x624>)
   3750e:	45b4      	cmp	ip, r6
   37510:	d1b4      	bne.n	3747c <__aeabi_dsub+0x4d4>
   37512:	000c      	movs	r4, r1
   37514:	0017      	movs	r7, r2
   37516:	4666      	mov	r6, ip
   37518:	e5cc      	b.n	370b4 <__aeabi_dsub+0x10c>
   3751a:	2700      	movs	r7, #0
   3751c:	2400      	movs	r4, #0
   3751e:	e5e8      	b.n	370f2 <__aeabi_dsub+0x14a>
   37520:	2b00      	cmp	r3, #0
   37522:	d039      	beq.n	37598 <__aeabi_dsub+0x5f0>
   37524:	000b      	movs	r3, r1
   37526:	4313      	orrs	r3, r2
   37528:	d100      	bne.n	3752c <__aeabi_dsub+0x584>
   3752a:	e744      	b.n	373b6 <__aeabi_dsub+0x40e>
   3752c:	08c0      	lsrs	r0, r0, #3
   3752e:	0767      	lsls	r7, r4, #29
   37530:	4307      	orrs	r7, r0
   37532:	2080      	movs	r0, #128	; 0x80
   37534:	08e4      	lsrs	r4, r4, #3
   37536:	0300      	lsls	r0, r0, #12
   37538:	4204      	tst	r4, r0
   3753a:	d0e1      	beq.n	37500 <__aeabi_dsub+0x558>
   3753c:	08cb      	lsrs	r3, r1, #3
   3753e:	4203      	tst	r3, r0
   37540:	d1de      	bne.n	37500 <__aeabi_dsub+0x558>
   37542:	08d7      	lsrs	r7, r2, #3
   37544:	0749      	lsls	r1, r1, #29
   37546:	430f      	orrs	r7, r1
   37548:	001c      	movs	r4, r3
   3754a:	e7d9      	b.n	37500 <__aeabi_dsub+0x558>
   3754c:	2100      	movs	r1, #0
   3754e:	e771      	b.n	37434 <__aeabi_dsub+0x48c>
   37550:	2500      	movs	r5, #0
   37552:	2700      	movs	r7, #0
   37554:	e5e9      	b.n	3712a <__aeabi_dsub+0x182>
   37556:	002e      	movs	r6, r5
   37558:	0027      	movs	r7, r4
   3755a:	3e20      	subs	r6, #32
   3755c:	40f7      	lsrs	r7, r6
   3755e:	2d20      	cmp	r5, #32
   37560:	d02f      	beq.n	375c2 <__aeabi_dsub+0x61a>
   37562:	2640      	movs	r6, #64	; 0x40
   37564:	1b75      	subs	r5, r6, r5
   37566:	40ac      	lsls	r4, r5
   37568:	4650      	mov	r0, sl
   3756a:	4320      	orrs	r0, r4
   3756c:	1e44      	subs	r4, r0, #1
   3756e:	41a0      	sbcs	r0, r4
   37570:	2400      	movs	r4, #0
   37572:	4338      	orrs	r0, r7
   37574:	e6dc      	b.n	37330 <__aeabi_dsub+0x388>
   37576:	2480      	movs	r4, #128	; 0x80
   37578:	2500      	movs	r5, #0
   3757a:	0324      	lsls	r4, r4, #12
   3757c:	4e13      	ldr	r6, [pc, #76]	; (375cc <__aeabi_dsub+0x624>)
   3757e:	2700      	movs	r7, #0
   37580:	e5d3      	b.n	3712a <__aeabi_dsub+0x182>
   37582:	4650      	mov	r0, sl
   37584:	4320      	orrs	r0, r4
   37586:	0007      	movs	r7, r0
   37588:	1e78      	subs	r0, r7, #1
   3758a:	4187      	sbcs	r7, r0
   3758c:	2400      	movs	r4, #0
   3758e:	18bf      	adds	r7, r7, r2
   37590:	e760      	b.n	37454 <__aeabi_dsub+0x4ac>
   37592:	000c      	movs	r4, r1
   37594:	0017      	movs	r7, r2
   37596:	e58d      	b.n	370b4 <__aeabi_dsub+0x10c>
   37598:	000c      	movs	r4, r1
   3759a:	0017      	movs	r7, r2
   3759c:	4e0b      	ldr	r6, [pc, #44]	; (375cc <__aeabi_dsub+0x624>)
   3759e:	e589      	b.n	370b4 <__aeabi_dsub+0x10c>
   375a0:	001e      	movs	r6, r3
   375a2:	0027      	movs	r7, r4
   375a4:	3e20      	subs	r6, #32
   375a6:	40f7      	lsrs	r7, r6
   375a8:	2b20      	cmp	r3, #32
   375aa:	d00c      	beq.n	375c6 <__aeabi_dsub+0x61e>
   375ac:	2640      	movs	r6, #64	; 0x40
   375ae:	1af3      	subs	r3, r6, r3
   375b0:	409c      	lsls	r4, r3
   375b2:	4650      	mov	r0, sl
   375b4:	4320      	orrs	r0, r4
   375b6:	1e44      	subs	r4, r0, #1
   375b8:	41a0      	sbcs	r0, r4
   375ba:	4307      	orrs	r7, r0
   375bc:	2400      	movs	r4, #0
   375be:	18bf      	adds	r7, r7, r2
   375c0:	e748      	b.n	37454 <__aeabi_dsub+0x4ac>
   375c2:	2400      	movs	r4, #0
   375c4:	e7d0      	b.n	37568 <__aeabi_dsub+0x5c0>
   375c6:	2400      	movs	r4, #0
   375c8:	e7f3      	b.n	375b2 <__aeabi_dsub+0x60a>
   375ca:	46c0      	nop			; (mov r8, r8)
   375cc:	000007ff 	.word	0x000007ff
   375d0:	ff7fffff 	.word	0xff7fffff

000375d4 <__aeabi_d2iz>:
   375d4:	b530      	push	{r4, r5, lr}
   375d6:	4d13      	ldr	r5, [pc, #76]	; (37624 <__aeabi_d2iz+0x50>)
   375d8:	030a      	lsls	r2, r1, #12
   375da:	004b      	lsls	r3, r1, #1
   375dc:	0b12      	lsrs	r2, r2, #12
   375de:	0d5b      	lsrs	r3, r3, #21
   375e0:	0fc9      	lsrs	r1, r1, #31
   375e2:	2400      	movs	r4, #0
   375e4:	42ab      	cmp	r3, r5
   375e6:	dd10      	ble.n	3760a <__aeabi_d2iz+0x36>
   375e8:	4c0f      	ldr	r4, [pc, #60]	; (37628 <__aeabi_d2iz+0x54>)
   375ea:	42a3      	cmp	r3, r4
   375ec:	dc0f      	bgt.n	3760e <__aeabi_d2iz+0x3a>
   375ee:	2480      	movs	r4, #128	; 0x80
   375f0:	4d0e      	ldr	r5, [pc, #56]	; (3762c <__aeabi_d2iz+0x58>)
   375f2:	0364      	lsls	r4, r4, #13
   375f4:	4322      	orrs	r2, r4
   375f6:	1aed      	subs	r5, r5, r3
   375f8:	2d1f      	cmp	r5, #31
   375fa:	dd0b      	ble.n	37614 <__aeabi_d2iz+0x40>
   375fc:	480c      	ldr	r0, [pc, #48]	; (37630 <__aeabi_d2iz+0x5c>)
   375fe:	1ac3      	subs	r3, r0, r3
   37600:	40da      	lsrs	r2, r3
   37602:	4254      	negs	r4, r2
   37604:	2900      	cmp	r1, #0
   37606:	d100      	bne.n	3760a <__aeabi_d2iz+0x36>
   37608:	0014      	movs	r4, r2
   3760a:	0020      	movs	r0, r4
   3760c:	bd30      	pop	{r4, r5, pc}
   3760e:	4b09      	ldr	r3, [pc, #36]	; (37634 <__aeabi_d2iz+0x60>)
   37610:	18cc      	adds	r4, r1, r3
   37612:	e7fa      	b.n	3760a <__aeabi_d2iz+0x36>
   37614:	4c08      	ldr	r4, [pc, #32]	; (37638 <__aeabi_d2iz+0x64>)
   37616:	40e8      	lsrs	r0, r5
   37618:	46a4      	mov	ip, r4
   3761a:	4463      	add	r3, ip
   3761c:	409a      	lsls	r2, r3
   3761e:	4302      	orrs	r2, r0
   37620:	e7ef      	b.n	37602 <__aeabi_d2iz+0x2e>
   37622:	46c0      	nop			; (mov r8, r8)
   37624:	000003fe 	.word	0x000003fe
   37628:	0000041d 	.word	0x0000041d
   3762c:	00000433 	.word	0x00000433
   37630:	00000413 	.word	0x00000413
   37634:	7fffffff 	.word	0x7fffffff
   37638:	fffffbed 	.word	0xfffffbed

0003763c <__aeabi_ui2d>:
   3763c:	b510      	push	{r4, lr}
   3763e:	1e04      	subs	r4, r0, #0
   37640:	d028      	beq.n	37694 <__aeabi_ui2d+0x58>
   37642:	f000 f833 	bl	376ac <__clzsi2>
   37646:	4b15      	ldr	r3, [pc, #84]	; (3769c <__aeabi_ui2d+0x60>)
   37648:	4a15      	ldr	r2, [pc, #84]	; (376a0 <__aeabi_ui2d+0x64>)
   3764a:	1a1b      	subs	r3, r3, r0
   3764c:	1ad2      	subs	r2, r2, r3
   3764e:	2a1f      	cmp	r2, #31
   37650:	dd15      	ble.n	3767e <__aeabi_ui2d+0x42>
   37652:	4a14      	ldr	r2, [pc, #80]	; (376a4 <__aeabi_ui2d+0x68>)
   37654:	1ad2      	subs	r2, r2, r3
   37656:	4094      	lsls	r4, r2
   37658:	2200      	movs	r2, #0
   3765a:	0324      	lsls	r4, r4, #12
   3765c:	055b      	lsls	r3, r3, #21
   3765e:	0b24      	lsrs	r4, r4, #12
   37660:	0d5b      	lsrs	r3, r3, #21
   37662:	2100      	movs	r1, #0
   37664:	0010      	movs	r0, r2
   37666:	0324      	lsls	r4, r4, #12
   37668:	0d0a      	lsrs	r2, r1, #20
   3766a:	0b24      	lsrs	r4, r4, #12
   3766c:	0512      	lsls	r2, r2, #20
   3766e:	4322      	orrs	r2, r4
   37670:	4c0d      	ldr	r4, [pc, #52]	; (376a8 <__aeabi_ui2d+0x6c>)
   37672:	051b      	lsls	r3, r3, #20
   37674:	4022      	ands	r2, r4
   37676:	4313      	orrs	r3, r2
   37678:	005b      	lsls	r3, r3, #1
   3767a:	0859      	lsrs	r1, r3, #1
   3767c:	bd10      	pop	{r4, pc}
   3767e:	0021      	movs	r1, r4
   37680:	4091      	lsls	r1, r2
   37682:	000a      	movs	r2, r1
   37684:	210b      	movs	r1, #11
   37686:	1a08      	subs	r0, r1, r0
   37688:	40c4      	lsrs	r4, r0
   3768a:	055b      	lsls	r3, r3, #21
   3768c:	0324      	lsls	r4, r4, #12
   3768e:	0b24      	lsrs	r4, r4, #12
   37690:	0d5b      	lsrs	r3, r3, #21
   37692:	e7e6      	b.n	37662 <__aeabi_ui2d+0x26>
   37694:	2300      	movs	r3, #0
   37696:	2400      	movs	r4, #0
   37698:	2200      	movs	r2, #0
   3769a:	e7e2      	b.n	37662 <__aeabi_ui2d+0x26>
   3769c:	0000041e 	.word	0x0000041e
   376a0:	00000433 	.word	0x00000433
   376a4:	00000413 	.word	0x00000413
   376a8:	800fffff 	.word	0x800fffff

000376ac <__clzsi2>:
   376ac:	211c      	movs	r1, #28
   376ae:	2301      	movs	r3, #1
   376b0:	041b      	lsls	r3, r3, #16
   376b2:	4298      	cmp	r0, r3
   376b4:	d301      	bcc.n	376ba <__clzsi2+0xe>
   376b6:	0c00      	lsrs	r0, r0, #16
   376b8:	3910      	subs	r1, #16
   376ba:	0a1b      	lsrs	r3, r3, #8
   376bc:	4298      	cmp	r0, r3
   376be:	d301      	bcc.n	376c4 <__clzsi2+0x18>
   376c0:	0a00      	lsrs	r0, r0, #8
   376c2:	3908      	subs	r1, #8
   376c4:	091b      	lsrs	r3, r3, #4
   376c6:	4298      	cmp	r0, r3
   376c8:	d301      	bcc.n	376ce <__clzsi2+0x22>
   376ca:	0900      	lsrs	r0, r0, #4
   376cc:	3904      	subs	r1, #4
   376ce:	a202      	add	r2, pc, #8	; (adr r2, 376d8 <__clzsi2+0x2c>)
   376d0:	5c10      	ldrb	r0, [r2, r0]
   376d2:	1840      	adds	r0, r0, r1
   376d4:	4770      	bx	lr
   376d6:	46c0      	nop			; (mov r8, r8)
   376d8:	02020304 	.word	0x02020304
   376dc:	01010101 	.word	0x01010101
	...

000376e8 <__divdi3>:
   376e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   376ea:	464e      	mov	r6, r9
   376ec:	4657      	mov	r7, sl
   376ee:	46de      	mov	lr, fp
   376f0:	4645      	mov	r5, r8
   376f2:	b5e0      	push	{r5, r6, r7, lr}
   376f4:	0006      	movs	r6, r0
   376f6:	2000      	movs	r0, #0
   376f8:	000f      	movs	r7, r1
   376fa:	b083      	sub	sp, #12
   376fc:	0019      	movs	r1, r3
   376fe:	4681      	mov	r9, r0
   37700:	2f00      	cmp	r7, #0
   37702:	da00      	bge.n	37706 <__divdi3+0x1e>
   37704:	e08c      	b.n	37820 <__divdi3+0x138>
   37706:	2900      	cmp	r1, #0
   37708:	da00      	bge.n	3770c <__divdi3+0x24>
   3770a:	e080      	b.n	3780e <__divdi3+0x126>
   3770c:	0034      	movs	r4, r6
   3770e:	003d      	movs	r5, r7
   37710:	4692      	mov	sl, r2
   37712:	4698      	mov	r8, r3
   37714:	42bb      	cmp	r3, r7
   37716:	d869      	bhi.n	377ec <__divdi3+0x104>
   37718:	d066      	beq.n	377e8 <__divdi3+0x100>
   3771a:	4641      	mov	r1, r8
   3771c:	4650      	mov	r0, sl
   3771e:	f000 f8bf 	bl	378a0 <__clzdi2>
   37722:	4683      	mov	fp, r0
   37724:	0039      	movs	r1, r7
   37726:	0030      	movs	r0, r6
   37728:	f000 f8ba 	bl	378a0 <__clzdi2>
   3772c:	465b      	mov	r3, fp
   3772e:	1a1b      	subs	r3, r3, r0
   37730:	469c      	mov	ip, r3
   37732:	3b20      	subs	r3, #32
   37734:	469b      	mov	fp, r3
   37736:	d500      	bpl.n	3773a <__divdi3+0x52>
   37738:	e087      	b.n	3784a <__divdi3+0x162>
   3773a:	4651      	mov	r1, sl
   3773c:	4658      	mov	r0, fp
   3773e:	4081      	lsls	r1, r0
   37740:	000b      	movs	r3, r1
   37742:	4651      	mov	r1, sl
   37744:	4660      	mov	r0, ip
   37746:	4081      	lsls	r1, r0
   37748:	000a      	movs	r2, r1
   3774a:	42bb      	cmp	r3, r7
   3774c:	d900      	bls.n	37750 <__divdi3+0x68>
   3774e:	e072      	b.n	37836 <__divdi3+0x14e>
   37750:	d06e      	beq.n	37830 <__divdi3+0x148>
   37752:	0034      	movs	r4, r6
   37754:	003d      	movs	r5, r7
   37756:	4659      	mov	r1, fp
   37758:	1aa4      	subs	r4, r4, r2
   3775a:	419d      	sbcs	r5, r3
   3775c:	2900      	cmp	r1, #0
   3775e:	da00      	bge.n	37762 <__divdi3+0x7a>
   37760:	e08a      	b.n	37878 <__divdi3+0x190>
   37762:	2100      	movs	r1, #0
   37764:	2000      	movs	r0, #0
   37766:	2601      	movs	r6, #1
   37768:	9000      	str	r0, [sp, #0]
   3776a:	9101      	str	r1, [sp, #4]
   3776c:	4659      	mov	r1, fp
   3776e:	408e      	lsls	r6, r1
   37770:	9601      	str	r6, [sp, #4]
   37772:	4661      	mov	r1, ip
   37774:	2601      	movs	r6, #1
   37776:	408e      	lsls	r6, r1
   37778:	4661      	mov	r1, ip
   3777a:	9600      	str	r6, [sp, #0]
   3777c:	2900      	cmp	r1, #0
   3777e:	d061      	beq.n	37844 <__divdi3+0x15c>
   37780:	07d9      	lsls	r1, r3, #31
   37782:	0856      	lsrs	r6, r2, #1
   37784:	430e      	orrs	r6, r1
   37786:	085f      	lsrs	r7, r3, #1
   37788:	4661      	mov	r1, ip
   3778a:	2201      	movs	r2, #1
   3778c:	2300      	movs	r3, #0
   3778e:	e00c      	b.n	377aa <__divdi3+0xc2>
   37790:	42af      	cmp	r7, r5
   37792:	d101      	bne.n	37798 <__divdi3+0xb0>
   37794:	42a6      	cmp	r6, r4
   37796:	d80a      	bhi.n	377ae <__divdi3+0xc6>
   37798:	1ba4      	subs	r4, r4, r6
   3779a:	41bd      	sbcs	r5, r7
   3779c:	1924      	adds	r4, r4, r4
   3779e:	416d      	adcs	r5, r5
   377a0:	3901      	subs	r1, #1
   377a2:	18a4      	adds	r4, r4, r2
   377a4:	415d      	adcs	r5, r3
   377a6:	2900      	cmp	r1, #0
   377a8:	d006      	beq.n	377b8 <__divdi3+0xd0>
   377aa:	42af      	cmp	r7, r5
   377ac:	d9f0      	bls.n	37790 <__divdi3+0xa8>
   377ae:	3901      	subs	r1, #1
   377b0:	1924      	adds	r4, r4, r4
   377b2:	416d      	adcs	r5, r5
   377b4:	2900      	cmp	r1, #0
   377b6:	d1f8      	bne.n	377aa <__divdi3+0xc2>
   377b8:	465b      	mov	r3, fp
   377ba:	9800      	ldr	r0, [sp, #0]
   377bc:	9901      	ldr	r1, [sp, #4]
   377be:	1900      	adds	r0, r0, r4
   377c0:	4169      	adcs	r1, r5
   377c2:	2b00      	cmp	r3, #0
   377c4:	db4d      	blt.n	37862 <__divdi3+0x17a>
   377c6:	002e      	movs	r6, r5
   377c8:	40de      	lsrs	r6, r3
   377ca:	4663      	mov	r3, ip
   377cc:	002c      	movs	r4, r5
   377ce:	40dc      	lsrs	r4, r3
   377d0:	465b      	mov	r3, fp
   377d2:	2b00      	cmp	r3, #0
   377d4:	db5b      	blt.n	3788e <__divdi3+0x1a6>
   377d6:	0034      	movs	r4, r6
   377d8:	409c      	lsls	r4, r3
   377da:	0023      	movs	r3, r4
   377dc:	4664      	mov	r4, ip
   377de:	40a6      	lsls	r6, r4
   377e0:	0032      	movs	r2, r6
   377e2:	1a80      	subs	r0, r0, r2
   377e4:	4199      	sbcs	r1, r3
   377e6:	e003      	b.n	377f0 <__divdi3+0x108>
   377e8:	42b2      	cmp	r2, r6
   377ea:	d996      	bls.n	3771a <__divdi3+0x32>
   377ec:	2000      	movs	r0, #0
   377ee:	2100      	movs	r1, #0
   377f0:	464b      	mov	r3, r9
   377f2:	2b00      	cmp	r3, #0
   377f4:	d004      	beq.n	37800 <__divdi3+0x118>
   377f6:	0003      	movs	r3, r0
   377f8:	000c      	movs	r4, r1
   377fa:	2100      	movs	r1, #0
   377fc:	4258      	negs	r0, r3
   377fe:	41a1      	sbcs	r1, r4
   37800:	b003      	add	sp, #12
   37802:	bc3c      	pop	{r2, r3, r4, r5}
   37804:	4690      	mov	r8, r2
   37806:	4699      	mov	r9, r3
   37808:	46a2      	mov	sl, r4
   3780a:	46ab      	mov	fp, r5
   3780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3780e:	4649      	mov	r1, r9
   37810:	43c9      	mvns	r1, r1
   37812:	0010      	movs	r0, r2
   37814:	4689      	mov	r9, r1
   37816:	0019      	movs	r1, r3
   37818:	2300      	movs	r3, #0
   3781a:	4242      	negs	r2, r0
   3781c:	418b      	sbcs	r3, r1
   3781e:	e775      	b.n	3770c <__divdi3+0x24>
   37820:	0034      	movs	r4, r6
   37822:	003d      	movs	r5, r7
   37824:	3801      	subs	r0, #1
   37826:	2700      	movs	r7, #0
   37828:	4266      	negs	r6, r4
   3782a:	41af      	sbcs	r7, r5
   3782c:	4681      	mov	r9, r0
   3782e:	e76a      	b.n	37706 <__divdi3+0x1e>
   37830:	42b1      	cmp	r1, r6
   37832:	d800      	bhi.n	37836 <__divdi3+0x14e>
   37834:	e78d      	b.n	37752 <__divdi3+0x6a>
   37836:	2100      	movs	r1, #0
   37838:	2000      	movs	r0, #0
   3783a:	9000      	str	r0, [sp, #0]
   3783c:	9101      	str	r1, [sp, #4]
   3783e:	4661      	mov	r1, ip
   37840:	2900      	cmp	r1, #0
   37842:	d19d      	bne.n	37780 <__divdi3+0x98>
   37844:	9800      	ldr	r0, [sp, #0]
   37846:	9901      	ldr	r1, [sp, #4]
   37848:	e7d2      	b.n	377f0 <__divdi3+0x108>
   3784a:	4662      	mov	r2, ip
   3784c:	4640      	mov	r0, r8
   3784e:	2320      	movs	r3, #32
   37850:	4651      	mov	r1, sl
   37852:	4090      	lsls	r0, r2
   37854:	1a9b      	subs	r3, r3, r2
   37856:	40d9      	lsrs	r1, r3
   37858:	0003      	movs	r3, r0
   3785a:	9100      	str	r1, [sp, #0]
   3785c:	9900      	ldr	r1, [sp, #0]
   3785e:	430b      	orrs	r3, r1
   37860:	e76f      	b.n	37742 <__divdi3+0x5a>
   37862:	4662      	mov	r2, ip
   37864:	2320      	movs	r3, #32
   37866:	1a9b      	subs	r3, r3, r2
   37868:	002a      	movs	r2, r5
   3786a:	409a      	lsls	r2, r3
   3786c:	0026      	movs	r6, r4
   3786e:	0013      	movs	r3, r2
   37870:	4662      	mov	r2, ip
   37872:	40d6      	lsrs	r6, r2
   37874:	431e      	orrs	r6, r3
   37876:	e7a8      	b.n	377ca <__divdi3+0xe2>
   37878:	4661      	mov	r1, ip
   3787a:	2620      	movs	r6, #32
   3787c:	2701      	movs	r7, #1
   3787e:	1a76      	subs	r6, r6, r1
   37880:	2000      	movs	r0, #0
   37882:	2100      	movs	r1, #0
   37884:	40f7      	lsrs	r7, r6
   37886:	9000      	str	r0, [sp, #0]
   37888:	9101      	str	r1, [sp, #4]
   3788a:	9701      	str	r7, [sp, #4]
   3788c:	e771      	b.n	37772 <__divdi3+0x8a>
   3788e:	4662      	mov	r2, ip
   37890:	2320      	movs	r3, #32
   37892:	0035      	movs	r5, r6
   37894:	4094      	lsls	r4, r2
   37896:	1a9b      	subs	r3, r3, r2
   37898:	40dd      	lsrs	r5, r3
   3789a:	0023      	movs	r3, r4
   3789c:	432b      	orrs	r3, r5
   3789e:	e79d      	b.n	377dc <__divdi3+0xf4>

000378a0 <__clzdi2>:
   378a0:	b510      	push	{r4, lr}
   378a2:	2900      	cmp	r1, #0
   378a4:	d103      	bne.n	378ae <__clzdi2+0xe>
   378a6:	f7ff ff01 	bl	376ac <__clzsi2>
   378aa:	3020      	adds	r0, #32
   378ac:	e002      	b.n	378b4 <__clzdi2+0x14>
   378ae:	1c08      	adds	r0, r1, #0
   378b0:	f7ff fefc 	bl	376ac <__clzsi2>
   378b4:	bd10      	pop	{r4, pc}
   378b6:	46c0      	nop			; (mov r8, r8)

000378b8 <atoi>:
   378b8:	b510      	push	{r4, lr}
   378ba:	220a      	movs	r2, #10
   378bc:	2100      	movs	r1, #0
   378be:	f000 fb0d 	bl	37edc <strtol>
   378c2:	bd10      	pop	{r4, pc}

000378c4 <__libc_init_array>:
   378c4:	b570      	push	{r4, r5, r6, lr}
   378c6:	2600      	movs	r6, #0
   378c8:	4d0c      	ldr	r5, [pc, #48]	; (378fc <__libc_init_array+0x38>)
   378ca:	4c0d      	ldr	r4, [pc, #52]	; (37900 <__libc_init_array+0x3c>)
   378cc:	1b64      	subs	r4, r4, r5
   378ce:	10a4      	asrs	r4, r4, #2
   378d0:	42a6      	cmp	r6, r4
   378d2:	d109      	bne.n	378e8 <__libc_init_array+0x24>
   378d4:	2600      	movs	r6, #0
   378d6:	f005 fec1 	bl	3d65c <_init>
   378da:	4d0a      	ldr	r5, [pc, #40]	; (37904 <__libc_init_array+0x40>)
   378dc:	4c0a      	ldr	r4, [pc, #40]	; (37908 <__libc_init_array+0x44>)
   378de:	1b64      	subs	r4, r4, r5
   378e0:	10a4      	asrs	r4, r4, #2
   378e2:	42a6      	cmp	r6, r4
   378e4:	d105      	bne.n	378f2 <__libc_init_array+0x2e>
   378e6:	bd70      	pop	{r4, r5, r6, pc}
   378e8:	00b3      	lsls	r3, r6, #2
   378ea:	58eb      	ldr	r3, [r5, r3]
   378ec:	4798      	blx	r3
   378ee:	3601      	adds	r6, #1
   378f0:	e7ee      	b.n	378d0 <__libc_init_array+0xc>
   378f2:	00b3      	lsls	r3, r6, #2
   378f4:	58eb      	ldr	r3, [r5, r3]
   378f6:	4798      	blx	r3
   378f8:	3601      	adds	r6, #1
   378fa:	e7f2      	b.n	378e2 <__libc_init_array+0x1e>
   378fc:	0003d668 	.word	0x0003d668
   37900:	0003d668 	.word	0x0003d668
   37904:	0003d668 	.word	0x0003d668
   37908:	0003d66c 	.word	0x0003d66c

0003790c <malloc>:
   3790c:	b510      	push	{r4, lr}
   3790e:	4b03      	ldr	r3, [pc, #12]	; (3791c <malloc+0x10>)
   37910:	0001      	movs	r1, r0
   37912:	6818      	ldr	r0, [r3, #0]
   37914:	f000 f87c 	bl	37a10 <_malloc_r>
   37918:	bd10      	pop	{r4, pc}
   3791a:	46c0      	nop			; (mov r8, r8)
   3791c:	20000138 	.word	0x20000138

00037920 <free>:
   37920:	b510      	push	{r4, lr}
   37922:	4b03      	ldr	r3, [pc, #12]	; (37930 <free+0x10>)
   37924:	0001      	movs	r1, r0
   37926:	6818      	ldr	r0, [r3, #0]
   37928:	f000 f828 	bl	3797c <_free_r>
   3792c:	bd10      	pop	{r4, pc}
   3792e:	46c0      	nop			; (mov r8, r8)
   37930:	20000138 	.word	0x20000138

00037934 <memcpy>:
   37934:	2300      	movs	r3, #0
   37936:	b510      	push	{r4, lr}
   37938:	429a      	cmp	r2, r3
   3793a:	d100      	bne.n	3793e <memcpy+0xa>
   3793c:	bd10      	pop	{r4, pc}
   3793e:	5ccc      	ldrb	r4, [r1, r3]
   37940:	54c4      	strb	r4, [r0, r3]
   37942:	3301      	adds	r3, #1
   37944:	e7f8      	b.n	37938 <memcpy+0x4>

00037946 <memmove>:
   37946:	b510      	push	{r4, lr}
   37948:	4288      	cmp	r0, r1
   3794a:	d902      	bls.n	37952 <memmove+0xc>
   3794c:	188b      	adds	r3, r1, r2
   3794e:	4298      	cmp	r0, r3
   37950:	d308      	bcc.n	37964 <memmove+0x1e>
   37952:	2300      	movs	r3, #0
   37954:	429a      	cmp	r2, r3
   37956:	d007      	beq.n	37968 <memmove+0x22>
   37958:	5ccc      	ldrb	r4, [r1, r3]
   3795a:	54c4      	strb	r4, [r0, r3]
   3795c:	3301      	adds	r3, #1
   3795e:	e7f9      	b.n	37954 <memmove+0xe>
   37960:	5c8b      	ldrb	r3, [r1, r2]
   37962:	5483      	strb	r3, [r0, r2]
   37964:	3a01      	subs	r2, #1
   37966:	d2fb      	bcs.n	37960 <memmove+0x1a>
   37968:	bd10      	pop	{r4, pc}

0003796a <memset>:
   3796a:	0003      	movs	r3, r0
   3796c:	1882      	adds	r2, r0, r2
   3796e:	4293      	cmp	r3, r2
   37970:	d100      	bne.n	37974 <memset+0xa>
   37972:	4770      	bx	lr
   37974:	7019      	strb	r1, [r3, #0]
   37976:	3301      	adds	r3, #1
   37978:	e7f9      	b.n	3796e <memset+0x4>
	...

0003797c <_free_r>:
   3797c:	b570      	push	{r4, r5, r6, lr}
   3797e:	0005      	movs	r5, r0
   37980:	2900      	cmp	r1, #0
   37982:	d010      	beq.n	379a6 <_free_r+0x2a>
   37984:	1f0c      	subs	r4, r1, #4
   37986:	6823      	ldr	r3, [r4, #0]
   37988:	2b00      	cmp	r3, #0
   3798a:	da00      	bge.n	3798e <_free_r+0x12>
   3798c:	18e4      	adds	r4, r4, r3
   3798e:	0028      	movs	r0, r5
   37990:	f000 fdd8 	bl	38544 <__malloc_lock>
   37994:	4a1d      	ldr	r2, [pc, #116]	; (37a0c <_free_r+0x90>)
   37996:	6813      	ldr	r3, [r2, #0]
   37998:	2b00      	cmp	r3, #0
   3799a:	d105      	bne.n	379a8 <_free_r+0x2c>
   3799c:	6063      	str	r3, [r4, #4]
   3799e:	6014      	str	r4, [r2, #0]
   379a0:	0028      	movs	r0, r5
   379a2:	f000 fdd0 	bl	38546 <__malloc_unlock>
   379a6:	bd70      	pop	{r4, r5, r6, pc}
   379a8:	42a3      	cmp	r3, r4
   379aa:	d909      	bls.n	379c0 <_free_r+0x44>
   379ac:	6821      	ldr	r1, [r4, #0]
   379ae:	1860      	adds	r0, r4, r1
   379b0:	4283      	cmp	r3, r0
   379b2:	d1f3      	bne.n	3799c <_free_r+0x20>
   379b4:	6818      	ldr	r0, [r3, #0]
   379b6:	685b      	ldr	r3, [r3, #4]
   379b8:	1841      	adds	r1, r0, r1
   379ba:	6021      	str	r1, [r4, #0]
   379bc:	e7ee      	b.n	3799c <_free_r+0x20>
   379be:	0013      	movs	r3, r2
   379c0:	685a      	ldr	r2, [r3, #4]
   379c2:	2a00      	cmp	r2, #0
   379c4:	d001      	beq.n	379ca <_free_r+0x4e>
   379c6:	42a2      	cmp	r2, r4
   379c8:	d9f9      	bls.n	379be <_free_r+0x42>
   379ca:	6819      	ldr	r1, [r3, #0]
   379cc:	1858      	adds	r0, r3, r1
   379ce:	42a0      	cmp	r0, r4
   379d0:	d10b      	bne.n	379ea <_free_r+0x6e>
   379d2:	6820      	ldr	r0, [r4, #0]
   379d4:	1809      	adds	r1, r1, r0
   379d6:	1858      	adds	r0, r3, r1
   379d8:	6019      	str	r1, [r3, #0]
   379da:	4282      	cmp	r2, r0
   379dc:	d1e0      	bne.n	379a0 <_free_r+0x24>
   379de:	6810      	ldr	r0, [r2, #0]
   379e0:	6852      	ldr	r2, [r2, #4]
   379e2:	1841      	adds	r1, r0, r1
   379e4:	6019      	str	r1, [r3, #0]
   379e6:	605a      	str	r2, [r3, #4]
   379e8:	e7da      	b.n	379a0 <_free_r+0x24>
   379ea:	42a0      	cmp	r0, r4
   379ec:	d902      	bls.n	379f4 <_free_r+0x78>
   379ee:	230c      	movs	r3, #12
   379f0:	602b      	str	r3, [r5, #0]
   379f2:	e7d5      	b.n	379a0 <_free_r+0x24>
   379f4:	6821      	ldr	r1, [r4, #0]
   379f6:	1860      	adds	r0, r4, r1
   379f8:	4282      	cmp	r2, r0
   379fa:	d103      	bne.n	37a04 <_free_r+0x88>
   379fc:	6810      	ldr	r0, [r2, #0]
   379fe:	6852      	ldr	r2, [r2, #4]
   37a00:	1841      	adds	r1, r0, r1
   37a02:	6021      	str	r1, [r4, #0]
   37a04:	6062      	str	r2, [r4, #4]
   37a06:	605c      	str	r4, [r3, #4]
   37a08:	e7ca      	b.n	379a0 <_free_r+0x24>
   37a0a:	46c0      	nop			; (mov r8, r8)
   37a0c:	2000459c 	.word	0x2000459c

00037a10 <_malloc_r>:
   37a10:	2303      	movs	r3, #3
   37a12:	b570      	push	{r4, r5, r6, lr}
   37a14:	1ccd      	adds	r5, r1, #3
   37a16:	439d      	bics	r5, r3
   37a18:	3508      	adds	r5, #8
   37a1a:	0006      	movs	r6, r0
   37a1c:	2d0c      	cmp	r5, #12
   37a1e:	d21e      	bcs.n	37a5e <_malloc_r+0x4e>
   37a20:	250c      	movs	r5, #12
   37a22:	42a9      	cmp	r1, r5
   37a24:	d81d      	bhi.n	37a62 <_malloc_r+0x52>
   37a26:	0030      	movs	r0, r6
   37a28:	f000 fd8c 	bl	38544 <__malloc_lock>
   37a2c:	4a25      	ldr	r2, [pc, #148]	; (37ac4 <_malloc_r+0xb4>)
   37a2e:	6814      	ldr	r4, [r2, #0]
   37a30:	0021      	movs	r1, r4
   37a32:	2900      	cmp	r1, #0
   37a34:	d119      	bne.n	37a6a <_malloc_r+0x5a>
   37a36:	4c24      	ldr	r4, [pc, #144]	; (37ac8 <_malloc_r+0xb8>)
   37a38:	6823      	ldr	r3, [r4, #0]
   37a3a:	2b00      	cmp	r3, #0
   37a3c:	d103      	bne.n	37a46 <_malloc_r+0x36>
   37a3e:	0030      	movs	r0, r6
   37a40:	f000 f8ae 	bl	37ba0 <_sbrk_r>
   37a44:	6020      	str	r0, [r4, #0]
   37a46:	0029      	movs	r1, r5
   37a48:	0030      	movs	r0, r6
   37a4a:	f000 f8a9 	bl	37ba0 <_sbrk_r>
   37a4e:	1c43      	adds	r3, r0, #1
   37a50:	d12c      	bne.n	37aac <_malloc_r+0x9c>
   37a52:	230c      	movs	r3, #12
   37a54:	0030      	movs	r0, r6
   37a56:	6033      	str	r3, [r6, #0]
   37a58:	f000 fd75 	bl	38546 <__malloc_unlock>
   37a5c:	e003      	b.n	37a66 <_malloc_r+0x56>
   37a5e:	2d00      	cmp	r5, #0
   37a60:	dadf      	bge.n	37a22 <_malloc_r+0x12>
   37a62:	230c      	movs	r3, #12
   37a64:	6033      	str	r3, [r6, #0]
   37a66:	2000      	movs	r0, #0
   37a68:	bd70      	pop	{r4, r5, r6, pc}
   37a6a:	680b      	ldr	r3, [r1, #0]
   37a6c:	1b5b      	subs	r3, r3, r5
   37a6e:	d41a      	bmi.n	37aa6 <_malloc_r+0x96>
   37a70:	2b0b      	cmp	r3, #11
   37a72:	d903      	bls.n	37a7c <_malloc_r+0x6c>
   37a74:	600b      	str	r3, [r1, #0]
   37a76:	18cc      	adds	r4, r1, r3
   37a78:	6025      	str	r5, [r4, #0]
   37a7a:	e003      	b.n	37a84 <_malloc_r+0x74>
   37a7c:	428c      	cmp	r4, r1
   37a7e:	d10e      	bne.n	37a9e <_malloc_r+0x8e>
   37a80:	6863      	ldr	r3, [r4, #4]
   37a82:	6013      	str	r3, [r2, #0]
   37a84:	0030      	movs	r0, r6
   37a86:	f000 fd5e 	bl	38546 <__malloc_unlock>
   37a8a:	0020      	movs	r0, r4
   37a8c:	2207      	movs	r2, #7
   37a8e:	300b      	adds	r0, #11
   37a90:	1d23      	adds	r3, r4, #4
   37a92:	4390      	bics	r0, r2
   37a94:	1ac3      	subs	r3, r0, r3
   37a96:	d0e7      	beq.n	37a68 <_malloc_r+0x58>
   37a98:	425a      	negs	r2, r3
   37a9a:	50e2      	str	r2, [r4, r3]
   37a9c:	e7e4      	b.n	37a68 <_malloc_r+0x58>
   37a9e:	684b      	ldr	r3, [r1, #4]
   37aa0:	6063      	str	r3, [r4, #4]
   37aa2:	000c      	movs	r4, r1
   37aa4:	e7ee      	b.n	37a84 <_malloc_r+0x74>
   37aa6:	000c      	movs	r4, r1
   37aa8:	6849      	ldr	r1, [r1, #4]
   37aaa:	e7c2      	b.n	37a32 <_malloc_r+0x22>
   37aac:	2303      	movs	r3, #3
   37aae:	1cc4      	adds	r4, r0, #3
   37ab0:	439c      	bics	r4, r3
   37ab2:	42a0      	cmp	r0, r4
   37ab4:	d0e0      	beq.n	37a78 <_malloc_r+0x68>
   37ab6:	1a21      	subs	r1, r4, r0
   37ab8:	0030      	movs	r0, r6
   37aba:	f000 f871 	bl	37ba0 <_sbrk_r>
   37abe:	1c43      	adds	r3, r0, #1
   37ac0:	d1da      	bne.n	37a78 <_malloc_r+0x68>
   37ac2:	e7c6      	b.n	37a52 <_malloc_r+0x42>
   37ac4:	2000459c 	.word	0x2000459c
   37ac8:	200045a0 	.word	0x200045a0

00037acc <_puts_r>:
   37acc:	b570      	push	{r4, r5, r6, lr}
   37ace:	0005      	movs	r5, r0
   37ad0:	000e      	movs	r6, r1
   37ad2:	2800      	cmp	r0, #0
   37ad4:	d004      	beq.n	37ae0 <_puts_r+0x14>
   37ad6:	6983      	ldr	r3, [r0, #24]
   37ad8:	2b00      	cmp	r3, #0
   37ada:	d101      	bne.n	37ae0 <_puts_r+0x14>
   37adc:	f000 fc0e 	bl	382fc <__sinit>
   37ae0:	69ab      	ldr	r3, [r5, #24]
   37ae2:	68ac      	ldr	r4, [r5, #8]
   37ae4:	2b00      	cmp	r3, #0
   37ae6:	d102      	bne.n	37aee <_puts_r+0x22>
   37ae8:	0028      	movs	r0, r5
   37aea:	f000 fc07 	bl	382fc <__sinit>
   37aee:	4b24      	ldr	r3, [pc, #144]	; (37b80 <_puts_r+0xb4>)
   37af0:	429c      	cmp	r4, r3
   37af2:	d10f      	bne.n	37b14 <_puts_r+0x48>
   37af4:	686c      	ldr	r4, [r5, #4]
   37af6:	89a3      	ldrh	r3, [r4, #12]
   37af8:	071b      	lsls	r3, r3, #28
   37afa:	d502      	bpl.n	37b02 <_puts_r+0x36>
   37afc:	6923      	ldr	r3, [r4, #16]
   37afe:	2b00      	cmp	r3, #0
   37b00:	d120      	bne.n	37b44 <_puts_r+0x78>
   37b02:	0021      	movs	r1, r4
   37b04:	0028      	movs	r0, r5
   37b06:	f000 fa8b 	bl	38020 <__swsetup_r>
   37b0a:	2800      	cmp	r0, #0
   37b0c:	d01a      	beq.n	37b44 <_puts_r+0x78>
   37b0e:	2001      	movs	r0, #1
   37b10:	4240      	negs	r0, r0
   37b12:	bd70      	pop	{r4, r5, r6, pc}
   37b14:	4b1b      	ldr	r3, [pc, #108]	; (37b84 <_puts_r+0xb8>)
   37b16:	429c      	cmp	r4, r3
   37b18:	d101      	bne.n	37b1e <_puts_r+0x52>
   37b1a:	68ac      	ldr	r4, [r5, #8]
   37b1c:	e7eb      	b.n	37af6 <_puts_r+0x2a>
   37b1e:	4b1a      	ldr	r3, [pc, #104]	; (37b88 <_puts_r+0xbc>)
   37b20:	429c      	cmp	r4, r3
   37b22:	d1e8      	bne.n	37af6 <_puts_r+0x2a>
   37b24:	68ec      	ldr	r4, [r5, #12]
   37b26:	e7e6      	b.n	37af6 <_puts_r+0x2a>
   37b28:	3b01      	subs	r3, #1
   37b2a:	3601      	adds	r6, #1
   37b2c:	60a3      	str	r3, [r4, #8]
   37b2e:	2b00      	cmp	r3, #0
   37b30:	da04      	bge.n	37b3c <_puts_r+0x70>
   37b32:	69a2      	ldr	r2, [r4, #24]
   37b34:	4293      	cmp	r3, r2
   37b36:	db16      	blt.n	37b66 <_puts_r+0x9a>
   37b38:	290a      	cmp	r1, #10
   37b3a:	d014      	beq.n	37b66 <_puts_r+0x9a>
   37b3c:	6823      	ldr	r3, [r4, #0]
   37b3e:	1c5a      	adds	r2, r3, #1
   37b40:	6022      	str	r2, [r4, #0]
   37b42:	7019      	strb	r1, [r3, #0]
   37b44:	7831      	ldrb	r1, [r6, #0]
   37b46:	68a3      	ldr	r3, [r4, #8]
   37b48:	2900      	cmp	r1, #0
   37b4a:	d1ed      	bne.n	37b28 <_puts_r+0x5c>
   37b4c:	3b01      	subs	r3, #1
   37b4e:	60a3      	str	r3, [r4, #8]
   37b50:	2b00      	cmp	r3, #0
   37b52:	da0f      	bge.n	37b74 <_puts_r+0xa8>
   37b54:	0022      	movs	r2, r4
   37b56:	310a      	adds	r1, #10
   37b58:	0028      	movs	r0, r5
   37b5a:	f000 fa0b 	bl	37f74 <__swbuf_r>
   37b5e:	1c43      	adds	r3, r0, #1
   37b60:	d0d5      	beq.n	37b0e <_puts_r+0x42>
   37b62:	200a      	movs	r0, #10
   37b64:	e7d5      	b.n	37b12 <_puts_r+0x46>
   37b66:	0022      	movs	r2, r4
   37b68:	0028      	movs	r0, r5
   37b6a:	f000 fa03 	bl	37f74 <__swbuf_r>
   37b6e:	1c43      	adds	r3, r0, #1
   37b70:	d1e8      	bne.n	37b44 <_puts_r+0x78>
   37b72:	e7cc      	b.n	37b0e <_puts_r+0x42>
   37b74:	200a      	movs	r0, #10
   37b76:	6823      	ldr	r3, [r4, #0]
   37b78:	1c5a      	adds	r2, r3, #1
   37b7a:	6022      	str	r2, [r4, #0]
   37b7c:	7018      	strb	r0, [r3, #0]
   37b7e:	e7c8      	b.n	37b12 <_puts_r+0x46>
   37b80:	0003d4dc 	.word	0x0003d4dc
   37b84:	0003d4fc 	.word	0x0003d4fc
   37b88:	0003d4bc 	.word	0x0003d4bc

00037b8c <puts>:
   37b8c:	b510      	push	{r4, lr}
   37b8e:	4b03      	ldr	r3, [pc, #12]	; (37b9c <puts+0x10>)
   37b90:	0001      	movs	r1, r0
   37b92:	6818      	ldr	r0, [r3, #0]
   37b94:	f7ff ff9a 	bl	37acc <_puts_r>
   37b98:	bd10      	pop	{r4, pc}
   37b9a:	46c0      	nop			; (mov r8, r8)
   37b9c:	20000138 	.word	0x20000138

00037ba0 <_sbrk_r>:
   37ba0:	2300      	movs	r3, #0
   37ba2:	b570      	push	{r4, r5, r6, lr}
   37ba4:	4c06      	ldr	r4, [pc, #24]	; (37bc0 <_sbrk_r+0x20>)
   37ba6:	0005      	movs	r5, r0
   37ba8:	0008      	movs	r0, r1
   37baa:	6023      	str	r3, [r4, #0]
   37bac:	f7f5 fcfe 	bl	2d5ac <_sbrk>
   37bb0:	1c43      	adds	r3, r0, #1
   37bb2:	d103      	bne.n	37bbc <_sbrk_r+0x1c>
   37bb4:	6823      	ldr	r3, [r4, #0]
   37bb6:	2b00      	cmp	r3, #0
   37bb8:	d000      	beq.n	37bbc <_sbrk_r+0x1c>
   37bba:	602b      	str	r3, [r5, #0]
   37bbc:	bd70      	pop	{r4, r5, r6, pc}
   37bbe:	46c0      	nop			; (mov r8, r8)
   37bc0:	20005b08 	.word	0x20005b08

00037bc4 <sniprintf>:
   37bc4:	b40c      	push	{r2, r3}
   37bc6:	b530      	push	{r4, r5, lr}
   37bc8:	4b16      	ldr	r3, [pc, #88]	; (37c24 <sniprintf+0x60>)
   37bca:	b09d      	sub	sp, #116	; 0x74
   37bcc:	1e0c      	subs	r4, r1, #0
   37bce:	681d      	ldr	r5, [r3, #0]
   37bd0:	da08      	bge.n	37be4 <sniprintf+0x20>
   37bd2:	238b      	movs	r3, #139	; 0x8b
   37bd4:	2001      	movs	r0, #1
   37bd6:	602b      	str	r3, [r5, #0]
   37bd8:	4240      	negs	r0, r0
   37bda:	b01d      	add	sp, #116	; 0x74
   37bdc:	bc30      	pop	{r4, r5}
   37bde:	bc08      	pop	{r3}
   37be0:	b002      	add	sp, #8
   37be2:	4718      	bx	r3
   37be4:	2382      	movs	r3, #130	; 0x82
   37be6:	a902      	add	r1, sp, #8
   37be8:	009b      	lsls	r3, r3, #2
   37bea:	818b      	strh	r3, [r1, #12]
   37bec:	2300      	movs	r3, #0
   37bee:	9002      	str	r0, [sp, #8]
   37bf0:	6108      	str	r0, [r1, #16]
   37bf2:	429c      	cmp	r4, r3
   37bf4:	d000      	beq.n	37bf8 <sniprintf+0x34>
   37bf6:	1e63      	subs	r3, r4, #1
   37bf8:	608b      	str	r3, [r1, #8]
   37bfa:	614b      	str	r3, [r1, #20]
   37bfc:	2301      	movs	r3, #1
   37bfe:	425b      	negs	r3, r3
   37c00:	81cb      	strh	r3, [r1, #14]
   37c02:	9a20      	ldr	r2, [sp, #128]	; 0x80
   37c04:	ab21      	add	r3, sp, #132	; 0x84
   37c06:	0028      	movs	r0, r5
   37c08:	9301      	str	r3, [sp, #4]
   37c0a:	f000 fcff 	bl	3860c <_svfiprintf_r>
   37c0e:	1c43      	adds	r3, r0, #1
   37c10:	da01      	bge.n	37c16 <sniprintf+0x52>
   37c12:	238b      	movs	r3, #139	; 0x8b
   37c14:	602b      	str	r3, [r5, #0]
   37c16:	2c00      	cmp	r4, #0
   37c18:	d0df      	beq.n	37bda <sniprintf+0x16>
   37c1a:	2300      	movs	r3, #0
   37c1c:	9a02      	ldr	r2, [sp, #8]
   37c1e:	7013      	strb	r3, [r2, #0]
   37c20:	e7db      	b.n	37bda <sniprintf+0x16>
   37c22:	46c0      	nop			; (mov r8, r8)
   37c24:	20000138 	.word	0x20000138

00037c28 <siprintf>:
   37c28:	b40e      	push	{r1, r2, r3}
   37c2a:	b510      	push	{r4, lr}
   37c2c:	b09d      	sub	sp, #116	; 0x74
   37c2e:	a902      	add	r1, sp, #8
   37c30:	9002      	str	r0, [sp, #8]
   37c32:	6108      	str	r0, [r1, #16]
   37c34:	480b      	ldr	r0, [pc, #44]	; (37c64 <siprintf+0x3c>)
   37c36:	2482      	movs	r4, #130	; 0x82
   37c38:	6088      	str	r0, [r1, #8]
   37c3a:	6148      	str	r0, [r1, #20]
   37c3c:	2001      	movs	r0, #1
   37c3e:	4240      	negs	r0, r0
   37c40:	ab1f      	add	r3, sp, #124	; 0x7c
   37c42:	81c8      	strh	r0, [r1, #14]
   37c44:	4808      	ldr	r0, [pc, #32]	; (37c68 <siprintf+0x40>)
   37c46:	cb04      	ldmia	r3!, {r2}
   37c48:	00a4      	lsls	r4, r4, #2
   37c4a:	6800      	ldr	r0, [r0, #0]
   37c4c:	9301      	str	r3, [sp, #4]
   37c4e:	818c      	strh	r4, [r1, #12]
   37c50:	f000 fcdc 	bl	3860c <_svfiprintf_r>
   37c54:	2300      	movs	r3, #0
   37c56:	9a02      	ldr	r2, [sp, #8]
   37c58:	7013      	strb	r3, [r2, #0]
   37c5a:	b01d      	add	sp, #116	; 0x74
   37c5c:	bc10      	pop	{r4}
   37c5e:	bc08      	pop	{r3}
   37c60:	b003      	add	sp, #12
   37c62:	4718      	bx	r3
   37c64:	7fffffff 	.word	0x7fffffff
   37c68:	20000138 	.word	0x20000138

00037c6c <strcasecmp>:
   37c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37c6e:	0007      	movs	r7, r0
   37c70:	000e      	movs	r6, r1
   37c72:	783c      	ldrb	r4, [r7, #0]
   37c74:	f000 fbda 	bl	3842c <__locale_ctype_ptr>
   37c78:	2203      	movs	r2, #3
   37c7a:	1900      	adds	r0, r0, r4
   37c7c:	7843      	ldrb	r3, [r0, #1]
   37c7e:	4013      	ands	r3, r2
   37c80:	2b01      	cmp	r3, #1
   37c82:	d100      	bne.n	37c86 <strcasecmp+0x1a>
   37c84:	3420      	adds	r4, #32
   37c86:	7835      	ldrb	r5, [r6, #0]
   37c88:	f000 fbd0 	bl	3842c <__locale_ctype_ptr>
   37c8c:	2203      	movs	r2, #3
   37c8e:	1940      	adds	r0, r0, r5
   37c90:	7843      	ldrb	r3, [r0, #1]
   37c92:	4013      	ands	r3, r2
   37c94:	2b01      	cmp	r3, #1
   37c96:	d100      	bne.n	37c9a <strcasecmp+0x2e>
   37c98:	3520      	adds	r5, #32
   37c9a:	1b60      	subs	r0, r4, r5
   37c9c:	d103      	bne.n	37ca6 <strcasecmp+0x3a>
   37c9e:	3701      	adds	r7, #1
   37ca0:	3601      	adds	r6, #1
   37ca2:	2d00      	cmp	r5, #0
   37ca4:	d1e5      	bne.n	37c72 <strcasecmp+0x6>
   37ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037ca8 <strcat>:
   37ca8:	0002      	movs	r2, r0
   37caa:	b510      	push	{r4, lr}
   37cac:	7813      	ldrb	r3, [r2, #0]
   37cae:	2b00      	cmp	r3, #0
   37cb0:	d105      	bne.n	37cbe <strcat+0x16>
   37cb2:	5ccc      	ldrb	r4, [r1, r3]
   37cb4:	54d4      	strb	r4, [r2, r3]
   37cb6:	3301      	adds	r3, #1
   37cb8:	2c00      	cmp	r4, #0
   37cba:	d1fa      	bne.n	37cb2 <strcat+0xa>
   37cbc:	bd10      	pop	{r4, pc}
   37cbe:	3201      	adds	r2, #1
   37cc0:	e7f4      	b.n	37cac <strcat+0x4>

00037cc2 <strcmp>:
   37cc2:	7802      	ldrb	r2, [r0, #0]
   37cc4:	780b      	ldrb	r3, [r1, #0]
   37cc6:	2a00      	cmp	r2, #0
   37cc8:	d003      	beq.n	37cd2 <strcmp+0x10>
   37cca:	3001      	adds	r0, #1
   37ccc:	3101      	adds	r1, #1
   37cce:	429a      	cmp	r2, r3
   37cd0:	d0f7      	beq.n	37cc2 <strcmp>
   37cd2:	1ad0      	subs	r0, r2, r3
   37cd4:	4770      	bx	lr

00037cd6 <strcpy>:
   37cd6:	1c03      	adds	r3, r0, #0
   37cd8:	780a      	ldrb	r2, [r1, #0]
   37cda:	3101      	adds	r1, #1
   37cdc:	701a      	strb	r2, [r3, #0]
   37cde:	3301      	adds	r3, #1
   37ce0:	2a00      	cmp	r2, #0
   37ce2:	d1f9      	bne.n	37cd8 <strcpy+0x2>
   37ce4:	4770      	bx	lr
	...

00037ce8 <strdup>:
   37ce8:	b510      	push	{r4, lr}
   37cea:	4b03      	ldr	r3, [pc, #12]	; (37cf8 <strdup+0x10>)
   37cec:	0001      	movs	r1, r0
   37cee:	6818      	ldr	r0, [r3, #0]
   37cf0:	f000 f804 	bl	37cfc <_strdup_r>
   37cf4:	bd10      	pop	{r4, pc}
   37cf6:	46c0      	nop			; (mov r8, r8)
   37cf8:	20000138 	.word	0x20000138

00037cfc <_strdup_r>:
   37cfc:	b570      	push	{r4, r5, r6, lr}
   37cfe:	0005      	movs	r5, r0
   37d00:	0008      	movs	r0, r1
   37d02:	000e      	movs	r6, r1
   37d04:	f000 f80d 	bl	37d22 <strlen>
   37d08:	1c44      	adds	r4, r0, #1
   37d0a:	0021      	movs	r1, r4
   37d0c:	0028      	movs	r0, r5
   37d0e:	f7ff fe7f 	bl	37a10 <_malloc_r>
   37d12:	1e05      	subs	r5, r0, #0
   37d14:	d003      	beq.n	37d1e <_strdup_r+0x22>
   37d16:	0022      	movs	r2, r4
   37d18:	0031      	movs	r1, r6
   37d1a:	f7ff fe0b 	bl	37934 <memcpy>
   37d1e:	0028      	movs	r0, r5
   37d20:	bd70      	pop	{r4, r5, r6, pc}

00037d22 <strlen>:
   37d22:	2300      	movs	r3, #0
   37d24:	5cc2      	ldrb	r2, [r0, r3]
   37d26:	3301      	adds	r3, #1
   37d28:	2a00      	cmp	r2, #0
   37d2a:	d1fb      	bne.n	37d24 <strlen+0x2>
   37d2c:	1e58      	subs	r0, r3, #1
   37d2e:	4770      	bx	lr

00037d30 <strncmp>:
   37d30:	2300      	movs	r3, #0
   37d32:	b530      	push	{r4, r5, lr}
   37d34:	429a      	cmp	r2, r3
   37d36:	d00a      	beq.n	37d4e <strncmp+0x1e>
   37d38:	3a01      	subs	r2, #1
   37d3a:	5cc4      	ldrb	r4, [r0, r3]
   37d3c:	5ccd      	ldrb	r5, [r1, r3]
   37d3e:	42ac      	cmp	r4, r5
   37d40:	d104      	bne.n	37d4c <strncmp+0x1c>
   37d42:	429a      	cmp	r2, r3
   37d44:	d002      	beq.n	37d4c <strncmp+0x1c>
   37d46:	3301      	adds	r3, #1
   37d48:	2c00      	cmp	r4, #0
   37d4a:	d1f6      	bne.n	37d3a <strncmp+0xa>
   37d4c:	1b63      	subs	r3, r4, r5
   37d4e:	0018      	movs	r0, r3
   37d50:	bd30      	pop	{r4, r5, pc}

00037d52 <strncpy>:
   37d52:	b570      	push	{r4, r5, r6, lr}
   37d54:	0004      	movs	r4, r0
   37d56:	2a00      	cmp	r2, #0
   37d58:	d100      	bne.n	37d5c <strncpy+0xa>
   37d5a:	bd70      	pop	{r4, r5, r6, pc}
   37d5c:	780d      	ldrb	r5, [r1, #0]
   37d5e:	1e56      	subs	r6, r2, #1
   37d60:	1c63      	adds	r3, r4, #1
   37d62:	7025      	strb	r5, [r4, #0]
   37d64:	3101      	adds	r1, #1
   37d66:	2d00      	cmp	r5, #0
   37d68:	d105      	bne.n	37d76 <strncpy+0x24>
   37d6a:	18a4      	adds	r4, r4, r2
   37d6c:	429c      	cmp	r4, r3
   37d6e:	d0f4      	beq.n	37d5a <strncpy+0x8>
   37d70:	701d      	strb	r5, [r3, #0]
   37d72:	3301      	adds	r3, #1
   37d74:	e7fa      	b.n	37d6c <strncpy+0x1a>
   37d76:	001c      	movs	r4, r3
   37d78:	0032      	movs	r2, r6
   37d7a:	e7ec      	b.n	37d56 <strncpy+0x4>

00037d7c <strrchr>:
   37d7c:	b570      	push	{r4, r5, r6, lr}
   37d7e:	000d      	movs	r5, r1
   37d80:	2400      	movs	r4, #0
   37d82:	2900      	cmp	r1, #0
   37d84:	d105      	bne.n	37d92 <strrchr+0x16>
   37d86:	f000 ff19 	bl	38bbc <strchr>
   37d8a:	0004      	movs	r4, r0
   37d8c:	e006      	b.n	37d9c <strrchr+0x20>
   37d8e:	001c      	movs	r4, r3
   37d90:	1c58      	adds	r0, r3, #1
   37d92:	0029      	movs	r1, r5
   37d94:	f000 ff12 	bl	38bbc <strchr>
   37d98:	1e03      	subs	r3, r0, #0
   37d9a:	d1f8      	bne.n	37d8e <strrchr+0x12>
   37d9c:	0020      	movs	r0, r4
   37d9e:	bd70      	pop	{r4, r5, r6, pc}

00037da0 <strstr>:
   37da0:	b510      	push	{r4, lr}
   37da2:	0002      	movs	r2, r0
   37da4:	7800      	ldrb	r0, [r0, #0]
   37da6:	2800      	cmp	r0, #0
   37da8:	d104      	bne.n	37db4 <strstr+0x14>
   37daa:	7809      	ldrb	r1, [r1, #0]
   37dac:	2900      	cmp	r1, #0
   37dae:	d00d      	beq.n	37dcc <strstr+0x2c>
   37db0:	bd10      	pop	{r4, pc}
   37db2:	3201      	adds	r2, #1
   37db4:	7810      	ldrb	r0, [r2, #0]
   37db6:	2800      	cmp	r0, #0
   37db8:	d0fa      	beq.n	37db0 <strstr+0x10>
   37dba:	2300      	movs	r3, #0
   37dbc:	5cc8      	ldrb	r0, [r1, r3]
   37dbe:	2800      	cmp	r0, #0
   37dc0:	d004      	beq.n	37dcc <strstr+0x2c>
   37dc2:	5cd4      	ldrb	r4, [r2, r3]
   37dc4:	4284      	cmp	r4, r0
   37dc6:	d1f4      	bne.n	37db2 <strstr+0x12>
   37dc8:	3301      	adds	r3, #1
   37dca:	e7f7      	b.n	37dbc <strstr+0x1c>
   37dcc:	0010      	movs	r0, r2
   37dce:	e7ef      	b.n	37db0 <strstr+0x10>

00037dd0 <_strtol_l.isra.0>:
   37dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   37dd2:	001f      	movs	r7, r3
   37dd4:	000e      	movs	r6, r1
   37dd6:	b087      	sub	sp, #28
   37dd8:	9005      	str	r0, [sp, #20]
   37dda:	9103      	str	r1, [sp, #12]
   37ddc:	9202      	str	r2, [sp, #8]
   37dde:	980c      	ldr	r0, [sp, #48]	; 0x30
   37de0:	7834      	ldrb	r4, [r6, #0]
   37de2:	f000 fb20 	bl	38426 <__locale_ctype_ptr_l>
   37de6:	2208      	movs	r2, #8
   37de8:	1900      	adds	r0, r0, r4
   37dea:	7843      	ldrb	r3, [r0, #1]
   37dec:	1c75      	adds	r5, r6, #1
   37dee:	4013      	ands	r3, r2
   37df0:	d10c      	bne.n	37e0c <_strtol_l.isra.0+0x3c>
   37df2:	2c2d      	cmp	r4, #45	; 0x2d
   37df4:	d10c      	bne.n	37e10 <_strtol_l.isra.0+0x40>
   37df6:	3301      	adds	r3, #1
   37df8:	782c      	ldrb	r4, [r5, #0]
   37dfa:	9301      	str	r3, [sp, #4]
   37dfc:	1cb5      	adds	r5, r6, #2
   37dfe:	2f00      	cmp	r7, #0
   37e00:	d00c      	beq.n	37e1c <_strtol_l.isra.0+0x4c>
   37e02:	2f10      	cmp	r7, #16
   37e04:	d114      	bne.n	37e30 <_strtol_l.isra.0+0x60>
   37e06:	2c30      	cmp	r4, #48	; 0x30
   37e08:	d00a      	beq.n	37e20 <_strtol_l.isra.0+0x50>
   37e0a:	e011      	b.n	37e30 <_strtol_l.isra.0+0x60>
   37e0c:	002e      	movs	r6, r5
   37e0e:	e7e6      	b.n	37dde <_strtol_l.isra.0+0xe>
   37e10:	9301      	str	r3, [sp, #4]
   37e12:	2c2b      	cmp	r4, #43	; 0x2b
   37e14:	d1f3      	bne.n	37dfe <_strtol_l.isra.0+0x2e>
   37e16:	782c      	ldrb	r4, [r5, #0]
   37e18:	1cb5      	adds	r5, r6, #2
   37e1a:	e7f0      	b.n	37dfe <_strtol_l.isra.0+0x2e>
   37e1c:	2c30      	cmp	r4, #48	; 0x30
   37e1e:	d12f      	bne.n	37e80 <_strtol_l.isra.0+0xb0>
   37e20:	2220      	movs	r2, #32
   37e22:	782b      	ldrb	r3, [r5, #0]
   37e24:	4393      	bics	r3, r2
   37e26:	2b58      	cmp	r3, #88	; 0x58
   37e28:	d151      	bne.n	37ece <_strtol_l.isra.0+0xfe>
   37e2a:	2710      	movs	r7, #16
   37e2c:	786c      	ldrb	r4, [r5, #1]
   37e2e:	3502      	adds	r5, #2
   37e30:	9b01      	ldr	r3, [sp, #4]
   37e32:	4a29      	ldr	r2, [pc, #164]	; (37ed8 <_strtol_l.isra.0+0x108>)
   37e34:	0039      	movs	r1, r7
   37e36:	189e      	adds	r6, r3, r2
   37e38:	0030      	movs	r0, r6
   37e3a:	f7fd f881 	bl	34f40 <__aeabi_uidivmod>
   37e3e:	0030      	movs	r0, r6
   37e40:	9104      	str	r1, [sp, #16]
   37e42:	0039      	movs	r1, r7
   37e44:	f7fc fff6 	bl	34e34 <__udivsi3>
   37e48:	2101      	movs	r1, #1
   37e4a:	2300      	movs	r3, #0
   37e4c:	4249      	negs	r1, r1
   37e4e:	0002      	movs	r2, r0
   37e50:	468c      	mov	ip, r1
   37e52:	0018      	movs	r0, r3
   37e54:	0021      	movs	r1, r4
   37e56:	3930      	subs	r1, #48	; 0x30
   37e58:	2909      	cmp	r1, #9
   37e5a:	d813      	bhi.n	37e84 <_strtol_l.isra.0+0xb4>
   37e5c:	000c      	movs	r4, r1
   37e5e:	42a7      	cmp	r7, r4
   37e60:	dd1c      	ble.n	37e9c <_strtol_l.isra.0+0xcc>
   37e62:	1c59      	adds	r1, r3, #1
   37e64:	d009      	beq.n	37e7a <_strtol_l.isra.0+0xaa>
   37e66:	4663      	mov	r3, ip
   37e68:	4282      	cmp	r2, r0
   37e6a:	d306      	bcc.n	37e7a <_strtol_l.isra.0+0xaa>
   37e6c:	d102      	bne.n	37e74 <_strtol_l.isra.0+0xa4>
   37e6e:	9904      	ldr	r1, [sp, #16]
   37e70:	42a1      	cmp	r1, r4
   37e72:	db02      	blt.n	37e7a <_strtol_l.isra.0+0xaa>
   37e74:	2301      	movs	r3, #1
   37e76:	4378      	muls	r0, r7
   37e78:	1820      	adds	r0, r4, r0
   37e7a:	782c      	ldrb	r4, [r5, #0]
   37e7c:	3501      	adds	r5, #1
   37e7e:	e7e9      	b.n	37e54 <_strtol_l.isra.0+0x84>
   37e80:	270a      	movs	r7, #10
   37e82:	e7d5      	b.n	37e30 <_strtol_l.isra.0+0x60>
   37e84:	0021      	movs	r1, r4
   37e86:	3941      	subs	r1, #65	; 0x41
   37e88:	2919      	cmp	r1, #25
   37e8a:	d801      	bhi.n	37e90 <_strtol_l.isra.0+0xc0>
   37e8c:	3c37      	subs	r4, #55	; 0x37
   37e8e:	e7e6      	b.n	37e5e <_strtol_l.isra.0+0x8e>
   37e90:	0021      	movs	r1, r4
   37e92:	3961      	subs	r1, #97	; 0x61
   37e94:	2919      	cmp	r1, #25
   37e96:	d801      	bhi.n	37e9c <_strtol_l.isra.0+0xcc>
   37e98:	3c57      	subs	r4, #87	; 0x57
   37e9a:	e7e0      	b.n	37e5e <_strtol_l.isra.0+0x8e>
   37e9c:	1c5a      	adds	r2, r3, #1
   37e9e:	d108      	bne.n	37eb2 <_strtol_l.isra.0+0xe2>
   37ea0:	9a05      	ldr	r2, [sp, #20]
   37ea2:	3323      	adds	r3, #35	; 0x23
   37ea4:	6013      	str	r3, [r2, #0]
   37ea6:	9b02      	ldr	r3, [sp, #8]
   37ea8:	0030      	movs	r0, r6
   37eaa:	2b00      	cmp	r3, #0
   37eac:	d10b      	bne.n	37ec6 <_strtol_l.isra.0+0xf6>
   37eae:	b007      	add	sp, #28
   37eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37eb2:	9a01      	ldr	r2, [sp, #4]
   37eb4:	2a00      	cmp	r2, #0
   37eb6:	d000      	beq.n	37eba <_strtol_l.isra.0+0xea>
   37eb8:	4240      	negs	r0, r0
   37eba:	9a02      	ldr	r2, [sp, #8]
   37ebc:	2a00      	cmp	r2, #0
   37ebe:	d0f6      	beq.n	37eae <_strtol_l.isra.0+0xde>
   37ec0:	9a03      	ldr	r2, [sp, #12]
   37ec2:	2b00      	cmp	r3, #0
   37ec4:	d000      	beq.n	37ec8 <_strtol_l.isra.0+0xf8>
   37ec6:	1e6a      	subs	r2, r5, #1
   37ec8:	9b02      	ldr	r3, [sp, #8]
   37eca:	601a      	str	r2, [r3, #0]
   37ecc:	e7ef      	b.n	37eae <_strtol_l.isra.0+0xde>
   37ece:	2430      	movs	r4, #48	; 0x30
   37ed0:	2f00      	cmp	r7, #0
   37ed2:	d1ad      	bne.n	37e30 <_strtol_l.isra.0+0x60>
   37ed4:	3708      	adds	r7, #8
   37ed6:	e7ab      	b.n	37e30 <_strtol_l.isra.0+0x60>
   37ed8:	7fffffff 	.word	0x7fffffff

00037edc <strtol>:
   37edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37ede:	0013      	movs	r3, r2
   37ee0:	4a06      	ldr	r2, [pc, #24]	; (37efc <strtol+0x20>)
   37ee2:	0005      	movs	r5, r0
   37ee4:	6810      	ldr	r0, [r2, #0]
   37ee6:	6a04      	ldr	r4, [r0, #32]
   37ee8:	2c00      	cmp	r4, #0
   37eea:	d100      	bne.n	37eee <strtol+0x12>
   37eec:	4c04      	ldr	r4, [pc, #16]	; (37f00 <strtol+0x24>)
   37eee:	000a      	movs	r2, r1
   37ef0:	9400      	str	r4, [sp, #0]
   37ef2:	0029      	movs	r1, r5
   37ef4:	f7ff ff6c 	bl	37dd0 <_strtol_l.isra.0>
   37ef8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   37efa:	46c0      	nop			; (mov r8, r8)
   37efc:	20000138 	.word	0x20000138
   37f00:	2000019c 	.word	0x2000019c

00037f04 <_vsniprintf_r>:
   37f04:	b530      	push	{r4, r5, lr}
   37f06:	0014      	movs	r4, r2
   37f08:	b09b      	sub	sp, #108	; 0x6c
   37f0a:	0005      	movs	r5, r0
   37f0c:	001a      	movs	r2, r3
   37f0e:	2c00      	cmp	r4, #0
   37f10:	da05      	bge.n	37f1e <_vsniprintf_r+0x1a>
   37f12:	238b      	movs	r3, #139	; 0x8b
   37f14:	6003      	str	r3, [r0, #0]
   37f16:	2001      	movs	r0, #1
   37f18:	4240      	negs	r0, r0
   37f1a:	b01b      	add	sp, #108	; 0x6c
   37f1c:	bd30      	pop	{r4, r5, pc}
   37f1e:	2382      	movs	r3, #130	; 0x82
   37f20:	4668      	mov	r0, sp
   37f22:	009b      	lsls	r3, r3, #2
   37f24:	8183      	strh	r3, [r0, #12]
   37f26:	2300      	movs	r3, #0
   37f28:	9100      	str	r1, [sp, #0]
   37f2a:	9104      	str	r1, [sp, #16]
   37f2c:	429c      	cmp	r4, r3
   37f2e:	d000      	beq.n	37f32 <_vsniprintf_r+0x2e>
   37f30:	1e63      	subs	r3, r4, #1
   37f32:	9302      	str	r3, [sp, #8]
   37f34:	9305      	str	r3, [sp, #20]
   37f36:	2301      	movs	r3, #1
   37f38:	4669      	mov	r1, sp
   37f3a:	425b      	negs	r3, r3
   37f3c:	81cb      	strh	r3, [r1, #14]
   37f3e:	0028      	movs	r0, r5
   37f40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   37f42:	f000 fb63 	bl	3860c <_svfiprintf_r>
   37f46:	1c43      	adds	r3, r0, #1
   37f48:	da01      	bge.n	37f4e <_vsniprintf_r+0x4a>
   37f4a:	238b      	movs	r3, #139	; 0x8b
   37f4c:	602b      	str	r3, [r5, #0]
   37f4e:	2c00      	cmp	r4, #0
   37f50:	d0e3      	beq.n	37f1a <_vsniprintf_r+0x16>
   37f52:	2300      	movs	r3, #0
   37f54:	9a00      	ldr	r2, [sp, #0]
   37f56:	7013      	strb	r3, [r2, #0]
   37f58:	e7df      	b.n	37f1a <_vsniprintf_r+0x16>
	...

00037f5c <vsniprintf>:
   37f5c:	b507      	push	{r0, r1, r2, lr}
   37f5e:	9300      	str	r3, [sp, #0]
   37f60:	0013      	movs	r3, r2
   37f62:	000a      	movs	r2, r1
   37f64:	0001      	movs	r1, r0
   37f66:	4802      	ldr	r0, [pc, #8]	; (37f70 <vsniprintf+0x14>)
   37f68:	6800      	ldr	r0, [r0, #0]
   37f6a:	f7ff ffcb 	bl	37f04 <_vsniprintf_r>
   37f6e:	bd0e      	pop	{r1, r2, r3, pc}
   37f70:	20000138 	.word	0x20000138

00037f74 <__swbuf_r>:
   37f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37f76:	0005      	movs	r5, r0
   37f78:	000e      	movs	r6, r1
   37f7a:	0014      	movs	r4, r2
   37f7c:	2800      	cmp	r0, #0
   37f7e:	d004      	beq.n	37f8a <__swbuf_r+0x16>
   37f80:	6983      	ldr	r3, [r0, #24]
   37f82:	2b00      	cmp	r3, #0
   37f84:	d101      	bne.n	37f8a <__swbuf_r+0x16>
   37f86:	f000 f9b9 	bl	382fc <__sinit>
   37f8a:	4b22      	ldr	r3, [pc, #136]	; (38014 <__swbuf_r+0xa0>)
   37f8c:	429c      	cmp	r4, r3
   37f8e:	d12d      	bne.n	37fec <__swbuf_r+0x78>
   37f90:	686c      	ldr	r4, [r5, #4]
   37f92:	69a3      	ldr	r3, [r4, #24]
   37f94:	60a3      	str	r3, [r4, #8]
   37f96:	89a3      	ldrh	r3, [r4, #12]
   37f98:	071b      	lsls	r3, r3, #28
   37f9a:	d531      	bpl.n	38000 <__swbuf_r+0x8c>
   37f9c:	6923      	ldr	r3, [r4, #16]
   37f9e:	2b00      	cmp	r3, #0
   37fa0:	d02e      	beq.n	38000 <__swbuf_r+0x8c>
   37fa2:	6823      	ldr	r3, [r4, #0]
   37fa4:	6922      	ldr	r2, [r4, #16]
   37fa6:	b2f7      	uxtb	r7, r6
   37fa8:	1a98      	subs	r0, r3, r2
   37faa:	6963      	ldr	r3, [r4, #20]
   37fac:	b2f6      	uxtb	r6, r6
   37fae:	4298      	cmp	r0, r3
   37fb0:	db05      	blt.n	37fbe <__swbuf_r+0x4a>
   37fb2:	0021      	movs	r1, r4
   37fb4:	0028      	movs	r0, r5
   37fb6:	f000 f933 	bl	38220 <_fflush_r>
   37fba:	2800      	cmp	r0, #0
   37fbc:	d126      	bne.n	3800c <__swbuf_r+0x98>
   37fbe:	68a3      	ldr	r3, [r4, #8]
   37fc0:	3001      	adds	r0, #1
   37fc2:	3b01      	subs	r3, #1
   37fc4:	60a3      	str	r3, [r4, #8]
   37fc6:	6823      	ldr	r3, [r4, #0]
   37fc8:	1c5a      	adds	r2, r3, #1
   37fca:	6022      	str	r2, [r4, #0]
   37fcc:	701f      	strb	r7, [r3, #0]
   37fce:	6963      	ldr	r3, [r4, #20]
   37fd0:	4298      	cmp	r0, r3
   37fd2:	d004      	beq.n	37fde <__swbuf_r+0x6a>
   37fd4:	89a3      	ldrh	r3, [r4, #12]
   37fd6:	07db      	lsls	r3, r3, #31
   37fd8:	d51a      	bpl.n	38010 <__swbuf_r+0x9c>
   37fda:	2e0a      	cmp	r6, #10
   37fdc:	d118      	bne.n	38010 <__swbuf_r+0x9c>
   37fde:	0021      	movs	r1, r4
   37fe0:	0028      	movs	r0, r5
   37fe2:	f000 f91d 	bl	38220 <_fflush_r>
   37fe6:	2800      	cmp	r0, #0
   37fe8:	d012      	beq.n	38010 <__swbuf_r+0x9c>
   37fea:	e00f      	b.n	3800c <__swbuf_r+0x98>
   37fec:	4b0a      	ldr	r3, [pc, #40]	; (38018 <__swbuf_r+0xa4>)
   37fee:	429c      	cmp	r4, r3
   37ff0:	d101      	bne.n	37ff6 <__swbuf_r+0x82>
   37ff2:	68ac      	ldr	r4, [r5, #8]
   37ff4:	e7cd      	b.n	37f92 <__swbuf_r+0x1e>
   37ff6:	4b09      	ldr	r3, [pc, #36]	; (3801c <__swbuf_r+0xa8>)
   37ff8:	429c      	cmp	r4, r3
   37ffa:	d1ca      	bne.n	37f92 <__swbuf_r+0x1e>
   37ffc:	68ec      	ldr	r4, [r5, #12]
   37ffe:	e7c8      	b.n	37f92 <__swbuf_r+0x1e>
   38000:	0021      	movs	r1, r4
   38002:	0028      	movs	r0, r5
   38004:	f000 f80c 	bl	38020 <__swsetup_r>
   38008:	2800      	cmp	r0, #0
   3800a:	d0ca      	beq.n	37fa2 <__swbuf_r+0x2e>
   3800c:	2601      	movs	r6, #1
   3800e:	4276      	negs	r6, r6
   38010:	0030      	movs	r0, r6
   38012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38014:	0003d4dc 	.word	0x0003d4dc
   38018:	0003d4fc 	.word	0x0003d4fc
   3801c:	0003d4bc 	.word	0x0003d4bc

00038020 <__swsetup_r>:
   38020:	4b36      	ldr	r3, [pc, #216]	; (380fc <__swsetup_r+0xdc>)
   38022:	b570      	push	{r4, r5, r6, lr}
   38024:	681d      	ldr	r5, [r3, #0]
   38026:	0006      	movs	r6, r0
   38028:	000c      	movs	r4, r1
   3802a:	2d00      	cmp	r5, #0
   3802c:	d005      	beq.n	3803a <__swsetup_r+0x1a>
   3802e:	69ab      	ldr	r3, [r5, #24]
   38030:	2b00      	cmp	r3, #0
   38032:	d102      	bne.n	3803a <__swsetup_r+0x1a>
   38034:	0028      	movs	r0, r5
   38036:	f000 f961 	bl	382fc <__sinit>
   3803a:	4b31      	ldr	r3, [pc, #196]	; (38100 <__swsetup_r+0xe0>)
   3803c:	429c      	cmp	r4, r3
   3803e:	d10f      	bne.n	38060 <__swsetup_r+0x40>
   38040:	686c      	ldr	r4, [r5, #4]
   38042:	230c      	movs	r3, #12
   38044:	5ee2      	ldrsh	r2, [r4, r3]
   38046:	b293      	uxth	r3, r2
   38048:	0719      	lsls	r1, r3, #28
   3804a:	d42d      	bmi.n	380a8 <__swsetup_r+0x88>
   3804c:	06d9      	lsls	r1, r3, #27
   3804e:	d411      	bmi.n	38074 <__swsetup_r+0x54>
   38050:	2309      	movs	r3, #9
   38052:	2001      	movs	r0, #1
   38054:	6033      	str	r3, [r6, #0]
   38056:	3337      	adds	r3, #55	; 0x37
   38058:	4313      	orrs	r3, r2
   3805a:	81a3      	strh	r3, [r4, #12]
   3805c:	4240      	negs	r0, r0
   3805e:	bd70      	pop	{r4, r5, r6, pc}
   38060:	4b28      	ldr	r3, [pc, #160]	; (38104 <__swsetup_r+0xe4>)
   38062:	429c      	cmp	r4, r3
   38064:	d101      	bne.n	3806a <__swsetup_r+0x4a>
   38066:	68ac      	ldr	r4, [r5, #8]
   38068:	e7eb      	b.n	38042 <__swsetup_r+0x22>
   3806a:	4b27      	ldr	r3, [pc, #156]	; (38108 <__swsetup_r+0xe8>)
   3806c:	429c      	cmp	r4, r3
   3806e:	d1e8      	bne.n	38042 <__swsetup_r+0x22>
   38070:	68ec      	ldr	r4, [r5, #12]
   38072:	e7e6      	b.n	38042 <__swsetup_r+0x22>
   38074:	075b      	lsls	r3, r3, #29
   38076:	d513      	bpl.n	380a0 <__swsetup_r+0x80>
   38078:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3807a:	2900      	cmp	r1, #0
   3807c:	d008      	beq.n	38090 <__swsetup_r+0x70>
   3807e:	0023      	movs	r3, r4
   38080:	3344      	adds	r3, #68	; 0x44
   38082:	4299      	cmp	r1, r3
   38084:	d002      	beq.n	3808c <__swsetup_r+0x6c>
   38086:	0030      	movs	r0, r6
   38088:	f7ff fc78 	bl	3797c <_free_r>
   3808c:	2300      	movs	r3, #0
   3808e:	6363      	str	r3, [r4, #52]	; 0x34
   38090:	2224      	movs	r2, #36	; 0x24
   38092:	89a3      	ldrh	r3, [r4, #12]
   38094:	4393      	bics	r3, r2
   38096:	81a3      	strh	r3, [r4, #12]
   38098:	2300      	movs	r3, #0
   3809a:	6063      	str	r3, [r4, #4]
   3809c:	6923      	ldr	r3, [r4, #16]
   3809e:	6023      	str	r3, [r4, #0]
   380a0:	2308      	movs	r3, #8
   380a2:	89a2      	ldrh	r2, [r4, #12]
   380a4:	4313      	orrs	r3, r2
   380a6:	81a3      	strh	r3, [r4, #12]
   380a8:	6923      	ldr	r3, [r4, #16]
   380aa:	2b00      	cmp	r3, #0
   380ac:	d10b      	bne.n	380c6 <__swsetup_r+0xa6>
   380ae:	21a0      	movs	r1, #160	; 0xa0
   380b0:	2280      	movs	r2, #128	; 0x80
   380b2:	89a3      	ldrh	r3, [r4, #12]
   380b4:	0089      	lsls	r1, r1, #2
   380b6:	0092      	lsls	r2, r2, #2
   380b8:	400b      	ands	r3, r1
   380ba:	4293      	cmp	r3, r2
   380bc:	d003      	beq.n	380c6 <__swsetup_r+0xa6>
   380be:	0021      	movs	r1, r4
   380c0:	0030      	movs	r0, r6
   380c2:	f000 f9e9 	bl	38498 <__smakebuf_r>
   380c6:	2301      	movs	r3, #1
   380c8:	89a2      	ldrh	r2, [r4, #12]
   380ca:	4013      	ands	r3, r2
   380cc:	d011      	beq.n	380f2 <__swsetup_r+0xd2>
   380ce:	2300      	movs	r3, #0
   380d0:	60a3      	str	r3, [r4, #8]
   380d2:	6963      	ldr	r3, [r4, #20]
   380d4:	425b      	negs	r3, r3
   380d6:	61a3      	str	r3, [r4, #24]
   380d8:	2000      	movs	r0, #0
   380da:	6923      	ldr	r3, [r4, #16]
   380dc:	4283      	cmp	r3, r0
   380de:	d1be      	bne.n	3805e <__swsetup_r+0x3e>
   380e0:	230c      	movs	r3, #12
   380e2:	5ee2      	ldrsh	r2, [r4, r3]
   380e4:	0613      	lsls	r3, r2, #24
   380e6:	d5ba      	bpl.n	3805e <__swsetup_r+0x3e>
   380e8:	2340      	movs	r3, #64	; 0x40
   380ea:	4313      	orrs	r3, r2
   380ec:	81a3      	strh	r3, [r4, #12]
   380ee:	3801      	subs	r0, #1
   380f0:	e7b5      	b.n	3805e <__swsetup_r+0x3e>
   380f2:	0792      	lsls	r2, r2, #30
   380f4:	d400      	bmi.n	380f8 <__swsetup_r+0xd8>
   380f6:	6963      	ldr	r3, [r4, #20]
   380f8:	60a3      	str	r3, [r4, #8]
   380fa:	e7ed      	b.n	380d8 <__swsetup_r+0xb8>
   380fc:	20000138 	.word	0x20000138
   38100:	0003d4dc 	.word	0x0003d4dc
   38104:	0003d4fc 	.word	0x0003d4fc
   38108:	0003d4bc 	.word	0x0003d4bc

0003810c <__sflush_r>:
   3810c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3810e:	898a      	ldrh	r2, [r1, #12]
   38110:	0005      	movs	r5, r0
   38112:	000c      	movs	r4, r1
   38114:	0713      	lsls	r3, r2, #28
   38116:	d460      	bmi.n	381da <__sflush_r+0xce>
   38118:	684b      	ldr	r3, [r1, #4]
   3811a:	2b00      	cmp	r3, #0
   3811c:	dc04      	bgt.n	38128 <__sflush_r+0x1c>
   3811e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   38120:	2b00      	cmp	r3, #0
   38122:	dc01      	bgt.n	38128 <__sflush_r+0x1c>
   38124:	2000      	movs	r0, #0
   38126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   38128:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3812a:	2f00      	cmp	r7, #0
   3812c:	d0fa      	beq.n	38124 <__sflush_r+0x18>
   3812e:	2300      	movs	r3, #0
   38130:	682e      	ldr	r6, [r5, #0]
   38132:	602b      	str	r3, [r5, #0]
   38134:	2380      	movs	r3, #128	; 0x80
   38136:	015b      	lsls	r3, r3, #5
   38138:	401a      	ands	r2, r3
   3813a:	d034      	beq.n	381a6 <__sflush_r+0x9a>
   3813c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3813e:	89a3      	ldrh	r3, [r4, #12]
   38140:	075b      	lsls	r3, r3, #29
   38142:	d506      	bpl.n	38152 <__sflush_r+0x46>
   38144:	6863      	ldr	r3, [r4, #4]
   38146:	1ac0      	subs	r0, r0, r3
   38148:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3814a:	2b00      	cmp	r3, #0
   3814c:	d001      	beq.n	38152 <__sflush_r+0x46>
   3814e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   38150:	1ac0      	subs	r0, r0, r3
   38152:	0002      	movs	r2, r0
   38154:	6a21      	ldr	r1, [r4, #32]
   38156:	2300      	movs	r3, #0
   38158:	0028      	movs	r0, r5
   3815a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3815c:	47b8      	blx	r7
   3815e:	89a1      	ldrh	r1, [r4, #12]
   38160:	1c43      	adds	r3, r0, #1
   38162:	d106      	bne.n	38172 <__sflush_r+0x66>
   38164:	682b      	ldr	r3, [r5, #0]
   38166:	2b1d      	cmp	r3, #29
   38168:	d831      	bhi.n	381ce <__sflush_r+0xc2>
   3816a:	4a2c      	ldr	r2, [pc, #176]	; (3821c <__sflush_r+0x110>)
   3816c:	40da      	lsrs	r2, r3
   3816e:	07d3      	lsls	r3, r2, #31
   38170:	d52d      	bpl.n	381ce <__sflush_r+0xc2>
   38172:	2300      	movs	r3, #0
   38174:	6063      	str	r3, [r4, #4]
   38176:	6923      	ldr	r3, [r4, #16]
   38178:	6023      	str	r3, [r4, #0]
   3817a:	04cb      	lsls	r3, r1, #19
   3817c:	d505      	bpl.n	3818a <__sflush_r+0x7e>
   3817e:	1c43      	adds	r3, r0, #1
   38180:	d102      	bne.n	38188 <__sflush_r+0x7c>
   38182:	682b      	ldr	r3, [r5, #0]
   38184:	2b00      	cmp	r3, #0
   38186:	d100      	bne.n	3818a <__sflush_r+0x7e>
   38188:	6560      	str	r0, [r4, #84]	; 0x54
   3818a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3818c:	602e      	str	r6, [r5, #0]
   3818e:	2900      	cmp	r1, #0
   38190:	d0c8      	beq.n	38124 <__sflush_r+0x18>
   38192:	0023      	movs	r3, r4
   38194:	3344      	adds	r3, #68	; 0x44
   38196:	4299      	cmp	r1, r3
   38198:	d002      	beq.n	381a0 <__sflush_r+0x94>
   3819a:	0028      	movs	r0, r5
   3819c:	f7ff fbee 	bl	3797c <_free_r>
   381a0:	2000      	movs	r0, #0
   381a2:	6360      	str	r0, [r4, #52]	; 0x34
   381a4:	e7bf      	b.n	38126 <__sflush_r+0x1a>
   381a6:	2301      	movs	r3, #1
   381a8:	6a21      	ldr	r1, [r4, #32]
   381aa:	0028      	movs	r0, r5
   381ac:	47b8      	blx	r7
   381ae:	1c43      	adds	r3, r0, #1
   381b0:	d1c5      	bne.n	3813e <__sflush_r+0x32>
   381b2:	682b      	ldr	r3, [r5, #0]
   381b4:	2b00      	cmp	r3, #0
   381b6:	d0c2      	beq.n	3813e <__sflush_r+0x32>
   381b8:	2b1d      	cmp	r3, #29
   381ba:	d001      	beq.n	381c0 <__sflush_r+0xb4>
   381bc:	2b16      	cmp	r3, #22
   381be:	d101      	bne.n	381c4 <__sflush_r+0xb8>
   381c0:	602e      	str	r6, [r5, #0]
   381c2:	e7af      	b.n	38124 <__sflush_r+0x18>
   381c4:	2340      	movs	r3, #64	; 0x40
   381c6:	89a2      	ldrh	r2, [r4, #12]
   381c8:	4313      	orrs	r3, r2
   381ca:	81a3      	strh	r3, [r4, #12]
   381cc:	e7ab      	b.n	38126 <__sflush_r+0x1a>
   381ce:	2340      	movs	r3, #64	; 0x40
   381d0:	430b      	orrs	r3, r1
   381d2:	2001      	movs	r0, #1
   381d4:	81a3      	strh	r3, [r4, #12]
   381d6:	4240      	negs	r0, r0
   381d8:	e7a5      	b.n	38126 <__sflush_r+0x1a>
   381da:	690f      	ldr	r7, [r1, #16]
   381dc:	2f00      	cmp	r7, #0
   381de:	d0a1      	beq.n	38124 <__sflush_r+0x18>
   381e0:	680b      	ldr	r3, [r1, #0]
   381e2:	600f      	str	r7, [r1, #0]
   381e4:	1bdb      	subs	r3, r3, r7
   381e6:	9301      	str	r3, [sp, #4]
   381e8:	2300      	movs	r3, #0
   381ea:	0792      	lsls	r2, r2, #30
   381ec:	d100      	bne.n	381f0 <__sflush_r+0xe4>
   381ee:	694b      	ldr	r3, [r1, #20]
   381f0:	60a3      	str	r3, [r4, #8]
   381f2:	9b01      	ldr	r3, [sp, #4]
   381f4:	2b00      	cmp	r3, #0
   381f6:	dc00      	bgt.n	381fa <__sflush_r+0xee>
   381f8:	e794      	b.n	38124 <__sflush_r+0x18>
   381fa:	9b01      	ldr	r3, [sp, #4]
   381fc:	003a      	movs	r2, r7
   381fe:	6a21      	ldr	r1, [r4, #32]
   38200:	0028      	movs	r0, r5
   38202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   38204:	47b0      	blx	r6
   38206:	2800      	cmp	r0, #0
   38208:	dc03      	bgt.n	38212 <__sflush_r+0x106>
   3820a:	2340      	movs	r3, #64	; 0x40
   3820c:	89a2      	ldrh	r2, [r4, #12]
   3820e:	4313      	orrs	r3, r2
   38210:	e7df      	b.n	381d2 <__sflush_r+0xc6>
   38212:	9b01      	ldr	r3, [sp, #4]
   38214:	183f      	adds	r7, r7, r0
   38216:	1a1b      	subs	r3, r3, r0
   38218:	9301      	str	r3, [sp, #4]
   3821a:	e7ea      	b.n	381f2 <__sflush_r+0xe6>
   3821c:	20400001 	.word	0x20400001

00038220 <_fflush_r>:
   38220:	690b      	ldr	r3, [r1, #16]
   38222:	b570      	push	{r4, r5, r6, lr}
   38224:	0005      	movs	r5, r0
   38226:	000c      	movs	r4, r1
   38228:	2b00      	cmp	r3, #0
   3822a:	d101      	bne.n	38230 <_fflush_r+0x10>
   3822c:	2000      	movs	r0, #0
   3822e:	bd70      	pop	{r4, r5, r6, pc}
   38230:	2800      	cmp	r0, #0
   38232:	d004      	beq.n	3823e <_fflush_r+0x1e>
   38234:	6983      	ldr	r3, [r0, #24]
   38236:	2b00      	cmp	r3, #0
   38238:	d101      	bne.n	3823e <_fflush_r+0x1e>
   3823a:	f000 f85f 	bl	382fc <__sinit>
   3823e:	4b0b      	ldr	r3, [pc, #44]	; (3826c <_fflush_r+0x4c>)
   38240:	429c      	cmp	r4, r3
   38242:	d109      	bne.n	38258 <_fflush_r+0x38>
   38244:	686c      	ldr	r4, [r5, #4]
   38246:	220c      	movs	r2, #12
   38248:	5ea3      	ldrsh	r3, [r4, r2]
   3824a:	2b00      	cmp	r3, #0
   3824c:	d0ee      	beq.n	3822c <_fflush_r+0xc>
   3824e:	0021      	movs	r1, r4
   38250:	0028      	movs	r0, r5
   38252:	f7ff ff5b 	bl	3810c <__sflush_r>
   38256:	e7ea      	b.n	3822e <_fflush_r+0xe>
   38258:	4b05      	ldr	r3, [pc, #20]	; (38270 <_fflush_r+0x50>)
   3825a:	429c      	cmp	r4, r3
   3825c:	d101      	bne.n	38262 <_fflush_r+0x42>
   3825e:	68ac      	ldr	r4, [r5, #8]
   38260:	e7f1      	b.n	38246 <_fflush_r+0x26>
   38262:	4b04      	ldr	r3, [pc, #16]	; (38274 <_fflush_r+0x54>)
   38264:	429c      	cmp	r4, r3
   38266:	d1ee      	bne.n	38246 <_fflush_r+0x26>
   38268:	68ec      	ldr	r4, [r5, #12]
   3826a:	e7ec      	b.n	38246 <_fflush_r+0x26>
   3826c:	0003d4dc 	.word	0x0003d4dc
   38270:	0003d4fc 	.word	0x0003d4fc
   38274:	0003d4bc 	.word	0x0003d4bc

00038278 <_cleanup_r>:
   38278:	b510      	push	{r4, lr}
   3827a:	4902      	ldr	r1, [pc, #8]	; (38284 <_cleanup_r+0xc>)
   3827c:	f000 f8b2 	bl	383e4 <_fwalk_reent>
   38280:	bd10      	pop	{r4, pc}
   38282:	46c0      	nop			; (mov r8, r8)
   38284:	00038221 	.word	0x00038221

00038288 <std.isra.0>:
   38288:	2300      	movs	r3, #0
   3828a:	b510      	push	{r4, lr}
   3828c:	0004      	movs	r4, r0
   3828e:	6003      	str	r3, [r0, #0]
   38290:	6043      	str	r3, [r0, #4]
   38292:	6083      	str	r3, [r0, #8]
   38294:	8181      	strh	r1, [r0, #12]
   38296:	6643      	str	r3, [r0, #100]	; 0x64
   38298:	81c2      	strh	r2, [r0, #14]
   3829a:	6103      	str	r3, [r0, #16]
   3829c:	6143      	str	r3, [r0, #20]
   3829e:	6183      	str	r3, [r0, #24]
   382a0:	0019      	movs	r1, r3
   382a2:	2208      	movs	r2, #8
   382a4:	305c      	adds	r0, #92	; 0x5c
   382a6:	f7ff fb60 	bl	3796a <memset>
   382aa:	4b05      	ldr	r3, [pc, #20]	; (382c0 <std.isra.0+0x38>)
   382ac:	6224      	str	r4, [r4, #32]
   382ae:	6263      	str	r3, [r4, #36]	; 0x24
   382b0:	4b04      	ldr	r3, [pc, #16]	; (382c4 <std.isra.0+0x3c>)
   382b2:	62a3      	str	r3, [r4, #40]	; 0x28
   382b4:	4b04      	ldr	r3, [pc, #16]	; (382c8 <std.isra.0+0x40>)
   382b6:	62e3      	str	r3, [r4, #44]	; 0x2c
   382b8:	4b04      	ldr	r3, [pc, #16]	; (382cc <std.isra.0+0x44>)
   382ba:	6323      	str	r3, [r4, #48]	; 0x30
   382bc:	bd10      	pop	{r4, pc}
   382be:	46c0      	nop			; (mov r8, r8)
   382c0:	00038b25 	.word	0x00038b25
   382c4:	00038b4d 	.word	0x00038b4d
   382c8:	00038b85 	.word	0x00038b85
   382cc:	00038bb1 	.word	0x00038bb1

000382d0 <__sfmoreglue>:
   382d0:	b570      	push	{r4, r5, r6, lr}
   382d2:	2568      	movs	r5, #104	; 0x68
   382d4:	1e4a      	subs	r2, r1, #1
   382d6:	4355      	muls	r5, r2
   382d8:	000e      	movs	r6, r1
   382da:	0029      	movs	r1, r5
   382dc:	3174      	adds	r1, #116	; 0x74
   382de:	f7ff fb97 	bl	37a10 <_malloc_r>
   382e2:	1e04      	subs	r4, r0, #0
   382e4:	d008      	beq.n	382f8 <__sfmoreglue+0x28>
   382e6:	2100      	movs	r1, #0
   382e8:	002a      	movs	r2, r5
   382ea:	6001      	str	r1, [r0, #0]
   382ec:	6046      	str	r6, [r0, #4]
   382ee:	300c      	adds	r0, #12
   382f0:	60a0      	str	r0, [r4, #8]
   382f2:	3268      	adds	r2, #104	; 0x68
   382f4:	f7ff fb39 	bl	3796a <memset>
   382f8:	0020      	movs	r0, r4
   382fa:	bd70      	pop	{r4, r5, r6, pc}

000382fc <__sinit>:
   382fc:	6983      	ldr	r3, [r0, #24]
   382fe:	b513      	push	{r0, r1, r4, lr}
   38300:	0004      	movs	r4, r0
   38302:	2b00      	cmp	r3, #0
   38304:	d128      	bne.n	38358 <__sinit+0x5c>
   38306:	6483      	str	r3, [r0, #72]	; 0x48
   38308:	64c3      	str	r3, [r0, #76]	; 0x4c
   3830a:	6503      	str	r3, [r0, #80]	; 0x50
   3830c:	4b13      	ldr	r3, [pc, #76]	; (3835c <__sinit+0x60>)
   3830e:	4a14      	ldr	r2, [pc, #80]	; (38360 <__sinit+0x64>)
   38310:	681b      	ldr	r3, [r3, #0]
   38312:	6282      	str	r2, [r0, #40]	; 0x28
   38314:	9301      	str	r3, [sp, #4]
   38316:	4298      	cmp	r0, r3
   38318:	d101      	bne.n	3831e <__sinit+0x22>
   3831a:	2301      	movs	r3, #1
   3831c:	6183      	str	r3, [r0, #24]
   3831e:	0020      	movs	r0, r4
   38320:	f000 f820 	bl	38364 <__sfp>
   38324:	6060      	str	r0, [r4, #4]
   38326:	0020      	movs	r0, r4
   38328:	f000 f81c 	bl	38364 <__sfp>
   3832c:	60a0      	str	r0, [r4, #8]
   3832e:	0020      	movs	r0, r4
   38330:	f000 f818 	bl	38364 <__sfp>
   38334:	2200      	movs	r2, #0
   38336:	60e0      	str	r0, [r4, #12]
   38338:	2104      	movs	r1, #4
   3833a:	6860      	ldr	r0, [r4, #4]
   3833c:	f7ff ffa4 	bl	38288 <std.isra.0>
   38340:	2201      	movs	r2, #1
   38342:	2109      	movs	r1, #9
   38344:	68a0      	ldr	r0, [r4, #8]
   38346:	f7ff ff9f 	bl	38288 <std.isra.0>
   3834a:	2202      	movs	r2, #2
   3834c:	2112      	movs	r1, #18
   3834e:	68e0      	ldr	r0, [r4, #12]
   38350:	f7ff ff9a 	bl	38288 <std.isra.0>
   38354:	2301      	movs	r3, #1
   38356:	61a3      	str	r3, [r4, #24]
   38358:	bd13      	pop	{r0, r1, r4, pc}
   3835a:	46c0      	nop			; (mov r8, r8)
   3835c:	0003d4b8 	.word	0x0003d4b8
   38360:	00038279 	.word	0x00038279

00038364 <__sfp>:
   38364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38366:	4b1e      	ldr	r3, [pc, #120]	; (383e0 <__sfp+0x7c>)
   38368:	0007      	movs	r7, r0
   3836a:	681e      	ldr	r6, [r3, #0]
   3836c:	69b3      	ldr	r3, [r6, #24]
   3836e:	2b00      	cmp	r3, #0
   38370:	d102      	bne.n	38378 <__sfp+0x14>
   38372:	0030      	movs	r0, r6
   38374:	f7ff ffc2 	bl	382fc <__sinit>
   38378:	3648      	adds	r6, #72	; 0x48
   3837a:	68b4      	ldr	r4, [r6, #8]
   3837c:	6873      	ldr	r3, [r6, #4]
   3837e:	3b01      	subs	r3, #1
   38380:	d504      	bpl.n	3838c <__sfp+0x28>
   38382:	6833      	ldr	r3, [r6, #0]
   38384:	2b00      	cmp	r3, #0
   38386:	d007      	beq.n	38398 <__sfp+0x34>
   38388:	6836      	ldr	r6, [r6, #0]
   3838a:	e7f6      	b.n	3837a <__sfp+0x16>
   3838c:	220c      	movs	r2, #12
   3838e:	5ea5      	ldrsh	r5, [r4, r2]
   38390:	2d00      	cmp	r5, #0
   38392:	d00d      	beq.n	383b0 <__sfp+0x4c>
   38394:	3468      	adds	r4, #104	; 0x68
   38396:	e7f2      	b.n	3837e <__sfp+0x1a>
   38398:	2104      	movs	r1, #4
   3839a:	0038      	movs	r0, r7
   3839c:	f7ff ff98 	bl	382d0 <__sfmoreglue>
   383a0:	6030      	str	r0, [r6, #0]
   383a2:	2800      	cmp	r0, #0
   383a4:	d1f0      	bne.n	38388 <__sfp+0x24>
   383a6:	230c      	movs	r3, #12
   383a8:	0004      	movs	r4, r0
   383aa:	603b      	str	r3, [r7, #0]
   383ac:	0020      	movs	r0, r4
   383ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   383b0:	2301      	movs	r3, #1
   383b2:	0020      	movs	r0, r4
   383b4:	425b      	negs	r3, r3
   383b6:	81e3      	strh	r3, [r4, #14]
   383b8:	3302      	adds	r3, #2
   383ba:	81a3      	strh	r3, [r4, #12]
   383bc:	6665      	str	r5, [r4, #100]	; 0x64
   383be:	6025      	str	r5, [r4, #0]
   383c0:	60a5      	str	r5, [r4, #8]
   383c2:	6065      	str	r5, [r4, #4]
   383c4:	6125      	str	r5, [r4, #16]
   383c6:	6165      	str	r5, [r4, #20]
   383c8:	61a5      	str	r5, [r4, #24]
   383ca:	2208      	movs	r2, #8
   383cc:	0029      	movs	r1, r5
   383ce:	305c      	adds	r0, #92	; 0x5c
   383d0:	f7ff facb 	bl	3796a <memset>
   383d4:	6365      	str	r5, [r4, #52]	; 0x34
   383d6:	63a5      	str	r5, [r4, #56]	; 0x38
   383d8:	64a5      	str	r5, [r4, #72]	; 0x48
   383da:	64e5      	str	r5, [r4, #76]	; 0x4c
   383dc:	e7e6      	b.n	383ac <__sfp+0x48>
   383de:	46c0      	nop			; (mov r8, r8)
   383e0:	0003d4b8 	.word	0x0003d4b8

000383e4 <_fwalk_reent>:
   383e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   383e6:	0004      	movs	r4, r0
   383e8:	0007      	movs	r7, r0
   383ea:	2600      	movs	r6, #0
   383ec:	9101      	str	r1, [sp, #4]
   383ee:	3448      	adds	r4, #72	; 0x48
   383f0:	2c00      	cmp	r4, #0
   383f2:	d101      	bne.n	383f8 <_fwalk_reent+0x14>
   383f4:	0030      	movs	r0, r6
   383f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   383f8:	6863      	ldr	r3, [r4, #4]
   383fa:	68a5      	ldr	r5, [r4, #8]
   383fc:	9300      	str	r3, [sp, #0]
   383fe:	9b00      	ldr	r3, [sp, #0]
   38400:	3b01      	subs	r3, #1
   38402:	9300      	str	r3, [sp, #0]
   38404:	d501      	bpl.n	3840a <_fwalk_reent+0x26>
   38406:	6824      	ldr	r4, [r4, #0]
   38408:	e7f2      	b.n	383f0 <_fwalk_reent+0xc>
   3840a:	89ab      	ldrh	r3, [r5, #12]
   3840c:	2b01      	cmp	r3, #1
   3840e:	d908      	bls.n	38422 <_fwalk_reent+0x3e>
   38410:	220e      	movs	r2, #14
   38412:	5eab      	ldrsh	r3, [r5, r2]
   38414:	3301      	adds	r3, #1
   38416:	d004      	beq.n	38422 <_fwalk_reent+0x3e>
   38418:	0029      	movs	r1, r5
   3841a:	0038      	movs	r0, r7
   3841c:	9b01      	ldr	r3, [sp, #4]
   3841e:	4798      	blx	r3
   38420:	4306      	orrs	r6, r0
   38422:	3568      	adds	r5, #104	; 0x68
   38424:	e7eb      	b.n	383fe <_fwalk_reent+0x1a>

00038426 <__locale_ctype_ptr_l>:
   38426:	30ec      	adds	r0, #236	; 0xec
   38428:	6800      	ldr	r0, [r0, #0]
   3842a:	4770      	bx	lr

0003842c <__locale_ctype_ptr>:
   3842c:	4b04      	ldr	r3, [pc, #16]	; (38440 <__locale_ctype_ptr+0x14>)
   3842e:	681b      	ldr	r3, [r3, #0]
   38430:	6a1b      	ldr	r3, [r3, #32]
   38432:	2b00      	cmp	r3, #0
   38434:	d100      	bne.n	38438 <__locale_ctype_ptr+0xc>
   38436:	4b03      	ldr	r3, [pc, #12]	; (38444 <__locale_ctype_ptr+0x18>)
   38438:	33ec      	adds	r3, #236	; 0xec
   3843a:	6818      	ldr	r0, [r3, #0]
   3843c:	4770      	bx	lr
   3843e:	46c0      	nop			; (mov r8, r8)
   38440:	20000138 	.word	0x20000138
   38444:	2000019c 	.word	0x2000019c

00038448 <__swhatbuf_r>:
   38448:	b570      	push	{r4, r5, r6, lr}
   3844a:	000e      	movs	r6, r1
   3844c:	001d      	movs	r5, r3
   3844e:	230e      	movs	r3, #14
   38450:	5ec9      	ldrsh	r1, [r1, r3]
   38452:	b090      	sub	sp, #64	; 0x40
   38454:	0014      	movs	r4, r2
   38456:	2900      	cmp	r1, #0
   38458:	da07      	bge.n	3846a <__swhatbuf_r+0x22>
   3845a:	2300      	movs	r3, #0
   3845c:	602b      	str	r3, [r5, #0]
   3845e:	89b3      	ldrh	r3, [r6, #12]
   38460:	061b      	lsls	r3, r3, #24
   38462:	d411      	bmi.n	38488 <__swhatbuf_r+0x40>
   38464:	2380      	movs	r3, #128	; 0x80
   38466:	00db      	lsls	r3, r3, #3
   38468:	e00f      	b.n	3848a <__swhatbuf_r+0x42>
   3846a:	aa01      	add	r2, sp, #4
   3846c:	f000 fbe6 	bl	38c3c <_fstat_r>
   38470:	2800      	cmp	r0, #0
   38472:	dbf2      	blt.n	3845a <__swhatbuf_r+0x12>
   38474:	22f0      	movs	r2, #240	; 0xf0
   38476:	9b02      	ldr	r3, [sp, #8]
   38478:	0212      	lsls	r2, r2, #8
   3847a:	4013      	ands	r3, r2
   3847c:	4a05      	ldr	r2, [pc, #20]	; (38494 <__swhatbuf_r+0x4c>)
   3847e:	189b      	adds	r3, r3, r2
   38480:	425a      	negs	r2, r3
   38482:	4153      	adcs	r3, r2
   38484:	602b      	str	r3, [r5, #0]
   38486:	e7ed      	b.n	38464 <__swhatbuf_r+0x1c>
   38488:	2340      	movs	r3, #64	; 0x40
   3848a:	2000      	movs	r0, #0
   3848c:	6023      	str	r3, [r4, #0]
   3848e:	b010      	add	sp, #64	; 0x40
   38490:	bd70      	pop	{r4, r5, r6, pc}
   38492:	46c0      	nop			; (mov r8, r8)
   38494:	ffffe000 	.word	0xffffe000

00038498 <__smakebuf_r>:
   38498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3849a:	2602      	movs	r6, #2
   3849c:	898b      	ldrh	r3, [r1, #12]
   3849e:	0005      	movs	r5, r0
   384a0:	000c      	movs	r4, r1
   384a2:	4233      	tst	r3, r6
   384a4:	d006      	beq.n	384b4 <__smakebuf_r+0x1c>
   384a6:	0023      	movs	r3, r4
   384a8:	3347      	adds	r3, #71	; 0x47
   384aa:	6023      	str	r3, [r4, #0]
   384ac:	6123      	str	r3, [r4, #16]
   384ae:	2301      	movs	r3, #1
   384b0:	6163      	str	r3, [r4, #20]
   384b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   384b4:	ab01      	add	r3, sp, #4
   384b6:	466a      	mov	r2, sp
   384b8:	f7ff ffc6 	bl	38448 <__swhatbuf_r>
   384bc:	9900      	ldr	r1, [sp, #0]
   384be:	0007      	movs	r7, r0
   384c0:	0028      	movs	r0, r5
   384c2:	f7ff faa5 	bl	37a10 <_malloc_r>
   384c6:	2800      	cmp	r0, #0
   384c8:	d108      	bne.n	384dc <__smakebuf_r+0x44>
   384ca:	220c      	movs	r2, #12
   384cc:	5ea3      	ldrsh	r3, [r4, r2]
   384ce:	059a      	lsls	r2, r3, #22
   384d0:	d4ef      	bmi.n	384b2 <__smakebuf_r+0x1a>
   384d2:	2203      	movs	r2, #3
   384d4:	4393      	bics	r3, r2
   384d6:	431e      	orrs	r6, r3
   384d8:	81a6      	strh	r6, [r4, #12]
   384da:	e7e4      	b.n	384a6 <__smakebuf_r+0xe>
   384dc:	4b0f      	ldr	r3, [pc, #60]	; (3851c <__smakebuf_r+0x84>)
   384de:	62ab      	str	r3, [r5, #40]	; 0x28
   384e0:	2380      	movs	r3, #128	; 0x80
   384e2:	89a2      	ldrh	r2, [r4, #12]
   384e4:	6020      	str	r0, [r4, #0]
   384e6:	4313      	orrs	r3, r2
   384e8:	81a3      	strh	r3, [r4, #12]
   384ea:	9b00      	ldr	r3, [sp, #0]
   384ec:	6120      	str	r0, [r4, #16]
   384ee:	6163      	str	r3, [r4, #20]
   384f0:	9b01      	ldr	r3, [sp, #4]
   384f2:	2b00      	cmp	r3, #0
   384f4:	d00d      	beq.n	38512 <__smakebuf_r+0x7a>
   384f6:	230e      	movs	r3, #14
   384f8:	5ee1      	ldrsh	r1, [r4, r3]
   384fa:	0028      	movs	r0, r5
   384fc:	f000 fbb0 	bl	38c60 <_isatty_r>
   38500:	2800      	cmp	r0, #0
   38502:	d006      	beq.n	38512 <__smakebuf_r+0x7a>
   38504:	2203      	movs	r2, #3
   38506:	89a3      	ldrh	r3, [r4, #12]
   38508:	4393      	bics	r3, r2
   3850a:	001a      	movs	r2, r3
   3850c:	2301      	movs	r3, #1
   3850e:	4313      	orrs	r3, r2
   38510:	81a3      	strh	r3, [r4, #12]
   38512:	89a0      	ldrh	r0, [r4, #12]
   38514:	4338      	orrs	r0, r7
   38516:	81a0      	strh	r0, [r4, #12]
   38518:	e7cb      	b.n	384b2 <__smakebuf_r+0x1a>
   3851a:	46c0      	nop			; (mov r8, r8)
   3851c:	00038279 	.word	0x00038279

00038520 <__ascii_mbtowc>:
   38520:	b082      	sub	sp, #8
   38522:	2900      	cmp	r1, #0
   38524:	d100      	bne.n	38528 <__ascii_mbtowc+0x8>
   38526:	a901      	add	r1, sp, #4
   38528:	1e10      	subs	r0, r2, #0
   3852a:	d006      	beq.n	3853a <__ascii_mbtowc+0x1a>
   3852c:	2b00      	cmp	r3, #0
   3852e:	d006      	beq.n	3853e <__ascii_mbtowc+0x1e>
   38530:	7813      	ldrb	r3, [r2, #0]
   38532:	600b      	str	r3, [r1, #0]
   38534:	7810      	ldrb	r0, [r2, #0]
   38536:	1e43      	subs	r3, r0, #1
   38538:	4198      	sbcs	r0, r3
   3853a:	b002      	add	sp, #8
   3853c:	4770      	bx	lr
   3853e:	2002      	movs	r0, #2
   38540:	4240      	negs	r0, r0
   38542:	e7fa      	b.n	3853a <__ascii_mbtowc+0x1a>

00038544 <__malloc_lock>:
   38544:	4770      	bx	lr

00038546 <__malloc_unlock>:
   38546:	4770      	bx	lr

00038548 <__ssputs_r>:
   38548:	b5f0      	push	{r4, r5, r6, r7, lr}
   3854a:	688e      	ldr	r6, [r1, #8]
   3854c:	b085      	sub	sp, #20
   3854e:	0007      	movs	r7, r0
   38550:	000c      	movs	r4, r1
   38552:	9203      	str	r2, [sp, #12]
   38554:	9301      	str	r3, [sp, #4]
   38556:	429e      	cmp	r6, r3
   38558:	d839      	bhi.n	385ce <__ssputs_r+0x86>
   3855a:	2390      	movs	r3, #144	; 0x90
   3855c:	898a      	ldrh	r2, [r1, #12]
   3855e:	00db      	lsls	r3, r3, #3
   38560:	421a      	tst	r2, r3
   38562:	d034      	beq.n	385ce <__ssputs_r+0x86>
   38564:	2503      	movs	r5, #3
   38566:	6909      	ldr	r1, [r1, #16]
   38568:	6823      	ldr	r3, [r4, #0]
   3856a:	1a5b      	subs	r3, r3, r1
   3856c:	9302      	str	r3, [sp, #8]
   3856e:	6963      	ldr	r3, [r4, #20]
   38570:	9802      	ldr	r0, [sp, #8]
   38572:	435d      	muls	r5, r3
   38574:	0feb      	lsrs	r3, r5, #31
   38576:	195d      	adds	r5, r3, r5
   38578:	9b01      	ldr	r3, [sp, #4]
   3857a:	106d      	asrs	r5, r5, #1
   3857c:	3301      	adds	r3, #1
   3857e:	181b      	adds	r3, r3, r0
   38580:	42ab      	cmp	r3, r5
   38582:	d900      	bls.n	38586 <__ssputs_r+0x3e>
   38584:	001d      	movs	r5, r3
   38586:	0553      	lsls	r3, r2, #21
   38588:	d532      	bpl.n	385f0 <__ssputs_r+0xa8>
   3858a:	0029      	movs	r1, r5
   3858c:	0038      	movs	r0, r7
   3858e:	f7ff fa3f 	bl	37a10 <_malloc_r>
   38592:	1e06      	subs	r6, r0, #0
   38594:	d109      	bne.n	385aa <__ssputs_r+0x62>
   38596:	230c      	movs	r3, #12
   38598:	603b      	str	r3, [r7, #0]
   3859a:	2340      	movs	r3, #64	; 0x40
   3859c:	2001      	movs	r0, #1
   3859e:	89a2      	ldrh	r2, [r4, #12]
   385a0:	4240      	negs	r0, r0
   385a2:	4313      	orrs	r3, r2
   385a4:	81a3      	strh	r3, [r4, #12]
   385a6:	b005      	add	sp, #20
   385a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   385aa:	9a02      	ldr	r2, [sp, #8]
   385ac:	6921      	ldr	r1, [r4, #16]
   385ae:	f7ff f9c1 	bl	37934 <memcpy>
   385b2:	89a3      	ldrh	r3, [r4, #12]
   385b4:	4a14      	ldr	r2, [pc, #80]	; (38608 <__ssputs_r+0xc0>)
   385b6:	401a      	ands	r2, r3
   385b8:	2380      	movs	r3, #128	; 0x80
   385ba:	4313      	orrs	r3, r2
   385bc:	81a3      	strh	r3, [r4, #12]
   385be:	9b02      	ldr	r3, [sp, #8]
   385c0:	6126      	str	r6, [r4, #16]
   385c2:	18f6      	adds	r6, r6, r3
   385c4:	6026      	str	r6, [r4, #0]
   385c6:	6165      	str	r5, [r4, #20]
   385c8:	9e01      	ldr	r6, [sp, #4]
   385ca:	1aed      	subs	r5, r5, r3
   385cc:	60a5      	str	r5, [r4, #8]
   385ce:	9b01      	ldr	r3, [sp, #4]
   385d0:	42b3      	cmp	r3, r6
   385d2:	d200      	bcs.n	385d6 <__ssputs_r+0x8e>
   385d4:	001e      	movs	r6, r3
   385d6:	0032      	movs	r2, r6
   385d8:	9903      	ldr	r1, [sp, #12]
   385da:	6820      	ldr	r0, [r4, #0]
   385dc:	f7ff f9b3 	bl	37946 <memmove>
   385e0:	68a3      	ldr	r3, [r4, #8]
   385e2:	2000      	movs	r0, #0
   385e4:	1b9b      	subs	r3, r3, r6
   385e6:	60a3      	str	r3, [r4, #8]
   385e8:	6823      	ldr	r3, [r4, #0]
   385ea:	199e      	adds	r6, r3, r6
   385ec:	6026      	str	r6, [r4, #0]
   385ee:	e7da      	b.n	385a6 <__ssputs_r+0x5e>
   385f0:	002a      	movs	r2, r5
   385f2:	0038      	movs	r0, r7
   385f4:	f000 fb65 	bl	38cc2 <_realloc_r>
   385f8:	1e06      	subs	r6, r0, #0
   385fa:	d1e0      	bne.n	385be <__ssputs_r+0x76>
   385fc:	6921      	ldr	r1, [r4, #16]
   385fe:	0038      	movs	r0, r7
   38600:	f7ff f9bc 	bl	3797c <_free_r>
   38604:	e7c7      	b.n	38596 <__ssputs_r+0x4e>
   38606:	46c0      	nop			; (mov r8, r8)
   38608:	fffffb7f 	.word	0xfffffb7f

0003860c <_svfiprintf_r>:
   3860c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3860e:	b09f      	sub	sp, #124	; 0x7c
   38610:	9002      	str	r0, [sp, #8]
   38612:	9305      	str	r3, [sp, #20]
   38614:	898b      	ldrh	r3, [r1, #12]
   38616:	000f      	movs	r7, r1
   38618:	0016      	movs	r6, r2
   3861a:	061b      	lsls	r3, r3, #24
   3861c:	d511      	bpl.n	38642 <_svfiprintf_r+0x36>
   3861e:	690b      	ldr	r3, [r1, #16]
   38620:	2b00      	cmp	r3, #0
   38622:	d10e      	bne.n	38642 <_svfiprintf_r+0x36>
   38624:	2140      	movs	r1, #64	; 0x40
   38626:	f7ff f9f3 	bl	37a10 <_malloc_r>
   3862a:	6038      	str	r0, [r7, #0]
   3862c:	6138      	str	r0, [r7, #16]
   3862e:	2800      	cmp	r0, #0
   38630:	d105      	bne.n	3863e <_svfiprintf_r+0x32>
   38632:	230c      	movs	r3, #12
   38634:	9a02      	ldr	r2, [sp, #8]
   38636:	3801      	subs	r0, #1
   38638:	6013      	str	r3, [r2, #0]
   3863a:	b01f      	add	sp, #124	; 0x7c
   3863c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3863e:	2340      	movs	r3, #64	; 0x40
   38640:	617b      	str	r3, [r7, #20]
   38642:	2300      	movs	r3, #0
   38644:	ad06      	add	r5, sp, #24
   38646:	616b      	str	r3, [r5, #20]
   38648:	3320      	adds	r3, #32
   3864a:	766b      	strb	r3, [r5, #25]
   3864c:	3310      	adds	r3, #16
   3864e:	76ab      	strb	r3, [r5, #26]
   38650:	0034      	movs	r4, r6
   38652:	7823      	ldrb	r3, [r4, #0]
   38654:	2b00      	cmp	r3, #0
   38656:	d147      	bne.n	386e8 <_svfiprintf_r+0xdc>
   38658:	1ba3      	subs	r3, r4, r6
   3865a:	9304      	str	r3, [sp, #16]
   3865c:	d00d      	beq.n	3867a <_svfiprintf_r+0x6e>
   3865e:	1ba3      	subs	r3, r4, r6
   38660:	0032      	movs	r2, r6
   38662:	0039      	movs	r1, r7
   38664:	9802      	ldr	r0, [sp, #8]
   38666:	f7ff ff6f 	bl	38548 <__ssputs_r>
   3866a:	1c43      	adds	r3, r0, #1
   3866c:	d100      	bne.n	38670 <_svfiprintf_r+0x64>
   3866e:	e0b5      	b.n	387dc <_svfiprintf_r+0x1d0>
   38670:	696a      	ldr	r2, [r5, #20]
   38672:	9b04      	ldr	r3, [sp, #16]
   38674:	4694      	mov	ip, r2
   38676:	4463      	add	r3, ip
   38678:	616b      	str	r3, [r5, #20]
   3867a:	7823      	ldrb	r3, [r4, #0]
   3867c:	2b00      	cmp	r3, #0
   3867e:	d100      	bne.n	38682 <_svfiprintf_r+0x76>
   38680:	e0ac      	b.n	387dc <_svfiprintf_r+0x1d0>
   38682:	2201      	movs	r2, #1
   38684:	2300      	movs	r3, #0
   38686:	4252      	negs	r2, r2
   38688:	606a      	str	r2, [r5, #4]
   3868a:	a902      	add	r1, sp, #8
   3868c:	3254      	adds	r2, #84	; 0x54
   3868e:	1852      	adds	r2, r2, r1
   38690:	3401      	adds	r4, #1
   38692:	602b      	str	r3, [r5, #0]
   38694:	60eb      	str	r3, [r5, #12]
   38696:	60ab      	str	r3, [r5, #8]
   38698:	7013      	strb	r3, [r2, #0]
   3869a:	65ab      	str	r3, [r5, #88]	; 0x58
   3869c:	4e58      	ldr	r6, [pc, #352]	; (38800 <_svfiprintf_r+0x1f4>)
   3869e:	2205      	movs	r2, #5
   386a0:	7821      	ldrb	r1, [r4, #0]
   386a2:	0030      	movs	r0, r6
   386a4:	f000 fb02 	bl	38cac <memchr>
   386a8:	1c62      	adds	r2, r4, #1
   386aa:	2800      	cmp	r0, #0
   386ac:	d120      	bne.n	386f0 <_svfiprintf_r+0xe4>
   386ae:	6829      	ldr	r1, [r5, #0]
   386b0:	06cb      	lsls	r3, r1, #27
   386b2:	d504      	bpl.n	386be <_svfiprintf_r+0xb2>
   386b4:	2353      	movs	r3, #83	; 0x53
   386b6:	ae02      	add	r6, sp, #8
   386b8:	3020      	adds	r0, #32
   386ba:	199b      	adds	r3, r3, r6
   386bc:	7018      	strb	r0, [r3, #0]
   386be:	070b      	lsls	r3, r1, #28
   386c0:	d504      	bpl.n	386cc <_svfiprintf_r+0xc0>
   386c2:	2353      	movs	r3, #83	; 0x53
   386c4:	202b      	movs	r0, #43	; 0x2b
   386c6:	ae02      	add	r6, sp, #8
   386c8:	199b      	adds	r3, r3, r6
   386ca:	7018      	strb	r0, [r3, #0]
   386cc:	7823      	ldrb	r3, [r4, #0]
   386ce:	2b2a      	cmp	r3, #42	; 0x2a
   386d0:	d016      	beq.n	38700 <_svfiprintf_r+0xf4>
   386d2:	2000      	movs	r0, #0
   386d4:	210a      	movs	r1, #10
   386d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   386d8:	7822      	ldrb	r2, [r4, #0]
   386da:	3a30      	subs	r2, #48	; 0x30
   386dc:	2a09      	cmp	r2, #9
   386de:	d955      	bls.n	3878c <_svfiprintf_r+0x180>
   386e0:	2800      	cmp	r0, #0
   386e2:	d015      	beq.n	38710 <_svfiprintf_r+0x104>
   386e4:	9309      	str	r3, [sp, #36]	; 0x24
   386e6:	e013      	b.n	38710 <_svfiprintf_r+0x104>
   386e8:	2b25      	cmp	r3, #37	; 0x25
   386ea:	d0b5      	beq.n	38658 <_svfiprintf_r+0x4c>
   386ec:	3401      	adds	r4, #1
   386ee:	e7b0      	b.n	38652 <_svfiprintf_r+0x46>
   386f0:	2301      	movs	r3, #1
   386f2:	1b80      	subs	r0, r0, r6
   386f4:	4083      	lsls	r3, r0
   386f6:	6829      	ldr	r1, [r5, #0]
   386f8:	0014      	movs	r4, r2
   386fa:	430b      	orrs	r3, r1
   386fc:	602b      	str	r3, [r5, #0]
   386fe:	e7cd      	b.n	3869c <_svfiprintf_r+0x90>
   38700:	9b05      	ldr	r3, [sp, #20]
   38702:	1d18      	adds	r0, r3, #4
   38704:	681b      	ldr	r3, [r3, #0]
   38706:	9005      	str	r0, [sp, #20]
   38708:	2b00      	cmp	r3, #0
   3870a:	db39      	blt.n	38780 <_svfiprintf_r+0x174>
   3870c:	9309      	str	r3, [sp, #36]	; 0x24
   3870e:	0014      	movs	r4, r2
   38710:	7823      	ldrb	r3, [r4, #0]
   38712:	2b2e      	cmp	r3, #46	; 0x2e
   38714:	d10b      	bne.n	3872e <_svfiprintf_r+0x122>
   38716:	7863      	ldrb	r3, [r4, #1]
   38718:	1c62      	adds	r2, r4, #1
   3871a:	2b2a      	cmp	r3, #42	; 0x2a
   3871c:	d13e      	bne.n	3879c <_svfiprintf_r+0x190>
   3871e:	9b05      	ldr	r3, [sp, #20]
   38720:	3402      	adds	r4, #2
   38722:	1d1a      	adds	r2, r3, #4
   38724:	681b      	ldr	r3, [r3, #0]
   38726:	9205      	str	r2, [sp, #20]
   38728:	2b00      	cmp	r3, #0
   3872a:	db34      	blt.n	38796 <_svfiprintf_r+0x18a>
   3872c:	9307      	str	r3, [sp, #28]
   3872e:	4e35      	ldr	r6, [pc, #212]	; (38804 <_svfiprintf_r+0x1f8>)
   38730:	7821      	ldrb	r1, [r4, #0]
   38732:	2203      	movs	r2, #3
   38734:	0030      	movs	r0, r6
   38736:	f000 fab9 	bl	38cac <memchr>
   3873a:	2800      	cmp	r0, #0
   3873c:	d006      	beq.n	3874c <_svfiprintf_r+0x140>
   3873e:	2340      	movs	r3, #64	; 0x40
   38740:	1b80      	subs	r0, r0, r6
   38742:	4083      	lsls	r3, r0
   38744:	682a      	ldr	r2, [r5, #0]
   38746:	3401      	adds	r4, #1
   38748:	4313      	orrs	r3, r2
   3874a:	602b      	str	r3, [r5, #0]
   3874c:	7821      	ldrb	r1, [r4, #0]
   3874e:	2206      	movs	r2, #6
   38750:	482d      	ldr	r0, [pc, #180]	; (38808 <_svfiprintf_r+0x1fc>)
   38752:	1c66      	adds	r6, r4, #1
   38754:	7629      	strb	r1, [r5, #24]
   38756:	f000 faa9 	bl	38cac <memchr>
   3875a:	2800      	cmp	r0, #0
   3875c:	d046      	beq.n	387ec <_svfiprintf_r+0x1e0>
   3875e:	4b2b      	ldr	r3, [pc, #172]	; (3880c <_svfiprintf_r+0x200>)
   38760:	2b00      	cmp	r3, #0
   38762:	d12f      	bne.n	387c4 <_svfiprintf_r+0x1b8>
   38764:	6829      	ldr	r1, [r5, #0]
   38766:	9b05      	ldr	r3, [sp, #20]
   38768:	2207      	movs	r2, #7
   3876a:	05c9      	lsls	r1, r1, #23
   3876c:	d528      	bpl.n	387c0 <_svfiprintf_r+0x1b4>
   3876e:	189b      	adds	r3, r3, r2
   38770:	4393      	bics	r3, r2
   38772:	3308      	adds	r3, #8
   38774:	9305      	str	r3, [sp, #20]
   38776:	696b      	ldr	r3, [r5, #20]
   38778:	9a03      	ldr	r2, [sp, #12]
   3877a:	189b      	adds	r3, r3, r2
   3877c:	616b      	str	r3, [r5, #20]
   3877e:	e767      	b.n	38650 <_svfiprintf_r+0x44>
   38780:	425b      	negs	r3, r3
   38782:	60eb      	str	r3, [r5, #12]
   38784:	2302      	movs	r3, #2
   38786:	430b      	orrs	r3, r1
   38788:	602b      	str	r3, [r5, #0]
   3878a:	e7c0      	b.n	3870e <_svfiprintf_r+0x102>
   3878c:	434b      	muls	r3, r1
   3878e:	3401      	adds	r4, #1
   38790:	189b      	adds	r3, r3, r2
   38792:	2001      	movs	r0, #1
   38794:	e7a0      	b.n	386d8 <_svfiprintf_r+0xcc>
   38796:	2301      	movs	r3, #1
   38798:	425b      	negs	r3, r3
   3879a:	e7c7      	b.n	3872c <_svfiprintf_r+0x120>
   3879c:	2300      	movs	r3, #0
   3879e:	0014      	movs	r4, r2
   387a0:	200a      	movs	r0, #10
   387a2:	001a      	movs	r2, r3
   387a4:	606b      	str	r3, [r5, #4]
   387a6:	7821      	ldrb	r1, [r4, #0]
   387a8:	3930      	subs	r1, #48	; 0x30
   387aa:	2909      	cmp	r1, #9
   387ac:	d903      	bls.n	387b6 <_svfiprintf_r+0x1aa>
   387ae:	2b00      	cmp	r3, #0
   387b0:	d0bd      	beq.n	3872e <_svfiprintf_r+0x122>
   387b2:	9207      	str	r2, [sp, #28]
   387b4:	e7bb      	b.n	3872e <_svfiprintf_r+0x122>
   387b6:	4342      	muls	r2, r0
   387b8:	3401      	adds	r4, #1
   387ba:	1852      	adds	r2, r2, r1
   387bc:	2301      	movs	r3, #1
   387be:	e7f2      	b.n	387a6 <_svfiprintf_r+0x19a>
   387c0:	3307      	adds	r3, #7
   387c2:	e7d5      	b.n	38770 <_svfiprintf_r+0x164>
   387c4:	ab05      	add	r3, sp, #20
   387c6:	9300      	str	r3, [sp, #0]
   387c8:	003a      	movs	r2, r7
   387ca:	4b11      	ldr	r3, [pc, #68]	; (38810 <_svfiprintf_r+0x204>)
   387cc:	0029      	movs	r1, r5
   387ce:	9802      	ldr	r0, [sp, #8]
   387d0:	e000      	b.n	387d4 <_svfiprintf_r+0x1c8>
   387d2:	bf00      	nop
   387d4:	9003      	str	r0, [sp, #12]
   387d6:	9b03      	ldr	r3, [sp, #12]
   387d8:	3301      	adds	r3, #1
   387da:	d1cc      	bne.n	38776 <_svfiprintf_r+0x16a>
   387dc:	89bb      	ldrh	r3, [r7, #12]
   387de:	980b      	ldr	r0, [sp, #44]	; 0x2c
   387e0:	065b      	lsls	r3, r3, #25
   387e2:	d400      	bmi.n	387e6 <_svfiprintf_r+0x1da>
   387e4:	e729      	b.n	3863a <_svfiprintf_r+0x2e>
   387e6:	2001      	movs	r0, #1
   387e8:	4240      	negs	r0, r0
   387ea:	e726      	b.n	3863a <_svfiprintf_r+0x2e>
   387ec:	ab05      	add	r3, sp, #20
   387ee:	9300      	str	r3, [sp, #0]
   387f0:	003a      	movs	r2, r7
   387f2:	4b07      	ldr	r3, [pc, #28]	; (38810 <_svfiprintf_r+0x204>)
   387f4:	0029      	movs	r1, r5
   387f6:	9802      	ldr	r0, [sp, #8]
   387f8:	f000 f87a 	bl	388f0 <_printf_i>
   387fc:	e7ea      	b.n	387d4 <_svfiprintf_r+0x1c8>
   387fe:	46c0      	nop			; (mov r8, r8)
   38800:	0003d526 	.word	0x0003d526
   38804:	0003d52c 	.word	0x0003d52c
   38808:	0003d530 	.word	0x0003d530
   3880c:	00000000 	.word	0x00000000
   38810:	00038549 	.word	0x00038549

00038814 <_printf_common>:
   38814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38816:	0015      	movs	r5, r2
   38818:	9301      	str	r3, [sp, #4]
   3881a:	688a      	ldr	r2, [r1, #8]
   3881c:	690b      	ldr	r3, [r1, #16]
   3881e:	9000      	str	r0, [sp, #0]
   38820:	000c      	movs	r4, r1
   38822:	4293      	cmp	r3, r2
   38824:	da00      	bge.n	38828 <_printf_common+0x14>
   38826:	0013      	movs	r3, r2
   38828:	0022      	movs	r2, r4
   3882a:	602b      	str	r3, [r5, #0]
   3882c:	3243      	adds	r2, #67	; 0x43
   3882e:	7812      	ldrb	r2, [r2, #0]
   38830:	2a00      	cmp	r2, #0
   38832:	d001      	beq.n	38838 <_printf_common+0x24>
   38834:	3301      	adds	r3, #1
   38836:	602b      	str	r3, [r5, #0]
   38838:	6823      	ldr	r3, [r4, #0]
   3883a:	069b      	lsls	r3, r3, #26
   3883c:	d502      	bpl.n	38844 <_printf_common+0x30>
   3883e:	682b      	ldr	r3, [r5, #0]
   38840:	3302      	adds	r3, #2
   38842:	602b      	str	r3, [r5, #0]
   38844:	2706      	movs	r7, #6
   38846:	6823      	ldr	r3, [r4, #0]
   38848:	401f      	ands	r7, r3
   3884a:	d027      	beq.n	3889c <_printf_common+0x88>
   3884c:	0023      	movs	r3, r4
   3884e:	3343      	adds	r3, #67	; 0x43
   38850:	781b      	ldrb	r3, [r3, #0]
   38852:	1e5a      	subs	r2, r3, #1
   38854:	4193      	sbcs	r3, r2
   38856:	6822      	ldr	r2, [r4, #0]
   38858:	0692      	lsls	r2, r2, #26
   3885a:	d430      	bmi.n	388be <_printf_common+0xaa>
   3885c:	0022      	movs	r2, r4
   3885e:	9901      	ldr	r1, [sp, #4]
   38860:	3243      	adds	r2, #67	; 0x43
   38862:	9800      	ldr	r0, [sp, #0]
   38864:	9e08      	ldr	r6, [sp, #32]
   38866:	47b0      	blx	r6
   38868:	1c43      	adds	r3, r0, #1
   3886a:	d025      	beq.n	388b8 <_printf_common+0xa4>
   3886c:	2306      	movs	r3, #6
   3886e:	6820      	ldr	r0, [r4, #0]
   38870:	682a      	ldr	r2, [r5, #0]
   38872:	68e1      	ldr	r1, [r4, #12]
   38874:	4003      	ands	r3, r0
   38876:	2500      	movs	r5, #0
   38878:	2b04      	cmp	r3, #4
   3887a:	d103      	bne.n	38884 <_printf_common+0x70>
   3887c:	1a8d      	subs	r5, r1, r2
   3887e:	43eb      	mvns	r3, r5
   38880:	17db      	asrs	r3, r3, #31
   38882:	401d      	ands	r5, r3
   38884:	68a3      	ldr	r3, [r4, #8]
   38886:	6922      	ldr	r2, [r4, #16]
   38888:	4293      	cmp	r3, r2
   3888a:	dd01      	ble.n	38890 <_printf_common+0x7c>
   3888c:	1a9b      	subs	r3, r3, r2
   3888e:	18ed      	adds	r5, r5, r3
   38890:	2700      	movs	r7, #0
   38892:	42bd      	cmp	r5, r7
   38894:	d120      	bne.n	388d8 <_printf_common+0xc4>
   38896:	2000      	movs	r0, #0
   38898:	e010      	b.n	388bc <_printf_common+0xa8>
   3889a:	3701      	adds	r7, #1
   3889c:	68e3      	ldr	r3, [r4, #12]
   3889e:	682a      	ldr	r2, [r5, #0]
   388a0:	1a9b      	subs	r3, r3, r2
   388a2:	429f      	cmp	r7, r3
   388a4:	dad2      	bge.n	3884c <_printf_common+0x38>
   388a6:	0022      	movs	r2, r4
   388a8:	2301      	movs	r3, #1
   388aa:	3219      	adds	r2, #25
   388ac:	9901      	ldr	r1, [sp, #4]
   388ae:	9800      	ldr	r0, [sp, #0]
   388b0:	9e08      	ldr	r6, [sp, #32]
   388b2:	47b0      	blx	r6
   388b4:	1c43      	adds	r3, r0, #1
   388b6:	d1f0      	bne.n	3889a <_printf_common+0x86>
   388b8:	2001      	movs	r0, #1
   388ba:	4240      	negs	r0, r0
   388bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   388be:	2030      	movs	r0, #48	; 0x30
   388c0:	18e1      	adds	r1, r4, r3
   388c2:	3143      	adds	r1, #67	; 0x43
   388c4:	7008      	strb	r0, [r1, #0]
   388c6:	0021      	movs	r1, r4
   388c8:	1c5a      	adds	r2, r3, #1
   388ca:	3145      	adds	r1, #69	; 0x45
   388cc:	7809      	ldrb	r1, [r1, #0]
   388ce:	18a2      	adds	r2, r4, r2
   388d0:	3243      	adds	r2, #67	; 0x43
   388d2:	3302      	adds	r3, #2
   388d4:	7011      	strb	r1, [r2, #0]
   388d6:	e7c1      	b.n	3885c <_printf_common+0x48>
   388d8:	0022      	movs	r2, r4
   388da:	2301      	movs	r3, #1
   388dc:	321a      	adds	r2, #26
   388de:	9901      	ldr	r1, [sp, #4]
   388e0:	9800      	ldr	r0, [sp, #0]
   388e2:	9e08      	ldr	r6, [sp, #32]
   388e4:	47b0      	blx	r6
   388e6:	1c43      	adds	r3, r0, #1
   388e8:	d0e6      	beq.n	388b8 <_printf_common+0xa4>
   388ea:	3701      	adds	r7, #1
   388ec:	e7d1      	b.n	38892 <_printf_common+0x7e>
	...

000388f0 <_printf_i>:
   388f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   388f2:	b08b      	sub	sp, #44	; 0x2c
   388f4:	9206      	str	r2, [sp, #24]
   388f6:	000a      	movs	r2, r1
   388f8:	3243      	adds	r2, #67	; 0x43
   388fa:	9307      	str	r3, [sp, #28]
   388fc:	9005      	str	r0, [sp, #20]
   388fe:	9204      	str	r2, [sp, #16]
   38900:	7e0a      	ldrb	r2, [r1, #24]
   38902:	000c      	movs	r4, r1
   38904:	9b10      	ldr	r3, [sp, #64]	; 0x40
   38906:	2a6e      	cmp	r2, #110	; 0x6e
   38908:	d100      	bne.n	3890c <_printf_i+0x1c>
   3890a:	e08f      	b.n	38a2c <_printf_i+0x13c>
   3890c:	d817      	bhi.n	3893e <_printf_i+0x4e>
   3890e:	2a63      	cmp	r2, #99	; 0x63
   38910:	d02c      	beq.n	3896c <_printf_i+0x7c>
   38912:	d808      	bhi.n	38926 <_printf_i+0x36>
   38914:	2a00      	cmp	r2, #0
   38916:	d100      	bne.n	3891a <_printf_i+0x2a>
   38918:	e099      	b.n	38a4e <_printf_i+0x15e>
   3891a:	2a58      	cmp	r2, #88	; 0x58
   3891c:	d054      	beq.n	389c8 <_printf_i+0xd8>
   3891e:	0026      	movs	r6, r4
   38920:	3642      	adds	r6, #66	; 0x42
   38922:	7032      	strb	r2, [r6, #0]
   38924:	e029      	b.n	3897a <_printf_i+0x8a>
   38926:	2a64      	cmp	r2, #100	; 0x64
   38928:	d001      	beq.n	3892e <_printf_i+0x3e>
   3892a:	2a69      	cmp	r2, #105	; 0x69
   3892c:	d1f7      	bne.n	3891e <_printf_i+0x2e>
   3892e:	6821      	ldr	r1, [r4, #0]
   38930:	681a      	ldr	r2, [r3, #0]
   38932:	0608      	lsls	r0, r1, #24
   38934:	d523      	bpl.n	3897e <_printf_i+0x8e>
   38936:	1d11      	adds	r1, r2, #4
   38938:	6019      	str	r1, [r3, #0]
   3893a:	6815      	ldr	r5, [r2, #0]
   3893c:	e025      	b.n	3898a <_printf_i+0x9a>
   3893e:	2a73      	cmp	r2, #115	; 0x73
   38940:	d100      	bne.n	38944 <_printf_i+0x54>
   38942:	e088      	b.n	38a56 <_printf_i+0x166>
   38944:	d808      	bhi.n	38958 <_printf_i+0x68>
   38946:	2a6f      	cmp	r2, #111	; 0x6f
   38948:	d029      	beq.n	3899e <_printf_i+0xae>
   3894a:	2a70      	cmp	r2, #112	; 0x70
   3894c:	d1e7      	bne.n	3891e <_printf_i+0x2e>
   3894e:	2220      	movs	r2, #32
   38950:	6809      	ldr	r1, [r1, #0]
   38952:	430a      	orrs	r2, r1
   38954:	6022      	str	r2, [r4, #0]
   38956:	e003      	b.n	38960 <_printf_i+0x70>
   38958:	2a75      	cmp	r2, #117	; 0x75
   3895a:	d020      	beq.n	3899e <_printf_i+0xae>
   3895c:	2a78      	cmp	r2, #120	; 0x78
   3895e:	d1de      	bne.n	3891e <_printf_i+0x2e>
   38960:	0022      	movs	r2, r4
   38962:	2178      	movs	r1, #120	; 0x78
   38964:	3245      	adds	r2, #69	; 0x45
   38966:	7011      	strb	r1, [r2, #0]
   38968:	4a6c      	ldr	r2, [pc, #432]	; (38b1c <_printf_i+0x22c>)
   3896a:	e030      	b.n	389ce <_printf_i+0xde>
   3896c:	000e      	movs	r6, r1
   3896e:	681a      	ldr	r2, [r3, #0]
   38970:	3642      	adds	r6, #66	; 0x42
   38972:	1d11      	adds	r1, r2, #4
   38974:	6019      	str	r1, [r3, #0]
   38976:	6813      	ldr	r3, [r2, #0]
   38978:	7033      	strb	r3, [r6, #0]
   3897a:	2301      	movs	r3, #1
   3897c:	e079      	b.n	38a72 <_printf_i+0x182>
   3897e:	0649      	lsls	r1, r1, #25
   38980:	d5d9      	bpl.n	38936 <_printf_i+0x46>
   38982:	1d11      	adds	r1, r2, #4
   38984:	6019      	str	r1, [r3, #0]
   38986:	2300      	movs	r3, #0
   38988:	5ed5      	ldrsh	r5, [r2, r3]
   3898a:	2d00      	cmp	r5, #0
   3898c:	da03      	bge.n	38996 <_printf_i+0xa6>
   3898e:	232d      	movs	r3, #45	; 0x2d
   38990:	9a04      	ldr	r2, [sp, #16]
   38992:	426d      	negs	r5, r5
   38994:	7013      	strb	r3, [r2, #0]
   38996:	4b62      	ldr	r3, [pc, #392]	; (38b20 <_printf_i+0x230>)
   38998:	270a      	movs	r7, #10
   3899a:	9303      	str	r3, [sp, #12]
   3899c:	e02f      	b.n	389fe <_printf_i+0x10e>
   3899e:	6820      	ldr	r0, [r4, #0]
   389a0:	6819      	ldr	r1, [r3, #0]
   389a2:	0605      	lsls	r5, r0, #24
   389a4:	d503      	bpl.n	389ae <_printf_i+0xbe>
   389a6:	1d08      	adds	r0, r1, #4
   389a8:	6018      	str	r0, [r3, #0]
   389aa:	680d      	ldr	r5, [r1, #0]
   389ac:	e005      	b.n	389ba <_printf_i+0xca>
   389ae:	0640      	lsls	r0, r0, #25
   389b0:	d5f9      	bpl.n	389a6 <_printf_i+0xb6>
   389b2:	680d      	ldr	r5, [r1, #0]
   389b4:	1d08      	adds	r0, r1, #4
   389b6:	6018      	str	r0, [r3, #0]
   389b8:	b2ad      	uxth	r5, r5
   389ba:	4b59      	ldr	r3, [pc, #356]	; (38b20 <_printf_i+0x230>)
   389bc:	2708      	movs	r7, #8
   389be:	9303      	str	r3, [sp, #12]
   389c0:	2a6f      	cmp	r2, #111	; 0x6f
   389c2:	d018      	beq.n	389f6 <_printf_i+0x106>
   389c4:	270a      	movs	r7, #10
   389c6:	e016      	b.n	389f6 <_printf_i+0x106>
   389c8:	3145      	adds	r1, #69	; 0x45
   389ca:	700a      	strb	r2, [r1, #0]
   389cc:	4a54      	ldr	r2, [pc, #336]	; (38b20 <_printf_i+0x230>)
   389ce:	9203      	str	r2, [sp, #12]
   389d0:	681a      	ldr	r2, [r3, #0]
   389d2:	6821      	ldr	r1, [r4, #0]
   389d4:	1d10      	adds	r0, r2, #4
   389d6:	6018      	str	r0, [r3, #0]
   389d8:	6815      	ldr	r5, [r2, #0]
   389da:	0608      	lsls	r0, r1, #24
   389dc:	d522      	bpl.n	38a24 <_printf_i+0x134>
   389de:	07cb      	lsls	r3, r1, #31
   389e0:	d502      	bpl.n	389e8 <_printf_i+0xf8>
   389e2:	2320      	movs	r3, #32
   389e4:	4319      	orrs	r1, r3
   389e6:	6021      	str	r1, [r4, #0]
   389e8:	2710      	movs	r7, #16
   389ea:	2d00      	cmp	r5, #0
   389ec:	d103      	bne.n	389f6 <_printf_i+0x106>
   389ee:	2320      	movs	r3, #32
   389f0:	6822      	ldr	r2, [r4, #0]
   389f2:	439a      	bics	r2, r3
   389f4:	6022      	str	r2, [r4, #0]
   389f6:	0023      	movs	r3, r4
   389f8:	2200      	movs	r2, #0
   389fa:	3343      	adds	r3, #67	; 0x43
   389fc:	701a      	strb	r2, [r3, #0]
   389fe:	6863      	ldr	r3, [r4, #4]
   38a00:	60a3      	str	r3, [r4, #8]
   38a02:	2b00      	cmp	r3, #0
   38a04:	db5c      	blt.n	38ac0 <_printf_i+0x1d0>
   38a06:	2204      	movs	r2, #4
   38a08:	6821      	ldr	r1, [r4, #0]
   38a0a:	4391      	bics	r1, r2
   38a0c:	6021      	str	r1, [r4, #0]
   38a0e:	2d00      	cmp	r5, #0
   38a10:	d158      	bne.n	38ac4 <_printf_i+0x1d4>
   38a12:	9e04      	ldr	r6, [sp, #16]
   38a14:	2b00      	cmp	r3, #0
   38a16:	d064      	beq.n	38ae2 <_printf_i+0x1f2>
   38a18:	0026      	movs	r6, r4
   38a1a:	9b03      	ldr	r3, [sp, #12]
   38a1c:	3642      	adds	r6, #66	; 0x42
   38a1e:	781b      	ldrb	r3, [r3, #0]
   38a20:	7033      	strb	r3, [r6, #0]
   38a22:	e05e      	b.n	38ae2 <_printf_i+0x1f2>
   38a24:	0648      	lsls	r0, r1, #25
   38a26:	d5da      	bpl.n	389de <_printf_i+0xee>
   38a28:	b2ad      	uxth	r5, r5
   38a2a:	e7d8      	b.n	389de <_printf_i+0xee>
   38a2c:	6809      	ldr	r1, [r1, #0]
   38a2e:	681a      	ldr	r2, [r3, #0]
   38a30:	0608      	lsls	r0, r1, #24
   38a32:	d505      	bpl.n	38a40 <_printf_i+0x150>
   38a34:	1d11      	adds	r1, r2, #4
   38a36:	6019      	str	r1, [r3, #0]
   38a38:	6813      	ldr	r3, [r2, #0]
   38a3a:	6962      	ldr	r2, [r4, #20]
   38a3c:	601a      	str	r2, [r3, #0]
   38a3e:	e006      	b.n	38a4e <_printf_i+0x15e>
   38a40:	0649      	lsls	r1, r1, #25
   38a42:	d5f7      	bpl.n	38a34 <_printf_i+0x144>
   38a44:	1d11      	adds	r1, r2, #4
   38a46:	6019      	str	r1, [r3, #0]
   38a48:	6813      	ldr	r3, [r2, #0]
   38a4a:	8aa2      	ldrh	r2, [r4, #20]
   38a4c:	801a      	strh	r2, [r3, #0]
   38a4e:	2300      	movs	r3, #0
   38a50:	9e04      	ldr	r6, [sp, #16]
   38a52:	6123      	str	r3, [r4, #16]
   38a54:	e054      	b.n	38b00 <_printf_i+0x210>
   38a56:	681a      	ldr	r2, [r3, #0]
   38a58:	1d11      	adds	r1, r2, #4
   38a5a:	6019      	str	r1, [r3, #0]
   38a5c:	6816      	ldr	r6, [r2, #0]
   38a5e:	2100      	movs	r1, #0
   38a60:	6862      	ldr	r2, [r4, #4]
   38a62:	0030      	movs	r0, r6
   38a64:	f000 f922 	bl	38cac <memchr>
   38a68:	2800      	cmp	r0, #0
   38a6a:	d001      	beq.n	38a70 <_printf_i+0x180>
   38a6c:	1b80      	subs	r0, r0, r6
   38a6e:	6060      	str	r0, [r4, #4]
   38a70:	6863      	ldr	r3, [r4, #4]
   38a72:	6123      	str	r3, [r4, #16]
   38a74:	2300      	movs	r3, #0
   38a76:	9a04      	ldr	r2, [sp, #16]
   38a78:	7013      	strb	r3, [r2, #0]
   38a7a:	e041      	b.n	38b00 <_printf_i+0x210>
   38a7c:	6923      	ldr	r3, [r4, #16]
   38a7e:	0032      	movs	r2, r6
   38a80:	9906      	ldr	r1, [sp, #24]
   38a82:	9805      	ldr	r0, [sp, #20]
   38a84:	9d07      	ldr	r5, [sp, #28]
   38a86:	47a8      	blx	r5
   38a88:	1c43      	adds	r3, r0, #1
   38a8a:	d043      	beq.n	38b14 <_printf_i+0x224>
   38a8c:	6823      	ldr	r3, [r4, #0]
   38a8e:	2500      	movs	r5, #0
   38a90:	079b      	lsls	r3, r3, #30
   38a92:	d40f      	bmi.n	38ab4 <_printf_i+0x1c4>
   38a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38a96:	68e0      	ldr	r0, [r4, #12]
   38a98:	4298      	cmp	r0, r3
   38a9a:	da3d      	bge.n	38b18 <_printf_i+0x228>
   38a9c:	0018      	movs	r0, r3
   38a9e:	e03b      	b.n	38b18 <_printf_i+0x228>
   38aa0:	0022      	movs	r2, r4
   38aa2:	2301      	movs	r3, #1
   38aa4:	3219      	adds	r2, #25
   38aa6:	9906      	ldr	r1, [sp, #24]
   38aa8:	9805      	ldr	r0, [sp, #20]
   38aaa:	9e07      	ldr	r6, [sp, #28]
   38aac:	47b0      	blx	r6
   38aae:	1c43      	adds	r3, r0, #1
   38ab0:	d030      	beq.n	38b14 <_printf_i+0x224>
   38ab2:	3501      	adds	r5, #1
   38ab4:	68e3      	ldr	r3, [r4, #12]
   38ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38ab8:	1a9b      	subs	r3, r3, r2
   38aba:	429d      	cmp	r5, r3
   38abc:	dbf0      	blt.n	38aa0 <_printf_i+0x1b0>
   38abe:	e7e9      	b.n	38a94 <_printf_i+0x1a4>
   38ac0:	2d00      	cmp	r5, #0
   38ac2:	d0a9      	beq.n	38a18 <_printf_i+0x128>
   38ac4:	9e04      	ldr	r6, [sp, #16]
   38ac6:	0028      	movs	r0, r5
   38ac8:	0039      	movs	r1, r7
   38aca:	f7fc fa39 	bl	34f40 <__aeabi_uidivmod>
   38ace:	9b03      	ldr	r3, [sp, #12]
   38ad0:	3e01      	subs	r6, #1
   38ad2:	5c5b      	ldrb	r3, [r3, r1]
   38ad4:	0028      	movs	r0, r5
   38ad6:	7033      	strb	r3, [r6, #0]
   38ad8:	0039      	movs	r1, r7
   38ada:	f7fc f9ab 	bl	34e34 <__udivsi3>
   38ade:	1e05      	subs	r5, r0, #0
   38ae0:	d1f1      	bne.n	38ac6 <_printf_i+0x1d6>
   38ae2:	2f08      	cmp	r7, #8
   38ae4:	d109      	bne.n	38afa <_printf_i+0x20a>
   38ae6:	6823      	ldr	r3, [r4, #0]
   38ae8:	07db      	lsls	r3, r3, #31
   38aea:	d506      	bpl.n	38afa <_printf_i+0x20a>
   38aec:	6863      	ldr	r3, [r4, #4]
   38aee:	6922      	ldr	r2, [r4, #16]
   38af0:	4293      	cmp	r3, r2
   38af2:	dc02      	bgt.n	38afa <_printf_i+0x20a>
   38af4:	2330      	movs	r3, #48	; 0x30
   38af6:	3e01      	subs	r6, #1
   38af8:	7033      	strb	r3, [r6, #0]
   38afa:	9b04      	ldr	r3, [sp, #16]
   38afc:	1b9b      	subs	r3, r3, r6
   38afe:	6123      	str	r3, [r4, #16]
   38b00:	9b07      	ldr	r3, [sp, #28]
   38b02:	aa09      	add	r2, sp, #36	; 0x24
   38b04:	9300      	str	r3, [sp, #0]
   38b06:	0021      	movs	r1, r4
   38b08:	9b06      	ldr	r3, [sp, #24]
   38b0a:	9805      	ldr	r0, [sp, #20]
   38b0c:	f7ff fe82 	bl	38814 <_printf_common>
   38b10:	1c43      	adds	r3, r0, #1
   38b12:	d1b3      	bne.n	38a7c <_printf_i+0x18c>
   38b14:	2001      	movs	r0, #1
   38b16:	4240      	negs	r0, r0
   38b18:	b00b      	add	sp, #44	; 0x2c
   38b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38b1c:	0003d548 	.word	0x0003d548
   38b20:	0003d537 	.word	0x0003d537

00038b24 <__sread>:
   38b24:	b570      	push	{r4, r5, r6, lr}
   38b26:	000c      	movs	r4, r1
   38b28:	250e      	movs	r5, #14
   38b2a:	5f49      	ldrsh	r1, [r1, r5]
   38b2c:	f000 f8f0 	bl	38d10 <_read_r>
   38b30:	2800      	cmp	r0, #0
   38b32:	db03      	blt.n	38b3c <__sread+0x18>
   38b34:	6d63      	ldr	r3, [r4, #84]	; 0x54
   38b36:	181b      	adds	r3, r3, r0
   38b38:	6563      	str	r3, [r4, #84]	; 0x54
   38b3a:	bd70      	pop	{r4, r5, r6, pc}
   38b3c:	89a3      	ldrh	r3, [r4, #12]
   38b3e:	4a02      	ldr	r2, [pc, #8]	; (38b48 <__sread+0x24>)
   38b40:	4013      	ands	r3, r2
   38b42:	81a3      	strh	r3, [r4, #12]
   38b44:	e7f9      	b.n	38b3a <__sread+0x16>
   38b46:	46c0      	nop			; (mov r8, r8)
   38b48:	ffffefff 	.word	0xffffefff

00038b4c <__swrite>:
   38b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38b4e:	001f      	movs	r7, r3
   38b50:	898b      	ldrh	r3, [r1, #12]
   38b52:	0005      	movs	r5, r0
   38b54:	000c      	movs	r4, r1
   38b56:	0016      	movs	r6, r2
   38b58:	05db      	lsls	r3, r3, #23
   38b5a:	d505      	bpl.n	38b68 <__swrite+0x1c>
   38b5c:	230e      	movs	r3, #14
   38b5e:	5ec9      	ldrsh	r1, [r1, r3]
   38b60:	2200      	movs	r2, #0
   38b62:	2302      	movs	r3, #2
   38b64:	f000 f88e 	bl	38c84 <_lseek_r>
   38b68:	89a3      	ldrh	r3, [r4, #12]
   38b6a:	4a05      	ldr	r2, [pc, #20]	; (38b80 <__swrite+0x34>)
   38b6c:	0028      	movs	r0, r5
   38b6e:	4013      	ands	r3, r2
   38b70:	81a3      	strh	r3, [r4, #12]
   38b72:	0032      	movs	r2, r6
   38b74:	230e      	movs	r3, #14
   38b76:	5ee1      	ldrsh	r1, [r4, r3]
   38b78:	003b      	movs	r3, r7
   38b7a:	f000 f839 	bl	38bf0 <_write_r>
   38b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38b80:	ffffefff 	.word	0xffffefff

00038b84 <__sseek>:
   38b84:	b570      	push	{r4, r5, r6, lr}
   38b86:	000c      	movs	r4, r1
   38b88:	250e      	movs	r5, #14
   38b8a:	5f49      	ldrsh	r1, [r1, r5]
   38b8c:	f000 f87a 	bl	38c84 <_lseek_r>
   38b90:	89a3      	ldrh	r3, [r4, #12]
   38b92:	1c42      	adds	r2, r0, #1
   38b94:	d103      	bne.n	38b9e <__sseek+0x1a>
   38b96:	4a05      	ldr	r2, [pc, #20]	; (38bac <__sseek+0x28>)
   38b98:	4013      	ands	r3, r2
   38b9a:	81a3      	strh	r3, [r4, #12]
   38b9c:	bd70      	pop	{r4, r5, r6, pc}
   38b9e:	2280      	movs	r2, #128	; 0x80
   38ba0:	0152      	lsls	r2, r2, #5
   38ba2:	4313      	orrs	r3, r2
   38ba4:	81a3      	strh	r3, [r4, #12]
   38ba6:	6560      	str	r0, [r4, #84]	; 0x54
   38ba8:	e7f8      	b.n	38b9c <__sseek+0x18>
   38baa:	46c0      	nop			; (mov r8, r8)
   38bac:	ffffefff 	.word	0xffffefff

00038bb0 <__sclose>:
   38bb0:	b510      	push	{r4, lr}
   38bb2:	230e      	movs	r3, #14
   38bb4:	5ec9      	ldrsh	r1, [r1, r3]
   38bb6:	f000 f82f 	bl	38c18 <_close_r>
   38bba:	bd10      	pop	{r4, pc}

00038bbc <strchr>:
   38bbc:	b2c9      	uxtb	r1, r1
   38bbe:	7803      	ldrb	r3, [r0, #0]
   38bc0:	2b00      	cmp	r3, #0
   38bc2:	d004      	beq.n	38bce <strchr+0x12>
   38bc4:	4299      	cmp	r1, r3
   38bc6:	d100      	bne.n	38bca <strchr+0xe>
   38bc8:	4770      	bx	lr
   38bca:	3001      	adds	r0, #1
   38bcc:	e7f7      	b.n	38bbe <strchr+0x2>
   38bce:	424b      	negs	r3, r1
   38bd0:	4159      	adcs	r1, r3
   38bd2:	4249      	negs	r1, r1
   38bd4:	4008      	ands	r0, r1
   38bd6:	e7f7      	b.n	38bc8 <strchr+0xc>

00038bd8 <__ascii_wctomb>:
   38bd8:	1e0b      	subs	r3, r1, #0
   38bda:	d004      	beq.n	38be6 <__ascii_wctomb+0xe>
   38bdc:	2aff      	cmp	r2, #255	; 0xff
   38bde:	d904      	bls.n	38bea <__ascii_wctomb+0x12>
   38be0:	238a      	movs	r3, #138	; 0x8a
   38be2:	6003      	str	r3, [r0, #0]
   38be4:	3b8b      	subs	r3, #139	; 0x8b
   38be6:	0018      	movs	r0, r3
   38be8:	4770      	bx	lr
   38bea:	700a      	strb	r2, [r1, #0]
   38bec:	2301      	movs	r3, #1
   38bee:	e7fa      	b.n	38be6 <__ascii_wctomb+0xe>

00038bf0 <_write_r>:
   38bf0:	b570      	push	{r4, r5, r6, lr}
   38bf2:	0005      	movs	r5, r0
   38bf4:	0008      	movs	r0, r1
   38bf6:	0011      	movs	r1, r2
   38bf8:	2200      	movs	r2, #0
   38bfa:	4c06      	ldr	r4, [pc, #24]	; (38c14 <_write_r+0x24>)
   38bfc:	6022      	str	r2, [r4, #0]
   38bfe:	001a      	movs	r2, r3
   38c00:	f7f4 fc9e 	bl	2d540 <_write>
   38c04:	1c43      	adds	r3, r0, #1
   38c06:	d103      	bne.n	38c10 <_write_r+0x20>
   38c08:	6823      	ldr	r3, [r4, #0]
   38c0a:	2b00      	cmp	r3, #0
   38c0c:	d000      	beq.n	38c10 <_write_r+0x20>
   38c0e:	602b      	str	r3, [r5, #0]
   38c10:	bd70      	pop	{r4, r5, r6, pc}
   38c12:	46c0      	nop			; (mov r8, r8)
   38c14:	20005b08 	.word	0x20005b08

00038c18 <_close_r>:
   38c18:	2300      	movs	r3, #0
   38c1a:	b570      	push	{r4, r5, r6, lr}
   38c1c:	4c06      	ldr	r4, [pc, #24]	; (38c38 <_close_r+0x20>)
   38c1e:	0005      	movs	r5, r0
   38c20:	0008      	movs	r0, r1
   38c22:	6023      	str	r3, [r4, #0]
   38c24:	f7f4 fce0 	bl	2d5e8 <_close>
   38c28:	1c43      	adds	r3, r0, #1
   38c2a:	d103      	bne.n	38c34 <_close_r+0x1c>
   38c2c:	6823      	ldr	r3, [r4, #0]
   38c2e:	2b00      	cmp	r3, #0
   38c30:	d000      	beq.n	38c34 <_close_r+0x1c>
   38c32:	602b      	str	r3, [r5, #0]
   38c34:	bd70      	pop	{r4, r5, r6, pc}
   38c36:	46c0      	nop			; (mov r8, r8)
   38c38:	20005b08 	.word	0x20005b08

00038c3c <_fstat_r>:
   38c3c:	2300      	movs	r3, #0
   38c3e:	b570      	push	{r4, r5, r6, lr}
   38c40:	4c06      	ldr	r4, [pc, #24]	; (38c5c <_fstat_r+0x20>)
   38c42:	0005      	movs	r5, r0
   38c44:	0008      	movs	r0, r1
   38c46:	0011      	movs	r1, r2
   38c48:	6023      	str	r3, [r4, #0]
   38c4a:	f7f4 fcd7 	bl	2d5fc <_fstat>
   38c4e:	1c43      	adds	r3, r0, #1
   38c50:	d103      	bne.n	38c5a <_fstat_r+0x1e>
   38c52:	6823      	ldr	r3, [r4, #0]
   38c54:	2b00      	cmp	r3, #0
   38c56:	d000      	beq.n	38c5a <_fstat_r+0x1e>
   38c58:	602b      	str	r3, [r5, #0]
   38c5a:	bd70      	pop	{r4, r5, r6, pc}
   38c5c:	20005b08 	.word	0x20005b08

00038c60 <_isatty_r>:
   38c60:	2300      	movs	r3, #0
   38c62:	b570      	push	{r4, r5, r6, lr}
   38c64:	4c06      	ldr	r4, [pc, #24]	; (38c80 <_isatty_r+0x20>)
   38c66:	0005      	movs	r5, r0
   38c68:	0008      	movs	r0, r1
   38c6a:	6023      	str	r3, [r4, #0]
   38c6c:	f7f4 fcd4 	bl	2d618 <_isatty>
   38c70:	1c43      	adds	r3, r0, #1
   38c72:	d103      	bne.n	38c7c <_isatty_r+0x1c>
   38c74:	6823      	ldr	r3, [r4, #0]
   38c76:	2b00      	cmp	r3, #0
   38c78:	d000      	beq.n	38c7c <_isatty_r+0x1c>
   38c7a:	602b      	str	r3, [r5, #0]
   38c7c:	bd70      	pop	{r4, r5, r6, pc}
   38c7e:	46c0      	nop			; (mov r8, r8)
   38c80:	20005b08 	.word	0x20005b08

00038c84 <_lseek_r>:
   38c84:	b570      	push	{r4, r5, r6, lr}
   38c86:	0005      	movs	r5, r0
   38c88:	0008      	movs	r0, r1
   38c8a:	0011      	movs	r1, r2
   38c8c:	2200      	movs	r2, #0
   38c8e:	4c06      	ldr	r4, [pc, #24]	; (38ca8 <_lseek_r+0x24>)
   38c90:	6022      	str	r2, [r4, #0]
   38c92:	001a      	movs	r2, r3
   38c94:	f7f4 fcc9 	bl	2d62a <_lseek>
   38c98:	1c43      	adds	r3, r0, #1
   38c9a:	d103      	bne.n	38ca4 <_lseek_r+0x20>
   38c9c:	6823      	ldr	r3, [r4, #0]
   38c9e:	2b00      	cmp	r3, #0
   38ca0:	d000      	beq.n	38ca4 <_lseek_r+0x20>
   38ca2:	602b      	str	r3, [r5, #0]
   38ca4:	bd70      	pop	{r4, r5, r6, pc}
   38ca6:	46c0      	nop			; (mov r8, r8)
   38ca8:	20005b08 	.word	0x20005b08

00038cac <memchr>:
   38cac:	b2c9      	uxtb	r1, r1
   38cae:	1882      	adds	r2, r0, r2
   38cb0:	4290      	cmp	r0, r2
   38cb2:	d101      	bne.n	38cb8 <memchr+0xc>
   38cb4:	2000      	movs	r0, #0
   38cb6:	4770      	bx	lr
   38cb8:	7803      	ldrb	r3, [r0, #0]
   38cba:	428b      	cmp	r3, r1
   38cbc:	d0fb      	beq.n	38cb6 <memchr+0xa>
   38cbe:	3001      	adds	r0, #1
   38cc0:	e7f6      	b.n	38cb0 <memchr+0x4>

00038cc2 <_realloc_r>:
   38cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38cc4:	0007      	movs	r7, r0
   38cc6:	000d      	movs	r5, r1
   38cc8:	0016      	movs	r6, r2
   38cca:	2900      	cmp	r1, #0
   38ccc:	d105      	bne.n	38cda <_realloc_r+0x18>
   38cce:	0011      	movs	r1, r2
   38cd0:	f7fe fe9e 	bl	37a10 <_malloc_r>
   38cd4:	0004      	movs	r4, r0
   38cd6:	0020      	movs	r0, r4
   38cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38cda:	2a00      	cmp	r2, #0
   38cdc:	d103      	bne.n	38ce6 <_realloc_r+0x24>
   38cde:	f7fe fe4d 	bl	3797c <_free_r>
   38ce2:	0034      	movs	r4, r6
   38ce4:	e7f7      	b.n	38cd6 <_realloc_r+0x14>
   38ce6:	f000 f827 	bl	38d38 <_malloc_usable_size_r>
   38cea:	002c      	movs	r4, r5
   38cec:	4286      	cmp	r6, r0
   38cee:	d9f2      	bls.n	38cd6 <_realloc_r+0x14>
   38cf0:	0031      	movs	r1, r6
   38cf2:	0038      	movs	r0, r7
   38cf4:	f7fe fe8c 	bl	37a10 <_malloc_r>
   38cf8:	1e04      	subs	r4, r0, #0
   38cfa:	d0ec      	beq.n	38cd6 <_realloc_r+0x14>
   38cfc:	0029      	movs	r1, r5
   38cfe:	0032      	movs	r2, r6
   38d00:	f7fe fe18 	bl	37934 <memcpy>
   38d04:	0029      	movs	r1, r5
   38d06:	0038      	movs	r0, r7
   38d08:	f7fe fe38 	bl	3797c <_free_r>
   38d0c:	e7e3      	b.n	38cd6 <_realloc_r+0x14>
	...

00038d10 <_read_r>:
   38d10:	b570      	push	{r4, r5, r6, lr}
   38d12:	0005      	movs	r5, r0
   38d14:	0008      	movs	r0, r1
   38d16:	0011      	movs	r1, r2
   38d18:	2200      	movs	r2, #0
   38d1a:	4c06      	ldr	r4, [pc, #24]	; (38d34 <_read_r+0x24>)
   38d1c:	6022      	str	r2, [r4, #0]
   38d1e:	001a      	movs	r2, r3
   38d20:	f7f4 fbe4 	bl	2d4ec <_read>
   38d24:	1c43      	adds	r3, r0, #1
   38d26:	d103      	bne.n	38d30 <_read_r+0x20>
   38d28:	6823      	ldr	r3, [r4, #0]
   38d2a:	2b00      	cmp	r3, #0
   38d2c:	d000      	beq.n	38d30 <_read_r+0x20>
   38d2e:	602b      	str	r3, [r5, #0]
   38d30:	bd70      	pop	{r4, r5, r6, pc}
   38d32:	46c0      	nop			; (mov r8, r8)
   38d34:	20005b08 	.word	0x20005b08

00038d38 <_malloc_usable_size_r>:
   38d38:	1f0b      	subs	r3, r1, #4
   38d3a:	681b      	ldr	r3, [r3, #0]
   38d3c:	1f18      	subs	r0, r3, #4
   38d3e:	2b00      	cmp	r3, #0
   38d40:	da01      	bge.n	38d46 <_malloc_usable_size_r+0xe>
   38d42:	580b      	ldr	r3, [r1, r0]
   38d44:	18c0      	adds	r0, r0, r3
   38d46:	4770      	bx	lr
   38d48:	04020100 	.word	0x04020100
   38d4c:	00001008 	.word	0x00001008
   38d50:	7fffffff 	.word	0x7fffffff
   38d54:	7fffffff 	.word	0x7fffffff
   38d58:	7fffffff 	.word	0x7fffffff
   38d5c:	7fffffff 	.word	0x7fffffff
   38d60:	7fffffff 	.word	0x7fffffff
   38d64:	7eb851ea 	.word	0x7eb851ea
   38d68:	7fffffff 	.word	0x7fffffff
   38d6c:	7ef9db21 	.word	0x7ef9db21
   38d70:	7fffffff 	.word	0x7fffffff
   38d74:	7fffffff 	.word	0x7fffffff
   38d78:	7fbe76c7 	.word	0x7fbe76c7
   38d7c:	7f5c28f4 	.word	0x7f5c28f4
   38d80:	7fffffff 	.word	0x7fffffff
   38d84:	7eb851ea 	.word	0x7eb851ea
   38d88:	7fffffff 	.word	0x7fffffff
   38d8c:	7fffffff 	.word	0x7fffffff
   38d90:	f4240000 	.word	0xf4240000
   38d94:	7a120000 	.word	0x7a120000
   38d98:	3d090000 	.word	0x3d090000
   38d9c:	1e848000 	.word	0x1e848000
   38da0:	0f3e58ff 	.word	0x0f3e58ff
   38da4:	07938c54 	.word	0x07938c54
   38da8:	03d09000 	.word	0x03d09000
   38dac:	01ec3810 	.word	0x01ec3810
   38db0:	00f46290 	.word	0x00f46290
   38db4:	007a1200 	.word	0x007a1200
   38db8:	003d0900 	.word	0x003d0900
   38dbc:	001e8480 	.word	0x001e8480
   38dc0:	000f4240 	.word	0x000f4240
   38dc4:	0007a120 	.word	0x0007a120
   38dc8:	0003d090 	.word	0x0003d090
   38dcc:	0001e848 	.word	0x0001e848

00038dd0 <pcWelcomeMessage>:
   38dd0:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   38de0:	20657079 706c6548 206f7420 77656976     ype Help to view
   38df0:	6c206120 20747369 7220666f 73696765      a list of regis
   38e00:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   38e10:	0000000a 00756d69 3a756d69 74655220     ....imu.imu: Ret
   38e20:	736e7275 76206120 65756c61 6f726620     urns a value fro
   38e30:	6874206d 4d492065 000a0d55 00007766     m the IMU...fw..
   38e40:	203a7766 6e776f44 64616f6c 66206120     fw: Download a f
   38e50:	20656c69 20646e61 66726570 206d726f     ile and perform 
   38e60:	46206e61 70752057 65746164 00000a0d     an FW update....
   38e70:	00706172 3a706172 69684320 6573656e     rap.rap: Chinese
   38e80:	73654220 61522074 72657070 00000a0d      Best Rapper....
   38e90:	636c6c63 00000064 636c6c63 43203a64     cllcd...cllcd: C
   38ea0:	7261656c 54465420 72635320 0d6e6565     lear TFT Screen.
   38eb0:	0000000a 6b636f6c 00000000 6b636f6c     ....lock....lock
   38ec0:	6f6c203a 74206b63 64206568 21726f6f     : lock the door!
   38ed0:	00000a0d 6f6c6e75 00006b63 6f6c6e75     ....unlock..unlo
   38ee0:	203a6b63 6f6c6e75 74206b63 64206568     ck: unlock the d
   38ef0:	21726f6f 00000a0d 65736572 00000074     oor!....reset...
   38f00:	65736572 52203a74 74657365 68742073     reset: Resets th
   38f10:	65642065 65636976 00000a0d 64746567     e device....getd
   38f20:	61747369 0065636e 64746567 61747369     istance.getdista
   38f30:	3a65636e 74655220 736e7275 65687420     nce: Returns the
   38f40:	73696420 636e6174 72662065 74206d6f      distance from t
   38f50:	55206568 30312d53 65532030 726f736e     he US-100 Sensor
   38f60:	000a0d2e 656d6167 00000000 656d6167     ....game....game
   38f70:	6553203a 2073646e 6d6d7564 61672079     : Sends dummy ga
   38f80:	6420656d 0d617461 0000000a 00633269     me data.....i2c.
   38f90:	3a633269 61635320 4920736e 62204332     i2c: Scans I2C b
   38fa0:	0a0d7375 00000000 00656d62 3a656d62     us......bme.bme:
   38fb0:	69725020 6f20746e 62207475 7320656d      Print out bme s
   38fc0:	6f736e65 61642072 0a0d6174 00000000     ensor data......
   38fd0:	00736c63 3a736c63 656c4320 20737261     cls.cls: Clears 
   38fe0:	20656874 6d726574 6c616e69 72637320     the terminal scr
   38ff0:	0d6e6565 0000000a 6c756f43 6f6e2064     een.....Could no
   39000:	6c612074 61636f6c 73206574 70616d65     t allocate semap
   39010:	65726f68 00000a0d 00000a0d 0000616f     hore........oa..
   39020:	325b6325 003e0d4b 00082008 65636341     %c[2K.>.. ..Acce
   39030:	6172656c 6e6f6974 676d5b20 20583a5d     leration [mg]:X 
   39040:	59096425 09642520 6425205a 00000a0d     %d.Y %d.Z %d....
   39050:	64206f4e 20617461 64616572 53202179     No data ready! S
   39060:	69646e65 6420676e 796d6d75 74616420     ending dummy dat
   39070:	0a0d2061 00000000 325b6325 0000004a     a ......%c[2J...
   39080:	64757453 73746e65 206f7420 6c6c6966     Students to fill
   39090:	74756f20 00000021 736e6553 4520726f      out!...Sensor E
   390a0:	726f7272 21642520 00000a0d 74736944     rror %d!....Dist
   390b0:	65636e61 6425203a 0d6d6d20 0000000a     ance: %d mm.....
   390c0:	74736944 65636e61 74614420 514d2061     Distance Data MQ
   390d0:	50205454 0d74736f 0000000a 6d6d7544     TT Post.....Dumm
   390e0:	61472079 4420656d 20617461 5454514d     y Game Data MQTT
   390f0:	736f5020 000a0d74 31202030 20322020      Post...0  1  2 
   39100:	20203320 35202034 20362020 20203720      3  4  5  6  7  
   39110:	39202038 20612020 20206220 64202063     8  9  a  b  c  d
   39120:	20652020 0a0d6620 00000000 78323025       e  f......%02x
   39130:	0000203a 78323025 00000020              : ..%02x ...

0003913c <xImuGetCommand>:
   3913c:	00038e14 00038e18 00014fc9 00000000     .........O......

0003914c <xOTAUCommand>:
   3914c:	00038e3c 00038e40 00015175 00000000     <...@...uQ......

0003915c <xLock>:
   3915c:	00038eb4 00038ebc 000152dd 00000000     .........R......

0003916c <xUNLock>:
   3916c:	00038ed4 00038edc 000152fd 00000000     .........R......

0003917c <xResetCommand>:
   3917c:	00038ef8 00038f00 00015195 00000000     .........Q......

0003918c <xI2cScan>:
   3918c:	00038f8c 00038f90 000151b5 00000000     .........Q......

0003919c <xBME>:
   3919c:	00038fa8 00038fac 0001531d 00000000     .........S......

000391ac <xClearScreen>:
   391ac:	00038fd0 00038fd4 0001512d 00000000     ........-Q......
   391bc:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   391cc:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   391dc:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   391ec:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   391fc:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   3920c:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   3921c:	64656d75 6d616720 61702065 74656b63     umed game packet
   3922c:	000a0d21 746e6f43 206c6f72 65726854     !...Control Thre
   3923c:	203a6461 6c756f43 6f6e2064 65732074     ad: Could not se
   3924c:	6720646e 20656d61 6b636170 0d217465     nd game packet!.
   3925c:	0000000a                                ....

00039260 <msgKeypadGetCount>:
   39260:	00000410 6f727245 6e692072 61697469     ....Error initia
   39270:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   39280:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   39290:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   392a0:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   392b0:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   392c0:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   392d0:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   392e0:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   392f0:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   39300:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   39310:	7265626d 20666f20 69766564 2f736563     mber of devices/
   39320:	006e2f72 6f727245 65722072 6e696461     r/n.Error readin
   39330:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   39340:	6e2f722f 00000000 00001010 0000050e     /r/n............
   39350:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   39360:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
   39370:	00000000                                ....

00039374 <ASCII>:
   39374:	00000000 5f000000 07000000 14000700     ......._........
   39384:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   39394:	00502255 00000305 41221c00 22410000     U"P......."A..A"
   393a4:	0814001c 0814083e 08083e08 00305000     ....>....>...P0.
   393b4:	08080800 60000808 20000060 02040810     .......``.. ....
   393c4:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
   393d4:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
   393e4:	01304949 03050971 49494936 49490636     II0.q...6III6.II
   393f4:	36001e29 00000036 00003656 41221408     )..66...V6...."A
   39404:	14141400 41001414 02081422 06095101     .......A"....Q..
   39414:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
   39424:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
   39434:	3e010909 7a494941 0808087f 7f41007f     ...>AIIz......A.
   39444:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   39454:	0c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   39464:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
   39474:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
   39484:	3f1f2040 3f403840 14081463 70080763     @ .?@8@?c...c..p
   39494:	51610708 00434549 0041417f 10080402     ..aQIEC..AA.....
   394a4:	41410020 0204007f 40040201 40404040      .AA.......@@@@@
   394b4:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
   394c4:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
   394d4:	0c020109 3e525252 0404087f 7d440078     ....RRR>....x.D}
   394e4:	40200040 7f003d44 00442810 407f4100     @. @D=...(D..A.@
   394f4:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
   39504:	1414147c 14140808 087c7c18 48080404     |........||....H
   39514:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
   39524:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
   39534:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
   39544:	36410000 08100008 00081008 06090906     ..A6............
   39554:	49464957 20736920 6e6e6f43 65746365     WIFI is Connecte
   39564:	20202164 00002020 69666957 20736920     d!    ..Wifi is 
   39574:	20746f6e 6e6e6f43 65746365 00002164     not Connected!..
   39584:	2d455345 00363135 636c6557 00656d6f     ESE-516.Welcome.
   39594:	63746157 676f4468 61745320 3a737574     WatchDog Status:
   395a4:	6b636f4c 20206465 00000000 63746157     Locked  ....Watc
   395b4:	676f4468 61745320 3a737574 6f6c6e55     hDog Status:Unlo
   395c4:	64656b63 00000000 706d6554 74617265     cked....Temperat
   395d4:	3a657275 20642520 00000000 696d7548     ure: %d ....Humi
   395e4:	79746964 6425203a 00252520 73657250     dity: %d %%.Pres
   395f4:	65727573 6425203a 61506820 00000000     sure: %d hPa....
   39604:	6b6f6d53 25203a65 25252064 00000000     Smoke: %d %%....
   39614:	54204955 206b7361 72617453 21646574     UI Task Started!
   39624:	00000000                                ....

00039628 <main_mqtt_broker>:
   39628:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   39638:	0000006d 64333025 00000000 72617473     m...%03d....star
   39648:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   39658:	726f7473 20656761 20746f6e 64616572     storage not read
   39668:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   39678:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   39688:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   39698:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   396a8:	203a6461 75716572 20747365 73207369     ad: request is s
   396b8:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   396c8:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   396d8:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   396e8:	726c6120 79646165 000a0d2e 72617473      already....star
   396f8:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   39708:	20676e69 50545448 71657220 74736575     ing HTTP request
   39718:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   39728:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   39738:	7e2f7564 61676465 492f6372 702e546f     du/~edgarc/IoT.p
   39748:	00006664 726f7473 69665f65 705f656c     df..store_file_p
   39758:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   39768:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   39778:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   39788:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   39798:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   397a8:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   397b8:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   397c8:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   397d8:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   397e8:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   397f8:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   39808:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   39818:	656b6361 66203a74 20656c69 74697277     acket: file writ
   39828:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   39838:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   39848:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   39858:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   39868:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   39878:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   39888:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   39898:	64616f6c 73206465 65636375 75667373     loaded successfu
   398a8:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   398b8:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   398c8:	63205054 6e65696c 6f732074 74656b63     TP client socket
   398d8:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   398e8:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   398f8:	6b636162 6572203a 73657571 6f632074     back: request co
   39908:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   39918:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   39928:	6572203a 76696563 72206465 6f707365     : received respo
   39938:	2065736e 64207525 20617461 657a6973     nse %u data size
   39948:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   39958:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   39968:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   39978:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   39988:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   39998:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   399a8:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   399b8:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   399c8:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   399d8:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   399e8:	5443454e 0a0d4445 00000000 69666957     NECTED......Wifi
   399f8:	20736920 20746f6e 6e6e6f43 65746365      is not Connecte
   39a08:	00002164 657a696c 33343536 00003132     d!..lize654321..
   39a18:	00000068 69666977 3a62635f 20504920     h...wifi_cb: IP 
   39a28:	72646461 20737365 25207369 75252e75     address is %u.%u
   39a38:	2e75252e 0a0d7525 00000000 6f727245     .%u.%u......Erro
   39a48:	6f632072 63656e6e 676e6974 206f7420     r connecting to 
   39a58:	5454514d 6f724220 2172656b 00000a0d     MQTT Broker!....
   39a68:	74696e69 6f74735f 65676172 6c70203a     init_storage: pl
   39a78:	65736165 756c7020 6e612067 2f445320     ease plug an SD/
   39a88:	20434d4d 64726163 206e6920 746f6c73     MMC card in slot
   39a98:	0d2e2e2e 0000000a 74696e69 6f74735f     ........init_sto
   39aa8:	65676172 4453203a 72614320 6e692064     rage: SD Card in
   39ab8:	6c617473 6166206c 64656c69 000a0d2e     stall failed....
   39ac8:	74696e69 6f74735f 65676172 7274203a     init_storage: tr
   39ad8:	6e752079 67756c70 646e6120 2d657220     y unplug and re-
   39ae8:	67756c70 65687420 72616320 0a0d2e64     plug the card...
   39af8:	00000000 74696e69 6f74735f 65676172     ....init_storage
   39b08:	6f6d203a 69746e75 5320676e 61632044     : mounting SD ca
   39b18:	2e2e6472 000a0d2e 74696e69 6f74735f     rd......init_sto
   39b28:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   39b38:	20746e75 6c696166 20216465 73657228     unt failed! (res
   39b48:	29642520 00000a0d 74696e69 6f74735f      %d)....init_sto
   39b58:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   39b68:	20746e75 0d2e4b4f 0000000a 666e6f63     unt OK......conf
   39b78:	72756769 74685f65 635f7074 6e65696c     igure_http_clien
   39b88:	48203a74 20505454 65696c63 6920746e     t: HTTP client i
   39b98:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
   39ba8:	64656c69 72282021 25207365 0a0d2964     iled! (res %d)..
   39bb8:	00000000 25200a0d 00732a2e 28626772     ...... %.*s.rgb(
   39bc8:	00000000 47520a0d 64252042 20642520     ......RGB %d %d 
   39bd8:	0a0d6425 00000000 43544157 474f4448     %d......WATCHDOG
   39be8:	5245535f 00004f56 65757274 00000000     _SERVO..true....
   39bf8:	736c6166 00000065 6167227b 3a22656d     false...{"game":
   39c08:	0000005b 61470a0d 6d20656d 61737365     [.....Game messa
   39c18:	72206567 69656365 21646576 00000a0d     ge received!....
   39c28:	732a2e25 00000000 61500a0d 64657372     %.*s......Parsed
   39c38:	6d6f4320 646e616d 0000203a 002c6425      Command: ..%d,.
   39c48:	65530a0d 7020746e 2079616c 63206f74     ..Sent play to c
   39c58:	72746e6f 0d216c6f 0000000a 61470a0d     ontrol!.......Ga
   39c68:	6d20656d 61737365 72206567 69656365     me message recei
   39c78:	20646576 20747562 20746f6e 65646e75     ved but not unde
   39c88:	6f747372 0d21646f 0000000a 4d490a0d     rstood!.......IM
   39c98:	6f742055 20636970 65636572 64657669     U topic received
   39ca8:	000a0d21 4d420a0d 6f742045 20636970     !.....BME topic 
   39cb8:	65636572 64657669 000a0d21 69440a0d     received!.....Di
   39cc8:	6e617473 74206563 6369706f 63657220     stance topic rec
   39cd8:	65766965 0a0d2164 00000000 203e3e20     eived!...... >> 
   39ce8:	00000000 4c5f3150 455f4445 31354553     ....P1_LED_ESE51
   39cf8:	30545f36 00000000 6f430a0d 63656e6e     6_T0......Connec
   39d08:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   39d18:	0000002e 657a694c 36373839 32333435     ....Lize98765432
   39d28:	00000031 00706f6b 5454514d 72452020     1...kop.MQTT  Er
   39d38:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   39d48:	20646574 62206f74 656b6f72 000a0d72     ted to broker...
   39d58:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   39d68:	7262206f 72656b6f 00000a0d 6e6e6f43     o broker....Conn
   39d78:	20746365 6c696166 206f7420 76726573     ect fail to serv
   39d88:	25287265 20212973 72746572 74692079     er(%s)! retry it
   39d98:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   39da8:	0000000a 5454514d 6e6f4320 7463656e     ....MQTT Connect
   39db8:	0a0d6465 00000000 5454514d 6f726220     ed......MQTT bro
   39dc8:	2072656b 6c636564 20656e69 72756f79     ker decline your
   39dd8:	63636120 21737365 72726520 6320726f      access! error c
   39de8:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   39df8:	73696420 6e6e6f63 65746365 000a0d64      disconnected...
   39e08:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   39e18:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   39e28:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   39e38:	00000000 5454514d 67657220 65747369     ....MQTT registe
   39e48:	61632072 61626c6c 66206b63 656c6961     r callback faile
   39e58:	45202e64 726f7272 646f6320 73692065     d. Error code is
   39e68:	64252820 000a0d29 2264227b 74227b3a      (%d)...{"d":{"t
   39e78:	22706d65 7d64253a 0000007d 4941465b     emp":%d}}...[FAI
   39e88:	72205d4c 25207365 000a0d64 67616c46     L] res %d...Flag
   39e98:	78742e41 64612074 21646564 00000a0d     A.txt added!....
   39ea8:	6c463a30 2e416761 00747874 6e6e6f43     0:FlagA.txt.Conn
   39eb8:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   39ec8:	72656b6f 000a0d21 6d69227b 3a227875     oker!...{"imux":
   39ed8:	202c6425 756d6922 203a2279 202c6425     %d, "imuy": %d, 
   39ee8:	756d6922 203a227a 007d6425 495f3150     "imuz": %d}.P1_I
   39ef8:	455f554d 31354553 30545f36 00000000     MU_ESE516_T0....
   39f08:	6574227b 3a22706d 202c6425 6d756822     {"temp":%d, "hum
   39f18:	25203a22 22202c64 22657270 6425203a     ": %d, "pre": %d
   39f28:	7722202c 3a227261 2c642520 61672220     , "war": %d, "ga
   39f38:	203a2273 007d6425 43544157 474f4448     s": %d}.WATCHDOG
   39f48:	4e45535f 00524f53 00006425 00007d5d     _SENSOR.%d..]}..
   39f58:	00000a0d 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   39f68:	545f3631 00000030 4f525245 6e492052     16_T0...ERROR In
   39f78:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   39f88:	61746144 65757120 21736575 00000a0d     Data queues!....
   39f98:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   39fa8:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   39fb8:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   39fc8:	6c6c6163 72726520 2021726f 73657228     call error! (res
   39fd8:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   39fe8:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   39ff8:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   3a008:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   3a018:	30545f36 00000000 5454514d 6e657320     6_T0....MQTT sen
   3a028:	73252064 00000a0d 000187f4 00018800     d %s............
   3a038:	00018812 00018868 00018888 706c6568     ....h.......help
   3a048:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   3a058:	20737473 206c6c61 20656874 69676572     sts all the regi
   3a068:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   3a078:	000a0d0a 6f636e49 63657272 6f632074     ....Incorrect co
   3a088:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   3a098:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   3a0a8:	6f742022 65697620 20612077 7473696c     " to view a list
   3a0b8:	20666f20 69617661 6c62616c 6f632065      of available co
   3a0c8:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   3a0d8:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   3a0e8:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   3a0f8:	6f742027 65697620 20612077 7473696c     ' to view a list
   3a108:	20666f20 69617661 6c62616c 6f632065      of available co
   3a118:	6e616d6d 0d2e7364 000a0d0a              mmands......

0003a124 <xHelpCommand>:
   3a124:	0003a044 0003a04c 0001a475 00000000     D...L...u.......
   3a134:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   3a144:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   3a154:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   3a164:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   3a174:	78656e55 74636570 61206465 6d756772     Unexpected argum
   3a184:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   3a194:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   3a1a4:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   3a1b4:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   3a1c4:	2073656c 6e69202d 61657263 54206573     les - increase T
   3a1d4:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   3a1e4:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   3a1f4:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   3a204:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   3a214:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   3a224:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   3a234:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a244:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   3a254:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a264:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   3a274:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   3a284:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   3a294:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   3a2a4:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a2b4:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   3a2c4:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   3a2d4:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a2e4:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   3a2f4:	73656c64 69202d20 6572636e 20657361     dles - increase 
   3a304:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   3a314:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   3a324:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   3a334:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   3a344:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a354:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   3a364:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   3a374:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   3a384:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   3a394:	202d2073 72636e69 65736165 43525420     s - increase TRC
   3a3a4:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   3a3b4:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   3a3c4:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   3a3d4:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   3a3e4:	646e6168 2073656c 6e69202d 61657263     handles - increa
   3a3f4:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   3a404:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   3a414:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   3a424:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   3a434:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   3a444:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a454:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   3a464:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   3a474:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   3a484:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   3a494:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   3a4a4:	63746365 7373616c 00000021 0001ab9a     ectclass!.......
   3a4b4:	0001ab92 0001ab96 0001ab8a 0001ab8e     ................
   3a4c4:	0001ab9e 0001aba2 0001aba6 0001abaa     ................
   3a4d4:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a4e4:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a4f4:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   3a504:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   3a514:	00216461 61747328 70757472 00000029     ad!.(startup)...
   3a524:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a534:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a544:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   3a554:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   3a564:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   3a574:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a584:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   3a594:	61762064 2065756c 20726f66 646e6168     d value for hand
   3a5a4:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   3a5b4:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a5c4:	7265706f 73656974 616e203a 3d20656d     operties: name =
   3a5d4:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   3a5e4:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   3a5f4:	64726f63 62207265 21797375 65655320     corder busy! See
   3a604:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   3a614:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a624:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a634:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a644:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   3a654:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a664:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a674:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a684:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   3a694:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   3a6a4:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   3a6b4:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   3a6c4:	6f636572 72656472 73756220 53202179     recorder busy! S
   3a6d4:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   3a6e4:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   3a6f4:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   3a704:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   3a714:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   3a724:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   3a734:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   3a744:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   3a754:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   3a764:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   3a774:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   3a784:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   3a794:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   3a7a4:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   3a7b4:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   3a7c4:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   3a7d4:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   3a7e4:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   3a7f4:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   3a804:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   3a814:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   3a824:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   3a834:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   3a844:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3a854:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   3a864:	72657473 69727453 203a676e 6562616c     sterString: labe
   3a874:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   3a884:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a894:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   3a8a4:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   3a8b4:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   3a8c4:	72656472 73756220 202d2079 68676968     rder busy - high
   3a8d4:	69727020 7469726f 53492079 73752052      priority ISR us
   3a8e4:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   3a8f4:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a904:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   3a914:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   3a924:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   3a934:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a944:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a954:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   3a964:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a974:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   3a984:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   3a994:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   3a9a4:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3a9b4:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a9c4:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a9d4:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   3a9e4:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   3a9f4:	00000072 6f636552 72656472 73756220     r...Recorder bus
   3aa04:	202d2079 68676968 69727020 7469726f     y - high priorit
   3aa14:	53492079 73752052 20676e69 63737973     y ISR using sysc
   3aa24:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   3aa34:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aa44:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3aa54:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   3aa64:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   3aa74:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aa84:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3aa94:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   3aaa4:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   3aab4:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   3aac4:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aad4:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3aae4:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   3aaf4:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   3ab04:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   3ab14:	72656472 73756220 202d2079 68676968     rder busy - high
   3ab24:	69727020 7469726f 53492079 73752052      priority ISR us
   3ab34:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   3ab44:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3ab54:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   3ab64:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   3ab74:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   3ab84:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ab94:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   3aba4:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   3abb4:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   3abc4:	76206469 65756c61 726f6620 74766520     id value for evt
   3abd4:	65646f63 00000000 6f636552 72656472     code....Recorder
   3abe4:	73756220 202d2079 68676968 69727020      busy - high pri
   3abf4:	7469726f 53492079 73752052 20676e69     ority ISR using 
   3ac04:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   3ac14:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ac24:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   3ac34:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   3ac44:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   3ac54:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   3ac64:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3ac74:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   3ac84:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   3ac94:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3aca4:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3acb4:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3acc4:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   3acd4:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   3ace4:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3acf4:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   3ad04:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3ad14:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   3ad24:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   3ad34:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   3ad44:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   3ad54:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ad64:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   3ad74:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   3ad84:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   3ad94:	6c617620 66206575 6820726f 6c646e61      value for handl
   3ada4:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   3adb4:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   3adc4:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   3add4:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   3ade4:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   3adf4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ae04:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   3ae14:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   3ae24:	76206469 65756c61 726f6620 00646920     id value for id.
   3ae34:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ae44:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   3ae54:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   3ae64:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3ae74:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3ae84:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ae94:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   3aea4:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   3aeb4:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   3aec4:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aed4:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   3aee4:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3aef4:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3af04:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3af14:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   3af24:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3af34:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3af44:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3af54:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   3af64:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3af74:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3af84:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3af94:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   3afa4:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3afb4:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3afc4:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3afd4:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   3afe4:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   3aff4:	76206469 65756c61 726f6620 6e616820     id value for han
   3b004:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   3b014:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   3b024:	69206f74 7865646e 74756f20 65646973     to index outside
   3b034:	65766520 6220746e 65666675 00002172      event buffer!..
   3b044:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3b054:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3b064:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3b074:	6a626f20 63746365 7373616c 00000000      objectclass....
   3b084:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3b094:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3b0a4:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3b0b4:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   3b0c4:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   3b0d4:	2070756b 68746977 766e6920 64696c61     kup with invalid
   3b0e4:	6a626f20 20746365 646e6168 6f20656c      object handle o
   3b0f4:	626f2072 7463656a 616c6320 00217373     r object class!.
   3b104:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b114:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   3b124:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   3b134:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   3b144:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   3b154:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   3b164:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   3b174:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   3b184:	626f2072 7463656a 73616c63 00000073     r objectclass...
   3b194:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b1a4:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   3b1b4:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   3b1c4:	756c6176 6f662065 61682072 656c646e     value for handle
   3b1d4:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   3b1e4:	20656572 65726f6d 6e616820 73656c64     ree more handles
   3b1f4:	61687420 6c61206e 61636f6c 21646574      than allocated!
   3b204:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3b214:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   3b224:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   3b234:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   3b244:	656a626f 63207463 7373616c 206e6920     object class in 
   3b254:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   3b264:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   3b274:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   3b284:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   3b294:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   3b2a4:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   3b2b4:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   3b2c4:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3b2d4:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   3b2e4:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   3b2f4:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   3b304:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   3b314:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   3b324:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b334:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   3b344:	696c6176 61762064 2065756c 20726f66     valid value for 
   3b354:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   3b364:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   3b374:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   3b384:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   3b394:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   3b3a4:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b3b4:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   3b3c4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b3d4:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   3b3e4:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   3b3f4:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   3b404:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   3b414:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   3b424:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   3b434:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   3b444:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   3b454:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b464:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   3b474:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   3b484:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   3b494:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   3b4a4:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   3b4b4:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3b4c4:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   3b4d4:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   3b4e4:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   3b4f4:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b504:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   3b514:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   3b524:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b534:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   3b544:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   3b554:	00000000 20726d54 00637653 0001fc38     ....Tmr Svc.8...
   3b564:	0001fc38 0001fc38 0001fcc6 0001fc90     8...8...........
   3b574:	0001fcba 0001fc38 0001fc38 0001fcc6     ....8...8.......
   3b584:	0001fc90                                ....

0003b588 <sd_mmc_trans_units>:
   3b588:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0003b5a4 <sd_trans_multipliers>:
   3b5a4:	00000000 0000000a 0000000c 0000000d     ................
   3b5b4:	0000000f 00000014 00000019 0000001e     ................
   3b5c4:	00000023 00000028 0000002d 00000032     #...(...-...2...
   3b5d4:	00000037 0000003c 00000046 00000050     7...<...F...P...

0003b5e4 <mmc_trans_multipliers>:
   3b5e4:	00000000 0000000a 0000000c 0000000d     ................
   3b5f4:	0000000f 00000014 0000001a 0000001e     ................
   3b604:	00000023 00000028 0000002d 00000034     #...(...-...4...
   3b614:	00000037 0000003c 00000046 00000050     7...<...F...P...
   3b624:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b634:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   3b644:	6320746c 000a646d 0000000d              lt cmd......

0003b650 <__FUNCTION__.17031>:
   3b650:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   3b660:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   3b670:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   3b680:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3b690:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   3b6a0:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   3b6b0:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   3b6c0:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   3b6d0:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   3b6e0:	66696828 64612029 73657264 75622073     (hif) address bu
   3b6f0:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   3b700:	70757272 20646574 6b636170 53207465     rrupted packet S
   3b710:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   3b720:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   3b730:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   3b740:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   3b750:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   3b760:	63207465 626c6c61 206b6361 6e207369     et callback is n
   3b770:	7220746f 73696765 65726574 00000a64     ot registered...
   3b780:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   3b790:	20746f6e 69676572 72657473 000a6465     not registered..
   3b7a0:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   3b7b0:	6e207369 7220746f 73696765 65726574     is not registere
   3b7c0:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   3b7d0:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   3b7e0:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   3b7f0:	696c6176 72672064 2070756f 000a4449     valid group ID..
   3b800:	66696828 6f682029 61207473 64207070     (hif) host app d
   3b810:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   3b820:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   3b830:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   3b840:	66696828 61462029 2065736c 65746e69     (hif) False inte
   3b850:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   3b860:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   3b870:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   3b880:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   3b890:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   3b8a0:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   3b8b0:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   3b8c0:	696c6176 72612064 656d7567 000a746e     valid argument..
   3b8d0:	20505041 75716552 65747365 69532064     APP Requested Si
   3b8e0:	6920657a 616c2073 72656772 61687420     ze is larger tha
   3b8f0:	6874206e 65722065 65766963 75622064     n the recived bu
   3b900:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3b910:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3b920:	65747365 64412064 73657264 65622073     ested Address be
   3b930:	646e6f79 65687420 63657220 64657669     yond the recived
   3b940:	66756220 20726566 72646461 20737365      buffer address 
   3b950:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   3b960:	6425203f 0000000a 00023d64 00023d34     ? %d....d=..4=..
   3b970:	00023d2c 00023d44 00023d3c 00023d5c     ,=..D=..<=..\=..
   3b980:	00023d4c 00023d54                       L=..T=..

0003b988 <__FUNCTION__.17899>:
   3b988:	5f666968 646e6573 00000000              hif_send....

0003b994 <__FUNCTION__.17909>:
   3b994:	5f666968 00727369                       hif_isr.

0003b99c <__FUNCTION__.17918>:
   3b99c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0003b9ac <__FUNCTION__.17930>:
   3b9ac:	5f666968 65636572 00657669              hif_receive.

0003b9b8 <__FUNCTION__.17946>:
   3b9b8:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   3b9c8:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   3b9d8:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   3b9e8:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   3b9f8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3ba08:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   3ba18:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   3ba28:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   3ba38:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   3ba48:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   3ba58:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   3ba68:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   3ba78:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   3ba88:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   3ba98:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   3baa8:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   3bab8:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   3bac8:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   3bad8:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   3bae8:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   3baf8:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   3bb08:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   3bb18:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   3bb28:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   3bb38:	73747365 72657020 61637320 6c73206e     ests per scan sl
   3bb48:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   3bb58:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   3bb68:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   3bb78:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   3bb88:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   3bb98:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   3bba8:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   3bbb8:	6e694d20 69726420 20726576 20726576      Min driver ver 
   3bbc8:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   3bbd8:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   3bbe8:	0000000a 303a3831 35333a39 00000000     ....18:09:35....
   3bbf8:	2079614d 32203220 00333230 76697244     May  2 2023.Driv
   3bc08:	62207265 746c6975 20746120 25097325     er built at %s.%
   3bc18:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   3bc28:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   3bc38:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   3bc48:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   3bc58:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   3bc68:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   3bc78:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   3bc88:	2079656b 65646e69 64252078 0000000a     key index %d....
   3bc98:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   3bca8:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   3bcb8:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   3bcc8:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   3bcd8:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   3bce8:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   3bcf8:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   3bd08:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   3bd18:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   3bd28:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   3bd38:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   3bd48:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   3bd58:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   3bd68:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   3bd78:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   3bd88:	66754220 0a726566 00000000               Buffer.....

0003bd94 <__FUNCTION__.17881>:
   3bd94:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0003bda0 <__FUNCTION__.17910>:
   3bda0:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0003bdb0 <__FUNCTION__.17941>:
   3bdb0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   3bdc0:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   3bdd0:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   3bde0:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   3bdf0:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3be00:	2070756b 20656874 70696863 0000000a     kup the chip....
   3be10:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3be20:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3be30:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3be40:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003be50 <__FUNCTION__.17738>:
   3be50:	70696863 6b61775f 00000065              chip_wake...

0003be5c <__FUNCTION__.17787>:
   3be5c:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   3be6c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   3be7c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   3be8c:	6e69206c 62207469 000a7375 0000000d     l init bus......
   3be9c:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   3beac:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   3bebc:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   3becc:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   3bedc:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   3beec:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   3befc:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   3bf0c:	69642068 6c626173 61662065 000a6c69     h disable fail..
   3bf1c:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   3bf2c:	696e6920 75622074 00000a73               init bus...

0003bf38 <__FUNCTION__.17785>:
   3bf38:	645f6d6e 695f7672 0074696e              nm_drv_init.

0003bf44 <__FUNCTION__.17792>:
   3bf44:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0003bf54 <crc7_syndrome_table>:
   3bf54:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   3bf64:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   3bf74:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   3bf84:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   3bf94:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   3bfa4:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   3bfb4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   3bfc4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   3bfd4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   3bfe4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   3bff4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   3c004:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   3c014:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   3c024:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   3c034:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   3c044:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   3c054:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3c064:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   3c074:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   3c084:	73756220 72726520 2e2e726f 00000a2e      bus error......
   3c094:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c0a4:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   3c0b4:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c0c4:	656c6961 61642064 72206174 6f707365     ailed data respo
   3c0d4:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   3c0e4:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   3c0f4:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   3c104:	72206573 2c646165 73756220 72726520     se read, bus err
   3c114:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   3c124:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   3c134:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   3c144:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   3c154:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   3c164:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   3c174:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   3c184:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c194:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   3c1a4:	70736572 65736e6f 61747320 28206574     response state (
   3c1b4:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3c1c4:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   3c1d4:	20646165 70736572 65736e6f 30252820     ead response (%0
   3c1e4:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   3c1f4:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3c204:	6877206e 72206e65 69646165 6420676e     n when reading d
   3c214:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   3c224:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3c234:	6877206e 72206e65 69646165 6320676e     n when reading c
   3c244:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   3c254:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c264:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   3c274:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   3c284:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   3c294:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   3c2a4:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   3c2b4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c2c4:	656c6961 61642064 72206174 6f707365     ailed data respo
   3c2d4:	2065736e 64616572 7562202c 72652073     nse read, bus er
   3c2e4:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   3c2f4:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   3c304:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   3c314:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3c324:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c334:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   3c344:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   3c354:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   3c364:	61642064 62206174 6b636f6c 69727720     d data block wri
   3c374:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   3c384:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c394:	656c6961 61642064 62206174 6b636f6c     ailed data block
   3c3a4:	63726320 69727720 202c6574 20737562      crc write, bus 
   3c3b4:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   3c3c4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c3d4:	77202c64 65746972 67657220 30252820     d, write reg (%0
   3c3e4:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   3c3f4:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   3c404:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   3c414:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   3c424:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   3c434:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c444:	656c6961 6c622064 206b636f 61746164     ailed block data
   3c454:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   3c464:	6e612074 65722064 20797274 25206425     t and retry %d %
   3c474:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   3c484:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   3c494:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   3c4a4:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   3c4b4:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   3c4c4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c4d4:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   3c4e4:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   3c4f4:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c504:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c514:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   3c524:	6572202c 69727974 7720676e 20687469     , retyring with 
   3c534:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   3c544:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c554:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c564:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   3c574:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c584:	6e726574 77206c61 65746972 6f727020     ternal write pro
   3c594:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   3c5a4:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   3c5b4:	20646d63 64616572 69686320 64692070     cmd read chip id
   3c5c4:	0a2e2e2e 00000000 0002598c 0002598c     .........Y...Y..
   3c5d4:	00025a1c 000258e0 00025926 00025948     .Z...X..&Y..HY..
   3c5e4:	000259ce 000259ce 00025a88 000258b4     .Y...Y...Z...X..
   3c5f4:	00025ae2 00025ae2 00025ae2 00025ae2     .Z...Z...Z...Z..
   3c604:	0002596a 00025eec 00025eec 00025f74     jY...^...^..t_..
   3c614:	00025e50 00025e92 00025eb0 00025f2a     P^...^...^..*_..
   3c624:	00025f2a 00025fd6 00025e28 00026026     *_..._..(^..&`..
   3c634:	00026026 00026026 00026026 00025ece     &`..&`..&`...^..

0003c644 <__FUNCTION__.17060>:
   3c644:	5f697073 00646d63                       spi_cmd.

0003c64c <__FUNCTION__.17067>:
   3c64c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0003c65c <__FUNCTION__.17076>:
   3c65c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0003c668 <__FUNCTION__.17109>:
   3c668:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   3c678:	00000000                                ....

0003c67c <__FUNCTION__.17155>:
   3c67c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0003c68c <__FUNCTION__.17167>:
   3c68c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0003c69c <__FUNCTION__.17178>:
   3c69c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0003c6ac <__FUNCTION__.17190>:
   3c6ac:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0003c6bc <__FUNCTION__.17201>:
   3c6bc:	735f6d6e 725f6970 00646165              nm_spi_read.

0003c6c8 <__FUNCTION__.17222>:
   3c6c8:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   3c6d8:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   3c6e8:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   3c6f8:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   3c708:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   3c718:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   3c728:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3c738:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   3c748:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   3c758:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   3c768:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   3c778:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   3c788:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   3c798:	22302074 00000000                       t 0"....

0003c7a0 <lun_desc>:
   3c7a0:	0002165d 000216b5 00021701 0002174d     ]...........M...
   3c7b0:	0002177d 00021801 00021891 0003c788     }...............
   3c7c0:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   3c7d0:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   3c7e0:	0002b966 0002b9e0 0002b9e0 0002b984     f...............
   3c7f0:	0002b97e 0002b98a 0002b96c 0002b990     ~.......l.......
   3c800:	0002b9c6 0002bbc8 0002bc18 0002bc18     ................
   3c810:	0002bc14 0002bbba 0002bbda 0002bbaa     ................
   3c820:	0002bbec 0002bbfe 0002bc66 0002bc94     ........f.......
   3c830:	0002bc94 0002bc90 0002bc60 0002bc6c     ........`...l...
   3c840:	0002bc5a 0002bc72 0002bc78              Z...r...x...

0003c84c <tcc_modules>:
   3c84c:	42002000 42002400 42002800              . .B.$.B.(.B

0003c858 <_tcc_gclk_ids>:
   3c858:	001b1a1a                                ....

0003c85c <_tcc_apbcmasks>:
   3c85c:	00000100 00000200 00000400              ............

0003c868 <_tcc_maxs>:
   3c868:	00ffffff 00ffffff 0000ffff              ............

0003c874 <_tcc_cc_nums>:
   3c874:	00020204                                ....

0003c878 <_tcc_ow_nums>:
   3c878:	00020408                                ....

0003c87c <_tcc_intflag>:
   3c87c:	00000001 00000002 00000004 00000008     ................
   3c88c:	00001000 00002000 00004000 00008000     ..... ...@......
   3c89c:	00010000 00020000 00040000 00080000     ................

0003c8ac <LfnOfs>:
   3c8ac:	07050301 12100e09 1c181614 0000001e     ................
   3c8bc:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   3c8cc:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   3c8dc:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   3c8ec:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   3c8fc:	20205441 00202020                       AT     .

0003c904 <excvt.4558>:
   3c904:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   3c914:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   3c924:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   3c934:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   3c944:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   3c954:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   3c964:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   3c974:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0003c984 <Tbl>:
   3c984:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   3c994:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   3c9a4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   3c9b4:	00d600ff 00f800dc 00d800a3 019200d7     ................
   3c9c4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   3c9d4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   3c9e4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   3c9f4:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   3ca04:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   3ca14:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   3ca24:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   3ca34:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   3ca44:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   3ca54:	00da00de 00d900db 00dd00fd 00b400af     ................
   3ca64:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   3ca74:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0003ca84 <tbl_lower.4308>:
   3ca84:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   3ca94:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   3caa4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   3cab4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   3cac4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   3cad4:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   3cae4:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   3caf4:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   3cb04:	01050103 01090107 010d010b 0111010f     ................
   3cb14:	01150113 01190117 011d011b 0121011f     ..............!.
   3cb24:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   3cb34:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   3cb44:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   3cb54:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   3cb64:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   3cb74:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   3cb84:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   3cb94:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   3cba4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   3cbb4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   3cbc4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   3cbd4:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   3cbe4:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   3cbf4:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   3cc04:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   3cc14:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   3cc24:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   3cc34:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   3cc44:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   3cc54:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0003cc64 <tbl_upper.4309>:
   3cc64:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   3cc74:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   3cc84:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   3cc94:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   3cca4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   3ccb4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   3ccc4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   3ccd4:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   3cce4:	01040102 01080106 010c010a 0110010e     ................
   3ccf4:	01140112 01180116 011c011a 0120011e     .............. .
   3cd04:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   3cd14:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   3cd24:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   3cd34:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   3cd44:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   3cd54:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   3cd64:	03940393 03960395 03980397 039a0399     ................
   3cd74:	039c039b 039e039d 03a0039f 03a303a1     ................
   3cd84:	03a503a4 03a703a6 03a903a8 041003aa     ................
   3cd94:	04120411 04140413 04160415 04180417     ................
   3cda4:	041a0419 041c041b 041e041d 0420041f     .............. .
   3cdb4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   3cdc4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   3cdd4:	04030402 04050404 04070406 04090408     ................
   3cde4:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   3cdf4:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   3ce04:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   3ce14:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   3ce24:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   3ce34:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   3ce44:	00030fd2 00030fd2 00030fd2 00030e60     ............`...
   3ce54:	00030fd2 00030f4a 00030fd2 00030fd2     ....J...........
   3ce64:	00030fd2 00030fd2 00030fd2 00030fd2     ................
   3ce74:	00030fd2 00030fc4 4354514d 00000000     ........MQTC....
   3ce84:	00000004 00000000 00000000 00000000     ................
   3ce94:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3ced4:	4354514d 00000000 00000004 00000000     MQTC............
	...
   3ceec:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3cf2c:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3cf3c:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3cf4c:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3cf5c:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3cf6c:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3cf7c:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3cf8c:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3cf9c:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3cfac:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3cfbc:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3cfcc:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   3cfdc:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   3cfec:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   3cffc:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   3d00c:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   3d01c:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   3d02c:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3d03c:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3d04c:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3d05c:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3d06c:	50545448 0000002f 00000d31 000330c6     HTTP/...1....0..
   3d07c:	000330c0 000330ba 000330b4 000330cc     .0...0...0...0..
   3d08c:	000330ae 000330cc 000330a8 000330a2     .0...0...0...0..
   3d09c:	000330cc 0003309c 0003309c 00033096     .0...0...0...0..
   3d0ac:	00033090 0003308a 42002000 42002400     .0...0... .B.$.B
   3d0bc:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   3d0cc:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   3d0dc:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   3d0ec:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   3d0fc:	6f727245 6e692072 61697469 697a696c     Error initializi
   3d10c:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   3d11c:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   3d12c:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3d13c:	6e6e6143 6620746f 20646e69 21554d49     Cannot find IMU!
   3d14c:	00000a0d 20554d49 6e756f66 0a0d2164     ....IMU found!..
   3d15c:	00000000 20554d49 74696e69 696c6169     ....IMU initiali
   3d16c:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
   3d17c:	6e692074 61697469 657a696c 554d4920     t initialize IMU
   3d18c:	00000a0d 70616548 66656220 2065726f     ....Heap before 
   3d19c:	72617473 676e6974 73617420 203a736b     starting tasks: 
   3d1ac:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
   3d1bc:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
   3d1cc:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3d1dc:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3d1ec:	70616548 74666120 73207265 74726174     Heap after start
   3d1fc:	20676e69 3a494c43 0d642520 0000000a     ing CLI: %d.....
   3d20c:	49464957 5341545f 0000004b 3a525245     WIFI_TASK...ERR:
   3d21c:	46495720 61742049 63206b73 646c756f      WIFI task could
   3d22c:	746f6e20 20656220 74696e69 696c6169      not be initiali
   3d23c:	2164657a 00000a0d 70616548 74666120     zed!....Heap aft
   3d24c:	73207265 74726174 20676e69 49464957     er starting WIFI
   3d25c:	6425203a 00000a0d 54204955 006b7361     : %d....UI Task.
   3d26c:	3a525245 20495520 6b736174 756f6320     ERR: UI task cou
   3d27c:	6e20646c 6220746f 6e692065 61697469     ld not be initia
   3d28c:	657a696c 0a0d2164 00000000 70616548     lized!......Heap
   3d29c:	74666120 73207265 74726174 20676e69      after starting 
   3d2ac:	54204955 3a6b7361 0d642520 0000000a     UI Task: %d.....
   3d2bc:	746e6f43 206c6f72 6b736154 00000000     Control Task....
   3d2cc:	3a525245 6e6f4320 6c6f7274 73617420     ERR: Control tas
   3d2dc:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3d2ec:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3d2fc:	70616548 74666120 73207265 74726174     Heap after start
   3d30c:	20676e69 746e6f43 206c6f72 6b736154     ing Control Task
   3d31c:	6425203a 00000a0d 6f727245 6e6f2072     : %d....Error on
   3d32c:	6d656d20 2079726f 6f6c6c61 69746163      memory allocati
   3d33c:	6f206e6f 5246206e 54524545 0d21534f     on on FREERTOS!.
   3d34c:	0000000a 6f727245 6e6f2072 61747320     ....Error on sta
   3d35c:	6f206b63 66726576 20776f6c 46206e6f     ck overflow on F
   3d36c:	52454552 21534f54 00000a0d 00035438     REERTOS!....8T..
   3d37c:	00035408 0003541a 0003535c 0003541a     .T...T..\S...T..
   3d38c:	000353fe 0003541a 0003535c 00035408     .S...T..\S...T..
   3d39c:	00035408 000353fe 0003535c 00035364     .T...S..\S..dS..
   3d3ac:	00035364 00035364 00035420 00035408     dS..dS.. T...T..
   3d3bc:	00035408 000353dc 000354c0 000353dc     .T...S...T...S..
   3d3cc:	000353fe 000353dc 000354c0 00035408     .S...S...T...T..
   3d3dc:	00035408 000353fe 000354c0 00035364     .T...S...T..dS..
   3d3ec:	00035364 00035364 000354ca 00035668     dS..dS...T..hV..
   3d3fc:	000355b8 000355b8 000355b6 0003565a     .U...U...U..ZV..
   3d40c:	0003565a 00035650 000355b6 0003565a     ZV..PV...U..ZV..
   3d41c:	00035650 0003565a 000355b6 00035660     PV..ZV...U..`V..
   3d42c:	00035660 00035660 000356f0 00036438     `V..`V...V..8d..
   3d43c:	0003641a 000363d4 000362f2 000363d4     .d...c...b...c..
   3d44c:	0003640c 000363d4 000362f2 0003641a     .d...c...b...d..
   3d45c:	0003641a 0003640c 000362f2 000362ea     .d...d...b...b..
   3d46c:	000362ea 000362ea 00036650 00036c98     .b...b..Pf...l..
   3d47c:	00036b58 00036b58 00036b54 00036c70     Xk..Xk..Tk..pl..
   3d48c:	00036c70 00036c62 00036b54 00036c70     pl..bl..Tk..pl..
   3d49c:	00036c62 00036c70 00036b54 00036c78     bl..pl..Tk..xl..
   3d4ac:	00036c78 00036c78 00036e7c              xl..xl..|n..

0003d4b8 <_global_impure_ptr>:
   3d4b8:	2000013c                                <.. 

0003d4bc <__sf_fake_stderr>:
	...

0003d4dc <__sf_fake_stdin>:
	...

0003d4fc <__sf_fake_stdout>:
	...
   3d51c:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   3d52c:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   3d53c:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   3d54c:	37363534 62613938 66656463 20200000              456789abcdef.

0003d559 <_ctype_>:
   3d559:	20202000 20202020 28282020 20282828     .         ((((( 
   3d569:	20202020 20202020 20202020 20202020                     
   3d579:	10108820 10101010 10101010 10101010      ...............
   3d589:	04040410 04040404 10040404 10101010     ................
   3d599:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3d5a9:	01010101 01010101 01010101 10101010     ................
   3d5b9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3d5c9:	02020202 02020202 02020202 10101010     ................
   3d5d9:	00000020 00000000 00000000 00000000      ...............
	...

0003d65c <_init>:
   3d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d65e:	46c0      	nop			; (mov r8, r8)
   3d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d662:	bc08      	pop	{r3}
   3d664:	469e      	mov	lr, r3
   3d666:	4770      	bx	lr

0003d668 <__init_array_start>:
   3d668:	000120dd 	.word	0x000120dd

0003d66c <_fini>:
   3d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d66e:	46c0      	nop			; (mov r8, r8)
   3d670:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d672:	bc08      	pop	{r3}
   3d674:	469e      	mov	lr, r3
   3d676:	4770      	bx	lr

0003d678 <__fini_array_start>:
   3d678:	000120b5 	.word	0x000120b5
