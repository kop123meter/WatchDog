
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002b444  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0003d444  0003d444  0002d444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000002fc  20000000  0003d44c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000057ec  20000300  0003d750  00030300  2**4
                  ALLOC
  4 .stack        00002004  20005aec  00042f3c  00030300  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
  7 .debug_info   0012c476  00000000  00000000  0003037d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000109d2  00000000  00000000  0015c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017599  00000000  00000000  0016d1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003e40  00000000  00000000  0018475e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003ab0  00000000  00000000  0018859e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002a267  00000000  00000000  0018c04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0005d9db  00000000  00000000  001b62b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c54a2  00000000  00000000  00213c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ee24  00000000  00000000  002d9134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	f0 7a 00 20 11 d1 02 00 09 d2 02 00 09 d2 02 00     .z. ............
	...
   1202c:	c5 c2 01 00 00 00 00 00 00 00 00 00 e1 c3 01 00     ................
   1203c:	29 c4 01 00 09 d2 02 00 09 d2 02 00 09 d2 02 00     )...............
   1204c:	05 92 02 00 31 87 02 00 09 d2 02 00 61 24 01 00     ....1.......a$..
   1205c:	09 d2 02 00 a5 25 01 00 a9 98 02 00 c1 98 02 00     .....%..........
   1206c:	d9 98 02 00 f1 98 02 00 09 99 02 00 21 99 02 00     ............!...
   1207c:	59 d0 02 00 6d d0 02 00 81 d0 02 00 b1 9f 01 00     Y...m...........
   1208c:	c5 9f 01 00 d9 9f 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	e9 22 01 00 09 d2 02 00 25 24 01 00 09 d2 02 00     ."......%$......
   120ac:	09 d2 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003d44c 	.word	0x0003d44c

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003d44c 	.word	0x0003d44c
   1210c:	0003d44c 	.word	0x0003d44c
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	20004590 	.word	0x20004590
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	20004594 	.word	0x20004594
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00028391 	.word	0x00028391

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	000283e5 	.word	0x000283e5

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000370 	.word	0x20000370
   12598:	200045a0 	.word	0x200045a0
   1259c:	20000320 	.word	0x20000320
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	00019f5d 	.word	0x00019f5d
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	00019eff 	.word	0x00019eff
   12aa4:	00019ea1 	.word	0x00019ea1

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00019f5d 	.word	0x00019f5d
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005a64 	.word	0x20005a64
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   12e40:	b5b0      	push	{r4, r5, r7, lr}
   12e42:	b084      	sub	sp, #16
   12e44:	af00      	add	r7, sp, #0
   12e46:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12e48:	230f      	movs	r3, #15
   12e4a:	18fc      	adds	r4, r7, r3
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	0018      	movs	r0, r3
   12e50:	4b20      	ldr	r3, [pc, #128]	; (12ed4 <bme680_init+0x94>)
   12e52:	4798      	blx	r3
   12e54:	0003      	movs	r3, r0
   12e56:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12e58:	230f      	movs	r3, #15
   12e5a:	18fb      	adds	r3, r7, r3
   12e5c:	781b      	ldrb	r3, [r3, #0]
   12e5e:	b25b      	sxtb	r3, r3
   12e60:	2b00      	cmp	r3, #0
   12e62:	d12e      	bne.n	12ec2 <bme680_init+0x82>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   12e64:	230f      	movs	r3, #15
   12e66:	18fc      	adds	r4, r7, r3
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	0018      	movs	r0, r3
   12e6c:	4b1a      	ldr	r3, [pc, #104]	; (12ed8 <bme680_init+0x98>)
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   12e74:	230f      	movs	r3, #15
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781b      	ldrb	r3, [r3, #0]
   12e7a:	b25b      	sxtb	r3, r3
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d120      	bne.n	12ec2 <bme680_init+0x82>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   12e80:	6879      	ldr	r1, [r7, #4]
   12e82:	230f      	movs	r3, #15
   12e84:	18fc      	adds	r4, r7, r3
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	2201      	movs	r2, #1
   12e8a:	20d0      	movs	r0, #208	; 0xd0
   12e8c:	4d13      	ldr	r5, [pc, #76]	; (12edc <bme680_init+0x9c>)
   12e8e:	47a8      	blx	r5
   12e90:	0003      	movs	r3, r0
   12e92:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   12e94:	230f      	movs	r3, #15
   12e96:	18fb      	adds	r3, r7, r3
   12e98:	781b      	ldrb	r3, [r3, #0]
   12e9a:	b25b      	sxtb	r3, r3
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d110      	bne.n	12ec2 <bme680_init+0x82>
				if (dev->chip_id == BME680_CHIP_ID) {
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	2b61      	cmp	r3, #97	; 0x61
   12ea6:	d108      	bne.n	12eba <bme680_init+0x7a>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
   12ea8:	230f      	movs	r3, #15
   12eaa:	18fc      	adds	r4, r7, r3
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	0018      	movs	r0, r3
   12eb0:	4b0b      	ldr	r3, [pc, #44]	; (12ee0 <bme680_init+0xa0>)
   12eb2:	4798      	blx	r3
   12eb4:	0003      	movs	r3, r0
   12eb6:	7023      	strb	r3, [r4, #0]
   12eb8:	e003      	b.n	12ec2 <bme680_init+0x82>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   12eba:	230f      	movs	r3, #15
   12ebc:	18fb      	adds	r3, r7, r3
   12ebe:	22fd      	movs	r2, #253	; 0xfd
   12ec0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return rslt;
   12ec2:	230f      	movs	r3, #15
   12ec4:	18fb      	adds	r3, r7, r3
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b25b      	sxtb	r3, r3
}
   12eca:	0018      	movs	r0, r3
   12ecc:	46bd      	mov	sp, r7
   12ece:	b004      	add	sp, #16
   12ed0:	bdb0      	pop	{r4, r5, r7, pc}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	0001482f 	.word	0x0001482f
   12ed8:	00013119 	.word	0x00013119
   12edc:	00012ee5 	.word	0x00012ee5
   12ee0:	00013951 	.word	0x00013951

00012ee4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   12ee4:	b5b0      	push	{r4, r5, r7, lr}
   12ee6:	b086      	sub	sp, #24
   12ee8:	af00      	add	r7, sp, #0
   12eea:	60b9      	str	r1, [r7, #8]
   12eec:	0011      	movs	r1, r2
   12eee:	607b      	str	r3, [r7, #4]
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	1c02      	adds	r2, r0, #0
   12ef6:	701a      	strb	r2, [r3, #0]
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	1c0a      	adds	r2, r1, #0
   12efe:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12f00:	2317      	movs	r3, #23
   12f02:	18fc      	adds	r4, r7, r3
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	0018      	movs	r0, r3
   12f08:	4b25      	ldr	r3, [pc, #148]	; (12fa0 <bme680_get_regs+0xbc>)
   12f0a:	4798      	blx	r3
   12f0c:	0003      	movs	r3, r0
   12f0e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12f10:	2317      	movs	r3, #23
   12f12:	18fb      	adds	r3, r7, r3
   12f14:	781b      	ldrb	r3, [r3, #0]
   12f16:	b25b      	sxtb	r3, r3
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d139      	bne.n	12f90 <bme680_get_regs+0xac>
		if (dev->intf == BME680_SPI_INTF) {
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	789b      	ldrb	r3, [r3, #2]
   12f20:	2b00      	cmp	r3, #0
   12f22:	d11a      	bne.n	12f5a <bme680_get_regs+0x76>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   12f24:	2317      	movs	r3, #23
   12f26:	18fc      	adds	r4, r7, r3
   12f28:	687a      	ldr	r2, [r7, #4]
   12f2a:	230f      	movs	r3, #15
   12f2c:	18fb      	adds	r3, r7, r3
   12f2e:	781b      	ldrb	r3, [r3, #0]
   12f30:	0011      	movs	r1, r2
   12f32:	0018      	movs	r0, r3
   12f34:	4b1b      	ldr	r3, [pc, #108]	; (12fa4 <bme680_get_regs+0xc0>)
   12f36:	4798      	blx	r3
   12f38:	0003      	movs	r3, r0
   12f3a:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK)
   12f3c:	2317      	movs	r3, #23
   12f3e:	18fb      	adds	r3, r7, r3
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	b25b      	sxtb	r3, r3
   12f44:	2b00      	cmp	r3, #0
   12f46:	d108      	bne.n	12f5a <bme680_get_regs+0x76>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   12f48:	230f      	movs	r3, #15
   12f4a:	18fb      	adds	r3, r7, r3
   12f4c:	220f      	movs	r2, #15
   12f4e:	18ba      	adds	r2, r7, r2
   12f50:	7812      	ldrb	r2, [r2, #0]
   12f52:	2180      	movs	r1, #128	; 0x80
   12f54:	4249      	negs	r1, r1
   12f56:	430a      	orrs	r2, r1
   12f58:	701a      	strb	r2, [r3, #0]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   12f5a:	687b      	ldr	r3, [r7, #4]
   12f5c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	7858      	ldrb	r0, [r3, #1]
   12f62:	230c      	movs	r3, #12
   12f64:	18fb      	adds	r3, r7, r3
   12f66:	881d      	ldrh	r5, [r3, #0]
   12f68:	68ba      	ldr	r2, [r7, #8]
   12f6a:	230f      	movs	r3, #15
   12f6c:	18fb      	adds	r3, r7, r3
   12f6e:	7819      	ldrb	r1, [r3, #0]
   12f70:	002b      	movs	r3, r5
   12f72:	47a0      	blx	r4
   12f74:	0003      	movs	r3, r0
   12f76:	0019      	movs	r1, r3
   12f78:	687b      	ldr	r3, [r7, #4]
   12f7a:	2254      	movs	r2, #84	; 0x54
   12f7c:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	2254      	movs	r2, #84	; 0x54
   12f82:	569b      	ldrsb	r3, [r3, r2]
   12f84:	2b00      	cmp	r3, #0
   12f86:	d003      	beq.n	12f90 <bme680_get_regs+0xac>
			rslt = BME680_E_COM_FAIL;
   12f88:	2317      	movs	r3, #23
   12f8a:	18fb      	adds	r3, r7, r3
   12f8c:	22fe      	movs	r2, #254	; 0xfe
   12f8e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   12f90:	2317      	movs	r3, #23
   12f92:	18fb      	adds	r3, r7, r3
   12f94:	781b      	ldrb	r3, [r3, #0]
   12f96:	b25b      	sxtb	r3, r3
}
   12f98:	0018      	movs	r0, r3
   12f9a:	46bd      	mov	sp, r7
   12f9c:	b006      	add	sp, #24
   12f9e:	bdb0      	pop	{r4, r5, r7, pc}
   12fa0:	0001482f 	.word	0x0001482f
   12fa4:	00014611 	.word	0x00014611

00012fa8 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   12fa8:	b5b0      	push	{r4, r5, r7, lr}
   12faa:	b090      	sub	sp, #64	; 0x40
   12fac:	af00      	add	r7, sp, #0
   12fae:	60f8      	str	r0, [r7, #12]
   12fb0:	60b9      	str	r1, [r7, #8]
   12fb2:	603b      	str	r3, [r7, #0]
   12fb4:	1dfb      	adds	r3, r7, #7
   12fb6:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   12fb8:	2314      	movs	r3, #20
   12fba:	18fb      	adds	r3, r7, r3
   12fbc:	0018      	movs	r0, r3
   12fbe:	2328      	movs	r3, #40	; 0x28
   12fc0:	001a      	movs	r2, r3
   12fc2:	2100      	movs	r1, #0
   12fc4:	4b51      	ldr	r3, [pc, #324]	; (1310c <bme680_set_regs+0x164>)
   12fc6:	4798      	blx	r3
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12fc8:	233f      	movs	r3, #63	; 0x3f
   12fca:	18fc      	adds	r4, r7, r3
   12fcc:	683b      	ldr	r3, [r7, #0]
   12fce:	0018      	movs	r0, r3
   12fd0:	4b4f      	ldr	r3, [pc, #316]	; (13110 <bme680_set_regs+0x168>)
   12fd2:	4798      	blx	r3
   12fd4:	0003      	movs	r3, r0
   12fd6:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12fd8:	233f      	movs	r3, #63	; 0x3f
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	781b      	ldrb	r3, [r3, #0]
   12fde:	b25b      	sxtb	r3, r3
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	d000      	beq.n	12fe6 <bme680_set_regs+0x3e>
   12fe4:	e08a      	b.n	130fc <bme680_set_regs+0x154>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   12fe6:	1dfb      	adds	r3, r7, #7
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d100      	bne.n	12ff0 <bme680_set_regs+0x48>
   12fee:	e07f      	b.n	130f0 <bme680_set_regs+0x148>
   12ff0:	1dfb      	adds	r3, r7, #7
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	2b13      	cmp	r3, #19
   12ff6:	d900      	bls.n	12ffa <bme680_set_regs+0x52>
   12ff8:	e07a      	b.n	130f0 <bme680_set_regs+0x148>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   12ffa:	233c      	movs	r3, #60	; 0x3c
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	2200      	movs	r2, #0
   13000:	801a      	strh	r2, [r3, #0]
   13002:	e045      	b.n	13090 <bme680_set_regs+0xe8>
				if (dev->intf == BME680_SPI_INTF) {
   13004:	683b      	ldr	r3, [r7, #0]
   13006:	789b      	ldrb	r3, [r3, #2]
   13008:	2b00      	cmp	r3, #0
   1300a:	d11f      	bne.n	1304c <bme680_set_regs+0xa4>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   1300c:	233c      	movs	r3, #60	; 0x3c
   1300e:	18fb      	adds	r3, r7, r3
   13010:	881b      	ldrh	r3, [r3, #0]
   13012:	68fa      	ldr	r2, [r7, #12]
   13014:	18d3      	adds	r3, r2, r3
   13016:	781b      	ldrb	r3, [r3, #0]
   13018:	223f      	movs	r2, #63	; 0x3f
   1301a:	18bc      	adds	r4, r7, r2
   1301c:	683a      	ldr	r2, [r7, #0]
   1301e:	0011      	movs	r1, r2
   13020:	0018      	movs	r0, r3
   13022:	4b3c      	ldr	r3, [pc, #240]	; (13114 <bme680_set_regs+0x16c>)
   13024:	4798      	blx	r3
   13026:	0003      	movs	r3, r0
   13028:	7023      	strb	r3, [r4, #0]
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   1302a:	233c      	movs	r3, #60	; 0x3c
   1302c:	18fb      	adds	r3, r7, r3
   1302e:	881b      	ldrh	r3, [r3, #0]
   13030:	005b      	lsls	r3, r3, #1
   13032:	223c      	movs	r2, #60	; 0x3c
   13034:	18ba      	adds	r2, r7, r2
   13036:	8812      	ldrh	r2, [r2, #0]
   13038:	68f9      	ldr	r1, [r7, #12]
   1303a:	188a      	adds	r2, r1, r2
   1303c:	7812      	ldrb	r2, [r2, #0]
   1303e:	217f      	movs	r1, #127	; 0x7f
   13040:	400a      	ands	r2, r1
   13042:	b2d1      	uxtb	r1, r2
   13044:	2214      	movs	r2, #20
   13046:	18ba      	adds	r2, r7, r2
   13048:	54d1      	strb	r1, [r2, r3]
   1304a:	e00c      	b.n	13066 <bme680_set_regs+0xbe>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   1304c:	233c      	movs	r3, #60	; 0x3c
   1304e:	18fb      	adds	r3, r7, r3
   13050:	881b      	ldrh	r3, [r3, #0]
   13052:	005b      	lsls	r3, r3, #1
   13054:	223c      	movs	r2, #60	; 0x3c
   13056:	18ba      	adds	r2, r7, r2
   13058:	8812      	ldrh	r2, [r2, #0]
   1305a:	68f9      	ldr	r1, [r7, #12]
   1305c:	188a      	adds	r2, r1, r2
   1305e:	7811      	ldrb	r1, [r2, #0]
   13060:	2214      	movs	r2, #20
   13062:	18ba      	adds	r2, r7, r2
   13064:	54d1      	strb	r1, [r2, r3]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   13066:	233c      	movs	r3, #60	; 0x3c
   13068:	18fb      	adds	r3, r7, r3
   1306a:	881b      	ldrh	r3, [r3, #0]
   1306c:	005b      	lsls	r3, r3, #1
   1306e:	3301      	adds	r3, #1
   13070:	223c      	movs	r2, #60	; 0x3c
   13072:	18ba      	adds	r2, r7, r2
   13074:	8812      	ldrh	r2, [r2, #0]
   13076:	68b9      	ldr	r1, [r7, #8]
   13078:	188a      	adds	r2, r1, r2
   1307a:	7811      	ldrb	r1, [r2, #0]
   1307c:	2214      	movs	r2, #20
   1307e:	18ba      	adds	r2, r7, r2
   13080:	54d1      	strb	r1, [r2, r3]
			for (index = 0; index < len; index++) {
   13082:	233c      	movs	r3, #60	; 0x3c
   13084:	18fb      	adds	r3, r7, r3
   13086:	881a      	ldrh	r2, [r3, #0]
   13088:	233c      	movs	r3, #60	; 0x3c
   1308a:	18fb      	adds	r3, r7, r3
   1308c:	3201      	adds	r2, #1
   1308e:	801a      	strh	r2, [r3, #0]
   13090:	1dfb      	adds	r3, r7, #7
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	b29b      	uxth	r3, r3
   13096:	223c      	movs	r2, #60	; 0x3c
   13098:	18ba      	adds	r2, r7, r2
   1309a:	8812      	ldrh	r2, [r2, #0]
   1309c:	429a      	cmp	r2, r3
   1309e:	d3b1      	bcc.n	13004 <bme680_set_regs+0x5c>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   130a0:	233f      	movs	r3, #63	; 0x3f
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	781b      	ldrb	r3, [r3, #0]
   130a6:	b25b      	sxtb	r3, r3
   130a8:	2b00      	cmp	r3, #0
   130aa:	d126      	bne.n	130fa <bme680_set_regs+0x152>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   130ac:	683b      	ldr	r3, [r7, #0]
   130ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   130b0:	683b      	ldr	r3, [r7, #0]
   130b2:	7858      	ldrb	r0, [r3, #1]
   130b4:	2314      	movs	r3, #20
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	7819      	ldrb	r1, [r3, #0]
   130ba:	1dfb      	adds	r3, r7, #7
   130bc:	781b      	ldrb	r3, [r3, #0]
   130be:	b29b      	uxth	r3, r3
   130c0:	18db      	adds	r3, r3, r3
   130c2:	b29b      	uxth	r3, r3
   130c4:	3b01      	subs	r3, #1
   130c6:	b29d      	uxth	r5, r3
   130c8:	2314      	movs	r3, #20
   130ca:	18fb      	adds	r3, r7, r3
   130cc:	1c5a      	adds	r2, r3, #1
   130ce:	002b      	movs	r3, r5
   130d0:	47a0      	blx	r4
   130d2:	0003      	movs	r3, r0
   130d4:	0019      	movs	r1, r3
   130d6:	683b      	ldr	r3, [r7, #0]
   130d8:	2254      	movs	r2, #84	; 0x54
   130da:	5499      	strb	r1, [r3, r2]
				if (dev->com_rslt != 0)
   130dc:	683b      	ldr	r3, [r7, #0]
   130de:	2254      	movs	r2, #84	; 0x54
   130e0:	569b      	ldrsb	r3, [r3, r2]
   130e2:	2b00      	cmp	r3, #0
   130e4:	d009      	beq.n	130fa <bme680_set_regs+0x152>
					rslt = BME680_E_COM_FAIL;
   130e6:	233f      	movs	r3, #63	; 0x3f
   130e8:	18fb      	adds	r3, r7, r3
   130ea:	22fe      	movs	r2, #254	; 0xfe
   130ec:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK) {
   130ee:	e004      	b.n	130fa <bme680_set_regs+0x152>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   130f0:	233f      	movs	r3, #63	; 0x3f
   130f2:	18fb      	adds	r3, r7, r3
   130f4:	22fc      	movs	r2, #252	; 0xfc
   130f6:	701a      	strb	r2, [r3, #0]
   130f8:	e000      	b.n	130fc <bme680_set_regs+0x154>
			if (rslt == BME680_OK) {
   130fa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return rslt;
   130fc:	233f      	movs	r3, #63	; 0x3f
   130fe:	18fb      	adds	r3, r7, r3
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	b25b      	sxtb	r3, r3
}
   13104:	0018      	movs	r0, r3
   13106:	46bd      	mov	sp, r7
   13108:	b010      	add	sp, #64	; 0x40
   1310a:	bdb0      	pop	{r4, r5, r7, pc}
   1310c:	0003781f 	.word	0x0003781f
   13110:	0001482f 	.word	0x0001482f
   13114:	00014611 	.word	0x00014611

00013118 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   13118:	b5b0      	push	{r4, r5, r7, lr}
   1311a:	b084      	sub	sp, #16
   1311c:	af00      	add	r7, sp, #0
   1311e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   13120:	230e      	movs	r3, #14
   13122:	18fb      	adds	r3, r7, r3
   13124:	22e0      	movs	r2, #224	; 0xe0
   13126:	701a      	strb	r2, [r3, #0]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   13128:	230d      	movs	r3, #13
   1312a:	18fb      	adds	r3, r7, r3
   1312c:	22b6      	movs	r2, #182	; 0xb6
   1312e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13130:	230f      	movs	r3, #15
   13132:	18fc      	adds	r4, r7, r3
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b22      	ldr	r3, [pc, #136]	; (131c4 <bme680_soft_reset+0xac>)
   1313a:	4798      	blx	r3
   1313c:	0003      	movs	r3, r0
   1313e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13140:	230f      	movs	r3, #15
   13142:	18fb      	adds	r3, r7, r3
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	b25b      	sxtb	r3, r3
   13148:	2b00      	cmp	r3, #0
   1314a:	d133      	bne.n	131b4 <bme680_soft_reset+0x9c>
		if (dev->intf == BME680_SPI_INTF)
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	789b      	ldrb	r3, [r3, #2]
   13150:	2b00      	cmp	r3, #0
   13152:	d107      	bne.n	13164 <bme680_soft_reset+0x4c>
			rslt = get_mem_page(dev);
   13154:	230f      	movs	r3, #15
   13156:	18fc      	adds	r4, r7, r3
   13158:	687b      	ldr	r3, [r7, #4]
   1315a:	0018      	movs	r0, r3
   1315c:	4b1a      	ldr	r3, [pc, #104]	; (131c8 <bme680_soft_reset+0xb0>)
   1315e:	4798      	blx	r3
   13160:	0003      	movs	r3, r0
   13162:	7023      	strb	r3, [r4, #0]

		/* Reset the device */
		if (rslt == BME680_OK) {
   13164:	230f      	movs	r3, #15
   13166:	18fb      	adds	r3, r7, r3
   13168:	781b      	ldrb	r3, [r3, #0]
   1316a:	b25b      	sxtb	r3, r3
   1316c:	2b00      	cmp	r3, #0
   1316e:	d121      	bne.n	131b4 <bme680_soft_reset+0x9c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   13170:	230f      	movs	r3, #15
   13172:	18fc      	adds	r4, r7, r3
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	220d      	movs	r2, #13
   13178:	18b9      	adds	r1, r7, r2
   1317a:	220e      	movs	r2, #14
   1317c:	18b8      	adds	r0, r7, r2
   1317e:	2201      	movs	r2, #1
   13180:	4d12      	ldr	r5, [pc, #72]	; (131cc <bme680_soft_reset+0xb4>)
   13182:	47a8      	blx	r5
   13184:	0003      	movs	r3, r0
   13186:	7023      	strb	r3, [r4, #0]
			/* Wait for 5ms */
			dev->delay_ms_bme(BME680_RESET_PERIOD);
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1318c:	200a      	movs	r0, #10
   1318e:	4798      	blx	r3

			if (rslt == BME680_OK) {
   13190:	230f      	movs	r3, #15
   13192:	18fb      	adds	r3, r7, r3
   13194:	781b      	ldrb	r3, [r3, #0]
   13196:	b25b      	sxtb	r3, r3
   13198:	2b00      	cmp	r3, #0
   1319a:	d10b      	bne.n	131b4 <bme680_soft_reset+0x9c>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   1319c:	687b      	ldr	r3, [r7, #4]
   1319e:	789b      	ldrb	r3, [r3, #2]
   131a0:	2b00      	cmp	r3, #0
   131a2:	d107      	bne.n	131b4 <bme680_soft_reset+0x9c>
					rslt = get_mem_page(dev);
   131a4:	230f      	movs	r3, #15
   131a6:	18fc      	adds	r4, r7, r3
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	0018      	movs	r0, r3
   131ac:	4b06      	ldr	r3, [pc, #24]	; (131c8 <bme680_soft_reset+0xb0>)
   131ae:	4798      	blx	r3
   131b0:	0003      	movs	r3, r0
   131b2:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return rslt;
   131b4:	230f      	movs	r3, #15
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	781b      	ldrb	r3, [r3, #0]
   131ba:	b25b      	sxtb	r3, r3
}
   131bc:	0018      	movs	r0, r3
   131be:	46bd      	mov	sp, r7
   131c0:	b004      	add	sp, #16
   131c2:	bdb0      	pop	{r4, r5, r7, pc}
   131c4:	0001482f 	.word	0x0001482f
   131c8:	0001471d 	.word	0x0001471d
   131cc:	00012fa9 	.word	0x00012fa9

000131d0 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   131d0:	b5b0      	push	{r4, r5, r7, lr}
   131d2:	b088      	sub	sp, #32
   131d4:	af00      	add	r7, sp, #0
   131d6:	0002      	movs	r2, r0
   131d8:	6039      	str	r1, [r7, #0]
   131da:	1dbb      	adds	r3, r7, #6
   131dc:	801a      	strh	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   131de:	231b      	movs	r3, #27
   131e0:	18fb      	adds	r3, r7, r3
   131e2:	2200      	movs	r2, #0
   131e4:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
   131e6:	231e      	movs	r3, #30
   131e8:	18fb      	adds	r3, r7, r3
   131ea:	2200      	movs	r2, #0
   131ec:	701a      	strb	r2, [r3, #0]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131ee:	2314      	movs	r3, #20
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	0018      	movs	r0, r3
   131f4:	2306      	movs	r3, #6
   131f6:	001a      	movs	r2, r3
   131f8:	2100      	movs	r1, #0
   131fa:	4be7      	ldr	r3, [pc, #924]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   131fc:	4798      	blx	r3
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131fe:	230c      	movs	r3, #12
   13200:	18fb      	adds	r3, r7, r3
   13202:	0018      	movs	r0, r3
   13204:	2306      	movs	r3, #6
   13206:	001a      	movs	r2, r3
   13208:	2100      	movs	r1, #0
   1320a:	4be3      	ldr	r3, [pc, #908]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   1320c:	4798      	blx	r3
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   1320e:	231d      	movs	r3, #29
   13210:	18fb      	adds	r3, r7, r3
   13212:	683a      	ldr	r2, [r7, #0]
   13214:	2144      	movs	r1, #68	; 0x44
   13216:	5c52      	ldrb	r2, [r2, r1]
   13218:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1321a:	231f      	movs	r3, #31
   1321c:	18fc      	adds	r4, r7, r3
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	0018      	movs	r0, r3
   13222:	4bde      	ldr	r3, [pc, #888]	; (1359c <bme680_set_sensor_settings+0x3cc>)
   13224:	4798      	blx	r3
   13226:	0003      	movs	r3, r0
   13228:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1322a:	231f      	movs	r3, #31
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	b25b      	sxtb	r3, r3
   13232:	2b00      	cmp	r3, #0
   13234:	d000      	beq.n	13238 <bme680_set_sensor_settings+0x68>
   13236:	e249      	b.n	136cc <bme680_set_sensor_settings+0x4fc>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   13238:	1dbb      	adds	r3, r7, #6
   1323a:	881b      	ldrh	r3, [r3, #0]
   1323c:	2208      	movs	r2, #8
   1323e:	4013      	ands	r3, r2
   13240:	d007      	beq.n	13252 <bme680_set_sensor_settings+0x82>
			rslt = set_gas_config(dev);
   13242:	231f      	movs	r3, #31
   13244:	18fc      	adds	r4, r7, r3
   13246:	683b      	ldr	r3, [r7, #0]
   13248:	0018      	movs	r0, r3
   1324a:	4bd5      	ldr	r3, [pc, #852]	; (135a0 <bme680_set_sensor_settings+0x3d0>)
   1324c:	4798      	blx	r3
   1324e:	0003      	movs	r3, r0
   13250:	7023      	strb	r3, [r4, #0]

		dev->power_mode = BME680_SLEEP_MODE;
   13252:	683b      	ldr	r3, [r7, #0]
   13254:	2244      	movs	r2, #68	; 0x44
   13256:	2100      	movs	r1, #0
   13258:	5499      	strb	r1, [r3, r2]
		if (rslt == BME680_OK)
   1325a:	231f      	movs	r3, #31
   1325c:	18fb      	adds	r3, r7, r3
   1325e:	781b      	ldrb	r3, [r3, #0]
   13260:	b25b      	sxtb	r3, r3
   13262:	2b00      	cmp	r3, #0
   13264:	d107      	bne.n	13276 <bme680_set_sensor_settings+0xa6>
			rslt = bme680_set_sensor_mode(dev);
   13266:	231f      	movs	r3, #31
   13268:	18fc      	adds	r4, r7, r3
   1326a:	683b      	ldr	r3, [r7, #0]
   1326c:	0018      	movs	r0, r3
   1326e:	4bcd      	ldr	r3, [pc, #820]	; (135a4 <bme680_set_sensor_settings+0x3d4>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	7023      	strb	r3, [r4, #0]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   13276:	1dbb      	adds	r3, r7, #6
   13278:	881b      	ldrh	r3, [r3, #0]
   1327a:	2210      	movs	r2, #16
   1327c:	4013      	ands	r3, r2
   1327e:	d056      	beq.n	1332e <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	333b      	adds	r3, #59	; 0x3b
   13284:	0018      	movs	r0, r3
   13286:	231f      	movs	r3, #31
   13288:	18fc      	adds	r4, r7, r3
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	2207      	movs	r2, #7
   1328e:	2100      	movs	r1, #0
   13290:	4dc5      	ldr	r5, [pc, #788]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   13292:	47a8      	blx	r5
   13294:	0003      	movs	r3, r0
   13296:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
   13298:	231c      	movs	r3, #28
   1329a:	18fb      	adds	r3, r7, r3
   1329c:	2275      	movs	r2, #117	; 0x75
   1329e:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   132a0:	231f      	movs	r3, #31
   132a2:	18fb      	adds	r3, r7, r3
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	b25b      	sxtb	r3, r3
   132a8:	2b00      	cmp	r3, #0
   132aa:	d10d      	bne.n	132c8 <bme680_set_sensor_settings+0xf8>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   132ac:	231f      	movs	r3, #31
   132ae:	18fc      	adds	r4, r7, r3
   132b0:	683a      	ldr	r2, [r7, #0]
   132b2:	231b      	movs	r3, #27
   132b4:	18f9      	adds	r1, r7, r3
   132b6:	231c      	movs	r3, #28
   132b8:	18fb      	adds	r3, r7, r3
   132ba:	7818      	ldrb	r0, [r3, #0]
   132bc:	0013      	movs	r3, r2
   132be:	2201      	movs	r2, #1
   132c0:	4dba      	ldr	r5, [pc, #744]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   132c2:	47a8      	blx	r5
   132c4:	0003      	movs	r3, r0
   132c6:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_FILTER_SEL)
   132c8:	1dbb      	adds	r3, r7, #6
   132ca:	881b      	ldrh	r3, [r3, #0]
   132cc:	2210      	movs	r2, #16
   132ce:	4013      	ands	r3, r2
   132d0:	d014      	beq.n	132fc <bme680_set_sensor_settings+0x12c>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   132d2:	231b      	movs	r3, #27
   132d4:	18fb      	adds	r3, r7, r3
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b25b      	sxtb	r3, r3
   132da:	221c      	movs	r2, #28
   132dc:	4393      	bics	r3, r2
   132de:	b25a      	sxtb	r2, r3
   132e0:	683b      	ldr	r3, [r7, #0]
   132e2:	213b      	movs	r1, #59	; 0x3b
   132e4:	5c5b      	ldrb	r3, [r3, r1]
   132e6:	009b      	lsls	r3, r3, #2
   132e8:	b25b      	sxtb	r3, r3
   132ea:	211c      	movs	r1, #28
   132ec:	400b      	ands	r3, r1
   132ee:	b25b      	sxtb	r3, r3
   132f0:	4313      	orrs	r3, r2
   132f2:	b25b      	sxtb	r3, r3
   132f4:	b2da      	uxtb	r2, r3
   132f6:	231b      	movs	r3, #27
   132f8:	18fb      	adds	r3, r7, r3
   132fa:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   132fc:	231e      	movs	r3, #30
   132fe:	18fb      	adds	r3, r7, r3
   13300:	781b      	ldrb	r3, [r3, #0]
   13302:	2214      	movs	r2, #20
   13304:	18ba      	adds	r2, r7, r2
   13306:	211c      	movs	r1, #28
   13308:	1879      	adds	r1, r7, r1
   1330a:	7809      	ldrb	r1, [r1, #0]
   1330c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1330e:	231e      	movs	r3, #30
   13310:	18fb      	adds	r3, r7, r3
   13312:	781b      	ldrb	r3, [r3, #0]
   13314:	221b      	movs	r2, #27
   13316:	18ba      	adds	r2, r7, r2
   13318:	7811      	ldrb	r1, [r2, #0]
   1331a:	220c      	movs	r2, #12
   1331c:	18ba      	adds	r2, r7, r2
   1331e:	54d1      	strb	r1, [r2, r3]
			count++;
   13320:	231e      	movs	r3, #30
   13322:	18fb      	adds	r3, r7, r3
   13324:	781a      	ldrb	r2, [r3, #0]
   13326:	231e      	movs	r3, #30
   13328:	18fb      	adds	r3, r7, r3
   1332a:	3201      	adds	r2, #1
   1332c:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   1332e:	1dbb      	adds	r3, r7, #6
   13330:	881b      	ldrh	r3, [r3, #0]
   13332:	2220      	movs	r2, #32
   13334:	4013      	ands	r3, r2
   13336:	d050      	beq.n	133da <bme680_set_sensor_settings+0x20a>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   13338:	683b      	ldr	r3, [r7, #0]
   1333a:	333d      	adds	r3, #61	; 0x3d
   1333c:	0018      	movs	r0, r3
   1333e:	231f      	movs	r3, #31
   13340:	18fc      	adds	r4, r7, r3
   13342:	683b      	ldr	r3, [r7, #0]
   13344:	2208      	movs	r2, #8
   13346:	2100      	movs	r1, #0
   13348:	4d97      	ldr	r5, [pc, #604]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1334a:	47a8      	blx	r5
   1334c:	0003      	movs	r3, r0
   1334e:	7023      	strb	r3, [r4, #0]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
   13350:	231c      	movs	r3, #28
   13352:	18fb      	adds	r3, r7, r3
   13354:	2270      	movs	r2, #112	; 0x70
   13356:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13358:	231f      	movs	r3, #31
   1335a:	18fb      	adds	r3, r7, r3
   1335c:	781b      	ldrb	r3, [r3, #0]
   1335e:	b25b      	sxtb	r3, r3
   13360:	2b00      	cmp	r3, #0
   13362:	d10d      	bne.n	13380 <bme680_set_sensor_settings+0x1b0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13364:	231f      	movs	r3, #31
   13366:	18fc      	adds	r4, r7, r3
   13368:	683a      	ldr	r2, [r7, #0]
   1336a:	231b      	movs	r3, #27
   1336c:	18f9      	adds	r1, r7, r3
   1336e:	231c      	movs	r3, #28
   13370:	18fb      	adds	r3, r7, r3
   13372:	7818      	ldrb	r0, [r3, #0]
   13374:	0013      	movs	r3, r2
   13376:	2201      	movs	r2, #1
   13378:	4d8c      	ldr	r5, [pc, #560]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1337a:	47a8      	blx	r5
   1337c:	0003      	movs	r3, r0
   1337e:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   13380:	231b      	movs	r3, #27
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	b25b      	sxtb	r3, r3
   13388:	2208      	movs	r2, #8
   1338a:	4393      	bics	r3, r2
   1338c:	b25a      	sxtb	r2, r3
   1338e:	683b      	ldr	r3, [r7, #0]
   13390:	213d      	movs	r1, #61	; 0x3d
   13392:	5c5b      	ldrb	r3, [r3, r1]
   13394:	b25b      	sxtb	r3, r3
   13396:	2108      	movs	r1, #8
   13398:	400b      	ands	r3, r1
   1339a:	b25b      	sxtb	r3, r3
   1339c:	4313      	orrs	r3, r2
   1339e:	b25b      	sxtb	r3, r3
   133a0:	b2da      	uxtb	r2, r3
   133a2:	231b      	movs	r3, #27
   133a4:	18fb      	adds	r3, r7, r3
   133a6:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   133a8:	231e      	movs	r3, #30
   133aa:	18fb      	adds	r3, r7, r3
   133ac:	781b      	ldrb	r3, [r3, #0]
   133ae:	2214      	movs	r2, #20
   133b0:	18ba      	adds	r2, r7, r2
   133b2:	211c      	movs	r1, #28
   133b4:	1879      	adds	r1, r7, r1
   133b6:	7809      	ldrb	r1, [r1, #0]
   133b8:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   133ba:	231e      	movs	r3, #30
   133bc:	18fb      	adds	r3, r7, r3
   133be:	781b      	ldrb	r3, [r3, #0]
   133c0:	221b      	movs	r2, #27
   133c2:	18ba      	adds	r2, r7, r2
   133c4:	7811      	ldrb	r1, [r2, #0]
   133c6:	220c      	movs	r2, #12
   133c8:	18ba      	adds	r2, r7, r2
   133ca:	54d1      	strb	r1, [r2, r3]
			count++;
   133cc:	231e      	movs	r3, #30
   133ce:	18fb      	adds	r3, r7, r3
   133d0:	781a      	ldrb	r2, [r3, #0]
   133d2:	231e      	movs	r3, #30
   133d4:	18fb      	adds	r3, r7, r3
   133d6:	3201      	adds	r2, #1
   133d8:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   133da:	1dbb      	adds	r3, r7, #6
   133dc:	881b      	ldrh	r3, [r3, #0]
   133de:	2203      	movs	r2, #3
   133e0:	4013      	ands	r3, r2
   133e2:	d06d      	beq.n	134c0 <bme680_set_sensor_settings+0x2f0>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   133e4:	683b      	ldr	r3, [r7, #0]
   133e6:	3339      	adds	r3, #57	; 0x39
   133e8:	0018      	movs	r0, r3
   133ea:	231f      	movs	r3, #31
   133ec:	18fc      	adds	r4, r7, r3
   133ee:	683b      	ldr	r3, [r7, #0]
   133f0:	2205      	movs	r2, #5
   133f2:	2100      	movs	r1, #0
   133f4:	4d6c      	ldr	r5, [pc, #432]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   133f6:	47a8      	blx	r5
   133f8:	0003      	movs	r3, r0
   133fa:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
   133fc:	231c      	movs	r3, #28
   133fe:	18fb      	adds	r3, r7, r3
   13400:	2274      	movs	r2, #116	; 0x74
   13402:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13404:	231f      	movs	r3, #31
   13406:	18fb      	adds	r3, r7, r3
   13408:	781b      	ldrb	r3, [r3, #0]
   1340a:	b25b      	sxtb	r3, r3
   1340c:	2b00      	cmp	r3, #0
   1340e:	d10d      	bne.n	1342c <bme680_set_sensor_settings+0x25c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13410:	231f      	movs	r3, #31
   13412:	18fc      	adds	r4, r7, r3
   13414:	683a      	ldr	r2, [r7, #0]
   13416:	231b      	movs	r3, #27
   13418:	18f9      	adds	r1, r7, r3
   1341a:	231c      	movs	r3, #28
   1341c:	18fb      	adds	r3, r7, r3
   1341e:	7818      	ldrb	r0, [r3, #0]
   13420:	0013      	movs	r3, r2
   13422:	2201      	movs	r2, #1
   13424:	4d61      	ldr	r5, [pc, #388]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   13426:	47a8      	blx	r5
   13428:	0003      	movs	r3, r0
   1342a:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_OST_SEL)
   1342c:	1dbb      	adds	r3, r7, #6
   1342e:	881b      	ldrh	r3, [r3, #0]
   13430:	2201      	movs	r2, #1
   13432:	4013      	ands	r3, r2
   13434:	d011      	beq.n	1345a <bme680_set_sensor_settings+0x28a>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   13436:	231b      	movs	r3, #27
   13438:	18fb      	adds	r3, r7, r3
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	b25b      	sxtb	r3, r3
   1343e:	221f      	movs	r2, #31
   13440:	4013      	ands	r3, r2
   13442:	b25a      	sxtb	r2, r3
   13444:	683b      	ldr	r3, [r7, #0]
   13446:	2139      	movs	r1, #57	; 0x39
   13448:	5c5b      	ldrb	r3, [r3, r1]
   1344a:	015b      	lsls	r3, r3, #5
   1344c:	b25b      	sxtb	r3, r3
   1344e:	4313      	orrs	r3, r2
   13450:	b25b      	sxtb	r3, r3
   13452:	b2da      	uxtb	r2, r3
   13454:	231b      	movs	r3, #27
   13456:	18fb      	adds	r3, r7, r3
   13458:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_OSP_SEL)
   1345a:	1dbb      	adds	r3, r7, #6
   1345c:	881b      	ldrh	r3, [r3, #0]
   1345e:	2202      	movs	r2, #2
   13460:	4013      	ands	r3, r2
   13462:	d014      	beq.n	1348e <bme680_set_sensor_settings+0x2be>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   13464:	231b      	movs	r3, #27
   13466:	18fb      	adds	r3, r7, r3
   13468:	781b      	ldrb	r3, [r3, #0]
   1346a:	b25b      	sxtb	r3, r3
   1346c:	221c      	movs	r2, #28
   1346e:	4393      	bics	r3, r2
   13470:	b25a      	sxtb	r2, r3
   13472:	683b      	ldr	r3, [r7, #0]
   13474:	213a      	movs	r1, #58	; 0x3a
   13476:	5c5b      	ldrb	r3, [r3, r1]
   13478:	009b      	lsls	r3, r3, #2
   1347a:	b25b      	sxtb	r3, r3
   1347c:	211c      	movs	r1, #28
   1347e:	400b      	ands	r3, r1
   13480:	b25b      	sxtb	r3, r3
   13482:	4313      	orrs	r3, r2
   13484:	b25b      	sxtb	r3, r3
   13486:	b2da      	uxtb	r2, r3
   13488:	231b      	movs	r3, #27
   1348a:	18fb      	adds	r3, r7, r3
   1348c:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr;
   1348e:	231e      	movs	r3, #30
   13490:	18fb      	adds	r3, r7, r3
   13492:	781b      	ldrb	r3, [r3, #0]
   13494:	2214      	movs	r2, #20
   13496:	18ba      	adds	r2, r7, r2
   13498:	211c      	movs	r1, #28
   1349a:	1879      	adds	r1, r7, r1
   1349c:	7809      	ldrb	r1, [r1, #0]
   1349e:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   134a0:	231e      	movs	r3, #30
   134a2:	18fb      	adds	r3, r7, r3
   134a4:	781b      	ldrb	r3, [r3, #0]
   134a6:	221b      	movs	r2, #27
   134a8:	18ba      	adds	r2, r7, r2
   134aa:	7811      	ldrb	r1, [r2, #0]
   134ac:	220c      	movs	r2, #12
   134ae:	18ba      	adds	r2, r7, r2
   134b0:	54d1      	strb	r1, [r2, r3]
			count++;
   134b2:	231e      	movs	r3, #30
   134b4:	18fb      	adds	r3, r7, r3
   134b6:	781a      	ldrb	r2, [r3, #0]
   134b8:	231e      	movs	r3, #30
   134ba:	18fb      	adds	r3, r7, r3
   134bc:	3201      	adds	r2, #1
   134be:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   134c0:	1dbb      	adds	r3, r7, #6
   134c2:	881b      	ldrh	r3, [r3, #0]
   134c4:	2204      	movs	r2, #4
   134c6:	4013      	ands	r3, r2
   134c8:	d050      	beq.n	1356c <bme680_set_sensor_settings+0x39c>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	3338      	adds	r3, #56	; 0x38
   134ce:	0018      	movs	r0, r3
   134d0:	231f      	movs	r3, #31
   134d2:	18fc      	adds	r4, r7, r3
   134d4:	683b      	ldr	r3, [r7, #0]
   134d6:	2205      	movs	r2, #5
   134d8:	2100      	movs	r1, #0
   134da:	4d33      	ldr	r5, [pc, #204]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   134dc:	47a8      	blx	r5
   134de:	0003      	movs	r3, r0
   134e0:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_OS_H_ADDR;
   134e2:	231c      	movs	r3, #28
   134e4:	18fb      	adds	r3, r7, r3
   134e6:	2272      	movs	r2, #114	; 0x72
   134e8:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   134ea:	231f      	movs	r3, #31
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	b25b      	sxtb	r3, r3
   134f2:	2b00      	cmp	r3, #0
   134f4:	d10d      	bne.n	13512 <bme680_set_sensor_settings+0x342>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   134f6:	231f      	movs	r3, #31
   134f8:	18fc      	adds	r4, r7, r3
   134fa:	683a      	ldr	r2, [r7, #0]
   134fc:	231b      	movs	r3, #27
   134fe:	18f9      	adds	r1, r7, r3
   13500:	231c      	movs	r3, #28
   13502:	18fb      	adds	r3, r7, r3
   13504:	7818      	ldrb	r0, [r3, #0]
   13506:	0013      	movs	r3, r2
   13508:	2201      	movs	r2, #1
   1350a:	4d28      	ldr	r5, [pc, #160]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1350c:	47a8      	blx	r5
   1350e:	0003      	movs	r3, r0
   13510:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   13512:	231b      	movs	r3, #27
   13514:	18fb      	adds	r3, r7, r3
   13516:	781b      	ldrb	r3, [r3, #0]
   13518:	b25b      	sxtb	r3, r3
   1351a:	2207      	movs	r2, #7
   1351c:	4393      	bics	r3, r2
   1351e:	b25a      	sxtb	r2, r3
   13520:	683b      	ldr	r3, [r7, #0]
   13522:	2138      	movs	r1, #56	; 0x38
   13524:	5c5b      	ldrb	r3, [r3, r1]
   13526:	b25b      	sxtb	r3, r3
   13528:	2107      	movs	r1, #7
   1352a:	400b      	ands	r3, r1
   1352c:	b25b      	sxtb	r3, r3
   1352e:	4313      	orrs	r3, r2
   13530:	b25b      	sxtb	r3, r3
   13532:	b2da      	uxtb	r2, r3
   13534:	231b      	movs	r3, #27
   13536:	18fb      	adds	r3, r7, r3
   13538:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   1353a:	231e      	movs	r3, #30
   1353c:	18fb      	adds	r3, r7, r3
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	2214      	movs	r2, #20
   13542:	18ba      	adds	r2, r7, r2
   13544:	211c      	movs	r1, #28
   13546:	1879      	adds	r1, r7, r1
   13548:	7809      	ldrb	r1, [r1, #0]
   1354a:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1354c:	231e      	movs	r3, #30
   1354e:	18fb      	adds	r3, r7, r3
   13550:	781b      	ldrb	r3, [r3, #0]
   13552:	221b      	movs	r2, #27
   13554:	18ba      	adds	r2, r7, r2
   13556:	7811      	ldrb	r1, [r2, #0]
   13558:	220c      	movs	r2, #12
   1355a:	18ba      	adds	r2, r7, r2
   1355c:	54d1      	strb	r1, [r2, r3]
			count++;
   1355e:	231e      	movs	r3, #30
   13560:	18fb      	adds	r3, r7, r3
   13562:	781a      	ldrb	r2, [r3, #0]
   13564:	231e      	movs	r3, #30
   13566:	18fb      	adds	r3, r7, r3
   13568:	3201      	adds	r2, #1
   1356a:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   1356c:	1dbb      	adds	r3, r7, #6
   1356e:	881b      	ldrh	r3, [r3, #0]
   13570:	22c0      	movs	r2, #192	; 0xc0
   13572:	4013      	ands	r3, r2
   13574:	d100      	bne.n	13578 <bme680_set_sensor_settings+0x3a8>
   13576:	e08e      	b.n	13696 <bme680_set_sensor_settings+0x4c6>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   13578:	683b      	ldr	r3, [r7, #0]
   1357a:	333e      	adds	r3, #62	; 0x3e
   1357c:	0018      	movs	r0, r3
   1357e:	231f      	movs	r3, #31
   13580:	18fc      	adds	r4, r7, r3
   13582:	683b      	ldr	r3, [r7, #0]
   13584:	2201      	movs	r2, #1
   13586:	2100      	movs	r1, #0
   13588:	4d07      	ldr	r5, [pc, #28]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1358a:	47a8      	blx	r5
   1358c:	0003      	movs	r3, r0
   1358e:	7023      	strb	r3, [r4, #0]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   13590:	231f      	movs	r3, #31
   13592:	18fb      	adds	r3, r7, r3
   13594:	781b      	ldrb	r3, [r3, #0]
   13596:	e00b      	b.n	135b0 <bme680_set_sensor_settings+0x3e0>
   13598:	0003781f 	.word	0x0003781f
   1359c:	0001482f 	.word	0x0001482f
   135a0:	00013c5d 	.word	0x00013c5d
   135a4:	000136e9 	.word	0x000136e9
   135a8:	00014795 	.word	0x00014795
   135ac:	00012ee5 	.word	0x00012ee5
   135b0:	b25b      	sxtb	r3, r3
   135b2:	2b00      	cmp	r3, #0
   135b4:	d10b      	bne.n	135ce <bme680_set_sensor_settings+0x3fe>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   135b6:	683b      	ldr	r3, [r7, #0]
   135b8:	333c      	adds	r3, #60	; 0x3c
   135ba:	0018      	movs	r0, r3
   135bc:	231f      	movs	r3, #31
   135be:	18fc      	adds	r4, r7, r3
   135c0:	683b      	ldr	r3, [r7, #0]
   135c2:	220a      	movs	r2, #10
   135c4:	2100      	movs	r1, #0
   135c6:	4d45      	ldr	r5, [pc, #276]	; (136dc <bme680_set_sensor_settings+0x50c>)
   135c8:	47a8      	blx	r5
   135ca:	0003      	movs	r3, r0
   135cc:	7023      	strb	r3, [r4, #0]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
   135ce:	231c      	movs	r3, #28
   135d0:	18fb      	adds	r3, r7, r3
   135d2:	2271      	movs	r2, #113	; 0x71
   135d4:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   135d6:	231f      	movs	r3, #31
   135d8:	18fb      	adds	r3, r7, r3
   135da:	781b      	ldrb	r3, [r3, #0]
   135dc:	b25b      	sxtb	r3, r3
   135de:	2b00      	cmp	r3, #0
   135e0:	d10d      	bne.n	135fe <bme680_set_sensor_settings+0x42e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   135e2:	231f      	movs	r3, #31
   135e4:	18fc      	adds	r4, r7, r3
   135e6:	683a      	ldr	r2, [r7, #0]
   135e8:	231b      	movs	r3, #27
   135ea:	18f9      	adds	r1, r7, r3
   135ec:	231c      	movs	r3, #28
   135ee:	18fb      	adds	r3, r7, r3
   135f0:	7818      	ldrb	r0, [r3, #0]
   135f2:	0013      	movs	r3, r2
   135f4:	2201      	movs	r2, #1
   135f6:	4d3a      	ldr	r5, [pc, #232]	; (136e0 <bme680_set_sensor_settings+0x510>)
   135f8:	47a8      	blx	r5
   135fa:	0003      	movs	r3, r0
   135fc:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_RUN_GAS_SEL)
   135fe:	1dbb      	adds	r3, r7, #6
   13600:	881b      	ldrh	r3, [r3, #0]
   13602:	2240      	movs	r2, #64	; 0x40
   13604:	4013      	ands	r3, r2
   13606:	d014      	beq.n	13632 <bme680_set_sensor_settings+0x462>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   13608:	231b      	movs	r3, #27
   1360a:	18fb      	adds	r3, r7, r3
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	b25b      	sxtb	r3, r3
   13610:	2210      	movs	r2, #16
   13612:	4393      	bics	r3, r2
   13614:	b25a      	sxtb	r2, r3
   13616:	683b      	ldr	r3, [r7, #0]
   13618:	213e      	movs	r1, #62	; 0x3e
   1361a:	5c5b      	ldrb	r3, [r3, r1]
   1361c:	011b      	lsls	r3, r3, #4
   1361e:	b25b      	sxtb	r3, r3
   13620:	2110      	movs	r1, #16
   13622:	400b      	ands	r3, r1
   13624:	b25b      	sxtb	r3, r3
   13626:	4313      	orrs	r3, r2
   13628:	b25b      	sxtb	r3, r3
   1362a:	b2da      	uxtb	r2, r3
   1362c:	231b      	movs	r3, #27
   1362e:	18fb      	adds	r3, r7, r3
   13630:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_NBCONV_SEL)
   13632:	1dbb      	adds	r3, r7, #6
   13634:	881b      	ldrh	r3, [r3, #0]
   13636:	2280      	movs	r2, #128	; 0x80
   13638:	4013      	ands	r3, r2
   1363a:	d013      	beq.n	13664 <bme680_set_sensor_settings+0x494>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   1363c:	231b      	movs	r3, #27
   1363e:	18fb      	adds	r3, r7, r3
   13640:	781b      	ldrb	r3, [r3, #0]
   13642:	b25b      	sxtb	r3, r3
   13644:	220f      	movs	r2, #15
   13646:	4393      	bics	r3, r2
   13648:	b25a      	sxtb	r2, r3
   1364a:	683b      	ldr	r3, [r7, #0]
   1364c:	213c      	movs	r1, #60	; 0x3c
   1364e:	5c5b      	ldrb	r3, [r3, r1]
   13650:	b25b      	sxtb	r3, r3
   13652:	210f      	movs	r1, #15
   13654:	400b      	ands	r3, r1
   13656:	b25b      	sxtb	r3, r3
   13658:	4313      	orrs	r3, r2
   1365a:	b25b      	sxtb	r3, r3
   1365c:	b2da      	uxtb	r2, r3
   1365e:	231b      	movs	r3, #27
   13660:	18fb      	adds	r3, r7, r3
   13662:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   13664:	231e      	movs	r3, #30
   13666:	18fb      	adds	r3, r7, r3
   13668:	781b      	ldrb	r3, [r3, #0]
   1366a:	2214      	movs	r2, #20
   1366c:	18ba      	adds	r2, r7, r2
   1366e:	211c      	movs	r1, #28
   13670:	1879      	adds	r1, r7, r1
   13672:	7809      	ldrb	r1, [r1, #0]
   13674:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   13676:	231e      	movs	r3, #30
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781b      	ldrb	r3, [r3, #0]
   1367c:	221b      	movs	r2, #27
   1367e:	18ba      	adds	r2, r7, r2
   13680:	7811      	ldrb	r1, [r2, #0]
   13682:	220c      	movs	r2, #12
   13684:	18ba      	adds	r2, r7, r2
   13686:	54d1      	strb	r1, [r2, r3]
			count++;
   13688:	231e      	movs	r3, #30
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	781a      	ldrb	r2, [r3, #0]
   1368e:	231e      	movs	r3, #30
   13690:	18fb      	adds	r3, r7, r3
   13692:	3201      	adds	r2, #1
   13694:	701a      	strb	r2, [r3, #0]
		}

		if (rslt == BME680_OK)
   13696:	231f      	movs	r3, #31
   13698:	18fb      	adds	r3, r7, r3
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	b25b      	sxtb	r3, r3
   1369e:	2b00      	cmp	r3, #0
   136a0:	d10e      	bne.n	136c0 <bme680_set_sensor_settings+0x4f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   136a2:	231f      	movs	r3, #31
   136a4:	18fc      	adds	r4, r7, r3
   136a6:	683d      	ldr	r5, [r7, #0]
   136a8:	231e      	movs	r3, #30
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781a      	ldrb	r2, [r3, #0]
   136ae:	230c      	movs	r3, #12
   136b0:	18f9      	adds	r1, r7, r3
   136b2:	2314      	movs	r3, #20
   136b4:	18f8      	adds	r0, r7, r3
   136b6:	002b      	movs	r3, r5
   136b8:	4d0a      	ldr	r5, [pc, #40]	; (136e4 <bme680_set_sensor_settings+0x514>)
   136ba:	47a8      	blx	r5
   136bc:	0003      	movs	r3, r0
   136be:	7023      	strb	r3, [r4, #0]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   136c0:	683b      	ldr	r3, [r7, #0]
   136c2:	221d      	movs	r2, #29
   136c4:	18ba      	adds	r2, r7, r2
   136c6:	2144      	movs	r1, #68	; 0x44
   136c8:	7812      	ldrb	r2, [r2, #0]
   136ca:	545a      	strb	r2, [r3, r1]
	}

	return rslt;
   136cc:	231f      	movs	r3, #31
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	781b      	ldrb	r3, [r3, #0]
   136d2:	b25b      	sxtb	r3, r3
}
   136d4:	0018      	movs	r0, r3
   136d6:	46bd      	mov	sp, r7
   136d8:	b008      	add	sp, #32
   136da:	bdb0      	pop	{r4, r5, r7, pc}
   136dc:	00014795 	.word	0x00014795
   136e0:	00012ee5 	.word	0x00012ee5
   136e4:	00012fa9 	.word	0x00012fa9

000136e8 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   136e8:	b5b0      	push	{r4, r5, r7, lr}
   136ea:	b084      	sub	sp, #16
   136ec:	af00      	add	r7, sp, #0
   136ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
   136f0:	230e      	movs	r3, #14
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	2200      	movs	r2, #0
   136f6:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   136f8:	230c      	movs	r3, #12
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	2274      	movs	r2, #116	; 0x74
   136fe:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13700:	230f      	movs	r3, #15
   13702:	18fc      	adds	r4, r7, r3
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	0018      	movs	r0, r3
   13708:	4b3c      	ldr	r3, [pc, #240]	; (137fc <bme680_set_sensor_mode+0x114>)
   1370a:	4798      	blx	r3
   1370c:	0003      	movs	r3, r0
   1370e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13710:	230f      	movs	r3, #15
   13712:	18fb      	adds	r3, r7, r3
   13714:	781b      	ldrb	r3, [r3, #0]
   13716:	b25b      	sxtb	r3, r3
   13718:	2b00      	cmp	r3, #0
   1371a:	d166      	bne.n	137ea <bme680_set_sensor_mode+0x102>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   1371c:	230f      	movs	r3, #15
   1371e:	18fc      	adds	r4, r7, r3
   13720:	687b      	ldr	r3, [r7, #4]
   13722:	220d      	movs	r2, #13
   13724:	18b9      	adds	r1, r7, r2
   13726:	2201      	movs	r2, #1
   13728:	2074      	movs	r0, #116	; 0x74
   1372a:	4d35      	ldr	r5, [pc, #212]	; (13800 <bme680_set_sensor_mode+0x118>)
   1372c:	47a8      	blx	r5
   1372e:	0003      	movs	r3, r0
   13730:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   13732:	230f      	movs	r3, #15
   13734:	18fb      	adds	r3, r7, r3
   13736:	781b      	ldrb	r3, [r3, #0]
   13738:	b25b      	sxtb	r3, r3
   1373a:	2b00      	cmp	r3, #0
   1373c:	d125      	bne.n	1378a <bme680_set_sensor_mode+0xa2>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   1373e:	230d      	movs	r3, #13
   13740:	18fb      	adds	r3, r7, r3
   13742:	781a      	ldrb	r2, [r3, #0]
   13744:	230e      	movs	r3, #14
   13746:	18fb      	adds	r3, r7, r3
   13748:	2103      	movs	r1, #3
   1374a:	400a      	ands	r2, r1
   1374c:	701a      	strb	r2, [r3, #0]

				if (pow_mode != BME680_SLEEP_MODE) {
   1374e:	230e      	movs	r3, #14
   13750:	18fb      	adds	r3, r7, r3
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	2b00      	cmp	r3, #0
   13756:	d018      	beq.n	1378a <bme680_set_sensor_mode+0xa2>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   13758:	230d      	movs	r3, #13
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	781b      	ldrb	r3, [r3, #0]
   1375e:	2203      	movs	r2, #3
   13760:	4393      	bics	r3, r2
   13762:	b2da      	uxtb	r2, r3
   13764:	230d      	movs	r3, #13
   13766:	18fb      	adds	r3, r7, r3
   13768:	701a      	strb	r2, [r3, #0]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   1376a:	230f      	movs	r3, #15
   1376c:	18fc      	adds	r4, r7, r3
   1376e:	687b      	ldr	r3, [r7, #4]
   13770:	220d      	movs	r2, #13
   13772:	18b9      	adds	r1, r7, r2
   13774:	220c      	movs	r2, #12
   13776:	18b8      	adds	r0, r7, r2
   13778:	2201      	movs	r2, #1
   1377a:	4d22      	ldr	r5, [pc, #136]	; (13804 <bme680_set_sensor_mode+0x11c>)
   1377c:	47a8      	blx	r5
   1377e:	0003      	movs	r3, r0
   13780:	7023      	strb	r3, [r4, #0]
					dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13786:	200a      	movs	r0, #10
   13788:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   1378a:	230e      	movs	r3, #14
   1378c:	18fb      	adds	r3, r7, r3
   1378e:	781b      	ldrb	r3, [r3, #0]
   13790:	2b00      	cmp	r3, #0
   13792:	d1c3      	bne.n	1371c <bme680_set_sensor_mode+0x34>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   13794:	687b      	ldr	r3, [r7, #4]
   13796:	2244      	movs	r2, #68	; 0x44
   13798:	5c9b      	ldrb	r3, [r3, r2]
   1379a:	2b00      	cmp	r3, #0
   1379c:	d025      	beq.n	137ea <bme680_set_sensor_mode+0x102>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   1379e:	230d      	movs	r3, #13
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	b25b      	sxtb	r3, r3
   137a6:	2203      	movs	r2, #3
   137a8:	4393      	bics	r3, r2
   137aa:	b25a      	sxtb	r2, r3
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	2144      	movs	r1, #68	; 0x44
   137b0:	5c5b      	ldrb	r3, [r3, r1]
   137b2:	b25b      	sxtb	r3, r3
   137b4:	2103      	movs	r1, #3
   137b6:	400b      	ands	r3, r1
   137b8:	b25b      	sxtb	r3, r3
   137ba:	4313      	orrs	r3, r2
   137bc:	b25b      	sxtb	r3, r3
   137be:	b2da      	uxtb	r2, r3
   137c0:	230d      	movs	r3, #13
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK)
   137c6:	230f      	movs	r3, #15
   137c8:	18fb      	adds	r3, r7, r3
   137ca:	781b      	ldrb	r3, [r3, #0]
   137cc:	b25b      	sxtb	r3, r3
   137ce:	2b00      	cmp	r3, #0
   137d0:	d10b      	bne.n	137ea <bme680_set_sensor_mode+0x102>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   137d2:	230f      	movs	r3, #15
   137d4:	18fc      	adds	r4, r7, r3
   137d6:	687b      	ldr	r3, [r7, #4]
   137d8:	220d      	movs	r2, #13
   137da:	18b9      	adds	r1, r7, r2
   137dc:	220c      	movs	r2, #12
   137de:	18b8      	adds	r0, r7, r2
   137e0:	2201      	movs	r2, #1
   137e2:	4d08      	ldr	r5, [pc, #32]	; (13804 <bme680_set_sensor_mode+0x11c>)
   137e4:	47a8      	blx	r5
   137e6:	0003      	movs	r3, r0
   137e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
   137ea:	230f      	movs	r3, #15
   137ec:	18fb      	adds	r3, r7, r3
   137ee:	781b      	ldrb	r3, [r3, #0]
   137f0:	b25b      	sxtb	r3, r3
}
   137f2:	0018      	movs	r0, r3
   137f4:	46bd      	mov	sp, r7
   137f6:	b004      	add	sp, #16
   137f8:	bdb0      	pop	{r4, r5, r7, pc}
   137fa:	46c0      	nop			; (mov r8, r8)
   137fc:	0001482f 	.word	0x0001482f
   13800:	00012ee5 	.word	0x00012ee5
   13804:	00012fa9 	.word	0x00012fa9

00013808 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   13808:	b580      	push	{r7, lr}
   1380a:	b086      	sub	sp, #24
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
   13810:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   13812:	2308      	movs	r3, #8
   13814:	18fb      	adds	r3, r7, r3
   13816:	4a2a      	ldr	r2, [pc, #168]	; (138c0 <bme680_get_profile_dur+0xb8>)
   13818:	6811      	ldr	r1, [r2, #0]
   1381a:	6019      	str	r1, [r3, #0]
   1381c:	8892      	ldrh	r2, [r2, #4]
   1381e:	809a      	strh	r2, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   13820:	683b      	ldr	r3, [r7, #0]
   13822:	2239      	movs	r2, #57	; 0x39
   13824:	5c9b      	ldrb	r3, [r3, r2]
   13826:	001a      	movs	r2, r3
   13828:	2308      	movs	r3, #8
   1382a:	18fb      	adds	r3, r7, r3
   1382c:	5c9b      	ldrb	r3, [r3, r2]
   1382e:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   13830:	683b      	ldr	r3, [r7, #0]
   13832:	223a      	movs	r2, #58	; 0x3a
   13834:	5c9b      	ldrb	r3, [r3, r2]
   13836:	001a      	movs	r2, r3
   13838:	2308      	movs	r3, #8
   1383a:	18fb      	adds	r3, r7, r3
   1383c:	5c9b      	ldrb	r3, [r3, r2]
   1383e:	001a      	movs	r2, r3
   13840:	697b      	ldr	r3, [r7, #20]
   13842:	189b      	adds	r3, r3, r2
   13844:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   13846:	683b      	ldr	r3, [r7, #0]
   13848:	2238      	movs	r2, #56	; 0x38
   1384a:	5c9b      	ldrb	r3, [r3, r2]
   1384c:	001a      	movs	r2, r3
   1384e:	2308      	movs	r3, #8
   13850:	18fb      	adds	r3, r7, r3
   13852:	5c9b      	ldrb	r3, [r3, r2]
   13854:	001a      	movs	r2, r3
   13856:	697b      	ldr	r3, [r7, #20]
   13858:	189b      	adds	r3, r3, r2
   1385a:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   1385c:	697b      	ldr	r3, [r7, #20]
   1385e:	4a19      	ldr	r2, [pc, #100]	; (138c4 <bme680_get_profile_dur+0xbc>)
   13860:	4353      	muls	r3, r2
   13862:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
   13864:	693b      	ldr	r3, [r7, #16]
   13866:	4a18      	ldr	r2, [pc, #96]	; (138c8 <bme680_get_profile_dur+0xc0>)
   13868:	4694      	mov	ip, r2
   1386a:	4463      	add	r3, ip
   1386c:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
   1386e:	693b      	ldr	r3, [r7, #16]
   13870:	4a16      	ldr	r2, [pc, #88]	; (138cc <bme680_get_profile_dur+0xc4>)
   13872:	4694      	mov	ip, r2
   13874:	4463      	add	r3, ip
   13876:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   13878:	693b      	ldr	r3, [r7, #16]
   1387a:	33f5      	adds	r3, #245	; 0xf5
   1387c:	33ff      	adds	r3, #255	; 0xff
   1387e:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   13880:	6938      	ldr	r0, [r7, #16]
   13882:	4b13      	ldr	r3, [pc, #76]	; (138d0 <bme680_get_profile_dur+0xc8>)
   13884:	22fa      	movs	r2, #250	; 0xfa
   13886:	0091      	lsls	r1, r2, #2
   13888:	4798      	blx	r3
   1388a:	0003      	movs	r3, r0
   1388c:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   1388e:	693b      	ldr	r3, [r7, #16]
   13890:	3301      	adds	r3, #1
   13892:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
   13894:	693b      	ldr	r3, [r7, #16]
   13896:	b29a      	uxth	r2, r3
   13898:	687b      	ldr	r3, [r7, #4]
   1389a:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   1389c:	683b      	ldr	r3, [r7, #0]
   1389e:	223e      	movs	r2, #62	; 0x3e
   138a0:	5c9b      	ldrb	r3, [r3, r2]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d008      	beq.n	138b8 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	881a      	ldrh	r2, [r3, #0]
   138aa:	683b      	ldr	r3, [r7, #0]
   138ac:	2142      	movs	r1, #66	; 0x42
   138ae:	5a5b      	ldrh	r3, [r3, r1]
   138b0:	18d3      	adds	r3, r2, r3
   138b2:	b29a      	uxth	r2, r3
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	801a      	strh	r2, [r3, #0]
	}
}
   138b8:	46c0      	nop			; (mov r8, r8)
   138ba:	46bd      	mov	sp, r7
   138bc:	b006      	add	sp, #24
   138be:	bd80      	pop	{r7, pc}
   138c0:	00038bfc 	.word	0x00038bfc
   138c4:	000007ab 	.word	0x000007ab
   138c8:	00000774 	.word	0x00000774
   138cc:	00000951 	.word	0x00000951
   138d0:	00034bf5 	.word	0x00034bf5

000138d4 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   138d4:	b590      	push	{r4, r7, lr}
   138d6:	b085      	sub	sp, #20
   138d8:	af00      	add	r7, sp, #0
   138da:	6078      	str	r0, [r7, #4]
   138dc:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   138de:	230f      	movs	r3, #15
   138e0:	18fc      	adds	r4, r7, r3
   138e2:	683b      	ldr	r3, [r7, #0]
   138e4:	0018      	movs	r0, r3
   138e6:	4b18      	ldr	r3, [pc, #96]	; (13948 <bme680_get_sensor_data+0x74>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   138ee:	230f      	movs	r3, #15
   138f0:	18fb      	adds	r3, r7, r3
   138f2:	781b      	ldrb	r3, [r3, #0]
   138f4:	b25b      	sxtb	r3, r3
   138f6:	2b00      	cmp	r3, #0
   138f8:	d11d      	bne.n	13936 <bme680_get_sensor_data+0x62>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
   138fa:	230f      	movs	r3, #15
   138fc:	18fc      	adds	r4, r7, r3
   138fe:	683a      	ldr	r2, [r7, #0]
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	0011      	movs	r1, r2
   13904:	0018      	movs	r0, r3
   13906:	4b11      	ldr	r3, [pc, #68]	; (1394c <bme680_get_sensor_data+0x78>)
   13908:	4798      	blx	r3
   1390a:	0003      	movs	r3, r0
   1390c:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   1390e:	230f      	movs	r3, #15
   13910:	18fb      	adds	r3, r7, r3
   13912:	781b      	ldrb	r3, [r3, #0]
   13914:	b25b      	sxtb	r3, r3
   13916:	2b00      	cmp	r3, #0
   13918:	d10d      	bne.n	13936 <bme680_get_sensor_data+0x62>
			if (data->status & BME680_NEW_DATA_MSK)
   1391a:	687b      	ldr	r3, [r7, #4]
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	b25b      	sxtb	r3, r3
   13920:	2b00      	cmp	r3, #0
   13922:	da04      	bge.n	1392e <bme680_get_sensor_data+0x5a>
				dev->new_fields = 1;
   13924:	683b      	ldr	r3, [r7, #0]
   13926:	2245      	movs	r2, #69	; 0x45
   13928:	2101      	movs	r1, #1
   1392a:	5499      	strb	r1, [r3, r2]
   1392c:	e003      	b.n	13936 <bme680_get_sensor_data+0x62>
			else
				dev->new_fields = 0;
   1392e:	683b      	ldr	r3, [r7, #0]
   13930:	2245      	movs	r2, #69	; 0x45
   13932:	2100      	movs	r1, #0
   13934:	5499      	strb	r1, [r3, r2]
		}
	}

	return rslt;
   13936:	230f      	movs	r3, #15
   13938:	18fb      	adds	r3, r7, r3
   1393a:	781b      	ldrb	r3, [r3, #0]
   1393c:	b25b      	sxtb	r3, r3
}
   1393e:	0018      	movs	r0, r3
   13940:	46bd      	mov	sp, r7
   13942:	b005      	add	sp, #20
   13944:	bd90      	pop	{r4, r7, pc}
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	0001482f 	.word	0x0001482f
   1394c:	00014405 	.word	0x00014405

00013950 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
   13950:	b5b0      	push	{r4, r5, r7, lr}
   13952:	b08e      	sub	sp, #56	; 0x38
   13954:	af00      	add	r7, sp, #0
   13956:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   13958:	230c      	movs	r3, #12
   1395a:	18fb      	adds	r3, r7, r3
   1395c:	0018      	movs	r0, r3
   1395e:	2329      	movs	r3, #41	; 0x29
   13960:	001a      	movs	r2, r3
   13962:	2100      	movs	r1, #0
   13964:	4bba      	ldr	r3, [pc, #744]	; (13c50 <get_calib_data+0x300>)
   13966:	4798      	blx	r3
	uint8_t temp_var = 0; /* Temporary variable */
   13968:	230b      	movs	r3, #11
   1396a:	18fb      	adds	r3, r7, r3
   1396c:	2200      	movs	r2, #0
   1396e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13970:	2337      	movs	r3, #55	; 0x37
   13972:	18fc      	adds	r4, r7, r3
   13974:	687b      	ldr	r3, [r7, #4]
   13976:	0018      	movs	r0, r3
   13978:	4bb6      	ldr	r3, [pc, #728]	; (13c54 <get_calib_data+0x304>)
   1397a:	4798      	blx	r3
   1397c:	0003      	movs	r3, r0
   1397e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13980:	2337      	movs	r3, #55	; 0x37
   13982:	18fb      	adds	r3, r7, r3
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	b25b      	sxtb	r3, r3
   13988:	2b00      	cmp	r3, #0
   1398a:	d000      	beq.n	1398e <get_calib_data+0x3e>
   1398c:	e157      	b.n	13c3e <get_calib_data+0x2ee>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   1398e:	2337      	movs	r3, #55	; 0x37
   13990:	18fc      	adds	r4, r7, r3
   13992:	687b      	ldr	r3, [r7, #4]
   13994:	220c      	movs	r2, #12
   13996:	18b9      	adds	r1, r7, r2
   13998:	2219      	movs	r2, #25
   1399a:	2089      	movs	r0, #137	; 0x89
   1399c:	4dae      	ldr	r5, [pc, #696]	; (13c58 <get_calib_data+0x308>)
   1399e:	47a8      	blx	r5
   139a0:	0003      	movs	r3, r0
   139a2:	7023      	strb	r3, [r4, #0]
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   139a4:	2337      	movs	r3, #55	; 0x37
   139a6:	18fb      	adds	r3, r7, r3
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	b25b      	sxtb	r3, r3
   139ac:	2b00      	cmp	r3, #0
   139ae:	d10d      	bne.n	139cc <get_calib_data+0x7c>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   139b0:	2337      	movs	r3, #55	; 0x37
   139b2:	18fc      	adds	r4, r7, r3
   139b4:	687a      	ldr	r2, [r7, #4]
   139b6:	230c      	movs	r3, #12
   139b8:	18fb      	adds	r3, r7, r3
   139ba:	3319      	adds	r3, #25
   139bc:	0019      	movs	r1, r3
   139be:	0013      	movs	r3, r2
   139c0:	2210      	movs	r2, #16
   139c2:	20e1      	movs	r0, #225	; 0xe1
   139c4:	4da4      	ldr	r5, [pc, #656]	; (13c58 <get_calib_data+0x308>)
   139c6:	47a8      	blx	r5
   139c8:	0003      	movs	r3, r0
   139ca:	7023      	strb	r3, [r4, #0]
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   139cc:	230c      	movs	r3, #12
   139ce:	18fb      	adds	r3, r7, r3
   139d0:	2222      	movs	r2, #34	; 0x22
   139d2:	5c9b      	ldrb	r3, [r3, r2]
   139d4:	021b      	lsls	r3, r3, #8
   139d6:	b21a      	sxth	r2, r3
   139d8:	230c      	movs	r3, #12
   139da:	18fb      	adds	r3, r7, r3
   139dc:	2121      	movs	r1, #33	; 0x21
   139de:	5c5b      	ldrb	r3, [r3, r1]
   139e0:	b21b      	sxth	r3, r3
   139e2:	4313      	orrs	r3, r2
   139e4:	b21b      	sxth	r3, r3
   139e6:	b29a      	uxth	r2, r3
   139e8:	687b      	ldr	r3, [r7, #4]
   139ea:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   139ec:	230c      	movs	r3, #12
   139ee:	18fb      	adds	r3, r7, r3
   139f0:	789b      	ldrb	r3, [r3, #2]
   139f2:	021b      	lsls	r3, r3, #8
   139f4:	b21a      	sxth	r2, r3
   139f6:	230c      	movs	r3, #12
   139f8:	18fb      	adds	r3, r7, r3
   139fa:	785b      	ldrb	r3, [r3, #1]
   139fc:	b21b      	sxth	r3, r3
   139fe:	4313      	orrs	r3, r2
   13a00:	b21a      	sxth	r2, r3
   13a02:	687b      	ldr	r3, [r7, #4]
   13a04:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   13a06:	230c      	movs	r3, #12
   13a08:	18fb      	adds	r3, r7, r3
   13a0a:	78db      	ldrb	r3, [r3, #3]
   13a0c:	b25a      	sxtb	r2, r3
   13a0e:	687b      	ldr	r3, [r7, #4]
   13a10:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   13a12:	230c      	movs	r3, #12
   13a14:	18fb      	adds	r3, r7, r3
   13a16:	799b      	ldrb	r3, [r3, #6]
   13a18:	021b      	lsls	r3, r3, #8
   13a1a:	b21a      	sxth	r2, r3
   13a1c:	230c      	movs	r3, #12
   13a1e:	18fb      	adds	r3, r7, r3
   13a20:	795b      	ldrb	r3, [r3, #5]
   13a22:	b21b      	sxth	r3, r3
   13a24:	4313      	orrs	r3, r2
   13a26:	b21b      	sxth	r3, r3
   13a28:	b29a      	uxth	r2, r3
   13a2a:	687b      	ldr	r3, [r7, #4]
   13a2c:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   13a2e:	230c      	movs	r3, #12
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	7a1b      	ldrb	r3, [r3, #8]
   13a34:	021b      	lsls	r3, r3, #8
   13a36:	b21a      	sxth	r2, r3
   13a38:	230c      	movs	r3, #12
   13a3a:	18fb      	adds	r3, r7, r3
   13a3c:	79db      	ldrb	r3, [r3, #7]
   13a3e:	b21b      	sxth	r3, r3
   13a40:	4313      	orrs	r3, r2
   13a42:	b21a      	sxth	r2, r3
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   13a48:	230c      	movs	r3, #12
   13a4a:	18fb      	adds	r3, r7, r3
   13a4c:	7a5b      	ldrb	r3, [r3, #9]
   13a4e:	b259      	sxtb	r1, r3
   13a50:	687b      	ldr	r3, [r7, #4]
   13a52:	2220      	movs	r2, #32
   13a54:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   13a56:	230c      	movs	r3, #12
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	7b1b      	ldrb	r3, [r3, #12]
   13a5c:	021b      	lsls	r3, r3, #8
   13a5e:	b21a      	sxth	r2, r3
   13a60:	230c      	movs	r3, #12
   13a62:	18fb      	adds	r3, r7, r3
   13a64:	7adb      	ldrb	r3, [r3, #11]
   13a66:	b21b      	sxth	r3, r3
   13a68:	4313      	orrs	r3, r2
   13a6a:	b21a      	sxth	r2, r3
   13a6c:	687b      	ldr	r3, [r7, #4]
   13a6e:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   13a70:	230c      	movs	r3, #12
   13a72:	18fb      	adds	r3, r7, r3
   13a74:	7b9b      	ldrb	r3, [r3, #14]
   13a76:	021b      	lsls	r3, r3, #8
   13a78:	b21a      	sxth	r2, r3
   13a7a:	230c      	movs	r3, #12
   13a7c:	18fb      	adds	r3, r7, r3
   13a7e:	7b5b      	ldrb	r3, [r3, #13]
   13a80:	b21b      	sxth	r3, r3
   13a82:	4313      	orrs	r3, r2
   13a84:	b21a      	sxth	r2, r3
   13a86:	687b      	ldr	r3, [r7, #4]
   13a88:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   13a8a:	230c      	movs	r3, #12
   13a8c:	18fb      	adds	r3, r7, r3
   13a8e:	7c1b      	ldrb	r3, [r3, #16]
   13a90:	b259      	sxtb	r1, r3
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	2226      	movs	r2, #38	; 0x26
   13a96:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   13a98:	230c      	movs	r3, #12
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	7bdb      	ldrb	r3, [r3, #15]
   13a9e:	b259      	sxtb	r1, r3
   13aa0:	687b      	ldr	r3, [r7, #4]
   13aa2:	2227      	movs	r2, #39	; 0x27
   13aa4:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   13aa6:	230c      	movs	r3, #12
   13aa8:	18fb      	adds	r3, r7, r3
   13aaa:	7d1b      	ldrb	r3, [r3, #20]
   13aac:	021b      	lsls	r3, r3, #8
   13aae:	b21a      	sxth	r2, r3
   13ab0:	230c      	movs	r3, #12
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	7cdb      	ldrb	r3, [r3, #19]
   13ab6:	b21b      	sxth	r3, r3
   13ab8:	4313      	orrs	r3, r2
   13aba:	b21a      	sxth	r2, r3
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   13ac0:	230c      	movs	r3, #12
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	7d9b      	ldrb	r3, [r3, #22]
   13ac6:	021b      	lsls	r3, r3, #8
   13ac8:	b21a      	sxth	r2, r3
   13aca:	230c      	movs	r3, #12
   13acc:	18fb      	adds	r3, r7, r3
   13ace:	7d5b      	ldrb	r3, [r3, #21]
   13ad0:	b21b      	sxth	r3, r3
   13ad2:	4313      	orrs	r3, r2
   13ad4:	b21a      	sxth	r2, r3
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   13ada:	230c      	movs	r3, #12
   13adc:	18fb      	adds	r3, r7, r3
   13ade:	7dd9      	ldrb	r1, [r3, #23]
   13ae0:	687b      	ldr	r3, [r7, #4]
   13ae2:	222c      	movs	r2, #44	; 0x2c
   13ae4:	5499      	strb	r1, [r3, r2]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13ae6:	230c      	movs	r3, #12
   13ae8:	18fb      	adds	r3, r7, r3
   13aea:	7edb      	ldrb	r3, [r3, #27]
   13aec:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   13aee:	b21a      	sxth	r2, r3
   13af0:	230c      	movs	r3, #12
   13af2:	18fb      	adds	r3, r7, r3
   13af4:	7e9b      	ldrb	r3, [r3, #26]
   13af6:	b21b      	sxth	r3, r3
   13af8:	210f      	movs	r1, #15
   13afa:	400b      	ands	r3, r1
   13afc:	b21b      	sxth	r3, r3
   13afe:	4313      	orrs	r3, r2
   13b00:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b02:	b29a      	uxth	r2, r3
   13b04:	687b      	ldr	r3, [r7, #4]
   13b06:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b08:	230c      	movs	r3, #12
   13b0a:	18fb      	adds	r3, r7, r3
   13b0c:	7e5b      	ldrb	r3, [r3, #25]
   13b0e:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   13b10:	b21a      	sxth	r2, r3
   13b12:	230c      	movs	r3, #12
   13b14:	18fb      	adds	r3, r7, r3
   13b16:	7e9b      	ldrb	r3, [r3, #26]
   13b18:	091b      	lsrs	r3, r3, #4
   13b1a:	b2db      	uxtb	r3, r3
   13b1c:	b21b      	sxth	r3, r3
   13b1e:	4313      	orrs	r3, r2
   13b20:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b22:	b29a      	uxth	r2, r3
   13b24:	687b      	ldr	r3, [r7, #4]
   13b26:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   13b28:	230c      	movs	r3, #12
   13b2a:	18fb      	adds	r3, r7, r3
   13b2c:	7f1b      	ldrb	r3, [r3, #28]
   13b2e:	b25a      	sxtb	r2, r3
   13b30:	687b      	ldr	r3, [r7, #4]
   13b32:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   13b34:	230c      	movs	r3, #12
   13b36:	18fb      	adds	r3, r7, r3
   13b38:	7f5b      	ldrb	r3, [r3, #29]
   13b3a:	b25a      	sxtb	r2, r3
   13b3c:	687b      	ldr	r3, [r7, #4]
   13b3e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   13b40:	230c      	movs	r3, #12
   13b42:	18fb      	adds	r3, r7, r3
   13b44:	7f9b      	ldrb	r3, [r3, #30]
   13b46:	b25a      	sxtb	r2, r3
   13b48:	687b      	ldr	r3, [r7, #4]
   13b4a:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   13b4c:	230c      	movs	r3, #12
   13b4e:	18fb      	adds	r3, r7, r3
   13b50:	7fda      	ldrb	r2, [r3, #31]
   13b52:	687b      	ldr	r3, [r7, #4]
   13b54:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   13b56:	230c      	movs	r3, #12
   13b58:	18fb      	adds	r3, r7, r3
   13b5a:	2220      	movs	r2, #32
   13b5c:	5c9b      	ldrb	r3, [r3, r2]
   13b5e:	b25a      	sxtb	r2, r3
   13b60:	687b      	ldr	r3, [r7, #4]
   13b62:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   13b64:	230c      	movs	r3, #12
   13b66:	18fb      	adds	r3, r7, r3
   13b68:	2225      	movs	r2, #37	; 0x25
   13b6a:	5c9b      	ldrb	r3, [r3, r2]
   13b6c:	b25a      	sxtb	r2, r3
   13b6e:	687b      	ldr	r3, [r7, #4]
   13b70:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   13b72:	230c      	movs	r3, #12
   13b74:	18fb      	adds	r3, r7, r3
   13b76:	2224      	movs	r2, #36	; 0x24
   13b78:	5c9b      	ldrb	r3, [r3, r2]
   13b7a:	021b      	lsls	r3, r3, #8
   13b7c:	b21a      	sxth	r2, r3
   13b7e:	230c      	movs	r3, #12
   13b80:	18fb      	adds	r3, r7, r3
   13b82:	2123      	movs	r1, #35	; 0x23
   13b84:	5c5b      	ldrb	r3, [r3, r1]
   13b86:	b21b      	sxth	r3, r3
   13b88:	4313      	orrs	r3, r2
   13b8a:	b21a      	sxth	r2, r3
   13b8c:	687b      	ldr	r3, [r7, #4]
   13b8e:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   13b90:	230c      	movs	r3, #12
   13b92:	18fb      	adds	r3, r7, r3
   13b94:	2226      	movs	r2, #38	; 0x26
   13b96:	5c9b      	ldrb	r3, [r3, r2]
   13b98:	b25a      	sxtb	r2, r3
   13b9a:	687b      	ldr	r3, [r7, #4]
   13b9c:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   13b9e:	2337      	movs	r3, #55	; 0x37
   13ba0:	18fb      	adds	r3, r7, r3
   13ba2:	781b      	ldrb	r3, [r3, #0]
   13ba4:	b25b      	sxtb	r3, r3
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d140      	bne.n	13c2c <get_calib_data+0x2dc>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   13baa:	2337      	movs	r3, #55	; 0x37
   13bac:	18fc      	adds	r4, r7, r3
   13bae:	687b      	ldr	r3, [r7, #4]
   13bb0:	220b      	movs	r2, #11
   13bb2:	18b9      	adds	r1, r7, r2
   13bb4:	2201      	movs	r2, #1
   13bb6:	2002      	movs	r0, #2
   13bb8:	4d27      	ldr	r5, [pc, #156]	; (13c58 <get_calib_data+0x308>)
   13bba:	47a8      	blx	r5
   13bbc:	0003      	movs	r3, r0
   13bbe:	7023      	strb	r3, [r4, #0]

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   13bc0:	230b      	movs	r3, #11
   13bc2:	18fb      	adds	r3, r7, r3
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	001a      	movs	r2, r3
   13bc8:	2330      	movs	r3, #48	; 0x30
   13bca:	4013      	ands	r3, r2
   13bcc:	d500      	bpl.n	13bd0 <get_calib_data+0x280>
   13bce:	330f      	adds	r3, #15
   13bd0:	111b      	asrs	r3, r3, #4
   13bd2:	b2d9      	uxtb	r1, r3
   13bd4:	687b      	ldr	r3, [r7, #4]
   13bd6:	2234      	movs	r2, #52	; 0x34
   13bd8:	5499      	strb	r1, [r3, r2]
			if (rslt == BME680_OK) {
   13bda:	2337      	movs	r3, #55	; 0x37
   13bdc:	18fb      	adds	r3, r7, r3
   13bde:	781b      	ldrb	r3, [r3, #0]
   13be0:	b25b      	sxtb	r3, r3
   13be2:	2b00      	cmp	r3, #0
   13be4:	d122      	bne.n	13c2c <get_calib_data+0x2dc>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   13be6:	2337      	movs	r3, #55	; 0x37
   13be8:	18fc      	adds	r4, r7, r3
   13bea:	687b      	ldr	r3, [r7, #4]
   13bec:	220b      	movs	r2, #11
   13bee:	18b9      	adds	r1, r7, r2
   13bf0:	2201      	movs	r2, #1
   13bf2:	2000      	movs	r0, #0
   13bf4:	4d18      	ldr	r5, [pc, #96]	; (13c58 <get_calib_data+0x308>)
   13bf6:	47a8      	blx	r5
   13bf8:	0003      	movs	r3, r0
   13bfa:	7023      	strb	r3, [r4, #0]

				dev->calib.res_heat_val = (int8_t) temp_var;
   13bfc:	230b      	movs	r3, #11
   13bfe:	18fb      	adds	r3, r7, r3
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	b259      	sxtb	r1, r3
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	2235      	movs	r2, #53	; 0x35
   13c08:	5499      	strb	r1, [r3, r2]
				if (rslt == BME680_OK)
   13c0a:	2337      	movs	r3, #55	; 0x37
   13c0c:	18fb      	adds	r3, r7, r3
   13c0e:	781b      	ldrb	r3, [r3, #0]
   13c10:	b25b      	sxtb	r3, r3
   13c12:	2b00      	cmp	r3, #0
   13c14:	d10a      	bne.n	13c2c <get_calib_data+0x2dc>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   13c16:	2337      	movs	r3, #55	; 0x37
   13c18:	18fc      	adds	r4, r7, r3
   13c1a:	687b      	ldr	r3, [r7, #4]
   13c1c:	220b      	movs	r2, #11
   13c1e:	18b9      	adds	r1, r7, r2
   13c20:	2201      	movs	r2, #1
   13c22:	2004      	movs	r0, #4
   13c24:	4d0c      	ldr	r5, [pc, #48]	; (13c58 <get_calib_data+0x308>)
   13c26:	47a8      	blx	r5
   13c28:	0003      	movs	r3, r0
   13c2a:	7023      	strb	r3, [r4, #0]
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   13c2c:	230b      	movs	r3, #11
   13c2e:	18fb      	adds	r3, r7, r3
   13c30:	781b      	ldrb	r3, [r3, #0]
   13c32:	b25b      	sxtb	r3, r3
   13c34:	111b      	asrs	r3, r3, #4
   13c36:	b259      	sxtb	r1, r3
   13c38:	687b      	ldr	r3, [r7, #4]
   13c3a:	2236      	movs	r2, #54	; 0x36
   13c3c:	5499      	strb	r1, [r3, r2]
	}

	return rslt;
   13c3e:	2337      	movs	r3, #55	; 0x37
   13c40:	18fb      	adds	r3, r7, r3
   13c42:	781b      	ldrb	r3, [r3, #0]
   13c44:	b25b      	sxtb	r3, r3
}
   13c46:	0018      	movs	r0, r3
   13c48:	46bd      	mov	sp, r7
   13c4a:	b00e      	add	sp, #56	; 0x38
   13c4c:	bdb0      	pop	{r4, r5, r7, pc}
   13c4e:	46c0      	nop			; (mov r8, r8)
   13c50:	0003781f 	.word	0x0003781f
   13c54:	0001482f 	.word	0x0001482f
   13c58:	00012ee5 	.word	0x00012ee5

00013c5c <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
   13c5c:	b5b0      	push	{r4, r5, r7, lr}
   13c5e:	b084      	sub	sp, #16
   13c60:	af00      	add	r7, sp, #0
   13c62:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13c64:	230f      	movs	r3, #15
   13c66:	18fc      	adds	r4, r7, r3
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	0018      	movs	r0, r3
   13c6c:	4b2c      	ldr	r3, [pc, #176]	; (13d20 <set_gas_config+0xc4>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13c74:	230f      	movs	r3, #15
   13c76:	18fb      	adds	r3, r7, r3
   13c78:	781b      	ldrb	r3, [r3, #0]
   13c7a:	b25b      	sxtb	r3, r3
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d147      	bne.n	13d10 <set_gas_config+0xb4>

		uint8_t reg_addr[2] = {0};
   13c80:	230c      	movs	r3, #12
   13c82:	18fb      	adds	r3, r7, r3
   13c84:	2200      	movs	r2, #0
   13c86:	801a      	strh	r2, [r3, #0]
		uint8_t reg_data[2] = {0};
   13c88:	2308      	movs	r3, #8
   13c8a:	18fb      	adds	r3, r7, r3
   13c8c:	2200      	movs	r2, #0
   13c8e:	801a      	strh	r2, [r3, #0]

		if (dev->power_mode == BME680_FORCED_MODE) {
   13c90:	687b      	ldr	r3, [r7, #4]
   13c92:	2244      	movs	r2, #68	; 0x44
   13c94:	5c9b      	ldrb	r3, [r3, r2]
   13c96:	2b01      	cmp	r3, #1
   13c98:	d124      	bne.n	13ce4 <set_gas_config+0x88>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   13c9a:	230c      	movs	r3, #12
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	225a      	movs	r2, #90	; 0x5a
   13ca0:	701a      	strb	r2, [r3, #0]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   13ca2:	687b      	ldr	r3, [r7, #4]
   13ca4:	2240      	movs	r2, #64	; 0x40
   13ca6:	5a9b      	ldrh	r3, [r3, r2]
   13ca8:	687a      	ldr	r2, [r7, #4]
   13caa:	0011      	movs	r1, r2
   13cac:	0018      	movs	r0, r3
   13cae:	4b1d      	ldr	r3, [pc, #116]	; (13d24 <set_gas_config+0xc8>)
   13cb0:	4798      	blx	r3
   13cb2:	0003      	movs	r3, r0
   13cb4:	001a      	movs	r2, r3
   13cb6:	2308      	movs	r3, #8
   13cb8:	18fb      	adds	r3, r7, r3
   13cba:	701a      	strb	r2, [r3, #0]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   13cbc:	230c      	movs	r3, #12
   13cbe:	18fb      	adds	r3, r7, r3
   13cc0:	2264      	movs	r2, #100	; 0x64
   13cc2:	705a      	strb	r2, [r3, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   13cc4:	687b      	ldr	r3, [r7, #4]
   13cc6:	2242      	movs	r2, #66	; 0x42
   13cc8:	5a9b      	ldrh	r3, [r3, r2]
   13cca:	0018      	movs	r0, r3
   13ccc:	4b16      	ldr	r3, [pc, #88]	; (13d28 <set_gas_config+0xcc>)
   13cce:	4798      	blx	r3
   13cd0:	0003      	movs	r3, r0
   13cd2:	001a      	movs	r2, r3
   13cd4:	2308      	movs	r3, #8
   13cd6:	18fb      	adds	r3, r7, r3
   13cd8:	705a      	strb	r2, [r3, #1]
			dev->gas_sett.nb_conv = 0;
   13cda:	687b      	ldr	r3, [r7, #4]
   13cdc:	223c      	movs	r2, #60	; 0x3c
   13cde:	2100      	movs	r1, #0
   13ce0:	5499      	strb	r1, [r3, r2]
   13ce2:	e003      	b.n	13cec <set_gas_config+0x90>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   13ce4:	230f      	movs	r3, #15
   13ce6:	18fb      	adds	r3, r7, r3
   13ce8:	2201      	movs	r2, #1
   13cea:	701a      	strb	r2, [r3, #0]
		}
		if (rslt == BME680_OK)
   13cec:	230f      	movs	r3, #15
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	781b      	ldrb	r3, [r3, #0]
   13cf2:	b25b      	sxtb	r3, r3
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	d10b      	bne.n	13d10 <set_gas_config+0xb4>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   13cf8:	230f      	movs	r3, #15
   13cfa:	18fc      	adds	r4, r7, r3
   13cfc:	687b      	ldr	r3, [r7, #4]
   13cfe:	2208      	movs	r2, #8
   13d00:	18b9      	adds	r1, r7, r2
   13d02:	220c      	movs	r2, #12
   13d04:	18b8      	adds	r0, r7, r2
   13d06:	2202      	movs	r2, #2
   13d08:	4d08      	ldr	r5, [pc, #32]	; (13d2c <set_gas_config+0xd0>)
   13d0a:	47a8      	blx	r5
   13d0c:	0003      	movs	r3, r0
   13d0e:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
   13d10:	230f      	movs	r3, #15
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	b25b      	sxtb	r3, r3
}
   13d18:	0018      	movs	r0, r3
   13d1a:	46bd      	mov	sp, r7
   13d1c:	b004      	add	sp, #16
   13d1e:	bdb0      	pop	{r4, r5, r7, pc}
   13d20:	0001482f 	.word	0x0001482f
   13d24:	00014285 	.word	0x00014285
   13d28:	00014391 	.word	0x00014391
   13d2c:	00012fa9 	.word	0x00012fa9

00013d30 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
   13d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d32:	b091      	sub	sp, #68	; 0x44
   13d34:	af00      	add	r7, sp, #0
   13d36:	61f8      	str	r0, [r7, #28]
   13d38:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   13d3a:	69fb      	ldr	r3, [r7, #28]
   13d3c:	10da      	asrs	r2, r3, #3
   13d3e:	69bb      	ldr	r3, [r7, #24]
   13d40:	8adb      	ldrh	r3, [r3, #22]
   13d42:	005b      	lsls	r3, r3, #1
   13d44:	1ad3      	subs	r3, r2, r3
   13d46:	63bb      	str	r3, [r7, #56]	; 0x38
   13d48:	17db      	asrs	r3, r3, #31
   13d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   13d4c:	69bb      	ldr	r3, [r7, #24]
   13d4e:	2218      	movs	r2, #24
   13d50:	5e9b      	ldrsh	r3, [r3, r2]
   13d52:	60bb      	str	r3, [r7, #8]
   13d54:	17db      	asrs	r3, r3, #31
   13d56:	60fb      	str	r3, [r7, #12]
   13d58:	4e30      	ldr	r6, [pc, #192]	; (13e1c <calc_temperature+0xec>)
   13d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d5e:	68b8      	ldr	r0, [r7, #8]
   13d60:	68f9      	ldr	r1, [r7, #12]
   13d62:	47b0      	blx	r6
   13d64:	0002      	movs	r2, r0
   13d66:	000b      	movs	r3, r1
   13d68:	0559      	lsls	r1, r3, #21
   13d6a:	0ad0      	lsrs	r0, r2, #11
   13d6c:	4301      	orrs	r1, r0
   13d6e:	6339      	str	r1, [r7, #48]	; 0x30
   13d70:	12db      	asrs	r3, r3, #11
   13d72:	637b      	str	r3, [r7, #52]	; 0x34
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   13d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d76:	07db      	lsls	r3, r3, #31
   13d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d7a:	0854      	lsrs	r4, r2, #1
   13d7c:	431c      	orrs	r4, r3
   13d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d80:	105d      	asrs	r5, r3, #1
   13d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d84:	07db      	lsls	r3, r3, #31
   13d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d88:	0852      	lsrs	r2, r2, #1
   13d8a:	613a      	str	r2, [r7, #16]
   13d8c:	693a      	ldr	r2, [r7, #16]
   13d8e:	431a      	orrs	r2, r3
   13d90:	613a      	str	r2, [r7, #16]
   13d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d94:	105b      	asrs	r3, r3, #1
   13d96:	617b      	str	r3, [r7, #20]
   13d98:	4e20      	ldr	r6, [pc, #128]	; (13e1c <calc_temperature+0xec>)
   13d9a:	693a      	ldr	r2, [r7, #16]
   13d9c:	697b      	ldr	r3, [r7, #20]
   13d9e:	0020      	movs	r0, r4
   13da0:	0029      	movs	r1, r5
   13da2:	47b0      	blx	r6
   13da4:	0003      	movs	r3, r0
   13da6:	000c      	movs	r4, r1
   13da8:	0522      	lsls	r2, r4, #20
   13daa:	0b19      	lsrs	r1, r3, #12
   13dac:	430a      	orrs	r2, r1
   13dae:	62ba      	str	r2, [r7, #40]	; 0x28
   13db0:	1323      	asrs	r3, r4, #12
   13db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   13db4:	69bb      	ldr	r3, [r7, #24]
   13db6:	7e9b      	ldrb	r3, [r3, #26]
   13db8:	b25b      	sxtb	r3, r3
   13dba:	011b      	lsls	r3, r3, #4
   13dbc:	603b      	str	r3, [r7, #0]
   13dbe:	17db      	asrs	r3, r3, #31
   13dc0:	607b      	str	r3, [r7, #4]
   13dc2:	4c16      	ldr	r4, [pc, #88]	; (13e1c <calc_temperature+0xec>)
   13dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13dc8:	6838      	ldr	r0, [r7, #0]
   13dca:	6879      	ldr	r1, [r7, #4]
   13dcc:	47a0      	blx	r4
   13dce:	0003      	movs	r3, r0
   13dd0:	000c      	movs	r4, r1
   13dd2:	04a2      	lsls	r2, r4, #18
   13dd4:	0b99      	lsrs	r1, r3, #14
   13dd6:	430a      	orrs	r2, r1
   13dd8:	62ba      	str	r2, [r7, #40]	; 0x28
   13dda:	13a3      	asrs	r3, r4, #14
   13ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev->calib.t_fine = (int32_t) (var2 + var3);
   13dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13de2:	18d3      	adds	r3, r2, r3
   13de4:	001a      	movs	r2, r3
   13de6:	69bb      	ldr	r3, [r7, #24]
   13de8:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   13dea:	69bb      	ldr	r3, [r7, #24]
   13dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13dee:	0013      	movs	r3, r2
   13df0:	009b      	lsls	r3, r3, #2
   13df2:	189b      	adds	r3, r3, r2
   13df4:	3380      	adds	r3, #128	; 0x80
   13df6:	121a      	asrs	r2, r3, #8
   13df8:	230e      	movs	r3, #14
   13dfa:	2118      	movs	r1, #24
   13dfc:	468c      	mov	ip, r1
   13dfe:	44bc      	add	ip, r7
   13e00:	4463      	add	r3, ip
   13e02:	801a      	strh	r2, [r3, #0]

	return calc_temp;
   13e04:	230e      	movs	r3, #14
   13e06:	2218      	movs	r2, #24
   13e08:	4694      	mov	ip, r2
   13e0a:	44bc      	add	ip, r7
   13e0c:	4463      	add	r3, ip
   13e0e:	2200      	movs	r2, #0
   13e10:	5e9b      	ldrsh	r3, [r3, r2]
}
   13e12:	0018      	movs	r0, r3
   13e14:	46bd      	mov	sp, r7
   13e16:	b011      	add	sp, #68	; 0x44
   13e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e1a:	46c0      	nop			; (mov r8, r8)
   13e1c:	00034f9d 	.word	0x00034f9d

00013e20 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
   13e20:	b580      	push	{r7, lr}
   13e22:	b086      	sub	sp, #24
   13e24:	af00      	add	r7, sp, #0
   13e26:	6078      	str	r0, [r7, #4]
   13e28:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   13e2a:	683b      	ldr	r3, [r7, #0]
   13e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e2e:	105b      	asrs	r3, r3, #1
   13e30:	4a4d      	ldr	r2, [pc, #308]	; (13f68 <calc_pressure+0x148>)
   13e32:	4694      	mov	ip, r2
   13e34:	4463      	add	r3, ip
   13e36:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e38:	693b      	ldr	r3, [r7, #16]
   13e3a:	109b      	asrs	r3, r3, #2
   13e3c:	693a      	ldr	r2, [r7, #16]
   13e3e:	1092      	asrs	r2, r2, #2
   13e40:	4353      	muls	r3, r2
   13e42:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
   13e44:	683a      	ldr	r2, [r7, #0]
   13e46:	2126      	movs	r1, #38	; 0x26
   13e48:	5652      	ldrsb	r2, [r2, r1]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e4a:	4353      	muls	r3, r2
   13e4c:	109b      	asrs	r3, r3, #2
   13e4e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   13e50:	683b      	ldr	r3, [r7, #0]
   13e52:	2224      	movs	r2, #36	; 0x24
   13e54:	5e9b      	ldrsh	r3, [r3, r2]
   13e56:	001a      	movs	r2, r3
   13e58:	693b      	ldr	r3, [r7, #16]
   13e5a:	4353      	muls	r3, r2
   13e5c:	005b      	lsls	r3, r3, #1
   13e5e:	68fa      	ldr	r2, [r7, #12]
   13e60:	18d3      	adds	r3, r2, r3
   13e62:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   13e64:	68fb      	ldr	r3, [r7, #12]
   13e66:	109a      	asrs	r2, r3, #2
   13e68:	683b      	ldr	r3, [r7, #0]
   13e6a:	2122      	movs	r1, #34	; 0x22
   13e6c:	5e5b      	ldrsh	r3, [r3, r1]
   13e6e:	041b      	lsls	r3, r3, #16
   13e70:	18d3      	adds	r3, r2, r3
   13e72:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e74:	693b      	ldr	r3, [r7, #16]
   13e76:	109b      	asrs	r3, r3, #2
   13e78:	693a      	ldr	r2, [r7, #16]
   13e7a:	1092      	asrs	r2, r2, #2
   13e7c:	4353      	muls	r3, r2
   13e7e:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e80:	683a      	ldr	r2, [r7, #0]
   13e82:	2120      	movs	r1, #32
   13e84:	5652      	ldrsb	r2, [r2, r1]
   13e86:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e88:	4353      	muls	r3, r2
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e8a:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   13e8c:	683b      	ldr	r3, [r7, #0]
   13e8e:	211e      	movs	r1, #30
   13e90:	5e5b      	ldrsh	r3, [r3, r1]
   13e92:	0019      	movs	r1, r3
   13e94:	693b      	ldr	r3, [r7, #16]
   13e96:	434b      	muls	r3, r1
   13e98:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e9a:	18d3      	adds	r3, r2, r3
   13e9c:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
   13e9e:	693b      	ldr	r3, [r7, #16]
   13ea0:	149b      	asrs	r3, r3, #18
   13ea2:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   13ea4:	693b      	ldr	r3, [r7, #16]
   13ea6:	2280      	movs	r2, #128	; 0x80
   13ea8:	0212      	lsls	r2, r2, #8
   13eaa:	4694      	mov	ip, r2
   13eac:	4463      	add	r3, ip
   13eae:	683a      	ldr	r2, [r7, #0]
   13eb0:	8b92      	ldrh	r2, [r2, #28]
   13eb2:	4353      	muls	r3, r2
   13eb4:	13db      	asrs	r3, r3, #15
   13eb6:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	2280      	movs	r2, #128	; 0x80
   13ebc:	0352      	lsls	r2, r2, #13
   13ebe:	1ad3      	subs	r3, r2, r3
   13ec0:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   13ec2:	68fb      	ldr	r3, [r7, #12]
   13ec4:	131b      	asrs	r3, r3, #12
   13ec6:	697a      	ldr	r2, [r7, #20]
   13ec8:	1ad3      	subs	r3, r2, r3
   13eca:	001a      	movs	r2, r3
   13ecc:	4b27      	ldr	r3, [pc, #156]	; (13f6c <calc_pressure+0x14c>)
   13ece:	4353      	muls	r3, r2
   13ed0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   13ed2:	697b      	ldr	r3, [r7, #20]
   13ed4:	4a26      	ldr	r2, [pc, #152]	; (13f70 <calc_pressure+0x150>)
   13ed6:	4293      	cmp	r3, r2
   13ed8:	dd07      	ble.n	13eea <calc_pressure+0xca>
		pressure_comp = ((pressure_comp / var1) << 1);
   13eda:	4b26      	ldr	r3, [pc, #152]	; (13f74 <calc_pressure+0x154>)
   13edc:	6939      	ldr	r1, [r7, #16]
   13ede:	6978      	ldr	r0, [r7, #20]
   13ee0:	4798      	blx	r3
   13ee2:	0003      	movs	r3, r0
   13ee4:	005b      	lsls	r3, r3, #1
   13ee6:	617b      	str	r3, [r7, #20]
   13ee8:	e007      	b.n	13efa <calc_pressure+0xda>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
   13eea:	697b      	ldr	r3, [r7, #20]
   13eec:	005a      	lsls	r2, r3, #1
   13eee:	4b21      	ldr	r3, [pc, #132]	; (13f74 <calc_pressure+0x154>)
   13ef0:	6939      	ldr	r1, [r7, #16]
   13ef2:	0010      	movs	r0, r2
   13ef4:	4798      	blx	r3
   13ef6:	0003      	movs	r3, r0
   13ef8:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13efa:	683b      	ldr	r3, [r7, #0]
   13efc:	222a      	movs	r2, #42	; 0x2a
   13efe:	5e9b      	ldrsh	r3, [r3, r2]
   13f00:	0019      	movs	r1, r3
   13f02:	697b      	ldr	r3, [r7, #20]
   13f04:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f06:	697a      	ldr	r2, [r7, #20]
   13f08:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0a:	4353      	muls	r3, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f0c:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0e:	434b      	muls	r3, r1
   13f10:	131b      	asrs	r3, r3, #12
   13f12:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f14:	697b      	ldr	r3, [r7, #20]
   13f16:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
   13f18:	683a      	ldr	r2, [r7, #0]
   13f1a:	2128      	movs	r1, #40	; 0x28
   13f1c:	5e52      	ldrsh	r2, [r2, r1]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f1e:	4353      	muls	r3, r2
   13f20:	135b      	asrs	r3, r3, #13
   13f22:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f24:	697b      	ldr	r3, [r7, #20]
   13f26:	121b      	asrs	r3, r3, #8
   13f28:	697a      	ldr	r2, [r7, #20]
   13f2a:	1212      	asrs	r2, r2, #8
   13f2c:	4353      	muls	r3, r2
		(int32_t)(pressure_comp >> 8) *
   13f2e:	697a      	ldr	r2, [r7, #20]
   13f30:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f32:	4353      	muls	r3, r2
		(int32_t)dev->calib.par_p10) >> 17;
   13f34:	683a      	ldr	r2, [r7, #0]
   13f36:	212c      	movs	r1, #44	; 0x2c
   13f38:	5c52      	ldrb	r2, [r2, r1]
		(int32_t)(pressure_comp >> 8) *
   13f3a:	4353      	muls	r3, r2
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f3c:	145b      	asrs	r3, r3, #17
   13f3e:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f40:	693a      	ldr	r2, [r7, #16]
   13f42:	68fb      	ldr	r3, [r7, #12]
   13f44:	18d2      	adds	r2, r2, r3
   13f46:	68bb      	ldr	r3, [r7, #8]
   13f48:	18d2      	adds	r2, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f4a:	683b      	ldr	r3, [r7, #0]
   13f4c:	2127      	movs	r1, #39	; 0x27
   13f4e:	565b      	ldrsb	r3, [r3, r1]
   13f50:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f52:	18d3      	adds	r3, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f54:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f56:	697a      	ldr	r2, [r7, #20]
   13f58:	18d3      	adds	r3, r2, r3
   13f5a:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
   13f5c:	697b      	ldr	r3, [r7, #20]

}
   13f5e:	0018      	movs	r0, r3
   13f60:	46bd      	mov	sp, r7
   13f62:	b006      	add	sp, #24
   13f64:	bd80      	pop	{r7, pc}
   13f66:	46c0      	nop			; (mov r8, r8)
   13f68:	ffff0600 	.word	0xffff0600
   13f6c:	00000c35 	.word	0x00000c35
   13f70:	3fffffff 	.word	0x3fffffff
   13f74:	00034d09 	.word	0x00034d09

00013f78 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
   13f78:	b5b0      	push	{r4, r5, r7, lr}
   13f7a:	b08a      	sub	sp, #40	; 0x28
   13f7c:	af00      	add	r7, sp, #0
   13f7e:	0002      	movs	r2, r0
   13f80:	6039      	str	r1, [r7, #0]
   13f82:	1dbb      	adds	r3, r7, #6
   13f84:	801a      	strh	r2, [r3, #0]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   13f86:	683b      	ldr	r3, [r7, #0]
   13f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13f8a:	0013      	movs	r3, r2
   13f8c:	009b      	lsls	r3, r3, #2
   13f8e:	189b      	adds	r3, r3, r2
   13f90:	3380      	adds	r3, #128	; 0x80
   13f92:	121b      	asrs	r3, r3, #8
   13f94:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13f96:	1dbb      	adds	r3, r7, #6
   13f98:	881a      	ldrh	r2, [r3, #0]
   13f9a:	683b      	ldr	r3, [r7, #0]
   13f9c:	891b      	ldrh	r3, [r3, #8]
   13f9e:	011b      	lsls	r3, r3, #4
   13fa0:	1ad4      	subs	r4, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   13fa2:	683b      	ldr	r3, [r7, #0]
   13fa4:	7b1b      	ldrb	r3, [r3, #12]
   13fa6:	b25b      	sxtb	r3, r3
   13fa8:	001a      	movs	r2, r3
   13faa:	6a3b      	ldr	r3, [r7, #32]
   13fac:	435a      	muls	r2, r3
   13fae:	4b38      	ldr	r3, [pc, #224]	; (14090 <calc_humidity+0x118>)
   13fb0:	2164      	movs	r1, #100	; 0x64
   13fb2:	0010      	movs	r0, r2
   13fb4:	4798      	blx	r3
   13fb6:	0003      	movs	r3, r0
   13fb8:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13fba:	1ae3      	subs	r3, r4, r3
   13fbc:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
   13fbe:	683b      	ldr	r3, [r7, #0]
   13fc0:	895b      	ldrh	r3, [r3, #10]
   13fc2:	001c      	movs	r4, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   13fc4:	683b      	ldr	r3, [r7, #0]
   13fc6:	7b5b      	ldrb	r3, [r3, #13]
   13fc8:	b25b      	sxtb	r3, r3
   13fca:	001a      	movs	r2, r3
   13fcc:	6a3b      	ldr	r3, [r7, #32]
   13fce:	435a      	muls	r2, r3
   13fd0:	4b2f      	ldr	r3, [pc, #188]	; (14090 <calc_humidity+0x118>)
   13fd2:	2164      	movs	r1, #100	; 0x64
   13fd4:	0010      	movs	r0, r2
   13fd6:	4798      	blx	r3
   13fd8:	0003      	movs	r3, r0
   13fda:	001d      	movs	r5, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   13fdc:	683b      	ldr	r3, [r7, #0]
   13fde:	7b9b      	ldrb	r3, [r3, #14]
   13fe0:	b25b      	sxtb	r3, r3
   13fe2:	001a      	movs	r2, r3
   13fe4:	6a3b      	ldr	r3, [r7, #32]
   13fe6:	435a      	muls	r2, r3
   13fe8:	4b29      	ldr	r3, [pc, #164]	; (14090 <calc_humidity+0x118>)
   13fea:	2164      	movs	r1, #100	; 0x64
   13fec:	0010      	movs	r0, r2
   13fee:	4798      	blx	r3
   13ff0:	0003      	movs	r3, r0
   13ff2:	001a      	movs	r2, r3
   13ff4:	6a3b      	ldr	r3, [r7, #32]
   13ff6:	4353      	muls	r3, r2
   13ff8:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   13ffa:	4b25      	ldr	r3, [pc, #148]	; (14090 <calc_humidity+0x118>)
   13ffc:	2164      	movs	r1, #100	; 0x64
   13ffe:	0010      	movs	r0, r2
   14000:	4798      	blx	r3
   14002:	0003      	movs	r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   14004:	18eb      	adds	r3, r5, r3
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   14006:	2280      	movs	r2, #128	; 0x80
   14008:	01d2      	lsls	r2, r2, #7
   1400a:	4694      	mov	ip, r2
   1400c:	4463      	add	r3, ip
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   1400e:	4363      	muls	r3, r4
	var2 = ((int32_t) dev->calib.par_h2
   14010:	129b      	asrs	r3, r3, #10
   14012:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
   14014:	69fb      	ldr	r3, [r7, #28]
   14016:	69ba      	ldr	r2, [r7, #24]
   14018:	4353      	muls	r3, r2
   1401a:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
   1401c:	683b      	ldr	r3, [r7, #0]
   1401e:	7bdb      	ldrb	r3, [r3, #15]
   14020:	01db      	lsls	r3, r3, #7
   14022:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   14024:	683b      	ldr	r3, [r7, #0]
   14026:	7c1b      	ldrb	r3, [r3, #16]
   14028:	b25b      	sxtb	r3, r3
   1402a:	001a      	movs	r2, r3
   1402c:	6a3b      	ldr	r3, [r7, #32]
   1402e:	435a      	muls	r2, r3
   14030:	4b17      	ldr	r3, [pc, #92]	; (14090 <calc_humidity+0x118>)
   14032:	2164      	movs	r1, #100	; 0x64
   14034:	0010      	movs	r0, r2
   14036:	4798      	blx	r3
   14038:	0003      	movs	r3, r0
   1403a:	001a      	movs	r2, r3
   1403c:	693b      	ldr	r3, [r7, #16]
   1403e:	18d3      	adds	r3, r2, r3
   14040:	111b      	asrs	r3, r3, #4
   14042:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   14044:	697b      	ldr	r3, [r7, #20]
   14046:	139b      	asrs	r3, r3, #14
   14048:	697a      	ldr	r2, [r7, #20]
   1404a:	1392      	asrs	r2, r2, #14
   1404c:	4353      	muls	r3, r2
   1404e:	129b      	asrs	r3, r3, #10
   14050:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
   14052:	693b      	ldr	r3, [r7, #16]
   14054:	68fa      	ldr	r2, [r7, #12]
   14056:	4353      	muls	r3, r2
   14058:	105b      	asrs	r3, r3, #1
   1405a:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   1405c:	697a      	ldr	r2, [r7, #20]
   1405e:	68bb      	ldr	r3, [r7, #8]
   14060:	18d3      	adds	r3, r2, r3
   14062:	129b      	asrs	r3, r3, #10
   14064:	22fa      	movs	r2, #250	; 0xfa
   14066:	0092      	lsls	r2, r2, #2
   14068:	4353      	muls	r3, r2
   1406a:	131b      	asrs	r3, r3, #12
   1406c:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
   1406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14070:	4a08      	ldr	r2, [pc, #32]	; (14094 <calc_humidity+0x11c>)
   14072:	4293      	cmp	r3, r2
   14074:	dd02      	ble.n	1407c <calc_humidity+0x104>
		calc_hum = 100000;
   14076:	4b07      	ldr	r3, [pc, #28]	; (14094 <calc_humidity+0x11c>)
   14078:	627b      	str	r3, [r7, #36]	; 0x24
   1407a:	e004      	b.n	14086 <calc_humidity+0x10e>
	else if (calc_hum < 0)
   1407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1407e:	2b00      	cmp	r3, #0
   14080:	da01      	bge.n	14086 <calc_humidity+0x10e>
		calc_hum = 0;
   14082:	2300      	movs	r3, #0
   14084:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
   14086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   14088:	0018      	movs	r0, r3
   1408a:	46bd      	mov	sp, r7
   1408c:	b00a      	add	sp, #40	; 0x28
   1408e:	bdb0      	pop	{r4, r5, r7, pc}
   14090:	00034d09 	.word	0x00034d09
   14094:	000186a0 	.word	0x000186a0

00014098 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
   14098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1409a:	b0b7      	sub	sp, #220	; 0xdc
   1409c:	af00      	add	r7, sp, #0
   1409e:	0003      	movs	r3, r0
   140a0:	633a      	str	r2, [r7, #48]	; 0x30
   140a2:	2236      	movs	r2, #54	; 0x36
   140a4:	18ba      	adds	r2, r7, r2
   140a6:	8013      	strh	r3, [r2, #0]
   140a8:	2335      	movs	r3, #53	; 0x35
   140aa:	18fa      	adds	r2, r7, r3
   140ac:	1c0b      	adds	r3, r1, #0
   140ae:	7013      	strb	r3, [r2, #0]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   140b0:	234c      	movs	r3, #76	; 0x4c
   140b2:	2230      	movs	r2, #48	; 0x30
   140b4:	18ba      	adds	r2, r7, r2
   140b6:	18d2      	adds	r2, r2, r3
   140b8:	4b6c      	ldr	r3, [pc, #432]	; (1426c <calc_gas_resistance+0x1d4>)
   140ba:	0010      	movs	r0, r2
   140bc:	0019      	movs	r1, r3
   140be:	2340      	movs	r3, #64	; 0x40
   140c0:	001a      	movs	r2, r3
   140c2:	4b6b      	ldr	r3, [pc, #428]	; (14270 <calc_gas_resistance+0x1d8>)
   140c4:	4798      	blx	r3
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   140c6:	230c      	movs	r3, #12
   140c8:	2230      	movs	r2, #48	; 0x30
   140ca:	18ba      	adds	r2, r7, r2
   140cc:	18d2      	adds	r2, r2, r3
   140ce:	4b69      	ldr	r3, [pc, #420]	; (14274 <calc_gas_resistance+0x1dc>)
   140d0:	0010      	movs	r0, r2
   140d2:	0019      	movs	r1, r3
   140d4:	2340      	movs	r3, #64	; 0x40
   140d6:	001a      	movs	r2, r3
   140d8:	4b65      	ldr	r3, [pc, #404]	; (14270 <calc_gas_resistance+0x1d8>)
   140da:	4798      	blx	r3
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   140dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   140de:	2336      	movs	r3, #54	; 0x36
   140e0:	56d3      	ldrsb	r3, [r2, r3]
   140e2:	61bb      	str	r3, [r7, #24]
   140e4:	17db      	asrs	r3, r3, #31
   140e6:	61fb      	str	r3, [r7, #28]
   140e8:	69b8      	ldr	r0, [r7, #24]
   140ea:	69f9      	ldr	r1, [r7, #28]
   140ec:	0003      	movs	r3, r0
   140ee:	000c      	movs	r4, r1
   140f0:	0f9a      	lsrs	r2, r3, #30
   140f2:	00a6      	lsls	r6, r4, #2
   140f4:	4316      	orrs	r6, r2
   140f6:	009d      	lsls	r5, r3, #2
   140f8:	0003      	movs	r3, r0
   140fa:	000c      	movs	r4, r1
   140fc:	195b      	adds	r3, r3, r5
   140fe:	4174      	adcs	r4, r6
   14100:	495d      	ldr	r1, [pc, #372]	; (14278 <calc_gas_resistance+0x1e0>)
   14102:	2200      	movs	r2, #0
   14104:	185b      	adds	r3, r3, r1
   14106:	4154      	adcs	r4, r2
   14108:	0018      	movs	r0, r3
   1410a:	0021      	movs	r1, r4
		((int64_t) lookupTable1[gas_range])) >> 16;
   1410c:	2335      	movs	r3, #53	; 0x35
   1410e:	18fb      	adds	r3, r7, r3
   14110:	781b      	ldrb	r3, [r3, #0]
   14112:	224c      	movs	r2, #76	; 0x4c
   14114:	2430      	movs	r4, #48	; 0x30
   14116:	46a4      	mov	ip, r4
   14118:	44bc      	add	ip, r7
   1411a:	4462      	add	r2, ip
   1411c:	009b      	lsls	r3, r3, #2
   1411e:	589b      	ldr	r3, [r3, r2]
   14120:	613b      	str	r3, [r7, #16]
   14122:	2300      	movs	r3, #0
   14124:	617b      	str	r3, [r7, #20]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   14126:	4c55      	ldr	r4, [pc, #340]	; (1427c <calc_gas_resistance+0x1e4>)
   14128:	693a      	ldr	r2, [r7, #16]
   1412a:	697b      	ldr	r3, [r7, #20]
   1412c:	47a0      	blx	r4
   1412e:	0003      	movs	r3, r0
   14130:	000c      	movs	r4, r1
   14132:	0422      	lsls	r2, r4, #16
   14134:	0c19      	lsrs	r1, r3, #16
   14136:	430a      	orrs	r2, r1
   14138:	21a0      	movs	r1, #160	; 0xa0
   1413a:	2030      	movs	r0, #48	; 0x30
   1413c:	4684      	mov	ip, r0
   1413e:	44bc      	add	ip, r7
   14140:	4461      	add	r1, ip
   14142:	600a      	str	r2, [r1, #0]
   14144:	1423      	asrs	r3, r4, #16
   14146:	22a4      	movs	r2, #164	; 0xa4
   14148:	2130      	movs	r1, #48	; 0x30
   1414a:	468c      	mov	ip, r1
   1414c:	44bc      	add	ip, r7
   1414e:	4462      	add	r2, ip
   14150:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   14152:	2336      	movs	r3, #54	; 0x36
   14154:	18fb      	adds	r3, r7, r3
   14156:	881b      	ldrh	r3, [r3, #0]
   14158:	b29b      	uxth	r3, r3
   1415a:	60bb      	str	r3, [r7, #8]
   1415c:	2300      	movs	r3, #0
   1415e:	60fb      	str	r3, [r7, #12]
   14160:	68b9      	ldr	r1, [r7, #8]
   14162:	68fa      	ldr	r2, [r7, #12]
   14164:	000b      	movs	r3, r1
   14166:	0c5b      	lsrs	r3, r3, #17
   14168:	0010      	movs	r0, r2
   1416a:	03c0      	lsls	r0, r0, #15
   1416c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1416e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14170:	4318      	orrs	r0, r3
   14172:	62f8      	str	r0, [r7, #44]	; 0x2c
   14174:	000b      	movs	r3, r1
   14176:	03db      	lsls	r3, r3, #15
   14178:	62bb      	str	r3, [r7, #40]	; 0x28
   1417a:	23ff      	movs	r3, #255	; 0xff
   1417c:	061b      	lsls	r3, r3, #24
   1417e:	2401      	movs	r4, #1
   14180:	4264      	negs	r4, r4
   14182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14186:	18c9      	adds	r1, r1, r3
   14188:	4162      	adcs	r2, r4
   1418a:	23a0      	movs	r3, #160	; 0xa0
   1418c:	2030      	movs	r0, #48	; 0x30
   1418e:	4684      	mov	ip, r0
   14190:	44bc      	add	ip, r7
   14192:	4463      	add	r3, ip
   14194:	685c      	ldr	r4, [r3, #4]
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	185b      	adds	r3, r3, r1
   1419a:	4154      	adcs	r4, r2
   1419c:	2298      	movs	r2, #152	; 0x98
   1419e:	2130      	movs	r1, #48	; 0x30
   141a0:	468c      	mov	ip, r1
   141a2:	44bc      	add	ip, r7
   141a4:	4462      	add	r2, ip
   141a6:	6013      	str	r3, [r2, #0]
   141a8:	6054      	str	r4, [r2, #4]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   141aa:	2335      	movs	r3, #53	; 0x35
   141ac:	18fb      	adds	r3, r7, r3
   141ae:	781a      	ldrb	r2, [r3, #0]
   141b0:	230c      	movs	r3, #12
   141b2:	2130      	movs	r1, #48	; 0x30
   141b4:	468c      	mov	ip, r1
   141b6:	44bc      	add	ip, r7
   141b8:	4463      	add	r3, ip
   141ba:	0092      	lsls	r2, r2, #2
   141bc:	58d3      	ldr	r3, [r2, r3]
   141be:	603b      	str	r3, [r7, #0]
   141c0:	2300      	movs	r3, #0
   141c2:	607b      	str	r3, [r7, #4]
   141c4:	4c2d      	ldr	r4, [pc, #180]	; (1427c <calc_gas_resistance+0x1e4>)
   141c6:	23a0      	movs	r3, #160	; 0xa0
   141c8:	2230      	movs	r2, #48	; 0x30
   141ca:	4694      	mov	ip, r2
   141cc:	44bc      	add	ip, r7
   141ce:	4463      	add	r3, ip
   141d0:	681a      	ldr	r2, [r3, #0]
   141d2:	685b      	ldr	r3, [r3, #4]
   141d4:	6838      	ldr	r0, [r7, #0]
   141d6:	6879      	ldr	r1, [r7, #4]
   141d8:	47a0      	blx	r4
   141da:	0003      	movs	r3, r0
   141dc:	000c      	movs	r4, r1
   141de:	05e2      	lsls	r2, r4, #23
   141e0:	0a59      	lsrs	r1, r3, #9
   141e2:	430a      	orrs	r2, r1
   141e4:	2190      	movs	r1, #144	; 0x90
   141e6:	2030      	movs	r0, #48	; 0x30
   141e8:	4684      	mov	ip, r0
   141ea:	44bc      	add	ip, r7
   141ec:	4461      	add	r1, ip
   141ee:	600a      	str	r2, [r1, #0]
   141f0:	1263      	asrs	r3, r4, #9
   141f2:	2294      	movs	r2, #148	; 0x94
   141f4:	2130      	movs	r1, #48	; 0x30
   141f6:	468c      	mov	ip, r1
   141f8:	44bc      	add	ip, r7
   141fa:	4462      	add	r2, ip
   141fc:	6013      	str	r3, [r2, #0]
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   141fe:	2398      	movs	r3, #152	; 0x98
   14200:	2230      	movs	r2, #48	; 0x30
   14202:	4694      	mov	ip, r2
   14204:	44bc      	add	ip, r7
   14206:	4463      	add	r3, ip
   14208:	685c      	ldr	r4, [r3, #4]
   1420a:	681b      	ldr	r3, [r3, #0]
   1420c:	07e2      	lsls	r2, r4, #31
   1420e:	0859      	lsrs	r1, r3, #1
   14210:	6239      	str	r1, [r7, #32]
   14212:	6a39      	ldr	r1, [r7, #32]
   14214:	4311      	orrs	r1, r2
   14216:	6239      	str	r1, [r7, #32]
   14218:	1063      	asrs	r3, r4, #1
   1421a:	627b      	str	r3, [r7, #36]	; 0x24
   1421c:	2390      	movs	r3, #144	; 0x90
   1421e:	2230      	movs	r2, #48	; 0x30
   14220:	4694      	mov	ip, r2
   14222:	44bc      	add	ip, r7
   14224:	4463      	add	r3, ip
   14226:	685c      	ldr	r4, [r3, #4]
   14228:	681b      	ldr	r3, [r3, #0]
   1422a:	6a38      	ldr	r0, [r7, #32]
   1422c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1422e:	18c0      	adds	r0, r0, r3
   14230:	4161      	adcs	r1, r4
   14232:	2398      	movs	r3, #152	; 0x98
   14234:	2230      	movs	r2, #48	; 0x30
   14236:	4694      	mov	ip, r2
   14238:	44bc      	add	ip, r7
   1423a:	4463      	add	r3, ip
   1423c:	685c      	ldr	r4, [r3, #4]
   1423e:	681b      	ldr	r3, [r3, #0]
   14240:	4d0f      	ldr	r5, [pc, #60]	; (14280 <calc_gas_resistance+0x1e8>)
   14242:	001a      	movs	r2, r3
   14244:	0023      	movs	r3, r4
   14246:	47a8      	blx	r5
   14248:	0003      	movs	r3, r0
   1424a:	000c      	movs	r4, r1
   1424c:	228c      	movs	r2, #140	; 0x8c
   1424e:	2130      	movs	r1, #48	; 0x30
   14250:	468c      	mov	ip, r1
   14252:	44bc      	add	ip, r7
   14254:	4462      	add	r2, ip
   14256:	6013      	str	r3, [r2, #0]

	return calc_gas_res;
   14258:	238c      	movs	r3, #140	; 0x8c
   1425a:	2230      	movs	r2, #48	; 0x30
   1425c:	4694      	mov	ip, r2
   1425e:	44bc      	add	ip, r7
   14260:	4463      	add	r3, ip
   14262:	681b      	ldr	r3, [r3, #0]
}
   14264:	0018      	movs	r0, r3
   14266:	46bd      	mov	sp, r7
   14268:	b037      	add	sp, #220	; 0xdc
   1426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1426c:	00038c04 	.word	0x00038c04
   14270:	000377e9 	.word	0x000377e9
   14274:	00038c44 	.word	0x00038c44
   14278:	0000053c 	.word	0x0000053c
   1427c:	00034f9d 	.word	0x00034f9d
   14280:	00034f55 	.word	0x00034f55

00014284 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
   14284:	b590      	push	{r4, r7, lr}
   14286:	b08b      	sub	sp, #44	; 0x2c
   14288:	af00      	add	r7, sp, #0
   1428a:	0002      	movs	r2, r0
   1428c:	6039      	str	r1, [r7, #0]
   1428e:	1dbb      	adds	r3, r7, #6
   14290:	801a      	strh	r2, [r3, #0]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
   14292:	1dbb      	adds	r3, r7, #6
   14294:	881a      	ldrh	r2, [r3, #0]
   14296:	23c8      	movs	r3, #200	; 0xc8
   14298:	005b      	lsls	r3, r3, #1
   1429a:	429a      	cmp	r2, r3
   1429c:	d903      	bls.n	142a6 <calc_heater_res+0x22>
		temp = 400;
   1429e:	1dbb      	adds	r3, r7, #6
   142a0:	22c8      	movs	r2, #200	; 0xc8
   142a2:	0052      	lsls	r2, r2, #1
   142a4:	801a      	strh	r2, [r3, #0]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   142a6:	683b      	ldr	r3, [r7, #0]
   142a8:	791b      	ldrb	r3, [r3, #4]
   142aa:	b25b      	sxtb	r3, r3
   142ac:	001a      	movs	r2, r3
   142ae:	683b      	ldr	r3, [r7, #0]
   142b0:	7d1b      	ldrb	r3, [r3, #20]
   142b2:	b25b      	sxtb	r3, r3
   142b4:	4353      	muls	r3, r2
   142b6:	0018      	movs	r0, r3
   142b8:	4b33      	ldr	r3, [pc, #204]	; (14388 <calc_heater_res+0x104>)
   142ba:	22fa      	movs	r2, #250	; 0xfa
   142bc:	0091      	lsls	r1, r2, #2
   142be:	4798      	blx	r3
   142c0:	0003      	movs	r3, r0
   142c2:	021b      	lsls	r3, r3, #8
   142c4:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   142c6:	683b      	ldr	r3, [r7, #0]
   142c8:	7c5b      	ldrb	r3, [r3, #17]
   142ca:	b25b      	sxtb	r3, r3
   142cc:	22c4      	movs	r2, #196	; 0xc4
   142ce:	0092      	lsls	r2, r2, #2
   142d0:	189c      	adds	r4, r3, r2
   142d2:	683b      	ldr	r3, [r7, #0]
   142d4:	2212      	movs	r2, #18
   142d6:	5e9b      	ldrsh	r3, [r3, r2]
   142d8:	4a2c      	ldr	r2, [pc, #176]	; (1438c <calc_heater_res+0x108>)
   142da:	4694      	mov	ip, r2
   142dc:	4463      	add	r3, ip
   142de:	1dba      	adds	r2, r7, #6
   142e0:	8812      	ldrh	r2, [r2, #0]
   142e2:	435a      	muls	r2, r3
   142e4:	0013      	movs	r3, r2
   142e6:	009b      	lsls	r3, r3, #2
   142e8:	189a      	adds	r2, r3, r2
   142ea:	4b27      	ldr	r3, [pc, #156]	; (14388 <calc_heater_res+0x104>)
   142ec:	2164      	movs	r1, #100	; 0x64
   142ee:	0010      	movs	r0, r2
   142f0:	4798      	blx	r3
   142f2:	0003      	movs	r3, r0
   142f4:	22c8      	movs	r2, #200	; 0xc8
   142f6:	0392      	lsls	r2, r2, #14
   142f8:	189a      	adds	r2, r3, r2
   142fa:	4b23      	ldr	r3, [pc, #140]	; (14388 <calc_heater_res+0x104>)
   142fc:	210a      	movs	r1, #10
   142fe:	0010      	movs	r0, r2
   14300:	4798      	blx	r3
   14302:	0003      	movs	r3, r0
   14304:	4363      	muls	r3, r4
   14306:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
   14308:	6a3b      	ldr	r3, [r7, #32]
   1430a:	2b00      	cmp	r3, #0
   1430c:	da00      	bge.n	14310 <calc_heater_res+0x8c>
   1430e:	3301      	adds	r3, #1
   14310:	105b      	asrs	r3, r3, #1
   14312:	001a      	movs	r2, r3
   14314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14316:	18d3      	adds	r3, r2, r3
   14318:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   1431a:	683b      	ldr	r3, [r7, #0]
   1431c:	2234      	movs	r2, #52	; 0x34
   1431e:	5c9b      	ldrb	r3, [r3, r2]
   14320:	1d1a      	adds	r2, r3, #4
   14322:	4b19      	ldr	r3, [pc, #100]	; (14388 <calc_heater_res+0x104>)
   14324:	0011      	movs	r1, r2
   14326:	69f8      	ldr	r0, [r7, #28]
   14328:	4798      	blx	r3
   1432a:	0003      	movs	r3, r0
   1432c:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   1432e:	683b      	ldr	r3, [r7, #0]
   14330:	2235      	movs	r2, #53	; 0x35
   14332:	569b      	ldrsb	r3, [r3, r2]
   14334:	001a      	movs	r2, r3
   14336:	0013      	movs	r3, r2
   14338:	019b      	lsls	r3, r3, #6
   1433a:	189b      	adds	r3, r3, r2
   1433c:	005b      	lsls	r3, r3, #1
   1433e:	189b      	adds	r3, r3, r2
   14340:	2280      	movs	r2, #128	; 0x80
   14342:	0252      	lsls	r2, r2, #9
   14344:	4694      	mov	ip, r2
   14346:	4463      	add	r3, ip
   14348:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   1434a:	4b0f      	ldr	r3, [pc, #60]	; (14388 <calc_heater_res+0x104>)
   1434c:	6979      	ldr	r1, [r7, #20]
   1434e:	69b8      	ldr	r0, [r7, #24]
   14350:	4798      	blx	r3
   14352:	0003      	movs	r3, r0
   14354:	3bfa      	subs	r3, #250	; 0xfa
   14356:	001a      	movs	r2, r3
   14358:	0013      	movs	r3, r2
   1435a:	011b      	lsls	r3, r3, #4
   1435c:	189b      	adds	r3, r3, r2
   1435e:	005b      	lsls	r3, r3, #1
   14360:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   14362:	693b      	ldr	r3, [r7, #16]
   14364:	3332      	adds	r3, #50	; 0x32
   14366:	001a      	movs	r2, r3
   14368:	4b07      	ldr	r3, [pc, #28]	; (14388 <calc_heater_res+0x104>)
   1436a:	2164      	movs	r1, #100	; 0x64
   1436c:	0010      	movs	r0, r2
   1436e:	4798      	blx	r3
   14370:	0003      	movs	r3, r0
   14372:	001a      	movs	r2, r3
   14374:	230f      	movs	r3, #15
   14376:	18fb      	adds	r3, r7, r3
   14378:	701a      	strb	r2, [r3, #0]

	return heatr_res;
   1437a:	230f      	movs	r3, #15
   1437c:	18fb      	adds	r3, r7, r3
   1437e:	781b      	ldrb	r3, [r3, #0]
}
   14380:	0018      	movs	r0, r3
   14382:	46bd      	mov	sp, r7
   14384:	b00b      	add	sp, #44	; 0x2c
   14386:	bd90      	pop	{r4, r7, pc}
   14388:	00034d09 	.word	0x00034d09
   1438c:	00025999 	.word	0x00025999

00014390 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
   14390:	b580      	push	{r7, lr}
   14392:	b084      	sub	sp, #16
   14394:	af00      	add	r7, sp, #0
   14396:	0002      	movs	r2, r0
   14398:	1dbb      	adds	r3, r7, #6
   1439a:	801a      	strh	r2, [r3, #0]
	uint8_t factor = 0;
   1439c:	230f      	movs	r3, #15
   1439e:	18fb      	adds	r3, r7, r3
   143a0:	2200      	movs	r2, #0
   143a2:	701a      	strb	r2, [r3, #0]
	uint8_t durval;

	if (dur >= 0xfc0) {
   143a4:	1dbb      	adds	r3, r7, #6
   143a6:	881b      	ldrh	r3, [r3, #0]
   143a8:	4a15      	ldr	r2, [pc, #84]	; (14400 <calc_heater_dur+0x70>)
   143aa:	4293      	cmp	r3, r2
   143ac:	d910      	bls.n	143d0 <calc_heater_dur+0x40>
		durval = 0xff; /* Max duration*/
   143ae:	230e      	movs	r3, #14
   143b0:	18fb      	adds	r3, r7, r3
   143b2:	22ff      	movs	r2, #255	; 0xff
   143b4:	701a      	strb	r2, [r3, #0]
   143b6:	e01b      	b.n	143f0 <calc_heater_dur+0x60>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
   143b8:	1dbb      	adds	r3, r7, #6
   143ba:	1dba      	adds	r2, r7, #6
   143bc:	8812      	ldrh	r2, [r2, #0]
   143be:	0892      	lsrs	r2, r2, #2
   143c0:	801a      	strh	r2, [r3, #0]
			factor += 1;
   143c2:	230f      	movs	r3, #15
   143c4:	18fb      	adds	r3, r7, r3
   143c6:	220f      	movs	r2, #15
   143c8:	18ba      	adds	r2, r7, r2
   143ca:	7812      	ldrb	r2, [r2, #0]
   143cc:	3201      	adds	r2, #1
   143ce:	701a      	strb	r2, [r3, #0]
		while (dur > 0x3F) {
   143d0:	1dbb      	adds	r3, r7, #6
   143d2:	881b      	ldrh	r3, [r3, #0]
   143d4:	2b3f      	cmp	r3, #63	; 0x3f
   143d6:	d8ef      	bhi.n	143b8 <calc_heater_dur+0x28>
		}
		durval = (uint8_t) (dur + (factor * 64));
   143d8:	1dbb      	adds	r3, r7, #6
   143da:	881b      	ldrh	r3, [r3, #0]
   143dc:	b2d9      	uxtb	r1, r3
   143de:	230f      	movs	r3, #15
   143e0:	18fb      	adds	r3, r7, r3
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	019b      	lsls	r3, r3, #6
   143e6:	b2da      	uxtb	r2, r3
   143e8:	230e      	movs	r3, #14
   143ea:	18fb      	adds	r3, r7, r3
   143ec:	188a      	adds	r2, r1, r2
   143ee:	701a      	strb	r2, [r3, #0]
	}

	return durval;
   143f0:	230e      	movs	r3, #14
   143f2:	18fb      	adds	r3, r7, r3
   143f4:	781b      	ldrb	r3, [r3, #0]
}
   143f6:	0018      	movs	r0, r3
   143f8:	46bd      	mov	sp, r7
   143fa:	b004      	add	sp, #16
   143fc:	bd80      	pop	{r7, pc}
   143fe:	46c0      	nop			; (mov r8, r8)
   14400:	00000fbf 	.word	0x00000fbf

00014404 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   14404:	b5b0      	push	{r4, r5, r7, lr}
   14406:	b08a      	sub	sp, #40	; 0x28
   14408:	af00      	add	r7, sp, #0
   1440a:	6078      	str	r0, [r7, #4]
   1440c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   1440e:	2308      	movs	r3, #8
   14410:	18fb      	adds	r3, r7, r3
   14412:	0018      	movs	r0, r3
   14414:	230f      	movs	r3, #15
   14416:	001a      	movs	r2, r3
   14418:	2100      	movs	r1, #0
   1441a:	4b76      	ldr	r3, [pc, #472]	; (145f4 <read_field_data+0x1f0>)
   1441c:	4798      	blx	r3
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
   1441e:	2326      	movs	r3, #38	; 0x26
   14420:	18fb      	adds	r3, r7, r3
   14422:	220a      	movs	r2, #10
   14424:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14426:	2327      	movs	r3, #39	; 0x27
   14428:	18fc      	adds	r4, r7, r3
   1442a:	683b      	ldr	r3, [r7, #0]
   1442c:	0018      	movs	r0, r3
   1442e:	4b72      	ldr	r3, [pc, #456]	; (145f8 <read_field_data+0x1f4>)
   14430:	4798      	blx	r3
   14432:	0003      	movs	r3, r0
   14434:	7023      	strb	r3, [r4, #0]
	do {
		if (rslt == BME680_OK) {
   14436:	2327      	movs	r3, #39	; 0x27
   14438:	18fb      	adds	r3, r7, r3
   1443a:	781b      	ldrb	r3, [r3, #0]
   1443c:	b25b      	sxtb	r3, r3
   1443e:	2b00      	cmp	r3, #0
   14440:	d000      	beq.n	14444 <read_field_data+0x40>
   14442:	e0b8      	b.n	145b6 <read_field_data+0x1b2>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   14444:	2327      	movs	r3, #39	; 0x27
   14446:	18fc      	adds	r4, r7, r3
   14448:	683b      	ldr	r3, [r7, #0]
   1444a:	2208      	movs	r2, #8
   1444c:	18b9      	adds	r1, r7, r2
   1444e:	220f      	movs	r2, #15
   14450:	201d      	movs	r0, #29
   14452:	4d6a      	ldr	r5, [pc, #424]	; (145fc <read_field_data+0x1f8>)
   14454:	47a8      	blx	r5
   14456:	0003      	movs	r3, r0
   14458:	7023      	strb	r3, [r4, #0]
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   1445a:	2308      	movs	r3, #8
   1445c:	18fb      	adds	r3, r7, r3
   1445e:	781b      	ldrb	r3, [r3, #0]
   14460:	227f      	movs	r2, #127	; 0x7f
   14462:	4393      	bics	r3, r2
   14464:	b2da      	uxtb	r2, r3
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   1446a:	2308      	movs	r3, #8
   1446c:	18fb      	adds	r3, r7, r3
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	220f      	movs	r2, #15
   14472:	4013      	ands	r3, r2
   14474:	b2da      	uxtb	r2, r3
   14476:	687b      	ldr	r3, [r7, #4]
   14478:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
   1447a:	2308      	movs	r3, #8
   1447c:	18fb      	adds	r3, r7, r3
   1447e:	785a      	ldrb	r2, [r3, #1]
   14480:	687b      	ldr	r3, [r7, #4]
   14482:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   14484:	2308      	movs	r3, #8
   14486:	18fb      	adds	r3, r7, r3
   14488:	789b      	ldrb	r3, [r3, #2]
   1448a:	031a      	lsls	r2, r3, #12
   1448c:	2308      	movs	r3, #8
   1448e:	18fb      	adds	r3, r7, r3
   14490:	78db      	ldrb	r3, [r3, #3]
   14492:	011b      	lsls	r3, r3, #4
   14494:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
   14496:	2208      	movs	r2, #8
   14498:	18ba      	adds	r2, r7, r2
   1449a:	7912      	ldrb	r2, [r2, #4]
   1449c:	0912      	lsrs	r2, r2, #4
   1449e:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   144a0:	4313      	orrs	r3, r2
   144a2:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144a4:	2308      	movs	r3, #8
   144a6:	18fb      	adds	r3, r7, r3
   144a8:	795b      	ldrb	r3, [r3, #5]
   144aa:	031a      	lsls	r2, r3, #12
   144ac:	2308      	movs	r3, #8
   144ae:	18fb      	adds	r3, r7, r3
   144b0:	799b      	ldrb	r3, [r3, #6]
   144b2:	011b      	lsls	r3, r3, #4
   144b4:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
   144b6:	2208      	movs	r2, #8
   144b8:	18ba      	adds	r2, r7, r2
   144ba:	79d2      	ldrb	r2, [r2, #7]
   144bc:	0912      	lsrs	r2, r2, #4
   144be:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144c0:	4313      	orrs	r3, r2
   144c2:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   144c4:	2308      	movs	r3, #8
   144c6:	18fb      	adds	r3, r7, r3
   144c8:	7a1b      	ldrb	r3, [r3, #8]
   144ca:	b29b      	uxth	r3, r3
   144cc:	021b      	lsls	r3, r3, #8
   144ce:	b299      	uxth	r1, r3
   144d0:	2308      	movs	r3, #8
   144d2:	18fb      	adds	r3, r7, r3
   144d4:	7a5b      	ldrb	r3, [r3, #9]
   144d6:	b29a      	uxth	r2, r3
   144d8:	231a      	movs	r3, #26
   144da:	18fb      	adds	r3, r7, r3
   144dc:	430a      	orrs	r2, r1
   144de:	801a      	strh	r2, [r3, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   144e0:	2308      	movs	r3, #8
   144e2:	18fb      	adds	r3, r7, r3
   144e4:	7b5b      	ldrb	r3, [r3, #13]
   144e6:	b29b      	uxth	r3, r3
   144e8:	009b      	lsls	r3, r3, #2
   144ea:	b299      	uxth	r1, r3
   144ec:	2308      	movs	r3, #8
   144ee:	18fb      	adds	r3, r7, r3
   144f0:	7b9b      	ldrb	r3, [r3, #14]
   144f2:	099b      	lsrs	r3, r3, #6
   144f4:	b2db      	uxtb	r3, r3
   144f6:	b29a      	uxth	r2, r3
   144f8:	2318      	movs	r3, #24
   144fa:	18fb      	adds	r3, r7, r3
   144fc:	430a      	orrs	r2, r1
   144fe:	801a      	strh	r2, [r3, #0]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
   14500:	2308      	movs	r3, #8
   14502:	18fb      	adds	r3, r7, r3
   14504:	7b9a      	ldrb	r2, [r3, #14]
   14506:	2317      	movs	r3, #23
   14508:	18fb      	adds	r3, r7, r3
   1450a:	210f      	movs	r1, #15
   1450c:	400a      	ands	r2, r1
   1450e:	701a      	strb	r2, [r3, #0]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   14510:	687b      	ldr	r3, [r7, #4]
   14512:	781b      	ldrb	r3, [r3, #0]
   14514:	b25a      	sxtb	r2, r3
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	7b9b      	ldrb	r3, [r3, #14]
   1451c:	b25b      	sxtb	r3, r3
   1451e:	2120      	movs	r1, #32
   14520:	400b      	ands	r3, r1
   14522:	b25b      	sxtb	r3, r3
   14524:	4313      	orrs	r3, r2
   14526:	b25b      	sxtb	r3, r3
   14528:	b2da      	uxtb	r2, r3
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   1452e:	687b      	ldr	r3, [r7, #4]
   14530:	781b      	ldrb	r3, [r3, #0]
   14532:	b25a      	sxtb	r2, r3
   14534:	2308      	movs	r3, #8
   14536:	18fb      	adds	r3, r7, r3
   14538:	7b9b      	ldrb	r3, [r3, #14]
   1453a:	b25b      	sxtb	r3, r3
   1453c:	2110      	movs	r1, #16
   1453e:	400b      	ands	r3, r1
   14540:	b25b      	sxtb	r3, r3
   14542:	4313      	orrs	r3, r2
   14544:	b25b      	sxtb	r3, r3
   14546:	b2da      	uxtb	r2, r3
   14548:	687b      	ldr	r3, [r7, #4]
   1454a:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	781b      	ldrb	r3, [r3, #0]
   14550:	b25b      	sxtb	r3, r3
   14552:	2b00      	cmp	r3, #0
   14554:	da2b      	bge.n	145ae <read_field_data+0x1aa>
				data->temperature = calc_temperature(adc_temp, dev);
   14556:	683a      	ldr	r2, [r7, #0]
   14558:	69fb      	ldr	r3, [r7, #28]
   1455a:	0011      	movs	r1, r2
   1455c:	0018      	movs	r0, r3
   1455e:	4b28      	ldr	r3, [pc, #160]	; (14600 <read_field_data+0x1fc>)
   14560:	4798      	blx	r3
   14562:	0003      	movs	r3, r0
   14564:	001a      	movs	r2, r3
   14566:	687b      	ldr	r3, [r7, #4]
   14568:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
   1456a:	683a      	ldr	r2, [r7, #0]
   1456c:	6a3b      	ldr	r3, [r7, #32]
   1456e:	0011      	movs	r1, r2
   14570:	0018      	movs	r0, r3
   14572:	4b24      	ldr	r3, [pc, #144]	; (14604 <read_field_data+0x200>)
   14574:	4798      	blx	r3
   14576:	0002      	movs	r2, r0
   14578:	687b      	ldr	r3, [r7, #4]
   1457a:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
   1457c:	683a      	ldr	r2, [r7, #0]
   1457e:	231a      	movs	r3, #26
   14580:	18fb      	adds	r3, r7, r3
   14582:	881b      	ldrh	r3, [r3, #0]
   14584:	0011      	movs	r1, r2
   14586:	0018      	movs	r0, r3
   14588:	4b1f      	ldr	r3, [pc, #124]	; (14608 <read_field_data+0x204>)
   1458a:	4798      	blx	r3
   1458c:	0002      	movs	r2, r0
   1458e:	687b      	ldr	r3, [r7, #4]
   14590:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   14592:	683a      	ldr	r2, [r7, #0]
   14594:	2317      	movs	r3, #23
   14596:	18fb      	adds	r3, r7, r3
   14598:	7819      	ldrb	r1, [r3, #0]
   1459a:	2318      	movs	r3, #24
   1459c:	18fb      	adds	r3, r7, r3
   1459e:	881b      	ldrh	r3, [r3, #0]
   145a0:	0018      	movs	r0, r3
   145a2:	4b1a      	ldr	r3, [pc, #104]	; (1460c <read_field_data+0x208>)
   145a4:	4798      	blx	r3
   145a6:	0002      	movs	r2, r0
   145a8:	687b      	ldr	r3, [r7, #4]
   145aa:	611a      	str	r2, [r3, #16]
				break;
   145ac:	e010      	b.n	145d0 <read_field_data+0x1cc>
			}
			/* Delay to poll the data */
			dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   145ae:	683b      	ldr	r3, [r7, #0]
   145b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   145b2:	200a      	movs	r0, #10
   145b4:	4798      	blx	r3
		}
		tries--;
   145b6:	2326      	movs	r3, #38	; 0x26
   145b8:	18fb      	adds	r3, r7, r3
   145ba:	781a      	ldrb	r2, [r3, #0]
   145bc:	2326      	movs	r3, #38	; 0x26
   145be:	18fb      	adds	r3, r7, r3
   145c0:	3a01      	subs	r2, #1
   145c2:	701a      	strb	r2, [r3, #0]
	} while (tries);
   145c4:	2326      	movs	r3, #38	; 0x26
   145c6:	18fb      	adds	r3, r7, r3
   145c8:	781b      	ldrb	r3, [r3, #0]
   145ca:	2b00      	cmp	r3, #0
   145cc:	d000      	beq.n	145d0 <read_field_data+0x1cc>
   145ce:	e732      	b.n	14436 <read_field_data+0x32>

	if (!tries)
   145d0:	2326      	movs	r3, #38	; 0x26
   145d2:	18fb      	adds	r3, r7, r3
   145d4:	781b      	ldrb	r3, [r3, #0]
   145d6:	2b00      	cmp	r3, #0
   145d8:	d103      	bne.n	145e2 <read_field_data+0x1de>
		rslt = BME680_W_NO_NEW_DATA;
   145da:	2327      	movs	r3, #39	; 0x27
   145dc:	18fb      	adds	r3, r7, r3
   145de:	2202      	movs	r2, #2
   145e0:	701a      	strb	r2, [r3, #0]

	return rslt;
   145e2:	2327      	movs	r3, #39	; 0x27
   145e4:	18fb      	adds	r3, r7, r3
   145e6:	781b      	ldrb	r3, [r3, #0]
   145e8:	b25b      	sxtb	r3, r3
}
   145ea:	0018      	movs	r0, r3
   145ec:	46bd      	mov	sp, r7
   145ee:	b00a      	add	sp, #40	; 0x28
   145f0:	bdb0      	pop	{r4, r5, r7, pc}
   145f2:	46c0      	nop			; (mov r8, r8)
   145f4:	0003781f 	.word	0x0003781f
   145f8:	0001482f 	.word	0x0001482f
   145fc:	00012ee5 	.word	0x00012ee5
   14600:	00013d31 	.word	0x00013d31
   14604:	00013e21 	.word	0x00013e21
   14608:	00013f79 	.word	0x00013f79
   1460c:	00014099 	.word	0x00014099

00014610 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   14610:	b590      	push	{r4, r7, lr}
   14612:	b085      	sub	sp, #20
   14614:	af00      	add	r7, sp, #0
   14616:	0002      	movs	r2, r0
   14618:	6039      	str	r1, [r7, #0]
   1461a:	1dfb      	adds	r3, r7, #7
   1461c:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   1461e:	230f      	movs	r3, #15
   14620:	18fc      	adds	r4, r7, r3
   14622:	683b      	ldr	r3, [r7, #0]
   14624:	0018      	movs	r0, r3
   14626:	4b3c      	ldr	r3, [pc, #240]	; (14718 <set_mem_page+0x108>)
   14628:	4798      	blx	r3
   1462a:	0003      	movs	r3, r0
   1462c:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1462e:	230f      	movs	r3, #15
   14630:	18fb      	adds	r3, r7, r3
   14632:	781b      	ldrb	r3, [r3, #0]
   14634:	b25b      	sxtb	r3, r3
   14636:	2b00      	cmp	r3, #0
   14638:	d166      	bne.n	14708 <set_mem_page+0xf8>
		if (reg_addr > 0x7f)
   1463a:	1dfb      	adds	r3, r7, #7
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	b25b      	sxtb	r3, r3
   14640:	2b00      	cmp	r3, #0
   14642:	da04      	bge.n	1464e <set_mem_page+0x3e>
			mem_page = BME680_MEM_PAGE1;
   14644:	230e      	movs	r3, #14
   14646:	18fb      	adds	r3, r7, r3
   14648:	2200      	movs	r2, #0
   1464a:	701a      	strb	r2, [r3, #0]
   1464c:	e003      	b.n	14656 <set_mem_page+0x46>
		else
			mem_page = BME680_MEM_PAGE0;
   1464e:	230e      	movs	r3, #14
   14650:	18fb      	adds	r3, r7, r3
   14652:	2210      	movs	r2, #16
   14654:	701a      	strb	r2, [r3, #0]

		if (mem_page != dev->mem_page) {
   14656:	683b      	ldr	r3, [r7, #0]
   14658:	78db      	ldrb	r3, [r3, #3]
   1465a:	220e      	movs	r2, #14
   1465c:	18ba      	adds	r2, r7, r2
   1465e:	7812      	ldrb	r2, [r2, #0]
   14660:	429a      	cmp	r2, r3
   14662:	d051      	beq.n	14708 <set_mem_page+0xf8>
			dev->mem_page = mem_page;
   14664:	683b      	ldr	r3, [r7, #0]
   14666:	220e      	movs	r2, #14
   14668:	18ba      	adds	r2, r7, r2
   1466a:	7812      	ldrb	r2, [r2, #0]
   1466c:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   1466e:	683b      	ldr	r3, [r7, #0]
   14670:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14672:	683b      	ldr	r3, [r7, #0]
   14674:	7858      	ldrb	r0, [r3, #1]
   14676:	230d      	movs	r3, #13
   14678:	18fa      	adds	r2, r7, r3
   1467a:	2301      	movs	r3, #1
   1467c:	21f3      	movs	r1, #243	; 0xf3
   1467e:	47a0      	blx	r4
   14680:	0003      	movs	r3, r0
   14682:	0019      	movs	r1, r3
   14684:	683b      	ldr	r3, [r7, #0]
   14686:	2254      	movs	r2, #84	; 0x54
   14688:	5499      	strb	r1, [r3, r2]
			if (dev->com_rslt != 0)
   1468a:	683b      	ldr	r3, [r7, #0]
   1468c:	2254      	movs	r2, #84	; 0x54
   1468e:	569b      	ldrsb	r3, [r3, r2]
   14690:	2b00      	cmp	r3, #0
   14692:	d003      	beq.n	1469c <set_mem_page+0x8c>
				rslt = BME680_E_COM_FAIL;
   14694:	230f      	movs	r3, #15
   14696:	18fb      	adds	r3, r7, r3
   14698:	22fe      	movs	r2, #254	; 0xfe
   1469a:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK) {
   1469c:	230f      	movs	r3, #15
   1469e:	18fb      	adds	r3, r7, r3
   146a0:	781b      	ldrb	r3, [r3, #0]
   146a2:	b25b      	sxtb	r3, r3
   146a4:	2b00      	cmp	r3, #0
   146a6:	d12f      	bne.n	14708 <set_mem_page+0xf8>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   146a8:	230d      	movs	r3, #13
   146aa:	18fb      	adds	r3, r7, r3
   146ac:	781b      	ldrb	r3, [r3, #0]
   146ae:	2210      	movs	r2, #16
   146b0:	4393      	bics	r3, r2
   146b2:	b2da      	uxtb	r2, r3
   146b4:	230d      	movs	r3, #13
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	701a      	strb	r2, [r3, #0]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   146ba:	683b      	ldr	r3, [r7, #0]
   146bc:	78db      	ldrb	r3, [r3, #3]
   146be:	b25b      	sxtb	r3, r3
   146c0:	2210      	movs	r2, #16
   146c2:	4013      	ands	r3, r2
   146c4:	b25a      	sxtb	r2, r3
   146c6:	230d      	movs	r3, #13
   146c8:	18fb      	adds	r3, r7, r3
   146ca:	781b      	ldrb	r3, [r3, #0]
   146cc:	b25b      	sxtb	r3, r3
   146ce:	4313      	orrs	r3, r2
   146d0:	b25b      	sxtb	r3, r3
   146d2:	b2da      	uxtb	r2, r3
   146d4:	230d      	movs	r3, #13
   146d6:	18fb      	adds	r3, r7, r3
   146d8:	701a      	strb	r2, [r3, #0]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   146da:	683b      	ldr	r3, [r7, #0]
   146dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   146de:	683b      	ldr	r3, [r7, #0]
   146e0:	7858      	ldrb	r0, [r3, #1]
   146e2:	230d      	movs	r3, #13
   146e4:	18fa      	adds	r2, r7, r3
   146e6:	2301      	movs	r3, #1
   146e8:	2173      	movs	r1, #115	; 0x73
   146ea:	47a0      	blx	r4
   146ec:	0003      	movs	r3, r0
   146ee:	0019      	movs	r1, r3
   146f0:	683b      	ldr	r3, [r7, #0]
   146f2:	2254      	movs	r2, #84	; 0x54
   146f4:	5499      	strb	r1, [r3, r2]
					&reg, 1);
				if (dev->com_rslt != 0)
   146f6:	683b      	ldr	r3, [r7, #0]
   146f8:	2254      	movs	r2, #84	; 0x54
   146fa:	569b      	ldrsb	r3, [r3, r2]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d003      	beq.n	14708 <set_mem_page+0xf8>
					rslt = BME680_E_COM_FAIL;
   14700:	230f      	movs	r3, #15
   14702:	18fb      	adds	r3, r7, r3
   14704:	22fe      	movs	r2, #254	; 0xfe
   14706:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return rslt;
   14708:	230f      	movs	r3, #15
   1470a:	18fb      	adds	r3, r7, r3
   1470c:	781b      	ldrb	r3, [r3, #0]
   1470e:	b25b      	sxtb	r3, r3
}
   14710:	0018      	movs	r0, r3
   14712:	46bd      	mov	sp, r7
   14714:	b005      	add	sp, #20
   14716:	bd90      	pop	{r4, r7, pc}
   14718:	0001482f 	.word	0x0001482f

0001471c <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   1471c:	b590      	push	{r4, r7, lr}
   1471e:	b085      	sub	sp, #20
   14720:	af00      	add	r7, sp, #0
   14722:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14724:	230f      	movs	r3, #15
   14726:	18fc      	adds	r4, r7, r3
   14728:	687b      	ldr	r3, [r7, #4]
   1472a:	0018      	movs	r0, r3
   1472c:	4b18      	ldr	r3, [pc, #96]	; (14790 <get_mem_page+0x74>)
   1472e:	4798      	blx	r3
   14730:	0003      	movs	r3, r0
   14732:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   14734:	230f      	movs	r3, #15
   14736:	18fb      	adds	r3, r7, r3
   14738:	781b      	ldrb	r3, [r3, #0]
   1473a:	b25b      	sxtb	r3, r3
   1473c:	2b00      	cmp	r3, #0
   1473e:	d11f      	bne.n	14780 <get_mem_page+0x64>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   14740:	687b      	ldr	r3, [r7, #4]
   14742:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14744:	687b      	ldr	r3, [r7, #4]
   14746:	7858      	ldrb	r0, [r3, #1]
   14748:	230e      	movs	r3, #14
   1474a:	18fa      	adds	r2, r7, r3
   1474c:	2301      	movs	r3, #1
   1474e:	21f3      	movs	r1, #243	; 0xf3
   14750:	47a0      	blx	r4
   14752:	0003      	movs	r3, r0
   14754:	0019      	movs	r1, r3
   14756:	687b      	ldr	r3, [r7, #4]
   14758:	2254      	movs	r2, #84	; 0x54
   1475a:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   1475c:	687b      	ldr	r3, [r7, #4]
   1475e:	2254      	movs	r2, #84	; 0x54
   14760:	569b      	ldrsb	r3, [r3, r2]
   14762:	2b00      	cmp	r3, #0
   14764:	d004      	beq.n	14770 <get_mem_page+0x54>
			rslt = BME680_E_COM_FAIL;
   14766:	230f      	movs	r3, #15
   14768:	18fb      	adds	r3, r7, r3
   1476a:	22fe      	movs	r2, #254	; 0xfe
   1476c:	701a      	strb	r2, [r3, #0]
   1476e:	e007      	b.n	14780 <get_mem_page+0x64>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   14770:	230e      	movs	r3, #14
   14772:	18fb      	adds	r3, r7, r3
   14774:	781b      	ldrb	r3, [r3, #0]
   14776:	2210      	movs	r2, #16
   14778:	4013      	ands	r3, r2
   1477a:	b2da      	uxtb	r2, r3
   1477c:	687b      	ldr	r3, [r7, #4]
   1477e:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
   14780:	230f      	movs	r3, #15
   14782:	18fb      	adds	r3, r7, r3
   14784:	781b      	ldrb	r3, [r3, #0]
   14786:	b25b      	sxtb	r3, r3
}
   14788:	0018      	movs	r0, r3
   1478a:	46bd      	mov	sp, r7
   1478c:	b005      	add	sp, #20
   1478e:	bd90      	pop	{r4, r7, pc}
   14790:	0001482f 	.word	0x0001482f

00014794 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
   14794:	b580      	push	{r7, lr}
   14796:	b086      	sub	sp, #24
   14798:	af00      	add	r7, sp, #0
   1479a:	60f8      	str	r0, [r7, #12]
   1479c:	0008      	movs	r0, r1
   1479e:	0011      	movs	r1, r2
   147a0:	607b      	str	r3, [r7, #4]
   147a2:	230b      	movs	r3, #11
   147a4:	18fb      	adds	r3, r7, r3
   147a6:	1c02      	adds	r2, r0, #0
   147a8:	701a      	strb	r2, [r3, #0]
   147aa:	230a      	movs	r3, #10
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	1c0a      	adds	r2, r1, #0
   147b0:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME680_OK;
   147b2:	2317      	movs	r3, #23
   147b4:	18fb      	adds	r3, r7, r3
   147b6:	2200      	movs	r2, #0
   147b8:	701a      	strb	r2, [r3, #0]

	if (value != NULL) {
   147ba:	68fb      	ldr	r3, [r7, #12]
   147bc:	2b00      	cmp	r3, #0
   147be:	d02a      	beq.n	14816 <boundary_check+0x82>
		/* Check if value is below minimum value */
		if (*value < min) {
   147c0:	68fb      	ldr	r3, [r7, #12]
   147c2:	781b      	ldrb	r3, [r3, #0]
   147c4:	220b      	movs	r2, #11
   147c6:	18ba      	adds	r2, r7, r2
   147c8:	7812      	ldrb	r2, [r2, #0]
   147ca:	429a      	cmp	r2, r3
   147cc:	d90d      	bls.n	147ea <boundary_check+0x56>
			/* Auto correct the invalid value to minimum value */
			*value = min;
   147ce:	68fb      	ldr	r3, [r7, #12]
   147d0:	220b      	movs	r2, #11
   147d2:	18ba      	adds	r2, r7, r2
   147d4:	7812      	ldrb	r2, [r2, #0]
   147d6:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	2246      	movs	r2, #70	; 0x46
   147dc:	5c9b      	ldrb	r3, [r3, r2]
   147de:	2201      	movs	r2, #1
   147e0:	4313      	orrs	r3, r2
   147e2:	b2d9      	uxtb	r1, r3
   147e4:	687b      	ldr	r3, [r7, #4]
   147e6:	2246      	movs	r2, #70	; 0x46
   147e8:	5499      	strb	r1, [r3, r2]
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   147ea:	68fb      	ldr	r3, [r7, #12]
   147ec:	781b      	ldrb	r3, [r3, #0]
   147ee:	220a      	movs	r2, #10
   147f0:	18ba      	adds	r2, r7, r2
   147f2:	7812      	ldrb	r2, [r2, #0]
   147f4:	429a      	cmp	r2, r3
   147f6:	d212      	bcs.n	1481e <boundary_check+0x8a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   147f8:	68fb      	ldr	r3, [r7, #12]
   147fa:	220a      	movs	r2, #10
   147fc:	18ba      	adds	r2, r7, r2
   147fe:	7812      	ldrb	r2, [r2, #0]
   14800:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   14802:	687b      	ldr	r3, [r7, #4]
   14804:	2246      	movs	r2, #70	; 0x46
   14806:	5c9b      	ldrb	r3, [r3, r2]
   14808:	2202      	movs	r2, #2
   1480a:	4313      	orrs	r3, r2
   1480c:	b2d9      	uxtb	r1, r3
   1480e:	687b      	ldr	r3, [r7, #4]
   14810:	2246      	movs	r2, #70	; 0x46
   14812:	5499      	strb	r1, [r3, r2]
   14814:	e003      	b.n	1481e <boundary_check+0x8a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   14816:	2317      	movs	r3, #23
   14818:	18fb      	adds	r3, r7, r3
   1481a:	22ff      	movs	r2, #255	; 0xff
   1481c:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   1481e:	2317      	movs	r3, #23
   14820:	18fb      	adds	r3, r7, r3
   14822:	781b      	ldrb	r3, [r3, #0]
   14824:	b25b      	sxtb	r3, r3
}
   14826:	0018      	movs	r0, r3
   14828:	46bd      	mov	sp, r7
   1482a:	b006      	add	sp, #24
   1482c:	bd80      	pop	{r7, pc}

0001482e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
   1482e:	b580      	push	{r7, lr}
   14830:	b084      	sub	sp, #16
   14832:	af00      	add	r7, sp, #0
   14834:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms_bme == NULL)) {
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	2b00      	cmp	r3, #0
   1483a:	d00b      	beq.n	14854 <null_ptr_check+0x26>
   1483c:	687b      	ldr	r3, [r7, #4]
   1483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14840:	2b00      	cmp	r3, #0
   14842:	d007      	beq.n	14854 <null_ptr_check+0x26>
   14844:	687b      	ldr	r3, [r7, #4]
   14846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   14848:	2b00      	cmp	r3, #0
   1484a:	d003      	beq.n	14854 <null_ptr_check+0x26>
   1484c:	687b      	ldr	r3, [r7, #4]
   1484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   14850:	2b00      	cmp	r3, #0
   14852:	d104      	bne.n	1485e <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   14854:	230f      	movs	r3, #15
   14856:	18fb      	adds	r3, r7, r3
   14858:	22ff      	movs	r2, #255	; 0xff
   1485a:	701a      	strb	r2, [r3, #0]
   1485c:	e003      	b.n	14866 <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
   1485e:	230f      	movs	r3, #15
   14860:	18fb      	adds	r3, r7, r3
   14862:	2200      	movs	r2, #0
   14864:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   14866:	230f      	movs	r3, #15
   14868:	18fb      	adds	r3, r7, r3
   1486a:	781b      	ldrb	r3, [r3, #0]
   1486c:	b25b      	sxtb	r3, r3
}
   1486e:	0018      	movs	r0, r3
   14870:	46bd      	mov	sp, r7
   14872:	b004      	add	sp, #16
   14874:	bd80      	pop	{r7, pc}
	...

00014878 <bme_write>:
//read buffer and write buffer function
uint8_t msgOutImu[64]; ///<USE ME AS A BUFFER FOR platform_write and platform_read
I2C_Data bmeData;
int8_t bme_write(uint8_t dev_id,uint8_t reg, uint8_t *bufp,uint16_t len)
{
   14878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1487a:	b087      	sub	sp, #28
   1487c:	af00      	add	r7, sp, #0
   1487e:	0006      	movs	r6, r0
   14880:	0008      	movs	r0, r1
   14882:	603a      	str	r2, [r7, #0]
   14884:	0019      	movs	r1, r3
   14886:	1dfb      	adds	r3, r7, #7
   14888:	1c32      	adds	r2, r6, #0
   1488a:	701a      	strb	r2, [r3, #0]
   1488c:	1dbb      	adds	r3, r7, #6
   1488e:	1c02      	adds	r2, r0, #0
   14890:	701a      	strb	r2, [r3, #0]
   14892:	1d3b      	adds	r3, r7, #4
   14894:	1c0a      	adds	r2, r1, #0
   14896:	801a      	strh	r2, [r3, #0]
	int8_t error = ERROR_NONE;
   14898:	230f      	movs	r3, #15
   1489a:	18fb      	adds	r3, r7, r3
   1489c:	2200      	movs	r2, #0
   1489e:	701a      	strb	r2, [r3, #0]

	msgOutImu[0] = reg;
   148a0:	4b25      	ldr	r3, [pc, #148]	; (14938 <bme_write+0xc0>)
   148a2:	1dba      	adds	r2, r7, #6
   148a4:	7812      	ldrb	r2, [r2, #0]
   148a6:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148a8:	2200      	movs	r2, #0
   148aa:	2300      	movs	r3, #0
   148ac:	613a      	str	r2, [r7, #16]
   148ae:	617b      	str	r3, [r7, #20]
   148b0:	e015      	b.n	148de <bme_write+0x66>
		msgOutImu[i+1] = bufp[i];
   148b2:	693a      	ldr	r2, [r7, #16]
   148b4:	697b      	ldr	r3, [r7, #20]
   148b6:	2001      	movs	r0, #1
   148b8:	2100      	movs	r1, #0
   148ba:	1812      	adds	r2, r2, r0
   148bc:	414b      	adcs	r3, r1
   148be:	6939      	ldr	r1, [r7, #16]
   148c0:	6838      	ldr	r0, [r7, #0]
   148c2:	1841      	adds	r1, r0, r1
   148c4:	7808      	ldrb	r0, [r1, #0]
   148c6:	491c      	ldr	r1, [pc, #112]	; (14938 <bme_write+0xc0>)
   148c8:	188b      	adds	r3, r1, r2
   148ca:	1c02      	adds	r2, r0, #0
   148cc:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148ce:	693a      	ldr	r2, [r7, #16]
   148d0:	697b      	ldr	r3, [r7, #20]
   148d2:	2001      	movs	r0, #1
   148d4:	2100      	movs	r1, #0
   148d6:	1812      	adds	r2, r2, r0
   148d8:	414b      	adcs	r3, r1
   148da:	613a      	str	r2, [r7, #16]
   148dc:	617b      	str	r3, [r7, #20]
   148de:	1d3b      	adds	r3, r7, #4
   148e0:	881b      	ldrh	r3, [r3, #0]
   148e2:	b29b      	uxth	r3, r3
   148e4:	001c      	movs	r4, r3
   148e6:	2300      	movs	r3, #0
   148e8:	001d      	movs	r5, r3
   148ea:	697b      	ldr	r3, [r7, #20]
   148ec:	42ab      	cmp	r3, r5
   148ee:	d3e0      	bcc.n	148b2 <bme_write+0x3a>
   148f0:	697b      	ldr	r3, [r7, #20]
   148f2:	42ab      	cmp	r3, r5
   148f4:	d102      	bne.n	148fc <bme_write+0x84>
   148f6:	693b      	ldr	r3, [r7, #16]
   148f8:	42a3      	cmp	r3, r4
   148fa:	d3da      	bcc.n	148b2 <bme_write+0x3a>
	}

	bmeData.address = 0x76;
   148fc:	4b0f      	ldr	r3, [pc, #60]	; (1493c <bme_write+0xc4>)
   148fe:	2276      	movs	r2, #118	; 0x76
   14900:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   14902:	4b0e      	ldr	r3, [pc, #56]	; (1493c <bme_write+0xc4>)
   14904:	4a0c      	ldr	r2, [pc, #48]	; (14938 <bme_write+0xc0>)
   14906:	605a      	str	r2, [r3, #4]
	bmeData.lenOut = len + 1;
   14908:	1d3b      	adds	r3, r7, #4
   1490a:	881b      	ldrh	r3, [r3, #0]
   1490c:	3301      	adds	r3, #1
   1490e:	b29a      	uxth	r2, r3
   14910:	4b0a      	ldr	r3, [pc, #40]	; (1493c <bme_write+0xc4>)
   14912:	81da      	strh	r2, [r3, #14]

	error = (int8_t)I2cWriteDataWait(&bmeData, 100);
   14914:	4b09      	ldr	r3, [pc, #36]	; (1493c <bme_write+0xc4>)
   14916:	2164      	movs	r1, #100	; 0x64
   14918:	0018      	movs	r0, r3
   1491a:	4b09      	ldr	r3, [pc, #36]	; (14940 <bme_write+0xc8>)
   1491c:	4798      	blx	r3
   1491e:	0002      	movs	r2, r0
   14920:	230f      	movs	r3, #15
   14922:	18fb      	adds	r3, r7, r3
   14924:	701a      	strb	r2, [r3, #0]
	return error;
   14926:	230f      	movs	r3, #15
   14928:	18fb      	adds	r3, r7, r3
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	b25b      	sxtb	r3, r3
}
   1492e:	0018      	movs	r0, r3
   14930:	46bd      	mov	sp, r7
   14932:	b007      	add	sp, #28
   14934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14936:	46c0      	nop			; (mov r8, r8)
   14938:	200045f0 	.word	0x200045f0
   1493c:	20004630 	.word	0x20004630
   14940:	00015aad 	.word	0x00015aad

00014944 <bme_read>:
int8_t bme_read(uint8_t dev_id,uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14944:	b590      	push	{r4, r7, lr}
   14946:	b085      	sub	sp, #20
   14948:	af00      	add	r7, sp, #0
   1494a:	0004      	movs	r4, r0
   1494c:	0008      	movs	r0, r1
   1494e:	603a      	str	r2, [r7, #0]
   14950:	0019      	movs	r1, r3
   14952:	1dfb      	adds	r3, r7, #7
   14954:	1c22      	adds	r2, r4, #0
   14956:	701a      	strb	r2, [r3, #0]
   14958:	1dbb      	adds	r3, r7, #6
   1495a:	1c02      	adds	r2, r0, #0
   1495c:	701a      	strb	r2, [r3, #0]
   1495e:	1d3b      	adds	r3, r7, #4
   14960:	1c0a      	adds	r2, r1, #0
   14962:	801a      	strh	r2, [r3, #0]
	
	int8_t error = ERROR_NONE;
   14964:	230f      	movs	r3, #15
   14966:	18fb      	adds	r3, r7, r3
   14968:	2200      	movs	r2, #0
   1496a:	701a      	strb	r2, [r3, #0]

	bmeData.address = 0x76;
   1496c:	4b12      	ldr	r3, [pc, #72]	; (149b8 <bme_read+0x74>)
   1496e:	2276      	movs	r2, #118	; 0x76
   14970:	701a      	strb	r2, [r3, #0]
	bmeData.lenIn = len;
   14972:	4b11      	ldr	r3, [pc, #68]	; (149b8 <bme_read+0x74>)
   14974:	1d3a      	adds	r2, r7, #4
   14976:	8812      	ldrh	r2, [r2, #0]
   14978:	819a      	strh	r2, [r3, #12]
	bmeData.msgIn = bufp;
   1497a:	4b0f      	ldr	r3, [pc, #60]	; (149b8 <bme_read+0x74>)
   1497c:	683a      	ldr	r2, [r7, #0]
   1497e:	609a      	str	r2, [r3, #8]
	bmeData.lenOut = 1;
   14980:	4b0d      	ldr	r3, [pc, #52]	; (149b8 <bme_read+0x74>)
   14982:	2201      	movs	r2, #1
   14984:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   14986:	4b0d      	ldr	r3, [pc, #52]	; (149bc <bme_read+0x78>)
   14988:	1dba      	adds	r2, r7, #6
   1498a:	7812      	ldrb	r2, [r2, #0]
   1498c:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   1498e:	4b0a      	ldr	r3, [pc, #40]	; (149b8 <bme_read+0x74>)
   14990:	4a0a      	ldr	r2, [pc, #40]	; (149bc <bme_read+0x78>)
   14992:	605a      	str	r2, [r3, #4]

	error = (int8_t)I2cReadDataWait(&bmeData, 50, 100);
   14994:	4b08      	ldr	r3, [pc, #32]	; (149b8 <bme_read+0x74>)
   14996:	2264      	movs	r2, #100	; 0x64
   14998:	2132      	movs	r1, #50	; 0x32
   1499a:	0018      	movs	r0, r3
   1499c:	4b08      	ldr	r3, [pc, #32]	; (149c0 <bme_read+0x7c>)
   1499e:	4798      	blx	r3
   149a0:	0002      	movs	r2, r0
   149a2:	230f      	movs	r3, #15
   149a4:	18fb      	adds	r3, r7, r3
   149a6:	701a      	strb	r2, [r3, #0]
	return error;
   149a8:	230f      	movs	r3, #15
   149aa:	18fb      	adds	r3, r7, r3
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	b25b      	sxtb	r3, r3
}
   149b0:	0018      	movs	r0, r3
   149b2:	46bd      	mov	sp, r7
   149b4:	b005      	add	sp, #20
   149b6:	bd90      	pop	{r4, r7, pc}
   149b8:	20004630 	.word	0x20004630
   149bc:	200045f0 	.word	0x200045f0
   149c0:	00015b85 	.word	0x00015b85

000149c4 <user_delay_ms>:
void user_delay_ms(uint32_t period){
   149c4:	b580      	push	{r7, lr}
   149c6:	b084      	sub	sp, #16
   149c8:	af00      	add	r7, sp, #0
   149ca:	6078      	str	r0, [r7, #4]
	{
	for(int j = 0;j<period;j++)
   149cc:	2300      	movs	r3, #0
   149ce:	60fb      	str	r3, [r7, #12]
   149d0:	e00e      	b.n	149f0 <user_delay_ms+0x2c>
	for(int i = 0;i<307;i++)
   149d2:	2300      	movs	r3, #0
   149d4:	60bb      	str	r3, [r7, #8]
   149d6:	e003      	b.n	149e0 <user_delay_ms+0x1c>
	__asm("nop");
   149d8:	46c0      	nop			; (mov r8, r8)
	for(int i = 0;i<307;i++)
   149da:	68bb      	ldr	r3, [r7, #8]
   149dc:	3301      	adds	r3, #1
   149de:	60bb      	str	r3, [r7, #8]
   149e0:	68ba      	ldr	r2, [r7, #8]
   149e2:	2399      	movs	r3, #153	; 0x99
   149e4:	005b      	lsls	r3, r3, #1
   149e6:	429a      	cmp	r2, r3
   149e8:	ddf6      	ble.n	149d8 <user_delay_ms+0x14>
	for(int j = 0;j<period;j++)
   149ea:	68fb      	ldr	r3, [r7, #12]
   149ec:	3301      	adds	r3, #1
   149ee:	60fb      	str	r3, [r7, #12]
   149f0:	68fa      	ldr	r2, [r7, #12]
   149f2:	687b      	ldr	r3, [r7, #4]
   149f4:	429a      	cmp	r2, r3
   149f6:	d3ec      	bcc.n	149d2 <user_delay_ms+0xe>
	}
}
   149f8:	46c0      	nop			; (mov r8, r8)
   149fa:	46bd      	mov	sp, r7
   149fc:	b004      	add	sp, #16
   149fe:	bd80      	pop	{r7, pc}

00014a00 <init_bme680>:
float bme_temperature = 0;
float bme_humidity = 0;
float bme_pressure = 0;
int bme_gas_resistence = 0;

void init_bme680(){
   14a00:	b590      	push	{r4, r7, lr}
   14a02:	b083      	sub	sp, #12
   14a04:	af00      	add	r7, sp, #0
	int8_t ret;
	gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
   14a06:	4b2b      	ldr	r3, [pc, #172]	; (14ab4 <init_bme680+0xb4>)
   14a08:	2276      	movs	r2, #118	; 0x76
   14a0a:	705a      	strb	r2, [r3, #1]
	gas_sensor.intf = BME680_I2C_INTF;
   14a0c:	4b29      	ldr	r3, [pc, #164]	; (14ab4 <init_bme680+0xb4>)
   14a0e:	2201      	movs	r2, #1
   14a10:	709a      	strb	r2, [r3, #2]
	gas_sensor.write = bme_write;
   14a12:	4b28      	ldr	r3, [pc, #160]	; (14ab4 <init_bme680+0xb4>)
   14a14:	4a28      	ldr	r2, [pc, #160]	; (14ab8 <init_bme680+0xb8>)
   14a16:	64da      	str	r2, [r3, #76]	; 0x4c
	gas_sensor.read = bme_read;
   14a18:	4b26      	ldr	r3, [pc, #152]	; (14ab4 <init_bme680+0xb4>)
   14a1a:	4a28      	ldr	r2, [pc, #160]	; (14abc <init_bme680+0xbc>)
   14a1c:	649a      	str	r2, [r3, #72]	; 0x48
	gas_sensor.delay_ms_bme = user_delay_ms;
   14a1e:	4b25      	ldr	r3, [pc, #148]	; (14ab4 <init_bme680+0xb4>)
   14a20:	4a27      	ldr	r2, [pc, #156]	; (14ac0 <init_bme680+0xc0>)
   14a22:	651a      	str	r2, [r3, #80]	; 0x50
	gas_sensor.amb_temp = 25;
   14a24:	4b23      	ldr	r3, [pc, #140]	; (14ab4 <init_bme680+0xb4>)
   14a26:	2219      	movs	r2, #25
   14a28:	711a      	strb	r2, [r3, #4]
	ret = BME680_OK;
   14a2a:	1dfb      	adds	r3, r7, #7
   14a2c:	2200      	movs	r2, #0
   14a2e:	701a      	strb	r2, [r3, #0]
	ret = bme680_init(&gas_sensor);
   14a30:	1dfc      	adds	r4, r7, #7
   14a32:	4b20      	ldr	r3, [pc, #128]	; (14ab4 <init_bme680+0xb4>)
   14a34:	0018      	movs	r0, r3
   14a36:	4b23      	ldr	r3, [pc, #140]	; (14ac4 <init_bme680+0xc4>)
   14a38:	4798      	blx	r3
   14a3a:	0003      	movs	r3, r0
   14a3c:	7023      	strb	r3, [r4, #0]
	
	
	uint8_t set_required_settings;
	gas_sensor.tph_sett.os_hum = BME680_OS_2X;
   14a3e:	4b1d      	ldr	r3, [pc, #116]	; (14ab4 <init_bme680+0xb4>)
   14a40:	2238      	movs	r2, #56	; 0x38
   14a42:	2102      	movs	r1, #2
   14a44:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_pres = BME680_OS_4X;
   14a46:	4b1b      	ldr	r3, [pc, #108]	; (14ab4 <init_bme680+0xb4>)
   14a48:	223a      	movs	r2, #58	; 0x3a
   14a4a:	2103      	movs	r1, #3
   14a4c:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_temp = BME680_OS_8X;
   14a4e:	4b19      	ldr	r3, [pc, #100]	; (14ab4 <init_bme680+0xb4>)
   14a50:	2239      	movs	r2, #57	; 0x39
   14a52:	2104      	movs	r1, #4
   14a54:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
   14a56:	4b17      	ldr	r3, [pc, #92]	; (14ab4 <init_bme680+0xb4>)
   14a58:	223b      	movs	r2, #59	; 0x3b
   14a5a:	2102      	movs	r1, #2
   14a5c:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   14a5e:	4b15      	ldr	r3, [pc, #84]	; (14ab4 <init_bme680+0xb4>)
   14a60:	223e      	movs	r2, #62	; 0x3e
   14a62:	2101      	movs	r1, #1
   14a64:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_temp = 320;
   14a66:	4b13      	ldr	r3, [pc, #76]	; (14ab4 <init_bme680+0xb4>)
   14a68:	2240      	movs	r2, #64	; 0x40
   14a6a:	21a0      	movs	r1, #160	; 0xa0
   14a6c:	0049      	lsls	r1, r1, #1
   14a6e:	5299      	strh	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_dur = 150;
   14a70:	4b10      	ldr	r3, [pc, #64]	; (14ab4 <init_bme680+0xb4>)
   14a72:	2242      	movs	r2, #66	; 0x42
   14a74:	2196      	movs	r1, #150	; 0x96
   14a76:	5299      	strh	r1, [r3, r2]
	gas_sensor.power_mode = BME680_FORCED_MODE;
   14a78:	4b0e      	ldr	r3, [pc, #56]	; (14ab4 <init_bme680+0xb4>)
   14a7a:	2244      	movs	r2, #68	; 0x44
   14a7c:	2101      	movs	r1, #1
   14a7e:	5499      	strb	r1, [r3, r2]
	set_required_settings =BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL |BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;
   14a80:	1dbb      	adds	r3, r7, #6
   14a82:	22df      	movs	r2, #223	; 0xdf
   14a84:	701a      	strb	r2, [r3, #0]
	
	ret = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
   14a86:	1dbb      	adds	r3, r7, #6
   14a88:	781b      	ldrb	r3, [r3, #0]
   14a8a:	b29b      	uxth	r3, r3
   14a8c:	1dfc      	adds	r4, r7, #7
   14a8e:	4a09      	ldr	r2, [pc, #36]	; (14ab4 <init_bme680+0xb4>)
   14a90:	0011      	movs	r1, r2
   14a92:	0018      	movs	r0, r3
   14a94:	4b0c      	ldr	r3, [pc, #48]	; (14ac8 <init_bme680+0xc8>)
   14a96:	4798      	blx	r3
   14a98:	0003      	movs	r3, r0
   14a9a:	7023      	strb	r3, [r4, #0]

	ret = bme680_set_sensor_mode(&gas_sensor);
   14a9c:	1dfc      	adds	r4, r7, #7
   14a9e:	4b05      	ldr	r3, [pc, #20]	; (14ab4 <init_bme680+0xb4>)
   14aa0:	0018      	movs	r0, r3
   14aa2:	4b0a      	ldr	r3, [pc, #40]	; (14acc <init_bme680+0xcc>)
   14aa4:	4798      	blx	r3
   14aa6:	0003      	movs	r3, r0
   14aa8:	7023      	strb	r3, [r4, #0]

}
   14aaa:	46c0      	nop			; (mov r8, r8)
   14aac:	46bd      	mov	sp, r7
   14aae:	b003      	add	sp, #12
   14ab0:	bd90      	pop	{r4, r7, pc}
   14ab2:	46c0      	nop			; (mov r8, r8)
   14ab4:	20004640 	.word	0x20004640
   14ab8:	00014879 	.word	0x00014879
   14abc:	00014945 	.word	0x00014945
   14ac0:	000149c5 	.word	0x000149c5
   14ac4:	00012e41 	.word	0x00012e41
   14ac8:	000131d1 	.word	0x000131d1
   14acc:	000136e9 	.word	0x000136e9

00014ad0 <read_sensor_data>:
void read_sensor_data(){
   14ad0:	b580      	push	{r7, lr}
   14ad2:	b082      	sub	sp, #8
   14ad4:	af00      	add	r7, sp, #0
	init_bme680();
   14ad6:	4b2a      	ldr	r3, [pc, #168]	; (14b80 <read_sensor_data+0xb0>)
   14ad8:	4798      	blx	r3
	bme_temperature = 0;
   14ada:	4b2a      	ldr	r3, [pc, #168]	; (14b84 <read_sensor_data+0xb4>)
   14adc:	2200      	movs	r2, #0
   14ade:	601a      	str	r2, [r3, #0]
	bme_humidity = 0;
   14ae0:	4b29      	ldr	r3, [pc, #164]	; (14b88 <read_sensor_data+0xb8>)
   14ae2:	2200      	movs	r2, #0
   14ae4:	601a      	str	r2, [r3, #0]
	bme_pressure = 0;
   14ae6:	4b29      	ldr	r3, [pc, #164]	; (14b8c <read_sensor_data+0xbc>)
   14ae8:	2200      	movs	r2, #0
   14aea:	601a      	str	r2, [r3, #0]
	uint8_t rslt;
	uint16_t meas_period;
	bme680_get_profile_dur(&meas_period, &gas_sensor);
   14aec:	4a28      	ldr	r2, [pc, #160]	; (14b90 <read_sensor_data+0xc0>)
   14aee:	1d3b      	adds	r3, r7, #4
   14af0:	0011      	movs	r1, r2
   14af2:	0018      	movs	r0, r3
   14af4:	4b27      	ldr	r3, [pc, #156]	; (14b94 <read_sensor_data+0xc4>)
   14af6:	4798      	blx	r3
	
	user_delay_ms(meas_period); /* Delay till the measurement is ready */
   14af8:	1d3b      	adds	r3, r7, #4
   14afa:	881b      	ldrh	r3, [r3, #0]
   14afc:	0018      	movs	r0, r3
   14afe:	4b26      	ldr	r3, [pc, #152]	; (14b98 <read_sensor_data+0xc8>)
   14b00:	4798      	blx	r3

	rslt = bme680_get_sensor_data(&data, &gas_sensor);
   14b02:	4a23      	ldr	r2, [pc, #140]	; (14b90 <read_sensor_data+0xc0>)
   14b04:	4b25      	ldr	r3, [pc, #148]	; (14b9c <read_sensor_data+0xcc>)
   14b06:	0011      	movs	r1, r2
   14b08:	0018      	movs	r0, r3
   14b0a:	4b25      	ldr	r3, [pc, #148]	; (14ba0 <read_sensor_data+0xd0>)
   14b0c:	4798      	blx	r3
   14b0e:	0003      	movs	r3, r0
   14b10:	001a      	movs	r2, r3
   14b12:	1dfb      	adds	r3, r7, #7
   14b14:	701a      	strb	r2, [r3, #0]
	
	bme_temperature = data.temperature / 100.0f;
   14b16:	4b21      	ldr	r3, [pc, #132]	; (14b9c <read_sensor_data+0xcc>)
   14b18:	2204      	movs	r2, #4
   14b1a:	5e9a      	ldrsh	r2, [r3, r2]
   14b1c:	4b21      	ldr	r3, [pc, #132]	; (14ba4 <read_sensor_data+0xd4>)
   14b1e:	0010      	movs	r0, r2
   14b20:	4798      	blx	r3
   14b22:	1c02      	adds	r2, r0, #0
   14b24:	4b20      	ldr	r3, [pc, #128]	; (14ba8 <read_sensor_data+0xd8>)
   14b26:	4921      	ldr	r1, [pc, #132]	; (14bac <read_sensor_data+0xdc>)
   14b28:	1c10      	adds	r0, r2, #0
   14b2a:	4798      	blx	r3
   14b2c:	1c03      	adds	r3, r0, #0
   14b2e:	1c1a      	adds	r2, r3, #0
   14b30:	4b14      	ldr	r3, [pc, #80]	; (14b84 <read_sensor_data+0xb4>)
   14b32:	601a      	str	r2, [r3, #0]
	bme_pressure = data.pressure / 100.0f;
   14b34:	4b19      	ldr	r3, [pc, #100]	; (14b9c <read_sensor_data+0xcc>)
   14b36:	689a      	ldr	r2, [r3, #8]
   14b38:	4b1d      	ldr	r3, [pc, #116]	; (14bb0 <read_sensor_data+0xe0>)
   14b3a:	0010      	movs	r0, r2
   14b3c:	4798      	blx	r3
   14b3e:	1c02      	adds	r2, r0, #0
   14b40:	4b19      	ldr	r3, [pc, #100]	; (14ba8 <read_sensor_data+0xd8>)
   14b42:	491a      	ldr	r1, [pc, #104]	; (14bac <read_sensor_data+0xdc>)
   14b44:	1c10      	adds	r0, r2, #0
   14b46:	4798      	blx	r3
   14b48:	1c03      	adds	r3, r0, #0
   14b4a:	1c1a      	adds	r2, r3, #0
   14b4c:	4b0f      	ldr	r3, [pc, #60]	; (14b8c <read_sensor_data+0xbc>)
   14b4e:	601a      	str	r2, [r3, #0]
	bme_humidity = data.humidity / 1000.0f;
   14b50:	4b12      	ldr	r3, [pc, #72]	; (14b9c <read_sensor_data+0xcc>)
   14b52:	68da      	ldr	r2, [r3, #12]
   14b54:	4b16      	ldr	r3, [pc, #88]	; (14bb0 <read_sensor_data+0xe0>)
   14b56:	0010      	movs	r0, r2
   14b58:	4798      	blx	r3
   14b5a:	1c02      	adds	r2, r0, #0
   14b5c:	4b12      	ldr	r3, [pc, #72]	; (14ba8 <read_sensor_data+0xd8>)
   14b5e:	4915      	ldr	r1, [pc, #84]	; (14bb4 <read_sensor_data+0xe4>)
   14b60:	1c10      	adds	r0, r2, #0
   14b62:	4798      	blx	r3
   14b64:	1c03      	adds	r3, r0, #0
   14b66:	1c1a      	adds	r2, r3, #0
   14b68:	4b07      	ldr	r3, [pc, #28]	; (14b88 <read_sensor_data+0xb8>)
   14b6a:	601a      	str	r2, [r3, #0]
	bme_gas_resistence = data.gas_resistance;
   14b6c:	4b0b      	ldr	r3, [pc, #44]	; (14b9c <read_sensor_data+0xcc>)
   14b6e:	691b      	ldr	r3, [r3, #16]
   14b70:	001a      	movs	r2, r3
   14b72:	4b11      	ldr	r3, [pc, #68]	; (14bb8 <read_sensor_data+0xe8>)
   14b74:	601a      	str	r2, [r3, #0]
}
   14b76:	46c0      	nop			; (mov r8, r8)
   14b78:	46bd      	mov	sp, r7
   14b7a:	b002      	add	sp, #8
   14b7c:	bd80      	pop	{r7, pc}
   14b7e:	46c0      	nop			; (mov r8, r8)
   14b80:	00014a01 	.word	0x00014a01
   14b84:	20000384 	.word	0x20000384
   14b88:	20000388 	.word	0x20000388
   14b8c:	2000038c 	.word	0x2000038c
   14b90:	20004640 	.word	0x20004640
   14b94:	00013809 	.word	0x00013809
   14b98:	000149c5 	.word	0x000149c5
   14b9c:	20004698 	.word	0x20004698
   14ba0:	000138d5 	.word	0x000138d5
   14ba4:	000359f1 	.word	0x000359f1
   14ba8:	00035059 	.word	0x00035059
   14bac:	42c80000 	.word	0x42c80000
   14bb0:	00035a91 	.word	0x00035a91
   14bb4:	447a0000 	.word	0x447a0000
   14bb8:	20000390 	.word	0x20000390

00014bbc <getTemperature>:

float getTemperature(){
   14bbc:	b580      	push	{r7, lr}
   14bbe:	af00      	add	r7, sp, #0
	return bme_temperature;
   14bc0:	4b02      	ldr	r3, [pc, #8]	; (14bcc <getTemperature+0x10>)
   14bc2:	681b      	ldr	r3, [r3, #0]
}
   14bc4:	1c18      	adds	r0, r3, #0
   14bc6:	46bd      	mov	sp, r7
   14bc8:	bd80      	pop	{r7, pc}
   14bca:	46c0      	nop			; (mov r8, r8)
   14bcc:	20000384 	.word	0x20000384

00014bd0 <getHumidity>:
float getHumidity(){
   14bd0:	b580      	push	{r7, lr}
   14bd2:	af00      	add	r7, sp, #0
	return bme_humidity;
   14bd4:	4b02      	ldr	r3, [pc, #8]	; (14be0 <getHumidity+0x10>)
   14bd6:	681b      	ldr	r3, [r3, #0]
}
   14bd8:	1c18      	adds	r0, r3, #0
   14bda:	46bd      	mov	sp, r7
   14bdc:	bd80      	pop	{r7, pc}
   14bde:	46c0      	nop			; (mov r8, r8)
   14be0:	20000388 	.word	0x20000388

00014be4 <getPressure>:
float getPressure(){
   14be4:	b580      	push	{r7, lr}
   14be6:	af00      	add	r7, sp, #0
	return bme_pressure;
   14be8:	4b02      	ldr	r3, [pc, #8]	; (14bf4 <getPressure+0x10>)
   14bea:	681b      	ldr	r3, [r3, #0]
}
   14bec:	1c18      	adds	r0, r3, #0
   14bee:	46bd      	mov	sp, r7
   14bf0:	bd80      	pop	{r7, pc}
   14bf2:	46c0      	nop			; (mov r8, r8)
   14bf4:	2000038c 	.word	0x2000038c

00014bf8 <getGasResistance>:
int getGasResistance(){
   14bf8:	b580      	push	{r7, lr}
   14bfa:	af00      	add	r7, sp, #0
	return bme_gas_resistence;
   14bfc:	4b02      	ldr	r3, [pc, #8]	; (14c08 <getGasResistance+0x10>)
   14bfe:	681b      	ldr	r3, [r3, #0]
   14c00:	0018      	movs	r0, r3
   14c02:	46bd      	mov	sp, r7
   14c04:	bd80      	pop	{r7, pc}
   14c06:	46c0      	nop			; (mov r8, r8)
   14c08:	20000390 	.word	0x20000390

00014c0c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14c0c:	b580      	push	{r7, lr}
   14c0e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14c10:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14c14:	4b02      	ldr	r3, [pc, #8]	; (14c20 <NVIC_SystemReset+0x14>)
   14c16:	4a03      	ldr	r2, [pc, #12]	; (14c24 <NVIC_SystemReset+0x18>)
   14c18:	60da      	str	r2, [r3, #12]
   14c1a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14c1e:	e7fe      	b.n	14c1e <NVIC_SystemReset+0x12>
   14c20:	e000ed00 	.word	0xe000ed00
   14c24:	05fa0004 	.word	0x05fa0004

00014c28 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   14c28:	b580      	push	{r7, lr}
   14c2a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14c2c:	4b02      	ldr	r3, [pc, #8]	; (14c38 <system_reset+0x10>)
   14c2e:	4798      	blx	r3
}
   14c30:	46c0      	nop			; (mov r8, r8)
   14c32:	46bd      	mov	sp, r7
   14c34:	bd80      	pop	{r7, pc}
   14c36:	46c0      	nop			; (mov r8, r8)
   14c38:	00014c0d 	.word	0x00014c0d

00014c3c <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   14c3c:	b580      	push	{r7, lr}
   14c3e:	b086      	sub	sp, #24
   14c40:	af00      	add	r7, sp, #0
   14c42:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   14c44:	4b9c      	ldr	r3, [pc, #624]	; (14eb8 <vCommandConsoleTask+0x27c>)
   14c46:	0018      	movs	r0, r3
   14c48:	4b9c      	ldr	r3, [pc, #624]	; (14ebc <vCommandConsoleTask+0x280>)
   14c4a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   14c4c:	4b9c      	ldr	r3, [pc, #624]	; (14ec0 <vCommandConsoleTask+0x284>)
   14c4e:	0018      	movs	r0, r3
   14c50:	4b9a      	ldr	r3, [pc, #616]	; (14ebc <vCommandConsoleTask+0x280>)
   14c52:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   14c54:	4b9b      	ldr	r3, [pc, #620]	; (14ec4 <vCommandConsoleTask+0x288>)
   14c56:	0018      	movs	r0, r3
   14c58:	4b98      	ldr	r3, [pc, #608]	; (14ebc <vCommandConsoleTask+0x280>)
   14c5a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   14c5c:	4b9a      	ldr	r3, [pc, #616]	; (14ec8 <vCommandConsoleTask+0x28c>)
   14c5e:	0018      	movs	r0, r3
   14c60:	4b96      	ldr	r3, [pc, #600]	; (14ebc <vCommandConsoleTask+0x280>)
   14c62:	4798      	blx	r3
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    // FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    // FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   14c64:	4b99      	ldr	r3, [pc, #612]	; (14ecc <vCommandConsoleTask+0x290>)
   14c66:	0018      	movs	r0, r3
   14c68:	4b94      	ldr	r3, [pc, #592]	; (14ebc <vCommandConsoleTask+0x280>)
   14c6a:	4798      	blx	r3
	//FreeRTOS_CLIRegisterCommand(&xDC);
	//FreeRTOS_CLIRegisterCommand(&xClear);
	FreeRTOS_CLIRegisterCommand(&xLock);
   14c6c:	4b98      	ldr	r3, [pc, #608]	; (14ed0 <vCommandConsoleTask+0x294>)
   14c6e:	0018      	movs	r0, r3
   14c70:	4b92      	ldr	r3, [pc, #584]	; (14ebc <vCommandConsoleTask+0x280>)
   14c72:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xUNLock);
   14c74:	4b97      	ldr	r3, [pc, #604]	; (14ed4 <vCommandConsoleTask+0x298>)
   14c76:	0018      	movs	r0, r3
   14c78:	4b90      	ldr	r3, [pc, #576]	; (14ebc <vCommandConsoleTask+0x280>)
   14c7a:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xBME);
   14c7c:	4b96      	ldr	r3, [pc, #600]	; (14ed8 <vCommandConsoleTask+0x29c>)
   14c7e:	0018      	movs	r0, r3
   14c80:	4b8e      	ldr	r3, [pc, #568]	; (14ebc <vCommandConsoleTask+0x280>)
   14c82:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   14c84:	2317      	movs	r3, #23
   14c86:	18fb      	adds	r3, r7, r3
   14c88:	2200      	movs	r2, #0
   14c8a:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   14c8c:	4b93      	ldr	r3, [pc, #588]	; (14edc <vCommandConsoleTask+0x2a0>)
   14c8e:	0018      	movs	r0, r3
   14c90:	4b93      	ldr	r3, [pc, #588]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14c92:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   14c94:	2203      	movs	r2, #3
   14c96:	2100      	movs	r1, #0
   14c98:	2001      	movs	r0, #1
   14c9a:	4b92      	ldr	r3, [pc, #584]	; (14ee4 <vCommandConsoleTask+0x2a8>)
   14c9c:	4798      	blx	r3
   14c9e:	0002      	movs	r2, r0
   14ca0:	4b91      	ldr	r3, [pc, #580]	; (14ee8 <vCommandConsoleTask+0x2ac>)
   14ca2:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   14ca4:	4b90      	ldr	r3, [pc, #576]	; (14ee8 <vCommandConsoleTask+0x2ac>)
   14ca6:	681b      	ldr	r3, [r3, #0]
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d107      	bne.n	14cbc <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   14cac:	4b8f      	ldr	r3, [pc, #572]	; (14eec <vCommandConsoleTask+0x2b0>)
   14cae:	0019      	movs	r1, r3
   14cb0:	2003      	movs	r0, #3
   14cb2:	4b8f      	ldr	r3, [pc, #572]	; (14ef0 <vCommandConsoleTask+0x2b4>)
   14cb4:	4798      	blx	r3
        vTaskSuspend(NULL);
   14cb6:	2000      	movs	r0, #0
   14cb8:	4b8e      	ldr	r3, [pc, #568]	; (14ef4 <vCommandConsoleTask+0x2b8>)
   14cba:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   14cbc:	230c      	movs	r3, #12
   14cbe:	18fb      	adds	r3, r7, r3
   14cc0:	0018      	movs	r0, r3
   14cc2:	4b8d      	ldr	r3, [pc, #564]	; (14ef8 <vCommandConsoleTask+0x2bc>)
   14cc4:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14cc6:	230c      	movs	r3, #12
   14cc8:	18fb      	adds	r3, r7, r3
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	2b0a      	cmp	r3, #10
   14cce:	d004      	beq.n	14cda <vCommandConsoleTask+0x9e>
   14cd0:	230c      	movs	r3, #12
   14cd2:	18fb      	adds	r3, r7, r3
   14cd4:	781b      	ldrb	r3, [r3, #0]
   14cd6:	2b0d      	cmp	r3, #13
   14cd8:	d137      	bne.n	14d4a <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14cda:	4b88      	ldr	r3, [pc, #544]	; (14efc <vCommandConsoleTask+0x2c0>)
   14cdc:	0018      	movs	r0, r3
   14cde:	4b80      	ldr	r3, [pc, #512]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14ce0:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   14ce2:	4b87      	ldr	r3, [pc, #540]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14ce4:	2200      	movs	r2, #0
   14ce6:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14ce8:	4b86      	ldr	r3, [pc, #536]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14cea:	2200      	movs	r2, #0
   14cec:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   14cee:	4986      	ldr	r1, [pc, #536]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14cf0:	4b86      	ldr	r3, [pc, #536]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14cf2:	2231      	movs	r2, #49	; 0x31
   14cf4:	0018      	movs	r0, r3
   14cf6:	4b86      	ldr	r3, [pc, #536]	; (14f10 <vCommandConsoleTask+0x2d4>)
   14cf8:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14cfa:	4b84      	ldr	r3, [pc, #528]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14cfc:	2231      	movs	r2, #49	; 0x31
   14cfe:	2100      	movs	r1, #0
   14d00:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   14d02:	4984      	ldr	r1, [pc, #528]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d04:	4b80      	ldr	r3, [pc, #512]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d06:	2264      	movs	r2, #100	; 0x64
   14d08:	0018      	movs	r0, r3
   14d0a:	4b83      	ldr	r3, [pc, #524]	; (14f18 <vCommandConsoleTask+0x2dc>)
   14d0c:	4798      	blx	r3
   14d0e:	0003      	movs	r3, r0
   14d10:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   14d12:	4b80      	ldr	r3, [pc, #512]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d14:	2263      	movs	r2, #99	; 0x63
   14d16:	2100      	movs	r1, #0
   14d18:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14d1a:	4b7e      	ldr	r3, [pc, #504]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d1c:	0018      	movs	r0, r3
   14d1e:	4b70      	ldr	r3, [pc, #448]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14d20:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   14d22:	693b      	ldr	r3, [r7, #16]
   14d24:	2b00      	cmp	r3, #0
   14d26:	d1ec      	bne.n	14d02 <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14d28:	2317      	movs	r3, #23
   14d2a:	18fb      	adds	r3, r7, r3
   14d2c:	2200      	movs	r2, #0
   14d2e:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14d30:	4b75      	ldr	r3, [pc, #468]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d32:	2232      	movs	r2, #50	; 0x32
   14d34:	2100      	movs	r1, #0
   14d36:	0018      	movs	r0, r3
   14d38:	4b78      	ldr	r3, [pc, #480]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14d3a:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14d3c:	4b75      	ldr	r3, [pc, #468]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d3e:	2264      	movs	r2, #100	; 0x64
   14d40:	2100      	movs	r1, #0
   14d42:	0018      	movs	r0, r3
   14d44:	4b75      	ldr	r3, [pc, #468]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14d46:	4798      	blx	r3
   14d48:	e0b5      	b.n	14eb6 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14d4a:	4b6d      	ldr	r3, [pc, #436]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14d4c:	781b      	ldrb	r3, [r3, #0]
   14d4e:	2b00      	cmp	r3, #0
   14d50:	d059      	beq.n	14e06 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   14d52:	4b6c      	ldr	r3, [pc, #432]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d54:	781b      	ldrb	r3, [r3, #0]
   14d56:	2b03      	cmp	r3, #3
   14d58:	d80c      	bhi.n	14d74 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14d5a:	4b6a      	ldr	r3, [pc, #424]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d5c:	781b      	ldrb	r3, [r3, #0]
   14d5e:	1c5a      	adds	r2, r3, #1
   14d60:	b2d1      	uxtb	r1, r2
   14d62:	4a68      	ldr	r2, [pc, #416]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d64:	7011      	strb	r1, [r2, #0]
   14d66:	001a      	movs	r2, r3
   14d68:	230c      	movs	r3, #12
   14d6a:	18fb      	adds	r3, r7, r3
   14d6c:	7819      	ldrb	r1, [r3, #0]
   14d6e:	4b6c      	ldr	r3, [pc, #432]	; (14f20 <vCommandConsoleTask+0x2e4>)
   14d70:	5499      	strb	r1, [r3, r2]
   14d72:	e005      	b.n	14d80 <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   14d74:	4b62      	ldr	r3, [pc, #392]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14d76:	2200      	movs	r2, #0
   14d78:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14d7a:	4b62      	ldr	r3, [pc, #392]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d7c:	2200      	movs	r2, #0
   14d7e:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   14d80:	4b60      	ldr	r3, [pc, #384]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d82:	781b      	ldrb	r3, [r3, #0]
   14d84:	2b01      	cmp	r3, #1
   14d86:	d999      	bls.n	14cbc <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   14d88:	4a66      	ldr	r2, [pc, #408]	; (14f24 <vCommandConsoleTask+0x2e8>)
   14d8a:	4b65      	ldr	r3, [pc, #404]	; (14f20 <vCommandConsoleTask+0x2e4>)
   14d8c:	0011      	movs	r1, r2
   14d8e:	0018      	movs	r0, r3
   14d90:	4b65      	ldr	r3, [pc, #404]	; (14f28 <vCommandConsoleTask+0x2ec>)
   14d92:	4798      	blx	r3
   14d94:	1e03      	subs	r3, r0, #0
   14d96:	d02f      	beq.n	14df8 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   14d98:	4964      	ldr	r1, [pc, #400]	; (14f2c <vCommandConsoleTask+0x2f0>)
   14d9a:	4b5b      	ldr	r3, [pc, #364]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d9c:	221b      	movs	r2, #27
   14d9e:	0018      	movs	r0, r3
   14da0:	4b63      	ldr	r3, [pc, #396]	; (14f30 <vCommandConsoleTask+0x2f4>)
   14da2:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   14da4:	4b58      	ldr	r3, [pc, #352]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14da6:	0018      	movs	r0, r3
   14da8:	4b4d      	ldr	r3, [pc, #308]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14daa:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   14dac:	2317      	movs	r3, #23
   14dae:	18fb      	adds	r3, r7, r3
   14db0:	2200      	movs	r2, #0
   14db2:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14db4:	4b54      	ldr	r3, [pc, #336]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14db6:	2232      	movs	r2, #50	; 0x32
   14db8:	2100      	movs	r1, #0
   14dba:	0018      	movs	r0, r3
   14dbc:	4b57      	ldr	r3, [pc, #348]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14dbe:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   14dc0:	4952      	ldr	r1, [pc, #328]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14dc2:	4b51      	ldr	r3, [pc, #324]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14dc4:	2231      	movs	r2, #49	; 0x31
   14dc6:	0018      	movs	r0, r3
   14dc8:	4b51      	ldr	r3, [pc, #324]	; (14f10 <vCommandConsoleTask+0x2d4>)
   14dca:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14dcc:	4b4e      	ldr	r3, [pc, #312]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14dce:	0018      	movs	r0, r3
   14dd0:	4b58      	ldr	r3, [pc, #352]	; (14f34 <vCommandConsoleTask+0x2f8>)
   14dd2:	4798      	blx	r3
   14dd4:	0003      	movs	r3, r0
   14dd6:	2b30      	cmp	r3, #48	; 0x30
   14dd8:	d806      	bhi.n	14de8 <vCommandConsoleTask+0x1ac>
   14dda:	4b4c      	ldr	r3, [pc, #304]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14ddc:	0018      	movs	r0, r3
   14dde:	4b55      	ldr	r3, [pc, #340]	; (14f34 <vCommandConsoleTask+0x2f8>)
   14de0:	4798      	blx	r3
   14de2:	0003      	movs	r3, r0
   14de4:	b2da      	uxtb	r2, r3
   14de6:	e000      	b.n	14dea <vCommandConsoleTask+0x1ae>
   14de8:	2231      	movs	r2, #49	; 0x31
   14dea:	2317      	movs	r3, #23
   14dec:	18fb      	adds	r3, r7, r3
   14dee:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   14df0:	4b45      	ldr	r3, [pc, #276]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14df2:	0018      	movs	r0, r3
   14df4:	4b3a      	ldr	r3, [pc, #232]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14df6:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14df8:	4b41      	ldr	r3, [pc, #260]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14dfa:	2200      	movs	r2, #0
   14dfc:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14dfe:	4b41      	ldr	r3, [pc, #260]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14e00:	2200      	movs	r2, #0
   14e02:	701a      	strb	r2, [r3, #0]
   14e04:	e75a      	b.n	14cbc <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14e06:	230c      	movs	r3, #12
   14e08:	18fb      	adds	r3, r7, r3
   14e0a:	781b      	ldrb	r3, [r3, #0]
   14e0c:	2b0d      	cmp	r3, #13
   14e0e:	d100      	bne.n	14e12 <vCommandConsoleTask+0x1d6>
   14e10:	e754      	b.n	14cbc <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e12:	230c      	movs	r3, #12
   14e14:	18fb      	adds	r3, r7, r3
   14e16:	781b      	ldrb	r3, [r3, #0]
   14e18:	2b08      	cmp	r3, #8
   14e1a:	d004      	beq.n	14e26 <vCommandConsoleTask+0x1ea>
   14e1c:	230c      	movs	r3, #12
   14e1e:	18fb      	adds	r3, r7, r3
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	2b7f      	cmp	r3, #127	; 0x7f
   14e24:	d11c      	bne.n	14e60 <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14e26:	2308      	movs	r3, #8
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	4a43      	ldr	r2, [pc, #268]	; (14f38 <vCommandConsoleTask+0x2fc>)
   14e2c:	6812      	ldr	r2, [r2, #0]
   14e2e:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   14e30:	2308      	movs	r3, #8
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	0018      	movs	r0, r3
   14e36:	4b2a      	ldr	r3, [pc, #168]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14e38:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14e3a:	2317      	movs	r3, #23
   14e3c:	18fb      	adds	r3, r7, r3
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	2b00      	cmp	r3, #0
   14e42:	d037      	beq.n	14eb4 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   14e44:	2317      	movs	r3, #23
   14e46:	18fb      	adds	r3, r7, r3
   14e48:	781a      	ldrb	r2, [r3, #0]
   14e4a:	2317      	movs	r3, #23
   14e4c:	18fb      	adds	r3, r7, r3
   14e4e:	3a01      	subs	r2, #1
   14e50:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   14e52:	2317      	movs	r3, #23
   14e54:	18fb      	adds	r3, r7, r3
   14e56:	781b      	ldrb	r3, [r3, #0]
   14e58:	4a2b      	ldr	r2, [pc, #172]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14e5a:	2100      	movs	r1, #0
   14e5c:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e5e:	e029      	b.n	14eb4 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   14e60:	230c      	movs	r3, #12
   14e62:	18fb      	adds	r3, r7, r3
   14e64:	781b      	ldrb	r3, [r3, #0]
   14e66:	2b1b      	cmp	r3, #27
   14e68:	d106      	bne.n	14e78 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   14e6a:	4b25      	ldr	r3, [pc, #148]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14e6c:	2201      	movs	r2, #1
   14e6e:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   14e70:	4b24      	ldr	r3, [pc, #144]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14e72:	2200      	movs	r2, #0
   14e74:	701a      	strb	r2, [r3, #0]
   14e76:	e721      	b.n	14cbc <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   14e78:	2317      	movs	r3, #23
   14e7a:	18fb      	adds	r3, r7, r3
   14e7c:	781b      	ldrb	r3, [r3, #0]
   14e7e:	2b31      	cmp	r3, #49	; 0x31
   14e80:	d80e      	bhi.n	14ea0 <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   14e82:	2317      	movs	r3, #23
   14e84:	18fb      	adds	r3, r7, r3
   14e86:	781b      	ldrb	r3, [r3, #0]
   14e88:	220c      	movs	r2, #12
   14e8a:	18ba      	adds	r2, r7, r2
   14e8c:	7811      	ldrb	r1, [r2, #0]
   14e8e:	4a1e      	ldr	r2, [pc, #120]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14e90:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   14e92:	2317      	movs	r3, #23
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	781a      	ldrb	r2, [r3, #0]
   14e98:	2317      	movs	r3, #23
   14e9a:	18fb      	adds	r3, r7, r3
   14e9c:	3201      	adds	r2, #1
   14e9e:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   14ea0:	230c      	movs	r3, #12
   14ea2:	18fb      	adds	r3, r7, r3
   14ea4:	2200      	movs	r2, #0
   14ea6:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   14ea8:	230c      	movs	r3, #12
   14eaa:	18fb      	adds	r3, r7, r3
   14eac:	0018      	movs	r0, r3
   14eae:	4b0c      	ldr	r3, [pc, #48]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14eb0:	4798      	blx	r3
   14eb2:	e703      	b.n	14cbc <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14eb4:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   14eb6:	e701      	b.n	14cbc <vCommandConsoleTask+0x80>
   14eb8:	00039000 	.word	0x00039000
   14ebc:	0001a0a5 	.word	0x0001a0a5
   14ec0:	00038ff0 	.word	0x00038ff0
   14ec4:	00039060 	.word	0x00039060
   14ec8:	00039030 	.word	0x00039030
   14ecc:	00039040 	.word	0x00039040
   14ed0:	00039010 	.word	0x00039010
   14ed4:	00039020 	.word	0x00039020
   14ed8:	00039050 	.word	0x00039050
   14edc:	00038c84 	.word	0x00038c84
   14ee0:	0001ffc5 	.word	0x0001ffc5
   14ee4:	0001c665 	.word	0x0001c665
   14ee8:	200046ac 	.word	0x200046ac
   14eec:	00038eac 	.word	0x00038eac
   14ef0:	000200b1 	.word	0x000200b1
   14ef4:	0001e451 	.word	0x0001e451
   14ef8:	00014f3d 	.word	0x00014f3d
   14efc:	00038ecc 	.word	0x00038ecc
   14f00:	200003a4 	.word	0x200003a4
   14f04:	200003a5 	.word	0x200003a5
   14f08:	200003dc 	.word	0x200003dc
   14f0c:	200003a8 	.word	0x200003a8
   14f10:	00037c07 	.word	0x00037c07
   14f14:	20000410 	.word	0x20000410
   14f18:	0001a115 	.word	0x0001a115
   14f1c:	0003781f 	.word	0x0003781f
   14f20:	20000474 	.word	0x20000474
   14f24:	00038ed0 	.word	0x00038ed0
   14f28:	00037b21 	.word	0x00037b21
   14f2c:	00038ed4 	.word	0x00038ed4
   14f30:	00037add 	.word	0x00037add
   14f34:	00037bd7 	.word	0x00037bd7
   14f38:	00038edc 	.word	0x00038edc

00014f3c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14f3c:	b580      	push	{r7, lr}
   14f3e:	b084      	sub	sp, #16
   14f40:	af00      	add	r7, sp, #0
   14f42:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f44:	687b      	ldr	r3, [r7, #4]
   14f46:	0018      	movs	r0, r3
   14f48:	4b0c      	ldr	r3, [pc, #48]	; (14f7c <FreeRTOS_read+0x40>)
   14f4a:	4798      	blx	r3
   14f4c:	0003      	movs	r3, r0
   14f4e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14f50:	e00d      	b.n	14f6e <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   14f52:	4b0b      	ldr	r3, [pc, #44]	; (14f80 <FreeRTOS_read+0x44>)
   14f54:	681a      	ldr	r2, [r3, #0]
   14f56:	2301      	movs	r3, #1
   14f58:	425b      	negs	r3, r3
   14f5a:	0019      	movs	r1, r3
   14f5c:	0010      	movs	r0, r2
   14f5e:	4b09      	ldr	r3, [pc, #36]	; (14f84 <FreeRTOS_read+0x48>)
   14f60:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f62:	687b      	ldr	r3, [r7, #4]
   14f64:	0018      	movs	r0, r3
   14f66:	4b05      	ldr	r3, [pc, #20]	; (14f7c <FreeRTOS_read+0x40>)
   14f68:	4798      	blx	r3
   14f6a:	0003      	movs	r3, r0
   14f6c:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   14f6e:	68fb      	ldr	r3, [r7, #12]
   14f70:	3301      	adds	r3, #1
   14f72:	d0ee      	beq.n	14f52 <FreeRTOS_read+0x16>
    }
}
   14f74:	46c0      	nop			; (mov r8, r8)
   14f76:	46bd      	mov	sp, r7
   14f78:	b004      	add	sp, #16
   14f7a:	bd80      	pop	{r7, pc}
   14f7c:	00020061 	.word	0x00020061
   14f80:	200046ac 	.word	0x200046ac
   14f84:	0001d61d 	.word	0x0001d61d

00014f88 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   14f88:	b580      	push	{r7, lr}
   14f8a:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   14f8c:	4b0a      	ldr	r3, [pc, #40]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f8e:	2200      	movs	r2, #0
   14f90:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   14f92:	4b0a      	ldr	r3, [pc, #40]	; (14fbc <CliCharReadySemaphoreGiveFromISR+0x34>)
   14f94:	681b      	ldr	r3, [r3, #0]
   14f96:	4a08      	ldr	r2, [pc, #32]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f98:	0011      	movs	r1, r2
   14f9a:	0018      	movs	r0, r3
   14f9c:	4b08      	ldr	r3, [pc, #32]	; (14fc0 <CliCharReadySemaphoreGiveFromISR+0x38>)
   14f9e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14fa0:	4b05      	ldr	r3, [pc, #20]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14fa2:	681b      	ldr	r3, [r3, #0]
   14fa4:	2b00      	cmp	r3, #0
   14fa6:	d003      	beq.n	14fb0 <CliCharReadySemaphoreGiveFromISR+0x28>
   14fa8:	4b06      	ldr	r3, [pc, #24]	; (14fc4 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   14faa:	2280      	movs	r2, #128	; 0x80
   14fac:	0552      	lsls	r2, r2, #21
   14fae:	601a      	str	r2, [r3, #0]
}
   14fb0:	46c0      	nop			; (mov r8, r8)
   14fb2:	46bd      	mov	sp, r7
   14fb4:	bd80      	pop	{r7, pc}
   14fb6:	46c0      	nop			; (mov r8, r8)
   14fb8:	20000478 	.word	0x20000478
   14fbc:	200046ac 	.word	0x200046ac
   14fc0:	0001cf95 	.word	0x0001cf95
   14fc4:	e000ed04 	.word	0xe000ed04

00014fc8 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14fc8:	b5b0      	push	{r4, r5, r7, lr}
   14fca:	b08a      	sub	sp, #40	; 0x28
   14fcc:	af02      	add	r7, sp, #8
   14fce:	60f8      	str	r0, [r7, #12]
   14fd0:	60b9      	str	r1, [r7, #8]
   14fd2:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   14fd4:	4b49      	ldr	r3, [pc, #292]	; (150fc <CLI_GetImuData+0x134>)
   14fd6:	4798      	blx	r3
   14fd8:	0003      	movs	r3, r0
   14fda:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   14fdc:	231b      	movs	r3, #27
   14fde:	18fa      	adds	r2, r7, r3
   14fe0:	69fb      	ldr	r3, [r7, #28]
   14fe2:	0011      	movs	r1, r2
   14fe4:	0018      	movs	r0, r3
   14fe6:	4b46      	ldr	r3, [pc, #280]	; (15100 <CLI_GetImuData+0x138>)
   14fe8:	4798      	blx	r3

    if (reg) {
   14fea:	231b      	movs	r3, #27
   14fec:	18fb      	adds	r3, r7, r3
   14fee:	781b      	ldrb	r3, [r3, #0]
   14ff0:	2b00      	cmp	r3, #0
   14ff2:	d064      	beq.n	150be <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   14ff4:	4b43      	ldr	r3, [pc, #268]	; (15104 <CLI_GetImuData+0x13c>)
   14ff6:	2206      	movs	r2, #6
   14ff8:	2100      	movs	r1, #0
   14ffa:	0018      	movs	r0, r3
   14ffc:	4b42      	ldr	r3, [pc, #264]	; (15108 <CLI_GetImuData+0x140>)
   14ffe:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   15000:	4a40      	ldr	r2, [pc, #256]	; (15104 <CLI_GetImuData+0x13c>)
   15002:	69fb      	ldr	r3, [r7, #28]
   15004:	0011      	movs	r1, r2
   15006:	0018      	movs	r0, r3
   15008:	4b40      	ldr	r3, [pc, #256]	; (1510c <CLI_GetImuData+0x144>)
   1500a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   1500c:	4b3d      	ldr	r3, [pc, #244]	; (15104 <CLI_GetImuData+0x13c>)
   1500e:	2200      	movs	r2, #0
   15010:	5e9b      	ldrsh	r3, [r3, r2]
   15012:	0018      	movs	r0, r3
   15014:	4b3e      	ldr	r3, [pc, #248]	; (15110 <CLI_GetImuData+0x148>)
   15016:	4798      	blx	r3
   15018:	1c02      	adds	r2, r0, #0
   1501a:	4b3e      	ldr	r3, [pc, #248]	; (15114 <CLI_GetImuData+0x14c>)
   1501c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1501e:	4b39      	ldr	r3, [pc, #228]	; (15104 <CLI_GetImuData+0x13c>)
   15020:	2202      	movs	r2, #2
   15022:	5e9b      	ldrsh	r3, [r3, r2]
   15024:	0018      	movs	r0, r3
   15026:	4b3a      	ldr	r3, [pc, #232]	; (15110 <CLI_GetImuData+0x148>)
   15028:	4798      	blx	r3
   1502a:	1c02      	adds	r2, r0, #0
   1502c:	4b39      	ldr	r3, [pc, #228]	; (15114 <CLI_GetImuData+0x14c>)
   1502e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   15030:	4b34      	ldr	r3, [pc, #208]	; (15104 <CLI_GetImuData+0x13c>)
   15032:	2204      	movs	r2, #4
   15034:	5e9b      	ldrsh	r3, [r3, r2]
   15036:	0018      	movs	r0, r3
   15038:	4b35      	ldr	r3, [pc, #212]	; (15110 <CLI_GetImuData+0x148>)
   1503a:	4798      	blx	r3
   1503c:	1c02      	adds	r2, r0, #0
   1503e:	4b35      	ldr	r3, [pc, #212]	; (15114 <CLI_GetImuData+0x14c>)
   15040:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   15042:	4b34      	ldr	r3, [pc, #208]	; (15114 <CLI_GetImuData+0x14c>)
   15044:	681a      	ldr	r2, [r3, #0]
   15046:	4b34      	ldr	r3, [pc, #208]	; (15118 <CLI_GetImuData+0x150>)
   15048:	1c10      	adds	r0, r2, #0
   1504a:	4798      	blx	r3
   1504c:	0005      	movs	r5, r0
   1504e:	4b31      	ldr	r3, [pc, #196]	; (15114 <CLI_GetImuData+0x14c>)
   15050:	685a      	ldr	r2, [r3, #4]
   15052:	4b31      	ldr	r3, [pc, #196]	; (15118 <CLI_GetImuData+0x150>)
   15054:	1c10      	adds	r0, r2, #0
   15056:	4798      	blx	r3
   15058:	0004      	movs	r4, r0
   1505a:	4b2e      	ldr	r3, [pc, #184]	; (15114 <CLI_GetImuData+0x14c>)
   1505c:	689a      	ldr	r2, [r3, #8]
   1505e:	4b2e      	ldr	r3, [pc, #184]	; (15118 <CLI_GetImuData+0x150>)
   15060:	1c10      	adds	r0, r2, #0
   15062:	4798      	blx	r3
   15064:	0003      	movs	r3, r0
   15066:	4a2d      	ldr	r2, [pc, #180]	; (1511c <CLI_GetImuData+0x154>)
   15068:	68b9      	ldr	r1, [r7, #8]
   1506a:	68f8      	ldr	r0, [r7, #12]
   1506c:	9301      	str	r3, [sp, #4]
   1506e:	9400      	str	r4, [sp, #0]
   15070:	002b      	movs	r3, r5
   15072:	4c2b      	ldr	r4, [pc, #172]	; (15120 <CLI_GetImuData+0x158>)
   15074:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   15076:	4b27      	ldr	r3, [pc, #156]	; (15114 <CLI_GetImuData+0x14c>)
   15078:	681a      	ldr	r2, [r3, #0]
   1507a:	4b27      	ldr	r3, [pc, #156]	; (15118 <CLI_GetImuData+0x150>)
   1507c:	1c10      	adds	r0, r2, #0
   1507e:	4798      	blx	r3
   15080:	0003      	movs	r3, r0
   15082:	b21a      	sxth	r2, r3
   15084:	2314      	movs	r3, #20
   15086:	18fb      	adds	r3, r7, r3
   15088:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   1508a:	4b22      	ldr	r3, [pc, #136]	; (15114 <CLI_GetImuData+0x14c>)
   1508c:	685a      	ldr	r2, [r3, #4]
   1508e:	4b22      	ldr	r3, [pc, #136]	; (15118 <CLI_GetImuData+0x150>)
   15090:	1c10      	adds	r0, r2, #0
   15092:	4798      	blx	r3
   15094:	0003      	movs	r3, r0
   15096:	b21a      	sxth	r2, r3
   15098:	2314      	movs	r3, #20
   1509a:	18fb      	adds	r3, r7, r3
   1509c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   1509e:	4b1d      	ldr	r3, [pc, #116]	; (15114 <CLI_GetImuData+0x14c>)
   150a0:	689a      	ldr	r2, [r3, #8]
   150a2:	4b1d      	ldr	r3, [pc, #116]	; (15118 <CLI_GetImuData+0x150>)
   150a4:	1c10      	adds	r0, r2, #0
   150a6:	4798      	blx	r3
   150a8:	0003      	movs	r3, r0
   150aa:	b21a      	sxth	r2, r3
   150ac:	2314      	movs	r3, #20
   150ae:	18fb      	adds	r3, r7, r3
   150b0:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   150b2:	2314      	movs	r3, #20
   150b4:	18fb      	adds	r3, r7, r3
   150b6:	0018      	movs	r0, r3
   150b8:	4b1a      	ldr	r3, [pc, #104]	; (15124 <CLI_GetImuData+0x15c>)
   150ba:	4798      	blx	r3
   150bc:	e019      	b.n	150f2 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   150be:	4a1a      	ldr	r2, [pc, #104]	; (15128 <CLI_GetImuData+0x160>)
   150c0:	68b9      	ldr	r1, [r7, #8]
   150c2:	68fb      	ldr	r3, [r7, #12]
   150c4:	0018      	movs	r0, r3
   150c6:	4b16      	ldr	r3, [pc, #88]	; (15120 <CLI_GetImuData+0x158>)
   150c8:	4798      	blx	r3
		imuPacket.xmg = -1;
   150ca:	2314      	movs	r3, #20
   150cc:	18fb      	adds	r3, r7, r3
   150ce:	2201      	movs	r2, #1
   150d0:	4252      	negs	r2, r2
   150d2:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   150d4:	2314      	movs	r3, #20
   150d6:	18fb      	adds	r3, r7, r3
   150d8:	2202      	movs	r2, #2
   150da:	4252      	negs	r2, r2
   150dc:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   150de:	2314      	movs	r3, #20
   150e0:	18fb      	adds	r3, r7, r3
   150e2:	2203      	movs	r2, #3
   150e4:	4252      	negs	r2, r2
   150e6:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   150e8:	2314      	movs	r3, #20
   150ea:	18fb      	adds	r3, r7, r3
   150ec:	0018      	movs	r0, r3
   150ee:	4b0d      	ldr	r3, [pc, #52]	; (15124 <CLI_GetImuData+0x15c>)
   150f0:	4798      	blx	r3
    }
    return pdFALSE;
   150f2:	2300      	movs	r3, #0
}
   150f4:	0018      	movs	r0, r3
   150f6:	46bd      	mov	sp, r7
   150f8:	b008      	add	sp, #32
   150fa:	bdb0      	pop	{r4, r5, r7, pc}
   150fc:	00016ab5 	.word	0x00016ab5
   15100:	00016561 	.word	0x00016561
   15104:	2000047c 	.word	0x2000047c
   15108:	0003781f 	.word	0x0003781f
   1510c:	0001659d 	.word	0x0001659d
   15110:	00015df1 	.word	0x00015df1
   15114:	20000484 	.word	0x20000484
   15118:	000359b1 	.word	0x000359b1
   1511c:	00038ee0 	.word	0x00038ee0
   15120:	00037a79 	.word	0x00037a79
   15124:	00019671 	.word	0x00019671
   15128:	00038f04 	.word	0x00038f04

0001512c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1512c:	b590      	push	{r4, r7, lr}
   1512e:	b087      	sub	sp, #28
   15130:	af00      	add	r7, sp, #0
   15132:	60f8      	str	r0, [r7, #12]
   15134:	60b9      	str	r1, [r7, #8]
   15136:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   15138:	2317      	movs	r3, #23
   1513a:	18fb      	adds	r3, r7, r3
   1513c:	221b      	movs	r2, #27
   1513e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   15140:	2317      	movs	r3, #23
   15142:	18fb      	adds	r3, r7, r3
   15144:	781b      	ldrb	r3, [r3, #0]
   15146:	4a08      	ldr	r2, [pc, #32]	; (15168 <xCliClearTerminalScreen+0x3c>)
   15148:	4808      	ldr	r0, [pc, #32]	; (1516c <xCliClearTerminalScreen+0x40>)
   1514a:	210f      	movs	r1, #15
   1514c:	4c08      	ldr	r4, [pc, #32]	; (15170 <xCliClearTerminalScreen+0x44>)
   1514e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   15150:	4a06      	ldr	r2, [pc, #24]	; (1516c <xCliClearTerminalScreen+0x40>)
   15152:	68b9      	ldr	r1, [r7, #8]
   15154:	68fb      	ldr	r3, [r7, #12]
   15156:	0018      	movs	r0, r3
   15158:	4b05      	ldr	r3, [pc, #20]	; (15170 <xCliClearTerminalScreen+0x44>)
   1515a:	4798      	blx	r3
    return pdFALSE;
   1515c:	2300      	movs	r3, #0
}
   1515e:	0018      	movs	r0, r3
   15160:	46bd      	mov	sp, r7
   15162:	b007      	add	sp, #28
   15164:	bd90      	pop	{r4, r7, pc}
   15166:	46c0      	nop			; (mov r8, r8)
   15168:	00038f2c 	.word	0x00038f2c
   1516c:	20000394 	.word	0x20000394
   15170:	00037a79 	.word	0x00037a79

00015174 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15174:	b580      	push	{r7, lr}
   15176:	b084      	sub	sp, #16
   15178:	af00      	add	r7, sp, #0
   1517a:	60f8      	str	r0, [r7, #12]
   1517c:	60b9      	str	r1, [r7, #8]
   1517e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   15180:	2002      	movs	r0, #2
   15182:	4b03      	ldr	r3, [pc, #12]	; (15190 <CLI_OTAU+0x1c>)
   15184:	4798      	blx	r3

    return pdFALSE;
   15186:	2300      	movs	r3, #0
}
   15188:	0018      	movs	r0, r3
   1518a:	46bd      	mov	sp, r7
   1518c:	b004      	add	sp, #16
   1518e:	bd80      	pop	{r7, pc}
   15190:	0001963d 	.word	0x0001963d

00015194 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15194:	b580      	push	{r7, lr}
   15196:	b084      	sub	sp, #16
   15198:	af00      	add	r7, sp, #0
   1519a:	60f8      	str	r0, [r7, #12]
   1519c:	60b9      	str	r1, [r7, #8]
   1519e:	607a      	str	r2, [r7, #4]
    system_reset();
   151a0:	4b03      	ldr	r3, [pc, #12]	; (151b0 <CLI_ResetDevice+0x1c>)
   151a2:	4798      	blx	r3
    return pdFALSE;
   151a4:	2300      	movs	r3, #0
}
   151a6:	0018      	movs	r0, r3
   151a8:	46bd      	mov	sp, r7
   151aa:	b004      	add	sp, #16
   151ac:	bd80      	pop	{r7, pc}
   151ae:	46c0      	nop			; (mov r8, r8)
   151b0:	00014c29 	.word	0x00014c29

000151b4 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   151b4:	b590      	push	{r4, r7, lr}
   151b6:	b08f      	sub	sp, #60	; 0x3c
   151b8:	af00      	add	r7, sp, #0
   151ba:	60f8      	str	r0, [r7, #12]
   151bc:	60b9      	str	r1, [r7, #8]
   151be:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   151c0:	2318      	movs	r3, #24
   151c2:	18fb      	adds	r3, r7, r3
   151c4:	2200      	movs	r2, #0
   151c6:	701a      	strb	r2, [r3, #0]
   151c8:	2318      	movs	r3, #24
   151ca:	18fb      	adds	r3, r7, r3
   151cc:	2200      	movs	r2, #0
   151ce:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   151d0:	2318      	movs	r3, #24
   151d2:	18fb      	adds	r3, r7, r3
   151d4:	2200      	movs	r2, #0
   151d6:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   151d8:	2318      	movs	r3, #24
   151da:	18fb      	adds	r3, r7, r3
   151dc:	2200      	movs	r2, #0
   151de:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   151e0:	231c      	movs	r3, #28
   151e2:	18fb      	adds	r3, r7, r3
   151e4:	2200      	movs	r2, #0
   151e6:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   151e8:	231c      	movs	r3, #28
   151ea:	18fb      	adds	r3, r7, r3
   151ec:	2214      	movs	r2, #20
   151ee:	18ba      	adds	r2, r7, r2
   151f0:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   151f2:	231c      	movs	r3, #28
   151f4:	18fb      	adds	r3, r7, r3
   151f6:	2201      	movs	r2, #1
   151f8:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   151fa:	231c      	movs	r3, #28
   151fc:	18fb      	adds	r3, r7, r3
   151fe:	2218      	movs	r2, #24
   15200:	18ba      	adds	r2, r7, r2
   15202:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   15204:	231c      	movs	r3, #28
   15206:	18fb      	adds	r3, r7, r3
   15208:	2201      	movs	r2, #1
   1520a:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   1520c:	4b2a      	ldr	r3, [pc, #168]	; (152b8 <CLI_i2cScan+0x104>)
   1520e:	0018      	movs	r0, r3
   15210:	4b2a      	ldr	r3, [pc, #168]	; (152bc <CLI_i2cScan+0x108>)
   15212:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   15214:	2300      	movs	r3, #0
   15216:	637b      	str	r3, [r7, #52]	; 0x34
   15218:	e042      	b.n	152a0 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1521c:	4a28      	ldr	r2, [pc, #160]	; (152c0 <CLI_i2cScan+0x10c>)
   1521e:	4829      	ldr	r0, [pc, #164]	; (152c4 <CLI_i2cScan+0x110>)
   15220:	210f      	movs	r1, #15
   15222:	4c29      	ldr	r4, [pc, #164]	; (152c8 <CLI_i2cScan+0x114>)
   15224:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   15226:	4b27      	ldr	r3, [pc, #156]	; (152c4 <CLI_i2cScan+0x110>)
   15228:	0018      	movs	r0, r3
   1522a:	4b24      	ldr	r3, [pc, #144]	; (152bc <CLI_i2cScan+0x108>)
   1522c:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1522e:	2300      	movs	r3, #0
   15230:	633b      	str	r3, [r7, #48]	; 0x30
   15232:	e02b      	b.n	1528c <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   15234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15236:	b2da      	uxtb	r2, r3
   15238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1523a:	b2db      	uxtb	r3, r3
   1523c:	18d3      	adds	r3, r2, r3
   1523e:	b2da      	uxtb	r2, r3
   15240:	231c      	movs	r3, #28
   15242:	18fb      	adds	r3, r7, r3
   15244:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   15246:	231c      	movs	r3, #28
   15248:	18fb      	adds	r3, r7, r3
   1524a:	2264      	movs	r2, #100	; 0x64
   1524c:	2164      	movs	r1, #100	; 0x64
   1524e:	0018      	movs	r0, r3
   15250:	4b1e      	ldr	r3, [pc, #120]	; (152cc <CLI_i2cScan+0x118>)
   15252:	4798      	blx	r3
   15254:	0003      	movs	r3, r0
   15256:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   15258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1525a:	2b00      	cmp	r3, #0
   1525c:	d10c      	bne.n	15278 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1525e:	231c      	movs	r3, #28
   15260:	18fb      	adds	r3, r7, r3
   15262:	781b      	ldrb	r3, [r3, #0]
   15264:	4a1a      	ldr	r2, [pc, #104]	; (152d0 <CLI_i2cScan+0x11c>)
   15266:	4817      	ldr	r0, [pc, #92]	; (152c4 <CLI_i2cScan+0x110>)
   15268:	210f      	movs	r1, #15
   1526a:	4c17      	ldr	r4, [pc, #92]	; (152c8 <CLI_i2cScan+0x114>)
   1526c:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1526e:	4b15      	ldr	r3, [pc, #84]	; (152c4 <CLI_i2cScan+0x110>)
   15270:	0018      	movs	r0, r3
   15272:	4b12      	ldr	r3, [pc, #72]	; (152bc <CLI_i2cScan+0x108>)
   15274:	4798      	blx	r3
   15276:	e006      	b.n	15286 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   15278:	4b12      	ldr	r3, [pc, #72]	; (152c4 <CLI_i2cScan+0x110>)
   1527a:	4a16      	ldr	r2, [pc, #88]	; (152d4 <CLI_i2cScan+0x120>)
   1527c:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1527e:	4b11      	ldr	r3, [pc, #68]	; (152c4 <CLI_i2cScan+0x110>)
   15280:	0018      	movs	r0, r3
   15282:	4b0e      	ldr	r3, [pc, #56]	; (152bc <CLI_i2cScan+0x108>)
   15284:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   15286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15288:	3301      	adds	r3, #1
   1528a:	633b      	str	r3, [r7, #48]	; 0x30
   1528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1528e:	2b0f      	cmp	r3, #15
   15290:	ddd0      	ble.n	15234 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   15292:	4b11      	ldr	r3, [pc, #68]	; (152d8 <CLI_i2cScan+0x124>)
   15294:	0018      	movs	r0, r3
   15296:	4b09      	ldr	r3, [pc, #36]	; (152bc <CLI_i2cScan+0x108>)
   15298:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1529c:	3310      	adds	r3, #16
   1529e:	637b      	str	r3, [r7, #52]	; 0x34
   152a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   152a2:	2b7f      	cmp	r3, #127	; 0x7f
   152a4:	ddb9      	ble.n	1521a <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   152a6:	4b0c      	ldr	r3, [pc, #48]	; (152d8 <CLI_i2cScan+0x124>)
   152a8:	0018      	movs	r0, r3
   152aa:	4b04      	ldr	r3, [pc, #16]	; (152bc <CLI_i2cScan+0x108>)
   152ac:	4798      	blx	r3
			return pdFALSE;
   152ae:	2300      	movs	r3, #0

}
   152b0:	0018      	movs	r0, r3
   152b2:	46bd      	mov	sp, r7
   152b4:	b00f      	add	sp, #60	; 0x3c
   152b6:	bd90      	pop	{r4, r7, pc}
   152b8:	00038fac 	.word	0x00038fac
   152bc:	0001ffc5 	.word	0x0001ffc5
   152c0:	00038fe0 	.word	0x00038fe0
   152c4:	20000394 	.word	0x20000394
   152c8:	00037a79 	.word	0x00037a79
   152cc:	00015c99 	.word	0x00015c99
   152d0:	00038fe8 	.word	0x00038fe8
   152d4:	00202058 	.word	0x00202058
   152d8:	00038ecc 	.word	0x00038ecc

000152dc <CLI_LOCK>:
}
BaseType_t CLI_CLLCD(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
	//LCD_clearScreen(WHITE);
	    return pdFALSE;
}
BaseType_t CLI_LOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152dc:	b580      	push	{r7, lr}
   152de:	b084      	sub	sp, #16
   152e0:	af00      	add	r7, sp, #0
   152e2:	60f8      	str	r0, [r7, #12]
   152e4:	60b9      	str	r1, [r7, #8]
   152e6:	607a      	str	r2, [r7, #4]
	lock();
   152e8:	4b03      	ldr	r3, [pc, #12]	; (152f8 <CLI_LOCK+0x1c>)
   152ea:	4798      	blx	r3
	    return pdFALSE;
   152ec:	2300      	movs	r3, #0
}
   152ee:	0018      	movs	r0, r3
   152f0:	46bd      	mov	sp, r7
   152f2:	b004      	add	sp, #16
   152f4:	bd80      	pop	{r7, pc}
   152f6:	46c0      	nop			; (mov r8, r8)
   152f8:	00016cb9 	.word	0x00016cb9

000152fc <CLI_UNLOCK>:
BaseType_t CLI_UNLOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152fc:	b580      	push	{r7, lr}
   152fe:	b084      	sub	sp, #16
   15300:	af00      	add	r7, sp, #0
   15302:	60f8      	str	r0, [r7, #12]
   15304:	60b9      	str	r1, [r7, #8]
   15306:	607a      	str	r2, [r7, #4]
	unlock();
   15308:	4b03      	ldr	r3, [pc, #12]	; (15318 <CLI_UNLOCK+0x1c>)
   1530a:	4798      	blx	r3
	    return pdFALSE;
   1530c:	2300      	movs	r3, #0
}
   1530e:	0018      	movs	r0, r3
   15310:	46bd      	mov	sp, r7
   15312:	b004      	add	sp, #16
   15314:	bd80      	pop	{r7, pc}
   15316:	46c0      	nop			; (mov r8, r8)
   15318:	00016d35 	.word	0x00016d35

0001531c <CLI_BME>:
BaseType_t CLI_BME(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1531c:	b580      	push	{r7, lr}
   1531e:	b09a      	sub	sp, #104	; 0x68
   15320:	af00      	add	r7, sp, #0
   15322:	60f8      	str	r0, [r7, #12]
   15324:	60b9      	str	r1, [r7, #8]
   15326:	607a      	str	r2, [r7, #4]
	int8_t buffer[50];
	
	read_sensor_data();
   15328:	4b17      	ldr	r3, [pc, #92]	; (15388 <CLI_BME+0x6c>)
   1532a:	4798      	blx	r3
	int temp = (int)getTemperature();
   1532c:	4b17      	ldr	r3, [pc, #92]	; (1538c <CLI_BME+0x70>)
   1532e:	4798      	blx	r3
   15330:	1c02      	adds	r2, r0, #0
   15332:	4b17      	ldr	r3, [pc, #92]	; (15390 <CLI_BME+0x74>)
   15334:	1c10      	adds	r0, r2, #0
   15336:	4798      	blx	r3
   15338:	0003      	movs	r3, r0
   1533a:	667b      	str	r3, [r7, #100]	; 0x64
	int hum = (int)getHumidity();
   1533c:	4b15      	ldr	r3, [pc, #84]	; (15394 <CLI_BME+0x78>)
   1533e:	4798      	blx	r3
   15340:	1c02      	adds	r2, r0, #0
   15342:	4b13      	ldr	r3, [pc, #76]	; (15390 <CLI_BME+0x74>)
   15344:	1c10      	adds	r0, r2, #0
   15346:	4798      	blx	r3
   15348:	0003      	movs	r3, r0
   1534a:	663b      	str	r3, [r7, #96]	; 0x60
	int pressure = (int)getPressure();
   1534c:	4b12      	ldr	r3, [pc, #72]	; (15398 <CLI_BME+0x7c>)
   1534e:	4798      	blx	r3
   15350:	1c02      	adds	r2, r0, #0
   15352:	4b0f      	ldr	r3, [pc, #60]	; (15390 <CLI_BME+0x74>)
   15354:	1c10      	adds	r0, r2, #0
   15356:	4798      	blx	r3
   15358:	0003      	movs	r3, r0
   1535a:	65fb      	str	r3, [r7, #92]	; 0x5c
 //  snprintf(buffer, sizeof(buffer), "BME Sensor Data: %d %d %d\r\n", (int)getTemperature(), (int)hum, (int)pressure);
    struct BMEDataPacket bme;
	bme.temperature = temp;
   1535c:	2314      	movs	r3, #20
   1535e:	18fb      	adds	r3, r7, r3
   15360:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   15362:	601a      	str	r2, [r3, #0]
	bme.humidity = hum;
   15364:	2314      	movs	r3, #20
   15366:	18fb      	adds	r3, r7, r3
   15368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1536a:	605a      	str	r2, [r3, #4]
	bme.pressure = pressure;
   1536c:	2314      	movs	r3, #20
   1536e:	18fb      	adds	r3, r7, r3
   15370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   15372:	609a      	str	r2, [r3, #8]
	WifiAddBmeDataToQueue(&bme);
   15374:	2314      	movs	r3, #20
   15376:	18fb      	adds	r3, r7, r3
   15378:	0018      	movs	r0, r3
   1537a:	4b08      	ldr	r3, [pc, #32]	; (1539c <CLI_BME+0x80>)
   1537c:	4798      	blx	r3
	return pdFALSE;
   1537e:	2300      	movs	r3, #0
   15380:	0018      	movs	r0, r3
   15382:	46bd      	mov	sp, r7
   15384:	b01a      	add	sp, #104	; 0x68
   15386:	bd80      	pop	{r7, pc}
   15388:	00014ad1 	.word	0x00014ad1
   1538c:	00014bbd 	.word	0x00014bbd
   15390:	000359b1 	.word	0x000359b1
   15394:	00014bd1 	.word	0x00014bd1
   15398:	00014be5 	.word	0x00014be5
   1539c:	0001969d 	.word	0x0001969d

000153a0 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   153a0:	b580      	push	{r7, lr}
   153a2:	b088      	sub	sp, #32
   153a4:	af00      	add	r7, sp, #0
   153a6:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   153a8:	4b33      	ldr	r3, [pc, #204]	; (15478 <vControlHandlerTask+0xd8>)
   153aa:	0018      	movs	r0, r3
   153ac:	4b33      	ldr	r3, [pc, #204]	; (1547c <vControlHandlerTask+0xdc>)
   153ae:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   153b0:	2200      	movs	r2, #0
   153b2:	2114      	movs	r1, #20
   153b4:	2002      	movs	r0, #2
   153b6:	4b32      	ldr	r3, [pc, #200]	; (15480 <vControlHandlerTask+0xe0>)
   153b8:	4798      	blx	r3
   153ba:	0002      	movs	r2, r0
   153bc:	4b31      	ldr	r3, [pc, #196]	; (15484 <vControlHandlerTask+0xe4>)
   153be:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   153c0:	2200      	movs	r2, #0
   153c2:	2103      	movs	r1, #3
   153c4:	2002      	movs	r0, #2
   153c6:	4b2e      	ldr	r3, [pc, #184]	; (15480 <vControlHandlerTask+0xe0>)
   153c8:	4798      	blx	r3
   153ca:	0002      	movs	r2, r0
   153cc:	4b2e      	ldr	r3, [pc, #184]	; (15488 <vControlHandlerTask+0xe8>)
   153ce:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   153d0:	4b2c      	ldr	r3, [pc, #176]	; (15484 <vControlHandlerTask+0xe4>)
   153d2:	681b      	ldr	r3, [r3, #0]
   153d4:	2b00      	cmp	r3, #0
   153d6:	d003      	beq.n	153e0 <vControlHandlerTask+0x40>
   153d8:	4b2b      	ldr	r3, [pc, #172]	; (15488 <vControlHandlerTask+0xe8>)
   153da:	681b      	ldr	r3, [r3, #0]
   153dc:	2b00      	cmp	r3, #0
   153de:	d103      	bne.n	153e8 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   153e0:	4b2a      	ldr	r3, [pc, #168]	; (1548c <vControlHandlerTask+0xec>)
   153e2:	0018      	movs	r0, r3
   153e4:	4b25      	ldr	r3, [pc, #148]	; (1547c <vControlHandlerTask+0xdc>)
   153e6:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   153e8:	4b29      	ldr	r3, [pc, #164]	; (15490 <vControlHandlerTask+0xf0>)
   153ea:	2200      	movs	r2, #0
   153ec:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   153ee:	4b28      	ldr	r3, [pc, #160]	; (15490 <vControlHandlerTask+0xf0>)
   153f0:	781b      	ldrb	r3, [r3, #0]
   153f2:	2b01      	cmp	r3, #1
   153f4:	d01d      	beq.n	15432 <vControlHandlerTask+0x92>
   153f6:	2b02      	cmp	r3, #2
   153f8:	d035      	beq.n	15466 <vControlHandlerTask+0xc6>
   153fa:	2b00      	cmp	r3, #0
   153fc:	d12f      	bne.n	1545e <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   153fe:	4b21      	ldr	r3, [pc, #132]	; (15484 <vControlHandlerTask+0xe4>)
   15400:	681b      	ldr	r3, [r3, #0]
   15402:	220c      	movs	r2, #12
   15404:	18b9      	adds	r1, r7, r2
   15406:	2200      	movs	r2, #0
   15408:	0018      	movs	r0, r3
   1540a:	4b22      	ldr	r3, [pc, #136]	; (15494 <vControlHandlerTask+0xf4>)
   1540c:	4798      	blx	r3
   1540e:	0003      	movs	r3, r0
   15410:	2b01      	cmp	r3, #1
   15412:	d12a      	bne.n	1546a <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   15414:	4b20      	ldr	r3, [pc, #128]	; (15498 <vControlHandlerTask+0xf8>)
   15416:	0019      	movs	r1, r3
   15418:	2001      	movs	r0, #1
   1541a:	4b20      	ldr	r3, [pc, #128]	; (1549c <vControlHandlerTask+0xfc>)
   1541c:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   1541e:	230c      	movs	r3, #12
   15420:	18fb      	adds	r3, r7, r3
   15422:	0018      	movs	r0, r3
   15424:	4b1e      	ldr	r3, [pc, #120]	; (154a0 <vControlHandlerTask+0x100>)
   15426:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   15428:	4b19      	ldr	r3, [pc, #100]	; (15490 <vControlHandlerTask+0xf0>)
   1542a:	2201      	movs	r2, #1
   1542c:	701a      	strb	r2, [r3, #0]
                }

                break;
   1542e:	46c0      	nop			; (mov r8, r8)
   15430:	e01b      	b.n	1546a <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   15432:	4b1c      	ldr	r3, [pc, #112]	; (154a4 <vControlHandlerTask+0x104>)
   15434:	4798      	blx	r3
   15436:	1e03      	subs	r3, r0, #0
   15438:	d019      	beq.n	1546e <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   1543a:	4b1b      	ldr	r3, [pc, #108]	; (154a8 <vControlHandlerTask+0x108>)
   1543c:	4798      	blx	r3
   1543e:	0003      	movs	r3, r0
   15440:	0018      	movs	r0, r3
   15442:	4b1a      	ldr	r3, [pc, #104]	; (154ac <vControlHandlerTask+0x10c>)
   15444:	4798      	blx	r3
   15446:	0003      	movs	r3, r0
   15448:	2b01      	cmp	r3, #1
   1544a:	d004      	beq.n	15456 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   1544c:	4b18      	ldr	r3, [pc, #96]	; (154b0 <vControlHandlerTask+0x110>)
   1544e:	0019      	movs	r1, r3
   15450:	2001      	movs	r0, #1
   15452:	4b12      	ldr	r3, [pc, #72]	; (1549c <vControlHandlerTask+0xfc>)
   15454:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   15456:	4b0e      	ldr	r3, [pc, #56]	; (15490 <vControlHandlerTask+0xf0>)
   15458:	2200      	movs	r2, #0
   1545a:	701a      	strb	r2, [r3, #0]
                }

                break;
   1545c:	e007      	b.n	1546e <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1545e:	4b0c      	ldr	r3, [pc, #48]	; (15490 <vControlHandlerTask+0xf0>)
   15460:	2200      	movs	r2, #0
   15462:	701a      	strb	r2, [r3, #0]
                break;
   15464:	e004      	b.n	15470 <vControlHandlerTask+0xd0>
                break;
   15466:	46c0      	nop			; (mov r8, r8)
   15468:	e002      	b.n	15470 <vControlHandlerTask+0xd0>
                break;
   1546a:	46c0      	nop			; (mov r8, r8)
   1546c:	e000      	b.n	15470 <vControlHandlerTask+0xd0>
                break;
   1546e:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   15470:	2028      	movs	r0, #40	; 0x28
   15472:	4b10      	ldr	r3, [pc, #64]	; (154b4 <vControlHandlerTask+0x114>)
   15474:	4798      	blx	r3
        switch (controlState) {
   15476:	e7ba      	b.n	153ee <vControlHandlerTask+0x4e>
   15478:	00039070 	.word	0x00039070
   1547c:	0001ffc5 	.word	0x0001ffc5
   15480:	0001c665 	.word	0x0001c665
   15484:	20000490 	.word	0x20000490
   15488:	20000494 	.word	0x20000494
   1548c:	00039090 	.word	0x00039090
   15490:	200046b0 	.word	0x200046b0
   15494:	0001d1c5 	.word	0x0001d1c5
   15498:	000390bc 	.word	0x000390bc
   1549c:	000200b1 	.word	0x000200b1
   154a0:	00017d11 	.word	0x00017d11
   154a4:	00017d4d 	.word	0x00017d4d
   154a8:	00017d61 	.word	0x00017d61
   154ac:	000196c9 	.word	0x000196c9
   154b0:	000390e4 	.word	0x000390e4
   154b4:	0001e371 	.word	0x0001e371

000154b8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   154b8:	b580      	push	{r7, lr}
   154ba:	b082      	sub	sp, #8
   154bc:	af00      	add	r7, sp, #0
   154be:	0002      	movs	r2, r0
   154c0:	1dfb      	adds	r3, r7, #7
   154c2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   154c4:	4b06      	ldr	r3, [pc, #24]	; (154e0 <system_interrupt_enable+0x28>)
   154c6:	1dfa      	adds	r2, r7, #7
   154c8:	7812      	ldrb	r2, [r2, #0]
   154ca:	0011      	movs	r1, r2
   154cc:	221f      	movs	r2, #31
   154ce:	400a      	ands	r2, r1
   154d0:	2101      	movs	r1, #1
   154d2:	4091      	lsls	r1, r2
   154d4:	000a      	movs	r2, r1
   154d6:	601a      	str	r2, [r3, #0]
}
   154d8:	46c0      	nop			; (mov r8, r8)
   154da:	46bd      	mov	sp, r7
   154dc:	b002      	add	sp, #8
   154de:	bd80      	pop	{r7, pc}
   154e0:	e000e100 	.word	0xe000e100

000154e4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   154e4:	b580      	push	{r7, lr}
   154e6:	b084      	sub	sp, #16
   154e8:	af00      	add	r7, sp, #0
   154ea:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   154ec:	687b      	ldr	r3, [r7, #4]
   154ee:	681b      	ldr	r3, [r3, #0]
   154f0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   154f2:	68fb      	ldr	r3, [r7, #12]
   154f4:	69db      	ldr	r3, [r3, #28]
   154f6:	2207      	movs	r2, #7
   154f8:	4013      	ands	r3, r2
   154fa:	1e5a      	subs	r2, r3, #1
   154fc:	4193      	sbcs	r3, r2
   154fe:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   15500:	0018      	movs	r0, r3
   15502:	46bd      	mov	sp, r7
   15504:	b004      	add	sp, #16
   15506:	bd80      	pop	{r7, pc}

00015508 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   15508:	b580      	push	{r7, lr}
   1550a:	b082      	sub	sp, #8
   1550c:	af00      	add	r7, sp, #0
   1550e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   15510:	46c0      	nop			; (mov r8, r8)
   15512:	687b      	ldr	r3, [r7, #4]
   15514:	0018      	movs	r0, r3
   15516:	4b04      	ldr	r3, [pc, #16]	; (15528 <_i2c_master_wait_for_sync+0x20>)
   15518:	4798      	blx	r3
   1551a:	1e03      	subs	r3, r0, #0
   1551c:	d1f9      	bne.n	15512 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1551e:	46c0      	nop			; (mov r8, r8)
   15520:	46bd      	mov	sp, r7
   15522:	b002      	add	sp, #8
   15524:	bd80      	pop	{r7, pc}
   15526:	46c0      	nop			; (mov r8, r8)
   15528:	000154e5 	.word	0x000154e5

0001552c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   1552c:	b580      	push	{r7, lr}
   1552e:	b082      	sub	sp, #8
   15530:	af00      	add	r7, sp, #0
   15532:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   15534:	687b      	ldr	r3, [r7, #4]
   15536:	2264      	movs	r2, #100	; 0x64
   15538:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1553a:	687b      	ldr	r3, [r7, #4]
   1553c:	4a1b      	ldr	r2, [pc, #108]	; (155ac <i2c_master_get_config_defaults+0x80>)
   1553e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   15540:	687b      	ldr	r3, [r7, #4]
   15542:	2200      	movs	r2, #0
   15544:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   15546:	687b      	ldr	r3, [r7, #4]
   15548:	2200      	movs	r2, #0
   1554a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   1554c:	687b      	ldr	r3, [r7, #4]
   1554e:	2200      	movs	r2, #0
   15550:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   15552:	687b      	ldr	r3, [r7, #4]
   15554:	2280      	movs	r2, #128	; 0x80
   15556:	0392      	lsls	r2, r2, #14
   15558:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1555a:	687b      	ldr	r3, [r7, #4]
   1555c:	2201      	movs	r2, #1
   1555e:	4252      	negs	r2, r2
   15560:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   15562:	687b      	ldr	r3, [r7, #4]
   15564:	2201      	movs	r2, #1
   15566:	4252      	negs	r2, r2
   15568:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1556a:	687b      	ldr	r3, [r7, #4]
   1556c:	2200      	movs	r2, #0
   1556e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15570:	687b      	ldr	r3, [r7, #4]
   15572:	2200      	movs	r2, #0
   15574:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   15576:	687b      	ldr	r3, [r7, #4]
   15578:	2224      	movs	r2, #36	; 0x24
   1557a:	2100      	movs	r1, #0
   1557c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1557e:	687b      	ldr	r3, [r7, #4]
   15580:	2200      	movs	r2, #0
   15582:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   15584:	687b      	ldr	r3, [r7, #4]
   15586:	222c      	movs	r2, #44	; 0x2c
   15588:	2100      	movs	r1, #0
   1558a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   1558c:	687b      	ldr	r3, [r7, #4]
   1558e:	222d      	movs	r2, #45	; 0x2d
   15590:	2100      	movs	r1, #0
   15592:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   15594:	687b      	ldr	r3, [r7, #4]
   15596:	222e      	movs	r2, #46	; 0x2e
   15598:	2100      	movs	r1, #0
   1559a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   1559c:	687b      	ldr	r3, [r7, #4]
   1559e:	22d7      	movs	r2, #215	; 0xd7
   155a0:	861a      	strh	r2, [r3, #48]	; 0x30
}
   155a2:	46c0      	nop			; (mov r8, r8)
   155a4:	46bd      	mov	sp, r7
   155a6:	b002      	add	sp, #8
   155a8:	bd80      	pop	{r7, pc}
   155aa:	46c0      	nop			; (mov r8, r8)
   155ac:	00000d48 	.word	0x00000d48

000155b0 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   155b0:	b580      	push	{r7, lr}
   155b2:	b084      	sub	sp, #16
   155b4:	af00      	add	r7, sp, #0
   155b6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   155b8:	687b      	ldr	r3, [r7, #4]
   155ba:	681b      	ldr	r3, [r3, #0]
   155bc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   155be:	2300      	movs	r3, #0
   155c0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   155c2:	687b      	ldr	r3, [r7, #4]
   155c4:	0018      	movs	r0, r3
   155c6:	4b14      	ldr	r3, [pc, #80]	; (15618 <i2c_master_enable+0x68>)
   155c8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   155ca:	68bb      	ldr	r3, [r7, #8]
   155cc:	681b      	ldr	r3, [r3, #0]
   155ce:	2202      	movs	r2, #2
   155d0:	431a      	orrs	r2, r3
   155d2:	68bb      	ldr	r3, [r7, #8]
   155d4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   155d6:	687b      	ldr	r3, [r7, #4]
   155d8:	681b      	ldr	r3, [r3, #0]
   155da:	0018      	movs	r0, r3
   155dc:	4b0f      	ldr	r3, [pc, #60]	; (1561c <i2c_master_enable+0x6c>)
   155de:	4798      	blx	r3
   155e0:	0003      	movs	r3, r0
   155e2:	0018      	movs	r0, r3
   155e4:	4b0e      	ldr	r3, [pc, #56]	; (15620 <i2c_master_enable+0x70>)
   155e6:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   155e8:	e00c      	b.n	15604 <i2c_master_enable+0x54>
		timeout_counter++;
   155ea:	68fb      	ldr	r3, [r7, #12]
   155ec:	3301      	adds	r3, #1
   155ee:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   155f0:	687b      	ldr	r3, [r7, #4]
   155f2:	88db      	ldrh	r3, [r3, #6]
   155f4:	001a      	movs	r2, r3
   155f6:	68fb      	ldr	r3, [r7, #12]
   155f8:	429a      	cmp	r2, r3
   155fa:	d803      	bhi.n	15604 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   155fc:	68bb      	ldr	r3, [r7, #8]
   155fe:	2210      	movs	r2, #16
   15600:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   15602:	e006      	b.n	15612 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15604:	68bb      	ldr	r3, [r7, #8]
   15606:	8b5b      	ldrh	r3, [r3, #26]
   15608:	b29b      	uxth	r3, r3
   1560a:	001a      	movs	r2, r3
   1560c:	2310      	movs	r3, #16
   1560e:	4013      	ands	r3, r2
   15610:	d0eb      	beq.n	155ea <i2c_master_enable+0x3a>
		}
	}
}
   15612:	46bd      	mov	sp, r7
   15614:	b004      	add	sp, #16
   15616:	bd80      	pop	{r7, pc}
   15618:	00015509 	.word	0x00015509
   1561c:	00029865 	.word	0x00029865
   15620:	000154b9 	.word	0x000154b9

00015624 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   15624:	b580      	push	{r7, lr}
   15626:	b082      	sub	sp, #8
   15628:	af00      	add	r7, sp, #0
   1562a:	6078      	str	r0, [r7, #4]
   1562c:	000a      	movs	r2, r1
   1562e:	1cfb      	adds	r3, r7, #3
   15630:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   15632:	687b      	ldr	r3, [r7, #4]
   15634:	7e5b      	ldrb	r3, [r3, #25]
   15636:	b2db      	uxtb	r3, r3
   15638:	b25a      	sxtb	r2, r3
   1563a:	1cfb      	adds	r3, r7, #3
   1563c:	781b      	ldrb	r3, [r3, #0]
   1563e:	2101      	movs	r1, #1
   15640:	4099      	lsls	r1, r3
   15642:	000b      	movs	r3, r1
   15644:	b25b      	sxtb	r3, r3
   15646:	4313      	orrs	r3, r2
   15648:	b25b      	sxtb	r3, r3
   1564a:	b2da      	uxtb	r2, r3
   1564c:	687b      	ldr	r3, [r7, #4]
   1564e:	765a      	strb	r2, [r3, #25]
}
   15650:	46c0      	nop			; (mov r8, r8)
   15652:	46bd      	mov	sp, r7
   15654:	b002      	add	sp, #8
   15656:	bd80      	pop	{r7, pc}

00015658 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   15658:	b590      	push	{r4, r7, lr}
   1565a:	b091      	sub	sp, #68	; 0x44
   1565c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1565e:	2300      	movs	r3, #0
   15660:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   15662:	233a      	movs	r3, #58	; 0x3a
   15664:	18fb      	adds	r3, r7, r3
   15666:	2200      	movs	r2, #0
   15668:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1566a:	1d3b      	adds	r3, r7, #4
   1566c:	0018      	movs	r0, r3
   1566e:	4b21      	ldr	r3, [pc, #132]	; (156f4 <I2cDriverConfigureSensorBus+0x9c>)
   15670:	4798      	blx	r3

   config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   15672:	1d3b      	adds	r3, r7, #4
   15674:	4a20      	ldr	r2, [pc, #128]	; (156f8 <I2cDriverConfigureSensorBus+0xa0>)
   15676:	61da      	str	r2, [r3, #28]
   config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   15678:	1d3b      	adds	r3, r7, #4
   1567a:	4a20      	ldr	r2, [pc, #128]	; (156fc <I2cDriverConfigureSensorBus+0xa4>)
   1567c:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   1567e:	1d3b      	adds	r3, r7, #4
   15680:	22fa      	movs	r2, #250	; 0xfa
   15682:	0092      	lsls	r2, r2, #2
   15684:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   15686:	233b      	movs	r3, #59	; 0x3b
   15688:	18fb      	adds	r3, r7, r3
   1568a:	2203      	movs	r2, #3
   1568c:	701a      	strb	r2, [r3, #0]
   1568e:	e01e      	b.n	156ce <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   15690:	233a      	movs	r3, #58	; 0x3a
   15692:	18fc      	adds	r4, r7, r3
   15694:	1d3a      	adds	r2, r7, #4
   15696:	491a      	ldr	r1, [pc, #104]	; (15700 <I2cDriverConfigureSensorBus+0xa8>)
   15698:	4b1a      	ldr	r3, [pc, #104]	; (15704 <I2cDriverConfigureSensorBus+0xac>)
   1569a:	0018      	movs	r0, r3
   1569c:	4b1a      	ldr	r3, [pc, #104]	; (15708 <I2cDriverConfigureSensorBus+0xb0>)
   1569e:	4798      	blx	r3
   156a0:	0003      	movs	r3, r0
   156a2:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   156a4:	233a      	movs	r3, #58	; 0x3a
   156a6:	18fb      	adds	r3, r7, r3
   156a8:	781b      	ldrb	r3, [r3, #0]
   156aa:	2b00      	cmp	r3, #0
   156ac:	d104      	bne.n	156b8 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   156ae:	233a      	movs	r3, #58	; 0x3a
   156b0:	18fb      	adds	r3, r7, r3
   156b2:	781b      	ldrb	r3, [r3, #0]
   156b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   156b6:	e00f      	b.n	156d8 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   156b8:	4b12      	ldr	r3, [pc, #72]	; (15704 <I2cDriverConfigureSensorBus+0xac>)
   156ba:	0018      	movs	r0, r3
   156bc:	4b13      	ldr	r3, [pc, #76]	; (1570c <I2cDriverConfigureSensorBus+0xb4>)
   156be:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   156c0:	233b      	movs	r3, #59	; 0x3b
   156c2:	18fb      	adds	r3, r7, r3
   156c4:	781a      	ldrb	r2, [r3, #0]
   156c6:	233b      	movs	r3, #59	; 0x3b
   156c8:	18fb      	adds	r3, r7, r3
   156ca:	3a01      	subs	r2, #1
   156cc:	701a      	strb	r2, [r3, #0]
   156ce:	233b      	movs	r3, #59	; 0x3b
   156d0:	18fb      	adds	r3, r7, r3
   156d2:	781b      	ldrb	r3, [r3, #0]
   156d4:	2b00      	cmp	r3, #0
   156d6:	d1db      	bne.n	15690 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   156d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   156da:	2b00      	cmp	r3, #0
   156dc:	d104      	bne.n	156e8 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   156de:	4b09      	ldr	r3, [pc, #36]	; (15704 <I2cDriverConfigureSensorBus+0xac>)
   156e0:	0018      	movs	r0, r3
   156e2:	4b0b      	ldr	r3, [pc, #44]	; (15710 <I2cDriverConfigureSensorBus+0xb8>)
   156e4:	4798      	blx	r3
   156e6:	e000      	b.n	156ea <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   156e8:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   156ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   156ec:	0018      	movs	r0, r3
   156ee:	46bd      	mov	sp, r7
   156f0:	b011      	add	sp, #68	; 0x44
   156f2:	bd90      	pop	{r4, r7, pc}
   156f4:	0001552d 	.word	0x0001552d
   156f8:	00080002 	.word	0x00080002
   156fc:	00090002 	.word	0x00090002
   15700:	42000800 	.word	0x42000800
   15704:	200046b8 	.word	0x200046b8
   15708:	00019d05 	.word	0x00019d05
   1570c:	00019e39 	.word	0x00019e39
   15710:	000155b1 	.word	0x000155b1

00015714 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   15714:	b580      	push	{r7, lr}
   15716:	b084      	sub	sp, #16
   15718:	af00      	add	r7, sp, #0
   1571a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   1571c:	4b0e      	ldr	r3, [pc, #56]	; (15758 <I2cSensorsTxComplete+0x44>)
   1571e:	2200      	movs	r2, #0
   15720:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   15722:	4b0d      	ldr	r3, [pc, #52]	; (15758 <I2cSensorsTxComplete+0x44>)
   15724:	2201      	movs	r2, #1
   15726:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15728:	2300      	movs	r3, #0
   1572a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   1572c:	4b0b      	ldr	r3, [pc, #44]	; (1575c <I2cSensorsTxComplete+0x48>)
   1572e:	681b      	ldr	r3, [r3, #0]
   15730:	220c      	movs	r2, #12
   15732:	18ba      	adds	r2, r7, r2
   15734:	0011      	movs	r1, r2
   15736:	0018      	movs	r0, r3
   15738:	4b09      	ldr	r3, [pc, #36]	; (15760 <I2cSensorsTxComplete+0x4c>)
   1573a:	4798      	blx	r3
    sensorTransmitError = false;
   1573c:	4b09      	ldr	r3, [pc, #36]	; (15764 <I2cSensorsTxComplete+0x50>)
   1573e:	2200      	movs	r2, #0
   15740:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   15742:	68fb      	ldr	r3, [r7, #12]
   15744:	2b00      	cmp	r3, #0
   15746:	d003      	beq.n	15750 <I2cSensorsTxComplete+0x3c>
   15748:	4b07      	ldr	r3, [pc, #28]	; (15768 <I2cSensorsTxComplete+0x54>)
   1574a:	2280      	movs	r2, #128	; 0x80
   1574c:	0552      	lsls	r2, r2, #21
   1574e:	601a      	str	r2, [r3, #0]
}
   15750:	46c0      	nop			; (mov r8, r8)
   15752:	46bd      	mov	sp, r7
   15754:	b004      	add	sp, #16
   15756:	bd80      	pop	{r7, pc}
   15758:	2000049c 	.word	0x2000049c
   1575c:	200046e0 	.word	0x200046e0
   15760:	0001cf95 	.word	0x0001cf95
   15764:	20000498 	.word	0x20000498
   15768:	e000ed04 	.word	0xe000ed04

0001576c <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   1576c:	b580      	push	{r7, lr}
   1576e:	b084      	sub	sp, #16
   15770:	af00      	add	r7, sp, #0
   15772:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15774:	4b0e      	ldr	r3, [pc, #56]	; (157b0 <I2cSensorsRxComplete+0x44>)
   15776:	2200      	movs	r2, #0
   15778:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1577a:	4b0d      	ldr	r3, [pc, #52]	; (157b0 <I2cSensorsRxComplete+0x44>)
   1577c:	2201      	movs	r2, #1
   1577e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15780:	2300      	movs	r3, #0
   15782:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15784:	4b0b      	ldr	r3, [pc, #44]	; (157b4 <I2cSensorsRxComplete+0x48>)
   15786:	681b      	ldr	r3, [r3, #0]
   15788:	220c      	movs	r2, #12
   1578a:	18ba      	adds	r2, r7, r2
   1578c:	0011      	movs	r1, r2
   1578e:	0018      	movs	r0, r3
   15790:	4b09      	ldr	r3, [pc, #36]	; (157b8 <I2cSensorsRxComplete+0x4c>)
   15792:	4798      	blx	r3
    sensorTransmitError = false;
   15794:	4b09      	ldr	r3, [pc, #36]	; (157bc <I2cSensorsRxComplete+0x50>)
   15796:	2200      	movs	r2, #0
   15798:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1579a:	68fb      	ldr	r3, [r7, #12]
   1579c:	2b00      	cmp	r3, #0
   1579e:	d003      	beq.n	157a8 <I2cSensorsRxComplete+0x3c>
   157a0:	4b07      	ldr	r3, [pc, #28]	; (157c0 <I2cSensorsRxComplete+0x54>)
   157a2:	2280      	movs	r2, #128	; 0x80
   157a4:	0552      	lsls	r2, r2, #21
   157a6:	601a      	str	r2, [r3, #0]
}
   157a8:	46c0      	nop			; (mov r8, r8)
   157aa:	46bd      	mov	sp, r7
   157ac:	b004      	add	sp, #16
   157ae:	bd80      	pop	{r7, pc}
   157b0:	2000049c 	.word	0x2000049c
   157b4:	200046e0 	.word	0x200046e0
   157b8:	0001cf95 	.word	0x0001cf95
   157bc:	20000498 	.word	0x20000498
   157c0:	e000ed04 	.word	0xe000ed04

000157c4 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   157c4:	b580      	push	{r7, lr}
   157c6:	b084      	sub	sp, #16
   157c8:	af00      	add	r7, sp, #0
   157ca:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   157cc:	4b0e      	ldr	r3, [pc, #56]	; (15808 <I2cSensorsError+0x44>)
   157ce:	2200      	movs	r2, #0
   157d0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   157d2:	4b0d      	ldr	r3, [pc, #52]	; (15808 <I2cSensorsError+0x44>)
   157d4:	2201      	movs	r2, #1
   157d6:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   157d8:	2300      	movs	r3, #0
   157da:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   157dc:	4b0b      	ldr	r3, [pc, #44]	; (1580c <I2cSensorsError+0x48>)
   157de:	681b      	ldr	r3, [r3, #0]
   157e0:	220c      	movs	r2, #12
   157e2:	18ba      	adds	r2, r7, r2
   157e4:	0011      	movs	r1, r2
   157e6:	0018      	movs	r0, r3
   157e8:	4b09      	ldr	r3, [pc, #36]	; (15810 <I2cSensorsError+0x4c>)
   157ea:	4798      	blx	r3
    sensorTransmitError = true;
   157ec:	4b09      	ldr	r3, [pc, #36]	; (15814 <I2cSensorsError+0x50>)
   157ee:	2201      	movs	r2, #1
   157f0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   157f2:	68fb      	ldr	r3, [r7, #12]
   157f4:	2b00      	cmp	r3, #0
   157f6:	d003      	beq.n	15800 <I2cSensorsError+0x3c>
   157f8:	4b07      	ldr	r3, [pc, #28]	; (15818 <I2cSensorsError+0x54>)
   157fa:	2280      	movs	r2, #128	; 0x80
   157fc:	0552      	lsls	r2, r2, #21
   157fe:	601a      	str	r2, [r3, #0]
}
   15800:	46c0      	nop			; (mov r8, r8)
   15802:	46bd      	mov	sp, r7
   15804:	b004      	add	sp, #16
   15806:	bd80      	pop	{r7, pc}
   15808:	2000049c 	.word	0x2000049c
   1580c:	200046e0 	.word	0x200046e0
   15810:	0001cf95 	.word	0x0001cf95
   15814:	20000498 	.word	0x20000498
   15818:	e000ed04 	.word	0xe000ed04

0001581c <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   1581c:	b580      	push	{r7, lr}
   1581e:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15820:	4911      	ldr	r1, [pc, #68]	; (15868 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   15822:	4b12      	ldr	r3, [pc, #72]	; (1586c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15824:	2200      	movs	r2, #0
   15826:	0018      	movs	r0, r3
   15828:	4b11      	ldr	r3, [pc, #68]	; (15870 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1582a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   1582c:	4b0f      	ldr	r3, [pc, #60]	; (1586c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1582e:	2100      	movs	r1, #0
   15830:	0018      	movs	r0, r3
   15832:	4b10      	ldr	r3, [pc, #64]	; (15874 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15834:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15836:	4910      	ldr	r1, [pc, #64]	; (15878 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   15838:	4b0c      	ldr	r3, [pc, #48]	; (1586c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1583a:	2201      	movs	r2, #1
   1583c:	0018      	movs	r0, r3
   1583e:	4b0c      	ldr	r3, [pc, #48]	; (15870 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15840:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15842:	4b0a      	ldr	r3, [pc, #40]	; (1586c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15844:	2101      	movs	r1, #1
   15846:	0018      	movs	r0, r3
   15848:	4b0a      	ldr	r3, [pc, #40]	; (15874 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1584a:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   1584c:	490b      	ldr	r1, [pc, #44]	; (1587c <I2cDriverRegisterSensorBusCallbacks+0x60>)
   1584e:	4b07      	ldr	r3, [pc, #28]	; (1586c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15850:	2202      	movs	r2, #2
   15852:	0018      	movs	r0, r3
   15854:	4b06      	ldr	r3, [pc, #24]	; (15870 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15856:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   15858:	4b04      	ldr	r3, [pc, #16]	; (1586c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1585a:	2102      	movs	r1, #2
   1585c:	0018      	movs	r0, r3
   1585e:	4b05      	ldr	r3, [pc, #20]	; (15874 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15860:	4798      	blx	r3
}
   15862:	46c0      	nop			; (mov r8, r8)
   15864:	46bd      	mov	sp, r7
   15866:	bd80      	pop	{r7, pc}
   15868:	00015715 	.word	0x00015715
   1586c:	200046b8 	.word	0x200046b8
   15870:	00012909 	.word	0x00012909
   15874:	00015625 	.word	0x00015625
   15878:	0001576d 	.word	0x0001576d
   1587c:	000157c5 	.word	0x000157c5

00015880 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   15880:	b580      	push	{r7, lr}
   15882:	b082      	sub	sp, #8
   15884:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   15886:	2300      	movs	r3, #0
   15888:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1588a:	4b14      	ldr	r3, [pc, #80]	; (158dc <I2cInitializeDriver+0x5c>)
   1588c:	4798      	blx	r3
   1588e:	0003      	movs	r3, r0
   15890:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   15892:	687b      	ldr	r3, [r7, #4]
   15894:	2b00      	cmp	r3, #0
   15896:	d11a      	bne.n	158ce <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   15898:	4b11      	ldr	r3, [pc, #68]	; (158e0 <I2cInitializeDriver+0x60>)
   1589a:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   1589c:	2001      	movs	r0, #1
   1589e:	4b11      	ldr	r3, [pc, #68]	; (158e4 <I2cInitializeDriver+0x64>)
   158a0:	4798      	blx	r3
   158a2:	0002      	movs	r2, r0
   158a4:	4b10      	ldr	r3, [pc, #64]	; (158e8 <I2cInitializeDriver+0x68>)
   158a6:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   158a8:	2203      	movs	r2, #3
   158aa:	2100      	movs	r1, #0
   158ac:	2001      	movs	r0, #1
   158ae:	4b0f      	ldr	r3, [pc, #60]	; (158ec <I2cInitializeDriver+0x6c>)
   158b0:	4798      	blx	r3
   158b2:	0002      	movs	r2, r0
   158b4:	4b0e      	ldr	r3, [pc, #56]	; (158f0 <I2cInitializeDriver+0x70>)
   158b6:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   158b8:	4b0b      	ldr	r3, [pc, #44]	; (158e8 <I2cInitializeDriver+0x68>)
   158ba:	681b      	ldr	r3, [r3, #0]
   158bc:	2b00      	cmp	r3, #0
   158be:	d003      	beq.n	158c8 <I2cInitializeDriver+0x48>
   158c0:	4b0b      	ldr	r3, [pc, #44]	; (158f0 <I2cInitializeDriver+0x70>)
   158c2:	681b      	ldr	r3, [r3, #0]
   158c4:	2b00      	cmp	r3, #0
   158c6:	d103      	bne.n	158d0 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   158c8:	2306      	movs	r3, #6
   158ca:	607b      	str	r3, [r7, #4]
        goto exit;
   158cc:	e000      	b.n	158d0 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   158ce:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   158d0:	687b      	ldr	r3, [r7, #4]
}
   158d2:	0018      	movs	r0, r3
   158d4:	46bd      	mov	sp, r7
   158d6:	b002      	add	sp, #8
   158d8:	bd80      	pop	{r7, pc}
   158da:	46c0      	nop			; (mov r8, r8)
   158dc:	00015659 	.word	0x00015659
   158e0:	0001581d 	.word	0x0001581d
   158e4:	0001c8cd 	.word	0x0001c8cd
   158e8:	200046b4 	.word	0x200046b4
   158ec:	0001c665 	.word	0x0001c665
   158f0:	200046e0 	.word	0x200046e0

000158f4 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   158f4:	b590      	push	{r4, r7, lr}
   158f6:	b085      	sub	sp, #20
   158f8:	af00      	add	r7, sp, #0
   158fa:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   158fc:	2300      	movs	r3, #0
   158fe:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   15900:	687b      	ldr	r3, [r7, #4]
   15902:	2b00      	cmp	r3, #0
   15904:	d003      	beq.n	1590e <I2cWriteData+0x1a>
   15906:	687b      	ldr	r3, [r7, #4]
   15908:	685b      	ldr	r3, [r3, #4]
   1590a:	2b00      	cmp	r3, #0
   1590c:	d103      	bne.n	15916 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   1590e:	2308      	movs	r3, #8
   15910:	425b      	negs	r3, r3
   15912:	60fb      	str	r3, [r7, #12]
        goto exit;
   15914:	e01f      	b.n	15956 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   15916:	687b      	ldr	r3, [r7, #4]
   15918:	781b      	ldrb	r3, [r3, #0]
   1591a:	b29a      	uxth	r2, r3
   1591c:	4b10      	ldr	r3, [pc, #64]	; (15960 <I2cWriteData+0x6c>)
   1591e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   15920:	687b      	ldr	r3, [r7, #4]
   15922:	685a      	ldr	r2, [r3, #4]
   15924:	4b0e      	ldr	r3, [pc, #56]	; (15960 <I2cWriteData+0x6c>)
   15926:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   15928:	687b      	ldr	r3, [r7, #4]
   1592a:	89da      	ldrh	r2, [r3, #14]
   1592c:	4b0c      	ldr	r3, [pc, #48]	; (15960 <I2cWriteData+0x6c>)
   1592e:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   15930:	230b      	movs	r3, #11
   15932:	18fc      	adds	r4, r7, r3
   15934:	4a0a      	ldr	r2, [pc, #40]	; (15960 <I2cWriteData+0x6c>)
   15936:	4b0b      	ldr	r3, [pc, #44]	; (15964 <I2cWriteData+0x70>)
   15938:	0011      	movs	r1, r2
   1593a:	0018      	movs	r0, r3
   1593c:	4b0a      	ldr	r3, [pc, #40]	; (15968 <I2cWriteData+0x74>)
   1593e:	4798      	blx	r3
   15940:	0003      	movs	r3, r0
   15942:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   15944:	230b      	movs	r3, #11
   15946:	18fb      	adds	r3, r7, r3
   15948:	781b      	ldrb	r3, [r3, #0]
   1594a:	2b00      	cmp	r3, #0
   1594c:	d003      	beq.n	15956 <I2cWriteData+0x62>
        error = ERROR_IO;
   1594e:	2306      	movs	r3, #6
   15950:	425b      	negs	r3, r3
   15952:	60fb      	str	r3, [r7, #12]
        goto exit;
   15954:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   15956:	68fb      	ldr	r3, [r7, #12]
}
   15958:	0018      	movs	r0, r3
   1595a:	46bd      	mov	sp, r7
   1595c:	b005      	add	sp, #20
   1595e:	bd90      	pop	{r4, r7, pc}
   15960:	200046e4 	.word	0x200046e4
   15964:	200046b8 	.word	0x200046b8
   15968:	00012b8d 	.word	0x00012b8d

0001596c <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   1596c:	b590      	push	{r4, r7, lr}
   1596e:	b085      	sub	sp, #20
   15970:	af00      	add	r7, sp, #0
   15972:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15974:	2300      	movs	r3, #0
   15976:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   15978:	687b      	ldr	r3, [r7, #4]
   1597a:	2b00      	cmp	r3, #0
   1597c:	d003      	beq.n	15986 <I2cReadData+0x1a>
   1597e:	687b      	ldr	r3, [r7, #4]
   15980:	685b      	ldr	r3, [r3, #4]
   15982:	2b00      	cmp	r3, #0
   15984:	d103      	bne.n	1598e <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   15986:	2308      	movs	r3, #8
   15988:	425b      	negs	r3, r3
   1598a:	60fb      	str	r3, [r7, #12]
        goto exit;
   1598c:	e01f      	b.n	159ce <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   1598e:	687b      	ldr	r3, [r7, #4]
   15990:	781b      	ldrb	r3, [r3, #0]
   15992:	b29a      	uxth	r2, r3
   15994:	4b10      	ldr	r3, [pc, #64]	; (159d8 <I2cReadData+0x6c>)
   15996:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   15998:	687b      	ldr	r3, [r7, #4]
   1599a:	689a      	ldr	r2, [r3, #8]
   1599c:	4b0e      	ldr	r3, [pc, #56]	; (159d8 <I2cReadData+0x6c>)
   1599e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   159a0:	687b      	ldr	r3, [r7, #4]
   159a2:	899a      	ldrh	r2, [r3, #12]
   159a4:	4b0c      	ldr	r3, [pc, #48]	; (159d8 <I2cReadData+0x6c>)
   159a6:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   159a8:	230b      	movs	r3, #11
   159aa:	18fc      	adds	r4, r7, r3
   159ac:	4a0a      	ldr	r2, [pc, #40]	; (159d8 <I2cReadData+0x6c>)
   159ae:	4b0b      	ldr	r3, [pc, #44]	; (159dc <I2cReadData+0x70>)
   159b0:	0011      	movs	r1, r2
   159b2:	0018      	movs	r0, r3
   159b4:	4b0a      	ldr	r3, [pc, #40]	; (159e0 <I2cReadData+0x74>)
   159b6:	4798      	blx	r3
   159b8:	0003      	movs	r3, r0
   159ba:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   159bc:	230b      	movs	r3, #11
   159be:	18fb      	adds	r3, r7, r3
   159c0:	781b      	ldrb	r3, [r3, #0]
   159c2:	2b00      	cmp	r3, #0
   159c4:	d003      	beq.n	159ce <I2cReadData+0x62>
        error = ERROR_IO;
   159c6:	2306      	movs	r3, #6
   159c8:	425b      	negs	r3, r3
   159ca:	60fb      	str	r3, [r7, #12]
        goto exit;
   159cc:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   159ce:	68fb      	ldr	r3, [r7, #12]
}
   159d0:	0018      	movs	r0, r3
   159d2:	46bd      	mov	sp, r7
   159d4:	b005      	add	sp, #20
   159d6:	bd90      	pop	{r4, r7, pc}
   159d8:	200046e4 	.word	0x200046e4
   159dc:	200046b8 	.word	0x200046b8
   159e0:	00012aa9 	.word	0x00012aa9

000159e4 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   159e4:	b590      	push	{r4, r7, lr}
   159e6:	b083      	sub	sp, #12
   159e8:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   159ea:	2300      	movs	r3, #0
   159ec:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   159ee:	4b09      	ldr	r3, [pc, #36]	; (15a14 <I2cFreeMutex+0x30>)
   159f0:	6818      	ldr	r0, [r3, #0]
   159f2:	2300      	movs	r3, #0
   159f4:	2200      	movs	r2, #0
   159f6:	2100      	movs	r1, #0
   159f8:	4c07      	ldr	r4, [pc, #28]	; (15a18 <I2cFreeMutex+0x34>)
   159fa:	47a0      	blx	r4
   159fc:	0003      	movs	r3, r0
   159fe:	2b01      	cmp	r3, #1
   15a00:	d002      	beq.n	15a08 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   15a02:	2314      	movs	r3, #20
   15a04:	425b      	negs	r3, r3
   15a06:	607b      	str	r3, [r7, #4]
    }
    return error;
   15a08:	687b      	ldr	r3, [r7, #4]
}
   15a0a:	0018      	movs	r0, r3
   15a0c:	46bd      	mov	sp, r7
   15a0e:	b003      	add	sp, #12
   15a10:	bd90      	pop	{r4, r7, pc}
   15a12:	46c0      	nop			; (mov r8, r8)
   15a14:	200046b4 	.word	0x200046b4
   15a18:	0001c90d 	.word	0x0001c90d

00015a1c <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   15a1c:	b580      	push	{r7, lr}
   15a1e:	b084      	sub	sp, #16
   15a20:	af00      	add	r7, sp, #0
   15a22:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15a24:	2300      	movs	r3, #0
   15a26:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   15a28:	4b08      	ldr	r3, [pc, #32]	; (15a4c <I2cGetMutex+0x30>)
   15a2a:	681b      	ldr	r3, [r3, #0]
   15a2c:	687a      	ldr	r2, [r7, #4]
   15a2e:	0011      	movs	r1, r2
   15a30:	0018      	movs	r0, r3
   15a32:	4b07      	ldr	r3, [pc, #28]	; (15a50 <I2cGetMutex+0x34>)
   15a34:	4798      	blx	r3
   15a36:	0003      	movs	r3, r0
   15a38:	2b01      	cmp	r3, #1
   15a3a:	d002      	beq.n	15a42 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   15a3c:	231d      	movs	r3, #29
   15a3e:	425b      	negs	r3, r3
   15a40:	60fb      	str	r3, [r7, #12]
    }
    return error;
   15a42:	68fb      	ldr	r3, [r7, #12]
}
   15a44:	0018      	movs	r0, r3
   15a46:	46bd      	mov	sp, r7
   15a48:	b004      	add	sp, #16
   15a4a:	bd80      	pop	{r7, pc}
   15a4c:	200046b4 	.word	0x200046b4
   15a50:	0001d61d 	.word	0x0001d61d

00015a54 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   15a54:	b580      	push	{r7, lr}
   15a56:	b084      	sub	sp, #16
   15a58:	af00      	add	r7, sp, #0
   15a5a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15a5c:	2300      	movs	r3, #0
   15a5e:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   15a60:	4b04      	ldr	r3, [pc, #16]	; (15a74 <I2cGetSemaphoreHandle+0x20>)
   15a62:	681a      	ldr	r2, [r3, #0]
   15a64:	687b      	ldr	r3, [r7, #4]
   15a66:	601a      	str	r2, [r3, #0]
    return error;
   15a68:	68fb      	ldr	r3, [r7, #12]
}
   15a6a:	0018      	movs	r0, r3
   15a6c:	46bd      	mov	sp, r7
   15a6e:	b004      	add	sp, #16
   15a70:	bd80      	pop	{r7, pc}
   15a72:	46c0      	nop			; (mov r8, r8)
   15a74:	200046e0 	.word	0x200046e0

00015a78 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   15a78:	b580      	push	{r7, lr}
   15a7a:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   15a7c:	4b02      	ldr	r3, [pc, #8]	; (15a88 <I2cGetTaskErrorStatus+0x10>)
   15a7e:	781b      	ldrb	r3, [r3, #0]
}
   15a80:	0018      	movs	r0, r3
   15a82:	46bd      	mov	sp, r7
   15a84:	bd80      	pop	{r7, pc}
   15a86:	46c0      	nop			; (mov r8, r8)
   15a88:	20000498 	.word	0x20000498

00015a8c <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   15a8c:	b580      	push	{r7, lr}
   15a8e:	b082      	sub	sp, #8
   15a90:	af00      	add	r7, sp, #0
   15a92:	0002      	movs	r2, r0
   15a94:	1dfb      	adds	r3, r7, #7
   15a96:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   15a98:	4b03      	ldr	r3, [pc, #12]	; (15aa8 <I2cSetTaskErrorStatus+0x1c>)
   15a9a:	1dfa      	adds	r2, r7, #7
   15a9c:	7812      	ldrb	r2, [r2, #0]
   15a9e:	701a      	strb	r2, [r3, #0]
}
   15aa0:	46c0      	nop			; (mov r8, r8)
   15aa2:	46bd      	mov	sp, r7
   15aa4:	b002      	add	sp, #8
   15aa6:	bd80      	pop	{r7, pc}
   15aa8:	20000498 	.word	0x20000498

00015aac <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   15aac:	b580      	push	{r7, lr}
   15aae:	b084      	sub	sp, #16
   15ab0:	af00      	add	r7, sp, #0
   15ab2:	6078      	str	r0, [r7, #4]
   15ab4:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   15ab6:	2300      	movs	r3, #0
   15ab8:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   15aba:	2300      	movs	r3, #0
   15abc:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15abe:	2396      	movs	r3, #150	; 0x96
   15ac0:	005b      	lsls	r3, r3, #1
   15ac2:	0018      	movs	r0, r3
   15ac4:	4b28      	ldr	r3, [pc, #160]	; (15b68 <I2cWriteDataWait+0xbc>)
   15ac6:	4798      	blx	r3
   15ac8:	0003      	movs	r3, r0
   15aca:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15acc:	68fb      	ldr	r3, [r7, #12]
   15ace:	2b00      	cmp	r3, #0
   15ad0:	d138      	bne.n	15b44 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15ad2:	2308      	movs	r3, #8
   15ad4:	18fb      	adds	r3, r7, r3
   15ad6:	0018      	movs	r0, r3
   15ad8:	4b24      	ldr	r3, [pc, #144]	; (15b6c <I2cWriteDataWait+0xc0>)
   15ada:	4798      	blx	r3
   15adc:	0003      	movs	r3, r0
   15ade:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15ae0:	68fb      	ldr	r3, [r7, #12]
   15ae2:	2b00      	cmp	r3, #0
   15ae4:	d130      	bne.n	15b48 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15ae6:	687b      	ldr	r3, [r7, #4]
   15ae8:	0018      	movs	r0, r3
   15aea:	4b21      	ldr	r3, [pc, #132]	; (15b70 <I2cWriteDataWait+0xc4>)
   15aec:	4798      	blx	r3
   15aee:	0003      	movs	r3, r0
   15af0:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15af2:	68fb      	ldr	r3, [r7, #12]
   15af4:	2b00      	cmp	r3, #0
   15af6:	d12a      	bne.n	15b4e <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15af8:	68bb      	ldr	r3, [r7, #8]
   15afa:	683a      	ldr	r2, [r7, #0]
   15afc:	0011      	movs	r1, r2
   15afe:	0018      	movs	r0, r3
   15b00:	4b1c      	ldr	r3, [pc, #112]	; (15b74 <I2cWriteDataWait+0xc8>)
   15b02:	4798      	blx	r3
   15b04:	0003      	movs	r3, r0
   15b06:	2b01      	cmp	r3, #1
   15b08:	d111      	bne.n	15b2e <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15b0a:	4b1b      	ldr	r3, [pc, #108]	; (15b78 <I2cWriteDataWait+0xcc>)
   15b0c:	4798      	blx	r3
   15b0e:	1e03      	subs	r3, r0, #0
   15b10:	d011      	beq.n	15b36 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   15b12:	2000      	movs	r0, #0
   15b14:	4b19      	ldr	r3, [pc, #100]	; (15b7c <I2cWriteDataWait+0xd0>)
   15b16:	4798      	blx	r3
            if (error != ERROR_NONE) {
   15b18:	68fb      	ldr	r3, [r7, #12]
   15b1a:	2b00      	cmp	r3, #0
   15b1c:	d003      	beq.n	15b26 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   15b1e:	2321      	movs	r3, #33	; 0x21
   15b20:	425b      	negs	r3, r3
   15b22:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   15b24:	e014      	b.n	15b50 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   15b26:	2303      	movs	r3, #3
   15b28:	425b      	negs	r3, r3
   15b2a:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   15b2c:	e010      	b.n	15b50 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15b2e:	2303      	movs	r3, #3
   15b30:	425b      	negs	r3, r3
   15b32:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   15b34:	e00c      	b.n	15b50 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   15b36:	4b12      	ldr	r3, [pc, #72]	; (15b80 <I2cWriteDataWait+0xd4>)
   15b38:	4798      	blx	r3
   15b3a:	0002      	movs	r2, r0
   15b3c:	68fb      	ldr	r3, [r7, #12]
   15b3e:	4313      	orrs	r3, r2
   15b40:	60fb      	str	r3, [r7, #12]
   15b42:	e002      	b.n	15b4a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   15b44:	46c0      	nop			; (mov r8, r8)
   15b46:	e000      	b.n	15b4a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   15b48:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15b4a:	68fb      	ldr	r3, [r7, #12]
   15b4c:	e007      	b.n	15b5e <I2cWriteDataWait+0xb2>
        goto exitError0;
   15b4e:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   15b50:	4b0b      	ldr	r3, [pc, #44]	; (15b80 <I2cWriteDataWait+0xd4>)
   15b52:	4798      	blx	r3
   15b54:	0002      	movs	r2, r0
   15b56:	68fb      	ldr	r3, [r7, #12]
   15b58:	4313      	orrs	r3, r2
   15b5a:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   15b5c:	68fb      	ldr	r3, [r7, #12]
}
   15b5e:	0018      	movs	r0, r3
   15b60:	46bd      	mov	sp, r7
   15b62:	b004      	add	sp, #16
   15b64:	bd80      	pop	{r7, pc}
   15b66:	46c0      	nop			; (mov r8, r8)
   15b68:	00015a1d 	.word	0x00015a1d
   15b6c:	00015a55 	.word	0x00015a55
   15b70:	000158f5 	.word	0x000158f5
   15b74:	0001d61d 	.word	0x0001d61d
   15b78:	00015a79 	.word	0x00015a79
   15b7c:	00015a8d 	.word	0x00015a8d
   15b80:	000159e5 	.word	0x000159e5

00015b84 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   15b84:	b580      	push	{r7, lr}
   15b86:	b086      	sub	sp, #24
   15b88:	af00      	add	r7, sp, #0
   15b8a:	60f8      	str	r0, [r7, #12]
   15b8c:	60b9      	str	r1, [r7, #8]
   15b8e:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   15b90:	2300      	movs	r3, #0
   15b92:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   15b94:	2300      	movs	r3, #0
   15b96:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15b98:	2396      	movs	r3, #150	; 0x96
   15b9a:	005b      	lsls	r3, r3, #1
   15b9c:	0018      	movs	r0, r3
   15b9e:	4b35      	ldr	r3, [pc, #212]	; (15c74 <I2cReadDataWait+0xf0>)
   15ba0:	4798      	blx	r3
   15ba2:	0003      	movs	r3, r0
   15ba4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15ba6:	697b      	ldr	r3, [r7, #20]
   15ba8:	2b00      	cmp	r3, #0
   15baa:	d155      	bne.n	15c58 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15bac:	2310      	movs	r3, #16
   15bae:	18fb      	adds	r3, r7, r3
   15bb0:	0018      	movs	r0, r3
   15bb2:	4b31      	ldr	r3, [pc, #196]	; (15c78 <I2cReadDataWait+0xf4>)
   15bb4:	4798      	blx	r3
   15bb6:	0003      	movs	r3, r0
   15bb8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15bba:	697b      	ldr	r3, [r7, #20]
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d14d      	bne.n	15c5c <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15bc0:	68fb      	ldr	r3, [r7, #12]
   15bc2:	0018      	movs	r0, r3
   15bc4:	4b2d      	ldr	r3, [pc, #180]	; (15c7c <I2cReadDataWait+0xf8>)
   15bc6:	4798      	blx	r3
   15bc8:	0003      	movs	r3, r0
   15bca:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15bcc:	697b      	ldr	r3, [r7, #20]
   15bce:	2b00      	cmp	r3, #0
   15bd0:	d147      	bne.n	15c62 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15bd2:	693b      	ldr	r3, [r7, #16]
   15bd4:	687a      	ldr	r2, [r7, #4]
   15bd6:	0011      	movs	r1, r2
   15bd8:	0018      	movs	r0, r3
   15bda:	4b29      	ldr	r3, [pc, #164]	; (15c80 <I2cReadDataWait+0xfc>)
   15bdc:	4798      	blx	r3
   15bde:	0003      	movs	r3, r0
   15be0:	2b01      	cmp	r3, #1
   15be2:	d118      	bne.n	15c16 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15be4:	4b27      	ldr	r3, [pc, #156]	; (15c84 <I2cReadDataWait+0x100>)
   15be6:	4798      	blx	r3
   15be8:	1e03      	subs	r3, r0, #0
   15bea:	d006      	beq.n	15bfa <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   15bec:	2000      	movs	r0, #0
   15bee:	4b26      	ldr	r3, [pc, #152]	; (15c88 <I2cReadDataWait+0x104>)
   15bf0:	4798      	blx	r3
            error = ERROR_ABORTED;
   15bf2:	2303      	movs	r3, #3
   15bf4:	425b      	negs	r3, r3
   15bf6:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15bf8:	e034      	b.n	15c64 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   15bfa:	68bb      	ldr	r3, [r7, #8]
   15bfc:	0018      	movs	r0, r3
   15bfe:	4b23      	ldr	r3, [pc, #140]	; (15c8c <I2cReadDataWait+0x108>)
   15c00:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   15c02:	68fb      	ldr	r3, [r7, #12]
   15c04:	0018      	movs	r0, r3
   15c06:	4b22      	ldr	r3, [pc, #136]	; (15c90 <I2cReadDataWait+0x10c>)
   15c08:	4798      	blx	r3
   15c0a:	0003      	movs	r3, r0
   15c0c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15c0e:	697b      	ldr	r3, [r7, #20]
   15c10:	2b00      	cmp	r3, #0
   15c12:	d004      	beq.n	15c1e <I2cReadDataWait+0x9a>
        goto exitError0;
   15c14:	e026      	b.n	15c64 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   15c16:	2303      	movs	r3, #3
   15c18:	425b      	negs	r3, r3
   15c1a:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15c1c:	e022      	b.n	15c64 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15c1e:	693b      	ldr	r3, [r7, #16]
   15c20:	687a      	ldr	r2, [r7, #4]
   15c22:	0011      	movs	r1, r2
   15c24:	0018      	movs	r0, r3
   15c26:	4b16      	ldr	r3, [pc, #88]	; (15c80 <I2cReadDataWait+0xfc>)
   15c28:	4798      	blx	r3
   15c2a:	0003      	movs	r3, r0
   15c2c:	2b01      	cmp	r3, #1
   15c2e:	d10a      	bne.n	15c46 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15c30:	4b14      	ldr	r3, [pc, #80]	; (15c84 <I2cReadDataWait+0x100>)
   15c32:	4798      	blx	r3
   15c34:	1e03      	subs	r3, r0, #0
   15c36:	d00a      	beq.n	15c4e <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   15c38:	2000      	movs	r0, #0
   15c3a:	4b13      	ldr	r3, [pc, #76]	; (15c88 <I2cReadDataWait+0x104>)
   15c3c:	4798      	blx	r3
            error = ERROR_ABORTED;
   15c3e:	2303      	movs	r3, #3
   15c40:	425b      	negs	r3, r3
   15c42:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15c44:	e00e      	b.n	15c64 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15c46:	2303      	movs	r3, #3
   15c48:	425b      	negs	r3, r3
   15c4a:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15c4c:	e00a      	b.n	15c64 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   15c4e:	4b11      	ldr	r3, [pc, #68]	; (15c94 <I2cReadDataWait+0x110>)
   15c50:	4798      	blx	r3
   15c52:	0003      	movs	r3, r0
   15c54:	617b      	str	r3, [r7, #20]
   15c56:	e002      	b.n	15c5e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15c58:	46c0      	nop			; (mov r8, r8)
   15c5a:	e000      	b.n	15c5e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15c5c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15c5e:	697b      	ldr	r3, [r7, #20]
   15c60:	e003      	b.n	15c6a <I2cReadDataWait+0xe6>
        goto exitError0;
   15c62:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15c64:	4b0b      	ldr	r3, [pc, #44]	; (15c94 <I2cReadDataWait+0x110>)
   15c66:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   15c68:	697b      	ldr	r3, [r7, #20]
}
   15c6a:	0018      	movs	r0, r3
   15c6c:	46bd      	mov	sp, r7
   15c6e:	b006      	add	sp, #24
   15c70:	bd80      	pop	{r7, pc}
   15c72:	46c0      	nop			; (mov r8, r8)
   15c74:	00015a1d 	.word	0x00015a1d
   15c78:	00015a55 	.word	0x00015a55
   15c7c:	000158f5 	.word	0x000158f5
   15c80:	0001d61d 	.word	0x0001d61d
   15c84:	00015a79 	.word	0x00015a79
   15c88:	00015a8d 	.word	0x00015a8d
   15c8c:	0001e371 	.word	0x0001e371
   15c90:	0001596d 	.word	0x0001596d
   15c94:	000159e5 	.word	0x000159e5

00015c98 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   15c98:	b580      	push	{r7, lr}
   15c9a:	b086      	sub	sp, #24
   15c9c:	af00      	add	r7, sp, #0
   15c9e:	60f8      	str	r0, [r7, #12]
   15ca0:	60b9      	str	r1, [r7, #8]
   15ca2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   15ca4:	2300      	movs	r3, #0
   15ca6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   15ca8:	2300      	movs	r3, #0
   15caa:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15cac:	2396      	movs	r3, #150	; 0x96
   15cae:	005b      	lsls	r3, r3, #1
   15cb0:	0018      	movs	r0, r3
   15cb2:	4b24      	ldr	r3, [pc, #144]	; (15d44 <I2cPingAddressWait+0xac>)
   15cb4:	4798      	blx	r3
   15cb6:	0003      	movs	r3, r0
   15cb8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15cba:	697b      	ldr	r3, [r7, #20]
   15cbc:	2b00      	cmp	r3, #0
   15cbe:	d133      	bne.n	15d28 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15cc0:	2310      	movs	r3, #16
   15cc2:	18fb      	adds	r3, r7, r3
   15cc4:	0018      	movs	r0, r3
   15cc6:	4b20      	ldr	r3, [pc, #128]	; (15d48 <I2cPingAddressWait+0xb0>)
   15cc8:	4798      	blx	r3
   15cca:	0003      	movs	r3, r0
   15ccc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15cce:	697b      	ldr	r3, [r7, #20]
   15cd0:	2b00      	cmp	r3, #0
   15cd2:	d12b      	bne.n	15d2c <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15cd4:	68fb      	ldr	r3, [r7, #12]
   15cd6:	0018      	movs	r0, r3
   15cd8:	4b1c      	ldr	r3, [pc, #112]	; (15d4c <I2cPingAddressWait+0xb4>)
   15cda:	4798      	blx	r3
   15cdc:	0003      	movs	r3, r0
   15cde:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15ce0:	697b      	ldr	r3, [r7, #20]
   15ce2:	2b00      	cmp	r3, #0
   15ce4:	d125      	bne.n	15d32 <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15ce6:	693b      	ldr	r3, [r7, #16]
   15ce8:	687a      	ldr	r2, [r7, #4]
   15cea:	0011      	movs	r1, r2
   15cec:	0018      	movs	r0, r3
   15cee:	4b18      	ldr	r3, [pc, #96]	; (15d50 <I2cPingAddressWait+0xb8>)
   15cf0:	4798      	blx	r3
   15cf2:	0003      	movs	r3, r0
   15cf4:	2b01      	cmp	r3, #1
   15cf6:	d113      	bne.n	15d20 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15cf8:	4b16      	ldr	r3, [pc, #88]	; (15d54 <I2cPingAddressWait+0xbc>)
   15cfa:	4798      	blx	r3
   15cfc:	1e03      	subs	r3, r0, #0
   15cfe:	d006      	beq.n	15d0e <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   15d00:	2000      	movs	r0, #0
   15d02:	4b15      	ldr	r3, [pc, #84]	; (15d58 <I2cPingAddressWait+0xc0>)
   15d04:	4798      	blx	r3
            error = ERROR_ABORTED;
   15d06:	2303      	movs	r3, #3
   15d08:	425b      	negs	r3, r3
   15d0a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15d0c:	e012      	b.n	15d34 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   15d0e:	68bb      	ldr	r3, [r7, #8]
   15d10:	0018      	movs	r0, r3
   15d12:	4b12      	ldr	r3, [pc, #72]	; (15d5c <I2cPingAddressWait+0xc4>)
   15d14:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   15d16:	4b12      	ldr	r3, [pc, #72]	; (15d60 <I2cPingAddressWait+0xc8>)
   15d18:	4798      	blx	r3
   15d1a:	0003      	movs	r3, r0
   15d1c:	617b      	str	r3, [r7, #20]
   15d1e:	e006      	b.n	15d2e <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   15d20:	2303      	movs	r3, #3
   15d22:	425b      	negs	r3, r3
   15d24:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15d26:	e005      	b.n	15d34 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   15d28:	46c0      	nop			; (mov r8, r8)
   15d2a:	e000      	b.n	15d2e <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   15d2c:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   15d2e:	697b      	ldr	r3, [r7, #20]
   15d30:	e003      	b.n	15d3a <I2cPingAddressWait+0xa2>
        goto exitError0;
   15d32:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15d34:	4b0a      	ldr	r3, [pc, #40]	; (15d60 <I2cPingAddressWait+0xc8>)
   15d36:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   15d38:	697b      	ldr	r3, [r7, #20]
}
   15d3a:	0018      	movs	r0, r3
   15d3c:	46bd      	mov	sp, r7
   15d3e:	b006      	add	sp, #24
   15d40:	bd80      	pop	{r7, pc}
   15d42:	46c0      	nop			; (mov r8, r8)
   15d44:	00015a1d 	.word	0x00015a1d
   15d48:	00015a55 	.word	0x00015a55
   15d4c:	000158f5 	.word	0x000158f5
   15d50:	0001d61d 	.word	0x0001d61d
   15d54:	00015a79 	.word	0x00015a79
   15d58:	00015a8d 	.word	0x00015a8d
   15d5c:	0001e371 	.word	0x0001e371
   15d60:	000159e5 	.word	0x000159e5

00015d64 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   15d64:	b5b0      	push	{r4, r5, r7, lr}
   15d66:	b086      	sub	sp, #24
   15d68:	af00      	add	r7, sp, #0
   15d6a:	60f8      	str	r0, [r7, #12]
   15d6c:	0008      	movs	r0, r1
   15d6e:	607a      	str	r2, [r7, #4]
   15d70:	0019      	movs	r1, r3
   15d72:	230b      	movs	r3, #11
   15d74:	18fb      	adds	r3, r7, r3
   15d76:	1c02      	adds	r2, r0, #0
   15d78:	701a      	strb	r2, [r3, #0]
   15d7a:	2308      	movs	r3, #8
   15d7c:	18fb      	adds	r3, r7, r3
   15d7e:	1c0a      	adds	r2, r1, #0
   15d80:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   15d82:	68fb      	ldr	r3, [r7, #12]
   15d84:	685c      	ldr	r4, [r3, #4]
   15d86:	68fb      	ldr	r3, [r7, #12]
   15d88:	6898      	ldr	r0, [r3, #8]
   15d8a:	2308      	movs	r3, #8
   15d8c:	18fb      	adds	r3, r7, r3
   15d8e:	881d      	ldrh	r5, [r3, #0]
   15d90:	687a      	ldr	r2, [r7, #4]
   15d92:	230b      	movs	r3, #11
   15d94:	18fb      	adds	r3, r7, r3
   15d96:	7819      	ldrb	r1, [r3, #0]
   15d98:	002b      	movs	r3, r5
   15d9a:	47a0      	blx	r4
   15d9c:	0003      	movs	r3, r0
   15d9e:	617b      	str	r3, [r7, #20]

  return ret;
   15da0:	697b      	ldr	r3, [r7, #20]
}
   15da2:	0018      	movs	r0, r3
   15da4:	46bd      	mov	sp, r7
   15da6:	b006      	add	sp, #24
   15da8:	bdb0      	pop	{r4, r5, r7, pc}

00015daa <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   15daa:	b5b0      	push	{r4, r5, r7, lr}
   15dac:	b086      	sub	sp, #24
   15dae:	af00      	add	r7, sp, #0
   15db0:	60f8      	str	r0, [r7, #12]
   15db2:	0008      	movs	r0, r1
   15db4:	607a      	str	r2, [r7, #4]
   15db6:	0019      	movs	r1, r3
   15db8:	230b      	movs	r3, #11
   15dba:	18fb      	adds	r3, r7, r3
   15dbc:	1c02      	adds	r2, r0, #0
   15dbe:	701a      	strb	r2, [r3, #0]
   15dc0:	2308      	movs	r3, #8
   15dc2:	18fb      	adds	r3, r7, r3
   15dc4:	1c0a      	adds	r2, r1, #0
   15dc6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   15dc8:	68fb      	ldr	r3, [r7, #12]
   15dca:	681c      	ldr	r4, [r3, #0]
   15dcc:	68fb      	ldr	r3, [r7, #12]
   15dce:	6898      	ldr	r0, [r3, #8]
   15dd0:	2308      	movs	r3, #8
   15dd2:	18fb      	adds	r3, r7, r3
   15dd4:	881d      	ldrh	r5, [r3, #0]
   15dd6:	687a      	ldr	r2, [r7, #4]
   15dd8:	230b      	movs	r3, #11
   15dda:	18fb      	adds	r3, r7, r3
   15ddc:	7819      	ldrb	r1, [r3, #0]
   15dde:	002b      	movs	r3, r5
   15de0:	47a0      	blx	r4
   15de2:	0003      	movs	r3, r0
   15de4:	617b      	str	r3, [r7, #20]

  return ret;
   15de6:	697b      	ldr	r3, [r7, #20]
}
   15de8:	0018      	movs	r0, r3
   15dea:	46bd      	mov	sp, r7
   15dec:	b006      	add	sp, #24
   15dee:	bdb0      	pop	{r4, r5, r7, pc}

00015df0 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   15df0:	b580      	push	{r7, lr}
   15df2:	b082      	sub	sp, #8
   15df4:	af00      	add	r7, sp, #0
   15df6:	0002      	movs	r2, r0
   15df8:	1dbb      	adds	r3, r7, #6
   15dfa:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   15dfc:	1dbb      	adds	r3, r7, #6
   15dfe:	2200      	movs	r2, #0
   15e00:	5e9a      	ldrsh	r2, [r3, r2]
   15e02:	4b06      	ldr	r3, [pc, #24]	; (15e1c <lsm6dso_from_fs2_to_mg+0x2c>)
   15e04:	0010      	movs	r0, r2
   15e06:	4798      	blx	r3
   15e08:	1c02      	adds	r2, r0, #0
   15e0a:	4b05      	ldr	r3, [pc, #20]	; (15e20 <lsm6dso_from_fs2_to_mg+0x30>)
   15e0c:	4905      	ldr	r1, [pc, #20]	; (15e24 <lsm6dso_from_fs2_to_mg+0x34>)
   15e0e:	1c10      	adds	r0, r2, #0
   15e10:	4798      	blx	r3
   15e12:	1c03      	adds	r3, r0, #0
}
   15e14:	1c18      	adds	r0, r3, #0
   15e16:	46bd      	mov	sp, r7
   15e18:	b002      	add	sp, #8
   15e1a:	bd80      	pop	{r7, pc}
   15e1c:	000359f1 	.word	0x000359f1
   15e20:	00035439 	.word	0x00035439
   15e24:	3d79db23 	.word	0x3d79db23

00015e28 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15e28:	b590      	push	{r4, r7, lr}
   15e2a:	b085      	sub	sp, #20
   15e2c:	af00      	add	r7, sp, #0
   15e2e:	6078      	str	r0, [r7, #4]
   15e30:	000a      	movs	r2, r1
   15e32:	1cfb      	adds	r3, r7, #3
   15e34:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15e36:	2308      	movs	r3, #8
   15e38:	18fa      	adds	r2, r7, r3
   15e3a:	6878      	ldr	r0, [r7, #4]
   15e3c:	2301      	movs	r3, #1
   15e3e:	2110      	movs	r1, #16
   15e40:	4c12      	ldr	r4, [pc, #72]	; (15e8c <lsm6dso_xl_full_scale_set+0x64>)
   15e42:	47a0      	blx	r4
   15e44:	0003      	movs	r3, r0
   15e46:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15e48:	68fb      	ldr	r3, [r7, #12]
   15e4a:	2b00      	cmp	r3, #0
   15e4c:	d119      	bne.n	15e82 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   15e4e:	1cfb      	adds	r3, r7, #3
   15e50:	781b      	ldrb	r3, [r3, #0]
   15e52:	2203      	movs	r2, #3
   15e54:	4013      	ands	r3, r2
   15e56:	b2da      	uxtb	r2, r3
   15e58:	2308      	movs	r3, #8
   15e5a:	18fb      	adds	r3, r7, r3
   15e5c:	2103      	movs	r1, #3
   15e5e:	400a      	ands	r2, r1
   15e60:	0090      	lsls	r0, r2, #2
   15e62:	781a      	ldrb	r2, [r3, #0]
   15e64:	210c      	movs	r1, #12
   15e66:	438a      	bics	r2, r1
   15e68:	1c11      	adds	r1, r2, #0
   15e6a:	1c02      	adds	r2, r0, #0
   15e6c:	430a      	orrs	r2, r1
   15e6e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15e70:	2308      	movs	r3, #8
   15e72:	18fa      	adds	r2, r7, r3
   15e74:	6878      	ldr	r0, [r7, #4]
   15e76:	2301      	movs	r3, #1
   15e78:	2110      	movs	r1, #16
   15e7a:	4c05      	ldr	r4, [pc, #20]	; (15e90 <lsm6dso_xl_full_scale_set+0x68>)
   15e7c:	47a0      	blx	r4
   15e7e:	0003      	movs	r3, r0
   15e80:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e82:	68fb      	ldr	r3, [r7, #12]
}
   15e84:	0018      	movs	r0, r3
   15e86:	46bd      	mov	sp, r7
   15e88:	b005      	add	sp, #20
   15e8a:	bd90      	pop	{r4, r7, pc}
   15e8c:	00015d65 	.word	0x00015d65
   15e90:	00015dab 	.word	0x00015dab

00015e94 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   15e94:	b590      	push	{r4, r7, lr}
   15e96:	b087      	sub	sp, #28
   15e98:	af00      	add	r7, sp, #0
   15e9a:	6078      	str	r0, [r7, #4]
   15e9c:	000a      	movs	r2, r1
   15e9e:	1cfb      	adds	r3, r7, #3
   15ea0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   15ea2:	2317      	movs	r3, #23
   15ea4:	18fb      	adds	r3, r7, r3
   15ea6:	1cfa      	adds	r2, r7, #3
   15ea8:	7812      	ldrb	r2, [r2, #0]
   15eaa:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15eac:	230c      	movs	r3, #12
   15eae:	18fa      	adds	r2, r7, r3
   15eb0:	687b      	ldr	r3, [r7, #4]
   15eb2:	0011      	movs	r1, r2
   15eb4:	0018      	movs	r0, r3
   15eb6:	4ba4      	ldr	r3, [pc, #656]	; (16148 <lsm6dso_xl_data_rate_set+0x2b4>)
   15eb8:	4798      	blx	r3
   15eba:	0003      	movs	r3, r0
   15ebc:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15ebe:	693b      	ldr	r3, [r7, #16]
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	d000      	beq.n	15ec6 <lsm6dso_xl_data_rate_set+0x32>
   15ec4:	e113      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15ec6:	230c      	movs	r3, #12
   15ec8:	18fb      	adds	r3, r7, r3
   15eca:	781b      	ldrb	r3, [r3, #0]
   15ecc:	07db      	lsls	r3, r3, #31
   15ece:	0fdb      	lsrs	r3, r3, #31
   15ed0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15ed2:	230c      	movs	r3, #12
   15ed4:	18fb      	adds	r3, r7, r3
   15ed6:	781b      	ldrb	r3, [r3, #0]
   15ed8:	079b      	lsls	r3, r3, #30
   15eda:	0fdb      	lsrs	r3, r3, #31
   15edc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15ede:	4313      	orrs	r3, r2
   15ee0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15ee2:	230c      	movs	r3, #12
   15ee4:	18fb      	adds	r3, r7, r3
   15ee6:	781b      	ldrb	r3, [r3, #0]
   15ee8:	075b      	lsls	r3, r3, #29
   15eea:	0fdb      	lsrs	r3, r3, #31
   15eec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15eee:	4313      	orrs	r3, r2
   15ef0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15ef2:	230c      	movs	r3, #12
   15ef4:	18fb      	adds	r3, r7, r3
   15ef6:	781b      	ldrb	r3, [r3, #0]
   15ef8:	071b      	lsls	r3, r3, #28
   15efa:	0fdb      	lsrs	r3, r3, #31
   15efc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15efe:	4313      	orrs	r3, r2
   15f00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15f02:	230c      	movs	r3, #12
   15f04:	18fb      	adds	r3, r7, r3
   15f06:	781b      	ldrb	r3, [r3, #0]
   15f08:	06db      	lsls	r3, r3, #27
   15f0a:	0fdb      	lsrs	r3, r3, #31
   15f0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15f0e:	4313      	orrs	r3, r2
   15f10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15f12:	230c      	movs	r3, #12
   15f14:	18fb      	adds	r3, r7, r3
   15f16:	781b      	ldrb	r3, [r3, #0]
   15f18:	069b      	lsls	r3, r3, #26
   15f1a:	0fdb      	lsrs	r3, r3, #31
   15f1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15f1e:	4313      	orrs	r3, r2
   15f20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15f22:	230c      	movs	r3, #12
   15f24:	18fb      	adds	r3, r7, r3
   15f26:	781b      	ldrb	r3, [r3, #0]
   15f28:	065b      	lsls	r3, r3, #25
   15f2a:	0fdb      	lsrs	r3, r3, #31
   15f2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15f2e:	4313      	orrs	r3, r2
   15f30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15f32:	230c      	movs	r3, #12
   15f34:	18fb      	adds	r3, r7, r3
   15f36:	781b      	ldrb	r3, [r3, #0]
   15f38:	061b      	lsls	r3, r3, #24
   15f3a:	0fdb      	lsrs	r3, r3, #31
   15f3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15f3e:	4313      	orrs	r3, r2
   15f40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15f42:	230c      	movs	r3, #12
   15f44:	18fb      	adds	r3, r7, r3
   15f46:	785b      	ldrb	r3, [r3, #1]
   15f48:	07db      	lsls	r3, r3, #31
   15f4a:	0fdb      	lsrs	r3, r3, #31
   15f4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15f4e:	4313      	orrs	r3, r2
   15f50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15f52:	230c      	movs	r3, #12
   15f54:	18fb      	adds	r3, r7, r3
   15f56:	785b      	ldrb	r3, [r3, #1]
   15f58:	079b      	lsls	r3, r3, #30
   15f5a:	0fdb      	lsrs	r3, r3, #31
   15f5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15f5e:	4313      	orrs	r3, r2
   15f60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15f62:	230c      	movs	r3, #12
   15f64:	18fb      	adds	r3, r7, r3
   15f66:	785b      	ldrb	r3, [r3, #1]
   15f68:	075b      	lsls	r3, r3, #29
   15f6a:	0fdb      	lsrs	r3, r3, #31
   15f6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15f6e:	4313      	orrs	r3, r2
   15f70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f72:	230c      	movs	r3, #12
   15f74:	18fb      	adds	r3, r7, r3
   15f76:	785b      	ldrb	r3, [r3, #1]
   15f78:	071b      	lsls	r3, r3, #28
   15f7a:	0fdb      	lsrs	r3, r3, #31
   15f7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15f7e:	4313      	orrs	r3, r2
   15f80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15f82:	230c      	movs	r3, #12
   15f84:	18fb      	adds	r3, r7, r3
   15f86:	785b      	ldrb	r3, [r3, #1]
   15f88:	06db      	lsls	r3, r3, #27
   15f8a:	0fdb      	lsrs	r3, r3, #31
   15f8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f8e:	4313      	orrs	r3, r2
   15f90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15f92:	230c      	movs	r3, #12
   15f94:	18fb      	adds	r3, r7, r3
   15f96:	785b      	ldrb	r3, [r3, #1]
   15f98:	069b      	lsls	r3, r3, #26
   15f9a:	0fdb      	lsrs	r3, r3, #31
   15f9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15f9e:	4313      	orrs	r3, r2
   15fa0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15fa2:	230c      	movs	r3, #12
   15fa4:	18fb      	adds	r3, r7, r3
   15fa6:	785b      	ldrb	r3, [r3, #1]
   15fa8:	065b      	lsls	r3, r3, #25
   15faa:	0fdb      	lsrs	r3, r3, #31
   15fac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15fae:	4313      	orrs	r3, r2
   15fb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15fb2:	230c      	movs	r3, #12
   15fb4:	18fb      	adds	r3, r7, r3
   15fb6:	785b      	ldrb	r3, [r3, #1]
   15fb8:	061b      	lsls	r3, r3, #24
   15fba:	0fdb      	lsrs	r3, r3, #31
   15fbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15fbe:	4313      	orrs	r3, r2
   15fc0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15fc2:	2b01      	cmp	r3, #1
   15fc4:	d000      	beq.n	15fc8 <lsm6dso_xl_data_rate_set+0x134>
   15fc6:	e092      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15fc8:	230b      	movs	r3, #11
   15fca:	18fa      	adds	r2, r7, r3
   15fcc:	687b      	ldr	r3, [r7, #4]
   15fce:	0011      	movs	r1, r2
   15fd0:	0018      	movs	r0, r3
   15fd2:	4b5e      	ldr	r3, [pc, #376]	; (1614c <lsm6dso_xl_data_rate_set+0x2b8>)
   15fd4:	4798      	blx	r3
   15fd6:	0003      	movs	r3, r0
   15fd8:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15fda:	693b      	ldr	r3, [r7, #16]
   15fdc:	2b00      	cmp	r3, #0
   15fde:	d000      	beq.n	15fe2 <lsm6dso_xl_data_rate_set+0x14e>
   15fe0:	e085      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15fe2:	230b      	movs	r3, #11
   15fe4:	18fb      	adds	r3, r7, r3
   15fe6:	781b      	ldrb	r3, [r3, #0]
   15fe8:	2b01      	cmp	r3, #1
   15fea:	d017      	beq.n	1601c <lsm6dso_xl_data_rate_set+0x188>
   15fec:	dc02      	bgt.n	15ff4 <lsm6dso_xl_data_rate_set+0x160>
   15fee:	2b00      	cmp	r3, #0
   15ff0:	d005      	beq.n	15ffe <lsm6dso_xl_data_rate_set+0x16a>
   15ff2:	e076      	b.n	160e2 <lsm6dso_xl_data_rate_set+0x24e>
   15ff4:	2b02      	cmp	r3, #2
   15ff6:	d029      	beq.n	1604c <lsm6dso_xl_data_rate_set+0x1b8>
   15ff8:	2b03      	cmp	r3, #3
   15ffa:	d048      	beq.n	1608e <lsm6dso_xl_data_rate_set+0x1fa>
   15ffc:	e071      	b.n	160e2 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   15ffe:	1cfb      	adds	r3, r7, #3
   16000:	781b      	ldrb	r3, [r3, #0]
   16002:	2b00      	cmp	r3, #0
   16004:	d104      	bne.n	16010 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   16006:	2317      	movs	r3, #23
   16008:	18fb      	adds	r3, r7, r3
   1600a:	2201      	movs	r2, #1
   1600c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1600e:	e06e      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   16010:	2317      	movs	r3, #23
   16012:	18fb      	adds	r3, r7, r3
   16014:	1cfa      	adds	r2, r7, #3
   16016:	7812      	ldrb	r2, [r2, #0]
   16018:	701a      	strb	r2, [r3, #0]
            break;
   1601a:	e068      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1601c:	1cfb      	adds	r3, r7, #3
   1601e:	781b      	ldrb	r3, [r3, #0]
   16020:	2b00      	cmp	r3, #0
   16022:	d104      	bne.n	1602e <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   16024:	2317      	movs	r3, #23
   16026:	18fb      	adds	r3, r7, r3
   16028:	2202      	movs	r2, #2
   1602a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1602c:	e05f      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1602e:	1cfb      	adds	r3, r7, #3
   16030:	781b      	ldrb	r3, [r3, #0]
   16032:	2b01      	cmp	r3, #1
   16034:	d104      	bne.n	16040 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   16036:	2317      	movs	r3, #23
   16038:	18fb      	adds	r3, r7, r3
   1603a:	2202      	movs	r2, #2
   1603c:	701a      	strb	r2, [r3, #0]
            break;
   1603e:	e056      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   16040:	2317      	movs	r3, #23
   16042:	18fb      	adds	r3, r7, r3
   16044:	1cfa      	adds	r2, r7, #3
   16046:	7812      	ldrb	r2, [r2, #0]
   16048:	701a      	strb	r2, [r3, #0]
            break;
   1604a:	e050      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1604c:	1cfb      	adds	r3, r7, #3
   1604e:	781b      	ldrb	r3, [r3, #0]
   16050:	2b00      	cmp	r3, #0
   16052:	d104      	bne.n	1605e <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16054:	2317      	movs	r3, #23
   16056:	18fb      	adds	r3, r7, r3
   16058:	2203      	movs	r2, #3
   1605a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1605c:	e047      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1605e:	1cfb      	adds	r3, r7, #3
   16060:	781b      	ldrb	r3, [r3, #0]
   16062:	2b01      	cmp	r3, #1
   16064:	d104      	bne.n	16070 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16066:	2317      	movs	r3, #23
   16068:	18fb      	adds	r3, r7, r3
   1606a:	2203      	movs	r2, #3
   1606c:	701a      	strb	r2, [r3, #0]
            break;
   1606e:	e03e      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   16070:	1cfb      	adds	r3, r7, #3
   16072:	781b      	ldrb	r3, [r3, #0]
   16074:	2b02      	cmp	r3, #2
   16076:	d104      	bne.n	16082 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16078:	2317      	movs	r3, #23
   1607a:	18fb      	adds	r3, r7, r3
   1607c:	2203      	movs	r2, #3
   1607e:	701a      	strb	r2, [r3, #0]
            break;
   16080:	e035      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   16082:	2317      	movs	r3, #23
   16084:	18fb      	adds	r3, r7, r3
   16086:	1cfa      	adds	r2, r7, #3
   16088:	7812      	ldrb	r2, [r2, #0]
   1608a:	701a      	strb	r2, [r3, #0]
            break;
   1608c:	e02f      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1608e:	1cfb      	adds	r3, r7, #3
   16090:	781b      	ldrb	r3, [r3, #0]
   16092:	2b00      	cmp	r3, #0
   16094:	d104      	bne.n	160a0 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16096:	2317      	movs	r3, #23
   16098:	18fb      	adds	r3, r7, r3
   1609a:	2204      	movs	r2, #4
   1609c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1609e:	e026      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   160a0:	1cfb      	adds	r3, r7, #3
   160a2:	781b      	ldrb	r3, [r3, #0]
   160a4:	2b01      	cmp	r3, #1
   160a6:	d104      	bne.n	160b2 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   160a8:	2317      	movs	r3, #23
   160aa:	18fb      	adds	r3, r7, r3
   160ac:	2204      	movs	r2, #4
   160ae:	701a      	strb	r2, [r3, #0]
            break;
   160b0:	e01d      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   160b2:	1cfb      	adds	r3, r7, #3
   160b4:	781b      	ldrb	r3, [r3, #0]
   160b6:	2b02      	cmp	r3, #2
   160b8:	d104      	bne.n	160c4 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   160ba:	2317      	movs	r3, #23
   160bc:	18fb      	adds	r3, r7, r3
   160be:	2204      	movs	r2, #4
   160c0:	701a      	strb	r2, [r3, #0]
            break;
   160c2:	e014      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   160c4:	1cfb      	adds	r3, r7, #3
   160c6:	781b      	ldrb	r3, [r3, #0]
   160c8:	2b03      	cmp	r3, #3
   160ca:	d104      	bne.n	160d6 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   160cc:	2317      	movs	r3, #23
   160ce:	18fb      	adds	r3, r7, r3
   160d0:	2204      	movs	r2, #4
   160d2:	701a      	strb	r2, [r3, #0]
            break;
   160d4:	e00b      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   160d6:	2317      	movs	r3, #23
   160d8:	18fb      	adds	r3, r7, r3
   160da:	1cfa      	adds	r2, r7, #3
   160dc:	7812      	ldrb	r2, [r2, #0]
   160de:	701a      	strb	r2, [r3, #0]
            break;
   160e0:	e005      	b.n	160ee <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   160e2:	2317      	movs	r3, #23
   160e4:	18fb      	adds	r3, r7, r3
   160e6:	1cfa      	adds	r2, r7, #3
   160e8:	7812      	ldrb	r2, [r2, #0]
   160ea:	701a      	strb	r2, [r3, #0]
            break;
   160ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   160ee:	693b      	ldr	r3, [r7, #16]
   160f0:	2b00      	cmp	r3, #0
   160f2:	d108      	bne.n	16106 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   160f4:	2308      	movs	r3, #8
   160f6:	18fa      	adds	r2, r7, r3
   160f8:	6878      	ldr	r0, [r7, #4]
   160fa:	2301      	movs	r3, #1
   160fc:	2110      	movs	r1, #16
   160fe:	4c14      	ldr	r4, [pc, #80]	; (16150 <lsm6dso_xl_data_rate_set+0x2bc>)
   16100:	47a0      	blx	r4
   16102:	0003      	movs	r3, r0
   16104:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   16106:	693b      	ldr	r3, [r7, #16]
   16108:	2b00      	cmp	r3, #0
   1610a:	d118      	bne.n	1613e <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   1610c:	2317      	movs	r3, #23
   1610e:	18fb      	adds	r3, r7, r3
   16110:	781b      	ldrb	r3, [r3, #0]
   16112:	220f      	movs	r2, #15
   16114:	4013      	ands	r3, r2
   16116:	b2da      	uxtb	r2, r3
   16118:	2308      	movs	r3, #8
   1611a:	18fb      	adds	r3, r7, r3
   1611c:	0110      	lsls	r0, r2, #4
   1611e:	781a      	ldrb	r2, [r3, #0]
   16120:	210f      	movs	r1, #15
   16122:	400a      	ands	r2, r1
   16124:	1c11      	adds	r1, r2, #0
   16126:	1c02      	adds	r2, r0, #0
   16128:	430a      	orrs	r2, r1
   1612a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1612c:	2308      	movs	r3, #8
   1612e:	18fa      	adds	r2, r7, r3
   16130:	6878      	ldr	r0, [r7, #4]
   16132:	2301      	movs	r3, #1
   16134:	2110      	movs	r1, #16
   16136:	4c07      	ldr	r4, [pc, #28]	; (16154 <lsm6dso_xl_data_rate_set+0x2c0>)
   16138:	47a0      	blx	r4
   1613a:	0003      	movs	r3, r0
   1613c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1613e:	693b      	ldr	r3, [r7, #16]
}
   16140:	0018      	movs	r0, r3
   16142:	46bd      	mov	sp, r7
   16144:	b007      	add	sp, #28
   16146:	bd90      	pop	{r4, r7, pc}
   16148:	00016971 	.word	0x00016971
   1614c:	000169c5 	.word	0x000169c5
   16150:	00015d65 	.word	0x00015d65
   16154:	00015dab 	.word	0x00015dab

00016158 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   16158:	b590      	push	{r4, r7, lr}
   1615a:	b085      	sub	sp, #20
   1615c:	af00      	add	r7, sp, #0
   1615e:	6078      	str	r0, [r7, #4]
   16160:	000a      	movs	r2, r1
   16162:	1cfb      	adds	r3, r7, #3
   16164:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16166:	2308      	movs	r3, #8
   16168:	18fa      	adds	r2, r7, r3
   1616a:	6878      	ldr	r0, [r7, #4]
   1616c:	2301      	movs	r3, #1
   1616e:	2111      	movs	r1, #17
   16170:	4c12      	ldr	r4, [pc, #72]	; (161bc <lsm6dso_gy_full_scale_set+0x64>)
   16172:	47a0      	blx	r4
   16174:	0003      	movs	r3, r0
   16176:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16178:	68fb      	ldr	r3, [r7, #12]
   1617a:	2b00      	cmp	r3, #0
   1617c:	d119      	bne.n	161b2 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1617e:	1cfb      	adds	r3, r7, #3
   16180:	781b      	ldrb	r3, [r3, #0]
   16182:	2207      	movs	r2, #7
   16184:	4013      	ands	r3, r2
   16186:	b2da      	uxtb	r2, r3
   16188:	2308      	movs	r3, #8
   1618a:	18fb      	adds	r3, r7, r3
   1618c:	2107      	movs	r1, #7
   1618e:	400a      	ands	r2, r1
   16190:	1890      	adds	r0, r2, r2
   16192:	781a      	ldrb	r2, [r3, #0]
   16194:	210e      	movs	r1, #14
   16196:	438a      	bics	r2, r1
   16198:	1c11      	adds	r1, r2, #0
   1619a:	1c02      	adds	r2, r0, #0
   1619c:	430a      	orrs	r2, r1
   1619e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   161a0:	2308      	movs	r3, #8
   161a2:	18fa      	adds	r2, r7, r3
   161a4:	6878      	ldr	r0, [r7, #4]
   161a6:	2301      	movs	r3, #1
   161a8:	2111      	movs	r1, #17
   161aa:	4c05      	ldr	r4, [pc, #20]	; (161c0 <lsm6dso_gy_full_scale_set+0x68>)
   161ac:	47a0      	blx	r4
   161ae:	0003      	movs	r3, r0
   161b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   161b2:	68fb      	ldr	r3, [r7, #12]
}
   161b4:	0018      	movs	r0, r3
   161b6:	46bd      	mov	sp, r7
   161b8:	b005      	add	sp, #20
   161ba:	bd90      	pop	{r4, r7, pc}
   161bc:	00015d65 	.word	0x00015d65
   161c0:	00015dab 	.word	0x00015dab

000161c4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   161c4:	b590      	push	{r4, r7, lr}
   161c6:	b087      	sub	sp, #28
   161c8:	af00      	add	r7, sp, #0
   161ca:	6078      	str	r0, [r7, #4]
   161cc:	000a      	movs	r2, r1
   161ce:	1cfb      	adds	r3, r7, #3
   161d0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   161d2:	2317      	movs	r3, #23
   161d4:	18fb      	adds	r3, r7, r3
   161d6:	1cfa      	adds	r2, r7, #3
   161d8:	7812      	ldrb	r2, [r2, #0]
   161da:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   161dc:	230c      	movs	r3, #12
   161de:	18fa      	adds	r2, r7, r3
   161e0:	687b      	ldr	r3, [r7, #4]
   161e2:	0011      	movs	r1, r2
   161e4:	0018      	movs	r0, r3
   161e6:	4ba4      	ldr	r3, [pc, #656]	; (16478 <lsm6dso_gy_data_rate_set+0x2b4>)
   161e8:	4798      	blx	r3
   161ea:	0003      	movs	r3, r0
   161ec:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   161ee:	693b      	ldr	r3, [r7, #16]
   161f0:	2b00      	cmp	r3, #0
   161f2:	d000      	beq.n	161f6 <lsm6dso_gy_data_rate_set+0x32>
   161f4:	e113      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   161f6:	230c      	movs	r3, #12
   161f8:	18fb      	adds	r3, r7, r3
   161fa:	781b      	ldrb	r3, [r3, #0]
   161fc:	07db      	lsls	r3, r3, #31
   161fe:	0fdb      	lsrs	r3, r3, #31
   16200:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   16202:	230c      	movs	r3, #12
   16204:	18fb      	adds	r3, r7, r3
   16206:	781b      	ldrb	r3, [r3, #0]
   16208:	079b      	lsls	r3, r3, #30
   1620a:	0fdb      	lsrs	r3, r3, #31
   1620c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1620e:	4313      	orrs	r3, r2
   16210:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   16212:	230c      	movs	r3, #12
   16214:	18fb      	adds	r3, r7, r3
   16216:	781b      	ldrb	r3, [r3, #0]
   16218:	075b      	lsls	r3, r3, #29
   1621a:	0fdb      	lsrs	r3, r3, #31
   1621c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1621e:	4313      	orrs	r3, r2
   16220:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   16222:	230c      	movs	r3, #12
   16224:	18fb      	adds	r3, r7, r3
   16226:	781b      	ldrb	r3, [r3, #0]
   16228:	071b      	lsls	r3, r3, #28
   1622a:	0fdb      	lsrs	r3, r3, #31
   1622c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1622e:	4313      	orrs	r3, r2
   16230:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   16232:	230c      	movs	r3, #12
   16234:	18fb      	adds	r3, r7, r3
   16236:	781b      	ldrb	r3, [r3, #0]
   16238:	06db      	lsls	r3, r3, #27
   1623a:	0fdb      	lsrs	r3, r3, #31
   1623c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1623e:	4313      	orrs	r3, r2
   16240:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   16242:	230c      	movs	r3, #12
   16244:	18fb      	adds	r3, r7, r3
   16246:	781b      	ldrb	r3, [r3, #0]
   16248:	069b      	lsls	r3, r3, #26
   1624a:	0fdb      	lsrs	r3, r3, #31
   1624c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1624e:	4313      	orrs	r3, r2
   16250:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   16252:	230c      	movs	r3, #12
   16254:	18fb      	adds	r3, r7, r3
   16256:	781b      	ldrb	r3, [r3, #0]
   16258:	065b      	lsls	r3, r3, #25
   1625a:	0fdb      	lsrs	r3, r3, #31
   1625c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1625e:	4313      	orrs	r3, r2
   16260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   16262:	230c      	movs	r3, #12
   16264:	18fb      	adds	r3, r7, r3
   16266:	781b      	ldrb	r3, [r3, #0]
   16268:	061b      	lsls	r3, r3, #24
   1626a:	0fdb      	lsrs	r3, r3, #31
   1626c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1626e:	4313      	orrs	r3, r2
   16270:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   16272:	230c      	movs	r3, #12
   16274:	18fb      	adds	r3, r7, r3
   16276:	785b      	ldrb	r3, [r3, #1]
   16278:	07db      	lsls	r3, r3, #31
   1627a:	0fdb      	lsrs	r3, r3, #31
   1627c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1627e:	4313      	orrs	r3, r2
   16280:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   16282:	230c      	movs	r3, #12
   16284:	18fb      	adds	r3, r7, r3
   16286:	785b      	ldrb	r3, [r3, #1]
   16288:	079b      	lsls	r3, r3, #30
   1628a:	0fdb      	lsrs	r3, r3, #31
   1628c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1628e:	4313      	orrs	r3, r2
   16290:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   16292:	230c      	movs	r3, #12
   16294:	18fb      	adds	r3, r7, r3
   16296:	785b      	ldrb	r3, [r3, #1]
   16298:	075b      	lsls	r3, r3, #29
   1629a:	0fdb      	lsrs	r3, r3, #31
   1629c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1629e:	4313      	orrs	r3, r2
   162a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   162a2:	230c      	movs	r3, #12
   162a4:	18fb      	adds	r3, r7, r3
   162a6:	785b      	ldrb	r3, [r3, #1]
   162a8:	071b      	lsls	r3, r3, #28
   162aa:	0fdb      	lsrs	r3, r3, #31
   162ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   162ae:	4313      	orrs	r3, r2
   162b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   162b2:	230c      	movs	r3, #12
   162b4:	18fb      	adds	r3, r7, r3
   162b6:	785b      	ldrb	r3, [r3, #1]
   162b8:	06db      	lsls	r3, r3, #27
   162ba:	0fdb      	lsrs	r3, r3, #31
   162bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   162be:	4313      	orrs	r3, r2
   162c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   162c2:	230c      	movs	r3, #12
   162c4:	18fb      	adds	r3, r7, r3
   162c6:	785b      	ldrb	r3, [r3, #1]
   162c8:	069b      	lsls	r3, r3, #26
   162ca:	0fdb      	lsrs	r3, r3, #31
   162cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   162ce:	4313      	orrs	r3, r2
   162d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   162d2:	230c      	movs	r3, #12
   162d4:	18fb      	adds	r3, r7, r3
   162d6:	785b      	ldrb	r3, [r3, #1]
   162d8:	065b      	lsls	r3, r3, #25
   162da:	0fdb      	lsrs	r3, r3, #31
   162dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   162de:	4313      	orrs	r3, r2
   162e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   162e2:	230c      	movs	r3, #12
   162e4:	18fb      	adds	r3, r7, r3
   162e6:	785b      	ldrb	r3, [r3, #1]
   162e8:	061b      	lsls	r3, r3, #24
   162ea:	0fdb      	lsrs	r3, r3, #31
   162ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   162ee:	4313      	orrs	r3, r2
   162f0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   162f2:	2b01      	cmp	r3, #1
   162f4:	d000      	beq.n	162f8 <lsm6dso_gy_data_rate_set+0x134>
   162f6:	e092      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   162f8:	230b      	movs	r3, #11
   162fa:	18fa      	adds	r2, r7, r3
   162fc:	687b      	ldr	r3, [r7, #4]
   162fe:	0011      	movs	r1, r2
   16300:	0018      	movs	r0, r3
   16302:	4b5e      	ldr	r3, [pc, #376]	; (1647c <lsm6dso_gy_data_rate_set+0x2b8>)
   16304:	4798      	blx	r3
   16306:	0003      	movs	r3, r0
   16308:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1630a:	693b      	ldr	r3, [r7, #16]
   1630c:	2b00      	cmp	r3, #0
   1630e:	d000      	beq.n	16312 <lsm6dso_gy_data_rate_set+0x14e>
   16310:	e085      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   16312:	230b      	movs	r3, #11
   16314:	18fb      	adds	r3, r7, r3
   16316:	781b      	ldrb	r3, [r3, #0]
   16318:	2b01      	cmp	r3, #1
   1631a:	d017      	beq.n	1634c <lsm6dso_gy_data_rate_set+0x188>
   1631c:	dc02      	bgt.n	16324 <lsm6dso_gy_data_rate_set+0x160>
   1631e:	2b00      	cmp	r3, #0
   16320:	d005      	beq.n	1632e <lsm6dso_gy_data_rate_set+0x16a>
   16322:	e076      	b.n	16412 <lsm6dso_gy_data_rate_set+0x24e>
   16324:	2b02      	cmp	r3, #2
   16326:	d029      	beq.n	1637c <lsm6dso_gy_data_rate_set+0x1b8>
   16328:	2b03      	cmp	r3, #3
   1632a:	d048      	beq.n	163be <lsm6dso_gy_data_rate_set+0x1fa>
   1632c:	e071      	b.n	16412 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   1632e:	1cfb      	adds	r3, r7, #3
   16330:	781b      	ldrb	r3, [r3, #0]
   16332:	2b00      	cmp	r3, #0
   16334:	d104      	bne.n	16340 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   16336:	2317      	movs	r3, #23
   16338:	18fb      	adds	r3, r7, r3
   1633a:	2201      	movs	r2, #1
   1633c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1633e:	e06e      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   16340:	2317      	movs	r3, #23
   16342:	18fb      	adds	r3, r7, r3
   16344:	1cfa      	adds	r2, r7, #3
   16346:	7812      	ldrb	r2, [r2, #0]
   16348:	701a      	strb	r2, [r3, #0]
            break;
   1634a:	e068      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1634c:	1cfb      	adds	r3, r7, #3
   1634e:	781b      	ldrb	r3, [r3, #0]
   16350:	2b00      	cmp	r3, #0
   16352:	d104      	bne.n	1635e <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   16354:	2317      	movs	r3, #23
   16356:	18fb      	adds	r3, r7, r3
   16358:	2202      	movs	r2, #2
   1635a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1635c:	e05f      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1635e:	1cfb      	adds	r3, r7, #3
   16360:	781b      	ldrb	r3, [r3, #0]
   16362:	2b01      	cmp	r3, #1
   16364:	d104      	bne.n	16370 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   16366:	2317      	movs	r3, #23
   16368:	18fb      	adds	r3, r7, r3
   1636a:	2202      	movs	r2, #2
   1636c:	701a      	strb	r2, [r3, #0]
            break;
   1636e:	e056      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   16370:	2317      	movs	r3, #23
   16372:	18fb      	adds	r3, r7, r3
   16374:	1cfa      	adds	r2, r7, #3
   16376:	7812      	ldrb	r2, [r2, #0]
   16378:	701a      	strb	r2, [r3, #0]
            break;
   1637a:	e050      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1637c:	1cfb      	adds	r3, r7, #3
   1637e:	781b      	ldrb	r3, [r3, #0]
   16380:	2b00      	cmp	r3, #0
   16382:	d104      	bne.n	1638e <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16384:	2317      	movs	r3, #23
   16386:	18fb      	adds	r3, r7, r3
   16388:	2203      	movs	r2, #3
   1638a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1638c:	e047      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1638e:	1cfb      	adds	r3, r7, #3
   16390:	781b      	ldrb	r3, [r3, #0]
   16392:	2b01      	cmp	r3, #1
   16394:	d104      	bne.n	163a0 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16396:	2317      	movs	r3, #23
   16398:	18fb      	adds	r3, r7, r3
   1639a:	2203      	movs	r2, #3
   1639c:	701a      	strb	r2, [r3, #0]
            break;
   1639e:	e03e      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   163a0:	1cfb      	adds	r3, r7, #3
   163a2:	781b      	ldrb	r3, [r3, #0]
   163a4:	2b02      	cmp	r3, #2
   163a6:	d104      	bne.n	163b2 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   163a8:	2317      	movs	r3, #23
   163aa:	18fb      	adds	r3, r7, r3
   163ac:	2203      	movs	r2, #3
   163ae:	701a      	strb	r2, [r3, #0]
            break;
   163b0:	e035      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   163b2:	2317      	movs	r3, #23
   163b4:	18fb      	adds	r3, r7, r3
   163b6:	1cfa      	adds	r2, r7, #3
   163b8:	7812      	ldrb	r2, [r2, #0]
   163ba:	701a      	strb	r2, [r3, #0]
            break;
   163bc:	e02f      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   163be:	1cfb      	adds	r3, r7, #3
   163c0:	781b      	ldrb	r3, [r3, #0]
   163c2:	2b00      	cmp	r3, #0
   163c4:	d104      	bne.n	163d0 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   163c6:	2317      	movs	r3, #23
   163c8:	18fb      	adds	r3, r7, r3
   163ca:	2204      	movs	r2, #4
   163cc:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   163ce:	e026      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   163d0:	1cfb      	adds	r3, r7, #3
   163d2:	781b      	ldrb	r3, [r3, #0]
   163d4:	2b01      	cmp	r3, #1
   163d6:	d104      	bne.n	163e2 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   163d8:	2317      	movs	r3, #23
   163da:	18fb      	adds	r3, r7, r3
   163dc:	2204      	movs	r2, #4
   163de:	701a      	strb	r2, [r3, #0]
            break;
   163e0:	e01d      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   163e2:	1cfb      	adds	r3, r7, #3
   163e4:	781b      	ldrb	r3, [r3, #0]
   163e6:	2b02      	cmp	r3, #2
   163e8:	d104      	bne.n	163f4 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   163ea:	2317      	movs	r3, #23
   163ec:	18fb      	adds	r3, r7, r3
   163ee:	2204      	movs	r2, #4
   163f0:	701a      	strb	r2, [r3, #0]
            break;
   163f2:	e014      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   163f4:	1cfb      	adds	r3, r7, #3
   163f6:	781b      	ldrb	r3, [r3, #0]
   163f8:	2b03      	cmp	r3, #3
   163fa:	d104      	bne.n	16406 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   163fc:	2317      	movs	r3, #23
   163fe:	18fb      	adds	r3, r7, r3
   16400:	2204      	movs	r2, #4
   16402:	701a      	strb	r2, [r3, #0]
            break;
   16404:	e00b      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   16406:	2317      	movs	r3, #23
   16408:	18fb      	adds	r3, r7, r3
   1640a:	1cfa      	adds	r2, r7, #3
   1640c:	7812      	ldrb	r2, [r2, #0]
   1640e:	701a      	strb	r2, [r3, #0]
            break;
   16410:	e005      	b.n	1641e <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   16412:	2317      	movs	r3, #23
   16414:	18fb      	adds	r3, r7, r3
   16416:	1cfa      	adds	r2, r7, #3
   16418:	7812      	ldrb	r2, [r2, #0]
   1641a:	701a      	strb	r2, [r3, #0]
            break;
   1641c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1641e:	693b      	ldr	r3, [r7, #16]
   16420:	2b00      	cmp	r3, #0
   16422:	d108      	bne.n	16436 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16424:	2308      	movs	r3, #8
   16426:	18fa      	adds	r2, r7, r3
   16428:	6878      	ldr	r0, [r7, #4]
   1642a:	2301      	movs	r3, #1
   1642c:	2111      	movs	r1, #17
   1642e:	4c14      	ldr	r4, [pc, #80]	; (16480 <lsm6dso_gy_data_rate_set+0x2bc>)
   16430:	47a0      	blx	r4
   16432:	0003      	movs	r3, r0
   16434:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   16436:	693b      	ldr	r3, [r7, #16]
   16438:	2b00      	cmp	r3, #0
   1643a:	d118      	bne.n	1646e <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   1643c:	2317      	movs	r3, #23
   1643e:	18fb      	adds	r3, r7, r3
   16440:	781b      	ldrb	r3, [r3, #0]
   16442:	220f      	movs	r2, #15
   16444:	4013      	ands	r3, r2
   16446:	b2da      	uxtb	r2, r3
   16448:	2308      	movs	r3, #8
   1644a:	18fb      	adds	r3, r7, r3
   1644c:	0110      	lsls	r0, r2, #4
   1644e:	781a      	ldrb	r2, [r3, #0]
   16450:	210f      	movs	r1, #15
   16452:	400a      	ands	r2, r1
   16454:	1c11      	adds	r1, r2, #0
   16456:	1c02      	adds	r2, r0, #0
   16458:	430a      	orrs	r2, r1
   1645a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1645c:	2308      	movs	r3, #8
   1645e:	18fa      	adds	r2, r7, r3
   16460:	6878      	ldr	r0, [r7, #4]
   16462:	2301      	movs	r3, #1
   16464:	2111      	movs	r1, #17
   16466:	4c07      	ldr	r4, [pc, #28]	; (16484 <lsm6dso_gy_data_rate_set+0x2c0>)
   16468:	47a0      	blx	r4
   1646a:	0003      	movs	r3, r0
   1646c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1646e:	693b      	ldr	r3, [r7, #16]
}
   16470:	0018      	movs	r0, r3
   16472:	46bd      	mov	sp, r7
   16474:	b007      	add	sp, #28
   16476:	bd90      	pop	{r4, r7, pc}
   16478:	00016971 	.word	0x00016971
   1647c:	000169c5 	.word	0x000169c5
   16480:	00015d65 	.word	0x00015d65
   16484:	00015dab 	.word	0x00015dab

00016488 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16488:	b590      	push	{r4, r7, lr}
   1648a:	b085      	sub	sp, #20
   1648c:	af00      	add	r7, sp, #0
   1648e:	6078      	str	r0, [r7, #4]
   16490:	000a      	movs	r2, r1
   16492:	1cfb      	adds	r3, r7, #3
   16494:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16496:	2308      	movs	r3, #8
   16498:	18fa      	adds	r2, r7, r3
   1649a:	6878      	ldr	r0, [r7, #4]
   1649c:	2301      	movs	r3, #1
   1649e:	2112      	movs	r1, #18
   164a0:	4c12      	ldr	r4, [pc, #72]	; (164ec <lsm6dso_block_data_update_set+0x64>)
   164a2:	47a0      	blx	r4
   164a4:	0003      	movs	r3, r0
   164a6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   164a8:	68fb      	ldr	r3, [r7, #12]
   164aa:	2b00      	cmp	r3, #0
   164ac:	d119      	bne.n	164e2 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   164ae:	1cfb      	adds	r3, r7, #3
   164b0:	781b      	ldrb	r3, [r3, #0]
   164b2:	2201      	movs	r2, #1
   164b4:	4013      	ands	r3, r2
   164b6:	b2da      	uxtb	r2, r3
   164b8:	2308      	movs	r3, #8
   164ba:	18fb      	adds	r3, r7, r3
   164bc:	2101      	movs	r1, #1
   164be:	400a      	ands	r2, r1
   164c0:	0190      	lsls	r0, r2, #6
   164c2:	781a      	ldrb	r2, [r3, #0]
   164c4:	2140      	movs	r1, #64	; 0x40
   164c6:	438a      	bics	r2, r1
   164c8:	1c11      	adds	r1, r2, #0
   164ca:	1c02      	adds	r2, r0, #0
   164cc:	430a      	orrs	r2, r1
   164ce:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   164d0:	2308      	movs	r3, #8
   164d2:	18fa      	adds	r2, r7, r3
   164d4:	6878      	ldr	r0, [r7, #4]
   164d6:	2301      	movs	r3, #1
   164d8:	2112      	movs	r1, #18
   164da:	4c05      	ldr	r4, [pc, #20]	; (164f0 <lsm6dso_block_data_update_set+0x68>)
   164dc:	47a0      	blx	r4
   164de:	0003      	movs	r3, r0
   164e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   164e2:	68fb      	ldr	r3, [r7, #12]
}
   164e4:	0018      	movs	r0, r3
   164e6:	46bd      	mov	sp, r7
   164e8:	b005      	add	sp, #20
   164ea:	bd90      	pop	{r4, r7, pc}
   164ec:	00015d65 	.word	0x00015d65
   164f0:	00015dab 	.word	0x00015dab

000164f4 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   164f4:	b590      	push	{r4, r7, lr}
   164f6:	b085      	sub	sp, #20
   164f8:	af00      	add	r7, sp, #0
   164fa:	6078      	str	r0, [r7, #4]
   164fc:	000a      	movs	r2, r1
   164fe:	1cfb      	adds	r3, r7, #3
   16500:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   16502:	2308      	movs	r3, #8
   16504:	18fa      	adds	r2, r7, r3
   16506:	6878      	ldr	r0, [r7, #4]
   16508:	2301      	movs	r3, #1
   1650a:	2115      	movs	r1, #21
   1650c:	4c12      	ldr	r4, [pc, #72]	; (16558 <lsm6dso_xl_offset_weight_set+0x64>)
   1650e:	47a0      	blx	r4
   16510:	0003      	movs	r3, r0
   16512:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16514:	68fb      	ldr	r3, [r7, #12]
   16516:	2b00      	cmp	r3, #0
   16518:	d119      	bne.n	1654e <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   1651a:	1cfb      	adds	r3, r7, #3
   1651c:	781b      	ldrb	r3, [r3, #0]
   1651e:	2201      	movs	r2, #1
   16520:	4013      	ands	r3, r2
   16522:	b2da      	uxtb	r2, r3
   16524:	2308      	movs	r3, #8
   16526:	18fb      	adds	r3, r7, r3
   16528:	2101      	movs	r1, #1
   1652a:	400a      	ands	r2, r1
   1652c:	00d0      	lsls	r0, r2, #3
   1652e:	781a      	ldrb	r2, [r3, #0]
   16530:	2108      	movs	r1, #8
   16532:	438a      	bics	r2, r1
   16534:	1c11      	adds	r1, r2, #0
   16536:	1c02      	adds	r2, r0, #0
   16538:	430a      	orrs	r2, r1
   1653a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1653c:	2308      	movs	r3, #8
   1653e:	18fa      	adds	r2, r7, r3
   16540:	6878      	ldr	r0, [r7, #4]
   16542:	2301      	movs	r3, #1
   16544:	2115      	movs	r1, #21
   16546:	4c05      	ldr	r4, [pc, #20]	; (1655c <lsm6dso_xl_offset_weight_set+0x68>)
   16548:	47a0      	blx	r4
   1654a:	0003      	movs	r3, r0
   1654c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1654e:	68fb      	ldr	r3, [r7, #12]
}
   16550:	0018      	movs	r0, r3
   16552:	46bd      	mov	sp, r7
   16554:	b005      	add	sp, #20
   16556:	bd90      	pop	{r4, r7, pc}
   16558:	00015d65 	.word	0x00015d65
   1655c:	00015dab 	.word	0x00015dab

00016560 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   16560:	b590      	push	{r4, r7, lr}
   16562:	b085      	sub	sp, #20
   16564:	af00      	add	r7, sp, #0
   16566:	6078      	str	r0, [r7, #4]
   16568:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1656a:	2308      	movs	r3, #8
   1656c:	18fa      	adds	r2, r7, r3
   1656e:	6878      	ldr	r0, [r7, #4]
   16570:	2301      	movs	r3, #1
   16572:	211e      	movs	r1, #30
   16574:	4c08      	ldr	r4, [pc, #32]	; (16598 <lsm6dso_xl_flag_data_ready_get+0x38>)
   16576:	47a0      	blx	r4
   16578:	0003      	movs	r3, r0
   1657a:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   1657c:	2308      	movs	r3, #8
   1657e:	18fb      	adds	r3, r7, r3
   16580:	781b      	ldrb	r3, [r3, #0]
   16582:	07db      	lsls	r3, r3, #31
   16584:	0fdb      	lsrs	r3, r3, #31
   16586:	b2db      	uxtb	r3, r3
   16588:	001a      	movs	r2, r3
   1658a:	683b      	ldr	r3, [r7, #0]
   1658c:	701a      	strb	r2, [r3, #0]

  return ret;
   1658e:	68fb      	ldr	r3, [r7, #12]
}
   16590:	0018      	movs	r0, r3
   16592:	46bd      	mov	sp, r7
   16594:	b005      	add	sp, #20
   16596:	bd90      	pop	{r4, r7, pc}
   16598:	00015d65 	.word	0x00015d65

0001659c <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   1659c:	b590      	push	{r4, r7, lr}
   1659e:	b087      	sub	sp, #28
   165a0:	af00      	add	r7, sp, #0
   165a2:	6078      	str	r0, [r7, #4]
   165a4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   165a6:	230c      	movs	r3, #12
   165a8:	18fa      	adds	r2, r7, r3
   165aa:	6878      	ldr	r0, [r7, #4]
   165ac:	2306      	movs	r3, #6
   165ae:	2128      	movs	r1, #40	; 0x28
   165b0:	4c26      	ldr	r4, [pc, #152]	; (1664c <lsm6dso_acceleration_raw_get+0xb0>)
   165b2:	47a0      	blx	r4
   165b4:	0003      	movs	r3, r0
   165b6:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   165b8:	230c      	movs	r3, #12
   165ba:	18fb      	adds	r3, r7, r3
   165bc:	785b      	ldrb	r3, [r3, #1]
   165be:	b21a      	sxth	r2, r3
   165c0:	683b      	ldr	r3, [r7, #0]
   165c2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   165c4:	683b      	ldr	r3, [r7, #0]
   165c6:	2200      	movs	r2, #0
   165c8:	5e9b      	ldrsh	r3, [r3, r2]
   165ca:	b29b      	uxth	r3, r3
   165cc:	021b      	lsls	r3, r3, #8
   165ce:	b29a      	uxth	r2, r3
   165d0:	230c      	movs	r3, #12
   165d2:	18fb      	adds	r3, r7, r3
   165d4:	781b      	ldrb	r3, [r3, #0]
   165d6:	b29b      	uxth	r3, r3
   165d8:	18d3      	adds	r3, r2, r3
   165da:	b29b      	uxth	r3, r3
   165dc:	b21a      	sxth	r2, r3
   165de:	683b      	ldr	r3, [r7, #0]
   165e0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   165e2:	683b      	ldr	r3, [r7, #0]
   165e4:	3302      	adds	r3, #2
   165e6:	220c      	movs	r2, #12
   165e8:	18ba      	adds	r2, r7, r2
   165ea:	78d2      	ldrb	r2, [r2, #3]
   165ec:	b212      	sxth	r2, r2
   165ee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   165f0:	683b      	ldr	r3, [r7, #0]
   165f2:	3302      	adds	r3, #2
   165f4:	683a      	ldr	r2, [r7, #0]
   165f6:	3202      	adds	r2, #2
   165f8:	2100      	movs	r1, #0
   165fa:	5e52      	ldrsh	r2, [r2, r1]
   165fc:	b292      	uxth	r2, r2
   165fe:	0212      	lsls	r2, r2, #8
   16600:	b291      	uxth	r1, r2
   16602:	220c      	movs	r2, #12
   16604:	18ba      	adds	r2, r7, r2
   16606:	7892      	ldrb	r2, [r2, #2]
   16608:	b292      	uxth	r2, r2
   1660a:	188a      	adds	r2, r1, r2
   1660c:	b292      	uxth	r2, r2
   1660e:	b212      	sxth	r2, r2
   16610:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   16612:	683b      	ldr	r3, [r7, #0]
   16614:	3304      	adds	r3, #4
   16616:	220c      	movs	r2, #12
   16618:	18ba      	adds	r2, r7, r2
   1661a:	7952      	ldrb	r2, [r2, #5]
   1661c:	b212      	sxth	r2, r2
   1661e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   16620:	683b      	ldr	r3, [r7, #0]
   16622:	3304      	adds	r3, #4
   16624:	683a      	ldr	r2, [r7, #0]
   16626:	3204      	adds	r2, #4
   16628:	2100      	movs	r1, #0
   1662a:	5e52      	ldrsh	r2, [r2, r1]
   1662c:	b292      	uxth	r2, r2
   1662e:	0212      	lsls	r2, r2, #8
   16630:	b291      	uxth	r1, r2
   16632:	220c      	movs	r2, #12
   16634:	18ba      	adds	r2, r7, r2
   16636:	7912      	ldrb	r2, [r2, #4]
   16638:	b292      	uxth	r2, r2
   1663a:	188a      	adds	r2, r1, r2
   1663c:	b292      	uxth	r2, r2
   1663e:	b212      	sxth	r2, r2
   16640:	801a      	strh	r2, [r3, #0]

  return ret;
   16642:	697b      	ldr	r3, [r7, #20]
}
   16644:	0018      	movs	r0, r3
   16646:	46bd      	mov	sp, r7
   16648:	b007      	add	sp, #28
   1664a:	bd90      	pop	{r4, r7, pc}
   1664c:	00015d65 	.word	0x00015d65

00016650 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   16650:	b590      	push	{r4, r7, lr}
   16652:	b085      	sub	sp, #20
   16654:	af00      	add	r7, sp, #0
   16656:	6078      	str	r0, [r7, #4]
   16658:	000a      	movs	r2, r1
   1665a:	1cfb      	adds	r3, r7, #3
   1665c:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   1665e:	2308      	movs	r3, #8
   16660:	18fa      	adds	r2, r7, r3
   16662:	6878      	ldr	r0, [r7, #4]
   16664:	2301      	movs	r3, #1
   16666:	2101      	movs	r1, #1
   16668:	4c11      	ldr	r4, [pc, #68]	; (166b0 <lsm6dso_mem_bank_set+0x60>)
   1666a:	47a0      	blx	r4
   1666c:	0003      	movs	r3, r0
   1666e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16670:	68fb      	ldr	r3, [r7, #12]
   16672:	2b00      	cmp	r3, #0
   16674:	d117      	bne.n	166a6 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   16676:	1cfb      	adds	r3, r7, #3
   16678:	781b      	ldrb	r3, [r3, #0]
   1667a:	2203      	movs	r2, #3
   1667c:	4013      	ands	r3, r2
   1667e:	b2da      	uxtb	r2, r3
   16680:	2308      	movs	r3, #8
   16682:	18fb      	adds	r3, r7, r3
   16684:	0190      	lsls	r0, r2, #6
   16686:	781a      	ldrb	r2, [r3, #0]
   16688:	213f      	movs	r1, #63	; 0x3f
   1668a:	400a      	ands	r2, r1
   1668c:	1c11      	adds	r1, r2, #0
   1668e:	1c02      	adds	r2, r0, #0
   16690:	430a      	orrs	r2, r1
   16692:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   16694:	2308      	movs	r3, #8
   16696:	18fa      	adds	r2, r7, r3
   16698:	6878      	ldr	r0, [r7, #4]
   1669a:	2301      	movs	r3, #1
   1669c:	2101      	movs	r1, #1
   1669e:	4c05      	ldr	r4, [pc, #20]	; (166b4 <lsm6dso_mem_bank_set+0x64>)
   166a0:	47a0      	blx	r4
   166a2:	0003      	movs	r3, r0
   166a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   166a6:	68fb      	ldr	r3, [r7, #12]
}
   166a8:	0018      	movs	r0, r3
   166aa:	46bd      	mov	sp, r7
   166ac:	b005      	add	sp, #20
   166ae:	bd90      	pop	{r4, r7, pc}
   166b0:	00015d65 	.word	0x00015d65
   166b4:	00015dab 	.word	0x00015dab

000166b8 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   166b8:	b590      	push	{r4, r7, lr}
   166ba:	b085      	sub	sp, #20
   166bc:	af00      	add	r7, sp, #0
   166be:	6078      	str	r0, [r7, #4]
   166c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   166c2:	683a      	ldr	r2, [r7, #0]
   166c4:	6878      	ldr	r0, [r7, #4]
   166c6:	2301      	movs	r3, #1
   166c8:	210f      	movs	r1, #15
   166ca:	4c04      	ldr	r4, [pc, #16]	; (166dc <lsm6dso_device_id_get+0x24>)
   166cc:	47a0      	blx	r4
   166ce:	0003      	movs	r3, r0
   166d0:	60fb      	str	r3, [r7, #12]

  return ret;
   166d2:	68fb      	ldr	r3, [r7, #12]
}
   166d4:	0018      	movs	r0, r3
   166d6:	46bd      	mov	sp, r7
   166d8:	b005      	add	sp, #20
   166da:	bd90      	pop	{r4, r7, pc}
   166dc:	00015d65 	.word	0x00015d65

000166e0 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   166e0:	b590      	push	{r4, r7, lr}
   166e2:	b085      	sub	sp, #20
   166e4:	af00      	add	r7, sp, #0
   166e6:	6078      	str	r0, [r7, #4]
   166e8:	000a      	movs	r2, r1
   166ea:	1cfb      	adds	r3, r7, #3
   166ec:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   166ee:	2308      	movs	r3, #8
   166f0:	18fa      	adds	r2, r7, r3
   166f2:	6878      	ldr	r0, [r7, #4]
   166f4:	2301      	movs	r3, #1
   166f6:	2112      	movs	r1, #18
   166f8:	4c12      	ldr	r4, [pc, #72]	; (16744 <lsm6dso_reset_set+0x64>)
   166fa:	47a0      	blx	r4
   166fc:	0003      	movs	r3, r0
   166fe:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16700:	68fb      	ldr	r3, [r7, #12]
   16702:	2b00      	cmp	r3, #0
   16704:	d119      	bne.n	1673a <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   16706:	1cfb      	adds	r3, r7, #3
   16708:	781b      	ldrb	r3, [r3, #0]
   1670a:	2201      	movs	r2, #1
   1670c:	4013      	ands	r3, r2
   1670e:	b2da      	uxtb	r2, r3
   16710:	2308      	movs	r3, #8
   16712:	18fb      	adds	r3, r7, r3
   16714:	2101      	movs	r1, #1
   16716:	400a      	ands	r2, r1
   16718:	0010      	movs	r0, r2
   1671a:	781a      	ldrb	r2, [r3, #0]
   1671c:	2101      	movs	r1, #1
   1671e:	438a      	bics	r2, r1
   16720:	1c11      	adds	r1, r2, #0
   16722:	1c02      	adds	r2, r0, #0
   16724:	430a      	orrs	r2, r1
   16726:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16728:	2308      	movs	r3, #8
   1672a:	18fa      	adds	r2, r7, r3
   1672c:	6878      	ldr	r0, [r7, #4]
   1672e:	2301      	movs	r3, #1
   16730:	2112      	movs	r1, #18
   16732:	4c05      	ldr	r4, [pc, #20]	; (16748 <lsm6dso_reset_set+0x68>)
   16734:	47a0      	blx	r4
   16736:	0003      	movs	r3, r0
   16738:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1673a:	68fb      	ldr	r3, [r7, #12]
}
   1673c:	0018      	movs	r0, r3
   1673e:	46bd      	mov	sp, r7
   16740:	b005      	add	sp, #20
   16742:	bd90      	pop	{r4, r7, pc}
   16744:	00015d65 	.word	0x00015d65
   16748:	00015dab 	.word	0x00015dab

0001674c <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   1674c:	b590      	push	{r4, r7, lr}
   1674e:	b085      	sub	sp, #20
   16750:	af00      	add	r7, sp, #0
   16752:	6078      	str	r0, [r7, #4]
   16754:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16756:	2308      	movs	r3, #8
   16758:	18fa      	adds	r2, r7, r3
   1675a:	6878      	ldr	r0, [r7, #4]
   1675c:	2301      	movs	r3, #1
   1675e:	2112      	movs	r1, #18
   16760:	4c08      	ldr	r4, [pc, #32]	; (16784 <lsm6dso_reset_get+0x38>)
   16762:	47a0      	blx	r4
   16764:	0003      	movs	r3, r0
   16766:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   16768:	2308      	movs	r3, #8
   1676a:	18fb      	adds	r3, r7, r3
   1676c:	781b      	ldrb	r3, [r3, #0]
   1676e:	07db      	lsls	r3, r3, #31
   16770:	0fdb      	lsrs	r3, r3, #31
   16772:	b2db      	uxtb	r3, r3
   16774:	001a      	movs	r2, r3
   16776:	683b      	ldr	r3, [r7, #0]
   16778:	701a      	strb	r2, [r3, #0]

  return ret;
   1677a:	68fb      	ldr	r3, [r7, #12]
}
   1677c:	0018      	movs	r0, r3
   1677e:	46bd      	mov	sp, r7
   16780:	b005      	add	sp, #20
   16782:	bd90      	pop	{r4, r7, pc}
   16784:	00015d65 	.word	0x00015d65

00016788 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16788:	b590      	push	{r4, r7, lr}
   1678a:	b085      	sub	sp, #20
   1678c:	af00      	add	r7, sp, #0
   1678e:	6078      	str	r0, [r7, #4]
   16790:	000a      	movs	r2, r1
   16792:	1cfb      	adds	r3, r7, #3
   16794:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16796:	2308      	movs	r3, #8
   16798:	18fa      	adds	r2, r7, r3
   1679a:	6878      	ldr	r0, [r7, #4]
   1679c:	2301      	movs	r3, #1
   1679e:	2110      	movs	r1, #16
   167a0:	4c12      	ldr	r4, [pc, #72]	; (167ec <lsm6dso_xl_filter_lp2_set+0x64>)
   167a2:	47a0      	blx	r4
   167a4:	0003      	movs	r3, r0
   167a6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   167a8:	68fb      	ldr	r3, [r7, #12]
   167aa:	2b00      	cmp	r3, #0
   167ac:	d119      	bne.n	167e2 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   167ae:	1cfb      	adds	r3, r7, #3
   167b0:	781b      	ldrb	r3, [r3, #0]
   167b2:	2201      	movs	r2, #1
   167b4:	4013      	ands	r3, r2
   167b6:	b2da      	uxtb	r2, r3
   167b8:	2308      	movs	r3, #8
   167ba:	18fb      	adds	r3, r7, r3
   167bc:	2101      	movs	r1, #1
   167be:	400a      	ands	r2, r1
   167c0:	1890      	adds	r0, r2, r2
   167c2:	781a      	ldrb	r2, [r3, #0]
   167c4:	2102      	movs	r1, #2
   167c6:	438a      	bics	r2, r1
   167c8:	1c11      	adds	r1, r2, #0
   167ca:	1c02      	adds	r2, r0, #0
   167cc:	430a      	orrs	r2, r1
   167ce:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   167d0:	2308      	movs	r3, #8
   167d2:	18fa      	adds	r2, r7, r3
   167d4:	6878      	ldr	r0, [r7, #4]
   167d6:	2301      	movs	r3, #1
   167d8:	2110      	movs	r1, #16
   167da:	4c05      	ldr	r4, [pc, #20]	; (167f0 <lsm6dso_xl_filter_lp2_set+0x68>)
   167dc:	47a0      	blx	r4
   167de:	0003      	movs	r3, r0
   167e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   167e2:	68fb      	ldr	r3, [r7, #12]
}
   167e4:	0018      	movs	r0, r3
   167e6:	46bd      	mov	sp, r7
   167e8:	b005      	add	sp, #20
   167ea:	bd90      	pop	{r4, r7, pc}
   167ec:	00015d65 	.word	0x00015d65
   167f0:	00015dab 	.word	0x00015dab

000167f4 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   167f4:	b590      	push	{r4, r7, lr}
   167f6:	b085      	sub	sp, #20
   167f8:	af00      	add	r7, sp, #0
   167fa:	6078      	str	r0, [r7, #4]
   167fc:	000a      	movs	r2, r1
   167fe:	1cfb      	adds	r3, r7, #3
   16800:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16802:	2308      	movs	r3, #8
   16804:	18fa      	adds	r2, r7, r3
   16806:	6878      	ldr	r0, [r7, #4]
   16808:	2301      	movs	r3, #1
   1680a:	2117      	movs	r1, #23
   1680c:	4c25      	ldr	r4, [pc, #148]	; (168a4 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   1680e:	47a0      	blx	r4
   16810:	0003      	movs	r3, r0
   16812:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16814:	68fb      	ldr	r3, [r7, #12]
   16816:	2b00      	cmp	r3, #0
   16818:	d13f      	bne.n	1689a <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   1681a:	1cfb      	adds	r3, r7, #3
   1681c:	781b      	ldrb	r3, [r3, #0]
   1681e:	091b      	lsrs	r3, r3, #4
   16820:	b2db      	uxtb	r3, r3
   16822:	1c1a      	adds	r2, r3, #0
   16824:	2301      	movs	r3, #1
   16826:	4013      	ands	r3, r2
   16828:	b2da      	uxtb	r2, r3
   1682a:	2308      	movs	r3, #8
   1682c:	18fb      	adds	r3, r7, r3
   1682e:	2101      	movs	r1, #1
   16830:	400a      	ands	r2, r1
   16832:	0090      	lsls	r0, r2, #2
   16834:	781a      	ldrb	r2, [r3, #0]
   16836:	2104      	movs	r1, #4
   16838:	438a      	bics	r2, r1
   1683a:	1c11      	adds	r1, r2, #0
   1683c:	1c02      	adds	r2, r0, #0
   1683e:	430a      	orrs	r2, r1
   16840:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   16842:	1cfb      	adds	r3, r7, #3
   16844:	781b      	ldrb	r3, [r3, #0]
   16846:	095b      	lsrs	r3, r3, #5
   16848:	b2db      	uxtb	r3, r3
   1684a:	1c1a      	adds	r2, r3, #0
   1684c:	2301      	movs	r3, #1
   1684e:	4013      	ands	r3, r2
   16850:	b2da      	uxtb	r2, r3
   16852:	2308      	movs	r3, #8
   16854:	18fb      	adds	r3, r7, r3
   16856:	2101      	movs	r1, #1
   16858:	400a      	ands	r2, r1
   1685a:	0110      	lsls	r0, r2, #4
   1685c:	781a      	ldrb	r2, [r3, #0]
   1685e:	2110      	movs	r1, #16
   16860:	438a      	bics	r2, r1
   16862:	1c11      	adds	r1, r2, #0
   16864:	1c02      	adds	r2, r0, #0
   16866:	430a      	orrs	r2, r1
   16868:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   1686a:	1cfb      	adds	r3, r7, #3
   1686c:	781b      	ldrb	r3, [r3, #0]
   1686e:	2207      	movs	r2, #7
   16870:	4013      	ands	r3, r2
   16872:	b2da      	uxtb	r2, r3
   16874:	2308      	movs	r3, #8
   16876:	18fb      	adds	r3, r7, r3
   16878:	0150      	lsls	r0, r2, #5
   1687a:	781a      	ldrb	r2, [r3, #0]
   1687c:	211f      	movs	r1, #31
   1687e:	400a      	ands	r2, r1
   16880:	1c11      	adds	r1, r2, #0
   16882:	1c02      	adds	r2, r0, #0
   16884:	430a      	orrs	r2, r1
   16886:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16888:	2308      	movs	r3, #8
   1688a:	18fa      	adds	r2, r7, r3
   1688c:	6878      	ldr	r0, [r7, #4]
   1688e:	2301      	movs	r3, #1
   16890:	2117      	movs	r1, #23
   16892:	4c05      	ldr	r4, [pc, #20]	; (168a8 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   16894:	47a0      	blx	r4
   16896:	0003      	movs	r3, r0
   16898:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1689a:	68fb      	ldr	r3, [r7, #12]
}
   1689c:	0018      	movs	r0, r3
   1689e:	46bd      	mov	sp, r7
   168a0:	b005      	add	sp, #20
   168a2:	bd90      	pop	{r4, r7, pc}
   168a4:	00015d65 	.word	0x00015d65
   168a8:	00015dab 	.word	0x00015dab

000168ac <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   168ac:	b590      	push	{r4, r7, lr}
   168ae:	b087      	sub	sp, #28
   168b0:	af00      	add	r7, sp, #0
   168b2:	6078      	str	r0, [r7, #4]
   168b4:	000a      	movs	r2, r1
   168b6:	1cfb      	adds	r3, r7, #3
   168b8:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   168ba:	230c      	movs	r3, #12
   168bc:	18fa      	adds	r2, r7, r3
   168be:	6878      	ldr	r0, [r7, #4]
   168c0:	2301      	movs	r3, #1
   168c2:	2118      	movs	r1, #24
   168c4:	4c28      	ldr	r4, [pc, #160]	; (16968 <lsm6dso_i3c_disable_set+0xbc>)
   168c6:	47a0      	blx	r4
   168c8:	0003      	movs	r3, r0
   168ca:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   168cc:	697b      	ldr	r3, [r7, #20]
   168ce:	2b00      	cmp	r3, #0
   168d0:	d11c      	bne.n	1690c <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   168d2:	1cfb      	adds	r3, r7, #3
   168d4:	781b      	ldrb	r3, [r3, #0]
   168d6:	09db      	lsrs	r3, r3, #7
   168d8:	b2db      	uxtb	r3, r3
   168da:	1c1a      	adds	r2, r3, #0
   168dc:	2301      	movs	r3, #1
   168de:	4013      	ands	r3, r2
   168e0:	b2da      	uxtb	r2, r3
   168e2:	230c      	movs	r3, #12
   168e4:	18fb      	adds	r3, r7, r3
   168e6:	2101      	movs	r1, #1
   168e8:	400a      	ands	r2, r1
   168ea:	1890      	adds	r0, r2, r2
   168ec:	781a      	ldrb	r2, [r3, #0]
   168ee:	2102      	movs	r1, #2
   168f0:	438a      	bics	r2, r1
   168f2:	1c11      	adds	r1, r2, #0
   168f4:	1c02      	adds	r2, r0, #0
   168f6:	430a      	orrs	r2, r1
   168f8:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   168fa:	230c      	movs	r3, #12
   168fc:	18fa      	adds	r2, r7, r3
   168fe:	6878      	ldr	r0, [r7, #4]
   16900:	2301      	movs	r3, #1
   16902:	2118      	movs	r1, #24
   16904:	4c19      	ldr	r4, [pc, #100]	; (1696c <lsm6dso_i3c_disable_set+0xc0>)
   16906:	47a0      	blx	r4
   16908:	0003      	movs	r3, r0
   1690a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   1690c:	697b      	ldr	r3, [r7, #20]
   1690e:	2b00      	cmp	r3, #0
   16910:	d108      	bne.n	16924 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   16912:	2310      	movs	r3, #16
   16914:	18fa      	adds	r2, r7, r3
   16916:	6878      	ldr	r0, [r7, #4]
   16918:	2301      	movs	r3, #1
   1691a:	2162      	movs	r1, #98	; 0x62
   1691c:	4c12      	ldr	r4, [pc, #72]	; (16968 <lsm6dso_i3c_disable_set+0xbc>)
   1691e:	47a0      	blx	r4
   16920:	0003      	movs	r3, r0
   16922:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   16924:	697b      	ldr	r3, [r7, #20]
   16926:	2b00      	cmp	r3, #0
   16928:	d119      	bne.n	1695e <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   1692a:	1cfb      	adds	r3, r7, #3
   1692c:	781b      	ldrb	r3, [r3, #0]
   1692e:	2203      	movs	r2, #3
   16930:	4013      	ands	r3, r2
   16932:	b2da      	uxtb	r2, r3
   16934:	2310      	movs	r3, #16
   16936:	18fb      	adds	r3, r7, r3
   16938:	2103      	movs	r1, #3
   1693a:	400a      	ands	r2, r1
   1693c:	00d0      	lsls	r0, r2, #3
   1693e:	781a      	ldrb	r2, [r3, #0]
   16940:	2118      	movs	r1, #24
   16942:	438a      	bics	r2, r1
   16944:	1c11      	adds	r1, r2, #0
   16946:	1c02      	adds	r2, r0, #0
   16948:	430a      	orrs	r2, r1
   1694a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   1694c:	2310      	movs	r3, #16
   1694e:	18fa      	adds	r2, r7, r3
   16950:	6878      	ldr	r0, [r7, #4]
   16952:	2301      	movs	r3, #1
   16954:	2162      	movs	r1, #98	; 0x62
   16956:	4c05      	ldr	r4, [pc, #20]	; (1696c <lsm6dso_i3c_disable_set+0xc0>)
   16958:	47a0      	blx	r4
   1695a:	0003      	movs	r3, r0
   1695c:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   1695e:	697b      	ldr	r3, [r7, #20]
}
   16960:	0018      	movs	r0, r3
   16962:	46bd      	mov	sp, r7
   16964:	b007      	add	sp, #28
   16966:	bd90      	pop	{r4, r7, pc}
   16968:	00015d65 	.word	0x00015d65
   1696c:	00015dab 	.word	0x00015dab

00016970 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   16970:	b590      	push	{r4, r7, lr}
   16972:	b085      	sub	sp, #20
   16974:	af00      	add	r7, sp, #0
   16976:	6078      	str	r0, [r7, #4]
   16978:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1697a:	687b      	ldr	r3, [r7, #4]
   1697c:	2102      	movs	r1, #2
   1697e:	0018      	movs	r0, r3
   16980:	4b0e      	ldr	r3, [pc, #56]	; (169bc <lsm6dso_fsm_enable_get+0x4c>)
   16982:	4798      	blx	r3
   16984:	0003      	movs	r3, r0
   16986:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16988:	68fb      	ldr	r3, [r7, #12]
   1698a:	2b00      	cmp	r3, #0
   1698c:	d107      	bne.n	1699e <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   1698e:	683a      	ldr	r2, [r7, #0]
   16990:	6878      	ldr	r0, [r7, #4]
   16992:	2302      	movs	r3, #2
   16994:	2146      	movs	r1, #70	; 0x46
   16996:	4c0a      	ldr	r4, [pc, #40]	; (169c0 <lsm6dso_fsm_enable_get+0x50>)
   16998:	47a0      	blx	r4
   1699a:	0003      	movs	r3, r0
   1699c:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   1699e:	68fb      	ldr	r3, [r7, #12]
   169a0:	2b00      	cmp	r3, #0
   169a2:	d106      	bne.n	169b2 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   169a4:	687b      	ldr	r3, [r7, #4]
   169a6:	2100      	movs	r1, #0
   169a8:	0018      	movs	r0, r3
   169aa:	4b04      	ldr	r3, [pc, #16]	; (169bc <lsm6dso_fsm_enable_get+0x4c>)
   169ac:	4798      	blx	r3
   169ae:	0003      	movs	r3, r0
   169b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   169b2:	68fb      	ldr	r3, [r7, #12]
}
   169b4:	0018      	movs	r0, r3
   169b6:	46bd      	mov	sp, r7
   169b8:	b005      	add	sp, #20
   169ba:	bd90      	pop	{r4, r7, pc}
   169bc:	00016651 	.word	0x00016651
   169c0:	00015d65 	.word	0x00015d65

000169c4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   169c4:	b590      	push	{r4, r7, lr}
   169c6:	b085      	sub	sp, #20
   169c8:	af00      	add	r7, sp, #0
   169ca:	6078      	str	r0, [r7, #4]
   169cc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   169ce:	687b      	ldr	r3, [r7, #4]
   169d0:	2102      	movs	r1, #2
   169d2:	0018      	movs	r0, r3
   169d4:	4b21      	ldr	r3, [pc, #132]	; (16a5c <lsm6dso_fsm_data_rate_get+0x98>)
   169d6:	4798      	blx	r3
   169d8:	0003      	movs	r3, r0
   169da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   169dc:	68fb      	ldr	r3, [r7, #12]
   169de:	2b00      	cmp	r3, #0
   169e0:	d108      	bne.n	169f4 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   169e2:	2308      	movs	r3, #8
   169e4:	18fa      	adds	r2, r7, r3
   169e6:	6878      	ldr	r0, [r7, #4]
   169e8:	2301      	movs	r3, #1
   169ea:	215f      	movs	r1, #95	; 0x5f
   169ec:	4c1c      	ldr	r4, [pc, #112]	; (16a60 <lsm6dso_fsm_data_rate_get+0x9c>)
   169ee:	47a0      	blx	r4
   169f0:	0003      	movs	r3, r0
   169f2:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   169f4:	68fb      	ldr	r3, [r7, #12]
   169f6:	2b00      	cmp	r3, #0
   169f8:	d12b      	bne.n	16a52 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   169fa:	2308      	movs	r3, #8
   169fc:	18fb      	adds	r3, r7, r3
   169fe:	781b      	ldrb	r3, [r3, #0]
   16a00:	06db      	lsls	r3, r3, #27
   16a02:	0f9b      	lsrs	r3, r3, #30
   16a04:	b2db      	uxtb	r3, r3
   16a06:	2b01      	cmp	r3, #1
   16a08:	d00c      	beq.n	16a24 <lsm6dso_fsm_data_rate_get+0x60>
   16a0a:	dc02      	bgt.n	16a12 <lsm6dso_fsm_data_rate_get+0x4e>
   16a0c:	2b00      	cmp	r3, #0
   16a0e:	d005      	beq.n	16a1c <lsm6dso_fsm_data_rate_get+0x58>
   16a10:	e014      	b.n	16a3c <lsm6dso_fsm_data_rate_get+0x78>
   16a12:	2b02      	cmp	r3, #2
   16a14:	d00a      	beq.n	16a2c <lsm6dso_fsm_data_rate_get+0x68>
   16a16:	2b03      	cmp	r3, #3
   16a18:	d00c      	beq.n	16a34 <lsm6dso_fsm_data_rate_get+0x70>
   16a1a:	e00f      	b.n	16a3c <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   16a1c:	683b      	ldr	r3, [r7, #0]
   16a1e:	2200      	movs	r2, #0
   16a20:	701a      	strb	r2, [r3, #0]
        break;
   16a22:	e00f      	b.n	16a44 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   16a24:	683b      	ldr	r3, [r7, #0]
   16a26:	2201      	movs	r2, #1
   16a28:	701a      	strb	r2, [r3, #0]
        break;
   16a2a:	e00b      	b.n	16a44 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   16a2c:	683b      	ldr	r3, [r7, #0]
   16a2e:	2202      	movs	r2, #2
   16a30:	701a      	strb	r2, [r3, #0]
        break;
   16a32:	e007      	b.n	16a44 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   16a34:	683b      	ldr	r3, [r7, #0]
   16a36:	2203      	movs	r2, #3
   16a38:	701a      	strb	r2, [r3, #0]
        break;
   16a3a:	e003      	b.n	16a44 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   16a3c:	683b      	ldr	r3, [r7, #0]
   16a3e:	2200      	movs	r2, #0
   16a40:	701a      	strb	r2, [r3, #0]
        break;
   16a42:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   16a44:	687b      	ldr	r3, [r7, #4]
   16a46:	2100      	movs	r1, #0
   16a48:	0018      	movs	r0, r3
   16a4a:	4b04      	ldr	r3, [pc, #16]	; (16a5c <lsm6dso_fsm_data_rate_get+0x98>)
   16a4c:	4798      	blx	r3
   16a4e:	0003      	movs	r3, r0
   16a50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16a52:	68fb      	ldr	r3, [r7, #12]
}
   16a54:	0018      	movs	r0, r3
   16a56:	46bd      	mov	sp, r7
   16a58:	b005      	add	sp, #20
   16a5a:	bd90      	pop	{r4, r7, pc}
   16a5c:	00016651 	.word	0x00016651
   16a60:	00015d65 	.word	0x00015d65

00016a64 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   16a64:	b580      	push	{r7, lr}
   16a66:	b084      	sub	sp, #16
   16a68:	af00      	add	r7, sp, #0
   16a6a:	60f8      	str	r0, [r7, #12]
   16a6c:	0008      	movs	r0, r1
   16a6e:	607a      	str	r2, [r7, #4]
   16a70:	0019      	movs	r1, r3
   16a72:	230b      	movs	r3, #11
   16a74:	18fb      	adds	r3, r7, r3
   16a76:	1c02      	adds	r2, r0, #0
   16a78:	701a      	strb	r2, [r3, #0]
   16a7a:	2308      	movs	r3, #8
   16a7c:	18fb      	adds	r3, r7, r3
   16a7e:	1c0a      	adds	r2, r1, #0
   16a80:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   16a82:	2300      	movs	r3, #0

}
   16a84:	0018      	movs	r0, r3
   16a86:	46bd      	mov	sp, r7
   16a88:	b004      	add	sp, #16
   16a8a:	bd80      	pop	{r7, pc}

00016a8c <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   16a8c:	b580      	push	{r7, lr}
   16a8e:	b084      	sub	sp, #16
   16a90:	af00      	add	r7, sp, #0
   16a92:	60f8      	str	r0, [r7, #12]
   16a94:	0008      	movs	r0, r1
   16a96:	607a      	str	r2, [r7, #4]
   16a98:	0019      	movs	r1, r3
   16a9a:	230b      	movs	r3, #11
   16a9c:	18fb      	adds	r3, r7, r3
   16a9e:	1c02      	adds	r2, r0, #0
   16aa0:	701a      	strb	r2, [r3, #0]
   16aa2:	2308      	movs	r3, #8
   16aa4:	18fb      	adds	r3, r7, r3
   16aa6:	1c0a      	adds	r2, r1, #0
   16aa8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   16aaa:	2300      	movs	r3, #0


}
   16aac:	0018      	movs	r0, r3
   16aae:	46bd      	mov	sp, r7
   16ab0:	b004      	add	sp, #16
   16ab2:	bd80      	pop	{r7, pc}

00016ab4 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   16ab4:	b580      	push	{r7, lr}
   16ab6:	af00      	add	r7, sp, #0
return &dev_ctx;
   16ab8:	4b01      	ldr	r3, [pc, #4]	; (16ac0 <GetImuStruct+0xc>)
}
   16aba:	0018      	movs	r0, r3
   16abc:	46bd      	mov	sp, r7
   16abe:	bd80      	pop	{r7, pc}
   16ac0:	20000014 	.word	0x20000014

00016ac4 <InitImu>:



int32_t InitImu(void)
{
   16ac4:	b580      	push	{r7, lr}
   16ac6:	b082      	sub	sp, #8
   16ac8:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   16aca:	2300      	movs	r3, #0
   16acc:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   16ace:	4b23      	ldr	r3, [pc, #140]	; (16b5c <InitImu+0x98>)
   16ad0:	2101      	movs	r1, #1
   16ad2:	0018      	movs	r0, r3
   16ad4:	4b22      	ldr	r3, [pc, #136]	; (16b60 <InitImu+0x9c>)
   16ad6:	4798      	blx	r3
   16ad8:	0003      	movs	r3, r0
   16ada:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   16adc:	1cfa      	adds	r2, r7, #3
   16ade:	4b1f      	ldr	r3, [pc, #124]	; (16b5c <InitImu+0x98>)
   16ae0:	0011      	movs	r1, r2
   16ae2:	0018      	movs	r0, r3
   16ae4:	4b1f      	ldr	r3, [pc, #124]	; (16b64 <InitImu+0xa0>)
   16ae6:	4798      	blx	r3
   16ae8:	0002      	movs	r2, r0
   16aea:	687b      	ldr	r3, [r7, #4]
   16aec:	4313      	orrs	r3, r2
   16aee:	607b      	str	r3, [r7, #4]
  } while (rst);
   16af0:	1cfb      	adds	r3, r7, #3
   16af2:	781b      	ldrb	r3, [r3, #0]
   16af4:	2b00      	cmp	r3, #0
   16af6:	d1f1      	bne.n	16adc <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   16af8:	4b18      	ldr	r3, [pc, #96]	; (16b5c <InitImu+0x98>)
   16afa:	2180      	movs	r1, #128	; 0x80
   16afc:	0018      	movs	r0, r3
   16afe:	4b1a      	ldr	r3, [pc, #104]	; (16b68 <InitImu+0xa4>)
   16b00:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   16b02:	4b16      	ldr	r3, [pc, #88]	; (16b5c <InitImu+0x98>)
   16b04:	2101      	movs	r1, #1
   16b06:	0018      	movs	r0, r3
   16b08:	4b18      	ldr	r3, [pc, #96]	; (16b6c <InitImu+0xa8>)
   16b0a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   16b0c:	4b13      	ldr	r3, [pc, #76]	; (16b5c <InitImu+0x98>)
   16b0e:	2100      	movs	r1, #0
   16b10:	0018      	movs	r0, r3
   16b12:	4b17      	ldr	r3, [pc, #92]	; (16b70 <InitImu+0xac>)
   16b14:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   16b16:	4b11      	ldr	r3, [pc, #68]	; (16b5c <InitImu+0x98>)
   16b18:	2101      	movs	r1, #1
   16b1a:	0018      	movs	r0, r3
   16b1c:	4b15      	ldr	r3, [pc, #84]	; (16b74 <InitImu+0xb0>)
   16b1e:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   16b20:	4b0e      	ldr	r3, [pc, #56]	; (16b5c <InitImu+0x98>)
   16b22:	2101      	movs	r1, #1
   16b24:	0018      	movs	r0, r3
   16b26:	4b14      	ldr	r3, [pc, #80]	; (16b78 <InitImu+0xb4>)
   16b28:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   16b2a:	4b0c      	ldr	r3, [pc, #48]	; (16b5c <InitImu+0x98>)
   16b2c:	2100      	movs	r1, #0
   16b2e:	0018      	movs	r0, r3
   16b30:	4b12      	ldr	r3, [pc, #72]	; (16b7c <InitImu+0xb8>)
   16b32:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   16b34:	4b09      	ldr	r3, [pc, #36]	; (16b5c <InitImu+0x98>)
   16b36:	2106      	movs	r1, #6
   16b38:	0018      	movs	r0, r3
   16b3a:	4b11      	ldr	r3, [pc, #68]	; (16b80 <InitImu+0xbc>)
   16b3c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   16b3e:	4b07      	ldr	r3, [pc, #28]	; (16b5c <InitImu+0x98>)
   16b40:	2104      	movs	r1, #4
   16b42:	0018      	movs	r0, r3
   16b44:	4b0f      	ldr	r3, [pc, #60]	; (16b84 <InitImu+0xc0>)
   16b46:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   16b48:	4b04      	ldr	r3, [pc, #16]	; (16b5c <InitImu+0x98>)
   16b4a:	2101      	movs	r1, #1
   16b4c:	0018      	movs	r0, r3
   16b4e:	4b0e      	ldr	r3, [pc, #56]	; (16b88 <InitImu+0xc4>)
   16b50:	4798      	blx	r3

  return error;
   16b52:	687b      	ldr	r3, [r7, #4]
}
   16b54:	0018      	movs	r0, r3
   16b56:	46bd      	mov	sp, r7
   16b58:	b002      	add	sp, #8
   16b5a:	bd80      	pop	{r7, pc}
   16b5c:	20000014 	.word	0x20000014
   16b60:	000166e1 	.word	0x000166e1
   16b64:	0001674d 	.word	0x0001674d
   16b68:	000168ad 	.word	0x000168ad
   16b6c:	00016489 	.word	0x00016489
   16b70:	000164f5 	.word	0x000164f5
   16b74:	00015e95 	.word	0x00015e95
   16b78:	000161c5 	.word	0x000161c5
   16b7c:	00015e29 	.word	0x00015e29
   16b80:	00016159 	.word	0x00016159
   16b84:	000167f5 	.word	0x000167f5
   16b88:	00016789 	.word	0x00016789

00016b8c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16b8c:	b580      	push	{r7, lr}
   16b8e:	b084      	sub	sp, #16
   16b90:	af00      	add	r7, sp, #0
   16b92:	0002      	movs	r2, r0
   16b94:	1dfb      	adds	r3, r7, #7
   16b96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16b98:	230f      	movs	r3, #15
   16b9a:	18fb      	adds	r3, r7, r3
   16b9c:	1dfa      	adds	r2, r7, #7
   16b9e:	7812      	ldrb	r2, [r2, #0]
   16ba0:	09d2      	lsrs	r2, r2, #7
   16ba2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16ba4:	230e      	movs	r3, #14
   16ba6:	18fb      	adds	r3, r7, r3
   16ba8:	1dfa      	adds	r2, r7, #7
   16baa:	7812      	ldrb	r2, [r2, #0]
   16bac:	0952      	lsrs	r2, r2, #5
   16bae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16bb0:	4b0d      	ldr	r3, [pc, #52]	; (16be8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16bb2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16bb4:	230f      	movs	r3, #15
   16bb6:	18fb      	adds	r3, r7, r3
   16bb8:	781b      	ldrb	r3, [r3, #0]
   16bba:	2b00      	cmp	r3, #0
   16bbc:	d10f      	bne.n	16bde <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16bbe:	230f      	movs	r3, #15
   16bc0:	18fb      	adds	r3, r7, r3
   16bc2:	781b      	ldrb	r3, [r3, #0]
   16bc4:	009b      	lsls	r3, r3, #2
   16bc6:	2210      	movs	r2, #16
   16bc8:	4694      	mov	ip, r2
   16bca:	44bc      	add	ip, r7
   16bcc:	4463      	add	r3, ip
   16bce:	3b08      	subs	r3, #8
   16bd0:	681a      	ldr	r2, [r3, #0]
   16bd2:	230e      	movs	r3, #14
   16bd4:	18fb      	adds	r3, r7, r3
   16bd6:	781b      	ldrb	r3, [r3, #0]
   16bd8:	01db      	lsls	r3, r3, #7
   16bda:	18d3      	adds	r3, r2, r3
   16bdc:	e000      	b.n	16be0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16bde:	2300      	movs	r3, #0
	}
}
   16be0:	0018      	movs	r0, r3
   16be2:	46bd      	mov	sp, r7
   16be4:	b004      	add	sp, #16
   16be6:	bd80      	pop	{r7, pc}
   16be8:	41004400 	.word	0x41004400

00016bec <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16bec:	b580      	push	{r7, lr}
   16bee:	b082      	sub	sp, #8
   16bf0:	af00      	add	r7, sp, #0
   16bf2:	0002      	movs	r2, r0
   16bf4:	1dfb      	adds	r3, r7, #7
   16bf6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16bf8:	1dfb      	adds	r3, r7, #7
   16bfa:	781b      	ldrb	r3, [r3, #0]
   16bfc:	0018      	movs	r0, r3
   16bfe:	4b03      	ldr	r3, [pc, #12]	; (16c0c <port_get_group_from_gpio_pin+0x20>)
   16c00:	4798      	blx	r3
   16c02:	0003      	movs	r3, r0
}
   16c04:	0018      	movs	r0, r3
   16c06:	46bd      	mov	sp, r7
   16c08:	b002      	add	sp, #8
   16c0a:	bd80      	pop	{r7, pc}
   16c0c:	00016b8d 	.word	0x00016b8d

00016c10 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   16c10:	b580      	push	{r7, lr}
   16c12:	b082      	sub	sp, #8
   16c14:	af00      	add	r7, sp, #0
   16c16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   16c18:	687b      	ldr	r3, [r7, #4]
   16c1a:	2200      	movs	r2, #0
   16c1c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16c1e:	687b      	ldr	r3, [r7, #4]
   16c20:	2201      	movs	r2, #1
   16c22:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16c24:	687b      	ldr	r3, [r7, #4]
   16c26:	2200      	movs	r2, #0
   16c28:	709a      	strb	r2, [r3, #2]
}
   16c2a:	46c0      	nop			; (mov r8, r8)
   16c2c:	46bd      	mov	sp, r7
   16c2e:	b002      	add	sp, #8
   16c30:	bd80      	pop	{r7, pc}
	...

00016c34 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16c34:	b580      	push	{r7, lr}
   16c36:	b084      	sub	sp, #16
   16c38:	af00      	add	r7, sp, #0
   16c3a:	0002      	movs	r2, r0
   16c3c:	1dfb      	adds	r3, r7, #7
   16c3e:	701a      	strb	r2, [r3, #0]
   16c40:	1dbb      	adds	r3, r7, #6
   16c42:	1c0a      	adds	r2, r1, #0
   16c44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16c46:	1dfb      	adds	r3, r7, #7
   16c48:	781b      	ldrb	r3, [r3, #0]
   16c4a:	0018      	movs	r0, r3
   16c4c:	4b0d      	ldr	r3, [pc, #52]	; (16c84 <port_pin_set_output_level+0x50>)
   16c4e:	4798      	blx	r3
   16c50:	0003      	movs	r3, r0
   16c52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16c54:	1dfb      	adds	r3, r7, #7
   16c56:	781b      	ldrb	r3, [r3, #0]
   16c58:	221f      	movs	r2, #31
   16c5a:	4013      	ands	r3, r2
   16c5c:	2201      	movs	r2, #1
   16c5e:	409a      	lsls	r2, r3
   16c60:	0013      	movs	r3, r2
   16c62:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16c64:	1dbb      	adds	r3, r7, #6
   16c66:	781b      	ldrb	r3, [r3, #0]
   16c68:	2b00      	cmp	r3, #0
   16c6a:	d003      	beq.n	16c74 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16c6c:	68fb      	ldr	r3, [r7, #12]
   16c6e:	68ba      	ldr	r2, [r7, #8]
   16c70:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16c72:	e002      	b.n	16c7a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16c74:	68fb      	ldr	r3, [r7, #12]
   16c76:	68ba      	ldr	r2, [r7, #8]
   16c78:	615a      	str	r2, [r3, #20]
}
   16c7a:	46c0      	nop			; (mov r8, r8)
   16c7c:	46bd      	mov	sp, r7
   16c7e:	b004      	add	sp, #16
   16c80:	bd80      	pop	{r7, pc}
   16c82:	46c0      	nop			; (mov r8, r8)
   16c84:	00016bed 	.word	0x00016bed

00016c88 <configure_port_servo_pins>:
#define SERVO_PIN PIN_PA03
bool LOCKER_STATUS_LOCKED = true;
bool LOCKER_STATUS_UNLOCKED = false;
bool locker_status = true;
void configure_port_servo_pins(void)
{
   16c88:	b580      	push	{r7, lr}
   16c8a:	b082      	sub	sp, #8
   16c8c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   16c8e:	1d3b      	adds	r3, r7, #4
   16c90:	0018      	movs	r0, r3
   16c92:	4b07      	ldr	r3, [pc, #28]	; (16cb0 <configure_port_servo_pins+0x28>)
   16c94:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16c96:	1d3b      	adds	r3, r7, #4
   16c98:	2201      	movs	r2, #1
   16c9a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SERVO_PIN, &config_port_pin);
   16c9c:	1d3b      	adds	r3, r7, #4
   16c9e:	0019      	movs	r1, r3
   16ca0:	2003      	movs	r0, #3
   16ca2:	4b04      	ldr	r3, [pc, #16]	; (16cb4 <configure_port_servo_pins+0x2c>)
   16ca4:	4798      	blx	r3
	
}
   16ca6:	46c0      	nop			; (mov r8, r8)
   16ca8:	46bd      	mov	sp, r7
   16caa:	b002      	add	sp, #8
   16cac:	bd80      	pop	{r7, pc}
   16cae:	46c0      	nop			; (mov r8, r8)
   16cb0:	00016c11 	.word	0x00016c11
   16cb4:	00028b95 	.word	0x00028b95

00016cb8 <lock>:

void lock()
{
   16cb8:	b580      	push	{r7, lr}
   16cba:	b082      	sub	sp, #8
   16cbc:	af00      	add	r7, sp, #0
	int count = 0;
   16cbe:	2300      	movs	r3, #0
   16cc0:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16cc2:	2100      	movs	r1, #0
   16cc4:	2003      	movs	r0, #3
   16cc6:	4b16      	ldr	r3, [pc, #88]	; (16d20 <lock+0x68>)
   16cc8:	4798      	blx	r3
    for(int i = 0;i<1000;i++){
   16cca:	2300      	movs	r3, #0
   16ccc:	603b      	str	r3, [r7, #0]
   16cce:	e016      	b.n	16cfe <lock+0x46>
		if(count == 8)
   16cd0:	687b      	ldr	r3, [r7, #4]
   16cd2:	2b08      	cmp	r3, #8
   16cd4:	d106      	bne.n	16ce4 <lock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16cd6:	2101      	movs	r1, #1
   16cd8:	2003      	movs	r0, #3
   16cda:	4b11      	ldr	r3, [pc, #68]	; (16d20 <lock+0x68>)
   16cdc:	4798      	blx	r3
			count = 0;
   16cde:	2300      	movs	r3, #0
   16ce0:	607b      	str	r3, [r7, #4]
   16ce2:	e003      	b.n	16cec <lock+0x34>
			
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16ce4:	2100      	movs	r1, #0
   16ce6:	2003      	movs	r0, #3
   16ce8:	4b0d      	ldr	r3, [pc, #52]	; (16d20 <lock+0x68>)
   16cea:	4798      	blx	r3
			
		}
		//MG90S
		vTaskDelay(1);
   16cec:	2001      	movs	r0, #1
   16cee:	4b0d      	ldr	r3, [pc, #52]	; (16d24 <lock+0x6c>)
   16cf0:	4798      	blx	r3
		//A0090
		//vTaskDelay(2.4);
		//delay_ms(1);
		count++;
   16cf2:	687b      	ldr	r3, [r7, #4]
   16cf4:	3301      	adds	r3, #1
   16cf6:	607b      	str	r3, [r7, #4]
    for(int i = 0;i<1000;i++){
   16cf8:	683b      	ldr	r3, [r7, #0]
   16cfa:	3301      	adds	r3, #1
   16cfc:	603b      	str	r3, [r7, #0]
   16cfe:	683b      	ldr	r3, [r7, #0]
   16d00:	4a09      	ldr	r2, [pc, #36]	; (16d28 <lock+0x70>)
   16d02:	4293      	cmp	r3, r2
   16d04:	dde4      	ble.n	16cd0 <lock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16d06:	2100      	movs	r1, #0
   16d08:	2003      	movs	r0, #3
   16d0a:	4b05      	ldr	r3, [pc, #20]	; (16d20 <lock+0x68>)
   16d0c:	4798      	blx	r3
	locker_status = LOCKER_STATUS_LOCKED;
   16d0e:	4b07      	ldr	r3, [pc, #28]	; (16d2c <lock+0x74>)
   16d10:	781a      	ldrb	r2, [r3, #0]
   16d12:	4b07      	ldr	r3, [pc, #28]	; (16d30 <lock+0x78>)
   16d14:	701a      	strb	r2, [r3, #0]
}
   16d16:	46c0      	nop			; (mov r8, r8)
   16d18:	46bd      	mov	sp, r7
   16d1a:	b002      	add	sp, #8
   16d1c:	bd80      	pop	{r7, pc}
   16d1e:	46c0      	nop			; (mov r8, r8)
   16d20:	00016c35 	.word	0x00016c35
   16d24:	0001e371 	.word	0x0001e371
   16d28:	000003e7 	.word	0x000003e7
   16d2c:	20000020 	.word	0x20000020
   16d30:	20000021 	.word	0x20000021

00016d34 <unlock>:

void unlock(){
   16d34:	b580      	push	{r7, lr}
   16d36:	b082      	sub	sp, #8
   16d38:	af00      	add	r7, sp, #0
	int count = 0;
   16d3a:	2300      	movs	r3, #0
   16d3c:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16d3e:	2100      	movs	r1, #0
   16d40:	2003      	movs	r0, #3
   16d42:	4b16      	ldr	r3, [pc, #88]	; (16d9c <unlock+0x68>)
   16d44:	4798      	blx	r3
	 for(int i = 0;i<300;i++){
   16d46:	2300      	movs	r3, #0
   16d48:	603b      	str	r3, [r7, #0]
   16d4a:	e016      	b.n	16d7a <unlock+0x46>
		if(count == 4)
   16d4c:	687b      	ldr	r3, [r7, #4]
   16d4e:	2b04      	cmp	r3, #4
   16d50:	d106      	bne.n	16d60 <unlock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16d52:	2101      	movs	r1, #1
   16d54:	2003      	movs	r0, #3
   16d56:	4b11      	ldr	r3, [pc, #68]	; (16d9c <unlock+0x68>)
   16d58:	4798      	blx	r3
			count = 0;
   16d5a:	2300      	movs	r3, #0
   16d5c:	607b      	str	r3, [r7, #4]
   16d5e:	e003      	b.n	16d68 <unlock+0x34>
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16d60:	2100      	movs	r1, #0
   16d62:	2003      	movs	r0, #3
   16d64:	4b0d      	ldr	r3, [pc, #52]	; (16d9c <unlock+0x68>)
   16d66:	4798      	blx	r3
		}
		//MG90S
		vTaskDelay(9);
   16d68:	2009      	movs	r0, #9
   16d6a:	4b0d      	ldr	r3, [pc, #52]	; (16da0 <unlock+0x6c>)
   16d6c:	4798      	blx	r3
		//A0090
		//vTaskDelay(3.8);
		//delay_ms(2);
		count++;
   16d6e:	687b      	ldr	r3, [r7, #4]
   16d70:	3301      	adds	r3, #1
   16d72:	607b      	str	r3, [r7, #4]
	 for(int i = 0;i<300;i++){
   16d74:	683b      	ldr	r3, [r7, #0]
   16d76:	3301      	adds	r3, #1
   16d78:	603b      	str	r3, [r7, #0]
   16d7a:	683a      	ldr	r2, [r7, #0]
   16d7c:	232c      	movs	r3, #44	; 0x2c
   16d7e:	33ff      	adds	r3, #255	; 0xff
   16d80:	429a      	cmp	r2, r3
   16d82:	dde3      	ble.n	16d4c <unlock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16d84:	2100      	movs	r1, #0
   16d86:	2003      	movs	r0, #3
   16d88:	4b04      	ldr	r3, [pc, #16]	; (16d9c <unlock+0x68>)
   16d8a:	4798      	blx	r3
	locker_status = LOCKER_STATUS_UNLOCKED;
   16d8c:	4b05      	ldr	r3, [pc, #20]	; (16da4 <unlock+0x70>)
   16d8e:	781a      	ldrb	r2, [r3, #0]
   16d90:	4b05      	ldr	r3, [pc, #20]	; (16da8 <unlock+0x74>)
   16d92:	701a      	strb	r2, [r3, #0]
}
   16d94:	46c0      	nop			; (mov r8, r8)
   16d96:	46bd      	mov	sp, r7
   16d98:	b002      	add	sp, #8
   16d9a:	bd80      	pop	{r7, pc}
   16d9c:	00016c35 	.word	0x00016c35
   16da0:	0001e371 	.word	0x0001e371
   16da4:	200004b0 	.word	0x200004b0
   16da8:	20000021 	.word	0x20000021

00016dac <getLock>:
bool getLock(){
   16dac:	b580      	push	{r7, lr}
   16dae:	af00      	add	r7, sp, #0
	return locker_status;
   16db0:	4b02      	ldr	r3, [pc, #8]	; (16dbc <getLock+0x10>)
   16db2:	781b      	ldrb	r3, [r3, #0]
}
   16db4:	0018      	movs	r0, r3
   16db6:	46bd      	mov	sp, r7
   16db8:	bd80      	pop	{r7, pc}
   16dba:	46c0      	nop			; (mov r8, r8)
   16dbc:	20000021 	.word	0x20000021

00016dc0 <setLock>:
void setLock(){
   16dc0:	b580      	push	{r7, lr}
   16dc2:	af00      	add	r7, sp, #0
	locker_status = LOCKER_STATUS_LOCKED;
   16dc4:	4b03      	ldr	r3, [pc, #12]	; (16dd4 <setLock+0x14>)
   16dc6:	781a      	ldrb	r2, [r3, #0]
   16dc8:	4b03      	ldr	r3, [pc, #12]	; (16dd8 <setLock+0x18>)
   16dca:	701a      	strb	r2, [r3, #0]
}
   16dcc:	46c0      	nop			; (mov r8, r8)
   16dce:	46bd      	mov	sp, r7
   16dd0:	bd80      	pop	{r7, pc}
   16dd2:	46c0      	nop			; (mov r8, r8)
   16dd4:	20000020 	.word	0x20000020
   16dd8:	20000021 	.word	0x20000021

00016ddc <setUnLock>:
void setUnLock(){
   16ddc:	b580      	push	{r7, lr}
   16dde:	af00      	add	r7, sp, #0
	locker_status = LOCKER_STATUS_UNLOCKED;
   16de0:	4b03      	ldr	r3, [pc, #12]	; (16df0 <setUnLock+0x14>)
   16de2:	781a      	ldrb	r2, [r3, #0]
   16de4:	4b03      	ldr	r3, [pc, #12]	; (16df4 <setUnLock+0x18>)
   16de6:	701a      	strb	r2, [r3, #0]
   16de8:	46c0      	nop			; (mov r8, r8)
   16dea:	46bd      	mov	sp, r7
   16dec:	bd80      	pop	{r7, pc}
   16dee:	46c0      	nop			; (mov r8, r8)
   16df0:	200004b0 	.word	0x200004b0
   16df4:	20000021 	.word	0x20000021

00016df8 <system_pinmux_get_group_from_gpio_pin>:
{
   16df8:	b580      	push	{r7, lr}
   16dfa:	b084      	sub	sp, #16
   16dfc:	af00      	add	r7, sp, #0
   16dfe:	0002      	movs	r2, r0
   16e00:	1dfb      	adds	r3, r7, #7
   16e02:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16e04:	230f      	movs	r3, #15
   16e06:	18fb      	adds	r3, r7, r3
   16e08:	1dfa      	adds	r2, r7, #7
   16e0a:	7812      	ldrb	r2, [r2, #0]
   16e0c:	09d2      	lsrs	r2, r2, #7
   16e0e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16e10:	230e      	movs	r3, #14
   16e12:	18fb      	adds	r3, r7, r3
   16e14:	1dfa      	adds	r2, r7, #7
   16e16:	7812      	ldrb	r2, [r2, #0]
   16e18:	0952      	lsrs	r2, r2, #5
   16e1a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16e1c:	4b0d      	ldr	r3, [pc, #52]	; (16e54 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16e1e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16e20:	230f      	movs	r3, #15
   16e22:	18fb      	adds	r3, r7, r3
   16e24:	781b      	ldrb	r3, [r3, #0]
   16e26:	2b00      	cmp	r3, #0
   16e28:	d10f      	bne.n	16e4a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16e2a:	230f      	movs	r3, #15
   16e2c:	18fb      	adds	r3, r7, r3
   16e2e:	781b      	ldrb	r3, [r3, #0]
   16e30:	009b      	lsls	r3, r3, #2
   16e32:	2210      	movs	r2, #16
   16e34:	4694      	mov	ip, r2
   16e36:	44bc      	add	ip, r7
   16e38:	4463      	add	r3, ip
   16e3a:	3b08      	subs	r3, #8
   16e3c:	681a      	ldr	r2, [r3, #0]
   16e3e:	230e      	movs	r3, #14
   16e40:	18fb      	adds	r3, r7, r3
   16e42:	781b      	ldrb	r3, [r3, #0]
   16e44:	01db      	lsls	r3, r3, #7
   16e46:	18d3      	adds	r3, r2, r3
   16e48:	e000      	b.n	16e4c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16e4a:	2300      	movs	r3, #0
}
   16e4c:	0018      	movs	r0, r3
   16e4e:	46bd      	mov	sp, r7
   16e50:	b004      	add	sp, #16
   16e52:	bd80      	pop	{r7, pc}
   16e54:	41004400 	.word	0x41004400

00016e58 <port_get_group_from_gpio_pin>:
{
   16e58:	b580      	push	{r7, lr}
   16e5a:	b082      	sub	sp, #8
   16e5c:	af00      	add	r7, sp, #0
   16e5e:	0002      	movs	r2, r0
   16e60:	1dfb      	adds	r3, r7, #7
   16e62:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16e64:	1dfb      	adds	r3, r7, #7
   16e66:	781b      	ldrb	r3, [r3, #0]
   16e68:	0018      	movs	r0, r3
   16e6a:	4b03      	ldr	r3, [pc, #12]	; (16e78 <port_get_group_from_gpio_pin+0x20>)
   16e6c:	4798      	blx	r3
   16e6e:	0003      	movs	r3, r0
}
   16e70:	0018      	movs	r0, r3
   16e72:	46bd      	mov	sp, r7
   16e74:	b002      	add	sp, #8
   16e76:	bd80      	pop	{r7, pc}
   16e78:	00016df9 	.word	0x00016df9

00016e7c <port_get_config_defaults>:
{
   16e7c:	b580      	push	{r7, lr}
   16e7e:	b082      	sub	sp, #8
   16e80:	af00      	add	r7, sp, #0
   16e82:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   16e84:	687b      	ldr	r3, [r7, #4]
   16e86:	2200      	movs	r2, #0
   16e88:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16e8a:	687b      	ldr	r3, [r7, #4]
   16e8c:	2201      	movs	r2, #1
   16e8e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16e90:	687b      	ldr	r3, [r7, #4]
   16e92:	2200      	movs	r2, #0
   16e94:	709a      	strb	r2, [r3, #2]
}
   16e96:	46c0      	nop			; (mov r8, r8)
   16e98:	46bd      	mov	sp, r7
   16e9a:	b002      	add	sp, #8
   16e9c:	bd80      	pop	{r7, pc}
	...

00016ea0 <port_pin_set_output_level>:
{
   16ea0:	b580      	push	{r7, lr}
   16ea2:	b084      	sub	sp, #16
   16ea4:	af00      	add	r7, sp, #0
   16ea6:	0002      	movs	r2, r0
   16ea8:	1dfb      	adds	r3, r7, #7
   16eaa:	701a      	strb	r2, [r3, #0]
   16eac:	1dbb      	adds	r3, r7, #6
   16eae:	1c0a      	adds	r2, r1, #0
   16eb0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16eb2:	1dfb      	adds	r3, r7, #7
   16eb4:	781b      	ldrb	r3, [r3, #0]
   16eb6:	0018      	movs	r0, r3
   16eb8:	4b0d      	ldr	r3, [pc, #52]	; (16ef0 <port_pin_set_output_level+0x50>)
   16eba:	4798      	blx	r3
   16ebc:	0003      	movs	r3, r0
   16ebe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16ec0:	1dfb      	adds	r3, r7, #7
   16ec2:	781b      	ldrb	r3, [r3, #0]
   16ec4:	221f      	movs	r2, #31
   16ec6:	4013      	ands	r3, r2
   16ec8:	2201      	movs	r2, #1
   16eca:	409a      	lsls	r2, r3
   16ecc:	0013      	movs	r3, r2
   16ece:	60bb      	str	r3, [r7, #8]
	if (level) {
   16ed0:	1dbb      	adds	r3, r7, #6
   16ed2:	781b      	ldrb	r3, [r3, #0]
   16ed4:	2b00      	cmp	r3, #0
   16ed6:	d003      	beq.n	16ee0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16ed8:	68fb      	ldr	r3, [r7, #12]
   16eda:	68ba      	ldr	r2, [r7, #8]
   16edc:	619a      	str	r2, [r3, #24]
}
   16ede:	e002      	b.n	16ee6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16ee0:	68fb      	ldr	r3, [r7, #12]
   16ee2:	68ba      	ldr	r2, [r7, #8]
   16ee4:	615a      	str	r2, [r3, #20]
}
   16ee6:	46c0      	nop			; (mov r8, r8)
   16ee8:	46bd      	mov	sp, r7
   16eea:	b004      	add	sp, #16
   16eec:	bd80      	pop	{r7, pc}
   16eee:	46c0      	nop			; (mov r8, r8)
   16ef0:	00016e59 	.word	0x00016e59

00016ef4 <configure_port_speaker_pins>:
 *  Author: HEY
 */ 
#include "speaker.h"
float flag = MAX_PERIOD;
void configure_port_speaker_pins(void)
{
   16ef4:	b580      	push	{r7, lr}
   16ef6:	b082      	sub	sp, #8
   16ef8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   16efa:	1d3b      	adds	r3, r7, #4
   16efc:	0018      	movs	r0, r3
   16efe:	4b07      	ldr	r3, [pc, #28]	; (16f1c <configure_port_speaker_pins+0x28>)
   16f00:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16f02:	1d3b      	adds	r3, r7, #4
   16f04:	2201      	movs	r2, #1
   16f06:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SPEAKER_PIN, &config_port_pin);
   16f08:	1d3b      	adds	r3, r7, #4
   16f0a:	0019      	movs	r1, r3
   16f0c:	2003      	movs	r0, #3
   16f0e:	4b04      	ldr	r3, [pc, #16]	; (16f20 <configure_port_speaker_pins+0x2c>)
   16f10:	4798      	blx	r3
	
}
   16f12:	46c0      	nop			; (mov r8, r8)
   16f14:	46bd      	mov	sp, r7
   16f16:	b002      	add	sp, #8
   16f18:	bd80      	pop	{r7, pc}
   16f1a:	46c0      	nop			; (mov r8, r8)
   16f1c:	00016e7d 	.word	0x00016e7d
   16f20:	00028b95 	.word	0x00028b95

00016f24 <deinit>:
void deinit(void){
   16f24:	b580      	push	{r7, lr}
   16f26:	b082      	sub	sp, #8
   16f28:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   16f2a:	1d3b      	adds	r3, r7, #4
   16f2c:	0018      	movs	r0, r3
   16f2e:	4b07      	ldr	r3, [pc, #28]	; (16f4c <deinit+0x28>)
   16f30:	4798      	blx	r3
	config_port_pin.powersave = true;
   16f32:	1d3b      	adds	r3, r7, #4
   16f34:	2201      	movs	r2, #1
   16f36:	709a      	strb	r2, [r3, #2]
	port_pin_set_config(SPEAKER_PIN, &config_port_pin);
   16f38:	1d3b      	adds	r3, r7, #4
   16f3a:	0019      	movs	r1, r3
   16f3c:	2003      	movs	r0, #3
   16f3e:	4b04      	ldr	r3, [pc, #16]	; (16f50 <deinit+0x2c>)
   16f40:	4798      	blx	r3
}
   16f42:	46c0      	nop			; (mov r8, r8)
   16f44:	46bd      	mov	sp, r7
   16f46:	b002      	add	sp, #8
   16f48:	bd80      	pop	{r7, pc}
   16f4a:	46c0      	nop			; (mov r8, r8)
   16f4c:	00016e7d 	.word	0x00016e7d
   16f50:	00028b95 	.word	0x00028b95

00016f54 <warning_speaker>:
void noTone(){
	port_pin_set_output_level(SPEAKER_PIN,0);
}
void warning_speaker(){
   16f54:	b590      	push	{r4, r7, lr}
   16f56:	b083      	sub	sp, #12
   16f58:	af00      	add	r7, sp, #0
	configure_port_speaker_pins();
   16f5a:	4b32      	ldr	r3, [pc, #200]	; (17024 <warning_speaker+0xd0>)
   16f5c:	4798      	blx	r3
	int count = 0;
   16f5e:	2300      	movs	r3, #0
   16f60:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SPEAKER_PIN,0);
   16f62:	2100      	movs	r1, #0
   16f64:	2003      	movs	r0, #3
   16f66:	4b30      	ldr	r3, [pc, #192]	; (17028 <warning_speaker+0xd4>)
   16f68:	4798      	blx	r3
	for(int i = 0;i<10000;i++){
   16f6a:	2300      	movs	r3, #0
   16f6c:	603b      	str	r3, [r7, #0]
   16f6e:	e04a      	b.n	17006 <warning_speaker+0xb2>
		if(count == 4)
   16f70:	687b      	ldr	r3, [r7, #4]
   16f72:	2b04      	cmp	r3, #4
   16f74:	d134      	bne.n	16fe0 <warning_speaker+0x8c>
		{
			port_pin_set_output_level(SPEAKER_PIN,1);
   16f76:	2101      	movs	r1, #1
   16f78:	2003      	movs	r0, #3
   16f7a:	4b2b      	ldr	r3, [pc, #172]	; (17028 <warning_speaker+0xd4>)
   16f7c:	4798      	blx	r3
			count = 0;
   16f7e:	2300      	movs	r3, #0
   16f80:	607b      	str	r3, [r7, #4]
			if(flag >= MAX_PERIOD){
   16f82:	4b2a      	ldr	r3, [pc, #168]	; (1702c <warning_speaker+0xd8>)
   16f84:	681a      	ldr	r2, [r3, #0]
   16f86:	4b2a      	ldr	r3, [pc, #168]	; (17030 <warning_speaker+0xdc>)
   16f88:	492a      	ldr	r1, [pc, #168]	; (17034 <warning_speaker+0xe0>)
   16f8a:	1c10      	adds	r0, r2, #0
   16f8c:	4798      	blx	r3
   16f8e:	1e03      	subs	r3, r0, #0
   16f90:	d003      	beq.n	16f9a <warning_speaker+0x46>
				flag = MIN_PERIOD;
   16f92:	4b26      	ldr	r3, [pc, #152]	; (1702c <warning_speaker+0xd8>)
   16f94:	4a28      	ldr	r2, [pc, #160]	; (17038 <warning_speaker+0xe4>)
   16f96:	601a      	str	r2, [r3, #0]
   16f98:	e026      	b.n	16fe8 <warning_speaker+0x94>
				}	else{
				flag = 1000 / ( 1000/flag - ((1000/MIN_PERIOD - 1000/MAX_PERIOD) / 44100 ));
   16f9a:	4b24      	ldr	r3, [pc, #144]	; (1702c <warning_speaker+0xd8>)
   16f9c:	681a      	ldr	r2, [r3, #0]
   16f9e:	4b27      	ldr	r3, [pc, #156]	; (1703c <warning_speaker+0xe8>)
   16fa0:	1c11      	adds	r1, r2, #0
   16fa2:	4827      	ldr	r0, [pc, #156]	; (17040 <warning_speaker+0xec>)
   16fa4:	4798      	blx	r3
   16fa6:	1c03      	adds	r3, r0, #0
   16fa8:	1c1a      	adds	r2, r3, #0
   16faa:	4b26      	ldr	r3, [pc, #152]	; (17044 <warning_speaker+0xf0>)
   16fac:	1c10      	adds	r0, r2, #0
   16fae:	4798      	blx	r3
   16fb0:	4c25      	ldr	r4, [pc, #148]	; (17048 <warning_speaker+0xf4>)
   16fb2:	4a26      	ldr	r2, [pc, #152]	; (1704c <warning_speaker+0xf8>)
   16fb4:	4b26      	ldr	r3, [pc, #152]	; (17050 <warning_speaker+0xfc>)
   16fb6:	47a0      	blx	r4
   16fb8:	0003      	movs	r3, r0
   16fba:	000c      	movs	r4, r1
   16fbc:	001a      	movs	r2, r3
   16fbe:	0023      	movs	r3, r4
   16fc0:	4c24      	ldr	r4, [pc, #144]	; (17054 <warning_speaker+0x100>)
   16fc2:	2000      	movs	r0, #0
   16fc4:	4924      	ldr	r1, [pc, #144]	; (17058 <warning_speaker+0x104>)
   16fc6:	47a0      	blx	r4
   16fc8:	0003      	movs	r3, r0
   16fca:	000c      	movs	r4, r1
   16fcc:	0019      	movs	r1, r3
   16fce:	0022      	movs	r2, r4
   16fd0:	4b22      	ldr	r3, [pc, #136]	; (1705c <warning_speaker+0x108>)
   16fd2:	0008      	movs	r0, r1
   16fd4:	0011      	movs	r1, r2
   16fd6:	4798      	blx	r3
   16fd8:	1c02      	adds	r2, r0, #0
   16fda:	4b14      	ldr	r3, [pc, #80]	; (1702c <warning_speaker+0xd8>)
   16fdc:	601a      	str	r2, [r3, #0]
   16fde:	e003      	b.n	16fe8 <warning_speaker+0x94>
			}
		}
		else{
			port_pin_set_output_level(SPEAKER_PIN,0);
   16fe0:	2100      	movs	r1, #0
   16fe2:	2003      	movs	r0, #3
   16fe4:	4b10      	ldr	r3, [pc, #64]	; (17028 <warning_speaker+0xd4>)
   16fe6:	4798      	blx	r3
		}
		vTaskDelay(flag);
   16fe8:	4b10      	ldr	r3, [pc, #64]	; (1702c <warning_speaker+0xd8>)
   16fea:	681a      	ldr	r2, [r3, #0]
   16fec:	4b1c      	ldr	r3, [pc, #112]	; (17060 <warning_speaker+0x10c>)
   16fee:	1c10      	adds	r0, r2, #0
   16ff0:	4798      	blx	r3
   16ff2:	0003      	movs	r3, r0
   16ff4:	0018      	movs	r0, r3
   16ff6:	4b1b      	ldr	r3, [pc, #108]	; (17064 <warning_speaker+0x110>)
   16ff8:	4798      	blx	r3
		//delay_ms(1);
		count++;
   16ffa:	687b      	ldr	r3, [r7, #4]
   16ffc:	3301      	adds	r3, #1
   16ffe:	607b      	str	r3, [r7, #4]
	for(int i = 0;i<10000;i++){
   17000:	683b      	ldr	r3, [r7, #0]
   17002:	3301      	adds	r3, #1
   17004:	603b      	str	r3, [r7, #0]
   17006:	683b      	ldr	r3, [r7, #0]
   17008:	4a17      	ldr	r2, [pc, #92]	; (17068 <warning_speaker+0x114>)
   1700a:	4293      	cmp	r3, r2
   1700c:	ddb0      	ble.n	16f70 <warning_speaker+0x1c>
	}
	port_pin_set_output_level(SPEAKER_PIN,0);
   1700e:	2100      	movs	r1, #0
   17010:	2003      	movs	r0, #3
   17012:	4b05      	ldr	r3, [pc, #20]	; (17028 <warning_speaker+0xd4>)
   17014:	4798      	blx	r3
	deinit();
   17016:	4b15      	ldr	r3, [pc, #84]	; (1706c <warning_speaker+0x118>)
   17018:	4798      	blx	r3
   1701a:	46c0      	nop			; (mov r8, r8)
   1701c:	46bd      	mov	sp, r7
   1701e:	b003      	add	sp, #12
   17020:	bd90      	pop	{r4, r7, pc}
   17022:	46c0      	nop			; (mov r8, r8)
   17024:	00016ef5 	.word	0x00016ef5
   17028:	00016ea1 	.word	0x00016ea1
   1702c:	20000024 	.word	0x20000024
   17030:	00034f41 	.word	0x00034f41
   17034:	41a00000 	.word	0x41a00000
   17038:	3e4ccccd 	.word	0x3e4ccccd
   1703c:	00035059 	.word	0x00035059
   17040:	447a0000 	.word	0x447a0000
   17044:	000373a9 	.word	0x000373a9
   17048:	00036ca5 	.word	0x00036ca5
   1704c:	e5e0a72f 	.word	0xe5e0a72f
   17050:	3fbcbc14 	.word	0x3fbcbc14
   17054:	0003613d 	.word	0x0003613d
   17058:	408f4000 	.word	0x408f4000
   1705c:	0003744d 	.word	0x0003744d
   17060:	00034ff1 	.word	0x00034ff1
   17064:	0001e371 	.word	0x0001e371
   17068:	0000270f 	.word	0x0000270f
   1706c:	00016f25 	.word	0x00016f25

00017070 <system_pinmux_get_group_from_gpio_pin>:
{
   17070:	b580      	push	{r7, lr}
   17072:	b084      	sub	sp, #16
   17074:	af00      	add	r7, sp, #0
   17076:	0002      	movs	r2, r0
   17078:	1dfb      	adds	r3, r7, #7
   1707a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1707c:	230f      	movs	r3, #15
   1707e:	18fb      	adds	r3, r7, r3
   17080:	1dfa      	adds	r2, r7, #7
   17082:	7812      	ldrb	r2, [r2, #0]
   17084:	09d2      	lsrs	r2, r2, #7
   17086:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17088:	230e      	movs	r3, #14
   1708a:	18fb      	adds	r3, r7, r3
   1708c:	1dfa      	adds	r2, r7, #7
   1708e:	7812      	ldrb	r2, [r2, #0]
   17090:	0952      	lsrs	r2, r2, #5
   17092:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   17094:	4b0d      	ldr	r3, [pc, #52]	; (170cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   17096:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   17098:	230f      	movs	r3, #15
   1709a:	18fb      	adds	r3, r7, r3
   1709c:	781b      	ldrb	r3, [r3, #0]
   1709e:	2b00      	cmp	r3, #0
   170a0:	d10f      	bne.n	170c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   170a2:	230f      	movs	r3, #15
   170a4:	18fb      	adds	r3, r7, r3
   170a6:	781b      	ldrb	r3, [r3, #0]
   170a8:	009b      	lsls	r3, r3, #2
   170aa:	2210      	movs	r2, #16
   170ac:	4694      	mov	ip, r2
   170ae:	44bc      	add	ip, r7
   170b0:	4463      	add	r3, ip
   170b2:	3b08      	subs	r3, #8
   170b4:	681a      	ldr	r2, [r3, #0]
   170b6:	230e      	movs	r3, #14
   170b8:	18fb      	adds	r3, r7, r3
   170ba:	781b      	ldrb	r3, [r3, #0]
   170bc:	01db      	lsls	r3, r3, #7
   170be:	18d3      	adds	r3, r2, r3
   170c0:	e000      	b.n	170c4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   170c2:	2300      	movs	r3, #0
}
   170c4:	0018      	movs	r0, r3
   170c6:	46bd      	mov	sp, r7
   170c8:	b004      	add	sp, #16
   170ca:	bd80      	pop	{r7, pc}
   170cc:	41004400 	.word	0x41004400

000170d0 <port_get_group_from_gpio_pin>:
{
   170d0:	b580      	push	{r7, lr}
   170d2:	b082      	sub	sp, #8
   170d4:	af00      	add	r7, sp, #0
   170d6:	0002      	movs	r2, r0
   170d8:	1dfb      	adds	r3, r7, #7
   170da:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   170dc:	1dfb      	adds	r3, r7, #7
   170de:	781b      	ldrb	r3, [r3, #0]
   170e0:	0018      	movs	r0, r3
   170e2:	4b03      	ldr	r3, [pc, #12]	; (170f0 <port_get_group_from_gpio_pin+0x20>)
   170e4:	4798      	blx	r3
   170e6:	0003      	movs	r3, r0
}
   170e8:	0018      	movs	r0, r3
   170ea:	46bd      	mov	sp, r7
   170ec:	b002      	add	sp, #8
   170ee:	bd80      	pop	{r7, pc}
   170f0:	00017071 	.word	0x00017071

000170f4 <port_get_config_defaults>:
{
   170f4:	b580      	push	{r7, lr}
   170f6:	b082      	sub	sp, #8
   170f8:	af00      	add	r7, sp, #0
   170fa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   170fc:	687b      	ldr	r3, [r7, #4]
   170fe:	2200      	movs	r2, #0
   17100:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   17102:	687b      	ldr	r3, [r7, #4]
   17104:	2201      	movs	r2, #1
   17106:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   17108:	687b      	ldr	r3, [r7, #4]
   1710a:	2200      	movs	r2, #0
   1710c:	709a      	strb	r2, [r3, #2]
}
   1710e:	46c0      	nop			; (mov r8, r8)
   17110:	46bd      	mov	sp, r7
   17112:	b002      	add	sp, #8
   17114:	bd80      	pop	{r7, pc}
	...

00017118 <port_pin_set_output_level>:
{
   17118:	b580      	push	{r7, lr}
   1711a:	b084      	sub	sp, #16
   1711c:	af00      	add	r7, sp, #0
   1711e:	0002      	movs	r2, r0
   17120:	1dfb      	adds	r3, r7, #7
   17122:	701a      	strb	r2, [r3, #0]
   17124:	1dbb      	adds	r3, r7, #6
   17126:	1c0a      	adds	r2, r1, #0
   17128:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1712a:	1dfb      	adds	r3, r7, #7
   1712c:	781b      	ldrb	r3, [r3, #0]
   1712e:	0018      	movs	r0, r3
   17130:	4b0d      	ldr	r3, [pc, #52]	; (17168 <port_pin_set_output_level+0x50>)
   17132:	4798      	blx	r3
   17134:	0003      	movs	r3, r0
   17136:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17138:	1dfb      	adds	r3, r7, #7
   1713a:	781b      	ldrb	r3, [r3, #0]
   1713c:	221f      	movs	r2, #31
   1713e:	4013      	ands	r3, r2
   17140:	2201      	movs	r2, #1
   17142:	409a      	lsls	r2, r3
   17144:	0013      	movs	r3, r2
   17146:	60bb      	str	r3, [r7, #8]
	if (level) {
   17148:	1dbb      	adds	r3, r7, #6
   1714a:	781b      	ldrb	r3, [r3, #0]
   1714c:	2b00      	cmp	r3, #0
   1714e:	d003      	beq.n	17158 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   17150:	68fb      	ldr	r3, [r7, #12]
   17152:	68ba      	ldr	r2, [r7, #8]
   17154:	619a      	str	r2, [r3, #24]
}
   17156:	e002      	b.n	1715e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17158:	68fb      	ldr	r3, [r7, #12]
   1715a:	68ba      	ldr	r2, [r7, #8]
   1715c:	615a      	str	r2, [r3, #20]
}
   1715e:	46c0      	nop			; (mov r8, r8)
   17160:	46bd      	mov	sp, r7
   17162:	b004      	add	sp, #16
   17164:	bd80      	pop	{r7, pc}
   17166:	46c0      	nop			; (mov r8, r8)
   17168:	000170d1 	.word	0x000170d1

0001716c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1716c:	b580      	push	{r7, lr}
   1716e:	b084      	sub	sp, #16
   17170:	af00      	add	r7, sp, #0
   17172:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   17174:	687b      	ldr	r3, [r7, #4]
   17176:	681b      	ldr	r3, [r3, #0]
   17178:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1717a:	68fb      	ldr	r3, [r7, #12]
   1717c:	69db      	ldr	r3, [r3, #28]
   1717e:	1e5a      	subs	r2, r3, #1
   17180:	4193      	sbcs	r3, r2
   17182:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   17184:	0018      	movs	r0, r3
   17186:	46bd      	mov	sp, r7
   17188:	b004      	add	sp, #16
   1718a:	bd80      	pop	{r7, pc}

0001718c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1718c:	b580      	push	{r7, lr}
   1718e:	b082      	sub	sp, #8
   17190:	af00      	add	r7, sp, #0
   17192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   17194:	687b      	ldr	r3, [r7, #4]
   17196:	2201      	movs	r2, #1
   17198:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1719a:	687b      	ldr	r3, [r7, #4]
   1719c:	2200      	movs	r2, #0
   1719e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   171a0:	687b      	ldr	r3, [r7, #4]
   171a2:	2200      	movs	r2, #0
   171a4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   171a6:	687b      	ldr	r3, [r7, #4]
   171a8:	22c0      	movs	r2, #192	; 0xc0
   171aa:	0392      	lsls	r2, r2, #14
   171ac:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   171ae:	687b      	ldr	r3, [r7, #4]
   171b0:	2200      	movs	r2, #0
   171b2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   171b4:	687b      	ldr	r3, [r7, #4]
   171b6:	2200      	movs	r2, #0
   171b8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   171ba:	687b      	ldr	r3, [r7, #4]
   171bc:	2201      	movs	r2, #1
   171be:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   171c0:	687b      	ldr	r3, [r7, #4]
   171c2:	2201      	movs	r2, #1
   171c4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   171c6:	687b      	ldr	r3, [r7, #4]
   171c8:	2200      	movs	r2, #0
   171ca:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   171cc:	687b      	ldr	r3, [r7, #4]
   171ce:	2224      	movs	r2, #36	; 0x24
   171d0:	2100      	movs	r1, #0
   171d2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   171d4:	687b      	ldr	r3, [r7, #4]
   171d6:	3318      	adds	r3, #24
   171d8:	220c      	movs	r2, #12
   171da:	2100      	movs	r1, #0
   171dc:	0018      	movs	r0, r3
   171de:	4b0a      	ldr	r3, [pc, #40]	; (17208 <spi_get_config_defaults+0x7c>)
   171e0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   171e2:	687b      	ldr	r3, [r7, #4]
   171e4:	4a09      	ldr	r2, [pc, #36]	; (1720c <spi_get_config_defaults+0x80>)
   171e6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   171e8:	687b      	ldr	r3, [r7, #4]
   171ea:	2200      	movs	r2, #0
   171ec:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   171ee:	687b      	ldr	r3, [r7, #4]
   171f0:	2200      	movs	r2, #0
   171f2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   171f4:	687b      	ldr	r3, [r7, #4]
   171f6:	2200      	movs	r2, #0
   171f8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   171fa:	687b      	ldr	r3, [r7, #4]
   171fc:	2200      	movs	r2, #0
   171fe:	635a      	str	r2, [r3, #52]	; 0x34

};
   17200:	46c0      	nop			; (mov r8, r8)
   17202:	46bd      	mov	sp, r7
   17204:	b002      	add	sp, #8
   17206:	bd80      	pop	{r7, pc}
   17208:	0003781f 	.word	0x0003781f
   1720c:	000186a0 	.word	0x000186a0

00017210 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   17210:	b580      	push	{r7, lr}
   17212:	b082      	sub	sp, #8
   17214:	af00      	add	r7, sp, #0
   17216:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   17218:	687b      	ldr	r3, [r7, #4]
   1721a:	220a      	movs	r2, #10
   1721c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1721e:	687b      	ldr	r3, [r7, #4]
   17220:	2200      	movs	r2, #0
   17222:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   17224:	687b      	ldr	r3, [r7, #4]
   17226:	2200      	movs	r2, #0
   17228:	709a      	strb	r2, [r3, #2]
}
   1722a:	46c0      	nop			; (mov r8, r8)
   1722c:	46bd      	mov	sp, r7
   1722e:	b002      	add	sp, #8
   17230:	bd80      	pop	{r7, pc}
	...

00017234 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   17234:	b580      	push	{r7, lr}
   17236:	b084      	sub	sp, #16
   17238:	af00      	add	r7, sp, #0
   1723a:	6078      	str	r0, [r7, #4]
   1723c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1723e:	683b      	ldr	r3, [r7, #0]
   17240:	781a      	ldrb	r2, [r3, #0]
   17242:	687b      	ldr	r3, [r7, #4]
   17244:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   17246:	683b      	ldr	r3, [r7, #0]
   17248:	785a      	ldrb	r2, [r3, #1]
   1724a:	687b      	ldr	r3, [r7, #4]
   1724c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1724e:	683b      	ldr	r3, [r7, #0]
   17250:	789a      	ldrb	r2, [r3, #2]
   17252:	687b      	ldr	r3, [r7, #4]
   17254:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   17256:	230c      	movs	r3, #12
   17258:	18fb      	adds	r3, r7, r3
   1725a:	0018      	movs	r0, r3
   1725c:	4b0b      	ldr	r3, [pc, #44]	; (1728c <spi_attach_slave+0x58>)
   1725e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   17260:	230c      	movs	r3, #12
   17262:	18fb      	adds	r3, r7, r3
   17264:	2201      	movs	r2, #1
   17266:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   17268:	687b      	ldr	r3, [r7, #4]
   1726a:	781b      	ldrb	r3, [r3, #0]
   1726c:	220c      	movs	r2, #12
   1726e:	18ba      	adds	r2, r7, r2
   17270:	0011      	movs	r1, r2
   17272:	0018      	movs	r0, r3
   17274:	4b06      	ldr	r3, [pc, #24]	; (17290 <spi_attach_slave+0x5c>)
   17276:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   17278:	687b      	ldr	r3, [r7, #4]
   1727a:	781b      	ldrb	r3, [r3, #0]
   1727c:	2101      	movs	r1, #1
   1727e:	0018      	movs	r0, r3
   17280:	4b04      	ldr	r3, [pc, #16]	; (17294 <spi_attach_slave+0x60>)
   17282:	4798      	blx	r3
}
   17284:	46c0      	nop			; (mov r8, r8)
   17286:	46bd      	mov	sp, r7
   17288:	b004      	add	sp, #16
   1728a:	bd80      	pop	{r7, pc}
   1728c:	000170f5 	.word	0x000170f5
   17290:	00028b95 	.word	0x00028b95
   17294:	00017119 	.word	0x00017119

00017298 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   17298:	b580      	push	{r7, lr}
   1729a:	b084      	sub	sp, #16
   1729c:	af00      	add	r7, sp, #0
   1729e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   172a0:	687b      	ldr	r3, [r7, #4]
   172a2:	681b      	ldr	r3, [r3, #0]
   172a4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   172a6:	46c0      	nop			; (mov r8, r8)
   172a8:	687b      	ldr	r3, [r7, #4]
   172aa:	0018      	movs	r0, r3
   172ac:	4b06      	ldr	r3, [pc, #24]	; (172c8 <spi_enable+0x30>)
   172ae:	4798      	blx	r3
   172b0:	1e03      	subs	r3, r0, #0
   172b2:	d1f9      	bne.n	172a8 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   172b4:	68fb      	ldr	r3, [r7, #12]
   172b6:	681b      	ldr	r3, [r3, #0]
   172b8:	2202      	movs	r2, #2
   172ba:	431a      	orrs	r2, r3
   172bc:	68fb      	ldr	r3, [r7, #12]
   172be:	601a      	str	r2, [r3, #0]
}
   172c0:	46c0      	nop			; (mov r8, r8)
   172c2:	46bd      	mov	sp, r7
   172c4:	b004      	add	sp, #16
   172c6:	bd80      	pop	{r7, pc}
   172c8:	0001716d 	.word	0x0001716d

000172cc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   172cc:	b580      	push	{r7, lr}
   172ce:	b084      	sub	sp, #16
   172d0:	af00      	add	r7, sp, #0
   172d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   172d4:	687b      	ldr	r3, [r7, #4]
   172d6:	681b      	ldr	r3, [r3, #0]
   172d8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   172da:	68fb      	ldr	r3, [r7, #12]
   172dc:	7e1b      	ldrb	r3, [r3, #24]
   172de:	b2db      	uxtb	r3, r3
   172e0:	001a      	movs	r2, r3
   172e2:	2301      	movs	r3, #1
   172e4:	4013      	ands	r3, r2
   172e6:	1e5a      	subs	r2, r3, #1
   172e8:	4193      	sbcs	r3, r2
   172ea:	b2db      	uxtb	r3, r3
}
   172ec:	0018      	movs	r0, r3
   172ee:	46bd      	mov	sp, r7
   172f0:	b004      	add	sp, #16
   172f2:	bd80      	pop	{r7, pc}

000172f4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   172f4:	b580      	push	{r7, lr}
   172f6:	b084      	sub	sp, #16
   172f8:	af00      	add	r7, sp, #0
   172fa:	6078      	str	r0, [r7, #4]
   172fc:	000a      	movs	r2, r1
   172fe:	1cbb      	adds	r3, r7, #2
   17300:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   17302:	687b      	ldr	r3, [r7, #4]
   17304:	681b      	ldr	r3, [r3, #0]
   17306:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   17308:	687b      	ldr	r3, [r7, #4]
   1730a:	0018      	movs	r0, r3
   1730c:	4b0a      	ldr	r3, [pc, #40]	; (17338 <spi_write+0x44>)
   1730e:	4798      	blx	r3
   17310:	0003      	movs	r3, r0
   17312:	001a      	movs	r2, r3
   17314:	2301      	movs	r3, #1
   17316:	4053      	eors	r3, r2
   17318:	b2db      	uxtb	r3, r3
   1731a:	2b00      	cmp	r3, #0
   1731c:	d001      	beq.n	17322 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1731e:	2305      	movs	r3, #5
   17320:	e006      	b.n	17330 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   17322:	1cbb      	adds	r3, r7, #2
   17324:	881b      	ldrh	r3, [r3, #0]
   17326:	05db      	lsls	r3, r3, #23
   17328:	0dda      	lsrs	r2, r3, #23
   1732a:	68fb      	ldr	r3, [r7, #12]
   1732c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1732e:	2300      	movs	r3, #0
}
   17330:	0018      	movs	r0, r3
   17332:	46bd      	mov	sp, r7
   17334:	b004      	add	sp, #16
   17336:	bd80      	pop	{r7, pc}
   17338:	000172cd 	.word	0x000172cd

0001733c <configure_port_pins>:
	LCD_data(madctl);
}


void configure_port_pins(void)
{
   1733c:	b580      	push	{r7, lr}
   1733e:	b082      	sub	sp, #8
   17340:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   17342:	1d3b      	adds	r3, r7, #4
   17344:	0018      	movs	r0, r3
   17346:	4b0f      	ldr	r3, [pc, #60]	; (17384 <configure_port_pins+0x48>)
   17348:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1734a:	1d3b      	adds	r3, r7, #4
   1734c:	2201      	movs	r2, #1
   1734e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
   17350:	1d3b      	adds	r3, r7, #4
   17352:	0019      	movs	r1, r3
   17354:	2022      	movs	r0, #34	; 0x22
   17356:	4b0c      	ldr	r3, [pc, #48]	; (17388 <configure_port_pins+0x4c>)
   17358:	4798      	blx	r3
	struct port_config config_port_pins;
	port_get_config_defaults(&config_port_pins);
   1735a:	003b      	movs	r3, r7
   1735c:	0018      	movs	r0, r3
   1735e:	4b09      	ldr	r3, [pc, #36]	; (17384 <configure_port_pins+0x48>)
   17360:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   17362:	1d3b      	adds	r3, r7, #4
   17364:	2201      	movs	r2, #1
   17366:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA20, &config_port_pins);
   17368:	003b      	movs	r3, r7
   1736a:	0019      	movs	r1, r3
   1736c:	2014      	movs	r0, #20
   1736e:	4b06      	ldr	r3, [pc, #24]	; (17388 <configure_port_pins+0x4c>)
   17370:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20,1);
   17372:	2101      	movs	r1, #1
   17374:	2014      	movs	r0, #20
   17376:	4b05      	ldr	r3, [pc, #20]	; (1738c <configure_port_pins+0x50>)
   17378:	4798      	blx	r3
}
   1737a:	46c0      	nop			; (mov r8, r8)
   1737c:	46bd      	mov	sp, r7
   1737e:	b002      	add	sp, #8
   17380:	bd80      	pop	{r7, pc}
   17382:	46c0      	nop			; (mov r8, r8)
   17384:	000170f5 	.word	0x000170f5
   17388:	00028b95 	.word	0x00028b95
   1738c:	00017119 	.word	0x00017119

00017390 <drawString>:
            LCD_drawPixel(x+i,y+j,c2);
        }
    }
}

void drawString(short x, short y, char* str, short fg, short bg){
   17390:	b5b0      	push	{r4, r5, r7, lr}
   17392:	b088      	sub	sp, #32
   17394:	af02      	add	r7, sp, #8
   17396:	0004      	movs	r4, r0
   17398:	0008      	movs	r0, r1
   1739a:	60ba      	str	r2, [r7, #8]
   1739c:	0019      	movs	r1, r3
   1739e:	230e      	movs	r3, #14
   173a0:	18fb      	adds	r3, r7, r3
   173a2:	1c22      	adds	r2, r4, #0
   173a4:	801a      	strh	r2, [r3, #0]
   173a6:	230c      	movs	r3, #12
   173a8:	18fb      	adds	r3, r7, r3
   173aa:	1c02      	adds	r2, r0, #0
   173ac:	801a      	strh	r2, [r3, #0]
   173ae:	1dbb      	adds	r3, r7, #6
   173b0:	1c0a      	adds	r2, r1, #0
   173b2:	801a      	strh	r2, [r3, #0]
    int i = 0;
   173b4:	2300      	movs	r3, #0
   173b6:	617b      	str	r3, [r7, #20]
    while(str[i]){
   173b8:	e021      	b.n	173fe <drawString+0x6e>
        drawChar(x+5*i,y,str[i],fg,bg);
   173ba:	697b      	ldr	r3, [r7, #20]
   173bc:	b29b      	uxth	r3, r3
   173be:	1c1a      	adds	r2, r3, #0
   173c0:	0092      	lsls	r2, r2, #2
   173c2:	18d3      	adds	r3, r2, r3
   173c4:	b29a      	uxth	r2, r3
   173c6:	230e      	movs	r3, #14
   173c8:	18fb      	adds	r3, r7, r3
   173ca:	881b      	ldrh	r3, [r3, #0]
   173cc:	18d3      	adds	r3, r2, r3
   173ce:	b29b      	uxth	r3, r3
   173d0:	b218      	sxth	r0, r3
   173d2:	697b      	ldr	r3, [r7, #20]
   173d4:	68ba      	ldr	r2, [r7, #8]
   173d6:	18d3      	adds	r3, r2, r3
   173d8:	781a      	ldrb	r2, [r3, #0]
   173da:	1dbb      	adds	r3, r7, #6
   173dc:	2400      	movs	r4, #0
   173de:	5f1c      	ldrsh	r4, [r3, r4]
   173e0:	230c      	movs	r3, #12
   173e2:	18fb      	adds	r3, r7, r3
   173e4:	2100      	movs	r1, #0
   173e6:	5e59      	ldrsh	r1, [r3, r1]
   173e8:	2328      	movs	r3, #40	; 0x28
   173ea:	18fb      	adds	r3, r7, r3
   173ec:	2500      	movs	r5, #0
   173ee:	5f5b      	ldrsh	r3, [r3, r5]
   173f0:	9300      	str	r3, [sp, #0]
   173f2:	0023      	movs	r3, r4
   173f4:	4c07      	ldr	r4, [pc, #28]	; (17414 <drawString+0x84>)
   173f6:	47a0      	blx	r4
        i++;
   173f8:	697b      	ldr	r3, [r7, #20]
   173fa:	3301      	adds	r3, #1
   173fc:	617b      	str	r3, [r7, #20]
    while(str[i]){
   173fe:	697b      	ldr	r3, [r7, #20]
   17400:	68ba      	ldr	r2, [r7, #8]
   17402:	18d3      	adds	r3, r2, r3
   17404:	781b      	ldrb	r3, [r3, #0]
   17406:	2b00      	cmp	r3, #0
   17408:	d1d7      	bne.n	173ba <drawString+0x2a>
    }
}
   1740a:	46c0      	nop			; (mov r8, r8)
   1740c:	46bd      	mov	sp, r7
   1740e:	b006      	add	sp, #24
   17410:	bdb0      	pop	{r4, r5, r7, pc}
   17412:	46c0      	nop			; (mov r8, r8)
   17414:	00017419 	.word	0x00017419

00017418 <drawChar>:


void drawChar(short x, short y, unsigned char c, short fg, short bg){
   17418:	b5b0      	push	{r4, r5, r7, lr}
   1741a:	b086      	sub	sp, #24
   1741c:	af00      	add	r7, sp, #0
   1741e:	0005      	movs	r5, r0
   17420:	000c      	movs	r4, r1
   17422:	0010      	movs	r0, r2
   17424:	0019      	movs	r1, r3
   17426:	1dbb      	adds	r3, r7, #6
   17428:	1c2a      	adds	r2, r5, #0
   1742a:	801a      	strh	r2, [r3, #0]
   1742c:	1d3b      	adds	r3, r7, #4
   1742e:	1c22      	adds	r2, r4, #0
   17430:	801a      	strh	r2, [r3, #0]
   17432:	1cfb      	adds	r3, r7, #3
   17434:	1c02      	adds	r2, r0, #0
   17436:	701a      	strb	r2, [r3, #0]
   17438:	003b      	movs	r3, r7
   1743a:	1c0a      	adds	r2, r1, #0
   1743c:	801a      	strh	r2, [r3, #0]
    char row = c - 0x20;
   1743e:	230f      	movs	r3, #15
   17440:	18fb      	adds	r3, r7, r3
   17442:	1cfa      	adds	r2, r7, #3
   17444:	7812      	ldrb	r2, [r2, #0]
   17446:	3a20      	subs	r2, #32
   17448:	701a      	strb	r2, [r3, #0]
    int i;
    if ((MAX_X-x>7)&&(MAX_Y-y>7)){
   1744a:	1dbb      	adds	r3, r7, #6
   1744c:	2200      	movs	r2, #0
   1744e:	5e9b      	ldrsh	r3, [r3, r2]
   17450:	22a0      	movs	r2, #160	; 0xa0
   17452:	1ad3      	subs	r3, r2, r3
   17454:	2b07      	cmp	r3, #7
   17456:	dd53      	ble.n	17500 <drawChar+0xe8>
   17458:	1d3b      	adds	r3, r7, #4
   1745a:	2200      	movs	r2, #0
   1745c:	5e9b      	ldrsh	r3, [r3, r2]
   1745e:	2280      	movs	r2, #128	; 0x80
   17460:	1ad3      	subs	r3, r2, r3
   17462:	2b07      	cmp	r3, #7
   17464:	dd4c      	ble.n	17500 <drawChar+0xe8>
        for(i=0;i<5;i++){
   17466:	2300      	movs	r3, #0
   17468:	617b      	str	r3, [r7, #20]
   1746a:	e046      	b.n	174fa <drawChar+0xe2>
            char pixels = ASCII[row][i]; // so we have a list of pixies to go through
   1746c:	230f      	movs	r3, #15
   1746e:	18fb      	adds	r3, r7, r3
   17470:	781a      	ldrb	r2, [r3, #0]
   17472:	230e      	movs	r3, #14
   17474:	18f9      	adds	r1, r7, r3
   17476:	4824      	ldr	r0, [pc, #144]	; (17508 <drawChar+0xf0>)
   17478:	0013      	movs	r3, r2
   1747a:	009b      	lsls	r3, r3, #2
   1747c:	189b      	adds	r3, r3, r2
   1747e:	18c2      	adds	r2, r0, r3
   17480:	697b      	ldr	r3, [r7, #20]
   17482:	18d3      	adds	r3, r2, r3
   17484:	781b      	ldrb	r3, [r3, #0]
   17486:	700b      	strb	r3, [r1, #0]
            int j;
            for(j=0;j<8;j++){
   17488:	2300      	movs	r3, #0
   1748a:	613b      	str	r3, [r7, #16]
   1748c:	e02f      	b.n	174ee <drawChar+0xd6>
                if ((pixels>>j)&1==1){
   1748e:	230e      	movs	r3, #14
   17490:	18fb      	adds	r3, r7, r3
   17492:	781a      	ldrb	r2, [r3, #0]
   17494:	693b      	ldr	r3, [r7, #16]
   17496:	411a      	asrs	r2, r3
   17498:	0013      	movs	r3, r2
   1749a:	2201      	movs	r2, #1
   1749c:	4013      	ands	r3, r2
   1749e:	d011      	beq.n	174c4 <drawChar+0xac>
                    LCD_drawPixel(x+i,y+j,fg);
   174a0:	697b      	ldr	r3, [r7, #20]
   174a2:	b29a      	uxth	r2, r3
   174a4:	1dbb      	adds	r3, r7, #6
   174a6:	881b      	ldrh	r3, [r3, #0]
   174a8:	18d3      	adds	r3, r2, r3
   174aa:	b298      	uxth	r0, r3
   174ac:	693b      	ldr	r3, [r7, #16]
   174ae:	b29a      	uxth	r2, r3
   174b0:	1d3b      	adds	r3, r7, #4
   174b2:	881b      	ldrh	r3, [r3, #0]
   174b4:	18d3      	adds	r3, r2, r3
   174b6:	b299      	uxth	r1, r3
   174b8:	003b      	movs	r3, r7
   174ba:	881b      	ldrh	r3, [r3, #0]
   174bc:	001a      	movs	r2, r3
   174be:	4b13      	ldr	r3, [pc, #76]	; (1750c <drawChar+0xf4>)
   174c0:	4798      	blx	r3
   174c2:	e011      	b.n	174e8 <drawChar+0xd0>
                }
                else {
                    LCD_drawPixel(x+i,y+j,bg);
   174c4:	697b      	ldr	r3, [r7, #20]
   174c6:	b29a      	uxth	r2, r3
   174c8:	1dbb      	adds	r3, r7, #6
   174ca:	881b      	ldrh	r3, [r3, #0]
   174cc:	18d3      	adds	r3, r2, r3
   174ce:	b298      	uxth	r0, r3
   174d0:	693b      	ldr	r3, [r7, #16]
   174d2:	b29a      	uxth	r2, r3
   174d4:	1d3b      	adds	r3, r7, #4
   174d6:	881b      	ldrh	r3, [r3, #0]
   174d8:	18d3      	adds	r3, r2, r3
   174da:	b29b      	uxth	r3, r3
   174dc:	2228      	movs	r2, #40	; 0x28
   174de:	18ba      	adds	r2, r7, r2
   174e0:	8812      	ldrh	r2, [r2, #0]
   174e2:	0019      	movs	r1, r3
   174e4:	4b09      	ldr	r3, [pc, #36]	; (1750c <drawChar+0xf4>)
   174e6:	4798      	blx	r3
            for(j=0;j<8;j++){
   174e8:	693b      	ldr	r3, [r7, #16]
   174ea:	3301      	adds	r3, #1
   174ec:	613b      	str	r3, [r7, #16]
   174ee:	693b      	ldr	r3, [r7, #16]
   174f0:	2b07      	cmp	r3, #7
   174f2:	ddcc      	ble.n	1748e <drawChar+0x76>
        for(i=0;i<5;i++){
   174f4:	697b      	ldr	r3, [r7, #20]
   174f6:	3301      	adds	r3, #1
   174f8:	617b      	str	r3, [r7, #20]
   174fa:	697b      	ldr	r3, [r7, #20]
   174fc:	2b04      	cmp	r3, #4
   174fe:	ddb5      	ble.n	1746c <drawChar+0x54>
                }
            }
        }
    }
}
   17500:	46c0      	nop			; (mov r8, r8)
   17502:	46bd      	mov	sp, r7
   17504:	b006      	add	sp, #24
   17506:	bdb0      	pop	{r4, r5, r7, pc}
   17508:	00039114 	.word	0x00039114
   1750c:	000179c1 	.word	0x000179c1

00017510 <configure_spi_master>:




void configure_spi_master(void)
{
   17510:	b580      	push	{r7, lr}
   17512:	b090      	sub	sp, #64	; 0x40
   17514:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
   17516:	1d3b      	adds	r3, r7, #4
   17518:	0018      	movs	r0, r3
   1751a:	4b1c      	ldr	r3, [pc, #112]	; (1758c <configure_spi_master+0x7c>)
   1751c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
   1751e:	1d3b      	adds	r3, r7, #4
   17520:	2205      	movs	r2, #5
   17522:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
   17524:	1d3a      	adds	r2, r7, #4
   17526:	4b1a      	ldr	r3, [pc, #104]	; (17590 <configure_spi_master+0x80>)
   17528:	0011      	movs	r1, r2
   1752a:	0018      	movs	r0, r3
   1752c:	4b19      	ldr	r3, [pc, #100]	; (17594 <configure_spi_master+0x84>)
   1752e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
   17530:	2308      	movs	r3, #8
   17532:	18fb      	adds	r3, r7, r3
   17534:	0018      	movs	r0, r3
   17536:	4b18      	ldr	r3, [pc, #96]	; (17598 <configure_spi_master+0x88>)
   17538:	4798      	blx	r3
	/*config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;*/
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
   1753a:	2308      	movs	r3, #8
   1753c:	18fb      	adds	r3, r7, r3
   1753e:	2200      	movs	r2, #0
   17540:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
   17542:	2308      	movs	r3, #8
   17544:	18fb      	adds	r3, r7, r3
   17546:	4a15      	ldr	r2, [pc, #84]	; (1759c <configure_spi_master+0x8c>)
   17548:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
   1754a:	2308      	movs	r3, #8
   1754c:	18fb      	adds	r3, r7, r3
   1754e:	4a14      	ldr	r2, [pc, #80]	; (175a0 <configure_spi_master+0x90>)
   17550:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
   17552:	2308      	movs	r3, #8
   17554:	18fb      	adds	r3, r7, r3
   17556:	2201      	movs	r2, #1
   17558:	4252      	negs	r2, r2
   1755a:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
   1755c:	2308      	movs	r3, #8
   1755e:	18fb      	adds	r3, r7, r3
   17560:	2201      	movs	r2, #1
   17562:	4252      	negs	r2, r2
   17564:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  12000000; //12MHz  = 400ns per signal
   17566:	2308      	movs	r3, #8
   17568:	18fb      	adds	r3, r7, r3
   1756a:	4a0e      	ldr	r2, [pc, #56]	; (175a4 <configure_spi_master+0x94>)
   1756c:	619a      	str	r2, [r3, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
   1756e:	2308      	movs	r3, #8
   17570:	18fa      	adds	r2, r7, r3
   17572:	490d      	ldr	r1, [pc, #52]	; (175a8 <configure_spi_master+0x98>)
   17574:	4b0d      	ldr	r3, [pc, #52]	; (175ac <configure_spi_master+0x9c>)
   17576:	0018      	movs	r0, r3
   17578:	4b0d      	ldr	r3, [pc, #52]	; (175b0 <configure_spi_master+0xa0>)
   1757a:	4798      	blx	r3
	spi_enable(&spi_master_instance);
   1757c:	4b0b      	ldr	r3, [pc, #44]	; (175ac <configure_spi_master+0x9c>)
   1757e:	0018      	movs	r0, r3
   17580:	4b0c      	ldr	r3, [pc, #48]	; (175b4 <configure_spi_master+0xa4>)
   17582:	4798      	blx	r3
}
   17584:	46c0      	nop			; (mov r8, r8)
   17586:	46bd      	mov	sp, r7
   17588:	b010      	add	sp, #64	; 0x40
   1758a:	bd80      	pop	{r7, pc}
   1758c:	00017211 	.word	0x00017211
   17590:	200046fc 	.word	0x200046fc
   17594:	00017235 	.word	0x00017235
   17598:	0001718d 	.word	0x0001718d
   1759c:	00220003 	.word	0x00220003
   175a0:	00230003 	.word	0x00230003
   175a4:	00b71b00 	.word	0x00b71b00
   175a8:	42001c00 	.word	0x42001c00
   175ac:	200046f0 	.word	0x200046f0
   175b0:	0002a291 	.word	0x0002a291
   175b4:	00017299 	.word	0x00017299

000175b8 <spi_io>:



void spi_io(unsigned char o) {
   175b8:	b580      	push	{r7, lr}
   175ba:	b082      	sub	sp, #8
   175bc:	af00      	add	r7, sp, #0
   175be:	0002      	movs	r2, r0
   175c0:	1dfb      	adds	r3, r7, #7
   175c2:	701a      	strb	r2, [r3, #0]
	spi_write(&spi_master_instance,o);
   175c4:	1dfb      	adds	r3, r7, #7
   175c6:	781b      	ldrb	r3, [r3, #0]
   175c8:	b29a      	uxth	r2, r3
   175ca:	4b04      	ldr	r3, [pc, #16]	; (175dc <spi_io+0x24>)
   175cc:	0011      	movs	r1, r2
   175ce:	0018      	movs	r0, r3
   175d0:	4b03      	ldr	r3, [pc, #12]	; (175e0 <spi_io+0x28>)
   175d2:	4798      	blx	r3
}
   175d4:	46c0      	nop			; (mov r8, r8)
   175d6:	46bd      	mov	sp, r7
   175d8:	b002      	add	sp, #8
   175da:	bd80      	pop	{r7, pc}
   175dc:	200046f0 	.word	0x200046f0
   175e0:	000172f5 	.word	0x000172f5

000175e4 <LCD_command>:

void LCD_command(unsigned char com) {
   175e4:	b580      	push	{r7, lr}
   175e6:	b082      	sub	sp, #8
   175e8:	af00      	add	r7, sp, #0
   175ea:	0002      	movs	r2, r0
   175ec:	1dfb      	adds	r3, r7, #7
   175ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,false);
   175f0:	2100      	movs	r1, #0
   175f2:	2014      	movs	r0, #20
   175f4:	4b0b      	ldr	r3, [pc, #44]	; (17624 <LCD_command+0x40>)
   175f6:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   175f8:	490b      	ldr	r1, [pc, #44]	; (17628 <LCD_command+0x44>)
   175fa:	4b0c      	ldr	r3, [pc, #48]	; (1762c <LCD_command+0x48>)
   175fc:	2201      	movs	r2, #1
   175fe:	0018      	movs	r0, r3
   17600:	4b0b      	ldr	r3, [pc, #44]	; (17630 <LCD_command+0x4c>)
   17602:	4798      	blx	r3
	spi_io(com);
   17604:	1dfb      	adds	r3, r7, #7
   17606:	781b      	ldrb	r3, [r3, #0]
   17608:	0018      	movs	r0, r3
   1760a:	4b0a      	ldr	r3, [pc, #40]	; (17634 <LCD_command+0x50>)
   1760c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   1760e:	4906      	ldr	r1, [pc, #24]	; (17628 <LCD_command+0x44>)
   17610:	4b06      	ldr	r3, [pc, #24]	; (1762c <LCD_command+0x48>)
   17612:	2200      	movs	r2, #0
   17614:	0018      	movs	r0, r3
   17616:	4b06      	ldr	r3, [pc, #24]	; (17630 <LCD_command+0x4c>)
   17618:	4798      	blx	r3
}
   1761a:	46c0      	nop			; (mov r8, r8)
   1761c:	46bd      	mov	sp, r7
   1761e:	b002      	add	sp, #8
   17620:	bd80      	pop	{r7, pc}
   17622:	46c0      	nop			; (mov r8, r8)
   17624:	00017119 	.word	0x00017119
   17628:	200046fc 	.word	0x200046fc
   1762c:	200046f0 	.word	0x200046f0
   17630:	0002a545 	.word	0x0002a545
   17634:	000175b9 	.word	0x000175b9

00017638 <LCD_data>:

void LCD_data(unsigned char dat) {
   17638:	b580      	push	{r7, lr}
   1763a:	b082      	sub	sp, #8
   1763c:	af00      	add	r7, sp, #0
   1763e:	0002      	movs	r2, r0
   17640:	1dfb      	adds	r3, r7, #7
   17642:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   17644:	2101      	movs	r1, #1
   17646:	2014      	movs	r0, #20
   17648:	4b0b      	ldr	r3, [pc, #44]	; (17678 <LCD_data+0x40>)
   1764a:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   1764c:	490b      	ldr	r1, [pc, #44]	; (1767c <LCD_data+0x44>)
   1764e:	4b0c      	ldr	r3, [pc, #48]	; (17680 <LCD_data+0x48>)
   17650:	2201      	movs	r2, #1
   17652:	0018      	movs	r0, r3
   17654:	4b0b      	ldr	r3, [pc, #44]	; (17684 <LCD_data+0x4c>)
   17656:	4798      	blx	r3
	spi_io(dat);
   17658:	1dfb      	adds	r3, r7, #7
   1765a:	781b      	ldrb	r3, [r3, #0]
   1765c:	0018      	movs	r0, r3
   1765e:	4b0a      	ldr	r3, [pc, #40]	; (17688 <LCD_data+0x50>)
   17660:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   17662:	4906      	ldr	r1, [pc, #24]	; (1767c <LCD_data+0x44>)
   17664:	4b06      	ldr	r3, [pc, #24]	; (17680 <LCD_data+0x48>)
   17666:	2200      	movs	r2, #0
   17668:	0018      	movs	r0, r3
   1766a:	4b06      	ldr	r3, [pc, #24]	; (17684 <LCD_data+0x4c>)
   1766c:	4798      	blx	r3
}
   1766e:	46c0      	nop			; (mov r8, r8)
   17670:	46bd      	mov	sp, r7
   17672:	b002      	add	sp, #8
   17674:	bd80      	pop	{r7, pc}
   17676:	46c0      	nop			; (mov r8, r8)
   17678:	00017119 	.word	0x00017119
   1767c:	200046fc 	.word	0x200046fc
   17680:	200046f0 	.word	0x200046f0
   17684:	0002a545 	.word	0x0002a545
   17688:	000175b9 	.word	0x000175b9

0001768c <LCD_data16>:

void LCD_data16(unsigned short dat) {
   1768c:	b580      	push	{r7, lr}
   1768e:	b082      	sub	sp, #8
   17690:	af00      	add	r7, sp, #0
   17692:	0002      	movs	r2, r0
   17694:	1dbb      	adds	r3, r7, #6
   17696:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   17698:	2101      	movs	r1, #1
   1769a:	2014      	movs	r0, #20
   1769c:	4b0f      	ldr	r3, [pc, #60]	; (176dc <LCD_data16+0x50>)
   1769e:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   176a0:	490f      	ldr	r1, [pc, #60]	; (176e0 <LCD_data16+0x54>)
   176a2:	4b10      	ldr	r3, [pc, #64]	; (176e4 <LCD_data16+0x58>)
   176a4:	2201      	movs	r2, #1
   176a6:	0018      	movs	r0, r3
   176a8:	4b0f      	ldr	r3, [pc, #60]	; (176e8 <LCD_data16+0x5c>)
   176aa:	4798      	blx	r3
	spi_io(dat>>8);
   176ac:	1dbb      	adds	r3, r7, #6
   176ae:	881b      	ldrh	r3, [r3, #0]
   176b0:	0a1b      	lsrs	r3, r3, #8
   176b2:	b29b      	uxth	r3, r3
   176b4:	b2db      	uxtb	r3, r3
   176b6:	0018      	movs	r0, r3
   176b8:	4b0c      	ldr	r3, [pc, #48]	; (176ec <LCD_data16+0x60>)
   176ba:	4798      	blx	r3
	spi_io(dat);
   176bc:	1dbb      	adds	r3, r7, #6
   176be:	881b      	ldrh	r3, [r3, #0]
   176c0:	b2db      	uxtb	r3, r3
   176c2:	0018      	movs	r0, r3
   176c4:	4b09      	ldr	r3, [pc, #36]	; (176ec <LCD_data16+0x60>)
   176c6:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   176c8:	4905      	ldr	r1, [pc, #20]	; (176e0 <LCD_data16+0x54>)
   176ca:	4b06      	ldr	r3, [pc, #24]	; (176e4 <LCD_data16+0x58>)
   176cc:	2200      	movs	r2, #0
   176ce:	0018      	movs	r0, r3
   176d0:	4b05      	ldr	r3, [pc, #20]	; (176e8 <LCD_data16+0x5c>)
   176d2:	4798      	blx	r3
}
   176d4:	46c0      	nop			; (mov r8, r8)
   176d6:	46bd      	mov	sp, r7
   176d8:	b002      	add	sp, #8
   176da:	bd80      	pop	{r7, pc}
   176dc:	00017119 	.word	0x00017119
   176e0:	200046fc 	.word	0x200046fc
   176e4:	200046f0 	.word	0x200046f0
   176e8:	0002a545 	.word	0x0002a545
   176ec:	000175b9 	.word	0x000175b9

000176f0 <LCD_init>:




void LCD_init() {
   176f0:	b580      	push	{r7, lr}
   176f2:	af00      	add	r7, sp, #0
	configure_spi_master();
   176f4:	4baa      	ldr	r3, [pc, #680]	; (179a0 <LCD_init+0x2b0>)
   176f6:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   176f8:	49aa      	ldr	r1, [pc, #680]	; (179a4 <LCD_init+0x2b4>)
   176fa:	4bab      	ldr	r3, [pc, #684]	; (179a8 <LCD_init+0x2b8>)
   176fc:	2200      	movs	r2, #0
   176fe:	0018      	movs	r0, r3
   17700:	4baa      	ldr	r3, [pc, #680]	; (179ac <LCD_init+0x2bc>)
   17702:	4798      	blx	r3
	delay_ms(10000);
   17704:	4baa      	ldr	r3, [pc, #680]	; (179b0 <LCD_init+0x2c0>)
   17706:	0018      	movs	r0, r3
   17708:	4baa      	ldr	r3, [pc, #680]	; (179b4 <LCD_init+0x2c4>)
   1770a:	4798      	blx	r3
  LCD_command(ST7735_SWRESET);//software reset
   1770c:	2001      	movs	r0, #1
   1770e:	4baa      	ldr	r3, [pc, #680]	; (179b8 <LCD_init+0x2c8>)
   17710:	4798      	blx	r3
  delay_ms(50);
   17712:	2032      	movs	r0, #50	; 0x32
   17714:	4ba7      	ldr	r3, [pc, #668]	; (179b4 <LCD_init+0x2c4>)
   17716:	4798      	blx	r3
	LCD_command(ST7735_SLPOUT);//exit sleep
   17718:	2011      	movs	r0, #17
   1771a:	4ba7      	ldr	r3, [pc, #668]	; (179b8 <LCD_init+0x2c8>)
   1771c:	4798      	blx	r3
	delay_ms(5);
   1771e:	2005      	movs	r0, #5
   17720:	4ba4      	ldr	r3, [pc, #656]	; (179b4 <LCD_init+0x2c4>)
   17722:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR1);//Frame Rate Control (In normal mode/Full colors)
   17724:	20b1      	movs	r0, #177	; 0xb1
   17726:	4ba4      	ldr	r3, [pc, #656]	; (179b8 <LCD_init+0x2c8>)
   17728:	4798      	blx	r3
	LCD_data(0x01);
   1772a:	2001      	movs	r0, #1
   1772c:	4ba3      	ldr	r3, [pc, #652]	; (179bc <LCD_init+0x2cc>)
   1772e:	4798      	blx	r3
	LCD_data(0x2C);
   17730:	202c      	movs	r0, #44	; 0x2c
   17732:	4ba2      	ldr	r3, [pc, #648]	; (179bc <LCD_init+0x2cc>)
   17734:	4798      	blx	r3
	LCD_data(0x2D);
   17736:	202d      	movs	r0, #45	; 0x2d
   17738:	4ba0      	ldr	r3, [pc, #640]	; (179bc <LCD_init+0x2cc>)
   1773a:	4798      	blx	r3
	delay_ms(1);
   1773c:	2001      	movs	r0, #1
   1773e:	4b9d      	ldr	r3, [pc, #628]	; (179b4 <LCD_init+0x2c4>)
   17740:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR2);//Frame Rate Control (In normal mode/Full colors)
   17742:	20b2      	movs	r0, #178	; 0xb2
   17744:	4b9c      	ldr	r3, [pc, #624]	; (179b8 <LCD_init+0x2c8>)
   17746:	4798      	blx	r3
	LCD_data(0x01);
   17748:	2001      	movs	r0, #1
   1774a:	4b9c      	ldr	r3, [pc, #624]	; (179bc <LCD_init+0x2cc>)
   1774c:	4798      	blx	r3
	LCD_data(0x2C);
   1774e:	202c      	movs	r0, #44	; 0x2c
   17750:	4b9a      	ldr	r3, [pc, #616]	; (179bc <LCD_init+0x2cc>)
   17752:	4798      	blx	r3
	LCD_data(0x2D);
   17754:	202d      	movs	r0, #45	; 0x2d
   17756:	4b99      	ldr	r3, [pc, #612]	; (179bc <LCD_init+0x2cc>)
   17758:	4798      	blx	r3
	delay_ms(1);
   1775a:	2001      	movs	r0, #1
   1775c:	4b95      	ldr	r3, [pc, #596]	; (179b4 <LCD_init+0x2c4>)
   1775e:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR3);//Frame Rate Control (In normal mode/Full colors)
   17760:	20b3      	movs	r0, #179	; 0xb3
   17762:	4b95      	ldr	r3, [pc, #596]	; (179b8 <LCD_init+0x2c8>)
   17764:	4798      	blx	r3
	LCD_data(0x01);
   17766:	2001      	movs	r0, #1
   17768:	4b94      	ldr	r3, [pc, #592]	; (179bc <LCD_init+0x2cc>)
   1776a:	4798      	blx	r3
	LCD_data(0x2C);
   1776c:	202c      	movs	r0, #44	; 0x2c
   1776e:	4b93      	ldr	r3, [pc, #588]	; (179bc <LCD_init+0x2cc>)
   17770:	4798      	blx	r3
	LCD_data(0x2D);
   17772:	202d      	movs	r0, #45	; 0x2d
   17774:	4b91      	ldr	r3, [pc, #580]	; (179bc <LCD_init+0x2cc>)
   17776:	4798      	blx	r3
	LCD_data(0x01);
   17778:	2001      	movs	r0, #1
   1777a:	4b90      	ldr	r3, [pc, #576]	; (179bc <LCD_init+0x2cc>)
   1777c:	4798      	blx	r3
	LCD_data(0x2C);
   1777e:	202c      	movs	r0, #44	; 0x2c
   17780:	4b8e      	ldr	r3, [pc, #568]	; (179bc <LCD_init+0x2cc>)
   17782:	4798      	blx	r3
	LCD_data(0x2D);
   17784:	202d      	movs	r0, #45	; 0x2d
   17786:	4b8d      	ldr	r3, [pc, #564]	; (179bc <LCD_init+0x2cc>)
   17788:	4798      	blx	r3
	delay_ms(1);
   1778a:	2001      	movs	r0, #1
   1778c:	4b89      	ldr	r3, [pc, #548]	; (179b4 <LCD_init+0x2c4>)
   1778e:	4798      	blx	r3
	LCD_command(ST7735_INVCTR);//display inversion
   17790:	20b4      	movs	r0, #180	; 0xb4
   17792:	4b89      	ldr	r3, [pc, #548]	; (179b8 <LCD_init+0x2c8>)
   17794:	4798      	blx	r3
	LCD_data(0x07);
   17796:	2007      	movs	r0, #7
   17798:	4b88      	ldr	r3, [pc, #544]	; (179bc <LCD_init+0x2cc>)
   1779a:	4798      	blx	r3
	delay_ms(1);
   1779c:	2001      	movs	r0, #1
   1779e:	4b85      	ldr	r3, [pc, #532]	; (179b4 <LCD_init+0x2c4>)
   177a0:	4798      	blx	r3
	LCD_command(ST7735_PWCTR1);
   177a2:	20c0      	movs	r0, #192	; 0xc0
   177a4:	4b84      	ldr	r3, [pc, #528]	; (179b8 <LCD_init+0x2c8>)
   177a6:	4798      	blx	r3
	LCD_data(0x0A);//4.30 - 0x0A
   177a8:	200a      	movs	r0, #10
   177aa:	4b84      	ldr	r3, [pc, #528]	; (179bc <LCD_init+0x2cc>)
   177ac:	4798      	blx	r3
	LCD_data(0x02);//0x05
   177ae:	2002      	movs	r0, #2
   177b0:	4b82      	ldr	r3, [pc, #520]	; (179bc <LCD_init+0x2cc>)
   177b2:	4798      	blx	r3
	LCD_data(0x84);//added auto mode
   177b4:	2084      	movs	r0, #132	; 0x84
   177b6:	4b81      	ldr	r3, [pc, #516]	; (179bc <LCD_init+0x2cc>)
   177b8:	4798      	blx	r3
	delay_ms(1);
   177ba:	2001      	movs	r0, #1
   177bc:	4b7d      	ldr	r3, [pc, #500]	; (179b4 <LCD_init+0x2c4>)
   177be:	4798      	blx	r3
	LCD_command(ST7735_PWCTR2);
   177c0:	20c1      	movs	r0, #193	; 0xc1
   177c2:	4b7d      	ldr	r3, [pc, #500]	; (179b8 <LCD_init+0x2c8>)
   177c4:	4798      	blx	r3
	LCD_data(0xC5);
   177c6:	20c5      	movs	r0, #197	; 0xc5
   177c8:	4b7c      	ldr	r3, [pc, #496]	; (179bc <LCD_init+0x2cc>)
   177ca:	4798      	blx	r3
	delay_ms(1);
   177cc:	2001      	movs	r0, #1
   177ce:	4b79      	ldr	r3, [pc, #484]	; (179b4 <LCD_init+0x2c4>)
   177d0:	4798      	blx	r3
	LCD_command( ST7735_PWCTR3);
   177d2:	20c2      	movs	r0, #194	; 0xc2
   177d4:	4b78      	ldr	r3, [pc, #480]	; (179b8 <LCD_init+0x2c8>)
   177d6:	4798      	blx	r3
	LCD_data(0x0A);
   177d8:	200a      	movs	r0, #10
   177da:	4b78      	ldr	r3, [pc, #480]	; (179bc <LCD_init+0x2cc>)
   177dc:	4798      	blx	r3
	LCD_data(0x00);
   177de:	2000      	movs	r0, #0
   177e0:	4b76      	ldr	r3, [pc, #472]	; (179bc <LCD_init+0x2cc>)
   177e2:	4798      	blx	r3
	delay_ms(1);
   177e4:	2001      	movs	r0, #1
   177e6:	4b73      	ldr	r3, [pc, #460]	; (179b4 <LCD_init+0x2c4>)
   177e8:	4798      	blx	r3
	LCD_command( ST7735_PWCTR4);
   177ea:	20c3      	movs	r0, #195	; 0xc3
   177ec:	4b72      	ldr	r3, [pc, #456]	; (179b8 <LCD_init+0x2c8>)
   177ee:	4798      	blx	r3
	LCD_data(0x8A);
   177f0:	208a      	movs	r0, #138	; 0x8a
   177f2:	4b72      	ldr	r3, [pc, #456]	; (179bc <LCD_init+0x2cc>)
   177f4:	4798      	blx	r3
	LCD_data(0x2A);
   177f6:	202a      	movs	r0, #42	; 0x2a
   177f8:	4b70      	ldr	r3, [pc, #448]	; (179bc <LCD_init+0x2cc>)
   177fa:	4798      	blx	r3
	delay_ms(1);
   177fc:	2001      	movs	r0, #1
   177fe:	4b6d      	ldr	r3, [pc, #436]	; (179b4 <LCD_init+0x2c4>)
   17800:	4798      	blx	r3
	LCD_command( ST7735_PWCTR5);
   17802:	20c4      	movs	r0, #196	; 0xc4
   17804:	4b6c      	ldr	r3, [pc, #432]	; (179b8 <LCD_init+0x2c8>)
   17806:	4798      	blx	r3
	LCD_data(0x8A);
   17808:	208a      	movs	r0, #138	; 0x8a
   1780a:	4b6c      	ldr	r3, [pc, #432]	; (179bc <LCD_init+0x2cc>)
   1780c:	4798      	blx	r3
	LCD_data(0xEE);
   1780e:	20ee      	movs	r0, #238	; 0xee
   17810:	4b6a      	ldr	r3, [pc, #424]	; (179bc <LCD_init+0x2cc>)
   17812:	4798      	blx	r3
	delay_ms(1);
   17814:	2001      	movs	r0, #1
   17816:	4b67      	ldr	r3, [pc, #412]	; (179b4 <LCD_init+0x2c4>)
   17818:	4798      	blx	r3
	LCD_command(ST7735_VMCTR1);
   1781a:	20c5      	movs	r0, #197	; 0xc5
   1781c:	4b66      	ldr	r3, [pc, #408]	; (179b8 <LCD_init+0x2c8>)
   1781e:	4798      	blx	r3
	LCD_data(0x0E);
   17820:	200e      	movs	r0, #14
   17822:	4b66      	ldr	r3, [pc, #408]	; (179bc <LCD_init+0x2cc>)
   17824:	4798      	blx	r3
	delay_ms(1);
   17826:	2001      	movs	r0, #1
   17828:	4b62      	ldr	r3, [pc, #392]	; (179b4 <LCD_init+0x2c4>)
   1782a:	4798      	blx	r3
	LCD_command(ST7735_INVOFF);
   1782c:	2020      	movs	r0, #32
   1782e:	4b62      	ldr	r3, [pc, #392]	; (179b8 <LCD_init+0x2c8>)
   17830:	4798      	blx	r3
	LCD_command(ST7735_MADCTL);
   17832:	2036      	movs	r0, #54	; 0x36
   17834:	4b60      	ldr	r3, [pc, #384]	; (179b8 <LCD_init+0x2c8>)
   17836:	4798      	blx	r3
	LCD_data(0xC8);
   17838:	20c8      	movs	r0, #200	; 0xc8
   1783a:	4b60      	ldr	r3, [pc, #384]	; (179bc <LCD_init+0x2cc>)
   1783c:	4798      	blx	r3
	delay_ms(1);
   1783e:	2001      	movs	r0, #1
   17840:	4b5c      	ldr	r3, [pc, #368]	; (179b4 <LCD_init+0x2c4>)
   17842:	4798      	blx	r3
	LCD_command(ST7735_COLMOD);
   17844:	203a      	movs	r0, #58	; 0x3a
   17846:	4b5c      	ldr	r3, [pc, #368]	; (179b8 <LCD_init+0x2c8>)
   17848:	4798      	blx	r3
	LCD_data(0x05);
   1784a:	2005      	movs	r0, #5
   1784c:	4b5b      	ldr	r3, [pc, #364]	; (179bc <LCD_init+0x2cc>)
   1784e:	4798      	blx	r3
	delay_ms(1);
   17850:	2001      	movs	r0, #1
   17852:	4b58      	ldr	r3, [pc, #352]	; (179b4 <LCD_init+0x2c4>)
   17854:	4798      	blx	r3
	LCD_command(ST7735_CASET);
   17856:	202a      	movs	r0, #42	; 0x2a
   17858:	4b57      	ldr	r3, [pc, #348]	; (179b8 <LCD_init+0x2c8>)
   1785a:	4798      	blx	r3
	LCD_data(0x00);
   1785c:	2000      	movs	r0, #0
   1785e:	4b57      	ldr	r3, [pc, #348]	; (179bc <LCD_init+0x2cc>)
   17860:	4798      	blx	r3
	LCD_data(0x00);
   17862:	2000      	movs	r0, #0
   17864:	4b55      	ldr	r3, [pc, #340]	; (179bc <LCD_init+0x2cc>)
   17866:	4798      	blx	r3
	LCD_data(0x00);
   17868:	2000      	movs	r0, #0
   1786a:	4b54      	ldr	r3, [pc, #336]	; (179bc <LCD_init+0x2cc>)
   1786c:	4798      	blx	r3
	LCD_data(0x7F);
   1786e:	207f      	movs	r0, #127	; 0x7f
   17870:	4b52      	ldr	r3, [pc, #328]	; (179bc <LCD_init+0x2cc>)
   17872:	4798      	blx	r3
	delay_ms(1);
   17874:	2001      	movs	r0, #1
   17876:	4b4f      	ldr	r3, [pc, #316]	; (179b4 <LCD_init+0x2c4>)
   17878:	4798      	blx	r3
	LCD_command(ST7735_RASET);
   1787a:	202b      	movs	r0, #43	; 0x2b
   1787c:	4b4e      	ldr	r3, [pc, #312]	; (179b8 <LCD_init+0x2c8>)
   1787e:	4798      	blx	r3
	LCD_data(0x00);
   17880:	2000      	movs	r0, #0
   17882:	4b4e      	ldr	r3, [pc, #312]	; (179bc <LCD_init+0x2cc>)
   17884:	4798      	blx	r3
	LCD_data(0x00);
   17886:	2000      	movs	r0, #0
   17888:	4b4c      	ldr	r3, [pc, #304]	; (179bc <LCD_init+0x2cc>)
   1788a:	4798      	blx	r3
	LCD_data(0x00);
   1788c:	2000      	movs	r0, #0
   1788e:	4b4b      	ldr	r3, [pc, #300]	; (179bc <LCD_init+0x2cc>)
   17890:	4798      	blx	r3
	LCD_data(0x9F);
   17892:	209f      	movs	r0, #159	; 0x9f
   17894:	4b49      	ldr	r3, [pc, #292]	; (179bc <LCD_init+0x2cc>)
   17896:	4798      	blx	r3
	delay_ms(1);
   17898:	2001      	movs	r0, #1
   1789a:	4b46      	ldr	r3, [pc, #280]	; (179b4 <LCD_init+0x2c4>)
   1789c:	4798      	blx	r3
	LCD_command(ST7735_GMCTRP1);
   1789e:	20e0      	movs	r0, #224	; 0xe0
   178a0:	4b45      	ldr	r3, [pc, #276]	; (179b8 <LCD_init+0x2c8>)
   178a2:	4798      	blx	r3
	LCD_data(0x02);
   178a4:	2002      	movs	r0, #2
   178a6:	4b45      	ldr	r3, [pc, #276]	; (179bc <LCD_init+0x2cc>)
   178a8:	4798      	blx	r3
	LCD_data(0x1C);
   178aa:	201c      	movs	r0, #28
   178ac:	4b43      	ldr	r3, [pc, #268]	; (179bc <LCD_init+0x2cc>)
   178ae:	4798      	blx	r3
	LCD_data(0x07);
   178b0:	2007      	movs	r0, #7
   178b2:	4b42      	ldr	r3, [pc, #264]	; (179bc <LCD_init+0x2cc>)
   178b4:	4798      	blx	r3
	LCD_data(0x12);
   178b6:	2012      	movs	r0, #18
   178b8:	4b40      	ldr	r3, [pc, #256]	; (179bc <LCD_init+0x2cc>)
   178ba:	4798      	blx	r3
	LCD_data(0x37);
   178bc:	2037      	movs	r0, #55	; 0x37
   178be:	4b3f      	ldr	r3, [pc, #252]	; (179bc <LCD_init+0x2cc>)
   178c0:	4798      	blx	r3
	LCD_data(0x32);
   178c2:	2032      	movs	r0, #50	; 0x32
   178c4:	4b3d      	ldr	r3, [pc, #244]	; (179bc <LCD_init+0x2cc>)
   178c6:	4798      	blx	r3
	LCD_data(0x29);
   178c8:	2029      	movs	r0, #41	; 0x29
   178ca:	4b3c      	ldr	r3, [pc, #240]	; (179bc <LCD_init+0x2cc>)
   178cc:	4798      	blx	r3
	LCD_data(0x2D);
   178ce:	202d      	movs	r0, #45	; 0x2d
   178d0:	4b3a      	ldr	r3, [pc, #232]	; (179bc <LCD_init+0x2cc>)
   178d2:	4798      	blx	r3
	LCD_data(0x29);
   178d4:	2029      	movs	r0, #41	; 0x29
   178d6:	4b39      	ldr	r3, [pc, #228]	; (179bc <LCD_init+0x2cc>)
   178d8:	4798      	blx	r3
	LCD_data(0x25);
   178da:	2025      	movs	r0, #37	; 0x25
   178dc:	4b37      	ldr	r3, [pc, #220]	; (179bc <LCD_init+0x2cc>)
   178de:	4798      	blx	r3
	LCD_data(0x2B);
   178e0:	202b      	movs	r0, #43	; 0x2b
   178e2:	4b36      	ldr	r3, [pc, #216]	; (179bc <LCD_init+0x2cc>)
   178e4:	4798      	blx	r3
	LCD_data(0x39);
   178e6:	2039      	movs	r0, #57	; 0x39
   178e8:	4b34      	ldr	r3, [pc, #208]	; (179bc <LCD_init+0x2cc>)
   178ea:	4798      	blx	r3
	LCD_data(0x00);
   178ec:	2000      	movs	r0, #0
   178ee:	4b33      	ldr	r3, [pc, #204]	; (179bc <LCD_init+0x2cc>)
   178f0:	4798      	blx	r3
	LCD_data(0x01);
   178f2:	2001      	movs	r0, #1
   178f4:	4b31      	ldr	r3, [pc, #196]	; (179bc <LCD_init+0x2cc>)
   178f6:	4798      	blx	r3
	LCD_data(0x03);
   178f8:	2003      	movs	r0, #3
   178fa:	4b30      	ldr	r3, [pc, #192]	; (179bc <LCD_init+0x2cc>)
   178fc:	4798      	blx	r3
	LCD_data(0x10);
   178fe:	2010      	movs	r0, #16
   17900:	4b2e      	ldr	r3, [pc, #184]	; (179bc <LCD_init+0x2cc>)
   17902:	4798      	blx	r3
	delay_ms(1);
   17904:	2001      	movs	r0, #1
   17906:	4b2b      	ldr	r3, [pc, #172]	; (179b4 <LCD_init+0x2c4>)
   17908:	4798      	blx	r3
	LCD_command(ST7735_GMCTRN1);
   1790a:	20e1      	movs	r0, #225	; 0xe1
   1790c:	4b2a      	ldr	r3, [pc, #168]	; (179b8 <LCD_init+0x2c8>)
   1790e:	4798      	blx	r3
	LCD_data(0x03);
   17910:	2003      	movs	r0, #3
   17912:	4b2a      	ldr	r3, [pc, #168]	; (179bc <LCD_init+0x2cc>)
   17914:	4798      	blx	r3
	LCD_data(0x1D);
   17916:	201d      	movs	r0, #29
   17918:	4b28      	ldr	r3, [pc, #160]	; (179bc <LCD_init+0x2cc>)
   1791a:	4798      	blx	r3
	LCD_data(0x07);
   1791c:	2007      	movs	r0, #7
   1791e:	4b27      	ldr	r3, [pc, #156]	; (179bc <LCD_init+0x2cc>)
   17920:	4798      	blx	r3
	LCD_data(0x06);
   17922:	2006      	movs	r0, #6
   17924:	4b25      	ldr	r3, [pc, #148]	; (179bc <LCD_init+0x2cc>)
   17926:	4798      	blx	r3
	LCD_data(0x2E);
   17928:	202e      	movs	r0, #46	; 0x2e
   1792a:	4b24      	ldr	r3, [pc, #144]	; (179bc <LCD_init+0x2cc>)
   1792c:	4798      	blx	r3
	LCD_data(0x2C);
   1792e:	202c      	movs	r0, #44	; 0x2c
   17930:	4b22      	ldr	r3, [pc, #136]	; (179bc <LCD_init+0x2cc>)
   17932:	4798      	blx	r3
	LCD_data(0x29);
   17934:	2029      	movs	r0, #41	; 0x29
   17936:	4b21      	ldr	r3, [pc, #132]	; (179bc <LCD_init+0x2cc>)
   17938:	4798      	blx	r3
	LCD_data(0x2D);
   1793a:	202d      	movs	r0, #45	; 0x2d
   1793c:	4b1f      	ldr	r3, [pc, #124]	; (179bc <LCD_init+0x2cc>)
   1793e:	4798      	blx	r3
	LCD_data(0x2E);
   17940:	202e      	movs	r0, #46	; 0x2e
   17942:	4b1e      	ldr	r3, [pc, #120]	; (179bc <LCD_init+0x2cc>)
   17944:	4798      	blx	r3
	LCD_data(0x2E);
   17946:	202e      	movs	r0, #46	; 0x2e
   17948:	4b1c      	ldr	r3, [pc, #112]	; (179bc <LCD_init+0x2cc>)
   1794a:	4798      	blx	r3
	LCD_data(0x37);
   1794c:	2037      	movs	r0, #55	; 0x37
   1794e:	4b1b      	ldr	r3, [pc, #108]	; (179bc <LCD_init+0x2cc>)
   17950:	4798      	blx	r3
	LCD_data(0x3F);
   17952:	203f      	movs	r0, #63	; 0x3f
   17954:	4b19      	ldr	r3, [pc, #100]	; (179bc <LCD_init+0x2cc>)
   17956:	4798      	blx	r3
	LCD_data(0x00);
   17958:	2000      	movs	r0, #0
   1795a:	4b18      	ldr	r3, [pc, #96]	; (179bc <LCD_init+0x2cc>)
   1795c:	4798      	blx	r3
	LCD_data(0x00);
   1795e:	2000      	movs	r0, #0
   17960:	4b16      	ldr	r3, [pc, #88]	; (179bc <LCD_init+0x2cc>)
   17962:	4798      	blx	r3
	LCD_data(0x02);
   17964:	2002      	movs	r0, #2
   17966:	4b15      	ldr	r3, [pc, #84]	; (179bc <LCD_init+0x2cc>)
   17968:	4798      	blx	r3
	LCD_data(0x10);
   1796a:	2010      	movs	r0, #16
   1796c:	4b13      	ldr	r3, [pc, #76]	; (179bc <LCD_init+0x2cc>)
   1796e:	4798      	blx	r3
	delay_ms(1);
   17970:	2001      	movs	r0, #1
   17972:	4b10      	ldr	r3, [pc, #64]	; (179b4 <LCD_init+0x2c4>)
   17974:	4798      	blx	r3
	LCD_command(ST7735_NORON);
   17976:	2013      	movs	r0, #19
   17978:	4b0f      	ldr	r3, [pc, #60]	; (179b8 <LCD_init+0x2c8>)
   1797a:	4798      	blx	r3
	delay_ms(10);
   1797c:	200a      	movs	r0, #10
   1797e:	4b0d      	ldr	r3, [pc, #52]	; (179b4 <LCD_init+0x2c4>)
   17980:	4798      	blx	r3
	LCD_command(ST7735_DISPON);
   17982:	2029      	movs	r0, #41	; 0x29
   17984:	4b0c      	ldr	r3, [pc, #48]	; (179b8 <LCD_init+0x2c8>)
   17986:	4798      	blx	r3
	delay_ms(100);
   17988:	2064      	movs	r0, #100	; 0x64
   1798a:	4b0a      	ldr	r3, [pc, #40]	; (179b4 <LCD_init+0x2c4>)
   1798c:	4798      	blx	r3
	LCD_command(ST7735_MADCTL); // rotation
   1798e:	2036      	movs	r0, #54	; 0x36
   17990:	4b09      	ldr	r3, [pc, #36]	; (179b8 <LCD_init+0x2c8>)
   17992:	4798      	blx	r3
    LCD_data(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
   17994:	20a0      	movs	r0, #160	; 0xa0
   17996:	4b09      	ldr	r3, [pc, #36]	; (179bc <LCD_init+0x2cc>)
   17998:	4798      	blx	r3
}
   1799a:	46c0      	nop			; (mov r8, r8)
   1799c:	46bd      	mov	sp, r7
   1799e:	bd80      	pop	{r7, pc}
   179a0:	00017511 	.word	0x00017511
   179a4:	200046fc 	.word	0x200046fc
   179a8:	200046f0 	.word	0x200046f0
   179ac:	0002a545 	.word	0x0002a545
   179b0:	00002710 	.word	0x00002710
   179b4:	00022335 	.word	0x00022335
   179b8:	000175e5 	.word	0x000175e5
   179bc:	00017639 	.word	0x00017639

000179c0 <LCD_drawPixel>:

void LCD_drawPixel(unsigned short x, unsigned short y, unsigned short color) {
   179c0:	b590      	push	{r4, r7, lr}
   179c2:	b083      	sub	sp, #12
   179c4:	af00      	add	r7, sp, #0
   179c6:	0004      	movs	r4, r0
   179c8:	0008      	movs	r0, r1
   179ca:	0011      	movs	r1, r2
   179cc:	1dbb      	adds	r3, r7, #6
   179ce:	1c22      	adds	r2, r4, #0
   179d0:	801a      	strh	r2, [r3, #0]
   179d2:	1d3b      	adds	r3, r7, #4
   179d4:	1c02      	adds	r2, r0, #0
   179d6:	801a      	strh	r2, [r3, #0]
   179d8:	1cbb      	adds	r3, r7, #2
   179da:	1c0a      	adds	r2, r1, #0
   179dc:	801a      	strh	r2, [r3, #0]
  // check boundary
  LCD_setAddr(x,y,x+1,y+1);
   179de:	1dbb      	adds	r3, r7, #6
   179e0:	881b      	ldrh	r3, [r3, #0]
   179e2:	3301      	adds	r3, #1
   179e4:	b29a      	uxth	r2, r3
   179e6:	1d3b      	adds	r3, r7, #4
   179e8:	881b      	ldrh	r3, [r3, #0]
   179ea:	3301      	adds	r3, #1
   179ec:	b29c      	uxth	r4, r3
   179ee:	1d3b      	adds	r3, r7, #4
   179f0:	8819      	ldrh	r1, [r3, #0]
   179f2:	1dbb      	adds	r3, r7, #6
   179f4:	8818      	ldrh	r0, [r3, #0]
   179f6:	0023      	movs	r3, r4
   179f8:	4c05      	ldr	r4, [pc, #20]	; (17a10 <LCD_drawPixel+0x50>)
   179fa:	47a0      	blx	r4
  LCD_data16(color);
   179fc:	1cbb      	adds	r3, r7, #2
   179fe:	881b      	ldrh	r3, [r3, #0]
   17a00:	0018      	movs	r0, r3
   17a02:	4b04      	ldr	r3, [pc, #16]	; (17a14 <LCD_drawPixel+0x54>)
   17a04:	4798      	blx	r3
}
   17a06:	46c0      	nop			; (mov r8, r8)
   17a08:	46bd      	mov	sp, r7
   17a0a:	b003      	add	sp, #12
   17a0c:	bd90      	pop	{r4, r7, pc}
   17a0e:	46c0      	nop			; (mov r8, r8)
   17a10:	00017a19 	.word	0x00017a19
   17a14:	0001768d 	.word	0x0001768d

00017a18 <LCD_setAddr>:

void LCD_setAddr(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1) {
   17a18:	b5b0      	push	{r4, r5, r7, lr}
   17a1a:	b082      	sub	sp, #8
   17a1c:	af00      	add	r7, sp, #0
   17a1e:	0005      	movs	r5, r0
   17a20:	000c      	movs	r4, r1
   17a22:	0010      	movs	r0, r2
   17a24:	0019      	movs	r1, r3
   17a26:	1dbb      	adds	r3, r7, #6
   17a28:	1c2a      	adds	r2, r5, #0
   17a2a:	801a      	strh	r2, [r3, #0]
   17a2c:	1d3b      	adds	r3, r7, #4
   17a2e:	1c22      	adds	r2, r4, #0
   17a30:	801a      	strh	r2, [r3, #0]
   17a32:	1cbb      	adds	r3, r7, #2
   17a34:	1c02      	adds	r2, r0, #0
   17a36:	801a      	strh	r2, [r3, #0]
   17a38:	003b      	movs	r3, r7
   17a3a:	1c0a      	adds	r2, r1, #0
   17a3c:	801a      	strh	r2, [r3, #0]
  LCD_command(ST7735_CASET); // Column
   17a3e:	202a      	movs	r0, #42	; 0x2a
   17a40:	4b0f      	ldr	r3, [pc, #60]	; (17a80 <LCD_setAddr+0x68>)
   17a42:	4798      	blx	r3
  LCD_data16(x0);
   17a44:	1dbb      	adds	r3, r7, #6
   17a46:	881b      	ldrh	r3, [r3, #0]
   17a48:	0018      	movs	r0, r3
   17a4a:	4b0e      	ldr	r3, [pc, #56]	; (17a84 <LCD_setAddr+0x6c>)
   17a4c:	4798      	blx	r3
	LCD_data16(x1);
   17a4e:	1cbb      	adds	r3, r7, #2
   17a50:	881b      	ldrh	r3, [r3, #0]
   17a52:	0018      	movs	r0, r3
   17a54:	4b0b      	ldr	r3, [pc, #44]	; (17a84 <LCD_setAddr+0x6c>)
   17a56:	4798      	blx	r3
	LCD_command(ST7735_RASET); // Page
   17a58:	202b      	movs	r0, #43	; 0x2b
   17a5a:	4b09      	ldr	r3, [pc, #36]	; (17a80 <LCD_setAddr+0x68>)
   17a5c:	4798      	blx	r3
	LCD_data16(y0);
   17a5e:	1d3b      	adds	r3, r7, #4
   17a60:	881b      	ldrh	r3, [r3, #0]
   17a62:	0018      	movs	r0, r3
   17a64:	4b07      	ldr	r3, [pc, #28]	; (17a84 <LCD_setAddr+0x6c>)
   17a66:	4798      	blx	r3
	LCD_data16(y1);
   17a68:	003b      	movs	r3, r7
   17a6a:	881b      	ldrh	r3, [r3, #0]
   17a6c:	0018      	movs	r0, r3
   17a6e:	4b05      	ldr	r3, [pc, #20]	; (17a84 <LCD_setAddr+0x6c>)
   17a70:	4798      	blx	r3
	LCD_command(ST7735_RAMWR); // Into RAM
   17a72:	202c      	movs	r0, #44	; 0x2c
   17a74:	4b02      	ldr	r3, [pc, #8]	; (17a80 <LCD_setAddr+0x68>)
   17a76:	4798      	blx	r3
}
   17a78:	46c0      	nop			; (mov r8, r8)
   17a7a:	46bd      	mov	sp, r7
   17a7c:	b002      	add	sp, #8
   17a7e:	bdb0      	pop	{r4, r5, r7, pc}
   17a80:	000175e5 	.word	0x000175e5
   17a84:	0001768d 	.word	0x0001768d

00017a88 <LCD_clearScreen>:

void LCD_clearScreen(unsigned short color) {
   17a88:	b590      	push	{r4, r7, lr}
   17a8a:	b085      	sub	sp, #20
   17a8c:	af00      	add	r7, sp, #0
   17a8e:	0002      	movs	r2, r0
   17a90:	1dbb      	adds	r3, r7, #6
   17a92:	801a      	strh	r2, [r3, #0]
  int i;
  LCD_setAddr(0,0,_GRAMWIDTH,_GRAMHEIGH);
   17a94:	2380      	movs	r3, #128	; 0x80
   17a96:	22a0      	movs	r2, #160	; 0xa0
   17a98:	2100      	movs	r1, #0
   17a9a:	2000      	movs	r0, #0
   17a9c:	4c0a      	ldr	r4, [pc, #40]	; (17ac8 <LCD_clearScreen+0x40>)
   17a9e:	47a0      	blx	r4
	for (i = 0;i < _GRAMSIZE; i++){
   17aa0:	2300      	movs	r3, #0
   17aa2:	60fb      	str	r3, [r7, #12]
   17aa4:	e007      	b.n	17ab6 <LCD_clearScreen+0x2e>
		LCD_data16(color);
   17aa6:	1dbb      	adds	r3, r7, #6
   17aa8:	881b      	ldrh	r3, [r3, #0]
   17aaa:	0018      	movs	r0, r3
   17aac:	4b07      	ldr	r3, [pc, #28]	; (17acc <LCD_clearScreen+0x44>)
   17aae:	4798      	blx	r3
	for (i = 0;i < _GRAMSIZE; i++){
   17ab0:	68fb      	ldr	r3, [r7, #12]
   17ab2:	3301      	adds	r3, #1
   17ab4:	60fb      	str	r3, [r7, #12]
   17ab6:	68fb      	ldr	r3, [r7, #12]
   17ab8:	4a05      	ldr	r2, [pc, #20]	; (17ad0 <LCD_clearScreen+0x48>)
   17aba:	4293      	cmp	r3, r2
   17abc:	ddf3      	ble.n	17aa6 <LCD_clearScreen+0x1e>
	}
}
   17abe:	46c0      	nop			; (mov r8, r8)
   17ac0:	46bd      	mov	sp, r7
   17ac2:	b005      	add	sp, #20
   17ac4:	bd90      	pop	{r4, r7, pc}
   17ac6:	46c0      	nop			; (mov r8, r8)
   17ac8:	00017a19 	.word	0x00017a19
   17acc:	0001768d 	.word	0x0001768d
   17ad0:	00004fff 	.word	0x00004fff

00017ad4 <LCD_menu>:
			}
		}
}*/


void LCD_menu(bool wifistatus){
   17ad4:	b590      	push	{r4, r7, lr}
   17ad6:	b08f      	sub	sp, #60	; 0x3c
   17ad8:	af02      	add	r7, sp, #8
   17ada:	0002      	movs	r2, r0
   17adc:	1dfb      	adds	r3, r7, #7
   17ade:	701a      	strb	r2, [r3, #0]
	//LCD_clearScreen(WHITE);
	if(wifistatus)
   17ae0:	1dfb      	adds	r3, r7, #7
   17ae2:	781b      	ldrb	r3, [r3, #0]
   17ae4:	2b00      	cmp	r3, #0
   17ae6:	d008      	beq.n	17afa <LCD_menu+0x26>
	drawString(50,20,"Welcome home!",BLACK,WHITE);
   17ae8:	4a51      	ldr	r2, [pc, #324]	; (17c30 <LCD_menu+0x15c>)
   17aea:	2301      	movs	r3, #1
   17aec:	425b      	negs	r3, r3
   17aee:	9300      	str	r3, [sp, #0]
   17af0:	2300      	movs	r3, #0
   17af2:	2114      	movs	r1, #20
   17af4:	2032      	movs	r0, #50	; 0x32
   17af6:	4c4f      	ldr	r4, [pc, #316]	; (17c34 <LCD_menu+0x160>)
   17af8:	47a0      	blx	r4
	drawString(20,40,"WIFI is Connected!    ",BLUE,WHITE);
   17afa:	4a4f      	ldr	r2, [pc, #316]	; (17c38 <LCD_menu+0x164>)
   17afc:	2301      	movs	r3, #1
   17afe:	425b      	negs	r3, r3
   17b00:	9300      	str	r3, [sp, #0]
   17b02:	231f      	movs	r3, #31
   17b04:	2128      	movs	r1, #40	; 0x28
   17b06:	2014      	movs	r0, #20
   17b08:	4c4a      	ldr	r4, [pc, #296]	; (17c34 <LCD_menu+0x160>)
   17b0a:	47a0      	blx	r4
	
	if(getLock()){
   17b0c:	4b4b      	ldr	r3, [pc, #300]	; (17c3c <LCD_menu+0x168>)
   17b0e:	4798      	blx	r3
   17b10:	1e03      	subs	r3, r0, #0
   17b12:	d00a      	beq.n	17b2a <LCD_menu+0x56>
		drawString(20,60,"WatchDog Status: Locked  ",RED,WHITE);
   17b14:	494a      	ldr	r1, [pc, #296]	; (17c40 <LCD_menu+0x16c>)
   17b16:	4a4b      	ldr	r2, [pc, #300]	; (17c44 <LCD_menu+0x170>)
   17b18:	2301      	movs	r3, #1
   17b1a:	425b      	negs	r3, r3
   17b1c:	9300      	str	r3, [sp, #0]
   17b1e:	000b      	movs	r3, r1
   17b20:	213c      	movs	r1, #60	; 0x3c
   17b22:	2014      	movs	r0, #20
   17b24:	4c43      	ldr	r4, [pc, #268]	; (17c34 <LCD_menu+0x160>)
   17b26:	47a0      	blx	r4
   17b28:	e00a      	b.n	17b40 <LCD_menu+0x6c>
	}
	else{drawString(20,60,"WatchDog Status: Unlocked",GREEN,WHITE);}
   17b2a:	23fc      	movs	r3, #252	; 0xfc
   17b2c:	00d9      	lsls	r1, r3, #3
   17b2e:	4a46      	ldr	r2, [pc, #280]	; (17c48 <LCD_menu+0x174>)
   17b30:	2301      	movs	r3, #1
   17b32:	425b      	negs	r3, r3
   17b34:	9300      	str	r3, [sp, #0]
   17b36:	000b      	movs	r3, r1
   17b38:	213c      	movs	r1, #60	; 0x3c
   17b3a:	2014      	movs	r0, #20
   17b3c:	4c3d      	ldr	r4, [pc, #244]	; (17c34 <LCD_menu+0x160>)
   17b3e:	47a0      	blx	r4
	
	char buffer[20];
	memset(buffer,0,sizeof(buffer));
   17b40:	230c      	movs	r3, #12
   17b42:	18fb      	adds	r3, r7, r3
   17b44:	2214      	movs	r2, #20
   17b46:	2100      	movs	r1, #0
   17b48:	0018      	movs	r0, r3
   17b4a:	4b40      	ldr	r3, [pc, #256]	; (17c4c <LCD_menu+0x178>)
   17b4c:	4798      	blx	r3
	float temp = getTemperature();
   17b4e:	4b40      	ldr	r3, [pc, #256]	; (17c50 <LCD_menu+0x17c>)
   17b50:	4798      	blx	r3
   17b52:	1c03      	adds	r3, r0, #0
   17b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	float hum = getHumidity();
   17b56:	4b3f      	ldr	r3, [pc, #252]	; (17c54 <LCD_menu+0x180>)
   17b58:	4798      	blx	r3
   17b5a:	1c03      	adds	r3, r0, #0
   17b5c:	62bb      	str	r3, [r7, #40]	; 0x28
	float pressure = getPressure();
   17b5e:	4b3e      	ldr	r3, [pc, #248]	; (17c58 <LCD_menu+0x184>)
   17b60:	4798      	blx	r3
   17b62:	1c03      	adds	r3, r0, #0
   17b64:	627b      	str	r3, [r7, #36]	; 0x24
	int gas = getGasResistance();
   17b66:	4b3d      	ldr	r3, [pc, #244]	; (17c5c <LCD_menu+0x188>)
   17b68:	4798      	blx	r3
   17b6a:	0003      	movs	r3, r0
   17b6c:	623b      	str	r3, [r7, #32]
	snprintf(buffer,sizeof(buffer),"Temperature: %d C",(int)temp);
   17b6e:	4b3c      	ldr	r3, [pc, #240]	; (17c60 <LCD_menu+0x18c>)
   17b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17b72:	4798      	blx	r3
   17b74:	0003      	movs	r3, r0
   17b76:	4a3b      	ldr	r2, [pc, #236]	; (17c64 <LCD_menu+0x190>)
   17b78:	210c      	movs	r1, #12
   17b7a:	1878      	adds	r0, r7, r1
   17b7c:	2114      	movs	r1, #20
   17b7e:	4c3a      	ldr	r4, [pc, #232]	; (17c68 <LCD_menu+0x194>)
   17b80:	47a0      	blx	r4
	drawString(20,70,buffer,BLACK,WHITE);
   17b82:	230c      	movs	r3, #12
   17b84:	18fa      	adds	r2, r7, r3
   17b86:	2301      	movs	r3, #1
   17b88:	425b      	negs	r3, r3
   17b8a:	9300      	str	r3, [sp, #0]
   17b8c:	2300      	movs	r3, #0
   17b8e:	2146      	movs	r1, #70	; 0x46
   17b90:	2014      	movs	r0, #20
   17b92:	4c28      	ldr	r4, [pc, #160]	; (17c34 <LCD_menu+0x160>)
   17b94:	47a0      	blx	r4
	snprintf(buffer,sizeof(buffer),"Humidity: %d %%",(int)hum);
   17b96:	4b32      	ldr	r3, [pc, #200]	; (17c60 <LCD_menu+0x18c>)
   17b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17b9a:	4798      	blx	r3
   17b9c:	0003      	movs	r3, r0
   17b9e:	4a33      	ldr	r2, [pc, #204]	; (17c6c <LCD_menu+0x198>)
   17ba0:	210c      	movs	r1, #12
   17ba2:	1878      	adds	r0, r7, r1
   17ba4:	2114      	movs	r1, #20
   17ba6:	4c30      	ldr	r4, [pc, #192]	; (17c68 <LCD_menu+0x194>)
   17ba8:	47a0      	blx	r4
	drawString(20,80,buffer,BLACK,WHITE);
   17baa:	230c      	movs	r3, #12
   17bac:	18fa      	adds	r2, r7, r3
   17bae:	2301      	movs	r3, #1
   17bb0:	425b      	negs	r3, r3
   17bb2:	9300      	str	r3, [sp, #0]
   17bb4:	2300      	movs	r3, #0
   17bb6:	2150      	movs	r1, #80	; 0x50
   17bb8:	2014      	movs	r0, #20
   17bba:	4c1e      	ldr	r4, [pc, #120]	; (17c34 <LCD_menu+0x160>)
   17bbc:	47a0      	blx	r4
	snprintf(buffer,sizeof(buffer),"Pressure: %d hPa",(int)pressure);
   17bbe:	4b28      	ldr	r3, [pc, #160]	; (17c60 <LCD_menu+0x18c>)
   17bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17bc2:	4798      	blx	r3
   17bc4:	0003      	movs	r3, r0
   17bc6:	4a2a      	ldr	r2, [pc, #168]	; (17c70 <LCD_menu+0x19c>)
   17bc8:	210c      	movs	r1, #12
   17bca:	1878      	adds	r0, r7, r1
   17bcc:	2114      	movs	r1, #20
   17bce:	4c26      	ldr	r4, [pc, #152]	; (17c68 <LCD_menu+0x194>)
   17bd0:	47a0      	blx	r4
	drawString(20,90,buffer,BLACK,WHITE);
   17bd2:	230c      	movs	r3, #12
   17bd4:	18fa      	adds	r2, r7, r3
   17bd6:	2301      	movs	r3, #1
   17bd8:	425b      	negs	r3, r3
   17bda:	9300      	str	r3, [sp, #0]
   17bdc:	2300      	movs	r3, #0
   17bde:	215a      	movs	r1, #90	; 0x5a
   17be0:	2014      	movs	r0, #20
   17be2:	4c14      	ldr	r4, [pc, #80]	; (17c34 <LCD_menu+0x160>)
   17be4:	47a0      	blx	r4
	pressure = (1200 - pressure) / 1200;
   17be6:	4b23      	ldr	r3, [pc, #140]	; (17c74 <LCD_menu+0x1a0>)
   17be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17bea:	4823      	ldr	r0, [pc, #140]	; (17c78 <LCD_menu+0x1a4>)
   17bec:	4798      	blx	r3
   17bee:	1c03      	adds	r3, r0, #0
   17bf0:	1c1a      	adds	r2, r3, #0
   17bf2:	4b22      	ldr	r3, [pc, #136]	; (17c7c <LCD_menu+0x1a8>)
   17bf4:	4920      	ldr	r1, [pc, #128]	; (17c78 <LCD_menu+0x1a4>)
   17bf6:	1c10      	adds	r0, r2, #0
   17bf8:	4798      	blx	r3
   17bfa:	1c03      	adds	r3, r0, #0
   17bfc:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(buffer,sizeof(buffer),"Smoke: %d %%",(int)pressure);
   17bfe:	4b18      	ldr	r3, [pc, #96]	; (17c60 <LCD_menu+0x18c>)
   17c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17c02:	4798      	blx	r3
   17c04:	0003      	movs	r3, r0
   17c06:	4a1e      	ldr	r2, [pc, #120]	; (17c80 <LCD_menu+0x1ac>)
   17c08:	210c      	movs	r1, #12
   17c0a:	1878      	adds	r0, r7, r1
   17c0c:	2114      	movs	r1, #20
   17c0e:	4c16      	ldr	r4, [pc, #88]	; (17c68 <LCD_menu+0x194>)
   17c10:	47a0      	blx	r4
	drawString(20,100,buffer,BLACK,WHITE);
   17c12:	230c      	movs	r3, #12
   17c14:	18fa      	adds	r2, r7, r3
   17c16:	2301      	movs	r3, #1
   17c18:	425b      	negs	r3, r3
   17c1a:	9300      	str	r3, [sp, #0]
   17c1c:	2300      	movs	r3, #0
   17c1e:	2164      	movs	r1, #100	; 0x64
   17c20:	2014      	movs	r0, #20
   17c22:	4c04      	ldr	r4, [pc, #16]	; (17c34 <LCD_menu+0x160>)
   17c24:	47a0      	blx	r4
	

}
   17c26:	46c0      	nop			; (mov r8, r8)
   17c28:	46bd      	mov	sp, r7
   17c2a:	b00d      	add	sp, #52	; 0x34
   17c2c:	bd90      	pop	{r4, r7, pc}
   17c2e:	46c0      	nop			; (mov r8, r8)
   17c30:	000392f4 	.word	0x000392f4
   17c34:	00017391 	.word	0x00017391
   17c38:	00039304 	.word	0x00039304
   17c3c:	00016dad 	.word	0x00016dad
   17c40:	fffff800 	.word	0xfffff800
   17c44:	0003931c 	.word	0x0003931c
   17c48:	00039338 	.word	0x00039338
   17c4c:	0003781f 	.word	0x0003781f
   17c50:	00014bbd 	.word	0x00014bbd
   17c54:	00014bd1 	.word	0x00014bd1
   17c58:	00014be5 	.word	0x00014be5
   17c5c:	00014bf9 	.word	0x00014bf9
   17c60:	000359b1 	.word	0x000359b1
   17c64:	00039354 	.word	0x00039354
   17c68:	00037a79 	.word	0x00037a79
   17c6c:	00039368 	.word	0x00039368
   17c70:	00039378 	.word	0x00039378
   17c74:	00035679 	.word	0x00035679
   17c78:	44960000 	.word	0x44960000
   17c7c:	00035059 	.word	0x00035059
   17c80:	0003938c 	.word	0x0003938c

00017c84 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   17c84:	b580      	push	{r7, lr}
   17c86:	b082      	sub	sp, #8
   17c88:	af00      	add	r7, sp, #0
   17c8a:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   17c8c:	4b15      	ldr	r3, [pc, #84]	; (17ce4 <vUiHandlerTask+0x60>)
   17c8e:	0018      	movs	r0, r3
   17c90:	4b15      	ldr	r3, [pc, #84]	; (17ce8 <vUiHandlerTask+0x64>)
   17c92:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   17c94:	4b15      	ldr	r3, [pc, #84]	; (17cec <vUiHandlerTask+0x68>)
   17c96:	2201      	movs	r2, #1
   17c98:	701a      	strb	r2, [r3, #0]
   //configure_port_speaker_pins();
	init_bme680();
   17c9a:	4b15      	ldr	r3, [pc, #84]	; (17cf0 <vUiHandlerTask+0x6c>)
   17c9c:	4798      	blx	r3
	read_sensor_data();
   17c9e:	4b15      	ldr	r3, [pc, #84]	; (17cf4 <vUiHandlerTask+0x70>)
   17ca0:	4798      	blx	r3

		
		
		
		
	configure_port_pins();
   17ca2:	4b15      	ldr	r3, [pc, #84]	; (17cf8 <vUiHandlerTask+0x74>)
   17ca4:	4798      	blx	r3
		//servopulse(200);
		//configure_tcc();
		//setPulse(2.4);
		//lock();
		
	LCD_init();
   17ca6:	4b15      	ldr	r3, [pc, #84]	; (17cfc <vUiHandlerTask+0x78>)
   17ca8:	4798      	blx	r3
	LCD_clearScreen(WHITE);
   17caa:	4b15      	ldr	r3, [pc, #84]	; (17d00 <vUiHandlerTask+0x7c>)
   17cac:	0018      	movs	r0, r3
   17cae:	4b15      	ldr	r3, [pc, #84]	; (17d04 <vUiHandlerTask+0x80>)
   17cb0:	4798      	blx	r3
    gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
	*/

    // Here we start the loop for the UI State Machine
	  lock();
   17cb2:	4b15      	ldr	r3, [pc, #84]	; (17d08 <vUiHandlerTask+0x84>)
   17cb4:	4798      	blx	r3
	
    while (1) {
	
	  // warning_speaker();
        switch (uiState) {
   17cb6:	4b0d      	ldr	r3, [pc, #52]	; (17cec <vUiHandlerTask+0x68>)
   17cb8:	781b      	ldrb	r3, [r3, #0]
   17cba:	2b01      	cmp	r3, #1
   17cbc:	d007      	beq.n	17cce <vUiHandlerTask+0x4a>
   17cbe:	2b02      	cmp	r3, #2
   17cc0:	d007      	beq.n	17cd2 <vUiHandlerTask+0x4e>
   17cc2:	2b00      	cmp	r3, #0
   17cc4:	d007      	beq.n	17cd6 <vUiHandlerTask+0x52>
                break;
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   17cc6:	4b09      	ldr	r3, [pc, #36]	; (17cec <vUiHandlerTask+0x68>)
   17cc8:	2200      	movs	r2, #0
   17cca:	701a      	strb	r2, [r3, #0]
                break;
   17ccc:	e004      	b.n	17cd8 <vUiHandlerTask+0x54>
                break;
   17cce:	46c0      	nop			; (mov r8, r8)
   17cd0:	e002      	b.n	17cd8 <vUiHandlerTask+0x54>
                break;
   17cd2:	46c0      	nop			; (mov r8, r8)
   17cd4:	e000      	b.n	17cd8 <vUiHandlerTask+0x54>
                break;
   17cd6:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(500);
   17cd8:	23fa      	movs	r3, #250	; 0xfa
   17cda:	005b      	lsls	r3, r3, #1
   17cdc:	0018      	movs	r0, r3
   17cde:	4b0b      	ldr	r3, [pc, #44]	; (17d0c <vUiHandlerTask+0x88>)
   17ce0:	4798      	blx	r3
        switch (uiState) {
   17ce2:	e7e8      	b.n	17cb6 <vUiHandlerTask+0x32>
   17ce4:	0003939c 	.word	0x0003939c
   17ce8:	0001ffc5 	.word	0x0001ffc5
   17cec:	20004738 	.word	0x20004738
   17cf0:	00014a01 	.word	0x00014a01
   17cf4:	00014ad1 	.word	0x00014ad1
   17cf8:	0001733d 	.word	0x0001733d
   17cfc:	000176f1 	.word	0x000176f1
   17d00:	0000ffff 	.word	0x0000ffff
   17d04:	00017a89 	.word	0x00017a89
   17d08:	00016cb9 	.word	0x00016cb9
   17d0c:	0001e371 	.word	0x0001e371

00017d10 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   17d10:	b580      	push	{r7, lr}
   17d12:	b082      	sub	sp, #8
   17d14:	af00      	add	r7, sp, #0
   17d16:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   17d18:	4a08      	ldr	r2, [pc, #32]	; (17d3c <UiOrderShowMoves+0x2c>)
   17d1a:	687b      	ldr	r3, [r7, #4]
   17d1c:	0010      	movs	r0, r2
   17d1e:	0019      	movs	r1, r3
   17d20:	2314      	movs	r3, #20
   17d22:	001a      	movs	r2, r3
   17d24:	4b06      	ldr	r3, [pc, #24]	; (17d40 <UiOrderShowMoves+0x30>)
   17d26:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   17d28:	4b06      	ldr	r3, [pc, #24]	; (17d44 <UiOrderShowMoves+0x34>)
   17d2a:	2202      	movs	r2, #2
   17d2c:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   17d2e:	4b06      	ldr	r3, [pc, #24]	; (17d48 <UiOrderShowMoves+0x38>)
   17d30:	2200      	movs	r2, #0
   17d32:	701a      	strb	r2, [r3, #0]
}
   17d34:	46c0      	nop			; (mov r8, r8)
   17d36:	46bd      	mov	sp, r7
   17d38:	b002      	add	sp, #8
   17d3a:	bd80      	pop	{r7, pc}
   17d3c:	20004714 	.word	0x20004714
   17d40:	000377e9 	.word	0x000377e9
   17d44:	20004738 	.word	0x20004738
   17d48:	200004b1 	.word	0x200004b1

00017d4c <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   17d4c:	b580      	push	{r7, lr}
   17d4e:	af00      	add	r7, sp, #0
    return playIsDone;
   17d50:	4b02      	ldr	r3, [pc, #8]	; (17d5c <UiPlayIsDone+0x10>)
   17d52:	781b      	ldrb	r3, [r3, #0]
}
   17d54:	0018      	movs	r0, r3
   17d56:	46bd      	mov	sp, r7
   17d58:	bd80      	pop	{r7, pc}
   17d5a:	46c0      	nop			; (mov r8, r8)
   17d5c:	200004b1 	.word	0x200004b1

00017d60 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   17d60:	b580      	push	{r7, lr}
   17d62:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   17d64:	4b01      	ldr	r3, [pc, #4]	; (17d6c <UiGetGamePacketOut+0xc>)
}
   17d66:	0018      	movs	r0, r3
   17d68:	46bd      	mov	sp, r7
   17d6a:	bd80      	pop	{r7, pc}
   17d6c:	20004700 	.word	0x20004700

00017d70 <system_pinmux_get_group_from_gpio_pin>:
{
   17d70:	b580      	push	{r7, lr}
   17d72:	b084      	sub	sp, #16
   17d74:	af00      	add	r7, sp, #0
   17d76:	0002      	movs	r2, r0
   17d78:	1dfb      	adds	r3, r7, #7
   17d7a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17d7c:	230f      	movs	r3, #15
   17d7e:	18fb      	adds	r3, r7, r3
   17d80:	1dfa      	adds	r2, r7, #7
   17d82:	7812      	ldrb	r2, [r2, #0]
   17d84:	09d2      	lsrs	r2, r2, #7
   17d86:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17d88:	230e      	movs	r3, #14
   17d8a:	18fb      	adds	r3, r7, r3
   17d8c:	1dfa      	adds	r2, r7, #7
   17d8e:	7812      	ldrb	r2, [r2, #0]
   17d90:	0952      	lsrs	r2, r2, #5
   17d92:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   17d94:	4b0d      	ldr	r3, [pc, #52]	; (17dcc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   17d96:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   17d98:	230f      	movs	r3, #15
   17d9a:	18fb      	adds	r3, r7, r3
   17d9c:	781b      	ldrb	r3, [r3, #0]
   17d9e:	2b00      	cmp	r3, #0
   17da0:	d10f      	bne.n	17dc2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   17da2:	230f      	movs	r3, #15
   17da4:	18fb      	adds	r3, r7, r3
   17da6:	781b      	ldrb	r3, [r3, #0]
   17da8:	009b      	lsls	r3, r3, #2
   17daa:	2210      	movs	r2, #16
   17dac:	4694      	mov	ip, r2
   17dae:	44bc      	add	ip, r7
   17db0:	4463      	add	r3, ip
   17db2:	3b08      	subs	r3, #8
   17db4:	681a      	ldr	r2, [r3, #0]
   17db6:	230e      	movs	r3, #14
   17db8:	18fb      	adds	r3, r7, r3
   17dba:	781b      	ldrb	r3, [r3, #0]
   17dbc:	01db      	lsls	r3, r3, #7
   17dbe:	18d3      	adds	r3, r2, r3
   17dc0:	e000      	b.n	17dc4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   17dc2:	2300      	movs	r3, #0
}
   17dc4:	0018      	movs	r0, r3
   17dc6:	46bd      	mov	sp, r7
   17dc8:	b004      	add	sp, #16
   17dca:	bd80      	pop	{r7, pc}
   17dcc:	41004400 	.word	0x41004400

00017dd0 <port_get_group_from_gpio_pin>:
{
   17dd0:	b580      	push	{r7, lr}
   17dd2:	b082      	sub	sp, #8
   17dd4:	af00      	add	r7, sp, #0
   17dd6:	0002      	movs	r2, r0
   17dd8:	1dfb      	adds	r3, r7, #7
   17dda:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   17ddc:	1dfb      	adds	r3, r7, #7
   17dde:	781b      	ldrb	r3, [r3, #0]
   17de0:	0018      	movs	r0, r3
   17de2:	4b03      	ldr	r3, [pc, #12]	; (17df0 <port_get_group_from_gpio_pin+0x20>)
   17de4:	4798      	blx	r3
   17de6:	0003      	movs	r3, r0
}
   17de8:	0018      	movs	r0, r3
   17dea:	46bd      	mov	sp, r7
   17dec:	b002      	add	sp, #8
   17dee:	bd80      	pop	{r7, pc}
   17df0:	00017d71 	.word	0x00017d71

00017df4 <port_pin_set_output_level>:
{
   17df4:	b580      	push	{r7, lr}
   17df6:	b084      	sub	sp, #16
   17df8:	af00      	add	r7, sp, #0
   17dfa:	0002      	movs	r2, r0
   17dfc:	1dfb      	adds	r3, r7, #7
   17dfe:	701a      	strb	r2, [r3, #0]
   17e00:	1dbb      	adds	r3, r7, #6
   17e02:	1c0a      	adds	r2, r1, #0
   17e04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   17e06:	1dfb      	adds	r3, r7, #7
   17e08:	781b      	ldrb	r3, [r3, #0]
   17e0a:	0018      	movs	r0, r3
   17e0c:	4b0d      	ldr	r3, [pc, #52]	; (17e44 <port_pin_set_output_level+0x50>)
   17e0e:	4798      	blx	r3
   17e10:	0003      	movs	r3, r0
   17e12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17e14:	1dfb      	adds	r3, r7, #7
   17e16:	781b      	ldrb	r3, [r3, #0]
   17e18:	221f      	movs	r2, #31
   17e1a:	4013      	ands	r3, r2
   17e1c:	2201      	movs	r2, #1
   17e1e:	409a      	lsls	r2, r3
   17e20:	0013      	movs	r3, r2
   17e22:	60bb      	str	r3, [r7, #8]
	if (level) {
   17e24:	1dbb      	adds	r3, r7, #6
   17e26:	781b      	ldrb	r3, [r3, #0]
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d003      	beq.n	17e34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   17e2c:	68fb      	ldr	r3, [r7, #12]
   17e2e:	68ba      	ldr	r2, [r7, #8]
   17e30:	619a      	str	r2, [r3, #24]
}
   17e32:	e002      	b.n	17e3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17e34:	68fb      	ldr	r3, [r7, #12]
   17e36:	68ba      	ldr	r2, [r7, #8]
   17e38:	615a      	str	r2, [r3, #20]
}
   17e3a:	46c0      	nop			; (mov r8, r8)
   17e3c:	46bd      	mov	sp, r7
   17e3e:	b004      	add	sp, #16
   17e40:	bd80      	pop	{r7, pc}
   17e42:	46c0      	nop			; (mov r8, r8)
   17e44:	00017dd1 	.word	0x00017dd1

00017e48 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   17e48:	b580      	push	{r7, lr}
   17e4a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   17e4c:	4b02      	ldr	r3, [pc, #8]	; (17e58 <init_state+0x10>)
   17e4e:	2200      	movs	r2, #0
   17e50:	701a      	strb	r2, [r3, #0]
}
   17e52:	46c0      	nop			; (mov r8, r8)
   17e54:	46bd      	mov	sp, r7
   17e56:	bd80      	pop	{r7, pc}
   17e58:	200004c9 	.word	0x200004c9

00017e5c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   17e5c:	b580      	push	{r7, lr}
   17e5e:	b082      	sub	sp, #8
   17e60:	af00      	add	r7, sp, #0
   17e62:	0002      	movs	r2, r0
   17e64:	1dfb      	adds	r3, r7, #7
   17e66:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   17e68:	1dfb      	adds	r3, r7, #7
   17e6a:	781b      	ldrb	r3, [r3, #0]
   17e6c:	b25b      	sxtb	r3, r3
   17e6e:	43db      	mvns	r3, r3
   17e70:	b25b      	sxtb	r3, r3
   17e72:	4a06      	ldr	r2, [pc, #24]	; (17e8c <clear_state+0x30>)
   17e74:	7812      	ldrb	r2, [r2, #0]
   17e76:	b252      	sxtb	r2, r2
   17e78:	4013      	ands	r3, r2
   17e7a:	b25b      	sxtb	r3, r3
   17e7c:	b2da      	uxtb	r2, r3
   17e7e:	4b03      	ldr	r3, [pc, #12]	; (17e8c <clear_state+0x30>)
   17e80:	701a      	strb	r2, [r3, #0]
}
   17e82:	46c0      	nop			; (mov r8, r8)
   17e84:	46bd      	mov	sp, r7
   17e86:	b002      	add	sp, #8
   17e88:	bd80      	pop	{r7, pc}
   17e8a:	46c0      	nop			; (mov r8, r8)
   17e8c:	200004c9 	.word	0x200004c9

00017e90 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   17e90:	b580      	push	{r7, lr}
   17e92:	b082      	sub	sp, #8
   17e94:	af00      	add	r7, sp, #0
   17e96:	0002      	movs	r2, r0
   17e98:	1dfb      	adds	r3, r7, #7
   17e9a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   17e9c:	4b05      	ldr	r3, [pc, #20]	; (17eb4 <add_state+0x24>)
   17e9e:	781a      	ldrb	r2, [r3, #0]
   17ea0:	1dfb      	adds	r3, r7, #7
   17ea2:	781b      	ldrb	r3, [r3, #0]
   17ea4:	4313      	orrs	r3, r2
   17ea6:	b2da      	uxtb	r2, r3
   17ea8:	4b02      	ldr	r3, [pc, #8]	; (17eb4 <add_state+0x24>)
   17eaa:	701a      	strb	r2, [r3, #0]
}
   17eac:	46c0      	nop			; (mov r8, r8)
   17eae:	46bd      	mov	sp, r7
   17eb0:	b002      	add	sp, #8
   17eb2:	bd80      	pop	{r7, pc}
   17eb4:	200004c9 	.word	0x200004c9

00017eb8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   17eb8:	b580      	push	{r7, lr}
   17eba:	b082      	sub	sp, #8
   17ebc:	af00      	add	r7, sp, #0
   17ebe:	0002      	movs	r2, r0
   17ec0:	1dfb      	adds	r3, r7, #7
   17ec2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   17ec4:	4b06      	ldr	r3, [pc, #24]	; (17ee0 <is_state_set+0x28>)
   17ec6:	781b      	ldrb	r3, [r3, #0]
   17ec8:	1dfa      	adds	r2, r7, #7
   17eca:	7812      	ldrb	r2, [r2, #0]
   17ecc:	4013      	ands	r3, r2
   17ece:	b2db      	uxtb	r3, r3
   17ed0:	1e5a      	subs	r2, r3, #1
   17ed2:	4193      	sbcs	r3, r2
   17ed4:	b2db      	uxtb	r3, r3
}
   17ed6:	0018      	movs	r0, r3
   17ed8:	46bd      	mov	sp, r7
   17eda:	b002      	add	sp, #8
   17edc:	bd80      	pop	{r7, pc}
   17ede:	46c0      	nop			; (mov r8, r8)
   17ee0:	200004c9 	.word	0x200004c9

00017ee4 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   17ee4:	b590      	push	{r4, r7, lr}
   17ee6:	b085      	sub	sp, #20
   17ee8:	af00      	add	r7, sp, #0
   17eea:	6078      	str	r0, [r7, #4]
   17eec:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   17eee:	687b      	ldr	r3, [r7, #4]
   17ef0:	2b00      	cmp	r3, #0
   17ef2:	d002      	beq.n	17efa <is_exist_file+0x16>
   17ef4:	683b      	ldr	r3, [r7, #0]
   17ef6:	2b00      	cmp	r3, #0
   17ef8:	d101      	bne.n	17efe <is_exist_file+0x1a>
        return false;
   17efa:	2300      	movs	r3, #0
   17efc:	e013      	b.n	17f26 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   17efe:	230f      	movs	r3, #15
   17f00:	18fc      	adds	r4, r7, r3
   17f02:	6839      	ldr	r1, [r7, #0]
   17f04:	4b0a      	ldr	r3, [pc, #40]	; (17f30 <is_exist_file+0x4c>)
   17f06:	2200      	movs	r2, #0
   17f08:	0018      	movs	r0, r3
   17f0a:	4b0a      	ldr	r3, [pc, #40]	; (17f34 <is_exist_file+0x50>)
   17f0c:	4798      	blx	r3
   17f0e:	0003      	movs	r3, r0
   17f10:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   17f12:	4b07      	ldr	r3, [pc, #28]	; (17f30 <is_exist_file+0x4c>)
   17f14:	0018      	movs	r0, r3
   17f16:	4b08      	ldr	r3, [pc, #32]	; (17f38 <is_exist_file+0x54>)
   17f18:	4798      	blx	r3
    return (ret == FR_OK);
   17f1a:	230f      	movs	r3, #15
   17f1c:	18fb      	adds	r3, r7, r3
   17f1e:	781b      	ldrb	r3, [r3, #0]
   17f20:	425a      	negs	r2, r3
   17f22:	4153      	adcs	r3, r2
   17f24:	b2db      	uxtb	r3, r3
}
   17f26:	0018      	movs	r0, r3
   17f28:	46bd      	mov	sp, r7
   17f2a:	b005      	add	sp, #20
   17f2c:	bd90      	pop	{r4, r7, pc}
   17f2e:	46c0      	nop			; (mov r8, r8)
   17f30:	200006fc 	.word	0x200006fc
   17f34:	0002fb45 	.word	0x0002fb45
   17f38:	00030545 	.word	0x00030545

00017f3c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   17f3c:	b580      	push	{r7, lr}
   17f3e:	b09e      	sub	sp, #120	; 0x78
   17f40:	af00      	add	r7, sp, #0
   17f42:	60f8      	str	r0, [r7, #12]
   17f44:	60b9      	str	r1, [r7, #8]
   17f46:	1dfb      	adds	r3, r7, #7
   17f48:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   17f4a:	2376      	movs	r3, #118	; 0x76
   17f4c:	18fb      	adds	r3, r7, r3
   17f4e:	2201      	movs	r2, #1
   17f50:	801a      	strh	r2, [r3, #0]
   17f52:	2374      	movs	r3, #116	; 0x74
   17f54:	18fb      	adds	r3, r7, r3
   17f56:	2200      	movs	r2, #0
   17f58:	801a      	strh	r2, [r3, #0]
   17f5a:	236e      	movs	r3, #110	; 0x6e
   17f5c:	18fb      	adds	r3, r7, r3
   17f5e:	2200      	movs	r2, #0
   17f60:	801a      	strh	r2, [r3, #0]
   17f62:	2372      	movs	r3, #114	; 0x72
   17f64:	18fb      	adds	r3, r7, r3
   17f66:	2200      	movs	r2, #0
   17f68:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   17f6a:	2324      	movs	r3, #36	; 0x24
   17f6c:	18fb      	adds	r3, r7, r3
   17f6e:	0018      	movs	r0, r3
   17f70:	2341      	movs	r3, #65	; 0x41
   17f72:	001a      	movs	r2, r3
   17f74:	2100      	movs	r1, #0
   17f76:	4b92      	ldr	r3, [pc, #584]	; (181c0 <rename_to_unique+0x284>)
   17f78:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   17f7a:	2318      	movs	r3, #24
   17f7c:	18fb      	adds	r3, r7, r3
   17f7e:	0018      	movs	r0, r3
   17f80:	2309      	movs	r3, #9
   17f82:	001a      	movs	r2, r3
   17f84:	2100      	movs	r1, #0
   17f86:	4b8e      	ldr	r3, [pc, #568]	; (181c0 <rename_to_unique+0x284>)
   17f88:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   17f8a:	2314      	movs	r3, #20
   17f8c:	18fb      	adds	r3, r7, r3
   17f8e:	2200      	movs	r2, #0
   17f90:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   17f92:	2300      	movs	r3, #0
   17f94:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   17f96:	2371      	movs	r3, #113	; 0x71
   17f98:	18fb      	adds	r3, r7, r3
   17f9a:	2200      	movs	r2, #0
   17f9c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   17f9e:	68bb      	ldr	r3, [r7, #8]
   17fa0:	2b00      	cmp	r3, #0
   17fa2:	d101      	bne.n	17fa8 <rename_to_unique+0x6c>
        return false;
   17fa4:	2300      	movs	r3, #0
   17fa6:	e106      	b.n	181b6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   17fa8:	68ba      	ldr	r2, [r7, #8]
   17faa:	68fb      	ldr	r3, [r7, #12]
   17fac:	0011      	movs	r1, r2
   17fae:	0018      	movs	r0, r3
   17fb0:	4b84      	ldr	r3, [pc, #528]	; (181c4 <rename_to_unique+0x288>)
   17fb2:	4798      	blx	r3
   17fb4:	0003      	movs	r3, r0
   17fb6:	001a      	movs	r2, r3
   17fb8:	2301      	movs	r3, #1
   17fba:	4053      	eors	r3, r2
   17fbc:	b2db      	uxtb	r3, r3
   17fbe:	2b00      	cmp	r3, #0
   17fc0:	d001      	beq.n	17fc6 <rename_to_unique+0x8a>
        return true;
   17fc2:	2301      	movs	r3, #1
   17fc4:	e0f7      	b.n	181b6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   17fc6:	68bb      	ldr	r3, [r7, #8]
   17fc8:	0018      	movs	r0, r3
   17fca:	4b7f      	ldr	r3, [pc, #508]	; (181c8 <rename_to_unique+0x28c>)
   17fcc:	4798      	blx	r3
   17fce:	0003      	movs	r3, r0
   17fd0:	2b40      	cmp	r3, #64	; 0x40
   17fd2:	d901      	bls.n	17fd8 <rename_to_unique+0x9c>
        return false;
   17fd4:	2300      	movs	r3, #0
   17fd6:	e0ee      	b.n	181b6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   17fd8:	68bb      	ldr	r3, [r7, #8]
   17fda:	212e      	movs	r1, #46	; 0x2e
   17fdc:	0018      	movs	r0, r3
   17fde:	4b7b      	ldr	r3, [pc, #492]	; (181cc <rename_to_unique+0x290>)
   17fe0:	4798      	blx	r3
   17fe2:	0003      	movs	r3, r0
   17fe4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   17fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17fe8:	2b00      	cmp	r3, #0
   17fea:	d052      	beq.n	18092 <rename_to_unique+0x156>
        ext_len = strlen(p);
   17fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17fee:	0018      	movs	r0, r3
   17ff0:	4b75      	ldr	r3, [pc, #468]	; (181c8 <rename_to_unique+0x28c>)
   17ff2:	4798      	blx	r3
   17ff4:	0002      	movs	r2, r0
   17ff6:	236e      	movs	r3, #110	; 0x6e
   17ff8:	18fb      	adds	r3, r7, r3
   17ffa:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   17ffc:	236e      	movs	r3, #110	; 0x6e
   17ffe:	18fb      	adds	r3, r7, r3
   18000:	881b      	ldrh	r3, [r3, #0]
   18002:	2b07      	cmp	r3, #7
   18004:	d837      	bhi.n	18076 <rename_to_unique+0x13a>
            valid_ext = true;
   18006:	2371      	movs	r3, #113	; 0x71
   18008:	18fb      	adds	r3, r7, r3
   1800a:	2201      	movs	r2, #1
   1800c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   1800e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   18010:	2318      	movs	r3, #24
   18012:	18fb      	adds	r3, r7, r3
   18014:	0011      	movs	r1, r2
   18016:	0018      	movs	r0, r3
   18018:	4b6d      	ldr	r3, [pc, #436]	; (181d0 <rename_to_unique+0x294>)
   1801a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   1801c:	68bb      	ldr	r3, [r7, #8]
   1801e:	0018      	movs	r0, r3
   18020:	4b69      	ldr	r3, [pc, #420]	; (181c8 <rename_to_unique+0x28c>)
   18022:	4798      	blx	r3
   18024:	0002      	movs	r2, r0
   18026:	236e      	movs	r3, #110	; 0x6e
   18028:	18fb      	adds	r3, r7, r3
   1802a:	881b      	ldrh	r3, [r3, #0]
   1802c:	1ad3      	subs	r3, r2, r3
   1802e:	2b3c      	cmp	r3, #60	; 0x3c
   18030:	d911      	bls.n	18056 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   18032:	2374      	movs	r3, #116	; 0x74
   18034:	18fb      	adds	r3, r7, r3
   18036:	226e      	movs	r2, #110	; 0x6e
   18038:	18ba      	adds	r2, r7, r2
   1803a:	8812      	ldrh	r2, [r2, #0]
   1803c:	213c      	movs	r1, #60	; 0x3c
   1803e:	1a8a      	subs	r2, r1, r2
   18040:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18042:	2374      	movs	r3, #116	; 0x74
   18044:	18fb      	adds	r3, r7, r3
   18046:	881a      	ldrh	r2, [r3, #0]
   18048:	68b9      	ldr	r1, [r7, #8]
   1804a:	2324      	movs	r3, #36	; 0x24
   1804c:	18fb      	adds	r3, r7, r3
   1804e:	0018      	movs	r0, r3
   18050:	4b60      	ldr	r3, [pc, #384]	; (181d4 <rename_to_unique+0x298>)
   18052:	4798      	blx	r3
   18054:	e02a      	b.n	180ac <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   18056:	6eba      	ldr	r2, [r7, #104]	; 0x68
   18058:	68bb      	ldr	r3, [r7, #8]
   1805a:	1ad2      	subs	r2, r2, r3
   1805c:	2374      	movs	r3, #116	; 0x74
   1805e:	18fb      	adds	r3, r7, r3
   18060:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18062:	2374      	movs	r3, #116	; 0x74
   18064:	18fb      	adds	r3, r7, r3
   18066:	881a      	ldrh	r2, [r3, #0]
   18068:	68b9      	ldr	r1, [r7, #8]
   1806a:	2324      	movs	r3, #36	; 0x24
   1806c:	18fb      	adds	r3, r7, r3
   1806e:	0018      	movs	r0, r3
   18070:	4b58      	ldr	r3, [pc, #352]	; (181d4 <rename_to_unique+0x298>)
   18072:	4798      	blx	r3
   18074:	e01a      	b.n	180ac <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   18076:	2374      	movs	r3, #116	; 0x74
   18078:	18fb      	adds	r3, r7, r3
   1807a:	223c      	movs	r2, #60	; 0x3c
   1807c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   1807e:	2374      	movs	r3, #116	; 0x74
   18080:	18fb      	adds	r3, r7, r3
   18082:	881a      	ldrh	r2, [r3, #0]
   18084:	68b9      	ldr	r1, [r7, #8]
   18086:	2324      	movs	r3, #36	; 0x24
   18088:	18fb      	adds	r3, r7, r3
   1808a:	0018      	movs	r0, r3
   1808c:	4b51      	ldr	r3, [pc, #324]	; (181d4 <rename_to_unique+0x298>)
   1808e:	4798      	blx	r3
   18090:	e00c      	b.n	180ac <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   18092:	2374      	movs	r3, #116	; 0x74
   18094:	18fb      	adds	r3, r7, r3
   18096:	223c      	movs	r2, #60	; 0x3c
   18098:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   1809a:	2374      	movs	r3, #116	; 0x74
   1809c:	18fb      	adds	r3, r7, r3
   1809e:	881a      	ldrh	r2, [r3, #0]
   180a0:	68b9      	ldr	r1, [r7, #8]
   180a2:	2324      	movs	r3, #36	; 0x24
   180a4:	18fb      	adds	r3, r7, r3
   180a6:	0018      	movs	r0, r3
   180a8:	4b4a      	ldr	r3, [pc, #296]	; (181d4 <rename_to_unique+0x298>)
   180aa:	4798      	blx	r3
    }

    name[name_len++] = '-';
   180ac:	2374      	movs	r3, #116	; 0x74
   180ae:	18fb      	adds	r3, r7, r3
   180b0:	881b      	ldrh	r3, [r3, #0]
   180b2:	2274      	movs	r2, #116	; 0x74
   180b4:	18ba      	adds	r2, r7, r2
   180b6:	1c59      	adds	r1, r3, #1
   180b8:	8011      	strh	r1, [r2, #0]
   180ba:	001a      	movs	r2, r3
   180bc:	2324      	movs	r3, #36	; 0x24
   180be:	18fb      	adds	r3, r7, r3
   180c0:	212d      	movs	r1, #45	; 0x2d
   180c2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   180c4:	2376      	movs	r3, #118	; 0x76
   180c6:	18fb      	adds	r3, r7, r3
   180c8:	2200      	movs	r2, #0
   180ca:	801a      	strh	r2, [r3, #0]
   180cc:	2372      	movs	r3, #114	; 0x72
   180ce:	18fb      	adds	r3, r7, r3
   180d0:	2201      	movs	r2, #1
   180d2:	801a      	strh	r2, [r3, #0]
   180d4:	e010      	b.n	180f8 <rename_to_unique+0x1bc>
        count *= 10;
   180d6:	2372      	movs	r3, #114	; 0x72
   180d8:	18fa      	adds	r2, r7, r3
   180da:	2372      	movs	r3, #114	; 0x72
   180dc:	18fb      	adds	r3, r7, r3
   180de:	881b      	ldrh	r3, [r3, #0]
   180e0:	1c19      	adds	r1, r3, #0
   180e2:	0089      	lsls	r1, r1, #2
   180e4:	18cb      	adds	r3, r1, r3
   180e6:	18db      	adds	r3, r3, r3
   180e8:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   180ea:	2376      	movs	r3, #118	; 0x76
   180ec:	18fb      	adds	r3, r7, r3
   180ee:	881a      	ldrh	r2, [r3, #0]
   180f0:	2376      	movs	r3, #118	; 0x76
   180f2:	18fb      	adds	r3, r7, r3
   180f4:	3201      	adds	r2, #1
   180f6:	801a      	strh	r2, [r3, #0]
   180f8:	2376      	movs	r3, #118	; 0x76
   180fa:	18fb      	adds	r3, r7, r3
   180fc:	881b      	ldrh	r3, [r3, #0]
   180fe:	2b02      	cmp	r3, #2
   18100:	d9e9      	bls.n	180d6 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   18102:	2376      	movs	r3, #118	; 0x76
   18104:	18fb      	adds	r3, r7, r3
   18106:	2201      	movs	r2, #1
   18108:	801a      	strh	r2, [r3, #0]
   1810a:	e04b      	b.n	181a4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   1810c:	2376      	movs	r3, #118	; 0x76
   1810e:	18fb      	adds	r3, r7, r3
   18110:	881a      	ldrh	r2, [r3, #0]
   18112:	4931      	ldr	r1, [pc, #196]	; (181d8 <rename_to_unique+0x29c>)
   18114:	2314      	movs	r3, #20
   18116:	18fb      	adds	r3, r7, r3
   18118:	0018      	movs	r0, r3
   1811a:	4b30      	ldr	r3, [pc, #192]	; (181dc <rename_to_unique+0x2a0>)
   1811c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   1811e:	2374      	movs	r3, #116	; 0x74
   18120:	18fb      	adds	r3, r7, r3
   18122:	881b      	ldrh	r3, [r3, #0]
   18124:	2224      	movs	r2, #36	; 0x24
   18126:	18ba      	adds	r2, r7, r2
   18128:	18d3      	adds	r3, r2, r3
   1812a:	2214      	movs	r2, #20
   1812c:	18b9      	adds	r1, r7, r2
   1812e:	2203      	movs	r2, #3
   18130:	0018      	movs	r0, r3
   18132:	4b28      	ldr	r3, [pc, #160]	; (181d4 <rename_to_unique+0x298>)
   18134:	4798      	blx	r3
        if (valid_ext) {
   18136:	2371      	movs	r3, #113	; 0x71
   18138:	18fb      	adds	r3, r7, r3
   1813a:	781b      	ldrb	r3, [r3, #0]
   1813c:	2b00      	cmp	r3, #0
   1813e:	d00c      	beq.n	1815a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   18140:	2374      	movs	r3, #116	; 0x74
   18142:	18fb      	adds	r3, r7, r3
   18144:	881b      	ldrh	r3, [r3, #0]
   18146:	3303      	adds	r3, #3
   18148:	2224      	movs	r2, #36	; 0x24
   1814a:	18ba      	adds	r2, r7, r2
   1814c:	18d3      	adds	r3, r2, r3
   1814e:	2218      	movs	r2, #24
   18150:	18ba      	adds	r2, r7, r2
   18152:	0011      	movs	r1, r2
   18154:	0018      	movs	r0, r3
   18156:	4b1e      	ldr	r3, [pc, #120]	; (181d0 <rename_to_unique+0x294>)
   18158:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1815a:	2324      	movs	r3, #36	; 0x24
   1815c:	18fa      	adds	r2, r7, r3
   1815e:	68fb      	ldr	r3, [r7, #12]
   18160:	0011      	movs	r1, r2
   18162:	0018      	movs	r0, r3
   18164:	4b17      	ldr	r3, [pc, #92]	; (181c4 <rename_to_unique+0x288>)
   18166:	4798      	blx	r3
   18168:	0003      	movs	r3, r0
   1816a:	001a      	movs	r2, r3
   1816c:	2301      	movs	r3, #1
   1816e:	4053      	eors	r3, r2
   18170:	b2db      	uxtb	r3, r3
   18172:	2b00      	cmp	r3, #0
   18174:	d00f      	beq.n	18196 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   18176:	1dfb      	adds	r3, r7, #7
   18178:	781a      	ldrb	r2, [r3, #0]
   1817a:	68bb      	ldr	r3, [r7, #8]
   1817c:	2100      	movs	r1, #0
   1817e:	0018      	movs	r0, r3
   18180:	4b0f      	ldr	r3, [pc, #60]	; (181c0 <rename_to_unique+0x284>)
   18182:	4798      	blx	r3
            strcpy(file_path_name, name);
   18184:	2324      	movs	r3, #36	; 0x24
   18186:	18fa      	adds	r2, r7, r3
   18188:	68bb      	ldr	r3, [r7, #8]
   1818a:	0011      	movs	r1, r2
   1818c:	0018      	movs	r0, r3
   1818e:	4b10      	ldr	r3, [pc, #64]	; (181d0 <rename_to_unique+0x294>)
   18190:	4798      	blx	r3
            return true;
   18192:	2301      	movs	r3, #1
   18194:	e00f      	b.n	181b6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   18196:	2376      	movs	r3, #118	; 0x76
   18198:	18fb      	adds	r3, r7, r3
   1819a:	881a      	ldrh	r2, [r3, #0]
   1819c:	2376      	movs	r3, #118	; 0x76
   1819e:	18fb      	adds	r3, r7, r3
   181a0:	3201      	adds	r2, #1
   181a2:	801a      	strh	r2, [r3, #0]
   181a4:	2376      	movs	r3, #118	; 0x76
   181a6:	18fa      	adds	r2, r7, r3
   181a8:	2372      	movs	r3, #114	; 0x72
   181aa:	18fb      	adds	r3, r7, r3
   181ac:	8812      	ldrh	r2, [r2, #0]
   181ae:	881b      	ldrh	r3, [r3, #0]
   181b0:	429a      	cmp	r2, r3
   181b2:	d3ab      	bcc.n	1810c <rename_to_unique+0x1d0>
        }
    }
    return false;
   181b4:	2300      	movs	r3, #0
}
   181b6:	0018      	movs	r0, r3
   181b8:	46bd      	mov	sp, r7
   181ba:	b01e      	add	sp, #120	; 0x78
   181bc:	bd80      	pop	{r7, pc}
   181be:	46c0      	nop			; (mov r8, r8)
   181c0:	0003781f 	.word	0x0003781f
   181c4:	00017ee5 	.word	0x00017ee5
   181c8:	00037bd7 	.word	0x00037bd7
   181cc:	00037c31 	.word	0x00037c31
   181d0:	00037b8b 	.word	0x00037b8b
   181d4:	00037c07 	.word	0x00037c07
   181d8:	000393c4 	.word	0x000393c4
   181dc:	00037add 	.word	0x00037add

000181e0 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   181e0:	b590      	push	{r4, r7, lr}
   181e2:	b083      	sub	sp, #12
   181e4:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   181e6:	2001      	movs	r0, #1
   181e8:	4b22      	ldr	r3, [pc, #136]	; (18274 <start_download+0x94>)
   181ea:	4798      	blx	r3
   181ec:	0003      	movs	r3, r0
   181ee:	001a      	movs	r2, r3
   181f0:	2301      	movs	r3, #1
   181f2:	4053      	eors	r3, r2
   181f4:	b2db      	uxtb	r3, r3
   181f6:	2b00      	cmp	r3, #0
   181f8:	d005      	beq.n	18206 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   181fa:	4b1f      	ldr	r3, [pc, #124]	; (18278 <start_download+0x98>)
   181fc:	0019      	movs	r1, r3
   181fe:	2001      	movs	r0, #1
   18200:	4b1e      	ldr	r3, [pc, #120]	; (1827c <start_download+0x9c>)
   18202:	4798      	blx	r3
        return;
   18204:	e032      	b.n	1826c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   18206:	2002      	movs	r0, #2
   18208:	4b1a      	ldr	r3, [pc, #104]	; (18274 <start_download+0x94>)
   1820a:	4798      	blx	r3
   1820c:	0003      	movs	r3, r0
   1820e:	001a      	movs	r2, r3
   18210:	2301      	movs	r3, #1
   18212:	4053      	eors	r3, r2
   18214:	b2db      	uxtb	r3, r3
   18216:	2b00      	cmp	r3, #0
   18218:	d005      	beq.n	18226 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1821a:	4b19      	ldr	r3, [pc, #100]	; (18280 <start_download+0xa0>)
   1821c:	0019      	movs	r1, r3
   1821e:	2001      	movs	r0, #1
   18220:	4b16      	ldr	r3, [pc, #88]	; (1827c <start_download+0x9c>)
   18222:	4798      	blx	r3
        return;
   18224:	e022      	b.n	1826c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   18226:	2004      	movs	r0, #4
   18228:	4b12      	ldr	r3, [pc, #72]	; (18274 <start_download+0x94>)
   1822a:	4798      	blx	r3
   1822c:	1e03      	subs	r3, r0, #0
   1822e:	d005      	beq.n	1823c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   18230:	4b14      	ldr	r3, [pc, #80]	; (18284 <start_download+0xa4>)
   18232:	0019      	movs	r1, r3
   18234:	2001      	movs	r0, #1
   18236:	4b11      	ldr	r3, [pc, #68]	; (1827c <start_download+0x9c>)
   18238:	4798      	blx	r3
        return;
   1823a:	e017      	b.n	1826c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   1823c:	2008      	movs	r0, #8
   1823e:	4b0d      	ldr	r3, [pc, #52]	; (18274 <start_download+0x94>)
   18240:	4798      	blx	r3
   18242:	1e03      	subs	r3, r0, #0
   18244:	d005      	beq.n	18252 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   18246:	4b10      	ldr	r3, [pc, #64]	; (18288 <start_download+0xa8>)
   18248:	0019      	movs	r1, r3
   1824a:	2001      	movs	r0, #1
   1824c:	4b0b      	ldr	r3, [pc, #44]	; (1827c <start_download+0x9c>)
   1824e:	4798      	blx	r3
        return;
   18250:	e00c      	b.n	1826c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   18252:	4b0e      	ldr	r3, [pc, #56]	; (1828c <start_download+0xac>)
   18254:	0019      	movs	r1, r3
   18256:	2001      	movs	r0, #1
   18258:	4b08      	ldr	r3, [pc, #32]	; (1827c <start_download+0x9c>)
   1825a:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   1825c:	490c      	ldr	r1, [pc, #48]	; (18290 <start_download+0xb0>)
   1825e:	480d      	ldr	r0, [pc, #52]	; (18294 <start_download+0xb4>)
   18260:	2300      	movs	r3, #0
   18262:	9300      	str	r3, [sp, #0]
   18264:	2300      	movs	r3, #0
   18266:	2201      	movs	r2, #1
   18268:	4c0b      	ldr	r4, [pc, #44]	; (18298 <start_download+0xb8>)
   1826a:	47a0      	blx	r4
}
   1826c:	46bd      	mov	sp, r7
   1826e:	b001      	add	sp, #4
   18270:	bd90      	pop	{r4, r7, pc}
   18272:	46c0      	nop			; (mov r8, r8)
   18274:	00017eb9 	.word	0x00017eb9
   18278:	000393cc 	.word	0x000393cc
   1827c:	000200b1 	.word	0x000200b1
   18280:	000393f8 	.word	0x000393f8
   18284:	00039424 	.word	0x00039424
   18288:	00039450 	.word	0x00039450
   1828c:	0003947c 	.word	0x0003947c
   18290:	000394a8 	.word	0x000394a8
   18294:	20004794 	.word	0x20004794
   18298:	00033199 	.word	0x00033199

0001829c <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   1829c:	b5b0      	push	{r4, r5, r7, lr}
   1829e:	b086      	sub	sp, #24
   182a0:	af00      	add	r7, sp, #0
   182a2:	6078      	str	r0, [r7, #4]
   182a4:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   182a6:	687b      	ldr	r3, [r7, #4]
   182a8:	2b00      	cmp	r3, #0
   182aa:	d002      	beq.n	182b2 <store_file_packet+0x16>
   182ac:	683b      	ldr	r3, [r7, #0]
   182ae:	2b00      	cmp	r3, #0
   182b0:	d105      	bne.n	182be <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   182b2:	4b58      	ldr	r3, [pc, #352]	; (18414 <store_file_packet+0x178>)
   182b4:	0019      	movs	r1, r3
   182b6:	2001      	movs	r0, #1
   182b8:	4b57      	ldr	r3, [pc, #348]	; (18418 <store_file_packet+0x17c>)
   182ba:	4798      	blx	r3
        return;
   182bc:	e0a6      	b.n	1840c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   182be:	2008      	movs	r0, #8
   182c0:	4b56      	ldr	r3, [pc, #344]	; (1841c <store_file_packet+0x180>)
   182c2:	4798      	blx	r3
   182c4:	0003      	movs	r3, r0
   182c6:	001a      	movs	r2, r3
   182c8:	2301      	movs	r3, #1
   182ca:	4053      	eors	r3, r2
   182cc:	b2db      	uxtb	r3, r3
   182ce:	2b00      	cmp	r3, #0
   182d0:	d055      	beq.n	1837e <store_file_packet+0xe2>
        char *cp = NULL;
   182d2:	2300      	movs	r3, #0
   182d4:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   182d6:	4b52      	ldr	r3, [pc, #328]	; (18420 <store_file_packet+0x184>)
   182d8:	2230      	movs	r2, #48	; 0x30
   182da:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   182dc:	4b50      	ldr	r3, [pc, #320]	; (18420 <store_file_packet+0x184>)
   182de:	223a      	movs	r2, #58	; 0x3a
   182e0:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   182e2:	4b50      	ldr	r3, [pc, #320]	; (18424 <store_file_packet+0x188>)
   182e4:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   182e6:	e002      	b.n	182ee <store_file_packet+0x52>
            cp--;
   182e8:	697b      	ldr	r3, [r7, #20]
   182ea:	3b01      	subs	r3, #1
   182ec:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   182ee:	697b      	ldr	r3, [r7, #20]
   182f0:	781b      	ldrb	r3, [r3, #0]
   182f2:	2b2f      	cmp	r3, #47	; 0x2f
   182f4:	d1f8      	bne.n	182e8 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   182f6:	697b      	ldr	r3, [r7, #20]
   182f8:	0018      	movs	r0, r3
   182fa:	4b4b      	ldr	r3, [pc, #300]	; (18428 <store_file_packet+0x18c>)
   182fc:	4798      	blx	r3
   182fe:	0003      	movs	r3, r0
   18300:	2b01      	cmp	r3, #1
   18302:	d924      	bls.n	1834e <store_file_packet+0xb2>
            cp++;
   18304:	697b      	ldr	r3, [r7, #20]
   18306:	3301      	adds	r3, #1
   18308:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1830a:	697a      	ldr	r2, [r7, #20]
   1830c:	4b47      	ldr	r3, [pc, #284]	; (1842c <store_file_packet+0x190>)
   1830e:	0011      	movs	r1, r2
   18310:	0018      	movs	r0, r3
   18312:	4b47      	ldr	r3, [pc, #284]	; (18430 <store_file_packet+0x194>)
   18314:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   18316:	4942      	ldr	r1, [pc, #264]	; (18420 <store_file_packet+0x184>)
   18318:	4b46      	ldr	r3, [pc, #280]	; (18434 <store_file_packet+0x198>)
   1831a:	2240      	movs	r2, #64	; 0x40
   1831c:	0018      	movs	r0, r3
   1831e:	4b46      	ldr	r3, [pc, #280]	; (18438 <store_file_packet+0x19c>)
   18320:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   18322:	4a3f      	ldr	r2, [pc, #252]	; (18420 <store_file_packet+0x184>)
   18324:	4b45      	ldr	r3, [pc, #276]	; (1843c <store_file_packet+0x1a0>)
   18326:	0019      	movs	r1, r3
   18328:	2001      	movs	r0, #1
   1832a:	4b3b      	ldr	r3, [pc, #236]	; (18418 <store_file_packet+0x17c>)
   1832c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1832e:	2313      	movs	r3, #19
   18330:	18fc      	adds	r4, r7, r3
   18332:	493b      	ldr	r1, [pc, #236]	; (18420 <store_file_packet+0x184>)
   18334:	4b3f      	ldr	r3, [pc, #252]	; (18434 <store_file_packet+0x198>)
   18336:	220a      	movs	r2, #10
   18338:	0018      	movs	r0, r3
   1833a:	4b41      	ldr	r3, [pc, #260]	; (18440 <store_file_packet+0x1a4>)
   1833c:	4798      	blx	r3
   1833e:	0003      	movs	r3, r0
   18340:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   18342:	2313      	movs	r3, #19
   18344:	18fb      	adds	r3, r7, r3
   18346:	781b      	ldrb	r3, [r3, #0]
   18348:	2b00      	cmp	r3, #0
   1834a:	d012      	beq.n	18372 <store_file_packet+0xd6>
   1834c:	e008      	b.n	18360 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   1834e:	4b3d      	ldr	r3, [pc, #244]	; (18444 <store_file_packet+0x1a8>)
   18350:	0019      	movs	r1, r3
   18352:	2001      	movs	r0, #1
   18354:	4b30      	ldr	r3, [pc, #192]	; (18418 <store_file_packet+0x17c>)
   18356:	4798      	blx	r3
            add_state(CANCELED);
   18358:	2020      	movs	r0, #32
   1835a:	4b3b      	ldr	r3, [pc, #236]	; (18448 <store_file_packet+0x1ac>)
   1835c:	4798      	blx	r3
            return;
   1835e:	e055      	b.n	1840c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   18360:	2313      	movs	r3, #19
   18362:	18fb      	adds	r3, r7, r3
   18364:	781a      	ldrb	r2, [r3, #0]
   18366:	4b39      	ldr	r3, [pc, #228]	; (1844c <store_file_packet+0x1b0>)
   18368:	0019      	movs	r1, r3
   1836a:	2001      	movs	r0, #1
   1836c:	4b2a      	ldr	r3, [pc, #168]	; (18418 <store_file_packet+0x17c>)
   1836e:	4798      	blx	r3
            return;
   18370:	e04c      	b.n	1840c <store_file_packet+0x170>
        }

        received_file_size = 0;
   18372:	4b37      	ldr	r3, [pc, #220]	; (18450 <store_file_packet+0x1b4>)
   18374:	2200      	movs	r2, #0
   18376:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   18378:	2008      	movs	r0, #8
   1837a:	4b33      	ldr	r3, [pc, #204]	; (18448 <store_file_packet+0x1ac>)
   1837c:	4798      	blx	r3
    }

    if (data != NULL) {
   1837e:	687b      	ldr	r3, [r7, #4]
   18380:	2b00      	cmp	r3, #0
   18382:	d043      	beq.n	1840c <store_file_packet+0x170>
        UINT wsize = 0;
   18384:	2300      	movs	r3, #0
   18386:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   18388:	2313      	movs	r3, #19
   1838a:	18fc      	adds	r4, r7, r3
   1838c:	230c      	movs	r3, #12
   1838e:	18fb      	adds	r3, r7, r3
   18390:	683a      	ldr	r2, [r7, #0]
   18392:	6879      	ldr	r1, [r7, #4]
   18394:	4827      	ldr	r0, [pc, #156]	; (18434 <store_file_packet+0x198>)
   18396:	4d2f      	ldr	r5, [pc, #188]	; (18454 <store_file_packet+0x1b8>)
   18398:	47a8      	blx	r5
   1839a:	0003      	movs	r3, r0
   1839c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1839e:	2313      	movs	r3, #19
   183a0:	18fb      	adds	r3, r7, r3
   183a2:	781b      	ldrb	r3, [r3, #0]
   183a4:	2b00      	cmp	r3, #0
   183a6:	d00c      	beq.n	183c2 <store_file_packet+0x126>
            f_close(&file_object);
   183a8:	4b22      	ldr	r3, [pc, #136]	; (18434 <store_file_packet+0x198>)
   183aa:	0018      	movs	r0, r3
   183ac:	4b2a      	ldr	r3, [pc, #168]	; (18458 <store_file_packet+0x1bc>)
   183ae:	4798      	blx	r3
            add_state(CANCELED);
   183b0:	2020      	movs	r0, #32
   183b2:	4b25      	ldr	r3, [pc, #148]	; (18448 <store_file_packet+0x1ac>)
   183b4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   183b6:	4b29      	ldr	r3, [pc, #164]	; (1845c <store_file_packet+0x1c0>)
   183b8:	0019      	movs	r1, r3
   183ba:	2001      	movs	r0, #1
   183bc:	4b16      	ldr	r3, [pc, #88]	; (18418 <store_file_packet+0x17c>)
   183be:	4798      	blx	r3
            return;
   183c0:	e024      	b.n	1840c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   183c2:	4b23      	ldr	r3, [pc, #140]	; (18450 <store_file_packet+0x1b4>)
   183c4:	681a      	ldr	r2, [r3, #0]
   183c6:	68fb      	ldr	r3, [r7, #12]
   183c8:	18d2      	adds	r2, r2, r3
   183ca:	4b21      	ldr	r3, [pc, #132]	; (18450 <store_file_packet+0x1b4>)
   183cc:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   183ce:	4b20      	ldr	r3, [pc, #128]	; (18450 <store_file_packet+0x1b4>)
   183d0:	681a      	ldr	r2, [r3, #0]
   183d2:	4b23      	ldr	r3, [pc, #140]	; (18460 <store_file_packet+0x1c4>)
   183d4:	681b      	ldr	r3, [r3, #0]
   183d6:	4923      	ldr	r1, [pc, #140]	; (18464 <store_file_packet+0x1c8>)
   183d8:	2001      	movs	r0, #1
   183da:	4c0f      	ldr	r4, [pc, #60]	; (18418 <store_file_packet+0x17c>)
   183dc:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   183de:	4b1c      	ldr	r3, [pc, #112]	; (18450 <store_file_packet+0x1b4>)
   183e0:	681a      	ldr	r2, [r3, #0]
   183e2:	4b1f      	ldr	r3, [pc, #124]	; (18460 <store_file_packet+0x1c4>)
   183e4:	681b      	ldr	r3, [r3, #0]
   183e6:	429a      	cmp	r2, r3
   183e8:	d310      	bcc.n	1840c <store_file_packet+0x170>
            f_close(&file_object);
   183ea:	4b12      	ldr	r3, [pc, #72]	; (18434 <store_file_packet+0x198>)
   183ec:	0018      	movs	r0, r3
   183ee:	4b1a      	ldr	r3, [pc, #104]	; (18458 <store_file_packet+0x1bc>)
   183f0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   183f2:	4b1d      	ldr	r3, [pc, #116]	; (18468 <store_file_packet+0x1cc>)
   183f4:	0019      	movs	r1, r3
   183f6:	2001      	movs	r0, #1
   183f8:	4b07      	ldr	r3, [pc, #28]	; (18418 <store_file_packet+0x17c>)
   183fa:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   183fc:	2100      	movs	r1, #0
   183fe:	2017      	movs	r0, #23
   18400:	4b1a      	ldr	r3, [pc, #104]	; (1846c <store_file_packet+0x1d0>)
   18402:	4798      	blx	r3
            add_state(COMPLETED);
   18404:	2010      	movs	r0, #16
   18406:	4b10      	ldr	r3, [pc, #64]	; (18448 <store_file_packet+0x1ac>)
   18408:	4798      	blx	r3
            return;
   1840a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1840c:	46bd      	mov	sp, r7
   1840e:	b006      	add	sp, #24
   18410:	bdb0      	pop	{r4, r5, r7, pc}
   18412:	46c0      	nop			; (mov r8, r8)
   18414:	000394d4 	.word	0x000394d4
   18418:	000200b1 	.word	0x000200b1
   1841c:	00017eb9 	.word	0x00017eb9
   18420:	200000b0 	.word	0x200000b0
   18424:	000394d0 	.word	0x000394d0
   18428:	00037bd7 	.word	0x00037bd7
   1842c:	200000b2 	.word	0x200000b2
   18430:	00037b8b 	.word	0x00037b8b
   18434:	200006fc 	.word	0x200006fc
   18438:	00017f3d 	.word	0x00017f3d
   1843c:	00039538 	.word	0x00039538
   18440:	0002fb45 	.word	0x0002fb45
   18444:	000394f8 	.word	0x000394f8
   18448:	00017e91 	.word	0x00017e91
   1844c:	00039560 	.word	0x00039560
   18450:	20000724 	.word	0x20000724
   18454:	00030075 	.word	0x00030075
   18458:	00030545 	.word	0x00030545
   1845c:	00039594 	.word	0x00039594
   18460:	20000720 	.word	0x20000720
   18464:	000395d0 	.word	0x000395d0
   18468:	00039604 	.word	0x00039604
   1846c:	00017df5 	.word	0x00017df5

00018470 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   18470:	b590      	push	{r4, r7, lr}
   18472:	b085      	sub	sp, #20
   18474:	af00      	add	r7, sp, #0
   18476:	60f8      	str	r0, [r7, #12]
   18478:	60b9      	str	r1, [r7, #8]
   1847a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1847c:	68bb      	ldr	r3, [r7, #8]
   1847e:	2b04      	cmp	r3, #4
   18480:	d900      	bls.n	18484 <http_client_callback+0x14>
   18482:	e077      	b.n	18574 <http_client_callback+0x104>
   18484:	68bb      	ldr	r3, [r7, #8]
   18486:	009a      	lsls	r2, r3, #2
   18488:	4b3c      	ldr	r3, [pc, #240]	; (1857c <http_client_callback+0x10c>)
   1848a:	18d3      	adds	r3, r2, r3
   1848c:	681b      	ldr	r3, [r3, #0]
   1848e:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   18490:	4b3b      	ldr	r3, [pc, #236]	; (18580 <http_client_callback+0x110>)
   18492:	0019      	movs	r1, r3
   18494:	2001      	movs	r0, #1
   18496:	4b3b      	ldr	r3, [pc, #236]	; (18584 <http_client_callback+0x114>)
   18498:	4798      	blx	r3
            break;
   1849a:	e06b      	b.n	18574 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   1849c:	4b3a      	ldr	r3, [pc, #232]	; (18588 <http_client_callback+0x118>)
   1849e:	0019      	movs	r1, r3
   184a0:	2001      	movs	r0, #1
   184a2:	4b38      	ldr	r3, [pc, #224]	; (18584 <http_client_callback+0x114>)
   184a4:	4798      	blx	r3
            add_state(GET_REQUESTED);
   184a6:	2004      	movs	r0, #4
   184a8:	4b38      	ldr	r3, [pc, #224]	; (1858c <http_client_callback+0x11c>)
   184aa:	4798      	blx	r3
            break;
   184ac:	e062      	b.n	18574 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   184ae:	687b      	ldr	r3, [r7, #4]
   184b0:	881b      	ldrh	r3, [r3, #0]
   184b2:	001a      	movs	r2, r3
   184b4:	687b      	ldr	r3, [r7, #4]
   184b6:	685b      	ldr	r3, [r3, #4]
   184b8:	4935      	ldr	r1, [pc, #212]	; (18590 <http_client_callback+0x120>)
   184ba:	2001      	movs	r0, #1
   184bc:	4c31      	ldr	r4, [pc, #196]	; (18584 <http_client_callback+0x114>)
   184be:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   184c0:	687b      	ldr	r3, [r7, #4]
   184c2:	881b      	ldrh	r3, [r3, #0]
   184c4:	2bc8      	cmp	r3, #200	; 0xc8
   184c6:	d10d      	bne.n	184e4 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   184c8:	687b      	ldr	r3, [r7, #4]
   184ca:	685a      	ldr	r2, [r3, #4]
   184cc:	4b31      	ldr	r3, [pc, #196]	; (18594 <http_client_callback+0x124>)
   184ce:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   184d0:	4b31      	ldr	r3, [pc, #196]	; (18598 <http_client_callback+0x128>)
   184d2:	2200      	movs	r2, #0
   184d4:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   184d6:	687b      	ldr	r3, [r7, #4]
   184d8:	685a      	ldr	r2, [r3, #4]
   184da:	2380      	movs	r3, #128	; 0x80
   184dc:	009b      	lsls	r3, r3, #2
   184de:	429a      	cmp	r2, r3
   184e0:	d843      	bhi.n	1856a <http_client_callback+0xfa>
   184e2:	e003      	b.n	184ec <http_client_callback+0x7c>
                add_state(CANCELED);
   184e4:	2020      	movs	r0, #32
   184e6:	4b29      	ldr	r3, [pc, #164]	; (1858c <http_client_callback+0x11c>)
   184e8:	4798      	blx	r3
                return;
   184ea:	e043      	b.n	18574 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   184ec:	687b      	ldr	r3, [r7, #4]
   184ee:	689a      	ldr	r2, [r3, #8]
   184f0:	687b      	ldr	r3, [r7, #4]
   184f2:	685b      	ldr	r3, [r3, #4]
   184f4:	0019      	movs	r1, r3
   184f6:	0010      	movs	r0, r2
   184f8:	4b28      	ldr	r3, [pc, #160]	; (1859c <http_client_callback+0x12c>)
   184fa:	4798      	blx	r3
                add_state(COMPLETED);
   184fc:	2010      	movs	r0, #16
   184fe:	4b23      	ldr	r3, [pc, #140]	; (1858c <http_client_callback+0x11c>)
   18500:	4798      	blx	r3
            }
            break;
   18502:	e032      	b.n	1856a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   18504:	687b      	ldr	r3, [r7, #4]
   18506:	685a      	ldr	r2, [r3, #4]
   18508:	687b      	ldr	r3, [r7, #4]
   1850a:	681b      	ldr	r3, [r3, #0]
   1850c:	0019      	movs	r1, r3
   1850e:	0010      	movs	r0, r2
   18510:	4b22      	ldr	r3, [pc, #136]	; (1859c <http_client_callback+0x12c>)
   18512:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   18514:	687b      	ldr	r3, [r7, #4]
   18516:	7a1b      	ldrb	r3, [r3, #8]
   18518:	2b00      	cmp	r3, #0
   1851a:	d028      	beq.n	1856e <http_client_callback+0xfe>
                add_state(COMPLETED);
   1851c:	2010      	movs	r0, #16
   1851e:	4b1b      	ldr	r3, [pc, #108]	; (1858c <http_client_callback+0x11c>)
   18520:	4798      	blx	r3
            }

            break;
   18522:	e024      	b.n	1856e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   18524:	687b      	ldr	r3, [r7, #4]
   18526:	681a      	ldr	r2, [r3, #0]
   18528:	4b1d      	ldr	r3, [pc, #116]	; (185a0 <http_client_callback+0x130>)
   1852a:	0019      	movs	r1, r3
   1852c:	2001      	movs	r0, #1
   1852e:	4b15      	ldr	r3, [pc, #84]	; (18584 <http_client_callback+0x114>)
   18530:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   18532:	687b      	ldr	r3, [r7, #4]
   18534:	681b      	ldr	r3, [r3, #0]
   18536:	330b      	adds	r3, #11
   18538:	d11b      	bne.n	18572 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1853a:	2008      	movs	r0, #8
   1853c:	4b19      	ldr	r3, [pc, #100]	; (185a4 <http_client_callback+0x134>)
   1853e:	4798      	blx	r3
   18540:	1e03      	subs	r3, r0, #0
   18542:	d006      	beq.n	18552 <http_client_callback+0xe2>
                    f_close(&file_object);
   18544:	4b18      	ldr	r3, [pc, #96]	; (185a8 <http_client_callback+0x138>)
   18546:	0018      	movs	r0, r3
   18548:	4b18      	ldr	r3, [pc, #96]	; (185ac <http_client_callback+0x13c>)
   1854a:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1854c:	2008      	movs	r0, #8
   1854e:	4b18      	ldr	r3, [pc, #96]	; (185b0 <http_client_callback+0x140>)
   18550:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   18552:	2004      	movs	r0, #4
   18554:	4b13      	ldr	r3, [pc, #76]	; (185a4 <http_client_callback+0x134>)
   18556:	4798      	blx	r3
   18558:	1e03      	subs	r3, r0, #0
   1855a:	d002      	beq.n	18562 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   1855c:	2004      	movs	r0, #4
   1855e:	4b14      	ldr	r3, [pc, #80]	; (185b0 <http_client_callback+0x140>)
   18560:	4798      	blx	r3
                }

                start_download();
   18562:	4b14      	ldr	r3, [pc, #80]	; (185b4 <http_client_callback+0x144>)
   18564:	4798      	blx	r3
            }

            break;
   18566:	46c0      	nop			; (mov r8, r8)
   18568:	e003      	b.n	18572 <http_client_callback+0x102>
            break;
   1856a:	46c0      	nop			; (mov r8, r8)
   1856c:	e002      	b.n	18574 <http_client_callback+0x104>
            break;
   1856e:	46c0      	nop			; (mov r8, r8)
   18570:	e000      	b.n	18574 <http_client_callback+0x104>
            break;
   18572:	46c0      	nop			; (mov r8, r8)
    }
}
   18574:	46bd      	mov	sp, r7
   18576:	b005      	add	sp, #20
   18578:	bd90      	pop	{r4, r7, pc}
   1857a:	46c0      	nop			; (mov r8, r8)
   1857c:	00039df8 	.word	0x00039df8
   18580:	00039638 	.word	0x00039638
   18584:	000200b1 	.word	0x000200b1
   18588:	00039670 	.word	0x00039670
   1858c:	00017e91 	.word	0x00017e91
   18590:	0003969c 	.word	0x0003969c
   18594:	20000720 	.word	0x20000720
   18598:	20000724 	.word	0x20000724
   1859c:	0001829d 	.word	0x0001829d
   185a0:	000396d8 	.word	0x000396d8
   185a4:	00017eb9 	.word	0x00017eb9
   185a8:	200006fc 	.word	0x200006fc
   185ac:	00030545 	.word	0x00030545
   185b0:	00017e5d 	.word	0x00017e5d
   185b4:	000181e1 	.word	0x000181e1

000185b8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   185b8:	b580      	push	{r7, lr}
   185ba:	b082      	sub	sp, #8
   185bc:	af00      	add	r7, sp, #0
   185be:	603a      	str	r2, [r7, #0]
   185c0:	1dfb      	adds	r3, r7, #7
   185c2:	1c02      	adds	r2, r0, #0
   185c4:	701a      	strb	r2, [r3, #0]
   185c6:	1dbb      	adds	r3, r7, #6
   185c8:	1c0a      	adds	r2, r1, #0
   185ca:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   185cc:	683a      	ldr	r2, [r7, #0]
   185ce:	1dbb      	adds	r3, r7, #6
   185d0:	7819      	ldrb	r1, [r3, #0]
   185d2:	1dfb      	adds	r3, r7, #7
   185d4:	781b      	ldrb	r3, [r3, #0]
   185d6:	b25b      	sxtb	r3, r3
   185d8:	0018      	movs	r0, r3
   185da:	4b03      	ldr	r3, [pc, #12]	; (185e8 <socket_cb+0x30>)
   185dc:	4798      	blx	r3
}
   185de:	46c0      	nop			; (mov r8, r8)
   185e0:	46bd      	mov	sp, r7
   185e2:	b002      	add	sp, #8
   185e4:	bd80      	pop	{r7, pc}
   185e6:	46c0      	nop			; (mov r8, r8)
   185e8:	00032ea9 	.word	0x00032ea9

000185ec <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   185ec:	b5b0      	push	{r4, r5, r7, lr}
   185ee:	b086      	sub	sp, #24
   185f0:	af04      	add	r7, sp, #16
   185f2:	6078      	str	r0, [r7, #4]
   185f4:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   185f6:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   185f8:	22ff      	movs	r2, #255	; 0xff
   185fa:	4013      	ands	r3, r2
   185fc:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   185fe:	683b      	ldr	r3, [r7, #0]
   18600:	0a1b      	lsrs	r3, r3, #8
   18602:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   18604:	23ff      	movs	r3, #255	; 0xff
   18606:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   18608:	683a      	ldr	r2, [r7, #0]
   1860a:	0c12      	lsrs	r2, r2, #16
   1860c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   1860e:	22ff      	movs	r2, #255	; 0xff
   18610:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   18612:	6839      	ldr	r1, [r7, #0]
   18614:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   18616:	000d      	movs	r5, r1
   18618:	6878      	ldr	r0, [r7, #4]
   1861a:	4909      	ldr	r1, [pc, #36]	; (18640 <resolve_cb+0x54>)
   1861c:	9502      	str	r5, [sp, #8]
   1861e:	9201      	str	r2, [sp, #4]
   18620:	9300      	str	r3, [sp, #0]
   18622:	0023      	movs	r3, r4
   18624:	0002      	movs	r2, r0
   18626:	2001      	movs	r0, #1
   18628:	4c06      	ldr	r4, [pc, #24]	; (18644 <resolve_cb+0x58>)
   1862a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1862c:	683a      	ldr	r2, [r7, #0]
   1862e:	687b      	ldr	r3, [r7, #4]
   18630:	0011      	movs	r1, r2
   18632:	0018      	movs	r0, r3
   18634:	4b04      	ldr	r3, [pc, #16]	; (18648 <resolve_cb+0x5c>)
   18636:	4798      	blx	r3
}
   18638:	46c0      	nop			; (mov r8, r8)
   1863a:	46bd      	mov	sp, r7
   1863c:	b002      	add	sp, #8
   1863e:	bdb0      	pop	{r4, r5, r7, pc}
   18640:	00039708 	.word	0x00039708
   18644:	000200b1 	.word	0x000200b1
   18648:	0003300d 	.word	0x0003300d

0001864c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   1864c:	b590      	push	{r4, r7, lr}
   1864e:	b087      	sub	sp, #28
   18650:	af02      	add	r7, sp, #8
   18652:	0002      	movs	r2, r0
   18654:	6039      	str	r1, [r7, #0]
   18656:	1dfb      	adds	r3, r7, #7
   18658:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1865a:	1dfb      	adds	r3, r7, #7
   1865c:	781b      	ldrb	r3, [r3, #0]
   1865e:	2b2c      	cmp	r3, #44	; 0x2c
   18660:	d002      	beq.n	18668 <wifi_cb+0x1c>
   18662:	2b32      	cmp	r3, #50	; 0x32
   18664:	d04d      	beq.n	18702 <wifi_cb+0xb6>
                }
            }
        } break;

        default:
            break;
   18666:	e07f      	b.n	18768 <wifi_cb+0x11c>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   18668:	683b      	ldr	r3, [r7, #0]
   1866a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1866c:	68fb      	ldr	r3, [r7, #12]
   1866e:	781b      	ldrb	r3, [r3, #0]
   18670:	2b01      	cmp	r3, #1
   18672:	d10a      	bne.n	1868a <wifi_cb+0x3e>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   18674:	4b3e      	ldr	r3, [pc, #248]	; (18770 <wifi_cb+0x124>)
   18676:	0019      	movs	r1, r3
   18678:	2001      	movs	r0, #1
   1867a:	4b3e      	ldr	r3, [pc, #248]	; (18774 <wifi_cb+0x128>)
   1867c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1867e:	4b3e      	ldr	r3, [pc, #248]	; (18778 <wifi_cb+0x12c>)
   18680:	4798      	blx	r3
				wifi_status = true;
   18682:	4b3e      	ldr	r3, [pc, #248]	; (1877c <wifi_cb+0x130>)
   18684:	2201      	movs	r2, #1
   18686:	701a      	strb	r2, [r3, #0]
            break;
   18688:	e06b      	b.n	18762 <wifi_cb+0x116>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   1868a:	68fb      	ldr	r3, [r7, #12]
   1868c:	781b      	ldrb	r3, [r3, #0]
   1868e:	2b00      	cmp	r3, #0
   18690:	d167      	bne.n	18762 <wifi_cb+0x116>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   18692:	4b3b      	ldr	r3, [pc, #236]	; (18780 <wifi_cb+0x134>)
   18694:	0019      	movs	r1, r3
   18696:	2001      	movs	r0, #1
   18698:	4b36      	ldr	r3, [pc, #216]	; (18774 <wifi_cb+0x128>)
   1869a:	4798      	blx	r3
				wifi_status = false;
   1869c:	4b37      	ldr	r3, [pc, #220]	; (1877c <wifi_cb+0x130>)
   1869e:	2200      	movs	r2, #0
   186a0:	701a      	strb	r2, [r3, #0]
				drawString(20,30,"Wifi is not Connected!",RED,WHITE);
   186a2:	4938      	ldr	r1, [pc, #224]	; (18784 <wifi_cb+0x138>)
   186a4:	4a38      	ldr	r2, [pc, #224]	; (18788 <wifi_cb+0x13c>)
   186a6:	2301      	movs	r3, #1
   186a8:	425b      	negs	r3, r3
   186aa:	9300      	str	r3, [sp, #0]
   186ac:	000b      	movs	r3, r1
   186ae:	211e      	movs	r1, #30
   186b0:	2014      	movs	r0, #20
   186b2:	4c36      	ldr	r4, [pc, #216]	; (1878c <wifi_cb+0x140>)
   186b4:	47a0      	blx	r4
                clear_state(WIFI_CONNECTED);
   186b6:	2002      	movs	r0, #2
   186b8:	4b35      	ldr	r3, [pc, #212]	; (18790 <wifi_cb+0x144>)
   186ba:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   186bc:	2008      	movs	r0, #8
   186be:	4b35      	ldr	r3, [pc, #212]	; (18794 <wifi_cb+0x148>)
   186c0:	4798      	blx	r3
   186c2:	1e03      	subs	r3, r0, #0
   186c4:	d006      	beq.n	186d4 <wifi_cb+0x88>
                    f_close(&file_object);
   186c6:	4b34      	ldr	r3, [pc, #208]	; (18798 <wifi_cb+0x14c>)
   186c8:	0018      	movs	r0, r3
   186ca:	4b34      	ldr	r3, [pc, #208]	; (1879c <wifi_cb+0x150>)
   186cc:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   186ce:	2008      	movs	r0, #8
   186d0:	4b2f      	ldr	r3, [pc, #188]	; (18790 <wifi_cb+0x144>)
   186d2:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   186d4:	2004      	movs	r0, #4
   186d6:	4b2f      	ldr	r3, [pc, #188]	; (18794 <wifi_cb+0x148>)
   186d8:	4798      	blx	r3
   186da:	1e03      	subs	r3, r0, #0
   186dc:	d002      	beq.n	186e4 <wifi_cb+0x98>
                    clear_state(GET_REQUESTED);
   186de:	2004      	movs	r0, #4
   186e0:	4b2b      	ldr	r3, [pc, #172]	; (18790 <wifi_cb+0x144>)
   186e2:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   186e4:	4b2e      	ldr	r3, [pc, #184]	; (187a0 <wifi_cb+0x154>)
   186e6:	2101      	movs	r1, #1
   186e8:	0018      	movs	r0, r3
   186ea:	4b2e      	ldr	r3, [pc, #184]	; (187a4 <wifi_cb+0x158>)
   186ec:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   186ee:	4a2e      	ldr	r2, [pc, #184]	; (187a8 <wifi_cb+0x15c>)
   186f0:	482e      	ldr	r0, [pc, #184]	; (187ac <wifi_cb+0x160>)
   186f2:	23ff      	movs	r3, #255	; 0xff
   186f4:	9300      	str	r3, [sp, #0]
   186f6:	0013      	movs	r3, r2
   186f8:	2202      	movs	r2, #2
   186fa:	2112      	movs	r1, #18
   186fc:	4c2c      	ldr	r4, [pc, #176]	; (187b0 <wifi_cb+0x164>)
   186fe:	47a0      	blx	r4
            break;
   18700:	e02f      	b.n	18762 <wifi_cb+0x116>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   18702:	683b      	ldr	r3, [r7, #0]
   18704:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   18706:	68bb      	ldr	r3, [r7, #8]
   18708:	781b      	ldrb	r3, [r3, #0]
   1870a:	0018      	movs	r0, r3
   1870c:	68bb      	ldr	r3, [r7, #8]
   1870e:	3301      	adds	r3, #1
   18710:	781b      	ldrb	r3, [r3, #0]
   18712:	001c      	movs	r4, r3
   18714:	68bb      	ldr	r3, [r7, #8]
   18716:	3302      	adds	r3, #2
   18718:	781b      	ldrb	r3, [r3, #0]
   1871a:	001a      	movs	r2, r3
   1871c:	68bb      	ldr	r3, [r7, #8]
   1871e:	3303      	adds	r3, #3
   18720:	781b      	ldrb	r3, [r3, #0]
   18722:	4924      	ldr	r1, [pc, #144]	; (187b4 <wifi_cb+0x168>)
   18724:	9301      	str	r3, [sp, #4]
   18726:	9200      	str	r2, [sp, #0]
   18728:	0023      	movs	r3, r4
   1872a:	0002      	movs	r2, r0
   1872c:	2001      	movs	r0, #1
   1872e:	4c11      	ldr	r4, [pc, #68]	; (18774 <wifi_cb+0x128>)
   18730:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   18732:	2002      	movs	r0, #2
   18734:	4b20      	ldr	r3, [pc, #128]	; (187b8 <wifi_cb+0x16c>)
   18736:	4798      	blx	r3
            if (do_download_flag == 1) {
   18738:	4b20      	ldr	r3, [pc, #128]	; (187bc <wifi_cb+0x170>)
   1873a:	781b      	ldrb	r3, [r3, #0]
   1873c:	2b01      	cmp	r3, #1
   1873e:	d102      	bne.n	18746 <wifi_cb+0xfa>
                start_download();
   18740:	4b1f      	ldr	r3, [pc, #124]	; (187c0 <wifi_cb+0x174>)
   18742:	4798      	blx	r3
        } break;
   18744:	e00f      	b.n	18766 <wifi_cb+0x11a>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   18746:	4a1f      	ldr	r2, [pc, #124]	; (187c4 <wifi_cb+0x178>)
   18748:	4b15      	ldr	r3, [pc, #84]	; (187a0 <wifi_cb+0x154>)
   1874a:	0011      	movs	r1, r2
   1874c:	0018      	movs	r0, r3
   1874e:	4b1e      	ldr	r3, [pc, #120]	; (187c8 <wifi_cb+0x17c>)
   18750:	4798      	blx	r3
   18752:	1e03      	subs	r3, r0, #0
   18754:	d007      	beq.n	18766 <wifi_cb+0x11a>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   18756:	4b1d      	ldr	r3, [pc, #116]	; (187cc <wifi_cb+0x180>)
   18758:	0019      	movs	r1, r3
   1875a:	2001      	movs	r0, #1
   1875c:	4b05      	ldr	r3, [pc, #20]	; (18774 <wifi_cb+0x128>)
   1875e:	4798      	blx	r3
        } break;
   18760:	e001      	b.n	18766 <wifi_cb+0x11a>
            break;
   18762:	46c0      	nop			; (mov r8, r8)
   18764:	e000      	b.n	18768 <wifi_cb+0x11c>
        } break;
   18766:	46c0      	nop			; (mov r8, r8)
    }
}
   18768:	46c0      	nop			; (mov r8, r8)
   1876a:	46bd      	mov	sp, r7
   1876c:	b005      	add	sp, #20
   1876e:	bd90      	pop	{r4, r7, pc}
   18770:	00039738 	.word	0x00039738
   18774:	000200b1 	.word	0x000200b1
   18778:	0002461d 	.word	0x0002461d
   1877c:	200004b2 	.word	0x200004b2
   18780:	00039758 	.word	0x00039758
   18784:	fffff800 	.word	0xfffff800
   18788:	0003977c 	.word	0x0003977c
   1878c:	00017391 	.word	0x00017391
   18790:	00017e5d 	.word	0x00017e5d
   18794:	00017eb9 	.word	0x00017eb9
   18798:	200006fc 	.word	0x200006fc
   1879c:	00030545 	.word	0x00030545
   187a0:	20000728 	.word	0x20000728
   187a4:	00031b55 	.word	0x00031b55
   187a8:	00039794 	.word	0x00039794
   187ac:	000397a4 	.word	0x000397a4
   187b0:	00024149 	.word	0x00024149
   187b4:	000397b8 	.word	0x000397b8
   187b8:	00017e91 	.word	0x00017e91
   187bc:	200004c8 	.word	0x200004c8
   187c0:	000181e1 	.word	0x000181e1
   187c4:	000393b0 	.word	0x000393b0
   187c8:	00031a21 	.word	0x00031a21
   187cc:	000397e0 	.word	0x000397e0

000187d0 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   187d0:	b590      	push	{r4, r7, lr}
   187d2:	b083      	sub	sp, #12
   187d4:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   187d6:	4b29      	ldr	r3, [pc, #164]	; (1887c <init_storage+0xac>)
   187d8:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   187da:	4b29      	ldr	r3, [pc, #164]	; (18880 <init_storage+0xb0>)
   187dc:	0019      	movs	r1, r3
   187de:	2001      	movs	r0, #1
   187e0:	4b28      	ldr	r3, [pc, #160]	; (18884 <init_storage+0xb4>)
   187e2:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   187e4:	1dfc      	adds	r4, r7, #7
   187e6:	2000      	movs	r0, #0
   187e8:	4b27      	ldr	r3, [pc, #156]	; (18888 <init_storage+0xb8>)
   187ea:	4798      	blx	r3
   187ec:	0003      	movs	r3, r0
   187ee:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   187f0:	1dfb      	adds	r3, r7, #7
   187f2:	781b      	ldrb	r3, [r3, #0]
   187f4:	2b01      	cmp	r3, #1
   187f6:	d110      	bne.n	1881a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   187f8:	4b24      	ldr	r3, [pc, #144]	; (1888c <init_storage+0xbc>)
   187fa:	0019      	movs	r1, r3
   187fc:	2001      	movs	r0, #1
   187fe:	4b21      	ldr	r3, [pc, #132]	; (18884 <init_storage+0xb4>)
   18800:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   18802:	4b23      	ldr	r3, [pc, #140]	; (18890 <init_storage+0xc0>)
   18804:	0019      	movs	r1, r3
   18806:	2001      	movs	r0, #1
   18808:	4b1e      	ldr	r3, [pc, #120]	; (18884 <init_storage+0xb4>)
   1880a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1880c:	46c0      	nop			; (mov r8, r8)
   1880e:	2000      	movs	r0, #0
   18810:	4b20      	ldr	r3, [pc, #128]	; (18894 <init_storage+0xc4>)
   18812:	4798      	blx	r3
   18814:	0003      	movs	r3, r0
   18816:	2b02      	cmp	r3, #2
   18818:	d1f9      	bne.n	1880e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1881a:	1dfb      	adds	r3, r7, #7
   1881c:	781b      	ldrb	r3, [r3, #0]
   1881e:	2b00      	cmp	r3, #0
   18820:	d1e0      	bne.n	187e4 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   18822:	4b1d      	ldr	r3, [pc, #116]	; (18898 <init_storage+0xc8>)
   18824:	0019      	movs	r1, r3
   18826:	2001      	movs	r0, #1
   18828:	4b16      	ldr	r3, [pc, #88]	; (18884 <init_storage+0xb4>)
   1882a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   1882c:	238c      	movs	r3, #140	; 0x8c
   1882e:	009a      	lsls	r2, r3, #2
   18830:	4b1a      	ldr	r3, [pc, #104]	; (1889c <init_storage+0xcc>)
   18832:	2100      	movs	r1, #0
   18834:	0018      	movs	r0, r3
   18836:	4b1a      	ldr	r3, [pc, #104]	; (188a0 <init_storage+0xd0>)
   18838:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1883a:	1dbc      	adds	r4, r7, #6
   1883c:	4b17      	ldr	r3, [pc, #92]	; (1889c <init_storage+0xcc>)
   1883e:	0019      	movs	r1, r3
   18840:	2000      	movs	r0, #0
   18842:	4b18      	ldr	r3, [pc, #96]	; (188a4 <init_storage+0xd4>)
   18844:	4798      	blx	r3
   18846:	0003      	movs	r3, r0
   18848:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1884a:	1dbb      	adds	r3, r7, #6
   1884c:	781b      	ldrb	r3, [r3, #0]
   1884e:	2b0b      	cmp	r3, #11
   18850:	d107      	bne.n	18862 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   18852:	1dbb      	adds	r3, r7, #6
   18854:	781a      	ldrb	r2, [r3, #0]
   18856:	4b14      	ldr	r3, [pc, #80]	; (188a8 <init_storage+0xd8>)
   18858:	0019      	movs	r1, r3
   1885a:	2001      	movs	r0, #1
   1885c:	4b09      	ldr	r3, [pc, #36]	; (18884 <init_storage+0xb4>)
   1885e:	4798      	blx	r3
            return;
   18860:	e008      	b.n	18874 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   18862:	4b12      	ldr	r3, [pc, #72]	; (188ac <init_storage+0xdc>)
   18864:	0019      	movs	r1, r3
   18866:	2001      	movs	r0, #1
   18868:	4b06      	ldr	r3, [pc, #24]	; (18884 <init_storage+0xb4>)
   1886a:	4798      	blx	r3
        add_state(STORAGE_READY);
   1886c:	2001      	movs	r0, #1
   1886e:	4b10      	ldr	r3, [pc, #64]	; (188b0 <init_storage+0xe0>)
   18870:	4798      	blx	r3
        return;
   18872:	46c0      	nop			; (mov r8, r8)
    }
}
   18874:	46bd      	mov	sp, r7
   18876:	b003      	add	sp, #12
   18878:	bd90      	pop	{r4, r7, pc}
   1887a:	46c0      	nop			; (mov r8, r8)
   1887c:	00020ec9 	.word	0x00020ec9
   18880:	00039804 	.word	0x00039804
   18884:	000200b1 	.word	0x000200b1
   18888:	000213a5 	.word	0x000213a5
   1888c:	0003983c 	.word	0x0003983c
   18890:	00039864 	.word	0x00039864
   18894:	00020f19 	.word	0x00020f19
   18898:	00039898 	.word	0x00039898
   1889c:	200004cc 	.word	0x200004cc
   188a0:	0003781f 	.word	0x0003781f
   188a4:	0002faed 	.word	0x0002faed
   188a8:	000398bc 	.word	0x000398bc
   188ac:	000398ec 	.word	0x000398ec
   188b0:	00017e91 	.word	0x00017e91

000188b4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   188b4:	b580      	push	{r7, lr}
   188b6:	b082      	sub	sp, #8
   188b8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   188ba:	1d3b      	adds	r3, r7, #4
   188bc:	0018      	movs	r0, r3
   188be:	4b08      	ldr	r3, [pc, #32]	; (188e0 <configure_timer+0x2c>)
   188c0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   188c2:	1d3a      	adds	r2, r7, #4
   188c4:	4b07      	ldr	r3, [pc, #28]	; (188e4 <configure_timer+0x30>)
   188c6:	0011      	movs	r1, r2
   188c8:	0018      	movs	r0, r3
   188ca:	4b07      	ldr	r3, [pc, #28]	; (188e8 <configure_timer+0x34>)
   188cc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   188ce:	4b05      	ldr	r3, [pc, #20]	; (188e4 <configure_timer+0x30>)
   188d0:	0018      	movs	r0, r3
   188d2:	4b06      	ldr	r3, [pc, #24]	; (188ec <configure_timer+0x38>)
   188d4:	4798      	blx	r3
}
   188d6:	46c0      	nop			; (mov r8, r8)
   188d8:	46bd      	mov	sp, r7
   188da:	b002      	add	sp, #8
   188dc:	bd80      	pop	{r7, pc}
   188de:	46c0      	nop			; (mov r8, r8)
   188e0:	0003463d 	.word	0x0003463d
   188e4:	2000473c 	.word	0x2000473c
   188e8:	00034661 	.word	0x00034661
   188ec:	0003474d 	.word	0x0003474d

000188f0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   188f0:	b580      	push	{r7, lr}
   188f2:	b088      	sub	sp, #32
   188f4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   188f6:	003b      	movs	r3, r7
   188f8:	0018      	movs	r0, r3
   188fa:	4b12      	ldr	r3, [pc, #72]	; (18944 <configure_http_client+0x54>)
   188fc:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   188fe:	003b      	movs	r3, r7
   18900:	2280      	movs	r2, #128	; 0x80
   18902:	0092      	lsls	r2, r2, #2
   18904:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   18906:	003b      	movs	r3, r7
   18908:	4a0f      	ldr	r2, [pc, #60]	; (18948 <configure_http_client+0x58>)
   1890a:	605a      	str	r2, [r3, #4]
	
	//For HTTP, comment the two lines below
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1890c:	003a      	movs	r2, r7
   1890e:	4b0f      	ldr	r3, [pc, #60]	; (1894c <configure_http_client+0x5c>)
   18910:	0011      	movs	r1, r2
   18912:	0018      	movs	r0, r3
   18914:	4b0e      	ldr	r3, [pc, #56]	; (18950 <configure_http_client+0x60>)
   18916:	4798      	blx	r3
   18918:	0003      	movs	r3, r0
   1891a:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1891c:	69fb      	ldr	r3, [r7, #28]
   1891e:	2b00      	cmp	r3, #0
   18920:	da06      	bge.n	18930 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   18922:	69fa      	ldr	r2, [r7, #28]
   18924:	4b0b      	ldr	r3, [pc, #44]	; (18954 <configure_http_client+0x64>)
   18926:	0019      	movs	r1, r3
   18928:	2001      	movs	r0, #1
   1892a:	4b0b      	ldr	r3, [pc, #44]	; (18958 <configure_http_client+0x68>)
   1892c:	4798      	blx	r3
        while (1) {
   1892e:	e7fe      	b.n	1892e <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   18930:	4a0a      	ldr	r2, [pc, #40]	; (1895c <configure_http_client+0x6c>)
   18932:	4b06      	ldr	r3, [pc, #24]	; (1894c <configure_http_client+0x5c>)
   18934:	0011      	movs	r1, r2
   18936:	0018      	movs	r0, r3
   18938:	4b09      	ldr	r3, [pc, #36]	; (18960 <configure_http_client+0x70>)
   1893a:	4798      	blx	r3
}
   1893c:	46c0      	nop			; (mov r8, r8)
   1893e:	46bd      	mov	sp, r7
   18940:	b008      	add	sp, #32
   18942:	bd80      	pop	{r7, pc}
   18944:	00032cd1 	.word	0x00032cd1
   18948:	2000473c 	.word	0x2000473c
   1894c:	20004794 	.word	0x20004794
   18950:	00032d1d 	.word	0x00032d1d
   18954:	00039910 	.word	0x00039910
   18958:	000200b1 	.word	0x000200b1
   1895c:	00018471 	.word	0x00018471
   18960:	00032e09 	.word	0x00032e09

00018964 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   18964:	b580      	push	{r7, lr}
   18966:	b082      	sub	sp, #8
   18968:	af00      	add	r7, sp, #0
   1896a:	603a      	str	r2, [r7, #0]
   1896c:	1dfb      	adds	r3, r7, #7
   1896e:	1c02      	adds	r2, r0, #0
   18970:	701a      	strb	r2, [r3, #0]
   18972:	1dbb      	adds	r3, r7, #6
   18974:	1c0a      	adds	r2, r1, #0
   18976:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   18978:	683a      	ldr	r2, [r7, #0]
   1897a:	1dbb      	adds	r3, r7, #6
   1897c:	7819      	ldrb	r1, [r3, #0]
   1897e:	1dfb      	adds	r3, r7, #7
   18980:	781b      	ldrb	r3, [r3, #0]
   18982:	b25b      	sxtb	r3, r3
   18984:	0018      	movs	r0, r3
   18986:	4b03      	ldr	r3, [pc, #12]	; (18994 <socket_event_handler+0x30>)
   18988:	4798      	blx	r3
}
   1898a:	46c0      	nop			; (mov r8, r8)
   1898c:	46bd      	mov	sp, r7
   1898e:	b002      	add	sp, #8
   18990:	bd80      	pop	{r7, pc}
   18992:	46c0      	nop			; (mov r8, r8)
   18994:	000319c9 	.word	0x000319c9

00018998 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   18998:	b580      	push	{r7, lr}
   1899a:	b082      	sub	sp, #8
   1899c:	af00      	add	r7, sp, #0
   1899e:	6078      	str	r0, [r7, #4]
   189a0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   189a2:	683a      	ldr	r2, [r7, #0]
   189a4:	687b      	ldr	r3, [r7, #4]
   189a6:	0011      	movs	r1, r2
   189a8:	0018      	movs	r0, r3
   189aa:	4b03      	ldr	r3, [pc, #12]	; (189b8 <socket_resolve_handler+0x20>)
   189ac:	4798      	blx	r3
}
   189ae:	46c0      	nop			; (mov r8, r8)
   189b0:	46bd      	mov	sp, r7
   189b2:	b002      	add	sp, #8
   189b4:	bd80      	pop	{r7, pc}
   189b6:	46c0      	nop			; (mov r8, r8)
   189b8:	000319fd 	.word	0x000319fd

000189bc <SubscribeHandlerFWTopic>:
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
    }
}

void SubscribeHandlerFWTopic(MessageData *msgData)
{
   189bc:	b580      	push	{r7, lr}
   189be:	b082      	sub	sp, #8
   189c0:	af00      	add	r7, sp, #0
   189c2:	6078      	str	r0, [r7, #4]
	//LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);

	if(strncmp((char *)msgData->topicName->lenstring.data, FW_TOPIC,msgData->message->payloadlen) == 0){
   189c4:	687b      	ldr	r3, [r7, #4]
   189c6:	685b      	ldr	r3, [r3, #4]
   189c8:	6898      	ldr	r0, [r3, #8]
   189ca:	687b      	ldr	r3, [r7, #4]
   189cc:	681b      	ldr	r3, [r3, #0]
   189ce:	68da      	ldr	r2, [r3, #12]
   189d0:	4b0e      	ldr	r3, [pc, #56]	; (18a0c <SubscribeHandlerFWTopic+0x50>)
   189d2:	0019      	movs	r1, r3
   189d4:	4b0e      	ldr	r3, [pc, #56]	; (18a10 <SubscribeHandlerFWTopic+0x54>)
   189d6:	4798      	blx	r3
   189d8:	1e03      	subs	r3, r0, #0
   189da:	d113      	bne.n	18a04 <SubscribeHandlerFWTopic+0x48>
		if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   189dc:	687b      	ldr	r3, [r7, #4]
   189de:	681b      	ldr	r3, [r3, #0]
   189e0:	6898      	ldr	r0, [r3, #8]
   189e2:	687b      	ldr	r3, [r7, #4]
   189e4:	681b      	ldr	r3, [r3, #0]
   189e6:	68da      	ldr	r2, [r3, #12]
   189e8:	4b0a      	ldr	r3, [pc, #40]	; (18a14 <SubscribeHandlerFWTopic+0x58>)
   189ea:	0019      	movs	r1, r3
   189ec:	4b08      	ldr	r3, [pc, #32]	; (18a10 <SubscribeHandlerFWTopic+0x54>)
   189ee:	4798      	blx	r3
   189f0:	1e03      	subs	r3, r0, #0
   189f2:	d107      	bne.n	18a04 <SubscribeHandlerFWTopic+0x48>
		//HTTP_DownloadFileTransaction();
		WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   189f4:	2002      	movs	r0, #2
   189f6:	4b08      	ldr	r3, [pc, #32]	; (18a18 <SubscribeHandlerFWTopic+0x5c>)
   189f8:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL, "\r\nStart Downloading!\r\n");	
   189fa:	4b08      	ldr	r3, [pc, #32]	; (18a1c <SubscribeHandlerFWTopic+0x60>)
   189fc:	0019      	movs	r1, r3
   189fe:	2001      	movs	r0, #1
   18a00:	4b07      	ldr	r3, [pc, #28]	; (18a20 <SubscribeHandlerFWTopic+0x64>)
   18a02:	4798      	blx	r3
		}
	}
}
   18a04:	46c0      	nop			; (mov r8, r8)
   18a06:	46bd      	mov	sp, r7
   18a08:	b002      	add	sp, #8
   18a0a:	bd80      	pop	{r7, pc}
   18a0c:	0003997c 	.word	0x0003997c
   18a10:	00037be5 	.word	0x00037be5
   18a14:	00039990 	.word	0x00039990
   18a18:	0001963d 	.word	0x0001963d
   18a1c:	00039998 	.word	0x00039998
   18a20:	000200b1 	.word	0x000200b1

00018a24 <SubscribeHandlerServoTopic>:
void SubscribeHandlerServoTopic(MessageData *msgData)
{
   18a24:	b580      	push	{r7, lr}
   18a26:	b086      	sub	sp, #24
   18a28:	af00      	add	r7, sp, #0
   18a2a:	6078      	str	r0, [r7, #4]
	//LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
	
	// Will receive something of the style "rgb(222, 224, 189)"
	if(strncmp((char *)msgData->topicName->lenstring.data, SERVO_TOPIC,msgData->message->payloadlen) == 0){
   18a2c:	687b      	ldr	r3, [r7, #4]
   18a2e:	685b      	ldr	r3, [r3, #4]
   18a30:	6898      	ldr	r0, [r3, #8]
   18a32:	687b      	ldr	r3, [r7, #4]
   18a34:	681b      	ldr	r3, [r3, #0]
   18a36:	68da      	ldr	r2, [r3, #12]
   18a38:	4b3c      	ldr	r3, [pc, #240]	; (18b2c <SubscribeHandlerServoTopic+0x108>)
   18a3a:	0019      	movs	r1, r3
   18a3c:	4b3c      	ldr	r3, [pc, #240]	; (18b30 <SubscribeHandlerServoTopic+0x10c>)
   18a3e:	4798      	blx	r3
   18a40:	1e03      	subs	r3, r0, #0
   18a42:	d000      	beq.n	18a46 <SubscribeHandlerServoTopic+0x22>
   18a44:	e06d      	b.n	18b22 <SubscribeHandlerServoTopic+0xfe>
	if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   18a46:	687b      	ldr	r3, [r7, #4]
   18a48:	681b      	ldr	r3, [r3, #0]
   18a4a:	6898      	ldr	r0, [r3, #8]
   18a4c:	687b      	ldr	r3, [r7, #4]
   18a4e:	681b      	ldr	r3, [r3, #0]
   18a50:	68da      	ldr	r2, [r3, #12]
   18a52:	4b38      	ldr	r3, [pc, #224]	; (18b34 <SubscribeHandlerServoTopic+0x110>)
   18a54:	0019      	movs	r1, r3
   18a56:	4b36      	ldr	r3, [pc, #216]	; (18b30 <SubscribeHandlerServoTopic+0x10c>)
   18a58:	4798      	blx	r3
   18a5a:	1e03      	subs	r3, r0, #0
   18a5c:	d12a      	bne.n	18ab4 <SubscribeHandlerServoTopic+0x90>
		int count = 0;
   18a5e:	2300      	movs	r3, #0
   18a60:	617b      	str	r3, [r7, #20]
		port_pin_set_output_level(SERVO_PIN,0);
   18a62:	2100      	movs	r1, #0
   18a64:	2003      	movs	r0, #3
   18a66:	4b34      	ldr	r3, [pc, #208]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18a68:	4798      	blx	r3
		for(int i = 0;i<3000;i++){
   18a6a:	2300      	movs	r3, #0
   18a6c:	613b      	str	r3, [r7, #16]
   18a6e:	e016      	b.n	18a9e <SubscribeHandlerServoTopic+0x7a>
			if(count == 8)
   18a70:	697b      	ldr	r3, [r7, #20]
   18a72:	2b08      	cmp	r3, #8
   18a74:	d106      	bne.n	18a84 <SubscribeHandlerServoTopic+0x60>
			{
				port_pin_set_output_level(SERVO_PIN,1);
   18a76:	2101      	movs	r1, #1
   18a78:	2003      	movs	r0, #3
   18a7a:	4b2f      	ldr	r3, [pc, #188]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18a7c:	4798      	blx	r3
				count = 0;
   18a7e:	2300      	movs	r3, #0
   18a80:	617b      	str	r3, [r7, #20]
   18a82:	e003      	b.n	18a8c <SubscribeHandlerServoTopic+0x68>
			}
			else{
				port_pin_set_output_level(SERVO_PIN,0);
   18a84:	2100      	movs	r1, #0
   18a86:	2003      	movs	r0, #3
   18a88:	4b2b      	ldr	r3, [pc, #172]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18a8a:	4798      	blx	r3
			}
			//MG90S
			vTaskDelay(1);
   18a8c:	2001      	movs	r0, #1
   18a8e:	4b2b      	ldr	r3, [pc, #172]	; (18b3c <SubscribeHandlerServoTopic+0x118>)
   18a90:	4798      	blx	r3
			//A0090
			//vTaskDelay(2.4);
			//delay_ms(1);
			count++;
   18a92:	697b      	ldr	r3, [r7, #20]
   18a94:	3301      	adds	r3, #1
   18a96:	617b      	str	r3, [r7, #20]
		for(int i = 0;i<3000;i++){
   18a98:	693b      	ldr	r3, [r7, #16]
   18a9a:	3301      	adds	r3, #1
   18a9c:	613b      	str	r3, [r7, #16]
   18a9e:	693b      	ldr	r3, [r7, #16]
   18aa0:	4a27      	ldr	r2, [pc, #156]	; (18b40 <SubscribeHandlerServoTopic+0x11c>)
   18aa2:	4293      	cmp	r3, r2
   18aa4:	dde4      	ble.n	18a70 <SubscribeHandlerServoTopic+0x4c>
		}
		port_pin_set_output_level(SERVO_PIN,0);
   18aa6:	2100      	movs	r1, #0
   18aa8:	2003      	movs	r0, #3
   18aaa:	4b23      	ldr	r3, [pc, #140]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18aac:	4798      	blx	r3
		setLock();
   18aae:	4b25      	ldr	r3, [pc, #148]	; (18b44 <SubscribeHandlerServoTopic+0x120>)
   18ab0:	4798      	blx	r3
		}
		port_pin_set_output_level(SERVO_PIN,0);
		setUnLock();
	}
	}
}
   18ab2:	e036      	b.n	18b22 <SubscribeHandlerServoTopic+0xfe>
	else if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   18ab4:	687b      	ldr	r3, [r7, #4]
   18ab6:	681b      	ldr	r3, [r3, #0]
   18ab8:	6898      	ldr	r0, [r3, #8]
   18aba:	687b      	ldr	r3, [r7, #4]
   18abc:	681b      	ldr	r3, [r3, #0]
   18abe:	68da      	ldr	r2, [r3, #12]
   18ac0:	4b21      	ldr	r3, [pc, #132]	; (18b48 <SubscribeHandlerServoTopic+0x124>)
   18ac2:	0019      	movs	r1, r3
   18ac4:	4b1a      	ldr	r3, [pc, #104]	; (18b30 <SubscribeHandlerServoTopic+0x10c>)
   18ac6:	4798      	blx	r3
   18ac8:	1e03      	subs	r3, r0, #0
   18aca:	d12a      	bne.n	18b22 <SubscribeHandlerServoTopic+0xfe>
		int count = 0;
   18acc:	2300      	movs	r3, #0
   18ace:	60fb      	str	r3, [r7, #12]
		port_pin_set_output_level(SERVO_PIN,0);
   18ad0:	2100      	movs	r1, #0
   18ad2:	2003      	movs	r0, #3
   18ad4:	4b18      	ldr	r3, [pc, #96]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18ad6:	4798      	blx	r3
		for(int i = 0;i<300;i++){
   18ad8:	2300      	movs	r3, #0
   18ada:	60bb      	str	r3, [r7, #8]
   18adc:	e016      	b.n	18b0c <SubscribeHandlerServoTopic+0xe8>
			if(count == 4)
   18ade:	68fb      	ldr	r3, [r7, #12]
   18ae0:	2b04      	cmp	r3, #4
   18ae2:	d106      	bne.n	18af2 <SubscribeHandlerServoTopic+0xce>
				port_pin_set_output_level(SERVO_PIN,1);
   18ae4:	2101      	movs	r1, #1
   18ae6:	2003      	movs	r0, #3
   18ae8:	4b13      	ldr	r3, [pc, #76]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18aea:	4798      	blx	r3
				count = 0;
   18aec:	2300      	movs	r3, #0
   18aee:	60fb      	str	r3, [r7, #12]
   18af0:	e003      	b.n	18afa <SubscribeHandlerServoTopic+0xd6>
				port_pin_set_output_level(SERVO_PIN,0);
   18af2:	2100      	movs	r1, #0
   18af4:	2003      	movs	r0, #3
   18af6:	4b10      	ldr	r3, [pc, #64]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18af8:	4798      	blx	r3
			vTaskDelay(9);
   18afa:	2009      	movs	r0, #9
   18afc:	4b0f      	ldr	r3, [pc, #60]	; (18b3c <SubscribeHandlerServoTopic+0x118>)
   18afe:	4798      	blx	r3
			count++;
   18b00:	68fb      	ldr	r3, [r7, #12]
   18b02:	3301      	adds	r3, #1
   18b04:	60fb      	str	r3, [r7, #12]
		for(int i = 0;i<300;i++){
   18b06:	68bb      	ldr	r3, [r7, #8]
   18b08:	3301      	adds	r3, #1
   18b0a:	60bb      	str	r3, [r7, #8]
   18b0c:	68ba      	ldr	r2, [r7, #8]
   18b0e:	232c      	movs	r3, #44	; 0x2c
   18b10:	33ff      	adds	r3, #255	; 0xff
   18b12:	429a      	cmp	r2, r3
   18b14:	dde3      	ble.n	18ade <SubscribeHandlerServoTopic+0xba>
		port_pin_set_output_level(SERVO_PIN,0);
   18b16:	2100      	movs	r1, #0
   18b18:	2003      	movs	r0, #3
   18b1a:	4b07      	ldr	r3, [pc, #28]	; (18b38 <SubscribeHandlerServoTopic+0x114>)
   18b1c:	4798      	blx	r3
		setUnLock();
   18b1e:	4b0b      	ldr	r3, [pc, #44]	; (18b4c <SubscribeHandlerServoTopic+0x128>)
   18b20:	4798      	blx	r3
}
   18b22:	46c0      	nop			; (mov r8, r8)
   18b24:	46bd      	mov	sp, r7
   18b26:	b006      	add	sp, #24
   18b28:	bd80      	pop	{r7, pc}
   18b2a:	46c0      	nop			; (mov r8, r8)
   18b2c:	000399b0 	.word	0x000399b0
   18b30:	00037be5 	.word	0x00037be5
   18b34:	00039990 	.word	0x00039990
   18b38:	00017df5 	.word	0x00017df5
   18b3c:	0001e371 	.word	0x0001e371
   18b40:	00000bb7 	.word	0x00000bb7
   18b44:	00016dc1 	.word	0x00016dc1
   18b48:	000399c0 	.word	0x000399c0
   18b4c:	00016ddd 	.word	0x00016ddd

00018b50 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   18b50:	b590      	push	{r4, r7, lr}
   18b52:	b08b      	sub	sp, #44	; 0x2c
   18b54:	af06      	add	r7, sp, #24
   18b56:	60f8      	str	r0, [r7, #12]
   18b58:	60b9      	str	r1, [r7, #8]
   18b5a:	607a      	str	r2, [r7, #4]
    switch (type) {
   18b5c:	68bb      	ldr	r3, [r7, #8]
   18b5e:	2b01      	cmp	r3, #1
   18b60:	d03b      	beq.n	18bda <mqtt_callback+0x8a>
   18b62:	2b05      	cmp	r3, #5
   18b64:	d058      	beq.n	18c18 <mqtt_callback+0xc8>
   18b66:	2b00      	cmp	r3, #0
   18b68:	d000      	beq.n	18b6c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   18b6a:	e05b      	b.n	18c24 <mqtt_callback+0xd4>
            if (data->sock_connected.result >= 0) {
   18b6c:	687b      	ldr	r3, [r7, #4]
   18b6e:	681b      	ldr	r3, [r3, #0]
   18b70:	2b00      	cmp	r3, #0
   18b72:	db25      	blt.n	18bc0 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   18b74:	4b2d      	ldr	r3, [pc, #180]	; (18c2c <mqtt_callback+0xdc>)
   18b76:	0019      	movs	r1, r3
   18b78:	2001      	movs	r0, #1
   18b7a:	4b2d      	ldr	r3, [pc, #180]	; (18c30 <mqtt_callback+0xe0>)
   18b7c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   18b7e:	492d      	ldr	r1, [pc, #180]	; (18c34 <mqtt_callback+0xe4>)
   18b80:	4a2d      	ldr	r2, [pc, #180]	; (18c38 <mqtt_callback+0xe8>)
   18b82:	68f8      	ldr	r0, [r7, #12]
   18b84:	2300      	movs	r3, #0
   18b86:	9305      	str	r3, [sp, #20]
   18b88:	2300      	movs	r3, #0
   18b8a:	9304      	str	r3, [sp, #16]
   18b8c:	2300      	movs	r3, #0
   18b8e:	9303      	str	r3, [sp, #12]
   18b90:	2300      	movs	r3, #0
   18b92:	9302      	str	r3, [sp, #8]
   18b94:	2300      	movs	r3, #0
   18b96:	9301      	str	r3, [sp, #4]
   18b98:	4b27      	ldr	r3, [pc, #156]	; (18c38 <mqtt_callback+0xe8>)
   18b9a:	9300      	str	r3, [sp, #0]
   18b9c:	000b      	movs	r3, r1
   18b9e:	2101      	movs	r1, #1
   18ba0:	4c26      	ldr	r4, [pc, #152]	; (18c3c <mqtt_callback+0xec>)
   18ba2:	47a0      	blx	r4
   18ba4:	1e03      	subs	r3, r0, #0
   18ba6:	d005      	beq.n	18bb4 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   18ba8:	4b25      	ldr	r3, [pc, #148]	; (18c40 <mqtt_callback+0xf0>)
   18baa:	0019      	movs	r1, r3
   18bac:	2001      	movs	r0, #1
   18bae:	4b20      	ldr	r3, [pc, #128]	; (18c30 <mqtt_callback+0xe0>)
   18bb0:	4798      	blx	r3
        } break;
   18bb2:	e037      	b.n	18c24 <mqtt_callback+0xd4>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   18bb4:	4b23      	ldr	r3, [pc, #140]	; (18c44 <mqtt_callback+0xf4>)
   18bb6:	0019      	movs	r1, r3
   18bb8:	2001      	movs	r0, #1
   18bba:	4b1d      	ldr	r3, [pc, #116]	; (18c30 <mqtt_callback+0xe0>)
   18bbc:	4798      	blx	r3
        } break;
   18bbe:	e031      	b.n	18c24 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   18bc0:	4a21      	ldr	r2, [pc, #132]	; (18c48 <mqtt_callback+0xf8>)
   18bc2:	4b22      	ldr	r3, [pc, #136]	; (18c4c <mqtt_callback+0xfc>)
   18bc4:	0019      	movs	r1, r3
   18bc6:	2001      	movs	r0, #1
   18bc8:	4b19      	ldr	r3, [pc, #100]	; (18c30 <mqtt_callback+0xe0>)
   18bca:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   18bcc:	4a1e      	ldr	r2, [pc, #120]	; (18c48 <mqtt_callback+0xf8>)
   18bce:	68fb      	ldr	r3, [r7, #12]
   18bd0:	0011      	movs	r1, r2
   18bd2:	0018      	movs	r0, r3
   18bd4:	4b1e      	ldr	r3, [pc, #120]	; (18c50 <mqtt_callback+0x100>)
   18bd6:	4798      	blx	r3
        } break;
   18bd8:	e024      	b.n	18c24 <mqtt_callback+0xd4>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   18bda:	687b      	ldr	r3, [r7, #4]
   18bdc:	781b      	ldrb	r3, [r3, #0]
   18bde:	2b00      	cmp	r3, #0
   18be0:	d111      	bne.n	18c06 <mqtt_callback+0xb6>
				mqtt_subscribe(module_inst, SERVO_TOPIC, 2, SubscribeHandlerServoTopic);
   18be2:	4b1c      	ldr	r3, [pc, #112]	; (18c54 <mqtt_callback+0x104>)
   18be4:	491c      	ldr	r1, [pc, #112]	; (18c58 <mqtt_callback+0x108>)
   18be6:	68f8      	ldr	r0, [r7, #12]
   18be8:	2202      	movs	r2, #2
   18bea:	4c1c      	ldr	r4, [pc, #112]	; (18c5c <mqtt_callback+0x10c>)
   18bec:	47a0      	blx	r4
				mqtt_subscribe(module_inst, FW_TOPIC, 2, SubscribeHandlerFWTopic);
   18bee:	4b1c      	ldr	r3, [pc, #112]	; (18c60 <mqtt_callback+0x110>)
   18bf0:	491c      	ldr	r1, [pc, #112]	; (18c64 <mqtt_callback+0x114>)
   18bf2:	68f8      	ldr	r0, [r7, #12]
   18bf4:	2202      	movs	r2, #2
   18bf6:	4c19      	ldr	r4, [pc, #100]	; (18c5c <mqtt_callback+0x10c>)
   18bf8:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   18bfa:	4b1b      	ldr	r3, [pc, #108]	; (18c68 <mqtt_callback+0x118>)
   18bfc:	0019      	movs	r1, r3
   18bfe:	2001      	movs	r0, #1
   18c00:	4b0b      	ldr	r3, [pc, #44]	; (18c30 <mqtt_callback+0xe0>)
   18c02:	4798      	blx	r3
            break;
   18c04:	e00e      	b.n	18c24 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   18c06:	687b      	ldr	r3, [r7, #4]
   18c08:	781b      	ldrb	r3, [r3, #0]
   18c0a:	001a      	movs	r2, r3
   18c0c:	4b17      	ldr	r3, [pc, #92]	; (18c6c <mqtt_callback+0x11c>)
   18c0e:	0019      	movs	r1, r3
   18c10:	2001      	movs	r0, #1
   18c12:	4b07      	ldr	r3, [pc, #28]	; (18c30 <mqtt_callback+0xe0>)
   18c14:	4798      	blx	r3
            break;
   18c16:	e005      	b.n	18c24 <mqtt_callback+0xd4>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   18c18:	4b15      	ldr	r3, [pc, #84]	; (18c70 <mqtt_callback+0x120>)
   18c1a:	0019      	movs	r1, r3
   18c1c:	2001      	movs	r0, #1
   18c1e:	4b04      	ldr	r3, [pc, #16]	; (18c30 <mqtt_callback+0xe0>)
   18c20:	4798      	blx	r3
            break;
   18c22:	46c0      	nop			; (mov r8, r8)
}
   18c24:	46c0      	nop			; (mov r8, r8)
   18c26:	46bd      	mov	sp, r7
   18c28:	b005      	add	sp, #20
   18c2a:	bd90      	pop	{r4, r7, pc}
   18c2c:	00039ac8 	.word	0x00039ac8
   18c30:	000200b1 	.word	0x000200b1
   18c34:	00039ae4 	.word	0x00039ae4
   18c38:	00039af4 	.word	0x00039af4
   18c3c:	00031a69 	.word	0x00031a69
   18c40:	00039af8 	.word	0x00039af8
   18c44:	00039b20 	.word	0x00039b20
   18c48:	000393b0 	.word	0x000393b0
   18c4c:	00039b3c 	.word	0x00039b3c
   18c50:	00031a21 	.word	0x00031a21
   18c54:	00018a25 	.word	0x00018a25
   18c58:	000399b0 	.word	0x000399b0
   18c5c:	00031c09 	.word	0x00031c09
   18c60:	000189bd 	.word	0x000189bd
   18c64:	0003997c 	.word	0x0003997c
   18c68:	00039b74 	.word	0x00039b74
   18c6c:	00039b88 	.word	0x00039b88
   18c70:	00039bbc 	.word	0x00039bbc

00018c74 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   18c74:	b580      	push	{r7, lr}
   18c76:	b088      	sub	sp, #32
   18c78:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   18c7a:	1d3b      	adds	r3, r7, #4
   18c7c:	0018      	movs	r0, r3
   18c7e:	4b1f      	ldr	r3, [pc, #124]	; (18cfc <configure_mqtt+0x88>)
   18c80:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   18c82:	1d3b      	adds	r3, r7, #4
   18c84:	4a1e      	ldr	r2, [pc, #120]	; (18d00 <configure_mqtt+0x8c>)
   18c86:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18c88:	1d3b      	adds	r3, r7, #4
   18c8a:	2280      	movs	r2, #128	; 0x80
   18c8c:	0092      	lsls	r2, r2, #2
   18c8e:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   18c90:	1d3b      	adds	r3, r7, #4
   18c92:	4a1c      	ldr	r2, [pc, #112]	; (18d04 <configure_mqtt+0x90>)
   18c94:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18c96:	1d3b      	adds	r3, r7, #4
   18c98:	2280      	movs	r2, #128	; 0x80
   18c9a:	0092      	lsls	r2, r2, #2
   18c9c:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   18c9e:	1d3b      	adds	r3, r7, #4
   18ca0:	4a19      	ldr	r2, [pc, #100]	; (18d08 <configure_mqtt+0x94>)
   18ca2:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   18ca4:	1d3b      	adds	r3, r7, #4
   18ca6:	4a19      	ldr	r2, [pc, #100]	; (18d0c <configure_mqtt+0x98>)
   18ca8:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   18caa:	1d3a      	adds	r2, r7, #4
   18cac:	4b18      	ldr	r3, [pc, #96]	; (18d10 <configure_mqtt+0x9c>)
   18cae:	0011      	movs	r1, r2
   18cb0:	0018      	movs	r0, r3
   18cb2:	4b18      	ldr	r3, [pc, #96]	; (18d14 <configure_mqtt+0xa0>)
   18cb4:	4798      	blx	r3
   18cb6:	0003      	movs	r3, r0
   18cb8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18cba:	69fb      	ldr	r3, [r7, #28]
   18cbc:	2b00      	cmp	r3, #0
   18cbe:	da06      	bge.n	18cce <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   18cc0:	69fa      	ldr	r2, [r7, #28]
   18cc2:	4b15      	ldr	r3, [pc, #84]	; (18d18 <configure_mqtt+0xa4>)
   18cc4:	0019      	movs	r1, r3
   18cc6:	2001      	movs	r0, #1
   18cc8:	4b14      	ldr	r3, [pc, #80]	; (18d1c <configure_mqtt+0xa8>)
   18cca:	4798      	blx	r3
        while (1) {
   18ccc:	e7fe      	b.n	18ccc <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   18cce:	4a14      	ldr	r2, [pc, #80]	; (18d20 <configure_mqtt+0xac>)
   18cd0:	4b0f      	ldr	r3, [pc, #60]	; (18d10 <configure_mqtt+0x9c>)
   18cd2:	0011      	movs	r1, r2
   18cd4:	0018      	movs	r0, r3
   18cd6:	4b13      	ldr	r3, [pc, #76]	; (18d24 <configure_mqtt+0xb0>)
   18cd8:	4798      	blx	r3
   18cda:	0003      	movs	r3, r0
   18cdc:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18cde:	69fb      	ldr	r3, [r7, #28]
   18ce0:	2b00      	cmp	r3, #0
   18ce2:	da06      	bge.n	18cf2 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   18ce4:	69fa      	ldr	r2, [r7, #28]
   18ce6:	4b10      	ldr	r3, [pc, #64]	; (18d28 <configure_mqtt+0xb4>)
   18ce8:	0019      	movs	r1, r3
   18cea:	2001      	movs	r0, #1
   18cec:	4b0b      	ldr	r3, [pc, #44]	; (18d1c <configure_mqtt+0xa8>)
   18cee:	4798      	blx	r3
        while (1) {
   18cf0:	e7fe      	b.n	18cf0 <configure_mqtt+0x7c>
        }
    }
}
   18cf2:	46c0      	nop			; (mov r8, r8)
   18cf4:	46bd      	mov	sp, r7
   18cf6:	b008      	add	sp, #32
   18cf8:	bd80      	pop	{r7, pc}
   18cfa:	46c0      	nop			; (mov r8, r8)
   18cfc:	00031961 	.word	0x00031961
   18d00:	20000760 	.word	0x20000760
   18d04:	20000960 	.word	0x20000960
   18d08:	0000075b 	.word	0x0000075b
   18d0c:	00001770 	.word	0x00001770
   18d10:	20000728 	.word	0x20000728
   18d14:	000318b1 	.word	0x000318b1
   18d18:	00039bd0 	.word	0x00039bd0
   18d1c:	000200b1 	.word	0x000200b1
   18d20:	00018b51 	.word	0x00018b51
   18d24:	000319a1 	.word	0x000319a1
   18d28:	00039c04 	.word	0x00039c04

00018d2c <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   18d2c:	b580      	push	{r7, lr}
   18d2e:	b084      	sub	sp, #16
   18d30:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   18d32:	1d3b      	adds	r3, r7, #4
   18d34:	0018      	movs	r0, r3
   18d36:	4b0b      	ldr	r3, [pc, #44]	; (18d64 <configure_extint_channel+0x38>)
   18d38:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   18d3a:	1d3b      	adds	r3, r7, #4
   18d3c:	2237      	movs	r2, #55	; 0x37
   18d3e:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   18d40:	1d3b      	adds	r3, r7, #4
   18d42:	2200      	movs	r2, #0
   18d44:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   18d46:	1d3b      	adds	r3, r7, #4
   18d48:	2201      	movs	r2, #1
   18d4a:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   18d4c:	1d3b      	adds	r3, r7, #4
   18d4e:	2202      	movs	r2, #2
   18d50:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   18d52:	1d3b      	adds	r3, r7, #4
   18d54:	0019      	movs	r1, r3
   18d56:	2007      	movs	r0, #7
   18d58:	4b03      	ldr	r3, [pc, #12]	; (18d68 <configure_extint_channel+0x3c>)
   18d5a:	4798      	blx	r3
}
   18d5c:	46c0      	nop			; (mov r8, r8)
   18d5e:	46bd      	mov	sp, r7
   18d60:	b004      	add	sp, #16
   18d62:	bd80      	pop	{r7, pc}
   18d64:	00028a3d 	.word	0x00028a3d
   18d68:	00028a71 	.word	0x00028a71

00018d6c <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   18d6c:	b580      	push	{r7, lr}
   18d6e:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18d70:	4b06      	ldr	r3, [pc, #24]	; (18d8c <configure_extint_callbacks+0x20>)
   18d72:	2200      	movs	r2, #0
   18d74:	2107      	movs	r1, #7
   18d76:	0018      	movs	r0, r3
   18d78:	4b05      	ldr	r3, [pc, #20]	; (18d90 <configure_extint_callbacks+0x24>)
   18d7a:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18d7c:	2100      	movs	r1, #0
   18d7e:	2007      	movs	r0, #7
   18d80:	4b04      	ldr	r3, [pc, #16]	; (18d94 <configure_extint_callbacks+0x28>)
   18d82:	4798      	blx	r3
}
   18d84:	46c0      	nop			; (mov r8, r8)
   18d86:	46bd      	mov	sp, r7
   18d88:	bd80      	pop	{r7, pc}
   18d8a:	46c0      	nop			; (mov r8, r8)
   18d8c:	00018d99 	.word	0x00018d99
   18d90:	0002863d 	.word	0x0002863d
   18d94:	000286a1 	.word	0x000286a1

00018d98 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   18d98:	b5b0      	push	{r4, r5, r7, lr}
   18d9a:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   18d9c:	4b0c      	ldr	r3, [pc, #48]	; (18dd0 <extint_detection_callback+0x38>)
   18d9e:	681b      	ldr	r3, [r3, #0]
   18da0:	1c5a      	adds	r2, r3, #1
   18da2:	4b0b      	ldr	r3, [pc, #44]	; (18dd0 <extint_detection_callback+0x38>)
   18da4:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   18da6:	4b0a      	ldr	r3, [pc, #40]	; (18dd0 <extint_detection_callback+0x38>)
   18da8:	681b      	ldr	r3, [r3, #0]
   18daa:	2b28      	cmp	r3, #40	; 0x28
   18dac:	d902      	bls.n	18db4 <extint_detection_callback+0x1c>
   18dae:	4b08      	ldr	r3, [pc, #32]	; (18dd0 <extint_detection_callback+0x38>)
   18db0:	2201      	movs	r2, #1
   18db2:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   18db4:	4b06      	ldr	r3, [pc, #24]	; (18dd0 <extint_detection_callback+0x38>)
   18db6:	681b      	ldr	r3, [r3, #0]
   18db8:	4a06      	ldr	r2, [pc, #24]	; (18dd4 <extint_detection_callback+0x3c>)
   18dba:	4807      	ldr	r0, [pc, #28]	; (18dd8 <extint_detection_callback+0x40>)
   18dbc:	213f      	movs	r1, #63	; 0x3f
   18dbe:	4c07      	ldr	r4, [pc, #28]	; (18ddc <extint_detection_callback+0x44>)
   18dc0:	47a0      	blx	r4
    isPressed = true;
   18dc2:	4b07      	ldr	r3, [pc, #28]	; (18de0 <extint_detection_callback+0x48>)
   18dc4:	2201      	movs	r2, #1
   18dc6:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   18dc8:	46c0      	nop			; (mov r8, r8)
   18dca:	46bd      	mov	sp, r7
   18dcc:	bdb0      	pop	{r4, r5, r7, pc}
   18dce:	46c0      	nop			; (mov r8, r8)
   18dd0:	200000ac 	.word	0x200000ac
   18dd4:	00039c38 	.word	0x00039c38
   18dd8:	20000068 	.word	0x20000068
   18ddc:	00037a79 	.word	0x00037a79
   18de0:	20000b60 	.word	0x20000b60

00018de4 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   18de4:	b580      	push	{r7, lr}
   18de6:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   18de8:	4a15      	ldr	r2, [pc, #84]	; (18e40 <HTTP_DownloadFileInit+0x5c>)
   18dea:	4b16      	ldr	r3, [pc, #88]	; (18e44 <HTTP_DownloadFileInit+0x60>)
   18dec:	0011      	movs	r1, r2
   18dee:	0018      	movs	r0, r3
   18df0:	4b15      	ldr	r3, [pc, #84]	; (18e48 <HTTP_DownloadFileInit+0x64>)
   18df2:	4798      	blx	r3
   18df4:	1e03      	subs	r3, r0, #0
   18df6:	d008      	beq.n	18e0a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   18df8:	4b14      	ldr	r3, [pc, #80]	; (18e4c <HTTP_DownloadFileInit+0x68>)
   18dfa:	0019      	movs	r1, r3
   18dfc:	2001      	movs	r0, #1
   18dfe:	4b14      	ldr	r3, [pc, #80]	; (18e50 <HTTP_DownloadFileInit+0x6c>)
   18e00:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   18e02:	e002      	b.n	18e0a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   18e04:	2000      	movs	r0, #0
   18e06:	4b13      	ldr	r3, [pc, #76]	; (18e54 <HTTP_DownloadFileInit+0x70>)
   18e08:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   18e0a:	4b0e      	ldr	r3, [pc, #56]	; (18e44 <HTTP_DownloadFileInit+0x60>)
   18e0c:	2234      	movs	r2, #52	; 0x34
   18e0e:	5c9b      	ldrb	r3, [r3, r2]
   18e10:	2b00      	cmp	r3, #0
   18e12:	d1f7      	bne.n	18e04 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   18e14:	4b10      	ldr	r3, [pc, #64]	; (18e58 <HTTP_DownloadFileInit+0x74>)
   18e16:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   18e18:	4b10      	ldr	r3, [pc, #64]	; (18e5c <HTTP_DownloadFileInit+0x78>)
   18e1a:	2201      	movs	r2, #1
   18e1c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   18e1e:	4a10      	ldr	r2, [pc, #64]	; (18e60 <HTTP_DownloadFileInit+0x7c>)
   18e20:	4b10      	ldr	r3, [pc, #64]	; (18e64 <HTTP_DownloadFileInit+0x80>)
   18e22:	0011      	movs	r1, r2
   18e24:	0018      	movs	r0, r3
   18e26:	4b10      	ldr	r3, [pc, #64]	; (18e68 <HTTP_DownloadFileInit+0x84>)
   18e28:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   18e2a:	4b10      	ldr	r3, [pc, #64]	; (18e6c <HTTP_DownloadFileInit+0x88>)
   18e2c:	4798      	blx	r3

    start_download();
   18e2e:	4b10      	ldr	r3, [pc, #64]	; (18e70 <HTTP_DownloadFileInit+0x8c>)
   18e30:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   18e32:	4b10      	ldr	r3, [pc, #64]	; (18e74 <HTTP_DownloadFileInit+0x90>)
   18e34:	2203      	movs	r2, #3
   18e36:	701a      	strb	r2, [r3, #0]
}
   18e38:	46c0      	nop			; (mov r8, r8)
   18e3a:	46bd      	mov	sp, r7
   18e3c:	bd80      	pop	{r7, pc}
   18e3e:	46c0      	nop			; (mov r8, r8)
   18e40:	000393b0 	.word	0x000393b0
   18e44:	20000728 	.word	0x20000728
   18e48:	00031b55 	.word	0x00031b55
   18e4c:	000397e0 	.word	0x000397e0
   18e50:	000200b1 	.word	0x000200b1
   18e54:	0002412d 	.word	0x0002412d
   18e58:	000276e9 	.word	0x000276e9
   18e5c:	200004c8 	.word	0x200004c8
   18e60:	000185ed 	.word	0x000185ed
   18e64:	000185b9 	.word	0x000185b9
   18e68:	00027731 	.word	0x00027731
   18e6c:	00027699 	.word	0x00027699
   18e70:	000181e1 	.word	0x000181e1
   18e74:	200004b3 	.word	0x200004b3

00018e78 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   18e78:	b590      	push	{r4, r7, lr}
   18e7a:	b085      	sub	sp, #20
   18e7c:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   18e7e:	e009      	b.n	18e94 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   18e80:	2000      	movs	r0, #0
   18e82:	4b2a      	ldr	r3, [pc, #168]	; (18f2c <HTTP_DownloadFileTransaction+0xb4>)
   18e84:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   18e86:	4b2a      	ldr	r3, [pc, #168]	; (18f30 <HTTP_DownloadFileTransaction+0xb8>)
   18e88:	0018      	movs	r0, r3
   18e8a:	4b2a      	ldr	r3, [pc, #168]	; (18f34 <HTTP_DownloadFileTransaction+0xbc>)
   18e8c:	4798      	blx	r3
        vTaskDelay(5);
   18e8e:	2005      	movs	r0, #5
   18e90:	4b29      	ldr	r3, [pc, #164]	; (18f38 <HTTP_DownloadFileTransaction+0xc0>)
   18e92:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   18e94:	2010      	movs	r0, #16
   18e96:	4b29      	ldr	r3, [pc, #164]	; (18f3c <HTTP_DownloadFileTransaction+0xc4>)
   18e98:	4798      	blx	r3
   18e9a:	0003      	movs	r3, r0
   18e9c:	001a      	movs	r2, r3
   18e9e:	2301      	movs	r3, #1
   18ea0:	4053      	eors	r3, r2
   18ea2:	b2db      	uxtb	r3, r3
   18ea4:	2b00      	cmp	r3, #0
   18ea6:	d009      	beq.n	18ebc <HTTP_DownloadFileTransaction+0x44>
   18ea8:	2020      	movs	r0, #32
   18eaa:	4b24      	ldr	r3, [pc, #144]	; (18f3c <HTTP_DownloadFileTransaction+0xc4>)
   18eac:	4798      	blx	r3
   18eae:	0003      	movs	r3, r0
   18eb0:	001a      	movs	r2, r3
   18eb2:	2301      	movs	r3, #1
   18eb4:	4053      	eors	r3, r2
   18eb6:	b2db      	uxtb	r3, r3
   18eb8:	2b00      	cmp	r3, #0
   18eba:	d1e1      	bne.n	18e80 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   18ebc:	4b20      	ldr	r3, [pc, #128]	; (18f40 <HTTP_DownloadFileTransaction+0xc8>)
   18ebe:	4798      	blx	r3
    vTaskDelay(1000);
   18ec0:	23fa      	movs	r3, #250	; 0xfa
   18ec2:	009b      	lsls	r3, r3, #2
   18ec4:	0018      	movs	r0, r3
   18ec6:	4b1c      	ldr	r3, [pc, #112]	; (18f38 <HTTP_DownloadFileTransaction+0xc0>)
   18ec8:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   18eca:	4b1e      	ldr	r3, [pc, #120]	; (18f44 <HTTP_DownloadFileTransaction+0xcc>)
   18ecc:	2200      	movs	r2, #0
   18ece:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   18ed0:	003b      	movs	r3, r7
   18ed2:	4a1d      	ldr	r2, [pc, #116]	; (18f48 <HTTP_DownloadFileTransaction+0xd0>)
   18ed4:	ca13      	ldmia	r2!, {r0, r1, r4}
   18ed6:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   18ed8:	003b      	movs	r3, r7
   18eda:	2230      	movs	r2, #48	; 0x30
   18edc:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   18ede:	230f      	movs	r3, #15
   18ee0:	18fc      	adds	r4, r7, r3
   18ee2:	0039      	movs	r1, r7
   18ee4:	4b19      	ldr	r3, [pc, #100]	; (18f4c <HTTP_DownloadFileTransaction+0xd4>)
   18ee6:	220a      	movs	r2, #10
   18ee8:	0018      	movs	r0, r3
   18eea:	4b19      	ldr	r3, [pc, #100]	; (18f50 <HTTP_DownloadFileTransaction+0xd8>)
   18eec:	4798      	blx	r3
   18eee:	0003      	movs	r3, r0
   18ef0:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   18ef2:	230f      	movs	r3, #15
   18ef4:	18fb      	adds	r3, r7, r3
   18ef6:	781b      	ldrb	r3, [r3, #0]
   18ef8:	2b00      	cmp	r3, #0
   18efa:	d008      	beq.n	18f0e <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   18efc:	230f      	movs	r3, #15
   18efe:	18fb      	adds	r3, r7, r3
   18f00:	781a      	ldrb	r2, [r3, #0]
   18f02:	4b14      	ldr	r3, [pc, #80]	; (18f54 <HTTP_DownloadFileTransaction+0xdc>)
   18f04:	0019      	movs	r1, r3
   18f06:	2000      	movs	r0, #0
   18f08:	4b13      	ldr	r3, [pc, #76]	; (18f58 <HTTP_DownloadFileTransaction+0xe0>)
   18f0a:	4798      	blx	r3
   18f0c:	e003      	b.n	18f16 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   18f0e:	4b13      	ldr	r3, [pc, #76]	; (18f5c <HTTP_DownloadFileTransaction+0xe4>)
   18f10:	0018      	movs	r0, r3
   18f12:	4b13      	ldr	r3, [pc, #76]	; (18f60 <HTTP_DownloadFileTransaction+0xe8>)
   18f14:	4798      	blx	r3
    }
	
	f_close(&file_object);
   18f16:	4b0d      	ldr	r3, [pc, #52]	; (18f4c <HTTP_DownloadFileTransaction+0xd4>)
   18f18:	0018      	movs	r0, r3
   18f1a:	4b12      	ldr	r3, [pc, #72]	; (18f64 <HTTP_DownloadFileTransaction+0xec>)
   18f1c:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   18f1e:	4b12      	ldr	r3, [pc, #72]	; (18f68 <HTTP_DownloadFileTransaction+0xf0>)
   18f20:	2200      	movs	r2, #0
   18f22:	701a      	strb	r2, [r3, #0]
}
   18f24:	46c0      	nop			; (mov r8, r8)
   18f26:	46bd      	mov	sp, r7
   18f28:	b005      	add	sp, #20
   18f2a:	bd90      	pop	{r4, r7, pc}
   18f2c:	0002412d 	.word	0x0002412d
   18f30:	2000473c 	.word	0x2000473c
   18f34:	0003487d 	.word	0x0003487d
   18f38:	0001e371 	.word	0x0001e371
   18f3c:	00017eb9 	.word	0x00017eb9
   18f40:	000276e9 	.word	0x000276e9
   18f44:	200004c8 	.word	0x200004c8
   18f48:	00039c70 	.word	0x00039c70
   18f4c:	200006fc 	.word	0x200006fc
   18f50:	0002fb45 	.word	0x0002fb45
   18f54:	00039c4c 	.word	0x00039c4c
   18f58:	000200b1 	.word	0x000200b1
   18f5c:	00039c5c 	.word	0x00039c5c
   18f60:	0001ffc5 	.word	0x0001ffc5
   18f64:	00030545 	.word	0x00030545
   18f68:	200004b3 	.word	0x200004b3

00018f6c <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   18f6c:	b580      	push	{r7, lr}
   18f6e:	af00      	add	r7, sp, #0
    socketDeinit();
   18f70:	4b18      	ldr	r3, [pc, #96]	; (18fd4 <MQTT_InitRoutine+0x68>)
   18f72:	4798      	blx	r3
    configure_mqtt();
   18f74:	4b18      	ldr	r3, [pc, #96]	; (18fd8 <MQTT_InitRoutine+0x6c>)
   18f76:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   18f78:	4a18      	ldr	r2, [pc, #96]	; (18fdc <MQTT_InitRoutine+0x70>)
   18f7a:	4b19      	ldr	r3, [pc, #100]	; (18fe0 <MQTT_InitRoutine+0x74>)
   18f7c:	0011      	movs	r1, r2
   18f7e:	0018      	movs	r0, r3
   18f80:	4b18      	ldr	r3, [pc, #96]	; (18fe4 <MQTT_InitRoutine+0x78>)
   18f82:	4798      	blx	r3
    socketInit();
   18f84:	4b18      	ldr	r3, [pc, #96]	; (18fe8 <MQTT_InitRoutine+0x7c>)
   18f86:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   18f88:	4b18      	ldr	r3, [pc, #96]	; (18fec <MQTT_InitRoutine+0x80>)
   18f8a:	2234      	movs	r2, #52	; 0x34
   18f8c:	5c9b      	ldrb	r3, [r3, r2]
   18f8e:	2201      	movs	r2, #1
   18f90:	4053      	eors	r3, r2
   18f92:	b2db      	uxtb	r3, r3
   18f94:	2b00      	cmp	r3, #0
   18f96:	d00c      	beq.n	18fb2 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   18f98:	4a15      	ldr	r2, [pc, #84]	; (18ff0 <MQTT_InitRoutine+0x84>)
   18f9a:	4b14      	ldr	r3, [pc, #80]	; (18fec <MQTT_InitRoutine+0x80>)
   18f9c:	0011      	movs	r1, r2
   18f9e:	0018      	movs	r0, r3
   18fa0:	4b14      	ldr	r3, [pc, #80]	; (18ff4 <MQTT_InitRoutine+0x88>)
   18fa2:	4798      	blx	r3
   18fa4:	1e03      	subs	r3, r0, #0
   18fa6:	d004      	beq.n	18fb2 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   18fa8:	4b13      	ldr	r3, [pc, #76]	; (18ff8 <MQTT_InitRoutine+0x8c>)
   18faa:	0019      	movs	r1, r3
   18fac:	2001      	movs	r0, #1
   18fae:	4b13      	ldr	r3, [pc, #76]	; (18ffc <MQTT_InitRoutine+0x90>)
   18fb0:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   18fb2:	4b0e      	ldr	r3, [pc, #56]	; (18fec <MQTT_InitRoutine+0x80>)
   18fb4:	2234      	movs	r2, #52	; 0x34
   18fb6:	5c9b      	ldrb	r3, [r3, r2]
   18fb8:	2b00      	cmp	r3, #0
   18fba:	d004      	beq.n	18fc6 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   18fbc:	4b10      	ldr	r3, [pc, #64]	; (19000 <MQTT_InitRoutine+0x94>)
   18fbe:	0019      	movs	r1, r3
   18fc0:	2001      	movs	r0, #1
   18fc2:	4b0e      	ldr	r3, [pc, #56]	; (18ffc <MQTT_InitRoutine+0x90>)
   18fc4:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   18fc6:	4b0f      	ldr	r3, [pc, #60]	; (19004 <MQTT_InitRoutine+0x98>)
   18fc8:	2201      	movs	r2, #1
   18fca:	701a      	strb	r2, [r3, #0]
}
   18fcc:	46c0      	nop			; (mov r8, r8)
   18fce:	46bd      	mov	sp, r7
   18fd0:	bd80      	pop	{r7, pc}
   18fd2:	46c0      	nop			; (mov r8, r8)
   18fd4:	000276e9 	.word	0x000276e9
   18fd8:	00018c75 	.word	0x00018c75
   18fdc:	00018999 	.word	0x00018999
   18fe0:	00018965 	.word	0x00018965
   18fe4:	00027731 	.word	0x00027731
   18fe8:	00027699 	.word	0x00027699
   18fec:	20000728 	.word	0x20000728
   18ff0:	000393b0 	.word	0x000393b0
   18ff4:	00031a21 	.word	0x00031a21
   18ff8:	000397e0 	.word	0x000397e0
   18ffc:	000200b1 	.word	0x000200b1
   19000:	00039c7c 	.word	0x00039c7c
   19004:	200004b3 	.word	0x200004b3

00019008 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   19008:	b580      	push	{r7, lr}
   1900a:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   1900c:	2000      	movs	r0, #0
   1900e:	4b0c      	ldr	r3, [pc, #48]	; (19040 <MQTT_HandleTransactions+0x38>)
   19010:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   19012:	4b0c      	ldr	r3, [pc, #48]	; (19044 <MQTT_HandleTransactions+0x3c>)
   19014:	0018      	movs	r0, r3
   19016:	4b0c      	ldr	r3, [pc, #48]	; (19048 <MQTT_HandleTransactions+0x40>)
   19018:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   1901a:	4b0c      	ldr	r3, [pc, #48]	; (1904c <MQTT_HandleTransactions+0x44>)
   1901c:	4798      	blx	r3
    MQTT_HandleImuMessages();
   1901e:	4b0c      	ldr	r3, [pc, #48]	; (19050 <MQTT_HandleTransactions+0x48>)
   19020:	4798      	blx	r3
	MQTT_HandleBmeMessages();
   19022:	4b0c      	ldr	r3, [pc, #48]	; (19054 <MQTT_HandleTransactions+0x4c>)
   19024:	4798      	blx	r3


    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   19026:	4b0c      	ldr	r3, [pc, #48]	; (19058 <MQTT_HandleTransactions+0x50>)
   19028:	2234      	movs	r2, #52	; 0x34
   1902a:	5c9b      	ldrb	r3, [r3, r2]
   1902c:	2b00      	cmp	r3, #0
   1902e:	d004      	beq.n	1903a <MQTT_HandleTransactions+0x32>
   19030:	4b09      	ldr	r3, [pc, #36]	; (19058 <MQTT_HandleTransactions+0x50>)
   19032:	2164      	movs	r1, #100	; 0x64
   19034:	0018      	movs	r0, r3
   19036:	4b09      	ldr	r3, [pc, #36]	; (1905c <MQTT_HandleTransactions+0x54>)
   19038:	4798      	blx	r3
}
   1903a:	46c0      	nop			; (mov r8, r8)
   1903c:	46bd      	mov	sp, r7
   1903e:	bd80      	pop	{r7, pc}
   19040:	0002412d 	.word	0x0002412d
   19044:	2000473c 	.word	0x2000473c
   19048:	0003487d 	.word	0x0003487d
   1904c:	0001917d 	.word	0x0001917d
   19050:	00019061 	.word	0x00019061
   19054:	000190ed 	.word	0x000190ed
   19058:	20000728 	.word	0x20000728
   1905c:	00031c51 	.word	0x00031c51

00019060 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   19060:	b590      	push	{r4, r7, lr}
   19062:	b085      	sub	sp, #20
   19064:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   19066:	4b18      	ldr	r3, [pc, #96]	; (190c8 <MQTT_HandleImuMessages+0x68>)
   19068:	681b      	ldr	r3, [r3, #0]
   1906a:	0039      	movs	r1, r7
   1906c:	2200      	movs	r2, #0
   1906e:	0018      	movs	r0, r3
   19070:	4b16      	ldr	r3, [pc, #88]	; (190cc <MQTT_HandleImuMessages+0x6c>)
   19072:	4798      	blx	r3
   19074:	0003      	movs	r3, r0
   19076:	2b01      	cmp	r3, #1
   19078:	d121      	bne.n	190be <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   1907a:	003b      	movs	r3, r7
   1907c:	2200      	movs	r2, #0
   1907e:	5e9b      	ldrsh	r3, [r3, r2]
   19080:	001c      	movs	r4, r3
   19082:	003b      	movs	r3, r7
   19084:	2202      	movs	r2, #2
   19086:	5e9b      	ldrsh	r3, [r3, r2]
   19088:	0019      	movs	r1, r3
   1908a:	003b      	movs	r3, r7
   1908c:	2204      	movs	r2, #4
   1908e:	5e9b      	ldrsh	r3, [r3, r2]
   19090:	4a0f      	ldr	r2, [pc, #60]	; (190d0 <MQTT_HandleImuMessages+0x70>)
   19092:	4810      	ldr	r0, [pc, #64]	; (190d4 <MQTT_HandleImuMessages+0x74>)
   19094:	9301      	str	r3, [sp, #4]
   19096:	9100      	str	r1, [sp, #0]
   19098:	0023      	movs	r3, r4
   1909a:	213f      	movs	r1, #63	; 0x3f
   1909c:	4c0e      	ldr	r4, [pc, #56]	; (190d8 <MQTT_HandleImuMessages+0x78>)
   1909e:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   190a0:	4b0c      	ldr	r3, [pc, #48]	; (190d4 <MQTT_HandleImuMessages+0x74>)
   190a2:	0018      	movs	r0, r3
   190a4:	4b0d      	ldr	r3, [pc, #52]	; (190dc <MQTT_HandleImuMessages+0x7c>)
   190a6:	4798      	blx	r3
   190a8:	0004      	movs	r4, r0
   190aa:	4a0a      	ldr	r2, [pc, #40]	; (190d4 <MQTT_HandleImuMessages+0x74>)
   190ac:	490c      	ldr	r1, [pc, #48]	; (190e0 <MQTT_HandleImuMessages+0x80>)
   190ae:	480d      	ldr	r0, [pc, #52]	; (190e4 <MQTT_HandleImuMessages+0x84>)
   190b0:	2300      	movs	r3, #0
   190b2:	9301      	str	r3, [sp, #4]
   190b4:	2301      	movs	r3, #1
   190b6:	9300      	str	r3, [sp, #0]
   190b8:	0023      	movs	r3, r4
   190ba:	4c0b      	ldr	r4, [pc, #44]	; (190e8 <MQTT_HandleImuMessages+0x88>)
   190bc:	47a0      	blx	r4
    }
}
   190be:	46c0      	nop			; (mov r8, r8)
   190c0:	46bd      	mov	sp, r7
   190c2:	b003      	add	sp, #12
   190c4:	bd90      	pop	{r4, r7, pc}
   190c6:	46c0      	nop			; (mov r8, r8)
   190c8:	200004bc 	.word	0x200004bc
   190cc:	0001d1c5 	.word	0x0001d1c5
   190d0:	00039c98 	.word	0x00039c98
   190d4:	20000028 	.word	0x20000028
   190d8:	00037a79 	.word	0x00037a79
   190dc:	00037bd7 	.word	0x00037bd7
   190e0:	00039cbc 	.word	0x00039cbc
   190e4:	20000728 	.word	0x20000728
   190e8:	00031b9d 	.word	0x00031b9d

000190ec <MQTT_HandleBmeMessages>:
static void MQTT_HandleBmeMessages(void)
{
   190ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   190ee:	b08b      	sub	sp, #44	; 0x2c
   190f0:	af04      	add	r7, sp, #16
	struct BMEDataPacket bmeDataVar;
	if (pdPASS == xQueueReceive(xQueueBmeBuffer, &bmeDataVar, 0)) {
   190f2:	4b19      	ldr	r3, [pc, #100]	; (19158 <MQTT_HandleBmeMessages+0x6c>)
   190f4:	681b      	ldr	r3, [r3, #0]
   190f6:	1d39      	adds	r1, r7, #4
   190f8:	2200      	movs	r2, #0
   190fa:	0018      	movs	r0, r3
   190fc:	4b17      	ldr	r3, [pc, #92]	; (1915c <MQTT_HandleBmeMessages+0x70>)
   190fe:	4798      	blx	r3
   19100:	0003      	movs	r3, r0
   19102:	2b01      	cmp	r3, #1
   19104:	d124      	bne.n	19150 <MQTT_HandleBmeMessages+0x64>
		snprintf(mqtt_msg, 63, "{\"temp\":%d, \"hum\": %d, \"pre\": %d, \"war\": %d, \"gas\": %d}", bmeDataVar.temperature, bmeDataVar.humidity, bmeDataVar.pressure,bmeDataVar.warning_status,bmeDataVar.gas_res);
   19106:	1d3b      	adds	r3, r7, #4
   19108:	681e      	ldr	r6, [r3, #0]
   1910a:	1d3b      	adds	r3, r7, #4
   1910c:	685a      	ldr	r2, [r3, #4]
   1910e:	1d3b      	adds	r3, r7, #4
   19110:	6899      	ldr	r1, [r3, #8]
   19112:	1d3b      	adds	r3, r7, #4
   19114:	68d8      	ldr	r0, [r3, #12]
   19116:	1d3b      	adds	r3, r7, #4
   19118:	691b      	ldr	r3, [r3, #16]
   1911a:	4d11      	ldr	r5, [pc, #68]	; (19160 <MQTT_HandleBmeMessages+0x74>)
   1911c:	4c11      	ldr	r4, [pc, #68]	; (19164 <MQTT_HandleBmeMessages+0x78>)
   1911e:	9303      	str	r3, [sp, #12]
   19120:	9002      	str	r0, [sp, #8]
   19122:	9101      	str	r1, [sp, #4]
   19124:	9200      	str	r2, [sp, #0]
   19126:	0033      	movs	r3, r6
   19128:	002a      	movs	r2, r5
   1912a:	213f      	movs	r1, #63	; 0x3f
   1912c:	0020      	movs	r0, r4
   1912e:	4c0e      	ldr	r4, [pc, #56]	; (19168 <MQTT_HandleBmeMessages+0x7c>)
   19130:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, BME_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   19132:	4b0c      	ldr	r3, [pc, #48]	; (19164 <MQTT_HandleBmeMessages+0x78>)
   19134:	0018      	movs	r0, r3
   19136:	4b0d      	ldr	r3, [pc, #52]	; (1916c <MQTT_HandleBmeMessages+0x80>)
   19138:	4798      	blx	r3
   1913a:	0004      	movs	r4, r0
   1913c:	4a09      	ldr	r2, [pc, #36]	; (19164 <MQTT_HandleBmeMessages+0x78>)
   1913e:	490c      	ldr	r1, [pc, #48]	; (19170 <MQTT_HandleBmeMessages+0x84>)
   19140:	480c      	ldr	r0, [pc, #48]	; (19174 <MQTT_HandleBmeMessages+0x88>)
   19142:	2300      	movs	r3, #0
   19144:	9301      	str	r3, [sp, #4]
   19146:	2301      	movs	r3, #1
   19148:	9300      	str	r3, [sp, #0]
   1914a:	0023      	movs	r3, r4
   1914c:	4c0a      	ldr	r4, [pc, #40]	; (19178 <MQTT_HandleBmeMessages+0x8c>)
   1914e:	47a0      	blx	r4
	}
}
   19150:	46c0      	nop			; (mov r8, r8)
   19152:	46bd      	mov	sp, r7
   19154:	b007      	add	sp, #28
   19156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19158:	200004c4 	.word	0x200004c4
   1915c:	0001d1c5 	.word	0x0001d1c5
   19160:	00039cd0 	.word	0x00039cd0
   19164:	20000028 	.word	0x20000028
   19168:	00037a79 	.word	0x00037a79
   1916c:	00037bd7 	.word	0x00037bd7
   19170:	00039d08 	.word	0x00039d08
   19174:	20000728 	.word	0x20000728
   19178:	00031b9d 	.word	0x00031b9d

0001917c <MQTT_HandleGameMessages>:


static void MQTT_HandleGameMessages(void)
{
   1917c:	b590      	push	{r4, r7, lr}
   1917e:	b08b      	sub	sp, #44	; 0x2c
   19180:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   19182:	4b39      	ldr	r3, [pc, #228]	; (19268 <MQTT_HandleGameMessages+0xec>)
   19184:	681b      	ldr	r3, [r3, #0]
   19186:	2208      	movs	r2, #8
   19188:	18b9      	adds	r1, r7, r2
   1918a:	2200      	movs	r2, #0
   1918c:	0018      	movs	r0, r3
   1918e:	4b37      	ldr	r3, [pc, #220]	; (1926c <MQTT_HandleGameMessages+0xf0>)
   19190:	4798      	blx	r3
   19192:	0003      	movs	r3, r0
   19194:	2b01      	cmp	r3, #1
   19196:	d163      	bne.n	19260 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   19198:	4b35      	ldr	r3, [pc, #212]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   1919a:	4a36      	ldr	r2, [pc, #216]	; (19274 <MQTT_HandleGameMessages+0xf8>)
   1919c:	ca03      	ldmia	r2!, {r0, r1}
   1919e:	c303      	stmia	r3!, {r0, r1}
   191a0:	8812      	ldrh	r2, [r2, #0]
   191a2:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   191a4:	2300      	movs	r3, #0
   191a6:	61fb      	str	r3, [r7, #28]
   191a8:	e02d      	b.n	19206 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   191aa:	2308      	movs	r3, #8
   191ac:	18fa      	adds	r2, r7, r3
   191ae:	69fb      	ldr	r3, [r7, #28]
   191b0:	18d3      	adds	r3, r2, r3
   191b2:	781b      	ldrb	r3, [r3, #0]
   191b4:	2bff      	cmp	r3, #255	; 0xff
   191b6:	d02a      	beq.n	1920e <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   191b8:	2308      	movs	r3, #8
   191ba:	18fa      	adds	r2, r7, r3
   191bc:	69fb      	ldr	r3, [r7, #28]
   191be:	18d3      	adds	r3, r2, r3
   191c0:	781b      	ldrb	r3, [r3, #0]
   191c2:	4a2d      	ldr	r2, [pc, #180]	; (19278 <MQTT_HandleGameMessages+0xfc>)
   191c4:	0038      	movs	r0, r7
   191c6:	2103      	movs	r1, #3
   191c8:	4c2c      	ldr	r4, [pc, #176]	; (1927c <MQTT_HandleGameMessages+0x100>)
   191ca:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   191cc:	003a      	movs	r2, r7
   191ce:	4b28      	ldr	r3, [pc, #160]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   191d0:	0011      	movs	r1, r2
   191d2:	0018      	movs	r0, r3
   191d4:	4b2a      	ldr	r3, [pc, #168]	; (19280 <MQTT_HandleGameMessages+0x104>)
   191d6:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   191d8:	69fb      	ldr	r3, [r7, #28]
   191da:	3301      	adds	r3, #1
   191dc:	2208      	movs	r2, #8
   191de:	18ba      	adds	r2, r7, r2
   191e0:	5cd3      	ldrb	r3, [r2, r3]
   191e2:	2bff      	cmp	r3, #255	; 0xff
   191e4:	d00c      	beq.n	19200 <MQTT_HandleGameMessages+0x84>
   191e6:	69fb      	ldr	r3, [r7, #28]
   191e8:	3301      	adds	r3, #1
   191ea:	2b13      	cmp	r3, #19
   191ec:	dc08      	bgt.n	19200 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   191ee:	003b      	movs	r3, r7
   191f0:	222c      	movs	r2, #44	; 0x2c
   191f2:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   191f4:	003a      	movs	r2, r7
   191f6:	4b1e      	ldr	r3, [pc, #120]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   191f8:	0011      	movs	r1, r2
   191fa:	0018      	movs	r0, r3
   191fc:	4b20      	ldr	r3, [pc, #128]	; (19280 <MQTT_HandleGameMessages+0x104>)
   191fe:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   19200:	69fb      	ldr	r3, [r7, #28]
   19202:	3301      	adds	r3, #1
   19204:	61fb      	str	r3, [r7, #28]
   19206:	69fb      	ldr	r3, [r7, #28]
   19208:	2b13      	cmp	r3, #19
   1920a:	ddce      	ble.n	191aa <MQTT_HandleGameMessages+0x2e>
   1920c:	e000      	b.n	19210 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   1920e:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   19210:	4b17      	ldr	r3, [pc, #92]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   19212:	0018      	movs	r0, r3
   19214:	4b1b      	ldr	r3, [pc, #108]	; (19284 <MQTT_HandleGameMessages+0x108>)
   19216:	4798      	blx	r3
   19218:	0003      	movs	r3, r0
   1921a:	001a      	movs	r2, r3
   1921c:	4b14      	ldr	r3, [pc, #80]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   1921e:	18d2      	adds	r2, r2, r3
   19220:	4b19      	ldr	r3, [pc, #100]	; (19288 <MQTT_HandleGameMessages+0x10c>)
   19222:	0010      	movs	r0, r2
   19224:	0019      	movs	r1, r3
   19226:	2303      	movs	r3, #3
   19228:	001a      	movs	r2, r3
   1922a:	4b18      	ldr	r3, [pc, #96]	; (1928c <MQTT_HandleGameMessages+0x110>)
   1922c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   1922e:	4b10      	ldr	r3, [pc, #64]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   19230:	0019      	movs	r1, r3
   19232:	2001      	movs	r0, #1
   19234:	4b16      	ldr	r3, [pc, #88]	; (19290 <MQTT_HandleGameMessages+0x114>)
   19236:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   19238:	4b16      	ldr	r3, [pc, #88]	; (19294 <MQTT_HandleGameMessages+0x118>)
   1923a:	0019      	movs	r1, r3
   1923c:	2001      	movs	r0, #1
   1923e:	4b14      	ldr	r3, [pc, #80]	; (19290 <MQTT_HandleGameMessages+0x114>)
   19240:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   19242:	4b0b      	ldr	r3, [pc, #44]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   19244:	0018      	movs	r0, r3
   19246:	4b0f      	ldr	r3, [pc, #60]	; (19284 <MQTT_HandleGameMessages+0x108>)
   19248:	4798      	blx	r3
   1924a:	0004      	movs	r4, r0
   1924c:	4a08      	ldr	r2, [pc, #32]	; (19270 <MQTT_HandleGameMessages+0xf4>)
   1924e:	4912      	ldr	r1, [pc, #72]	; (19298 <MQTT_HandleGameMessages+0x11c>)
   19250:	4812      	ldr	r0, [pc, #72]	; (1929c <MQTT_HandleGameMessages+0x120>)
   19252:	2300      	movs	r3, #0
   19254:	9301      	str	r3, [sp, #4]
   19256:	2301      	movs	r3, #1
   19258:	9300      	str	r3, [sp, #0]
   1925a:	0023      	movs	r3, r4
   1925c:	4c10      	ldr	r4, [pc, #64]	; (192a0 <MQTT_HandleGameMessages+0x124>)
   1925e:	47a0      	blx	r4
    }
}
   19260:	46c0      	nop			; (mov r8, r8)
   19262:	46bd      	mov	sp, r7
   19264:	b009      	add	sp, #36	; 0x24
   19266:	bd90      	pop	{r4, r7, pc}
   19268:	200004b8 	.word	0x200004b8
   1926c:	0001d1c5 	.word	0x0001d1c5
   19270:	20000028 	.word	0x20000028
   19274:	000399c8 	.word	0x000399c8
   19278:	00039d18 	.word	0x00039d18
   1927c:	00037a79 	.word	0x00037a79
   19280:	00037b5d 	.word	0x00037b5d
   19284:	00037bd7 	.word	0x00037bd7
   19288:	00039d1c 	.word	0x00039d1c
   1928c:	000377e9 	.word	0x000377e9
   19290:	000200b1 	.word	0x000200b1
   19294:	00039d20 	.word	0x00039d20
   19298:	00039d24 	.word	0x00039d24
   1929c:	20000728 	.word	0x20000728
   192a0:	00031b9d 	.word	0x00031b9d

000192a4 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   192a4:	b590      	push	{r4, r7, lr}
   192a6:	b097      	sub	sp, #92	; 0x5c
   192a8:	af02      	add	r7, sp, #8
   192aa:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   192ac:	2064      	movs	r0, #100	; 0x64
   192ae:	4ba6      	ldr	r3, [pc, #664]	; (19548 <vWifiTask+0x2a4>)
   192b0:	4798      	blx	r3
    init_state();
   192b2:	4ba6      	ldr	r3, [pc, #664]	; (1954c <vWifiTask+0x2a8>)
   192b4:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   192b6:	2200      	movs	r2, #0
   192b8:	2104      	movs	r1, #4
   192ba:	2005      	movs	r0, #5
   192bc:	4ba4      	ldr	r3, [pc, #656]	; (19550 <vWifiTask+0x2ac>)
   192be:	4798      	blx	r3
   192c0:	0002      	movs	r2, r0
   192c2:	4ba4      	ldr	r3, [pc, #656]	; (19554 <vWifiTask+0x2b0>)
   192c4:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   192c6:	2200      	movs	r2, #0
   192c8:	2106      	movs	r1, #6
   192ca:	2005      	movs	r0, #5
   192cc:	4ba0      	ldr	r3, [pc, #640]	; (19550 <vWifiTask+0x2ac>)
   192ce:	4798      	blx	r3
   192d0:	0002      	movs	r2, r0
   192d2:	4ba1      	ldr	r3, [pc, #644]	; (19558 <vWifiTask+0x2b4>)
   192d4:	601a      	str	r2, [r3, #0]
	xQueueBmeBuffer = xQueueCreate(5,sizeof(struct BMEDataPacket));
   192d6:	2200      	movs	r2, #0
   192d8:	2114      	movs	r1, #20
   192da:	2005      	movs	r0, #5
   192dc:	4b9c      	ldr	r3, [pc, #624]	; (19550 <vWifiTask+0x2ac>)
   192de:	4798      	blx	r3
   192e0:	0002      	movs	r2, r0
   192e2:	4b9e      	ldr	r3, [pc, #632]	; (1955c <vWifiTask+0x2b8>)
   192e4:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   192e6:	2200      	movs	r2, #0
   192e8:	2114      	movs	r1, #20
   192ea:	2002      	movs	r0, #2
   192ec:	4b98      	ldr	r3, [pc, #608]	; (19550 <vWifiTask+0x2ac>)
   192ee:	4798      	blx	r3
   192f0:	0002      	movs	r2, r0
   192f2:	4b9b      	ldr	r3, [pc, #620]	; (19560 <vWifiTask+0x2bc>)
   192f4:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   192f6:	2200      	movs	r2, #0
   192f8:	2102      	movs	r1, #2
   192fa:	2005      	movs	r0, #5
   192fc:	4b94      	ldr	r3, [pc, #592]	; (19550 <vWifiTask+0x2ac>)
   192fe:	4798      	blx	r3
   19300:	0002      	movs	r2, r0
   19302:	4b98      	ldr	r3, [pc, #608]	; (19564 <vWifiTask+0x2c0>)
   19304:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueBmeBuffer == NULL) {
   19306:	4b93      	ldr	r3, [pc, #588]	; (19554 <vWifiTask+0x2b0>)
   19308:	681b      	ldr	r3, [r3, #0]
   1930a:	2b00      	cmp	r3, #0
   1930c:	d00f      	beq.n	1932e <vWifiTask+0x8a>
   1930e:	4b92      	ldr	r3, [pc, #584]	; (19558 <vWifiTask+0x2b4>)
   19310:	681b      	ldr	r3, [r3, #0]
   19312:	2b00      	cmp	r3, #0
   19314:	d00b      	beq.n	1932e <vWifiTask+0x8a>
   19316:	4b92      	ldr	r3, [pc, #584]	; (19560 <vWifiTask+0x2bc>)
   19318:	681b      	ldr	r3, [r3, #0]
   1931a:	2b00      	cmp	r3, #0
   1931c:	d007      	beq.n	1932e <vWifiTask+0x8a>
   1931e:	4b91      	ldr	r3, [pc, #580]	; (19564 <vWifiTask+0x2c0>)
   19320:	681b      	ldr	r3, [r3, #0]
   19322:	2b00      	cmp	r3, #0
   19324:	d003      	beq.n	1932e <vWifiTask+0x8a>
   19326:	4b8d      	ldr	r3, [pc, #564]	; (1955c <vWifiTask+0x2b8>)
   19328:	681b      	ldr	r3, [r3, #0]
   1932a:	2b00      	cmp	r3, #0
   1932c:	d103      	bne.n	19336 <vWifiTask+0x92>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   1932e:	4b8e      	ldr	r3, [pc, #568]	; (19568 <vWifiTask+0x2c4>)
   19330:	0018      	movs	r0, r3
   19332:	4b8e      	ldr	r3, [pc, #568]	; (1956c <vWifiTask+0x2c8>)
   19334:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   19336:	4b8e      	ldr	r3, [pc, #568]	; (19570 <vWifiTask+0x2cc>)
   19338:	0018      	movs	r0, r3
   1933a:	4b8c      	ldr	r3, [pc, #560]	; (1956c <vWifiTask+0x2c8>)
   1933c:	4798      	blx	r3
	
	
	/* Initialize the Locker */
	configure_port_servo_pins();
   1933e:	4b8d      	ldr	r3, [pc, #564]	; (19574 <vWifiTask+0x2d0>)
   19340:	4798      	blx	r3
    //lock();
	
    /* Initialize the Timer. */
    configure_timer();
   19342:	4b8d      	ldr	r3, [pc, #564]	; (19578 <vWifiTask+0x2d4>)
   19344:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   19346:	4b8d      	ldr	r3, [pc, #564]	; (1957c <vWifiTask+0x2d8>)
   19348:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1934a:	4b8d      	ldr	r3, [pc, #564]	; (19580 <vWifiTask+0x2dc>)
   1934c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
   init_storage();
   1934e:	4b8d      	ldr	r3, [pc, #564]	; (19584 <vWifiTask+0x2e0>)
   19350:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   19352:	4b8d      	ldr	r3, [pc, #564]	; (19588 <vWifiTask+0x2e4>)
   19354:	4798      	blx	r3
    configure_extint_callbacks();
   19356:	4b8d      	ldr	r3, [pc, #564]	; (1958c <vWifiTask+0x2e8>)
   19358:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1935a:	2324      	movs	r3, #36	; 0x24
   1935c:	18fb      	adds	r3, r7, r3
   1935e:	2218      	movs	r2, #24
   19360:	2100      	movs	r1, #0
   19362:	0018      	movs	r0, r3
   19364:	4b8a      	ldr	r3, [pc, #552]	; (19590 <vWifiTask+0x2ec>)
   19366:	4798      	blx	r3

    nm_bsp_init();
   19368:	4b8a      	ldr	r3, [pc, #552]	; (19594 <vWifiTask+0x2f0>)
   1936a:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   1936c:	2324      	movs	r3, #36	; 0x24
   1936e:	18fb      	adds	r3, r7, r3
   19370:	4a89      	ldr	r2, [pc, #548]	; (19598 <vWifiTask+0x2f4>)
   19372:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   19374:	234f      	movs	r3, #79	; 0x4f
   19376:	18fc      	adds	r4, r7, r3
   19378:	2324      	movs	r3, #36	; 0x24
   1937a:	18fb      	adds	r3, r7, r3
   1937c:	0018      	movs	r0, r3
   1937e:	4b87      	ldr	r3, [pc, #540]	; (1959c <vWifiTask+0x2f8>)
   19380:	4798      	blx	r3
   19382:	0003      	movs	r3, r0
   19384:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   19386:	234f      	movs	r3, #79	; 0x4f
   19388:	18fb      	adds	r3, r7, r3
   1938a:	781b      	ldrb	r3, [r3, #0]
   1938c:	b25b      	sxtb	r3, r3
   1938e:	2b00      	cmp	r3, #0
   19390:	d009      	beq.n	193a6 <vWifiTask+0x102>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   19392:	234f      	movs	r3, #79	; 0x4f
   19394:	18fb      	adds	r3, r7, r3
   19396:	2200      	movs	r2, #0
   19398:	569a      	ldrsb	r2, [r3, r2]
   1939a:	4b81      	ldr	r3, [pc, #516]	; (195a0 <vWifiTask+0x2fc>)
   1939c:	0019      	movs	r1, r3
   1939e:	2001      	movs	r0, #1
   193a0:	4b80      	ldr	r3, [pc, #512]	; (195a4 <vWifiTask+0x300>)
   193a2:	4798      	blx	r3
        while (1) {
   193a4:	e7fe      	b.n	193a4 <vWifiTask+0x100>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   193a6:	4a80      	ldr	r2, [pc, #512]	; (195a8 <vWifiTask+0x304>)
   193a8:	4b80      	ldr	r3, [pc, #512]	; (195ac <vWifiTask+0x308>)
   193aa:	0019      	movs	r1, r3
   193ac:	2001      	movs	r0, #1
   193ae:	4b7d      	ldr	r3, [pc, #500]	; (195a4 <vWifiTask+0x300>)
   193b0:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   193b2:	4b7f      	ldr	r3, [pc, #508]	; (195b0 <vWifiTask+0x30c>)
   193b4:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   193b6:	4a7f      	ldr	r2, [pc, #508]	; (195b4 <vWifiTask+0x310>)
   193b8:	4b7f      	ldr	r3, [pc, #508]	; (195b8 <vWifiTask+0x314>)
   193ba:	0011      	movs	r1, r2
   193bc:	0018      	movs	r0, r3
   193be:	4b7f      	ldr	r3, [pc, #508]	; (195bc <vWifiTask+0x318>)
   193c0:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   193c2:	4a7f      	ldr	r2, [pc, #508]	; (195c0 <vWifiTask+0x31c>)
   193c4:	4878      	ldr	r0, [pc, #480]	; (195a8 <vWifiTask+0x304>)
   193c6:	23ff      	movs	r3, #255	; 0xff
   193c8:	9300      	str	r3, [sp, #0]
   193ca:	0013      	movs	r3, r2
   193cc:	2202      	movs	r2, #2
   193ce:	2112      	movs	r1, #18
   193d0:	4c7c      	ldr	r4, [pc, #496]	; (195c4 <vWifiTask+0x320>)
   193d2:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   193d4:	e006      	b.n	193e4 <vWifiTask+0x140>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   193d6:	2000      	movs	r0, #0
   193d8:	4b7b      	ldr	r3, [pc, #492]	; (195c8 <vWifiTask+0x324>)
   193da:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   193dc:	4b7b      	ldr	r3, [pc, #492]	; (195cc <vWifiTask+0x328>)
   193de:	0018      	movs	r0, r3
   193e0:	4b7b      	ldr	r3, [pc, #492]	; (195d0 <vWifiTask+0x32c>)
   193e2:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   193e4:	2002      	movs	r0, #2
   193e6:	4b7b      	ldr	r3, [pc, #492]	; (195d4 <vWifiTask+0x330>)
   193e8:	4798      	blx	r3
   193ea:	0003      	movs	r3, r0
   193ec:	001a      	movs	r2, r3
   193ee:	2301      	movs	r3, #1
   193f0:	4053      	eors	r3, r2
   193f2:	b2db      	uxtb	r3, r3
   193f4:	2b00      	cmp	r3, #0
   193f6:	d1ee      	bne.n	193d6 <vWifiTask+0x132>
    }

    vTaskDelay(1000);
   193f8:	23fa      	movs	r3, #250	; 0xfa
   193fa:	009b      	lsls	r3, r3, #2
   193fc:	0018      	movs	r0, r3
   193fe:	4b52      	ldr	r3, [pc, #328]	; (19548 <vWifiTask+0x2a4>)
   19400:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   19402:	4b75      	ldr	r3, [pc, #468]	; (195d8 <vWifiTask+0x334>)
   19404:	2201      	movs	r2, #1
   19406:	701a      	strb	r2, [r3, #0]
	

   
    while (1) {	
        switch (wifiStateMachine) {
   19408:	4b73      	ldr	r3, [pc, #460]	; (195d8 <vWifiTask+0x334>)
   1940a:	781b      	ldrb	r3, [r3, #0]
   1940c:	b25b      	sxtb	r3, r3
   1940e:	2b01      	cmp	r3, #1
   19410:	d00b      	beq.n	1942a <vWifiTask+0x186>
   19412:	dc02      	bgt.n	1941a <vWifiTask+0x176>
   19414:	2b00      	cmp	r3, #0
   19416:	d005      	beq.n	19424 <vWifiTask+0x180>
   19418:	e010      	b.n	1943c <vWifiTask+0x198>
   1941a:	2b02      	cmp	r3, #2
   1941c:	d008      	beq.n	19430 <vWifiTask+0x18c>
   1941e:	2b03      	cmp	r3, #3
   19420:	d009      	beq.n	19436 <vWifiTask+0x192>
   19422:	e00b      	b.n	1943c <vWifiTask+0x198>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   19424:	4b6d      	ldr	r3, [pc, #436]	; (195dc <vWifiTask+0x338>)
   19426:	4798      	blx	r3

                break;
   19428:	e00c      	b.n	19444 <vWifiTask+0x1a0>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1942a:	4b6d      	ldr	r3, [pc, #436]	; (195e0 <vWifiTask+0x33c>)
   1942c:	4798      	blx	r3
                break;
   1942e:	e009      	b.n	19444 <vWifiTask+0x1a0>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   19430:	4b6c      	ldr	r3, [pc, #432]	; (195e4 <vWifiTask+0x340>)
   19432:	4798      	blx	r3
                break;
   19434:	e006      	b.n	19444 <vWifiTask+0x1a0>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   19436:	4b6c      	ldr	r3, [pc, #432]	; (195e8 <vWifiTask+0x344>)
   19438:	4798      	blx	r3
                break;
   1943a:	e003      	b.n	19444 <vWifiTask+0x1a0>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1943c:	4b66      	ldr	r3, [pc, #408]	; (195d8 <vWifiTask+0x334>)
   1943e:	2200      	movs	r2, #0
   19440:	701a      	strb	r2, [r3, #0]
                break;
   19442:	46c0      	nop			; (mov r8, r8)
        }
		
		
		read_sensor_data();
   19444:	4b69      	ldr	r3, [pc, #420]	; (195ec <vWifiTask+0x348>)
   19446:	4798      	blx	r3
		int temp = (int)getTemperature();
   19448:	4b69      	ldr	r3, [pc, #420]	; (195f0 <vWifiTask+0x34c>)
   1944a:	4798      	blx	r3
   1944c:	1c02      	adds	r2, r0, #0
   1944e:	4b69      	ldr	r3, [pc, #420]	; (195f4 <vWifiTask+0x350>)
   19450:	1c10      	adds	r0, r2, #0
   19452:	4798      	blx	r3
   19454:	0003      	movs	r3, r0
   19456:	64bb      	str	r3, [r7, #72]	; 0x48
		int hum = (int)getHumidity();
   19458:	4b67      	ldr	r3, [pc, #412]	; (195f8 <vWifiTask+0x354>)
   1945a:	4798      	blx	r3
   1945c:	1c02      	adds	r2, r0, #0
   1945e:	4b65      	ldr	r3, [pc, #404]	; (195f4 <vWifiTask+0x350>)
   19460:	1c10      	adds	r0, r2, #0
   19462:	4798      	blx	r3
   19464:	0003      	movs	r3, r0
   19466:	647b      	str	r3, [r7, #68]	; 0x44
		int pressure = (int)getPressure();
   19468:	4b64      	ldr	r3, [pc, #400]	; (195fc <vWifiTask+0x358>)
   1946a:	4798      	blx	r3
   1946c:	1c02      	adds	r2, r0, #0
   1946e:	4b61      	ldr	r3, [pc, #388]	; (195f4 <vWifiTask+0x350>)
   19470:	1c10      	adds	r0, r2, #0
   19472:	4798      	blx	r3
   19474:	0003      	movs	r3, r0
   19476:	643b      	str	r3, [r7, #64]	; 0x40
		int gas = (int)getGasResistance();
   19478:	4b61      	ldr	r3, [pc, #388]	; (19600 <vWifiTask+0x35c>)
   1947a:	4798      	blx	r3
   1947c:	0003      	movs	r3, r0
   1947e:	63fb      	str	r3, [r7, #60]	; 0x3c
		check_sensor_data(temp,hum,pressure,gas);
   19480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   19484:	6c79      	ldr	r1, [r7, #68]	; 0x44
   19486:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   19488:	4c5e      	ldr	r4, [pc, #376]	; (19604 <vWifiTask+0x360>)
   1948a:	47a0      	blx	r4
		struct BMEDataPacket bme;
		bme.temperature = temp;
   1948c:	2310      	movs	r3, #16
   1948e:	18fb      	adds	r3, r7, r3
   19490:	6cba      	ldr	r2, [r7, #72]	; 0x48
   19492:	601a      	str	r2, [r3, #0]
		bme.humidity = hum;
   19494:	2310      	movs	r3, #16
   19496:	18fb      	adds	r3, r7, r3
   19498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1949a:	605a      	str	r2, [r3, #4]
		bme.pressure = pressure;
   1949c:	2310      	movs	r3, #16
   1949e:	18fb      	adds	r3, r7, r3
   194a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   194a2:	609a      	str	r2, [r3, #8]
		bme.warning_status = current_warning;
   194a4:	4b58      	ldr	r3, [pc, #352]	; (19608 <vWifiTask+0x364>)
   194a6:	681a      	ldr	r2, [r3, #0]
   194a8:	2310      	movs	r3, #16
   194aa:	18fb      	adds	r3, r7, r3
   194ac:	60da      	str	r2, [r3, #12]
		bme.gas_res = (1200 - gas)/1200;
   194ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   194b0:	2296      	movs	r2, #150	; 0x96
   194b2:	00d2      	lsls	r2, r2, #3
   194b4:	1ad0      	subs	r0, r2, r3
   194b6:	4b55      	ldr	r3, [pc, #340]	; (1960c <vWifiTask+0x368>)
   194b8:	2296      	movs	r2, #150	; 0x96
   194ba:	00d1      	lsls	r1, r2, #3
   194bc:	4798      	blx	r3
   194be:	0003      	movs	r3, r0
   194c0:	001a      	movs	r2, r3
   194c2:	2310      	movs	r3, #16
   194c4:	18fb      	adds	r3, r7, r3
   194c6:	611a      	str	r2, [r3, #16]
		WifiAddBmeDataToQueue(&bme);
   194c8:	2310      	movs	r3, #16
   194ca:	18fb      	adds	r3, r7, r3
   194cc:	0018      	movs	r0, r3
   194ce:	4b50      	ldr	r3, [pc, #320]	; (19610 <vWifiTask+0x36c>)
   194d0:	4798      	blx	r3
		LCD_menu(wifi_status);
   194d2:	4b50      	ldr	r3, [pc, #320]	; (19614 <vWifiTask+0x370>)
   194d4:	781b      	ldrb	r3, [r3, #0]
   194d6:	0018      	movs	r0, r3
   194d8:	4b4f      	ldr	r3, [pc, #316]	; (19618 <vWifiTask+0x374>)
   194da:	4798      	blx	r3
		
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   194dc:	230f      	movs	r3, #15
   194de:	18fb      	adds	r3, r7, r3
   194e0:	2200      	movs	r2, #0
   194e2:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   194e4:	4b1b      	ldr	r3, [pc, #108]	; (19554 <vWifiTask+0x2b0>)
   194e6:	681b      	ldr	r3, [r3, #0]
   194e8:	220f      	movs	r2, #15
   194ea:	18b9      	adds	r1, r7, r2
   194ec:	2200      	movs	r2, #0
   194ee:	0018      	movs	r0, r3
   194f0:	4b4a      	ldr	r3, [pc, #296]	; (1961c <vWifiTask+0x378>)
   194f2:	4798      	blx	r3
   194f4:	0003      	movs	r3, r0
   194f6:	2b01      	cmp	r3, #1
   194f8:	d105      	bne.n	19506 <vWifiTask+0x262>
            wifiStateMachine = DataToReceive;  // Update new state
   194fa:	230f      	movs	r3, #15
   194fc:	18fb      	adds	r3, r7, r3
   194fe:	781b      	ldrb	r3, [r3, #0]
   19500:	b25a      	sxtb	r2, r3
   19502:	4b35      	ldr	r3, [pc, #212]	; (195d8 <vWifiTask+0x334>)
   19504:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   19506:	4b46      	ldr	r3, [pc, #280]	; (19620 <vWifiTask+0x37c>)
   19508:	781b      	ldrb	r3, [r3, #0]
   1950a:	b2db      	uxtb	r3, r3
   1950c:	2b00      	cmp	r3, #0
   1950e:	d017      	beq.n	19540 <vWifiTask+0x29c>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   19510:	4b44      	ldr	r3, [pc, #272]	; (19624 <vWifiTask+0x380>)
   19512:	0018      	movs	r0, r3
   19514:	4b44      	ldr	r3, [pc, #272]	; (19628 <vWifiTask+0x384>)
   19516:	4798      	blx	r3
   19518:	0004      	movs	r4, r0
   1951a:	4a42      	ldr	r2, [pc, #264]	; (19624 <vWifiTask+0x380>)
   1951c:	4943      	ldr	r1, [pc, #268]	; (1962c <vWifiTask+0x388>)
   1951e:	4844      	ldr	r0, [pc, #272]	; (19630 <vWifiTask+0x38c>)
   19520:	2300      	movs	r3, #0
   19522:	9301      	str	r3, [sp, #4]
   19524:	2301      	movs	r3, #1
   19526:	9300      	str	r3, [sp, #0]
   19528:	0023      	movs	r3, r4
   1952a:	4c42      	ldr	r4, [pc, #264]	; (19634 <vWifiTask+0x390>)
   1952c:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1952e:	4a3d      	ldr	r2, [pc, #244]	; (19624 <vWifiTask+0x380>)
   19530:	4b41      	ldr	r3, [pc, #260]	; (19638 <vWifiTask+0x394>)
   19532:	0019      	movs	r1, r3
   19534:	2001      	movs	r0, #1
   19536:	4b1b      	ldr	r3, [pc, #108]	; (195a4 <vWifiTask+0x300>)
   19538:	4798      	blx	r3
            isPressed = false;
   1953a:	4b39      	ldr	r3, [pc, #228]	; (19620 <vWifiTask+0x37c>)
   1953c:	2200      	movs	r2, #0
   1953e:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   19540:	2064      	movs	r0, #100	; 0x64
   19542:	4b01      	ldr	r3, [pc, #4]	; (19548 <vWifiTask+0x2a4>)
   19544:	4798      	blx	r3
    while (1) {	
   19546:	e75f      	b.n	19408 <vWifiTask+0x164>
   19548:	0001e371 	.word	0x0001e371
   1954c:	00017e49 	.word	0x00017e49
   19550:	0001c665 	.word	0x0001c665
   19554:	200004b4 	.word	0x200004b4
   19558:	200004bc 	.word	0x200004bc
   1955c:	200004c4 	.word	0x200004c4
   19560:	200004b8 	.word	0x200004b8
   19564:	200004c0 	.word	0x200004c0
   19568:	00039d38 	.word	0x00039d38
   1956c:	0001ffc5 	.word	0x0001ffc5
   19570:	00039d60 	.word	0x00039d60
   19574:	00016c89 	.word	0x00016c89
   19578:	000188b5 	.word	0x000188b5
   1957c:	000188f1 	.word	0x000188f1
   19580:	00018c75 	.word	0x00018c75
   19584:	000187d1 	.word	0x000187d1
   19588:	00018d2d 	.word	0x00018d2d
   1958c:	00018d6d 	.word	0x00018d6d
   19590:	0003781f 	.word	0x0003781f
   19594:	000224f1 	.word	0x000224f1
   19598:	0001864d 	.word	0x0001864d
   1959c:	00023f39 	.word	0x00023f39
   195a0:	00039d7c 	.word	0x00039d7c
   195a4:	000200b1 	.word	0x000200b1
   195a8:	000397a4 	.word	0x000397a4
   195ac:	00039da8 	.word	0x00039da8
   195b0:	00027699 	.word	0x00027699
   195b4:	00018999 	.word	0x00018999
   195b8:	00018965 	.word	0x00018965
   195bc:	00027731 	.word	0x00027731
   195c0:	00039794 	.word	0x00039794
   195c4:	00024149 	.word	0x00024149
   195c8:	0002412d 	.word	0x0002412d
   195cc:	2000473c 	.word	0x2000473c
   195d0:	0003487d 	.word	0x0003487d
   195d4:	00017eb9 	.word	0x00017eb9
   195d8:	200004b3 	.word	0x200004b3
   195dc:	00018f6d 	.word	0x00018f6d
   195e0:	00019009 	.word	0x00019009
   195e4:	00018de5 	.word	0x00018de5
   195e8:	00018e79 	.word	0x00018e79
   195ec:	00014ad1 	.word	0x00014ad1
   195f0:	00014bbd 	.word	0x00014bbd
   195f4:	000359b1 	.word	0x000359b1
   195f8:	00014bd1 	.word	0x00014bd1
   195fc:	00014be5 	.word	0x00014be5
   19600:	00014bf9 	.word	0x00014bf9
   19604:	000196f5 	.word	0x000196f5
   19608:	200000a8 	.word	0x200000a8
   1960c:	00034d09 	.word	0x00034d09
   19610:	0001969d 	.word	0x0001969d
   19614:	200004b2 	.word	0x200004b2
   19618:	00017ad5 	.word	0x00017ad5
   1961c:	0001d1c5 	.word	0x0001d1c5
   19620:	20000b60 	.word	0x20000b60
   19624:	20000068 	.word	0x20000068
   19628:	00037bd7 	.word	0x00037bd7
   1962c:	00039dcc 	.word	0x00039dcc
   19630:	20000728 	.word	0x20000728
   19634:	00031b9d 	.word	0x00031b9d
   19638:	00039de8 	.word	0x00039de8

0001963c <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   1963c:	b590      	push	{r4, r7, lr}
   1963e:	b083      	sub	sp, #12
   19640:	af00      	add	r7, sp, #0
   19642:	0002      	movs	r2, r0
   19644:	1dfb      	adds	r3, r7, #7
   19646:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   19648:	1dfb      	adds	r3, r7, #7
   1964a:	781b      	ldrb	r3, [r3, #0]
   1964c:	2b03      	cmp	r3, #3
   1964e:	d806      	bhi.n	1965e <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   19650:	4b05      	ldr	r3, [pc, #20]	; (19668 <WifiHandlerSetState+0x2c>)
   19652:	6818      	ldr	r0, [r3, #0]
   19654:	1df9      	adds	r1, r7, #7
   19656:	2300      	movs	r3, #0
   19658:	220a      	movs	r2, #10
   1965a:	4c04      	ldr	r4, [pc, #16]	; (1966c <WifiHandlerSetState+0x30>)
   1965c:	47a0      	blx	r4
    }
}
   1965e:	46c0      	nop			; (mov r8, r8)
   19660:	46bd      	mov	sp, r7
   19662:	b003      	add	sp, #12
   19664:	bd90      	pop	{r4, r7, pc}
   19666:	46c0      	nop			; (mov r8, r8)
   19668:	200004b4 	.word	0x200004b4
   1966c:	0001c90d 	.word	0x0001c90d

00019670 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   19670:	b590      	push	{r4, r7, lr}
   19672:	b085      	sub	sp, #20
   19674:	af00      	add	r7, sp, #0
   19676:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   19678:	4b06      	ldr	r3, [pc, #24]	; (19694 <WifiAddImuDataToQueue+0x24>)
   1967a:	6818      	ldr	r0, [r3, #0]
   1967c:	6879      	ldr	r1, [r7, #4]
   1967e:	2300      	movs	r3, #0
   19680:	220a      	movs	r2, #10
   19682:	4c05      	ldr	r4, [pc, #20]	; (19698 <WifiAddImuDataToQueue+0x28>)
   19684:	47a0      	blx	r4
   19686:	0003      	movs	r3, r0
   19688:	60fb      	str	r3, [r7, #12]
    return error;
   1968a:	68fb      	ldr	r3, [r7, #12]
}
   1968c:	0018      	movs	r0, r3
   1968e:	46bd      	mov	sp, r7
   19690:	b005      	add	sp, #20
   19692:	bd90      	pop	{r4, r7, pc}
   19694:	200004bc 	.word	0x200004bc
   19698:	0001c90d 	.word	0x0001c90d

0001969c <WifiAddBmeDataToQueue>:
int WifiAddBmeDataToQueue(struct BMEDataPacket *bmePacket)
{
   1969c:	b590      	push	{r4, r7, lr}
   1969e:	b085      	sub	sp, #20
   196a0:	af00      	add	r7, sp, #0
   196a2:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueBmeBuffer, bmePacket, (TickType_t)10);
   196a4:	4b06      	ldr	r3, [pc, #24]	; (196c0 <WifiAddBmeDataToQueue+0x24>)
   196a6:	6818      	ldr	r0, [r3, #0]
   196a8:	6879      	ldr	r1, [r7, #4]
   196aa:	2300      	movs	r3, #0
   196ac:	220a      	movs	r2, #10
   196ae:	4c05      	ldr	r4, [pc, #20]	; (196c4 <WifiAddBmeDataToQueue+0x28>)
   196b0:	47a0      	blx	r4
   196b2:	0003      	movs	r3, r0
   196b4:	60fb      	str	r3, [r7, #12]
	return error;
   196b6:	68fb      	ldr	r3, [r7, #12]
}
   196b8:	0018      	movs	r0, r3
   196ba:	46bd      	mov	sp, r7
   196bc:	b005      	add	sp, #20
   196be:	bd90      	pop	{r4, r7, pc}
   196c0:	200004c4 	.word	0x200004c4
   196c4:	0001c90d 	.word	0x0001c90d

000196c8 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   196c8:	b590      	push	{r4, r7, lr}
   196ca:	b085      	sub	sp, #20
   196cc:	af00      	add	r7, sp, #0
   196ce:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   196d0:	4b06      	ldr	r3, [pc, #24]	; (196ec <WifiAddGameDataToQueue+0x24>)
   196d2:	6818      	ldr	r0, [r3, #0]
   196d4:	6879      	ldr	r1, [r7, #4]
   196d6:	2300      	movs	r3, #0
   196d8:	220a      	movs	r2, #10
   196da:	4c05      	ldr	r4, [pc, #20]	; (196f0 <WifiAddGameDataToQueue+0x28>)
   196dc:	47a0      	blx	r4
   196de:	0003      	movs	r3, r0
   196e0:	60fb      	str	r3, [r7, #12]
    return error;
   196e2:	68fb      	ldr	r3, [r7, #12]
}
   196e4:	0018      	movs	r0, r3
   196e6:	46bd      	mov	sp, r7
   196e8:	b005      	add	sp, #20
   196ea:	bd90      	pop	{r4, r7, pc}
   196ec:	200004b8 	.word	0x200004b8
   196f0:	0001c90d 	.word	0x0001c90d

000196f4 <check_sensor_data>:

void check_sensor_data(int temp,int hum,int pre,int gas){
   196f4:	b580      	push	{r7, lr}
   196f6:	b084      	sub	sp, #16
   196f8:	af00      	add	r7, sp, #0
   196fa:	60f8      	str	r0, [r7, #12]
   196fc:	60b9      	str	r1, [r7, #8]
   196fe:	607a      	str	r2, [r7, #4]
   19700:	603b      	str	r3, [r7, #0]
	if(temp > MAX_TEMP)
   19702:	68fb      	ldr	r3, [r7, #12]
   19704:	2b23      	cmp	r3, #35	; 0x23
   19706:	dd06      	ble.n	19716 <check_sensor_data+0x22>
	{
		current_warning = TEMP_WARNING;
   19708:	4b0a      	ldr	r3, [pc, #40]	; (19734 <check_sensor_data+0x40>)
   1970a:	2201      	movs	r2, #1
   1970c:	601a      	str	r2, [r3, #0]
		warning_speaker();
   1970e:	4b0a      	ldr	r3, [pc, #40]	; (19738 <check_sensor_data+0x44>)
   19710:	4798      	blx	r3
		unlock();
   19712:	4b0a      	ldr	r3, [pc, #40]	; (1973c <check_sensor_data+0x48>)
   19714:	4798      	blx	r3
	}
	if(gas < MAX_GAS){
   19716:	683b      	ldr	r3, [r7, #0]
   19718:	2b63      	cmp	r3, #99	; 0x63
   1971a:	dc06      	bgt.n	1972a <check_sensor_data+0x36>
		current_warning = GAS_WARNING;
   1971c:	4b05      	ldr	r3, [pc, #20]	; (19734 <check_sensor_data+0x40>)
   1971e:	2204      	movs	r2, #4
   19720:	601a      	str	r2, [r3, #0]
		warning_speaker();
   19722:	4b05      	ldr	r3, [pc, #20]	; (19738 <check_sensor_data+0x44>)
   19724:	4798      	blx	r3
		unlock();
   19726:	4b05      	ldr	r3, [pc, #20]	; (1973c <check_sensor_data+0x48>)
   19728:	4798      	blx	r3
	}
   1972a:	46c0      	nop			; (mov r8, r8)
   1972c:	46bd      	mov	sp, r7
   1972e:	b004      	add	sp, #16
   19730:	bd80      	pop	{r7, pc}
   19732:	46c0      	nop			; (mov r8, r8)
   19734:	200000a8 	.word	0x200000a8
   19738:	00016f55 	.word	0x00016f55
   1973c:	00016d35 	.word	0x00016d35

00019740 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   19740:	b580      	push	{r7, lr}
   19742:	b082      	sub	sp, #8
   19744:	af00      	add	r7, sp, #0
   19746:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   19748:	687b      	ldr	r3, [r7, #4]
   1974a:	2200      	movs	r2, #0
   1974c:	701a      	strb	r2, [r3, #0]
}
   1974e:	46c0      	nop			; (mov r8, r8)
   19750:	46bd      	mov	sp, r7
   19752:	b002      	add	sp, #8
   19754:	bd80      	pop	{r7, pc}
	...

00019758 <system_apb_clock_set_mask>:
{
   19758:	b580      	push	{r7, lr}
   1975a:	b082      	sub	sp, #8
   1975c:	af00      	add	r7, sp, #0
   1975e:	0002      	movs	r2, r0
   19760:	6039      	str	r1, [r7, #0]
   19762:	1dfb      	adds	r3, r7, #7
   19764:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   19766:	1dfb      	adds	r3, r7, #7
   19768:	781b      	ldrb	r3, [r3, #0]
   1976a:	2b01      	cmp	r3, #1
   1976c:	d00a      	beq.n	19784 <system_apb_clock_set_mask+0x2c>
   1976e:	2b02      	cmp	r3, #2
   19770:	d00f      	beq.n	19792 <system_apb_clock_set_mask+0x3a>
   19772:	2b00      	cmp	r3, #0
   19774:	d114      	bne.n	197a0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   19776:	4b0e      	ldr	r3, [pc, #56]	; (197b0 <system_apb_clock_set_mask+0x58>)
   19778:	4a0d      	ldr	r2, [pc, #52]	; (197b0 <system_apb_clock_set_mask+0x58>)
   1977a:	6991      	ldr	r1, [r2, #24]
   1977c:	683a      	ldr	r2, [r7, #0]
   1977e:	430a      	orrs	r2, r1
   19780:	619a      	str	r2, [r3, #24]
			break;
   19782:	e00f      	b.n	197a4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   19784:	4b0a      	ldr	r3, [pc, #40]	; (197b0 <system_apb_clock_set_mask+0x58>)
   19786:	4a0a      	ldr	r2, [pc, #40]	; (197b0 <system_apb_clock_set_mask+0x58>)
   19788:	69d1      	ldr	r1, [r2, #28]
   1978a:	683a      	ldr	r2, [r7, #0]
   1978c:	430a      	orrs	r2, r1
   1978e:	61da      	str	r2, [r3, #28]
			break;
   19790:	e008      	b.n	197a4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   19792:	4b07      	ldr	r3, [pc, #28]	; (197b0 <system_apb_clock_set_mask+0x58>)
   19794:	4a06      	ldr	r2, [pc, #24]	; (197b0 <system_apb_clock_set_mask+0x58>)
   19796:	6a11      	ldr	r1, [r2, #32]
   19798:	683a      	ldr	r2, [r7, #0]
   1979a:	430a      	orrs	r2, r1
   1979c:	621a      	str	r2, [r3, #32]
			break;
   1979e:	e001      	b.n	197a4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   197a0:	2317      	movs	r3, #23
   197a2:	e000      	b.n	197a6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   197a4:	2300      	movs	r3, #0
}
   197a6:	0018      	movs	r0, r3
   197a8:	46bd      	mov	sp, r7
   197aa:	b002      	add	sp, #8
   197ac:	bd80      	pop	{r7, pc}
   197ae:	46c0      	nop			; (mov r8, r8)
   197b0:	40000400 	.word	0x40000400

000197b4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   197b4:	b580      	push	{r7, lr}
   197b6:	b082      	sub	sp, #8
   197b8:	af00      	add	r7, sp, #0
   197ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   197bc:	687b      	ldr	r3, [r7, #4]
   197be:	2280      	movs	r2, #128	; 0x80
   197c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   197c2:	687b      	ldr	r3, [r7, #4]
   197c4:	2200      	movs	r2, #0
   197c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   197c8:	687b      	ldr	r3, [r7, #4]
   197ca:	2201      	movs	r2, #1
   197cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   197ce:	687b      	ldr	r3, [r7, #4]
   197d0:	2200      	movs	r2, #0
   197d2:	70da      	strb	r2, [r3, #3]
}
   197d4:	46c0      	nop			; (mov r8, r8)
   197d6:	46bd      	mov	sp, r7
   197d8:	b002      	add	sp, #8
   197da:	bd80      	pop	{r7, pc}

000197dc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   197dc:	b580      	push	{r7, lr}
   197de:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   197e0:	4b05      	ldr	r3, [pc, #20]	; (197f8 <system_is_debugger_present+0x1c>)
   197e2:	789b      	ldrb	r3, [r3, #2]
   197e4:	b2db      	uxtb	r3, r3
   197e6:	001a      	movs	r2, r3
   197e8:	2302      	movs	r3, #2
   197ea:	4013      	ands	r3, r2
   197ec:	1e5a      	subs	r2, r3, #1
   197ee:	4193      	sbcs	r3, r2
   197f0:	b2db      	uxtb	r3, r3
}
   197f2:	0018      	movs	r0, r3
   197f4:	46bd      	mov	sp, r7
   197f6:	bd80      	pop	{r7, pc}
   197f8:	41002000 	.word	0x41002000

000197fc <system_interrupt_enter_critical_section>:
{
   197fc:	b580      	push	{r7, lr}
   197fe:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   19800:	4b02      	ldr	r3, [pc, #8]	; (1980c <system_interrupt_enter_critical_section+0x10>)
   19802:	4798      	blx	r3
}
   19804:	46c0      	nop			; (mov r8, r8)
   19806:	46bd      	mov	sp, r7
   19808:	bd80      	pop	{r7, pc}
   1980a:	46c0      	nop			; (mov r8, r8)
   1980c:	00028391 	.word	0x00028391

00019810 <system_interrupt_leave_critical_section>:
{
   19810:	b580      	push	{r7, lr}
   19812:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   19814:	4b02      	ldr	r3, [pc, #8]	; (19820 <system_interrupt_leave_critical_section+0x10>)
   19816:	4798      	blx	r3
}
   19818:	46c0      	nop			; (mov r8, r8)
   1981a:	46bd      	mov	sp, r7
   1981c:	bd80      	pop	{r7, pc}
   1981e:	46c0      	nop			; (mov r8, r8)
   19820:	000283e5 	.word	0x000283e5

00019824 <system_interrupt_disable>:
{
   19824:	b580      	push	{r7, lr}
   19826:	b082      	sub	sp, #8
   19828:	af00      	add	r7, sp, #0
   1982a:	0002      	movs	r2, r0
   1982c:	1dfb      	adds	r3, r7, #7
   1982e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19830:	4a07      	ldr	r2, [pc, #28]	; (19850 <system_interrupt_disable+0x2c>)
   19832:	1dfb      	adds	r3, r7, #7
   19834:	781b      	ldrb	r3, [r3, #0]
   19836:	0019      	movs	r1, r3
   19838:	231f      	movs	r3, #31
   1983a:	400b      	ands	r3, r1
   1983c:	2101      	movs	r1, #1
   1983e:	4099      	lsls	r1, r3
   19840:	000b      	movs	r3, r1
   19842:	0019      	movs	r1, r3
   19844:	2380      	movs	r3, #128	; 0x80
   19846:	50d1      	str	r1, [r2, r3]
}
   19848:	46c0      	nop			; (mov r8, r8)
   1984a:	46bd      	mov	sp, r7
   1984c:	b002      	add	sp, #8
   1984e:	bd80      	pop	{r7, pc}
   19850:	e000e100 	.word	0xe000e100

00019854 <i2c_master_is_syncing>:
{
   19854:	b580      	push	{r7, lr}
   19856:	b084      	sub	sp, #16
   19858:	af00      	add	r7, sp, #0
   1985a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1985c:	687b      	ldr	r3, [r7, #4]
   1985e:	681b      	ldr	r3, [r3, #0]
   19860:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   19862:	68fb      	ldr	r3, [r7, #12]
   19864:	69db      	ldr	r3, [r3, #28]
   19866:	2207      	movs	r2, #7
   19868:	4013      	ands	r3, r2
   1986a:	1e5a      	subs	r2, r3, #1
   1986c:	4193      	sbcs	r3, r2
   1986e:	b2db      	uxtb	r3, r3
}
   19870:	0018      	movs	r0, r3
   19872:	46bd      	mov	sp, r7
   19874:	b004      	add	sp, #16
   19876:	bd80      	pop	{r7, pc}

00019878 <_i2c_master_wait_for_sync>:
{
   19878:	b580      	push	{r7, lr}
   1987a:	b082      	sub	sp, #8
   1987c:	af00      	add	r7, sp, #0
   1987e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   19880:	46c0      	nop			; (mov r8, r8)
   19882:	687b      	ldr	r3, [r7, #4]
   19884:	0018      	movs	r0, r3
   19886:	4b04      	ldr	r3, [pc, #16]	; (19898 <_i2c_master_wait_for_sync+0x20>)
   19888:	4798      	blx	r3
   1988a:	1e03      	subs	r3, r0, #0
   1988c:	d1f9      	bne.n	19882 <_i2c_master_wait_for_sync+0xa>
}
   1988e:	46c0      	nop			; (mov r8, r8)
   19890:	46bd      	mov	sp, r7
   19892:	b002      	add	sp, #8
   19894:	bd80      	pop	{r7, pc}
   19896:	46c0      	nop			; (mov r8, r8)
   19898:	00019855 	.word	0x00019855

0001989c <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   1989c:	b580      	push	{r7, lr}
   1989e:	b084      	sub	sp, #16
   198a0:	af00      	add	r7, sp, #0
   198a2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   198a4:	687b      	ldr	r3, [r7, #4]
   198a6:	681b      	ldr	r3, [r3, #0]
   198a8:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   198aa:	687b      	ldr	r3, [r7, #4]
   198ac:	681b      	ldr	r3, [r3, #0]
   198ae:	0018      	movs	r0, r3
   198b0:	4b0d      	ldr	r3, [pc, #52]	; (198e8 <i2c_master_disable+0x4c>)
   198b2:	4798      	blx	r3
   198b4:	0003      	movs	r3, r0
   198b6:	0018      	movs	r0, r3
   198b8:	4b0c      	ldr	r3, [pc, #48]	; (198ec <i2c_master_disable+0x50>)
   198ba:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   198bc:	687b      	ldr	r3, [r7, #4]
   198be:	0018      	movs	r0, r3
   198c0:	4b0b      	ldr	r3, [pc, #44]	; (198f0 <i2c_master_disable+0x54>)
   198c2:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   198c4:	68fb      	ldr	r3, [r7, #12]
   198c6:	2283      	movs	r2, #131	; 0x83
   198c8:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   198ca:	68fb      	ldr	r3, [r7, #12]
   198cc:	2283      	movs	r2, #131	; 0x83
   198ce:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   198d0:	68fb      	ldr	r3, [r7, #12]
   198d2:	681b      	ldr	r3, [r3, #0]
   198d4:	2202      	movs	r2, #2
   198d6:	4393      	bics	r3, r2
   198d8:	001a      	movs	r2, r3
   198da:	68fb      	ldr	r3, [r7, #12]
   198dc:	601a      	str	r2, [r3, #0]

}
   198de:	46c0      	nop			; (mov r8, r8)
   198e0:	46bd      	mov	sp, r7
   198e2:	b004      	add	sp, #16
   198e4:	bd80      	pop	{r7, pc}
   198e6:	46c0      	nop			; (mov r8, r8)
   198e8:	00029865 	.word	0x00029865
   198ec:	00019825 	.word	0x00019825
   198f0:	00019879 	.word	0x00019879

000198f4 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   198f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   198f6:	b097      	sub	sp, #92	; 0x5c
   198f8:	af00      	add	r7, sp, #0
   198fa:	6178      	str	r0, [r7, #20]
   198fc:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   198fe:	2300      	movs	r3, #0
   19900:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   19902:	2300      	movs	r3, #0
   19904:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   19906:	2300      	movs	r3, #0
   19908:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1990a:	233b      	movs	r3, #59	; 0x3b
   1990c:	2210      	movs	r2, #16
   1990e:	4694      	mov	ip, r2
   19910:	44bc      	add	ip, r7
   19912:	4463      	add	r3, ip
   19914:	2200      	movs	r2, #0
   19916:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19918:	697b      	ldr	r3, [r7, #20]
   1991a:	681b      	ldr	r3, [r3, #0]
   1991c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1991e:	697b      	ldr	r3, [r7, #20]
   19920:	681b      	ldr	r3, [r3, #0]
   19922:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   19924:	2323      	movs	r3, #35	; 0x23
   19926:	2210      	movs	r2, #16
   19928:	18ba      	adds	r2, r7, r2
   1992a:	18d4      	adds	r4, r2, r3
   1992c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1992e:	0018      	movs	r0, r3
   19930:	4bc0      	ldr	r3, [pc, #768]	; (19c34 <_i2c_master_set_config+0x340>)
   19932:	4798      	blx	r3
   19934:	0003      	movs	r3, r0
   19936:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   19938:	230c      	movs	r3, #12
   1993a:	2210      	movs	r2, #16
   1993c:	4694      	mov	ip, r2
   1993e:	44bc      	add	ip, r7
   19940:	4463      	add	r3, ip
   19942:	0018      	movs	r0, r3
   19944:	4bbc      	ldr	r3, [pc, #752]	; (19c38 <_i2c_master_set_config+0x344>)
   19946:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   19948:	693b      	ldr	r3, [r7, #16]
   1994a:	69db      	ldr	r3, [r3, #28]
   1994c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1994e:	693b      	ldr	r3, [r7, #16]
   19950:	6a1b      	ldr	r3, [r3, #32]
   19952:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   19954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19956:	2b00      	cmp	r3, #0
   19958:	d106      	bne.n	19968 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1995a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1995c:	2100      	movs	r1, #0
   1995e:	0018      	movs	r0, r3
   19960:	4bb6      	ldr	r3, [pc, #728]	; (19c3c <_i2c_master_set_config+0x348>)
   19962:	4798      	blx	r3
   19964:	0003      	movs	r3, r0
   19966:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   19968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1996a:	b2da      	uxtb	r2, r3
   1996c:	230c      	movs	r3, #12
   1996e:	2110      	movs	r1, #16
   19970:	468c      	mov	ip, r1
   19972:	44bc      	add	ip, r7
   19974:	4463      	add	r3, ip
   19976:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   19978:	230c      	movs	r3, #12
   1997a:	2210      	movs	r2, #16
   1997c:	4694      	mov	ip, r2
   1997e:	44bc      	add	ip, r7
   19980:	4463      	add	r3, ip
   19982:	2202      	movs	r2, #2
   19984:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   19986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19988:	0c1b      	lsrs	r3, r3, #16
   1998a:	b2db      	uxtb	r3, r3
   1998c:	220c      	movs	r2, #12
   1998e:	2110      	movs	r1, #16
   19990:	468c      	mov	ip, r1
   19992:	44bc      	add	ip, r7
   19994:	4462      	add	r2, ip
   19996:	0011      	movs	r1, r2
   19998:	0018      	movs	r0, r3
   1999a:	4ba9      	ldr	r3, [pc, #676]	; (19c40 <_i2c_master_set_config+0x34c>)
   1999c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   1999e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   199a0:	2b00      	cmp	r3, #0
   199a2:	d106      	bne.n	199b2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   199a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   199a6:	2101      	movs	r1, #1
   199a8:	0018      	movs	r0, r3
   199aa:	4ba4      	ldr	r3, [pc, #656]	; (19c3c <_i2c_master_set_config+0x348>)
   199ac:	4798      	blx	r3
   199ae:	0003      	movs	r3, r0
   199b0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   199b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   199b4:	b2da      	uxtb	r2, r3
   199b6:	230c      	movs	r3, #12
   199b8:	2110      	movs	r1, #16
   199ba:	468c      	mov	ip, r1
   199bc:	44bc      	add	ip, r7
   199be:	4463      	add	r3, ip
   199c0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   199c2:	230c      	movs	r3, #12
   199c4:	2210      	movs	r2, #16
   199c6:	4694      	mov	ip, r2
   199c8:	44bc      	add	ip, r7
   199ca:	4463      	add	r3, ip
   199cc:	2202      	movs	r2, #2
   199ce:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   199d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   199d2:	0c1b      	lsrs	r3, r3, #16
   199d4:	b2db      	uxtb	r3, r3
   199d6:	220c      	movs	r2, #12
   199d8:	2110      	movs	r1, #16
   199da:	468c      	mov	ip, r1
   199dc:	44bc      	add	ip, r7
   199de:	4462      	add	r2, ip
   199e0:	0011      	movs	r1, r2
   199e2:	0018      	movs	r0, r3
   199e4:	4b96      	ldr	r3, [pc, #600]	; (19c40 <_i2c_master_set_config+0x34c>)
   199e6:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   199e8:	693b      	ldr	r3, [r7, #16]
   199ea:	8a9a      	ldrh	r2, [r3, #20]
   199ec:	697b      	ldr	r3, [r7, #20]
   199ee:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   199f0:	693b      	ldr	r3, [r7, #16]
   199f2:	8ada      	ldrh	r2, [r3, #22]
   199f4:	697b      	ldr	r3, [r7, #20]
   199f6:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   199f8:	693b      	ldr	r3, [r7, #16]
   199fa:	7e1b      	ldrb	r3, [r3, #24]
   199fc:	2b00      	cmp	r3, #0
   199fe:	d103      	bne.n	19a08 <_i2c_master_set_config+0x114>
   19a00:	4b90      	ldr	r3, [pc, #576]	; (19c44 <_i2c_master_set_config+0x350>)
   19a02:	4798      	blx	r3
   19a04:	1e03      	subs	r3, r0, #0
   19a06:	d002      	beq.n	19a0e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   19a08:	2380      	movs	r3, #128	; 0x80
   19a0a:	657b      	str	r3, [r7, #84]	; 0x54
   19a0c:	e001      	b.n	19a12 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   19a0e:	2300      	movs	r3, #0
   19a10:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   19a12:	693b      	ldr	r3, [r7, #16]
   19a14:	691b      	ldr	r3, [r3, #16]
   19a16:	2b00      	cmp	r3, #0
   19a18:	d004      	beq.n	19a24 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   19a1a:	693b      	ldr	r3, [r7, #16]
   19a1c:	691b      	ldr	r3, [r3, #16]
   19a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19a20:	4313      	orrs	r3, r2
   19a22:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   19a24:	693b      	ldr	r3, [r7, #16]
   19a26:	689b      	ldr	r3, [r3, #8]
   19a28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19a2a:	4313      	orrs	r3, r2
   19a2c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   19a2e:	693b      	ldr	r3, [r7, #16]
   19a30:	2224      	movs	r2, #36	; 0x24
   19a32:	5c9b      	ldrb	r3, [r3, r2]
   19a34:	2b00      	cmp	r3, #0
   19a36:	d004      	beq.n	19a42 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   19a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19a3a:	2280      	movs	r2, #128	; 0x80
   19a3c:	05d2      	lsls	r2, r2, #23
   19a3e:	4313      	orrs	r3, r2
   19a40:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   19a42:	693b      	ldr	r3, [r7, #16]
   19a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a46:	2b00      	cmp	r3, #0
   19a48:	d004      	beq.n	19a54 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   19a4a:	693b      	ldr	r3, [r7, #16]
   19a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19a50:	4313      	orrs	r3, r2
   19a52:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   19a54:	693b      	ldr	r3, [r7, #16]
   19a56:	222c      	movs	r2, #44	; 0x2c
   19a58:	5c9b      	ldrb	r3, [r3, r2]
   19a5a:	2b00      	cmp	r3, #0
   19a5c:	d105      	bne.n	19a6a <_i2c_master_set_config+0x176>
   19a5e:	693b      	ldr	r3, [r7, #16]
   19a60:	689a      	ldr	r2, [r3, #8]
   19a62:	2380      	movs	r3, #128	; 0x80
   19a64:	049b      	lsls	r3, r3, #18
   19a66:	429a      	cmp	r2, r3
   19a68:	d104      	bne.n	19a74 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   19a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19a6c:	2280      	movs	r2, #128	; 0x80
   19a6e:	0512      	lsls	r2, r2, #20
   19a70:	4313      	orrs	r3, r2
   19a72:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   19a74:	693b      	ldr	r3, [r7, #16]
   19a76:	222d      	movs	r2, #45	; 0x2d
   19a78:	5c9b      	ldrb	r3, [r3, r2]
   19a7a:	2b00      	cmp	r3, #0
   19a7c:	d004      	beq.n	19a88 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   19a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19a80:	2280      	movs	r2, #128	; 0x80
   19a82:	0412      	lsls	r2, r2, #16
   19a84:	4313      	orrs	r3, r2
   19a86:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   19a88:	693b      	ldr	r3, [r7, #16]
   19a8a:	222e      	movs	r2, #46	; 0x2e
   19a8c:	5c9b      	ldrb	r3, [r3, r2]
   19a8e:	2b00      	cmp	r3, #0
   19a90:	d004      	beq.n	19a9c <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   19a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19a94:	2280      	movs	r2, #128	; 0x80
   19a96:	03d2      	lsls	r2, r2, #15
   19a98:	4313      	orrs	r3, r2
   19a9a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   19a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19a9e:	681a      	ldr	r2, [r3, #0]
   19aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19aa2:	431a      	orrs	r2, r3
   19aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19aa6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   19aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19aaa:	2280      	movs	r2, #128	; 0x80
   19aac:	0052      	lsls	r2, r2, #1
   19aae:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   19ab0:	2323      	movs	r3, #35	; 0x23
   19ab2:	2210      	movs	r2, #16
   19ab4:	4694      	mov	ip, r2
   19ab6:	44bc      	add	ip, r7
   19ab8:	4463      	add	r3, ip
   19aba:	781b      	ldrb	r3, [r3, #0]
   19abc:	3314      	adds	r3, #20
   19abe:	b2db      	uxtb	r3, r3
   19ac0:	0018      	movs	r0, r3
   19ac2:	4b61      	ldr	r3, [pc, #388]	; (19c48 <_i2c_master_set_config+0x354>)
   19ac4:	4798      	blx	r3
   19ac6:	0003      	movs	r3, r0
   19ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   19aca:	693b      	ldr	r3, [r7, #16]
   19acc:	681b      	ldr	r3, [r3, #0]
   19ace:	22fa      	movs	r2, #250	; 0xfa
   19ad0:	0092      	lsls	r2, r2, #2
   19ad2:	4353      	muls	r3, r2
   19ad4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   19ad6:	693b      	ldr	r3, [r7, #16]
   19ad8:	685b      	ldr	r3, [r3, #4]
   19ada:	22fa      	movs	r2, #250	; 0xfa
   19adc:	0092      	lsls	r2, r2, #2
   19ade:	4353      	muls	r3, r2
   19ae0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   19ae2:	693b      	ldr	r3, [r7, #16]
   19ae4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   19ae6:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   19ae8:	4b58      	ldr	r3, [pc, #352]	; (19c4c <_i2c_master_set_config+0x358>)
   19aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19aec:	4798      	blx	r3
   19aee:	0005      	movs	r5, r0
   19af0:	000e      	movs	r6, r1
   19af2:	4b56      	ldr	r3, [pc, #344]	; (19c4c <_i2c_master_set_config+0x358>)
   19af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19af6:	4798      	blx	r3
   19af8:	60b8      	str	r0, [r7, #8]
   19afa:	60f9      	str	r1, [r7, #12]
   19afc:	4b53      	ldr	r3, [pc, #332]	; (19c4c <_i2c_master_set_config+0x358>)
   19afe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19b00:	4798      	blx	r3
   19b02:	4c53      	ldr	r4, [pc, #332]	; (19c50 <_i2c_master_set_config+0x35c>)
   19b04:	4a53      	ldr	r2, [pc, #332]	; (19c54 <_i2c_master_set_config+0x360>)
   19b06:	4b54      	ldr	r3, [pc, #336]	; (19c58 <_i2c_master_set_config+0x364>)
   19b08:	47a0      	blx	r4
   19b0a:	0003      	movs	r3, r0
   19b0c:	000c      	movs	r4, r1
   19b0e:	603b      	str	r3, [r7, #0]
   19b10:	607c      	str	r4, [r7, #4]
   19b12:	4b4e      	ldr	r3, [pc, #312]	; (19c4c <_i2c_master_set_config+0x358>)
   19b14:	6a38      	ldr	r0, [r7, #32]
   19b16:	4798      	blx	r3
   19b18:	0002      	movs	r2, r0
   19b1a:	000b      	movs	r3, r1
   19b1c:	4c4c      	ldr	r4, [pc, #304]	; (19c50 <_i2c_master_set_config+0x35c>)
   19b1e:	6838      	ldr	r0, [r7, #0]
   19b20:	6879      	ldr	r1, [r7, #4]
   19b22:	47a0      	blx	r4
   19b24:	0003      	movs	r3, r0
   19b26:	000c      	movs	r4, r1
   19b28:	0018      	movs	r0, r3
   19b2a:	0021      	movs	r1, r4
   19b2c:	4c4b      	ldr	r4, [pc, #300]	; (19c5c <_i2c_master_set_config+0x368>)
   19b2e:	2200      	movs	r2, #0
   19b30:	4b4b      	ldr	r3, [pc, #300]	; (19c60 <_i2c_master_set_config+0x36c>)
   19b32:	47a0      	blx	r4
   19b34:	0003      	movs	r3, r0
   19b36:	000c      	movs	r4, r1
   19b38:	001a      	movs	r2, r3
   19b3a:	0023      	movs	r3, r4
   19b3c:	4c44      	ldr	r4, [pc, #272]	; (19c50 <_i2c_master_set_config+0x35c>)
   19b3e:	68b8      	ldr	r0, [r7, #8]
   19b40:	68f9      	ldr	r1, [r7, #12]
   19b42:	47a0      	blx	r4
   19b44:	0003      	movs	r3, r0
   19b46:	000c      	movs	r4, r1
   19b48:	001a      	movs	r2, r3
   19b4a:	0023      	movs	r3, r4
   19b4c:	4c45      	ldr	r4, [pc, #276]	; (19c64 <_i2c_master_set_config+0x370>)
   19b4e:	0028      	movs	r0, r5
   19b50:	0031      	movs	r1, r6
   19b52:	47a0      	blx	r4
   19b54:	0003      	movs	r3, r0
   19b56:	000c      	movs	r4, r1
   19b58:	001d      	movs	r5, r3
   19b5a:	0026      	movs	r6, r4
   19b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b5e:	005a      	lsls	r2, r3, #1
   19b60:	4b3a      	ldr	r3, [pc, #232]	; (19c4c <_i2c_master_set_config+0x358>)
   19b62:	0010      	movs	r0, r2
   19b64:	4798      	blx	r3
   19b66:	0002      	movs	r2, r0
   19b68:	000b      	movs	r3, r1
   19b6a:	4c3c      	ldr	r4, [pc, #240]	; (19c5c <_i2c_master_set_config+0x368>)
   19b6c:	0028      	movs	r0, r5
   19b6e:	0031      	movs	r1, r6
   19b70:	47a0      	blx	r4
   19b72:	0003      	movs	r3, r0
   19b74:	000c      	movs	r4, r1
   19b76:	0018      	movs	r0, r3
   19b78:	0021      	movs	r1, r4
   19b7a:	4c3a      	ldr	r4, [pc, #232]	; (19c64 <_i2c_master_set_config+0x370>)
   19b7c:	2200      	movs	r2, #0
   19b7e:	4b3a      	ldr	r3, [pc, #232]	; (19c68 <_i2c_master_set_config+0x374>)
   19b80:	47a0      	blx	r4
   19b82:	0003      	movs	r3, r0
   19b84:	000c      	movs	r4, r1
   19b86:	001d      	movs	r5, r3
   19b88:	0026      	movs	r6, r4
   19b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b8c:	005a      	lsls	r2, r3, #1
   19b8e:	4b2f      	ldr	r3, [pc, #188]	; (19c4c <_i2c_master_set_config+0x358>)
   19b90:	0010      	movs	r0, r2
   19b92:	4798      	blx	r3
   19b94:	0002      	movs	r2, r0
   19b96:	000b      	movs	r3, r1
   19b98:	4c34      	ldr	r4, [pc, #208]	; (19c6c <_i2c_master_set_config+0x378>)
   19b9a:	0028      	movs	r0, r5
   19b9c:	0031      	movs	r1, r6
   19b9e:	47a0      	blx	r4
   19ba0:	0003      	movs	r3, r0
   19ba2:	000c      	movs	r4, r1
   19ba4:	0019      	movs	r1, r3
   19ba6:	0022      	movs	r2, r4
   19ba8:	4b31      	ldr	r3, [pc, #196]	; (19c70 <_i2c_master_set_config+0x37c>)
   19baa:	0008      	movs	r0, r1
   19bac:	0011      	movs	r1, r2
   19bae:	4798      	blx	r3
   19bb0:	0003      	movs	r3, r0
   19bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   19bb4:	693b      	ldr	r3, [r7, #16]
   19bb6:	689a      	ldr	r2, [r3, #8]
   19bb8:	2380      	movs	r3, #128	; 0x80
   19bba:	049b      	lsls	r3, r3, #18
   19bbc:	429a      	cmp	r2, r3
   19bbe:	d16a      	bne.n	19c96 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   19bc0:	4b22      	ldr	r3, [pc, #136]	; (19c4c <_i2c_master_set_config+0x358>)
   19bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19bc4:	4798      	blx	r3
   19bc6:	4c25      	ldr	r4, [pc, #148]	; (19c5c <_i2c_master_set_config+0x368>)
   19bc8:	0002      	movs	r2, r0
   19bca:	000b      	movs	r3, r1
   19bcc:	47a0      	blx	r4
   19bce:	0003      	movs	r3, r0
   19bd0:	000c      	movs	r4, r1
   19bd2:	001d      	movs	r5, r3
   19bd4:	0026      	movs	r6, r4
   19bd6:	4b1d      	ldr	r3, [pc, #116]	; (19c4c <_i2c_master_set_config+0x358>)
   19bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19bda:	4798      	blx	r3
   19bdc:	4c1c      	ldr	r4, [pc, #112]	; (19c50 <_i2c_master_set_config+0x35c>)
   19bde:	2200      	movs	r2, #0
   19be0:	4b24      	ldr	r3, [pc, #144]	; (19c74 <_i2c_master_set_config+0x380>)
   19be2:	47a0      	blx	r4
   19be4:	0003      	movs	r3, r0
   19be6:	000c      	movs	r4, r1
   19be8:	001a      	movs	r2, r3
   19bea:	0023      	movs	r3, r4
   19bec:	4c1f      	ldr	r4, [pc, #124]	; (19c6c <_i2c_master_set_config+0x378>)
   19bee:	0028      	movs	r0, r5
   19bf0:	0031      	movs	r1, r6
   19bf2:	47a0      	blx	r4
   19bf4:	0003      	movs	r3, r0
   19bf6:	000c      	movs	r4, r1
   19bf8:	0018      	movs	r0, r3
   19bfa:	0021      	movs	r1, r4
   19bfc:	4c19      	ldr	r4, [pc, #100]	; (19c64 <_i2c_master_set_config+0x370>)
   19bfe:	2200      	movs	r2, #0
   19c00:	4b19      	ldr	r3, [pc, #100]	; (19c68 <_i2c_master_set_config+0x374>)
   19c02:	47a0      	blx	r4
   19c04:	0003      	movs	r3, r0
   19c06:	000c      	movs	r4, r1
   19c08:	0019      	movs	r1, r3
   19c0a:	0022      	movs	r2, r4
   19c0c:	4b18      	ldr	r3, [pc, #96]	; (19c70 <_i2c_master_set_config+0x37c>)
   19c0e:	0008      	movs	r0, r1
   19c10:	0011      	movs	r1, r2
   19c12:	4798      	blx	r3
   19c14:	0003      	movs	r3, r0
   19c16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   19c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19c1a:	2b00      	cmp	r3, #0
   19c1c:	d02e      	beq.n	19c7c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   19c1e:	4b16      	ldr	r3, [pc, #88]	; (19c78 <_i2c_master_set_config+0x384>)
   19c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19c24:	4798      	blx	r3
   19c26:	0003      	movs	r3, r0
   19c28:	1e9a      	subs	r2, r3, #2
   19c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19c2c:	1ad3      	subs	r3, r2, r3
   19c2e:	653b      	str	r3, [r7, #80]	; 0x50
   19c30:	e031      	b.n	19c96 <_i2c_master_set_config+0x3a2>
   19c32:	46c0      	nop			; (mov r8, r8)
   19c34:	00029795 	.word	0x00029795
   19c38:	000197b5 	.word	0x000197b5
   19c3c:	000295d9 	.word	0x000295d9
   19c40:	0002c3e1 	.word	0x0002c3e1
   19c44:	000197dd 	.word	0x000197dd
   19c48:	0002c1a5 	.word	0x0002c1a5
   19c4c:	00037339 	.word	0x00037339
   19c50:	000367a5 	.word	0x000367a5
   19c54:	e826d695 	.word	0xe826d695
   19c58:	3e112e0b 	.word	0x3e112e0b
   19c5c:	00035b1d 	.word	0x00035b1d
   19c60:	40240000 	.word	0x40240000
   19c64:	00036ca5 	.word	0x00036ca5
   19c68:	3ff00000 	.word	0x3ff00000
   19c6c:	0003613d 	.word	0x0003613d
   19c70:	000372d1 	.word	0x000372d1
   19c74:	40080000 	.word	0x40080000
   19c78:	00034bf5 	.word	0x00034bf5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   19c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19c7e:	005a      	lsls	r2, r3, #1
   19c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19c82:	18d3      	adds	r3, r2, r3
   19c84:	1e5a      	subs	r2, r3, #1
   19c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19c88:	0059      	lsls	r1, r3, #1
   19c8a:	4b1d      	ldr	r3, [pc, #116]	; (19d00 <_i2c_master_set_config+0x40c>)
   19c8c:	0010      	movs	r0, r2
   19c8e:	4798      	blx	r3
   19c90:	0003      	movs	r3, r0
   19c92:	3b01      	subs	r3, #1
   19c94:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   19c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19c98:	2bff      	cmp	r3, #255	; 0xff
   19c9a:	dc08      	bgt.n	19cae <_i2c_master_set_config+0x3ba>
   19c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19c9e:	2b00      	cmp	r3, #0
   19ca0:	db05      	blt.n	19cae <_i2c_master_set_config+0x3ba>
   19ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19ca4:	2bff      	cmp	r3, #255	; 0xff
   19ca6:	dc02      	bgt.n	19cae <_i2c_master_set_config+0x3ba>
   19ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19caa:	2b00      	cmp	r3, #0
   19cac:	da06      	bge.n	19cbc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   19cae:	233b      	movs	r3, #59	; 0x3b
   19cb0:	2210      	movs	r2, #16
   19cb2:	4694      	mov	ip, r2
   19cb4:	44bc      	add	ip, r7
   19cb6:	4463      	add	r3, ip
   19cb8:	2240      	movs	r2, #64	; 0x40
   19cba:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   19cbc:	233b      	movs	r3, #59	; 0x3b
   19cbe:	2210      	movs	r2, #16
   19cc0:	4694      	mov	ip, r2
   19cc2:	44bc      	add	ip, r7
   19cc4:	4463      	add	r3, ip
   19cc6:	781b      	ldrb	r3, [r3, #0]
   19cc8:	2b40      	cmp	r3, #64	; 0x40
   19cca:	d00e      	beq.n	19cea <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19cce:	22ff      	movs	r2, #255	; 0xff
   19cd0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19cd4:	041b      	lsls	r3, r3, #16
   19cd6:	0019      	movs	r1, r3
   19cd8:	23ff      	movs	r3, #255	; 0xff
   19cda:	041b      	lsls	r3, r3, #16
   19cdc:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19cde:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   19ce2:	0612      	lsls	r2, r2, #24
   19ce4:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19ce8:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   19cea:	233b      	movs	r3, #59	; 0x3b
   19cec:	2210      	movs	r2, #16
   19cee:	4694      	mov	ip, r2
   19cf0:	44bc      	add	ip, r7
   19cf2:	4463      	add	r3, ip
   19cf4:	781b      	ldrb	r3, [r3, #0]
}
   19cf6:	0018      	movs	r0, r3
   19cf8:	46bd      	mov	sp, r7
   19cfa:	b017      	add	sp, #92	; 0x5c
   19cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cfe:	46c0      	nop			; (mov r8, r8)
   19d00:	00034bf5 	.word	0x00034bf5

00019d04 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   19d04:	b590      	push	{r4, r7, lr}
   19d06:	b08b      	sub	sp, #44	; 0x2c
   19d08:	af00      	add	r7, sp, #0
   19d0a:	60f8      	str	r0, [r7, #12]
   19d0c:	60b9      	str	r1, [r7, #8]
   19d0e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   19d10:	68fb      	ldr	r3, [r7, #12]
   19d12:	68ba      	ldr	r2, [r7, #8]
   19d14:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19d16:	68fb      	ldr	r3, [r7, #12]
   19d18:	681b      	ldr	r3, [r3, #0]
   19d1a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   19d1c:	68fb      	ldr	r3, [r7, #12]
   19d1e:	681b      	ldr	r3, [r3, #0]
   19d20:	0018      	movs	r0, r3
   19d22:	4b3b      	ldr	r3, [pc, #236]	; (19e10 <i2c_master_init+0x10c>)
   19d24:	4798      	blx	r3
   19d26:	0003      	movs	r3, r0
   19d28:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   19d2a:	6a3b      	ldr	r3, [r7, #32]
   19d2c:	3302      	adds	r3, #2
   19d2e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19d30:	6a3b      	ldr	r3, [r7, #32]
   19d32:	3314      	adds	r3, #20
   19d34:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   19d36:	2201      	movs	r2, #1
   19d38:	69fb      	ldr	r3, [r7, #28]
   19d3a:	409a      	lsls	r2, r3
   19d3c:	0013      	movs	r3, r2
   19d3e:	0019      	movs	r1, r3
   19d40:	2002      	movs	r0, #2
   19d42:	4b34      	ldr	r3, [pc, #208]	; (19e14 <i2c_master_init+0x110>)
   19d44:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   19d46:	2314      	movs	r3, #20
   19d48:	18fb      	adds	r3, r7, r3
   19d4a:	0018      	movs	r0, r3
   19d4c:	4b32      	ldr	r3, [pc, #200]	; (19e18 <i2c_master_init+0x114>)
   19d4e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   19d50:	687b      	ldr	r3, [r7, #4]
   19d52:	7b1a      	ldrb	r2, [r3, #12]
   19d54:	2314      	movs	r3, #20
   19d56:	18fb      	adds	r3, r7, r3
   19d58:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   19d5a:	69bb      	ldr	r3, [r7, #24]
   19d5c:	b2db      	uxtb	r3, r3
   19d5e:	2214      	movs	r2, #20
   19d60:	18ba      	adds	r2, r7, r2
   19d62:	0011      	movs	r1, r2
   19d64:	0018      	movs	r0, r3
   19d66:	4b2d      	ldr	r3, [pc, #180]	; (19e1c <i2c_master_init+0x118>)
   19d68:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   19d6a:	69bb      	ldr	r3, [r7, #24]
   19d6c:	b2db      	uxtb	r3, r3
   19d6e:	0018      	movs	r0, r3
   19d70:	4b2b      	ldr	r3, [pc, #172]	; (19e20 <i2c_master_init+0x11c>)
   19d72:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   19d74:	687b      	ldr	r3, [r7, #4]
   19d76:	7b1b      	ldrb	r3, [r3, #12]
   19d78:	2100      	movs	r1, #0
   19d7a:	0018      	movs	r0, r3
   19d7c:	4b29      	ldr	r3, [pc, #164]	; (19e24 <i2c_master_init+0x120>)
   19d7e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   19d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d82:	681b      	ldr	r3, [r3, #0]
   19d84:	2202      	movs	r2, #2
   19d86:	4013      	ands	r3, r2
   19d88:	d001      	beq.n	19d8e <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   19d8a:	231c      	movs	r3, #28
   19d8c:	e03b      	b.n	19e06 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   19d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d90:	681b      	ldr	r3, [r3, #0]
   19d92:	2201      	movs	r2, #1
   19d94:	4013      	ands	r3, r2
   19d96:	d001      	beq.n	19d9c <i2c_master_init+0x98>
		return STATUS_BUSY;
   19d98:	2305      	movs	r3, #5
   19d9a:	e034      	b.n	19e06 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   19d9c:	68fb      	ldr	r3, [r7, #12]
   19d9e:	681b      	ldr	r3, [r3, #0]
   19da0:	2217      	movs	r2, #23
   19da2:	18bc      	adds	r4, r7, r2
   19da4:	0018      	movs	r0, r3
   19da6:	4b1a      	ldr	r3, [pc, #104]	; (19e10 <i2c_master_init+0x10c>)
   19da8:	4798      	blx	r3
   19daa:	0003      	movs	r3, r0
   19dac:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   19dae:	4a1e      	ldr	r2, [pc, #120]	; (19e28 <i2c_master_init+0x124>)
   19db0:	2317      	movs	r3, #23
   19db2:	18fb      	adds	r3, r7, r3
   19db4:	781b      	ldrb	r3, [r3, #0]
   19db6:	0011      	movs	r1, r2
   19db8:	0018      	movs	r0, r3
   19dba:	4b1c      	ldr	r3, [pc, #112]	; (19e2c <i2c_master_init+0x128>)
   19dbc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   19dbe:	2317      	movs	r3, #23
   19dc0:	18fb      	adds	r3, r7, r3
   19dc2:	781a      	ldrb	r2, [r3, #0]
   19dc4:	4b1a      	ldr	r3, [pc, #104]	; (19e30 <i2c_master_init+0x12c>)
   19dc6:	0092      	lsls	r2, r2, #2
   19dc8:	68f9      	ldr	r1, [r7, #12]
   19dca:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   19dcc:	68fb      	ldr	r3, [r7, #12]
   19dce:	2200      	movs	r2, #0
   19dd0:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   19dd2:	68fb      	ldr	r3, [r7, #12]
   19dd4:	2200      	movs	r2, #0
   19dd6:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   19dd8:	68fb      	ldr	r3, [r7, #12]
   19dda:	2200      	movs	r2, #0
   19ddc:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   19dde:	68fb      	ldr	r3, [r7, #12]
   19de0:	2200      	movs	r2, #0
   19de2:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   19de4:	68fb      	ldr	r3, [r7, #12]
   19de6:	2225      	movs	r2, #37	; 0x25
   19de8:	2100      	movs	r1, #0
   19dea:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   19dec:	68fb      	ldr	r3, [r7, #12]
   19dee:	2200      	movs	r2, #0
   19df0:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   19df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19df4:	2214      	movs	r2, #20
   19df6:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   19df8:	687a      	ldr	r2, [r7, #4]
   19dfa:	68fb      	ldr	r3, [r7, #12]
   19dfc:	0011      	movs	r1, r2
   19dfe:	0018      	movs	r0, r3
   19e00:	4b0c      	ldr	r3, [pc, #48]	; (19e34 <i2c_master_init+0x130>)
   19e02:	4798      	blx	r3
   19e04:	0003      	movs	r3, r0
}
   19e06:	0018      	movs	r0, r3
   19e08:	46bd      	mov	sp, r7
   19e0a:	b00b      	add	sp, #44	; 0x2c
   19e0c:	bd90      	pop	{r4, r7, pc}
   19e0e:	46c0      	nop			; (mov r8, r8)
   19e10:	00029795 	.word	0x00029795
   19e14:	00019759 	.word	0x00019759
   19e18:	00019741 	.word	0x00019741
   19e1c:	0002c081 	.word	0x0002c081
   19e20:	0002c0c5 	.word	0x0002c0c5
   19e24:	0002954d 	.word	0x0002954d
   19e28:	00012bcd 	.word	0x00012bcd
   19e2c:	000297f9 	.word	0x000297f9
   19e30:	20005a64 	.word	0x20005a64
   19e34:	000198f5 	.word	0x000198f5

00019e38 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   19e38:	b580      	push	{r7, lr}
   19e3a:	b084      	sub	sp, #16
   19e3c:	af00      	add	r7, sp, #0
   19e3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19e40:	687b      	ldr	r3, [r7, #4]
   19e42:	681b      	ldr	r3, [r3, #0]
   19e44:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   19e46:	687b      	ldr	r3, [r7, #4]
   19e48:	0018      	movs	r0, r3
   19e4a:	4b0f      	ldr	r3, [pc, #60]	; (19e88 <i2c_master_reset+0x50>)
   19e4c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   19e4e:	687b      	ldr	r3, [r7, #4]
   19e50:	0018      	movs	r0, r3
   19e52:	4b0e      	ldr	r3, [pc, #56]	; (19e8c <i2c_master_reset+0x54>)
   19e54:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   19e56:	4b0e      	ldr	r3, [pc, #56]	; (19e90 <i2c_master_reset+0x58>)
   19e58:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   19e5a:	687b      	ldr	r3, [r7, #4]
   19e5c:	681b      	ldr	r3, [r3, #0]
   19e5e:	0018      	movs	r0, r3
   19e60:	4b0c      	ldr	r3, [pc, #48]	; (19e94 <i2c_master_reset+0x5c>)
   19e62:	4798      	blx	r3
   19e64:	0003      	movs	r3, r0
   19e66:	0018      	movs	r0, r3
   19e68:	4b0b      	ldr	r3, [pc, #44]	; (19e98 <i2c_master_reset+0x60>)
   19e6a:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   19e6c:	4b0b      	ldr	r3, [pc, #44]	; (19e9c <i2c_master_reset+0x64>)
   19e6e:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   19e70:	687b      	ldr	r3, [r7, #4]
   19e72:	0018      	movs	r0, r3
   19e74:	4b04      	ldr	r3, [pc, #16]	; (19e88 <i2c_master_reset+0x50>)
   19e76:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   19e78:	68fb      	ldr	r3, [r7, #12]
   19e7a:	2201      	movs	r2, #1
   19e7c:	601a      	str	r2, [r3, #0]
}
   19e7e:	46c0      	nop			; (mov r8, r8)
   19e80:	46bd      	mov	sp, r7
   19e82:	b004      	add	sp, #16
   19e84:	bd80      	pop	{r7, pc}
   19e86:	46c0      	nop			; (mov r8, r8)
   19e88:	00019879 	.word	0x00019879
   19e8c:	0001989d 	.word	0x0001989d
   19e90:	000197fd 	.word	0x000197fd
   19e94:	00029865 	.word	0x00029865
   19e98:	0002c1fd 	.word	0x0002c1fd
   19e9c:	00019811 	.word	0x00019811

00019ea0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   19ea0:	b580      	push	{r7, lr}
   19ea2:	b084      	sub	sp, #16
   19ea4:	af00      	add	r7, sp, #0
   19ea6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19ea8:	687b      	ldr	r3, [r7, #4]
   19eaa:	681b      	ldr	r3, [r3, #0]
   19eac:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   19eae:	68fb      	ldr	r3, [r7, #12]
   19eb0:	7e1b      	ldrb	r3, [r3, #24]
   19eb2:	b2db      	uxtb	r3, r3
   19eb4:	001a      	movs	r2, r3
   19eb6:	2302      	movs	r3, #2
   19eb8:	4013      	ands	r3, r2
   19eba:	d00b      	beq.n	19ed4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   19ebc:	68fb      	ldr	r3, [r7, #12]
   19ebe:	2202      	movs	r2, #2
   19ec0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   19ec2:	68fb      	ldr	r3, [r7, #12]
   19ec4:	8b5b      	ldrh	r3, [r3, #26]
   19ec6:	b29b      	uxth	r3, r3
   19ec8:	001a      	movs	r2, r3
   19eca:	2302      	movs	r3, #2
   19ecc:	4013      	ands	r3, r2
   19ece:	d011      	beq.n	19ef4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   19ed0:	2341      	movs	r3, #65	; 0x41
   19ed2:	e010      	b.n	19ef6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   19ed4:	68fb      	ldr	r3, [r7, #12]
   19ed6:	8b5b      	ldrh	r3, [r3, #26]
   19ed8:	b29b      	uxth	r3, r3
   19eda:	001a      	movs	r2, r3
   19edc:	2304      	movs	r3, #4
   19ede:	4013      	ands	r3, r2
   19ee0:	d008      	beq.n	19ef4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   19ee2:	68fb      	ldr	r3, [r7, #12]
   19ee4:	685b      	ldr	r3, [r3, #4]
   19ee6:	22c0      	movs	r2, #192	; 0xc0
   19ee8:	0292      	lsls	r2, r2, #10
   19eea:	431a      	orrs	r2, r3
   19eec:	68fb      	ldr	r3, [r7, #12]
   19eee:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   19ef0:	2318      	movs	r3, #24
   19ef2:	e000      	b.n	19ef6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   19ef4:	2300      	movs	r3, #0
}
   19ef6:	0018      	movs	r0, r3
   19ef8:	46bd      	mov	sp, r7
   19efa:	b004      	add	sp, #16
   19efc:	bd80      	pop	{r7, pc}

00019efe <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   19efe:	b580      	push	{r7, lr}
   19f00:	b084      	sub	sp, #16
   19f02:	af00      	add	r7, sp, #0
   19f04:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19f06:	687b      	ldr	r3, [r7, #4]
   19f08:	681b      	ldr	r3, [r3, #0]
   19f0a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   19f0c:	230e      	movs	r3, #14
   19f0e:	18fb      	adds	r3, r7, r3
   19f10:	2200      	movs	r2, #0
   19f12:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   19f14:	e00f      	b.n	19f36 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   19f16:	230e      	movs	r3, #14
   19f18:	18fb      	adds	r3, r7, r3
   19f1a:	220e      	movs	r2, #14
   19f1c:	18ba      	adds	r2, r7, r2
   19f1e:	8812      	ldrh	r2, [r2, #0]
   19f20:	3201      	adds	r2, #1
   19f22:	801a      	strh	r2, [r3, #0]
   19f24:	687b      	ldr	r3, [r7, #4]
   19f26:	891b      	ldrh	r3, [r3, #8]
   19f28:	220e      	movs	r2, #14
   19f2a:	18ba      	adds	r2, r7, r2
   19f2c:	8812      	ldrh	r2, [r2, #0]
   19f2e:	429a      	cmp	r2, r3
   19f30:	d301      	bcc.n	19f36 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   19f32:	2312      	movs	r3, #18
   19f34:	e00e      	b.n	19f54 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   19f36:	68bb      	ldr	r3, [r7, #8]
   19f38:	7e1b      	ldrb	r3, [r3, #24]
   19f3a:	b2db      	uxtb	r3, r3
   19f3c:	001a      	movs	r2, r3
   19f3e:	2301      	movs	r3, #1
   19f40:	4013      	ands	r3, r2
   19f42:	d106      	bne.n	19f52 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   19f44:	68bb      	ldr	r3, [r7, #8]
   19f46:	7e1b      	ldrb	r3, [r3, #24]
   19f48:	b2db      	uxtb	r3, r3
   19f4a:	001a      	movs	r2, r3
   19f4c:	2302      	movs	r3, #2
   19f4e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   19f50:	d0e1      	beq.n	19f16 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   19f52:	2300      	movs	r3, #0
}
   19f54:	0018      	movs	r0, r3
   19f56:	46bd      	mov	sp, r7
   19f58:	b004      	add	sp, #16
   19f5a:	bd80      	pop	{r7, pc}

00019f5c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   19f5c:	b590      	push	{r4, r7, lr}
   19f5e:	b085      	sub	sp, #20
   19f60:	af00      	add	r7, sp, #0
   19f62:	6078      	str	r0, [r7, #4]
   19f64:	000a      	movs	r2, r1
   19f66:	1cfb      	adds	r3, r7, #3
   19f68:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19f6a:	687b      	ldr	r3, [r7, #4]
   19f6c:	681b      	ldr	r3, [r3, #0]
   19f6e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   19f70:	68fb      	ldr	r3, [r7, #12]
   19f72:	685b      	ldr	r3, [r3, #4]
   19f74:	2280      	movs	r2, #128	; 0x80
   19f76:	02d2      	lsls	r2, r2, #11
   19f78:	431a      	orrs	r2, r3
   19f7a:	68fb      	ldr	r3, [r7, #12]
   19f7c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   19f7e:	1cfb      	adds	r3, r7, #3
   19f80:	781a      	ldrb	r2, [r3, #0]
   19f82:	68fb      	ldr	r3, [r7, #12]
   19f84:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   19f86:	230b      	movs	r3, #11
   19f88:	18fc      	adds	r4, r7, r3
   19f8a:	687b      	ldr	r3, [r7, #4]
   19f8c:	0018      	movs	r0, r3
   19f8e:	4b07      	ldr	r3, [pc, #28]	; (19fac <_i2c_master_send_hs_master_code+0x50>)
   19f90:	4798      	blx	r3
   19f92:	0003      	movs	r3, r0
   19f94:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   19f96:	68fb      	ldr	r3, [r7, #12]
   19f98:	2201      	movs	r2, #1
   19f9a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   19f9c:	230b      	movs	r3, #11
   19f9e:	18fb      	adds	r3, r7, r3
   19fa0:	781b      	ldrb	r3, [r3, #0]
}
   19fa2:	0018      	movs	r0, r3
   19fa4:	46bd      	mov	sp, r7
   19fa6:	b005      	add	sp, #20
   19fa8:	bd90      	pop	{r4, r7, pc}
   19faa:	46c0      	nop			; (mov r8, r8)
   19fac:	00019eff 	.word	0x00019eff

00019fb0 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   19fb0:	b580      	push	{r7, lr}
   19fb2:	af00      	add	r7, sp, #0
   19fb4:	2000      	movs	r0, #0
   19fb6:	4b02      	ldr	r3, [pc, #8]	; (19fc0 <TC3_Handler+0x10>)
   19fb8:	4798      	blx	r3
   19fba:	46c0      	nop			; (mov r8, r8)
   19fbc:	46bd      	mov	sp, r7
   19fbe:	bd80      	pop	{r7, pc}
   19fc0:	00019fed 	.word	0x00019fed

00019fc4 <TC4_Handler>:
   19fc4:	b580      	push	{r7, lr}
   19fc6:	af00      	add	r7, sp, #0
   19fc8:	2001      	movs	r0, #1
   19fca:	4b02      	ldr	r3, [pc, #8]	; (19fd4 <TC4_Handler+0x10>)
   19fcc:	4798      	blx	r3
   19fce:	46c0      	nop			; (mov r8, r8)
   19fd0:	46bd      	mov	sp, r7
   19fd2:	bd80      	pop	{r7, pc}
   19fd4:	00019fed 	.word	0x00019fed

00019fd8 <TC5_Handler>:
   19fd8:	b580      	push	{r7, lr}
   19fda:	af00      	add	r7, sp, #0
   19fdc:	2002      	movs	r0, #2
   19fde:	4b02      	ldr	r3, [pc, #8]	; (19fe8 <TC5_Handler+0x10>)
   19fe0:	4798      	blx	r3
   19fe2:	46c0      	nop			; (mov r8, r8)
   19fe4:	46bd      	mov	sp, r7
   19fe6:	bd80      	pop	{r7, pc}
   19fe8:	00019fed 	.word	0x00019fed

00019fec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   19fec:	b580      	push	{r7, lr}
   19fee:	b084      	sub	sp, #16
   19ff0:	af00      	add	r7, sp, #0
   19ff2:	0002      	movs	r2, r0
   19ff4:	1dfb      	adds	r3, r7, #7
   19ff6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   19ff8:	1dfb      	adds	r3, r7, #7
   19ffa:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   19ffc:	4b28      	ldr	r3, [pc, #160]	; (1a0a0 <_tc_interrupt_handler+0xb4>)
   19ffe:	0092      	lsls	r2, r2, #2
   1a000:	58d3      	ldr	r3, [r2, r3]
   1a002:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a004:	68fb      	ldr	r3, [r7, #12]
   1a006:	681b      	ldr	r3, [r3, #0]
   1a008:	7b9b      	ldrb	r3, [r3, #14]
   1a00a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1a00c:	68fa      	ldr	r2, [r7, #12]
   1a00e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a010:	4013      	ands	r3, r2
   1a012:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1a014:	68fb      	ldr	r3, [r7, #12]
   1a016:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a018:	230b      	movs	r3, #11
   1a01a:	18fb      	adds	r3, r7, r3
   1a01c:	400a      	ands	r2, r1
   1a01e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1a020:	230b      	movs	r3, #11
   1a022:	18fb      	adds	r3, r7, r3
   1a024:	781b      	ldrb	r3, [r3, #0]
   1a026:	2201      	movs	r2, #1
   1a028:	4013      	ands	r3, r2
   1a02a:	d008      	beq.n	1a03e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1a02c:	68fb      	ldr	r3, [r7, #12]
   1a02e:	689b      	ldr	r3, [r3, #8]
   1a030:	68fa      	ldr	r2, [r7, #12]
   1a032:	0010      	movs	r0, r2
   1a034:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1a036:	68fb      	ldr	r3, [r7, #12]
   1a038:	681b      	ldr	r3, [r3, #0]
   1a03a:	2201      	movs	r2, #1
   1a03c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1a03e:	230b      	movs	r3, #11
   1a040:	18fb      	adds	r3, r7, r3
   1a042:	781b      	ldrb	r3, [r3, #0]
   1a044:	2202      	movs	r2, #2
   1a046:	4013      	ands	r3, r2
   1a048:	d008      	beq.n	1a05c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1a04a:	68fb      	ldr	r3, [r7, #12]
   1a04c:	68db      	ldr	r3, [r3, #12]
   1a04e:	68fa      	ldr	r2, [r7, #12]
   1a050:	0010      	movs	r0, r2
   1a052:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1a054:	68fb      	ldr	r3, [r7, #12]
   1a056:	681b      	ldr	r3, [r3, #0]
   1a058:	2202      	movs	r2, #2
   1a05a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1a05c:	230b      	movs	r3, #11
   1a05e:	18fb      	adds	r3, r7, r3
   1a060:	781b      	ldrb	r3, [r3, #0]
   1a062:	2210      	movs	r2, #16
   1a064:	4013      	ands	r3, r2
   1a066:	d008      	beq.n	1a07a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1a068:	68fb      	ldr	r3, [r7, #12]
   1a06a:	691b      	ldr	r3, [r3, #16]
   1a06c:	68fa      	ldr	r2, [r7, #12]
   1a06e:	0010      	movs	r0, r2
   1a070:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1a072:	68fb      	ldr	r3, [r7, #12]
   1a074:	681b      	ldr	r3, [r3, #0]
   1a076:	2210      	movs	r2, #16
   1a078:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1a07a:	230b      	movs	r3, #11
   1a07c:	18fb      	adds	r3, r7, r3
   1a07e:	781b      	ldrb	r3, [r3, #0]
   1a080:	2220      	movs	r2, #32
   1a082:	4013      	ands	r3, r2
   1a084:	d008      	beq.n	1a098 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1a086:	68fb      	ldr	r3, [r7, #12]
   1a088:	695b      	ldr	r3, [r3, #20]
   1a08a:	68fa      	ldr	r2, [r7, #12]
   1a08c:	0010      	movs	r0, r2
   1a08e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1a090:	68fb      	ldr	r3, [r7, #12]
   1a092:	681b      	ldr	r3, [r3, #0]
   1a094:	2220      	movs	r2, #32
   1a096:	739a      	strb	r2, [r3, #14]
	}
}
   1a098:	46c0      	nop			; (mov r8, r8)
   1a09a:	46bd      	mov	sp, r7
   1a09c:	b004      	add	sp, #16
   1a09e:	bd80      	pop	{r7, pc}
   1a0a0:	2000487c 	.word	0x2000487c

0001a0a4 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1a0a4:	b580      	push	{r7, lr}
   1a0a6:	b084      	sub	sp, #16
   1a0a8:	af00      	add	r7, sp, #0
   1a0aa:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   1a0ac:	2300      	movs	r3, #0
   1a0ae:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1a0b0:	687b      	ldr	r3, [r7, #4]
   1a0b2:	2b00      	cmp	r3, #0
   1a0b4:	d101      	bne.n	1a0ba <FreeRTOS_CLIRegisterCommand+0x16>
   1a0b6:	b672      	cpsid	i
   1a0b8:	e7fe      	b.n	1a0b8 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1a0ba:	2008      	movs	r0, #8
   1a0bc:	4b11      	ldr	r3, [pc, #68]	; (1a104 <FreeRTOS_CLIRegisterCommand+0x60>)
   1a0be:	4798      	blx	r3
   1a0c0:	0003      	movs	r3, r0
   1a0c2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1a0c4:	68bb      	ldr	r3, [r7, #8]
   1a0c6:	2b00      	cmp	r3, #0
   1a0c8:	d101      	bne.n	1a0ce <FreeRTOS_CLIRegisterCommand+0x2a>
   1a0ca:	b672      	cpsid	i
   1a0cc:	e7fe      	b.n	1a0cc <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1a0ce:	68bb      	ldr	r3, [r7, #8]
   1a0d0:	2b00      	cmp	r3, #0
   1a0d2:	d012      	beq.n	1a0fa <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1a0d4:	4b0c      	ldr	r3, [pc, #48]	; (1a108 <FreeRTOS_CLIRegisterCommand+0x64>)
   1a0d6:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1a0d8:	68bb      	ldr	r3, [r7, #8]
   1a0da:	687a      	ldr	r2, [r7, #4]
   1a0dc:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1a0de:	68bb      	ldr	r3, [r7, #8]
   1a0e0:	2200      	movs	r2, #0
   1a0e2:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1a0e4:	4b09      	ldr	r3, [pc, #36]	; (1a10c <FreeRTOS_CLIRegisterCommand+0x68>)
   1a0e6:	681b      	ldr	r3, [r3, #0]
   1a0e8:	68ba      	ldr	r2, [r7, #8]
   1a0ea:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1a0ec:	4b07      	ldr	r3, [pc, #28]	; (1a10c <FreeRTOS_CLIRegisterCommand+0x68>)
   1a0ee:	68ba      	ldr	r2, [r7, #8]
   1a0f0:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1a0f2:	4b07      	ldr	r3, [pc, #28]	; (1a110 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1a0f4:	4798      	blx	r3

		xReturn = pdPASS;
   1a0f6:	2301      	movs	r3, #1
   1a0f8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1a0fa:	68fb      	ldr	r3, [r7, #12]
}
   1a0fc:	0018      	movs	r0, r3
   1a0fe:	46bd      	mov	sp, r7
   1a100:	b004      	add	sp, #16
   1a102:	bd80      	pop	{r7, pc}
   1a104:	0001c4b1 	.word	0x0001c4b1
   1a108:	0001c379 	.word	0x0001c379
   1a10c:	200000fc 	.word	0x200000fc
   1a110:	0001c39d 	.word	0x0001c39d

0001a114 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1a114:	b580      	push	{r7, lr}
   1a116:	b088      	sub	sp, #32
   1a118:	af00      	add	r7, sp, #0
   1a11a:	60f8      	str	r0, [r7, #12]
   1a11c:	60b9      	str	r1, [r7, #8]
   1a11e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   1a120:	2301      	movs	r3, #1
   1a122:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1a124:	4b3d      	ldr	r3, [pc, #244]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a126:	681b      	ldr	r3, [r3, #0]
   1a128:	2b00      	cmp	r3, #0
   1a12a:	d144      	bne.n	1a1b6 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a12c:	4b3b      	ldr	r3, [pc, #236]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a12e:	4a3c      	ldr	r2, [pc, #240]	; (1a220 <FreeRTOS_CLIProcessCommand+0x10c>)
   1a130:	601a      	str	r2, [r3, #0]
   1a132:	e03a      	b.n	1a1aa <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1a134:	4b39      	ldr	r3, [pc, #228]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a136:	681b      	ldr	r3, [r3, #0]
   1a138:	681b      	ldr	r3, [r3, #0]
   1a13a:	681b      	ldr	r3, [r3, #0]
   1a13c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1a13e:	69bb      	ldr	r3, [r7, #24]
   1a140:	0018      	movs	r0, r3
   1a142:	4b38      	ldr	r3, [pc, #224]	; (1a224 <FreeRTOS_CLIProcessCommand+0x110>)
   1a144:	4798      	blx	r3
   1a146:	0003      	movs	r3, r0
   1a148:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1a14a:	68fa      	ldr	r2, [r7, #12]
   1a14c:	697b      	ldr	r3, [r7, #20]
   1a14e:	18d3      	adds	r3, r2, r3
   1a150:	781b      	ldrb	r3, [r3, #0]
   1a152:	2b20      	cmp	r3, #32
   1a154:	d005      	beq.n	1a162 <FreeRTOS_CLIProcessCommand+0x4e>
   1a156:	68fa      	ldr	r2, [r7, #12]
   1a158:	697b      	ldr	r3, [r7, #20]
   1a15a:	18d3      	adds	r3, r2, r3
   1a15c:	781b      	ldrb	r3, [r3, #0]
   1a15e:	2b00      	cmp	r3, #0
   1a160:	d11e      	bne.n	1a1a0 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1a162:	697a      	ldr	r2, [r7, #20]
   1a164:	69b9      	ldr	r1, [r7, #24]
   1a166:	68fb      	ldr	r3, [r7, #12]
   1a168:	0018      	movs	r0, r3
   1a16a:	4b2f      	ldr	r3, [pc, #188]	; (1a228 <FreeRTOS_CLIProcessCommand+0x114>)
   1a16c:	4798      	blx	r3
   1a16e:	1e03      	subs	r3, r0, #0
   1a170:	d116      	bne.n	1a1a0 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1a172:	4b2a      	ldr	r3, [pc, #168]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a174:	681b      	ldr	r3, [r3, #0]
   1a176:	681b      	ldr	r3, [r3, #0]
   1a178:	7b1b      	ldrb	r3, [r3, #12]
   1a17a:	b25b      	sxtb	r3, r3
   1a17c:	2b00      	cmp	r3, #0
   1a17e:	db19      	blt.n	1a1b4 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1a180:	68fb      	ldr	r3, [r7, #12]
   1a182:	0018      	movs	r0, r3
   1a184:	4b29      	ldr	r3, [pc, #164]	; (1a22c <FreeRTOS_CLIProcessCommand+0x118>)
   1a186:	4798      	blx	r3
   1a188:	0003      	movs	r3, r0
   1a18a:	001a      	movs	r2, r3
   1a18c:	4b23      	ldr	r3, [pc, #140]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a18e:	681b      	ldr	r3, [r3, #0]
   1a190:	681b      	ldr	r3, [r3, #0]
   1a192:	7b1b      	ldrb	r3, [r3, #12]
   1a194:	b25b      	sxtb	r3, r3
   1a196:	429a      	cmp	r2, r3
   1a198:	d00c      	beq.n	1a1b4 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1a19a:	2300      	movs	r3, #0
   1a19c:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1a19e:	e009      	b.n	1a1b4 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a1a0:	4b1e      	ldr	r3, [pc, #120]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1a2:	681b      	ldr	r3, [r3, #0]
   1a1a4:	685a      	ldr	r2, [r3, #4]
   1a1a6:	4b1d      	ldr	r3, [pc, #116]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1a8:	601a      	str	r2, [r3, #0]
   1a1aa:	4b1c      	ldr	r3, [pc, #112]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1ac:	681b      	ldr	r3, [r3, #0]
   1a1ae:	2b00      	cmp	r3, #0
   1a1b0:	d1c0      	bne.n	1a134 <FreeRTOS_CLIProcessCommand+0x20>
   1a1b2:	e000      	b.n	1a1b6 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1a1b4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1a1b6:	4b19      	ldr	r3, [pc, #100]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1b8:	681b      	ldr	r3, [r3, #0]
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	d00c      	beq.n	1a1d8 <FreeRTOS_CLIProcessCommand+0xc4>
   1a1be:	69fb      	ldr	r3, [r7, #28]
   1a1c0:	2b00      	cmp	r3, #0
   1a1c2:	d109      	bne.n	1a1d8 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a1c4:	687a      	ldr	r2, [r7, #4]
   1a1c6:	491a      	ldr	r1, [pc, #104]	; (1a230 <FreeRTOS_CLIProcessCommand+0x11c>)
   1a1c8:	68bb      	ldr	r3, [r7, #8]
   1a1ca:	0018      	movs	r0, r3
   1a1cc:	4b19      	ldr	r3, [pc, #100]	; (1a234 <FreeRTOS_CLIProcessCommand+0x120>)
   1a1ce:	4798      	blx	r3
		pxCommand = NULL;
   1a1d0:	4b12      	ldr	r3, [pc, #72]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1d2:	2200      	movs	r2, #0
   1a1d4:	601a      	str	r2, [r3, #0]
   1a1d6:	e01c      	b.n	1a212 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   1a1d8:	4b10      	ldr	r3, [pc, #64]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1da:	681b      	ldr	r3, [r3, #0]
   1a1dc:	2b00      	cmp	r3, #0
   1a1de:	d010      	beq.n	1a202 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1a1e0:	4b0e      	ldr	r3, [pc, #56]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1e2:	681b      	ldr	r3, [r3, #0]
   1a1e4:	681b      	ldr	r3, [r3, #0]
   1a1e6:	689b      	ldr	r3, [r3, #8]
   1a1e8:	68fa      	ldr	r2, [r7, #12]
   1a1ea:	6879      	ldr	r1, [r7, #4]
   1a1ec:	68b8      	ldr	r0, [r7, #8]
   1a1ee:	4798      	blx	r3
   1a1f0:	0003      	movs	r3, r0
   1a1f2:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1a1f4:	69fb      	ldr	r3, [r7, #28]
   1a1f6:	2b00      	cmp	r3, #0
   1a1f8:	d10b      	bne.n	1a212 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1a1fa:	4b08      	ldr	r3, [pc, #32]	; (1a21c <FreeRTOS_CLIProcessCommand+0x108>)
   1a1fc:	2200      	movs	r2, #0
   1a1fe:	601a      	str	r2, [r3, #0]
   1a200:	e007      	b.n	1a212 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a202:	687a      	ldr	r2, [r7, #4]
   1a204:	490c      	ldr	r1, [pc, #48]	; (1a238 <FreeRTOS_CLIProcessCommand+0x124>)
   1a206:	68bb      	ldr	r3, [r7, #8]
   1a208:	0018      	movs	r0, r3
   1a20a:	4b0a      	ldr	r3, [pc, #40]	; (1a234 <FreeRTOS_CLIProcessCommand+0x120>)
   1a20c:	4798      	blx	r3
		xReturn = pdFALSE;
   1a20e:	2300      	movs	r3, #0
   1a210:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1a212:	69fb      	ldr	r3, [r7, #28]
}
   1a214:	0018      	movs	r0, r3
   1a216:	46bd      	mov	sp, r7
   1a218:	b008      	add	sp, #32
   1a21a:	bd80      	pop	{r7, pc}
   1a21c:	20000b64 	.word	0x20000b64
   1a220:	200000f4 	.word	0x200000f4
   1a224:	00037bd7 	.word	0x00037bd7
   1a228:	00037be5 	.word	0x00037be5
   1a22c:	0001a29d 	.word	0x0001a29d
   1a230:	00039e44 	.word	0x00039e44
   1a234:	00037c07 	.word	0x00037c07
   1a238:	00039e9c 	.word	0x00039e9c

0001a23c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1a23c:	b580      	push	{r7, lr}
   1a23e:	b086      	sub	sp, #24
   1a240:	af00      	add	r7, sp, #0
   1a242:	60f8      	str	r0, [r7, #12]
   1a244:	60b9      	str	r1, [r7, #8]
   1a246:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1a248:	4b11      	ldr	r3, [pc, #68]	; (1a290 <prvHelpCommand+0x54>)
   1a24a:	681b      	ldr	r3, [r3, #0]
   1a24c:	2b00      	cmp	r3, #0
   1a24e:	d102      	bne.n	1a256 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1a250:	4b0f      	ldr	r3, [pc, #60]	; (1a290 <prvHelpCommand+0x54>)
   1a252:	4a10      	ldr	r2, [pc, #64]	; (1a294 <prvHelpCommand+0x58>)
   1a254:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1a256:	4b0e      	ldr	r3, [pc, #56]	; (1a290 <prvHelpCommand+0x54>)
   1a258:	681b      	ldr	r3, [r3, #0]
   1a25a:	681b      	ldr	r3, [r3, #0]
   1a25c:	6859      	ldr	r1, [r3, #4]
   1a25e:	68ba      	ldr	r2, [r7, #8]
   1a260:	68fb      	ldr	r3, [r7, #12]
   1a262:	0018      	movs	r0, r3
   1a264:	4b0c      	ldr	r3, [pc, #48]	; (1a298 <prvHelpCommand+0x5c>)
   1a266:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1a268:	4b09      	ldr	r3, [pc, #36]	; (1a290 <prvHelpCommand+0x54>)
   1a26a:	681b      	ldr	r3, [r3, #0]
   1a26c:	685a      	ldr	r2, [r3, #4]
   1a26e:	4b08      	ldr	r3, [pc, #32]	; (1a290 <prvHelpCommand+0x54>)
   1a270:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1a272:	4b07      	ldr	r3, [pc, #28]	; (1a290 <prvHelpCommand+0x54>)
   1a274:	681b      	ldr	r3, [r3, #0]
   1a276:	2b00      	cmp	r3, #0
   1a278:	d102      	bne.n	1a280 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1a27a:	2300      	movs	r3, #0
   1a27c:	617b      	str	r3, [r7, #20]
   1a27e:	e001      	b.n	1a284 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1a280:	2301      	movs	r3, #1
   1a282:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1a284:	697b      	ldr	r3, [r7, #20]
}
   1a286:	0018      	movs	r0, r3
   1a288:	46bd      	mov	sp, r7
   1a28a:	b006      	add	sp, #24
   1a28c:	bd80      	pop	{r7, pc}
   1a28e:	46c0      	nop			; (mov r8, r8)
   1a290:	20000b68 	.word	0x20000b68
   1a294:	200000f4 	.word	0x200000f4
   1a298:	00037c07 	.word	0x00037c07

0001a29c <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   1a29c:	b580      	push	{r7, lr}
   1a29e:	b084      	sub	sp, #16
   1a2a0:	af00      	add	r7, sp, #0
   1a2a2:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1a2a4:	230f      	movs	r3, #15
   1a2a6:	18fb      	adds	r3, r7, r3
   1a2a8:	2200      	movs	r2, #0
   1a2aa:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   1a2ac:	2300      	movs	r3, #0
   1a2ae:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1a2b0:	e018      	b.n	1a2e4 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1a2b2:	687b      	ldr	r3, [r7, #4]
   1a2b4:	781b      	ldrb	r3, [r3, #0]
   1a2b6:	2b20      	cmp	r3, #32
   1a2b8:	d10f      	bne.n	1a2da <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1a2ba:	68bb      	ldr	r3, [r7, #8]
   1a2bc:	2b01      	cmp	r3, #1
   1a2be:	d00e      	beq.n	1a2de <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1a2c0:	230f      	movs	r3, #15
   1a2c2:	18fb      	adds	r3, r7, r3
   1a2c4:	781b      	ldrb	r3, [r3, #0]
   1a2c6:	b25b      	sxtb	r3, r3
   1a2c8:	b2db      	uxtb	r3, r3
   1a2ca:	3301      	adds	r3, #1
   1a2cc:	b2da      	uxtb	r2, r3
   1a2ce:	230f      	movs	r3, #15
   1a2d0:	18fb      	adds	r3, r7, r3
   1a2d2:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1a2d4:	2301      	movs	r3, #1
   1a2d6:	60bb      	str	r3, [r7, #8]
   1a2d8:	e001      	b.n	1a2de <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1a2da:	2300      	movs	r3, #0
   1a2dc:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1a2de:	687b      	ldr	r3, [r7, #4]
   1a2e0:	3301      	adds	r3, #1
   1a2e2:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1a2e4:	687b      	ldr	r3, [r7, #4]
   1a2e6:	781b      	ldrb	r3, [r3, #0]
   1a2e8:	2b00      	cmp	r3, #0
   1a2ea:	d1e2      	bne.n	1a2b2 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1a2ec:	68bb      	ldr	r3, [r7, #8]
   1a2ee:	2b01      	cmp	r3, #1
   1a2f0:	d109      	bne.n	1a306 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1a2f2:	230f      	movs	r3, #15
   1a2f4:	18fb      	adds	r3, r7, r3
   1a2f6:	781b      	ldrb	r3, [r3, #0]
   1a2f8:	b25b      	sxtb	r3, r3
   1a2fa:	b2db      	uxtb	r3, r3
   1a2fc:	3b01      	subs	r3, #1
   1a2fe:	b2da      	uxtb	r2, r3
   1a300:	230f      	movs	r3, #15
   1a302:	18fb      	adds	r3, r7, r3
   1a304:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1a306:	230f      	movs	r3, #15
   1a308:	18fb      	adds	r3, r7, r3
   1a30a:	781b      	ldrb	r3, [r3, #0]
   1a30c:	b25b      	sxtb	r3, r3
}
   1a30e:	0018      	movs	r0, r3
   1a310:	46bd      	mov	sp, r7
   1a312:	b004      	add	sp, #16
   1a314:	bd80      	pop	{r7, pc}
	...

0001a318 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   1a318:	b580      	push	{r7, lr}
   1a31a:	b082      	sub	sp, #8
   1a31c:	af00      	add	r7, sp, #0
   1a31e:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1a320:	687b      	ldr	r3, [r7, #4]
   1a322:	0018      	movs	r0, r3
   1a324:	4b03      	ldr	r3, [pc, #12]	; (1a334 <prvTraceGetQueueNumber+0x1c>)
   1a326:	4798      	blx	r3
   1a328:	0003      	movs	r3, r0
}
   1a32a:	0018      	movs	r0, r3
   1a32c:	46bd      	mov	sp, r7
   1a32e:	b002      	add	sp, #8
   1a330:	bd80      	pop	{r7, pc}
   1a332:	46c0      	nop			; (mov r8, r8)
   1a334:	0001dad5 	.word	0x0001dad5

0001a338 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1a338:	b580      	push	{r7, lr}
   1a33a:	b082      	sub	sp, #8
   1a33c:	af00      	add	r7, sp, #0
   1a33e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1a340:	687b      	ldr	r3, [r7, #4]
   1a342:	0018      	movs	r0, r3
   1a344:	4b03      	ldr	r3, [pc, #12]	; (1a354 <prvTraceGetQueueType+0x1c>)
   1a346:	4798      	blx	r3
   1a348:	0003      	movs	r3, r0
}
   1a34a:	0018      	movs	r0, r3
   1a34c:	46bd      	mov	sp, r7
   1a34e:	b002      	add	sp, #8
   1a350:	bd80      	pop	{r7, pc}
   1a352:	46c0      	nop			; (mov r8, r8)
   1a354:	0001db01 	.word	0x0001db01

0001a358 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1a358:	b580      	push	{r7, lr}
   1a35a:	b082      	sub	sp, #8
   1a35c:	af00      	add	r7, sp, #0
   1a35e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1a360:	687b      	ldr	r3, [r7, #4]
   1a362:	0018      	movs	r0, r3
   1a364:	4b03      	ldr	r3, [pc, #12]	; (1a374 <prvTraceGetTaskNumberLow16+0x1c>)
   1a366:	4798      	blx	r3
   1a368:	0003      	movs	r3, r0
   1a36a:	b29b      	uxth	r3, r3
}
   1a36c:	0018      	movs	r0, r3
   1a36e:	46bd      	mov	sp, r7
   1a370:	b002      	add	sp, #8
   1a372:	bd80      	pop	{r7, pc}
   1a374:	0001ee31 	.word	0x0001ee31

0001a378 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1a378:	b580      	push	{r7, lr}
   1a37a:	b082      	sub	sp, #8
   1a37c:	af00      	add	r7, sp, #0
   1a37e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1a380:	687b      	ldr	r3, [r7, #4]
   1a382:	0018      	movs	r0, r3
   1a384:	4b04      	ldr	r3, [pc, #16]	; (1a398 <prvTraceGetTaskNumberHigh16+0x20>)
   1a386:	4798      	blx	r3
   1a388:	0003      	movs	r3, r0
   1a38a:	0c1b      	lsrs	r3, r3, #16
   1a38c:	b29b      	uxth	r3, r3
}
   1a38e:	0018      	movs	r0, r3
   1a390:	46bd      	mov	sp, r7
   1a392:	b002      	add	sp, #8
   1a394:	bd80      	pop	{r7, pc}
   1a396:	46c0      	nop			; (mov r8, r8)
   1a398:	0001ee31 	.word	0x0001ee31

0001a39c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   1a39c:	b580      	push	{r7, lr}
   1a39e:	b082      	sub	sp, #8
   1a3a0:	af00      	add	r7, sp, #0
   1a3a2:	6078      	str	r0, [r7, #4]
   1a3a4:	000a      	movs	r2, r1
   1a3a6:	1cbb      	adds	r3, r7, #2
   1a3a8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1a3aa:	687b      	ldr	r3, [r7, #4]
   1a3ac:	0018      	movs	r0, r3
   1a3ae:	4b08      	ldr	r3, [pc, #32]	; (1a3d0 <prvTraceSetTaskNumberLow16+0x34>)
   1a3b0:	4798      	blx	r3
   1a3b2:	0003      	movs	r3, r0
   1a3b4:	0c1b      	lsrs	r3, r3, #16
   1a3b6:	041a      	lsls	r2, r3, #16
   1a3b8:	1cbb      	adds	r3, r7, #2
   1a3ba:	881b      	ldrh	r3, [r3, #0]
   1a3bc:	431a      	orrs	r2, r3
   1a3be:	687b      	ldr	r3, [r7, #4]
   1a3c0:	0011      	movs	r1, r2
   1a3c2:	0018      	movs	r0, r3
   1a3c4:	4b03      	ldr	r3, [pc, #12]	; (1a3d4 <prvTraceSetTaskNumberLow16+0x38>)
   1a3c6:	4798      	blx	r3
}
   1a3c8:	46c0      	nop			; (mov r8, r8)
   1a3ca:	46bd      	mov	sp, r7
   1a3cc:	b002      	add	sp, #8
   1a3ce:	bd80      	pop	{r7, pc}
   1a3d0:	0001ee31 	.word	0x0001ee31
   1a3d4:	0001ee59 	.word	0x0001ee59

0001a3d8 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1a3d8:	b580      	push	{r7, lr}
   1a3da:	b082      	sub	sp, #8
   1a3dc:	af00      	add	r7, sp, #0
   1a3de:	6078      	str	r0, [r7, #4]
   1a3e0:	000a      	movs	r2, r1
   1a3e2:	1cbb      	adds	r3, r7, #2
   1a3e4:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1a3e6:	687b      	ldr	r3, [r7, #4]
   1a3e8:	0018      	movs	r0, r3
   1a3ea:	4b09      	ldr	r3, [pc, #36]	; (1a410 <prvTraceSetTaskNumberHigh16+0x38>)
   1a3ec:	4798      	blx	r3
   1a3ee:	0003      	movs	r3, r0
   1a3f0:	041b      	lsls	r3, r3, #16
   1a3f2:	0c1a      	lsrs	r2, r3, #16
   1a3f4:	1cbb      	adds	r3, r7, #2
   1a3f6:	881b      	ldrh	r3, [r3, #0]
   1a3f8:	041b      	lsls	r3, r3, #16
   1a3fa:	431a      	orrs	r2, r3
   1a3fc:	687b      	ldr	r3, [r7, #4]
   1a3fe:	0011      	movs	r1, r2
   1a400:	0018      	movs	r0, r3
   1a402:	4b04      	ldr	r3, [pc, #16]	; (1a414 <prvTraceSetTaskNumberHigh16+0x3c>)
   1a404:	4798      	blx	r3
}
   1a406:	46c0      	nop			; (mov r8, r8)
   1a408:	46bd      	mov	sp, r7
   1a40a:	b002      	add	sp, #8
   1a40c:	bd80      	pop	{r7, pc}
   1a40e:	46c0      	nop			; (mov r8, r8)
   1a410:	0001ee31 	.word	0x0001ee31
   1a414:	0001ee59 	.word	0x0001ee59

0001a418 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   1a418:	b580      	push	{r7, lr}
   1a41a:	b082      	sub	sp, #8
   1a41c:	af00      	add	r7, sp, #0
   1a41e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1a420:	687b      	ldr	r3, [r7, #4]
   1a422:	0018      	movs	r0, r3
   1a424:	4b03      	ldr	r3, [pc, #12]	; (1a434 <prvTraceGetQueueNumberLow16+0x1c>)
   1a426:	4798      	blx	r3
   1a428:	0003      	movs	r3, r0
   1a42a:	b29b      	uxth	r3, r3
}
   1a42c:	0018      	movs	r0, r3
   1a42e:	46bd      	mov	sp, r7
   1a430:	b002      	add	sp, #8
   1a432:	bd80      	pop	{r7, pc}
   1a434:	0001a319 	.word	0x0001a319

0001a438 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1a438:	b580      	push	{r7, lr}
   1a43a:	b082      	sub	sp, #8
   1a43c:	af00      	add	r7, sp, #0
   1a43e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1a440:	687b      	ldr	r3, [r7, #4]
   1a442:	0018      	movs	r0, r3
   1a444:	4b04      	ldr	r3, [pc, #16]	; (1a458 <prvTraceGetQueueNumberHigh16+0x20>)
   1a446:	4798      	blx	r3
   1a448:	0003      	movs	r3, r0
   1a44a:	0c1b      	lsrs	r3, r3, #16
   1a44c:	b29b      	uxth	r3, r3
}
   1a44e:	0018      	movs	r0, r3
   1a450:	46bd      	mov	sp, r7
   1a452:	b002      	add	sp, #8
   1a454:	bd80      	pop	{r7, pc}
   1a456:	46c0      	nop			; (mov r8, r8)
   1a458:	0001a319 	.word	0x0001a319

0001a45c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1a45c:	b580      	push	{r7, lr}
   1a45e:	b082      	sub	sp, #8
   1a460:	af00      	add	r7, sp, #0
   1a462:	6078      	str	r0, [r7, #4]
   1a464:	000a      	movs	r2, r1
   1a466:	1cbb      	adds	r3, r7, #2
   1a468:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1a46a:	687b      	ldr	r3, [r7, #4]
   1a46c:	0018      	movs	r0, r3
   1a46e:	4b08      	ldr	r3, [pc, #32]	; (1a490 <prvTraceSetQueueNumberLow16+0x34>)
   1a470:	4798      	blx	r3
   1a472:	0003      	movs	r3, r0
   1a474:	0c1b      	lsrs	r3, r3, #16
   1a476:	041a      	lsls	r2, r3, #16
   1a478:	1cbb      	adds	r3, r7, #2
   1a47a:	881b      	ldrh	r3, [r3, #0]
   1a47c:	431a      	orrs	r2, r3
   1a47e:	687b      	ldr	r3, [r7, #4]
   1a480:	0011      	movs	r1, r2
   1a482:	0018      	movs	r0, r3
   1a484:	4b03      	ldr	r3, [pc, #12]	; (1a494 <prvTraceSetQueueNumberLow16+0x38>)
   1a486:	4798      	blx	r3
}
   1a488:	46c0      	nop			; (mov r8, r8)
   1a48a:	46bd      	mov	sp, r7
   1a48c:	b002      	add	sp, #8
   1a48e:	bd80      	pop	{r7, pc}
   1a490:	0001a319 	.word	0x0001a319
   1a494:	0001dae9 	.word	0x0001dae9

0001a498 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1a498:	b580      	push	{r7, lr}
   1a49a:	b082      	sub	sp, #8
   1a49c:	af00      	add	r7, sp, #0
   1a49e:	6078      	str	r0, [r7, #4]
   1a4a0:	000a      	movs	r2, r1
   1a4a2:	1cbb      	adds	r3, r7, #2
   1a4a4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1a4a6:	687b      	ldr	r3, [r7, #4]
   1a4a8:	0018      	movs	r0, r3
   1a4aa:	4b09      	ldr	r3, [pc, #36]	; (1a4d0 <prvTraceSetQueueNumberHigh16+0x38>)
   1a4ac:	4798      	blx	r3
   1a4ae:	0003      	movs	r3, r0
   1a4b0:	041b      	lsls	r3, r3, #16
   1a4b2:	0c1a      	lsrs	r2, r3, #16
   1a4b4:	1cbb      	adds	r3, r7, #2
   1a4b6:	881b      	ldrh	r3, [r3, #0]
   1a4b8:	041b      	lsls	r3, r3, #16
   1a4ba:	431a      	orrs	r2, r3
   1a4bc:	687b      	ldr	r3, [r7, #4]
   1a4be:	0011      	movs	r1, r2
   1a4c0:	0018      	movs	r0, r3
   1a4c2:	4b04      	ldr	r3, [pc, #16]	; (1a4d4 <prvTraceSetQueueNumberHigh16+0x3c>)
   1a4c4:	4798      	blx	r3
}
   1a4c6:	46c0      	nop			; (mov r8, r8)
   1a4c8:	46bd      	mov	sp, r7
   1a4ca:	b002      	add	sp, #8
   1a4cc:	bd80      	pop	{r7, pc}
   1a4ce:	46c0      	nop			; (mov r8, r8)
   1a4d0:	0001a319 	.word	0x0001a319
   1a4d4:	0001dae9 	.word	0x0001dae9

0001a4d8 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   1a4d8:	b580      	push	{r7, lr}
   1a4da:	b084      	sub	sp, #16
   1a4dc:	af00      	add	r7, sp, #0
   1a4de:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   1a4e0:	2300      	movs	r3, #0
   1a4e2:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a4e4:	2300      	movs	r3, #0
   1a4e6:	60bb      	str	r3, [r7, #8]
   1a4e8:	e018      	b.n	1a51c <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1a4ea:	4b14      	ldr	r3, [pc, #80]	; (1a53c <prvAddTaskToStackMonitor+0x64>)
   1a4ec:	68ba      	ldr	r2, [r7, #8]
   1a4ee:	00d2      	lsls	r2, r2, #3
   1a4f0:	58d3      	ldr	r3, [r2, r3]
   1a4f2:	2b00      	cmp	r3, #0
   1a4f4:	d10f      	bne.n	1a516 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1a4f6:	4b11      	ldr	r3, [pc, #68]	; (1a53c <prvAddTaskToStackMonitor+0x64>)
   1a4f8:	68ba      	ldr	r2, [r7, #8]
   1a4fa:	00d2      	lsls	r2, r2, #3
   1a4fc:	6879      	ldr	r1, [r7, #4]
   1a4fe:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1a500:	4a0e      	ldr	r2, [pc, #56]	; (1a53c <prvAddTaskToStackMonitor+0x64>)
   1a502:	68bb      	ldr	r3, [r7, #8]
   1a504:	00db      	lsls	r3, r3, #3
   1a506:	18d3      	adds	r3, r2, r3
   1a508:	3304      	adds	r3, #4
   1a50a:	2201      	movs	r2, #1
   1a50c:	4252      	negs	r2, r2
   1a50e:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1a510:	2301      	movs	r3, #1
   1a512:	60fb      	str	r3, [r7, #12]
			break;
   1a514:	e005      	b.n	1a522 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a516:	68bb      	ldr	r3, [r7, #8]
   1a518:	3301      	adds	r3, #1
   1a51a:	60bb      	str	r3, [r7, #8]
   1a51c:	68bb      	ldr	r3, [r7, #8]
   1a51e:	2b09      	cmp	r3, #9
   1a520:	dde3      	ble.n	1a4ea <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1a522:	68fb      	ldr	r3, [r7, #12]
   1a524:	2b00      	cmp	r3, #0
   1a526:	d104      	bne.n	1a532 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   1a528:	4b05      	ldr	r3, [pc, #20]	; (1a540 <prvAddTaskToStackMonitor+0x68>)
   1a52a:	681b      	ldr	r3, [r3, #0]
   1a52c:	1c5a      	adds	r2, r3, #1
   1a52e:	4b04      	ldr	r3, [pc, #16]	; (1a540 <prvAddTaskToStackMonitor+0x68>)
   1a530:	601a      	str	r2, [r3, #0]
	}
}
   1a532:	46c0      	nop			; (mov r8, r8)
   1a534:	46bd      	mov	sp, r7
   1a536:	b004      	add	sp, #16
   1a538:	bd80      	pop	{r7, pc}
   1a53a:	46c0      	nop			; (mov r8, r8)
   1a53c:	20000b70 	.word	0x20000b70
   1a540:	20000bc0 	.word	0x20000bc0

0001a544 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1a544:	b590      	push	{r4, r7, lr}
   1a546:	b085      	sub	sp, #20
   1a548:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1a54a:	2300      	movs	r3, #0
   1a54c:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1a54e:	4b2b      	ldr	r3, [pc, #172]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a550:	681b      	ldr	r3, [r3, #0]
   1a552:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1a554:	4b29      	ldr	r3, [pc, #164]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a556:	681a      	ldr	r2, [r3, #0]
   1a558:	4b29      	ldr	r3, [pc, #164]	; (1a600 <prvReportStackUsage+0xbc>)
   1a55a:	00d2      	lsls	r2, r2, #3
   1a55c:	58d3      	ldr	r3, [r2, r3]
   1a55e:	2b00      	cmp	r3, #0
   1a560:	d035      	beq.n	1a5ce <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1a562:	4b26      	ldr	r3, [pc, #152]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a564:	681a      	ldr	r2, [r3, #0]
   1a566:	4b26      	ldr	r3, [pc, #152]	; (1a600 <prvReportStackUsage+0xbc>)
   1a568:	00d2      	lsls	r2, r2, #3
   1a56a:	58d3      	ldr	r3, [r2, r3]
   1a56c:	0018      	movs	r0, r3
   1a56e:	4b25      	ldr	r3, [pc, #148]	; (1a604 <prvReportStackUsage+0xc0>)
   1a570:	4798      	blx	r3
   1a572:	0003      	movs	r3, r0
   1a574:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1a576:	4b21      	ldr	r3, [pc, #132]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a578:	681b      	ldr	r3, [r3, #0]
   1a57a:	4a21      	ldr	r2, [pc, #132]	; (1a600 <prvReportStackUsage+0xbc>)
   1a57c:	00db      	lsls	r3, r3, #3
   1a57e:	18d3      	adds	r3, r2, r3
   1a580:	3304      	adds	r3, #4
   1a582:	681a      	ldr	r2, [r3, #0]
   1a584:	687b      	ldr	r3, [r7, #4]
   1a586:	429a      	cmp	r2, r3
   1a588:	d907      	bls.n	1a59a <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1a58a:	4b1c      	ldr	r3, [pc, #112]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a58c:	681b      	ldr	r3, [r3, #0]
   1a58e:	4a1c      	ldr	r2, [pc, #112]	; (1a600 <prvReportStackUsage+0xbc>)
   1a590:	00db      	lsls	r3, r3, #3
   1a592:	18d3      	adds	r3, r2, r3
   1a594:	3304      	adds	r3, #4
   1a596:	687a      	ldr	r2, [r7, #4]
   1a598:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1a59a:	4b18      	ldr	r3, [pc, #96]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a59c:	681a      	ldr	r2, [r3, #0]
   1a59e:	4b18      	ldr	r3, [pc, #96]	; (1a600 <prvReportStackUsage+0xbc>)
   1a5a0:	00d2      	lsls	r2, r2, #3
   1a5a2:	58d3      	ldr	r3, [r2, r3]
   1a5a4:	0018      	movs	r0, r3
   1a5a6:	4b18      	ldr	r3, [pc, #96]	; (1a608 <prvReportStackUsage+0xc4>)
   1a5a8:	4798      	blx	r3
   1a5aa:	0003      	movs	r3, r0
   1a5ac:	b2db      	uxtb	r3, r3
   1a5ae:	0019      	movs	r1, r3
   1a5b0:	4b12      	ldr	r3, [pc, #72]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a5b2:	681b      	ldr	r3, [r3, #0]
   1a5b4:	4a12      	ldr	r2, [pc, #72]	; (1a600 <prvReportStackUsage+0xbc>)
   1a5b6:	00db      	lsls	r3, r3, #3
   1a5b8:	18d3      	adds	r3, r2, r3
   1a5ba:	3304      	adds	r3, #4
   1a5bc:	681b      	ldr	r3, [r3, #0]
   1a5be:	000a      	movs	r2, r1
   1a5c0:	2103      	movs	r1, #3
   1a5c2:	20ea      	movs	r0, #234	; 0xea
   1a5c4:	4c11      	ldr	r4, [pc, #68]	; (1a60c <prvReportStackUsage+0xc8>)
   1a5c6:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1a5c8:	68fb      	ldr	r3, [r7, #12]
   1a5ca:	3301      	adds	r3, #1
   1a5cc:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1a5ce:	4b0b      	ldr	r3, [pc, #44]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a5d0:	681b      	ldr	r3, [r3, #0]
   1a5d2:	1c5a      	adds	r2, r3, #1
   1a5d4:	4b0e      	ldr	r3, [pc, #56]	; (1a610 <prvReportStackUsage+0xcc>)
   1a5d6:	210a      	movs	r1, #10
   1a5d8:	0010      	movs	r0, r2
   1a5da:	4798      	blx	r3
   1a5dc:	000b      	movs	r3, r1
   1a5de:	001a      	movs	r2, r3
   1a5e0:	4b06      	ldr	r3, [pc, #24]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a5e2:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1a5e4:	68fb      	ldr	r3, [r7, #12]
   1a5e6:	2b00      	cmp	r3, #0
   1a5e8:	dc04      	bgt.n	1a5f4 <prvReportStackUsage+0xb0>
   1a5ea:	4b04      	ldr	r3, [pc, #16]	; (1a5fc <prvReportStackUsage+0xb8>)
   1a5ec:	681a      	ldr	r2, [r3, #0]
   1a5ee:	68bb      	ldr	r3, [r7, #8]
   1a5f0:	429a      	cmp	r2, r3
   1a5f2:	d1af      	bne.n	1a554 <prvReportStackUsage+0x10>
}
   1a5f4:	46c0      	nop			; (mov r8, r8)
   1a5f6:	46bd      	mov	sp, r7
   1a5f8:	b005      	add	sp, #20
   1a5fa:	bd90      	pop	{r4, r7, pc}
   1a5fc:	20000bc4 	.word	0x20000bc4
   1a600:	20000b70 	.word	0x20000b70
   1a604:	0001efd1 	.word	0x0001efd1
   1a608:	0001a359 	.word	0x0001a359
   1a60c:	0001aea1 	.word	0x0001aea1
   1a610:	00034ed5 	.word	0x00034ed5

0001a614 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1a614:	b580      	push	{r7, lr}
   1a616:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1a618:	4b02      	ldr	r3, [pc, #8]	; (1a624 <prvTraceGetCurrentTaskHandle+0x10>)
   1a61a:	4798      	blx	r3
   1a61c:	0003      	movs	r3, r0
}
   1a61e:	0018      	movs	r0, r3
   1a620:	46bd      	mov	sp, r7
   1a622:	bd80      	pop	{r7, pc}
   1a624:	0001f07d 	.word	0x0001f07d

0001a628 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1a628:	b590      	push	{r4, r7, lr}
   1a62a:	b085      	sub	sp, #20
   1a62c:	af02      	add	r7, sp, #8
   1a62e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   1a630:	4b14      	ldr	r3, [pc, #80]	; (1a684 <vTraceEnable+0x5c>)
   1a632:	4798      	blx	r3

	if (startOption == TRC_START)
   1a634:	687b      	ldr	r3, [r7, #4]
   1a636:	2b01      	cmp	r3, #1
   1a638:	d102      	bne.n	1a640 <vTraceEnable+0x18>
	{
		vTraceStart();
   1a63a:	4b13      	ldr	r3, [pc, #76]	; (1a688 <vTraceEnable+0x60>)
   1a63c:	4798      	blx	r3
   1a63e:	e00e      	b.n	1a65e <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   1a640:	687b      	ldr	r3, [r7, #4]
   1a642:	2b02      	cmp	r3, #2
   1a644:	d104      	bne.n	1a650 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1a646:	4b11      	ldr	r3, [pc, #68]	; (1a68c <vTraceEnable+0x64>)
   1a648:	0018      	movs	r0, r3
   1a64a:	4b11      	ldr	r3, [pc, #68]	; (1a690 <vTraceEnable+0x68>)
   1a64c:	4798      	blx	r3
   1a64e:	e006      	b.n	1a65e <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   1a650:	687b      	ldr	r3, [r7, #4]
   1a652:	2b00      	cmp	r3, #0
   1a654:	d003      	beq.n	1a65e <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1a656:	4b0f      	ldr	r3, [pc, #60]	; (1a694 <vTraceEnable+0x6c>)
   1a658:	0018      	movs	r0, r3
   1a65a:	4b0d      	ldr	r3, [pc, #52]	; (1a690 <vTraceEnable+0x68>)
   1a65c:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1a65e:	4b0e      	ldr	r3, [pc, #56]	; (1a698 <vTraceEnable+0x70>)
   1a660:	681b      	ldr	r3, [r3, #0]
   1a662:	2b00      	cmp	r3, #0
   1a664:	d10a      	bne.n	1a67c <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1a666:	2396      	movs	r3, #150	; 0x96
   1a668:	005a      	lsls	r2, r3, #1
   1a66a:	490c      	ldr	r1, [pc, #48]	; (1a69c <vTraceEnable+0x74>)
   1a66c:	480c      	ldr	r0, [pc, #48]	; (1a6a0 <vTraceEnable+0x78>)
   1a66e:	4b0a      	ldr	r3, [pc, #40]	; (1a698 <vTraceEnable+0x70>)
   1a670:	9301      	str	r3, [sp, #4]
   1a672:	2304      	movs	r3, #4
   1a674:	9300      	str	r3, [sp, #0]
   1a676:	2300      	movs	r3, #0
   1a678:	4c0a      	ldr	r4, [pc, #40]	; (1a6a4 <vTraceEnable+0x7c>)
   1a67a:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   1a67c:	46c0      	nop			; (mov r8, r8)
   1a67e:	46bd      	mov	sp, r7
   1a680:	b003      	add	sp, #12
   1a682:	bd90      	pop	{r4, r7, pc}
   1a684:	0001b56d 	.word	0x0001b56d
   1a688:	0001aac5 	.word	0x0001aac5
   1a68c:	00039efc 	.word	0x00039efc
   1a690:	0001bc15 	.word	0x0001bc15
   1a694:	00039f3c 	.word	0x00039f3c
   1a698:	20000b6c 	.word	0x20000b6c
   1a69c:	00039f70 	.word	0x00039f70
   1a6a0:	0001a6a9 	.word	0x0001a6a9
   1a6a4:	0001dfd5 	.word	0x0001dfd5

0001a6a8 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1a6a8:	b580      	push	{r7, lr}
   1a6aa:	b082      	sub	sp, #8
   1a6ac:	af00      	add	r7, sp, #0
   1a6ae:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1a6b0:	4b04      	ldr	r3, [pc, #16]	; (1a6c4 <TzCtrl+0x1c>)
   1a6b2:	4798      	blx	r3
   1a6b4:	1e03      	subs	r3, r0, #0
   1a6b6:	d001      	beq.n	1a6bc <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1a6b8:	4b03      	ldr	r3, [pc, #12]	; (1a6c8 <TzCtrl+0x20>)
   1a6ba:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1a6bc:	2004      	movs	r0, #4
   1a6be:	4b03      	ldr	r3, [pc, #12]	; (1a6cc <TzCtrl+0x24>)
   1a6c0:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1a6c2:	e7f5      	b.n	1a6b0 <TzCtrl+0x8>
   1a6c4:	0001ab09 	.word	0x0001ab09
   1a6c8:	0001a545 	.word	0x0001a545
   1a6cc:	0001e371 	.word	0x0001e371

0001a6d0 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   1a6d0:	b580      	push	{r7, lr}
   1a6d2:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1a6d4:	4b60      	ldr	r3, [pc, #384]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a6d6:	681b      	ldr	r3, [r3, #0]
   1a6d8:	2209      	movs	r2, #9
   1a6da:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1a6dc:	4b5e      	ldr	r3, [pc, #376]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a6de:	681b      	ldr	r3, [r3, #0]
   1a6e0:	2264      	movs	r2, #100	; 0x64
   1a6e2:	210a      	movs	r1, #10
   1a6e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1a6e6:	4b5c      	ldr	r3, [pc, #368]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a6e8:	681b      	ldr	r3, [r3, #0]
   1a6ea:	2265      	movs	r2, #101	; 0x65
   1a6ec:	210a      	movs	r1, #10
   1a6ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1a6f0:	4b59      	ldr	r3, [pc, #356]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a6f2:	681b      	ldr	r3, [r3, #0]
   1a6f4:	2266      	movs	r2, #102	; 0x66
   1a6f6:	210a      	movs	r1, #10
   1a6f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1a6fa:	4b57      	ldr	r3, [pc, #348]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a6fc:	681b      	ldr	r3, [r3, #0]
   1a6fe:	2267      	movs	r2, #103	; 0x67
   1a700:	210f      	movs	r1, #15
   1a702:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1a704:	4b54      	ldr	r3, [pc, #336]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a706:	681b      	ldr	r3, [r3, #0]
   1a708:	2268      	movs	r2, #104	; 0x68
   1a70a:	2105      	movs	r1, #5
   1a70c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1a70e:	4b52      	ldr	r3, [pc, #328]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a710:	681b      	ldr	r3, [r3, #0]
   1a712:	2269      	movs	r2, #105	; 0x69
   1a714:	2105      	movs	r1, #5
   1a716:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1a718:	4b4f      	ldr	r3, [pc, #316]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a71a:	681b      	ldr	r3, [r3, #0]
   1a71c:	226a      	movs	r2, #106	; 0x6a
   1a71e:	2105      	movs	r1, #5
   1a720:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1a722:	4b4d      	ldr	r3, [pc, #308]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a724:	681b      	ldr	r3, [r3, #0]
   1a726:	226b      	movs	r2, #107	; 0x6b
   1a728:	2105      	movs	r1, #5
   1a72a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1a72c:	4b4a      	ldr	r3, [pc, #296]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a72e:	681b      	ldr	r3, [r3, #0]
   1a730:	226c      	movs	r2, #108	; 0x6c
   1a732:	2105      	movs	r1, #5
   1a734:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1a736:	4b48      	ldr	r3, [pc, #288]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a738:	681b      	ldr	r3, [r3, #0]
   1a73a:	2270      	movs	r2, #112	; 0x70
   1a73c:	210f      	movs	r1, #15
   1a73e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   1a740:	4b45      	ldr	r3, [pc, #276]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a742:	681b      	ldr	r3, [r3, #0]
   1a744:	2271      	movs	r2, #113	; 0x71
   1a746:	210f      	movs	r1, #15
   1a748:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1a74a:	4b43      	ldr	r3, [pc, #268]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a74c:	681b      	ldr	r3, [r3, #0]
   1a74e:	2272      	movs	r2, #114	; 0x72
   1a750:	210f      	movs	r1, #15
   1a752:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1a754:	4b40      	ldr	r3, [pc, #256]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a756:	681b      	ldr	r3, [r3, #0]
   1a758:	2273      	movs	r2, #115	; 0x73
   1a75a:	210f      	movs	r1, #15
   1a75c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1a75e:	4b3e      	ldr	r3, [pc, #248]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a760:	681b      	ldr	r3, [r3, #0]
   1a762:	2274      	movs	r2, #116	; 0x74
   1a764:	210f      	movs	r1, #15
   1a766:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1a768:	4b3b      	ldr	r3, [pc, #236]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a76a:	681b      	ldr	r3, [r3, #0]
   1a76c:	2275      	movs	r2, #117	; 0x75
   1a76e:	210f      	movs	r1, #15
   1a770:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1a772:	4b39      	ldr	r3, [pc, #228]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a774:	681b      	ldr	r3, [r3, #0]
   1a776:	2276      	movs	r2, #118	; 0x76
   1a778:	210f      	movs	r1, #15
   1a77a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   1a77c:	4b36      	ldr	r3, [pc, #216]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a77e:	681b      	ldr	r3, [r3, #0]
   1a780:	2277      	movs	r2, #119	; 0x77
   1a782:	210f      	movs	r1, #15
   1a784:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1a786:	4b34      	ldr	r3, [pc, #208]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a788:	681b      	ldr	r3, [r3, #0]
   1a78a:	2278      	movs	r2, #120	; 0x78
   1a78c:	210f      	movs	r1, #15
   1a78e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   1a790:	4b31      	ldr	r3, [pc, #196]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a792:	681b      	ldr	r3, [r3, #0]
   1a794:	227c      	movs	r2, #124	; 0x7c
   1a796:	2110      	movs	r1, #16
   1a798:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1a79a:	4b2f      	ldr	r3, [pc, #188]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a79c:	681b      	ldr	r3, [r3, #0]
   1a79e:	227d      	movs	r2, #125	; 0x7d
   1a7a0:	2110      	movs	r1, #16
   1a7a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1a7a4:	4b2c      	ldr	r3, [pc, #176]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7a6:	681b      	ldr	r3, [r3, #0]
   1a7a8:	227e      	movs	r2, #126	; 0x7e
   1a7aa:	2110      	movs	r1, #16
   1a7ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1a7ae:	4b2a      	ldr	r3, [pc, #168]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7b0:	681b      	ldr	r3, [r3, #0]
   1a7b2:	227f      	movs	r2, #127	; 0x7f
   1a7b4:	2113      	movs	r1, #19
   1a7b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1a7b8:	4b27      	ldr	r3, [pc, #156]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7ba:	681b      	ldr	r3, [r3, #0]
   1a7bc:	2280      	movs	r2, #128	; 0x80
   1a7be:	2111      	movs	r1, #17
   1a7c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1a7c2:	4b25      	ldr	r3, [pc, #148]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7c4:	681b      	ldr	r3, [r3, #0]
   1a7c6:	2281      	movs	r2, #129	; 0x81
   1a7c8:	2110      	movs	r1, #16
   1a7ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1a7cc:	4b22      	ldr	r3, [pc, #136]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7ce:	681b      	ldr	r3, [r3, #0]
   1a7d0:	2282      	movs	r2, #130	; 0x82
   1a7d2:	2113      	movs	r1, #19
   1a7d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1a7d6:	4b20      	ldr	r3, [pc, #128]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7d8:	681b      	ldr	r3, [r3, #0]
   1a7da:	2283      	movs	r2, #131	; 0x83
   1a7dc:	2113      	movs	r1, #19
   1a7de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   1a7e0:	4b1d      	ldr	r3, [pc, #116]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7e2:	681b      	ldr	r3, [r3, #0]
   1a7e4:	2284      	movs	r2, #132	; 0x84
   1a7e6:	2113      	movs	r1, #19
   1a7e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1a7ea:	4b1b      	ldr	r3, [pc, #108]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7ec:	681b      	ldr	r3, [r3, #0]
   1a7ee:	2288      	movs	r2, #136	; 0x88
   1a7f0:	2100      	movs	r1, #0
   1a7f2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1a7f4:	4b18      	ldr	r3, [pc, #96]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a7f6:	681b      	ldr	r3, [r3, #0]
   1a7f8:	228a      	movs	r2, #138	; 0x8a
   1a7fa:	21a0      	movs	r1, #160	; 0xa0
   1a7fc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1a7fe:	4b16      	ldr	r3, [pc, #88]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a800:	681b      	ldr	r3, [r3, #0]
   1a802:	228c      	movs	r2, #140	; 0x8c
   1a804:	21a0      	movs	r1, #160	; 0xa0
   1a806:	0049      	lsls	r1, r1, #1
   1a808:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1a80a:	4b13      	ldr	r3, [pc, #76]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a80c:	681b      	ldr	r3, [r3, #0]
   1a80e:	228e      	movs	r2, #142	; 0x8e
   1a810:	21f0      	movs	r1, #240	; 0xf0
   1a812:	0049      	lsls	r1, r1, #1
   1a814:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1a816:	4b10      	ldr	r3, [pc, #64]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a818:	681b      	ldr	r3, [r3, #0]
   1a81a:	2290      	movs	r2, #144	; 0x90
   1a81c:	490f      	ldr	r1, [pc, #60]	; (1a85c <vTraceInitObjectPropertyTable+0x18c>)
   1a81e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   1a820:	4b0d      	ldr	r3, [pc, #52]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a822:	681b      	ldr	r3, [r3, #0]
   1a824:	2292      	movs	r2, #146	; 0x92
   1a826:	490e      	ldr	r1, [pc, #56]	; (1a860 <vTraceInitObjectPropertyTable+0x190>)
   1a828:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1a82a:	4b0b      	ldr	r3, [pc, #44]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a82c:	681b      	ldr	r3, [r3, #0]
   1a82e:	2294      	movs	r2, #148	; 0x94
   1a830:	490c      	ldr	r1, [pc, #48]	; (1a864 <vTraceInitObjectPropertyTable+0x194>)
   1a832:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1a834:	4b08      	ldr	r3, [pc, #32]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a836:	681b      	ldr	r3, [r3, #0]
   1a838:	2296      	movs	r2, #150	; 0x96
   1a83a:	490b      	ldr	r1, [pc, #44]	; (1a868 <vTraceInitObjectPropertyTable+0x198>)
   1a83c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1a83e:	4b06      	ldr	r3, [pc, #24]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a840:	681b      	ldr	r3, [r3, #0]
   1a842:	2298      	movs	r2, #152	; 0x98
   1a844:	218c      	movs	r1, #140	; 0x8c
   1a846:	00c9      	lsls	r1, r1, #3
   1a848:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1a84a:	4b03      	ldr	r3, [pc, #12]	; (1a858 <vTraceInitObjectPropertyTable+0x188>)
   1a84c:	681b      	ldr	r3, [r3, #0]
   1a84e:	4a07      	ldr	r2, [pc, #28]	; (1a86c <vTraceInitObjectPropertyTable+0x19c>)
   1a850:	661a      	str	r2, [r3, #96]	; 0x60
}
   1a852:	46c0      	nop			; (mov r8, r8)
   1a854:	46bd      	mov	sp, r7
   1a856:	bd80      	pop	{r7, pc}
   1a858:	20000c84 	.word	0x20000c84
   1a85c:	000002fd 	.word	0x000002fd
   1a860:	00000352 	.word	0x00000352
   1a864:	000003a2 	.word	0x000003a2
   1a868:	00000401 	.word	0x00000401
   1a86c:	000004bf 	.word	0x000004bf

0001a870 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1a870:	b580      	push	{r7, lr}
   1a872:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1a874:	4b2e      	ldr	r3, [pc, #184]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a876:	2200      	movs	r2, #0
   1a878:	825a      	strh	r2, [r3, #18]
   1a87a:	4b2d      	ldr	r3, [pc, #180]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a87c:	8a5a      	ldrh	r2, [r3, #18]
   1a87e:	4b2c      	ldr	r3, [pc, #176]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a880:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1a882:	4b2b      	ldr	r3, [pc, #172]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a884:	220a      	movs	r2, #10
   1a886:	829a      	strh	r2, [r3, #20]
   1a888:	4b29      	ldr	r3, [pc, #164]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a88a:	8a9a      	ldrh	r2, [r3, #20]
   1a88c:	4b28      	ldr	r3, [pc, #160]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a88e:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1a890:	4b27      	ldr	r3, [pc, #156]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a892:	2214      	movs	r2, #20
   1a894:	82da      	strh	r2, [r3, #22]
   1a896:	4b26      	ldr	r3, [pc, #152]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a898:	8ada      	ldrh	r2, [r3, #22]
   1a89a:	4b25      	ldr	r3, [pc, #148]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a89c:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1a89e:	4b24      	ldr	r3, [pc, #144]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8a0:	221e      	movs	r2, #30
   1a8a2:	831a      	strh	r2, [r3, #24]
   1a8a4:	4b22      	ldr	r3, [pc, #136]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8a6:	8b1a      	ldrh	r2, [r3, #24]
   1a8a8:	4b21      	ldr	r3, [pc, #132]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8aa:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1a8ac:	4b20      	ldr	r3, [pc, #128]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8ae:	222d      	movs	r2, #45	; 0x2d
   1a8b0:	835a      	strh	r2, [r3, #26]
   1a8b2:	4b1f      	ldr	r3, [pc, #124]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8b4:	8b5a      	ldrh	r2, [r3, #26]
   1a8b6:	4b1e      	ldr	r3, [pc, #120]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8b8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1a8ba:	4b1d      	ldr	r3, [pc, #116]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8bc:	2232      	movs	r2, #50	; 0x32
   1a8be:	839a      	strh	r2, [r3, #28]
   1a8c0:	4b1b      	ldr	r3, [pc, #108]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8c2:	8b9a      	ldrh	r2, [r3, #28]
   1a8c4:	4b1a      	ldr	r3, [pc, #104]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8c6:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1a8c8:	4b19      	ldr	r3, [pc, #100]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8ca:	2237      	movs	r2, #55	; 0x37
   1a8cc:	83da      	strh	r2, [r3, #30]
   1a8ce:	4b18      	ldr	r3, [pc, #96]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8d0:	8bda      	ldrh	r2, [r3, #30]
   1a8d2:	4b17      	ldr	r3, [pc, #92]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8d4:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1a8d6:	4b16      	ldr	r3, [pc, #88]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8d8:	223c      	movs	r2, #60	; 0x3c
   1a8da:	841a      	strh	r2, [r3, #32]
   1a8dc:	4b14      	ldr	r3, [pc, #80]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8de:	8c1a      	ldrh	r2, [r3, #32]
   1a8e0:	4b13      	ldr	r3, [pc, #76]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8e2:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1a8e4:	4b12      	ldr	r3, [pc, #72]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8e6:	2241      	movs	r2, #65	; 0x41
   1a8e8:	845a      	strh	r2, [r3, #34]	; 0x22
   1a8ea:	4b11      	ldr	r3, [pc, #68]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8ec:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1a8ee:	4b10      	ldr	r3, [pc, #64]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8f0:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1a8f2:	4b0f      	ldr	r3, [pc, #60]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8f4:	2209      	movs	r2, #9
   1a8f6:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1a8f8:	4b0d      	ldr	r3, [pc, #52]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a8fa:	2213      	movs	r2, #19
   1a8fc:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1a8fe:	4b0c      	ldr	r3, [pc, #48]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a900:	221d      	movs	r2, #29
   1a902:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1a904:	4b0a      	ldr	r3, [pc, #40]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a906:	222c      	movs	r2, #44	; 0x2c
   1a908:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1a90a:	4b09      	ldr	r3, [pc, #36]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a90c:	2231      	movs	r2, #49	; 0x31
   1a90e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1a910:	4b07      	ldr	r3, [pc, #28]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a912:	2236      	movs	r2, #54	; 0x36
   1a914:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1a916:	4b06      	ldr	r3, [pc, #24]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a918:	223b      	movs	r2, #59	; 0x3b
   1a91a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1a91c:	4b04      	ldr	r3, [pc, #16]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a91e:	2240      	movs	r2, #64	; 0x40
   1a920:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1a922:	4b03      	ldr	r3, [pc, #12]	; (1a930 <vTraceInitObjectHandleStack+0xc0>)
   1a924:	2245      	movs	r2, #69	; 0x45
   1a926:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1a928:	46c0      	nop			; (mov r8, r8)
   1a92a:	46bd      	mov	sp, r7
   1a92c:	bd80      	pop	{r7, pc}
   1a92e:	46c0      	nop			; (mov r8, r8)
   1a930:	20000bf4 	.word	0x20000bf4

0001a934 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1a934:	b580      	push	{r7, lr}
   1a936:	b082      	sub	sp, #8
   1a938:	af00      	add	r7, sp, #0
   1a93a:	0002      	movs	r2, r0
   1a93c:	1dfb      	adds	r3, r7, #7
   1a93e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   1a940:	1dfb      	adds	r3, r7, #7
   1a942:	781b      	ldrb	r3, [r3, #0]
   1a944:	2b08      	cmp	r3, #8
   1a946:	d816      	bhi.n	1a976 <pszTraceGetErrorNotEnoughHandles+0x42>
   1a948:	009a      	lsls	r2, r3, #2
   1a94a:	4b0d      	ldr	r3, [pc, #52]	; (1a980 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1a94c:	18d3      	adds	r3, r2, r3
   1a94e:	681b      	ldr	r3, [r3, #0]
   1a950:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1a952:	4b0c      	ldr	r3, [pc, #48]	; (1a984 <pszTraceGetErrorNotEnoughHandles+0x50>)
   1a954:	e010      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1a956:	4b0c      	ldr	r3, [pc, #48]	; (1a988 <pszTraceGetErrorNotEnoughHandles+0x54>)
   1a958:	e00e      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1a95a:	4b0c      	ldr	r3, [pc, #48]	; (1a98c <pszTraceGetErrorNotEnoughHandles+0x58>)
   1a95c:	e00c      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1a95e:	4b0c      	ldr	r3, [pc, #48]	; (1a990 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   1a960:	e00a      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1a962:	4b0c      	ldr	r3, [pc, #48]	; (1a994 <pszTraceGetErrorNotEnoughHandles+0x60>)
   1a964:	e008      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1a966:	4b0c      	ldr	r3, [pc, #48]	; (1a998 <pszTraceGetErrorNotEnoughHandles+0x64>)
   1a968:	e006      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1a96a:	4b0c      	ldr	r3, [pc, #48]	; (1a99c <pszTraceGetErrorNotEnoughHandles+0x68>)
   1a96c:	e004      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1a96e:	4b0c      	ldr	r3, [pc, #48]	; (1a9a0 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1a970:	e002      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1a972:	4b0c      	ldr	r3, [pc, #48]	; (1a9a4 <pszTraceGetErrorNotEnoughHandles+0x70>)
   1a974:	e000      	b.n	1a978 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1a976:	4b0c      	ldr	r3, [pc, #48]	; (1a9a8 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1a978:	0018      	movs	r0, r3
   1a97a:	46bd      	mov	sp, r7
   1a97c:	b002      	add	sp, #8
   1a97e:	bd80      	pop	{r7, pc}
   1a980:	0003a278 	.word	0x0003a278
   1a984:	00039f78 	.word	0x00039f78
   1a988:	00039fc0 	.word	0x00039fc0
   1a98c:	0003a008 	.word	0x0003a008
   1a990:	0003a05c 	.word	0x0003a05c
   1a994:	0003a0a8 	.word	0x0003a0a8
   1a998:	0003a0f4 	.word	0x0003a0f4
   1a99c:	0003a140 	.word	0x0003a140
   1a9a0:	0003a194 	.word	0x0003a194
   1a9a4:	0003a1ec 	.word	0x0003a1ec
   1a9a8:	0003a248 	.word	0x0003a248

0001a9ac <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   1a9ac:	b590      	push	{r4, r7, lr}
   1a9ae:	b087      	sub	sp, #28
   1a9b0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1a9b2:	2317      	movs	r3, #23
   1a9b4:	18fb      	adds	r3, r7, r3
   1a9b6:	2200      	movs	r2, #0
   1a9b8:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1a9ba:	4b36      	ldr	r3, [pc, #216]	; (1aa94 <uiTraceStart+0xe8>)
   1a9bc:	681b      	ldr	r3, [r3, #0]
   1a9be:	2b00      	cmp	r3, #0
   1a9c0:	d10b      	bne.n	1a9da <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1a9c2:	4b34      	ldr	r3, [pc, #208]	; (1aa94 <uiTraceStart+0xe8>)
   1a9c4:	681b      	ldr	r3, [r3, #0]
   1a9c6:	2b00      	cmp	r3, #0
   1a9c8:	d105      	bne.n	1a9d6 <uiTraceStart+0x2a>
   1a9ca:	4b33      	ldr	r3, [pc, #204]	; (1aa98 <uiTraceStart+0xec>)
   1a9cc:	0018      	movs	r0, r3
   1a9ce:	4b33      	ldr	r3, [pc, #204]	; (1aa9c <uiTraceStart+0xf0>)
   1a9d0:	4798      	blx	r3
   1a9d2:	2300      	movs	r3, #0
   1a9d4:	e059      	b.n	1aa8a <uiTraceStart+0xde>
		return 0;
   1a9d6:	2300      	movs	r3, #0
   1a9d8:	e057      	b.n	1aa8a <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1a9da:	4b2e      	ldr	r3, [pc, #184]	; (1aa94 <uiTraceStart+0xe8>)
   1a9dc:	681b      	ldr	r3, [r3, #0]
   1a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a9e0:	2b01      	cmp	r3, #1
   1a9e2:	d101      	bne.n	1a9e8 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1a9e4:	2301      	movs	r3, #1
   1a9e6:	e050      	b.n	1aa8a <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   1a9e8:	4b2d      	ldr	r3, [pc, #180]	; (1aaa0 <uiTraceStart+0xf4>)
   1a9ea:	681b      	ldr	r3, [r3, #0]
   1a9ec:	2b00      	cmp	r3, #0
   1a9ee:	d149      	bne.n	1aa84 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a9f0:	f3ef 8310 	mrs	r3, PRIMASK
   1a9f4:	60bb      	str	r3, [r7, #8]
  return(result);
   1a9f6:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1a9f8:	613b      	str	r3, [r7, #16]
   1a9fa:	2301      	movs	r3, #1
   1a9fc:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a9fe:	68fb      	ldr	r3, [r7, #12]
   1aa00:	f383 8810 	msr	PRIMASK, r3
   1aa04:	4b27      	ldr	r3, [pc, #156]	; (1aaa4 <uiTraceStart+0xf8>)
   1aa06:	681b      	ldr	r3, [r3, #0]
   1aa08:	1c5a      	adds	r2, r3, #1
   1aa0a:	4b26      	ldr	r3, [pc, #152]	; (1aaa4 <uiTraceStart+0xf8>)
   1aa0c:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1aa0e:	4b21      	ldr	r3, [pc, #132]	; (1aa94 <uiTraceStart+0xe8>)
   1aa10:	681b      	ldr	r3, [r3, #0]
   1aa12:	2201      	movs	r2, #1
   1aa14:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1aa16:	4b24      	ldr	r3, [pc, #144]	; (1aaa8 <uiTraceStart+0xfc>)
   1aa18:	4798      	blx	r3
   1aa1a:	0003      	movs	r3, r0
   1aa1c:	0018      	movs	r0, r3
   1aa1e:	4b23      	ldr	r3, [pc, #140]	; (1aaac <uiTraceStart+0x100>)
   1aa20:	4798      	blx	r3
   1aa22:	0003      	movs	r3, r0
   1aa24:	001a      	movs	r2, r3
   1aa26:	2317      	movs	r3, #23
   1aa28:	18fb      	adds	r3, r7, r3
   1aa2a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1aa2c:	2317      	movs	r3, #23
   1aa2e:	18fb      	adds	r3, r7, r3
   1aa30:	781b      	ldrb	r3, [r3, #0]
   1aa32:	2b00      	cmp	r3, #0
   1aa34:	d116      	bne.n	1aa64 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1aa36:	2317      	movs	r3, #23
   1aa38:	18fc      	adds	r4, r7, r3
   1aa3a:	2003      	movs	r0, #3
   1aa3c:	4b1c      	ldr	r3, [pc, #112]	; (1aab0 <uiTraceStart+0x104>)
   1aa3e:	4798      	blx	r3
   1aa40:	0003      	movs	r3, r0
   1aa42:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1aa44:	4a1b      	ldr	r2, [pc, #108]	; (1aab4 <uiTraceStart+0x108>)
   1aa46:	2317      	movs	r3, #23
   1aa48:	18fb      	adds	r3, r7, r3
   1aa4a:	781b      	ldrb	r3, [r3, #0]
   1aa4c:	0019      	movs	r1, r3
   1aa4e:	2003      	movs	r0, #3
   1aa50:	4b19      	ldr	r3, [pc, #100]	; (1aab8 <uiTraceStart+0x10c>)
   1aa52:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1aa54:	2317      	movs	r3, #23
   1aa56:	18fb      	adds	r3, r7, r3
   1aa58:	781b      	ldrb	r3, [r3, #0]
   1aa5a:	2200      	movs	r2, #0
   1aa5c:	0019      	movs	r1, r3
   1aa5e:	2003      	movs	r0, #3
   1aa60:	4b16      	ldr	r3, [pc, #88]	; (1aabc <uiTraceStart+0x110>)
   1aa62:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1aa64:	2317      	movs	r3, #23
   1aa66:	18fb      	adds	r3, r7, r3
   1aa68:	781b      	ldrb	r3, [r3, #0]
   1aa6a:	0018      	movs	r0, r3
   1aa6c:	4b14      	ldr	r3, [pc, #80]	; (1aac0 <uiTraceStart+0x114>)
   1aa6e:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1aa70:	4b0c      	ldr	r3, [pc, #48]	; (1aaa4 <uiTraceStart+0xf8>)
   1aa72:	681b      	ldr	r3, [r3, #0]
   1aa74:	1e5a      	subs	r2, r3, #1
   1aa76:	4b0b      	ldr	r3, [pc, #44]	; (1aaa4 <uiTraceStart+0xf8>)
   1aa78:	601a      	str	r2, [r3, #0]
   1aa7a:	693b      	ldr	r3, [r7, #16]
   1aa7c:	607b      	str	r3, [r7, #4]
   1aa7e:	687b      	ldr	r3, [r7, #4]
   1aa80:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1aa84:	4b03      	ldr	r3, [pc, #12]	; (1aa94 <uiTraceStart+0xe8>)
   1aa86:	681b      	ldr	r3, [r3, #0]
   1aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1aa8a:	0018      	movs	r0, r3
   1aa8c:	46bd      	mov	sp, r7
   1aa8e:	b007      	add	sp, #28
   1aa90:	bd90      	pop	{r4, r7, pc}
   1aa92:	46c0      	nop			; (mov r8, r8)
   1aa94:	20000c84 	.word	0x20000c84
   1aa98:	0003a29c 	.word	0x0003a29c
   1aa9c:	0001bc15 	.word	0x0001bc15
   1aaa0:	20000be4 	.word	0x20000be4
   1aaa4:	20000bdc 	.word	0x20000bdc
   1aaa8:	0001a615 	.word	0x0001a615
   1aaac:	0001a359 	.word	0x0001a359
   1aab0:	0001b8f9 	.word	0x0001b8f9
   1aab4:	0003a2e0 	.word	0x0003a2e0
   1aab8:	0001bb29 	.word	0x0001bb29
   1aabc:	0001b28d 	.word	0x0001b28d
   1aac0:	0001b175 	.word	0x0001b175

0001aac4 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1aac4:	b580      	push	{r7, lr}
   1aac6:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1aac8:	4b02      	ldr	r3, [pc, #8]	; (1aad4 <vTraceStart+0x10>)
   1aaca:	4798      	blx	r3
}
   1aacc:	46c0      	nop			; (mov r8, r8)
   1aace:	46bd      	mov	sp, r7
   1aad0:	bd80      	pop	{r7, pc}
   1aad2:	46c0      	nop			; (mov r8, r8)
   1aad4:	0001a9ad 	.word	0x0001a9ad

0001aad8 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   1aad8:	b580      	push	{r7, lr}
   1aada:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1aadc:	4b08      	ldr	r3, [pc, #32]	; (1ab00 <vTraceStop+0x28>)
   1aade:	681b      	ldr	r3, [r3, #0]
   1aae0:	2b00      	cmp	r3, #0
   1aae2:	d003      	beq.n	1aaec <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1aae4:	4b06      	ldr	r3, [pc, #24]	; (1ab00 <vTraceStop+0x28>)
   1aae6:	681b      	ldr	r3, [r3, #0]
   1aae8:	2200      	movs	r2, #0
   1aaea:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1aaec:	4b05      	ldr	r3, [pc, #20]	; (1ab04 <vTraceStop+0x2c>)
   1aaee:	681b      	ldr	r3, [r3, #0]
   1aaf0:	2b00      	cmp	r3, #0
   1aaf2:	d002      	beq.n	1aafa <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1aaf4:	4b03      	ldr	r3, [pc, #12]	; (1ab04 <vTraceStop+0x2c>)
   1aaf6:	681b      	ldr	r3, [r3, #0]
   1aaf8:	4798      	blx	r3
	}
}
   1aafa:	46c0      	nop			; (mov r8, r8)
   1aafc:	46bd      	mov	sp, r7
   1aafe:	bd80      	pop	{r7, pc}
   1ab00:	20000c84 	.word	0x20000c84
   1ab04:	20000bec 	.word	0x20000bec

0001ab08 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1ab08:	b580      	push	{r7, lr}
   1ab0a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1ab0c:	4b05      	ldr	r3, [pc, #20]	; (1ab24 <xTraceIsRecordingEnabled+0x1c>)
   1ab0e:	681b      	ldr	r3, [r3, #0]
   1ab10:	2b00      	cmp	r3, #0
   1ab12:	d003      	beq.n	1ab1c <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1ab14:	4b03      	ldr	r3, [pc, #12]	; (1ab24 <xTraceIsRecordingEnabled+0x1c>)
   1ab16:	681b      	ldr	r3, [r3, #0]
   1ab18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ab1a:	e000      	b.n	1ab1e <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1ab1c:	2300      	movs	r3, #0
	}
}
   1ab1e:	0018      	movs	r0, r3
   1ab20:	46bd      	mov	sp, r7
   1ab22:	bd80      	pop	{r7, pc}
   1ab24:	20000c84 	.word	0x20000c84

0001ab28 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1ab28:	b590      	push	{r4, r7, lr}
   1ab2a:	b089      	sub	sp, #36	; 0x24
   1ab2c:	af00      	add	r7, sp, #0
   1ab2e:	0002      	movs	r2, r0
   1ab30:	1dfb      	adds	r3, r7, #7
   1ab32:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1ab34:	1dfb      	adds	r3, r7, #7
   1ab36:	781b      	ldrb	r3, [r3, #0]
   1ab38:	2b00      	cmp	r3, #0
   1ab3a:	d057      	beq.n	1abec <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1ab3c:	4b2e      	ldr	r3, [pc, #184]	; (1abf8 <prvTraceStoreTaskReady+0xd0>)
   1ab3e:	681b      	ldr	r3, [r3, #0]
   1ab40:	2b00      	cmp	r3, #0
   1ab42:	d055      	beq.n	1abf0 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1ab44:	1dfb      	adds	r3, r7, #7
   1ab46:	781b      	ldrb	r3, [r3, #0]
   1ab48:	2b0f      	cmp	r3, #15
   1ab4a:	d904      	bls.n	1ab56 <prvTraceStoreTaskReady+0x2e>
   1ab4c:	4b2b      	ldr	r3, [pc, #172]	; (1abfc <prvTraceStoreTaskReady+0xd4>)
   1ab4e:	0018      	movs	r0, r3
   1ab50:	4b2b      	ldr	r3, [pc, #172]	; (1ac00 <prvTraceStoreTaskReady+0xd8>)
   1ab52:	4798      	blx	r3
   1ab54:	e04d      	b.n	1abf2 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1ab56:	4b2b      	ldr	r3, [pc, #172]	; (1ac04 <prvTraceStoreTaskReady+0xdc>)
   1ab58:	681b      	ldr	r3, [r3, #0]
   1ab5a:	2b00      	cmp	r3, #0
   1ab5c:	d004      	beq.n	1ab68 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1ab5e:	4b2a      	ldr	r3, [pc, #168]	; (1ac08 <prvTraceStoreTaskReady+0xe0>)
   1ab60:	0018      	movs	r0, r3
   1ab62:	4b27      	ldr	r3, [pc, #156]	; (1ac00 <prvTraceStoreTaskReady+0xd8>)
   1ab64:	4798      	blx	r3
		return;
   1ab66:	e044      	b.n	1abf2 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ab68:	f3ef 8310 	mrs	r3, PRIMASK
   1ab6c:	60fb      	str	r3, [r7, #12]
  return(result);
   1ab6e:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1ab70:	61fb      	str	r3, [r7, #28]
   1ab72:	2301      	movs	r3, #1
   1ab74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ab76:	693b      	ldr	r3, [r7, #16]
   1ab78:	f383 8810 	msr	PRIMASK, r3
   1ab7c:	4b21      	ldr	r3, [pc, #132]	; (1ac04 <prvTraceStoreTaskReady+0xdc>)
   1ab7e:	681b      	ldr	r3, [r3, #0]
   1ab80:	1c5a      	adds	r2, r3, #1
   1ab82:	4b20      	ldr	r3, [pc, #128]	; (1ac04 <prvTraceStoreTaskReady+0xdc>)
   1ab84:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1ab86:	4b21      	ldr	r3, [pc, #132]	; (1ac0c <prvTraceStoreTaskReady+0xe4>)
   1ab88:	681b      	ldr	r3, [r3, #0]
   1ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ab8c:	2b00      	cmp	r3, #0
   1ab8e:	d022      	beq.n	1abd6 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1ab90:	231a      	movs	r3, #26
   1ab92:	18fc      	adds	r4, r7, r3
   1ab94:	4b1e      	ldr	r3, [pc, #120]	; (1ac10 <prvTraceStoreTaskReady+0xe8>)
   1ab96:	0018      	movs	r0, r3
   1ab98:	4b1e      	ldr	r3, [pc, #120]	; (1ac14 <prvTraceStoreTaskReady+0xec>)
   1ab9a:	4798      	blx	r3
   1ab9c:	0003      	movs	r3, r0
   1ab9e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1aba0:	2319      	movs	r3, #25
   1aba2:	18fb      	adds	r3, r7, r3
   1aba4:	1dfa      	adds	r2, r7, #7
   1aba6:	7812      	ldrb	r2, [r2, #0]
   1aba8:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1abaa:	4b1b      	ldr	r3, [pc, #108]	; (1ac18 <prvTraceStoreTaskReady+0xf0>)
   1abac:	4798      	blx	r3
   1abae:	0003      	movs	r3, r0
   1abb0:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1abb2:	697b      	ldr	r3, [r7, #20]
   1abb4:	2b00      	cmp	r3, #0
   1abb6:	d00e      	beq.n	1abd6 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1abb8:	697b      	ldr	r3, [r7, #20]
   1abba:	2202      	movs	r2, #2
   1abbc:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1abbe:	697b      	ldr	r3, [r7, #20]
   1abc0:	221a      	movs	r2, #26
   1abc2:	18ba      	adds	r2, r7, r2
   1abc4:	8812      	ldrh	r2, [r2, #0]
   1abc6:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1abc8:	697b      	ldr	r3, [r7, #20]
   1abca:	2219      	movs	r2, #25
   1abcc:	18ba      	adds	r2, r7, r2
   1abce:	7812      	ldrb	r2, [r2, #0]
   1abd0:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1abd2:	4b12      	ldr	r3, [pc, #72]	; (1ac1c <prvTraceStoreTaskReady+0xf4>)
   1abd4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1abd6:	4b0b      	ldr	r3, [pc, #44]	; (1ac04 <prvTraceStoreTaskReady+0xdc>)
   1abd8:	681b      	ldr	r3, [r3, #0]
   1abda:	1e5a      	subs	r2, r3, #1
   1abdc:	4b09      	ldr	r3, [pc, #36]	; (1ac04 <prvTraceStoreTaskReady+0xdc>)
   1abde:	601a      	str	r2, [r3, #0]
   1abe0:	69fb      	ldr	r3, [r7, #28]
   1abe2:	60bb      	str	r3, [r7, #8]
   1abe4:	68bb      	ldr	r3, [r7, #8]
   1abe6:	f383 8810 	msr	PRIMASK, r3
   1abea:	e002      	b.n	1abf2 <prvTraceStoreTaskReady+0xca>
		return;
   1abec:	46c0      	nop			; (mov r8, r8)
   1abee:	e000      	b.n	1abf2 <prvTraceStoreTaskReady+0xca>
		return;
   1abf0:	46c0      	nop			; (mov r8, r8)
}
   1abf2:	46bd      	mov	sp, r7
   1abf4:	b009      	add	sp, #36	; 0x24
   1abf6:	bd90      	pop	{r4, r7, pc}
   1abf8:	20000108 	.word	0x20000108
   1abfc:	0003a648 	.word	0x0003a648
   1ac00:	0001bc15 	.word	0x0001bc15
   1ac04:	20000bdc 	.word	0x20000bdc
   1ac08:	0003a688 	.word	0x0003a688
   1ac0c:	20000c84 	.word	0x20000c84
   1ac10:	0000ffff 	.word	0x0000ffff
   1ac14:	0001be29 	.word	0x0001be29
   1ac18:	0001b7cd 	.word	0x0001b7cd
   1ac1c:	0001bdd1 	.word	0x0001bdd1

0001ac20 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1ac20:	b580      	push	{r7, lr}
   1ac22:	b08e      	sub	sp, #56	; 0x38
   1ac24:	af00      	add	r7, sp, #0
   1ac26:	60f8      	str	r0, [r7, #12]
   1ac28:	60b9      	str	r1, [r7, #8]
   1ac2a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1ac2c:	4b48      	ldr	r3, [pc, #288]	; (1ad50 <vTraceStoreMemMangEvent+0x130>)
   1ac2e:	681b      	ldr	r3, [r3, #0]
   1ac30:	2b00      	cmp	r3, #0
   1ac32:	d100      	bne.n	1ac36 <vTraceStoreMemMangEvent+0x16>
   1ac34:	e088      	b.n	1ad48 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1ac36:	687b      	ldr	r3, [r7, #4]
   1ac38:	2b00      	cmp	r3, #0
   1ac3a:	da03      	bge.n	1ac44 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1ac3c:	687b      	ldr	r3, [r7, #4]
   1ac3e:	425b      	negs	r3, r3
   1ac40:	637b      	str	r3, [r7, #52]	; 0x34
   1ac42:	e001      	b.n	1ac48 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1ac44:	687b      	ldr	r3, [r7, #4]
   1ac46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ac48:	f3ef 8310 	mrs	r3, PRIMASK
   1ac4c:	61bb      	str	r3, [r7, #24]
  return(result);
   1ac4e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1ac50:	633b      	str	r3, [r7, #48]	; 0x30
   1ac52:	2301      	movs	r3, #1
   1ac54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ac56:	69fb      	ldr	r3, [r7, #28]
   1ac58:	f383 8810 	msr	PRIMASK, r3
   1ac5c:	4b3d      	ldr	r3, [pc, #244]	; (1ad54 <vTraceStoreMemMangEvent+0x134>)
   1ac5e:	681b      	ldr	r3, [r3, #0]
   1ac60:	1c5a      	adds	r2, r3, #1
   1ac62:	4b3c      	ldr	r3, [pc, #240]	; (1ad54 <vTraceStoreMemMangEvent+0x134>)
   1ac64:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1ac66:	68bb      	ldr	r3, [r7, #8]
   1ac68:	2b00      	cmp	r3, #0
   1ac6a:	d005      	beq.n	1ac78 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1ac6c:	4b3a      	ldr	r3, [pc, #232]	; (1ad58 <vTraceStoreMemMangEvent+0x138>)
   1ac6e:	681a      	ldr	r2, [r3, #0]
   1ac70:	687b      	ldr	r3, [r7, #4]
   1ac72:	18d2      	adds	r2, r2, r3
   1ac74:	4b38      	ldr	r3, [pc, #224]	; (1ad58 <vTraceStoreMemMangEvent+0x138>)
   1ac76:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   1ac78:	4b35      	ldr	r3, [pc, #212]	; (1ad50 <vTraceStoreMemMangEvent+0x130>)
   1ac7a:	681b      	ldr	r3, [r3, #0]
   1ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ac7e:	2b00      	cmp	r3, #0
   1ac80:	d057      	beq.n	1ad32 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1ac82:	20ff      	movs	r0, #255	; 0xff
   1ac84:	4b35      	ldr	r3, [pc, #212]	; (1ad5c <vTraceStoreMemMangEvent+0x13c>)
   1ac86:	4798      	blx	r3
   1ac88:	0003      	movs	r3, r0
   1ac8a:	001a      	movs	r2, r3
   1ac8c:	232f      	movs	r3, #47	; 0x2f
   1ac8e:	18fb      	adds	r3, r7, r3
   1ac90:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ac94:	4a32      	ldr	r2, [pc, #200]	; (1ad60 <vTraceStoreMemMangEvent+0x140>)
   1ac96:	0019      	movs	r1, r3
   1ac98:	0010      	movs	r0, r2
   1ac9a:	4b32      	ldr	r3, [pc, #200]	; (1ad64 <vTraceStoreMemMangEvent+0x144>)
   1ac9c:	4798      	blx	r3
   1ac9e:	0002      	movs	r2, r0
   1aca0:	232c      	movs	r3, #44	; 0x2c
   1aca2:	18fb      	adds	r3, r7, r3
   1aca4:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1aca6:	4b30      	ldr	r3, [pc, #192]	; (1ad68 <vTraceStoreMemMangEvent+0x148>)
   1aca8:	4798      	blx	r3
   1acaa:	0003      	movs	r3, r0
   1acac:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1acb0:	2b00      	cmp	r3, #0
   1acb2:	d03e      	beq.n	1ad32 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1acb6:	222f      	movs	r2, #47	; 0x2f
   1acb8:	18ba      	adds	r2, r7, r2
   1acba:	7812      	ldrb	r2, [r2, #0]
   1acbc:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1acc0:	2200      	movs	r2, #0
   1acc2:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1acc6:	222c      	movs	r2, #44	; 0x2c
   1acc8:	18ba      	adds	r2, r7, r2
   1acca:	8812      	ldrh	r2, [r2, #0]
   1accc:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1acce:	4b27      	ldr	r3, [pc, #156]	; (1ad6c <vTraceStoreMemMangEvent+0x14c>)
   1acd0:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1acd2:	68bb      	ldr	r3, [r7, #8]
   1acd4:	4a22      	ldr	r2, [pc, #136]	; (1ad60 <vTraceStoreMemMangEvent+0x140>)
   1acd6:	0019      	movs	r1, r3
   1acd8:	0010      	movs	r0, r2
   1acda:	4b22      	ldr	r3, [pc, #136]	; (1ad64 <vTraceStoreMemMangEvent+0x144>)
   1acdc:	4798      	blx	r3
   1acde:	0002      	movs	r2, r0
   1ace0:	2326      	movs	r3, #38	; 0x26
   1ace2:	18fb      	adds	r3, r7, r3
   1ace4:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1ace6:	2325      	movs	r3, #37	; 0x25
   1ace8:	18fb      	adds	r3, r7, r3
   1acea:	2200      	movs	r2, #0
   1acec:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1acee:	4b1e      	ldr	r3, [pc, #120]	; (1ad68 <vTraceStoreMemMangEvent+0x148>)
   1acf0:	4798      	blx	r3
   1acf2:	0003      	movs	r3, r0
   1acf4:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1acf6:	6a3b      	ldr	r3, [r7, #32]
   1acf8:	2b00      	cmp	r3, #0
   1acfa:	d01a      	beq.n	1ad32 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1acfc:	6a3b      	ldr	r3, [r7, #32]
   1acfe:	2226      	movs	r2, #38	; 0x26
   1ad00:	18ba      	adds	r2, r7, r2
   1ad02:	8812      	ldrh	r2, [r2, #0]
   1ad04:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1ad06:	6a3b      	ldr	r3, [r7, #32]
   1ad08:	2225      	movs	r2, #37	; 0x25
   1ad0a:	18ba      	adds	r2, r7, r2
   1ad0c:	7812      	ldrb	r2, [r2, #0]
   1ad0e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1ad10:	68fb      	ldr	r3, [r7, #12]
   1ad12:	b2db      	uxtb	r3, r3
   1ad14:	3301      	adds	r3, #1
   1ad16:	b2da      	uxtb	r2, r3
   1ad18:	6a3b      	ldr	r3, [r7, #32]
   1ad1a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1ad1c:	68fb      	ldr	r3, [r7, #12]
   1ad1e:	b2da      	uxtb	r2, r3
   1ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ad22:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1ad24:	4b11      	ldr	r3, [pc, #68]	; (1ad6c <vTraceStoreMemMangEvent+0x14c>)
   1ad26:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1ad28:	4b09      	ldr	r3, [pc, #36]	; (1ad50 <vTraceStoreMemMangEvent+0x130>)
   1ad2a:	681b      	ldr	r3, [r3, #0]
   1ad2c:	4a0a      	ldr	r2, [pc, #40]	; (1ad58 <vTraceStoreMemMangEvent+0x138>)
   1ad2e:	6812      	ldr	r2, [r2, #0]
   1ad30:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1ad32:	4b08      	ldr	r3, [pc, #32]	; (1ad54 <vTraceStoreMemMangEvent+0x134>)
   1ad34:	681b      	ldr	r3, [r3, #0]
   1ad36:	1e5a      	subs	r2, r3, #1
   1ad38:	4b06      	ldr	r3, [pc, #24]	; (1ad54 <vTraceStoreMemMangEvent+0x134>)
   1ad3a:	601a      	str	r2, [r3, #0]
   1ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ad3e:	617b      	str	r3, [r7, #20]
   1ad40:	697b      	ldr	r3, [r7, #20]
   1ad42:	f383 8810 	msr	PRIMASK, r3
   1ad46:	e000      	b.n	1ad4a <vTraceStoreMemMangEvent+0x12a>
		return;
   1ad48:	46c0      	nop			; (mov r8, r8)
}
   1ad4a:	46bd      	mov	sp, r7
   1ad4c:	b00e      	add	sp, #56	; 0x38
   1ad4e:	bd80      	pop	{r7, pc}
   1ad50:	20000c84 	.word	0x20000c84
   1ad54:	20000bdc 	.word	0x20000bdc
   1ad58:	20000bf0 	.word	0x20000bf0
   1ad5c:	0001be29 	.word	0x0001be29
   1ad60:	0000ffff 	.word	0x0000ffff
   1ad64:	0001afed 	.word	0x0001afed
   1ad68:	0001b7cd 	.word	0x0001b7cd
   1ad6c:	0001bdd1 	.word	0x0001bdd1

0001ad70 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1ad70:	b590      	push	{r4, r7, lr}
   1ad72:	b08b      	sub	sp, #44	; 0x2c
   1ad74:	af00      	add	r7, sp, #0
   1ad76:	60f8      	str	r0, [r7, #12]
   1ad78:	607a      	str	r2, [r7, #4]
   1ad7a:	230b      	movs	r3, #11
   1ad7c:	18fb      	adds	r3, r7, r3
   1ad7e:	1c0a      	adds	r2, r1, #0
   1ad80:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1ad82:	68fb      	ldr	r3, [r7, #12]
   1ad84:	2bfe      	cmp	r3, #254	; 0xfe
   1ad86:	d904      	bls.n	1ad92 <prvTraceStoreKernelCall+0x22>
   1ad88:	4b39      	ldr	r3, [pc, #228]	; (1ae70 <prvTraceStoreKernelCall+0x100>)
   1ad8a:	0018      	movs	r0, r3
   1ad8c:	4b39      	ldr	r3, [pc, #228]	; (1ae74 <prvTraceStoreKernelCall+0x104>)
   1ad8e:	4798      	blx	r3
   1ad90:	e06b      	b.n	1ae6a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1ad92:	230b      	movs	r3, #11
   1ad94:	18fb      	adds	r3, r7, r3
   1ad96:	781b      	ldrb	r3, [r3, #0]
   1ad98:	2b08      	cmp	r3, #8
   1ad9a:	d904      	bls.n	1ada6 <prvTraceStoreKernelCall+0x36>
   1ad9c:	4b36      	ldr	r3, [pc, #216]	; (1ae78 <prvTraceStoreKernelCall+0x108>)
   1ad9e:	0018      	movs	r0, r3
   1ada0:	4b34      	ldr	r3, [pc, #208]	; (1ae74 <prvTraceStoreKernelCall+0x104>)
   1ada2:	4798      	blx	r3
   1ada4:	e061      	b.n	1ae6a <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1ada6:	4b35      	ldr	r3, [pc, #212]	; (1ae7c <prvTraceStoreKernelCall+0x10c>)
   1ada8:	681a      	ldr	r2, [r3, #0]
   1adaa:	230b      	movs	r3, #11
   1adac:	18fb      	adds	r3, r7, r3
   1adae:	781b      	ldrb	r3, [r3, #0]
   1adb0:	2164      	movs	r1, #100	; 0x64
   1adb2:	18d3      	adds	r3, r2, r3
   1adb4:	185b      	adds	r3, r3, r1
   1adb6:	781b      	ldrb	r3, [r3, #0]
   1adb8:	001a      	movs	r2, r3
   1adba:	687b      	ldr	r3, [r7, #4]
   1adbc:	429a      	cmp	r2, r3
   1adbe:	d204      	bcs.n	1adca <prvTraceStoreKernelCall+0x5a>
   1adc0:	4b2f      	ldr	r3, [pc, #188]	; (1ae80 <prvTraceStoreKernelCall+0x110>)
   1adc2:	0018      	movs	r0, r3
   1adc4:	4b2b      	ldr	r3, [pc, #172]	; (1ae74 <prvTraceStoreKernelCall+0x104>)
   1adc6:	4798      	blx	r3
   1adc8:	e04f      	b.n	1ae6a <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1adca:	4b2e      	ldr	r3, [pc, #184]	; (1ae84 <prvTraceStoreKernelCall+0x114>)
   1adcc:	681b      	ldr	r3, [r3, #0]
   1adce:	2b00      	cmp	r3, #0
   1add0:	d004      	beq.n	1addc <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1add2:	4b2d      	ldr	r3, [pc, #180]	; (1ae88 <prvTraceStoreKernelCall+0x118>)
   1add4:	0018      	movs	r0, r3
   1add6:	4b27      	ldr	r3, [pc, #156]	; (1ae74 <prvTraceStoreKernelCall+0x104>)
   1add8:	4798      	blx	r3
		return;
   1adda:	e046      	b.n	1ae6a <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1addc:	4b2b      	ldr	r3, [pc, #172]	; (1ae8c <prvTraceStoreKernelCall+0x11c>)
   1adde:	781b      	ldrb	r3, [r3, #0]
   1ade0:	2b00      	cmp	r3, #0
   1ade2:	d041      	beq.n	1ae68 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ade4:	f3ef 8310 	mrs	r3, PRIMASK
   1ade8:	617b      	str	r3, [r7, #20]
  return(result);
   1adea:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1adec:	627b      	str	r3, [r7, #36]	; 0x24
   1adee:	2301      	movs	r3, #1
   1adf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1adf2:	69bb      	ldr	r3, [r7, #24]
   1adf4:	f383 8810 	msr	PRIMASK, r3
   1adf8:	4b22      	ldr	r3, [pc, #136]	; (1ae84 <prvTraceStoreKernelCall+0x114>)
   1adfa:	681b      	ldr	r3, [r3, #0]
   1adfc:	1c5a      	adds	r2, r3, #1
   1adfe:	4b21      	ldr	r3, [pc, #132]	; (1ae84 <prvTraceStoreKernelCall+0x114>)
   1ae00:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1ae02:	4b1e      	ldr	r3, [pc, #120]	; (1ae7c <prvTraceStoreKernelCall+0x10c>)
   1ae04:	681b      	ldr	r3, [r3, #0]
   1ae06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ae08:	2b00      	cmp	r3, #0
   1ae0a:	d022      	beq.n	1ae52 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1ae0c:	2322      	movs	r3, #34	; 0x22
   1ae0e:	18fc      	adds	r4, r7, r3
   1ae10:	4b1f      	ldr	r3, [pc, #124]	; (1ae90 <prvTraceStoreKernelCall+0x120>)
   1ae12:	0018      	movs	r0, r3
   1ae14:	4b1f      	ldr	r3, [pc, #124]	; (1ae94 <prvTraceStoreKernelCall+0x124>)
   1ae16:	4798      	blx	r3
   1ae18:	0003      	movs	r3, r0
   1ae1a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1ae1c:	2321      	movs	r3, #33	; 0x21
   1ae1e:	18fb      	adds	r3, r7, r3
   1ae20:	687a      	ldr	r2, [r7, #4]
   1ae22:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1ae24:	4b1c      	ldr	r3, [pc, #112]	; (1ae98 <prvTraceStoreKernelCall+0x128>)
   1ae26:	4798      	blx	r3
   1ae28:	0003      	movs	r3, r0
   1ae2a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1ae2c:	69fb      	ldr	r3, [r7, #28]
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d00f      	beq.n	1ae52 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1ae32:	69fb      	ldr	r3, [r7, #28]
   1ae34:	2222      	movs	r2, #34	; 0x22
   1ae36:	18ba      	adds	r2, r7, r2
   1ae38:	8812      	ldrh	r2, [r2, #0]
   1ae3a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1ae3c:	68fb      	ldr	r3, [r7, #12]
   1ae3e:	b2da      	uxtb	r2, r3
   1ae40:	69fb      	ldr	r3, [r7, #28]
   1ae42:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1ae44:	69fb      	ldr	r3, [r7, #28]
   1ae46:	2221      	movs	r2, #33	; 0x21
   1ae48:	18ba      	adds	r2, r7, r2
   1ae4a:	7812      	ldrb	r2, [r2, #0]
   1ae4c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1ae4e:	4b13      	ldr	r3, [pc, #76]	; (1ae9c <prvTraceStoreKernelCall+0x12c>)
   1ae50:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1ae52:	4b0c      	ldr	r3, [pc, #48]	; (1ae84 <prvTraceStoreKernelCall+0x114>)
   1ae54:	681b      	ldr	r3, [r3, #0]
   1ae56:	1e5a      	subs	r2, r3, #1
   1ae58:	4b0a      	ldr	r3, [pc, #40]	; (1ae84 <prvTraceStoreKernelCall+0x114>)
   1ae5a:	601a      	str	r2, [r3, #0]
   1ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae5e:	613b      	str	r3, [r7, #16]
   1ae60:	693b      	ldr	r3, [r7, #16]
   1ae62:	f383 8810 	msr	PRIMASK, r3
   1ae66:	e000      	b.n	1ae6a <prvTraceStoreKernelCall+0xfa>
		return;
   1ae68:	46c0      	nop			; (mov r8, r8)
}
   1ae6a:	46bd      	mov	sp, r7
   1ae6c:	b00b      	add	sp, #44	; 0x2c
   1ae6e:	bd90      	pop	{r4, r7, pc}
   1ae70:	0003a6f8 	.word	0x0003a6f8
   1ae74:	0001bc15 	.word	0x0001bc15
   1ae78:	0003a730 	.word	0x0003a730
   1ae7c:	20000c84 	.word	0x20000c84
   1ae80:	0003a778 	.word	0x0003a778
   1ae84:	20000bdc 	.word	0x20000bdc
   1ae88:	0003a7c0 	.word	0x0003a7c0
   1ae8c:	20000be8 	.word	0x20000be8
   1ae90:	0000ffff 	.word	0x0000ffff
   1ae94:	0001be29 	.word	0x0001be29
   1ae98:	0001b7cd 	.word	0x0001b7cd
   1ae9c:	0001bdd1 	.word	0x0001bdd1

0001aea0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1aea0:	b580      	push	{r7, lr}
   1aea2:	b08a      	sub	sp, #40	; 0x28
   1aea4:	af00      	add	r7, sp, #0
   1aea6:	60f8      	str	r0, [r7, #12]
   1aea8:	607a      	str	r2, [r7, #4]
   1aeaa:	603b      	str	r3, [r7, #0]
   1aeac:	230b      	movs	r3, #11
   1aeae:	18fb      	adds	r3, r7, r3
   1aeb0:	1c0a      	adds	r2, r1, #0
   1aeb2:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1aeb4:	68fb      	ldr	r3, [r7, #12]
   1aeb6:	2bfe      	cmp	r3, #254	; 0xfe
   1aeb8:	d904      	bls.n	1aec4 <prvTraceStoreKernelCallWithParam+0x24>
   1aeba:	4b40      	ldr	r3, [pc, #256]	; (1afbc <prvTraceStoreKernelCallWithParam+0x11c>)
   1aebc:	0018      	movs	r0, r3
   1aebe:	4b40      	ldr	r3, [pc, #256]	; (1afc0 <prvTraceStoreKernelCallWithParam+0x120>)
   1aec0:	4798      	blx	r3
   1aec2:	e077      	b.n	1afb4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1aec4:	230b      	movs	r3, #11
   1aec6:	18fb      	adds	r3, r7, r3
   1aec8:	781b      	ldrb	r3, [r3, #0]
   1aeca:	2b08      	cmp	r3, #8
   1aecc:	d904      	bls.n	1aed8 <prvTraceStoreKernelCallWithParam+0x38>
   1aece:	4b3d      	ldr	r3, [pc, #244]	; (1afc4 <prvTraceStoreKernelCallWithParam+0x124>)
   1aed0:	0018      	movs	r0, r3
   1aed2:	4b3b      	ldr	r3, [pc, #236]	; (1afc0 <prvTraceStoreKernelCallWithParam+0x120>)
   1aed4:	4798      	blx	r3
   1aed6:	e06d      	b.n	1afb4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1aed8:	4b3b      	ldr	r3, [pc, #236]	; (1afc8 <prvTraceStoreKernelCallWithParam+0x128>)
   1aeda:	681a      	ldr	r2, [r3, #0]
   1aedc:	230b      	movs	r3, #11
   1aede:	18fb      	adds	r3, r7, r3
   1aee0:	781b      	ldrb	r3, [r3, #0]
   1aee2:	2164      	movs	r1, #100	; 0x64
   1aee4:	18d3      	adds	r3, r2, r3
   1aee6:	185b      	adds	r3, r3, r1
   1aee8:	781b      	ldrb	r3, [r3, #0]
   1aeea:	001a      	movs	r2, r3
   1aeec:	687b      	ldr	r3, [r7, #4]
   1aeee:	429a      	cmp	r2, r3
   1aef0:	d204      	bcs.n	1aefc <prvTraceStoreKernelCallWithParam+0x5c>
   1aef2:	4b36      	ldr	r3, [pc, #216]	; (1afcc <prvTraceStoreKernelCallWithParam+0x12c>)
   1aef4:	0018      	movs	r0, r3
   1aef6:	4b32      	ldr	r3, [pc, #200]	; (1afc0 <prvTraceStoreKernelCallWithParam+0x120>)
   1aef8:	4798      	blx	r3
   1aefa:	e05b      	b.n	1afb4 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1aefc:	4b34      	ldr	r3, [pc, #208]	; (1afd0 <prvTraceStoreKernelCallWithParam+0x130>)
   1aefe:	681b      	ldr	r3, [r3, #0]
   1af00:	2b00      	cmp	r3, #0
   1af02:	d004      	beq.n	1af0e <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1af04:	4b33      	ldr	r3, [pc, #204]	; (1afd4 <prvTraceStoreKernelCallWithParam+0x134>)
   1af06:	0018      	movs	r0, r3
   1af08:	4b2d      	ldr	r3, [pc, #180]	; (1afc0 <prvTraceStoreKernelCallWithParam+0x120>)
   1af0a:	4798      	blx	r3
		return;
   1af0c:	e052      	b.n	1afb4 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1af0e:	f3ef 8310 	mrs	r3, PRIMASK
   1af12:	617b      	str	r3, [r7, #20]
  return(result);
   1af14:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1af16:	627b      	str	r3, [r7, #36]	; 0x24
   1af18:	2301      	movs	r3, #1
   1af1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1af1c:	69bb      	ldr	r3, [r7, #24]
   1af1e:	f383 8810 	msr	PRIMASK, r3
   1af22:	4b2b      	ldr	r3, [pc, #172]	; (1afd0 <prvTraceStoreKernelCallWithParam+0x130>)
   1af24:	681b      	ldr	r3, [r3, #0]
   1af26:	1c5a      	adds	r2, r3, #1
   1af28:	4b29      	ldr	r3, [pc, #164]	; (1afd0 <prvTraceStoreKernelCallWithParam+0x130>)
   1af2a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1af2c:	4b26      	ldr	r3, [pc, #152]	; (1afc8 <prvTraceStoreKernelCallWithParam+0x128>)
   1af2e:	681b      	ldr	r3, [r3, #0]
   1af30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1af32:	2b00      	cmp	r3, #0
   1af34:	d034      	beq.n	1afa0 <prvTraceStoreKernelCallWithParam+0x100>
   1af36:	4b28      	ldr	r3, [pc, #160]	; (1afd8 <prvTraceStoreKernelCallWithParam+0x138>)
   1af38:	781b      	ldrb	r3, [r3, #0]
   1af3a:	2b00      	cmp	r3, #0
   1af3c:	d030      	beq.n	1afa0 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1af3e:	20ff      	movs	r0, #255	; 0xff
   1af40:	4b26      	ldr	r3, [pc, #152]	; (1afdc <prvTraceStoreKernelCallWithParam+0x13c>)
   1af42:	4798      	blx	r3
   1af44:	0003      	movs	r3, r0
   1af46:	001a      	movs	r2, r3
   1af48:	2323      	movs	r3, #35	; 0x23
   1af4a:	18fb      	adds	r3, r7, r3
   1af4c:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1af4e:	683b      	ldr	r3, [r7, #0]
   1af50:	0019      	movs	r1, r3
   1af52:	20ff      	movs	r0, #255	; 0xff
   1af54:	4b22      	ldr	r3, [pc, #136]	; (1afe0 <prvTraceStoreKernelCallWithParam+0x140>)
   1af56:	4798      	blx	r3
   1af58:	0002      	movs	r2, r0
   1af5a:	2322      	movs	r3, #34	; 0x22
   1af5c:	18fb      	adds	r3, r7, r3
   1af5e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1af60:	2321      	movs	r3, #33	; 0x21
   1af62:	18fb      	adds	r3, r7, r3
   1af64:	687a      	ldr	r2, [r7, #4]
   1af66:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1af68:	4b1e      	ldr	r3, [pc, #120]	; (1afe4 <prvTraceStoreKernelCallWithParam+0x144>)
   1af6a:	4798      	blx	r3
   1af6c:	0003      	movs	r3, r0
   1af6e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1af70:	69fb      	ldr	r3, [r7, #28]
   1af72:	2b00      	cmp	r3, #0
   1af74:	d014      	beq.n	1afa0 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1af76:	69fb      	ldr	r3, [r7, #28]
   1af78:	2223      	movs	r2, #35	; 0x23
   1af7a:	18ba      	adds	r2, r7, r2
   1af7c:	7812      	ldrb	r2, [r2, #0]
   1af7e:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1af80:	68fb      	ldr	r3, [r7, #12]
   1af82:	b2da      	uxtb	r2, r3
   1af84:	69fb      	ldr	r3, [r7, #28]
   1af86:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1af88:	69fb      	ldr	r3, [r7, #28]
   1af8a:	2221      	movs	r2, #33	; 0x21
   1af8c:	18ba      	adds	r2, r7, r2
   1af8e:	7812      	ldrb	r2, [r2, #0]
   1af90:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1af92:	69fb      	ldr	r3, [r7, #28]
   1af94:	2222      	movs	r2, #34	; 0x22
   1af96:	18ba      	adds	r2, r7, r2
   1af98:	7812      	ldrb	r2, [r2, #0]
   1af9a:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   1af9c:	4b12      	ldr	r3, [pc, #72]	; (1afe8 <prvTraceStoreKernelCallWithParam+0x148>)
   1af9e:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1afa0:	4b0b      	ldr	r3, [pc, #44]	; (1afd0 <prvTraceStoreKernelCallWithParam+0x130>)
   1afa2:	681b      	ldr	r3, [r3, #0]
   1afa4:	1e5a      	subs	r2, r3, #1
   1afa6:	4b0a      	ldr	r3, [pc, #40]	; (1afd0 <prvTraceStoreKernelCallWithParam+0x130>)
   1afa8:	601a      	str	r2, [r3, #0]
   1afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afac:	613b      	str	r3, [r7, #16]
   1afae:	693b      	ldr	r3, [r7, #16]
   1afb0:	f383 8810 	msr	PRIMASK, r3
}
   1afb4:	46bd      	mov	sp, r7
   1afb6:	b00a      	add	sp, #40	; 0x28
   1afb8:	bd80      	pop	{r7, pc}
   1afba:	46c0      	nop			; (mov r8, r8)
   1afbc:	0003a7f8 	.word	0x0003a7f8
   1afc0:	0001bc15 	.word	0x0001bc15
   1afc4:	0003a838 	.word	0x0003a838
   1afc8:	20000c84 	.word	0x20000c84
   1afcc:	0003a888 	.word	0x0003a888
   1afd0:	20000bdc 	.word	0x20000bdc
   1afd4:	0003a8d8 	.word	0x0003a8d8
   1afd8:	20000be8 	.word	0x20000be8
   1afdc:	0001be29 	.word	0x0001be29
   1afe0:	0001afed 	.word	0x0001afed
   1afe4:	0001b7cd 	.word	0x0001b7cd
   1afe8:	0001bdd1 	.word	0x0001bdd1

0001afec <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1afec:	b580      	push	{r7, lr}
   1afee:	b084      	sub	sp, #16
   1aff0:	af00      	add	r7, sp, #0
   1aff2:	6078      	str	r0, [r7, #4]
   1aff4:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1aff6:	687b      	ldr	r3, [r7, #4]
   1aff8:	2bff      	cmp	r3, #255	; 0xff
   1affa:	d009      	beq.n	1b010 <prvTraceGetParam+0x24>
   1affc:	687b      	ldr	r3, [r7, #4]
   1affe:	4a19      	ldr	r2, [pc, #100]	; (1b064 <prvTraceGetParam+0x78>)
   1b000:	4293      	cmp	r3, r2
   1b002:	d005      	beq.n	1b010 <prvTraceGetParam+0x24>
   1b004:	4b18      	ldr	r3, [pc, #96]	; (1b068 <prvTraceGetParam+0x7c>)
   1b006:	0018      	movs	r0, r3
   1b008:	4b18      	ldr	r3, [pc, #96]	; (1b06c <prvTraceGetParam+0x80>)
   1b00a:	4798      	blx	r3
   1b00c:	683b      	ldr	r3, [r7, #0]
   1b00e:	e024      	b.n	1b05a <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1b010:	683a      	ldr	r2, [r7, #0]
   1b012:	687b      	ldr	r3, [r7, #4]
   1b014:	429a      	cmp	r2, r3
   1b016:	d801      	bhi.n	1b01c <prvTraceGetParam+0x30>
	{
		return param;
   1b018:	683b      	ldr	r3, [r7, #0]
   1b01a:	e01e      	b.n	1b05a <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1b01c:	4b14      	ldr	r3, [pc, #80]	; (1b070 <prvTraceGetParam+0x84>)
   1b01e:	4798      	blx	r3
   1b020:	0003      	movs	r3, r0
   1b022:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1b024:	68fb      	ldr	r3, [r7, #12]
   1b026:	2b00      	cmp	r3, #0
   1b028:	d014      	beq.n	1b054 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1b02a:	68fb      	ldr	r3, [r7, #12]
   1b02c:	2201      	movs	r2, #1
   1b02e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1b030:	687b      	ldr	r3, [r7, #4]
   1b032:	43db      	mvns	r3, r3
   1b034:	683a      	ldr	r2, [r7, #0]
   1b036:	4013      	ands	r3, r2
   1b038:	0a1b      	lsrs	r3, r3, #8
   1b03a:	b2da      	uxtb	r2, r3
   1b03c:	68fb      	ldr	r3, [r7, #12]
   1b03e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   1b040:	687b      	ldr	r3, [r7, #4]
   1b042:	43db      	mvns	r3, r3
   1b044:	683a      	ldr	r2, [r7, #0]
   1b046:	4013      	ands	r3, r2
   1b048:	0c1b      	lsrs	r3, r3, #16
   1b04a:	b29a      	uxth	r2, r3
   1b04c:	68fb      	ldr	r3, [r7, #12]
   1b04e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b050:	4b08      	ldr	r3, [pc, #32]	; (1b074 <prvTraceGetParam+0x88>)
   1b052:	4798      	blx	r3
		}

		return param & param_max;
   1b054:	683b      	ldr	r3, [r7, #0]
   1b056:	687a      	ldr	r2, [r7, #4]
   1b058:	4013      	ands	r3, r2
	}
}
   1b05a:	0018      	movs	r0, r3
   1b05c:	46bd      	mov	sp, r7
   1b05e:	b004      	add	sp, #16
   1b060:	bd80      	pop	{r7, pc}
   1b062:	46c0      	nop			; (mov r8, r8)
   1b064:	0000ffff 	.word	0x0000ffff
   1b068:	0003a910 	.word	0x0003a910
   1b06c:	0001bc15 	.word	0x0001bc15
   1b070:	0001b7cd 	.word	0x0001b7cd
   1b074:	0001bdd1 	.word	0x0001bdd1

0001b078 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   1b078:	b580      	push	{r7, lr}
   1b07a:	b08a      	sub	sp, #40	; 0x28
   1b07c:	af00      	add	r7, sp, #0
   1b07e:	6078      	str	r0, [r7, #4]
   1b080:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1b082:	2326      	movs	r3, #38	; 0x26
   1b084:	18fb      	adds	r3, r7, r3
   1b086:	2200      	movs	r2, #0
   1b088:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1b08a:	687b      	ldr	r3, [r7, #4]
   1b08c:	2bfe      	cmp	r3, #254	; 0xfe
   1b08e:	d904      	bls.n	1b09a <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1b090:	4b2d      	ldr	r3, [pc, #180]	; (1b148 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1b092:	0018      	movs	r0, r3
   1b094:	4b2d      	ldr	r3, [pc, #180]	; (1b14c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b096:	4798      	blx	r3
   1b098:	e053      	b.n	1b142 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1b09a:	4b2d      	ldr	r3, [pc, #180]	; (1b150 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b09c:	681b      	ldr	r3, [r3, #0]
   1b09e:	2b00      	cmp	r3, #0
   1b0a0:	d004      	beq.n	1b0ac <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1b0a2:	4b2c      	ldr	r3, [pc, #176]	; (1b154 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1b0a4:	0018      	movs	r0, r3
   1b0a6:	4b29      	ldr	r3, [pc, #164]	; (1b14c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b0a8:	4798      	blx	r3
		return;
   1b0aa:	e04a      	b.n	1b142 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b0ac:	f3ef 8310 	mrs	r3, PRIMASK
   1b0b0:	613b      	str	r3, [r7, #16]
  return(result);
   1b0b2:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b0b4:	623b      	str	r3, [r7, #32]
   1b0b6:	2301      	movs	r3, #1
   1b0b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b0ba:	697b      	ldr	r3, [r7, #20]
   1b0bc:	f383 8810 	msr	PRIMASK, r3
   1b0c0:	4b23      	ldr	r3, [pc, #140]	; (1b150 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b0c2:	681b      	ldr	r3, [r3, #0]
   1b0c4:	1c5a      	adds	r2, r3, #1
   1b0c6:	4b22      	ldr	r3, [pc, #136]	; (1b150 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b0c8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1b0ca:	4b23      	ldr	r3, [pc, #140]	; (1b158 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   1b0cc:	681b      	ldr	r3, [r3, #0]
   1b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b0d0:	2b00      	cmp	r3, #0
   1b0d2:	d02c      	beq.n	1b12e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1b0d4:	4b21      	ldr	r3, [pc, #132]	; (1b15c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1b0d6:	781b      	ldrb	r3, [r3, #0]
   1b0d8:	2b00      	cmp	r3, #0
   1b0da:	d028      	beq.n	1b12e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1b0dc:	20ff      	movs	r0, #255	; 0xff
   1b0de:	4b20      	ldr	r3, [pc, #128]	; (1b160 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1b0e0:	4798      	blx	r3
   1b0e2:	0003      	movs	r3, r0
   1b0e4:	001a      	movs	r2, r3
   1b0e6:	231f      	movs	r3, #31
   1b0e8:	18fb      	adds	r3, r7, r3
   1b0ea:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1b0ec:	683b      	ldr	r3, [r7, #0]
   1b0ee:	4a1d      	ldr	r2, [pc, #116]	; (1b164 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1b0f0:	0019      	movs	r1, r3
   1b0f2:	0010      	movs	r0, r2
   1b0f4:	4b1c      	ldr	r3, [pc, #112]	; (1b168 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1b0f6:	4798      	blx	r3
   1b0f8:	0002      	movs	r2, r0
   1b0fa:	2326      	movs	r3, #38	; 0x26
   1b0fc:	18fb      	adds	r3, r7, r3
   1b0fe:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1b100:	4b1a      	ldr	r3, [pc, #104]	; (1b16c <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1b102:	4798      	blx	r3
   1b104:	0003      	movs	r3, r0
   1b106:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1b108:	69bb      	ldr	r3, [r7, #24]
   1b10a:	2b00      	cmp	r3, #0
   1b10c:	d00f      	beq.n	1b12e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1b10e:	69bb      	ldr	r3, [r7, #24]
   1b110:	221f      	movs	r2, #31
   1b112:	18ba      	adds	r2, r7, r2
   1b114:	7812      	ldrb	r2, [r2, #0]
   1b116:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1b118:	687b      	ldr	r3, [r7, #4]
   1b11a:	b2da      	uxtb	r2, r3
   1b11c:	69bb      	ldr	r3, [r7, #24]
   1b11e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   1b120:	69bb      	ldr	r3, [r7, #24]
   1b122:	2226      	movs	r2, #38	; 0x26
   1b124:	18ba      	adds	r2, r7, r2
   1b126:	8812      	ldrh	r2, [r2, #0]
   1b128:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b12a:	4b11      	ldr	r3, [pc, #68]	; (1b170 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1b12c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b12e:	4b08      	ldr	r3, [pc, #32]	; (1b150 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b130:	681b      	ldr	r3, [r3, #0]
   1b132:	1e5a      	subs	r2, r3, #1
   1b134:	4b06      	ldr	r3, [pc, #24]	; (1b150 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b136:	601a      	str	r2, [r3, #0]
   1b138:	6a3b      	ldr	r3, [r7, #32]
   1b13a:	60fb      	str	r3, [r7, #12]
   1b13c:	68fb      	ldr	r3, [r7, #12]
   1b13e:	f383 8810 	msr	PRIMASK, r3
}
   1b142:	46bd      	mov	sp, r7
   1b144:	b00a      	add	sp, #40	; 0x28
   1b146:	bd80      	pop	{r7, pc}
   1b148:	0003a94c 	.word	0x0003a94c
   1b14c:	0001bc15 	.word	0x0001bc15
   1b150:	20000bdc 	.word	0x20000bdc
   1b154:	0003a9a4 	.word	0x0003a9a4
   1b158:	20000c84 	.word	0x20000c84
   1b15c:	20000be8 	.word	0x20000be8
   1b160:	0001be29 	.word	0x0001be29
   1b164:	0000ffff 	.word	0x0000ffff
   1b168:	0001afed 	.word	0x0001afed
   1b16c:	0001b7cd 	.word	0x0001b7cd
   1b170:	0001bdd1 	.word	0x0001bdd1

0001b174 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1b174:	b590      	push	{r4, r7, lr}
   1b176:	b089      	sub	sp, #36	; 0x24
   1b178:	af00      	add	r7, sp, #0
   1b17a:	0002      	movs	r2, r0
   1b17c:	1dfb      	adds	r3, r7, #7
   1b17e:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1b180:	1dfb      	adds	r3, r7, #7
   1b182:	781b      	ldrb	r3, [r3, #0]
   1b184:	2b0f      	cmp	r3, #15
   1b186:	d904      	bls.n	1b192 <prvTraceStoreTaskswitch+0x1e>
   1b188:	4b34      	ldr	r3, [pc, #208]	; (1b25c <prvTraceStoreTaskswitch+0xe8>)
   1b18a:	0018      	movs	r0, r3
   1b18c:	4b34      	ldr	r3, [pc, #208]	; (1b260 <prvTraceStoreTaskswitch+0xec>)
   1b18e:	4798      	blx	r3
   1b190:	e061      	b.n	1b256 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b192:	f3ef 8310 	mrs	r3, PRIMASK
   1b196:	60fb      	str	r3, [r7, #12]
  return(result);
   1b198:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1b19a:	61fb      	str	r3, [r7, #28]
   1b19c:	2301      	movs	r3, #1
   1b19e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b1a0:	693b      	ldr	r3, [r7, #16]
   1b1a2:	f383 8810 	msr	PRIMASK, r3
   1b1a6:	4b2f      	ldr	r3, [pc, #188]	; (1b264 <prvTraceStoreTaskswitch+0xf0>)
   1b1a8:	681b      	ldr	r3, [r3, #0]
   1b1aa:	1c5a      	adds	r2, r3, #1
   1b1ac:	4b2d      	ldr	r3, [pc, #180]	; (1b264 <prvTraceStoreTaskswitch+0xf0>)
   1b1ae:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1b1b0:	4b2d      	ldr	r3, [pc, #180]	; (1b268 <prvTraceStoreTaskswitch+0xf4>)
   1b1b2:	781b      	ldrb	r3, [r3, #0]
   1b1b4:	1dfa      	adds	r2, r7, #7
   1b1b6:	7812      	ldrb	r2, [r2, #0]
   1b1b8:	429a      	cmp	r2, r3
   1b1ba:	d042      	beq.n	1b242 <prvTraceStoreTaskswitch+0xce>
   1b1bc:	4b2b      	ldr	r3, [pc, #172]	; (1b26c <prvTraceStoreTaskswitch+0xf8>)
   1b1be:	681b      	ldr	r3, [r3, #0]
   1b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b1c2:	2b00      	cmp	r3, #0
   1b1c4:	d03d      	beq.n	1b242 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1b1c6:	4b2a      	ldr	r3, [pc, #168]	; (1b270 <prvTraceStoreTaskswitch+0xfc>)
   1b1c8:	2200      	movs	r2, #0
   1b1ca:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b1cc:	231a      	movs	r3, #26
   1b1ce:	18fc      	adds	r4, r7, r3
   1b1d0:	4b28      	ldr	r3, [pc, #160]	; (1b274 <prvTraceStoreTaskswitch+0x100>)
   1b1d2:	0018      	movs	r0, r3
   1b1d4:	4b28      	ldr	r3, [pc, #160]	; (1b278 <prvTraceStoreTaskswitch+0x104>)
   1b1d6:	4798      	blx	r3
   1b1d8:	0003      	movs	r3, r0
   1b1da:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1b1dc:	4b22      	ldr	r3, [pc, #136]	; (1b268 <prvTraceStoreTaskswitch+0xf4>)
   1b1de:	1dfa      	adds	r2, r7, #7
   1b1e0:	7812      	ldrb	r2, [r2, #0]
   1b1e2:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1b1e4:	2319      	movs	r3, #25
   1b1e6:	18fb      	adds	r3, r7, r3
   1b1e8:	4a1f      	ldr	r2, [pc, #124]	; (1b268 <prvTraceStoreTaskswitch+0xf4>)
   1b1ea:	7812      	ldrb	r2, [r2, #0]
   1b1ec:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1b1ee:	4b23      	ldr	r3, [pc, #140]	; (1b27c <prvTraceStoreTaskswitch+0x108>)
   1b1f0:	4798      	blx	r3
   1b1f2:	0003      	movs	r3, r0
   1b1f4:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1b1f6:	697b      	ldr	r3, [r7, #20]
   1b1f8:	2b00      	cmp	r3, #0
   1b1fa:	d022      	beq.n	1b242 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1b1fc:	4b1a      	ldr	r3, [pc, #104]	; (1b268 <prvTraceStoreTaskswitch+0xf4>)
   1b1fe:	781b      	ldrb	r3, [r3, #0]
   1b200:	0019      	movs	r1, r3
   1b202:	2003      	movs	r0, #3
   1b204:	4b1e      	ldr	r3, [pc, #120]	; (1b280 <prvTraceStoreTaskswitch+0x10c>)
   1b206:	4798      	blx	r3
   1b208:	0003      	movs	r3, r0
   1b20a:	2b01      	cmp	r3, #1
   1b20c:	d103      	bne.n	1b216 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1b20e:	697b      	ldr	r3, [r7, #20]
   1b210:	2207      	movs	r2, #7
   1b212:	701a      	strb	r2, [r3, #0]
   1b214:	e002      	b.n	1b21c <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1b216:	697b      	ldr	r3, [r7, #20]
   1b218:	2206      	movs	r2, #6
   1b21a:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1b21c:	697b      	ldr	r3, [r7, #20]
   1b21e:	221a      	movs	r2, #26
   1b220:	18ba      	adds	r2, r7, r2
   1b222:	8812      	ldrh	r2, [r2, #0]
   1b224:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1b226:	697b      	ldr	r3, [r7, #20]
   1b228:	2219      	movs	r2, #25
   1b22a:	18ba      	adds	r2, r7, r2
   1b22c:	7812      	ldrb	r2, [r2, #0]
   1b22e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1b230:	4b0d      	ldr	r3, [pc, #52]	; (1b268 <prvTraceStoreTaskswitch+0xf4>)
   1b232:	781b      	ldrb	r3, [r3, #0]
   1b234:	2201      	movs	r2, #1
   1b236:	0019      	movs	r1, r3
   1b238:	2003      	movs	r0, #3
   1b23a:	4b12      	ldr	r3, [pc, #72]	; (1b284 <prvTraceStoreTaskswitch+0x110>)
   1b23c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1b23e:	4b12      	ldr	r3, [pc, #72]	; (1b288 <prvTraceStoreTaskswitch+0x114>)
   1b240:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1b242:	4b08      	ldr	r3, [pc, #32]	; (1b264 <prvTraceStoreTaskswitch+0xf0>)
   1b244:	681b      	ldr	r3, [r3, #0]
   1b246:	1e5a      	subs	r2, r3, #1
   1b248:	4b06      	ldr	r3, [pc, #24]	; (1b264 <prvTraceStoreTaskswitch+0xf0>)
   1b24a:	601a      	str	r2, [r3, #0]
   1b24c:	69fb      	ldr	r3, [r7, #28]
   1b24e:	60bb      	str	r3, [r7, #8]
   1b250:	68bb      	ldr	r3, [r7, #8]
   1b252:	f383 8810 	msr	PRIMASK, r3
}
   1b256:	46bd      	mov	sp, r7
   1b258:	b009      	add	sp, #36	; 0x24
   1b25a:	bd90      	pop	{r4, r7, pc}
   1b25c:	0003a9dc 	.word	0x0003a9dc
   1b260:	0001bc15 	.word	0x0001bc15
   1b264:	20000bdc 	.word	0x20000bdc
   1b268:	20000be8 	.word	0x20000be8
   1b26c:	20000c84 	.word	0x20000c84
   1b270:	20000bc8 	.word	0x20000bc8
   1b274:	0000ffff 	.word	0x0000ffff
   1b278:	0001be29 	.word	0x0001be29
   1b27c:	0001b7cd 	.word	0x0001b7cd
   1b280:	0001b471 	.word	0x0001b471
   1b284:	0001b3cd 	.word	0x0001b3cd
   1b288:	0001bdd1 	.word	0x0001bdd1

0001b28c <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b28c:	b590      	push	{r4, r7, lr}
   1b28e:	b083      	sub	sp, #12
   1b290:	af00      	add	r7, sp, #0
   1b292:	0004      	movs	r4, r0
   1b294:	0008      	movs	r0, r1
   1b296:	0011      	movs	r1, r2
   1b298:	1dfb      	adds	r3, r7, #7
   1b29a:	1c22      	adds	r2, r4, #0
   1b29c:	701a      	strb	r2, [r3, #0]
   1b29e:	1dbb      	adds	r3, r7, #6
   1b2a0:	1c02      	adds	r2, r0, #0
   1b2a2:	701a      	strb	r2, [r3, #0]
   1b2a4:	1d7b      	adds	r3, r7, #5
   1b2a6:	1c0a      	adds	r2, r1, #0
   1b2a8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b2aa:	1dfb      	adds	r3, r7, #7
   1b2ac:	781b      	ldrb	r3, [r3, #0]
   1b2ae:	2b08      	cmp	r3, #8
   1b2b0:	d904      	bls.n	1b2bc <prvTraceSetPriorityProperty+0x30>
   1b2b2:	4b1a      	ldr	r3, [pc, #104]	; (1b31c <prvTraceSetPriorityProperty+0x90>)
   1b2b4:	0018      	movs	r0, r3
   1b2b6:	4b1a      	ldr	r3, [pc, #104]	; (1b320 <prvTraceSetPriorityProperty+0x94>)
   1b2b8:	4798      	blx	r3
   1b2ba:	e02c      	b.n	1b316 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b2bc:	4b19      	ldr	r3, [pc, #100]	; (1b324 <prvTraceSetPriorityProperty+0x98>)
   1b2be:	681a      	ldr	r2, [r3, #0]
   1b2c0:	1dfb      	adds	r3, r7, #7
   1b2c2:	781b      	ldrb	r3, [r3, #0]
   1b2c4:	2164      	movs	r1, #100	; 0x64
   1b2c6:	18d3      	adds	r3, r2, r3
   1b2c8:	185b      	adds	r3, r3, r1
   1b2ca:	781b      	ldrb	r3, [r3, #0]
   1b2cc:	1dba      	adds	r2, r7, #6
   1b2ce:	7812      	ldrb	r2, [r2, #0]
   1b2d0:	429a      	cmp	r2, r3
   1b2d2:	d904      	bls.n	1b2de <prvTraceSetPriorityProperty+0x52>
   1b2d4:	4b14      	ldr	r3, [pc, #80]	; (1b328 <prvTraceSetPriorityProperty+0x9c>)
   1b2d6:	0018      	movs	r0, r3
   1b2d8:	4b11      	ldr	r3, [pc, #68]	; (1b320 <prvTraceSetPriorityProperty+0x94>)
   1b2da:	4798      	blx	r3
   1b2dc:	e01b      	b.n	1b316 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1b2de:	4b11      	ldr	r3, [pc, #68]	; (1b324 <prvTraceSetPriorityProperty+0x98>)
   1b2e0:	681c      	ldr	r4, [r3, #0]
   1b2e2:	1dfb      	adds	r3, r7, #7
   1b2e4:	781a      	ldrb	r2, [r3, #0]
   1b2e6:	1dbb      	adds	r3, r7, #6
   1b2e8:	781b      	ldrb	r3, [r3, #0]
   1b2ea:	0011      	movs	r1, r2
   1b2ec:	0018      	movs	r0, r3
   1b2ee:	4b0f      	ldr	r3, [pc, #60]	; (1b32c <prvTraceSetPriorityProperty+0xa0>)
   1b2f0:	4798      	blx	r3
   1b2f2:	0003      	movs	r3, r0
   1b2f4:	0018      	movs	r0, r3
   1b2f6:	4b0b      	ldr	r3, [pc, #44]	; (1b324 <prvTraceSetPriorityProperty+0x98>)
   1b2f8:	681a      	ldr	r2, [r3, #0]
   1b2fa:	1dfb      	adds	r3, r7, #7
   1b2fc:	781b      	ldrb	r3, [r3, #0]
   1b2fe:	2170      	movs	r1, #112	; 0x70
   1b300:	18d3      	adds	r3, r2, r3
   1b302:	185b      	adds	r3, r3, r1
   1b304:	781b      	ldrb	r3, [r3, #0]
   1b306:	18c3      	adds	r3, r0, r3
   1b308:	3301      	adds	r3, #1
   1b30a:	229c      	movs	r2, #156	; 0x9c
   1b30c:	18e3      	adds	r3, r4, r3
   1b30e:	189b      	adds	r3, r3, r2
   1b310:	1d7a      	adds	r2, r7, #5
   1b312:	7812      	ldrb	r2, [r2, #0]
   1b314:	701a      	strb	r2, [r3, #0]
}
   1b316:	46bd      	mov	sp, r7
   1b318:	b003      	add	sp, #12
   1b31a:	bd90      	pop	{r4, r7, pc}
   1b31c:	0003ab70 	.word	0x0003ab70
   1b320:	0001bc15 	.word	0x0001bc15
   1b324:	20000c84 	.word	0x20000c84
   1b328:	0003abbc 	.word	0x0003abbc
   1b32c:	0001b821 	.word	0x0001b821

0001b330 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1b330:	b590      	push	{r4, r7, lr}
   1b332:	b083      	sub	sp, #12
   1b334:	af00      	add	r7, sp, #0
   1b336:	0002      	movs	r2, r0
   1b338:	1dfb      	adds	r3, r7, #7
   1b33a:	701a      	strb	r2, [r3, #0]
   1b33c:	1dbb      	adds	r3, r7, #6
   1b33e:	1c0a      	adds	r2, r1, #0
   1b340:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b342:	1dfb      	adds	r3, r7, #7
   1b344:	781b      	ldrb	r3, [r3, #0]
   1b346:	2b08      	cmp	r3, #8
   1b348:	d905      	bls.n	1b356 <prvTraceGetPriorityProperty+0x26>
   1b34a:	4b1b      	ldr	r3, [pc, #108]	; (1b3b8 <prvTraceGetPriorityProperty+0x88>)
   1b34c:	0018      	movs	r0, r3
   1b34e:	4b1b      	ldr	r3, [pc, #108]	; (1b3bc <prvTraceGetPriorityProperty+0x8c>)
   1b350:	4798      	blx	r3
   1b352:	2300      	movs	r3, #0
   1b354:	e02b      	b.n	1b3ae <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b356:	4b1a      	ldr	r3, [pc, #104]	; (1b3c0 <prvTraceGetPriorityProperty+0x90>)
   1b358:	681a      	ldr	r2, [r3, #0]
   1b35a:	1dfb      	adds	r3, r7, #7
   1b35c:	781b      	ldrb	r3, [r3, #0]
   1b35e:	2164      	movs	r1, #100	; 0x64
   1b360:	18d3      	adds	r3, r2, r3
   1b362:	185b      	adds	r3, r3, r1
   1b364:	781b      	ldrb	r3, [r3, #0]
   1b366:	1dba      	adds	r2, r7, #6
   1b368:	7812      	ldrb	r2, [r2, #0]
   1b36a:	429a      	cmp	r2, r3
   1b36c:	d905      	bls.n	1b37a <prvTraceGetPriorityProperty+0x4a>
   1b36e:	4b15      	ldr	r3, [pc, #84]	; (1b3c4 <prvTraceGetPriorityProperty+0x94>)
   1b370:	0018      	movs	r0, r3
   1b372:	4b12      	ldr	r3, [pc, #72]	; (1b3bc <prvTraceGetPriorityProperty+0x8c>)
   1b374:	4798      	blx	r3
   1b376:	2300      	movs	r3, #0
   1b378:	e019      	b.n	1b3ae <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1b37a:	4b11      	ldr	r3, [pc, #68]	; (1b3c0 <prvTraceGetPriorityProperty+0x90>)
   1b37c:	681c      	ldr	r4, [r3, #0]
   1b37e:	1dfb      	adds	r3, r7, #7
   1b380:	781a      	ldrb	r2, [r3, #0]
   1b382:	1dbb      	adds	r3, r7, #6
   1b384:	781b      	ldrb	r3, [r3, #0]
   1b386:	0011      	movs	r1, r2
   1b388:	0018      	movs	r0, r3
   1b38a:	4b0f      	ldr	r3, [pc, #60]	; (1b3c8 <prvTraceGetPriorityProperty+0x98>)
   1b38c:	4798      	blx	r3
   1b38e:	0003      	movs	r3, r0
   1b390:	0018      	movs	r0, r3
   1b392:	4b0b      	ldr	r3, [pc, #44]	; (1b3c0 <prvTraceGetPriorityProperty+0x90>)
   1b394:	681a      	ldr	r2, [r3, #0]
   1b396:	1dfb      	adds	r3, r7, #7
   1b398:	781b      	ldrb	r3, [r3, #0]
   1b39a:	2170      	movs	r1, #112	; 0x70
   1b39c:	18d3      	adds	r3, r2, r3
   1b39e:	185b      	adds	r3, r3, r1
   1b3a0:	781b      	ldrb	r3, [r3, #0]
   1b3a2:	18c3      	adds	r3, r0, r3
   1b3a4:	3301      	adds	r3, #1
   1b3a6:	229c      	movs	r2, #156	; 0x9c
   1b3a8:	18e3      	adds	r3, r4, r3
   1b3aa:	189b      	adds	r3, r3, r2
   1b3ac:	781b      	ldrb	r3, [r3, #0]
}
   1b3ae:	0018      	movs	r0, r3
   1b3b0:	46bd      	mov	sp, r7
   1b3b2:	b003      	add	sp, #12
   1b3b4:	bd90      	pop	{r4, r7, pc}
   1b3b6:	46c0      	nop			; (mov r8, r8)
   1b3b8:	0003abfc 	.word	0x0003abfc
   1b3bc:	0001bc15 	.word	0x0001bc15
   1b3c0:	20000c84 	.word	0x20000c84
   1b3c4:	0003ac48 	.word	0x0003ac48
   1b3c8:	0001b821 	.word	0x0001b821

0001b3cc <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b3cc:	b590      	push	{r4, r7, lr}
   1b3ce:	b083      	sub	sp, #12
   1b3d0:	af00      	add	r7, sp, #0
   1b3d2:	0004      	movs	r4, r0
   1b3d4:	0008      	movs	r0, r1
   1b3d6:	0011      	movs	r1, r2
   1b3d8:	1dfb      	adds	r3, r7, #7
   1b3da:	1c22      	adds	r2, r4, #0
   1b3dc:	701a      	strb	r2, [r3, #0]
   1b3de:	1dbb      	adds	r3, r7, #6
   1b3e0:	1c02      	adds	r2, r0, #0
   1b3e2:	701a      	strb	r2, [r3, #0]
   1b3e4:	1d7b      	adds	r3, r7, #5
   1b3e6:	1c0a      	adds	r2, r1, #0
   1b3e8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b3ea:	1dfb      	adds	r3, r7, #7
   1b3ec:	781b      	ldrb	r3, [r3, #0]
   1b3ee:	2b08      	cmp	r3, #8
   1b3f0:	d904      	bls.n	1b3fc <prvTraceSetObjectState+0x30>
   1b3f2:	4b1a      	ldr	r3, [pc, #104]	; (1b45c <prvTraceSetObjectState+0x90>)
   1b3f4:	0018      	movs	r0, r3
   1b3f6:	4b1a      	ldr	r3, [pc, #104]	; (1b460 <prvTraceSetObjectState+0x94>)
   1b3f8:	4798      	blx	r3
   1b3fa:	e02b      	b.n	1b454 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b3fc:	4b19      	ldr	r3, [pc, #100]	; (1b464 <prvTraceSetObjectState+0x98>)
   1b3fe:	681a      	ldr	r2, [r3, #0]
   1b400:	1dfb      	adds	r3, r7, #7
   1b402:	781b      	ldrb	r3, [r3, #0]
   1b404:	2164      	movs	r1, #100	; 0x64
   1b406:	18d3      	adds	r3, r2, r3
   1b408:	185b      	adds	r3, r3, r1
   1b40a:	781b      	ldrb	r3, [r3, #0]
   1b40c:	1dba      	adds	r2, r7, #6
   1b40e:	7812      	ldrb	r2, [r2, #0]
   1b410:	429a      	cmp	r2, r3
   1b412:	d904      	bls.n	1b41e <prvTraceSetObjectState+0x52>
   1b414:	4b14      	ldr	r3, [pc, #80]	; (1b468 <prvTraceSetObjectState+0x9c>)
   1b416:	0018      	movs	r0, r3
   1b418:	4b11      	ldr	r3, [pc, #68]	; (1b460 <prvTraceSetObjectState+0x94>)
   1b41a:	4798      	blx	r3
   1b41c:	e01a      	b.n	1b454 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1b41e:	4b11      	ldr	r3, [pc, #68]	; (1b464 <prvTraceSetObjectState+0x98>)
   1b420:	681c      	ldr	r4, [r3, #0]
   1b422:	1dfb      	adds	r3, r7, #7
   1b424:	781a      	ldrb	r2, [r3, #0]
   1b426:	1dbb      	adds	r3, r7, #6
   1b428:	781b      	ldrb	r3, [r3, #0]
   1b42a:	0011      	movs	r1, r2
   1b42c:	0018      	movs	r0, r3
   1b42e:	4b0f      	ldr	r3, [pc, #60]	; (1b46c <prvTraceSetObjectState+0xa0>)
   1b430:	4798      	blx	r3
   1b432:	0003      	movs	r3, r0
   1b434:	0018      	movs	r0, r3
   1b436:	4b0b      	ldr	r3, [pc, #44]	; (1b464 <prvTraceSetObjectState+0x98>)
   1b438:	681a      	ldr	r2, [r3, #0]
   1b43a:	1dfb      	adds	r3, r7, #7
   1b43c:	781b      	ldrb	r3, [r3, #0]
   1b43e:	2170      	movs	r1, #112	; 0x70
   1b440:	18d3      	adds	r3, r2, r3
   1b442:	185b      	adds	r3, r3, r1
   1b444:	781b      	ldrb	r3, [r3, #0]
   1b446:	18c3      	adds	r3, r0, r3
   1b448:	229c      	movs	r2, #156	; 0x9c
   1b44a:	18e3      	adds	r3, r4, r3
   1b44c:	189b      	adds	r3, r3, r2
   1b44e:	1d7a      	adds	r2, r7, #5
   1b450:	7812      	ldrb	r2, [r2, #0]
   1b452:	701a      	strb	r2, [r3, #0]
}
   1b454:	46bd      	mov	sp, r7
   1b456:	b003      	add	sp, #12
   1b458:	bd90      	pop	{r4, r7, pc}
   1b45a:	46c0      	nop			; (mov r8, r8)
   1b45c:	0003ac88 	.word	0x0003ac88
   1b460:	0001bc15 	.word	0x0001bc15
   1b464:	20000c84 	.word	0x20000c84
   1b468:	0003accc 	.word	0x0003accc
   1b46c:	0001b821 	.word	0x0001b821

0001b470 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1b470:	b590      	push	{r4, r7, lr}
   1b472:	b083      	sub	sp, #12
   1b474:	af00      	add	r7, sp, #0
   1b476:	0002      	movs	r2, r0
   1b478:	1dfb      	adds	r3, r7, #7
   1b47a:	701a      	strb	r2, [r3, #0]
   1b47c:	1dbb      	adds	r3, r7, #6
   1b47e:	1c0a      	adds	r2, r1, #0
   1b480:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b482:	1dfb      	adds	r3, r7, #7
   1b484:	781b      	ldrb	r3, [r3, #0]
   1b486:	2b08      	cmp	r3, #8
   1b488:	d905      	bls.n	1b496 <prvTraceGetObjectState+0x26>
   1b48a:	4b1a      	ldr	r3, [pc, #104]	; (1b4f4 <prvTraceGetObjectState+0x84>)
   1b48c:	0018      	movs	r0, r3
   1b48e:	4b1a      	ldr	r3, [pc, #104]	; (1b4f8 <prvTraceGetObjectState+0x88>)
   1b490:	4798      	blx	r3
   1b492:	2300      	movs	r3, #0
   1b494:	e02a      	b.n	1b4ec <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b496:	4b19      	ldr	r3, [pc, #100]	; (1b4fc <prvTraceGetObjectState+0x8c>)
   1b498:	681a      	ldr	r2, [r3, #0]
   1b49a:	1dfb      	adds	r3, r7, #7
   1b49c:	781b      	ldrb	r3, [r3, #0]
   1b49e:	2164      	movs	r1, #100	; 0x64
   1b4a0:	18d3      	adds	r3, r2, r3
   1b4a2:	185b      	adds	r3, r3, r1
   1b4a4:	781b      	ldrb	r3, [r3, #0]
   1b4a6:	1dba      	adds	r2, r7, #6
   1b4a8:	7812      	ldrb	r2, [r2, #0]
   1b4aa:	429a      	cmp	r2, r3
   1b4ac:	d905      	bls.n	1b4ba <prvTraceGetObjectState+0x4a>
   1b4ae:	4b14      	ldr	r3, [pc, #80]	; (1b500 <prvTraceGetObjectState+0x90>)
   1b4b0:	0018      	movs	r0, r3
   1b4b2:	4b11      	ldr	r3, [pc, #68]	; (1b4f8 <prvTraceGetObjectState+0x88>)
   1b4b4:	4798      	blx	r3
   1b4b6:	2300      	movs	r3, #0
   1b4b8:	e018      	b.n	1b4ec <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1b4ba:	4b10      	ldr	r3, [pc, #64]	; (1b4fc <prvTraceGetObjectState+0x8c>)
   1b4bc:	681c      	ldr	r4, [r3, #0]
   1b4be:	1dfb      	adds	r3, r7, #7
   1b4c0:	781a      	ldrb	r2, [r3, #0]
   1b4c2:	1dbb      	adds	r3, r7, #6
   1b4c4:	781b      	ldrb	r3, [r3, #0]
   1b4c6:	0011      	movs	r1, r2
   1b4c8:	0018      	movs	r0, r3
   1b4ca:	4b0e      	ldr	r3, [pc, #56]	; (1b504 <prvTraceGetObjectState+0x94>)
   1b4cc:	4798      	blx	r3
   1b4ce:	0003      	movs	r3, r0
   1b4d0:	0018      	movs	r0, r3
   1b4d2:	4b0a      	ldr	r3, [pc, #40]	; (1b4fc <prvTraceGetObjectState+0x8c>)
   1b4d4:	681a      	ldr	r2, [r3, #0]
   1b4d6:	1dfb      	adds	r3, r7, #7
   1b4d8:	781b      	ldrb	r3, [r3, #0]
   1b4da:	2170      	movs	r1, #112	; 0x70
   1b4dc:	18d3      	adds	r3, r2, r3
   1b4de:	185b      	adds	r3, r3, r1
   1b4e0:	781b      	ldrb	r3, [r3, #0]
   1b4e2:	18c3      	adds	r3, r0, r3
   1b4e4:	229c      	movs	r2, #156	; 0x9c
   1b4e6:	18e3      	adds	r3, r4, r3
   1b4e8:	189b      	adds	r3, r3, r2
   1b4ea:	781b      	ldrb	r3, [r3, #0]
}
   1b4ec:	0018      	movs	r0, r3
   1b4ee:	46bd      	mov	sp, r7
   1b4f0:	b003      	add	sp, #12
   1b4f2:	bd90      	pop	{r4, r7, pc}
   1b4f4:	0003ad08 	.word	0x0003ad08
   1b4f8:	0001bc15 	.word	0x0001bc15
   1b4fc:	20000c84 	.word	0x20000c84
   1b500:	0003ad4c 	.word	0x0003ad4c
   1b504:	0001b821 	.word	0x0001b821

0001b508 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1b508:	b590      	push	{r4, r7, lr}
   1b50a:	b083      	sub	sp, #12
   1b50c:	af00      	add	r7, sp, #0
   1b50e:	0002      	movs	r2, r0
   1b510:	1dfb      	adds	r3, r7, #7
   1b512:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1b514:	4b11      	ldr	r3, [pc, #68]	; (1b55c <prvTraceSetTaskInstanceFinished+0x54>)
   1b516:	681b      	ldr	r3, [r3, #0]
   1b518:	2267      	movs	r2, #103	; 0x67
   1b51a:	5c9b      	ldrb	r3, [r3, r2]
   1b51c:	1dfa      	adds	r2, r7, #7
   1b51e:	7812      	ldrb	r2, [r2, #0]
   1b520:	429a      	cmp	r2, r3
   1b522:	d904      	bls.n	1b52e <prvTraceSetTaskInstanceFinished+0x26>
   1b524:	4b0e      	ldr	r3, [pc, #56]	; (1b560 <prvTraceSetTaskInstanceFinished+0x58>)
   1b526:	0018      	movs	r0, r3
   1b528:	4b0e      	ldr	r3, [pc, #56]	; (1b564 <prvTraceSetTaskInstanceFinished+0x5c>)
   1b52a:	4798      	blx	r3
   1b52c:	e013      	b.n	1b556 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1b52e:	4b0b      	ldr	r3, [pc, #44]	; (1b55c <prvTraceSetTaskInstanceFinished+0x54>)
   1b530:	681c      	ldr	r4, [r3, #0]
   1b532:	1dfb      	adds	r3, r7, #7
   1b534:	781b      	ldrb	r3, [r3, #0]
   1b536:	2103      	movs	r1, #3
   1b538:	0018      	movs	r0, r3
   1b53a:	4b0b      	ldr	r3, [pc, #44]	; (1b568 <prvTraceSetTaskInstanceFinished+0x60>)
   1b53c:	4798      	blx	r3
   1b53e:	0003      	movs	r3, r0
   1b540:	0019      	movs	r1, r3
   1b542:	4b06      	ldr	r3, [pc, #24]	; (1b55c <prvTraceSetTaskInstanceFinished+0x54>)
   1b544:	681b      	ldr	r3, [r3, #0]
   1b546:	2273      	movs	r2, #115	; 0x73
   1b548:	5c9b      	ldrb	r3, [r3, r2]
   1b54a:	18cb      	adds	r3, r1, r3
   1b54c:	229c      	movs	r2, #156	; 0x9c
   1b54e:	18e3      	adds	r3, r4, r3
   1b550:	189b      	adds	r3, r3, r2
   1b552:	2200      	movs	r2, #0
   1b554:	701a      	strb	r2, [r3, #0]
#endif
}
   1b556:	46bd      	mov	sp, r7
   1b558:	b003      	add	sp, #12
   1b55a:	bd90      	pop	{r4, r7, pc}
   1b55c:	20000c84 	.word	0x20000c84
   1b560:	0003ad88 	.word	0x0003ad88
   1b564:	0001bc15 	.word	0x0001bc15
   1b568:	0001b821 	.word	0x0001b821

0001b56c <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1b56c:	b580      	push	{r7, lr}
   1b56e:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1b570:	4b75      	ldr	r3, [pc, #468]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b572:	681b      	ldr	r3, [r3, #0]
   1b574:	2b00      	cmp	r3, #0
   1b576:	d103      	bne.n	1b580 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1b578:	4b73      	ldr	r3, [pc, #460]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b57a:	4a74      	ldr	r2, [pc, #464]	; (1b74c <prvTraceInitTraceData+0x1e0>)
   1b57c:	601a      	str	r2, [r3, #0]
   1b57e:	e006      	b.n	1b58e <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1b580:	4b71      	ldr	r3, [pc, #452]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b582:	681b      	ldr	r3, [r3, #0]
   1b584:	781b      	ldrb	r3, [r3, #0]
   1b586:	b2db      	uxtb	r3, r3
   1b588:	2b01      	cmp	r3, #1
   1b58a:	d100      	bne.n	1b58e <prvTraceInitTraceData+0x22>
   1b58c:	e0d8      	b.n	1b740 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1b58e:	4b70      	ldr	r3, [pc, #448]	; (1b750 <prvTraceInitTraceData+0x1e4>)
   1b590:	681a      	ldr	r2, [r3, #0]
   1b592:	4b70      	ldr	r3, [pc, #448]	; (1b754 <prvTraceInitTraceData+0x1e8>)
   1b594:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1b596:	4b6c      	ldr	r3, [pc, #432]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b598:	6818      	ldr	r0, [r3, #0]
   1b59a:	23bd      	movs	r3, #189	; 0xbd
   1b59c:	011b      	lsls	r3, r3, #4
   1b59e:	001a      	movs	r2, r3
   1b5a0:	2100      	movs	r1, #0
   1b5a2:	4b6d      	ldr	r3, [pc, #436]	; (1b758 <prvTraceInitTraceData+0x1ec>)
   1b5a4:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1b5a6:	4b68      	ldr	r3, [pc, #416]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5a8:	681b      	ldr	r3, [r3, #0]
   1b5aa:	4a6c      	ldr	r2, [pc, #432]	; (1b75c <prvTraceInitTraceData+0x1f0>)
   1b5ac:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1b5ae:	4b66      	ldr	r3, [pc, #408]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5b0:	681b      	ldr	r3, [r3, #0]
   1b5b2:	2205      	movs	r2, #5
   1b5b4:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1b5b6:	4b64      	ldr	r3, [pc, #400]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5b8:	681b      	ldr	r3, [r3, #0]
   1b5ba:	2200      	movs	r2, #0
   1b5bc:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1b5be:	4b62      	ldr	r3, [pc, #392]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5c0:	681b      	ldr	r3, [r3, #0]
   1b5c2:	22bd      	movs	r2, #189	; 0xbd
   1b5c4:	0112      	lsls	r2, r2, #4
   1b5c6:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1b5c8:	4b5f      	ldr	r3, [pc, #380]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5ca:	681b      	ldr	r3, [r3, #0]
   1b5cc:	2296      	movs	r2, #150	; 0x96
   1b5ce:	0052      	lsls	r2, r2, #1
   1b5d0:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1b5d2:	4b5d      	ldr	r3, [pc, #372]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5d4:	681b      	ldr	r3, [r3, #0]
   1b5d6:	4a62      	ldr	r2, [pc, #392]	; (1b760 <prvTraceInitTraceData+0x1f4>)
   1b5d8:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1b5da:	4b5b      	ldr	r3, [pc, #364]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5dc:	681b      	ldr	r3, [r3, #0]
   1b5de:	2200      	movs	r2, #0
   1b5e0:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1b5e2:	4b59      	ldr	r3, [pc, #356]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5e4:	681b      	ldr	r3, [r3, #0]
   1b5e6:	2200      	movs	r2, #0
   1b5e8:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1b5ea:	4b5e      	ldr	r3, [pc, #376]	; (1b764 <prvTraceInitTraceData+0x1f8>)
   1b5ec:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1b5ee:	4b56      	ldr	r3, [pc, #344]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5f0:	681b      	ldr	r3, [r3, #0]
   1b5f2:	4a5d      	ldr	r2, [pc, #372]	; (1b768 <prvTraceInitTraceData+0x1fc>)
   1b5f4:	495d      	ldr	r1, [pc, #372]	; (1b76c <prvTraceInitTraceData+0x200>)
   1b5f6:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1b5f8:	4b53      	ldr	r3, [pc, #332]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b5fa:	681a      	ldr	r2, [r3, #0]
   1b5fc:	23ac      	movs	r3, #172	; 0xac
   1b5fe:	00db      	lsls	r3, r3, #3
   1b600:	21c8      	movs	r1, #200	; 0xc8
   1b602:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1b604:	4b50      	ldr	r3, [pc, #320]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b606:	681b      	ldr	r3, [r3, #0]
   1b608:	4a59      	ldr	r2, [pc, #356]	; (1b770 <prvTraceInitTraceData+0x204>)
   1b60a:	2101      	movs	r1, #1
   1b60c:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1b60e:	4b4e      	ldr	r3, [pc, #312]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b610:	681a      	ldr	r2, [r3, #0]
   1b612:	23d7      	movs	r3, #215	; 0xd7
   1b614:	00db      	lsls	r3, r3, #3
   1b616:	4957      	ldr	r1, [pc, #348]	; (1b774 <prvTraceInitTraceData+0x208>)
   1b618:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1b61a:	4b4b      	ldr	r3, [pc, #300]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b61c:	681b      	ldr	r3, [r3, #0]
   1b61e:	4a56      	ldr	r2, [pc, #344]	; (1b778 <prvTraceInitTraceData+0x20c>)
   1b620:	4694      	mov	ip, r2
   1b622:	4463      	add	r3, ip
   1b624:	4955      	ldr	r1, [pc, #340]	; (1b77c <prvTraceInitTraceData+0x210>)
   1b626:	2250      	movs	r2, #80	; 0x50
   1b628:	0018      	movs	r0, r3
   1b62a:	4b55      	ldr	r3, [pc, #340]	; (1b780 <prvTraceInitTraceData+0x214>)
   1b62c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1b62e:	4b46      	ldr	r3, [pc, #280]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b630:	681b      	ldr	r3, [r3, #0]
   1b632:	4a54      	ldr	r2, [pc, #336]	; (1b784 <prvTraceInitTraceData+0x218>)
   1b634:	4954      	ldr	r1, [pc, #336]	; (1b788 <prvTraceInitTraceData+0x21c>)
   1b636:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1b638:	4b43      	ldr	r3, [pc, #268]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b63a:	681b      	ldr	r3, [r3, #0]
   1b63c:	4a53      	ldr	r2, [pc, #332]	; (1b78c <prvTraceInitTraceData+0x220>)
   1b63e:	210a      	movs	r1, #10
   1b640:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1b642:	4b41      	ldr	r3, [pc, #260]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b644:	681b      	ldr	r3, [r3, #0]
   1b646:	4a52      	ldr	r2, [pc, #328]	; (1b790 <prvTraceInitTraceData+0x224>)
   1b648:	210b      	movs	r1, #11
   1b64a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1b64c:	4b3e      	ldr	r3, [pc, #248]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b64e:	681b      	ldr	r3, [r3, #0]
   1b650:	4a50      	ldr	r2, [pc, #320]	; (1b794 <prvTraceInitTraceData+0x228>)
   1b652:	210c      	movs	r1, #12
   1b654:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1b656:	4b3c      	ldr	r3, [pc, #240]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b658:	681b      	ldr	r3, [r3, #0]
   1b65a:	4a4f      	ldr	r2, [pc, #316]	; (1b798 <prvTraceInitTraceData+0x22c>)
   1b65c:	210d      	movs	r1, #13
   1b65e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1b660:	4b39      	ldr	r3, [pc, #228]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b662:	681b      	ldr	r3, [r3, #0]
   1b664:	4a4d      	ldr	r2, [pc, #308]	; (1b79c <prvTraceInitTraceData+0x230>)
   1b666:	2171      	movs	r1, #113	; 0x71
   1b668:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1b66a:	4b37      	ldr	r3, [pc, #220]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b66c:	681b      	ldr	r3, [r3, #0]
   1b66e:	4a4c      	ldr	r2, [pc, #304]	; (1b7a0 <prvTraceInitTraceData+0x234>)
   1b670:	2172      	movs	r1, #114	; 0x72
   1b672:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1b674:	4b34      	ldr	r3, [pc, #208]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b676:	681b      	ldr	r3, [r3, #0]
   1b678:	4a4a      	ldr	r2, [pc, #296]	; (1b7a4 <prvTraceInitTraceData+0x238>)
   1b67a:	2173      	movs	r1, #115	; 0x73
   1b67c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1b67e:	4b32      	ldr	r3, [pc, #200]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b680:	681b      	ldr	r3, [r3, #0]
   1b682:	4a49      	ldr	r2, [pc, #292]	; (1b7a8 <prvTraceInitTraceData+0x23c>)
   1b684:	2174      	movs	r1, #116	; 0x74
   1b686:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1b688:	4b2f      	ldr	r3, [pc, #188]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b68a:	681b      	ldr	r3, [r3, #0]
   1b68c:	4a47      	ldr	r2, [pc, #284]	; (1b7ac <prvTraceInitTraceData+0x240>)
   1b68e:	21f1      	movs	r1, #241	; 0xf1
   1b690:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1b692:	4b2d      	ldr	r3, [pc, #180]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b694:	681b      	ldr	r3, [r3, #0]
   1b696:	4a46      	ldr	r2, [pc, #280]	; (1b7b0 <prvTraceInitTraceData+0x244>)
   1b698:	21f2      	movs	r1, #242	; 0xf2
   1b69a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1b69c:	4b2a      	ldr	r3, [pc, #168]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b69e:	681b      	ldr	r3, [r3, #0]
   1b6a0:	4a44      	ldr	r2, [pc, #272]	; (1b7b4 <prvTraceInitTraceData+0x248>)
   1b6a2:	21f3      	movs	r1, #243	; 0xf3
   1b6a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1b6a6:	4b28      	ldr	r3, [pc, #160]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6a8:	681b      	ldr	r3, [r3, #0]
   1b6aa:	4a43      	ldr	r2, [pc, #268]	; (1b7b8 <prvTraceInitTraceData+0x24c>)
   1b6ac:	21f4      	movs	r1, #244	; 0xf4
   1b6ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1b6b0:	4b42      	ldr	r3, [pc, #264]	; (1b7bc <prvTraceInitTraceData+0x250>)
   1b6b2:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1b6b4:	4b24      	ldr	r3, [pc, #144]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6b6:	681b      	ldr	r3, [r3, #0]
   1b6b8:	22f4      	movs	r2, #244	; 0xf4
   1b6ba:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1b6bc:	4b22      	ldr	r3, [pc, #136]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6be:	681b      	ldr	r3, [r3, #0]
   1b6c0:	22f3      	movs	r2, #243	; 0xf3
   1b6c2:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1b6c4:	4b20      	ldr	r3, [pc, #128]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6c6:	681b      	ldr	r3, [r3, #0]
   1b6c8:	22f2      	movs	r2, #242	; 0xf2
   1b6ca:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1b6cc:	4b1e      	ldr	r3, [pc, #120]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6ce:	681b      	ldr	r3, [r3, #0]
   1b6d0:	22f1      	movs	r2, #241	; 0xf1
   1b6d2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1b6d4:	4b1c      	ldr	r3, [pc, #112]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6d6:	681b      	ldr	r3, [r3, #0]
   1b6d8:	2274      	movs	r2, #116	; 0x74
   1b6da:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1b6dc:	4b1a      	ldr	r3, [pc, #104]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6de:	681b      	ldr	r3, [r3, #0]
   1b6e0:	2273      	movs	r2, #115	; 0x73
   1b6e2:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1b6e4:	4b18      	ldr	r3, [pc, #96]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6e6:	681b      	ldr	r3, [r3, #0]
   1b6e8:	2272      	movs	r2, #114	; 0x72
   1b6ea:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1b6ec:	4b16      	ldr	r3, [pc, #88]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6ee:	681b      	ldr	r3, [r3, #0]
   1b6f0:	2271      	movs	r2, #113	; 0x71
   1b6f2:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1b6f4:	4b14      	ldr	r3, [pc, #80]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6f6:	681b      	ldr	r3, [r3, #0]
   1b6f8:	2204      	movs	r2, #4
   1b6fa:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1b6fc:	4b12      	ldr	r3, [pc, #72]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b6fe:	681b      	ldr	r3, [r3, #0]
   1b700:	2203      	movs	r2, #3
   1b702:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1b704:	4b10      	ldr	r3, [pc, #64]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b706:	681b      	ldr	r3, [r3, #0]
   1b708:	2202      	movs	r2, #2
   1b70a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1b70c:	4b0e      	ldr	r3, [pc, #56]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b70e:	681b      	ldr	r3, [r3, #0]
   1b710:	2201      	movs	r2, #1
   1b712:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1b714:	4b2a      	ldr	r3, [pc, #168]	; (1b7c0 <prvTraceInitTraceData+0x254>)
   1b716:	681b      	ldr	r3, [r3, #0]
   1b718:	2b00      	cmp	r3, #0
   1b71a:	d012      	beq.n	1b742 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1b71c:	4b0a      	ldr	r3, [pc, #40]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b71e:	681b      	ldr	r3, [r3, #0]
   1b720:	4a15      	ldr	r2, [pc, #84]	; (1b778 <prvTraceInitTraceData+0x20c>)
   1b722:	1898      	adds	r0, r3, r2
   1b724:	4b26      	ldr	r3, [pc, #152]	; (1b7c0 <prvTraceInitTraceData+0x254>)
   1b726:	681b      	ldr	r3, [r3, #0]
   1b728:	2250      	movs	r2, #80	; 0x50
   1b72a:	0019      	movs	r1, r3
   1b72c:	4b14      	ldr	r3, [pc, #80]	; (1b780 <prvTraceInitTraceData+0x214>)
   1b72e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1b730:	4b05      	ldr	r3, [pc, #20]	; (1b748 <prvTraceInitTraceData+0x1dc>)
   1b732:	681b      	ldr	r3, [r3, #0]
   1b734:	4a23      	ldr	r2, [pc, #140]	; (1b7c4 <prvTraceInitTraceData+0x258>)
   1b736:	2101      	movs	r1, #1
   1b738:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1b73a:	4b23      	ldr	r3, [pc, #140]	; (1b7c8 <prvTraceInitTraceData+0x25c>)
   1b73c:	4798      	blx	r3
   1b73e:	e000      	b.n	1b742 <prvTraceInitTraceData+0x1d6>
			return;
   1b740:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1b742:	46bd      	mov	sp, r7
   1b744:	bd80      	pop	{r7, pc}
   1b746:	46c0      	nop			; (mov r8, r8)
   1b748:	20000c84 	.word	0x20000c84
   1b74c:	20004888 	.word	0x20004888
   1b750:	e000e018 	.word	0xe000e018
   1b754:	20005458 	.word	0x20005458
   1b758:	0003781f 	.word	0x0003781f
   1b75c:	00001aa1 	.word	0x00001aa1
   1b760:	f0f0f0f0 	.word	0xf0f0f0f0
   1b764:	0001a6d1 	.word	0x0001a6d1
   1b768:	0000055c 	.word	0x0000055c
   1b76c:	f1f1f1f1 	.word	0xf1f1f1f1
   1b770:	00000564 	.word	0x00000564
   1b774:	f2f2f2f2 	.word	0xf2f2f2f2
   1b778:	000006bc 	.word	0x000006bc
   1b77c:	0003add0 	.word	0x0003add0
   1b780:	0001bae1 	.word	0x0001bae1
   1b784:	0000070c 	.word	0x0000070c
   1b788:	f3f3f3f3 	.word	0xf3f3f3f3
   1b78c:	00000bc4 	.word	0x00000bc4
   1b790:	00000bc5 	.word	0x00000bc5
   1b794:	00000bc6 	.word	0x00000bc6
   1b798:	00000bc7 	.word	0x00000bc7
   1b79c:	00000bc8 	.word	0x00000bc8
   1b7a0:	00000bc9 	.word	0x00000bc9
   1b7a4:	00000bca 	.word	0x00000bca
   1b7a8:	00000bcb 	.word	0x00000bcb
   1b7ac:	00000bcc 	.word	0x00000bcc
   1b7b0:	00000bcd 	.word	0x00000bcd
   1b7b4:	00000bce 	.word	0x00000bce
   1b7b8:	00000bcf 	.word	0x00000bcf
   1b7bc:	0001a871 	.word	0x0001a871
   1b7c0:	20000be4 	.word	0x20000be4
   1b7c4:	000006b4 	.word	0x000006b4
   1b7c8:	0001aad9 	.word	0x0001aad9

0001b7cc <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1b7cc:	b580      	push	{r7, lr}
   1b7ce:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1b7d0:	4b10      	ldr	r3, [pc, #64]	; (1b814 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b7d2:	681b      	ldr	r3, [r3, #0]
   1b7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b7d6:	2b00      	cmp	r3, #0
   1b7d8:	d101      	bne.n	1b7de <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1b7da:	2300      	movs	r3, #0
   1b7dc:	e017      	b.n	1b80e <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1b7de:	4b0d      	ldr	r3, [pc, #52]	; (1b814 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b7e0:	681b      	ldr	r3, [r3, #0]
   1b7e2:	69da      	ldr	r2, [r3, #28]
   1b7e4:	232c      	movs	r3, #44	; 0x2c
   1b7e6:	33ff      	adds	r3, #255	; 0xff
   1b7e8:	429a      	cmp	r2, r3
   1b7ea:	d905      	bls.n	1b7f8 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1b7ec:	4b0a      	ldr	r3, [pc, #40]	; (1b818 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1b7ee:	0018      	movs	r0, r3
   1b7f0:	4b0a      	ldr	r3, [pc, #40]	; (1b81c <prvTraceNextFreeEventBufferSlot+0x50>)
   1b7f2:	4798      	blx	r3
		return NULL;
   1b7f4:	2300      	movs	r3, #0
   1b7f6:	e00a      	b.n	1b80e <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1b7f8:	4b06      	ldr	r3, [pc, #24]	; (1b814 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b7fa:	681a      	ldr	r2, [r3, #0]
   1b7fc:	4b05      	ldr	r3, [pc, #20]	; (1b814 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b7fe:	681b      	ldr	r3, [r3, #0]
   1b800:	69db      	ldr	r3, [r3, #28]
   1b802:	009b      	lsls	r3, r3, #2
   1b804:	21e2      	movs	r1, #226	; 0xe2
   1b806:	00c9      	lsls	r1, r1, #3
   1b808:	468c      	mov	ip, r1
   1b80a:	4463      	add	r3, ip
   1b80c:	18d3      	adds	r3, r2, r3
}
   1b80e:	0018      	movs	r0, r3
   1b810:	46bd      	mov	sp, r7
   1b812:	bd80      	pop	{r7, pc}
   1b814:	20000c84 	.word	0x20000c84
   1b818:	0003ade4 	.word	0x0003ade4
   1b81c:	0001bc15 	.word	0x0001bc15

0001b820 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1b820:	b580      	push	{r7, lr}
   1b822:	b082      	sub	sp, #8
   1b824:	af00      	add	r7, sp, #0
   1b826:	0002      	movs	r2, r0
   1b828:	1dfb      	adds	r3, r7, #7
   1b82a:	701a      	strb	r2, [r3, #0]
   1b82c:	1dbb      	adds	r3, r7, #6
   1b82e:	1c0a      	adds	r2, r1, #0
   1b830:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1b832:	1dbb      	adds	r3, r7, #6
   1b834:	781b      	ldrb	r3, [r3, #0]
   1b836:	2b08      	cmp	r3, #8
   1b838:	d905      	bls.n	1b846 <uiIndexOfObject+0x26>
   1b83a:	4b2a      	ldr	r3, [pc, #168]	; (1b8e4 <uiIndexOfObject+0xc4>)
   1b83c:	0018      	movs	r0, r3
   1b83e:	4b2a      	ldr	r3, [pc, #168]	; (1b8e8 <uiIndexOfObject+0xc8>)
   1b840:	4798      	blx	r3
   1b842:	2300      	movs	r3, #0
   1b844:	e049      	b.n	1b8da <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1b846:	1dfb      	adds	r3, r7, #7
   1b848:	781b      	ldrb	r3, [r3, #0]
   1b84a:	2b00      	cmp	r3, #0
   1b84c:	d00b      	beq.n	1b866 <uiIndexOfObject+0x46>
   1b84e:	4b27      	ldr	r3, [pc, #156]	; (1b8ec <uiIndexOfObject+0xcc>)
   1b850:	681a      	ldr	r2, [r3, #0]
   1b852:	1dbb      	adds	r3, r7, #6
   1b854:	781b      	ldrb	r3, [r3, #0]
   1b856:	2164      	movs	r1, #100	; 0x64
   1b858:	18d3      	adds	r3, r2, r3
   1b85a:	185b      	adds	r3, r3, r1
   1b85c:	781b      	ldrb	r3, [r3, #0]
   1b85e:	1dfa      	adds	r2, r7, #7
   1b860:	7812      	ldrb	r2, [r2, #0]
   1b862:	429a      	cmp	r2, r3
   1b864:	d905      	bls.n	1b872 <uiIndexOfObject+0x52>
   1b866:	4b22      	ldr	r3, [pc, #136]	; (1b8f0 <uiIndexOfObject+0xd0>)
   1b868:	0018      	movs	r0, r3
   1b86a:	4b1f      	ldr	r3, [pc, #124]	; (1b8e8 <uiIndexOfObject+0xc8>)
   1b86c:	4798      	blx	r3
   1b86e:	2300      	movs	r3, #0
   1b870:	e033      	b.n	1b8da <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1b872:	1dbb      	adds	r3, r7, #6
   1b874:	781b      	ldrb	r3, [r3, #0]
   1b876:	2b08      	cmp	r3, #8
   1b878:	d82a      	bhi.n	1b8d0 <uiIndexOfObject+0xb0>
   1b87a:	1dfb      	adds	r3, r7, #7
   1b87c:	781b      	ldrb	r3, [r3, #0]
   1b87e:	2b00      	cmp	r3, #0
   1b880:	d026      	beq.n	1b8d0 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1b882:	4b1a      	ldr	r3, [pc, #104]	; (1b8ec <uiIndexOfObject+0xcc>)
   1b884:	681a      	ldr	r2, [r3, #0]
   1b886:	1dbb      	adds	r3, r7, #6
   1b888:	781b      	ldrb	r3, [r3, #0]
   1b88a:	2164      	movs	r1, #100	; 0x64
   1b88c:	18d3      	adds	r3, r2, r3
   1b88e:	185b      	adds	r3, r3, r1
   1b890:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1b892:	1dfa      	adds	r2, r7, #7
   1b894:	7812      	ldrb	r2, [r2, #0]
   1b896:	429a      	cmp	r2, r3
   1b898:	d81a      	bhi.n	1b8d0 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1b89a:	4b14      	ldr	r3, [pc, #80]	; (1b8ec <uiIndexOfObject+0xcc>)
   1b89c:	681a      	ldr	r2, [r3, #0]
   1b89e:	1dbb      	adds	r3, r7, #6
   1b8a0:	781b      	ldrb	r3, [r3, #0]
   1b8a2:	3340      	adds	r3, #64	; 0x40
   1b8a4:	005b      	lsls	r3, r3, #1
   1b8a6:	18d3      	adds	r3, r2, r3
   1b8a8:	3308      	adds	r3, #8
   1b8aa:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1b8ac:	4b0f      	ldr	r3, [pc, #60]	; (1b8ec <uiIndexOfObject+0xcc>)
   1b8ae:	6819      	ldr	r1, [r3, #0]
   1b8b0:	1dbb      	adds	r3, r7, #6
   1b8b2:	781b      	ldrb	r3, [r3, #0]
   1b8b4:	207c      	movs	r0, #124	; 0x7c
   1b8b6:	18cb      	adds	r3, r1, r3
   1b8b8:	181b      	adds	r3, r3, r0
   1b8ba:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1b8bc:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1b8be:	1df9      	adds	r1, r7, #7
   1b8c0:	7809      	ldrb	r1, [r1, #0]
   1b8c2:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1b8c4:	b289      	uxth	r1, r1
   1b8c6:	434b      	muls	r3, r1
   1b8c8:	b29b      	uxth	r3, r3
   1b8ca:	18d3      	adds	r3, r2, r3
   1b8cc:	b29b      	uxth	r3, r3
   1b8ce:	e004      	b.n	1b8da <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1b8d0:	4b08      	ldr	r3, [pc, #32]	; (1b8f4 <uiIndexOfObject+0xd4>)
   1b8d2:	0018      	movs	r0, r3
   1b8d4:	4b04      	ldr	r3, [pc, #16]	; (1b8e8 <uiIndexOfObject+0xc8>)
   1b8d6:	4798      	blx	r3
	return 0;
   1b8d8:	2300      	movs	r3, #0
}
   1b8da:	0018      	movs	r0, r3
   1b8dc:	46bd      	mov	sp, r7
   1b8de:	b002      	add	sp, #8
   1b8e0:	bd80      	pop	{r7, pc}
   1b8e2:	46c0      	nop			; (mov r8, r8)
   1b8e4:	0003ae0c 	.word	0x0003ae0c
   1b8e8:	0001bc15 	.word	0x0001bc15
   1b8ec:	20000c84 	.word	0x20000c84
   1b8f0:	0003ae4c 	.word	0x0003ae4c
   1b8f4:	0003ae8c 	.word	0x0003ae8c

0001b8f8 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1b8f8:	b580      	push	{r7, lr}
   1b8fa:	b088      	sub	sp, #32
   1b8fc:	af00      	add	r7, sp, #0
   1b8fe:	0002      	movs	r2, r0
   1b900:	1dfb      	adds	r3, r7, #7
   1b902:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1b904:	4b5a      	ldr	r3, [pc, #360]	; (1ba70 <prvTraceGetObjectHandle+0x178>)
   1b906:	681b      	ldr	r3, [r3, #0]
   1b908:	2b00      	cmp	r3, #0
   1b90a:	d105      	bne.n	1b918 <prvTraceGetObjectHandle+0x20>
   1b90c:	4b59      	ldr	r3, [pc, #356]	; (1ba74 <prvTraceGetObjectHandle+0x17c>)
   1b90e:	0018      	movs	r0, r3
   1b910:	4b59      	ldr	r3, [pc, #356]	; (1ba78 <prvTraceGetObjectHandle+0x180>)
   1b912:	4798      	blx	r3
   1b914:	2300      	movs	r3, #0
   1b916:	e0a7      	b.n	1ba68 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1b918:	1dfb      	adds	r3, r7, #7
   1b91a:	781b      	ldrb	r3, [r3, #0]
   1b91c:	2b08      	cmp	r3, #8
   1b91e:	d905      	bls.n	1b92c <prvTraceGetObjectHandle+0x34>
   1b920:	4b56      	ldr	r3, [pc, #344]	; (1ba7c <prvTraceGetObjectHandle+0x184>)
   1b922:	0018      	movs	r0, r3
   1b924:	4b54      	ldr	r3, [pc, #336]	; (1ba78 <prvTraceGetObjectHandle+0x180>)
   1b926:	4798      	blx	r3
   1b928:	2300      	movs	r3, #0
   1b92a:	e09d      	b.n	1ba68 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b92c:	f3ef 8310 	mrs	r3, PRIMASK
   1b930:	60fb      	str	r3, [r7, #12]
  return(result);
   1b932:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1b934:	61bb      	str	r3, [r7, #24]
   1b936:	2301      	movs	r3, #1
   1b938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b93a:	693b      	ldr	r3, [r7, #16]
   1b93c:	f383 8810 	msr	PRIMASK, r3
   1b940:	4b4f      	ldr	r3, [pc, #316]	; (1ba80 <prvTraceGetObjectHandle+0x188>)
   1b942:	681b      	ldr	r3, [r3, #0]
   1b944:	1c5a      	adds	r2, r3, #1
   1b946:	4b4e      	ldr	r3, [pc, #312]	; (1ba80 <prvTraceGetObjectHandle+0x188>)
   1b948:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1b94a:	1dfb      	adds	r3, r7, #7
   1b94c:	781a      	ldrb	r2, [r3, #0]
   1b94e:	4b4d      	ldr	r3, [pc, #308]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b950:	0052      	lsls	r2, r2, #1
   1b952:	5ad3      	ldrh	r3, [r2, r3]
   1b954:	001a      	movs	r2, r3
   1b956:	4b4c      	ldr	r3, [pc, #304]	; (1ba88 <prvTraceGetObjectHandle+0x190>)
   1b958:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1b95a:	4b4b      	ldr	r3, [pc, #300]	; (1ba88 <prvTraceGetObjectHandle+0x190>)
   1b95c:	681b      	ldr	r3, [r3, #0]
   1b95e:	4a49      	ldr	r2, [pc, #292]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b960:	2148      	movs	r1, #72	; 0x48
   1b962:	18d3      	adds	r3, r2, r3
   1b964:	185b      	adds	r3, r3, r1
   1b966:	781b      	ldrb	r3, [r3, #0]
   1b968:	2b00      	cmp	r3, #0
   1b96a:	d117      	bne.n	1b99c <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1b96c:	4b46      	ldr	r3, [pc, #280]	; (1ba88 <prvTraceGetObjectHandle+0x190>)
   1b96e:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1b970:	4b45      	ldr	r3, [pc, #276]	; (1ba88 <prvTraceGetObjectHandle+0x190>)
   1b972:	681b      	ldr	r3, [r3, #0]
   1b974:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1b976:	1dfb      	adds	r3, r7, #7
   1b978:	781b      	ldrb	r3, [r3, #0]
   1b97a:	4842      	ldr	r0, [pc, #264]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b97c:	3308      	adds	r3, #8
   1b97e:	005b      	lsls	r3, r3, #1
   1b980:	18c3      	adds	r3, r0, r3
   1b982:	3302      	adds	r3, #2
   1b984:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1b986:	b2db      	uxtb	r3, r3
   1b988:	1acb      	subs	r3, r1, r3
   1b98a:	b2db      	uxtb	r3, r3
   1b98c:	3301      	adds	r3, #1
   1b98e:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1b990:	4b3c      	ldr	r3, [pc, #240]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b992:	2148      	movs	r1, #72	; 0x48
   1b994:	189b      	adds	r3, r3, r2
   1b996:	185b      	adds	r3, r3, r1
   1b998:	1c02      	adds	r2, r0, #0
   1b99a:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1b99c:	4b3a      	ldr	r3, [pc, #232]	; (1ba88 <prvTraceGetObjectHandle+0x190>)
   1b99e:	681a      	ldr	r2, [r3, #0]
   1b9a0:	231f      	movs	r3, #31
   1b9a2:	18fb      	adds	r3, r7, r3
   1b9a4:	4937      	ldr	r1, [pc, #220]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b9a6:	2048      	movs	r0, #72	; 0x48
   1b9a8:	188a      	adds	r2, r1, r2
   1b9aa:	1812      	adds	r2, r2, r0
   1b9ac:	7812      	ldrb	r2, [r2, #0]
   1b9ae:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1b9b0:	1dfb      	adds	r3, r7, #7
   1b9b2:	781a      	ldrb	r2, [r3, #0]
   1b9b4:	4b33      	ldr	r3, [pc, #204]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b9b6:	0052      	lsls	r2, r2, #1
   1b9b8:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1b9ba:	1dfb      	adds	r3, r7, #7
   1b9bc:	781b      	ldrb	r3, [r3, #0]
   1b9be:	4931      	ldr	r1, [pc, #196]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b9c0:	3310      	adds	r3, #16
   1b9c2:	005b      	lsls	r3, r3, #1
   1b9c4:	18cb      	adds	r3, r1, r3
   1b9c6:	3304      	adds	r3, #4
   1b9c8:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1b9ca:	429a      	cmp	r2, r3
   1b9cc:	d90d      	bls.n	1b9ea <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1b9ce:	1dfb      	adds	r3, r7, #7
   1b9d0:	781b      	ldrb	r3, [r3, #0]
   1b9d2:	0018      	movs	r0, r3
   1b9d4:	4b2d      	ldr	r3, [pc, #180]	; (1ba8c <prvTraceGetObjectHandle+0x194>)
   1b9d6:	4798      	blx	r3
   1b9d8:	0003      	movs	r3, r0
   1b9da:	0018      	movs	r0, r3
   1b9dc:	4b26      	ldr	r3, [pc, #152]	; (1ba78 <prvTraceGetObjectHandle+0x180>)
   1b9de:	4798      	blx	r3
		handle = 0;
   1b9e0:	231f      	movs	r3, #31
   1b9e2:	18fb      	adds	r3, r7, r3
   1b9e4:	2200      	movs	r2, #0
   1b9e6:	701a      	strb	r2, [r3, #0]
   1b9e8:	e031      	b.n	1ba4e <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1b9ea:	1dfb      	adds	r3, r7, #7
   1b9ec:	781b      	ldrb	r3, [r3, #0]
   1b9ee:	4a25      	ldr	r2, [pc, #148]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b9f0:	0059      	lsls	r1, r3, #1
   1b9f2:	5a8a      	ldrh	r2, [r1, r2]
   1b9f4:	3201      	adds	r2, #1
   1b9f6:	b291      	uxth	r1, r2
   1b9f8:	4a22      	ldr	r2, [pc, #136]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1b9fa:	005b      	lsls	r3, r3, #1
   1b9fc:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1b9fe:	1dfb      	adds	r3, r7, #7
   1ba00:	781a      	ldrb	r2, [r3, #0]
   1ba02:	4b20      	ldr	r3, [pc, #128]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1ba04:	0052      	lsls	r2, r2, #1
   1ba06:	5ad3      	ldrh	r3, [r2, r3]
   1ba08:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1ba0a:	1dfb      	adds	r3, r7, #7
   1ba0c:	781b      	ldrb	r3, [r3, #0]
   1ba0e:	4a1d      	ldr	r2, [pc, #116]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1ba10:	3308      	adds	r3, #8
   1ba12:	005b      	lsls	r3, r3, #1
   1ba14:	18d3      	adds	r3, r2, r3
   1ba16:	3302      	adds	r3, #2
   1ba18:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1ba1a:	1acb      	subs	r3, r1, r3
   1ba1c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1ba1e:	1dfb      	adds	r3, r7, #7
   1ba20:	781b      	ldrb	r3, [r3, #0]
   1ba22:	4a18      	ldr	r2, [pc, #96]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1ba24:	3318      	adds	r3, #24
   1ba26:	005b      	lsls	r3, r3, #1
   1ba28:	18d3      	adds	r3, r2, r3
   1ba2a:	3306      	adds	r3, #6
   1ba2c:	881b      	ldrh	r3, [r3, #0]
   1ba2e:	001a      	movs	r2, r3
		if (hndCount >
   1ba30:	697b      	ldr	r3, [r7, #20]
   1ba32:	429a      	cmp	r2, r3
   1ba34:	da0b      	bge.n	1ba4e <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1ba36:	1dfb      	adds	r3, r7, #7
   1ba38:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1ba3a:	697a      	ldr	r2, [r7, #20]
   1ba3c:	b2d2      	uxtb	r2, r2
   1ba3e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1ba40:	4a10      	ldr	r2, [pc, #64]	; (1ba84 <prvTraceGetObjectHandle+0x18c>)
   1ba42:	3318      	adds	r3, #24
   1ba44:	005b      	lsls	r3, r3, #1
   1ba46:	18d3      	adds	r3, r2, r3
   1ba48:	3306      	adds	r3, #6
   1ba4a:	1c0a      	adds	r2, r1, #0
   1ba4c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1ba4e:	4b0c      	ldr	r3, [pc, #48]	; (1ba80 <prvTraceGetObjectHandle+0x188>)
   1ba50:	681b      	ldr	r3, [r3, #0]
   1ba52:	1e5a      	subs	r2, r3, #1
   1ba54:	4b0a      	ldr	r3, [pc, #40]	; (1ba80 <prvTraceGetObjectHandle+0x188>)
   1ba56:	601a      	str	r2, [r3, #0]
   1ba58:	69bb      	ldr	r3, [r7, #24]
   1ba5a:	60bb      	str	r3, [r7, #8]
   1ba5c:	68bb      	ldr	r3, [r7, #8]
   1ba5e:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1ba62:	231f      	movs	r3, #31
   1ba64:	18fb      	adds	r3, r7, r3
   1ba66:	781b      	ldrb	r3, [r3, #0]
}
   1ba68:	0018      	movs	r0, r3
   1ba6a:	46bd      	mov	sp, r7
   1ba6c:	b008      	add	sp, #32
   1ba6e:	bd80      	pop	{r7, pc}
   1ba70:	20000c84 	.word	0x20000c84
   1ba74:	0003a2ec 	.word	0x0003a2ec
   1ba78:	0001bc15 	.word	0x0001bc15
   1ba7c:	0003aecc 	.word	0x0003aecc
   1ba80:	20000bdc 	.word	0x20000bdc
   1ba84:	20000bf4 	.word	0x20000bf4
   1ba88:	20000c88 	.word	0x20000c88
   1ba8c:	0001a935 	.word	0x0001a935

0001ba90 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1ba90:	b590      	push	{r4, r7, lr}
   1ba92:	b085      	sub	sp, #20
   1ba94:	af00      	add	r7, sp, #0
   1ba96:	0002      	movs	r2, r0
   1ba98:	1dfb      	adds	r3, r7, #7
   1ba9a:	701a      	strb	r2, [r3, #0]
   1ba9c:	1dbb      	adds	r3, r7, #6
   1ba9e:	1c0a      	adds	r2, r1, #0
   1baa0:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1baa2:	230e      	movs	r3, #14
   1baa4:	18fc      	adds	r4, r7, r3
   1baa6:	1dfb      	adds	r3, r7, #7
   1baa8:	781a      	ldrb	r2, [r3, #0]
   1baaa:	1dbb      	adds	r3, r7, #6
   1baac:	781b      	ldrb	r3, [r3, #0]
   1baae:	0011      	movs	r1, r2
   1bab0:	0018      	movs	r0, r3
   1bab2:	4b09      	ldr	r3, [pc, #36]	; (1bad8 <prvMarkObjectAsUsed+0x48>)
   1bab4:	4798      	blx	r3
   1bab6:	0003      	movs	r3, r0
   1bab8:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1baba:	4b08      	ldr	r3, [pc, #32]	; (1badc <prvMarkObjectAsUsed+0x4c>)
   1babc:	681a      	ldr	r2, [r3, #0]
   1babe:	230e      	movs	r3, #14
   1bac0:	18fb      	adds	r3, r7, r3
   1bac2:	881b      	ldrh	r3, [r3, #0]
   1bac4:	219c      	movs	r1, #156	; 0x9c
   1bac6:	18d3      	adds	r3, r2, r3
   1bac8:	185b      	adds	r3, r3, r1
   1baca:	2201      	movs	r2, #1
   1bacc:	701a      	strb	r2, [r3, #0]
}
   1bace:	46c0      	nop			; (mov r8, r8)
   1bad0:	46bd      	mov	sp, r7
   1bad2:	b005      	add	sp, #20
   1bad4:	bd90      	pop	{r4, r7, pc}
   1bad6:	46c0      	nop			; (mov r8, r8)
   1bad8:	0001b821 	.word	0x0001b821
   1badc:	20000c84 	.word	0x20000c84

0001bae0 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1bae0:	b580      	push	{r7, lr}
   1bae2:	b086      	sub	sp, #24
   1bae4:	af00      	add	r7, sp, #0
   1bae6:	60f8      	str	r0, [r7, #12]
   1bae8:	60b9      	str	r1, [r7, #8]
   1baea:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1baec:	2300      	movs	r3, #0
   1baee:	617b      	str	r3, [r7, #20]
   1baf0:	e010      	b.n	1bb14 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1baf2:	68fa      	ldr	r2, [r7, #12]
   1baf4:	697b      	ldr	r3, [r7, #20]
   1baf6:	18d3      	adds	r3, r2, r3
   1baf8:	68b9      	ldr	r1, [r7, #8]
   1bafa:	697a      	ldr	r2, [r7, #20]
   1bafc:	188a      	adds	r2, r1, r2
   1bafe:	7812      	ldrb	r2, [r2, #0]
   1bb00:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1bb02:	68ba      	ldr	r2, [r7, #8]
   1bb04:	697b      	ldr	r3, [r7, #20]
   1bb06:	18d3      	adds	r3, r2, r3
   1bb08:	781b      	ldrb	r3, [r3, #0]
   1bb0a:	2b00      	cmp	r3, #0
   1bb0c:	d007      	beq.n	1bb1e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1bb0e:	697b      	ldr	r3, [r7, #20]
   1bb10:	3301      	adds	r3, #1
   1bb12:	617b      	str	r3, [r7, #20]
   1bb14:	697a      	ldr	r2, [r7, #20]
   1bb16:	687b      	ldr	r3, [r7, #4]
   1bb18:	429a      	cmp	r2, r3
   1bb1a:	d3ea      	bcc.n	1baf2 <prvStrncpy+0x12>
			break;
	}
}
   1bb1c:	e000      	b.n	1bb20 <prvStrncpy+0x40>
			break;
   1bb1e:	46c0      	nop			; (mov r8, r8)
}
   1bb20:	46c0      	nop			; (mov r8, r8)
   1bb22:	46bd      	mov	sp, r7
   1bb24:	b006      	add	sp, #24
   1bb26:	bd80      	pop	{r7, pc}

0001bb28 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1bb28:	b580      	push	{r7, lr}
   1bb2a:	b082      	sub	sp, #8
   1bb2c:	af00      	add	r7, sp, #0
   1bb2e:	603a      	str	r2, [r7, #0]
   1bb30:	1dfb      	adds	r3, r7, #7
   1bb32:	1c02      	adds	r2, r0, #0
   1bb34:	701a      	strb	r2, [r3, #0]
   1bb36:	1dbb      	adds	r3, r7, #6
   1bb38:	1c0a      	adds	r2, r1, #0
   1bb3a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1bb3c:	683b      	ldr	r3, [r7, #0]
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d104      	bne.n	1bb4c <prvTraceSetObjectName+0x24>
   1bb42:	4b2a      	ldr	r3, [pc, #168]	; (1bbec <prvTraceSetObjectName+0xc4>)
   1bb44:	0018      	movs	r0, r3
   1bb46:	4b2a      	ldr	r3, [pc, #168]	; (1bbf0 <prvTraceSetObjectName+0xc8>)
   1bb48:	4798      	blx	r3
   1bb4a:	e04b      	b.n	1bbe4 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1bb4c:	1dfb      	adds	r3, r7, #7
   1bb4e:	781b      	ldrb	r3, [r3, #0]
   1bb50:	2b08      	cmp	r3, #8
   1bb52:	d904      	bls.n	1bb5e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1bb54:	4b27      	ldr	r3, [pc, #156]	; (1bbf4 <prvTraceSetObjectName+0xcc>)
   1bb56:	0018      	movs	r0, r3
   1bb58:	4b25      	ldr	r3, [pc, #148]	; (1bbf0 <prvTraceSetObjectName+0xc8>)
   1bb5a:	4798      	blx	r3
		return;
   1bb5c:	e042      	b.n	1bbe4 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1bb5e:	1dbb      	adds	r3, r7, #6
   1bb60:	781b      	ldrb	r3, [r3, #0]
   1bb62:	2b00      	cmp	r3, #0
   1bb64:	d104      	bne.n	1bb70 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1bb66:	4b24      	ldr	r3, [pc, #144]	; (1bbf8 <prvTraceSetObjectName+0xd0>)
   1bb68:	0018      	movs	r0, r3
   1bb6a:	4b21      	ldr	r3, [pc, #132]	; (1bbf0 <prvTraceSetObjectName+0xc8>)
   1bb6c:	4798      	blx	r3
		return;
   1bb6e:	e039      	b.n	1bbe4 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1bb70:	4b22      	ldr	r3, [pc, #136]	; (1bbfc <prvTraceSetObjectName+0xd4>)
   1bb72:	681a      	ldr	r2, [r3, #0]
   1bb74:	1dfb      	adds	r3, r7, #7
   1bb76:	781b      	ldrb	r3, [r3, #0]
   1bb78:	2164      	movs	r1, #100	; 0x64
   1bb7a:	18d3      	adds	r3, r2, r3
   1bb7c:	185b      	adds	r3, r3, r1
   1bb7e:	781b      	ldrb	r3, [r3, #0]
   1bb80:	1dba      	adds	r2, r7, #6
   1bb82:	7812      	ldrb	r2, [r2, #0]
   1bb84:	429a      	cmp	r2, r3
   1bb86:	d909      	bls.n	1bb9c <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1bb88:	1dfb      	adds	r3, r7, #7
   1bb8a:	781b      	ldrb	r3, [r3, #0]
   1bb8c:	0018      	movs	r0, r3
   1bb8e:	4b1c      	ldr	r3, [pc, #112]	; (1bc00 <prvTraceSetObjectName+0xd8>)
   1bb90:	4798      	blx	r3
   1bb92:	0003      	movs	r3, r0
   1bb94:	0018      	movs	r0, r3
   1bb96:	4b16      	ldr	r3, [pc, #88]	; (1bbf0 <prvTraceSetObjectName+0xc8>)
   1bb98:	4798      	blx	r3
   1bb9a:	e023      	b.n	1bbe4 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1bb9c:	1dfb      	adds	r3, r7, #7
   1bb9e:	781a      	ldrb	r2, [r3, #0]
   1bba0:	1dbb      	adds	r3, r7, #6
   1bba2:	781b      	ldrb	r3, [r3, #0]
   1bba4:	0011      	movs	r1, r2
   1bba6:	0018      	movs	r0, r3
   1bba8:	4b16      	ldr	r3, [pc, #88]	; (1bc04 <prvTraceSetObjectName+0xdc>)
   1bbaa:	4798      	blx	r3
   1bbac:	0003      	movs	r3, r0
   1bbae:	001a      	movs	r2, r3
   1bbb0:	4b15      	ldr	r3, [pc, #84]	; (1bc08 <prvTraceSetObjectName+0xe0>)
   1bbb2:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1bbb4:	4b15      	ldr	r3, [pc, #84]	; (1bc0c <prvTraceSetObjectName+0xe4>)
   1bbb6:	681b      	ldr	r3, [r3, #0]
   1bbb8:	2b00      	cmp	r3, #0
   1bbba:	d113      	bne.n	1bbe4 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1bbbc:	4b0f      	ldr	r3, [pc, #60]	; (1bbfc <prvTraceSetObjectName+0xd4>)
   1bbbe:	681a      	ldr	r2, [r3, #0]
   1bbc0:	4b11      	ldr	r3, [pc, #68]	; (1bc08 <prvTraceSetObjectName+0xe0>)
   1bbc2:	881b      	ldrh	r3, [r3, #0]
   1bbc4:	3398      	adds	r3, #152	; 0x98
   1bbc6:	18d3      	adds	r3, r2, r3
   1bbc8:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1bbca:	4b0c      	ldr	r3, [pc, #48]	; (1bbfc <prvTraceSetObjectName+0xd4>)
   1bbcc:	681a      	ldr	r2, [r3, #0]
   1bbce:	1dfb      	adds	r3, r7, #7
   1bbd0:	781b      	ldrb	r3, [r3, #0]
   1bbd2:	2170      	movs	r1, #112	; 0x70
   1bbd4:	18d3      	adds	r3, r2, r3
   1bbd6:	185b      	adds	r3, r3, r1
   1bbd8:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1bbda:	001a      	movs	r2, r3
   1bbdc:	683b      	ldr	r3, [r7, #0]
   1bbde:	0019      	movs	r1, r3
   1bbe0:	4b0b      	ldr	r3, [pc, #44]	; (1bc10 <prvTraceSetObjectName+0xe8>)
   1bbe2:	4798      	blx	r3
		}
	}
}
   1bbe4:	46bd      	mov	sp, r7
   1bbe6:	b002      	add	sp, #8
   1bbe8:	bd80      	pop	{r7, pc}
   1bbea:	46c0      	nop			; (mov r8, r8)
   1bbec:	0003afd0 	.word	0x0003afd0
   1bbf0:	0001bc15 	.word	0x0001bc15
   1bbf4:	0003b004 	.word	0x0003b004
   1bbf8:	0003b034 	.word	0x0003b034
   1bbfc:	20000c84 	.word	0x20000c84
   1bc00:	0001a935 	.word	0x0001a935
   1bc04:	0001b821 	.word	0x0001b821
   1bc08:	20000c8c 	.word	0x20000c8c
   1bc0c:	20000be4 	.word	0x20000be4
   1bc10:	0001bae1 	.word	0x0001bae1

0001bc14 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1bc14:	b580      	push	{r7, lr}
   1bc16:	b082      	sub	sp, #8
   1bc18:	af00      	add	r7, sp, #0
   1bc1a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1bc1c:	4b11      	ldr	r3, [pc, #68]	; (1bc64 <prvTraceError+0x50>)
   1bc1e:	681b      	ldr	r3, [r3, #0]
   1bc20:	2b00      	cmp	r3, #0
   1bc22:	d001      	beq.n	1bc28 <prvTraceError+0x14>
	{
		vTraceStop();
   1bc24:	4b10      	ldr	r3, [pc, #64]	; (1bc68 <prvTraceError+0x54>)
   1bc26:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1bc28:	4b10      	ldr	r3, [pc, #64]	; (1bc6c <prvTraceError+0x58>)
   1bc2a:	681b      	ldr	r3, [r3, #0]
   1bc2c:	2b00      	cmp	r3, #0
   1bc2e:	d115      	bne.n	1bc5c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1bc30:	4b0e      	ldr	r3, [pc, #56]	; (1bc6c <prvTraceError+0x58>)
   1bc32:	687a      	ldr	r2, [r7, #4]
   1bc34:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1bc36:	4b0b      	ldr	r3, [pc, #44]	; (1bc64 <prvTraceError+0x50>)
   1bc38:	681b      	ldr	r3, [r3, #0]
   1bc3a:	2b00      	cmp	r3, #0
   1bc3c:	d00e      	beq.n	1bc5c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1bc3e:	4b09      	ldr	r3, [pc, #36]	; (1bc64 <prvTraceError+0x50>)
   1bc40:	681b      	ldr	r3, [r3, #0]
   1bc42:	4a0b      	ldr	r2, [pc, #44]	; (1bc70 <prvTraceError+0x5c>)
   1bc44:	1898      	adds	r0, r3, r2
   1bc46:	4b09      	ldr	r3, [pc, #36]	; (1bc6c <prvTraceError+0x58>)
   1bc48:	681b      	ldr	r3, [r3, #0]
   1bc4a:	2250      	movs	r2, #80	; 0x50
   1bc4c:	0019      	movs	r1, r3
   1bc4e:	4b09      	ldr	r3, [pc, #36]	; (1bc74 <prvTraceError+0x60>)
   1bc50:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1bc52:	4b04      	ldr	r3, [pc, #16]	; (1bc64 <prvTraceError+0x50>)
   1bc54:	681b      	ldr	r3, [r3, #0]
   1bc56:	4a08      	ldr	r2, [pc, #32]	; (1bc78 <prvTraceError+0x64>)
   1bc58:	2101      	movs	r1, #1
   1bc5a:	5099      	str	r1, [r3, r2]
		}
	}
}
   1bc5c:	46c0      	nop			; (mov r8, r8)
   1bc5e:	46bd      	mov	sp, r7
   1bc60:	b002      	add	sp, #8
   1bc62:	bd80      	pop	{r7, pc}
   1bc64:	20000c84 	.word	0x20000c84
   1bc68:	0001aad9 	.word	0x0001aad9
   1bc6c:	20000be4 	.word	0x20000be4
   1bc70:	000006bc 	.word	0x000006bc
   1bc74:	0001bae1 	.word	0x0001bae1
   1bc78:	000006b4 	.word	0x000006b4

0001bc7c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1bc7c:	b580      	push	{r7, lr}
   1bc7e:	b086      	sub	sp, #24
   1bc80:	af00      	add	r7, sp, #0
   1bc82:	0002      	movs	r2, r0
   1bc84:	1dfb      	adds	r3, r7, #7
   1bc86:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1bc88:	2300      	movs	r3, #0
   1bc8a:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1bc8c:	2300      	movs	r3, #0
   1bc8e:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1bc90:	1dfb      	adds	r3, r7, #7
   1bc92:	781b      	ldrb	r3, [r3, #0]
   1bc94:	2b00      	cmp	r3, #0
   1bc96:	d000      	beq.n	1bc9a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1bc98:	e089      	b.n	1bdae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1bc9a:	4b49      	ldr	r3, [pc, #292]	; (1bdc0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1bc9c:	0018      	movs	r0, r3
   1bc9e:	4b49      	ldr	r3, [pc, #292]	; (1bdc4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1bca0:	4798      	blx	r3
   1bca2:	e08a      	b.n	1bdba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1bca4:	4b48      	ldr	r3, [pc, #288]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bca6:	681b      	ldr	r3, [r3, #0]
   1bca8:	69da      	ldr	r2, [r3, #28]
   1bcaa:	697b      	ldr	r3, [r7, #20]
   1bcac:	18d3      	adds	r3, r2, r3
   1bcae:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1bcb0:	4b45      	ldr	r3, [pc, #276]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bcb2:	6819      	ldr	r1, [r3, #0]
   1bcb4:	693b      	ldr	r3, [r7, #16]
   1bcb6:	009a      	lsls	r2, r3, #2
   1bcb8:	23e2      	movs	r3, #226	; 0xe2
   1bcba:	00db      	lsls	r3, r3, #3
   1bcbc:	188a      	adds	r2, r1, r2
   1bcbe:	18d3      	adds	r3, r2, r3
   1bcc0:	781b      	ldrb	r3, [r3, #0]
   1bcc2:	2b98      	cmp	r3, #152	; 0x98
   1bcc4:	d934      	bls.n	1bd30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1bcc6:	4b40      	ldr	r3, [pc, #256]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bcc8:	6819      	ldr	r1, [r3, #0]
   1bcca:	693b      	ldr	r3, [r7, #16]
   1bccc:	009a      	lsls	r2, r3, #2
   1bcce:	23e2      	movs	r3, #226	; 0xe2
   1bcd0:	00db      	lsls	r3, r3, #3
   1bcd2:	188a      	adds	r2, r1, r2
   1bcd4:	18d3      	adds	r3, r2, r3
   1bcd6:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1bcd8:	2ba7      	cmp	r3, #167	; 0xa7
   1bcda:	d829      	bhi.n	1bd30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1bcdc:	4b3a      	ldr	r3, [pc, #232]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bcde:	6819      	ldr	r1, [r3, #0]
   1bce0:	693b      	ldr	r3, [r7, #16]
   1bce2:	009a      	lsls	r2, r3, #2
   1bce4:	23e2      	movs	r3, #226	; 0xe2
   1bce6:	00db      	lsls	r3, r3, #3
   1bce8:	188a      	adds	r2, r1, r2
   1bcea:	18d3      	adds	r3, r2, r3
   1bcec:	781a      	ldrb	r2, [r3, #0]
   1bcee:	230f      	movs	r3, #15
   1bcf0:	18fb      	adds	r3, r7, r3
   1bcf2:	3268      	adds	r2, #104	; 0x68
   1bcf4:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1bcf6:	230f      	movs	r3, #15
   1bcf8:	18fb      	adds	r3, r7, r3
   1bcfa:	781a      	ldrb	r2, [r3, #0]
   1bcfc:	693b      	ldr	r3, [r7, #16]
   1bcfe:	18d2      	adds	r2, r2, r3
   1bd00:	4b31      	ldr	r3, [pc, #196]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bd02:	681b      	ldr	r3, [r3, #0]
   1bd04:	699b      	ldr	r3, [r3, #24]
   1bd06:	429a      	cmp	r2, r3
   1bd08:	d24d      	bcs.n	1bda6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1bd0a:	4b2f      	ldr	r3, [pc, #188]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bd0c:	681a      	ldr	r2, [r3, #0]
   1bd0e:	693b      	ldr	r3, [r7, #16]
   1bd10:	009b      	lsls	r3, r3, #2
   1bd12:	21e2      	movs	r1, #226	; 0xe2
   1bd14:	00c9      	lsls	r1, r1, #3
   1bd16:	468c      	mov	ip, r1
   1bd18:	4463      	add	r3, ip
   1bd1a:	18d0      	adds	r0, r2, r3
   1bd1c:	230f      	movs	r3, #15
   1bd1e:	18fb      	adds	r3, r7, r3
   1bd20:	781b      	ldrb	r3, [r3, #0]
   1bd22:	3301      	adds	r3, #1
   1bd24:	009b      	lsls	r3, r3, #2
   1bd26:	001a      	movs	r2, r3
   1bd28:	2100      	movs	r1, #0
   1bd2a:	4b28      	ldr	r3, [pc, #160]	; (1bdcc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bd2c:	4798      	blx	r3
		{
   1bd2e:	e03a      	b.n	1bda6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1bd30:	4b25      	ldr	r3, [pc, #148]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bd32:	6819      	ldr	r1, [r3, #0]
   1bd34:	693b      	ldr	r3, [r7, #16]
   1bd36:	009a      	lsls	r2, r3, #2
   1bd38:	23e2      	movs	r3, #226	; 0xe2
   1bd3a:	00db      	lsls	r3, r3, #3
   1bd3c:	188a      	adds	r2, r1, r2
   1bd3e:	18d3      	adds	r3, r2, r3
   1bd40:	781b      	ldrb	r3, [r3, #0]
   1bd42:	2b01      	cmp	r3, #1
   1bd44:	d130      	bne.n	1bda8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1bd46:	693b      	ldr	r3, [r7, #16]
   1bd48:	1c5a      	adds	r2, r3, #1
   1bd4a:	4b1f      	ldr	r3, [pc, #124]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bd4c:	681b      	ldr	r3, [r3, #0]
   1bd4e:	699b      	ldr	r3, [r3, #24]
   1bd50:	429a      	cmp	r2, r3
   1bd52:	d20e      	bcs.n	1bd72 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1bd54:	4b1c      	ldr	r3, [pc, #112]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bd56:	681a      	ldr	r2, [r3, #0]
   1bd58:	693b      	ldr	r3, [r7, #16]
   1bd5a:	009b      	lsls	r3, r3, #2
   1bd5c:	21e2      	movs	r1, #226	; 0xe2
   1bd5e:	00c9      	lsls	r1, r1, #3
   1bd60:	468c      	mov	ip, r1
   1bd62:	4463      	add	r3, ip
   1bd64:	18d3      	adds	r3, r2, r3
   1bd66:	2208      	movs	r2, #8
   1bd68:	2100      	movs	r1, #0
   1bd6a:	0018      	movs	r0, r3
   1bd6c:	4b17      	ldr	r3, [pc, #92]	; (1bdcc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bd6e:	4798      	blx	r3
   1bd70:	e01a      	b.n	1bda8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1bd72:	4b15      	ldr	r3, [pc, #84]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bd74:	681b      	ldr	r3, [r3, #0]
   1bd76:	22e2      	movs	r2, #226	; 0xe2
   1bd78:	00d2      	lsls	r2, r2, #3
   1bd7a:	4694      	mov	ip, r2
   1bd7c:	4463      	add	r3, ip
   1bd7e:	2204      	movs	r2, #4
   1bd80:	2100      	movs	r1, #0
   1bd82:	0018      	movs	r0, r3
   1bd84:	4b11      	ldr	r3, [pc, #68]	; (1bdcc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bd86:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1bd88:	4b0f      	ldr	r3, [pc, #60]	; (1bdc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bd8a:	681a      	ldr	r2, [r3, #0]
   1bd8c:	693b      	ldr	r3, [r7, #16]
   1bd8e:	009b      	lsls	r3, r3, #2
   1bd90:	21e2      	movs	r1, #226	; 0xe2
   1bd92:	00c9      	lsls	r1, r1, #3
   1bd94:	468c      	mov	ip, r1
   1bd96:	4463      	add	r3, ip
   1bd98:	18d3      	adds	r3, r2, r3
   1bd9a:	2204      	movs	r2, #4
   1bd9c:	2100      	movs	r1, #0
   1bd9e:	0018      	movs	r0, r3
   1bda0:	4b0a      	ldr	r3, [pc, #40]	; (1bdcc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bda2:	4798      	blx	r3
   1bda4:	e000      	b.n	1bda8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1bda6:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1bda8:	697b      	ldr	r3, [r7, #20]
   1bdaa:	3301      	adds	r3, #1
   1bdac:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1bdae:	1dfb      	adds	r3, r7, #7
   1bdb0:	781a      	ldrb	r2, [r3, #0]
   1bdb2:	697b      	ldr	r3, [r7, #20]
   1bdb4:	429a      	cmp	r2, r3
   1bdb6:	d900      	bls.n	1bdba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1bdb8:	e774      	b.n	1bca4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1bdba:	46bd      	mov	sp, r7
   1bdbc:	b006      	add	sp, #24
   1bdbe:	bd80      	pop	{r7, pc}
   1bdc0:	0003b094 	.word	0x0003b094
   1bdc4:	0001bc15 	.word	0x0001bc15
   1bdc8:	20000c84 	.word	0x20000c84
   1bdcc:	0003781f 	.word	0x0003781f

0001bdd0 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1bdd0:	b580      	push	{r7, lr}
   1bdd2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1bdd4:	4b12      	ldr	r3, [pc, #72]	; (1be20 <prvTraceUpdateCounters+0x50>)
   1bdd6:	681b      	ldr	r3, [r3, #0]
   1bdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bdda:	2b00      	cmp	r3, #0
   1bddc:	d01c      	beq.n	1be18 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1bdde:	4b10      	ldr	r3, [pc, #64]	; (1be20 <prvTraceUpdateCounters+0x50>)
   1bde0:	681b      	ldr	r3, [r3, #0]
   1bde2:	695a      	ldr	r2, [r3, #20]
   1bde4:	3201      	adds	r2, #1
   1bde6:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1bde8:	4b0d      	ldr	r3, [pc, #52]	; (1be20 <prvTraceUpdateCounters+0x50>)
   1bdea:	681b      	ldr	r3, [r3, #0]
   1bdec:	69da      	ldr	r2, [r3, #28]
   1bdee:	3201      	adds	r2, #1
   1bdf0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1bdf2:	4b0b      	ldr	r3, [pc, #44]	; (1be20 <prvTraceUpdateCounters+0x50>)
   1bdf4:	681b      	ldr	r3, [r3, #0]
   1bdf6:	69da      	ldr	r2, [r3, #28]
   1bdf8:	232c      	movs	r3, #44	; 0x2c
   1bdfa:	33ff      	adds	r3, #255	; 0xff
   1bdfc:	429a      	cmp	r2, r3
   1bdfe:	d907      	bls.n	1be10 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1be00:	4b07      	ldr	r3, [pc, #28]	; (1be20 <prvTraceUpdateCounters+0x50>)
   1be02:	681b      	ldr	r3, [r3, #0]
   1be04:	2201      	movs	r2, #1
   1be06:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1be08:	4b05      	ldr	r3, [pc, #20]	; (1be20 <prvTraceUpdateCounters+0x50>)
   1be0a:	681b      	ldr	r3, [r3, #0]
   1be0c:	2200      	movs	r2, #0
   1be0e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1be10:	2001      	movs	r0, #1
   1be12:	4b04      	ldr	r3, [pc, #16]	; (1be24 <prvTraceUpdateCounters+0x54>)
   1be14:	4798      	blx	r3
   1be16:	e000      	b.n	1be1a <prvTraceUpdateCounters+0x4a>
		return;
   1be18:	46c0      	nop			; (mov r8, r8)
#endif
}
   1be1a:	46bd      	mov	sp, r7
   1be1c:	bd80      	pop	{r7, pc}
   1be1e:	46c0      	nop			; (mov r8, r8)
   1be20:	20000c84 	.word	0x20000c84
   1be24:	0001bc7d 	.word	0x0001bc7d

0001be28 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1be28:	b5b0      	push	{r4, r5, r7, lr}
   1be2a:	b086      	sub	sp, #24
   1be2c:	af00      	add	r7, sp, #0
   1be2e:	0002      	movs	r2, r0
   1be30:	1dbb      	adds	r3, r7, #6
   1be32:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1be34:	2300      	movs	r3, #0
   1be36:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1be38:	2300      	movs	r3, #0
   1be3a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1be3c:	2300      	movs	r3, #0
   1be3e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1be40:	1dbb      	adds	r3, r7, #6
   1be42:	881b      	ldrh	r3, [r3, #0]
   1be44:	2bff      	cmp	r3, #255	; 0xff
   1be46:	d00a      	beq.n	1be5e <prvTraceGetDTS+0x36>
   1be48:	1dbb      	adds	r3, r7, #6
   1be4a:	881b      	ldrh	r3, [r3, #0]
   1be4c:	4a60      	ldr	r2, [pc, #384]	; (1bfd0 <prvTraceGetDTS+0x1a8>)
   1be4e:	4293      	cmp	r3, r2
   1be50:	d005      	beq.n	1be5e <prvTraceGetDTS+0x36>
   1be52:	4b60      	ldr	r3, [pc, #384]	; (1bfd4 <prvTraceGetDTS+0x1ac>)
   1be54:	0018      	movs	r0, r3
   1be56:	4b60      	ldr	r3, [pc, #384]	; (1bfd8 <prvTraceGetDTS+0x1b0>)
   1be58:	4798      	blx	r3
   1be5a:	2300      	movs	r3, #0
   1be5c:	e0b3      	b.n	1bfc6 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1be5e:	4b5f      	ldr	r3, [pc, #380]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1be60:	681b      	ldr	r3, [r3, #0]
   1be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1be64:	2b00      	cmp	r3, #0
   1be66:	d118      	bne.n	1be9a <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1be68:	4b5d      	ldr	r3, [pc, #372]	; (1bfe0 <prvTraceGetDTS+0x1b8>)
   1be6a:	681b      	ldr	r3, [r3, #0]
   1be6c:	2b00      	cmp	r3, #0
   1be6e:	d006      	beq.n	1be7e <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1be70:	4b5a      	ldr	r3, [pc, #360]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1be72:	681b      	ldr	r3, [r3, #0]
   1be74:	4a5a      	ldr	r2, [pc, #360]	; (1bfe0 <prvTraceGetDTS+0x1b8>)
   1be76:	6812      	ldr	r2, [r2, #0]
   1be78:	0892      	lsrs	r2, r2, #2
   1be7a:	625a      	str	r2, [r3, #36]	; 0x24
   1be7c:	e00d      	b.n	1be9a <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1be7e:	4b59      	ldr	r3, [pc, #356]	; (1bfe4 <prvTraceGetDTS+0x1bc>)
   1be80:	681a      	ldr	r2, [r3, #0]
   1be82:	4b59      	ldr	r3, [pc, #356]	; (1bfe8 <prvTraceGetDTS+0x1c0>)
   1be84:	681b      	ldr	r3, [r3, #0]
   1be86:	429a      	cmp	r2, r3
   1be88:	d007      	beq.n	1be9a <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1be8a:	4b54      	ldr	r3, [pc, #336]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1be8c:	681c      	ldr	r4, [r3, #0]
   1be8e:	2000      	movs	r0, #0
   1be90:	4b56      	ldr	r3, [pc, #344]	; (1bfec <prvTraceGetDTS+0x1c4>)
   1be92:	4798      	blx	r3
   1be94:	0003      	movs	r3, r0
   1be96:	089b      	lsrs	r3, r3, #2
   1be98:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1be9a:	230c      	movs	r3, #12
   1be9c:	18fb      	adds	r3, r7, r3
   1be9e:	0018      	movs	r0, r3
   1bea0:	4b53      	ldr	r3, [pc, #332]	; (1bff0 <prvTraceGetDTS+0x1c8>)
   1bea2:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1bea4:	68fa      	ldr	r2, [r7, #12]
   1bea6:	4b53      	ldr	r3, [pc, #332]	; (1bff4 <prvTraceGetDTS+0x1cc>)
   1bea8:	681b      	ldr	r3, [r3, #0]
   1beaa:	1ad3      	subs	r3, r2, r3
   1beac:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1beae:	68fa      	ldr	r2, [r7, #12]
   1beb0:	4b50      	ldr	r3, [pc, #320]	; (1bff4 <prvTraceGetDTS+0x1cc>)
   1beb2:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1beb4:	4b49      	ldr	r3, [pc, #292]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1beb6:	681b      	ldr	r3, [r3, #0]
   1beb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1beba:	2b00      	cmp	r3, #0
   1bebc:	d044      	beq.n	1bf48 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1bebe:	4b47      	ldr	r3, [pc, #284]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bec0:	681b      	ldr	r3, [r3, #0]
   1bec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1bec4:	693b      	ldr	r3, [r7, #16]
   1bec6:	429a      	cmp	r2, r3
   1bec8:	d21e      	bcs.n	1bf08 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1beca:	4b44      	ldr	r3, [pc, #272]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1becc:	681c      	ldr	r4, [r3, #0]
   1bece:	4b43      	ldr	r3, [pc, #268]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bed0:	681b      	ldr	r3, [r3, #0]
   1bed2:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1bed4:	4b41      	ldr	r3, [pc, #260]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bed6:	681b      	ldr	r3, [r3, #0]
   1bed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1beda:	4b47      	ldr	r3, [pc, #284]	; (1bff8 <prvTraceGetDTS+0x1d0>)
   1bedc:	0011      	movs	r1, r2
   1bede:	6938      	ldr	r0, [r7, #16]
   1bee0:	4798      	blx	r3
   1bee2:	0003      	movs	r3, r0
   1bee4:	18eb      	adds	r3, r5, r3
   1bee6:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1bee8:	4b3c      	ldr	r3, [pc, #240]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1beea:	681c      	ldr	r4, [r3, #0]
   1beec:	4b3b      	ldr	r3, [pc, #236]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1beee:	681b      	ldr	r3, [r3, #0]
   1bef0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1bef2:	4b3a      	ldr	r3, [pc, #232]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bef4:	681b      	ldr	r3, [r3, #0]
   1bef6:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1bef8:	693a      	ldr	r2, [r7, #16]
   1befa:	4b40      	ldr	r3, [pc, #256]	; (1bffc <prvTraceGetDTS+0x1d4>)
   1befc:	0010      	movs	r0, r2
   1befe:	4798      	blx	r3
   1bf00:	000b      	movs	r3, r1
   1bf02:	18eb      	adds	r3, r5, r3
   1bf04:	62a3      	str	r3, [r4, #40]	; 0x28
   1bf06:	e007      	b.n	1bf18 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1bf08:	4b34      	ldr	r3, [pc, #208]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf0a:	681b      	ldr	r3, [r3, #0]
   1bf0c:	4a33      	ldr	r2, [pc, #204]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf0e:	6812      	ldr	r2, [r2, #0]
   1bf10:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1bf12:	693a      	ldr	r2, [r7, #16]
   1bf14:	188a      	adds	r2, r1, r2
   1bf16:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1bf18:	4b30      	ldr	r3, [pc, #192]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf1a:	681b      	ldr	r3, [r3, #0]
   1bf1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1bf1e:	4b2f      	ldr	r3, [pc, #188]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf20:	681b      	ldr	r3, [r3, #0]
   1bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bf24:	429a      	cmp	r2, r3
   1bf26:	d313      	bcc.n	1bf50 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1bf28:	4b2c      	ldr	r3, [pc, #176]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf2a:	681b      	ldr	r3, [r3, #0]
   1bf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf2e:	3201      	adds	r2, #1
   1bf30:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1bf32:	4b2a      	ldr	r3, [pc, #168]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf34:	681b      	ldr	r3, [r3, #0]
   1bf36:	4a29      	ldr	r2, [pc, #164]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf38:	6812      	ldr	r2, [r2, #0]
   1bf3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1bf3c:	4a27      	ldr	r2, [pc, #156]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf3e:	6812      	ldr	r2, [r2, #0]
   1bf40:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1bf42:	1a8a      	subs	r2, r1, r2
   1bf44:	629a      	str	r2, [r3, #40]	; 0x28
   1bf46:	e003      	b.n	1bf50 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1bf48:	4b24      	ldr	r3, [pc, #144]	; (1bfdc <prvTraceGetDTS+0x1b4>)
   1bf4a:	681b      	ldr	r3, [r3, #0]
   1bf4c:	68fa      	ldr	r2, [r7, #12]
   1bf4e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1bf50:	1dbb      	adds	r3, r7, #6
   1bf52:	881a      	ldrh	r2, [r3, #0]
   1bf54:	693b      	ldr	r3, [r7, #16]
   1bf56:	429a      	cmp	r2, r3
   1bf58:	d22f      	bcs.n	1bfba <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1bf5a:	4b29      	ldr	r3, [pc, #164]	; (1c000 <prvTraceGetDTS+0x1d8>)
   1bf5c:	4798      	blx	r3
   1bf5e:	0003      	movs	r3, r0
   1bf60:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1bf62:	697b      	ldr	r3, [r7, #20]
   1bf64:	2b00      	cmp	r3, #0
   1bf66:	d028      	beq.n	1bfba <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1bf68:	1dbb      	adds	r3, r7, #6
   1bf6a:	881b      	ldrh	r3, [r3, #0]
   1bf6c:	4a18      	ldr	r2, [pc, #96]	; (1bfd0 <prvTraceGetDTS+0x1a8>)
   1bf6e:	4293      	cmp	r3, r2
   1bf70:	d10b      	bne.n	1bf8a <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1bf72:	697b      	ldr	r3, [r7, #20]
   1bf74:	22a9      	movs	r2, #169	; 0xa9
   1bf76:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1bf78:	693b      	ldr	r3, [r7, #16]
   1bf7a:	0c1b      	lsrs	r3, r3, #16
   1bf7c:	b29a      	uxth	r2, r3
   1bf7e:	697b      	ldr	r3, [r7, #20]
   1bf80:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1bf82:	697b      	ldr	r3, [r7, #20]
   1bf84:	2200      	movs	r2, #0
   1bf86:	705a      	strb	r2, [r3, #1]
   1bf88:	e015      	b.n	1bfb6 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1bf8a:	1dbb      	adds	r3, r7, #6
   1bf8c:	881b      	ldrh	r3, [r3, #0]
   1bf8e:	2bff      	cmp	r3, #255	; 0xff
   1bf90:	d10d      	bne.n	1bfae <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1bf92:	697b      	ldr	r3, [r7, #20]
   1bf94:	22a8      	movs	r2, #168	; 0xa8
   1bf96:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1bf98:	693b      	ldr	r3, [r7, #16]
   1bf9a:	0a1b      	lsrs	r3, r3, #8
   1bf9c:	b29a      	uxth	r2, r3
   1bf9e:	697b      	ldr	r3, [r7, #20]
   1bfa0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1bfa2:	693b      	ldr	r3, [r7, #16]
   1bfa4:	0e1b      	lsrs	r3, r3, #24
   1bfa6:	b2da      	uxtb	r2, r3
   1bfa8:	697b      	ldr	r3, [r7, #20]
   1bfaa:	705a      	strb	r2, [r3, #1]
   1bfac:	e003      	b.n	1bfb6 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1bfae:	4b15      	ldr	r3, [pc, #84]	; (1c004 <prvTraceGetDTS+0x1dc>)
   1bfb0:	0018      	movs	r0, r3
   1bfb2:	4b09      	ldr	r3, [pc, #36]	; (1bfd8 <prvTraceGetDTS+0x1b0>)
   1bfb4:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1bfb6:	4b14      	ldr	r3, [pc, #80]	; (1c008 <prvTraceGetDTS+0x1e0>)
   1bfb8:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1bfba:	693b      	ldr	r3, [r7, #16]
   1bfbc:	b29b      	uxth	r3, r3
   1bfbe:	1dba      	adds	r2, r7, #6
   1bfc0:	8812      	ldrh	r2, [r2, #0]
   1bfc2:	4013      	ands	r3, r2
   1bfc4:	b29b      	uxth	r3, r3
}
   1bfc6:	0018      	movs	r0, r3
   1bfc8:	46bd      	mov	sp, r7
   1bfca:	b006      	add	sp, #24
   1bfcc:	bdb0      	pop	{r4, r5, r7, pc}
   1bfce:	46c0      	nop			; (mov r8, r8)
   1bfd0:	0000ffff 	.word	0x0000ffff
   1bfd4:	0003b0ec 	.word	0x0003b0ec
   1bfd8:	0001bc15 	.word	0x0001bc15
   1bfdc:	20000c84 	.word	0x20000c84
   1bfe0:	20000be0 	.word	0x20000be0
   1bfe4:	e000e018 	.word	0xe000e018
   1bfe8:	20005458 	.word	0x20005458
   1bfec:	0002bfa9 	.word	0x0002bfa9
   1bff0:	0001c00d 	.word	0x0001c00d
   1bff4:	20000c90 	.word	0x20000c90
   1bff8:	00034bf5 	.word	0x00034bf5
   1bffc:	00034d01 	.word	0x00034d01
   1c000:	0001b7cd 	.word	0x0001b7cd
   1c004:	0003b12c 	.word	0x0003b12c
   1c008:	0001bdd1 	.word	0x0001bdd1

0001c00c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1c00c:	b580      	push	{r7, lr}
   1c00e:	b084      	sub	sp, #16
   1c010:	af00      	add	r7, sp, #0
   1c012:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1c014:	2300      	movs	r3, #0
   1c016:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1c018:	2300      	movs	r3, #0
   1c01a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1c01c:	4b2d      	ldr	r3, [pc, #180]	; (1c0d4 <prvTracePortGetTimeStamp+0xc8>)
   1c01e:	681b      	ldr	r3, [r3, #0]
   1c020:	2b01      	cmp	r3, #1
   1c022:	d107      	bne.n	1c034 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1c024:	687b      	ldr	r3, [r7, #4]
   1c026:	2b00      	cmp	r3, #0
   1c028:	d04f      	beq.n	1c0ca <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1c02a:	4b2b      	ldr	r3, [pc, #172]	; (1c0d8 <prvTracePortGetTimeStamp+0xcc>)
   1c02c:	681a      	ldr	r2, [r3, #0]
   1c02e:	687b      	ldr	r3, [r7, #4]
   1c030:	601a      	str	r2, [r3, #0]
		return;
   1c032:	e04a      	b.n	1c0ca <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1c034:	4b29      	ldr	r3, [pc, #164]	; (1c0dc <prvTracePortGetTimeStamp+0xd0>)
   1c036:	681a      	ldr	r2, [r3, #0]
   1c038:	4b29      	ldr	r3, [pc, #164]	; (1c0e0 <prvTracePortGetTimeStamp+0xd4>)
   1c03a:	681b      	ldr	r3, [r3, #0]
   1c03c:	1ad3      	subs	r3, r2, r3
   1c03e:	3301      	adds	r3, #1
   1c040:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1c042:	4b28      	ldr	r3, [pc, #160]	; (1c0e4 <prvTracePortGetTimeStamp+0xd8>)
   1c044:	681a      	ldr	r2, [r3, #0]
   1c046:	4b28      	ldr	r3, [pc, #160]	; (1c0e8 <prvTracePortGetTimeStamp+0xdc>)
   1c048:	681b      	ldr	r3, [r3, #0]
   1c04a:	1ad3      	subs	r3, r2, r3
   1c04c:	3b01      	subs	r3, #1
   1c04e:	2b00      	cmp	r3, #0
   1c050:	db03      	blt.n	1c05a <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1c052:	4b24      	ldr	r3, [pc, #144]	; (1c0e4 <prvTracePortGetTimeStamp+0xd8>)
   1c054:	681b      	ldr	r3, [r3, #0]
   1c056:	60fb      	str	r3, [r7, #12]
   1c058:	e002      	b.n	1c060 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1c05a:	4b23      	ldr	r3, [pc, #140]	; (1c0e8 <prvTracePortGetTimeStamp+0xdc>)
   1c05c:	681b      	ldr	r3, [r3, #0]
   1c05e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1c060:	4b20      	ldr	r3, [pc, #128]	; (1c0e4 <prvTracePortGetTimeStamp+0xd8>)
   1c062:	681b      	ldr	r3, [r3, #0]
   1c064:	68fa      	ldr	r2, [r7, #12]
   1c066:	429a      	cmp	r2, r3
   1c068:	d107      	bne.n	1c07a <prvTracePortGetTimeStamp+0x6e>
   1c06a:	4b20      	ldr	r3, [pc, #128]	; (1c0ec <prvTracePortGetTimeStamp+0xe0>)
   1c06c:	681b      	ldr	r3, [r3, #0]
   1c06e:	68ba      	ldr	r2, [r7, #8]
   1c070:	429a      	cmp	r2, r3
   1c072:	d202      	bcs.n	1c07a <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1c074:	68fb      	ldr	r3, [r7, #12]
   1c076:	3301      	adds	r3, #1
   1c078:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1c07a:	687b      	ldr	r3, [r7, #4]
   1c07c:	2b00      	cmp	r3, #0
   1c07e:	d016      	beq.n	1c0ae <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1c080:	4b16      	ldr	r3, [pc, #88]	; (1c0dc <prvTracePortGetTimeStamp+0xd0>)
   1c082:	681b      	ldr	r3, [r3, #0]
   1c084:	3301      	adds	r3, #1
   1c086:	089b      	lsrs	r3, r3, #2
   1c088:	68fa      	ldr	r2, [r7, #12]
   1c08a:	435a      	muls	r2, r3
   1c08c:	4b12      	ldr	r3, [pc, #72]	; (1c0d8 <prvTracePortGetTimeStamp+0xcc>)
   1c08e:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1c090:	4b12      	ldr	r3, [pc, #72]	; (1c0dc <prvTracePortGetTimeStamp+0xd0>)
   1c092:	681b      	ldr	r3, [r3, #0]
   1c094:	3301      	adds	r3, #1
   1c096:	2203      	movs	r2, #3
   1c098:	4013      	ands	r3, r2
   1c09a:	68fa      	ldr	r2, [r7, #12]
   1c09c:	435a      	muls	r2, r3
   1c09e:	68bb      	ldr	r3, [r7, #8]
   1c0a0:	18d3      	adds	r3, r2, r3
   1c0a2:	089a      	lsrs	r2, r3, #2
   1c0a4:	4b0c      	ldr	r3, [pc, #48]	; (1c0d8 <prvTracePortGetTimeStamp+0xcc>)
   1c0a6:	681b      	ldr	r3, [r3, #0]
   1c0a8:	18d2      	adds	r2, r2, r3
   1c0aa:	4b0b      	ldr	r3, [pc, #44]	; (1c0d8 <prvTracePortGetTimeStamp+0xcc>)
   1c0ac:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1c0ae:	4b0d      	ldr	r3, [pc, #52]	; (1c0e4 <prvTracePortGetTimeStamp+0xd8>)
   1c0b0:	68fa      	ldr	r2, [r7, #12]
   1c0b2:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1c0b4:	687b      	ldr	r3, [r7, #4]
   1c0b6:	2b00      	cmp	r3, #0
   1c0b8:	d003      	beq.n	1c0c2 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1c0ba:	4b07      	ldr	r3, [pc, #28]	; (1c0d8 <prvTracePortGetTimeStamp+0xcc>)
   1c0bc:	681a      	ldr	r2, [r3, #0]
   1c0be:	687b      	ldr	r3, [r7, #4]
   1c0c0:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1c0c2:	4b0a      	ldr	r3, [pc, #40]	; (1c0ec <prvTracePortGetTimeStamp+0xe0>)
   1c0c4:	68ba      	ldr	r2, [r7, #8]
   1c0c6:	601a      	str	r2, [r3, #0]
   1c0c8:	e000      	b.n	1c0cc <prvTracePortGetTimeStamp+0xc0>
		return;
   1c0ca:	46c0      	nop			; (mov r8, r8)
}
   1c0cc:	46bd      	mov	sp, r7
   1c0ce:	b004      	add	sp, #16
   1c0d0:	bd80      	pop	{r7, pc}
   1c0d2:	46c0      	nop			; (mov r8, r8)
   1c0d4:	20000bd0 	.word	0x20000bd0
   1c0d8:	20000bd4 	.word	0x20000bd4
   1c0dc:	e000e014 	.word	0xe000e014
   1c0e0:	e000e018 	.word	0xe000e018
   1c0e4:	20000c94 	.word	0x20000c94
   1c0e8:	20000bcc 	.word	0x20000bcc
   1c0ec:	20000c98 	.word	0x20000c98

0001c0f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1c0f0:	b580      	push	{r7, lr}
   1c0f2:	b082      	sub	sp, #8
   1c0f4:	af00      	add	r7, sp, #0
   1c0f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c0f8:	687b      	ldr	r3, [r7, #4]
   1c0fa:	3308      	adds	r3, #8
   1c0fc:	001a      	movs	r2, r3
   1c0fe:	687b      	ldr	r3, [r7, #4]
   1c100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1c102:	687b      	ldr	r3, [r7, #4]
   1c104:	2201      	movs	r2, #1
   1c106:	4252      	negs	r2, r2
   1c108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c10a:	687b      	ldr	r3, [r7, #4]
   1c10c:	3308      	adds	r3, #8
   1c10e:	001a      	movs	r2, r3
   1c110:	687b      	ldr	r3, [r7, #4]
   1c112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c114:	687b      	ldr	r3, [r7, #4]
   1c116:	3308      	adds	r3, #8
   1c118:	001a      	movs	r2, r3
   1c11a:	687b      	ldr	r3, [r7, #4]
   1c11c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1c11e:	687b      	ldr	r3, [r7, #4]
   1c120:	2200      	movs	r2, #0
   1c122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1c124:	46c0      	nop			; (mov r8, r8)
   1c126:	46bd      	mov	sp, r7
   1c128:	b002      	add	sp, #8
   1c12a:	bd80      	pop	{r7, pc}

0001c12c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1c12c:	b580      	push	{r7, lr}
   1c12e:	b082      	sub	sp, #8
   1c130:	af00      	add	r7, sp, #0
   1c132:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1c134:	687b      	ldr	r3, [r7, #4]
   1c136:	2200      	movs	r2, #0
   1c138:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1c13a:	46c0      	nop			; (mov r8, r8)
   1c13c:	46bd      	mov	sp, r7
   1c13e:	b002      	add	sp, #8
   1c140:	bd80      	pop	{r7, pc}

0001c142 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c142:	b580      	push	{r7, lr}
   1c144:	b084      	sub	sp, #16
   1c146:	af00      	add	r7, sp, #0
   1c148:	6078      	str	r0, [r7, #4]
   1c14a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1c14c:	687b      	ldr	r3, [r7, #4]
   1c14e:	685b      	ldr	r3, [r3, #4]
   1c150:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1c152:	683b      	ldr	r3, [r7, #0]
   1c154:	68fa      	ldr	r2, [r7, #12]
   1c156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1c158:	68fb      	ldr	r3, [r7, #12]
   1c15a:	689a      	ldr	r2, [r3, #8]
   1c15c:	683b      	ldr	r3, [r7, #0]
   1c15e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1c160:	68fb      	ldr	r3, [r7, #12]
   1c162:	689b      	ldr	r3, [r3, #8]
   1c164:	683a      	ldr	r2, [r7, #0]
   1c166:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1c168:	68fb      	ldr	r3, [r7, #12]
   1c16a:	683a      	ldr	r2, [r7, #0]
   1c16c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c16e:	683b      	ldr	r3, [r7, #0]
   1c170:	687a      	ldr	r2, [r7, #4]
   1c172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c174:	687b      	ldr	r3, [r7, #4]
   1c176:	681b      	ldr	r3, [r3, #0]
   1c178:	1c5a      	adds	r2, r3, #1
   1c17a:	687b      	ldr	r3, [r7, #4]
   1c17c:	601a      	str	r2, [r3, #0]
}
   1c17e:	46c0      	nop			; (mov r8, r8)
   1c180:	46bd      	mov	sp, r7
   1c182:	b004      	add	sp, #16
   1c184:	bd80      	pop	{r7, pc}

0001c186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c186:	b580      	push	{r7, lr}
   1c188:	b084      	sub	sp, #16
   1c18a:	af00      	add	r7, sp, #0
   1c18c:	6078      	str	r0, [r7, #4]
   1c18e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1c190:	683b      	ldr	r3, [r7, #0]
   1c192:	681b      	ldr	r3, [r3, #0]
   1c194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1c196:	68bb      	ldr	r3, [r7, #8]
   1c198:	3301      	adds	r3, #1
   1c19a:	d103      	bne.n	1c1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1c19c:	687b      	ldr	r3, [r7, #4]
   1c19e:	691b      	ldr	r3, [r3, #16]
   1c1a0:	60fb      	str	r3, [r7, #12]
   1c1a2:	e00c      	b.n	1c1be <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c1a4:	687b      	ldr	r3, [r7, #4]
   1c1a6:	3308      	adds	r3, #8
   1c1a8:	60fb      	str	r3, [r7, #12]
   1c1aa:	e002      	b.n	1c1b2 <vListInsert+0x2c>
   1c1ac:	68fb      	ldr	r3, [r7, #12]
   1c1ae:	685b      	ldr	r3, [r3, #4]
   1c1b0:	60fb      	str	r3, [r7, #12]
   1c1b2:	68fb      	ldr	r3, [r7, #12]
   1c1b4:	685b      	ldr	r3, [r3, #4]
   1c1b6:	681a      	ldr	r2, [r3, #0]
   1c1b8:	68bb      	ldr	r3, [r7, #8]
   1c1ba:	429a      	cmp	r2, r3
   1c1bc:	d9f6      	bls.n	1c1ac <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1c1be:	68fb      	ldr	r3, [r7, #12]
   1c1c0:	685a      	ldr	r2, [r3, #4]
   1c1c2:	683b      	ldr	r3, [r7, #0]
   1c1c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1c1c6:	683b      	ldr	r3, [r7, #0]
   1c1c8:	685b      	ldr	r3, [r3, #4]
   1c1ca:	683a      	ldr	r2, [r7, #0]
   1c1cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1c1ce:	683b      	ldr	r3, [r7, #0]
   1c1d0:	68fa      	ldr	r2, [r7, #12]
   1c1d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1c1d4:	68fb      	ldr	r3, [r7, #12]
   1c1d6:	683a      	ldr	r2, [r7, #0]
   1c1d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c1da:	683b      	ldr	r3, [r7, #0]
   1c1dc:	687a      	ldr	r2, [r7, #4]
   1c1de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c1e0:	687b      	ldr	r3, [r7, #4]
   1c1e2:	681b      	ldr	r3, [r3, #0]
   1c1e4:	1c5a      	adds	r2, r3, #1
   1c1e6:	687b      	ldr	r3, [r7, #4]
   1c1e8:	601a      	str	r2, [r3, #0]
}
   1c1ea:	46c0      	nop			; (mov r8, r8)
   1c1ec:	46bd      	mov	sp, r7
   1c1ee:	b004      	add	sp, #16
   1c1f0:	bd80      	pop	{r7, pc}

0001c1f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1c1f2:	b580      	push	{r7, lr}
   1c1f4:	b084      	sub	sp, #16
   1c1f6:	af00      	add	r7, sp, #0
   1c1f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1c1fa:	687b      	ldr	r3, [r7, #4]
   1c1fc:	691b      	ldr	r3, [r3, #16]
   1c1fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1c200:	687b      	ldr	r3, [r7, #4]
   1c202:	685b      	ldr	r3, [r3, #4]
   1c204:	687a      	ldr	r2, [r7, #4]
   1c206:	6892      	ldr	r2, [r2, #8]
   1c208:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1c20a:	687b      	ldr	r3, [r7, #4]
   1c20c:	689b      	ldr	r3, [r3, #8]
   1c20e:	687a      	ldr	r2, [r7, #4]
   1c210:	6852      	ldr	r2, [r2, #4]
   1c212:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1c214:	68fb      	ldr	r3, [r7, #12]
   1c216:	685a      	ldr	r2, [r3, #4]
   1c218:	687b      	ldr	r3, [r7, #4]
   1c21a:	429a      	cmp	r2, r3
   1c21c:	d103      	bne.n	1c226 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1c21e:	687b      	ldr	r3, [r7, #4]
   1c220:	689a      	ldr	r2, [r3, #8]
   1c222:	68fb      	ldr	r3, [r7, #12]
   1c224:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1c226:	687b      	ldr	r3, [r7, #4]
   1c228:	2200      	movs	r2, #0
   1c22a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1c22c:	68fb      	ldr	r3, [r7, #12]
   1c22e:	681b      	ldr	r3, [r3, #0]
   1c230:	1e5a      	subs	r2, r3, #1
   1c232:	68fb      	ldr	r3, [r7, #12]
   1c234:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1c236:	68fb      	ldr	r3, [r7, #12]
   1c238:	681b      	ldr	r3, [r3, #0]
}
   1c23a:	0018      	movs	r0, r3
   1c23c:	46bd      	mov	sp, r7
   1c23e:	b004      	add	sp, #16
   1c240:	bd80      	pop	{r7, pc}
	...

0001c244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1c244:	b580      	push	{r7, lr}
   1c246:	b084      	sub	sp, #16
   1c248:	af00      	add	r7, sp, #0
   1c24a:	60f8      	str	r0, [r7, #12]
   1c24c:	60b9      	str	r1, [r7, #8]
   1c24e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1c250:	68fb      	ldr	r3, [r7, #12]
   1c252:	3b04      	subs	r3, #4
   1c254:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1c256:	68fb      	ldr	r3, [r7, #12]
   1c258:	2280      	movs	r2, #128	; 0x80
   1c25a:	0452      	lsls	r2, r2, #17
   1c25c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c25e:	68fb      	ldr	r3, [r7, #12]
   1c260:	3b04      	subs	r3, #4
   1c262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1c264:	68ba      	ldr	r2, [r7, #8]
   1c266:	68fb      	ldr	r3, [r7, #12]
   1c268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c26a:	68fb      	ldr	r3, [r7, #12]
   1c26c:	3b04      	subs	r3, #4
   1c26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1c270:	4a08      	ldr	r2, [pc, #32]	; (1c294 <pxPortInitialiseStack+0x50>)
   1c272:	68fb      	ldr	r3, [r7, #12]
   1c274:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1c276:	68fb      	ldr	r3, [r7, #12]
   1c278:	3b14      	subs	r3, #20
   1c27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1c27c:	687a      	ldr	r2, [r7, #4]
   1c27e:	68fb      	ldr	r3, [r7, #12]
   1c280:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1c282:	68fb      	ldr	r3, [r7, #12]
   1c284:	3b20      	subs	r3, #32
   1c286:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1c288:	68fb      	ldr	r3, [r7, #12]
}
   1c28a:	0018      	movs	r0, r3
   1c28c:	46bd      	mov	sp, r7
   1c28e:	b004      	add	sp, #16
   1c290:	bd80      	pop	{r7, pc}
   1c292:	46c0      	nop			; (mov r8, r8)
   1c294:	0001c299 	.word	0x0001c299

0001c298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1c298:	b580      	push	{r7, lr}
   1c29a:	b082      	sub	sp, #8
   1c29c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1c29e:	2300      	movs	r3, #0
   1c2a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1c2a2:	4b07      	ldr	r3, [pc, #28]	; (1c2c0 <prvTaskExitError+0x28>)
   1c2a4:	681b      	ldr	r3, [r3, #0]
   1c2a6:	3301      	adds	r3, #1
   1c2a8:	d001      	beq.n	1c2ae <prvTaskExitError+0x16>
   1c2aa:	b672      	cpsid	i
   1c2ac:	e7fe      	b.n	1c2ac <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1c2ae:	b672      	cpsid	i
	while( ulDummy == 0 )
   1c2b0:	46c0      	nop			; (mov r8, r8)
   1c2b2:	687b      	ldr	r3, [r7, #4]
   1c2b4:	2b00      	cmp	r3, #0
   1c2b6:	d0fc      	beq.n	1c2b2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1c2b8:	46c0      	nop			; (mov r8, r8)
   1c2ba:	46bd      	mov	sp, r7
   1c2bc:	b002      	add	sp, #8
   1c2be:	bd80      	pop	{r7, pc}
   1c2c0:	20000110 	.word	0x20000110

0001c2c4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1c2c4:	b580      	push	{r7, lr}
   1c2c6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1c2c8:	46c0      	nop			; (mov r8, r8)
   1c2ca:	46bd      	mov	sp, r7
   1c2cc:	bd80      	pop	{r7, pc}
	...

0001c2d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1c2d0:	4a0b      	ldr	r2, [pc, #44]	; (1c300 <pxCurrentTCBConst2>)
   1c2d2:	6813      	ldr	r3, [r2, #0]
   1c2d4:	6818      	ldr	r0, [r3, #0]
   1c2d6:	3020      	adds	r0, #32
   1c2d8:	f380 8809 	msr	PSP, r0
   1c2dc:	2002      	movs	r0, #2
   1c2de:	f380 8814 	msr	CONTROL, r0
   1c2e2:	f3bf 8f6f 	isb	sy
   1c2e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1c2e8:	46ae      	mov	lr, r5
   1c2ea:	bc08      	pop	{r3}
   1c2ec:	bc04      	pop	{r2}
   1c2ee:	b662      	cpsie	i
   1c2f0:	4718      	bx	r3
   1c2f2:	46c0      	nop			; (mov r8, r8)
   1c2f4:	46c0      	nop			; (mov r8, r8)
   1c2f6:	46c0      	nop			; (mov r8, r8)
   1c2f8:	46c0      	nop			; (mov r8, r8)
   1c2fa:	46c0      	nop			; (mov r8, r8)
   1c2fc:	46c0      	nop			; (mov r8, r8)
   1c2fe:	46c0      	nop			; (mov r8, r8)

0001c300 <pxCurrentTCBConst2>:
   1c300:	20003f6c 	.word	0x20003f6c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1c304:	46c0      	nop			; (mov r8, r8)
   1c306:	46c0      	nop			; (mov r8, r8)

0001c308 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1c308:	b580      	push	{r7, lr}
   1c30a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1c30c:	4b0e      	ldr	r3, [pc, #56]	; (1c348 <xPortStartScheduler+0x40>)
   1c30e:	4a0e      	ldr	r2, [pc, #56]	; (1c348 <xPortStartScheduler+0x40>)
   1c310:	6812      	ldr	r2, [r2, #0]
   1c312:	21ff      	movs	r1, #255	; 0xff
   1c314:	0409      	lsls	r1, r1, #16
   1c316:	430a      	orrs	r2, r1
   1c318:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1c31a:	4b0b      	ldr	r3, [pc, #44]	; (1c348 <xPortStartScheduler+0x40>)
   1c31c:	4a0a      	ldr	r2, [pc, #40]	; (1c348 <xPortStartScheduler+0x40>)
   1c31e:	6812      	ldr	r2, [r2, #0]
   1c320:	21ff      	movs	r1, #255	; 0xff
   1c322:	0609      	lsls	r1, r1, #24
   1c324:	430a      	orrs	r2, r1
   1c326:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1c328:	4b08      	ldr	r3, [pc, #32]	; (1c34c <xPortStartScheduler+0x44>)
   1c32a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1c32c:	4b08      	ldr	r3, [pc, #32]	; (1c350 <xPortStartScheduler+0x48>)
   1c32e:	2200      	movs	r2, #0
   1c330:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1c332:	4b08      	ldr	r3, [pc, #32]	; (1c354 <xPortStartScheduler+0x4c>)
   1c334:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1c336:	4b08      	ldr	r3, [pc, #32]	; (1c358 <xPortStartScheduler+0x50>)
   1c338:	4798      	blx	r3
	prvTaskExitError();
   1c33a:	4b08      	ldr	r3, [pc, #32]	; (1c35c <xPortStartScheduler+0x54>)
   1c33c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1c33e:	2300      	movs	r3, #0
}
   1c340:	0018      	movs	r0, r3
   1c342:	46bd      	mov	sp, r7
   1c344:	bd80      	pop	{r7, pc}
   1c346:	46c0      	nop			; (mov r8, r8)
   1c348:	e000ed20 	.word	0xe000ed20
   1c34c:	0001c469 	.word	0x0001c469
   1c350:	20000110 	.word	0x20000110
   1c354:	0001c2d1 	.word	0x0001c2d1
   1c358:	0001e9c5 	.word	0x0001e9c5
   1c35c:	0001c299 	.word	0x0001c299

0001c360 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1c360:	b580      	push	{r7, lr}
   1c362:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1c364:	4b03      	ldr	r3, [pc, #12]	; (1c374 <vPortYield+0x14>)
   1c366:	2280      	movs	r2, #128	; 0x80
   1c368:	0552      	lsls	r2, r2, #21
   1c36a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1c36c:	46c0      	nop			; (mov r8, r8)
   1c36e:	46bd      	mov	sp, r7
   1c370:	bd80      	pop	{r7, pc}
   1c372:	46c0      	nop			; (mov r8, r8)
   1c374:	e000ed04 	.word	0xe000ed04

0001c378 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1c378:	b580      	push	{r7, lr}
   1c37a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1c37c:	b672      	cpsid	i
    uxCriticalNesting++;
   1c37e:	4b06      	ldr	r3, [pc, #24]	; (1c398 <vPortEnterCritical+0x20>)
   1c380:	681b      	ldr	r3, [r3, #0]
   1c382:	1c5a      	adds	r2, r3, #1
   1c384:	4b04      	ldr	r3, [pc, #16]	; (1c398 <vPortEnterCritical+0x20>)
   1c386:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1c388:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1c38c:	f3bf 8f6f 	isb	sy
}
   1c390:	46c0      	nop			; (mov r8, r8)
   1c392:	46bd      	mov	sp, r7
   1c394:	bd80      	pop	{r7, pc}
   1c396:	46c0      	nop			; (mov r8, r8)
   1c398:	20000110 	.word	0x20000110

0001c39c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1c39c:	b580      	push	{r7, lr}
   1c39e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1c3a0:	4b09      	ldr	r3, [pc, #36]	; (1c3c8 <vPortExitCritical+0x2c>)
   1c3a2:	681b      	ldr	r3, [r3, #0]
   1c3a4:	2b00      	cmp	r3, #0
   1c3a6:	d101      	bne.n	1c3ac <vPortExitCritical+0x10>
   1c3a8:	b672      	cpsid	i
   1c3aa:	e7fe      	b.n	1c3aa <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1c3ac:	4b06      	ldr	r3, [pc, #24]	; (1c3c8 <vPortExitCritical+0x2c>)
   1c3ae:	681b      	ldr	r3, [r3, #0]
   1c3b0:	1e5a      	subs	r2, r3, #1
   1c3b2:	4b05      	ldr	r3, [pc, #20]	; (1c3c8 <vPortExitCritical+0x2c>)
   1c3b4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1c3b6:	4b04      	ldr	r3, [pc, #16]	; (1c3c8 <vPortExitCritical+0x2c>)
   1c3b8:	681b      	ldr	r3, [r3, #0]
   1c3ba:	2b00      	cmp	r3, #0
   1c3bc:	d100      	bne.n	1c3c0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1c3be:	b662      	cpsie	i
    }
}
   1c3c0:	46c0      	nop			; (mov r8, r8)
   1c3c2:	46bd      	mov	sp, r7
   1c3c4:	bd80      	pop	{r7, pc}
   1c3c6:	46c0      	nop			; (mov r8, r8)
   1c3c8:	20000110 	.word	0x20000110

0001c3cc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1c3cc:	f3ef 8010 	mrs	r0, PRIMASK
   1c3d0:	b672      	cpsid	i
   1c3d2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1c3d4:	46c0      	nop			; (mov r8, r8)
   1c3d6:	0018      	movs	r0, r3

0001c3d8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1c3d8:	f380 8810 	msr	PRIMASK, r0
   1c3dc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1c3de:	46c0      	nop			; (mov r8, r8)

0001c3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1c3e0:	f3ef 8009 	mrs	r0, PSP
   1c3e4:	4b0e      	ldr	r3, [pc, #56]	; (1c420 <pxCurrentTCBConst>)
   1c3e6:	681a      	ldr	r2, [r3, #0]
   1c3e8:	3820      	subs	r0, #32
   1c3ea:	6010      	str	r0, [r2, #0]
   1c3ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c3ee:	4644      	mov	r4, r8
   1c3f0:	464d      	mov	r5, r9
   1c3f2:	4656      	mov	r6, sl
   1c3f4:	465f      	mov	r7, fp
   1c3f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c3f8:	b508      	push	{r3, lr}
   1c3fa:	b672      	cpsid	i
   1c3fc:	f002 fae2 	bl	1e9c4 <vTaskSwitchContext>
   1c400:	b662      	cpsie	i
   1c402:	bc0c      	pop	{r2, r3}
   1c404:	6811      	ldr	r1, [r2, #0]
   1c406:	6808      	ldr	r0, [r1, #0]
   1c408:	3010      	adds	r0, #16
   1c40a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c40c:	46a0      	mov	r8, r4
   1c40e:	46a9      	mov	r9, r5
   1c410:	46b2      	mov	sl, r6
   1c412:	46bb      	mov	fp, r7
   1c414:	f380 8809 	msr	PSP, r0
   1c418:	3820      	subs	r0, #32
   1c41a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c41c:	4718      	bx	r3
   1c41e:	46c0      	nop			; (mov r8, r8)

0001c420 <pxCurrentTCBConst>:
   1c420:	20003f6c 	.word	0x20003f6c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1c424:	46c0      	nop			; (mov r8, r8)
   1c426:	46c0      	nop			; (mov r8, r8)

0001c428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1c428:	b580      	push	{r7, lr}
   1c42a:	b082      	sub	sp, #8
   1c42c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1c42e:	4b0a      	ldr	r3, [pc, #40]	; (1c458 <SysTick_Handler+0x30>)
   1c430:	4798      	blx	r3
   1c432:	0003      	movs	r3, r0
   1c434:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1c436:	4b09      	ldr	r3, [pc, #36]	; (1c45c <SysTick_Handler+0x34>)
   1c438:	4798      	blx	r3
   1c43a:	1e03      	subs	r3, r0, #0
   1c43c:	d003      	beq.n	1c446 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1c43e:	4b08      	ldr	r3, [pc, #32]	; (1c460 <SysTick_Handler+0x38>)
   1c440:	2280      	movs	r2, #128	; 0x80
   1c442:	0552      	lsls	r2, r2, #21
   1c444:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1c446:	687b      	ldr	r3, [r7, #4]
   1c448:	0018      	movs	r0, r3
   1c44a:	4b06      	ldr	r3, [pc, #24]	; (1c464 <SysTick_Handler+0x3c>)
   1c44c:	4798      	blx	r3
}
   1c44e:	46c0      	nop			; (mov r8, r8)
   1c450:	46bd      	mov	sp, r7
   1c452:	b002      	add	sp, #8
   1c454:	bd80      	pop	{r7, pc}
   1c456:	46c0      	nop			; (mov r8, r8)
   1c458:	0001c3cd 	.word	0x0001c3cd
   1c45c:	0001e7d5 	.word	0x0001e7d5
   1c460:	e000ed04 	.word	0xe000ed04
   1c464:	0001c3d9 	.word	0x0001c3d9

0001c468 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1c468:	b5b0      	push	{r4, r5, r7, lr}
   1c46a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1c46c:	4b0b      	ldr	r3, [pc, #44]	; (1c49c <prvSetupTimerInterrupt+0x34>)
   1c46e:	2200      	movs	r2, #0
   1c470:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1c472:	4b0b      	ldr	r3, [pc, #44]	; (1c4a0 <prvSetupTimerInterrupt+0x38>)
   1c474:	2200      	movs	r2, #0
   1c476:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1c478:	4c0a      	ldr	r4, [pc, #40]	; (1c4a4 <prvSetupTimerInterrupt+0x3c>)
   1c47a:	2000      	movs	r0, #0
   1c47c:	4b0a      	ldr	r3, [pc, #40]	; (1c4a8 <prvSetupTimerInterrupt+0x40>)
   1c47e:	4798      	blx	r3
   1c480:	4b0a      	ldr	r3, [pc, #40]	; (1c4ac <prvSetupTimerInterrupt+0x44>)
   1c482:	22fa      	movs	r2, #250	; 0xfa
   1c484:	0091      	lsls	r1, r2, #2
   1c486:	4798      	blx	r3
   1c488:	0003      	movs	r3, r0
   1c48a:	3b01      	subs	r3, #1
   1c48c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1c48e:	4b03      	ldr	r3, [pc, #12]	; (1c49c <prvSetupTimerInterrupt+0x34>)
   1c490:	2207      	movs	r2, #7
   1c492:	601a      	str	r2, [r3, #0]
}
   1c494:	46c0      	nop			; (mov r8, r8)
   1c496:	46bd      	mov	sp, r7
   1c498:	bdb0      	pop	{r4, r5, r7, pc}
   1c49a:	46c0      	nop			; (mov r8, r8)
   1c49c:	e000e010 	.word	0xe000e010
   1c4a0:	e000e018 	.word	0xe000e018
   1c4a4:	e000e014 	.word	0xe000e014
   1c4a8:	0002bfa9 	.word	0x0002bfa9
   1c4ac:	00034bf5 	.word	0x00034bf5

0001c4b0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1c4b0:	b580      	push	{r7, lr}
   1c4b2:	b084      	sub	sp, #16
   1c4b4:	af00      	add	r7, sp, #0
   1c4b6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1c4b8:	2300      	movs	r3, #0
   1c4ba:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1c4bc:	687b      	ldr	r3, [r7, #4]
   1c4be:	2207      	movs	r2, #7
   1c4c0:	4013      	ands	r3, r2
   1c4c2:	d004      	beq.n	1c4ce <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1c4c4:	687b      	ldr	r3, [r7, #4]
   1c4c6:	2207      	movs	r2, #7
   1c4c8:	4393      	bics	r3, r2
   1c4ca:	3308      	adds	r3, #8
   1c4cc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1c4ce:	4b21      	ldr	r3, [pc, #132]	; (1c554 <pvPortMalloc+0xa4>)
   1c4d0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1c4d2:	4b21      	ldr	r3, [pc, #132]	; (1c558 <pvPortMalloc+0xa8>)
   1c4d4:	681b      	ldr	r3, [r3, #0]
   1c4d6:	2b00      	cmp	r3, #0
   1c4d8:	d105      	bne.n	1c4e6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1c4da:	4b20      	ldr	r3, [pc, #128]	; (1c55c <pvPortMalloc+0xac>)
   1c4dc:	2207      	movs	r2, #7
   1c4de:	4393      	bics	r3, r2
   1c4e0:	001a      	movs	r2, r3
   1c4e2:	4b1d      	ldr	r3, [pc, #116]	; (1c558 <pvPortMalloc+0xa8>)
   1c4e4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c4e6:	4b1e      	ldr	r3, [pc, #120]	; (1c560 <pvPortMalloc+0xb0>)
   1c4e8:	681a      	ldr	r2, [r3, #0]
   1c4ea:	687b      	ldr	r3, [r7, #4]
   1c4ec:	18d3      	adds	r3, r2, r3
   1c4ee:	4a1d      	ldr	r2, [pc, #116]	; (1c564 <pvPortMalloc+0xb4>)
   1c4f0:	4293      	cmp	r3, r2
   1c4f2:	d813      	bhi.n	1c51c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1c4f4:	4b1a      	ldr	r3, [pc, #104]	; (1c560 <pvPortMalloc+0xb0>)
   1c4f6:	681a      	ldr	r2, [r3, #0]
   1c4f8:	687b      	ldr	r3, [r7, #4]
   1c4fa:	18d2      	adds	r2, r2, r3
   1c4fc:	4b18      	ldr	r3, [pc, #96]	; (1c560 <pvPortMalloc+0xb0>)
   1c4fe:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c500:	429a      	cmp	r2, r3
   1c502:	d90b      	bls.n	1c51c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1c504:	4b14      	ldr	r3, [pc, #80]	; (1c558 <pvPortMalloc+0xa8>)
   1c506:	681a      	ldr	r2, [r3, #0]
   1c508:	4b15      	ldr	r3, [pc, #84]	; (1c560 <pvPortMalloc+0xb0>)
   1c50a:	681b      	ldr	r3, [r3, #0]
   1c50c:	18d3      	adds	r3, r2, r3
   1c50e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1c510:	4b13      	ldr	r3, [pc, #76]	; (1c560 <pvPortMalloc+0xb0>)
   1c512:	681a      	ldr	r2, [r3, #0]
   1c514:	687b      	ldr	r3, [r7, #4]
   1c516:	18d2      	adds	r2, r2, r3
   1c518:	4b11      	ldr	r3, [pc, #68]	; (1c560 <pvPortMalloc+0xb0>)
   1c51a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1c51c:	68fb      	ldr	r3, [r7, #12]
   1c51e:	2b00      	cmp	r3, #0
   1c520:	d006      	beq.n	1c530 <pvPortMalloc+0x80>
   1c522:	68fb      	ldr	r3, [r7, #12]
   1c524:	687a      	ldr	r2, [r7, #4]
   1c526:	0019      	movs	r1, r3
   1c528:	2094      	movs	r0, #148	; 0x94
   1c52a:	4b0f      	ldr	r3, [pc, #60]	; (1c568 <pvPortMalloc+0xb8>)
   1c52c:	4798      	blx	r3
   1c52e:	e005      	b.n	1c53c <pvPortMalloc+0x8c>
   1c530:	68fb      	ldr	r3, [r7, #12]
   1c532:	687a      	ldr	r2, [r7, #4]
   1c534:	0019      	movs	r1, r3
   1c536:	20e8      	movs	r0, #232	; 0xe8
   1c538:	4b0b      	ldr	r3, [pc, #44]	; (1c568 <pvPortMalloc+0xb8>)
   1c53a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1c53c:	4b0b      	ldr	r3, [pc, #44]	; (1c56c <pvPortMalloc+0xbc>)
   1c53e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1c540:	68fb      	ldr	r3, [r7, #12]
   1c542:	2b00      	cmp	r3, #0
   1c544:	d101      	bne.n	1c54a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1c546:	4b0a      	ldr	r3, [pc, #40]	; (1c570 <pvPortMalloc+0xc0>)
   1c548:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1c54a:	68fb      	ldr	r3, [r7, #12]
}
   1c54c:	0018      	movs	r0, r3
   1c54e:	46bd      	mov	sp, r7
   1c550:	b004      	add	sp, #16
   1c552:	bd80      	pop	{r7, pc}
   1c554:	0001e631 	.word	0x0001e631
   1c558:	20003f68 	.word	0x20003f68
   1c55c:	20000ca4 	.word	0x20000ca4
   1c560:	20003f64 	.word	0x20003f64
   1c564:	000032bf 	.word	0x000032bf
   1c568:	0001ac21 	.word	0x0001ac21
   1c56c:	0001e649 	.word	0x0001e649
   1c570:	00034bc5 	.word	0x00034bc5

0001c574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1c574:	b580      	push	{r7, lr}
   1c576:	b082      	sub	sp, #8
   1c578:	af00      	add	r7, sp, #0
   1c57a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1c57c:	687b      	ldr	r3, [r7, #4]
   1c57e:	2b00      	cmp	r3, #0
   1c580:	d001      	beq.n	1c586 <vPortFree+0x12>
   1c582:	b672      	cpsid	i
   1c584:	e7fe      	b.n	1c584 <vPortFree+0x10>
}
   1c586:	46c0      	nop			; (mov r8, r8)
   1c588:	46bd      	mov	sp, r7
   1c58a:	b002      	add	sp, #8
   1c58c:	bd80      	pop	{r7, pc}
	...

0001c590 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1c590:	b580      	push	{r7, lr}
   1c592:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1c594:	4b03      	ldr	r3, [pc, #12]	; (1c5a4 <xPortGetFreeHeapSize+0x14>)
   1c596:	681b      	ldr	r3, [r3, #0]
   1c598:	22cb      	movs	r2, #203	; 0xcb
   1c59a:	0192      	lsls	r2, r2, #6
   1c59c:	1ad3      	subs	r3, r2, r3
}
   1c59e:	0018      	movs	r0, r3
   1c5a0:	46bd      	mov	sp, r7
   1c5a2:	bd80      	pop	{r7, pc}
   1c5a4:	20003f64 	.word	0x20003f64

0001c5a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1c5a8:	b580      	push	{r7, lr}
   1c5aa:	b084      	sub	sp, #16
   1c5ac:	af00      	add	r7, sp, #0
   1c5ae:	6078      	str	r0, [r7, #4]
   1c5b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c5b2:	687b      	ldr	r3, [r7, #4]
   1c5b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1c5b6:	68fb      	ldr	r3, [r7, #12]
   1c5b8:	2b00      	cmp	r3, #0
   1c5ba:	d101      	bne.n	1c5c0 <xQueueGenericReset+0x18>
   1c5bc:	b672      	cpsid	i
   1c5be:	e7fe      	b.n	1c5be <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1c5c0:	4b23      	ldr	r3, [pc, #140]	; (1c650 <xQueueGenericReset+0xa8>)
   1c5c2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1c5c4:	68fb      	ldr	r3, [r7, #12]
   1c5c6:	681a      	ldr	r2, [r3, #0]
   1c5c8:	68fb      	ldr	r3, [r7, #12]
   1c5ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1c5cc:	68fb      	ldr	r3, [r7, #12]
   1c5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c5d0:	434b      	muls	r3, r1
   1c5d2:	18d2      	adds	r2, r2, r3
   1c5d4:	68fb      	ldr	r3, [r7, #12]
   1c5d6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1c5d8:	68fb      	ldr	r3, [r7, #12]
   1c5da:	2200      	movs	r2, #0
   1c5dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1c5de:	68fb      	ldr	r3, [r7, #12]
   1c5e0:	681a      	ldr	r2, [r3, #0]
   1c5e2:	68fb      	ldr	r3, [r7, #12]
   1c5e4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1c5e6:	68fb      	ldr	r3, [r7, #12]
   1c5e8:	681a      	ldr	r2, [r3, #0]
   1c5ea:	68fb      	ldr	r3, [r7, #12]
   1c5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c5ee:	1e59      	subs	r1, r3, #1
   1c5f0:	68fb      	ldr	r3, [r7, #12]
   1c5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c5f4:	434b      	muls	r3, r1
   1c5f6:	18d2      	adds	r2, r2, r3
   1c5f8:	68fb      	ldr	r3, [r7, #12]
   1c5fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1c5fc:	68fb      	ldr	r3, [r7, #12]
   1c5fe:	2244      	movs	r2, #68	; 0x44
   1c600:	21ff      	movs	r1, #255	; 0xff
   1c602:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1c604:	68fb      	ldr	r3, [r7, #12]
   1c606:	2245      	movs	r2, #69	; 0x45
   1c608:	21ff      	movs	r1, #255	; 0xff
   1c60a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1c60c:	683b      	ldr	r3, [r7, #0]
   1c60e:	2b00      	cmp	r3, #0
   1c610:	d10d      	bne.n	1c62e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c612:	68fb      	ldr	r3, [r7, #12]
   1c614:	691b      	ldr	r3, [r3, #16]
   1c616:	2b00      	cmp	r3, #0
   1c618:	d013      	beq.n	1c642 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c61a:	68fb      	ldr	r3, [r7, #12]
   1c61c:	3310      	adds	r3, #16
   1c61e:	0018      	movs	r0, r3
   1c620:	4b0c      	ldr	r3, [pc, #48]	; (1c654 <xQueueGenericReset+0xac>)
   1c622:	4798      	blx	r3
   1c624:	1e03      	subs	r3, r0, #0
   1c626:	d00c      	beq.n	1c642 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1c628:	4b0b      	ldr	r3, [pc, #44]	; (1c658 <xQueueGenericReset+0xb0>)
   1c62a:	4798      	blx	r3
   1c62c:	e009      	b.n	1c642 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1c62e:	68fb      	ldr	r3, [r7, #12]
   1c630:	3310      	adds	r3, #16
   1c632:	0018      	movs	r0, r3
   1c634:	4b09      	ldr	r3, [pc, #36]	; (1c65c <xQueueGenericReset+0xb4>)
   1c636:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1c638:	68fb      	ldr	r3, [r7, #12]
   1c63a:	3324      	adds	r3, #36	; 0x24
   1c63c:	0018      	movs	r0, r3
   1c63e:	4b07      	ldr	r3, [pc, #28]	; (1c65c <xQueueGenericReset+0xb4>)
   1c640:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1c642:	4b07      	ldr	r3, [pc, #28]	; (1c660 <xQueueGenericReset+0xb8>)
   1c644:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1c646:	2301      	movs	r3, #1
}
   1c648:	0018      	movs	r0, r3
   1c64a:	46bd      	mov	sp, r7
   1c64c:	b004      	add	sp, #16
   1c64e:	bd80      	pop	{r7, pc}
   1c650:	0001c379 	.word	0x0001c379
   1c654:	0001ec09 	.word	0x0001ec09
   1c658:	0001c361 	.word	0x0001c361
   1c65c:	0001c0f1 	.word	0x0001c0f1
   1c660:	0001c39d 	.word	0x0001c39d

0001c664 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1c664:	b590      	push	{r4, r7, lr}
   1c666:	b08b      	sub	sp, #44	; 0x2c
   1c668:	af02      	add	r7, sp, #8
   1c66a:	60f8      	str	r0, [r7, #12]
   1c66c:	60b9      	str	r1, [r7, #8]
   1c66e:	1dfb      	adds	r3, r7, #7
   1c670:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1c672:	68fb      	ldr	r3, [r7, #12]
   1c674:	2b00      	cmp	r3, #0
   1c676:	d101      	bne.n	1c67c <xQueueGenericCreate+0x18>
   1c678:	b672      	cpsid	i
   1c67a:	e7fe      	b.n	1c67a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1c67c:	68bb      	ldr	r3, [r7, #8]
   1c67e:	2b00      	cmp	r3, #0
   1c680:	d102      	bne.n	1c688 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1c682:	2300      	movs	r3, #0
   1c684:	61fb      	str	r3, [r7, #28]
   1c686:	e003      	b.n	1c690 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c688:	68fb      	ldr	r3, [r7, #12]
   1c68a:	68ba      	ldr	r2, [r7, #8]
   1c68c:	4353      	muls	r3, r2
   1c68e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1c690:	69fb      	ldr	r3, [r7, #28]
   1c692:	3354      	adds	r3, #84	; 0x54
   1c694:	0018      	movs	r0, r3
   1c696:	4b19      	ldr	r3, [pc, #100]	; (1c6fc <xQueueGenericCreate+0x98>)
   1c698:	4798      	blx	r3
   1c69a:	0003      	movs	r3, r0
   1c69c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1c69e:	69bb      	ldr	r3, [r7, #24]
   1c6a0:	2b00      	cmp	r3, #0
   1c6a2:	d00d      	beq.n	1c6c0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1c6a4:	69bb      	ldr	r3, [r7, #24]
   1c6a6:	3354      	adds	r3, #84	; 0x54
   1c6a8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1c6aa:	1dfb      	adds	r3, r7, #7
   1c6ac:	781c      	ldrb	r4, [r3, #0]
   1c6ae:	697a      	ldr	r2, [r7, #20]
   1c6b0:	68b9      	ldr	r1, [r7, #8]
   1c6b2:	68f8      	ldr	r0, [r7, #12]
   1c6b4:	69bb      	ldr	r3, [r7, #24]
   1c6b6:	9300      	str	r3, [sp, #0]
   1c6b8:	0023      	movs	r3, r4
   1c6ba:	4c11      	ldr	r4, [pc, #68]	; (1c700 <xQueueGenericCreate+0x9c>)
   1c6bc:	47a0      	blx	r4
   1c6be:	e017      	b.n	1c6f0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1c6c0:	4b10      	ldr	r3, [pc, #64]	; (1c704 <xQueueGenericCreate+0xa0>)
   1c6c2:	4798      	blx	r3
   1c6c4:	0003      	movs	r3, r0
   1c6c6:	0018      	movs	r0, r3
   1c6c8:	4b0f      	ldr	r3, [pc, #60]	; (1c708 <xQueueGenericCreate+0xa4>)
   1c6ca:	4798      	blx	r3
   1c6cc:	0003      	movs	r3, r0
   1c6ce:	001a      	movs	r2, r3
   1c6d0:	4b0e      	ldr	r3, [pc, #56]	; (1c70c <xQueueGenericCreate+0xa8>)
   1c6d2:	881b      	ldrh	r3, [r3, #0]
   1c6d4:	4013      	ands	r3, r2
   1c6d6:	b29b      	uxth	r3, r3
   1c6d8:	2b00      	cmp	r3, #0
   1c6da:	d009      	beq.n	1c6f0 <xQueueGenericCreate+0x8c>
   1c6dc:	1dfb      	adds	r3, r7, #7
   1c6de:	781b      	ldrb	r3, [r3, #0]
   1c6e0:	4a0b      	ldr	r2, [pc, #44]	; (1c710 <xQueueGenericCreate+0xac>)
   1c6e2:	5cd3      	ldrb	r3, [r2, r3]
   1c6e4:	3340      	adds	r3, #64	; 0x40
   1c6e6:	b2db      	uxtb	r3, r3
   1c6e8:	2100      	movs	r1, #0
   1c6ea:	0018      	movs	r0, r3
   1c6ec:	4b09      	ldr	r3, [pc, #36]	; (1c714 <xQueueGenericCreate+0xb0>)
   1c6ee:	4798      	blx	r3
		}

		return pxNewQueue;
   1c6f0:	69bb      	ldr	r3, [r7, #24]
	}
   1c6f2:	0018      	movs	r0, r3
   1c6f4:	46bd      	mov	sp, r7
   1c6f6:	b009      	add	sp, #36	; 0x24
   1c6f8:	bd90      	pop	{r4, r7, pc}
   1c6fa:	46c0      	nop			; (mov r8, r8)
   1c6fc:	0001c4b1 	.word	0x0001c4b1
   1c700:	0001c719 	.word	0x0001c719
   1c704:	0001a615 	.word	0x0001a615
   1c708:	0001a379 	.word	0x0001a379
   1c70c:	2000010c 	.word	0x2000010c
   1c710:	20000100 	.word	0x20000100
   1c714:	0001b079 	.word	0x0001b079

0001c718 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1c718:	b5b0      	push	{r4, r5, r7, lr}
   1c71a:	b084      	sub	sp, #16
   1c71c:	af00      	add	r7, sp, #0
   1c71e:	60f8      	str	r0, [r7, #12]
   1c720:	60b9      	str	r1, [r7, #8]
   1c722:	607a      	str	r2, [r7, #4]
   1c724:	001a      	movs	r2, r3
   1c726:	1cfb      	adds	r3, r7, #3
   1c728:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1c72a:	68bb      	ldr	r3, [r7, #8]
   1c72c:	2b00      	cmp	r3, #0
   1c72e:	d103      	bne.n	1c738 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1c730:	6a3b      	ldr	r3, [r7, #32]
   1c732:	6a3a      	ldr	r2, [r7, #32]
   1c734:	601a      	str	r2, [r3, #0]
   1c736:	e002      	b.n	1c73e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1c738:	6a3b      	ldr	r3, [r7, #32]
   1c73a:	687a      	ldr	r2, [r7, #4]
   1c73c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1c73e:	6a3b      	ldr	r3, [r7, #32]
   1c740:	68fa      	ldr	r2, [r7, #12]
   1c742:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1c744:	6a3b      	ldr	r3, [r7, #32]
   1c746:	68ba      	ldr	r2, [r7, #8]
   1c748:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1c74a:	6a3b      	ldr	r3, [r7, #32]
   1c74c:	2101      	movs	r1, #1
   1c74e:	0018      	movs	r0, r3
   1c750:	4b41      	ldr	r3, [pc, #260]	; (1c858 <prvInitialiseNewQueue+0x140>)
   1c752:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1c754:	6a3b      	ldr	r3, [r7, #32]
   1c756:	1cfa      	adds	r2, r7, #3
   1c758:	2150      	movs	r1, #80	; 0x50
   1c75a:	7812      	ldrb	r2, [r2, #0]
   1c75c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1c75e:	6a3b      	ldr	r3, [r7, #32]
   1c760:	2200      	movs	r2, #0
   1c762:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1c764:	6a3b      	ldr	r3, [r7, #32]
   1c766:	0018      	movs	r0, r3
   1c768:	4b3c      	ldr	r3, [pc, #240]	; (1c85c <prvInitialiseNewQueue+0x144>)
   1c76a:	4798      	blx	r3
   1c76c:	0003      	movs	r3, r0
   1c76e:	001a      	movs	r2, r3
   1c770:	4b3b      	ldr	r3, [pc, #236]	; (1c860 <prvInitialiseNewQueue+0x148>)
   1c772:	5c9b      	ldrb	r3, [r3, r2]
   1c774:	0018      	movs	r0, r3
   1c776:	4b3b      	ldr	r3, [pc, #236]	; (1c864 <prvInitialiseNewQueue+0x14c>)
   1c778:	4798      	blx	r3
   1c77a:	0003      	movs	r3, r0
   1c77c:	b29a      	uxth	r2, r3
   1c77e:	6a3b      	ldr	r3, [r7, #32]
   1c780:	0011      	movs	r1, r2
   1c782:	0018      	movs	r0, r3
   1c784:	4b38      	ldr	r3, [pc, #224]	; (1c868 <prvInitialiseNewQueue+0x150>)
   1c786:	4798      	blx	r3
   1c788:	4b38      	ldr	r3, [pc, #224]	; (1c86c <prvInitialiseNewQueue+0x154>)
   1c78a:	881a      	ldrh	r2, [r3, #0]
   1c78c:	6a3b      	ldr	r3, [r7, #32]
   1c78e:	0011      	movs	r1, r2
   1c790:	0018      	movs	r0, r3
   1c792:	4b37      	ldr	r3, [pc, #220]	; (1c870 <prvInitialiseNewQueue+0x158>)
   1c794:	4798      	blx	r3
   1c796:	6a3b      	ldr	r3, [r7, #32]
   1c798:	0018      	movs	r0, r3
   1c79a:	4b30      	ldr	r3, [pc, #192]	; (1c85c <prvInitialiseNewQueue+0x144>)
   1c79c:	4798      	blx	r3
   1c79e:	0003      	movs	r3, r0
   1c7a0:	001a      	movs	r2, r3
   1c7a2:	4b2f      	ldr	r3, [pc, #188]	; (1c860 <prvInitialiseNewQueue+0x148>)
   1c7a4:	5c9c      	ldrb	r4, [r3, r2]
   1c7a6:	6a3b      	ldr	r3, [r7, #32]
   1c7a8:	0018      	movs	r0, r3
   1c7aa:	4b32      	ldr	r3, [pc, #200]	; (1c874 <prvInitialiseNewQueue+0x15c>)
   1c7ac:	4798      	blx	r3
   1c7ae:	0003      	movs	r3, r0
   1c7b0:	b2db      	uxtb	r3, r3
   1c7b2:	0019      	movs	r1, r3
   1c7b4:	0020      	movs	r0, r4
   1c7b6:	4b30      	ldr	r3, [pc, #192]	; (1c878 <prvInitialiseNewQueue+0x160>)
   1c7b8:	4798      	blx	r3
   1c7ba:	4b30      	ldr	r3, [pc, #192]	; (1c87c <prvInitialiseNewQueue+0x164>)
   1c7bc:	4798      	blx	r3
   1c7be:	0003      	movs	r3, r0
   1c7c0:	0018      	movs	r0, r3
   1c7c2:	4b2f      	ldr	r3, [pc, #188]	; (1c880 <prvInitialiseNewQueue+0x168>)
   1c7c4:	4798      	blx	r3
   1c7c6:	0003      	movs	r3, r0
   1c7c8:	001a      	movs	r2, r3
   1c7ca:	4b2e      	ldr	r3, [pc, #184]	; (1c884 <prvInitialiseNewQueue+0x16c>)
   1c7cc:	881b      	ldrh	r3, [r3, #0]
   1c7ce:	4013      	ands	r3, r2
   1c7d0:	b29b      	uxth	r3, r3
   1c7d2:	2b00      	cmp	r3, #0
   1c7d4:	d029      	beq.n	1c82a <prvInitialiseNewQueue+0x112>
   1c7d6:	6a3b      	ldr	r3, [r7, #32]
   1c7d8:	0018      	movs	r0, r3
   1c7da:	4b2b      	ldr	r3, [pc, #172]	; (1c888 <prvInitialiseNewQueue+0x170>)
   1c7dc:	4798      	blx	r3
   1c7de:	0003      	movs	r3, r0
   1c7e0:	001a      	movs	r2, r3
   1c7e2:	4b28      	ldr	r3, [pc, #160]	; (1c884 <prvInitialiseNewQueue+0x16c>)
   1c7e4:	881b      	ldrh	r3, [r3, #0]
   1c7e6:	4013      	ands	r3, r2
   1c7e8:	b29b      	uxth	r3, r3
   1c7ea:	2b00      	cmp	r3, #0
   1c7ec:	d01d      	beq.n	1c82a <prvInitialiseNewQueue+0x112>
   1c7ee:	6a3b      	ldr	r3, [r7, #32]
   1c7f0:	0018      	movs	r0, r3
   1c7f2:	4b1a      	ldr	r3, [pc, #104]	; (1c85c <prvInitialiseNewQueue+0x144>)
   1c7f4:	4798      	blx	r3
   1c7f6:	0003      	movs	r3, r0
   1c7f8:	001a      	movs	r2, r3
   1c7fa:	4b19      	ldr	r3, [pc, #100]	; (1c860 <prvInitialiseNewQueue+0x148>)
   1c7fc:	5c9b      	ldrb	r3, [r3, r2]
   1c7fe:	3318      	adds	r3, #24
   1c800:	b2db      	uxtb	r3, r3
   1c802:	001d      	movs	r5, r3
   1c804:	6a3b      	ldr	r3, [r7, #32]
   1c806:	0018      	movs	r0, r3
   1c808:	4b14      	ldr	r3, [pc, #80]	; (1c85c <prvInitialiseNewQueue+0x144>)
   1c80a:	4798      	blx	r3
   1c80c:	0003      	movs	r3, r0
   1c80e:	001a      	movs	r2, r3
   1c810:	4b13      	ldr	r3, [pc, #76]	; (1c860 <prvInitialiseNewQueue+0x148>)
   1c812:	5c9c      	ldrb	r4, [r3, r2]
   1c814:	6a3b      	ldr	r3, [r7, #32]
   1c816:	0018      	movs	r0, r3
   1c818:	4b16      	ldr	r3, [pc, #88]	; (1c874 <prvInitialiseNewQueue+0x15c>)
   1c81a:	4798      	blx	r3
   1c81c:	0003      	movs	r3, r0
   1c81e:	b2db      	uxtb	r3, r3
   1c820:	001a      	movs	r2, r3
   1c822:	0021      	movs	r1, r4
   1c824:	0028      	movs	r0, r5
   1c826:	4b19      	ldr	r3, [pc, #100]	; (1c88c <prvInitialiseNewQueue+0x174>)
   1c828:	4798      	blx	r3
   1c82a:	6a3b      	ldr	r3, [r7, #32]
   1c82c:	0018      	movs	r0, r3
   1c82e:	4b0b      	ldr	r3, [pc, #44]	; (1c85c <prvInitialiseNewQueue+0x144>)
   1c830:	4798      	blx	r3
   1c832:	0003      	movs	r3, r0
   1c834:	001a      	movs	r2, r3
   1c836:	4b0a      	ldr	r3, [pc, #40]	; (1c860 <prvInitialiseNewQueue+0x148>)
   1c838:	5c9c      	ldrb	r4, [r3, r2]
   1c83a:	6a3b      	ldr	r3, [r7, #32]
   1c83c:	0018      	movs	r0, r3
   1c83e:	4b0d      	ldr	r3, [pc, #52]	; (1c874 <prvInitialiseNewQueue+0x15c>)
   1c840:	4798      	blx	r3
   1c842:	0003      	movs	r3, r0
   1c844:	b2db      	uxtb	r3, r3
   1c846:	2200      	movs	r2, #0
   1c848:	0019      	movs	r1, r3
   1c84a:	0020      	movs	r0, r4
   1c84c:	4b10      	ldr	r3, [pc, #64]	; (1c890 <prvInitialiseNewQueue+0x178>)
   1c84e:	4798      	blx	r3
}
   1c850:	46c0      	nop			; (mov r8, r8)
   1c852:	46bd      	mov	sp, r7
   1c854:	b004      	add	sp, #16
   1c856:	bdb0      	pop	{r4, r5, r7, pc}
   1c858:	0001c5a9 	.word	0x0001c5a9
   1c85c:	0001a339 	.word	0x0001a339
   1c860:	20000100 	.word	0x20000100
   1c864:	0001b8f9 	.word	0x0001b8f9
   1c868:	0001a45d 	.word	0x0001a45d
   1c86c:	2000010e 	.word	0x2000010e
   1c870:	0001a499 	.word	0x0001a499
   1c874:	0001a419 	.word	0x0001a419
   1c878:	0001ba91 	.word	0x0001ba91
   1c87c:	0001a615 	.word	0x0001a615
   1c880:	0001a379 	.word	0x0001a379
   1c884:	2000010c 	.word	0x2000010c
   1c888:	0001a439 	.word	0x0001a439
   1c88c:	0001ad71 	.word	0x0001ad71
   1c890:	0001b3cd 	.word	0x0001b3cd

0001c894 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1c894:	b590      	push	{r4, r7, lr}
   1c896:	b083      	sub	sp, #12
   1c898:	af00      	add	r7, sp, #0
   1c89a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1c89c:	687b      	ldr	r3, [r7, #4]
   1c89e:	2b00      	cmp	r3, #0
   1c8a0:	d00e      	beq.n	1c8c0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1c8a2:	687b      	ldr	r3, [r7, #4]
   1c8a4:	2200      	movs	r2, #0
   1c8a6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1c8a8:	687b      	ldr	r3, [r7, #4]
   1c8aa:	2200      	movs	r2, #0
   1c8ac:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1c8ae:	687b      	ldr	r3, [r7, #4]
   1c8b0:	2200      	movs	r2, #0
   1c8b2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1c8b4:	6878      	ldr	r0, [r7, #4]
   1c8b6:	2300      	movs	r3, #0
   1c8b8:	2200      	movs	r2, #0
   1c8ba:	2100      	movs	r1, #0
   1c8bc:	4c02      	ldr	r4, [pc, #8]	; (1c8c8 <prvInitialiseMutex+0x34>)
   1c8be:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1c8c0:	46c0      	nop			; (mov r8, r8)
   1c8c2:	46bd      	mov	sp, r7
   1c8c4:	b003      	add	sp, #12
   1c8c6:	bd90      	pop	{r4, r7, pc}
   1c8c8:	0001c90d 	.word	0x0001c90d

0001c8cc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1c8cc:	b580      	push	{r7, lr}
   1c8ce:	b086      	sub	sp, #24
   1c8d0:	af00      	add	r7, sp, #0
   1c8d2:	0002      	movs	r2, r0
   1c8d4:	1dfb      	adds	r3, r7, #7
   1c8d6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1c8d8:	2301      	movs	r3, #1
   1c8da:	617b      	str	r3, [r7, #20]
   1c8dc:	2300      	movs	r3, #0
   1c8de:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1c8e0:	1dfb      	adds	r3, r7, #7
   1c8e2:	781a      	ldrb	r2, [r3, #0]
   1c8e4:	6939      	ldr	r1, [r7, #16]
   1c8e6:	697b      	ldr	r3, [r7, #20]
   1c8e8:	0018      	movs	r0, r3
   1c8ea:	4b06      	ldr	r3, [pc, #24]	; (1c904 <xQueueCreateMutex+0x38>)
   1c8ec:	4798      	blx	r3
   1c8ee:	0003      	movs	r3, r0
   1c8f0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1c8f2:	68fb      	ldr	r3, [r7, #12]
   1c8f4:	0018      	movs	r0, r3
   1c8f6:	4b04      	ldr	r3, [pc, #16]	; (1c908 <xQueueCreateMutex+0x3c>)
   1c8f8:	4798      	blx	r3

		return pxNewQueue;
   1c8fa:	68fb      	ldr	r3, [r7, #12]
	}
   1c8fc:	0018      	movs	r0, r3
   1c8fe:	46bd      	mov	sp, r7
   1c900:	b006      	add	sp, #24
   1c902:	bd80      	pop	{r7, pc}
   1c904:	0001c665 	.word	0x0001c665
   1c908:	0001c895 	.word	0x0001c895

0001c90c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1c90c:	b5b0      	push	{r4, r5, r7, lr}
   1c90e:	b08a      	sub	sp, #40	; 0x28
   1c910:	af00      	add	r7, sp, #0
   1c912:	60f8      	str	r0, [r7, #12]
   1c914:	60b9      	str	r1, [r7, #8]
   1c916:	607a      	str	r2, [r7, #4]
   1c918:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1c91a:	2300      	movs	r3, #0
   1c91c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c91e:	68fb      	ldr	r3, [r7, #12]
   1c920:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1c922:	6a3b      	ldr	r3, [r7, #32]
   1c924:	2b00      	cmp	r3, #0
   1c926:	d101      	bne.n	1c92c <xQueueGenericSend+0x20>
   1c928:	b672      	cpsid	i
   1c92a:	e7fe      	b.n	1c92a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1c92c:	68bb      	ldr	r3, [r7, #8]
   1c92e:	2b00      	cmp	r3, #0
   1c930:	d103      	bne.n	1c93a <xQueueGenericSend+0x2e>
   1c932:	6a3b      	ldr	r3, [r7, #32]
   1c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c936:	2b00      	cmp	r3, #0
   1c938:	d101      	bne.n	1c93e <xQueueGenericSend+0x32>
   1c93a:	2301      	movs	r3, #1
   1c93c:	e000      	b.n	1c940 <xQueueGenericSend+0x34>
   1c93e:	2300      	movs	r3, #0
   1c940:	2b00      	cmp	r3, #0
   1c942:	d101      	bne.n	1c948 <xQueueGenericSend+0x3c>
   1c944:	b672      	cpsid	i
   1c946:	e7fe      	b.n	1c946 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1c948:	683b      	ldr	r3, [r7, #0]
   1c94a:	2b02      	cmp	r3, #2
   1c94c:	d103      	bne.n	1c956 <xQueueGenericSend+0x4a>
   1c94e:	6a3b      	ldr	r3, [r7, #32]
   1c950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c952:	2b01      	cmp	r3, #1
   1c954:	d101      	bne.n	1c95a <xQueueGenericSend+0x4e>
   1c956:	2301      	movs	r3, #1
   1c958:	e000      	b.n	1c95c <xQueueGenericSend+0x50>
   1c95a:	2300      	movs	r3, #0
   1c95c:	2b00      	cmp	r3, #0
   1c95e:	d101      	bne.n	1c964 <xQueueGenericSend+0x58>
   1c960:	b672      	cpsid	i
   1c962:	e7fe      	b.n	1c962 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c964:	4bbc      	ldr	r3, [pc, #752]	; (1cc58 <xQueueGenericSend+0x34c>)
   1c966:	4798      	blx	r3
   1c968:	1e03      	subs	r3, r0, #0
   1c96a:	d102      	bne.n	1c972 <xQueueGenericSend+0x66>
   1c96c:	687b      	ldr	r3, [r7, #4]
   1c96e:	2b00      	cmp	r3, #0
   1c970:	d101      	bne.n	1c976 <xQueueGenericSend+0x6a>
   1c972:	2301      	movs	r3, #1
   1c974:	e000      	b.n	1c978 <xQueueGenericSend+0x6c>
   1c976:	2300      	movs	r3, #0
   1c978:	2b00      	cmp	r3, #0
   1c97a:	d101      	bne.n	1c980 <xQueueGenericSend+0x74>
   1c97c:	b672      	cpsid	i
   1c97e:	e7fe      	b.n	1c97e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1c980:	4bb6      	ldr	r3, [pc, #728]	; (1cc5c <xQueueGenericSend+0x350>)
   1c982:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1c984:	6a3b      	ldr	r3, [r7, #32]
   1c986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c988:	6a3b      	ldr	r3, [r7, #32]
   1c98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c98c:	429a      	cmp	r2, r3
   1c98e:	d303      	bcc.n	1c998 <xQueueGenericSend+0x8c>
   1c990:	683b      	ldr	r3, [r7, #0]
   1c992:	2b02      	cmp	r3, #2
   1c994:	d000      	beq.n	1c998 <xQueueGenericSend+0x8c>
   1c996:	e08e      	b.n	1cab6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1c998:	4bb1      	ldr	r3, [pc, #708]	; (1cc60 <xQueueGenericSend+0x354>)
   1c99a:	4798      	blx	r3
   1c99c:	0003      	movs	r3, r0
   1c99e:	0018      	movs	r0, r3
   1c9a0:	4bb0      	ldr	r3, [pc, #704]	; (1cc64 <xQueueGenericSend+0x358>)
   1c9a2:	4798      	blx	r3
   1c9a4:	0003      	movs	r3, r0
   1c9a6:	001a      	movs	r2, r3
   1c9a8:	4baf      	ldr	r3, [pc, #700]	; (1cc68 <xQueueGenericSend+0x35c>)
   1c9aa:	881b      	ldrh	r3, [r3, #0]
   1c9ac:	4013      	ands	r3, r2
   1c9ae:	b29b      	uxth	r3, r3
   1c9b0:	2b00      	cmp	r3, #0
   1c9b2:	d02e      	beq.n	1ca12 <xQueueGenericSend+0x106>
   1c9b4:	6a3b      	ldr	r3, [r7, #32]
   1c9b6:	0018      	movs	r0, r3
   1c9b8:	4bac      	ldr	r3, [pc, #688]	; (1cc6c <xQueueGenericSend+0x360>)
   1c9ba:	4798      	blx	r3
   1c9bc:	0003      	movs	r3, r0
   1c9be:	001a      	movs	r2, r3
   1c9c0:	4ba9      	ldr	r3, [pc, #676]	; (1cc68 <xQueueGenericSend+0x35c>)
   1c9c2:	881b      	ldrh	r3, [r3, #0]
   1c9c4:	4013      	ands	r3, r2
   1c9c6:	b29b      	uxth	r3, r3
   1c9c8:	2b00      	cmp	r3, #0
   1c9ca:	d022      	beq.n	1ca12 <xQueueGenericSend+0x106>
   1c9cc:	683b      	ldr	r3, [r7, #0]
   1c9ce:	2b00      	cmp	r3, #0
   1c9d0:	d10b      	bne.n	1c9ea <xQueueGenericSend+0xde>
   1c9d2:	6a3b      	ldr	r3, [r7, #32]
   1c9d4:	0018      	movs	r0, r3
   1c9d6:	4ba6      	ldr	r3, [pc, #664]	; (1cc70 <xQueueGenericSend+0x364>)
   1c9d8:	4798      	blx	r3
   1c9da:	0003      	movs	r3, r0
   1c9dc:	001a      	movs	r2, r3
   1c9de:	4ba5      	ldr	r3, [pc, #660]	; (1cc74 <xQueueGenericSend+0x368>)
   1c9e0:	5c9b      	ldrb	r3, [r3, r2]
   1c9e2:	3320      	adds	r3, #32
   1c9e4:	b2db      	uxtb	r3, r3
   1c9e6:	001d      	movs	r5, r3
   1c9e8:	e000      	b.n	1c9ec <xQueueGenericSend+0xe0>
   1c9ea:	2525      	movs	r5, #37	; 0x25
   1c9ec:	6a3b      	ldr	r3, [r7, #32]
   1c9ee:	0018      	movs	r0, r3
   1c9f0:	4b9f      	ldr	r3, [pc, #636]	; (1cc70 <xQueueGenericSend+0x364>)
   1c9f2:	4798      	blx	r3
   1c9f4:	0003      	movs	r3, r0
   1c9f6:	001a      	movs	r2, r3
   1c9f8:	4b9e      	ldr	r3, [pc, #632]	; (1cc74 <xQueueGenericSend+0x368>)
   1c9fa:	5c9c      	ldrb	r4, [r3, r2]
   1c9fc:	6a3b      	ldr	r3, [r7, #32]
   1c9fe:	0018      	movs	r0, r3
   1ca00:	4b9d      	ldr	r3, [pc, #628]	; (1cc78 <xQueueGenericSend+0x36c>)
   1ca02:	4798      	blx	r3
   1ca04:	0003      	movs	r3, r0
   1ca06:	b2db      	uxtb	r3, r3
   1ca08:	001a      	movs	r2, r3
   1ca0a:	0021      	movs	r1, r4
   1ca0c:	0028      	movs	r0, r5
   1ca0e:	4b9b      	ldr	r3, [pc, #620]	; (1cc7c <xQueueGenericSend+0x370>)
   1ca10:	4798      	blx	r3
   1ca12:	6a3b      	ldr	r3, [r7, #32]
   1ca14:	0018      	movs	r0, r3
   1ca16:	4b96      	ldr	r3, [pc, #600]	; (1cc70 <xQueueGenericSend+0x364>)
   1ca18:	4798      	blx	r3
   1ca1a:	0003      	movs	r3, r0
   1ca1c:	001a      	movs	r2, r3
   1ca1e:	4b95      	ldr	r3, [pc, #596]	; (1cc74 <xQueueGenericSend+0x368>)
   1ca20:	5c9c      	ldrb	r4, [r3, r2]
   1ca22:	6a3b      	ldr	r3, [r7, #32]
   1ca24:	0018      	movs	r0, r3
   1ca26:	4b94      	ldr	r3, [pc, #592]	; (1cc78 <xQueueGenericSend+0x36c>)
   1ca28:	4798      	blx	r3
   1ca2a:	0003      	movs	r3, r0
   1ca2c:	b2dd      	uxtb	r5, r3
   1ca2e:	6a3b      	ldr	r3, [r7, #32]
   1ca30:	0018      	movs	r0, r3
   1ca32:	4b8f      	ldr	r3, [pc, #572]	; (1cc70 <xQueueGenericSend+0x364>)
   1ca34:	4798      	blx	r3
   1ca36:	0003      	movs	r3, r0
   1ca38:	001a      	movs	r2, r3
   1ca3a:	4b8e      	ldr	r3, [pc, #568]	; (1cc74 <xQueueGenericSend+0x368>)
   1ca3c:	5c9b      	ldrb	r3, [r3, r2]
   1ca3e:	2b02      	cmp	r3, #2
   1ca40:	d005      	beq.n	1ca4e <xQueueGenericSend+0x142>
   1ca42:	6a3b      	ldr	r3, [r7, #32]
   1ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ca46:	b2db      	uxtb	r3, r3
   1ca48:	3301      	adds	r3, #1
   1ca4a:	b2db      	uxtb	r3, r3
   1ca4c:	e000      	b.n	1ca50 <xQueueGenericSend+0x144>
   1ca4e:	2300      	movs	r3, #0
   1ca50:	001a      	movs	r2, r3
   1ca52:	0029      	movs	r1, r5
   1ca54:	0020      	movs	r0, r4
   1ca56:	4b8a      	ldr	r3, [pc, #552]	; (1cc80 <xQueueGenericSend+0x374>)
   1ca58:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1ca5a:	683a      	ldr	r2, [r7, #0]
   1ca5c:	68b9      	ldr	r1, [r7, #8]
   1ca5e:	6a3b      	ldr	r3, [r7, #32]
   1ca60:	0018      	movs	r0, r3
   1ca62:	4b88      	ldr	r3, [pc, #544]	; (1cc84 <xQueueGenericSend+0x378>)
   1ca64:	4798      	blx	r3
   1ca66:	0003      	movs	r3, r0
   1ca68:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ca6a:	6a3b      	ldr	r3, [r7, #32]
   1ca6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	d00a      	beq.n	1ca88 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ca72:	683a      	ldr	r2, [r7, #0]
   1ca74:	6a3b      	ldr	r3, [r7, #32]
   1ca76:	0011      	movs	r1, r2
   1ca78:	0018      	movs	r0, r3
   1ca7a:	4b83      	ldr	r3, [pc, #524]	; (1cc88 <xQueueGenericSend+0x37c>)
   1ca7c:	4798      	blx	r3
   1ca7e:	1e03      	subs	r3, r0, #0
   1ca80:	d015      	beq.n	1caae <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1ca82:	4b82      	ldr	r3, [pc, #520]	; (1cc8c <xQueueGenericSend+0x380>)
   1ca84:	4798      	blx	r3
   1ca86:	e012      	b.n	1caae <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ca88:	6a3b      	ldr	r3, [r7, #32]
   1ca8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ca8c:	2b00      	cmp	r3, #0
   1ca8e:	d009      	beq.n	1caa4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ca90:	6a3b      	ldr	r3, [r7, #32]
   1ca92:	3324      	adds	r3, #36	; 0x24
   1ca94:	0018      	movs	r0, r3
   1ca96:	4b7e      	ldr	r3, [pc, #504]	; (1cc90 <xQueueGenericSend+0x384>)
   1ca98:	4798      	blx	r3
   1ca9a:	1e03      	subs	r3, r0, #0
   1ca9c:	d007      	beq.n	1caae <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1ca9e:	4b7b      	ldr	r3, [pc, #492]	; (1cc8c <xQueueGenericSend+0x380>)
   1caa0:	4798      	blx	r3
   1caa2:	e004      	b.n	1caae <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1caa4:	69fb      	ldr	r3, [r7, #28]
   1caa6:	2b00      	cmp	r3, #0
   1caa8:	d001      	beq.n	1caae <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1caaa:	4b78      	ldr	r3, [pc, #480]	; (1cc8c <xQueueGenericSend+0x380>)
   1caac:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1caae:	4b79      	ldr	r3, [pc, #484]	; (1cc94 <xQueueGenericSend+0x388>)
   1cab0:	4798      	blx	r3
				return pdPASS;
   1cab2:	2301      	movs	r3, #1
   1cab4:	e142      	b.n	1cd3c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1cab6:	687b      	ldr	r3, [r7, #4]
   1cab8:	2b00      	cmp	r3, #0
   1caba:	d140      	bne.n	1cb3e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1cabc:	4b75      	ldr	r3, [pc, #468]	; (1cc94 <xQueueGenericSend+0x388>)
   1cabe:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1cac0:	4b67      	ldr	r3, [pc, #412]	; (1cc60 <xQueueGenericSend+0x354>)
   1cac2:	4798      	blx	r3
   1cac4:	0003      	movs	r3, r0
   1cac6:	0018      	movs	r0, r3
   1cac8:	4b66      	ldr	r3, [pc, #408]	; (1cc64 <xQueueGenericSend+0x358>)
   1caca:	4798      	blx	r3
   1cacc:	0003      	movs	r3, r0
   1cace:	001a      	movs	r2, r3
   1cad0:	4b65      	ldr	r3, [pc, #404]	; (1cc68 <xQueueGenericSend+0x35c>)
   1cad2:	881b      	ldrh	r3, [r3, #0]
   1cad4:	4013      	ands	r3, r2
   1cad6:	b29b      	uxth	r3, r3
   1cad8:	2b00      	cmp	r3, #0
   1cada:	d02e      	beq.n	1cb3a <xQueueGenericSend+0x22e>
   1cadc:	6a3b      	ldr	r3, [r7, #32]
   1cade:	0018      	movs	r0, r3
   1cae0:	4b62      	ldr	r3, [pc, #392]	; (1cc6c <xQueueGenericSend+0x360>)
   1cae2:	4798      	blx	r3
   1cae4:	0003      	movs	r3, r0
   1cae6:	001a      	movs	r2, r3
   1cae8:	4b5f      	ldr	r3, [pc, #380]	; (1cc68 <xQueueGenericSend+0x35c>)
   1caea:	881b      	ldrh	r3, [r3, #0]
   1caec:	4013      	ands	r3, r2
   1caee:	b29b      	uxth	r3, r3
   1caf0:	2b00      	cmp	r3, #0
   1caf2:	d022      	beq.n	1cb3a <xQueueGenericSend+0x22e>
   1caf4:	683b      	ldr	r3, [r7, #0]
   1caf6:	2b00      	cmp	r3, #0
   1caf8:	d10b      	bne.n	1cb12 <xQueueGenericSend+0x206>
   1cafa:	6a3b      	ldr	r3, [r7, #32]
   1cafc:	0018      	movs	r0, r3
   1cafe:	4b5c      	ldr	r3, [pc, #368]	; (1cc70 <xQueueGenericSend+0x364>)
   1cb00:	4798      	blx	r3
   1cb02:	0003      	movs	r3, r0
   1cb04:	001a      	movs	r2, r3
   1cb06:	4b5b      	ldr	r3, [pc, #364]	; (1cc74 <xQueueGenericSend+0x368>)
   1cb08:	5c9b      	ldrb	r3, [r3, r2]
   1cb0a:	3348      	adds	r3, #72	; 0x48
   1cb0c:	b2db      	uxtb	r3, r3
   1cb0e:	001d      	movs	r5, r3
   1cb10:	e000      	b.n	1cb14 <xQueueGenericSend+0x208>
   1cb12:	254d      	movs	r5, #77	; 0x4d
   1cb14:	6a3b      	ldr	r3, [r7, #32]
   1cb16:	0018      	movs	r0, r3
   1cb18:	4b55      	ldr	r3, [pc, #340]	; (1cc70 <xQueueGenericSend+0x364>)
   1cb1a:	4798      	blx	r3
   1cb1c:	0003      	movs	r3, r0
   1cb1e:	001a      	movs	r2, r3
   1cb20:	4b54      	ldr	r3, [pc, #336]	; (1cc74 <xQueueGenericSend+0x368>)
   1cb22:	5c9c      	ldrb	r4, [r3, r2]
   1cb24:	6a3b      	ldr	r3, [r7, #32]
   1cb26:	0018      	movs	r0, r3
   1cb28:	4b53      	ldr	r3, [pc, #332]	; (1cc78 <xQueueGenericSend+0x36c>)
   1cb2a:	4798      	blx	r3
   1cb2c:	0003      	movs	r3, r0
   1cb2e:	b2db      	uxtb	r3, r3
   1cb30:	001a      	movs	r2, r3
   1cb32:	0021      	movs	r1, r4
   1cb34:	0028      	movs	r0, r5
   1cb36:	4b51      	ldr	r3, [pc, #324]	; (1cc7c <xQueueGenericSend+0x370>)
   1cb38:	4798      	blx	r3
					return errQUEUE_FULL;
   1cb3a:	2300      	movs	r3, #0
   1cb3c:	e0fe      	b.n	1cd3c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cb40:	2b00      	cmp	r3, #0
   1cb42:	d106      	bne.n	1cb52 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1cb44:	2314      	movs	r3, #20
   1cb46:	18fb      	adds	r3, r7, r3
   1cb48:	0018      	movs	r0, r3
   1cb4a:	4b53      	ldr	r3, [pc, #332]	; (1cc98 <xQueueGenericSend+0x38c>)
   1cb4c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1cb4e:	2301      	movs	r3, #1
   1cb50:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1cb52:	4b50      	ldr	r3, [pc, #320]	; (1cc94 <xQueueGenericSend+0x388>)
   1cb54:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1cb56:	4b51      	ldr	r3, [pc, #324]	; (1cc9c <xQueueGenericSend+0x390>)
   1cb58:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1cb5a:	4b40      	ldr	r3, [pc, #256]	; (1cc5c <xQueueGenericSend+0x350>)
   1cb5c:	4798      	blx	r3
   1cb5e:	6a3b      	ldr	r3, [r7, #32]
   1cb60:	2244      	movs	r2, #68	; 0x44
   1cb62:	5c9b      	ldrb	r3, [r3, r2]
   1cb64:	b25b      	sxtb	r3, r3
   1cb66:	3301      	adds	r3, #1
   1cb68:	d103      	bne.n	1cb72 <xQueueGenericSend+0x266>
   1cb6a:	6a3b      	ldr	r3, [r7, #32]
   1cb6c:	2244      	movs	r2, #68	; 0x44
   1cb6e:	2100      	movs	r1, #0
   1cb70:	5499      	strb	r1, [r3, r2]
   1cb72:	6a3b      	ldr	r3, [r7, #32]
   1cb74:	2245      	movs	r2, #69	; 0x45
   1cb76:	5c9b      	ldrb	r3, [r3, r2]
   1cb78:	b25b      	sxtb	r3, r3
   1cb7a:	3301      	adds	r3, #1
   1cb7c:	d103      	bne.n	1cb86 <xQueueGenericSend+0x27a>
   1cb7e:	6a3b      	ldr	r3, [r7, #32]
   1cb80:	2245      	movs	r2, #69	; 0x45
   1cb82:	2100      	movs	r1, #0
   1cb84:	5499      	strb	r1, [r3, r2]
   1cb86:	4b43      	ldr	r3, [pc, #268]	; (1cc94 <xQueueGenericSend+0x388>)
   1cb88:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1cb8a:	1d3a      	adds	r2, r7, #4
   1cb8c:	2314      	movs	r3, #20
   1cb8e:	18fb      	adds	r3, r7, r3
   1cb90:	0011      	movs	r1, r2
   1cb92:	0018      	movs	r0, r3
   1cb94:	4b42      	ldr	r3, [pc, #264]	; (1cca0 <xQueueGenericSend+0x394>)
   1cb96:	4798      	blx	r3
   1cb98:	1e03      	subs	r3, r0, #0
   1cb9a:	d000      	beq.n	1cb9e <xQueueGenericSend+0x292>
   1cb9c:	e08a      	b.n	1ccb4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1cb9e:	6a3b      	ldr	r3, [r7, #32]
   1cba0:	0018      	movs	r0, r3
   1cba2:	4b40      	ldr	r3, [pc, #256]	; (1cca4 <xQueueGenericSend+0x398>)
   1cba4:	4798      	blx	r3
   1cba6:	1e03      	subs	r3, r0, #0
   1cba8:	d04f      	beq.n	1cc4a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1cbaa:	4b2d      	ldr	r3, [pc, #180]	; (1cc60 <xQueueGenericSend+0x354>)
   1cbac:	4798      	blx	r3
   1cbae:	0003      	movs	r3, r0
   1cbb0:	0018      	movs	r0, r3
   1cbb2:	4b2c      	ldr	r3, [pc, #176]	; (1cc64 <xQueueGenericSend+0x358>)
   1cbb4:	4798      	blx	r3
   1cbb6:	0003      	movs	r3, r0
   1cbb8:	001a      	movs	r2, r3
   1cbba:	4b2b      	ldr	r3, [pc, #172]	; (1cc68 <xQueueGenericSend+0x35c>)
   1cbbc:	881b      	ldrh	r3, [r3, #0]
   1cbbe:	4013      	ands	r3, r2
   1cbc0:	b29b      	uxth	r3, r3
   1cbc2:	2b00      	cmp	r3, #0
   1cbc4:	d02e      	beq.n	1cc24 <xQueueGenericSend+0x318>
   1cbc6:	6a3b      	ldr	r3, [r7, #32]
   1cbc8:	0018      	movs	r0, r3
   1cbca:	4b28      	ldr	r3, [pc, #160]	; (1cc6c <xQueueGenericSend+0x360>)
   1cbcc:	4798      	blx	r3
   1cbce:	0003      	movs	r3, r0
   1cbd0:	001a      	movs	r2, r3
   1cbd2:	4b25      	ldr	r3, [pc, #148]	; (1cc68 <xQueueGenericSend+0x35c>)
   1cbd4:	881b      	ldrh	r3, [r3, #0]
   1cbd6:	4013      	ands	r3, r2
   1cbd8:	b29b      	uxth	r3, r3
   1cbda:	2b00      	cmp	r3, #0
   1cbdc:	d022      	beq.n	1cc24 <xQueueGenericSend+0x318>
   1cbde:	683b      	ldr	r3, [r7, #0]
   1cbe0:	2b00      	cmp	r3, #0
   1cbe2:	d10b      	bne.n	1cbfc <xQueueGenericSend+0x2f0>
   1cbe4:	6a3b      	ldr	r3, [r7, #32]
   1cbe6:	0018      	movs	r0, r3
   1cbe8:	4b21      	ldr	r3, [pc, #132]	; (1cc70 <xQueueGenericSend+0x364>)
   1cbea:	4798      	blx	r3
   1cbec:	0003      	movs	r3, r0
   1cbee:	001a      	movs	r2, r3
   1cbf0:	4b20      	ldr	r3, [pc, #128]	; (1cc74 <xQueueGenericSend+0x368>)
   1cbf2:	5c9b      	ldrb	r3, [r3, r2]
   1cbf4:	3370      	adds	r3, #112	; 0x70
   1cbf6:	b2db      	uxtb	r3, r3
   1cbf8:	001d      	movs	r5, r3
   1cbfa:	e000      	b.n	1cbfe <xQueueGenericSend+0x2f2>
   1cbfc:	2575      	movs	r5, #117	; 0x75
   1cbfe:	6a3b      	ldr	r3, [r7, #32]
   1cc00:	0018      	movs	r0, r3
   1cc02:	4b1b      	ldr	r3, [pc, #108]	; (1cc70 <xQueueGenericSend+0x364>)
   1cc04:	4798      	blx	r3
   1cc06:	0003      	movs	r3, r0
   1cc08:	001a      	movs	r2, r3
   1cc0a:	4b1a      	ldr	r3, [pc, #104]	; (1cc74 <xQueueGenericSend+0x368>)
   1cc0c:	5c9c      	ldrb	r4, [r3, r2]
   1cc0e:	6a3b      	ldr	r3, [r7, #32]
   1cc10:	0018      	movs	r0, r3
   1cc12:	4b19      	ldr	r3, [pc, #100]	; (1cc78 <xQueueGenericSend+0x36c>)
   1cc14:	4798      	blx	r3
   1cc16:	0003      	movs	r3, r0
   1cc18:	b2db      	uxtb	r3, r3
   1cc1a:	001a      	movs	r2, r3
   1cc1c:	0021      	movs	r1, r4
   1cc1e:	0028      	movs	r0, r5
   1cc20:	4b16      	ldr	r3, [pc, #88]	; (1cc7c <xQueueGenericSend+0x370>)
   1cc22:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1cc24:	6a3b      	ldr	r3, [r7, #32]
   1cc26:	3310      	adds	r3, #16
   1cc28:	687a      	ldr	r2, [r7, #4]
   1cc2a:	0011      	movs	r1, r2
   1cc2c:	0018      	movs	r0, r3
   1cc2e:	4b1e      	ldr	r3, [pc, #120]	; (1cca8 <xQueueGenericSend+0x39c>)
   1cc30:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1cc32:	6a3b      	ldr	r3, [r7, #32]
   1cc34:	0018      	movs	r0, r3
   1cc36:	4b1d      	ldr	r3, [pc, #116]	; (1ccac <xQueueGenericSend+0x3a0>)
   1cc38:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1cc3a:	4b1d      	ldr	r3, [pc, #116]	; (1ccb0 <xQueueGenericSend+0x3a4>)
   1cc3c:	4798      	blx	r3
   1cc3e:	1e03      	subs	r3, r0, #0
   1cc40:	d000      	beq.n	1cc44 <xQueueGenericSend+0x338>
   1cc42:	e69d      	b.n	1c980 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1cc44:	4b11      	ldr	r3, [pc, #68]	; (1cc8c <xQueueGenericSend+0x380>)
   1cc46:	4798      	blx	r3
   1cc48:	e69a      	b.n	1c980 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1cc4a:	6a3b      	ldr	r3, [r7, #32]
   1cc4c:	0018      	movs	r0, r3
   1cc4e:	4b17      	ldr	r3, [pc, #92]	; (1ccac <xQueueGenericSend+0x3a0>)
   1cc50:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1cc52:	4b17      	ldr	r3, [pc, #92]	; (1ccb0 <xQueueGenericSend+0x3a4>)
   1cc54:	4798      	blx	r3
   1cc56:	e693      	b.n	1c980 <xQueueGenericSend+0x74>
   1cc58:	0001f099 	.word	0x0001f099
   1cc5c:	0001c379 	.word	0x0001c379
   1cc60:	0001a615 	.word	0x0001a615
   1cc64:	0001a379 	.word	0x0001a379
   1cc68:	2000010c 	.word	0x2000010c
   1cc6c:	0001a439 	.word	0x0001a439
   1cc70:	0001a339 	.word	0x0001a339
   1cc74:	20000100 	.word	0x20000100
   1cc78:	0001a419 	.word	0x0001a419
   1cc7c:	0001ad71 	.word	0x0001ad71
   1cc80:	0001b3cd 	.word	0x0001b3cd
   1cc84:	0001db45 	.word	0x0001db45
   1cc88:	0001de49 	.word	0x0001de49
   1cc8c:	0001c361 	.word	0x0001c361
   1cc90:	0001ec09 	.word	0x0001ec09
   1cc94:	0001c39d 	.word	0x0001c39d
   1cc98:	0001ed49 	.word	0x0001ed49
   1cc9c:	0001e631 	.word	0x0001e631
   1cca0:	0001ed71 	.word	0x0001ed71
   1cca4:	0001dd99 	.word	0x0001dd99
   1cca8:	0001eae5 	.word	0x0001eae5
   1ccac:	0001dc75 	.word	0x0001dc75
   1ccb0:	0001e649 	.word	0x0001e649
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1ccb4:	6a3b      	ldr	r3, [r7, #32]
   1ccb6:	0018      	movs	r0, r3
   1ccb8:	4b22      	ldr	r3, [pc, #136]	; (1cd44 <xQueueGenericSend+0x438>)
   1ccba:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ccbc:	4b22      	ldr	r3, [pc, #136]	; (1cd48 <xQueueGenericSend+0x43c>)
   1ccbe:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1ccc0:	4b22      	ldr	r3, [pc, #136]	; (1cd4c <xQueueGenericSend+0x440>)
   1ccc2:	4798      	blx	r3
   1ccc4:	0003      	movs	r3, r0
   1ccc6:	0018      	movs	r0, r3
   1ccc8:	4b21      	ldr	r3, [pc, #132]	; (1cd50 <xQueueGenericSend+0x444>)
   1ccca:	4798      	blx	r3
   1cccc:	0003      	movs	r3, r0
   1ccce:	001a      	movs	r2, r3
   1ccd0:	4b20      	ldr	r3, [pc, #128]	; (1cd54 <xQueueGenericSend+0x448>)
   1ccd2:	881b      	ldrh	r3, [r3, #0]
   1ccd4:	4013      	ands	r3, r2
   1ccd6:	b29b      	uxth	r3, r3
   1ccd8:	2b00      	cmp	r3, #0
   1ccda:	d02e      	beq.n	1cd3a <xQueueGenericSend+0x42e>
   1ccdc:	6a3b      	ldr	r3, [r7, #32]
   1ccde:	0018      	movs	r0, r3
   1cce0:	4b1d      	ldr	r3, [pc, #116]	; (1cd58 <xQueueGenericSend+0x44c>)
   1cce2:	4798      	blx	r3
   1cce4:	0003      	movs	r3, r0
   1cce6:	001a      	movs	r2, r3
   1cce8:	4b1a      	ldr	r3, [pc, #104]	; (1cd54 <xQueueGenericSend+0x448>)
   1ccea:	881b      	ldrh	r3, [r3, #0]
   1ccec:	4013      	ands	r3, r2
   1ccee:	b29b      	uxth	r3, r3
   1ccf0:	2b00      	cmp	r3, #0
   1ccf2:	d022      	beq.n	1cd3a <xQueueGenericSend+0x42e>
   1ccf4:	683b      	ldr	r3, [r7, #0]
   1ccf6:	2b00      	cmp	r3, #0
   1ccf8:	d10b      	bne.n	1cd12 <xQueueGenericSend+0x406>
   1ccfa:	6a3b      	ldr	r3, [r7, #32]
   1ccfc:	0018      	movs	r0, r3
   1ccfe:	4b17      	ldr	r3, [pc, #92]	; (1cd5c <xQueueGenericSend+0x450>)
   1cd00:	4798      	blx	r3
   1cd02:	0003      	movs	r3, r0
   1cd04:	001a      	movs	r2, r3
   1cd06:	4b16      	ldr	r3, [pc, #88]	; (1cd60 <xQueueGenericSend+0x454>)
   1cd08:	5c9b      	ldrb	r3, [r3, r2]
   1cd0a:	3348      	adds	r3, #72	; 0x48
   1cd0c:	b2db      	uxtb	r3, r3
   1cd0e:	001d      	movs	r5, r3
   1cd10:	e000      	b.n	1cd14 <xQueueGenericSend+0x408>
   1cd12:	254d      	movs	r5, #77	; 0x4d
   1cd14:	6a3b      	ldr	r3, [r7, #32]
   1cd16:	0018      	movs	r0, r3
   1cd18:	4b10      	ldr	r3, [pc, #64]	; (1cd5c <xQueueGenericSend+0x450>)
   1cd1a:	4798      	blx	r3
   1cd1c:	0003      	movs	r3, r0
   1cd1e:	001a      	movs	r2, r3
   1cd20:	4b0f      	ldr	r3, [pc, #60]	; (1cd60 <xQueueGenericSend+0x454>)
   1cd22:	5c9c      	ldrb	r4, [r3, r2]
   1cd24:	6a3b      	ldr	r3, [r7, #32]
   1cd26:	0018      	movs	r0, r3
   1cd28:	4b0e      	ldr	r3, [pc, #56]	; (1cd64 <xQueueGenericSend+0x458>)
   1cd2a:	4798      	blx	r3
   1cd2c:	0003      	movs	r3, r0
   1cd2e:	b2db      	uxtb	r3, r3
   1cd30:	001a      	movs	r2, r3
   1cd32:	0021      	movs	r1, r4
   1cd34:	0028      	movs	r0, r5
   1cd36:	4b0c      	ldr	r3, [pc, #48]	; (1cd68 <xQueueGenericSend+0x45c>)
   1cd38:	4798      	blx	r3
			return errQUEUE_FULL;
   1cd3a:	2300      	movs	r3, #0
		}
	}
}
   1cd3c:	0018      	movs	r0, r3
   1cd3e:	46bd      	mov	sp, r7
   1cd40:	b00a      	add	sp, #40	; 0x28
   1cd42:	bdb0      	pop	{r4, r5, r7, pc}
   1cd44:	0001dc75 	.word	0x0001dc75
   1cd48:	0001e649 	.word	0x0001e649
   1cd4c:	0001a615 	.word	0x0001a615
   1cd50:	0001a379 	.word	0x0001a379
   1cd54:	2000010c 	.word	0x2000010c
   1cd58:	0001a439 	.word	0x0001a439
   1cd5c:	0001a339 	.word	0x0001a339
   1cd60:	20000100 	.word	0x20000100
   1cd64:	0001a419 	.word	0x0001a419
   1cd68:	0001ad71 	.word	0x0001ad71

0001cd6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1cd6c:	b5b0      	push	{r4, r5, r7, lr}
   1cd6e:	b088      	sub	sp, #32
   1cd70:	af00      	add	r7, sp, #0
   1cd72:	60f8      	str	r0, [r7, #12]
   1cd74:	60b9      	str	r1, [r7, #8]
   1cd76:	607a      	str	r2, [r7, #4]
   1cd78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cd7a:	68fb      	ldr	r3, [r7, #12]
   1cd7c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1cd7e:	69bb      	ldr	r3, [r7, #24]
   1cd80:	2b00      	cmp	r3, #0
   1cd82:	d101      	bne.n	1cd88 <xQueueGenericSendFromISR+0x1c>
   1cd84:	b672      	cpsid	i
   1cd86:	e7fe      	b.n	1cd86 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1cd88:	68bb      	ldr	r3, [r7, #8]
   1cd8a:	2b00      	cmp	r3, #0
   1cd8c:	d103      	bne.n	1cd96 <xQueueGenericSendFromISR+0x2a>
   1cd8e:	69bb      	ldr	r3, [r7, #24]
   1cd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cd92:	2b00      	cmp	r3, #0
   1cd94:	d101      	bne.n	1cd9a <xQueueGenericSendFromISR+0x2e>
   1cd96:	2301      	movs	r3, #1
   1cd98:	e000      	b.n	1cd9c <xQueueGenericSendFromISR+0x30>
   1cd9a:	2300      	movs	r3, #0
   1cd9c:	2b00      	cmp	r3, #0
   1cd9e:	d101      	bne.n	1cda4 <xQueueGenericSendFromISR+0x38>
   1cda0:	b672      	cpsid	i
   1cda2:	e7fe      	b.n	1cda2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1cda4:	683b      	ldr	r3, [r7, #0]
   1cda6:	2b02      	cmp	r3, #2
   1cda8:	d103      	bne.n	1cdb2 <xQueueGenericSendFromISR+0x46>
   1cdaa:	69bb      	ldr	r3, [r7, #24]
   1cdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cdae:	2b01      	cmp	r3, #1
   1cdb0:	d101      	bne.n	1cdb6 <xQueueGenericSendFromISR+0x4a>
   1cdb2:	2301      	movs	r3, #1
   1cdb4:	e000      	b.n	1cdb8 <xQueueGenericSendFromISR+0x4c>
   1cdb6:	2300      	movs	r3, #0
   1cdb8:	2b00      	cmp	r3, #0
   1cdba:	d101      	bne.n	1cdc0 <xQueueGenericSendFromISR+0x54>
   1cdbc:	b672      	cpsid	i
   1cdbe:	e7fe      	b.n	1cdbe <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1cdc0:	4b68      	ldr	r3, [pc, #416]	; (1cf64 <xQueueGenericSendFromISR+0x1f8>)
   1cdc2:	4798      	blx	r3
   1cdc4:	0003      	movs	r3, r0
   1cdc6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1cdc8:	69bb      	ldr	r3, [r7, #24]
   1cdca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cdcc:	69bb      	ldr	r3, [r7, #24]
   1cdce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cdd0:	429a      	cmp	r2, r3
   1cdd2:	d303      	bcc.n	1cddc <xQueueGenericSendFromISR+0x70>
   1cdd4:	683b      	ldr	r3, [r7, #0]
   1cdd6:	2b02      	cmp	r3, #2
   1cdd8:	d000      	beq.n	1cddc <xQueueGenericSendFromISR+0x70>
   1cdda:	e088      	b.n	1ceee <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1cddc:	2313      	movs	r3, #19
   1cdde:	18fb      	adds	r3, r7, r3
   1cde0:	69ba      	ldr	r2, [r7, #24]
   1cde2:	2145      	movs	r1, #69	; 0x45
   1cde4:	5c52      	ldrb	r2, [r2, r1]
   1cde6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1cde8:	69bb      	ldr	r3, [r7, #24]
   1cdea:	0018      	movs	r0, r3
   1cdec:	4b5e      	ldr	r3, [pc, #376]	; (1cf68 <xQueueGenericSendFromISR+0x1fc>)
   1cdee:	4798      	blx	r3
   1cdf0:	0003      	movs	r3, r0
   1cdf2:	001a      	movs	r2, r3
   1cdf4:	4b5d      	ldr	r3, [pc, #372]	; (1cf6c <xQueueGenericSendFromISR+0x200>)
   1cdf6:	881b      	ldrh	r3, [r3, #0]
   1cdf8:	4013      	ands	r3, r2
   1cdfa:	b29b      	uxth	r3, r3
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d022      	beq.n	1ce46 <xQueueGenericSendFromISR+0xda>
   1ce00:	683b      	ldr	r3, [r7, #0]
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	d10b      	bne.n	1ce1e <xQueueGenericSendFromISR+0xb2>
   1ce06:	69bb      	ldr	r3, [r7, #24]
   1ce08:	0018      	movs	r0, r3
   1ce0a:	4b59      	ldr	r3, [pc, #356]	; (1cf70 <xQueueGenericSendFromISR+0x204>)
   1ce0c:	4798      	blx	r3
   1ce0e:	0003      	movs	r3, r0
   1ce10:	001a      	movs	r2, r3
   1ce12:	4b58      	ldr	r3, [pc, #352]	; (1cf74 <xQueueGenericSendFromISR+0x208>)
   1ce14:	5c9b      	ldrb	r3, [r3, r2]
   1ce16:	3330      	adds	r3, #48	; 0x30
   1ce18:	b2db      	uxtb	r3, r3
   1ce1a:	001d      	movs	r5, r3
   1ce1c:	e000      	b.n	1ce20 <xQueueGenericSendFromISR+0xb4>
   1ce1e:	2535      	movs	r5, #53	; 0x35
   1ce20:	69bb      	ldr	r3, [r7, #24]
   1ce22:	0018      	movs	r0, r3
   1ce24:	4b52      	ldr	r3, [pc, #328]	; (1cf70 <xQueueGenericSendFromISR+0x204>)
   1ce26:	4798      	blx	r3
   1ce28:	0003      	movs	r3, r0
   1ce2a:	001a      	movs	r2, r3
   1ce2c:	4b51      	ldr	r3, [pc, #324]	; (1cf74 <xQueueGenericSendFromISR+0x208>)
   1ce2e:	5c9c      	ldrb	r4, [r3, r2]
   1ce30:	69bb      	ldr	r3, [r7, #24]
   1ce32:	0018      	movs	r0, r3
   1ce34:	4b50      	ldr	r3, [pc, #320]	; (1cf78 <xQueueGenericSendFromISR+0x20c>)
   1ce36:	4798      	blx	r3
   1ce38:	0003      	movs	r3, r0
   1ce3a:	b2db      	uxtb	r3, r3
   1ce3c:	001a      	movs	r2, r3
   1ce3e:	0021      	movs	r1, r4
   1ce40:	0028      	movs	r0, r5
   1ce42:	4b4e      	ldr	r3, [pc, #312]	; (1cf7c <xQueueGenericSendFromISR+0x210>)
   1ce44:	4798      	blx	r3
   1ce46:	69bb      	ldr	r3, [r7, #24]
   1ce48:	0018      	movs	r0, r3
   1ce4a:	4b49      	ldr	r3, [pc, #292]	; (1cf70 <xQueueGenericSendFromISR+0x204>)
   1ce4c:	4798      	blx	r3
   1ce4e:	0003      	movs	r3, r0
   1ce50:	001a      	movs	r2, r3
   1ce52:	4b48      	ldr	r3, [pc, #288]	; (1cf74 <xQueueGenericSendFromISR+0x208>)
   1ce54:	5c9c      	ldrb	r4, [r3, r2]
   1ce56:	69bb      	ldr	r3, [r7, #24]
   1ce58:	0018      	movs	r0, r3
   1ce5a:	4b47      	ldr	r3, [pc, #284]	; (1cf78 <xQueueGenericSendFromISR+0x20c>)
   1ce5c:	4798      	blx	r3
   1ce5e:	0003      	movs	r3, r0
   1ce60:	b2d9      	uxtb	r1, r3
   1ce62:	69bb      	ldr	r3, [r7, #24]
   1ce64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ce66:	b2db      	uxtb	r3, r3
   1ce68:	3301      	adds	r3, #1
   1ce6a:	b2db      	uxtb	r3, r3
   1ce6c:	001a      	movs	r2, r3
   1ce6e:	0020      	movs	r0, r4
   1ce70:	4b43      	ldr	r3, [pc, #268]	; (1cf80 <xQueueGenericSendFromISR+0x214>)
   1ce72:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1ce74:	683a      	ldr	r2, [r7, #0]
   1ce76:	68b9      	ldr	r1, [r7, #8]
   1ce78:	69bb      	ldr	r3, [r7, #24]
   1ce7a:	0018      	movs	r0, r3
   1ce7c:	4b41      	ldr	r3, [pc, #260]	; (1cf84 <xQueueGenericSendFromISR+0x218>)
   1ce7e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1ce80:	2313      	movs	r3, #19
   1ce82:	18fb      	adds	r3, r7, r3
   1ce84:	781b      	ldrb	r3, [r3, #0]
   1ce86:	b25b      	sxtb	r3, r3
   1ce88:	3301      	adds	r3, #1
   1ce8a:	d124      	bne.n	1ced6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ce8c:	69bb      	ldr	r3, [r7, #24]
   1ce8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	d00e      	beq.n	1ceb2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ce94:	683a      	ldr	r2, [r7, #0]
   1ce96:	69bb      	ldr	r3, [r7, #24]
   1ce98:	0011      	movs	r1, r2
   1ce9a:	0018      	movs	r0, r3
   1ce9c:	4b3a      	ldr	r3, [pc, #232]	; (1cf88 <xQueueGenericSendFromISR+0x21c>)
   1ce9e:	4798      	blx	r3
   1cea0:	1e03      	subs	r3, r0, #0
   1cea2:	d021      	beq.n	1cee8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1cea4:	687b      	ldr	r3, [r7, #4]
   1cea6:	2b00      	cmp	r3, #0
   1cea8:	d01e      	beq.n	1cee8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1ceaa:	687b      	ldr	r3, [r7, #4]
   1ceac:	2201      	movs	r2, #1
   1ceae:	601a      	str	r2, [r3, #0]
   1ceb0:	e01a      	b.n	1cee8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ceb2:	69bb      	ldr	r3, [r7, #24]
   1ceb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ceb6:	2b00      	cmp	r3, #0
   1ceb8:	d016      	beq.n	1cee8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ceba:	69bb      	ldr	r3, [r7, #24]
   1cebc:	3324      	adds	r3, #36	; 0x24
   1cebe:	0018      	movs	r0, r3
   1cec0:	4b32      	ldr	r3, [pc, #200]	; (1cf8c <xQueueGenericSendFromISR+0x220>)
   1cec2:	4798      	blx	r3
   1cec4:	1e03      	subs	r3, r0, #0
   1cec6:	d00f      	beq.n	1cee8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1cec8:	687b      	ldr	r3, [r7, #4]
   1ceca:	2b00      	cmp	r3, #0
   1cecc:	d00c      	beq.n	1cee8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1cece:	687b      	ldr	r3, [r7, #4]
   1ced0:	2201      	movs	r2, #1
   1ced2:	601a      	str	r2, [r3, #0]
   1ced4:	e008      	b.n	1cee8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ced6:	2313      	movs	r3, #19
   1ced8:	18fb      	adds	r3, r7, r3
   1ceda:	781b      	ldrb	r3, [r3, #0]
   1cedc:	3301      	adds	r3, #1
   1cede:	b2db      	uxtb	r3, r3
   1cee0:	b259      	sxtb	r1, r3
   1cee2:	69bb      	ldr	r3, [r7, #24]
   1cee4:	2245      	movs	r2, #69	; 0x45
   1cee6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1cee8:	2301      	movs	r3, #1
   1ceea:	61fb      	str	r3, [r7, #28]
		{
   1ceec:	e030      	b.n	1cf50 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ceee:	69bb      	ldr	r3, [r7, #24]
   1cef0:	0018      	movs	r0, r3
   1cef2:	4b1d      	ldr	r3, [pc, #116]	; (1cf68 <xQueueGenericSendFromISR+0x1fc>)
   1cef4:	4798      	blx	r3
   1cef6:	0003      	movs	r3, r0
   1cef8:	001a      	movs	r2, r3
   1cefa:	4b1c      	ldr	r3, [pc, #112]	; (1cf6c <xQueueGenericSendFromISR+0x200>)
   1cefc:	881b      	ldrh	r3, [r3, #0]
   1cefe:	4013      	ands	r3, r2
   1cf00:	b29b      	uxth	r3, r3
   1cf02:	2b00      	cmp	r3, #0
   1cf04:	d022      	beq.n	1cf4c <xQueueGenericSendFromISR+0x1e0>
   1cf06:	683b      	ldr	r3, [r7, #0]
   1cf08:	2b00      	cmp	r3, #0
   1cf0a:	d10b      	bne.n	1cf24 <xQueueGenericSendFromISR+0x1b8>
   1cf0c:	69bb      	ldr	r3, [r7, #24]
   1cf0e:	0018      	movs	r0, r3
   1cf10:	4b17      	ldr	r3, [pc, #92]	; (1cf70 <xQueueGenericSendFromISR+0x204>)
   1cf12:	4798      	blx	r3
   1cf14:	0003      	movs	r3, r0
   1cf16:	001a      	movs	r2, r3
   1cf18:	4b16      	ldr	r3, [pc, #88]	; (1cf74 <xQueueGenericSendFromISR+0x208>)
   1cf1a:	5c9b      	ldrb	r3, [r3, r2]
   1cf1c:	3358      	adds	r3, #88	; 0x58
   1cf1e:	b2db      	uxtb	r3, r3
   1cf20:	001d      	movs	r5, r3
   1cf22:	e000      	b.n	1cf26 <xQueueGenericSendFromISR+0x1ba>
   1cf24:	255d      	movs	r5, #93	; 0x5d
   1cf26:	69bb      	ldr	r3, [r7, #24]
   1cf28:	0018      	movs	r0, r3
   1cf2a:	4b11      	ldr	r3, [pc, #68]	; (1cf70 <xQueueGenericSendFromISR+0x204>)
   1cf2c:	4798      	blx	r3
   1cf2e:	0003      	movs	r3, r0
   1cf30:	001a      	movs	r2, r3
   1cf32:	4b10      	ldr	r3, [pc, #64]	; (1cf74 <xQueueGenericSendFromISR+0x208>)
   1cf34:	5c9c      	ldrb	r4, [r3, r2]
   1cf36:	69bb      	ldr	r3, [r7, #24]
   1cf38:	0018      	movs	r0, r3
   1cf3a:	4b0f      	ldr	r3, [pc, #60]	; (1cf78 <xQueueGenericSendFromISR+0x20c>)
   1cf3c:	4798      	blx	r3
   1cf3e:	0003      	movs	r3, r0
   1cf40:	b2db      	uxtb	r3, r3
   1cf42:	001a      	movs	r2, r3
   1cf44:	0021      	movs	r1, r4
   1cf46:	0028      	movs	r0, r5
   1cf48:	4b0c      	ldr	r3, [pc, #48]	; (1cf7c <xQueueGenericSendFromISR+0x210>)
   1cf4a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1cf4c:	2300      	movs	r3, #0
   1cf4e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1cf50:	697b      	ldr	r3, [r7, #20]
   1cf52:	0018      	movs	r0, r3
   1cf54:	4b0e      	ldr	r3, [pc, #56]	; (1cf90 <xQueueGenericSendFromISR+0x224>)
   1cf56:	4798      	blx	r3

	return xReturn;
   1cf58:	69fb      	ldr	r3, [r7, #28]
}
   1cf5a:	0018      	movs	r0, r3
   1cf5c:	46bd      	mov	sp, r7
   1cf5e:	b008      	add	sp, #32
   1cf60:	bdb0      	pop	{r4, r5, r7, pc}
   1cf62:	46c0      	nop			; (mov r8, r8)
   1cf64:	0001c3cd 	.word	0x0001c3cd
   1cf68:	0001a439 	.word	0x0001a439
   1cf6c:	2000010c 	.word	0x2000010c
   1cf70:	0001a339 	.word	0x0001a339
   1cf74:	20000100 	.word	0x20000100
   1cf78:	0001a419 	.word	0x0001a419
   1cf7c:	0001ad71 	.word	0x0001ad71
   1cf80:	0001b3cd 	.word	0x0001b3cd
   1cf84:	0001db45 	.word	0x0001db45
   1cf88:	0001de49 	.word	0x0001de49
   1cf8c:	0001ec09 	.word	0x0001ec09
   1cf90:	0001c3d9 	.word	0x0001c3d9

0001cf94 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1cf94:	b580      	push	{r7, lr}
   1cf96:	b082      	sub	sp, #8
   1cf98:	af00      	add	r7, sp, #0
   1cf9a:	6078      	str	r0, [r7, #4]
   1cf9c:	6039      	str	r1, [r7, #0]
   1cf9e:	6839      	ldr	r1, [r7, #0]
   1cfa0:	687b      	ldr	r3, [r7, #4]
   1cfa2:	2200      	movs	r2, #0
   1cfa4:	0018      	movs	r0, r3
   1cfa6:	4b03      	ldr	r3, [pc, #12]	; (1cfb4 <xQueueGiveFromISR+0x20>)
   1cfa8:	4798      	blx	r3
   1cfaa:	0003      	movs	r3, r0
   1cfac:	0018      	movs	r0, r3
   1cfae:	46bd      	mov	sp, r7
   1cfb0:	b002      	add	sp, #8
   1cfb2:	bd80      	pop	{r7, pc}
   1cfb4:	0001cfb9 	.word	0x0001cfb9

0001cfb8 <MyWrapper>:
{
   1cfb8:	b5b0      	push	{r4, r5, r7, lr}
   1cfba:	b08a      	sub	sp, #40	; 0x28
   1cfbc:	af00      	add	r7, sp, #0
   1cfbe:	60f8      	str	r0, [r7, #12]
   1cfc0:	60b9      	str	r1, [r7, #8]
   1cfc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cfc4:	68fb      	ldr	r3, [r7, #12]
   1cfc6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1cfc8:	6a3b      	ldr	r3, [r7, #32]
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	d101      	bne.n	1cfd2 <MyWrapper+0x1a>
   1cfce:	b672      	cpsid	i
   1cfd0:	e7fe      	b.n	1cfd0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1cfd2:	6a3b      	ldr	r3, [r7, #32]
   1cfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cfd6:	2b00      	cmp	r3, #0
   1cfd8:	d001      	beq.n	1cfde <MyWrapper+0x26>
   1cfda:	b672      	cpsid	i
   1cfdc:	e7fe      	b.n	1cfdc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1cfde:	6a3b      	ldr	r3, [r7, #32]
   1cfe0:	681b      	ldr	r3, [r3, #0]
   1cfe2:	2b00      	cmp	r3, #0
   1cfe4:	d103      	bne.n	1cfee <MyWrapper+0x36>
   1cfe6:	6a3b      	ldr	r3, [r7, #32]
   1cfe8:	685b      	ldr	r3, [r3, #4]
   1cfea:	2b00      	cmp	r3, #0
   1cfec:	d101      	bne.n	1cff2 <MyWrapper+0x3a>
   1cfee:	2301      	movs	r3, #1
   1cff0:	e000      	b.n	1cff4 <MyWrapper+0x3c>
   1cff2:	2300      	movs	r3, #0
   1cff4:	2b00      	cmp	r3, #0
   1cff6:	d101      	bne.n	1cffc <MyWrapper+0x44>
   1cff8:	b672      	cpsid	i
   1cffa:	e7fe      	b.n	1cffa <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1cffc:	4b66      	ldr	r3, [pc, #408]	; (1d198 <MyWrapper+0x1e0>)
   1cffe:	4798      	blx	r3
   1d000:	0003      	movs	r3, r0
   1d002:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d004:	6a3b      	ldr	r3, [r7, #32]
   1d006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d008:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1d00a:	6a3b      	ldr	r3, [r7, #32]
   1d00c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1d00e:	69bb      	ldr	r3, [r7, #24]
   1d010:	429a      	cmp	r2, r3
   1d012:	d800      	bhi.n	1d016 <MyWrapper+0x5e>
   1d014:	e085      	b.n	1d122 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1d016:	2317      	movs	r3, #23
   1d018:	18fb      	adds	r3, r7, r3
   1d01a:	6a3a      	ldr	r2, [r7, #32]
   1d01c:	2145      	movs	r1, #69	; 0x45
   1d01e:	5c52      	ldrb	r2, [r2, r1]
   1d020:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d022:	6a3b      	ldr	r3, [r7, #32]
   1d024:	0018      	movs	r0, r3
   1d026:	4b5d      	ldr	r3, [pc, #372]	; (1d19c <MyWrapper+0x1e4>)
   1d028:	4798      	blx	r3
   1d02a:	0003      	movs	r3, r0
   1d02c:	001a      	movs	r2, r3
   1d02e:	4b5c      	ldr	r3, [pc, #368]	; (1d1a0 <MyWrapper+0x1e8>)
   1d030:	881b      	ldrh	r3, [r3, #0]
   1d032:	4013      	ands	r3, r2
   1d034:	b29b      	uxth	r3, r3
   1d036:	2b00      	cmp	r3, #0
   1d038:	d022      	beq.n	1d080 <MyWrapper+0xc8>
   1d03a:	687b      	ldr	r3, [r7, #4]
   1d03c:	2b00      	cmp	r3, #0
   1d03e:	d10b      	bne.n	1d058 <MyWrapper+0xa0>
   1d040:	6a3b      	ldr	r3, [r7, #32]
   1d042:	0018      	movs	r0, r3
   1d044:	4b57      	ldr	r3, [pc, #348]	; (1d1a4 <MyWrapper+0x1ec>)
   1d046:	4798      	blx	r3
   1d048:	0003      	movs	r3, r0
   1d04a:	001a      	movs	r2, r3
   1d04c:	4b56      	ldr	r3, [pc, #344]	; (1d1a8 <MyWrapper+0x1f0>)
   1d04e:	5c9b      	ldrb	r3, [r3, r2]
   1d050:	3330      	adds	r3, #48	; 0x30
   1d052:	b2db      	uxtb	r3, r3
   1d054:	001d      	movs	r5, r3
   1d056:	e000      	b.n	1d05a <MyWrapper+0xa2>
   1d058:	2535      	movs	r5, #53	; 0x35
   1d05a:	6a3b      	ldr	r3, [r7, #32]
   1d05c:	0018      	movs	r0, r3
   1d05e:	4b51      	ldr	r3, [pc, #324]	; (1d1a4 <MyWrapper+0x1ec>)
   1d060:	4798      	blx	r3
   1d062:	0003      	movs	r3, r0
   1d064:	001a      	movs	r2, r3
   1d066:	4b50      	ldr	r3, [pc, #320]	; (1d1a8 <MyWrapper+0x1f0>)
   1d068:	5c9c      	ldrb	r4, [r3, r2]
   1d06a:	6a3b      	ldr	r3, [r7, #32]
   1d06c:	0018      	movs	r0, r3
   1d06e:	4b4f      	ldr	r3, [pc, #316]	; (1d1ac <MyWrapper+0x1f4>)
   1d070:	4798      	blx	r3
   1d072:	0003      	movs	r3, r0
   1d074:	b2db      	uxtb	r3, r3
   1d076:	001a      	movs	r2, r3
   1d078:	0021      	movs	r1, r4
   1d07a:	0028      	movs	r0, r5
   1d07c:	4b4c      	ldr	r3, [pc, #304]	; (1d1b0 <MyWrapper+0x1f8>)
   1d07e:	4798      	blx	r3
   1d080:	6a3b      	ldr	r3, [r7, #32]
   1d082:	0018      	movs	r0, r3
   1d084:	4b47      	ldr	r3, [pc, #284]	; (1d1a4 <MyWrapper+0x1ec>)
   1d086:	4798      	blx	r3
   1d088:	0003      	movs	r3, r0
   1d08a:	001a      	movs	r2, r3
   1d08c:	4b46      	ldr	r3, [pc, #280]	; (1d1a8 <MyWrapper+0x1f0>)
   1d08e:	5c9c      	ldrb	r4, [r3, r2]
   1d090:	6a3b      	ldr	r3, [r7, #32]
   1d092:	0018      	movs	r0, r3
   1d094:	4b45      	ldr	r3, [pc, #276]	; (1d1ac <MyWrapper+0x1f4>)
   1d096:	4798      	blx	r3
   1d098:	0003      	movs	r3, r0
   1d09a:	b2d9      	uxtb	r1, r3
   1d09c:	6a3b      	ldr	r3, [r7, #32]
   1d09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d0a0:	b2db      	uxtb	r3, r3
   1d0a2:	3301      	adds	r3, #1
   1d0a4:	b2db      	uxtb	r3, r3
   1d0a6:	001a      	movs	r2, r3
   1d0a8:	0020      	movs	r0, r4
   1d0aa:	4b42      	ldr	r3, [pc, #264]	; (1d1b4 <MyWrapper+0x1fc>)
   1d0ac:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1d0ae:	69bb      	ldr	r3, [r7, #24]
   1d0b0:	1c5a      	adds	r2, r3, #1
   1d0b2:	6a3b      	ldr	r3, [r7, #32]
   1d0b4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1d0b6:	2317      	movs	r3, #23
   1d0b8:	18fb      	adds	r3, r7, r3
   1d0ba:	781b      	ldrb	r3, [r3, #0]
   1d0bc:	b25b      	sxtb	r3, r3
   1d0be:	3301      	adds	r3, #1
   1d0c0:	d123      	bne.n	1d10a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d0c2:	6a3b      	ldr	r3, [r7, #32]
   1d0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d0c6:	2b00      	cmp	r3, #0
   1d0c8:	d00d      	beq.n	1d0e6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1d0ca:	6a3b      	ldr	r3, [r7, #32]
   1d0cc:	2100      	movs	r1, #0
   1d0ce:	0018      	movs	r0, r3
   1d0d0:	4b39      	ldr	r3, [pc, #228]	; (1d1b8 <MyWrapper+0x200>)
   1d0d2:	4798      	blx	r3
   1d0d4:	1e03      	subs	r3, r0, #0
   1d0d6:	d021      	beq.n	1d11c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d0d8:	68bb      	ldr	r3, [r7, #8]
   1d0da:	2b00      	cmp	r3, #0
   1d0dc:	d01e      	beq.n	1d11c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d0de:	68bb      	ldr	r3, [r7, #8]
   1d0e0:	2201      	movs	r2, #1
   1d0e2:	601a      	str	r2, [r3, #0]
   1d0e4:	e01a      	b.n	1d11c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d0e6:	6a3b      	ldr	r3, [r7, #32]
   1d0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d0ea:	2b00      	cmp	r3, #0
   1d0ec:	d016      	beq.n	1d11c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d0ee:	6a3b      	ldr	r3, [r7, #32]
   1d0f0:	3324      	adds	r3, #36	; 0x24
   1d0f2:	0018      	movs	r0, r3
   1d0f4:	4b31      	ldr	r3, [pc, #196]	; (1d1bc <MyWrapper+0x204>)
   1d0f6:	4798      	blx	r3
   1d0f8:	1e03      	subs	r3, r0, #0
   1d0fa:	d00f      	beq.n	1d11c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d0fc:	68bb      	ldr	r3, [r7, #8]
   1d0fe:	2b00      	cmp	r3, #0
   1d100:	d00c      	beq.n	1d11c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d102:	68bb      	ldr	r3, [r7, #8]
   1d104:	2201      	movs	r2, #1
   1d106:	601a      	str	r2, [r3, #0]
   1d108:	e008      	b.n	1d11c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d10a:	2317      	movs	r3, #23
   1d10c:	18fb      	adds	r3, r7, r3
   1d10e:	781b      	ldrb	r3, [r3, #0]
   1d110:	3301      	adds	r3, #1
   1d112:	b2db      	uxtb	r3, r3
   1d114:	b259      	sxtb	r1, r3
   1d116:	6a3b      	ldr	r3, [r7, #32]
   1d118:	2245      	movs	r2, #69	; 0x45
   1d11a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d11c:	2301      	movs	r3, #1
   1d11e:	627b      	str	r3, [r7, #36]	; 0x24
   1d120:	e030      	b.n	1d184 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d122:	6a3b      	ldr	r3, [r7, #32]
   1d124:	0018      	movs	r0, r3
   1d126:	4b1d      	ldr	r3, [pc, #116]	; (1d19c <MyWrapper+0x1e4>)
   1d128:	4798      	blx	r3
   1d12a:	0003      	movs	r3, r0
   1d12c:	001a      	movs	r2, r3
   1d12e:	4b1c      	ldr	r3, [pc, #112]	; (1d1a0 <MyWrapper+0x1e8>)
   1d130:	881b      	ldrh	r3, [r3, #0]
   1d132:	4013      	ands	r3, r2
   1d134:	b29b      	uxth	r3, r3
   1d136:	2b00      	cmp	r3, #0
   1d138:	d022      	beq.n	1d180 <MyWrapper+0x1c8>
   1d13a:	687b      	ldr	r3, [r7, #4]
   1d13c:	2b00      	cmp	r3, #0
   1d13e:	d10b      	bne.n	1d158 <MyWrapper+0x1a0>
   1d140:	6a3b      	ldr	r3, [r7, #32]
   1d142:	0018      	movs	r0, r3
   1d144:	4b17      	ldr	r3, [pc, #92]	; (1d1a4 <MyWrapper+0x1ec>)
   1d146:	4798      	blx	r3
   1d148:	0003      	movs	r3, r0
   1d14a:	001a      	movs	r2, r3
   1d14c:	4b16      	ldr	r3, [pc, #88]	; (1d1a8 <MyWrapper+0x1f0>)
   1d14e:	5c9b      	ldrb	r3, [r3, r2]
   1d150:	3358      	adds	r3, #88	; 0x58
   1d152:	b2db      	uxtb	r3, r3
   1d154:	001d      	movs	r5, r3
   1d156:	e000      	b.n	1d15a <MyWrapper+0x1a2>
   1d158:	255d      	movs	r5, #93	; 0x5d
   1d15a:	6a3b      	ldr	r3, [r7, #32]
   1d15c:	0018      	movs	r0, r3
   1d15e:	4b11      	ldr	r3, [pc, #68]	; (1d1a4 <MyWrapper+0x1ec>)
   1d160:	4798      	blx	r3
   1d162:	0003      	movs	r3, r0
   1d164:	001a      	movs	r2, r3
   1d166:	4b10      	ldr	r3, [pc, #64]	; (1d1a8 <MyWrapper+0x1f0>)
   1d168:	5c9c      	ldrb	r4, [r3, r2]
   1d16a:	6a3b      	ldr	r3, [r7, #32]
   1d16c:	0018      	movs	r0, r3
   1d16e:	4b0f      	ldr	r3, [pc, #60]	; (1d1ac <MyWrapper+0x1f4>)
   1d170:	4798      	blx	r3
   1d172:	0003      	movs	r3, r0
   1d174:	b2db      	uxtb	r3, r3
   1d176:	001a      	movs	r2, r3
   1d178:	0021      	movs	r1, r4
   1d17a:	0028      	movs	r0, r5
   1d17c:	4b0c      	ldr	r3, [pc, #48]	; (1d1b0 <MyWrapper+0x1f8>)
   1d17e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d180:	2300      	movs	r3, #0
   1d182:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d184:	69fb      	ldr	r3, [r7, #28]
   1d186:	0018      	movs	r0, r3
   1d188:	4b0d      	ldr	r3, [pc, #52]	; (1d1c0 <MyWrapper+0x208>)
   1d18a:	4798      	blx	r3

	return xReturn;
   1d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d18e:	0018      	movs	r0, r3
   1d190:	46bd      	mov	sp, r7
   1d192:	b00a      	add	sp, #40	; 0x28
   1d194:	bdb0      	pop	{r4, r5, r7, pc}
   1d196:	46c0      	nop			; (mov r8, r8)
   1d198:	0001c3cd 	.word	0x0001c3cd
   1d19c:	0001a439 	.word	0x0001a439
   1d1a0:	2000010c 	.word	0x2000010c
   1d1a4:	0001a339 	.word	0x0001a339
   1d1a8:	20000100 	.word	0x20000100
   1d1ac:	0001a419 	.word	0x0001a419
   1d1b0:	0001ad71 	.word	0x0001ad71
   1d1b4:	0001b3cd 	.word	0x0001b3cd
   1d1b8:	0001de49 	.word	0x0001de49
   1d1bc:	0001ec09 	.word	0x0001ec09
   1d1c0:	0001c3d9 	.word	0x0001c3d9

0001d1c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1d1c4:	b5b0      	push	{r4, r5, r7, lr}
   1d1c6:	b08a      	sub	sp, #40	; 0x28
   1d1c8:	af00      	add	r7, sp, #0
   1d1ca:	60f8      	str	r0, [r7, #12]
   1d1cc:	60b9      	str	r1, [r7, #8]
   1d1ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1d1d0:	2300      	movs	r3, #0
   1d1d2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d1d4:	68fb      	ldr	r3, [r7, #12]
   1d1d6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d1d8:	6a3b      	ldr	r3, [r7, #32]
   1d1da:	2b00      	cmp	r3, #0
   1d1dc:	d101      	bne.n	1d1e2 <xQueueReceive+0x1e>
   1d1de:	b672      	cpsid	i
   1d1e0:	e7fe      	b.n	1d1e0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d1e2:	68bb      	ldr	r3, [r7, #8]
   1d1e4:	2b00      	cmp	r3, #0
   1d1e6:	d103      	bne.n	1d1f0 <xQueueReceive+0x2c>
   1d1e8:	6a3b      	ldr	r3, [r7, #32]
   1d1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d1ec:	2b00      	cmp	r3, #0
   1d1ee:	d101      	bne.n	1d1f4 <xQueueReceive+0x30>
   1d1f0:	2301      	movs	r3, #1
   1d1f2:	e000      	b.n	1d1f6 <xQueueReceive+0x32>
   1d1f4:	2300      	movs	r3, #0
   1d1f6:	2b00      	cmp	r3, #0
   1d1f8:	d101      	bne.n	1d1fe <xQueueReceive+0x3a>
   1d1fa:	b672      	cpsid	i
   1d1fc:	e7fe      	b.n	1d1fc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d1fe:	4bbf      	ldr	r3, [pc, #764]	; (1d4fc <xQueueReceive+0x338>)
   1d200:	4798      	blx	r3
   1d202:	1e03      	subs	r3, r0, #0
   1d204:	d102      	bne.n	1d20c <xQueueReceive+0x48>
   1d206:	687b      	ldr	r3, [r7, #4]
   1d208:	2b00      	cmp	r3, #0
   1d20a:	d101      	bne.n	1d210 <xQueueReceive+0x4c>
   1d20c:	2301      	movs	r3, #1
   1d20e:	e000      	b.n	1d212 <xQueueReceive+0x4e>
   1d210:	2300      	movs	r3, #0
   1d212:	2b00      	cmp	r3, #0
   1d214:	d101      	bne.n	1d21a <xQueueReceive+0x56>
   1d216:	b672      	cpsid	i
   1d218:	e7fe      	b.n	1d218 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d21a:	4bb9      	ldr	r3, [pc, #740]	; (1d500 <xQueueReceive+0x33c>)
   1d21c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d21e:	6a3b      	ldr	r3, [r7, #32]
   1d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d222:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1d224:	69fb      	ldr	r3, [r7, #28]
   1d226:	2b00      	cmp	r3, #0
   1d228:	d100      	bne.n	1d22c <xQueueReceive+0x68>
   1d22a:	e07d      	b.n	1d328 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1d22c:	68ba      	ldr	r2, [r7, #8]
   1d22e:	6a3b      	ldr	r3, [r7, #32]
   1d230:	0011      	movs	r1, r2
   1d232:	0018      	movs	r0, r3
   1d234:	4bb3      	ldr	r3, [pc, #716]	; (1d504 <xQueueReceive+0x340>)
   1d236:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1d238:	4bb3      	ldr	r3, [pc, #716]	; (1d508 <xQueueReceive+0x344>)
   1d23a:	4798      	blx	r3
   1d23c:	0003      	movs	r3, r0
   1d23e:	0018      	movs	r0, r3
   1d240:	4bb2      	ldr	r3, [pc, #712]	; (1d50c <xQueueReceive+0x348>)
   1d242:	4798      	blx	r3
   1d244:	0003      	movs	r3, r0
   1d246:	001a      	movs	r2, r3
   1d248:	4bb1      	ldr	r3, [pc, #708]	; (1d510 <xQueueReceive+0x34c>)
   1d24a:	881b      	ldrh	r3, [r3, #0]
   1d24c:	4013      	ands	r3, r2
   1d24e:	b29b      	uxth	r3, r3
   1d250:	2b00      	cmp	r3, #0
   1d252:	d029      	beq.n	1d2a8 <xQueueReceive+0xe4>
   1d254:	6a3b      	ldr	r3, [r7, #32]
   1d256:	0018      	movs	r0, r3
   1d258:	4bae      	ldr	r3, [pc, #696]	; (1d514 <xQueueReceive+0x350>)
   1d25a:	4798      	blx	r3
   1d25c:	0003      	movs	r3, r0
   1d25e:	001a      	movs	r2, r3
   1d260:	4bab      	ldr	r3, [pc, #684]	; (1d510 <xQueueReceive+0x34c>)
   1d262:	881b      	ldrh	r3, [r3, #0]
   1d264:	4013      	ands	r3, r2
   1d266:	b29b      	uxth	r3, r3
   1d268:	2b00      	cmp	r3, #0
   1d26a:	d01d      	beq.n	1d2a8 <xQueueReceive+0xe4>
   1d26c:	6a3b      	ldr	r3, [r7, #32]
   1d26e:	0018      	movs	r0, r3
   1d270:	4ba9      	ldr	r3, [pc, #676]	; (1d518 <xQueueReceive+0x354>)
   1d272:	4798      	blx	r3
   1d274:	0003      	movs	r3, r0
   1d276:	001a      	movs	r2, r3
   1d278:	4ba8      	ldr	r3, [pc, #672]	; (1d51c <xQueueReceive+0x358>)
   1d27a:	5c9b      	ldrb	r3, [r3, r2]
   1d27c:	3328      	adds	r3, #40	; 0x28
   1d27e:	b2db      	uxtb	r3, r3
   1d280:	001d      	movs	r5, r3
   1d282:	6a3b      	ldr	r3, [r7, #32]
   1d284:	0018      	movs	r0, r3
   1d286:	4ba4      	ldr	r3, [pc, #656]	; (1d518 <xQueueReceive+0x354>)
   1d288:	4798      	blx	r3
   1d28a:	0003      	movs	r3, r0
   1d28c:	001a      	movs	r2, r3
   1d28e:	4ba3      	ldr	r3, [pc, #652]	; (1d51c <xQueueReceive+0x358>)
   1d290:	5c9c      	ldrb	r4, [r3, r2]
   1d292:	6a3b      	ldr	r3, [r7, #32]
   1d294:	0018      	movs	r0, r3
   1d296:	4ba2      	ldr	r3, [pc, #648]	; (1d520 <xQueueReceive+0x35c>)
   1d298:	4798      	blx	r3
   1d29a:	0003      	movs	r3, r0
   1d29c:	b2db      	uxtb	r3, r3
   1d29e:	001a      	movs	r2, r3
   1d2a0:	0021      	movs	r1, r4
   1d2a2:	0028      	movs	r0, r5
   1d2a4:	4b9f      	ldr	r3, [pc, #636]	; (1d524 <xQueueReceive+0x360>)
   1d2a6:	4798      	blx	r3
   1d2a8:	6a3b      	ldr	r3, [r7, #32]
   1d2aa:	0018      	movs	r0, r3
   1d2ac:	4b9a      	ldr	r3, [pc, #616]	; (1d518 <xQueueReceive+0x354>)
   1d2ae:	4798      	blx	r3
   1d2b0:	0003      	movs	r3, r0
   1d2b2:	001a      	movs	r2, r3
   1d2b4:	4b99      	ldr	r3, [pc, #612]	; (1d51c <xQueueReceive+0x358>)
   1d2b6:	5c9c      	ldrb	r4, [r3, r2]
   1d2b8:	6a3b      	ldr	r3, [r7, #32]
   1d2ba:	0018      	movs	r0, r3
   1d2bc:	4b98      	ldr	r3, [pc, #608]	; (1d520 <xQueueReceive+0x35c>)
   1d2be:	4798      	blx	r3
   1d2c0:	0003      	movs	r3, r0
   1d2c2:	b2dd      	uxtb	r5, r3
   1d2c4:	6a3b      	ldr	r3, [r7, #32]
   1d2c6:	0018      	movs	r0, r3
   1d2c8:	4b93      	ldr	r3, [pc, #588]	; (1d518 <xQueueReceive+0x354>)
   1d2ca:	4798      	blx	r3
   1d2cc:	0003      	movs	r3, r0
   1d2ce:	001a      	movs	r2, r3
   1d2d0:	4b92      	ldr	r3, [pc, #584]	; (1d51c <xQueueReceive+0x358>)
   1d2d2:	5c9b      	ldrb	r3, [r3, r2]
   1d2d4:	2b02      	cmp	r3, #2
   1d2d6:	d108      	bne.n	1d2ea <xQueueReceive+0x126>
   1d2d8:	4b8b      	ldr	r3, [pc, #556]	; (1d508 <xQueueReceive+0x344>)
   1d2da:	4798      	blx	r3
   1d2dc:	0003      	movs	r3, r0
   1d2de:	0018      	movs	r0, r3
   1d2e0:	4b91      	ldr	r3, [pc, #580]	; (1d528 <xQueueReceive+0x364>)
   1d2e2:	4798      	blx	r3
   1d2e4:	0003      	movs	r3, r0
   1d2e6:	b2db      	uxtb	r3, r3
   1d2e8:	e004      	b.n	1d2f4 <xQueueReceive+0x130>
   1d2ea:	6a3b      	ldr	r3, [r7, #32]
   1d2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d2ee:	b2db      	uxtb	r3, r3
   1d2f0:	3b01      	subs	r3, #1
   1d2f2:	b2db      	uxtb	r3, r3
   1d2f4:	001a      	movs	r2, r3
   1d2f6:	0029      	movs	r1, r5
   1d2f8:	0020      	movs	r0, r4
   1d2fa:	4b8c      	ldr	r3, [pc, #560]	; (1d52c <xQueueReceive+0x368>)
   1d2fc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1d2fe:	69fb      	ldr	r3, [r7, #28]
   1d300:	1e5a      	subs	r2, r3, #1
   1d302:	6a3b      	ldr	r3, [r7, #32]
   1d304:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d306:	6a3b      	ldr	r3, [r7, #32]
   1d308:	691b      	ldr	r3, [r3, #16]
   1d30a:	2b00      	cmp	r3, #0
   1d30c:	d008      	beq.n	1d320 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d30e:	6a3b      	ldr	r3, [r7, #32]
   1d310:	3310      	adds	r3, #16
   1d312:	0018      	movs	r0, r3
   1d314:	4b86      	ldr	r3, [pc, #536]	; (1d530 <xQueueReceive+0x36c>)
   1d316:	4798      	blx	r3
   1d318:	1e03      	subs	r3, r0, #0
   1d31a:	d001      	beq.n	1d320 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d31c:	4b85      	ldr	r3, [pc, #532]	; (1d534 <xQueueReceive+0x370>)
   1d31e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d320:	4b85      	ldr	r3, [pc, #532]	; (1d538 <xQueueReceive+0x374>)
   1d322:	4798      	blx	r3
				return pdPASS;
   1d324:	2301      	movs	r3, #1
   1d326:	e15f      	b.n	1d5e8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d328:	687b      	ldr	r3, [r7, #4]
   1d32a:	2b00      	cmp	r3, #0
   1d32c:	d13b      	bne.n	1d3a6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1d32e:	4b82      	ldr	r3, [pc, #520]	; (1d538 <xQueueReceive+0x374>)
   1d330:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d332:	4b75      	ldr	r3, [pc, #468]	; (1d508 <xQueueReceive+0x344>)
   1d334:	4798      	blx	r3
   1d336:	0003      	movs	r3, r0
   1d338:	0018      	movs	r0, r3
   1d33a:	4b74      	ldr	r3, [pc, #464]	; (1d50c <xQueueReceive+0x348>)
   1d33c:	4798      	blx	r3
   1d33e:	0003      	movs	r3, r0
   1d340:	001a      	movs	r2, r3
   1d342:	4b73      	ldr	r3, [pc, #460]	; (1d510 <xQueueReceive+0x34c>)
   1d344:	881b      	ldrh	r3, [r3, #0]
   1d346:	4013      	ands	r3, r2
   1d348:	b29b      	uxth	r3, r3
   1d34a:	2b00      	cmp	r3, #0
   1d34c:	d029      	beq.n	1d3a2 <xQueueReceive+0x1de>
   1d34e:	6a3b      	ldr	r3, [r7, #32]
   1d350:	0018      	movs	r0, r3
   1d352:	4b70      	ldr	r3, [pc, #448]	; (1d514 <xQueueReceive+0x350>)
   1d354:	4798      	blx	r3
   1d356:	0003      	movs	r3, r0
   1d358:	001a      	movs	r2, r3
   1d35a:	4b6d      	ldr	r3, [pc, #436]	; (1d510 <xQueueReceive+0x34c>)
   1d35c:	881b      	ldrh	r3, [r3, #0]
   1d35e:	4013      	ands	r3, r2
   1d360:	b29b      	uxth	r3, r3
   1d362:	2b00      	cmp	r3, #0
   1d364:	d01d      	beq.n	1d3a2 <xQueueReceive+0x1de>
   1d366:	6a3b      	ldr	r3, [r7, #32]
   1d368:	0018      	movs	r0, r3
   1d36a:	4b6b      	ldr	r3, [pc, #428]	; (1d518 <xQueueReceive+0x354>)
   1d36c:	4798      	blx	r3
   1d36e:	0003      	movs	r3, r0
   1d370:	001a      	movs	r2, r3
   1d372:	4b6a      	ldr	r3, [pc, #424]	; (1d51c <xQueueReceive+0x358>)
   1d374:	5c9b      	ldrb	r3, [r3, r2]
   1d376:	3350      	adds	r3, #80	; 0x50
   1d378:	b2db      	uxtb	r3, r3
   1d37a:	001d      	movs	r5, r3
   1d37c:	6a3b      	ldr	r3, [r7, #32]
   1d37e:	0018      	movs	r0, r3
   1d380:	4b65      	ldr	r3, [pc, #404]	; (1d518 <xQueueReceive+0x354>)
   1d382:	4798      	blx	r3
   1d384:	0003      	movs	r3, r0
   1d386:	001a      	movs	r2, r3
   1d388:	4b64      	ldr	r3, [pc, #400]	; (1d51c <xQueueReceive+0x358>)
   1d38a:	5c9c      	ldrb	r4, [r3, r2]
   1d38c:	6a3b      	ldr	r3, [r7, #32]
   1d38e:	0018      	movs	r0, r3
   1d390:	4b63      	ldr	r3, [pc, #396]	; (1d520 <xQueueReceive+0x35c>)
   1d392:	4798      	blx	r3
   1d394:	0003      	movs	r3, r0
   1d396:	b2db      	uxtb	r3, r3
   1d398:	001a      	movs	r2, r3
   1d39a:	0021      	movs	r1, r4
   1d39c:	0028      	movs	r0, r5
   1d39e:	4b61      	ldr	r3, [pc, #388]	; (1d524 <xQueueReceive+0x360>)
   1d3a0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1d3a2:	2300      	movs	r3, #0
   1d3a4:	e120      	b.n	1d5e8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d3a8:	2b00      	cmp	r3, #0
   1d3aa:	d106      	bne.n	1d3ba <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d3ac:	2314      	movs	r3, #20
   1d3ae:	18fb      	adds	r3, r7, r3
   1d3b0:	0018      	movs	r0, r3
   1d3b2:	4b62      	ldr	r3, [pc, #392]	; (1d53c <xQueueReceive+0x378>)
   1d3b4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d3b6:	2301      	movs	r3, #1
   1d3b8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d3ba:	4b5f      	ldr	r3, [pc, #380]	; (1d538 <xQueueReceive+0x374>)
   1d3bc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d3be:	4b60      	ldr	r3, [pc, #384]	; (1d540 <xQueueReceive+0x37c>)
   1d3c0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d3c2:	4b4f      	ldr	r3, [pc, #316]	; (1d500 <xQueueReceive+0x33c>)
   1d3c4:	4798      	blx	r3
   1d3c6:	6a3b      	ldr	r3, [r7, #32]
   1d3c8:	2244      	movs	r2, #68	; 0x44
   1d3ca:	5c9b      	ldrb	r3, [r3, r2]
   1d3cc:	b25b      	sxtb	r3, r3
   1d3ce:	3301      	adds	r3, #1
   1d3d0:	d103      	bne.n	1d3da <xQueueReceive+0x216>
   1d3d2:	6a3b      	ldr	r3, [r7, #32]
   1d3d4:	2244      	movs	r2, #68	; 0x44
   1d3d6:	2100      	movs	r1, #0
   1d3d8:	5499      	strb	r1, [r3, r2]
   1d3da:	6a3b      	ldr	r3, [r7, #32]
   1d3dc:	2245      	movs	r2, #69	; 0x45
   1d3de:	5c9b      	ldrb	r3, [r3, r2]
   1d3e0:	b25b      	sxtb	r3, r3
   1d3e2:	3301      	adds	r3, #1
   1d3e4:	d103      	bne.n	1d3ee <xQueueReceive+0x22a>
   1d3e6:	6a3b      	ldr	r3, [r7, #32]
   1d3e8:	2245      	movs	r2, #69	; 0x45
   1d3ea:	2100      	movs	r1, #0
   1d3ec:	5499      	strb	r1, [r3, r2]
   1d3ee:	4b52      	ldr	r3, [pc, #328]	; (1d538 <xQueueReceive+0x374>)
   1d3f0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d3f2:	1d3a      	adds	r2, r7, #4
   1d3f4:	2314      	movs	r3, #20
   1d3f6:	18fb      	adds	r3, r7, r3
   1d3f8:	0011      	movs	r1, r2
   1d3fa:	0018      	movs	r0, r3
   1d3fc:	4b51      	ldr	r3, [pc, #324]	; (1d544 <xQueueReceive+0x380>)
   1d3fe:	4798      	blx	r3
   1d400:	1e03      	subs	r3, r0, #0
   1d402:	d000      	beq.n	1d406 <xQueueReceive+0x242>
   1d404:	e0aa      	b.n	1d55c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d406:	6a3b      	ldr	r3, [r7, #32]
   1d408:	0018      	movs	r0, r3
   1d40a:	4b4f      	ldr	r3, [pc, #316]	; (1d548 <xQueueReceive+0x384>)
   1d40c:	4798      	blx	r3
   1d40e:	1e03      	subs	r3, r0, #0
   1d410:	d06d      	beq.n	1d4ee <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1d412:	4b3d      	ldr	r3, [pc, #244]	; (1d508 <xQueueReceive+0x344>)
   1d414:	4798      	blx	r3
   1d416:	0003      	movs	r3, r0
   1d418:	0018      	movs	r0, r3
   1d41a:	4b3c      	ldr	r3, [pc, #240]	; (1d50c <xQueueReceive+0x348>)
   1d41c:	4798      	blx	r3
   1d41e:	0003      	movs	r3, r0
   1d420:	001a      	movs	r2, r3
   1d422:	4b3b      	ldr	r3, [pc, #236]	; (1d510 <xQueueReceive+0x34c>)
   1d424:	881b      	ldrh	r3, [r3, #0]
   1d426:	4013      	ands	r3, r2
   1d428:	b29b      	uxth	r3, r3
   1d42a:	2b00      	cmp	r3, #0
   1d42c:	d029      	beq.n	1d482 <xQueueReceive+0x2be>
   1d42e:	6a3b      	ldr	r3, [r7, #32]
   1d430:	0018      	movs	r0, r3
   1d432:	4b38      	ldr	r3, [pc, #224]	; (1d514 <xQueueReceive+0x350>)
   1d434:	4798      	blx	r3
   1d436:	0003      	movs	r3, r0
   1d438:	001a      	movs	r2, r3
   1d43a:	4b35      	ldr	r3, [pc, #212]	; (1d510 <xQueueReceive+0x34c>)
   1d43c:	881b      	ldrh	r3, [r3, #0]
   1d43e:	4013      	ands	r3, r2
   1d440:	b29b      	uxth	r3, r3
   1d442:	2b00      	cmp	r3, #0
   1d444:	d01d      	beq.n	1d482 <xQueueReceive+0x2be>
   1d446:	6a3b      	ldr	r3, [r7, #32]
   1d448:	0018      	movs	r0, r3
   1d44a:	4b33      	ldr	r3, [pc, #204]	; (1d518 <xQueueReceive+0x354>)
   1d44c:	4798      	blx	r3
   1d44e:	0003      	movs	r3, r0
   1d450:	001a      	movs	r2, r3
   1d452:	4b32      	ldr	r3, [pc, #200]	; (1d51c <xQueueReceive+0x358>)
   1d454:	5c9b      	ldrb	r3, [r3, r2]
   1d456:	3368      	adds	r3, #104	; 0x68
   1d458:	b2db      	uxtb	r3, r3
   1d45a:	001d      	movs	r5, r3
   1d45c:	6a3b      	ldr	r3, [r7, #32]
   1d45e:	0018      	movs	r0, r3
   1d460:	4b2d      	ldr	r3, [pc, #180]	; (1d518 <xQueueReceive+0x354>)
   1d462:	4798      	blx	r3
   1d464:	0003      	movs	r3, r0
   1d466:	001a      	movs	r2, r3
   1d468:	4b2c      	ldr	r3, [pc, #176]	; (1d51c <xQueueReceive+0x358>)
   1d46a:	5c9c      	ldrb	r4, [r3, r2]
   1d46c:	6a3b      	ldr	r3, [r7, #32]
   1d46e:	0018      	movs	r0, r3
   1d470:	4b2b      	ldr	r3, [pc, #172]	; (1d520 <xQueueReceive+0x35c>)
   1d472:	4798      	blx	r3
   1d474:	0003      	movs	r3, r0
   1d476:	b2db      	uxtb	r3, r3
   1d478:	001a      	movs	r2, r3
   1d47a:	0021      	movs	r1, r4
   1d47c:	0028      	movs	r0, r5
   1d47e:	4b29      	ldr	r3, [pc, #164]	; (1d524 <xQueueReceive+0x360>)
   1d480:	4798      	blx	r3
   1d482:	6a3b      	ldr	r3, [r7, #32]
   1d484:	0018      	movs	r0, r3
   1d486:	4b24      	ldr	r3, [pc, #144]	; (1d518 <xQueueReceive+0x354>)
   1d488:	4798      	blx	r3
   1d48a:	0003      	movs	r3, r0
   1d48c:	001a      	movs	r2, r3
   1d48e:	4b23      	ldr	r3, [pc, #140]	; (1d51c <xQueueReceive+0x358>)
   1d490:	5c9b      	ldrb	r3, [r3, r2]
   1d492:	2b02      	cmp	r3, #2
   1d494:	d018      	beq.n	1d4c8 <xQueueReceive+0x304>
   1d496:	4b1c      	ldr	r3, [pc, #112]	; (1d508 <xQueueReceive+0x344>)
   1d498:	4798      	blx	r3
   1d49a:	0003      	movs	r3, r0
   1d49c:	0018      	movs	r0, r3
   1d49e:	4b1b      	ldr	r3, [pc, #108]	; (1d50c <xQueueReceive+0x348>)
   1d4a0:	4798      	blx	r3
   1d4a2:	0003      	movs	r3, r0
   1d4a4:	001a      	movs	r2, r3
   1d4a6:	4b1a      	ldr	r3, [pc, #104]	; (1d510 <xQueueReceive+0x34c>)
   1d4a8:	881b      	ldrh	r3, [r3, #0]
   1d4aa:	4013      	ands	r3, r2
   1d4ac:	b29b      	uxth	r3, r3
   1d4ae:	2b00      	cmp	r3, #0
   1d4b0:	d00a      	beq.n	1d4c8 <xQueueReceive+0x304>
   1d4b2:	4b15      	ldr	r3, [pc, #84]	; (1d508 <xQueueReceive+0x344>)
   1d4b4:	4798      	blx	r3
   1d4b6:	0003      	movs	r3, r0
   1d4b8:	0018      	movs	r0, r3
   1d4ba:	4b1b      	ldr	r3, [pc, #108]	; (1d528 <xQueueReceive+0x364>)
   1d4bc:	4798      	blx	r3
   1d4be:	0003      	movs	r3, r0
   1d4c0:	b2db      	uxtb	r3, r3
   1d4c2:	0018      	movs	r0, r3
   1d4c4:	4b21      	ldr	r3, [pc, #132]	; (1d54c <xQueueReceive+0x388>)
   1d4c6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1d4c8:	6a3b      	ldr	r3, [r7, #32]
   1d4ca:	3324      	adds	r3, #36	; 0x24
   1d4cc:	687a      	ldr	r2, [r7, #4]
   1d4ce:	0011      	movs	r1, r2
   1d4d0:	0018      	movs	r0, r3
   1d4d2:	4b1f      	ldr	r3, [pc, #124]	; (1d550 <xQueueReceive+0x38c>)
   1d4d4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1d4d6:	6a3b      	ldr	r3, [r7, #32]
   1d4d8:	0018      	movs	r0, r3
   1d4da:	4b1e      	ldr	r3, [pc, #120]	; (1d554 <xQueueReceive+0x390>)
   1d4dc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d4de:	4b1e      	ldr	r3, [pc, #120]	; (1d558 <xQueueReceive+0x394>)
   1d4e0:	4798      	blx	r3
   1d4e2:	1e03      	subs	r3, r0, #0
   1d4e4:	d000      	beq.n	1d4e8 <xQueueReceive+0x324>
   1d4e6:	e698      	b.n	1d21a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1d4e8:	4b12      	ldr	r3, [pc, #72]	; (1d534 <xQueueReceive+0x370>)
   1d4ea:	4798      	blx	r3
   1d4ec:	e695      	b.n	1d21a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1d4ee:	6a3b      	ldr	r3, [r7, #32]
   1d4f0:	0018      	movs	r0, r3
   1d4f2:	4b18      	ldr	r3, [pc, #96]	; (1d554 <xQueueReceive+0x390>)
   1d4f4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d4f6:	4b18      	ldr	r3, [pc, #96]	; (1d558 <xQueueReceive+0x394>)
   1d4f8:	4798      	blx	r3
   1d4fa:	e68e      	b.n	1d21a <xQueueReceive+0x56>
   1d4fc:	0001f099 	.word	0x0001f099
   1d500:	0001c379 	.word	0x0001c379
   1d504:	0001dc25 	.word	0x0001dc25
   1d508:	0001a615 	.word	0x0001a615
   1d50c:	0001a379 	.word	0x0001a379
   1d510:	2000010c 	.word	0x2000010c
   1d514:	0001a439 	.word	0x0001a439
   1d518:	0001a339 	.word	0x0001a339
   1d51c:	20000100 	.word	0x20000100
   1d520:	0001a419 	.word	0x0001a419
   1d524:	0001ad71 	.word	0x0001ad71
   1d528:	0001a359 	.word	0x0001a359
   1d52c:	0001b3cd 	.word	0x0001b3cd
   1d530:	0001ec09 	.word	0x0001ec09
   1d534:	0001c361 	.word	0x0001c361
   1d538:	0001c39d 	.word	0x0001c39d
   1d53c:	0001ed49 	.word	0x0001ed49
   1d540:	0001e631 	.word	0x0001e631
   1d544:	0001ed71 	.word	0x0001ed71
   1d548:	0001dd65 	.word	0x0001dd65
   1d54c:	0001b509 	.word	0x0001b509
   1d550:	0001eae5 	.word	0x0001eae5
   1d554:	0001dc75 	.word	0x0001dc75
   1d558:	0001e649 	.word	0x0001e649
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1d55c:	6a3b      	ldr	r3, [r7, #32]
   1d55e:	0018      	movs	r0, r3
   1d560:	4b23      	ldr	r3, [pc, #140]	; (1d5f0 <xQueueReceive+0x42c>)
   1d562:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d564:	4b23      	ldr	r3, [pc, #140]	; (1d5f4 <xQueueReceive+0x430>)
   1d566:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d568:	6a3b      	ldr	r3, [r7, #32]
   1d56a:	0018      	movs	r0, r3
   1d56c:	4b22      	ldr	r3, [pc, #136]	; (1d5f8 <xQueueReceive+0x434>)
   1d56e:	4798      	blx	r3
   1d570:	1e03      	subs	r3, r0, #0
   1d572:	d100      	bne.n	1d576 <xQueueReceive+0x3b2>
   1d574:	e651      	b.n	1d21a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d576:	4b21      	ldr	r3, [pc, #132]	; (1d5fc <xQueueReceive+0x438>)
   1d578:	4798      	blx	r3
   1d57a:	0003      	movs	r3, r0
   1d57c:	0018      	movs	r0, r3
   1d57e:	4b20      	ldr	r3, [pc, #128]	; (1d600 <xQueueReceive+0x43c>)
   1d580:	4798      	blx	r3
   1d582:	0003      	movs	r3, r0
   1d584:	001a      	movs	r2, r3
   1d586:	4b1f      	ldr	r3, [pc, #124]	; (1d604 <xQueueReceive+0x440>)
   1d588:	881b      	ldrh	r3, [r3, #0]
   1d58a:	4013      	ands	r3, r2
   1d58c:	b29b      	uxth	r3, r3
   1d58e:	2b00      	cmp	r3, #0
   1d590:	d029      	beq.n	1d5e6 <xQueueReceive+0x422>
   1d592:	6a3b      	ldr	r3, [r7, #32]
   1d594:	0018      	movs	r0, r3
   1d596:	4b1c      	ldr	r3, [pc, #112]	; (1d608 <xQueueReceive+0x444>)
   1d598:	4798      	blx	r3
   1d59a:	0003      	movs	r3, r0
   1d59c:	001a      	movs	r2, r3
   1d59e:	4b19      	ldr	r3, [pc, #100]	; (1d604 <xQueueReceive+0x440>)
   1d5a0:	881b      	ldrh	r3, [r3, #0]
   1d5a2:	4013      	ands	r3, r2
   1d5a4:	b29b      	uxth	r3, r3
   1d5a6:	2b00      	cmp	r3, #0
   1d5a8:	d01d      	beq.n	1d5e6 <xQueueReceive+0x422>
   1d5aa:	6a3b      	ldr	r3, [r7, #32]
   1d5ac:	0018      	movs	r0, r3
   1d5ae:	4b17      	ldr	r3, [pc, #92]	; (1d60c <xQueueReceive+0x448>)
   1d5b0:	4798      	blx	r3
   1d5b2:	0003      	movs	r3, r0
   1d5b4:	001a      	movs	r2, r3
   1d5b6:	4b16      	ldr	r3, [pc, #88]	; (1d610 <xQueueReceive+0x44c>)
   1d5b8:	5c9b      	ldrb	r3, [r3, r2]
   1d5ba:	3350      	adds	r3, #80	; 0x50
   1d5bc:	b2db      	uxtb	r3, r3
   1d5be:	001d      	movs	r5, r3
   1d5c0:	6a3b      	ldr	r3, [r7, #32]
   1d5c2:	0018      	movs	r0, r3
   1d5c4:	4b11      	ldr	r3, [pc, #68]	; (1d60c <xQueueReceive+0x448>)
   1d5c6:	4798      	blx	r3
   1d5c8:	0003      	movs	r3, r0
   1d5ca:	001a      	movs	r2, r3
   1d5cc:	4b10      	ldr	r3, [pc, #64]	; (1d610 <xQueueReceive+0x44c>)
   1d5ce:	5c9c      	ldrb	r4, [r3, r2]
   1d5d0:	6a3b      	ldr	r3, [r7, #32]
   1d5d2:	0018      	movs	r0, r3
   1d5d4:	4b0f      	ldr	r3, [pc, #60]	; (1d614 <xQueueReceive+0x450>)
   1d5d6:	4798      	blx	r3
   1d5d8:	0003      	movs	r3, r0
   1d5da:	b2db      	uxtb	r3, r3
   1d5dc:	001a      	movs	r2, r3
   1d5de:	0021      	movs	r1, r4
   1d5e0:	0028      	movs	r0, r5
   1d5e2:	4b0d      	ldr	r3, [pc, #52]	; (1d618 <xQueueReceive+0x454>)
   1d5e4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1d5e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1d5e8:	0018      	movs	r0, r3
   1d5ea:	46bd      	mov	sp, r7
   1d5ec:	b00a      	add	sp, #40	; 0x28
   1d5ee:	bdb0      	pop	{r4, r5, r7, pc}
   1d5f0:	0001dc75 	.word	0x0001dc75
   1d5f4:	0001e649 	.word	0x0001e649
   1d5f8:	0001dd65 	.word	0x0001dd65
   1d5fc:	0001a615 	.word	0x0001a615
   1d600:	0001a379 	.word	0x0001a379
   1d604:	2000010c 	.word	0x2000010c
   1d608:	0001a439 	.word	0x0001a439
   1d60c:	0001a339 	.word	0x0001a339
   1d610:	20000100 	.word	0x20000100
   1d614:	0001a419 	.word	0x0001a419
   1d618:	0001ad71 	.word	0x0001ad71

0001d61c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1d61c:	b5b0      	push	{r4, r5, r7, lr}
   1d61e:	b08a      	sub	sp, #40	; 0x28
   1d620:	af00      	add	r7, sp, #0
   1d622:	6078      	str	r0, [r7, #4]
   1d624:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1d626:	2300      	movs	r3, #0
   1d628:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d62a:	687b      	ldr	r3, [r7, #4]
   1d62c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1d62e:	2300      	movs	r3, #0
   1d630:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d632:	69fb      	ldr	r3, [r7, #28]
   1d634:	2b00      	cmp	r3, #0
   1d636:	d101      	bne.n	1d63c <xQueueSemaphoreTake+0x20>
   1d638:	b672      	cpsid	i
   1d63a:	e7fe      	b.n	1d63a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1d63c:	69fb      	ldr	r3, [r7, #28]
   1d63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d640:	2b00      	cmp	r3, #0
   1d642:	d001      	beq.n	1d648 <xQueueSemaphoreTake+0x2c>
   1d644:	b672      	cpsid	i
   1d646:	e7fe      	b.n	1d646 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d648:	4bcb      	ldr	r3, [pc, #812]	; (1d978 <xQueueSemaphoreTake+0x35c>)
   1d64a:	4798      	blx	r3
   1d64c:	1e03      	subs	r3, r0, #0
   1d64e:	d102      	bne.n	1d656 <xQueueSemaphoreTake+0x3a>
   1d650:	683b      	ldr	r3, [r7, #0]
   1d652:	2b00      	cmp	r3, #0
   1d654:	d101      	bne.n	1d65a <xQueueSemaphoreTake+0x3e>
   1d656:	2301      	movs	r3, #1
   1d658:	e000      	b.n	1d65c <xQueueSemaphoreTake+0x40>
   1d65a:	2300      	movs	r3, #0
   1d65c:	2b00      	cmp	r3, #0
   1d65e:	d101      	bne.n	1d664 <xQueueSemaphoreTake+0x48>
   1d660:	b672      	cpsid	i
   1d662:	e7fe      	b.n	1d662 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d664:	4bc5      	ldr	r3, [pc, #788]	; (1d97c <xQueueSemaphoreTake+0x360>)
   1d666:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1d668:	69fb      	ldr	r3, [r7, #28]
   1d66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d66c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1d66e:	69bb      	ldr	r3, [r7, #24]
   1d670:	2b00      	cmp	r3, #0
   1d672:	d100      	bne.n	1d676 <xQueueSemaphoreTake+0x5a>
   1d674:	e080      	b.n	1d778 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1d676:	4bc2      	ldr	r3, [pc, #776]	; (1d980 <xQueueSemaphoreTake+0x364>)
   1d678:	4798      	blx	r3
   1d67a:	0003      	movs	r3, r0
   1d67c:	0018      	movs	r0, r3
   1d67e:	4bc1      	ldr	r3, [pc, #772]	; (1d984 <xQueueSemaphoreTake+0x368>)
   1d680:	4798      	blx	r3
   1d682:	0003      	movs	r3, r0
   1d684:	001a      	movs	r2, r3
   1d686:	4bc0      	ldr	r3, [pc, #768]	; (1d988 <xQueueSemaphoreTake+0x36c>)
   1d688:	881b      	ldrh	r3, [r3, #0]
   1d68a:	4013      	ands	r3, r2
   1d68c:	b29b      	uxth	r3, r3
   1d68e:	2b00      	cmp	r3, #0
   1d690:	d029      	beq.n	1d6e6 <xQueueSemaphoreTake+0xca>
   1d692:	69fb      	ldr	r3, [r7, #28]
   1d694:	0018      	movs	r0, r3
   1d696:	4bbd      	ldr	r3, [pc, #756]	; (1d98c <xQueueSemaphoreTake+0x370>)
   1d698:	4798      	blx	r3
   1d69a:	0003      	movs	r3, r0
   1d69c:	001a      	movs	r2, r3
   1d69e:	4bba      	ldr	r3, [pc, #744]	; (1d988 <xQueueSemaphoreTake+0x36c>)
   1d6a0:	881b      	ldrh	r3, [r3, #0]
   1d6a2:	4013      	ands	r3, r2
   1d6a4:	b29b      	uxth	r3, r3
   1d6a6:	2b00      	cmp	r3, #0
   1d6a8:	d01d      	beq.n	1d6e6 <xQueueSemaphoreTake+0xca>
   1d6aa:	69fb      	ldr	r3, [r7, #28]
   1d6ac:	0018      	movs	r0, r3
   1d6ae:	4bb8      	ldr	r3, [pc, #736]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d6b0:	4798      	blx	r3
   1d6b2:	0003      	movs	r3, r0
   1d6b4:	001a      	movs	r2, r3
   1d6b6:	4bb7      	ldr	r3, [pc, #732]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d6b8:	5c9b      	ldrb	r3, [r3, r2]
   1d6ba:	3328      	adds	r3, #40	; 0x28
   1d6bc:	b2db      	uxtb	r3, r3
   1d6be:	001d      	movs	r5, r3
   1d6c0:	69fb      	ldr	r3, [r7, #28]
   1d6c2:	0018      	movs	r0, r3
   1d6c4:	4bb2      	ldr	r3, [pc, #712]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d6c6:	4798      	blx	r3
   1d6c8:	0003      	movs	r3, r0
   1d6ca:	001a      	movs	r2, r3
   1d6cc:	4bb1      	ldr	r3, [pc, #708]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d6ce:	5c9c      	ldrb	r4, [r3, r2]
   1d6d0:	69fb      	ldr	r3, [r7, #28]
   1d6d2:	0018      	movs	r0, r3
   1d6d4:	4bb0      	ldr	r3, [pc, #704]	; (1d998 <xQueueSemaphoreTake+0x37c>)
   1d6d6:	4798      	blx	r3
   1d6d8:	0003      	movs	r3, r0
   1d6da:	b2db      	uxtb	r3, r3
   1d6dc:	001a      	movs	r2, r3
   1d6de:	0021      	movs	r1, r4
   1d6e0:	0028      	movs	r0, r5
   1d6e2:	4bae      	ldr	r3, [pc, #696]	; (1d99c <xQueueSemaphoreTake+0x380>)
   1d6e4:	4798      	blx	r3
   1d6e6:	69fb      	ldr	r3, [r7, #28]
   1d6e8:	0018      	movs	r0, r3
   1d6ea:	4ba9      	ldr	r3, [pc, #676]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d6ec:	4798      	blx	r3
   1d6ee:	0003      	movs	r3, r0
   1d6f0:	001a      	movs	r2, r3
   1d6f2:	4ba8      	ldr	r3, [pc, #672]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d6f4:	5c9c      	ldrb	r4, [r3, r2]
   1d6f6:	69fb      	ldr	r3, [r7, #28]
   1d6f8:	0018      	movs	r0, r3
   1d6fa:	4ba7      	ldr	r3, [pc, #668]	; (1d998 <xQueueSemaphoreTake+0x37c>)
   1d6fc:	4798      	blx	r3
   1d6fe:	0003      	movs	r3, r0
   1d700:	b2dd      	uxtb	r5, r3
   1d702:	69fb      	ldr	r3, [r7, #28]
   1d704:	0018      	movs	r0, r3
   1d706:	4ba2      	ldr	r3, [pc, #648]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d708:	4798      	blx	r3
   1d70a:	0003      	movs	r3, r0
   1d70c:	001a      	movs	r2, r3
   1d70e:	4ba1      	ldr	r3, [pc, #644]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d710:	5c9b      	ldrb	r3, [r3, r2]
   1d712:	2b02      	cmp	r3, #2
   1d714:	d108      	bne.n	1d728 <xQueueSemaphoreTake+0x10c>
   1d716:	4b9a      	ldr	r3, [pc, #616]	; (1d980 <xQueueSemaphoreTake+0x364>)
   1d718:	4798      	blx	r3
   1d71a:	0003      	movs	r3, r0
   1d71c:	0018      	movs	r0, r3
   1d71e:	4ba0      	ldr	r3, [pc, #640]	; (1d9a0 <xQueueSemaphoreTake+0x384>)
   1d720:	4798      	blx	r3
   1d722:	0003      	movs	r3, r0
   1d724:	b2db      	uxtb	r3, r3
   1d726:	e004      	b.n	1d732 <xQueueSemaphoreTake+0x116>
   1d728:	69fb      	ldr	r3, [r7, #28]
   1d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d72c:	b2db      	uxtb	r3, r3
   1d72e:	3b01      	subs	r3, #1
   1d730:	b2db      	uxtb	r3, r3
   1d732:	001a      	movs	r2, r3
   1d734:	0029      	movs	r1, r5
   1d736:	0020      	movs	r0, r4
   1d738:	4b9a      	ldr	r3, [pc, #616]	; (1d9a4 <xQueueSemaphoreTake+0x388>)
   1d73a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1d73c:	69bb      	ldr	r3, [r7, #24]
   1d73e:	1e5a      	subs	r2, r3, #1
   1d740:	69fb      	ldr	r3, [r7, #28]
   1d742:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1d744:	69fb      	ldr	r3, [r7, #28]
   1d746:	681b      	ldr	r3, [r3, #0]
   1d748:	2b00      	cmp	r3, #0
   1d74a:	d104      	bne.n	1d756 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1d74c:	4b96      	ldr	r3, [pc, #600]	; (1d9a8 <xQueueSemaphoreTake+0x38c>)
   1d74e:	4798      	blx	r3
   1d750:	0002      	movs	r2, r0
   1d752:	69fb      	ldr	r3, [r7, #28]
   1d754:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d756:	69fb      	ldr	r3, [r7, #28]
   1d758:	691b      	ldr	r3, [r3, #16]
   1d75a:	2b00      	cmp	r3, #0
   1d75c:	d008      	beq.n	1d770 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d75e:	69fb      	ldr	r3, [r7, #28]
   1d760:	3310      	adds	r3, #16
   1d762:	0018      	movs	r0, r3
   1d764:	4b91      	ldr	r3, [pc, #580]	; (1d9ac <xQueueSemaphoreTake+0x390>)
   1d766:	4798      	blx	r3
   1d768:	1e03      	subs	r3, r0, #0
   1d76a:	d001      	beq.n	1d770 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d76c:	4b90      	ldr	r3, [pc, #576]	; (1d9b0 <xQueueSemaphoreTake+0x394>)
   1d76e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d770:	4b90      	ldr	r3, [pc, #576]	; (1d9b4 <xQueueSemaphoreTake+0x398>)
   1d772:	4798      	blx	r3
				return pdPASS;
   1d774:	2301      	movs	r3, #1
   1d776:	e18b      	b.n	1da90 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d778:	683b      	ldr	r3, [r7, #0]
   1d77a:	2b00      	cmp	r3, #0
   1d77c:	d140      	bne.n	1d800 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1d77e:	6a3b      	ldr	r3, [r7, #32]
   1d780:	2b00      	cmp	r3, #0
   1d782:	d001      	beq.n	1d788 <xQueueSemaphoreTake+0x16c>
   1d784:	b672      	cpsid	i
   1d786:	e7fe      	b.n	1d786 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1d788:	4b8a      	ldr	r3, [pc, #552]	; (1d9b4 <xQueueSemaphoreTake+0x398>)
   1d78a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d78c:	4b7c      	ldr	r3, [pc, #496]	; (1d980 <xQueueSemaphoreTake+0x364>)
   1d78e:	4798      	blx	r3
   1d790:	0003      	movs	r3, r0
   1d792:	0018      	movs	r0, r3
   1d794:	4b7b      	ldr	r3, [pc, #492]	; (1d984 <xQueueSemaphoreTake+0x368>)
   1d796:	4798      	blx	r3
   1d798:	0003      	movs	r3, r0
   1d79a:	001a      	movs	r2, r3
   1d79c:	4b7a      	ldr	r3, [pc, #488]	; (1d988 <xQueueSemaphoreTake+0x36c>)
   1d79e:	881b      	ldrh	r3, [r3, #0]
   1d7a0:	4013      	ands	r3, r2
   1d7a2:	b29b      	uxth	r3, r3
   1d7a4:	2b00      	cmp	r3, #0
   1d7a6:	d029      	beq.n	1d7fc <xQueueSemaphoreTake+0x1e0>
   1d7a8:	69fb      	ldr	r3, [r7, #28]
   1d7aa:	0018      	movs	r0, r3
   1d7ac:	4b77      	ldr	r3, [pc, #476]	; (1d98c <xQueueSemaphoreTake+0x370>)
   1d7ae:	4798      	blx	r3
   1d7b0:	0003      	movs	r3, r0
   1d7b2:	001a      	movs	r2, r3
   1d7b4:	4b74      	ldr	r3, [pc, #464]	; (1d988 <xQueueSemaphoreTake+0x36c>)
   1d7b6:	881b      	ldrh	r3, [r3, #0]
   1d7b8:	4013      	ands	r3, r2
   1d7ba:	b29b      	uxth	r3, r3
   1d7bc:	2b00      	cmp	r3, #0
   1d7be:	d01d      	beq.n	1d7fc <xQueueSemaphoreTake+0x1e0>
   1d7c0:	69fb      	ldr	r3, [r7, #28]
   1d7c2:	0018      	movs	r0, r3
   1d7c4:	4b72      	ldr	r3, [pc, #456]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d7c6:	4798      	blx	r3
   1d7c8:	0003      	movs	r3, r0
   1d7ca:	001a      	movs	r2, r3
   1d7cc:	4b71      	ldr	r3, [pc, #452]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d7ce:	5c9b      	ldrb	r3, [r3, r2]
   1d7d0:	3350      	adds	r3, #80	; 0x50
   1d7d2:	b2db      	uxtb	r3, r3
   1d7d4:	001d      	movs	r5, r3
   1d7d6:	69fb      	ldr	r3, [r7, #28]
   1d7d8:	0018      	movs	r0, r3
   1d7da:	4b6d      	ldr	r3, [pc, #436]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d7dc:	4798      	blx	r3
   1d7de:	0003      	movs	r3, r0
   1d7e0:	001a      	movs	r2, r3
   1d7e2:	4b6c      	ldr	r3, [pc, #432]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d7e4:	5c9c      	ldrb	r4, [r3, r2]
   1d7e6:	69fb      	ldr	r3, [r7, #28]
   1d7e8:	0018      	movs	r0, r3
   1d7ea:	4b6b      	ldr	r3, [pc, #428]	; (1d998 <xQueueSemaphoreTake+0x37c>)
   1d7ec:	4798      	blx	r3
   1d7ee:	0003      	movs	r3, r0
   1d7f0:	b2db      	uxtb	r3, r3
   1d7f2:	001a      	movs	r2, r3
   1d7f4:	0021      	movs	r1, r4
   1d7f6:	0028      	movs	r0, r5
   1d7f8:	4b68      	ldr	r3, [pc, #416]	; (1d99c <xQueueSemaphoreTake+0x380>)
   1d7fa:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1d7fc:	2300      	movs	r3, #0
   1d7fe:	e147      	b.n	1da90 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d802:	2b00      	cmp	r3, #0
   1d804:	d106      	bne.n	1d814 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d806:	230c      	movs	r3, #12
   1d808:	18fb      	adds	r3, r7, r3
   1d80a:	0018      	movs	r0, r3
   1d80c:	4b6a      	ldr	r3, [pc, #424]	; (1d9b8 <xQueueSemaphoreTake+0x39c>)
   1d80e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d810:	2301      	movs	r3, #1
   1d812:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d814:	4b67      	ldr	r3, [pc, #412]	; (1d9b4 <xQueueSemaphoreTake+0x398>)
   1d816:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d818:	4b68      	ldr	r3, [pc, #416]	; (1d9bc <xQueueSemaphoreTake+0x3a0>)
   1d81a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d81c:	4b57      	ldr	r3, [pc, #348]	; (1d97c <xQueueSemaphoreTake+0x360>)
   1d81e:	4798      	blx	r3
   1d820:	69fb      	ldr	r3, [r7, #28]
   1d822:	2244      	movs	r2, #68	; 0x44
   1d824:	5c9b      	ldrb	r3, [r3, r2]
   1d826:	b25b      	sxtb	r3, r3
   1d828:	3301      	adds	r3, #1
   1d82a:	d103      	bne.n	1d834 <xQueueSemaphoreTake+0x218>
   1d82c:	69fb      	ldr	r3, [r7, #28]
   1d82e:	2244      	movs	r2, #68	; 0x44
   1d830:	2100      	movs	r1, #0
   1d832:	5499      	strb	r1, [r3, r2]
   1d834:	69fb      	ldr	r3, [r7, #28]
   1d836:	2245      	movs	r2, #69	; 0x45
   1d838:	5c9b      	ldrb	r3, [r3, r2]
   1d83a:	b25b      	sxtb	r3, r3
   1d83c:	3301      	adds	r3, #1
   1d83e:	d103      	bne.n	1d848 <xQueueSemaphoreTake+0x22c>
   1d840:	69fb      	ldr	r3, [r7, #28]
   1d842:	2245      	movs	r2, #69	; 0x45
   1d844:	2100      	movs	r1, #0
   1d846:	5499      	strb	r1, [r3, r2]
   1d848:	4b5a      	ldr	r3, [pc, #360]	; (1d9b4 <xQueueSemaphoreTake+0x398>)
   1d84a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d84c:	003a      	movs	r2, r7
   1d84e:	230c      	movs	r3, #12
   1d850:	18fb      	adds	r3, r7, r3
   1d852:	0011      	movs	r1, r2
   1d854:	0018      	movs	r0, r3
   1d856:	4b5a      	ldr	r3, [pc, #360]	; (1d9c0 <xQueueSemaphoreTake+0x3a4>)
   1d858:	4798      	blx	r3
   1d85a:	1e03      	subs	r3, r0, #0
   1d85c:	d000      	beq.n	1d860 <xQueueSemaphoreTake+0x244>
   1d85e:	e0bd      	b.n	1d9dc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d860:	69fb      	ldr	r3, [r7, #28]
   1d862:	0018      	movs	r0, r3
   1d864:	4b57      	ldr	r3, [pc, #348]	; (1d9c4 <xQueueSemaphoreTake+0x3a8>)
   1d866:	4798      	blx	r3
   1d868:	1e03      	subs	r3, r0, #0
   1d86a:	d100      	bne.n	1d86e <xQueueSemaphoreTake+0x252>
   1d86c:	e07c      	b.n	1d968 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1d86e:	4b44      	ldr	r3, [pc, #272]	; (1d980 <xQueueSemaphoreTake+0x364>)
   1d870:	4798      	blx	r3
   1d872:	0003      	movs	r3, r0
   1d874:	0018      	movs	r0, r3
   1d876:	4b43      	ldr	r3, [pc, #268]	; (1d984 <xQueueSemaphoreTake+0x368>)
   1d878:	4798      	blx	r3
   1d87a:	0003      	movs	r3, r0
   1d87c:	001a      	movs	r2, r3
   1d87e:	4b42      	ldr	r3, [pc, #264]	; (1d988 <xQueueSemaphoreTake+0x36c>)
   1d880:	881b      	ldrh	r3, [r3, #0]
   1d882:	4013      	ands	r3, r2
   1d884:	b29b      	uxth	r3, r3
   1d886:	2b00      	cmp	r3, #0
   1d888:	d029      	beq.n	1d8de <xQueueSemaphoreTake+0x2c2>
   1d88a:	69fb      	ldr	r3, [r7, #28]
   1d88c:	0018      	movs	r0, r3
   1d88e:	4b3f      	ldr	r3, [pc, #252]	; (1d98c <xQueueSemaphoreTake+0x370>)
   1d890:	4798      	blx	r3
   1d892:	0003      	movs	r3, r0
   1d894:	001a      	movs	r2, r3
   1d896:	4b3c      	ldr	r3, [pc, #240]	; (1d988 <xQueueSemaphoreTake+0x36c>)
   1d898:	881b      	ldrh	r3, [r3, #0]
   1d89a:	4013      	ands	r3, r2
   1d89c:	b29b      	uxth	r3, r3
   1d89e:	2b00      	cmp	r3, #0
   1d8a0:	d01d      	beq.n	1d8de <xQueueSemaphoreTake+0x2c2>
   1d8a2:	69fb      	ldr	r3, [r7, #28]
   1d8a4:	0018      	movs	r0, r3
   1d8a6:	4b3a      	ldr	r3, [pc, #232]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d8a8:	4798      	blx	r3
   1d8aa:	0003      	movs	r3, r0
   1d8ac:	001a      	movs	r2, r3
   1d8ae:	4b39      	ldr	r3, [pc, #228]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d8b0:	5c9b      	ldrb	r3, [r3, r2]
   1d8b2:	3368      	adds	r3, #104	; 0x68
   1d8b4:	b2db      	uxtb	r3, r3
   1d8b6:	001d      	movs	r5, r3
   1d8b8:	69fb      	ldr	r3, [r7, #28]
   1d8ba:	0018      	movs	r0, r3
   1d8bc:	4b34      	ldr	r3, [pc, #208]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d8be:	4798      	blx	r3
   1d8c0:	0003      	movs	r3, r0
   1d8c2:	001a      	movs	r2, r3
   1d8c4:	4b33      	ldr	r3, [pc, #204]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d8c6:	5c9c      	ldrb	r4, [r3, r2]
   1d8c8:	69fb      	ldr	r3, [r7, #28]
   1d8ca:	0018      	movs	r0, r3
   1d8cc:	4b32      	ldr	r3, [pc, #200]	; (1d998 <xQueueSemaphoreTake+0x37c>)
   1d8ce:	4798      	blx	r3
   1d8d0:	0003      	movs	r3, r0
   1d8d2:	b2db      	uxtb	r3, r3
   1d8d4:	001a      	movs	r2, r3
   1d8d6:	0021      	movs	r1, r4
   1d8d8:	0028      	movs	r0, r5
   1d8da:	4b30      	ldr	r3, [pc, #192]	; (1d99c <xQueueSemaphoreTake+0x380>)
   1d8dc:	4798      	blx	r3
   1d8de:	69fb      	ldr	r3, [r7, #28]
   1d8e0:	0018      	movs	r0, r3
   1d8e2:	4b2b      	ldr	r3, [pc, #172]	; (1d990 <xQueueSemaphoreTake+0x374>)
   1d8e4:	4798      	blx	r3
   1d8e6:	0003      	movs	r3, r0
   1d8e8:	001a      	movs	r2, r3
   1d8ea:	4b2a      	ldr	r3, [pc, #168]	; (1d994 <xQueueSemaphoreTake+0x378>)
   1d8ec:	5c9b      	ldrb	r3, [r3, r2]
   1d8ee:	2b02      	cmp	r3, #2
   1d8f0:	d018      	beq.n	1d924 <xQueueSemaphoreTake+0x308>
   1d8f2:	4b23      	ldr	r3, [pc, #140]	; (1d980 <xQueueSemaphoreTake+0x364>)
   1d8f4:	4798      	blx	r3
   1d8f6:	0003      	movs	r3, r0
   1d8f8:	0018      	movs	r0, r3
   1d8fa:	4b22      	ldr	r3, [pc, #136]	; (1d984 <xQueueSemaphoreTake+0x368>)
   1d8fc:	4798      	blx	r3
   1d8fe:	0003      	movs	r3, r0
   1d900:	001a      	movs	r2, r3
   1d902:	4b21      	ldr	r3, [pc, #132]	; (1d988 <xQueueSemaphoreTake+0x36c>)
   1d904:	881b      	ldrh	r3, [r3, #0]
   1d906:	4013      	ands	r3, r2
   1d908:	b29b      	uxth	r3, r3
   1d90a:	2b00      	cmp	r3, #0
   1d90c:	d00a      	beq.n	1d924 <xQueueSemaphoreTake+0x308>
   1d90e:	4b1c      	ldr	r3, [pc, #112]	; (1d980 <xQueueSemaphoreTake+0x364>)
   1d910:	4798      	blx	r3
   1d912:	0003      	movs	r3, r0
   1d914:	0018      	movs	r0, r3
   1d916:	4b22      	ldr	r3, [pc, #136]	; (1d9a0 <xQueueSemaphoreTake+0x384>)
   1d918:	4798      	blx	r3
   1d91a:	0003      	movs	r3, r0
   1d91c:	b2db      	uxtb	r3, r3
   1d91e:	0018      	movs	r0, r3
   1d920:	4b29      	ldr	r3, [pc, #164]	; (1d9c8 <xQueueSemaphoreTake+0x3ac>)
   1d922:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1d924:	69fb      	ldr	r3, [r7, #28]
   1d926:	681b      	ldr	r3, [r3, #0]
   1d928:	2b00      	cmp	r3, #0
   1d92a:	d10a      	bne.n	1d942 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1d92c:	4b13      	ldr	r3, [pc, #76]	; (1d97c <xQueueSemaphoreTake+0x360>)
   1d92e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1d930:	69fb      	ldr	r3, [r7, #28]
   1d932:	685b      	ldr	r3, [r3, #4]
   1d934:	0018      	movs	r0, r3
   1d936:	4b25      	ldr	r3, [pc, #148]	; (1d9cc <xQueueSemaphoreTake+0x3b0>)
   1d938:	4798      	blx	r3
   1d93a:	0003      	movs	r3, r0
   1d93c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1d93e:	4b1d      	ldr	r3, [pc, #116]	; (1d9b4 <xQueueSemaphoreTake+0x398>)
   1d940:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1d942:	69fb      	ldr	r3, [r7, #28]
   1d944:	3324      	adds	r3, #36	; 0x24
   1d946:	683a      	ldr	r2, [r7, #0]
   1d948:	0011      	movs	r1, r2
   1d94a:	0018      	movs	r0, r3
   1d94c:	4b20      	ldr	r3, [pc, #128]	; (1d9d0 <xQueueSemaphoreTake+0x3b4>)
   1d94e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1d950:	69fb      	ldr	r3, [r7, #28]
   1d952:	0018      	movs	r0, r3
   1d954:	4b1f      	ldr	r3, [pc, #124]	; (1d9d4 <xQueueSemaphoreTake+0x3b8>)
   1d956:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d958:	4b1f      	ldr	r3, [pc, #124]	; (1d9d8 <xQueueSemaphoreTake+0x3bc>)
   1d95a:	4798      	blx	r3
   1d95c:	1e03      	subs	r3, r0, #0
   1d95e:	d000      	beq.n	1d962 <xQueueSemaphoreTake+0x346>
   1d960:	e680      	b.n	1d664 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1d962:	4b13      	ldr	r3, [pc, #76]	; (1d9b0 <xQueueSemaphoreTake+0x394>)
   1d964:	4798      	blx	r3
   1d966:	e67d      	b.n	1d664 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1d968:	69fb      	ldr	r3, [r7, #28]
   1d96a:	0018      	movs	r0, r3
   1d96c:	4b19      	ldr	r3, [pc, #100]	; (1d9d4 <xQueueSemaphoreTake+0x3b8>)
   1d96e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d970:	4b19      	ldr	r3, [pc, #100]	; (1d9d8 <xQueueSemaphoreTake+0x3bc>)
   1d972:	4798      	blx	r3
   1d974:	e676      	b.n	1d664 <xQueueSemaphoreTake+0x48>
   1d976:	46c0      	nop			; (mov r8, r8)
   1d978:	0001f099 	.word	0x0001f099
   1d97c:	0001c379 	.word	0x0001c379
   1d980:	0001a615 	.word	0x0001a615
   1d984:	0001a379 	.word	0x0001a379
   1d988:	2000010c 	.word	0x2000010c
   1d98c:	0001a439 	.word	0x0001a439
   1d990:	0001a339 	.word	0x0001a339
   1d994:	20000100 	.word	0x20000100
   1d998:	0001a419 	.word	0x0001a419
   1d99c:	0001ad71 	.word	0x0001ad71
   1d9a0:	0001a359 	.word	0x0001a359
   1d9a4:	0001b3cd 	.word	0x0001b3cd
   1d9a8:	0001f565 	.word	0x0001f565
   1d9ac:	0001ec09 	.word	0x0001ec09
   1d9b0:	0001c361 	.word	0x0001c361
   1d9b4:	0001c39d 	.word	0x0001c39d
   1d9b8:	0001ed49 	.word	0x0001ed49
   1d9bc:	0001e631 	.word	0x0001e631
   1d9c0:	0001ed71 	.word	0x0001ed71
   1d9c4:	0001dd65 	.word	0x0001dd65
   1d9c8:	0001b509 	.word	0x0001b509
   1d9cc:	0001f0d1 	.word	0x0001f0d1
   1d9d0:	0001eae5 	.word	0x0001eae5
   1d9d4:	0001dc75 	.word	0x0001dc75
   1d9d8:	0001e649 	.word	0x0001e649
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1d9dc:	69fb      	ldr	r3, [r7, #28]
   1d9de:	0018      	movs	r0, r3
   1d9e0:	4b2d      	ldr	r3, [pc, #180]	; (1da98 <xQueueSemaphoreTake+0x47c>)
   1d9e2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d9e4:	4b2d      	ldr	r3, [pc, #180]	; (1da9c <xQueueSemaphoreTake+0x480>)
   1d9e6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d9e8:	69fb      	ldr	r3, [r7, #28]
   1d9ea:	0018      	movs	r0, r3
   1d9ec:	4b2c      	ldr	r3, [pc, #176]	; (1daa0 <xQueueSemaphoreTake+0x484>)
   1d9ee:	4798      	blx	r3
   1d9f0:	1e03      	subs	r3, r0, #0
   1d9f2:	d100      	bne.n	1d9f6 <xQueueSemaphoreTake+0x3da>
   1d9f4:	e636      	b.n	1d664 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1d9f6:	6a3b      	ldr	r3, [r7, #32]
   1d9f8:	2b00      	cmp	r3, #0
   1d9fa:	d010      	beq.n	1da1e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1d9fc:	4b29      	ldr	r3, [pc, #164]	; (1daa4 <xQueueSemaphoreTake+0x488>)
   1d9fe:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1da00:	69fb      	ldr	r3, [r7, #28]
   1da02:	0018      	movs	r0, r3
   1da04:	4b28      	ldr	r3, [pc, #160]	; (1daa8 <xQueueSemaphoreTake+0x48c>)
   1da06:	4798      	blx	r3
   1da08:	0003      	movs	r3, r0
   1da0a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1da0c:	69fb      	ldr	r3, [r7, #28]
   1da0e:	685b      	ldr	r3, [r3, #4]
   1da10:	697a      	ldr	r2, [r7, #20]
   1da12:	0011      	movs	r1, r2
   1da14:	0018      	movs	r0, r3
   1da16:	4b25      	ldr	r3, [pc, #148]	; (1daac <xQueueSemaphoreTake+0x490>)
   1da18:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1da1a:	4b25      	ldr	r3, [pc, #148]	; (1dab0 <xQueueSemaphoreTake+0x494>)
   1da1c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1da1e:	4b25      	ldr	r3, [pc, #148]	; (1dab4 <xQueueSemaphoreTake+0x498>)
   1da20:	4798      	blx	r3
   1da22:	0003      	movs	r3, r0
   1da24:	0018      	movs	r0, r3
   1da26:	4b24      	ldr	r3, [pc, #144]	; (1dab8 <xQueueSemaphoreTake+0x49c>)
   1da28:	4798      	blx	r3
   1da2a:	0003      	movs	r3, r0
   1da2c:	001a      	movs	r2, r3
   1da2e:	4b23      	ldr	r3, [pc, #140]	; (1dabc <xQueueSemaphoreTake+0x4a0>)
   1da30:	881b      	ldrh	r3, [r3, #0]
   1da32:	4013      	ands	r3, r2
   1da34:	b29b      	uxth	r3, r3
   1da36:	2b00      	cmp	r3, #0
   1da38:	d029      	beq.n	1da8e <xQueueSemaphoreTake+0x472>
   1da3a:	69fb      	ldr	r3, [r7, #28]
   1da3c:	0018      	movs	r0, r3
   1da3e:	4b20      	ldr	r3, [pc, #128]	; (1dac0 <xQueueSemaphoreTake+0x4a4>)
   1da40:	4798      	blx	r3
   1da42:	0003      	movs	r3, r0
   1da44:	001a      	movs	r2, r3
   1da46:	4b1d      	ldr	r3, [pc, #116]	; (1dabc <xQueueSemaphoreTake+0x4a0>)
   1da48:	881b      	ldrh	r3, [r3, #0]
   1da4a:	4013      	ands	r3, r2
   1da4c:	b29b      	uxth	r3, r3
   1da4e:	2b00      	cmp	r3, #0
   1da50:	d01d      	beq.n	1da8e <xQueueSemaphoreTake+0x472>
   1da52:	69fb      	ldr	r3, [r7, #28]
   1da54:	0018      	movs	r0, r3
   1da56:	4b1b      	ldr	r3, [pc, #108]	; (1dac4 <xQueueSemaphoreTake+0x4a8>)
   1da58:	4798      	blx	r3
   1da5a:	0003      	movs	r3, r0
   1da5c:	001a      	movs	r2, r3
   1da5e:	4b1a      	ldr	r3, [pc, #104]	; (1dac8 <xQueueSemaphoreTake+0x4ac>)
   1da60:	5c9b      	ldrb	r3, [r3, r2]
   1da62:	3350      	adds	r3, #80	; 0x50
   1da64:	b2db      	uxtb	r3, r3
   1da66:	001d      	movs	r5, r3
   1da68:	69fb      	ldr	r3, [r7, #28]
   1da6a:	0018      	movs	r0, r3
   1da6c:	4b15      	ldr	r3, [pc, #84]	; (1dac4 <xQueueSemaphoreTake+0x4a8>)
   1da6e:	4798      	blx	r3
   1da70:	0003      	movs	r3, r0
   1da72:	001a      	movs	r2, r3
   1da74:	4b14      	ldr	r3, [pc, #80]	; (1dac8 <xQueueSemaphoreTake+0x4ac>)
   1da76:	5c9c      	ldrb	r4, [r3, r2]
   1da78:	69fb      	ldr	r3, [r7, #28]
   1da7a:	0018      	movs	r0, r3
   1da7c:	4b13      	ldr	r3, [pc, #76]	; (1dacc <xQueueSemaphoreTake+0x4b0>)
   1da7e:	4798      	blx	r3
   1da80:	0003      	movs	r3, r0
   1da82:	b2db      	uxtb	r3, r3
   1da84:	001a      	movs	r2, r3
   1da86:	0021      	movs	r1, r4
   1da88:	0028      	movs	r0, r5
   1da8a:	4b11      	ldr	r3, [pc, #68]	; (1dad0 <xQueueSemaphoreTake+0x4b4>)
   1da8c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1da8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1da90:	0018      	movs	r0, r3
   1da92:	46bd      	mov	sp, r7
   1da94:	b00a      	add	sp, #40	; 0x28
   1da96:	bdb0      	pop	{r4, r5, r7, pc}
   1da98:	0001dc75 	.word	0x0001dc75
   1da9c:	0001e649 	.word	0x0001e649
   1daa0:	0001dd65 	.word	0x0001dd65
   1daa4:	0001c379 	.word	0x0001c379
   1daa8:	0001db17 	.word	0x0001db17
   1daac:	0001f3c9 	.word	0x0001f3c9
   1dab0:	0001c39d 	.word	0x0001c39d
   1dab4:	0001a615 	.word	0x0001a615
   1dab8:	0001a379 	.word	0x0001a379
   1dabc:	2000010c 	.word	0x2000010c
   1dac0:	0001a439 	.word	0x0001a439
   1dac4:	0001a339 	.word	0x0001a339
   1dac8:	20000100 	.word	0x20000100
   1dacc:	0001a419 	.word	0x0001a419
   1dad0:	0001ad71 	.word	0x0001ad71

0001dad4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1dad4:	b580      	push	{r7, lr}
   1dad6:	b082      	sub	sp, #8
   1dad8:	af00      	add	r7, sp, #0
   1dada:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1dadc:	687b      	ldr	r3, [r7, #4]
   1dade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1dae0:	0018      	movs	r0, r3
   1dae2:	46bd      	mov	sp, r7
   1dae4:	b002      	add	sp, #8
   1dae6:	bd80      	pop	{r7, pc}

0001dae8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1dae8:	b580      	push	{r7, lr}
   1daea:	b082      	sub	sp, #8
   1daec:	af00      	add	r7, sp, #0
   1daee:	6078      	str	r0, [r7, #4]
   1daf0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1daf2:	687b      	ldr	r3, [r7, #4]
   1daf4:	683a      	ldr	r2, [r7, #0]
   1daf6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1daf8:	46c0      	nop			; (mov r8, r8)
   1dafa:	46bd      	mov	sp, r7
   1dafc:	b002      	add	sp, #8
   1dafe:	bd80      	pop	{r7, pc}

0001db00 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1db00:	b580      	push	{r7, lr}
   1db02:	b082      	sub	sp, #8
   1db04:	af00      	add	r7, sp, #0
   1db06:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1db08:	687b      	ldr	r3, [r7, #4]
   1db0a:	2250      	movs	r2, #80	; 0x50
   1db0c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1db0e:	0018      	movs	r0, r3
   1db10:	46bd      	mov	sp, r7
   1db12:	b002      	add	sp, #8
   1db14:	bd80      	pop	{r7, pc}

0001db16 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1db16:	b580      	push	{r7, lr}
   1db18:	b084      	sub	sp, #16
   1db1a:	af00      	add	r7, sp, #0
   1db1c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1db1e:	687b      	ldr	r3, [r7, #4]
   1db20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1db22:	2b00      	cmp	r3, #0
   1db24:	d006      	beq.n	1db34 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1db26:	687b      	ldr	r3, [r7, #4]
   1db28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1db2a:	681b      	ldr	r3, [r3, #0]
   1db2c:	2205      	movs	r2, #5
   1db2e:	1ad3      	subs	r3, r2, r3
   1db30:	60fb      	str	r3, [r7, #12]
   1db32:	e001      	b.n	1db38 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1db34:	2300      	movs	r3, #0
   1db36:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1db38:	68fb      	ldr	r3, [r7, #12]
	}
   1db3a:	0018      	movs	r0, r3
   1db3c:	46bd      	mov	sp, r7
   1db3e:	b004      	add	sp, #16
   1db40:	bd80      	pop	{r7, pc}
	...

0001db44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1db44:	b580      	push	{r7, lr}
   1db46:	b086      	sub	sp, #24
   1db48:	af00      	add	r7, sp, #0
   1db4a:	60f8      	str	r0, [r7, #12]
   1db4c:	60b9      	str	r1, [r7, #8]
   1db4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1db50:	2300      	movs	r3, #0
   1db52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1db54:	68fb      	ldr	r3, [r7, #12]
   1db56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1db58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1db5a:	68fb      	ldr	r3, [r7, #12]
   1db5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1db5e:	2b00      	cmp	r3, #0
   1db60:	d10e      	bne.n	1db80 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1db62:	68fb      	ldr	r3, [r7, #12]
   1db64:	681b      	ldr	r3, [r3, #0]
   1db66:	2b00      	cmp	r3, #0
   1db68:	d14e      	bne.n	1dc08 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1db6a:	68fb      	ldr	r3, [r7, #12]
   1db6c:	685b      	ldr	r3, [r3, #4]
   1db6e:	0018      	movs	r0, r3
   1db70:	4b2a      	ldr	r3, [pc, #168]	; (1dc1c <prvCopyDataToQueue+0xd8>)
   1db72:	4798      	blx	r3
   1db74:	0003      	movs	r3, r0
   1db76:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1db78:	68fb      	ldr	r3, [r7, #12]
   1db7a:	2200      	movs	r2, #0
   1db7c:	605a      	str	r2, [r3, #4]
   1db7e:	e043      	b.n	1dc08 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1db80:	687b      	ldr	r3, [r7, #4]
   1db82:	2b00      	cmp	r3, #0
   1db84:	d119      	bne.n	1dbba <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1db86:	68fb      	ldr	r3, [r7, #12]
   1db88:	6898      	ldr	r0, [r3, #8]
   1db8a:	68fb      	ldr	r3, [r7, #12]
   1db8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1db8e:	68bb      	ldr	r3, [r7, #8]
   1db90:	0019      	movs	r1, r3
   1db92:	4b23      	ldr	r3, [pc, #140]	; (1dc20 <prvCopyDataToQueue+0xdc>)
   1db94:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1db96:	68fb      	ldr	r3, [r7, #12]
   1db98:	689a      	ldr	r2, [r3, #8]
   1db9a:	68fb      	ldr	r3, [r7, #12]
   1db9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1db9e:	18d2      	adds	r2, r2, r3
   1dba0:	68fb      	ldr	r3, [r7, #12]
   1dba2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1dba4:	68fb      	ldr	r3, [r7, #12]
   1dba6:	689a      	ldr	r2, [r3, #8]
   1dba8:	68fb      	ldr	r3, [r7, #12]
   1dbaa:	685b      	ldr	r3, [r3, #4]
   1dbac:	429a      	cmp	r2, r3
   1dbae:	d32b      	bcc.n	1dc08 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1dbb0:	68fb      	ldr	r3, [r7, #12]
   1dbb2:	681a      	ldr	r2, [r3, #0]
   1dbb4:	68fb      	ldr	r3, [r7, #12]
   1dbb6:	609a      	str	r2, [r3, #8]
   1dbb8:	e026      	b.n	1dc08 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dbba:	68fb      	ldr	r3, [r7, #12]
   1dbbc:	68d8      	ldr	r0, [r3, #12]
   1dbbe:	68fb      	ldr	r3, [r7, #12]
   1dbc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1dbc2:	68bb      	ldr	r3, [r7, #8]
   1dbc4:	0019      	movs	r1, r3
   1dbc6:	4b16      	ldr	r3, [pc, #88]	; (1dc20 <prvCopyDataToQueue+0xdc>)
   1dbc8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1dbca:	68fb      	ldr	r3, [r7, #12]
   1dbcc:	68da      	ldr	r2, [r3, #12]
   1dbce:	68fb      	ldr	r3, [r7, #12]
   1dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dbd2:	425b      	negs	r3, r3
   1dbd4:	18d2      	adds	r2, r2, r3
   1dbd6:	68fb      	ldr	r3, [r7, #12]
   1dbd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1dbda:	68fb      	ldr	r3, [r7, #12]
   1dbdc:	68da      	ldr	r2, [r3, #12]
   1dbde:	68fb      	ldr	r3, [r7, #12]
   1dbe0:	681b      	ldr	r3, [r3, #0]
   1dbe2:	429a      	cmp	r2, r3
   1dbe4:	d207      	bcs.n	1dbf6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1dbe6:	68fb      	ldr	r3, [r7, #12]
   1dbe8:	685a      	ldr	r2, [r3, #4]
   1dbea:	68fb      	ldr	r3, [r7, #12]
   1dbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dbee:	425b      	negs	r3, r3
   1dbf0:	18d2      	adds	r2, r2, r3
   1dbf2:	68fb      	ldr	r3, [r7, #12]
   1dbf4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1dbf6:	687b      	ldr	r3, [r7, #4]
   1dbf8:	2b02      	cmp	r3, #2
   1dbfa:	d105      	bne.n	1dc08 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1dbfc:	693b      	ldr	r3, [r7, #16]
   1dbfe:	2b00      	cmp	r3, #0
   1dc00:	d002      	beq.n	1dc08 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1dc02:	693b      	ldr	r3, [r7, #16]
   1dc04:	3b01      	subs	r3, #1
   1dc06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1dc08:	693b      	ldr	r3, [r7, #16]
   1dc0a:	1c5a      	adds	r2, r3, #1
   1dc0c:	68fb      	ldr	r3, [r7, #12]
   1dc0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1dc10:	697b      	ldr	r3, [r7, #20]
}
   1dc12:	0018      	movs	r0, r3
   1dc14:	46bd      	mov	sp, r7
   1dc16:	b006      	add	sp, #24
   1dc18:	bd80      	pop	{r7, pc}
   1dc1a:	46c0      	nop			; (mov r8, r8)
   1dc1c:	0001f261 	.word	0x0001f261
   1dc20:	000377e9 	.word	0x000377e9

0001dc24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1dc24:	b580      	push	{r7, lr}
   1dc26:	b082      	sub	sp, #8
   1dc28:	af00      	add	r7, sp, #0
   1dc2a:	6078      	str	r0, [r7, #4]
   1dc2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1dc2e:	687b      	ldr	r3, [r7, #4]
   1dc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dc32:	2b00      	cmp	r3, #0
   1dc34:	d018      	beq.n	1dc68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1dc36:	687b      	ldr	r3, [r7, #4]
   1dc38:	68da      	ldr	r2, [r3, #12]
   1dc3a:	687b      	ldr	r3, [r7, #4]
   1dc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dc3e:	18d2      	adds	r2, r2, r3
   1dc40:	687b      	ldr	r3, [r7, #4]
   1dc42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1dc44:	687b      	ldr	r3, [r7, #4]
   1dc46:	68da      	ldr	r2, [r3, #12]
   1dc48:	687b      	ldr	r3, [r7, #4]
   1dc4a:	685b      	ldr	r3, [r3, #4]
   1dc4c:	429a      	cmp	r2, r3
   1dc4e:	d303      	bcc.n	1dc58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1dc50:	687b      	ldr	r3, [r7, #4]
   1dc52:	681a      	ldr	r2, [r3, #0]
   1dc54:	687b      	ldr	r3, [r7, #4]
   1dc56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1dc58:	687b      	ldr	r3, [r7, #4]
   1dc5a:	68d9      	ldr	r1, [r3, #12]
   1dc5c:	687b      	ldr	r3, [r7, #4]
   1dc5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1dc60:	683b      	ldr	r3, [r7, #0]
   1dc62:	0018      	movs	r0, r3
   1dc64:	4b02      	ldr	r3, [pc, #8]	; (1dc70 <prvCopyDataFromQueue+0x4c>)
   1dc66:	4798      	blx	r3
	}
}
   1dc68:	46c0      	nop			; (mov r8, r8)
   1dc6a:	46bd      	mov	sp, r7
   1dc6c:	b002      	add	sp, #8
   1dc6e:	bd80      	pop	{r7, pc}
   1dc70:	000377e9 	.word	0x000377e9

0001dc74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1dc74:	b580      	push	{r7, lr}
   1dc76:	b084      	sub	sp, #16
   1dc78:	af00      	add	r7, sp, #0
   1dc7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1dc7c:	4b34      	ldr	r3, [pc, #208]	; (1dd50 <prvUnlockQueue+0xdc>)
   1dc7e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1dc80:	230f      	movs	r3, #15
   1dc82:	18fb      	adds	r3, r7, r3
   1dc84:	687a      	ldr	r2, [r7, #4]
   1dc86:	2145      	movs	r1, #69	; 0x45
   1dc88:	5c52      	ldrb	r2, [r2, r1]
   1dc8a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dc8c:	e022      	b.n	1dcd4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1dc8e:	687b      	ldr	r3, [r7, #4]
   1dc90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dc92:	2b00      	cmp	r3, #0
   1dc94:	d009      	beq.n	1dcaa <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1dc96:	687b      	ldr	r3, [r7, #4]
   1dc98:	2100      	movs	r1, #0
   1dc9a:	0018      	movs	r0, r3
   1dc9c:	4b2d      	ldr	r3, [pc, #180]	; (1dd54 <prvUnlockQueue+0xe0>)
   1dc9e:	4798      	blx	r3
   1dca0:	1e03      	subs	r3, r0, #0
   1dca2:	d00f      	beq.n	1dcc4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1dca4:	4b2c      	ldr	r3, [pc, #176]	; (1dd58 <prvUnlockQueue+0xe4>)
   1dca6:	4798      	blx	r3
   1dca8:	e00c      	b.n	1dcc4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dcaa:	687b      	ldr	r3, [r7, #4]
   1dcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d017      	beq.n	1dce2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dcb2:	687b      	ldr	r3, [r7, #4]
   1dcb4:	3324      	adds	r3, #36	; 0x24
   1dcb6:	0018      	movs	r0, r3
   1dcb8:	4b28      	ldr	r3, [pc, #160]	; (1dd5c <prvUnlockQueue+0xe8>)
   1dcba:	4798      	blx	r3
   1dcbc:	1e03      	subs	r3, r0, #0
   1dcbe:	d001      	beq.n	1dcc4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1dcc0:	4b25      	ldr	r3, [pc, #148]	; (1dd58 <prvUnlockQueue+0xe4>)
   1dcc2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1dcc4:	230f      	movs	r3, #15
   1dcc6:	18fb      	adds	r3, r7, r3
   1dcc8:	781b      	ldrb	r3, [r3, #0]
   1dcca:	3b01      	subs	r3, #1
   1dccc:	b2da      	uxtb	r2, r3
   1dcce:	230f      	movs	r3, #15
   1dcd0:	18fb      	adds	r3, r7, r3
   1dcd2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dcd4:	230f      	movs	r3, #15
   1dcd6:	18fb      	adds	r3, r7, r3
   1dcd8:	781b      	ldrb	r3, [r3, #0]
   1dcda:	b25b      	sxtb	r3, r3
   1dcdc:	2b00      	cmp	r3, #0
   1dcde:	dcd6      	bgt.n	1dc8e <prvUnlockQueue+0x1a>
   1dce0:	e000      	b.n	1dce4 <prvUnlockQueue+0x70>
						break;
   1dce2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1dce4:	687b      	ldr	r3, [r7, #4]
   1dce6:	2245      	movs	r2, #69	; 0x45
   1dce8:	21ff      	movs	r1, #255	; 0xff
   1dcea:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1dcec:	4b1c      	ldr	r3, [pc, #112]	; (1dd60 <prvUnlockQueue+0xec>)
   1dcee:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1dcf0:	4b17      	ldr	r3, [pc, #92]	; (1dd50 <prvUnlockQueue+0xdc>)
   1dcf2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1dcf4:	230e      	movs	r3, #14
   1dcf6:	18fb      	adds	r3, r7, r3
   1dcf8:	687a      	ldr	r2, [r7, #4]
   1dcfa:	2144      	movs	r1, #68	; 0x44
   1dcfc:	5c52      	ldrb	r2, [r2, r1]
   1dcfe:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dd00:	e014      	b.n	1dd2c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dd02:	687b      	ldr	r3, [r7, #4]
   1dd04:	691b      	ldr	r3, [r3, #16]
   1dd06:	2b00      	cmp	r3, #0
   1dd08:	d017      	beq.n	1dd3a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dd0a:	687b      	ldr	r3, [r7, #4]
   1dd0c:	3310      	adds	r3, #16
   1dd0e:	0018      	movs	r0, r3
   1dd10:	4b12      	ldr	r3, [pc, #72]	; (1dd5c <prvUnlockQueue+0xe8>)
   1dd12:	4798      	blx	r3
   1dd14:	1e03      	subs	r3, r0, #0
   1dd16:	d001      	beq.n	1dd1c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1dd18:	4b0f      	ldr	r3, [pc, #60]	; (1dd58 <prvUnlockQueue+0xe4>)
   1dd1a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1dd1c:	230e      	movs	r3, #14
   1dd1e:	18fb      	adds	r3, r7, r3
   1dd20:	781b      	ldrb	r3, [r3, #0]
   1dd22:	3b01      	subs	r3, #1
   1dd24:	b2da      	uxtb	r2, r3
   1dd26:	230e      	movs	r3, #14
   1dd28:	18fb      	adds	r3, r7, r3
   1dd2a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dd2c:	230e      	movs	r3, #14
   1dd2e:	18fb      	adds	r3, r7, r3
   1dd30:	781b      	ldrb	r3, [r3, #0]
   1dd32:	b25b      	sxtb	r3, r3
   1dd34:	2b00      	cmp	r3, #0
   1dd36:	dce4      	bgt.n	1dd02 <prvUnlockQueue+0x8e>
   1dd38:	e000      	b.n	1dd3c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1dd3a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1dd3c:	687b      	ldr	r3, [r7, #4]
   1dd3e:	2244      	movs	r2, #68	; 0x44
   1dd40:	21ff      	movs	r1, #255	; 0xff
   1dd42:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1dd44:	4b06      	ldr	r3, [pc, #24]	; (1dd60 <prvUnlockQueue+0xec>)
   1dd46:	4798      	blx	r3
}
   1dd48:	46c0      	nop			; (mov r8, r8)
   1dd4a:	46bd      	mov	sp, r7
   1dd4c:	b004      	add	sp, #16
   1dd4e:	bd80      	pop	{r7, pc}
   1dd50:	0001c379 	.word	0x0001c379
   1dd54:	0001de49 	.word	0x0001de49
   1dd58:	0001ee1d 	.word	0x0001ee1d
   1dd5c:	0001ec09 	.word	0x0001ec09
   1dd60:	0001c39d 	.word	0x0001c39d

0001dd64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1dd64:	b580      	push	{r7, lr}
   1dd66:	b084      	sub	sp, #16
   1dd68:	af00      	add	r7, sp, #0
   1dd6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1dd6c:	4b08      	ldr	r3, [pc, #32]	; (1dd90 <prvIsQueueEmpty+0x2c>)
   1dd6e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1dd70:	687b      	ldr	r3, [r7, #4]
   1dd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dd74:	2b00      	cmp	r3, #0
   1dd76:	d102      	bne.n	1dd7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1dd78:	2301      	movs	r3, #1
   1dd7a:	60fb      	str	r3, [r7, #12]
   1dd7c:	e001      	b.n	1dd82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1dd7e:	2300      	movs	r3, #0
   1dd80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1dd82:	4b04      	ldr	r3, [pc, #16]	; (1dd94 <prvIsQueueEmpty+0x30>)
   1dd84:	4798      	blx	r3

	return xReturn;
   1dd86:	68fb      	ldr	r3, [r7, #12]
}
   1dd88:	0018      	movs	r0, r3
   1dd8a:	46bd      	mov	sp, r7
   1dd8c:	b004      	add	sp, #16
   1dd8e:	bd80      	pop	{r7, pc}
   1dd90:	0001c379 	.word	0x0001c379
   1dd94:	0001c39d 	.word	0x0001c39d

0001dd98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1dd98:	b580      	push	{r7, lr}
   1dd9a:	b084      	sub	sp, #16
   1dd9c:	af00      	add	r7, sp, #0
   1dd9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1dda0:	4b09      	ldr	r3, [pc, #36]	; (1ddc8 <prvIsQueueFull+0x30>)
   1dda2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1dda4:	687b      	ldr	r3, [r7, #4]
   1dda6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1dda8:	687b      	ldr	r3, [r7, #4]
   1ddaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ddac:	429a      	cmp	r2, r3
   1ddae:	d102      	bne.n	1ddb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1ddb0:	2301      	movs	r3, #1
   1ddb2:	60fb      	str	r3, [r7, #12]
   1ddb4:	e001      	b.n	1ddba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1ddb6:	2300      	movs	r3, #0
   1ddb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ddba:	4b04      	ldr	r3, [pc, #16]	; (1ddcc <prvIsQueueFull+0x34>)
   1ddbc:	4798      	blx	r3

	return xReturn;
   1ddbe:	68fb      	ldr	r3, [r7, #12]
}
   1ddc0:	0018      	movs	r0, r3
   1ddc2:	46bd      	mov	sp, r7
   1ddc4:	b004      	add	sp, #16
   1ddc6:	bd80      	pop	{r7, pc}
   1ddc8:	0001c379 	.word	0x0001c379
   1ddcc:	0001c39d 	.word	0x0001c39d

0001ddd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ddd0:	b580      	push	{r7, lr}
   1ddd2:	b086      	sub	sp, #24
   1ddd4:	af00      	add	r7, sp, #0
   1ddd6:	60f8      	str	r0, [r7, #12]
   1ddd8:	60b9      	str	r1, [r7, #8]
   1ddda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1dddc:	68fb      	ldr	r3, [r7, #12]
   1ddde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1dde0:	4b15      	ldr	r3, [pc, #84]	; (1de38 <vQueueWaitForMessageRestricted+0x68>)
   1dde2:	4798      	blx	r3
   1dde4:	697b      	ldr	r3, [r7, #20]
   1dde6:	2244      	movs	r2, #68	; 0x44
   1dde8:	5c9b      	ldrb	r3, [r3, r2]
   1ddea:	b25b      	sxtb	r3, r3
   1ddec:	3301      	adds	r3, #1
   1ddee:	d103      	bne.n	1ddf8 <vQueueWaitForMessageRestricted+0x28>
   1ddf0:	697b      	ldr	r3, [r7, #20]
   1ddf2:	2244      	movs	r2, #68	; 0x44
   1ddf4:	2100      	movs	r1, #0
   1ddf6:	5499      	strb	r1, [r3, r2]
   1ddf8:	697b      	ldr	r3, [r7, #20]
   1ddfa:	2245      	movs	r2, #69	; 0x45
   1ddfc:	5c9b      	ldrb	r3, [r3, r2]
   1ddfe:	b25b      	sxtb	r3, r3
   1de00:	3301      	adds	r3, #1
   1de02:	d103      	bne.n	1de0c <vQueueWaitForMessageRestricted+0x3c>
   1de04:	697b      	ldr	r3, [r7, #20]
   1de06:	2245      	movs	r2, #69	; 0x45
   1de08:	2100      	movs	r1, #0
   1de0a:	5499      	strb	r1, [r3, r2]
   1de0c:	4b0b      	ldr	r3, [pc, #44]	; (1de3c <vQueueWaitForMessageRestricted+0x6c>)
   1de0e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1de10:	697b      	ldr	r3, [r7, #20]
   1de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1de14:	2b00      	cmp	r3, #0
   1de16:	d106      	bne.n	1de26 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1de18:	697b      	ldr	r3, [r7, #20]
   1de1a:	3324      	adds	r3, #36	; 0x24
   1de1c:	687a      	ldr	r2, [r7, #4]
   1de1e:	68b9      	ldr	r1, [r7, #8]
   1de20:	0018      	movs	r0, r3
   1de22:	4b07      	ldr	r3, [pc, #28]	; (1de40 <vQueueWaitForMessageRestricted+0x70>)
   1de24:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1de26:	697b      	ldr	r3, [r7, #20]
   1de28:	0018      	movs	r0, r3
   1de2a:	4b06      	ldr	r3, [pc, #24]	; (1de44 <vQueueWaitForMessageRestricted+0x74>)
   1de2c:	4798      	blx	r3
	}
   1de2e:	46c0      	nop			; (mov r8, r8)
   1de30:	46bd      	mov	sp, r7
   1de32:	b006      	add	sp, #24
   1de34:	bd80      	pop	{r7, pc}
   1de36:	46c0      	nop			; (mov r8, r8)
   1de38:	0001c379 	.word	0x0001c379
   1de3c:	0001c39d 	.word	0x0001c39d
   1de40:	0001eb29 	.word	0x0001eb29
   1de44:	0001dc75 	.word	0x0001dc75

0001de48 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1de48:	b5b0      	push	{r4, r5, r7, lr}
   1de4a:	b086      	sub	sp, #24
   1de4c:	af00      	add	r7, sp, #0
   1de4e:	6078      	str	r0, [r7, #4]
   1de50:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1de52:	687b      	ldr	r3, [r7, #4]
   1de54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1de56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1de58:	2300      	movs	r3, #0
   1de5a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1de5c:	693b      	ldr	r3, [r7, #16]
   1de5e:	2b00      	cmp	r3, #0
   1de60:	d101      	bne.n	1de66 <prvNotifyQueueSetContainer+0x1e>
   1de62:	b672      	cpsid	i
   1de64:	e7fe      	b.n	1de64 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1de66:	693b      	ldr	r3, [r7, #16]
   1de68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1de6a:	693b      	ldr	r3, [r7, #16]
   1de6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1de6e:	429a      	cmp	r2, r3
   1de70:	d301      	bcc.n	1de76 <prvNotifyQueueSetContainer+0x2e>
   1de72:	b672      	cpsid	i
   1de74:	e7fe      	b.n	1de74 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1de76:	693b      	ldr	r3, [r7, #16]
   1de78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1de7a:	693b      	ldr	r3, [r7, #16]
   1de7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1de7e:	429a      	cmp	r2, r3
   1de80:	d300      	bcc.n	1de84 <prvNotifyQueueSetContainer+0x3c>
   1de82:	e08b      	b.n	1df9c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1de84:	230f      	movs	r3, #15
   1de86:	18fb      	adds	r3, r7, r3
   1de88:	693a      	ldr	r2, [r7, #16]
   1de8a:	2145      	movs	r1, #69	; 0x45
   1de8c:	5c52      	ldrb	r2, [r2, r1]
   1de8e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1de90:	4b45      	ldr	r3, [pc, #276]	; (1dfa8 <prvNotifyQueueSetContainer+0x160>)
   1de92:	4798      	blx	r3
   1de94:	0003      	movs	r3, r0
   1de96:	0018      	movs	r0, r3
   1de98:	4b44      	ldr	r3, [pc, #272]	; (1dfac <prvNotifyQueueSetContainer+0x164>)
   1de9a:	4798      	blx	r3
   1de9c:	0003      	movs	r3, r0
   1de9e:	001a      	movs	r2, r3
   1dea0:	4b43      	ldr	r3, [pc, #268]	; (1dfb0 <prvNotifyQueueSetContainer+0x168>)
   1dea2:	881b      	ldrh	r3, [r3, #0]
   1dea4:	4013      	ands	r3, r2
   1dea6:	b29b      	uxth	r3, r3
   1dea8:	2b00      	cmp	r3, #0
   1deaa:	d02e      	beq.n	1df0a <prvNotifyQueueSetContainer+0xc2>
   1deac:	693b      	ldr	r3, [r7, #16]
   1deae:	0018      	movs	r0, r3
   1deb0:	4b40      	ldr	r3, [pc, #256]	; (1dfb4 <prvNotifyQueueSetContainer+0x16c>)
   1deb2:	4798      	blx	r3
   1deb4:	0003      	movs	r3, r0
   1deb6:	001a      	movs	r2, r3
   1deb8:	4b3d      	ldr	r3, [pc, #244]	; (1dfb0 <prvNotifyQueueSetContainer+0x168>)
   1deba:	881b      	ldrh	r3, [r3, #0]
   1debc:	4013      	ands	r3, r2
   1debe:	b29b      	uxth	r3, r3
   1dec0:	2b00      	cmp	r3, #0
   1dec2:	d022      	beq.n	1df0a <prvNotifyQueueSetContainer+0xc2>
   1dec4:	683b      	ldr	r3, [r7, #0]
   1dec6:	2b00      	cmp	r3, #0
   1dec8:	d10b      	bne.n	1dee2 <prvNotifyQueueSetContainer+0x9a>
   1deca:	693b      	ldr	r3, [r7, #16]
   1decc:	0018      	movs	r0, r3
   1dece:	4b3a      	ldr	r3, [pc, #232]	; (1dfb8 <prvNotifyQueueSetContainer+0x170>)
   1ded0:	4798      	blx	r3
   1ded2:	0003      	movs	r3, r0
   1ded4:	001a      	movs	r2, r3
   1ded6:	4b39      	ldr	r3, [pc, #228]	; (1dfbc <prvNotifyQueueSetContainer+0x174>)
   1ded8:	5c9b      	ldrb	r3, [r3, r2]
   1deda:	3320      	adds	r3, #32
   1dedc:	b2db      	uxtb	r3, r3
   1dede:	001d      	movs	r5, r3
   1dee0:	e000      	b.n	1dee4 <prvNotifyQueueSetContainer+0x9c>
   1dee2:	2525      	movs	r5, #37	; 0x25
   1dee4:	693b      	ldr	r3, [r7, #16]
   1dee6:	0018      	movs	r0, r3
   1dee8:	4b33      	ldr	r3, [pc, #204]	; (1dfb8 <prvNotifyQueueSetContainer+0x170>)
   1deea:	4798      	blx	r3
   1deec:	0003      	movs	r3, r0
   1deee:	001a      	movs	r2, r3
   1def0:	4b32      	ldr	r3, [pc, #200]	; (1dfbc <prvNotifyQueueSetContainer+0x174>)
   1def2:	5c9c      	ldrb	r4, [r3, r2]
   1def4:	693b      	ldr	r3, [r7, #16]
   1def6:	0018      	movs	r0, r3
   1def8:	4b31      	ldr	r3, [pc, #196]	; (1dfc0 <prvNotifyQueueSetContainer+0x178>)
   1defa:	4798      	blx	r3
   1defc:	0003      	movs	r3, r0
   1defe:	b2db      	uxtb	r3, r3
   1df00:	001a      	movs	r2, r3
   1df02:	0021      	movs	r1, r4
   1df04:	0028      	movs	r0, r5
   1df06:	4b2f      	ldr	r3, [pc, #188]	; (1dfc4 <prvNotifyQueueSetContainer+0x17c>)
   1df08:	4798      	blx	r3
   1df0a:	693b      	ldr	r3, [r7, #16]
   1df0c:	0018      	movs	r0, r3
   1df0e:	4b2a      	ldr	r3, [pc, #168]	; (1dfb8 <prvNotifyQueueSetContainer+0x170>)
   1df10:	4798      	blx	r3
   1df12:	0003      	movs	r3, r0
   1df14:	001a      	movs	r2, r3
   1df16:	4b29      	ldr	r3, [pc, #164]	; (1dfbc <prvNotifyQueueSetContainer+0x174>)
   1df18:	5c9c      	ldrb	r4, [r3, r2]
   1df1a:	693b      	ldr	r3, [r7, #16]
   1df1c:	0018      	movs	r0, r3
   1df1e:	4b28      	ldr	r3, [pc, #160]	; (1dfc0 <prvNotifyQueueSetContainer+0x178>)
   1df20:	4798      	blx	r3
   1df22:	0003      	movs	r3, r0
   1df24:	b2dd      	uxtb	r5, r3
   1df26:	693b      	ldr	r3, [r7, #16]
   1df28:	0018      	movs	r0, r3
   1df2a:	4b23      	ldr	r3, [pc, #140]	; (1dfb8 <prvNotifyQueueSetContainer+0x170>)
   1df2c:	4798      	blx	r3
   1df2e:	0003      	movs	r3, r0
   1df30:	001a      	movs	r2, r3
   1df32:	4b22      	ldr	r3, [pc, #136]	; (1dfbc <prvNotifyQueueSetContainer+0x174>)
   1df34:	5c9b      	ldrb	r3, [r3, r2]
   1df36:	2b02      	cmp	r3, #2
   1df38:	d005      	beq.n	1df46 <prvNotifyQueueSetContainer+0xfe>
   1df3a:	693b      	ldr	r3, [r7, #16]
   1df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1df3e:	b2db      	uxtb	r3, r3
   1df40:	3301      	adds	r3, #1
   1df42:	b2db      	uxtb	r3, r3
   1df44:	e000      	b.n	1df48 <prvNotifyQueueSetContainer+0x100>
   1df46:	2300      	movs	r3, #0
   1df48:	001a      	movs	r2, r3
   1df4a:	0029      	movs	r1, r5
   1df4c:	0020      	movs	r0, r4
   1df4e:	4b1e      	ldr	r3, [pc, #120]	; (1dfc8 <prvNotifyQueueSetContainer+0x180>)
   1df50:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1df52:	683a      	ldr	r2, [r7, #0]
   1df54:	1d39      	adds	r1, r7, #4
   1df56:	693b      	ldr	r3, [r7, #16]
   1df58:	0018      	movs	r0, r3
   1df5a:	4b1c      	ldr	r3, [pc, #112]	; (1dfcc <prvNotifyQueueSetContainer+0x184>)
   1df5c:	4798      	blx	r3
   1df5e:	0003      	movs	r3, r0
   1df60:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1df62:	230f      	movs	r3, #15
   1df64:	18fb      	adds	r3, r7, r3
   1df66:	781b      	ldrb	r3, [r3, #0]
   1df68:	b25b      	sxtb	r3, r3
   1df6a:	3301      	adds	r3, #1
   1df6c:	d10d      	bne.n	1df8a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1df6e:	693b      	ldr	r3, [r7, #16]
   1df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1df72:	2b00      	cmp	r3, #0
   1df74:	d012      	beq.n	1df9c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1df76:	693b      	ldr	r3, [r7, #16]
   1df78:	3324      	adds	r3, #36	; 0x24
   1df7a:	0018      	movs	r0, r3
   1df7c:	4b14      	ldr	r3, [pc, #80]	; (1dfd0 <prvNotifyQueueSetContainer+0x188>)
   1df7e:	4798      	blx	r3
   1df80:	1e03      	subs	r3, r0, #0
   1df82:	d00b      	beq.n	1df9c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1df84:	2301      	movs	r3, #1
   1df86:	617b      	str	r3, [r7, #20]
   1df88:	e008      	b.n	1df9c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1df8a:	230f      	movs	r3, #15
   1df8c:	18fb      	adds	r3, r7, r3
   1df8e:	781b      	ldrb	r3, [r3, #0]
   1df90:	3301      	adds	r3, #1
   1df92:	b2db      	uxtb	r3, r3
   1df94:	b259      	sxtb	r1, r3
   1df96:	693b      	ldr	r3, [r7, #16]
   1df98:	2245      	movs	r2, #69	; 0x45
   1df9a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1df9c:	697b      	ldr	r3, [r7, #20]
	}
   1df9e:	0018      	movs	r0, r3
   1dfa0:	46bd      	mov	sp, r7
   1dfa2:	b006      	add	sp, #24
   1dfa4:	bdb0      	pop	{r4, r5, r7, pc}
   1dfa6:	46c0      	nop			; (mov r8, r8)
   1dfa8:	0001a615 	.word	0x0001a615
   1dfac:	0001a379 	.word	0x0001a379
   1dfb0:	2000010c 	.word	0x2000010c
   1dfb4:	0001a439 	.word	0x0001a439
   1dfb8:	0001a339 	.word	0x0001a339
   1dfbc:	20000100 	.word	0x20000100
   1dfc0:	0001a419 	.word	0x0001a419
   1dfc4:	0001ad71 	.word	0x0001ad71
   1dfc8:	0001b3cd 	.word	0x0001b3cd
   1dfcc:	0001db45 	.word	0x0001db45
   1dfd0:	0001ec09 	.word	0x0001ec09

0001dfd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1dfd4:	b590      	push	{r4, r7, lr}
   1dfd6:	b08d      	sub	sp, #52	; 0x34
   1dfd8:	af04      	add	r7, sp, #16
   1dfda:	60f8      	str	r0, [r7, #12]
   1dfdc:	60b9      	str	r1, [r7, #8]
   1dfde:	603b      	str	r3, [r7, #0]
   1dfe0:	1dbb      	adds	r3, r7, #6
   1dfe2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dfe4:	1dbb      	adds	r3, r7, #6
   1dfe6:	881b      	ldrh	r3, [r3, #0]
   1dfe8:	009b      	lsls	r3, r3, #2
   1dfea:	0018      	movs	r0, r3
   1dfec:	4b1d      	ldr	r3, [pc, #116]	; (1e064 <xTaskCreate+0x90>)
   1dfee:	4798      	blx	r3
   1dff0:	0003      	movs	r3, r0
   1dff2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1dff4:	697b      	ldr	r3, [r7, #20]
   1dff6:	2b00      	cmp	r3, #0
   1dff8:	d010      	beq.n	1e01c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1dffa:	2054      	movs	r0, #84	; 0x54
   1dffc:	4b19      	ldr	r3, [pc, #100]	; (1e064 <xTaskCreate+0x90>)
   1dffe:	4798      	blx	r3
   1e000:	0003      	movs	r3, r0
   1e002:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1e004:	69fb      	ldr	r3, [r7, #28]
   1e006:	2b00      	cmp	r3, #0
   1e008:	d003      	beq.n	1e012 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1e00a:	69fb      	ldr	r3, [r7, #28]
   1e00c:	697a      	ldr	r2, [r7, #20]
   1e00e:	631a      	str	r2, [r3, #48]	; 0x30
   1e010:	e006      	b.n	1e020 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1e012:	697b      	ldr	r3, [r7, #20]
   1e014:	0018      	movs	r0, r3
   1e016:	4b14      	ldr	r3, [pc, #80]	; (1e068 <xTaskCreate+0x94>)
   1e018:	4798      	blx	r3
   1e01a:	e001      	b.n	1e020 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1e01c:	2300      	movs	r3, #0
   1e01e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1e020:	69fb      	ldr	r3, [r7, #28]
   1e022:	2b00      	cmp	r3, #0
   1e024:	d016      	beq.n	1e054 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1e026:	1dbb      	adds	r3, r7, #6
   1e028:	881a      	ldrh	r2, [r3, #0]
   1e02a:	683c      	ldr	r4, [r7, #0]
   1e02c:	68b9      	ldr	r1, [r7, #8]
   1e02e:	68f8      	ldr	r0, [r7, #12]
   1e030:	2300      	movs	r3, #0
   1e032:	9303      	str	r3, [sp, #12]
   1e034:	69fb      	ldr	r3, [r7, #28]
   1e036:	9302      	str	r3, [sp, #8]
   1e038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e03a:	9301      	str	r3, [sp, #4]
   1e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e03e:	9300      	str	r3, [sp, #0]
   1e040:	0023      	movs	r3, r4
   1e042:	4c0a      	ldr	r4, [pc, #40]	; (1e06c <xTaskCreate+0x98>)
   1e044:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1e046:	69fb      	ldr	r3, [r7, #28]
   1e048:	0018      	movs	r0, r3
   1e04a:	4b09      	ldr	r3, [pc, #36]	; (1e070 <xTaskCreate+0x9c>)
   1e04c:	4798      	blx	r3
			xReturn = pdPASS;
   1e04e:	2301      	movs	r3, #1
   1e050:	61bb      	str	r3, [r7, #24]
   1e052:	e002      	b.n	1e05a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1e054:	2301      	movs	r3, #1
   1e056:	425b      	negs	r3, r3
   1e058:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1e05a:	69bb      	ldr	r3, [r7, #24]
	}
   1e05c:	0018      	movs	r0, r3
   1e05e:	46bd      	mov	sp, r7
   1e060:	b009      	add	sp, #36	; 0x24
   1e062:	bd90      	pop	{r4, r7, pc}
   1e064:	0001c4b1 	.word	0x0001c4b1
   1e068:	0001c575 	.word	0x0001c575
   1e06c:	0001e075 	.word	0x0001e075
   1e070:	0001e185 	.word	0x0001e185

0001e074 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1e074:	b580      	push	{r7, lr}
   1e076:	b086      	sub	sp, #24
   1e078:	af00      	add	r7, sp, #0
   1e07a:	60f8      	str	r0, [r7, #12]
   1e07c:	60b9      	str	r1, [r7, #8]
   1e07e:	607a      	str	r2, [r7, #4]
   1e080:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e084:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1e086:	687b      	ldr	r3, [r7, #4]
   1e088:	009b      	lsls	r3, r3, #2
   1e08a:	001a      	movs	r2, r3
   1e08c:	21a5      	movs	r1, #165	; 0xa5
   1e08e:	4b39      	ldr	r3, [pc, #228]	; (1e174 <prvInitialiseNewTask+0x100>)
   1e090:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1e092:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1e096:	687b      	ldr	r3, [r7, #4]
   1e098:	4937      	ldr	r1, [pc, #220]	; (1e178 <prvInitialiseNewTask+0x104>)
   1e09a:	468c      	mov	ip, r1
   1e09c:	4463      	add	r3, ip
   1e09e:	009b      	lsls	r3, r3, #2
   1e0a0:	18d3      	adds	r3, r2, r3
   1e0a2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1e0a4:	693b      	ldr	r3, [r7, #16]
   1e0a6:	2207      	movs	r2, #7
   1e0a8:	4393      	bics	r3, r2
   1e0aa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1e0ac:	693b      	ldr	r3, [r7, #16]
   1e0ae:	2207      	movs	r2, #7
   1e0b0:	4013      	ands	r3, r2
   1e0b2:	d001      	beq.n	1e0b8 <prvInitialiseNewTask+0x44>
   1e0b4:	b672      	cpsid	i
   1e0b6:	e7fe      	b.n	1e0b6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e0b8:	2300      	movs	r3, #0
   1e0ba:	617b      	str	r3, [r7, #20]
   1e0bc:	e013      	b.n	1e0e6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e0be:	68ba      	ldr	r2, [r7, #8]
   1e0c0:	697b      	ldr	r3, [r7, #20]
   1e0c2:	18d3      	adds	r3, r2, r3
   1e0c4:	7818      	ldrb	r0, [r3, #0]
   1e0c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e0c8:	2134      	movs	r1, #52	; 0x34
   1e0ca:	697b      	ldr	r3, [r7, #20]
   1e0cc:	18d3      	adds	r3, r2, r3
   1e0ce:	185b      	adds	r3, r3, r1
   1e0d0:	1c02      	adds	r2, r0, #0
   1e0d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1e0d4:	68ba      	ldr	r2, [r7, #8]
   1e0d6:	697b      	ldr	r3, [r7, #20]
   1e0d8:	18d3      	adds	r3, r2, r3
   1e0da:	781b      	ldrb	r3, [r3, #0]
   1e0dc:	2b00      	cmp	r3, #0
   1e0de:	d006      	beq.n	1e0ee <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e0e0:	697b      	ldr	r3, [r7, #20]
   1e0e2:	3301      	adds	r3, #1
   1e0e4:	617b      	str	r3, [r7, #20]
   1e0e6:	697b      	ldr	r3, [r7, #20]
   1e0e8:	2b07      	cmp	r3, #7
   1e0ea:	d9e8      	bls.n	1e0be <prvInitialiseNewTask+0x4a>
   1e0ec:	e000      	b.n	1e0f0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1e0ee:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e0f2:	223b      	movs	r2, #59	; 0x3b
   1e0f4:	2100      	movs	r1, #0
   1e0f6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1e0f8:	6a3b      	ldr	r3, [r7, #32]
   1e0fa:	2b04      	cmp	r3, #4
   1e0fc:	d901      	bls.n	1e102 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1e0fe:	2304      	movs	r3, #4
   1e100:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1e102:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e104:	6a3a      	ldr	r2, [r7, #32]
   1e106:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e10a:	6a3a      	ldr	r2, [r7, #32]
   1e10c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e110:	2200      	movs	r2, #0
   1e112:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e116:	3304      	adds	r3, #4
   1e118:	0018      	movs	r0, r3
   1e11a:	4b18      	ldr	r3, [pc, #96]	; (1e17c <prvInitialiseNewTask+0x108>)
   1e11c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e120:	3318      	adds	r3, #24
   1e122:	0018      	movs	r0, r3
   1e124:	4b15      	ldr	r3, [pc, #84]	; (1e17c <prvInitialiseNewTask+0x108>)
   1e126:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e12a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e12c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e12e:	6a3b      	ldr	r3, [r7, #32]
   1e130:	2205      	movs	r2, #5
   1e132:	1ad2      	subs	r2, r2, r3
   1e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e136:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e13a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e13c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e140:	2200      	movs	r2, #0
   1e142:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e146:	2250      	movs	r2, #80	; 0x50
   1e148:	2100      	movs	r1, #0
   1e14a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e14c:	683a      	ldr	r2, [r7, #0]
   1e14e:	68f9      	ldr	r1, [r7, #12]
   1e150:	693b      	ldr	r3, [r7, #16]
   1e152:	0018      	movs	r0, r3
   1e154:	4b0a      	ldr	r3, [pc, #40]	; (1e180 <prvInitialiseNewTask+0x10c>)
   1e156:	4798      	blx	r3
   1e158:	0002      	movs	r2, r0
   1e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e15c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e160:	2b00      	cmp	r3, #0
   1e162:	d002      	beq.n	1e16a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e166:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e16a:	46c0      	nop			; (mov r8, r8)
   1e16c:	46bd      	mov	sp, r7
   1e16e:	b006      	add	sp, #24
   1e170:	bd80      	pop	{r7, pc}
   1e172:	46c0      	nop			; (mov r8, r8)
   1e174:	0003781f 	.word	0x0003781f
   1e178:	3fffffff 	.word	0x3fffffff
   1e17c:	0001c12d 	.word	0x0001c12d
   1e180:	0001c245 	.word	0x0001c245

0001e184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1e184:	b580      	push	{r7, lr}
   1e186:	b082      	sub	sp, #8
   1e188:	af00      	add	r7, sp, #0
   1e18a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1e18c:	4b60      	ldr	r3, [pc, #384]	; (1e310 <prvAddNewTaskToReadyList+0x18c>)
   1e18e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1e190:	4b60      	ldr	r3, [pc, #384]	; (1e314 <prvAddNewTaskToReadyList+0x190>)
   1e192:	681b      	ldr	r3, [r3, #0]
   1e194:	1c5a      	adds	r2, r3, #1
   1e196:	4b5f      	ldr	r3, [pc, #380]	; (1e314 <prvAddNewTaskToReadyList+0x190>)
   1e198:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1e19a:	4b5f      	ldr	r3, [pc, #380]	; (1e318 <prvAddNewTaskToReadyList+0x194>)
   1e19c:	681b      	ldr	r3, [r3, #0]
   1e19e:	2b00      	cmp	r3, #0
   1e1a0:	d109      	bne.n	1e1b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1e1a2:	4b5d      	ldr	r3, [pc, #372]	; (1e318 <prvAddNewTaskToReadyList+0x194>)
   1e1a4:	687a      	ldr	r2, [r7, #4]
   1e1a6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1e1a8:	4b5a      	ldr	r3, [pc, #360]	; (1e314 <prvAddNewTaskToReadyList+0x190>)
   1e1aa:	681b      	ldr	r3, [r3, #0]
   1e1ac:	2b01      	cmp	r3, #1
   1e1ae:	d110      	bne.n	1e1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1e1b0:	4b5a      	ldr	r3, [pc, #360]	; (1e31c <prvAddNewTaskToReadyList+0x198>)
   1e1b2:	4798      	blx	r3
   1e1b4:	e00d      	b.n	1e1d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1e1b6:	4b5a      	ldr	r3, [pc, #360]	; (1e320 <prvAddNewTaskToReadyList+0x19c>)
   1e1b8:	681b      	ldr	r3, [r3, #0]
   1e1ba:	2b00      	cmp	r3, #0
   1e1bc:	d109      	bne.n	1e1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1e1be:	4b56      	ldr	r3, [pc, #344]	; (1e318 <prvAddNewTaskToReadyList+0x194>)
   1e1c0:	681b      	ldr	r3, [r3, #0]
   1e1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e1c4:	687b      	ldr	r3, [r7, #4]
   1e1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e1c8:	429a      	cmp	r2, r3
   1e1ca:	d802      	bhi.n	1e1d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1e1cc:	4b52      	ldr	r3, [pc, #328]	; (1e318 <prvAddNewTaskToReadyList+0x194>)
   1e1ce:	687a      	ldr	r2, [r7, #4]
   1e1d0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1e1d2:	4b54      	ldr	r3, [pc, #336]	; (1e324 <prvAddNewTaskToReadyList+0x1a0>)
   1e1d4:	681b      	ldr	r3, [r3, #0]
   1e1d6:	1c5a      	adds	r2, r3, #1
   1e1d8:	4b52      	ldr	r3, [pc, #328]	; (1e324 <prvAddNewTaskToReadyList+0x1a0>)
   1e1da:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1e1dc:	4b51      	ldr	r3, [pc, #324]	; (1e324 <prvAddNewTaskToReadyList+0x1a0>)
   1e1de:	681a      	ldr	r2, [r3, #0]
   1e1e0:	687b      	ldr	r3, [r7, #4]
   1e1e2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1e1e4:	687b      	ldr	r3, [r7, #4]
   1e1e6:	2b00      	cmp	r3, #0
   1e1e8:	d052      	beq.n	1e290 <prvAddNewTaskToReadyList+0x10c>
   1e1ea:	2003      	movs	r0, #3
   1e1ec:	4b4e      	ldr	r3, [pc, #312]	; (1e328 <prvAddNewTaskToReadyList+0x1a4>)
   1e1ee:	4798      	blx	r3
   1e1f0:	0003      	movs	r3, r0
   1e1f2:	b29a      	uxth	r2, r3
   1e1f4:	687b      	ldr	r3, [r7, #4]
   1e1f6:	0011      	movs	r1, r2
   1e1f8:	0018      	movs	r0, r3
   1e1fa:	4b4c      	ldr	r3, [pc, #304]	; (1e32c <prvAddNewTaskToReadyList+0x1a8>)
   1e1fc:	4798      	blx	r3
   1e1fe:	4b4c      	ldr	r3, [pc, #304]	; (1e330 <prvAddNewTaskToReadyList+0x1ac>)
   1e200:	881a      	ldrh	r2, [r3, #0]
   1e202:	687b      	ldr	r3, [r7, #4]
   1e204:	0011      	movs	r1, r2
   1e206:	0018      	movs	r0, r3
   1e208:	4b4a      	ldr	r3, [pc, #296]	; (1e334 <prvAddNewTaskToReadyList+0x1b0>)
   1e20a:	4798      	blx	r3
   1e20c:	687b      	ldr	r3, [r7, #4]
   1e20e:	0018      	movs	r0, r3
   1e210:	4b49      	ldr	r3, [pc, #292]	; (1e338 <prvAddNewTaskToReadyList+0x1b4>)
   1e212:	4798      	blx	r3
   1e214:	0003      	movs	r3, r0
   1e216:	b2d9      	uxtb	r1, r3
   1e218:	687b      	ldr	r3, [r7, #4]
   1e21a:	3334      	adds	r3, #52	; 0x34
   1e21c:	001a      	movs	r2, r3
   1e21e:	2003      	movs	r0, #3
   1e220:	4b46      	ldr	r3, [pc, #280]	; (1e33c <prvAddNewTaskToReadyList+0x1b8>)
   1e222:	4798      	blx	r3
   1e224:	687b      	ldr	r3, [r7, #4]
   1e226:	0018      	movs	r0, r3
   1e228:	4b43      	ldr	r3, [pc, #268]	; (1e338 <prvAddNewTaskToReadyList+0x1b4>)
   1e22a:	4798      	blx	r3
   1e22c:	0003      	movs	r3, r0
   1e22e:	b2d9      	uxtb	r1, r3
   1e230:	687b      	ldr	r3, [r7, #4]
   1e232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e234:	b2db      	uxtb	r3, r3
   1e236:	001a      	movs	r2, r3
   1e238:	2003      	movs	r0, #3
   1e23a:	4b41      	ldr	r3, [pc, #260]	; (1e340 <prvAddNewTaskToReadyList+0x1bc>)
   1e23c:	4798      	blx	r3
   1e23e:	4b41      	ldr	r3, [pc, #260]	; (1e344 <prvAddNewTaskToReadyList+0x1c0>)
   1e240:	4798      	blx	r3
   1e242:	0003      	movs	r3, r0
   1e244:	0018      	movs	r0, r3
   1e246:	4b40      	ldr	r3, [pc, #256]	; (1e348 <prvAddNewTaskToReadyList+0x1c4>)
   1e248:	4798      	blx	r3
   1e24a:	0003      	movs	r3, r0
   1e24c:	001a      	movs	r2, r3
   1e24e:	4b3f      	ldr	r3, [pc, #252]	; (1e34c <prvAddNewTaskToReadyList+0x1c8>)
   1e250:	881b      	ldrh	r3, [r3, #0]
   1e252:	4013      	ands	r3, r2
   1e254:	b29b      	uxth	r3, r3
   1e256:	2b00      	cmp	r3, #0
   1e258:	d016      	beq.n	1e288 <prvAddNewTaskToReadyList+0x104>
   1e25a:	687b      	ldr	r3, [r7, #4]
   1e25c:	0018      	movs	r0, r3
   1e25e:	4b3a      	ldr	r3, [pc, #232]	; (1e348 <prvAddNewTaskToReadyList+0x1c4>)
   1e260:	4798      	blx	r3
   1e262:	0003      	movs	r3, r0
   1e264:	001a      	movs	r2, r3
   1e266:	4b39      	ldr	r3, [pc, #228]	; (1e34c <prvAddNewTaskToReadyList+0x1c8>)
   1e268:	881b      	ldrh	r3, [r3, #0]
   1e26a:	4013      	ands	r3, r2
   1e26c:	b29b      	uxth	r3, r3
   1e26e:	2b00      	cmp	r3, #0
   1e270:	d00a      	beq.n	1e288 <prvAddNewTaskToReadyList+0x104>
   1e272:	687b      	ldr	r3, [r7, #4]
   1e274:	0018      	movs	r0, r3
   1e276:	4b30      	ldr	r3, [pc, #192]	; (1e338 <prvAddNewTaskToReadyList+0x1b4>)
   1e278:	4798      	blx	r3
   1e27a:	0003      	movs	r3, r0
   1e27c:	b2db      	uxtb	r3, r3
   1e27e:	001a      	movs	r2, r3
   1e280:	2103      	movs	r1, #3
   1e282:	201b      	movs	r0, #27
   1e284:	4b32      	ldr	r3, [pc, #200]	; (1e350 <prvAddNewTaskToReadyList+0x1cc>)
   1e286:	4798      	blx	r3
   1e288:	687b      	ldr	r3, [r7, #4]
   1e28a:	0018      	movs	r0, r3
   1e28c:	4b31      	ldr	r3, [pc, #196]	; (1e354 <prvAddNewTaskToReadyList+0x1d0>)
   1e28e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1e290:	687b      	ldr	r3, [r7, #4]
   1e292:	0018      	movs	r0, r3
   1e294:	4b2c      	ldr	r3, [pc, #176]	; (1e348 <prvAddNewTaskToReadyList+0x1c4>)
   1e296:	4798      	blx	r3
   1e298:	0003      	movs	r3, r0
   1e29a:	001a      	movs	r2, r3
   1e29c:	4b2b      	ldr	r3, [pc, #172]	; (1e34c <prvAddNewTaskToReadyList+0x1c8>)
   1e29e:	881b      	ldrh	r3, [r3, #0]
   1e2a0:	4013      	ands	r3, r2
   1e2a2:	b29b      	uxth	r3, r3
   1e2a4:	2b00      	cmp	r3, #0
   1e2a6:	d008      	beq.n	1e2ba <prvAddNewTaskToReadyList+0x136>
   1e2a8:	687b      	ldr	r3, [r7, #4]
   1e2aa:	0018      	movs	r0, r3
   1e2ac:	4b22      	ldr	r3, [pc, #136]	; (1e338 <prvAddNewTaskToReadyList+0x1b4>)
   1e2ae:	4798      	blx	r3
   1e2b0:	0003      	movs	r3, r0
   1e2b2:	b2db      	uxtb	r3, r3
   1e2b4:	0018      	movs	r0, r3
   1e2b6:	4b28      	ldr	r3, [pc, #160]	; (1e358 <prvAddNewTaskToReadyList+0x1d4>)
   1e2b8:	4798      	blx	r3
   1e2ba:	687b      	ldr	r3, [r7, #4]
   1e2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e2be:	4b27      	ldr	r3, [pc, #156]	; (1e35c <prvAddNewTaskToReadyList+0x1d8>)
   1e2c0:	681b      	ldr	r3, [r3, #0]
   1e2c2:	429a      	cmp	r2, r3
   1e2c4:	d903      	bls.n	1e2ce <prvAddNewTaskToReadyList+0x14a>
   1e2c6:	687b      	ldr	r3, [r7, #4]
   1e2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e2ca:	4b24      	ldr	r3, [pc, #144]	; (1e35c <prvAddNewTaskToReadyList+0x1d8>)
   1e2cc:	601a      	str	r2, [r3, #0]
   1e2ce:	687b      	ldr	r3, [r7, #4]
   1e2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e2d2:	0013      	movs	r3, r2
   1e2d4:	009b      	lsls	r3, r3, #2
   1e2d6:	189b      	adds	r3, r3, r2
   1e2d8:	009b      	lsls	r3, r3, #2
   1e2da:	4a21      	ldr	r2, [pc, #132]	; (1e360 <prvAddNewTaskToReadyList+0x1dc>)
   1e2dc:	189a      	adds	r2, r3, r2
   1e2de:	687b      	ldr	r3, [r7, #4]
   1e2e0:	3304      	adds	r3, #4
   1e2e2:	0019      	movs	r1, r3
   1e2e4:	0010      	movs	r0, r2
   1e2e6:	4b1f      	ldr	r3, [pc, #124]	; (1e364 <prvAddNewTaskToReadyList+0x1e0>)
   1e2e8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1e2ea:	4b1f      	ldr	r3, [pc, #124]	; (1e368 <prvAddNewTaskToReadyList+0x1e4>)
   1e2ec:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1e2ee:	4b0c      	ldr	r3, [pc, #48]	; (1e320 <prvAddNewTaskToReadyList+0x19c>)
   1e2f0:	681b      	ldr	r3, [r3, #0]
   1e2f2:	2b00      	cmp	r3, #0
   1e2f4:	d008      	beq.n	1e308 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1e2f6:	4b08      	ldr	r3, [pc, #32]	; (1e318 <prvAddNewTaskToReadyList+0x194>)
   1e2f8:	681b      	ldr	r3, [r3, #0]
   1e2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e2fc:	687b      	ldr	r3, [r7, #4]
   1e2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e300:	429a      	cmp	r2, r3
   1e302:	d201      	bcs.n	1e308 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1e304:	4b19      	ldr	r3, [pc, #100]	; (1e36c <prvAddNewTaskToReadyList+0x1e8>)
   1e306:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e308:	46c0      	nop			; (mov r8, r8)
   1e30a:	46bd      	mov	sp, r7
   1e30c:	b002      	add	sp, #8
   1e30e:	bd80      	pop	{r7, pc}
   1e310:	0001c379 	.word	0x0001c379
   1e314:	20004044 	.word	0x20004044
   1e318:	20003f6c 	.word	0x20003f6c
   1e31c:	0001eea5 	.word	0x0001eea5
   1e320:	20004050 	.word	0x20004050
   1e324:	20004060 	.word	0x20004060
   1e328:	0001b8f9 	.word	0x0001b8f9
   1e32c:	0001a39d 	.word	0x0001a39d
   1e330:	2000010e 	.word	0x2000010e
   1e334:	0001a3d9 	.word	0x0001a3d9
   1e338:	0001a359 	.word	0x0001a359
   1e33c:	0001bb29 	.word	0x0001bb29
   1e340:	0001b28d 	.word	0x0001b28d
   1e344:	0001a615 	.word	0x0001a615
   1e348:	0001a379 	.word	0x0001a379
   1e34c:	2000010c 	.word	0x2000010c
   1e350:	0001ad71 	.word	0x0001ad71
   1e354:	0001a4d9 	.word	0x0001a4d9
   1e358:	0001ab29 	.word	0x0001ab29
   1e35c:	2000404c 	.word	0x2000404c
   1e360:	20003f70 	.word	0x20003f70
   1e364:	0001c143 	.word	0x0001c143
   1e368:	0001c39d 	.word	0x0001c39d
   1e36c:	0001c361 	.word	0x0001c361

0001e370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1e370:	b580      	push	{r7, lr}
   1e372:	b084      	sub	sp, #16
   1e374:	af00      	add	r7, sp, #0
   1e376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1e378:	2300      	movs	r3, #0
   1e37a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1e37c:	687b      	ldr	r3, [r7, #4]
   1e37e:	2b00      	cmp	r3, #0
   1e380:	d045      	beq.n	1e40e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1e382:	4b27      	ldr	r3, [pc, #156]	; (1e420 <vTaskDelay+0xb0>)
   1e384:	681b      	ldr	r3, [r3, #0]
   1e386:	2b00      	cmp	r3, #0
   1e388:	d001      	beq.n	1e38e <vTaskDelay+0x1e>
   1e38a:	b672      	cpsid	i
   1e38c:	e7fe      	b.n	1e38c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1e38e:	4b25      	ldr	r3, [pc, #148]	; (1e424 <vTaskDelay+0xb4>)
   1e390:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1e392:	4b25      	ldr	r3, [pc, #148]	; (1e428 <vTaskDelay+0xb8>)
   1e394:	681b      	ldr	r3, [r3, #0]
   1e396:	0018      	movs	r0, r3
   1e398:	4b24      	ldr	r3, [pc, #144]	; (1e42c <vTaskDelay+0xbc>)
   1e39a:	4798      	blx	r3
   1e39c:	0003      	movs	r3, r0
   1e39e:	001a      	movs	r2, r3
   1e3a0:	4b23      	ldr	r3, [pc, #140]	; (1e430 <vTaskDelay+0xc0>)
   1e3a2:	881b      	ldrh	r3, [r3, #0]
   1e3a4:	4013      	ands	r3, r2
   1e3a6:	b29b      	uxth	r3, r3
   1e3a8:	2b00      	cmp	r3, #0
   1e3aa:	d00e      	beq.n	1e3ca <vTaskDelay+0x5a>
   1e3ac:	687b      	ldr	r3, [r7, #4]
   1e3ae:	0019      	movs	r1, r3
   1e3b0:	2089      	movs	r0, #137	; 0x89
   1e3b2:	4b20      	ldr	r3, [pc, #128]	; (1e434 <vTaskDelay+0xc4>)
   1e3b4:	4798      	blx	r3
   1e3b6:	4b1c      	ldr	r3, [pc, #112]	; (1e428 <vTaskDelay+0xb8>)
   1e3b8:	681b      	ldr	r3, [r3, #0]
   1e3ba:	0018      	movs	r0, r3
   1e3bc:	4b1e      	ldr	r3, [pc, #120]	; (1e438 <vTaskDelay+0xc8>)
   1e3be:	4798      	blx	r3
   1e3c0:	0003      	movs	r3, r0
   1e3c2:	b2db      	uxtb	r3, r3
   1e3c4:	0018      	movs	r0, r3
   1e3c6:	4b1d      	ldr	r3, [pc, #116]	; (1e43c <vTaskDelay+0xcc>)
   1e3c8:	4798      	blx	r3
   1e3ca:	4b1d      	ldr	r3, [pc, #116]	; (1e440 <vTaskDelay+0xd0>)
   1e3cc:	4798      	blx	r3
   1e3ce:	0003      	movs	r3, r0
   1e3d0:	0018      	movs	r0, r3
   1e3d2:	4b16      	ldr	r3, [pc, #88]	; (1e42c <vTaskDelay+0xbc>)
   1e3d4:	4798      	blx	r3
   1e3d6:	0003      	movs	r3, r0
   1e3d8:	001a      	movs	r2, r3
   1e3da:	4b15      	ldr	r3, [pc, #84]	; (1e430 <vTaskDelay+0xc0>)
   1e3dc:	881b      	ldrh	r3, [r3, #0]
   1e3de:	4013      	ands	r3, r2
   1e3e0:	b29b      	uxth	r3, r3
   1e3e2:	2b00      	cmp	r3, #0
   1e3e4:	d00a      	beq.n	1e3fc <vTaskDelay+0x8c>
   1e3e6:	4b16      	ldr	r3, [pc, #88]	; (1e440 <vTaskDelay+0xd0>)
   1e3e8:	4798      	blx	r3
   1e3ea:	0003      	movs	r3, r0
   1e3ec:	0018      	movs	r0, r3
   1e3ee:	4b12      	ldr	r3, [pc, #72]	; (1e438 <vTaskDelay+0xc8>)
   1e3f0:	4798      	blx	r3
   1e3f2:	0003      	movs	r3, r0
   1e3f4:	b2db      	uxtb	r3, r3
   1e3f6:	0018      	movs	r0, r3
   1e3f8:	4b10      	ldr	r3, [pc, #64]	; (1e43c <vTaskDelay+0xcc>)
   1e3fa:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1e3fc:	687b      	ldr	r3, [r7, #4]
   1e3fe:	2100      	movs	r1, #0
   1e400:	0018      	movs	r0, r3
   1e402:	4b10      	ldr	r3, [pc, #64]	; (1e444 <vTaskDelay+0xd4>)
   1e404:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1e406:	4b10      	ldr	r3, [pc, #64]	; (1e448 <vTaskDelay+0xd8>)
   1e408:	4798      	blx	r3
   1e40a:	0003      	movs	r3, r0
   1e40c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1e40e:	68fb      	ldr	r3, [r7, #12]
   1e410:	2b00      	cmp	r3, #0
   1e412:	d101      	bne.n	1e418 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1e414:	4b0d      	ldr	r3, [pc, #52]	; (1e44c <vTaskDelay+0xdc>)
   1e416:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e418:	46c0      	nop			; (mov r8, r8)
   1e41a:	46bd      	mov	sp, r7
   1e41c:	b004      	add	sp, #16
   1e41e:	bd80      	pop	{r7, pc}
   1e420:	2000406c 	.word	0x2000406c
   1e424:	0001e631 	.word	0x0001e631
   1e428:	20003f6c 	.word	0x20003f6c
   1e42c:	0001a379 	.word	0x0001a379
   1e430:	2000010c 	.word	0x2000010c
   1e434:	0001b079 	.word	0x0001b079
   1e438:	0001a359 	.word	0x0001a359
   1e43c:	0001b509 	.word	0x0001b509
   1e440:	0001a615 	.word	0x0001a615
   1e444:	0001f589 	.word	0x0001f589
   1e448:	0001e649 	.word	0x0001e649
   1e44c:	0001c361 	.word	0x0001c361

0001e450 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1e450:	b580      	push	{r7, lr}
   1e452:	b084      	sub	sp, #16
   1e454:	af00      	add	r7, sp, #0
   1e456:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1e458:	4b42      	ldr	r3, [pc, #264]	; (1e564 <vTaskSuspend+0x114>)
   1e45a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1e45c:	687b      	ldr	r3, [r7, #4]
   1e45e:	2b00      	cmp	r3, #0
   1e460:	d102      	bne.n	1e468 <vTaskSuspend+0x18>
   1e462:	4b41      	ldr	r3, [pc, #260]	; (1e568 <vTaskSuspend+0x118>)
   1e464:	681b      	ldr	r3, [r3, #0]
   1e466:	e000      	b.n	1e46a <vTaskSuspend+0x1a>
   1e468:	687b      	ldr	r3, [r7, #4]
   1e46a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1e46c:	4b3f      	ldr	r3, [pc, #252]	; (1e56c <vTaskSuspend+0x11c>)
   1e46e:	4798      	blx	r3
   1e470:	0003      	movs	r3, r0
   1e472:	0018      	movs	r0, r3
   1e474:	4b3e      	ldr	r3, [pc, #248]	; (1e570 <vTaskSuspend+0x120>)
   1e476:	4798      	blx	r3
   1e478:	0003      	movs	r3, r0
   1e47a:	001a      	movs	r2, r3
   1e47c:	4b3d      	ldr	r3, [pc, #244]	; (1e574 <vTaskSuspend+0x124>)
   1e47e:	881b      	ldrh	r3, [r3, #0]
   1e480:	4013      	ands	r3, r2
   1e482:	b29b      	uxth	r3, r3
   1e484:	2b00      	cmp	r3, #0
   1e486:	d016      	beq.n	1e4b6 <vTaskSuspend+0x66>
   1e488:	68fb      	ldr	r3, [r7, #12]
   1e48a:	0018      	movs	r0, r3
   1e48c:	4b38      	ldr	r3, [pc, #224]	; (1e570 <vTaskSuspend+0x120>)
   1e48e:	4798      	blx	r3
   1e490:	0003      	movs	r3, r0
   1e492:	001a      	movs	r2, r3
   1e494:	4b37      	ldr	r3, [pc, #220]	; (1e574 <vTaskSuspend+0x124>)
   1e496:	881b      	ldrh	r3, [r3, #0]
   1e498:	4013      	ands	r3, r2
   1e49a:	b29b      	uxth	r3, r3
   1e49c:	2b00      	cmp	r3, #0
   1e49e:	d00a      	beq.n	1e4b6 <vTaskSuspend+0x66>
   1e4a0:	68fb      	ldr	r3, [r7, #12]
   1e4a2:	0018      	movs	r0, r3
   1e4a4:	4b34      	ldr	r3, [pc, #208]	; (1e578 <vTaskSuspend+0x128>)
   1e4a6:	4798      	blx	r3
   1e4a8:	0003      	movs	r3, r0
   1e4aa:	b2db      	uxtb	r3, r3
   1e4ac:	001a      	movs	r2, r3
   1e4ae:	2103      	movs	r1, #3
   1e4b0:	208a      	movs	r0, #138	; 0x8a
   1e4b2:	4b32      	ldr	r3, [pc, #200]	; (1e57c <vTaskSuspend+0x12c>)
   1e4b4:	4798      	blx	r3
   1e4b6:	68fb      	ldr	r3, [r7, #12]
   1e4b8:	0018      	movs	r0, r3
   1e4ba:	4b2f      	ldr	r3, [pc, #188]	; (1e578 <vTaskSuspend+0x128>)
   1e4bc:	4798      	blx	r3
   1e4be:	0003      	movs	r3, r0
   1e4c0:	b2db      	uxtb	r3, r3
   1e4c2:	0018      	movs	r0, r3
   1e4c4:	4b2e      	ldr	r3, [pc, #184]	; (1e580 <vTaskSuspend+0x130>)
   1e4c6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e4c8:	68fb      	ldr	r3, [r7, #12]
   1e4ca:	3304      	adds	r3, #4
   1e4cc:	0018      	movs	r0, r3
   1e4ce:	4b2d      	ldr	r3, [pc, #180]	; (1e584 <vTaskSuspend+0x134>)
   1e4d0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e4d2:	68fb      	ldr	r3, [r7, #12]
   1e4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e4d6:	2b00      	cmp	r3, #0
   1e4d8:	d004      	beq.n	1e4e4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e4da:	68fb      	ldr	r3, [r7, #12]
   1e4dc:	3318      	adds	r3, #24
   1e4de:	0018      	movs	r0, r3
   1e4e0:	4b28      	ldr	r3, [pc, #160]	; (1e584 <vTaskSuspend+0x134>)
   1e4e2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1e4e4:	68fb      	ldr	r3, [r7, #12]
   1e4e6:	1d1a      	adds	r2, r3, #4
   1e4e8:	4b27      	ldr	r3, [pc, #156]	; (1e588 <vTaskSuspend+0x138>)
   1e4ea:	0011      	movs	r1, r2
   1e4ec:	0018      	movs	r0, r3
   1e4ee:	4b27      	ldr	r3, [pc, #156]	; (1e58c <vTaskSuspend+0x13c>)
   1e4f0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1e4f2:	68fb      	ldr	r3, [r7, #12]
   1e4f4:	2250      	movs	r2, #80	; 0x50
   1e4f6:	5c9b      	ldrb	r3, [r3, r2]
   1e4f8:	b2db      	uxtb	r3, r3
   1e4fa:	2b01      	cmp	r3, #1
   1e4fc:	d103      	bne.n	1e506 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e4fe:	68fb      	ldr	r3, [r7, #12]
   1e500:	2250      	movs	r2, #80	; 0x50
   1e502:	2100      	movs	r1, #0
   1e504:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1e506:	4b22      	ldr	r3, [pc, #136]	; (1e590 <vTaskSuspend+0x140>)
   1e508:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1e50a:	4b22      	ldr	r3, [pc, #136]	; (1e594 <vTaskSuspend+0x144>)
   1e50c:	681b      	ldr	r3, [r3, #0]
   1e50e:	2b00      	cmp	r3, #0
   1e510:	d005      	beq.n	1e51e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1e512:	4b14      	ldr	r3, [pc, #80]	; (1e564 <vTaskSuspend+0x114>)
   1e514:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1e516:	4b20      	ldr	r3, [pc, #128]	; (1e598 <vTaskSuspend+0x148>)
   1e518:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1e51a:	4b1d      	ldr	r3, [pc, #116]	; (1e590 <vTaskSuspend+0x140>)
   1e51c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1e51e:	4b12      	ldr	r3, [pc, #72]	; (1e568 <vTaskSuspend+0x118>)
   1e520:	681b      	ldr	r3, [r3, #0]
   1e522:	68fa      	ldr	r2, [r7, #12]
   1e524:	429a      	cmp	r2, r3
   1e526:	d118      	bne.n	1e55a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1e528:	4b1a      	ldr	r3, [pc, #104]	; (1e594 <vTaskSuspend+0x144>)
   1e52a:	681b      	ldr	r3, [r3, #0]
   1e52c:	2b00      	cmp	r3, #0
   1e52e:	d008      	beq.n	1e542 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1e530:	4b1a      	ldr	r3, [pc, #104]	; (1e59c <vTaskSuspend+0x14c>)
   1e532:	681b      	ldr	r3, [r3, #0]
   1e534:	2b00      	cmp	r3, #0
   1e536:	d001      	beq.n	1e53c <vTaskSuspend+0xec>
   1e538:	b672      	cpsid	i
   1e53a:	e7fe      	b.n	1e53a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1e53c:	4b18      	ldr	r3, [pc, #96]	; (1e5a0 <vTaskSuspend+0x150>)
   1e53e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e540:	e00b      	b.n	1e55a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1e542:	4b11      	ldr	r3, [pc, #68]	; (1e588 <vTaskSuspend+0x138>)
   1e544:	681a      	ldr	r2, [r3, #0]
   1e546:	4b17      	ldr	r3, [pc, #92]	; (1e5a4 <vTaskSuspend+0x154>)
   1e548:	681b      	ldr	r3, [r3, #0]
   1e54a:	429a      	cmp	r2, r3
   1e54c:	d103      	bne.n	1e556 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1e54e:	4b06      	ldr	r3, [pc, #24]	; (1e568 <vTaskSuspend+0x118>)
   1e550:	2200      	movs	r2, #0
   1e552:	601a      	str	r2, [r3, #0]
	}
   1e554:	e001      	b.n	1e55a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1e556:	4b14      	ldr	r3, [pc, #80]	; (1e5a8 <vTaskSuspend+0x158>)
   1e558:	4798      	blx	r3
	}
   1e55a:	46c0      	nop			; (mov r8, r8)
   1e55c:	46bd      	mov	sp, r7
   1e55e:	b004      	add	sp, #16
   1e560:	bd80      	pop	{r7, pc}
   1e562:	46c0      	nop			; (mov r8, r8)
   1e564:	0001c379 	.word	0x0001c379
   1e568:	20003f6c 	.word	0x20003f6c
   1e56c:	0001a615 	.word	0x0001a615
   1e570:	0001a379 	.word	0x0001a379
   1e574:	2000010c 	.word	0x2000010c
   1e578:	0001a359 	.word	0x0001a359
   1e57c:	0001ad71 	.word	0x0001ad71
   1e580:	0001b509 	.word	0x0001b509
   1e584:	0001c1f3 	.word	0x0001c1f3
   1e588:	20004030 	.word	0x20004030
   1e58c:	0001c143 	.word	0x0001c143
   1e590:	0001c39d 	.word	0x0001c39d
   1e594:	20004050 	.word	0x20004050
   1e598:	0001f035 	.word	0x0001f035
   1e59c:	2000406c 	.word	0x2000406c
   1e5a0:	0001c361 	.word	0x0001c361
   1e5a4:	20004044 	.word	0x20004044
   1e5a8:	0001e9c5 	.word	0x0001e9c5

0001e5ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1e5ac:	b590      	push	{r4, r7, lr}
   1e5ae:	b085      	sub	sp, #20
   1e5b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1e5b2:	4916      	ldr	r1, [pc, #88]	; (1e60c <vTaskStartScheduler+0x60>)
   1e5b4:	4816      	ldr	r0, [pc, #88]	; (1e610 <vTaskStartScheduler+0x64>)
   1e5b6:	4b17      	ldr	r3, [pc, #92]	; (1e614 <vTaskStartScheduler+0x68>)
   1e5b8:	9301      	str	r3, [sp, #4]
   1e5ba:	2300      	movs	r3, #0
   1e5bc:	9300      	str	r3, [sp, #0]
   1e5be:	2300      	movs	r3, #0
   1e5c0:	2296      	movs	r2, #150	; 0x96
   1e5c2:	4c15      	ldr	r4, [pc, #84]	; (1e618 <vTaskStartScheduler+0x6c>)
   1e5c4:	47a0      	blx	r4
   1e5c6:	0003      	movs	r3, r0
   1e5c8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1e5ca:	687b      	ldr	r3, [r7, #4]
   1e5cc:	2b01      	cmp	r3, #1
   1e5ce:	d103      	bne.n	1e5d8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1e5d0:	4b12      	ldr	r3, [pc, #72]	; (1e61c <vTaskStartScheduler+0x70>)
   1e5d2:	4798      	blx	r3
   1e5d4:	0003      	movs	r3, r0
   1e5d6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1e5d8:	687b      	ldr	r3, [r7, #4]
   1e5da:	2b01      	cmp	r3, #1
   1e5dc:	d10d      	bne.n	1e5fa <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1e5de:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1e5e0:	4b0f      	ldr	r3, [pc, #60]	; (1e620 <vTaskStartScheduler+0x74>)
   1e5e2:	2201      	movs	r2, #1
   1e5e4:	4252      	negs	r2, r2
   1e5e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1e5e8:	4b0e      	ldr	r3, [pc, #56]	; (1e624 <vTaskStartScheduler+0x78>)
   1e5ea:	2201      	movs	r2, #1
   1e5ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1e5ee:	4b0e      	ldr	r3, [pc, #56]	; (1e628 <vTaskStartScheduler+0x7c>)
   1e5f0:	2200      	movs	r2, #0
   1e5f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1e5f4:	4b0d      	ldr	r3, [pc, #52]	; (1e62c <vTaskStartScheduler+0x80>)
   1e5f6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1e5f8:	e004      	b.n	1e604 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1e5fa:	687b      	ldr	r3, [r7, #4]
   1e5fc:	3301      	adds	r3, #1
   1e5fe:	d101      	bne.n	1e604 <vTaskStartScheduler+0x58>
   1e600:	b672      	cpsid	i
   1e602:	e7fe      	b.n	1e602 <vTaskStartScheduler+0x56>
}
   1e604:	46c0      	nop			; (mov r8, r8)
   1e606:	46bd      	mov	sp, r7
   1e608:	b003      	add	sp, #12
   1e60a:	bd90      	pop	{r4, r7, pc}
   1e60c:	0003b318 	.word	0x0003b318
   1e610:	0001ee7d 	.word	0x0001ee7d
   1e614:	20004068 	.word	0x20004068
   1e618:	0001dfd5 	.word	0x0001dfd5
   1e61c:	0001f63d 	.word	0x0001f63d
   1e620:	20004064 	.word	0x20004064
   1e624:	20004050 	.word	0x20004050
   1e628:	20004048 	.word	0x20004048
   1e62c:	0001c309 	.word	0x0001c309

0001e630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1e630:	b580      	push	{r7, lr}
   1e632:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1e634:	4b03      	ldr	r3, [pc, #12]	; (1e644 <vTaskSuspendAll+0x14>)
   1e636:	681b      	ldr	r3, [r3, #0]
   1e638:	1c5a      	adds	r2, r3, #1
   1e63a:	4b02      	ldr	r3, [pc, #8]	; (1e644 <vTaskSuspendAll+0x14>)
   1e63c:	601a      	str	r2, [r3, #0]
}
   1e63e:	46c0      	nop			; (mov r8, r8)
   1e640:	46bd      	mov	sp, r7
   1e642:	bd80      	pop	{r7, pc}
   1e644:	2000406c 	.word	0x2000406c

0001e648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1e648:	b580      	push	{r7, lr}
   1e64a:	b084      	sub	sp, #16
   1e64c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1e64e:	2300      	movs	r3, #0
   1e650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1e652:	2300      	movs	r3, #0
   1e654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1e656:	4b45      	ldr	r3, [pc, #276]	; (1e76c <xTaskResumeAll+0x124>)
   1e658:	681b      	ldr	r3, [r3, #0]
   1e65a:	2b00      	cmp	r3, #0
   1e65c:	d101      	bne.n	1e662 <xTaskResumeAll+0x1a>
   1e65e:	b672      	cpsid	i
   1e660:	e7fe      	b.n	1e660 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1e662:	4b43      	ldr	r3, [pc, #268]	; (1e770 <xTaskResumeAll+0x128>)
   1e664:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1e666:	4b41      	ldr	r3, [pc, #260]	; (1e76c <xTaskResumeAll+0x124>)
   1e668:	681b      	ldr	r3, [r3, #0]
   1e66a:	1e5a      	subs	r2, r3, #1
   1e66c:	4b3f      	ldr	r3, [pc, #252]	; (1e76c <xTaskResumeAll+0x124>)
   1e66e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e670:	4b3e      	ldr	r3, [pc, #248]	; (1e76c <xTaskResumeAll+0x124>)
   1e672:	681b      	ldr	r3, [r3, #0]
   1e674:	2b00      	cmp	r3, #0
   1e676:	d000      	beq.n	1e67a <xTaskResumeAll+0x32>
   1e678:	e071      	b.n	1e75e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1e67a:	4b3e      	ldr	r3, [pc, #248]	; (1e774 <xTaskResumeAll+0x12c>)
   1e67c:	681b      	ldr	r3, [r3, #0]
   1e67e:	2b00      	cmp	r3, #0
   1e680:	d100      	bne.n	1e684 <xTaskResumeAll+0x3c>
   1e682:	e06c      	b.n	1e75e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e684:	e044      	b.n	1e710 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1e686:	4b3c      	ldr	r3, [pc, #240]	; (1e778 <xTaskResumeAll+0x130>)
   1e688:	68db      	ldr	r3, [r3, #12]
   1e68a:	68db      	ldr	r3, [r3, #12]
   1e68c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e68e:	68fb      	ldr	r3, [r7, #12]
   1e690:	3318      	adds	r3, #24
   1e692:	0018      	movs	r0, r3
   1e694:	4b39      	ldr	r3, [pc, #228]	; (1e77c <xTaskResumeAll+0x134>)
   1e696:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e698:	68fb      	ldr	r3, [r7, #12]
   1e69a:	3304      	adds	r3, #4
   1e69c:	0018      	movs	r0, r3
   1e69e:	4b37      	ldr	r3, [pc, #220]	; (1e77c <xTaskResumeAll+0x134>)
   1e6a0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1e6a2:	68fb      	ldr	r3, [r7, #12]
   1e6a4:	0018      	movs	r0, r3
   1e6a6:	4b36      	ldr	r3, [pc, #216]	; (1e780 <xTaskResumeAll+0x138>)
   1e6a8:	4798      	blx	r3
   1e6aa:	0003      	movs	r3, r0
   1e6ac:	001a      	movs	r2, r3
   1e6ae:	4b35      	ldr	r3, [pc, #212]	; (1e784 <xTaskResumeAll+0x13c>)
   1e6b0:	881b      	ldrh	r3, [r3, #0]
   1e6b2:	4013      	ands	r3, r2
   1e6b4:	b29b      	uxth	r3, r3
   1e6b6:	2b00      	cmp	r3, #0
   1e6b8:	d008      	beq.n	1e6cc <xTaskResumeAll+0x84>
   1e6ba:	68fb      	ldr	r3, [r7, #12]
   1e6bc:	0018      	movs	r0, r3
   1e6be:	4b32      	ldr	r3, [pc, #200]	; (1e788 <xTaskResumeAll+0x140>)
   1e6c0:	4798      	blx	r3
   1e6c2:	0003      	movs	r3, r0
   1e6c4:	b2db      	uxtb	r3, r3
   1e6c6:	0018      	movs	r0, r3
   1e6c8:	4b30      	ldr	r3, [pc, #192]	; (1e78c <xTaskResumeAll+0x144>)
   1e6ca:	4798      	blx	r3
   1e6cc:	68fb      	ldr	r3, [r7, #12]
   1e6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e6d0:	4b2f      	ldr	r3, [pc, #188]	; (1e790 <xTaskResumeAll+0x148>)
   1e6d2:	681b      	ldr	r3, [r3, #0]
   1e6d4:	429a      	cmp	r2, r3
   1e6d6:	d903      	bls.n	1e6e0 <xTaskResumeAll+0x98>
   1e6d8:	68fb      	ldr	r3, [r7, #12]
   1e6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e6dc:	4b2c      	ldr	r3, [pc, #176]	; (1e790 <xTaskResumeAll+0x148>)
   1e6de:	601a      	str	r2, [r3, #0]
   1e6e0:	68fb      	ldr	r3, [r7, #12]
   1e6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e6e4:	0013      	movs	r3, r2
   1e6e6:	009b      	lsls	r3, r3, #2
   1e6e8:	189b      	adds	r3, r3, r2
   1e6ea:	009b      	lsls	r3, r3, #2
   1e6ec:	4a29      	ldr	r2, [pc, #164]	; (1e794 <xTaskResumeAll+0x14c>)
   1e6ee:	189a      	adds	r2, r3, r2
   1e6f0:	68fb      	ldr	r3, [r7, #12]
   1e6f2:	3304      	adds	r3, #4
   1e6f4:	0019      	movs	r1, r3
   1e6f6:	0010      	movs	r0, r2
   1e6f8:	4b27      	ldr	r3, [pc, #156]	; (1e798 <xTaskResumeAll+0x150>)
   1e6fa:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e6fc:	68fb      	ldr	r3, [r7, #12]
   1e6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e700:	4b26      	ldr	r3, [pc, #152]	; (1e79c <xTaskResumeAll+0x154>)
   1e702:	681b      	ldr	r3, [r3, #0]
   1e704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e706:	429a      	cmp	r2, r3
   1e708:	d302      	bcc.n	1e710 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1e70a:	4b25      	ldr	r3, [pc, #148]	; (1e7a0 <xTaskResumeAll+0x158>)
   1e70c:	2201      	movs	r2, #1
   1e70e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e710:	4b19      	ldr	r3, [pc, #100]	; (1e778 <xTaskResumeAll+0x130>)
   1e712:	681b      	ldr	r3, [r3, #0]
   1e714:	2b00      	cmp	r3, #0
   1e716:	d1b6      	bne.n	1e686 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1e718:	68fb      	ldr	r3, [r7, #12]
   1e71a:	2b00      	cmp	r3, #0
   1e71c:	d001      	beq.n	1e722 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1e71e:	4b21      	ldr	r3, [pc, #132]	; (1e7a4 <xTaskResumeAll+0x15c>)
   1e720:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1e722:	4b21      	ldr	r3, [pc, #132]	; (1e7a8 <xTaskResumeAll+0x160>)
   1e724:	681b      	ldr	r3, [r3, #0]
   1e726:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1e728:	687b      	ldr	r3, [r7, #4]
   1e72a:	2b00      	cmp	r3, #0
   1e72c:	d00f      	beq.n	1e74e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1e72e:	4b1f      	ldr	r3, [pc, #124]	; (1e7ac <xTaskResumeAll+0x164>)
   1e730:	4798      	blx	r3
   1e732:	1e03      	subs	r3, r0, #0
   1e734:	d002      	beq.n	1e73c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1e736:	4b1a      	ldr	r3, [pc, #104]	; (1e7a0 <xTaskResumeAll+0x158>)
   1e738:	2201      	movs	r2, #1
   1e73a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1e73c:	687b      	ldr	r3, [r7, #4]
   1e73e:	3b01      	subs	r3, #1
   1e740:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1e742:	687b      	ldr	r3, [r7, #4]
   1e744:	2b00      	cmp	r3, #0
   1e746:	d1f2      	bne.n	1e72e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1e748:	4b17      	ldr	r3, [pc, #92]	; (1e7a8 <xTaskResumeAll+0x160>)
   1e74a:	2200      	movs	r2, #0
   1e74c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1e74e:	4b14      	ldr	r3, [pc, #80]	; (1e7a0 <xTaskResumeAll+0x158>)
   1e750:	681b      	ldr	r3, [r3, #0]
   1e752:	2b00      	cmp	r3, #0
   1e754:	d003      	beq.n	1e75e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1e756:	2301      	movs	r3, #1
   1e758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1e75a:	4b15      	ldr	r3, [pc, #84]	; (1e7b0 <xTaskResumeAll+0x168>)
   1e75c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e75e:	4b15      	ldr	r3, [pc, #84]	; (1e7b4 <xTaskResumeAll+0x16c>)
   1e760:	4798      	blx	r3

	return xAlreadyYielded;
   1e762:	68bb      	ldr	r3, [r7, #8]
}
   1e764:	0018      	movs	r0, r3
   1e766:	46bd      	mov	sp, r7
   1e768:	b004      	add	sp, #16
   1e76a:	bd80      	pop	{r7, pc}
   1e76c:	2000406c 	.word	0x2000406c
   1e770:	0001c379 	.word	0x0001c379
   1e774:	20004044 	.word	0x20004044
   1e778:	20004004 	.word	0x20004004
   1e77c:	0001c1f3 	.word	0x0001c1f3
   1e780:	0001a379 	.word	0x0001a379
   1e784:	2000010c 	.word	0x2000010c
   1e788:	0001a359 	.word	0x0001a359
   1e78c:	0001ab29 	.word	0x0001ab29
   1e790:	2000404c 	.word	0x2000404c
   1e794:	20003f70 	.word	0x20003f70
   1e798:	0001c143 	.word	0x0001c143
   1e79c:	20003f6c 	.word	0x20003f6c
   1e7a0:	20004058 	.word	0x20004058
   1e7a4:	0001f035 	.word	0x0001f035
   1e7a8:	20004054 	.word	0x20004054
   1e7ac:	0001e7d5 	.word	0x0001e7d5
   1e7b0:	0001c361 	.word	0x0001c361
   1e7b4:	0001c39d 	.word	0x0001c39d

0001e7b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1e7b8:	b580      	push	{r7, lr}
   1e7ba:	b082      	sub	sp, #8
   1e7bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1e7be:	4b04      	ldr	r3, [pc, #16]	; (1e7d0 <xTaskGetTickCount+0x18>)
   1e7c0:	681b      	ldr	r3, [r3, #0]
   1e7c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1e7c4:	687b      	ldr	r3, [r7, #4]
}
   1e7c6:	0018      	movs	r0, r3
   1e7c8:	46bd      	mov	sp, r7
   1e7ca:	b002      	add	sp, #8
   1e7cc:	bd80      	pop	{r7, pc}
   1e7ce:	46c0      	nop			; (mov r8, r8)
   1e7d0:	20004048 	.word	0x20004048

0001e7d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1e7d4:	b580      	push	{r7, lr}
   1e7d6:	b086      	sub	sp, #24
   1e7d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1e7da:	2300      	movs	r3, #0
   1e7dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1e7de:	4b64      	ldr	r3, [pc, #400]	; (1e970 <xTaskIncrementTick+0x19c>)
   1e7e0:	681b      	ldr	r3, [r3, #0]
   1e7e2:	2b01      	cmp	r3, #1
   1e7e4:	d003      	beq.n	1e7ee <xTaskIncrementTick+0x1a>
   1e7e6:	4b63      	ldr	r3, [pc, #396]	; (1e974 <xTaskIncrementTick+0x1a0>)
   1e7e8:	681b      	ldr	r3, [r3, #0]
   1e7ea:	2b00      	cmp	r3, #0
   1e7ec:	d107      	bne.n	1e7fe <xTaskIncrementTick+0x2a>
   1e7ee:	4b62      	ldr	r3, [pc, #392]	; (1e978 <xTaskIncrementTick+0x1a4>)
   1e7f0:	681b      	ldr	r3, [r3, #0]
   1e7f2:	1c5a      	adds	r2, r3, #1
   1e7f4:	4b60      	ldr	r3, [pc, #384]	; (1e978 <xTaskIncrementTick+0x1a4>)
   1e7f6:	601a      	str	r2, [r3, #0]
   1e7f8:	2000      	movs	r0, #0
   1e7fa:	4b60      	ldr	r3, [pc, #384]	; (1e97c <xTaskIncrementTick+0x1a8>)
   1e7fc:	4798      	blx	r3
   1e7fe:	4b5c      	ldr	r3, [pc, #368]	; (1e970 <xTaskIncrementTick+0x19c>)
   1e800:	681b      	ldr	r3, [r3, #0]
   1e802:	2b00      	cmp	r3, #0
   1e804:	d106      	bne.n	1e814 <xTaskIncrementTick+0x40>
   1e806:	4b5e      	ldr	r3, [pc, #376]	; (1e980 <xTaskIncrementTick+0x1ac>)
   1e808:	681b      	ldr	r3, [r3, #0]
   1e80a:	3301      	adds	r3, #1
   1e80c:	0019      	movs	r1, r3
   1e80e:	2003      	movs	r0, #3
   1e810:	4b5c      	ldr	r3, [pc, #368]	; (1e984 <xTaskIncrementTick+0x1b0>)
   1e812:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e814:	4b56      	ldr	r3, [pc, #344]	; (1e970 <xTaskIncrementTick+0x19c>)
   1e816:	681b      	ldr	r3, [r3, #0]
   1e818:	2b00      	cmp	r3, #0
   1e81a:	d000      	beq.n	1e81e <xTaskIncrementTick+0x4a>
   1e81c:	e098      	b.n	1e950 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1e81e:	4b58      	ldr	r3, [pc, #352]	; (1e980 <xTaskIncrementTick+0x1ac>)
   1e820:	681b      	ldr	r3, [r3, #0]
   1e822:	3301      	adds	r3, #1
   1e824:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1e826:	4b56      	ldr	r3, [pc, #344]	; (1e980 <xTaskIncrementTick+0x1ac>)
   1e828:	693a      	ldr	r2, [r7, #16]
   1e82a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1e82c:	693b      	ldr	r3, [r7, #16]
   1e82e:	2b00      	cmp	r3, #0
   1e830:	d117      	bne.n	1e862 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1e832:	4b55      	ldr	r3, [pc, #340]	; (1e988 <xTaskIncrementTick+0x1b4>)
   1e834:	681b      	ldr	r3, [r3, #0]
   1e836:	681b      	ldr	r3, [r3, #0]
   1e838:	2b00      	cmp	r3, #0
   1e83a:	d001      	beq.n	1e840 <xTaskIncrementTick+0x6c>
   1e83c:	b672      	cpsid	i
   1e83e:	e7fe      	b.n	1e83e <xTaskIncrementTick+0x6a>
   1e840:	4b51      	ldr	r3, [pc, #324]	; (1e988 <xTaskIncrementTick+0x1b4>)
   1e842:	681b      	ldr	r3, [r3, #0]
   1e844:	60fb      	str	r3, [r7, #12]
   1e846:	4b51      	ldr	r3, [pc, #324]	; (1e98c <xTaskIncrementTick+0x1b8>)
   1e848:	681a      	ldr	r2, [r3, #0]
   1e84a:	4b4f      	ldr	r3, [pc, #316]	; (1e988 <xTaskIncrementTick+0x1b4>)
   1e84c:	601a      	str	r2, [r3, #0]
   1e84e:	4b4f      	ldr	r3, [pc, #316]	; (1e98c <xTaskIncrementTick+0x1b8>)
   1e850:	68fa      	ldr	r2, [r7, #12]
   1e852:	601a      	str	r2, [r3, #0]
   1e854:	4b4e      	ldr	r3, [pc, #312]	; (1e990 <xTaskIncrementTick+0x1bc>)
   1e856:	681b      	ldr	r3, [r3, #0]
   1e858:	1c5a      	adds	r2, r3, #1
   1e85a:	4b4d      	ldr	r3, [pc, #308]	; (1e990 <xTaskIncrementTick+0x1bc>)
   1e85c:	601a      	str	r2, [r3, #0]
   1e85e:	4b4d      	ldr	r3, [pc, #308]	; (1e994 <xTaskIncrementTick+0x1c0>)
   1e860:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1e862:	4b4d      	ldr	r3, [pc, #308]	; (1e998 <xTaskIncrementTick+0x1c4>)
   1e864:	681b      	ldr	r3, [r3, #0]
   1e866:	693a      	ldr	r2, [r7, #16]
   1e868:	429a      	cmp	r2, r3
   1e86a:	d363      	bcc.n	1e934 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e86c:	4b46      	ldr	r3, [pc, #280]	; (1e988 <xTaskIncrementTick+0x1b4>)
   1e86e:	681b      	ldr	r3, [r3, #0]
   1e870:	681b      	ldr	r3, [r3, #0]
   1e872:	2b00      	cmp	r3, #0
   1e874:	d101      	bne.n	1e87a <xTaskIncrementTick+0xa6>
   1e876:	2301      	movs	r3, #1
   1e878:	e000      	b.n	1e87c <xTaskIncrementTick+0xa8>
   1e87a:	2300      	movs	r3, #0
   1e87c:	2b00      	cmp	r3, #0
   1e87e:	d004      	beq.n	1e88a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e880:	4b45      	ldr	r3, [pc, #276]	; (1e998 <xTaskIncrementTick+0x1c4>)
   1e882:	2201      	movs	r2, #1
   1e884:	4252      	negs	r2, r2
   1e886:	601a      	str	r2, [r3, #0]
					break;
   1e888:	e054      	b.n	1e934 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1e88a:	4b3f      	ldr	r3, [pc, #252]	; (1e988 <xTaskIncrementTick+0x1b4>)
   1e88c:	681b      	ldr	r3, [r3, #0]
   1e88e:	68db      	ldr	r3, [r3, #12]
   1e890:	68db      	ldr	r3, [r3, #12]
   1e892:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1e894:	68bb      	ldr	r3, [r7, #8]
   1e896:	685b      	ldr	r3, [r3, #4]
   1e898:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1e89a:	693a      	ldr	r2, [r7, #16]
   1e89c:	687b      	ldr	r3, [r7, #4]
   1e89e:	429a      	cmp	r2, r3
   1e8a0:	d203      	bcs.n	1e8aa <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1e8a2:	4b3d      	ldr	r3, [pc, #244]	; (1e998 <xTaskIncrementTick+0x1c4>)
   1e8a4:	687a      	ldr	r2, [r7, #4]
   1e8a6:	601a      	str	r2, [r3, #0]
						break;
   1e8a8:	e044      	b.n	1e934 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e8aa:	68bb      	ldr	r3, [r7, #8]
   1e8ac:	3304      	adds	r3, #4
   1e8ae:	0018      	movs	r0, r3
   1e8b0:	4b3a      	ldr	r3, [pc, #232]	; (1e99c <xTaskIncrementTick+0x1c8>)
   1e8b2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e8b4:	68bb      	ldr	r3, [r7, #8]
   1e8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e8b8:	2b00      	cmp	r3, #0
   1e8ba:	d004      	beq.n	1e8c6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e8bc:	68bb      	ldr	r3, [r7, #8]
   1e8be:	3318      	adds	r3, #24
   1e8c0:	0018      	movs	r0, r3
   1e8c2:	4b36      	ldr	r3, [pc, #216]	; (1e99c <xTaskIncrementTick+0x1c8>)
   1e8c4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1e8c6:	68bb      	ldr	r3, [r7, #8]
   1e8c8:	0018      	movs	r0, r3
   1e8ca:	4b35      	ldr	r3, [pc, #212]	; (1e9a0 <xTaskIncrementTick+0x1cc>)
   1e8cc:	4798      	blx	r3
   1e8ce:	0003      	movs	r3, r0
   1e8d0:	001a      	movs	r2, r3
   1e8d2:	4b34      	ldr	r3, [pc, #208]	; (1e9a4 <xTaskIncrementTick+0x1d0>)
   1e8d4:	881b      	ldrh	r3, [r3, #0]
   1e8d6:	4013      	ands	r3, r2
   1e8d8:	b29b      	uxth	r3, r3
   1e8da:	2b00      	cmp	r3, #0
   1e8dc:	d008      	beq.n	1e8f0 <xTaskIncrementTick+0x11c>
   1e8de:	68bb      	ldr	r3, [r7, #8]
   1e8e0:	0018      	movs	r0, r3
   1e8e2:	4b31      	ldr	r3, [pc, #196]	; (1e9a8 <xTaskIncrementTick+0x1d4>)
   1e8e4:	4798      	blx	r3
   1e8e6:	0003      	movs	r3, r0
   1e8e8:	b2db      	uxtb	r3, r3
   1e8ea:	0018      	movs	r0, r3
   1e8ec:	4b2f      	ldr	r3, [pc, #188]	; (1e9ac <xTaskIncrementTick+0x1d8>)
   1e8ee:	4798      	blx	r3
   1e8f0:	68bb      	ldr	r3, [r7, #8]
   1e8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e8f4:	4b2e      	ldr	r3, [pc, #184]	; (1e9b0 <xTaskIncrementTick+0x1dc>)
   1e8f6:	681b      	ldr	r3, [r3, #0]
   1e8f8:	429a      	cmp	r2, r3
   1e8fa:	d903      	bls.n	1e904 <xTaskIncrementTick+0x130>
   1e8fc:	68bb      	ldr	r3, [r7, #8]
   1e8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e900:	4b2b      	ldr	r3, [pc, #172]	; (1e9b0 <xTaskIncrementTick+0x1dc>)
   1e902:	601a      	str	r2, [r3, #0]
   1e904:	68bb      	ldr	r3, [r7, #8]
   1e906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e908:	0013      	movs	r3, r2
   1e90a:	009b      	lsls	r3, r3, #2
   1e90c:	189b      	adds	r3, r3, r2
   1e90e:	009b      	lsls	r3, r3, #2
   1e910:	4a28      	ldr	r2, [pc, #160]	; (1e9b4 <xTaskIncrementTick+0x1e0>)
   1e912:	189a      	adds	r2, r3, r2
   1e914:	68bb      	ldr	r3, [r7, #8]
   1e916:	3304      	adds	r3, #4
   1e918:	0019      	movs	r1, r3
   1e91a:	0010      	movs	r0, r2
   1e91c:	4b26      	ldr	r3, [pc, #152]	; (1e9b8 <xTaskIncrementTick+0x1e4>)
   1e91e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e920:	68bb      	ldr	r3, [r7, #8]
   1e922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e924:	4b25      	ldr	r3, [pc, #148]	; (1e9bc <xTaskIncrementTick+0x1e8>)
   1e926:	681b      	ldr	r3, [r3, #0]
   1e928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e92a:	429a      	cmp	r2, r3
   1e92c:	d39e      	bcc.n	1e86c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1e92e:	2301      	movs	r3, #1
   1e930:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e932:	e79b      	b.n	1e86c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1e934:	4b21      	ldr	r3, [pc, #132]	; (1e9bc <xTaskIncrementTick+0x1e8>)
   1e936:	681b      	ldr	r3, [r3, #0]
   1e938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e93a:	491e      	ldr	r1, [pc, #120]	; (1e9b4 <xTaskIncrementTick+0x1e0>)
   1e93c:	0013      	movs	r3, r2
   1e93e:	009b      	lsls	r3, r3, #2
   1e940:	189b      	adds	r3, r3, r2
   1e942:	009b      	lsls	r3, r3, #2
   1e944:	585b      	ldr	r3, [r3, r1]
   1e946:	2b01      	cmp	r3, #1
   1e948:	d907      	bls.n	1e95a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1e94a:	2301      	movs	r3, #1
   1e94c:	617b      	str	r3, [r7, #20]
   1e94e:	e004      	b.n	1e95a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1e950:	4b08      	ldr	r3, [pc, #32]	; (1e974 <xTaskIncrementTick+0x1a0>)
   1e952:	681b      	ldr	r3, [r3, #0]
   1e954:	1c5a      	adds	r2, r3, #1
   1e956:	4b07      	ldr	r3, [pc, #28]	; (1e974 <xTaskIncrementTick+0x1a0>)
   1e958:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1e95a:	4b19      	ldr	r3, [pc, #100]	; (1e9c0 <xTaskIncrementTick+0x1ec>)
   1e95c:	681b      	ldr	r3, [r3, #0]
   1e95e:	2b00      	cmp	r3, #0
   1e960:	d001      	beq.n	1e966 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1e962:	2301      	movs	r3, #1
   1e964:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1e966:	697b      	ldr	r3, [r7, #20]
}
   1e968:	0018      	movs	r0, r3
   1e96a:	46bd      	mov	sp, r7
   1e96c:	b006      	add	sp, #24
   1e96e:	bd80      	pop	{r7, pc}
   1e970:	2000406c 	.word	0x2000406c
   1e974:	20004054 	.word	0x20004054
   1e978:	20000bcc 	.word	0x20000bcc
   1e97c:	0001c00d 	.word	0x0001c00d
   1e980:	20004048 	.word	0x20004048
   1e984:	0001b079 	.word	0x0001b079
   1e988:	20003ffc 	.word	0x20003ffc
   1e98c:	20004000 	.word	0x20004000
   1e990:	2000405c 	.word	0x2000405c
   1e994:	0001f035 	.word	0x0001f035
   1e998:	20004064 	.word	0x20004064
   1e99c:	0001c1f3 	.word	0x0001c1f3
   1e9a0:	0001a379 	.word	0x0001a379
   1e9a4:	2000010c 	.word	0x2000010c
   1e9a8:	0001a359 	.word	0x0001a359
   1e9ac:	0001ab29 	.word	0x0001ab29
   1e9b0:	2000404c 	.word	0x2000404c
   1e9b4:	20003f70 	.word	0x20003f70
   1e9b8:	0001c143 	.word	0x0001c143
   1e9bc:	20003f6c 	.word	0x20003f6c
   1e9c0:	20004058 	.word	0x20004058

0001e9c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1e9c4:	b580      	push	{r7, lr}
   1e9c6:	b082      	sub	sp, #8
   1e9c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1e9ca:	4b3a      	ldr	r3, [pc, #232]	; (1eab4 <vTaskSwitchContext+0xf0>)
   1e9cc:	681b      	ldr	r3, [r3, #0]
   1e9ce:	2b00      	cmp	r3, #0
   1e9d0:	d003      	beq.n	1e9da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1e9d2:	4b39      	ldr	r3, [pc, #228]	; (1eab8 <vTaskSwitchContext+0xf4>)
   1e9d4:	2201      	movs	r2, #1
   1e9d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1e9d8:	e067      	b.n	1eaaa <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1e9da:	4b37      	ldr	r3, [pc, #220]	; (1eab8 <vTaskSwitchContext+0xf4>)
   1e9dc:	2200      	movs	r2, #0
   1e9de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1e9e0:	4b36      	ldr	r3, [pc, #216]	; (1eabc <vTaskSwitchContext+0xf8>)
   1e9e2:	681b      	ldr	r3, [r3, #0]
   1e9e4:	681a      	ldr	r2, [r3, #0]
   1e9e6:	4b35      	ldr	r3, [pc, #212]	; (1eabc <vTaskSwitchContext+0xf8>)
   1e9e8:	681b      	ldr	r3, [r3, #0]
   1e9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e9ec:	429a      	cmp	r2, r3
   1e9ee:	d808      	bhi.n	1ea02 <vTaskSwitchContext+0x3e>
   1e9f0:	4b32      	ldr	r3, [pc, #200]	; (1eabc <vTaskSwitchContext+0xf8>)
   1e9f2:	681a      	ldr	r2, [r3, #0]
   1e9f4:	4b31      	ldr	r3, [pc, #196]	; (1eabc <vTaskSwitchContext+0xf8>)
   1e9f6:	681b      	ldr	r3, [r3, #0]
   1e9f8:	3334      	adds	r3, #52	; 0x34
   1e9fa:	0019      	movs	r1, r3
   1e9fc:	0010      	movs	r0, r2
   1e9fe:	4b30      	ldr	r3, [pc, #192]	; (1eac0 <vTaskSwitchContext+0xfc>)
   1ea00:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1ea02:	4b30      	ldr	r3, [pc, #192]	; (1eac4 <vTaskSwitchContext+0x100>)
   1ea04:	681b      	ldr	r3, [r3, #0]
   1ea06:	607b      	str	r3, [r7, #4]
   1ea08:	e007      	b.n	1ea1a <vTaskSwitchContext+0x56>
   1ea0a:	687b      	ldr	r3, [r7, #4]
   1ea0c:	2b00      	cmp	r3, #0
   1ea0e:	d101      	bne.n	1ea14 <vTaskSwitchContext+0x50>
   1ea10:	b672      	cpsid	i
   1ea12:	e7fe      	b.n	1ea12 <vTaskSwitchContext+0x4e>
   1ea14:	687b      	ldr	r3, [r7, #4]
   1ea16:	3b01      	subs	r3, #1
   1ea18:	607b      	str	r3, [r7, #4]
   1ea1a:	492b      	ldr	r1, [pc, #172]	; (1eac8 <vTaskSwitchContext+0x104>)
   1ea1c:	687a      	ldr	r2, [r7, #4]
   1ea1e:	0013      	movs	r3, r2
   1ea20:	009b      	lsls	r3, r3, #2
   1ea22:	189b      	adds	r3, r3, r2
   1ea24:	009b      	lsls	r3, r3, #2
   1ea26:	585b      	ldr	r3, [r3, r1]
   1ea28:	2b00      	cmp	r3, #0
   1ea2a:	d0ee      	beq.n	1ea0a <vTaskSwitchContext+0x46>
   1ea2c:	687a      	ldr	r2, [r7, #4]
   1ea2e:	0013      	movs	r3, r2
   1ea30:	009b      	lsls	r3, r3, #2
   1ea32:	189b      	adds	r3, r3, r2
   1ea34:	009b      	lsls	r3, r3, #2
   1ea36:	4a24      	ldr	r2, [pc, #144]	; (1eac8 <vTaskSwitchContext+0x104>)
   1ea38:	189b      	adds	r3, r3, r2
   1ea3a:	603b      	str	r3, [r7, #0]
   1ea3c:	683b      	ldr	r3, [r7, #0]
   1ea3e:	685b      	ldr	r3, [r3, #4]
   1ea40:	685a      	ldr	r2, [r3, #4]
   1ea42:	683b      	ldr	r3, [r7, #0]
   1ea44:	605a      	str	r2, [r3, #4]
   1ea46:	683b      	ldr	r3, [r7, #0]
   1ea48:	685a      	ldr	r2, [r3, #4]
   1ea4a:	683b      	ldr	r3, [r7, #0]
   1ea4c:	3308      	adds	r3, #8
   1ea4e:	429a      	cmp	r2, r3
   1ea50:	d104      	bne.n	1ea5c <vTaskSwitchContext+0x98>
   1ea52:	683b      	ldr	r3, [r7, #0]
   1ea54:	685b      	ldr	r3, [r3, #4]
   1ea56:	685a      	ldr	r2, [r3, #4]
   1ea58:	683b      	ldr	r3, [r7, #0]
   1ea5a:	605a      	str	r2, [r3, #4]
   1ea5c:	683b      	ldr	r3, [r7, #0]
   1ea5e:	685b      	ldr	r3, [r3, #4]
   1ea60:	68da      	ldr	r2, [r3, #12]
   1ea62:	4b16      	ldr	r3, [pc, #88]	; (1eabc <vTaskSwitchContext+0xf8>)
   1ea64:	601a      	str	r2, [r3, #0]
   1ea66:	4b17      	ldr	r3, [pc, #92]	; (1eac4 <vTaskSwitchContext+0x100>)
   1ea68:	687a      	ldr	r2, [r7, #4]
   1ea6a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1ea6c:	4b17      	ldr	r3, [pc, #92]	; (1eacc <vTaskSwitchContext+0x108>)
   1ea6e:	2201      	movs	r2, #1
   1ea70:	601a      	str	r2, [r3, #0]
   1ea72:	4b17      	ldr	r3, [pc, #92]	; (1ead0 <vTaskSwitchContext+0x10c>)
   1ea74:	4798      	blx	r3
   1ea76:	0003      	movs	r3, r0
   1ea78:	0018      	movs	r0, r3
   1ea7a:	4b16      	ldr	r3, [pc, #88]	; (1ead4 <vTaskSwitchContext+0x110>)
   1ea7c:	4798      	blx	r3
   1ea7e:	0003      	movs	r3, r0
   1ea80:	001a      	movs	r2, r3
   1ea82:	4b15      	ldr	r3, [pc, #84]	; (1ead8 <vTaskSwitchContext+0x114>)
   1ea84:	881b      	ldrh	r3, [r3, #0]
   1ea86:	4013      	ands	r3, r2
   1ea88:	b29b      	uxth	r3, r3
   1ea8a:	2b00      	cmp	r3, #0
   1ea8c:	d00a      	beq.n	1eaa4 <vTaskSwitchContext+0xe0>
   1ea8e:	4b10      	ldr	r3, [pc, #64]	; (1ead0 <vTaskSwitchContext+0x10c>)
   1ea90:	4798      	blx	r3
   1ea92:	0003      	movs	r3, r0
   1ea94:	0018      	movs	r0, r3
   1ea96:	4b11      	ldr	r3, [pc, #68]	; (1eadc <vTaskSwitchContext+0x118>)
   1ea98:	4798      	blx	r3
   1ea9a:	0003      	movs	r3, r0
   1ea9c:	b2db      	uxtb	r3, r3
   1ea9e:	0018      	movs	r0, r3
   1eaa0:	4b0f      	ldr	r3, [pc, #60]	; (1eae0 <vTaskSwitchContext+0x11c>)
   1eaa2:	4798      	blx	r3
   1eaa4:	4b09      	ldr	r3, [pc, #36]	; (1eacc <vTaskSwitchContext+0x108>)
   1eaa6:	2202      	movs	r2, #2
   1eaa8:	601a      	str	r2, [r3, #0]
}
   1eaaa:	46c0      	nop			; (mov r8, r8)
   1eaac:	46bd      	mov	sp, r7
   1eaae:	b002      	add	sp, #8
   1eab0:	bd80      	pop	{r7, pc}
   1eab2:	46c0      	nop			; (mov r8, r8)
   1eab4:	2000406c 	.word	0x2000406c
   1eab8:	20004058 	.word	0x20004058
   1eabc:	20003f6c 	.word	0x20003f6c
   1eac0:	00034bdd 	.word	0x00034bdd
   1eac4:	2000404c 	.word	0x2000404c
   1eac8:	20003f70 	.word	0x20003f70
   1eacc:	20000bd8 	.word	0x20000bd8
   1ead0:	0001a615 	.word	0x0001a615
   1ead4:	0001a379 	.word	0x0001a379
   1ead8:	2000010c 	.word	0x2000010c
   1eadc:	0001a359 	.word	0x0001a359
   1eae0:	0001b175 	.word	0x0001b175

0001eae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1eae4:	b580      	push	{r7, lr}
   1eae6:	b082      	sub	sp, #8
   1eae8:	af00      	add	r7, sp, #0
   1eaea:	6078      	str	r0, [r7, #4]
   1eaec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1eaee:	687b      	ldr	r3, [r7, #4]
   1eaf0:	2b00      	cmp	r3, #0
   1eaf2:	d101      	bne.n	1eaf8 <vTaskPlaceOnEventList+0x14>
   1eaf4:	b672      	cpsid	i
   1eaf6:	e7fe      	b.n	1eaf6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1eaf8:	4b08      	ldr	r3, [pc, #32]	; (1eb1c <vTaskPlaceOnEventList+0x38>)
   1eafa:	681b      	ldr	r3, [r3, #0]
   1eafc:	3318      	adds	r3, #24
   1eafe:	001a      	movs	r2, r3
   1eb00:	687b      	ldr	r3, [r7, #4]
   1eb02:	0011      	movs	r1, r2
   1eb04:	0018      	movs	r0, r3
   1eb06:	4b06      	ldr	r3, [pc, #24]	; (1eb20 <vTaskPlaceOnEventList+0x3c>)
   1eb08:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1eb0a:	683b      	ldr	r3, [r7, #0]
   1eb0c:	2101      	movs	r1, #1
   1eb0e:	0018      	movs	r0, r3
   1eb10:	4b04      	ldr	r3, [pc, #16]	; (1eb24 <vTaskPlaceOnEventList+0x40>)
   1eb12:	4798      	blx	r3
}
   1eb14:	46c0      	nop			; (mov r8, r8)
   1eb16:	46bd      	mov	sp, r7
   1eb18:	b002      	add	sp, #8
   1eb1a:	bd80      	pop	{r7, pc}
   1eb1c:	20003f6c 	.word	0x20003f6c
   1eb20:	0001c187 	.word	0x0001c187
   1eb24:	0001f589 	.word	0x0001f589

0001eb28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1eb28:	b580      	push	{r7, lr}
   1eb2a:	b084      	sub	sp, #16
   1eb2c:	af00      	add	r7, sp, #0
   1eb2e:	60f8      	str	r0, [r7, #12]
   1eb30:	60b9      	str	r1, [r7, #8]
   1eb32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1eb34:	68fb      	ldr	r3, [r7, #12]
   1eb36:	2b00      	cmp	r3, #0
   1eb38:	d101      	bne.n	1eb3e <vTaskPlaceOnEventListRestricted+0x16>
   1eb3a:	b672      	cpsid	i
   1eb3c:	e7fe      	b.n	1eb3c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1eb3e:	4b28      	ldr	r3, [pc, #160]	; (1ebe0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1eb40:	681b      	ldr	r3, [r3, #0]
   1eb42:	3318      	adds	r3, #24
   1eb44:	001a      	movs	r2, r3
   1eb46:	68fb      	ldr	r3, [r7, #12]
   1eb48:	0011      	movs	r1, r2
   1eb4a:	0018      	movs	r0, r3
   1eb4c:	4b25      	ldr	r3, [pc, #148]	; (1ebe4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1eb4e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1eb50:	687b      	ldr	r3, [r7, #4]
   1eb52:	2b00      	cmp	r3, #0
   1eb54:	d002      	beq.n	1eb5c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1eb56:	2301      	movs	r3, #1
   1eb58:	425b      	negs	r3, r3
   1eb5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1eb5c:	4b20      	ldr	r3, [pc, #128]	; (1ebe0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1eb5e:	681b      	ldr	r3, [r3, #0]
   1eb60:	0018      	movs	r0, r3
   1eb62:	4b21      	ldr	r3, [pc, #132]	; (1ebe8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1eb64:	4798      	blx	r3
   1eb66:	0003      	movs	r3, r0
   1eb68:	001a      	movs	r2, r3
   1eb6a:	4b20      	ldr	r3, [pc, #128]	; (1ebec <vTaskPlaceOnEventListRestricted+0xc4>)
   1eb6c:	881b      	ldrh	r3, [r3, #0]
   1eb6e:	4013      	ands	r3, r2
   1eb70:	b29b      	uxth	r3, r3
   1eb72:	2b00      	cmp	r3, #0
   1eb74:	d011      	beq.n	1eb9a <vTaskPlaceOnEventListRestricted+0x72>
   1eb76:	4b1e      	ldr	r3, [pc, #120]	; (1ebf0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1eb78:	681a      	ldr	r2, [r3, #0]
   1eb7a:	68bb      	ldr	r3, [r7, #8]
   1eb7c:	18d3      	adds	r3, r2, r3
   1eb7e:	0019      	movs	r1, r3
   1eb80:	2088      	movs	r0, #136	; 0x88
   1eb82:	4b1c      	ldr	r3, [pc, #112]	; (1ebf4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1eb84:	4798      	blx	r3
   1eb86:	4b16      	ldr	r3, [pc, #88]	; (1ebe0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1eb88:	681b      	ldr	r3, [r3, #0]
   1eb8a:	0018      	movs	r0, r3
   1eb8c:	4b1a      	ldr	r3, [pc, #104]	; (1ebf8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1eb8e:	4798      	blx	r3
   1eb90:	0003      	movs	r3, r0
   1eb92:	b2db      	uxtb	r3, r3
   1eb94:	0018      	movs	r0, r3
   1eb96:	4b19      	ldr	r3, [pc, #100]	; (1ebfc <vTaskPlaceOnEventListRestricted+0xd4>)
   1eb98:	4798      	blx	r3
   1eb9a:	4b19      	ldr	r3, [pc, #100]	; (1ec00 <vTaskPlaceOnEventListRestricted+0xd8>)
   1eb9c:	4798      	blx	r3
   1eb9e:	0003      	movs	r3, r0
   1eba0:	0018      	movs	r0, r3
   1eba2:	4b11      	ldr	r3, [pc, #68]	; (1ebe8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1eba4:	4798      	blx	r3
   1eba6:	0003      	movs	r3, r0
   1eba8:	001a      	movs	r2, r3
   1ebaa:	4b10      	ldr	r3, [pc, #64]	; (1ebec <vTaskPlaceOnEventListRestricted+0xc4>)
   1ebac:	881b      	ldrh	r3, [r3, #0]
   1ebae:	4013      	ands	r3, r2
   1ebb0:	b29b      	uxth	r3, r3
   1ebb2:	2b00      	cmp	r3, #0
   1ebb4:	d00a      	beq.n	1ebcc <vTaskPlaceOnEventListRestricted+0xa4>
   1ebb6:	4b12      	ldr	r3, [pc, #72]	; (1ec00 <vTaskPlaceOnEventListRestricted+0xd8>)
   1ebb8:	4798      	blx	r3
   1ebba:	0003      	movs	r3, r0
   1ebbc:	0018      	movs	r0, r3
   1ebbe:	4b0e      	ldr	r3, [pc, #56]	; (1ebf8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ebc0:	4798      	blx	r3
   1ebc2:	0003      	movs	r3, r0
   1ebc4:	b2db      	uxtb	r3, r3
   1ebc6:	0018      	movs	r0, r3
   1ebc8:	4b0c      	ldr	r3, [pc, #48]	; (1ebfc <vTaskPlaceOnEventListRestricted+0xd4>)
   1ebca:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ebcc:	687a      	ldr	r2, [r7, #4]
   1ebce:	68bb      	ldr	r3, [r7, #8]
   1ebd0:	0011      	movs	r1, r2
   1ebd2:	0018      	movs	r0, r3
   1ebd4:	4b0b      	ldr	r3, [pc, #44]	; (1ec04 <vTaskPlaceOnEventListRestricted+0xdc>)
   1ebd6:	4798      	blx	r3
	}
   1ebd8:	46c0      	nop			; (mov r8, r8)
   1ebda:	46bd      	mov	sp, r7
   1ebdc:	b004      	add	sp, #16
   1ebde:	bd80      	pop	{r7, pc}
   1ebe0:	20003f6c 	.word	0x20003f6c
   1ebe4:	0001c143 	.word	0x0001c143
   1ebe8:	0001a379 	.word	0x0001a379
   1ebec:	2000010c 	.word	0x2000010c
   1ebf0:	20004048 	.word	0x20004048
   1ebf4:	0001b079 	.word	0x0001b079
   1ebf8:	0001a359 	.word	0x0001a359
   1ebfc:	0001b509 	.word	0x0001b509
   1ec00:	0001a615 	.word	0x0001a615
   1ec04:	0001f589 	.word	0x0001f589

0001ec08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ec08:	b580      	push	{r7, lr}
   1ec0a:	b084      	sub	sp, #16
   1ec0c:	af00      	add	r7, sp, #0
   1ec0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1ec10:	687b      	ldr	r3, [r7, #4]
   1ec12:	68db      	ldr	r3, [r3, #12]
   1ec14:	68db      	ldr	r3, [r3, #12]
   1ec16:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ec18:	68bb      	ldr	r3, [r7, #8]
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	d101      	bne.n	1ec22 <xTaskRemoveFromEventList+0x1a>
   1ec1e:	b672      	cpsid	i
   1ec20:	e7fe      	b.n	1ec20 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ec22:	68bb      	ldr	r3, [r7, #8]
   1ec24:	3318      	adds	r3, #24
   1ec26:	0018      	movs	r0, r3
   1ec28:	4b2a      	ldr	r3, [pc, #168]	; (1ecd4 <xTaskRemoveFromEventList+0xcc>)
   1ec2a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ec2c:	4b2a      	ldr	r3, [pc, #168]	; (1ecd8 <xTaskRemoveFromEventList+0xd0>)
   1ec2e:	681b      	ldr	r3, [r3, #0]
   1ec30:	2b00      	cmp	r3, #0
   1ec32:	d132      	bne.n	1ec9a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ec34:	68bb      	ldr	r3, [r7, #8]
   1ec36:	3304      	adds	r3, #4
   1ec38:	0018      	movs	r0, r3
   1ec3a:	4b26      	ldr	r3, [pc, #152]	; (1ecd4 <xTaskRemoveFromEventList+0xcc>)
   1ec3c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ec3e:	68bb      	ldr	r3, [r7, #8]
   1ec40:	0018      	movs	r0, r3
   1ec42:	4b26      	ldr	r3, [pc, #152]	; (1ecdc <xTaskRemoveFromEventList+0xd4>)
   1ec44:	4798      	blx	r3
   1ec46:	0003      	movs	r3, r0
   1ec48:	001a      	movs	r2, r3
   1ec4a:	4b25      	ldr	r3, [pc, #148]	; (1ece0 <xTaskRemoveFromEventList+0xd8>)
   1ec4c:	881b      	ldrh	r3, [r3, #0]
   1ec4e:	4013      	ands	r3, r2
   1ec50:	b29b      	uxth	r3, r3
   1ec52:	2b00      	cmp	r3, #0
   1ec54:	d008      	beq.n	1ec68 <xTaskRemoveFromEventList+0x60>
   1ec56:	68bb      	ldr	r3, [r7, #8]
   1ec58:	0018      	movs	r0, r3
   1ec5a:	4b22      	ldr	r3, [pc, #136]	; (1ece4 <xTaskRemoveFromEventList+0xdc>)
   1ec5c:	4798      	blx	r3
   1ec5e:	0003      	movs	r3, r0
   1ec60:	b2db      	uxtb	r3, r3
   1ec62:	0018      	movs	r0, r3
   1ec64:	4b20      	ldr	r3, [pc, #128]	; (1ece8 <xTaskRemoveFromEventList+0xe0>)
   1ec66:	4798      	blx	r3
   1ec68:	68bb      	ldr	r3, [r7, #8]
   1ec6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ec6c:	4b1f      	ldr	r3, [pc, #124]	; (1ecec <xTaskRemoveFromEventList+0xe4>)
   1ec6e:	681b      	ldr	r3, [r3, #0]
   1ec70:	429a      	cmp	r2, r3
   1ec72:	d903      	bls.n	1ec7c <xTaskRemoveFromEventList+0x74>
   1ec74:	68bb      	ldr	r3, [r7, #8]
   1ec76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ec78:	4b1c      	ldr	r3, [pc, #112]	; (1ecec <xTaskRemoveFromEventList+0xe4>)
   1ec7a:	601a      	str	r2, [r3, #0]
   1ec7c:	68bb      	ldr	r3, [r7, #8]
   1ec7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ec80:	0013      	movs	r3, r2
   1ec82:	009b      	lsls	r3, r3, #2
   1ec84:	189b      	adds	r3, r3, r2
   1ec86:	009b      	lsls	r3, r3, #2
   1ec88:	4a19      	ldr	r2, [pc, #100]	; (1ecf0 <xTaskRemoveFromEventList+0xe8>)
   1ec8a:	189a      	adds	r2, r3, r2
   1ec8c:	68bb      	ldr	r3, [r7, #8]
   1ec8e:	3304      	adds	r3, #4
   1ec90:	0019      	movs	r1, r3
   1ec92:	0010      	movs	r0, r2
   1ec94:	4b17      	ldr	r3, [pc, #92]	; (1ecf4 <xTaskRemoveFromEventList+0xec>)
   1ec96:	4798      	blx	r3
   1ec98:	e007      	b.n	1ecaa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1ec9a:	68bb      	ldr	r3, [r7, #8]
   1ec9c:	3318      	adds	r3, #24
   1ec9e:	001a      	movs	r2, r3
   1eca0:	4b15      	ldr	r3, [pc, #84]	; (1ecf8 <xTaskRemoveFromEventList+0xf0>)
   1eca2:	0011      	movs	r1, r2
   1eca4:	0018      	movs	r0, r3
   1eca6:	4b13      	ldr	r3, [pc, #76]	; (1ecf4 <xTaskRemoveFromEventList+0xec>)
   1eca8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1ecaa:	68bb      	ldr	r3, [r7, #8]
   1ecac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ecae:	4b13      	ldr	r3, [pc, #76]	; (1ecfc <xTaskRemoveFromEventList+0xf4>)
   1ecb0:	681b      	ldr	r3, [r3, #0]
   1ecb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ecb4:	429a      	cmp	r2, r3
   1ecb6:	d905      	bls.n	1ecc4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1ecb8:	2301      	movs	r3, #1
   1ecba:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1ecbc:	4b10      	ldr	r3, [pc, #64]	; (1ed00 <xTaskRemoveFromEventList+0xf8>)
   1ecbe:	2201      	movs	r2, #1
   1ecc0:	601a      	str	r2, [r3, #0]
   1ecc2:	e001      	b.n	1ecc8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1ecc4:	2300      	movs	r3, #0
   1ecc6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1ecc8:	68fb      	ldr	r3, [r7, #12]
}
   1ecca:	0018      	movs	r0, r3
   1eccc:	46bd      	mov	sp, r7
   1ecce:	b004      	add	sp, #16
   1ecd0:	bd80      	pop	{r7, pc}
   1ecd2:	46c0      	nop			; (mov r8, r8)
   1ecd4:	0001c1f3 	.word	0x0001c1f3
   1ecd8:	2000406c 	.word	0x2000406c
   1ecdc:	0001a379 	.word	0x0001a379
   1ece0:	2000010c 	.word	0x2000010c
   1ece4:	0001a359 	.word	0x0001a359
   1ece8:	0001ab29 	.word	0x0001ab29
   1ecec:	2000404c 	.word	0x2000404c
   1ecf0:	20003f70 	.word	0x20003f70
   1ecf4:	0001c143 	.word	0x0001c143
   1ecf8:	20004004 	.word	0x20004004
   1ecfc:	20003f6c 	.word	0x20003f6c
   1ed00:	20004058 	.word	0x20004058

0001ed04 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ed04:	b580      	push	{r7, lr}
   1ed06:	b082      	sub	sp, #8
   1ed08:	af00      	add	r7, sp, #0
   1ed0a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1ed0c:	687b      	ldr	r3, [r7, #4]
   1ed0e:	2b00      	cmp	r3, #0
   1ed10:	d101      	bne.n	1ed16 <vTaskSetTimeOutState+0x12>
   1ed12:	b672      	cpsid	i
   1ed14:	e7fe      	b.n	1ed14 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1ed16:	4b08      	ldr	r3, [pc, #32]	; (1ed38 <vTaskSetTimeOutState+0x34>)
   1ed18:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ed1a:	4b08      	ldr	r3, [pc, #32]	; (1ed3c <vTaskSetTimeOutState+0x38>)
   1ed1c:	681a      	ldr	r2, [r3, #0]
   1ed1e:	687b      	ldr	r3, [r7, #4]
   1ed20:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1ed22:	4b07      	ldr	r3, [pc, #28]	; (1ed40 <vTaskSetTimeOutState+0x3c>)
   1ed24:	681a      	ldr	r2, [r3, #0]
   1ed26:	687b      	ldr	r3, [r7, #4]
   1ed28:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1ed2a:	4b06      	ldr	r3, [pc, #24]	; (1ed44 <vTaskSetTimeOutState+0x40>)
   1ed2c:	4798      	blx	r3
}
   1ed2e:	46c0      	nop			; (mov r8, r8)
   1ed30:	46bd      	mov	sp, r7
   1ed32:	b002      	add	sp, #8
   1ed34:	bd80      	pop	{r7, pc}
   1ed36:	46c0      	nop			; (mov r8, r8)
   1ed38:	0001c379 	.word	0x0001c379
   1ed3c:	2000405c 	.word	0x2000405c
   1ed40:	20004048 	.word	0x20004048
   1ed44:	0001c39d 	.word	0x0001c39d

0001ed48 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ed48:	b580      	push	{r7, lr}
   1ed4a:	b082      	sub	sp, #8
   1ed4c:	af00      	add	r7, sp, #0
   1ed4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ed50:	4b05      	ldr	r3, [pc, #20]	; (1ed68 <vTaskInternalSetTimeOutState+0x20>)
   1ed52:	681a      	ldr	r2, [r3, #0]
   1ed54:	687b      	ldr	r3, [r7, #4]
   1ed56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1ed58:	4b04      	ldr	r3, [pc, #16]	; (1ed6c <vTaskInternalSetTimeOutState+0x24>)
   1ed5a:	681a      	ldr	r2, [r3, #0]
   1ed5c:	687b      	ldr	r3, [r7, #4]
   1ed5e:	605a      	str	r2, [r3, #4]
}
   1ed60:	46c0      	nop			; (mov r8, r8)
   1ed62:	46bd      	mov	sp, r7
   1ed64:	b002      	add	sp, #8
   1ed66:	bd80      	pop	{r7, pc}
   1ed68:	2000405c 	.word	0x2000405c
   1ed6c:	20004048 	.word	0x20004048

0001ed70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1ed70:	b580      	push	{r7, lr}
   1ed72:	b086      	sub	sp, #24
   1ed74:	af00      	add	r7, sp, #0
   1ed76:	6078      	str	r0, [r7, #4]
   1ed78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1ed7a:	687b      	ldr	r3, [r7, #4]
   1ed7c:	2b00      	cmp	r3, #0
   1ed7e:	d101      	bne.n	1ed84 <xTaskCheckForTimeOut+0x14>
   1ed80:	b672      	cpsid	i
   1ed82:	e7fe      	b.n	1ed82 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1ed84:	683b      	ldr	r3, [r7, #0]
   1ed86:	2b00      	cmp	r3, #0
   1ed88:	d101      	bne.n	1ed8e <xTaskCheckForTimeOut+0x1e>
   1ed8a:	b672      	cpsid	i
   1ed8c:	e7fe      	b.n	1ed8c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1ed8e:	4b1e      	ldr	r3, [pc, #120]	; (1ee08 <xTaskCheckForTimeOut+0x98>)
   1ed90:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1ed92:	4b1e      	ldr	r3, [pc, #120]	; (1ee0c <xTaskCheckForTimeOut+0x9c>)
   1ed94:	681b      	ldr	r3, [r3, #0]
   1ed96:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1ed98:	687b      	ldr	r3, [r7, #4]
   1ed9a:	685b      	ldr	r3, [r3, #4]
   1ed9c:	693a      	ldr	r2, [r7, #16]
   1ed9e:	1ad3      	subs	r3, r2, r3
   1eda0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1eda2:	683b      	ldr	r3, [r7, #0]
   1eda4:	681b      	ldr	r3, [r3, #0]
   1eda6:	3301      	adds	r3, #1
   1eda8:	d102      	bne.n	1edb0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1edaa:	2300      	movs	r3, #0
   1edac:	617b      	str	r3, [r7, #20]
   1edae:	e024      	b.n	1edfa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1edb0:	687b      	ldr	r3, [r7, #4]
   1edb2:	681a      	ldr	r2, [r3, #0]
   1edb4:	4b16      	ldr	r3, [pc, #88]	; (1ee10 <xTaskCheckForTimeOut+0xa0>)
   1edb6:	681b      	ldr	r3, [r3, #0]
   1edb8:	429a      	cmp	r2, r3
   1edba:	d007      	beq.n	1edcc <xTaskCheckForTimeOut+0x5c>
   1edbc:	687b      	ldr	r3, [r7, #4]
   1edbe:	685a      	ldr	r2, [r3, #4]
   1edc0:	693b      	ldr	r3, [r7, #16]
   1edc2:	429a      	cmp	r2, r3
   1edc4:	d802      	bhi.n	1edcc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1edc6:	2301      	movs	r3, #1
   1edc8:	617b      	str	r3, [r7, #20]
   1edca:	e016      	b.n	1edfa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1edcc:	683b      	ldr	r3, [r7, #0]
   1edce:	681a      	ldr	r2, [r3, #0]
   1edd0:	68fb      	ldr	r3, [r7, #12]
   1edd2:	429a      	cmp	r2, r3
   1edd4:	d90c      	bls.n	1edf0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1edd6:	683b      	ldr	r3, [r7, #0]
   1edd8:	681a      	ldr	r2, [r3, #0]
   1edda:	68fb      	ldr	r3, [r7, #12]
   1eddc:	1ad2      	subs	r2, r2, r3
   1edde:	683b      	ldr	r3, [r7, #0]
   1ede0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1ede2:	687b      	ldr	r3, [r7, #4]
   1ede4:	0018      	movs	r0, r3
   1ede6:	4b0b      	ldr	r3, [pc, #44]	; (1ee14 <xTaskCheckForTimeOut+0xa4>)
   1ede8:	4798      	blx	r3
			xReturn = pdFALSE;
   1edea:	2300      	movs	r3, #0
   1edec:	617b      	str	r3, [r7, #20]
   1edee:	e004      	b.n	1edfa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1edf0:	683b      	ldr	r3, [r7, #0]
   1edf2:	2200      	movs	r2, #0
   1edf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1edf6:	2301      	movs	r3, #1
   1edf8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1edfa:	4b07      	ldr	r3, [pc, #28]	; (1ee18 <xTaskCheckForTimeOut+0xa8>)
   1edfc:	4798      	blx	r3

	return xReturn;
   1edfe:	697b      	ldr	r3, [r7, #20]
}
   1ee00:	0018      	movs	r0, r3
   1ee02:	46bd      	mov	sp, r7
   1ee04:	b006      	add	sp, #24
   1ee06:	bd80      	pop	{r7, pc}
   1ee08:	0001c379 	.word	0x0001c379
   1ee0c:	20004048 	.word	0x20004048
   1ee10:	2000405c 	.word	0x2000405c
   1ee14:	0001ed49 	.word	0x0001ed49
   1ee18:	0001c39d 	.word	0x0001c39d

0001ee1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1ee1c:	b580      	push	{r7, lr}
   1ee1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1ee20:	4b02      	ldr	r3, [pc, #8]	; (1ee2c <vTaskMissedYield+0x10>)
   1ee22:	2201      	movs	r2, #1
   1ee24:	601a      	str	r2, [r3, #0]
}
   1ee26:	46c0      	nop			; (mov r8, r8)
   1ee28:	46bd      	mov	sp, r7
   1ee2a:	bd80      	pop	{r7, pc}
   1ee2c:	20004058 	.word	0x20004058

0001ee30 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1ee30:	b580      	push	{r7, lr}
   1ee32:	b084      	sub	sp, #16
   1ee34:	af00      	add	r7, sp, #0
   1ee36:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1ee38:	687b      	ldr	r3, [r7, #4]
   1ee3a:	2b00      	cmp	r3, #0
   1ee3c:	d005      	beq.n	1ee4a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1ee3e:	687b      	ldr	r3, [r7, #4]
   1ee40:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1ee42:	68bb      	ldr	r3, [r7, #8]
   1ee44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ee46:	60fb      	str	r3, [r7, #12]
   1ee48:	e001      	b.n	1ee4e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1ee4a:	2300      	movs	r3, #0
   1ee4c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1ee4e:	68fb      	ldr	r3, [r7, #12]
	}
   1ee50:	0018      	movs	r0, r3
   1ee52:	46bd      	mov	sp, r7
   1ee54:	b004      	add	sp, #16
   1ee56:	bd80      	pop	{r7, pc}

0001ee58 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1ee58:	b580      	push	{r7, lr}
   1ee5a:	b084      	sub	sp, #16
   1ee5c:	af00      	add	r7, sp, #0
   1ee5e:	6078      	str	r0, [r7, #4]
   1ee60:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1ee62:	687b      	ldr	r3, [r7, #4]
   1ee64:	2b00      	cmp	r3, #0
   1ee66:	d004      	beq.n	1ee72 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1ee68:	687b      	ldr	r3, [r7, #4]
   1ee6a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1ee6c:	68fb      	ldr	r3, [r7, #12]
   1ee6e:	683a      	ldr	r2, [r7, #0]
   1ee70:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1ee72:	46c0      	nop			; (mov r8, r8)
   1ee74:	46bd      	mov	sp, r7
   1ee76:	b004      	add	sp, #16
   1ee78:	bd80      	pop	{r7, pc}
	...

0001ee7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1ee7c:	b580      	push	{r7, lr}
   1ee7e:	b082      	sub	sp, #8
   1ee80:	af00      	add	r7, sp, #0
   1ee82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1ee84:	4b04      	ldr	r3, [pc, #16]	; (1ee98 <prvIdleTask+0x1c>)
   1ee86:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1ee88:	4b04      	ldr	r3, [pc, #16]	; (1ee9c <prvIdleTask+0x20>)
   1ee8a:	681b      	ldr	r3, [r3, #0]
   1ee8c:	2b01      	cmp	r3, #1
   1ee8e:	d9f9      	bls.n	1ee84 <prvIdleTask+0x8>
			{
				taskYIELD();
   1ee90:	4b03      	ldr	r3, [pc, #12]	; (1eea0 <prvIdleTask+0x24>)
   1ee92:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1ee94:	e7f6      	b.n	1ee84 <prvIdleTask+0x8>
   1ee96:	46c0      	nop			; (mov r8, r8)
   1ee98:	0001ef31 	.word	0x0001ef31
   1ee9c:	20003f70 	.word	0x20003f70
   1eea0:	0001c361 	.word	0x0001c361

0001eea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1eea4:	b580      	push	{r7, lr}
   1eea6:	b082      	sub	sp, #8
   1eea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1eeaa:	2300      	movs	r3, #0
   1eeac:	607b      	str	r3, [r7, #4]
   1eeae:	e00c      	b.n	1eeca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1eeb0:	687a      	ldr	r2, [r7, #4]
   1eeb2:	0013      	movs	r3, r2
   1eeb4:	009b      	lsls	r3, r3, #2
   1eeb6:	189b      	adds	r3, r3, r2
   1eeb8:	009b      	lsls	r3, r3, #2
   1eeba:	4a14      	ldr	r2, [pc, #80]	; (1ef0c <prvInitialiseTaskLists+0x68>)
   1eebc:	189b      	adds	r3, r3, r2
   1eebe:	0018      	movs	r0, r3
   1eec0:	4b13      	ldr	r3, [pc, #76]	; (1ef10 <prvInitialiseTaskLists+0x6c>)
   1eec2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1eec4:	687b      	ldr	r3, [r7, #4]
   1eec6:	3301      	adds	r3, #1
   1eec8:	607b      	str	r3, [r7, #4]
   1eeca:	687b      	ldr	r3, [r7, #4]
   1eecc:	2b04      	cmp	r3, #4
   1eece:	d9ef      	bls.n	1eeb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1eed0:	4b10      	ldr	r3, [pc, #64]	; (1ef14 <prvInitialiseTaskLists+0x70>)
   1eed2:	0018      	movs	r0, r3
   1eed4:	4b0e      	ldr	r3, [pc, #56]	; (1ef10 <prvInitialiseTaskLists+0x6c>)
   1eed6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1eed8:	4b0f      	ldr	r3, [pc, #60]	; (1ef18 <prvInitialiseTaskLists+0x74>)
   1eeda:	0018      	movs	r0, r3
   1eedc:	4b0c      	ldr	r3, [pc, #48]	; (1ef10 <prvInitialiseTaskLists+0x6c>)
   1eede:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1eee0:	4b0e      	ldr	r3, [pc, #56]	; (1ef1c <prvInitialiseTaskLists+0x78>)
   1eee2:	0018      	movs	r0, r3
   1eee4:	4b0a      	ldr	r3, [pc, #40]	; (1ef10 <prvInitialiseTaskLists+0x6c>)
   1eee6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1eee8:	4b0d      	ldr	r3, [pc, #52]	; (1ef20 <prvInitialiseTaskLists+0x7c>)
   1eeea:	0018      	movs	r0, r3
   1eeec:	4b08      	ldr	r3, [pc, #32]	; (1ef10 <prvInitialiseTaskLists+0x6c>)
   1eeee:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1eef0:	4b0c      	ldr	r3, [pc, #48]	; (1ef24 <prvInitialiseTaskLists+0x80>)
   1eef2:	0018      	movs	r0, r3
   1eef4:	4b06      	ldr	r3, [pc, #24]	; (1ef10 <prvInitialiseTaskLists+0x6c>)
   1eef6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1eef8:	4b0b      	ldr	r3, [pc, #44]	; (1ef28 <prvInitialiseTaskLists+0x84>)
   1eefa:	4a06      	ldr	r2, [pc, #24]	; (1ef14 <prvInitialiseTaskLists+0x70>)
   1eefc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1eefe:	4b0b      	ldr	r3, [pc, #44]	; (1ef2c <prvInitialiseTaskLists+0x88>)
   1ef00:	4a05      	ldr	r2, [pc, #20]	; (1ef18 <prvInitialiseTaskLists+0x74>)
   1ef02:	601a      	str	r2, [r3, #0]
}
   1ef04:	46c0      	nop			; (mov r8, r8)
   1ef06:	46bd      	mov	sp, r7
   1ef08:	b002      	add	sp, #8
   1ef0a:	bd80      	pop	{r7, pc}
   1ef0c:	20003f70 	.word	0x20003f70
   1ef10:	0001c0f1 	.word	0x0001c0f1
   1ef14:	20003fd4 	.word	0x20003fd4
   1ef18:	20003fe8 	.word	0x20003fe8
   1ef1c:	20004004 	.word	0x20004004
   1ef20:	20004018 	.word	0x20004018
   1ef24:	20004030 	.word	0x20004030
   1ef28:	20003ffc 	.word	0x20003ffc
   1ef2c:	20004000 	.word	0x20004000

0001ef30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1ef30:	b580      	push	{r7, lr}
   1ef32:	b082      	sub	sp, #8
   1ef34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1ef36:	e01a      	b.n	1ef6e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1ef38:	4b11      	ldr	r3, [pc, #68]	; (1ef80 <prvCheckTasksWaitingTermination+0x50>)
   1ef3a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1ef3c:	4b11      	ldr	r3, [pc, #68]	; (1ef84 <prvCheckTasksWaitingTermination+0x54>)
   1ef3e:	68db      	ldr	r3, [r3, #12]
   1ef40:	68db      	ldr	r3, [r3, #12]
   1ef42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ef44:	687b      	ldr	r3, [r7, #4]
   1ef46:	3304      	adds	r3, #4
   1ef48:	0018      	movs	r0, r3
   1ef4a:	4b0f      	ldr	r3, [pc, #60]	; (1ef88 <prvCheckTasksWaitingTermination+0x58>)
   1ef4c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1ef4e:	4b0f      	ldr	r3, [pc, #60]	; (1ef8c <prvCheckTasksWaitingTermination+0x5c>)
   1ef50:	681b      	ldr	r3, [r3, #0]
   1ef52:	1e5a      	subs	r2, r3, #1
   1ef54:	4b0d      	ldr	r3, [pc, #52]	; (1ef8c <prvCheckTasksWaitingTermination+0x5c>)
   1ef56:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1ef58:	4b0d      	ldr	r3, [pc, #52]	; (1ef90 <prvCheckTasksWaitingTermination+0x60>)
   1ef5a:	681b      	ldr	r3, [r3, #0]
   1ef5c:	1e5a      	subs	r2, r3, #1
   1ef5e:	4b0c      	ldr	r3, [pc, #48]	; (1ef90 <prvCheckTasksWaitingTermination+0x60>)
   1ef60:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1ef62:	4b0c      	ldr	r3, [pc, #48]	; (1ef94 <prvCheckTasksWaitingTermination+0x64>)
   1ef64:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1ef66:	687b      	ldr	r3, [r7, #4]
   1ef68:	0018      	movs	r0, r3
   1ef6a:	4b0b      	ldr	r3, [pc, #44]	; (1ef98 <prvCheckTasksWaitingTermination+0x68>)
   1ef6c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1ef6e:	4b08      	ldr	r3, [pc, #32]	; (1ef90 <prvCheckTasksWaitingTermination+0x60>)
   1ef70:	681b      	ldr	r3, [r3, #0]
   1ef72:	2b00      	cmp	r3, #0
   1ef74:	d1e0      	bne.n	1ef38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1ef76:	46c0      	nop			; (mov r8, r8)
   1ef78:	46bd      	mov	sp, r7
   1ef7a:	b002      	add	sp, #8
   1ef7c:	bd80      	pop	{r7, pc}
   1ef7e:	46c0      	nop			; (mov r8, r8)
   1ef80:	0001c379 	.word	0x0001c379
   1ef84:	20004018 	.word	0x20004018
   1ef88:	0001c1f3 	.word	0x0001c1f3
   1ef8c:	20004044 	.word	0x20004044
   1ef90:	2000402c 	.word	0x2000402c
   1ef94:	0001c39d 	.word	0x0001c39d
   1ef98:	0001f00d 	.word	0x0001f00d

0001ef9c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1ef9c:	b580      	push	{r7, lr}
   1ef9e:	b084      	sub	sp, #16
   1efa0:	af00      	add	r7, sp, #0
   1efa2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1efa4:	2300      	movs	r3, #0
   1efa6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1efa8:	e005      	b.n	1efb6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1efaa:	687b      	ldr	r3, [r7, #4]
   1efac:	3301      	adds	r3, #1
   1efae:	607b      	str	r3, [r7, #4]
			ulCount++;
   1efb0:	68fb      	ldr	r3, [r7, #12]
   1efb2:	3301      	adds	r3, #1
   1efb4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1efb6:	687b      	ldr	r3, [r7, #4]
   1efb8:	781b      	ldrb	r3, [r3, #0]
   1efba:	2ba5      	cmp	r3, #165	; 0xa5
   1efbc:	d0f5      	beq.n	1efaa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1efbe:	68fb      	ldr	r3, [r7, #12]
   1efc0:	089b      	lsrs	r3, r3, #2
   1efc2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1efc4:	68fb      	ldr	r3, [r7, #12]
   1efc6:	b29b      	uxth	r3, r3
	}
   1efc8:	0018      	movs	r0, r3
   1efca:	46bd      	mov	sp, r7
   1efcc:	b004      	add	sp, #16
   1efce:	bd80      	pop	{r7, pc}

0001efd0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1efd0:	b580      	push	{r7, lr}
   1efd2:	b086      	sub	sp, #24
   1efd4:	af00      	add	r7, sp, #0
   1efd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1efd8:	687b      	ldr	r3, [r7, #4]
   1efda:	2b00      	cmp	r3, #0
   1efdc:	d102      	bne.n	1efe4 <uxTaskGetStackHighWaterMark+0x14>
   1efde:	4b09      	ldr	r3, [pc, #36]	; (1f004 <uxTaskGetStackHighWaterMark+0x34>)
   1efe0:	681b      	ldr	r3, [r3, #0]
   1efe2:	e000      	b.n	1efe6 <uxTaskGetStackHighWaterMark+0x16>
   1efe4:	687b      	ldr	r3, [r7, #4]
   1efe6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1efe8:	697b      	ldr	r3, [r7, #20]
   1efea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1efec:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1efee:	693b      	ldr	r3, [r7, #16]
   1eff0:	0018      	movs	r0, r3
   1eff2:	4b05      	ldr	r3, [pc, #20]	; (1f008 <uxTaskGetStackHighWaterMark+0x38>)
   1eff4:	4798      	blx	r3
   1eff6:	0003      	movs	r3, r0
   1eff8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1effa:	68fb      	ldr	r3, [r7, #12]
	}
   1effc:	0018      	movs	r0, r3
   1effe:	46bd      	mov	sp, r7
   1f000:	b006      	add	sp, #24
   1f002:	bd80      	pop	{r7, pc}
   1f004:	20003f6c 	.word	0x20003f6c
   1f008:	0001ef9d 	.word	0x0001ef9d

0001f00c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1f00c:	b580      	push	{r7, lr}
   1f00e:	b082      	sub	sp, #8
   1f010:	af00      	add	r7, sp, #0
   1f012:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1f014:	687b      	ldr	r3, [r7, #4]
   1f016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f018:	0018      	movs	r0, r3
   1f01a:	4b05      	ldr	r3, [pc, #20]	; (1f030 <prvDeleteTCB+0x24>)
   1f01c:	4798      	blx	r3
			vPortFree( pxTCB );
   1f01e:	687b      	ldr	r3, [r7, #4]
   1f020:	0018      	movs	r0, r3
   1f022:	4b03      	ldr	r3, [pc, #12]	; (1f030 <prvDeleteTCB+0x24>)
   1f024:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1f026:	46c0      	nop			; (mov r8, r8)
   1f028:	46bd      	mov	sp, r7
   1f02a:	b002      	add	sp, #8
   1f02c:	bd80      	pop	{r7, pc}
   1f02e:	46c0      	nop			; (mov r8, r8)
   1f030:	0001c575 	.word	0x0001c575

0001f034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1f034:	b580      	push	{r7, lr}
   1f036:	b082      	sub	sp, #8
   1f038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f03a:	4b0e      	ldr	r3, [pc, #56]	; (1f074 <prvResetNextTaskUnblockTime+0x40>)
   1f03c:	681b      	ldr	r3, [r3, #0]
   1f03e:	681b      	ldr	r3, [r3, #0]
   1f040:	2b00      	cmp	r3, #0
   1f042:	d101      	bne.n	1f048 <prvResetNextTaskUnblockTime+0x14>
   1f044:	2301      	movs	r3, #1
   1f046:	e000      	b.n	1f04a <prvResetNextTaskUnblockTime+0x16>
   1f048:	2300      	movs	r3, #0
   1f04a:	2b00      	cmp	r3, #0
   1f04c:	d004      	beq.n	1f058 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1f04e:	4b0a      	ldr	r3, [pc, #40]	; (1f078 <prvResetNextTaskUnblockTime+0x44>)
   1f050:	2201      	movs	r2, #1
   1f052:	4252      	negs	r2, r2
   1f054:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1f056:	e008      	b.n	1f06a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f058:	4b06      	ldr	r3, [pc, #24]	; (1f074 <prvResetNextTaskUnblockTime+0x40>)
   1f05a:	681b      	ldr	r3, [r3, #0]
   1f05c:	68db      	ldr	r3, [r3, #12]
   1f05e:	68db      	ldr	r3, [r3, #12]
   1f060:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1f062:	687b      	ldr	r3, [r7, #4]
   1f064:	685a      	ldr	r2, [r3, #4]
   1f066:	4b04      	ldr	r3, [pc, #16]	; (1f078 <prvResetNextTaskUnblockTime+0x44>)
   1f068:	601a      	str	r2, [r3, #0]
}
   1f06a:	46c0      	nop			; (mov r8, r8)
   1f06c:	46bd      	mov	sp, r7
   1f06e:	b002      	add	sp, #8
   1f070:	bd80      	pop	{r7, pc}
   1f072:	46c0      	nop			; (mov r8, r8)
   1f074:	20003ffc 	.word	0x20003ffc
   1f078:	20004064 	.word	0x20004064

0001f07c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1f07c:	b580      	push	{r7, lr}
   1f07e:	b082      	sub	sp, #8
   1f080:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1f082:	4b04      	ldr	r3, [pc, #16]	; (1f094 <xTaskGetCurrentTaskHandle+0x18>)
   1f084:	681b      	ldr	r3, [r3, #0]
   1f086:	607b      	str	r3, [r7, #4]

		return xReturn;
   1f088:	687b      	ldr	r3, [r7, #4]
	}
   1f08a:	0018      	movs	r0, r3
   1f08c:	46bd      	mov	sp, r7
   1f08e:	b002      	add	sp, #8
   1f090:	bd80      	pop	{r7, pc}
   1f092:	46c0      	nop			; (mov r8, r8)
   1f094:	20003f6c 	.word	0x20003f6c

0001f098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1f098:	b580      	push	{r7, lr}
   1f09a:	b082      	sub	sp, #8
   1f09c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1f09e:	4b0a      	ldr	r3, [pc, #40]	; (1f0c8 <xTaskGetSchedulerState+0x30>)
   1f0a0:	681b      	ldr	r3, [r3, #0]
   1f0a2:	2b00      	cmp	r3, #0
   1f0a4:	d102      	bne.n	1f0ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1f0a6:	2301      	movs	r3, #1
   1f0a8:	607b      	str	r3, [r7, #4]
   1f0aa:	e008      	b.n	1f0be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f0ac:	4b07      	ldr	r3, [pc, #28]	; (1f0cc <xTaskGetSchedulerState+0x34>)
   1f0ae:	681b      	ldr	r3, [r3, #0]
   1f0b0:	2b00      	cmp	r3, #0
   1f0b2:	d102      	bne.n	1f0ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1f0b4:	2302      	movs	r3, #2
   1f0b6:	607b      	str	r3, [r7, #4]
   1f0b8:	e001      	b.n	1f0be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1f0ba:	2300      	movs	r3, #0
   1f0bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1f0be:	687b      	ldr	r3, [r7, #4]
	}
   1f0c0:	0018      	movs	r0, r3
   1f0c2:	46bd      	mov	sp, r7
   1f0c4:	b002      	add	sp, #8
   1f0c6:	bd80      	pop	{r7, pc}
   1f0c8:	20004050 	.word	0x20004050
   1f0cc:	2000406c 	.word	0x2000406c

0001f0d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1f0d0:	b590      	push	{r4, r7, lr}
   1f0d2:	b085      	sub	sp, #20
   1f0d4:	af00      	add	r7, sp, #0
   1f0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1f0d8:	687b      	ldr	r3, [r7, #4]
   1f0da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f0dc:	2300      	movs	r3, #0
   1f0de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1f0e0:	687b      	ldr	r3, [r7, #4]
   1f0e2:	2b00      	cmp	r3, #0
   1f0e4:	d100      	bne.n	1f0e8 <xTaskPriorityInherit+0x18>
   1f0e6:	e09d      	b.n	1f224 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1f0e8:	68bb      	ldr	r3, [r7, #8]
   1f0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0ec:	4b50      	ldr	r3, [pc, #320]	; (1f230 <xTaskPriorityInherit+0x160>)
   1f0ee:	681b      	ldr	r3, [r3, #0]
   1f0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f0f2:	429a      	cmp	r2, r3
   1f0f4:	d300      	bcc.n	1f0f8 <xTaskPriorityInherit+0x28>
   1f0f6:	e08c      	b.n	1f212 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f0f8:	68bb      	ldr	r3, [r7, #8]
   1f0fa:	699b      	ldr	r3, [r3, #24]
   1f0fc:	2b00      	cmp	r3, #0
   1f0fe:	db06      	blt.n	1f10e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f100:	4b4b      	ldr	r3, [pc, #300]	; (1f230 <xTaskPriorityInherit+0x160>)
   1f102:	681b      	ldr	r3, [r3, #0]
   1f104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f106:	2205      	movs	r2, #5
   1f108:	1ad2      	subs	r2, r2, r3
   1f10a:	68bb      	ldr	r3, [r7, #8]
   1f10c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1f10e:	68bb      	ldr	r3, [r7, #8]
   1f110:	6959      	ldr	r1, [r3, #20]
   1f112:	68bb      	ldr	r3, [r7, #8]
   1f114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f116:	0013      	movs	r3, r2
   1f118:	009b      	lsls	r3, r3, #2
   1f11a:	189b      	adds	r3, r3, r2
   1f11c:	009b      	lsls	r3, r3, #2
   1f11e:	4a45      	ldr	r2, [pc, #276]	; (1f234 <xTaskPriorityInherit+0x164>)
   1f120:	189b      	adds	r3, r3, r2
   1f122:	4299      	cmp	r1, r3
   1f124:	d101      	bne.n	1f12a <xTaskPriorityInherit+0x5a>
   1f126:	2301      	movs	r3, #1
   1f128:	e000      	b.n	1f12c <xTaskPriorityInherit+0x5c>
   1f12a:	2300      	movs	r3, #0
   1f12c:	2b00      	cmp	r3, #0
   1f12e:	d037      	beq.n	1f1a0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f130:	68bb      	ldr	r3, [r7, #8]
   1f132:	3304      	adds	r3, #4
   1f134:	0018      	movs	r0, r3
   1f136:	4b40      	ldr	r3, [pc, #256]	; (1f238 <xTaskPriorityInherit+0x168>)
   1f138:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f13a:	4b3d      	ldr	r3, [pc, #244]	; (1f230 <xTaskPriorityInherit+0x160>)
   1f13c:	681b      	ldr	r3, [r3, #0]
   1f13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f140:	68bb      	ldr	r3, [r7, #8]
   1f142:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1f144:	68bb      	ldr	r3, [r7, #8]
   1f146:	0018      	movs	r0, r3
   1f148:	4b3c      	ldr	r3, [pc, #240]	; (1f23c <xTaskPriorityInherit+0x16c>)
   1f14a:	4798      	blx	r3
   1f14c:	0003      	movs	r3, r0
   1f14e:	001a      	movs	r2, r3
   1f150:	4b3b      	ldr	r3, [pc, #236]	; (1f240 <xTaskPriorityInherit+0x170>)
   1f152:	881b      	ldrh	r3, [r3, #0]
   1f154:	4013      	ands	r3, r2
   1f156:	b29b      	uxth	r3, r3
   1f158:	2b00      	cmp	r3, #0
   1f15a:	d008      	beq.n	1f16e <xTaskPriorityInherit+0x9e>
   1f15c:	68bb      	ldr	r3, [r7, #8]
   1f15e:	0018      	movs	r0, r3
   1f160:	4b38      	ldr	r3, [pc, #224]	; (1f244 <xTaskPriorityInherit+0x174>)
   1f162:	4798      	blx	r3
   1f164:	0003      	movs	r3, r0
   1f166:	b2db      	uxtb	r3, r3
   1f168:	0018      	movs	r0, r3
   1f16a:	4b37      	ldr	r3, [pc, #220]	; (1f248 <xTaskPriorityInherit+0x178>)
   1f16c:	4798      	blx	r3
   1f16e:	68bb      	ldr	r3, [r7, #8]
   1f170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f172:	4b36      	ldr	r3, [pc, #216]	; (1f24c <xTaskPriorityInherit+0x17c>)
   1f174:	681b      	ldr	r3, [r3, #0]
   1f176:	429a      	cmp	r2, r3
   1f178:	d903      	bls.n	1f182 <xTaskPriorityInherit+0xb2>
   1f17a:	68bb      	ldr	r3, [r7, #8]
   1f17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f17e:	4b33      	ldr	r3, [pc, #204]	; (1f24c <xTaskPriorityInherit+0x17c>)
   1f180:	601a      	str	r2, [r3, #0]
   1f182:	68bb      	ldr	r3, [r7, #8]
   1f184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f186:	0013      	movs	r3, r2
   1f188:	009b      	lsls	r3, r3, #2
   1f18a:	189b      	adds	r3, r3, r2
   1f18c:	009b      	lsls	r3, r3, #2
   1f18e:	4a29      	ldr	r2, [pc, #164]	; (1f234 <xTaskPriorityInherit+0x164>)
   1f190:	189a      	adds	r2, r3, r2
   1f192:	68bb      	ldr	r3, [r7, #8]
   1f194:	3304      	adds	r3, #4
   1f196:	0019      	movs	r1, r3
   1f198:	0010      	movs	r0, r2
   1f19a:	4b2d      	ldr	r3, [pc, #180]	; (1f250 <xTaskPriorityInherit+0x180>)
   1f19c:	4798      	blx	r3
   1f19e:	e004      	b.n	1f1aa <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f1a0:	4b23      	ldr	r3, [pc, #140]	; (1f230 <xTaskPriorityInherit+0x160>)
   1f1a2:	681b      	ldr	r3, [r3, #0]
   1f1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f1a6:	68bb      	ldr	r3, [r7, #8]
   1f1a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1f1aa:	68bb      	ldr	r3, [r7, #8]
   1f1ac:	0018      	movs	r0, r3
   1f1ae:	4b23      	ldr	r3, [pc, #140]	; (1f23c <xTaskPriorityInherit+0x16c>)
   1f1b0:	4798      	blx	r3
   1f1b2:	0003      	movs	r3, r0
   1f1b4:	001a      	movs	r2, r3
   1f1b6:	4b22      	ldr	r3, [pc, #136]	; (1f240 <xTaskPriorityInherit+0x170>)
   1f1b8:	881b      	ldrh	r3, [r3, #0]
   1f1ba:	4013      	ands	r3, r2
   1f1bc:	b29b      	uxth	r3, r3
   1f1be:	2b00      	cmp	r3, #0
   1f1c0:	d024      	beq.n	1f20c <xTaskPriorityInherit+0x13c>
   1f1c2:	68bb      	ldr	r3, [r7, #8]
   1f1c4:	0018      	movs	r0, r3
   1f1c6:	4b1f      	ldr	r3, [pc, #124]	; (1f244 <xTaskPriorityInherit+0x174>)
   1f1c8:	4798      	blx	r3
   1f1ca:	0003      	movs	r3, r0
   1f1cc:	b2db      	uxtb	r3, r3
   1f1ce:	001c      	movs	r4, r3
   1f1d0:	68bb      	ldr	r3, [r7, #8]
   1f1d2:	0018      	movs	r0, r3
   1f1d4:	4b1b      	ldr	r3, [pc, #108]	; (1f244 <xTaskPriorityInherit+0x174>)
   1f1d6:	4798      	blx	r3
   1f1d8:	0003      	movs	r3, r0
   1f1da:	b2db      	uxtb	r3, r3
   1f1dc:	0019      	movs	r1, r3
   1f1de:	2003      	movs	r0, #3
   1f1e0:	4b1c      	ldr	r3, [pc, #112]	; (1f254 <xTaskPriorityInherit+0x184>)
   1f1e2:	4798      	blx	r3
   1f1e4:	0003      	movs	r3, r0
   1f1e6:	0022      	movs	r2, r4
   1f1e8:	2103      	movs	r1, #3
   1f1ea:	208e      	movs	r0, #142	; 0x8e
   1f1ec:	4c1a      	ldr	r4, [pc, #104]	; (1f258 <xTaskPriorityInherit+0x188>)
   1f1ee:	47a0      	blx	r4
   1f1f0:	68bb      	ldr	r3, [r7, #8]
   1f1f2:	0018      	movs	r0, r3
   1f1f4:	4b13      	ldr	r3, [pc, #76]	; (1f244 <xTaskPriorityInherit+0x174>)
   1f1f6:	4798      	blx	r3
   1f1f8:	0003      	movs	r3, r0
   1f1fa:	b2d9      	uxtb	r1, r3
   1f1fc:	4b0c      	ldr	r3, [pc, #48]	; (1f230 <xTaskPriorityInherit+0x160>)
   1f1fe:	681b      	ldr	r3, [r3, #0]
   1f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f202:	b2db      	uxtb	r3, r3
   1f204:	001a      	movs	r2, r3
   1f206:	2003      	movs	r0, #3
   1f208:	4b14      	ldr	r3, [pc, #80]	; (1f25c <xTaskPriorityInherit+0x18c>)
   1f20a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1f20c:	2301      	movs	r3, #1
   1f20e:	60fb      	str	r3, [r7, #12]
   1f210:	e008      	b.n	1f224 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1f212:	68bb      	ldr	r3, [r7, #8]
   1f214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f216:	4b06      	ldr	r3, [pc, #24]	; (1f230 <xTaskPriorityInherit+0x160>)
   1f218:	681b      	ldr	r3, [r3, #0]
   1f21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f21c:	429a      	cmp	r2, r3
   1f21e:	d201      	bcs.n	1f224 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1f220:	2301      	movs	r3, #1
   1f222:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f224:	68fb      	ldr	r3, [r7, #12]
	}
   1f226:	0018      	movs	r0, r3
   1f228:	46bd      	mov	sp, r7
   1f22a:	b005      	add	sp, #20
   1f22c:	bd90      	pop	{r4, r7, pc}
   1f22e:	46c0      	nop			; (mov r8, r8)
   1f230:	20003f6c 	.word	0x20003f6c
   1f234:	20003f70 	.word	0x20003f70
   1f238:	0001c1f3 	.word	0x0001c1f3
   1f23c:	0001a379 	.word	0x0001a379
   1f240:	2000010c 	.word	0x2000010c
   1f244:	0001a359 	.word	0x0001a359
   1f248:	0001ab29 	.word	0x0001ab29
   1f24c:	2000404c 	.word	0x2000404c
   1f250:	0001c143 	.word	0x0001c143
   1f254:	0001b331 	.word	0x0001b331
   1f258:	0001aea1 	.word	0x0001aea1
   1f25c:	0001b28d 	.word	0x0001b28d

0001f260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1f260:	b590      	push	{r4, r7, lr}
   1f262:	b085      	sub	sp, #20
   1f264:	af00      	add	r7, sp, #0
   1f266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f268:	687b      	ldr	r3, [r7, #4]
   1f26a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f26c:	2300      	movs	r3, #0
   1f26e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f270:	687b      	ldr	r3, [r7, #4]
   1f272:	2b00      	cmp	r3, #0
   1f274:	d100      	bne.n	1f278 <xTaskPriorityDisinherit+0x18>
   1f276:	e089      	b.n	1f38c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1f278:	4b47      	ldr	r3, [pc, #284]	; (1f398 <xTaskPriorityDisinherit+0x138>)
   1f27a:	681b      	ldr	r3, [r3, #0]
   1f27c:	68ba      	ldr	r2, [r7, #8]
   1f27e:	429a      	cmp	r2, r3
   1f280:	d001      	beq.n	1f286 <xTaskPriorityDisinherit+0x26>
   1f282:	b672      	cpsid	i
   1f284:	e7fe      	b.n	1f284 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1f286:	68bb      	ldr	r3, [r7, #8]
   1f288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f28a:	2b00      	cmp	r3, #0
   1f28c:	d101      	bne.n	1f292 <xTaskPriorityDisinherit+0x32>
   1f28e:	b672      	cpsid	i
   1f290:	e7fe      	b.n	1f290 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1f292:	68bb      	ldr	r3, [r7, #8]
   1f294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f296:	1e5a      	subs	r2, r3, #1
   1f298:	68bb      	ldr	r3, [r7, #8]
   1f29a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1f29c:	68bb      	ldr	r3, [r7, #8]
   1f29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f2a0:	68bb      	ldr	r3, [r7, #8]
   1f2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f2a4:	429a      	cmp	r2, r3
   1f2a6:	d071      	beq.n	1f38c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1f2a8:	68bb      	ldr	r3, [r7, #8]
   1f2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	d16d      	bne.n	1f38c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f2b0:	68bb      	ldr	r3, [r7, #8]
   1f2b2:	3304      	adds	r3, #4
   1f2b4:	0018      	movs	r0, r3
   1f2b6:	4b39      	ldr	r3, [pc, #228]	; (1f39c <xTaskPriorityDisinherit+0x13c>)
   1f2b8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f2ba:	68bb      	ldr	r3, [r7, #8]
   1f2bc:	0018      	movs	r0, r3
   1f2be:	4b38      	ldr	r3, [pc, #224]	; (1f3a0 <xTaskPriorityDisinherit+0x140>)
   1f2c0:	4798      	blx	r3
   1f2c2:	0003      	movs	r3, r0
   1f2c4:	001a      	movs	r2, r3
   1f2c6:	4b37      	ldr	r3, [pc, #220]	; (1f3a4 <xTaskPriorityDisinherit+0x144>)
   1f2c8:	881b      	ldrh	r3, [r3, #0]
   1f2ca:	4013      	ands	r3, r2
   1f2cc:	b29b      	uxth	r3, r3
   1f2ce:	2b00      	cmp	r3, #0
   1f2d0:	d023      	beq.n	1f31a <xTaskPriorityDisinherit+0xba>
   1f2d2:	68bb      	ldr	r3, [r7, #8]
   1f2d4:	0018      	movs	r0, r3
   1f2d6:	4b34      	ldr	r3, [pc, #208]	; (1f3a8 <xTaskPriorityDisinherit+0x148>)
   1f2d8:	4798      	blx	r3
   1f2da:	0003      	movs	r3, r0
   1f2dc:	b2db      	uxtb	r3, r3
   1f2de:	001c      	movs	r4, r3
   1f2e0:	68bb      	ldr	r3, [r7, #8]
   1f2e2:	0018      	movs	r0, r3
   1f2e4:	4b30      	ldr	r3, [pc, #192]	; (1f3a8 <xTaskPriorityDisinherit+0x148>)
   1f2e6:	4798      	blx	r3
   1f2e8:	0003      	movs	r3, r0
   1f2ea:	b2db      	uxtb	r3, r3
   1f2ec:	0019      	movs	r1, r3
   1f2ee:	2003      	movs	r0, #3
   1f2f0:	4b2e      	ldr	r3, [pc, #184]	; (1f3ac <xTaskPriorityDisinherit+0x14c>)
   1f2f2:	4798      	blx	r3
   1f2f4:	0003      	movs	r3, r0
   1f2f6:	0022      	movs	r2, r4
   1f2f8:	2103      	movs	r1, #3
   1f2fa:	208f      	movs	r0, #143	; 0x8f
   1f2fc:	4c2c      	ldr	r4, [pc, #176]	; (1f3b0 <xTaskPriorityDisinherit+0x150>)
   1f2fe:	47a0      	blx	r4
   1f300:	68bb      	ldr	r3, [r7, #8]
   1f302:	0018      	movs	r0, r3
   1f304:	4b28      	ldr	r3, [pc, #160]	; (1f3a8 <xTaskPriorityDisinherit+0x148>)
   1f306:	4798      	blx	r3
   1f308:	0003      	movs	r3, r0
   1f30a:	b2d9      	uxtb	r1, r3
   1f30c:	68bb      	ldr	r3, [r7, #8]
   1f30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f310:	b2db      	uxtb	r3, r3
   1f312:	001a      	movs	r2, r3
   1f314:	2003      	movs	r0, #3
   1f316:	4b27      	ldr	r3, [pc, #156]	; (1f3b4 <xTaskPriorityDisinherit+0x154>)
   1f318:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1f31a:	68bb      	ldr	r3, [r7, #8]
   1f31c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f31e:	68bb      	ldr	r3, [r7, #8]
   1f320:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f322:	68bb      	ldr	r3, [r7, #8]
   1f324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f326:	2205      	movs	r2, #5
   1f328:	1ad2      	subs	r2, r2, r3
   1f32a:	68bb      	ldr	r3, [r7, #8]
   1f32c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1f32e:	68bb      	ldr	r3, [r7, #8]
   1f330:	0018      	movs	r0, r3
   1f332:	4b1b      	ldr	r3, [pc, #108]	; (1f3a0 <xTaskPriorityDisinherit+0x140>)
   1f334:	4798      	blx	r3
   1f336:	0003      	movs	r3, r0
   1f338:	001a      	movs	r2, r3
   1f33a:	4b1a      	ldr	r3, [pc, #104]	; (1f3a4 <xTaskPriorityDisinherit+0x144>)
   1f33c:	881b      	ldrh	r3, [r3, #0]
   1f33e:	4013      	ands	r3, r2
   1f340:	b29b      	uxth	r3, r3
   1f342:	2b00      	cmp	r3, #0
   1f344:	d008      	beq.n	1f358 <xTaskPriorityDisinherit+0xf8>
   1f346:	68bb      	ldr	r3, [r7, #8]
   1f348:	0018      	movs	r0, r3
   1f34a:	4b17      	ldr	r3, [pc, #92]	; (1f3a8 <xTaskPriorityDisinherit+0x148>)
   1f34c:	4798      	blx	r3
   1f34e:	0003      	movs	r3, r0
   1f350:	b2db      	uxtb	r3, r3
   1f352:	0018      	movs	r0, r3
   1f354:	4b18      	ldr	r3, [pc, #96]	; (1f3b8 <xTaskPriorityDisinherit+0x158>)
   1f356:	4798      	blx	r3
   1f358:	68bb      	ldr	r3, [r7, #8]
   1f35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f35c:	4b17      	ldr	r3, [pc, #92]	; (1f3bc <xTaskPriorityDisinherit+0x15c>)
   1f35e:	681b      	ldr	r3, [r3, #0]
   1f360:	429a      	cmp	r2, r3
   1f362:	d903      	bls.n	1f36c <xTaskPriorityDisinherit+0x10c>
   1f364:	68bb      	ldr	r3, [r7, #8]
   1f366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f368:	4b14      	ldr	r3, [pc, #80]	; (1f3bc <xTaskPriorityDisinherit+0x15c>)
   1f36a:	601a      	str	r2, [r3, #0]
   1f36c:	68bb      	ldr	r3, [r7, #8]
   1f36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f370:	0013      	movs	r3, r2
   1f372:	009b      	lsls	r3, r3, #2
   1f374:	189b      	adds	r3, r3, r2
   1f376:	009b      	lsls	r3, r3, #2
   1f378:	4a11      	ldr	r2, [pc, #68]	; (1f3c0 <xTaskPriorityDisinherit+0x160>)
   1f37a:	189a      	adds	r2, r3, r2
   1f37c:	68bb      	ldr	r3, [r7, #8]
   1f37e:	3304      	adds	r3, #4
   1f380:	0019      	movs	r1, r3
   1f382:	0010      	movs	r0, r2
   1f384:	4b0f      	ldr	r3, [pc, #60]	; (1f3c4 <xTaskPriorityDisinherit+0x164>)
   1f386:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1f388:	2301      	movs	r3, #1
   1f38a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f38c:	68fb      	ldr	r3, [r7, #12]
	}
   1f38e:	0018      	movs	r0, r3
   1f390:	46bd      	mov	sp, r7
   1f392:	b005      	add	sp, #20
   1f394:	bd90      	pop	{r4, r7, pc}
   1f396:	46c0      	nop			; (mov r8, r8)
   1f398:	20003f6c 	.word	0x20003f6c
   1f39c:	0001c1f3 	.word	0x0001c1f3
   1f3a0:	0001a379 	.word	0x0001a379
   1f3a4:	2000010c 	.word	0x2000010c
   1f3a8:	0001a359 	.word	0x0001a359
   1f3ac:	0001b331 	.word	0x0001b331
   1f3b0:	0001aea1 	.word	0x0001aea1
   1f3b4:	0001b28d 	.word	0x0001b28d
   1f3b8:	0001ab29 	.word	0x0001ab29
   1f3bc:	2000404c 	.word	0x2000404c
   1f3c0:	20003f70 	.word	0x20003f70
   1f3c4:	0001c143 	.word	0x0001c143

0001f3c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1f3c8:	b590      	push	{r4, r7, lr}
   1f3ca:	b087      	sub	sp, #28
   1f3cc:	af00      	add	r7, sp, #0
   1f3ce:	6078      	str	r0, [r7, #4]
   1f3d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f3d2:	687b      	ldr	r3, [r7, #4]
   1f3d4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1f3d6:	2301      	movs	r3, #1
   1f3d8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f3da:	687b      	ldr	r3, [r7, #4]
   1f3dc:	2b00      	cmp	r3, #0
   1f3de:	d100      	bne.n	1f3e2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1f3e0:	e0a4      	b.n	1f52c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1f3e2:	693b      	ldr	r3, [r7, #16]
   1f3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f3e6:	2b00      	cmp	r3, #0
   1f3e8:	d101      	bne.n	1f3ee <vTaskPriorityDisinheritAfterTimeout+0x26>
   1f3ea:	b672      	cpsid	i
   1f3ec:	e7fe      	b.n	1f3ec <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1f3ee:	693b      	ldr	r3, [r7, #16]
   1f3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f3f2:	683b      	ldr	r3, [r7, #0]
   1f3f4:	429a      	cmp	r2, r3
   1f3f6:	d202      	bcs.n	1f3fe <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1f3f8:	683b      	ldr	r3, [r7, #0]
   1f3fa:	617b      	str	r3, [r7, #20]
   1f3fc:	e002      	b.n	1f404 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1f3fe:	693b      	ldr	r3, [r7, #16]
   1f400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f402:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1f404:	693b      	ldr	r3, [r7, #16]
   1f406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f408:	697b      	ldr	r3, [r7, #20]
   1f40a:	429a      	cmp	r2, r3
   1f40c:	d100      	bne.n	1f410 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1f40e:	e08d      	b.n	1f52c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1f410:	693b      	ldr	r3, [r7, #16]
   1f412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f414:	68fb      	ldr	r3, [r7, #12]
   1f416:	429a      	cmp	r2, r3
   1f418:	d000      	beq.n	1f41c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1f41a:	e087      	b.n	1f52c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1f41c:	4b45      	ldr	r3, [pc, #276]	; (1f534 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1f41e:	681b      	ldr	r3, [r3, #0]
   1f420:	693a      	ldr	r2, [r7, #16]
   1f422:	429a      	cmp	r2, r3
   1f424:	d101      	bne.n	1f42a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1f426:	b672      	cpsid	i
   1f428:	e7fe      	b.n	1f428 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f42a:	693b      	ldr	r3, [r7, #16]
   1f42c:	0018      	movs	r0, r3
   1f42e:	4b42      	ldr	r3, [pc, #264]	; (1f538 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f430:	4798      	blx	r3
   1f432:	0003      	movs	r3, r0
   1f434:	001a      	movs	r2, r3
   1f436:	4b41      	ldr	r3, [pc, #260]	; (1f53c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f438:	881b      	ldrh	r3, [r3, #0]
   1f43a:	4013      	ands	r3, r2
   1f43c:	b29b      	uxth	r3, r3
   1f43e:	2b00      	cmp	r3, #0
   1f440:	d023      	beq.n	1f48a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1f442:	693b      	ldr	r3, [r7, #16]
   1f444:	0018      	movs	r0, r3
   1f446:	4b3e      	ldr	r3, [pc, #248]	; (1f540 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f448:	4798      	blx	r3
   1f44a:	0003      	movs	r3, r0
   1f44c:	b2db      	uxtb	r3, r3
   1f44e:	001c      	movs	r4, r3
   1f450:	693b      	ldr	r3, [r7, #16]
   1f452:	0018      	movs	r0, r3
   1f454:	4b3a      	ldr	r3, [pc, #232]	; (1f540 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f456:	4798      	blx	r3
   1f458:	0003      	movs	r3, r0
   1f45a:	b2db      	uxtb	r3, r3
   1f45c:	0019      	movs	r1, r3
   1f45e:	2003      	movs	r0, #3
   1f460:	4b38      	ldr	r3, [pc, #224]	; (1f544 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1f462:	4798      	blx	r3
   1f464:	0003      	movs	r3, r0
   1f466:	0022      	movs	r2, r4
   1f468:	2103      	movs	r1, #3
   1f46a:	208f      	movs	r0, #143	; 0x8f
   1f46c:	4c36      	ldr	r4, [pc, #216]	; (1f548 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1f46e:	47a0      	blx	r4
   1f470:	693b      	ldr	r3, [r7, #16]
   1f472:	0018      	movs	r0, r3
   1f474:	4b32      	ldr	r3, [pc, #200]	; (1f540 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f476:	4798      	blx	r3
   1f478:	0003      	movs	r3, r0
   1f47a:	b2d9      	uxtb	r1, r3
   1f47c:	693b      	ldr	r3, [r7, #16]
   1f47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f480:	b2db      	uxtb	r3, r3
   1f482:	001a      	movs	r2, r3
   1f484:	2003      	movs	r0, #3
   1f486:	4b31      	ldr	r3, [pc, #196]	; (1f54c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1f488:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1f48a:	693b      	ldr	r3, [r7, #16]
   1f48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f48e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1f490:	693b      	ldr	r3, [r7, #16]
   1f492:	697a      	ldr	r2, [r7, #20]
   1f494:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f496:	693b      	ldr	r3, [r7, #16]
   1f498:	699b      	ldr	r3, [r3, #24]
   1f49a:	2b00      	cmp	r3, #0
   1f49c:	db04      	blt.n	1f4a8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f49e:	697b      	ldr	r3, [r7, #20]
   1f4a0:	2205      	movs	r2, #5
   1f4a2:	1ad2      	subs	r2, r2, r3
   1f4a4:	693b      	ldr	r3, [r7, #16]
   1f4a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1f4a8:	693b      	ldr	r3, [r7, #16]
   1f4aa:	6959      	ldr	r1, [r3, #20]
   1f4ac:	68ba      	ldr	r2, [r7, #8]
   1f4ae:	0013      	movs	r3, r2
   1f4b0:	009b      	lsls	r3, r3, #2
   1f4b2:	189b      	adds	r3, r3, r2
   1f4b4:	009b      	lsls	r3, r3, #2
   1f4b6:	4a26      	ldr	r2, [pc, #152]	; (1f550 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f4b8:	189b      	adds	r3, r3, r2
   1f4ba:	4299      	cmp	r1, r3
   1f4bc:	d101      	bne.n	1f4c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1f4be:	2301      	movs	r3, #1
   1f4c0:	e000      	b.n	1f4c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1f4c2:	2300      	movs	r3, #0
   1f4c4:	2b00      	cmp	r3, #0
   1f4c6:	d031      	beq.n	1f52c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f4c8:	693b      	ldr	r3, [r7, #16]
   1f4ca:	3304      	adds	r3, #4
   1f4cc:	0018      	movs	r0, r3
   1f4ce:	4b21      	ldr	r3, [pc, #132]	; (1f554 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1f4d0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1f4d2:	693b      	ldr	r3, [r7, #16]
   1f4d4:	0018      	movs	r0, r3
   1f4d6:	4b18      	ldr	r3, [pc, #96]	; (1f538 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f4d8:	4798      	blx	r3
   1f4da:	0003      	movs	r3, r0
   1f4dc:	001a      	movs	r2, r3
   1f4de:	4b17      	ldr	r3, [pc, #92]	; (1f53c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f4e0:	881b      	ldrh	r3, [r3, #0]
   1f4e2:	4013      	ands	r3, r2
   1f4e4:	b29b      	uxth	r3, r3
   1f4e6:	2b00      	cmp	r3, #0
   1f4e8:	d008      	beq.n	1f4fc <vTaskPriorityDisinheritAfterTimeout+0x134>
   1f4ea:	693b      	ldr	r3, [r7, #16]
   1f4ec:	0018      	movs	r0, r3
   1f4ee:	4b14      	ldr	r3, [pc, #80]	; (1f540 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f4f0:	4798      	blx	r3
   1f4f2:	0003      	movs	r3, r0
   1f4f4:	b2db      	uxtb	r3, r3
   1f4f6:	0018      	movs	r0, r3
   1f4f8:	4b17      	ldr	r3, [pc, #92]	; (1f558 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1f4fa:	4798      	blx	r3
   1f4fc:	693b      	ldr	r3, [r7, #16]
   1f4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f500:	4b16      	ldr	r3, [pc, #88]	; (1f55c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f502:	681b      	ldr	r3, [r3, #0]
   1f504:	429a      	cmp	r2, r3
   1f506:	d903      	bls.n	1f510 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1f508:	693b      	ldr	r3, [r7, #16]
   1f50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f50c:	4b13      	ldr	r3, [pc, #76]	; (1f55c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f50e:	601a      	str	r2, [r3, #0]
   1f510:	693b      	ldr	r3, [r7, #16]
   1f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f514:	0013      	movs	r3, r2
   1f516:	009b      	lsls	r3, r3, #2
   1f518:	189b      	adds	r3, r3, r2
   1f51a:	009b      	lsls	r3, r3, #2
   1f51c:	4a0c      	ldr	r2, [pc, #48]	; (1f550 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f51e:	189a      	adds	r2, r3, r2
   1f520:	693b      	ldr	r3, [r7, #16]
   1f522:	3304      	adds	r3, #4
   1f524:	0019      	movs	r1, r3
   1f526:	0010      	movs	r0, r2
   1f528:	4b0d      	ldr	r3, [pc, #52]	; (1f560 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1f52a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1f52c:	46c0      	nop			; (mov r8, r8)
   1f52e:	46bd      	mov	sp, r7
   1f530:	b007      	add	sp, #28
   1f532:	bd90      	pop	{r4, r7, pc}
   1f534:	20003f6c 	.word	0x20003f6c
   1f538:	0001a379 	.word	0x0001a379
   1f53c:	2000010c 	.word	0x2000010c
   1f540:	0001a359 	.word	0x0001a359
   1f544:	0001b331 	.word	0x0001b331
   1f548:	0001aea1 	.word	0x0001aea1
   1f54c:	0001b28d 	.word	0x0001b28d
   1f550:	20003f70 	.word	0x20003f70
   1f554:	0001c1f3 	.word	0x0001c1f3
   1f558:	0001ab29 	.word	0x0001ab29
   1f55c:	2000404c 	.word	0x2000404c
   1f560:	0001c143 	.word	0x0001c143

0001f564 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1f564:	b580      	push	{r7, lr}
   1f566:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1f568:	4b06      	ldr	r3, [pc, #24]	; (1f584 <pvTaskIncrementMutexHeldCount+0x20>)
   1f56a:	681b      	ldr	r3, [r3, #0]
   1f56c:	2b00      	cmp	r3, #0
   1f56e:	d004      	beq.n	1f57a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1f570:	4b04      	ldr	r3, [pc, #16]	; (1f584 <pvTaskIncrementMutexHeldCount+0x20>)
   1f572:	681b      	ldr	r3, [r3, #0]
   1f574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f576:	3201      	adds	r2, #1
   1f578:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1f57a:	4b02      	ldr	r3, [pc, #8]	; (1f584 <pvTaskIncrementMutexHeldCount+0x20>)
   1f57c:	681b      	ldr	r3, [r3, #0]
	}
   1f57e:	0018      	movs	r0, r3
   1f580:	46bd      	mov	sp, r7
   1f582:	bd80      	pop	{r7, pc}
   1f584:	20003f6c 	.word	0x20003f6c

0001f588 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1f588:	b580      	push	{r7, lr}
   1f58a:	b084      	sub	sp, #16
   1f58c:	af00      	add	r7, sp, #0
   1f58e:	6078      	str	r0, [r7, #4]
   1f590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1f592:	4b21      	ldr	r3, [pc, #132]	; (1f618 <prvAddCurrentTaskToDelayedList+0x90>)
   1f594:	681b      	ldr	r3, [r3, #0]
   1f596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f598:	4b20      	ldr	r3, [pc, #128]	; (1f61c <prvAddCurrentTaskToDelayedList+0x94>)
   1f59a:	681b      	ldr	r3, [r3, #0]
   1f59c:	3304      	adds	r3, #4
   1f59e:	0018      	movs	r0, r3
   1f5a0:	4b1f      	ldr	r3, [pc, #124]	; (1f620 <prvAddCurrentTaskToDelayedList+0x98>)
   1f5a2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1f5a4:	687b      	ldr	r3, [r7, #4]
   1f5a6:	3301      	adds	r3, #1
   1f5a8:	d10b      	bne.n	1f5c2 <prvAddCurrentTaskToDelayedList+0x3a>
   1f5aa:	683b      	ldr	r3, [r7, #0]
   1f5ac:	2b00      	cmp	r3, #0
   1f5ae:	d008      	beq.n	1f5c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f5b0:	4b1a      	ldr	r3, [pc, #104]	; (1f61c <prvAddCurrentTaskToDelayedList+0x94>)
   1f5b2:	681b      	ldr	r3, [r3, #0]
   1f5b4:	1d1a      	adds	r2, r3, #4
   1f5b6:	4b1b      	ldr	r3, [pc, #108]	; (1f624 <prvAddCurrentTaskToDelayedList+0x9c>)
   1f5b8:	0011      	movs	r1, r2
   1f5ba:	0018      	movs	r0, r3
   1f5bc:	4b1a      	ldr	r3, [pc, #104]	; (1f628 <prvAddCurrentTaskToDelayedList+0xa0>)
   1f5be:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1f5c0:	e026      	b.n	1f610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1f5c2:	68fa      	ldr	r2, [r7, #12]
   1f5c4:	687b      	ldr	r3, [r7, #4]
   1f5c6:	18d3      	adds	r3, r2, r3
   1f5c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1f5ca:	4b14      	ldr	r3, [pc, #80]	; (1f61c <prvAddCurrentTaskToDelayedList+0x94>)
   1f5cc:	681b      	ldr	r3, [r3, #0]
   1f5ce:	68ba      	ldr	r2, [r7, #8]
   1f5d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1f5d2:	68ba      	ldr	r2, [r7, #8]
   1f5d4:	68fb      	ldr	r3, [r7, #12]
   1f5d6:	429a      	cmp	r2, r3
   1f5d8:	d209      	bcs.n	1f5ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f5da:	4b14      	ldr	r3, [pc, #80]	; (1f62c <prvAddCurrentTaskToDelayedList+0xa4>)
   1f5dc:	681a      	ldr	r2, [r3, #0]
   1f5de:	4b0f      	ldr	r3, [pc, #60]	; (1f61c <prvAddCurrentTaskToDelayedList+0x94>)
   1f5e0:	681b      	ldr	r3, [r3, #0]
   1f5e2:	3304      	adds	r3, #4
   1f5e4:	0019      	movs	r1, r3
   1f5e6:	0010      	movs	r0, r2
   1f5e8:	4b11      	ldr	r3, [pc, #68]	; (1f630 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f5ea:	4798      	blx	r3
}
   1f5ec:	e010      	b.n	1f610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f5ee:	4b11      	ldr	r3, [pc, #68]	; (1f634 <prvAddCurrentTaskToDelayedList+0xac>)
   1f5f0:	681a      	ldr	r2, [r3, #0]
   1f5f2:	4b0a      	ldr	r3, [pc, #40]	; (1f61c <prvAddCurrentTaskToDelayedList+0x94>)
   1f5f4:	681b      	ldr	r3, [r3, #0]
   1f5f6:	3304      	adds	r3, #4
   1f5f8:	0019      	movs	r1, r3
   1f5fa:	0010      	movs	r0, r2
   1f5fc:	4b0c      	ldr	r3, [pc, #48]	; (1f630 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f5fe:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1f600:	4b0d      	ldr	r3, [pc, #52]	; (1f638 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f602:	681b      	ldr	r3, [r3, #0]
   1f604:	68ba      	ldr	r2, [r7, #8]
   1f606:	429a      	cmp	r2, r3
   1f608:	d202      	bcs.n	1f610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1f60a:	4b0b      	ldr	r3, [pc, #44]	; (1f638 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f60c:	68ba      	ldr	r2, [r7, #8]
   1f60e:	601a      	str	r2, [r3, #0]
}
   1f610:	46c0      	nop			; (mov r8, r8)
   1f612:	46bd      	mov	sp, r7
   1f614:	b004      	add	sp, #16
   1f616:	bd80      	pop	{r7, pc}
   1f618:	20004048 	.word	0x20004048
   1f61c:	20003f6c 	.word	0x20003f6c
   1f620:	0001c1f3 	.word	0x0001c1f3
   1f624:	20004030 	.word	0x20004030
   1f628:	0001c143 	.word	0x0001c143
   1f62c:	20004000 	.word	0x20004000
   1f630:	0001c187 	.word	0x0001c187
   1f634:	20003ffc 	.word	0x20003ffc
   1f638:	20004064 	.word	0x20004064

0001f63c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1f63c:	b590      	push	{r4, r7, lr}
   1f63e:	b085      	sub	sp, #20
   1f640:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1f642:	2300      	movs	r3, #0
   1f644:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1f646:	4b0e      	ldr	r3, [pc, #56]	; (1f680 <xTimerCreateTimerTask+0x44>)
   1f648:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1f64a:	4b0e      	ldr	r3, [pc, #56]	; (1f684 <xTimerCreateTimerTask+0x48>)
   1f64c:	681b      	ldr	r3, [r3, #0]
   1f64e:	2b00      	cmp	r3, #0
   1f650:	d00b      	beq.n	1f66a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1f652:	490d      	ldr	r1, [pc, #52]	; (1f688 <xTimerCreateTimerTask+0x4c>)
   1f654:	480d      	ldr	r0, [pc, #52]	; (1f68c <xTimerCreateTimerTask+0x50>)
   1f656:	4b0e      	ldr	r3, [pc, #56]	; (1f690 <xTimerCreateTimerTask+0x54>)
   1f658:	9301      	str	r3, [sp, #4]
   1f65a:	2302      	movs	r3, #2
   1f65c:	9300      	str	r3, [sp, #0]
   1f65e:	2300      	movs	r3, #0
   1f660:	2280      	movs	r2, #128	; 0x80
   1f662:	4c0c      	ldr	r4, [pc, #48]	; (1f694 <xTimerCreateTimerTask+0x58>)
   1f664:	47a0      	blx	r4
   1f666:	0003      	movs	r3, r0
   1f668:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1f66a:	687b      	ldr	r3, [r7, #4]
   1f66c:	2b00      	cmp	r3, #0
   1f66e:	d101      	bne.n	1f674 <xTimerCreateTimerTask+0x38>
   1f670:	b672      	cpsid	i
   1f672:	e7fe      	b.n	1f672 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1f674:	687b      	ldr	r3, [r7, #4]
}
   1f676:	0018      	movs	r0, r3
   1f678:	46bd      	mov	sp, r7
   1f67a:	b003      	add	sp, #12
   1f67c:	bd90      	pop	{r4, r7, pc}
   1f67e:	46c0      	nop			; (mov r8, r8)
   1f680:	0001fb85 	.word	0x0001fb85
   1f684:	200040a0 	.word	0x200040a0
   1f688:	0003b320 	.word	0x0003b320
   1f68c:	0001f7bd 	.word	0x0001f7bd
   1f690:	200040a4 	.word	0x200040a4
   1f694:	0001dfd5 	.word	0x0001dfd5

0001f698 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1f698:	b590      	push	{r4, r7, lr}
   1f69a:	b089      	sub	sp, #36	; 0x24
   1f69c:	af00      	add	r7, sp, #0
   1f69e:	60f8      	str	r0, [r7, #12]
   1f6a0:	60b9      	str	r1, [r7, #8]
   1f6a2:	607a      	str	r2, [r7, #4]
   1f6a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1f6a6:	2300      	movs	r3, #0
   1f6a8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1f6aa:	68fb      	ldr	r3, [r7, #12]
   1f6ac:	2b00      	cmp	r3, #0
   1f6ae:	d101      	bne.n	1f6b4 <xTimerGenericCommand+0x1c>
   1f6b0:	b672      	cpsid	i
   1f6b2:	e7fe      	b.n	1f6b2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1f6b4:	4b1e      	ldr	r3, [pc, #120]	; (1f730 <xTimerGenericCommand+0x98>)
   1f6b6:	681b      	ldr	r3, [r3, #0]
   1f6b8:	2b00      	cmp	r3, #0
   1f6ba:	d033      	beq.n	1f724 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1f6bc:	2310      	movs	r3, #16
   1f6be:	18fb      	adds	r3, r7, r3
   1f6c0:	68ba      	ldr	r2, [r7, #8]
   1f6c2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1f6c4:	2310      	movs	r3, #16
   1f6c6:	18fb      	adds	r3, r7, r3
   1f6c8:	687a      	ldr	r2, [r7, #4]
   1f6ca:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1f6cc:	2310      	movs	r3, #16
   1f6ce:	18fb      	adds	r3, r7, r3
   1f6d0:	68fa      	ldr	r2, [r7, #12]
   1f6d2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1f6d4:	68bb      	ldr	r3, [r7, #8]
   1f6d6:	2b05      	cmp	r3, #5
   1f6d8:	dc1a      	bgt.n	1f710 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f6da:	4b16      	ldr	r3, [pc, #88]	; (1f734 <xTimerGenericCommand+0x9c>)
   1f6dc:	4798      	blx	r3
   1f6de:	0003      	movs	r3, r0
   1f6e0:	2b02      	cmp	r3, #2
   1f6e2:	d10a      	bne.n	1f6fa <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f6e4:	4b12      	ldr	r3, [pc, #72]	; (1f730 <xTimerGenericCommand+0x98>)
   1f6e6:	6818      	ldr	r0, [r3, #0]
   1f6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1f6ea:	2310      	movs	r3, #16
   1f6ec:	18f9      	adds	r1, r7, r3
   1f6ee:	2300      	movs	r3, #0
   1f6f0:	4c11      	ldr	r4, [pc, #68]	; (1f738 <xTimerGenericCommand+0xa0>)
   1f6f2:	47a0      	blx	r4
   1f6f4:	0003      	movs	r3, r0
   1f6f6:	61fb      	str	r3, [r7, #28]
   1f6f8:	e014      	b.n	1f724 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1f6fa:	4b0d      	ldr	r3, [pc, #52]	; (1f730 <xTimerGenericCommand+0x98>)
   1f6fc:	6818      	ldr	r0, [r3, #0]
   1f6fe:	2310      	movs	r3, #16
   1f700:	18f9      	adds	r1, r7, r3
   1f702:	2300      	movs	r3, #0
   1f704:	2200      	movs	r2, #0
   1f706:	4c0c      	ldr	r4, [pc, #48]	; (1f738 <xTimerGenericCommand+0xa0>)
   1f708:	47a0      	blx	r4
   1f70a:	0003      	movs	r3, r0
   1f70c:	61fb      	str	r3, [r7, #28]
   1f70e:	e009      	b.n	1f724 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f710:	4b07      	ldr	r3, [pc, #28]	; (1f730 <xTimerGenericCommand+0x98>)
   1f712:	6818      	ldr	r0, [r3, #0]
   1f714:	683a      	ldr	r2, [r7, #0]
   1f716:	2310      	movs	r3, #16
   1f718:	18f9      	adds	r1, r7, r3
   1f71a:	2300      	movs	r3, #0
   1f71c:	4c07      	ldr	r4, [pc, #28]	; (1f73c <xTimerGenericCommand+0xa4>)
   1f71e:	47a0      	blx	r4
   1f720:	0003      	movs	r3, r0
   1f722:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1f724:	69fb      	ldr	r3, [r7, #28]
}
   1f726:	0018      	movs	r0, r3
   1f728:	46bd      	mov	sp, r7
   1f72a:	b009      	add	sp, #36	; 0x24
   1f72c:	bd90      	pop	{r4, r7, pc}
   1f72e:	46c0      	nop			; (mov r8, r8)
   1f730:	200040a0 	.word	0x200040a0
   1f734:	0001f099 	.word	0x0001f099
   1f738:	0001c90d 	.word	0x0001c90d
   1f73c:	0001cd6d 	.word	0x0001cd6d

0001f740 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1f740:	b590      	push	{r4, r7, lr}
   1f742:	b087      	sub	sp, #28
   1f744:	af02      	add	r7, sp, #8
   1f746:	6078      	str	r0, [r7, #4]
   1f748:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f74a:	4b18      	ldr	r3, [pc, #96]	; (1f7ac <prvProcessExpiredTimer+0x6c>)
   1f74c:	681b      	ldr	r3, [r3, #0]
   1f74e:	68db      	ldr	r3, [r3, #12]
   1f750:	68db      	ldr	r3, [r3, #12]
   1f752:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f754:	68fb      	ldr	r3, [r7, #12]
   1f756:	3304      	adds	r3, #4
   1f758:	0018      	movs	r0, r3
   1f75a:	4b15      	ldr	r3, [pc, #84]	; (1f7b0 <prvProcessExpiredTimer+0x70>)
   1f75c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1f75e:	68fb      	ldr	r3, [r7, #12]
   1f760:	69db      	ldr	r3, [r3, #28]
   1f762:	2b01      	cmp	r3, #1
   1f764:	d119      	bne.n	1f79a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1f766:	68fb      	ldr	r3, [r7, #12]
   1f768:	699a      	ldr	r2, [r3, #24]
   1f76a:	687b      	ldr	r3, [r7, #4]
   1f76c:	18d1      	adds	r1, r2, r3
   1f76e:	687b      	ldr	r3, [r7, #4]
   1f770:	683a      	ldr	r2, [r7, #0]
   1f772:	68f8      	ldr	r0, [r7, #12]
   1f774:	4c0f      	ldr	r4, [pc, #60]	; (1f7b4 <prvProcessExpiredTimer+0x74>)
   1f776:	47a0      	blx	r4
   1f778:	1e03      	subs	r3, r0, #0
   1f77a:	d00e      	beq.n	1f79a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1f77c:	687a      	ldr	r2, [r7, #4]
   1f77e:	68f8      	ldr	r0, [r7, #12]
   1f780:	2300      	movs	r3, #0
   1f782:	9300      	str	r3, [sp, #0]
   1f784:	2300      	movs	r3, #0
   1f786:	2100      	movs	r1, #0
   1f788:	4c0b      	ldr	r4, [pc, #44]	; (1f7b8 <prvProcessExpiredTimer+0x78>)
   1f78a:	47a0      	blx	r4
   1f78c:	0003      	movs	r3, r0
   1f78e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1f790:	68bb      	ldr	r3, [r7, #8]
   1f792:	2b00      	cmp	r3, #0
   1f794:	d101      	bne.n	1f79a <prvProcessExpiredTimer+0x5a>
   1f796:	b672      	cpsid	i
   1f798:	e7fe      	b.n	1f798 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1f79a:	68fb      	ldr	r3, [r7, #12]
   1f79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f79e:	68fa      	ldr	r2, [r7, #12]
   1f7a0:	0010      	movs	r0, r2
   1f7a2:	4798      	blx	r3
}
   1f7a4:	46c0      	nop			; (mov r8, r8)
   1f7a6:	46bd      	mov	sp, r7
   1f7a8:	b005      	add	sp, #20
   1f7aa:	bd90      	pop	{r4, r7, pc}
   1f7ac:	20004098 	.word	0x20004098
   1f7b0:	0001c1f3 	.word	0x0001c1f3
   1f7b4:	0001f925 	.word	0x0001f925
   1f7b8:	0001f699 	.word	0x0001f699

0001f7bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1f7bc:	b580      	push	{r7, lr}
   1f7be:	b084      	sub	sp, #16
   1f7c0:	af00      	add	r7, sp, #0
   1f7c2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1f7c4:	4b08      	ldr	r3, [pc, #32]	; (1f7e8 <prvTimerTask+0x2c>)
   1f7c6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1f7c8:	2308      	movs	r3, #8
   1f7ca:	18fb      	adds	r3, r7, r3
   1f7cc:	0018      	movs	r0, r3
   1f7ce:	4b07      	ldr	r3, [pc, #28]	; (1f7ec <prvTimerTask+0x30>)
   1f7d0:	4798      	blx	r3
   1f7d2:	0003      	movs	r3, r0
   1f7d4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1f7d6:	68ba      	ldr	r2, [r7, #8]
   1f7d8:	68fb      	ldr	r3, [r7, #12]
   1f7da:	0011      	movs	r1, r2
   1f7dc:	0018      	movs	r0, r3
   1f7de:	4b04      	ldr	r3, [pc, #16]	; (1f7f0 <prvTimerTask+0x34>)
   1f7e0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1f7e2:	4b04      	ldr	r3, [pc, #16]	; (1f7f4 <prvTimerTask+0x38>)
   1f7e4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1f7e6:	e7ef      	b.n	1f7c8 <prvTimerTask+0xc>
   1f7e8:	00034975 	.word	0x00034975
   1f7ec:	0001f89d 	.word	0x0001f89d
   1f7f0:	0001f7f9 	.word	0x0001f7f9
   1f7f4:	0001f9ad 	.word	0x0001f9ad

0001f7f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1f7f8:	b580      	push	{r7, lr}
   1f7fa:	b084      	sub	sp, #16
   1f7fc:	af00      	add	r7, sp, #0
   1f7fe:	6078      	str	r0, [r7, #4]
   1f800:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1f802:	4b1e      	ldr	r3, [pc, #120]	; (1f87c <prvProcessTimerOrBlockTask+0x84>)
   1f804:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1f806:	2308      	movs	r3, #8
   1f808:	18fb      	adds	r3, r7, r3
   1f80a:	0018      	movs	r0, r3
   1f80c:	4b1c      	ldr	r3, [pc, #112]	; (1f880 <prvProcessTimerOrBlockTask+0x88>)
   1f80e:	4798      	blx	r3
   1f810:	0003      	movs	r3, r0
   1f812:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1f814:	68bb      	ldr	r3, [r7, #8]
   1f816:	2b00      	cmp	r3, #0
   1f818:	d129      	bne.n	1f86e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1f81a:	683b      	ldr	r3, [r7, #0]
   1f81c:	2b00      	cmp	r3, #0
   1f81e:	d10c      	bne.n	1f83a <prvProcessTimerOrBlockTask+0x42>
   1f820:	687a      	ldr	r2, [r7, #4]
   1f822:	68fb      	ldr	r3, [r7, #12]
   1f824:	429a      	cmp	r2, r3
   1f826:	d808      	bhi.n	1f83a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1f828:	4b16      	ldr	r3, [pc, #88]	; (1f884 <prvProcessTimerOrBlockTask+0x8c>)
   1f82a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1f82c:	68fa      	ldr	r2, [r7, #12]
   1f82e:	687b      	ldr	r3, [r7, #4]
   1f830:	0011      	movs	r1, r2
   1f832:	0018      	movs	r0, r3
   1f834:	4b14      	ldr	r3, [pc, #80]	; (1f888 <prvProcessTimerOrBlockTask+0x90>)
   1f836:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1f838:	e01b      	b.n	1f872 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1f83a:	683b      	ldr	r3, [r7, #0]
   1f83c:	2b00      	cmp	r3, #0
   1f83e:	d006      	beq.n	1f84e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1f840:	4b12      	ldr	r3, [pc, #72]	; (1f88c <prvProcessTimerOrBlockTask+0x94>)
   1f842:	681b      	ldr	r3, [r3, #0]
   1f844:	681b      	ldr	r3, [r3, #0]
   1f846:	425a      	negs	r2, r3
   1f848:	4153      	adcs	r3, r2
   1f84a:	b2db      	uxtb	r3, r3
   1f84c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1f84e:	4b10      	ldr	r3, [pc, #64]	; (1f890 <prvProcessTimerOrBlockTask+0x98>)
   1f850:	6818      	ldr	r0, [r3, #0]
   1f852:	687a      	ldr	r2, [r7, #4]
   1f854:	68fb      	ldr	r3, [r7, #12]
   1f856:	1ad3      	subs	r3, r2, r3
   1f858:	683a      	ldr	r2, [r7, #0]
   1f85a:	0019      	movs	r1, r3
   1f85c:	4b0d      	ldr	r3, [pc, #52]	; (1f894 <prvProcessTimerOrBlockTask+0x9c>)
   1f85e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f860:	4b08      	ldr	r3, [pc, #32]	; (1f884 <prvProcessTimerOrBlockTask+0x8c>)
   1f862:	4798      	blx	r3
   1f864:	1e03      	subs	r3, r0, #0
   1f866:	d104      	bne.n	1f872 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1f868:	4b0b      	ldr	r3, [pc, #44]	; (1f898 <prvProcessTimerOrBlockTask+0xa0>)
   1f86a:	4798      	blx	r3
}
   1f86c:	e001      	b.n	1f872 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1f86e:	4b05      	ldr	r3, [pc, #20]	; (1f884 <prvProcessTimerOrBlockTask+0x8c>)
   1f870:	4798      	blx	r3
}
   1f872:	46c0      	nop			; (mov r8, r8)
   1f874:	46bd      	mov	sp, r7
   1f876:	b004      	add	sp, #16
   1f878:	bd80      	pop	{r7, pc}
   1f87a:	46c0      	nop			; (mov r8, r8)
   1f87c:	0001e631 	.word	0x0001e631
   1f880:	0001f8dd 	.word	0x0001f8dd
   1f884:	0001e649 	.word	0x0001e649
   1f888:	0001f741 	.word	0x0001f741
   1f88c:	2000409c 	.word	0x2000409c
   1f890:	200040a0 	.word	0x200040a0
   1f894:	0001ddd1 	.word	0x0001ddd1
   1f898:	0001c361 	.word	0x0001c361

0001f89c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1f89c:	b580      	push	{r7, lr}
   1f89e:	b084      	sub	sp, #16
   1f8a0:	af00      	add	r7, sp, #0
   1f8a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1f8a4:	4b0c      	ldr	r3, [pc, #48]	; (1f8d8 <prvGetNextExpireTime+0x3c>)
   1f8a6:	681b      	ldr	r3, [r3, #0]
   1f8a8:	681b      	ldr	r3, [r3, #0]
   1f8aa:	425a      	negs	r2, r3
   1f8ac:	4153      	adcs	r3, r2
   1f8ae:	b2db      	uxtb	r3, r3
   1f8b0:	001a      	movs	r2, r3
   1f8b2:	687b      	ldr	r3, [r7, #4]
   1f8b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1f8b6:	687b      	ldr	r3, [r7, #4]
   1f8b8:	681b      	ldr	r3, [r3, #0]
   1f8ba:	2b00      	cmp	r3, #0
   1f8bc:	d105      	bne.n	1f8ca <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f8be:	4b06      	ldr	r3, [pc, #24]	; (1f8d8 <prvGetNextExpireTime+0x3c>)
   1f8c0:	681b      	ldr	r3, [r3, #0]
   1f8c2:	68db      	ldr	r3, [r3, #12]
   1f8c4:	681b      	ldr	r3, [r3, #0]
   1f8c6:	60fb      	str	r3, [r7, #12]
   1f8c8:	e001      	b.n	1f8ce <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1f8ca:	2300      	movs	r3, #0
   1f8cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1f8ce:	68fb      	ldr	r3, [r7, #12]
}
   1f8d0:	0018      	movs	r0, r3
   1f8d2:	46bd      	mov	sp, r7
   1f8d4:	b004      	add	sp, #16
   1f8d6:	bd80      	pop	{r7, pc}
   1f8d8:	20004098 	.word	0x20004098

0001f8dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1f8dc:	b580      	push	{r7, lr}
   1f8de:	b084      	sub	sp, #16
   1f8e0:	af00      	add	r7, sp, #0
   1f8e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1f8e4:	4b0c      	ldr	r3, [pc, #48]	; (1f918 <prvSampleTimeNow+0x3c>)
   1f8e6:	4798      	blx	r3
   1f8e8:	0003      	movs	r3, r0
   1f8ea:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1f8ec:	4b0b      	ldr	r3, [pc, #44]	; (1f91c <prvSampleTimeNow+0x40>)
   1f8ee:	681b      	ldr	r3, [r3, #0]
   1f8f0:	68fa      	ldr	r2, [r7, #12]
   1f8f2:	429a      	cmp	r2, r3
   1f8f4:	d205      	bcs.n	1f902 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1f8f6:	4b0a      	ldr	r3, [pc, #40]	; (1f920 <prvSampleTimeNow+0x44>)
   1f8f8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1f8fa:	687b      	ldr	r3, [r7, #4]
   1f8fc:	2201      	movs	r2, #1
   1f8fe:	601a      	str	r2, [r3, #0]
   1f900:	e002      	b.n	1f908 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1f902:	687b      	ldr	r3, [r7, #4]
   1f904:	2200      	movs	r2, #0
   1f906:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1f908:	4b04      	ldr	r3, [pc, #16]	; (1f91c <prvSampleTimeNow+0x40>)
   1f90a:	68fa      	ldr	r2, [r7, #12]
   1f90c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1f90e:	68fb      	ldr	r3, [r7, #12]
}
   1f910:	0018      	movs	r0, r3
   1f912:	46bd      	mov	sp, r7
   1f914:	b004      	add	sp, #16
   1f916:	bd80      	pop	{r7, pc}
   1f918:	0001e7b9 	.word	0x0001e7b9
   1f91c:	200040a8 	.word	0x200040a8
   1f920:	0001fac5 	.word	0x0001fac5

0001f924 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1f924:	b580      	push	{r7, lr}
   1f926:	b086      	sub	sp, #24
   1f928:	af00      	add	r7, sp, #0
   1f92a:	60f8      	str	r0, [r7, #12]
   1f92c:	60b9      	str	r1, [r7, #8]
   1f92e:	607a      	str	r2, [r7, #4]
   1f930:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1f932:	2300      	movs	r3, #0
   1f934:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1f936:	68fb      	ldr	r3, [r7, #12]
   1f938:	68ba      	ldr	r2, [r7, #8]
   1f93a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1f93c:	68fb      	ldr	r3, [r7, #12]
   1f93e:	68fa      	ldr	r2, [r7, #12]
   1f940:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1f942:	68ba      	ldr	r2, [r7, #8]
   1f944:	687b      	ldr	r3, [r7, #4]
   1f946:	429a      	cmp	r2, r3
   1f948:	d812      	bhi.n	1f970 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f94a:	687a      	ldr	r2, [r7, #4]
   1f94c:	683b      	ldr	r3, [r7, #0]
   1f94e:	1ad2      	subs	r2, r2, r3
   1f950:	68fb      	ldr	r3, [r7, #12]
   1f952:	699b      	ldr	r3, [r3, #24]
   1f954:	429a      	cmp	r2, r3
   1f956:	d302      	bcc.n	1f95e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1f958:	2301      	movs	r3, #1
   1f95a:	617b      	str	r3, [r7, #20]
   1f95c:	e01b      	b.n	1f996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1f95e:	4b10      	ldr	r3, [pc, #64]	; (1f9a0 <prvInsertTimerInActiveList+0x7c>)
   1f960:	681a      	ldr	r2, [r3, #0]
   1f962:	68fb      	ldr	r3, [r7, #12]
   1f964:	3304      	adds	r3, #4
   1f966:	0019      	movs	r1, r3
   1f968:	0010      	movs	r0, r2
   1f96a:	4b0e      	ldr	r3, [pc, #56]	; (1f9a4 <prvInsertTimerInActiveList+0x80>)
   1f96c:	4798      	blx	r3
   1f96e:	e012      	b.n	1f996 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1f970:	687a      	ldr	r2, [r7, #4]
   1f972:	683b      	ldr	r3, [r7, #0]
   1f974:	429a      	cmp	r2, r3
   1f976:	d206      	bcs.n	1f986 <prvInsertTimerInActiveList+0x62>
   1f978:	68ba      	ldr	r2, [r7, #8]
   1f97a:	683b      	ldr	r3, [r7, #0]
   1f97c:	429a      	cmp	r2, r3
   1f97e:	d302      	bcc.n	1f986 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1f980:	2301      	movs	r3, #1
   1f982:	617b      	str	r3, [r7, #20]
   1f984:	e007      	b.n	1f996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1f986:	4b08      	ldr	r3, [pc, #32]	; (1f9a8 <prvInsertTimerInActiveList+0x84>)
   1f988:	681a      	ldr	r2, [r3, #0]
   1f98a:	68fb      	ldr	r3, [r7, #12]
   1f98c:	3304      	adds	r3, #4
   1f98e:	0019      	movs	r1, r3
   1f990:	0010      	movs	r0, r2
   1f992:	4b04      	ldr	r3, [pc, #16]	; (1f9a4 <prvInsertTimerInActiveList+0x80>)
   1f994:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1f996:	697b      	ldr	r3, [r7, #20]
}
   1f998:	0018      	movs	r0, r3
   1f99a:	46bd      	mov	sp, r7
   1f99c:	b006      	add	sp, #24
   1f99e:	bd80      	pop	{r7, pc}
   1f9a0:	2000409c 	.word	0x2000409c
   1f9a4:	0001c187 	.word	0x0001c187
   1f9a8:	20004098 	.word	0x20004098

0001f9ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1f9ac:	b590      	push	{r4, r7, lr}
   1f9ae:	b08b      	sub	sp, #44	; 0x2c
   1f9b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1f9b2:	e068      	b.n	1fa86 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1f9b4:	2308      	movs	r3, #8
   1f9b6:	18fb      	adds	r3, r7, r3
   1f9b8:	681b      	ldr	r3, [r3, #0]
   1f9ba:	2b00      	cmp	r3, #0
   1f9bc:	db63      	blt.n	1fa86 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1f9be:	2308      	movs	r3, #8
   1f9c0:	18fb      	adds	r3, r7, r3
   1f9c2:	689b      	ldr	r3, [r3, #8]
   1f9c4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1f9c6:	69fb      	ldr	r3, [r7, #28]
   1f9c8:	695b      	ldr	r3, [r3, #20]
   1f9ca:	2b00      	cmp	r3, #0
   1f9cc:	d004      	beq.n	1f9d8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f9ce:	69fb      	ldr	r3, [r7, #28]
   1f9d0:	3304      	adds	r3, #4
   1f9d2:	0018      	movs	r0, r3
   1f9d4:	4b33      	ldr	r3, [pc, #204]	; (1faa4 <prvProcessReceivedCommands+0xf8>)
   1f9d6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1f9d8:	1d3b      	adds	r3, r7, #4
   1f9da:	0018      	movs	r0, r3
   1f9dc:	4b32      	ldr	r3, [pc, #200]	; (1faa8 <prvProcessReceivedCommands+0xfc>)
   1f9de:	4798      	blx	r3
   1f9e0:	0003      	movs	r3, r0
   1f9e2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1f9e4:	2308      	movs	r3, #8
   1f9e6:	18fb      	adds	r3, r7, r3
   1f9e8:	681b      	ldr	r3, [r3, #0]
   1f9ea:	2b09      	cmp	r3, #9
   1f9ec:	d84a      	bhi.n	1fa84 <prvProcessReceivedCommands+0xd8>
   1f9ee:	009a      	lsls	r2, r3, #2
   1f9f0:	4b2e      	ldr	r3, [pc, #184]	; (1faac <prvProcessReceivedCommands+0x100>)
   1f9f2:	18d3      	adds	r3, r2, r3
   1f9f4:	681b      	ldr	r3, [r3, #0]
   1f9f6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1f9f8:	2308      	movs	r3, #8
   1f9fa:	18fb      	adds	r3, r7, r3
   1f9fc:	685a      	ldr	r2, [r3, #4]
   1f9fe:	69fb      	ldr	r3, [r7, #28]
   1fa00:	699b      	ldr	r3, [r3, #24]
   1fa02:	18d1      	adds	r1, r2, r3
   1fa04:	2308      	movs	r3, #8
   1fa06:	18fb      	adds	r3, r7, r3
   1fa08:	685b      	ldr	r3, [r3, #4]
   1fa0a:	69ba      	ldr	r2, [r7, #24]
   1fa0c:	69f8      	ldr	r0, [r7, #28]
   1fa0e:	4c28      	ldr	r4, [pc, #160]	; (1fab0 <prvProcessReceivedCommands+0x104>)
   1fa10:	47a0      	blx	r4
   1fa12:	1e03      	subs	r3, r0, #0
   1fa14:	d037      	beq.n	1fa86 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fa16:	69fb      	ldr	r3, [r7, #28]
   1fa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fa1a:	69fa      	ldr	r2, [r7, #28]
   1fa1c:	0010      	movs	r0, r2
   1fa1e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fa20:	69fb      	ldr	r3, [r7, #28]
   1fa22:	69db      	ldr	r3, [r3, #28]
   1fa24:	2b01      	cmp	r3, #1
   1fa26:	d12e      	bne.n	1fa86 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1fa28:	2308      	movs	r3, #8
   1fa2a:	18fb      	adds	r3, r7, r3
   1fa2c:	685a      	ldr	r2, [r3, #4]
   1fa2e:	69fb      	ldr	r3, [r7, #28]
   1fa30:	699b      	ldr	r3, [r3, #24]
   1fa32:	18d2      	adds	r2, r2, r3
   1fa34:	69f8      	ldr	r0, [r7, #28]
   1fa36:	2300      	movs	r3, #0
   1fa38:	9300      	str	r3, [sp, #0]
   1fa3a:	2300      	movs	r3, #0
   1fa3c:	2100      	movs	r1, #0
   1fa3e:	4c1d      	ldr	r4, [pc, #116]	; (1fab4 <prvProcessReceivedCommands+0x108>)
   1fa40:	47a0      	blx	r4
   1fa42:	0003      	movs	r3, r0
   1fa44:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1fa46:	697b      	ldr	r3, [r7, #20]
   1fa48:	2b00      	cmp	r3, #0
   1fa4a:	d11c      	bne.n	1fa86 <prvProcessReceivedCommands+0xda>
   1fa4c:	b672      	cpsid	i
   1fa4e:	e7fe      	b.n	1fa4e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1fa50:	2308      	movs	r3, #8
   1fa52:	18fb      	adds	r3, r7, r3
   1fa54:	685a      	ldr	r2, [r3, #4]
   1fa56:	69fb      	ldr	r3, [r7, #28]
   1fa58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1fa5a:	69fb      	ldr	r3, [r7, #28]
   1fa5c:	699b      	ldr	r3, [r3, #24]
   1fa5e:	2b00      	cmp	r3, #0
   1fa60:	d101      	bne.n	1fa66 <prvProcessReceivedCommands+0xba>
   1fa62:	b672      	cpsid	i
   1fa64:	e7fe      	b.n	1fa64 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1fa66:	69fb      	ldr	r3, [r7, #28]
   1fa68:	699a      	ldr	r2, [r3, #24]
   1fa6a:	69bb      	ldr	r3, [r7, #24]
   1fa6c:	18d1      	adds	r1, r2, r3
   1fa6e:	69bb      	ldr	r3, [r7, #24]
   1fa70:	69ba      	ldr	r2, [r7, #24]
   1fa72:	69f8      	ldr	r0, [r7, #28]
   1fa74:	4c0e      	ldr	r4, [pc, #56]	; (1fab0 <prvProcessReceivedCommands+0x104>)
   1fa76:	47a0      	blx	r4
					break;
   1fa78:	e005      	b.n	1fa86 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1fa7a:	69fb      	ldr	r3, [r7, #28]
   1fa7c:	0018      	movs	r0, r3
   1fa7e:	4b0e      	ldr	r3, [pc, #56]	; (1fab8 <prvProcessReceivedCommands+0x10c>)
   1fa80:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1fa82:	e000      	b.n	1fa86 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1fa84:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1fa86:	4b0d      	ldr	r3, [pc, #52]	; (1fabc <prvProcessReceivedCommands+0x110>)
   1fa88:	681b      	ldr	r3, [r3, #0]
   1fa8a:	2208      	movs	r2, #8
   1fa8c:	18b9      	adds	r1, r7, r2
   1fa8e:	2200      	movs	r2, #0
   1fa90:	0018      	movs	r0, r3
   1fa92:	4b0b      	ldr	r3, [pc, #44]	; (1fac0 <prvProcessReceivedCommands+0x114>)
   1fa94:	4798      	blx	r3
   1fa96:	1e03      	subs	r3, r0, #0
   1fa98:	d18c      	bne.n	1f9b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1fa9a:	46c0      	nop			; (mov r8, r8)
   1fa9c:	46bd      	mov	sp, r7
   1fa9e:	b009      	add	sp, #36	; 0x24
   1faa0:	bd90      	pop	{r4, r7, pc}
   1faa2:	46c0      	nop			; (mov r8, r8)
   1faa4:	0001c1f3 	.word	0x0001c1f3
   1faa8:	0001f8dd 	.word	0x0001f8dd
   1faac:	0003b328 	.word	0x0003b328
   1fab0:	0001f925 	.word	0x0001f925
   1fab4:	0001f699 	.word	0x0001f699
   1fab8:	0001c575 	.word	0x0001c575
   1fabc:	200040a0 	.word	0x200040a0
   1fac0:	0001d1c5 	.word	0x0001d1c5

0001fac4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1fac4:	b590      	push	{r4, r7, lr}
   1fac6:	b089      	sub	sp, #36	; 0x24
   1fac8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1faca:	e03e      	b.n	1fb4a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1facc:	4b28      	ldr	r3, [pc, #160]	; (1fb70 <prvSwitchTimerLists+0xac>)
   1face:	681b      	ldr	r3, [r3, #0]
   1fad0:	68db      	ldr	r3, [r3, #12]
   1fad2:	681b      	ldr	r3, [r3, #0]
   1fad4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fad6:	4b26      	ldr	r3, [pc, #152]	; (1fb70 <prvSwitchTimerLists+0xac>)
   1fad8:	681b      	ldr	r3, [r3, #0]
   1fada:	68db      	ldr	r3, [r3, #12]
   1fadc:	68db      	ldr	r3, [r3, #12]
   1fade:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fae0:	693b      	ldr	r3, [r7, #16]
   1fae2:	3304      	adds	r3, #4
   1fae4:	0018      	movs	r0, r3
   1fae6:	4b23      	ldr	r3, [pc, #140]	; (1fb74 <prvSwitchTimerLists+0xb0>)
   1fae8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1faea:	693b      	ldr	r3, [r7, #16]
   1faec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1faee:	693a      	ldr	r2, [r7, #16]
   1faf0:	0010      	movs	r0, r2
   1faf2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1faf4:	693b      	ldr	r3, [r7, #16]
   1faf6:	69db      	ldr	r3, [r3, #28]
   1faf8:	2b01      	cmp	r3, #1
   1fafa:	d126      	bne.n	1fb4a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1fafc:	693b      	ldr	r3, [r7, #16]
   1fafe:	699a      	ldr	r2, [r3, #24]
   1fb00:	697b      	ldr	r3, [r7, #20]
   1fb02:	18d3      	adds	r3, r2, r3
   1fb04:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1fb06:	68fa      	ldr	r2, [r7, #12]
   1fb08:	697b      	ldr	r3, [r7, #20]
   1fb0a:	429a      	cmp	r2, r3
   1fb0c:	d90e      	bls.n	1fb2c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1fb0e:	693b      	ldr	r3, [r7, #16]
   1fb10:	68fa      	ldr	r2, [r7, #12]
   1fb12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1fb14:	693b      	ldr	r3, [r7, #16]
   1fb16:	693a      	ldr	r2, [r7, #16]
   1fb18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1fb1a:	4b15      	ldr	r3, [pc, #84]	; (1fb70 <prvSwitchTimerLists+0xac>)
   1fb1c:	681a      	ldr	r2, [r3, #0]
   1fb1e:	693b      	ldr	r3, [r7, #16]
   1fb20:	3304      	adds	r3, #4
   1fb22:	0019      	movs	r1, r3
   1fb24:	0010      	movs	r0, r2
   1fb26:	4b14      	ldr	r3, [pc, #80]	; (1fb78 <prvSwitchTimerLists+0xb4>)
   1fb28:	4798      	blx	r3
   1fb2a:	e00e      	b.n	1fb4a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1fb2c:	697a      	ldr	r2, [r7, #20]
   1fb2e:	6938      	ldr	r0, [r7, #16]
   1fb30:	2300      	movs	r3, #0
   1fb32:	9300      	str	r3, [sp, #0]
   1fb34:	2300      	movs	r3, #0
   1fb36:	2100      	movs	r1, #0
   1fb38:	4c10      	ldr	r4, [pc, #64]	; (1fb7c <prvSwitchTimerLists+0xb8>)
   1fb3a:	47a0      	blx	r4
   1fb3c:	0003      	movs	r3, r0
   1fb3e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1fb40:	68bb      	ldr	r3, [r7, #8]
   1fb42:	2b00      	cmp	r3, #0
   1fb44:	d101      	bne.n	1fb4a <prvSwitchTimerLists+0x86>
   1fb46:	b672      	cpsid	i
   1fb48:	e7fe      	b.n	1fb48 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1fb4a:	4b09      	ldr	r3, [pc, #36]	; (1fb70 <prvSwitchTimerLists+0xac>)
   1fb4c:	681b      	ldr	r3, [r3, #0]
   1fb4e:	681b      	ldr	r3, [r3, #0]
   1fb50:	2b00      	cmp	r3, #0
   1fb52:	d1bb      	bne.n	1facc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1fb54:	4b06      	ldr	r3, [pc, #24]	; (1fb70 <prvSwitchTimerLists+0xac>)
   1fb56:	681b      	ldr	r3, [r3, #0]
   1fb58:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1fb5a:	4b09      	ldr	r3, [pc, #36]	; (1fb80 <prvSwitchTimerLists+0xbc>)
   1fb5c:	681a      	ldr	r2, [r3, #0]
   1fb5e:	4b04      	ldr	r3, [pc, #16]	; (1fb70 <prvSwitchTimerLists+0xac>)
   1fb60:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1fb62:	4b07      	ldr	r3, [pc, #28]	; (1fb80 <prvSwitchTimerLists+0xbc>)
   1fb64:	687a      	ldr	r2, [r7, #4]
   1fb66:	601a      	str	r2, [r3, #0]
}
   1fb68:	46c0      	nop			; (mov r8, r8)
   1fb6a:	46bd      	mov	sp, r7
   1fb6c:	b007      	add	sp, #28
   1fb6e:	bd90      	pop	{r4, r7, pc}
   1fb70:	20004098 	.word	0x20004098
   1fb74:	0001c1f3 	.word	0x0001c1f3
   1fb78:	0001c187 	.word	0x0001c187
   1fb7c:	0001f699 	.word	0x0001f699
   1fb80:	2000409c 	.word	0x2000409c

0001fb84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1fb84:	b580      	push	{r7, lr}
   1fb86:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1fb88:	4b10      	ldr	r3, [pc, #64]	; (1fbcc <prvCheckForValidListAndQueue+0x48>)
   1fb8a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1fb8c:	4b10      	ldr	r3, [pc, #64]	; (1fbd0 <prvCheckForValidListAndQueue+0x4c>)
   1fb8e:	681b      	ldr	r3, [r3, #0]
   1fb90:	2b00      	cmp	r3, #0
   1fb92:	d115      	bne.n	1fbc0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1fb94:	4b0f      	ldr	r3, [pc, #60]	; (1fbd4 <prvCheckForValidListAndQueue+0x50>)
   1fb96:	0018      	movs	r0, r3
   1fb98:	4b0f      	ldr	r3, [pc, #60]	; (1fbd8 <prvCheckForValidListAndQueue+0x54>)
   1fb9a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1fb9c:	4b0f      	ldr	r3, [pc, #60]	; (1fbdc <prvCheckForValidListAndQueue+0x58>)
   1fb9e:	0018      	movs	r0, r3
   1fba0:	4b0d      	ldr	r3, [pc, #52]	; (1fbd8 <prvCheckForValidListAndQueue+0x54>)
   1fba2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1fba4:	4b0e      	ldr	r3, [pc, #56]	; (1fbe0 <prvCheckForValidListAndQueue+0x5c>)
   1fba6:	4a0b      	ldr	r2, [pc, #44]	; (1fbd4 <prvCheckForValidListAndQueue+0x50>)
   1fba8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1fbaa:	4b0e      	ldr	r3, [pc, #56]	; (1fbe4 <prvCheckForValidListAndQueue+0x60>)
   1fbac:	4a0b      	ldr	r2, [pc, #44]	; (1fbdc <prvCheckForValidListAndQueue+0x58>)
   1fbae:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1fbb0:	2200      	movs	r2, #0
   1fbb2:	210c      	movs	r1, #12
   1fbb4:	2005      	movs	r0, #5
   1fbb6:	4b0c      	ldr	r3, [pc, #48]	; (1fbe8 <prvCheckForValidListAndQueue+0x64>)
   1fbb8:	4798      	blx	r3
   1fbba:	0002      	movs	r2, r0
   1fbbc:	4b04      	ldr	r3, [pc, #16]	; (1fbd0 <prvCheckForValidListAndQueue+0x4c>)
   1fbbe:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1fbc0:	4b0a      	ldr	r3, [pc, #40]	; (1fbec <prvCheckForValidListAndQueue+0x68>)
   1fbc2:	4798      	blx	r3
}
   1fbc4:	46c0      	nop			; (mov r8, r8)
   1fbc6:	46bd      	mov	sp, r7
   1fbc8:	bd80      	pop	{r7, pc}
   1fbca:	46c0      	nop			; (mov r8, r8)
   1fbcc:	0001c379 	.word	0x0001c379
   1fbd0:	200040a0 	.word	0x200040a0
   1fbd4:	20004070 	.word	0x20004070
   1fbd8:	0001c0f1 	.word	0x0001c0f1
   1fbdc:	20004084 	.word	0x20004084
   1fbe0:	20004098 	.word	0x20004098
   1fbe4:	2000409c 	.word	0x2000409c
   1fbe8:	0001c665 	.word	0x0001c665
   1fbec:	0001c39d 	.word	0x0001c39d

0001fbf0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1fbf0:	b580      	push	{r7, lr}
   1fbf2:	b082      	sub	sp, #8
   1fbf4:	af00      	add	r7, sp, #0
   1fbf6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1fbf8:	687b      	ldr	r3, [r7, #4]
   1fbfa:	7c1b      	ldrb	r3, [r3, #16]
   1fbfc:	2b00      	cmp	r3, #0
   1fbfe:	d00b      	beq.n	1fc18 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fc00:	687b      	ldr	r3, [r7, #4]
   1fc02:	689b      	ldr	r3, [r3, #8]
   1fc04:	1c5a      	adds	r2, r3, #1
   1fc06:	687b      	ldr	r3, [r7, #4]
   1fc08:	68d9      	ldr	r1, [r3, #12]
   1fc0a:	4b10      	ldr	r3, [pc, #64]	; (1fc4c <advance_pointer+0x5c>)
   1fc0c:	0010      	movs	r0, r2
   1fc0e:	4798      	blx	r3
   1fc10:	000b      	movs	r3, r1
   1fc12:	001a      	movs	r2, r3
   1fc14:	687b      	ldr	r3, [r7, #4]
   1fc16:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1fc18:	687b      	ldr	r3, [r7, #4]
   1fc1a:	685b      	ldr	r3, [r3, #4]
   1fc1c:	1c5a      	adds	r2, r3, #1
   1fc1e:	687b      	ldr	r3, [r7, #4]
   1fc20:	68d9      	ldr	r1, [r3, #12]
   1fc22:	4b0a      	ldr	r3, [pc, #40]	; (1fc4c <advance_pointer+0x5c>)
   1fc24:	0010      	movs	r0, r2
   1fc26:	4798      	blx	r3
   1fc28:	000b      	movs	r3, r1
   1fc2a:	001a      	movs	r2, r3
   1fc2c:	687b      	ldr	r3, [r7, #4]
   1fc2e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1fc30:	687b      	ldr	r3, [r7, #4]
   1fc32:	685a      	ldr	r2, [r3, #4]
   1fc34:	687b      	ldr	r3, [r7, #4]
   1fc36:	689b      	ldr	r3, [r3, #8]
   1fc38:	1ad3      	subs	r3, r2, r3
   1fc3a:	425a      	negs	r2, r3
   1fc3c:	4153      	adcs	r3, r2
   1fc3e:	b2da      	uxtb	r2, r3
   1fc40:	687b      	ldr	r3, [r7, #4]
   1fc42:	741a      	strb	r2, [r3, #16]
 }
   1fc44:	46c0      	nop			; (mov r8, r8)
   1fc46:	46bd      	mov	sp, r7
   1fc48:	b002      	add	sp, #8
   1fc4a:	bd80      	pop	{r7, pc}
   1fc4c:	00034d01 	.word	0x00034d01

0001fc50 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1fc50:	b580      	push	{r7, lr}
   1fc52:	b082      	sub	sp, #8
   1fc54:	af00      	add	r7, sp, #0
   1fc56:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1fc58:	687b      	ldr	r3, [r7, #4]
   1fc5a:	2200      	movs	r2, #0
   1fc5c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fc5e:	687b      	ldr	r3, [r7, #4]
   1fc60:	689b      	ldr	r3, [r3, #8]
   1fc62:	1c5a      	adds	r2, r3, #1
   1fc64:	687b      	ldr	r3, [r7, #4]
   1fc66:	68d9      	ldr	r1, [r3, #12]
   1fc68:	4b05      	ldr	r3, [pc, #20]	; (1fc80 <retreat_pointer+0x30>)
   1fc6a:	0010      	movs	r0, r2
   1fc6c:	4798      	blx	r3
   1fc6e:	000b      	movs	r3, r1
   1fc70:	001a      	movs	r2, r3
   1fc72:	687b      	ldr	r3, [r7, #4]
   1fc74:	609a      	str	r2, [r3, #8]
 }
   1fc76:	46c0      	nop			; (mov r8, r8)
   1fc78:	46bd      	mov	sp, r7
   1fc7a:	b002      	add	sp, #8
   1fc7c:	bd80      	pop	{r7, pc}
   1fc7e:	46c0      	nop			; (mov r8, r8)
   1fc80:	00034d01 	.word	0x00034d01

0001fc84 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1fc84:	b580      	push	{r7, lr}
   1fc86:	b084      	sub	sp, #16
   1fc88:	af00      	add	r7, sp, #0
   1fc8a:	6078      	str	r0, [r7, #4]
   1fc8c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1fc8e:	2014      	movs	r0, #20
   1fc90:	4b09      	ldr	r3, [pc, #36]	; (1fcb8 <circular_buf_init+0x34>)
   1fc92:	4798      	blx	r3
   1fc94:	0003      	movs	r3, r0
   1fc96:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1fc98:	68fb      	ldr	r3, [r7, #12]
   1fc9a:	687a      	ldr	r2, [r7, #4]
   1fc9c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1fc9e:	68fb      	ldr	r3, [r7, #12]
   1fca0:	683a      	ldr	r2, [r7, #0]
   1fca2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1fca4:	68fb      	ldr	r3, [r7, #12]
   1fca6:	0018      	movs	r0, r3
   1fca8:	4b04      	ldr	r3, [pc, #16]	; (1fcbc <circular_buf_init+0x38>)
   1fcaa:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1fcac:	68fb      	ldr	r3, [r7, #12]
 }
   1fcae:	0018      	movs	r0, r3
   1fcb0:	46bd      	mov	sp, r7
   1fcb2:	b004      	add	sp, #16
   1fcb4:	bd80      	pop	{r7, pc}
   1fcb6:	46c0      	nop			; (mov r8, r8)
   1fcb8:	000377c1 	.word	0x000377c1
   1fcbc:	0001fcc1 	.word	0x0001fcc1

0001fcc0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1fcc0:	b580      	push	{r7, lr}
   1fcc2:	b082      	sub	sp, #8
   1fcc4:	af00      	add	r7, sp, #0
   1fcc6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1fcc8:	687b      	ldr	r3, [r7, #4]
   1fcca:	2200      	movs	r2, #0
   1fccc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1fcce:	687b      	ldr	r3, [r7, #4]
   1fcd0:	2200      	movs	r2, #0
   1fcd2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1fcd4:	687b      	ldr	r3, [r7, #4]
   1fcd6:	2200      	movs	r2, #0
   1fcd8:	741a      	strb	r2, [r3, #16]
 }
   1fcda:	46c0      	nop			; (mov r8, r8)
   1fcdc:	46bd      	mov	sp, r7
   1fcde:	b002      	add	sp, #8
   1fce0:	bd80      	pop	{r7, pc}
	...

0001fce4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1fce4:	b580      	push	{r7, lr}
   1fce6:	b082      	sub	sp, #8
   1fce8:	af00      	add	r7, sp, #0
   1fcea:	6078      	str	r0, [r7, #4]
   1fcec:	000a      	movs	r2, r1
   1fcee:	1cfb      	adds	r3, r7, #3
   1fcf0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1fcf2:	687b      	ldr	r3, [r7, #4]
   1fcf4:	681a      	ldr	r2, [r3, #0]
   1fcf6:	687b      	ldr	r3, [r7, #4]
   1fcf8:	685b      	ldr	r3, [r3, #4]
   1fcfa:	18d3      	adds	r3, r2, r3
   1fcfc:	1cfa      	adds	r2, r7, #3
   1fcfe:	7812      	ldrb	r2, [r2, #0]
   1fd00:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1fd02:	687b      	ldr	r3, [r7, #4]
   1fd04:	0018      	movs	r0, r3
   1fd06:	4b03      	ldr	r3, [pc, #12]	; (1fd14 <circular_buf_put+0x30>)
   1fd08:	4798      	blx	r3
 }
   1fd0a:	46c0      	nop			; (mov r8, r8)
   1fd0c:	46bd      	mov	sp, r7
   1fd0e:	b002      	add	sp, #8
   1fd10:	bd80      	pop	{r7, pc}
   1fd12:	46c0      	nop			; (mov r8, r8)
   1fd14:	0001fbf1 	.word	0x0001fbf1

0001fd18 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1fd18:	b580      	push	{r7, lr}
   1fd1a:	b084      	sub	sp, #16
   1fd1c:	af00      	add	r7, sp, #0
   1fd1e:	6078      	str	r0, [r7, #4]
   1fd20:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1fd22:	2301      	movs	r3, #1
   1fd24:	425b      	negs	r3, r3
   1fd26:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1fd28:	687b      	ldr	r3, [r7, #4]
   1fd2a:	0018      	movs	r0, r3
   1fd2c:	4b0d      	ldr	r3, [pc, #52]	; (1fd64 <circular_buf_get+0x4c>)
   1fd2e:	4798      	blx	r3
   1fd30:	0003      	movs	r3, r0
   1fd32:	001a      	movs	r2, r3
   1fd34:	2301      	movs	r3, #1
   1fd36:	4053      	eors	r3, r2
   1fd38:	b2db      	uxtb	r3, r3
   1fd3a:	2b00      	cmp	r3, #0
   1fd3c:	d00d      	beq.n	1fd5a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1fd3e:	687b      	ldr	r3, [r7, #4]
   1fd40:	681a      	ldr	r2, [r3, #0]
   1fd42:	687b      	ldr	r3, [r7, #4]
   1fd44:	689b      	ldr	r3, [r3, #8]
   1fd46:	18d3      	adds	r3, r2, r3
   1fd48:	781a      	ldrb	r2, [r3, #0]
   1fd4a:	683b      	ldr	r3, [r7, #0]
   1fd4c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1fd4e:	687b      	ldr	r3, [r7, #4]
   1fd50:	0018      	movs	r0, r3
   1fd52:	4b05      	ldr	r3, [pc, #20]	; (1fd68 <circular_buf_get+0x50>)
   1fd54:	4798      	blx	r3

		 r = 0;
   1fd56:	2300      	movs	r3, #0
   1fd58:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1fd5a:	68fb      	ldr	r3, [r7, #12]
 }
   1fd5c:	0018      	movs	r0, r3
   1fd5e:	46bd      	mov	sp, r7
   1fd60:	b004      	add	sp, #16
   1fd62:	bd80      	pop	{r7, pc}
   1fd64:	0001fd6d 	.word	0x0001fd6d
   1fd68:	0001fc51 	.word	0x0001fc51

0001fd6c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1fd6c:	b580      	push	{r7, lr}
   1fd6e:	b082      	sub	sp, #8
   1fd70:	af00      	add	r7, sp, #0
   1fd72:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1fd74:	687b      	ldr	r3, [r7, #4]
   1fd76:	7c1b      	ldrb	r3, [r3, #16]
   1fd78:	2201      	movs	r2, #1
   1fd7a:	4053      	eors	r3, r2
   1fd7c:	b2db      	uxtb	r3, r3
   1fd7e:	2b00      	cmp	r3, #0
   1fd80:	d007      	beq.n	1fd92 <circular_buf_empty+0x26>
   1fd82:	687b      	ldr	r3, [r7, #4]
   1fd84:	685a      	ldr	r2, [r3, #4]
   1fd86:	687b      	ldr	r3, [r7, #4]
   1fd88:	689b      	ldr	r3, [r3, #8]
   1fd8a:	429a      	cmp	r2, r3
   1fd8c:	d101      	bne.n	1fd92 <circular_buf_empty+0x26>
   1fd8e:	2301      	movs	r3, #1
   1fd90:	e000      	b.n	1fd94 <circular_buf_empty+0x28>
   1fd92:	2300      	movs	r3, #0
   1fd94:	1c1a      	adds	r2, r3, #0
   1fd96:	2301      	movs	r3, #1
   1fd98:	4013      	ands	r3, r2
   1fd9a:	b2db      	uxtb	r3, r3
 }
   1fd9c:	0018      	movs	r0, r3
   1fd9e:	46bd      	mov	sp, r7
   1fda0:	b002      	add	sp, #8
   1fda2:	bd80      	pop	{r7, pc}

0001fda4 <system_interrupt_enable>:
{
   1fda4:	b580      	push	{r7, lr}
   1fda6:	b082      	sub	sp, #8
   1fda8:	af00      	add	r7, sp, #0
   1fdaa:	0002      	movs	r2, r0
   1fdac:	1dfb      	adds	r3, r7, #7
   1fdae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fdb0:	4b06      	ldr	r3, [pc, #24]	; (1fdcc <system_interrupt_enable+0x28>)
   1fdb2:	1dfa      	adds	r2, r7, #7
   1fdb4:	7812      	ldrb	r2, [r2, #0]
   1fdb6:	0011      	movs	r1, r2
   1fdb8:	221f      	movs	r2, #31
   1fdba:	400a      	ands	r2, r1
   1fdbc:	2101      	movs	r1, #1
   1fdbe:	4091      	lsls	r1, r2
   1fdc0:	000a      	movs	r2, r1
   1fdc2:	601a      	str	r2, [r3, #0]
}
   1fdc4:	46c0      	nop			; (mov r8, r8)
   1fdc6:	46bd      	mov	sp, r7
   1fdc8:	b002      	add	sp, #8
   1fdca:	bd80      	pop	{r7, pc}
   1fdcc:	e000e100 	.word	0xe000e100

0001fdd0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1fdd0:	b580      	push	{r7, lr}
   1fdd2:	b084      	sub	sp, #16
   1fdd4:	af00      	add	r7, sp, #0
   1fdd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1fdd8:	687b      	ldr	r3, [r7, #4]
   1fdda:	681b      	ldr	r3, [r3, #0]
   1fddc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1fdde:	68fb      	ldr	r3, [r7, #12]
   1fde0:	69db      	ldr	r3, [r3, #28]
   1fde2:	1e5a      	subs	r2, r3, #1
   1fde4:	4193      	sbcs	r3, r2
   1fde6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1fde8:	0018      	movs	r0, r3
   1fdea:	46bd      	mov	sp, r7
   1fdec:	b004      	add	sp, #16
   1fdee:	bd80      	pop	{r7, pc}

0001fdf0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1fdf0:	b580      	push	{r7, lr}
   1fdf2:	b082      	sub	sp, #8
   1fdf4:	af00      	add	r7, sp, #0
   1fdf6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1fdf8:	46c0      	nop			; (mov r8, r8)
   1fdfa:	687b      	ldr	r3, [r7, #4]
   1fdfc:	0018      	movs	r0, r3
   1fdfe:	4b04      	ldr	r3, [pc, #16]	; (1fe10 <_usart_wait_for_sync+0x20>)
   1fe00:	4798      	blx	r3
   1fe02:	1e03      	subs	r3, r0, #0
   1fe04:	d1f9      	bne.n	1fdfa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1fe06:	46c0      	nop			; (mov r8, r8)
   1fe08:	46bd      	mov	sp, r7
   1fe0a:	b002      	add	sp, #8
   1fe0c:	bd80      	pop	{r7, pc}
   1fe0e:	46c0      	nop			; (mov r8, r8)
   1fe10:	0001fdd1 	.word	0x0001fdd1

0001fe14 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1fe14:	b580      	push	{r7, lr}
   1fe16:	b082      	sub	sp, #8
   1fe18:	af00      	add	r7, sp, #0
   1fe1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1fe1c:	687b      	ldr	r3, [r7, #4]
   1fe1e:	2280      	movs	r2, #128	; 0x80
   1fe20:	05d2      	lsls	r2, r2, #23
   1fe22:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1fe24:	687b      	ldr	r3, [r7, #4]
   1fe26:	2200      	movs	r2, #0
   1fe28:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1fe2a:	687b      	ldr	r3, [r7, #4]
   1fe2c:	22ff      	movs	r2, #255	; 0xff
   1fe2e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1fe30:	687b      	ldr	r3, [r7, #4]
   1fe32:	2200      	movs	r2, #0
   1fe34:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1fe36:	687b      	ldr	r3, [r7, #4]
   1fe38:	2200      	movs	r2, #0
   1fe3a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1fe3c:	687b      	ldr	r3, [r7, #4]
   1fe3e:	2296      	movs	r2, #150	; 0x96
   1fe40:	0192      	lsls	r2, r2, #6
   1fe42:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1fe44:	687b      	ldr	r3, [r7, #4]
   1fe46:	2224      	movs	r2, #36	; 0x24
   1fe48:	2101      	movs	r1, #1
   1fe4a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1fe4c:	687b      	ldr	r3, [r7, #4]
   1fe4e:	2225      	movs	r2, #37	; 0x25
   1fe50:	2101      	movs	r1, #1
   1fe52:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1fe54:	687b      	ldr	r3, [r7, #4]
   1fe56:	2226      	movs	r2, #38	; 0x26
   1fe58:	2100      	movs	r1, #0
   1fe5a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1fe5c:	687b      	ldr	r3, [r7, #4]
   1fe5e:	2227      	movs	r2, #39	; 0x27
   1fe60:	2100      	movs	r1, #0
   1fe62:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1fe64:	687b      	ldr	r3, [r7, #4]
   1fe66:	2200      	movs	r2, #0
   1fe68:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1fe6a:	687b      	ldr	r3, [r7, #4]
   1fe6c:	2288      	movs	r2, #136	; 0x88
   1fe6e:	0352      	lsls	r2, r2, #13
   1fe70:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1fe72:	687b      	ldr	r3, [r7, #4]
   1fe74:	222c      	movs	r2, #44	; 0x2c
   1fe76:	2100      	movs	r1, #0
   1fe78:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1fe7a:	687b      	ldr	r3, [r7, #4]
   1fe7c:	222d      	movs	r2, #45	; 0x2d
   1fe7e:	2100      	movs	r1, #0
   1fe80:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1fe82:	687b      	ldr	r3, [r7, #4]
   1fe84:	2200      	movs	r2, #0
   1fe86:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1fe88:	687b      	ldr	r3, [r7, #4]
   1fe8a:	2200      	movs	r2, #0
   1fe8c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1fe8e:	687b      	ldr	r3, [r7, #4]
   1fe90:	2200      	movs	r2, #0
   1fe92:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1fe94:	687b      	ldr	r3, [r7, #4]
   1fe96:	2200      	movs	r2, #0
   1fe98:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1fe9a:	687b      	ldr	r3, [r7, #4]
   1fe9c:	2200      	movs	r2, #0
   1fe9e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1fea0:	687b      	ldr	r3, [r7, #4]
   1fea2:	2200      	movs	r2, #0
   1fea4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1fea6:	687b      	ldr	r3, [r7, #4]
   1fea8:	2200      	movs	r2, #0
   1feaa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1feac:	687b      	ldr	r3, [r7, #4]
   1feae:	2200      	movs	r2, #0
   1feb0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1feb2:	687b      	ldr	r3, [r7, #4]
   1feb4:	2200      	movs	r2, #0
   1feb6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1feb8:	687b      	ldr	r3, [r7, #4]
   1feba:	2200      	movs	r2, #0
   1febc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1febe:	687b      	ldr	r3, [r7, #4]
   1fec0:	2213      	movs	r2, #19
   1fec2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1fec4:	687b      	ldr	r3, [r7, #4]
   1fec6:	2200      	movs	r2, #0
   1fec8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1feca:	46c0      	nop			; (mov r8, r8)
   1fecc:	46bd      	mov	sp, r7
   1fece:	b002      	add	sp, #8
   1fed0:	bd80      	pop	{r7, pc}
	...

0001fed4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1fed4:	b580      	push	{r7, lr}
   1fed6:	b084      	sub	sp, #16
   1fed8:	af00      	add	r7, sp, #0
   1feda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1fedc:	687b      	ldr	r3, [r7, #4]
   1fede:	681b      	ldr	r3, [r3, #0]
   1fee0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1fee2:	687b      	ldr	r3, [r7, #4]
   1fee4:	681b      	ldr	r3, [r3, #0]
   1fee6:	0018      	movs	r0, r3
   1fee8:	4b09      	ldr	r3, [pc, #36]	; (1ff10 <usart_enable+0x3c>)
   1feea:	4798      	blx	r3
   1feec:	0003      	movs	r3, r0
   1feee:	0018      	movs	r0, r3
   1fef0:	4b08      	ldr	r3, [pc, #32]	; (1ff14 <usart_enable+0x40>)
   1fef2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1fef4:	687b      	ldr	r3, [r7, #4]
   1fef6:	0018      	movs	r0, r3
   1fef8:	4b07      	ldr	r3, [pc, #28]	; (1ff18 <usart_enable+0x44>)
   1fefa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1fefc:	68fb      	ldr	r3, [r7, #12]
   1fefe:	681b      	ldr	r3, [r3, #0]
   1ff00:	2202      	movs	r2, #2
   1ff02:	431a      	orrs	r2, r3
   1ff04:	68fb      	ldr	r3, [r7, #12]
   1ff06:	601a      	str	r2, [r3, #0]
}
   1ff08:	46c0      	nop			; (mov r8, r8)
   1ff0a:	46bd      	mov	sp, r7
   1ff0c:	b004      	add	sp, #16
   1ff0e:	bd80      	pop	{r7, pc}
   1ff10:	00029865 	.word	0x00029865
   1ff14:	0001fda5 	.word	0x0001fda5
   1ff18:	0001fdf1 	.word	0x0001fdf1

0001ff1c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1ff1c:	b580      	push	{r7, lr}
   1ff1e:	b082      	sub	sp, #8
   1ff20:	af00      	add	r7, sp, #0
   1ff22:	6078      	str	r0, [r7, #4]
   1ff24:	000a      	movs	r2, r1
   1ff26:	1cfb      	adds	r3, r7, #3
   1ff28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1ff2a:	687b      	ldr	r3, [r7, #4]
   1ff2c:	2231      	movs	r2, #49	; 0x31
   1ff2e:	5c9b      	ldrb	r3, [r3, r2]
   1ff30:	b25a      	sxtb	r2, r3
   1ff32:	1cfb      	adds	r3, r7, #3
   1ff34:	781b      	ldrb	r3, [r3, #0]
   1ff36:	2101      	movs	r1, #1
   1ff38:	4099      	lsls	r1, r3
   1ff3a:	000b      	movs	r3, r1
   1ff3c:	b25b      	sxtb	r3, r3
   1ff3e:	4313      	orrs	r3, r2
   1ff40:	b25b      	sxtb	r3, r3
   1ff42:	b2d9      	uxtb	r1, r3
   1ff44:	687b      	ldr	r3, [r7, #4]
   1ff46:	2231      	movs	r2, #49	; 0x31
   1ff48:	5499      	strb	r1, [r3, r2]

}
   1ff4a:	46c0      	nop			; (mov r8, r8)
   1ff4c:	46bd      	mov	sp, r7
   1ff4e:	b002      	add	sp, #8
   1ff50:	bd80      	pop	{r7, pc}
	...

0001ff54 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1ff54:	b580      	push	{r7, lr}
   1ff56:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1ff58:	2380      	movs	r3, #128	; 0x80
   1ff5a:	009a      	lsls	r2, r3, #2
   1ff5c:	4b0f      	ldr	r3, [pc, #60]	; (1ff9c <InitializeSerialConsole+0x48>)
   1ff5e:	0011      	movs	r1, r2
   1ff60:	0018      	movs	r0, r3
   1ff62:	4b0f      	ldr	r3, [pc, #60]	; (1ffa0 <InitializeSerialConsole+0x4c>)
   1ff64:	4798      	blx	r3
   1ff66:	0002      	movs	r2, r0
   1ff68:	4b0e      	ldr	r3, [pc, #56]	; (1ffa4 <InitializeSerialConsole+0x50>)
   1ff6a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1ff6c:	2380      	movs	r3, #128	; 0x80
   1ff6e:	009a      	lsls	r2, r3, #2
   1ff70:	4b0d      	ldr	r3, [pc, #52]	; (1ffa8 <InitializeSerialConsole+0x54>)
   1ff72:	0011      	movs	r1, r2
   1ff74:	0018      	movs	r0, r3
   1ff76:	4b0a      	ldr	r3, [pc, #40]	; (1ffa0 <InitializeSerialConsole+0x4c>)
   1ff78:	4798      	blx	r3
   1ff7a:	0002      	movs	r2, r0
   1ff7c:	4b0b      	ldr	r3, [pc, #44]	; (1ffac <InitializeSerialConsole+0x58>)
   1ff7e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1ff80:	4b0b      	ldr	r3, [pc, #44]	; (1ffb0 <InitializeSerialConsole+0x5c>)
   1ff82:	4798      	blx	r3
    configure_usart_callbacks();
   1ff84:	4b0b      	ldr	r3, [pc, #44]	; (1ffb4 <InitializeSerialConsole+0x60>)
   1ff86:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1ff88:	490b      	ldr	r1, [pc, #44]	; (1ffb8 <InitializeSerialConsole+0x64>)
   1ff8a:	4b0c      	ldr	r3, [pc, #48]	; (1ffbc <InitializeSerialConsole+0x68>)
   1ff8c:	2201      	movs	r2, #1
   1ff8e:	0018      	movs	r0, r3
   1ff90:	4b0b      	ldr	r3, [pc, #44]	; (1ffc0 <InitializeSerialConsole+0x6c>)
   1ff92:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1ff94:	46c0      	nop			; (mov r8, r8)
   1ff96:	46bd      	mov	sp, r7
   1ff98:	bd80      	pop	{r7, pc}
   1ff9a:	46c0      	nop			; (mov r8, r8)
   1ff9c:	20005718 	.word	0x20005718
   1ffa0:	0001fc85 	.word	0x0001fc85
   1ffa4:	20005510 	.word	0x20005510
   1ffa8:	20005518 	.word	0x20005518
   1ffac:	2000591c 	.word	0x2000591c
   1ffb0:	00020129 	.word	0x00020129
   1ffb4:	000201a1 	.word	0x000201a1
   1ffb8:	20005514 	.word	0x20005514
   1ffbc:	200054dc 	.word	0x200054dc
   1ffc0:	0002b169 	.word	0x0002b169

0001ffc4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ffc4:	b580      	push	{r7, lr}
   1ffc6:	b084      	sub	sp, #16
   1ffc8:	af00      	add	r7, sp, #0
   1ffca:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ffcc:	4b1a      	ldr	r3, [pc, #104]	; (20038 <SerialConsoleWriteString+0x74>)
   1ffce:	4798      	blx	r3
    if (string != NULL) {
   1ffd0:	687b      	ldr	r3, [r7, #4]
   1ffd2:	2b00      	cmp	r3, #0
   1ffd4:	d02a      	beq.n	2002c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ffd6:	2300      	movs	r3, #0
   1ffd8:	60fb      	str	r3, [r7, #12]
   1ffda:	e00b      	b.n	1fff4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ffdc:	4b17      	ldr	r3, [pc, #92]	; (2003c <SerialConsoleWriteString+0x78>)
   1ffde:	6818      	ldr	r0, [r3, #0]
   1ffe0:	687a      	ldr	r2, [r7, #4]
   1ffe2:	68fb      	ldr	r3, [r7, #12]
   1ffe4:	18d3      	adds	r3, r2, r3
   1ffe6:	781b      	ldrb	r3, [r3, #0]
   1ffe8:	0019      	movs	r1, r3
   1ffea:	4b15      	ldr	r3, [pc, #84]	; (20040 <SerialConsoleWriteString+0x7c>)
   1ffec:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ffee:	68fb      	ldr	r3, [r7, #12]
   1fff0:	3301      	adds	r3, #1
   1fff2:	60fb      	str	r3, [r7, #12]
   1fff4:	687b      	ldr	r3, [r7, #4]
   1fff6:	0018      	movs	r0, r3
   1fff8:	4b12      	ldr	r3, [pc, #72]	; (20044 <SerialConsoleWriteString+0x80>)
   1fffa:	4798      	blx	r3
   1fffc:	0002      	movs	r2, r0
   1fffe:	68fb      	ldr	r3, [r7, #12]
   20000:	429a      	cmp	r2, r3
   20002:	d8eb      	bhi.n	1ffdc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   20004:	4b10      	ldr	r3, [pc, #64]	; (20048 <SerialConsoleWriteString+0x84>)
   20006:	2101      	movs	r1, #1
   20008:	0018      	movs	r0, r3
   2000a:	4b10      	ldr	r3, [pc, #64]	; (2004c <SerialConsoleWriteString+0x88>)
   2000c:	4798      	blx	r3
   2000e:	1e03      	subs	r3, r0, #0
   20010:	d10c      	bne.n	2002c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   20012:	4b0a      	ldr	r3, [pc, #40]	; (2003c <SerialConsoleWriteString+0x78>)
   20014:	681b      	ldr	r3, [r3, #0]
   20016:	4a0e      	ldr	r2, [pc, #56]	; (20050 <SerialConsoleWriteString+0x8c>)
   20018:	0011      	movs	r1, r2
   2001a:	0018      	movs	r0, r3
   2001c:	4b0d      	ldr	r3, [pc, #52]	; (20054 <SerialConsoleWriteString+0x90>)
   2001e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20020:	490b      	ldr	r1, [pc, #44]	; (20050 <SerialConsoleWriteString+0x8c>)
   20022:	4b09      	ldr	r3, [pc, #36]	; (20048 <SerialConsoleWriteString+0x84>)
   20024:	2201      	movs	r2, #1
   20026:	0018      	movs	r0, r3
   20028:	4b0b      	ldr	r3, [pc, #44]	; (20058 <SerialConsoleWriteString+0x94>)
   2002a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   2002c:	4b0b      	ldr	r3, [pc, #44]	; (2005c <SerialConsoleWriteString+0x98>)
   2002e:	4798      	blx	r3
}
   20030:	46c0      	nop			; (mov r8, r8)
   20032:	46bd      	mov	sp, r7
   20034:	b004      	add	sp, #16
   20036:	bd80      	pop	{r7, pc}
   20038:	0001e631 	.word	0x0001e631
   2003c:	2000591c 	.word	0x2000591c
   20040:	0001fce5 	.word	0x0001fce5
   20044:	00037bd7 	.word	0x00037bd7
   20048:	200054dc 	.word	0x200054dc
   2004c:	0002b1b1 	.word	0x0002b1b1
   20050:	20005918 	.word	0x20005918
   20054:	0001fd19 	.word	0x0001fd19
   20058:	0002b121 	.word	0x0002b121
   2005c:	0001e649 	.word	0x0001e649

00020060 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   20060:	b580      	push	{r7, lr}
   20062:	b084      	sub	sp, #16
   20064:	af00      	add	r7, sp, #0
   20066:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   20068:	4b08      	ldr	r3, [pc, #32]	; (2008c <SerialConsoleReadCharacter+0x2c>)
   2006a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   2006c:	4b08      	ldr	r3, [pc, #32]	; (20090 <SerialConsoleReadCharacter+0x30>)
   2006e:	681b      	ldr	r3, [r3, #0]
   20070:	687a      	ldr	r2, [r7, #4]
   20072:	0011      	movs	r1, r2
   20074:	0018      	movs	r0, r3
   20076:	4b07      	ldr	r3, [pc, #28]	; (20094 <SerialConsoleReadCharacter+0x34>)
   20078:	4798      	blx	r3
   2007a:	0003      	movs	r3, r0
   2007c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   2007e:	4b06      	ldr	r3, [pc, #24]	; (20098 <SerialConsoleReadCharacter+0x38>)
   20080:	4798      	blx	r3
    return a;
   20082:	68fb      	ldr	r3, [r7, #12]
}
   20084:	0018      	movs	r0, r3
   20086:	46bd      	mov	sp, r7
   20088:	b004      	add	sp, #16
   2008a:	bd80      	pop	{r7, pc}
   2008c:	0001e631 	.word	0x0001e631
   20090:	20005510 	.word	0x20005510
   20094:	0001fd19 	.word	0x0001fd19
   20098:	0001e649 	.word	0x0001e649

0002009c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   2009c:	b580      	push	{r7, lr}
   2009e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   200a0:	4b02      	ldr	r3, [pc, #8]	; (200ac <getLogLevel+0x10>)
   200a2:	781b      	ldrb	r3, [r3, #0]
}
   200a4:	0018      	movs	r0, r3
   200a6:	46bd      	mov	sp, r7
   200a8:	bd80      	pop	{r7, pc}
   200aa:	46c0      	nop			; (mov r8, r8)
   200ac:	200040ac 	.word	0x200040ac

000200b0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   200b0:	b40e      	push	{r1, r2, r3}
   200b2:	b590      	push	{r4, r7, lr}
   200b4:	b084      	sub	sp, #16
   200b6:	af00      	add	r7, sp, #0
   200b8:	0002      	movs	r2, r0
   200ba:	1dfb      	adds	r3, r7, #7
   200bc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   200be:	4b0e      	ldr	r3, [pc, #56]	; (200f8 <LogMessage+0x48>)
   200c0:	4798      	blx	r3
   200c2:	0003      	movs	r3, r0
   200c4:	001a      	movs	r2, r3
   200c6:	1dfb      	adds	r3, r7, #7
   200c8:	781b      	ldrb	r3, [r3, #0]
   200ca:	4293      	cmp	r3, r2
   200cc:	d30c      	bcc.n	200e8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   200ce:	2320      	movs	r3, #32
   200d0:	18fb      	adds	r3, r7, r3
   200d2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   200d4:	68fb      	ldr	r3, [r7, #12]
   200d6:	69fa      	ldr	r2, [r7, #28]
   200d8:	4808      	ldr	r0, [pc, #32]	; (200fc <LogMessage+0x4c>)
   200da:	217f      	movs	r1, #127	; 0x7f
   200dc:	4c08      	ldr	r4, [pc, #32]	; (20100 <LogMessage+0x50>)
   200de:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   200e0:	4b06      	ldr	r3, [pc, #24]	; (200fc <LogMessage+0x4c>)
   200e2:	0018      	movs	r0, r3
   200e4:	4b07      	ldr	r3, [pc, #28]	; (20104 <LogMessage+0x54>)
   200e6:	4798      	blx	r3
        va_end(ap);
    }
};
   200e8:	46c0      	nop			; (mov r8, r8)
   200ea:	46bd      	mov	sp, r7
   200ec:	b004      	add	sp, #16
   200ee:	bc90      	pop	{r4, r7}
   200f0:	bc08      	pop	{r3}
   200f2:	b003      	add	sp, #12
   200f4:	4718      	bx	r3
   200f6:	46c0      	nop			; (mov r8, r8)
   200f8:	0002009d 	.word	0x0002009d
   200fc:	2000545c 	.word	0x2000545c
   20100:	00037e11 	.word	0x00037e11
   20104:	0001ffc5 	.word	0x0001ffc5

00020108 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   20108:	b40f      	push	{r0, r1, r2, r3}
   2010a:	b580      	push	{r7, lr}
   2010c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   2010e:	68bb      	ldr	r3, [r7, #8]
   20110:	0019      	movs	r1, r3
   20112:	2001      	movs	r0, #1
   20114:	4b03      	ldr	r3, [pc, #12]	; (20124 <LogMessageDebug+0x1c>)
   20116:	4798      	blx	r3
};
   20118:	46c0      	nop			; (mov r8, r8)
   2011a:	46bd      	mov	sp, r7
   2011c:	bc80      	pop	{r7}
   2011e:	bc08      	pop	{r3}
   20120:	b004      	add	sp, #16
   20122:	4718      	bx	r3
   20124:	000200b1 	.word	0x000200b1

00020128 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   20128:	b580      	push	{r7, lr}
   2012a:	b090      	sub	sp, #64	; 0x40
   2012c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   2012e:	003b      	movs	r3, r7
   20130:	0018      	movs	r0, r3
   20132:	4b14      	ldr	r3, [pc, #80]	; (20184 <configure_usart+0x5c>)
   20134:	4798      	blx	r3

    config_usart.baudrate = 115200;
   20136:	003b      	movs	r3, r7
   20138:	22e1      	movs	r2, #225	; 0xe1
   2013a:	0252      	lsls	r2, r2, #9
   2013c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   2013e:	003b      	movs	r3, r7
   20140:	22c4      	movs	r2, #196	; 0xc4
   20142:	0392      	lsls	r2, r2, #14
   20144:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   20146:	003b      	movs	r3, r7
   20148:	2201      	movs	r2, #1
   2014a:	4252      	negs	r2, r2
   2014c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   2014e:	003b      	movs	r3, r7
   20150:	2201      	movs	r2, #1
   20152:	4252      	negs	r2, r2
   20154:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   20156:	003b      	movs	r3, r7
   20158:	4a0b      	ldr	r2, [pc, #44]	; (20188 <configure_usart+0x60>)
   2015a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   2015c:	003b      	movs	r3, r7
   2015e:	4a0b      	ldr	r2, [pc, #44]	; (2018c <configure_usart+0x64>)
   20160:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   20162:	46c0      	nop			; (mov r8, r8)
   20164:	003a      	movs	r2, r7
   20166:	490a      	ldr	r1, [pc, #40]	; (20190 <configure_usart+0x68>)
   20168:	4b0a      	ldr	r3, [pc, #40]	; (20194 <configure_usart+0x6c>)
   2016a:	0018      	movs	r0, r3
   2016c:	4b0a      	ldr	r3, [pc, #40]	; (20198 <configure_usart+0x70>)
   2016e:	4798      	blx	r3
   20170:	1e03      	subs	r3, r0, #0
   20172:	d1f7      	bne.n	20164 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   20174:	4b07      	ldr	r3, [pc, #28]	; (20194 <configure_usart+0x6c>)
   20176:	0018      	movs	r0, r3
   20178:	4b08      	ldr	r3, [pc, #32]	; (2019c <configure_usart+0x74>)
   2017a:	4798      	blx	r3
}
   2017c:	46c0      	nop			; (mov r8, r8)
   2017e:	46bd      	mov	sp, r7
   20180:	b010      	add	sp, #64	; 0x40
   20182:	bd80      	pop	{r7, pc}
   20184:	0001fe15 	.word	0x0001fe15
   20188:	002a0003 	.word	0x002a0003
   2018c:	002b0003 	.word	0x002b0003
   20190:	42001800 	.word	0x42001800
   20194:	200054dc 	.word	0x200054dc
   20198:	0002ad25 	.word	0x0002ad25
   2019c:	0001fed5 	.word	0x0001fed5

000201a0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   201a0:	b580      	push	{r7, lr}
   201a2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   201a4:	490c      	ldr	r1, [pc, #48]	; (201d8 <configure_usart_callbacks+0x38>)
   201a6:	4b0d      	ldr	r3, [pc, #52]	; (201dc <configure_usart_callbacks+0x3c>)
   201a8:	2200      	movs	r2, #0
   201aa:	0018      	movs	r0, r3
   201ac:	4b0c      	ldr	r3, [pc, #48]	; (201e0 <configure_usart_callbacks+0x40>)
   201ae:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   201b0:	490c      	ldr	r1, [pc, #48]	; (201e4 <configure_usart_callbacks+0x44>)
   201b2:	4b0a      	ldr	r3, [pc, #40]	; (201dc <configure_usart_callbacks+0x3c>)
   201b4:	2201      	movs	r2, #1
   201b6:	0018      	movs	r0, r3
   201b8:	4b09      	ldr	r3, [pc, #36]	; (201e0 <configure_usart_callbacks+0x40>)
   201ba:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   201bc:	4b07      	ldr	r3, [pc, #28]	; (201dc <configure_usart_callbacks+0x3c>)
   201be:	2100      	movs	r1, #0
   201c0:	0018      	movs	r0, r3
   201c2:	4b09      	ldr	r3, [pc, #36]	; (201e8 <configure_usart_callbacks+0x48>)
   201c4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   201c6:	4b05      	ldr	r3, [pc, #20]	; (201dc <configure_usart_callbacks+0x3c>)
   201c8:	2101      	movs	r1, #1
   201ca:	0018      	movs	r0, r3
   201cc:	4b06      	ldr	r3, [pc, #24]	; (201e8 <configure_usart_callbacks+0x48>)
   201ce:	4798      	blx	r3
}
   201d0:	46c0      	nop			; (mov r8, r8)
   201d2:	46bd      	mov	sp, r7
   201d4:	bd80      	pop	{r7, pc}
   201d6:	46c0      	nop			; (mov r8, r8)
   201d8:	00020235 	.word	0x00020235
   201dc:	200054dc 	.word	0x200054dc
   201e0:	0002b0d9 	.word	0x0002b0d9
   201e4:	000201ed 	.word	0x000201ed
   201e8:	0001ff1d 	.word	0x0001ff1d

000201ec <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   201ec:	b580      	push	{r7, lr}
   201ee:	b082      	sub	sp, #8
   201f0:	af00      	add	r7, sp, #0
   201f2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   201f4:	4b09      	ldr	r3, [pc, #36]	; (2021c <usart_read_callback+0x30>)
   201f6:	681a      	ldr	r2, [r3, #0]
   201f8:	4b09      	ldr	r3, [pc, #36]	; (20220 <usart_read_callback+0x34>)
   201fa:	781b      	ldrb	r3, [r3, #0]
   201fc:	0019      	movs	r1, r3
   201fe:	0010      	movs	r0, r2
   20200:	4b08      	ldr	r3, [pc, #32]	; (20224 <usart_read_callback+0x38>)
   20202:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   20204:	4906      	ldr	r1, [pc, #24]	; (20220 <usart_read_callback+0x34>)
   20206:	4b08      	ldr	r3, [pc, #32]	; (20228 <usart_read_callback+0x3c>)
   20208:	2201      	movs	r2, #1
   2020a:	0018      	movs	r0, r3
   2020c:	4b07      	ldr	r3, [pc, #28]	; (2022c <usart_read_callback+0x40>)
   2020e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   20210:	4b07      	ldr	r3, [pc, #28]	; (20230 <usart_read_callback+0x44>)
   20212:	4798      	blx	r3
}
   20214:	46c0      	nop			; (mov r8, r8)
   20216:	46bd      	mov	sp, r7
   20218:	b002      	add	sp, #8
   2021a:	bd80      	pop	{r7, pc}
   2021c:	20005510 	.word	0x20005510
   20220:	20005514 	.word	0x20005514
   20224:	0001fce5 	.word	0x0001fce5
   20228:	200054dc 	.word	0x200054dc
   2022c:	0002b169 	.word	0x0002b169
   20230:	00014f89 	.word	0x00014f89

00020234 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   20234:	b580      	push	{r7, lr}
   20236:	b082      	sub	sp, #8
   20238:	af00      	add	r7, sp, #0
   2023a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   2023c:	4b09      	ldr	r3, [pc, #36]	; (20264 <usart_write_callback+0x30>)
   2023e:	681b      	ldr	r3, [r3, #0]
   20240:	4a09      	ldr	r2, [pc, #36]	; (20268 <usart_write_callback+0x34>)
   20242:	0011      	movs	r1, r2
   20244:	0018      	movs	r0, r3
   20246:	4b09      	ldr	r3, [pc, #36]	; (2026c <usart_write_callback+0x38>)
   20248:	4798      	blx	r3
   2024a:	0003      	movs	r3, r0
   2024c:	3301      	adds	r3, #1
   2024e:	d005      	beq.n	2025c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20250:	4905      	ldr	r1, [pc, #20]	; (20268 <usart_write_callback+0x34>)
   20252:	4b07      	ldr	r3, [pc, #28]	; (20270 <usart_write_callback+0x3c>)
   20254:	2201      	movs	r2, #1
   20256:	0018      	movs	r0, r3
   20258:	4b06      	ldr	r3, [pc, #24]	; (20274 <usart_write_callback+0x40>)
   2025a:	4798      	blx	r3
    }
}
   2025c:	46c0      	nop			; (mov r8, r8)
   2025e:	46bd      	mov	sp, r7
   20260:	b002      	add	sp, #8
   20262:	bd80      	pop	{r7, pc}
   20264:	2000591c 	.word	0x2000591c
   20268:	20005918 	.word	0x20005918
   2026c:	0001fd19 	.word	0x0001fd19
   20270:	200054dc 	.word	0x200054dc
   20274:	0002b121 	.word	0x0002b121

00020278 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   20278:	b590      	push	{r4, r7, lr}
   2027a:	b087      	sub	sp, #28
   2027c:	af00      	add	r7, sp, #0
   2027e:	60f8      	str	r0, [r7, #12]
   20280:	000c      	movs	r4, r1
   20282:	0010      	movs	r0, r2
   20284:	0019      	movs	r1, r3
   20286:	230a      	movs	r3, #10
   20288:	18fb      	adds	r3, r7, r3
   2028a:	1c22      	adds	r2, r4, #0
   2028c:	801a      	strh	r2, [r3, #0]
   2028e:	2308      	movs	r3, #8
   20290:	18fb      	adds	r3, r7, r3
   20292:	1c02      	adds	r2, r0, #0
   20294:	801a      	strh	r2, [r3, #0]
   20296:	1dfb      	adds	r3, r7, #7
   20298:	1c0a      	adds	r2, r1, #0
   2029a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   2029c:	230a      	movs	r3, #10
   2029e:	18fb      	adds	r3, r7, r3
   202a0:	881a      	ldrh	r2, [r3, #0]
   202a2:	2308      	movs	r3, #8
   202a4:	18fb      	adds	r3, r7, r3
   202a6:	881b      	ldrh	r3, [r3, #0]
   202a8:	1ad3      	subs	r3, r2, r3
   202aa:	3307      	adds	r3, #7
   202ac:	2b00      	cmp	r3, #0
   202ae:	da00      	bge.n	202b2 <SDMMC_UNSTUFF_BITS+0x3a>
   202b0:	3307      	adds	r3, #7
   202b2:	10db      	asrs	r3, r3, #3
   202b4:	3b01      	subs	r3, #1
   202b6:	68fa      	ldr	r2, [r7, #12]
   202b8:	18d3      	adds	r3, r2, r3
   202ba:	781b      	ldrb	r3, [r3, #0]
   202bc:	0019      	movs	r1, r3
   202be:	2308      	movs	r3, #8
   202c0:	18fb      	adds	r3, r7, r3
   202c2:	881b      	ldrh	r3, [r3, #0]
   202c4:	2207      	movs	r2, #7
   202c6:	4013      	ands	r3, r2
   202c8:	4119      	asrs	r1, r3
   202ca:	000b      	movs	r3, r1
   202cc:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   202ce:	2308      	movs	r3, #8
   202d0:	18fb      	adds	r3, r7, r3
   202d2:	881b      	ldrh	r3, [r3, #0]
   202d4:	2207      	movs	r2, #7
   202d6:	401a      	ands	r2, r3
   202d8:	1dfb      	adds	r3, r7, #7
   202da:	781b      	ldrb	r3, [r3, #0]
   202dc:	18d3      	adds	r3, r2, r3
   202de:	2b08      	cmp	r3, #8
   202e0:	dd1c      	ble.n	2031c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   202e2:	230a      	movs	r3, #10
   202e4:	18fb      	adds	r3, r7, r3
   202e6:	881a      	ldrh	r2, [r3, #0]
   202e8:	2308      	movs	r3, #8
   202ea:	18fb      	adds	r3, r7, r3
   202ec:	881b      	ldrh	r3, [r3, #0]
   202ee:	1ad3      	subs	r3, r2, r3
   202f0:	3307      	adds	r3, #7
   202f2:	2b00      	cmp	r3, #0
   202f4:	da00      	bge.n	202f8 <SDMMC_UNSTUFF_BITS+0x80>
   202f6:	3307      	adds	r3, #7
   202f8:	10db      	asrs	r3, r3, #3
   202fa:	3b02      	subs	r3, #2
   202fc:	68fa      	ldr	r2, [r7, #12]
   202fe:	18d3      	adds	r3, r2, r3
   20300:	781b      	ldrb	r3, [r3, #0]
   20302:	0019      	movs	r1, r3
   20304:	2308      	movs	r3, #8
   20306:	18fb      	adds	r3, r7, r3
   20308:	881b      	ldrh	r3, [r3, #0]
   2030a:	2207      	movs	r2, #7
   2030c:	4013      	ands	r3, r2
   2030e:	2208      	movs	r2, #8
   20310:	1ad3      	subs	r3, r2, r3
   20312:	4099      	lsls	r1, r3
   20314:	000b      	movs	r3, r1
   20316:	697a      	ldr	r2, [r7, #20]
   20318:	4313      	orrs	r3, r2
   2031a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2031c:	2308      	movs	r3, #8
   2031e:	18fb      	adds	r3, r7, r3
   20320:	881b      	ldrh	r3, [r3, #0]
   20322:	2207      	movs	r2, #7
   20324:	401a      	ands	r2, r3
   20326:	1dfb      	adds	r3, r7, #7
   20328:	781b      	ldrb	r3, [r3, #0]
   2032a:	18d3      	adds	r3, r2, r3
   2032c:	2b10      	cmp	r3, #16
   2032e:	dd1c      	ble.n	2036a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   20330:	230a      	movs	r3, #10
   20332:	18fb      	adds	r3, r7, r3
   20334:	881a      	ldrh	r2, [r3, #0]
   20336:	2308      	movs	r3, #8
   20338:	18fb      	adds	r3, r7, r3
   2033a:	881b      	ldrh	r3, [r3, #0]
   2033c:	1ad3      	subs	r3, r2, r3
   2033e:	3307      	adds	r3, #7
   20340:	2b00      	cmp	r3, #0
   20342:	da00      	bge.n	20346 <SDMMC_UNSTUFF_BITS+0xce>
   20344:	3307      	adds	r3, #7
   20346:	10db      	asrs	r3, r3, #3
   20348:	3b03      	subs	r3, #3
   2034a:	68fa      	ldr	r2, [r7, #12]
   2034c:	18d3      	adds	r3, r2, r3
   2034e:	781b      	ldrb	r3, [r3, #0]
   20350:	0019      	movs	r1, r3
   20352:	2308      	movs	r3, #8
   20354:	18fb      	adds	r3, r7, r3
   20356:	881b      	ldrh	r3, [r3, #0]
   20358:	2207      	movs	r2, #7
   2035a:	4013      	ands	r3, r2
   2035c:	2210      	movs	r2, #16
   2035e:	1ad3      	subs	r3, r2, r3
   20360:	4099      	lsls	r1, r3
   20362:	000b      	movs	r3, r1
   20364:	697a      	ldr	r2, [r7, #20]
   20366:	4313      	orrs	r3, r2
   20368:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2036a:	2308      	movs	r3, #8
   2036c:	18fb      	adds	r3, r7, r3
   2036e:	881b      	ldrh	r3, [r3, #0]
   20370:	2207      	movs	r2, #7
   20372:	401a      	ands	r2, r3
   20374:	1dfb      	adds	r3, r7, #7
   20376:	781b      	ldrb	r3, [r3, #0]
   20378:	18d3      	adds	r3, r2, r3
   2037a:	2b10      	cmp	r3, #16
   2037c:	dd1c      	ble.n	203b8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   2037e:	230a      	movs	r3, #10
   20380:	18fb      	adds	r3, r7, r3
   20382:	881a      	ldrh	r2, [r3, #0]
   20384:	2308      	movs	r3, #8
   20386:	18fb      	adds	r3, r7, r3
   20388:	881b      	ldrh	r3, [r3, #0]
   2038a:	1ad3      	subs	r3, r2, r3
   2038c:	3307      	adds	r3, #7
   2038e:	2b00      	cmp	r3, #0
   20390:	da00      	bge.n	20394 <SDMMC_UNSTUFF_BITS+0x11c>
   20392:	3307      	adds	r3, #7
   20394:	10db      	asrs	r3, r3, #3
   20396:	3b03      	subs	r3, #3
   20398:	68fa      	ldr	r2, [r7, #12]
   2039a:	18d3      	adds	r3, r2, r3
   2039c:	781b      	ldrb	r3, [r3, #0]
   2039e:	0019      	movs	r1, r3
   203a0:	2308      	movs	r3, #8
   203a2:	18fb      	adds	r3, r7, r3
   203a4:	881b      	ldrh	r3, [r3, #0]
   203a6:	2207      	movs	r2, #7
   203a8:	4013      	ands	r3, r2
   203aa:	2210      	movs	r2, #16
   203ac:	1ad3      	subs	r3, r2, r3
   203ae:	4099      	lsls	r1, r3
   203b0:	000b      	movs	r3, r1
   203b2:	697a      	ldr	r2, [r7, #20]
   203b4:	4313      	orrs	r3, r2
   203b6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   203b8:	1dfb      	adds	r3, r7, #7
   203ba:	781b      	ldrb	r3, [r3, #0]
   203bc:	2201      	movs	r2, #1
   203be:	409a      	lsls	r2, r3
   203c0:	0013      	movs	r3, r2
   203c2:	1e5a      	subs	r2, r3, #1
   203c4:	697b      	ldr	r3, [r7, #20]
   203c6:	4013      	ands	r3, r2
   203c8:	617b      	str	r3, [r7, #20]
	return value;
   203ca:	697b      	ldr	r3, [r7, #20]
}
   203cc:	0018      	movs	r0, r3
   203ce:	46bd      	mov	sp, r7
   203d0:	b007      	add	sp, #28
   203d2:	bd90      	pop	{r4, r7, pc}

000203d4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   203d4:	b580      	push	{r7, lr}
   203d6:	b082      	sub	sp, #8
   203d8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   203da:	4b23      	ldr	r3, [pc, #140]	; (20468 <mmc_spi_op_cond+0x94>)
   203dc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   203de:	4b23      	ldr	r3, [pc, #140]	; (2046c <mmc_spi_op_cond+0x98>)
   203e0:	2100      	movs	r1, #0
   203e2:	0018      	movs	r0, r3
   203e4:	4b22      	ldr	r3, [pc, #136]	; (20470 <mmc_spi_op_cond+0x9c>)
   203e6:	4798      	blx	r3
   203e8:	0003      	movs	r3, r0
   203ea:	001a      	movs	r2, r3
   203ec:	2301      	movs	r3, #1
   203ee:	4053      	eors	r3, r2
   203f0:	b2db      	uxtb	r3, r3
   203f2:	2b00      	cmp	r3, #0
   203f4:	d001      	beq.n	203fa <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   203f6:	2300      	movs	r3, #0
   203f8:	e031      	b.n	2045e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   203fa:	4b1e      	ldr	r3, [pc, #120]	; (20474 <mmc_spi_op_cond+0xa0>)
   203fc:	4798      	blx	r3
   203fe:	0003      	movs	r3, r0
   20400:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   20402:	683b      	ldr	r3, [r7, #0]
   20404:	2201      	movs	r2, #1
   20406:	4013      	ands	r3, r2
   20408:	d006      	beq.n	20418 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   2040a:	687b      	ldr	r3, [r7, #4]
   2040c:	1e5a      	subs	r2, r3, #1
   2040e:	607a      	str	r2, [r7, #4]
   20410:	2b00      	cmp	r3, #0
   20412:	d1e4      	bne.n	203de <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   20414:	2300      	movs	r3, #0
   20416:	e022      	b.n	2045e <mmc_spi_op_cond+0x8a>
			break;
   20418:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   2041a:	4b17      	ldr	r3, [pc, #92]	; (20478 <mmc_spi_op_cond+0xa4>)
   2041c:	2100      	movs	r1, #0
   2041e:	0018      	movs	r0, r3
   20420:	4b13      	ldr	r3, [pc, #76]	; (20470 <mmc_spi_op_cond+0x9c>)
   20422:	4798      	blx	r3
   20424:	0003      	movs	r3, r0
   20426:	001a      	movs	r2, r3
   20428:	2301      	movs	r3, #1
   2042a:	4053      	eors	r3, r2
   2042c:	b2db      	uxtb	r3, r3
   2042e:	2b00      	cmp	r3, #0
   20430:	d001      	beq.n	20436 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20432:	2300      	movs	r3, #0
   20434:	e013      	b.n	2045e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   20436:	4b0f      	ldr	r3, [pc, #60]	; (20474 <mmc_spi_op_cond+0xa0>)
   20438:	4798      	blx	r3
   2043a:	0002      	movs	r2, r0
   2043c:	23c0      	movs	r3, #192	; 0xc0
   2043e:	05db      	lsls	r3, r3, #23
   20440:	401a      	ands	r2, r3
   20442:	2380      	movs	r3, #128	; 0x80
   20444:	05db      	lsls	r3, r3, #23
   20446:	429a      	cmp	r2, r3
   20448:	d108      	bne.n	2045c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   2044a:	4b0c      	ldr	r3, [pc, #48]	; (2047c <mmc_spi_op_cond+0xa8>)
   2044c:	681a      	ldr	r2, [r3, #0]
   2044e:	4b0b      	ldr	r3, [pc, #44]	; (2047c <mmc_spi_op_cond+0xa8>)
   20450:	681b      	ldr	r3, [r3, #0]
   20452:	7adb      	ldrb	r3, [r3, #11]
   20454:	2108      	movs	r1, #8
   20456:	430b      	orrs	r3, r1
   20458:	b2db      	uxtb	r3, r3
   2045a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2045c:	2301      	movs	r3, #1
}
   2045e:	0018      	movs	r0, r3
   20460:	46bd      	mov	sp, r7
   20462:	b002      	add	sp, #8
   20464:	bd80      	pop	{r7, pc}
   20466:	46c0      	nop			; (mov r8, r8)
   20468:	00001bee 	.word	0x00001bee
   2046c:	00001101 	.word	0x00001101
   20470:	00021e09 	.word	0x00021e09
   20474:	00022049 	.word	0x00022049
   20478:	0000053a 	.word	0x0000053a
   2047c:	200040d4 	.word	0x200040d4

00020480 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   20480:	b580      	push	{r7, lr}
   20482:	b086      	sub	sp, #24
   20484:	af00      	add	r7, sp, #0
   20486:	0002      	movs	r2, r0
   20488:	1dfb      	adds	r3, r7, #7
   2048a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   2048c:	4b2e      	ldr	r3, [pc, #184]	; (20548 <sd_spi_op_cond+0xc8>)
   2048e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   20490:	4b2e      	ldr	r3, [pc, #184]	; (2054c <sd_spi_op_cond+0xcc>)
   20492:	2100      	movs	r1, #0
   20494:	0018      	movs	r0, r3
   20496:	4b2e      	ldr	r3, [pc, #184]	; (20550 <sd_spi_op_cond+0xd0>)
   20498:	4798      	blx	r3
   2049a:	0003      	movs	r3, r0
   2049c:	001a      	movs	r2, r3
   2049e:	2301      	movs	r3, #1
   204a0:	4053      	eors	r3, r2
   204a2:	b2db      	uxtb	r3, r3
   204a4:	2b00      	cmp	r3, #0
   204a6:	d001      	beq.n	204ac <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   204a8:	2300      	movs	r3, #0
   204aa:	e048      	b.n	2053e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   204ac:	2300      	movs	r3, #0
   204ae:	617b      	str	r3, [r7, #20]
		if (v2) {
   204b0:	1dfb      	adds	r3, r7, #7
   204b2:	781b      	ldrb	r3, [r3, #0]
   204b4:	2b00      	cmp	r3, #0
   204b6:	d004      	beq.n	204c2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   204b8:	697b      	ldr	r3, [r7, #20]
   204ba:	2280      	movs	r2, #128	; 0x80
   204bc:	05d2      	lsls	r2, r2, #23
   204be:	4313      	orrs	r3, r2
   204c0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   204c2:	697b      	ldr	r3, [r7, #20]
   204c4:	4a23      	ldr	r2, [pc, #140]	; (20554 <sd_spi_op_cond+0xd4>)
   204c6:	0019      	movs	r1, r3
   204c8:	0010      	movs	r0, r2
   204ca:	4b21      	ldr	r3, [pc, #132]	; (20550 <sd_spi_op_cond+0xd0>)
   204cc:	4798      	blx	r3
   204ce:	0003      	movs	r3, r0
   204d0:	001a      	movs	r2, r3
   204d2:	2301      	movs	r3, #1
   204d4:	4053      	eors	r3, r2
   204d6:	b2db      	uxtb	r3, r3
   204d8:	2b00      	cmp	r3, #0
   204da:	d001      	beq.n	204e0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   204dc:	2300      	movs	r3, #0
   204de:	e02e      	b.n	2053e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   204e0:	4b1d      	ldr	r3, [pc, #116]	; (20558 <sd_spi_op_cond+0xd8>)
   204e2:	4798      	blx	r3
   204e4:	0003      	movs	r3, r0
   204e6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   204e8:	68fb      	ldr	r3, [r7, #12]
   204ea:	2201      	movs	r2, #1
   204ec:	4013      	ands	r3, r2
   204ee:	d006      	beq.n	204fe <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   204f0:	693b      	ldr	r3, [r7, #16]
   204f2:	1e5a      	subs	r2, r3, #1
   204f4:	613a      	str	r2, [r7, #16]
   204f6:	2b00      	cmp	r3, #0
   204f8:	d1ca      	bne.n	20490 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   204fa:	2300      	movs	r3, #0
   204fc:	e01f      	b.n	2053e <sd_spi_op_cond+0xbe>
			break;
   204fe:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   20500:	4b16      	ldr	r3, [pc, #88]	; (2055c <sd_spi_op_cond+0xdc>)
   20502:	2100      	movs	r1, #0
   20504:	0018      	movs	r0, r3
   20506:	4b12      	ldr	r3, [pc, #72]	; (20550 <sd_spi_op_cond+0xd0>)
   20508:	4798      	blx	r3
   2050a:	0003      	movs	r3, r0
   2050c:	001a      	movs	r2, r3
   2050e:	2301      	movs	r3, #1
   20510:	4053      	eors	r3, r2
   20512:	b2db      	uxtb	r3, r3
   20514:	2b00      	cmp	r3, #0
   20516:	d001      	beq.n	2051c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20518:	2300      	movs	r3, #0
   2051a:	e010      	b.n	2053e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   2051c:	4b0e      	ldr	r3, [pc, #56]	; (20558 <sd_spi_op_cond+0xd8>)
   2051e:	4798      	blx	r3
   20520:	0002      	movs	r2, r0
   20522:	2380      	movs	r3, #128	; 0x80
   20524:	05db      	lsls	r3, r3, #23
   20526:	4013      	ands	r3, r2
   20528:	d008      	beq.n	2053c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   2052a:	4b0d      	ldr	r3, [pc, #52]	; (20560 <sd_spi_op_cond+0xe0>)
   2052c:	681a      	ldr	r2, [r3, #0]
   2052e:	4b0c      	ldr	r3, [pc, #48]	; (20560 <sd_spi_op_cond+0xe0>)
   20530:	681b      	ldr	r3, [r3, #0]
   20532:	7adb      	ldrb	r3, [r3, #11]
   20534:	2108      	movs	r1, #8
   20536:	430b      	orrs	r3, r1
   20538:	b2db      	uxtb	r3, r3
   2053a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2053c:	2301      	movs	r3, #1
}
   2053e:	0018      	movs	r0, r3
   20540:	46bd      	mov	sp, r7
   20542:	b006      	add	sp, #24
   20544:	bd80      	pop	{r7, pc}
   20546:	46c0      	nop			; (mov r8, r8)
   20548:	00001bee 	.word	0x00001bee
   2054c:	00001137 	.word	0x00001137
   20550:	00021e09 	.word	0x00021e09
   20554:	00001129 	.word	0x00001129
   20558:	00022049 	.word	0x00022049
   2055c:	0000053a 	.word	0x0000053a
   20560:	200040d4 	.word	0x200040d4

00020564 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   20564:	b580      	push	{r7, lr}
   20566:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   20568:	2301      	movs	r3, #1
}
   2056a:	0018      	movs	r0, r3
   2056c:	46bd      	mov	sp, r7
   2056e:	bd80      	pop	{r7, pc}

00020570 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   20570:	b580      	push	{r7, lr}
   20572:	b084      	sub	sp, #16
   20574:	af00      	add	r7, sp, #0
   20576:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   20578:	687b      	ldr	r3, [r7, #4]
   2057a:	2200      	movs	r2, #0
   2057c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   2057e:	23d5      	movs	r3, #213	; 0xd5
   20580:	005b      	lsls	r3, r3, #1
   20582:	4a14      	ldr	r2, [pc, #80]	; (205d4 <sd_cmd8+0x64>)
   20584:	0019      	movs	r1, r3
   20586:	0010      	movs	r0, r2
   20588:	4b13      	ldr	r3, [pc, #76]	; (205d8 <sd_cmd8+0x68>)
   2058a:	4798      	blx	r3
   2058c:	0003      	movs	r3, r0
   2058e:	001a      	movs	r2, r3
   20590:	2301      	movs	r3, #1
   20592:	4053      	eors	r3, r2
   20594:	b2db      	uxtb	r3, r3
   20596:	2b00      	cmp	r3, #0
   20598:	d001      	beq.n	2059e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   2059a:	2301      	movs	r3, #1
   2059c:	e015      	b.n	205ca <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   2059e:	4b0f      	ldr	r3, [pc, #60]	; (205dc <sd_cmd8+0x6c>)
   205a0:	4798      	blx	r3
   205a2:	0003      	movs	r3, r0
   205a4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   205a6:	68fb      	ldr	r3, [r7, #12]
   205a8:	3301      	adds	r3, #1
   205aa:	d101      	bne.n	205b0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   205ac:	2301      	movs	r3, #1
   205ae:	e00c      	b.n	205ca <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   205b0:	68fb      	ldr	r3, [r7, #12]
   205b2:	051b      	lsls	r3, r3, #20
   205b4:	0d1a      	lsrs	r2, r3, #20
   205b6:	23d5      	movs	r3, #213	; 0xd5
   205b8:	005b      	lsls	r3, r3, #1
   205ba:	429a      	cmp	r2, r3
   205bc:	d001      	beq.n	205c2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   205be:	2300      	movs	r3, #0
   205c0:	e003      	b.n	205ca <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   205c2:	687b      	ldr	r3, [r7, #4]
   205c4:	2201      	movs	r2, #1
   205c6:	701a      	strb	r2, [r3, #0]
	return true;
   205c8:	2301      	movs	r3, #1
}
   205ca:	0018      	movs	r0, r3
   205cc:	46bd      	mov	sp, r7
   205ce:	b004      	add	sp, #16
   205d0:	bd80      	pop	{r7, pc}
   205d2:	46c0      	nop			; (mov r8, r8)
   205d4:	00005508 	.word	0x00005508
   205d8:	00021e09 	.word	0x00021e09
   205dc:	00022049 	.word	0x00022049

000205e0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   205e0:	b590      	push	{r4, r7, lr}
   205e2:	b089      	sub	sp, #36	; 0x24
   205e4:	af02      	add	r7, sp, #8
   205e6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   205e8:	2380      	movs	r3, #128	; 0x80
   205ea:	009a      	lsls	r2, r3, #2
   205ec:	4841      	ldr	r0, [pc, #260]	; (206f4 <mmc_cmd8+0x114>)
   205ee:	2300      	movs	r3, #0
   205f0:	9300      	str	r3, [sp, #0]
   205f2:	2301      	movs	r3, #1
   205f4:	2100      	movs	r1, #0
   205f6:	4c40      	ldr	r4, [pc, #256]	; (206f8 <mmc_cmd8+0x118>)
   205f8:	47a0      	blx	r4
   205fa:	0003      	movs	r3, r0
   205fc:	001a      	movs	r2, r3
   205fe:	2301      	movs	r3, #1
   20600:	4053      	eors	r3, r2
   20602:	b2db      	uxtb	r3, r3
   20604:	2b00      	cmp	r3, #0
   20606:	d001      	beq.n	2060c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   20608:	2300      	movs	r3, #0
   2060a:	e06e      	b.n	206ea <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   2060c:	2316      	movs	r3, #22
   2060e:	18fb      	adds	r3, r7, r3
   20610:	2200      	movs	r2, #0
   20612:	801a      	strh	r2, [r3, #0]
   20614:	e014      	b.n	20640 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   20616:	2310      	movs	r3, #16
   20618:	18fb      	adds	r3, r7, r3
   2061a:	0018      	movs	r0, r3
   2061c:	4b37      	ldr	r3, [pc, #220]	; (206fc <mmc_cmd8+0x11c>)
   2061e:	4798      	blx	r3
   20620:	0003      	movs	r3, r0
   20622:	001a      	movs	r2, r3
   20624:	2301      	movs	r3, #1
   20626:	4053      	eors	r3, r2
   20628:	b2db      	uxtb	r3, r3
   2062a:	2b00      	cmp	r3, #0
   2062c:	d001      	beq.n	20632 <mmc_cmd8+0x52>
			return false;
   2062e:	2300      	movs	r3, #0
   20630:	e05b      	b.n	206ea <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   20632:	2316      	movs	r3, #22
   20634:	18fb      	adds	r3, r7, r3
   20636:	881a      	ldrh	r2, [r3, #0]
   20638:	2316      	movs	r3, #22
   2063a:	18fb      	adds	r3, r7, r3
   2063c:	3201      	adds	r2, #1
   2063e:	801a      	strh	r2, [r3, #0]
   20640:	2316      	movs	r3, #22
   20642:	18fb      	adds	r3, r7, r3
   20644:	881b      	ldrh	r3, [r3, #0]
   20646:	2b31      	cmp	r3, #49	; 0x31
   20648:	d9e5      	bls.n	20616 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   2064a:	693b      	ldr	r3, [r7, #16]
   2064c:	b2db      	uxtb	r3, r3
   2064e:	2202      	movs	r2, #2
   20650:	4013      	ands	r3, r2
   20652:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   20654:	687b      	ldr	r3, [r7, #4]
   20656:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   20658:	4b29      	ldr	r3, [pc, #164]	; (20700 <mmc_cmd8+0x120>)
   2065a:	681b      	ldr	r3, [r3, #0]
   2065c:	330e      	adds	r3, #14
   2065e:	0018      	movs	r0, r3
   20660:	230c      	movs	r3, #12
   20662:	223e      	movs	r2, #62	; 0x3e
   20664:	2180      	movs	r1, #128	; 0x80
   20666:	4c27      	ldr	r4, [pc, #156]	; (20704 <mmc_cmd8+0x124>)
   20668:	47a0      	blx	r4
   2066a:	0002      	movs	r2, r0
   2066c:	4b26      	ldr	r3, [pc, #152]	; (20708 <mmc_cmd8+0x128>)
   2066e:	429a      	cmp	r2, r3
   20670:	d135      	bne.n	206de <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   20672:	e014      	b.n	2069e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   20674:	230c      	movs	r3, #12
   20676:	18fb      	adds	r3, r7, r3
   20678:	0018      	movs	r0, r3
   2067a:	4b20      	ldr	r3, [pc, #128]	; (206fc <mmc_cmd8+0x11c>)
   2067c:	4798      	blx	r3
   2067e:	0003      	movs	r3, r0
   20680:	001a      	movs	r2, r3
   20682:	2301      	movs	r3, #1
   20684:	4053      	eors	r3, r2
   20686:	b2db      	uxtb	r3, r3
   20688:	2b00      	cmp	r3, #0
   2068a:	d001      	beq.n	20690 <mmc_cmd8+0xb0>
				return false;
   2068c:	2300      	movs	r3, #0
   2068e:	e02c      	b.n	206ea <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   20690:	2316      	movs	r3, #22
   20692:	18fb      	adds	r3, r7, r3
   20694:	881a      	ldrh	r2, [r3, #0]
   20696:	2316      	movs	r3, #22
   20698:	18fb      	adds	r3, r7, r3
   2069a:	3201      	adds	r2, #1
   2069c:	801a      	strh	r2, [r3, #0]
   2069e:	2316      	movs	r3, #22
   206a0:	18fb      	adds	r3, r7, r3
   206a2:	881b      	ldrh	r3, [r3, #0]
   206a4:	2b35      	cmp	r3, #53	; 0x35
   206a6:	d9e5      	bls.n	20674 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   206a8:	4b15      	ldr	r3, [pc, #84]	; (20700 <mmc_cmd8+0x120>)
   206aa:	681b      	ldr	r3, [r3, #0]
   206ac:	68fa      	ldr	r2, [r7, #12]
   206ae:	0852      	lsrs	r2, r2, #1
   206b0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   206b2:	e014      	b.n	206de <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   206b4:	230c      	movs	r3, #12
   206b6:	18fb      	adds	r3, r7, r3
   206b8:	0018      	movs	r0, r3
   206ba:	4b10      	ldr	r3, [pc, #64]	; (206fc <mmc_cmd8+0x11c>)
   206bc:	4798      	blx	r3
   206be:	0003      	movs	r3, r0
   206c0:	001a      	movs	r2, r3
   206c2:	2301      	movs	r3, #1
   206c4:	4053      	eors	r3, r2
   206c6:	b2db      	uxtb	r3, r3
   206c8:	2b00      	cmp	r3, #0
   206ca:	d001      	beq.n	206d0 <mmc_cmd8+0xf0>
			return false;
   206cc:	2300      	movs	r3, #0
   206ce:	e00c      	b.n	206ea <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   206d0:	2316      	movs	r3, #22
   206d2:	18fb      	adds	r3, r7, r3
   206d4:	881a      	ldrh	r2, [r3, #0]
   206d6:	2316      	movs	r3, #22
   206d8:	18fb      	adds	r3, r7, r3
   206da:	3201      	adds	r2, #1
   206dc:	801a      	strh	r2, [r3, #0]
   206de:	2316      	movs	r3, #22
   206e0:	18fb      	adds	r3, r7, r3
   206e2:	881b      	ldrh	r3, [r3, #0]
   206e4:	2b7f      	cmp	r3, #127	; 0x7f
   206e6:	d9e5      	bls.n	206b4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   206e8:	2301      	movs	r3, #1
}
   206ea:	0018      	movs	r0, r3
   206ec:	46bd      	mov	sp, r7
   206ee:	b007      	add	sp, #28
   206f0:	bd90      	pop	{r4, r7, pc}
   206f2:	46c0      	nop			; (mov r8, r8)
   206f4:	00081108 	.word	0x00081108
   206f8:	00021e31 	.word	0x00021e31
   206fc:	0002205d 	.word	0x0002205d
   20700:	200040d4 	.word	0x200040d4
   20704:	00020279 	.word	0x00020279
   20708:	00000fff 	.word	0x00000fff

0002070c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   2070c:	b590      	push	{r4, r7, lr}
   2070e:	b083      	sub	sp, #12
   20710:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   20712:	4b15      	ldr	r3, [pc, #84]	; (20768 <sd_mmc_cmd9_spi+0x5c>)
   20714:	681b      	ldr	r3, [r3, #0]
   20716:	891b      	ldrh	r3, [r3, #8]
   20718:	0419      	lsls	r1, r3, #16
   2071a:	4814      	ldr	r0, [pc, #80]	; (2076c <sd_mmc_cmd9_spi+0x60>)
   2071c:	2301      	movs	r3, #1
   2071e:	9300      	str	r3, [sp, #0]
   20720:	2301      	movs	r3, #1
   20722:	2210      	movs	r2, #16
   20724:	4c12      	ldr	r4, [pc, #72]	; (20770 <sd_mmc_cmd9_spi+0x64>)
   20726:	47a0      	blx	r4
   20728:	0003      	movs	r3, r0
   2072a:	001a      	movs	r2, r3
   2072c:	2301      	movs	r3, #1
   2072e:	4053      	eors	r3, r2
   20730:	b2db      	uxtb	r3, r3
   20732:	2b00      	cmp	r3, #0
   20734:	d001      	beq.n	2073a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   20736:	2300      	movs	r3, #0
   20738:	e012      	b.n	20760 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   2073a:	4b0b      	ldr	r3, [pc, #44]	; (20768 <sd_mmc_cmd9_spi+0x5c>)
   2073c:	681b      	ldr	r3, [r3, #0]
   2073e:	330e      	adds	r3, #14
   20740:	2101      	movs	r1, #1
   20742:	0018      	movs	r0, r3
   20744:	4b0b      	ldr	r3, [pc, #44]	; (20774 <sd_mmc_cmd9_spi+0x68>)
   20746:	4798      	blx	r3
   20748:	0003      	movs	r3, r0
   2074a:	001a      	movs	r2, r3
   2074c:	2301      	movs	r3, #1
   2074e:	4053      	eors	r3, r2
   20750:	b2db      	uxtb	r3, r3
   20752:	2b00      	cmp	r3, #0
   20754:	d001      	beq.n	2075a <sd_mmc_cmd9_spi+0x4e>
		return false;
   20756:	2300      	movs	r3, #0
   20758:	e002      	b.n	20760 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   2075a:	4b07      	ldr	r3, [pc, #28]	; (20778 <sd_mmc_cmd9_spi+0x6c>)
   2075c:	4798      	blx	r3
   2075e:	0003      	movs	r3, r0
}
   20760:	0018      	movs	r0, r3
   20762:	46bd      	mov	sp, r7
   20764:	b001      	add	sp, #4
   20766:	bd90      	pop	{r4, r7, pc}
   20768:	200040d4 	.word	0x200040d4
   2076c:	00081109 	.word	0x00081109
   20770:	00021e31 	.word	0x00021e31
   20774:	00022101 	.word	0x00022101
   20778:	000221a5 	.word	0x000221a5

0002077c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   2077c:	b5b0      	push	{r4, r5, r7, lr}
   2077e:	b084      	sub	sp, #16
   20780:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   20782:	4b45      	ldr	r3, [pc, #276]	; (20898 <mmc_decode_csd+0x11c>)
   20784:	681b      	ldr	r3, [r3, #0]
   20786:	330e      	adds	r3, #14
   20788:	0018      	movs	r0, r3
   2078a:	2304      	movs	r3, #4
   2078c:	227a      	movs	r2, #122	; 0x7a
   2078e:	2180      	movs	r1, #128	; 0x80
   20790:	4c42      	ldr	r4, [pc, #264]	; (2089c <mmc_decode_csd+0x120>)
   20792:	47a0      	blx	r4
   20794:	0003      	movs	r3, r0
   20796:	2b02      	cmp	r3, #2
   20798:	d011      	beq.n	207be <mmc_decode_csd+0x42>
   2079a:	d802      	bhi.n	207a2 <mmc_decode_csd+0x26>
   2079c:	2b01      	cmp	r3, #1
   2079e:	d009      	beq.n	207b4 <mmc_decode_csd+0x38>
   207a0:	e003      	b.n	207aa <mmc_decode_csd+0x2e>
   207a2:	2b03      	cmp	r3, #3
   207a4:	d010      	beq.n	207c8 <mmc_decode_csd+0x4c>
   207a6:	2b04      	cmp	r3, #4
   207a8:	d013      	beq.n	207d2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   207aa:	4b3b      	ldr	r3, [pc, #236]	; (20898 <mmc_decode_csd+0x11c>)
   207ac:	681b      	ldr	r3, [r3, #0]
   207ae:	2212      	movs	r2, #18
   207b0:	731a      	strb	r2, [r3, #12]
		break;
   207b2:	e013      	b.n	207dc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   207b4:	4b38      	ldr	r3, [pc, #224]	; (20898 <mmc_decode_csd+0x11c>)
   207b6:	681b      	ldr	r3, [r3, #0]
   207b8:	2214      	movs	r2, #20
   207ba:	731a      	strb	r2, [r3, #12]
		break;
   207bc:	e00e      	b.n	207dc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   207be:	4b36      	ldr	r3, [pc, #216]	; (20898 <mmc_decode_csd+0x11c>)
   207c0:	681b      	ldr	r3, [r3, #0]
   207c2:	2222      	movs	r2, #34	; 0x22
   207c4:	731a      	strb	r2, [r3, #12]
		break;
   207c6:	e009      	b.n	207dc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   207c8:	4b33      	ldr	r3, [pc, #204]	; (20898 <mmc_decode_csd+0x11c>)
   207ca:	681b      	ldr	r3, [r3, #0]
   207cc:	2230      	movs	r2, #48	; 0x30
   207ce:	731a      	strb	r2, [r3, #12]
		break;
   207d0:	e004      	b.n	207dc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   207d2:	4b31      	ldr	r3, [pc, #196]	; (20898 <mmc_decode_csd+0x11c>)
   207d4:	681b      	ldr	r3, [r3, #0]
   207d6:	2240      	movs	r2, #64	; 0x40
   207d8:	731a      	strb	r2, [r3, #12]
		break;
   207da:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   207dc:	4b2e      	ldr	r3, [pc, #184]	; (20898 <mmc_decode_csd+0x11c>)
   207de:	681b      	ldr	r3, [r3, #0]
   207e0:	330e      	adds	r3, #14
   207e2:	0018      	movs	r0, r3
   207e4:	2308      	movs	r3, #8
   207e6:	2260      	movs	r2, #96	; 0x60
   207e8:	2180      	movs	r1, #128	; 0x80
   207ea:	4c2c      	ldr	r4, [pc, #176]	; (2089c <mmc_decode_csd+0x120>)
   207ec:	47a0      	blx	r4
   207ee:	0003      	movs	r3, r0
   207f0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   207f2:	68fb      	ldr	r3, [r7, #12]
   207f4:	2207      	movs	r2, #7
   207f6:	401a      	ands	r2, r3
   207f8:	4b29      	ldr	r3, [pc, #164]	; (208a0 <mmc_decode_csd+0x124>)
   207fa:	0092      	lsls	r2, r2, #2
   207fc:	58d3      	ldr	r3, [r2, r3]
   207fe:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   20800:	68fb      	ldr	r3, [r7, #12]
   20802:	08db      	lsrs	r3, r3, #3
   20804:	220f      	movs	r2, #15
   20806:	401a      	ands	r2, r3
   20808:	4b26      	ldr	r3, [pc, #152]	; (208a4 <mmc_decode_csd+0x128>)
   2080a:	0092      	lsls	r2, r2, #2
   2080c:	58d3      	ldr	r3, [r2, r3]
   2080e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20810:	4b21      	ldr	r3, [pc, #132]	; (20898 <mmc_decode_csd+0x11c>)
   20812:	681b      	ldr	r3, [r3, #0]
   20814:	68ba      	ldr	r2, [r7, #8]
   20816:	6879      	ldr	r1, [r7, #4]
   20818:	434a      	muls	r2, r1
   2081a:	21fa      	movs	r1, #250	; 0xfa
   2081c:	0089      	lsls	r1, r1, #2
   2081e:	434a      	muls	r2, r1
   20820:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   20822:	4b1d      	ldr	r3, [pc, #116]	; (20898 <mmc_decode_csd+0x11c>)
   20824:	681b      	ldr	r3, [r3, #0]
   20826:	330e      	adds	r3, #14
   20828:	0018      	movs	r0, r3
   2082a:	230c      	movs	r3, #12
   2082c:	223e      	movs	r2, #62	; 0x3e
   2082e:	2180      	movs	r1, #128	; 0x80
   20830:	4c1a      	ldr	r4, [pc, #104]	; (2089c <mmc_decode_csd+0x120>)
   20832:	47a0      	blx	r4
   20834:	0002      	movs	r2, r0
   20836:	4b1c      	ldr	r3, [pc, #112]	; (208a8 <mmc_decode_csd+0x12c>)
   20838:	429a      	cmp	r2, r3
   2083a:	d028      	beq.n	2088e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   2083c:	4b16      	ldr	r3, [pc, #88]	; (20898 <mmc_decode_csd+0x11c>)
   2083e:	681b      	ldr	r3, [r3, #0]
   20840:	330e      	adds	r3, #14
   20842:	0018      	movs	r0, r3
   20844:	230c      	movs	r3, #12
   20846:	223e      	movs	r2, #62	; 0x3e
   20848:	2180      	movs	r1, #128	; 0x80
   2084a:	4c14      	ldr	r4, [pc, #80]	; (2089c <mmc_decode_csd+0x120>)
   2084c:	47a0      	blx	r4
   2084e:	0003      	movs	r3, r0
   20850:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20852:	4b11      	ldr	r3, [pc, #68]	; (20898 <mmc_decode_csd+0x11c>)
   20854:	681b      	ldr	r3, [r3, #0]
   20856:	330e      	adds	r3, #14
   20858:	0018      	movs	r0, r3
   2085a:	2303      	movs	r3, #3
   2085c:	222f      	movs	r2, #47	; 0x2f
   2085e:	2180      	movs	r1, #128	; 0x80
   20860:	4d0e      	ldr	r5, [pc, #56]	; (2089c <mmc_decode_csd+0x120>)
   20862:	47a8      	blx	r5
   20864:	0003      	movs	r3, r0
   20866:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20868:	409c      	lsls	r4, r3
   2086a:	0023      	movs	r3, r4
   2086c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   2086e:	4b0a      	ldr	r3, [pc, #40]	; (20898 <mmc_decode_csd+0x11c>)
   20870:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   20872:	4b09      	ldr	r3, [pc, #36]	; (20898 <mmc_decode_csd+0x11c>)
   20874:	681b      	ldr	r3, [r3, #0]
   20876:	330e      	adds	r3, #14
   20878:	0018      	movs	r0, r3
   2087a:	2304      	movs	r3, #4
   2087c:	2250      	movs	r2, #80	; 0x50
   2087e:	2180      	movs	r1, #128	; 0x80
   20880:	4d06      	ldr	r5, [pc, #24]	; (2089c <mmc_decode_csd+0x120>)
   20882:	47a8      	blx	r5
   20884:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   20886:	683b      	ldr	r3, [r7, #0]
   20888:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   2088a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   2088c:	6063      	str	r3, [r4, #4]
	}
}
   2088e:	46c0      	nop			; (mov r8, r8)
   20890:	46bd      	mov	sp, r7
   20892:	b004      	add	sp, #16
   20894:	bdb0      	pop	{r4, r5, r7, pc}
   20896:	46c0      	nop			; (mov r8, r8)
   20898:	200040d4 	.word	0x200040d4
   2089c:	00020279 	.word	0x00020279
   208a0:	0003b350 	.word	0x0003b350
   208a4:	0003b3ac 	.word	0x0003b3ac
   208a8:	00000fff 	.word	0x00000fff

000208ac <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   208ac:	b5b0      	push	{r4, r5, r7, lr}
   208ae:	b084      	sub	sp, #16
   208b0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   208b2:	4b35      	ldr	r3, [pc, #212]	; (20988 <sd_decode_csd+0xdc>)
   208b4:	681b      	ldr	r3, [r3, #0]
   208b6:	330e      	adds	r3, #14
   208b8:	0018      	movs	r0, r3
   208ba:	2308      	movs	r3, #8
   208bc:	2260      	movs	r2, #96	; 0x60
   208be:	2180      	movs	r1, #128	; 0x80
   208c0:	4c32      	ldr	r4, [pc, #200]	; (2098c <sd_decode_csd+0xe0>)
   208c2:	47a0      	blx	r4
   208c4:	0003      	movs	r3, r0
   208c6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   208c8:	68fb      	ldr	r3, [r7, #12]
   208ca:	2207      	movs	r2, #7
   208cc:	401a      	ands	r2, r3
   208ce:	4b30      	ldr	r3, [pc, #192]	; (20990 <sd_decode_csd+0xe4>)
   208d0:	0092      	lsls	r2, r2, #2
   208d2:	58d3      	ldr	r3, [r2, r3]
   208d4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   208d6:	68fb      	ldr	r3, [r7, #12]
   208d8:	08db      	lsrs	r3, r3, #3
   208da:	220f      	movs	r2, #15
   208dc:	401a      	ands	r2, r3
   208de:	4b2d      	ldr	r3, [pc, #180]	; (20994 <sd_decode_csd+0xe8>)
   208e0:	0092      	lsls	r2, r2, #2
   208e2:	58d3      	ldr	r3, [r2, r3]
   208e4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   208e6:	4b28      	ldr	r3, [pc, #160]	; (20988 <sd_decode_csd+0xdc>)
   208e8:	681b      	ldr	r3, [r3, #0]
   208ea:	68ba      	ldr	r2, [r7, #8]
   208ec:	6879      	ldr	r1, [r7, #4]
   208ee:	434a      	muls	r2, r1
   208f0:	21fa      	movs	r1, #250	; 0xfa
   208f2:	0089      	lsls	r1, r1, #2
   208f4:	434a      	muls	r2, r1
   208f6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   208f8:	4b23      	ldr	r3, [pc, #140]	; (20988 <sd_decode_csd+0xdc>)
   208fa:	681b      	ldr	r3, [r3, #0]
   208fc:	330e      	adds	r3, #14
   208fe:	0018      	movs	r0, r3
   20900:	2302      	movs	r3, #2
   20902:	227e      	movs	r2, #126	; 0x7e
   20904:	2180      	movs	r1, #128	; 0x80
   20906:	4c21      	ldr	r4, [pc, #132]	; (2098c <sd_decode_csd+0xe0>)
   20908:	47a0      	blx	r4
   2090a:	1e03      	subs	r3, r0, #0
   2090c:	d00f      	beq.n	2092e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   2090e:	4b1e      	ldr	r3, [pc, #120]	; (20988 <sd_decode_csd+0xdc>)
   20910:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   20912:	4b1d      	ldr	r3, [pc, #116]	; (20988 <sd_decode_csd+0xdc>)
   20914:	681b      	ldr	r3, [r3, #0]
   20916:	330e      	adds	r3, #14
   20918:	0018      	movs	r0, r3
   2091a:	2316      	movs	r3, #22
   2091c:	2230      	movs	r2, #48	; 0x30
   2091e:	2180      	movs	r1, #128	; 0x80
   20920:	4d1a      	ldr	r5, [pc, #104]	; (2098c <sd_decode_csd+0xe0>)
   20922:	47a8      	blx	r5
   20924:	0003      	movs	r3, r0
				* 512;
   20926:	3301      	adds	r3, #1
   20928:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   2092a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   2092c:	e028      	b.n	20980 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   2092e:	4b16      	ldr	r3, [pc, #88]	; (20988 <sd_decode_csd+0xdc>)
   20930:	681b      	ldr	r3, [r3, #0]
   20932:	330e      	adds	r3, #14
   20934:	0018      	movs	r0, r3
   20936:	230c      	movs	r3, #12
   20938:	223e      	movs	r2, #62	; 0x3e
   2093a:	2180      	movs	r1, #128	; 0x80
   2093c:	4c13      	ldr	r4, [pc, #76]	; (2098c <sd_decode_csd+0xe0>)
   2093e:	47a0      	blx	r4
   20940:	0003      	movs	r3, r0
   20942:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20944:	4b10      	ldr	r3, [pc, #64]	; (20988 <sd_decode_csd+0xdc>)
   20946:	681b      	ldr	r3, [r3, #0]
   20948:	330e      	adds	r3, #14
   2094a:	0018      	movs	r0, r3
   2094c:	2303      	movs	r3, #3
   2094e:	222f      	movs	r2, #47	; 0x2f
   20950:	2180      	movs	r1, #128	; 0x80
   20952:	4d0e      	ldr	r5, [pc, #56]	; (2098c <sd_decode_csd+0xe0>)
   20954:	47a8      	blx	r5
   20956:	0003      	movs	r3, r0
   20958:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   2095a:	409c      	lsls	r4, r3
   2095c:	0023      	movs	r3, r4
   2095e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   20960:	4b09      	ldr	r3, [pc, #36]	; (20988 <sd_decode_csd+0xdc>)
   20962:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   20964:	4b08      	ldr	r3, [pc, #32]	; (20988 <sd_decode_csd+0xdc>)
   20966:	681b      	ldr	r3, [r3, #0]
   20968:	330e      	adds	r3, #14
   2096a:	0018      	movs	r0, r3
   2096c:	2304      	movs	r3, #4
   2096e:	2250      	movs	r2, #80	; 0x50
   20970:	2180      	movs	r1, #128	; 0x80
   20972:	4d06      	ldr	r5, [pc, #24]	; (2098c <sd_decode_csd+0xe0>)
   20974:	47a8      	blx	r5
   20976:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   20978:	683b      	ldr	r3, [r7, #0]
   2097a:	4093      	lsls	r3, r2
				/ 1024;
   2097c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   2097e:	6063      	str	r3, [r4, #4]
}
   20980:	46c0      	nop			; (mov r8, r8)
   20982:	46bd      	mov	sp, r7
   20984:	b004      	add	sp, #16
   20986:	bdb0      	pop	{r4, r5, r7, pc}
   20988:	200040d4 	.word	0x200040d4
   2098c:	00020279 	.word	0x00020279
   20990:	0003b350 	.word	0x0003b350
   20994:	0003b36c 	.word	0x0003b36c

00020998 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   20998:	b580      	push	{r7, lr}
   2099a:	b082      	sub	sp, #8
   2099c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   2099e:	4b11      	ldr	r3, [pc, #68]	; (209e4 <sd_mmc_cmd13+0x4c>)
   209a0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   209a2:	4b11      	ldr	r3, [pc, #68]	; (209e8 <sd_mmc_cmd13+0x50>)
   209a4:	2100      	movs	r1, #0
   209a6:	0018      	movs	r0, r3
   209a8:	4b10      	ldr	r3, [pc, #64]	; (209ec <sd_mmc_cmd13+0x54>)
   209aa:	4798      	blx	r3
   209ac:	0003      	movs	r3, r0
   209ae:	001a      	movs	r2, r3
   209b0:	2301      	movs	r3, #1
   209b2:	4053      	eors	r3, r2
   209b4:	b2db      	uxtb	r3, r3
   209b6:	2b00      	cmp	r3, #0
   209b8:	d001      	beq.n	209be <sd_mmc_cmd13+0x26>
				return false;
   209ba:	2300      	movs	r3, #0
   209bc:	e00e      	b.n	209dc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   209be:	4b0c      	ldr	r3, [pc, #48]	; (209f0 <sd_mmc_cmd13+0x58>)
   209c0:	4798      	blx	r3
   209c2:	0002      	movs	r2, r0
   209c4:	23ff      	movs	r3, #255	; 0xff
   209c6:	4013      	ands	r3, r2
   209c8:	d006      	beq.n	209d8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   209ca:	687b      	ldr	r3, [r7, #4]
   209cc:	1e5a      	subs	r2, r3, #1
   209ce:	607a      	str	r2, [r7, #4]
   209d0:	2b00      	cmp	r3, #0
   209d2:	d1e6      	bne.n	209a2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   209d4:	2300      	movs	r3, #0
   209d6:	e001      	b.n	209dc <sd_mmc_cmd13+0x44>
				break;
   209d8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   209da:	2301      	movs	r3, #1
}
   209dc:	0018      	movs	r0, r3
   209de:	46bd      	mov	sp, r7
   209e0:	b002      	add	sp, #8
   209e2:	bd80      	pop	{r7, pc}
   209e4:	00030d40 	.word	0x00030d40
   209e8:	00001b0d 	.word	0x00001b0d
   209ec:	00021e09 	.word	0x00021e09
   209f0:	00022049 	.word	0x00022049

000209f4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   209f4:	b590      	push	{r4, r7, lr}
   209f6:	b085      	sub	sp, #20
   209f8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   209fa:	4b38      	ldr	r3, [pc, #224]	; (20adc <sd_acmd51+0xe8>)
   209fc:	681b      	ldr	r3, [r3, #0]
   209fe:	891b      	ldrh	r3, [r3, #8]
   20a00:	041b      	lsls	r3, r3, #16
   20a02:	4a37      	ldr	r2, [pc, #220]	; (20ae0 <sd_acmd51+0xec>)
   20a04:	0019      	movs	r1, r3
   20a06:	0010      	movs	r0, r2
   20a08:	4b36      	ldr	r3, [pc, #216]	; (20ae4 <sd_acmd51+0xf0>)
   20a0a:	4798      	blx	r3
   20a0c:	0003      	movs	r3, r0
   20a0e:	001a      	movs	r2, r3
   20a10:	2301      	movs	r3, #1
   20a12:	4053      	eors	r3, r2
   20a14:	b2db      	uxtb	r3, r3
   20a16:	2b00      	cmp	r3, #0
   20a18:	d001      	beq.n	20a1e <sd_acmd51+0x2a>
		return false;
   20a1a:	2300      	movs	r3, #0
   20a1c:	e059      	b.n	20ad2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   20a1e:	4832      	ldr	r0, [pc, #200]	; (20ae8 <sd_acmd51+0xf4>)
   20a20:	2301      	movs	r3, #1
   20a22:	9300      	str	r3, [sp, #0]
   20a24:	2301      	movs	r3, #1
   20a26:	2208      	movs	r2, #8
   20a28:	2100      	movs	r1, #0
   20a2a:	4c30      	ldr	r4, [pc, #192]	; (20aec <sd_acmd51+0xf8>)
   20a2c:	47a0      	blx	r4
   20a2e:	0003      	movs	r3, r0
   20a30:	001a      	movs	r2, r3
   20a32:	2301      	movs	r3, #1
   20a34:	4053      	eors	r3, r2
   20a36:	b2db      	uxtb	r3, r3
   20a38:	2b00      	cmp	r3, #0
   20a3a:	d001      	beq.n	20a40 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   20a3c:	2300      	movs	r3, #0
   20a3e:	e048      	b.n	20ad2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   20a40:	003b      	movs	r3, r7
   20a42:	2101      	movs	r1, #1
   20a44:	0018      	movs	r0, r3
   20a46:	4b2a      	ldr	r3, [pc, #168]	; (20af0 <sd_acmd51+0xfc>)
   20a48:	4798      	blx	r3
   20a4a:	0003      	movs	r3, r0
   20a4c:	001a      	movs	r2, r3
   20a4e:	2301      	movs	r3, #1
   20a50:	4053      	eors	r3, r2
   20a52:	b2db      	uxtb	r3, r3
   20a54:	2b00      	cmp	r3, #0
   20a56:	d001      	beq.n	20a5c <sd_acmd51+0x68>
		return false;
   20a58:	2300      	movs	r3, #0
   20a5a:	e03a      	b.n	20ad2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   20a5c:	4b25      	ldr	r3, [pc, #148]	; (20af4 <sd_acmd51+0x100>)
   20a5e:	4798      	blx	r3
   20a60:	0003      	movs	r3, r0
   20a62:	001a      	movs	r2, r3
   20a64:	2301      	movs	r3, #1
   20a66:	4053      	eors	r3, r2
   20a68:	b2db      	uxtb	r3, r3
   20a6a:	2b00      	cmp	r3, #0
   20a6c:	d001      	beq.n	20a72 <sd_acmd51+0x7e>
		return false;
   20a6e:	2300      	movs	r3, #0
   20a70:	e02f      	b.n	20ad2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   20a72:	0038      	movs	r0, r7
   20a74:	2304      	movs	r3, #4
   20a76:	2238      	movs	r2, #56	; 0x38
   20a78:	2140      	movs	r1, #64	; 0x40
   20a7a:	4c1f      	ldr	r4, [pc, #124]	; (20af8 <sd_acmd51+0x104>)
   20a7c:	47a0      	blx	r4
   20a7e:	0003      	movs	r3, r0
   20a80:	2b01      	cmp	r3, #1
   20a82:	d008      	beq.n	20a96 <sd_acmd51+0xa2>
   20a84:	d302      	bcc.n	20a8c <sd_acmd51+0x98>
   20a86:	2b02      	cmp	r3, #2
   20a88:	d00a      	beq.n	20aa0 <sd_acmd51+0xac>
   20a8a:	e01c      	b.n	20ac6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   20a8c:	4b13      	ldr	r3, [pc, #76]	; (20adc <sd_acmd51+0xe8>)
   20a8e:	681b      	ldr	r3, [r3, #0]
   20a90:	2210      	movs	r2, #16
   20a92:	731a      	strb	r2, [r3, #12]
		break;
   20a94:	e01c      	b.n	20ad0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   20a96:	4b11      	ldr	r3, [pc, #68]	; (20adc <sd_acmd51+0xe8>)
   20a98:	681b      	ldr	r3, [r3, #0]
   20a9a:	221a      	movs	r2, #26
   20a9c:	731a      	strb	r2, [r3, #12]
		break;
   20a9e:	e017      	b.n	20ad0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   20aa0:	0038      	movs	r0, r7
   20aa2:	2301      	movs	r3, #1
   20aa4:	222f      	movs	r2, #47	; 0x2f
   20aa6:	2140      	movs	r1, #64	; 0x40
   20aa8:	4c13      	ldr	r4, [pc, #76]	; (20af8 <sd_acmd51+0x104>)
   20aaa:	47a0      	blx	r4
   20aac:	0003      	movs	r3, r0
   20aae:	2b01      	cmp	r3, #1
   20ab0:	d104      	bne.n	20abc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   20ab2:	4b0a      	ldr	r3, [pc, #40]	; (20adc <sd_acmd51+0xe8>)
   20ab4:	681b      	ldr	r3, [r3, #0]
   20ab6:	2230      	movs	r2, #48	; 0x30
   20ab8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   20aba:	e009      	b.n	20ad0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   20abc:	4b07      	ldr	r3, [pc, #28]	; (20adc <sd_acmd51+0xe8>)
   20abe:	681b      	ldr	r3, [r3, #0]
   20ac0:	2220      	movs	r2, #32
   20ac2:	731a      	strb	r2, [r3, #12]
		break;
   20ac4:	e004      	b.n	20ad0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   20ac6:	4b05      	ldr	r3, [pc, #20]	; (20adc <sd_acmd51+0xe8>)
   20ac8:	681b      	ldr	r3, [r3, #0]
   20aca:	2210      	movs	r2, #16
   20acc:	731a      	strb	r2, [r3, #12]
		break;
   20ace:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20ad0:	2301      	movs	r3, #1
}
   20ad2:	0018      	movs	r0, r3
   20ad4:	46bd      	mov	sp, r7
   20ad6:	b003      	add	sp, #12
   20ad8:	bd90      	pop	{r4, r7, pc}
   20ada:	46c0      	nop			; (mov r8, r8)
   20adc:	200040d4 	.word	0x200040d4
   20ae0:	00001137 	.word	0x00001137
   20ae4:	00021e09 	.word	0x00021e09
   20ae8:	00081133 	.word	0x00081133
   20aec:	00021e31 	.word	0x00021e31
   20af0:	00022101 	.word	0x00022101
   20af4:	000221a5 	.word	0x000221a5
   20af8:	00020279 	.word	0x00020279

00020afc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   20afc:	b580      	push	{r7, lr}
   20afe:	b082      	sub	sp, #8
   20b00:	af00      	add	r7, sp, #0
   20b02:	0002      	movs	r2, r0
   20b04:	1dfb      	adds	r3, r7, #7
   20b06:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   20b08:	1dfb      	adds	r3, r7, #7
   20b0a:	781b      	ldrb	r3, [r3, #0]
   20b0c:	2b00      	cmp	r3, #0
   20b0e:	d001      	beq.n	20b14 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   20b10:	2304      	movs	r3, #4
   20b12:	e047      	b.n	20ba4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   20b14:	1dfb      	adds	r3, r7, #7
   20b16:	781b      	ldrb	r3, [r3, #0]
   20b18:	4a24      	ldr	r2, [pc, #144]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b1a:	015b      	lsls	r3, r3, #5
   20b1c:	18d3      	adds	r3, r2, r3
   20b1e:	330a      	adds	r3, #10
   20b20:	781b      	ldrb	r3, [r3, #0]
   20b22:	2b04      	cmp	r3, #4
   20b24:	d008      	beq.n	20b38 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   20b26:	1dfb      	adds	r3, r7, #7
   20b28:	781b      	ldrb	r3, [r3, #0]
   20b2a:	4a20      	ldr	r2, [pc, #128]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b2c:	015b      	lsls	r3, r3, #5
   20b2e:	18d3      	adds	r3, r2, r3
   20b30:	330a      	adds	r3, #10
   20b32:	781b      	ldrb	r3, [r3, #0]
   20b34:	2b03      	cmp	r3, #3
   20b36:	d11d      	bne.n	20b74 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   20b38:	1dfb      	adds	r3, r7, #7
   20b3a:	781b      	ldrb	r3, [r3, #0]
   20b3c:	4a1b      	ldr	r2, [pc, #108]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b3e:	015b      	lsls	r3, r3, #5
   20b40:	18d3      	adds	r3, r2, r3
   20b42:	330a      	adds	r3, #10
   20b44:	2202      	movs	r2, #2
   20b46:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   20b48:	1dfb      	adds	r3, r7, #7
   20b4a:	781a      	ldrb	r2, [r3, #0]
   20b4c:	4b17      	ldr	r3, [pc, #92]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b4e:	0152      	lsls	r2, r2, #5
   20b50:	4917      	ldr	r1, [pc, #92]	; (20bb0 <sd_mmc_select_slot+0xb4>)
   20b52:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   20b54:	1dfb      	adds	r3, r7, #7
   20b56:	781b      	ldrb	r3, [r3, #0]
   20b58:	4a14      	ldr	r2, [pc, #80]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b5a:	015b      	lsls	r3, r3, #5
   20b5c:	18d3      	adds	r3, r2, r3
   20b5e:	330d      	adds	r3, #13
   20b60:	2201      	movs	r2, #1
   20b62:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   20b64:	1dfb      	adds	r3, r7, #7
   20b66:	781b      	ldrb	r3, [r3, #0]
   20b68:	4a10      	ldr	r2, [pc, #64]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b6a:	015b      	lsls	r3, r3, #5
   20b6c:	18d3      	adds	r3, r2, r3
   20b6e:	331e      	adds	r3, #30
   20b70:	2200      	movs	r2, #0
   20b72:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   20b74:	4b0f      	ldr	r3, [pc, #60]	; (20bb4 <sd_mmc_select_slot+0xb8>)
   20b76:	1dfa      	adds	r2, r7, #7
   20b78:	7812      	ldrb	r2, [r2, #0]
   20b7a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   20b7c:	1dfb      	adds	r3, r7, #7
   20b7e:	781b      	ldrb	r3, [r3, #0]
   20b80:	015a      	lsls	r2, r3, #5
   20b82:	4b0a      	ldr	r3, [pc, #40]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b84:	18d2      	adds	r2, r2, r3
   20b86:	4b0c      	ldr	r3, [pc, #48]	; (20bb8 <sd_mmc_select_slot+0xbc>)
   20b88:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   20b8a:	4b0c      	ldr	r3, [pc, #48]	; (20bbc <sd_mmc_select_slot+0xc0>)
   20b8c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   20b8e:	1dfb      	adds	r3, r7, #7
   20b90:	781b      	ldrb	r3, [r3, #0]
   20b92:	4a06      	ldr	r2, [pc, #24]	; (20bac <sd_mmc_select_slot+0xb0>)
   20b94:	015b      	lsls	r3, r3, #5
   20b96:	18d3      	adds	r3, r2, r3
   20b98:	330a      	adds	r3, #10
   20b9a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   20b9c:	3b02      	subs	r3, #2
   20b9e:	425a      	negs	r2, r3
   20ba0:	4153      	adcs	r3, r2
   20ba2:	b2db      	uxtb	r3, r3
}
   20ba4:	0018      	movs	r0, r3
   20ba6:	46bd      	mov	sp, r7
   20ba8:	b002      	add	sp, #8
   20baa:	bd80      	pop	{r7, pc}
   20bac:	200040b0 	.word	0x200040b0
   20bb0:	00061a80 	.word	0x00061a80
   20bb4:	200040d0 	.word	0x200040d0
   20bb8:	200040d4 	.word	0x200040d4
   20bbc:	00020bc1 	.word	0x00020bc1

00020bc0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   20bc0:	b5b0      	push	{r4, r5, r7, lr}
   20bc2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20bc4:	4b09      	ldr	r3, [pc, #36]	; (20bec <sd_mmc_configure_slot+0x2c>)
   20bc6:	7818      	ldrb	r0, [r3, #0]
   20bc8:	4b09      	ldr	r3, [pc, #36]	; (20bf0 <sd_mmc_configure_slot+0x30>)
   20bca:	681b      	ldr	r3, [r3, #0]
   20bcc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20bce:	4b08      	ldr	r3, [pc, #32]	; (20bf0 <sd_mmc_configure_slot+0x30>)
   20bd0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20bd2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20bd4:	4b06      	ldr	r3, [pc, #24]	; (20bf0 <sd_mmc_configure_slot+0x30>)
   20bd6:	681b      	ldr	r3, [r3, #0]
   20bd8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20bda:	1e5c      	subs	r4, r3, #1
   20bdc:	41a3      	sbcs	r3, r4
   20bde:	b2db      	uxtb	r3, r3
   20be0:	4c04      	ldr	r4, [pc, #16]	; (20bf4 <sd_mmc_configure_slot+0x34>)
   20be2:	47a0      	blx	r4
}
   20be4:	46c0      	nop			; (mov r8, r8)
   20be6:	46bd      	mov	sp, r7
   20be8:	bdb0      	pop	{r4, r5, r7, pc}
   20bea:	46c0      	nop			; (mov r8, r8)
   20bec:	200040d0 	.word	0x200040d0
   20bf0:	200040d4 	.word	0x200040d4
   20bf4:	00021cf1 	.word	0x00021cf1

00020bf8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   20bf8:	b580      	push	{r7, lr}
   20bfa:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   20bfc:	4b05      	ldr	r3, [pc, #20]	; (20c14 <sd_mmc_deselect_slot+0x1c>)
   20bfe:	781b      	ldrb	r3, [r3, #0]
   20c00:	2b00      	cmp	r3, #0
   20c02:	d104      	bne.n	20c0e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   20c04:	4b03      	ldr	r3, [pc, #12]	; (20c14 <sd_mmc_deselect_slot+0x1c>)
   20c06:	781b      	ldrb	r3, [r3, #0]
   20c08:	0018      	movs	r0, r3
   20c0a:	4b03      	ldr	r3, [pc, #12]	; (20c18 <sd_mmc_deselect_slot+0x20>)
   20c0c:	4798      	blx	r3
	}
}
   20c0e:	46c0      	nop			; (mov r8, r8)
   20c10:	46bd      	mov	sp, r7
   20c12:	bd80      	pop	{r7, pc}
   20c14:	200040d0 	.word	0x200040d0
   20c18:	00021d79 	.word	0x00021d79

00020c1c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   20c1c:	b580      	push	{r7, lr}
   20c1e:	b082      	sub	sp, #8
   20c20:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   20c22:	1dfb      	adds	r3, r7, #7
   20c24:	2200      	movs	r2, #0
   20c26:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   20c28:	4b59      	ldr	r3, [pc, #356]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20c2a:	681b      	ldr	r3, [r3, #0]
   20c2c:	2201      	movs	r2, #1
   20c2e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   20c30:	4b57      	ldr	r3, [pc, #348]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20c32:	681b      	ldr	r3, [r3, #0]
   20c34:	2200      	movs	r2, #0
   20c36:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   20c38:	4b55      	ldr	r3, [pc, #340]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20c3a:	681b      	ldr	r3, [r3, #0]
   20c3c:	2200      	movs	r2, #0
   20c3e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   20c40:	4b54      	ldr	r3, [pc, #336]	; (20d94 <sd_mmc_spi_card_init+0x178>)
   20c42:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   20c44:	2388      	movs	r3, #136	; 0x88
   20c46:	015b      	lsls	r3, r3, #5
   20c48:	2100      	movs	r1, #0
   20c4a:	0018      	movs	r0, r3
   20c4c:	4b52      	ldr	r3, [pc, #328]	; (20d98 <sd_mmc_spi_card_init+0x17c>)
   20c4e:	4798      	blx	r3
   20c50:	0003      	movs	r3, r0
   20c52:	001a      	movs	r2, r3
   20c54:	2301      	movs	r3, #1
   20c56:	4053      	eors	r3, r2
   20c58:	b2db      	uxtb	r3, r3
   20c5a:	2b00      	cmp	r3, #0
   20c5c:	d001      	beq.n	20c62 <sd_mmc_spi_card_init+0x46>
		return false;
   20c5e:	2300      	movs	r3, #0
   20c60:	e092      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   20c62:	1dfb      	adds	r3, r7, #7
   20c64:	0018      	movs	r0, r3
   20c66:	4b4d      	ldr	r3, [pc, #308]	; (20d9c <sd_mmc_spi_card_init+0x180>)
   20c68:	4798      	blx	r3
   20c6a:	0003      	movs	r3, r0
   20c6c:	001a      	movs	r2, r3
   20c6e:	2301      	movs	r3, #1
   20c70:	4053      	eors	r3, r2
   20c72:	b2db      	uxtb	r3, r3
   20c74:	2b00      	cmp	r3, #0
   20c76:	d001      	beq.n	20c7c <sd_mmc_spi_card_init+0x60>
		return false;
   20c78:	2300      	movs	r3, #0
   20c7a:	e085      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   20c7c:	4b48      	ldr	r3, [pc, #288]	; (20da0 <sd_mmc_spi_card_init+0x184>)
   20c7e:	4798      	blx	r3
   20c80:	0003      	movs	r3, r0
   20c82:	001a      	movs	r2, r3
   20c84:	2301      	movs	r3, #1
   20c86:	4053      	eors	r3, r2
   20c88:	b2db      	uxtb	r3, r3
   20c8a:	2b00      	cmp	r3, #0
   20c8c:	d001      	beq.n	20c92 <sd_mmc_spi_card_init+0x76>
		return false;
   20c8e:	2300      	movs	r3, #0
   20c90:	e07a      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20c92:	4b3f      	ldr	r3, [pc, #252]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20c94:	681b      	ldr	r3, [r3, #0]
   20c96:	7adb      	ldrb	r3, [r3, #11]
   20c98:	001a      	movs	r2, r3
   20c9a:	2301      	movs	r3, #1
   20c9c:	4013      	ands	r3, r2
   20c9e:	d021      	beq.n	20ce4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   20ca0:	1dfb      	adds	r3, r7, #7
   20ca2:	781b      	ldrb	r3, [r3, #0]
   20ca4:	0018      	movs	r0, r3
   20ca6:	4b3f      	ldr	r3, [pc, #252]	; (20da4 <sd_mmc_spi_card_init+0x188>)
   20ca8:	4798      	blx	r3
   20caa:	0003      	movs	r3, r0
   20cac:	001a      	movs	r2, r3
   20cae:	2301      	movs	r3, #1
   20cb0:	4053      	eors	r3, r2
   20cb2:	b2db      	uxtb	r3, r3
   20cb4:	2b00      	cmp	r3, #0
   20cb6:	d007      	beq.n	20cc8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   20cb8:	4b35      	ldr	r3, [pc, #212]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20cba:	681b      	ldr	r3, [r3, #0]
   20cbc:	2202      	movs	r2, #2
   20cbe:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   20cc0:	4b39      	ldr	r3, [pc, #228]	; (20da8 <sd_mmc_spi_card_init+0x18c>)
   20cc2:	4798      	blx	r3
   20cc4:	0003      	movs	r3, r0
   20cc6:	e05f      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   20cc8:	4b38      	ldr	r3, [pc, #224]	; (20dac <sd_mmc_spi_card_init+0x190>)
   20cca:	2100      	movs	r1, #0
   20ccc:	0018      	movs	r0, r3
   20cce:	4b32      	ldr	r3, [pc, #200]	; (20d98 <sd_mmc_spi_card_init+0x17c>)
   20cd0:	4798      	blx	r3
   20cd2:	0003      	movs	r3, r0
   20cd4:	001a      	movs	r2, r3
   20cd6:	2301      	movs	r3, #1
   20cd8:	4053      	eors	r3, r2
   20cda:	b2db      	uxtb	r3, r3
   20cdc:	2b00      	cmp	r3, #0
   20cde:	d001      	beq.n	20ce4 <sd_mmc_spi_card_init+0xc8>
			return false;
   20ce0:	2300      	movs	r3, #0
   20ce2:	e051      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20ce4:	4b2a      	ldr	r3, [pc, #168]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20ce6:	681b      	ldr	r3, [r3, #0]
   20ce8:	7adb      	ldrb	r3, [r3, #11]
   20cea:	001a      	movs	r2, r3
   20cec:	2301      	movs	r3, #1
   20cee:	4013      	ands	r3, r2
   20cf0:	d017      	beq.n	20d22 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   20cf2:	4b2f      	ldr	r3, [pc, #188]	; (20db0 <sd_mmc_spi_card_init+0x194>)
   20cf4:	4798      	blx	r3
   20cf6:	0003      	movs	r3, r0
   20cf8:	001a      	movs	r2, r3
   20cfa:	2301      	movs	r3, #1
   20cfc:	4053      	eors	r3, r2
   20cfe:	b2db      	uxtb	r3, r3
   20d00:	2b00      	cmp	r3, #0
   20d02:	d001      	beq.n	20d08 <sd_mmc_spi_card_init+0xec>
			return false;
   20d04:	2300      	movs	r3, #0
   20d06:	e03f      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   20d08:	4b2a      	ldr	r3, [pc, #168]	; (20db4 <sd_mmc_spi_card_init+0x198>)
   20d0a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   20d0c:	4b2a      	ldr	r3, [pc, #168]	; (20db8 <sd_mmc_spi_card_init+0x19c>)
   20d0e:	4798      	blx	r3
   20d10:	0003      	movs	r3, r0
   20d12:	001a      	movs	r2, r3
   20d14:	2301      	movs	r3, #1
   20d16:	4053      	eors	r3, r2
   20d18:	b2db      	uxtb	r3, r3
   20d1a:	2b00      	cmp	r3, #0
   20d1c:	d001      	beq.n	20d22 <sd_mmc_spi_card_init+0x106>
			return false;
   20d1e:	2300      	movs	r3, #0
   20d20:	e032      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20d22:	4b1b      	ldr	r3, [pc, #108]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20d24:	681b      	ldr	r3, [r3, #0]
   20d26:	7adb      	ldrb	r3, [r3, #11]
   20d28:	001a      	movs	r2, r3
   20d2a:	2301      	movs	r3, #1
   20d2c:	4013      	ands	r3, r2
   20d2e:	d016      	beq.n	20d5e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   20d30:	4b17      	ldr	r3, [pc, #92]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20d32:	681b      	ldr	r3, [r3, #0]
   20d34:	7adb      	ldrb	r3, [r3, #11]
   20d36:	001a      	movs	r2, r3
   20d38:	2308      	movs	r3, #8
   20d3a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20d3c:	d10f      	bne.n	20d5e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   20d3e:	2380      	movs	r3, #128	; 0x80
   20d40:	009b      	lsls	r3, r3, #2
   20d42:	4a1e      	ldr	r2, [pc, #120]	; (20dbc <sd_mmc_spi_card_init+0x1a0>)
   20d44:	0019      	movs	r1, r3
   20d46:	0010      	movs	r0, r2
   20d48:	4b13      	ldr	r3, [pc, #76]	; (20d98 <sd_mmc_spi_card_init+0x17c>)
   20d4a:	4798      	blx	r3
   20d4c:	0003      	movs	r3, r0
   20d4e:	001a      	movs	r2, r3
   20d50:	2301      	movs	r3, #1
   20d52:	4053      	eors	r3, r2
   20d54:	b2db      	uxtb	r3, r3
   20d56:	2b00      	cmp	r3, #0
   20d58:	d001      	beq.n	20d5e <sd_mmc_spi_card_init+0x142>
			return false;
   20d5a:	2300      	movs	r3, #0
   20d5c:	e014      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20d5e:	4b0c      	ldr	r3, [pc, #48]	; (20d90 <sd_mmc_spi_card_init+0x174>)
   20d60:	681b      	ldr	r3, [r3, #0]
   20d62:	7adb      	ldrb	r3, [r3, #11]
   20d64:	001a      	movs	r2, r3
   20d66:	2301      	movs	r3, #1
   20d68:	4013      	ands	r3, r2
   20d6a:	d00a      	beq.n	20d82 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   20d6c:	4b14      	ldr	r3, [pc, #80]	; (20dc0 <sd_mmc_spi_card_init+0x1a4>)
   20d6e:	4798      	blx	r3
   20d70:	0003      	movs	r3, r0
   20d72:	001a      	movs	r2, r3
   20d74:	2301      	movs	r3, #1
   20d76:	4053      	eors	r3, r2
   20d78:	b2db      	uxtb	r3, r3
   20d7a:	2b00      	cmp	r3, #0
   20d7c:	d001      	beq.n	20d82 <sd_mmc_spi_card_init+0x166>
			return false;
   20d7e:	2300      	movs	r3, #0
   20d80:	e002      	b.n	20d88 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   20d82:	4b10      	ldr	r3, [pc, #64]	; (20dc4 <sd_mmc_spi_card_init+0x1a8>)
   20d84:	4798      	blx	r3
	return true;
   20d86:	2301      	movs	r3, #1
}
   20d88:	0018      	movs	r0, r3
   20d8a:	46bd      	mov	sp, r7
   20d8c:	b002      	add	sp, #8
   20d8e:	bd80      	pop	{r7, pc}
   20d90:	200040d4 	.word	0x200040d4
   20d94:	00021dbd 	.word	0x00021dbd
   20d98:	00021e09 	.word	0x00021e09
   20d9c:	00020571 	.word	0x00020571
   20da0:	00020565 	.word	0x00020565
   20da4:	00020481 	.word	0x00020481
   20da8:	00020dc9 	.word	0x00020dc9
   20dac:	0000113b 	.word	0x0000113b
   20db0:	0002070d 	.word	0x0002070d
   20db4:	000208ad 	.word	0x000208ad
   20db8:	000209f5 	.word	0x000209f5
   20dbc:	00001110 	.word	0x00001110
   20dc0:	00020999 	.word	0x00020999
   20dc4:	00020bc1 	.word	0x00020bc1

00020dc8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   20dc8:	b580      	push	{r7, lr}
   20dca:	b082      	sub	sp, #8
   20dcc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   20dce:	2388      	movs	r3, #136	; 0x88
   20dd0:	015b      	lsls	r3, r3, #5
   20dd2:	2100      	movs	r1, #0
   20dd4:	0018      	movs	r0, r3
   20dd6:	4b32      	ldr	r3, [pc, #200]	; (20ea0 <sd_mmc_spi_install_mmc+0xd8>)
   20dd8:	4798      	blx	r3
   20dda:	0003      	movs	r3, r0
   20ddc:	001a      	movs	r2, r3
   20dde:	2301      	movs	r3, #1
   20de0:	4053      	eors	r3, r2
   20de2:	b2db      	uxtb	r3, r3
   20de4:	2b00      	cmp	r3, #0
   20de6:	d001      	beq.n	20dec <sd_mmc_spi_install_mmc+0x24>
		return false;
   20de8:	2300      	movs	r3, #0
   20dea:	e055      	b.n	20e98 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   20dec:	4b2d      	ldr	r3, [pc, #180]	; (20ea4 <sd_mmc_spi_install_mmc+0xdc>)
   20dee:	4798      	blx	r3
   20df0:	0003      	movs	r3, r0
   20df2:	001a      	movs	r2, r3
   20df4:	2301      	movs	r3, #1
   20df6:	4053      	eors	r3, r2
   20df8:	b2db      	uxtb	r3, r3
   20dfa:	2b00      	cmp	r3, #0
   20dfc:	d001      	beq.n	20e02 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   20dfe:	2300      	movs	r3, #0
   20e00:	e04a      	b.n	20e98 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   20e02:	4b29      	ldr	r3, [pc, #164]	; (20ea8 <sd_mmc_spi_install_mmc+0xe0>)
   20e04:	2100      	movs	r1, #0
   20e06:	0018      	movs	r0, r3
   20e08:	4b25      	ldr	r3, [pc, #148]	; (20ea0 <sd_mmc_spi_install_mmc+0xd8>)
   20e0a:	4798      	blx	r3
   20e0c:	0003      	movs	r3, r0
   20e0e:	001a      	movs	r2, r3
   20e10:	2301      	movs	r3, #1
   20e12:	4053      	eors	r3, r2
   20e14:	b2db      	uxtb	r3, r3
   20e16:	2b00      	cmp	r3, #0
   20e18:	d001      	beq.n	20e1e <sd_mmc_spi_install_mmc+0x56>
		return false;
   20e1a:	2300      	movs	r3, #0
   20e1c:	e03c      	b.n	20e98 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   20e1e:	4b23      	ldr	r3, [pc, #140]	; (20eac <sd_mmc_spi_install_mmc+0xe4>)
   20e20:	4798      	blx	r3
   20e22:	0003      	movs	r3, r0
   20e24:	001a      	movs	r2, r3
   20e26:	2301      	movs	r3, #1
   20e28:	4053      	eors	r3, r2
   20e2a:	b2db      	uxtb	r3, r3
   20e2c:	2b00      	cmp	r3, #0
   20e2e:	d001      	beq.n	20e34 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   20e30:	2300      	movs	r3, #0
   20e32:	e031      	b.n	20e98 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   20e34:	4b1e      	ldr	r3, [pc, #120]	; (20eb0 <sd_mmc_spi_install_mmc+0xe8>)
   20e36:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   20e38:	4b1e      	ldr	r3, [pc, #120]	; (20eb4 <sd_mmc_spi_install_mmc+0xec>)
   20e3a:	681b      	ldr	r3, [r3, #0]
   20e3c:	7b1b      	ldrb	r3, [r3, #12]
   20e3e:	2b3f      	cmp	r3, #63	; 0x3f
   20e40:	d90c      	bls.n	20e5c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   20e42:	1dfb      	adds	r3, r7, #7
   20e44:	0018      	movs	r0, r3
   20e46:	4b1c      	ldr	r3, [pc, #112]	; (20eb8 <sd_mmc_spi_install_mmc+0xf0>)
   20e48:	4798      	blx	r3
   20e4a:	0003      	movs	r3, r0
   20e4c:	001a      	movs	r2, r3
   20e4e:	2301      	movs	r3, #1
   20e50:	4053      	eors	r3, r2
   20e52:	b2db      	uxtb	r3, r3
   20e54:	2b00      	cmp	r3, #0
   20e56:	d001      	beq.n	20e5c <sd_mmc_spi_install_mmc+0x94>
			return false;
   20e58:	2300      	movs	r3, #0
   20e5a:	e01d      	b.n	20e98 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   20e5c:	2380      	movs	r3, #128	; 0x80
   20e5e:	009b      	lsls	r3, r3, #2
   20e60:	4a16      	ldr	r2, [pc, #88]	; (20ebc <sd_mmc_spi_install_mmc+0xf4>)
   20e62:	0019      	movs	r1, r3
   20e64:	0010      	movs	r0, r2
   20e66:	4b0e      	ldr	r3, [pc, #56]	; (20ea0 <sd_mmc_spi_install_mmc+0xd8>)
   20e68:	4798      	blx	r3
   20e6a:	0003      	movs	r3, r0
   20e6c:	001a      	movs	r2, r3
   20e6e:	2301      	movs	r3, #1
   20e70:	4053      	eors	r3, r2
   20e72:	b2db      	uxtb	r3, r3
   20e74:	2b00      	cmp	r3, #0
   20e76:	d001      	beq.n	20e7c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   20e78:	2300      	movs	r3, #0
   20e7a:	e00d      	b.n	20e98 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   20e7c:	4b10      	ldr	r3, [pc, #64]	; (20ec0 <sd_mmc_spi_install_mmc+0xf8>)
   20e7e:	4798      	blx	r3
   20e80:	0003      	movs	r3, r0
   20e82:	001a      	movs	r2, r3
   20e84:	2301      	movs	r3, #1
   20e86:	4053      	eors	r3, r2
   20e88:	b2db      	uxtb	r3, r3
   20e8a:	2b00      	cmp	r3, #0
   20e8c:	d001      	beq.n	20e92 <sd_mmc_spi_install_mmc+0xca>
		return false;
   20e8e:	2300      	movs	r3, #0
   20e90:	e002      	b.n	20e98 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   20e92:	4b0c      	ldr	r3, [pc, #48]	; (20ec4 <sd_mmc_spi_install_mmc+0xfc>)
   20e94:	4798      	blx	r3
	return true;
   20e96:	2301      	movs	r3, #1
}
   20e98:	0018      	movs	r0, r3
   20e9a:	46bd      	mov	sp, r7
   20e9c:	b002      	add	sp, #8
   20e9e:	bd80      	pop	{r7, pc}
   20ea0:	00021e09 	.word	0x00021e09
   20ea4:	000203d5 	.word	0x000203d5
   20ea8:	0000113b 	.word	0x0000113b
   20eac:	0002070d 	.word	0x0002070d
   20eb0:	0002077d 	.word	0x0002077d
   20eb4:	200040d4 	.word	0x200040d4
   20eb8:	000205e1 	.word	0x000205e1
   20ebc:	00001110 	.word	0x00001110
   20ec0:	00020999 	.word	0x00020999
   20ec4:	00020bc1 	.word	0x00020bc1

00020ec8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   20ec8:	b580      	push	{r7, lr}
   20eca:	b082      	sub	sp, #8
   20ecc:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   20ece:	1dfb      	adds	r3, r7, #7
   20ed0:	2200      	movs	r2, #0
   20ed2:	701a      	strb	r2, [r3, #0]
   20ed4:	e00c      	b.n	20ef0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   20ed6:	1dfb      	adds	r3, r7, #7
   20ed8:	781b      	ldrb	r3, [r3, #0]
   20eda:	4a0c      	ldr	r2, [pc, #48]	; (20f0c <sd_mmc_init+0x44>)
   20edc:	015b      	lsls	r3, r3, #5
   20ede:	18d3      	adds	r3, r2, r3
   20ee0:	330a      	adds	r3, #10
   20ee2:	2204      	movs	r2, #4
   20ee4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   20ee6:	1dfb      	adds	r3, r7, #7
   20ee8:	781a      	ldrb	r2, [r3, #0]
   20eea:	1dfb      	adds	r3, r7, #7
   20eec:	3201      	adds	r2, #1
   20eee:	701a      	strb	r2, [r3, #0]
   20ef0:	1dfb      	adds	r3, r7, #7
   20ef2:	781b      	ldrb	r3, [r3, #0]
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	d0ee      	beq.n	20ed6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   20ef8:	4b05      	ldr	r3, [pc, #20]	; (20f10 <sd_mmc_init+0x48>)
   20efa:	22ff      	movs	r2, #255	; 0xff
   20efc:	701a      	strb	r2, [r3, #0]
	driver_init();
   20efe:	4b05      	ldr	r3, [pc, #20]	; (20f14 <sd_mmc_init+0x4c>)
   20f00:	4798      	blx	r3
}
   20f02:	46c0      	nop			; (mov r8, r8)
   20f04:	46bd      	mov	sp, r7
   20f06:	b002      	add	sp, #8
   20f08:	bd80      	pop	{r7, pc}
   20f0a:	46c0      	nop			; (mov r8, r8)
   20f0c:	200040b0 	.word	0x200040b0
   20f10:	200040d0 	.word	0x200040d0
   20f14:	00021c29 	.word	0x00021c29

00020f18 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   20f18:	b590      	push	{r4, r7, lr}
   20f1a:	b085      	sub	sp, #20
   20f1c:	af00      	add	r7, sp, #0
   20f1e:	0002      	movs	r2, r0
   20f20:	1dfb      	adds	r3, r7, #7
   20f22:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   20f24:	230f      	movs	r3, #15
   20f26:	18fc      	adds	r4, r7, r3
   20f28:	1dfb      	adds	r3, r7, #7
   20f2a:	781b      	ldrb	r3, [r3, #0]
   20f2c:	0018      	movs	r0, r3
   20f2e:	4b13      	ldr	r3, [pc, #76]	; (20f7c <sd_mmc_check+0x64>)
   20f30:	4798      	blx	r3
   20f32:	0003      	movs	r3, r0
   20f34:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   20f36:	230f      	movs	r3, #15
   20f38:	18fb      	adds	r3, r7, r3
   20f3a:	781b      	ldrb	r3, [r3, #0]
   20f3c:	2b01      	cmp	r3, #1
   20f3e:	d005      	beq.n	20f4c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   20f40:	4b0f      	ldr	r3, [pc, #60]	; (20f80 <sd_mmc_check+0x68>)
   20f42:	4798      	blx	r3
		return sd_mmc_err;
   20f44:	230f      	movs	r3, #15
   20f46:	18fb      	adds	r3, r7, r3
   20f48:	781b      	ldrb	r3, [r3, #0]
   20f4a:	e012      	b.n	20f72 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   20f4c:	4b0d      	ldr	r3, [pc, #52]	; (20f84 <sd_mmc_check+0x6c>)
   20f4e:	4798      	blx	r3
   20f50:	1e03      	subs	r3, r0, #0
   20f52:	d007      	beq.n	20f64 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   20f54:	4b0c      	ldr	r3, [pc, #48]	; (20f88 <sd_mmc_check+0x70>)
   20f56:	681b      	ldr	r3, [r3, #0]
   20f58:	2200      	movs	r2, #0
   20f5a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   20f5c:	4b08      	ldr	r3, [pc, #32]	; (20f80 <sd_mmc_check+0x68>)
   20f5e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   20f60:	2301      	movs	r3, #1
   20f62:	e006      	b.n	20f72 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   20f64:	4b08      	ldr	r3, [pc, #32]	; (20f88 <sd_mmc_check+0x70>)
   20f66:	681b      	ldr	r3, [r3, #0]
   20f68:	2203      	movs	r2, #3
   20f6a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   20f6c:	4b04      	ldr	r3, [pc, #16]	; (20f80 <sd_mmc_check+0x68>)
   20f6e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   20f70:	2303      	movs	r3, #3
}
   20f72:	0018      	movs	r0, r3
   20f74:	46bd      	mov	sp, r7
   20f76:	b005      	add	sp, #20
   20f78:	bd90      	pop	{r4, r7, pc}
   20f7a:	46c0      	nop			; (mov r8, r8)
   20f7c:	00020afd 	.word	0x00020afd
   20f80:	00020bf9 	.word	0x00020bf9
   20f84:	00020c1d 	.word	0x00020c1d
   20f88:	200040d4 	.word	0x200040d4

00020f8c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   20f8c:	b580      	push	{r7, lr}
   20f8e:	b082      	sub	sp, #8
   20f90:	af00      	add	r7, sp, #0
   20f92:	0002      	movs	r2, r0
   20f94:	1dfb      	adds	r3, r7, #7
   20f96:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   20f98:	1dfb      	adds	r3, r7, #7
   20f9a:	781b      	ldrb	r3, [r3, #0]
   20f9c:	0018      	movs	r0, r3
   20f9e:	4b07      	ldr	r3, [pc, #28]	; (20fbc <sd_mmc_get_type+0x30>)
   20fa0:	4798      	blx	r3
   20fa2:	1e03      	subs	r3, r0, #0
   20fa4:	d001      	beq.n	20faa <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   20fa6:	2300      	movs	r3, #0
   20fa8:	e004      	b.n	20fb4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   20faa:	4b05      	ldr	r3, [pc, #20]	; (20fc0 <sd_mmc_get_type+0x34>)
   20fac:	4798      	blx	r3
	return sd_mmc_card->type;
   20fae:	4b05      	ldr	r3, [pc, #20]	; (20fc4 <sd_mmc_get_type+0x38>)
   20fb0:	681b      	ldr	r3, [r3, #0]
   20fb2:	7adb      	ldrb	r3, [r3, #11]
}
   20fb4:	0018      	movs	r0, r3
   20fb6:	46bd      	mov	sp, r7
   20fb8:	b002      	add	sp, #8
   20fba:	bd80      	pop	{r7, pc}
   20fbc:	00020afd 	.word	0x00020afd
   20fc0:	00020bf9 	.word	0x00020bf9
   20fc4:	200040d4 	.word	0x200040d4

00020fc8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   20fc8:	b580      	push	{r7, lr}
   20fca:	b082      	sub	sp, #8
   20fcc:	af00      	add	r7, sp, #0
   20fce:	0002      	movs	r2, r0
   20fd0:	1dfb      	adds	r3, r7, #7
   20fd2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   20fd4:	1dfb      	adds	r3, r7, #7
   20fd6:	781b      	ldrb	r3, [r3, #0]
   20fd8:	0018      	movs	r0, r3
   20fda:	4b07      	ldr	r3, [pc, #28]	; (20ff8 <sd_mmc_get_capacity+0x30>)
   20fdc:	4798      	blx	r3
   20fde:	1e03      	subs	r3, r0, #0
   20fe0:	d001      	beq.n	20fe6 <sd_mmc_get_capacity+0x1e>
		return 0;
   20fe2:	2300      	movs	r3, #0
   20fe4:	e004      	b.n	20ff0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   20fe6:	4b05      	ldr	r3, [pc, #20]	; (20ffc <sd_mmc_get_capacity+0x34>)
   20fe8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   20fea:	4b05      	ldr	r3, [pc, #20]	; (21000 <sd_mmc_get_capacity+0x38>)
   20fec:	681b      	ldr	r3, [r3, #0]
   20fee:	685b      	ldr	r3, [r3, #4]
}
   20ff0:	0018      	movs	r0, r3
   20ff2:	46bd      	mov	sp, r7
   20ff4:	b002      	add	sp, #8
   20ff6:	bd80      	pop	{r7, pc}
   20ff8:	00020afd 	.word	0x00020afd
   20ffc:	00020bf9 	.word	0x00020bf9
   21000:	200040d4 	.word	0x200040d4

00021004 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   21004:	b580      	push	{r7, lr}
   21006:	b082      	sub	sp, #8
   21008:	af00      	add	r7, sp, #0
   2100a:	0002      	movs	r2, r0
   2100c:	1dfb      	adds	r3, r7, #7
   2100e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   21010:	2300      	movs	r3, #0
}
   21012:	0018      	movs	r0, r3
   21014:	46bd      	mov	sp, r7
   21016:	b002      	add	sp, #8
   21018:	bd80      	pop	{r7, pc}
	...

0002101c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   2101c:	b590      	push	{r4, r7, lr}
   2101e:	b089      	sub	sp, #36	; 0x24
   21020:	af02      	add	r7, sp, #8
   21022:	6039      	str	r1, [r7, #0]
   21024:	0011      	movs	r1, r2
   21026:	1dfb      	adds	r3, r7, #7
   21028:	1c02      	adds	r2, r0, #0
   2102a:	701a      	strb	r2, [r3, #0]
   2102c:	1d3b      	adds	r3, r7, #4
   2102e:	1c0a      	adds	r2, r1, #0
   21030:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21032:	230f      	movs	r3, #15
   21034:	18fc      	adds	r4, r7, r3
   21036:	1dfb      	adds	r3, r7, #7
   21038:	781b      	ldrb	r3, [r3, #0]
   2103a:	0018      	movs	r0, r3
   2103c:	4b29      	ldr	r3, [pc, #164]	; (210e4 <sd_mmc_init_read_blocks+0xc8>)
   2103e:	4798      	blx	r3
   21040:	0003      	movs	r3, r0
   21042:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21044:	230f      	movs	r3, #15
   21046:	18fb      	adds	r3, r7, r3
   21048:	781b      	ldrb	r3, [r3, #0]
   2104a:	2b00      	cmp	r3, #0
   2104c:	d003      	beq.n	21056 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   2104e:	230f      	movs	r3, #15
   21050:	18fb      	adds	r3, r7, r3
   21052:	781b      	ldrb	r3, [r3, #0]
   21054:	e041      	b.n	210da <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   21056:	4b24      	ldr	r3, [pc, #144]	; (210e8 <sd_mmc_init_read_blocks+0xcc>)
   21058:	4798      	blx	r3
   2105a:	0003      	movs	r3, r0
   2105c:	001a      	movs	r2, r3
   2105e:	2301      	movs	r3, #1
   21060:	4053      	eors	r3, r2
   21062:	b2db      	uxtb	r3, r3
   21064:	2b00      	cmp	r3, #0
   21066:	d003      	beq.n	21070 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   21068:	4b20      	ldr	r3, [pc, #128]	; (210ec <sd_mmc_init_read_blocks+0xd0>)
   2106a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   2106c:	2305      	movs	r3, #5
   2106e:	e034      	b.n	210da <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   21070:	1d3b      	adds	r3, r7, #4
   21072:	881b      	ldrh	r3, [r3, #0]
   21074:	2b01      	cmp	r3, #1
   21076:	d902      	bls.n	2107e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   21078:	4b1d      	ldr	r3, [pc, #116]	; (210f0 <sd_mmc_init_read_blocks+0xd4>)
   2107a:	617b      	str	r3, [r7, #20]
   2107c:	e001      	b.n	21082 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   2107e:	4b1d      	ldr	r3, [pc, #116]	; (210f4 <sd_mmc_init_read_blocks+0xd8>)
   21080:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   21082:	4b1d      	ldr	r3, [pc, #116]	; (210f8 <sd_mmc_init_read_blocks+0xdc>)
   21084:	681b      	ldr	r3, [r3, #0]
   21086:	7adb      	ldrb	r3, [r3, #11]
   21088:	001a      	movs	r2, r3
   2108a:	2308      	movs	r3, #8
   2108c:	4013      	ands	r3, r2
   2108e:	d002      	beq.n	21096 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   21090:	683b      	ldr	r3, [r7, #0]
   21092:	613b      	str	r3, [r7, #16]
   21094:	e002      	b.n	2109c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   21096:	683b      	ldr	r3, [r7, #0]
   21098:	025b      	lsls	r3, r3, #9
   2109a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   2109c:	1d3b      	adds	r3, r7, #4
   2109e:	881c      	ldrh	r4, [r3, #0]
   210a0:	2380      	movs	r3, #128	; 0x80
   210a2:	009a      	lsls	r2, r3, #2
   210a4:	6939      	ldr	r1, [r7, #16]
   210a6:	6978      	ldr	r0, [r7, #20]
   210a8:	2301      	movs	r3, #1
   210aa:	9300      	str	r3, [sp, #0]
   210ac:	0023      	movs	r3, r4
   210ae:	4c13      	ldr	r4, [pc, #76]	; (210fc <sd_mmc_init_read_blocks+0xe0>)
   210b0:	47a0      	blx	r4
   210b2:	0003      	movs	r3, r0
   210b4:	001a      	movs	r2, r3
   210b6:	2301      	movs	r3, #1
   210b8:	4053      	eors	r3, r2
   210ba:	b2db      	uxtb	r3, r3
   210bc:	2b00      	cmp	r3, #0
   210be:	d003      	beq.n	210c8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   210c0:	4b0a      	ldr	r3, [pc, #40]	; (210ec <sd_mmc_init_read_blocks+0xd0>)
   210c2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   210c4:	2305      	movs	r3, #5
   210c6:	e008      	b.n	210da <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   210c8:	4b0d      	ldr	r3, [pc, #52]	; (21100 <sd_mmc_init_read_blocks+0xe4>)
   210ca:	1d3a      	adds	r2, r7, #4
   210cc:	8812      	ldrh	r2, [r2, #0]
   210ce:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   210d0:	4b0c      	ldr	r3, [pc, #48]	; (21104 <sd_mmc_init_read_blocks+0xe8>)
   210d2:	1d3a      	adds	r2, r7, #4
   210d4:	8812      	ldrh	r2, [r2, #0]
   210d6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   210d8:	2300      	movs	r3, #0
}
   210da:	0018      	movs	r0, r3
   210dc:	46bd      	mov	sp, r7
   210de:	b007      	add	sp, #28
   210e0:	bd90      	pop	{r4, r7, pc}
   210e2:	46c0      	nop			; (mov r8, r8)
   210e4:	00020afd 	.word	0x00020afd
   210e8:	00020999 	.word	0x00020999
   210ec:	00020bf9 	.word	0x00020bf9
   210f0:	00101112 	.word	0x00101112
   210f4:	00081111 	.word	0x00081111
   210f8:	200040d4 	.word	0x200040d4
   210fc:	00021e31 	.word	0x00021e31
   21100:	200040da 	.word	0x200040da
   21104:	200040d8 	.word	0x200040d8

00021108 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   21108:	b580      	push	{r7, lr}
   2110a:	b082      	sub	sp, #8
   2110c:	af00      	add	r7, sp, #0
   2110e:	6078      	str	r0, [r7, #4]
   21110:	000a      	movs	r2, r1
   21112:	1cbb      	adds	r3, r7, #2
   21114:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   21116:	1cbb      	adds	r3, r7, #2
   21118:	881a      	ldrh	r2, [r3, #0]
   2111a:	687b      	ldr	r3, [r7, #4]
   2111c:	0011      	movs	r1, r2
   2111e:	0018      	movs	r0, r3
   21120:	4b0d      	ldr	r3, [pc, #52]	; (21158 <sd_mmc_start_read_blocks+0x50>)
   21122:	4798      	blx	r3
   21124:	0003      	movs	r3, r0
   21126:	001a      	movs	r2, r3
   21128:	2301      	movs	r3, #1
   2112a:	4053      	eors	r3, r2
   2112c:	b2db      	uxtb	r3, r3
   2112e:	2b00      	cmp	r3, #0
   21130:	d004      	beq.n	2113c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   21132:	4b0a      	ldr	r3, [pc, #40]	; (2115c <sd_mmc_start_read_blocks+0x54>)
   21134:	2200      	movs	r2, #0
   21136:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21138:	2305      	movs	r3, #5
   2113a:	e008      	b.n	2114e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   2113c:	4b07      	ldr	r3, [pc, #28]	; (2115c <sd_mmc_start_read_blocks+0x54>)
   2113e:	881a      	ldrh	r2, [r3, #0]
   21140:	1cbb      	adds	r3, r7, #2
   21142:	881b      	ldrh	r3, [r3, #0]
   21144:	1ad3      	subs	r3, r2, r3
   21146:	b29a      	uxth	r2, r3
   21148:	4b04      	ldr	r3, [pc, #16]	; (2115c <sd_mmc_start_read_blocks+0x54>)
   2114a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   2114c:	2300      	movs	r3, #0
}
   2114e:	0018      	movs	r0, r3
   21150:	46bd      	mov	sp, r7
   21152:	b002      	add	sp, #8
   21154:	bd80      	pop	{r7, pc}
   21156:	46c0      	nop			; (mov r8, r8)
   21158:	00022101 	.word	0x00022101
   2115c:	200040da 	.word	0x200040da

00021160 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   21160:	b580      	push	{r7, lr}
   21162:	b082      	sub	sp, #8
   21164:	af00      	add	r7, sp, #0
   21166:	0002      	movs	r2, r0
   21168:	1dfb      	adds	r3, r7, #7
   2116a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   2116c:	4b1c      	ldr	r3, [pc, #112]	; (211e0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   2116e:	4798      	blx	r3
   21170:	0003      	movs	r3, r0
   21172:	001a      	movs	r2, r3
   21174:	2301      	movs	r3, #1
   21176:	4053      	eors	r3, r2
   21178:	b2db      	uxtb	r3, r3
   2117a:	2b00      	cmp	r3, #0
   2117c:	d001      	beq.n	21182 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   2117e:	2305      	movs	r3, #5
   21180:	e029      	b.n	211d6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   21182:	1dfb      	adds	r3, r7, #7
   21184:	781b      	ldrb	r3, [r3, #0]
   21186:	2b00      	cmp	r3, #0
   21188:	d003      	beq.n	21192 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   2118a:	4b16      	ldr	r3, [pc, #88]	; (211e4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   2118c:	2200      	movs	r2, #0
   2118e:	801a      	strh	r2, [r3, #0]
   21190:	e005      	b.n	2119e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   21192:	4b14      	ldr	r3, [pc, #80]	; (211e4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   21194:	881b      	ldrh	r3, [r3, #0]
   21196:	2b00      	cmp	r3, #0
   21198:	d001      	beq.n	2119e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   2119a:	2300      	movs	r3, #0
   2119c:	e01b      	b.n	211d6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   2119e:	4b12      	ldr	r3, [pc, #72]	; (211e8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   211a0:	881b      	ldrh	r3, [r3, #0]
   211a2:	2b01      	cmp	r3, #1
   211a4:	d103      	bne.n	211ae <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   211a6:	4b11      	ldr	r3, [pc, #68]	; (211ec <sd_mmc_wait_end_of_read_blocks+0x8c>)
   211a8:	4798      	blx	r3
		return SD_MMC_OK;
   211aa:	2300      	movs	r3, #0
   211ac:	e013      	b.n	211d6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   211ae:	4b10      	ldr	r3, [pc, #64]	; (211f0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   211b0:	2100      	movs	r1, #0
   211b2:	0018      	movs	r0, r3
   211b4:	4b0f      	ldr	r3, [pc, #60]	; (211f4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   211b6:	4798      	blx	r3
   211b8:	0003      	movs	r3, r0
   211ba:	001a      	movs	r2, r3
   211bc:	2301      	movs	r3, #1
   211be:	4053      	eors	r3, r2
   211c0:	b2db      	uxtb	r3, r3
   211c2:	2b00      	cmp	r3, #0
   211c4:	d004      	beq.n	211d0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   211c6:	4b0a      	ldr	r3, [pc, #40]	; (211f0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   211c8:	2100      	movs	r1, #0
   211ca:	0018      	movs	r0, r3
   211cc:	4b09      	ldr	r3, [pc, #36]	; (211f4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   211ce:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   211d0:	4b06      	ldr	r3, [pc, #24]	; (211ec <sd_mmc_wait_end_of_read_blocks+0x8c>)
   211d2:	4798      	blx	r3
	return SD_MMC_OK;
   211d4:	2300      	movs	r3, #0
}
   211d6:	0018      	movs	r0, r3
   211d8:	46bd      	mov	sp, r7
   211da:	b002      	add	sp, #8
   211dc:	bd80      	pop	{r7, pc}
   211de:	46c0      	nop			; (mov r8, r8)
   211e0:	000221a5 	.word	0x000221a5
   211e4:	200040da 	.word	0x200040da
   211e8:	200040d8 	.word	0x200040d8
   211ec:	00020bf9 	.word	0x00020bf9
   211f0:	0000310c 	.word	0x0000310c
   211f4:	00021e09 	.word	0x00021e09

000211f8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   211f8:	b590      	push	{r4, r7, lr}
   211fa:	b089      	sub	sp, #36	; 0x24
   211fc:	af02      	add	r7, sp, #8
   211fe:	6039      	str	r1, [r7, #0]
   21200:	0011      	movs	r1, r2
   21202:	1dfb      	adds	r3, r7, #7
   21204:	1c02      	adds	r2, r0, #0
   21206:	701a      	strb	r2, [r3, #0]
   21208:	1d3b      	adds	r3, r7, #4
   2120a:	1c0a      	adds	r2, r1, #0
   2120c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   2120e:	230f      	movs	r3, #15
   21210:	18fc      	adds	r4, r7, r3
   21212:	1dfb      	adds	r3, r7, #7
   21214:	781b      	ldrb	r3, [r3, #0]
   21216:	0018      	movs	r0, r3
   21218:	4b28      	ldr	r3, [pc, #160]	; (212bc <sd_mmc_init_write_blocks+0xc4>)
   2121a:	4798      	blx	r3
   2121c:	0003      	movs	r3, r0
   2121e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21220:	230f      	movs	r3, #15
   21222:	18fb      	adds	r3, r7, r3
   21224:	781b      	ldrb	r3, [r3, #0]
   21226:	2b00      	cmp	r3, #0
   21228:	d003      	beq.n	21232 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   2122a:	230f      	movs	r3, #15
   2122c:	18fb      	adds	r3, r7, r3
   2122e:	781b      	ldrb	r3, [r3, #0]
   21230:	e03f      	b.n	212b2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   21232:	1dfb      	adds	r3, r7, #7
   21234:	781b      	ldrb	r3, [r3, #0]
   21236:	0018      	movs	r0, r3
   21238:	4b21      	ldr	r3, [pc, #132]	; (212c0 <sd_mmc_init_write_blocks+0xc8>)
   2123a:	4798      	blx	r3
   2123c:	1e03      	subs	r3, r0, #0
   2123e:	d003      	beq.n	21248 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   21240:	4b20      	ldr	r3, [pc, #128]	; (212c4 <sd_mmc_init_write_blocks+0xcc>)
   21242:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   21244:	2307      	movs	r3, #7
   21246:	e034      	b.n	212b2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   21248:	1d3b      	adds	r3, r7, #4
   2124a:	881b      	ldrh	r3, [r3, #0]
   2124c:	2b01      	cmp	r3, #1
   2124e:	d902      	bls.n	21256 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   21250:	4b1d      	ldr	r3, [pc, #116]	; (212c8 <sd_mmc_init_write_blocks+0xd0>)
   21252:	617b      	str	r3, [r7, #20]
   21254:	e001      	b.n	2125a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   21256:	4b1d      	ldr	r3, [pc, #116]	; (212cc <sd_mmc_init_write_blocks+0xd4>)
   21258:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   2125a:	4b1d      	ldr	r3, [pc, #116]	; (212d0 <sd_mmc_init_write_blocks+0xd8>)
   2125c:	681b      	ldr	r3, [r3, #0]
   2125e:	7adb      	ldrb	r3, [r3, #11]
   21260:	001a      	movs	r2, r3
   21262:	2308      	movs	r3, #8
   21264:	4013      	ands	r3, r2
   21266:	d002      	beq.n	2126e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   21268:	683b      	ldr	r3, [r7, #0]
   2126a:	613b      	str	r3, [r7, #16]
   2126c:	e002      	b.n	21274 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   2126e:	683b      	ldr	r3, [r7, #0]
   21270:	025b      	lsls	r3, r3, #9
   21272:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   21274:	1d3b      	adds	r3, r7, #4
   21276:	881c      	ldrh	r4, [r3, #0]
   21278:	2380      	movs	r3, #128	; 0x80
   2127a:	009a      	lsls	r2, r3, #2
   2127c:	6939      	ldr	r1, [r7, #16]
   2127e:	6978      	ldr	r0, [r7, #20]
   21280:	2301      	movs	r3, #1
   21282:	9300      	str	r3, [sp, #0]
   21284:	0023      	movs	r3, r4
   21286:	4c13      	ldr	r4, [pc, #76]	; (212d4 <sd_mmc_init_write_blocks+0xdc>)
   21288:	47a0      	blx	r4
   2128a:	0003      	movs	r3, r0
   2128c:	001a      	movs	r2, r3
   2128e:	2301      	movs	r3, #1
   21290:	4053      	eors	r3, r2
   21292:	b2db      	uxtb	r3, r3
   21294:	2b00      	cmp	r3, #0
   21296:	d003      	beq.n	212a0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   21298:	4b0a      	ldr	r3, [pc, #40]	; (212c4 <sd_mmc_init_write_blocks+0xcc>)
   2129a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   2129c:	2305      	movs	r3, #5
   2129e:	e008      	b.n	212b2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   212a0:	4b0d      	ldr	r3, [pc, #52]	; (212d8 <sd_mmc_init_write_blocks+0xe0>)
   212a2:	1d3a      	adds	r2, r7, #4
   212a4:	8812      	ldrh	r2, [r2, #0]
   212a6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   212a8:	4b0c      	ldr	r3, [pc, #48]	; (212dc <sd_mmc_init_write_blocks+0xe4>)
   212aa:	1d3a      	adds	r2, r7, #4
   212ac:	8812      	ldrh	r2, [r2, #0]
   212ae:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   212b0:	2300      	movs	r3, #0
}
   212b2:	0018      	movs	r0, r3
   212b4:	46bd      	mov	sp, r7
   212b6:	b007      	add	sp, #28
   212b8:	bd90      	pop	{r4, r7, pc}
   212ba:	46c0      	nop			; (mov r8, r8)
   212bc:	00020afd 	.word	0x00020afd
   212c0:	00021005 	.word	0x00021005
   212c4:	00020bf9 	.word	0x00020bf9
   212c8:	00109119 	.word	0x00109119
   212cc:	00089118 	.word	0x00089118
   212d0:	200040d4 	.word	0x200040d4
   212d4:	00021e31 	.word	0x00021e31
   212d8:	200040da 	.word	0x200040da
   212dc:	200040d8 	.word	0x200040d8

000212e0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   212e0:	b580      	push	{r7, lr}
   212e2:	b082      	sub	sp, #8
   212e4:	af00      	add	r7, sp, #0
   212e6:	6078      	str	r0, [r7, #4]
   212e8:	000a      	movs	r2, r1
   212ea:	1cbb      	adds	r3, r7, #2
   212ec:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   212ee:	1cbb      	adds	r3, r7, #2
   212f0:	881a      	ldrh	r2, [r3, #0]
   212f2:	687b      	ldr	r3, [r7, #4]
   212f4:	0011      	movs	r1, r2
   212f6:	0018      	movs	r0, r3
   212f8:	4b0d      	ldr	r3, [pc, #52]	; (21330 <sd_mmc_start_write_blocks+0x50>)
   212fa:	4798      	blx	r3
   212fc:	0003      	movs	r3, r0
   212fe:	001a      	movs	r2, r3
   21300:	2301      	movs	r3, #1
   21302:	4053      	eors	r3, r2
   21304:	b2db      	uxtb	r3, r3
   21306:	2b00      	cmp	r3, #0
   21308:	d004      	beq.n	21314 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   2130a:	4b0a      	ldr	r3, [pc, #40]	; (21334 <sd_mmc_start_write_blocks+0x54>)
   2130c:	2200      	movs	r2, #0
   2130e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21310:	2305      	movs	r3, #5
   21312:	e008      	b.n	21326 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   21314:	4b07      	ldr	r3, [pc, #28]	; (21334 <sd_mmc_start_write_blocks+0x54>)
   21316:	881a      	ldrh	r2, [r3, #0]
   21318:	1cbb      	adds	r3, r7, #2
   2131a:	881b      	ldrh	r3, [r3, #0]
   2131c:	1ad3      	subs	r3, r2, r3
   2131e:	b29a      	uxth	r2, r3
   21320:	4b04      	ldr	r3, [pc, #16]	; (21334 <sd_mmc_start_write_blocks+0x54>)
   21322:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21324:	2300      	movs	r3, #0
}
   21326:	0018      	movs	r0, r3
   21328:	46bd      	mov	sp, r7
   2132a:	b002      	add	sp, #8
   2132c:	bd80      	pop	{r7, pc}
   2132e:	46c0      	nop			; (mov r8, r8)
   21330:	000221b1 	.word	0x000221b1
   21334:	200040da 	.word	0x200040da

00021338 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   21338:	b580      	push	{r7, lr}
   2133a:	b082      	sub	sp, #8
   2133c:	af00      	add	r7, sp, #0
   2133e:	0002      	movs	r2, r0
   21340:	1dfb      	adds	r3, r7, #7
   21342:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   21344:	4b13      	ldr	r3, [pc, #76]	; (21394 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   21346:	4798      	blx	r3
   21348:	0003      	movs	r3, r0
   2134a:	001a      	movs	r2, r3
   2134c:	2301      	movs	r3, #1
   2134e:	4053      	eors	r3, r2
   21350:	b2db      	uxtb	r3, r3
   21352:	2b00      	cmp	r3, #0
   21354:	d001      	beq.n	2135a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   21356:	2305      	movs	r3, #5
   21358:	e018      	b.n	2138c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   2135a:	1dfb      	adds	r3, r7, #7
   2135c:	781b      	ldrb	r3, [r3, #0]
   2135e:	2b00      	cmp	r3, #0
   21360:	d003      	beq.n	2136a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   21362:	4b0d      	ldr	r3, [pc, #52]	; (21398 <sd_mmc_wait_end_of_write_blocks+0x60>)
   21364:	2200      	movs	r2, #0
   21366:	801a      	strh	r2, [r3, #0]
   21368:	e005      	b.n	21376 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   2136a:	4b0b      	ldr	r3, [pc, #44]	; (21398 <sd_mmc_wait_end_of_write_blocks+0x60>)
   2136c:	881b      	ldrh	r3, [r3, #0]
   2136e:	2b00      	cmp	r3, #0
   21370:	d001      	beq.n	21376 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   21372:	2300      	movs	r3, #0
   21374:	e00a      	b.n	2138c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   21376:	4b09      	ldr	r3, [pc, #36]	; (2139c <sd_mmc_wait_end_of_write_blocks+0x64>)
   21378:	881b      	ldrh	r3, [r3, #0]
   2137a:	2b01      	cmp	r3, #1
   2137c:	d103      	bne.n	21386 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   2137e:	4b08      	ldr	r3, [pc, #32]	; (213a0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   21380:	4798      	blx	r3
		return SD_MMC_OK;
   21382:	2300      	movs	r3, #0
   21384:	e002      	b.n	2138c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   21386:	4b06      	ldr	r3, [pc, #24]	; (213a0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   21388:	4798      	blx	r3
	return SD_MMC_OK;
   2138a:	2300      	movs	r3, #0
}
   2138c:	0018      	movs	r0, r3
   2138e:	46bd      	mov	sp, r7
   21390:	b002      	add	sp, #8
   21392:	bd80      	pop	{r7, pc}
   21394:	00022271 	.word	0x00022271
   21398:	200040da 	.word	0x200040da
   2139c:	200040d8 	.word	0x200040d8
   213a0:	00020bf9 	.word	0x00020bf9

000213a4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   213a4:	b580      	push	{r7, lr}
   213a6:	b082      	sub	sp, #8
   213a8:	af00      	add	r7, sp, #0
   213aa:	0002      	movs	r2, r0
   213ac:	1dfb      	adds	r3, r7, #7
   213ae:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   213b0:	1dfb      	adds	r3, r7, #7
   213b2:	781b      	ldrb	r3, [r3, #0]
   213b4:	0018      	movs	r0, r3
   213b6:	4b16      	ldr	r3, [pc, #88]	; (21410 <sd_mmc_test_unit_ready+0x6c>)
   213b8:	4798      	blx	r3
   213ba:	0003      	movs	r3, r0
   213bc:	2b01      	cmp	r3, #1
   213be:	d019      	beq.n	213f4 <sd_mmc_test_unit_ready+0x50>
   213c0:	2b02      	cmp	r3, #2
   213c2:	d019      	beq.n	213f8 <sd_mmc_test_unit_ready+0x54>
   213c4:	2b00      	cmp	r3, #0
   213c6:	d11e      	bne.n	21406 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   213c8:	1dfb      	adds	r3, r7, #7
   213ca:	781b      	ldrb	r3, [r3, #0]
   213cc:	4a11      	ldr	r2, [pc, #68]	; (21414 <sd_mmc_test_unit_ready+0x70>)
   213ce:	5cd3      	ldrb	r3, [r2, r3]
   213d0:	2b00      	cmp	r3, #0
   213d2:	d001      	beq.n	213d8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   213d4:	2302      	movs	r3, #2
   213d6:	e017      	b.n	21408 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   213d8:	1dfb      	adds	r3, r7, #7
   213da:	781b      	ldrb	r3, [r3, #0]
   213dc:	0018      	movs	r0, r3
   213de:	4b0e      	ldr	r3, [pc, #56]	; (21418 <sd_mmc_test_unit_ready+0x74>)
   213e0:	4798      	blx	r3
   213e2:	0003      	movs	r3, r0
   213e4:	001a      	movs	r2, r3
   213e6:	2303      	movs	r3, #3
   213e8:	4013      	ands	r3, r2
   213ea:	d001      	beq.n	213f0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   213ec:	2300      	movs	r3, #0
   213ee:	e00b      	b.n	21408 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   213f0:	2302      	movs	r3, #2
   213f2:	e009      	b.n	21408 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   213f4:	2303      	movs	r3, #3
   213f6:	e007      	b.n	21408 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   213f8:	1dfb      	adds	r3, r7, #7
   213fa:	781b      	ldrb	r3, [r3, #0]
   213fc:	4a05      	ldr	r2, [pc, #20]	; (21414 <sd_mmc_test_unit_ready+0x70>)
   213fe:	2100      	movs	r1, #0
   21400:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   21402:	2302      	movs	r3, #2
   21404:	e000      	b.n	21408 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   21406:	2301      	movs	r3, #1
	}
}
   21408:	0018      	movs	r0, r3
   2140a:	46bd      	mov	sp, r7
   2140c:	b002      	add	sp, #8
   2140e:	bd80      	pop	{r7, pc}
   21410:	00020f19 	.word	0x00020f19
   21414:	200040dc 	.word	0x200040dc
   21418:	00020f8d 	.word	0x00020f8d

0002141c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   2141c:	b580      	push	{r7, lr}
   2141e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   21420:	2000      	movs	r0, #0
   21422:	4b03      	ldr	r3, [pc, #12]	; (21430 <sd_mmc_test_unit_ready_0+0x14>)
   21424:	4798      	blx	r3
   21426:	0003      	movs	r3, r0
}
   21428:	0018      	movs	r0, r3
   2142a:	46bd      	mov	sp, r7
   2142c:	bd80      	pop	{r7, pc}
   2142e:	46c0      	nop			; (mov r8, r8)
   21430:	000213a5 	.word	0x000213a5

00021434 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   21434:	b580      	push	{r7, lr}
   21436:	b082      	sub	sp, #8
   21438:	af00      	add	r7, sp, #0
   2143a:	0002      	movs	r2, r0
   2143c:	6039      	str	r1, [r7, #0]
   2143e:	1dfb      	adds	r3, r7, #7
   21440:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   21442:	1dfb      	adds	r3, r7, #7
   21444:	781b      	ldrb	r3, [r3, #0]
   21446:	0018      	movs	r0, r3
   21448:	4b08      	ldr	r3, [pc, #32]	; (2146c <sd_mmc_read_capacity+0x38>)
   2144a:	4798      	blx	r3
   2144c:	0003      	movs	r3, r0
   2144e:	005b      	lsls	r3, r3, #1
   21450:	1e5a      	subs	r2, r3, #1
   21452:	683b      	ldr	r3, [r7, #0]
   21454:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   21456:	1dfb      	adds	r3, r7, #7
   21458:	781b      	ldrb	r3, [r3, #0]
   2145a:	0018      	movs	r0, r3
   2145c:	4b04      	ldr	r3, [pc, #16]	; (21470 <sd_mmc_read_capacity+0x3c>)
   2145e:	4798      	blx	r3
   21460:	0003      	movs	r3, r0
}
   21462:	0018      	movs	r0, r3
   21464:	46bd      	mov	sp, r7
   21466:	b002      	add	sp, #8
   21468:	bd80      	pop	{r7, pc}
   2146a:	46c0      	nop			; (mov r8, r8)
   2146c:	00020fc9 	.word	0x00020fc9
   21470:	000213a5 	.word	0x000213a5

00021474 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   21474:	b580      	push	{r7, lr}
   21476:	b082      	sub	sp, #8
   21478:	af00      	add	r7, sp, #0
   2147a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   2147c:	687b      	ldr	r3, [r7, #4]
   2147e:	0019      	movs	r1, r3
   21480:	2000      	movs	r0, #0
   21482:	4b03      	ldr	r3, [pc, #12]	; (21490 <sd_mmc_read_capacity_0+0x1c>)
   21484:	4798      	blx	r3
   21486:	0003      	movs	r3, r0
}
   21488:	0018      	movs	r0, r3
   2148a:	46bd      	mov	sp, r7
   2148c:	b002      	add	sp, #8
   2148e:	bd80      	pop	{r7, pc}
   21490:	00021435 	.word	0x00021435

00021494 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   21494:	b580      	push	{r7, lr}
   21496:	b082      	sub	sp, #8
   21498:	af00      	add	r7, sp, #0
   2149a:	0002      	movs	r2, r0
   2149c:	1dfb      	adds	r3, r7, #7
   2149e:	701a      	strb	r2, [r3, #0]
   214a0:	1dbb      	adds	r3, r7, #6
   214a2:	1c0a      	adds	r2, r1, #0
   214a4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   214a6:	1dfb      	adds	r3, r7, #7
   214a8:	781b      	ldrb	r3, [r3, #0]
   214aa:	4a04      	ldr	r2, [pc, #16]	; (214bc <sd_mmc_unload+0x28>)
   214ac:	1db9      	adds	r1, r7, #6
   214ae:	7809      	ldrb	r1, [r1, #0]
   214b0:	54d1      	strb	r1, [r2, r3]
	return true;
   214b2:	2301      	movs	r3, #1
}
   214b4:	0018      	movs	r0, r3
   214b6:	46bd      	mov	sp, r7
   214b8:	b002      	add	sp, #8
   214ba:	bd80      	pop	{r7, pc}
   214bc:	200040dc 	.word	0x200040dc

000214c0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   214c0:	b580      	push	{r7, lr}
   214c2:	b082      	sub	sp, #8
   214c4:	af00      	add	r7, sp, #0
   214c6:	0002      	movs	r2, r0
   214c8:	1dfb      	adds	r3, r7, #7
   214ca:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   214cc:	1dfb      	adds	r3, r7, #7
   214ce:	781b      	ldrb	r3, [r3, #0]
   214d0:	0019      	movs	r1, r3
   214d2:	2000      	movs	r0, #0
   214d4:	4b03      	ldr	r3, [pc, #12]	; (214e4 <sd_mmc_unload_0+0x24>)
   214d6:	4798      	blx	r3
   214d8:	0003      	movs	r3, r0
}
   214da:	0018      	movs	r0, r3
   214dc:	46bd      	mov	sp, r7
   214de:	b002      	add	sp, #8
   214e0:	bd80      	pop	{r7, pc}
   214e2:	46c0      	nop			; (mov r8, r8)
   214e4:	00021495 	.word	0x00021495

000214e8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   214e8:	b580      	push	{r7, lr}
   214ea:	b082      	sub	sp, #8
   214ec:	af00      	add	r7, sp, #0
   214ee:	0002      	movs	r2, r0
   214f0:	1dfb      	adds	r3, r7, #7
   214f2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   214f4:	1dfb      	adds	r3, r7, #7
   214f6:	781b      	ldrb	r3, [r3, #0]
   214f8:	0018      	movs	r0, r3
   214fa:	4b03      	ldr	r3, [pc, #12]	; (21508 <sd_mmc_wr_protect+0x20>)
   214fc:	4798      	blx	r3
   214fe:	0003      	movs	r3, r0
}
   21500:	0018      	movs	r0, r3
   21502:	46bd      	mov	sp, r7
   21504:	b002      	add	sp, #8
   21506:	bd80      	pop	{r7, pc}
   21508:	00021005 	.word	0x00021005

0002150c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   2150c:	b580      	push	{r7, lr}
   2150e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   21510:	2000      	movs	r0, #0
   21512:	4b03      	ldr	r3, [pc, #12]	; (21520 <sd_mmc_wr_protect_0+0x14>)
   21514:	4798      	blx	r3
   21516:	0003      	movs	r3, r0
}
   21518:	0018      	movs	r0, r3
   2151a:	46bd      	mov	sp, r7
   2151c:	bd80      	pop	{r7, pc}
   2151e:	46c0      	nop			; (mov r8, r8)
   21520:	000214e9 	.word	0x000214e9

00021524 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   21524:	b580      	push	{r7, lr}
   21526:	b082      	sub	sp, #8
   21528:	af00      	add	r7, sp, #0
   2152a:	0002      	movs	r2, r0
   2152c:	1dfb      	adds	r3, r7, #7
   2152e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   21530:	2301      	movs	r3, #1
}
   21532:	0018      	movs	r0, r3
   21534:	46bd      	mov	sp, r7
   21536:	b002      	add	sp, #8
   21538:	bd80      	pop	{r7, pc}
	...

0002153c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   2153c:	b580      	push	{r7, lr}
   2153e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   21540:	2000      	movs	r0, #0
   21542:	4b03      	ldr	r3, [pc, #12]	; (21550 <sd_mmc_removal_0+0x14>)
   21544:	4798      	blx	r3
   21546:	0003      	movs	r3, r0
}
   21548:	0018      	movs	r0, r3
   2154a:	46bd      	mov	sp, r7
   2154c:	bd80      	pop	{r7, pc}
   2154e:	46c0      	nop			; (mov r8, r8)
   21550:	00021525 	.word	0x00021525

00021554 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   21554:	b580      	push	{r7, lr}
   21556:	b084      	sub	sp, #16
   21558:	af00      	add	r7, sp, #0
   2155a:	60b9      	str	r1, [r7, #8]
   2155c:	607a      	str	r2, [r7, #4]
   2155e:	230f      	movs	r3, #15
   21560:	18fb      	adds	r3, r7, r3
   21562:	1c02      	adds	r2, r0, #0
   21564:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   21566:	68b9      	ldr	r1, [r7, #8]
   21568:	230f      	movs	r3, #15
   2156a:	18fb      	adds	r3, r7, r3
   2156c:	781b      	ldrb	r3, [r3, #0]
   2156e:	2201      	movs	r2, #1
   21570:	0018      	movs	r0, r3
   21572:	4b10      	ldr	r3, [pc, #64]	; (215b4 <sd_mmc_mem_2_ram+0x60>)
   21574:	4798      	blx	r3
   21576:	1e03      	subs	r3, r0, #0
   21578:	d005      	beq.n	21586 <sd_mmc_mem_2_ram+0x32>
   2157a:	2b02      	cmp	r3, #2
   2157c:	d101      	bne.n	21582 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2157e:	2302      	movs	r3, #2
   21580:	e013      	b.n	215aa <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   21582:	2301      	movs	r3, #1
   21584:	e011      	b.n	215aa <sd_mmc_mem_2_ram+0x56>
		break;
   21586:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   21588:	687b      	ldr	r3, [r7, #4]
   2158a:	2101      	movs	r1, #1
   2158c:	0018      	movs	r0, r3
   2158e:	4b0a      	ldr	r3, [pc, #40]	; (215b8 <sd_mmc_mem_2_ram+0x64>)
   21590:	4798      	blx	r3
   21592:	1e03      	subs	r3, r0, #0
   21594:	d001      	beq.n	2159a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   21596:	2301      	movs	r3, #1
   21598:	e007      	b.n	215aa <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   2159a:	2000      	movs	r0, #0
   2159c:	4b07      	ldr	r3, [pc, #28]	; (215bc <sd_mmc_mem_2_ram+0x68>)
   2159e:	4798      	blx	r3
   215a0:	1e03      	subs	r3, r0, #0
   215a2:	d001      	beq.n	215a8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   215a4:	2301      	movs	r3, #1
   215a6:	e000      	b.n	215aa <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   215a8:	2300      	movs	r3, #0
}
   215aa:	0018      	movs	r0, r3
   215ac:	46bd      	mov	sp, r7
   215ae:	b004      	add	sp, #16
   215b0:	bd80      	pop	{r7, pc}
   215b2:	46c0      	nop			; (mov r8, r8)
   215b4:	0002101d 	.word	0x0002101d
   215b8:	00021109 	.word	0x00021109
   215bc:	00021161 	.word	0x00021161

000215c0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   215c0:	b580      	push	{r7, lr}
   215c2:	b082      	sub	sp, #8
   215c4:	af00      	add	r7, sp, #0
   215c6:	6078      	str	r0, [r7, #4]
   215c8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   215ca:	683a      	ldr	r2, [r7, #0]
   215cc:	687b      	ldr	r3, [r7, #4]
   215ce:	0019      	movs	r1, r3
   215d0:	2000      	movs	r0, #0
   215d2:	4b03      	ldr	r3, [pc, #12]	; (215e0 <sd_mmc_mem_2_ram_0+0x20>)
   215d4:	4798      	blx	r3
   215d6:	0003      	movs	r3, r0
}
   215d8:	0018      	movs	r0, r3
   215da:	46bd      	mov	sp, r7
   215dc:	b002      	add	sp, #8
   215de:	bd80      	pop	{r7, pc}
   215e0:	00021555 	.word	0x00021555

000215e4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   215e4:	b580      	push	{r7, lr}
   215e6:	b084      	sub	sp, #16
   215e8:	af00      	add	r7, sp, #0
   215ea:	60b9      	str	r1, [r7, #8]
   215ec:	607a      	str	r2, [r7, #4]
   215ee:	230f      	movs	r3, #15
   215f0:	18fb      	adds	r3, r7, r3
   215f2:	1c02      	adds	r2, r0, #0
   215f4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   215f6:	68b9      	ldr	r1, [r7, #8]
   215f8:	230f      	movs	r3, #15
   215fa:	18fb      	adds	r3, r7, r3
   215fc:	781b      	ldrb	r3, [r3, #0]
   215fe:	2201      	movs	r2, #1
   21600:	0018      	movs	r0, r3
   21602:	4b10      	ldr	r3, [pc, #64]	; (21644 <sd_mmc_ram_2_mem+0x60>)
   21604:	4798      	blx	r3
   21606:	1e03      	subs	r3, r0, #0
   21608:	d005      	beq.n	21616 <sd_mmc_ram_2_mem+0x32>
   2160a:	2b02      	cmp	r3, #2
   2160c:	d101      	bne.n	21612 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2160e:	2302      	movs	r3, #2
   21610:	e013      	b.n	2163a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   21612:	2301      	movs	r3, #1
   21614:	e011      	b.n	2163a <sd_mmc_ram_2_mem+0x56>
		break;
   21616:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   21618:	687b      	ldr	r3, [r7, #4]
   2161a:	2101      	movs	r1, #1
   2161c:	0018      	movs	r0, r3
   2161e:	4b0a      	ldr	r3, [pc, #40]	; (21648 <sd_mmc_ram_2_mem+0x64>)
   21620:	4798      	blx	r3
   21622:	1e03      	subs	r3, r0, #0
   21624:	d001      	beq.n	2162a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   21626:	2301      	movs	r3, #1
   21628:	e007      	b.n	2163a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2162a:	2000      	movs	r0, #0
   2162c:	4b07      	ldr	r3, [pc, #28]	; (2164c <sd_mmc_ram_2_mem+0x68>)
   2162e:	4798      	blx	r3
   21630:	1e03      	subs	r3, r0, #0
   21632:	d001      	beq.n	21638 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   21634:	2301      	movs	r3, #1
   21636:	e000      	b.n	2163a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   21638:	2300      	movs	r3, #0
}
   2163a:	0018      	movs	r0, r3
   2163c:	46bd      	mov	sp, r7
   2163e:	b004      	add	sp, #16
   21640:	bd80      	pop	{r7, pc}
   21642:	46c0      	nop			; (mov r8, r8)
   21644:	000211f9 	.word	0x000211f9
   21648:	000212e1 	.word	0x000212e1
   2164c:	00021339 	.word	0x00021339

00021650 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   21650:	b580      	push	{r7, lr}
   21652:	b082      	sub	sp, #8
   21654:	af00      	add	r7, sp, #0
   21656:	6078      	str	r0, [r7, #4]
   21658:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2165a:	683a      	ldr	r2, [r7, #0]
   2165c:	687b      	ldr	r3, [r7, #4]
   2165e:	0019      	movs	r1, r3
   21660:	2000      	movs	r0, #0
   21662:	4b03      	ldr	r3, [pc, #12]	; (21670 <sd_mmc_ram_2_mem_0+0x20>)
   21664:	4798      	blx	r3
   21666:	0003      	movs	r3, r0
}
   21668:	0018      	movs	r0, r3
   2166a:	46bd      	mov	sp, r7
   2166c:	b002      	add	sp, #8
   2166e:	bd80      	pop	{r7, pc}
   21670:	000215e5 	.word	0x000215e5

00021674 <system_pinmux_get_group_from_gpio_pin>:
{
   21674:	b580      	push	{r7, lr}
   21676:	b084      	sub	sp, #16
   21678:	af00      	add	r7, sp, #0
   2167a:	0002      	movs	r2, r0
   2167c:	1dfb      	adds	r3, r7, #7
   2167e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   21680:	230f      	movs	r3, #15
   21682:	18fb      	adds	r3, r7, r3
   21684:	1dfa      	adds	r2, r7, #7
   21686:	7812      	ldrb	r2, [r2, #0]
   21688:	09d2      	lsrs	r2, r2, #7
   2168a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2168c:	230e      	movs	r3, #14
   2168e:	18fb      	adds	r3, r7, r3
   21690:	1dfa      	adds	r2, r7, #7
   21692:	7812      	ldrb	r2, [r2, #0]
   21694:	0952      	lsrs	r2, r2, #5
   21696:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   21698:	4b0d      	ldr	r3, [pc, #52]	; (216d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2169a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2169c:	230f      	movs	r3, #15
   2169e:	18fb      	adds	r3, r7, r3
   216a0:	781b      	ldrb	r3, [r3, #0]
   216a2:	2b00      	cmp	r3, #0
   216a4:	d10f      	bne.n	216c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   216a6:	230f      	movs	r3, #15
   216a8:	18fb      	adds	r3, r7, r3
   216aa:	781b      	ldrb	r3, [r3, #0]
   216ac:	009b      	lsls	r3, r3, #2
   216ae:	2210      	movs	r2, #16
   216b0:	4694      	mov	ip, r2
   216b2:	44bc      	add	ip, r7
   216b4:	4463      	add	r3, ip
   216b6:	3b08      	subs	r3, #8
   216b8:	681a      	ldr	r2, [r3, #0]
   216ba:	230e      	movs	r3, #14
   216bc:	18fb      	adds	r3, r7, r3
   216be:	781b      	ldrb	r3, [r3, #0]
   216c0:	01db      	lsls	r3, r3, #7
   216c2:	18d3      	adds	r3, r2, r3
   216c4:	e000      	b.n	216c8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   216c6:	2300      	movs	r3, #0
}
   216c8:	0018      	movs	r0, r3
   216ca:	46bd      	mov	sp, r7
   216cc:	b004      	add	sp, #16
   216ce:	bd80      	pop	{r7, pc}
   216d0:	41004400 	.word	0x41004400

000216d4 <port_get_group_from_gpio_pin>:
{
   216d4:	b580      	push	{r7, lr}
   216d6:	b082      	sub	sp, #8
   216d8:	af00      	add	r7, sp, #0
   216da:	0002      	movs	r2, r0
   216dc:	1dfb      	adds	r3, r7, #7
   216de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   216e0:	1dfb      	adds	r3, r7, #7
   216e2:	781b      	ldrb	r3, [r3, #0]
   216e4:	0018      	movs	r0, r3
   216e6:	4b03      	ldr	r3, [pc, #12]	; (216f4 <port_get_group_from_gpio_pin+0x20>)
   216e8:	4798      	blx	r3
   216ea:	0003      	movs	r3, r0
}
   216ec:	0018      	movs	r0, r3
   216ee:	46bd      	mov	sp, r7
   216f0:	b002      	add	sp, #8
   216f2:	bd80      	pop	{r7, pc}
   216f4:	00021675 	.word	0x00021675

000216f8 <port_get_config_defaults>:
{
   216f8:	b580      	push	{r7, lr}
   216fa:	b082      	sub	sp, #8
   216fc:	af00      	add	r7, sp, #0
   216fe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21700:	687b      	ldr	r3, [r7, #4]
   21702:	2200      	movs	r2, #0
   21704:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21706:	687b      	ldr	r3, [r7, #4]
   21708:	2201      	movs	r2, #1
   2170a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2170c:	687b      	ldr	r3, [r7, #4]
   2170e:	2200      	movs	r2, #0
   21710:	709a      	strb	r2, [r3, #2]
}
   21712:	46c0      	nop			; (mov r8, r8)
   21714:	46bd      	mov	sp, r7
   21716:	b002      	add	sp, #8
   21718:	bd80      	pop	{r7, pc}
	...

0002171c <port_pin_set_output_level>:
{
   2171c:	b580      	push	{r7, lr}
   2171e:	b084      	sub	sp, #16
   21720:	af00      	add	r7, sp, #0
   21722:	0002      	movs	r2, r0
   21724:	1dfb      	adds	r3, r7, #7
   21726:	701a      	strb	r2, [r3, #0]
   21728:	1dbb      	adds	r3, r7, #6
   2172a:	1c0a      	adds	r2, r1, #0
   2172c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2172e:	1dfb      	adds	r3, r7, #7
   21730:	781b      	ldrb	r3, [r3, #0]
   21732:	0018      	movs	r0, r3
   21734:	4b0d      	ldr	r3, [pc, #52]	; (2176c <port_pin_set_output_level+0x50>)
   21736:	4798      	blx	r3
   21738:	0003      	movs	r3, r0
   2173a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2173c:	1dfb      	adds	r3, r7, #7
   2173e:	781b      	ldrb	r3, [r3, #0]
   21740:	221f      	movs	r2, #31
   21742:	4013      	ands	r3, r2
   21744:	2201      	movs	r2, #1
   21746:	409a      	lsls	r2, r3
   21748:	0013      	movs	r3, r2
   2174a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2174c:	1dbb      	adds	r3, r7, #6
   2174e:	781b      	ldrb	r3, [r3, #0]
   21750:	2b00      	cmp	r3, #0
   21752:	d003      	beq.n	2175c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21754:	68fb      	ldr	r3, [r7, #12]
   21756:	68ba      	ldr	r2, [r7, #8]
   21758:	619a      	str	r2, [r3, #24]
}
   2175a:	e002      	b.n	21762 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2175c:	68fb      	ldr	r3, [r7, #12]
   2175e:	68ba      	ldr	r2, [r7, #8]
   21760:	615a      	str	r2, [r3, #20]
}
   21762:	46c0      	nop			; (mov r8, r8)
   21764:	46bd      	mov	sp, r7
   21766:	b004      	add	sp, #16
   21768:	bd80      	pop	{r7, pc}
   2176a:	46c0      	nop			; (mov r8, r8)
   2176c:	000216d5 	.word	0x000216d5

00021770 <spi_is_syncing>:
{
   21770:	b580      	push	{r7, lr}
   21772:	b084      	sub	sp, #16
   21774:	af00      	add	r7, sp, #0
   21776:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21778:	687b      	ldr	r3, [r7, #4]
   2177a:	681b      	ldr	r3, [r3, #0]
   2177c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2177e:	68fb      	ldr	r3, [r7, #12]
   21780:	69db      	ldr	r3, [r3, #28]
   21782:	1e5a      	subs	r2, r3, #1
   21784:	4193      	sbcs	r3, r2
   21786:	b2db      	uxtb	r3, r3
}
   21788:	0018      	movs	r0, r3
   2178a:	46bd      	mov	sp, r7
   2178c:	b004      	add	sp, #16
   2178e:	bd80      	pop	{r7, pc}

00021790 <spi_get_config_defaults>:
{
   21790:	b580      	push	{r7, lr}
   21792:	b082      	sub	sp, #8
   21794:	af00      	add	r7, sp, #0
   21796:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   21798:	687b      	ldr	r3, [r7, #4]
   2179a:	2201      	movs	r2, #1
   2179c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2179e:	687b      	ldr	r3, [r7, #4]
   217a0:	2200      	movs	r2, #0
   217a2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   217a4:	687b      	ldr	r3, [r7, #4]
   217a6:	2200      	movs	r2, #0
   217a8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   217aa:	687b      	ldr	r3, [r7, #4]
   217ac:	22c0      	movs	r2, #192	; 0xc0
   217ae:	0392      	lsls	r2, r2, #14
   217b0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   217b2:	687b      	ldr	r3, [r7, #4]
   217b4:	2200      	movs	r2, #0
   217b6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   217b8:	687b      	ldr	r3, [r7, #4]
   217ba:	2200      	movs	r2, #0
   217bc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   217be:	687b      	ldr	r3, [r7, #4]
   217c0:	2201      	movs	r2, #1
   217c2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   217c4:	687b      	ldr	r3, [r7, #4]
   217c6:	2201      	movs	r2, #1
   217c8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   217ca:	687b      	ldr	r3, [r7, #4]
   217cc:	2200      	movs	r2, #0
   217ce:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   217d0:	687b      	ldr	r3, [r7, #4]
   217d2:	2224      	movs	r2, #36	; 0x24
   217d4:	2100      	movs	r1, #0
   217d6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   217d8:	687b      	ldr	r3, [r7, #4]
   217da:	3318      	adds	r3, #24
   217dc:	220c      	movs	r2, #12
   217de:	2100      	movs	r1, #0
   217e0:	0018      	movs	r0, r3
   217e2:	4b0a      	ldr	r3, [pc, #40]	; (2180c <spi_get_config_defaults+0x7c>)
   217e4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   217e6:	687b      	ldr	r3, [r7, #4]
   217e8:	4a09      	ldr	r2, [pc, #36]	; (21810 <spi_get_config_defaults+0x80>)
   217ea:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   217ec:	687b      	ldr	r3, [r7, #4]
   217ee:	2200      	movs	r2, #0
   217f0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   217f2:	687b      	ldr	r3, [r7, #4]
   217f4:	2200      	movs	r2, #0
   217f6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   217f8:	687b      	ldr	r3, [r7, #4]
   217fa:	2200      	movs	r2, #0
   217fc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   217fe:	687b      	ldr	r3, [r7, #4]
   21800:	2200      	movs	r2, #0
   21802:	635a      	str	r2, [r3, #52]	; 0x34
};
   21804:	46c0      	nop			; (mov r8, r8)
   21806:	46bd      	mov	sp, r7
   21808:	b002      	add	sp, #8
   2180a:	bd80      	pop	{r7, pc}
   2180c:	0003781f 	.word	0x0003781f
   21810:	000186a0 	.word	0x000186a0

00021814 <spi_slave_inst_get_config_defaults>:
{
   21814:	b580      	push	{r7, lr}
   21816:	b082      	sub	sp, #8
   21818:	af00      	add	r7, sp, #0
   2181a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   2181c:	687b      	ldr	r3, [r7, #4]
   2181e:	220a      	movs	r2, #10
   21820:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21822:	687b      	ldr	r3, [r7, #4]
   21824:	2200      	movs	r2, #0
   21826:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   21828:	687b      	ldr	r3, [r7, #4]
   2182a:	2200      	movs	r2, #0
   2182c:	709a      	strb	r2, [r3, #2]
}
   2182e:	46c0      	nop			; (mov r8, r8)
   21830:	46bd      	mov	sp, r7
   21832:	b002      	add	sp, #8
   21834:	bd80      	pop	{r7, pc}
	...

00021838 <spi_attach_slave>:
{
   21838:	b580      	push	{r7, lr}
   2183a:	b084      	sub	sp, #16
   2183c:	af00      	add	r7, sp, #0
   2183e:	6078      	str	r0, [r7, #4]
   21840:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   21842:	683b      	ldr	r3, [r7, #0]
   21844:	781a      	ldrb	r2, [r3, #0]
   21846:	687b      	ldr	r3, [r7, #4]
   21848:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2184a:	683b      	ldr	r3, [r7, #0]
   2184c:	785a      	ldrb	r2, [r3, #1]
   2184e:	687b      	ldr	r3, [r7, #4]
   21850:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21852:	683b      	ldr	r3, [r7, #0]
   21854:	789a      	ldrb	r2, [r3, #2]
   21856:	687b      	ldr	r3, [r7, #4]
   21858:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2185a:	230c      	movs	r3, #12
   2185c:	18fb      	adds	r3, r7, r3
   2185e:	0018      	movs	r0, r3
   21860:	4b0b      	ldr	r3, [pc, #44]	; (21890 <spi_attach_slave+0x58>)
   21862:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21864:	230c      	movs	r3, #12
   21866:	18fb      	adds	r3, r7, r3
   21868:	2201      	movs	r2, #1
   2186a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2186c:	687b      	ldr	r3, [r7, #4]
   2186e:	781b      	ldrb	r3, [r3, #0]
   21870:	220c      	movs	r2, #12
   21872:	18ba      	adds	r2, r7, r2
   21874:	0011      	movs	r1, r2
   21876:	0018      	movs	r0, r3
   21878:	4b06      	ldr	r3, [pc, #24]	; (21894 <spi_attach_slave+0x5c>)
   2187a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   2187c:	687b      	ldr	r3, [r7, #4]
   2187e:	781b      	ldrb	r3, [r3, #0]
   21880:	2101      	movs	r1, #1
   21882:	0018      	movs	r0, r3
   21884:	4b04      	ldr	r3, [pc, #16]	; (21898 <spi_attach_slave+0x60>)
   21886:	4798      	blx	r3
}
   21888:	46c0      	nop			; (mov r8, r8)
   2188a:	46bd      	mov	sp, r7
   2188c:	b004      	add	sp, #16
   2188e:	bd80      	pop	{r7, pc}
   21890:	000216f9 	.word	0x000216f9
   21894:	00028b95 	.word	0x00028b95
   21898:	0002171d 	.word	0x0002171d

0002189c <spi_enable>:
{
   2189c:	b580      	push	{r7, lr}
   2189e:	b084      	sub	sp, #16
   218a0:	af00      	add	r7, sp, #0
   218a2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   218a4:	687b      	ldr	r3, [r7, #4]
   218a6:	681b      	ldr	r3, [r3, #0]
   218a8:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
   218aa:	46c0      	nop			; (mov r8, r8)
   218ac:	687b      	ldr	r3, [r7, #4]
   218ae:	0018      	movs	r0, r3
   218b0:	4b06      	ldr	r3, [pc, #24]	; (218cc <spi_enable+0x30>)
   218b2:	4798      	blx	r3
   218b4:	1e03      	subs	r3, r0, #0
   218b6:	d1f9      	bne.n	218ac <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   218b8:	68fb      	ldr	r3, [r7, #12]
   218ba:	681b      	ldr	r3, [r3, #0]
   218bc:	2202      	movs	r2, #2
   218be:	431a      	orrs	r2, r3
   218c0:	68fb      	ldr	r3, [r7, #12]
   218c2:	601a      	str	r2, [r3, #0]
}
   218c4:	46c0      	nop			; (mov r8, r8)
   218c6:	46bd      	mov	sp, r7
   218c8:	b004      	add	sp, #16
   218ca:	bd80      	pop	{r7, pc}
   218cc:	00021771 	.word	0x00021771

000218d0 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   218d0:	b580      	push	{r7, lr}
   218d2:	b084      	sub	sp, #16
   218d4:	af00      	add	r7, sp, #0
   218d6:	6078      	str	r0, [r7, #4]
   218d8:	000a      	movs	r2, r1
   218da:	1cfb      	adds	r3, r7, #3
   218dc:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   218de:	230f      	movs	r3, #15
   218e0:	18fb      	adds	r3, r7, r3
   218e2:	2200      	movs	r2, #0
   218e4:	701a      	strb	r2, [r3, #0]
	while (size--) {
   218e6:	e038      	b.n	2195a <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   218e8:	687b      	ldr	r3, [r7, #4]
   218ea:	1c5a      	adds	r2, r3, #1
   218ec:	607a      	str	r2, [r7, #4]
   218ee:	220e      	movs	r2, #14
   218f0:	18ba      	adds	r2, r7, r2
   218f2:	781b      	ldrb	r3, [r3, #0]
   218f4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   218f6:	230d      	movs	r3, #13
   218f8:	18fb      	adds	r3, r7, r3
   218fa:	2200      	movs	r2, #0
   218fc:	701a      	strb	r2, [r3, #0]
   218fe:	e027      	b.n	21950 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   21900:	230f      	movs	r3, #15
   21902:	18fa      	adds	r2, r7, r3
   21904:	230f      	movs	r3, #15
   21906:	18fb      	adds	r3, r7, r3
   21908:	781b      	ldrb	r3, [r3, #0]
   2190a:	18db      	adds	r3, r3, r3
   2190c:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   2190e:	230e      	movs	r3, #14
   21910:	18fa      	adds	r2, r7, r3
   21912:	230f      	movs	r3, #15
   21914:	18fb      	adds	r3, r7, r3
   21916:	7812      	ldrb	r2, [r2, #0]
   21918:	781b      	ldrb	r3, [r3, #0]
   2191a:	4053      	eors	r3, r2
   2191c:	b2db      	uxtb	r3, r3
   2191e:	b25b      	sxtb	r3, r3
   21920:	2b00      	cmp	r3, #0
   21922:	da07      	bge.n	21934 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   21924:	230f      	movs	r3, #15
   21926:	18fb      	adds	r3, r7, r3
   21928:	220f      	movs	r2, #15
   2192a:	18ba      	adds	r2, r7, r2
   2192c:	7812      	ldrb	r2, [r2, #0]
   2192e:	2109      	movs	r1, #9
   21930:	404a      	eors	r2, r1
   21932:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   21934:	230e      	movs	r3, #14
   21936:	18fa      	adds	r2, r7, r3
   21938:	230e      	movs	r3, #14
   2193a:	18fb      	adds	r3, r7, r3
   2193c:	781b      	ldrb	r3, [r3, #0]
   2193e:	18db      	adds	r3, r3, r3
   21940:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   21942:	230d      	movs	r3, #13
   21944:	18fb      	adds	r3, r7, r3
   21946:	781a      	ldrb	r2, [r3, #0]
   21948:	230d      	movs	r3, #13
   2194a:	18fb      	adds	r3, r7, r3
   2194c:	3201      	adds	r2, #1
   2194e:	701a      	strb	r2, [r3, #0]
   21950:	230d      	movs	r3, #13
   21952:	18fb      	adds	r3, r7, r3
   21954:	781b      	ldrb	r3, [r3, #0]
   21956:	2b07      	cmp	r3, #7
   21958:	d9d2      	bls.n	21900 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   2195a:	1cfb      	adds	r3, r7, #3
   2195c:	781b      	ldrb	r3, [r3, #0]
   2195e:	1cfa      	adds	r2, r7, #3
   21960:	1e59      	subs	r1, r3, #1
   21962:	7011      	strb	r1, [r2, #0]
   21964:	2b00      	cmp	r3, #0
   21966:	d1bf      	bne.n	218e8 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   21968:	230f      	movs	r3, #15
   2196a:	18fb      	adds	r3, r7, r3
   2196c:	781b      	ldrb	r3, [r3, #0]
   2196e:	005b      	lsls	r3, r3, #1
   21970:	b25b      	sxtb	r3, r3
   21972:	2201      	movs	r2, #1
   21974:	4313      	orrs	r3, r2
   21976:	b25a      	sxtb	r2, r3
   21978:	230f      	movs	r3, #15
   2197a:	18fb      	adds	r3, r7, r3
   2197c:	701a      	strb	r2, [r3, #0]
	return crc;
   2197e:	230f      	movs	r3, #15
   21980:	18fb      	adds	r3, r7, r3
   21982:	781b      	ldrb	r3, [r3, #0]
}
   21984:	0018      	movs	r0, r3
   21986:	46bd      	mov	sp, r7
   21988:	b004      	add	sp, #16
   2198a:	bd80      	pop	{r7, pc}

0002198c <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   2198c:	b590      	push	{r4, r7, lr}
   2198e:	b083      	sub	sp, #12
   21990:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   21992:	1c7b      	adds	r3, r7, #1
   21994:	22ff      	movs	r2, #255	; 0xff
   21996:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   21998:	1cbb      	adds	r3, r7, #2
   2199a:	22ff      	movs	r2, #255	; 0xff
   2199c:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2199e:	1cbb      	adds	r3, r7, #2
   219a0:	881b      	ldrh	r3, [r3, #0]
   219a2:	1c79      	adds	r1, r7, #1
   219a4:	4811      	ldr	r0, [pc, #68]	; (219ec <sd_mmc_spi_wait_busy+0x60>)
   219a6:	2201      	movs	r2, #1
   219a8:	4c11      	ldr	r4, [pc, #68]	; (219f0 <sd_mmc_spi_wait_busy+0x64>)
   219aa:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   219ac:	4b11      	ldr	r3, [pc, #68]	; (219f4 <sd_mmc_spi_wait_busy+0x68>)
   219ae:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   219b0:	1cbb      	adds	r3, r7, #2
   219b2:	881b      	ldrh	r3, [r3, #0]
   219b4:	1c79      	adds	r1, r7, #1
   219b6:	480d      	ldr	r0, [pc, #52]	; (219ec <sd_mmc_spi_wait_busy+0x60>)
   219b8:	2201      	movs	r2, #1
   219ba:	4c0d      	ldr	r4, [pc, #52]	; (219f0 <sd_mmc_spi_wait_busy+0x64>)
   219bc:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   219be:	1cbb      	adds	r3, r7, #2
   219c0:	881b      	ldrh	r3, [r3, #0]
   219c2:	1c79      	adds	r1, r7, #1
   219c4:	4809      	ldr	r0, [pc, #36]	; (219ec <sd_mmc_spi_wait_busy+0x60>)
   219c6:	2201      	movs	r2, #1
   219c8:	4c09      	ldr	r4, [pc, #36]	; (219f0 <sd_mmc_spi_wait_busy+0x64>)
   219ca:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   219cc:	687b      	ldr	r3, [r7, #4]
   219ce:	1e5a      	subs	r2, r3, #1
   219d0:	607a      	str	r2, [r7, #4]
   219d2:	2b00      	cmp	r3, #0
   219d4:	d101      	bne.n	219da <sd_mmc_spi_wait_busy+0x4e>
			return false;
   219d6:	2300      	movs	r3, #0
   219d8:	e004      	b.n	219e4 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   219da:	1c7b      	adds	r3, r7, #1
   219dc:	781b      	ldrb	r3, [r3, #0]
   219de:	2bff      	cmp	r3, #255	; 0xff
   219e0:	d1ed      	bne.n	219be <sd_mmc_spi_wait_busy+0x32>
	return true;
   219e2:	2301      	movs	r3, #1
}
   219e4:	0018      	movs	r0, r3
   219e6:	46bd      	mov	sp, r7
   219e8:	b003      	add	sp, #12
   219ea:	bd90      	pop	{r4, r7, pc}
   219ec:	200040e0 	.word	0x200040e0
   219f0:	0002a399 	.word	0x0002a399
   219f4:	00030d40 	.word	0x00030d40

000219f8 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   219f8:	b590      	push	{r4, r7, lr}
   219fa:	b083      	sub	sp, #12
   219fc:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   219fe:	1cbb      	adds	r3, r7, #2
   21a00:	22ff      	movs	r2, #255	; 0xff
   21a02:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   21a04:	1c7b      	adds	r3, r7, #1
   21a06:	2200      	movs	r2, #0
   21a08:	701a      	strb	r2, [r3, #0]
	i = 500000;
   21a0a:	4b18      	ldr	r3, [pc, #96]	; (21a6c <sd_mmc_spi_start_read_block+0x74>)
   21a0c:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   21a0e:	687b      	ldr	r3, [r7, #4]
   21a10:	1e5a      	subs	r2, r3, #1
   21a12:	607a      	str	r2, [r7, #4]
   21a14:	2b00      	cmp	r3, #0
   21a16:	d104      	bne.n	21a22 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   21a18:	4b15      	ldr	r3, [pc, #84]	; (21a70 <sd_mmc_spi_start_read_block+0x78>)
   21a1a:	2204      	movs	r2, #4
   21a1c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   21a1e:	2300      	movs	r3, #0
   21a20:	e020      	b.n	21a64 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   21a22:	1cbb      	adds	r3, r7, #2
   21a24:	881b      	ldrh	r3, [r3, #0]
   21a26:	1c79      	adds	r1, r7, #1
   21a28:	4812      	ldr	r0, [pc, #72]	; (21a74 <sd_mmc_spi_start_read_block+0x7c>)
   21a2a:	2201      	movs	r2, #1
   21a2c:	4c12      	ldr	r4, [pc, #72]	; (21a78 <sd_mmc_spi_start_read_block+0x80>)
   21a2e:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   21a30:	1c7b      	adds	r3, r7, #1
   21a32:	781b      	ldrb	r3, [r3, #0]
   21a34:	001a      	movs	r2, r3
   21a36:	23f0      	movs	r3, #240	; 0xf0
   21a38:	4013      	ands	r3, r2
   21a3a:	d10e      	bne.n	21a5a <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   21a3c:	1c7b      	adds	r3, r7, #1
   21a3e:	781b      	ldrb	r3, [r3, #0]
   21a40:	001a      	movs	r2, r3
   21a42:	2307      	movs	r3, #7
   21a44:	4013      	ands	r3, r2
   21a46:	d003      	beq.n	21a50 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   21a48:	4b09      	ldr	r3, [pc, #36]	; (21a70 <sd_mmc_spi_start_read_block+0x78>)
   21a4a:	2207      	movs	r2, #7
   21a4c:	701a      	strb	r2, [r3, #0]
   21a4e:	e002      	b.n	21a56 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   21a50:	4b07      	ldr	r3, [pc, #28]	; (21a70 <sd_mmc_spi_start_read_block+0x78>)
   21a52:	220b      	movs	r2, #11
   21a54:	701a      	strb	r2, [r3, #0]
			}
			return false;
   21a56:	2300      	movs	r3, #0
   21a58:	e004      	b.n	21a64 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   21a5a:	1c7b      	adds	r3, r7, #1
   21a5c:	781b      	ldrb	r3, [r3, #0]
   21a5e:	2bfe      	cmp	r3, #254	; 0xfe
   21a60:	d1d5      	bne.n	21a0e <sd_mmc_spi_start_read_block+0x16>

	return true;
   21a62:	2301      	movs	r3, #1
}
   21a64:	0018      	movs	r0, r3
   21a66:	46bd      	mov	sp, r7
   21a68:	b003      	add	sp, #12
   21a6a:	bd90      	pop	{r4, r7, pc}
   21a6c:	0007a120 	.word	0x0007a120
   21a70:	200040f3 	.word	0x200040f3
   21a74:	200040e0 	.word	0x200040e0
   21a78:	0002a399 	.word	0x0002a399

00021a7c <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   21a7c:	b590      	push	{r4, r7, lr}
   21a7e:	b083      	sub	sp, #12
   21a80:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   21a82:	1dbb      	adds	r3, r7, #6
   21a84:	22ff      	movs	r2, #255	; 0xff
   21a86:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   21a88:	1dbb      	adds	r3, r7, #6
   21a8a:	881b      	ldrh	r3, [r3, #0]
   21a8c:	1d39      	adds	r1, r7, #4
   21a8e:	4804      	ldr	r0, [pc, #16]	; (21aa0 <sd_mmc_spi_stop_read_block+0x24>)
   21a90:	2202      	movs	r2, #2
   21a92:	4c04      	ldr	r4, [pc, #16]	; (21aa4 <sd_mmc_spi_stop_read_block+0x28>)
   21a94:	47a0      	blx	r4
			dummy);
}
   21a96:	46c0      	nop			; (mov r8, r8)
   21a98:	46bd      	mov	sp, r7
   21a9a:	b003      	add	sp, #12
   21a9c:	bd90      	pop	{r4, r7, pc}
   21a9e:	46c0      	nop			; (mov r8, r8)
   21aa0:	200040e0 	.word	0x200040e0
   21aa4:	0002a399 	.word	0x0002a399

00021aa8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   21aa8:	b580      	push	{r7, lr}
   21aaa:	b082      	sub	sp, #8
   21aac:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   21aae:	1dfb      	adds	r3, r7, #7
   21ab0:	22ff      	movs	r2, #255	; 0xff
   21ab2:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   21ab4:	1df9      	adds	r1, r7, #7
   21ab6:	4b0d      	ldr	r3, [pc, #52]	; (21aec <sd_mmc_spi_start_write_block+0x44>)
   21ab8:	2201      	movs	r2, #1
   21aba:	0018      	movs	r0, r3
   21abc:	4b0c      	ldr	r3, [pc, #48]	; (21af0 <sd_mmc_spi_start_write_block+0x48>)
   21abe:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   21ac0:	4b0c      	ldr	r3, [pc, #48]	; (21af4 <sd_mmc_spi_start_write_block+0x4c>)
   21ac2:	881b      	ldrh	r3, [r3, #0]
   21ac4:	2b01      	cmp	r3, #1
   21ac6:	d103      	bne.n	21ad0 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   21ac8:	1dbb      	adds	r3, r7, #6
   21aca:	22fe      	movs	r2, #254	; 0xfe
   21acc:	701a      	strb	r2, [r3, #0]
   21ace:	e002      	b.n	21ad6 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   21ad0:	1dbb      	adds	r3, r7, #6
   21ad2:	22fc      	movs	r2, #252	; 0xfc
   21ad4:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   21ad6:	1db9      	adds	r1, r7, #6
   21ad8:	4b04      	ldr	r3, [pc, #16]	; (21aec <sd_mmc_spi_start_write_block+0x44>)
   21ada:	2201      	movs	r2, #1
   21adc:	0018      	movs	r0, r3
   21ade:	4b04      	ldr	r3, [pc, #16]	; (21af0 <sd_mmc_spi_start_write_block+0x48>)
   21ae0:	4798      	blx	r3
}
   21ae2:	46c0      	nop			; (mov r8, r8)
   21ae4:	46bd      	mov	sp, r7
   21ae6:	b002      	add	sp, #8
   21ae8:	bd80      	pop	{r7, pc}
   21aea:	46c0      	nop			; (mov r8, r8)
   21aec:	200040e0 	.word	0x200040e0
   21af0:	0002a635 	.word	0x0002a635
   21af4:	200040fe 	.word	0x200040fe

00021af8 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   21af8:	b590      	push	{r4, r7, lr}
   21afa:	b083      	sub	sp, #12
   21afc:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   21afe:	1dbb      	adds	r3, r7, #6
   21b00:	22ff      	movs	r2, #255	; 0xff
   21b02:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   21b04:	1cbb      	adds	r3, r7, #2
   21b06:	2201      	movs	r2, #1
   21b08:	4252      	negs	r2, r2
   21b0a:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   21b0c:	1cb9      	adds	r1, r7, #2
   21b0e:	4b1b      	ldr	r3, [pc, #108]	; (21b7c <sd_mmc_spi_stop_write_block+0x84>)
   21b10:	2202      	movs	r2, #2
   21b12:	0018      	movs	r0, r3
   21b14:	4b1a      	ldr	r3, [pc, #104]	; (21b80 <sd_mmc_spi_stop_write_block+0x88>)
   21b16:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   21b18:	1dbb      	adds	r3, r7, #6
   21b1a:	881b      	ldrh	r3, [r3, #0]
   21b1c:	1d79      	adds	r1, r7, #5
   21b1e:	4817      	ldr	r0, [pc, #92]	; (21b7c <sd_mmc_spi_stop_write_block+0x84>)
   21b20:	2201      	movs	r2, #1
   21b22:	4c18      	ldr	r4, [pc, #96]	; (21b84 <sd_mmc_spi_stop_write_block+0x8c>)
   21b24:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   21b26:	1d7b      	adds	r3, r7, #5
   21b28:	781b      	ldrb	r3, [r3, #0]
   21b2a:	001a      	movs	r2, r3
   21b2c:	2310      	movs	r3, #16
   21b2e:	4013      	ands	r3, r2
   21b30:	d105      	bne.n	21b3e <sd_mmc_spi_stop_write_block+0x46>
   21b32:	1d7b      	adds	r3, r7, #5
   21b34:	781b      	ldrb	r3, [r3, #0]
   21b36:	001a      	movs	r2, r3
   21b38:	2301      	movs	r3, #1
   21b3a:	4013      	ands	r3, r2
   21b3c:	d104      	bne.n	21b48 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   21b3e:	4b12      	ldr	r3, [pc, #72]	; (21b88 <sd_mmc_spi_stop_write_block+0x90>)
   21b40:	2201      	movs	r2, #1
   21b42:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   21b44:	2300      	movs	r3, #0
   21b46:	e014      	b.n	21b72 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   21b48:	1d7b      	adds	r3, r7, #5
   21b4a:	781b      	ldrb	r3, [r3, #0]
   21b4c:	001a      	movs	r2, r3
   21b4e:	231e      	movs	r3, #30
   21b50:	4013      	ands	r3, r2
   21b52:	2b04      	cmp	r3, #4
   21b54:	d00b      	beq.n	21b6e <sd_mmc_spi_stop_write_block+0x76>
   21b56:	2b0a      	cmp	r3, #10
   21b58:	d104      	bne.n	21b64 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   21b5a:	4b0b      	ldr	r3, [pc, #44]	; (21b88 <sd_mmc_spi_stop_write_block+0x90>)
   21b5c:	2208      	movs	r2, #8
   21b5e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   21b60:	2300      	movs	r3, #0
   21b62:	e006      	b.n	21b72 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   21b64:	4b08      	ldr	r3, [pc, #32]	; (21b88 <sd_mmc_spi_stop_write_block+0x90>)
   21b66:	220a      	movs	r2, #10
   21b68:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   21b6a:	2300      	movs	r3, #0
   21b6c:	e001      	b.n	21b72 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   21b6e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   21b70:	2301      	movs	r3, #1
}
   21b72:	0018      	movs	r0, r3
   21b74:	46bd      	mov	sp, r7
   21b76:	b003      	add	sp, #12
   21b78:	bd90      	pop	{r4, r7, pc}
   21b7a:	46c0      	nop			; (mov r8, r8)
   21b7c:	200040e0 	.word	0x200040e0
   21b80:	0002a635 	.word	0x0002a635
   21b84:	0002a399 	.word	0x0002a399
   21b88:	200040f3 	.word	0x200040f3

00021b8c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   21b8c:	b590      	push	{r4, r7, lr}
   21b8e:	b083      	sub	sp, #12
   21b90:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   21b92:	4b1d      	ldr	r3, [pc, #116]	; (21c08 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21b94:	881b      	ldrh	r3, [r3, #0]
   21b96:	2b01      	cmp	r3, #1
   21b98:	d101      	bne.n	21b9e <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   21b9a:	2301      	movs	r3, #1
   21b9c:	e030      	b.n	21c00 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   21b9e:	4b1a      	ldr	r3, [pc, #104]	; (21c08 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21ba0:	881b      	ldrh	r3, [r3, #0]
   21ba2:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   21ba4:	4b19      	ldr	r3, [pc, #100]	; (21c0c <sd_mmc_spi_stop_multiwrite_block+0x80>)
   21ba6:	681a      	ldr	r2, [r3, #0]
   21ba8:	4b19      	ldr	r3, [pc, #100]	; (21c10 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   21baa:	881b      	ldrh	r3, [r3, #0]
   21bac:	0019      	movs	r1, r3
   21bae:	4b19      	ldr	r3, [pc, #100]	; (21c14 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   21bb0:	0010      	movs	r0, r2
   21bb2:	4798      	blx	r3
   21bb4:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   21bb6:	429c      	cmp	r4, r3
   21bb8:	d901      	bls.n	21bbe <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   21bba:	2301      	movs	r3, #1
   21bbc:	e020      	b.n	21c00 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   21bbe:	1dfb      	adds	r3, r7, #7
   21bc0:	22ff      	movs	r2, #255	; 0xff
   21bc2:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   21bc4:	1df9      	adds	r1, r7, #7
   21bc6:	4b14      	ldr	r3, [pc, #80]	; (21c18 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   21bc8:	2201      	movs	r2, #1
   21bca:	0018      	movs	r0, r3
   21bcc:	4b13      	ldr	r3, [pc, #76]	; (21c1c <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21bce:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   21bd0:	1dfb      	adds	r3, r7, #7
   21bd2:	22fd      	movs	r2, #253	; 0xfd
   21bd4:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   21bd6:	1df9      	adds	r1, r7, #7
   21bd8:	4b0f      	ldr	r3, [pc, #60]	; (21c18 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   21bda:	2201      	movs	r2, #1
   21bdc:	0018      	movs	r0, r3
   21bde:	4b0f      	ldr	r3, [pc, #60]	; (21c1c <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21be0:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   21be2:	4b0f      	ldr	r3, [pc, #60]	; (21c20 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   21be4:	4798      	blx	r3
   21be6:	0003      	movs	r3, r0
   21be8:	001a      	movs	r2, r3
   21bea:	2301      	movs	r3, #1
   21bec:	4053      	eors	r3, r2
   21bee:	b2db      	uxtb	r3, r3
   21bf0:	2b00      	cmp	r3, #0
   21bf2:	d004      	beq.n	21bfe <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   21bf4:	4b0b      	ldr	r3, [pc, #44]	; (21c24 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   21bf6:	2205      	movs	r2, #5
   21bf8:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   21bfa:	2300      	movs	r3, #0
   21bfc:	e000      	b.n	21c00 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   21bfe:	2301      	movs	r3, #1
}
   21c00:	0018      	movs	r0, r3
   21c02:	46bd      	mov	sp, r7
   21c04:	b003      	add	sp, #12
   21c06:	bd90      	pop	{r4, r7, pc}
   21c08:	200040fe 	.word	0x200040fe
   21c0c:	200040f8 	.word	0x200040f8
   21c10:	200040fc 	.word	0x200040fc
   21c14:	00034bf5 	.word	0x00034bf5
   21c18:	200040e0 	.word	0x200040e0
   21c1c:	0002a635 	.word	0x0002a635
   21c20:	0002198d 	.word	0x0002198d
   21c24:	200040f3 	.word	0x200040f3

00021c28 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   21c28:	b580      	push	{r7, lr}
   21c2a:	b090      	sub	sp, #64	; 0x40
   21c2c:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21c2e:	4b1f      	ldr	r3, [pc, #124]	; (21cac <sd_mmc_spi_init+0x84>)
   21c30:	2200      	movs	r2, #0
   21c32:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   21c34:	233c      	movs	r3, #60	; 0x3c
   21c36:	18fb      	adds	r3, r7, r3
   21c38:	0018      	movs	r0, r3
   21c3a:	4b1d      	ldr	r3, [pc, #116]	; (21cb0 <sd_mmc_spi_init+0x88>)
   21c3c:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   21c3e:	1d3b      	adds	r3, r7, #4
   21c40:	0018      	movs	r0, r3
   21c42:	4b1c      	ldr	r3, [pc, #112]	; (21cb4 <sd_mmc_spi_init+0x8c>)
   21c44:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   21c46:	1d3b      	adds	r3, r7, #4
   21c48:	2280      	movs	r2, #128	; 0x80
   21c4a:	0252      	lsls	r2, r2, #9
   21c4c:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   21c4e:	1d3b      	adds	r3, r7, #4
   21c50:	4a19      	ldr	r2, [pc, #100]	; (21cb8 <sd_mmc_spi_init+0x90>)
   21c52:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   21c54:	1d3b      	adds	r3, r7, #4
   21c56:	4a19      	ldr	r2, [pc, #100]	; (21cbc <sd_mmc_spi_init+0x94>)
   21c58:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   21c5a:	1d3b      	adds	r3, r7, #4
   21c5c:	4a18      	ldr	r2, [pc, #96]	; (21cc0 <sd_mmc_spi_init+0x98>)
   21c5e:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   21c60:	1d3b      	adds	r3, r7, #4
   21c62:	4a18      	ldr	r2, [pc, #96]	; (21cc4 <sd_mmc_spi_init+0x9c>)
   21c64:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   21c66:	1d3b      	adds	r3, r7, #4
   21c68:	2224      	movs	r2, #36	; 0x24
   21c6a:	2100      	movs	r1, #0
   21c6c:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   21c6e:	1d3b      	adds	r3, r7, #4
   21c70:	4a15      	ldr	r2, [pc, #84]	; (21cc8 <sd_mmc_spi_init+0xa0>)
   21c72:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   21c74:	1d3a      	adds	r2, r7, #4
   21c76:	4915      	ldr	r1, [pc, #84]	; (21ccc <sd_mmc_spi_init+0xa4>)
   21c78:	4b15      	ldr	r3, [pc, #84]	; (21cd0 <sd_mmc_spi_init+0xa8>)
   21c7a:	0018      	movs	r0, r3
   21c7c:	4b15      	ldr	r3, [pc, #84]	; (21cd4 <sd_mmc_spi_init+0xac>)
   21c7e:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   21c80:	4b13      	ldr	r3, [pc, #76]	; (21cd0 <sd_mmc_spi_init+0xa8>)
   21c82:	0018      	movs	r0, r3
   21c84:	4b14      	ldr	r3, [pc, #80]	; (21cd8 <sd_mmc_spi_init+0xb0>)
   21c86:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   21c88:	4b14      	ldr	r3, [pc, #80]	; (21cdc <sd_mmc_spi_init+0xb4>)
   21c8a:	0018      	movs	r0, r3
   21c8c:	4b14      	ldr	r3, [pc, #80]	; (21ce0 <sd_mmc_spi_init+0xb8>)
   21c8e:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   21c90:	4b14      	ldr	r3, [pc, #80]	; (21ce4 <sd_mmc_spi_init+0xbc>)
   21c92:	781a      	ldrb	r2, [r3, #0]
   21c94:	4b11      	ldr	r3, [pc, #68]	; (21cdc <sd_mmc_spi_init+0xb4>)
   21c96:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   21c98:	4a10      	ldr	r2, [pc, #64]	; (21cdc <sd_mmc_spi_init+0xb4>)
   21c9a:	4b13      	ldr	r3, [pc, #76]	; (21ce8 <sd_mmc_spi_init+0xc0>)
   21c9c:	0011      	movs	r1, r2
   21c9e:	0018      	movs	r0, r3
   21ca0:	4b12      	ldr	r3, [pc, #72]	; (21cec <sd_mmc_spi_init+0xc4>)
   21ca2:	4798      	blx	r3
}
   21ca4:	46c0      	nop			; (mov r8, r8)
   21ca6:	46bd      	mov	sp, r7
   21ca8:	b010      	add	sp, #64	; 0x40
   21caa:	bd80      	pop	{r7, pc}
   21cac:	200040f3 	.word	0x200040f3
   21cb0:	000216f9 	.word	0x000216f9
   21cb4:	00021791 	.word	0x00021791
   21cb8:	00100002 	.word	0x00100002
   21cbc:	00110002 	.word	0x00110002
   21cc0:	00120002 	.word	0x00120002
   21cc4:	00130002 	.word	0x00130002
   21cc8:	00061a80 	.word	0x00061a80
   21ccc:	42000c00 	.word	0x42000c00
   21cd0:	200040e0 	.word	0x200040e0
   21cd4:	0002a291 	.word	0x0002a291
   21cd8:	0002189d 	.word	0x0002189d
   21cdc:	200040f0 	.word	0x200040f0
   21ce0:	00021815 	.word	0x00021815
   21ce4:	20000114 	.word	0x20000114
   21ce8:	200040ec 	.word	0x200040ec
   21cec:	00021839 	.word	0x00021839

00021cf0 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   21cf0:	b590      	push	{r4, r7, lr}
   21cf2:	b083      	sub	sp, #12
   21cf4:	af00      	add	r7, sp, #0
   21cf6:	0004      	movs	r4, r0
   21cf8:	6039      	str	r1, [r7, #0]
   21cfa:	0010      	movs	r0, r2
   21cfc:	0019      	movs	r1, r3
   21cfe:	1dfb      	adds	r3, r7, #7
   21d00:	1c22      	adds	r2, r4, #0
   21d02:	701a      	strb	r2, [r3, #0]
   21d04:	1dbb      	adds	r3, r7, #6
   21d06:	1c02      	adds	r2, r0, #0
   21d08:	701a      	strb	r2, [r3, #0]
   21d0a:	1d7b      	adds	r3, r7, #5
   21d0c:	1c0a      	adds	r2, r1, #0
   21d0e:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21d10:	4b13      	ldr	r3, [pc, #76]	; (21d60 <sd_mmc_spi_select_device+0x70>)
   21d12:	2200      	movs	r2, #0
   21d14:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   21d16:	683b      	ldr	r3, [r7, #0]
   21d18:	4a12      	ldr	r2, [pc, #72]	; (21d64 <sd_mmc_spi_select_device+0x74>)
   21d1a:	4293      	cmp	r3, r2
   21d1c:	d907      	bls.n	21d2e <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   21d1e:	4b11      	ldr	r3, [pc, #68]	; (21d64 <sd_mmc_spi_select_device+0x74>)
   21d20:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   21d22:	e004      	b.n	21d2e <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   21d24:	683b      	ldr	r3, [r7, #0]
   21d26:	08db      	lsrs	r3, r3, #3
   21d28:	683a      	ldr	r2, [r7, #0]
   21d2a:	1ad3      	subs	r3, r2, r3
   21d2c:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   21d2e:	683a      	ldr	r2, [r7, #0]
   21d30:	4b0d      	ldr	r3, [pc, #52]	; (21d68 <sd_mmc_spi_select_device+0x78>)
   21d32:	0011      	movs	r1, r2
   21d34:	0018      	movs	r0, r3
   21d36:	4b0d      	ldr	r3, [pc, #52]	; (21d6c <sd_mmc_spi_select_device+0x7c>)
   21d38:	4798      	blx	r3
   21d3a:	0003      	movs	r3, r0
   21d3c:	2b17      	cmp	r3, #23
   21d3e:	d0f1      	beq.n	21d24 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   21d40:	1dfb      	adds	r3, r7, #7
   21d42:	781a      	ldrb	r2, [r3, #0]
   21d44:	0013      	movs	r3, r2
   21d46:	005b      	lsls	r3, r3, #1
   21d48:	189b      	adds	r3, r3, r2
   21d4a:	4a09      	ldr	r2, [pc, #36]	; (21d70 <sd_mmc_spi_select_device+0x80>)
   21d4c:	1899      	adds	r1, r3, r2
   21d4e:	4b06      	ldr	r3, [pc, #24]	; (21d68 <sd_mmc_spi_select_device+0x78>)
   21d50:	2201      	movs	r2, #1
   21d52:	0018      	movs	r0, r3
   21d54:	4b07      	ldr	r3, [pc, #28]	; (21d74 <sd_mmc_spi_select_device+0x84>)
   21d56:	4798      	blx	r3
}
   21d58:	46c0      	nop			; (mov r8, r8)
   21d5a:	46bd      	mov	sp, r7
   21d5c:	b003      	add	sp, #12
   21d5e:	bd90      	pop	{r4, r7, pc}
   21d60:	200040f3 	.word	0x200040f3
   21d64:	00989680 	.word	0x00989680
   21d68:	200040e0 	.word	0x200040e0
   21d6c:	00029d29 	.word	0x00029d29
   21d70:	200040ec 	.word	0x200040ec
   21d74:	0002a545 	.word	0x0002a545

00021d78 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   21d78:	b580      	push	{r7, lr}
   21d7a:	b082      	sub	sp, #8
   21d7c:	af00      	add	r7, sp, #0
   21d7e:	0002      	movs	r2, r0
   21d80:	1dfb      	adds	r3, r7, #7
   21d82:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21d84:	4b09      	ldr	r3, [pc, #36]	; (21dac <sd_mmc_spi_deselect_device+0x34>)
   21d86:	2200      	movs	r2, #0
   21d88:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   21d8a:	1dfb      	adds	r3, r7, #7
   21d8c:	781a      	ldrb	r2, [r3, #0]
   21d8e:	0013      	movs	r3, r2
   21d90:	005b      	lsls	r3, r3, #1
   21d92:	189b      	adds	r3, r3, r2
   21d94:	4a06      	ldr	r2, [pc, #24]	; (21db0 <sd_mmc_spi_deselect_device+0x38>)
   21d96:	1899      	adds	r1, r3, r2
   21d98:	4b06      	ldr	r3, [pc, #24]	; (21db4 <sd_mmc_spi_deselect_device+0x3c>)
   21d9a:	2200      	movs	r2, #0
   21d9c:	0018      	movs	r0, r3
   21d9e:	4b06      	ldr	r3, [pc, #24]	; (21db8 <sd_mmc_spi_deselect_device+0x40>)
   21da0:	4798      	blx	r3
}
   21da2:	46c0      	nop			; (mov r8, r8)
   21da4:	46bd      	mov	sp, r7
   21da6:	b002      	add	sp, #8
   21da8:	bd80      	pop	{r7, pc}
   21daa:	46c0      	nop			; (mov r8, r8)
   21dac:	200040f3 	.word	0x200040f3
   21db0:	200040ec 	.word	0x200040ec
   21db4:	200040e0 	.word	0x200040e0
   21db8:	0002a545 	.word	0x0002a545

00021dbc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   21dbc:	b580      	push	{r7, lr}
   21dbe:	b082      	sub	sp, #8
   21dc0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   21dc2:	1dbb      	adds	r3, r7, #6
   21dc4:	22ff      	movs	r2, #255	; 0xff
   21dc6:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21dc8:	4b0c      	ldr	r3, [pc, #48]	; (21dfc <sd_mmc_spi_send_clock+0x40>)
   21dca:	2200      	movs	r2, #0
   21dcc:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   21dce:	1dfb      	adds	r3, r7, #7
   21dd0:	2200      	movs	r2, #0
   21dd2:	701a      	strb	r2, [r3, #0]
   21dd4:	e00a      	b.n	21dec <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   21dd6:	1db9      	adds	r1, r7, #6
   21dd8:	4b09      	ldr	r3, [pc, #36]	; (21e00 <sd_mmc_spi_send_clock+0x44>)
   21dda:	2201      	movs	r2, #1
   21ddc:	0018      	movs	r0, r3
   21dde:	4b09      	ldr	r3, [pc, #36]	; (21e04 <sd_mmc_spi_send_clock+0x48>)
   21de0:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   21de2:	1dfb      	adds	r3, r7, #7
   21de4:	781a      	ldrb	r2, [r3, #0]
   21de6:	1dfb      	adds	r3, r7, #7
   21de8:	3201      	adds	r2, #1
   21dea:	701a      	strb	r2, [r3, #0]
   21dec:	1dfb      	adds	r3, r7, #7
   21dee:	781b      	ldrb	r3, [r3, #0]
   21df0:	2b09      	cmp	r3, #9
   21df2:	d9f0      	bls.n	21dd6 <sd_mmc_spi_send_clock+0x1a>
	}
}
   21df4:	46c0      	nop			; (mov r8, r8)
   21df6:	46bd      	mov	sp, r7
   21df8:	b002      	add	sp, #8
   21dfa:	bd80      	pop	{r7, pc}
   21dfc:	200040f3 	.word	0x200040f3
   21e00:	200040e0 	.word	0x200040e0
   21e04:	0002a635 	.word	0x0002a635

00021e08 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   21e08:	b590      	push	{r4, r7, lr}
   21e0a:	b085      	sub	sp, #20
   21e0c:	af02      	add	r7, sp, #8
   21e0e:	6078      	str	r0, [r7, #4]
   21e10:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   21e12:	6839      	ldr	r1, [r7, #0]
   21e14:	6878      	ldr	r0, [r7, #4]
   21e16:	2300      	movs	r3, #0
   21e18:	9300      	str	r3, [sp, #0]
   21e1a:	2300      	movs	r3, #0
   21e1c:	2200      	movs	r2, #0
   21e1e:	4c03      	ldr	r4, [pc, #12]	; (21e2c <sd_mmc_spi_send_cmd+0x24>)
   21e20:	47a0      	blx	r4
   21e22:	0003      	movs	r3, r0
}
   21e24:	0018      	movs	r0, r3
   21e26:	46bd      	mov	sp, r7
   21e28:	b003      	add	sp, #12
   21e2a:	bd90      	pop	{r4, r7, pc}
   21e2c:	00021e31 	.word	0x00021e31

00021e30 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   21e30:	b590      	push	{r4, r7, lr}
   21e32:	b089      	sub	sp, #36	; 0x24
   21e34:	af00      	add	r7, sp, #0
   21e36:	60f8      	str	r0, [r7, #12]
   21e38:	60b9      	str	r1, [r7, #8]
   21e3a:	0019      	movs	r1, r3
   21e3c:	1dbb      	adds	r3, r7, #6
   21e3e:	801a      	strh	r2, [r3, #0]
   21e40:	1d3b      	adds	r3, r7, #4
   21e42:	1c0a      	adds	r2, r1, #0
   21e44:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   21e46:	231b      	movs	r3, #27
   21e48:	18fb      	adds	r3, r7, r3
   21e4a:	22ff      	movs	r2, #255	; 0xff
   21e4c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   21e4e:	231c      	movs	r3, #28
   21e50:	18fb      	adds	r3, r7, r3
   21e52:	22ff      	movs	r2, #255	; 0xff
   21e54:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21e56:	4b72      	ldr	r3, [pc, #456]	; (22020 <sd_mmc_spi_adtc_start+0x1f0>)
   21e58:	2200      	movs	r2, #0
   21e5a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   21e5c:	68fb      	ldr	r3, [r7, #12]
   21e5e:	b2db      	uxtb	r3, r3
   21e60:	223f      	movs	r2, #63	; 0x3f
   21e62:	4013      	ands	r3, r2
   21e64:	b2db      	uxtb	r3, r3
   21e66:	2240      	movs	r2, #64	; 0x40
   21e68:	4313      	orrs	r3, r2
   21e6a:	b2da      	uxtb	r2, r3
   21e6c:	2314      	movs	r3, #20
   21e6e:	18fb      	adds	r3, r7, r3
   21e70:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   21e72:	68bb      	ldr	r3, [r7, #8]
   21e74:	0e1b      	lsrs	r3, r3, #24
   21e76:	b2da      	uxtb	r2, r3
   21e78:	2314      	movs	r3, #20
   21e7a:	18fb      	adds	r3, r7, r3
   21e7c:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   21e7e:	68bb      	ldr	r3, [r7, #8]
   21e80:	0c1b      	lsrs	r3, r3, #16
   21e82:	b2da      	uxtb	r2, r3
   21e84:	2314      	movs	r3, #20
   21e86:	18fb      	adds	r3, r7, r3
   21e88:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   21e8a:	68bb      	ldr	r3, [r7, #8]
   21e8c:	0a1b      	lsrs	r3, r3, #8
   21e8e:	b2da      	uxtb	r2, r3
   21e90:	2314      	movs	r3, #20
   21e92:	18fb      	adds	r3, r7, r3
   21e94:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   21e96:	68bb      	ldr	r3, [r7, #8]
   21e98:	b2da      	uxtb	r2, r3
   21e9a:	2314      	movs	r3, #20
   21e9c:	18fb      	adds	r3, r7, r3
   21e9e:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   21ea0:	2314      	movs	r3, #20
   21ea2:	18fb      	adds	r3, r7, r3
   21ea4:	2105      	movs	r1, #5
   21ea6:	0018      	movs	r0, r3
   21ea8:	4b5e      	ldr	r3, [pc, #376]	; (22024 <sd_mmc_spi_adtc_start+0x1f4>)
   21eaa:	4798      	blx	r3
   21eac:	0003      	movs	r3, r0
   21eae:	001a      	movs	r2, r3
   21eb0:	2314      	movs	r3, #20
   21eb2:	18fb      	adds	r3, r7, r3
   21eb4:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   21eb6:	231b      	movs	r3, #27
   21eb8:	18f9      	adds	r1, r7, r3
   21eba:	4b5b      	ldr	r3, [pc, #364]	; (22028 <sd_mmc_spi_adtc_start+0x1f8>)
   21ebc:	2201      	movs	r2, #1
   21ebe:	0018      	movs	r0, r3
   21ec0:	4b5a      	ldr	r3, [pc, #360]	; (2202c <sd_mmc_spi_adtc_start+0x1fc>)
   21ec2:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   21ec4:	2314      	movs	r3, #20
   21ec6:	18f9      	adds	r1, r7, r3
   21ec8:	4b57      	ldr	r3, [pc, #348]	; (22028 <sd_mmc_spi_adtc_start+0x1f8>)
   21eca:	2206      	movs	r2, #6
   21ecc:	0018      	movs	r0, r3
   21ece:	4b57      	ldr	r3, [pc, #348]	; (2202c <sd_mmc_spi_adtc_start+0x1fc>)
   21ed0:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   21ed2:	2313      	movs	r3, #19
   21ed4:	18fb      	adds	r3, r7, r3
   21ed6:	22ff      	movs	r2, #255	; 0xff
   21ed8:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   21eda:	231c      	movs	r3, #28
   21edc:	18fb      	adds	r3, r7, r3
   21ede:	881b      	ldrh	r3, [r3, #0]
   21ee0:	2213      	movs	r2, #19
   21ee2:	18b9      	adds	r1, r7, r2
   21ee4:	4850      	ldr	r0, [pc, #320]	; (22028 <sd_mmc_spi_adtc_start+0x1f8>)
   21ee6:	2201      	movs	r2, #1
   21ee8:	4c51      	ldr	r4, [pc, #324]	; (22030 <sd_mmc_spi_adtc_start+0x200>)
   21eea:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   21eec:	231f      	movs	r3, #31
   21eee:	18fb      	adds	r3, r7, r3
   21ef0:	2207      	movs	r2, #7
   21ef2:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   21ef4:	231c      	movs	r3, #28
   21ef6:	18fb      	adds	r3, r7, r3
   21ef8:	881b      	ldrh	r3, [r3, #0]
   21efa:	2213      	movs	r2, #19
   21efc:	18b9      	adds	r1, r7, r2
   21efe:	484a      	ldr	r0, [pc, #296]	; (22028 <sd_mmc_spi_adtc_start+0x1f8>)
   21f00:	2201      	movs	r2, #1
   21f02:	4c4b      	ldr	r4, [pc, #300]	; (22030 <sd_mmc_spi_adtc_start+0x200>)
   21f04:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   21f06:	2313      	movs	r3, #19
   21f08:	18fb      	adds	r3, r7, r3
   21f0a:	781b      	ldrb	r3, [r3, #0]
   21f0c:	b25b      	sxtb	r3, r3
   21f0e:	2b00      	cmp	r3, #0
   21f10:	da10      	bge.n	21f34 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   21f12:	231f      	movs	r3, #31
   21f14:	18fb      	adds	r3, r7, r3
   21f16:	221f      	movs	r2, #31
   21f18:	18ba      	adds	r2, r7, r2
   21f1a:	7812      	ldrb	r2, [r2, #0]
   21f1c:	3a01      	subs	r2, #1
   21f1e:	701a      	strb	r2, [r3, #0]
   21f20:	231f      	movs	r3, #31
   21f22:	18fb      	adds	r3, r7, r3
   21f24:	781b      	ldrb	r3, [r3, #0]
   21f26:	2b00      	cmp	r3, #0
   21f28:	d1e4      	bne.n	21ef4 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   21f2a:	4b3d      	ldr	r3, [pc, #244]	; (22020 <sd_mmc_spi_adtc_start+0x1f0>)
   21f2c:	2202      	movs	r2, #2
   21f2e:	701a      	strb	r2, [r3, #0]
			return false;
   21f30:	2300      	movs	r3, #0
   21f32:	e070      	b.n	22016 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   21f34:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   21f36:	2313      	movs	r3, #19
   21f38:	18fb      	adds	r3, r7, r3
   21f3a:	781b      	ldrb	r3, [r3, #0]
   21f3c:	001a      	movs	r2, r3
   21f3e:	4b3d      	ldr	r3, [pc, #244]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21f40:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   21f42:	2313      	movs	r3, #19
   21f44:	18fb      	adds	r3, r7, r3
   21f46:	781b      	ldrb	r3, [r3, #0]
   21f48:	001a      	movs	r2, r3
   21f4a:	2308      	movs	r3, #8
   21f4c:	4013      	ands	r3, r2
   21f4e:	d004      	beq.n	21f5a <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   21f50:	4b33      	ldr	r3, [pc, #204]	; (22020 <sd_mmc_spi_adtc_start+0x1f0>)
   21f52:	2206      	movs	r2, #6
   21f54:	701a      	strb	r2, [r3, #0]
		return false;
   21f56:	2300      	movs	r3, #0
   21f58:	e05d      	b.n	22016 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   21f5a:	2313      	movs	r3, #19
   21f5c:	18fb      	adds	r3, r7, r3
   21f5e:	781b      	ldrb	r3, [r3, #0]
   21f60:	001a      	movs	r2, r3
   21f62:	2304      	movs	r3, #4
   21f64:	4013      	ands	r3, r2
   21f66:	d004      	beq.n	21f72 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   21f68:	4b2d      	ldr	r3, [pc, #180]	; (22020 <sd_mmc_spi_adtc_start+0x1f0>)
   21f6a:	2209      	movs	r2, #9
   21f6c:	701a      	strb	r2, [r3, #0]
		return false;
   21f6e:	2300      	movs	r3, #0
   21f70:	e051      	b.n	22016 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   21f72:	2313      	movs	r3, #19
   21f74:	18fb      	adds	r3, r7, r3
   21f76:	781b      	ldrb	r3, [r3, #0]
   21f78:	001a      	movs	r2, r3
   21f7a:	2301      	movs	r3, #1
   21f7c:	439a      	bics	r2, r3
   21f7e:	1e13      	subs	r3, r2, #0
   21f80:	d004      	beq.n	21f8c <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   21f82:	4b27      	ldr	r3, [pc, #156]	; (22020 <sd_mmc_spi_adtc_start+0x1f0>)
   21f84:	2201      	movs	r2, #1
   21f86:	701a      	strb	r2, [r3, #0]
		return false;
   21f88:	2300      	movs	r3, #0
   21f8a:	e044      	b.n	22016 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   21f8c:	68fa      	ldr	r2, [r7, #12]
   21f8e:	2380      	movs	r3, #128	; 0x80
   21f90:	019b      	lsls	r3, r3, #6
   21f92:	4013      	ands	r3, r2
   21f94:	d00d      	beq.n	21fb2 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   21f96:	4b28      	ldr	r3, [pc, #160]	; (22038 <sd_mmc_spi_adtc_start+0x208>)
   21f98:	4798      	blx	r3
   21f9a:	0003      	movs	r3, r0
   21f9c:	001a      	movs	r2, r3
   21f9e:	2301      	movs	r3, #1
   21fa0:	4053      	eors	r3, r2
   21fa2:	b2db      	uxtb	r3, r3
   21fa4:	2b00      	cmp	r3, #0
   21fa6:	d004      	beq.n	21fb2 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   21fa8:	4b1d      	ldr	r3, [pc, #116]	; (22020 <sd_mmc_spi_adtc_start+0x1f0>)
   21faa:	2203      	movs	r2, #3
   21fac:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   21fae:	2300      	movs	r3, #0
   21fb0:	e031      	b.n	22016 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   21fb2:	68fa      	ldr	r2, [r7, #12]
   21fb4:	2380      	movs	r3, #128	; 0x80
   21fb6:	009b      	lsls	r3, r3, #2
   21fb8:	4013      	ands	r3, r2
   21fba:	d00e      	beq.n	21fda <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   21fbc:	4b1d      	ldr	r3, [pc, #116]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21fbe:	2200      	movs	r2, #0
   21fc0:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   21fc2:	231c      	movs	r3, #28
   21fc4:	18fb      	adds	r3, r7, r3
   21fc6:	881b      	ldrh	r3, [r3, #0]
   21fc8:	491a      	ldr	r1, [pc, #104]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21fca:	4817      	ldr	r0, [pc, #92]	; (22028 <sd_mmc_spi_adtc_start+0x1f8>)
   21fcc:	2201      	movs	r2, #1
   21fce:	4c18      	ldr	r4, [pc, #96]	; (22030 <sd_mmc_spi_adtc_start+0x200>)
   21fd0:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   21fd2:	4b18      	ldr	r3, [pc, #96]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21fd4:	681a      	ldr	r2, [r3, #0]
   21fd6:	4b17      	ldr	r3, [pc, #92]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21fd8:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   21fda:	68fa      	ldr	r2, [r7, #12]
   21fdc:	2380      	movs	r3, #128	; 0x80
   21fde:	00db      	lsls	r3, r3, #3
   21fe0:	4013      	ands	r3, r2
   21fe2:	d00c      	beq.n	21ffe <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   21fe4:	231c      	movs	r3, #28
   21fe6:	18fb      	adds	r3, r7, r3
   21fe8:	881b      	ldrh	r3, [r3, #0]
   21fea:	4912      	ldr	r1, [pc, #72]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21fec:	480e      	ldr	r0, [pc, #56]	; (22028 <sd_mmc_spi_adtc_start+0x1f8>)
   21fee:	2204      	movs	r2, #4
   21ff0:	4c0f      	ldr	r4, [pc, #60]	; (22030 <sd_mmc_spi_adtc_start+0x200>)
   21ff2:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   21ff4:	4b0f      	ldr	r3, [pc, #60]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21ff6:	681b      	ldr	r3, [r3, #0]
   21ff8:	ba1a      	rev	r2, r3
   21ffa:	4b0e      	ldr	r3, [pc, #56]	; (22034 <sd_mmc_spi_adtc_start+0x204>)
   21ffc:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   21ffe:	4b0f      	ldr	r3, [pc, #60]	; (2203c <sd_mmc_spi_adtc_start+0x20c>)
   22000:	1dba      	adds	r2, r7, #6
   22002:	8812      	ldrh	r2, [r2, #0]
   22004:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   22006:	4b0e      	ldr	r3, [pc, #56]	; (22040 <sd_mmc_spi_adtc_start+0x210>)
   22008:	1d3a      	adds	r2, r7, #4
   2200a:	8812      	ldrh	r2, [r2, #0]
   2200c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   2200e:	4b0d      	ldr	r3, [pc, #52]	; (22044 <sd_mmc_spi_adtc_start+0x214>)
   22010:	2200      	movs	r2, #0
   22012:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   22014:	2301      	movs	r3, #1
}
   22016:	0018      	movs	r0, r3
   22018:	46bd      	mov	sp, r7
   2201a:	b009      	add	sp, #36	; 0x24
   2201c:	bd90      	pop	{r4, r7, pc}
   2201e:	46c0      	nop			; (mov r8, r8)
   22020:	200040f3 	.word	0x200040f3
   22024:	000218d1 	.word	0x000218d1
   22028:	200040e0 	.word	0x200040e0
   2202c:	0002a635 	.word	0x0002a635
   22030:	0002a399 	.word	0x0002a399
   22034:	200040f4 	.word	0x200040f4
   22038:	0002198d 	.word	0x0002198d
   2203c:	200040fc 	.word	0x200040fc
   22040:	200040fe 	.word	0x200040fe
   22044:	200040f8 	.word	0x200040f8

00022048 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   22048:	b580      	push	{r7, lr}
   2204a:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   2204c:	4b02      	ldr	r3, [pc, #8]	; (22058 <sd_mmc_spi_get_response+0x10>)
   2204e:	681b      	ldr	r3, [r3, #0]
}
   22050:	0018      	movs	r0, r3
   22052:	46bd      	mov	sp, r7
   22054:	bd80      	pop	{r7, pc}
   22056:	46c0      	nop			; (mov r8, r8)
   22058:	200040f4 	.word	0x200040f4

0002205c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   2205c:	b590      	push	{r4, r7, lr}
   2205e:	b085      	sub	sp, #20
   22060:	af00      	add	r7, sp, #0
   22062:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   22064:	230e      	movs	r3, #14
   22066:	18fb      	adds	r3, r7, r3
   22068:	22ff      	movs	r2, #255	; 0xff
   2206a:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2206c:	4b1c      	ldr	r3, [pc, #112]	; (220e0 <sd_mmc_spi_read_word+0x84>)
   2206e:	2200      	movs	r2, #0
   22070:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   22072:	4b1c      	ldr	r3, [pc, #112]	; (220e4 <sd_mmc_spi_read_word+0x88>)
   22074:	681a      	ldr	r2, [r3, #0]
   22076:	4b1c      	ldr	r3, [pc, #112]	; (220e8 <sd_mmc_spi_read_word+0x8c>)
   22078:	881b      	ldrh	r3, [r3, #0]
   2207a:	0019      	movs	r1, r3
   2207c:	4b1b      	ldr	r3, [pc, #108]	; (220ec <sd_mmc_spi_read_word+0x90>)
   2207e:	0010      	movs	r0, r2
   22080:	4798      	blx	r3
   22082:	1e0b      	subs	r3, r1, #0
   22084:	d10a      	bne.n	2209c <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   22086:	4b1a      	ldr	r3, [pc, #104]	; (220f0 <sd_mmc_spi_read_word+0x94>)
   22088:	4798      	blx	r3
   2208a:	0003      	movs	r3, r0
   2208c:	001a      	movs	r2, r3
   2208e:	2301      	movs	r3, #1
   22090:	4053      	eors	r3, r2
   22092:	b2db      	uxtb	r3, r3
   22094:	2b00      	cmp	r3, #0
   22096:	d001      	beq.n	2209c <sd_mmc_spi_read_word+0x40>
			return false;
   22098:	2300      	movs	r3, #0
   2209a:	e01d      	b.n	220d8 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   2209c:	230e      	movs	r3, #14
   2209e:	18fb      	adds	r3, r7, r3
   220a0:	881b      	ldrh	r3, [r3, #0]
   220a2:	1d39      	adds	r1, r7, #4
   220a4:	4813      	ldr	r0, [pc, #76]	; (220f4 <sd_mmc_spi_read_word+0x98>)
   220a6:	2204      	movs	r2, #4
   220a8:	4c13      	ldr	r4, [pc, #76]	; (220f8 <sd_mmc_spi_read_word+0x9c>)
   220aa:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   220ac:	687b      	ldr	r3, [r7, #4]
   220ae:	687a      	ldr	r2, [r7, #4]
   220b0:	6812      	ldr	r2, [r2, #0]
   220b2:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   220b4:	4b0b      	ldr	r3, [pc, #44]	; (220e4 <sd_mmc_spi_read_word+0x88>)
   220b6:	681b      	ldr	r3, [r3, #0]
   220b8:	1d1a      	adds	r2, r3, #4
   220ba:	4b0a      	ldr	r3, [pc, #40]	; (220e4 <sd_mmc_spi_read_word+0x88>)
   220bc:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   220be:	4b09      	ldr	r3, [pc, #36]	; (220e4 <sd_mmc_spi_read_word+0x88>)
   220c0:	681a      	ldr	r2, [r3, #0]
   220c2:	4b09      	ldr	r3, [pc, #36]	; (220e8 <sd_mmc_spi_read_word+0x8c>)
   220c4:	881b      	ldrh	r3, [r3, #0]
   220c6:	0019      	movs	r1, r3
   220c8:	4b08      	ldr	r3, [pc, #32]	; (220ec <sd_mmc_spi_read_word+0x90>)
   220ca:	0010      	movs	r0, r2
   220cc:	4798      	blx	r3
   220ce:	1e0b      	subs	r3, r1, #0
   220d0:	d101      	bne.n	220d6 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   220d2:	4b0a      	ldr	r3, [pc, #40]	; (220fc <sd_mmc_spi_read_word+0xa0>)
   220d4:	4798      	blx	r3
	}
	return true;
   220d6:	2301      	movs	r3, #1
}
   220d8:	0018      	movs	r0, r3
   220da:	46bd      	mov	sp, r7
   220dc:	b005      	add	sp, #20
   220de:	bd90      	pop	{r4, r7, pc}
   220e0:	200040f3 	.word	0x200040f3
   220e4:	200040f8 	.word	0x200040f8
   220e8:	200040fc 	.word	0x200040fc
   220ec:	00034d01 	.word	0x00034d01
   220f0:	000219f9 	.word	0x000219f9
   220f4:	200040e0 	.word	0x200040e0
   220f8:	0002a399 	.word	0x0002a399
   220fc:	00021a7d 	.word	0x00021a7d

00022100 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   22100:	b590      	push	{r4, r7, lr}
   22102:	b085      	sub	sp, #20
   22104:	af00      	add	r7, sp, #0
   22106:	6078      	str	r0, [r7, #4]
   22108:	000a      	movs	r2, r1
   2210a:	1cbb      	adds	r3, r7, #2
   2210c:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   2210e:	230a      	movs	r3, #10
   22110:	18fb      	adds	r3, r7, r3
   22112:	22ff      	movs	r2, #255	; 0xff
   22114:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22116:	4b1c      	ldr	r3, [pc, #112]	; (22188 <sd_mmc_spi_start_read_blocks+0x88>)
   22118:	2200      	movs	r2, #0
   2211a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   2211c:	2300      	movs	r3, #0
   2211e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   22120:	e025      	b.n	2216e <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   22122:	4b1a      	ldr	r3, [pc, #104]	; (2218c <sd_mmc_spi_start_read_blocks+0x8c>)
   22124:	4798      	blx	r3
   22126:	0003      	movs	r3, r0
   22128:	001a      	movs	r2, r3
   2212a:	2301      	movs	r3, #1
   2212c:	4053      	eors	r3, r2
   2212e:	b2db      	uxtb	r3, r3
   22130:	2b00      	cmp	r3, #0
   22132:	d001      	beq.n	22138 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   22134:	2300      	movs	r3, #0
   22136:	e022      	b.n	2217e <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   22138:	687a      	ldr	r2, [r7, #4]
   2213a:	68fb      	ldr	r3, [r7, #12]
   2213c:	18d1      	adds	r1, r2, r3
   2213e:	4b14      	ldr	r3, [pc, #80]	; (22190 <sd_mmc_spi_start_read_blocks+0x90>)
   22140:	881a      	ldrh	r2, [r3, #0]
   22142:	230a      	movs	r3, #10
   22144:	18fb      	adds	r3, r7, r3
   22146:	881b      	ldrh	r3, [r3, #0]
   22148:	4812      	ldr	r0, [pc, #72]	; (22194 <sd_mmc_spi_start_read_blocks+0x94>)
   2214a:	4c13      	ldr	r4, [pc, #76]	; (22198 <sd_mmc_spi_start_read_blocks+0x98>)
   2214c:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   2214e:	4b10      	ldr	r3, [pc, #64]	; (22190 <sd_mmc_spi_start_read_blocks+0x90>)
   22150:	881b      	ldrh	r3, [r3, #0]
   22152:	001a      	movs	r2, r3
   22154:	68fb      	ldr	r3, [r7, #12]
   22156:	189b      	adds	r3, r3, r2
   22158:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   2215a:	4b0d      	ldr	r3, [pc, #52]	; (22190 <sd_mmc_spi_start_read_blocks+0x90>)
   2215c:	881b      	ldrh	r3, [r3, #0]
   2215e:	001a      	movs	r2, r3
   22160:	4b0e      	ldr	r3, [pc, #56]	; (2219c <sd_mmc_spi_start_read_blocks+0x9c>)
   22162:	681b      	ldr	r3, [r3, #0]
   22164:	18d2      	adds	r2, r2, r3
   22166:	4b0d      	ldr	r3, [pc, #52]	; (2219c <sd_mmc_spi_start_read_blocks+0x9c>)
   22168:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   2216a:	4b0d      	ldr	r3, [pc, #52]	; (221a0 <sd_mmc_spi_start_read_blocks+0xa0>)
   2216c:	4798      	blx	r3
	while (nb_block--) {
   2216e:	1cbb      	adds	r3, r7, #2
   22170:	881b      	ldrh	r3, [r3, #0]
   22172:	1cba      	adds	r2, r7, #2
   22174:	1e59      	subs	r1, r3, #1
   22176:	8011      	strh	r1, [r2, #0]
   22178:	2b00      	cmp	r3, #0
   2217a:	d1d2      	bne.n	22122 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   2217c:	2301      	movs	r3, #1
}
   2217e:	0018      	movs	r0, r3
   22180:	46bd      	mov	sp, r7
   22182:	b005      	add	sp, #20
   22184:	bd90      	pop	{r4, r7, pc}
   22186:	46c0      	nop			; (mov r8, r8)
   22188:	200040f3 	.word	0x200040f3
   2218c:	000219f9 	.word	0x000219f9
   22190:	200040fc 	.word	0x200040fc
   22194:	200040e0 	.word	0x200040e0
   22198:	0002a399 	.word	0x0002a399
   2219c:	200040f8 	.word	0x200040f8
   221a0:	00021a7d 	.word	0x00021a7d

000221a4 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   221a4:	b580      	push	{r7, lr}
   221a6:	af00      	add	r7, sp, #0
	return true;
   221a8:	2301      	movs	r3, #1
}
   221aa:	0018      	movs	r0, r3
   221ac:	46bd      	mov	sp, r7
   221ae:	bd80      	pop	{r7, pc}

000221b0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   221b0:	b580      	push	{r7, lr}
   221b2:	b084      	sub	sp, #16
   221b4:	af00      	add	r7, sp, #0
   221b6:	6078      	str	r0, [r7, #4]
   221b8:	000a      	movs	r2, r1
   221ba:	1cbb      	adds	r3, r7, #2
   221bc:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   221be:	4b24      	ldr	r3, [pc, #144]	; (22250 <sd_mmc_spi_start_write_blocks+0xa0>)
   221c0:	2200      	movs	r2, #0
   221c2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   221c4:	2300      	movs	r3, #0
   221c6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   221c8:	e035      	b.n	22236 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   221ca:	4b22      	ldr	r3, [pc, #136]	; (22254 <sd_mmc_spi_start_write_blocks+0xa4>)
   221cc:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   221ce:	687a      	ldr	r2, [r7, #4]
   221d0:	68fb      	ldr	r3, [r7, #12]
   221d2:	18d1      	adds	r1, r2, r3
   221d4:	4b20      	ldr	r3, [pc, #128]	; (22258 <sd_mmc_spi_start_write_blocks+0xa8>)
   221d6:	881a      	ldrh	r2, [r3, #0]
   221d8:	4b20      	ldr	r3, [pc, #128]	; (2225c <sd_mmc_spi_start_write_blocks+0xac>)
   221da:	0018      	movs	r0, r3
   221dc:	4b20      	ldr	r3, [pc, #128]	; (22260 <sd_mmc_spi_start_write_blocks+0xb0>)
   221de:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   221e0:	4b1d      	ldr	r3, [pc, #116]	; (22258 <sd_mmc_spi_start_write_blocks+0xa8>)
   221e2:	881b      	ldrh	r3, [r3, #0]
   221e4:	001a      	movs	r2, r3
   221e6:	68fb      	ldr	r3, [r7, #12]
   221e8:	189b      	adds	r3, r3, r2
   221ea:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   221ec:	4b1a      	ldr	r3, [pc, #104]	; (22258 <sd_mmc_spi_start_write_blocks+0xa8>)
   221ee:	881b      	ldrh	r3, [r3, #0]
   221f0:	001a      	movs	r2, r3
   221f2:	4b1c      	ldr	r3, [pc, #112]	; (22264 <sd_mmc_spi_start_write_blocks+0xb4>)
   221f4:	681b      	ldr	r3, [r3, #0]
   221f6:	18d2      	adds	r2, r2, r3
   221f8:	4b1a      	ldr	r3, [pc, #104]	; (22264 <sd_mmc_spi_start_write_blocks+0xb4>)
   221fa:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   221fc:	4b1a      	ldr	r3, [pc, #104]	; (22268 <sd_mmc_spi_start_write_blocks+0xb8>)
   221fe:	4798      	blx	r3
   22200:	0003      	movs	r3, r0
   22202:	001a      	movs	r2, r3
   22204:	2301      	movs	r3, #1
   22206:	4053      	eors	r3, r2
   22208:	b2db      	uxtb	r3, r3
   2220a:	2b00      	cmp	r3, #0
   2220c:	d001      	beq.n	22212 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   2220e:	2300      	movs	r3, #0
   22210:	e019      	b.n	22246 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   22212:	1cbb      	adds	r3, r7, #2
   22214:	881b      	ldrh	r3, [r3, #0]
   22216:	2b00      	cmp	r3, #0
   22218:	d00d      	beq.n	22236 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   2221a:	4b14      	ldr	r3, [pc, #80]	; (2226c <sd_mmc_spi_start_write_blocks+0xbc>)
   2221c:	4798      	blx	r3
   2221e:	0003      	movs	r3, r0
   22220:	001a      	movs	r2, r3
   22222:	2301      	movs	r3, #1
   22224:	4053      	eors	r3, r2
   22226:	b2db      	uxtb	r3, r3
   22228:	2b00      	cmp	r3, #0
   2222a:	d004      	beq.n	22236 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2222c:	4b08      	ldr	r3, [pc, #32]	; (22250 <sd_mmc_spi_start_write_blocks+0xa0>)
   2222e:	2205      	movs	r2, #5
   22230:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   22232:	2300      	movs	r3, #0
   22234:	e007      	b.n	22246 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   22236:	1cbb      	adds	r3, r7, #2
   22238:	881b      	ldrh	r3, [r3, #0]
   2223a:	1cba      	adds	r2, r7, #2
   2223c:	1e59      	subs	r1, r3, #1
   2223e:	8011      	strh	r1, [r2, #0]
   22240:	2b00      	cmp	r3, #0
   22242:	d1c2      	bne.n	221ca <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   22244:	2301      	movs	r3, #1
}
   22246:	0018      	movs	r0, r3
   22248:	46bd      	mov	sp, r7
   2224a:	b004      	add	sp, #16
   2224c:	bd80      	pop	{r7, pc}
   2224e:	46c0      	nop			; (mov r8, r8)
   22250:	200040f3 	.word	0x200040f3
   22254:	00021aa9 	.word	0x00021aa9
   22258:	200040fc 	.word	0x200040fc
   2225c:	200040e0 	.word	0x200040e0
   22260:	0002a635 	.word	0x0002a635
   22264:	200040f8 	.word	0x200040f8
   22268:	00021af9 	.word	0x00021af9
   2226c:	0002198d 	.word	0x0002198d

00022270 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   22270:	b580      	push	{r7, lr}
   22272:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   22274:	4b09      	ldr	r3, [pc, #36]	; (2229c <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   22276:	4798      	blx	r3
   22278:	0003      	movs	r3, r0
   2227a:	001a      	movs	r2, r3
   2227c:	2301      	movs	r3, #1
   2227e:	4053      	eors	r3, r2
   22280:	b2db      	uxtb	r3, r3
   22282:	2b00      	cmp	r3, #0
   22284:	d004      	beq.n	22290 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   22286:	4b06      	ldr	r3, [pc, #24]	; (222a0 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   22288:	2205      	movs	r2, #5
   2228a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   2228c:	2300      	movs	r3, #0
   2228e:	e002      	b.n	22296 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   22290:	4b04      	ldr	r3, [pc, #16]	; (222a4 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   22292:	4798      	blx	r3
   22294:	0003      	movs	r3, r0
}
   22296:	0018      	movs	r0, r3
   22298:	46bd      	mov	sp, r7
   2229a:	bd80      	pop	{r7, pc}
   2229c:	0002198d 	.word	0x0002198d
   222a0:	200040f3 	.word	0x200040f3
   222a4:	00021b8d 	.word	0x00021b8d

000222a8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   222a8:	b580      	push	{r7, lr}
   222aa:	b082      	sub	sp, #8
   222ac:	af00      	add	r7, sp, #0
   222ae:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   222b0:	687b      	ldr	r3, [r7, #4]
   222b2:	2b00      	cmp	r3, #0
   222b4:	d00c      	beq.n	222d0 <delay_cycles+0x28>
		SysTick->LOAD = n;
   222b6:	4b08      	ldr	r3, [pc, #32]	; (222d8 <delay_cycles+0x30>)
   222b8:	687a      	ldr	r2, [r7, #4]
   222ba:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   222bc:	4b06      	ldr	r3, [pc, #24]	; (222d8 <delay_cycles+0x30>)
   222be:	2200      	movs	r2, #0
   222c0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   222c2:	46c0      	nop			; (mov r8, r8)
   222c4:	4b04      	ldr	r3, [pc, #16]	; (222d8 <delay_cycles+0x30>)
   222c6:	681a      	ldr	r2, [r3, #0]
   222c8:	2380      	movs	r3, #128	; 0x80
   222ca:	025b      	lsls	r3, r3, #9
   222cc:	4013      	ands	r3, r2
   222ce:	d0f9      	beq.n	222c4 <delay_cycles+0x1c>
		};
	}
}
   222d0:	46c0      	nop			; (mov r8, r8)
   222d2:	46bd      	mov	sp, r7
   222d4:	b002      	add	sp, #8
   222d6:	bd80      	pop	{r7, pc}
   222d8:	e000e010 	.word	0xe000e010

000222dc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   222dc:	b580      	push	{r7, lr}
   222de:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   222e0:	2000      	movs	r0, #0
   222e2:	4b0f      	ldr	r3, [pc, #60]	; (22320 <delay_init+0x44>)
   222e4:	4798      	blx	r3
   222e6:	0002      	movs	r2, r0
   222e8:	4b0e      	ldr	r3, [pc, #56]	; (22324 <delay_init+0x48>)
   222ea:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   222ec:	4b0d      	ldr	r3, [pc, #52]	; (22324 <delay_init+0x48>)
   222ee:	6818      	ldr	r0, [r3, #0]
   222f0:	4b0d      	ldr	r3, [pc, #52]	; (22328 <delay_init+0x4c>)
   222f2:	22fa      	movs	r2, #250	; 0xfa
   222f4:	0091      	lsls	r1, r2, #2
   222f6:	4798      	blx	r3
   222f8:	0003      	movs	r3, r0
   222fa:	001a      	movs	r2, r3
   222fc:	4b09      	ldr	r3, [pc, #36]	; (22324 <delay_init+0x48>)
   222fe:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   22300:	4b08      	ldr	r3, [pc, #32]	; (22324 <delay_init+0x48>)
   22302:	6818      	ldr	r0, [r3, #0]
   22304:	4b08      	ldr	r3, [pc, #32]	; (22328 <delay_init+0x4c>)
   22306:	22fa      	movs	r2, #250	; 0xfa
   22308:	0091      	lsls	r1, r2, #2
   2230a:	4798      	blx	r3
   2230c:	0003      	movs	r3, r0
   2230e:	001a      	movs	r2, r3
   22310:	4b06      	ldr	r3, [pc, #24]	; (2232c <delay_init+0x50>)
   22312:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   22314:	4b06      	ldr	r3, [pc, #24]	; (22330 <delay_init+0x54>)
   22316:	2205      	movs	r2, #5
   22318:	601a      	str	r2, [r3, #0]
}
   2231a:	46c0      	nop			; (mov r8, r8)
   2231c:	46bd      	mov	sp, r7
   2231e:	bd80      	pop	{r7, pc}
   22320:	0002bfa9 	.word	0x0002bfa9
   22324:	20000118 	.word	0x20000118
   22328:	00034bf5 	.word	0x00034bf5
   2232c:	2000011c 	.word	0x2000011c
   22330:	e000e010 	.word	0xe000e010

00022334 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   22334:	b580      	push	{r7, lr}
   22336:	b082      	sub	sp, #8
   22338:	af00      	add	r7, sp, #0
   2233a:	6078      	str	r0, [r7, #4]
	while (n--) {
   2233c:	e004      	b.n	22348 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   2233e:	4b07      	ldr	r3, [pc, #28]	; (2235c <delay_cycles_ms+0x28>)
   22340:	681b      	ldr	r3, [r3, #0]
   22342:	0018      	movs	r0, r3
   22344:	4b06      	ldr	r3, [pc, #24]	; (22360 <delay_cycles_ms+0x2c>)
   22346:	4798      	blx	r3
	while (n--) {
   22348:	687b      	ldr	r3, [r7, #4]
   2234a:	1e5a      	subs	r2, r3, #1
   2234c:	607a      	str	r2, [r7, #4]
   2234e:	2b00      	cmp	r3, #0
   22350:	d1f5      	bne.n	2233e <delay_cycles_ms+0xa>
	}
}
   22352:	46c0      	nop			; (mov r8, r8)
   22354:	46bd      	mov	sp, r7
   22356:	b002      	add	sp, #8
   22358:	bd80      	pop	{r7, pc}
   2235a:	46c0      	nop			; (mov r8, r8)
   2235c:	20000118 	.word	0x20000118
   22360:	000222a9 	.word	0x000222a9

00022364 <system_pinmux_get_group_from_gpio_pin>:
{
   22364:	b580      	push	{r7, lr}
   22366:	b084      	sub	sp, #16
   22368:	af00      	add	r7, sp, #0
   2236a:	0002      	movs	r2, r0
   2236c:	1dfb      	adds	r3, r7, #7
   2236e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22370:	230f      	movs	r3, #15
   22372:	18fb      	adds	r3, r7, r3
   22374:	1dfa      	adds	r2, r7, #7
   22376:	7812      	ldrb	r2, [r2, #0]
   22378:	09d2      	lsrs	r2, r2, #7
   2237a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2237c:	230e      	movs	r3, #14
   2237e:	18fb      	adds	r3, r7, r3
   22380:	1dfa      	adds	r2, r7, #7
   22382:	7812      	ldrb	r2, [r2, #0]
   22384:	0952      	lsrs	r2, r2, #5
   22386:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   22388:	4b0d      	ldr	r3, [pc, #52]	; (223c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2238a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2238c:	230f      	movs	r3, #15
   2238e:	18fb      	adds	r3, r7, r3
   22390:	781b      	ldrb	r3, [r3, #0]
   22392:	2b00      	cmp	r3, #0
   22394:	d10f      	bne.n	223b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   22396:	230f      	movs	r3, #15
   22398:	18fb      	adds	r3, r7, r3
   2239a:	781b      	ldrb	r3, [r3, #0]
   2239c:	009b      	lsls	r3, r3, #2
   2239e:	2210      	movs	r2, #16
   223a0:	4694      	mov	ip, r2
   223a2:	44bc      	add	ip, r7
   223a4:	4463      	add	r3, ip
   223a6:	3b08      	subs	r3, #8
   223a8:	681a      	ldr	r2, [r3, #0]
   223aa:	230e      	movs	r3, #14
   223ac:	18fb      	adds	r3, r7, r3
   223ae:	781b      	ldrb	r3, [r3, #0]
   223b0:	01db      	lsls	r3, r3, #7
   223b2:	18d3      	adds	r3, r2, r3
   223b4:	e000      	b.n	223b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   223b6:	2300      	movs	r3, #0
}
   223b8:	0018      	movs	r0, r3
   223ba:	46bd      	mov	sp, r7
   223bc:	b004      	add	sp, #16
   223be:	bd80      	pop	{r7, pc}
   223c0:	41004400 	.word	0x41004400

000223c4 <system_interrupt_enable_global>:
{
   223c4:	b580      	push	{r7, lr}
   223c6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   223c8:	4b04      	ldr	r3, [pc, #16]	; (223dc <system_interrupt_enable_global+0x18>)
   223ca:	2201      	movs	r2, #1
   223cc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   223ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   223d2:	b662      	cpsie	i
}
   223d4:	46c0      	nop			; (mov r8, r8)
   223d6:	46bd      	mov	sp, r7
   223d8:	bd80      	pop	{r7, pc}
   223da:	46c0      	nop			; (mov r8, r8)
   223dc:	20000122 	.word	0x20000122

000223e0 <port_get_group_from_gpio_pin>:
{
   223e0:	b580      	push	{r7, lr}
   223e2:	b082      	sub	sp, #8
   223e4:	af00      	add	r7, sp, #0
   223e6:	0002      	movs	r2, r0
   223e8:	1dfb      	adds	r3, r7, #7
   223ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   223ec:	1dfb      	adds	r3, r7, #7
   223ee:	781b      	ldrb	r3, [r3, #0]
   223f0:	0018      	movs	r0, r3
   223f2:	4b03      	ldr	r3, [pc, #12]	; (22400 <port_get_group_from_gpio_pin+0x20>)
   223f4:	4798      	blx	r3
   223f6:	0003      	movs	r3, r0
}
   223f8:	0018      	movs	r0, r3
   223fa:	46bd      	mov	sp, r7
   223fc:	b002      	add	sp, #8
   223fe:	bd80      	pop	{r7, pc}
   22400:	00022365 	.word	0x00022365

00022404 <port_get_config_defaults>:
{
   22404:	b580      	push	{r7, lr}
   22406:	b082      	sub	sp, #8
   22408:	af00      	add	r7, sp, #0
   2240a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2240c:	687b      	ldr	r3, [r7, #4]
   2240e:	2200      	movs	r2, #0
   22410:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22412:	687b      	ldr	r3, [r7, #4]
   22414:	2201      	movs	r2, #1
   22416:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   22418:	687b      	ldr	r3, [r7, #4]
   2241a:	2200      	movs	r2, #0
   2241c:	709a      	strb	r2, [r3, #2]
}
   2241e:	46c0      	nop			; (mov r8, r8)
   22420:	46bd      	mov	sp, r7
   22422:	b002      	add	sp, #8
   22424:	bd80      	pop	{r7, pc}
	...

00022428 <port_pin_set_output_level>:
{
   22428:	b580      	push	{r7, lr}
   2242a:	b084      	sub	sp, #16
   2242c:	af00      	add	r7, sp, #0
   2242e:	0002      	movs	r2, r0
   22430:	1dfb      	adds	r3, r7, #7
   22432:	701a      	strb	r2, [r3, #0]
   22434:	1dbb      	adds	r3, r7, #6
   22436:	1c0a      	adds	r2, r1, #0
   22438:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2243a:	1dfb      	adds	r3, r7, #7
   2243c:	781b      	ldrb	r3, [r3, #0]
   2243e:	0018      	movs	r0, r3
   22440:	4b0d      	ldr	r3, [pc, #52]	; (22478 <port_pin_set_output_level+0x50>)
   22442:	4798      	blx	r3
   22444:	0003      	movs	r3, r0
   22446:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   22448:	1dfb      	adds	r3, r7, #7
   2244a:	781b      	ldrb	r3, [r3, #0]
   2244c:	221f      	movs	r2, #31
   2244e:	4013      	ands	r3, r2
   22450:	2201      	movs	r2, #1
   22452:	409a      	lsls	r2, r3
   22454:	0013      	movs	r3, r2
   22456:	60bb      	str	r3, [r7, #8]
	if (level) {
   22458:	1dbb      	adds	r3, r7, #6
   2245a:	781b      	ldrb	r3, [r3, #0]
   2245c:	2b00      	cmp	r3, #0
   2245e:	d003      	beq.n	22468 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22460:	68fb      	ldr	r3, [r7, #12]
   22462:	68ba      	ldr	r2, [r7, #8]
   22464:	619a      	str	r2, [r3, #24]
}
   22466:	e002      	b.n	2246e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   22468:	68fb      	ldr	r3, [r7, #12]
   2246a:	68ba      	ldr	r2, [r7, #8]
   2246c:	615a      	str	r2, [r3, #20]
}
   2246e:	46c0      	nop			; (mov r8, r8)
   22470:	46bd      	mov	sp, r7
   22472:	b004      	add	sp, #16
   22474:	bd80      	pop	{r7, pc}
   22476:	46c0      	nop			; (mov r8, r8)
   22478:	000223e1 	.word	0x000223e1

0002247c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   2247c:	b580      	push	{r7, lr}
   2247e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   22480:	4b04      	ldr	r3, [pc, #16]	; (22494 <chip_isr+0x18>)
   22482:	681b      	ldr	r3, [r3, #0]
   22484:	2b00      	cmp	r3, #0
   22486:	d002      	beq.n	2248e <chip_isr+0x12>
		gpfIsr();
   22488:	4b02      	ldr	r3, [pc, #8]	; (22494 <chip_isr+0x18>)
   2248a:	681b      	ldr	r3, [r3, #0]
   2248c:	4798      	blx	r3
	}
}
   2248e:	46c0      	nop			; (mov r8, r8)
   22490:	46bd      	mov	sp, r7
   22492:	bd80      	pop	{r7, pc}
   22494:	20004100 	.word	0x20004100

00022498 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   22498:	b580      	push	{r7, lr}
   2249a:	b082      	sub	sp, #8
   2249c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   2249e:	1d3b      	adds	r3, r7, #4
   224a0:	0018      	movs	r0, r3
   224a2:	4b10      	ldr	r3, [pc, #64]	; (224e4 <init_chip_pins+0x4c>)
   224a4:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   224a6:	1d3b      	adds	r3, r7, #4
   224a8:	2201      	movs	r2, #1
   224aa:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   224ac:	1d3b      	adds	r3, r7, #4
   224ae:	0019      	movs	r1, r3
   224b0:	201b      	movs	r0, #27
   224b2:	4b0d      	ldr	r3, [pc, #52]	; (224e8 <init_chip_pins+0x50>)
   224b4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   224b6:	1d3b      	adds	r3, r7, #4
   224b8:	0019      	movs	r1, r3
   224ba:	201c      	movs	r0, #28
   224bc:	4b0a      	ldr	r3, [pc, #40]	; (224e8 <init_chip_pins+0x50>)
   224be:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   224c0:	1d3b      	adds	r3, r7, #4
   224c2:	0019      	movs	r1, r3
   224c4:	2028      	movs	r0, #40	; 0x28
   224c6:	4b08      	ldr	r3, [pc, #32]	; (224e8 <init_chip_pins+0x50>)
   224c8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   224ca:	2100      	movs	r1, #0
   224cc:	201c      	movs	r0, #28
   224ce:	4b07      	ldr	r3, [pc, #28]	; (224ec <init_chip_pins+0x54>)
   224d0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   224d2:	2100      	movs	r1, #0
   224d4:	201b      	movs	r0, #27
   224d6:	4b05      	ldr	r3, [pc, #20]	; (224ec <init_chip_pins+0x54>)
   224d8:	4798      	blx	r3
}
   224da:	46c0      	nop			; (mov r8, r8)
   224dc:	46bd      	mov	sp, r7
   224de:	b002      	add	sp, #8
   224e0:	bd80      	pop	{r7, pc}
   224e2:	46c0      	nop			; (mov r8, r8)
   224e4:	00022405 	.word	0x00022405
   224e8:	00028b95 	.word	0x00028b95
   224ec:	00022429 	.word	0x00022429

000224f0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   224f0:	b580      	push	{r7, lr}
   224f2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   224f4:	4b0b      	ldr	r3, [pc, #44]	; (22524 <nm_bsp_init+0x34>)
   224f6:	2200      	movs	r2, #0
   224f8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   224fa:	4b0b      	ldr	r3, [pc, #44]	; (22528 <nm_bsp_init+0x38>)
   224fc:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   224fe:	4b0b      	ldr	r3, [pc, #44]	; (2252c <nm_bsp_init+0x3c>)
   22500:	681b      	ldr	r3, [r3, #0]
   22502:	2201      	movs	r2, #1
   22504:	4013      	ands	r3, r2
   22506:	d004      	beq.n	22512 <nm_bsp_init+0x22>
   22508:	4b08      	ldr	r3, [pc, #32]	; (2252c <nm_bsp_init+0x3c>)
   2250a:	681b      	ldr	r3, [r3, #0]
   2250c:	2202      	movs	r2, #2
   2250e:	4013      	ands	r3, r2
   22510:	d101      	bne.n	22516 <nm_bsp_init+0x26>
	    delay_init();
   22512:	4b07      	ldr	r3, [pc, #28]	; (22530 <nm_bsp_init+0x40>)
   22514:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   22516:	4b07      	ldr	r3, [pc, #28]	; (22534 <nm_bsp_init+0x44>)
   22518:	4798      	blx	r3

	return M2M_SUCCESS;
   2251a:	2300      	movs	r3, #0
}
   2251c:	0018      	movs	r0, r3
   2251e:	46bd      	mov	sp, r7
   22520:	bd80      	pop	{r7, pc}
   22522:	46c0      	nop			; (mov r8, r8)
   22524:	20004100 	.word	0x20004100
   22528:	00022499 	.word	0x00022499
   2252c:	e000e010 	.word	0xe000e010
   22530:	000222dd 	.word	0x000222dd
   22534:	000223c5 	.word	0x000223c5

00022538 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   22538:	b580      	push	{r7, lr}
   2253a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   2253c:	2100      	movs	r1, #0
   2253e:	201c      	movs	r0, #28
   22540:	4b0b      	ldr	r3, [pc, #44]	; (22570 <nm_bsp_reset+0x38>)
   22542:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   22544:	2100      	movs	r1, #0
   22546:	201b      	movs	r0, #27
   22548:	4b09      	ldr	r3, [pc, #36]	; (22570 <nm_bsp_reset+0x38>)
   2254a:	4798      	blx	r3
	nm_bsp_sleep(1);
   2254c:	2001      	movs	r0, #1
   2254e:	4b09      	ldr	r3, [pc, #36]	; (22574 <nm_bsp_reset+0x3c>)
   22550:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   22552:	2101      	movs	r1, #1
   22554:	201c      	movs	r0, #28
   22556:	4b06      	ldr	r3, [pc, #24]	; (22570 <nm_bsp_reset+0x38>)
   22558:	4798      	blx	r3
	nm_bsp_sleep(10);
   2255a:	200a      	movs	r0, #10
   2255c:	4b05      	ldr	r3, [pc, #20]	; (22574 <nm_bsp_reset+0x3c>)
   2255e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   22560:	2101      	movs	r1, #1
   22562:	201b      	movs	r0, #27
   22564:	4b02      	ldr	r3, [pc, #8]	; (22570 <nm_bsp_reset+0x38>)
   22566:	4798      	blx	r3
}
   22568:	46c0      	nop			; (mov r8, r8)
   2256a:	46bd      	mov	sp, r7
   2256c:	bd80      	pop	{r7, pc}
   2256e:	46c0      	nop			; (mov r8, r8)
   22570:	00022429 	.word	0x00022429
   22574:	00022579 	.word	0x00022579

00022578 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   22578:	b580      	push	{r7, lr}
   2257a:	b082      	sub	sp, #8
   2257c:	af00      	add	r7, sp, #0
   2257e:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   22580:	687b      	ldr	r3, [r7, #4]
   22582:	0018      	movs	r0, r3
   22584:	4b02      	ldr	r3, [pc, #8]	; (22590 <nm_bsp_sleep+0x18>)
   22586:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   22588:	46c0      	nop			; (mov r8, r8)
   2258a:	46bd      	mov	sp, r7
   2258c:	b002      	add	sp, #8
   2258e:	bd80      	pop	{r7, pc}
   22590:	0001e371 	.word	0x0001e371

00022594 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   22594:	b580      	push	{r7, lr}
   22596:	b086      	sub	sp, #24
   22598:	af00      	add	r7, sp, #0
   2259a:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   2259c:	4b15      	ldr	r3, [pc, #84]	; (225f4 <nm_bsp_register_isr+0x60>)
   2259e:	687a      	ldr	r2, [r7, #4]
   225a0:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   225a2:	230c      	movs	r3, #12
   225a4:	18fb      	adds	r3, r7, r3
   225a6:	0018      	movs	r0, r3
   225a8:	4b13      	ldr	r3, [pc, #76]	; (225f8 <nm_bsp_register_isr+0x64>)
   225aa:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   225ac:	230c      	movs	r3, #12
   225ae:	18fb      	adds	r3, r7, r3
   225b0:	2229      	movs	r2, #41	; 0x29
   225b2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   225b4:	230c      	movs	r3, #12
   225b6:	18fb      	adds	r3, r7, r3
   225b8:	2200      	movs	r2, #0
   225ba:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   225bc:	230c      	movs	r3, #12
   225be:	18fb      	adds	r3, r7, r3
   225c0:	2201      	movs	r2, #1
   225c2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   225c4:	230c      	movs	r3, #12
   225c6:	18fb      	adds	r3, r7, r3
   225c8:	2202      	movs	r2, #2
   225ca:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   225cc:	230c      	movs	r3, #12
   225ce:	18fb      	adds	r3, r7, r3
   225d0:	0019      	movs	r1, r3
   225d2:	2009      	movs	r0, #9
   225d4:	4b09      	ldr	r3, [pc, #36]	; (225fc <nm_bsp_register_isr+0x68>)
   225d6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   225d8:	4b09      	ldr	r3, [pc, #36]	; (22600 <nm_bsp_register_isr+0x6c>)
   225da:	2200      	movs	r2, #0
   225dc:	2109      	movs	r1, #9
   225de:	0018      	movs	r0, r3
   225e0:	4b08      	ldr	r3, [pc, #32]	; (22604 <nm_bsp_register_isr+0x70>)
   225e2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   225e4:	2100      	movs	r1, #0
   225e6:	2009      	movs	r0, #9
   225e8:	4b07      	ldr	r3, [pc, #28]	; (22608 <nm_bsp_register_isr+0x74>)
   225ea:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   225ec:	46c0      	nop			; (mov r8, r8)
   225ee:	46bd      	mov	sp, r7
   225f0:	b006      	add	sp, #24
   225f2:	bd80      	pop	{r7, pc}
   225f4:	20004100 	.word	0x20004100
   225f8:	00028a3d 	.word	0x00028a3d
   225fc:	00028a71 	.word	0x00028a71
   22600:	0002247d 	.word	0x0002247d
   22604:	0002863d 	.word	0x0002863d
   22608:	000286a1 	.word	0x000286a1

0002260c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   2260c:	b580      	push	{r7, lr}
   2260e:	b082      	sub	sp, #8
   22610:	af00      	add	r7, sp, #0
   22612:	0002      	movs	r2, r0
   22614:	1dfb      	adds	r3, r7, #7
   22616:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   22618:	1dfb      	adds	r3, r7, #7
   2261a:	781b      	ldrb	r3, [r3, #0]
   2261c:	2b00      	cmp	r3, #0
   2261e:	d004      	beq.n	2262a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   22620:	2100      	movs	r1, #0
   22622:	2009      	movs	r0, #9
   22624:	4b05      	ldr	r3, [pc, #20]	; (2263c <nm_bsp_interrupt_ctrl+0x30>)
   22626:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   22628:	e003      	b.n	22632 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2262a:	2100      	movs	r1, #0
   2262c:	2009      	movs	r0, #9
   2262e:	4b04      	ldr	r3, [pc, #16]	; (22640 <nm_bsp_interrupt_ctrl+0x34>)
   22630:	4798      	blx	r3
}
   22632:	46c0      	nop			; (mov r8, r8)
   22634:	46bd      	mov	sp, r7
   22636:	b002      	add	sp, #8
   22638:	bd80      	pop	{r7, pc}
   2263a:	46c0      	nop			; (mov r8, r8)
   2263c:	000286a1 	.word	0x000286a1
   22640:	000286e9 	.word	0x000286e9

00022644 <system_pinmux_get_group_from_gpio_pin>:
{
   22644:	b580      	push	{r7, lr}
   22646:	b084      	sub	sp, #16
   22648:	af00      	add	r7, sp, #0
   2264a:	0002      	movs	r2, r0
   2264c:	1dfb      	adds	r3, r7, #7
   2264e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22650:	230f      	movs	r3, #15
   22652:	18fb      	adds	r3, r7, r3
   22654:	1dfa      	adds	r2, r7, #7
   22656:	7812      	ldrb	r2, [r2, #0]
   22658:	09d2      	lsrs	r2, r2, #7
   2265a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2265c:	230e      	movs	r3, #14
   2265e:	18fb      	adds	r3, r7, r3
   22660:	1dfa      	adds	r2, r7, #7
   22662:	7812      	ldrb	r2, [r2, #0]
   22664:	0952      	lsrs	r2, r2, #5
   22666:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   22668:	4b0d      	ldr	r3, [pc, #52]	; (226a0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2266a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2266c:	230f      	movs	r3, #15
   2266e:	18fb      	adds	r3, r7, r3
   22670:	781b      	ldrb	r3, [r3, #0]
   22672:	2b00      	cmp	r3, #0
   22674:	d10f      	bne.n	22696 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   22676:	230f      	movs	r3, #15
   22678:	18fb      	adds	r3, r7, r3
   2267a:	781b      	ldrb	r3, [r3, #0]
   2267c:	009b      	lsls	r3, r3, #2
   2267e:	2210      	movs	r2, #16
   22680:	4694      	mov	ip, r2
   22682:	44bc      	add	ip, r7
   22684:	4463      	add	r3, ip
   22686:	3b08      	subs	r3, #8
   22688:	681a      	ldr	r2, [r3, #0]
   2268a:	230e      	movs	r3, #14
   2268c:	18fb      	adds	r3, r7, r3
   2268e:	781b      	ldrb	r3, [r3, #0]
   22690:	01db      	lsls	r3, r3, #7
   22692:	18d3      	adds	r3, r2, r3
   22694:	e000      	b.n	22698 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   22696:	2300      	movs	r3, #0
}
   22698:	0018      	movs	r0, r3
   2269a:	46bd      	mov	sp, r7
   2269c:	b004      	add	sp, #16
   2269e:	bd80      	pop	{r7, pc}
   226a0:	41004400 	.word	0x41004400

000226a4 <port_get_group_from_gpio_pin>:
{
   226a4:	b580      	push	{r7, lr}
   226a6:	b082      	sub	sp, #8
   226a8:	af00      	add	r7, sp, #0
   226aa:	0002      	movs	r2, r0
   226ac:	1dfb      	adds	r3, r7, #7
   226ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   226b0:	1dfb      	adds	r3, r7, #7
   226b2:	781b      	ldrb	r3, [r3, #0]
   226b4:	0018      	movs	r0, r3
   226b6:	4b03      	ldr	r3, [pc, #12]	; (226c4 <port_get_group_from_gpio_pin+0x20>)
   226b8:	4798      	blx	r3
   226ba:	0003      	movs	r3, r0
}
   226bc:	0018      	movs	r0, r3
   226be:	46bd      	mov	sp, r7
   226c0:	b002      	add	sp, #8
   226c2:	bd80      	pop	{r7, pc}
   226c4:	00022645 	.word	0x00022645

000226c8 <port_get_config_defaults>:
{
   226c8:	b580      	push	{r7, lr}
   226ca:	b082      	sub	sp, #8
   226cc:	af00      	add	r7, sp, #0
   226ce:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   226d0:	687b      	ldr	r3, [r7, #4]
   226d2:	2200      	movs	r2, #0
   226d4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   226d6:	687b      	ldr	r3, [r7, #4]
   226d8:	2201      	movs	r2, #1
   226da:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   226dc:	687b      	ldr	r3, [r7, #4]
   226de:	2200      	movs	r2, #0
   226e0:	709a      	strb	r2, [r3, #2]
}
   226e2:	46c0      	nop			; (mov r8, r8)
   226e4:	46bd      	mov	sp, r7
   226e6:	b002      	add	sp, #8
   226e8:	bd80      	pop	{r7, pc}
	...

000226ec <port_pin_set_output_level>:
{
   226ec:	b580      	push	{r7, lr}
   226ee:	b084      	sub	sp, #16
   226f0:	af00      	add	r7, sp, #0
   226f2:	0002      	movs	r2, r0
   226f4:	1dfb      	adds	r3, r7, #7
   226f6:	701a      	strb	r2, [r3, #0]
   226f8:	1dbb      	adds	r3, r7, #6
   226fa:	1c0a      	adds	r2, r1, #0
   226fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   226fe:	1dfb      	adds	r3, r7, #7
   22700:	781b      	ldrb	r3, [r3, #0]
   22702:	0018      	movs	r0, r3
   22704:	4b0d      	ldr	r3, [pc, #52]	; (2273c <port_pin_set_output_level+0x50>)
   22706:	4798      	blx	r3
   22708:	0003      	movs	r3, r0
   2270a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2270c:	1dfb      	adds	r3, r7, #7
   2270e:	781b      	ldrb	r3, [r3, #0]
   22710:	221f      	movs	r2, #31
   22712:	4013      	ands	r3, r2
   22714:	2201      	movs	r2, #1
   22716:	409a      	lsls	r2, r3
   22718:	0013      	movs	r3, r2
   2271a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2271c:	1dbb      	adds	r3, r7, #6
   2271e:	781b      	ldrb	r3, [r3, #0]
   22720:	2b00      	cmp	r3, #0
   22722:	d003      	beq.n	2272c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22724:	68fb      	ldr	r3, [r7, #12]
   22726:	68ba      	ldr	r2, [r7, #8]
   22728:	619a      	str	r2, [r3, #24]
}
   2272a:	e002      	b.n	22732 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2272c:	68fb      	ldr	r3, [r7, #12]
   2272e:	68ba      	ldr	r2, [r7, #8]
   22730:	615a      	str	r2, [r3, #20]
}
   22732:	46c0      	nop			; (mov r8, r8)
   22734:	46bd      	mov	sp, r7
   22736:	b004      	add	sp, #16
   22738:	bd80      	pop	{r7, pc}
   2273a:	46c0      	nop			; (mov r8, r8)
   2273c:	000226a5 	.word	0x000226a5

00022740 <spi_is_syncing>:
{
   22740:	b580      	push	{r7, lr}
   22742:	b084      	sub	sp, #16
   22744:	af00      	add	r7, sp, #0
   22746:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22748:	687b      	ldr	r3, [r7, #4]
   2274a:	681b      	ldr	r3, [r3, #0]
   2274c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2274e:	68fb      	ldr	r3, [r7, #12]
   22750:	69db      	ldr	r3, [r3, #28]
   22752:	1e5a      	subs	r2, r3, #1
   22754:	4193      	sbcs	r3, r2
   22756:	b2db      	uxtb	r3, r3
}
   22758:	0018      	movs	r0, r3
   2275a:	46bd      	mov	sp, r7
   2275c:	b004      	add	sp, #16
   2275e:	bd80      	pop	{r7, pc}

00022760 <spi_get_config_defaults>:
{
   22760:	b580      	push	{r7, lr}
   22762:	b082      	sub	sp, #8
   22764:	af00      	add	r7, sp, #0
   22766:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   22768:	687b      	ldr	r3, [r7, #4]
   2276a:	2201      	movs	r2, #1
   2276c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2276e:	687b      	ldr	r3, [r7, #4]
   22770:	2200      	movs	r2, #0
   22772:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   22774:	687b      	ldr	r3, [r7, #4]
   22776:	2200      	movs	r2, #0
   22778:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2277a:	687b      	ldr	r3, [r7, #4]
   2277c:	22c0      	movs	r2, #192	; 0xc0
   2277e:	0392      	lsls	r2, r2, #14
   22780:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   22782:	687b      	ldr	r3, [r7, #4]
   22784:	2200      	movs	r2, #0
   22786:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   22788:	687b      	ldr	r3, [r7, #4]
   2278a:	2200      	movs	r2, #0
   2278c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2278e:	687b      	ldr	r3, [r7, #4]
   22790:	2201      	movs	r2, #1
   22792:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   22794:	687b      	ldr	r3, [r7, #4]
   22796:	2201      	movs	r2, #1
   22798:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2279a:	687b      	ldr	r3, [r7, #4]
   2279c:	2200      	movs	r2, #0
   2279e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   227a0:	687b      	ldr	r3, [r7, #4]
   227a2:	2224      	movs	r2, #36	; 0x24
   227a4:	2100      	movs	r1, #0
   227a6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   227a8:	687b      	ldr	r3, [r7, #4]
   227aa:	3318      	adds	r3, #24
   227ac:	220c      	movs	r2, #12
   227ae:	2100      	movs	r1, #0
   227b0:	0018      	movs	r0, r3
   227b2:	4b0a      	ldr	r3, [pc, #40]	; (227dc <spi_get_config_defaults+0x7c>)
   227b4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   227b6:	687b      	ldr	r3, [r7, #4]
   227b8:	4a09      	ldr	r2, [pc, #36]	; (227e0 <spi_get_config_defaults+0x80>)
   227ba:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   227bc:	687b      	ldr	r3, [r7, #4]
   227be:	2200      	movs	r2, #0
   227c0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   227c2:	687b      	ldr	r3, [r7, #4]
   227c4:	2200      	movs	r2, #0
   227c6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   227c8:	687b      	ldr	r3, [r7, #4]
   227ca:	2200      	movs	r2, #0
   227cc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   227ce:	687b      	ldr	r3, [r7, #4]
   227d0:	2200      	movs	r2, #0
   227d2:	635a      	str	r2, [r3, #52]	; 0x34
};
   227d4:	46c0      	nop			; (mov r8, r8)
   227d6:	46bd      	mov	sp, r7
   227d8:	b002      	add	sp, #8
   227da:	bd80      	pop	{r7, pc}
   227dc:	0003781f 	.word	0x0003781f
   227e0:	000186a0 	.word	0x000186a0

000227e4 <spi_slave_inst_get_config_defaults>:
{
   227e4:	b580      	push	{r7, lr}
   227e6:	b082      	sub	sp, #8
   227e8:	af00      	add	r7, sp, #0
   227ea:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   227ec:	687b      	ldr	r3, [r7, #4]
   227ee:	220a      	movs	r2, #10
   227f0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   227f2:	687b      	ldr	r3, [r7, #4]
   227f4:	2200      	movs	r2, #0
   227f6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   227f8:	687b      	ldr	r3, [r7, #4]
   227fa:	2200      	movs	r2, #0
   227fc:	709a      	strb	r2, [r3, #2]
}
   227fe:	46c0      	nop			; (mov r8, r8)
   22800:	46bd      	mov	sp, r7
   22802:	b002      	add	sp, #8
   22804:	bd80      	pop	{r7, pc}
	...

00022808 <spi_attach_slave>:
{
   22808:	b580      	push	{r7, lr}
   2280a:	b084      	sub	sp, #16
   2280c:	af00      	add	r7, sp, #0
   2280e:	6078      	str	r0, [r7, #4]
   22810:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   22812:	683b      	ldr	r3, [r7, #0]
   22814:	781a      	ldrb	r2, [r3, #0]
   22816:	687b      	ldr	r3, [r7, #4]
   22818:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2281a:	683b      	ldr	r3, [r7, #0]
   2281c:	785a      	ldrb	r2, [r3, #1]
   2281e:	687b      	ldr	r3, [r7, #4]
   22820:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   22822:	683b      	ldr	r3, [r7, #0]
   22824:	789a      	ldrb	r2, [r3, #2]
   22826:	687b      	ldr	r3, [r7, #4]
   22828:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2282a:	230c      	movs	r3, #12
   2282c:	18fb      	adds	r3, r7, r3
   2282e:	0018      	movs	r0, r3
   22830:	4b0b      	ldr	r3, [pc, #44]	; (22860 <spi_attach_slave+0x58>)
   22832:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   22834:	230c      	movs	r3, #12
   22836:	18fb      	adds	r3, r7, r3
   22838:	2201      	movs	r2, #1
   2283a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2283c:	687b      	ldr	r3, [r7, #4]
   2283e:	781b      	ldrb	r3, [r3, #0]
   22840:	220c      	movs	r2, #12
   22842:	18ba      	adds	r2, r7, r2
   22844:	0011      	movs	r1, r2
   22846:	0018      	movs	r0, r3
   22848:	4b06      	ldr	r3, [pc, #24]	; (22864 <spi_attach_slave+0x5c>)
   2284a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   2284c:	687b      	ldr	r3, [r7, #4]
   2284e:	781b      	ldrb	r3, [r3, #0]
   22850:	2101      	movs	r1, #1
   22852:	0018      	movs	r0, r3
   22854:	4b04      	ldr	r3, [pc, #16]	; (22868 <spi_attach_slave+0x60>)
   22856:	4798      	blx	r3
}
   22858:	46c0      	nop			; (mov r8, r8)
   2285a:	46bd      	mov	sp, r7
   2285c:	b004      	add	sp, #16
   2285e:	bd80      	pop	{r7, pc}
   22860:	000226c9 	.word	0x000226c9
   22864:	00028b95 	.word	0x00028b95
   22868:	000226ed 	.word	0x000226ed

0002286c <spi_enable>:
{
   2286c:	b580      	push	{r7, lr}
   2286e:	b084      	sub	sp, #16
   22870:	af00      	add	r7, sp, #0
   22872:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22874:	687b      	ldr	r3, [r7, #4]
   22876:	681b      	ldr	r3, [r3, #0]
   22878:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
   2287a:	46c0      	nop			; (mov r8, r8)
   2287c:	687b      	ldr	r3, [r7, #4]
   2287e:	0018      	movs	r0, r3
   22880:	4b06      	ldr	r3, [pc, #24]	; (2289c <spi_enable+0x30>)
   22882:	4798      	blx	r3
   22884:	1e03      	subs	r3, r0, #0
   22886:	d1f9      	bne.n	2287c <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   22888:	68fb      	ldr	r3, [r7, #12]
   2288a:	681b      	ldr	r3, [r3, #0]
   2288c:	2202      	movs	r2, #2
   2288e:	431a      	orrs	r2, r3
   22890:	68fb      	ldr	r3, [r7, #12]
   22892:	601a      	str	r2, [r3, #0]
}
   22894:	46c0      	nop			; (mov r8, r8)
   22896:	46bd      	mov	sp, r7
   22898:	b004      	add	sp, #16
   2289a:	bd80      	pop	{r7, pc}
   2289c:	00022741 	.word	0x00022741

000228a0 <spi_disable>:
{
   228a0:	b580      	push	{r7, lr}
   228a2:	b084      	sub	sp, #16
   228a4:	af00      	add	r7, sp, #0
   228a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   228a8:	687b      	ldr	r3, [r7, #4]
   228aa:	681b      	ldr	r3, [r3, #0]
   228ac:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
   228ae:	46c0      	nop			; (mov r8, r8)
   228b0:	687b      	ldr	r3, [r7, #4]
   228b2:	0018      	movs	r0, r3
   228b4:	4b0a      	ldr	r3, [pc, #40]	; (228e0 <spi_disable+0x40>)
   228b6:	4798      	blx	r3
   228b8:	1e03      	subs	r3, r0, #0
   228ba:	d1f9      	bne.n	228b0 <spi_disable+0x10>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   228bc:	68fb      	ldr	r3, [r7, #12]
   228be:	228f      	movs	r2, #143	; 0x8f
   228c0:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   228c2:	68fb      	ldr	r3, [r7, #12]
   228c4:	228f      	movs	r2, #143	; 0x8f
   228c6:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   228c8:	68fb      	ldr	r3, [r7, #12]
   228ca:	681b      	ldr	r3, [r3, #0]
   228cc:	2202      	movs	r2, #2
   228ce:	4393      	bics	r3, r2
   228d0:	001a      	movs	r2, r3
   228d2:	68fb      	ldr	r3, [r7, #12]
   228d4:	601a      	str	r2, [r3, #0]
}
   228d6:	46c0      	nop			; (mov r8, r8)
   228d8:	46bd      	mov	sp, r7
   228da:	b004      	add	sp, #16
   228dc:	bd80      	pop	{r7, pc}
   228de:	46c0      	nop			; (mov r8, r8)
   228e0:	00022741 	.word	0x00022741

000228e4 <spi_is_write_complete>:
{
   228e4:	b580      	push	{r7, lr}
   228e6:	b084      	sub	sp, #16
   228e8:	af00      	add	r7, sp, #0
   228ea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   228ec:	687b      	ldr	r3, [r7, #4]
   228ee:	681b      	ldr	r3, [r3, #0]
   228f0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   228f2:	68fb      	ldr	r3, [r7, #12]
   228f4:	7e1b      	ldrb	r3, [r3, #24]
   228f6:	b2db      	uxtb	r3, r3
   228f8:	001a      	movs	r2, r3
   228fa:	2302      	movs	r3, #2
   228fc:	4013      	ands	r3, r2
   228fe:	1e5a      	subs	r2, r3, #1
   22900:	4193      	sbcs	r3, r2
   22902:	b2db      	uxtb	r3, r3
}
   22904:	0018      	movs	r0, r3
   22906:	46bd      	mov	sp, r7
   22908:	b004      	add	sp, #16
   2290a:	bd80      	pop	{r7, pc}

0002290c <spi_is_ready_to_write>:
{
   2290c:	b580      	push	{r7, lr}
   2290e:	b084      	sub	sp, #16
   22910:	af00      	add	r7, sp, #0
   22912:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22914:	687b      	ldr	r3, [r7, #4]
   22916:	681b      	ldr	r3, [r3, #0]
   22918:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2291a:	68fb      	ldr	r3, [r7, #12]
   2291c:	7e1b      	ldrb	r3, [r3, #24]
   2291e:	b2db      	uxtb	r3, r3
   22920:	001a      	movs	r2, r3
   22922:	2301      	movs	r3, #1
   22924:	4013      	ands	r3, r2
   22926:	1e5a      	subs	r2, r3, #1
   22928:	4193      	sbcs	r3, r2
   2292a:	b2db      	uxtb	r3, r3
}
   2292c:	0018      	movs	r0, r3
   2292e:	46bd      	mov	sp, r7
   22930:	b004      	add	sp, #16
   22932:	bd80      	pop	{r7, pc}

00022934 <spi_is_ready_to_read>:
{
   22934:	b580      	push	{r7, lr}
   22936:	b084      	sub	sp, #16
   22938:	af00      	add	r7, sp, #0
   2293a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2293c:	687b      	ldr	r3, [r7, #4]
   2293e:	681b      	ldr	r3, [r3, #0]
   22940:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   22942:	68fb      	ldr	r3, [r7, #12]
   22944:	7e1b      	ldrb	r3, [r3, #24]
   22946:	b2db      	uxtb	r3, r3
   22948:	001a      	movs	r2, r3
   2294a:	2304      	movs	r3, #4
   2294c:	4013      	ands	r3, r2
   2294e:	1e5a      	subs	r2, r3, #1
   22950:	4193      	sbcs	r3, r2
   22952:	b2db      	uxtb	r3, r3
}
   22954:	0018      	movs	r0, r3
   22956:	46bd      	mov	sp, r7
   22958:	b004      	add	sp, #16
   2295a:	bd80      	pop	{r7, pc}

0002295c <spi_write>:
{
   2295c:	b580      	push	{r7, lr}
   2295e:	b084      	sub	sp, #16
   22960:	af00      	add	r7, sp, #0
   22962:	6078      	str	r0, [r7, #4]
   22964:	000a      	movs	r2, r1
   22966:	1cbb      	adds	r3, r7, #2
   22968:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2296a:	687b      	ldr	r3, [r7, #4]
   2296c:	681b      	ldr	r3, [r3, #0]
   2296e:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   22970:	687b      	ldr	r3, [r7, #4]
   22972:	0018      	movs	r0, r3
   22974:	4b0a      	ldr	r3, [pc, #40]	; (229a0 <spi_write+0x44>)
   22976:	4798      	blx	r3
   22978:	0003      	movs	r3, r0
   2297a:	001a      	movs	r2, r3
   2297c:	2301      	movs	r3, #1
   2297e:	4053      	eors	r3, r2
   22980:	b2db      	uxtb	r3, r3
   22982:	2b00      	cmp	r3, #0
   22984:	d001      	beq.n	2298a <spi_write+0x2e>
		return STATUS_BUSY;
   22986:	2305      	movs	r3, #5
   22988:	e006      	b.n	22998 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2298a:	1cbb      	adds	r3, r7, #2
   2298c:	881b      	ldrh	r3, [r3, #0]
   2298e:	05db      	lsls	r3, r3, #23
   22990:	0dda      	lsrs	r2, r3, #23
   22992:	68fb      	ldr	r3, [r7, #12]
   22994:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   22996:	2300      	movs	r3, #0
}
   22998:	0018      	movs	r0, r3
   2299a:	46bd      	mov	sp, r7
   2299c:	b004      	add	sp, #16
   2299e:	bd80      	pop	{r7, pc}
   229a0:	0002290d 	.word	0x0002290d

000229a4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   229a4:	b580      	push	{r7, lr}
   229a6:	b084      	sub	sp, #16
   229a8:	af00      	add	r7, sp, #0
   229aa:	6078      	str	r0, [r7, #4]
   229ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   229ae:	687b      	ldr	r3, [r7, #4]
   229b0:	681b      	ldr	r3, [r3, #0]
   229b2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   229b4:	687b      	ldr	r3, [r7, #4]
   229b6:	0018      	movs	r0, r3
   229b8:	4b1b      	ldr	r3, [pc, #108]	; (22a28 <spi_read+0x84>)
   229ba:	4798      	blx	r3
   229bc:	0003      	movs	r3, r0
   229be:	001a      	movs	r2, r3
   229c0:	2301      	movs	r3, #1
   229c2:	4053      	eors	r3, r2
   229c4:	b2db      	uxtb	r3, r3
   229c6:	2b00      	cmp	r3, #0
   229c8:	d001      	beq.n	229ce <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   229ca:	2310      	movs	r3, #16
   229cc:	e027      	b.n	22a1e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   229ce:	230f      	movs	r3, #15
   229d0:	18fb      	adds	r3, r7, r3
   229d2:	2200      	movs	r2, #0
   229d4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   229d6:	68bb      	ldr	r3, [r7, #8]
   229d8:	8b5b      	ldrh	r3, [r3, #26]
   229da:	b29b      	uxth	r3, r3
   229dc:	001a      	movs	r2, r3
   229de:	2304      	movs	r3, #4
   229e0:	4013      	ands	r3, r2
   229e2:	d006      	beq.n	229f2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   229e4:	230f      	movs	r3, #15
   229e6:	18fb      	adds	r3, r7, r3
   229e8:	221e      	movs	r2, #30
   229ea:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   229ec:	68bb      	ldr	r3, [r7, #8]
   229ee:	2204      	movs	r2, #4
   229f0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   229f2:	687b      	ldr	r3, [r7, #4]
   229f4:	799b      	ldrb	r3, [r3, #6]
   229f6:	2b01      	cmp	r3, #1
   229f8:	d108      	bne.n	22a0c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   229fa:	68bb      	ldr	r3, [r7, #8]
   229fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   229fe:	b29b      	uxth	r3, r3
   22a00:	05db      	lsls	r3, r3, #23
   22a02:	0ddb      	lsrs	r3, r3, #23
   22a04:	b29a      	uxth	r2, r3
   22a06:	683b      	ldr	r3, [r7, #0]
   22a08:	801a      	strh	r2, [r3, #0]
   22a0a:	e005      	b.n	22a18 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   22a0c:	68bb      	ldr	r3, [r7, #8]
   22a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22a10:	b2db      	uxtb	r3, r3
   22a12:	b29a      	uxth	r2, r3
   22a14:	683b      	ldr	r3, [r7, #0]
   22a16:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   22a18:	230f      	movs	r3, #15
   22a1a:	18fb      	adds	r3, r7, r3
   22a1c:	781b      	ldrb	r3, [r3, #0]
}
   22a1e:	0018      	movs	r0, r3
   22a20:	46bd      	mov	sp, r7
   22a22:	b004      	add	sp, #16
   22a24:	bd80      	pop	{r7, pc}
   22a26:	46c0      	nop			; (mov r8, r8)
   22a28:	00022935 	.word	0x00022935

00022a2c <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   22a2c:	b580      	push	{r7, lr}
   22a2e:	b086      	sub	sp, #24
   22a30:	af00      	add	r7, sp, #0
   22a32:	60f8      	str	r0, [r7, #12]
   22a34:	60b9      	str	r1, [r7, #8]
   22a36:	1dbb      	adds	r3, r7, #6
   22a38:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   22a3a:	2313      	movs	r3, #19
   22a3c:	18fb      	adds	r3, r7, r3
   22a3e:	22ff      	movs	r2, #255	; 0xff
   22a40:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   22a42:	2317      	movs	r3, #23
   22a44:	18fb      	adds	r3, r7, r3
   22a46:	2200      	movs	r2, #0
   22a48:	701a      	strb	r2, [r3, #0]
   22a4a:	2316      	movs	r3, #22
   22a4c:	18fb      	adds	r3, r7, r3
   22a4e:	2200      	movs	r2, #0
   22a50:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   22a52:	2314      	movs	r3, #20
   22a54:	18fb      	adds	r3, r7, r3
   22a56:	2200      	movs	r2, #0
   22a58:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   22a5a:	2310      	movs	r3, #16
   22a5c:	18fb      	adds	r3, r7, r3
   22a5e:	2200      	movs	r2, #0
   22a60:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   22a62:	68bb      	ldr	r3, [r7, #8]
   22a64:	2b00      	cmp	r3, #0
   22a66:	d102      	bne.n	22a6e <spi_rw+0x42>
   22a68:	68fb      	ldr	r3, [r7, #12]
   22a6a:	2b00      	cmp	r3, #0
   22a6c:	d003      	beq.n	22a76 <spi_rw+0x4a>
   22a6e:	1dbb      	adds	r3, r7, #6
   22a70:	881b      	ldrh	r3, [r3, #0]
   22a72:	2b00      	cmp	r3, #0
   22a74:	d102      	bne.n	22a7c <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   22a76:	230f      	movs	r3, #15
   22a78:	425b      	negs	r3, r3
   22a7a:	e07e      	b.n	22b7a <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   22a7c:	68fb      	ldr	r3, [r7, #12]
   22a7e:	2b00      	cmp	r3, #0
   22a80:	d106      	bne.n	22a90 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   22a82:	2313      	movs	r3, #19
   22a84:	18fb      	adds	r3, r7, r3
   22a86:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   22a88:	2317      	movs	r3, #23
   22a8a:	18fb      	adds	r3, r7, r3
   22a8c:	2201      	movs	r2, #1
   22a8e:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   22a90:	68bb      	ldr	r3, [r7, #8]
   22a92:	2b00      	cmp	r3, #0
   22a94:	d106      	bne.n	22aa4 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   22a96:	2313      	movs	r3, #19
   22a98:	18fb      	adds	r3, r7, r3
   22a9a:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   22a9c:	2316      	movs	r3, #22
   22a9e:	18fb      	adds	r3, r7, r3
   22aa0:	2201      	movs	r2, #1
   22aa2:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   22aa4:	4937      	ldr	r1, [pc, #220]	; (22b84 <spi_rw+0x158>)
   22aa6:	4b38      	ldr	r3, [pc, #224]	; (22b88 <spi_rw+0x15c>)
   22aa8:	2201      	movs	r2, #1
   22aaa:	0018      	movs	r0, r3
   22aac:	4b37      	ldr	r3, [pc, #220]	; (22b8c <spi_rw+0x160>)
   22aae:	4798      	blx	r3

	while (u16Sz) {
   22ab0:	e04c      	b.n	22b4c <spi_rw+0x120>
		txd_data = *pu8Mosi;
   22ab2:	68fb      	ldr	r3, [r7, #12]
   22ab4:	781a      	ldrb	r2, [r3, #0]
   22ab6:	2314      	movs	r3, #20
   22ab8:	18fb      	adds	r3, r7, r3
   22aba:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   22abc:	46c0      	nop			; (mov r8, r8)
   22abe:	4b32      	ldr	r3, [pc, #200]	; (22b88 <spi_rw+0x15c>)
   22ac0:	0018      	movs	r0, r3
   22ac2:	4b33      	ldr	r3, [pc, #204]	; (22b90 <spi_rw+0x164>)
   22ac4:	4798      	blx	r3
   22ac6:	0003      	movs	r3, r0
   22ac8:	001a      	movs	r2, r3
   22aca:	2301      	movs	r3, #1
   22acc:	4053      	eors	r3, r2
   22ace:	b2db      	uxtb	r3, r3
   22ad0:	2b00      	cmp	r3, #0
   22ad2:	d1f4      	bne.n	22abe <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   22ad4:	46c0      	nop			; (mov r8, r8)
   22ad6:	2314      	movs	r3, #20
   22ad8:	18fb      	adds	r3, r7, r3
   22ada:	881a      	ldrh	r2, [r3, #0]
   22adc:	4b2a      	ldr	r3, [pc, #168]	; (22b88 <spi_rw+0x15c>)
   22ade:	0011      	movs	r1, r2
   22ae0:	0018      	movs	r0, r3
   22ae2:	4b2c      	ldr	r3, [pc, #176]	; (22b94 <spi_rw+0x168>)
   22ae4:	4798      	blx	r3
   22ae6:	1e03      	subs	r3, r0, #0
   22ae8:	d1f5      	bne.n	22ad6 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   22aea:	46c0      	nop			; (mov r8, r8)
   22aec:	4b26      	ldr	r3, [pc, #152]	; (22b88 <spi_rw+0x15c>)
   22aee:	0018      	movs	r0, r3
   22af0:	4b29      	ldr	r3, [pc, #164]	; (22b98 <spi_rw+0x16c>)
   22af2:	4798      	blx	r3
   22af4:	0003      	movs	r3, r0
   22af6:	001a      	movs	r2, r3
   22af8:	2301      	movs	r3, #1
   22afa:	4053      	eors	r3, r2
   22afc:	b2db      	uxtb	r3, r3
   22afe:	2b00      	cmp	r3, #0
   22b00:	d1f4      	bne.n	22aec <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   22b02:	46c0      	nop			; (mov r8, r8)
   22b04:	2310      	movs	r3, #16
   22b06:	18fa      	adds	r2, r7, r3
   22b08:	4b1f      	ldr	r3, [pc, #124]	; (22b88 <spi_rw+0x15c>)
   22b0a:	0011      	movs	r1, r2
   22b0c:	0018      	movs	r0, r3
   22b0e:	4b23      	ldr	r3, [pc, #140]	; (22b9c <spi_rw+0x170>)
   22b10:	4798      	blx	r3
   22b12:	1e03      	subs	r3, r0, #0
   22b14:	d1f6      	bne.n	22b04 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   22b16:	2310      	movs	r3, #16
   22b18:	18fb      	adds	r3, r7, r3
   22b1a:	881b      	ldrh	r3, [r3, #0]
   22b1c:	b2da      	uxtb	r2, r3
   22b1e:	68bb      	ldr	r3, [r7, #8]
   22b20:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   22b22:	1dbb      	adds	r3, r7, #6
   22b24:	881a      	ldrh	r2, [r3, #0]
   22b26:	1dbb      	adds	r3, r7, #6
   22b28:	3a01      	subs	r2, #1
   22b2a:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   22b2c:	2316      	movs	r3, #22
   22b2e:	18fb      	adds	r3, r7, r3
   22b30:	781b      	ldrb	r3, [r3, #0]
   22b32:	2b00      	cmp	r3, #0
   22b34:	d102      	bne.n	22b3c <spi_rw+0x110>
			pu8Miso++;
   22b36:	68bb      	ldr	r3, [r7, #8]
   22b38:	3301      	adds	r3, #1
   22b3a:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   22b3c:	2317      	movs	r3, #23
   22b3e:	18fb      	adds	r3, r7, r3
   22b40:	781b      	ldrb	r3, [r3, #0]
   22b42:	2b00      	cmp	r3, #0
   22b44:	d102      	bne.n	22b4c <spi_rw+0x120>
			pu8Mosi++;
   22b46:	68fb      	ldr	r3, [r7, #12]
   22b48:	3301      	adds	r3, #1
   22b4a:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   22b4c:	1dbb      	adds	r3, r7, #6
   22b4e:	881b      	ldrh	r3, [r3, #0]
   22b50:	2b00      	cmp	r3, #0
   22b52:	d1ae      	bne.n	22ab2 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   22b54:	46c0      	nop			; (mov r8, r8)
   22b56:	4b0c      	ldr	r3, [pc, #48]	; (22b88 <spi_rw+0x15c>)
   22b58:	0018      	movs	r0, r3
   22b5a:	4b11      	ldr	r3, [pc, #68]	; (22ba0 <spi_rw+0x174>)
   22b5c:	4798      	blx	r3
   22b5e:	0003      	movs	r3, r0
   22b60:	001a      	movs	r2, r3
   22b62:	2301      	movs	r3, #1
   22b64:	4053      	eors	r3, r2
   22b66:	b2db      	uxtb	r3, r3
   22b68:	2b00      	cmp	r3, #0
   22b6a:	d1f4      	bne.n	22b56 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   22b6c:	4905      	ldr	r1, [pc, #20]	; (22b84 <spi_rw+0x158>)
   22b6e:	4b06      	ldr	r3, [pc, #24]	; (22b88 <spi_rw+0x15c>)
   22b70:	2200      	movs	r2, #0
   22b72:	0018      	movs	r0, r3
   22b74:	4b05      	ldr	r3, [pc, #20]	; (22b8c <spi_rw+0x160>)
   22b76:	4798      	blx	r3

	return M2M_SUCCESS;
   22b78:	2300      	movs	r3, #0
}
   22b7a:	0018      	movs	r0, r3
   22b7c:	46bd      	mov	sp, r7
   22b7e:	b006      	add	sp, #24
   22b80:	bd80      	pop	{r7, pc}
   22b82:	46c0      	nop			; (mov r8, r8)
   22b84:	20005920 	.word	0x20005920
   22b88:	20005924 	.word	0x20005924
   22b8c:	0002a545 	.word	0x0002a545
   22b90:	0002290d 	.word	0x0002290d
   22b94:	0002295d 	.word	0x0002295d
   22b98:	00022935 	.word	0x00022935
   22b9c:	000229a5 	.word	0x000229a5
   22ba0:	000228e5 	.word	0x000228e5

00022ba4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   22ba4:	b580      	push	{r7, lr}
   22ba6:	b092      	sub	sp, #72	; 0x48
   22ba8:	af00      	add	r7, sp, #0
   22baa:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   22bac:	2347      	movs	r3, #71	; 0x47
   22bae:	18fb      	adds	r3, r7, r3
   22bb0:	2200      	movs	r2, #0
   22bb2:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   22bb4:	2308      	movs	r3, #8
   22bb6:	18fb      	adds	r3, r7, r3
   22bb8:	0018      	movs	r0, r3
   22bba:	4b26      	ldr	r3, [pc, #152]	; (22c54 <nm_bus_init+0xb0>)
   22bbc:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   22bbe:	2308      	movs	r3, #8
   22bc0:	18fb      	adds	r3, r7, r3
   22bc2:	220e      	movs	r2, #14
   22bc4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   22bc6:	2308      	movs	r3, #8
   22bc8:	18fa      	adds	r2, r7, r3
   22bca:	4b23      	ldr	r3, [pc, #140]	; (22c58 <nm_bus_init+0xb4>)
   22bcc:	0011      	movs	r1, r2
   22bce:	0018      	movs	r0, r3
   22bd0:	4b22      	ldr	r3, [pc, #136]	; (22c5c <nm_bus_init+0xb8>)
   22bd2:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   22bd4:	230c      	movs	r3, #12
   22bd6:	18fb      	adds	r3, r7, r3
   22bd8:	0018      	movs	r0, r3
   22bda:	4b21      	ldr	r3, [pc, #132]	; (22c60 <nm_bus_init+0xbc>)
   22bdc:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   22bde:	230c      	movs	r3, #12
   22be0:	18fb      	adds	r3, r7, r3
   22be2:	22c0      	movs	r2, #192	; 0xc0
   22be4:	0392      	lsls	r2, r2, #14
   22be6:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   22be8:	230c      	movs	r3, #12
   22bea:	18fb      	adds	r3, r7, r3
   22bec:	4a1d      	ldr	r2, [pc, #116]	; (22c64 <nm_bus_init+0xc0>)
   22bee:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   22bf0:	230c      	movs	r3, #12
   22bf2:	18fb      	adds	r3, r7, r3
   22bf4:	4a1c      	ldr	r2, [pc, #112]	; (22c68 <nm_bus_init+0xc4>)
   22bf6:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   22bf8:	230c      	movs	r3, #12
   22bfa:	18fb      	adds	r3, r7, r3
   22bfc:	2201      	movs	r2, #1
   22bfe:	4252      	negs	r2, r2
   22c00:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   22c02:	230c      	movs	r3, #12
   22c04:	18fb      	adds	r3, r7, r3
   22c06:	4a19      	ldr	r2, [pc, #100]	; (22c6c <nm_bus_init+0xc8>)
   22c08:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   22c0a:	230c      	movs	r3, #12
   22c0c:	18fb      	adds	r3, r7, r3
   22c0e:	2200      	movs	r2, #0
   22c10:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   22c12:	230c      	movs	r3, #12
   22c14:	18fb      	adds	r3, r7, r3
   22c16:	4a16      	ldr	r2, [pc, #88]	; (22c70 <nm_bus_init+0xcc>)
   22c18:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   22c1a:	230c      	movs	r3, #12
   22c1c:	18fa      	adds	r2, r7, r3
   22c1e:	4915      	ldr	r1, [pc, #84]	; (22c74 <nm_bus_init+0xd0>)
   22c20:	4b15      	ldr	r3, [pc, #84]	; (22c78 <nm_bus_init+0xd4>)
   22c22:	0018      	movs	r0, r3
   22c24:	4b15      	ldr	r3, [pc, #84]	; (22c7c <nm_bus_init+0xd8>)
   22c26:	4798      	blx	r3
   22c28:	1e03      	subs	r3, r0, #0
   22c2a:	d002      	beq.n	22c32 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   22c2c:	2306      	movs	r3, #6
   22c2e:	425b      	negs	r3, r3
   22c30:	e00c      	b.n	22c4c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   22c32:	4b11      	ldr	r3, [pc, #68]	; (22c78 <nm_bus_init+0xd4>)
   22c34:	0018      	movs	r0, r3
   22c36:	4b12      	ldr	r3, [pc, #72]	; (22c80 <nm_bus_init+0xdc>)
   22c38:	4798      	blx	r3

	nm_bsp_reset();
   22c3a:	4b12      	ldr	r3, [pc, #72]	; (22c84 <nm_bus_init+0xe0>)
   22c3c:	4798      	blx	r3
	nm_bsp_sleep(1);
   22c3e:	2001      	movs	r0, #1
   22c40:	4b11      	ldr	r3, [pc, #68]	; (22c88 <nm_bus_init+0xe4>)
   22c42:	4798      	blx	r3
#endif
	return result;
   22c44:	2347      	movs	r3, #71	; 0x47
   22c46:	18fb      	adds	r3, r7, r3
   22c48:	781b      	ldrb	r3, [r3, #0]
   22c4a:	b25b      	sxtb	r3, r3
}
   22c4c:	0018      	movs	r0, r3
   22c4e:	46bd      	mov	sp, r7
   22c50:	b012      	add	sp, #72	; 0x48
   22c52:	bd80      	pop	{r7, pc}
   22c54:	000227e5 	.word	0x000227e5
   22c58:	20005920 	.word	0x20005920
   22c5c:	00022809 	.word	0x00022809
   22c60:	00022761 	.word	0x00022761
   22c64:	000c0002 	.word	0x000c0002
   22c68:	000d0002 	.word	0x000d0002
   22c6c:	000f0002 	.word	0x000f0002
   22c70:	00124f80 	.word	0x00124f80
   22c74:	42001000 	.word	0x42001000
   22c78:	20005924 	.word	0x20005924
   22c7c:	0002a291 	.word	0x0002a291
   22c80:	0002286d 	.word	0x0002286d
   22c84:	00022539 	.word	0x00022539
   22c88:	00022579 	.word	0x00022579

00022c8c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   22c8c:	b590      	push	{r4, r7, lr}
   22c8e:	b085      	sub	sp, #20
   22c90:	af00      	add	r7, sp, #0
   22c92:	0002      	movs	r2, r0
   22c94:	6039      	str	r1, [r7, #0]
   22c96:	1dfb      	adds	r3, r7, #7
   22c98:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   22c9a:	230f      	movs	r3, #15
   22c9c:	18fb      	adds	r3, r7, r3
   22c9e:	2200      	movs	r2, #0
   22ca0:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   22ca2:	1dfb      	adds	r3, r7, #7
   22ca4:	781b      	ldrb	r3, [r3, #0]
   22ca6:	2b03      	cmp	r3, #3
   22ca8:	d10f      	bne.n	22cca <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   22caa:	683b      	ldr	r3, [r7, #0]
   22cac:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   22cae:	68bb      	ldr	r3, [r7, #8]
   22cb0:	6818      	ldr	r0, [r3, #0]
   22cb2:	68bb      	ldr	r3, [r7, #8]
   22cb4:	6859      	ldr	r1, [r3, #4]
   22cb6:	68bb      	ldr	r3, [r7, #8]
   22cb8:	891b      	ldrh	r3, [r3, #8]
   22cba:	220f      	movs	r2, #15
   22cbc:	18bc      	adds	r4, r7, r2
   22cbe:	001a      	movs	r2, r3
   22cc0:	4b10      	ldr	r3, [pc, #64]	; (22d04 <nm_bus_ioctl+0x78>)
   22cc2:	4798      	blx	r3
   22cc4:	0003      	movs	r3, r0
   22cc6:	7023      	strb	r3, [r4, #0]
		}
		break;
   22cc8:	e013      	b.n	22cf2 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   22cca:	230f      	movs	r3, #15
   22ccc:	18fb      	adds	r3, r7, r3
   22cce:	22ff      	movs	r2, #255	; 0xff
   22cd0:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   22cd2:	2383      	movs	r3, #131	; 0x83
   22cd4:	005a      	lsls	r2, r3, #1
   22cd6:	490c      	ldr	r1, [pc, #48]	; (22d08 <nm_bus_ioctl+0x7c>)
   22cd8:	4b0c      	ldr	r3, [pc, #48]	; (22d0c <nm_bus_ioctl+0x80>)
   22cda:	0018      	movs	r0, r3
   22cdc:	4b0c      	ldr	r3, [pc, #48]	; (22d10 <nm_bus_ioctl+0x84>)
   22cde:	4798      	blx	r3
   22ce0:	4b0c      	ldr	r3, [pc, #48]	; (22d14 <nm_bus_ioctl+0x88>)
   22ce2:	0018      	movs	r0, r3
   22ce4:	4b0a      	ldr	r3, [pc, #40]	; (22d10 <nm_bus_ioctl+0x84>)
   22ce6:	4798      	blx	r3
   22ce8:	4b0b      	ldr	r3, [pc, #44]	; (22d18 <nm_bus_ioctl+0x8c>)
   22cea:	0018      	movs	r0, r3
   22cec:	4b08      	ldr	r3, [pc, #32]	; (22d10 <nm_bus_ioctl+0x84>)
   22cee:	4798      	blx	r3
			break;
   22cf0:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   22cf2:	230f      	movs	r3, #15
   22cf4:	18fb      	adds	r3, r7, r3
   22cf6:	781b      	ldrb	r3, [r3, #0]
   22cf8:	b25b      	sxtb	r3, r3
}
   22cfa:	0018      	movs	r0, r3
   22cfc:	46bd      	mov	sp, r7
   22cfe:	b005      	add	sp, #20
   22d00:	bd90      	pop	{r4, r7, pc}
   22d02:	46c0      	nop			; (mov r8, r8)
   22d04:	00022a2d 	.word	0x00022a2d
   22d08:	0003b418 	.word	0x0003b418
   22d0c:	0003b3ec 	.word	0x0003b3ec
   22d10:	00020109 	.word	0x00020109
   22d14:	0003b400 	.word	0x0003b400
   22d18:	0003b414 	.word	0x0003b414

00022d1c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   22d1c:	b580      	push	{r7, lr}
   22d1e:	b082      	sub	sp, #8
   22d20:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   22d22:	1dfb      	adds	r3, r7, #7
   22d24:	2200      	movs	r2, #0
   22d26:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   22d28:	1d3b      	adds	r3, r7, #4
   22d2a:	0018      	movs	r0, r3
   22d2c:	4b13      	ldr	r3, [pc, #76]	; (22d7c <nm_bus_deinit+0x60>)
   22d2e:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   22d30:	1d3b      	adds	r3, r7, #4
   22d32:	2200      	movs	r2, #0
   22d34:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   22d36:	1d3b      	adds	r3, r7, #4
   22d38:	2200      	movs	r2, #0
   22d3a:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   22d3c:	4b10      	ldr	r3, [pc, #64]	; (22d80 <nm_bus_deinit+0x64>)
   22d3e:	0018      	movs	r0, r3
   22d40:	4b10      	ldr	r3, [pc, #64]	; (22d84 <nm_bus_deinit+0x68>)
   22d42:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   22d44:	1d3b      	adds	r3, r7, #4
   22d46:	0019      	movs	r1, r3
   22d48:	200c      	movs	r0, #12
   22d4a:	4b0f      	ldr	r3, [pc, #60]	; (22d88 <nm_bus_deinit+0x6c>)
   22d4c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   22d4e:	1d3b      	adds	r3, r7, #4
   22d50:	0019      	movs	r1, r3
   22d52:	200f      	movs	r0, #15
   22d54:	4b0c      	ldr	r3, [pc, #48]	; (22d88 <nm_bus_deinit+0x6c>)
   22d56:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   22d58:	1d3b      	adds	r3, r7, #4
   22d5a:	0019      	movs	r1, r3
   22d5c:	200d      	movs	r0, #13
   22d5e:	4b0a      	ldr	r3, [pc, #40]	; (22d88 <nm_bus_deinit+0x6c>)
   22d60:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   22d62:	1d3b      	adds	r3, r7, #4
   22d64:	0019      	movs	r1, r3
   22d66:	200e      	movs	r0, #14
   22d68:	4b07      	ldr	r3, [pc, #28]	; (22d88 <nm_bus_deinit+0x6c>)
   22d6a:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   22d6c:	1dfb      	adds	r3, r7, #7
   22d6e:	781b      	ldrb	r3, [r3, #0]
   22d70:	b25b      	sxtb	r3, r3
}
   22d72:	0018      	movs	r0, r3
   22d74:	46bd      	mov	sp, r7
   22d76:	b002      	add	sp, #8
   22d78:	bd80      	pop	{r7, pc}
   22d7a:	46c0      	nop			; (mov r8, r8)
   22d7c:	000226c9 	.word	0x000226c9
   22d80:	20005924 	.word	0x20005924
   22d84:	000228a1 	.word	0x000228a1
   22d88:	00028b95 	.word	0x00028b95

00022d8c <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   22d8c:	b580      	push	{r7, lr}
   22d8e:	b084      	sub	sp, #16
   22d90:	af00      	add	r7, sp, #0
   22d92:	60f8      	str	r0, [r7, #12]
   22d94:	60b9      	str	r1, [r7, #8]
   22d96:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   22d98:	687b      	ldr	r3, [r7, #4]
   22d9a:	2b00      	cmp	r3, #0
   22d9c:	d010      	beq.n	22dc0 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   22d9e:	68bb      	ldr	r3, [r7, #8]
   22da0:	781a      	ldrb	r2, [r3, #0]
   22da2:	68fb      	ldr	r3, [r7, #12]
   22da4:	701a      	strb	r2, [r3, #0]
		pDst++;
   22da6:	68fb      	ldr	r3, [r7, #12]
   22da8:	3301      	adds	r3, #1
   22daa:	60fb      	str	r3, [r7, #12]
		pSrc++;
   22dac:	68bb      	ldr	r3, [r7, #8]
   22dae:	3301      	adds	r3, #1
   22db0:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   22db2:	687b      	ldr	r3, [r7, #4]
   22db4:	3b01      	subs	r3, #1
   22db6:	607b      	str	r3, [r7, #4]
   22db8:	687b      	ldr	r3, [r7, #4]
   22dba:	2b00      	cmp	r3, #0
   22dbc:	d1ef      	bne.n	22d9e <m2m_memcpy+0x12>
   22dbe:	e000      	b.n	22dc2 <m2m_memcpy+0x36>
	if(sz == 0) return;
   22dc0:	46c0      	nop			; (mov r8, r8)
}
   22dc2:	46bd      	mov	sp, r7
   22dc4:	b004      	add	sp, #16
   22dc6:	bd80      	pop	{r7, pc}

00022dc8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   22dc8:	b580      	push	{r7, lr}
   22dca:	b084      	sub	sp, #16
   22dcc:	af00      	add	r7, sp, #0
   22dce:	60f8      	str	r0, [r7, #12]
   22dd0:	607a      	str	r2, [r7, #4]
   22dd2:	230b      	movs	r3, #11
   22dd4:	18fb      	adds	r3, r7, r3
   22dd6:	1c0a      	adds	r2, r1, #0
   22dd8:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   22dda:	687b      	ldr	r3, [r7, #4]
   22ddc:	2b00      	cmp	r3, #0
   22dde:	d00e      	beq.n	22dfe <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   22de0:	68fb      	ldr	r3, [r7, #12]
   22de2:	220b      	movs	r2, #11
   22de4:	18ba      	adds	r2, r7, r2
   22de6:	7812      	ldrb	r2, [r2, #0]
   22de8:	701a      	strb	r2, [r3, #0]
		pBuf++;
   22dea:	68fb      	ldr	r3, [r7, #12]
   22dec:	3301      	adds	r3, #1
   22dee:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   22df0:	687b      	ldr	r3, [r7, #4]
   22df2:	3b01      	subs	r3, #1
   22df4:	607b      	str	r3, [r7, #4]
   22df6:	687b      	ldr	r3, [r7, #4]
   22df8:	2b00      	cmp	r3, #0
   22dfa:	d1f1      	bne.n	22de0 <m2m_memset+0x18>
   22dfc:	e000      	b.n	22e00 <m2m_memset+0x38>
	if(sz == 0) return;
   22dfe:	46c0      	nop			; (mov r8, r8)
}
   22e00:	46bd      	mov	sp, r7
   22e02:	b004      	add	sp, #16
   22e04:	bd80      	pop	{r7, pc}

00022e06 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   22e06:	b580      	push	{r7, lr}
   22e08:	b084      	sub	sp, #16
   22e0a:	af00      	add	r7, sp, #0
   22e0c:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   22e0e:	230e      	movs	r3, #14
   22e10:	18fb      	adds	r3, r7, r3
   22e12:	2200      	movs	r2, #0
   22e14:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   22e16:	e009      	b.n	22e2c <m2m_strlen+0x26>
	{
		u16StrLen ++;
   22e18:	230e      	movs	r3, #14
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	881a      	ldrh	r2, [r3, #0]
   22e1e:	230e      	movs	r3, #14
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	3201      	adds	r2, #1
   22e24:	801a      	strh	r2, [r3, #0]
		pcStr++;
   22e26:	687b      	ldr	r3, [r7, #4]
   22e28:	3301      	adds	r3, #1
   22e2a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   22e2c:	687b      	ldr	r3, [r7, #4]
   22e2e:	781b      	ldrb	r3, [r3, #0]
   22e30:	2b00      	cmp	r3, #0
   22e32:	d1f1      	bne.n	22e18 <m2m_strlen+0x12>
	}
	return u16StrLen;
   22e34:	230e      	movs	r3, #14
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	881b      	ldrh	r3, [r3, #0]
}
   22e3a:	0018      	movs	r0, r3
   22e3c:	46bd      	mov	sp, r7
   22e3e:	b004      	add	sp, #16
   22e40:	bd80      	pop	{r7, pc}
	...

00022e44 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   22e44:	b580      	push	{r7, lr}
   22e46:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   22e48:	4b04      	ldr	r3, [pc, #16]	; (22e5c <isr+0x18>)
   22e4a:	78db      	ldrb	r3, [r3, #3]
   22e4c:	b2db      	uxtb	r3, r3
   22e4e:	3301      	adds	r3, #1
   22e50:	b2da      	uxtb	r2, r3
   22e52:	4b02      	ldr	r3, [pc, #8]	; (22e5c <isr+0x18>)
   22e54:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   22e56:	46c0      	nop			; (mov r8, r8)
   22e58:	46bd      	mov	sp, r7
   22e5a:	bd80      	pop	{r7, pc}
   22e5c:	20005930 	.word	0x20005930

00022e60 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   22e60:	b590      	push	{r4, r7, lr}
   22e62:	b083      	sub	sp, #12
   22e64:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   22e66:	1dfb      	adds	r3, r7, #7
   22e68:	2200      	movs	r2, #0
   22e6a:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   22e6c:	4b14      	ldr	r3, [pc, #80]	; (22ec0 <hif_set_rx_done+0x60>)
   22e6e:	2200      	movs	r2, #0
   22e70:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   22e72:	2001      	movs	r0, #1
   22e74:	4b13      	ldr	r3, [pc, #76]	; (22ec4 <hif_set_rx_done+0x64>)
   22e76:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   22e78:	1dfc      	adds	r4, r7, #7
   22e7a:	003b      	movs	r3, r7
   22e7c:	4a12      	ldr	r2, [pc, #72]	; (22ec8 <hif_set_rx_done+0x68>)
   22e7e:	0019      	movs	r1, r3
   22e80:	0010      	movs	r0, r2
   22e82:	4b12      	ldr	r3, [pc, #72]	; (22ecc <hif_set_rx_done+0x6c>)
   22e84:	4798      	blx	r3
   22e86:	0003      	movs	r3, r0
   22e88:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22e8a:	1dfb      	adds	r3, r7, #7
   22e8c:	781b      	ldrb	r3, [r3, #0]
   22e8e:	b25b      	sxtb	r3, r3
   22e90:	2b00      	cmp	r3, #0
   22e92:	d10d      	bne.n	22eb0 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   22e94:	683b      	ldr	r3, [r7, #0]
   22e96:	2202      	movs	r2, #2
   22e98:	4313      	orrs	r3, r2
   22e9a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   22e9c:	683b      	ldr	r3, [r7, #0]
   22e9e:	1dfc      	adds	r4, r7, #7
   22ea0:	4a09      	ldr	r2, [pc, #36]	; (22ec8 <hif_set_rx_done+0x68>)
   22ea2:	0019      	movs	r1, r3
   22ea4:	0010      	movs	r0, r2
   22ea6:	4b0a      	ldr	r3, [pc, #40]	; (22ed0 <hif_set_rx_done+0x70>)
   22ea8:	4798      	blx	r3
   22eaa:	0003      	movs	r3, r0
   22eac:	7023      	strb	r3, [r4, #0]
   22eae:	e000      	b.n	22eb2 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   22eb0:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   22eb2:	1dfb      	adds	r3, r7, #7
   22eb4:	781b      	ldrb	r3, [r3, #0]
   22eb6:	b25b      	sxtb	r3, r3

}
   22eb8:	0018      	movs	r0, r3
   22eba:	46bd      	mov	sp, r7
   22ebc:	b003      	add	sp, #12
   22ebe:	bd90      	pop	{r4, r7, pc}
   22ec0:	20005930 	.word	0x20005930
   22ec4:	0002260d 	.word	0x0002260d
   22ec8:	00001070 	.word	0x00001070
   22ecc:	00024e59 	.word	0x00024e59
   22ed0:	00024e7d 	.word	0x00024e7d

00022ed4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22ed4:	b580      	push	{r7, lr}
   22ed6:	b082      	sub	sp, #8
   22ed8:	af00      	add	r7, sp, #0
   22eda:	603a      	str	r2, [r7, #0]
   22edc:	1dfb      	adds	r3, r7, #7
   22ede:	1c02      	adds	r2, r0, #0
   22ee0:	701a      	strb	r2, [r3, #0]
   22ee2:	1d3b      	adds	r3, r7, #4
   22ee4:	1c0a      	adds	r2, r1, #0
   22ee6:	801a      	strh	r2, [r3, #0]


}
   22ee8:	46c0      	nop			; (mov r8, r8)
   22eea:	46bd      	mov	sp, r7
   22eec:	b002      	add	sp, #8
   22eee:	bd80      	pop	{r7, pc}

00022ef0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   22ef0:	b590      	push	{r4, r7, lr}
   22ef2:	b083      	sub	sp, #12
   22ef4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22ef6:	1dfb      	adds	r3, r7, #7
   22ef8:	2200      	movs	r2, #0
   22efa:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   22efc:	4b16      	ldr	r3, [pc, #88]	; (22f58 <hif_chip_wake+0x68>)
   22efe:	789b      	ldrb	r3, [r3, #2]
   22f00:	b2db      	uxtb	r3, r3
   22f02:	2b00      	cmp	r3, #0
   22f04:	d003      	beq.n	22f0e <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   22f06:	1dfb      	adds	r3, r7, #7
   22f08:	781b      	ldrb	r3, [r3, #0]
   22f0a:	b25b      	sxtb	r3, r3
   22f0c:	e01f      	b.n	22f4e <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   22f0e:	4b12      	ldr	r3, [pc, #72]	; (22f58 <hif_chip_wake+0x68>)
   22f10:	785b      	ldrb	r3, [r3, #1]
   22f12:	b2db      	uxtb	r3, r3
   22f14:	2b00      	cmp	r3, #0
   22f16:	d10e      	bne.n	22f36 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   22f18:	4b0f      	ldr	r3, [pc, #60]	; (22f58 <hif_chip_wake+0x68>)
   22f1a:	781b      	ldrb	r3, [r3, #0]
   22f1c:	b2db      	uxtb	r3, r3
   22f1e:	2b00      	cmp	r3, #0
   22f20:	d009      	beq.n	22f36 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   22f22:	1dfc      	adds	r4, r7, #7
   22f24:	4b0d      	ldr	r3, [pc, #52]	; (22f5c <hif_chip_wake+0x6c>)
   22f26:	4798      	blx	r3
   22f28:	0003      	movs	r3, r0
   22f2a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   22f2c:	1dfb      	adds	r3, r7, #7
   22f2e:	781b      	ldrb	r3, [r3, #0]
   22f30:	b25b      	sxtb	r3, r3
   22f32:	2b00      	cmp	r3, #0
   22f34:	d107      	bne.n	22f46 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   22f36:	4b08      	ldr	r3, [pc, #32]	; (22f58 <hif_chip_wake+0x68>)
   22f38:	785b      	ldrb	r3, [r3, #1]
   22f3a:	b2db      	uxtb	r3, r3
   22f3c:	3301      	adds	r3, #1
   22f3e:	b2da      	uxtb	r2, r3
   22f40:	4b05      	ldr	r3, [pc, #20]	; (22f58 <hif_chip_wake+0x68>)
   22f42:	705a      	strb	r2, [r3, #1]
   22f44:	e000      	b.n	22f48 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   22f46:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   22f48:	1dfb      	adds	r3, r7, #7
   22f4a:	781b      	ldrb	r3, [r3, #0]
   22f4c:	b25b      	sxtb	r3, r3
}
   22f4e:	0018      	movs	r0, r3
   22f50:	46bd      	mov	sp, r7
   22f52:	b003      	add	sp, #12
   22f54:	bd90      	pop	{r4, r7, pc}
   22f56:	46c0      	nop			; (mov r8, r8)
   22f58:	20005930 	.word	0x20005930
   22f5c:	00024929 	.word	0x00024929

00022f60 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   22f60:	b580      	push	{r7, lr}
   22f62:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   22f64:	4b07      	ldr	r3, [pc, #28]	; (22f84 <hif_chip_sleep_sc+0x24>)
   22f66:	785b      	ldrb	r3, [r3, #1]
   22f68:	b2db      	uxtb	r3, r3
   22f6a:	2b00      	cmp	r3, #0
   22f6c:	d006      	beq.n	22f7c <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   22f6e:	4b05      	ldr	r3, [pc, #20]	; (22f84 <hif_chip_sleep_sc+0x24>)
   22f70:	785b      	ldrb	r3, [r3, #1]
   22f72:	b2db      	uxtb	r3, r3
   22f74:	3b01      	subs	r3, #1
   22f76:	b2da      	uxtb	r2, r3
   22f78:	4b02      	ldr	r3, [pc, #8]	; (22f84 <hif_chip_sleep_sc+0x24>)
   22f7a:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   22f7c:	2300      	movs	r3, #0
}
   22f7e:	0018      	movs	r0, r3
   22f80:	46bd      	mov	sp, r7
   22f82:	bd80      	pop	{r7, pc}
   22f84:	20005930 	.word	0x20005930

00022f88 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   22f88:	b590      	push	{r4, r7, lr}
   22f8a:	b083      	sub	sp, #12
   22f8c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22f8e:	1dfb      	adds	r3, r7, #7
   22f90:	2200      	movs	r2, #0
   22f92:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   22f94:	4b10      	ldr	r3, [pc, #64]	; (22fd8 <hif_chip_sleep+0x50>)
   22f96:	785b      	ldrb	r3, [r3, #1]
   22f98:	b2db      	uxtb	r3, r3
   22f9a:	2b00      	cmp	r3, #0
   22f9c:	d006      	beq.n	22fac <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   22f9e:	4b0e      	ldr	r3, [pc, #56]	; (22fd8 <hif_chip_sleep+0x50>)
   22fa0:	785b      	ldrb	r3, [r3, #1]
   22fa2:	b2db      	uxtb	r3, r3
   22fa4:	3b01      	subs	r3, #1
   22fa6:	b2da      	uxtb	r2, r3
   22fa8:	4b0b      	ldr	r3, [pc, #44]	; (22fd8 <hif_chip_sleep+0x50>)
   22faa:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   22fac:	4b0a      	ldr	r3, [pc, #40]	; (22fd8 <hif_chip_sleep+0x50>)
   22fae:	785b      	ldrb	r3, [r3, #1]
   22fb0:	b2db      	uxtb	r3, r3
   22fb2:	2b00      	cmp	r3, #0
   22fb4:	d109      	bne.n	22fca <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   22fb6:	4b08      	ldr	r3, [pc, #32]	; (22fd8 <hif_chip_sleep+0x50>)
   22fb8:	781b      	ldrb	r3, [r3, #0]
   22fba:	b2db      	uxtb	r3, r3
   22fbc:	2b00      	cmp	r3, #0
   22fbe:	d004      	beq.n	22fca <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   22fc0:	1dfc      	adds	r4, r7, #7
   22fc2:	4b06      	ldr	r3, [pc, #24]	; (22fdc <hif_chip_sleep+0x54>)
   22fc4:	4798      	blx	r3
   22fc6:	0003      	movs	r3, r0
   22fc8:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   22fca:	1dfb      	adds	r3, r7, #7
   22fcc:	781b      	ldrb	r3, [r3, #0]
   22fce:	b25b      	sxtb	r3, r3
}
   22fd0:	0018      	movs	r0, r3
   22fd2:	46bd      	mov	sp, r7
   22fd4:	b003      	add	sp, #12
   22fd6:	bd90      	pop	{r4, r7, pc}
   22fd8:	20005930 	.word	0x20005930
   22fdc:	00024851 	.word	0x00024851

00022fe0 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   22fe0:	b580      	push	{r7, lr}
   22fe2:	b082      	sub	sp, #8
   22fe4:	af00      	add	r7, sp, #0
   22fe6:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   22fe8:	4b09      	ldr	r3, [pc, #36]	; (23010 <hif_init+0x30>)
   22fea:	222c      	movs	r2, #44	; 0x2c
   22fec:	2100      	movs	r1, #0
   22fee:	0018      	movs	r0, r3
   22ff0:	4b08      	ldr	r3, [pc, #32]	; (23014 <hif_init+0x34>)
   22ff2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   22ff4:	4b08      	ldr	r3, [pc, #32]	; (23018 <hif_init+0x38>)
   22ff6:	0018      	movs	r0, r3
   22ff8:	4b08      	ldr	r3, [pc, #32]	; (2301c <hif_init+0x3c>)
   22ffa:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   22ffc:	4b08      	ldr	r3, [pc, #32]	; (23020 <hif_init+0x40>)
   22ffe:	0019      	movs	r1, r3
   23000:	2003      	movs	r0, #3
   23002:	4b08      	ldr	r3, [pc, #32]	; (23024 <hif_init+0x44>)
   23004:	4798      	blx	r3
	return M2M_SUCCESS;
   23006:	2300      	movs	r3, #0
}
   23008:	0018      	movs	r0, r3
   2300a:	46bd      	mov	sp, r7
   2300c:	b002      	add	sp, #8
   2300e:	bd80      	pop	{r7, pc}
   23010:	20005930 	.word	0x20005930
   23014:	00022dc9 	.word	0x00022dc9
   23018:	00022e45 	.word	0x00022e45
   2301c:	00022595 	.word	0x00022595
   23020:	00022ed5 	.word	0x00022ed5
   23024:	00023ac5 	.word	0x00023ac5

00023028 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   23028:	b590      	push	{r4, r7, lr}
   2302a:	b089      	sub	sp, #36	; 0x24
   2302c:	af00      	add	r7, sp, #0
   2302e:	0004      	movs	r4, r0
   23030:	0008      	movs	r0, r1
   23032:	603a      	str	r2, [r7, #0]
   23034:	0019      	movs	r1, r3
   23036:	1dfb      	adds	r3, r7, #7
   23038:	1c22      	adds	r2, r4, #0
   2303a:	701a      	strb	r2, [r3, #0]
   2303c:	1dbb      	adds	r3, r7, #6
   2303e:	1c02      	adds	r2, r0, #0
   23040:	701a      	strb	r2, [r3, #0]
   23042:	1d3b      	adds	r3, r7, #4
   23044:	1c0a      	adds	r2, r1, #0
   23046:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   23048:	231f      	movs	r3, #31
   2304a:	18fb      	adds	r3, r7, r3
   2304c:	22ff      	movs	r2, #255	; 0xff
   2304e:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   23050:	1dbb      	adds	r3, r7, #6
   23052:	781b      	ldrb	r3, [r3, #0]
   23054:	227f      	movs	r2, #127	; 0x7f
   23056:	4013      	ands	r3, r2
   23058:	b2da      	uxtb	r2, r3
   2305a:	2318      	movs	r3, #24
   2305c:	18fb      	adds	r3, r7, r3
   2305e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   23060:	2318      	movs	r3, #24
   23062:	18fb      	adds	r3, r7, r3
   23064:	1dfa      	adds	r2, r7, #7
   23066:	7812      	ldrb	r2, [r2, #0]
   23068:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   2306a:	2318      	movs	r3, #24
   2306c:	18fb      	adds	r3, r7, r3
   2306e:	2208      	movs	r2, #8
   23070:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   23072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23074:	2b00      	cmp	r3, #0
   23076:	d011      	beq.n	2309c <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   23078:	2318      	movs	r3, #24
   2307a:	18fb      	adds	r3, r7, r3
   2307c:	885b      	ldrh	r3, [r3, #2]
   2307e:	b29a      	uxth	r2, r3
   23080:	2338      	movs	r3, #56	; 0x38
   23082:	18f9      	adds	r1, r7, r3
   23084:	2334      	movs	r3, #52	; 0x34
   23086:	18fb      	adds	r3, r7, r3
   23088:	8809      	ldrh	r1, [r1, #0]
   2308a:	881b      	ldrh	r3, [r3, #0]
   2308c:	18cb      	adds	r3, r1, r3
   2308e:	b29b      	uxth	r3, r3
   23090:	18d3      	adds	r3, r2, r3
   23092:	b29a      	uxth	r2, r3
   23094:	2318      	movs	r3, #24
   23096:	18fb      	adds	r3, r7, r3
   23098:	805a      	strh	r2, [r3, #2]
   2309a:	e00a      	b.n	230b2 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   2309c:	2318      	movs	r3, #24
   2309e:	18fb      	adds	r3, r7, r3
   230a0:	885b      	ldrh	r3, [r3, #2]
   230a2:	b29a      	uxth	r2, r3
   230a4:	1d3b      	adds	r3, r7, #4
   230a6:	881b      	ldrh	r3, [r3, #0]
   230a8:	18d3      	adds	r3, r2, r3
   230aa:	b29a      	uxth	r2, r3
   230ac:	2318      	movs	r3, #24
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   230b2:	231f      	movs	r3, #31
   230b4:	18fc      	adds	r4, r7, r3
   230b6:	4bb2      	ldr	r3, [pc, #712]	; (23380 <hif_send+0x358>)
   230b8:	4798      	blx	r3
   230ba:	0003      	movs	r3, r0
   230bc:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   230be:	231f      	movs	r3, #31
   230c0:	18fb      	adds	r3, r7, r3
   230c2:	781b      	ldrb	r3, [r3, #0]
   230c4:	b25b      	sxtb	r3, r3
   230c6:	2b00      	cmp	r3, #0
   230c8:	d000      	beq.n	230cc <hif_send+0xa4>
   230ca:	e129      	b.n	23320 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   230cc:	2300      	movs	r3, #0
   230ce:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   230d0:	230e      	movs	r3, #14
   230d2:	18fb      	adds	r3, r7, r3
   230d4:	2200      	movs	r2, #0
   230d6:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   230d8:	2300      	movs	r3, #0
   230da:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   230dc:	1dfb      	adds	r3, r7, #7
   230de:	781a      	ldrb	r2, [r3, #0]
   230e0:	697b      	ldr	r3, [r7, #20]
   230e2:	4313      	orrs	r3, r2
   230e4:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   230e6:	1dbb      	adds	r3, r7, #6
   230e8:	781b      	ldrb	r3, [r3, #0]
   230ea:	021a      	lsls	r2, r3, #8
   230ec:	697b      	ldr	r3, [r7, #20]
   230ee:	4313      	orrs	r3, r2
   230f0:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   230f2:	2318      	movs	r3, #24
   230f4:	18fb      	adds	r3, r7, r3
   230f6:	885b      	ldrh	r3, [r3, #2]
   230f8:	b29b      	uxth	r3, r3
   230fa:	041a      	lsls	r2, r3, #16
   230fc:	697b      	ldr	r3, [r7, #20]
   230fe:	4313      	orrs	r3, r2
   23100:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   23102:	697b      	ldr	r3, [r7, #20]
   23104:	221f      	movs	r2, #31
   23106:	18bc      	adds	r4, r7, r2
   23108:	4a9e      	ldr	r2, [pc, #632]	; (23384 <hif_send+0x35c>)
   2310a:	0019      	movs	r1, r3
   2310c:	0010      	movs	r0, r2
   2310e:	4b9e      	ldr	r3, [pc, #632]	; (23388 <hif_send+0x360>)
   23110:	4798      	blx	r3
   23112:	0003      	movs	r3, r0
   23114:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23116:	231f      	movs	r3, #31
   23118:	18fb      	adds	r3, r7, r3
   2311a:	781b      	ldrb	r3, [r3, #0]
   2311c:	b25b      	sxtb	r3, r3
   2311e:	2b00      	cmp	r3, #0
   23120:	d000      	beq.n	23124 <hif_send+0xfc>
   23122:	e119      	b.n	23358 <hif_send+0x330>

		reg = 0UL;
   23124:	2300      	movs	r3, #0
   23126:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   23128:	697b      	ldr	r3, [r7, #20]
   2312a:	2202      	movs	r2, #2
   2312c:	4313      	orrs	r3, r2
   2312e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   23130:	697b      	ldr	r3, [r7, #20]
   23132:	221f      	movs	r2, #31
   23134:	18bc      	adds	r4, r7, r2
   23136:	4a95      	ldr	r2, [pc, #596]	; (2338c <hif_send+0x364>)
   23138:	0019      	movs	r1, r3
   2313a:	0010      	movs	r0, r2
   2313c:	4b92      	ldr	r3, [pc, #584]	; (23388 <hif_send+0x360>)
   2313e:	4798      	blx	r3
   23140:	0003      	movs	r3, r0
   23142:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23144:	231f      	movs	r3, #31
   23146:	18fb      	adds	r3, r7, r3
   23148:	781b      	ldrb	r3, [r3, #0]
   2314a:	b25b      	sxtb	r3, r3
   2314c:	2b00      	cmp	r3, #0
   2314e:	d000      	beq.n	23152 <hif_send+0x12a>
   23150:	e104      	b.n	2335c <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   23152:	2300      	movs	r3, #0
   23154:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   23156:	230e      	movs	r3, #14
   23158:	18fb      	adds	r3, r7, r3
   2315a:	2200      	movs	r2, #0
   2315c:	801a      	strh	r2, [r3, #0]
   2315e:	e050      	b.n	23202 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   23160:	231f      	movs	r3, #31
   23162:	18fc      	adds	r4, r7, r3
   23164:	2314      	movs	r3, #20
   23166:	18fb      	adds	r3, r7, r3
   23168:	4a88      	ldr	r2, [pc, #544]	; (2338c <hif_send+0x364>)
   2316a:	0019      	movs	r1, r3
   2316c:	0010      	movs	r0, r2
   2316e:	4b88      	ldr	r3, [pc, #544]	; (23390 <hif_send+0x368>)
   23170:	4798      	blx	r3
   23172:	0003      	movs	r3, r0
   23174:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   23176:	231f      	movs	r3, #31
   23178:	18fb      	adds	r3, r7, r3
   2317a:	781b      	ldrb	r3, [r3, #0]
   2317c:	b25b      	sxtb	r3, r3
   2317e:	2b00      	cmp	r3, #0
   23180:	d147      	bne.n	23212 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   23182:	230e      	movs	r3, #14
   23184:	18fb      	adds	r3, r7, r3
   23186:	881b      	ldrh	r3, [r3, #0]
   23188:	b29a      	uxth	r2, r3
   2318a:	23f4      	movs	r3, #244	; 0xf4
   2318c:	33ff      	adds	r3, #255	; 0xff
   2318e:	429a      	cmp	r2, r3
   23190:	d916      	bls.n	231c0 <hif_send+0x198>
				if(cnt < 501) {
   23192:	230e      	movs	r3, #14
   23194:	18fb      	adds	r3, r7, r3
   23196:	881b      	ldrh	r3, [r3, #0]
   23198:	b29a      	uxth	r2, r3
   2319a:	23fa      	movs	r3, #250	; 0xfa
   2319c:	005b      	lsls	r3, r3, #1
   2319e:	429a      	cmp	r2, r3
   231a0:	d80b      	bhi.n	231ba <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   231a2:	4b7c      	ldr	r3, [pc, #496]	; (23394 <hif_send+0x36c>)
   231a4:	0018      	movs	r0, r3
   231a6:	4b7c      	ldr	r3, [pc, #496]	; (23398 <hif_send+0x370>)
   231a8:	4798      	blx	r3
   231aa:	4b7c      	ldr	r3, [pc, #496]	; (2339c <hif_send+0x374>)
   231ac:	0018      	movs	r0, r3
   231ae:	4b7a      	ldr	r3, [pc, #488]	; (23398 <hif_send+0x370>)
   231b0:	4798      	blx	r3
   231b2:	4b7b      	ldr	r3, [pc, #492]	; (233a0 <hif_send+0x378>)
   231b4:	0018      	movs	r0, r3
   231b6:	4b78      	ldr	r3, [pc, #480]	; (23398 <hif_send+0x370>)
   231b8:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   231ba:	2001      	movs	r0, #1
   231bc:	4b79      	ldr	r3, [pc, #484]	; (233a4 <hif_send+0x37c>)
   231be:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   231c0:	697b      	ldr	r3, [r7, #20]
   231c2:	2202      	movs	r2, #2
   231c4:	4013      	ands	r3, r2
   231c6:	d113      	bne.n	231f0 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   231c8:	231f      	movs	r3, #31
   231ca:	18fc      	adds	r4, r7, r3
   231cc:	2310      	movs	r3, #16
   231ce:	18fb      	adds	r3, r7, r3
   231d0:	4a75      	ldr	r2, [pc, #468]	; (233a8 <hif_send+0x380>)
   231d2:	0019      	movs	r1, r3
   231d4:	0010      	movs	r0, r2
   231d6:	4b6e      	ldr	r3, [pc, #440]	; (23390 <hif_send+0x368>)
   231d8:	4798      	blx	r3
   231da:	0003      	movs	r3, r0
   231dc:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   231de:	231f      	movs	r3, #31
   231e0:	18fb      	adds	r3, r7, r3
   231e2:	781b      	ldrb	r3, [r3, #0]
   231e4:	b25b      	sxtb	r3, r3
   231e6:	2b00      	cmp	r3, #0
   231e8:	d015      	beq.n	23216 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   231ea:	2300      	movs	r3, #0
   231ec:	613b      	str	r3, [r7, #16]
					goto ERR1;
   231ee:	e0bc      	b.n	2336a <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   231f0:	230e      	movs	r3, #14
   231f2:	18fb      	adds	r3, r7, r3
   231f4:	881b      	ldrh	r3, [r3, #0]
   231f6:	b29b      	uxth	r3, r3
   231f8:	3301      	adds	r3, #1
   231fa:	b29a      	uxth	r2, r3
   231fc:	230e      	movs	r3, #14
   231fe:	18fb      	adds	r3, r7, r3
   23200:	801a      	strh	r2, [r3, #0]
   23202:	230e      	movs	r3, #14
   23204:	18fb      	adds	r3, r7, r3
   23206:	881b      	ldrh	r3, [r3, #0]
   23208:	b29b      	uxth	r3, r3
   2320a:	4a68      	ldr	r2, [pc, #416]	; (233ac <hif_send+0x384>)
   2320c:	4293      	cmp	r3, r2
   2320e:	d9a7      	bls.n	23160 <hif_send+0x138>
   23210:	e002      	b.n	23218 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   23212:	46c0      	nop			; (mov r8, r8)
   23214:	e000      	b.n	23218 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   23216:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   23218:	693b      	ldr	r3, [r7, #16]
   2321a:	2b00      	cmp	r3, #0
   2321c:	d100      	bne.n	23220 <hif_send+0x1f8>
   2321e:	e074      	b.n	2330a <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   23220:	693b      	ldr	r3, [r7, #16]
   23222:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   23224:	2318      	movs	r3, #24
   23226:	18fb      	adds	r3, r7, r3
   23228:	885b      	ldrh	r3, [r3, #2]
   2322a:	b29a      	uxth	r2, r3
   2322c:	2318      	movs	r3, #24
   2322e:	18fb      	adds	r3, r7, r3
   23230:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   23232:	68bb      	ldr	r3, [r7, #8]
   23234:	221f      	movs	r2, #31
   23236:	18bc      	adds	r4, r7, r2
   23238:	2218      	movs	r2, #24
   2323a:	18b9      	adds	r1, r7, r2
   2323c:	2208      	movs	r2, #8
   2323e:	0018      	movs	r0, r3
   23240:	4b5b      	ldr	r3, [pc, #364]	; (233b0 <hif_send+0x388>)
   23242:	4798      	blx	r3
   23244:	0003      	movs	r3, r0
   23246:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   23248:	231f      	movs	r3, #31
   2324a:	18fb      	adds	r3, r7, r3
   2324c:	781b      	ldrb	r3, [r3, #0]
   2324e:	b25b      	sxtb	r3, r3
   23250:	2b00      	cmp	r3, #0
   23252:	d000      	beq.n	23256 <hif_send+0x22e>
   23254:	e084      	b.n	23360 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   23256:	68bb      	ldr	r3, [r7, #8]
   23258:	3308      	adds	r3, #8
   2325a:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   2325c:	683b      	ldr	r3, [r7, #0]
   2325e:	2b00      	cmp	r3, #0
   23260:	d016      	beq.n	23290 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   23262:	68b8      	ldr	r0, [r7, #8]
   23264:	1d3b      	adds	r3, r7, #4
   23266:	881a      	ldrh	r2, [r3, #0]
   23268:	231f      	movs	r3, #31
   2326a:	18fc      	adds	r4, r7, r3
   2326c:	683b      	ldr	r3, [r7, #0]
   2326e:	0019      	movs	r1, r3
   23270:	4b4f      	ldr	r3, [pc, #316]	; (233b0 <hif_send+0x388>)
   23272:	4798      	blx	r3
   23274:	0003      	movs	r3, r0
   23276:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   23278:	231f      	movs	r3, #31
   2327a:	18fb      	adds	r3, r7, r3
   2327c:	781b      	ldrb	r3, [r3, #0]
   2327e:	b25b      	sxtb	r3, r3
   23280:	2b00      	cmp	r3, #0
   23282:	d000      	beq.n	23286 <hif_send+0x25e>
   23284:	e06e      	b.n	23364 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   23286:	1d3b      	adds	r3, r7, #4
   23288:	881a      	ldrh	r2, [r3, #0]
   2328a:	68bb      	ldr	r3, [r7, #8]
   2328c:	18d3      	adds	r3, r2, r3
   2328e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   23290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23292:	2b00      	cmp	r3, #0
   23294:	d021      	beq.n	232da <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   23296:	2338      	movs	r3, #56	; 0x38
   23298:	18fb      	adds	r3, r7, r3
   2329a:	881a      	ldrh	r2, [r3, #0]
   2329c:	1d3b      	adds	r3, r7, #4
   2329e:	881b      	ldrh	r3, [r3, #0]
   232a0:	1ad3      	subs	r3, r2, r3
   232a2:	001a      	movs	r2, r3
   232a4:	68bb      	ldr	r3, [r7, #8]
   232a6:	18d3      	adds	r3, r2, r3
   232a8:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   232aa:	68b8      	ldr	r0, [r7, #8]
   232ac:	2334      	movs	r3, #52	; 0x34
   232ae:	18fb      	adds	r3, r7, r3
   232b0:	881a      	ldrh	r2, [r3, #0]
   232b2:	231f      	movs	r3, #31
   232b4:	18fc      	adds	r4, r7, r3
   232b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   232b8:	0019      	movs	r1, r3
   232ba:	4b3d      	ldr	r3, [pc, #244]	; (233b0 <hif_send+0x388>)
   232bc:	4798      	blx	r3
   232be:	0003      	movs	r3, r0
   232c0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   232c2:	231f      	movs	r3, #31
   232c4:	18fb      	adds	r3, r7, r3
   232c6:	781b      	ldrb	r3, [r3, #0]
   232c8:	b25b      	sxtb	r3, r3
   232ca:	2b00      	cmp	r3, #0
   232cc:	d14c      	bne.n	23368 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   232ce:	2334      	movs	r3, #52	; 0x34
   232d0:	18fb      	adds	r3, r7, r3
   232d2:	881a      	ldrh	r2, [r3, #0]
   232d4:	68bb      	ldr	r3, [r7, #8]
   232d6:	18d3      	adds	r3, r2, r3
   232d8:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   232da:	693b      	ldr	r3, [r7, #16]
   232dc:	009b      	lsls	r3, r3, #2
   232de:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   232e0:	697b      	ldr	r3, [r7, #20]
   232e2:	2202      	movs	r2, #2
   232e4:	4313      	orrs	r3, r2
   232e6:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   232e8:	697b      	ldr	r3, [r7, #20]
   232ea:	221f      	movs	r2, #31
   232ec:	18bc      	adds	r4, r7, r2
   232ee:	4a31      	ldr	r2, [pc, #196]	; (233b4 <hif_send+0x38c>)
   232f0:	0019      	movs	r1, r3
   232f2:	0010      	movs	r0, r2
   232f4:	4b24      	ldr	r3, [pc, #144]	; (23388 <hif_send+0x360>)
   232f6:	4798      	blx	r3
   232f8:	0003      	movs	r3, r0
   232fa:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   232fc:	231f      	movs	r3, #31
   232fe:	18fb      	adds	r3, r7, r3
   23300:	781b      	ldrb	r3, [r3, #0]
   23302:	b25b      	sxtb	r3, r3
   23304:	2b00      	cmp	r3, #0
   23306:	d01c      	beq.n	23342 <hif_send+0x31a>
   23308:	e02f      	b.n	2336a <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   2330a:	231f      	movs	r3, #31
   2330c:	18fc      	adds	r4, r7, r3
   2330e:	4b2a      	ldr	r3, [pc, #168]	; (233b8 <hif_send+0x390>)
   23310:	4798      	blx	r3
   23312:	0003      	movs	r3, r0
   23314:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   23316:	231f      	movs	r3, #31
   23318:	18fb      	adds	r3, r7, r3
   2331a:	22fd      	movs	r2, #253	; 0xfd
   2331c:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   2331e:	e026      	b.n	2336e <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   23320:	2398      	movs	r3, #152	; 0x98
   23322:	33ff      	adds	r3, #255	; 0xff
   23324:	001a      	movs	r2, r3
   23326:	4925      	ldr	r1, [pc, #148]	; (233bc <hif_send+0x394>)
   23328:	4b25      	ldr	r3, [pc, #148]	; (233c0 <hif_send+0x398>)
   2332a:	0018      	movs	r0, r3
   2332c:	4b1a      	ldr	r3, [pc, #104]	; (23398 <hif_send+0x370>)
   2332e:	4798      	blx	r3
   23330:	4b24      	ldr	r3, [pc, #144]	; (233c4 <hif_send+0x39c>)
   23332:	0018      	movs	r0, r3
   23334:	4b18      	ldr	r3, [pc, #96]	; (23398 <hif_send+0x370>)
   23336:	4798      	blx	r3
   23338:	4b19      	ldr	r3, [pc, #100]	; (233a0 <hif_send+0x378>)
   2333a:	0018      	movs	r0, r3
   2333c:	4b16      	ldr	r3, [pc, #88]	; (23398 <hif_send+0x370>)
   2333e:	4798      	blx	r3
		goto ERR2;
   23340:	e015      	b.n	2336e <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   23342:	231f      	movs	r3, #31
   23344:	18fc      	adds	r4, r7, r3
   23346:	4b1c      	ldr	r3, [pc, #112]	; (233b8 <hif_send+0x390>)
   23348:	4798      	blx	r3
   2334a:	0003      	movs	r3, r0
   2334c:	7023      	strb	r3, [r4, #0]
	return ret;
   2334e:	231f      	movs	r3, #31
   23350:	18fb      	adds	r3, r7, r3
   23352:	781b      	ldrb	r3, [r3, #0]
   23354:	b25b      	sxtb	r3, r3
   23356:	e00e      	b.n	23376 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   23358:	46c0      	nop			; (mov r8, r8)
   2335a:	e006      	b.n	2336a <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   2335c:	46c0      	nop			; (mov r8, r8)
   2335e:	e004      	b.n	2336a <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   23360:	46c0      	nop			; (mov r8, r8)
   23362:	e002      	b.n	2336a <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   23364:	46c0      	nop			; (mov r8, r8)
   23366:	e000      	b.n	2336a <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   23368:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   2336a:	4b17      	ldr	r3, [pc, #92]	; (233c8 <hif_send+0x3a0>)
   2336c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   2336e:	231f      	movs	r3, #31
   23370:	18fb      	adds	r3, r7, r3
   23372:	781b      	ldrb	r3, [r3, #0]
   23374:	b25b      	sxtb	r3, r3
}
   23376:	0018      	movs	r0, r3
   23378:	46bd      	mov	sp, r7
   2337a:	b009      	add	sp, #36	; 0x24
   2337c:	bd90      	pop	{r4, r7, pc}
   2337e:	46c0      	nop			; (mov r8, r8)
   23380:	00022ef1 	.word	0x00022ef1
   23384:	0000108c 	.word	0x0000108c
   23388:	00024e7d 	.word	0x00024e7d
   2338c:	00001078 	.word	0x00001078
   23390:	00024e59 	.word	0x00024e59
   23394:	0003b428 	.word	0x0003b428
   23398:	00020109 	.word	0x00020109
   2339c:	0003b434 	.word	0x0003b434
   233a0:	0003b448 	.word	0x0003b448
   233a4:	00022579 	.word	0x00022579
   233a8:	00150400 	.word	0x00150400
   233ac:	000003e7 	.word	0x000003e7
   233b0:	00024fc5 	.word	0x00024fc5
   233b4:	0000106c 	.word	0x0000106c
   233b8:	00022f89 	.word	0x00022f89
   233bc:	0003b750 	.word	0x0003b750
   233c0:	0003b44c 	.word	0x0003b44c
   233c4:	0003b460 	.word	0x0003b460
   233c8:	00022f61 	.word	0x00022f61

000233cc <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   233cc:	b590      	push	{r4, r7, lr}
   233ce:	b087      	sub	sp, #28
   233d0:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   233d2:	230f      	movs	r3, #15
   233d4:	18fb      	adds	r3, r7, r3
   233d6:	2200      	movs	r2, #0
   233d8:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   233da:	230f      	movs	r3, #15
   233dc:	18fc      	adds	r4, r7, r3
   233de:	2308      	movs	r3, #8
   233e0:	18fb      	adds	r3, r7, r3
   233e2:	4adc      	ldr	r2, [pc, #880]	; (23754 <hif_isr+0x388>)
   233e4:	0019      	movs	r1, r3
   233e6:	0010      	movs	r0, r2
   233e8:	4bdb      	ldr	r3, [pc, #876]	; (23758 <hif_isr+0x38c>)
   233ea:	4798      	blx	r3
   233ec:	0003      	movs	r3, r0
   233ee:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   233f0:	230f      	movs	r3, #15
   233f2:	18fb      	adds	r3, r7, r3
   233f4:	781b      	ldrb	r3, [r3, #0]
   233f6:	b25b      	sxtb	r3, r3
   233f8:	2b00      	cmp	r3, #0
   233fa:	d000      	beq.n	233fe <hif_isr+0x32>
   233fc:	e21e      	b.n	2383c <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   233fe:	68bb      	ldr	r3, [r7, #8]
   23400:	2201      	movs	r2, #1
   23402:	4013      	ands	r3, r2
   23404:	d100      	bne.n	23408 <hif_isr+0x3c>
   23406:	e204      	b.n	23812 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   23408:	2000      	movs	r0, #0
   2340a:	4bd4      	ldr	r3, [pc, #848]	; (2375c <hif_isr+0x390>)
   2340c:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   2340e:	68bb      	ldr	r3, [r7, #8]
   23410:	2201      	movs	r2, #1
   23412:	4393      	bics	r3, r2
   23414:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   23416:	68bb      	ldr	r3, [r7, #8]
   23418:	220f      	movs	r2, #15
   2341a:	18bc      	adds	r4, r7, r2
   2341c:	4acd      	ldr	r2, [pc, #820]	; (23754 <hif_isr+0x388>)
   2341e:	0019      	movs	r1, r3
   23420:	0010      	movs	r0, r2
   23422:	4bcf      	ldr	r3, [pc, #828]	; (23760 <hif_isr+0x394>)
   23424:	4798      	blx	r3
   23426:	0003      	movs	r3, r0
   23428:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2342a:	230f      	movs	r3, #15
   2342c:	18fb      	adds	r3, r7, r3
   2342e:	781b      	ldrb	r3, [r3, #0]
   23430:	b25b      	sxtb	r3, r3
   23432:	2b00      	cmp	r3, #0
   23434:	d000      	beq.n	23438 <hif_isr+0x6c>
   23436:	e210      	b.n	2385a <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   23438:	4bca      	ldr	r3, [pc, #808]	; (23764 <hif_isr+0x398>)
   2343a:	2201      	movs	r2, #1
   2343c:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   2343e:	68bb      	ldr	r3, [r7, #8]
   23440:	089b      	lsrs	r3, r3, #2
   23442:	b29a      	uxth	r2, r3
   23444:	230c      	movs	r3, #12
   23446:	18fb      	adds	r3, r7, r3
   23448:	0512      	lsls	r2, r2, #20
   2344a:	0d12      	lsrs	r2, r2, #20
   2344c:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   2344e:	230c      	movs	r3, #12
   23450:	18fb      	adds	r3, r7, r3
   23452:	881b      	ldrh	r3, [r3, #0]
   23454:	2b00      	cmp	r3, #0
   23456:	d100      	bne.n	2345a <hif_isr+0x8e>
   23458:	e1c8      	b.n	237ec <hif_isr+0x420>
				uint32 address = 0;
   2345a:	2300      	movs	r3, #0
   2345c:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   2345e:	230f      	movs	r3, #15
   23460:	18fc      	adds	r4, r7, r3
   23462:	003b      	movs	r3, r7
   23464:	4ac0      	ldr	r2, [pc, #768]	; (23768 <hif_isr+0x39c>)
   23466:	0019      	movs	r1, r3
   23468:	0010      	movs	r0, r2
   2346a:	4bbb      	ldr	r3, [pc, #748]	; (23758 <hif_isr+0x38c>)
   2346c:	4798      	blx	r3
   2346e:	0003      	movs	r3, r0
   23470:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   23472:	230f      	movs	r3, #15
   23474:	18fb      	adds	r3, r7, r3
   23476:	781b      	ldrb	r3, [r3, #0]
   23478:	b25b      	sxtb	r3, r3
   2347a:	2b00      	cmp	r3, #0
   2347c:	d012      	beq.n	234a4 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   2347e:	23e4      	movs	r3, #228	; 0xe4
   23480:	005a      	lsls	r2, r3, #1
   23482:	49ba      	ldr	r1, [pc, #744]	; (2376c <hif_isr+0x3a0>)
   23484:	4bba      	ldr	r3, [pc, #744]	; (23770 <hif_isr+0x3a4>)
   23486:	0018      	movs	r0, r3
   23488:	4bba      	ldr	r3, [pc, #744]	; (23774 <hif_isr+0x3a8>)
   2348a:	4798      	blx	r3
   2348c:	4bba      	ldr	r3, [pc, #744]	; (23778 <hif_isr+0x3ac>)
   2348e:	0018      	movs	r0, r3
   23490:	4bb8      	ldr	r3, [pc, #736]	; (23774 <hif_isr+0x3a8>)
   23492:	4798      	blx	r3
   23494:	4bb9      	ldr	r3, [pc, #740]	; (2377c <hif_isr+0x3b0>)
   23496:	0018      	movs	r0, r3
   23498:	4bb6      	ldr	r3, [pc, #728]	; (23774 <hif_isr+0x3a8>)
   2349a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   2349c:	2001      	movs	r0, #1
   2349e:	4baf      	ldr	r3, [pc, #700]	; (2375c <hif_isr+0x390>)
   234a0:	4798      	blx	r3
					goto ERR1;
   234a2:	e1db      	b.n	2385c <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   234a4:	683a      	ldr	r2, [r7, #0]
   234a6:	4baf      	ldr	r3, [pc, #700]	; (23764 <hif_isr+0x398>)
   234a8:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   234aa:	230c      	movs	r3, #12
   234ac:	18fb      	adds	r3, r7, r3
   234ae:	881a      	ldrh	r2, [r3, #0]
   234b0:	4bac      	ldr	r3, [pc, #688]	; (23764 <hif_isr+0x398>)
   234b2:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   234b4:	683b      	ldr	r3, [r7, #0]
   234b6:	220f      	movs	r2, #15
   234b8:	18bc      	adds	r4, r7, r2
   234ba:	1d39      	adds	r1, r7, #4
   234bc:	2204      	movs	r2, #4
   234be:	0018      	movs	r0, r3
   234c0:	4baf      	ldr	r3, [pc, #700]	; (23780 <hif_isr+0x3b4>)
   234c2:	4798      	blx	r3
   234c4:	0003      	movs	r3, r0
   234c6:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   234c8:	1d3b      	adds	r3, r7, #4
   234ca:	885b      	ldrh	r3, [r3, #2]
   234cc:	b29a      	uxth	r2, r3
   234ce:	1d3b      	adds	r3, r7, #4
   234d0:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   234d2:	230f      	movs	r3, #15
   234d4:	18fb      	adds	r3, r7, r3
   234d6:	781b      	ldrb	r3, [r3, #0]
   234d8:	b25b      	sxtb	r3, r3
   234da:	2b00      	cmp	r3, #0
   234dc:	d012      	beq.n	23504 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   234de:	23e9      	movs	r3, #233	; 0xe9
   234e0:	005a      	lsls	r2, r3, #1
   234e2:	49a2      	ldr	r1, [pc, #648]	; (2376c <hif_isr+0x3a0>)
   234e4:	4ba2      	ldr	r3, [pc, #648]	; (23770 <hif_isr+0x3a4>)
   234e6:	0018      	movs	r0, r3
   234e8:	4ba2      	ldr	r3, [pc, #648]	; (23774 <hif_isr+0x3a8>)
   234ea:	4798      	blx	r3
   234ec:	4ba5      	ldr	r3, [pc, #660]	; (23784 <hif_isr+0x3b8>)
   234ee:	0018      	movs	r0, r3
   234f0:	4ba0      	ldr	r3, [pc, #640]	; (23774 <hif_isr+0x3a8>)
   234f2:	4798      	blx	r3
   234f4:	4ba1      	ldr	r3, [pc, #644]	; (2377c <hif_isr+0x3b0>)
   234f6:	0018      	movs	r0, r3
   234f8:	4b9e      	ldr	r3, [pc, #632]	; (23774 <hif_isr+0x3a8>)
   234fa:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   234fc:	2001      	movs	r0, #1
   234fe:	4b97      	ldr	r3, [pc, #604]	; (2375c <hif_isr+0x390>)
   23500:	4798      	blx	r3
					goto ERR1;
   23502:	e1ab      	b.n	2385c <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   23504:	1d3b      	adds	r3, r7, #4
   23506:	885b      	ldrh	r3, [r3, #2]
   23508:	b29b      	uxth	r3, r3
   2350a:	220c      	movs	r2, #12
   2350c:	18ba      	adds	r2, r7, r2
   2350e:	8812      	ldrh	r2, [r2, #0]
   23510:	429a      	cmp	r2, r3
   23512:	d02f      	beq.n	23574 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   23514:	230c      	movs	r3, #12
   23516:	18fb      	adds	r3, r7, r3
   23518:	881b      	ldrh	r3, [r3, #0]
   2351a:	1d3a      	adds	r2, r7, #4
   2351c:	8852      	ldrh	r2, [r2, #2]
   2351e:	b292      	uxth	r2, r2
   23520:	1a9b      	subs	r3, r3, r2
   23522:	2b04      	cmp	r3, #4
   23524:	dd26      	ble.n	23574 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   23526:	23dc      	movs	r3, #220	; 0xdc
   23528:	33ff      	adds	r3, #255	; 0xff
   2352a:	001a      	movs	r2, r3
   2352c:	498f      	ldr	r1, [pc, #572]	; (2376c <hif_isr+0x3a0>)
   2352e:	4b90      	ldr	r3, [pc, #576]	; (23770 <hif_isr+0x3a4>)
   23530:	0018      	movs	r0, r3
   23532:	4b90      	ldr	r3, [pc, #576]	; (23774 <hif_isr+0x3a8>)
   23534:	4798      	blx	r3
   23536:	230c      	movs	r3, #12
   23538:	18fb      	adds	r3, r7, r3
   2353a:	8819      	ldrh	r1, [r3, #0]
   2353c:	1d3b      	adds	r3, r7, #4
   2353e:	885b      	ldrh	r3, [r3, #2]
   23540:	b29b      	uxth	r3, r3
   23542:	001a      	movs	r2, r3
   23544:	1d3b      	adds	r3, r7, #4
   23546:	781b      	ldrb	r3, [r3, #0]
   23548:	b2db      	uxtb	r3, r3
   2354a:	001c      	movs	r4, r3
   2354c:	1d3b      	adds	r3, r7, #4
   2354e:	785b      	ldrb	r3, [r3, #1]
   23550:	b2db      	uxtb	r3, r3
   23552:	488d      	ldr	r0, [pc, #564]	; (23788 <hif_isr+0x3bc>)
   23554:	9300      	str	r3, [sp, #0]
   23556:	0023      	movs	r3, r4
   23558:	4c86      	ldr	r4, [pc, #536]	; (23774 <hif_isr+0x3a8>)
   2355a:	47a0      	blx	r4
   2355c:	4b87      	ldr	r3, [pc, #540]	; (2377c <hif_isr+0x3b0>)
   2355e:	0018      	movs	r0, r3
   23560:	4b84      	ldr	r3, [pc, #528]	; (23774 <hif_isr+0x3a8>)
   23562:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   23564:	2001      	movs	r0, #1
   23566:	4b7d      	ldr	r3, [pc, #500]	; (2375c <hif_isr+0x390>)
   23568:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   2356a:	230f      	movs	r3, #15
   2356c:	18fb      	adds	r3, r7, r3
   2356e:	22fa      	movs	r2, #250	; 0xfa
   23570:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   23572:	e173      	b.n	2385c <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   23574:	1d3b      	adds	r3, r7, #4
   23576:	781b      	ldrb	r3, [r3, #0]
   23578:	b2db      	uxtb	r3, r3
   2357a:	2b01      	cmp	r3, #1
   2357c:	d122      	bne.n	235c4 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   2357e:	4b79      	ldr	r3, [pc, #484]	; (23764 <hif_isr+0x398>)
   23580:	691b      	ldr	r3, [r3, #16]
   23582:	2b00      	cmp	r3, #0
   23584:	d00d      	beq.n	235a2 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23586:	4b77      	ldr	r3, [pc, #476]	; (23764 <hif_isr+0x398>)
   23588:	691b      	ldr	r3, [r3, #16]
   2358a:	1d3a      	adds	r2, r7, #4
   2358c:	7852      	ldrb	r2, [r2, #1]
   2358e:	b2d0      	uxtb	r0, r2
   23590:	1d3a      	adds	r2, r7, #4
   23592:	8852      	ldrh	r2, [r2, #2]
   23594:	b292      	uxth	r2, r2
   23596:	3a08      	subs	r2, #8
   23598:	b291      	uxth	r1, r2
   2359a:	683a      	ldr	r2, [r7, #0]
   2359c:	3208      	adds	r2, #8
   2359e:	4798      	blx	r3
   235a0:	e102      	b.n	237a8 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   235a2:	23e8      	movs	r3, #232	; 0xe8
   235a4:	33ff      	adds	r3, #255	; 0xff
   235a6:	001a      	movs	r2, r3
   235a8:	4970      	ldr	r1, [pc, #448]	; (2376c <hif_isr+0x3a0>)
   235aa:	4b71      	ldr	r3, [pc, #452]	; (23770 <hif_isr+0x3a4>)
   235ac:	0018      	movs	r0, r3
   235ae:	4b71      	ldr	r3, [pc, #452]	; (23774 <hif_isr+0x3a8>)
   235b0:	4798      	blx	r3
   235b2:	4b76      	ldr	r3, [pc, #472]	; (2378c <hif_isr+0x3c0>)
   235b4:	0018      	movs	r0, r3
   235b6:	4b6f      	ldr	r3, [pc, #444]	; (23774 <hif_isr+0x3a8>)
   235b8:	4798      	blx	r3
   235ba:	4b70      	ldr	r3, [pc, #448]	; (2377c <hif_isr+0x3b0>)
   235bc:	0018      	movs	r0, r3
   235be:	4b6d      	ldr	r3, [pc, #436]	; (23774 <hif_isr+0x3a8>)
   235c0:	4798      	blx	r3
   235c2:	e0f1      	b.n	237a8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   235c4:	1d3b      	adds	r3, r7, #4
   235c6:	781b      	ldrb	r3, [r3, #0]
   235c8:	b2db      	uxtb	r3, r3
   235ca:	2b02      	cmp	r3, #2
   235cc:	d122      	bne.n	23614 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   235ce:	4b65      	ldr	r3, [pc, #404]	; (23764 <hif_isr+0x398>)
   235d0:	695b      	ldr	r3, [r3, #20]
   235d2:	2b00      	cmp	r3, #0
   235d4:	d00d      	beq.n	235f2 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   235d6:	4b63      	ldr	r3, [pc, #396]	; (23764 <hif_isr+0x398>)
   235d8:	695b      	ldr	r3, [r3, #20]
   235da:	1d3a      	adds	r2, r7, #4
   235dc:	7852      	ldrb	r2, [r2, #1]
   235de:	b2d0      	uxtb	r0, r2
   235e0:	1d3a      	adds	r2, r7, #4
   235e2:	8852      	ldrh	r2, [r2, #2]
   235e4:	b292      	uxth	r2, r2
   235e6:	3a08      	subs	r2, #8
   235e8:	b291      	uxth	r1, r2
   235ea:	683a      	ldr	r2, [r7, #0]
   235ec:	3208      	adds	r2, #8
   235ee:	4798      	blx	r3
   235f0:	e0da      	b.n	237a8 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   235f2:	23f0      	movs	r3, #240	; 0xf0
   235f4:	33ff      	adds	r3, #255	; 0xff
   235f6:	001a      	movs	r2, r3
   235f8:	495c      	ldr	r1, [pc, #368]	; (2376c <hif_isr+0x3a0>)
   235fa:	4b5d      	ldr	r3, [pc, #372]	; (23770 <hif_isr+0x3a4>)
   235fc:	0018      	movs	r0, r3
   235fe:	4b5d      	ldr	r3, [pc, #372]	; (23774 <hif_isr+0x3a8>)
   23600:	4798      	blx	r3
   23602:	4b63      	ldr	r3, [pc, #396]	; (23790 <hif_isr+0x3c4>)
   23604:	0018      	movs	r0, r3
   23606:	4b5b      	ldr	r3, [pc, #364]	; (23774 <hif_isr+0x3a8>)
   23608:	4798      	blx	r3
   2360a:	4b5c      	ldr	r3, [pc, #368]	; (2377c <hif_isr+0x3b0>)
   2360c:	0018      	movs	r0, r3
   2360e:	4b59      	ldr	r3, [pc, #356]	; (23774 <hif_isr+0x3a8>)
   23610:	4798      	blx	r3
   23612:	e0c9      	b.n	237a8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   23614:	1d3b      	adds	r3, r7, #4
   23616:	781b      	ldrb	r3, [r3, #0]
   23618:	b2db      	uxtb	r3, r3
   2361a:	2b04      	cmp	r3, #4
   2361c:	d122      	bne.n	23664 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   2361e:	4b51      	ldr	r3, [pc, #324]	; (23764 <hif_isr+0x398>)
   23620:	699b      	ldr	r3, [r3, #24]
   23622:	2b00      	cmp	r3, #0
   23624:	d00d      	beq.n	23642 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23626:	4b4f      	ldr	r3, [pc, #316]	; (23764 <hif_isr+0x398>)
   23628:	699b      	ldr	r3, [r3, #24]
   2362a:	1d3a      	adds	r2, r7, #4
   2362c:	7852      	ldrb	r2, [r2, #1]
   2362e:	b2d0      	uxtb	r0, r2
   23630:	1d3a      	adds	r2, r7, #4
   23632:	8852      	ldrh	r2, [r2, #2]
   23634:	b292      	uxth	r2, r2
   23636:	3a08      	subs	r2, #8
   23638:	b291      	uxth	r1, r2
   2363a:	683a      	ldr	r2, [r7, #0]
   2363c:	3208      	adds	r2, #8
   2363e:	4798      	blx	r3
   23640:	e0b2      	b.n	237a8 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   23642:	23f8      	movs	r3, #248	; 0xf8
   23644:	33ff      	adds	r3, #255	; 0xff
   23646:	001a      	movs	r2, r3
   23648:	4948      	ldr	r1, [pc, #288]	; (2376c <hif_isr+0x3a0>)
   2364a:	4b49      	ldr	r3, [pc, #292]	; (23770 <hif_isr+0x3a4>)
   2364c:	0018      	movs	r0, r3
   2364e:	4b49      	ldr	r3, [pc, #292]	; (23774 <hif_isr+0x3a8>)
   23650:	4798      	blx	r3
   23652:	4b50      	ldr	r3, [pc, #320]	; (23794 <hif_isr+0x3c8>)
   23654:	0018      	movs	r0, r3
   23656:	4b47      	ldr	r3, [pc, #284]	; (23774 <hif_isr+0x3a8>)
   23658:	4798      	blx	r3
   2365a:	4b48      	ldr	r3, [pc, #288]	; (2377c <hif_isr+0x3b0>)
   2365c:	0018      	movs	r0, r3
   2365e:	4b45      	ldr	r3, [pc, #276]	; (23774 <hif_isr+0x3a8>)
   23660:	4798      	blx	r3
   23662:	e0a1      	b.n	237a8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   23664:	1d3b      	adds	r3, r7, #4
   23666:	781b      	ldrb	r3, [r3, #0]
   23668:	b2db      	uxtb	r3, r3
   2366a:	2b06      	cmp	r3, #6
   2366c:	d121      	bne.n	236b2 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   2366e:	4b3d      	ldr	r3, [pc, #244]	; (23764 <hif_isr+0x398>)
   23670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23672:	2b00      	cmp	r3, #0
   23674:	d00d      	beq.n	23692 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23676:	4b3b      	ldr	r3, [pc, #236]	; (23764 <hif_isr+0x398>)
   23678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2367a:	1d3a      	adds	r2, r7, #4
   2367c:	7852      	ldrb	r2, [r2, #1]
   2367e:	b2d0      	uxtb	r0, r2
   23680:	1d3a      	adds	r2, r7, #4
   23682:	8852      	ldrh	r2, [r2, #2]
   23684:	b292      	uxth	r2, r2
   23686:	3a08      	subs	r2, #8
   23688:	b291      	uxth	r1, r2
   2368a:	683a      	ldr	r2, [r7, #0]
   2368c:	3208      	adds	r2, #8
   2368e:	4798      	blx	r3
   23690:	e08a      	b.n	237a8 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   23692:	2380      	movs	r3, #128	; 0x80
   23694:	009a      	lsls	r2, r3, #2
   23696:	4935      	ldr	r1, [pc, #212]	; (2376c <hif_isr+0x3a0>)
   23698:	4b35      	ldr	r3, [pc, #212]	; (23770 <hif_isr+0x3a4>)
   2369a:	0018      	movs	r0, r3
   2369c:	4b35      	ldr	r3, [pc, #212]	; (23774 <hif_isr+0x3a8>)
   2369e:	4798      	blx	r3
   236a0:	4b3d      	ldr	r3, [pc, #244]	; (23798 <hif_isr+0x3cc>)
   236a2:	0018      	movs	r0, r3
   236a4:	4b33      	ldr	r3, [pc, #204]	; (23774 <hif_isr+0x3a8>)
   236a6:	4798      	blx	r3
   236a8:	4b34      	ldr	r3, [pc, #208]	; (2377c <hif_isr+0x3b0>)
   236aa:	0018      	movs	r0, r3
   236ac:	4b31      	ldr	r3, [pc, #196]	; (23774 <hif_isr+0x3a8>)
   236ae:	4798      	blx	r3
   236b0:	e07a      	b.n	237a8 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   236b2:	1d3b      	adds	r3, r7, #4
   236b4:	781b      	ldrb	r3, [r3, #0]
   236b6:	b2db      	uxtb	r3, r3
   236b8:	2b07      	cmp	r3, #7
   236ba:	d120      	bne.n	236fe <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   236bc:	4b29      	ldr	r3, [pc, #164]	; (23764 <hif_isr+0x398>)
   236be:	69db      	ldr	r3, [r3, #28]
   236c0:	2b00      	cmp	r3, #0
   236c2:	d00d      	beq.n	236e0 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   236c4:	4b27      	ldr	r3, [pc, #156]	; (23764 <hif_isr+0x398>)
   236c6:	69db      	ldr	r3, [r3, #28]
   236c8:	1d3a      	adds	r2, r7, #4
   236ca:	7852      	ldrb	r2, [r2, #1]
   236cc:	b2d0      	uxtb	r0, r2
   236ce:	1d3a      	adds	r2, r7, #4
   236d0:	8852      	ldrh	r2, [r2, #2]
   236d2:	b292      	uxth	r2, r2
   236d4:	3a08      	subs	r2, #8
   236d6:	b291      	uxth	r1, r2
   236d8:	683a      	ldr	r2, [r7, #0]
   236da:	3208      	adds	r2, #8
   236dc:	4798      	blx	r3
   236de:	e063      	b.n	237a8 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   236e0:	4a2e      	ldr	r2, [pc, #184]	; (2379c <hif_isr+0x3d0>)
   236e2:	4922      	ldr	r1, [pc, #136]	; (2376c <hif_isr+0x3a0>)
   236e4:	4b22      	ldr	r3, [pc, #136]	; (23770 <hif_isr+0x3a4>)
   236e6:	0018      	movs	r0, r3
   236e8:	4b22      	ldr	r3, [pc, #136]	; (23774 <hif_isr+0x3a8>)
   236ea:	4798      	blx	r3
   236ec:	4b2c      	ldr	r3, [pc, #176]	; (237a0 <hif_isr+0x3d4>)
   236ee:	0018      	movs	r0, r3
   236f0:	4b20      	ldr	r3, [pc, #128]	; (23774 <hif_isr+0x3a8>)
   236f2:	4798      	blx	r3
   236f4:	4b21      	ldr	r3, [pc, #132]	; (2377c <hif_isr+0x3b0>)
   236f6:	0018      	movs	r0, r3
   236f8:	4b1e      	ldr	r3, [pc, #120]	; (23774 <hif_isr+0x3a8>)
   236fa:	4798      	blx	r3
   236fc:	e054      	b.n	237a8 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   236fe:	1d3b      	adds	r3, r7, #4
   23700:	781b      	ldrb	r3, [r3, #0]
   23702:	b2db      	uxtb	r3, r3
   23704:	2b05      	cmp	r3, #5
   23706:	d111      	bne.n	2372c <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   23708:	4b16      	ldr	r3, [pc, #88]	; (23764 <hif_isr+0x398>)
   2370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2370c:	2b00      	cmp	r3, #0
   2370e:	d04b      	beq.n	237a8 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23710:	4b14      	ldr	r3, [pc, #80]	; (23764 <hif_isr+0x398>)
   23712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23714:	1d3a      	adds	r2, r7, #4
   23716:	7852      	ldrb	r2, [r2, #1]
   23718:	b2d0      	uxtb	r0, r2
   2371a:	1d3a      	adds	r2, r7, #4
   2371c:	8852      	ldrh	r2, [r2, #2]
   2371e:	b292      	uxth	r2, r2
   23720:	3a08      	subs	r2, #8
   23722:	b291      	uxth	r1, r2
   23724:	683a      	ldr	r2, [r7, #0]
   23726:	3208      	adds	r2, #8
   23728:	4798      	blx	r3
   2372a:	e03d      	b.n	237a8 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   2372c:	2384      	movs	r3, #132	; 0x84
   2372e:	009a      	lsls	r2, r3, #2
   23730:	490e      	ldr	r1, [pc, #56]	; (2376c <hif_isr+0x3a0>)
   23732:	4b0f      	ldr	r3, [pc, #60]	; (23770 <hif_isr+0x3a4>)
   23734:	0018      	movs	r0, r3
   23736:	4b0f      	ldr	r3, [pc, #60]	; (23774 <hif_isr+0x3a8>)
   23738:	4798      	blx	r3
   2373a:	4b1a      	ldr	r3, [pc, #104]	; (237a4 <hif_isr+0x3d8>)
   2373c:	0018      	movs	r0, r3
   2373e:	4b0d      	ldr	r3, [pc, #52]	; (23774 <hif_isr+0x3a8>)
   23740:	4798      	blx	r3
   23742:	4b0e      	ldr	r3, [pc, #56]	; (2377c <hif_isr+0x3b0>)
   23744:	0018      	movs	r0, r3
   23746:	4b0b      	ldr	r3, [pc, #44]	; (23774 <hif_isr+0x3a8>)
   23748:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2374a:	230f      	movs	r3, #15
   2374c:	18fb      	adds	r3, r7, r3
   2374e:	22fa      	movs	r2, #250	; 0xfa
   23750:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   23752:	e083      	b.n	2385c <hif_isr+0x490>
   23754:	00001070 	.word	0x00001070
   23758:	00024e59 	.word	0x00024e59
   2375c:	0002260d 	.word	0x0002260d
   23760:	00024e7d 	.word	0x00024e7d
   23764:	20005930 	.word	0x20005930
   23768:	00001084 	.word	0x00001084
   2376c:	0003b75c 	.word	0x0003b75c
   23770:	0003b44c 	.word	0x0003b44c
   23774:	00020109 	.word	0x00020109
   23778:	0003b480 	.word	0x0003b480
   2377c:	0003b448 	.word	0x0003b448
   23780:	00024ecd 	.word	0x00024ecd
   23784:	0003b4a8 	.word	0x0003b4a8
   23788:	0003b4c0 	.word	0x0003b4c0
   2378c:	0003b500 	.word	0x0003b500
   23790:	0003b524 	.word	0x0003b524
   23794:	0003b548 	.word	0x0003b548
   23798:	0003b568 	.word	0x0003b568
   2379c:	00000207 	.word	0x00000207
   237a0:	0003b58c 	.word	0x0003b58c
   237a4:	0003b5b0 	.word	0x0003b5b0
				}
				if(gstrHifCxt.u8HifRXDone)
   237a8:	4b30      	ldr	r3, [pc, #192]	; (2386c <hif_isr+0x4a0>)
   237aa:	789b      	ldrb	r3, [r3, #2]
   237ac:	b2db      	uxtb	r3, r3
   237ae:	2b00      	cmp	r3, #0
   237b0:	d054      	beq.n	2385c <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   237b2:	4a2f      	ldr	r2, [pc, #188]	; (23870 <hif_isr+0x4a4>)
   237b4:	492f      	ldr	r1, [pc, #188]	; (23874 <hif_isr+0x4a8>)
   237b6:	4b30      	ldr	r3, [pc, #192]	; (23878 <hif_isr+0x4ac>)
   237b8:	0018      	movs	r0, r3
   237ba:	4b30      	ldr	r3, [pc, #192]	; (2387c <hif_isr+0x4b0>)
   237bc:	4798      	blx	r3
   237be:	1d3b      	adds	r3, r7, #4
   237c0:	781b      	ldrb	r3, [r3, #0]
   237c2:	b2db      	uxtb	r3, r3
   237c4:	0019      	movs	r1, r3
   237c6:	1d3b      	adds	r3, r7, #4
   237c8:	785b      	ldrb	r3, [r3, #1]
   237ca:	b2db      	uxtb	r3, r3
   237cc:	001a      	movs	r2, r3
   237ce:	4b2c      	ldr	r3, [pc, #176]	; (23880 <hif_isr+0x4b4>)
   237d0:	0018      	movs	r0, r3
   237d2:	4b2a      	ldr	r3, [pc, #168]	; (2387c <hif_isr+0x4b0>)
   237d4:	4798      	blx	r3
   237d6:	4b2b      	ldr	r3, [pc, #172]	; (23884 <hif_isr+0x4b8>)
   237d8:	0018      	movs	r0, r3
   237da:	4b28      	ldr	r3, [pc, #160]	; (2387c <hif_isr+0x4b0>)
   237dc:	4798      	blx	r3
					ret = hif_set_rx_done();
   237de:	230f      	movs	r3, #15
   237e0:	18fc      	adds	r4, r7, r3
   237e2:	4b29      	ldr	r3, [pc, #164]	; (23888 <hif_isr+0x4bc>)
   237e4:	4798      	blx	r3
   237e6:	0003      	movs	r3, r0
   237e8:	7023      	strb	r3, [r4, #0]
   237ea:	e037      	b.n	2385c <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   237ec:	4a27      	ldr	r2, [pc, #156]	; (2388c <hif_isr+0x4c0>)
   237ee:	4921      	ldr	r1, [pc, #132]	; (23874 <hif_isr+0x4a8>)
   237f0:	4b21      	ldr	r3, [pc, #132]	; (23878 <hif_isr+0x4ac>)
   237f2:	0018      	movs	r0, r3
   237f4:	4b21      	ldr	r3, [pc, #132]	; (2387c <hif_isr+0x4b0>)
   237f6:	4798      	blx	r3
   237f8:	4b25      	ldr	r3, [pc, #148]	; (23890 <hif_isr+0x4c4>)
   237fa:	0018      	movs	r0, r3
   237fc:	4b1f      	ldr	r3, [pc, #124]	; (2387c <hif_isr+0x4b0>)
   237fe:	4798      	blx	r3
   23800:	4b20      	ldr	r3, [pc, #128]	; (23884 <hif_isr+0x4b8>)
   23802:	0018      	movs	r0, r3
   23804:	4b1d      	ldr	r3, [pc, #116]	; (2387c <hif_isr+0x4b0>)
   23806:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   23808:	230f      	movs	r3, #15
   2380a:	18fb      	adds	r3, r7, r3
   2380c:	22fe      	movs	r2, #254	; 0xfe
   2380e:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   23810:	e024      	b.n	2385c <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   23812:	4a20      	ldr	r2, [pc, #128]	; (23894 <hif_isr+0x4c8>)
   23814:	4917      	ldr	r1, [pc, #92]	; (23874 <hif_isr+0x4a8>)
   23816:	4b18      	ldr	r3, [pc, #96]	; (23878 <hif_isr+0x4ac>)
   23818:	0018      	movs	r0, r3
   2381a:	4b18      	ldr	r3, [pc, #96]	; (2387c <hif_isr+0x4b0>)
   2381c:	4798      	blx	r3
   2381e:	68ba      	ldr	r2, [r7, #8]
   23820:	4b1d      	ldr	r3, [pc, #116]	; (23898 <hif_isr+0x4cc>)
   23822:	0011      	movs	r1, r2
   23824:	0018      	movs	r0, r3
   23826:	4b15      	ldr	r3, [pc, #84]	; (2387c <hif_isr+0x4b0>)
   23828:	4798      	blx	r3
   2382a:	4b16      	ldr	r3, [pc, #88]	; (23884 <hif_isr+0x4b8>)
   2382c:	0018      	movs	r0, r3
   2382e:	4b13      	ldr	r3, [pc, #76]	; (2387c <hif_isr+0x4b0>)
   23830:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23832:	230f      	movs	r3, #15
   23834:	18fb      	adds	r3, r7, r3
   23836:	22f4      	movs	r2, #244	; 0xf4
   23838:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2383a:	e00f      	b.n	2385c <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   2383c:	4a17      	ldr	r2, [pc, #92]	; (2389c <hif_isr+0x4d0>)
   2383e:	490d      	ldr	r1, [pc, #52]	; (23874 <hif_isr+0x4a8>)
   23840:	4b0d      	ldr	r3, [pc, #52]	; (23878 <hif_isr+0x4ac>)
   23842:	0018      	movs	r0, r3
   23844:	4b0d      	ldr	r3, [pc, #52]	; (2387c <hif_isr+0x4b0>)
   23846:	4798      	blx	r3
   23848:	4b15      	ldr	r3, [pc, #84]	; (238a0 <hif_isr+0x4d4>)
   2384a:	0018      	movs	r0, r3
   2384c:	4b0b      	ldr	r3, [pc, #44]	; (2387c <hif_isr+0x4b0>)
   2384e:	4798      	blx	r3
   23850:	4b0c      	ldr	r3, [pc, #48]	; (23884 <hif_isr+0x4b8>)
   23852:	0018      	movs	r0, r3
   23854:	4b09      	ldr	r3, [pc, #36]	; (2387c <hif_isr+0x4b0>)
   23856:	4798      	blx	r3
		goto ERR1;
   23858:	e000      	b.n	2385c <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   2385a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2385c:	230f      	movs	r3, #15
   2385e:	18fb      	adds	r3, r7, r3
   23860:	781b      	ldrb	r3, [r3, #0]
   23862:	b25b      	sxtb	r3, r3
}
   23864:	0018      	movs	r0, r3
   23866:	46bd      	mov	sp, r7
   23868:	b005      	add	sp, #20
   2386a:	bd90      	pop	{r4, r7, pc}
   2386c:	20005930 	.word	0x20005930
   23870:	00000216 	.word	0x00000216
   23874:	0003b75c 	.word	0x0003b75c
   23878:	0003b44c 	.word	0x0003b44c
   2387c:	00020109 	.word	0x00020109
   23880:	0003b5c8 	.word	0x0003b5c8
   23884:	0003b448 	.word	0x0003b448
   23888:	00022e61 	.word	0x00022e61
   2388c:	0000021d 	.word	0x0000021d
   23890:	0003b5f4 	.word	0x0003b5f4
   23894:	00000225 	.word	0x00000225
   23898:	0003b608 	.word	0x0003b608
   2389c:	0000022e 	.word	0x0000022e
   238a0:	0003b624 	.word	0x0003b624

000238a4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   238a4:	b590      	push	{r4, r7, lr}
   238a6:	b083      	sub	sp, #12
   238a8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   238aa:	1dfb      	adds	r3, r7, #7
   238ac:	2200      	movs	r2, #0
   238ae:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   238b0:	4b1c      	ldr	r3, [pc, #112]	; (23924 <hif_handle_isr+0x80>)
   238b2:	2200      	movs	r2, #0
   238b4:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   238b6:	e024      	b.n	23902 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   238b8:	4b1a      	ldr	r3, [pc, #104]	; (23924 <hif_handle_isr+0x80>)
   238ba:	78db      	ldrb	r3, [r3, #3]
   238bc:	b2db      	uxtb	r3, r3
   238be:	3b01      	subs	r3, #1
   238c0:	b2da      	uxtb	r2, r3
   238c2:	4b18      	ldr	r3, [pc, #96]	; (23924 <hif_handle_isr+0x80>)
   238c4:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   238c6:	1dfc      	adds	r4, r7, #7
   238c8:	4b17      	ldr	r3, [pc, #92]	; (23928 <hif_handle_isr+0x84>)
   238ca:	4798      	blx	r3
   238cc:	0003      	movs	r3, r0
   238ce:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   238d0:	1dfb      	adds	r3, r7, #7
   238d2:	781b      	ldrb	r3, [r3, #0]
   238d4:	b25b      	sxtb	r3, r3
   238d6:	2b00      	cmp	r3, #0
   238d8:	d100      	bne.n	238dc <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   238da:	e012      	b.n	23902 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   238dc:	4a13      	ldr	r2, [pc, #76]	; (2392c <hif_handle_isr+0x88>)
   238de:	4914      	ldr	r1, [pc, #80]	; (23930 <hif_handle_isr+0x8c>)
   238e0:	4b14      	ldr	r3, [pc, #80]	; (23934 <hif_handle_isr+0x90>)
   238e2:	0018      	movs	r0, r3
   238e4:	4b14      	ldr	r3, [pc, #80]	; (23938 <hif_handle_isr+0x94>)
   238e6:	4798      	blx	r3
   238e8:	1dfb      	adds	r3, r7, #7
   238ea:	2200      	movs	r2, #0
   238ec:	569a      	ldrsb	r2, [r3, r2]
   238ee:	4b13      	ldr	r3, [pc, #76]	; (2393c <hif_handle_isr+0x98>)
   238f0:	0011      	movs	r1, r2
   238f2:	0018      	movs	r0, r3
   238f4:	4b10      	ldr	r3, [pc, #64]	; (23938 <hif_handle_isr+0x94>)
   238f6:	4798      	blx	r3
   238f8:	4b11      	ldr	r3, [pc, #68]	; (23940 <hif_handle_isr+0x9c>)
   238fa:	0018      	movs	r0, r3
   238fc:	4b0e      	ldr	r3, [pc, #56]	; (23938 <hif_handle_isr+0x94>)
   238fe:	4798      	blx	r3
			ret = hif_isr();
   23900:	e7e1      	b.n	238c6 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   23902:	4b08      	ldr	r3, [pc, #32]	; (23924 <hif_handle_isr+0x80>)
   23904:	78db      	ldrb	r3, [r3, #3]
   23906:	b2db      	uxtb	r3, r3
   23908:	2b00      	cmp	r3, #0
   2390a:	d004      	beq.n	23916 <hif_handle_isr+0x72>
   2390c:	4b05      	ldr	r3, [pc, #20]	; (23924 <hif_handle_isr+0x80>)
   2390e:	791b      	ldrb	r3, [r3, #4]
   23910:	b2db      	uxtb	r3, r3
   23912:	2b00      	cmp	r3, #0
   23914:	d0d0      	beq.n	238b8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   23916:	1dfb      	adds	r3, r7, #7
   23918:	781b      	ldrb	r3, [r3, #0]
   2391a:	b25b      	sxtb	r3, r3
}
   2391c:	0018      	movs	r0, r3
   2391e:	46bd      	mov	sp, r7
   23920:	b003      	add	sp, #12
   23922:	bd90      	pop	{r4, r7, pc}
   23924:	20005930 	.word	0x20005930
   23928:	000233cd 	.word	0x000233cd
   2392c:	00000257 	.word	0x00000257
   23930:	0003b764 	.word	0x0003b764
   23934:	0003b44c 	.word	0x0003b44c
   23938:	00020109 	.word	0x00020109
   2393c:	0003b648 	.word	0x0003b648
   23940:	0003b448 	.word	0x0003b448

00023944 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   23944:	b590      	push	{r4, r7, lr}
   23946:	b087      	sub	sp, #28
   23948:	af00      	add	r7, sp, #0
   2394a:	60f8      	str	r0, [r7, #12]
   2394c:	60b9      	str	r1, [r7, #8]
   2394e:	0019      	movs	r1, r3
   23950:	1dbb      	adds	r3, r7, #6
   23952:	801a      	strh	r2, [r3, #0]
   23954:	1d7b      	adds	r3, r7, #5
   23956:	1c0a      	adds	r2, r1, #0
   23958:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2395a:	2317      	movs	r3, #23
   2395c:	18fb      	adds	r3, r7, r3
   2395e:	2200      	movs	r2, #0
   23960:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   23962:	68fb      	ldr	r3, [r7, #12]
   23964:	2b00      	cmp	r3, #0
   23966:	d006      	beq.n	23976 <hif_receive+0x32>
   23968:	68bb      	ldr	r3, [r7, #8]
   2396a:	2b00      	cmp	r3, #0
   2396c:	d003      	beq.n	23976 <hif_receive+0x32>
   2396e:	1dbb      	adds	r3, r7, #6
   23970:	881b      	ldrh	r3, [r3, #0]
   23972:	2b00      	cmp	r3, #0
   23974:	d11e      	bne.n	239b4 <hif_receive+0x70>
	{
		if(isDone)
   23976:	1d7b      	adds	r3, r7, #5
   23978:	781b      	ldrb	r3, [r3, #0]
   2397a:	2b00      	cmp	r3, #0
   2397c:	d006      	beq.n	2398c <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   2397e:	2317      	movs	r3, #23
   23980:	18fc      	adds	r4, r7, r3
   23982:	4b45      	ldr	r3, [pc, #276]	; (23a98 <hif_receive+0x154>)
   23984:	4798      	blx	r3
   23986:	0003      	movs	r3, r0
   23988:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2398a:	e07c      	b.n	23a86 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   2398c:	2317      	movs	r3, #23
   2398e:	18fb      	adds	r3, r7, r3
   23990:	22f4      	movs	r2, #244	; 0xf4
   23992:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   23994:	239e      	movs	r3, #158	; 0x9e
   23996:	009a      	lsls	r2, r3, #2
   23998:	4940      	ldr	r1, [pc, #256]	; (23a9c <hif_receive+0x158>)
   2399a:	4b41      	ldr	r3, [pc, #260]	; (23aa0 <hif_receive+0x15c>)
   2399c:	0018      	movs	r0, r3
   2399e:	4b41      	ldr	r3, [pc, #260]	; (23aa4 <hif_receive+0x160>)
   239a0:	4798      	blx	r3
   239a2:	4b41      	ldr	r3, [pc, #260]	; (23aa8 <hif_receive+0x164>)
   239a4:	0018      	movs	r0, r3
   239a6:	4b3f      	ldr	r3, [pc, #252]	; (23aa4 <hif_receive+0x160>)
   239a8:	4798      	blx	r3
   239aa:	4b40      	ldr	r3, [pc, #256]	; (23aac <hif_receive+0x168>)
   239ac:	0018      	movs	r0, r3
   239ae:	4b3d      	ldr	r3, [pc, #244]	; (23aa4 <hif_receive+0x160>)
   239b0:	4798      	blx	r3
		goto ERR1;
   239b2:	e068      	b.n	23a86 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   239b4:	1dbb      	adds	r3, r7, #6
   239b6:	881a      	ldrh	r2, [r3, #0]
   239b8:	4b3d      	ldr	r3, [pc, #244]	; (23ab0 <hif_receive+0x16c>)
   239ba:	68db      	ldr	r3, [r3, #12]
   239bc:	429a      	cmp	r2, r3
   239be:	d917      	bls.n	239f0 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   239c0:	2317      	movs	r3, #23
   239c2:	18fb      	adds	r3, r7, r3
   239c4:	22f4      	movs	r2, #244	; 0xf4
   239c6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   239c8:	23a0      	movs	r3, #160	; 0xa0
   239ca:	009a      	lsls	r2, r3, #2
   239cc:	4933      	ldr	r1, [pc, #204]	; (23a9c <hif_receive+0x158>)
   239ce:	4b34      	ldr	r3, [pc, #208]	; (23aa0 <hif_receive+0x15c>)
   239d0:	0018      	movs	r0, r3
   239d2:	4b34      	ldr	r3, [pc, #208]	; (23aa4 <hif_receive+0x160>)
   239d4:	4798      	blx	r3
   239d6:	1dbb      	adds	r3, r7, #6
   239d8:	8819      	ldrh	r1, [r3, #0]
   239da:	4b35      	ldr	r3, [pc, #212]	; (23ab0 <hif_receive+0x16c>)
   239dc:	68da      	ldr	r2, [r3, #12]
   239de:	4b35      	ldr	r3, [pc, #212]	; (23ab4 <hif_receive+0x170>)
   239e0:	0018      	movs	r0, r3
   239e2:	4b30      	ldr	r3, [pc, #192]	; (23aa4 <hif_receive+0x160>)
   239e4:	4798      	blx	r3
   239e6:	4b31      	ldr	r3, [pc, #196]	; (23aac <hif_receive+0x168>)
   239e8:	0018      	movs	r0, r3
   239ea:	4b2e      	ldr	r3, [pc, #184]	; (23aa4 <hif_receive+0x160>)
   239ec:	4798      	blx	r3
		goto ERR1;
   239ee:	e04a      	b.n	23a86 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   239f0:	4b2f      	ldr	r3, [pc, #188]	; (23ab0 <hif_receive+0x16c>)
   239f2:	689a      	ldr	r2, [r3, #8]
   239f4:	68fb      	ldr	r3, [r7, #12]
   239f6:	429a      	cmp	r2, r3
   239f8:	d80a      	bhi.n	23a10 <hif_receive+0xcc>
   239fa:	1dbb      	adds	r3, r7, #6
   239fc:	881a      	ldrh	r2, [r3, #0]
   239fe:	68fb      	ldr	r3, [r7, #12]
   23a00:	18d2      	adds	r2, r2, r3
   23a02:	4b2b      	ldr	r3, [pc, #172]	; (23ab0 <hif_receive+0x16c>)
   23a04:	6899      	ldr	r1, [r3, #8]
   23a06:	4b2a      	ldr	r3, [pc, #168]	; (23ab0 <hif_receive+0x16c>)
   23a08:	68db      	ldr	r3, [r3, #12]
   23a0a:	18cb      	adds	r3, r1, r3
   23a0c:	429a      	cmp	r2, r3
   23a0e:	d912      	bls.n	23a36 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   23a10:	2317      	movs	r3, #23
   23a12:	18fb      	adds	r3, r7, r3
   23a14:	22f4      	movs	r2, #244	; 0xf4
   23a16:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   23a18:	4a27      	ldr	r2, [pc, #156]	; (23ab8 <hif_receive+0x174>)
   23a1a:	4920      	ldr	r1, [pc, #128]	; (23a9c <hif_receive+0x158>)
   23a1c:	4b20      	ldr	r3, [pc, #128]	; (23aa0 <hif_receive+0x15c>)
   23a1e:	0018      	movs	r0, r3
   23a20:	4b20      	ldr	r3, [pc, #128]	; (23aa4 <hif_receive+0x160>)
   23a22:	4798      	blx	r3
   23a24:	4b25      	ldr	r3, [pc, #148]	; (23abc <hif_receive+0x178>)
   23a26:	0018      	movs	r0, r3
   23a28:	4b1e      	ldr	r3, [pc, #120]	; (23aa4 <hif_receive+0x160>)
   23a2a:	4798      	blx	r3
   23a2c:	4b1f      	ldr	r3, [pc, #124]	; (23aac <hif_receive+0x168>)
   23a2e:	0018      	movs	r0, r3
   23a30:	4b1c      	ldr	r3, [pc, #112]	; (23aa4 <hif_receive+0x160>)
   23a32:	4798      	blx	r3
		goto ERR1;
   23a34:	e027      	b.n	23a86 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   23a36:	1dbb      	adds	r3, r7, #6
   23a38:	881a      	ldrh	r2, [r3, #0]
   23a3a:	2317      	movs	r3, #23
   23a3c:	18fc      	adds	r4, r7, r3
   23a3e:	68b9      	ldr	r1, [r7, #8]
   23a40:	68fb      	ldr	r3, [r7, #12]
   23a42:	0018      	movs	r0, r3
   23a44:	4b1e      	ldr	r3, [pc, #120]	; (23ac0 <hif_receive+0x17c>)
   23a46:	4798      	blx	r3
   23a48:	0003      	movs	r3, r0
   23a4a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23a4c:	2317      	movs	r3, #23
   23a4e:	18fb      	adds	r3, r7, r3
   23a50:	781b      	ldrb	r3, [r3, #0]
   23a52:	b25b      	sxtb	r3, r3
   23a54:	2b00      	cmp	r3, #0
   23a56:	d115      	bne.n	23a84 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   23a58:	4b15      	ldr	r3, [pc, #84]	; (23ab0 <hif_receive+0x16c>)
   23a5a:	689a      	ldr	r2, [r3, #8]
   23a5c:	4b14      	ldr	r3, [pc, #80]	; (23ab0 <hif_receive+0x16c>)
   23a5e:	68db      	ldr	r3, [r3, #12]
   23a60:	18d2      	adds	r2, r2, r3
   23a62:	1dbb      	adds	r3, r7, #6
   23a64:	8819      	ldrh	r1, [r3, #0]
   23a66:	68fb      	ldr	r3, [r7, #12]
   23a68:	18cb      	adds	r3, r1, r3
   23a6a:	429a      	cmp	r2, r3
   23a6c:	d003      	beq.n	23a76 <hif_receive+0x132>
   23a6e:	1d7b      	adds	r3, r7, #5
   23a70:	781b      	ldrb	r3, [r3, #0]
   23a72:	2b00      	cmp	r3, #0
   23a74:	d007      	beq.n	23a86 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   23a76:	2317      	movs	r3, #23
   23a78:	18fc      	adds	r4, r7, r3
   23a7a:	4b07      	ldr	r3, [pc, #28]	; (23a98 <hif_receive+0x154>)
   23a7c:	4798      	blx	r3
   23a7e:	0003      	movs	r3, r0
   23a80:	7023      	strb	r3, [r4, #0]
   23a82:	e000      	b.n	23a86 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   23a84:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23a86:	2317      	movs	r3, #23
   23a88:	18fb      	adds	r3, r7, r3
   23a8a:	781b      	ldrb	r3, [r3, #0]
   23a8c:	b25b      	sxtb	r3, r3
}
   23a8e:	0018      	movs	r0, r3
   23a90:	46bd      	mov	sp, r7
   23a92:	b007      	add	sp, #28
   23a94:	bd90      	pop	{r4, r7, pc}
   23a96:	46c0      	nop			; (mov r8, r8)
   23a98:	00022e61 	.word	0x00022e61
   23a9c:	0003b774 	.word	0x0003b774
   23aa0:	0003b44c 	.word	0x0003b44c
   23aa4:	00020109 	.word	0x00020109
   23aa8:	0003b678 	.word	0x0003b678
   23aac:	0003b448 	.word	0x0003b448
   23ab0:	20005930 	.word	0x20005930
   23ab4:	0003b698 	.word	0x0003b698
   23ab8:	00000286 	.word	0x00000286
   23abc:	0003b6e0 	.word	0x0003b6e0
   23ac0:	00024ecd 	.word	0x00024ecd

00023ac4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   23ac4:	b580      	push	{r7, lr}
   23ac6:	b084      	sub	sp, #16
   23ac8:	af00      	add	r7, sp, #0
   23aca:	0002      	movs	r2, r0
   23acc:	6039      	str	r1, [r7, #0]
   23ace:	1dfb      	adds	r3, r7, #7
   23ad0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23ad2:	230f      	movs	r3, #15
   23ad4:	18fb      	adds	r3, r7, r3
   23ad6:	2200      	movs	r2, #0
   23ad8:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   23ada:	1dfb      	adds	r3, r7, #7
   23adc:	781b      	ldrb	r3, [r3, #0]
   23ade:	2b07      	cmp	r3, #7
   23ae0:	d820      	bhi.n	23b24 <hif_register_cb+0x60>
   23ae2:	009a      	lsls	r2, r3, #2
   23ae4:	4b1e      	ldr	r3, [pc, #120]	; (23b60 <hif_register_cb+0x9c>)
   23ae6:	18d3      	adds	r3, r2, r3
   23ae8:	681b      	ldr	r3, [r3, #0]
   23aea:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   23aec:	4b1d      	ldr	r3, [pc, #116]	; (23b64 <hif_register_cb+0xa0>)
   23aee:	683a      	ldr	r2, [r7, #0]
   23af0:	615a      	str	r2, [r3, #20]
			break;
   23af2:	e02d      	b.n	23b50 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   23af4:	4b1b      	ldr	r3, [pc, #108]	; (23b64 <hif_register_cb+0xa0>)
   23af6:	683a      	ldr	r2, [r7, #0]
   23af8:	611a      	str	r2, [r3, #16]
			break;
   23afa:	e029      	b.n	23b50 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   23afc:	4b19      	ldr	r3, [pc, #100]	; (23b64 <hif_register_cb+0xa0>)
   23afe:	683a      	ldr	r2, [r7, #0]
   23b00:	619a      	str	r2, [r3, #24]
			break;
   23b02:	e025      	b.n	23b50 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   23b04:	4b17      	ldr	r3, [pc, #92]	; (23b64 <hif_register_cb+0xa0>)
   23b06:	683a      	ldr	r2, [r7, #0]
   23b08:	621a      	str	r2, [r3, #32]
			break;
   23b0a:	e021      	b.n	23b50 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   23b0c:	4b15      	ldr	r3, [pc, #84]	; (23b64 <hif_register_cb+0xa0>)
   23b0e:	683a      	ldr	r2, [r7, #0]
   23b10:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   23b12:	e01d      	b.n	23b50 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   23b14:	4b13      	ldr	r3, [pc, #76]	; (23b64 <hif_register_cb+0xa0>)
   23b16:	683a      	ldr	r2, [r7, #0]
   23b18:	61da      	str	r2, [r3, #28]
			break;
   23b1a:	e019      	b.n	23b50 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   23b1c:	4b11      	ldr	r3, [pc, #68]	; (23b64 <hif_register_cb+0xa0>)
   23b1e:	683a      	ldr	r2, [r7, #0]
   23b20:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   23b22:	e015      	b.n	23b50 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   23b24:	4a10      	ldr	r2, [pc, #64]	; (23b68 <hif_register_cb+0xa4>)
   23b26:	4911      	ldr	r1, [pc, #68]	; (23b6c <hif_register_cb+0xa8>)
   23b28:	4b11      	ldr	r3, [pc, #68]	; (23b70 <hif_register_cb+0xac>)
   23b2a:	0018      	movs	r0, r3
   23b2c:	4b11      	ldr	r3, [pc, #68]	; (23b74 <hif_register_cb+0xb0>)
   23b2e:	4798      	blx	r3
   23b30:	1dfb      	adds	r3, r7, #7
   23b32:	781a      	ldrb	r2, [r3, #0]
   23b34:	4b10      	ldr	r3, [pc, #64]	; (23b78 <hif_register_cb+0xb4>)
   23b36:	0011      	movs	r1, r2
   23b38:	0018      	movs	r0, r3
   23b3a:	4b0e      	ldr	r3, [pc, #56]	; (23b74 <hif_register_cb+0xb0>)
   23b3c:	4798      	blx	r3
   23b3e:	4b0f      	ldr	r3, [pc, #60]	; (23b7c <hif_register_cb+0xb8>)
   23b40:	0018      	movs	r0, r3
   23b42:	4b0c      	ldr	r3, [pc, #48]	; (23b74 <hif_register_cb+0xb0>)
   23b44:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23b46:	230f      	movs	r3, #15
   23b48:	18fb      	adds	r3, r7, r3
   23b4a:	22f4      	movs	r2, #244	; 0xf4
   23b4c:	701a      	strb	r2, [r3, #0]
			break;
   23b4e:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   23b50:	230f      	movs	r3, #15
   23b52:	18fb      	adds	r3, r7, r3
   23b54:	781b      	ldrb	r3, [r3, #0]
   23b56:	b25b      	sxtb	r3, r3
}
   23b58:	0018      	movs	r0, r3
   23b5a:	46bd      	mov	sp, r7
   23b5c:	b004      	add	sp, #16
   23b5e:	bd80      	pop	{r7, pc}
   23b60:	0003b730 	.word	0x0003b730
   23b64:	20005930 	.word	0x20005930
   23b68:	000002be 	.word	0x000002be
   23b6c:	0003b780 	.word	0x0003b780
   23b70:	0003b44c 	.word	0x0003b44c
   23b74:	00020109 	.word	0x00020109
   23b78:	0003b724 	.word	0x0003b724
   23b7c:	0003b448 	.word	0x0003b448

00023b80 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   23b80:	b590      	push	{r4, r7, lr}
   23b82:	b0af      	sub	sp, #188	; 0xbc
   23b84:	af02      	add	r7, sp, #8
   23b86:	603a      	str	r2, [r7, #0]
   23b88:	1dfb      	adds	r3, r7, #7
   23b8a:	1c02      	adds	r2, r0, #0
   23b8c:	701a      	strb	r2, [r3, #0]
   23b8e:	1d3b      	adds	r3, r7, #4
   23b90:	1c0a      	adds	r2, r1, #0
   23b92:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   23b94:	1dfb      	adds	r3, r7, #7
   23b96:	781b      	ldrb	r3, [r3, #0]
   23b98:	2b2c      	cmp	r3, #44	; 0x2c
   23b9a:	d116      	bne.n	23bca <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   23b9c:	23a4      	movs	r3, #164	; 0xa4
   23b9e:	18f9      	adds	r1, r7, r3
   23ba0:	6838      	ldr	r0, [r7, #0]
   23ba2:	2300      	movs	r3, #0
   23ba4:	2204      	movs	r2, #4
   23ba6:	4cca      	ldr	r4, [pc, #808]	; (23ed0 <m2m_wifi_cb+0x350>)
   23ba8:	47a0      	blx	r4
   23baa:	1e03      	subs	r3, r0, #0
   23bac:	d000      	beq.n	23bb0 <m2m_wifi_cb+0x30>
   23bae:	e1b4      	b.n	23f1a <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   23bb0:	4bc8      	ldr	r3, [pc, #800]	; (23ed4 <m2m_wifi_cb+0x354>)
   23bb2:	681b      	ldr	r3, [r3, #0]
   23bb4:	2b00      	cmp	r3, #0
   23bb6:	d100      	bne.n	23bba <m2m_wifi_cb+0x3a>
   23bb8:	e1af      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   23bba:	4bc6      	ldr	r3, [pc, #792]	; (23ed4 <m2m_wifi_cb+0x354>)
   23bbc:	681b      	ldr	r3, [r3, #0]
   23bbe:	22a4      	movs	r2, #164	; 0xa4
   23bc0:	18ba      	adds	r2, r7, r2
   23bc2:	0011      	movs	r1, r2
   23bc4:	202c      	movs	r0, #44	; 0x2c
   23bc6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   23bc8:	e1a7      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   23bca:	1dfb      	adds	r3, r7, #7
   23bcc:	781b      	ldrb	r3, [r3, #0]
   23bce:	2b1b      	cmp	r3, #27
   23bd0:	d116      	bne.n	23c00 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   23bd2:	239c      	movs	r3, #156	; 0x9c
   23bd4:	18f9      	adds	r1, r7, r3
   23bd6:	6838      	ldr	r0, [r7, #0]
   23bd8:	2300      	movs	r3, #0
   23bda:	2208      	movs	r2, #8
   23bdc:	4cbc      	ldr	r4, [pc, #752]	; (23ed0 <m2m_wifi_cb+0x350>)
   23bde:	47a0      	blx	r4
   23be0:	1e03      	subs	r3, r0, #0
   23be2:	d000      	beq.n	23be6 <m2m_wifi_cb+0x66>
   23be4:	e199      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23be6:	4bbb      	ldr	r3, [pc, #748]	; (23ed4 <m2m_wifi_cb+0x354>)
   23be8:	681b      	ldr	r3, [r3, #0]
   23bea:	2b00      	cmp	r3, #0
   23bec:	d100      	bne.n	23bf0 <m2m_wifi_cb+0x70>
   23bee:	e194      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   23bf0:	4bb8      	ldr	r3, [pc, #736]	; (23ed4 <m2m_wifi_cb+0x354>)
   23bf2:	681b      	ldr	r3, [r3, #0]
   23bf4:	229c      	movs	r2, #156	; 0x9c
   23bf6:	18ba      	adds	r2, r7, r2
   23bf8:	0011      	movs	r1, r2
   23bfa:	201b      	movs	r0, #27
   23bfc:	4798      	blx	r3
}
   23bfe:	e18c      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   23c00:	1dfb      	adds	r3, r7, #7
   23c02:	781b      	ldrb	r3, [r3, #0]
   23c04:	2b06      	cmp	r3, #6
   23c06:	d116      	bne.n	23c36 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   23c08:	230c      	movs	r3, #12
   23c0a:	18f9      	adds	r1, r7, r3
   23c0c:	6838      	ldr	r0, [r7, #0]
   23c0e:	2301      	movs	r3, #1
   23c10:	2230      	movs	r2, #48	; 0x30
   23c12:	4caf      	ldr	r4, [pc, #700]	; (23ed0 <m2m_wifi_cb+0x350>)
   23c14:	47a0      	blx	r4
   23c16:	1e03      	subs	r3, r0, #0
   23c18:	d000      	beq.n	23c1c <m2m_wifi_cb+0x9c>
   23c1a:	e17e      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   23c1c:	4bad      	ldr	r3, [pc, #692]	; (23ed4 <m2m_wifi_cb+0x354>)
   23c1e:	681b      	ldr	r3, [r3, #0]
   23c20:	2b00      	cmp	r3, #0
   23c22:	d100      	bne.n	23c26 <m2m_wifi_cb+0xa6>
   23c24:	e179      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   23c26:	4bab      	ldr	r3, [pc, #684]	; (23ed4 <m2m_wifi_cb+0x354>)
   23c28:	681b      	ldr	r3, [r3, #0]
   23c2a:	220c      	movs	r2, #12
   23c2c:	18ba      	adds	r2, r7, r2
   23c2e:	0011      	movs	r1, r2
   23c30:	2006      	movs	r0, #6
   23c32:	4798      	blx	r3
}
   23c34:	e171      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   23c36:	1dfb      	adds	r3, r7, #7
   23c38:	781b      	ldrb	r3, [r3, #0]
   23c3a:	2b0e      	cmp	r3, #14
   23c3c:	d100      	bne.n	23c40 <m2m_wifi_cb+0xc0>
   23c3e:	e16c      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   23c40:	1dfb      	adds	r3, r7, #7
   23c42:	781b      	ldrb	r3, [r3, #0]
   23c44:	2b32      	cmp	r3, #50	; 0x32
   23c46:	d116      	bne.n	23c76 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   23c48:	2384      	movs	r3, #132	; 0x84
   23c4a:	18f9      	adds	r1, r7, r3
   23c4c:	6838      	ldr	r0, [r7, #0]
   23c4e:	2300      	movs	r3, #0
   23c50:	2218      	movs	r2, #24
   23c52:	4c9f      	ldr	r4, [pc, #636]	; (23ed0 <m2m_wifi_cb+0x350>)
   23c54:	47a0      	blx	r4
   23c56:	1e03      	subs	r3, r0, #0
   23c58:	d000      	beq.n	23c5c <m2m_wifi_cb+0xdc>
   23c5a:	e15e      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23c5c:	4b9d      	ldr	r3, [pc, #628]	; (23ed4 <m2m_wifi_cb+0x354>)
   23c5e:	681b      	ldr	r3, [r3, #0]
   23c60:	2b00      	cmp	r3, #0
   23c62:	d100      	bne.n	23c66 <m2m_wifi_cb+0xe6>
   23c64:	e159      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   23c66:	4b9b      	ldr	r3, [pc, #620]	; (23ed4 <m2m_wifi_cb+0x354>)
   23c68:	681b      	ldr	r3, [r3, #0]
   23c6a:	2284      	movs	r2, #132	; 0x84
   23c6c:	18ba      	adds	r2, r7, r2
   23c6e:	0011      	movs	r1, r2
   23c70:	2032      	movs	r0, #50	; 0x32
   23c72:	4798      	blx	r3
}
   23c74:	e151      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   23c76:	1dfb      	adds	r3, r7, #7
   23c78:	781b      	ldrb	r3, [r3, #0]
   23c7a:	2b2f      	cmp	r3, #47	; 0x2f
   23c7c:	d11d      	bne.n	23cba <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   23c7e:	230c      	movs	r3, #12
   23c80:	18fb      	adds	r3, r7, r3
   23c82:	2264      	movs	r2, #100	; 0x64
   23c84:	2100      	movs	r1, #0
   23c86:	0018      	movs	r0, r3
   23c88:	4b93      	ldr	r3, [pc, #588]	; (23ed8 <m2m_wifi_cb+0x358>)
   23c8a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   23c8c:	230c      	movs	r3, #12
   23c8e:	18f9      	adds	r1, r7, r3
   23c90:	6838      	ldr	r0, [r7, #0]
   23c92:	2300      	movs	r3, #0
   23c94:	2264      	movs	r2, #100	; 0x64
   23c96:	4c8e      	ldr	r4, [pc, #568]	; (23ed0 <m2m_wifi_cb+0x350>)
   23c98:	47a0      	blx	r4
   23c9a:	1e03      	subs	r3, r0, #0
   23c9c:	d000      	beq.n	23ca0 <m2m_wifi_cb+0x120>
   23c9e:	e13c      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23ca0:	4b8c      	ldr	r3, [pc, #560]	; (23ed4 <m2m_wifi_cb+0x354>)
   23ca2:	681b      	ldr	r3, [r3, #0]
   23ca4:	2b00      	cmp	r3, #0
   23ca6:	d100      	bne.n	23caa <m2m_wifi_cb+0x12a>
   23ca8:	e137      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   23caa:	4b8a      	ldr	r3, [pc, #552]	; (23ed4 <m2m_wifi_cb+0x354>)
   23cac:	681b      	ldr	r3, [r3, #0]
   23cae:	220c      	movs	r2, #12
   23cb0:	18ba      	adds	r2, r7, r2
   23cb2:	0011      	movs	r1, r2
   23cb4:	202f      	movs	r0, #47	; 0x2f
   23cb6:	4798      	blx	r3
}
   23cb8:	e12f      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   23cba:	1dfb      	adds	r3, r7, #7
   23cbc:	781b      	ldrb	r3, [r3, #0]
   23cbe:	2b34      	cmp	r3, #52	; 0x34
   23cc0:	d137      	bne.n	23d32 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   23cc2:	2380      	movs	r3, #128	; 0x80
   23cc4:	18f9      	adds	r1, r7, r3
   23cc6:	6838      	ldr	r0, [r7, #0]
   23cc8:	2300      	movs	r3, #0
   23cca:	2204      	movs	r2, #4
   23ccc:	4c80      	ldr	r4, [pc, #512]	; (23ed0 <m2m_wifi_cb+0x350>)
   23cce:	47a0      	blx	r4
   23cd0:	1e03      	subs	r3, r0, #0
   23cd2:	d000      	beq.n	23cd6 <m2m_wifi_cb+0x156>
   23cd4:	e121      	b.n	23f1a <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   23cd6:	4b81      	ldr	r3, [pc, #516]	; (23edc <m2m_wifi_cb+0x35c>)
   23cd8:	0018      	movs	r0, r3
   23cda:	4b81      	ldr	r3, [pc, #516]	; (23ee0 <m2m_wifi_cb+0x360>)
   23cdc:	4798      	blx	r3
   23cde:	2380      	movs	r3, #128	; 0x80
   23ce0:	18fb      	adds	r3, r7, r3
   23ce2:	681b      	ldr	r3, [r3, #0]
   23ce4:	0e1b      	lsrs	r3, r3, #24
   23ce6:	b2db      	uxtb	r3, r3
   23ce8:	0019      	movs	r1, r3
   23cea:	2380      	movs	r3, #128	; 0x80
   23cec:	18fb      	adds	r3, r7, r3
   23cee:	681b      	ldr	r3, [r3, #0]
   23cf0:	0c1b      	lsrs	r3, r3, #16
   23cf2:	b2db      	uxtb	r3, r3
   23cf4:	001a      	movs	r2, r3
   23cf6:	2380      	movs	r3, #128	; 0x80
   23cf8:	18fb      	adds	r3, r7, r3
   23cfa:	681b      	ldr	r3, [r3, #0]
   23cfc:	0a1b      	lsrs	r3, r3, #8
   23cfe:	b2db      	uxtb	r3, r3
   23d00:	001c      	movs	r4, r3
   23d02:	2380      	movs	r3, #128	; 0x80
   23d04:	18fb      	adds	r3, r7, r3
   23d06:	681b      	ldr	r3, [r3, #0]
   23d08:	b2db      	uxtb	r3, r3
   23d0a:	4876      	ldr	r0, [pc, #472]	; (23ee4 <m2m_wifi_cb+0x364>)
   23d0c:	9300      	str	r3, [sp, #0]
   23d0e:	0023      	movs	r3, r4
   23d10:	4c73      	ldr	r4, [pc, #460]	; (23ee0 <m2m_wifi_cb+0x360>)
   23d12:	47a0      	blx	r4
   23d14:	4b74      	ldr	r3, [pc, #464]	; (23ee8 <m2m_wifi_cb+0x368>)
   23d16:	0018      	movs	r0, r3
   23d18:	4b71      	ldr	r3, [pc, #452]	; (23ee0 <m2m_wifi_cb+0x360>)
   23d1a:	4798      	blx	r3
			if (gpfAppWifiCb)
   23d1c:	4b6d      	ldr	r3, [pc, #436]	; (23ed4 <m2m_wifi_cb+0x354>)
   23d1e:	681b      	ldr	r3, [r3, #0]
   23d20:	2b00      	cmp	r3, #0
   23d22:	d100      	bne.n	23d26 <m2m_wifi_cb+0x1a6>
   23d24:	e0f9      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   23d26:	4b6b      	ldr	r3, [pc, #428]	; (23ed4 <m2m_wifi_cb+0x354>)
   23d28:	681b      	ldr	r3, [r3, #0]
   23d2a:	2100      	movs	r1, #0
   23d2c:	2034      	movs	r0, #52	; 0x34
   23d2e:	4798      	blx	r3
}
   23d30:	e0f3      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   23d32:	1dfb      	adds	r3, r7, #7
   23d34:	781b      	ldrb	r3, [r3, #0]
   23d36:	2b11      	cmp	r3, #17
   23d38:	d11e      	bne.n	23d78 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   23d3a:	4b6c      	ldr	r3, [pc, #432]	; (23eec <m2m_wifi_cb+0x36c>)
   23d3c:	2200      	movs	r2, #0
   23d3e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   23d40:	237c      	movs	r3, #124	; 0x7c
   23d42:	18f9      	adds	r1, r7, r3
   23d44:	6838      	ldr	r0, [r7, #0]
   23d46:	2300      	movs	r3, #0
   23d48:	2204      	movs	r2, #4
   23d4a:	4c61      	ldr	r4, [pc, #388]	; (23ed0 <m2m_wifi_cb+0x350>)
   23d4c:	47a0      	blx	r4
   23d4e:	1e03      	subs	r3, r0, #0
   23d50:	d000      	beq.n	23d54 <m2m_wifi_cb+0x1d4>
   23d52:	e0e2      	b.n	23f1a <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   23d54:	237c      	movs	r3, #124	; 0x7c
   23d56:	18fb      	adds	r3, r7, r3
   23d58:	781a      	ldrb	r2, [r3, #0]
   23d5a:	4b65      	ldr	r3, [pc, #404]	; (23ef0 <m2m_wifi_cb+0x370>)
   23d5c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   23d5e:	4b5d      	ldr	r3, [pc, #372]	; (23ed4 <m2m_wifi_cb+0x354>)
   23d60:	681b      	ldr	r3, [r3, #0]
   23d62:	2b00      	cmp	r3, #0
   23d64:	d100      	bne.n	23d68 <m2m_wifi_cb+0x1e8>
   23d66:	e0d8      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   23d68:	4b5a      	ldr	r3, [pc, #360]	; (23ed4 <m2m_wifi_cb+0x354>)
   23d6a:	681b      	ldr	r3, [r3, #0]
   23d6c:	227c      	movs	r2, #124	; 0x7c
   23d6e:	18ba      	adds	r2, r7, r2
   23d70:	0011      	movs	r1, r2
   23d72:	2011      	movs	r0, #17
   23d74:	4798      	blx	r3
}
   23d76:	e0d0      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   23d78:	1dfb      	adds	r3, r7, #7
   23d7a:	781b      	ldrb	r3, [r3, #0]
   23d7c:	2b13      	cmp	r3, #19
   23d7e:	d116      	bne.n	23dae <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   23d80:	230c      	movs	r3, #12
   23d82:	18f9      	adds	r1, r7, r3
   23d84:	6838      	ldr	r0, [r7, #0]
   23d86:	2300      	movs	r3, #0
   23d88:	222c      	movs	r2, #44	; 0x2c
   23d8a:	4c51      	ldr	r4, [pc, #324]	; (23ed0 <m2m_wifi_cb+0x350>)
   23d8c:	47a0      	blx	r4
   23d8e:	1e03      	subs	r3, r0, #0
   23d90:	d000      	beq.n	23d94 <m2m_wifi_cb+0x214>
   23d92:	e0c2      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23d94:	4b4f      	ldr	r3, [pc, #316]	; (23ed4 <m2m_wifi_cb+0x354>)
   23d96:	681b      	ldr	r3, [r3, #0]
   23d98:	2b00      	cmp	r3, #0
   23d9a:	d100      	bne.n	23d9e <m2m_wifi_cb+0x21e>
   23d9c:	e0bd      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   23d9e:	4b4d      	ldr	r3, [pc, #308]	; (23ed4 <m2m_wifi_cb+0x354>)
   23da0:	681b      	ldr	r3, [r3, #0]
   23da2:	220c      	movs	r2, #12
   23da4:	18ba      	adds	r2, r7, r2
   23da6:	0011      	movs	r1, r2
   23da8:	2013      	movs	r0, #19
   23daa:	4798      	blx	r3
}
   23dac:	e0b5      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   23dae:	1dfb      	adds	r3, r7, #7
   23db0:	781b      	ldrb	r3, [r3, #0]
   23db2:	2b04      	cmp	r3, #4
   23db4:	d116      	bne.n	23de4 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   23db6:	23a8      	movs	r3, #168	; 0xa8
   23db8:	18f9      	adds	r1, r7, r3
   23dba:	6838      	ldr	r0, [r7, #0]
   23dbc:	2300      	movs	r3, #0
   23dbe:	2204      	movs	r2, #4
   23dc0:	4c43      	ldr	r4, [pc, #268]	; (23ed0 <m2m_wifi_cb+0x350>)
   23dc2:	47a0      	blx	r4
   23dc4:	1e03      	subs	r3, r0, #0
   23dc6:	d000      	beq.n	23dca <m2m_wifi_cb+0x24a>
   23dc8:	e0a7      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23dca:	4b42      	ldr	r3, [pc, #264]	; (23ed4 <m2m_wifi_cb+0x354>)
   23dcc:	681b      	ldr	r3, [r3, #0]
   23dce:	2b00      	cmp	r3, #0
   23dd0:	d100      	bne.n	23dd4 <m2m_wifi_cb+0x254>
   23dd2:	e0a2      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   23dd4:	4b3f      	ldr	r3, [pc, #252]	; (23ed4 <m2m_wifi_cb+0x354>)
   23dd6:	681b      	ldr	r3, [r3, #0]
   23dd8:	22a8      	movs	r2, #168	; 0xa8
   23dda:	18ba      	adds	r2, r7, r2
   23ddc:	0011      	movs	r1, r2
   23dde:	2004      	movs	r0, #4
   23de0:	4798      	blx	r3
}
   23de2:	e09a      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   23de4:	1dfb      	adds	r3, r7, #7
   23de6:	781b      	ldrb	r3, [r3, #0]
   23de8:	2b65      	cmp	r3, #101	; 0x65
   23dea:	d116      	bne.n	23e1a <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   23dec:	23a8      	movs	r3, #168	; 0xa8
   23dee:	18f9      	adds	r1, r7, r3
   23df0:	6838      	ldr	r0, [r7, #0]
   23df2:	2300      	movs	r3, #0
   23df4:	2204      	movs	r2, #4
   23df6:	4c36      	ldr	r4, [pc, #216]	; (23ed0 <m2m_wifi_cb+0x350>)
   23df8:	47a0      	blx	r4
   23dfa:	1e03      	subs	r3, r0, #0
   23dfc:	d000      	beq.n	23e00 <m2m_wifi_cb+0x280>
   23dfe:	e08c      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23e00:	4b34      	ldr	r3, [pc, #208]	; (23ed4 <m2m_wifi_cb+0x354>)
   23e02:	681b      	ldr	r3, [r3, #0]
   23e04:	2b00      	cmp	r3, #0
   23e06:	d100      	bne.n	23e0a <m2m_wifi_cb+0x28a>
   23e08:	e087      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   23e0a:	4b32      	ldr	r3, [pc, #200]	; (23ed4 <m2m_wifi_cb+0x354>)
   23e0c:	681b      	ldr	r3, [r3, #0]
   23e0e:	22a8      	movs	r2, #168	; 0xa8
   23e10:	18ba      	adds	r2, r7, r2
   23e12:	0011      	movs	r1, r2
   23e14:	2065      	movs	r0, #101	; 0x65
   23e16:	4798      	blx	r3
}
   23e18:	e07f      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   23e1a:	1dfb      	adds	r3, r7, #7
   23e1c:	781b      	ldrb	r3, [r3, #0]
   23e1e:	2b09      	cmp	r3, #9
   23e20:	d116      	bne.n	23e50 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   23e22:	230c      	movs	r3, #12
   23e24:	18f9      	adds	r1, r7, r3
   23e26:	6838      	ldr	r0, [r7, #0]
   23e28:	2301      	movs	r3, #1
   23e2a:	2264      	movs	r2, #100	; 0x64
   23e2c:	4c28      	ldr	r4, [pc, #160]	; (23ed0 <m2m_wifi_cb+0x350>)
   23e2e:	47a0      	blx	r4
   23e30:	1e03      	subs	r3, r0, #0
   23e32:	d000      	beq.n	23e36 <m2m_wifi_cb+0x2b6>
   23e34:	e071      	b.n	23f1a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   23e36:	4b27      	ldr	r3, [pc, #156]	; (23ed4 <m2m_wifi_cb+0x354>)
   23e38:	681b      	ldr	r3, [r3, #0]
   23e3a:	2b00      	cmp	r3, #0
   23e3c:	d100      	bne.n	23e40 <m2m_wifi_cb+0x2c0>
   23e3e:	e06c      	b.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   23e40:	4b24      	ldr	r3, [pc, #144]	; (23ed4 <m2m_wifi_cb+0x354>)
   23e42:	681b      	ldr	r3, [r3, #0]
   23e44:	220c      	movs	r2, #12
   23e46:	18ba      	adds	r2, r7, r2
   23e48:	0011      	movs	r1, r2
   23e4a:	2009      	movs	r0, #9
   23e4c:	4798      	blx	r3
}
   23e4e:	e064      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   23e50:	1dfb      	adds	r3, r7, #7
   23e52:	781b      	ldrb	r3, [r3, #0]
   23e54:	2b2a      	cmp	r3, #42	; 0x2a
   23e56:	d114      	bne.n	23e82 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   23e58:	2378      	movs	r3, #120	; 0x78
   23e5a:	18f9      	adds	r1, r7, r3
   23e5c:	6838      	ldr	r0, [r7, #0]
   23e5e:	2301      	movs	r3, #1
   23e60:	2204      	movs	r2, #4
   23e62:	4c1b      	ldr	r4, [pc, #108]	; (23ed0 <m2m_wifi_cb+0x350>)
   23e64:	47a0      	blx	r4
   23e66:	1e03      	subs	r3, r0, #0
   23e68:	d157      	bne.n	23f1a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   23e6a:	4b1a      	ldr	r3, [pc, #104]	; (23ed4 <m2m_wifi_cb+0x354>)
   23e6c:	681b      	ldr	r3, [r3, #0]
   23e6e:	2b00      	cmp	r3, #0
   23e70:	d053      	beq.n	23f1a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   23e72:	4b18      	ldr	r3, [pc, #96]	; (23ed4 <m2m_wifi_cb+0x354>)
   23e74:	681b      	ldr	r3, [r3, #0]
   23e76:	2278      	movs	r2, #120	; 0x78
   23e78:	18ba      	adds	r2, r7, r2
   23e7a:	0011      	movs	r1, r2
   23e7c:	202a      	movs	r0, #42	; 0x2a
   23e7e:	4798      	blx	r3
}
   23e80:	e04b      	b.n	23f1a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   23e82:	1dfb      	adds	r3, r7, #7
   23e84:	781b      	ldrb	r3, [r3, #0]
   23e86:	2b20      	cmp	r3, #32
   23e88:	d134      	bne.n	23ef4 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   23e8a:	2370      	movs	r3, #112	; 0x70
   23e8c:	18f9      	adds	r1, r7, r3
   23e8e:	6838      	ldr	r0, [r7, #0]
   23e90:	2300      	movs	r3, #0
   23e92:	2208      	movs	r2, #8
   23e94:	4c0e      	ldr	r4, [pc, #56]	; (23ed0 <m2m_wifi_cb+0x350>)
   23e96:	47a0      	blx	r4
   23e98:	1e03      	subs	r3, r0, #0
   23e9a:	d13e      	bne.n	23f1a <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   23e9c:	683b      	ldr	r3, [r7, #0]
   23e9e:	3308      	adds	r3, #8
   23ea0:	0018      	movs	r0, r3
   23ea2:	2370      	movs	r3, #112	; 0x70
   23ea4:	18fb      	adds	r3, r7, r3
   23ea6:	6819      	ldr	r1, [r3, #0]
   23ea8:	2370      	movs	r3, #112	; 0x70
   23eaa:	18fb      	adds	r3, r7, r3
   23eac:	889a      	ldrh	r2, [r3, #4]
   23eae:	2301      	movs	r3, #1
   23eb0:	4c07      	ldr	r4, [pc, #28]	; (23ed0 <m2m_wifi_cb+0x350>)
   23eb2:	47a0      	blx	r4
   23eb4:	1e03      	subs	r3, r0, #0
   23eb6:	d130      	bne.n	23f1a <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   23eb8:	4b06      	ldr	r3, [pc, #24]	; (23ed4 <m2m_wifi_cb+0x354>)
   23eba:	681b      	ldr	r3, [r3, #0]
   23ebc:	2b00      	cmp	r3, #0
   23ebe:	d02c      	beq.n	23f1a <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   23ec0:	4b04      	ldr	r3, [pc, #16]	; (23ed4 <m2m_wifi_cb+0x354>)
   23ec2:	681b      	ldr	r3, [r3, #0]
   23ec4:	2270      	movs	r2, #112	; 0x70
   23ec6:	18ba      	adds	r2, r7, r2
   23ec8:	0011      	movs	r1, r2
   23eca:	2020      	movs	r0, #32
   23ecc:	4798      	blx	r3
}
   23ece:	e024      	b.n	23f1a <m2m_wifi_cb+0x39a>
   23ed0:	00023945 	.word	0x00023945
   23ed4:	20004108 	.word	0x20004108
   23ed8:	00022dc9 	.word	0x00022dc9
   23edc:	0003b790 	.word	0x0003b790
   23ee0:	00020109 	.word	0x00020109
   23ee4:	0003b79c 	.word	0x0003b79c
   23ee8:	0003b7bc 	.word	0x0003b7bc
   23eec:	20004105 	.word	0x20004105
   23ef0:	20004104 	.word	0x20004104
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   23ef4:	2324      	movs	r3, #36	; 0x24
   23ef6:	33ff      	adds	r3, #255	; 0xff
   23ef8:	001a      	movs	r2, r3
   23efa:	490a      	ldr	r1, [pc, #40]	; (23f24 <m2m_wifi_cb+0x3a4>)
   23efc:	4b0a      	ldr	r3, [pc, #40]	; (23f28 <m2m_wifi_cb+0x3a8>)
   23efe:	0018      	movs	r0, r3
   23f00:	4b0a      	ldr	r3, [pc, #40]	; (23f2c <m2m_wifi_cb+0x3ac>)
   23f02:	4798      	blx	r3
   23f04:	1dfb      	adds	r3, r7, #7
   23f06:	781a      	ldrb	r2, [r3, #0]
   23f08:	4b09      	ldr	r3, [pc, #36]	; (23f30 <m2m_wifi_cb+0x3b0>)
   23f0a:	0011      	movs	r1, r2
   23f0c:	0018      	movs	r0, r3
   23f0e:	4b07      	ldr	r3, [pc, #28]	; (23f2c <m2m_wifi_cb+0x3ac>)
   23f10:	4798      	blx	r3
   23f12:	4b08      	ldr	r3, [pc, #32]	; (23f34 <m2m_wifi_cb+0x3b4>)
   23f14:	0018      	movs	r0, r3
   23f16:	4b05      	ldr	r3, [pc, #20]	; (23f2c <m2m_wifi_cb+0x3ac>)
   23f18:	4798      	blx	r3
}
   23f1a:	46c0      	nop			; (mov r8, r8)
   23f1c:	46bd      	mov	sp, r7
   23f1e:	b02d      	add	sp, #180	; 0xb4
   23f20:	bd90      	pop	{r4, r7, pc}
   23f22:	46c0      	nop			; (mov r8, r8)
   23f24:	0003bb5c 	.word	0x0003bb5c
   23f28:	0003b7c0 	.word	0x0003b7c0
   23f2c:	00020109 	.word	0x00020109
   23f30:	0003b7d4 	.word	0x0003b7d4
   23f34:	0003b7bc 	.word	0x0003b7bc

00023f38 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   23f38:	b590      	push	{r4, r7, lr}
   23f3a:	b091      	sub	sp, #68	; 0x44
   23f3c:	af02      	add	r7, sp, #8
   23f3e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   23f40:	2337      	movs	r3, #55	; 0x37
   23f42:	18fb      	adds	r3, r7, r3
   23f44:	2200      	movs	r2, #0
   23f46:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   23f48:	230b      	movs	r3, #11
   23f4a:	18fb      	adds	r3, r7, r3
   23f4c:	2201      	movs	r2, #1
   23f4e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   23f50:	687b      	ldr	r3, [r7, #4]
   23f52:	2b00      	cmp	r3, #0
   23f54:	d104      	bne.n	23f60 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   23f56:	2337      	movs	r3, #55	; 0x37
   23f58:	18fb      	adds	r3, r7, r3
   23f5a:	22f4      	movs	r2, #244	; 0xf4
   23f5c:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   23f5e:	e0b3      	b.n	240c8 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   23f60:	687b      	ldr	r3, [r7, #4]
   23f62:	681a      	ldr	r2, [r3, #0]
   23f64:	4b5c      	ldr	r3, [pc, #368]	; (240d8 <m2m_wifi_init+0x1a0>)
   23f66:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   23f68:	4b5c      	ldr	r3, [pc, #368]	; (240dc <m2m_wifi_init+0x1a4>)
   23f6a:	2200      	movs	r2, #0
   23f6c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   23f6e:	2337      	movs	r3, #55	; 0x37
   23f70:	18fc      	adds	r4, r7, r3
   23f72:	230b      	movs	r3, #11
   23f74:	18fb      	adds	r3, r7, r3
   23f76:	0018      	movs	r0, r3
   23f78:	4b59      	ldr	r3, [pc, #356]	; (240e0 <m2m_wifi_init+0x1a8>)
   23f7a:	4798      	blx	r3
   23f7c:	0003      	movs	r3, r0
   23f7e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   23f80:	2337      	movs	r3, #55	; 0x37
   23f82:	18fb      	adds	r3, r7, r3
   23f84:	781b      	ldrb	r3, [r3, #0]
   23f86:	b25b      	sxtb	r3, r3
   23f88:	2b00      	cmp	r3, #0
   23f8a:	d000      	beq.n	23f8e <m2m_wifi_init+0x56>
   23f8c:	e099      	b.n	240c2 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   23f8e:	2337      	movs	r3, #55	; 0x37
   23f90:	18fc      	adds	r4, r7, r3
   23f92:	2000      	movs	r0, #0
   23f94:	4b53      	ldr	r3, [pc, #332]	; (240e4 <m2m_wifi_init+0x1ac>)
   23f96:	4798      	blx	r3
   23f98:	0003      	movs	r3, r0
   23f9a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   23f9c:	2337      	movs	r3, #55	; 0x37
   23f9e:	18fb      	adds	r3, r7, r3
   23fa0:	781b      	ldrb	r3, [r3, #0]
   23fa2:	b25b      	sxtb	r3, r3
   23fa4:	2b00      	cmp	r3, #0
   23fa6:	d000      	beq.n	23faa <m2m_wifi_init+0x72>
   23fa8:	e086      	b.n	240b8 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   23faa:	4b4f      	ldr	r3, [pc, #316]	; (240e8 <m2m_wifi_init+0x1b0>)
   23fac:	0019      	movs	r1, r3
   23fae:	2001      	movs	r0, #1
   23fb0:	4b4e      	ldr	r3, [pc, #312]	; (240ec <m2m_wifi_init+0x1b4>)
   23fb2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   23fb4:	2337      	movs	r3, #55	; 0x37
   23fb6:	18fc      	adds	r4, r7, r3
   23fb8:	230c      	movs	r3, #12
   23fba:	18fb      	adds	r3, r7, r3
   23fbc:	0018      	movs	r0, r3
   23fbe:	4b4c      	ldr	r3, [pc, #304]	; (240f0 <m2m_wifi_init+0x1b8>)
   23fc0:	4798      	blx	r3
   23fc2:	0003      	movs	r3, r0
   23fc4:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   23fc6:	4b4b      	ldr	r3, [pc, #300]	; (240f4 <m2m_wifi_init+0x1bc>)
   23fc8:	0018      	movs	r0, r3
   23fca:	4b4b      	ldr	r3, [pc, #300]	; (240f8 <m2m_wifi_init+0x1c0>)
   23fcc:	4798      	blx	r3
   23fce:	230c      	movs	r3, #12
   23fd0:	18fb      	adds	r3, r7, r3
   23fd2:	791b      	ldrb	r3, [r3, #4]
   23fd4:	0019      	movs	r1, r3
   23fd6:	230c      	movs	r3, #12
   23fd8:	18fb      	adds	r3, r7, r3
   23fda:	795b      	ldrb	r3, [r3, #5]
   23fdc:	001a      	movs	r2, r3
   23fde:	230c      	movs	r3, #12
   23fe0:	18fb      	adds	r3, r7, r3
   23fe2:	799b      	ldrb	r3, [r3, #6]
   23fe4:	001c      	movs	r4, r3
   23fe6:	230c      	movs	r3, #12
   23fe8:	18fb      	adds	r3, r7, r3
   23fea:	8c1b      	ldrh	r3, [r3, #32]
   23fec:	4843      	ldr	r0, [pc, #268]	; (240fc <m2m_wifi_init+0x1c4>)
   23fee:	9300      	str	r3, [sp, #0]
   23ff0:	0023      	movs	r3, r4
   23ff2:	4c41      	ldr	r4, [pc, #260]	; (240f8 <m2m_wifi_init+0x1c0>)
   23ff4:	47a0      	blx	r4
   23ff6:	4b42      	ldr	r3, [pc, #264]	; (24100 <m2m_wifi_init+0x1c8>)
   23ff8:	0018      	movs	r0, r3
   23ffa:	4b3f      	ldr	r3, [pc, #252]	; (240f8 <m2m_wifi_init+0x1c0>)
   23ffc:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   23ffe:	4b3d      	ldr	r3, [pc, #244]	; (240f4 <m2m_wifi_init+0x1bc>)
   24000:	0018      	movs	r0, r3
   24002:	4b3d      	ldr	r3, [pc, #244]	; (240f8 <m2m_wifi_init+0x1c0>)
   24004:	4798      	blx	r3
   24006:	230c      	movs	r3, #12
   24008:	18fb      	adds	r3, r7, r3
   2400a:	3316      	adds	r3, #22
   2400c:	001a      	movs	r2, r3
   2400e:	230c      	movs	r3, #12
   24010:	18fb      	adds	r3, r7, r3
   24012:	330a      	adds	r3, #10
   24014:	0019      	movs	r1, r3
   24016:	4b3b      	ldr	r3, [pc, #236]	; (24104 <m2m_wifi_init+0x1cc>)
   24018:	0018      	movs	r0, r3
   2401a:	4b37      	ldr	r3, [pc, #220]	; (240f8 <m2m_wifi_init+0x1c0>)
   2401c:	4798      	blx	r3
   2401e:	4b38      	ldr	r3, [pc, #224]	; (24100 <m2m_wifi_init+0x1c8>)
   24020:	0018      	movs	r0, r3
   24022:	4b35      	ldr	r3, [pc, #212]	; (240f8 <m2m_wifi_init+0x1c0>)
   24024:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   24026:	4b33      	ldr	r3, [pc, #204]	; (240f4 <m2m_wifi_init+0x1bc>)
   24028:	0018      	movs	r0, r3
   2402a:	4b33      	ldr	r3, [pc, #204]	; (240f8 <m2m_wifi_init+0x1c0>)
   2402c:	4798      	blx	r3
   2402e:	230c      	movs	r3, #12
   24030:	18fb      	adds	r3, r7, r3
   24032:	79db      	ldrb	r3, [r3, #7]
   24034:	0019      	movs	r1, r3
   24036:	230c      	movs	r3, #12
   24038:	18fb      	adds	r3, r7, r3
   2403a:	7a1b      	ldrb	r3, [r3, #8]
   2403c:	001a      	movs	r2, r3
   2403e:	230c      	movs	r3, #12
   24040:	18fb      	adds	r3, r7, r3
   24042:	7a5b      	ldrb	r3, [r3, #9]
   24044:	4830      	ldr	r0, [pc, #192]	; (24108 <m2m_wifi_init+0x1d0>)
   24046:	4c2c      	ldr	r4, [pc, #176]	; (240f8 <m2m_wifi_init+0x1c0>)
   24048:	47a0      	blx	r4
   2404a:	4b2d      	ldr	r3, [pc, #180]	; (24100 <m2m_wifi_init+0x1c8>)
   2404c:	0018      	movs	r0, r3
   2404e:	4b2a      	ldr	r3, [pc, #168]	; (240f8 <m2m_wifi_init+0x1c0>)
   24050:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   24052:	4b28      	ldr	r3, [pc, #160]	; (240f4 <m2m_wifi_init+0x1bc>)
   24054:	0018      	movs	r0, r3
   24056:	4b28      	ldr	r3, [pc, #160]	; (240f8 <m2m_wifi_init+0x1c0>)
   24058:	4798      	blx	r3
   2405a:	482c      	ldr	r0, [pc, #176]	; (2410c <m2m_wifi_init+0x1d4>)
   2405c:	2304      	movs	r3, #4
   2405e:	2205      	movs	r2, #5
   24060:	2113      	movs	r1, #19
   24062:	4c25      	ldr	r4, [pc, #148]	; (240f8 <m2m_wifi_init+0x1c0>)
   24064:	47a0      	blx	r4
   24066:	4b26      	ldr	r3, [pc, #152]	; (24100 <m2m_wifi_init+0x1c8>)
   24068:	0018      	movs	r0, r3
   2406a:	4b23      	ldr	r3, [pc, #140]	; (240f8 <m2m_wifi_init+0x1c0>)
   2406c:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   2406e:	4b21      	ldr	r3, [pc, #132]	; (240f4 <m2m_wifi_init+0x1bc>)
   24070:	0018      	movs	r0, r3
   24072:	4b21      	ldr	r3, [pc, #132]	; (240f8 <m2m_wifi_init+0x1c0>)
   24074:	4798      	blx	r3
   24076:	4a26      	ldr	r2, [pc, #152]	; (24110 <m2m_wifi_init+0x1d8>)
   24078:	4926      	ldr	r1, [pc, #152]	; (24114 <m2m_wifi_init+0x1dc>)
   2407a:	4b27      	ldr	r3, [pc, #156]	; (24118 <m2m_wifi_init+0x1e0>)
   2407c:	0018      	movs	r0, r3
   2407e:	4b1e      	ldr	r3, [pc, #120]	; (240f8 <m2m_wifi_init+0x1c0>)
   24080:	4798      	blx	r3
   24082:	4b1f      	ldr	r3, [pc, #124]	; (24100 <m2m_wifi_init+0x1c8>)
   24084:	0018      	movs	r0, r3
   24086:	4b1c      	ldr	r3, [pc, #112]	; (240f8 <m2m_wifi_init+0x1c0>)
   24088:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   2408a:	2337      	movs	r3, #55	; 0x37
   2408c:	18fb      	adds	r3, r7, r3
   2408e:	781b      	ldrb	r3, [r3, #0]
   24090:	b25b      	sxtb	r3, r3
   24092:	330d      	adds	r3, #13
   24094:	d117      	bne.n	240c6 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   24096:	23e8      	movs	r3, #232	; 0xe8
   24098:	33ff      	adds	r3, #255	; 0xff
   2409a:	001a      	movs	r2, r3
   2409c:	491f      	ldr	r1, [pc, #124]	; (2411c <m2m_wifi_init+0x1e4>)
   2409e:	4b20      	ldr	r3, [pc, #128]	; (24120 <m2m_wifi_init+0x1e8>)
   240a0:	0018      	movs	r0, r3
   240a2:	4b15      	ldr	r3, [pc, #84]	; (240f8 <m2m_wifi_init+0x1c0>)
   240a4:	4798      	blx	r3
   240a6:	4b1f      	ldr	r3, [pc, #124]	; (24124 <m2m_wifi_init+0x1ec>)
   240a8:	0018      	movs	r0, r3
   240aa:	4b13      	ldr	r3, [pc, #76]	; (240f8 <m2m_wifi_init+0x1c0>)
   240ac:	4798      	blx	r3
   240ae:	4b14      	ldr	r3, [pc, #80]	; (24100 <m2m_wifi_init+0x1c8>)
   240b0:	0018      	movs	r0, r3
   240b2:	4b11      	ldr	r3, [pc, #68]	; (240f8 <m2m_wifi_init+0x1c0>)
   240b4:	4798      	blx	r3
	}

	goto _EXIT0;
   240b6:	e006      	b.n	240c6 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   240b8:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   240ba:	2000      	movs	r0, #0
   240bc:	4b1a      	ldr	r3, [pc, #104]	; (24128 <m2m_wifi_init+0x1f0>)
   240be:	4798      	blx	r3
   240c0:	e002      	b.n	240c8 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   240c2:	46c0      	nop			; (mov r8, r8)
   240c4:	e000      	b.n	240c8 <m2m_wifi_init+0x190>
	goto _EXIT0;
   240c6:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   240c8:	2337      	movs	r3, #55	; 0x37
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	781b      	ldrb	r3, [r3, #0]
   240ce:	b25b      	sxtb	r3, r3
}
   240d0:	0018      	movs	r0, r3
   240d2:	46bd      	mov	sp, r7
   240d4:	b00f      	add	sp, #60	; 0x3c
   240d6:	bd90      	pop	{r4, r7, pc}
   240d8:	20004108 	.word	0x20004108
   240dc:	20004105 	.word	0x20004105
   240e0:	0002525d 	.word	0x0002525d
   240e4:	00022fe1 	.word	0x00022fe1
   240e8:	00023b81 	.word	0x00023b81
   240ec:	00023ac5 	.word	0x00023ac5
   240f0:	00025091 	.word	0x00025091
   240f4:	0003b790 	.word	0x0003b790
   240f8:	00020109 	.word	0x00020109
   240fc:	0003b934 	.word	0x0003b934
   24100:	0003b7bc 	.word	0x0003b7bc
   24104:	0003b95c 	.word	0x0003b95c
   24108:	0003b978 	.word	0x0003b978
   2410c:	0003b99c 	.word	0x0003b99c
   24110:	0003b9b4 	.word	0x0003b9b4
   24114:	0003b9c0 	.word	0x0003b9c0
   24118:	0003b9cc 	.word	0x0003b9cc
   2411c:	0003bb68 	.word	0x0003bb68
   24120:	0003b7c0 	.word	0x0003b7c0
   24124:	0003b9e4 	.word	0x0003b9e4
   24128:	000253ed 	.word	0x000253ed

0002412c <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   2412c:	b580      	push	{r7, lr}
   2412e:	b082      	sub	sp, #8
   24130:	af00      	add	r7, sp, #0
   24132:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   24134:	4b03      	ldr	r3, [pc, #12]	; (24144 <m2m_wifi_handle_events+0x18>)
   24136:	4798      	blx	r3
   24138:	0003      	movs	r3, r0
}
   2413a:	0018      	movs	r0, r3
   2413c:	46bd      	mov	sp, r7
   2413e:	b002      	add	sp, #8
   24140:	bd80      	pop	{r7, pc}
   24142:	46c0      	nop			; (mov r8, r8)
   24144:	000238a5 	.word	0x000238a5

00024148 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   24148:	b590      	push	{r4, r7, lr}
   2414a:	b087      	sub	sp, #28
   2414c:	af02      	add	r7, sp, #8
   2414e:	60f8      	str	r0, [r7, #12]
   24150:	0008      	movs	r0, r1
   24152:	0011      	movs	r1, r2
   24154:	607b      	str	r3, [r7, #4]
   24156:	230b      	movs	r3, #11
   24158:	18fb      	adds	r3, r7, r3
   2415a:	1c02      	adds	r2, r0, #0
   2415c:	701a      	strb	r2, [r3, #0]
   2415e:	230a      	movs	r3, #10
   24160:	18fb      	adds	r3, r7, r3
   24162:	1c0a      	adds	r2, r1, #0
   24164:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   24166:	687c      	ldr	r4, [r7, #4]
   24168:	230a      	movs	r3, #10
   2416a:	18fb      	adds	r3, r7, r3
   2416c:	781a      	ldrb	r2, [r3, #0]
   2416e:	230b      	movs	r3, #11
   24170:	18fb      	adds	r3, r7, r3
   24172:	7819      	ldrb	r1, [r3, #0]
   24174:	68f8      	ldr	r0, [r7, #12]
   24176:	2300      	movs	r3, #0
   24178:	9301      	str	r3, [sp, #4]
   2417a:	2320      	movs	r3, #32
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	881b      	ldrh	r3, [r3, #0]
   24180:	9300      	str	r3, [sp, #0]
   24182:	0023      	movs	r3, r4
   24184:	4c03      	ldr	r4, [pc, #12]	; (24194 <m2m_wifi_connect+0x4c>)
   24186:	47a0      	blx	r4
   24188:	0003      	movs	r3, r0
}
   2418a:	0018      	movs	r0, r3
   2418c:	46bd      	mov	sp, r7
   2418e:	b005      	add	sp, #20
   24190:	bd90      	pop	{r4, r7, pc}
   24192:	46c0      	nop			; (mov r8, r8)
   24194:	00024199 	.word	0x00024199

00024198 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   24198:	b5b0      	push	{r4, r5, r7, lr}
   2419a:	b0aa      	sub	sp, #168	; 0xa8
   2419c:	af04      	add	r7, sp, #16
   2419e:	60f8      	str	r0, [r7, #12]
   241a0:	0008      	movs	r0, r1
   241a2:	0011      	movs	r1, r2
   241a4:	607b      	str	r3, [r7, #4]
   241a6:	230b      	movs	r3, #11
   241a8:	18fb      	adds	r3, r7, r3
   241aa:	1c02      	adds	r2, r0, #0
   241ac:	701a      	strb	r2, [r3, #0]
   241ae:	230a      	movs	r3, #10
   241b0:	18fb      	adds	r3, r7, r3
   241b2:	1c0a      	adds	r2, r1, #0
   241b4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   241b6:	2397      	movs	r3, #151	; 0x97
   241b8:	18fb      	adds	r3, r7, r3
   241ba:	2200      	movs	r2, #0
   241bc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   241be:	230a      	movs	r3, #10
   241c0:	18fb      	adds	r3, r7, r3
   241c2:	781b      	ldrb	r3, [r3, #0]
   241c4:	2b01      	cmp	r3, #1
   241c6:	d100      	bne.n	241ca <m2m_wifi_connect_sc+0x32>
   241c8:	e085      	b.n	242d6 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   241ca:	687b      	ldr	r3, [r7, #4]
   241cc:	2b00      	cmp	r3, #0
   241ce:	d112      	bne.n	241f6 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   241d0:	4ad8      	ldr	r2, [pc, #864]	; (24534 <m2m_wifi_connect_sc+0x39c>)
   241d2:	49d9      	ldr	r1, [pc, #868]	; (24538 <m2m_wifi_connect_sc+0x3a0>)
   241d4:	4bd9      	ldr	r3, [pc, #868]	; (2453c <m2m_wifi_connect_sc+0x3a4>)
   241d6:	0018      	movs	r0, r3
   241d8:	4bd9      	ldr	r3, [pc, #868]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   241da:	4798      	blx	r3
   241dc:	4bd9      	ldr	r3, [pc, #868]	; (24544 <m2m_wifi_connect_sc+0x3ac>)
   241de:	0018      	movs	r0, r3
   241e0:	4bd7      	ldr	r3, [pc, #860]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   241e2:	4798      	blx	r3
   241e4:	4bd8      	ldr	r3, [pc, #864]	; (24548 <m2m_wifi_connect_sc+0x3b0>)
   241e6:	0018      	movs	r0, r3
   241e8:	4bd5      	ldr	r3, [pc, #852]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   241ea:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   241ec:	2397      	movs	r3, #151	; 0x97
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	22f4      	movs	r2, #244	; 0xf4
   241f2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   241f4:	e1f9      	b.n	245ea <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   241f6:	230a      	movs	r3, #10
   241f8:	18fb      	adds	r3, r7, r3
   241fa:	781b      	ldrb	r3, [r3, #0]
   241fc:	2b02      	cmp	r3, #2
   241fe:	d16a      	bne.n	242d6 <m2m_wifi_connect_sc+0x13e>
   24200:	687b      	ldr	r3, [r7, #4]
   24202:	0018      	movs	r0, r3
   24204:	4bd1      	ldr	r3, [pc, #836]	; (2454c <m2m_wifi_connect_sc+0x3b4>)
   24206:	4798      	blx	r3
   24208:	0003      	movs	r3, r0
   2420a:	2b40      	cmp	r3, #64	; 0x40
   2420c:	d163      	bne.n	242d6 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   2420e:	2396      	movs	r3, #150	; 0x96
   24210:	18fb      	adds	r3, r7, r3
   24212:	2200      	movs	r2, #0
   24214:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   24216:	687b      	ldr	r3, [r7, #4]
   24218:	2290      	movs	r2, #144	; 0x90
   2421a:	18ba      	adds	r2, r7, r2
   2421c:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2421e:	e055      	b.n	242cc <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   24220:	2396      	movs	r3, #150	; 0x96
   24222:	18fb      	adds	r3, r7, r3
   24224:	781b      	ldrb	r3, [r3, #0]
   24226:	2290      	movs	r2, #144	; 0x90
   24228:	18ba      	adds	r2, r7, r2
   2422a:	6812      	ldr	r2, [r2, #0]
   2422c:	18d3      	adds	r3, r2, r3
   2422e:	781b      	ldrb	r3, [r3, #0]
   24230:	2b2f      	cmp	r3, #47	; 0x2f
   24232:	d931      	bls.n	24298 <m2m_wifi_connect_sc+0x100>
   24234:	2396      	movs	r3, #150	; 0x96
   24236:	18fb      	adds	r3, r7, r3
   24238:	781b      	ldrb	r3, [r3, #0]
   2423a:	2290      	movs	r2, #144	; 0x90
   2423c:	18ba      	adds	r2, r7, r2
   2423e:	6812      	ldr	r2, [r2, #0]
   24240:	18d3      	adds	r3, r2, r3
   24242:	781b      	ldrb	r3, [r3, #0]
   24244:	2b39      	cmp	r3, #57	; 0x39
   24246:	d909      	bls.n	2425c <m2m_wifi_connect_sc+0xc4>
   24248:	2396      	movs	r3, #150	; 0x96
   2424a:	18fb      	adds	r3, r7, r3
   2424c:	781b      	ldrb	r3, [r3, #0]
   2424e:	2290      	movs	r2, #144	; 0x90
   24250:	18ba      	adds	r2, r7, r2
   24252:	6812      	ldr	r2, [r2, #0]
   24254:	18d3      	adds	r3, r2, r3
   24256:	781b      	ldrb	r3, [r3, #0]
   24258:	2b40      	cmp	r3, #64	; 0x40
   2425a:	d91d      	bls.n	24298 <m2m_wifi_connect_sc+0x100>
   2425c:	2396      	movs	r3, #150	; 0x96
   2425e:	18fb      	adds	r3, r7, r3
   24260:	781b      	ldrb	r3, [r3, #0]
   24262:	2290      	movs	r2, #144	; 0x90
   24264:	18ba      	adds	r2, r7, r2
   24266:	6812      	ldr	r2, [r2, #0]
   24268:	18d3      	adds	r3, r2, r3
   2426a:	781b      	ldrb	r3, [r3, #0]
   2426c:	2b46      	cmp	r3, #70	; 0x46
   2426e:	d909      	bls.n	24284 <m2m_wifi_connect_sc+0xec>
   24270:	2396      	movs	r3, #150	; 0x96
   24272:	18fb      	adds	r3, r7, r3
   24274:	781b      	ldrb	r3, [r3, #0]
   24276:	2290      	movs	r2, #144	; 0x90
   24278:	18ba      	adds	r2, r7, r2
   2427a:	6812      	ldr	r2, [r2, #0]
   2427c:	18d3      	adds	r3, r2, r3
   2427e:	781b      	ldrb	r3, [r3, #0]
   24280:	2b60      	cmp	r3, #96	; 0x60
   24282:	d909      	bls.n	24298 <m2m_wifi_connect_sc+0x100>
   24284:	2396      	movs	r3, #150	; 0x96
   24286:	18fb      	adds	r3, r7, r3
   24288:	781b      	ldrb	r3, [r3, #0]
   2428a:	2290      	movs	r2, #144	; 0x90
   2428c:	18ba      	adds	r2, r7, r2
   2428e:	6812      	ldr	r2, [r2, #0]
   24290:	18d3      	adds	r3, r2, r3
   24292:	781b      	ldrb	r3, [r3, #0]
   24294:	2b66      	cmp	r3, #102	; 0x66
   24296:	d912      	bls.n	242be <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   24298:	4aad      	ldr	r2, [pc, #692]	; (24550 <m2m_wifi_connect_sc+0x3b8>)
   2429a:	49a7      	ldr	r1, [pc, #668]	; (24538 <m2m_wifi_connect_sc+0x3a0>)
   2429c:	4ba7      	ldr	r3, [pc, #668]	; (2453c <m2m_wifi_connect_sc+0x3a4>)
   2429e:	0018      	movs	r0, r3
   242a0:	4ba7      	ldr	r3, [pc, #668]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   242a2:	4798      	blx	r3
   242a4:	4bab      	ldr	r3, [pc, #684]	; (24554 <m2m_wifi_connect_sc+0x3bc>)
   242a6:	0018      	movs	r0, r3
   242a8:	4ba5      	ldr	r3, [pc, #660]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   242aa:	4798      	blx	r3
   242ac:	4ba6      	ldr	r3, [pc, #664]	; (24548 <m2m_wifi_connect_sc+0x3b0>)
   242ae:	0018      	movs	r0, r3
   242b0:	4ba3      	ldr	r3, [pc, #652]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   242b2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   242b4:	2397      	movs	r3, #151	; 0x97
   242b6:	18fb      	adds	r3, r7, r3
   242b8:	22f4      	movs	r2, #244	; 0xf4
   242ba:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   242bc:	e195      	b.n	245ea <m2m_wifi_connect_sc+0x452>
				}
				i++;
   242be:	2396      	movs	r3, #150	; 0x96
   242c0:	18fb      	adds	r3, r7, r3
   242c2:	781a      	ldrb	r2, [r3, #0]
   242c4:	2396      	movs	r3, #150	; 0x96
   242c6:	18fb      	adds	r3, r7, r3
   242c8:	3201      	adds	r2, #1
   242ca:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   242cc:	2396      	movs	r3, #150	; 0x96
   242ce:	18fb      	adds	r3, r7, r3
   242d0:	781b      	ldrb	r3, [r3, #0]
   242d2:	2b3f      	cmp	r3, #63	; 0x3f
   242d4:	d9a4      	bls.n	24220 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   242d6:	230b      	movs	r3, #11
   242d8:	18fb      	adds	r3, r7, r3
   242da:	781b      	ldrb	r3, [r3, #0]
   242dc:	2b00      	cmp	r3, #0
   242de:	d004      	beq.n	242ea <m2m_wifi_connect_sc+0x152>
   242e0:	230b      	movs	r3, #11
   242e2:	18fb      	adds	r3, r7, r3
   242e4:	781b      	ldrb	r3, [r3, #0]
   242e6:	2b20      	cmp	r3, #32
   242e8:	d913      	bls.n	24312 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   242ea:	238c      	movs	r3, #140	; 0x8c
   242ec:	009a      	lsls	r2, r3, #2
   242ee:	4992      	ldr	r1, [pc, #584]	; (24538 <m2m_wifi_connect_sc+0x3a0>)
   242f0:	4b92      	ldr	r3, [pc, #584]	; (2453c <m2m_wifi_connect_sc+0x3a4>)
   242f2:	0018      	movs	r0, r3
   242f4:	4b92      	ldr	r3, [pc, #584]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   242f6:	4798      	blx	r3
   242f8:	4b97      	ldr	r3, [pc, #604]	; (24558 <m2m_wifi_connect_sc+0x3c0>)
   242fa:	0018      	movs	r0, r3
   242fc:	4b90      	ldr	r3, [pc, #576]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   242fe:	4798      	blx	r3
   24300:	4b91      	ldr	r3, [pc, #580]	; (24548 <m2m_wifi_connect_sc+0x3b0>)
   24302:	0018      	movs	r0, r3
   24304:	4b8e      	ldr	r3, [pc, #568]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   24306:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   24308:	2397      	movs	r3, #151	; 0x97
   2430a:	18fb      	adds	r3, r7, r3
   2430c:	22f4      	movs	r2, #244	; 0xf4
   2430e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   24310:	e16b      	b.n	245ea <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   24312:	23a8      	movs	r3, #168	; 0xa8
   24314:	18fb      	adds	r3, r7, r3
   24316:	881b      	ldrh	r3, [r3, #0]
   24318:	2b00      	cmp	r3, #0
   2431a:	d004      	beq.n	24326 <m2m_wifi_connect_sc+0x18e>
   2431c:	23a8      	movs	r3, #168	; 0xa8
   2431e:	18fb      	adds	r3, r7, r3
   24320:	881b      	ldrh	r3, [r3, #0]
   24322:	2b0e      	cmp	r3, #14
   24324:	d917      	bls.n	24356 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   24326:	23a8      	movs	r3, #168	; 0xa8
   24328:	18fb      	adds	r3, r7, r3
   2432a:	881b      	ldrh	r3, [r3, #0]
   2432c:	2bff      	cmp	r3, #255	; 0xff
   2432e:	d012      	beq.n	24356 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   24330:	4a8a      	ldr	r2, [pc, #552]	; (2455c <m2m_wifi_connect_sc+0x3c4>)
   24332:	4981      	ldr	r1, [pc, #516]	; (24538 <m2m_wifi_connect_sc+0x3a0>)
   24334:	4b81      	ldr	r3, [pc, #516]	; (2453c <m2m_wifi_connect_sc+0x3a4>)
   24336:	0018      	movs	r0, r3
   24338:	4b81      	ldr	r3, [pc, #516]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   2433a:	4798      	blx	r3
   2433c:	4b88      	ldr	r3, [pc, #544]	; (24560 <m2m_wifi_connect_sc+0x3c8>)
   2433e:	0018      	movs	r0, r3
   24340:	4b7f      	ldr	r3, [pc, #508]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   24342:	4798      	blx	r3
   24344:	4b80      	ldr	r3, [pc, #512]	; (24548 <m2m_wifi_connect_sc+0x3b0>)
   24346:	0018      	movs	r0, r3
   24348:	4b7d      	ldr	r3, [pc, #500]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   2434a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2434c:	2397      	movs	r3, #151	; 0x97
   2434e:	18fb      	adds	r3, r7, r3
   24350:	22f4      	movs	r2, #244	; 0xf4
   24352:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24354:	e149      	b.n	245ea <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   24356:	230b      	movs	r3, #11
   24358:	18fb      	adds	r3, r7, r3
   2435a:	781a      	ldrb	r2, [r3, #0]
   2435c:	68f9      	ldr	r1, [r7, #12]
   2435e:	2314      	movs	r3, #20
   24360:	18fb      	adds	r3, r7, r3
   24362:	3346      	adds	r3, #70	; 0x46
   24364:	0018      	movs	r0, r3
   24366:	4b7f      	ldr	r3, [pc, #508]	; (24564 <m2m_wifi_connect_sc+0x3cc>)
   24368:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   2436a:	230b      	movs	r3, #11
   2436c:	18fb      	adds	r3, r7, r3
   2436e:	781b      	ldrb	r3, [r3, #0]
   24370:	2214      	movs	r2, #20
   24372:	18ba      	adds	r2, r7, r2
   24374:	2146      	movs	r1, #70	; 0x46
   24376:	18d3      	adds	r3, r2, r3
   24378:	185b      	adds	r3, r3, r1
   2437a:	2200      	movs	r2, #0
   2437c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   2437e:	2314      	movs	r3, #20
   24380:	18fb      	adds	r3, r7, r3
   24382:	22a8      	movs	r2, #168	; 0xa8
   24384:	18ba      	adds	r2, r7, r2
   24386:	2144      	movs	r1, #68	; 0x44
   24388:	8812      	ldrh	r2, [r2, #0]
   2438a:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   2438c:	23ac      	movs	r3, #172	; 0xac
   2438e:	18fb      	adds	r3, r7, r3
   24390:	781b      	ldrb	r3, [r3, #0]
   24392:	1e5a      	subs	r2, r3, #1
   24394:	4193      	sbcs	r3, r2
   24396:	b2db      	uxtb	r3, r3
   24398:	0019      	movs	r1, r3
   2439a:	2314      	movs	r3, #20
   2439c:	18fb      	adds	r3, r7, r3
   2439e:	2267      	movs	r2, #103	; 0x67
   243a0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   243a2:	2314      	movs	r3, #20
   243a4:	18fb      	adds	r3, r7, r3
   243a6:	228c      	movs	r2, #140	; 0x8c
   243a8:	18ba      	adds	r2, r7, r2
   243aa:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   243ac:	238c      	movs	r3, #140	; 0x8c
   243ae:	18fb      	adds	r3, r7, r3
   243b0:	681b      	ldr	r3, [r3, #0]
   243b2:	220a      	movs	r2, #10
   243b4:	18ba      	adds	r2, r7, r2
   243b6:	2141      	movs	r1, #65	; 0x41
   243b8:	7812      	ldrb	r2, [r2, #0]
   243ba:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   243bc:	230a      	movs	r3, #10
   243be:	18fb      	adds	r3, r7, r3
   243c0:	781b      	ldrb	r3, [r3, #0]
   243c2:	2b03      	cmp	r3, #3
   243c4:	d000      	beq.n	243c8 <m2m_wifi_connect_sc+0x230>
   243c6:	e07d      	b.n	244c4 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   243c8:	687b      	ldr	r3, [r7, #4]
   243ca:	2288      	movs	r2, #136	; 0x88
   243cc:	18ba      	adds	r2, r7, r2
   243ce:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   243d0:	238c      	movs	r3, #140	; 0x8c
   243d2:	18fb      	adds	r3, r7, r3
   243d4:	681b      	ldr	r3, [r3, #0]
   243d6:	2284      	movs	r2, #132	; 0x84
   243d8:	18ba      	adds	r2, r7, r2
   243da:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   243dc:	2388      	movs	r3, #136	; 0x88
   243de:	18fb      	adds	r3, r7, r3
   243e0:	681b      	ldr	r3, [r3, #0]
   243e2:	781b      	ldrb	r3, [r3, #0]
   243e4:	3b01      	subs	r3, #1
   243e6:	b2da      	uxtb	r2, r3
   243e8:	2384      	movs	r3, #132	; 0x84
   243ea:	18fb      	adds	r3, r7, r3
   243ec:	681b      	ldr	r3, [r3, #0]
   243ee:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   243f0:	2384      	movs	r3, #132	; 0x84
   243f2:	18fb      	adds	r3, r7, r3
   243f4:	681b      	ldr	r3, [r3, #0]
   243f6:	781b      	ldrb	r3, [r3, #0]
   243f8:	2b03      	cmp	r3, #3
   243fa:	d919      	bls.n	24430 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   243fc:	2394      	movs	r3, #148	; 0x94
   243fe:	009a      	lsls	r2, r3, #2
   24400:	494d      	ldr	r1, [pc, #308]	; (24538 <m2m_wifi_connect_sc+0x3a0>)
   24402:	4b4e      	ldr	r3, [pc, #312]	; (2453c <m2m_wifi_connect_sc+0x3a4>)
   24404:	0018      	movs	r0, r3
   24406:	4b4e      	ldr	r3, [pc, #312]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   24408:	4798      	blx	r3
   2440a:	2384      	movs	r3, #132	; 0x84
   2440c:	18fb      	adds	r3, r7, r3
   2440e:	681b      	ldr	r3, [r3, #0]
   24410:	781b      	ldrb	r3, [r3, #0]
   24412:	001a      	movs	r2, r3
   24414:	4b54      	ldr	r3, [pc, #336]	; (24568 <m2m_wifi_connect_sc+0x3d0>)
   24416:	0011      	movs	r1, r2
   24418:	0018      	movs	r0, r3
   2441a:	4b49      	ldr	r3, [pc, #292]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   2441c:	4798      	blx	r3
   2441e:	4b4a      	ldr	r3, [pc, #296]	; (24548 <m2m_wifi_connect_sc+0x3b0>)
   24420:	0018      	movs	r0, r3
   24422:	4b47      	ldr	r3, [pc, #284]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   24424:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24426:	2397      	movs	r3, #151	; 0x97
   24428:	18fb      	adds	r3, r7, r3
   2442a:	22f4      	movs	r2, #244	; 0xf4
   2442c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2442e:	e0dc      	b.n	245ea <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   24430:	2388      	movs	r3, #136	; 0x88
   24432:	18fb      	adds	r3, r7, r3
   24434:	681b      	ldr	r3, [r3, #0]
   24436:	785b      	ldrb	r3, [r3, #1]
   24438:	3b01      	subs	r3, #1
   2443a:	b2da      	uxtb	r2, r3
   2443c:	2384      	movs	r3, #132	; 0x84
   2443e:	18fb      	adds	r3, r7, r3
   24440:	681b      	ldr	r3, [r3, #0]
   24442:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   24444:	2384      	movs	r3, #132	; 0x84
   24446:	18fb      	adds	r3, r7, r3
   24448:	681b      	ldr	r3, [r3, #0]
   2444a:	785b      	ldrb	r3, [r3, #1]
   2444c:	2b0a      	cmp	r3, #10
   2444e:	d01e      	beq.n	2448e <m2m_wifi_connect_sc+0x2f6>
   24450:	2384      	movs	r3, #132	; 0x84
   24452:	18fb      	adds	r3, r7, r3
   24454:	681b      	ldr	r3, [r3, #0]
   24456:	785b      	ldrb	r3, [r3, #1]
   24458:	2b1a      	cmp	r3, #26
   2445a:	d018      	beq.n	2448e <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   2445c:	4a43      	ldr	r2, [pc, #268]	; (2456c <m2m_wifi_connect_sc+0x3d4>)
   2445e:	4936      	ldr	r1, [pc, #216]	; (24538 <m2m_wifi_connect_sc+0x3a0>)
   24460:	4b36      	ldr	r3, [pc, #216]	; (2453c <m2m_wifi_connect_sc+0x3a4>)
   24462:	0018      	movs	r0, r3
   24464:	4b36      	ldr	r3, [pc, #216]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   24466:	4798      	blx	r3
   24468:	2384      	movs	r3, #132	; 0x84
   2446a:	18fb      	adds	r3, r7, r3
   2446c:	681b      	ldr	r3, [r3, #0]
   2446e:	785b      	ldrb	r3, [r3, #1]
   24470:	001a      	movs	r2, r3
   24472:	4b3f      	ldr	r3, [pc, #252]	; (24570 <m2m_wifi_connect_sc+0x3d8>)
   24474:	0011      	movs	r1, r2
   24476:	0018      	movs	r0, r3
   24478:	4b31      	ldr	r3, [pc, #196]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   2447a:	4798      	blx	r3
   2447c:	4b32      	ldr	r3, [pc, #200]	; (24548 <m2m_wifi_connect_sc+0x3b0>)
   2447e:	0018      	movs	r0, r3
   24480:	4b2f      	ldr	r3, [pc, #188]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   24482:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24484:	2397      	movs	r3, #151	; 0x97
   24486:	18fb      	adds	r3, r7, r3
   24488:	22f4      	movs	r2, #244	; 0xf4
   2448a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2448c:	e0ad      	b.n	245ea <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   2448e:	2384      	movs	r3, #132	; 0x84
   24490:	18fb      	adds	r3, r7, r3
   24492:	681b      	ldr	r3, [r3, #0]
   24494:	1c98      	adds	r0, r3, #2
   24496:	2388      	movs	r3, #136	; 0x88
   24498:	18fb      	adds	r3, r7, r3
   2449a:	681b      	ldr	r3, [r3, #0]
   2449c:	1c99      	adds	r1, r3, #2
   2449e:	2388      	movs	r3, #136	; 0x88
   244a0:	18fb      	adds	r3, r7, r3
   244a2:	681b      	ldr	r3, [r3, #0]
   244a4:	785b      	ldrb	r3, [r3, #1]
   244a6:	001a      	movs	r2, r3
   244a8:	4b2e      	ldr	r3, [pc, #184]	; (24564 <m2m_wifi_connect_sc+0x3cc>)
   244aa:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   244ac:	2388      	movs	r3, #136	; 0x88
   244ae:	18fb      	adds	r3, r7, r3
   244b0:	681b      	ldr	r3, [r3, #0]
   244b2:	785b      	ldrb	r3, [r3, #1]
   244b4:	001a      	movs	r2, r3
   244b6:	2384      	movs	r3, #132	; 0x84
   244b8:	18fb      	adds	r3, r7, r3
   244ba:	681b      	ldr	r3, [r3, #0]
   244bc:	189b      	adds	r3, r3, r2
   244be:	2200      	movs	r2, #0
   244c0:	709a      	strb	r2, [r3, #2]
   244c2:	e081      	b.n	245c8 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   244c4:	230a      	movs	r3, #10
   244c6:	18fb      	adds	r3, r7, r3
   244c8:	781b      	ldrb	r3, [r3, #0]
   244ca:	2b02      	cmp	r3, #2
   244cc:	d156      	bne.n	2457c <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   244ce:	2382      	movs	r3, #130	; 0x82
   244d0:	18fc      	adds	r4, r7, r3
   244d2:	687b      	ldr	r3, [r7, #4]
   244d4:	0018      	movs	r0, r3
   244d6:	4b1d      	ldr	r3, [pc, #116]	; (2454c <m2m_wifi_connect_sc+0x3b4>)
   244d8:	4798      	blx	r3
   244da:	0003      	movs	r3, r0
   244dc:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   244de:	2382      	movs	r3, #130	; 0x82
   244e0:	18fb      	adds	r3, r7, r3
   244e2:	881b      	ldrh	r3, [r3, #0]
   244e4:	2b00      	cmp	r3, #0
   244e6:	d004      	beq.n	244f2 <m2m_wifi_connect_sc+0x35a>
   244e8:	2382      	movs	r3, #130	; 0x82
   244ea:	18fb      	adds	r3, r7, r3
   244ec:	881b      	ldrh	r3, [r3, #0]
   244ee:	2b40      	cmp	r3, #64	; 0x40
   244f0:	d912      	bls.n	24518 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   244f2:	4a20      	ldr	r2, [pc, #128]	; (24574 <m2m_wifi_connect_sc+0x3dc>)
   244f4:	4910      	ldr	r1, [pc, #64]	; (24538 <m2m_wifi_connect_sc+0x3a0>)
   244f6:	4b11      	ldr	r3, [pc, #68]	; (2453c <m2m_wifi_connect_sc+0x3a4>)
   244f8:	0018      	movs	r0, r3
   244fa:	4b11      	ldr	r3, [pc, #68]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   244fc:	4798      	blx	r3
   244fe:	4b1e      	ldr	r3, [pc, #120]	; (24578 <m2m_wifi_connect_sc+0x3e0>)
   24500:	0018      	movs	r0, r3
   24502:	4b0f      	ldr	r3, [pc, #60]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   24504:	4798      	blx	r3
   24506:	4b10      	ldr	r3, [pc, #64]	; (24548 <m2m_wifi_connect_sc+0x3b0>)
   24508:	0018      	movs	r0, r3
   2450a:	4b0d      	ldr	r3, [pc, #52]	; (24540 <m2m_wifi_connect_sc+0x3a8>)
   2450c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2450e:	2397      	movs	r3, #151	; 0x97
   24510:	18fb      	adds	r3, r7, r3
   24512:	22f4      	movs	r2, #244	; 0xf4
   24514:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24516:	e068      	b.n	245ea <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   24518:	238c      	movs	r3, #140	; 0x8c
   2451a:	18fb      	adds	r3, r7, r3
   2451c:	6818      	ldr	r0, [r3, #0]
   2451e:	2382      	movs	r3, #130	; 0x82
   24520:	18fb      	adds	r3, r7, r3
   24522:	881b      	ldrh	r3, [r3, #0]
   24524:	3301      	adds	r3, #1
   24526:	001a      	movs	r2, r3
   24528:	687b      	ldr	r3, [r7, #4]
   2452a:	0019      	movs	r1, r3
   2452c:	4b0d      	ldr	r3, [pc, #52]	; (24564 <m2m_wifi_connect_sc+0x3cc>)
   2452e:	4798      	blx	r3
   24530:	e04a      	b.n	245c8 <m2m_wifi_connect_sc+0x430>
   24532:	46c0      	nop			; (mov r8, r8)
   24534:	0000021a 	.word	0x0000021a
   24538:	0003bb78 	.word	0x0003bb78
   2453c:	0003b7c0 	.word	0x0003b7c0
   24540:	00020109 	.word	0x00020109
   24544:	0003ba00 	.word	0x0003ba00
   24548:	0003b7bc 	.word	0x0003b7bc
   2454c:	00022e07 	.word	0x00022e07
   24550:	00000226 	.word	0x00000226
   24554:	0003ba14 	.word	0x0003ba14
   24558:	0003ba24 	.word	0x0003ba24
   2455c:	00000239 	.word	0x00000239
   24560:	0003ba38 	.word	0x0003ba38
   24564:	00022d8d 	.word	0x00022d8d
   24568:	0003ba44 	.word	0x0003ba44
   2456c:	00000257 	.word	0x00000257
   24570:	0003ba60 	.word	0x0003ba60
   24574:	00000266 	.word	0x00000266
   24578:	0003ba7c 	.word	0x0003ba7c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   2457c:	230a      	movs	r3, #10
   2457e:	18fb      	adds	r3, r7, r3
   24580:	781b      	ldrb	r3, [r3, #0]
   24582:	2b04      	cmp	r3, #4
   24584:	d108      	bne.n	24598 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   24586:	238c      	movs	r3, #140	; 0x8c
   24588:	18fb      	adds	r3, r7, r3
   2458a:	681b      	ldr	r3, [r3, #0]
   2458c:	6879      	ldr	r1, [r7, #4]
   2458e:	223e      	movs	r2, #62	; 0x3e
   24590:	0018      	movs	r0, r3
   24592:	4b1a      	ldr	r3, [pc, #104]	; (245fc <m2m_wifi_connect_sc+0x464>)
   24594:	4798      	blx	r3
   24596:	e017      	b.n	245c8 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   24598:	230a      	movs	r3, #10
   2459a:	18fb      	adds	r3, r7, r3
   2459c:	781b      	ldrb	r3, [r3, #0]
   2459e:	2b01      	cmp	r3, #1
   245a0:	d012      	beq.n	245c8 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   245a2:	4a17      	ldr	r2, [pc, #92]	; (24600 <m2m_wifi_connect_sc+0x468>)
   245a4:	4917      	ldr	r1, [pc, #92]	; (24604 <m2m_wifi_connect_sc+0x46c>)
   245a6:	4b18      	ldr	r3, [pc, #96]	; (24608 <m2m_wifi_connect_sc+0x470>)
   245a8:	0018      	movs	r0, r3
   245aa:	4b18      	ldr	r3, [pc, #96]	; (2460c <m2m_wifi_connect_sc+0x474>)
   245ac:	4798      	blx	r3
   245ae:	4b18      	ldr	r3, [pc, #96]	; (24610 <m2m_wifi_connect_sc+0x478>)
   245b0:	0018      	movs	r0, r3
   245b2:	4b16      	ldr	r3, [pc, #88]	; (2460c <m2m_wifi_connect_sc+0x474>)
   245b4:	4798      	blx	r3
   245b6:	4b17      	ldr	r3, [pc, #92]	; (24614 <m2m_wifi_connect_sc+0x47c>)
   245b8:	0018      	movs	r0, r3
   245ba:	4b14      	ldr	r3, [pc, #80]	; (2460c <m2m_wifi_connect_sc+0x474>)
   245bc:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   245be:	2397      	movs	r3, #151	; 0x97
   245c0:	18fb      	adds	r3, r7, r3
   245c2:	22f4      	movs	r2, #244	; 0xf4
   245c4:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   245c6:	e010      	b.n	245ea <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   245c8:	2397      	movs	r3, #151	; 0x97
   245ca:	18fc      	adds	r4, r7, r3
   245cc:	2314      	movs	r3, #20
   245ce:	18fa      	adds	r2, r7, r3
   245d0:	2300      	movs	r3, #0
   245d2:	9302      	str	r3, [sp, #8]
   245d4:	2300      	movs	r3, #0
   245d6:	9301      	str	r3, [sp, #4]
   245d8:	2300      	movs	r3, #0
   245da:	9300      	str	r3, [sp, #0]
   245dc:	236c      	movs	r3, #108	; 0x6c
   245de:	2128      	movs	r1, #40	; 0x28
   245e0:	2001      	movs	r0, #1
   245e2:	4d0d      	ldr	r5, [pc, #52]	; (24618 <m2m_wifi_connect_sc+0x480>)
   245e4:	47a8      	blx	r5
   245e6:	0003      	movs	r3, r0
   245e8:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   245ea:	2397      	movs	r3, #151	; 0x97
   245ec:	18fb      	adds	r3, r7, r3
   245ee:	781b      	ldrb	r3, [r3, #0]
   245f0:	b25b      	sxtb	r3, r3
}
   245f2:	0018      	movs	r0, r3
   245f4:	46bd      	mov	sp, r7
   245f6:	b026      	add	sp, #152	; 0x98
   245f8:	bdb0      	pop	{r4, r5, r7, pc}
   245fa:	46c0      	nop			; (mov r8, r8)
   245fc:	00022d8d 	.word	0x00022d8d
   24600:	00000276 	.word	0x00000276
   24604:	0003bb78 	.word	0x0003bb78
   24608:	0003b7c0 	.word	0x0003b7c0
   2460c:	00020109 	.word	0x00020109
   24610:	0003ba98 	.word	0x0003ba98
   24614:	0003b7bc 	.word	0x0003b7bc
   24618:	00023029 	.word	0x00023029

0002461c <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   2461c:	b580      	push	{r7, lr}
   2461e:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   24620:	2300      	movs	r3, #0
}
   24622:	0018      	movs	r0, r3
   24624:	46bd      	mov	sp, r7
   24626:	bd80      	pop	{r7, pc}

00024628 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   24628:	b590      	push	{r4, r7, lr}
   2462a:	b087      	sub	sp, #28
   2462c:	af00      	add	r7, sp, #0
   2462e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24630:	2317      	movs	r3, #23
   24632:	18fb      	adds	r3, r7, r3
   24634:	2200      	movs	r2, #0
   24636:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   24638:	687b      	ldr	r3, [r7, #4]
   2463a:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   2463c:	693b      	ldr	r3, [r7, #16]
   2463e:	2280      	movs	r2, #128	; 0x80
   24640:	0052      	lsls	r2, r2, #1
   24642:	4313      	orrs	r3, r2
   24644:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   24646:	693a      	ldr	r2, [r7, #16]
   24648:	23a5      	movs	r3, #165	; 0xa5
   2464a:	015b      	lsls	r3, r3, #5
   2464c:	0011      	movs	r1, r2
   2464e:	0018      	movs	r0, r3
   24650:	4b12      	ldr	r3, [pc, #72]	; (2469c <chip_apply_conf+0x74>)
   24652:	4798      	blx	r3
		if(val32 != 0) {		
   24654:	693b      	ldr	r3, [r7, #16]
   24656:	2b00      	cmp	r3, #0
   24658:	d018      	beq.n	2468c <chip_apply_conf+0x64>
			uint32 reg = 0;
   2465a:	2300      	movs	r3, #0
   2465c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2465e:	2317      	movs	r3, #23
   24660:	18fc      	adds	r4, r7, r3
   24662:	230c      	movs	r3, #12
   24664:	18fa      	adds	r2, r7, r3
   24666:	23a5      	movs	r3, #165	; 0xa5
   24668:	015b      	lsls	r3, r3, #5
   2466a:	0011      	movs	r1, r2
   2466c:	0018      	movs	r0, r3
   2466e:	4b0c      	ldr	r3, [pc, #48]	; (246a0 <chip_apply_conf+0x78>)
   24670:	4798      	blx	r3
   24672:	0003      	movs	r3, r0
   24674:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   24676:	2317      	movs	r3, #23
   24678:	18fb      	adds	r3, r7, r3
   2467a:	781b      	ldrb	r3, [r3, #0]
   2467c:	b25b      	sxtb	r3, r3
   2467e:	2b00      	cmp	r3, #0
   24680:	d1e1      	bne.n	24646 <chip_apply_conf+0x1e>
				if(reg == val32)
   24682:	68fa      	ldr	r2, [r7, #12]
   24684:	693b      	ldr	r3, [r7, #16]
   24686:	429a      	cmp	r2, r3
   24688:	d002      	beq.n	24690 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   2468a:	e7dc      	b.n	24646 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   2468c:	46c0      	nop			; (mov r8, r8)
   2468e:	e000      	b.n	24692 <chip_apply_conf+0x6a>
					break;
   24690:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   24692:	2300      	movs	r3, #0
}
   24694:	0018      	movs	r0, r3
   24696:	46bd      	mov	sp, r7
   24698:	b007      	add	sp, #28
   2469a:	bd90      	pop	{r4, r7, pc}
   2469c:	00024e7d 	.word	0x00024e7d
   246a0:	00024e59 	.word	0x00024e59

000246a4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   246a4:	b590      	push	{r4, r7, lr}
   246a6:	b083      	sub	sp, #12
   246a8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   246aa:	2300      	movs	r3, #0
   246ac:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   246ae:	1dfb      	adds	r3, r7, #7
   246b0:	2200      	movs	r2, #0
   246b2:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   246b4:	1dfc      	adds	r4, r7, #7
   246b6:	003b      	movs	r3, r7
   246b8:	4a24      	ldr	r2, [pc, #144]	; (2474c <enable_interrupts+0xa8>)
   246ba:	0019      	movs	r1, r3
   246bc:	0010      	movs	r0, r2
   246be:	4b24      	ldr	r3, [pc, #144]	; (24750 <enable_interrupts+0xac>)
   246c0:	4798      	blx	r3
   246c2:	0003      	movs	r3, r0
   246c4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   246c6:	1dfb      	adds	r3, r7, #7
   246c8:	781b      	ldrb	r3, [r3, #0]
   246ca:	b25b      	sxtb	r3, r3
   246cc:	2b00      	cmp	r3, #0
   246ce:	d131      	bne.n	24734 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   246d0:	683b      	ldr	r3, [r7, #0]
   246d2:	2280      	movs	r2, #128	; 0x80
   246d4:	0052      	lsls	r2, r2, #1
   246d6:	4313      	orrs	r3, r2
   246d8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   246da:	683b      	ldr	r3, [r7, #0]
   246dc:	1dfc      	adds	r4, r7, #7
   246de:	4a1b      	ldr	r2, [pc, #108]	; (2474c <enable_interrupts+0xa8>)
   246e0:	0019      	movs	r1, r3
   246e2:	0010      	movs	r0, r2
   246e4:	4b1b      	ldr	r3, [pc, #108]	; (24754 <enable_interrupts+0xb0>)
   246e6:	4798      	blx	r3
   246e8:	0003      	movs	r3, r0
   246ea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   246ec:	1dfb      	adds	r3, r7, #7
   246ee:	781b      	ldrb	r3, [r3, #0]
   246f0:	b25b      	sxtb	r3, r3
   246f2:	2b00      	cmp	r3, #0
   246f4:	d120      	bne.n	24738 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   246f6:	1dfc      	adds	r4, r7, #7
   246f8:	003a      	movs	r2, r7
   246fa:	23d0      	movs	r3, #208	; 0xd0
   246fc:	015b      	lsls	r3, r3, #5
   246fe:	0011      	movs	r1, r2
   24700:	0018      	movs	r0, r3
   24702:	4b13      	ldr	r3, [pc, #76]	; (24750 <enable_interrupts+0xac>)
   24704:	4798      	blx	r3
   24706:	0003      	movs	r3, r0
   24708:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2470a:	1dfb      	adds	r3, r7, #7
   2470c:	781b      	ldrb	r3, [r3, #0]
   2470e:	b25b      	sxtb	r3, r3
   24710:	2b00      	cmp	r3, #0
   24712:	d113      	bne.n	2473c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   24714:	683b      	ldr	r3, [r7, #0]
   24716:	2280      	movs	r2, #128	; 0x80
   24718:	0252      	lsls	r2, r2, #9
   2471a:	4313      	orrs	r3, r2
   2471c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2471e:	683a      	ldr	r2, [r7, #0]
   24720:	1dfc      	adds	r4, r7, #7
   24722:	23d0      	movs	r3, #208	; 0xd0
   24724:	015b      	lsls	r3, r3, #5
   24726:	0011      	movs	r1, r2
   24728:	0018      	movs	r0, r3
   2472a:	4b0a      	ldr	r3, [pc, #40]	; (24754 <enable_interrupts+0xb0>)
   2472c:	4798      	blx	r3
   2472e:	0003      	movs	r3, r0
   24730:	7023      	strb	r3, [r4, #0]
   24732:	e004      	b.n	2473e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24734:	46c0      	nop			; (mov r8, r8)
   24736:	e002      	b.n	2473e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24738:	46c0      	nop			; (mov r8, r8)
   2473a:	e000      	b.n	2473e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2473c:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2473e:	1dfb      	adds	r3, r7, #7
   24740:	781b      	ldrb	r3, [r3, #0]
   24742:	b25b      	sxtb	r3, r3
}
   24744:	0018      	movs	r0, r3
   24746:	46bd      	mov	sp, r7
   24748:	b003      	add	sp, #12
   2474a:	bd90      	pop	{r4, r7, pc}
   2474c:	00001408 	.word	0x00001408
   24750:	00024e59 	.word	0x00024e59
   24754:	00024e7d 	.word	0x00024e7d

00024758 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   24758:	b580      	push	{r7, lr}
   2475a:	b082      	sub	sp, #8
   2475c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2475e:	4b32      	ldr	r3, [pc, #200]	; (24828 <nmi_get_chipid+0xd0>)
   24760:	681b      	ldr	r3, [r3, #0]
   24762:	2b00      	cmp	r3, #0
   24764:	d159      	bne.n	2481a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   24766:	4a30      	ldr	r2, [pc, #192]	; (24828 <nmi_get_chipid+0xd0>)
   24768:	2380      	movs	r3, #128	; 0x80
   2476a:	015b      	lsls	r3, r3, #5
   2476c:	0011      	movs	r1, r2
   2476e:	0018      	movs	r0, r3
   24770:	4b2e      	ldr	r3, [pc, #184]	; (2482c <nmi_get_chipid+0xd4>)
   24772:	4798      	blx	r3
   24774:	1e03      	subs	r3, r0, #0
   24776:	d004      	beq.n	24782 <nmi_get_chipid+0x2a>
			chipid = 0;
   24778:	4b2b      	ldr	r3, [pc, #172]	; (24828 <nmi_get_chipid+0xd0>)
   2477a:	2200      	movs	r2, #0
   2477c:	601a      	str	r2, [r3, #0]
			return 0;
   2477e:	2300      	movs	r3, #0
   24780:	e04d      	b.n	2481e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   24782:	1d3b      	adds	r3, r7, #4
   24784:	4a2a      	ldr	r2, [pc, #168]	; (24830 <nmi_get_chipid+0xd8>)
   24786:	0019      	movs	r1, r3
   24788:	0010      	movs	r0, r2
   2478a:	4b28      	ldr	r3, [pc, #160]	; (2482c <nmi_get_chipid+0xd4>)
   2478c:	4798      	blx	r3
   2478e:	1e03      	subs	r3, r0, #0
   24790:	d004      	beq.n	2479c <nmi_get_chipid+0x44>
			chipid = 0;
   24792:	4b25      	ldr	r3, [pc, #148]	; (24828 <nmi_get_chipid+0xd0>)
   24794:	2200      	movs	r2, #0
   24796:	601a      	str	r2, [r3, #0]
			return 0;
   24798:	2300      	movs	r3, #0
   2479a:	e040      	b.n	2481e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   2479c:	4b22      	ldr	r3, [pc, #136]	; (24828 <nmi_get_chipid+0xd0>)
   2479e:	681b      	ldr	r3, [r3, #0]
   247a0:	4a24      	ldr	r2, [pc, #144]	; (24834 <nmi_get_chipid+0xdc>)
   247a2:	4293      	cmp	r3, r2
   247a4:	d106      	bne.n	247b4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   247a6:	687b      	ldr	r3, [r7, #4]
   247a8:	2b01      	cmp	r3, #1
   247aa:	d029      	beq.n	24800 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   247ac:	4b1e      	ldr	r3, [pc, #120]	; (24828 <nmi_get_chipid+0xd0>)
   247ae:	4a22      	ldr	r2, [pc, #136]	; (24838 <nmi_get_chipid+0xe0>)
   247b0:	601a      	str	r2, [r3, #0]
   247b2:	e025      	b.n	24800 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   247b4:	4b1c      	ldr	r3, [pc, #112]	; (24828 <nmi_get_chipid+0xd0>)
   247b6:	681b      	ldr	r3, [r3, #0]
   247b8:	4a20      	ldr	r2, [pc, #128]	; (2483c <nmi_get_chipid+0xe4>)
   247ba:	4293      	cmp	r3, r2
   247bc:	d10d      	bne.n	247da <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   247be:	687b      	ldr	r3, [r7, #4]
   247c0:	2b03      	cmp	r3, #3
   247c2:	d01d      	beq.n	24800 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   247c4:	687b      	ldr	r3, [r7, #4]
   247c6:	2b04      	cmp	r3, #4
   247c8:	d103      	bne.n	247d2 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   247ca:	4b17      	ldr	r3, [pc, #92]	; (24828 <nmi_get_chipid+0xd0>)
   247cc:	4a1c      	ldr	r2, [pc, #112]	; (24840 <nmi_get_chipid+0xe8>)
   247ce:	601a      	str	r2, [r3, #0]
   247d0:	e016      	b.n	24800 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   247d2:	4b15      	ldr	r3, [pc, #84]	; (24828 <nmi_get_chipid+0xd0>)
   247d4:	4a1b      	ldr	r2, [pc, #108]	; (24844 <nmi_get_chipid+0xec>)
   247d6:	601a      	str	r2, [r3, #0]
   247d8:	e012      	b.n	24800 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   247da:	4b13      	ldr	r3, [pc, #76]	; (24828 <nmi_get_chipid+0xd0>)
   247dc:	681b      	ldr	r3, [r3, #0]
   247de:	4a1a      	ldr	r2, [pc, #104]	; (24848 <nmi_get_chipid+0xf0>)
   247e0:	4293      	cmp	r3, r2
   247e2:	d10d      	bne.n	24800 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   247e4:	4a10      	ldr	r2, [pc, #64]	; (24828 <nmi_get_chipid+0xd0>)
   247e6:	23ec      	movs	r3, #236	; 0xec
   247e8:	039b      	lsls	r3, r3, #14
   247ea:	0011      	movs	r1, r2
   247ec:	0018      	movs	r0, r3
   247ee:	4b0f      	ldr	r3, [pc, #60]	; (2482c <nmi_get_chipid+0xd4>)
   247f0:	4798      	blx	r3
   247f2:	1e03      	subs	r3, r0, #0
   247f4:	d004      	beq.n	24800 <nmi_get_chipid+0xa8>
			chipid = 0;
   247f6:	4b0c      	ldr	r3, [pc, #48]	; (24828 <nmi_get_chipid+0xd0>)
   247f8:	2200      	movs	r2, #0
   247fa:	601a      	str	r2, [r3, #0]
			return 0;
   247fc:	2300      	movs	r3, #0
   247fe:	e00e      	b.n	2481e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   24800:	4b09      	ldr	r3, [pc, #36]	; (24828 <nmi_get_chipid+0xd0>)
   24802:	681b      	ldr	r3, [r3, #0]
   24804:	4a11      	ldr	r2, [pc, #68]	; (2484c <nmi_get_chipid+0xf4>)
   24806:	401a      	ands	r2, r3
   24808:	4b07      	ldr	r3, [pc, #28]	; (24828 <nmi_get_chipid+0xd0>)
   2480a:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   2480c:	4b06      	ldr	r3, [pc, #24]	; (24828 <nmi_get_chipid+0xd0>)
   2480e:	681b      	ldr	r3, [r3, #0]
   24810:	22a0      	movs	r2, #160	; 0xa0
   24812:	02d2      	lsls	r2, r2, #11
   24814:	431a      	orrs	r2, r3
   24816:	4b04      	ldr	r3, [pc, #16]	; (24828 <nmi_get_chipid+0xd0>)
   24818:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   2481a:	4b03      	ldr	r3, [pc, #12]	; (24828 <nmi_get_chipid+0xd0>)
   2481c:	681b      	ldr	r3, [r3, #0]
}
   2481e:	0018      	movs	r0, r3
   24820:	46bd      	mov	sp, r7
   24822:	b002      	add	sp, #8
   24824:	bd80      	pop	{r7, pc}
   24826:	46c0      	nop			; (mov r8, r8)
   24828:	2000410c 	.word	0x2000410c
   2482c:	00024e59 	.word	0x00024e59
   24830:	000013f4 	.word	0x000013f4
   24834:	001002a0 	.word	0x001002a0
   24838:	001002a1 	.word	0x001002a1
   2483c:	001002b0 	.word	0x001002b0
   24840:	001002b1 	.word	0x001002b1
   24844:	001002b2 	.word	0x001002b2
   24848:	001000f0 	.word	0x001000f0
   2484c:	fff0ffff 	.word	0xfff0ffff

00024850 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   24850:	b590      	push	{r4, r7, lr}
   24852:	b083      	sub	sp, #12
   24854:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   24856:	1dfb      	adds	r3, r7, #7
   24858:	2200      	movs	r2, #0
   2485a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   2485c:	1dfc      	adds	r4, r7, #7
   2485e:	003b      	movs	r3, r7
   24860:	0019      	movs	r1, r3
   24862:	2010      	movs	r0, #16
   24864:	4b2e      	ldr	r3, [pc, #184]	; (24920 <chip_sleep+0xd0>)
   24866:	4798      	blx	r3
   24868:	0003      	movs	r3, r0
   2486a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   2486c:	1dfb      	adds	r3, r7, #7
   2486e:	781b      	ldrb	r3, [r3, #0]
   24870:	b25b      	sxtb	r3, r3
   24872:	2b00      	cmp	r3, #0
   24874:	d145      	bne.n	24902 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   24876:	683b      	ldr	r3, [r7, #0]
   24878:	2201      	movs	r2, #1
   2487a:	4013      	ands	r3, r2
   2487c:	d000      	beq.n	24880 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   2487e:	e7ed      	b.n	2485c <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   24880:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   24882:	1dfc      	adds	r4, r7, #7
   24884:	003b      	movs	r3, r7
   24886:	0019      	movs	r1, r3
   24888:	2001      	movs	r0, #1
   2488a:	4b25      	ldr	r3, [pc, #148]	; (24920 <chip_sleep+0xd0>)
   2488c:	4798      	blx	r3
   2488e:	0003      	movs	r3, r0
   24890:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   24892:	1dfb      	adds	r3, r7, #7
   24894:	781b      	ldrb	r3, [r3, #0]
   24896:	b25b      	sxtb	r3, r3
   24898:	2b00      	cmp	r3, #0
   2489a:	d134      	bne.n	24906 <chip_sleep+0xb6>
	if(reg & NBIT1)
   2489c:	683b      	ldr	r3, [r7, #0]
   2489e:	2202      	movs	r2, #2
   248a0:	4013      	ands	r3, r2
   248a2:	d010      	beq.n	248c6 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   248a4:	683b      	ldr	r3, [r7, #0]
   248a6:	2202      	movs	r2, #2
   248a8:	4393      	bics	r3, r2
   248aa:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   248ac:	683b      	ldr	r3, [r7, #0]
   248ae:	1dfc      	adds	r4, r7, #7
   248b0:	0019      	movs	r1, r3
   248b2:	2001      	movs	r0, #1
   248b4:	4b1b      	ldr	r3, [pc, #108]	; (24924 <chip_sleep+0xd4>)
   248b6:	4798      	blx	r3
   248b8:	0003      	movs	r3, r0
   248ba:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   248bc:	1dfb      	adds	r3, r7, #7
   248be:	781b      	ldrb	r3, [r3, #0]
   248c0:	b25b      	sxtb	r3, r3
   248c2:	2b00      	cmp	r3, #0
   248c4:	d121      	bne.n	2490a <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   248c6:	1dfc      	adds	r4, r7, #7
   248c8:	003b      	movs	r3, r7
   248ca:	0019      	movs	r1, r3
   248cc:	200b      	movs	r0, #11
   248ce:	4b14      	ldr	r3, [pc, #80]	; (24920 <chip_sleep+0xd0>)
   248d0:	4798      	blx	r3
   248d2:	0003      	movs	r3, r0
   248d4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   248d6:	1dfb      	adds	r3, r7, #7
   248d8:	781b      	ldrb	r3, [r3, #0]
   248da:	b25b      	sxtb	r3, r3
   248dc:	2b00      	cmp	r3, #0
   248de:	d116      	bne.n	2490e <chip_sleep+0xbe>
	if(reg & NBIT0)
   248e0:	683b      	ldr	r3, [r7, #0]
   248e2:	2201      	movs	r2, #1
   248e4:	4013      	ands	r3, r2
   248e6:	d013      	beq.n	24910 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   248e8:	683b      	ldr	r3, [r7, #0]
   248ea:	2201      	movs	r2, #1
   248ec:	4393      	bics	r3, r2
   248ee:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   248f0:	683b      	ldr	r3, [r7, #0]
   248f2:	1dfc      	adds	r4, r7, #7
   248f4:	0019      	movs	r1, r3
   248f6:	200b      	movs	r0, #11
   248f8:	4b0a      	ldr	r3, [pc, #40]	; (24924 <chip_sleep+0xd4>)
   248fa:	4798      	blx	r3
   248fc:	0003      	movs	r3, r0
   248fe:	7023      	strb	r3, [r4, #0]
   24900:	e006      	b.n	24910 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   24902:	46c0      	nop			; (mov r8, r8)
   24904:	e004      	b.n	24910 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   24906:	46c0      	nop			; (mov r8, r8)
   24908:	e002      	b.n	24910 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   2490a:	46c0      	nop			; (mov r8, r8)
   2490c:	e000      	b.n	24910 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2490e:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   24910:	1dfb      	adds	r3, r7, #7
   24912:	781b      	ldrb	r3, [r3, #0]
   24914:	b25b      	sxtb	r3, r3
}
   24916:	0018      	movs	r0, r3
   24918:	46bd      	mov	sp, r7
   2491a:	b003      	add	sp, #12
   2491c:	bd90      	pop	{r4, r7, pc}
   2491e:	46c0      	nop			; (mov r8, r8)
   24920:	00024e59 	.word	0x00024e59
   24924:	00024e7d 	.word	0x00024e7d

00024928 <chip_wake>:
sint8 chip_wake(void)
{
   24928:	b590      	push	{r4, r7, lr}
   2492a:	b085      	sub	sp, #20
   2492c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2492e:	230f      	movs	r3, #15
   24930:	18fb      	adds	r3, r7, r3
   24932:	2200      	movs	r2, #0
   24934:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   24936:	2300      	movs	r3, #0
   24938:	607b      	str	r3, [r7, #4]
   2493a:	2300      	movs	r3, #0
   2493c:	603b      	str	r3, [r7, #0]
   2493e:	2300      	movs	r3, #0
   24940:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   24942:	230f      	movs	r3, #15
   24944:	18fc      	adds	r4, r7, r3
   24946:	1d3b      	adds	r3, r7, #4
   24948:	0019      	movs	r1, r3
   2494a:	200b      	movs	r0, #11
   2494c:	4b4e      	ldr	r3, [pc, #312]	; (24a88 <chip_wake+0x160>)
   2494e:	4798      	blx	r3
   24950:	0003      	movs	r3, r0
   24952:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24954:	230f      	movs	r3, #15
   24956:	18fb      	adds	r3, r7, r3
   24958:	781b      	ldrb	r3, [r3, #0]
   2495a:	b25b      	sxtb	r3, r3
   2495c:	2b00      	cmp	r3, #0
   2495e:	d000      	beq.n	24962 <chip_wake+0x3a>
   24960:	e082      	b.n	24a68 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   24962:	687b      	ldr	r3, [r7, #4]
   24964:	2201      	movs	r2, #1
   24966:	4013      	ands	r3, r2
   24968:	d111      	bne.n	2498e <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   2496a:	687b      	ldr	r3, [r7, #4]
   2496c:	2201      	movs	r2, #1
   2496e:	4313      	orrs	r3, r2
   24970:	220f      	movs	r2, #15
   24972:	18bc      	adds	r4, r7, r2
   24974:	0019      	movs	r1, r3
   24976:	200b      	movs	r0, #11
   24978:	4b44      	ldr	r3, [pc, #272]	; (24a8c <chip_wake+0x164>)
   2497a:	4798      	blx	r3
   2497c:	0003      	movs	r3, r0
   2497e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24980:	230f      	movs	r3, #15
   24982:	18fb      	adds	r3, r7, r3
   24984:	781b      	ldrb	r3, [r3, #0]
   24986:	b25b      	sxtb	r3, r3
   24988:	2b00      	cmp	r3, #0
   2498a:	d000      	beq.n	2498e <chip_wake+0x66>
   2498c:	e06e      	b.n	24a6c <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2498e:	230f      	movs	r3, #15
   24990:	18fc      	adds	r4, r7, r3
   24992:	1d3b      	adds	r3, r7, #4
   24994:	0019      	movs	r1, r3
   24996:	2001      	movs	r0, #1
   24998:	4b3b      	ldr	r3, [pc, #236]	; (24a88 <chip_wake+0x160>)
   2499a:	4798      	blx	r3
   2499c:	0003      	movs	r3, r0
   2499e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   249a0:	230f      	movs	r3, #15
   249a2:	18fb      	adds	r3, r7, r3
   249a4:	781b      	ldrb	r3, [r3, #0]
   249a6:	b25b      	sxtb	r3, r3
   249a8:	2b00      	cmp	r3, #0
   249aa:	d161      	bne.n	24a70 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   249ac:	687b      	ldr	r3, [r7, #4]
   249ae:	2202      	movs	r2, #2
   249b0:	4013      	ands	r3, r2
   249b2:	d110      	bne.n	249d6 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   249b4:	687b      	ldr	r3, [r7, #4]
   249b6:	2202      	movs	r2, #2
   249b8:	4313      	orrs	r3, r2
   249ba:	220f      	movs	r2, #15
   249bc:	18bc      	adds	r4, r7, r2
   249be:	0019      	movs	r1, r3
   249c0:	2001      	movs	r0, #1
   249c2:	4b32      	ldr	r3, [pc, #200]	; (24a8c <chip_wake+0x164>)
   249c4:	4798      	blx	r3
   249c6:	0003      	movs	r3, r0
   249c8:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   249ca:	230f      	movs	r3, #15
   249cc:	18fb      	adds	r3, r7, r3
   249ce:	781b      	ldrb	r3, [r3, #0]
   249d0:	b25b      	sxtb	r3, r3
   249d2:	2b00      	cmp	r3, #0
   249d4:	d14e      	bne.n	24a74 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   249d6:	230f      	movs	r3, #15
   249d8:	18fc      	adds	r4, r7, r3
   249da:	003b      	movs	r3, r7
   249dc:	0019      	movs	r1, r3
   249de:	200f      	movs	r0, #15
   249e0:	4b29      	ldr	r3, [pc, #164]	; (24a88 <chip_wake+0x160>)
   249e2:	4798      	blx	r3
   249e4:	0003      	movs	r3, r0
   249e6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   249e8:	230f      	movs	r3, #15
   249ea:	18fb      	adds	r3, r7, r3
   249ec:	781b      	ldrb	r3, [r3, #0]
   249ee:	b25b      	sxtb	r3, r3
   249f0:	2b00      	cmp	r3, #0
   249f2:	d014      	beq.n	24a1e <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   249f4:	23a8      	movs	r3, #168	; 0xa8
   249f6:	005a      	lsls	r2, r3, #1
   249f8:	4925      	ldr	r1, [pc, #148]	; (24a90 <chip_wake+0x168>)
   249fa:	4b26      	ldr	r3, [pc, #152]	; (24a94 <chip_wake+0x16c>)
   249fc:	0018      	movs	r0, r3
   249fe:	4b26      	ldr	r3, [pc, #152]	; (24a98 <chip_wake+0x170>)
   24a00:	4798      	blx	r3
   24a02:	230f      	movs	r3, #15
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	2100      	movs	r1, #0
   24a08:	5659      	ldrsb	r1, [r3, r1]
   24a0a:	683a      	ldr	r2, [r7, #0]
   24a0c:	4b23      	ldr	r3, [pc, #140]	; (24a9c <chip_wake+0x174>)
   24a0e:	0018      	movs	r0, r3
   24a10:	4b21      	ldr	r3, [pc, #132]	; (24a98 <chip_wake+0x170>)
   24a12:	4798      	blx	r3
   24a14:	4b22      	ldr	r3, [pc, #136]	; (24aa0 <chip_wake+0x178>)
   24a16:	0018      	movs	r0, r3
   24a18:	4b1f      	ldr	r3, [pc, #124]	; (24a98 <chip_wake+0x170>)
   24a1a:	4798      	blx	r3
			goto _WAKE_EXIT;
   24a1c:	e02b      	b.n	24a76 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   24a1e:	683b      	ldr	r3, [r7, #0]
   24a20:	2204      	movs	r2, #4
   24a22:	4013      	ands	r3, r2
   24a24:	d11c      	bne.n	24a60 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   24a26:	2002      	movs	r0, #2
   24a28:	4b1e      	ldr	r3, [pc, #120]	; (24aa4 <chip_wake+0x17c>)
   24a2a:	4798      	blx	r3
		trials++;
   24a2c:	68bb      	ldr	r3, [r7, #8]
   24a2e:	3301      	adds	r3, #1
   24a30:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   24a32:	68bb      	ldr	r3, [r7, #8]
   24a34:	2b04      	cmp	r3, #4
   24a36:	d9ce      	bls.n	249d6 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   24a38:	23ad      	movs	r3, #173	; 0xad
   24a3a:	005a      	lsls	r2, r3, #1
   24a3c:	4914      	ldr	r1, [pc, #80]	; (24a90 <chip_wake+0x168>)
   24a3e:	4b15      	ldr	r3, [pc, #84]	; (24a94 <chip_wake+0x16c>)
   24a40:	0018      	movs	r0, r3
   24a42:	4b15      	ldr	r3, [pc, #84]	; (24a98 <chip_wake+0x170>)
   24a44:	4798      	blx	r3
   24a46:	4b18      	ldr	r3, [pc, #96]	; (24aa8 <chip_wake+0x180>)
   24a48:	0018      	movs	r0, r3
   24a4a:	4b13      	ldr	r3, [pc, #76]	; (24a98 <chip_wake+0x170>)
   24a4c:	4798      	blx	r3
   24a4e:	4b14      	ldr	r3, [pc, #80]	; (24aa0 <chip_wake+0x178>)
   24a50:	0018      	movs	r0, r3
   24a52:	4b11      	ldr	r3, [pc, #68]	; (24a98 <chip_wake+0x170>)
   24a54:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   24a56:	230f      	movs	r3, #15
   24a58:	18fb      	adds	r3, r7, r3
   24a5a:	22fc      	movs	r2, #252	; 0xfc
   24a5c:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   24a5e:	e00a      	b.n	24a76 <chip_wake+0x14e>
			break;
   24a60:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   24a62:	4b12      	ldr	r3, [pc, #72]	; (24aac <chip_wake+0x184>)
   24a64:	4798      	blx	r3
   24a66:	e006      	b.n	24a76 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24a68:	46c0      	nop			; (mov r8, r8)
   24a6a:	e004      	b.n	24a76 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24a6c:	46c0      	nop			; (mov r8, r8)
   24a6e:	e002      	b.n	24a76 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24a70:	46c0      	nop			; (mov r8, r8)
   24a72:	e000      	b.n	24a76 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   24a74:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   24a76:	230f      	movs	r3, #15
   24a78:	18fb      	adds	r3, r7, r3
   24a7a:	781b      	ldrb	r3, [r3, #0]
   24a7c:	b25b      	sxtb	r3, r3
}
   24a7e:	0018      	movs	r0, r3
   24a80:	46bd      	mov	sp, r7
   24a82:	b005      	add	sp, #20
   24a84:	bd90      	pop	{r4, r7, pc}
   24a86:	46c0      	nop			; (mov r8, r8)
   24a88:	00024e59 	.word	0x00024e59
   24a8c:	00024e7d 	.word	0x00024e7d
   24a90:	0003bc18 	.word	0x0003bc18
   24a94:	0003bb8c 	.word	0x0003bb8c
   24a98:	00020109 	.word	0x00020109
   24a9c:	0003bba0 	.word	0x0003bba0
   24aa0:	0003bbb8 	.word	0x0003bbb8
   24aa4:	00022579 	.word	0x00022579
   24aa8:	0003bbbc 	.word	0x0003bbbc
   24aac:	00024e19 	.word	0x00024e19

00024ab0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   24ab0:	b580      	push	{r7, lr}
   24ab2:	b088      	sub	sp, #32
   24ab4:	af00      	add	r7, sp, #0
   24ab6:	0002      	movs	r2, r0
   24ab8:	1dfb      	adds	r3, r7, #7
   24aba:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24abc:	2313      	movs	r3, #19
   24abe:	18fb      	adds	r3, r7, r3
   24ac0:	2200      	movs	r2, #0
   24ac2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24ac4:	2300      	movs	r3, #0
   24ac6:	61fb      	str	r3, [r7, #28]
   24ac8:	2300      	movs	r3, #0
   24aca:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   24acc:	2300      	movs	r3, #0
   24ace:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   24ad0:	4b4a      	ldr	r3, [pc, #296]	; (24bfc <wait_for_bootrom+0x14c>)
   24ad2:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   24ad4:	2300      	movs	r3, #0
   24ad6:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   24ad8:	4b49      	ldr	r3, [pc, #292]	; (24c00 <wait_for_bootrom+0x150>)
   24ada:	0018      	movs	r0, r3
   24adc:	4b49      	ldr	r3, [pc, #292]	; (24c04 <wait_for_bootrom+0x154>)
   24ade:	4798      	blx	r3
   24ae0:	0003      	movs	r3, r0
   24ae2:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   24ae4:	69fb      	ldr	r3, [r7, #28]
   24ae6:	2b00      	cmp	r3, #0
   24ae8:	db03      	blt.n	24af2 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   24aea:	2001      	movs	r0, #1
   24aec:	4b46      	ldr	r3, [pc, #280]	; (24c08 <wait_for_bootrom+0x158>)
   24aee:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   24af0:	e7f2      	b.n	24ad8 <wait_for_bootrom+0x28>
			break;
   24af2:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   24af4:	4b45      	ldr	r3, [pc, #276]	; (24c0c <wait_for_bootrom+0x15c>)
   24af6:	0018      	movs	r0, r3
   24af8:	4b42      	ldr	r3, [pc, #264]	; (24c04 <wait_for_bootrom+0x154>)
   24afa:	4798      	blx	r3
   24afc:	0003      	movs	r3, r0
   24afe:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   24b00:	69fb      	ldr	r3, [r7, #28]
   24b02:	2201      	movs	r2, #1
   24b04:	4013      	ands	r3, r2
   24b06:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   24b08:	69fb      	ldr	r3, [r7, #28]
   24b0a:	2b00      	cmp	r3, #0
   24b0c:	d112      	bne.n	24b34 <wait_for_bootrom+0x84>
	{
		reg = 0;
   24b0e:	2300      	movs	r3, #0
   24b10:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   24b12:	e00b      	b.n	24b2c <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   24b14:	2001      	movs	r0, #1
   24b16:	4b3c      	ldr	r3, [pc, #240]	; (24c08 <wait_for_bootrom+0x158>)
   24b18:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   24b1a:	4b3d      	ldr	r3, [pc, #244]	; (24c10 <wait_for_bootrom+0x160>)
   24b1c:	0018      	movs	r0, r3
   24b1e:	4b39      	ldr	r3, [pc, #228]	; (24c04 <wait_for_bootrom+0x154>)
   24b20:	4798      	blx	r3
   24b22:	0003      	movs	r3, r0
   24b24:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   24b26:	69bb      	ldr	r3, [r7, #24]
   24b28:	3301      	adds	r3, #1
   24b2a:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   24b2c:	69fb      	ldr	r3, [r7, #28]
   24b2e:	4a39      	ldr	r2, [pc, #228]	; (24c14 <wait_for_bootrom+0x164>)
   24b30:	4293      	cmp	r3, r2
   24b32:	d1ef      	bne.n	24b14 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   24b34:	1dfb      	adds	r3, r7, #7
   24b36:	781b      	ldrb	r3, [r3, #0]
   24b38:	2b02      	cmp	r3, #2
   24b3a:	d10d      	bne.n	24b58 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   24b3c:	4a36      	ldr	r2, [pc, #216]	; (24c18 <wait_for_bootrom+0x168>)
   24b3e:	4b37      	ldr	r3, [pc, #220]	; (24c1c <wait_for_bootrom+0x16c>)
   24b40:	0011      	movs	r1, r2
   24b42:	0018      	movs	r0, r3
   24b44:	4b36      	ldr	r3, [pc, #216]	; (24c20 <wait_for_bootrom+0x170>)
   24b46:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   24b48:	2380      	movs	r3, #128	; 0x80
   24b4a:	035b      	lsls	r3, r3, #13
   24b4c:	4a35      	ldr	r2, [pc, #212]	; (24c24 <wait_for_bootrom+0x174>)
   24b4e:	0019      	movs	r1, r3
   24b50:	0010      	movs	r0, r2
   24b52:	4b33      	ldr	r3, [pc, #204]	; (24c20 <wait_for_bootrom+0x170>)
   24b54:	4798      	blx	r3
   24b56:	e022      	b.n	24b9e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   24b58:	1dfb      	adds	r3, r7, #7
   24b5a:	781b      	ldrb	r3, [r3, #0]
   24b5c:	2b03      	cmp	r3, #3
   24b5e:	d10b      	bne.n	24b78 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   24b60:	4a2d      	ldr	r2, [pc, #180]	; (24c18 <wait_for_bootrom+0x168>)
   24b62:	4b2e      	ldr	r3, [pc, #184]	; (24c1c <wait_for_bootrom+0x16c>)
   24b64:	0011      	movs	r1, r2
   24b66:	0018      	movs	r0, r3
   24b68:	4b2d      	ldr	r3, [pc, #180]	; (24c20 <wait_for_bootrom+0x170>)
   24b6a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   24b6c:	4b2d      	ldr	r3, [pc, #180]	; (24c24 <wait_for_bootrom+0x174>)
   24b6e:	2100      	movs	r1, #0
   24b70:	0018      	movs	r0, r3
   24b72:	4b2b      	ldr	r3, [pc, #172]	; (24c20 <wait_for_bootrom+0x170>)
   24b74:	4798      	blx	r3
   24b76:	e012      	b.n	24b9e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   24b78:	1dfb      	adds	r3, r7, #7
   24b7a:	781b      	ldrb	r3, [r3, #0]
   24b7c:	2b04      	cmp	r3, #4
   24b7e:	d108      	bne.n	24b92 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   24b80:	2380      	movs	r3, #128	; 0x80
   24b82:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   24b84:	68fb      	ldr	r3, [r7, #12]
   24b86:	4a27      	ldr	r2, [pc, #156]	; (24c24 <wait_for_bootrom+0x174>)
   24b88:	0019      	movs	r1, r3
   24b8a:	0010      	movs	r0, r2
   24b8c:	4b24      	ldr	r3, [pc, #144]	; (24c20 <wait_for_bootrom+0x170>)
   24b8e:	4798      	blx	r3
   24b90:	e005      	b.n	24b9e <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   24b92:	68fb      	ldr	r3, [r7, #12]
   24b94:	4a23      	ldr	r2, [pc, #140]	; (24c24 <wait_for_bootrom+0x174>)
   24b96:	0019      	movs	r1, r3
   24b98:	0010      	movs	r0, r2
   24b9a:	4b21      	ldr	r3, [pc, #132]	; (24c20 <wait_for_bootrom+0x170>)
   24b9c:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   24b9e:	4b22      	ldr	r3, [pc, #136]	; (24c28 <wait_for_bootrom+0x178>)
   24ba0:	4798      	blx	r3
   24ba2:	0003      	movs	r3, r0
   24ba4:	051b      	lsls	r3, r3, #20
   24ba6:	0d1b      	lsrs	r3, r3, #20
   24ba8:	4a20      	ldr	r2, [pc, #128]	; (24c2c <wait_for_bootrom+0x17c>)
   24baa:	4293      	cmp	r3, r2
   24bac:	d906      	bls.n	24bbc <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   24bae:	697b      	ldr	r3, [r7, #20]
   24bb0:	2202      	movs	r2, #2
   24bb2:	4313      	orrs	r3, r2
   24bb4:	0018      	movs	r0, r3
   24bb6:	4b1e      	ldr	r3, [pc, #120]	; (24c30 <wait_for_bootrom+0x180>)
   24bb8:	4798      	blx	r3
   24bba:	e003      	b.n	24bc4 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   24bbc:	697b      	ldr	r3, [r7, #20]
   24bbe:	0018      	movs	r0, r3
   24bc0:	4b1b      	ldr	r3, [pc, #108]	; (24c30 <wait_for_bootrom+0x180>)
   24bc2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   24bc4:	4b1b      	ldr	r3, [pc, #108]	; (24c34 <wait_for_bootrom+0x184>)
   24bc6:	0018      	movs	r0, r3
   24bc8:	4b1b      	ldr	r3, [pc, #108]	; (24c38 <wait_for_bootrom+0x188>)
   24bca:	4798      	blx	r3
   24bcc:	68fa      	ldr	r2, [r7, #12]
   24bce:	4b1b      	ldr	r3, [pc, #108]	; (24c3c <wait_for_bootrom+0x18c>)
   24bd0:	0011      	movs	r1, r2
   24bd2:	0018      	movs	r0, r3
   24bd4:	4b18      	ldr	r3, [pc, #96]	; (24c38 <wait_for_bootrom+0x188>)
   24bd6:	4798      	blx	r3
   24bd8:	4b19      	ldr	r3, [pc, #100]	; (24c40 <wait_for_bootrom+0x190>)
   24bda:	0018      	movs	r0, r3
   24bdc:	4b16      	ldr	r3, [pc, #88]	; (24c38 <wait_for_bootrom+0x188>)
   24bde:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   24be0:	4a18      	ldr	r2, [pc, #96]	; (24c44 <wait_for_bootrom+0x194>)
   24be2:	4b0b      	ldr	r3, [pc, #44]	; (24c10 <wait_for_bootrom+0x160>)
   24be4:	0011      	movs	r1, r2
   24be6:	0018      	movs	r0, r3
   24be8:	4b0d      	ldr	r3, [pc, #52]	; (24c20 <wait_for_bootrom+0x170>)
   24bea:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   24bec:	2313      	movs	r3, #19
   24bee:	18fb      	adds	r3, r7, r3
   24bf0:	781b      	ldrb	r3, [r3, #0]
   24bf2:	b25b      	sxtb	r3, r3
}
   24bf4:	0018      	movs	r0, r3
   24bf6:	46bd      	mov	sp, r7
   24bf8:	b008      	add	sp, #32
   24bfa:	bd80      	pop	{r7, pc}
   24bfc:	13301354 	.word	0x13301354
   24c00:	00001014 	.word	0x00001014
   24c04:	00024e39 	.word	0x00024e39
   24c08:	00022579 	.word	0x00022579
   24c0c:	000207bc 	.word	0x000207bc
   24c10:	000c000c 	.word	0x000c000c
   24c14:	10add09e 	.word	0x10add09e
   24c18:	3c1cd57d 	.word	0x3c1cd57d
   24c1c:	000207ac 	.word	0x000207ac
   24c20:	00024e7d 	.word	0x00024e7d
   24c24:	0000108c 	.word	0x0000108c
   24c28:	00024759 	.word	0x00024759
   24c2c:	0000039f 	.word	0x0000039f
   24c30:	00024629 	.word	0x00024629
   24c34:	0003bbd8 	.word	0x0003bbd8
   24c38:	00020109 	.word	0x00020109
   24c3c:	0003bbe4 	.word	0x0003bbe4
   24c40:	0003bbb8 	.word	0x0003bbb8
   24c44:	ef522f61 	.word	0xef522f61

00024c48 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   24c48:	b580      	push	{r7, lr}
   24c4a:	b088      	sub	sp, #32
   24c4c:	af00      	add	r7, sp, #0
   24c4e:	0002      	movs	r2, r0
   24c50:	1dfb      	adds	r3, r7, #7
   24c52:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24c54:	231f      	movs	r3, #31
   24c56:	18fb      	adds	r3, r7, r3
   24c58:	2200      	movs	r2, #0
   24c5a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24c5c:	2300      	movs	r3, #0
   24c5e:	61bb      	str	r3, [r7, #24]
   24c60:	2300      	movs	r3, #0
   24c62:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   24c64:	2301      	movs	r3, #1
   24c66:	425b      	negs	r3, r3
   24c68:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   24c6a:	4b1d      	ldr	r3, [pc, #116]	; (24ce0 <wait_for_firmware_start+0x98>)
   24c6c:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   24c6e:	4b1d      	ldr	r3, [pc, #116]	; (24ce4 <wait_for_firmware_start+0x9c>)
   24c70:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   24c72:	1dfb      	adds	r3, r7, #7
   24c74:	781b      	ldrb	r3, [r3, #0]
   24c76:	2b02      	cmp	r3, #2
   24c78:	d003      	beq.n	24c82 <wait_for_firmware_start+0x3a>
   24c7a:	1dfb      	adds	r3, r7, #7
   24c7c:	781b      	ldrb	r3, [r3, #0]
   24c7e:	2b03      	cmp	r3, #3
   24c80:	d119      	bne.n	24cb6 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   24c82:	4b19      	ldr	r3, [pc, #100]	; (24ce8 <wait_for_firmware_start+0xa0>)
   24c84:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   24c86:	4b19      	ldr	r3, [pc, #100]	; (24cec <wait_for_firmware_start+0xa4>)
   24c88:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   24c8a:	e014      	b.n	24cb6 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   24c8c:	2002      	movs	r0, #2
   24c8e:	4b18      	ldr	r3, [pc, #96]	; (24cf0 <wait_for_firmware_start+0xa8>)
   24c90:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   24c92:	68fb      	ldr	r3, [r7, #12]
   24c94:	0018      	movs	r0, r3
   24c96:	4b17      	ldr	r3, [pc, #92]	; (24cf4 <wait_for_firmware_start+0xac>)
   24c98:	4798      	blx	r3
   24c9a:	0003      	movs	r3, r0
   24c9c:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   24c9e:	697b      	ldr	r3, [r7, #20]
   24ca0:	3301      	adds	r3, #1
   24ca2:	617b      	str	r3, [r7, #20]
   24ca4:	697a      	ldr	r2, [r7, #20]
   24ca6:	693b      	ldr	r3, [r7, #16]
   24ca8:	429a      	cmp	r2, r3
   24caa:	d304      	bcc.n	24cb6 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   24cac:	231f      	movs	r3, #31
   24cae:	18fb      	adds	r3, r7, r3
   24cb0:	22fb      	movs	r2, #251	; 0xfb
   24cb2:	701a      	strb	r2, [r3, #0]
			goto ERR;
   24cb4:	e00c      	b.n	24cd0 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   24cb6:	68ba      	ldr	r2, [r7, #8]
   24cb8:	69bb      	ldr	r3, [r7, #24]
   24cba:	429a      	cmp	r2, r3
   24cbc:	d1e6      	bne.n	24c8c <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   24cbe:	68bb      	ldr	r3, [r7, #8]
   24cc0:	4a08      	ldr	r2, [pc, #32]	; (24ce4 <wait_for_firmware_start+0x9c>)
   24cc2:	4293      	cmp	r3, r2
   24cc4:	d104      	bne.n	24cd0 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   24cc6:	4b06      	ldr	r3, [pc, #24]	; (24ce0 <wait_for_firmware_start+0x98>)
   24cc8:	2100      	movs	r1, #0
   24cca:	0018      	movs	r0, r3
   24ccc:	4b0a      	ldr	r3, [pc, #40]	; (24cf8 <wait_for_firmware_start+0xb0>)
   24cce:	4798      	blx	r3
	}
ERR:
	return ret;
   24cd0:	231f      	movs	r3, #31
   24cd2:	18fb      	adds	r3, r7, r3
   24cd4:	781b      	ldrb	r3, [r3, #0]
   24cd6:	b25b      	sxtb	r3, r3
}
   24cd8:	0018      	movs	r0, r3
   24cda:	46bd      	mov	sp, r7
   24cdc:	b008      	add	sp, #32
   24cde:	bd80      	pop	{r7, pc}
   24ce0:	0000108c 	.word	0x0000108c
   24ce4:	02532636 	.word	0x02532636
   24ce8:	000207ac 	.word	0x000207ac
   24cec:	d75dc1c3 	.word	0xd75dc1c3
   24cf0:	00022579 	.word	0x00022579
   24cf4:	00024e39 	.word	0x00024e39
   24cf8:	00024e7d 	.word	0x00024e7d

00024cfc <chip_deinit>:

sint8 chip_deinit(void)
{
   24cfc:	b590      	push	{r4, r7, lr}
   24cfe:	b083      	sub	sp, #12
   24d00:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   24d02:	2300      	movs	r3, #0
   24d04:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   24d06:	1dfc      	adds	r4, r7, #7
   24d08:	003a      	movs	r2, r7
   24d0a:	23a0      	movs	r3, #160	; 0xa0
   24d0c:	015b      	lsls	r3, r3, #5
   24d0e:	0011      	movs	r1, r2
   24d10:	0018      	movs	r0, r3
   24d12:	4b20      	ldr	r3, [pc, #128]	; (24d94 <chip_deinit+0x98>)
   24d14:	4798      	blx	r3
   24d16:	0003      	movs	r3, r0
   24d18:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   24d1a:	1dfb      	adds	r3, r7, #7
   24d1c:	781b      	ldrb	r3, [r3, #0]
   24d1e:	b25b      	sxtb	r3, r3
   24d20:	2b00      	cmp	r3, #0
   24d22:	d00e      	beq.n	24d42 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   24d24:	4a1c      	ldr	r2, [pc, #112]	; (24d98 <chip_deinit+0x9c>)
   24d26:	491d      	ldr	r1, [pc, #116]	; (24d9c <chip_deinit+0xa0>)
   24d28:	4b1d      	ldr	r3, [pc, #116]	; (24da0 <chip_deinit+0xa4>)
   24d2a:	0018      	movs	r0, r3
   24d2c:	4b1d      	ldr	r3, [pc, #116]	; (24da4 <chip_deinit+0xa8>)
   24d2e:	4798      	blx	r3
   24d30:	4b1d      	ldr	r3, [pc, #116]	; (24da8 <chip_deinit+0xac>)
   24d32:	0018      	movs	r0, r3
   24d34:	4b1b      	ldr	r3, [pc, #108]	; (24da4 <chip_deinit+0xa8>)
   24d36:	4798      	blx	r3
   24d38:	4b1c      	ldr	r3, [pc, #112]	; (24dac <chip_deinit+0xb0>)
   24d3a:	0018      	movs	r0, r3
   24d3c:	4b19      	ldr	r3, [pc, #100]	; (24da4 <chip_deinit+0xa8>)
   24d3e:	4798      	blx	r3
		goto ERR1;
   24d40:	e021      	b.n	24d86 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   24d42:	683b      	ldr	r3, [r7, #0]
   24d44:	4a1a      	ldr	r2, [pc, #104]	; (24db0 <chip_deinit+0xb4>)
   24d46:	4013      	ands	r3, r2
   24d48:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   24d4a:	683a      	ldr	r2, [r7, #0]
   24d4c:	1dfc      	adds	r4, r7, #7
   24d4e:	23a0      	movs	r3, #160	; 0xa0
   24d50:	015b      	lsls	r3, r3, #5
   24d52:	0011      	movs	r1, r2
   24d54:	0018      	movs	r0, r3
   24d56:	4b17      	ldr	r3, [pc, #92]	; (24db4 <chip_deinit+0xb8>)
   24d58:	4798      	blx	r3
   24d5a:	0003      	movs	r3, r0
   24d5c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   24d5e:	1dfb      	adds	r3, r7, #7
   24d60:	781b      	ldrb	r3, [r3, #0]
   24d62:	b25b      	sxtb	r3, r3
   24d64:	2b00      	cmp	r3, #0
   24d66:	d00e      	beq.n	24d86 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   24d68:	4a13      	ldr	r2, [pc, #76]	; (24db8 <chip_deinit+0xbc>)
   24d6a:	490c      	ldr	r1, [pc, #48]	; (24d9c <chip_deinit+0xa0>)
   24d6c:	4b0c      	ldr	r3, [pc, #48]	; (24da0 <chip_deinit+0xa4>)
   24d6e:	0018      	movs	r0, r3
   24d70:	4b0c      	ldr	r3, [pc, #48]	; (24da4 <chip_deinit+0xa8>)
   24d72:	4798      	blx	r3
   24d74:	4b0c      	ldr	r3, [pc, #48]	; (24da8 <chip_deinit+0xac>)
   24d76:	0018      	movs	r0, r3
   24d78:	4b0a      	ldr	r3, [pc, #40]	; (24da4 <chip_deinit+0xa8>)
   24d7a:	4798      	blx	r3
   24d7c:	4b0b      	ldr	r3, [pc, #44]	; (24dac <chip_deinit+0xb0>)
   24d7e:	0018      	movs	r0, r3
   24d80:	4b08      	ldr	r3, [pc, #32]	; (24da4 <chip_deinit+0xa8>)
   24d82:	4798      	blx	r3
		goto ERR1;
   24d84:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   24d86:	1dfb      	adds	r3, r7, #7
   24d88:	781b      	ldrb	r3, [r3, #0]
   24d8a:	b25b      	sxtb	r3, r3
}
   24d8c:	0018      	movs	r0, r3
   24d8e:	46bd      	mov	sp, r7
   24d90:	b003      	add	sp, #12
   24d92:	bd90      	pop	{r4, r7, pc}
   24d94:	00024e59 	.word	0x00024e59
   24d98:	00000201 	.word	0x00000201
   24d9c:	0003bc24 	.word	0x0003bc24
   24da0:	0003bb8c 	.word	0x0003bb8c
   24da4:	00020109 	.word	0x00020109
   24da8:	0003bbfc 	.word	0x0003bbfc
   24dac:	0003bbb8 	.word	0x0003bbb8
   24db0:	fffffbff 	.word	0xfffffbff
   24db4:	00024e7d 	.word	0x00024e7d
   24db8:	00000207 	.word	0x00000207

00024dbc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   24dbc:	b590      	push	{r4, r7, lr}
   24dbe:	b085      	sub	sp, #20
   24dc0:	af00      	add	r7, sp, #0
   24dc2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24dc4:	230f      	movs	r3, #15
   24dc6:	18fb      	adds	r3, r7, r3
   24dc8:	2200      	movs	r2, #0
   24dca:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   24dcc:	230f      	movs	r3, #15
   24dce:	18fc      	adds	r4, r7, r3
   24dd0:	687b      	ldr	r3, [r7, #4]
   24dd2:	0018      	movs	r0, r3
   24dd4:	4b05      	ldr	r3, [pc, #20]	; (24dec <nm_bus_iface_init+0x30>)
   24dd6:	4798      	blx	r3
   24dd8:	0003      	movs	r3, r0
   24dda:	7023      	strb	r3, [r4, #0]
	return ret;
   24ddc:	230f      	movs	r3, #15
   24dde:	18fb      	adds	r3, r7, r3
   24de0:	781b      	ldrb	r3, [r3, #0]
   24de2:	b25b      	sxtb	r3, r3
}
   24de4:	0018      	movs	r0, r3
   24de6:	46bd      	mov	sp, r7
   24de8:	b005      	add	sp, #20
   24dea:	bd90      	pop	{r4, r7, pc}
   24dec:	00022ba5 	.word	0x00022ba5

00024df0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   24df0:	b590      	push	{r4, r7, lr}
   24df2:	b083      	sub	sp, #12
   24df4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   24df6:	1dfb      	adds	r3, r7, #7
   24df8:	2200      	movs	r2, #0
   24dfa:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   24dfc:	1dfc      	adds	r4, r7, #7
   24dfe:	4b05      	ldr	r3, [pc, #20]	; (24e14 <nm_bus_iface_deinit+0x24>)
   24e00:	4798      	blx	r3
   24e02:	0003      	movs	r3, r0
   24e04:	7023      	strb	r3, [r4, #0]

	return ret;
   24e06:	1dfb      	adds	r3, r7, #7
   24e08:	781b      	ldrb	r3, [r3, #0]
   24e0a:	b25b      	sxtb	r3, r3
}
   24e0c:	0018      	movs	r0, r3
   24e0e:	46bd      	mov	sp, r7
   24e10:	b003      	add	sp, #12
   24e12:	bd90      	pop	{r4, r7, pc}
   24e14:	00022d1d 	.word	0x00022d1d

00024e18 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   24e18:	b580      	push	{r7, lr}
   24e1a:	b082      	sub	sp, #8
   24e1c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   24e1e:	1dfb      	adds	r3, r7, #7
   24e20:	2200      	movs	r2, #0
   24e22:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   24e24:	4b03      	ldr	r3, [pc, #12]	; (24e34 <nm_bus_reset+0x1c>)
   24e26:	4798      	blx	r3
   24e28:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   24e2a:	0018      	movs	r0, r3
   24e2c:	46bd      	mov	sp, r7
   24e2e:	b002      	add	sp, #8
   24e30:	bd80      	pop	{r7, pc}
   24e32:	46c0      	nop			; (mov r8, r8)
   24e34:	00026c45 	.word	0x00026c45

00024e38 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   24e38:	b580      	push	{r7, lr}
   24e3a:	b082      	sub	sp, #8
   24e3c:	af00      	add	r7, sp, #0
   24e3e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   24e40:	687b      	ldr	r3, [r7, #4]
   24e42:	0018      	movs	r0, r3
   24e44:	4b03      	ldr	r3, [pc, #12]	; (24e54 <nm_read_reg+0x1c>)
   24e46:	4798      	blx	r3
   24e48:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   24e4a:	0018      	movs	r0, r3
   24e4c:	46bd      	mov	sp, r7
   24e4e:	b002      	add	sp, #8
   24e50:	bd80      	pop	{r7, pc}
   24e52:	46c0      	nop			; (mov r8, r8)
   24e54:	00026dd9 	.word	0x00026dd9

00024e58 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24e58:	b580      	push	{r7, lr}
   24e5a:	b082      	sub	sp, #8
   24e5c:	af00      	add	r7, sp, #0
   24e5e:	6078      	str	r0, [r7, #4]
   24e60:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   24e62:	683a      	ldr	r2, [r7, #0]
   24e64:	687b      	ldr	r3, [r7, #4]
   24e66:	0011      	movs	r1, r2
   24e68:	0018      	movs	r0, r3
   24e6a:	4b03      	ldr	r3, [pc, #12]	; (24e78 <nm_read_reg_with_ret+0x20>)
   24e6c:	4798      	blx	r3
   24e6e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   24e70:	0018      	movs	r0, r3
   24e72:	46bd      	mov	sp, r7
   24e74:	b002      	add	sp, #8
   24e76:	bd80      	pop	{r7, pc}
   24e78:	00026dfd 	.word	0x00026dfd

00024e7c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24e7c:	b580      	push	{r7, lr}
   24e7e:	b082      	sub	sp, #8
   24e80:	af00      	add	r7, sp, #0
   24e82:	6078      	str	r0, [r7, #4]
   24e84:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   24e86:	683a      	ldr	r2, [r7, #0]
   24e88:	687b      	ldr	r3, [r7, #4]
   24e8a:	0011      	movs	r1, r2
   24e8c:	0018      	movs	r0, r3
   24e8e:	4b03      	ldr	r3, [pc, #12]	; (24e9c <nm_write_reg+0x20>)
   24e90:	4798      	blx	r3
   24e92:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   24e94:	0018      	movs	r0, r3
   24e96:	46bd      	mov	sp, r7
   24e98:	b002      	add	sp, #8
   24e9a:	bd80      	pop	{r7, pc}
   24e9c:	00026e4d 	.word	0x00026e4d

00024ea0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24ea0:	b580      	push	{r7, lr}
   24ea2:	b084      	sub	sp, #16
   24ea4:	af00      	add	r7, sp, #0
   24ea6:	60f8      	str	r0, [r7, #12]
   24ea8:	60b9      	str	r1, [r7, #8]
   24eaa:	1dbb      	adds	r3, r7, #6
   24eac:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   24eae:	1dbb      	adds	r3, r7, #6
   24eb0:	881a      	ldrh	r2, [r3, #0]
   24eb2:	68b9      	ldr	r1, [r7, #8]
   24eb4:	68fb      	ldr	r3, [r7, #12]
   24eb6:	0018      	movs	r0, r3
   24eb8:	4b03      	ldr	r3, [pc, #12]	; (24ec8 <p_nm_read_block+0x28>)
   24eba:	4798      	blx	r3
   24ebc:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   24ebe:	0018      	movs	r0, r3
   24ec0:	46bd      	mov	sp, r7
   24ec2:	b004      	add	sp, #16
   24ec4:	bd80      	pop	{r7, pc}
   24ec6:	46c0      	nop			; (mov r8, r8)
   24ec8:	00026e9d 	.word	0x00026e9d

00024ecc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   24ecc:	b580      	push	{r7, lr}
   24ece:	b086      	sub	sp, #24
   24ed0:	af00      	add	r7, sp, #0
   24ed2:	60f8      	str	r0, [r7, #12]
   24ed4:	60b9      	str	r1, [r7, #8]
   24ed6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   24ed8:	4b2d      	ldr	r3, [pc, #180]	; (24f90 <nm_read_block+0xc4>)
   24eda:	881a      	ldrh	r2, [r3, #0]
   24edc:	2310      	movs	r3, #16
   24ede:	18fb      	adds	r3, r7, r3
   24ee0:	3a08      	subs	r2, #8
   24ee2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   24ee4:	2300      	movs	r3, #0
   24ee6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   24ee8:	2313      	movs	r3, #19
   24eea:	18fb      	adds	r3, r7, r3
   24eec:	2200      	movs	r2, #0
   24eee:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   24ef0:	2310      	movs	r3, #16
   24ef2:	18fb      	adds	r3, r7, r3
   24ef4:	881a      	ldrh	r2, [r3, #0]
   24ef6:	687b      	ldr	r3, [r7, #4]
   24ef8:	429a      	cmp	r2, r3
   24efa:	d313      	bcc.n	24f24 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   24efc:	68ba      	ldr	r2, [r7, #8]
   24efe:	697b      	ldr	r3, [r7, #20]
   24f00:	18d1      	adds	r1, r2, r3
   24f02:	687b      	ldr	r3, [r7, #4]
   24f04:	b29a      	uxth	r2, r3
   24f06:	68fb      	ldr	r3, [r7, #12]
   24f08:	0018      	movs	r0, r3
   24f0a:	4b22      	ldr	r3, [pc, #136]	; (24f94 <nm_read_block+0xc8>)
   24f0c:	4798      	blx	r3
   24f0e:	0003      	movs	r3, r0
   24f10:	b2da      	uxtb	r2, r3
   24f12:	2313      	movs	r3, #19
   24f14:	18fb      	adds	r3, r7, r3
   24f16:	781b      	ldrb	r3, [r3, #0]
   24f18:	18d3      	adds	r3, r2, r3
   24f1a:	b2da      	uxtb	r2, r3
   24f1c:	2313      	movs	r3, #19
   24f1e:	18fb      	adds	r3, r7, r3
   24f20:	701a      	strb	r2, [r3, #0]
			break;
   24f22:	e02d      	b.n	24f80 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   24f24:	68ba      	ldr	r2, [r7, #8]
   24f26:	697b      	ldr	r3, [r7, #20]
   24f28:	18d1      	adds	r1, r2, r3
   24f2a:	2310      	movs	r3, #16
   24f2c:	18fb      	adds	r3, r7, r3
   24f2e:	881a      	ldrh	r2, [r3, #0]
   24f30:	68fb      	ldr	r3, [r7, #12]
   24f32:	0018      	movs	r0, r3
   24f34:	4b17      	ldr	r3, [pc, #92]	; (24f94 <nm_read_block+0xc8>)
   24f36:	4798      	blx	r3
   24f38:	0003      	movs	r3, r0
   24f3a:	b2da      	uxtb	r2, r3
   24f3c:	2313      	movs	r3, #19
   24f3e:	18fb      	adds	r3, r7, r3
   24f40:	781b      	ldrb	r3, [r3, #0]
   24f42:	18d3      	adds	r3, r2, r3
   24f44:	b2da      	uxtb	r2, r3
   24f46:	2313      	movs	r3, #19
   24f48:	18fb      	adds	r3, r7, r3
   24f4a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   24f4c:	2313      	movs	r3, #19
   24f4e:	18fb      	adds	r3, r7, r3
   24f50:	781b      	ldrb	r3, [r3, #0]
   24f52:	b25b      	sxtb	r3, r3
   24f54:	2b00      	cmp	r3, #0
   24f56:	d112      	bne.n	24f7e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   24f58:	2310      	movs	r3, #16
   24f5a:	18fb      	adds	r3, r7, r3
   24f5c:	881b      	ldrh	r3, [r3, #0]
   24f5e:	687a      	ldr	r2, [r7, #4]
   24f60:	1ad3      	subs	r3, r2, r3
   24f62:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   24f64:	2310      	movs	r3, #16
   24f66:	18fb      	adds	r3, r7, r3
   24f68:	881b      	ldrh	r3, [r3, #0]
   24f6a:	697a      	ldr	r2, [r7, #20]
   24f6c:	18d3      	adds	r3, r2, r3
   24f6e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   24f70:	2310      	movs	r3, #16
   24f72:	18fb      	adds	r3, r7, r3
   24f74:	881b      	ldrh	r3, [r3, #0]
   24f76:	68fa      	ldr	r2, [r7, #12]
   24f78:	18d3      	adds	r3, r2, r3
   24f7a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   24f7c:	e7b8      	b.n	24ef0 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   24f7e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   24f80:	2313      	movs	r3, #19
   24f82:	18fb      	adds	r3, r7, r3
   24f84:	781b      	ldrb	r3, [r3, #0]
   24f86:	b25b      	sxtb	r3, r3
}
   24f88:	0018      	movs	r0, r3
   24f8a:	46bd      	mov	sp, r7
   24f8c:	b006      	add	sp, #24
   24f8e:	bd80      	pop	{r7, pc}
   24f90:	20000120 	.word	0x20000120
   24f94:	00024ea1 	.word	0x00024ea1

00024f98 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24f98:	b580      	push	{r7, lr}
   24f9a:	b084      	sub	sp, #16
   24f9c:	af00      	add	r7, sp, #0
   24f9e:	60f8      	str	r0, [r7, #12]
   24fa0:	60b9      	str	r1, [r7, #8]
   24fa2:	1dbb      	adds	r3, r7, #6
   24fa4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   24fa6:	1dbb      	adds	r3, r7, #6
   24fa8:	881a      	ldrh	r2, [r3, #0]
   24faa:	68b9      	ldr	r1, [r7, #8]
   24fac:	68fb      	ldr	r3, [r7, #12]
   24fae:	0018      	movs	r0, r3
   24fb0:	4b03      	ldr	r3, [pc, #12]	; (24fc0 <p_nm_write_block+0x28>)
   24fb2:	4798      	blx	r3
   24fb4:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   24fb6:	0018      	movs	r0, r3
   24fb8:	46bd      	mov	sp, r7
   24fba:	b004      	add	sp, #16
   24fbc:	bd80      	pop	{r7, pc}
   24fbe:	46c0      	nop			; (mov r8, r8)
   24fc0:	00026ef5 	.word	0x00026ef5

00024fc4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   24fc4:	b580      	push	{r7, lr}
   24fc6:	b086      	sub	sp, #24
   24fc8:	af00      	add	r7, sp, #0
   24fca:	60f8      	str	r0, [r7, #12]
   24fcc:	60b9      	str	r1, [r7, #8]
   24fce:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   24fd0:	4b2d      	ldr	r3, [pc, #180]	; (25088 <nm_write_block+0xc4>)
   24fd2:	881a      	ldrh	r2, [r3, #0]
   24fd4:	2310      	movs	r3, #16
   24fd6:	18fb      	adds	r3, r7, r3
   24fd8:	3a08      	subs	r2, #8
   24fda:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   24fdc:	2300      	movs	r3, #0
   24fde:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   24fe0:	2313      	movs	r3, #19
   24fe2:	18fb      	adds	r3, r7, r3
   24fe4:	2200      	movs	r2, #0
   24fe6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   24fe8:	2310      	movs	r3, #16
   24fea:	18fb      	adds	r3, r7, r3
   24fec:	881a      	ldrh	r2, [r3, #0]
   24fee:	687b      	ldr	r3, [r7, #4]
   24ff0:	429a      	cmp	r2, r3
   24ff2:	d313      	bcc.n	2501c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   24ff4:	68ba      	ldr	r2, [r7, #8]
   24ff6:	697b      	ldr	r3, [r7, #20]
   24ff8:	18d1      	adds	r1, r2, r3
   24ffa:	687b      	ldr	r3, [r7, #4]
   24ffc:	b29a      	uxth	r2, r3
   24ffe:	68fb      	ldr	r3, [r7, #12]
   25000:	0018      	movs	r0, r3
   25002:	4b22      	ldr	r3, [pc, #136]	; (2508c <nm_write_block+0xc8>)
   25004:	4798      	blx	r3
   25006:	0003      	movs	r3, r0
   25008:	b2da      	uxtb	r2, r3
   2500a:	2313      	movs	r3, #19
   2500c:	18fb      	adds	r3, r7, r3
   2500e:	781b      	ldrb	r3, [r3, #0]
   25010:	18d3      	adds	r3, r2, r3
   25012:	b2da      	uxtb	r2, r3
   25014:	2313      	movs	r3, #19
   25016:	18fb      	adds	r3, r7, r3
   25018:	701a      	strb	r2, [r3, #0]
			break;
   2501a:	e02d      	b.n	25078 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2501c:	68ba      	ldr	r2, [r7, #8]
   2501e:	697b      	ldr	r3, [r7, #20]
   25020:	18d1      	adds	r1, r2, r3
   25022:	2310      	movs	r3, #16
   25024:	18fb      	adds	r3, r7, r3
   25026:	881a      	ldrh	r2, [r3, #0]
   25028:	68fb      	ldr	r3, [r7, #12]
   2502a:	0018      	movs	r0, r3
   2502c:	4b17      	ldr	r3, [pc, #92]	; (2508c <nm_write_block+0xc8>)
   2502e:	4798      	blx	r3
   25030:	0003      	movs	r3, r0
   25032:	b2da      	uxtb	r2, r3
   25034:	2313      	movs	r3, #19
   25036:	18fb      	adds	r3, r7, r3
   25038:	781b      	ldrb	r3, [r3, #0]
   2503a:	18d3      	adds	r3, r2, r3
   2503c:	b2da      	uxtb	r2, r3
   2503e:	2313      	movs	r3, #19
   25040:	18fb      	adds	r3, r7, r3
   25042:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   25044:	2313      	movs	r3, #19
   25046:	18fb      	adds	r3, r7, r3
   25048:	781b      	ldrb	r3, [r3, #0]
   2504a:	b25b      	sxtb	r3, r3
   2504c:	2b00      	cmp	r3, #0
   2504e:	d112      	bne.n	25076 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   25050:	2310      	movs	r3, #16
   25052:	18fb      	adds	r3, r7, r3
   25054:	881b      	ldrh	r3, [r3, #0]
   25056:	687a      	ldr	r2, [r7, #4]
   25058:	1ad3      	subs	r3, r2, r3
   2505a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2505c:	2310      	movs	r3, #16
   2505e:	18fb      	adds	r3, r7, r3
   25060:	881b      	ldrh	r3, [r3, #0]
   25062:	697a      	ldr	r2, [r7, #20]
   25064:	18d3      	adds	r3, r2, r3
   25066:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   25068:	2310      	movs	r3, #16
   2506a:	18fb      	adds	r3, r7, r3
   2506c:	881b      	ldrh	r3, [r3, #0]
   2506e:	68fa      	ldr	r2, [r7, #12]
   25070:	18d3      	adds	r3, r2, r3
   25072:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   25074:	e7b8      	b.n	24fe8 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   25076:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   25078:	2313      	movs	r3, #19
   2507a:	18fb      	adds	r3, r7, r3
   2507c:	781b      	ldrb	r3, [r3, #0]
   2507e:	b25b      	sxtb	r3, r3
}
   25080:	0018      	movs	r0, r3
   25082:	46bd      	mov	sp, r7
   25084:	b006      	add	sp, #24
   25086:	bd80      	pop	{r7, pc}
   25088:	20000120 	.word	0x20000120
   2508c:	00024f99 	.word	0x00024f99

00025090 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   25090:	b590      	push	{r4, r7, lr}
   25092:	b089      	sub	sp, #36	; 0x24
   25094:	af00      	add	r7, sp, #0
   25096:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   25098:	2300      	movs	r3, #0
   2509a:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   2509c:	231f      	movs	r3, #31
   2509e:	18fb      	adds	r3, r7, r3
   250a0:	2200      	movs	r2, #0
   250a2:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   250a4:	230c      	movs	r3, #12
   250a6:	18fb      	adds	r3, r7, r3
   250a8:	0018      	movs	r0, r3
   250aa:	2308      	movs	r3, #8
   250ac:	001a      	movs	r2, r3
   250ae:	2100      	movs	r1, #0
   250b0:	4b64      	ldr	r3, [pc, #400]	; (25244 <nm_get_firmware_full_info+0x1b4>)
   250b2:	4798      	blx	r3
	if (pstrRev != NULL)
   250b4:	687b      	ldr	r3, [r7, #4]
   250b6:	2b00      	cmp	r3, #0
   250b8:	d100      	bne.n	250bc <nm_get_firmware_full_info+0x2c>
   250ba:	e0ba      	b.n	25232 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   250bc:	687b      	ldr	r3, [r7, #4]
   250be:	2228      	movs	r2, #40	; 0x28
   250c0:	2100      	movs	r1, #0
   250c2:	0018      	movs	r0, r3
   250c4:	4b60      	ldr	r3, [pc, #384]	; (25248 <nm_get_firmware_full_info+0x1b8>)
   250c6:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   250c8:	231f      	movs	r3, #31
   250ca:	18fc      	adds	r4, r7, r3
   250cc:	2314      	movs	r3, #20
   250ce:	18fb      	adds	r3, r7, r3
   250d0:	4a5e      	ldr	r2, [pc, #376]	; (2524c <nm_get_firmware_full_info+0x1bc>)
   250d2:	0019      	movs	r1, r3
   250d4:	0010      	movs	r0, r2
   250d6:	4b5e      	ldr	r3, [pc, #376]	; (25250 <nm_get_firmware_full_info+0x1c0>)
   250d8:	4798      	blx	r3
   250da:	0003      	movs	r3, r0
   250dc:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   250de:	231f      	movs	r3, #31
   250e0:	18fb      	adds	r3, r7, r3
   250e2:	781b      	ldrb	r3, [r3, #0]
   250e4:	b25b      	sxtb	r3, r3
   250e6:	2b00      	cmp	r3, #0
   250e8:	d000      	beq.n	250ec <nm_get_firmware_full_info+0x5c>
   250ea:	e0a2      	b.n	25232 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   250ec:	697b      	ldr	r3, [r7, #20]
   250ee:	2b00      	cmp	r3, #0
   250f0:	d100      	bne.n	250f4 <nm_get_firmware_full_info+0x64>
   250f2:	e09a      	b.n	2522a <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   250f4:	697b      	ldr	r3, [r7, #20]
   250f6:	22c0      	movs	r2, #192	; 0xc0
   250f8:	0292      	lsls	r2, r2, #10
   250fa:	4313      	orrs	r3, r2
   250fc:	221f      	movs	r2, #31
   250fe:	18bc      	adds	r4, r7, r2
   25100:	220c      	movs	r2, #12
   25102:	18b9      	adds	r1, r7, r2
   25104:	2208      	movs	r2, #8
   25106:	0018      	movs	r0, r3
   25108:	4b52      	ldr	r3, [pc, #328]	; (25254 <nm_get_firmware_full_info+0x1c4>)
   2510a:	4798      	blx	r3
   2510c:	0003      	movs	r3, r0
   2510e:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   25110:	231f      	movs	r3, #31
   25112:	18fb      	adds	r3, r7, r3
   25114:	781b      	ldrb	r3, [r3, #0]
   25116:	b25b      	sxtb	r3, r3
   25118:	2b00      	cmp	r3, #0
   2511a:	d000      	beq.n	2511e <nm_get_firmware_full_info+0x8e>
   2511c:	e089      	b.n	25232 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   2511e:	230c      	movs	r3, #12
   25120:	18fb      	adds	r3, r7, r3
   25122:	685b      	ldr	r3, [r3, #4]
   25124:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   25126:	697b      	ldr	r3, [r7, #20]
   25128:	041b      	lsls	r3, r3, #16
   2512a:	0c1b      	lsrs	r3, r3, #16
   2512c:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   2512e:	697b      	ldr	r3, [r7, #20]
   25130:	2b00      	cmp	r3, #0
   25132:	d100      	bne.n	25136 <nm_get_firmware_full_info+0xa6>
   25134:	e074      	b.n	25220 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   25136:	697b      	ldr	r3, [r7, #20]
   25138:	22c0      	movs	r2, #192	; 0xc0
   2513a:	0292      	lsls	r2, r2, #10
   2513c:	4313      	orrs	r3, r2
   2513e:	221f      	movs	r2, #31
   25140:	18bc      	adds	r4, r7, r2
   25142:	6879      	ldr	r1, [r7, #4]
   25144:	2228      	movs	r2, #40	; 0x28
   25146:	0018      	movs	r0, r3
   25148:	4b42      	ldr	r3, [pc, #264]	; (25254 <nm_get_firmware_full_info+0x1c4>)
   2514a:	4798      	blx	r3
   2514c:	0003      	movs	r3, r0
   2514e:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   25150:	231f      	movs	r3, #31
   25152:	18fb      	adds	r3, r7, r3
   25154:	781b      	ldrb	r3, [r3, #0]
   25156:	b25b      	sxtb	r3, r3
   25158:	2b00      	cmp	r3, #0
   2515a:	d16a      	bne.n	25232 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   2515c:	687b      	ldr	r3, [r7, #4]
   2515e:	791b      	ldrb	r3, [r3, #4]
   25160:	021b      	lsls	r3, r3, #8
   25162:	b21a      	sxth	r2, r3
   25164:	687b      	ldr	r3, [r7, #4]
   25166:	795b      	ldrb	r3, [r3, #5]
   25168:	011b      	lsls	r3, r3, #4
   2516a:	b21b      	sxth	r3, r3
   2516c:	21ff      	movs	r1, #255	; 0xff
   2516e:	400b      	ands	r3, r1
   25170:	b21b      	sxth	r3, r3
   25172:	4313      	orrs	r3, r2
   25174:	b21a      	sxth	r2, r3
   25176:	687b      	ldr	r3, [r7, #4]
   25178:	799b      	ldrb	r3, [r3, #6]
   2517a:	b21b      	sxth	r3, r3
   2517c:	210f      	movs	r1, #15
   2517e:	400b      	ands	r3, r1
   25180:	b21b      	sxth	r3, r3
   25182:	4313      	orrs	r3, r2
   25184:	b21a      	sxth	r2, r3
   25186:	231c      	movs	r3, #28
   25188:	18fb      	adds	r3, r7, r3
   2518a:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   2518c:	231a      	movs	r3, #26
   2518e:	18fb      	adds	r3, r7, r3
   25190:	4a31      	ldr	r2, [pc, #196]	; (25258 <nm_get_firmware_full_info+0x1c8>)
   25192:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   25194:	687b      	ldr	r3, [r7, #4]
   25196:	79db      	ldrb	r3, [r3, #7]
   25198:	021b      	lsls	r3, r3, #8
   2519a:	b21a      	sxth	r2, r3
   2519c:	687b      	ldr	r3, [r7, #4]
   2519e:	7a1b      	ldrb	r3, [r3, #8]
   251a0:	011b      	lsls	r3, r3, #4
   251a2:	b21b      	sxth	r3, r3
   251a4:	21ff      	movs	r1, #255	; 0xff
   251a6:	400b      	ands	r3, r1
   251a8:	b21b      	sxth	r3, r3
   251aa:	4313      	orrs	r3, r2
   251ac:	b21a      	sxth	r2, r3
   251ae:	687b      	ldr	r3, [r7, #4]
   251b0:	7a5b      	ldrb	r3, [r3, #9]
   251b2:	b21b      	sxth	r3, r3
   251b4:	210f      	movs	r1, #15
   251b6:	400b      	ands	r3, r1
   251b8:	b21b      	sxth	r3, r3
   251ba:	4313      	orrs	r3, r2
   251bc:	b21a      	sxth	r2, r3
   251be:	2318      	movs	r3, #24
   251c0:	18fb      	adds	r3, r7, r3
   251c2:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   251c4:	231c      	movs	r3, #28
   251c6:	18fb      	adds	r3, r7, r3
   251c8:	881b      	ldrh	r3, [r3, #0]
   251ca:	2b00      	cmp	r3, #0
   251cc:	d009      	beq.n	251e2 <nm_get_firmware_full_info+0x152>
   251ce:	2318      	movs	r3, #24
   251d0:	18fb      	adds	r3, r7, r3
   251d2:	881b      	ldrh	r3, [r3, #0]
   251d4:	2b00      	cmp	r3, #0
   251d6:	d004      	beq.n	251e2 <nm_get_firmware_full_info+0x152>
   251d8:	2318      	movs	r3, #24
   251da:	18fb      	adds	r3, r7, r3
   251dc:	881b      	ldrh	r3, [r3, #0]
   251de:	2b00      	cmp	r3, #0
   251e0:	d104      	bne.n	251ec <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   251e2:	231f      	movs	r3, #31
   251e4:	18fb      	adds	r3, r7, r3
   251e6:	22f4      	movs	r2, #244	; 0xf4
   251e8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   251ea:	e022      	b.n	25232 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   251ec:	231a      	movs	r3, #26
   251ee:	18fa      	adds	r2, r7, r3
   251f0:	2318      	movs	r3, #24
   251f2:	18fb      	adds	r3, r7, r3
   251f4:	8812      	ldrh	r2, [r2, #0]
   251f6:	881b      	ldrh	r3, [r3, #0]
   251f8:	429a      	cmp	r2, r3
   251fa:	d204      	bcs.n	25206 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   251fc:	231f      	movs	r3, #31
   251fe:	18fb      	adds	r3, r7, r3
   25200:	22f3      	movs	r2, #243	; 0xf3
   25202:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   25204:	e015      	b.n	25232 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   25206:	231a      	movs	r3, #26
   25208:	18fa      	adds	r2, r7, r3
   2520a:	231c      	movs	r3, #28
   2520c:	18fb      	adds	r3, r7, r3
   2520e:	8812      	ldrh	r2, [r2, #0]
   25210:	881b      	ldrh	r3, [r3, #0]
   25212:	429a      	cmp	r2, r3
   25214:	d90d      	bls.n	25232 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   25216:	231f      	movs	r3, #31
   25218:	18fb      	adds	r3, r7, r3
   2521a:	22f3      	movs	r2, #243	; 0xf3
   2521c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2521e:	e008      	b.n	25232 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   25220:	231f      	movs	r3, #31
   25222:	18fb      	adds	r3, r7, r3
   25224:	22f4      	movs	r2, #244	; 0xf4
   25226:	701a      	strb	r2, [r3, #0]
   25228:	e003      	b.n	25232 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   2522a:	231f      	movs	r3, #31
   2522c:	18fb      	adds	r3, r7, r3
   2522e:	22f4      	movs	r2, #244	; 0xf4
   25230:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   25232:	231f      	movs	r3, #31
   25234:	18fb      	adds	r3, r7, r3
   25236:	781b      	ldrb	r3, [r3, #0]
   25238:	b25b      	sxtb	r3, r3
}
   2523a:	0018      	movs	r0, r3
   2523c:	46bd      	mov	sp, r7
   2523e:	b009      	add	sp, #36	; 0x24
   25240:	bd90      	pop	{r4, r7, pc}
   25242:	46c0      	nop			; (mov r8, r8)
   25244:	0003781f 	.word	0x0003781f
   25248:	00022dc9 	.word	0x00022dc9
   2524c:	000c0008 	.word	0x000c0008
   25250:	00024e59 	.word	0x00024e59
   25254:	00024ecd 	.word	0x00024ecd
   25258:	00001354 	.word	0x00001354

0002525c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   2525c:	b590      	push	{r4, r7, lr}
   2525e:	b085      	sub	sp, #20
   25260:	af00      	add	r7, sp, #0
   25262:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   25264:	230f      	movs	r3, #15
   25266:	18fb      	adds	r3, r7, r3
   25268:	2200      	movs	r2, #0
   2526a:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   2526c:	687b      	ldr	r3, [r7, #4]
   2526e:	2b00      	cmp	r3, #0
   25270:	d013      	beq.n	2529a <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   25272:	230e      	movs	r3, #14
   25274:	18fb      	adds	r3, r7, r3
   25276:	687a      	ldr	r2, [r7, #4]
   25278:	7812      	ldrb	r2, [r2, #0]
   2527a:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   2527c:	230e      	movs	r3, #14
   2527e:	18fb      	adds	r3, r7, r3
   25280:	781b      	ldrb	r3, [r3, #0]
   25282:	2b00      	cmp	r3, #0
   25284:	d004      	beq.n	25290 <nm_drv_init+0x34>
   25286:	230e      	movs	r3, #14
   25288:	18fb      	adds	r3, r7, r3
   2528a:	781b      	ldrb	r3, [r3, #0]
   2528c:	2b04      	cmp	r3, #4
   2528e:	d908      	bls.n	252a2 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   25290:	230e      	movs	r3, #14
   25292:	18fb      	adds	r3, r7, r3
   25294:	2201      	movs	r2, #1
   25296:	701a      	strb	r2, [r3, #0]
   25298:	e003      	b.n	252a2 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   2529a:	230e      	movs	r3, #14
   2529c:	18fb      	adds	r3, r7, r3
   2529e:	2201      	movs	r2, #1
   252a0:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   252a2:	230f      	movs	r3, #15
   252a4:	18fc      	adds	r4, r7, r3
   252a6:	2000      	movs	r0, #0
   252a8:	4b41      	ldr	r3, [pc, #260]	; (253b0 <nm_drv_init+0x154>)
   252aa:	4798      	blx	r3
   252ac:	0003      	movs	r3, r0
   252ae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   252b0:	230f      	movs	r3, #15
   252b2:	18fb      	adds	r3, r7, r3
   252b4:	781b      	ldrb	r3, [r3, #0]
   252b6:	b25b      	sxtb	r3, r3
   252b8:	2b00      	cmp	r3, #0
   252ba:	d00f      	beq.n	252dc <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   252bc:	2390      	movs	r3, #144	; 0x90
   252be:	005a      	lsls	r2, r3, #1
   252c0:	493c      	ldr	r1, [pc, #240]	; (253b4 <nm_drv_init+0x158>)
   252c2:	4b3d      	ldr	r3, [pc, #244]	; (253b8 <nm_drv_init+0x15c>)
   252c4:	0018      	movs	r0, r3
   252c6:	4b3d      	ldr	r3, [pc, #244]	; (253bc <nm_drv_init+0x160>)
   252c8:	4798      	blx	r3
   252ca:	4b3d      	ldr	r3, [pc, #244]	; (253c0 <nm_drv_init+0x164>)
   252cc:	0018      	movs	r0, r3
   252ce:	4b3b      	ldr	r3, [pc, #236]	; (253bc <nm_drv_init+0x160>)
   252d0:	4798      	blx	r3
   252d2:	4b3c      	ldr	r3, [pc, #240]	; (253c4 <nm_drv_init+0x168>)
   252d4:	0018      	movs	r0, r3
   252d6:	4b39      	ldr	r3, [pc, #228]	; (253bc <nm_drv_init+0x160>)
   252d8:	4798      	blx	r3
		goto ERR1;
   252da:	e061      	b.n	253a0 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   252dc:	4b3a      	ldr	r3, [pc, #232]	; (253c8 <nm_drv_init+0x16c>)
   252de:	0018      	movs	r0, r3
   252e0:	4b36      	ldr	r3, [pc, #216]	; (253bc <nm_drv_init+0x160>)
   252e2:	4798      	blx	r3
   252e4:	4b39      	ldr	r3, [pc, #228]	; (253cc <nm_drv_init+0x170>)
   252e6:	4798      	blx	r3
   252e8:	0002      	movs	r2, r0
   252ea:	4b39      	ldr	r3, [pc, #228]	; (253d0 <nm_drv_init+0x174>)
   252ec:	0011      	movs	r1, r2
   252ee:	0018      	movs	r0, r3
   252f0:	4b32      	ldr	r3, [pc, #200]	; (253bc <nm_drv_init+0x160>)
   252f2:	4798      	blx	r3
   252f4:	4b33      	ldr	r3, [pc, #204]	; (253c4 <nm_drv_init+0x168>)
   252f6:	0018      	movs	r0, r3
   252f8:	4b30      	ldr	r3, [pc, #192]	; (253bc <nm_drv_init+0x160>)
   252fa:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   252fc:	4b35      	ldr	r3, [pc, #212]	; (253d4 <nm_drv_init+0x178>)
   252fe:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   25300:	230f      	movs	r3, #15
   25302:	18fc      	adds	r4, r7, r3
   25304:	230e      	movs	r3, #14
   25306:	18fb      	adds	r3, r7, r3
   25308:	781b      	ldrb	r3, [r3, #0]
   2530a:	0018      	movs	r0, r3
   2530c:	4b32      	ldr	r3, [pc, #200]	; (253d8 <nm_drv_init+0x17c>)
   2530e:	4798      	blx	r3
   25310:	0003      	movs	r3, r0
   25312:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25314:	230f      	movs	r3, #15
   25316:	18fb      	adds	r3, r7, r3
   25318:	781b      	ldrb	r3, [r3, #0]
   2531a:	b25b      	sxtb	r3, r3
   2531c:	2b00      	cmp	r3, #0
   2531e:	d13a      	bne.n	25396 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   25320:	230f      	movs	r3, #15
   25322:	18fc      	adds	r4, r7, r3
   25324:	230e      	movs	r3, #14
   25326:	18fb      	adds	r3, r7, r3
   25328:	781b      	ldrb	r3, [r3, #0]
   2532a:	0018      	movs	r0, r3
   2532c:	4b2b      	ldr	r3, [pc, #172]	; (253dc <nm_drv_init+0x180>)
   2532e:	4798      	blx	r3
   25330:	0003      	movs	r3, r0
   25332:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25334:	230f      	movs	r3, #15
   25336:	18fb      	adds	r3, r7, r3
   25338:	781b      	ldrb	r3, [r3, #0]
   2533a:	b25b      	sxtb	r3, r3
   2533c:	2b00      	cmp	r3, #0
   2533e:	d12c      	bne.n	2539a <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   25340:	230e      	movs	r3, #14
   25342:	18fb      	adds	r3, r7, r3
   25344:	781b      	ldrb	r3, [r3, #0]
   25346:	2b02      	cmp	r3, #2
   25348:	d02a      	beq.n	253a0 <nm_drv_init+0x144>
   2534a:	230e      	movs	r3, #14
   2534c:	18fb      	adds	r3, r7, r3
   2534e:	781b      	ldrb	r3, [r3, #0]
   25350:	2b03      	cmp	r3, #3
   25352:	d025      	beq.n	253a0 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   25354:	230f      	movs	r3, #15
   25356:	18fc      	adds	r4, r7, r3
   25358:	4b21      	ldr	r3, [pc, #132]	; (253e0 <nm_drv_init+0x184>)
   2535a:	4798      	blx	r3
   2535c:	0003      	movs	r3, r0
   2535e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25360:	230f      	movs	r3, #15
   25362:	18fb      	adds	r3, r7, r3
   25364:	781b      	ldrb	r3, [r3, #0]
   25366:	b25b      	sxtb	r3, r3
   25368:	2b00      	cmp	r3, #0
   2536a:	d00f      	beq.n	2538c <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   2536c:	23a7      	movs	r3, #167	; 0xa7
   2536e:	005a      	lsls	r2, r3, #1
   25370:	4910      	ldr	r1, [pc, #64]	; (253b4 <nm_drv_init+0x158>)
   25372:	4b11      	ldr	r3, [pc, #68]	; (253b8 <nm_drv_init+0x15c>)
   25374:	0018      	movs	r0, r3
   25376:	4b11      	ldr	r3, [pc, #68]	; (253bc <nm_drv_init+0x160>)
   25378:	4798      	blx	r3
   2537a:	4b1a      	ldr	r3, [pc, #104]	; (253e4 <nm_drv_init+0x188>)
   2537c:	0018      	movs	r0, r3
   2537e:	4b0f      	ldr	r3, [pc, #60]	; (253bc <nm_drv_init+0x160>)
   25380:	4798      	blx	r3
   25382:	4b10      	ldr	r3, [pc, #64]	; (253c4 <nm_drv_init+0x168>)
   25384:	0018      	movs	r0, r3
   25386:	4b0d      	ldr	r3, [pc, #52]	; (253bc <nm_drv_init+0x160>)
   25388:	4798      	blx	r3
		goto ERR2;
   2538a:	e007      	b.n	2539c <nm_drv_init+0x140>
	}
	return ret;
   2538c:	230f      	movs	r3, #15
   2538e:	18fb      	adds	r3, r7, r3
   25390:	781b      	ldrb	r3, [r3, #0]
   25392:	b25b      	sxtb	r3, r3
   25394:	e008      	b.n	253a8 <nm_drv_init+0x14c>
		goto ERR2;
   25396:	46c0      	nop			; (mov r8, r8)
   25398:	e000      	b.n	2539c <nm_drv_init+0x140>
		goto ERR2;
   2539a:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   2539c:	4b12      	ldr	r3, [pc, #72]	; (253e8 <nm_drv_init+0x18c>)
   2539e:	4798      	blx	r3
ERR1:
	return ret;
   253a0:	230f      	movs	r3, #15
   253a2:	18fb      	adds	r3, r7, r3
   253a4:	781b      	ldrb	r3, [r3, #0]
   253a6:	b25b      	sxtb	r3, r3
}
   253a8:	0018      	movs	r0, r3
   253aa:	46bd      	mov	sp, r7
   253ac:	b005      	add	sp, #20
   253ae:	bd90      	pop	{r4, r7, pc}
   253b0:	00024dbd 	.word	0x00024dbd
   253b4:	0003bd00 	.word	0x0003bd00
   253b8:	0003bc30 	.word	0x0003bc30
   253bc:	00020109 	.word	0x00020109
   253c0:	0003bc44 	.word	0x0003bc44
   253c4:	0003bc60 	.word	0x0003bc60
   253c8:	0003bc64 	.word	0x0003bc64
   253cc:	00024759 	.word	0x00024759
   253d0:	0003bc70 	.word	0x0003bc70
   253d4:	00026c75 	.word	0x00026c75
   253d8:	00024ab1 	.word	0x00024ab1
   253dc:	00024c49 	.word	0x00024c49
   253e0:	000246a5 	.word	0x000246a5
   253e4:	0003bc80 	.word	0x0003bc80
   253e8:	00024df1 	.word	0x00024df1

000253ec <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   253ec:	b590      	push	{r4, r7, lr}
   253ee:	b085      	sub	sp, #20
   253f0:	af00      	add	r7, sp, #0
   253f2:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   253f4:	230f      	movs	r3, #15
   253f6:	18fc      	adds	r4, r7, r3
   253f8:	4b2e      	ldr	r3, [pc, #184]	; (254b4 <nm_drv_deinit+0xc8>)
   253fa:	4798      	blx	r3
   253fc:	0003      	movs	r3, r0
   253fe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25400:	230f      	movs	r3, #15
   25402:	18fb      	adds	r3, r7, r3
   25404:	781b      	ldrb	r3, [r3, #0]
   25406:	b25b      	sxtb	r3, r3
   25408:	2b00      	cmp	r3, #0
   2540a:	d010      	beq.n	2542e <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   2540c:	2366      	movs	r3, #102	; 0x66
   2540e:	33ff      	adds	r3, #255	; 0xff
   25410:	001a      	movs	r2, r3
   25412:	4929      	ldr	r1, [pc, #164]	; (254b8 <nm_drv_deinit+0xcc>)
   25414:	4b29      	ldr	r3, [pc, #164]	; (254bc <nm_drv_deinit+0xd0>)
   25416:	0018      	movs	r0, r3
   25418:	4b29      	ldr	r3, [pc, #164]	; (254c0 <nm_drv_deinit+0xd4>)
   2541a:	4798      	blx	r3
   2541c:	4b29      	ldr	r3, [pc, #164]	; (254c4 <nm_drv_deinit+0xd8>)
   2541e:	0018      	movs	r0, r3
   25420:	4b27      	ldr	r3, [pc, #156]	; (254c0 <nm_drv_deinit+0xd4>)
   25422:	4798      	blx	r3
   25424:	4b28      	ldr	r3, [pc, #160]	; (254c8 <nm_drv_deinit+0xdc>)
   25426:	0018      	movs	r0, r3
   25428:	4b25      	ldr	r3, [pc, #148]	; (254c0 <nm_drv_deinit+0xd4>)
   2542a:	4798      	blx	r3
		goto ERR1;
   2542c:	e03a      	b.n	254a4 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   2542e:	230f      	movs	r3, #15
   25430:	18fc      	adds	r4, r7, r3
   25432:	2000      	movs	r0, #0
   25434:	4b25      	ldr	r3, [pc, #148]	; (254cc <nm_drv_deinit+0xe0>)
   25436:	4798      	blx	r3
   25438:	0003      	movs	r3, r0
   2543a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2543c:	230f      	movs	r3, #15
   2543e:	18fb      	adds	r3, r7, r3
   25440:	781b      	ldrb	r3, [r3, #0]
   25442:	b25b      	sxtb	r3, r3
   25444:	2b00      	cmp	r3, #0
   25446:	d00f      	beq.n	25468 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   25448:	23b6      	movs	r3, #182	; 0xb6
   2544a:	005a      	lsls	r2, r3, #1
   2544c:	491a      	ldr	r1, [pc, #104]	; (254b8 <nm_drv_deinit+0xcc>)
   2544e:	4b1b      	ldr	r3, [pc, #108]	; (254bc <nm_drv_deinit+0xd0>)
   25450:	0018      	movs	r0, r3
   25452:	4b1b      	ldr	r3, [pc, #108]	; (254c0 <nm_drv_deinit+0xd4>)
   25454:	4798      	blx	r3
   25456:	4b1e      	ldr	r3, [pc, #120]	; (254d0 <nm_drv_deinit+0xe4>)
   25458:	0018      	movs	r0, r3
   2545a:	4b19      	ldr	r3, [pc, #100]	; (254c0 <nm_drv_deinit+0xd4>)
   2545c:	4798      	blx	r3
   2545e:	4b1a      	ldr	r3, [pc, #104]	; (254c8 <nm_drv_deinit+0xdc>)
   25460:	0018      	movs	r0, r3
   25462:	4b17      	ldr	r3, [pc, #92]	; (254c0 <nm_drv_deinit+0xd4>)
   25464:	4798      	blx	r3
		goto ERR1;
   25466:	e01d      	b.n	254a4 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   25468:	230f      	movs	r3, #15
   2546a:	18fc      	adds	r4, r7, r3
   2546c:	4b19      	ldr	r3, [pc, #100]	; (254d4 <nm_drv_deinit+0xe8>)
   2546e:	4798      	blx	r3
   25470:	0003      	movs	r3, r0
   25472:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25474:	230f      	movs	r3, #15
   25476:	18fb      	adds	r3, r7, r3
   25478:	781b      	ldrb	r3, [r3, #0]
   2547a:	b25b      	sxtb	r3, r3
   2547c:	2b00      	cmp	r3, #0
   2547e:	d00f      	beq.n	254a0 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   25480:	23b9      	movs	r3, #185	; 0xb9
   25482:	005a      	lsls	r2, r3, #1
   25484:	490c      	ldr	r1, [pc, #48]	; (254b8 <nm_drv_deinit+0xcc>)
   25486:	4b0d      	ldr	r3, [pc, #52]	; (254bc <nm_drv_deinit+0xd0>)
   25488:	0018      	movs	r0, r3
   2548a:	4b0d      	ldr	r3, [pc, #52]	; (254c0 <nm_drv_deinit+0xd4>)
   2548c:	4798      	blx	r3
   2548e:	4b12      	ldr	r3, [pc, #72]	; (254d8 <nm_drv_deinit+0xec>)
   25490:	0018      	movs	r0, r3
   25492:	4b0b      	ldr	r3, [pc, #44]	; (254c0 <nm_drv_deinit+0xd4>)
   25494:	4798      	blx	r3
   25496:	4b0c      	ldr	r3, [pc, #48]	; (254c8 <nm_drv_deinit+0xdc>)
   25498:	0018      	movs	r0, r3
   2549a:	4b09      	ldr	r3, [pc, #36]	; (254c0 <nm_drv_deinit+0xd4>)
   2549c:	4798      	blx	r3
		goto ERR1;
   2549e:	e001      	b.n	254a4 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   254a0:	4b0e      	ldr	r3, [pc, #56]	; (254dc <nm_drv_deinit+0xf0>)
   254a2:	4798      	blx	r3
#endif

ERR1:
	return ret;
   254a4:	230f      	movs	r3, #15
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	781b      	ldrb	r3, [r3, #0]
   254aa:	b25b      	sxtb	r3, r3
}
   254ac:	0018      	movs	r0, r3
   254ae:	46bd      	mov	sp, r7
   254b0:	b005      	add	sp, #20
   254b2:	bd90      	pop	{r4, r7, pc}
   254b4:	00024cfd 	.word	0x00024cfd
   254b8:	0003bd0c 	.word	0x0003bd0c
   254bc:	0003bc30 	.word	0x0003bc30
   254c0:	00020109 	.word	0x00020109
   254c4:	0003bca0 	.word	0x0003bca0
   254c8:	0003bc60 	.word	0x0003bc60
   254cc:	0002811d 	.word	0x0002811d
   254d0:	0003bcc0 	.word	0x0003bcc0
   254d4:	00024df1 	.word	0x00024df1
   254d8:	0003bce4 	.word	0x0003bce4
   254dc:	00026dc1 	.word	0x00026dc1

000254e0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   254e0:	b580      	push	{r7, lr}
   254e2:	b086      	sub	sp, #24
   254e4:	af00      	add	r7, sp, #0
   254e6:	6078      	str	r0, [r7, #4]
   254e8:	000a      	movs	r2, r1
   254ea:	1cbb      	adds	r3, r7, #2
   254ec:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   254ee:	230c      	movs	r3, #12
   254f0:	18fb      	adds	r3, r7, r3
   254f2:	2200      	movs	r2, #0
   254f4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   254f6:	230c      	movs	r3, #12
   254f8:	18fb      	adds	r3, r7, r3
   254fa:	687a      	ldr	r2, [r7, #4]
   254fc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   254fe:	230c      	movs	r3, #12
   25500:	18fb      	adds	r3, r7, r3
   25502:	1cba      	adds	r2, r7, #2
   25504:	8812      	ldrh	r2, [r2, #0]
   25506:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   25508:	230c      	movs	r3, #12
   2550a:	18fb      	adds	r3, r7, r3
   2550c:	0019      	movs	r1, r3
   2550e:	2003      	movs	r0, #3
   25510:	4b03      	ldr	r3, [pc, #12]	; (25520 <nmi_spi_read+0x40>)
   25512:	4798      	blx	r3
   25514:	0003      	movs	r3, r0
}
   25516:	0018      	movs	r0, r3
   25518:	46bd      	mov	sp, r7
   2551a:	b006      	add	sp, #24
   2551c:	bd80      	pop	{r7, pc}
   2551e:	46c0      	nop			; (mov r8, r8)
   25520:	00022c8d 	.word	0x00022c8d

00025524 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   25524:	b580      	push	{r7, lr}
   25526:	b086      	sub	sp, #24
   25528:	af00      	add	r7, sp, #0
   2552a:	6078      	str	r0, [r7, #4]
   2552c:	000a      	movs	r2, r1
   2552e:	1cbb      	adds	r3, r7, #2
   25530:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   25532:	230c      	movs	r3, #12
   25534:	18fb      	adds	r3, r7, r3
   25536:	687a      	ldr	r2, [r7, #4]
   25538:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   2553a:	230c      	movs	r3, #12
   2553c:	18fb      	adds	r3, r7, r3
   2553e:	2200      	movs	r2, #0
   25540:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25542:	230c      	movs	r3, #12
   25544:	18fb      	adds	r3, r7, r3
   25546:	1cba      	adds	r2, r7, #2
   25548:	8812      	ldrh	r2, [r2, #0]
   2554a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   2554c:	230c      	movs	r3, #12
   2554e:	18fb      	adds	r3, r7, r3
   25550:	0019      	movs	r1, r3
   25552:	2003      	movs	r0, #3
   25554:	4b03      	ldr	r3, [pc, #12]	; (25564 <nmi_spi_write+0x40>)
   25556:	4798      	blx	r3
   25558:	0003      	movs	r3, r0
}
   2555a:	0018      	movs	r0, r3
   2555c:	46bd      	mov	sp, r7
   2555e:	b006      	add	sp, #24
   25560:	bd80      	pop	{r7, pc}
   25562:	46c0      	nop			; (mov r8, r8)
   25564:	00022c8d 	.word	0x00022c8d

00025568 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   25568:	b580      	push	{r7, lr}
   2556a:	b088      	sub	sp, #32
   2556c:	af00      	add	r7, sp, #0
   2556e:	60f8      	str	r0, [r7, #12]
   25570:	60b9      	str	r1, [r7, #8]
   25572:	1dbb      	adds	r3, r7, #6
   25574:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   25576:	2314      	movs	r3, #20
   25578:	18fb      	adds	r3, r7, r3
   2557a:	68fa      	ldr	r2, [r7, #12]
   2557c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   2557e:	2314      	movs	r3, #20
   25580:	18fb      	adds	r3, r7, r3
   25582:	68ba      	ldr	r2, [r7, #8]
   25584:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25586:	2314      	movs	r3, #20
   25588:	18fb      	adds	r3, r7, r3
   2558a:	1dba      	adds	r2, r7, #6
   2558c:	8812      	ldrh	r2, [r2, #0]
   2558e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   25590:	2314      	movs	r3, #20
   25592:	18fb      	adds	r3, r7, r3
   25594:	0019      	movs	r1, r3
   25596:	2003      	movs	r0, #3
   25598:	4b03      	ldr	r3, [pc, #12]	; (255a8 <nmi_spi_rw+0x40>)
   2559a:	4798      	blx	r3
   2559c:	0003      	movs	r3, r0
}
   2559e:	0018      	movs	r0, r3
   255a0:	46bd      	mov	sp, r7
   255a2:	b008      	add	sp, #32
   255a4:	bd80      	pop	{r7, pc}
   255a6:	46c0      	nop			; (mov r8, r8)
   255a8:	00022c8d 	.word	0x00022c8d

000255ac <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   255ac:	b580      	push	{r7, lr}
   255ae:	b082      	sub	sp, #8
   255b0:	af00      	add	r7, sp, #0
   255b2:	0002      	movs	r2, r0
   255b4:	1dfb      	adds	r3, r7, #7
   255b6:	701a      	strb	r2, [r3, #0]
   255b8:	1dbb      	adds	r3, r7, #6
   255ba:	1c0a      	adds	r2, r1, #0
   255bc:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   255be:	1dfb      	adds	r3, r7, #7
   255c0:	781b      	ldrb	r3, [r3, #0]
   255c2:	005a      	lsls	r2, r3, #1
   255c4:	1dbb      	adds	r3, r7, #6
   255c6:	781b      	ldrb	r3, [r3, #0]
   255c8:	4053      	eors	r3, r2
   255ca:	4a03      	ldr	r2, [pc, #12]	; (255d8 <crc7_byte+0x2c>)
   255cc:	5cd3      	ldrb	r3, [r2, r3]
}
   255ce:	0018      	movs	r0, r3
   255d0:	46bd      	mov	sp, r7
   255d2:	b002      	add	sp, #8
   255d4:	bd80      	pop	{r7, pc}
   255d6:	46c0      	nop			; (mov r8, r8)
   255d8:	0003bd1c 	.word	0x0003bd1c

000255dc <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   255dc:	b590      	push	{r4, r7, lr}
   255de:	b085      	sub	sp, #20
   255e0:	af00      	add	r7, sp, #0
   255e2:	60b9      	str	r1, [r7, #8]
   255e4:	607a      	str	r2, [r7, #4]
   255e6:	230f      	movs	r3, #15
   255e8:	18fb      	adds	r3, r7, r3
   255ea:	1c02      	adds	r2, r0, #0
   255ec:	701a      	strb	r2, [r3, #0]
	while (len--)
   255ee:	e00e      	b.n	2560e <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   255f0:	68bb      	ldr	r3, [r7, #8]
   255f2:	1c5a      	adds	r2, r3, #1
   255f4:	60ba      	str	r2, [r7, #8]
   255f6:	781a      	ldrb	r2, [r3, #0]
   255f8:	230f      	movs	r3, #15
   255fa:	18fc      	adds	r4, r7, r3
   255fc:	230f      	movs	r3, #15
   255fe:	18fb      	adds	r3, r7, r3
   25600:	781b      	ldrb	r3, [r3, #0]
   25602:	0011      	movs	r1, r2
   25604:	0018      	movs	r0, r3
   25606:	4b08      	ldr	r3, [pc, #32]	; (25628 <crc7+0x4c>)
   25608:	4798      	blx	r3
   2560a:	0003      	movs	r3, r0
   2560c:	7023      	strb	r3, [r4, #0]
	while (len--)
   2560e:	687b      	ldr	r3, [r7, #4]
   25610:	1e5a      	subs	r2, r3, #1
   25612:	607a      	str	r2, [r7, #4]
   25614:	2b00      	cmp	r3, #0
   25616:	d1eb      	bne.n	255f0 <crc7+0x14>
	return crc;
   25618:	230f      	movs	r3, #15
   2561a:	18fb      	adds	r3, r7, r3
   2561c:	781b      	ldrb	r3, [r3, #0]
}
   2561e:	0018      	movs	r0, r3
   25620:	46bd      	mov	sp, r7
   25622:	b005      	add	sp, #20
   25624:	bd90      	pop	{r4, r7, pc}
   25626:	46c0      	nop			; (mov r8, r8)
   25628:	000255ad 	.word	0x000255ad

0002562c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   2562c:	b590      	push	{r4, r7, lr}
   2562e:	b089      	sub	sp, #36	; 0x24
   25630:	af00      	add	r7, sp, #0
   25632:	60b9      	str	r1, [r7, #8]
   25634:	607a      	str	r2, [r7, #4]
   25636:	603b      	str	r3, [r7, #0]
   25638:	230f      	movs	r3, #15
   2563a:	18fb      	adds	r3, r7, r3
   2563c:	1c02      	adds	r2, r0, #0
   2563e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   25640:	231f      	movs	r3, #31
   25642:	18fb      	adds	r3, r7, r3
   25644:	2205      	movs	r2, #5
   25646:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25648:	231e      	movs	r3, #30
   2564a:	18fb      	adds	r3, r7, r3
   2564c:	2201      	movs	r2, #1
   2564e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   25650:	2314      	movs	r3, #20
   25652:	18fb      	adds	r3, r7, r3
   25654:	220f      	movs	r2, #15
   25656:	18ba      	adds	r2, r7, r2
   25658:	7812      	ldrb	r2, [r2, #0]
   2565a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2565c:	230f      	movs	r3, #15
   2565e:	18fb      	adds	r3, r7, r3
   25660:	781b      	ldrb	r3, [r3, #0]
   25662:	3bc1      	subs	r3, #193	; 0xc1
   25664:	2b0e      	cmp	r3, #14
   25666:	d900      	bls.n	2566a <spi_cmd+0x3e>
   25668:	e11b      	b.n	258a2 <spi_cmd+0x276>
   2566a:	009a      	lsls	r2, r3, #2
   2566c:	4bb6      	ldr	r3, [pc, #728]	; (25948 <spi_cmd+0x31c>)
   2566e:	18d3      	adds	r3, r2, r3
   25670:	681b      	ldr	r3, [r3, #0]
   25672:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   25674:	68bb      	ldr	r3, [r7, #8]
   25676:	0c1b      	lsrs	r3, r3, #16
   25678:	b2da      	uxtb	r2, r3
   2567a:	2314      	movs	r3, #20
   2567c:	18fb      	adds	r3, r7, r3
   2567e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25680:	68bb      	ldr	r3, [r7, #8]
   25682:	0a1b      	lsrs	r3, r3, #8
   25684:	b2da      	uxtb	r2, r3
   25686:	2314      	movs	r3, #20
   25688:	18fb      	adds	r3, r7, r3
   2568a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2568c:	68bb      	ldr	r3, [r7, #8]
   2568e:	b2da      	uxtb	r2, r3
   25690:	2314      	movs	r3, #20
   25692:	18fb      	adds	r3, r7, r3
   25694:	70da      	strb	r2, [r3, #3]
		len = 5;
   25696:	231f      	movs	r3, #31
   25698:	18fb      	adds	r3, r7, r3
   2569a:	2205      	movs	r2, #5
   2569c:	701a      	strb	r2, [r3, #0]
		break;
   2569e:	e105      	b.n	258ac <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   256a0:	68bb      	ldr	r3, [r7, #8]
   256a2:	0a1b      	lsrs	r3, r3, #8
   256a4:	b2da      	uxtb	r2, r3
   256a6:	2314      	movs	r3, #20
   256a8:	18fb      	adds	r3, r7, r3
   256aa:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   256ac:	2330      	movs	r3, #48	; 0x30
   256ae:	18fb      	adds	r3, r7, r3
   256b0:	781b      	ldrb	r3, [r3, #0]
   256b2:	2b00      	cmp	r3, #0
   256b4:	d009      	beq.n	256ca <spi_cmd+0x9e>
   256b6:	2314      	movs	r3, #20
   256b8:	18fb      	adds	r3, r7, r3
   256ba:	785b      	ldrb	r3, [r3, #1]
   256bc:	2280      	movs	r2, #128	; 0x80
   256be:	4252      	negs	r2, r2
   256c0:	4313      	orrs	r3, r2
   256c2:	b2da      	uxtb	r2, r3
   256c4:	2314      	movs	r3, #20
   256c6:	18fb      	adds	r3, r7, r3
   256c8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   256ca:	68bb      	ldr	r3, [r7, #8]
   256cc:	b2da      	uxtb	r2, r3
   256ce:	2314      	movs	r3, #20
   256d0:	18fb      	adds	r3, r7, r3
   256d2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   256d4:	2314      	movs	r3, #20
   256d6:	18fb      	adds	r3, r7, r3
   256d8:	2200      	movs	r2, #0
   256da:	70da      	strb	r2, [r3, #3]
		len = 5;
   256dc:	231f      	movs	r3, #31
   256de:	18fb      	adds	r3, r7, r3
   256e0:	2205      	movs	r2, #5
   256e2:	701a      	strb	r2, [r3, #0]
		break;
   256e4:	e0e2      	b.n	258ac <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   256e6:	2314      	movs	r3, #20
   256e8:	18fb      	adds	r3, r7, r3
   256ea:	2200      	movs	r2, #0
   256ec:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   256ee:	2314      	movs	r3, #20
   256f0:	18fb      	adds	r3, r7, r3
   256f2:	2200      	movs	r2, #0
   256f4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   256f6:	2314      	movs	r3, #20
   256f8:	18fb      	adds	r3, r7, r3
   256fa:	2200      	movs	r2, #0
   256fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   256fe:	231f      	movs	r3, #31
   25700:	18fb      	adds	r3, r7, r3
   25702:	2205      	movs	r2, #5
   25704:	701a      	strb	r2, [r3, #0]
		break;
   25706:	e0d1      	b.n	258ac <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   25708:	2314      	movs	r3, #20
   2570a:	18fb      	adds	r3, r7, r3
   2570c:	2200      	movs	r2, #0
   2570e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   25710:	2314      	movs	r3, #20
   25712:	18fb      	adds	r3, r7, r3
   25714:	2200      	movs	r2, #0
   25716:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25718:	2314      	movs	r3, #20
   2571a:	18fb      	adds	r3, r7, r3
   2571c:	2200      	movs	r2, #0
   2571e:	70da      	strb	r2, [r3, #3]
		len = 5;
   25720:	231f      	movs	r3, #31
   25722:	18fb      	adds	r3, r7, r3
   25724:	2205      	movs	r2, #5
   25726:	701a      	strb	r2, [r3, #0]
		break;
   25728:	e0c0      	b.n	258ac <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   2572a:	2314      	movs	r3, #20
   2572c:	18fb      	adds	r3, r7, r3
   2572e:	22ff      	movs	r2, #255	; 0xff
   25730:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   25732:	2314      	movs	r3, #20
   25734:	18fb      	adds	r3, r7, r3
   25736:	22ff      	movs	r2, #255	; 0xff
   25738:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   2573a:	2314      	movs	r3, #20
   2573c:	18fb      	adds	r3, r7, r3
   2573e:	22ff      	movs	r2, #255	; 0xff
   25740:	70da      	strb	r2, [r3, #3]
		len = 5;
   25742:	231f      	movs	r3, #31
   25744:	18fb      	adds	r3, r7, r3
   25746:	2205      	movs	r2, #5
   25748:	701a      	strb	r2, [r3, #0]
		break;
   2574a:	e0af      	b.n	258ac <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   2574c:	68bb      	ldr	r3, [r7, #8]
   2574e:	0c1b      	lsrs	r3, r3, #16
   25750:	b2da      	uxtb	r2, r3
   25752:	2314      	movs	r3, #20
   25754:	18fb      	adds	r3, r7, r3
   25756:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25758:	68bb      	ldr	r3, [r7, #8]
   2575a:	0a1b      	lsrs	r3, r3, #8
   2575c:	b2da      	uxtb	r2, r3
   2575e:	2314      	movs	r3, #20
   25760:	18fb      	adds	r3, r7, r3
   25762:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   25764:	68bb      	ldr	r3, [r7, #8]
   25766:	b2da      	uxtb	r2, r3
   25768:	2314      	movs	r3, #20
   2576a:	18fb      	adds	r3, r7, r3
   2576c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2576e:	683b      	ldr	r3, [r7, #0]
   25770:	0a1b      	lsrs	r3, r3, #8
   25772:	b2da      	uxtb	r2, r3
   25774:	2314      	movs	r3, #20
   25776:	18fb      	adds	r3, r7, r3
   25778:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   2577a:	683b      	ldr	r3, [r7, #0]
   2577c:	b2da      	uxtb	r2, r3
   2577e:	2314      	movs	r3, #20
   25780:	18fb      	adds	r3, r7, r3
   25782:	715a      	strb	r2, [r3, #5]
		len = 7;
   25784:	231f      	movs	r3, #31
   25786:	18fb      	adds	r3, r7, r3
   25788:	2207      	movs	r2, #7
   2578a:	701a      	strb	r2, [r3, #0]
		break;
   2578c:	e08e      	b.n	258ac <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   2578e:	68bb      	ldr	r3, [r7, #8]
   25790:	0c1b      	lsrs	r3, r3, #16
   25792:	b2da      	uxtb	r2, r3
   25794:	2314      	movs	r3, #20
   25796:	18fb      	adds	r3, r7, r3
   25798:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2579a:	68bb      	ldr	r3, [r7, #8]
   2579c:	0a1b      	lsrs	r3, r3, #8
   2579e:	b2da      	uxtb	r2, r3
   257a0:	2314      	movs	r3, #20
   257a2:	18fb      	adds	r3, r7, r3
   257a4:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   257a6:	68bb      	ldr	r3, [r7, #8]
   257a8:	b2da      	uxtb	r2, r3
   257aa:	2314      	movs	r3, #20
   257ac:	18fb      	adds	r3, r7, r3
   257ae:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   257b0:	683b      	ldr	r3, [r7, #0]
   257b2:	0c1b      	lsrs	r3, r3, #16
   257b4:	b2da      	uxtb	r2, r3
   257b6:	2314      	movs	r3, #20
   257b8:	18fb      	adds	r3, r7, r3
   257ba:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   257bc:	683b      	ldr	r3, [r7, #0]
   257be:	0a1b      	lsrs	r3, r3, #8
   257c0:	b2da      	uxtb	r2, r3
   257c2:	2314      	movs	r3, #20
   257c4:	18fb      	adds	r3, r7, r3
   257c6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   257c8:	683b      	ldr	r3, [r7, #0]
   257ca:	b2da      	uxtb	r2, r3
   257cc:	2314      	movs	r3, #20
   257ce:	18fb      	adds	r3, r7, r3
   257d0:	719a      	strb	r2, [r3, #6]
		len = 8;
   257d2:	231f      	movs	r3, #31
   257d4:	18fb      	adds	r3, r7, r3
   257d6:	2208      	movs	r2, #8
   257d8:	701a      	strb	r2, [r3, #0]
		break;
   257da:	e067      	b.n	258ac <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   257dc:	68bb      	ldr	r3, [r7, #8]
   257de:	0a1b      	lsrs	r3, r3, #8
   257e0:	b2da      	uxtb	r2, r3
   257e2:	2314      	movs	r3, #20
   257e4:	18fb      	adds	r3, r7, r3
   257e6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   257e8:	2330      	movs	r3, #48	; 0x30
   257ea:	18fb      	adds	r3, r7, r3
   257ec:	781b      	ldrb	r3, [r3, #0]
   257ee:	2b00      	cmp	r3, #0
   257f0:	d009      	beq.n	25806 <spi_cmd+0x1da>
   257f2:	2314      	movs	r3, #20
   257f4:	18fb      	adds	r3, r7, r3
   257f6:	785b      	ldrb	r3, [r3, #1]
   257f8:	2280      	movs	r2, #128	; 0x80
   257fa:	4252      	negs	r2, r2
   257fc:	4313      	orrs	r3, r2
   257fe:	b2da      	uxtb	r2, r3
   25800:	2314      	movs	r3, #20
   25802:	18fb      	adds	r3, r7, r3
   25804:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   25806:	68bb      	ldr	r3, [r7, #8]
   25808:	b2da      	uxtb	r2, r3
   2580a:	2314      	movs	r3, #20
   2580c:	18fb      	adds	r3, r7, r3
   2580e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   25810:	687b      	ldr	r3, [r7, #4]
   25812:	0e1b      	lsrs	r3, r3, #24
   25814:	b2da      	uxtb	r2, r3
   25816:	2314      	movs	r3, #20
   25818:	18fb      	adds	r3, r7, r3
   2581a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   2581c:	687b      	ldr	r3, [r7, #4]
   2581e:	0c1b      	lsrs	r3, r3, #16
   25820:	b2da      	uxtb	r2, r3
   25822:	2314      	movs	r3, #20
   25824:	18fb      	adds	r3, r7, r3
   25826:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   25828:	687b      	ldr	r3, [r7, #4]
   2582a:	0a1b      	lsrs	r3, r3, #8
   2582c:	b2da      	uxtb	r2, r3
   2582e:	2314      	movs	r3, #20
   25830:	18fb      	adds	r3, r7, r3
   25832:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   25834:	687b      	ldr	r3, [r7, #4]
   25836:	b2da      	uxtb	r2, r3
   25838:	2314      	movs	r3, #20
   2583a:	18fb      	adds	r3, r7, r3
   2583c:	719a      	strb	r2, [r3, #6]
		len = 8;
   2583e:	231f      	movs	r3, #31
   25840:	18fb      	adds	r3, r7, r3
   25842:	2208      	movs	r2, #8
   25844:	701a      	strb	r2, [r3, #0]
		break;
   25846:	e031      	b.n	258ac <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   25848:	68bb      	ldr	r3, [r7, #8]
   2584a:	0c1b      	lsrs	r3, r3, #16
   2584c:	b2da      	uxtb	r2, r3
   2584e:	2314      	movs	r3, #20
   25850:	18fb      	adds	r3, r7, r3
   25852:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25854:	68bb      	ldr	r3, [r7, #8]
   25856:	0a1b      	lsrs	r3, r3, #8
   25858:	b2da      	uxtb	r2, r3
   2585a:	2314      	movs	r3, #20
   2585c:	18fb      	adds	r3, r7, r3
   2585e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   25860:	68bb      	ldr	r3, [r7, #8]
   25862:	b2da      	uxtb	r2, r3
   25864:	2314      	movs	r3, #20
   25866:	18fb      	adds	r3, r7, r3
   25868:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   2586a:	687b      	ldr	r3, [r7, #4]
   2586c:	0e1b      	lsrs	r3, r3, #24
   2586e:	b2da      	uxtb	r2, r3
   25870:	2314      	movs	r3, #20
   25872:	18fb      	adds	r3, r7, r3
   25874:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   25876:	687b      	ldr	r3, [r7, #4]
   25878:	0c1b      	lsrs	r3, r3, #16
   2587a:	b2da      	uxtb	r2, r3
   2587c:	2314      	movs	r3, #20
   2587e:	18fb      	adds	r3, r7, r3
   25880:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   25882:	687b      	ldr	r3, [r7, #4]
   25884:	0a1b      	lsrs	r3, r3, #8
   25886:	b2da      	uxtb	r2, r3
   25888:	2314      	movs	r3, #20
   2588a:	18fb      	adds	r3, r7, r3
   2588c:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   2588e:	687b      	ldr	r3, [r7, #4]
   25890:	b2da      	uxtb	r2, r3
   25892:	2314      	movs	r3, #20
   25894:	18fb      	adds	r3, r7, r3
   25896:	71da      	strb	r2, [r3, #7]
		len = 9;
   25898:	231f      	movs	r3, #31
   2589a:	18fb      	adds	r3, r7, r3
   2589c:	2209      	movs	r2, #9
   2589e:	701a      	strb	r2, [r3, #0]
		break;
   258a0:	e004      	b.n	258ac <spi_cmd+0x280>
	default:
		result = N_FAIL;
   258a2:	231e      	movs	r3, #30
   258a4:	18fb      	adds	r3, r7, r3
   258a6:	2200      	movs	r2, #0
   258a8:	701a      	strb	r2, [r3, #0]
		break;
   258aa:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   258ac:	231e      	movs	r3, #30
   258ae:	18fb      	adds	r3, r7, r3
   258b0:	781b      	ldrb	r3, [r3, #0]
   258b2:	b25b      	sxtb	r3, r3
   258b4:	2b00      	cmp	r3, #0
   258b6:	d03f      	beq.n	25938 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   258b8:	4b24      	ldr	r3, [pc, #144]	; (2594c <spi_cmd+0x320>)
   258ba:	781b      	ldrb	r3, [r3, #0]
   258bc:	2b00      	cmp	r3, #0
   258be:	d115      	bne.n	258ec <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   258c0:	231f      	movs	r3, #31
   258c2:	18fb      	adds	r3, r7, r3
   258c4:	781b      	ldrb	r3, [r3, #0]
   258c6:	1e5c      	subs	r4, r3, #1
   258c8:	231f      	movs	r3, #31
   258ca:	18fb      	adds	r3, r7, r3
   258cc:	781b      	ldrb	r3, [r3, #0]
   258ce:	3b01      	subs	r3, #1
   258d0:	001a      	movs	r2, r3
   258d2:	2314      	movs	r3, #20
   258d4:	18fb      	adds	r3, r7, r3
   258d6:	0019      	movs	r1, r3
   258d8:	207f      	movs	r0, #127	; 0x7f
   258da:	4b1d      	ldr	r3, [pc, #116]	; (25950 <spi_cmd+0x324>)
   258dc:	4798      	blx	r3
   258de:	0003      	movs	r3, r0
   258e0:	18db      	adds	r3, r3, r3
   258e2:	b2da      	uxtb	r2, r3
   258e4:	2314      	movs	r3, #20
   258e6:	18fb      	adds	r3, r7, r3
   258e8:	551a      	strb	r2, [r3, r4]
   258ea:	e006      	b.n	258fa <spi_cmd+0x2ce>
		else
			len-=1;
   258ec:	231f      	movs	r3, #31
   258ee:	18fb      	adds	r3, r7, r3
   258f0:	221f      	movs	r2, #31
   258f2:	18ba      	adds	r2, r7, r2
   258f4:	7812      	ldrb	r2, [r2, #0]
   258f6:	3a01      	subs	r2, #1
   258f8:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   258fa:	231f      	movs	r3, #31
   258fc:	18fb      	adds	r3, r7, r3
   258fe:	781b      	ldrb	r3, [r3, #0]
   25900:	b29a      	uxth	r2, r3
   25902:	2314      	movs	r3, #20
   25904:	18fb      	adds	r3, r7, r3
   25906:	0011      	movs	r1, r2
   25908:	0018      	movs	r0, r3
   2590a:	4b12      	ldr	r3, [pc, #72]	; (25954 <spi_cmd+0x328>)
   2590c:	4798      	blx	r3
   2590e:	1e03      	subs	r3, r0, #0
   25910:	d012      	beq.n	25938 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   25912:	2390      	movs	r3, #144	; 0x90
   25914:	005a      	lsls	r2, r3, #1
   25916:	4910      	ldr	r1, [pc, #64]	; (25958 <spi_cmd+0x32c>)
   25918:	4b10      	ldr	r3, [pc, #64]	; (2595c <spi_cmd+0x330>)
   2591a:	0018      	movs	r0, r3
   2591c:	4b10      	ldr	r3, [pc, #64]	; (25960 <spi_cmd+0x334>)
   2591e:	4798      	blx	r3
   25920:	4b10      	ldr	r3, [pc, #64]	; (25964 <spi_cmd+0x338>)
   25922:	0018      	movs	r0, r3
   25924:	4b0e      	ldr	r3, [pc, #56]	; (25960 <spi_cmd+0x334>)
   25926:	4798      	blx	r3
   25928:	4b0f      	ldr	r3, [pc, #60]	; (25968 <spi_cmd+0x33c>)
   2592a:	0018      	movs	r0, r3
   2592c:	4b0c      	ldr	r3, [pc, #48]	; (25960 <spi_cmd+0x334>)
   2592e:	4798      	blx	r3
			result = N_FAIL;
   25930:	231e      	movs	r3, #30
   25932:	18fb      	adds	r3, r7, r3
   25934:	2200      	movs	r2, #0
   25936:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   25938:	231e      	movs	r3, #30
   2593a:	18fb      	adds	r3, r7, r3
   2593c:	781b      	ldrb	r3, [r3, #0]
   2593e:	b25b      	sxtb	r3, r3
}
   25940:	0018      	movs	r0, r3
   25942:	46bd      	mov	sp, r7
   25944:	b009      	add	sp, #36	; 0x24
   25946:	bd90      	pop	{r4, r7, pc}
   25948:	0003c394 	.word	0x0003c394
   2594c:	20004110 	.word	0x20004110
   25950:	000255dd 	.word	0x000255dd
   25954:	00025525 	.word	0x00025525
   25958:	0003c40c 	.word	0x0003c40c
   2595c:	0003be1c 	.word	0x0003be1c
   25960:	00020109 	.word	0x00020109
   25964:	0003be30 	.word	0x0003be30
   25968:	0003be5c 	.word	0x0003be5c

0002596c <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   2596c:	b590      	push	{r4, r7, lr}
   2596e:	b085      	sub	sp, #20
   25970:	af00      	add	r7, sp, #0
   25972:	0002      	movs	r2, r0
   25974:	1dfb      	adds	r3, r7, #7
   25976:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   25978:	230e      	movs	r3, #14
   2597a:	18fb      	adds	r3, r7, r3
   2597c:	2201      	movs	r2, #1
   2597e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   25980:	4b32      	ldr	r3, [pc, #200]	; (25a4c <spi_data_rsp+0xe0>)
   25982:	781b      	ldrb	r3, [r3, #0]
   25984:	2b00      	cmp	r3, #0
   25986:	d104      	bne.n	25992 <spi_data_rsp+0x26>
		len = 2;
   25988:	230f      	movs	r3, #15
   2598a:	18fb      	adds	r3, r7, r3
   2598c:	2202      	movs	r2, #2
   2598e:	701a      	strb	r2, [r3, #0]
   25990:	e003      	b.n	2599a <spi_data_rsp+0x2e>
	else
		len = 3;
   25992:	230f      	movs	r3, #15
   25994:	18fb      	adds	r3, r7, r3
   25996:	2203      	movs	r2, #3
   25998:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   2599a:	230f      	movs	r3, #15
   2599c:	18fb      	adds	r3, r7, r3
   2599e:	781b      	ldrb	r3, [r3, #0]
   259a0:	b29a      	uxth	r2, r3
   259a2:	2308      	movs	r3, #8
   259a4:	18fb      	adds	r3, r7, r3
   259a6:	0011      	movs	r1, r2
   259a8:	0018      	movs	r0, r3
   259aa:	4b29      	ldr	r3, [pc, #164]	; (25a50 <spi_data_rsp+0xe4>)
   259ac:	4798      	blx	r3
   259ae:	1e03      	subs	r3, r0, #0
   259b0:	d013      	beq.n	259da <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   259b2:	239a      	movs	r3, #154	; 0x9a
   259b4:	005a      	lsls	r2, r3, #1
   259b6:	4927      	ldr	r1, [pc, #156]	; (25a54 <spi_data_rsp+0xe8>)
   259b8:	4b27      	ldr	r3, [pc, #156]	; (25a58 <spi_data_rsp+0xec>)
   259ba:	0018      	movs	r0, r3
   259bc:	4b27      	ldr	r3, [pc, #156]	; (25a5c <spi_data_rsp+0xf0>)
   259be:	4798      	blx	r3
   259c0:	4b27      	ldr	r3, [pc, #156]	; (25a60 <spi_data_rsp+0xf4>)
   259c2:	0018      	movs	r0, r3
   259c4:	4b25      	ldr	r3, [pc, #148]	; (25a5c <spi_data_rsp+0xf0>)
   259c6:	4798      	blx	r3
   259c8:	4b26      	ldr	r3, [pc, #152]	; (25a64 <spi_data_rsp+0xf8>)
   259ca:	0018      	movs	r0, r3
   259cc:	4b23      	ldr	r3, [pc, #140]	; (25a5c <spi_data_rsp+0xf0>)
   259ce:	4798      	blx	r3
		result = N_FAIL;
   259d0:	230e      	movs	r3, #14
   259d2:	18fb      	adds	r3, r7, r3
   259d4:	2200      	movs	r2, #0
   259d6:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   259d8:	e030      	b.n	25a3c <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   259da:	230f      	movs	r3, #15
   259dc:	18fb      	adds	r3, r7, r3
   259de:	781b      	ldrb	r3, [r3, #0]
   259e0:	3b01      	subs	r3, #1
   259e2:	2208      	movs	r2, #8
   259e4:	18ba      	adds	r2, r7, r2
   259e6:	5cd3      	ldrb	r3, [r2, r3]
   259e8:	2b00      	cmp	r3, #0
   259ea:	d108      	bne.n	259fe <spi_data_rsp+0x92>
   259ec:	230f      	movs	r3, #15
   259ee:	18fb      	adds	r3, r7, r3
   259f0:	781b      	ldrb	r3, [r3, #0]
   259f2:	3b02      	subs	r3, #2
   259f4:	2208      	movs	r2, #8
   259f6:	18ba      	adds	r2, r7, r2
   259f8:	5cd3      	ldrb	r3, [r2, r3]
   259fa:	2bc3      	cmp	r3, #195	; 0xc3
   259fc:	d01e      	beq.n	25a3c <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   259fe:	233c      	movs	r3, #60	; 0x3c
   25a00:	33ff      	adds	r3, #255	; 0xff
   25a02:	001a      	movs	r2, r3
   25a04:	4913      	ldr	r1, [pc, #76]	; (25a54 <spi_data_rsp+0xe8>)
   25a06:	4b14      	ldr	r3, [pc, #80]	; (25a58 <spi_data_rsp+0xec>)
   25a08:	0018      	movs	r0, r3
   25a0a:	4b14      	ldr	r3, [pc, #80]	; (25a5c <spi_data_rsp+0xf0>)
   25a0c:	4798      	blx	r3
   25a0e:	2308      	movs	r3, #8
   25a10:	18fb      	adds	r3, r7, r3
   25a12:	781b      	ldrb	r3, [r3, #0]
   25a14:	0019      	movs	r1, r3
   25a16:	2308      	movs	r3, #8
   25a18:	18fb      	adds	r3, r7, r3
   25a1a:	785b      	ldrb	r3, [r3, #1]
   25a1c:	001a      	movs	r2, r3
   25a1e:	2308      	movs	r3, #8
   25a20:	18fb      	adds	r3, r7, r3
   25a22:	789b      	ldrb	r3, [r3, #2]
   25a24:	4810      	ldr	r0, [pc, #64]	; (25a68 <spi_data_rsp+0xfc>)
   25a26:	4c0d      	ldr	r4, [pc, #52]	; (25a5c <spi_data_rsp+0xf0>)
   25a28:	47a0      	blx	r4
   25a2a:	4b0e      	ldr	r3, [pc, #56]	; (25a64 <spi_data_rsp+0xf8>)
   25a2c:	0018      	movs	r0, r3
   25a2e:	4b0b      	ldr	r3, [pc, #44]	; (25a5c <spi_data_rsp+0xf0>)
   25a30:	4798      	blx	r3
		result = N_FAIL;
   25a32:	230e      	movs	r3, #14
   25a34:	18fb      	adds	r3, r7, r3
   25a36:	2200      	movs	r2, #0
   25a38:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   25a3a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   25a3c:	230e      	movs	r3, #14
   25a3e:	18fb      	adds	r3, r7, r3
   25a40:	781b      	ldrb	r3, [r3, #0]
   25a42:	b25b      	sxtb	r3, r3
}
   25a44:	0018      	movs	r0, r3
   25a46:	46bd      	mov	sp, r7
   25a48:	b005      	add	sp, #20
   25a4a:	bd90      	pop	{r4, r7, pc}
   25a4c:	20004110 	.word	0x20004110
   25a50:	000254e1 	.word	0x000254e1
   25a54:	0003c414 	.word	0x0003c414
   25a58:	0003be1c 	.word	0x0003be1c
   25a5c:	00020109 	.word	0x00020109
   25a60:	0003be60 	.word	0x0003be60
   25a64:	0003be5c 	.word	0x0003be5c
   25a68:	0003be80 	.word	0x0003be80

00025a6c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   25a6c:	b580      	push	{r7, lr}
   25a6e:	b084      	sub	sp, #16
   25a70:	af00      	add	r7, sp, #0
   25a72:	0002      	movs	r2, r0
   25a74:	1dfb      	adds	r3, r7, #7
   25a76:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   25a78:	230f      	movs	r3, #15
   25a7a:	18fb      	adds	r3, r7, r3
   25a7c:	2201      	movs	r2, #1
   25a7e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   25a80:	1dfb      	adds	r3, r7, #7
   25a82:	781b      	ldrb	r3, [r3, #0]
   25a84:	2bcf      	cmp	r3, #207	; 0xcf
   25a86:	d007      	beq.n	25a98 <spi_cmd_rsp+0x2c>
   25a88:	1dfb      	adds	r3, r7, #7
   25a8a:	781b      	ldrb	r3, [r3, #0]
   25a8c:	2bc5      	cmp	r3, #197	; 0xc5
   25a8e:	d003      	beq.n	25a98 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   25a90:	1dfb      	adds	r3, r7, #7
   25a92:	781b      	ldrb	r3, [r3, #0]
   25a94:	2bc6      	cmp	r3, #198	; 0xc6
   25a96:	d10c      	bne.n	25ab2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25a98:	230d      	movs	r3, #13
   25a9a:	18fb      	adds	r3, r7, r3
   25a9c:	2101      	movs	r1, #1
   25a9e:	0018      	movs	r0, r3
   25aa0:	4b3b      	ldr	r3, [pc, #236]	; (25b90 <spi_cmd_rsp+0x124>)
   25aa2:	4798      	blx	r3
   25aa4:	1e03      	subs	r3, r0, #0
   25aa6:	d004      	beq.n	25ab2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   25aa8:	230f      	movs	r3, #15
   25aaa:	18fb      	adds	r3, r7, r3
   25aac:	2200      	movs	r2, #0
   25aae:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25ab0:	e065      	b.n	25b7e <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   25ab2:	230e      	movs	r3, #14
   25ab4:	18fb      	adds	r3, r7, r3
   25ab6:	220a      	movs	r2, #10
   25ab8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25aba:	230d      	movs	r3, #13
   25abc:	18fb      	adds	r3, r7, r3
   25abe:	2101      	movs	r1, #1
   25ac0:	0018      	movs	r0, r3
   25ac2:	4b33      	ldr	r3, [pc, #204]	; (25b90 <spi_cmd_rsp+0x124>)
   25ac4:	4798      	blx	r3
   25ac6:	1e03      	subs	r3, r0, #0
   25ac8:	d014      	beq.n	25af4 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   25aca:	235c      	movs	r3, #92	; 0x5c
   25acc:	33ff      	adds	r3, #255	; 0xff
   25ace:	001a      	movs	r2, r3
   25ad0:	4930      	ldr	r1, [pc, #192]	; (25b94 <spi_cmd_rsp+0x128>)
   25ad2:	4b31      	ldr	r3, [pc, #196]	; (25b98 <spi_cmd_rsp+0x12c>)
   25ad4:	0018      	movs	r0, r3
   25ad6:	4b31      	ldr	r3, [pc, #196]	; (25b9c <spi_cmd_rsp+0x130>)
   25ad8:	4798      	blx	r3
   25ada:	4b31      	ldr	r3, [pc, #196]	; (25ba0 <spi_cmd_rsp+0x134>)
   25adc:	0018      	movs	r0, r3
   25ade:	4b2f      	ldr	r3, [pc, #188]	; (25b9c <spi_cmd_rsp+0x130>)
   25ae0:	4798      	blx	r3
   25ae2:	4b30      	ldr	r3, [pc, #192]	; (25ba4 <spi_cmd_rsp+0x138>)
   25ae4:	0018      	movs	r0, r3
   25ae6:	4b2d      	ldr	r3, [pc, #180]	; (25b9c <spi_cmd_rsp+0x130>)
   25ae8:	4798      	blx	r3
			result = N_FAIL;
   25aea:	230f      	movs	r3, #15
   25aec:	18fb      	adds	r3, r7, r3
   25aee:	2200      	movs	r2, #0
   25af0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25af2:	e044      	b.n	25b7e <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   25af4:	230d      	movs	r3, #13
   25af6:	18fb      	adds	r3, r7, r3
   25af8:	781b      	ldrb	r3, [r3, #0]
   25afa:	1dfa      	adds	r2, r7, #7
   25afc:	7812      	ldrb	r2, [r2, #0]
   25afe:	429a      	cmp	r2, r3
   25b00:	d00b      	beq.n	25b1a <spi_cmd_rsp+0xae>
   25b02:	230e      	movs	r3, #14
   25b04:	18fb      	adds	r3, r7, r3
   25b06:	781b      	ldrb	r3, [r3, #0]
   25b08:	b25b      	sxtb	r3, r3
   25b0a:	b2da      	uxtb	r2, r3
   25b0c:	3a01      	subs	r2, #1
   25b0e:	b2d1      	uxtb	r1, r2
   25b10:	220e      	movs	r2, #14
   25b12:	18ba      	adds	r2, r7, r2
   25b14:	7011      	strb	r1, [r2, #0]
   25b16:	2b00      	cmp	r3, #0
   25b18:	dccf      	bgt.n	25aba <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   25b1a:	230e      	movs	r3, #14
   25b1c:	18fb      	adds	r3, r7, r3
   25b1e:	220a      	movs	r2, #10
   25b20:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25b22:	230d      	movs	r3, #13
   25b24:	18fb      	adds	r3, r7, r3
   25b26:	2101      	movs	r1, #1
   25b28:	0018      	movs	r0, r3
   25b2a:	4b19      	ldr	r3, [pc, #100]	; (25b90 <spi_cmd_rsp+0x124>)
   25b2c:	4798      	blx	r3
   25b2e:	1e03      	subs	r3, r0, #0
   25b30:	d014      	beq.n	25b5c <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   25b32:	236a      	movs	r3, #106	; 0x6a
   25b34:	33ff      	adds	r3, #255	; 0xff
   25b36:	001a      	movs	r2, r3
   25b38:	4916      	ldr	r1, [pc, #88]	; (25b94 <spi_cmd_rsp+0x128>)
   25b3a:	4b17      	ldr	r3, [pc, #92]	; (25b98 <spi_cmd_rsp+0x12c>)
   25b3c:	0018      	movs	r0, r3
   25b3e:	4b17      	ldr	r3, [pc, #92]	; (25b9c <spi_cmd_rsp+0x130>)
   25b40:	4798      	blx	r3
   25b42:	4b17      	ldr	r3, [pc, #92]	; (25ba0 <spi_cmd_rsp+0x134>)
   25b44:	0018      	movs	r0, r3
   25b46:	4b15      	ldr	r3, [pc, #84]	; (25b9c <spi_cmd_rsp+0x130>)
   25b48:	4798      	blx	r3
   25b4a:	4b16      	ldr	r3, [pc, #88]	; (25ba4 <spi_cmd_rsp+0x138>)
   25b4c:	0018      	movs	r0, r3
   25b4e:	4b13      	ldr	r3, [pc, #76]	; (25b9c <spi_cmd_rsp+0x130>)
   25b50:	4798      	blx	r3
			result = N_FAIL;
   25b52:	230f      	movs	r3, #15
   25b54:	18fb      	adds	r3, r7, r3
   25b56:	2200      	movs	r2, #0
   25b58:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25b5a:	e010      	b.n	25b7e <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   25b5c:	230d      	movs	r3, #13
   25b5e:	18fb      	adds	r3, r7, r3
   25b60:	781b      	ldrb	r3, [r3, #0]
   25b62:	2b00      	cmp	r3, #0
   25b64:	d00b      	beq.n	25b7e <spi_cmd_rsp+0x112>
   25b66:	230e      	movs	r3, #14
   25b68:	18fb      	adds	r3, r7, r3
   25b6a:	781b      	ldrb	r3, [r3, #0]
   25b6c:	b25b      	sxtb	r3, r3
   25b6e:	b2da      	uxtb	r2, r3
   25b70:	3a01      	subs	r2, #1
   25b72:	b2d1      	uxtb	r1, r2
   25b74:	220e      	movs	r2, #14
   25b76:	18ba      	adds	r2, r7, r2
   25b78:	7011      	strb	r1, [r2, #0]
   25b7a:	2b00      	cmp	r3, #0
   25b7c:	dcd1      	bgt.n	25b22 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   25b7e:	230f      	movs	r3, #15
   25b80:	18fb      	adds	r3, r7, r3
   25b82:	781b      	ldrb	r3, [r3, #0]
   25b84:	b25b      	sxtb	r3, r3
}
   25b86:	0018      	movs	r0, r3
   25b88:	46bd      	mov	sp, r7
   25b8a:	b004      	add	sp, #16
   25b8c:	bd80      	pop	{r7, pc}
   25b8e:	46c0      	nop			; (mov r8, r8)
   25b90:	000254e1 	.word	0x000254e1
   25b94:	0003c424 	.word	0x0003c424
   25b98:	0003be1c 	.word	0x0003be1c
   25b9c:	00020109 	.word	0x00020109
   25ba0:	0003beb0 	.word	0x0003beb0
   25ba4:	0003be5c 	.word	0x0003be5c

00025ba8 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   25ba8:	b590      	push	{r4, r7, lr}
   25baa:	b09f      	sub	sp, #124	; 0x7c
   25bac:	af00      	add	r7, sp, #0
   25bae:	60b9      	str	r1, [r7, #8]
   25bb0:	607a      	str	r2, [r7, #4]
   25bb2:	603b      	str	r3, [r7, #0]
   25bb4:	230f      	movs	r3, #15
   25bb6:	18fb      	adds	r3, r7, r3
   25bb8:	1c02      	adds	r2, r0, #0
   25bba:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   25bbc:	2300      	movs	r3, #0
   25bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   25bc0:	2301      	movs	r3, #1
   25bc2:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   25bc4:	2338      	movs	r3, #56	; 0x38
   25bc6:	18fb      	adds	r3, r7, r3
   25bc8:	220f      	movs	r2, #15
   25bca:	18ba      	adds	r2, r7, r2
   25bcc:	7812      	ldrb	r2, [r2, #0]
   25bce:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   25bd0:	230f      	movs	r3, #15
   25bd2:	18fb      	adds	r3, r7, r3
   25bd4:	781b      	ldrb	r3, [r3, #0]
   25bd6:	3bc1      	subs	r3, #193	; 0xc1
   25bd8:	2b0e      	cmp	r3, #14
   25bda:	d900      	bls.n	25bde <spi_cmd_complete+0x36>
   25bdc:	e103      	b.n	25de6 <spi_cmd_complete+0x23e>
   25bde:	009a      	lsls	r2, r3, #2
   25be0:	4bd1      	ldr	r3, [pc, #836]	; (25f28 <spi_cmd_complete+0x380>)
   25be2:	18d3      	adds	r3, r2, r3
   25be4:	681b      	ldr	r3, [r3, #0]
   25be6:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   25be8:	68bb      	ldr	r3, [r7, #8]
   25bea:	0c1b      	lsrs	r3, r3, #16
   25bec:	b2da      	uxtb	r2, r3
   25bee:	2338      	movs	r3, #56	; 0x38
   25bf0:	18fb      	adds	r3, r7, r3
   25bf2:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25bf4:	68bb      	ldr	r3, [r7, #8]
   25bf6:	0a1b      	lsrs	r3, r3, #8
   25bf8:	b2da      	uxtb	r2, r3
   25bfa:	2338      	movs	r3, #56	; 0x38
   25bfc:	18fb      	adds	r3, r7, r3
   25bfe:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25c00:	68bb      	ldr	r3, [r7, #8]
   25c02:	b2da      	uxtb	r2, r3
   25c04:	2338      	movs	r3, #56	; 0x38
   25c06:	18fb      	adds	r3, r7, r3
   25c08:	70da      	strb	r2, [r3, #3]
		len = 5;
   25c0a:	2305      	movs	r3, #5
   25c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   25c0e:	e0ed      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   25c10:	68bb      	ldr	r3, [r7, #8]
   25c12:	0a1b      	lsrs	r3, r3, #8
   25c14:	b2da      	uxtb	r2, r3
   25c16:	2338      	movs	r3, #56	; 0x38
   25c18:	18fb      	adds	r3, r7, r3
   25c1a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   25c1c:	2388      	movs	r3, #136	; 0x88
   25c1e:	18fb      	adds	r3, r7, r3
   25c20:	781b      	ldrb	r3, [r3, #0]
   25c22:	2b01      	cmp	r3, #1
   25c24:	d109      	bne.n	25c3a <spi_cmd_complete+0x92>
   25c26:	2338      	movs	r3, #56	; 0x38
   25c28:	18fb      	adds	r3, r7, r3
   25c2a:	785b      	ldrb	r3, [r3, #1]
   25c2c:	2280      	movs	r2, #128	; 0x80
   25c2e:	4252      	negs	r2, r2
   25c30:	4313      	orrs	r3, r2
   25c32:	b2da      	uxtb	r2, r3
   25c34:	2338      	movs	r3, #56	; 0x38
   25c36:	18fb      	adds	r3, r7, r3
   25c38:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   25c3a:	68bb      	ldr	r3, [r7, #8]
   25c3c:	b2da      	uxtb	r2, r3
   25c3e:	2338      	movs	r3, #56	; 0x38
   25c40:	18fb      	adds	r3, r7, r3
   25c42:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25c44:	2338      	movs	r3, #56	; 0x38
   25c46:	18fb      	adds	r3, r7, r3
   25c48:	2200      	movs	r2, #0
   25c4a:	70da      	strb	r2, [r3, #3]
		len = 5;
   25c4c:	2305      	movs	r3, #5
   25c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25c50:	e0cc      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   25c52:	2338      	movs	r3, #56	; 0x38
   25c54:	18fb      	adds	r3, r7, r3
   25c56:	2200      	movs	r2, #0
   25c58:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25c5a:	2338      	movs	r3, #56	; 0x38
   25c5c:	18fb      	adds	r3, r7, r3
   25c5e:	2200      	movs	r2, #0
   25c60:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25c62:	2338      	movs	r3, #56	; 0x38
   25c64:	18fb      	adds	r3, r7, r3
   25c66:	2200      	movs	r2, #0
   25c68:	70da      	strb	r2, [r3, #3]
		len = 5;
   25c6a:	2305      	movs	r3, #5
   25c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25c6e:	e0bd      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   25c70:	2338      	movs	r3, #56	; 0x38
   25c72:	18fb      	adds	r3, r7, r3
   25c74:	2200      	movs	r2, #0
   25c76:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25c78:	2338      	movs	r3, #56	; 0x38
   25c7a:	18fb      	adds	r3, r7, r3
   25c7c:	2200      	movs	r2, #0
   25c7e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25c80:	2338      	movs	r3, #56	; 0x38
   25c82:	18fb      	adds	r3, r7, r3
   25c84:	2200      	movs	r2, #0
   25c86:	70da      	strb	r2, [r3, #3]
		len = 5;
   25c88:	2305      	movs	r3, #5
   25c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25c8c:	e0ae      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   25c8e:	2338      	movs	r3, #56	; 0x38
   25c90:	18fb      	adds	r3, r7, r3
   25c92:	22ff      	movs	r2, #255	; 0xff
   25c94:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   25c96:	2338      	movs	r3, #56	; 0x38
   25c98:	18fb      	adds	r3, r7, r3
   25c9a:	22ff      	movs	r2, #255	; 0xff
   25c9c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   25c9e:	2338      	movs	r3, #56	; 0x38
   25ca0:	18fb      	adds	r3, r7, r3
   25ca2:	22ff      	movs	r2, #255	; 0xff
   25ca4:	70da      	strb	r2, [r3, #3]
		len = 5;
   25ca6:	2305      	movs	r3, #5
   25ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25caa:	e09f      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   25cac:	68bb      	ldr	r3, [r7, #8]
   25cae:	0c1b      	lsrs	r3, r3, #16
   25cb0:	b2da      	uxtb	r2, r3
   25cb2:	2338      	movs	r3, #56	; 0x38
   25cb4:	18fb      	adds	r3, r7, r3
   25cb6:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25cb8:	68bb      	ldr	r3, [r7, #8]
   25cba:	0a1b      	lsrs	r3, r3, #8
   25cbc:	b2da      	uxtb	r2, r3
   25cbe:	2338      	movs	r3, #56	; 0x38
   25cc0:	18fb      	adds	r3, r7, r3
   25cc2:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25cc4:	68bb      	ldr	r3, [r7, #8]
   25cc6:	b2da      	uxtb	r2, r3
   25cc8:	2338      	movs	r3, #56	; 0x38
   25cca:	18fb      	adds	r3, r7, r3
   25ccc:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   25cce:	683b      	ldr	r3, [r7, #0]
   25cd0:	0a1b      	lsrs	r3, r3, #8
   25cd2:	b2da      	uxtb	r2, r3
   25cd4:	2338      	movs	r3, #56	; 0x38
   25cd6:	18fb      	adds	r3, r7, r3
   25cd8:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   25cda:	683b      	ldr	r3, [r7, #0]
   25cdc:	b2da      	uxtb	r2, r3
   25cde:	2338      	movs	r3, #56	; 0x38
   25ce0:	18fb      	adds	r3, r7, r3
   25ce2:	715a      	strb	r2, [r3, #5]
		len = 7;
   25ce4:	2307      	movs	r3, #7
   25ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25ce8:	e080      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   25cea:	68bb      	ldr	r3, [r7, #8]
   25cec:	0c1b      	lsrs	r3, r3, #16
   25cee:	b2da      	uxtb	r2, r3
   25cf0:	2338      	movs	r3, #56	; 0x38
   25cf2:	18fb      	adds	r3, r7, r3
   25cf4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25cf6:	68bb      	ldr	r3, [r7, #8]
   25cf8:	0a1b      	lsrs	r3, r3, #8
   25cfa:	b2da      	uxtb	r2, r3
   25cfc:	2338      	movs	r3, #56	; 0x38
   25cfe:	18fb      	adds	r3, r7, r3
   25d00:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25d02:	68bb      	ldr	r3, [r7, #8]
   25d04:	b2da      	uxtb	r2, r3
   25d06:	2338      	movs	r3, #56	; 0x38
   25d08:	18fb      	adds	r3, r7, r3
   25d0a:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   25d0c:	683b      	ldr	r3, [r7, #0]
   25d0e:	0c1b      	lsrs	r3, r3, #16
   25d10:	b2da      	uxtb	r2, r3
   25d12:	2338      	movs	r3, #56	; 0x38
   25d14:	18fb      	adds	r3, r7, r3
   25d16:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   25d18:	683b      	ldr	r3, [r7, #0]
   25d1a:	0a1b      	lsrs	r3, r3, #8
   25d1c:	b2da      	uxtb	r2, r3
   25d1e:	2338      	movs	r3, #56	; 0x38
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   25d24:	683b      	ldr	r3, [r7, #0]
   25d26:	b2da      	uxtb	r2, r3
   25d28:	2338      	movs	r3, #56	; 0x38
   25d2a:	18fb      	adds	r3, r7, r3
   25d2c:	719a      	strb	r2, [r3, #6]
		len = 8;
   25d2e:	2308      	movs	r3, #8
   25d30:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25d32:	e05b      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   25d34:	68bb      	ldr	r3, [r7, #8]
   25d36:	0a1b      	lsrs	r3, r3, #8
   25d38:	b2da      	uxtb	r2, r3
   25d3a:	2338      	movs	r3, #56	; 0x38
   25d3c:	18fb      	adds	r3, r7, r3
   25d3e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   25d40:	2388      	movs	r3, #136	; 0x88
   25d42:	18fb      	adds	r3, r7, r3
   25d44:	781b      	ldrb	r3, [r3, #0]
   25d46:	2b01      	cmp	r3, #1
   25d48:	d109      	bne.n	25d5e <spi_cmd_complete+0x1b6>
   25d4a:	2338      	movs	r3, #56	; 0x38
   25d4c:	18fb      	adds	r3, r7, r3
   25d4e:	785b      	ldrb	r3, [r3, #1]
   25d50:	2280      	movs	r2, #128	; 0x80
   25d52:	4252      	negs	r2, r2
   25d54:	4313      	orrs	r3, r2
   25d56:	b2da      	uxtb	r2, r3
   25d58:	2338      	movs	r3, #56	; 0x38
   25d5a:	18fb      	adds	r3, r7, r3
   25d5c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   25d5e:	68bb      	ldr	r3, [r7, #8]
   25d60:	b2da      	uxtb	r2, r3
   25d62:	2338      	movs	r3, #56	; 0x38
   25d64:	18fb      	adds	r3, r7, r3
   25d66:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   25d68:	687b      	ldr	r3, [r7, #4]
   25d6a:	78da      	ldrb	r2, [r3, #3]
   25d6c:	2338      	movs	r3, #56	; 0x38
   25d6e:	18fb      	adds	r3, r7, r3
   25d70:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   25d72:	687b      	ldr	r3, [r7, #4]
   25d74:	789a      	ldrb	r2, [r3, #2]
   25d76:	2338      	movs	r3, #56	; 0x38
   25d78:	18fb      	adds	r3, r7, r3
   25d7a:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   25d7c:	687b      	ldr	r3, [r7, #4]
   25d7e:	785a      	ldrb	r2, [r3, #1]
   25d80:	2338      	movs	r3, #56	; 0x38
   25d82:	18fb      	adds	r3, r7, r3
   25d84:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   25d86:	687b      	ldr	r3, [r7, #4]
   25d88:	781a      	ldrb	r2, [r3, #0]
   25d8a:	2338      	movs	r3, #56	; 0x38
   25d8c:	18fb      	adds	r3, r7, r3
   25d8e:	719a      	strb	r2, [r3, #6]
		len = 8;
   25d90:	2308      	movs	r3, #8
   25d92:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25d94:	e02a      	b.n	25dec <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   25d96:	68bb      	ldr	r3, [r7, #8]
   25d98:	0c1b      	lsrs	r3, r3, #16
   25d9a:	b2da      	uxtb	r2, r3
   25d9c:	2338      	movs	r3, #56	; 0x38
   25d9e:	18fb      	adds	r3, r7, r3
   25da0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25da2:	68bb      	ldr	r3, [r7, #8]
   25da4:	0a1b      	lsrs	r3, r3, #8
   25da6:	b2da      	uxtb	r2, r3
   25da8:	2338      	movs	r3, #56	; 0x38
   25daa:	18fb      	adds	r3, r7, r3
   25dac:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   25dae:	68bb      	ldr	r3, [r7, #8]
   25db0:	b2da      	uxtb	r2, r3
   25db2:	2338      	movs	r3, #56	; 0x38
   25db4:	18fb      	adds	r3, r7, r3
   25db6:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   25db8:	687b      	ldr	r3, [r7, #4]
   25dba:	78da      	ldrb	r2, [r3, #3]
   25dbc:	2338      	movs	r3, #56	; 0x38
   25dbe:	18fb      	adds	r3, r7, r3
   25dc0:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   25dc2:	687b      	ldr	r3, [r7, #4]
   25dc4:	789a      	ldrb	r2, [r3, #2]
   25dc6:	2338      	movs	r3, #56	; 0x38
   25dc8:	18fb      	adds	r3, r7, r3
   25dca:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   25dcc:	687b      	ldr	r3, [r7, #4]
   25dce:	785a      	ldrb	r2, [r3, #1]
   25dd0:	2338      	movs	r3, #56	; 0x38
   25dd2:	18fb      	adds	r3, r7, r3
   25dd4:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   25dd6:	687b      	ldr	r3, [r7, #4]
   25dd8:	781a      	ldrb	r2, [r3, #0]
   25dda:	2338      	movs	r3, #56	; 0x38
   25ddc:	18fb      	adds	r3, r7, r3
   25dde:	71da      	strb	r2, [r3, #7]
		len = 9;
   25de0:	2309      	movs	r3, #9
   25de2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25de4:	e002      	b.n	25dec <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   25de6:	2300      	movs	r3, #0
   25de8:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   25dea:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   25dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25dee:	2b01      	cmp	r3, #1
   25df0:	d001      	beq.n	25df6 <spi_cmd_complete+0x24e>
		return result;
   25df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25df4:	e33a      	b.n	2646c <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   25df6:	4b4d      	ldr	r3, [pc, #308]	; (25f2c <spi_cmd_complete+0x384>)
   25df8:	781b      	ldrb	r3, [r3, #0]
   25dfa:	2b00      	cmp	r3, #0
   25dfc:	d111      	bne.n	25e22 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   25dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25e00:	1e5c      	subs	r4, r3, #1
   25e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25e04:	3b01      	subs	r3, #1
   25e06:	001a      	movs	r2, r3
   25e08:	2338      	movs	r3, #56	; 0x38
   25e0a:	18fb      	adds	r3, r7, r3
   25e0c:	0019      	movs	r1, r3
   25e0e:	207f      	movs	r0, #127	; 0x7f
   25e10:	4b47      	ldr	r3, [pc, #284]	; (25f30 <spi_cmd_complete+0x388>)
   25e12:	4798      	blx	r3
   25e14:	0003      	movs	r3, r0
   25e16:	18db      	adds	r3, r3, r3
   25e18:	b2da      	uxtb	r2, r3
   25e1a:	2338      	movs	r3, #56	; 0x38
   25e1c:	18fb      	adds	r3, r7, r3
   25e1e:	551a      	strb	r2, [r3, r4]
   25e20:	e002      	b.n	25e28 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   25e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25e24:	3b01      	subs	r3, #1
   25e26:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   25e28:	230f      	movs	r3, #15
   25e2a:	18fb      	adds	r3, r7, r3
   25e2c:	781b      	ldrb	r3, [r3, #0]
   25e2e:	2bcf      	cmp	r3, #207	; 0xcf
   25e30:	d009      	beq.n	25e46 <spi_cmd_complete+0x29e>
   25e32:	230f      	movs	r3, #15
   25e34:	18fb      	adds	r3, r7, r3
   25e36:	781b      	ldrb	r3, [r3, #0]
   25e38:	2bc5      	cmp	r3, #197	; 0xc5
   25e3a:	d004      	beq.n	25e46 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   25e3c:	230f      	movs	r3, #15
   25e3e:	18fb      	adds	r3, r7, r3
   25e40:	781b      	ldrb	r3, [r3, #0]
   25e42:	2bc6      	cmp	r3, #198	; 0xc6
   25e44:	d103      	bne.n	25e4e <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   25e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25e48:	3306      	adds	r3, #6
   25e4a:	673b      	str	r3, [r7, #112]	; 0x70
   25e4c:	e018      	b.n	25e80 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   25e4e:	230f      	movs	r3, #15
   25e50:	18fb      	adds	r3, r7, r3
   25e52:	781b      	ldrb	r3, [r3, #0]
   25e54:	2bc4      	cmp	r3, #196	; 0xc4
   25e56:	d004      	beq.n	25e62 <spi_cmd_complete+0x2ba>
   25e58:	230f      	movs	r3, #15
   25e5a:	18fb      	adds	r3, r7, r3
   25e5c:	781b      	ldrb	r3, [r3, #0]
   25e5e:	2bca      	cmp	r3, #202	; 0xca
   25e60:	d10b      	bne.n	25e7a <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   25e62:	4b32      	ldr	r3, [pc, #200]	; (25f2c <spi_cmd_complete+0x384>)
   25e64:	781b      	ldrb	r3, [r3, #0]
   25e66:	2b00      	cmp	r3, #0
   25e68:	d103      	bne.n	25e72 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   25e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25e6c:	330c      	adds	r3, #12
   25e6e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   25e70:	e006      	b.n	25e80 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   25e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25e74:	330a      	adds	r3, #10
   25e76:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   25e78:	e002      	b.n	25e80 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   25e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25e7c:	3305      	adds	r3, #5
   25e7e:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   25e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25e82:	2b20      	cmp	r3, #32
   25e84:	d914      	bls.n	25eb0 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   25e86:	23f7      	movs	r3, #247	; 0xf7
   25e88:	005a      	lsls	r2, r3, #1
   25e8a:	492a      	ldr	r1, [pc, #168]	; (25f34 <spi_cmd_complete+0x38c>)
   25e8c:	4b2a      	ldr	r3, [pc, #168]	; (25f38 <spi_cmd_complete+0x390>)
   25e8e:	0018      	movs	r0, r3
   25e90:	4b2a      	ldr	r3, [pc, #168]	; (25f3c <spi_cmd_complete+0x394>)
   25e92:	4798      	blx	r3
   25e94:	6f39      	ldr	r1, [r7, #112]	; 0x70
   25e96:	4b2a      	ldr	r3, [pc, #168]	; (25f40 <spi_cmd_complete+0x398>)
   25e98:	2220      	movs	r2, #32
   25e9a:	0018      	movs	r0, r3
   25e9c:	4b27      	ldr	r3, [pc, #156]	; (25f3c <spi_cmd_complete+0x394>)
   25e9e:	4798      	blx	r3
   25ea0:	4b28      	ldr	r3, [pc, #160]	; (25f44 <spi_cmd_complete+0x39c>)
   25ea2:	0018      	movs	r0, r3
   25ea4:	4b25      	ldr	r3, [pc, #148]	; (25f3c <spi_cmd_complete+0x394>)
   25ea6:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   25ea8:	2300      	movs	r3, #0
   25eaa:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   25eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25eae:	e2dd      	b.n	2646c <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   25eb0:	2377      	movs	r3, #119	; 0x77
   25eb2:	18fb      	adds	r3, r7, r3
   25eb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   25eb6:	701a      	strb	r2, [r3, #0]
   25eb8:	e00d      	b.n	25ed6 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   25eba:	2377      	movs	r3, #119	; 0x77
   25ebc:	18fb      	adds	r3, r7, r3
   25ebe:	781b      	ldrb	r3, [r3, #0]
   25ec0:	2238      	movs	r2, #56	; 0x38
   25ec2:	18ba      	adds	r2, r7, r2
   25ec4:	2100      	movs	r1, #0
   25ec6:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   25ec8:	2377      	movs	r3, #119	; 0x77
   25eca:	18fb      	adds	r3, r7, r3
   25ecc:	781a      	ldrb	r2, [r3, #0]
   25ece:	2377      	movs	r3, #119	; 0x77
   25ed0:	18fb      	adds	r3, r7, r3
   25ed2:	3201      	adds	r2, #1
   25ed4:	701a      	strb	r2, [r3, #0]
   25ed6:	2377      	movs	r3, #119	; 0x77
   25ed8:	18fb      	adds	r3, r7, r3
   25eda:	781a      	ldrb	r2, [r3, #0]
   25edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25ede:	429a      	cmp	r2, r3
   25ee0:	d3eb      	bcc.n	25eba <spi_cmd_complete+0x312>
	}
	rix = len;
   25ee2:	2376      	movs	r3, #118	; 0x76
   25ee4:	18fb      	adds	r3, r7, r3
   25ee6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   25ee8:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   25eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25eec:	b29a      	uxth	r2, r3
   25eee:	2318      	movs	r3, #24
   25ef0:	18f9      	adds	r1, r7, r3
   25ef2:	2338      	movs	r3, #56	; 0x38
   25ef4:	18fb      	adds	r3, r7, r3
   25ef6:	0018      	movs	r0, r3
   25ef8:	4b13      	ldr	r3, [pc, #76]	; (25f48 <spi_cmd_complete+0x3a0>)
   25efa:	4798      	blx	r3
   25efc:	1e03      	subs	r3, r0, #0
   25efe:	d027      	beq.n	25f50 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   25f00:	23fa      	movs	r3, #250	; 0xfa
   25f02:	33ff      	adds	r3, #255	; 0xff
   25f04:	001a      	movs	r2, r3
   25f06:	490b      	ldr	r1, [pc, #44]	; (25f34 <spi_cmd_complete+0x38c>)
   25f08:	4b0b      	ldr	r3, [pc, #44]	; (25f38 <spi_cmd_complete+0x390>)
   25f0a:	0018      	movs	r0, r3
   25f0c:	4b0b      	ldr	r3, [pc, #44]	; (25f3c <spi_cmd_complete+0x394>)
   25f0e:	4798      	blx	r3
   25f10:	4b0e      	ldr	r3, [pc, #56]	; (25f4c <spi_cmd_complete+0x3a4>)
   25f12:	0018      	movs	r0, r3
   25f14:	4b09      	ldr	r3, [pc, #36]	; (25f3c <spi_cmd_complete+0x394>)
   25f16:	4798      	blx	r3
   25f18:	4b0a      	ldr	r3, [pc, #40]	; (25f44 <spi_cmd_complete+0x39c>)
   25f1a:	0018      	movs	r0, r3
   25f1c:	4b07      	ldr	r3, [pc, #28]	; (25f3c <spi_cmd_complete+0x394>)
   25f1e:	4798      	blx	r3
		result = N_FAIL;
   25f20:	2300      	movs	r3, #0
   25f22:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   25f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25f26:	e2a1      	b.n	2646c <spi_cmd_complete+0x8c4>
   25f28:	0003c3d0 	.word	0x0003c3d0
   25f2c:	20004110 	.word	0x20004110
   25f30:	000255dd 	.word	0x000255dd
   25f34:	0003c430 	.word	0x0003c430
   25f38:	0003be1c 	.word	0x0003be1c
   25f3c:	00020109 	.word	0x00020109
   25f40:	0003bee4 	.word	0x0003bee4
   25f44:	0003be5c 	.word	0x0003be5c
   25f48:	00025569 	.word	0x00025569
   25f4c:	0003be30 	.word	0x0003be30
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   25f50:	230f      	movs	r3, #15
   25f52:	18fb      	adds	r3, r7, r3
   25f54:	781b      	ldrb	r3, [r3, #0]
   25f56:	2bcf      	cmp	r3, #207	; 0xcf
   25f58:	d009      	beq.n	25f6e <spi_cmd_complete+0x3c6>
   25f5a:	230f      	movs	r3, #15
   25f5c:	18fb      	adds	r3, r7, r3
   25f5e:	781b      	ldrb	r3, [r3, #0]
   25f60:	2bc5      	cmp	r3, #197	; 0xc5
   25f62:	d004      	beq.n	25f6e <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   25f64:	230f      	movs	r3, #15
   25f66:	18fb      	adds	r3, r7, r3
   25f68:	781b      	ldrb	r3, [r3, #0]
   25f6a:	2bc6      	cmp	r3, #198	; 0xc6
   25f6c:	d106      	bne.n	25f7c <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   25f6e:	2376      	movs	r3, #118	; 0x76
   25f70:	18fb      	adds	r3, r7, r3
   25f72:	781a      	ldrb	r2, [r3, #0]
   25f74:	2376      	movs	r3, #118	; 0x76
   25f76:	18fb      	adds	r3, r7, r3
   25f78:	3201      	adds	r2, #1
   25f7a:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   25f7c:	2376      	movs	r3, #118	; 0x76
   25f7e:	18fb      	adds	r3, r7, r3
   25f80:	781b      	ldrb	r3, [r3, #0]
   25f82:	2276      	movs	r2, #118	; 0x76
   25f84:	18ba      	adds	r2, r7, r2
   25f86:	1c59      	adds	r1, r3, #1
   25f88:	7011      	strb	r1, [r2, #0]
   25f8a:	001a      	movs	r2, r3
   25f8c:	2318      	movs	r3, #24
   25f8e:	18fb      	adds	r3, r7, r3
   25f90:	5c9a      	ldrb	r2, [r3, r2]
   25f92:	2317      	movs	r3, #23
   25f94:	18fb      	adds	r3, r7, r3
   25f96:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   25f98:	2317      	movs	r3, #23
   25f9a:	18fb      	adds	r3, r7, r3
   25f9c:	781b      	ldrb	r3, [r3, #0]
   25f9e:	220f      	movs	r2, #15
   25fa0:	18ba      	adds	r2, r7, r2
   25fa2:	7812      	ldrb	r2, [r2, #0]
   25fa4:	429a      	cmp	r2, r3
   25fa6:	d018      	beq.n	25fda <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   25fa8:	4add      	ldr	r2, [pc, #884]	; (26320 <spi_cmd_complete+0x778>)
   25faa:	49de      	ldr	r1, [pc, #888]	; (26324 <spi_cmd_complete+0x77c>)
   25fac:	4bde      	ldr	r3, [pc, #888]	; (26328 <spi_cmd_complete+0x780>)
   25fae:	0018      	movs	r0, r3
   25fb0:	4bde      	ldr	r3, [pc, #888]	; (2632c <spi_cmd_complete+0x784>)
   25fb2:	4798      	blx	r3
   25fb4:	230f      	movs	r3, #15
   25fb6:	18fb      	adds	r3, r7, r3
   25fb8:	7819      	ldrb	r1, [r3, #0]
   25fba:	2317      	movs	r3, #23
   25fbc:	18fb      	adds	r3, r7, r3
   25fbe:	781b      	ldrb	r3, [r3, #0]
   25fc0:	001a      	movs	r2, r3
   25fc2:	4bdb      	ldr	r3, [pc, #876]	; (26330 <spi_cmd_complete+0x788>)
   25fc4:	0018      	movs	r0, r3
   25fc6:	4bd9      	ldr	r3, [pc, #868]	; (2632c <spi_cmd_complete+0x784>)
   25fc8:	4798      	blx	r3
   25fca:	4bda      	ldr	r3, [pc, #872]	; (26334 <spi_cmd_complete+0x78c>)
   25fcc:	0018      	movs	r0, r3
   25fce:	4bd7      	ldr	r3, [pc, #860]	; (2632c <spi_cmd_complete+0x784>)
   25fd0:	4798      	blx	r3
		result = N_FAIL;
   25fd2:	2300      	movs	r3, #0
   25fd4:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   25fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25fd8:	e248      	b.n	2646c <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   25fda:	2376      	movs	r3, #118	; 0x76
   25fdc:	18fb      	adds	r3, r7, r3
   25fde:	781b      	ldrb	r3, [r3, #0]
   25fe0:	2276      	movs	r2, #118	; 0x76
   25fe2:	18ba      	adds	r2, r7, r2
   25fe4:	1c59      	adds	r1, r3, #1
   25fe6:	7011      	strb	r1, [r2, #0]
   25fe8:	001a      	movs	r2, r3
   25fea:	2318      	movs	r3, #24
   25fec:	18fb      	adds	r3, r7, r3
   25fee:	5c9a      	ldrb	r2, [r3, r2]
   25ff0:	2317      	movs	r3, #23
   25ff2:	18fb      	adds	r3, r7, r3
   25ff4:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   25ff6:	2317      	movs	r3, #23
   25ff8:	18fb      	adds	r3, r7, r3
   25ffa:	781b      	ldrb	r3, [r3, #0]
   25ffc:	2b00      	cmp	r3, #0
   25ffe:	d016      	beq.n	2602e <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   26000:	4acd      	ldr	r2, [pc, #820]	; (26338 <spi_cmd_complete+0x790>)
   26002:	49c8      	ldr	r1, [pc, #800]	; (26324 <spi_cmd_complete+0x77c>)
   26004:	4bc8      	ldr	r3, [pc, #800]	; (26328 <spi_cmd_complete+0x780>)
   26006:	0018      	movs	r0, r3
   26008:	4bc8      	ldr	r3, [pc, #800]	; (2632c <spi_cmd_complete+0x784>)
   2600a:	4798      	blx	r3
   2600c:	2317      	movs	r3, #23
   2600e:	18fb      	adds	r3, r7, r3
   26010:	781b      	ldrb	r3, [r3, #0]
   26012:	001a      	movs	r2, r3
   26014:	4bc9      	ldr	r3, [pc, #804]	; (2633c <spi_cmd_complete+0x794>)
   26016:	0011      	movs	r1, r2
   26018:	0018      	movs	r0, r3
   2601a:	4bc4      	ldr	r3, [pc, #784]	; (2632c <spi_cmd_complete+0x784>)
   2601c:	4798      	blx	r3
   2601e:	4bc5      	ldr	r3, [pc, #788]	; (26334 <spi_cmd_complete+0x78c>)
   26020:	0018      	movs	r0, r3
   26022:	4bc2      	ldr	r3, [pc, #776]	; (2632c <spi_cmd_complete+0x784>)
   26024:	4798      	blx	r3
		result = N_FAIL;
   26026:	2300      	movs	r3, #0
   26028:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2602a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2602c:	e21e      	b.n	2646c <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   2602e:	230f      	movs	r3, #15
   26030:	18fb      	adds	r3, r7, r3
   26032:	781b      	ldrb	r3, [r3, #0]
   26034:	2bc4      	cmp	r3, #196	; 0xc4
   26036:	d00f      	beq.n	26058 <spi_cmd_complete+0x4b0>
   26038:	230f      	movs	r3, #15
   2603a:	18fb      	adds	r3, r7, r3
   2603c:	781b      	ldrb	r3, [r3, #0]
   2603e:	2bca      	cmp	r3, #202	; 0xca
   26040:	d00a      	beq.n	26058 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26042:	230f      	movs	r3, #15
   26044:	18fb      	adds	r3, r7, r3
   26046:	781b      	ldrb	r3, [r3, #0]
   26048:	2bc2      	cmp	r3, #194	; 0xc2
   2604a:	d005      	beq.n	26058 <spi_cmd_complete+0x4b0>
   2604c:	230f      	movs	r3, #15
   2604e:	18fb      	adds	r3, r7, r3
   26050:	781b      	ldrb	r3, [r3, #0]
   26052:	2bc8      	cmp	r3, #200	; 0xc8
   26054:	d000      	beq.n	26058 <spi_cmd_complete+0x4b0>
   26056:	e208      	b.n	2646a <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   26058:	230a      	movs	r3, #10
   2605a:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   2605c:	2376      	movs	r3, #118	; 0x76
   2605e:	18fb      	adds	r3, r7, r3
   26060:	781a      	ldrb	r2, [r3, #0]
   26062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26064:	429a      	cmp	r2, r3
   26066:	d218      	bcs.n	2609a <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   26068:	2376      	movs	r3, #118	; 0x76
   2606a:	18fb      	adds	r3, r7, r3
   2606c:	781b      	ldrb	r3, [r3, #0]
   2606e:	2276      	movs	r2, #118	; 0x76
   26070:	18ba      	adds	r2, r7, r2
   26072:	1c59      	adds	r1, r3, #1
   26074:	7011      	strb	r1, [r2, #0]
   26076:	001a      	movs	r2, r3
   26078:	2318      	movs	r3, #24
   2607a:	18fb      	adds	r3, r7, r3
   2607c:	5c9a      	ldrb	r2, [r3, r2]
   2607e:	2317      	movs	r3, #23
   26080:	18fb      	adds	r3, r7, r3
   26082:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   26084:	2317      	movs	r3, #23
   26086:	18fb      	adds	r3, r7, r3
   26088:	781b      	ldrb	r3, [r3, #0]
   2608a:	091b      	lsrs	r3, r3, #4
   2608c:	b2db      	uxtb	r3, r3
   2608e:	001a      	movs	r2, r3
   26090:	230f      	movs	r3, #15
   26092:	4013      	ands	r3, r2
   26094:	2b0f      	cmp	r3, #15
   26096:	d103      	bne.n	260a0 <spi_cmd_complete+0x4f8>
					break;
   26098:	e007      	b.n	260aa <spi_cmd_complete+0x502>
					retry = 0;
   2609a:	2300      	movs	r3, #0
   2609c:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   2609e:	e004      	b.n	260aa <spi_cmd_complete+0x502>
			} while (retry--);
   260a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   260a2:	1e5a      	subs	r2, r3, #1
   260a4:	667a      	str	r2, [r7, #100]	; 0x64
   260a6:	2b00      	cmp	r3, #0
   260a8:	d1d8      	bne.n	2605c <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   260aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   260ac:	2b00      	cmp	r3, #0
   260ae:	dc18      	bgt.n	260e2 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   260b0:	2395      	movs	r3, #149	; 0x95
   260b2:	009a      	lsls	r2, r3, #2
   260b4:	499b      	ldr	r1, [pc, #620]	; (26324 <spi_cmd_complete+0x77c>)
   260b6:	4b9c      	ldr	r3, [pc, #624]	; (26328 <spi_cmd_complete+0x780>)
   260b8:	0018      	movs	r0, r3
   260ba:	4b9c      	ldr	r3, [pc, #624]	; (2632c <spi_cmd_complete+0x784>)
   260bc:	4798      	blx	r3
   260be:	2317      	movs	r3, #23
   260c0:	18fb      	adds	r3, r7, r3
   260c2:	781b      	ldrb	r3, [r3, #0]
   260c4:	001a      	movs	r2, r3
   260c6:	4b9e      	ldr	r3, [pc, #632]	; (26340 <spi_cmd_complete+0x798>)
   260c8:	0011      	movs	r1, r2
   260ca:	0018      	movs	r0, r3
   260cc:	4b97      	ldr	r3, [pc, #604]	; (2632c <spi_cmd_complete+0x784>)
   260ce:	4798      	blx	r3
   260d0:	4b98      	ldr	r3, [pc, #608]	; (26334 <spi_cmd_complete+0x78c>)
   260d2:	0018      	movs	r0, r3
   260d4:	4b95      	ldr	r3, [pc, #596]	; (2632c <spi_cmd_complete+0x784>)
   260d6:	4798      	blx	r3
				result = N_RESET;
   260d8:	2301      	movs	r3, #1
   260da:	425b      	negs	r3, r3
   260dc:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   260de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   260e0:	e1c4      	b.n	2646c <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   260e2:	230f      	movs	r3, #15
   260e4:	18fb      	adds	r3, r7, r3
   260e6:	781b      	ldrb	r3, [r3, #0]
   260e8:	2bc4      	cmp	r3, #196	; 0xc4
   260ea:	d005      	beq.n	260f8 <spi_cmd_complete+0x550>
   260ec:	230f      	movs	r3, #15
   260ee:	18fb      	adds	r3, r7, r3
   260f0:	781b      	ldrb	r3, [r3, #0]
   260f2:	2bca      	cmp	r3, #202	; 0xca
   260f4:	d000      	beq.n	260f8 <spi_cmd_complete+0x550>
   260f6:	e08e      	b.n	26216 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   260f8:	2376      	movs	r3, #118	; 0x76
   260fa:	18fb      	adds	r3, r7, r3
   260fc:	781b      	ldrb	r3, [r3, #0]
   260fe:	3303      	adds	r3, #3
   26100:	001a      	movs	r2, r3
   26102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26104:	429a      	cmp	r2, r3
   26106:	d23c      	bcs.n	26182 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   26108:	2376      	movs	r3, #118	; 0x76
   2610a:	18fb      	adds	r3, r7, r3
   2610c:	781b      	ldrb	r3, [r3, #0]
   2610e:	2276      	movs	r2, #118	; 0x76
   26110:	18ba      	adds	r2, r7, r2
   26112:	1c59      	adds	r1, r3, #1
   26114:	7011      	strb	r1, [r2, #0]
   26116:	001a      	movs	r2, r3
   26118:	2318      	movs	r3, #24
   2611a:	18fb      	adds	r3, r7, r3
   2611c:	5c9a      	ldrb	r2, [r3, r2]
   2611e:	687b      	ldr	r3, [r7, #4]
   26120:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   26122:	687b      	ldr	r3, [r7, #4]
   26124:	1c5a      	adds	r2, r3, #1
   26126:	2376      	movs	r3, #118	; 0x76
   26128:	18fb      	adds	r3, r7, r3
   2612a:	781b      	ldrb	r3, [r3, #0]
   2612c:	2176      	movs	r1, #118	; 0x76
   2612e:	1879      	adds	r1, r7, r1
   26130:	1c58      	adds	r0, r3, #1
   26132:	7008      	strb	r0, [r1, #0]
   26134:	0019      	movs	r1, r3
   26136:	2318      	movs	r3, #24
   26138:	18fb      	adds	r3, r7, r3
   2613a:	5c5b      	ldrb	r3, [r3, r1]
   2613c:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   2613e:	687b      	ldr	r3, [r7, #4]
   26140:	1c9a      	adds	r2, r3, #2
   26142:	2376      	movs	r3, #118	; 0x76
   26144:	18fb      	adds	r3, r7, r3
   26146:	781b      	ldrb	r3, [r3, #0]
   26148:	2176      	movs	r1, #118	; 0x76
   2614a:	1879      	adds	r1, r7, r1
   2614c:	1c58      	adds	r0, r3, #1
   2614e:	7008      	strb	r0, [r1, #0]
   26150:	0019      	movs	r1, r3
   26152:	2318      	movs	r3, #24
   26154:	18fb      	adds	r3, r7, r3
   26156:	5c5b      	ldrb	r3, [r3, r1]
   26158:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   2615a:	687b      	ldr	r3, [r7, #4]
   2615c:	1cda      	adds	r2, r3, #3
   2615e:	2376      	movs	r3, #118	; 0x76
   26160:	18fb      	adds	r3, r7, r3
   26162:	781b      	ldrb	r3, [r3, #0]
   26164:	2176      	movs	r1, #118	; 0x76
   26166:	1879      	adds	r1, r7, r1
   26168:	1c58      	adds	r0, r3, #1
   2616a:	7008      	strb	r0, [r1, #0]
   2616c:	0019      	movs	r1, r3
   2616e:	2318      	movs	r3, #24
   26170:	18fb      	adds	r3, r7, r3
   26172:	5c5b      	ldrb	r3, [r3, r1]
   26174:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   26176:	4b73      	ldr	r3, [pc, #460]	; (26344 <spi_cmd_complete+0x79c>)
   26178:	781b      	ldrb	r3, [r3, #0]
   2617a:	2b00      	cmp	r3, #0
   2617c:	d000      	beq.n	26180 <spi_cmd_complete+0x5d8>
   2617e:	e174      	b.n	2646a <spi_cmd_complete+0x8c2>
   26180:	e011      	b.n	261a6 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   26182:	4a71      	ldr	r2, [pc, #452]	; (26348 <spi_cmd_complete+0x7a0>)
   26184:	4967      	ldr	r1, [pc, #412]	; (26324 <spi_cmd_complete+0x77c>)
   26186:	4b68      	ldr	r3, [pc, #416]	; (26328 <spi_cmd_complete+0x780>)
   26188:	0018      	movs	r0, r3
   2618a:	4b68      	ldr	r3, [pc, #416]	; (2632c <spi_cmd_complete+0x784>)
   2618c:	4798      	blx	r3
   2618e:	4b6f      	ldr	r3, [pc, #444]	; (2634c <spi_cmd_complete+0x7a4>)
   26190:	0018      	movs	r0, r3
   26192:	4b66      	ldr	r3, [pc, #408]	; (2632c <spi_cmd_complete+0x784>)
   26194:	4798      	blx	r3
   26196:	4b67      	ldr	r3, [pc, #412]	; (26334 <spi_cmd_complete+0x78c>)
   26198:	0018      	movs	r0, r3
   2619a:	4b64      	ldr	r3, [pc, #400]	; (2632c <spi_cmd_complete+0x784>)
   2619c:	4798      	blx	r3
					result = N_FAIL;
   2619e:	2300      	movs	r3, #0
   261a0:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   261a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   261a4:	e162      	b.n	2646c <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   261a6:	2376      	movs	r3, #118	; 0x76
   261a8:	18fb      	adds	r3, r7, r3
   261aa:	781b      	ldrb	r3, [r3, #0]
   261ac:	3301      	adds	r3, #1
   261ae:	001a      	movs	r2, r3
   261b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   261b2:	429a      	cmp	r2, r3
   261b4:	d21c      	bcs.n	261f0 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   261b6:	2376      	movs	r3, #118	; 0x76
   261b8:	18fb      	adds	r3, r7, r3
   261ba:	781b      	ldrb	r3, [r3, #0]
   261bc:	2276      	movs	r2, #118	; 0x76
   261be:	18ba      	adds	r2, r7, r2
   261c0:	1c59      	adds	r1, r3, #1
   261c2:	7011      	strb	r1, [r2, #0]
   261c4:	001a      	movs	r2, r3
   261c6:	2318      	movs	r3, #24
   261c8:	18fb      	adds	r3, r7, r3
   261ca:	5c9a      	ldrb	r2, [r3, r2]
   261cc:	2314      	movs	r3, #20
   261ce:	18fb      	adds	r3, r7, r3
   261d0:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   261d2:	2376      	movs	r3, #118	; 0x76
   261d4:	18fb      	adds	r3, r7, r3
   261d6:	781b      	ldrb	r3, [r3, #0]
   261d8:	2276      	movs	r2, #118	; 0x76
   261da:	18ba      	adds	r2, r7, r2
   261dc:	1c59      	adds	r1, r3, #1
   261de:	7011      	strb	r1, [r2, #0]
   261e0:	001a      	movs	r2, r3
   261e2:	2318      	movs	r3, #24
   261e4:	18fb      	adds	r3, r7, r3
   261e6:	5c9a      	ldrb	r2, [r3, r2]
   261e8:	2314      	movs	r3, #20
   261ea:	18fb      	adds	r3, r7, r3
   261ec:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   261ee:	e13c      	b.n	2646a <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   261f0:	239c      	movs	r3, #156	; 0x9c
   261f2:	009a      	lsls	r2, r3, #2
   261f4:	494b      	ldr	r1, [pc, #300]	; (26324 <spi_cmd_complete+0x77c>)
   261f6:	4b4c      	ldr	r3, [pc, #304]	; (26328 <spi_cmd_complete+0x780>)
   261f8:	0018      	movs	r0, r3
   261fa:	4b4c      	ldr	r3, [pc, #304]	; (2632c <spi_cmd_complete+0x784>)
   261fc:	4798      	blx	r3
   261fe:	4b54      	ldr	r3, [pc, #336]	; (26350 <spi_cmd_complete+0x7a8>)
   26200:	0018      	movs	r0, r3
   26202:	4b4a      	ldr	r3, [pc, #296]	; (2632c <spi_cmd_complete+0x784>)
   26204:	4798      	blx	r3
   26206:	4b4b      	ldr	r3, [pc, #300]	; (26334 <spi_cmd_complete+0x78c>)
   26208:	0018      	movs	r0, r3
   2620a:	4b48      	ldr	r3, [pc, #288]	; (2632c <spi_cmd_complete+0x784>)
   2620c:	4798      	blx	r3
						result = N_FAIL;
   2620e:	2300      	movs	r3, #0
   26210:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   26212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26214:	e12a      	b.n	2646c <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26216:	230f      	movs	r3, #15
   26218:	18fb      	adds	r3, r7, r3
   2621a:	781b      	ldrb	r3, [r3, #0]
   2621c:	2bc2      	cmp	r3, #194	; 0xc2
   2621e:	d005      	beq.n	2622c <spi_cmd_complete+0x684>
   26220:	230f      	movs	r3, #15
   26222:	18fb      	adds	r3, r7, r3
   26224:	781b      	ldrb	r3, [r3, #0]
   26226:	2bc8      	cmp	r3, #200	; 0xc8
   26228:	d000      	beq.n	2622c <spi_cmd_complete+0x684>
   2622a:	e11e      	b.n	2646a <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   2622c:	2300      	movs	r3, #0
   2622e:	663b      	str	r3, [r7, #96]	; 0x60
   26230:	e011      	b.n	26256 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   26232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26234:	1c5a      	adds	r2, r3, #1
   26236:	663a      	str	r2, [r7, #96]	; 0x60
   26238:	001a      	movs	r2, r3
   2623a:	687b      	ldr	r3, [r7, #4]
   2623c:	189a      	adds	r2, r3, r2
   2623e:	2376      	movs	r3, #118	; 0x76
   26240:	18fb      	adds	r3, r7, r3
   26242:	781b      	ldrb	r3, [r3, #0]
   26244:	2176      	movs	r1, #118	; 0x76
   26246:	1879      	adds	r1, r7, r1
   26248:	1c58      	adds	r0, r3, #1
   2624a:	7008      	strb	r0, [r1, #0]
   2624c:	0019      	movs	r1, r3
   2624e:	2318      	movs	r3, #24
   26250:	18fb      	adds	r3, r7, r3
   26252:	5c5b      	ldrb	r3, [r3, r1]
   26254:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   26256:	2376      	movs	r3, #118	; 0x76
   26258:	18fb      	adds	r3, r7, r3
   2625a:	781a      	ldrb	r2, [r3, #0]
   2625c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2625e:	429a      	cmp	r2, r3
   26260:	d203      	bcs.n	2626a <spi_cmd_complete+0x6c2>
   26262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26264:	683b      	ldr	r3, [r7, #0]
   26266:	429a      	cmp	r2, r3
   26268:	d3e3      	bcc.n	26232 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   2626a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2626c:	683a      	ldr	r2, [r7, #0]
   2626e:	1ad3      	subs	r3, r2, r3
   26270:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   26272:	683b      	ldr	r3, [r7, #0]
   26274:	2b00      	cmp	r3, #0
   26276:	d100      	bne.n	2627a <spi_cmd_complete+0x6d2>
   26278:	e0f1      	b.n	2645e <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   2627a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2627c:	2280      	movs	r2, #128	; 0x80
   2627e:	0192      	lsls	r2, r2, #6
   26280:	1ad3      	subs	r3, r2, r3
   26282:	001a      	movs	r2, r3
   26284:	683b      	ldr	r3, [r7, #0]
   26286:	429a      	cmp	r2, r3
   26288:	d302      	bcc.n	26290 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   2628a:	683b      	ldr	r3, [r7, #0]
   2628c:	65fb      	str	r3, [r7, #92]	; 0x5c
   2628e:	e004      	b.n	2629a <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   26290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26292:	2280      	movs	r2, #128	; 0x80
   26294:	0192      	lsls	r2, r2, #6
   26296:	1ad3      	subs	r3, r2, r3
   26298:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   2629a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2629c:	687a      	ldr	r2, [r7, #4]
   2629e:	18d3      	adds	r3, r2, r3
   262a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   262a2:	b292      	uxth	r2, r2
   262a4:	0011      	movs	r1, r2
   262a6:	0018      	movs	r0, r3
   262a8:	4b2a      	ldr	r3, [pc, #168]	; (26354 <spi_cmd_complete+0x7ac>)
   262aa:	4798      	blx	r3
   262ac:	1e03      	subs	r3, r0, #0
   262ae:	d010      	beq.n	262d2 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   262b0:	4a29      	ldr	r2, [pc, #164]	; (26358 <spi_cmd_complete+0x7b0>)
   262b2:	491c      	ldr	r1, [pc, #112]	; (26324 <spi_cmd_complete+0x77c>)
   262b4:	4b1c      	ldr	r3, [pc, #112]	; (26328 <spi_cmd_complete+0x780>)
   262b6:	0018      	movs	r0, r3
   262b8:	4b1c      	ldr	r3, [pc, #112]	; (2632c <spi_cmd_complete+0x784>)
   262ba:	4798      	blx	r3
   262bc:	4b27      	ldr	r3, [pc, #156]	; (2635c <spi_cmd_complete+0x7b4>)
   262be:	0018      	movs	r0, r3
   262c0:	4b1a      	ldr	r3, [pc, #104]	; (2632c <spi_cmd_complete+0x784>)
   262c2:	4798      	blx	r3
   262c4:	4b1b      	ldr	r3, [pc, #108]	; (26334 <spi_cmd_complete+0x78c>)
   262c6:	0018      	movs	r0, r3
   262c8:	4b18      	ldr	r3, [pc, #96]	; (2632c <spi_cmd_complete+0x784>)
   262ca:	4798      	blx	r3
						result = N_FAIL;
   262cc:	2300      	movs	r3, #0
   262ce:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   262d0:	e0cb      	b.n	2646a <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   262d2:	4b1c      	ldr	r3, [pc, #112]	; (26344 <spi_cmd_complete+0x79c>)
   262d4:	781b      	ldrb	r3, [r3, #0]
   262d6:	2b00      	cmp	r3, #0
   262d8:	d119      	bne.n	2630e <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   262da:	2314      	movs	r3, #20
   262dc:	18fb      	adds	r3, r7, r3
   262de:	2102      	movs	r1, #2
   262e0:	0018      	movs	r0, r3
   262e2:	4b1c      	ldr	r3, [pc, #112]	; (26354 <spi_cmd_complete+0x7ac>)
   262e4:	4798      	blx	r3
   262e6:	1e03      	subs	r3, r0, #0
   262e8:	d011      	beq.n	2630e <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   262ea:	23a6      	movs	r3, #166	; 0xa6
   262ec:	009a      	lsls	r2, r3, #2
   262ee:	490d      	ldr	r1, [pc, #52]	; (26324 <spi_cmd_complete+0x77c>)
   262f0:	4b0d      	ldr	r3, [pc, #52]	; (26328 <spi_cmd_complete+0x780>)
   262f2:	0018      	movs	r0, r3
   262f4:	4b0d      	ldr	r3, [pc, #52]	; (2632c <spi_cmd_complete+0x784>)
   262f6:	4798      	blx	r3
   262f8:	4b19      	ldr	r3, [pc, #100]	; (26360 <spi_cmd_complete+0x7b8>)
   262fa:	0018      	movs	r0, r3
   262fc:	4b0b      	ldr	r3, [pc, #44]	; (2632c <spi_cmd_complete+0x784>)
   262fe:	4798      	blx	r3
   26300:	4b0c      	ldr	r3, [pc, #48]	; (26334 <spi_cmd_complete+0x78c>)
   26302:	0018      	movs	r0, r3
   26304:	4b09      	ldr	r3, [pc, #36]	; (2632c <spi_cmd_complete+0x784>)
   26306:	4798      	blx	r3
							result = N_FAIL;
   26308:	2300      	movs	r3, #0
   2630a:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   2630c:	e0ad      	b.n	2646a <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   2630e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26312:	18d3      	adds	r3, r2, r3
   26314:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26318:	683a      	ldr	r2, [r7, #0]
   2631a:	1ad3      	subs	r3, r2, r3
   2631c:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   2631e:	e09e      	b.n	2645e <spi_cmd_complete+0x8b6>
   26320:	0000022f 	.word	0x0000022f
   26324:	0003c430 	.word	0x0003c430
   26328:	0003be1c 	.word	0x0003be1c
   2632c:	00020109 	.word	0x00020109
   26330:	0003bf14 	.word	0x0003bf14
   26334:	0003be5c 	.word	0x0003be5c
   26338:	00000239 	.word	0x00000239
   2633c:	0003bf50 	.word	0x0003bf50
   26340:	0003bf84 	.word	0x0003bf84
   26344:	20004110 	.word	0x20004110
   26348:	00000263 	.word	0x00000263
   2634c:	0003bfb4 	.word	0x0003bfb4
   26350:	0003bfe4 	.word	0x0003bfe4
   26354:	000254e1 	.word	0x000254e1
   26358:	0000028e 	.word	0x0000028e
   2635c:	0003c014 	.word	0x0003c014
   26360:	0003c048 	.word	0x0003c048
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   26364:	683a      	ldr	r2, [r7, #0]
   26366:	2380      	movs	r3, #128	; 0x80
   26368:	019b      	lsls	r3, r3, #6
   2636a:	429a      	cmp	r2, r3
   2636c:	d802      	bhi.n	26374 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   2636e:	683b      	ldr	r3, [r7, #0]
   26370:	65bb      	str	r3, [r7, #88]	; 0x58
   26372:	e002      	b.n	2637a <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   26374:	2380      	movs	r3, #128	; 0x80
   26376:	019b      	lsls	r3, r3, #6
   26378:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   2637a:	230a      	movs	r3, #10
   2637c:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   2637e:	2317      	movs	r3, #23
   26380:	18fb      	adds	r3, r7, r3
   26382:	2101      	movs	r1, #1
   26384:	0018      	movs	r0, r3
   26386:	4b3b      	ldr	r3, [pc, #236]	; (26474 <spi_cmd_complete+0x8cc>)
   26388:	4798      	blx	r3
   2638a:	1e03      	subs	r3, r0, #0
   2638c:	d011      	beq.n	263b2 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   2638e:	23ae      	movs	r3, #174	; 0xae
   26390:	009a      	lsls	r2, r3, #2
   26392:	4939      	ldr	r1, [pc, #228]	; (26478 <spi_cmd_complete+0x8d0>)
   26394:	4b39      	ldr	r3, [pc, #228]	; (2647c <spi_cmd_complete+0x8d4>)
   26396:	0018      	movs	r0, r3
   26398:	4b39      	ldr	r3, [pc, #228]	; (26480 <spi_cmd_complete+0x8d8>)
   2639a:	4798      	blx	r3
   2639c:	4b39      	ldr	r3, [pc, #228]	; (26484 <spi_cmd_complete+0x8dc>)
   2639e:	0018      	movs	r0, r3
   263a0:	4b37      	ldr	r3, [pc, #220]	; (26480 <spi_cmd_complete+0x8d8>)
   263a2:	4798      	blx	r3
   263a4:	4b38      	ldr	r3, [pc, #224]	; (26488 <spi_cmd_complete+0x8e0>)
   263a6:	0018      	movs	r0, r3
   263a8:	4b35      	ldr	r3, [pc, #212]	; (26480 <spi_cmd_complete+0x8d8>)
   263aa:	4798      	blx	r3
							result = N_FAIL;
   263ac:	2300      	movs	r3, #0
   263ae:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   263b0:	e010      	b.n	263d4 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   263b2:	2317      	movs	r3, #23
   263b4:	18fb      	adds	r3, r7, r3
   263b6:	781b      	ldrb	r3, [r3, #0]
   263b8:	091b      	lsrs	r3, r3, #4
   263ba:	b2db      	uxtb	r3, r3
   263bc:	001a      	movs	r2, r3
   263be:	230f      	movs	r3, #15
   263c0:	4013      	ands	r3, r2
   263c2:	2b0f      	cmp	r3, #15
   263c4:	d005      	beq.n	263d2 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   263c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   263c8:	1e5a      	subs	r2, r3, #1
   263ca:	667a      	str	r2, [r7, #100]	; 0x64
   263cc:	2b00      	cmp	r3, #0
   263ce:	d1d6      	bne.n	2637e <spi_cmd_complete+0x7d6>
   263d0:	e000      	b.n	263d4 <spi_cmd_complete+0x82c>
							break;
   263d2:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   263d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   263d6:	2b00      	cmp	r3, #0
   263d8:	d046      	beq.n	26468 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   263da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   263dc:	687a      	ldr	r2, [r7, #4]
   263de:	18d3      	adds	r3, r2, r3
   263e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
   263e2:	b292      	uxth	r2, r2
   263e4:	0011      	movs	r1, r2
   263e6:	0018      	movs	r0, r3
   263e8:	4b22      	ldr	r3, [pc, #136]	; (26474 <spi_cmd_complete+0x8cc>)
   263ea:	4798      	blx	r3
   263ec:	1e03      	subs	r3, r0, #0
   263ee:	d011      	beq.n	26414 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   263f0:	23b2      	movs	r3, #178	; 0xb2
   263f2:	009a      	lsls	r2, r3, #2
   263f4:	4920      	ldr	r1, [pc, #128]	; (26478 <spi_cmd_complete+0x8d0>)
   263f6:	4b21      	ldr	r3, [pc, #132]	; (2647c <spi_cmd_complete+0x8d4>)
   263f8:	0018      	movs	r0, r3
   263fa:	4b21      	ldr	r3, [pc, #132]	; (26480 <spi_cmd_complete+0x8d8>)
   263fc:	4798      	blx	r3
   263fe:	4b23      	ldr	r3, [pc, #140]	; (2648c <spi_cmd_complete+0x8e4>)
   26400:	0018      	movs	r0, r3
   26402:	4b1f      	ldr	r3, [pc, #124]	; (26480 <spi_cmd_complete+0x8d8>)
   26404:	4798      	blx	r3
   26406:	4b20      	ldr	r3, [pc, #128]	; (26488 <spi_cmd_complete+0x8e0>)
   26408:	0018      	movs	r0, r3
   2640a:	4b1d      	ldr	r3, [pc, #116]	; (26480 <spi_cmd_complete+0x8d8>)
   2640c:	4798      	blx	r3
						result = N_FAIL;
   2640e:	2300      	movs	r3, #0
   26410:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   26412:	e02a      	b.n	2646a <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   26414:	4b1e      	ldr	r3, [pc, #120]	; (26490 <spi_cmd_complete+0x8e8>)
   26416:	781b      	ldrb	r3, [r3, #0]
   26418:	2b00      	cmp	r3, #0
   2641a:	d118      	bne.n	2644e <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   2641c:	2314      	movs	r3, #20
   2641e:	18fb      	adds	r3, r7, r3
   26420:	2102      	movs	r1, #2
   26422:	0018      	movs	r0, r3
   26424:	4b13      	ldr	r3, [pc, #76]	; (26474 <spi_cmd_complete+0x8cc>)
   26426:	4798      	blx	r3
   26428:	1e03      	subs	r3, r0, #0
   2642a:	d010      	beq.n	2644e <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   2642c:	4a19      	ldr	r2, [pc, #100]	; (26494 <spi_cmd_complete+0x8ec>)
   2642e:	4912      	ldr	r1, [pc, #72]	; (26478 <spi_cmd_complete+0x8d0>)
   26430:	4b12      	ldr	r3, [pc, #72]	; (2647c <spi_cmd_complete+0x8d4>)
   26432:	0018      	movs	r0, r3
   26434:	4b12      	ldr	r3, [pc, #72]	; (26480 <spi_cmd_complete+0x8d8>)
   26436:	4798      	blx	r3
   26438:	4b17      	ldr	r3, [pc, #92]	; (26498 <spi_cmd_complete+0x8f0>)
   2643a:	0018      	movs	r0, r3
   2643c:	4b10      	ldr	r3, [pc, #64]	; (26480 <spi_cmd_complete+0x8d8>)
   2643e:	4798      	blx	r3
   26440:	4b11      	ldr	r3, [pc, #68]	; (26488 <spi_cmd_complete+0x8e0>)
   26442:	0018      	movs	r0, r3
   26444:	4b0e      	ldr	r3, [pc, #56]	; (26480 <spi_cmd_complete+0x8d8>)
   26446:	4798      	blx	r3
							result = N_FAIL;
   26448:	2300      	movs	r3, #0
   2644a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   2644c:	e00d      	b.n	2646a <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2644e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26452:	18d3      	adds	r3, r2, r3
   26454:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26458:	683a      	ldr	r2, [r7, #0]
   2645a:	1ad3      	subs	r3, r2, r3
   2645c:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2645e:	683b      	ldr	r3, [r7, #0]
   26460:	2b00      	cmp	r3, #0
   26462:	d000      	beq.n	26466 <spi_cmd_complete+0x8be>
   26464:	e77e      	b.n	26364 <spi_cmd_complete+0x7bc>
   26466:	e000      	b.n	2646a <spi_cmd_complete+0x8c2>
						break;
   26468:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   2646a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   2646c:	0018      	movs	r0, r3
   2646e:	46bd      	mov	sp, r7
   26470:	b01f      	add	sp, #124	; 0x7c
   26472:	bd90      	pop	{r4, r7, pc}
   26474:	000254e1 	.word	0x000254e1
   26478:	0003c430 	.word	0x0003c430
   2647c:	0003be1c 	.word	0x0003be1c
   26480:	00020109 	.word	0x00020109
   26484:	0003c080 	.word	0x0003c080
   26488:	0003be5c 	.word	0x0003be5c
   2648c:	0003c014 	.word	0x0003c014
   26490:	20004110 	.word	0x20004110
   26494:	000002d2 	.word	0x000002d2
   26498:	0003c048 	.word	0x0003c048

0002649c <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   2649c:	b580      	push	{r7, lr}
   2649e:	b086      	sub	sp, #24
   264a0:	af00      	add	r7, sp, #0
   264a2:	6078      	str	r0, [r7, #4]
   264a4:	000a      	movs	r2, r1
   264a6:	1cbb      	adds	r3, r7, #2
   264a8:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   264aa:	2313      	movs	r3, #19
   264ac:	18fb      	adds	r3, r7, r3
   264ae:	2201      	movs	r2, #1
   264b0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   264b2:	230c      	movs	r3, #12
   264b4:	18fb      	adds	r3, r7, r3
   264b6:	2200      	movs	r2, #0
   264b8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   264ba:	2316      	movs	r3, #22
   264bc:	18fb      	adds	r3, r7, r3
   264be:	2200      	movs	r2, #0
   264c0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   264c2:	1cbb      	adds	r3, r7, #2
   264c4:	881a      	ldrh	r2, [r3, #0]
   264c6:	2380      	movs	r3, #128	; 0x80
   264c8:	019b      	lsls	r3, r3, #6
   264ca:	429a      	cmp	r2, r3
   264cc:	d805      	bhi.n	264da <spi_data_write+0x3e>
			nbytes = sz;
   264ce:	2314      	movs	r3, #20
   264d0:	18fb      	adds	r3, r7, r3
   264d2:	1cba      	adds	r2, r7, #2
   264d4:	8812      	ldrh	r2, [r2, #0]
   264d6:	801a      	strh	r2, [r3, #0]
   264d8:	e004      	b.n	264e4 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   264da:	2314      	movs	r3, #20
   264dc:	18fb      	adds	r3, r7, r3
   264de:	2280      	movs	r2, #128	; 0x80
   264e0:	0192      	lsls	r2, r2, #6
   264e2:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   264e4:	2311      	movs	r3, #17
   264e6:	18fb      	adds	r3, r7, r3
   264e8:	22f0      	movs	r2, #240	; 0xf0
   264ea:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   264ec:	2316      	movs	r3, #22
   264ee:	18fb      	adds	r3, r7, r3
   264f0:	2200      	movs	r2, #0
   264f2:	5e9b      	ldrsh	r3, [r3, r2]
   264f4:	2b00      	cmp	r3, #0
   264f6:	d10f      	bne.n	26518 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   264f8:	1cbb      	adds	r3, r7, #2
   264fa:	881a      	ldrh	r2, [r3, #0]
   264fc:	2380      	movs	r3, #128	; 0x80
   264fe:	019b      	lsls	r3, r3, #6
   26500:	429a      	cmp	r2, r3
   26502:	d804      	bhi.n	2650e <spi_data_write+0x72>
				order = 0x3;
   26504:	2312      	movs	r3, #18
   26506:	18fb      	adds	r3, r7, r3
   26508:	2203      	movs	r2, #3
   2650a:	701a      	strb	r2, [r3, #0]
   2650c:	e013      	b.n	26536 <spi_data_write+0x9a>
			else
				order = 0x1;
   2650e:	2312      	movs	r3, #18
   26510:	18fb      	adds	r3, r7, r3
   26512:	2201      	movs	r2, #1
   26514:	701a      	strb	r2, [r3, #0]
   26516:	e00e      	b.n	26536 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   26518:	1cbb      	adds	r3, r7, #2
   2651a:	881a      	ldrh	r2, [r3, #0]
   2651c:	2380      	movs	r3, #128	; 0x80
   2651e:	019b      	lsls	r3, r3, #6
   26520:	429a      	cmp	r2, r3
   26522:	d804      	bhi.n	2652e <spi_data_write+0x92>
				order = 0x3;
   26524:	2312      	movs	r3, #18
   26526:	18fb      	adds	r3, r7, r3
   26528:	2203      	movs	r2, #3
   2652a:	701a      	strb	r2, [r3, #0]
   2652c:	e003      	b.n	26536 <spi_data_write+0x9a>
			else
				order = 0x2;
   2652e:	2312      	movs	r3, #18
   26530:	18fb      	adds	r3, r7, r3
   26532:	2202      	movs	r2, #2
   26534:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   26536:	2311      	movs	r3, #17
   26538:	18fb      	adds	r3, r7, r3
   2653a:	781a      	ldrb	r2, [r3, #0]
   2653c:	2312      	movs	r3, #18
   2653e:	18fb      	adds	r3, r7, r3
   26540:	781b      	ldrb	r3, [r3, #0]
   26542:	4313      	orrs	r3, r2
   26544:	b2da      	uxtb	r2, r3
   26546:	2311      	movs	r3, #17
   26548:	18fb      	adds	r3, r7, r3
   2654a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   2654c:	2311      	movs	r3, #17
   2654e:	18fb      	adds	r3, r7, r3
   26550:	2101      	movs	r1, #1
   26552:	0018      	movs	r0, r3
   26554:	4b3c      	ldr	r3, [pc, #240]	; (26648 <spi_data_write+0x1ac>)
   26556:	4798      	blx	r3
   26558:	1e03      	subs	r3, r0, #0
   2655a:	d012      	beq.n	26582 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   2655c:	4a3b      	ldr	r2, [pc, #236]	; (2664c <spi_data_write+0x1b0>)
   2655e:	493c      	ldr	r1, [pc, #240]	; (26650 <spi_data_write+0x1b4>)
   26560:	4b3c      	ldr	r3, [pc, #240]	; (26654 <spi_data_write+0x1b8>)
   26562:	0018      	movs	r0, r3
   26564:	4b3c      	ldr	r3, [pc, #240]	; (26658 <spi_data_write+0x1bc>)
   26566:	4798      	blx	r3
   26568:	4b3c      	ldr	r3, [pc, #240]	; (2665c <spi_data_write+0x1c0>)
   2656a:	0018      	movs	r0, r3
   2656c:	4b3a      	ldr	r3, [pc, #232]	; (26658 <spi_data_write+0x1bc>)
   2656e:	4798      	blx	r3
   26570:	4b3b      	ldr	r3, [pc, #236]	; (26660 <spi_data_write+0x1c4>)
   26572:	0018      	movs	r0, r3
   26574:	4b38      	ldr	r3, [pc, #224]	; (26658 <spi_data_write+0x1bc>)
   26576:	4798      	blx	r3
			result = N_FAIL;
   26578:	2313      	movs	r3, #19
   2657a:	18fb      	adds	r3, r7, r3
   2657c:	2200      	movs	r2, #0
   2657e:	701a      	strb	r2, [r3, #0]
			break;
   26580:	e059      	b.n	26636 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   26582:	2316      	movs	r3, #22
   26584:	18fb      	adds	r3, r7, r3
   26586:	2200      	movs	r2, #0
   26588:	5e9b      	ldrsh	r3, [r3, r2]
   2658a:	687a      	ldr	r2, [r7, #4]
   2658c:	18d2      	adds	r2, r2, r3
   2658e:	2314      	movs	r3, #20
   26590:	18fb      	adds	r3, r7, r3
   26592:	881b      	ldrh	r3, [r3, #0]
   26594:	0019      	movs	r1, r3
   26596:	0010      	movs	r0, r2
   26598:	4b2b      	ldr	r3, [pc, #172]	; (26648 <spi_data_write+0x1ac>)
   2659a:	4798      	blx	r3
   2659c:	1e03      	subs	r3, r0, #0
   2659e:	d012      	beq.n	265c6 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   265a0:	4a30      	ldr	r2, [pc, #192]	; (26664 <spi_data_write+0x1c8>)
   265a2:	492b      	ldr	r1, [pc, #172]	; (26650 <spi_data_write+0x1b4>)
   265a4:	4b2b      	ldr	r3, [pc, #172]	; (26654 <spi_data_write+0x1b8>)
   265a6:	0018      	movs	r0, r3
   265a8:	4b2b      	ldr	r3, [pc, #172]	; (26658 <spi_data_write+0x1bc>)
   265aa:	4798      	blx	r3
   265ac:	4b2e      	ldr	r3, [pc, #184]	; (26668 <spi_data_write+0x1cc>)
   265ae:	0018      	movs	r0, r3
   265b0:	4b29      	ldr	r3, [pc, #164]	; (26658 <spi_data_write+0x1bc>)
   265b2:	4798      	blx	r3
   265b4:	4b2a      	ldr	r3, [pc, #168]	; (26660 <spi_data_write+0x1c4>)
   265b6:	0018      	movs	r0, r3
   265b8:	4b27      	ldr	r3, [pc, #156]	; (26658 <spi_data_write+0x1bc>)
   265ba:	4798      	blx	r3
			result = N_FAIL;
   265bc:	2313      	movs	r3, #19
   265be:	18fb      	adds	r3, r7, r3
   265c0:	2200      	movs	r2, #0
   265c2:	701a      	strb	r2, [r3, #0]
			break;
   265c4:	e037      	b.n	26636 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   265c6:	4b29      	ldr	r3, [pc, #164]	; (2666c <spi_data_write+0x1d0>)
   265c8:	781b      	ldrb	r3, [r3, #0]
   265ca:	2b00      	cmp	r3, #0
   265cc:	d11b      	bne.n	26606 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   265ce:	230c      	movs	r3, #12
   265d0:	18fb      	adds	r3, r7, r3
   265d2:	2102      	movs	r1, #2
   265d4:	0018      	movs	r0, r3
   265d6:	4b1c      	ldr	r3, [pc, #112]	; (26648 <spi_data_write+0x1ac>)
   265d8:	4798      	blx	r3
   265da:	1e03      	subs	r3, r0, #0
   265dc:	d013      	beq.n	26606 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   265de:	23d7      	movs	r3, #215	; 0xd7
   265e0:	009a      	lsls	r2, r3, #2
   265e2:	491b      	ldr	r1, [pc, #108]	; (26650 <spi_data_write+0x1b4>)
   265e4:	4b1b      	ldr	r3, [pc, #108]	; (26654 <spi_data_write+0x1b8>)
   265e6:	0018      	movs	r0, r3
   265e8:	4b1b      	ldr	r3, [pc, #108]	; (26658 <spi_data_write+0x1bc>)
   265ea:	4798      	blx	r3
   265ec:	4b20      	ldr	r3, [pc, #128]	; (26670 <spi_data_write+0x1d4>)
   265ee:	0018      	movs	r0, r3
   265f0:	4b19      	ldr	r3, [pc, #100]	; (26658 <spi_data_write+0x1bc>)
   265f2:	4798      	blx	r3
   265f4:	4b1a      	ldr	r3, [pc, #104]	; (26660 <spi_data_write+0x1c4>)
   265f6:	0018      	movs	r0, r3
   265f8:	4b17      	ldr	r3, [pc, #92]	; (26658 <spi_data_write+0x1bc>)
   265fa:	4798      	blx	r3
				result = N_FAIL;
   265fc:	2313      	movs	r3, #19
   265fe:	18fb      	adds	r3, r7, r3
   26600:	2200      	movs	r2, #0
   26602:	701a      	strb	r2, [r3, #0]
				break;
   26604:	e017      	b.n	26636 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   26606:	2316      	movs	r3, #22
   26608:	18fb      	adds	r3, r7, r3
   2660a:	881a      	ldrh	r2, [r3, #0]
   2660c:	2314      	movs	r3, #20
   2660e:	18fb      	adds	r3, r7, r3
   26610:	881b      	ldrh	r3, [r3, #0]
   26612:	18d3      	adds	r3, r2, r3
   26614:	b29a      	uxth	r2, r3
   26616:	2316      	movs	r3, #22
   26618:	18fb      	adds	r3, r7, r3
   2661a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   2661c:	1cbb      	adds	r3, r7, #2
   2661e:	1cb9      	adds	r1, r7, #2
   26620:	2214      	movs	r2, #20
   26622:	18ba      	adds	r2, r7, r2
   26624:	8809      	ldrh	r1, [r1, #0]
   26626:	8812      	ldrh	r2, [r2, #0]
   26628:	1a8a      	subs	r2, r1, r2
   2662a:	801a      	strh	r2, [r3, #0]
	} while (sz);
   2662c:	1cbb      	adds	r3, r7, #2
   2662e:	881b      	ldrh	r3, [r3, #0]
   26630:	2b00      	cmp	r3, #0
   26632:	d000      	beq.n	26636 <spi_data_write+0x19a>
   26634:	e745      	b.n	264c2 <spi_data_write+0x26>


	return result;
   26636:	2313      	movs	r3, #19
   26638:	18fb      	adds	r3, r7, r3
   2663a:	781b      	ldrb	r3, [r3, #0]
   2663c:	b25b      	sxtb	r3, r3
}
   2663e:	0018      	movs	r0, r3
   26640:	46bd      	mov	sp, r7
   26642:	b006      	add	sp, #24
   26644:	bd80      	pop	{r7, pc}
   26646:	46c0      	nop			; (mov r8, r8)
   26648:	00025525 	.word	0x00025525
   2664c:	00000349 	.word	0x00000349
   26650:	0003c444 	.word	0x0003c444
   26654:	0003be1c 	.word	0x0003be1c
   26658:	00020109 	.word	0x00020109
   2665c:	0003c0e4 	.word	0x0003c0e4
   26660:	0003be5c 	.word	0x0003be5c
   26664:	00000352 	.word	0x00000352
   26668:	0003c11c 	.word	0x0003c11c
   2666c:	20004110 	.word	0x20004110
   26670:	0003c150 	.word	0x0003c150

00026674 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   26674:	b590      	push	{r4, r7, lr}
   26676:	b087      	sub	sp, #28
   26678:	af02      	add	r7, sp, #8
   2667a:	6078      	str	r0, [r7, #4]
   2667c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2667e:	230f      	movs	r3, #15
   26680:	18fb      	adds	r3, r7, r3
   26682:	220a      	movs	r2, #10
   26684:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   26686:	230c      	movs	r3, #12
   26688:	18fb      	adds	r3, r7, r3
   2668a:	2201      	movs	r2, #1
   2668c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   2668e:	230e      	movs	r3, #14
   26690:	18fb      	adds	r3, r7, r3
   26692:	22c9      	movs	r2, #201	; 0xc9
   26694:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   26696:	230d      	movs	r3, #13
   26698:	18fb      	adds	r3, r7, r3
   2669a:	2200      	movs	r2, #0
   2669c:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   2669e:	687b      	ldr	r3, [r7, #4]
   266a0:	2b30      	cmp	r3, #48	; 0x30
   266a2:	d808      	bhi.n	266b6 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   266a4:	230e      	movs	r3, #14
   266a6:	18fb      	adds	r3, r7, r3
   266a8:	22c3      	movs	r2, #195	; 0xc3
   266aa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   266ac:	230d      	movs	r3, #13
   266ae:	18fb      	adds	r3, r7, r3
   266b0:	2201      	movs	r2, #1
   266b2:	701a      	strb	r2, [r3, #0]
   266b4:	e007      	b.n	266c6 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   266b6:	230e      	movs	r3, #14
   266b8:	18fb      	adds	r3, r7, r3
   266ba:	22c9      	movs	r2, #201	; 0xc9
   266bc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   266be:	230d      	movs	r3, #13
   266c0:	18fb      	adds	r3, r7, r3
   266c2:	2200      	movs	r2, #0
   266c4:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   266c6:	003a      	movs	r2, r7
   266c8:	6879      	ldr	r1, [r7, #4]
   266ca:	230e      	movs	r3, #14
   266cc:	18fb      	adds	r3, r7, r3
   266ce:	7818      	ldrb	r0, [r3, #0]
   266d0:	230d      	movs	r3, #13
   266d2:	18fb      	adds	r3, r7, r3
   266d4:	781b      	ldrb	r3, [r3, #0]
   266d6:	9300      	str	r3, [sp, #0]
   266d8:	2304      	movs	r3, #4
   266da:	4c2e      	ldr	r4, [pc, #184]	; (26794 <spi_write_reg+0x120>)
   266dc:	47a0      	blx	r4
   266de:	0002      	movs	r2, r0
   266e0:	230c      	movs	r3, #12
   266e2:	18fb      	adds	r3, r7, r3
   266e4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   266e6:	230c      	movs	r3, #12
   266e8:	18fb      	adds	r3, r7, r3
   266ea:	781b      	ldrb	r3, [r3, #0]
   266ec:	b25b      	sxtb	r3, r3
   266ee:	2b01      	cmp	r3, #1
   266f0:	d010      	beq.n	26714 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   266f2:	4a29      	ldr	r2, [pc, #164]	; (26798 <spi_write_reg+0x124>)
   266f4:	4929      	ldr	r1, [pc, #164]	; (2679c <spi_write_reg+0x128>)
   266f6:	4b2a      	ldr	r3, [pc, #168]	; (267a0 <spi_write_reg+0x12c>)
   266f8:	0018      	movs	r0, r3
   266fa:	4b2a      	ldr	r3, [pc, #168]	; (267a4 <spi_write_reg+0x130>)
   266fc:	4798      	blx	r3
   266fe:	687a      	ldr	r2, [r7, #4]
   26700:	4b29      	ldr	r3, [pc, #164]	; (267a8 <spi_write_reg+0x134>)
   26702:	0011      	movs	r1, r2
   26704:	0018      	movs	r0, r3
   26706:	4b27      	ldr	r3, [pc, #156]	; (267a4 <spi_write_reg+0x130>)
   26708:	4798      	blx	r3
   2670a:	4b28      	ldr	r3, [pc, #160]	; (267ac <spi_write_reg+0x138>)
   2670c:	0018      	movs	r0, r3
   2670e:	4b25      	ldr	r3, [pc, #148]	; (267a4 <spi_write_reg+0x130>)
   26710:	4798      	blx	r3
		goto _FAIL_;
   26712:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   26714:	230c      	movs	r3, #12
   26716:	18fb      	adds	r3, r7, r3
   26718:	781b      	ldrb	r3, [r3, #0]
   2671a:	b25b      	sxtb	r3, r3
   2671c:	2b01      	cmp	r3, #1
   2671e:	d030      	beq.n	26782 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   26720:	2001      	movs	r0, #1
   26722:	4b23      	ldr	r3, [pc, #140]	; (267b0 <spi_write_reg+0x13c>)
   26724:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26726:	2300      	movs	r3, #0
   26728:	9300      	str	r3, [sp, #0]
   2672a:	2300      	movs	r3, #0
   2672c:	2200      	movs	r2, #0
   2672e:	2100      	movs	r1, #0
   26730:	20cf      	movs	r0, #207	; 0xcf
   26732:	4c20      	ldr	r4, [pc, #128]	; (267b4 <spi_write_reg+0x140>)
   26734:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26736:	20cf      	movs	r0, #207	; 0xcf
   26738:	4b1f      	ldr	r3, [pc, #124]	; (267b8 <spi_write_reg+0x144>)
   2673a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   2673c:	23ea      	movs	r3, #234	; 0xea
   2673e:	009a      	lsls	r2, r3, #2
   26740:	4916      	ldr	r1, [pc, #88]	; (2679c <spi_write_reg+0x128>)
   26742:	4b17      	ldr	r3, [pc, #92]	; (267a0 <spi_write_reg+0x12c>)
   26744:	0018      	movs	r0, r3
   26746:	4b17      	ldr	r3, [pc, #92]	; (267a4 <spi_write_reg+0x130>)
   26748:	4798      	blx	r3
   2674a:	230f      	movs	r3, #15
   2674c:	18fb      	adds	r3, r7, r3
   2674e:	7819      	ldrb	r1, [r3, #0]
   26750:	683b      	ldr	r3, [r7, #0]
   26752:	687a      	ldr	r2, [r7, #4]
   26754:	4819      	ldr	r0, [pc, #100]	; (267bc <spi_write_reg+0x148>)
   26756:	4c13      	ldr	r4, [pc, #76]	; (267a4 <spi_write_reg+0x130>)
   26758:	47a0      	blx	r4
   2675a:	4b14      	ldr	r3, [pc, #80]	; (267ac <spi_write_reg+0x138>)
   2675c:	0018      	movs	r0, r3
   2675e:	4b11      	ldr	r3, [pc, #68]	; (267a4 <spi_write_reg+0x130>)
   26760:	4798      	blx	r3
		nm_bsp_sleep(1);
   26762:	2001      	movs	r0, #1
   26764:	4b12      	ldr	r3, [pc, #72]	; (267b0 <spi_write_reg+0x13c>)
   26766:	4798      	blx	r3
		retry--;
   26768:	230f      	movs	r3, #15
   2676a:	18fb      	adds	r3, r7, r3
   2676c:	781a      	ldrb	r2, [r3, #0]
   2676e:	230f      	movs	r3, #15
   26770:	18fb      	adds	r3, r7, r3
   26772:	3a01      	subs	r2, #1
   26774:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26776:	230f      	movs	r3, #15
   26778:	18fb      	adds	r3, r7, r3
   2677a:	781b      	ldrb	r3, [r3, #0]
   2677c:	2b00      	cmp	r3, #0
   2677e:	d000      	beq.n	26782 <spi_write_reg+0x10e>
   26780:	e78d      	b.n	2669e <spi_write_reg+0x2a>
	}

	return result;
   26782:	230c      	movs	r3, #12
   26784:	18fb      	adds	r3, r7, r3
   26786:	781b      	ldrb	r3, [r3, #0]
   26788:	b25b      	sxtb	r3, r3
}
   2678a:	0018      	movs	r0, r3
   2678c:	46bd      	mov	sp, r7
   2678e:	b005      	add	sp, #20
   26790:	bd90      	pop	{r4, r7, pc}
   26792:	46c0      	nop			; (mov r8, r8)
   26794:	00025ba9 	.word	0x00025ba9
   26798:	0000039d 	.word	0x0000039d
   2679c:	0003c454 	.word	0x0003c454
   267a0:	0003be1c 	.word	0x0003be1c
   267a4:	00020109 	.word	0x00020109
   267a8:	0003c188 	.word	0x0003c188
   267ac:	0003be5c 	.word	0x0003be5c
   267b0:	00022579 	.word	0x00022579
   267b4:	0002562d 	.word	0x0002562d
   267b8:	00025a6d 	.word	0x00025a6d
   267bc:	0003c1b4 	.word	0x0003c1b4

000267c0 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   267c0:	b590      	push	{r4, r7, lr}
   267c2:	b089      	sub	sp, #36	; 0x24
   267c4:	af02      	add	r7, sp, #8
   267c6:	60f8      	str	r0, [r7, #12]
   267c8:	60b9      	str	r1, [r7, #8]
   267ca:	1dbb      	adds	r3, r7, #6
   267cc:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   267ce:	2316      	movs	r3, #22
   267d0:	18fb      	adds	r3, r7, r3
   267d2:	220a      	movs	r2, #10
   267d4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   267d6:	2315      	movs	r3, #21
   267d8:	18fb      	adds	r3, r7, r3
   267da:	22c7      	movs	r2, #199	; 0xc7
   267dc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   267de:	1dbb      	adds	r3, r7, #6
   267e0:	881a      	ldrh	r2, [r3, #0]
   267e2:	68f9      	ldr	r1, [r7, #12]
   267e4:	2315      	movs	r3, #21
   267e6:	18fb      	adds	r3, r7, r3
   267e8:	7818      	ldrb	r0, [r3, #0]
   267ea:	2300      	movs	r3, #0
   267ec:	9300      	str	r3, [sp, #0]
   267ee:	0013      	movs	r3, r2
   267f0:	2200      	movs	r2, #0
   267f2:	4c4d      	ldr	r4, [pc, #308]	; (26928 <nm_spi_write+0x168>)
   267f4:	47a0      	blx	r4
   267f6:	0002      	movs	r2, r0
   267f8:	2317      	movs	r3, #23
   267fa:	18fb      	adds	r3, r7, r3
   267fc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   267fe:	2317      	movs	r3, #23
   26800:	18fb      	adds	r3, r7, r3
   26802:	781b      	ldrb	r3, [r3, #0]
   26804:	b25b      	sxtb	r3, r3
   26806:	2b01      	cmp	r3, #1
   26808:	d010      	beq.n	2682c <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   2680a:	4a48      	ldr	r2, [pc, #288]	; (2692c <nm_spi_write+0x16c>)
   2680c:	4948      	ldr	r1, [pc, #288]	; (26930 <nm_spi_write+0x170>)
   2680e:	4b49      	ldr	r3, [pc, #292]	; (26934 <nm_spi_write+0x174>)
   26810:	0018      	movs	r0, r3
   26812:	4b49      	ldr	r3, [pc, #292]	; (26938 <nm_spi_write+0x178>)
   26814:	4798      	blx	r3
   26816:	68fa      	ldr	r2, [r7, #12]
   26818:	4b48      	ldr	r3, [pc, #288]	; (2693c <nm_spi_write+0x17c>)
   2681a:	0011      	movs	r1, r2
   2681c:	0018      	movs	r0, r3
   2681e:	4b46      	ldr	r3, [pc, #280]	; (26938 <nm_spi_write+0x178>)
   26820:	4798      	blx	r3
   26822:	4b47      	ldr	r3, [pc, #284]	; (26940 <nm_spi_write+0x180>)
   26824:	0018      	movs	r0, r3
   26826:	4b44      	ldr	r3, [pc, #272]	; (26938 <nm_spi_write+0x178>)
   26828:	4798      	blx	r3
		goto _FAIL_;
   2682a:	e03e      	b.n	268aa <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   2682c:	2317      	movs	r3, #23
   2682e:	18fc      	adds	r4, r7, r3
   26830:	1dbb      	adds	r3, r7, #6
   26832:	881a      	ldrh	r2, [r3, #0]
   26834:	68bb      	ldr	r3, [r7, #8]
   26836:	0011      	movs	r1, r2
   26838:	0018      	movs	r0, r3
   2683a:	4b42      	ldr	r3, [pc, #264]	; (26944 <nm_spi_write+0x184>)
   2683c:	4798      	blx	r3
   2683e:	0003      	movs	r3, r0
   26840:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   26842:	2317      	movs	r3, #23
   26844:	18fb      	adds	r3, r7, r3
   26846:	781b      	ldrb	r3, [r3, #0]
   26848:	b25b      	sxtb	r3, r3
   2684a:	2b01      	cmp	r3, #1
   2684c:	d00e      	beq.n	2686c <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   2684e:	4a3e      	ldr	r2, [pc, #248]	; (26948 <nm_spi_write+0x188>)
   26850:	4937      	ldr	r1, [pc, #220]	; (26930 <nm_spi_write+0x170>)
   26852:	4b38      	ldr	r3, [pc, #224]	; (26934 <nm_spi_write+0x174>)
   26854:	0018      	movs	r0, r3
   26856:	4b38      	ldr	r3, [pc, #224]	; (26938 <nm_spi_write+0x178>)
   26858:	4798      	blx	r3
   2685a:	4b3c      	ldr	r3, [pc, #240]	; (2694c <nm_spi_write+0x18c>)
   2685c:	0018      	movs	r0, r3
   2685e:	4b36      	ldr	r3, [pc, #216]	; (26938 <nm_spi_write+0x178>)
   26860:	4798      	blx	r3
   26862:	4b37      	ldr	r3, [pc, #220]	; (26940 <nm_spi_write+0x180>)
   26864:	0018      	movs	r0, r3
   26866:	4b34      	ldr	r3, [pc, #208]	; (26938 <nm_spi_write+0x178>)
   26868:	4798      	blx	r3
		goto _FAIL_;
   2686a:	e01e      	b.n	268aa <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   2686c:	2317      	movs	r3, #23
   2686e:	18fc      	adds	r4, r7, r3
   26870:	2315      	movs	r3, #21
   26872:	18fb      	adds	r3, r7, r3
   26874:	781b      	ldrb	r3, [r3, #0]
   26876:	0018      	movs	r0, r3
   26878:	4b35      	ldr	r3, [pc, #212]	; (26950 <nm_spi_write+0x190>)
   2687a:	4798      	blx	r3
   2687c:	0003      	movs	r3, r0
   2687e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   26880:	2317      	movs	r3, #23
   26882:	18fb      	adds	r3, r7, r3
   26884:	781b      	ldrb	r3, [r3, #0]
   26886:	b25b      	sxtb	r3, r3
   26888:	2b01      	cmp	r3, #1
   2688a:	d00e      	beq.n	268aa <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   2688c:	4a31      	ldr	r2, [pc, #196]	; (26954 <nm_spi_write+0x194>)
   2688e:	4928      	ldr	r1, [pc, #160]	; (26930 <nm_spi_write+0x170>)
   26890:	4b28      	ldr	r3, [pc, #160]	; (26934 <nm_spi_write+0x174>)
   26892:	0018      	movs	r0, r3
   26894:	4b28      	ldr	r3, [pc, #160]	; (26938 <nm_spi_write+0x178>)
   26896:	4798      	blx	r3
   26898:	4b2c      	ldr	r3, [pc, #176]	; (2694c <nm_spi_write+0x18c>)
   2689a:	0018      	movs	r0, r3
   2689c:	4b26      	ldr	r3, [pc, #152]	; (26938 <nm_spi_write+0x178>)
   2689e:	4798      	blx	r3
   268a0:	4b27      	ldr	r3, [pc, #156]	; (26940 <nm_spi_write+0x180>)
   268a2:	0018      	movs	r0, r3
   268a4:	4b24      	ldr	r3, [pc, #144]	; (26938 <nm_spi_write+0x178>)
   268a6:	4798      	blx	r3
		goto _FAIL_;
   268a8:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   268aa:	2317      	movs	r3, #23
   268ac:	18fb      	adds	r3, r7, r3
   268ae:	781b      	ldrb	r3, [r3, #0]
   268b0:	b25b      	sxtb	r3, r3
   268b2:	2b01      	cmp	r3, #1
   268b4:	d030      	beq.n	26918 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   268b6:	2001      	movs	r0, #1
   268b8:	4b27      	ldr	r3, [pc, #156]	; (26958 <nm_spi_write+0x198>)
   268ba:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   268bc:	2300      	movs	r3, #0
   268be:	9300      	str	r3, [sp, #0]
   268c0:	2300      	movs	r3, #0
   268c2:	2200      	movs	r2, #0
   268c4:	2100      	movs	r1, #0
   268c6:	20cf      	movs	r0, #207	; 0xcf
   268c8:	4c24      	ldr	r4, [pc, #144]	; (2695c <nm_spi_write+0x19c>)
   268ca:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   268cc:	20cf      	movs	r0, #207	; 0xcf
   268ce:	4b24      	ldr	r3, [pc, #144]	; (26960 <nm_spi_write+0x1a0>)
   268d0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   268d2:	4a24      	ldr	r2, [pc, #144]	; (26964 <nm_spi_write+0x1a4>)
   268d4:	4916      	ldr	r1, [pc, #88]	; (26930 <nm_spi_write+0x170>)
   268d6:	4b17      	ldr	r3, [pc, #92]	; (26934 <nm_spi_write+0x174>)
   268d8:	0018      	movs	r0, r3
   268da:	4b17      	ldr	r3, [pc, #92]	; (26938 <nm_spi_write+0x178>)
   268dc:	4798      	blx	r3
   268de:	2316      	movs	r3, #22
   268e0:	18fb      	adds	r3, r7, r3
   268e2:	7819      	ldrb	r1, [r3, #0]
   268e4:	1dbb      	adds	r3, r7, #6
   268e6:	881b      	ldrh	r3, [r3, #0]
   268e8:	68fa      	ldr	r2, [r7, #12]
   268ea:	481f      	ldr	r0, [pc, #124]	; (26968 <nm_spi_write+0x1a8>)
   268ec:	4c12      	ldr	r4, [pc, #72]	; (26938 <nm_spi_write+0x178>)
   268ee:	47a0      	blx	r4
   268f0:	4b13      	ldr	r3, [pc, #76]	; (26940 <nm_spi_write+0x180>)
   268f2:	0018      	movs	r0, r3
   268f4:	4b10      	ldr	r3, [pc, #64]	; (26938 <nm_spi_write+0x178>)
   268f6:	4798      	blx	r3
		nm_bsp_sleep(1);
   268f8:	2001      	movs	r0, #1
   268fa:	4b17      	ldr	r3, [pc, #92]	; (26958 <nm_spi_write+0x198>)
   268fc:	4798      	blx	r3
		retry--;
   268fe:	2316      	movs	r3, #22
   26900:	18fb      	adds	r3, r7, r3
   26902:	781a      	ldrb	r2, [r3, #0]
   26904:	2316      	movs	r3, #22
   26906:	18fb      	adds	r3, r7, r3
   26908:	3a01      	subs	r2, #1
   2690a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2690c:	2316      	movs	r3, #22
   2690e:	18fb      	adds	r3, r7, r3
   26910:	781b      	ldrb	r3, [r3, #0]
   26912:	2b00      	cmp	r3, #0
   26914:	d000      	beq.n	26918 <nm_spi_write+0x158>
   26916:	e762      	b.n	267de <nm_spi_write+0x1e>
	}


	return result;
   26918:	2317      	movs	r3, #23
   2691a:	18fb      	adds	r3, r7, r3
   2691c:	781b      	ldrb	r3, [r3, #0]
   2691e:	b25b      	sxtb	r3, r3
}
   26920:	0018      	movs	r0, r3
   26922:	46bd      	mov	sp, r7
   26924:	b007      	add	sp, #28
   26926:	bd90      	pop	{r4, r7, pc}
   26928:	00025ba9 	.word	0x00025ba9
   2692c:	000003cf 	.word	0x000003cf
   26930:	0003c464 	.word	0x0003c464
   26934:	0003be1c 	.word	0x0003be1c
   26938:	00020109 	.word	0x00020109
   2693c:	0003c1d0 	.word	0x0003c1d0
   26940:	0003be5c 	.word	0x0003be5c
   26944:	0002649d 	.word	0x0002649d
   26948:	000003d9 	.word	0x000003d9
   2694c:	0003c200 	.word	0x0003c200
   26950:	0002596d 	.word	0x0002596d
   26954:	000003e1 	.word	0x000003e1
   26958:	00022579 	.word	0x00022579
   2695c:	0002562d 	.word	0x0002562d
   26960:	00025a6d 	.word	0x00025a6d
   26964:	000003eb 	.word	0x000003eb
   26968:	0003c228 	.word	0x0003c228

0002696c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   2696c:	b590      	push	{r4, r7, lr}
   2696e:	b087      	sub	sp, #28
   26970:	af02      	add	r7, sp, #8
   26972:	6078      	str	r0, [r7, #4]
   26974:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   26976:	230f      	movs	r3, #15
   26978:	18fb      	adds	r3, r7, r3
   2697a:	220a      	movs	r2, #10
   2697c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2697e:	230c      	movs	r3, #12
   26980:	18fb      	adds	r3, r7, r3
   26982:	2201      	movs	r2, #1
   26984:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   26986:	230e      	movs	r3, #14
   26988:	18fb      	adds	r3, r7, r3
   2698a:	22ca      	movs	r2, #202	; 0xca
   2698c:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   2698e:	230d      	movs	r3, #13
   26990:	18fb      	adds	r3, r7, r3
   26992:	2200      	movs	r2, #0
   26994:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   26996:	687b      	ldr	r3, [r7, #4]
   26998:	2bff      	cmp	r3, #255	; 0xff
   2699a:	d808      	bhi.n	269ae <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   2699c:	230e      	movs	r3, #14
   2699e:	18fb      	adds	r3, r7, r3
   269a0:	22c4      	movs	r2, #196	; 0xc4
   269a2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   269a4:	230d      	movs	r3, #13
   269a6:	18fb      	adds	r3, r7, r3
   269a8:	2201      	movs	r2, #1
   269aa:	701a      	strb	r2, [r3, #0]
   269ac:	e007      	b.n	269be <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   269ae:	230e      	movs	r3, #14
   269b0:	18fb      	adds	r3, r7, r3
   269b2:	22ca      	movs	r2, #202	; 0xca
   269b4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   269b6:	230d      	movs	r3, #13
   269b8:	18fb      	adds	r3, r7, r3
   269ba:	2200      	movs	r2, #0
   269bc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   269be:	2308      	movs	r3, #8
   269c0:	18fa      	adds	r2, r7, r3
   269c2:	6879      	ldr	r1, [r7, #4]
   269c4:	230e      	movs	r3, #14
   269c6:	18fb      	adds	r3, r7, r3
   269c8:	7818      	ldrb	r0, [r3, #0]
   269ca:	230d      	movs	r3, #13
   269cc:	18fb      	adds	r3, r7, r3
   269ce:	781b      	ldrb	r3, [r3, #0]
   269d0:	9300      	str	r3, [sp, #0]
   269d2:	2304      	movs	r3, #4
   269d4:	4c37      	ldr	r4, [pc, #220]	; (26ab4 <spi_read_reg+0x148>)
   269d6:	47a0      	blx	r4
   269d8:	0002      	movs	r2, r0
   269da:	230c      	movs	r3, #12
   269dc:	18fb      	adds	r3, r7, r3
   269de:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   269e0:	230c      	movs	r3, #12
   269e2:	18fb      	adds	r3, r7, r3
   269e4:	781b      	ldrb	r3, [r3, #0]
   269e6:	b25b      	sxtb	r3, r3
   269e8:	2b01      	cmp	r3, #1
   269ea:	d010      	beq.n	26a0e <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   269ec:	4a32      	ldr	r2, [pc, #200]	; (26ab8 <spi_read_reg+0x14c>)
   269ee:	4933      	ldr	r1, [pc, #204]	; (26abc <spi_read_reg+0x150>)
   269f0:	4b33      	ldr	r3, [pc, #204]	; (26ac0 <spi_read_reg+0x154>)
   269f2:	0018      	movs	r0, r3
   269f4:	4b33      	ldr	r3, [pc, #204]	; (26ac4 <spi_read_reg+0x158>)
   269f6:	4798      	blx	r3
   269f8:	687a      	ldr	r2, [r7, #4]
   269fa:	4b33      	ldr	r3, [pc, #204]	; (26ac8 <spi_read_reg+0x15c>)
   269fc:	0011      	movs	r1, r2
   269fe:	0018      	movs	r0, r3
   26a00:	4b30      	ldr	r3, [pc, #192]	; (26ac4 <spi_read_reg+0x158>)
   26a02:	4798      	blx	r3
   26a04:	4b31      	ldr	r3, [pc, #196]	; (26acc <spi_read_reg+0x160>)
   26a06:	0018      	movs	r0, r3
   26a08:	4b2e      	ldr	r3, [pc, #184]	; (26ac4 <spi_read_reg+0x158>)
   26a0a:	4798      	blx	r3
		goto _FAIL_;
   26a0c:	e014      	b.n	26a38 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   26a0e:	2308      	movs	r3, #8
   26a10:	18fb      	adds	r3, r7, r3
   26a12:	781b      	ldrb	r3, [r3, #0]
   26a14:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   26a16:	2308      	movs	r3, #8
   26a18:	18fb      	adds	r3, r7, r3
   26a1a:	785b      	ldrb	r3, [r3, #1]
   26a1c:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   26a1e:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   26a20:	2308      	movs	r3, #8
   26a22:	18fb      	adds	r3, r7, r3
   26a24:	789b      	ldrb	r3, [r3, #2]
   26a26:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   26a28:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   26a2a:	2308      	movs	r3, #8
   26a2c:	18fb      	adds	r3, r7, r3
   26a2e:	78db      	ldrb	r3, [r3, #3]
   26a30:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   26a32:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   26a34:	683b      	ldr	r3, [r7, #0]
   26a36:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   26a38:	230c      	movs	r3, #12
   26a3a:	18fb      	adds	r3, r7, r3
   26a3c:	781b      	ldrb	r3, [r3, #0]
   26a3e:	b25b      	sxtb	r3, r3
   26a40:	2b01      	cmp	r3, #1
   26a42:	d02f      	beq.n	26aa4 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   26a44:	2001      	movs	r0, #1
   26a46:	4b22      	ldr	r3, [pc, #136]	; (26ad0 <spi_read_reg+0x164>)
   26a48:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26a4a:	2300      	movs	r3, #0
   26a4c:	9300      	str	r3, [sp, #0]
   26a4e:	2300      	movs	r3, #0
   26a50:	2200      	movs	r2, #0
   26a52:	2100      	movs	r1, #0
   26a54:	20cf      	movs	r0, #207	; 0xcf
   26a56:	4c1f      	ldr	r4, [pc, #124]	; (26ad4 <spi_read_reg+0x168>)
   26a58:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26a5a:	20cf      	movs	r0, #207	; 0xcf
   26a5c:	4b1e      	ldr	r3, [pc, #120]	; (26ad8 <spi_read_reg+0x16c>)
   26a5e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   26a60:	4a1e      	ldr	r2, [pc, #120]	; (26adc <spi_read_reg+0x170>)
   26a62:	4916      	ldr	r1, [pc, #88]	; (26abc <spi_read_reg+0x150>)
   26a64:	4b16      	ldr	r3, [pc, #88]	; (26ac0 <spi_read_reg+0x154>)
   26a66:	0018      	movs	r0, r3
   26a68:	4b16      	ldr	r3, [pc, #88]	; (26ac4 <spi_read_reg+0x158>)
   26a6a:	4798      	blx	r3
   26a6c:	230f      	movs	r3, #15
   26a6e:	18fb      	adds	r3, r7, r3
   26a70:	7819      	ldrb	r1, [r3, #0]
   26a72:	687a      	ldr	r2, [r7, #4]
   26a74:	4b1a      	ldr	r3, [pc, #104]	; (26ae0 <spi_read_reg+0x174>)
   26a76:	0018      	movs	r0, r3
   26a78:	4b12      	ldr	r3, [pc, #72]	; (26ac4 <spi_read_reg+0x158>)
   26a7a:	4798      	blx	r3
   26a7c:	4b13      	ldr	r3, [pc, #76]	; (26acc <spi_read_reg+0x160>)
   26a7e:	0018      	movs	r0, r3
   26a80:	4b10      	ldr	r3, [pc, #64]	; (26ac4 <spi_read_reg+0x158>)
   26a82:	4798      	blx	r3
		nm_bsp_sleep(1);
   26a84:	2001      	movs	r0, #1
   26a86:	4b12      	ldr	r3, [pc, #72]	; (26ad0 <spi_read_reg+0x164>)
   26a88:	4798      	blx	r3
		retry--;
   26a8a:	230f      	movs	r3, #15
   26a8c:	18fb      	adds	r3, r7, r3
   26a8e:	781a      	ldrb	r2, [r3, #0]
   26a90:	230f      	movs	r3, #15
   26a92:	18fb      	adds	r3, r7, r3
   26a94:	3a01      	subs	r2, #1
   26a96:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26a98:	230f      	movs	r3, #15
   26a9a:	18fb      	adds	r3, r7, r3
   26a9c:	781b      	ldrb	r3, [r3, #0]
   26a9e:	2b00      	cmp	r3, #0
   26aa0:	d000      	beq.n	26aa4 <spi_read_reg+0x138>
   26aa2:	e778      	b.n	26996 <spi_read_reg+0x2a>
	}
		
	return result;
   26aa4:	230c      	movs	r3, #12
   26aa6:	18fb      	adds	r3, r7, r3
   26aa8:	781b      	ldrb	r3, [r3, #0]
   26aaa:	b25b      	sxtb	r3, r3
}
   26aac:	0018      	movs	r0, r3
   26aae:	46bd      	mov	sp, r7
   26ab0:	b005      	add	sp, #20
   26ab2:	bd90      	pop	{r4, r7, pc}
   26ab4:	00025ba9 	.word	0x00025ba9
   26ab8:	00000423 	.word	0x00000423
   26abc:	0003c474 	.word	0x0003c474
   26ac0:	0003be1c 	.word	0x0003be1c
   26ac4:	00020109 	.word	0x00020109
   26ac8:	0003c244 	.word	0x0003c244
   26acc:	0003be5c 	.word	0x0003be5c
   26ad0:	00022579 	.word	0x00022579
   26ad4:	0002562d 	.word	0x0002562d
   26ad8:	00025a6d 	.word	0x00025a6d
   26adc:	00000435 	.word	0x00000435
   26ae0:	0003c270 	.word	0x0003c270

00026ae4 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   26ae4:	b590      	push	{r4, r7, lr}
   26ae6:	b089      	sub	sp, #36	; 0x24
   26ae8:	af02      	add	r7, sp, #8
   26aea:	60f8      	str	r0, [r7, #12]
   26aec:	60b9      	str	r1, [r7, #8]
   26aee:	1dbb      	adds	r3, r7, #6
   26af0:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   26af2:	2316      	movs	r3, #22
   26af4:	18fb      	adds	r3, r7, r3
   26af6:	22c8      	movs	r2, #200	; 0xc8
   26af8:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   26afa:	2317      	movs	r3, #23
   26afc:	18fb      	adds	r3, r7, r3
   26afe:	220a      	movs	r2, #10
   26b00:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   26b02:	1dbb      	adds	r3, r7, #6
   26b04:	881c      	ldrh	r4, [r3, #0]
   26b06:	68ba      	ldr	r2, [r7, #8]
   26b08:	68f9      	ldr	r1, [r7, #12]
   26b0a:	2316      	movs	r3, #22
   26b0c:	18fb      	adds	r3, r7, r3
   26b0e:	7818      	ldrb	r0, [r3, #0]
   26b10:	2300      	movs	r3, #0
   26b12:	9300      	str	r3, [sp, #0]
   26b14:	0023      	movs	r3, r4
   26b16:	4c2e      	ldr	r4, [pc, #184]	; (26bd0 <nm_spi_read+0xec>)
   26b18:	47a0      	blx	r4
   26b1a:	0002      	movs	r2, r0
   26b1c:	2315      	movs	r3, #21
   26b1e:	18fb      	adds	r3, r7, r3
   26b20:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26b22:	2315      	movs	r3, #21
   26b24:	18fb      	adds	r3, r7, r3
   26b26:	781b      	ldrb	r3, [r3, #0]
   26b28:	b25b      	sxtb	r3, r3
   26b2a:	2b01      	cmp	r3, #1
   26b2c:	d010      	beq.n	26b50 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   26b2e:	4a29      	ldr	r2, [pc, #164]	; (26bd4 <nm_spi_read+0xf0>)
   26b30:	4929      	ldr	r1, [pc, #164]	; (26bd8 <nm_spi_read+0xf4>)
   26b32:	4b2a      	ldr	r3, [pc, #168]	; (26bdc <nm_spi_read+0xf8>)
   26b34:	0018      	movs	r0, r3
   26b36:	4b2a      	ldr	r3, [pc, #168]	; (26be0 <nm_spi_read+0xfc>)
   26b38:	4798      	blx	r3
   26b3a:	68fa      	ldr	r2, [r7, #12]
   26b3c:	4b29      	ldr	r3, [pc, #164]	; (26be4 <nm_spi_read+0x100>)
   26b3e:	0011      	movs	r1, r2
   26b40:	0018      	movs	r0, r3
   26b42:	4b27      	ldr	r3, [pc, #156]	; (26be0 <nm_spi_read+0xfc>)
   26b44:	4798      	blx	r3
   26b46:	4b28      	ldr	r3, [pc, #160]	; (26be8 <nm_spi_read+0x104>)
   26b48:	0018      	movs	r0, r3
   26b4a:	4b25      	ldr	r3, [pc, #148]	; (26be0 <nm_spi_read+0xfc>)
   26b4c:	4798      	blx	r3
		goto _FAIL_;
   26b4e:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   26b50:	2315      	movs	r3, #21
   26b52:	18fb      	adds	r3, r7, r3
   26b54:	781b      	ldrb	r3, [r3, #0]
   26b56:	b25b      	sxtb	r3, r3
   26b58:	2b01      	cmp	r3, #1
   26b5a:	d030      	beq.n	26bbe <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   26b5c:	2001      	movs	r0, #1
   26b5e:	4b23      	ldr	r3, [pc, #140]	; (26bec <nm_spi_read+0x108>)
   26b60:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26b62:	2300      	movs	r3, #0
   26b64:	9300      	str	r3, [sp, #0]
   26b66:	2300      	movs	r3, #0
   26b68:	2200      	movs	r2, #0
   26b6a:	2100      	movs	r1, #0
   26b6c:	20cf      	movs	r0, #207	; 0xcf
   26b6e:	4c20      	ldr	r4, [pc, #128]	; (26bf0 <nm_spi_read+0x10c>)
   26b70:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26b72:	20cf      	movs	r0, #207	; 0xcf
   26b74:	4b1f      	ldr	r3, [pc, #124]	; (26bf4 <nm_spi_read+0x110>)
   26b76:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   26b78:	4a1f      	ldr	r2, [pc, #124]	; (26bf8 <nm_spi_read+0x114>)
   26b7a:	4917      	ldr	r1, [pc, #92]	; (26bd8 <nm_spi_read+0xf4>)
   26b7c:	4b17      	ldr	r3, [pc, #92]	; (26bdc <nm_spi_read+0xf8>)
   26b7e:	0018      	movs	r0, r3
   26b80:	4b17      	ldr	r3, [pc, #92]	; (26be0 <nm_spi_read+0xfc>)
   26b82:	4798      	blx	r3
   26b84:	2317      	movs	r3, #23
   26b86:	18fb      	adds	r3, r7, r3
   26b88:	7819      	ldrb	r1, [r3, #0]
   26b8a:	1dbb      	adds	r3, r7, #6
   26b8c:	881b      	ldrh	r3, [r3, #0]
   26b8e:	68fa      	ldr	r2, [r7, #12]
   26b90:	481a      	ldr	r0, [pc, #104]	; (26bfc <nm_spi_read+0x118>)
   26b92:	4c13      	ldr	r4, [pc, #76]	; (26be0 <nm_spi_read+0xfc>)
   26b94:	47a0      	blx	r4
   26b96:	4b14      	ldr	r3, [pc, #80]	; (26be8 <nm_spi_read+0x104>)
   26b98:	0018      	movs	r0, r3
   26b9a:	4b11      	ldr	r3, [pc, #68]	; (26be0 <nm_spi_read+0xfc>)
   26b9c:	4798      	blx	r3
		nm_bsp_sleep(1);
   26b9e:	2001      	movs	r0, #1
   26ba0:	4b12      	ldr	r3, [pc, #72]	; (26bec <nm_spi_read+0x108>)
   26ba2:	4798      	blx	r3
		retry--;
   26ba4:	2317      	movs	r3, #23
   26ba6:	18fb      	adds	r3, r7, r3
   26ba8:	781a      	ldrb	r2, [r3, #0]
   26baa:	2317      	movs	r3, #23
   26bac:	18fb      	adds	r3, r7, r3
   26bae:	3a01      	subs	r2, #1
   26bb0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26bb2:	2317      	movs	r3, #23
   26bb4:	18fb      	adds	r3, r7, r3
   26bb6:	781b      	ldrb	r3, [r3, #0]
   26bb8:	2b00      	cmp	r3, #0
   26bba:	d000      	beq.n	26bbe <nm_spi_read+0xda>
   26bbc:	e7a1      	b.n	26b02 <nm_spi_read+0x1e>
	}

	return result;
   26bbe:	2315      	movs	r3, #21
   26bc0:	18fb      	adds	r3, r7, r3
   26bc2:	781b      	ldrb	r3, [r3, #0]
   26bc4:	b25b      	sxtb	r3, r3
}
   26bc6:	0018      	movs	r0, r3
   26bc8:	46bd      	mov	sp, r7
   26bca:	b007      	add	sp, #28
   26bcc:	bd90      	pop	{r4, r7, pc}
   26bce:	46c0      	nop			; (mov r8, r8)
   26bd0:	00025ba9 	.word	0x00025ba9
   26bd4:	00000472 	.word	0x00000472
   26bd8:	0003c484 	.word	0x0003c484
   26bdc:	0003be1c 	.word	0x0003be1c
   26be0:	00020109 	.word	0x00020109
   26be4:	0003c288 	.word	0x0003c288
   26be8:	0003be5c 	.word	0x0003be5c
   26bec:	00022579 	.word	0x00022579
   26bf0:	0002562d 	.word	0x0002562d
   26bf4:	00025a6d 	.word	0x00025a6d
   26bf8:	0000047d 	.word	0x0000047d
   26bfc:	0003c228 	.word	0x0003c228

00026c00 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   26c00:	b580      	push	{r7, lr}
   26c02:	b082      	sub	sp, #8
   26c04:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   26c06:	4b0c      	ldr	r3, [pc, #48]	; (26c38 <spi_init_pkt_sz+0x38>)
   26c08:	0018      	movs	r0, r3
   26c0a:	4b0c      	ldr	r3, [pc, #48]	; (26c3c <spi_init_pkt_sz+0x3c>)
   26c0c:	4798      	blx	r3
   26c0e:	0003      	movs	r3, r0
   26c10:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   26c12:	687b      	ldr	r3, [r7, #4]
   26c14:	2270      	movs	r2, #112	; 0x70
   26c16:	4393      	bics	r3, r2
   26c18:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   26c1a:	687b      	ldr	r3, [r7, #4]
   26c1c:	2250      	movs	r2, #80	; 0x50
   26c1e:	4313      	orrs	r3, r2
   26c20:	607b      	str	r3, [r7, #4]
   26c22:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   26c24:	687b      	ldr	r3, [r7, #4]
   26c26:	4a04      	ldr	r2, [pc, #16]	; (26c38 <spi_init_pkt_sz+0x38>)
   26c28:	0019      	movs	r1, r3
   26c2a:	0010      	movs	r0, r2
   26c2c:	4b04      	ldr	r3, [pc, #16]	; (26c40 <spi_init_pkt_sz+0x40>)
   26c2e:	4798      	blx	r3
}
   26c30:	46c0      	nop			; (mov r8, r8)
   26c32:	46bd      	mov	sp, r7
   26c34:	b002      	add	sp, #8
   26c36:	bd80      	pop	{r7, pc}
   26c38:	0000e824 	.word	0x0000e824
   26c3c:	00026dd9 	.word	0x00026dd9
   26c40:	00026e4d 	.word	0x00026e4d

00026c44 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   26c44:	b590      	push	{r4, r7, lr}
   26c46:	b083      	sub	sp, #12
   26c48:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26c4a:	2300      	movs	r3, #0
   26c4c:	9300      	str	r3, [sp, #0]
   26c4e:	2300      	movs	r3, #0
   26c50:	2200      	movs	r2, #0
   26c52:	2100      	movs	r1, #0
   26c54:	20cf      	movs	r0, #207	; 0xcf
   26c56:	4c05      	ldr	r4, [pc, #20]	; (26c6c <nm_spi_reset+0x28>)
   26c58:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   26c5a:	20cf      	movs	r0, #207	; 0xcf
   26c5c:	4b04      	ldr	r3, [pc, #16]	; (26c70 <nm_spi_reset+0x2c>)
   26c5e:	4798      	blx	r3
	return M2M_SUCCESS;
   26c60:	2300      	movs	r3, #0
}
   26c62:	0018      	movs	r0, r3
   26c64:	46bd      	mov	sp, r7
   26c66:	b001      	add	sp, #4
   26c68:	bd90      	pop	{r4, r7, pc}
   26c6a:	46c0      	nop			; (mov r8, r8)
   26c6c:	0002562d 	.word	0x0002562d
   26c70:	00025a6d 	.word	0x00025a6d

00026c74 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   26c74:	b580      	push	{r7, lr}
   26c76:	b082      	sub	sp, #8
   26c78:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   26c7a:	2300      	movs	r3, #0
   26c7c:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   26c7e:	4b40      	ldr	r3, [pc, #256]	; (26d80 <nm_spi_init+0x10c>)
   26c80:	2200      	movs	r2, #0
   26c82:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   26c84:	003b      	movs	r3, r7
   26c86:	4a3f      	ldr	r2, [pc, #252]	; (26d84 <nm_spi_init+0x110>)
   26c88:	0019      	movs	r1, r3
   26c8a:	0010      	movs	r0, r2
   26c8c:	4b3e      	ldr	r3, [pc, #248]	; (26d88 <nm_spi_init+0x114>)
   26c8e:	4798      	blx	r3
   26c90:	1e03      	subs	r3, r0, #0
   26c92:	d129      	bne.n	26ce8 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   26c94:	4b3a      	ldr	r3, [pc, #232]	; (26d80 <nm_spi_init+0x10c>)
   26c96:	2201      	movs	r2, #1
   26c98:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   26c9a:	2398      	movs	r3, #152	; 0x98
   26c9c:	00da      	lsls	r2, r3, #3
   26c9e:	493b      	ldr	r1, [pc, #236]	; (26d8c <nm_spi_init+0x118>)
   26ca0:	4b3b      	ldr	r3, [pc, #236]	; (26d90 <nm_spi_init+0x11c>)
   26ca2:	0018      	movs	r0, r3
   26ca4:	4b3b      	ldr	r3, [pc, #236]	; (26d94 <nm_spi_init+0x120>)
   26ca6:	4798      	blx	r3
   26ca8:	4b3b      	ldr	r3, [pc, #236]	; (26d98 <nm_spi_init+0x124>)
   26caa:	0018      	movs	r0, r3
   26cac:	4b39      	ldr	r3, [pc, #228]	; (26d94 <nm_spi_init+0x120>)
   26cae:	4798      	blx	r3
   26cb0:	4b3a      	ldr	r3, [pc, #232]	; (26d9c <nm_spi_init+0x128>)
   26cb2:	0018      	movs	r0, r3
   26cb4:	4b37      	ldr	r3, [pc, #220]	; (26d94 <nm_spi_init+0x120>)
   26cb6:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   26cb8:	003b      	movs	r3, r7
   26cba:	4a32      	ldr	r2, [pc, #200]	; (26d84 <nm_spi_init+0x110>)
   26cbc:	0019      	movs	r1, r3
   26cbe:	0010      	movs	r0, r2
   26cc0:	4b31      	ldr	r3, [pc, #196]	; (26d88 <nm_spi_init+0x114>)
   26cc2:	4798      	blx	r3
   26cc4:	1e03      	subs	r3, r0, #0
   26cc6:	d10f      	bne.n	26ce8 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   26cc8:	4a35      	ldr	r2, [pc, #212]	; (26da0 <nm_spi_init+0x12c>)
   26cca:	4930      	ldr	r1, [pc, #192]	; (26d8c <nm_spi_init+0x118>)
   26ccc:	4b30      	ldr	r3, [pc, #192]	; (26d90 <nm_spi_init+0x11c>)
   26cce:	0018      	movs	r0, r3
   26cd0:	4b30      	ldr	r3, [pc, #192]	; (26d94 <nm_spi_init+0x120>)
   26cd2:	4798      	blx	r3
   26cd4:	4b33      	ldr	r3, [pc, #204]	; (26da4 <nm_spi_init+0x130>)
   26cd6:	0018      	movs	r0, r3
   26cd8:	4b2e      	ldr	r3, [pc, #184]	; (26d94 <nm_spi_init+0x120>)
   26cda:	4798      	blx	r3
   26cdc:	4b2f      	ldr	r3, [pc, #188]	; (26d9c <nm_spi_init+0x128>)
   26cde:	0018      	movs	r0, r3
   26ce0:	4b2c      	ldr	r3, [pc, #176]	; (26d94 <nm_spi_init+0x120>)
   26ce2:	4798      	blx	r3
			return 0;
   26ce4:	2300      	movs	r3, #0
   26ce6:	e047      	b.n	26d78 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   26ce8:	4b25      	ldr	r3, [pc, #148]	; (26d80 <nm_spi_init+0x10c>)
   26cea:	781b      	ldrb	r3, [r3, #0]
   26cec:	2b00      	cmp	r3, #0
   26cee:	d126      	bne.n	26d3e <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   26cf0:	683b      	ldr	r3, [r7, #0]
   26cf2:	220c      	movs	r2, #12
   26cf4:	4393      	bics	r3, r2
   26cf6:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   26cf8:	683b      	ldr	r3, [r7, #0]
   26cfa:	2270      	movs	r2, #112	; 0x70
   26cfc:	4393      	bics	r3, r2
   26cfe:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   26d00:	683b      	ldr	r3, [r7, #0]
   26d02:	2250      	movs	r2, #80	; 0x50
   26d04:	4313      	orrs	r3, r2
   26d06:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   26d08:	683b      	ldr	r3, [r7, #0]
   26d0a:	4a1e      	ldr	r2, [pc, #120]	; (26d84 <nm_spi_init+0x110>)
   26d0c:	0019      	movs	r1, r3
   26d0e:	0010      	movs	r0, r2
   26d10:	4b25      	ldr	r3, [pc, #148]	; (26da8 <nm_spi_init+0x134>)
   26d12:	4798      	blx	r3
   26d14:	1e03      	subs	r3, r0, #0
   26d16:	d10f      	bne.n	26d38 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   26d18:	4a24      	ldr	r2, [pc, #144]	; (26dac <nm_spi_init+0x138>)
   26d1a:	491c      	ldr	r1, [pc, #112]	; (26d8c <nm_spi_init+0x118>)
   26d1c:	4b1c      	ldr	r3, [pc, #112]	; (26d90 <nm_spi_init+0x11c>)
   26d1e:	0018      	movs	r0, r3
   26d20:	4b1c      	ldr	r3, [pc, #112]	; (26d94 <nm_spi_init+0x120>)
   26d22:	4798      	blx	r3
   26d24:	4b22      	ldr	r3, [pc, #136]	; (26db0 <nm_spi_init+0x13c>)
   26d26:	0018      	movs	r0, r3
   26d28:	4b1a      	ldr	r3, [pc, #104]	; (26d94 <nm_spi_init+0x120>)
   26d2a:	4798      	blx	r3
   26d2c:	4b1b      	ldr	r3, [pc, #108]	; (26d9c <nm_spi_init+0x128>)
   26d2e:	0018      	movs	r0, r3
   26d30:	4b18      	ldr	r3, [pc, #96]	; (26d94 <nm_spi_init+0x120>)
   26d32:	4798      	blx	r3
			return 0;
   26d34:	2300      	movs	r3, #0
   26d36:	e01f      	b.n	26d78 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   26d38:	4b11      	ldr	r3, [pc, #68]	; (26d80 <nm_spi_init+0x10c>)
   26d3a:	2201      	movs	r2, #1
   26d3c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   26d3e:	1d3a      	adds	r2, r7, #4
   26d40:	2380      	movs	r3, #128	; 0x80
   26d42:	015b      	lsls	r3, r3, #5
   26d44:	0011      	movs	r1, r2
   26d46:	0018      	movs	r0, r3
   26d48:	4b0f      	ldr	r3, [pc, #60]	; (26d88 <nm_spi_init+0x114>)
   26d4a:	4798      	blx	r3
   26d4c:	1e03      	subs	r3, r0, #0
   26d4e:	d110      	bne.n	26d72 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   26d50:	4a18      	ldr	r2, [pc, #96]	; (26db4 <nm_spi_init+0x140>)
   26d52:	490e      	ldr	r1, [pc, #56]	; (26d8c <nm_spi_init+0x118>)
   26d54:	4b0e      	ldr	r3, [pc, #56]	; (26d90 <nm_spi_init+0x11c>)
   26d56:	0018      	movs	r0, r3
   26d58:	4b0e      	ldr	r3, [pc, #56]	; (26d94 <nm_spi_init+0x120>)
   26d5a:	4798      	blx	r3
   26d5c:	4b16      	ldr	r3, [pc, #88]	; (26db8 <nm_spi_init+0x144>)
   26d5e:	0018      	movs	r0, r3
   26d60:	4b0c      	ldr	r3, [pc, #48]	; (26d94 <nm_spi_init+0x120>)
   26d62:	4798      	blx	r3
   26d64:	4b0d      	ldr	r3, [pc, #52]	; (26d9c <nm_spi_init+0x128>)
   26d66:	0018      	movs	r0, r3
   26d68:	4b0a      	ldr	r3, [pc, #40]	; (26d94 <nm_spi_init+0x120>)
   26d6a:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   26d6c:	2306      	movs	r3, #6
   26d6e:	425b      	negs	r3, r3
   26d70:	e002      	b.n	26d78 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   26d72:	4b12      	ldr	r3, [pc, #72]	; (26dbc <nm_spi_init+0x148>)
   26d74:	4798      	blx	r3


	return M2M_SUCCESS;
   26d76:	2300      	movs	r3, #0
}
   26d78:	0018      	movs	r0, r3
   26d7a:	46bd      	mov	sp, r7
   26d7c:	b002      	add	sp, #8
   26d7e:	bd80      	pop	{r7, pc}
   26d80:	20004110 	.word	0x20004110
   26d84:	0000e824 	.word	0x0000e824
   26d88:	0002696d 	.word	0x0002696d
   26d8c:	0003c490 	.word	0x0003c490
   26d90:	0003be1c 	.word	0x0003be1c
   26d94:	00020109 	.word	0x00020109
   26d98:	0003c2b8 	.word	0x0003c2b8
   26d9c:	0003be5c 	.word	0x0003be5c
   26da0:	000004c3 	.word	0x000004c3
   26da4:	0003c308 	.word	0x0003c308
   26da8:	00026675 	.word	0x00026675
   26dac:	000004cd 	.word	0x000004cd
   26db0:	0003c338 	.word	0x0003c338
   26db4:	000004d7 	.word	0x000004d7
   26db8:	0003c36c 	.word	0x0003c36c
   26dbc:	00026c01 	.word	0x00026c01

00026dc0 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   26dc0:	b580      	push	{r7, lr}
   26dc2:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   26dc4:	4b03      	ldr	r3, [pc, #12]	; (26dd4 <nm_spi_deinit+0x14>)
   26dc6:	2200      	movs	r2, #0
   26dc8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   26dca:	2300      	movs	r3, #0
}
   26dcc:	0018      	movs	r0, r3
   26dce:	46bd      	mov	sp, r7
   26dd0:	bd80      	pop	{r7, pc}
   26dd2:	46c0      	nop			; (mov r8, r8)
   26dd4:	20004110 	.word	0x20004110

00026dd8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   26dd8:	b580      	push	{r7, lr}
   26dda:	b084      	sub	sp, #16
   26ddc:	af00      	add	r7, sp, #0
   26dde:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   26de0:	230c      	movs	r3, #12
   26de2:	18fa      	adds	r2, r7, r3
   26de4:	687b      	ldr	r3, [r7, #4]
   26de6:	0011      	movs	r1, r2
   26de8:	0018      	movs	r0, r3
   26dea:	4b03      	ldr	r3, [pc, #12]	; (26df8 <nm_spi_read_reg+0x20>)
   26dec:	4798      	blx	r3

	return u32Val;
   26dee:	68fb      	ldr	r3, [r7, #12]
}
   26df0:	0018      	movs	r0, r3
   26df2:	46bd      	mov	sp, r7
   26df4:	b004      	add	sp, #16
   26df6:	bd80      	pop	{r7, pc}
   26df8:	0002696d 	.word	0x0002696d

00026dfc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   26dfc:	b590      	push	{r4, r7, lr}
   26dfe:	b085      	sub	sp, #20
   26e00:	af00      	add	r7, sp, #0
   26e02:	6078      	str	r0, [r7, #4]
   26e04:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   26e06:	230f      	movs	r3, #15
   26e08:	18fc      	adds	r4, r7, r3
   26e0a:	683a      	ldr	r2, [r7, #0]
   26e0c:	687b      	ldr	r3, [r7, #4]
   26e0e:	0011      	movs	r1, r2
   26e10:	0018      	movs	r0, r3
   26e12:	4b0d      	ldr	r3, [pc, #52]	; (26e48 <nm_spi_read_reg_with_ret+0x4c>)
   26e14:	4798      	blx	r3
   26e16:	0003      	movs	r3, r0
   26e18:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   26e1a:	230f      	movs	r3, #15
   26e1c:	18fb      	adds	r3, r7, r3
   26e1e:	781b      	ldrb	r3, [r3, #0]
   26e20:	b25b      	sxtb	r3, r3
   26e22:	2b01      	cmp	r3, #1
   26e24:	d104      	bne.n	26e30 <nm_spi_read_reg_with_ret+0x34>
   26e26:	230f      	movs	r3, #15
   26e28:	18fb      	adds	r3, r7, r3
   26e2a:	2200      	movs	r2, #0
   26e2c:	701a      	strb	r2, [r3, #0]
   26e2e:	e003      	b.n	26e38 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   26e30:	230f      	movs	r3, #15
   26e32:	18fb      	adds	r3, r7, r3
   26e34:	22fa      	movs	r2, #250	; 0xfa
   26e36:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   26e38:	230f      	movs	r3, #15
   26e3a:	18fb      	adds	r3, r7, r3
   26e3c:	781b      	ldrb	r3, [r3, #0]
   26e3e:	b25b      	sxtb	r3, r3
}
   26e40:	0018      	movs	r0, r3
   26e42:	46bd      	mov	sp, r7
   26e44:	b005      	add	sp, #20
   26e46:	bd90      	pop	{r4, r7, pc}
   26e48:	0002696d 	.word	0x0002696d

00026e4c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   26e4c:	b590      	push	{r4, r7, lr}
   26e4e:	b085      	sub	sp, #20
   26e50:	af00      	add	r7, sp, #0
   26e52:	6078      	str	r0, [r7, #4]
   26e54:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   26e56:	230f      	movs	r3, #15
   26e58:	18fc      	adds	r4, r7, r3
   26e5a:	683a      	ldr	r2, [r7, #0]
   26e5c:	687b      	ldr	r3, [r7, #4]
   26e5e:	0011      	movs	r1, r2
   26e60:	0018      	movs	r0, r3
   26e62:	4b0d      	ldr	r3, [pc, #52]	; (26e98 <nm_spi_write_reg+0x4c>)
   26e64:	4798      	blx	r3
   26e66:	0003      	movs	r3, r0
   26e68:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   26e6a:	230f      	movs	r3, #15
   26e6c:	18fb      	adds	r3, r7, r3
   26e6e:	781b      	ldrb	r3, [r3, #0]
   26e70:	b25b      	sxtb	r3, r3
   26e72:	2b01      	cmp	r3, #1
   26e74:	d104      	bne.n	26e80 <nm_spi_write_reg+0x34>
   26e76:	230f      	movs	r3, #15
   26e78:	18fb      	adds	r3, r7, r3
   26e7a:	2200      	movs	r2, #0
   26e7c:	701a      	strb	r2, [r3, #0]
   26e7e:	e003      	b.n	26e88 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   26e80:	230f      	movs	r3, #15
   26e82:	18fb      	adds	r3, r7, r3
   26e84:	22fa      	movs	r2, #250	; 0xfa
   26e86:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   26e88:	230f      	movs	r3, #15
   26e8a:	18fb      	adds	r3, r7, r3
   26e8c:	781b      	ldrb	r3, [r3, #0]
   26e8e:	b25b      	sxtb	r3, r3
}
   26e90:	0018      	movs	r0, r3
   26e92:	46bd      	mov	sp, r7
   26e94:	b005      	add	sp, #20
   26e96:	bd90      	pop	{r4, r7, pc}
   26e98:	00026675 	.word	0x00026675

00026e9c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   26e9c:	b590      	push	{r4, r7, lr}
   26e9e:	b087      	sub	sp, #28
   26ea0:	af00      	add	r7, sp, #0
   26ea2:	60f8      	str	r0, [r7, #12]
   26ea4:	60b9      	str	r1, [r7, #8]
   26ea6:	1dbb      	adds	r3, r7, #6
   26ea8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   26eaa:	2317      	movs	r3, #23
   26eac:	18fc      	adds	r4, r7, r3
   26eae:	1dbb      	adds	r3, r7, #6
   26eb0:	881a      	ldrh	r2, [r3, #0]
   26eb2:	68b9      	ldr	r1, [r7, #8]
   26eb4:	68fb      	ldr	r3, [r7, #12]
   26eb6:	0018      	movs	r0, r3
   26eb8:	4b0d      	ldr	r3, [pc, #52]	; (26ef0 <nm_spi_read_block+0x54>)
   26eba:	4798      	blx	r3
   26ebc:	0003      	movs	r3, r0
   26ebe:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   26ec0:	2317      	movs	r3, #23
   26ec2:	18fb      	adds	r3, r7, r3
   26ec4:	781b      	ldrb	r3, [r3, #0]
   26ec6:	b25b      	sxtb	r3, r3
   26ec8:	2b01      	cmp	r3, #1
   26eca:	d104      	bne.n	26ed6 <nm_spi_read_block+0x3a>
   26ecc:	2317      	movs	r3, #23
   26ece:	18fb      	adds	r3, r7, r3
   26ed0:	2200      	movs	r2, #0
   26ed2:	701a      	strb	r2, [r3, #0]
   26ed4:	e003      	b.n	26ede <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   26ed6:	2317      	movs	r3, #23
   26ed8:	18fb      	adds	r3, r7, r3
   26eda:	22fa      	movs	r2, #250	; 0xfa
   26edc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   26ede:	2317      	movs	r3, #23
   26ee0:	18fb      	adds	r3, r7, r3
   26ee2:	781b      	ldrb	r3, [r3, #0]
   26ee4:	b25b      	sxtb	r3, r3
}
   26ee6:	0018      	movs	r0, r3
   26ee8:	46bd      	mov	sp, r7
   26eea:	b007      	add	sp, #28
   26eec:	bd90      	pop	{r4, r7, pc}
   26eee:	46c0      	nop			; (mov r8, r8)
   26ef0:	00026ae5 	.word	0x00026ae5

00026ef4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   26ef4:	b590      	push	{r4, r7, lr}
   26ef6:	b087      	sub	sp, #28
   26ef8:	af00      	add	r7, sp, #0
   26efa:	60f8      	str	r0, [r7, #12]
   26efc:	60b9      	str	r1, [r7, #8]
   26efe:	1dbb      	adds	r3, r7, #6
   26f00:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   26f02:	2317      	movs	r3, #23
   26f04:	18fc      	adds	r4, r7, r3
   26f06:	1dbb      	adds	r3, r7, #6
   26f08:	881a      	ldrh	r2, [r3, #0]
   26f0a:	68b9      	ldr	r1, [r7, #8]
   26f0c:	68fb      	ldr	r3, [r7, #12]
   26f0e:	0018      	movs	r0, r3
   26f10:	4b0d      	ldr	r3, [pc, #52]	; (26f48 <nm_spi_write_block+0x54>)
   26f12:	4798      	blx	r3
   26f14:	0003      	movs	r3, r0
   26f16:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   26f18:	2317      	movs	r3, #23
   26f1a:	18fb      	adds	r3, r7, r3
   26f1c:	781b      	ldrb	r3, [r3, #0]
   26f1e:	b25b      	sxtb	r3, r3
   26f20:	2b01      	cmp	r3, #1
   26f22:	d104      	bne.n	26f2e <nm_spi_write_block+0x3a>
   26f24:	2317      	movs	r3, #23
   26f26:	18fb      	adds	r3, r7, r3
   26f28:	2200      	movs	r2, #0
   26f2a:	701a      	strb	r2, [r3, #0]
   26f2c:	e003      	b.n	26f36 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   26f2e:	2317      	movs	r3, #23
   26f30:	18fb      	adds	r3, r7, r3
   26f32:	22fa      	movs	r2, #250	; 0xfa
   26f34:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   26f36:	2317      	movs	r3, #23
   26f38:	18fb      	adds	r3, r7, r3
   26f3a:	781b      	ldrb	r3, [r3, #0]
   26f3c:	b25b      	sxtb	r3, r3
}
   26f3e:	0018      	movs	r0, r3
   26f40:	46bd      	mov	sp, r7
   26f42:	b007      	add	sp, #28
   26f44:	bd90      	pop	{r4, r7, pc}
   26f46:	46c0      	nop			; (mov r8, r8)
   26f48:	000267c1 	.word	0x000267c1

00026f4c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   26f4c:	b590      	push	{r4, r7, lr}
   26f4e:	b089      	sub	sp, #36	; 0x24
   26f50:	af00      	add	r7, sp, #0
   26f52:	60b9      	str	r1, [r7, #8]
   26f54:	0011      	movs	r1, r2
   26f56:	607b      	str	r3, [r7, #4]
   26f58:	230f      	movs	r3, #15
   26f5a:	18fb      	adds	r3, r7, r3
   26f5c:	1c02      	adds	r2, r0, #0
   26f5e:	701a      	strb	r2, [r3, #0]
   26f60:	230e      	movs	r3, #14
   26f62:	18fb      	adds	r3, r7, r3
   26f64:	1c0a      	adds	r2, r1, #0
   26f66:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   26f68:	2330      	movs	r3, #48	; 0x30
   26f6a:	18fb      	adds	r3, r7, r3
   26f6c:	881b      	ldrh	r3, [r3, #0]
   26f6e:	2b00      	cmp	r3, #0
   26f70:	d100      	bne.n	26f74 <Socket_ReadSocketData+0x28>
   26f72:	e0d7      	b.n	27124 <Socket_ReadSocketData+0x1d8>
   26f74:	230f      	movs	r3, #15
   26f76:	18fb      	adds	r3, r7, r3
   26f78:	2200      	movs	r2, #0
   26f7a:	569a      	ldrsb	r2, [r3, r2]
   26f7c:	4b6b      	ldr	r3, [pc, #428]	; (2712c <Socket_ReadSocketData+0x1e0>)
   26f7e:	0112      	lsls	r2, r2, #4
   26f80:	58d3      	ldr	r3, [r2, r3]
   26f82:	2b00      	cmp	r3, #0
   26f84:	d100      	bne.n	26f88 <Socket_ReadSocketData+0x3c>
   26f86:	e0cd      	b.n	27124 <Socket_ReadSocketData+0x1d8>
   26f88:	230f      	movs	r3, #15
   26f8a:	18fb      	adds	r3, r7, r3
   26f8c:	781b      	ldrb	r3, [r3, #0]
   26f8e:	b25b      	sxtb	r3, r3
   26f90:	4a66      	ldr	r2, [pc, #408]	; (2712c <Socket_ReadSocketData+0x1e0>)
   26f92:	011b      	lsls	r3, r3, #4
   26f94:	18d3      	adds	r3, r2, r3
   26f96:	3304      	adds	r3, #4
   26f98:	881b      	ldrh	r3, [r3, #0]
   26f9a:	b29b      	uxth	r3, r3
   26f9c:	2b00      	cmp	r3, #0
   26f9e:	d100      	bne.n	26fa2 <Socket_ReadSocketData+0x56>
   26fa0:	e0c0      	b.n	27124 <Socket_ReadSocketData+0x1d8>
   26fa2:	230f      	movs	r3, #15
   26fa4:	18fb      	adds	r3, r7, r3
   26fa6:	781b      	ldrb	r3, [r3, #0]
   26fa8:	b25b      	sxtb	r3, r3
   26faa:	4a60      	ldr	r2, [pc, #384]	; (2712c <Socket_ReadSocketData+0x1e0>)
   26fac:	011b      	lsls	r3, r3, #4
   26fae:	18d3      	adds	r3, r2, r3
   26fb0:	330a      	adds	r3, #10
   26fb2:	781b      	ldrb	r3, [r3, #0]
   26fb4:	b2db      	uxtb	r3, r3
   26fb6:	2b01      	cmp	r3, #1
   26fb8:	d000      	beq.n	26fbc <Socket_ReadSocketData+0x70>
   26fba:	e0b3      	b.n	27124 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   26fbc:	687b      	ldr	r3, [r7, #4]
   26fbe:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   26fc0:	68bb      	ldr	r3, [r7, #8]
   26fc2:	2230      	movs	r2, #48	; 0x30
   26fc4:	18ba      	adds	r2, r7, r2
   26fc6:	8812      	ldrh	r2, [r2, #0]
   26fc8:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   26fca:	2319      	movs	r3, #25
   26fcc:	18fb      	adds	r3, r7, r3
   26fce:	2201      	movs	r2, #1
   26fd0:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   26fd2:	231a      	movs	r3, #26
   26fd4:	18fb      	adds	r3, r7, r3
   26fd6:	2230      	movs	r2, #48	; 0x30
   26fd8:	18ba      	adds	r2, r7, r2
   26fda:	8812      	ldrh	r2, [r2, #0]
   26fdc:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   26fde:	230f      	movs	r3, #15
   26fe0:	18fb      	adds	r3, r7, r3
   26fe2:	781b      	ldrb	r3, [r3, #0]
   26fe4:	b25b      	sxtb	r3, r3
   26fe6:	4a51      	ldr	r2, [pc, #324]	; (2712c <Socket_ReadSocketData+0x1e0>)
   26fe8:	011b      	lsls	r3, r3, #4
   26fea:	18d3      	adds	r3, r2, r3
   26fec:	3304      	adds	r3, #4
   26fee:	881b      	ldrh	r3, [r3, #0]
   26ff0:	b29b      	uxth	r3, r3
   26ff2:	221a      	movs	r2, #26
   26ff4:	18ba      	adds	r2, r7, r2
   26ff6:	8812      	ldrh	r2, [r2, #0]
   26ff8:	1ad3      	subs	r3, r2, r3
   26ffa:	b29a      	uxth	r2, r3
   26ffc:	2316      	movs	r3, #22
   26ffe:	18fb      	adds	r3, r7, r3
   27000:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   27002:	2316      	movs	r3, #22
   27004:	18fb      	adds	r3, r7, r3
   27006:	2200      	movs	r2, #0
   27008:	5e9b      	ldrsh	r3, [r3, r2]
   2700a:	2b00      	cmp	r3, #0
   2700c:	dd0f      	ble.n	2702e <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   2700e:	2319      	movs	r3, #25
   27010:	18fb      	adds	r3, r7, r3
   27012:	2200      	movs	r2, #0
   27014:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   27016:	230f      	movs	r3, #15
   27018:	18fb      	adds	r3, r7, r3
   2701a:	2200      	movs	r2, #0
   2701c:	569a      	ldrsb	r2, [r3, r2]
   2701e:	231a      	movs	r3, #26
   27020:	18fb      	adds	r3, r7, r3
   27022:	4942      	ldr	r1, [pc, #264]	; (2712c <Socket_ReadSocketData+0x1e0>)
   27024:	0112      	lsls	r2, r2, #4
   27026:	188a      	adds	r2, r1, r2
   27028:	3204      	adds	r2, #4
   2702a:	8812      	ldrh	r2, [r2, #0]
   2702c:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   2702e:	230f      	movs	r3, #15
   27030:	18fb      	adds	r3, r7, r3
   27032:	2200      	movs	r2, #0
   27034:	569a      	ldrsb	r2, [r3, r2]
   27036:	4b3d      	ldr	r3, [pc, #244]	; (2712c <Socket_ReadSocketData+0x1e0>)
   27038:	0112      	lsls	r2, r2, #4
   2703a:	58d1      	ldr	r1, [r2, r3]
   2703c:	2319      	movs	r3, #25
   2703e:	18fb      	adds	r3, r7, r3
   27040:	781c      	ldrb	r4, [r3, #0]
   27042:	231a      	movs	r3, #26
   27044:	18fb      	adds	r3, r7, r3
   27046:	881a      	ldrh	r2, [r3, #0]
   27048:	69f8      	ldr	r0, [r7, #28]
   2704a:	0023      	movs	r3, r4
   2704c:	4c38      	ldr	r4, [pc, #224]	; (27130 <Socket_ReadSocketData+0x1e4>)
   2704e:	47a0      	blx	r4
   27050:	1e03      	subs	r3, r0, #0
   27052:	d14f      	bne.n	270f4 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   27054:	230f      	movs	r3, #15
   27056:	18fb      	adds	r3, r7, r3
   27058:	2200      	movs	r2, #0
   2705a:	569a      	ldrsb	r2, [r3, r2]
   2705c:	4b33      	ldr	r3, [pc, #204]	; (2712c <Socket_ReadSocketData+0x1e0>)
   2705e:	0112      	lsls	r2, r2, #4
   27060:	58d2      	ldr	r2, [r2, r3]
   27062:	68bb      	ldr	r3, [r7, #8]
   27064:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   27066:	231a      	movs	r3, #26
   27068:	18fb      	adds	r3, r7, r3
   2706a:	2200      	movs	r2, #0
   2706c:	5e9a      	ldrsh	r2, [r3, r2]
   2706e:	68bb      	ldr	r3, [r7, #8]
   27070:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   27072:	68bb      	ldr	r3, [r7, #8]
   27074:	88da      	ldrh	r2, [r3, #6]
   27076:	231a      	movs	r3, #26
   27078:	18fb      	adds	r3, r7, r3
   2707a:	881b      	ldrh	r3, [r3, #0]
   2707c:	1ad3      	subs	r3, r2, r3
   2707e:	b29a      	uxth	r2, r3
   27080:	68bb      	ldr	r3, [r7, #8]
   27082:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   27084:	4b2b      	ldr	r3, [pc, #172]	; (27134 <Socket_ReadSocketData+0x1e8>)
   27086:	681b      	ldr	r3, [r3, #0]
   27088:	2b00      	cmp	r3, #0
   2708a:	d00b      	beq.n	270a4 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   2708c:	4b29      	ldr	r3, [pc, #164]	; (27134 <Socket_ReadSocketData+0x1e8>)
   2708e:	681b      	ldr	r3, [r3, #0]
   27090:	68bc      	ldr	r4, [r7, #8]
   27092:	220e      	movs	r2, #14
   27094:	18ba      	adds	r2, r7, r2
   27096:	7811      	ldrb	r1, [r2, #0]
   27098:	220f      	movs	r2, #15
   2709a:	18ba      	adds	r2, r7, r2
   2709c:	2000      	movs	r0, #0
   2709e:	5610      	ldrsb	r0, [r2, r0]
   270a0:	0022      	movs	r2, r4
   270a2:	4798      	blx	r3

				u16ReadCount -= u16Read;
   270a4:	2330      	movs	r3, #48	; 0x30
   270a6:	18f9      	adds	r1, r7, r3
   270a8:	2330      	movs	r3, #48	; 0x30
   270aa:	18fa      	adds	r2, r7, r3
   270ac:	231a      	movs	r3, #26
   270ae:	18fb      	adds	r3, r7, r3
   270b0:	8812      	ldrh	r2, [r2, #0]
   270b2:	881b      	ldrh	r3, [r3, #0]
   270b4:	1ad3      	subs	r3, r2, r3
   270b6:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   270b8:	231a      	movs	r3, #26
   270ba:	18fb      	adds	r3, r7, r3
   270bc:	881b      	ldrh	r3, [r3, #0]
   270be:	69fa      	ldr	r2, [r7, #28]
   270c0:	18d3      	adds	r3, r2, r3
   270c2:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   270c4:	230f      	movs	r3, #15
   270c6:	18fb      	adds	r3, r7, r3
   270c8:	781b      	ldrb	r3, [r3, #0]
   270ca:	b25b      	sxtb	r3, r3
   270cc:	4a17      	ldr	r2, [pc, #92]	; (2712c <Socket_ReadSocketData+0x1e0>)
   270ce:	011b      	lsls	r3, r3, #4
   270d0:	18d3      	adds	r3, r2, r3
   270d2:	330a      	adds	r3, #10
   270d4:	781b      	ldrb	r3, [r3, #0]
   270d6:	b2db      	uxtb	r3, r3
   270d8:	2b00      	cmp	r3, #0
   270da:	d11c      	bne.n	27116 <Socket_ReadSocketData+0x1ca>
   270dc:	2330      	movs	r3, #48	; 0x30
   270de:	18fb      	adds	r3, r7, r3
   270e0:	881b      	ldrh	r3, [r3, #0]
   270e2:	2b00      	cmp	r3, #0
   270e4:	d017      	beq.n	27116 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   270e6:	2301      	movs	r3, #1
   270e8:	2200      	movs	r2, #0
   270ea:	2100      	movs	r1, #0
   270ec:	2000      	movs	r0, #0
   270ee:	4c10      	ldr	r4, [pc, #64]	; (27130 <Socket_ReadSocketData+0x1e4>)
   270f0:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   270f2:	e017      	b.n	27124 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   270f4:	4b10      	ldr	r3, [pc, #64]	; (27138 <Socket_ReadSocketData+0x1ec>)
   270f6:	0018      	movs	r0, r3
   270f8:	4b10      	ldr	r3, [pc, #64]	; (2713c <Socket_ReadSocketData+0x1f0>)
   270fa:	4798      	blx	r3
   270fc:	2330      	movs	r3, #48	; 0x30
   270fe:	18fb      	adds	r3, r7, r3
   27100:	881a      	ldrh	r2, [r3, #0]
   27102:	4b0f      	ldr	r3, [pc, #60]	; (27140 <Socket_ReadSocketData+0x1f4>)
   27104:	0011      	movs	r1, r2
   27106:	0018      	movs	r0, r3
   27108:	4b0c      	ldr	r3, [pc, #48]	; (2713c <Socket_ReadSocketData+0x1f0>)
   2710a:	4798      	blx	r3
   2710c:	4b0d      	ldr	r3, [pc, #52]	; (27144 <Socket_ReadSocketData+0x1f8>)
   2710e:	0018      	movs	r0, r3
   27110:	4b0a      	ldr	r3, [pc, #40]	; (2713c <Socket_ReadSocketData+0x1f0>)
   27112:	4798      	blx	r3
				break;
   27114:	e006      	b.n	27124 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   27116:	2330      	movs	r3, #48	; 0x30
   27118:	18fb      	adds	r3, r7, r3
   2711a:	881b      	ldrh	r3, [r3, #0]
   2711c:	2b00      	cmp	r3, #0
   2711e:	d000      	beq.n	27122 <Socket_ReadSocketData+0x1d6>
   27120:	e753      	b.n	26fca <Socket_ReadSocketData+0x7e>
	}
}
   27122:	e7ff      	b.n	27124 <Socket_ReadSocketData+0x1d8>
   27124:	46c0      	nop			; (mov r8, r8)
   27126:	46bd      	mov	sp, r7
   27128:	b009      	add	sp, #36	; 0x24
   2712a:	bd90      	pop	{r4, r7, pc}
   2712c:	20005960 	.word	0x20005960
   27130:	00023945 	.word	0x00023945
   27134:	20005a10 	.word	0x20005a10
   27138:	0003c49c 	.word	0x0003c49c
   2713c:	00020109 	.word	0x00020109
   27140:	0003c4a8 	.word	0x0003c4a8
   27144:	0003c4bc 	.word	0x0003c4bc

00027148 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   27148:	b590      	push	{r4, r7, lr}
   2714a:	b0bb      	sub	sp, #236	; 0xec
   2714c:	af02      	add	r7, sp, #8
   2714e:	603a      	str	r2, [r7, #0]
   27150:	1dfb      	adds	r3, r7, #7
   27152:	1c02      	adds	r2, r0, #0
   27154:	701a      	strb	r2, [r3, #0]
   27156:	1d3b      	adds	r3, r7, #4
   27158:	1c0a      	adds	r2, r1, #0
   2715a:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   2715c:	1dfb      	adds	r3, r7, #7
   2715e:	781b      	ldrb	r3, [r3, #0]
   27160:	2b41      	cmp	r3, #65	; 0x41
   27162:	d003      	beq.n	2716c <m2m_ip_cb+0x24>
   27164:	1dfb      	adds	r3, r7, #7
   27166:	781b      	ldrb	r3, [r3, #0]
   27168:	2b54      	cmp	r3, #84	; 0x54
   2716a:	d120      	bne.n	271ae <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   2716c:	23cc      	movs	r3, #204	; 0xcc
   2716e:	18f9      	adds	r1, r7, r3
   27170:	6838      	ldr	r0, [r7, #0]
   27172:	2300      	movs	r3, #0
   27174:	2204      	movs	r2, #4
   27176:	4c98      	ldr	r4, [pc, #608]	; (273d8 <m2m_ip_cb+0x290>)
   27178:	47a0      	blx	r4
   2717a:	1e03      	subs	r3, r0, #0
   2717c:	d000      	beq.n	27180 <m2m_ip_cb+0x38>
   2717e:	e275      	b.n	2766c <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   27180:	23cc      	movs	r3, #204	; 0xcc
   27182:	18fb      	adds	r3, r7, r3
   27184:	2201      	movs	r2, #1
   27186:	569a      	ldrsb	r2, [r3, r2]
   27188:	23c8      	movs	r3, #200	; 0xc8
   2718a:	18fb      	adds	r3, r7, r3
   2718c:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   2718e:	4b93      	ldr	r3, [pc, #588]	; (273dc <m2m_ip_cb+0x294>)
   27190:	681b      	ldr	r3, [r3, #0]
   27192:	2b00      	cmp	r3, #0
   27194:	d100      	bne.n	27198 <m2m_ip_cb+0x50>
   27196:	e269      	b.n	2766c <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   27198:	4b90      	ldr	r3, [pc, #576]	; (273dc <m2m_ip_cb+0x294>)
   2719a:	681b      	ldr	r3, [r3, #0]
   2719c:	22cc      	movs	r2, #204	; 0xcc
   2719e:	18ba      	adds	r2, r7, r2
   271a0:	2000      	movs	r0, #0
   271a2:	5610      	ldrsb	r0, [r2, r0]
   271a4:	22c8      	movs	r2, #200	; 0xc8
   271a6:	18ba      	adds	r2, r7, r2
   271a8:	2101      	movs	r1, #1
   271aa:	4798      	blx	r3
	{
   271ac:	e25e      	b.n	2766c <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   271ae:	1dfb      	adds	r3, r7, #7
   271b0:	781b      	ldrb	r3, [r3, #0]
   271b2:	2b42      	cmp	r3, #66	; 0x42
   271b4:	d120      	bne.n	271f8 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   271b6:	23c4      	movs	r3, #196	; 0xc4
   271b8:	18f9      	adds	r1, r7, r3
   271ba:	6838      	ldr	r0, [r7, #0]
   271bc:	2300      	movs	r3, #0
   271be:	2204      	movs	r2, #4
   271c0:	4c85      	ldr	r4, [pc, #532]	; (273d8 <m2m_ip_cb+0x290>)
   271c2:	47a0      	blx	r4
   271c4:	1e03      	subs	r3, r0, #0
   271c6:	d000      	beq.n	271ca <m2m_ip_cb+0x82>
   271c8:	e257      	b.n	2767a <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   271ca:	23c4      	movs	r3, #196	; 0xc4
   271cc:	18fb      	adds	r3, r7, r3
   271ce:	2201      	movs	r2, #1
   271d0:	569a      	ldrsb	r2, [r3, r2]
   271d2:	23c0      	movs	r3, #192	; 0xc0
   271d4:	18fb      	adds	r3, r7, r3
   271d6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   271d8:	4b80      	ldr	r3, [pc, #512]	; (273dc <m2m_ip_cb+0x294>)
   271da:	681b      	ldr	r3, [r3, #0]
   271dc:	2b00      	cmp	r3, #0
   271de:	d100      	bne.n	271e2 <m2m_ip_cb+0x9a>
   271e0:	e24b      	b.n	2767a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   271e2:	4b7e      	ldr	r3, [pc, #504]	; (273dc <m2m_ip_cb+0x294>)
   271e4:	681b      	ldr	r3, [r3, #0]
   271e6:	22c4      	movs	r2, #196	; 0xc4
   271e8:	18ba      	adds	r2, r7, r2
   271ea:	2000      	movs	r0, #0
   271ec:	5610      	ldrsb	r0, [r2, r0]
   271ee:	22c0      	movs	r2, #192	; 0xc0
   271f0:	18ba      	adds	r2, r7, r2
   271f2:	2102      	movs	r1, #2
   271f4:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   271f6:	e240      	b.n	2767a <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   271f8:	1dfb      	adds	r3, r7, #7
   271fa:	781b      	ldrb	r3, [r3, #0]
   271fc:	2b43      	cmp	r3, #67	; 0x43
   271fe:	d000      	beq.n	27202 <m2m_ip_cb+0xba>
   27200:	e086      	b.n	27310 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   27202:	23b4      	movs	r3, #180	; 0xb4
   27204:	18f9      	adds	r1, r7, r3
   27206:	6838      	ldr	r0, [r7, #0]
   27208:	2300      	movs	r3, #0
   2720a:	220c      	movs	r2, #12
   2720c:	4c72      	ldr	r4, [pc, #456]	; (273d8 <m2m_ip_cb+0x290>)
   2720e:	47a0      	blx	r4
   27210:	1e03      	subs	r3, r0, #0
   27212:	d000      	beq.n	27216 <m2m_ip_cb+0xce>
   27214:	e231      	b.n	2767a <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   27216:	23b4      	movs	r3, #180	; 0xb4
   27218:	18fb      	adds	r3, r7, r3
   2721a:	7a5b      	ldrb	r3, [r3, #9]
   2721c:	b25b      	sxtb	r3, r3
   2721e:	2b00      	cmp	r3, #0
   27220:	db4f      	blt.n	272c2 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   27222:	23b4      	movs	r3, #180	; 0xb4
   27224:	18fb      	adds	r3, r7, r3
   27226:	7a5b      	ldrb	r3, [r3, #9]
   27228:	b25b      	sxtb	r3, r3
   2722a:	0018      	movs	r0, r3
   2722c:	23b4      	movs	r3, #180	; 0xb4
   2722e:	18fb      	adds	r3, r7, r3
   27230:	7a1b      	ldrb	r3, [r3, #8]
   27232:	b25b      	sxtb	r3, r3
   27234:	4a6a      	ldr	r2, [pc, #424]	; (273e0 <m2m_ip_cb+0x298>)
   27236:	011b      	lsls	r3, r3, #4
   27238:	18d3      	adds	r3, r2, r3
   2723a:	330b      	adds	r3, #11
   2723c:	781b      	ldrb	r3, [r3, #0]
   2723e:	b2d9      	uxtb	r1, r3
   27240:	4a67      	ldr	r2, [pc, #412]	; (273e0 <m2m_ip_cb+0x298>)
   27242:	0103      	lsls	r3, r0, #4
   27244:	18d3      	adds	r3, r2, r3
   27246:	330b      	adds	r3, #11
   27248:	1c0a      	adds	r2, r1, #0
   2724a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   2724c:	23b4      	movs	r3, #180	; 0xb4
   2724e:	18fb      	adds	r3, r7, r3
   27250:	7a5b      	ldrb	r3, [r3, #9]
   27252:	b25b      	sxtb	r3, r3
   27254:	4a62      	ldr	r2, [pc, #392]	; (273e0 <m2m_ip_cb+0x298>)
   27256:	011b      	lsls	r3, r3, #4
   27258:	18d3      	adds	r3, r2, r3
   2725a:	330a      	adds	r3, #10
   2725c:	2201      	movs	r2, #1
   2725e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   27260:	23b4      	movs	r3, #180	; 0xb4
   27262:	18fb      	adds	r3, r7, r3
   27264:	7a5b      	ldrb	r3, [r3, #9]
   27266:	b25b      	sxtb	r3, r3
   27268:	0018      	movs	r0, r3
   2726a:	23b4      	movs	r3, #180	; 0xb4
   2726c:	18fb      	adds	r3, r7, r3
   2726e:	895b      	ldrh	r3, [r3, #10]
   27270:	3b08      	subs	r3, #8
   27272:	b299      	uxth	r1, r3
   27274:	4a5a      	ldr	r2, [pc, #360]	; (273e0 <m2m_ip_cb+0x298>)
   27276:	0103      	lsls	r3, r0, #4
   27278:	18d3      	adds	r3, r2, r3
   2727a:	3308      	adds	r3, #8
   2727c:	1c0a      	adds	r2, r1, #0
   2727e:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   27280:	4b58      	ldr	r3, [pc, #352]	; (273e4 <m2m_ip_cb+0x29c>)
   27282:	881b      	ldrh	r3, [r3, #0]
   27284:	b29b      	uxth	r3, r3
   27286:	3301      	adds	r3, #1
   27288:	b29a      	uxth	r2, r3
   2728a:	4b56      	ldr	r3, [pc, #344]	; (273e4 <m2m_ip_cb+0x29c>)
   2728c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   2728e:	4b55      	ldr	r3, [pc, #340]	; (273e4 <m2m_ip_cb+0x29c>)
   27290:	881b      	ldrh	r3, [r3, #0]
   27292:	b29b      	uxth	r3, r3
   27294:	2b00      	cmp	r3, #0
   27296:	d106      	bne.n	272a6 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   27298:	4b52      	ldr	r3, [pc, #328]	; (273e4 <m2m_ip_cb+0x29c>)
   2729a:	881b      	ldrh	r3, [r3, #0]
   2729c:	b29b      	uxth	r3, r3
   2729e:	3301      	adds	r3, #1
   272a0:	b29a      	uxth	r2, r3
   272a2:	4b50      	ldr	r3, [pc, #320]	; (273e4 <m2m_ip_cb+0x29c>)
   272a4:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   272a6:	23b4      	movs	r3, #180	; 0xb4
   272a8:	18fb      	adds	r3, r7, r3
   272aa:	7a5b      	ldrb	r3, [r3, #9]
   272ac:	b25b      	sxtb	r3, r3
   272ae:	0018      	movs	r0, r3
   272b0:	4b4c      	ldr	r3, [pc, #304]	; (273e4 <m2m_ip_cb+0x29c>)
   272b2:	881b      	ldrh	r3, [r3, #0]
   272b4:	b299      	uxth	r1, r3
   272b6:	4a4a      	ldr	r2, [pc, #296]	; (273e0 <m2m_ip_cb+0x298>)
   272b8:	0103      	lsls	r3, r0, #4
   272ba:	18d3      	adds	r3, r2, r3
   272bc:	3306      	adds	r3, #6
   272be:	1c0a      	adds	r2, r1, #0
   272c0:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   272c2:	23b4      	movs	r3, #180	; 0xb4
   272c4:	18fb      	adds	r3, r7, r3
   272c6:	2209      	movs	r2, #9
   272c8:	569a      	ldrsb	r2, [r3, r2]
   272ca:	23a0      	movs	r3, #160	; 0xa0
   272cc:	18fb      	adds	r3, r7, r3
   272ce:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   272d0:	23a0      	movs	r3, #160	; 0xa0
   272d2:	18fb      	adds	r3, r7, r3
   272d4:	2202      	movs	r2, #2
   272d6:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   272d8:	23b4      	movs	r3, #180	; 0xb4
   272da:	18fb      	adds	r3, r7, r3
   272dc:	885a      	ldrh	r2, [r3, #2]
   272de:	23a0      	movs	r3, #160	; 0xa0
   272e0:	18fb      	adds	r3, r7, r3
   272e2:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   272e4:	23b4      	movs	r3, #180	; 0xb4
   272e6:	18fb      	adds	r3, r7, r3
   272e8:	685a      	ldr	r2, [r3, #4]
   272ea:	23a0      	movs	r3, #160	; 0xa0
   272ec:	18fb      	adds	r3, r7, r3
   272ee:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   272f0:	4b3a      	ldr	r3, [pc, #232]	; (273dc <m2m_ip_cb+0x294>)
   272f2:	681b      	ldr	r3, [r3, #0]
   272f4:	2b00      	cmp	r3, #0
   272f6:	d100      	bne.n	272fa <m2m_ip_cb+0x1b2>
   272f8:	e1bf      	b.n	2767a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   272fa:	4b38      	ldr	r3, [pc, #224]	; (273dc <m2m_ip_cb+0x294>)
   272fc:	681b      	ldr	r3, [r3, #0]
   272fe:	22b4      	movs	r2, #180	; 0xb4
   27300:	18ba      	adds	r2, r7, r2
   27302:	2008      	movs	r0, #8
   27304:	5610      	ldrsb	r0, [r2, r0]
   27306:	22a0      	movs	r2, #160	; 0xa0
   27308:	18ba      	adds	r2, r7, r2
   2730a:	2104      	movs	r1, #4
   2730c:	4798      	blx	r3
}
   2730e:	e1b4      	b.n	2767a <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   27310:	1dfb      	adds	r3, r7, #7
   27312:	781b      	ldrb	r3, [r3, #0]
   27314:	2b44      	cmp	r3, #68	; 0x44
   27316:	d003      	beq.n	27320 <m2m_ip_cb+0x1d8>
   27318:	1dfb      	adds	r3, r7, #7
   2731a:	781b      	ldrb	r3, [r3, #0]
   2731c:	2b4b      	cmp	r3, #75	; 0x4b
   2731e:	d13d      	bne.n	2739c <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   27320:	239c      	movs	r3, #156	; 0x9c
   27322:	18f9      	adds	r1, r7, r3
   27324:	6838      	ldr	r0, [r7, #0]
   27326:	2300      	movs	r3, #0
   27328:	2204      	movs	r2, #4
   2732a:	4c2b      	ldr	r4, [pc, #172]	; (273d8 <m2m_ip_cb+0x290>)
   2732c:	47a0      	blx	r4
   2732e:	1e03      	subs	r3, r0, #0
   27330:	d000      	beq.n	27334 <m2m_ip_cb+0x1ec>
   27332:	e19d      	b.n	27670 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   27334:	239c      	movs	r3, #156	; 0x9c
   27336:	18fb      	adds	r3, r7, r3
   27338:	2200      	movs	r2, #0
   2733a:	569a      	ldrsb	r2, [r3, r2]
   2733c:	2398      	movs	r3, #152	; 0x98
   2733e:	18fb      	adds	r3, r7, r3
   27340:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   27342:	239c      	movs	r3, #156	; 0x9c
   27344:	18fb      	adds	r3, r7, r3
   27346:	2201      	movs	r2, #1
   27348:	569a      	ldrsb	r2, [r3, r2]
   2734a:	2398      	movs	r3, #152	; 0x98
   2734c:	18fb      	adds	r3, r7, r3
   2734e:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   27350:	239c      	movs	r3, #156	; 0x9c
   27352:	18fb      	adds	r3, r7, r3
   27354:	785b      	ldrb	r3, [r3, #1]
   27356:	b25b      	sxtb	r3, r3
   27358:	2b00      	cmp	r3, #0
   2735a:	d10f      	bne.n	2737c <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   2735c:	239c      	movs	r3, #156	; 0x9c
   2735e:	18fb      	adds	r3, r7, r3
   27360:	781b      	ldrb	r3, [r3, #0]
   27362:	b25b      	sxtb	r3, r3
   27364:	0018      	movs	r0, r3
   27366:	239c      	movs	r3, #156	; 0x9c
   27368:	18fb      	adds	r3, r7, r3
   2736a:	885b      	ldrh	r3, [r3, #2]
   2736c:	3b08      	subs	r3, #8
   2736e:	b299      	uxth	r1, r3
   27370:	4a1b      	ldr	r2, [pc, #108]	; (273e0 <m2m_ip_cb+0x298>)
   27372:	0103      	lsls	r3, r0, #4
   27374:	18d3      	adds	r3, r2, r3
   27376:	3308      	adds	r3, #8
   27378:	1c0a      	adds	r2, r1, #0
   2737a:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   2737c:	4b17      	ldr	r3, [pc, #92]	; (273dc <m2m_ip_cb+0x294>)
   2737e:	681b      	ldr	r3, [r3, #0]
   27380:	2b00      	cmp	r3, #0
   27382:	d100      	bne.n	27386 <m2m_ip_cb+0x23e>
   27384:	e174      	b.n	27670 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   27386:	4b15      	ldr	r3, [pc, #84]	; (273dc <m2m_ip_cb+0x294>)
   27388:	681b      	ldr	r3, [r3, #0]
   2738a:	229c      	movs	r2, #156	; 0x9c
   2738c:	18ba      	adds	r2, r7, r2
   2738e:	2000      	movs	r0, #0
   27390:	5610      	ldrsb	r0, [r2, r0]
   27392:	2298      	movs	r2, #152	; 0x98
   27394:	18ba      	adds	r2, r7, r2
   27396:	2105      	movs	r1, #5
   27398:	4798      	blx	r3
	{
   2739a:	e169      	b.n	27670 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   2739c:	1dfb      	adds	r3, r7, #7
   2739e:	781b      	ldrb	r3, [r3, #0]
   273a0:	2b4a      	cmp	r3, #74	; 0x4a
   273a2:	d123      	bne.n	273ec <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   273a4:	230c      	movs	r3, #12
   273a6:	18f9      	adds	r1, r7, r3
   273a8:	6838      	ldr	r0, [r7, #0]
   273aa:	2300      	movs	r3, #0
   273ac:	2244      	movs	r2, #68	; 0x44
   273ae:	4c0a      	ldr	r4, [pc, #40]	; (273d8 <m2m_ip_cb+0x290>)
   273b0:	47a0      	blx	r4
   273b2:	1e03      	subs	r3, r0, #0
   273b4:	d000      	beq.n	273b8 <m2m_ip_cb+0x270>
   273b6:	e160      	b.n	2767a <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   273b8:	4b0b      	ldr	r3, [pc, #44]	; (273e8 <m2m_ip_cb+0x2a0>)
   273ba:	681b      	ldr	r3, [r3, #0]
   273bc:	2b00      	cmp	r3, #0
   273be:	d100      	bne.n	273c2 <m2m_ip_cb+0x27a>
   273c0:	e15b      	b.n	2767a <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   273c2:	4b09      	ldr	r3, [pc, #36]	; (273e8 <m2m_ip_cb+0x2a0>)
   273c4:	681a      	ldr	r2, [r3, #0]
   273c6:	230c      	movs	r3, #12
   273c8:	18fb      	adds	r3, r7, r3
   273ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
   273cc:	230c      	movs	r3, #12
   273ce:	18fb      	adds	r3, r7, r3
   273d0:	0018      	movs	r0, r3
   273d2:	4790      	blx	r2
}
   273d4:	e151      	b.n	2767a <m2m_ip_cb+0x532>
   273d6:	46c0      	nop			; (mov r8, r8)
   273d8:	00023945 	.word	0x00023945
   273dc:	20005a10 	.word	0x20005a10
   273e0:	20005960 	.word	0x20005960
   273e4:	20004112 	.word	0x20004112
   273e8:	20005a18 	.word	0x20005a18
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   273ec:	1dfb      	adds	r3, r7, #7
   273ee:	781b      	ldrb	r3, [r3, #0]
   273f0:	2b46      	cmp	r3, #70	; 0x46
   273f2:	d008      	beq.n	27406 <m2m_ip_cb+0x2be>
   273f4:	1dfb      	adds	r3, r7, #7
   273f6:	781b      	ldrb	r3, [r3, #0]
   273f8:	2b48      	cmp	r3, #72	; 0x48
   273fa:	d004      	beq.n	27406 <m2m_ip_cb+0x2be>
   273fc:	1dfb      	adds	r3, r7, #7
   273fe:	781b      	ldrb	r3, [r3, #0]
   27400:	2b4d      	cmp	r3, #77	; 0x4d
   27402:	d000      	beq.n	27406 <m2m_ip_cb+0x2be>
   27404:	e0b4      	b.n	27570 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   27406:	23df      	movs	r3, #223	; 0xdf
   27408:	18fb      	adds	r3, r7, r3
   2740a:	2206      	movs	r2, #6
   2740c:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   2740e:	1dfb      	adds	r3, r7, #7
   27410:	781b      	ldrb	r3, [r3, #0]
   27412:	2b48      	cmp	r3, #72	; 0x48
   27414:	d103      	bne.n	2741e <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   27416:	23df      	movs	r3, #223	; 0xdf
   27418:	18fb      	adds	r3, r7, r3
   2741a:	2209      	movs	r2, #9
   2741c:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   2741e:	23d8      	movs	r3, #216	; 0xd8
   27420:	18fb      	adds	r3, r7, r3
   27422:	2210      	movs	r2, #16
   27424:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   27426:	23d8      	movs	r3, #216	; 0xd8
   27428:	18fb      	adds	r3, r7, r3
   2742a:	881a      	ldrh	r2, [r3, #0]
   2742c:	2388      	movs	r3, #136	; 0x88
   2742e:	18f9      	adds	r1, r7, r3
   27430:	6838      	ldr	r0, [r7, #0]
   27432:	2300      	movs	r3, #0
   27434:	4c93      	ldr	r4, [pc, #588]	; (27684 <m2m_ip_cb+0x53c>)
   27436:	47a0      	blx	r4
   27438:	1e03      	subs	r3, r0, #0
   2743a:	d000      	beq.n	2743e <m2m_ip_cb+0x2f6>
   2743c:	e11a      	b.n	27674 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2743e:	23d6      	movs	r3, #214	; 0xd6
   27440:	18fb      	adds	r3, r7, r3
   27442:	2200      	movs	r2, #0
   27444:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   27446:	23d5      	movs	r3, #213	; 0xd5
   27448:	18fb      	adds	r3, r7, r3
   2744a:	2288      	movs	r2, #136	; 0x88
   2744c:	18ba      	adds	r2, r7, r2
   2744e:	7b12      	ldrb	r2, [r2, #12]
   27450:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   27452:	23d6      	movs	r3, #214	; 0xd6
   27454:	18fb      	adds	r3, r7, r3
   27456:	2288      	movs	r2, #136	; 0x88
   27458:	18ba      	adds	r2, r7, r2
   2745a:	89d2      	ldrh	r2, [r2, #14]
   2745c:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2745e:	23d5      	movs	r3, #213	; 0xd5
   27460:	18fb      	adds	r3, r7, r3
   27462:	781b      	ldrb	r3, [r3, #0]
   27464:	b25b      	sxtb	r3, r3
   27466:	4a88      	ldr	r2, [pc, #544]	; (27688 <m2m_ip_cb+0x540>)
   27468:	011b      	lsls	r3, r3, #4
   2746a:	18d3      	adds	r3, r2, r3
   2746c:	330c      	adds	r3, #12
   2746e:	2200      	movs	r2, #0
   27470:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   27472:	23d2      	movs	r3, #210	; 0xd2
   27474:	18fb      	adds	r3, r7, r3
   27476:	2288      	movs	r2, #136	; 0x88
   27478:	18ba      	adds	r2, r7, r2
   2747a:	8912      	ldrh	r2, [r2, #8]
   2747c:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2747e:	23d0      	movs	r3, #208	; 0xd0
   27480:	18fb      	adds	r3, r7, r3
   27482:	2288      	movs	r2, #136	; 0x88
   27484:	18ba      	adds	r2, r7, r2
   27486:	8952      	ldrh	r2, [r2, #10]
   27488:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   2748a:	2388      	movs	r3, #136	; 0x88
   2748c:	18fb      	adds	r3, r7, r3
   2748e:	885a      	ldrh	r2, [r3, #2]
   27490:	2370      	movs	r3, #112	; 0x70
   27492:	18fb      	adds	r3, r7, r3
   27494:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   27496:	2388      	movs	r3, #136	; 0x88
   27498:	18fb      	adds	r3, r7, r3
   2749a:	685a      	ldr	r2, [r3, #4]
   2749c:	2370      	movs	r3, #112	; 0x70
   2749e:	18fb      	adds	r3, r7, r3
   274a0:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   274a2:	23d5      	movs	r3, #213	; 0xd5
   274a4:	18fb      	adds	r3, r7, r3
   274a6:	781b      	ldrb	r3, [r3, #0]
   274a8:	b25b      	sxtb	r3, r3
   274aa:	4a77      	ldr	r2, [pc, #476]	; (27688 <m2m_ip_cb+0x540>)
   274ac:	011b      	lsls	r3, r3, #4
   274ae:	18d3      	adds	r3, r2, r3
   274b0:	3306      	adds	r3, #6
   274b2:	881b      	ldrh	r3, [r3, #0]
   274b4:	b29b      	uxth	r3, r3
   274b6:	22d6      	movs	r2, #214	; 0xd6
   274b8:	18ba      	adds	r2, r7, r2
   274ba:	8812      	ldrh	r2, [r2, #0]
   274bc:	429a      	cmp	r2, r3
   274be:	d148      	bne.n	27552 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   274c0:	23d2      	movs	r3, #210	; 0xd2
   274c2:	18fb      	adds	r3, r7, r3
   274c4:	2200      	movs	r2, #0
   274c6:	5e9b      	ldrsh	r3, [r3, r2]
   274c8:	2b00      	cmp	r3, #0
   274ca:	dd25      	ble.n	27518 <m2m_ip_cb+0x3d0>
   274cc:	23d2      	movs	r3, #210	; 0xd2
   274ce:	18fb      	adds	r3, r7, r3
   274d0:	2200      	movs	r2, #0
   274d2:	5e9a      	ldrsh	r2, [r3, r2]
   274d4:	1d3b      	adds	r3, r7, #4
   274d6:	881b      	ldrh	r3, [r3, #0]
   274d8:	429a      	cmp	r2, r3
   274da:	da1d      	bge.n	27518 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   274dc:	23d0      	movs	r3, #208	; 0xd0
   274de:	18fb      	adds	r3, r7, r3
   274e0:	881b      	ldrh	r3, [r3, #0]
   274e2:	683a      	ldr	r2, [r7, #0]
   274e4:	18d3      	adds	r3, r2, r3
   274e6:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   274e8:	23d8      	movs	r3, #216	; 0xd8
   274ea:	18fb      	adds	r3, r7, r3
   274ec:	22d2      	movs	r2, #210	; 0xd2
   274ee:	18ba      	adds	r2, r7, r2
   274f0:	8812      	ldrh	r2, [r2, #0]
   274f2:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   274f4:	683c      	ldr	r4, [r7, #0]
   274f6:	23df      	movs	r3, #223	; 0xdf
   274f8:	18fb      	adds	r3, r7, r3
   274fa:	781a      	ldrb	r2, [r3, #0]
   274fc:	2370      	movs	r3, #112	; 0x70
   274fe:	18f9      	adds	r1, r7, r3
   27500:	23d5      	movs	r3, #213	; 0xd5
   27502:	18fb      	adds	r3, r7, r3
   27504:	2000      	movs	r0, #0
   27506:	5618      	ldrsb	r0, [r3, r0]
   27508:	23d8      	movs	r3, #216	; 0xd8
   2750a:	18fb      	adds	r3, r7, r3
   2750c:	881b      	ldrh	r3, [r3, #0]
   2750e:	9300      	str	r3, [sp, #0]
   27510:	0023      	movs	r3, r4
   27512:	4c5e      	ldr	r4, [pc, #376]	; (2768c <m2m_ip_cb+0x544>)
   27514:	47a0      	blx	r4
	{
   27516:	e0ad      	b.n	27674 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   27518:	2370      	movs	r3, #112	; 0x70
   2751a:	18fb      	adds	r3, r7, r3
   2751c:	22d2      	movs	r2, #210	; 0xd2
   2751e:	18ba      	adds	r2, r7, r2
   27520:	8812      	ldrh	r2, [r2, #0]
   27522:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   27524:	2370      	movs	r3, #112	; 0x70
   27526:	18fb      	adds	r3, r7, r3
   27528:	2200      	movs	r2, #0
   2752a:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   2752c:	4b58      	ldr	r3, [pc, #352]	; (27690 <m2m_ip_cb+0x548>)
   2752e:	681b      	ldr	r3, [r3, #0]
   27530:	2b00      	cmp	r3, #0
   27532:	d100      	bne.n	27536 <m2m_ip_cb+0x3ee>
   27534:	e09e      	b.n	27674 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   27536:	4b56      	ldr	r3, [pc, #344]	; (27690 <m2m_ip_cb+0x548>)
   27538:	681b      	ldr	r3, [r3, #0]
   2753a:	2270      	movs	r2, #112	; 0x70
   2753c:	18bc      	adds	r4, r7, r2
   2753e:	22df      	movs	r2, #223	; 0xdf
   27540:	18ba      	adds	r2, r7, r2
   27542:	7811      	ldrb	r1, [r2, #0]
   27544:	22d5      	movs	r2, #213	; 0xd5
   27546:	18ba      	adds	r2, r7, r2
   27548:	2000      	movs	r0, #0
   2754a:	5610      	ldrsb	r0, [r2, r0]
   2754c:	0022      	movs	r2, r4
   2754e:	4798      	blx	r3
	{
   27550:	e090      	b.n	27674 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   27552:	23d8      	movs	r3, #216	; 0xd8
   27554:	18fa      	adds	r2, r7, r3
   27556:	1d3b      	adds	r3, r7, #4
   27558:	8812      	ldrh	r2, [r2, #0]
   2755a:	881b      	ldrh	r3, [r3, #0]
   2755c:	429a      	cmp	r2, r3
   2755e:	d300      	bcc.n	27562 <m2m_ip_cb+0x41a>
   27560:	e088      	b.n	27674 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   27562:	2301      	movs	r3, #1
   27564:	2200      	movs	r2, #0
   27566:	2100      	movs	r1, #0
   27568:	2000      	movs	r0, #0
   2756a:	4c46      	ldr	r4, [pc, #280]	; (27684 <m2m_ip_cb+0x53c>)
   2756c:	47a0      	blx	r4
	{
   2756e:	e081      	b.n	27674 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   27570:	1dfb      	adds	r3, r7, #7
   27572:	781b      	ldrb	r3, [r3, #0]
   27574:	2b45      	cmp	r3, #69	; 0x45
   27576:	d007      	beq.n	27588 <m2m_ip_cb+0x440>
   27578:	1dfb      	adds	r3, r7, #7
   2757a:	781b      	ldrb	r3, [r3, #0]
   2757c:	2b47      	cmp	r3, #71	; 0x47
   2757e:	d003      	beq.n	27588 <m2m_ip_cb+0x440>
   27580:	1dfb      	adds	r3, r7, #7
   27582:	781b      	ldrb	r3, [r3, #0]
   27584:	2b4c      	cmp	r3, #76	; 0x4c
   27586:	d14c      	bne.n	27622 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   27588:	23de      	movs	r3, #222	; 0xde
   2758a:	18fb      	adds	r3, r7, r3
   2758c:	2207      	movs	r2, #7
   2758e:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   27590:	1dfb      	adds	r3, r7, #7
   27592:	781b      	ldrb	r3, [r3, #0]
   27594:	2b47      	cmp	r3, #71	; 0x47
   27596:	d103      	bne.n	275a0 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   27598:	23de      	movs	r3, #222	; 0xde
   2759a:	18fb      	adds	r3, r7, r3
   2759c:	2208      	movs	r2, #8
   2759e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   275a0:	2364      	movs	r3, #100	; 0x64
   275a2:	18f9      	adds	r1, r7, r3
   275a4:	6838      	ldr	r0, [r7, #0]
   275a6:	2300      	movs	r3, #0
   275a8:	2208      	movs	r2, #8
   275aa:	4c36      	ldr	r4, [pc, #216]	; (27684 <m2m_ip_cb+0x53c>)
   275ac:	47a0      	blx	r4
   275ae:	1e03      	subs	r3, r0, #0
   275b0:	d162      	bne.n	27678 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   275b2:	23dc      	movs	r3, #220	; 0xdc
   275b4:	18fb      	adds	r3, r7, r3
   275b6:	2200      	movs	r2, #0
   275b8:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   275ba:	23db      	movs	r3, #219	; 0xdb
   275bc:	18fb      	adds	r3, r7, r3
   275be:	2264      	movs	r2, #100	; 0x64
   275c0:	18ba      	adds	r2, r7, r2
   275c2:	7812      	ldrb	r2, [r2, #0]
   275c4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   275c6:	23dc      	movs	r3, #220	; 0xdc
   275c8:	18fb      	adds	r3, r7, r3
   275ca:	2264      	movs	r2, #100	; 0x64
   275cc:	18ba      	adds	r2, r7, r2
   275ce:	8892      	ldrh	r2, [r2, #4]
   275d0:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   275d2:	2364      	movs	r3, #100	; 0x64
   275d4:	18fb      	adds	r3, r7, r3
   275d6:	2202      	movs	r2, #2
   275d8:	5e9a      	ldrsh	r2, [r3, r2]
   275da:	236e      	movs	r3, #110	; 0x6e
   275dc:	18fb      	adds	r3, r7, r3
   275de:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   275e0:	23db      	movs	r3, #219	; 0xdb
   275e2:	18fb      	adds	r3, r7, r3
   275e4:	781b      	ldrb	r3, [r3, #0]
   275e6:	b25b      	sxtb	r3, r3
   275e8:	4a27      	ldr	r2, [pc, #156]	; (27688 <m2m_ip_cb+0x540>)
   275ea:	011b      	lsls	r3, r3, #4
   275ec:	18d3      	adds	r3, r2, r3
   275ee:	3306      	adds	r3, #6
   275f0:	881b      	ldrh	r3, [r3, #0]
   275f2:	b29b      	uxth	r3, r3
   275f4:	22dc      	movs	r2, #220	; 0xdc
   275f6:	18ba      	adds	r2, r7, r2
   275f8:	8812      	ldrh	r2, [r2, #0]
   275fa:	429a      	cmp	r2, r3
   275fc:	d13c      	bne.n	27678 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   275fe:	4b24      	ldr	r3, [pc, #144]	; (27690 <m2m_ip_cb+0x548>)
   27600:	681b      	ldr	r3, [r3, #0]
   27602:	2b00      	cmp	r3, #0
   27604:	d038      	beq.n	27678 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   27606:	4b22      	ldr	r3, [pc, #136]	; (27690 <m2m_ip_cb+0x548>)
   27608:	681b      	ldr	r3, [r3, #0]
   2760a:	226e      	movs	r2, #110	; 0x6e
   2760c:	18bc      	adds	r4, r7, r2
   2760e:	22de      	movs	r2, #222	; 0xde
   27610:	18ba      	adds	r2, r7, r2
   27612:	7811      	ldrb	r1, [r2, #0]
   27614:	22db      	movs	r2, #219	; 0xdb
   27616:	18ba      	adds	r2, r7, r2
   27618:	2000      	movs	r0, #0
   2761a:	5610      	ldrsb	r0, [r2, r0]
   2761c:	0022      	movs	r2, r4
   2761e:	4798      	blx	r3
	{
   27620:	e02a      	b.n	27678 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   27622:	1dfb      	adds	r3, r7, #7
   27624:	781b      	ldrb	r3, [r3, #0]
   27626:	2b52      	cmp	r3, #82	; 0x52
   27628:	d127      	bne.n	2767a <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   2762a:	2350      	movs	r3, #80	; 0x50
   2762c:	18f9      	adds	r1, r7, r3
   2762e:	6838      	ldr	r0, [r7, #0]
   27630:	2301      	movs	r3, #1
   27632:	2214      	movs	r2, #20
   27634:	4c13      	ldr	r4, [pc, #76]	; (27684 <m2m_ip_cb+0x53c>)
   27636:	47a0      	blx	r4
   27638:	1e03      	subs	r3, r0, #0
   2763a:	d11e      	bne.n	2767a <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   2763c:	2350      	movs	r3, #80	; 0x50
   2763e:	18fb      	adds	r3, r7, r3
   27640:	685b      	ldr	r3, [r3, #4]
   27642:	001a      	movs	r2, r3
   27644:	4b13      	ldr	r3, [pc, #76]	; (27694 <m2m_ip_cb+0x54c>)
   27646:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   27648:	4b12      	ldr	r3, [pc, #72]	; (27694 <m2m_ip_cb+0x54c>)
   2764a:	681b      	ldr	r3, [r3, #0]
   2764c:	2b00      	cmp	r3, #0
   2764e:	d014      	beq.n	2767a <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   27650:	4b10      	ldr	r3, [pc, #64]	; (27694 <m2m_ip_cb+0x54c>)
   27652:	681c      	ldr	r4, [r3, #0]
   27654:	2350      	movs	r3, #80	; 0x50
   27656:	18fb      	adds	r3, r7, r3
   27658:	6818      	ldr	r0, [r3, #0]
   2765a:	2350      	movs	r3, #80	; 0x50
   2765c:	18fb      	adds	r3, r7, r3
   2765e:	6899      	ldr	r1, [r3, #8]
   27660:	2350      	movs	r3, #80	; 0x50
   27662:	18fb      	adds	r3, r7, r3
   27664:	7c1b      	ldrb	r3, [r3, #16]
   27666:	001a      	movs	r2, r3
   27668:	47a0      	blx	r4
}
   2766a:	e006      	b.n	2767a <m2m_ip_cb+0x532>
	{
   2766c:	46c0      	nop			; (mov r8, r8)
   2766e:	e004      	b.n	2767a <m2m_ip_cb+0x532>
	{
   27670:	46c0      	nop			; (mov r8, r8)
   27672:	e002      	b.n	2767a <m2m_ip_cb+0x532>
	{
   27674:	46c0      	nop			; (mov r8, r8)
   27676:	e000      	b.n	2767a <m2m_ip_cb+0x532>
	{
   27678:	46c0      	nop			; (mov r8, r8)
}
   2767a:	46c0      	nop			; (mov r8, r8)
   2767c:	46bd      	mov	sp, r7
   2767e:	b039      	add	sp, #228	; 0xe4
   27680:	bd90      	pop	{r4, r7, pc}
   27682:	46c0      	nop			; (mov r8, r8)
   27684:	00023945 	.word	0x00023945
   27688:	20005960 	.word	0x20005960
   2768c:	00026f4d 	.word	0x00026f4d
   27690:	20005a10 	.word	0x20005a10
   27694:	20005a14 	.word	0x20005a14

00027698 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   27698:	b580      	push	{r7, lr}
   2769a:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   2769c:	4b0c      	ldr	r3, [pc, #48]	; (276d0 <socketInit+0x38>)
   2769e:	781b      	ldrb	r3, [r3, #0]
   276a0:	b2db      	uxtb	r3, r3
   276a2:	2b00      	cmp	r3, #0
   276a4:	d110      	bne.n	276c8 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   276a6:	4b0b      	ldr	r3, [pc, #44]	; (276d4 <socketInit+0x3c>)
   276a8:	22b0      	movs	r2, #176	; 0xb0
   276aa:	2100      	movs	r1, #0
   276ac:	0018      	movs	r0, r3
   276ae:	4b0a      	ldr	r3, [pc, #40]	; (276d8 <socketInit+0x40>)
   276b0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   276b2:	4b0a      	ldr	r3, [pc, #40]	; (276dc <socketInit+0x44>)
   276b4:	0019      	movs	r1, r3
   276b6:	2002      	movs	r0, #2
   276b8:	4b09      	ldr	r3, [pc, #36]	; (276e0 <socketInit+0x48>)
   276ba:	4798      	blx	r3
		gbSocketInit	= 1;
   276bc:	4b04      	ldr	r3, [pc, #16]	; (276d0 <socketInit+0x38>)
   276be:	2201      	movs	r2, #1
   276c0:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   276c2:	4b08      	ldr	r3, [pc, #32]	; (276e4 <socketInit+0x4c>)
   276c4:	2200      	movs	r2, #0
   276c6:	801a      	strh	r2, [r3, #0]
	}
}
   276c8:	46c0      	nop			; (mov r8, r8)
   276ca:	46bd      	mov	sp, r7
   276cc:	bd80      	pop	{r7, pc}
   276ce:	46c0      	nop			; (mov r8, r8)
   276d0:	20004114 	.word	0x20004114
   276d4:	20005960 	.word	0x20005960
   276d8:	00022dc9 	.word	0x00022dc9
   276dc:	00027149 	.word	0x00027149
   276e0:	00023ac5 	.word	0x00023ac5
   276e4:	20004112 	.word	0x20004112

000276e8 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   276e8:	b580      	push	{r7, lr}
   276ea:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   276ec:	4b0a      	ldr	r3, [pc, #40]	; (27718 <socketDeinit+0x30>)
   276ee:	22b0      	movs	r2, #176	; 0xb0
   276f0:	2100      	movs	r1, #0
   276f2:	0018      	movs	r0, r3
   276f4:	4b09      	ldr	r3, [pc, #36]	; (2771c <socketDeinit+0x34>)
   276f6:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   276f8:	2100      	movs	r1, #0
   276fa:	2002      	movs	r0, #2
   276fc:	4b08      	ldr	r3, [pc, #32]	; (27720 <socketDeinit+0x38>)
   276fe:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   27700:	4b08      	ldr	r3, [pc, #32]	; (27724 <socketDeinit+0x3c>)
   27702:	2200      	movs	r2, #0
   27704:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   27706:	4b08      	ldr	r3, [pc, #32]	; (27728 <socketDeinit+0x40>)
   27708:	2200      	movs	r2, #0
   2770a:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   2770c:	4b07      	ldr	r3, [pc, #28]	; (2772c <socketDeinit+0x44>)
   2770e:	2200      	movs	r2, #0
   27710:	701a      	strb	r2, [r3, #0]
}
   27712:	46c0      	nop			; (mov r8, r8)
   27714:	46bd      	mov	sp, r7
   27716:	bd80      	pop	{r7, pc}
   27718:	20005960 	.word	0x20005960
   2771c:	00022dc9 	.word	0x00022dc9
   27720:	00023ac5 	.word	0x00023ac5
   27724:	20005a10 	.word	0x20005a10
   27728:	20005a18 	.word	0x20005a18
   2772c:	20004114 	.word	0x20004114

00027730 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   27730:	b580      	push	{r7, lr}
   27732:	b082      	sub	sp, #8
   27734:	af00      	add	r7, sp, #0
   27736:	6078      	str	r0, [r7, #4]
   27738:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   2773a:	4b05      	ldr	r3, [pc, #20]	; (27750 <registerSocketCallback+0x20>)
   2773c:	687a      	ldr	r2, [r7, #4]
   2773e:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   27740:	4b04      	ldr	r3, [pc, #16]	; (27754 <registerSocketCallback+0x24>)
   27742:	683a      	ldr	r2, [r7, #0]
   27744:	601a      	str	r2, [r3, #0]
}
   27746:	46c0      	nop			; (mov r8, r8)
   27748:	46bd      	mov	sp, r7
   2774a:	b002      	add	sp, #8
   2774c:	bd80      	pop	{r7, pc}
   2774e:	46c0      	nop			; (mov r8, r8)
   27750:	20005a10 	.word	0x20005a10
   27754:	20005a18 	.word	0x20005a18

00027758 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   27758:	b590      	push	{r4, r7, lr}
   2775a:	b08d      	sub	sp, #52	; 0x34
   2775c:	af04      	add	r7, sp, #16
   2775e:	0004      	movs	r4, r0
   27760:	0008      	movs	r0, r1
   27762:	0011      	movs	r1, r2
   27764:	1dbb      	adds	r3, r7, #6
   27766:	1c22      	adds	r2, r4, #0
   27768:	801a      	strh	r2, [r3, #0]
   2776a:	1d7b      	adds	r3, r7, #5
   2776c:	1c02      	adds	r2, r0, #0
   2776e:	701a      	strb	r2, [r3, #0]
   27770:	1d3b      	adds	r3, r7, #4
   27772:	1c0a      	adds	r2, r1, #0
   27774:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   27776:	231f      	movs	r3, #31
   27778:	18fb      	adds	r3, r7, r3
   2777a:	22ff      	movs	r2, #255	; 0xff
   2777c:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   2777e:	1dbb      	adds	r3, r7, #6
   27780:	881b      	ldrh	r3, [r3, #0]
   27782:	2b02      	cmp	r3, #2
   27784:	d000      	beq.n	27788 <socket+0x30>
   27786:	e0ce      	b.n	27926 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   27788:	1d7b      	adds	r3, r7, #5
   2778a:	781b      	ldrb	r3, [r3, #0]
   2778c:	2b01      	cmp	r3, #1
   2778e:	d135      	bne.n	277fc <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   27790:	231e      	movs	r3, #30
   27792:	18fb      	adds	r3, r7, r3
   27794:	2200      	movs	r2, #0
   27796:	701a      	strb	r2, [r3, #0]
   27798:	e02a      	b.n	277f0 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   2779a:	2317      	movs	r3, #23
   2779c:	18fb      	adds	r3, r7, r3
   2779e:	4a66      	ldr	r2, [pc, #408]	; (27938 <socket+0x1e0>)
   277a0:	7812      	ldrb	r2, [r2, #0]
   277a2:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   277a4:	4b64      	ldr	r3, [pc, #400]	; (27938 <socket+0x1e0>)
   277a6:	781b      	ldrb	r3, [r3, #0]
   277a8:	b2db      	uxtb	r3, r3
   277aa:	011a      	lsls	r2, r3, #4
   277ac:	4b63      	ldr	r3, [pc, #396]	; (2793c <socket+0x1e4>)
   277ae:	18d3      	adds	r3, r2, r3
   277b0:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   277b2:	4b61      	ldr	r3, [pc, #388]	; (27938 <socket+0x1e0>)
   277b4:	781b      	ldrb	r3, [r3, #0]
   277b6:	b2db      	uxtb	r3, r3
   277b8:	1c5a      	adds	r2, r3, #1
   277ba:	4b61      	ldr	r3, [pc, #388]	; (27940 <socket+0x1e8>)
   277bc:	2107      	movs	r1, #7
   277be:	0010      	movs	r0, r2
   277c0:	4798      	blx	r3
   277c2:	000b      	movs	r3, r1
   277c4:	b2da      	uxtb	r2, r3
   277c6:	4b5c      	ldr	r3, [pc, #368]	; (27938 <socket+0x1e0>)
   277c8:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   277ca:	69bb      	ldr	r3, [r7, #24]
   277cc:	7a9b      	ldrb	r3, [r3, #10]
   277ce:	b2db      	uxtb	r3, r3
   277d0:	2b00      	cmp	r3, #0
   277d2:	d106      	bne.n	277e2 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   277d4:	231f      	movs	r3, #31
   277d6:	18fb      	adds	r3, r7, r3
   277d8:	2217      	movs	r2, #23
   277da:	18ba      	adds	r2, r7, r2
   277dc:	7812      	ldrb	r2, [r2, #0]
   277de:	701a      	strb	r2, [r3, #0]
					break;
   277e0:	e04c      	b.n	2787c <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   277e2:	231e      	movs	r3, #30
   277e4:	18fb      	adds	r3, r7, r3
   277e6:	781a      	ldrb	r2, [r3, #0]
   277e8:	231e      	movs	r3, #30
   277ea:	18fb      	adds	r3, r7, r3
   277ec:	3201      	adds	r2, #1
   277ee:	701a      	strb	r2, [r3, #0]
   277f0:	231e      	movs	r3, #30
   277f2:	18fb      	adds	r3, r7, r3
   277f4:	781b      	ldrb	r3, [r3, #0]
   277f6:	2b06      	cmp	r3, #6
   277f8:	d9cf      	bls.n	2779a <socket+0x42>
   277fa:	e03f      	b.n	2787c <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   277fc:	1d7b      	adds	r3, r7, #5
   277fe:	781b      	ldrb	r3, [r3, #0]
   27800:	2b02      	cmp	r3, #2
   27802:	d13b      	bne.n	2787c <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   27804:	4b4f      	ldr	r3, [pc, #316]	; (27944 <socket+0x1ec>)
   27806:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   27808:	231e      	movs	r3, #30
   2780a:	18fb      	adds	r3, r7, r3
   2780c:	2200      	movs	r2, #0
   2780e:	701a      	strb	r2, [r3, #0]
   27810:	e02f      	b.n	27872 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   27812:	2317      	movs	r3, #23
   27814:	18fb      	adds	r3, r7, r3
   27816:	4a4c      	ldr	r2, [pc, #304]	; (27948 <socket+0x1f0>)
   27818:	7812      	ldrb	r2, [r2, #0]
   2781a:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   2781c:	4b4a      	ldr	r3, [pc, #296]	; (27948 <socket+0x1f0>)
   2781e:	781b      	ldrb	r3, [r3, #0]
   27820:	b2db      	uxtb	r3, r3
   27822:	011b      	lsls	r3, r3, #4
   27824:	693a      	ldr	r2, [r7, #16]
   27826:	18d3      	adds	r3, r2, r3
   27828:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   2782a:	4b47      	ldr	r3, [pc, #284]	; (27948 <socket+0x1f0>)
   2782c:	781b      	ldrb	r3, [r3, #0]
   2782e:	b2db      	uxtb	r3, r3
   27830:	3301      	adds	r3, #1
   27832:	4a46      	ldr	r2, [pc, #280]	; (2794c <socket+0x1f4>)
   27834:	4013      	ands	r3, r2
   27836:	d504      	bpl.n	27842 <socket+0xea>
   27838:	3b01      	subs	r3, #1
   2783a:	2204      	movs	r2, #4
   2783c:	4252      	negs	r2, r2
   2783e:	4313      	orrs	r3, r2
   27840:	3301      	adds	r3, #1
   27842:	b2da      	uxtb	r2, r3
   27844:	4b40      	ldr	r3, [pc, #256]	; (27948 <socket+0x1f0>)
   27846:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   27848:	69bb      	ldr	r3, [r7, #24]
   2784a:	7a9b      	ldrb	r3, [r3, #10]
   2784c:	b2db      	uxtb	r3, r3
   2784e:	2b00      	cmp	r3, #0
   27850:	d108      	bne.n	27864 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   27852:	2317      	movs	r3, #23
   27854:	18fb      	adds	r3, r7, r3
   27856:	781b      	ldrb	r3, [r3, #0]
   27858:	3307      	adds	r3, #7
   2785a:	b2da      	uxtb	r2, r3
   2785c:	231f      	movs	r3, #31
   2785e:	18fb      	adds	r3, r7, r3
   27860:	701a      	strb	r2, [r3, #0]
					break;
   27862:	e00b      	b.n	2787c <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   27864:	231e      	movs	r3, #30
   27866:	18fb      	adds	r3, r7, r3
   27868:	781a      	ldrb	r2, [r3, #0]
   2786a:	231e      	movs	r3, #30
   2786c:	18fb      	adds	r3, r7, r3
   2786e:	3201      	adds	r2, #1
   27870:	701a      	strb	r2, [r3, #0]
   27872:	231e      	movs	r3, #30
   27874:	18fb      	adds	r3, r7, r3
   27876:	781b      	ldrb	r3, [r3, #0]
   27878:	2b03      	cmp	r3, #3
   2787a:	d9ca      	bls.n	27812 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   2787c:	231f      	movs	r3, #31
   2787e:	18fb      	adds	r3, r7, r3
   27880:	781b      	ldrb	r3, [r3, #0]
   27882:	2b7f      	cmp	r3, #127	; 0x7f
   27884:	d84f      	bhi.n	27926 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   27886:	69bb      	ldr	r3, [r7, #24]
   27888:	2210      	movs	r2, #16
   2788a:	2100      	movs	r1, #0
   2788c:	0018      	movs	r0, r3
   2788e:	4b30      	ldr	r3, [pc, #192]	; (27950 <socket+0x1f8>)
   27890:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   27892:	69bb      	ldr	r3, [r7, #24]
   27894:	2201      	movs	r2, #1
   27896:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   27898:	4b2e      	ldr	r3, [pc, #184]	; (27954 <socket+0x1fc>)
   2789a:	881b      	ldrh	r3, [r3, #0]
   2789c:	b29b      	uxth	r3, r3
   2789e:	3301      	adds	r3, #1
   278a0:	b29a      	uxth	r2, r3
   278a2:	4b2c      	ldr	r3, [pc, #176]	; (27954 <socket+0x1fc>)
   278a4:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   278a6:	4b2b      	ldr	r3, [pc, #172]	; (27954 <socket+0x1fc>)
   278a8:	881b      	ldrh	r3, [r3, #0]
   278aa:	b29b      	uxth	r3, r3
   278ac:	2b00      	cmp	r3, #0
   278ae:	d106      	bne.n	278be <socket+0x166>
				++gu16SessionID;
   278b0:	4b28      	ldr	r3, [pc, #160]	; (27954 <socket+0x1fc>)
   278b2:	881b      	ldrh	r3, [r3, #0]
   278b4:	b29b      	uxth	r3, r3
   278b6:	3301      	adds	r3, #1
   278b8:	b29a      	uxth	r2, r3
   278ba:	4b26      	ldr	r3, [pc, #152]	; (27954 <socket+0x1fc>)
   278bc:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   278be:	4b25      	ldr	r3, [pc, #148]	; (27954 <socket+0x1fc>)
   278c0:	881b      	ldrh	r3, [r3, #0]
   278c2:	b29a      	uxth	r2, r3
   278c4:	69bb      	ldr	r3, [r7, #24]
   278c6:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   278c8:	4b23      	ldr	r3, [pc, #140]	; (27958 <socket+0x200>)
   278ca:	0018      	movs	r0, r3
   278cc:	4b23      	ldr	r3, [pc, #140]	; (2795c <socket+0x204>)
   278ce:	4798      	blx	r3
   278d0:	231f      	movs	r3, #31
   278d2:	18fb      	adds	r3, r7, r3
   278d4:	2100      	movs	r1, #0
   278d6:	5659      	ldrsb	r1, [r3, r1]
   278d8:	4b1e      	ldr	r3, [pc, #120]	; (27954 <socket+0x1fc>)
   278da:	881b      	ldrh	r3, [r3, #0]
   278dc:	b29b      	uxth	r3, r3
   278de:	001a      	movs	r2, r3
   278e0:	4b1f      	ldr	r3, [pc, #124]	; (27960 <socket+0x208>)
   278e2:	0018      	movs	r0, r3
   278e4:	4b1d      	ldr	r3, [pc, #116]	; (2795c <socket+0x204>)
   278e6:	4798      	blx	r3
   278e8:	4b1e      	ldr	r3, [pc, #120]	; (27964 <socket+0x20c>)
   278ea:	0018      	movs	r0, r3
   278ec:	4b1b      	ldr	r3, [pc, #108]	; (2795c <socket+0x204>)
   278ee:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   278f0:	1d3b      	adds	r3, r7, #4
   278f2:	781b      	ldrb	r3, [r3, #0]
   278f4:	2201      	movs	r2, #1
   278f6:	4013      	ands	r3, r2
   278f8:	d015      	beq.n	27926 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   278fa:	230c      	movs	r3, #12
   278fc:	18fb      	adds	r3, r7, r3
   278fe:	221f      	movs	r2, #31
   27900:	18ba      	adds	r2, r7, r2
   27902:	7812      	ldrb	r2, [r2, #0]
   27904:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   27906:	69bb      	ldr	r3, [r7, #24]
   27908:	2221      	movs	r2, #33	; 0x21
   2790a:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   2790c:	230c      	movs	r3, #12
   2790e:	18fa      	adds	r2, r7, r3
   27910:	2300      	movs	r3, #0
   27912:	9302      	str	r3, [sp, #8]
   27914:	2300      	movs	r3, #0
   27916:	9301      	str	r3, [sp, #4]
   27918:	2300      	movs	r3, #0
   2791a:	9300      	str	r3, [sp, #0]
   2791c:	2304      	movs	r3, #4
   2791e:	2150      	movs	r1, #80	; 0x50
   27920:	2002      	movs	r0, #2
   27922:	4c11      	ldr	r4, [pc, #68]	; (27968 <socket+0x210>)
   27924:	47a0      	blx	r4
			}
		}
	}
	return sock;
   27926:	231f      	movs	r3, #31
   27928:	18fb      	adds	r3, r7, r3
   2792a:	781b      	ldrb	r3, [r3, #0]
   2792c:	b25b      	sxtb	r3, r3
}
   2792e:	0018      	movs	r0, r3
   27930:	46bd      	mov	sp, r7
   27932:	b009      	add	sp, #36	; 0x24
   27934:	bd90      	pop	{r4, r7, pc}
   27936:	46c0      	nop			; (mov r8, r8)
   27938:	20004115 	.word	0x20004115
   2793c:	20005960 	.word	0x20005960
   27940:	00034ed5 	.word	0x00034ed5
   27944:	200059d0 	.word	0x200059d0
   27948:	20004116 	.word	0x20004116
   2794c:	80000003 	.word	0x80000003
   27950:	00022dc9 	.word	0x00022dc9
   27954:	20004112 	.word	0x20004112
   27958:	0003c49c 	.word	0x0003c49c
   2795c:	00020109 	.word	0x00020109
   27960:	0003c4c0 	.word	0x0003c4c0
   27964:	0003c4bc 	.word	0x0003c4bc
   27968:	00023029 	.word	0x00023029

0002796c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   2796c:	b5b0      	push	{r4, r5, r7, lr}
   2796e:	b08a      	sub	sp, #40	; 0x28
   27970:	af04      	add	r7, sp, #16
   27972:	6039      	str	r1, [r7, #0]
   27974:	0011      	movs	r1, r2
   27976:	1dfb      	adds	r3, r7, #7
   27978:	1c02      	adds	r2, r0, #0
   2797a:	701a      	strb	r2, [r3, #0]
   2797c:	1dbb      	adds	r3, r7, #6
   2797e:	1c0a      	adds	r2, r1, #0
   27980:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   27982:	2317      	movs	r3, #23
   27984:	18fb      	adds	r3, r7, r3
   27986:	22fa      	movs	r2, #250	; 0xfa
   27988:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   2798a:	1dfb      	adds	r3, r7, #7
   2798c:	781b      	ldrb	r3, [r3, #0]
   2798e:	2b7f      	cmp	r3, #127	; 0x7f
   27990:	d867      	bhi.n	27a62 <connect+0xf6>
   27992:	683b      	ldr	r3, [r7, #0]
   27994:	2b00      	cmp	r3, #0
   27996:	d064      	beq.n	27a62 <connect+0xf6>
   27998:	1dfb      	adds	r3, r7, #7
   2799a:	781b      	ldrb	r3, [r3, #0]
   2799c:	b25b      	sxtb	r3, r3
   2799e:	4a35      	ldr	r2, [pc, #212]	; (27a74 <connect+0x108>)
   279a0:	011b      	lsls	r3, r3, #4
   279a2:	18d3      	adds	r3, r2, r3
   279a4:	330a      	adds	r3, #10
   279a6:	781b      	ldrb	r3, [r3, #0]
   279a8:	b2db      	uxtb	r3, r3
   279aa:	2b01      	cmp	r3, #1
   279ac:	d159      	bne.n	27a62 <connect+0xf6>
   279ae:	1dbb      	adds	r3, r7, #6
   279b0:	781b      	ldrb	r3, [r3, #0]
   279b2:	2b00      	cmp	r3, #0
   279b4:	d055      	beq.n	27a62 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   279b6:	2316      	movs	r3, #22
   279b8:	18fb      	adds	r3, r7, r3
   279ba:	2244      	movs	r2, #68	; 0x44
   279bc:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   279be:	1dfb      	adds	r3, r7, #7
   279c0:	781b      	ldrb	r3, [r3, #0]
   279c2:	b25b      	sxtb	r3, r3
   279c4:	4a2b      	ldr	r2, [pc, #172]	; (27a74 <connect+0x108>)
   279c6:	011b      	lsls	r3, r3, #4
   279c8:	18d3      	adds	r3, r2, r3
   279ca:	330b      	adds	r3, #11
   279cc:	781b      	ldrb	r3, [r3, #0]
   279ce:	b2db      	uxtb	r3, r3
   279d0:	001a      	movs	r2, r3
   279d2:	2301      	movs	r3, #1
   279d4:	4013      	ands	r3, r2
   279d6:	d00f      	beq.n	279f8 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   279d8:	2316      	movs	r3, #22
   279da:	18fb      	adds	r3, r7, r3
   279dc:	224b      	movs	r2, #75	; 0x4b
   279de:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   279e0:	1dfb      	adds	r3, r7, #7
   279e2:	781b      	ldrb	r3, [r3, #0]
   279e4:	b25b      	sxtb	r3, r3
   279e6:	4a23      	ldr	r2, [pc, #140]	; (27a74 <connect+0x108>)
   279e8:	011b      	lsls	r3, r3, #4
   279ea:	18d3      	adds	r3, r2, r3
   279ec:	330b      	adds	r3, #11
   279ee:	781b      	ldrb	r3, [r3, #0]
   279f0:	b2da      	uxtb	r2, r3
   279f2:	2308      	movs	r3, #8
   279f4:	18fb      	adds	r3, r7, r3
   279f6:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   279f8:	2308      	movs	r3, #8
   279fa:	18fb      	adds	r3, r7, r3
   279fc:	1dfa      	adds	r2, r7, #7
   279fe:	7812      	ldrb	r2, [r2, #0]
   27a00:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   27a02:	6839      	ldr	r1, [r7, #0]
   27a04:	2308      	movs	r3, #8
   27a06:	18fb      	adds	r3, r7, r3
   27a08:	2208      	movs	r2, #8
   27a0a:	0018      	movs	r0, r3
   27a0c:	4b1a      	ldr	r3, [pc, #104]	; (27a78 <connect+0x10c>)
   27a0e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   27a10:	1dfb      	adds	r3, r7, #7
   27a12:	781b      	ldrb	r3, [r3, #0]
   27a14:	b25b      	sxtb	r3, r3
   27a16:	4a17      	ldr	r2, [pc, #92]	; (27a74 <connect+0x108>)
   27a18:	011b      	lsls	r3, r3, #4
   27a1a:	18d3      	adds	r3, r2, r3
   27a1c:	3306      	adds	r3, #6
   27a1e:	881b      	ldrh	r3, [r3, #0]
   27a20:	b29a      	uxth	r2, r3
   27a22:	2308      	movs	r3, #8
   27a24:	18fb      	adds	r3, r7, r3
   27a26:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   27a28:	2317      	movs	r3, #23
   27a2a:	18fc      	adds	r4, r7, r3
   27a2c:	2308      	movs	r3, #8
   27a2e:	18fa      	adds	r2, r7, r3
   27a30:	2316      	movs	r3, #22
   27a32:	18fb      	adds	r3, r7, r3
   27a34:	7819      	ldrb	r1, [r3, #0]
   27a36:	2300      	movs	r3, #0
   27a38:	9302      	str	r3, [sp, #8]
   27a3a:	2300      	movs	r3, #0
   27a3c:	9301      	str	r3, [sp, #4]
   27a3e:	2300      	movs	r3, #0
   27a40:	9300      	str	r3, [sp, #0]
   27a42:	230c      	movs	r3, #12
   27a44:	2002      	movs	r0, #2
   27a46:	4d0d      	ldr	r5, [pc, #52]	; (27a7c <connect+0x110>)
   27a48:	47a8      	blx	r5
   27a4a:	0003      	movs	r3, r0
   27a4c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   27a4e:	2317      	movs	r3, #23
   27a50:	18fb      	adds	r3, r7, r3
   27a52:	781b      	ldrb	r3, [r3, #0]
   27a54:	b25b      	sxtb	r3, r3
   27a56:	2b00      	cmp	r3, #0
   27a58:	d003      	beq.n	27a62 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   27a5a:	2317      	movs	r3, #23
   27a5c:	18fb      	adds	r3, r7, r3
   27a5e:	22f7      	movs	r2, #247	; 0xf7
   27a60:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   27a62:	2317      	movs	r3, #23
   27a64:	18fb      	adds	r3, r7, r3
   27a66:	781b      	ldrb	r3, [r3, #0]
   27a68:	b25b      	sxtb	r3, r3
}
   27a6a:	0018      	movs	r0, r3
   27a6c:	46bd      	mov	sp, r7
   27a6e:	b006      	add	sp, #24
   27a70:	bdb0      	pop	{r4, r5, r7, pc}
   27a72:	46c0      	nop			; (mov r8, r8)
   27a74:	20005960 	.word	0x20005960
   27a78:	00022d8d 	.word	0x00022d8d
   27a7c:	00023029 	.word	0x00023029

00027a80 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   27a80:	b590      	push	{r4, r7, lr}
   27a82:	b08f      	sub	sp, #60	; 0x3c
   27a84:	af04      	add	r7, sp, #16
   27a86:	0004      	movs	r4, r0
   27a88:	60b9      	str	r1, [r7, #8]
   27a8a:	0010      	movs	r0, r2
   27a8c:	0019      	movs	r1, r3
   27a8e:	230f      	movs	r3, #15
   27a90:	18fb      	adds	r3, r7, r3
   27a92:	1c22      	adds	r2, r4, #0
   27a94:	701a      	strb	r2, [r3, #0]
   27a96:	230c      	movs	r3, #12
   27a98:	18fb      	adds	r3, r7, r3
   27a9a:	1c02      	adds	r2, r0, #0
   27a9c:	801a      	strh	r2, [r3, #0]
   27a9e:	1dbb      	adds	r3, r7, #6
   27aa0:	1c0a      	adds	r2, r1, #0
   27aa2:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   27aa4:	2326      	movs	r3, #38	; 0x26
   27aa6:	18fb      	adds	r3, r7, r3
   27aa8:	2206      	movs	r2, #6
   27aaa:	4252      	negs	r2, r2
   27aac:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   27aae:	230f      	movs	r3, #15
   27ab0:	18fb      	adds	r3, r7, r3
   27ab2:	781b      	ldrb	r3, [r3, #0]
   27ab4:	2b7f      	cmp	r3, #127	; 0x7f
   27ab6:	d900      	bls.n	27aba <send+0x3a>
   27ab8:	e087      	b.n	27bca <send+0x14a>
   27aba:	68bb      	ldr	r3, [r7, #8]
   27abc:	2b00      	cmp	r3, #0
   27abe:	d100      	bne.n	27ac2 <send+0x42>
   27ac0:	e083      	b.n	27bca <send+0x14a>
   27ac2:	230c      	movs	r3, #12
   27ac4:	18fb      	adds	r3, r7, r3
   27ac6:	881a      	ldrh	r2, [r3, #0]
   27ac8:	23af      	movs	r3, #175	; 0xaf
   27aca:	00db      	lsls	r3, r3, #3
   27acc:	429a      	cmp	r2, r3
   27ace:	d900      	bls.n	27ad2 <send+0x52>
   27ad0:	e07b      	b.n	27bca <send+0x14a>
   27ad2:	230f      	movs	r3, #15
   27ad4:	18fb      	adds	r3, r7, r3
   27ad6:	781b      	ldrb	r3, [r3, #0]
   27ad8:	b25b      	sxtb	r3, r3
   27ada:	4a40      	ldr	r2, [pc, #256]	; (27bdc <send+0x15c>)
   27adc:	011b      	lsls	r3, r3, #4
   27ade:	18d3      	adds	r3, r2, r3
   27ae0:	330a      	adds	r3, #10
   27ae2:	781b      	ldrb	r3, [r3, #0]
   27ae4:	b2db      	uxtb	r3, r3
   27ae6:	2b01      	cmp	r3, #1
   27ae8:	d16f      	bne.n	27bca <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   27aea:	2323      	movs	r3, #35	; 0x23
   27aec:	18fb      	adds	r3, r7, r3
   27aee:	2245      	movs	r2, #69	; 0x45
   27af0:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   27af2:	2324      	movs	r3, #36	; 0x24
   27af4:	18fb      	adds	r3, r7, r3
   27af6:	2250      	movs	r2, #80	; 0x50
   27af8:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   27afa:	2310      	movs	r3, #16
   27afc:	18fb      	adds	r3, r7, r3
   27afe:	220f      	movs	r2, #15
   27b00:	18ba      	adds	r2, r7, r2
   27b02:	7812      	ldrb	r2, [r2, #0]
   27b04:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   27b06:	2310      	movs	r3, #16
   27b08:	18fb      	adds	r3, r7, r3
   27b0a:	220c      	movs	r2, #12
   27b0c:	18ba      	adds	r2, r7, r2
   27b0e:	8812      	ldrh	r2, [r2, #0]
   27b10:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   27b12:	230f      	movs	r3, #15
   27b14:	18fb      	adds	r3, r7, r3
   27b16:	781b      	ldrb	r3, [r3, #0]
   27b18:	b25b      	sxtb	r3, r3
   27b1a:	4a30      	ldr	r2, [pc, #192]	; (27bdc <send+0x15c>)
   27b1c:	011b      	lsls	r3, r3, #4
   27b1e:	18d3      	adds	r3, r2, r3
   27b20:	3306      	adds	r3, #6
   27b22:	881b      	ldrh	r3, [r3, #0]
   27b24:	b29a      	uxth	r2, r3
   27b26:	2310      	movs	r3, #16
   27b28:	18fb      	adds	r3, r7, r3
   27b2a:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   27b2c:	230f      	movs	r3, #15
   27b2e:	18fb      	adds	r3, r7, r3
   27b30:	781b      	ldrb	r3, [r3, #0]
   27b32:	b25b      	sxtb	r3, r3
   27b34:	2b06      	cmp	r3, #6
   27b36:	dd03      	ble.n	27b40 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   27b38:	2324      	movs	r3, #36	; 0x24
   27b3a:	18fb      	adds	r3, r7, r3
   27b3c:	2244      	movs	r2, #68	; 0x44
   27b3e:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27b40:	230f      	movs	r3, #15
   27b42:	18fb      	adds	r3, r7, r3
   27b44:	781b      	ldrb	r3, [r3, #0]
   27b46:	b25b      	sxtb	r3, r3
   27b48:	4a24      	ldr	r2, [pc, #144]	; (27bdc <send+0x15c>)
   27b4a:	011b      	lsls	r3, r3, #4
   27b4c:	18d3      	adds	r3, r2, r3
   27b4e:	330b      	adds	r3, #11
   27b50:	781b      	ldrb	r3, [r3, #0]
   27b52:	b2db      	uxtb	r3, r3
   27b54:	001a      	movs	r2, r3
   27b56:	2301      	movs	r3, #1
   27b58:	4013      	ands	r3, r2
   27b5a:	d00f      	beq.n	27b7c <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   27b5c:	2323      	movs	r3, #35	; 0x23
   27b5e:	18fb      	adds	r3, r7, r3
   27b60:	224c      	movs	r2, #76	; 0x4c
   27b62:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   27b64:	230f      	movs	r3, #15
   27b66:	18fb      	adds	r3, r7, r3
   27b68:	2200      	movs	r2, #0
   27b6a:	569a      	ldrsb	r2, [r3, r2]
   27b6c:	2324      	movs	r3, #36	; 0x24
   27b6e:	18fb      	adds	r3, r7, r3
   27b70:	491a      	ldr	r1, [pc, #104]	; (27bdc <send+0x15c>)
   27b72:	0112      	lsls	r2, r2, #4
   27b74:	188a      	adds	r2, r1, r2
   27b76:	3208      	adds	r2, #8
   27b78:	8812      	ldrh	r2, [r2, #0]
   27b7a:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   27b7c:	2323      	movs	r3, #35	; 0x23
   27b7e:	18fb      	adds	r3, r7, r3
   27b80:	781b      	ldrb	r3, [r3, #0]
   27b82:	2280      	movs	r2, #128	; 0x80
   27b84:	4252      	negs	r2, r2
   27b86:	4313      	orrs	r3, r2
   27b88:	b2d9      	uxtb	r1, r3
   27b8a:	2310      	movs	r3, #16
   27b8c:	18fa      	adds	r2, r7, r3
   27b8e:	2324      	movs	r3, #36	; 0x24
   27b90:	18fb      	adds	r3, r7, r3
   27b92:	881b      	ldrh	r3, [r3, #0]
   27b94:	9302      	str	r3, [sp, #8]
   27b96:	230c      	movs	r3, #12
   27b98:	18fb      	adds	r3, r7, r3
   27b9a:	881b      	ldrh	r3, [r3, #0]
   27b9c:	9301      	str	r3, [sp, #4]
   27b9e:	68bb      	ldr	r3, [r7, #8]
   27ba0:	9300      	str	r3, [sp, #0]
   27ba2:	2310      	movs	r3, #16
   27ba4:	2002      	movs	r0, #2
   27ba6:	4c0e      	ldr	r4, [pc, #56]	; (27be0 <send+0x160>)
   27ba8:	47a0      	blx	r4
   27baa:	0003      	movs	r3, r0
   27bac:	001a      	movs	r2, r3
   27bae:	2326      	movs	r3, #38	; 0x26
   27bb0:	18fb      	adds	r3, r7, r3
   27bb2:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   27bb4:	2326      	movs	r3, #38	; 0x26
   27bb6:	18fb      	adds	r3, r7, r3
   27bb8:	2200      	movs	r2, #0
   27bba:	5e9b      	ldrsh	r3, [r3, r2]
   27bbc:	2b00      	cmp	r3, #0
   27bbe:	d004      	beq.n	27bca <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   27bc0:	2326      	movs	r3, #38	; 0x26
   27bc2:	18fb      	adds	r3, r7, r3
   27bc4:	220e      	movs	r2, #14
   27bc6:	4252      	negs	r2, r2
   27bc8:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   27bca:	2326      	movs	r3, #38	; 0x26
   27bcc:	18fb      	adds	r3, r7, r3
   27bce:	2200      	movs	r2, #0
   27bd0:	5e9b      	ldrsh	r3, [r3, r2]
}
   27bd2:	0018      	movs	r0, r3
   27bd4:	46bd      	mov	sp, r7
   27bd6:	b00b      	add	sp, #44	; 0x2c
   27bd8:	bd90      	pop	{r4, r7, pc}
   27bda:	46c0      	nop			; (mov r8, r8)
   27bdc:	20005960 	.word	0x20005960
   27be0:	00023029 	.word	0x00023029

00027be4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   27be4:	b590      	push	{r4, r7, lr}
   27be6:	b08d      	sub	sp, #52	; 0x34
   27be8:	af04      	add	r7, sp, #16
   27bea:	60b9      	str	r1, [r7, #8]
   27bec:	0011      	movs	r1, r2
   27bee:	607b      	str	r3, [r7, #4]
   27bf0:	230f      	movs	r3, #15
   27bf2:	18fb      	adds	r3, r7, r3
   27bf4:	1c02      	adds	r2, r0, #0
   27bf6:	701a      	strb	r2, [r3, #0]
   27bf8:	230c      	movs	r3, #12
   27bfa:	18fb      	adds	r3, r7, r3
   27bfc:	1c0a      	adds	r2, r1, #0
   27bfe:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   27c00:	231e      	movs	r3, #30
   27c02:	18fb      	adds	r3, r7, r3
   27c04:	2206      	movs	r2, #6
   27c06:	4252      	negs	r2, r2
   27c08:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   27c0a:	230f      	movs	r3, #15
   27c0c:	18fb      	adds	r3, r7, r3
   27c0e:	781b      	ldrb	r3, [r3, #0]
   27c10:	2b7f      	cmp	r3, #127	; 0x7f
   27c12:	d900      	bls.n	27c16 <recv+0x32>
   27c14:	e099      	b.n	27d4a <recv+0x166>
   27c16:	68bb      	ldr	r3, [r7, #8]
   27c18:	2b00      	cmp	r3, #0
   27c1a:	d100      	bne.n	27c1e <recv+0x3a>
   27c1c:	e095      	b.n	27d4a <recv+0x166>
   27c1e:	230c      	movs	r3, #12
   27c20:	18fb      	adds	r3, r7, r3
   27c22:	881b      	ldrh	r3, [r3, #0]
   27c24:	2b00      	cmp	r3, #0
   27c26:	d100      	bne.n	27c2a <recv+0x46>
   27c28:	e08f      	b.n	27d4a <recv+0x166>
   27c2a:	230f      	movs	r3, #15
   27c2c:	18fb      	adds	r3, r7, r3
   27c2e:	781b      	ldrb	r3, [r3, #0]
   27c30:	b25b      	sxtb	r3, r3
   27c32:	4a4a      	ldr	r2, [pc, #296]	; (27d5c <recv+0x178>)
   27c34:	011b      	lsls	r3, r3, #4
   27c36:	18d3      	adds	r3, r2, r3
   27c38:	330a      	adds	r3, #10
   27c3a:	781b      	ldrb	r3, [r3, #0]
   27c3c:	b2db      	uxtb	r3, r3
   27c3e:	2b01      	cmp	r3, #1
   27c40:	d000      	beq.n	27c44 <recv+0x60>
   27c42:	e082      	b.n	27d4a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   27c44:	231e      	movs	r3, #30
   27c46:	18fb      	adds	r3, r7, r3
   27c48:	2200      	movs	r2, #0
   27c4a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   27c4c:	230f      	movs	r3, #15
   27c4e:	18fb      	adds	r3, r7, r3
   27c50:	2200      	movs	r2, #0
   27c52:	569a      	ldrsb	r2, [r3, r2]
   27c54:	4b41      	ldr	r3, [pc, #260]	; (27d5c <recv+0x178>)
   27c56:	0112      	lsls	r2, r2, #4
   27c58:	68b9      	ldr	r1, [r7, #8]
   27c5a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   27c5c:	230f      	movs	r3, #15
   27c5e:	18fb      	adds	r3, r7, r3
   27c60:	781b      	ldrb	r3, [r3, #0]
   27c62:	b25b      	sxtb	r3, r3
   27c64:	4a3d      	ldr	r2, [pc, #244]	; (27d5c <recv+0x178>)
   27c66:	011b      	lsls	r3, r3, #4
   27c68:	18d3      	adds	r3, r2, r3
   27c6a:	3304      	adds	r3, #4
   27c6c:	220c      	movs	r2, #12
   27c6e:	18ba      	adds	r2, r7, r2
   27c70:	8812      	ldrh	r2, [r2, #0]
   27c72:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   27c74:	230f      	movs	r3, #15
   27c76:	18fb      	adds	r3, r7, r3
   27c78:	781b      	ldrb	r3, [r3, #0]
   27c7a:	b25b      	sxtb	r3, r3
   27c7c:	4a37      	ldr	r2, [pc, #220]	; (27d5c <recv+0x178>)
   27c7e:	011b      	lsls	r3, r3, #4
   27c80:	18d3      	adds	r3, r2, r3
   27c82:	330c      	adds	r3, #12
   27c84:	781b      	ldrb	r3, [r3, #0]
   27c86:	b2db      	uxtb	r3, r3
   27c88:	2b00      	cmp	r3, #0
   27c8a:	d15e      	bne.n	27d4a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   27c8c:	231d      	movs	r3, #29
   27c8e:	18fb      	adds	r3, r7, r3
   27c90:	2246      	movs	r2, #70	; 0x46
   27c92:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   27c94:	230f      	movs	r3, #15
   27c96:	18fb      	adds	r3, r7, r3
   27c98:	781b      	ldrb	r3, [r3, #0]
   27c9a:	b25b      	sxtb	r3, r3
   27c9c:	4a2f      	ldr	r2, [pc, #188]	; (27d5c <recv+0x178>)
   27c9e:	011b      	lsls	r3, r3, #4
   27ca0:	18d3      	adds	r3, r2, r3
   27ca2:	330c      	adds	r3, #12
   27ca4:	2201      	movs	r2, #1
   27ca6:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27ca8:	230f      	movs	r3, #15
   27caa:	18fb      	adds	r3, r7, r3
   27cac:	781b      	ldrb	r3, [r3, #0]
   27cae:	b25b      	sxtb	r3, r3
   27cb0:	4a2a      	ldr	r2, [pc, #168]	; (27d5c <recv+0x178>)
   27cb2:	011b      	lsls	r3, r3, #4
   27cb4:	18d3      	adds	r3, r2, r3
   27cb6:	330b      	adds	r3, #11
   27cb8:	781b      	ldrb	r3, [r3, #0]
   27cba:	b2db      	uxtb	r3, r3
   27cbc:	001a      	movs	r2, r3
   27cbe:	2301      	movs	r3, #1
   27cc0:	4013      	ands	r3, r2
   27cc2:	d003      	beq.n	27ccc <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   27cc4:	231d      	movs	r3, #29
   27cc6:	18fb      	adds	r3, r7, r3
   27cc8:	224d      	movs	r2, #77	; 0x4d
   27cca:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   27ccc:	687b      	ldr	r3, [r7, #4]
   27cce:	2b00      	cmp	r3, #0
   27cd0:	d105      	bne.n	27cde <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   27cd2:	2314      	movs	r3, #20
   27cd4:	18fb      	adds	r3, r7, r3
   27cd6:	2201      	movs	r2, #1
   27cd8:	4252      	negs	r2, r2
   27cda:	601a      	str	r2, [r3, #0]
   27cdc:	e003      	b.n	27ce6 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   27cde:	2314      	movs	r3, #20
   27ce0:	18fb      	adds	r3, r7, r3
   27ce2:	687a      	ldr	r2, [r7, #4]
   27ce4:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   27ce6:	2314      	movs	r3, #20
   27ce8:	18fb      	adds	r3, r7, r3
   27cea:	220f      	movs	r2, #15
   27cec:	18ba      	adds	r2, r7, r2
   27cee:	7812      	ldrb	r2, [r2, #0]
   27cf0:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   27cf2:	230f      	movs	r3, #15
   27cf4:	18fb      	adds	r3, r7, r3
   27cf6:	781b      	ldrb	r3, [r3, #0]
   27cf8:	b25b      	sxtb	r3, r3
   27cfa:	4a18      	ldr	r2, [pc, #96]	; (27d5c <recv+0x178>)
   27cfc:	011b      	lsls	r3, r3, #4
   27cfe:	18d3      	adds	r3, r2, r3
   27d00:	3306      	adds	r3, #6
   27d02:	881b      	ldrh	r3, [r3, #0]
   27d04:	b29a      	uxth	r2, r3
   27d06:	2314      	movs	r3, #20
   27d08:	18fb      	adds	r3, r7, r3
   27d0a:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   27d0c:	2314      	movs	r3, #20
   27d0e:	18fa      	adds	r2, r7, r3
   27d10:	231d      	movs	r3, #29
   27d12:	18fb      	adds	r3, r7, r3
   27d14:	7819      	ldrb	r1, [r3, #0]
   27d16:	2300      	movs	r3, #0
   27d18:	9302      	str	r3, [sp, #8]
   27d1a:	2300      	movs	r3, #0
   27d1c:	9301      	str	r3, [sp, #4]
   27d1e:	2300      	movs	r3, #0
   27d20:	9300      	str	r3, [sp, #0]
   27d22:	2308      	movs	r3, #8
   27d24:	2002      	movs	r0, #2
   27d26:	4c0e      	ldr	r4, [pc, #56]	; (27d60 <recv+0x17c>)
   27d28:	47a0      	blx	r4
   27d2a:	0003      	movs	r3, r0
   27d2c:	001a      	movs	r2, r3
   27d2e:	231e      	movs	r3, #30
   27d30:	18fb      	adds	r3, r7, r3
   27d32:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   27d34:	231e      	movs	r3, #30
   27d36:	18fb      	adds	r3, r7, r3
   27d38:	2200      	movs	r2, #0
   27d3a:	5e9b      	ldrsh	r3, [r3, r2]
   27d3c:	2b00      	cmp	r3, #0
   27d3e:	d004      	beq.n	27d4a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   27d40:	231e      	movs	r3, #30
   27d42:	18fb      	adds	r3, r7, r3
   27d44:	220e      	movs	r2, #14
   27d46:	4252      	negs	r2, r2
   27d48:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   27d4a:	231e      	movs	r3, #30
   27d4c:	18fb      	adds	r3, r7, r3
   27d4e:	2200      	movs	r2, #0
   27d50:	5e9b      	ldrsh	r3, [r3, r2]
}
   27d52:	0018      	movs	r0, r3
   27d54:	46bd      	mov	sp, r7
   27d56:	b009      	add	sp, #36	; 0x24
   27d58:	bd90      	pop	{r4, r7, pc}
   27d5a:	46c0      	nop			; (mov r8, r8)
   27d5c:	20005960 	.word	0x20005960
   27d60:	00023029 	.word	0x00023029

00027d64 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   27d64:	b5b0      	push	{r4, r5, r7, lr}
   27d66:	b088      	sub	sp, #32
   27d68:	af04      	add	r7, sp, #16
   27d6a:	0002      	movs	r2, r0
   27d6c:	1dfb      	adds	r3, r7, #7
   27d6e:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   27d70:	230f      	movs	r3, #15
   27d72:	18fb      	adds	r3, r7, r3
   27d74:	22fa      	movs	r2, #250	; 0xfa
   27d76:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   27d78:	4b43      	ldr	r3, [pc, #268]	; (27e88 <close+0x124>)
   27d7a:	0018      	movs	r0, r3
   27d7c:	4b43      	ldr	r3, [pc, #268]	; (27e8c <close+0x128>)
   27d7e:	4798      	blx	r3
   27d80:	1dfb      	adds	r3, r7, #7
   27d82:	2200      	movs	r2, #0
   27d84:	569a      	ldrsb	r2, [r3, r2]
   27d86:	4b42      	ldr	r3, [pc, #264]	; (27e90 <close+0x12c>)
   27d88:	0011      	movs	r1, r2
   27d8a:	0018      	movs	r0, r3
   27d8c:	4b3f      	ldr	r3, [pc, #252]	; (27e8c <close+0x128>)
   27d8e:	4798      	blx	r3
   27d90:	4b40      	ldr	r3, [pc, #256]	; (27e94 <close+0x130>)
   27d92:	0018      	movs	r0, r3
   27d94:	4b3d      	ldr	r3, [pc, #244]	; (27e8c <close+0x128>)
   27d96:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   27d98:	1dfb      	adds	r3, r7, #7
   27d9a:	781b      	ldrb	r3, [r3, #0]
   27d9c:	2b7f      	cmp	r3, #127	; 0x7f
   27d9e:	d86a      	bhi.n	27e76 <close+0x112>
   27da0:	1dfb      	adds	r3, r7, #7
   27da2:	781b      	ldrb	r3, [r3, #0]
   27da4:	b25b      	sxtb	r3, r3
   27da6:	4a3c      	ldr	r2, [pc, #240]	; (27e98 <close+0x134>)
   27da8:	011b      	lsls	r3, r3, #4
   27daa:	18d3      	adds	r3, r2, r3
   27dac:	330a      	adds	r3, #10
   27dae:	781b      	ldrb	r3, [r3, #0]
   27db0:	b2db      	uxtb	r3, r3
   27db2:	2b01      	cmp	r3, #1
   27db4:	d15f      	bne.n	27e76 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   27db6:	230e      	movs	r3, #14
   27db8:	18fb      	adds	r3, r7, r3
   27dba:	2249      	movs	r2, #73	; 0x49
   27dbc:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   27dbe:	2308      	movs	r3, #8
   27dc0:	18fb      	adds	r3, r7, r3
   27dc2:	1dfa      	adds	r2, r7, #7
   27dc4:	7812      	ldrb	r2, [r2, #0]
   27dc6:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   27dc8:	1dfb      	adds	r3, r7, #7
   27dca:	781b      	ldrb	r3, [r3, #0]
   27dcc:	b25b      	sxtb	r3, r3
   27dce:	4a32      	ldr	r2, [pc, #200]	; (27e98 <close+0x134>)
   27dd0:	011b      	lsls	r3, r3, #4
   27dd2:	18d3      	adds	r3, r2, r3
   27dd4:	3306      	adds	r3, #6
   27dd6:	881b      	ldrh	r3, [r3, #0]
   27dd8:	b29a      	uxth	r2, r3
   27dda:	2308      	movs	r3, #8
   27ddc:	18fb      	adds	r3, r7, r3
   27dde:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   27de0:	1dfb      	adds	r3, r7, #7
   27de2:	781b      	ldrb	r3, [r3, #0]
   27de4:	b25b      	sxtb	r3, r3
   27de6:	4a2c      	ldr	r2, [pc, #176]	; (27e98 <close+0x134>)
   27de8:	011b      	lsls	r3, r3, #4
   27dea:	18d3      	adds	r3, r2, r3
   27dec:	330a      	adds	r3, #10
   27dee:	2200      	movs	r2, #0
   27df0:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   27df2:	1dfb      	adds	r3, r7, #7
   27df4:	781b      	ldrb	r3, [r3, #0]
   27df6:	b25b      	sxtb	r3, r3
   27df8:	4a27      	ldr	r2, [pc, #156]	; (27e98 <close+0x134>)
   27dfa:	011b      	lsls	r3, r3, #4
   27dfc:	18d3      	adds	r3, r2, r3
   27dfe:	3306      	adds	r3, #6
   27e00:	2200      	movs	r2, #0
   27e02:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27e04:	1dfb      	adds	r3, r7, #7
   27e06:	781b      	ldrb	r3, [r3, #0]
   27e08:	b25b      	sxtb	r3, r3
   27e0a:	4a23      	ldr	r2, [pc, #140]	; (27e98 <close+0x134>)
   27e0c:	011b      	lsls	r3, r3, #4
   27e0e:	18d3      	adds	r3, r2, r3
   27e10:	330b      	adds	r3, #11
   27e12:	781b      	ldrb	r3, [r3, #0]
   27e14:	b2db      	uxtb	r3, r3
   27e16:	001a      	movs	r2, r3
   27e18:	2301      	movs	r3, #1
   27e1a:	4013      	ands	r3, r2
   27e1c:	d003      	beq.n	27e26 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   27e1e:	230e      	movs	r3, #14
   27e20:	18fb      	adds	r3, r7, r3
   27e22:	224e      	movs	r2, #78	; 0x4e
   27e24:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   27e26:	230f      	movs	r3, #15
   27e28:	18fc      	adds	r4, r7, r3
   27e2a:	2308      	movs	r3, #8
   27e2c:	18fa      	adds	r2, r7, r3
   27e2e:	230e      	movs	r3, #14
   27e30:	18fb      	adds	r3, r7, r3
   27e32:	7819      	ldrb	r1, [r3, #0]
   27e34:	2300      	movs	r3, #0
   27e36:	9302      	str	r3, [sp, #8]
   27e38:	2300      	movs	r3, #0
   27e3a:	9301      	str	r3, [sp, #4]
   27e3c:	2300      	movs	r3, #0
   27e3e:	9300      	str	r3, [sp, #0]
   27e40:	2304      	movs	r3, #4
   27e42:	2002      	movs	r0, #2
   27e44:	4d15      	ldr	r5, [pc, #84]	; (27e9c <close+0x138>)
   27e46:	47a8      	blx	r5
   27e48:	0003      	movs	r3, r0
   27e4a:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   27e4c:	230f      	movs	r3, #15
   27e4e:	18fb      	adds	r3, r7, r3
   27e50:	781b      	ldrb	r3, [r3, #0]
   27e52:	b25b      	sxtb	r3, r3
   27e54:	2b00      	cmp	r3, #0
   27e56:	d003      	beq.n	27e60 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   27e58:	230f      	movs	r3, #15
   27e5a:	18fb      	adds	r3, r7, r3
   27e5c:	22f7      	movs	r2, #247	; 0xf7
   27e5e:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   27e60:	1dfb      	adds	r3, r7, #7
   27e62:	781b      	ldrb	r3, [r3, #0]
   27e64:	b25b      	sxtb	r3, r3
   27e66:	011a      	lsls	r2, r3, #4
   27e68:	4b0b      	ldr	r3, [pc, #44]	; (27e98 <close+0x134>)
   27e6a:	18d3      	adds	r3, r2, r3
   27e6c:	2210      	movs	r2, #16
   27e6e:	2100      	movs	r1, #0
   27e70:	0018      	movs	r0, r3
   27e72:	4b0b      	ldr	r3, [pc, #44]	; (27ea0 <close+0x13c>)
   27e74:	4798      	blx	r3
	}
	return s8Ret;
   27e76:	230f      	movs	r3, #15
   27e78:	18fb      	adds	r3, r7, r3
   27e7a:	781b      	ldrb	r3, [r3, #0]
   27e7c:	b25b      	sxtb	r3, r3
}
   27e7e:	0018      	movs	r0, r3
   27e80:	46bd      	mov	sp, r7
   27e82:	b004      	add	sp, #16
   27e84:	bdb0      	pop	{r4, r5, r7, pc}
   27e86:	46c0      	nop			; (mov r8, r8)
   27e88:	0003c49c 	.word	0x0003c49c
   27e8c:	00020109 	.word	0x00020109
   27e90:	0003c4dc 	.word	0x0003c4dc
   27e94:	0003c4bc 	.word	0x0003c4bc
   27e98:	20005960 	.word	0x20005960
   27e9c:	00023029 	.word	0x00023029
   27ea0:	00022dc9 	.word	0x00022dc9

00027ea4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   27ea4:	b580      	push	{r7, lr}
   27ea6:	b086      	sub	sp, #24
   27ea8:	af00      	add	r7, sp, #0
   27eaa:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   27eac:	2300      	movs	r3, #0
   27eae:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   27eb0:	2317      	movs	r3, #23
   27eb2:	18fb      	adds	r3, r7, r3
   27eb4:	2200      	movs	r2, #0
   27eb6:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   27eb8:	2316      	movs	r3, #22
   27eba:	18fb      	adds	r3, r7, r3
   27ebc:	2200      	movs	r2, #0
   27ebe:	701a      	strb	r2, [r3, #0]
   27ec0:	e060      	b.n	27f84 <nmi_inet_addr+0xe0>
	{
		j = 0;
   27ec2:	2315      	movs	r3, #21
   27ec4:	18fb      	adds	r3, r7, r3
   27ec6:	2200      	movs	r2, #0
   27ec8:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   27eca:	2314      	movs	r3, #20
   27ecc:	18fb      	adds	r3, r7, r3
   27ece:	687a      	ldr	r2, [r7, #4]
   27ed0:	7812      	ldrb	r2, [r2, #0]
   27ed2:	701a      	strb	r2, [r3, #0]
			++j;
   27ed4:	2315      	movs	r3, #21
   27ed6:	18fb      	adds	r3, r7, r3
   27ed8:	2215      	movs	r2, #21
   27eda:	18ba      	adds	r2, r7, r2
   27edc:	7812      	ldrb	r2, [r2, #0]
   27ede:	3201      	adds	r2, #1
   27ee0:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   27ee2:	2315      	movs	r3, #21
   27ee4:	18fb      	adds	r3, r7, r3
   27ee6:	781b      	ldrb	r3, [r3, #0]
   27ee8:	2b04      	cmp	r3, #4
   27eea:	d901      	bls.n	27ef0 <nmi_inet_addr+0x4c>
			{
				return 0;
   27eec:	2300      	movs	r3, #0
   27eee:	e057      	b.n	27fa0 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   27ef0:	2314      	movs	r3, #20
   27ef2:	18fb      	adds	r3, r7, r3
   27ef4:	781b      	ldrb	r3, [r3, #0]
   27ef6:	2b2e      	cmp	r3, #46	; 0x2e
   27ef8:	d004      	beq.n	27f04 <nmi_inet_addr+0x60>
   27efa:	2314      	movs	r3, #20
   27efc:	18fb      	adds	r3, r7, r3
   27efe:	781b      	ldrb	r3, [r3, #0]
   27f00:	2b00      	cmp	r3, #0
   27f02:	d10d      	bne.n	27f20 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   27f04:	2316      	movs	r3, #22
   27f06:	18fb      	adds	r3, r7, r3
   27f08:	781b      	ldrb	r3, [r3, #0]
   27f0a:	220c      	movs	r2, #12
   27f0c:	18ba      	adds	r2, r7, r2
   27f0e:	2117      	movs	r1, #23
   27f10:	1879      	adds	r1, r7, r1
   27f12:	7809      	ldrb	r1, [r1, #0]
   27f14:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   27f16:	2317      	movs	r3, #23
   27f18:	18fb      	adds	r3, r7, r3
   27f1a:	2200      	movs	r2, #0
   27f1c:	701a      	strb	r2, [r3, #0]
   27f1e:	e01d      	b.n	27f5c <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   27f20:	2314      	movs	r3, #20
   27f22:	18fb      	adds	r3, r7, r3
   27f24:	781b      	ldrb	r3, [r3, #0]
   27f26:	2b2f      	cmp	r3, #47	; 0x2f
   27f28:	d916      	bls.n	27f58 <nmi_inet_addr+0xb4>
   27f2a:	2314      	movs	r3, #20
   27f2c:	18fb      	adds	r3, r7, r3
   27f2e:	781b      	ldrb	r3, [r3, #0]
   27f30:	2b39      	cmp	r3, #57	; 0x39
   27f32:	d811      	bhi.n	27f58 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   27f34:	2317      	movs	r3, #23
   27f36:	18fb      	adds	r3, r7, r3
   27f38:	781b      	ldrb	r3, [r3, #0]
   27f3a:	1c1a      	adds	r2, r3, #0
   27f3c:	0092      	lsls	r2, r2, #2
   27f3e:	18d3      	adds	r3, r2, r3
   27f40:	18db      	adds	r3, r3, r3
   27f42:	b2da      	uxtb	r2, r3
   27f44:	2314      	movs	r3, #20
   27f46:	18fb      	adds	r3, r7, r3
   27f48:	781b      	ldrb	r3, [r3, #0]
   27f4a:	18d3      	adds	r3, r2, r3
   27f4c:	b2da      	uxtb	r2, r3
   27f4e:	2317      	movs	r3, #23
   27f50:	18fb      	adds	r3, r7, r3
   27f52:	3a30      	subs	r2, #48	; 0x30
   27f54:	701a      	strb	r2, [r3, #0]
   27f56:	e001      	b.n	27f5c <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   27f58:	2300      	movs	r3, #0
   27f5a:	e021      	b.n	27fa0 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   27f5c:	687b      	ldr	r3, [r7, #4]
   27f5e:	3301      	adds	r3, #1
   27f60:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   27f62:	2314      	movs	r3, #20
   27f64:	18fb      	adds	r3, r7, r3
   27f66:	781b      	ldrb	r3, [r3, #0]
   27f68:	2b2e      	cmp	r3, #46	; 0x2e
   27f6a:	d004      	beq.n	27f76 <nmi_inet_addr+0xd2>
   27f6c:	2314      	movs	r3, #20
   27f6e:	18fb      	adds	r3, r7, r3
   27f70:	781b      	ldrb	r3, [r3, #0]
   27f72:	2b00      	cmp	r3, #0
   27f74:	d1a9      	bne.n	27eca <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   27f76:	2316      	movs	r3, #22
   27f78:	18fb      	adds	r3, r7, r3
   27f7a:	2216      	movs	r2, #22
   27f7c:	18ba      	adds	r2, r7, r2
   27f7e:	7812      	ldrb	r2, [r2, #0]
   27f80:	3201      	adds	r2, #1
   27f82:	701a      	strb	r2, [r3, #0]
   27f84:	2316      	movs	r3, #22
   27f86:	18fb      	adds	r3, r7, r3
   27f88:	781b      	ldrb	r3, [r3, #0]
   27f8a:	2b03      	cmp	r3, #3
   27f8c:	d999      	bls.n	27ec2 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   27f8e:	230c      	movs	r3, #12
   27f90:	18f9      	adds	r1, r7, r3
   27f92:	2310      	movs	r3, #16
   27f94:	18fb      	adds	r3, r7, r3
   27f96:	2204      	movs	r2, #4
   27f98:	0018      	movs	r0, r3
   27f9a:	4b03      	ldr	r3, [pc, #12]	; (27fa8 <nmi_inet_addr+0x104>)
   27f9c:	4798      	blx	r3
	return u32IP;
   27f9e:	693b      	ldr	r3, [r7, #16]
}
   27fa0:	0018      	movs	r0, r3
   27fa2:	46bd      	mov	sp, r7
   27fa4:	b006      	add	sp, #24
   27fa6:	bd80      	pop	{r7, pc}
   27fa8:	00022d8d 	.word	0x00022d8d

00027fac <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   27fac:	b5b0      	push	{r4, r5, r7, lr}
   27fae:	b088      	sub	sp, #32
   27fb0:	af04      	add	r7, sp, #16
   27fb2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   27fb4:	230f      	movs	r3, #15
   27fb6:	18fb      	adds	r3, r7, r3
   27fb8:	22fa      	movs	r2, #250	; 0xfa
   27fba:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   27fbc:	687b      	ldr	r3, [r7, #4]
   27fbe:	0018      	movs	r0, r3
   27fc0:	4b14      	ldr	r3, [pc, #80]	; (28014 <gethostbyname+0x68>)
   27fc2:	4798      	blx	r3
   27fc4:	0003      	movs	r3, r0
   27fc6:	001a      	movs	r2, r3
   27fc8:	230e      	movs	r3, #14
   27fca:	18fb      	adds	r3, r7, r3
   27fcc:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   27fce:	230e      	movs	r3, #14
   27fd0:	18fb      	adds	r3, r7, r3
   27fd2:	781b      	ldrb	r3, [r3, #0]
   27fd4:	2b40      	cmp	r3, #64	; 0x40
   27fd6:	d815      	bhi.n	28004 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   27fd8:	230e      	movs	r3, #14
   27fda:	18fb      	adds	r3, r7, r3
   27fdc:	781b      	ldrb	r3, [r3, #0]
   27fde:	b29b      	uxth	r3, r3
   27fe0:	3301      	adds	r3, #1
   27fe2:	b299      	uxth	r1, r3
   27fe4:	230f      	movs	r3, #15
   27fe6:	18fc      	adds	r4, r7, r3
   27fe8:	687a      	ldr	r2, [r7, #4]
   27fea:	2300      	movs	r3, #0
   27fec:	9302      	str	r3, [sp, #8]
   27fee:	2300      	movs	r3, #0
   27ff0:	9301      	str	r3, [sp, #4]
   27ff2:	2300      	movs	r3, #0
   27ff4:	9300      	str	r3, [sp, #0]
   27ff6:	000b      	movs	r3, r1
   27ff8:	214a      	movs	r1, #74	; 0x4a
   27ffa:	2002      	movs	r0, #2
   27ffc:	4d06      	ldr	r5, [pc, #24]	; (28018 <gethostbyname+0x6c>)
   27ffe:	47a8      	blx	r5
   28000:	0003      	movs	r3, r0
   28002:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   28004:	230f      	movs	r3, #15
   28006:	18fb      	adds	r3, r7, r3
   28008:	781b      	ldrb	r3, [r3, #0]
   2800a:	b25b      	sxtb	r3, r3
}
   2800c:	0018      	movs	r0, r3
   2800e:	46bd      	mov	sp, r7
   28010:	b004      	add	sp, #16
   28012:	bdb0      	pop	{r4, r5, r7, pc}
   28014:	00022e07 	.word	0x00022e07
   28018:	00023029 	.word	0x00023029

0002801c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   2801c:	b580      	push	{r7, lr}
   2801e:	b082      	sub	sp, #8
   28020:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   28022:	003b      	movs	r3, r7
   28024:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   28026:	687b      	ldr	r3, [r7, #4]
   28028:	22b9      	movs	r2, #185	; 0xb9
   2802a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   2802c:	4b13      	ldr	r3, [pc, #76]	; (2807c <spi_flash_enter_low_power_mode+0x60>)
   2802e:	2100      	movs	r1, #0
   28030:	0018      	movs	r0, r3
   28032:	4b13      	ldr	r3, [pc, #76]	; (28080 <spi_flash_enter_low_power_mode+0x64>)
   28034:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   28036:	687b      	ldr	r3, [r7, #4]
   28038:	781b      	ldrb	r3, [r3, #0]
   2803a:	001a      	movs	r2, r3
   2803c:	4b11      	ldr	r3, [pc, #68]	; (28084 <spi_flash_enter_low_power_mode+0x68>)
   2803e:	0011      	movs	r1, r2
   28040:	0018      	movs	r0, r3
   28042:	4b0f      	ldr	r3, [pc, #60]	; (28080 <spi_flash_enter_low_power_mode+0x64>)
   28044:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   28046:	4b10      	ldr	r3, [pc, #64]	; (28088 <spi_flash_enter_low_power_mode+0x6c>)
   28048:	2101      	movs	r1, #1
   2804a:	0018      	movs	r0, r3
   2804c:	4b0c      	ldr	r3, [pc, #48]	; (28080 <spi_flash_enter_low_power_mode+0x64>)
   2804e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   28050:	4b0e      	ldr	r3, [pc, #56]	; (2808c <spi_flash_enter_low_power_mode+0x70>)
   28052:	2100      	movs	r1, #0
   28054:	0018      	movs	r0, r3
   28056:	4b0a      	ldr	r3, [pc, #40]	; (28080 <spi_flash_enter_low_power_mode+0x64>)
   28058:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   2805a:	4b0d      	ldr	r3, [pc, #52]	; (28090 <spi_flash_enter_low_power_mode+0x74>)
   2805c:	2181      	movs	r1, #129	; 0x81
   2805e:	0018      	movs	r0, r3
   28060:	4b07      	ldr	r3, [pc, #28]	; (28080 <spi_flash_enter_low_power_mode+0x64>)
   28062:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   28064:	46c0      	nop			; (mov r8, r8)
   28066:	4b0b      	ldr	r3, [pc, #44]	; (28094 <spi_flash_enter_low_power_mode+0x78>)
   28068:	0018      	movs	r0, r3
   2806a:	4b0b      	ldr	r3, [pc, #44]	; (28098 <spi_flash_enter_low_power_mode+0x7c>)
   2806c:	4798      	blx	r3
   2806e:	0003      	movs	r3, r0
   28070:	2b01      	cmp	r3, #1
   28072:	d1f8      	bne.n	28066 <spi_flash_enter_low_power_mode+0x4a>
}
   28074:	46c0      	nop			; (mov r8, r8)
   28076:	46bd      	mov	sp, r7
   28078:	b002      	add	sp, #8
   2807a:	bd80      	pop	{r7, pc}
   2807c:	00010208 	.word	0x00010208
   28080:	00024e7d 	.word	0x00024e7d
   28084:	0001020c 	.word	0x0001020c
   28088:	00010214 	.word	0x00010214
   2808c:	0001021c 	.word	0x0001021c
   28090:	00010204 	.word	0x00010204
   28094:	00010218 	.word	0x00010218
   28098:	00024e39 	.word	0x00024e39

0002809c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   2809c:	b580      	push	{r7, lr}
   2809e:	b082      	sub	sp, #8
   280a0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   280a2:	003b      	movs	r3, r7
   280a4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   280a6:	687b      	ldr	r3, [r7, #4]
   280a8:	22ab      	movs	r2, #171	; 0xab
   280aa:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   280ac:	4b13      	ldr	r3, [pc, #76]	; (280fc <spi_flash_leave_low_power_mode+0x60>)
   280ae:	2100      	movs	r1, #0
   280b0:	0018      	movs	r0, r3
   280b2:	4b13      	ldr	r3, [pc, #76]	; (28100 <spi_flash_leave_low_power_mode+0x64>)
   280b4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   280b6:	687b      	ldr	r3, [r7, #4]
   280b8:	781b      	ldrb	r3, [r3, #0]
   280ba:	001a      	movs	r2, r3
   280bc:	4b11      	ldr	r3, [pc, #68]	; (28104 <spi_flash_leave_low_power_mode+0x68>)
   280be:	0011      	movs	r1, r2
   280c0:	0018      	movs	r0, r3
   280c2:	4b0f      	ldr	r3, [pc, #60]	; (28100 <spi_flash_leave_low_power_mode+0x64>)
   280c4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   280c6:	4b10      	ldr	r3, [pc, #64]	; (28108 <spi_flash_leave_low_power_mode+0x6c>)
   280c8:	2101      	movs	r1, #1
   280ca:	0018      	movs	r0, r3
   280cc:	4b0c      	ldr	r3, [pc, #48]	; (28100 <spi_flash_leave_low_power_mode+0x64>)
   280ce:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   280d0:	4b0e      	ldr	r3, [pc, #56]	; (2810c <spi_flash_leave_low_power_mode+0x70>)
   280d2:	2100      	movs	r1, #0
   280d4:	0018      	movs	r0, r3
   280d6:	4b0a      	ldr	r3, [pc, #40]	; (28100 <spi_flash_leave_low_power_mode+0x64>)
   280d8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   280da:	4b0d      	ldr	r3, [pc, #52]	; (28110 <spi_flash_leave_low_power_mode+0x74>)
   280dc:	2181      	movs	r1, #129	; 0x81
   280de:	0018      	movs	r0, r3
   280e0:	4b07      	ldr	r3, [pc, #28]	; (28100 <spi_flash_leave_low_power_mode+0x64>)
   280e2:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   280e4:	46c0      	nop			; (mov r8, r8)
   280e6:	4b0b      	ldr	r3, [pc, #44]	; (28114 <spi_flash_leave_low_power_mode+0x78>)
   280e8:	0018      	movs	r0, r3
   280ea:	4b0b      	ldr	r3, [pc, #44]	; (28118 <spi_flash_leave_low_power_mode+0x7c>)
   280ec:	4798      	blx	r3
   280ee:	0003      	movs	r3, r0
   280f0:	2b01      	cmp	r3, #1
   280f2:	d1f8      	bne.n	280e6 <spi_flash_leave_low_power_mode+0x4a>
}
   280f4:	46c0      	nop			; (mov r8, r8)
   280f6:	46bd      	mov	sp, r7
   280f8:	b002      	add	sp, #8
   280fa:	bd80      	pop	{r7, pc}
   280fc:	00010208 	.word	0x00010208
   28100:	00024e7d 	.word	0x00024e7d
   28104:	0001020c 	.word	0x0001020c
   28108:	00010214 	.word	0x00010214
   2810c:	0001021c 	.word	0x0001021c
   28110:	00010204 	.word	0x00010204
   28114:	00010218 	.word	0x00010218
   28118:	00024e39 	.word	0x00024e39

0002811c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   2811c:	b590      	push	{r4, r7, lr}
   2811e:	b085      	sub	sp, #20
   28120:	af00      	add	r7, sp, #0
   28122:	0002      	movs	r2, r0
   28124:	1dfb      	adds	r3, r7, #7
   28126:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   28128:	230f      	movs	r3, #15
   2812a:	18fb      	adds	r3, r7, r3
   2812c:	2200      	movs	r2, #0
   2812e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   28130:	4b24      	ldr	r3, [pc, #144]	; (281c4 <spi_flash_enable+0xa8>)
   28132:	4798      	blx	r3
   28134:	0003      	movs	r3, r0
   28136:	051b      	lsls	r3, r3, #20
   28138:	0d1b      	lsrs	r3, r3, #20
   2813a:	4a23      	ldr	r2, [pc, #140]	; (281c8 <spi_flash_enable+0xac>)
   2813c:	4293      	cmp	r3, r2
   2813e:	d938      	bls.n	281b2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   28140:	230f      	movs	r3, #15
   28142:	18fc      	adds	r4, r7, r3
   28144:	2308      	movs	r3, #8
   28146:	18fb      	adds	r3, r7, r3
   28148:	4a20      	ldr	r2, [pc, #128]	; (281cc <spi_flash_enable+0xb0>)
   2814a:	0019      	movs	r1, r3
   2814c:	0010      	movs	r0, r2
   2814e:	4b20      	ldr	r3, [pc, #128]	; (281d0 <spi_flash_enable+0xb4>)
   28150:	4798      	blx	r3
   28152:	0003      	movs	r3, r0
   28154:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   28156:	230f      	movs	r3, #15
   28158:	18fb      	adds	r3, r7, r3
   2815a:	781b      	ldrb	r3, [r3, #0]
   2815c:	b25b      	sxtb	r3, r3
   2815e:	2b00      	cmp	r3, #0
   28160:	d126      	bne.n	281b0 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   28162:	68bb      	ldr	r3, [r7, #8]
   28164:	4a1b      	ldr	r2, [pc, #108]	; (281d4 <spi_flash_enable+0xb8>)
   28166:	4013      	ands	r3, r2
   28168:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   2816a:	68bb      	ldr	r3, [r7, #8]
   2816c:	4a1a      	ldr	r2, [pc, #104]	; (281d8 <spi_flash_enable+0xbc>)
   2816e:	4313      	orrs	r3, r2
   28170:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   28172:	68bb      	ldr	r3, [r7, #8]
   28174:	4a15      	ldr	r2, [pc, #84]	; (281cc <spi_flash_enable+0xb0>)
   28176:	0019      	movs	r1, r3
   28178:	0010      	movs	r0, r2
   2817a:	4b18      	ldr	r3, [pc, #96]	; (281dc <spi_flash_enable+0xc0>)
   2817c:	4798      	blx	r3
		if(enable) {
   2817e:	1dfb      	adds	r3, r7, #7
   28180:	781b      	ldrb	r3, [r3, #0]
   28182:	2b00      	cmp	r3, #0
   28184:	d002      	beq.n	2818c <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   28186:	4b16      	ldr	r3, [pc, #88]	; (281e0 <spi_flash_enable+0xc4>)
   28188:	4798      	blx	r3
   2818a:	e001      	b.n	28190 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   2818c:	4b15      	ldr	r3, [pc, #84]	; (281e4 <spi_flash_enable+0xc8>)
   2818e:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   28190:	68bb      	ldr	r3, [r7, #8]
   28192:	4a10      	ldr	r2, [pc, #64]	; (281d4 <spi_flash_enable+0xb8>)
   28194:	4013      	ands	r3, r2
   28196:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   28198:	68bb      	ldr	r3, [r7, #8]
   2819a:	2280      	movs	r2, #128	; 0x80
   2819c:	0252      	lsls	r2, r2, #9
   2819e:	4313      	orrs	r3, r2
   281a0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   281a2:	68bb      	ldr	r3, [r7, #8]
   281a4:	4a09      	ldr	r2, [pc, #36]	; (281cc <spi_flash_enable+0xb0>)
   281a6:	0019      	movs	r1, r3
   281a8:	0010      	movs	r0, r2
   281aa:	4b0c      	ldr	r3, [pc, #48]	; (281dc <spi_flash_enable+0xc0>)
   281ac:	4798      	blx	r3
   281ae:	e000      	b.n	281b2 <spi_flash_enable+0x96>
			goto ERR1;
   281b0:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   281b2:	230f      	movs	r3, #15
   281b4:	18fb      	adds	r3, r7, r3
   281b6:	781b      	ldrb	r3, [r3, #0]
   281b8:	b25b      	sxtb	r3, r3
}
   281ba:	0018      	movs	r0, r3
   281bc:	46bd      	mov	sp, r7
   281be:	b005      	add	sp, #20
   281c0:	bd90      	pop	{r4, r7, pc}
   281c2:	46c0      	nop			; (mov r8, r8)
   281c4:	00024759 	.word	0x00024759
   281c8:	0000039f 	.word	0x0000039f
   281cc:	00001410 	.word	0x00001410
   281d0:	00024e59 	.word	0x00024e59
   281d4:	f8888fff 	.word	0xf8888fff
   281d8:	01111000 	.word	0x01111000
   281dc:	00024e7d 	.word	0x00024e7d
   281e0:	0002809d 	.word	0x0002809d
   281e4:	0002801d 	.word	0x0002801d

000281e8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   281e8:	b580      	push	{r7, lr}
   281ea:	b084      	sub	sp, #16
   281ec:	af00      	add	r7, sp, #0
   281ee:	0002      	movs	r2, r0
   281f0:	1dfb      	adds	r3, r7, #7
   281f2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   281f4:	1dfb      	adds	r3, r7, #7
   281f6:	781b      	ldrb	r3, [r3, #0]
   281f8:	2b00      	cmp	r3, #0
   281fa:	d108      	bne.n	2820e <mem_test_unit_ready+0x26>
   281fc:	1dfb      	adds	r3, r7, #7
   281fe:	781a      	ldrb	r2, [r3, #0]
   28200:	4b08      	ldr	r3, [pc, #32]	; (28224 <mem_test_unit_ready+0x3c>)
   28202:	0152      	lsls	r2, r2, #5
   28204:	58d3      	ldr	r3, [r2, r3]
   28206:	4798      	blx	r3
   28208:	0003      	movs	r3, r0
   2820a:	001a      	movs	r2, r3
   2820c:	e000      	b.n	28210 <mem_test_unit_ready+0x28>
   2820e:	2201      	movs	r2, #1
  status =
   28210:	230f      	movs	r3, #15
   28212:	18fb      	adds	r3, r7, r3
   28214:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   28216:	230f      	movs	r3, #15
   28218:	18fb      	adds	r3, r7, r3
   2821a:	781b      	ldrb	r3, [r3, #0]
}
   2821c:	0018      	movs	r0, r3
   2821e:	46bd      	mov	sp, r7
   28220:	b004      	add	sp, #16
   28222:	bd80      	pop	{r7, pc}
   28224:	0003c568 	.word	0x0003c568

00028228 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   28228:	b580      	push	{r7, lr}
   2822a:	b084      	sub	sp, #16
   2822c:	af00      	add	r7, sp, #0
   2822e:	0002      	movs	r2, r0
   28230:	6039      	str	r1, [r7, #0]
   28232:	1dfb      	adds	r3, r7, #7
   28234:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   28236:	1dfb      	adds	r3, r7, #7
   28238:	781b      	ldrb	r3, [r3, #0]
   2823a:	2b00      	cmp	r3, #0
   2823c:	d10c      	bne.n	28258 <mem_read_capacity+0x30>
   2823e:	1dfb      	adds	r3, r7, #7
   28240:	781b      	ldrb	r3, [r3, #0]
   28242:	4a0b      	ldr	r2, [pc, #44]	; (28270 <mem_read_capacity+0x48>)
   28244:	015b      	lsls	r3, r3, #5
   28246:	18d3      	adds	r3, r2, r3
   28248:	3304      	adds	r3, #4
   2824a:	681b      	ldr	r3, [r3, #0]
   2824c:	683a      	ldr	r2, [r7, #0]
   2824e:	0010      	movs	r0, r2
   28250:	4798      	blx	r3
   28252:	0003      	movs	r3, r0
   28254:	001a      	movs	r2, r3
   28256:	e000      	b.n	2825a <mem_read_capacity+0x32>
   28258:	2201      	movs	r2, #1
  status =
   2825a:	230f      	movs	r3, #15
   2825c:	18fb      	adds	r3, r7, r3
   2825e:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   28260:	230f      	movs	r3, #15
   28262:	18fb      	adds	r3, r7, r3
   28264:	781b      	ldrb	r3, [r3, #0]
}
   28266:	0018      	movs	r0, r3
   28268:	46bd      	mov	sp, r7
   2826a:	b004      	add	sp, #16
   2826c:	bd80      	pop	{r7, pc}
   2826e:	46c0      	nop			; (mov r8, r8)
   28270:	0003c568 	.word	0x0003c568

00028274 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   28274:	b580      	push	{r7, lr}
   28276:	b084      	sub	sp, #16
   28278:	af00      	add	r7, sp, #0
   2827a:	0002      	movs	r2, r0
   2827c:	1dfb      	adds	r3, r7, #7
   2827e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   28280:	1dfb      	adds	r3, r7, #7
   28282:	781b      	ldrb	r3, [r3, #0]
   28284:	425a      	negs	r2, r3
   28286:	4153      	adcs	r3, r2
   28288:	b2da      	uxtb	r2, r3
  sector_size =
   2828a:	230f      	movs	r3, #15
   2828c:	18fb      	adds	r3, r7, r3
   2828e:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   28290:	230f      	movs	r3, #15
   28292:	18fb      	adds	r3, r7, r3
   28294:	781b      	ldrb	r3, [r3, #0]
}
   28296:	0018      	movs	r0, r3
   28298:	46bd      	mov	sp, r7
   2829a:	b004      	add	sp, #16
   2829c:	bd80      	pop	{r7, pc}
	...

000282a0 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   282a0:	b580      	push	{r7, lr}
   282a2:	b084      	sub	sp, #16
   282a4:	af00      	add	r7, sp, #0
   282a6:	0002      	movs	r2, r0
   282a8:	1dfb      	adds	r3, r7, #7
   282aa:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   282ac:	1dfb      	adds	r3, r7, #7
   282ae:	781b      	ldrb	r3, [r3, #0]
   282b0:	2b00      	cmp	r3, #0
   282b2:	d109      	bne.n	282c8 <mem_wr_protect+0x28>
   282b4:	1dfb      	adds	r3, r7, #7
   282b6:	781b      	ldrb	r3, [r3, #0]
   282b8:	4a0a      	ldr	r2, [pc, #40]	; (282e4 <mem_wr_protect+0x44>)
   282ba:	015b      	lsls	r3, r3, #5
   282bc:	18d3      	adds	r3, r2, r3
   282be:	330c      	adds	r3, #12
   282c0:	681b      	ldr	r3, [r3, #0]
   282c2:	4798      	blx	r3
   282c4:	1e03      	subs	r3, r0, #0
   282c6:	d001      	beq.n	282cc <mem_wr_protect+0x2c>
   282c8:	2201      	movs	r2, #1
   282ca:	e000      	b.n	282ce <mem_wr_protect+0x2e>
   282cc:	2200      	movs	r2, #0
  wr_protect =
   282ce:	230f      	movs	r3, #15
   282d0:	18fb      	adds	r3, r7, r3
   282d2:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   282d4:	230f      	movs	r3, #15
   282d6:	18fb      	adds	r3, r7, r3
   282d8:	781b      	ldrb	r3, [r3, #0]
}
   282da:	0018      	movs	r0, r3
   282dc:	46bd      	mov	sp, r7
   282de:	b004      	add	sp, #16
   282e0:	bd80      	pop	{r7, pc}
   282e2:	46c0      	nop			; (mov r8, r8)
   282e4:	0003c568 	.word	0x0003c568

000282e8 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   282e8:	b580      	push	{r7, lr}
   282ea:	b086      	sub	sp, #24
   282ec:	af00      	add	r7, sp, #0
   282ee:	60b9      	str	r1, [r7, #8]
   282f0:	607a      	str	r2, [r7, #4]
   282f2:	230f      	movs	r3, #15
   282f4:	18fb      	adds	r3, r7, r3
   282f6:	1c02      	adds	r2, r0, #0
   282f8:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   282fa:	230f      	movs	r3, #15
   282fc:	18fb      	adds	r3, r7, r3
   282fe:	781b      	ldrb	r3, [r3, #0]
   28300:	2b00      	cmp	r3, #0
   28302:	d10e      	bne.n	28322 <memory_2_ram+0x3a>
   28304:	230f      	movs	r3, #15
   28306:	18fb      	adds	r3, r7, r3
   28308:	781b      	ldrb	r3, [r3, #0]
   2830a:	4a0b      	ldr	r2, [pc, #44]	; (28338 <memory_2_ram+0x50>)
   2830c:	015b      	lsls	r3, r3, #5
   2830e:	18d3      	adds	r3, r2, r3
   28310:	3314      	adds	r3, #20
   28312:	681b      	ldr	r3, [r3, #0]
   28314:	6879      	ldr	r1, [r7, #4]
   28316:	68ba      	ldr	r2, [r7, #8]
   28318:	0010      	movs	r0, r2
   2831a:	4798      	blx	r3
   2831c:	0003      	movs	r3, r0
   2831e:	001a      	movs	r2, r3
   28320:	e000      	b.n	28324 <memory_2_ram+0x3c>
   28322:	2201      	movs	r2, #1
  status =
   28324:	2317      	movs	r3, #23
   28326:	18fb      	adds	r3, r7, r3
   28328:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   2832a:	2317      	movs	r3, #23
   2832c:	18fb      	adds	r3, r7, r3
   2832e:	781b      	ldrb	r3, [r3, #0]
}
   28330:	0018      	movs	r0, r3
   28332:	46bd      	mov	sp, r7
   28334:	b006      	add	sp, #24
   28336:	bd80      	pop	{r7, pc}
   28338:	0003c568 	.word	0x0003c568

0002833c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   2833c:	b580      	push	{r7, lr}
   2833e:	b086      	sub	sp, #24
   28340:	af00      	add	r7, sp, #0
   28342:	60b9      	str	r1, [r7, #8]
   28344:	607a      	str	r2, [r7, #4]
   28346:	230f      	movs	r3, #15
   28348:	18fb      	adds	r3, r7, r3
   2834a:	1c02      	adds	r2, r0, #0
   2834c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2834e:	230f      	movs	r3, #15
   28350:	18fb      	adds	r3, r7, r3
   28352:	781b      	ldrb	r3, [r3, #0]
   28354:	2b00      	cmp	r3, #0
   28356:	d10e      	bne.n	28376 <ram_2_memory+0x3a>
   28358:	230f      	movs	r3, #15
   2835a:	18fb      	adds	r3, r7, r3
   2835c:	781b      	ldrb	r3, [r3, #0]
   2835e:	4a0b      	ldr	r2, [pc, #44]	; (2838c <ram_2_memory+0x50>)
   28360:	015b      	lsls	r3, r3, #5
   28362:	18d3      	adds	r3, r2, r3
   28364:	3318      	adds	r3, #24
   28366:	681b      	ldr	r3, [r3, #0]
   28368:	6879      	ldr	r1, [r7, #4]
   2836a:	68ba      	ldr	r2, [r7, #8]
   2836c:	0010      	movs	r0, r2
   2836e:	4798      	blx	r3
   28370:	0003      	movs	r3, r0
   28372:	001a      	movs	r2, r3
   28374:	e000      	b.n	28378 <ram_2_memory+0x3c>
   28376:	2201      	movs	r2, #1
  status =
   28378:	2317      	movs	r3, #23
   2837a:	18fb      	adds	r3, r7, r3
   2837c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   2837e:	2317      	movs	r3, #23
   28380:	18fb      	adds	r3, r7, r3
   28382:	781b      	ldrb	r3, [r3, #0]
}
   28384:	0018      	movs	r0, r3
   28386:	46bd      	mov	sp, r7
   28388:	b006      	add	sp, #24
   2838a:	bd80      	pop	{r7, pc}
   2838c:	0003c568 	.word	0x0003c568

00028390 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   28390:	b580      	push	{r7, lr}
   28392:	b082      	sub	sp, #8
   28394:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   28396:	4b10      	ldr	r3, [pc, #64]	; (283d8 <cpu_irq_enter_critical+0x48>)
   28398:	681b      	ldr	r3, [r3, #0]
   2839a:	2b00      	cmp	r3, #0
   2839c:	d112      	bne.n	283c4 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2839e:	f3ef 8310 	mrs	r3, PRIMASK
   283a2:	607b      	str	r3, [r7, #4]
  return(result);
   283a4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   283a6:	2b00      	cmp	r3, #0
   283a8:	d109      	bne.n	283be <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   283aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   283ac:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   283b0:	4b0a      	ldr	r3, [pc, #40]	; (283dc <cpu_irq_enter_critical+0x4c>)
   283b2:	2200      	movs	r2, #0
   283b4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   283b6:	4b0a      	ldr	r3, [pc, #40]	; (283e0 <cpu_irq_enter_critical+0x50>)
   283b8:	2201      	movs	r2, #1
   283ba:	701a      	strb	r2, [r3, #0]
   283bc:	e002      	b.n	283c4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   283be:	4b08      	ldr	r3, [pc, #32]	; (283e0 <cpu_irq_enter_critical+0x50>)
   283c0:	2200      	movs	r2, #0
   283c2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   283c4:	4b04      	ldr	r3, [pc, #16]	; (283d8 <cpu_irq_enter_critical+0x48>)
   283c6:	681b      	ldr	r3, [r3, #0]
   283c8:	1c5a      	adds	r2, r3, #1
   283ca:	4b03      	ldr	r3, [pc, #12]	; (283d8 <cpu_irq_enter_critical+0x48>)
   283cc:	601a      	str	r2, [r3, #0]
}
   283ce:	46c0      	nop			; (mov r8, r8)
   283d0:	46bd      	mov	sp, r7
   283d2:	b002      	add	sp, #8
   283d4:	bd80      	pop	{r7, pc}
   283d6:	46c0      	nop			; (mov r8, r8)
   283d8:	20004118 	.word	0x20004118
   283dc:	20000122 	.word	0x20000122
   283e0:	2000411c 	.word	0x2000411c

000283e4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   283e4:	b580      	push	{r7, lr}
   283e6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   283e8:	4b0b      	ldr	r3, [pc, #44]	; (28418 <cpu_irq_leave_critical+0x34>)
   283ea:	681b      	ldr	r3, [r3, #0]
   283ec:	1e5a      	subs	r2, r3, #1
   283ee:	4b0a      	ldr	r3, [pc, #40]	; (28418 <cpu_irq_leave_critical+0x34>)
   283f0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   283f2:	4b09      	ldr	r3, [pc, #36]	; (28418 <cpu_irq_leave_critical+0x34>)
   283f4:	681b      	ldr	r3, [r3, #0]
   283f6:	2b00      	cmp	r3, #0
   283f8:	d10a      	bne.n	28410 <cpu_irq_leave_critical+0x2c>
   283fa:	4b08      	ldr	r3, [pc, #32]	; (2841c <cpu_irq_leave_critical+0x38>)
   283fc:	781b      	ldrb	r3, [r3, #0]
   283fe:	b2db      	uxtb	r3, r3
   28400:	2b00      	cmp	r3, #0
   28402:	d005      	beq.n	28410 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   28404:	4b06      	ldr	r3, [pc, #24]	; (28420 <cpu_irq_leave_critical+0x3c>)
   28406:	2201      	movs	r2, #1
   28408:	701a      	strb	r2, [r3, #0]
   2840a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2840e:	b662      	cpsie	i
	}
}
   28410:	46c0      	nop			; (mov r8, r8)
   28412:	46bd      	mov	sp, r7
   28414:	bd80      	pop	{r7, pc}
   28416:	46c0      	nop			; (mov r8, r8)
   28418:	20004118 	.word	0x20004118
   2841c:	2000411c 	.word	0x2000411c
   28420:	20000122 	.word	0x20000122

00028424 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   28424:	b580      	push	{r7, lr}
   28426:	b084      	sub	sp, #16
   28428:	af00      	add	r7, sp, #0
   2842a:	0002      	movs	r2, r0
   2842c:	1dfb      	adds	r3, r7, #7
   2842e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28430:	230f      	movs	r3, #15
   28432:	18fb      	adds	r3, r7, r3
   28434:	1dfa      	adds	r2, r7, #7
   28436:	7812      	ldrb	r2, [r2, #0]
   28438:	09d2      	lsrs	r2, r2, #7
   2843a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2843c:	230e      	movs	r3, #14
   2843e:	18fb      	adds	r3, r7, r3
   28440:	1dfa      	adds	r2, r7, #7
   28442:	7812      	ldrb	r2, [r2, #0]
   28444:	0952      	lsrs	r2, r2, #5
   28446:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28448:	4b0d      	ldr	r3, [pc, #52]	; (28480 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2844a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   2844c:	230f      	movs	r3, #15
   2844e:	18fb      	adds	r3, r7, r3
   28450:	781b      	ldrb	r3, [r3, #0]
   28452:	2b00      	cmp	r3, #0
   28454:	d10f      	bne.n	28476 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   28456:	230f      	movs	r3, #15
   28458:	18fb      	adds	r3, r7, r3
   2845a:	781b      	ldrb	r3, [r3, #0]
   2845c:	009b      	lsls	r3, r3, #2
   2845e:	2210      	movs	r2, #16
   28460:	4694      	mov	ip, r2
   28462:	44bc      	add	ip, r7
   28464:	4463      	add	r3, ip
   28466:	3b08      	subs	r3, #8
   28468:	681a      	ldr	r2, [r3, #0]
   2846a:	230e      	movs	r3, #14
   2846c:	18fb      	adds	r3, r7, r3
   2846e:	781b      	ldrb	r3, [r3, #0]
   28470:	01db      	lsls	r3, r3, #7
   28472:	18d3      	adds	r3, r2, r3
   28474:	e000      	b.n	28478 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   28476:	2300      	movs	r3, #0
	}
}
   28478:	0018      	movs	r0, r3
   2847a:	46bd      	mov	sp, r7
   2847c:	b004      	add	sp, #16
   2847e:	bd80      	pop	{r7, pc}
   28480:	41004400 	.word	0x41004400

00028484 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   28484:	b580      	push	{r7, lr}
   28486:	b082      	sub	sp, #8
   28488:	af00      	add	r7, sp, #0
   2848a:	0002      	movs	r2, r0
   2848c:	1dfb      	adds	r3, r7, #7
   2848e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28490:	1dfb      	adds	r3, r7, #7
   28492:	781b      	ldrb	r3, [r3, #0]
   28494:	0018      	movs	r0, r3
   28496:	4b03      	ldr	r3, [pc, #12]	; (284a4 <port_get_group_from_gpio_pin+0x20>)
   28498:	4798      	blx	r3
   2849a:	0003      	movs	r3, r0
}
   2849c:	0018      	movs	r0, r3
   2849e:	46bd      	mov	sp, r7
   284a0:	b002      	add	sp, #8
   284a2:	bd80      	pop	{r7, pc}
   284a4:	00028425 	.word	0x00028425

000284a8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   284a8:	b580      	push	{r7, lr}
   284aa:	b082      	sub	sp, #8
   284ac:	af00      	add	r7, sp, #0
   284ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   284b0:	687b      	ldr	r3, [r7, #4]
   284b2:	2200      	movs	r2, #0
   284b4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   284b6:	687b      	ldr	r3, [r7, #4]
   284b8:	2201      	movs	r2, #1
   284ba:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   284bc:	687b      	ldr	r3, [r7, #4]
   284be:	2200      	movs	r2, #0
   284c0:	709a      	strb	r2, [r3, #2]
}
   284c2:	46c0      	nop			; (mov r8, r8)
   284c4:	46bd      	mov	sp, r7
   284c6:	b002      	add	sp, #8
   284c8:	bd80      	pop	{r7, pc}
	...

000284cc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   284cc:	b580      	push	{r7, lr}
   284ce:	b084      	sub	sp, #16
   284d0:	af00      	add	r7, sp, #0
   284d2:	0002      	movs	r2, r0
   284d4:	1dfb      	adds	r3, r7, #7
   284d6:	701a      	strb	r2, [r3, #0]
   284d8:	1dbb      	adds	r3, r7, #6
   284da:	1c0a      	adds	r2, r1, #0
   284dc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   284de:	1dfb      	adds	r3, r7, #7
   284e0:	781b      	ldrb	r3, [r3, #0]
   284e2:	0018      	movs	r0, r3
   284e4:	4b0d      	ldr	r3, [pc, #52]	; (2851c <port_pin_set_output_level+0x50>)
   284e6:	4798      	blx	r3
   284e8:	0003      	movs	r3, r0
   284ea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   284ec:	1dfb      	adds	r3, r7, #7
   284ee:	781b      	ldrb	r3, [r3, #0]
   284f0:	221f      	movs	r2, #31
   284f2:	4013      	ands	r3, r2
   284f4:	2201      	movs	r2, #1
   284f6:	409a      	lsls	r2, r3
   284f8:	0013      	movs	r3, r2
   284fa:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   284fc:	1dbb      	adds	r3, r7, #6
   284fe:	781b      	ldrb	r3, [r3, #0]
   28500:	2b00      	cmp	r3, #0
   28502:	d003      	beq.n	2850c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28504:	68fb      	ldr	r3, [r7, #12]
   28506:	68ba      	ldr	r2, [r7, #8]
   28508:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   2850a:	e002      	b.n	28512 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2850c:	68fb      	ldr	r3, [r7, #12]
   2850e:	68ba      	ldr	r2, [r7, #8]
   28510:	615a      	str	r2, [r3, #20]
}
   28512:	46c0      	nop			; (mov r8, r8)
   28514:	46bd      	mov	sp, r7
   28516:	b004      	add	sp, #16
   28518:	bd80      	pop	{r7, pc}
   2851a:	46c0      	nop			; (mov r8, r8)
   2851c:	00028485 	.word	0x00028485

00028520 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   28520:	b580      	push	{r7, lr}
   28522:	b082      	sub	sp, #8
   28524:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   28526:	1d3b      	adds	r3, r7, #4
   28528:	0018      	movs	r0, r3
   2852a:	4b0e      	ldr	r3, [pc, #56]	; (28564 <system_board_init+0x44>)
   2852c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2852e:	1d3b      	adds	r3, r7, #4
   28530:	2201      	movs	r2, #1
   28532:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   28534:	1d3b      	adds	r3, r7, #4
   28536:	0019      	movs	r1, r3
   28538:	2017      	movs	r0, #23
   2853a:	4b0b      	ldr	r3, [pc, #44]	; (28568 <system_board_init+0x48>)
   2853c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   2853e:	2101      	movs	r1, #1
   28540:	2017      	movs	r0, #23
   28542:	4b0a      	ldr	r3, [pc, #40]	; (2856c <system_board_init+0x4c>)
   28544:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   28546:	1d3b      	adds	r3, r7, #4
   28548:	2200      	movs	r2, #0
   2854a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   2854c:	1d3b      	adds	r3, r7, #4
   2854e:	2201      	movs	r2, #1
   28550:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   28552:	1d3b      	adds	r3, r7, #4
   28554:	0019      	movs	r1, r3
   28556:	2037      	movs	r0, #55	; 0x37
   28558:	4b03      	ldr	r3, [pc, #12]	; (28568 <system_board_init+0x48>)
   2855a:	4798      	blx	r3
}
   2855c:	46c0      	nop			; (mov r8, r8)
   2855e:	46bd      	mov	sp, r7
   28560:	b002      	add	sp, #8
   28562:	bd80      	pop	{r7, pc}
   28564:	000284a9 	.word	0x000284a9
   28568:	00028b95 	.word	0x00028b95
   2856c:	000284cd 	.word	0x000284cd

00028570 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   28570:	b580      	push	{r7, lr}
   28572:	b084      	sub	sp, #16
   28574:	af00      	add	r7, sp, #0
   28576:	0002      	movs	r2, r0
   28578:	1dfb      	adds	r3, r7, #7
   2857a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2857c:	230f      	movs	r3, #15
   2857e:	18fb      	adds	r3, r7, r3
   28580:	1dfa      	adds	r2, r7, #7
   28582:	7812      	ldrb	r2, [r2, #0]
   28584:	0952      	lsrs	r2, r2, #5
   28586:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   28588:	230f      	movs	r3, #15
   2858a:	18fb      	adds	r3, r7, r3
   2858c:	781b      	ldrb	r3, [r3, #0]
   2858e:	2b00      	cmp	r3, #0
   28590:	d10c      	bne.n	285ac <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28592:	4b09      	ldr	r3, [pc, #36]	; (285b8 <_extint_get_eic_from_channel+0x48>)
   28594:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   28596:	230f      	movs	r3, #15
   28598:	18fb      	adds	r3, r7, r3
   2859a:	781b      	ldrb	r3, [r3, #0]
   2859c:	009b      	lsls	r3, r3, #2
   2859e:	2210      	movs	r2, #16
   285a0:	4694      	mov	ip, r2
   285a2:	44bc      	add	ip, r7
   285a4:	4463      	add	r3, ip
   285a6:	3b08      	subs	r3, #8
   285a8:	681b      	ldr	r3, [r3, #0]
   285aa:	e000      	b.n	285ae <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   285ac:	2300      	movs	r3, #0
	}
}
   285ae:	0018      	movs	r0, r3
   285b0:	46bd      	mov	sp, r7
   285b2:	b004      	add	sp, #16
   285b4:	bd80      	pop	{r7, pc}
   285b6:	46c0      	nop			; (mov r8, r8)
   285b8:	40001800 	.word	0x40001800

000285bc <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   285bc:	b580      	push	{r7, lr}
   285be:	b084      	sub	sp, #16
   285c0:	af00      	add	r7, sp, #0
   285c2:	0002      	movs	r2, r0
   285c4:	1dfb      	adds	r3, r7, #7
   285c6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   285c8:	1dfb      	adds	r3, r7, #7
   285ca:	781b      	ldrb	r3, [r3, #0]
   285cc:	0018      	movs	r0, r3
   285ce:	4b0b      	ldr	r3, [pc, #44]	; (285fc <extint_chan_is_detected+0x40>)
   285d0:	4798      	blx	r3
   285d2:	0003      	movs	r3, r0
   285d4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   285d6:	1dfb      	adds	r3, r7, #7
   285d8:	781b      	ldrb	r3, [r3, #0]
   285da:	221f      	movs	r2, #31
   285dc:	4013      	ands	r3, r2
   285de:	2201      	movs	r2, #1
   285e0:	409a      	lsls	r2, r3
   285e2:	0013      	movs	r3, r2
   285e4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   285e6:	68fb      	ldr	r3, [r7, #12]
   285e8:	691b      	ldr	r3, [r3, #16]
   285ea:	68ba      	ldr	r2, [r7, #8]
   285ec:	4013      	ands	r3, r2
   285ee:	1e5a      	subs	r2, r3, #1
   285f0:	4193      	sbcs	r3, r2
   285f2:	b2db      	uxtb	r3, r3
}
   285f4:	0018      	movs	r0, r3
   285f6:	46bd      	mov	sp, r7
   285f8:	b004      	add	sp, #16
   285fa:	bd80      	pop	{r7, pc}
   285fc:	00028571 	.word	0x00028571

00028600 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   28600:	b580      	push	{r7, lr}
   28602:	b084      	sub	sp, #16
   28604:	af00      	add	r7, sp, #0
   28606:	0002      	movs	r2, r0
   28608:	1dfb      	adds	r3, r7, #7
   2860a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2860c:	1dfb      	adds	r3, r7, #7
   2860e:	781b      	ldrb	r3, [r3, #0]
   28610:	0018      	movs	r0, r3
   28612:	4b09      	ldr	r3, [pc, #36]	; (28638 <extint_chan_clear_detected+0x38>)
   28614:	4798      	blx	r3
   28616:	0003      	movs	r3, r0
   28618:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2861a:	1dfb      	adds	r3, r7, #7
   2861c:	781b      	ldrb	r3, [r3, #0]
   2861e:	221f      	movs	r2, #31
   28620:	4013      	ands	r3, r2
   28622:	2201      	movs	r2, #1
   28624:	409a      	lsls	r2, r3
   28626:	0013      	movs	r3, r2
   28628:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   2862a:	68fb      	ldr	r3, [r7, #12]
   2862c:	68ba      	ldr	r2, [r7, #8]
   2862e:	611a      	str	r2, [r3, #16]
}
   28630:	46c0      	nop			; (mov r8, r8)
   28632:	46bd      	mov	sp, r7
   28634:	b004      	add	sp, #16
   28636:	bd80      	pop	{r7, pc}
   28638:	00028571 	.word	0x00028571

0002863c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2863c:	b580      	push	{r7, lr}
   2863e:	b082      	sub	sp, #8
   28640:	af00      	add	r7, sp, #0
   28642:	6078      	str	r0, [r7, #4]
   28644:	0008      	movs	r0, r1
   28646:	0011      	movs	r1, r2
   28648:	1cfb      	adds	r3, r7, #3
   2864a:	1c02      	adds	r2, r0, #0
   2864c:	701a      	strb	r2, [r3, #0]
   2864e:	1cbb      	adds	r3, r7, #2
   28650:	1c0a      	adds	r2, r1, #0
   28652:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   28654:	1cbb      	adds	r3, r7, #2
   28656:	781b      	ldrb	r3, [r3, #0]
   28658:	2b00      	cmp	r3, #0
   2865a:	d001      	beq.n	28660 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2865c:	2317      	movs	r3, #23
   2865e:	e019      	b.n	28694 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   28660:	1cfb      	adds	r3, r7, #3
   28662:	781a      	ldrb	r2, [r3, #0]
   28664:	4b0d      	ldr	r3, [pc, #52]	; (2869c <extint_register_callback+0x60>)
   28666:	0092      	lsls	r2, r2, #2
   28668:	58d3      	ldr	r3, [r2, r3]
   2866a:	2b00      	cmp	r3, #0
   2866c:	d107      	bne.n	2867e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2866e:	1cfb      	adds	r3, r7, #3
   28670:	781a      	ldrb	r2, [r3, #0]
   28672:	4b0a      	ldr	r3, [pc, #40]	; (2869c <extint_register_callback+0x60>)
   28674:	0092      	lsls	r2, r2, #2
   28676:	6879      	ldr	r1, [r7, #4]
   28678:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2867a:	2300      	movs	r3, #0
   2867c:	e00a      	b.n	28694 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2867e:	1cfb      	adds	r3, r7, #3
   28680:	781a      	ldrb	r2, [r3, #0]
   28682:	4b06      	ldr	r3, [pc, #24]	; (2869c <extint_register_callback+0x60>)
   28684:	0092      	lsls	r2, r2, #2
   28686:	58d2      	ldr	r2, [r2, r3]
   28688:	687b      	ldr	r3, [r7, #4]
   2868a:	429a      	cmp	r2, r3
   2868c:	d101      	bne.n	28692 <extint_register_callback+0x56>
		return STATUS_OK;
   2868e:	2300      	movs	r3, #0
   28690:	e000      	b.n	28694 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   28692:	231d      	movs	r3, #29
}
   28694:	0018      	movs	r0, r3
   28696:	46bd      	mov	sp, r7
   28698:	b002      	add	sp, #8
   2869a:	bd80      	pop	{r7, pc}
   2869c:	20005a20 	.word	0x20005a20

000286a0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   286a0:	b580      	push	{r7, lr}
   286a2:	b084      	sub	sp, #16
   286a4:	af00      	add	r7, sp, #0
   286a6:	0002      	movs	r2, r0
   286a8:	1dfb      	adds	r3, r7, #7
   286aa:	701a      	strb	r2, [r3, #0]
   286ac:	1dbb      	adds	r3, r7, #6
   286ae:	1c0a      	adds	r2, r1, #0
   286b0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   286b2:	1dbb      	adds	r3, r7, #6
   286b4:	781b      	ldrb	r3, [r3, #0]
   286b6:	2b00      	cmp	r3, #0
   286b8:	d10e      	bne.n	286d8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   286ba:	1dfb      	adds	r3, r7, #7
   286bc:	781b      	ldrb	r3, [r3, #0]
   286be:	0018      	movs	r0, r3
   286c0:	4b08      	ldr	r3, [pc, #32]	; (286e4 <extint_chan_enable_callback+0x44>)
   286c2:	4798      	blx	r3
   286c4:	0003      	movs	r3, r0
   286c6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   286c8:	1dfb      	adds	r3, r7, #7
   286ca:	781b      	ldrb	r3, [r3, #0]
   286cc:	2201      	movs	r2, #1
   286ce:	409a      	lsls	r2, r3
   286d0:	68fb      	ldr	r3, [r7, #12]
   286d2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   286d4:	2300      	movs	r3, #0
   286d6:	e000      	b.n	286da <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   286d8:	2317      	movs	r3, #23
}
   286da:	0018      	movs	r0, r3
   286dc:	46bd      	mov	sp, r7
   286de:	b004      	add	sp, #16
   286e0:	bd80      	pop	{r7, pc}
   286e2:	46c0      	nop			; (mov r8, r8)
   286e4:	00028571 	.word	0x00028571

000286e8 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   286e8:	b580      	push	{r7, lr}
   286ea:	b084      	sub	sp, #16
   286ec:	af00      	add	r7, sp, #0
   286ee:	0002      	movs	r2, r0
   286f0:	1dfb      	adds	r3, r7, #7
   286f2:	701a      	strb	r2, [r3, #0]
   286f4:	1dbb      	adds	r3, r7, #6
   286f6:	1c0a      	adds	r2, r1, #0
   286f8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   286fa:	1dbb      	adds	r3, r7, #6
   286fc:	781b      	ldrb	r3, [r3, #0]
   286fe:	2b00      	cmp	r3, #0
   28700:	d10e      	bne.n	28720 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   28702:	1dfb      	adds	r3, r7, #7
   28704:	781b      	ldrb	r3, [r3, #0]
   28706:	0018      	movs	r0, r3
   28708:	4b08      	ldr	r3, [pc, #32]	; (2872c <extint_chan_disable_callback+0x44>)
   2870a:	4798      	blx	r3
   2870c:	0003      	movs	r3, r0
   2870e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   28710:	1dfb      	adds	r3, r7, #7
   28712:	781b      	ldrb	r3, [r3, #0]
   28714:	2201      	movs	r2, #1
   28716:	409a      	lsls	r2, r3
   28718:	68fb      	ldr	r3, [r7, #12]
   2871a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2871c:	2300      	movs	r3, #0
   2871e:	e000      	b.n	28722 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   28720:	2317      	movs	r3, #23
}
   28722:	0018      	movs	r0, r3
   28724:	46bd      	mov	sp, r7
   28726:	b004      	add	sp, #16
   28728:	bd80      	pop	{r7, pc}
   2872a:	46c0      	nop			; (mov r8, r8)
   2872c:	00028571 	.word	0x00028571

00028730 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   28730:	b580      	push	{r7, lr}
   28732:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   28734:	4b15      	ldr	r3, [pc, #84]	; (2878c <EIC_Handler+0x5c>)
   28736:	2200      	movs	r2, #0
   28738:	701a      	strb	r2, [r3, #0]
   2873a:	e020      	b.n	2877e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   2873c:	4b13      	ldr	r3, [pc, #76]	; (2878c <EIC_Handler+0x5c>)
   2873e:	781b      	ldrb	r3, [r3, #0]
   28740:	0018      	movs	r0, r3
   28742:	4b13      	ldr	r3, [pc, #76]	; (28790 <EIC_Handler+0x60>)
   28744:	4798      	blx	r3
   28746:	1e03      	subs	r3, r0, #0
   28748:	d013      	beq.n	28772 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   2874a:	4b10      	ldr	r3, [pc, #64]	; (2878c <EIC_Handler+0x5c>)
   2874c:	781b      	ldrb	r3, [r3, #0]
   2874e:	0018      	movs	r0, r3
   28750:	4b10      	ldr	r3, [pc, #64]	; (28794 <EIC_Handler+0x64>)
   28752:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   28754:	4b0d      	ldr	r3, [pc, #52]	; (2878c <EIC_Handler+0x5c>)
   28756:	781b      	ldrb	r3, [r3, #0]
   28758:	001a      	movs	r2, r3
   2875a:	4b0f      	ldr	r3, [pc, #60]	; (28798 <EIC_Handler+0x68>)
   2875c:	0092      	lsls	r2, r2, #2
   2875e:	58d3      	ldr	r3, [r2, r3]
   28760:	2b00      	cmp	r3, #0
   28762:	d006      	beq.n	28772 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   28764:	4b09      	ldr	r3, [pc, #36]	; (2878c <EIC_Handler+0x5c>)
   28766:	781b      	ldrb	r3, [r3, #0]
   28768:	001a      	movs	r2, r3
   2876a:	4b0b      	ldr	r3, [pc, #44]	; (28798 <EIC_Handler+0x68>)
   2876c:	0092      	lsls	r2, r2, #2
   2876e:	58d3      	ldr	r3, [r2, r3]
   28770:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   28772:	4b06      	ldr	r3, [pc, #24]	; (2878c <EIC_Handler+0x5c>)
   28774:	781b      	ldrb	r3, [r3, #0]
   28776:	3301      	adds	r3, #1
   28778:	b2da      	uxtb	r2, r3
   2877a:	4b04      	ldr	r3, [pc, #16]	; (2878c <EIC_Handler+0x5c>)
   2877c:	701a      	strb	r2, [r3, #0]
   2877e:	4b03      	ldr	r3, [pc, #12]	; (2878c <EIC_Handler+0x5c>)
   28780:	781b      	ldrb	r3, [r3, #0]
   28782:	2b0f      	cmp	r3, #15
   28784:	d9da      	bls.n	2873c <EIC_Handler+0xc>
			}
		}
	}
}
   28786:	46c0      	nop			; (mov r8, r8)
   28788:	46bd      	mov	sp, r7
   2878a:	bd80      	pop	{r7, pc}
   2878c:	20005a1c 	.word	0x20005a1c
   28790:	000285bd 	.word	0x000285bd
   28794:	00028601 	.word	0x00028601
   28798:	20005a20 	.word	0x20005a20

0002879c <system_gclk_chan_get_config_defaults>:
{
   2879c:	b580      	push	{r7, lr}
   2879e:	b082      	sub	sp, #8
   287a0:	af00      	add	r7, sp, #0
   287a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   287a4:	687b      	ldr	r3, [r7, #4]
   287a6:	2200      	movs	r2, #0
   287a8:	701a      	strb	r2, [r3, #0]
}
   287aa:	46c0      	nop			; (mov r8, r8)
   287ac:	46bd      	mov	sp, r7
   287ae:	b002      	add	sp, #8
   287b0:	bd80      	pop	{r7, pc}
	...

000287b4 <system_apb_clock_set_mask>:
{
   287b4:	b580      	push	{r7, lr}
   287b6:	b082      	sub	sp, #8
   287b8:	af00      	add	r7, sp, #0
   287ba:	0002      	movs	r2, r0
   287bc:	6039      	str	r1, [r7, #0]
   287be:	1dfb      	adds	r3, r7, #7
   287c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   287c2:	1dfb      	adds	r3, r7, #7
   287c4:	781b      	ldrb	r3, [r3, #0]
   287c6:	2b01      	cmp	r3, #1
   287c8:	d00a      	beq.n	287e0 <system_apb_clock_set_mask+0x2c>
   287ca:	2b02      	cmp	r3, #2
   287cc:	d00f      	beq.n	287ee <system_apb_clock_set_mask+0x3a>
   287ce:	2b00      	cmp	r3, #0
   287d0:	d114      	bne.n	287fc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   287d2:	4b0e      	ldr	r3, [pc, #56]	; (2880c <system_apb_clock_set_mask+0x58>)
   287d4:	4a0d      	ldr	r2, [pc, #52]	; (2880c <system_apb_clock_set_mask+0x58>)
   287d6:	6991      	ldr	r1, [r2, #24]
   287d8:	683a      	ldr	r2, [r7, #0]
   287da:	430a      	orrs	r2, r1
   287dc:	619a      	str	r2, [r3, #24]
			break;
   287de:	e00f      	b.n	28800 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   287e0:	4b0a      	ldr	r3, [pc, #40]	; (2880c <system_apb_clock_set_mask+0x58>)
   287e2:	4a0a      	ldr	r2, [pc, #40]	; (2880c <system_apb_clock_set_mask+0x58>)
   287e4:	69d1      	ldr	r1, [r2, #28]
   287e6:	683a      	ldr	r2, [r7, #0]
   287e8:	430a      	orrs	r2, r1
   287ea:	61da      	str	r2, [r3, #28]
			break;
   287ec:	e008      	b.n	28800 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   287ee:	4b07      	ldr	r3, [pc, #28]	; (2880c <system_apb_clock_set_mask+0x58>)
   287f0:	4a06      	ldr	r2, [pc, #24]	; (2880c <system_apb_clock_set_mask+0x58>)
   287f2:	6a11      	ldr	r1, [r2, #32]
   287f4:	683a      	ldr	r2, [r7, #0]
   287f6:	430a      	orrs	r2, r1
   287f8:	621a      	str	r2, [r3, #32]
			break;
   287fa:	e001      	b.n	28800 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   287fc:	2317      	movs	r3, #23
   287fe:	e000      	b.n	28802 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28800:	2300      	movs	r3, #0
}
   28802:	0018      	movs	r0, r3
   28804:	46bd      	mov	sp, r7
   28806:	b002      	add	sp, #8
   28808:	bd80      	pop	{r7, pc}
   2880a:	46c0      	nop			; (mov r8, r8)
   2880c:	40000400 	.word	0x40000400

00028810 <system_pinmux_get_config_defaults>:
{
   28810:	b580      	push	{r7, lr}
   28812:	b082      	sub	sp, #8
   28814:	af00      	add	r7, sp, #0
   28816:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28818:	687b      	ldr	r3, [r7, #4]
   2881a:	2280      	movs	r2, #128	; 0x80
   2881c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2881e:	687b      	ldr	r3, [r7, #4]
   28820:	2200      	movs	r2, #0
   28822:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28824:	687b      	ldr	r3, [r7, #4]
   28826:	2201      	movs	r2, #1
   28828:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2882a:	687b      	ldr	r3, [r7, #4]
   2882c:	2200      	movs	r2, #0
   2882e:	70da      	strb	r2, [r3, #3]
}
   28830:	46c0      	nop			; (mov r8, r8)
   28832:	46bd      	mov	sp, r7
   28834:	b002      	add	sp, #8
   28836:	bd80      	pop	{r7, pc}

00028838 <system_interrupt_enable>:
{
   28838:	b580      	push	{r7, lr}
   2883a:	b082      	sub	sp, #8
   2883c:	af00      	add	r7, sp, #0
   2883e:	0002      	movs	r2, r0
   28840:	1dfb      	adds	r3, r7, #7
   28842:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28844:	4b06      	ldr	r3, [pc, #24]	; (28860 <system_interrupt_enable+0x28>)
   28846:	1dfa      	adds	r2, r7, #7
   28848:	7812      	ldrb	r2, [r2, #0]
   2884a:	0011      	movs	r1, r2
   2884c:	221f      	movs	r2, #31
   2884e:	400a      	ands	r2, r1
   28850:	2101      	movs	r1, #1
   28852:	4091      	lsls	r1, r2
   28854:	000a      	movs	r2, r1
   28856:	601a      	str	r2, [r3, #0]
}
   28858:	46c0      	nop			; (mov r8, r8)
   2885a:	46bd      	mov	sp, r7
   2885c:	b002      	add	sp, #8
   2885e:	bd80      	pop	{r7, pc}
   28860:	e000e100 	.word	0xe000e100

00028864 <_extint_get_eic_from_channel>:
{
   28864:	b580      	push	{r7, lr}
   28866:	b084      	sub	sp, #16
   28868:	af00      	add	r7, sp, #0
   2886a:	0002      	movs	r2, r0
   2886c:	1dfb      	adds	r3, r7, #7
   2886e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   28870:	230f      	movs	r3, #15
   28872:	18fb      	adds	r3, r7, r3
   28874:	1dfa      	adds	r2, r7, #7
   28876:	7812      	ldrb	r2, [r2, #0]
   28878:	0952      	lsrs	r2, r2, #5
   2887a:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   2887c:	230f      	movs	r3, #15
   2887e:	18fb      	adds	r3, r7, r3
   28880:	781b      	ldrb	r3, [r3, #0]
   28882:	2b00      	cmp	r3, #0
   28884:	d10c      	bne.n	288a0 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28886:	4b09      	ldr	r3, [pc, #36]	; (288ac <_extint_get_eic_from_channel+0x48>)
   28888:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   2888a:	230f      	movs	r3, #15
   2888c:	18fb      	adds	r3, r7, r3
   2888e:	781b      	ldrb	r3, [r3, #0]
   28890:	009b      	lsls	r3, r3, #2
   28892:	2210      	movs	r2, #16
   28894:	4694      	mov	ip, r2
   28896:	44bc      	add	ip, r7
   28898:	4463      	add	r3, ip
   2889a:	3b08      	subs	r3, #8
   2889c:	681b      	ldr	r3, [r3, #0]
   2889e:	e000      	b.n	288a2 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   288a0:	2300      	movs	r3, #0
}
   288a2:	0018      	movs	r0, r3
   288a4:	46bd      	mov	sp, r7
   288a6:	b004      	add	sp, #16
   288a8:	bd80      	pop	{r7, pc}
   288aa:	46c0      	nop			; (mov r8, r8)
   288ac:	40001800 	.word	0x40001800

000288b0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   288b0:	b580      	push	{r7, lr}
   288b2:	b082      	sub	sp, #8
   288b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   288b6:	4b0f      	ldr	r3, [pc, #60]	; (288f4 <extint_is_syncing+0x44>)
   288b8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   288ba:	2300      	movs	r3, #0
   288bc:	607b      	str	r3, [r7, #4]
   288be:	e011      	b.n	288e4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   288c0:	687b      	ldr	r3, [r7, #4]
   288c2:	009b      	lsls	r3, r3, #2
   288c4:	2208      	movs	r2, #8
   288c6:	4694      	mov	ip, r2
   288c8:	44bc      	add	ip, r7
   288ca:	4463      	add	r3, ip
   288cc:	3b08      	subs	r3, #8
   288ce:	681b      	ldr	r3, [r3, #0]
   288d0:	785b      	ldrb	r3, [r3, #1]
   288d2:	b2db      	uxtb	r3, r3
   288d4:	b25b      	sxtb	r3, r3
   288d6:	2b00      	cmp	r3, #0
   288d8:	da01      	bge.n	288de <extint_is_syncing+0x2e>
			return true;
   288da:	2301      	movs	r3, #1
   288dc:	e006      	b.n	288ec <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   288de:	687b      	ldr	r3, [r7, #4]
   288e0:	3301      	adds	r3, #1
   288e2:	607b      	str	r3, [r7, #4]
   288e4:	687b      	ldr	r3, [r7, #4]
   288e6:	2b00      	cmp	r3, #0
   288e8:	d0ea      	beq.n	288c0 <extint_is_syncing+0x10>
		}
	}
	return false;
   288ea:	2300      	movs	r3, #0
}
   288ec:	0018      	movs	r0, r3
   288ee:	46bd      	mov	sp, r7
   288f0:	b002      	add	sp, #8
   288f2:	bd80      	pop	{r7, pc}
   288f4:	40001800 	.word	0x40001800

000288f8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   288f8:	b580      	push	{r7, lr}
   288fa:	b084      	sub	sp, #16
   288fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   288fe:	4b2d      	ldr	r3, [pc, #180]	; (289b4 <_system_extint_init+0xbc>)
   28900:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   28902:	2140      	movs	r1, #64	; 0x40
   28904:	2000      	movs	r0, #0
   28906:	4b2c      	ldr	r3, [pc, #176]	; (289b8 <_system_extint_init+0xc0>)
   28908:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2890a:	003b      	movs	r3, r7
   2890c:	0018      	movs	r0, r3
   2890e:	4b2b      	ldr	r3, [pc, #172]	; (289bc <_system_extint_init+0xc4>)
   28910:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   28912:	003b      	movs	r3, r7
   28914:	2200      	movs	r2, #0
   28916:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   28918:	003b      	movs	r3, r7
   2891a:	0019      	movs	r1, r3
   2891c:	2005      	movs	r0, #5
   2891e:	4b28      	ldr	r3, [pc, #160]	; (289c0 <_system_extint_init+0xc8>)
   28920:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   28922:	2005      	movs	r0, #5
   28924:	4b27      	ldr	r3, [pc, #156]	; (289c4 <_system_extint_init+0xcc>)
   28926:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28928:	2300      	movs	r3, #0
   2892a:	60fb      	str	r3, [r7, #12]
   2892c:	e018      	b.n	28960 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   2892e:	68fb      	ldr	r3, [r7, #12]
   28930:	009b      	lsls	r3, r3, #2
   28932:	2210      	movs	r2, #16
   28934:	4694      	mov	ip, r2
   28936:	44bc      	add	ip, r7
   28938:	4463      	add	r3, ip
   2893a:	3b0c      	subs	r3, #12
   2893c:	681a      	ldr	r2, [r3, #0]
   2893e:	68fb      	ldr	r3, [r7, #12]
   28940:	009b      	lsls	r3, r3, #2
   28942:	2110      	movs	r1, #16
   28944:	468c      	mov	ip, r1
   28946:	44bc      	add	ip, r7
   28948:	4463      	add	r3, ip
   2894a:	3b0c      	subs	r3, #12
   2894c:	681b      	ldr	r3, [r3, #0]
   2894e:	781b      	ldrb	r3, [r3, #0]
   28950:	b2db      	uxtb	r3, r3
   28952:	2101      	movs	r1, #1
   28954:	430b      	orrs	r3, r1
   28956:	b2db      	uxtb	r3, r3
   28958:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2895a:	68fb      	ldr	r3, [r7, #12]
   2895c:	3301      	adds	r3, #1
   2895e:	60fb      	str	r3, [r7, #12]
   28960:	68fb      	ldr	r3, [r7, #12]
   28962:	2b00      	cmp	r3, #0
   28964:	d0e3      	beq.n	2892e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   28966:	46c0      	nop			; (mov r8, r8)
   28968:	4b17      	ldr	r3, [pc, #92]	; (289c8 <_system_extint_init+0xd0>)
   2896a:	4798      	blx	r3
   2896c:	1e03      	subs	r3, r0, #0
   2896e:	d1fb      	bne.n	28968 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   28970:	230b      	movs	r3, #11
   28972:	18fb      	adds	r3, r7, r3
   28974:	2200      	movs	r2, #0
   28976:	701a      	strb	r2, [r3, #0]
   28978:	e00d      	b.n	28996 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   2897a:	230b      	movs	r3, #11
   2897c:	18fb      	adds	r3, r7, r3
   2897e:	781a      	ldrb	r2, [r3, #0]
   28980:	4b12      	ldr	r3, [pc, #72]	; (289cc <_system_extint_init+0xd4>)
   28982:	0092      	lsls	r2, r2, #2
   28984:	2100      	movs	r1, #0
   28986:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   28988:	230b      	movs	r3, #11
   2898a:	18fb      	adds	r3, r7, r3
   2898c:	781a      	ldrb	r2, [r3, #0]
   2898e:	230b      	movs	r3, #11
   28990:	18fb      	adds	r3, r7, r3
   28992:	3201      	adds	r2, #1
   28994:	701a      	strb	r2, [r3, #0]
   28996:	230b      	movs	r3, #11
   28998:	18fb      	adds	r3, r7, r3
   2899a:	781b      	ldrb	r3, [r3, #0]
   2899c:	2b0f      	cmp	r3, #15
   2899e:	d9ec      	bls.n	2897a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   289a0:	2004      	movs	r0, #4
   289a2:	4b0b      	ldr	r3, [pc, #44]	; (289d0 <_system_extint_init+0xd8>)
   289a4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   289a6:	4b0b      	ldr	r3, [pc, #44]	; (289d4 <_system_extint_init+0xdc>)
   289a8:	4798      	blx	r3
}
   289aa:	46c0      	nop			; (mov r8, r8)
   289ac:	46bd      	mov	sp, r7
   289ae:	b004      	add	sp, #16
   289b0:	bd80      	pop	{r7, pc}
   289b2:	46c0      	nop			; (mov r8, r8)
   289b4:	40001800 	.word	0x40001800
   289b8:	000287b5 	.word	0x000287b5
   289bc:	0002879d 	.word	0x0002879d
   289c0:	0002c081 	.word	0x0002c081
   289c4:	0002c0c5 	.word	0x0002c0c5
   289c8:	000288b1 	.word	0x000288b1
   289cc:	20005a20 	.word	0x20005a20
   289d0:	00028839 	.word	0x00028839
   289d4:	000289d9 	.word	0x000289d9

000289d8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   289d8:	b580      	push	{r7, lr}
   289da:	b082      	sub	sp, #8
   289dc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   289de:	4b15      	ldr	r3, [pc, #84]	; (28a34 <_extint_enable+0x5c>)
   289e0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   289e2:	2300      	movs	r3, #0
   289e4:	607b      	str	r3, [r7, #4]
   289e6:	e018      	b.n	28a1a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   289e8:	687b      	ldr	r3, [r7, #4]
   289ea:	009b      	lsls	r3, r3, #2
   289ec:	2208      	movs	r2, #8
   289ee:	4694      	mov	ip, r2
   289f0:	44bc      	add	ip, r7
   289f2:	4463      	add	r3, ip
   289f4:	3b08      	subs	r3, #8
   289f6:	681a      	ldr	r2, [r3, #0]
   289f8:	687b      	ldr	r3, [r7, #4]
   289fa:	009b      	lsls	r3, r3, #2
   289fc:	2108      	movs	r1, #8
   289fe:	468c      	mov	ip, r1
   28a00:	44bc      	add	ip, r7
   28a02:	4463      	add	r3, ip
   28a04:	3b08      	subs	r3, #8
   28a06:	681b      	ldr	r3, [r3, #0]
   28a08:	781b      	ldrb	r3, [r3, #0]
   28a0a:	b2db      	uxtb	r3, r3
   28a0c:	2102      	movs	r1, #2
   28a0e:	430b      	orrs	r3, r1
   28a10:	b2db      	uxtb	r3, r3
   28a12:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28a14:	687b      	ldr	r3, [r7, #4]
   28a16:	3301      	adds	r3, #1
   28a18:	607b      	str	r3, [r7, #4]
   28a1a:	687b      	ldr	r3, [r7, #4]
   28a1c:	2b00      	cmp	r3, #0
   28a1e:	d0e3      	beq.n	289e8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   28a20:	46c0      	nop			; (mov r8, r8)
   28a22:	4b05      	ldr	r3, [pc, #20]	; (28a38 <_extint_enable+0x60>)
   28a24:	4798      	blx	r3
   28a26:	1e03      	subs	r3, r0, #0
   28a28:	d1fb      	bne.n	28a22 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   28a2a:	46c0      	nop			; (mov r8, r8)
   28a2c:	46bd      	mov	sp, r7
   28a2e:	b002      	add	sp, #8
   28a30:	bd80      	pop	{r7, pc}
   28a32:	46c0      	nop			; (mov r8, r8)
   28a34:	40001800 	.word	0x40001800
   28a38:	000288b1 	.word	0x000288b1

00028a3c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   28a3c:	b580      	push	{r7, lr}
   28a3e:	b082      	sub	sp, #8
   28a40:	af00      	add	r7, sp, #0
   28a42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   28a44:	687b      	ldr	r3, [r7, #4]
   28a46:	2200      	movs	r2, #0
   28a48:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   28a4a:	687b      	ldr	r3, [r7, #4]
   28a4c:	2200      	movs	r2, #0
   28a4e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   28a50:	687b      	ldr	r3, [r7, #4]
   28a52:	2201      	movs	r2, #1
   28a54:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   28a56:	687b      	ldr	r3, [r7, #4]
   28a58:	2201      	movs	r2, #1
   28a5a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   28a5c:	687b      	ldr	r3, [r7, #4]
   28a5e:	2200      	movs	r2, #0
   28a60:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   28a62:	687b      	ldr	r3, [r7, #4]
   28a64:	2202      	movs	r2, #2
   28a66:	72da      	strb	r2, [r3, #11]
}
   28a68:	46c0      	nop			; (mov r8, r8)
   28a6a:	46bd      	mov	sp, r7
   28a6c:	b002      	add	sp, #8
   28a6e:	bd80      	pop	{r7, pc}

00028a70 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   28a70:	b580      	push	{r7, lr}
   28a72:	b086      	sub	sp, #24
   28a74:	af00      	add	r7, sp, #0
   28a76:	0002      	movs	r2, r0
   28a78:	6039      	str	r1, [r7, #0]
   28a7a:	1dfb      	adds	r3, r7, #7
   28a7c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   28a7e:	2308      	movs	r3, #8
   28a80:	18fb      	adds	r3, r7, r3
   28a82:	0018      	movs	r0, r3
   28a84:	4b36      	ldr	r3, [pc, #216]	; (28b60 <extint_chan_set_config+0xf0>)
   28a86:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   28a88:	683b      	ldr	r3, [r7, #0]
   28a8a:	685b      	ldr	r3, [r3, #4]
   28a8c:	b2da      	uxtb	r2, r3
   28a8e:	2308      	movs	r3, #8
   28a90:	18fb      	adds	r3, r7, r3
   28a92:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28a94:	2308      	movs	r3, #8
   28a96:	18fb      	adds	r3, r7, r3
   28a98:	2200      	movs	r2, #0
   28a9a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   28a9c:	683b      	ldr	r3, [r7, #0]
   28a9e:	7a1a      	ldrb	r2, [r3, #8]
   28aa0:	2308      	movs	r3, #8
   28aa2:	18fb      	adds	r3, r7, r3
   28aa4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   28aa6:	683b      	ldr	r3, [r7, #0]
   28aa8:	681b      	ldr	r3, [r3, #0]
   28aaa:	b2db      	uxtb	r3, r3
   28aac:	2208      	movs	r2, #8
   28aae:	18ba      	adds	r2, r7, r2
   28ab0:	0011      	movs	r1, r2
   28ab2:	0018      	movs	r0, r3
   28ab4:	4b2b      	ldr	r3, [pc, #172]	; (28b64 <extint_chan_set_config+0xf4>)
   28ab6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   28ab8:	1dfb      	adds	r3, r7, #7
   28aba:	781b      	ldrb	r3, [r3, #0]
   28abc:	0018      	movs	r0, r3
   28abe:	4b2a      	ldr	r3, [pc, #168]	; (28b68 <extint_chan_set_config+0xf8>)
   28ac0:	4798      	blx	r3
   28ac2:	0003      	movs	r3, r0
   28ac4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   28ac6:	1dfb      	adds	r3, r7, #7
   28ac8:	781b      	ldrb	r3, [r3, #0]
   28aca:	2207      	movs	r2, #7
   28acc:	4013      	ands	r3, r2
   28ace:	009b      	lsls	r3, r3, #2
   28ad0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   28ad2:	683b      	ldr	r3, [r7, #0]
   28ad4:	7adb      	ldrb	r3, [r3, #11]
   28ad6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   28ad8:	683b      	ldr	r3, [r7, #0]
   28ada:	7a9b      	ldrb	r3, [r3, #10]
   28adc:	2b00      	cmp	r3, #0
   28ade:	d003      	beq.n	28ae8 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   28ae0:	697b      	ldr	r3, [r7, #20]
   28ae2:	2208      	movs	r2, #8
   28ae4:	4313      	orrs	r3, r2
   28ae6:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   28ae8:	1dfb      	adds	r3, r7, #7
   28aea:	781b      	ldrb	r3, [r3, #0]
   28aec:	08db      	lsrs	r3, r3, #3
   28aee:	b2db      	uxtb	r3, r3
   28af0:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   28af2:	1dfb      	adds	r3, r7, #7
   28af4:	781b      	ldrb	r3, [r3, #0]
   28af6:	08db      	lsrs	r3, r3, #3
   28af8:	b2db      	uxtb	r3, r3
   28afa:	001a      	movs	r2, r3
   28afc:	693b      	ldr	r3, [r7, #16]
   28afe:	3206      	adds	r2, #6
   28b00:	0092      	lsls	r2, r2, #2
   28b02:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   28b04:	210f      	movs	r1, #15
   28b06:	68fa      	ldr	r2, [r7, #12]
   28b08:	4091      	lsls	r1, r2
   28b0a:	000a      	movs	r2, r1
   28b0c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   28b0e:	401a      	ands	r2, r3
			(new_config << config_pos);
   28b10:	6979      	ldr	r1, [r7, #20]
   28b12:	68fb      	ldr	r3, [r7, #12]
   28b14:	4099      	lsls	r1, r3
   28b16:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   28b18:	431a      	orrs	r2, r3
   28b1a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   28b1c:	693b      	ldr	r3, [r7, #16]
   28b1e:	1d82      	adds	r2, r0, #6
   28b20:	0092      	lsls	r2, r2, #2
   28b22:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   28b24:	683b      	ldr	r3, [r7, #0]
   28b26:	7a5b      	ldrb	r3, [r3, #9]
   28b28:	2b00      	cmp	r3, #0
   28b2a:	d00a      	beq.n	28b42 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   28b2c:	693b      	ldr	r3, [r7, #16]
   28b2e:	695a      	ldr	r2, [r3, #20]
   28b30:	1dfb      	adds	r3, r7, #7
   28b32:	781b      	ldrb	r3, [r3, #0]
   28b34:	2101      	movs	r1, #1
   28b36:	4099      	lsls	r1, r3
   28b38:	000b      	movs	r3, r1
   28b3a:	431a      	orrs	r2, r3
   28b3c:	693b      	ldr	r3, [r7, #16]
   28b3e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   28b40:	e00a      	b.n	28b58 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   28b42:	693b      	ldr	r3, [r7, #16]
   28b44:	695b      	ldr	r3, [r3, #20]
   28b46:	1dfa      	adds	r2, r7, #7
   28b48:	7812      	ldrb	r2, [r2, #0]
   28b4a:	2101      	movs	r1, #1
   28b4c:	4091      	lsls	r1, r2
   28b4e:	000a      	movs	r2, r1
   28b50:	43d2      	mvns	r2, r2
   28b52:	401a      	ands	r2, r3
   28b54:	693b      	ldr	r3, [r7, #16]
   28b56:	615a      	str	r2, [r3, #20]
}
   28b58:	46c0      	nop			; (mov r8, r8)
   28b5a:	46bd      	mov	sp, r7
   28b5c:	b006      	add	sp, #24
   28b5e:	bd80      	pop	{r7, pc}
   28b60:	00028811 	.word	0x00028811
   28b64:	0002c3e1 	.word	0x0002c3e1
   28b68:	00028865 	.word	0x00028865

00028b6c <system_pinmux_get_config_defaults>:
{
   28b6c:	b580      	push	{r7, lr}
   28b6e:	b082      	sub	sp, #8
   28b70:	af00      	add	r7, sp, #0
   28b72:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28b74:	687b      	ldr	r3, [r7, #4]
   28b76:	2280      	movs	r2, #128	; 0x80
   28b78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28b7a:	687b      	ldr	r3, [r7, #4]
   28b7c:	2200      	movs	r2, #0
   28b7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28b80:	687b      	ldr	r3, [r7, #4]
   28b82:	2201      	movs	r2, #1
   28b84:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28b86:	687b      	ldr	r3, [r7, #4]
   28b88:	2200      	movs	r2, #0
   28b8a:	70da      	strb	r2, [r3, #3]
}
   28b8c:	46c0      	nop			; (mov r8, r8)
   28b8e:	46bd      	mov	sp, r7
   28b90:	b002      	add	sp, #8
   28b92:	bd80      	pop	{r7, pc}

00028b94 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   28b94:	b580      	push	{r7, lr}
   28b96:	b084      	sub	sp, #16
   28b98:	af00      	add	r7, sp, #0
   28b9a:	0002      	movs	r2, r0
   28b9c:	6039      	str	r1, [r7, #0]
   28b9e:	1dfb      	adds	r3, r7, #7
   28ba0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   28ba2:	230c      	movs	r3, #12
   28ba4:	18fb      	adds	r3, r7, r3
   28ba6:	0018      	movs	r0, r3
   28ba8:	4b10      	ldr	r3, [pc, #64]	; (28bec <port_pin_set_config+0x58>)
   28baa:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   28bac:	230c      	movs	r3, #12
   28bae:	18fb      	adds	r3, r7, r3
   28bb0:	2280      	movs	r2, #128	; 0x80
   28bb2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   28bb4:	683b      	ldr	r3, [r7, #0]
   28bb6:	781a      	ldrb	r2, [r3, #0]
   28bb8:	230c      	movs	r3, #12
   28bba:	18fb      	adds	r3, r7, r3
   28bbc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   28bbe:	683b      	ldr	r3, [r7, #0]
   28bc0:	785a      	ldrb	r2, [r3, #1]
   28bc2:	230c      	movs	r3, #12
   28bc4:	18fb      	adds	r3, r7, r3
   28bc6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   28bc8:	683b      	ldr	r3, [r7, #0]
   28bca:	789a      	ldrb	r2, [r3, #2]
   28bcc:	230c      	movs	r3, #12
   28bce:	18fb      	adds	r3, r7, r3
   28bd0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   28bd2:	230c      	movs	r3, #12
   28bd4:	18fa      	adds	r2, r7, r3
   28bd6:	1dfb      	adds	r3, r7, #7
   28bd8:	781b      	ldrb	r3, [r3, #0]
   28bda:	0011      	movs	r1, r2
   28bdc:	0018      	movs	r0, r3
   28bde:	4b04      	ldr	r3, [pc, #16]	; (28bf0 <port_pin_set_config+0x5c>)
   28be0:	4798      	blx	r3
}
   28be2:	46c0      	nop			; (mov r8, r8)
   28be4:	46bd      	mov	sp, r7
   28be6:	b004      	add	sp, #16
   28be8:	bd80      	pop	{r7, pc}
   28bea:	46c0      	nop			; (mov r8, r8)
   28bec:	00028b6d 	.word	0x00028b6d
   28bf0:	0002c3e1 	.word	0x0002c3e1

00028bf4 <system_gclk_chan_get_config_defaults>:
{
   28bf4:	b580      	push	{r7, lr}
   28bf6:	b082      	sub	sp, #8
   28bf8:	af00      	add	r7, sp, #0
   28bfa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28bfc:	687b      	ldr	r3, [r7, #4]
   28bfe:	2200      	movs	r2, #0
   28c00:	701a      	strb	r2, [r3, #0]
}
   28c02:	46c0      	nop			; (mov r8, r8)
   28c04:	46bd      	mov	sp, r7
   28c06:	b002      	add	sp, #8
   28c08:	bd80      	pop	{r7, pc}
	...

00028c0c <system_apb_clock_set_mask>:
{
   28c0c:	b580      	push	{r7, lr}
   28c0e:	b082      	sub	sp, #8
   28c10:	af00      	add	r7, sp, #0
   28c12:	0002      	movs	r2, r0
   28c14:	6039      	str	r1, [r7, #0]
   28c16:	1dfb      	adds	r3, r7, #7
   28c18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28c1a:	1dfb      	adds	r3, r7, #7
   28c1c:	781b      	ldrb	r3, [r3, #0]
   28c1e:	2b01      	cmp	r3, #1
   28c20:	d00a      	beq.n	28c38 <system_apb_clock_set_mask+0x2c>
   28c22:	2b02      	cmp	r3, #2
   28c24:	d00f      	beq.n	28c46 <system_apb_clock_set_mask+0x3a>
   28c26:	2b00      	cmp	r3, #0
   28c28:	d114      	bne.n	28c54 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28c2a:	4b0e      	ldr	r3, [pc, #56]	; (28c64 <system_apb_clock_set_mask+0x58>)
   28c2c:	4a0d      	ldr	r2, [pc, #52]	; (28c64 <system_apb_clock_set_mask+0x58>)
   28c2e:	6991      	ldr	r1, [r2, #24]
   28c30:	683a      	ldr	r2, [r7, #0]
   28c32:	430a      	orrs	r2, r1
   28c34:	619a      	str	r2, [r3, #24]
			break;
   28c36:	e00f      	b.n	28c58 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28c38:	4b0a      	ldr	r3, [pc, #40]	; (28c64 <system_apb_clock_set_mask+0x58>)
   28c3a:	4a0a      	ldr	r2, [pc, #40]	; (28c64 <system_apb_clock_set_mask+0x58>)
   28c3c:	69d1      	ldr	r1, [r2, #28]
   28c3e:	683a      	ldr	r2, [r7, #0]
   28c40:	430a      	orrs	r2, r1
   28c42:	61da      	str	r2, [r3, #28]
			break;
   28c44:	e008      	b.n	28c58 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28c46:	4b07      	ldr	r3, [pc, #28]	; (28c64 <system_apb_clock_set_mask+0x58>)
   28c48:	4a06      	ldr	r2, [pc, #24]	; (28c64 <system_apb_clock_set_mask+0x58>)
   28c4a:	6a11      	ldr	r1, [r2, #32]
   28c4c:	683a      	ldr	r2, [r7, #0]
   28c4e:	430a      	orrs	r2, r1
   28c50:	621a      	str	r2, [r3, #32]
			break;
   28c52:	e001      	b.n	28c58 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28c54:	2317      	movs	r3, #23
   28c56:	e000      	b.n	28c5a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28c58:	2300      	movs	r3, #0
}
   28c5a:	0018      	movs	r0, r3
   28c5c:	46bd      	mov	sp, r7
   28c5e:	b002      	add	sp, #8
   28c60:	bd80      	pop	{r7, pc}
   28c62:	46c0      	nop			; (mov r8, r8)
   28c64:	40000400 	.word	0x40000400

00028c68 <system_interrupt_enable>:
{
   28c68:	b580      	push	{r7, lr}
   28c6a:	b082      	sub	sp, #8
   28c6c:	af00      	add	r7, sp, #0
   28c6e:	0002      	movs	r2, r0
   28c70:	1dfb      	adds	r3, r7, #7
   28c72:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28c74:	4b06      	ldr	r3, [pc, #24]	; (28c90 <system_interrupt_enable+0x28>)
   28c76:	1dfa      	adds	r2, r7, #7
   28c78:	7812      	ldrb	r2, [r2, #0]
   28c7a:	0011      	movs	r1, r2
   28c7c:	221f      	movs	r2, #31
   28c7e:	400a      	ands	r2, r1
   28c80:	2101      	movs	r1, #1
   28c82:	4091      	lsls	r1, r2
   28c84:	000a      	movs	r2, r1
   28c86:	601a      	str	r2, [r3, #0]
}
   28c88:	46c0      	nop			; (mov r8, r8)
   28c8a:	46bd      	mov	sp, r7
   28c8c:	b002      	add	sp, #8
   28c8e:	bd80      	pop	{r7, pc}
   28c90:	e000e100 	.word	0xe000e100

00028c94 <system_interrupt_disable>:
{
   28c94:	b580      	push	{r7, lr}
   28c96:	b082      	sub	sp, #8
   28c98:	af00      	add	r7, sp, #0
   28c9a:	0002      	movs	r2, r0
   28c9c:	1dfb      	adds	r3, r7, #7
   28c9e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28ca0:	4a07      	ldr	r2, [pc, #28]	; (28cc0 <system_interrupt_disable+0x2c>)
   28ca2:	1dfb      	adds	r3, r7, #7
   28ca4:	781b      	ldrb	r3, [r3, #0]
   28ca6:	0019      	movs	r1, r3
   28ca8:	231f      	movs	r3, #31
   28caa:	400b      	ands	r3, r1
   28cac:	2101      	movs	r1, #1
   28cae:	4099      	lsls	r1, r3
   28cb0:	000b      	movs	r3, r1
   28cb2:	0019      	movs	r1, r3
   28cb4:	2380      	movs	r3, #128	; 0x80
   28cb6:	50d1      	str	r1, [r2, r3]
}
   28cb8:	46c0      	nop			; (mov r8, r8)
   28cba:	46bd      	mov	sp, r7
   28cbc:	b002      	add	sp, #8
   28cbe:	bd80      	pop	{r7, pc}
   28cc0:	e000e100 	.word	0xe000e100

00028cc4 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   28cc4:	b580      	push	{r7, lr}
   28cc6:	b084      	sub	sp, #16
   28cc8:	af00      	add	r7, sp, #0
   28cca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28ccc:	687b      	ldr	r3, [r7, #4]
   28cce:	681b      	ldr	r3, [r3, #0]
   28cd0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   28cd2:	68fb      	ldr	r3, [r7, #12]
   28cd4:	7a9b      	ldrb	r3, [r3, #10]
   28cd6:	b2db      	uxtb	r3, r3
   28cd8:	b25b      	sxtb	r3, r3
   28cda:	2b00      	cmp	r3, #0
   28cdc:	da01      	bge.n	28ce2 <rtc_calendar_is_syncing+0x1e>
                return true;
   28cde:	2301      	movs	r3, #1
   28ce0:	e000      	b.n	28ce4 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   28ce2:	2300      	movs	r3, #0
}
   28ce4:	0018      	movs	r0, r3
   28ce6:	46bd      	mov	sp, r7
   28ce8:	b004      	add	sp, #16
   28cea:	bd80      	pop	{r7, pc}

00028cec <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   28cec:	b580      	push	{r7, lr}
   28cee:	b084      	sub	sp, #16
   28cf0:	af00      	add	r7, sp, #0
   28cf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28cf4:	687b      	ldr	r3, [r7, #4]
   28cf6:	681b      	ldr	r3, [r3, #0]
   28cf8:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   28cfa:	2003      	movs	r0, #3
   28cfc:	4b0a      	ldr	r3, [pc, #40]	; (28d28 <rtc_calendar_enable+0x3c>)
   28cfe:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   28d00:	46c0      	nop			; (mov r8, r8)
   28d02:	687b      	ldr	r3, [r7, #4]
   28d04:	0018      	movs	r0, r3
   28d06:	4b09      	ldr	r3, [pc, #36]	; (28d2c <rtc_calendar_enable+0x40>)
   28d08:	4798      	blx	r3
   28d0a:	1e03      	subs	r3, r0, #0
   28d0c:	d1f9      	bne.n	28d02 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   28d0e:	68fb      	ldr	r3, [r7, #12]
   28d10:	881b      	ldrh	r3, [r3, #0]
   28d12:	b29b      	uxth	r3, r3
   28d14:	2202      	movs	r2, #2
   28d16:	4313      	orrs	r3, r2
   28d18:	b29a      	uxth	r2, r3
   28d1a:	68fb      	ldr	r3, [r7, #12]
   28d1c:	801a      	strh	r2, [r3, #0]
}
   28d1e:	46c0      	nop			; (mov r8, r8)
   28d20:	46bd      	mov	sp, r7
   28d22:	b004      	add	sp, #16
   28d24:	bd80      	pop	{r7, pc}
   28d26:	46c0      	nop			; (mov r8, r8)
   28d28:	00028c69 	.word	0x00028c69
   28d2c:	00028cc5 	.word	0x00028cc5

00028d30 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   28d30:	b580      	push	{r7, lr}
   28d32:	b084      	sub	sp, #16
   28d34:	af00      	add	r7, sp, #0
   28d36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28d38:	687b      	ldr	r3, [r7, #4]
   28d3a:	681b      	ldr	r3, [r3, #0]
   28d3c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   28d3e:	2003      	movs	r0, #3
   28d40:	4b0d      	ldr	r3, [pc, #52]	; (28d78 <rtc_calendar_disable+0x48>)
   28d42:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   28d44:	46c0      	nop			; (mov r8, r8)
   28d46:	687b      	ldr	r3, [r7, #4]
   28d48:	0018      	movs	r0, r3
   28d4a:	4b0c      	ldr	r3, [pc, #48]	; (28d7c <rtc_calendar_disable+0x4c>)
   28d4c:	4798      	blx	r3
   28d4e:	1e03      	subs	r3, r0, #0
   28d50:	d1f9      	bne.n	28d46 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   28d52:	68fb      	ldr	r3, [r7, #12]
   28d54:	22c1      	movs	r2, #193	; 0xc1
   28d56:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   28d58:	68fb      	ldr	r3, [r7, #12]
   28d5a:	22c1      	movs	r2, #193	; 0xc1
   28d5c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   28d5e:	68fb      	ldr	r3, [r7, #12]
   28d60:	881b      	ldrh	r3, [r3, #0]
   28d62:	b29b      	uxth	r3, r3
   28d64:	2202      	movs	r2, #2
   28d66:	4393      	bics	r3, r2
   28d68:	b29a      	uxth	r2, r3
   28d6a:	68fb      	ldr	r3, [r7, #12]
   28d6c:	801a      	strh	r2, [r3, #0]
}
   28d6e:	46c0      	nop			; (mov r8, r8)
   28d70:	46bd      	mov	sp, r7
   28d72:	b004      	add	sp, #16
   28d74:	bd80      	pop	{r7, pc}
   28d76:	46c0      	nop			; (mov r8, r8)
   28d78:	00028c95 	.word	0x00028c95
   28d7c:	00028cc5 	.word	0x00028cc5

00028d80 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   28d80:	b580      	push	{r7, lr}
   28d82:	b084      	sub	sp, #16
   28d84:	af00      	add	r7, sp, #0
   28d86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28d88:	687b      	ldr	r3, [r7, #4]
   28d8a:	681b      	ldr	r3, [r3, #0]
   28d8c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   28d8e:	687b      	ldr	r3, [r7, #4]
   28d90:	0018      	movs	r0, r3
   28d92:	4b0d      	ldr	r3, [pc, #52]	; (28dc8 <rtc_calendar_reset+0x48>)
   28d94:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   28d96:	687b      	ldr	r3, [r7, #4]
   28d98:	2200      	movs	r2, #0
   28d9a:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   28d9c:	687b      	ldr	r3, [r7, #4]
   28d9e:	2200      	movs	r2, #0
   28da0:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   28da2:	46c0      	nop			; (mov r8, r8)
   28da4:	687b      	ldr	r3, [r7, #4]
   28da6:	0018      	movs	r0, r3
   28da8:	4b08      	ldr	r3, [pc, #32]	; (28dcc <rtc_calendar_reset+0x4c>)
   28daa:	4798      	blx	r3
   28dac:	1e03      	subs	r3, r0, #0
   28dae:	d1f9      	bne.n	28da4 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   28db0:	68fb      	ldr	r3, [r7, #12]
   28db2:	881b      	ldrh	r3, [r3, #0]
   28db4:	b29b      	uxth	r3, r3
   28db6:	2201      	movs	r2, #1
   28db8:	4313      	orrs	r3, r2
   28dba:	b29a      	uxth	r2, r3
   28dbc:	68fb      	ldr	r3, [r7, #12]
   28dbe:	801a      	strh	r2, [r3, #0]
}
   28dc0:	46c0      	nop			; (mov r8, r8)
   28dc2:	46bd      	mov	sp, r7
   28dc4:	b004      	add	sp, #16
   28dc6:	bd80      	pop	{r7, pc}
   28dc8:	00028d31 	.word	0x00028d31
   28dcc:	00028cc5 	.word	0x00028cc5

00028dd0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   28dd0:	b580      	push	{r7, lr}
   28dd2:	b084      	sub	sp, #16
   28dd4:	af00      	add	r7, sp, #0
   28dd6:	6078      	str	r0, [r7, #4]
   28dd8:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   28dda:	683b      	ldr	r3, [r7, #0]
   28ddc:	88db      	ldrh	r3, [r3, #6]
   28dde:	001a      	movs	r2, r3
   28de0:	687b      	ldr	r3, [r7, #4]
   28de2:	88db      	ldrh	r3, [r3, #6]
   28de4:	1ad3      	subs	r3, r2, r3
   28de6:	069b      	lsls	r3, r3, #26
   28de8:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   28dea:	683b      	ldr	r3, [r7, #0]
   28dec:	795b      	ldrb	r3, [r3, #5]
   28dee:	059b      	lsls	r3, r3, #22
   28df0:	001a      	movs	r2, r3
   28df2:	68fb      	ldr	r3, [r7, #12]
   28df4:	4313      	orrs	r3, r2
   28df6:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   28df8:	683b      	ldr	r3, [r7, #0]
   28dfa:	791b      	ldrb	r3, [r3, #4]
   28dfc:	045b      	lsls	r3, r3, #17
   28dfe:	001a      	movs	r2, r3
   28e00:	68fb      	ldr	r3, [r7, #12]
   28e02:	4313      	orrs	r3, r2
   28e04:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   28e06:	683b      	ldr	r3, [r7, #0]
   28e08:	789b      	ldrb	r3, [r3, #2]
   28e0a:	031b      	lsls	r3, r3, #12
   28e0c:	001a      	movs	r2, r3
   28e0e:	68fb      	ldr	r3, [r7, #12]
   28e10:	4313      	orrs	r3, r2
   28e12:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   28e14:	687b      	ldr	r3, [r7, #4]
   28e16:	791b      	ldrb	r3, [r3, #4]
   28e18:	2201      	movs	r2, #1
   28e1a:	4053      	eors	r3, r2
   28e1c:	b2db      	uxtb	r3, r3
   28e1e:	2b00      	cmp	r3, #0
   28e20:	d008      	beq.n	28e34 <rtc_calendar_time_to_register_value+0x64>
   28e22:	683b      	ldr	r3, [r7, #0]
   28e24:	78db      	ldrb	r3, [r3, #3]
   28e26:	2b00      	cmp	r3, #0
   28e28:	d004      	beq.n	28e34 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   28e2a:	68fb      	ldr	r3, [r7, #12]
   28e2c:	2280      	movs	r2, #128	; 0x80
   28e2e:	0252      	lsls	r2, r2, #9
   28e30:	4313      	orrs	r3, r2
   28e32:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   28e34:	683b      	ldr	r3, [r7, #0]
   28e36:	785b      	ldrb	r3, [r3, #1]
   28e38:	019b      	lsls	r3, r3, #6
   28e3a:	001a      	movs	r2, r3
   28e3c:	68fb      	ldr	r3, [r7, #12]
   28e3e:	4313      	orrs	r3, r2
   28e40:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   28e42:	683b      	ldr	r3, [r7, #0]
   28e44:	781b      	ldrb	r3, [r3, #0]
   28e46:	001a      	movs	r2, r3
   28e48:	68fb      	ldr	r3, [r7, #12]
   28e4a:	4313      	orrs	r3, r2
   28e4c:	60fb      	str	r3, [r7, #12]

	return register_value;
   28e4e:	68fb      	ldr	r3, [r7, #12]
}
   28e50:	0018      	movs	r0, r3
   28e52:	46bd      	mov	sp, r7
   28e54:	b004      	add	sp, #16
   28e56:	bd80      	pop	{r7, pc}

00028e58 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   28e58:	b580      	push	{r7, lr}
   28e5a:	b084      	sub	sp, #16
   28e5c:	af00      	add	r7, sp, #0
   28e5e:	60f8      	str	r0, [r7, #12]
   28e60:	60b9      	str	r1, [r7, #8]
   28e62:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   28e64:	68bb      	ldr	r3, [r7, #8]
   28e66:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   28e68:	b29a      	uxth	r2, r3
   28e6a:	68fb      	ldr	r3, [r7, #12]
   28e6c:	88db      	ldrh	r3, [r3, #6]
   28e6e:	18d3      	adds	r3, r2, r3
   28e70:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   28e72:	687b      	ldr	r3, [r7, #4]
   28e74:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   28e76:	68bb      	ldr	r3, [r7, #8]
   28e78:	0d9b      	lsrs	r3, r3, #22
   28e7a:	b2db      	uxtb	r3, r3
   28e7c:	220f      	movs	r2, #15
   28e7e:	4013      	ands	r3, r2
   28e80:	b2da      	uxtb	r2, r3
   28e82:	687b      	ldr	r3, [r7, #4]
   28e84:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   28e86:	68bb      	ldr	r3, [r7, #8]
   28e88:	0c5b      	lsrs	r3, r3, #17
   28e8a:	b2db      	uxtb	r3, r3
   28e8c:	221f      	movs	r2, #31
   28e8e:	4013      	ands	r3, r2
   28e90:	b2da      	uxtb	r2, r3
   28e92:	687b      	ldr	r3, [r7, #4]
   28e94:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   28e96:	68fb      	ldr	r3, [r7, #12]
   28e98:	791b      	ldrb	r3, [r3, #4]
   28e9a:	2b00      	cmp	r3, #0
   28e9c:	d008      	beq.n	28eb0 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   28e9e:	68bb      	ldr	r3, [r7, #8]
   28ea0:	0b1b      	lsrs	r3, r3, #12
   28ea2:	b2db      	uxtb	r3, r3
   28ea4:	221f      	movs	r2, #31
   28ea6:	4013      	ands	r3, r2
   28ea8:	b2da      	uxtb	r2, r3
   28eaa:	687b      	ldr	r3, [r7, #4]
   28eac:	709a      	strb	r2, [r3, #2]
   28eae:	e010      	b.n	28ed2 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   28eb0:	68bb      	ldr	r3, [r7, #8]
   28eb2:	0b1b      	lsrs	r3, r3, #12
   28eb4:	b2db      	uxtb	r3, r3
   28eb6:	220f      	movs	r2, #15
   28eb8:	4013      	ands	r3, r2
   28eba:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   28ebc:	687b      	ldr	r3, [r7, #4]
   28ebe:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   28ec0:	68ba      	ldr	r2, [r7, #8]
   28ec2:	2380      	movs	r3, #128	; 0x80
   28ec4:	025b      	lsls	r3, r3, #9
   28ec6:	4013      	ands	r3, r2
   28ec8:	1e5a      	subs	r2, r3, #1
   28eca:	4193      	sbcs	r3, r2
   28ecc:	b2da      	uxtb	r2, r3
   28ece:	687b      	ldr	r3, [r7, #4]
   28ed0:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   28ed2:	68bb      	ldr	r3, [r7, #8]
   28ed4:	099b      	lsrs	r3, r3, #6
   28ed6:	b2db      	uxtb	r3, r3
   28ed8:	223f      	movs	r2, #63	; 0x3f
   28eda:	4013      	ands	r3, r2
   28edc:	b2da      	uxtb	r2, r3
   28ede:	687b      	ldr	r3, [r7, #4]
   28ee0:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   28ee2:	68bb      	ldr	r3, [r7, #8]
   28ee4:	b2db      	uxtb	r3, r3
   28ee6:	223f      	movs	r2, #63	; 0x3f
   28ee8:	4013      	ands	r3, r2
   28eea:	b2da      	uxtb	r2, r3
   28eec:	687b      	ldr	r3, [r7, #4]
   28eee:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   28ef0:	46c0      	nop			; (mov r8, r8)
   28ef2:	46bd      	mov	sp, r7
   28ef4:	b004      	add	sp, #16
   28ef6:	bd80      	pop	{r7, pc}

00028ef8 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   28ef8:	b580      	push	{r7, lr}
   28efa:	b084      	sub	sp, #16
   28efc:	af00      	add	r7, sp, #0
   28efe:	6078      	str	r0, [r7, #4]
   28f00:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28f02:	687b      	ldr	r3, [r7, #4]
   28f04:	681b      	ldr	r3, [r3, #0]
   28f06:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   28f08:	683b      	ldr	r3, [r7, #0]
   28f0a:	881a      	ldrh	r2, [r3, #0]
   28f0c:	230e      	movs	r3, #14
   28f0e:	18fb      	adds	r3, r7, r3
   28f10:	2108      	movs	r1, #8
   28f12:	430a      	orrs	r2, r1
   28f14:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   28f16:	683b      	ldr	r3, [r7, #0]
   28f18:	791b      	ldrb	r3, [r3, #4]
   28f1a:	2201      	movs	r2, #1
   28f1c:	4053      	eors	r3, r2
   28f1e:	b2db      	uxtb	r3, r3
   28f20:	2b00      	cmp	r3, #0
   28f22:	d007      	beq.n	28f34 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   28f24:	230e      	movs	r3, #14
   28f26:	18fb      	adds	r3, r7, r3
   28f28:	220e      	movs	r2, #14
   28f2a:	18ba      	adds	r2, r7, r2
   28f2c:	8812      	ldrh	r2, [r2, #0]
   28f2e:	2140      	movs	r1, #64	; 0x40
   28f30:	430a      	orrs	r2, r1
   28f32:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   28f34:	683b      	ldr	r3, [r7, #0]
   28f36:	789b      	ldrb	r3, [r3, #2]
   28f38:	2b00      	cmp	r3, #0
   28f3a:	d007      	beq.n	28f4c <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   28f3c:	230e      	movs	r3, #14
   28f3e:	18fb      	adds	r3, r7, r3
   28f40:	220e      	movs	r2, #14
   28f42:	18ba      	adds	r2, r7, r2
   28f44:	8812      	ldrh	r2, [r2, #0]
   28f46:	2180      	movs	r1, #128	; 0x80
   28f48:	430a      	orrs	r2, r1
   28f4a:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   28f4c:	68bb      	ldr	r3, [r7, #8]
   28f4e:	220e      	movs	r2, #14
   28f50:	18ba      	adds	r2, r7, r2
   28f52:	8812      	ldrh	r2, [r2, #0]
   28f54:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   28f56:	683b      	ldr	r3, [r7, #0]
   28f58:	78db      	ldrb	r3, [r3, #3]
   28f5a:	2b00      	cmp	r3, #0
   28f5c:	d008      	beq.n	28f70 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   28f5e:	68bb      	ldr	r3, [r7, #8]
   28f60:	885b      	ldrh	r3, [r3, #2]
   28f62:	b29b      	uxth	r3, r3
   28f64:	2280      	movs	r2, #128	; 0x80
   28f66:	01d2      	lsls	r2, r2, #7
   28f68:	4313      	orrs	r3, r2
   28f6a:	b29a      	uxth	r2, r3
   28f6c:	68bb      	ldr	r3, [r7, #8]
   28f6e:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   28f70:	230d      	movs	r3, #13
   28f72:	18fb      	adds	r3, r7, r3
   28f74:	2200      	movs	r2, #0
   28f76:	701a      	strb	r2, [r3, #0]
   28f78:	e017      	b.n	28faa <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   28f7a:	230d      	movs	r3, #13
   28f7c:	18fb      	adds	r3, r7, r3
   28f7e:	781a      	ldrb	r2, [r3, #0]
   28f80:	0013      	movs	r3, r2
   28f82:	009b      	lsls	r3, r3, #2
   28f84:	189b      	adds	r3, r3, r2
   28f86:	005b      	lsls	r3, r3, #1
   28f88:	3308      	adds	r3, #8
   28f8a:	683a      	ldr	r2, [r7, #0]
   28f8c:	18d1      	adds	r1, r2, r3
   28f8e:	230d      	movs	r3, #13
   28f90:	18fb      	adds	r3, r7, r3
   28f92:	781a      	ldrb	r2, [r3, #0]
   28f94:	687b      	ldr	r3, [r7, #4]
   28f96:	0018      	movs	r0, r3
   28f98:	4b08      	ldr	r3, [pc, #32]	; (28fbc <_rtc_calendar_set_config+0xc4>)
   28f9a:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   28f9c:	230d      	movs	r3, #13
   28f9e:	18fb      	adds	r3, r7, r3
   28fa0:	781a      	ldrb	r2, [r3, #0]
   28fa2:	230d      	movs	r3, #13
   28fa4:	18fb      	adds	r3, r7, r3
   28fa6:	3201      	adds	r2, #1
   28fa8:	701a      	strb	r2, [r3, #0]
   28faa:	230d      	movs	r3, #13
   28fac:	18fb      	adds	r3, r7, r3
   28fae:	781b      	ldrb	r3, [r3, #0]
   28fb0:	2b00      	cmp	r3, #0
   28fb2:	d0e2      	beq.n	28f7a <_rtc_calendar_set_config+0x82>
	}
}
   28fb4:	46c0      	nop			; (mov r8, r8)
   28fb6:	46bd      	mov	sp, r7
   28fb8:	b004      	add	sp, #16
   28fba:	bd80      	pop	{r7, pc}
   28fbc:	000290e1 	.word	0x000290e1

00028fc0 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   28fc0:	b580      	push	{r7, lr}
   28fc2:	b086      	sub	sp, #24
   28fc4:	af00      	add	r7, sp, #0
   28fc6:	60f8      	str	r0, [r7, #12]
   28fc8:	60b9      	str	r1, [r7, #8]
   28fca:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28fcc:	68fb      	ldr	r3, [r7, #12]
   28fce:	68ba      	ldr	r2, [r7, #8]
   28fd0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   28fd2:	2120      	movs	r1, #32
   28fd4:	2000      	movs	r0, #0
   28fd6:	4b18      	ldr	r3, [pc, #96]	; (29038 <rtc_calendar_init+0x78>)
   28fd8:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28fda:	2314      	movs	r3, #20
   28fdc:	18fb      	adds	r3, r7, r3
   28fde:	0018      	movs	r0, r3
   28fe0:	4b16      	ldr	r3, [pc, #88]	; (2903c <rtc_calendar_init+0x7c>)
   28fe2:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   28fe4:	2314      	movs	r3, #20
   28fe6:	18fb      	adds	r3, r7, r3
   28fe8:	2202      	movs	r2, #2
   28fea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   28fec:	2314      	movs	r3, #20
   28fee:	18fb      	adds	r3, r7, r3
   28ff0:	0019      	movs	r1, r3
   28ff2:	2004      	movs	r0, #4
   28ff4:	4b12      	ldr	r3, [pc, #72]	; (29040 <rtc_calendar_init+0x80>)
   28ff6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   28ff8:	2004      	movs	r0, #4
   28ffa:	4b12      	ldr	r3, [pc, #72]	; (29044 <rtc_calendar_init+0x84>)
   28ffc:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   28ffe:	68fb      	ldr	r3, [r7, #12]
   29000:	0018      	movs	r0, r3
   29002:	4b11      	ldr	r3, [pc, #68]	; (29048 <rtc_calendar_init+0x88>)
   29004:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   29006:	687b      	ldr	r3, [r7, #4]
   29008:	791a      	ldrb	r2, [r3, #4]
   2900a:	68fb      	ldr	r3, [r7, #12]
   2900c:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   2900e:	687b      	ldr	r3, [r7, #4]
   29010:	78da      	ldrb	r2, [r3, #3]
   29012:	68fb      	ldr	r3, [r7, #12]
   29014:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   29016:	687b      	ldr	r3, [r7, #4]
   29018:	88da      	ldrh	r2, [r3, #6]
   2901a:	68fb      	ldr	r3, [r7, #12]
   2901c:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   2901e:	4b0b      	ldr	r3, [pc, #44]	; (2904c <rtc_calendar_init+0x8c>)
   29020:	68fa      	ldr	r2, [r7, #12]
   29022:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   29024:	687a      	ldr	r2, [r7, #4]
   29026:	68fb      	ldr	r3, [r7, #12]
   29028:	0011      	movs	r1, r2
   2902a:	0018      	movs	r0, r3
   2902c:	4b08      	ldr	r3, [pc, #32]	; (29050 <rtc_calendar_init+0x90>)
   2902e:	4798      	blx	r3
}
   29030:	46c0      	nop			; (mov r8, r8)
   29032:	46bd      	mov	sp, r7
   29034:	b006      	add	sp, #24
   29036:	bd80      	pop	{r7, pc}
   29038:	00028c0d 	.word	0x00028c0d
   2903c:	00028bf5 	.word	0x00028bf5
   29040:	0002c081 	.word	0x0002c081
   29044:	0002c0c5 	.word	0x0002c0c5
   29048:	00028d81 	.word	0x00028d81
   2904c:	20005a60 	.word	0x20005a60
   29050:	00028ef9 	.word	0x00028ef9

00029054 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   29054:	b580      	push	{r7, lr}
   29056:	b084      	sub	sp, #16
   29058:	af00      	add	r7, sp, #0
   2905a:	6078      	str	r0, [r7, #4]
   2905c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2905e:	687b      	ldr	r3, [r7, #4]
   29060:	681b      	ldr	r3, [r3, #0]
   29062:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   29064:	687b      	ldr	r3, [r7, #4]
   29066:	795b      	ldrb	r3, [r3, #5]
   29068:	2201      	movs	r2, #1
   2906a:	4053      	eors	r3, r2
   2906c:	b2db      	uxtb	r3, r3
   2906e:	2b00      	cmp	r3, #0
   29070:	d00a      	beq.n	29088 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   29072:	68fb      	ldr	r3, [r7, #12]
   29074:	4a16      	ldr	r2, [pc, #88]	; (290d0 <rtc_calendar_get_time+0x7c>)
   29076:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   29078:	46c0      	nop			; (mov r8, r8)
   2907a:	687b      	ldr	r3, [r7, #4]
   2907c:	0018      	movs	r0, r3
   2907e:	4b15      	ldr	r3, [pc, #84]	; (290d4 <rtc_calendar_get_time+0x80>)
   29080:	4798      	blx	r3
   29082:	1e03      	subs	r3, r0, #0
   29084:	d1f9      	bne.n	2907a <rtc_calendar_get_time+0x26>
   29086:	e016      	b.n	290b6 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   29088:	68fb      	ldr	r3, [r7, #12]
   2908a:	885b      	ldrh	r3, [r3, #2]
   2908c:	b29b      	uxth	r3, r3
   2908e:	001a      	movs	r2, r3
   29090:	2380      	movs	r3, #128	; 0x80
   29092:	01db      	lsls	r3, r3, #7
   29094:	4013      	ands	r3, r2
   29096:	d10e      	bne.n	290b6 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   29098:	68fb      	ldr	r3, [r7, #12]
   2909a:	885b      	ldrh	r3, [r3, #2]
   2909c:	b29b      	uxth	r3, r3
   2909e:	4a0e      	ldr	r2, [pc, #56]	; (290d8 <rtc_calendar_get_time+0x84>)
   290a0:	4313      	orrs	r3, r2
   290a2:	b29a      	uxth	r2, r3
   290a4:	68fb      	ldr	r3, [r7, #12]
   290a6:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   290a8:	46c0      	nop			; (mov r8, r8)
   290aa:	687b      	ldr	r3, [r7, #4]
   290ac:	0018      	movs	r0, r3
   290ae:	4b09      	ldr	r3, [pc, #36]	; (290d4 <rtc_calendar_get_time+0x80>)
   290b0:	4798      	blx	r3
   290b2:	1e03      	subs	r3, r0, #0
   290b4:	d1f9      	bne.n	290aa <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   290b6:	68fb      	ldr	r3, [r7, #12]
   290b8:	691b      	ldr	r3, [r3, #16]
   290ba:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   290bc:	683a      	ldr	r2, [r7, #0]
   290be:	68b9      	ldr	r1, [r7, #8]
   290c0:	687b      	ldr	r3, [r7, #4]
   290c2:	0018      	movs	r0, r3
   290c4:	4b05      	ldr	r3, [pc, #20]	; (290dc <rtc_calendar_get_time+0x88>)
   290c6:	4798      	blx	r3
}
   290c8:	46c0      	nop			; (mov r8, r8)
   290ca:	46bd      	mov	sp, r7
   290cc:	b004      	add	sp, #16
   290ce:	bd80      	pop	{r7, pc}
   290d0:	ffff8000 	.word	0xffff8000
   290d4:	00028cc5 	.word	0x00028cc5
   290d8:	ffffc000 	.word	0xffffc000
   290dc:	00028e59 	.word	0x00028e59

000290e0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   290e0:	b580      	push	{r7, lr}
   290e2:	b086      	sub	sp, #24
   290e4:	af00      	add	r7, sp, #0
   290e6:	60f8      	str	r0, [r7, #12]
   290e8:	60b9      	str	r1, [r7, #8]
   290ea:	1dfb      	adds	r3, r7, #7
   290ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   290ee:	68fb      	ldr	r3, [r7, #12]
   290f0:	681b      	ldr	r3, [r3, #0]
   290f2:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   290f4:	1dfb      	adds	r3, r7, #7
   290f6:	781b      	ldrb	r3, [r3, #0]
   290f8:	2b01      	cmp	r3, #1
   290fa:	d901      	bls.n	29100 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   290fc:	2317      	movs	r3, #23
   290fe:	e021      	b.n	29144 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   29100:	68ba      	ldr	r2, [r7, #8]
   29102:	68fb      	ldr	r3, [r7, #12]
   29104:	0011      	movs	r1, r2
   29106:	0018      	movs	r0, r3
   29108:	4b10      	ldr	r3, [pc, #64]	; (2914c <rtc_calendar_set_alarm+0x6c>)
   2910a:	4798      	blx	r3
   2910c:	0003      	movs	r3, r0
   2910e:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   29110:	46c0      	nop			; (mov r8, r8)
   29112:	68fb      	ldr	r3, [r7, #12]
   29114:	0018      	movs	r0, r3
   29116:	4b0e      	ldr	r3, [pc, #56]	; (29150 <rtc_calendar_set_alarm+0x70>)
   29118:	4798      	blx	r3
   2911a:	1e03      	subs	r3, r0, #0
   2911c:	d1f9      	bne.n	29112 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   2911e:	1dfb      	adds	r3, r7, #7
   29120:	781a      	ldrb	r2, [r3, #0]
   29122:	697b      	ldr	r3, [r7, #20]
   29124:	3203      	adds	r2, #3
   29126:	00d2      	lsls	r2, r2, #3
   29128:	6939      	ldr	r1, [r7, #16]
   2912a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   2912c:	1dfb      	adds	r3, r7, #7
   2912e:	781b      	ldrb	r3, [r3, #0]
   29130:	68ba      	ldr	r2, [r7, #8]
   29132:	7a11      	ldrb	r1, [r2, #8]
   29134:	697a      	ldr	r2, [r7, #20]
   29136:	3303      	adds	r3, #3
   29138:	00db      	lsls	r3, r3, #3
   2913a:	18d3      	adds	r3, r2, r3
   2913c:	3304      	adds	r3, #4
   2913e:	1c0a      	adds	r2, r1, #0
   29140:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   29142:	2300      	movs	r3, #0
}
   29144:	0018      	movs	r0, r3
   29146:	46bd      	mov	sp, r7
   29148:	b006      	add	sp, #24
   2914a:	bd80      	pop	{r7, pc}
   2914c:	00028dd1 	.word	0x00028dd1
   29150:	00028cc5 	.word	0x00028cc5

00029154 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   29154:	b580      	push	{r7, lr}
   29156:	b086      	sub	sp, #24
   29158:	af00      	add	r7, sp, #0
   2915a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   2915c:	4b28      	ldr	r3, [pc, #160]	; (29200 <_rtc_interrupt_handler+0xac>)
   2915e:	687a      	ldr	r2, [r7, #4]
   29160:	0092      	lsls	r2, r2, #2
   29162:	58d3      	ldr	r3, [r2, r3]
   29164:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   29166:	697b      	ldr	r3, [r7, #20]
   29168:	681b      	ldr	r3, [r3, #0]
   2916a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   2916c:	230e      	movs	r3, #14
   2916e:	18fb      	adds	r3, r7, r3
   29170:	697a      	ldr	r2, [r7, #20]
   29172:	8a52      	ldrh	r2, [r2, #18]
   29174:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   29176:	697b      	ldr	r3, [r7, #20]
   29178:	8a1b      	ldrh	r3, [r3, #16]
   2917a:	b29a      	uxth	r2, r3
   2917c:	230e      	movs	r3, #14
   2917e:	18fb      	adds	r3, r7, r3
   29180:	210e      	movs	r1, #14
   29182:	1879      	adds	r1, r7, r1
   29184:	8809      	ldrh	r1, [r1, #0]
   29186:	400a      	ands	r2, r1
   29188:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   2918a:	693b      	ldr	r3, [r7, #16]
   2918c:	7a1b      	ldrb	r3, [r3, #8]
   2918e:	b2da      	uxtb	r2, r3
   29190:	230c      	movs	r3, #12
   29192:	18fb      	adds	r3, r7, r3
   29194:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   29196:	693b      	ldr	r3, [r7, #16]
   29198:	79db      	ldrb	r3, [r3, #7]
   2919a:	b2db      	uxtb	r3, r3
   2919c:	b29a      	uxth	r2, r3
   2919e:	230c      	movs	r3, #12
   291a0:	18fb      	adds	r3, r7, r3
   291a2:	210c      	movs	r1, #12
   291a4:	1879      	adds	r1, r7, r1
   291a6:	8809      	ldrh	r1, [r1, #0]
   291a8:	400a      	ands	r2, r1
   291aa:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   291ac:	230c      	movs	r3, #12
   291ae:	18fb      	adds	r3, r7, r3
   291b0:	881b      	ldrh	r3, [r3, #0]
   291b2:	2280      	movs	r2, #128	; 0x80
   291b4:	4013      	ands	r3, r2
   291b6:	d00c      	beq.n	291d2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   291b8:	230e      	movs	r3, #14
   291ba:	18fb      	adds	r3, r7, r3
   291bc:	881b      	ldrh	r3, [r3, #0]
   291be:	2202      	movs	r2, #2
   291c0:	4013      	ands	r3, r2
   291c2:	d002      	beq.n	291ca <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   291c4:	697b      	ldr	r3, [r7, #20]
   291c6:	68db      	ldr	r3, [r3, #12]
   291c8:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   291ca:	693b      	ldr	r3, [r7, #16]
   291cc:	2280      	movs	r2, #128	; 0x80
   291ce:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   291d0:	e011      	b.n	291f6 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   291d2:	230c      	movs	r3, #12
   291d4:	18fb      	adds	r3, r7, r3
   291d6:	881b      	ldrh	r3, [r3, #0]
   291d8:	2201      	movs	r2, #1
   291da:	4013      	ands	r3, r2
   291dc:	d00b      	beq.n	291f6 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   291de:	230e      	movs	r3, #14
   291e0:	18fb      	adds	r3, r7, r3
   291e2:	881b      	ldrh	r3, [r3, #0]
   291e4:	2201      	movs	r2, #1
   291e6:	4013      	ands	r3, r2
   291e8:	d002      	beq.n	291f0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   291ea:	697b      	ldr	r3, [r7, #20]
   291ec:	689b      	ldr	r3, [r3, #8]
   291ee:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   291f0:	693b      	ldr	r3, [r7, #16]
   291f2:	2201      	movs	r2, #1
   291f4:	721a      	strb	r2, [r3, #8]
}
   291f6:	46c0      	nop			; (mov r8, r8)
   291f8:	46bd      	mov	sp, r7
   291fa:	b006      	add	sp, #24
   291fc:	bd80      	pop	{r7, pc}
   291fe:	46c0      	nop			; (mov r8, r8)
   29200:	20005a60 	.word	0x20005a60

00029204 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   29204:	b580      	push	{r7, lr}
   29206:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   29208:	2000      	movs	r0, #0
   2920a:	4b02      	ldr	r3, [pc, #8]	; (29214 <RTC_Handler+0x10>)
   2920c:	4798      	blx	r3
}
   2920e:	46c0      	nop			; (mov r8, r8)
   29210:	46bd      	mov	sp, r7
   29212:	bd80      	pop	{r7, pc}
   29214:	00029155 	.word	0x00029155

00029218 <system_gclk_chan_get_config_defaults>:
{
   29218:	b580      	push	{r7, lr}
   2921a:	b082      	sub	sp, #8
   2921c:	af00      	add	r7, sp, #0
   2921e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29220:	687b      	ldr	r3, [r7, #4]
   29222:	2200      	movs	r2, #0
   29224:	701a      	strb	r2, [r3, #0]
}
   29226:	46c0      	nop			; (mov r8, r8)
   29228:	46bd      	mov	sp, r7
   2922a:	b002      	add	sp, #8
   2922c:	bd80      	pop	{r7, pc}

0002922e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   2922e:	b5f0      	push	{r4, r5, r6, r7, lr}
   29230:	b08d      	sub	sp, #52	; 0x34
   29232:	af00      	add	r7, sp, #0
   29234:	60b8      	str	r0, [r7, #8]
   29236:	60f9      	str	r1, [r7, #12]
   29238:	603a      	str	r2, [r7, #0]
   2923a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   2923c:	2300      	movs	r3, #0
   2923e:	2400      	movs	r4, #0
   29240:	623b      	str	r3, [r7, #32]
   29242:	627c      	str	r4, [r7, #36]	; 0x24
   29244:	2300      	movs	r3, #0
   29246:	2400      	movs	r4, #0
   29248:	61bb      	str	r3, [r7, #24]
   2924a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   2924c:	233f      	movs	r3, #63	; 0x3f
   2924e:	62fb      	str	r3, [r7, #44]	; 0x2c
   29250:	e053      	b.n	292fa <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   29252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29254:	3b20      	subs	r3, #32
   29256:	2b00      	cmp	r3, #0
   29258:	db04      	blt.n	29264 <long_division+0x36>
   2925a:	2201      	movs	r2, #1
   2925c:	409a      	lsls	r2, r3
   2925e:	0013      	movs	r3, r2
   29260:	617b      	str	r3, [r7, #20]
   29262:	e00b      	b.n	2927c <long_division+0x4e>
   29264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29266:	2220      	movs	r2, #32
   29268:	1ad3      	subs	r3, r2, r3
   2926a:	2201      	movs	r2, #1
   2926c:	40da      	lsrs	r2, r3
   2926e:	0013      	movs	r3, r2
   29270:	2100      	movs	r1, #0
   29272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29274:	4091      	lsls	r1, r2
   29276:	000a      	movs	r2, r1
   29278:	4313      	orrs	r3, r2
   2927a:	617b      	str	r3, [r7, #20]
   2927c:	2201      	movs	r2, #1
   2927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29280:	409a      	lsls	r2, r3
   29282:	0013      	movs	r3, r2
   29284:	613b      	str	r3, [r7, #16]

		r = r << 1;
   29286:	69bb      	ldr	r3, [r7, #24]
   29288:	69fc      	ldr	r4, [r7, #28]
   2928a:	18db      	adds	r3, r3, r3
   2928c:	4164      	adcs	r4, r4
   2928e:	61bb      	str	r3, [r7, #24]
   29290:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   29292:	68bb      	ldr	r3, [r7, #8]
   29294:	693a      	ldr	r2, [r7, #16]
   29296:	401a      	ands	r2, r3
   29298:	0015      	movs	r5, r2
   2929a:	68fb      	ldr	r3, [r7, #12]
   2929c:	697a      	ldr	r2, [r7, #20]
   2929e:	401a      	ands	r2, r3
   292a0:	0016      	movs	r6, r2
   292a2:	002b      	movs	r3, r5
   292a4:	4333      	orrs	r3, r6
   292a6:	d007      	beq.n	292b8 <long_division+0x8a>
			r |= 0x01;
   292a8:	69bb      	ldr	r3, [r7, #24]
   292aa:	2201      	movs	r2, #1
   292ac:	4313      	orrs	r3, r2
   292ae:	61bb      	str	r3, [r7, #24]
   292b0:	69fb      	ldr	r3, [r7, #28]
   292b2:	2200      	movs	r2, #0
   292b4:	4313      	orrs	r3, r2
   292b6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   292b8:	687a      	ldr	r2, [r7, #4]
   292ba:	69fb      	ldr	r3, [r7, #28]
   292bc:	429a      	cmp	r2, r3
   292be:	d819      	bhi.n	292f4 <long_division+0xc6>
   292c0:	687a      	ldr	r2, [r7, #4]
   292c2:	69fb      	ldr	r3, [r7, #28]
   292c4:	429a      	cmp	r2, r3
   292c6:	d103      	bne.n	292d0 <long_division+0xa2>
   292c8:	683a      	ldr	r2, [r7, #0]
   292ca:	69bb      	ldr	r3, [r7, #24]
   292cc:	429a      	cmp	r2, r3
   292ce:	d811      	bhi.n	292f4 <long_division+0xc6>
			r = r - d;
   292d0:	69b9      	ldr	r1, [r7, #24]
   292d2:	69fa      	ldr	r2, [r7, #28]
   292d4:	683b      	ldr	r3, [r7, #0]
   292d6:	687c      	ldr	r4, [r7, #4]
   292d8:	1ac9      	subs	r1, r1, r3
   292da:	41a2      	sbcs	r2, r4
   292dc:	000b      	movs	r3, r1
   292de:	0014      	movs	r4, r2
   292e0:	61bb      	str	r3, [r7, #24]
   292e2:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   292e4:	6a3a      	ldr	r2, [r7, #32]
   292e6:	693b      	ldr	r3, [r7, #16]
   292e8:	4313      	orrs	r3, r2
   292ea:	623b      	str	r3, [r7, #32]
   292ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   292ee:	697b      	ldr	r3, [r7, #20]
   292f0:	4313      	orrs	r3, r2
   292f2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   292f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   292f6:	3b01      	subs	r3, #1
   292f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   292fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   292fc:	2b00      	cmp	r3, #0
   292fe:	daa8      	bge.n	29252 <long_division+0x24>
		}
	}

	return q;
   29300:	6a3b      	ldr	r3, [r7, #32]
   29302:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   29304:	0018      	movs	r0, r3
   29306:	0021      	movs	r1, r4
   29308:	46bd      	mov	sp, r7
   2930a:	b00d      	add	sp, #52	; 0x34
   2930c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002930e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   2930e:	b580      	push	{r7, lr}
   29310:	b086      	sub	sp, #24
   29312:	af00      	add	r7, sp, #0
   29314:	60f8      	str	r0, [r7, #12]
   29316:	60b9      	str	r1, [r7, #8]
   29318:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   2931a:	2316      	movs	r3, #22
   2931c:	18fb      	adds	r3, r7, r3
   2931e:	2200      	movs	r2, #0
   29320:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   29322:	68bb      	ldr	r3, [r7, #8]
   29324:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   29326:	68bb      	ldr	r3, [r7, #8]
   29328:	085a      	lsrs	r2, r3, #1
   2932a:	68fb      	ldr	r3, [r7, #12]
   2932c:	429a      	cmp	r2, r3
   2932e:	d201      	bcs.n	29334 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29330:	2340      	movs	r3, #64	; 0x40
   29332:	e026      	b.n	29382 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   29334:	68bb      	ldr	r3, [r7, #8]
   29336:	085b      	lsrs	r3, r3, #1
   29338:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   2933a:	e00a      	b.n	29352 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   2933c:	693a      	ldr	r2, [r7, #16]
   2933e:	68fb      	ldr	r3, [r7, #12]
   29340:	1ad3      	subs	r3, r2, r3
   29342:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   29344:	2316      	movs	r3, #22
   29346:	18fb      	adds	r3, r7, r3
   29348:	881a      	ldrh	r2, [r3, #0]
   2934a:	2316      	movs	r3, #22
   2934c:	18fb      	adds	r3, r7, r3
   2934e:	3201      	adds	r2, #1
   29350:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   29352:	693a      	ldr	r2, [r7, #16]
   29354:	68fb      	ldr	r3, [r7, #12]
   29356:	429a      	cmp	r2, r3
   29358:	d2f0      	bcs.n	2933c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   2935a:	2316      	movs	r3, #22
   2935c:	18fb      	adds	r3, r7, r3
   2935e:	2216      	movs	r2, #22
   29360:	18ba      	adds	r2, r7, r2
   29362:	8812      	ldrh	r2, [r2, #0]
   29364:	3a01      	subs	r2, #1
   29366:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   29368:	2316      	movs	r3, #22
   2936a:	18fb      	adds	r3, r7, r3
   2936c:	881b      	ldrh	r3, [r3, #0]
   2936e:	2bff      	cmp	r3, #255	; 0xff
   29370:	d901      	bls.n	29376 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29372:	2340      	movs	r3, #64	; 0x40
   29374:	e005      	b.n	29382 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   29376:	687b      	ldr	r3, [r7, #4]
   29378:	2216      	movs	r2, #22
   2937a:	18ba      	adds	r2, r7, r2
   2937c:	8812      	ldrh	r2, [r2, #0]
   2937e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   29380:	2300      	movs	r3, #0
	}
}
   29382:	0018      	movs	r0, r3
   29384:	46bd      	mov	sp, r7
   29386:	b006      	add	sp, #24
   29388:	bd80      	pop	{r7, pc}
	...

0002938c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   2938c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2938e:	b0a1      	sub	sp, #132	; 0x84
   29390:	af00      	add	r7, sp, #0
   29392:	64f8      	str	r0, [r7, #76]	; 0x4c
   29394:	64b9      	str	r1, [r7, #72]	; 0x48
   29396:	647a      	str	r2, [r7, #68]	; 0x44
   29398:	2243      	movs	r2, #67	; 0x43
   2939a:	18ba      	adds	r2, r7, r2
   2939c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   2939e:	2300      	movs	r3, #0
   293a0:	2400      	movs	r4, #0
   293a2:	673b      	str	r3, [r7, #112]	; 0x70
   293a4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   293a6:	2300      	movs	r3, #0
   293a8:	2400      	movs	r4, #0
   293aa:	66bb      	str	r3, [r7, #104]	; 0x68
   293ac:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   293ae:	2300      	movs	r3, #0
   293b0:	2400      	movs	r4, #0
   293b2:	67bb      	str	r3, [r7, #120]	; 0x78
   293b4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   293b6:	2300      	movs	r3, #0
   293b8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   293ba:	2358      	movs	r3, #88	; 0x58
   293bc:	2240      	movs	r2, #64	; 0x40
   293be:	4694      	mov	ip, r2
   293c0:	44bc      	add	ip, r7
   293c2:	4463      	add	r3, ip
   293c4:	781a      	ldrb	r2, [r3, #0]
   293c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   293c8:	435a      	muls	r2, r3
   293ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   293cc:	429a      	cmp	r2, r3
   293ce:	d901      	bls.n	293d4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   293d0:	2340      	movs	r3, #64	; 0x40
   293d2:	e0b3      	b.n	2953c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   293d4:	2343      	movs	r3, #67	; 0x43
   293d6:	18fb      	adds	r3, r7, r3
   293d8:	781b      	ldrb	r3, [r3, #0]
   293da:	2b00      	cmp	r3, #0
   293dc:	d13d      	bne.n	2945a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   293de:	2358      	movs	r3, #88	; 0x58
   293e0:	2240      	movs	r2, #64	; 0x40
   293e2:	4694      	mov	ip, r2
   293e4:	44bc      	add	ip, r7
   293e6:	4463      	add	r3, ip
   293e8:	781b      	ldrb	r3, [r3, #0]
   293ea:	b2db      	uxtb	r3, r3
   293ec:	613b      	str	r3, [r7, #16]
   293ee:	2300      	movs	r3, #0
   293f0:	617b      	str	r3, [r7, #20]
   293f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   293f4:	60bb      	str	r3, [r7, #8]
   293f6:	2300      	movs	r3, #0
   293f8:	60fb      	str	r3, [r7, #12]
   293fa:	4c52      	ldr	r4, [pc, #328]	; (29544 <_sercom_get_async_baud_val+0x1b8>)
   293fc:	68ba      	ldr	r2, [r7, #8]
   293fe:	68fb      	ldr	r3, [r7, #12]
   29400:	6938      	ldr	r0, [r7, #16]
   29402:	6979      	ldr	r1, [r7, #20]
   29404:	47a0      	blx	r4
   29406:	0003      	movs	r3, r0
   29408:	000c      	movs	r4, r1
   2940a:	001b      	movs	r3, r3
   2940c:	65fb      	str	r3, [r7, #92]	; 0x5c
   2940e:	2300      	movs	r3, #0
   29410:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   29412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29414:	603b      	str	r3, [r7, #0]
   29416:	2300      	movs	r3, #0
   29418:	607b      	str	r3, [r7, #4]
   2941a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   2941c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2941e:	683a      	ldr	r2, [r7, #0]
   29420:	687b      	ldr	r3, [r7, #4]
   29422:	4c49      	ldr	r4, [pc, #292]	; (29548 <_sercom_get_async_baud_val+0x1bc>)
   29424:	47a0      	blx	r4
   29426:	0003      	movs	r3, r0
   29428:	000c      	movs	r4, r1
   2942a:	673b      	str	r3, [r7, #112]	; 0x70
   2942c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   2942e:	2100      	movs	r1, #0
   29430:	2201      	movs	r2, #1
   29432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   29434:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   29436:	1ac9      	subs	r1, r1, r3
   29438:	41a2      	sbcs	r2, r4
   2943a:	000b      	movs	r3, r1
   2943c:	0014      	movs	r4, r2
   2943e:	66bb      	str	r3, [r7, #104]	; 0x68
   29440:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   29442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   29444:	0c1b      	lsrs	r3, r3, #16
   29446:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   29448:	0416      	lsls	r6, r2, #16
   2944a:	431e      	orrs	r6, r3
   2944c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2944e:	041d      	lsls	r5, r3, #16
   29450:	0033      	movs	r3, r6
   29452:	67bb      	str	r3, [r7, #120]	; 0x78
   29454:	2300      	movs	r3, #0
   29456:	67fb      	str	r3, [r7, #124]	; 0x7c
   29458:	e06a      	b.n	29530 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   2945a:	2343      	movs	r3, #67	; 0x43
   2945c:	18fb      	adds	r3, r7, r3
   2945e:	781b      	ldrb	r3, [r3, #0]
   29460:	2b01      	cmp	r3, #1
   29462:	d165      	bne.n	29530 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   29464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29466:	633b      	str	r3, [r7, #48]	; 0x30
   29468:	2300      	movs	r3, #0
   2946a:	637b      	str	r3, [r7, #52]	; 0x34
   2946c:	2358      	movs	r3, #88	; 0x58
   2946e:	2240      	movs	r2, #64	; 0x40
   29470:	4694      	mov	ip, r2
   29472:	44bc      	add	ip, r7
   29474:	4463      	add	r3, ip
   29476:	781b      	ldrb	r3, [r3, #0]
   29478:	b2db      	uxtb	r3, r3
   2947a:	62bb      	str	r3, [r7, #40]	; 0x28
   2947c:	2300      	movs	r3, #0
   2947e:	62fb      	str	r3, [r7, #44]	; 0x2c
   29480:	4c30      	ldr	r4, [pc, #192]	; (29544 <_sercom_get_async_baud_val+0x1b8>)
   29482:	6aba      	ldr	r2, [r7, #40]	; 0x28
   29484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29486:	6b38      	ldr	r0, [r7, #48]	; 0x30
   29488:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2948a:	47a0      	blx	r4
   2948c:	0003      	movs	r3, r0
   2948e:	000c      	movs	r4, r1
   29490:	65bb      	str	r3, [r7, #88]	; 0x58
   29492:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   29494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29496:	623b      	str	r3, [r7, #32]
   29498:	2300      	movs	r3, #0
   2949a:	627b      	str	r3, [r7, #36]	; 0x24
   2949c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2949e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   294a0:	001a      	movs	r2, r3
   294a2:	0023      	movs	r3, r4
   294a4:	6a38      	ldr	r0, [r7, #32]
   294a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   294a8:	4c27      	ldr	r4, [pc, #156]	; (29548 <_sercom_get_async_baud_val+0x1bc>)
   294aa:	47a0      	blx	r4
   294ac:	0003      	movs	r3, r0
   294ae:	000c      	movs	r4, r1
   294b0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   294b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   294b4:	2380      	movs	r3, #128	; 0x80
   294b6:	019b      	lsls	r3, r3, #6
   294b8:	429a      	cmp	r2, r3
   294ba:	d901      	bls.n	294c0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   294bc:	2340      	movs	r3, #64	; 0x40
   294be:	e03d      	b.n	2953c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   294c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   294c2:	61bb      	str	r3, [r7, #24]
   294c4:	2300      	movs	r3, #0
   294c6:	61fb      	str	r3, [r7, #28]
   294c8:	69b9      	ldr	r1, [r7, #24]
   294ca:	69fa      	ldr	r2, [r7, #28]
   294cc:	000b      	movs	r3, r1
   294ce:	0f5b      	lsrs	r3, r3, #29
   294d0:	0010      	movs	r0, r2
   294d2:	00c0      	lsls	r0, r0, #3
   294d4:	63f8      	str	r0, [r7, #60]	; 0x3c
   294d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   294d8:	4318      	orrs	r0, r3
   294da:	63f8      	str	r0, [r7, #60]	; 0x3c
   294dc:	000b      	movs	r3, r1
   294de:	00db      	lsls	r3, r3, #3
   294e0:	63bb      	str	r3, [r7, #56]	; 0x38
   294e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   294e4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   294e6:	001a      	movs	r2, r3
   294e8:	0023      	movs	r3, r4
   294ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   294ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   294ee:	4c16      	ldr	r4, [pc, #88]	; (29548 <_sercom_get_async_baud_val+0x1bc>)
   294f0:	47a0      	blx	r4
   294f2:	0003      	movs	r3, r0
   294f4:	000c      	movs	r4, r1
   294f6:	65bb      	str	r3, [r7, #88]	; 0x58
   294f8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   294fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   294fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   294fe:	b2d9      	uxtb	r1, r3
   29500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29502:	b2db      	uxtb	r3, r3
   29504:	00db      	lsls	r3, r3, #3
   29506:	b2da      	uxtb	r2, r3
   29508:	2317      	movs	r3, #23
   2950a:	2040      	movs	r0, #64	; 0x40
   2950c:	4684      	mov	ip, r0
   2950e:	44bc      	add	ip, r7
   29510:	4463      	add	r3, ip
   29512:	1a8a      	subs	r2, r1, r2
   29514:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   29516:	2317      	movs	r3, #23
   29518:	2240      	movs	r2, #64	; 0x40
   2951a:	4694      	mov	ip, r2
   2951c:	44bc      	add	ip, r7
   2951e:	4463      	add	r3, ip
   29520:	781b      	ldrb	r3, [r3, #0]
   29522:	035b      	lsls	r3, r3, #13
   29524:	001a      	movs	r2, r3
   29526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29528:	4313      	orrs	r3, r2
   2952a:	67bb      	str	r3, [r7, #120]	; 0x78
   2952c:	2300      	movs	r3, #0
   2952e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   29530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   29532:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   29534:	b29a      	uxth	r2, r3
   29536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29538:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   2953a:	2300      	movs	r3, #0
}
   2953c:	0018      	movs	r0, r3
   2953e:	46bd      	mov	sp, r7
   29540:	b021      	add	sp, #132	; 0x84
   29542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29544:	00034f9d 	.word	0x00034f9d
   29548:	0002922f 	.word	0x0002922f

0002954c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   2954c:	b580      	push	{r7, lr}
   2954e:	b084      	sub	sp, #16
   29550:	af00      	add	r7, sp, #0
   29552:	0002      	movs	r2, r0
   29554:	1dfb      	adds	r3, r7, #7
   29556:	701a      	strb	r2, [r3, #0]
   29558:	1dbb      	adds	r3, r7, #6
   2955a:	1c0a      	adds	r2, r1, #0
   2955c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2955e:	4b1a      	ldr	r3, [pc, #104]	; (295c8 <sercom_set_gclk_generator+0x7c>)
   29560:	781b      	ldrb	r3, [r3, #0]
   29562:	2201      	movs	r2, #1
   29564:	4053      	eors	r3, r2
   29566:	b2db      	uxtb	r3, r3
   29568:	2b00      	cmp	r3, #0
   2956a:	d103      	bne.n	29574 <sercom_set_gclk_generator+0x28>
   2956c:	1dbb      	adds	r3, r7, #6
   2956e:	781b      	ldrb	r3, [r3, #0]
   29570:	2b00      	cmp	r3, #0
   29572:	d01b      	beq.n	295ac <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29574:	230c      	movs	r3, #12
   29576:	18fb      	adds	r3, r7, r3
   29578:	0018      	movs	r0, r3
   2957a:	4b14      	ldr	r3, [pc, #80]	; (295cc <sercom_set_gclk_generator+0x80>)
   2957c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   2957e:	230c      	movs	r3, #12
   29580:	18fb      	adds	r3, r7, r3
   29582:	1dfa      	adds	r2, r7, #7
   29584:	7812      	ldrb	r2, [r2, #0]
   29586:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   29588:	230c      	movs	r3, #12
   2958a:	18fb      	adds	r3, r7, r3
   2958c:	0019      	movs	r1, r3
   2958e:	2013      	movs	r0, #19
   29590:	4b0f      	ldr	r3, [pc, #60]	; (295d0 <sercom_set_gclk_generator+0x84>)
   29592:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   29594:	2013      	movs	r0, #19
   29596:	4b0f      	ldr	r3, [pc, #60]	; (295d4 <sercom_set_gclk_generator+0x88>)
   29598:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   2959a:	4b0b      	ldr	r3, [pc, #44]	; (295c8 <sercom_set_gclk_generator+0x7c>)
   2959c:	1dfa      	adds	r2, r7, #7
   2959e:	7812      	ldrb	r2, [r2, #0]
   295a0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   295a2:	4b09      	ldr	r3, [pc, #36]	; (295c8 <sercom_set_gclk_generator+0x7c>)
   295a4:	2201      	movs	r2, #1
   295a6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   295a8:	2300      	movs	r3, #0
   295aa:	e008      	b.n	295be <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   295ac:	4b06      	ldr	r3, [pc, #24]	; (295c8 <sercom_set_gclk_generator+0x7c>)
   295ae:	785b      	ldrb	r3, [r3, #1]
   295b0:	1dfa      	adds	r2, r7, #7
   295b2:	7812      	ldrb	r2, [r2, #0]
   295b4:	429a      	cmp	r2, r3
   295b6:	d101      	bne.n	295bc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   295b8:	2300      	movs	r3, #0
   295ba:	e000      	b.n	295be <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   295bc:	231d      	movs	r3, #29
}
   295be:	0018      	movs	r0, r3
   295c0:	46bd      	mov	sp, r7
   295c2:	b004      	add	sp, #16
   295c4:	bd80      	pop	{r7, pc}
   295c6:	46c0      	nop			; (mov r8, r8)
   295c8:	20004120 	.word	0x20004120
   295cc:	00029219 	.word	0x00029219
   295d0:	0002c081 	.word	0x0002c081
   295d4:	0002c0c5 	.word	0x0002c0c5

000295d8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   295d8:	b580      	push	{r7, lr}
   295da:	b082      	sub	sp, #8
   295dc:	af00      	add	r7, sp, #0
   295de:	6078      	str	r0, [r7, #4]
   295e0:	000a      	movs	r2, r1
   295e2:	1cfb      	adds	r3, r7, #3
   295e4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   295e6:	687b      	ldr	r3, [r7, #4]
   295e8:	4a4d      	ldr	r2, [pc, #308]	; (29720 <_sercom_get_default_pad+0x148>)
   295ea:	4293      	cmp	r3, r2
   295ec:	d03f      	beq.n	2966e <_sercom_get_default_pad+0x96>
   295ee:	4a4c      	ldr	r2, [pc, #304]	; (29720 <_sercom_get_default_pad+0x148>)
   295f0:	4293      	cmp	r3, r2
   295f2:	d806      	bhi.n	29602 <_sercom_get_default_pad+0x2a>
   295f4:	4a4b      	ldr	r2, [pc, #300]	; (29724 <_sercom_get_default_pad+0x14c>)
   295f6:	4293      	cmp	r3, r2
   295f8:	d00f      	beq.n	2961a <_sercom_get_default_pad+0x42>
   295fa:	4a4b      	ldr	r2, [pc, #300]	; (29728 <_sercom_get_default_pad+0x150>)
   295fc:	4293      	cmp	r3, r2
   295fe:	d021      	beq.n	29644 <_sercom_get_default_pad+0x6c>
   29600:	e089      	b.n	29716 <_sercom_get_default_pad+0x13e>
   29602:	4a4a      	ldr	r2, [pc, #296]	; (2972c <_sercom_get_default_pad+0x154>)
   29604:	4293      	cmp	r3, r2
   29606:	d100      	bne.n	2960a <_sercom_get_default_pad+0x32>
   29608:	e05b      	b.n	296c2 <_sercom_get_default_pad+0xea>
   2960a:	4a49      	ldr	r2, [pc, #292]	; (29730 <_sercom_get_default_pad+0x158>)
   2960c:	4293      	cmp	r3, r2
   2960e:	d100      	bne.n	29612 <_sercom_get_default_pad+0x3a>
   29610:	e06c      	b.n	296ec <_sercom_get_default_pad+0x114>
   29612:	4a48      	ldr	r2, [pc, #288]	; (29734 <_sercom_get_default_pad+0x15c>)
   29614:	4293      	cmp	r3, r2
   29616:	d03f      	beq.n	29698 <_sercom_get_default_pad+0xc0>
   29618:	e07d      	b.n	29716 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   2961a:	1cfb      	adds	r3, r7, #3
   2961c:	781b      	ldrb	r3, [r3, #0]
   2961e:	2b01      	cmp	r3, #1
   29620:	d00a      	beq.n	29638 <_sercom_get_default_pad+0x60>
   29622:	dc02      	bgt.n	2962a <_sercom_get_default_pad+0x52>
   29624:	2b00      	cmp	r3, #0
   29626:	d005      	beq.n	29634 <_sercom_get_default_pad+0x5c>
   29628:	e075      	b.n	29716 <_sercom_get_default_pad+0x13e>
   2962a:	2b02      	cmp	r3, #2
   2962c:	d006      	beq.n	2963c <_sercom_get_default_pad+0x64>
   2962e:	2b03      	cmp	r3, #3
   29630:	d006      	beq.n	29640 <_sercom_get_default_pad+0x68>
   29632:	e070      	b.n	29716 <_sercom_get_default_pad+0x13e>
   29634:	4b40      	ldr	r3, [pc, #256]	; (29738 <_sercom_get_default_pad+0x160>)
   29636:	e06f      	b.n	29718 <_sercom_get_default_pad+0x140>
   29638:	4b40      	ldr	r3, [pc, #256]	; (2973c <_sercom_get_default_pad+0x164>)
   2963a:	e06d      	b.n	29718 <_sercom_get_default_pad+0x140>
   2963c:	4b40      	ldr	r3, [pc, #256]	; (29740 <_sercom_get_default_pad+0x168>)
   2963e:	e06b      	b.n	29718 <_sercom_get_default_pad+0x140>
   29640:	4b40      	ldr	r3, [pc, #256]	; (29744 <_sercom_get_default_pad+0x16c>)
   29642:	e069      	b.n	29718 <_sercom_get_default_pad+0x140>
   29644:	1cfb      	adds	r3, r7, #3
   29646:	781b      	ldrb	r3, [r3, #0]
   29648:	2b01      	cmp	r3, #1
   2964a:	d00a      	beq.n	29662 <_sercom_get_default_pad+0x8a>
   2964c:	dc02      	bgt.n	29654 <_sercom_get_default_pad+0x7c>
   2964e:	2b00      	cmp	r3, #0
   29650:	d005      	beq.n	2965e <_sercom_get_default_pad+0x86>
   29652:	e060      	b.n	29716 <_sercom_get_default_pad+0x13e>
   29654:	2b02      	cmp	r3, #2
   29656:	d006      	beq.n	29666 <_sercom_get_default_pad+0x8e>
   29658:	2b03      	cmp	r3, #3
   2965a:	d006      	beq.n	2966a <_sercom_get_default_pad+0x92>
   2965c:	e05b      	b.n	29716 <_sercom_get_default_pad+0x13e>
   2965e:	2303      	movs	r3, #3
   29660:	e05a      	b.n	29718 <_sercom_get_default_pad+0x140>
   29662:	4b39      	ldr	r3, [pc, #228]	; (29748 <_sercom_get_default_pad+0x170>)
   29664:	e058      	b.n	29718 <_sercom_get_default_pad+0x140>
   29666:	4b39      	ldr	r3, [pc, #228]	; (2974c <_sercom_get_default_pad+0x174>)
   29668:	e056      	b.n	29718 <_sercom_get_default_pad+0x140>
   2966a:	4b39      	ldr	r3, [pc, #228]	; (29750 <_sercom_get_default_pad+0x178>)
   2966c:	e054      	b.n	29718 <_sercom_get_default_pad+0x140>
   2966e:	1cfb      	adds	r3, r7, #3
   29670:	781b      	ldrb	r3, [r3, #0]
   29672:	2b01      	cmp	r3, #1
   29674:	d00a      	beq.n	2968c <_sercom_get_default_pad+0xb4>
   29676:	dc02      	bgt.n	2967e <_sercom_get_default_pad+0xa6>
   29678:	2b00      	cmp	r3, #0
   2967a:	d005      	beq.n	29688 <_sercom_get_default_pad+0xb0>
   2967c:	e04b      	b.n	29716 <_sercom_get_default_pad+0x13e>
   2967e:	2b02      	cmp	r3, #2
   29680:	d006      	beq.n	29690 <_sercom_get_default_pad+0xb8>
   29682:	2b03      	cmp	r3, #3
   29684:	d006      	beq.n	29694 <_sercom_get_default_pad+0xbc>
   29686:	e046      	b.n	29716 <_sercom_get_default_pad+0x13e>
   29688:	4b32      	ldr	r3, [pc, #200]	; (29754 <_sercom_get_default_pad+0x17c>)
   2968a:	e045      	b.n	29718 <_sercom_get_default_pad+0x140>
   2968c:	4b32      	ldr	r3, [pc, #200]	; (29758 <_sercom_get_default_pad+0x180>)
   2968e:	e043      	b.n	29718 <_sercom_get_default_pad+0x140>
   29690:	4b32      	ldr	r3, [pc, #200]	; (2975c <_sercom_get_default_pad+0x184>)
   29692:	e041      	b.n	29718 <_sercom_get_default_pad+0x140>
   29694:	4b32      	ldr	r3, [pc, #200]	; (29760 <_sercom_get_default_pad+0x188>)
   29696:	e03f      	b.n	29718 <_sercom_get_default_pad+0x140>
   29698:	1cfb      	adds	r3, r7, #3
   2969a:	781b      	ldrb	r3, [r3, #0]
   2969c:	2b01      	cmp	r3, #1
   2969e:	d00a      	beq.n	296b6 <_sercom_get_default_pad+0xde>
   296a0:	dc02      	bgt.n	296a8 <_sercom_get_default_pad+0xd0>
   296a2:	2b00      	cmp	r3, #0
   296a4:	d005      	beq.n	296b2 <_sercom_get_default_pad+0xda>
   296a6:	e036      	b.n	29716 <_sercom_get_default_pad+0x13e>
   296a8:	2b02      	cmp	r3, #2
   296aa:	d006      	beq.n	296ba <_sercom_get_default_pad+0xe2>
   296ac:	2b03      	cmp	r3, #3
   296ae:	d006      	beq.n	296be <_sercom_get_default_pad+0xe6>
   296b0:	e031      	b.n	29716 <_sercom_get_default_pad+0x13e>
   296b2:	4b2c      	ldr	r3, [pc, #176]	; (29764 <_sercom_get_default_pad+0x18c>)
   296b4:	e030      	b.n	29718 <_sercom_get_default_pad+0x140>
   296b6:	4b2c      	ldr	r3, [pc, #176]	; (29768 <_sercom_get_default_pad+0x190>)
   296b8:	e02e      	b.n	29718 <_sercom_get_default_pad+0x140>
   296ba:	4b2c      	ldr	r3, [pc, #176]	; (2976c <_sercom_get_default_pad+0x194>)
   296bc:	e02c      	b.n	29718 <_sercom_get_default_pad+0x140>
   296be:	4b2c      	ldr	r3, [pc, #176]	; (29770 <_sercom_get_default_pad+0x198>)
   296c0:	e02a      	b.n	29718 <_sercom_get_default_pad+0x140>
   296c2:	1cfb      	adds	r3, r7, #3
   296c4:	781b      	ldrb	r3, [r3, #0]
   296c6:	2b01      	cmp	r3, #1
   296c8:	d00a      	beq.n	296e0 <_sercom_get_default_pad+0x108>
   296ca:	dc02      	bgt.n	296d2 <_sercom_get_default_pad+0xfa>
   296cc:	2b00      	cmp	r3, #0
   296ce:	d005      	beq.n	296dc <_sercom_get_default_pad+0x104>
   296d0:	e021      	b.n	29716 <_sercom_get_default_pad+0x13e>
   296d2:	2b02      	cmp	r3, #2
   296d4:	d006      	beq.n	296e4 <_sercom_get_default_pad+0x10c>
   296d6:	2b03      	cmp	r3, #3
   296d8:	d006      	beq.n	296e8 <_sercom_get_default_pad+0x110>
   296da:	e01c      	b.n	29716 <_sercom_get_default_pad+0x13e>
   296dc:	4b25      	ldr	r3, [pc, #148]	; (29774 <_sercom_get_default_pad+0x19c>)
   296de:	e01b      	b.n	29718 <_sercom_get_default_pad+0x140>
   296e0:	4b25      	ldr	r3, [pc, #148]	; (29778 <_sercom_get_default_pad+0x1a0>)
   296e2:	e019      	b.n	29718 <_sercom_get_default_pad+0x140>
   296e4:	4b25      	ldr	r3, [pc, #148]	; (2977c <_sercom_get_default_pad+0x1a4>)
   296e6:	e017      	b.n	29718 <_sercom_get_default_pad+0x140>
   296e8:	4b25      	ldr	r3, [pc, #148]	; (29780 <_sercom_get_default_pad+0x1a8>)
   296ea:	e015      	b.n	29718 <_sercom_get_default_pad+0x140>
   296ec:	1cfb      	adds	r3, r7, #3
   296ee:	781b      	ldrb	r3, [r3, #0]
   296f0:	2b01      	cmp	r3, #1
   296f2:	d00a      	beq.n	2970a <_sercom_get_default_pad+0x132>
   296f4:	dc02      	bgt.n	296fc <_sercom_get_default_pad+0x124>
   296f6:	2b00      	cmp	r3, #0
   296f8:	d005      	beq.n	29706 <_sercom_get_default_pad+0x12e>
   296fa:	e00c      	b.n	29716 <_sercom_get_default_pad+0x13e>
   296fc:	2b02      	cmp	r3, #2
   296fe:	d006      	beq.n	2970e <_sercom_get_default_pad+0x136>
   29700:	2b03      	cmp	r3, #3
   29702:	d006      	beq.n	29712 <_sercom_get_default_pad+0x13a>
   29704:	e007      	b.n	29716 <_sercom_get_default_pad+0x13e>
   29706:	4b1f      	ldr	r3, [pc, #124]	; (29784 <_sercom_get_default_pad+0x1ac>)
   29708:	e006      	b.n	29718 <_sercom_get_default_pad+0x140>
   2970a:	4b1f      	ldr	r3, [pc, #124]	; (29788 <_sercom_get_default_pad+0x1b0>)
   2970c:	e004      	b.n	29718 <_sercom_get_default_pad+0x140>
   2970e:	4b1f      	ldr	r3, [pc, #124]	; (2978c <_sercom_get_default_pad+0x1b4>)
   29710:	e002      	b.n	29718 <_sercom_get_default_pad+0x140>
   29712:	4b1f      	ldr	r3, [pc, #124]	; (29790 <_sercom_get_default_pad+0x1b8>)
   29714:	e000      	b.n	29718 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   29716:	2300      	movs	r3, #0
}
   29718:	0018      	movs	r0, r3
   2971a:	46bd      	mov	sp, r7
   2971c:	b002      	add	sp, #8
   2971e:	bd80      	pop	{r7, pc}
   29720:	42001000 	.word	0x42001000
   29724:	42000800 	.word	0x42000800
   29728:	42000c00 	.word	0x42000c00
   2972c:	42001800 	.word	0x42001800
   29730:	42001c00 	.word	0x42001c00
   29734:	42001400 	.word	0x42001400
   29738:	00040003 	.word	0x00040003
   2973c:	00050003 	.word	0x00050003
   29740:	00060003 	.word	0x00060003
   29744:	00070003 	.word	0x00070003
   29748:	00010003 	.word	0x00010003
   2974c:	001e0003 	.word	0x001e0003
   29750:	001f0003 	.word	0x001f0003
   29754:	00080003 	.word	0x00080003
   29758:	00090003 	.word	0x00090003
   2975c:	000a0003 	.word	0x000a0003
   29760:	000b0003 	.word	0x000b0003
   29764:	00100003 	.word	0x00100003
   29768:	00110003 	.word	0x00110003
   2976c:	00120003 	.word	0x00120003
   29770:	00130003 	.word	0x00130003
   29774:	000c0003 	.word	0x000c0003
   29778:	000d0003 	.word	0x000d0003
   2977c:	000e0003 	.word	0x000e0003
   29780:	000f0003 	.word	0x000f0003
   29784:	00160003 	.word	0x00160003
   29788:	00170003 	.word	0x00170003
   2978c:	00180003 	.word	0x00180003
   29790:	00190003 	.word	0x00190003

00029794 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   29794:	b590      	push	{r4, r7, lr}
   29796:	b08b      	sub	sp, #44	; 0x2c
   29798:	af00      	add	r7, sp, #0
   2979a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   2979c:	230c      	movs	r3, #12
   2979e:	18fb      	adds	r3, r7, r3
   297a0:	4a0f      	ldr	r2, [pc, #60]	; (297e0 <_sercom_get_sercom_inst_index+0x4c>)
   297a2:	ca13      	ldmia	r2!, {r0, r1, r4}
   297a4:	c313      	stmia	r3!, {r0, r1, r4}
   297a6:	ca13      	ldmia	r2!, {r0, r1, r4}
   297a8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   297aa:	2300      	movs	r3, #0
   297ac:	627b      	str	r3, [r7, #36]	; 0x24
   297ae:	e00e      	b.n	297ce <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   297b0:	230c      	movs	r3, #12
   297b2:	18fb      	adds	r3, r7, r3
   297b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   297b6:	0092      	lsls	r2, r2, #2
   297b8:	58d3      	ldr	r3, [r2, r3]
   297ba:	001a      	movs	r2, r3
   297bc:	687b      	ldr	r3, [r7, #4]
   297be:	429a      	cmp	r2, r3
   297c0:	d102      	bne.n	297c8 <_sercom_get_sercom_inst_index+0x34>
			return i;
   297c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   297c4:	b2db      	uxtb	r3, r3
   297c6:	e006      	b.n	297d6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   297c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   297ca:	3301      	adds	r3, #1
   297cc:	627b      	str	r3, [r7, #36]	; 0x24
   297ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   297d0:	2b05      	cmp	r3, #5
   297d2:	d9ed      	bls.n	297b0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   297d4:	2300      	movs	r3, #0
}
   297d6:	0018      	movs	r0, r3
   297d8:	46bd      	mov	sp, r7
   297da:	b00b      	add	sp, #44	; 0x2c
   297dc:	bd90      	pop	{r4, r7, pc}
   297de:	46c0      	nop			; (mov r8, r8)
   297e0:	0003c588 	.word	0x0003c588

000297e4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   297e4:	b580      	push	{r7, lr}
   297e6:	b082      	sub	sp, #8
   297e8:	af00      	add	r7, sp, #0
   297ea:	0002      	movs	r2, r0
   297ec:	1dfb      	adds	r3, r7, #7
   297ee:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   297f0:	46c0      	nop			; (mov r8, r8)
   297f2:	46bd      	mov	sp, r7
   297f4:	b002      	add	sp, #8
   297f6:	bd80      	pop	{r7, pc}

000297f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   297f8:	b580      	push	{r7, lr}
   297fa:	b084      	sub	sp, #16
   297fc:	af00      	add	r7, sp, #0
   297fe:	0002      	movs	r2, r0
   29800:	6039      	str	r1, [r7, #0]
   29802:	1dfb      	adds	r3, r7, #7
   29804:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   29806:	4b13      	ldr	r3, [pc, #76]	; (29854 <_sercom_set_handler+0x5c>)
   29808:	781b      	ldrb	r3, [r3, #0]
   2980a:	2201      	movs	r2, #1
   2980c:	4053      	eors	r3, r2
   2980e:	b2db      	uxtb	r3, r3
   29810:	2b00      	cmp	r3, #0
   29812:	d015      	beq.n	29840 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29814:	2300      	movs	r3, #0
   29816:	60fb      	str	r3, [r7, #12]
   29818:	e00c      	b.n	29834 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   2981a:	4b0f      	ldr	r3, [pc, #60]	; (29858 <_sercom_set_handler+0x60>)
   2981c:	68fa      	ldr	r2, [r7, #12]
   2981e:	0092      	lsls	r2, r2, #2
   29820:	490e      	ldr	r1, [pc, #56]	; (2985c <_sercom_set_handler+0x64>)
   29822:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   29824:	4b0e      	ldr	r3, [pc, #56]	; (29860 <_sercom_set_handler+0x68>)
   29826:	68fa      	ldr	r2, [r7, #12]
   29828:	0092      	lsls	r2, r2, #2
   2982a:	2100      	movs	r1, #0
   2982c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2982e:	68fb      	ldr	r3, [r7, #12]
   29830:	3301      	adds	r3, #1
   29832:	60fb      	str	r3, [r7, #12]
   29834:	68fb      	ldr	r3, [r7, #12]
   29836:	2b05      	cmp	r3, #5
   29838:	d9ef      	bls.n	2981a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   2983a:	4b06      	ldr	r3, [pc, #24]	; (29854 <_sercom_set_handler+0x5c>)
   2983c:	2201      	movs	r2, #1
   2983e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   29840:	1dfb      	adds	r3, r7, #7
   29842:	781a      	ldrb	r2, [r3, #0]
   29844:	4b04      	ldr	r3, [pc, #16]	; (29858 <_sercom_set_handler+0x60>)
   29846:	0092      	lsls	r2, r2, #2
   29848:	6839      	ldr	r1, [r7, #0]
   2984a:	50d1      	str	r1, [r2, r3]
}
   2984c:	46c0      	nop			; (mov r8, r8)
   2984e:	46bd      	mov	sp, r7
   29850:	b004      	add	sp, #16
   29852:	bd80      	pop	{r7, pc}
   29854:	20004122 	.word	0x20004122
   29858:	20004124 	.word	0x20004124
   2985c:	000297e5 	.word	0x000297e5
   29860:	20005a64 	.word	0x20005a64

00029864 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   29864:	b590      	push	{r4, r7, lr}
   29866:	b085      	sub	sp, #20
   29868:	af00      	add	r7, sp, #0
   2986a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   2986c:	2308      	movs	r3, #8
   2986e:	18fb      	adds	r3, r7, r3
   29870:	4a0b      	ldr	r2, [pc, #44]	; (298a0 <_sercom_get_interrupt_vector+0x3c>)
   29872:	6811      	ldr	r1, [r2, #0]
   29874:	6019      	str	r1, [r3, #0]
   29876:	8892      	ldrh	r2, [r2, #4]
   29878:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   2987a:	230f      	movs	r3, #15
   2987c:	18fc      	adds	r4, r7, r3
   2987e:	687b      	ldr	r3, [r7, #4]
   29880:	0018      	movs	r0, r3
   29882:	4b08      	ldr	r3, [pc, #32]	; (298a4 <_sercom_get_interrupt_vector+0x40>)
   29884:	4798      	blx	r3
   29886:	0003      	movs	r3, r0
   29888:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   2988a:	230f      	movs	r3, #15
   2988c:	18fb      	adds	r3, r7, r3
   2988e:	781b      	ldrb	r3, [r3, #0]
   29890:	2208      	movs	r2, #8
   29892:	18ba      	adds	r2, r7, r2
   29894:	5cd3      	ldrb	r3, [r2, r3]
   29896:	b25b      	sxtb	r3, r3
}
   29898:	0018      	movs	r0, r3
   2989a:	46bd      	mov	sp, r7
   2989c:	b005      	add	sp, #20
   2989e:	bd90      	pop	{r4, r7, pc}
   298a0:	0003c5a0 	.word	0x0003c5a0
   298a4:	00029795 	.word	0x00029795

000298a8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   298a8:	b580      	push	{r7, lr}
   298aa:	af00      	add	r7, sp, #0
   298ac:	4b03      	ldr	r3, [pc, #12]	; (298bc <SERCOM0_Handler+0x14>)
   298ae:	681b      	ldr	r3, [r3, #0]
   298b0:	2000      	movs	r0, #0
   298b2:	4798      	blx	r3
   298b4:	46c0      	nop			; (mov r8, r8)
   298b6:	46bd      	mov	sp, r7
   298b8:	bd80      	pop	{r7, pc}
   298ba:	46c0      	nop			; (mov r8, r8)
   298bc:	20004124 	.word	0x20004124

000298c0 <SERCOM1_Handler>:
   298c0:	b580      	push	{r7, lr}
   298c2:	af00      	add	r7, sp, #0
   298c4:	4b03      	ldr	r3, [pc, #12]	; (298d4 <SERCOM1_Handler+0x14>)
   298c6:	685b      	ldr	r3, [r3, #4]
   298c8:	2001      	movs	r0, #1
   298ca:	4798      	blx	r3
   298cc:	46c0      	nop			; (mov r8, r8)
   298ce:	46bd      	mov	sp, r7
   298d0:	bd80      	pop	{r7, pc}
   298d2:	46c0      	nop			; (mov r8, r8)
   298d4:	20004124 	.word	0x20004124

000298d8 <SERCOM2_Handler>:
   298d8:	b580      	push	{r7, lr}
   298da:	af00      	add	r7, sp, #0
   298dc:	4b03      	ldr	r3, [pc, #12]	; (298ec <SERCOM2_Handler+0x14>)
   298de:	689b      	ldr	r3, [r3, #8]
   298e0:	2002      	movs	r0, #2
   298e2:	4798      	blx	r3
   298e4:	46c0      	nop			; (mov r8, r8)
   298e6:	46bd      	mov	sp, r7
   298e8:	bd80      	pop	{r7, pc}
   298ea:	46c0      	nop			; (mov r8, r8)
   298ec:	20004124 	.word	0x20004124

000298f0 <SERCOM3_Handler>:
   298f0:	b580      	push	{r7, lr}
   298f2:	af00      	add	r7, sp, #0
   298f4:	4b03      	ldr	r3, [pc, #12]	; (29904 <SERCOM3_Handler+0x14>)
   298f6:	68db      	ldr	r3, [r3, #12]
   298f8:	2003      	movs	r0, #3
   298fa:	4798      	blx	r3
   298fc:	46c0      	nop			; (mov r8, r8)
   298fe:	46bd      	mov	sp, r7
   29900:	bd80      	pop	{r7, pc}
   29902:	46c0      	nop			; (mov r8, r8)
   29904:	20004124 	.word	0x20004124

00029908 <SERCOM4_Handler>:
   29908:	b580      	push	{r7, lr}
   2990a:	af00      	add	r7, sp, #0
   2990c:	4b03      	ldr	r3, [pc, #12]	; (2991c <SERCOM4_Handler+0x14>)
   2990e:	691b      	ldr	r3, [r3, #16]
   29910:	2004      	movs	r0, #4
   29912:	4798      	blx	r3
   29914:	46c0      	nop			; (mov r8, r8)
   29916:	46bd      	mov	sp, r7
   29918:	bd80      	pop	{r7, pc}
   2991a:	46c0      	nop			; (mov r8, r8)
   2991c:	20004124 	.word	0x20004124

00029920 <SERCOM5_Handler>:
   29920:	b580      	push	{r7, lr}
   29922:	af00      	add	r7, sp, #0
   29924:	4b03      	ldr	r3, [pc, #12]	; (29934 <SERCOM5_Handler+0x14>)
   29926:	695b      	ldr	r3, [r3, #20]
   29928:	2005      	movs	r0, #5
   2992a:	4798      	blx	r3
   2992c:	46c0      	nop			; (mov r8, r8)
   2992e:	46bd      	mov	sp, r7
   29930:	bd80      	pop	{r7, pc}
   29932:	46c0      	nop			; (mov r8, r8)
   29934:	20004124 	.word	0x20004124

00029938 <system_pinmux_get_config_defaults>:
{
   29938:	b580      	push	{r7, lr}
   2993a:	b082      	sub	sp, #8
   2993c:	af00      	add	r7, sp, #0
   2993e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29940:	687b      	ldr	r3, [r7, #4]
   29942:	2280      	movs	r2, #128	; 0x80
   29944:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29946:	687b      	ldr	r3, [r7, #4]
   29948:	2200      	movs	r2, #0
   2994a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2994c:	687b      	ldr	r3, [r7, #4]
   2994e:	2201      	movs	r2, #1
   29950:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29952:	687b      	ldr	r3, [r7, #4]
   29954:	2200      	movs	r2, #0
   29956:	70da      	strb	r2, [r3, #3]
}
   29958:	46c0      	nop			; (mov r8, r8)
   2995a:	46bd      	mov	sp, r7
   2995c:	b002      	add	sp, #8
   2995e:	bd80      	pop	{r7, pc}

00029960 <system_pinmux_get_group_from_gpio_pin>:
{
   29960:	b580      	push	{r7, lr}
   29962:	b084      	sub	sp, #16
   29964:	af00      	add	r7, sp, #0
   29966:	0002      	movs	r2, r0
   29968:	1dfb      	adds	r3, r7, #7
   2996a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2996c:	230f      	movs	r3, #15
   2996e:	18fb      	adds	r3, r7, r3
   29970:	1dfa      	adds	r2, r7, #7
   29972:	7812      	ldrb	r2, [r2, #0]
   29974:	09d2      	lsrs	r2, r2, #7
   29976:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29978:	230e      	movs	r3, #14
   2997a:	18fb      	adds	r3, r7, r3
   2997c:	1dfa      	adds	r2, r7, #7
   2997e:	7812      	ldrb	r2, [r2, #0]
   29980:	0952      	lsrs	r2, r2, #5
   29982:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29984:	4b0d      	ldr	r3, [pc, #52]	; (299bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29986:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29988:	230f      	movs	r3, #15
   2998a:	18fb      	adds	r3, r7, r3
   2998c:	781b      	ldrb	r3, [r3, #0]
   2998e:	2b00      	cmp	r3, #0
   29990:	d10f      	bne.n	299b2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29992:	230f      	movs	r3, #15
   29994:	18fb      	adds	r3, r7, r3
   29996:	781b      	ldrb	r3, [r3, #0]
   29998:	009b      	lsls	r3, r3, #2
   2999a:	2210      	movs	r2, #16
   2999c:	4694      	mov	ip, r2
   2999e:	44bc      	add	ip, r7
   299a0:	4463      	add	r3, ip
   299a2:	3b08      	subs	r3, #8
   299a4:	681a      	ldr	r2, [r3, #0]
   299a6:	230e      	movs	r3, #14
   299a8:	18fb      	adds	r3, r7, r3
   299aa:	781b      	ldrb	r3, [r3, #0]
   299ac:	01db      	lsls	r3, r3, #7
   299ae:	18d3      	adds	r3, r2, r3
   299b0:	e000      	b.n	299b4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   299b2:	2300      	movs	r3, #0
}
   299b4:	0018      	movs	r0, r3
   299b6:	46bd      	mov	sp, r7
   299b8:	b004      	add	sp, #16
   299ba:	bd80      	pop	{r7, pc}
   299bc:	41004400 	.word	0x41004400

000299c0 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   299c0:	b580      	push	{r7, lr}
   299c2:	b086      	sub	sp, #24
   299c4:	af00      	add	r7, sp, #0
   299c6:	0002      	movs	r2, r0
   299c8:	1dfb      	adds	r3, r7, #7
   299ca:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   299cc:	1dfb      	adds	r3, r7, #7
   299ce:	781b      	ldrb	r3, [r3, #0]
   299d0:	0018      	movs	r0, r3
   299d2:	4b19      	ldr	r3, [pc, #100]	; (29a38 <system_pinmux_pin_get_mux_position+0x78>)
   299d4:	4798      	blx	r3
   299d6:	0003      	movs	r3, r0
   299d8:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   299da:	1dfb      	adds	r3, r7, #7
   299dc:	781b      	ldrb	r3, [r3, #0]
   299de:	221f      	movs	r2, #31
   299e0:	4013      	ands	r3, r2
   299e2:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   299e4:	697a      	ldr	r2, [r7, #20]
   299e6:	2140      	movs	r1, #64	; 0x40
   299e8:	693b      	ldr	r3, [r7, #16]
   299ea:	18d3      	adds	r3, r2, r3
   299ec:	185b      	adds	r3, r3, r1
   299ee:	781b      	ldrb	r3, [r3, #0]
   299f0:	b2db      	uxtb	r3, r3
   299f2:	001a      	movs	r2, r3
   299f4:	2301      	movs	r3, #1
   299f6:	4013      	ands	r3, r2
   299f8:	d101      	bne.n	299fe <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   299fa:	2380      	movs	r3, #128	; 0x80
   299fc:	e018      	b.n	29a30 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   299fe:	693b      	ldr	r3, [r7, #16]
   29a00:	085b      	lsrs	r3, r3, #1
   29a02:	697a      	ldr	r2, [r7, #20]
   29a04:	2130      	movs	r1, #48	; 0x30
   29a06:	18d3      	adds	r3, r2, r3
   29a08:	185b      	adds	r3, r3, r1
   29a0a:	781b      	ldrb	r3, [r3, #0]
   29a0c:	b2db      	uxtb	r3, r3
   29a0e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   29a10:	693b      	ldr	r3, [r7, #16]
   29a12:	2201      	movs	r2, #1
   29a14:	4013      	ands	r3, r2
   29a16:	d006      	beq.n	29a26 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   29a18:	68fb      	ldr	r3, [r7, #12]
   29a1a:	091b      	lsrs	r3, r3, #4
   29a1c:	b2db      	uxtb	r3, r3
   29a1e:	220f      	movs	r2, #15
   29a20:	4013      	ands	r3, r2
   29a22:	b2db      	uxtb	r3, r3
   29a24:	e004      	b.n	29a30 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   29a26:	68fb      	ldr	r3, [r7, #12]
   29a28:	b2db      	uxtb	r3, r3
   29a2a:	220f      	movs	r2, #15
   29a2c:	4013      	ands	r3, r2
   29a2e:	b2db      	uxtb	r3, r3
	}
}
   29a30:	0018      	movs	r0, r3
   29a32:	46bd      	mov	sp, r7
   29a34:	b006      	add	sp, #24
   29a36:	bd80      	pop	{r7, pc}
   29a38:	00029961 	.word	0x00029961

00029a3c <port_get_group_from_gpio_pin>:
{
   29a3c:	b580      	push	{r7, lr}
   29a3e:	b082      	sub	sp, #8
   29a40:	af00      	add	r7, sp, #0
   29a42:	0002      	movs	r2, r0
   29a44:	1dfb      	adds	r3, r7, #7
   29a46:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29a48:	1dfb      	adds	r3, r7, #7
   29a4a:	781b      	ldrb	r3, [r3, #0]
   29a4c:	0018      	movs	r0, r3
   29a4e:	4b03      	ldr	r3, [pc, #12]	; (29a5c <port_get_group_from_gpio_pin+0x20>)
   29a50:	4798      	blx	r3
   29a52:	0003      	movs	r3, r0
}
   29a54:	0018      	movs	r0, r3
   29a56:	46bd      	mov	sp, r7
   29a58:	b002      	add	sp, #8
   29a5a:	bd80      	pop	{r7, pc}
   29a5c:	00029961 	.word	0x00029961

00029a60 <port_pin_set_output_level>:
{
   29a60:	b580      	push	{r7, lr}
   29a62:	b084      	sub	sp, #16
   29a64:	af00      	add	r7, sp, #0
   29a66:	0002      	movs	r2, r0
   29a68:	1dfb      	adds	r3, r7, #7
   29a6a:	701a      	strb	r2, [r3, #0]
   29a6c:	1dbb      	adds	r3, r7, #6
   29a6e:	1c0a      	adds	r2, r1, #0
   29a70:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   29a72:	1dfb      	adds	r3, r7, #7
   29a74:	781b      	ldrb	r3, [r3, #0]
   29a76:	0018      	movs	r0, r3
   29a78:	4b0d      	ldr	r3, [pc, #52]	; (29ab0 <port_pin_set_output_level+0x50>)
   29a7a:	4798      	blx	r3
   29a7c:	0003      	movs	r3, r0
   29a7e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   29a80:	1dfb      	adds	r3, r7, #7
   29a82:	781b      	ldrb	r3, [r3, #0]
   29a84:	221f      	movs	r2, #31
   29a86:	4013      	ands	r3, r2
   29a88:	2201      	movs	r2, #1
   29a8a:	409a      	lsls	r2, r3
   29a8c:	0013      	movs	r3, r2
   29a8e:	60bb      	str	r3, [r7, #8]
	if (level) {
   29a90:	1dbb      	adds	r3, r7, #6
   29a92:	781b      	ldrb	r3, [r3, #0]
   29a94:	2b00      	cmp	r3, #0
   29a96:	d003      	beq.n	29aa0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   29a98:	68fb      	ldr	r3, [r7, #12]
   29a9a:	68ba      	ldr	r2, [r7, #8]
   29a9c:	619a      	str	r2, [r3, #24]
}
   29a9e:	e002      	b.n	29aa6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   29aa0:	68fb      	ldr	r3, [r7, #12]
   29aa2:	68ba      	ldr	r2, [r7, #8]
   29aa4:	615a      	str	r2, [r3, #20]
}
   29aa6:	46c0      	nop			; (mov r8, r8)
   29aa8:	46bd      	mov	sp, r7
   29aaa:	b004      	add	sp, #16
   29aac:	bd80      	pop	{r7, pc}
   29aae:	46c0      	nop			; (mov r8, r8)
   29ab0:	00029a3d 	.word	0x00029a3d

00029ab4 <system_gclk_chan_get_config_defaults>:
{
   29ab4:	b580      	push	{r7, lr}
   29ab6:	b082      	sub	sp, #8
   29ab8:	af00      	add	r7, sp, #0
   29aba:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29abc:	687b      	ldr	r3, [r7, #4]
   29abe:	2200      	movs	r2, #0
   29ac0:	701a      	strb	r2, [r3, #0]
}
   29ac2:	46c0      	nop			; (mov r8, r8)
   29ac4:	46bd      	mov	sp, r7
   29ac6:	b002      	add	sp, #8
   29ac8:	bd80      	pop	{r7, pc}
	...

00029acc <system_apb_clock_set_mask>:
{
   29acc:	b580      	push	{r7, lr}
   29ace:	b082      	sub	sp, #8
   29ad0:	af00      	add	r7, sp, #0
   29ad2:	0002      	movs	r2, r0
   29ad4:	6039      	str	r1, [r7, #0]
   29ad6:	1dfb      	adds	r3, r7, #7
   29ad8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29ada:	1dfb      	adds	r3, r7, #7
   29adc:	781b      	ldrb	r3, [r3, #0]
   29ade:	2b01      	cmp	r3, #1
   29ae0:	d00a      	beq.n	29af8 <system_apb_clock_set_mask+0x2c>
   29ae2:	2b02      	cmp	r3, #2
   29ae4:	d00f      	beq.n	29b06 <system_apb_clock_set_mask+0x3a>
   29ae6:	2b00      	cmp	r3, #0
   29ae8:	d114      	bne.n	29b14 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29aea:	4b0e      	ldr	r3, [pc, #56]	; (29b24 <system_apb_clock_set_mask+0x58>)
   29aec:	4a0d      	ldr	r2, [pc, #52]	; (29b24 <system_apb_clock_set_mask+0x58>)
   29aee:	6991      	ldr	r1, [r2, #24]
   29af0:	683a      	ldr	r2, [r7, #0]
   29af2:	430a      	orrs	r2, r1
   29af4:	619a      	str	r2, [r3, #24]
			break;
   29af6:	e00f      	b.n	29b18 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29af8:	4b0a      	ldr	r3, [pc, #40]	; (29b24 <system_apb_clock_set_mask+0x58>)
   29afa:	4a0a      	ldr	r2, [pc, #40]	; (29b24 <system_apb_clock_set_mask+0x58>)
   29afc:	69d1      	ldr	r1, [r2, #28]
   29afe:	683a      	ldr	r2, [r7, #0]
   29b00:	430a      	orrs	r2, r1
   29b02:	61da      	str	r2, [r3, #28]
			break;
   29b04:	e008      	b.n	29b18 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29b06:	4b07      	ldr	r3, [pc, #28]	; (29b24 <system_apb_clock_set_mask+0x58>)
   29b08:	4a06      	ldr	r2, [pc, #24]	; (29b24 <system_apb_clock_set_mask+0x58>)
   29b0a:	6a11      	ldr	r1, [r2, #32]
   29b0c:	683a      	ldr	r2, [r7, #0]
   29b0e:	430a      	orrs	r2, r1
   29b10:	621a      	str	r2, [r3, #32]
			break;
   29b12:	e001      	b.n	29b18 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29b14:	2317      	movs	r3, #23
   29b16:	e000      	b.n	29b1a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29b18:	2300      	movs	r3, #0
}
   29b1a:	0018      	movs	r0, r3
   29b1c:	46bd      	mov	sp, r7
   29b1e:	b002      	add	sp, #8
   29b20:	bd80      	pop	{r7, pc}
   29b22:	46c0      	nop			; (mov r8, r8)
   29b24:	40000400 	.word	0x40000400

00029b28 <system_is_debugger_present>:
{
   29b28:	b580      	push	{r7, lr}
   29b2a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29b2c:	4b05      	ldr	r3, [pc, #20]	; (29b44 <system_is_debugger_present+0x1c>)
   29b2e:	789b      	ldrb	r3, [r3, #2]
   29b30:	b2db      	uxtb	r3, r3
   29b32:	001a      	movs	r2, r3
   29b34:	2302      	movs	r3, #2
   29b36:	4013      	ands	r3, r2
   29b38:	1e5a      	subs	r2, r3, #1
   29b3a:	4193      	sbcs	r3, r2
   29b3c:	b2db      	uxtb	r3, r3
}
   29b3e:	0018      	movs	r0, r3
   29b40:	46bd      	mov	sp, r7
   29b42:	bd80      	pop	{r7, pc}
   29b44:	41002000 	.word	0x41002000

00029b48 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   29b48:	b580      	push	{r7, lr}
   29b4a:	b084      	sub	sp, #16
   29b4c:	af00      	add	r7, sp, #0
   29b4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29b50:	687b      	ldr	r3, [r7, #4]
   29b52:	681b      	ldr	r3, [r3, #0]
   29b54:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   29b56:	68fb      	ldr	r3, [r7, #12]
   29b58:	69db      	ldr	r3, [r3, #28]
   29b5a:	1e5a      	subs	r2, r3, #1
   29b5c:	4193      	sbcs	r3, r2
   29b5e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   29b60:	0018      	movs	r0, r3
   29b62:	46bd      	mov	sp, r7
   29b64:	b004      	add	sp, #16
   29b66:	bd80      	pop	{r7, pc}

00029b68 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   29b68:	b580      	push	{r7, lr}
   29b6a:	b084      	sub	sp, #16
   29b6c:	af00      	add	r7, sp, #0
   29b6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29b70:	687b      	ldr	r3, [r7, #4]
   29b72:	681b      	ldr	r3, [r3, #0]
   29b74:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   29b76:	46c0      	nop			; (mov r8, r8)
   29b78:	687b      	ldr	r3, [r7, #4]
   29b7a:	0018      	movs	r0, r3
   29b7c:	4b06      	ldr	r3, [pc, #24]	; (29b98 <spi_enable+0x30>)
   29b7e:	4798      	blx	r3
   29b80:	1e03      	subs	r3, r0, #0
   29b82:	d1f9      	bne.n	29b78 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   29b84:	68fb      	ldr	r3, [r7, #12]
   29b86:	681b      	ldr	r3, [r3, #0]
   29b88:	2202      	movs	r2, #2
   29b8a:	431a      	orrs	r2, r3
   29b8c:	68fb      	ldr	r3, [r7, #12]
   29b8e:	601a      	str	r2, [r3, #0]
}
   29b90:	46c0      	nop			; (mov r8, r8)
   29b92:	46bd      	mov	sp, r7
   29b94:	b004      	add	sp, #16
   29b96:	bd80      	pop	{r7, pc}
   29b98:	00029b49 	.word	0x00029b49

00029b9c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   29b9c:	b580      	push	{r7, lr}
   29b9e:	b084      	sub	sp, #16
   29ba0:	af00      	add	r7, sp, #0
   29ba2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29ba4:	687b      	ldr	r3, [r7, #4]
   29ba6:	681b      	ldr	r3, [r3, #0]
   29ba8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   29baa:	46c0      	nop			; (mov r8, r8)
   29bac:	687b      	ldr	r3, [r7, #4]
   29bae:	0018      	movs	r0, r3
   29bb0:	4b0a      	ldr	r3, [pc, #40]	; (29bdc <spi_disable+0x40>)
   29bb2:	4798      	blx	r3
   29bb4:	1e03      	subs	r3, r0, #0
   29bb6:	d1f9      	bne.n	29bac <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   29bb8:	68fb      	ldr	r3, [r7, #12]
   29bba:	228f      	movs	r2, #143	; 0x8f
   29bbc:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   29bbe:	68fb      	ldr	r3, [r7, #12]
   29bc0:	228f      	movs	r2, #143	; 0x8f
   29bc2:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   29bc4:	68fb      	ldr	r3, [r7, #12]
   29bc6:	681b      	ldr	r3, [r3, #0]
   29bc8:	2202      	movs	r2, #2
   29bca:	4393      	bics	r3, r2
   29bcc:	001a      	movs	r2, r3
   29bce:	68fb      	ldr	r3, [r7, #12]
   29bd0:	601a      	str	r2, [r3, #0]
}
   29bd2:	46c0      	nop			; (mov r8, r8)
   29bd4:	46bd      	mov	sp, r7
   29bd6:	b004      	add	sp, #16
   29bd8:	bd80      	pop	{r7, pc}
   29bda:	46c0      	nop			; (mov r8, r8)
   29bdc:	00029b49 	.word	0x00029b49

00029be0 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   29be0:	b580      	push	{r7, lr}
   29be2:	b084      	sub	sp, #16
   29be4:	af00      	add	r7, sp, #0
   29be6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29be8:	687b      	ldr	r3, [r7, #4]
   29bea:	681b      	ldr	r3, [r3, #0]
   29bec:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   29bee:	68fb      	ldr	r3, [r7, #12]
   29bf0:	7e1b      	ldrb	r3, [r3, #24]
   29bf2:	b2db      	uxtb	r3, r3
   29bf4:	001a      	movs	r2, r3
   29bf6:	2302      	movs	r3, #2
   29bf8:	4013      	ands	r3, r2
   29bfa:	1e5a      	subs	r2, r3, #1
   29bfc:	4193      	sbcs	r3, r2
   29bfe:	b2db      	uxtb	r3, r3
}
   29c00:	0018      	movs	r0, r3
   29c02:	46bd      	mov	sp, r7
   29c04:	b004      	add	sp, #16
   29c06:	bd80      	pop	{r7, pc}

00029c08 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   29c08:	b580      	push	{r7, lr}
   29c0a:	b084      	sub	sp, #16
   29c0c:	af00      	add	r7, sp, #0
   29c0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29c10:	687b      	ldr	r3, [r7, #4]
   29c12:	681b      	ldr	r3, [r3, #0]
   29c14:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   29c16:	68fb      	ldr	r3, [r7, #12]
   29c18:	7e1b      	ldrb	r3, [r3, #24]
   29c1a:	b2db      	uxtb	r3, r3
   29c1c:	001a      	movs	r2, r3
   29c1e:	2301      	movs	r3, #1
   29c20:	4013      	ands	r3, r2
   29c22:	1e5a      	subs	r2, r3, #1
   29c24:	4193      	sbcs	r3, r2
   29c26:	b2db      	uxtb	r3, r3
}
   29c28:	0018      	movs	r0, r3
   29c2a:	46bd      	mov	sp, r7
   29c2c:	b004      	add	sp, #16
   29c2e:	bd80      	pop	{r7, pc}

00029c30 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   29c30:	b580      	push	{r7, lr}
   29c32:	b084      	sub	sp, #16
   29c34:	af00      	add	r7, sp, #0
   29c36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29c38:	687b      	ldr	r3, [r7, #4]
   29c3a:	681b      	ldr	r3, [r3, #0]
   29c3c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   29c3e:	68fb      	ldr	r3, [r7, #12]
   29c40:	7e1b      	ldrb	r3, [r3, #24]
   29c42:	b2db      	uxtb	r3, r3
   29c44:	001a      	movs	r2, r3
   29c46:	2304      	movs	r3, #4
   29c48:	4013      	ands	r3, r2
   29c4a:	1e5a      	subs	r2, r3, #1
   29c4c:	4193      	sbcs	r3, r2
   29c4e:	b2db      	uxtb	r3, r3
}
   29c50:	0018      	movs	r0, r3
   29c52:	46bd      	mov	sp, r7
   29c54:	b004      	add	sp, #16
   29c56:	bd80      	pop	{r7, pc}

00029c58 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   29c58:	b580      	push	{r7, lr}
   29c5a:	b084      	sub	sp, #16
   29c5c:	af00      	add	r7, sp, #0
   29c5e:	6078      	str	r0, [r7, #4]
   29c60:	000a      	movs	r2, r1
   29c62:	1cbb      	adds	r3, r7, #2
   29c64:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29c66:	687b      	ldr	r3, [r7, #4]
   29c68:	681b      	ldr	r3, [r3, #0]
   29c6a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   29c6c:	687b      	ldr	r3, [r7, #4]
   29c6e:	0018      	movs	r0, r3
   29c70:	4b0a      	ldr	r3, [pc, #40]	; (29c9c <spi_write+0x44>)
   29c72:	4798      	blx	r3
   29c74:	0003      	movs	r3, r0
   29c76:	001a      	movs	r2, r3
   29c78:	2301      	movs	r3, #1
   29c7a:	4053      	eors	r3, r2
   29c7c:	b2db      	uxtb	r3, r3
   29c7e:	2b00      	cmp	r3, #0
   29c80:	d001      	beq.n	29c86 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   29c82:	2305      	movs	r3, #5
   29c84:	e006      	b.n	29c94 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   29c86:	1cbb      	adds	r3, r7, #2
   29c88:	881b      	ldrh	r3, [r3, #0]
   29c8a:	05db      	lsls	r3, r3, #23
   29c8c:	0dda      	lsrs	r2, r3, #23
   29c8e:	68fb      	ldr	r3, [r7, #12]
   29c90:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   29c92:	2300      	movs	r3, #0
}
   29c94:	0018      	movs	r0, r3
   29c96:	46bd      	mov	sp, r7
   29c98:	b004      	add	sp, #16
   29c9a:	bd80      	pop	{r7, pc}
   29c9c:	00029c09 	.word	0x00029c09

00029ca0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   29ca0:	b580      	push	{r7, lr}
   29ca2:	b084      	sub	sp, #16
   29ca4:	af00      	add	r7, sp, #0
   29ca6:	6078      	str	r0, [r7, #4]
   29ca8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29caa:	687b      	ldr	r3, [r7, #4]
   29cac:	681b      	ldr	r3, [r3, #0]
   29cae:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   29cb0:	687b      	ldr	r3, [r7, #4]
   29cb2:	0018      	movs	r0, r3
   29cb4:	4b1b      	ldr	r3, [pc, #108]	; (29d24 <spi_read+0x84>)
   29cb6:	4798      	blx	r3
   29cb8:	0003      	movs	r3, r0
   29cba:	001a      	movs	r2, r3
   29cbc:	2301      	movs	r3, #1
   29cbe:	4053      	eors	r3, r2
   29cc0:	b2db      	uxtb	r3, r3
   29cc2:	2b00      	cmp	r3, #0
   29cc4:	d001      	beq.n	29cca <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   29cc6:	2310      	movs	r3, #16
   29cc8:	e027      	b.n	29d1a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   29cca:	230f      	movs	r3, #15
   29ccc:	18fb      	adds	r3, r7, r3
   29cce:	2200      	movs	r2, #0
   29cd0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29cd2:	68bb      	ldr	r3, [r7, #8]
   29cd4:	8b5b      	ldrh	r3, [r3, #26]
   29cd6:	b29b      	uxth	r3, r3
   29cd8:	001a      	movs	r2, r3
   29cda:	2304      	movs	r3, #4
   29cdc:	4013      	ands	r3, r2
   29cde:	d006      	beq.n	29cee <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   29ce0:	230f      	movs	r3, #15
   29ce2:	18fb      	adds	r3, r7, r3
   29ce4:	221e      	movs	r2, #30
   29ce6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   29ce8:	68bb      	ldr	r3, [r7, #8]
   29cea:	2204      	movs	r2, #4
   29cec:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29cee:	687b      	ldr	r3, [r7, #4]
   29cf0:	799b      	ldrb	r3, [r3, #6]
   29cf2:	2b01      	cmp	r3, #1
   29cf4:	d108      	bne.n	29d08 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   29cf6:	68bb      	ldr	r3, [r7, #8]
   29cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29cfa:	b29b      	uxth	r3, r3
   29cfc:	05db      	lsls	r3, r3, #23
   29cfe:	0ddb      	lsrs	r3, r3, #23
   29d00:	b29a      	uxth	r2, r3
   29d02:	683b      	ldr	r3, [r7, #0]
   29d04:	801a      	strh	r2, [r3, #0]
   29d06:	e005      	b.n	29d14 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   29d08:	68bb      	ldr	r3, [r7, #8]
   29d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29d0c:	b2db      	uxtb	r3, r3
   29d0e:	b29a      	uxth	r2, r3
   29d10:	683b      	ldr	r3, [r7, #0]
   29d12:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   29d14:	230f      	movs	r3, #15
   29d16:	18fb      	adds	r3, r7, r3
   29d18:	781b      	ldrb	r3, [r3, #0]
}
   29d1a:	0018      	movs	r0, r3
   29d1c:	46bd      	mov	sp, r7
   29d1e:	b004      	add	sp, #16
   29d20:	bd80      	pop	{r7, pc}
   29d22:	46c0      	nop			; (mov r8, r8)
   29d24:	00029c31 	.word	0x00029c31

00029d28 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   29d28:	b590      	push	{r4, r7, lr}
   29d2a:	b089      	sub	sp, #36	; 0x24
   29d2c:	af00      	add	r7, sp, #0
   29d2e:	6078      	str	r0, [r7, #4]
   29d30:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   29d32:	230c      	movs	r3, #12
   29d34:	18fb      	adds	r3, r7, r3
   29d36:	2200      	movs	r2, #0
   29d38:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   29d3a:	687b      	ldr	r3, [r7, #4]
   29d3c:	681b      	ldr	r3, [r3, #0]
   29d3e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   29d40:	687b      	ldr	r3, [r7, #4]
   29d42:	0018      	movs	r0, r3
   29d44:	4b24      	ldr	r3, [pc, #144]	; (29dd8 <spi_set_baudrate+0xb0>)
   29d46:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   29d48:	46c0      	nop			; (mov r8, r8)
   29d4a:	687b      	ldr	r3, [r7, #4]
   29d4c:	0018      	movs	r0, r3
   29d4e:	4b23      	ldr	r3, [pc, #140]	; (29ddc <spi_set_baudrate+0xb4>)
   29d50:	4798      	blx	r3
   29d52:	1e03      	subs	r3, r0, #0
   29d54:	d1f9      	bne.n	29d4a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29d56:	687b      	ldr	r3, [r7, #4]
   29d58:	681b      	ldr	r3, [r3, #0]
   29d5a:	0018      	movs	r0, r3
   29d5c:	4b20      	ldr	r3, [pc, #128]	; (29de0 <spi_set_baudrate+0xb8>)
   29d5e:	4798      	blx	r3
   29d60:	0003      	movs	r3, r0
   29d62:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29d64:	69bb      	ldr	r3, [r7, #24]
   29d66:	3314      	adds	r3, #20
   29d68:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   29d6a:	697b      	ldr	r3, [r7, #20]
   29d6c:	b2db      	uxtb	r3, r3
   29d6e:	0018      	movs	r0, r3
   29d70:	4b1c      	ldr	r3, [pc, #112]	; (29de4 <spi_set_baudrate+0xbc>)
   29d72:	4798      	blx	r3
   29d74:	0003      	movs	r3, r0
   29d76:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   29d78:	230f      	movs	r3, #15
   29d7a:	18fc      	adds	r4, r7, r3
   29d7c:	230c      	movs	r3, #12
   29d7e:	18fa      	adds	r2, r7, r3
   29d80:	6939      	ldr	r1, [r7, #16]
   29d82:	683b      	ldr	r3, [r7, #0]
   29d84:	0018      	movs	r0, r3
   29d86:	4b18      	ldr	r3, [pc, #96]	; (29de8 <spi_set_baudrate+0xc0>)
   29d88:	4798      	blx	r3
   29d8a:	0003      	movs	r3, r0
   29d8c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   29d8e:	230f      	movs	r3, #15
   29d90:	18fb      	adds	r3, r7, r3
   29d92:	781b      	ldrb	r3, [r3, #0]
   29d94:	2b00      	cmp	r3, #0
   29d96:	d001      	beq.n	29d9c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   29d98:	2317      	movs	r3, #23
   29d9a:	e018      	b.n	29dce <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   29d9c:	230c      	movs	r3, #12
   29d9e:	18fb      	adds	r3, r7, r3
   29da0:	881b      	ldrh	r3, [r3, #0]
   29da2:	b2da      	uxtb	r2, r3
   29da4:	69fb      	ldr	r3, [r7, #28]
   29da6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   29da8:	46c0      	nop			; (mov r8, r8)
   29daa:	687b      	ldr	r3, [r7, #4]
   29dac:	0018      	movs	r0, r3
   29dae:	4b0b      	ldr	r3, [pc, #44]	; (29ddc <spi_set_baudrate+0xb4>)
   29db0:	4798      	blx	r3
   29db2:	1e03      	subs	r3, r0, #0
   29db4:	d1f9      	bne.n	29daa <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   29db6:	687b      	ldr	r3, [r7, #4]
   29db8:	0018      	movs	r0, r3
   29dba:	4b0c      	ldr	r3, [pc, #48]	; (29dec <spi_set_baudrate+0xc4>)
   29dbc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   29dbe:	46c0      	nop			; (mov r8, r8)
   29dc0:	687b      	ldr	r3, [r7, #4]
   29dc2:	0018      	movs	r0, r3
   29dc4:	4b05      	ldr	r3, [pc, #20]	; (29ddc <spi_set_baudrate+0xb4>)
   29dc6:	4798      	blx	r3
   29dc8:	1e03      	subs	r3, r0, #0
   29dca:	d1f9      	bne.n	29dc0 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   29dcc:	2300      	movs	r3, #0
}
   29dce:	0018      	movs	r0, r3
   29dd0:	46bd      	mov	sp, r7
   29dd2:	b009      	add	sp, #36	; 0x24
   29dd4:	bd90      	pop	{r4, r7, pc}
   29dd6:	46c0      	nop			; (mov r8, r8)
   29dd8:	00029b9d 	.word	0x00029b9d
   29ddc:	00029b49 	.word	0x00029b49
   29de0:	00029795 	.word	0x00029795
   29de4:	0002c1a5 	.word	0x0002c1a5
   29de8:	0002930f 	.word	0x0002930f
   29dec:	00029b69 	.word	0x00029b69

00029df0 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   29df0:	b580      	push	{r7, lr}
   29df2:	b084      	sub	sp, #16
   29df4:	af00      	add	r7, sp, #0
   29df6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29df8:	687b      	ldr	r3, [r7, #4]
   29dfa:	681b      	ldr	r3, [r3, #0]
   29dfc:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   29dfe:	68fb      	ldr	r3, [r7, #12]
   29e00:	2202      	movs	r2, #2
   29e02:	761a      	strb	r2, [r3, #24]
}
   29e04:	46c0      	nop			; (mov r8, r8)
   29e06:	46bd      	mov	sp, r7
   29e08:	b004      	add	sp, #16
   29e0a:	bd80      	pop	{r7, pc}

00029e0c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   29e0c:	b590      	push	{r4, r7, lr}
   29e0e:	b093      	sub	sp, #76	; 0x4c
   29e10:	af00      	add	r7, sp, #0
   29e12:	6078      	str	r0, [r7, #4]
   29e14:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e16:	687b      	ldr	r3, [r7, #4]
   29e18:	681b      	ldr	r3, [r3, #0]
   29e1a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   29e1c:	687b      	ldr	r3, [r7, #4]
   29e1e:	681b      	ldr	r3, [r3, #0]
   29e20:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   29e22:	231c      	movs	r3, #28
   29e24:	18fb      	adds	r3, r7, r3
   29e26:	0018      	movs	r0, r3
   29e28:	4b85      	ldr	r3, [pc, #532]	; (2a040 <_spi_set_config+0x234>)
   29e2a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29e2c:	231c      	movs	r3, #28
   29e2e:	18fb      	adds	r3, r7, r3
   29e30:	2200      	movs	r2, #0
   29e32:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   29e34:	683b      	ldr	r3, [r7, #0]
   29e36:	781b      	ldrb	r3, [r3, #0]
   29e38:	2b00      	cmp	r3, #0
   29e3a:	d103      	bne.n	29e44 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   29e3c:	231c      	movs	r3, #28
   29e3e:	18fb      	adds	r3, r7, r3
   29e40:	2200      	movs	r2, #0
   29e42:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29e44:	683b      	ldr	r3, [r7, #0]
   29e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   29e48:	230c      	movs	r3, #12
   29e4a:	18fb      	adds	r3, r7, r3
   29e4c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   29e4e:	683b      	ldr	r3, [r7, #0]
   29e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   29e52:	230c      	movs	r3, #12
   29e54:	18fb      	adds	r3, r7, r3
   29e56:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29e58:	683b      	ldr	r3, [r7, #0]
   29e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29e5c:	230c      	movs	r3, #12
   29e5e:	18fb      	adds	r3, r7, r3
   29e60:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   29e62:	683b      	ldr	r3, [r7, #0]
   29e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   29e66:	230c      	movs	r3, #12
   29e68:	18fb      	adds	r3, r7, r3
   29e6a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29e6c:	2347      	movs	r3, #71	; 0x47
   29e6e:	18fb      	adds	r3, r7, r3
   29e70:	2200      	movs	r2, #0
   29e72:	701a      	strb	r2, [r3, #0]
   29e74:	e02c      	b.n	29ed0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29e76:	2347      	movs	r3, #71	; 0x47
   29e78:	18fb      	adds	r3, r7, r3
   29e7a:	781a      	ldrb	r2, [r3, #0]
   29e7c:	230c      	movs	r3, #12
   29e7e:	18fb      	adds	r3, r7, r3
   29e80:	0092      	lsls	r2, r2, #2
   29e82:	58d3      	ldr	r3, [r2, r3]
   29e84:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29e88:	2b00      	cmp	r3, #0
   29e8a:	d109      	bne.n	29ea0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29e8c:	2347      	movs	r3, #71	; 0x47
   29e8e:	18fb      	adds	r3, r7, r3
   29e90:	781a      	ldrb	r2, [r3, #0]
   29e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29e94:	0011      	movs	r1, r2
   29e96:	0018      	movs	r0, r3
   29e98:	4b6a      	ldr	r3, [pc, #424]	; (2a044 <_spi_set_config+0x238>)
   29e9a:	4798      	blx	r3
   29e9c:	0003      	movs	r3, r0
   29e9e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29ea2:	3301      	adds	r3, #1
   29ea4:	d00d      	beq.n	29ec2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29ea8:	b2da      	uxtb	r2, r3
   29eaa:	231c      	movs	r3, #28
   29eac:	18fb      	adds	r3, r7, r3
   29eae:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   29eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29eb2:	0c1b      	lsrs	r3, r3, #16
   29eb4:	b2db      	uxtb	r3, r3
   29eb6:	221c      	movs	r2, #28
   29eb8:	18ba      	adds	r2, r7, r2
   29eba:	0011      	movs	r1, r2
   29ebc:	0018      	movs	r0, r3
   29ebe:	4b62      	ldr	r3, [pc, #392]	; (2a048 <_spi_set_config+0x23c>)
   29ec0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   29ec2:	2347      	movs	r3, #71	; 0x47
   29ec4:	18fb      	adds	r3, r7, r3
   29ec6:	781a      	ldrb	r2, [r3, #0]
   29ec8:	2347      	movs	r3, #71	; 0x47
   29eca:	18fb      	adds	r3, r7, r3
   29ecc:	3201      	adds	r2, #1
   29ece:	701a      	strb	r2, [r3, #0]
   29ed0:	2347      	movs	r3, #71	; 0x47
   29ed2:	18fb      	adds	r3, r7, r3
   29ed4:	781b      	ldrb	r3, [r3, #0]
   29ed6:	2b03      	cmp	r3, #3
   29ed8:	d9cd      	bls.n	29e76 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   29eda:	683b      	ldr	r3, [r7, #0]
   29edc:	781a      	ldrb	r2, [r3, #0]
   29ede:	687b      	ldr	r3, [r7, #4]
   29ee0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   29ee2:	683b      	ldr	r3, [r7, #0]
   29ee4:	7c1a      	ldrb	r2, [r3, #16]
   29ee6:	687b      	ldr	r3, [r7, #4]
   29ee8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   29eea:	683b      	ldr	r3, [r7, #0]
   29eec:	7c9a      	ldrb	r2, [r3, #18]
   29eee:	687b      	ldr	r3, [r7, #4]
   29ef0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   29ef2:	683b      	ldr	r3, [r7, #0]
   29ef4:	7d1a      	ldrb	r2, [r3, #20]
   29ef6:	687b      	ldr	r3, [r7, #4]
   29ef8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   29efa:	230a      	movs	r3, #10
   29efc:	18fb      	adds	r3, r7, r3
   29efe:	2200      	movs	r2, #0
   29f00:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   29f02:	2300      	movs	r3, #0
   29f04:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   29f06:	2300      	movs	r3, #0
   29f08:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   29f0a:	683b      	ldr	r3, [r7, #0]
   29f0c:	781b      	ldrb	r3, [r3, #0]
   29f0e:	2b01      	cmp	r3, #1
   29f10:	d129      	bne.n	29f66 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29f12:	687b      	ldr	r3, [r7, #4]
   29f14:	681b      	ldr	r3, [r3, #0]
   29f16:	0018      	movs	r0, r3
   29f18:	4b4c      	ldr	r3, [pc, #304]	; (2a04c <_spi_set_config+0x240>)
   29f1a:	4798      	blx	r3
   29f1c:	0003      	movs	r3, r0
   29f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29f22:	3314      	adds	r3, #20
   29f24:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   29f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29f28:	b2db      	uxtb	r3, r3
   29f2a:	0018      	movs	r0, r3
   29f2c:	4b48      	ldr	r3, [pc, #288]	; (2a050 <_spi_set_config+0x244>)
   29f2e:	4798      	blx	r3
   29f30:	0003      	movs	r3, r0
   29f32:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   29f34:	683b      	ldr	r3, [r7, #0]
   29f36:	699b      	ldr	r3, [r3, #24]
   29f38:	2223      	movs	r2, #35	; 0x23
   29f3a:	18bc      	adds	r4, r7, r2
   29f3c:	220a      	movs	r2, #10
   29f3e:	18ba      	adds	r2, r7, r2
   29f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
   29f42:	0018      	movs	r0, r3
   29f44:	4b43      	ldr	r3, [pc, #268]	; (2a054 <_spi_set_config+0x248>)
   29f46:	4798      	blx	r3
   29f48:	0003      	movs	r3, r0
   29f4a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   29f4c:	2323      	movs	r3, #35	; 0x23
   29f4e:	18fb      	adds	r3, r7, r3
   29f50:	781b      	ldrb	r3, [r3, #0]
   29f52:	2b00      	cmp	r3, #0
   29f54:	d001      	beq.n	29f5a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   29f56:	2317      	movs	r3, #23
   29f58:	e06d      	b.n	2a036 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   29f5a:	230a      	movs	r3, #10
   29f5c:	18fb      	adds	r3, r7, r3
   29f5e:	881b      	ldrh	r3, [r3, #0]
   29f60:	b2da      	uxtb	r2, r3
   29f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29f64:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   29f66:	683b      	ldr	r3, [r7, #0]
   29f68:	781b      	ldrb	r3, [r3, #0]
   29f6a:	2b00      	cmp	r3, #0
   29f6c:	d11a      	bne.n	29fa4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   29f6e:	683b      	ldr	r3, [r7, #0]
   29f70:	699b      	ldr	r3, [r3, #24]
   29f72:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   29f74:	683b      	ldr	r3, [r7, #0]
   29f76:	8b9b      	ldrh	r3, [r3, #28]
   29f78:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   29f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   29f7e:	683a      	ldr	r2, [r7, #0]
   29f80:	7f92      	ldrb	r2, [r2, #30]
   29f82:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   29f84:	683a      	ldr	r2, [r7, #0]
   29f86:	7fd2      	ldrb	r2, [r2, #31]
   29f88:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   29f8a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
   29f8c:	431a      	orrs	r2, r3
   29f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29f90:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
   29f92:	683b      	ldr	r3, [r7, #0]
   29f94:	2220      	movs	r2, #32
   29f96:	5c9b      	ldrb	r3, [r3, r2]
   29f98:	2b00      	cmp	r3, #0
   29f9a:	d003      	beq.n	29fa4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   29f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29f9e:	2240      	movs	r2, #64	; 0x40
   29fa0:	4313      	orrs	r3, r2
   29fa2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   29fa4:	683b      	ldr	r3, [r7, #0]
   29fa6:	685b      	ldr	r3, [r3, #4]
   29fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29faa:	4313      	orrs	r3, r2
   29fac:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   29fae:	683b      	ldr	r3, [r7, #0]
   29fb0:	689b      	ldr	r3, [r3, #8]
   29fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29fb4:	4313      	orrs	r3, r2
   29fb6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   29fb8:	683b      	ldr	r3, [r7, #0]
   29fba:	68db      	ldr	r3, [r3, #12]
   29fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29fbe:	4313      	orrs	r3, r2
   29fc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   29fc2:	683b      	ldr	r3, [r7, #0]
   29fc4:	7c1b      	ldrb	r3, [r3, #16]
   29fc6:	001a      	movs	r2, r3
   29fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29fca:	4313      	orrs	r3, r2
   29fcc:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   29fce:	683b      	ldr	r3, [r7, #0]
   29fd0:	7c5b      	ldrb	r3, [r3, #17]
   29fd2:	2b00      	cmp	r3, #0
   29fd4:	d103      	bne.n	29fde <_spi_set_config+0x1d2>
   29fd6:	4b20      	ldr	r3, [pc, #128]	; (2a058 <_spi_set_config+0x24c>)
   29fd8:	4798      	blx	r3
   29fda:	1e03      	subs	r3, r0, #0
   29fdc:	d003      	beq.n	29fe6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   29fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29fe0:	2280      	movs	r2, #128	; 0x80
   29fe2:	4313      	orrs	r3, r2
   29fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   29fe6:	683b      	ldr	r3, [r7, #0]
   29fe8:	7c9b      	ldrb	r3, [r3, #18]
   29fea:	2b00      	cmp	r3, #0
   29fec:	d004      	beq.n	29ff8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   29fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29ff0:	2280      	movs	r2, #128	; 0x80
   29ff2:	0292      	lsls	r2, r2, #10
   29ff4:	4313      	orrs	r3, r2
   29ff6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   29ff8:	683b      	ldr	r3, [r7, #0]
   29ffa:	7cdb      	ldrb	r3, [r3, #19]
   29ffc:	2b00      	cmp	r3, #0
   29ffe:	d004      	beq.n	2a00a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a002:	2280      	movs	r2, #128	; 0x80
   2a004:	0092      	lsls	r2, r2, #2
   2a006:	4313      	orrs	r3, r2
   2a008:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2a00a:	683b      	ldr	r3, [r7, #0]
   2a00c:	7d1b      	ldrb	r3, [r3, #20]
   2a00e:	2b00      	cmp	r3, #0
   2a010:	d004      	beq.n	2a01c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a014:	2280      	movs	r2, #128	; 0x80
   2a016:	0192      	lsls	r2, r2, #6
   2a018:	4313      	orrs	r3, r2
   2a01a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2a01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a01e:	681a      	ldr	r2, [r3, #0]
   2a020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a022:	431a      	orrs	r2, r3
   2a024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a026:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a02a:	685a      	ldr	r2, [r3, #4]
   2a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a02e:	431a      	orrs	r2, r3
   2a030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a032:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   2a034:	2300      	movs	r3, #0
}
   2a036:	0018      	movs	r0, r3
   2a038:	46bd      	mov	sp, r7
   2a03a:	b013      	add	sp, #76	; 0x4c
   2a03c:	bd90      	pop	{r4, r7, pc}
   2a03e:	46c0      	nop			; (mov r8, r8)
   2a040:	00029939 	.word	0x00029939
   2a044:	000295d9 	.word	0x000295d9
   2a048:	0002c3e1 	.word	0x0002c3e1
   2a04c:	00029795 	.word	0x00029795
   2a050:	0002c1a5 	.word	0x0002c1a5
   2a054:	0002930f 	.word	0x0002930f
   2a058:	00029b29 	.word	0x00029b29

0002a05c <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2a05c:	b590      	push	{r4, r7, lr}
   2a05e:	b091      	sub	sp, #68	; 0x44
   2a060:	af00      	add	r7, sp, #0
   2a062:	6078      	str	r0, [r7, #4]
   2a064:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a066:	687b      	ldr	r3, [r7, #4]
   2a068:	681b      	ldr	r3, [r3, #0]
   2a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   2a06c:	687b      	ldr	r3, [r7, #4]
   2a06e:	681b      	ldr	r3, [r3, #0]
   2a070:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   2a072:	683b      	ldr	r3, [r7, #0]
   2a074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2a076:	230c      	movs	r3, #12
   2a078:	18fb      	adds	r3, r7, r3
   2a07a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   2a07c:	683b      	ldr	r3, [r7, #0]
   2a07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2a080:	230c      	movs	r3, #12
   2a082:	18fb      	adds	r3, r7, r3
   2a084:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
   2a086:	683b      	ldr	r3, [r7, #0]
   2a088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2a08a:	230c      	movs	r3, #12
   2a08c:	18fb      	adds	r3, r7, r3
   2a08e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
   2a090:	683b      	ldr	r3, [r7, #0]
   2a092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2a094:	230c      	movs	r3, #12
   2a096:	18fb      	adds	r3, r7, r3
   2a098:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a09a:	233f      	movs	r3, #63	; 0x3f
   2a09c:	18fb      	adds	r3, r7, r3
   2a09e:	2200      	movs	r2, #0
   2a0a0:	701a      	strb	r2, [r3, #0]
   2a0a2:	e030      	b.n	2a106 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2a0a4:	233f      	movs	r3, #63	; 0x3f
   2a0a6:	18fb      	adds	r3, r7, r3
   2a0a8:	781a      	ldrb	r2, [r3, #0]
   2a0aa:	230c      	movs	r3, #12
   2a0ac:	18fb      	adds	r3, r7, r3
   2a0ae:	0092      	lsls	r2, r2, #2
   2a0b0:	58d3      	ldr	r3, [r2, r3]
   2a0b2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   2a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a0b6:	2b00      	cmp	r3, #0
   2a0b8:	d109      	bne.n	2a0ce <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2a0ba:	233f      	movs	r3, #63	; 0x3f
   2a0bc:	18fb      	adds	r3, r7, r3
   2a0be:	781a      	ldrb	r2, [r3, #0]
   2a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a0c2:	0011      	movs	r1, r2
   2a0c4:	0018      	movs	r0, r3
   2a0c6:	4b6e      	ldr	r3, [pc, #440]	; (2a280 <_spi_check_config+0x224>)
   2a0c8:	4798      	blx	r3
   2a0ca:	0003      	movs	r3, r0
   2a0cc:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   2a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a0d0:	3301      	adds	r3, #1
   2a0d2:	d010      	beq.n	2a0f6 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   2a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a0d6:	041b      	lsls	r3, r3, #16
   2a0d8:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   2a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a0dc:	0c1b      	lsrs	r3, r3, #16
   2a0de:	b2db      	uxtb	r3, r3
   2a0e0:	0018      	movs	r0, r3
   2a0e2:	4b68      	ldr	r3, [pc, #416]	; (2a284 <_spi_check_config+0x228>)
   2a0e4:	4798      	blx	r3
   2a0e6:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
   2a0e8:	429c      	cmp	r4, r3
   2a0ea:	d005      	beq.n	2a0f8 <_spi_check_config+0x9c>
			module->hw = NULL;
   2a0ec:	687b      	ldr	r3, [r7, #4]
   2a0ee:	2200      	movs	r2, #0
   2a0f0:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   2a0f2:	231c      	movs	r3, #28
   2a0f4:	e0bf      	b.n	2a276 <_spi_check_config+0x21a>
			continue;
   2a0f6:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a0f8:	233f      	movs	r3, #63	; 0x3f
   2a0fa:	18fb      	adds	r3, r7, r3
   2a0fc:	781a      	ldrb	r2, [r3, #0]
   2a0fe:	233f      	movs	r3, #63	; 0x3f
   2a100:	18fb      	adds	r3, r7, r3
   2a102:	3201      	adds	r2, #1
   2a104:	701a      	strb	r2, [r3, #0]
   2a106:	233f      	movs	r3, #63	; 0x3f
   2a108:	18fb      	adds	r3, r7, r3
   2a10a:	781b      	ldrb	r3, [r3, #0]
   2a10c:	2b03      	cmp	r3, #3
   2a10e:	d9c9      	bls.n	2a0a4 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   2a110:	2013      	movs	r0, #19
   2a112:	4b5d      	ldr	r3, [pc, #372]	; (2a288 <_spi_check_config+0x22c>)
   2a114:	4798      	blx	r3
   2a116:	0003      	movs	r3, r0
   2a118:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   2a11a:	2300      	movs	r3, #0
   2a11c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   2a11e:	2300      	movs	r3, #0
   2a120:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
   2a122:	2300      	movs	r3, #0
   2a124:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   2a126:	683b      	ldr	r3, [r7, #0]
   2a128:	781b      	ldrb	r3, [r3, #0]
   2a12a:	2b01      	cmp	r3, #1
   2a12c:	d121      	bne.n	2a172 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
   2a12e:	683b      	ldr	r3, [r7, #0]
   2a130:	699b      	ldr	r3, [r3, #24]
   2a132:	221f      	movs	r2, #31
   2a134:	18bc      	adds	r4, r7, r2
   2a136:	220a      	movs	r2, #10
   2a138:	18ba      	adds	r2, r7, r2
   2a13a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a13c:	0018      	movs	r0, r3
   2a13e:	4b53      	ldr	r3, [pc, #332]	; (2a28c <_spi_check_config+0x230>)
   2a140:	4798      	blx	r3
   2a142:	0003      	movs	r3, r0
   2a144:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   2a146:	231f      	movs	r3, #31
   2a148:	18fb      	adds	r3, r7, r3
   2a14a:	781b      	ldrb	r3, [r3, #0]
   2a14c:	2b00      	cmp	r3, #0
   2a14e:	d001      	beq.n	2a154 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2a150:	2317      	movs	r3, #23
   2a152:	e090      	b.n	2a276 <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   2a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a156:	7b1b      	ldrb	r3, [r3, #12]
   2a158:	b2da      	uxtb	r2, r3
   2a15a:	230a      	movs	r3, #10
   2a15c:	18fb      	adds	r3, r7, r3
   2a15e:	881b      	ldrh	r3, [r3, #0]
   2a160:	b2db      	uxtb	r3, r3
   2a162:	429a      	cmp	r2, r3
   2a164:	d001      	beq.n	2a16a <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
   2a166:	231c      	movs	r3, #28
   2a168:	e085      	b.n	2a276 <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   2a16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a16c:	220c      	movs	r2, #12
   2a16e:	4313      	orrs	r3, r2
   2a170:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a172:	683b      	ldr	r3, [r7, #0]
   2a174:	781b      	ldrb	r3, [r3, #0]
   2a176:	2b00      	cmp	r3, #0
   2a178:	d129      	bne.n	2a1ce <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
   2a17a:	683b      	ldr	r3, [r7, #0]
   2a17c:	699b      	ldr	r3, [r3, #24]
   2a17e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a180:	4313      	orrs	r3, r2
   2a182:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
   2a184:	683b      	ldr	r3, [r7, #0]
   2a186:	8b9b      	ldrh	r3, [r3, #28]
   2a188:	001a      	movs	r2, r3
   2a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a18c:	4313      	orrs	r3, r2
   2a18e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a190:	683b      	ldr	r3, [r7, #0]
   2a192:	7f9b      	ldrb	r3, [r3, #30]
   2a194:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   2a196:	683b      	ldr	r3, [r7, #0]
   2a198:	7fdb      	ldrb	r3, [r3, #31]
   2a19a:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a19c:	4313      	orrs	r3, r2
   2a19e:	001a      	movs	r2, r3
   2a1a0:	6a3b      	ldr	r3, [r7, #32]
   2a1a2:	4313      	orrs	r3, r2
   2a1a4:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
   2a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a1a8:	681a      	ldr	r2, [r3, #0]
   2a1aa:	6a3b      	ldr	r3, [r7, #32]
   2a1ac:	429a      	cmp	r2, r3
   2a1ae:	d001      	beq.n	2a1b4 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
   2a1b0:	231c      	movs	r3, #28
   2a1b2:	e060      	b.n	2a276 <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
   2a1b4:	683b      	ldr	r3, [r7, #0]
   2a1b6:	2220      	movs	r2, #32
   2a1b8:	5c9b      	ldrb	r3, [r3, r2]
   2a1ba:	2b00      	cmp	r3, #0
   2a1bc:	d003      	beq.n	2a1c6 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   2a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a1c0:	2240      	movs	r2, #64	; 0x40
   2a1c2:	4313      	orrs	r3, r2
   2a1c4:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
   2a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a1c8:	2208      	movs	r2, #8
   2a1ca:	4313      	orrs	r3, r2
   2a1cc:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   2a1ce:	683b      	ldr	r3, [r7, #0]
   2a1d0:	685b      	ldr	r3, [r3, #4]
   2a1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a1d4:	4313      	orrs	r3, r2
   2a1d6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2a1d8:	683b      	ldr	r3, [r7, #0]
   2a1da:	689b      	ldr	r3, [r3, #8]
   2a1dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a1de:	4313      	orrs	r3, r2
   2a1e0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2a1e2:	683b      	ldr	r3, [r7, #0]
   2a1e4:	68db      	ldr	r3, [r3, #12]
   2a1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a1e8:	4313      	orrs	r3, r2
   2a1ea:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2a1ec:	683b      	ldr	r3, [r7, #0]
   2a1ee:	7c1b      	ldrb	r3, [r3, #16]
   2a1f0:	001a      	movs	r2, r3
   2a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a1f4:	4313      	orrs	r3, r2
   2a1f6:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   2a1f8:	683b      	ldr	r3, [r7, #0]
   2a1fa:	7c5b      	ldrb	r3, [r3, #17]
   2a1fc:	2b00      	cmp	r3, #0
   2a1fe:	d003      	beq.n	2a208 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   2a200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a202:	2280      	movs	r2, #128	; 0x80
   2a204:	4313      	orrs	r3, r2
   2a206:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   2a208:	683b      	ldr	r3, [r7, #0]
   2a20a:	7c9b      	ldrb	r3, [r3, #18]
   2a20c:	2b00      	cmp	r3, #0
   2a20e:	d004      	beq.n	2a21a <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   2a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a212:	2280      	movs	r2, #128	; 0x80
   2a214:	0292      	lsls	r2, r2, #10
   2a216:	4313      	orrs	r3, r2
   2a218:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2a21a:	683b      	ldr	r3, [r7, #0]
   2a21c:	7cdb      	ldrb	r3, [r3, #19]
   2a21e:	2b00      	cmp	r3, #0
   2a220:	d004      	beq.n	2a22c <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a224:	2280      	movs	r2, #128	; 0x80
   2a226:	0092      	lsls	r2, r2, #2
   2a228:	4313      	orrs	r3, r2
   2a22a:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2a22c:	683b      	ldr	r3, [r7, #0]
   2a22e:	7d1b      	ldrb	r3, [r3, #20]
   2a230:	2b00      	cmp	r3, #0
   2a232:	d004      	beq.n	2a23e <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a236:	2280      	movs	r2, #128	; 0x80
   2a238:	0192      	lsls	r2, r2, #6
   2a23a:	4313      	orrs	r3, r2
   2a23c:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   2a23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a240:	2202      	movs	r2, #2
   2a242:	4313      	orrs	r3, r2
   2a244:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   2a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a248:	681a      	ldr	r2, [r3, #0]
   2a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a24c:	429a      	cmp	r2, r3
   2a24e:	d10e      	bne.n	2a26e <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
   2a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a252:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   2a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a256:	429a      	cmp	r2, r3
   2a258:	d109      	bne.n	2a26e <_spi_check_config+0x212>
		module->mode           = config->mode;
   2a25a:	683b      	ldr	r3, [r7, #0]
   2a25c:	781a      	ldrb	r2, [r3, #0]
   2a25e:	687b      	ldr	r3, [r7, #4]
   2a260:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   2a262:	683b      	ldr	r3, [r7, #0]
   2a264:	7c1a      	ldrb	r2, [r3, #16]
   2a266:	687b      	ldr	r3, [r7, #4]
   2a268:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   2a26a:	2300      	movs	r3, #0
   2a26c:	e003      	b.n	2a276 <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   2a26e:	687b      	ldr	r3, [r7, #4]
   2a270:	2200      	movs	r2, #0
   2a272:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   2a274:	231c      	movs	r3, #28
}
   2a276:	0018      	movs	r0, r3
   2a278:	46bd      	mov	sp, r7
   2a27a:	b011      	add	sp, #68	; 0x44
   2a27c:	bd90      	pop	{r4, r7, pc}
   2a27e:	46c0      	nop			; (mov r8, r8)
   2a280:	000295d9 	.word	0x000295d9
   2a284:	000299c1 	.word	0x000299c1
   2a288:	0002c1a5 	.word	0x0002c1a5
   2a28c:	0002930f 	.word	0x0002930f

0002a290 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2a290:	b580      	push	{r7, lr}
   2a292:	b08a      	sub	sp, #40	; 0x28
   2a294:	af00      	add	r7, sp, #0
   2a296:	60f8      	str	r0, [r7, #12]
   2a298:	60b9      	str	r1, [r7, #8]
   2a29a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2a29c:	68fb      	ldr	r3, [r7, #12]
   2a29e:	68ba      	ldr	r2, [r7, #8]
   2a2a0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a2a2:	68fb      	ldr	r3, [r7, #12]
   2a2a4:	681b      	ldr	r3, [r3, #0]
   2a2a6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   2a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a2aa:	681b      	ldr	r3, [r3, #0]
   2a2ac:	2202      	movs	r2, #2
   2a2ae:	4013      	ands	r3, r2
   2a2b0:	d007      	beq.n	2a2c2 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   2a2b2:	687a      	ldr	r2, [r7, #4]
   2a2b4:	68fb      	ldr	r3, [r7, #12]
   2a2b6:	0011      	movs	r1, r2
   2a2b8:	0018      	movs	r0, r3
   2a2ba:	4b2f      	ldr	r3, [pc, #188]	; (2a378 <spi_init+0xe8>)
   2a2bc:	4798      	blx	r3
   2a2be:	0003      	movs	r3, r0
   2a2c0:	e055      	b.n	2a36e <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a2c4:	681b      	ldr	r3, [r3, #0]
   2a2c6:	2201      	movs	r2, #1
   2a2c8:	4013      	ands	r3, r2
   2a2ca:	d001      	beq.n	2a2d0 <spi_init+0x40>
		return STATUS_BUSY;
   2a2cc:	2305      	movs	r3, #5
   2a2ce:	e04e      	b.n	2a36e <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a2d0:	68fb      	ldr	r3, [r7, #12]
   2a2d2:	681b      	ldr	r3, [r3, #0]
   2a2d4:	0018      	movs	r0, r3
   2a2d6:	4b29      	ldr	r3, [pc, #164]	; (2a37c <spi_init+0xec>)
   2a2d8:	4798      	blx	r3
   2a2da:	0003      	movs	r3, r0
   2a2dc:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2a2de:	6a3b      	ldr	r3, [r7, #32]
   2a2e0:	3302      	adds	r3, #2
   2a2e2:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a2e4:	6a3b      	ldr	r3, [r7, #32]
   2a2e6:	3314      	adds	r3, #20
   2a2e8:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2a2ea:	2201      	movs	r2, #1
   2a2ec:	69fb      	ldr	r3, [r7, #28]
   2a2ee:	409a      	lsls	r2, r3
   2a2f0:	0013      	movs	r3, r2
   2a2f2:	0019      	movs	r1, r3
   2a2f4:	2002      	movs	r0, #2
   2a2f6:	4b22      	ldr	r3, [pc, #136]	; (2a380 <spi_init+0xf0>)
   2a2f8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2a2fa:	2314      	movs	r3, #20
   2a2fc:	18fb      	adds	r3, r7, r3
   2a2fe:	0018      	movs	r0, r3
   2a300:	4b20      	ldr	r3, [pc, #128]	; (2a384 <spi_init+0xf4>)
   2a302:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2a304:	687b      	ldr	r3, [r7, #4]
   2a306:	2224      	movs	r2, #36	; 0x24
   2a308:	5c9a      	ldrb	r2, [r3, r2]
   2a30a:	2314      	movs	r3, #20
   2a30c:	18fb      	adds	r3, r7, r3
   2a30e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2a310:	69bb      	ldr	r3, [r7, #24]
   2a312:	b2db      	uxtb	r3, r3
   2a314:	2214      	movs	r2, #20
   2a316:	18ba      	adds	r2, r7, r2
   2a318:	0011      	movs	r1, r2
   2a31a:	0018      	movs	r0, r3
   2a31c:	4b1a      	ldr	r3, [pc, #104]	; (2a388 <spi_init+0xf8>)
   2a31e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2a320:	69bb      	ldr	r3, [r7, #24]
   2a322:	b2db      	uxtb	r3, r3
   2a324:	0018      	movs	r0, r3
   2a326:	4b19      	ldr	r3, [pc, #100]	; (2a38c <spi_init+0xfc>)
   2a328:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2a32a:	687b      	ldr	r3, [r7, #4]
   2a32c:	2224      	movs	r2, #36	; 0x24
   2a32e:	5c9b      	ldrb	r3, [r3, r2]
   2a330:	2100      	movs	r1, #0
   2a332:	0018      	movs	r0, r3
   2a334:	4b16      	ldr	r3, [pc, #88]	; (2a390 <spi_init+0x100>)
   2a336:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   2a338:	687b      	ldr	r3, [r7, #4]
   2a33a:	781b      	ldrb	r3, [r3, #0]
   2a33c:	2b01      	cmp	r3, #1
   2a33e:	d105      	bne.n	2a34c <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   2a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a342:	681b      	ldr	r3, [r3, #0]
   2a344:	220c      	movs	r2, #12
   2a346:	431a      	orrs	r2, r3
   2a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a34a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a34c:	687b      	ldr	r3, [r7, #4]
   2a34e:	781b      	ldrb	r3, [r3, #0]
   2a350:	2b00      	cmp	r3, #0
   2a352:	d105      	bne.n	2a360 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   2a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a356:	681b      	ldr	r3, [r3, #0]
   2a358:	2208      	movs	r2, #8
   2a35a:	431a      	orrs	r2, r3
   2a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a35e:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2a360:	687a      	ldr	r2, [r7, #4]
   2a362:	68fb      	ldr	r3, [r7, #12]
   2a364:	0011      	movs	r1, r2
   2a366:	0018      	movs	r0, r3
   2a368:	4b0a      	ldr	r3, [pc, #40]	; (2a394 <spi_init+0x104>)
   2a36a:	4798      	blx	r3
   2a36c:	0003      	movs	r3, r0
}
   2a36e:	0018      	movs	r0, r3
   2a370:	46bd      	mov	sp, r7
   2a372:	b00a      	add	sp, #40	; 0x28
   2a374:	bd80      	pop	{r7, pc}
   2a376:	46c0      	nop			; (mov r8, r8)
   2a378:	0002a05d 	.word	0x0002a05d
   2a37c:	00029795 	.word	0x00029795
   2a380:	00029acd 	.word	0x00029acd
   2a384:	00029ab5 	.word	0x00029ab5
   2a388:	0002c081 	.word	0x0002c081
   2a38c:	0002c0c5 	.word	0x0002c0c5
   2a390:	0002954d 	.word	0x0002954d
   2a394:	00029e0d 	.word	0x00029e0d

0002a398 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2a398:	b590      	push	{r4, r7, lr}
   2a39a:	b089      	sub	sp, #36	; 0x24
   2a39c:	af00      	add	r7, sp, #0
   2a39e:	60f8      	str	r0, [r7, #12]
   2a3a0:	60b9      	str	r1, [r7, #8]
   2a3a2:	0019      	movs	r1, r3
   2a3a4:	1dbb      	adds	r3, r7, #6
   2a3a6:	801a      	strh	r2, [r3, #0]
   2a3a8:	1d3b      	adds	r3, r7, #4
   2a3aa:	1c0a      	adds	r2, r1, #0
   2a3ac:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   2a3ae:	1dbb      	adds	r3, r7, #6
   2a3b0:	881b      	ldrh	r3, [r3, #0]
   2a3b2:	2b00      	cmp	r3, #0
   2a3b4:	d101      	bne.n	2a3ba <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
   2a3b6:	2317      	movs	r3, #23
   2a3b8:	e0b2      	b.n	2a520 <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
   2a3ba:	68fb      	ldr	r3, [r7, #12]
   2a3bc:	79db      	ldrb	r3, [r3, #7]
   2a3be:	2201      	movs	r2, #1
   2a3c0:	4053      	eors	r3, r2
   2a3c2:	b2db      	uxtb	r3, r3
   2a3c4:	2b00      	cmp	r3, #0
   2a3c6:	d001      	beq.n	2a3cc <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
   2a3c8:	231c      	movs	r3, #28
   2a3ca:	e0a9      	b.n	2a520 <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   2a3cc:	68fb      	ldr	r3, [r7, #12]
   2a3ce:	795b      	ldrb	r3, [r3, #5]
   2a3d0:	2b00      	cmp	r3, #0
   2a3d2:	d109      	bne.n	2a3e8 <spi_read_buffer_wait+0x50>
   2a3d4:	68fb      	ldr	r3, [r7, #12]
   2a3d6:	0018      	movs	r0, r3
   2a3d8:	4b53      	ldr	r3, [pc, #332]	; (2a528 <spi_read_buffer_wait+0x190>)
   2a3da:	4798      	blx	r3
   2a3dc:	1e03      	subs	r3, r0, #0
   2a3de:	d003      	beq.n	2a3e8 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   2a3e0:	68fb      	ldr	r3, [r7, #12]
   2a3e2:	0018      	movs	r0, r3
   2a3e4:	4b51      	ldr	r3, [pc, #324]	; (2a52c <spi_read_buffer_wait+0x194>)
   2a3e6:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   2a3e8:	231e      	movs	r3, #30
   2a3ea:	18fb      	adds	r3, r7, r3
   2a3ec:	2200      	movs	r2, #0
   2a3ee:	801a      	strh	r2, [r3, #0]

	while (length--) {
   2a3f0:	e08d      	b.n	2a50e <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2a3f2:	68fb      	ldr	r3, [r7, #12]
   2a3f4:	795b      	ldrb	r3, [r3, #5]
   2a3f6:	2b01      	cmp	r3, #1
   2a3f8:	d112      	bne.n	2a420 <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   2a3fa:	46c0      	nop			; (mov r8, r8)
   2a3fc:	68fb      	ldr	r3, [r7, #12]
   2a3fe:	0018      	movs	r0, r3
   2a400:	4b4b      	ldr	r3, [pc, #300]	; (2a530 <spi_read_buffer_wait+0x198>)
   2a402:	4798      	blx	r3
   2a404:	0003      	movs	r3, r0
   2a406:	001a      	movs	r2, r3
   2a408:	2301      	movs	r3, #1
   2a40a:	4053      	eors	r3, r2
   2a40c:	b2db      	uxtb	r3, r3
   2a40e:	2b00      	cmp	r3, #0
   2a410:	d1f4      	bne.n	2a3fc <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2a412:	1d3b      	adds	r3, r7, #4
   2a414:	881a      	ldrh	r2, [r3, #0]
   2a416:	68fb      	ldr	r3, [r7, #12]
   2a418:	0011      	movs	r1, r2
   2a41a:	0018      	movs	r0, r3
   2a41c:	4b45      	ldr	r3, [pc, #276]	; (2a534 <spi_read_buffer_wait+0x19c>)
   2a41e:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   2a420:	68fb      	ldr	r3, [r7, #12]
   2a422:	795b      	ldrb	r3, [r3, #5]
   2a424:	2b00      	cmp	r3, #0
   2a426:	d12a      	bne.n	2a47e <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a428:	2300      	movs	r3, #0
   2a42a:	61bb      	str	r3, [r7, #24]
   2a42c:	e008      	b.n	2a440 <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
   2a42e:	68fb      	ldr	r3, [r7, #12]
   2a430:	0018      	movs	r0, r3
   2a432:	4b41      	ldr	r3, [pc, #260]	; (2a538 <spi_read_buffer_wait+0x1a0>)
   2a434:	4798      	blx	r3
   2a436:	1e03      	subs	r3, r0, #0
   2a438:	d107      	bne.n	2a44a <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a43a:	69bb      	ldr	r3, [r7, #24]
   2a43c:	3301      	adds	r3, #1
   2a43e:	61bb      	str	r3, [r7, #24]
   2a440:	69bb      	ldr	r3, [r7, #24]
   2a442:	4a3e      	ldr	r2, [pc, #248]	; (2a53c <spi_read_buffer_wait+0x1a4>)
   2a444:	4293      	cmp	r3, r2
   2a446:	d9f2      	bls.n	2a42e <spi_read_buffer_wait+0x96>
   2a448:	e000      	b.n	2a44c <spi_read_buffer_wait+0xb4>
					break;
   2a44a:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a44c:	68fb      	ldr	r3, [r7, #12]
   2a44e:	0018      	movs	r0, r3
   2a450:	4b35      	ldr	r3, [pc, #212]	; (2a528 <spi_read_buffer_wait+0x190>)
   2a452:	4798      	blx	r3
   2a454:	1e03      	subs	r3, r0, #0
   2a456:	d005      	beq.n	2a464 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
   2a458:	68fb      	ldr	r3, [r7, #12]
   2a45a:	0018      	movs	r0, r3
   2a45c:	4b33      	ldr	r3, [pc, #204]	; (2a52c <spi_read_buffer_wait+0x194>)
   2a45e:	4798      	blx	r3
				return STATUS_ABORTED;
   2a460:	2304      	movs	r3, #4
   2a462:	e05d      	b.n	2a520 <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
   2a464:	68fb      	ldr	r3, [r7, #12]
   2a466:	0018      	movs	r0, r3
   2a468:	4b33      	ldr	r3, [pc, #204]	; (2a538 <spi_read_buffer_wait+0x1a0>)
   2a46a:	4798      	blx	r3
   2a46c:	0003      	movs	r3, r0
   2a46e:	001a      	movs	r2, r3
   2a470:	2301      	movs	r3, #1
   2a472:	4053      	eors	r3, r2
   2a474:	b2db      	uxtb	r3, r3
   2a476:	2b00      	cmp	r3, #0
   2a478:	d001      	beq.n	2a47e <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a47a:	2312      	movs	r3, #18
   2a47c:	e050      	b.n	2a520 <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2a47e:	46c0      	nop			; (mov r8, r8)
   2a480:	68fb      	ldr	r3, [r7, #12]
   2a482:	0018      	movs	r0, r3
   2a484:	4b2c      	ldr	r3, [pc, #176]	; (2a538 <spi_read_buffer_wait+0x1a0>)
   2a486:	4798      	blx	r3
   2a488:	0003      	movs	r3, r0
   2a48a:	001a      	movs	r2, r3
   2a48c:	2301      	movs	r3, #1
   2a48e:	4053      	eors	r3, r2
   2a490:	b2db      	uxtb	r3, r3
   2a492:	2b00      	cmp	r3, #0
   2a494:	d1f4      	bne.n	2a480 <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
   2a496:	2314      	movs	r3, #20
   2a498:	18fb      	adds	r3, r7, r3
   2a49a:	2200      	movs	r2, #0
   2a49c:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2a49e:	2317      	movs	r3, #23
   2a4a0:	18fc      	adds	r4, r7, r3
   2a4a2:	2314      	movs	r3, #20
   2a4a4:	18fa      	adds	r2, r7, r3
   2a4a6:	68fb      	ldr	r3, [r7, #12]
   2a4a8:	0011      	movs	r1, r2
   2a4aa:	0018      	movs	r0, r3
   2a4ac:	4b24      	ldr	r3, [pc, #144]	; (2a540 <spi_read_buffer_wait+0x1a8>)
   2a4ae:	4798      	blx	r3
   2a4b0:	0003      	movs	r3, r0
   2a4b2:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2a4b4:	2317      	movs	r3, #23
   2a4b6:	18fb      	adds	r3, r7, r3
   2a4b8:	781b      	ldrb	r3, [r3, #0]
   2a4ba:	2b00      	cmp	r3, #0
   2a4bc:	d003      	beq.n	2a4c6 <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
   2a4be:	2317      	movs	r3, #23
   2a4c0:	18fb      	adds	r3, r7, r3
   2a4c2:	781b      	ldrb	r3, [r3, #0]
   2a4c4:	e02c      	b.n	2a520 <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2a4c6:	231e      	movs	r3, #30
   2a4c8:	18fb      	adds	r3, r7, r3
   2a4ca:	881b      	ldrh	r3, [r3, #0]
   2a4cc:	221e      	movs	r2, #30
   2a4ce:	18ba      	adds	r2, r7, r2
   2a4d0:	1c59      	adds	r1, r3, #1
   2a4d2:	8011      	strh	r1, [r2, #0]
   2a4d4:	001a      	movs	r2, r3
   2a4d6:	68bb      	ldr	r3, [r7, #8]
   2a4d8:	189b      	adds	r3, r3, r2
   2a4da:	2214      	movs	r2, #20
   2a4dc:	18ba      	adds	r2, r7, r2
   2a4de:	8812      	ldrh	r2, [r2, #0]
   2a4e0:	b2d2      	uxtb	r2, r2
   2a4e2:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a4e4:	68fb      	ldr	r3, [r7, #12]
   2a4e6:	799b      	ldrb	r3, [r3, #6]
   2a4e8:	2b01      	cmp	r3, #1
   2a4ea:	d110      	bne.n	2a50e <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
   2a4ec:	231e      	movs	r3, #30
   2a4ee:	18fb      	adds	r3, r7, r3
   2a4f0:	881b      	ldrh	r3, [r3, #0]
   2a4f2:	221e      	movs	r2, #30
   2a4f4:	18ba      	adds	r2, r7, r2
   2a4f6:	1c59      	adds	r1, r3, #1
   2a4f8:	8011      	strh	r1, [r2, #0]
   2a4fa:	001a      	movs	r2, r3
   2a4fc:	68bb      	ldr	r3, [r7, #8]
   2a4fe:	189b      	adds	r3, r3, r2
   2a500:	2214      	movs	r2, #20
   2a502:	18ba      	adds	r2, r7, r2
   2a504:	8812      	ldrh	r2, [r2, #0]
   2a506:	0a12      	lsrs	r2, r2, #8
   2a508:	b292      	uxth	r2, r2
   2a50a:	b2d2      	uxtb	r2, r2
   2a50c:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2a50e:	1dbb      	adds	r3, r7, #6
   2a510:	881b      	ldrh	r3, [r3, #0]
   2a512:	1dba      	adds	r2, r7, #6
   2a514:	1e59      	subs	r1, r3, #1
   2a516:	8011      	strh	r1, [r2, #0]
   2a518:	2b00      	cmp	r3, #0
   2a51a:	d000      	beq.n	2a51e <spi_read_buffer_wait+0x186>
   2a51c:	e769      	b.n	2a3f2 <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
   2a51e:	2300      	movs	r3, #0
}
   2a520:	0018      	movs	r0, r3
   2a522:	46bd      	mov	sp, r7
   2a524:	b009      	add	sp, #36	; 0x24
   2a526:	bd90      	pop	{r4, r7, pc}
   2a528:	00029be1 	.word	0x00029be1
   2a52c:	00029df1 	.word	0x00029df1
   2a530:	00029c09 	.word	0x00029c09
   2a534:	00029c59 	.word	0x00029c59
   2a538:	00029c31 	.word	0x00029c31
   2a53c:	00002710 	.word	0x00002710
   2a540:	00029ca1 	.word	0x00029ca1

0002a544 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2a544:	b580      	push	{r7, lr}
   2a546:	b086      	sub	sp, #24
   2a548:	af00      	add	r7, sp, #0
   2a54a:	60f8      	str	r0, [r7, #12]
   2a54c:	60b9      	str	r1, [r7, #8]
   2a54e:	1dfb      	adds	r3, r7, #7
   2a550:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2a552:	68fb      	ldr	r3, [r7, #12]
   2a554:	795b      	ldrb	r3, [r3, #5]
   2a556:	2b01      	cmp	r3, #1
   2a558:	d001      	beq.n	2a55e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2a55a:	2315      	movs	r3, #21
   2a55c:	e05c      	b.n	2a618 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2a55e:	68fb      	ldr	r3, [r7, #12]
   2a560:	7a1b      	ldrb	r3, [r3, #8]
   2a562:	2201      	movs	r2, #1
   2a564:	4053      	eors	r3, r2
   2a566:	b2db      	uxtb	r3, r3
   2a568:	2b00      	cmp	r3, #0
   2a56a:	d054      	beq.n	2a616 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2a56c:	1dfb      	adds	r3, r7, #7
   2a56e:	781b      	ldrb	r3, [r3, #0]
   2a570:	2b00      	cmp	r3, #0
   2a572:	d04a      	beq.n	2a60a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   2a574:	68bb      	ldr	r3, [r7, #8]
   2a576:	785b      	ldrb	r3, [r3, #1]
   2a578:	2b00      	cmp	r3, #0
   2a57a:	d03f      	beq.n	2a5fc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2a57c:	68fb      	ldr	r3, [r7, #12]
   2a57e:	0018      	movs	r0, r3
   2a580:	4b27      	ldr	r3, [pc, #156]	; (2a620 <spi_select_slave+0xdc>)
   2a582:	4798      	blx	r3
   2a584:	0003      	movs	r3, r0
   2a586:	001a      	movs	r2, r3
   2a588:	2301      	movs	r3, #1
   2a58a:	4053      	eors	r3, r2
   2a58c:	b2db      	uxtb	r3, r3
   2a58e:	2b00      	cmp	r3, #0
   2a590:	d007      	beq.n	2a5a2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2a592:	68bb      	ldr	r3, [r7, #8]
   2a594:	781b      	ldrb	r3, [r3, #0]
   2a596:	2101      	movs	r1, #1
   2a598:	0018      	movs	r0, r3
   2a59a:	4b22      	ldr	r3, [pc, #136]	; (2a624 <spi_select_slave+0xe0>)
   2a59c:	4798      	blx	r3
					return STATUS_BUSY;
   2a59e:	2305      	movs	r3, #5
   2a5a0:	e03a      	b.n	2a618 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a5a2:	68bb      	ldr	r3, [r7, #8]
   2a5a4:	781b      	ldrb	r3, [r3, #0]
   2a5a6:	2100      	movs	r1, #0
   2a5a8:	0018      	movs	r0, r3
   2a5aa:	4b1e      	ldr	r3, [pc, #120]	; (2a624 <spi_select_slave+0xe0>)
   2a5ac:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2a5ae:	68bb      	ldr	r3, [r7, #8]
   2a5b0:	789b      	ldrb	r3, [r3, #2]
   2a5b2:	b29a      	uxth	r2, r3
   2a5b4:	68fb      	ldr	r3, [r7, #12]
   2a5b6:	0011      	movs	r1, r2
   2a5b8:	0018      	movs	r0, r3
   2a5ba:	4b1b      	ldr	r3, [pc, #108]	; (2a628 <spi_select_slave+0xe4>)
   2a5bc:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2a5be:	68fb      	ldr	r3, [r7, #12]
   2a5c0:	79db      	ldrb	r3, [r3, #7]
   2a5c2:	2201      	movs	r2, #1
   2a5c4:	4053      	eors	r3, r2
   2a5c6:	b2db      	uxtb	r3, r3
   2a5c8:	2b00      	cmp	r3, #0
   2a5ca:	d024      	beq.n	2a616 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2a5cc:	46c0      	nop			; (mov r8, r8)
   2a5ce:	68fb      	ldr	r3, [r7, #12]
   2a5d0:	0018      	movs	r0, r3
   2a5d2:	4b16      	ldr	r3, [pc, #88]	; (2a62c <spi_select_slave+0xe8>)
   2a5d4:	4798      	blx	r3
   2a5d6:	0003      	movs	r3, r0
   2a5d8:	001a      	movs	r2, r3
   2a5da:	2301      	movs	r3, #1
   2a5dc:	4053      	eors	r3, r2
   2a5de:	b2db      	uxtb	r3, r3
   2a5e0:	2b00      	cmp	r3, #0
   2a5e2:	d1f4      	bne.n	2a5ce <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2a5e4:	2316      	movs	r3, #22
   2a5e6:	18fb      	adds	r3, r7, r3
   2a5e8:	2200      	movs	r2, #0
   2a5ea:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2a5ec:	2316      	movs	r3, #22
   2a5ee:	18fa      	adds	r2, r7, r3
   2a5f0:	68fb      	ldr	r3, [r7, #12]
   2a5f2:	0011      	movs	r1, r2
   2a5f4:	0018      	movs	r0, r3
   2a5f6:	4b0e      	ldr	r3, [pc, #56]	; (2a630 <spi_select_slave+0xec>)
   2a5f8:	4798      	blx	r3
   2a5fa:	e00c      	b.n	2a616 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a5fc:	68bb      	ldr	r3, [r7, #8]
   2a5fe:	781b      	ldrb	r3, [r3, #0]
   2a600:	2100      	movs	r1, #0
   2a602:	0018      	movs	r0, r3
   2a604:	4b07      	ldr	r3, [pc, #28]	; (2a624 <spi_select_slave+0xe0>)
   2a606:	4798      	blx	r3
   2a608:	e005      	b.n	2a616 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2a60a:	68bb      	ldr	r3, [r7, #8]
   2a60c:	781b      	ldrb	r3, [r3, #0]
   2a60e:	2101      	movs	r1, #1
   2a610:	0018      	movs	r0, r3
   2a612:	4b04      	ldr	r3, [pc, #16]	; (2a624 <spi_select_slave+0xe0>)
   2a614:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2a616:	2300      	movs	r3, #0
}
   2a618:	0018      	movs	r0, r3
   2a61a:	46bd      	mov	sp, r7
   2a61c:	b006      	add	sp, #24
   2a61e:	bd80      	pop	{r7, pc}
   2a620:	00029c09 	.word	0x00029c09
   2a624:	00029a61 	.word	0x00029a61
   2a628:	00029c59 	.word	0x00029c59
   2a62c:	00029c31 	.word	0x00029c31
   2a630:	00029ca1 	.word	0x00029ca1

0002a634 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2a634:	b580      	push	{r7, lr}
   2a636:	b08a      	sub	sp, #40	; 0x28
   2a638:	af00      	add	r7, sp, #0
   2a63a:	60f8      	str	r0, [r7, #12]
   2a63c:	60b9      	str	r1, [r7, #8]
   2a63e:	1dbb      	adds	r3, r7, #6
   2a640:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
   2a642:	1dbb      	adds	r3, r7, #6
   2a644:	881b      	ldrh	r3, [r3, #0]
   2a646:	2b00      	cmp	r3, #0
   2a648:	d101      	bne.n	2a64e <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2a64a:	2317      	movs	r3, #23
   2a64c:	e16a      	b.n	2a924 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   2a64e:	68fb      	ldr	r3, [r7, #12]
   2a650:	795b      	ldrb	r3, [r3, #5]
   2a652:	2b00      	cmp	r3, #0
   2a654:	d109      	bne.n	2a66a <spi_write_buffer_wait+0x36>
   2a656:	68fb      	ldr	r3, [r7, #12]
   2a658:	0018      	movs	r0, r3
   2a65a:	4bb4      	ldr	r3, [pc, #720]	; (2a92c <spi_write_buffer_wait+0x2f8>)
   2a65c:	4798      	blx	r3
   2a65e:	1e03      	subs	r3, r0, #0
   2a660:	d003      	beq.n	2a66a <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   2a662:	68fb      	ldr	r3, [r7, #12]
   2a664:	0018      	movs	r0, r3
   2a666:	4bb2      	ldr	r3, [pc, #712]	; (2a930 <spi_write_buffer_wait+0x2fc>)
   2a668:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   2a66a:	2326      	movs	r3, #38	; 0x26
   2a66c:	18fb      	adds	r3, r7, r3
   2a66e:	2200      	movs	r2, #0
   2a670:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2a672:	2324      	movs	r3, #36	; 0x24
   2a674:	18fb      	adds	r3, r7, r3
   2a676:	1dba      	adds	r2, r7, #6
   2a678:	8812      	ldrh	r2, [r2, #0]
   2a67a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2a67c:	e0fe      	b.n	2a87c <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   2a67e:	68fb      	ldr	r3, [r7, #12]
   2a680:	795b      	ldrb	r3, [r3, #5]
   2a682:	2b00      	cmp	r3, #0
   2a684:	d12a      	bne.n	2a6dc <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a686:	2300      	movs	r3, #0
   2a688:	623b      	str	r3, [r7, #32]
   2a68a:	e008      	b.n	2a69e <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
   2a68c:	68fb      	ldr	r3, [r7, #12]
   2a68e:	0018      	movs	r0, r3
   2a690:	4ba8      	ldr	r3, [pc, #672]	; (2a934 <spi_write_buffer_wait+0x300>)
   2a692:	4798      	blx	r3
   2a694:	1e03      	subs	r3, r0, #0
   2a696:	d107      	bne.n	2a6a8 <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a698:	6a3b      	ldr	r3, [r7, #32]
   2a69a:	3301      	adds	r3, #1
   2a69c:	623b      	str	r3, [r7, #32]
   2a69e:	6a3b      	ldr	r3, [r7, #32]
   2a6a0:	4aa5      	ldr	r2, [pc, #660]	; (2a938 <spi_write_buffer_wait+0x304>)
   2a6a2:	4293      	cmp	r3, r2
   2a6a4:	d9f2      	bls.n	2a68c <spi_write_buffer_wait+0x58>
   2a6a6:	e000      	b.n	2a6aa <spi_write_buffer_wait+0x76>
					break;
   2a6a8:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a6aa:	68fb      	ldr	r3, [r7, #12]
   2a6ac:	0018      	movs	r0, r3
   2a6ae:	4b9f      	ldr	r3, [pc, #636]	; (2a92c <spi_write_buffer_wait+0x2f8>)
   2a6b0:	4798      	blx	r3
   2a6b2:	1e03      	subs	r3, r0, #0
   2a6b4:	d005      	beq.n	2a6c2 <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
   2a6b6:	68fb      	ldr	r3, [r7, #12]
   2a6b8:	0018      	movs	r0, r3
   2a6ba:	4b9d      	ldr	r3, [pc, #628]	; (2a930 <spi_write_buffer_wait+0x2fc>)
   2a6bc:	4798      	blx	r3
				return STATUS_ABORTED;
   2a6be:	2304      	movs	r3, #4
   2a6c0:	e130      	b.n	2a924 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
   2a6c2:	68fb      	ldr	r3, [r7, #12]
   2a6c4:	0018      	movs	r0, r3
   2a6c6:	4b9b      	ldr	r3, [pc, #620]	; (2a934 <spi_write_buffer_wait+0x300>)
   2a6c8:	4798      	blx	r3
   2a6ca:	0003      	movs	r3, r0
   2a6cc:	001a      	movs	r2, r3
   2a6ce:	2301      	movs	r3, #1
   2a6d0:	4053      	eors	r3, r2
   2a6d2:	b2db      	uxtb	r3, r3
   2a6d4:	2b00      	cmp	r3, #0
   2a6d6:	d001      	beq.n	2a6dc <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a6d8:	2312      	movs	r3, #18
   2a6da:	e123      	b.n	2a924 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2a6dc:	46c0      	nop			; (mov r8, r8)
   2a6de:	68fb      	ldr	r3, [r7, #12]
   2a6e0:	0018      	movs	r0, r3
   2a6e2:	4b94      	ldr	r3, [pc, #592]	; (2a934 <spi_write_buffer_wait+0x300>)
   2a6e4:	4798      	blx	r3
   2a6e6:	0003      	movs	r3, r0
   2a6e8:	001a      	movs	r2, r3
   2a6ea:	2301      	movs	r3, #1
   2a6ec:	4053      	eors	r3, r2
   2a6ee:	b2db      	uxtb	r3, r3
   2a6f0:	2b00      	cmp	r3, #0
   2a6f2:	d1f4      	bne.n	2a6de <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2a6f4:	2326      	movs	r3, #38	; 0x26
   2a6f6:	18fb      	adds	r3, r7, r3
   2a6f8:	881b      	ldrh	r3, [r3, #0]
   2a6fa:	2226      	movs	r2, #38	; 0x26
   2a6fc:	18ba      	adds	r2, r7, r2
   2a6fe:	1c59      	adds	r1, r3, #1
   2a700:	8011      	strh	r1, [r2, #0]
   2a702:	001a      	movs	r2, r3
   2a704:	68bb      	ldr	r3, [r7, #8]
   2a706:	189b      	adds	r3, r3, r2
   2a708:	781a      	ldrb	r2, [r3, #0]
   2a70a:	231e      	movs	r3, #30
   2a70c:	18fb      	adds	r3, r7, r3
   2a70e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a710:	68fb      	ldr	r3, [r7, #12]
   2a712:	799b      	ldrb	r3, [r3, #6]
   2a714:	2b01      	cmp	r3, #1
   2a716:	d115      	bne.n	2a744 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2a718:	2326      	movs	r3, #38	; 0x26
   2a71a:	18fb      	adds	r3, r7, r3
   2a71c:	881b      	ldrh	r3, [r3, #0]
   2a71e:	2226      	movs	r2, #38	; 0x26
   2a720:	18ba      	adds	r2, r7, r2
   2a722:	1c59      	adds	r1, r3, #1
   2a724:	8011      	strh	r1, [r2, #0]
   2a726:	001a      	movs	r2, r3
   2a728:	68bb      	ldr	r3, [r7, #8]
   2a72a:	189b      	adds	r3, r3, r2
   2a72c:	781b      	ldrb	r3, [r3, #0]
   2a72e:	021b      	lsls	r3, r3, #8
   2a730:	b21a      	sxth	r2, r3
   2a732:	231e      	movs	r3, #30
   2a734:	18fb      	adds	r3, r7, r3
   2a736:	2100      	movs	r1, #0
   2a738:	5e5b      	ldrsh	r3, [r3, r1]
   2a73a:	4313      	orrs	r3, r2
   2a73c:	b21a      	sxth	r2, r3
   2a73e:	231e      	movs	r3, #30
   2a740:	18fb      	adds	r3, r7, r3
   2a742:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2a744:	231e      	movs	r3, #30
   2a746:	18fb      	adds	r3, r7, r3
   2a748:	881a      	ldrh	r2, [r3, #0]
   2a74a:	68fb      	ldr	r3, [r7, #12]
   2a74c:	0011      	movs	r1, r2
   2a74e:	0018      	movs	r0, r3
   2a750:	4b7a      	ldr	r3, [pc, #488]	; (2a93c <spi_write_buffer_wait+0x308>)
   2a752:	4798      	blx	r3

		if (module->receiver_enabled) {
   2a754:	68fb      	ldr	r3, [r7, #12]
   2a756:	79db      	ldrb	r3, [r3, #7]
   2a758:	2224      	movs	r2, #36	; 0x24
   2a75a:	18ba      	adds	r2, r7, r2
   2a75c:	2124      	movs	r1, #36	; 0x24
   2a75e:	1879      	adds	r1, r7, r1
   2a760:	8809      	ldrh	r1, [r1, #0]
   2a762:	8011      	strh	r1, [r2, #0]
   2a764:	2b00      	cmp	r3, #0
   2a766:	d100      	bne.n	2a76a <spi_write_buffer_wait+0x136>
   2a768:	e088      	b.n	2a87c <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   2a76a:	68fb      	ldr	r3, [r7, #12]
   2a76c:	795b      	ldrb	r3, [r3, #5]
   2a76e:	2b00      	cmp	r3, #0
   2a770:	d000      	beq.n	2a774 <spi_write_buffer_wait+0x140>
   2a772:	e069      	b.n	2a848 <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a774:	2300      	movs	r3, #0
   2a776:	61bb      	str	r3, [r7, #24]
   2a778:	e047      	b.n	2a80a <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
   2a77a:	1dbb      	adds	r3, r7, #6
   2a77c:	881b      	ldrh	r3, [r3, #0]
   2a77e:	2b00      	cmp	r3, #0
   2a780:	d03a      	beq.n	2a7f8 <spi_write_buffer_wait+0x1c4>
   2a782:	68fb      	ldr	r3, [r7, #12]
   2a784:	0018      	movs	r0, r3
   2a786:	4b6b      	ldr	r3, [pc, #428]	; (2a934 <spi_write_buffer_wait+0x300>)
   2a788:	4798      	blx	r3
   2a78a:	1e03      	subs	r3, r0, #0
   2a78c:	d034      	beq.n	2a7f8 <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
   2a78e:	2326      	movs	r3, #38	; 0x26
   2a790:	18fb      	adds	r3, r7, r3
   2a792:	881b      	ldrh	r3, [r3, #0]
   2a794:	2226      	movs	r2, #38	; 0x26
   2a796:	18ba      	adds	r2, r7, r2
   2a798:	1c59      	adds	r1, r3, #1
   2a79a:	8011      	strh	r1, [r2, #0]
   2a79c:	001a      	movs	r2, r3
   2a79e:	68bb      	ldr	r3, [r7, #8]
   2a7a0:	189b      	adds	r3, r3, r2
   2a7a2:	781a      	ldrb	r2, [r3, #0]
   2a7a4:	231e      	movs	r3, #30
   2a7a6:	18fb      	adds	r3, r7, r3
   2a7a8:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a7aa:	68fb      	ldr	r3, [r7, #12]
   2a7ac:	799b      	ldrb	r3, [r3, #6]
   2a7ae:	2b01      	cmp	r3, #1
   2a7b0:	d115      	bne.n	2a7de <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
   2a7b2:	2326      	movs	r3, #38	; 0x26
   2a7b4:	18fb      	adds	r3, r7, r3
   2a7b6:	881b      	ldrh	r3, [r3, #0]
   2a7b8:	2226      	movs	r2, #38	; 0x26
   2a7ba:	18ba      	adds	r2, r7, r2
   2a7bc:	1c59      	adds	r1, r3, #1
   2a7be:	8011      	strh	r1, [r2, #0]
   2a7c0:	001a      	movs	r2, r3
   2a7c2:	68bb      	ldr	r3, [r7, #8]
   2a7c4:	189b      	adds	r3, r3, r2
   2a7c6:	781b      	ldrb	r3, [r3, #0]
   2a7c8:	021b      	lsls	r3, r3, #8
   2a7ca:	b21a      	sxth	r2, r3
   2a7cc:	231e      	movs	r3, #30
   2a7ce:	18fb      	adds	r3, r7, r3
   2a7d0:	2100      	movs	r1, #0
   2a7d2:	5e5b      	ldrsh	r3, [r3, r1]
   2a7d4:	4313      	orrs	r3, r2
   2a7d6:	b21a      	sxth	r2, r3
   2a7d8:	231e      	movs	r3, #30
   2a7da:	18fb      	adds	r3, r7, r3
   2a7dc:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   2a7de:	231e      	movs	r3, #30
   2a7e0:	18fb      	adds	r3, r7, r3
   2a7e2:	881a      	ldrh	r2, [r3, #0]
   2a7e4:	68fb      	ldr	r3, [r7, #12]
   2a7e6:	0011      	movs	r1, r2
   2a7e8:	0018      	movs	r0, r3
   2a7ea:	4b54      	ldr	r3, [pc, #336]	; (2a93c <spi_write_buffer_wait+0x308>)
   2a7ec:	4798      	blx	r3
						length--;
   2a7ee:	1dbb      	adds	r3, r7, #6
   2a7f0:	881a      	ldrh	r2, [r3, #0]
   2a7f2:	1dbb      	adds	r3, r7, #6
   2a7f4:	3a01      	subs	r2, #1
   2a7f6:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   2a7f8:	68fb      	ldr	r3, [r7, #12]
   2a7fa:	0018      	movs	r0, r3
   2a7fc:	4b50      	ldr	r3, [pc, #320]	; (2a940 <spi_write_buffer_wait+0x30c>)
   2a7fe:	4798      	blx	r3
   2a800:	1e03      	subs	r3, r0, #0
   2a802:	d107      	bne.n	2a814 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a804:	69bb      	ldr	r3, [r7, #24]
   2a806:	3301      	adds	r3, #1
   2a808:	61bb      	str	r3, [r7, #24]
   2a80a:	69bb      	ldr	r3, [r7, #24]
   2a80c:	4a4a      	ldr	r2, [pc, #296]	; (2a938 <spi_write_buffer_wait+0x304>)
   2a80e:	4293      	cmp	r3, r2
   2a810:	d9b3      	bls.n	2a77a <spi_write_buffer_wait+0x146>
   2a812:	e000      	b.n	2a816 <spi_write_buffer_wait+0x1e2>
						break;
   2a814:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   2a816:	68fb      	ldr	r3, [r7, #12]
   2a818:	0018      	movs	r0, r3
   2a81a:	4b44      	ldr	r3, [pc, #272]	; (2a92c <spi_write_buffer_wait+0x2f8>)
   2a81c:	4798      	blx	r3
   2a81e:	1e03      	subs	r3, r0, #0
   2a820:	d005      	beq.n	2a82e <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
   2a822:	68fb      	ldr	r3, [r7, #12]
   2a824:	0018      	movs	r0, r3
   2a826:	4b42      	ldr	r3, [pc, #264]	; (2a930 <spi_write_buffer_wait+0x2fc>)
   2a828:	4798      	blx	r3
					return STATUS_ABORTED;
   2a82a:	2304      	movs	r3, #4
   2a82c:	e07a      	b.n	2a924 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
   2a82e:	68fb      	ldr	r3, [r7, #12]
   2a830:	0018      	movs	r0, r3
   2a832:	4b43      	ldr	r3, [pc, #268]	; (2a940 <spi_write_buffer_wait+0x30c>)
   2a834:	4798      	blx	r3
   2a836:	0003      	movs	r3, r0
   2a838:	001a      	movs	r2, r3
   2a83a:	2301      	movs	r3, #1
   2a83c:	4053      	eors	r3, r2
   2a83e:	b2db      	uxtb	r3, r3
   2a840:	2b00      	cmp	r3, #0
   2a842:	d001      	beq.n	2a848 <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2a844:	2312      	movs	r3, #18
   2a846:	e06d      	b.n	2a924 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2a848:	46c0      	nop			; (mov r8, r8)
   2a84a:	68fb      	ldr	r3, [r7, #12]
   2a84c:	0018      	movs	r0, r3
   2a84e:	4b3c      	ldr	r3, [pc, #240]	; (2a940 <spi_write_buffer_wait+0x30c>)
   2a850:	4798      	blx	r3
   2a852:	0003      	movs	r3, r0
   2a854:	001a      	movs	r2, r3
   2a856:	2301      	movs	r3, #1
   2a858:	4053      	eors	r3, r2
   2a85a:	b2db      	uxtb	r3, r3
   2a85c:	2b00      	cmp	r3, #0
   2a85e:	d1f4      	bne.n	2a84a <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2a860:	2312      	movs	r3, #18
   2a862:	18fa      	adds	r2, r7, r3
   2a864:	68fb      	ldr	r3, [r7, #12]
   2a866:	0011      	movs	r1, r2
   2a868:	0018      	movs	r0, r3
   2a86a:	4b36      	ldr	r3, [pc, #216]	; (2a944 <spi_write_buffer_wait+0x310>)
   2a86c:	4798      	blx	r3
			flush_length--;
   2a86e:	2324      	movs	r3, #36	; 0x24
   2a870:	18fb      	adds	r3, r7, r3
   2a872:	881a      	ldrh	r2, [r3, #0]
   2a874:	2324      	movs	r3, #36	; 0x24
   2a876:	18fb      	adds	r3, r7, r3
   2a878:	3a01      	subs	r2, #1
   2a87a:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2a87c:	1dbb      	adds	r3, r7, #6
   2a87e:	881b      	ldrh	r3, [r3, #0]
   2a880:	1dba      	adds	r2, r7, #6
   2a882:	1e59      	subs	r1, r3, #1
   2a884:	8011      	strh	r1, [r2, #0]
   2a886:	2b00      	cmp	r3, #0
   2a888:	d000      	beq.n	2a88c <spi_write_buffer_wait+0x258>
   2a88a:	e6f8      	b.n	2a67e <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2a88c:	68fb      	ldr	r3, [r7, #12]
   2a88e:	795b      	ldrb	r3, [r3, #5]
   2a890:	2b01      	cmp	r3, #1
   2a892:	d10b      	bne.n	2a8ac <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   2a894:	46c0      	nop			; (mov r8, r8)
   2a896:	68fb      	ldr	r3, [r7, #12]
   2a898:	0018      	movs	r0, r3
   2a89a:	4b24      	ldr	r3, [pc, #144]	; (2a92c <spi_write_buffer_wait+0x2f8>)
   2a89c:	4798      	blx	r3
   2a89e:	0003      	movs	r3, r0
   2a8a0:	001a      	movs	r2, r3
   2a8a2:	2301      	movs	r3, #1
   2a8a4:	4053      	eors	r3, r2
   2a8a6:	b2db      	uxtb	r3, r3
   2a8a8:	2b00      	cmp	r3, #0
   2a8aa:	d1f4      	bne.n	2a896 <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   2a8ac:	68fb      	ldr	r3, [r7, #12]
   2a8ae:	795b      	ldrb	r3, [r3, #5]
   2a8b0:	2b00      	cmp	r3, #0
   2a8b2:	d136      	bne.n	2a922 <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
   2a8b4:	68fb      	ldr	r3, [r7, #12]
   2a8b6:	79db      	ldrb	r3, [r3, #7]
   2a8b8:	2b00      	cmp	r3, #0
   2a8ba:	d032      	beq.n	2a922 <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
   2a8bc:	e02c      	b.n	2a918 <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a8be:	2300      	movs	r3, #0
   2a8c0:	617b      	str	r3, [r7, #20]
   2a8c2:	e008      	b.n	2a8d6 <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
   2a8c4:	68fb      	ldr	r3, [r7, #12]
   2a8c6:	0018      	movs	r0, r3
   2a8c8:	4b1d      	ldr	r3, [pc, #116]	; (2a940 <spi_write_buffer_wait+0x30c>)
   2a8ca:	4798      	blx	r3
   2a8cc:	1e03      	subs	r3, r0, #0
   2a8ce:	d107      	bne.n	2a8e0 <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a8d0:	697b      	ldr	r3, [r7, #20]
   2a8d2:	3301      	adds	r3, #1
   2a8d4:	617b      	str	r3, [r7, #20]
   2a8d6:	697b      	ldr	r3, [r7, #20]
   2a8d8:	4a17      	ldr	r2, [pc, #92]	; (2a938 <spi_write_buffer_wait+0x304>)
   2a8da:	4293      	cmp	r3, r2
   2a8dc:	d9f2      	bls.n	2a8c4 <spi_write_buffer_wait+0x290>
   2a8de:	e000      	b.n	2a8e2 <spi_write_buffer_wait+0x2ae>
						break;
   2a8e0:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   2a8e2:	68fb      	ldr	r3, [r7, #12]
   2a8e4:	0018      	movs	r0, r3
   2a8e6:	4b16      	ldr	r3, [pc, #88]	; (2a940 <spi_write_buffer_wait+0x30c>)
   2a8e8:	4798      	blx	r3
   2a8ea:	0003      	movs	r3, r0
   2a8ec:	001a      	movs	r2, r3
   2a8ee:	2301      	movs	r3, #1
   2a8f0:	4053      	eors	r3, r2
   2a8f2:	b2db      	uxtb	r3, r3
   2a8f4:	2b00      	cmp	r3, #0
   2a8f6:	d001      	beq.n	2a8fc <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2a8f8:	2312      	movs	r3, #18
   2a8fa:	e013      	b.n	2a924 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   2a8fc:	2310      	movs	r3, #16
   2a8fe:	18fa      	adds	r2, r7, r3
   2a900:	68fb      	ldr	r3, [r7, #12]
   2a902:	0011      	movs	r1, r2
   2a904:	0018      	movs	r0, r3
   2a906:	4b0f      	ldr	r3, [pc, #60]	; (2a944 <spi_write_buffer_wait+0x310>)
   2a908:	4798      	blx	r3
				flush_length--;
   2a90a:	2324      	movs	r3, #36	; 0x24
   2a90c:	18fb      	adds	r3, r7, r3
   2a90e:	881a      	ldrh	r2, [r3, #0]
   2a910:	2324      	movs	r3, #36	; 0x24
   2a912:	18fb      	adds	r3, r7, r3
   2a914:	3a01      	subs	r2, #1
   2a916:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
   2a918:	2324      	movs	r3, #36	; 0x24
   2a91a:	18fb      	adds	r3, r7, r3
   2a91c:	881b      	ldrh	r3, [r3, #0]
   2a91e:	2b00      	cmp	r3, #0
   2a920:	d1cd      	bne.n	2a8be <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
   2a922:	2300      	movs	r3, #0
}
   2a924:	0018      	movs	r0, r3
   2a926:	46bd      	mov	sp, r7
   2a928:	b00a      	add	sp, #40	; 0x28
   2a92a:	bd80      	pop	{r7, pc}
   2a92c:	00029be1 	.word	0x00029be1
   2a930:	00029df1 	.word	0x00029df1
   2a934:	00029c09 	.word	0x00029c09
   2a938:	00002710 	.word	0x00002710
   2a93c:	00029c59 	.word	0x00029c59
   2a940:	00029c31 	.word	0x00029c31
   2a944:	00029ca1 	.word	0x00029ca1

0002a948 <system_gclk_chan_get_config_defaults>:
{
   2a948:	b580      	push	{r7, lr}
   2a94a:	b082      	sub	sp, #8
   2a94c:	af00      	add	r7, sp, #0
   2a94e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a950:	687b      	ldr	r3, [r7, #4]
   2a952:	2200      	movs	r2, #0
   2a954:	701a      	strb	r2, [r3, #0]
}
   2a956:	46c0      	nop			; (mov r8, r8)
   2a958:	46bd      	mov	sp, r7
   2a95a:	b002      	add	sp, #8
   2a95c:	bd80      	pop	{r7, pc}
	...

0002a960 <system_apb_clock_set_mask>:
{
   2a960:	b580      	push	{r7, lr}
   2a962:	b082      	sub	sp, #8
   2a964:	af00      	add	r7, sp, #0
   2a966:	0002      	movs	r2, r0
   2a968:	6039      	str	r1, [r7, #0]
   2a96a:	1dfb      	adds	r3, r7, #7
   2a96c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a96e:	1dfb      	adds	r3, r7, #7
   2a970:	781b      	ldrb	r3, [r3, #0]
   2a972:	2b01      	cmp	r3, #1
   2a974:	d00a      	beq.n	2a98c <system_apb_clock_set_mask+0x2c>
   2a976:	2b02      	cmp	r3, #2
   2a978:	d00f      	beq.n	2a99a <system_apb_clock_set_mask+0x3a>
   2a97a:	2b00      	cmp	r3, #0
   2a97c:	d114      	bne.n	2a9a8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a97e:	4b0e      	ldr	r3, [pc, #56]	; (2a9b8 <system_apb_clock_set_mask+0x58>)
   2a980:	4a0d      	ldr	r2, [pc, #52]	; (2a9b8 <system_apb_clock_set_mask+0x58>)
   2a982:	6991      	ldr	r1, [r2, #24]
   2a984:	683a      	ldr	r2, [r7, #0]
   2a986:	430a      	orrs	r2, r1
   2a988:	619a      	str	r2, [r3, #24]
			break;
   2a98a:	e00f      	b.n	2a9ac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a98c:	4b0a      	ldr	r3, [pc, #40]	; (2a9b8 <system_apb_clock_set_mask+0x58>)
   2a98e:	4a0a      	ldr	r2, [pc, #40]	; (2a9b8 <system_apb_clock_set_mask+0x58>)
   2a990:	69d1      	ldr	r1, [r2, #28]
   2a992:	683a      	ldr	r2, [r7, #0]
   2a994:	430a      	orrs	r2, r1
   2a996:	61da      	str	r2, [r3, #28]
			break;
   2a998:	e008      	b.n	2a9ac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a99a:	4b07      	ldr	r3, [pc, #28]	; (2a9b8 <system_apb_clock_set_mask+0x58>)
   2a99c:	4a06      	ldr	r2, [pc, #24]	; (2a9b8 <system_apb_clock_set_mask+0x58>)
   2a99e:	6a11      	ldr	r1, [r2, #32]
   2a9a0:	683a      	ldr	r2, [r7, #0]
   2a9a2:	430a      	orrs	r2, r1
   2a9a4:	621a      	str	r2, [r3, #32]
			break;
   2a9a6:	e001      	b.n	2a9ac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a9a8:	2317      	movs	r3, #23
   2a9aa:	e000      	b.n	2a9ae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a9ac:	2300      	movs	r3, #0
}
   2a9ae:	0018      	movs	r0, r3
   2a9b0:	46bd      	mov	sp, r7
   2a9b2:	b002      	add	sp, #8
   2a9b4:	bd80      	pop	{r7, pc}
   2a9b6:	46c0      	nop			; (mov r8, r8)
   2a9b8:	40000400 	.word	0x40000400

0002a9bc <system_pinmux_get_config_defaults>:
{
   2a9bc:	b580      	push	{r7, lr}
   2a9be:	b082      	sub	sp, #8
   2a9c0:	af00      	add	r7, sp, #0
   2a9c2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a9c4:	687b      	ldr	r3, [r7, #4]
   2a9c6:	2280      	movs	r2, #128	; 0x80
   2a9c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a9ca:	687b      	ldr	r3, [r7, #4]
   2a9cc:	2200      	movs	r2, #0
   2a9ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a9d0:	687b      	ldr	r3, [r7, #4]
   2a9d2:	2201      	movs	r2, #1
   2a9d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a9d6:	687b      	ldr	r3, [r7, #4]
   2a9d8:	2200      	movs	r2, #0
   2a9da:	70da      	strb	r2, [r3, #3]
}
   2a9dc:	46c0      	nop			; (mov r8, r8)
   2a9de:	46bd      	mov	sp, r7
   2a9e0:	b002      	add	sp, #8
   2a9e2:	bd80      	pop	{r7, pc}

0002a9e4 <system_is_debugger_present>:
{
   2a9e4:	b580      	push	{r7, lr}
   2a9e6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2a9e8:	4b05      	ldr	r3, [pc, #20]	; (2aa00 <system_is_debugger_present+0x1c>)
   2a9ea:	789b      	ldrb	r3, [r3, #2]
   2a9ec:	b2db      	uxtb	r3, r3
   2a9ee:	001a      	movs	r2, r3
   2a9f0:	2302      	movs	r3, #2
   2a9f2:	4013      	ands	r3, r2
   2a9f4:	1e5a      	subs	r2, r3, #1
   2a9f6:	4193      	sbcs	r3, r2
   2a9f8:	b2db      	uxtb	r3, r3
}
   2a9fa:	0018      	movs	r0, r3
   2a9fc:	46bd      	mov	sp, r7
   2a9fe:	bd80      	pop	{r7, pc}
   2aa00:	41002000 	.word	0x41002000

0002aa04 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   2aa04:	b580      	push	{r7, lr}
   2aa06:	b084      	sub	sp, #16
   2aa08:	af00      	add	r7, sp, #0
   2aa0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   2aa0c:	687b      	ldr	r3, [r7, #4]
   2aa0e:	681b      	ldr	r3, [r3, #0]
   2aa10:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2aa12:	68fb      	ldr	r3, [r7, #12]
   2aa14:	69db      	ldr	r3, [r3, #28]
   2aa16:	1e5a      	subs	r2, r3, #1
   2aa18:	4193      	sbcs	r3, r2
   2aa1a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   2aa1c:	0018      	movs	r0, r3
   2aa1e:	46bd      	mov	sp, r7
   2aa20:	b004      	add	sp, #16
   2aa22:	bd80      	pop	{r7, pc}

0002aa24 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   2aa24:	b580      	push	{r7, lr}
   2aa26:	b082      	sub	sp, #8
   2aa28:	af00      	add	r7, sp, #0
   2aa2a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   2aa2c:	46c0      	nop			; (mov r8, r8)
   2aa2e:	687b      	ldr	r3, [r7, #4]
   2aa30:	0018      	movs	r0, r3
   2aa32:	4b04      	ldr	r3, [pc, #16]	; (2aa44 <_usart_wait_for_sync+0x20>)
   2aa34:	4798      	blx	r3
   2aa36:	1e03      	subs	r3, r0, #0
   2aa38:	d1f9      	bne.n	2aa2e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   2aa3a:	46c0      	nop			; (mov r8, r8)
   2aa3c:	46bd      	mov	sp, r7
   2aa3e:	b002      	add	sp, #8
   2aa40:	bd80      	pop	{r7, pc}
   2aa42:	46c0      	nop			; (mov r8, r8)
   2aa44:	0002aa05 	.word	0x0002aa05

0002aa48 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   2aa48:	b5b0      	push	{r4, r5, r7, lr}
   2aa4a:	b08c      	sub	sp, #48	; 0x30
   2aa4c:	af02      	add	r7, sp, #8
   2aa4e:	6078      	str	r0, [r7, #4]
   2aa50:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2aa52:	687b      	ldr	r3, [r7, #4]
   2aa54:	681b      	ldr	r3, [r3, #0]
   2aa56:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2aa58:	687b      	ldr	r3, [r7, #4]
   2aa5a:	681b      	ldr	r3, [r3, #0]
   2aa5c:	0018      	movs	r0, r3
   2aa5e:	4bab      	ldr	r3, [pc, #684]	; (2ad0c <_usart_set_config+0x2c4>)
   2aa60:	4798      	blx	r3
   2aa62:	0003      	movs	r3, r0
   2aa64:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2aa66:	697b      	ldr	r3, [r7, #20]
   2aa68:	3314      	adds	r3, #20
   2aa6a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2aa6c:	2300      	movs	r3, #0
   2aa6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2aa70:	2300      	movs	r3, #0
   2aa72:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2aa74:	230a      	movs	r3, #10
   2aa76:	18fb      	adds	r3, r7, r3
   2aa78:	2200      	movs	r2, #0
   2aa7a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2aa7c:	231f      	movs	r3, #31
   2aa7e:	18fb      	adds	r3, r7, r3
   2aa80:	2200      	movs	r2, #0
   2aa82:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2aa84:	231e      	movs	r3, #30
   2aa86:	18fb      	adds	r3, r7, r3
   2aa88:	2210      	movs	r2, #16
   2aa8a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2aa8c:	683b      	ldr	r3, [r7, #0]
   2aa8e:	8a1b      	ldrh	r3, [r3, #16]
   2aa90:	2280      	movs	r2, #128	; 0x80
   2aa92:	01d2      	lsls	r2, r2, #7
   2aa94:	4293      	cmp	r3, r2
   2aa96:	d01c      	beq.n	2aad2 <_usart_set_config+0x8a>
   2aa98:	2280      	movs	r2, #128	; 0x80
   2aa9a:	01d2      	lsls	r2, r2, #7
   2aa9c:	4293      	cmp	r3, r2
   2aa9e:	dc06      	bgt.n	2aaae <_usart_set_config+0x66>
   2aaa0:	2b00      	cmp	r3, #0
   2aaa2:	d00d      	beq.n	2aac0 <_usart_set_config+0x78>
   2aaa4:	2280      	movs	r2, #128	; 0x80
   2aaa6:	0192      	lsls	r2, r2, #6
   2aaa8:	4293      	cmp	r3, r2
   2aaaa:	d024      	beq.n	2aaf6 <_usart_set_config+0xae>
   2aaac:	e035      	b.n	2ab1a <_usart_set_config+0xd2>
   2aaae:	22c0      	movs	r2, #192	; 0xc0
   2aab0:	01d2      	lsls	r2, r2, #7
   2aab2:	4293      	cmp	r3, r2
   2aab4:	d028      	beq.n	2ab08 <_usart_set_config+0xc0>
   2aab6:	2280      	movs	r2, #128	; 0x80
   2aab8:	0212      	lsls	r2, r2, #8
   2aaba:	4293      	cmp	r3, r2
   2aabc:	d012      	beq.n	2aae4 <_usart_set_config+0x9c>
   2aabe:	e02c      	b.n	2ab1a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2aac0:	231f      	movs	r3, #31
   2aac2:	18fb      	adds	r3, r7, r3
   2aac4:	2200      	movs	r2, #0
   2aac6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2aac8:	231e      	movs	r3, #30
   2aaca:	18fb      	adds	r3, r7, r3
   2aacc:	2210      	movs	r2, #16
   2aace:	701a      	strb	r2, [r3, #0]
			break;
   2aad0:	e023      	b.n	2ab1a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2aad2:	231f      	movs	r3, #31
   2aad4:	18fb      	adds	r3, r7, r3
   2aad6:	2200      	movs	r2, #0
   2aad8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2aada:	231e      	movs	r3, #30
   2aadc:	18fb      	adds	r3, r7, r3
   2aade:	2208      	movs	r2, #8
   2aae0:	701a      	strb	r2, [r3, #0]
			break;
   2aae2:	e01a      	b.n	2ab1a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2aae4:	231f      	movs	r3, #31
   2aae6:	18fb      	adds	r3, r7, r3
   2aae8:	2200      	movs	r2, #0
   2aaea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2aaec:	231e      	movs	r3, #30
   2aaee:	18fb      	adds	r3, r7, r3
   2aaf0:	2203      	movs	r2, #3
   2aaf2:	701a      	strb	r2, [r3, #0]
			break;
   2aaf4:	e011      	b.n	2ab1a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2aaf6:	231f      	movs	r3, #31
   2aaf8:	18fb      	adds	r3, r7, r3
   2aafa:	2201      	movs	r2, #1
   2aafc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2aafe:	231e      	movs	r3, #30
   2ab00:	18fb      	adds	r3, r7, r3
   2ab02:	2210      	movs	r2, #16
   2ab04:	701a      	strb	r2, [r3, #0]
			break;
   2ab06:	e008      	b.n	2ab1a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2ab08:	231f      	movs	r3, #31
   2ab0a:	18fb      	adds	r3, r7, r3
   2ab0c:	2201      	movs	r2, #1
   2ab0e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2ab10:	231e      	movs	r3, #30
   2ab12:	18fb      	adds	r3, r7, r3
   2ab14:	2208      	movs	r2, #8
   2ab16:	701a      	strb	r2, [r3, #0]
			break;
   2ab18:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2ab1a:	683b      	ldr	r3, [r7, #0]
   2ab1c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2ab1e:	683b      	ldr	r3, [r7, #0]
   2ab20:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2ab22:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2ab24:	683b      	ldr	r3, [r7, #0]
   2ab26:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   2ab28:	4313      	orrs	r3, r2
		config->sample_rate |
   2ab2a:	683a      	ldr	r2, [r7, #0]
   2ab2c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2ab2e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2ab30:	683a      	ldr	r2, [r7, #0]
   2ab32:	7e12      	ldrb	r2, [r2, #24]
   2ab34:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2ab36:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   2ab38:	683a      	ldr	r2, [r7, #0]
   2ab3a:	2126      	movs	r1, #38	; 0x26
   2ab3c:	5c52      	ldrb	r2, [r2, r1]
   2ab3e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2ab40:	4313      	orrs	r3, r2
   2ab42:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2ab44:	231d      	movs	r3, #29
   2ab46:	18fb      	adds	r3, r7, r3
   2ab48:	2200      	movs	r2, #0
   2ab4a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2ab4c:	683b      	ldr	r3, [r7, #0]
   2ab4e:	685b      	ldr	r3, [r3, #4]
   2ab50:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2ab52:	68fb      	ldr	r3, [r7, #12]
   2ab54:	2b00      	cmp	r3, #0
   2ab56:	d01e      	beq.n	2ab96 <_usart_set_config+0x14e>
   2ab58:	2280      	movs	r2, #128	; 0x80
   2ab5a:	0552      	lsls	r2, r2, #21
   2ab5c:	4293      	cmp	r3, r2
   2ab5e:	d14f      	bne.n	2ac00 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2ab60:	683b      	ldr	r3, [r7, #0]
   2ab62:	2227      	movs	r2, #39	; 0x27
   2ab64:	5c9b      	ldrb	r3, [r3, r2]
   2ab66:	2201      	movs	r2, #1
   2ab68:	4053      	eors	r3, r2
   2ab6a:	b2db      	uxtb	r3, r3
   2ab6c:	2b00      	cmp	r3, #0
   2ab6e:	d046      	beq.n	2abfe <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2ab70:	683b      	ldr	r3, [r7, #0]
   2ab72:	6a1d      	ldr	r5, [r3, #32]
   2ab74:	693b      	ldr	r3, [r7, #16]
   2ab76:	b2db      	uxtb	r3, r3
   2ab78:	0018      	movs	r0, r3
   2ab7a:	4b65      	ldr	r3, [pc, #404]	; (2ad10 <_usart_set_config+0x2c8>)
   2ab7c:	4798      	blx	r3
   2ab7e:	0001      	movs	r1, r0
   2ab80:	231d      	movs	r3, #29
   2ab82:	18fc      	adds	r4, r7, r3
   2ab84:	230a      	movs	r3, #10
   2ab86:	18fb      	adds	r3, r7, r3
   2ab88:	001a      	movs	r2, r3
   2ab8a:	0028      	movs	r0, r5
   2ab8c:	4b61      	ldr	r3, [pc, #388]	; (2ad14 <_usart_set_config+0x2cc>)
   2ab8e:	4798      	blx	r3
   2ab90:	0003      	movs	r3, r0
   2ab92:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2ab94:	e033      	b.n	2abfe <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2ab96:	683b      	ldr	r3, [r7, #0]
   2ab98:	2227      	movs	r2, #39	; 0x27
   2ab9a:	5c9b      	ldrb	r3, [r3, r2]
   2ab9c:	2b00      	cmp	r3, #0
   2ab9e:	d014      	beq.n	2abca <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2aba0:	683b      	ldr	r3, [r7, #0]
   2aba2:	6a18      	ldr	r0, [r3, #32]
   2aba4:	683b      	ldr	r3, [r7, #0]
   2aba6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   2aba8:	231d      	movs	r3, #29
   2abaa:	18fc      	adds	r4, r7, r3
   2abac:	231f      	movs	r3, #31
   2abae:	18fb      	adds	r3, r7, r3
   2abb0:	781d      	ldrb	r5, [r3, #0]
   2abb2:	230a      	movs	r3, #10
   2abb4:	18fa      	adds	r2, r7, r3
   2abb6:	231e      	movs	r3, #30
   2abb8:	18fb      	adds	r3, r7, r3
   2abba:	781b      	ldrb	r3, [r3, #0]
   2abbc:	9300      	str	r3, [sp, #0]
   2abbe:	002b      	movs	r3, r5
   2abc0:	4d55      	ldr	r5, [pc, #340]	; (2ad18 <_usart_set_config+0x2d0>)
   2abc2:	47a8      	blx	r5
   2abc4:	0003      	movs	r3, r0
   2abc6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   2abc8:	e01a      	b.n	2ac00 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2abca:	683b      	ldr	r3, [r7, #0]
   2abcc:	6a1d      	ldr	r5, [r3, #32]
   2abce:	693b      	ldr	r3, [r7, #16]
   2abd0:	b2db      	uxtb	r3, r3
   2abd2:	0018      	movs	r0, r3
   2abd4:	4b4e      	ldr	r3, [pc, #312]	; (2ad10 <_usart_set_config+0x2c8>)
   2abd6:	4798      	blx	r3
				status_code =
   2abd8:	231d      	movs	r3, #29
   2abda:	18fc      	adds	r4, r7, r3
   2abdc:	231f      	movs	r3, #31
   2abde:	18fb      	adds	r3, r7, r3
   2abe0:	7819      	ldrb	r1, [r3, #0]
   2abe2:	230a      	movs	r3, #10
   2abe4:	18fa      	adds	r2, r7, r3
   2abe6:	231e      	movs	r3, #30
   2abe8:	18fb      	adds	r3, r7, r3
   2abea:	781b      	ldrb	r3, [r3, #0]
   2abec:	9300      	str	r3, [sp, #0]
   2abee:	000b      	movs	r3, r1
   2abf0:	0001      	movs	r1, r0
   2abf2:	0028      	movs	r0, r5
   2abf4:	4d48      	ldr	r5, [pc, #288]	; (2ad18 <_usart_set_config+0x2d0>)
   2abf6:	47a8      	blx	r5
   2abf8:	0003      	movs	r3, r0
   2abfa:	7023      	strb	r3, [r4, #0]
			break;
   2abfc:	e000      	b.n	2ac00 <_usart_set_config+0x1b8>
			break;
   2abfe:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2ac00:	231d      	movs	r3, #29
   2ac02:	18fb      	adds	r3, r7, r3
   2ac04:	781b      	ldrb	r3, [r3, #0]
   2ac06:	2b00      	cmp	r3, #0
   2ac08:	d003      	beq.n	2ac12 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2ac0a:	231d      	movs	r3, #29
   2ac0c:	18fb      	adds	r3, r7, r3
   2ac0e:	781b      	ldrb	r3, [r3, #0]
   2ac10:	e077      	b.n	2ad02 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2ac12:	683b      	ldr	r3, [r7, #0]
   2ac14:	7e5b      	ldrb	r3, [r3, #25]
   2ac16:	2b00      	cmp	r3, #0
   2ac18:	d003      	beq.n	2ac22 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2ac1a:	683b      	ldr	r3, [r7, #0]
   2ac1c:	7e9a      	ldrb	r2, [r3, #26]
   2ac1e:	69bb      	ldr	r3, [r7, #24]
   2ac20:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2ac22:	687b      	ldr	r3, [r7, #4]
   2ac24:	0018      	movs	r0, r3
   2ac26:	4b3d      	ldr	r3, [pc, #244]	; (2ad1c <_usart_set_config+0x2d4>)
   2ac28:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2ac2a:	230a      	movs	r3, #10
   2ac2c:	18fb      	adds	r3, r7, r3
   2ac2e:	881a      	ldrh	r2, [r3, #0]
   2ac30:	69bb      	ldr	r3, [r7, #24]
   2ac32:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2ac34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ac36:	68fb      	ldr	r3, [r7, #12]
   2ac38:	4313      	orrs	r3, r2
   2ac3a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2ac3c:	683b      	ldr	r3, [r7, #0]
   2ac3e:	2227      	movs	r2, #39	; 0x27
   2ac40:	5c9b      	ldrb	r3, [r3, r2]
   2ac42:	2201      	movs	r2, #1
   2ac44:	4053      	eors	r3, r2
   2ac46:	b2db      	uxtb	r3, r3
   2ac48:	2b00      	cmp	r3, #0
   2ac4a:	d003      	beq.n	2ac54 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ac4e:	2204      	movs	r2, #4
   2ac50:	4313      	orrs	r3, r2
   2ac52:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2ac54:	683b      	ldr	r3, [r7, #0]
   2ac56:	7e5b      	ldrb	r3, [r3, #25]
   2ac58:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2ac5a:	683b      	ldr	r3, [r7, #0]
   2ac5c:	7f1b      	ldrb	r3, [r3, #28]
   2ac5e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2ac60:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2ac62:	683b      	ldr	r3, [r7, #0]
   2ac64:	7f5b      	ldrb	r3, [r3, #29]
   2ac66:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2ac68:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2ac6a:	683b      	ldr	r3, [r7, #0]
   2ac6c:	2124      	movs	r1, #36	; 0x24
   2ac6e:	5c5b      	ldrb	r3, [r3, r1]
   2ac70:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2ac72:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2ac74:	683b      	ldr	r3, [r7, #0]
   2ac76:	2125      	movs	r1, #37	; 0x25
   2ac78:	5c5b      	ldrb	r3, [r3, r1]
   2ac7a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2ac7c:	4313      	orrs	r3, r2
	ctrlb =  
   2ac7e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2ac80:	683b      	ldr	r3, [r7, #0]
   2ac82:	7a9b      	ldrb	r3, [r3, #10]
   2ac84:	001a      	movs	r2, r3
   2ac86:	6a3b      	ldr	r3, [r7, #32]
   2ac88:	4313      	orrs	r3, r2
   2ac8a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2ac8c:	683b      	ldr	r3, [r7, #0]
   2ac8e:	7adb      	ldrb	r3, [r3, #11]
   2ac90:	001a      	movs	r2, r3
   2ac92:	6a3b      	ldr	r3, [r7, #32]
   2ac94:	4313      	orrs	r3, r2
   2ac96:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   2ac98:	683b      	ldr	r3, [r7, #0]
   2ac9a:	891b      	ldrh	r3, [r3, #8]
   2ac9c:	2bff      	cmp	r3, #255	; 0xff
   2ac9e:	d00b      	beq.n	2acb8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2aca2:	2280      	movs	r2, #128	; 0x80
   2aca4:	0452      	lsls	r2, r2, #17
   2aca6:	4313      	orrs	r3, r2
   2aca8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2acaa:	683b      	ldr	r3, [r7, #0]
   2acac:	891b      	ldrh	r3, [r3, #8]
   2acae:	001a      	movs	r2, r3
   2acb0:	6a3b      	ldr	r3, [r7, #32]
   2acb2:	4313      	orrs	r3, r2
   2acb4:	623b      	str	r3, [r7, #32]
   2acb6:	e008      	b.n	2acca <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   2acb8:	683b      	ldr	r3, [r7, #0]
   2acba:	7edb      	ldrb	r3, [r3, #27]
   2acbc:	2b00      	cmp	r3, #0
   2acbe:	d004      	beq.n	2acca <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2acc2:	2280      	movs	r2, #128	; 0x80
   2acc4:	04d2      	lsls	r2, r2, #19
   2acc6:	4313      	orrs	r3, r2
   2acc8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2acca:	683b      	ldr	r3, [r7, #0]
   2accc:	222c      	movs	r2, #44	; 0x2c
   2acce:	5c9b      	ldrb	r3, [r3, r2]
   2acd0:	2b00      	cmp	r3, #0
   2acd2:	d103      	bne.n	2acdc <_usart_set_config+0x294>
   2acd4:	4b12      	ldr	r3, [pc, #72]	; (2ad20 <_usart_set_config+0x2d8>)
   2acd6:	4798      	blx	r3
   2acd8:	1e03      	subs	r3, r0, #0
   2acda:	d003      	beq.n	2ace4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2acde:	2280      	movs	r2, #128	; 0x80
   2ace0:	4313      	orrs	r3, r2
   2ace2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2ace4:	687b      	ldr	r3, [r7, #4]
   2ace6:	0018      	movs	r0, r3
   2ace8:	4b0c      	ldr	r3, [pc, #48]	; (2ad1c <_usart_set_config+0x2d4>)
   2acea:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2acec:	69bb      	ldr	r3, [r7, #24]
   2acee:	6a3a      	ldr	r2, [r7, #32]
   2acf0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2acf2:	687b      	ldr	r3, [r7, #4]
   2acf4:	0018      	movs	r0, r3
   2acf6:	4b09      	ldr	r3, [pc, #36]	; (2ad1c <_usart_set_config+0x2d4>)
   2acf8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2acfa:	69bb      	ldr	r3, [r7, #24]
   2acfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2acfe:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2ad00:	2300      	movs	r3, #0
}
   2ad02:	0018      	movs	r0, r3
   2ad04:	46bd      	mov	sp, r7
   2ad06:	b00a      	add	sp, #40	; 0x28
   2ad08:	bdb0      	pop	{r4, r5, r7, pc}
   2ad0a:	46c0      	nop			; (mov r8, r8)
   2ad0c:	00029795 	.word	0x00029795
   2ad10:	0002c1a5 	.word	0x0002c1a5
   2ad14:	0002930f 	.word	0x0002930f
   2ad18:	0002938d 	.word	0x0002938d
   2ad1c:	0002aa25 	.word	0x0002aa25
   2ad20:	0002a9e5 	.word	0x0002a9e5

0002ad24 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2ad24:	b590      	push	{r4, r7, lr}
   2ad26:	b093      	sub	sp, #76	; 0x4c
   2ad28:	af00      	add	r7, sp, #0
   2ad2a:	60f8      	str	r0, [r7, #12]
   2ad2c:	60b9      	str	r1, [r7, #8]
   2ad2e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2ad30:	233b      	movs	r3, #59	; 0x3b
   2ad32:	18fb      	adds	r3, r7, r3
   2ad34:	2200      	movs	r2, #0
   2ad36:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   2ad38:	68fb      	ldr	r3, [r7, #12]
   2ad3a:	68ba      	ldr	r2, [r7, #8]
   2ad3c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2ad3e:	68fb      	ldr	r3, [r7, #12]
   2ad40:	681b      	ldr	r3, [r3, #0]
   2ad42:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2ad44:	68fb      	ldr	r3, [r7, #12]
   2ad46:	681b      	ldr	r3, [r3, #0]
   2ad48:	0018      	movs	r0, r3
   2ad4a:	4b86      	ldr	r3, [pc, #536]	; (2af64 <usart_init+0x240>)
   2ad4c:	4798      	blx	r3
   2ad4e:	0003      	movs	r3, r0
   2ad50:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ad54:	3302      	adds	r3, #2
   2ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ad5a:	3314      	adds	r3, #20
   2ad5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ad60:	681b      	ldr	r3, [r3, #0]
   2ad62:	2201      	movs	r2, #1
   2ad64:	4013      	ands	r3, r2
   2ad66:	d001      	beq.n	2ad6c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   2ad68:	2305      	movs	r3, #5
   2ad6a:	e0f6      	b.n	2af5a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2ad6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ad6e:	681b      	ldr	r3, [r3, #0]
   2ad70:	2202      	movs	r2, #2
   2ad72:	4013      	ands	r3, r2
   2ad74:	d001      	beq.n	2ad7a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2ad76:	231c      	movs	r3, #28
   2ad78:	e0ef      	b.n	2af5a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2ad7a:	2201      	movs	r2, #1
   2ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ad7e:	409a      	lsls	r2, r3
   2ad80:	0013      	movs	r3, r2
   2ad82:	0019      	movs	r1, r3
   2ad84:	2002      	movs	r0, #2
   2ad86:	4b78      	ldr	r3, [pc, #480]	; (2af68 <usart_init+0x244>)
   2ad88:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2ad8a:	2324      	movs	r3, #36	; 0x24
   2ad8c:	18fb      	adds	r3, r7, r3
   2ad8e:	0018      	movs	r0, r3
   2ad90:	4b76      	ldr	r3, [pc, #472]	; (2af6c <usart_init+0x248>)
   2ad92:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2ad94:	687b      	ldr	r3, [r7, #4]
   2ad96:	222d      	movs	r2, #45	; 0x2d
   2ad98:	5c9a      	ldrb	r2, [r3, r2]
   2ad9a:	2324      	movs	r3, #36	; 0x24
   2ad9c:	18fb      	adds	r3, r7, r3
   2ad9e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ada2:	b2db      	uxtb	r3, r3
   2ada4:	2224      	movs	r2, #36	; 0x24
   2ada6:	18ba      	adds	r2, r7, r2
   2ada8:	0011      	movs	r1, r2
   2adaa:	0018      	movs	r0, r3
   2adac:	4b70      	ldr	r3, [pc, #448]	; (2af70 <usart_init+0x24c>)
   2adae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2adb2:	b2db      	uxtb	r3, r3
   2adb4:	0018      	movs	r0, r3
   2adb6:	4b6f      	ldr	r3, [pc, #444]	; (2af74 <usart_init+0x250>)
   2adb8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2adba:	687b      	ldr	r3, [r7, #4]
   2adbc:	222d      	movs	r2, #45	; 0x2d
   2adbe:	5c9b      	ldrb	r3, [r3, r2]
   2adc0:	2100      	movs	r1, #0
   2adc2:	0018      	movs	r0, r3
   2adc4:	4b6c      	ldr	r3, [pc, #432]	; (2af78 <usart_init+0x254>)
   2adc6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   2adc8:	687b      	ldr	r3, [r7, #4]
   2adca:	7ada      	ldrb	r2, [r3, #11]
   2adcc:	68fb      	ldr	r3, [r7, #12]
   2adce:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2add0:	687b      	ldr	r3, [r7, #4]
   2add2:	2224      	movs	r2, #36	; 0x24
   2add4:	5c9a      	ldrb	r2, [r3, r2]
   2add6:	68fb      	ldr	r3, [r7, #12]
   2add8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2adda:	687b      	ldr	r3, [r7, #4]
   2addc:	2225      	movs	r2, #37	; 0x25
   2adde:	5c9a      	ldrb	r2, [r3, r2]
   2ade0:	68fb      	ldr	r3, [r7, #12]
   2ade2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2ade4:	687b      	ldr	r3, [r7, #4]
   2ade6:	7eda      	ldrb	r2, [r3, #27]
   2ade8:	68fb      	ldr	r3, [r7, #12]
   2adea:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2adec:	687b      	ldr	r3, [r7, #4]
   2adee:	7f1a      	ldrb	r2, [r3, #28]
   2adf0:	68fb      	ldr	r3, [r7, #12]
   2adf2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   2adf4:	233b      	movs	r3, #59	; 0x3b
   2adf6:	18fc      	adds	r4, r7, r3
   2adf8:	687a      	ldr	r2, [r7, #4]
   2adfa:	68fb      	ldr	r3, [r7, #12]
   2adfc:	0011      	movs	r1, r2
   2adfe:	0018      	movs	r0, r3
   2ae00:	4b5e      	ldr	r3, [pc, #376]	; (2af7c <usart_init+0x258>)
   2ae02:	4798      	blx	r3
   2ae04:	0003      	movs	r3, r0
   2ae06:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   2ae08:	233b      	movs	r3, #59	; 0x3b
   2ae0a:	18fb      	adds	r3, r7, r3
   2ae0c:	781b      	ldrb	r3, [r3, #0]
   2ae0e:	2b00      	cmp	r3, #0
   2ae10:	d003      	beq.n	2ae1a <usart_init+0xf6>
		return status_code;
   2ae12:	233b      	movs	r3, #59	; 0x3b
   2ae14:	18fb      	adds	r3, r7, r3
   2ae16:	781b      	ldrb	r3, [r3, #0]
   2ae18:	e09f      	b.n	2af5a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2ae1a:	2320      	movs	r3, #32
   2ae1c:	18fb      	adds	r3, r7, r3
   2ae1e:	0018      	movs	r0, r3
   2ae20:	4b57      	ldr	r3, [pc, #348]	; (2af80 <usart_init+0x25c>)
   2ae22:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2ae24:	2320      	movs	r3, #32
   2ae26:	18fb      	adds	r3, r7, r3
   2ae28:	2200      	movs	r2, #0
   2ae2a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2ae2c:	2320      	movs	r3, #32
   2ae2e:	18fb      	adds	r3, r7, r3
   2ae30:	2200      	movs	r2, #0
   2ae32:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2ae34:	687b      	ldr	r3, [r7, #4]
   2ae36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2ae38:	2310      	movs	r3, #16
   2ae3a:	18fb      	adds	r3, r7, r3
   2ae3c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2ae3e:	687b      	ldr	r3, [r7, #4]
   2ae40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2ae42:	2310      	movs	r3, #16
   2ae44:	18fb      	adds	r3, r7, r3
   2ae46:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2ae48:	687b      	ldr	r3, [r7, #4]
   2ae4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2ae4c:	2310      	movs	r3, #16
   2ae4e:	18fb      	adds	r3, r7, r3
   2ae50:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2ae52:	687b      	ldr	r3, [r7, #4]
   2ae54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2ae56:	2310      	movs	r3, #16
   2ae58:	18fb      	adds	r3, r7, r3
   2ae5a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2ae5c:	2347      	movs	r3, #71	; 0x47
   2ae5e:	18fb      	adds	r3, r7, r3
   2ae60:	2200      	movs	r2, #0
   2ae62:	701a      	strb	r2, [r3, #0]
   2ae64:	e02c      	b.n	2aec0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2ae66:	2347      	movs	r3, #71	; 0x47
   2ae68:	18fb      	adds	r3, r7, r3
   2ae6a:	781a      	ldrb	r2, [r3, #0]
   2ae6c:	2310      	movs	r3, #16
   2ae6e:	18fb      	adds	r3, r7, r3
   2ae70:	0092      	lsls	r2, r2, #2
   2ae72:	58d3      	ldr	r3, [r2, r3]
   2ae74:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2ae76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ae78:	2b00      	cmp	r3, #0
   2ae7a:	d109      	bne.n	2ae90 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2ae7c:	2347      	movs	r3, #71	; 0x47
   2ae7e:	18fb      	adds	r3, r7, r3
   2ae80:	781a      	ldrb	r2, [r3, #0]
   2ae82:	68bb      	ldr	r3, [r7, #8]
   2ae84:	0011      	movs	r1, r2
   2ae86:	0018      	movs	r0, r3
   2ae88:	4b3e      	ldr	r3, [pc, #248]	; (2af84 <usart_init+0x260>)
   2ae8a:	4798      	blx	r3
   2ae8c:	0003      	movs	r3, r0
   2ae8e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2ae90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ae92:	3301      	adds	r3, #1
   2ae94:	d00d      	beq.n	2aeb2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2ae96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ae98:	b2da      	uxtb	r2, r3
   2ae9a:	2320      	movs	r3, #32
   2ae9c:	18fb      	adds	r3, r7, r3
   2ae9e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2aea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aea2:	0c1b      	lsrs	r3, r3, #16
   2aea4:	b2db      	uxtb	r3, r3
   2aea6:	2220      	movs	r2, #32
   2aea8:	18ba      	adds	r2, r7, r2
   2aeaa:	0011      	movs	r1, r2
   2aeac:	0018      	movs	r0, r3
   2aeae:	4b36      	ldr	r3, [pc, #216]	; (2af88 <usart_init+0x264>)
   2aeb0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2aeb2:	2347      	movs	r3, #71	; 0x47
   2aeb4:	18fb      	adds	r3, r7, r3
   2aeb6:	781a      	ldrb	r2, [r3, #0]
   2aeb8:	2347      	movs	r3, #71	; 0x47
   2aeba:	18fb      	adds	r3, r7, r3
   2aebc:	3201      	adds	r2, #1
   2aebe:	701a      	strb	r2, [r3, #0]
   2aec0:	2347      	movs	r3, #71	; 0x47
   2aec2:	18fb      	adds	r3, r7, r3
   2aec4:	781b      	ldrb	r3, [r3, #0]
   2aec6:	2b03      	cmp	r3, #3
   2aec8:	d9cd      	bls.n	2ae66 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2aeca:	2300      	movs	r3, #0
   2aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aece:	e00a      	b.n	2aee6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2aed0:	68fa      	ldr	r2, [r7, #12]
   2aed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aed4:	3302      	adds	r3, #2
   2aed6:	009b      	lsls	r3, r3, #2
   2aed8:	18d3      	adds	r3, r2, r3
   2aeda:	3304      	adds	r3, #4
   2aedc:	2200      	movs	r2, #0
   2aede:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2aee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aee2:	3301      	adds	r3, #1
   2aee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aee8:	2b05      	cmp	r3, #5
   2aeea:	d9f1      	bls.n	2aed0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2aeec:	68fb      	ldr	r3, [r7, #12]
   2aeee:	2200      	movs	r2, #0
   2aef0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2aef2:	68fb      	ldr	r3, [r7, #12]
   2aef4:	2200      	movs	r2, #0
   2aef6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   2aef8:	68fb      	ldr	r3, [r7, #12]
   2aefa:	2200      	movs	r2, #0
   2aefc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2aefe:	68fb      	ldr	r3, [r7, #12]
   2af00:	2200      	movs	r2, #0
   2af02:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   2af04:	68fb      	ldr	r3, [r7, #12]
   2af06:	2230      	movs	r2, #48	; 0x30
   2af08:	2100      	movs	r1, #0
   2af0a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2af0c:	68fb      	ldr	r3, [r7, #12]
   2af0e:	2231      	movs	r2, #49	; 0x31
   2af10:	2100      	movs	r1, #0
   2af12:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2af14:	68fb      	ldr	r3, [r7, #12]
   2af16:	2232      	movs	r2, #50	; 0x32
   2af18:	2100      	movs	r1, #0
   2af1a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2af1c:	68fb      	ldr	r3, [r7, #12]
   2af1e:	2233      	movs	r2, #51	; 0x33
   2af20:	2100      	movs	r1, #0
   2af22:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2af24:	68fb      	ldr	r3, [r7, #12]
   2af26:	681b      	ldr	r3, [r3, #0]
   2af28:	2227      	movs	r2, #39	; 0x27
   2af2a:	18bc      	adds	r4, r7, r2
   2af2c:	0018      	movs	r0, r3
   2af2e:	4b0d      	ldr	r3, [pc, #52]	; (2af64 <usart_init+0x240>)
   2af30:	4798      	blx	r3
   2af32:	0003      	movs	r3, r0
   2af34:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2af36:	4a15      	ldr	r2, [pc, #84]	; (2af8c <usart_init+0x268>)
   2af38:	2327      	movs	r3, #39	; 0x27
   2af3a:	18fb      	adds	r3, r7, r3
   2af3c:	781b      	ldrb	r3, [r3, #0]
   2af3e:	0011      	movs	r1, r2
   2af40:	0018      	movs	r0, r3
   2af42:	4b13      	ldr	r3, [pc, #76]	; (2af90 <usart_init+0x26c>)
   2af44:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2af46:	2327      	movs	r3, #39	; 0x27
   2af48:	18fb      	adds	r3, r7, r3
   2af4a:	781a      	ldrb	r2, [r3, #0]
   2af4c:	4b11      	ldr	r3, [pc, #68]	; (2af94 <usart_init+0x270>)
   2af4e:	0092      	lsls	r2, r2, #2
   2af50:	68f9      	ldr	r1, [r7, #12]
   2af52:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2af54:	233b      	movs	r3, #59	; 0x3b
   2af56:	18fb      	adds	r3, r7, r3
   2af58:	781b      	ldrb	r3, [r3, #0]
}
   2af5a:	0018      	movs	r0, r3
   2af5c:	46bd      	mov	sp, r7
   2af5e:	b013      	add	sp, #76	; 0x4c
   2af60:	bd90      	pop	{r4, r7, pc}
   2af62:	46c0      	nop			; (mov r8, r8)
   2af64:	00029795 	.word	0x00029795
   2af68:	0002a961 	.word	0x0002a961
   2af6c:	0002a949 	.word	0x0002a949
   2af70:	0002c081 	.word	0x0002c081
   2af74:	0002c0c5 	.word	0x0002c0c5
   2af78:	0002954d 	.word	0x0002954d
   2af7c:	0002aa49 	.word	0x0002aa49
   2af80:	0002a9bd 	.word	0x0002a9bd
   2af84:	000295d9 	.word	0x000295d9
   2af88:	0002c3e1 	.word	0x0002c3e1
   2af8c:	0002b201 	.word	0x0002b201
   2af90:	000297f9 	.word	0x000297f9
   2af94:	20005a64 	.word	0x20005a64

0002af98 <system_interrupt_enter_critical_section>:
{
   2af98:	b580      	push	{r7, lr}
   2af9a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2af9c:	4b02      	ldr	r3, [pc, #8]	; (2afa8 <system_interrupt_enter_critical_section+0x10>)
   2af9e:	4798      	blx	r3
}
   2afa0:	46c0      	nop			; (mov r8, r8)
   2afa2:	46bd      	mov	sp, r7
   2afa4:	bd80      	pop	{r7, pc}
   2afa6:	46c0      	nop			; (mov r8, r8)
   2afa8:	00028391 	.word	0x00028391

0002afac <system_interrupt_leave_critical_section>:
{
   2afac:	b580      	push	{r7, lr}
   2afae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2afb0:	4b02      	ldr	r3, [pc, #8]	; (2afbc <system_interrupt_leave_critical_section+0x10>)
   2afb2:	4798      	blx	r3
}
   2afb4:	46c0      	nop			; (mov r8, r8)
   2afb6:	46bd      	mov	sp, r7
   2afb8:	bd80      	pop	{r7, pc}
   2afba:	46c0      	nop			; (mov r8, r8)
   2afbc:	000283e5 	.word	0x000283e5

0002afc0 <usart_is_syncing>:
{
   2afc0:	b580      	push	{r7, lr}
   2afc2:	b084      	sub	sp, #16
   2afc4:	af00      	add	r7, sp, #0
   2afc6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2afc8:	687b      	ldr	r3, [r7, #4]
   2afca:	681b      	ldr	r3, [r3, #0]
   2afcc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2afce:	68fb      	ldr	r3, [r7, #12]
   2afd0:	69db      	ldr	r3, [r3, #28]
   2afd2:	1e5a      	subs	r2, r3, #1
   2afd4:	4193      	sbcs	r3, r2
   2afd6:	b2db      	uxtb	r3, r3
}
   2afd8:	0018      	movs	r0, r3
   2afda:	46bd      	mov	sp, r7
   2afdc:	b004      	add	sp, #16
   2afde:	bd80      	pop	{r7, pc}

0002afe0 <_usart_wait_for_sync>:
{
   2afe0:	b580      	push	{r7, lr}
   2afe2:	b082      	sub	sp, #8
   2afe4:	af00      	add	r7, sp, #0
   2afe6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2afe8:	46c0      	nop			; (mov r8, r8)
   2afea:	687b      	ldr	r3, [r7, #4]
   2afec:	0018      	movs	r0, r3
   2afee:	4b04      	ldr	r3, [pc, #16]	; (2b000 <_usart_wait_for_sync+0x20>)
   2aff0:	4798      	blx	r3
   2aff2:	1e03      	subs	r3, r0, #0
   2aff4:	d1f9      	bne.n	2afea <_usart_wait_for_sync+0xa>
}
   2aff6:	46c0      	nop			; (mov r8, r8)
   2aff8:	46bd      	mov	sp, r7
   2affa:	b002      	add	sp, #8
   2affc:	bd80      	pop	{r7, pc}
   2affe:	46c0      	nop			; (mov r8, r8)
   2b000:	0002afc1 	.word	0x0002afc1

0002b004 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b004:	b580      	push	{r7, lr}
   2b006:	b086      	sub	sp, #24
   2b008:	af00      	add	r7, sp, #0
   2b00a:	60f8      	str	r0, [r7, #12]
   2b00c:	60b9      	str	r1, [r7, #8]
   2b00e:	1dbb      	adds	r3, r7, #6
   2b010:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b012:	68fb      	ldr	r3, [r7, #12]
   2b014:	681b      	ldr	r3, [r3, #0]
   2b016:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b018:	4b0f      	ldr	r3, [pc, #60]	; (2b058 <_usart_write_buffer+0x54>)
   2b01a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2b01c:	68fb      	ldr	r3, [r7, #12]
   2b01e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b020:	b29b      	uxth	r3, r3
   2b022:	2b00      	cmp	r3, #0
   2b024:	d003      	beq.n	2b02e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b026:	4b0d      	ldr	r3, [pc, #52]	; (2b05c <_usart_write_buffer+0x58>)
   2b028:	4798      	blx	r3
		return STATUS_BUSY;
   2b02a:	2305      	movs	r3, #5
   2b02c:	e010      	b.n	2b050 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2b02e:	68fb      	ldr	r3, [r7, #12]
   2b030:	1dba      	adds	r2, r7, #6
   2b032:	8812      	ldrh	r2, [r2, #0]
   2b034:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   2b036:	4b09      	ldr	r3, [pc, #36]	; (2b05c <_usart_write_buffer+0x58>)
   2b038:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2b03a:	68fb      	ldr	r3, [r7, #12]
   2b03c:	68ba      	ldr	r2, [r7, #8]
   2b03e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2b040:	68fb      	ldr	r3, [r7, #12]
   2b042:	2233      	movs	r2, #51	; 0x33
   2b044:	2105      	movs	r1, #5
   2b046:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   2b048:	697b      	ldr	r3, [r7, #20]
   2b04a:	2201      	movs	r2, #1
   2b04c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2b04e:	2300      	movs	r3, #0
}
   2b050:	0018      	movs	r0, r3
   2b052:	46bd      	mov	sp, r7
   2b054:	b006      	add	sp, #24
   2b056:	bd80      	pop	{r7, pc}
   2b058:	0002af99 	.word	0x0002af99
   2b05c:	0002afad 	.word	0x0002afad

0002b060 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b060:	b580      	push	{r7, lr}
   2b062:	b086      	sub	sp, #24
   2b064:	af00      	add	r7, sp, #0
   2b066:	60f8      	str	r0, [r7, #12]
   2b068:	60b9      	str	r1, [r7, #8]
   2b06a:	1dbb      	adds	r3, r7, #6
   2b06c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b06e:	68fb      	ldr	r3, [r7, #12]
   2b070:	681b      	ldr	r3, [r3, #0]
   2b072:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b074:	4b16      	ldr	r3, [pc, #88]	; (2b0d0 <_usart_read_buffer+0x70>)
   2b076:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   2b078:	68fb      	ldr	r3, [r7, #12]
   2b07a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b07c:	b29b      	uxth	r3, r3
   2b07e:	2b00      	cmp	r3, #0
   2b080:	d003      	beq.n	2b08a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b082:	4b14      	ldr	r3, [pc, #80]	; (2b0d4 <_usart_read_buffer+0x74>)
   2b084:	4798      	blx	r3
		return STATUS_BUSY;
   2b086:	2305      	movs	r3, #5
   2b088:	e01e      	b.n	2b0c8 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2b08a:	68fb      	ldr	r3, [r7, #12]
   2b08c:	1dba      	adds	r2, r7, #6
   2b08e:	8812      	ldrh	r2, [r2, #0]
   2b090:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2b092:	4b10      	ldr	r3, [pc, #64]	; (2b0d4 <_usart_read_buffer+0x74>)
   2b094:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2b096:	68fb      	ldr	r3, [r7, #12]
   2b098:	68ba      	ldr	r2, [r7, #8]
   2b09a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2b09c:	68fb      	ldr	r3, [r7, #12]
   2b09e:	2232      	movs	r2, #50	; 0x32
   2b0a0:	2105      	movs	r1, #5
   2b0a2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2b0a4:	697b      	ldr	r3, [r7, #20]
   2b0a6:	2204      	movs	r2, #4
   2b0a8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2b0aa:	68fb      	ldr	r3, [r7, #12]
   2b0ac:	7a1b      	ldrb	r3, [r3, #8]
   2b0ae:	2b00      	cmp	r3, #0
   2b0b0:	d002      	beq.n	2b0b8 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b0b2:	697b      	ldr	r3, [r7, #20]
   2b0b4:	2220      	movs	r2, #32
   2b0b6:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   2b0b8:	68fb      	ldr	r3, [r7, #12]
   2b0ba:	7a5b      	ldrb	r3, [r3, #9]
   2b0bc:	2b00      	cmp	r3, #0
   2b0be:	d002      	beq.n	2b0c6 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2b0c0:	697b      	ldr	r3, [r7, #20]
   2b0c2:	2208      	movs	r2, #8
   2b0c4:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2b0c6:	2300      	movs	r3, #0
}
   2b0c8:	0018      	movs	r0, r3
   2b0ca:	46bd      	mov	sp, r7
   2b0cc:	b006      	add	sp, #24
   2b0ce:	bd80      	pop	{r7, pc}
   2b0d0:	0002af99 	.word	0x0002af99
   2b0d4:	0002afad 	.word	0x0002afad

0002b0d8 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   2b0d8:	b580      	push	{r7, lr}
   2b0da:	b084      	sub	sp, #16
   2b0dc:	af00      	add	r7, sp, #0
   2b0de:	60f8      	str	r0, [r7, #12]
   2b0e0:	60b9      	str	r1, [r7, #8]
   2b0e2:	1dfb      	adds	r3, r7, #7
   2b0e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b0e6:	1dfb      	adds	r3, r7, #7
   2b0e8:	781b      	ldrb	r3, [r3, #0]
   2b0ea:	68fa      	ldr	r2, [r7, #12]
   2b0ec:	3302      	adds	r3, #2
   2b0ee:	009b      	lsls	r3, r3, #2
   2b0f0:	18d3      	adds	r3, r2, r3
   2b0f2:	3304      	adds	r3, #4
   2b0f4:	68ba      	ldr	r2, [r7, #8]
   2b0f6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   2b0f8:	68fb      	ldr	r3, [r7, #12]
   2b0fa:	2230      	movs	r2, #48	; 0x30
   2b0fc:	5c9b      	ldrb	r3, [r3, r2]
   2b0fe:	b25a      	sxtb	r2, r3
   2b100:	1dfb      	adds	r3, r7, #7
   2b102:	781b      	ldrb	r3, [r3, #0]
   2b104:	2101      	movs	r1, #1
   2b106:	4099      	lsls	r1, r3
   2b108:	000b      	movs	r3, r1
   2b10a:	b25b      	sxtb	r3, r3
   2b10c:	4313      	orrs	r3, r2
   2b10e:	b25b      	sxtb	r3, r3
   2b110:	b2d9      	uxtb	r1, r3
   2b112:	68fb      	ldr	r3, [r7, #12]
   2b114:	2230      	movs	r2, #48	; 0x30
   2b116:	5499      	strb	r1, [r3, r2]
}
   2b118:	46c0      	nop			; (mov r8, r8)
   2b11a:	46bd      	mov	sp, r7
   2b11c:	b004      	add	sp, #16
   2b11e:	bd80      	pop	{r7, pc}

0002b120 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b120:	b580      	push	{r7, lr}
   2b122:	b084      	sub	sp, #16
   2b124:	af00      	add	r7, sp, #0
   2b126:	60f8      	str	r0, [r7, #12]
   2b128:	60b9      	str	r1, [r7, #8]
   2b12a:	1dbb      	adds	r3, r7, #6
   2b12c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2b12e:	1dbb      	adds	r3, r7, #6
   2b130:	881b      	ldrh	r3, [r3, #0]
   2b132:	2b00      	cmp	r3, #0
   2b134:	d101      	bne.n	2b13a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b136:	2317      	movs	r3, #23
   2b138:	e010      	b.n	2b15c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2b13a:	68fb      	ldr	r3, [r7, #12]
   2b13c:	79db      	ldrb	r3, [r3, #7]
   2b13e:	2201      	movs	r2, #1
   2b140:	4053      	eors	r3, r2
   2b142:	b2db      	uxtb	r3, r3
   2b144:	2b00      	cmp	r3, #0
   2b146:	d001      	beq.n	2b14c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b148:	231c      	movs	r3, #28
   2b14a:	e007      	b.n	2b15c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2b14c:	1dbb      	adds	r3, r7, #6
   2b14e:	881a      	ldrh	r2, [r3, #0]
   2b150:	68b9      	ldr	r1, [r7, #8]
   2b152:	68fb      	ldr	r3, [r7, #12]
   2b154:	0018      	movs	r0, r3
   2b156:	4b03      	ldr	r3, [pc, #12]	; (2b164 <usart_write_buffer_job+0x44>)
   2b158:	4798      	blx	r3
   2b15a:	0003      	movs	r3, r0
}
   2b15c:	0018      	movs	r0, r3
   2b15e:	46bd      	mov	sp, r7
   2b160:	b004      	add	sp, #16
   2b162:	bd80      	pop	{r7, pc}
   2b164:	0002b005 	.word	0x0002b005

0002b168 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b168:	b580      	push	{r7, lr}
   2b16a:	b084      	sub	sp, #16
   2b16c:	af00      	add	r7, sp, #0
   2b16e:	60f8      	str	r0, [r7, #12]
   2b170:	60b9      	str	r1, [r7, #8]
   2b172:	1dbb      	adds	r3, r7, #6
   2b174:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2b176:	1dbb      	adds	r3, r7, #6
   2b178:	881b      	ldrh	r3, [r3, #0]
   2b17a:	2b00      	cmp	r3, #0
   2b17c:	d101      	bne.n	2b182 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b17e:	2317      	movs	r3, #23
   2b180:	e010      	b.n	2b1a4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2b182:	68fb      	ldr	r3, [r7, #12]
   2b184:	799b      	ldrb	r3, [r3, #6]
   2b186:	2201      	movs	r2, #1
   2b188:	4053      	eors	r3, r2
   2b18a:	b2db      	uxtb	r3, r3
   2b18c:	2b00      	cmp	r3, #0
   2b18e:	d001      	beq.n	2b194 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b190:	231c      	movs	r3, #28
   2b192:	e007      	b.n	2b1a4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2b194:	1dbb      	adds	r3, r7, #6
   2b196:	881a      	ldrh	r2, [r3, #0]
   2b198:	68b9      	ldr	r1, [r7, #8]
   2b19a:	68fb      	ldr	r3, [r7, #12]
   2b19c:	0018      	movs	r0, r3
   2b19e:	4b03      	ldr	r3, [pc, #12]	; (2b1ac <usart_read_buffer_job+0x44>)
   2b1a0:	4798      	blx	r3
   2b1a2:	0003      	movs	r3, r0
}
   2b1a4:	0018      	movs	r0, r3
   2b1a6:	46bd      	mov	sp, r7
   2b1a8:	b004      	add	sp, #16
   2b1aa:	bd80      	pop	{r7, pc}
   2b1ac:	0002b061 	.word	0x0002b061

0002b1b0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2b1b0:	b580      	push	{r7, lr}
   2b1b2:	b084      	sub	sp, #16
   2b1b4:	af00      	add	r7, sp, #0
   2b1b6:	6078      	str	r0, [r7, #4]
   2b1b8:	000a      	movs	r2, r1
   2b1ba:	1cfb      	adds	r3, r7, #3
   2b1bc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2b1be:	1cfb      	adds	r3, r7, #3
   2b1c0:	781b      	ldrb	r3, [r3, #0]
   2b1c2:	2b00      	cmp	r3, #0
   2b1c4:	d002      	beq.n	2b1cc <usart_get_job_status+0x1c>
   2b1c6:	2b01      	cmp	r3, #1
   2b1c8:	d007      	beq.n	2b1da <usart_get_job_status+0x2a>
   2b1ca:	e00d      	b.n	2b1e8 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2b1cc:	230f      	movs	r3, #15
   2b1ce:	18fb      	adds	r3, r7, r3
   2b1d0:	687a      	ldr	r2, [r7, #4]
   2b1d2:	2132      	movs	r1, #50	; 0x32
   2b1d4:	5c52      	ldrb	r2, [r2, r1]
   2b1d6:	701a      	strb	r2, [r3, #0]
			break;
   2b1d8:	e00b      	b.n	2b1f2 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2b1da:	230f      	movs	r3, #15
   2b1dc:	18fb      	adds	r3, r7, r3
   2b1de:	687a      	ldr	r2, [r7, #4]
   2b1e0:	2133      	movs	r1, #51	; 0x33
   2b1e2:	5c52      	ldrb	r2, [r2, r1]
   2b1e4:	701a      	strb	r2, [r3, #0]
			break;
   2b1e6:	e004      	b.n	2b1f2 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   2b1e8:	230f      	movs	r3, #15
   2b1ea:	18fb      	adds	r3, r7, r3
   2b1ec:	2217      	movs	r2, #23
   2b1ee:	701a      	strb	r2, [r3, #0]
			break;
   2b1f0:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2b1f2:	230f      	movs	r3, #15
   2b1f4:	18fb      	adds	r3, r7, r3
   2b1f6:	781b      	ldrb	r3, [r3, #0]
}
   2b1f8:	0018      	movs	r0, r3
   2b1fa:	46bd      	mov	sp, r7
   2b1fc:	b004      	add	sp, #16
   2b1fe:	bd80      	pop	{r7, pc}

0002b200 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2b200:	b580      	push	{r7, lr}
   2b202:	b088      	sub	sp, #32
   2b204:	af00      	add	r7, sp, #0
   2b206:	0002      	movs	r2, r0
   2b208:	1dfb      	adds	r3, r7, #7
   2b20a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2b20c:	1dfb      	adds	r3, r7, #7
   2b20e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2b210:	4ba3      	ldr	r3, [pc, #652]	; (2b4a0 <_usart_interrupt_handler+0x2a0>)
   2b212:	0092      	lsls	r2, r2, #2
   2b214:	58d3      	ldr	r3, [r2, r3]
   2b216:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   2b218:	69bb      	ldr	r3, [r7, #24]
   2b21a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2b21c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2b21e:	69bb      	ldr	r3, [r7, #24]
   2b220:	0018      	movs	r0, r3
   2b222:	4ba0      	ldr	r3, [pc, #640]	; (2b4a4 <_usart_interrupt_handler+0x2a4>)
   2b224:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2b226:	697b      	ldr	r3, [r7, #20]
   2b228:	7e1b      	ldrb	r3, [r3, #24]
   2b22a:	b2da      	uxtb	r2, r3
   2b22c:	2312      	movs	r3, #18
   2b22e:	18fb      	adds	r3, r7, r3
   2b230:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2b232:	697b      	ldr	r3, [r7, #20]
   2b234:	7d9b      	ldrb	r3, [r3, #22]
   2b236:	b2db      	uxtb	r3, r3
   2b238:	b29a      	uxth	r2, r3
   2b23a:	2312      	movs	r3, #18
   2b23c:	18fb      	adds	r3, r7, r3
   2b23e:	2112      	movs	r1, #18
   2b240:	1879      	adds	r1, r7, r1
   2b242:	8809      	ldrh	r1, [r1, #0]
   2b244:	400a      	ands	r2, r1
   2b246:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   2b248:	69bb      	ldr	r3, [r7, #24]
   2b24a:	2230      	movs	r2, #48	; 0x30
   2b24c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2b24e:	69ba      	ldr	r2, [r7, #24]
   2b250:	2131      	movs	r1, #49	; 0x31
   2b252:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2b254:	4013      	ands	r3, r2
   2b256:	b2da      	uxtb	r2, r3
   2b258:	2310      	movs	r3, #16
   2b25a:	18fb      	adds	r3, r7, r3
   2b25c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2b25e:	2312      	movs	r3, #18
   2b260:	18fb      	adds	r3, r7, r3
   2b262:	881b      	ldrh	r3, [r3, #0]
   2b264:	2201      	movs	r2, #1
   2b266:	4013      	ands	r3, r2
   2b268:	d044      	beq.n	2b2f4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2b26a:	69bb      	ldr	r3, [r7, #24]
   2b26c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b26e:	b29b      	uxth	r3, r3
   2b270:	2b00      	cmp	r3, #0
   2b272:	d03c      	beq.n	2b2ee <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2b274:	69bb      	ldr	r3, [r7, #24]
   2b276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b278:	781b      	ldrb	r3, [r3, #0]
   2b27a:	b2da      	uxtb	r2, r3
   2b27c:	231c      	movs	r3, #28
   2b27e:	18fb      	adds	r3, r7, r3
   2b280:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2b282:	69bb      	ldr	r3, [r7, #24]
   2b284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b286:	1c5a      	adds	r2, r3, #1
   2b288:	69bb      	ldr	r3, [r7, #24]
   2b28a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2b28c:	69bb      	ldr	r3, [r7, #24]
   2b28e:	795b      	ldrb	r3, [r3, #5]
   2b290:	2b01      	cmp	r3, #1
   2b292:	d113      	bne.n	2b2bc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2b294:	69bb      	ldr	r3, [r7, #24]
   2b296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b298:	781b      	ldrb	r3, [r3, #0]
   2b29a:	b2db      	uxtb	r3, r3
   2b29c:	021b      	lsls	r3, r3, #8
   2b29e:	b21a      	sxth	r2, r3
   2b2a0:	231c      	movs	r3, #28
   2b2a2:	18fb      	adds	r3, r7, r3
   2b2a4:	2100      	movs	r1, #0
   2b2a6:	5e5b      	ldrsh	r3, [r3, r1]
   2b2a8:	4313      	orrs	r3, r2
   2b2aa:	b21a      	sxth	r2, r3
   2b2ac:	231c      	movs	r3, #28
   2b2ae:	18fb      	adds	r3, r7, r3
   2b2b0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2b2b2:	69bb      	ldr	r3, [r7, #24]
   2b2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b2b6:	1c5a      	adds	r2, r3, #1
   2b2b8:	69bb      	ldr	r3, [r7, #24]
   2b2ba:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2b2bc:	231c      	movs	r3, #28
   2b2be:	18fb      	adds	r3, r7, r3
   2b2c0:	881b      	ldrh	r3, [r3, #0]
   2b2c2:	05db      	lsls	r3, r3, #23
   2b2c4:	0ddb      	lsrs	r3, r3, #23
   2b2c6:	b29a      	uxth	r2, r3
   2b2c8:	697b      	ldr	r3, [r7, #20]
   2b2ca:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2b2cc:	69bb      	ldr	r3, [r7, #24]
   2b2ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b2d0:	b29b      	uxth	r3, r3
   2b2d2:	3b01      	subs	r3, #1
   2b2d4:	b29b      	uxth	r3, r3
   2b2d6:	69ba      	ldr	r2, [r7, #24]
   2b2d8:	1c19      	adds	r1, r3, #0
   2b2da:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2b2dc:	2b00      	cmp	r3, #0
   2b2de:	d109      	bne.n	2b2f4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2b2e0:	697b      	ldr	r3, [r7, #20]
   2b2e2:	2201      	movs	r2, #1
   2b2e4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2b2e6:	697b      	ldr	r3, [r7, #20]
   2b2e8:	2202      	movs	r2, #2
   2b2ea:	759a      	strb	r2, [r3, #22]
   2b2ec:	e002      	b.n	2b2f4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2b2ee:	697b      	ldr	r3, [r7, #20]
   2b2f0:	2201      	movs	r2, #1
   2b2f2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2b2f4:	2312      	movs	r3, #18
   2b2f6:	18fb      	adds	r3, r7, r3
   2b2f8:	881b      	ldrh	r3, [r3, #0]
   2b2fa:	2202      	movs	r2, #2
   2b2fc:	4013      	ands	r3, r2
   2b2fe:	d011      	beq.n	2b324 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2b300:	697b      	ldr	r3, [r7, #20]
   2b302:	2202      	movs	r2, #2
   2b304:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2b306:	69bb      	ldr	r3, [r7, #24]
   2b308:	2233      	movs	r2, #51	; 0x33
   2b30a:	2100      	movs	r1, #0
   2b30c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2b30e:	2310      	movs	r3, #16
   2b310:	18fb      	adds	r3, r7, r3
   2b312:	881b      	ldrh	r3, [r3, #0]
   2b314:	2201      	movs	r2, #1
   2b316:	4013      	ands	r3, r2
   2b318:	d004      	beq.n	2b324 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2b31a:	69bb      	ldr	r3, [r7, #24]
   2b31c:	68db      	ldr	r3, [r3, #12]
   2b31e:	69ba      	ldr	r2, [r7, #24]
   2b320:	0010      	movs	r0, r2
   2b322:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2b324:	2312      	movs	r3, #18
   2b326:	18fb      	adds	r3, r7, r3
   2b328:	881b      	ldrh	r3, [r3, #0]
   2b32a:	2204      	movs	r2, #4
   2b32c:	4013      	ands	r3, r2
   2b32e:	d100      	bne.n	2b332 <_usart_interrupt_handler+0x132>
   2b330:	e0bd      	b.n	2b4ae <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2b332:	69bb      	ldr	r3, [r7, #24]
   2b334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b336:	b29b      	uxth	r3, r3
   2b338:	2b00      	cmp	r3, #0
   2b33a:	d100      	bne.n	2b33e <_usart_interrupt_handler+0x13e>
   2b33c:	e0b4      	b.n	2b4a8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2b33e:	697b      	ldr	r3, [r7, #20]
   2b340:	8b5b      	ldrh	r3, [r3, #26]
   2b342:	b29b      	uxth	r3, r3
   2b344:	b2da      	uxtb	r2, r3
   2b346:	231f      	movs	r3, #31
   2b348:	18fb      	adds	r3, r7, r3
   2b34a:	213f      	movs	r1, #63	; 0x3f
   2b34c:	400a      	ands	r2, r1
   2b34e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2b350:	231f      	movs	r3, #31
   2b352:	18fb      	adds	r3, r7, r3
   2b354:	781b      	ldrb	r3, [r3, #0]
   2b356:	2208      	movs	r2, #8
   2b358:	4013      	ands	r3, r2
   2b35a:	d007      	beq.n	2b36c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2b35c:	231f      	movs	r3, #31
   2b35e:	18fb      	adds	r3, r7, r3
   2b360:	221f      	movs	r2, #31
   2b362:	18ba      	adds	r2, r7, r2
   2b364:	7812      	ldrb	r2, [r2, #0]
   2b366:	2108      	movs	r1, #8
   2b368:	438a      	bics	r2, r1
   2b36a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2b36c:	231f      	movs	r3, #31
   2b36e:	18fb      	adds	r3, r7, r3
   2b370:	781b      	ldrb	r3, [r3, #0]
   2b372:	2b00      	cmp	r3, #0
   2b374:	d050      	beq.n	2b418 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2b376:	231f      	movs	r3, #31
   2b378:	18fb      	adds	r3, r7, r3
   2b37a:	781b      	ldrb	r3, [r3, #0]
   2b37c:	2202      	movs	r2, #2
   2b37e:	4013      	ands	r3, r2
   2b380:	d007      	beq.n	2b392 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2b382:	69bb      	ldr	r3, [r7, #24]
   2b384:	2232      	movs	r2, #50	; 0x32
   2b386:	211a      	movs	r1, #26
   2b388:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2b38a:	697b      	ldr	r3, [r7, #20]
   2b38c:	2202      	movs	r2, #2
   2b38e:	835a      	strh	r2, [r3, #26]
   2b390:	e036      	b.n	2b400 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2b392:	231f      	movs	r3, #31
   2b394:	18fb      	adds	r3, r7, r3
   2b396:	781b      	ldrb	r3, [r3, #0]
   2b398:	2204      	movs	r2, #4
   2b39a:	4013      	ands	r3, r2
   2b39c:	d007      	beq.n	2b3ae <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2b39e:	69bb      	ldr	r3, [r7, #24]
   2b3a0:	2232      	movs	r2, #50	; 0x32
   2b3a2:	211e      	movs	r1, #30
   2b3a4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2b3a6:	697b      	ldr	r3, [r7, #20]
   2b3a8:	2204      	movs	r2, #4
   2b3aa:	835a      	strh	r2, [r3, #26]
   2b3ac:	e028      	b.n	2b400 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2b3ae:	231f      	movs	r3, #31
   2b3b0:	18fb      	adds	r3, r7, r3
   2b3b2:	781b      	ldrb	r3, [r3, #0]
   2b3b4:	2201      	movs	r2, #1
   2b3b6:	4013      	ands	r3, r2
   2b3b8:	d007      	beq.n	2b3ca <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2b3ba:	69bb      	ldr	r3, [r7, #24]
   2b3bc:	2232      	movs	r2, #50	; 0x32
   2b3be:	2113      	movs	r1, #19
   2b3c0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2b3c2:	697b      	ldr	r3, [r7, #20]
   2b3c4:	2201      	movs	r2, #1
   2b3c6:	835a      	strh	r2, [r3, #26]
   2b3c8:	e01a      	b.n	2b400 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2b3ca:	231f      	movs	r3, #31
   2b3cc:	18fb      	adds	r3, r7, r3
   2b3ce:	781b      	ldrb	r3, [r3, #0]
   2b3d0:	2210      	movs	r2, #16
   2b3d2:	4013      	ands	r3, r2
   2b3d4:	d007      	beq.n	2b3e6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2b3d6:	69bb      	ldr	r3, [r7, #24]
   2b3d8:	2232      	movs	r2, #50	; 0x32
   2b3da:	2142      	movs	r1, #66	; 0x42
   2b3dc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2b3de:	697b      	ldr	r3, [r7, #20]
   2b3e0:	2210      	movs	r2, #16
   2b3e2:	835a      	strh	r2, [r3, #26]
   2b3e4:	e00c      	b.n	2b400 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2b3e6:	231f      	movs	r3, #31
   2b3e8:	18fb      	adds	r3, r7, r3
   2b3ea:	781b      	ldrb	r3, [r3, #0]
   2b3ec:	2220      	movs	r2, #32
   2b3ee:	4013      	ands	r3, r2
   2b3f0:	d006      	beq.n	2b400 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2b3f2:	69bb      	ldr	r3, [r7, #24]
   2b3f4:	2232      	movs	r2, #50	; 0x32
   2b3f6:	2141      	movs	r1, #65	; 0x41
   2b3f8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2b3fa:	697b      	ldr	r3, [r7, #20]
   2b3fc:	2220      	movs	r2, #32
   2b3fe:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2b400:	2310      	movs	r3, #16
   2b402:	18fb      	adds	r3, r7, r3
   2b404:	881b      	ldrh	r3, [r3, #0]
   2b406:	2204      	movs	r2, #4
   2b408:	4013      	ands	r3, r2
				if (callback_status
   2b40a:	d050      	beq.n	2b4ae <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2b40c:	69bb      	ldr	r3, [r7, #24]
   2b40e:	695b      	ldr	r3, [r3, #20]
   2b410:	69ba      	ldr	r2, [r7, #24]
   2b412:	0010      	movs	r0, r2
   2b414:	4798      	blx	r3
   2b416:	e04a      	b.n	2b4ae <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2b418:	697b      	ldr	r3, [r7, #20]
   2b41a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2b41c:	b29a      	uxth	r2, r3
   2b41e:	230e      	movs	r3, #14
   2b420:	18fb      	adds	r3, r7, r3
   2b422:	05d2      	lsls	r2, r2, #23
   2b424:	0dd2      	lsrs	r2, r2, #23
   2b426:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2b428:	69bb      	ldr	r3, [r7, #24]
   2b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b42c:	220e      	movs	r2, #14
   2b42e:	18ba      	adds	r2, r7, r2
   2b430:	8812      	ldrh	r2, [r2, #0]
   2b432:	b2d2      	uxtb	r2, r2
   2b434:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2b436:	69bb      	ldr	r3, [r7, #24]
   2b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b43a:	1c5a      	adds	r2, r3, #1
   2b43c:	69bb      	ldr	r3, [r7, #24]
   2b43e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2b440:	69bb      	ldr	r3, [r7, #24]
   2b442:	795b      	ldrb	r3, [r3, #5]
   2b444:	2b01      	cmp	r3, #1
   2b446:	d10d      	bne.n	2b464 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2b448:	69bb      	ldr	r3, [r7, #24]
   2b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b44c:	220e      	movs	r2, #14
   2b44e:	18ba      	adds	r2, r7, r2
   2b450:	8812      	ldrh	r2, [r2, #0]
   2b452:	0a12      	lsrs	r2, r2, #8
   2b454:	b292      	uxth	r2, r2
   2b456:	b2d2      	uxtb	r2, r2
   2b458:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2b45a:	69bb      	ldr	r3, [r7, #24]
   2b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b45e:	1c5a      	adds	r2, r3, #1
   2b460:	69bb      	ldr	r3, [r7, #24]
   2b462:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2b464:	69bb      	ldr	r3, [r7, #24]
   2b466:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b468:	b29b      	uxth	r3, r3
   2b46a:	3b01      	subs	r3, #1
   2b46c:	b29b      	uxth	r3, r3
   2b46e:	69ba      	ldr	r2, [r7, #24]
   2b470:	1c19      	adds	r1, r3, #0
   2b472:	8591      	strh	r1, [r2, #44]	; 0x2c
   2b474:	2b00      	cmp	r3, #0
   2b476:	d11a      	bne.n	2b4ae <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b478:	697b      	ldr	r3, [r7, #20]
   2b47a:	2204      	movs	r2, #4
   2b47c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2b47e:	69bb      	ldr	r3, [r7, #24]
   2b480:	2232      	movs	r2, #50	; 0x32
   2b482:	2100      	movs	r1, #0
   2b484:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2b486:	2310      	movs	r3, #16
   2b488:	18fb      	adds	r3, r7, r3
   2b48a:	881b      	ldrh	r3, [r3, #0]
   2b48c:	2202      	movs	r2, #2
   2b48e:	4013      	ands	r3, r2
					if (callback_status
   2b490:	d00d      	beq.n	2b4ae <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2b492:	69bb      	ldr	r3, [r7, #24]
   2b494:	691b      	ldr	r3, [r3, #16]
   2b496:	69ba      	ldr	r2, [r7, #24]
   2b498:	0010      	movs	r0, r2
   2b49a:	4798      	blx	r3
   2b49c:	e007      	b.n	2b4ae <_usart_interrupt_handler+0x2ae>
   2b49e:	46c0      	nop			; (mov r8, r8)
   2b4a0:	20005a64 	.word	0x20005a64
   2b4a4:	0002afe1 	.word	0x0002afe1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b4a8:	697b      	ldr	r3, [r7, #20]
   2b4aa:	2204      	movs	r2, #4
   2b4ac:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2b4ae:	2312      	movs	r3, #18
   2b4b0:	18fb      	adds	r3, r7, r3
   2b4b2:	881b      	ldrh	r3, [r3, #0]
   2b4b4:	2210      	movs	r2, #16
   2b4b6:	4013      	ands	r3, r2
   2b4b8:	d010      	beq.n	2b4dc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2b4ba:	697b      	ldr	r3, [r7, #20]
   2b4bc:	2210      	movs	r2, #16
   2b4be:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2b4c0:	697b      	ldr	r3, [r7, #20]
   2b4c2:	2210      	movs	r2, #16
   2b4c4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2b4c6:	2310      	movs	r3, #16
   2b4c8:	18fb      	adds	r3, r7, r3
   2b4ca:	881b      	ldrh	r3, [r3, #0]
   2b4cc:	2210      	movs	r2, #16
   2b4ce:	4013      	ands	r3, r2
   2b4d0:	d004      	beq.n	2b4dc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2b4d2:	69bb      	ldr	r3, [r7, #24]
   2b4d4:	69db      	ldr	r3, [r3, #28]
   2b4d6:	69ba      	ldr	r2, [r7, #24]
   2b4d8:	0010      	movs	r0, r2
   2b4da:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2b4dc:	2312      	movs	r3, #18
   2b4de:	18fb      	adds	r3, r7, r3
   2b4e0:	881b      	ldrh	r3, [r3, #0]
   2b4e2:	2220      	movs	r2, #32
   2b4e4:	4013      	ands	r3, r2
   2b4e6:	d010      	beq.n	2b50a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2b4e8:	697b      	ldr	r3, [r7, #20]
   2b4ea:	2220      	movs	r2, #32
   2b4ec:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b4ee:	697b      	ldr	r3, [r7, #20]
   2b4f0:	2220      	movs	r2, #32
   2b4f2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2b4f4:	2310      	movs	r3, #16
   2b4f6:	18fb      	adds	r3, r7, r3
   2b4f8:	881b      	ldrh	r3, [r3, #0]
   2b4fa:	2208      	movs	r2, #8
   2b4fc:	4013      	ands	r3, r2
   2b4fe:	d004      	beq.n	2b50a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2b500:	69bb      	ldr	r3, [r7, #24]
   2b502:	699b      	ldr	r3, [r3, #24]
   2b504:	69ba      	ldr	r2, [r7, #24]
   2b506:	0010      	movs	r0, r2
   2b508:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2b50a:	2312      	movs	r3, #18
   2b50c:	18fb      	adds	r3, r7, r3
   2b50e:	881b      	ldrh	r3, [r3, #0]
   2b510:	2208      	movs	r2, #8
   2b512:	4013      	ands	r3, r2
   2b514:	d010      	beq.n	2b538 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2b516:	697b      	ldr	r3, [r7, #20]
   2b518:	2208      	movs	r2, #8
   2b51a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2b51c:	697b      	ldr	r3, [r7, #20]
   2b51e:	2208      	movs	r2, #8
   2b520:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2b522:	2310      	movs	r3, #16
   2b524:	18fb      	adds	r3, r7, r3
   2b526:	881b      	ldrh	r3, [r3, #0]
   2b528:	2220      	movs	r2, #32
   2b52a:	4013      	ands	r3, r2
   2b52c:	d004      	beq.n	2b538 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2b52e:	69bb      	ldr	r3, [r7, #24]
   2b530:	6a1b      	ldr	r3, [r3, #32]
   2b532:	69ba      	ldr	r2, [r7, #24]
   2b534:	0010      	movs	r0, r2
   2b536:	4798      	blx	r3
		}
	}
#endif
}
   2b538:	46c0      	nop			; (mov r8, r8)
   2b53a:	46bd      	mov	sp, r7
   2b53c:	b008      	add	sp, #32
   2b53e:	bd80      	pop	{r7, pc}

0002b540 <system_gclk_gen_get_config_defaults>:
{
   2b540:	b580      	push	{r7, lr}
   2b542:	b082      	sub	sp, #8
   2b544:	af00      	add	r7, sp, #0
   2b546:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2b548:	687b      	ldr	r3, [r7, #4]
   2b54a:	2201      	movs	r2, #1
   2b54c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2b54e:	687b      	ldr	r3, [r7, #4]
   2b550:	2200      	movs	r2, #0
   2b552:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2b554:	687b      	ldr	r3, [r7, #4]
   2b556:	2206      	movs	r2, #6
   2b558:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2b55a:	687b      	ldr	r3, [r7, #4]
   2b55c:	2200      	movs	r2, #0
   2b55e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2b560:	687b      	ldr	r3, [r7, #4]
   2b562:	2200      	movs	r2, #0
   2b564:	725a      	strb	r2, [r3, #9]
}
   2b566:	46c0      	nop			; (mov r8, r8)
   2b568:	46bd      	mov	sp, r7
   2b56a:	b002      	add	sp, #8
   2b56c:	bd80      	pop	{r7, pc}

0002b56e <system_gclk_chan_get_config_defaults>:
{
   2b56e:	b580      	push	{r7, lr}
   2b570:	b082      	sub	sp, #8
   2b572:	af00      	add	r7, sp, #0
   2b574:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b576:	687b      	ldr	r3, [r7, #4]
   2b578:	2200      	movs	r2, #0
   2b57a:	701a      	strb	r2, [r3, #0]
}
   2b57c:	46c0      	nop			; (mov r8, r8)
   2b57e:	46bd      	mov	sp, r7
   2b580:	b002      	add	sp, #8
   2b582:	bd80      	pop	{r7, pc}

0002b584 <system_clock_source_osc8m_get_config_defaults>:
{
   2b584:	b580      	push	{r7, lr}
   2b586:	b082      	sub	sp, #8
   2b588:	af00      	add	r7, sp, #0
   2b58a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2b58c:	687b      	ldr	r3, [r7, #4]
   2b58e:	2203      	movs	r2, #3
   2b590:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2b592:	687b      	ldr	r3, [r7, #4]
   2b594:	2200      	movs	r2, #0
   2b596:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2b598:	687b      	ldr	r3, [r7, #4]
   2b59a:	2201      	movs	r2, #1
   2b59c:	709a      	strb	r2, [r3, #2]
}
   2b59e:	46c0      	nop			; (mov r8, r8)
   2b5a0:	46bd      	mov	sp, r7
   2b5a2:	b002      	add	sp, #8
   2b5a4:	bd80      	pop	{r7, pc}
	...

0002b5a8 <system_cpu_clock_set_divider>:
{
   2b5a8:	b580      	push	{r7, lr}
   2b5aa:	b082      	sub	sp, #8
   2b5ac:	af00      	add	r7, sp, #0
   2b5ae:	0002      	movs	r2, r0
   2b5b0:	1dfb      	adds	r3, r7, #7
   2b5b2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2b5b4:	4a03      	ldr	r2, [pc, #12]	; (2b5c4 <system_cpu_clock_set_divider+0x1c>)
   2b5b6:	1dfb      	adds	r3, r7, #7
   2b5b8:	781b      	ldrb	r3, [r3, #0]
   2b5ba:	7213      	strb	r3, [r2, #8]
}
   2b5bc:	46c0      	nop			; (mov r8, r8)
   2b5be:	46bd      	mov	sp, r7
   2b5c0:	b002      	add	sp, #8
   2b5c2:	bd80      	pop	{r7, pc}
   2b5c4:	40000400 	.word	0x40000400

0002b5c8 <system_apb_clock_set_divider>:
{
   2b5c8:	b580      	push	{r7, lr}
   2b5ca:	b082      	sub	sp, #8
   2b5cc:	af00      	add	r7, sp, #0
   2b5ce:	0002      	movs	r2, r0
   2b5d0:	1dfb      	adds	r3, r7, #7
   2b5d2:	701a      	strb	r2, [r3, #0]
   2b5d4:	1dbb      	adds	r3, r7, #6
   2b5d6:	1c0a      	adds	r2, r1, #0
   2b5d8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b5da:	1dfb      	adds	r3, r7, #7
   2b5dc:	781b      	ldrb	r3, [r3, #0]
   2b5de:	2b01      	cmp	r3, #1
   2b5e0:	d008      	beq.n	2b5f4 <system_apb_clock_set_divider+0x2c>
   2b5e2:	2b02      	cmp	r3, #2
   2b5e4:	d00b      	beq.n	2b5fe <system_apb_clock_set_divider+0x36>
   2b5e6:	2b00      	cmp	r3, #0
   2b5e8:	d10e      	bne.n	2b608 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2b5ea:	4a0b      	ldr	r2, [pc, #44]	; (2b618 <system_apb_clock_set_divider+0x50>)
   2b5ec:	1dbb      	adds	r3, r7, #6
   2b5ee:	781b      	ldrb	r3, [r3, #0]
   2b5f0:	7253      	strb	r3, [r2, #9]
			break;
   2b5f2:	e00b      	b.n	2b60c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2b5f4:	4a08      	ldr	r2, [pc, #32]	; (2b618 <system_apb_clock_set_divider+0x50>)
   2b5f6:	1dbb      	adds	r3, r7, #6
   2b5f8:	781b      	ldrb	r3, [r3, #0]
   2b5fa:	7293      	strb	r3, [r2, #10]
			break;
   2b5fc:	e006      	b.n	2b60c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2b5fe:	4a06      	ldr	r2, [pc, #24]	; (2b618 <system_apb_clock_set_divider+0x50>)
   2b600:	1dbb      	adds	r3, r7, #6
   2b602:	781b      	ldrb	r3, [r3, #0]
   2b604:	72d3      	strb	r3, [r2, #11]
			break;
   2b606:	e001      	b.n	2b60c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2b608:	2317      	movs	r3, #23
   2b60a:	e000      	b.n	2b60e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2b60c:	2300      	movs	r3, #0
}
   2b60e:	0018      	movs	r0, r3
   2b610:	46bd      	mov	sp, r7
   2b612:	b002      	add	sp, #8
   2b614:	bd80      	pop	{r7, pc}
   2b616:	46c0      	nop			; (mov r8, r8)
   2b618:	40000400 	.word	0x40000400

0002b61c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2b61c:	b580      	push	{r7, lr}
   2b61e:	b082      	sub	sp, #8
   2b620:	af00      	add	r7, sp, #0
   2b622:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2b624:	687b      	ldr	r3, [r7, #4]
   2b626:	2201      	movs	r2, #1
   2b628:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2b62a:	687b      	ldr	r3, [r7, #4]
   2b62c:	2200      	movs	r2, #0
   2b62e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2b630:	687b      	ldr	r3, [r7, #4]
   2b632:	2200      	movs	r2, #0
   2b634:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2b636:	687b      	ldr	r3, [r7, #4]
   2b638:	2200      	movs	r2, #0
   2b63a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2b63c:	687b      	ldr	r3, [r7, #4]
   2b63e:	2200      	movs	r2, #0
   2b640:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2b642:	687b      	ldr	r3, [r7, #4]
   2b644:	4a0a      	ldr	r2, [pc, #40]	; (2b670 <system_clock_source_dpll_get_config_defaults+0x54>)
   2b646:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2b648:	687b      	ldr	r3, [r7, #4]
   2b64a:	2280      	movs	r2, #128	; 0x80
   2b64c:	0212      	lsls	r2, r2, #8
   2b64e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2b650:	687b      	ldr	r3, [r7, #4]
   2b652:	2201      	movs	r2, #1
   2b654:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2b656:	687b      	ldr	r3, [r7, #4]
   2b658:	2200      	movs	r2, #0
   2b65a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2b65c:	687b      	ldr	r3, [r7, #4]
   2b65e:	2200      	movs	r2, #0
   2b660:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2b662:	687b      	ldr	r3, [r7, #4]
   2b664:	2200      	movs	r2, #0
   2b666:	749a      	strb	r2, [r3, #18]
};
   2b668:	46c0      	nop			; (mov r8, r8)
   2b66a:	46bd      	mov	sp, r7
   2b66c:	b002      	add	sp, #8
   2b66e:	bd80      	pop	{r7, pc}
   2b670:	02dc6c00 	.word	0x02dc6c00

0002b674 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2b674:	b580      	push	{r7, lr}
   2b676:	b082      	sub	sp, #8
   2b678:	af00      	add	r7, sp, #0
   2b67a:	0002      	movs	r2, r0
   2b67c:	1dfb      	adds	r3, r7, #7
   2b67e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2b680:	4a08      	ldr	r2, [pc, #32]	; (2b6a4 <system_flash_set_waitstates+0x30>)
   2b682:	1dfb      	adds	r3, r7, #7
   2b684:	781b      	ldrb	r3, [r3, #0]
   2b686:	210f      	movs	r1, #15
   2b688:	400b      	ands	r3, r1
   2b68a:	b2d9      	uxtb	r1, r3
   2b68c:	6853      	ldr	r3, [r2, #4]
   2b68e:	200f      	movs	r0, #15
   2b690:	4001      	ands	r1, r0
   2b692:	0049      	lsls	r1, r1, #1
   2b694:	201e      	movs	r0, #30
   2b696:	4383      	bics	r3, r0
   2b698:	430b      	orrs	r3, r1
   2b69a:	6053      	str	r3, [r2, #4]
}
   2b69c:	46c0      	nop			; (mov r8, r8)
   2b69e:	46bd      	mov	sp, r7
   2b6a0:	b002      	add	sp, #8
   2b6a2:	bd80      	pop	{r7, pc}
   2b6a4:	41004000 	.word	0x41004000

0002b6a8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2b6a8:	b580      	push	{r7, lr}
   2b6aa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2b6ac:	46c0      	nop			; (mov r8, r8)
   2b6ae:	4b04      	ldr	r3, [pc, #16]	; (2b6c0 <_system_dfll_wait_for_sync+0x18>)
   2b6b0:	68db      	ldr	r3, [r3, #12]
   2b6b2:	2210      	movs	r2, #16
   2b6b4:	4013      	ands	r3, r2
   2b6b6:	d0fa      	beq.n	2b6ae <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2b6b8:	46c0      	nop			; (mov r8, r8)
   2b6ba:	46bd      	mov	sp, r7
   2b6bc:	bd80      	pop	{r7, pc}
   2b6be:	46c0      	nop			; (mov r8, r8)
   2b6c0:	40000800 	.word	0x40000800

0002b6c4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2b6c4:	b580      	push	{r7, lr}
   2b6c6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2b6c8:	4b0c      	ldr	r3, [pc, #48]	; (2b6fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b6ca:	2202      	movs	r2, #2
   2b6cc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b6ce:	4b0c      	ldr	r3, [pc, #48]	; (2b700 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b6d0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2b6d2:	4a0a      	ldr	r2, [pc, #40]	; (2b6fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b6d4:	4b0b      	ldr	r3, [pc, #44]	; (2b704 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b6d6:	689b      	ldr	r3, [r3, #8]
   2b6d8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2b6da:	4a08      	ldr	r2, [pc, #32]	; (2b6fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b6dc:	4b09      	ldr	r3, [pc, #36]	; (2b704 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b6de:	685b      	ldr	r3, [r3, #4]
   2b6e0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2b6e2:	4b06      	ldr	r3, [pc, #24]	; (2b6fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b6e4:	2200      	movs	r2, #0
   2b6e6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b6e8:	4b05      	ldr	r3, [pc, #20]	; (2b700 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b6ea:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2b6ec:	4a03      	ldr	r2, [pc, #12]	; (2b6fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b6ee:	4b05      	ldr	r3, [pc, #20]	; (2b704 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b6f0:	681b      	ldr	r3, [r3, #0]
   2b6f2:	b29b      	uxth	r3, r3
   2b6f4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2b6f6:	46c0      	nop			; (mov r8, r8)
   2b6f8:	46bd      	mov	sp, r7
   2b6fa:	bd80      	pop	{r7, pc}
   2b6fc:	40000800 	.word	0x40000800
   2b700:	0002b6a9 	.word	0x0002b6a9
   2b704:	2000413c 	.word	0x2000413c

0002b708 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2b708:	b580      	push	{r7, lr}
   2b70a:	b082      	sub	sp, #8
   2b70c:	af00      	add	r7, sp, #0
   2b70e:	0002      	movs	r2, r0
   2b710:	1dfb      	adds	r3, r7, #7
   2b712:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2b714:	1dfb      	adds	r3, r7, #7
   2b716:	781b      	ldrb	r3, [r3, #0]
   2b718:	2b08      	cmp	r3, #8
   2b71a:	d841      	bhi.n	2b7a0 <system_clock_source_get_hz+0x98>
   2b71c:	009a      	lsls	r2, r3, #2
   2b71e:	4b23      	ldr	r3, [pc, #140]	; (2b7ac <system_clock_source_get_hz+0xa4>)
   2b720:	18d3      	adds	r3, r2, r3
   2b722:	681b      	ldr	r3, [r3, #0]
   2b724:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2b726:	4b22      	ldr	r3, [pc, #136]	; (2b7b0 <system_clock_source_get_hz+0xa8>)
   2b728:	691b      	ldr	r3, [r3, #16]
   2b72a:	e03a      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2b72c:	4b21      	ldr	r3, [pc, #132]	; (2b7b4 <system_clock_source_get_hz+0xac>)
   2b72e:	6a1b      	ldr	r3, [r3, #32]
   2b730:	059b      	lsls	r3, r3, #22
   2b732:	0f9b      	lsrs	r3, r3, #30
   2b734:	b2db      	uxtb	r3, r3
   2b736:	001a      	movs	r2, r3
   2b738:	4b1f      	ldr	r3, [pc, #124]	; (2b7b8 <system_clock_source_get_hz+0xb0>)
   2b73a:	40d3      	lsrs	r3, r2
   2b73c:	e031      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2b73e:	2380      	movs	r3, #128	; 0x80
   2b740:	021b      	lsls	r3, r3, #8
   2b742:	e02e      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2b744:	2380      	movs	r3, #128	; 0x80
   2b746:	021b      	lsls	r3, r3, #8
   2b748:	e02b      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2b74a:	4b19      	ldr	r3, [pc, #100]	; (2b7b0 <system_clock_source_get_hz+0xa8>)
   2b74c:	695b      	ldr	r3, [r3, #20]
   2b74e:	e028      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2b750:	4b17      	ldr	r3, [pc, #92]	; (2b7b0 <system_clock_source_get_hz+0xa8>)
   2b752:	681b      	ldr	r3, [r3, #0]
   2b754:	2202      	movs	r2, #2
   2b756:	4013      	ands	r3, r2
   2b758:	d101      	bne.n	2b75e <system_clock_source_get_hz+0x56>
			return 0;
   2b75a:	2300      	movs	r3, #0
   2b75c:	e021      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2b75e:	4b17      	ldr	r3, [pc, #92]	; (2b7bc <system_clock_source_get_hz+0xb4>)
   2b760:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2b762:	4b13      	ldr	r3, [pc, #76]	; (2b7b0 <system_clock_source_get_hz+0xa8>)
   2b764:	681b      	ldr	r3, [r3, #0]
   2b766:	2224      	movs	r2, #36	; 0x24
   2b768:	4013      	ands	r3, r2
   2b76a:	2b04      	cmp	r3, #4
   2b76c:	d109      	bne.n	2b782 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b76e:	2000      	movs	r0, #0
   2b770:	4b13      	ldr	r3, [pc, #76]	; (2b7c0 <system_clock_source_get_hz+0xb8>)
   2b772:	4798      	blx	r3
   2b774:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2b776:	4b0e      	ldr	r3, [pc, #56]	; (2b7b0 <system_clock_source_get_hz+0xa8>)
   2b778:	689b      	ldr	r3, [r3, #8]
   2b77a:	041b      	lsls	r3, r3, #16
   2b77c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b77e:	4353      	muls	r3, r2
   2b780:	e00f      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2b782:	4b10      	ldr	r3, [pc, #64]	; (2b7c4 <system_clock_source_get_hz+0xbc>)
   2b784:	e00d      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2b786:	4a0b      	ldr	r2, [pc, #44]	; (2b7b4 <system_clock_source_get_hz+0xac>)
   2b788:	2350      	movs	r3, #80	; 0x50
   2b78a:	5cd3      	ldrb	r3, [r2, r3]
   2b78c:	b2db      	uxtb	r3, r3
   2b78e:	001a      	movs	r2, r3
   2b790:	2304      	movs	r3, #4
   2b792:	4013      	ands	r3, r2
   2b794:	d101      	bne.n	2b79a <system_clock_source_get_hz+0x92>
			return 0;
   2b796:	2300      	movs	r3, #0
   2b798:	e003      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2b79a:	4b05      	ldr	r3, [pc, #20]	; (2b7b0 <system_clock_source_get_hz+0xa8>)
   2b79c:	68db      	ldr	r3, [r3, #12]
   2b79e:	e000      	b.n	2b7a2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2b7a0:	2300      	movs	r3, #0
	}
}
   2b7a2:	0018      	movs	r0, r3
   2b7a4:	46bd      	mov	sp, r7
   2b7a6:	b002      	add	sp, #8
   2b7a8:	bd80      	pop	{r7, pc}
   2b7aa:	46c0      	nop			; (mov r8, r8)
   2b7ac:	0003c5a8 	.word	0x0003c5a8
   2b7b0:	2000413c 	.word	0x2000413c
   2b7b4:	40000800 	.word	0x40000800
   2b7b8:	007a1200 	.word	0x007a1200
   2b7bc:	0002b6a9 	.word	0x0002b6a9
   2b7c0:	0002c1a5 	.word	0x0002c1a5
   2b7c4:	02dc6c00 	.word	0x02dc6c00

0002b7c8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2b7c8:	b580      	push	{r7, lr}
   2b7ca:	b084      	sub	sp, #16
   2b7cc:	af00      	add	r7, sp, #0
   2b7ce:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2b7d0:	4b1a      	ldr	r3, [pc, #104]	; (2b83c <system_clock_source_osc8m_set_config+0x74>)
   2b7d2:	6a1b      	ldr	r3, [r3, #32]
   2b7d4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2b7d6:	687b      	ldr	r3, [r7, #4]
   2b7d8:	781b      	ldrb	r3, [r3, #0]
   2b7da:	1c1a      	adds	r2, r3, #0
   2b7dc:	2303      	movs	r3, #3
   2b7de:	4013      	ands	r3, r2
   2b7e0:	b2da      	uxtb	r2, r3
   2b7e2:	230d      	movs	r3, #13
   2b7e4:	18fb      	adds	r3, r7, r3
   2b7e6:	2103      	movs	r1, #3
   2b7e8:	400a      	ands	r2, r1
   2b7ea:	0010      	movs	r0, r2
   2b7ec:	781a      	ldrb	r2, [r3, #0]
   2b7ee:	2103      	movs	r1, #3
   2b7f0:	438a      	bics	r2, r1
   2b7f2:	1c11      	adds	r1, r2, #0
   2b7f4:	1c02      	adds	r2, r0, #0
   2b7f6:	430a      	orrs	r2, r1
   2b7f8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2b7fa:	687b      	ldr	r3, [r7, #4]
   2b7fc:	789a      	ldrb	r2, [r3, #2]
   2b7fe:	230c      	movs	r3, #12
   2b800:	18fb      	adds	r3, r7, r3
   2b802:	01d0      	lsls	r0, r2, #7
   2b804:	781a      	ldrb	r2, [r3, #0]
   2b806:	217f      	movs	r1, #127	; 0x7f
   2b808:	400a      	ands	r2, r1
   2b80a:	1c11      	adds	r1, r2, #0
   2b80c:	1c02      	adds	r2, r0, #0
   2b80e:	430a      	orrs	r2, r1
   2b810:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2b812:	687b      	ldr	r3, [r7, #4]
   2b814:	785a      	ldrb	r2, [r3, #1]
   2b816:	230c      	movs	r3, #12
   2b818:	18fb      	adds	r3, r7, r3
   2b81a:	2101      	movs	r1, #1
   2b81c:	400a      	ands	r2, r1
   2b81e:	0190      	lsls	r0, r2, #6
   2b820:	781a      	ldrb	r2, [r3, #0]
   2b822:	2140      	movs	r1, #64	; 0x40
   2b824:	438a      	bics	r2, r1
   2b826:	1c11      	adds	r1, r2, #0
   2b828:	1c02      	adds	r2, r0, #0
   2b82a:	430a      	orrs	r2, r1
   2b82c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2b82e:	4b03      	ldr	r3, [pc, #12]	; (2b83c <system_clock_source_osc8m_set_config+0x74>)
   2b830:	68fa      	ldr	r2, [r7, #12]
   2b832:	621a      	str	r2, [r3, #32]
}
   2b834:	46c0      	nop			; (mov r8, r8)
   2b836:	46bd      	mov	sp, r7
   2b838:	b004      	add	sp, #16
   2b83a:	bd80      	pop	{r7, pc}
   2b83c:	40000800 	.word	0x40000800

0002b840 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2b840:	b580      	push	{r7, lr}
   2b842:	b086      	sub	sp, #24
   2b844:	af00      	add	r7, sp, #0
   2b846:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2b848:	687b      	ldr	r3, [r7, #4]
   2b84a:	68db      	ldr	r3, [r3, #12]
   2b84c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2b84e:	687b      	ldr	r3, [r7, #4]
   2b850:	7d1b      	ldrb	r3, [r3, #20]
   2b852:	2b01      	cmp	r3, #1
   2b854:	d10a      	bne.n	2b86c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2b856:	687b      	ldr	r3, [r7, #4]
   2b858:	8a1b      	ldrh	r3, [r3, #16]
   2b85a:	3301      	adds	r3, #1
   2b85c:	005b      	lsls	r3, r3, #1
   2b85e:	001a      	movs	r2, r3
   2b860:	4b36      	ldr	r3, [pc, #216]	; (2b93c <system_clock_source_dpll_set_config+0xfc>)
   2b862:	0011      	movs	r1, r2
   2b864:	6978      	ldr	r0, [r7, #20]
   2b866:	4798      	blx	r3
   2b868:	0003      	movs	r3, r0
   2b86a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2b86c:	687b      	ldr	r3, [r7, #4]
   2b86e:	689b      	ldr	r3, [r3, #8]
   2b870:	011a      	lsls	r2, r3, #4
   2b872:	4b32      	ldr	r3, [pc, #200]	; (2b93c <system_clock_source_dpll_set_config+0xfc>)
   2b874:	6979      	ldr	r1, [r7, #20]
   2b876:	0010      	movs	r0, r2
   2b878:	4798      	blx	r3
   2b87a:	0003      	movs	r3, r0
   2b87c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2b87e:	693b      	ldr	r3, [r7, #16]
   2b880:	b2da      	uxtb	r2, r3
   2b882:	230f      	movs	r3, #15
   2b884:	18fb      	adds	r3, r7, r3
   2b886:	210f      	movs	r1, #15
   2b888:	400a      	ands	r2, r1
   2b88a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2b88c:	693b      	ldr	r3, [r7, #16]
   2b88e:	091b      	lsrs	r3, r3, #4
   2b890:	3b01      	subs	r3, #1
   2b892:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2b894:	492a      	ldr	r1, [pc, #168]	; (2b940 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2b896:	687b      	ldr	r3, [r7, #4]
   2b898:	781b      	ldrb	r3, [r3, #0]
   2b89a:	01db      	lsls	r3, r3, #7
   2b89c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2b89e:	687b      	ldr	r3, [r7, #4]
   2b8a0:	785b      	ldrb	r3, [r3, #1]
   2b8a2:	019b      	lsls	r3, r3, #6
   2b8a4:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2b8a6:	4313      	orrs	r3, r2
   2b8a8:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2b8aa:	2344      	movs	r3, #68	; 0x44
   2b8ac:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2b8ae:	4b24      	ldr	r3, [pc, #144]	; (2b940 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2b8b0:	220f      	movs	r2, #15
   2b8b2:	18ba      	adds	r2, r7, r2
   2b8b4:	7812      	ldrb	r2, [r2, #0]
   2b8b6:	0412      	lsls	r2, r2, #16
   2b8b8:	0011      	movs	r1, r2
   2b8ba:	22f0      	movs	r2, #240	; 0xf0
   2b8bc:	0312      	lsls	r2, r2, #12
   2b8be:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2b8c0:	693a      	ldr	r2, [r7, #16]
   2b8c2:	0512      	lsls	r2, r2, #20
   2b8c4:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2b8c6:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2b8c8:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2b8ca:	4b1d      	ldr	r3, [pc, #116]	; (2b940 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2b8cc:	687a      	ldr	r2, [r7, #4]
   2b8ce:	8a12      	ldrh	r2, [r2, #16]
   2b8d0:	0412      	lsls	r2, r2, #16
   2b8d2:	0011      	movs	r1, r2
   2b8d4:	4a1b      	ldr	r2, [pc, #108]	; (2b944 <system_clock_source_dpll_set_config+0x104>)
   2b8d6:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2b8d8:	687a      	ldr	r2, [r7, #4]
   2b8da:	7892      	ldrb	r2, [r2, #2]
   2b8dc:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2b8de:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2b8e0:	687a      	ldr	r2, [r7, #4]
   2b8e2:	7cd2      	ldrb	r2, [r2, #19]
   2b8e4:	0212      	lsls	r2, r2, #8
   2b8e6:	0010      	movs	r0, r2
   2b8e8:	22e0      	movs	r2, #224	; 0xe0
   2b8ea:	00d2      	lsls	r2, r2, #3
   2b8ec:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2b8ee:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2b8f0:	687a      	ldr	r2, [r7, #4]
   2b8f2:	7d12      	ldrb	r2, [r2, #20]
   2b8f4:	0112      	lsls	r2, r2, #4
   2b8f6:	0010      	movs	r0, r2
   2b8f8:	2230      	movs	r2, #48	; 0x30
   2b8fa:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2b8fc:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2b8fe:	687a      	ldr	r2, [r7, #4]
   2b900:	78d2      	ldrb	r2, [r2, #3]
   2b902:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2b904:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2b906:	687a      	ldr	r2, [r7, #4]
   2b908:	7912      	ldrb	r2, [r2, #4]
   2b90a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2b90c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2b90e:	687a      	ldr	r2, [r7, #4]
   2b910:	7c92      	ldrb	r2, [r2, #18]
   2b912:	0010      	movs	r0, r2
   2b914:	2203      	movs	r2, #3
   2b916:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2b918:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2b91a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2b91c:	693b      	ldr	r3, [r7, #16]
   2b91e:	3301      	adds	r3, #1
   2b920:	011a      	lsls	r2, r3, #4
   2b922:	230f      	movs	r3, #15
   2b924:	18fb      	adds	r3, r7, r3
   2b926:	781b      	ldrb	r3, [r3, #0]
   2b928:	18d3      	adds	r3, r2, r3
   2b92a:	697a      	ldr	r2, [r7, #20]
   2b92c:	4353      	muls	r3, r2
   2b92e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2b930:	4b05      	ldr	r3, [pc, #20]	; (2b948 <system_clock_source_dpll_set_config+0x108>)
   2b932:	60da      	str	r2, [r3, #12]
}
   2b934:	46c0      	nop			; (mov r8, r8)
   2b936:	46bd      	mov	sp, r7
   2b938:	b006      	add	sp, #24
   2b93a:	bd80      	pop	{r7, pc}
   2b93c:	00034bf5 	.word	0x00034bf5
   2b940:	40000800 	.word	0x40000800
   2b944:	07ff0000 	.word	0x07ff0000
   2b948:	2000413c 	.word	0x2000413c

0002b94c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2b94c:	b580      	push	{r7, lr}
   2b94e:	b082      	sub	sp, #8
   2b950:	af00      	add	r7, sp, #0
   2b952:	0002      	movs	r2, r0
   2b954:	1dfb      	adds	r3, r7, #7
   2b956:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2b958:	1dfb      	adds	r3, r7, #7
   2b95a:	781b      	ldrb	r3, [r3, #0]
   2b95c:	2b08      	cmp	r3, #8
   2b95e:	d83b      	bhi.n	2b9d8 <system_clock_source_enable+0x8c>
   2b960:	009a      	lsls	r2, r3, #2
   2b962:	4b21      	ldr	r3, [pc, #132]	; (2b9e8 <system_clock_source_enable+0x9c>)
   2b964:	18d3      	adds	r3, r2, r3
   2b966:	681b      	ldr	r3, [r3, #0]
   2b968:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2b96a:	4b20      	ldr	r3, [pc, #128]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b96c:	4a1f      	ldr	r2, [pc, #124]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b96e:	6a12      	ldr	r2, [r2, #32]
   2b970:	2102      	movs	r1, #2
   2b972:	430a      	orrs	r2, r1
   2b974:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2b976:	2300      	movs	r3, #0
   2b978:	e031      	b.n	2b9de <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2b97a:	4b1c      	ldr	r3, [pc, #112]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b97c:	4a1b      	ldr	r2, [pc, #108]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b97e:	6992      	ldr	r2, [r2, #24]
   2b980:	2102      	movs	r1, #2
   2b982:	430a      	orrs	r2, r1
   2b984:	619a      	str	r2, [r3, #24]
		break;
   2b986:	e029      	b.n	2b9dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2b988:	4a18      	ldr	r2, [pc, #96]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b98a:	4b18      	ldr	r3, [pc, #96]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b98c:	8a1b      	ldrh	r3, [r3, #16]
   2b98e:	b29b      	uxth	r3, r3
   2b990:	2102      	movs	r1, #2
   2b992:	430b      	orrs	r3, r1
   2b994:	b29b      	uxth	r3, r3
   2b996:	8213      	strh	r3, [r2, #16]
		break;
   2b998:	e020      	b.n	2b9dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2b99a:	4a14      	ldr	r2, [pc, #80]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b99c:	4b13      	ldr	r3, [pc, #76]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b99e:	8a9b      	ldrh	r3, [r3, #20]
   2b9a0:	b29b      	uxth	r3, r3
   2b9a2:	2102      	movs	r1, #2
   2b9a4:	430b      	orrs	r3, r1
   2b9a6:	b29b      	uxth	r3, r3
   2b9a8:	8293      	strh	r3, [r2, #20]
		break;
   2b9aa:	e017      	b.n	2b9dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2b9ac:	4b10      	ldr	r3, [pc, #64]	; (2b9f0 <system_clock_source_enable+0xa4>)
   2b9ae:	681b      	ldr	r3, [r3, #0]
   2b9b0:	2202      	movs	r2, #2
   2b9b2:	431a      	orrs	r2, r3
   2b9b4:	4b0e      	ldr	r3, [pc, #56]	; (2b9f0 <system_clock_source_enable+0xa4>)
   2b9b6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2b9b8:	4b0e      	ldr	r3, [pc, #56]	; (2b9f4 <system_clock_source_enable+0xa8>)
   2b9ba:	4798      	blx	r3
		break;
   2b9bc:	e00e      	b.n	2b9dc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2b9be:	4a0b      	ldr	r2, [pc, #44]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b9c0:	490a      	ldr	r1, [pc, #40]	; (2b9ec <system_clock_source_enable+0xa0>)
   2b9c2:	2344      	movs	r3, #68	; 0x44
   2b9c4:	5ccb      	ldrb	r3, [r1, r3]
   2b9c6:	b2db      	uxtb	r3, r3
   2b9c8:	2102      	movs	r1, #2
   2b9ca:	430b      	orrs	r3, r1
   2b9cc:	b2d9      	uxtb	r1, r3
   2b9ce:	2344      	movs	r3, #68	; 0x44
   2b9d0:	54d1      	strb	r1, [r2, r3]
		break;
   2b9d2:	e003      	b.n	2b9dc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2b9d4:	2300      	movs	r3, #0
   2b9d6:	e002      	b.n	2b9de <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2b9d8:	2317      	movs	r3, #23
   2b9da:	e000      	b.n	2b9de <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2b9dc:	2300      	movs	r3, #0
}
   2b9de:	0018      	movs	r0, r3
   2b9e0:	46bd      	mov	sp, r7
   2b9e2:	b002      	add	sp, #8
   2b9e4:	bd80      	pop	{r7, pc}
   2b9e6:	46c0      	nop			; (mov r8, r8)
   2b9e8:	0003c5cc 	.word	0x0003c5cc
   2b9ec:	40000800 	.word	0x40000800
   2b9f0:	2000413c 	.word	0x2000413c
   2b9f4:	0002b6c5 	.word	0x0002b6c5

0002b9f8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2b9f8:	b580      	push	{r7, lr}
   2b9fa:	b084      	sub	sp, #16
   2b9fc:	af00      	add	r7, sp, #0
   2b9fe:	0002      	movs	r2, r0
   2ba00:	1dfb      	adds	r3, r7, #7
   2ba02:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2ba04:	2300      	movs	r3, #0
   2ba06:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2ba08:	1dfb      	adds	r3, r7, #7
   2ba0a:	781b      	ldrb	r3, [r3, #0]
   2ba0c:	2b08      	cmp	r3, #8
   2ba0e:	d821      	bhi.n	2ba54 <system_clock_source_is_ready+0x5c>
   2ba10:	009a      	lsls	r2, r3, #2
   2ba12:	4b18      	ldr	r3, [pc, #96]	; (2ba74 <system_clock_source_is_ready+0x7c>)
   2ba14:	18d3      	adds	r3, r2, r3
   2ba16:	681b      	ldr	r3, [r3, #0]
   2ba18:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2ba1a:	2308      	movs	r3, #8
   2ba1c:	60fb      	str	r3, [r7, #12]
		break;
   2ba1e:	e01b      	b.n	2ba58 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2ba20:	2304      	movs	r3, #4
   2ba22:	60fb      	str	r3, [r7, #12]
		break;
   2ba24:	e018      	b.n	2ba58 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2ba26:	2301      	movs	r3, #1
   2ba28:	60fb      	str	r3, [r7, #12]
		break;
   2ba2a:	e015      	b.n	2ba58 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2ba2c:	2302      	movs	r3, #2
   2ba2e:	60fb      	str	r3, [r7, #12]
		break;
   2ba30:	e012      	b.n	2ba58 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2ba32:	2310      	movs	r3, #16
   2ba34:	60fb      	str	r3, [r7, #12]
		}
		break;
   2ba36:	e00f      	b.n	2ba58 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2ba38:	4a0f      	ldr	r2, [pc, #60]	; (2ba78 <system_clock_source_is_ready+0x80>)
   2ba3a:	2350      	movs	r3, #80	; 0x50
   2ba3c:	5cd3      	ldrb	r3, [r2, r3]
   2ba3e:	b2db      	uxtb	r3, r3
   2ba40:	001a      	movs	r2, r3
   2ba42:	2303      	movs	r3, #3
   2ba44:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2ba46:	3b03      	subs	r3, #3
   2ba48:	425a      	negs	r2, r3
   2ba4a:	4153      	adcs	r3, r2
   2ba4c:	b2db      	uxtb	r3, r3
   2ba4e:	e00c      	b.n	2ba6a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2ba50:	2301      	movs	r3, #1
   2ba52:	e00a      	b.n	2ba6a <system_clock_source_is_ready+0x72>

	default:
		return false;
   2ba54:	2300      	movs	r3, #0
   2ba56:	e008      	b.n	2ba6a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2ba58:	4b07      	ldr	r3, [pc, #28]	; (2ba78 <system_clock_source_is_ready+0x80>)
   2ba5a:	68db      	ldr	r3, [r3, #12]
   2ba5c:	68fa      	ldr	r2, [r7, #12]
   2ba5e:	401a      	ands	r2, r3
   2ba60:	68fb      	ldr	r3, [r7, #12]
   2ba62:	1ad3      	subs	r3, r2, r3
   2ba64:	425a      	negs	r2, r3
   2ba66:	4153      	adcs	r3, r2
   2ba68:	b2db      	uxtb	r3, r3
}
   2ba6a:	0018      	movs	r0, r3
   2ba6c:	46bd      	mov	sp, r7
   2ba6e:	b004      	add	sp, #16
   2ba70:	bd80      	pop	{r7, pc}
   2ba72:	46c0      	nop			; (mov r8, r8)
   2ba74:	0003c5f0 	.word	0x0003c5f0
   2ba78:	40000800 	.word	0x40000800

0002ba7c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2ba7c:	b580      	push	{r7, lr}
   2ba7e:	b082      	sub	sp, #8
   2ba80:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2ba82:	003b      	movs	r3, r7
   2ba84:	2203      	movs	r2, #3
   2ba86:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2ba88:	2300      	movs	r3, #0
   2ba8a:	607b      	str	r3, [r7, #4]
   2ba8c:	e009      	b.n	2baa2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2ba8e:	687b      	ldr	r3, [r7, #4]
   2ba90:	b2db      	uxtb	r3, r3
   2ba92:	003a      	movs	r2, r7
   2ba94:	0011      	movs	r1, r2
   2ba96:	0018      	movs	r0, r3
   2ba98:	4b05      	ldr	r3, [pc, #20]	; (2bab0 <_switch_peripheral_gclk+0x34>)
   2ba9a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2ba9c:	687b      	ldr	r3, [r7, #4]
   2ba9e:	3301      	adds	r3, #1
   2baa0:	607b      	str	r3, [r7, #4]
   2baa2:	687b      	ldr	r3, [r7, #4]
   2baa4:	2b24      	cmp	r3, #36	; 0x24
   2baa6:	d9f2      	bls.n	2ba8e <_switch_peripheral_gclk+0x12>
	}
}
   2baa8:	46c0      	nop			; (mov r8, r8)
   2baaa:	46bd      	mov	sp, r7
   2baac:	b002      	add	sp, #8
   2baae:	bd80      	pop	{r7, pc}
   2bab0:	0002c081 	.word	0x0002c081

0002bab4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2bab4:	b580      	push	{r7, lr}
   2bab6:	b0a6      	sub	sp, #152	; 0x98
   2bab8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2baba:	4b92      	ldr	r3, [pc, #584]	; (2bd04 <system_clock_init+0x250>)
   2babc:	22c2      	movs	r2, #194	; 0xc2
   2babe:	00d2      	lsls	r2, r2, #3
   2bac0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2bac2:	2003      	movs	r0, #3
   2bac4:	4b90      	ldr	r3, [pc, #576]	; (2bd08 <system_clock_init+0x254>)
   2bac6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2bac8:	4b90      	ldr	r3, [pc, #576]	; (2bd0c <system_clock_init+0x258>)
   2baca:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2bacc:	2394      	movs	r3, #148	; 0x94
   2bace:	18fb      	adds	r3, r7, r3
   2bad0:	0018      	movs	r0, r3
   2bad2:	4b8f      	ldr	r3, [pc, #572]	; (2bd10 <system_clock_init+0x25c>)
   2bad4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2bad6:	2394      	movs	r3, #148	; 0x94
   2bad8:	18fb      	adds	r3, r7, r3
   2bada:	2200      	movs	r2, #0
   2badc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2bade:	2394      	movs	r3, #148	; 0x94
   2bae0:	18fb      	adds	r3, r7, r3
   2bae2:	2201      	movs	r2, #1
   2bae4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2bae6:	2394      	movs	r3, #148	; 0x94
   2bae8:	18fb      	adds	r3, r7, r3
   2baea:	2200      	movs	r2, #0
   2baec:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2baee:	2394      	movs	r3, #148	; 0x94
   2baf0:	18fb      	adds	r3, r7, r3
   2baf2:	0018      	movs	r0, r3
   2baf4:	4b87      	ldr	r3, [pc, #540]	; (2bd14 <system_clock_init+0x260>)
   2baf6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2baf8:	2006      	movs	r0, #6
   2bafa:	4b87      	ldr	r3, [pc, #540]	; (2bd18 <system_clock_init+0x264>)
   2bafc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2bafe:	4b87      	ldr	r3, [pc, #540]	; (2bd1c <system_clock_init+0x268>)
   2bb00:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2bb02:	2360      	movs	r3, #96	; 0x60
   2bb04:	18fb      	adds	r3, r7, r3
   2bb06:	0018      	movs	r0, r3
   2bb08:	4b85      	ldr	r3, [pc, #532]	; (2bd20 <system_clock_init+0x26c>)
   2bb0a:	4798      	blx	r3
   2bb0c:	2360      	movs	r3, #96	; 0x60
   2bb0e:	18fb      	adds	r3, r7, r3
   2bb10:	2206      	movs	r2, #6
   2bb12:	701a      	strb	r2, [r3, #0]
   2bb14:	2360      	movs	r3, #96	; 0x60
   2bb16:	18fb      	adds	r3, r7, r3
   2bb18:	2208      	movs	r2, #8
   2bb1a:	605a      	str	r2, [r3, #4]
   2bb1c:	2360      	movs	r3, #96	; 0x60
   2bb1e:	18fb      	adds	r3, r7, r3
   2bb20:	2200      	movs	r2, #0
   2bb22:	721a      	strb	r2, [r3, #8]
   2bb24:	2360      	movs	r3, #96	; 0x60
   2bb26:	18fb      	adds	r3, r7, r3
   2bb28:	2200      	movs	r2, #0
   2bb2a:	725a      	strb	r2, [r3, #9]
   2bb2c:	2360      	movs	r3, #96	; 0x60
   2bb2e:	18fb      	adds	r3, r7, r3
   2bb30:	0019      	movs	r1, r3
   2bb32:	2001      	movs	r0, #1
   2bb34:	4b7b      	ldr	r3, [pc, #492]	; (2bd24 <system_clock_init+0x270>)
   2bb36:	4798      	blx	r3
   2bb38:	2001      	movs	r0, #1
   2bb3a:	4b7b      	ldr	r3, [pc, #492]	; (2bd28 <system_clock_init+0x274>)
   2bb3c:	4798      	blx	r3
   2bb3e:	2354      	movs	r3, #84	; 0x54
   2bb40:	18fb      	adds	r3, r7, r3
   2bb42:	0018      	movs	r0, r3
   2bb44:	4b76      	ldr	r3, [pc, #472]	; (2bd20 <system_clock_init+0x26c>)
   2bb46:	4798      	blx	r3
   2bb48:	2354      	movs	r3, #84	; 0x54
   2bb4a:	18fb      	adds	r3, r7, r3
   2bb4c:	2203      	movs	r2, #3
   2bb4e:	701a      	strb	r2, [r3, #0]
   2bb50:	2354      	movs	r3, #84	; 0x54
   2bb52:	18fb      	adds	r3, r7, r3
   2bb54:	2201      	movs	r2, #1
   2bb56:	605a      	str	r2, [r3, #4]
   2bb58:	2354      	movs	r3, #84	; 0x54
   2bb5a:	18fb      	adds	r3, r7, r3
   2bb5c:	2201      	movs	r2, #1
   2bb5e:	721a      	strb	r2, [r3, #8]
   2bb60:	2354      	movs	r3, #84	; 0x54
   2bb62:	18fb      	adds	r3, r7, r3
   2bb64:	2200      	movs	r2, #0
   2bb66:	725a      	strb	r2, [r3, #9]
   2bb68:	2354      	movs	r3, #84	; 0x54
   2bb6a:	18fb      	adds	r3, r7, r3
   2bb6c:	0019      	movs	r1, r3
   2bb6e:	2002      	movs	r0, #2
   2bb70:	4b6c      	ldr	r3, [pc, #432]	; (2bd24 <system_clock_init+0x270>)
   2bb72:	4798      	blx	r3
   2bb74:	2002      	movs	r0, #2
   2bb76:	4b6c      	ldr	r3, [pc, #432]	; (2bd28 <system_clock_init+0x274>)
   2bb78:	4798      	blx	r3
   2bb7a:	233c      	movs	r3, #60	; 0x3c
   2bb7c:	18fb      	adds	r3, r7, r3
   2bb7e:	0018      	movs	r0, r3
   2bb80:	4b67      	ldr	r3, [pc, #412]	; (2bd20 <system_clock_init+0x26c>)
   2bb82:	4798      	blx	r3
   2bb84:	233c      	movs	r3, #60	; 0x3c
   2bb86:	18fb      	adds	r3, r7, r3
   2bb88:	2203      	movs	r2, #3
   2bb8a:	701a      	strb	r2, [r3, #0]
   2bb8c:	233c      	movs	r3, #60	; 0x3c
   2bb8e:	18fb      	adds	r3, r7, r3
   2bb90:	2220      	movs	r2, #32
   2bb92:	605a      	str	r2, [r3, #4]
   2bb94:	233c      	movs	r3, #60	; 0x3c
   2bb96:	18fb      	adds	r3, r7, r3
   2bb98:	2200      	movs	r2, #0
   2bb9a:	721a      	strb	r2, [r3, #8]
   2bb9c:	233c      	movs	r3, #60	; 0x3c
   2bb9e:	18fb      	adds	r3, r7, r3
   2bba0:	2200      	movs	r2, #0
   2bba2:	725a      	strb	r2, [r3, #9]
   2bba4:	233c      	movs	r3, #60	; 0x3c
   2bba6:	18fb      	adds	r3, r7, r3
   2bba8:	0019      	movs	r1, r3
   2bbaa:	2004      	movs	r0, #4
   2bbac:	4b5d      	ldr	r3, [pc, #372]	; (2bd24 <system_clock_init+0x270>)
   2bbae:	4798      	blx	r3
   2bbb0:	2004      	movs	r0, #4
   2bbb2:	4b5d      	ldr	r3, [pc, #372]	; (2bd28 <system_clock_init+0x274>)
   2bbb4:	4798      	blx	r3
   2bbb6:	2330      	movs	r3, #48	; 0x30
   2bbb8:	18fb      	adds	r3, r7, r3
   2bbba:	0018      	movs	r0, r3
   2bbbc:	4b58      	ldr	r3, [pc, #352]	; (2bd20 <system_clock_init+0x26c>)
   2bbbe:	4798      	blx	r3
   2bbc0:	2330      	movs	r3, #48	; 0x30
   2bbc2:	18fb      	adds	r3, r7, r3
   2bbc4:	2206      	movs	r2, #6
   2bbc6:	701a      	strb	r2, [r3, #0]
   2bbc8:	2330      	movs	r3, #48	; 0x30
   2bbca:	18fb      	adds	r3, r7, r3
   2bbcc:	2201      	movs	r2, #1
   2bbce:	605a      	str	r2, [r3, #4]
   2bbd0:	2330      	movs	r3, #48	; 0x30
   2bbd2:	18fb      	adds	r3, r7, r3
   2bbd4:	2200      	movs	r2, #0
   2bbd6:	721a      	strb	r2, [r3, #8]
   2bbd8:	2330      	movs	r3, #48	; 0x30
   2bbda:	18fb      	adds	r3, r7, r3
   2bbdc:	2200      	movs	r2, #0
   2bbde:	725a      	strb	r2, [r3, #9]
   2bbe0:	2330      	movs	r3, #48	; 0x30
   2bbe2:	18fb      	adds	r3, r7, r3
   2bbe4:	0019      	movs	r1, r3
   2bbe6:	2005      	movs	r0, #5
   2bbe8:	4b4e      	ldr	r3, [pc, #312]	; (2bd24 <system_clock_init+0x270>)
   2bbea:	4798      	blx	r3
   2bbec:	2005      	movs	r0, #5
   2bbee:	4b4e      	ldr	r3, [pc, #312]	; (2bd28 <system_clock_init+0x274>)
   2bbf0:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2bbf2:	2390      	movs	r3, #144	; 0x90
   2bbf4:	18fb      	adds	r3, r7, r3
   2bbf6:	0018      	movs	r0, r3
   2bbf8:	4b4c      	ldr	r3, [pc, #304]	; (2bd2c <system_clock_init+0x278>)
   2bbfa:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2bbfc:	2390      	movs	r3, #144	; 0x90
   2bbfe:	18fb      	adds	r3, r7, r3
   2bc00:	2201      	movs	r2, #1
   2bc02:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2bc04:	2390      	movs	r3, #144	; 0x90
   2bc06:	18fb      	adds	r3, r7, r3
   2bc08:	0019      	movs	r1, r3
   2bc0a:	2001      	movs	r0, #1
   2bc0c:	4b48      	ldr	r3, [pc, #288]	; (2bd30 <system_clock_init+0x27c>)
   2bc0e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2bc10:	2001      	movs	r0, #1
   2bc12:	4b48      	ldr	r3, [pc, #288]	; (2bd34 <system_clock_init+0x280>)
   2bc14:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2bc16:	2378      	movs	r3, #120	; 0x78
   2bc18:	18fb      	adds	r3, r7, r3
   2bc1a:	0018      	movs	r0, r3
   2bc1c:	4b46      	ldr	r3, [pc, #280]	; (2bd38 <system_clock_init+0x284>)
   2bc1e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2bc20:	2378      	movs	r3, #120	; 0x78
   2bc22:	18fb      	adds	r3, r7, r3
   2bc24:	2200      	movs	r2, #0
   2bc26:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2bc28:	2378      	movs	r3, #120	; 0x78
   2bc2a:	18fb      	adds	r3, r7, r3
   2bc2c:	2200      	movs	r2, #0
   2bc2e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2bc30:	2378      	movs	r3, #120	; 0x78
   2bc32:	18fb      	adds	r3, r7, r3
   2bc34:	2200      	movs	r2, #0
   2bc36:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2bc38:	2378      	movs	r3, #120	; 0x78
   2bc3a:	18fb      	adds	r3, r7, r3
   2bc3c:	2200      	movs	r2, #0
   2bc3e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2bc40:	2378      	movs	r3, #120	; 0x78
   2bc42:	18fb      	adds	r3, r7, r3
   2bc44:	2200      	movs	r2, #0
   2bc46:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2bc48:	2378      	movs	r3, #120	; 0x78
   2bc4a:	18fb      	adds	r3, r7, r3
   2bc4c:	2200      	movs	r2, #0
   2bc4e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2bc50:	2378      	movs	r3, #120	; 0x78
   2bc52:	18fb      	adds	r3, r7, r3
   2bc54:	2200      	movs	r2, #0
   2bc56:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2bc58:	2378      	movs	r3, #120	; 0x78
   2bc5a:	18fb      	adds	r3, r7, r3
   2bc5c:	2202      	movs	r2, #2
   2bc5e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2bc60:	2378      	movs	r3, #120	; 0x78
   2bc62:	18fb      	adds	r3, r7, r3
   2bc64:	4a35      	ldr	r2, [pc, #212]	; (2bd3c <system_clock_init+0x288>)
   2bc66:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2bc68:	2378      	movs	r3, #120	; 0x78
   2bc6a:	18fb      	adds	r3, r7, r3
   2bc6c:	2201      	movs	r2, #1
   2bc6e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2bc70:	2378      	movs	r3, #120	; 0x78
   2bc72:	18fb      	adds	r3, r7, r3
   2bc74:	4a32      	ldr	r2, [pc, #200]	; (2bd40 <system_clock_init+0x28c>)
   2bc76:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2bc78:	2378      	movs	r3, #120	; 0x78
   2bc7a:	18fb      	adds	r3, r7, r3
   2bc7c:	0018      	movs	r0, r3
   2bc7e:	4b31      	ldr	r3, [pc, #196]	; (2bd44 <system_clock_init+0x290>)
   2bc80:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2bc82:	2008      	movs	r0, #8
   2bc84:	4b24      	ldr	r3, [pc, #144]	; (2bd18 <system_clock_init+0x264>)
   2bc86:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2bc88:	46c0      	nop			; (mov r8, r8)
   2bc8a:	2008      	movs	r0, #8
   2bc8c:	4b2e      	ldr	r3, [pc, #184]	; (2bd48 <system_clock_init+0x294>)
   2bc8e:	4798      	blx	r3
   2bc90:	0003      	movs	r3, r0
   2bc92:	001a      	movs	r2, r3
   2bc94:	2301      	movs	r3, #1
   2bc96:	4053      	eors	r3, r2
   2bc98:	b2db      	uxtb	r3, r3
   2bc9a:	2b00      	cmp	r3, #0
   2bc9c:	d1f5      	bne.n	2bc8a <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2bc9e:	4919      	ldr	r1, [pc, #100]	; (2bd04 <system_clock_init+0x250>)
   2bca0:	2244      	movs	r2, #68	; 0x44
   2bca2:	5c8b      	ldrb	r3, [r1, r2]
   2bca4:	2080      	movs	r0, #128	; 0x80
   2bca6:	4240      	negs	r0, r0
   2bca8:	4303      	orrs	r3, r0
   2bcaa:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2bcac:	2000      	movs	r0, #0
   2bcae:	4b27      	ldr	r3, [pc, #156]	; (2bd4c <system_clock_init+0x298>)
   2bcb0:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2bcb2:	2100      	movs	r1, #0
   2bcb4:	2000      	movs	r0, #0
   2bcb6:	4b26      	ldr	r3, [pc, #152]	; (2bd50 <system_clock_init+0x29c>)
   2bcb8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2bcba:	2100      	movs	r1, #0
   2bcbc:	2001      	movs	r0, #1
   2bcbe:	4b24      	ldr	r3, [pc, #144]	; (2bd50 <system_clock_init+0x29c>)
   2bcc0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2bcc2:	2100      	movs	r1, #0
   2bcc4:	2002      	movs	r0, #2
   2bcc6:	4b22      	ldr	r3, [pc, #136]	; (2bd50 <system_clock_init+0x29c>)
   2bcc8:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2bcca:	003b      	movs	r3, r7
   2bccc:	0018      	movs	r0, r3
   2bcce:	4b14      	ldr	r3, [pc, #80]	; (2bd20 <system_clock_init+0x26c>)
   2bcd0:	4798      	blx	r3
   2bcd2:	003b      	movs	r3, r7
   2bcd4:	2208      	movs	r2, #8
   2bcd6:	701a      	strb	r2, [r3, #0]
   2bcd8:	003b      	movs	r3, r7
   2bcda:	2201      	movs	r2, #1
   2bcdc:	605a      	str	r2, [r3, #4]
   2bcde:	003b      	movs	r3, r7
   2bce0:	2200      	movs	r2, #0
   2bce2:	721a      	strb	r2, [r3, #8]
   2bce4:	003b      	movs	r3, r7
   2bce6:	2201      	movs	r2, #1
   2bce8:	725a      	strb	r2, [r3, #9]
   2bcea:	003b      	movs	r3, r7
   2bcec:	0019      	movs	r1, r3
   2bcee:	2000      	movs	r0, #0
   2bcf0:	4b0c      	ldr	r3, [pc, #48]	; (2bd24 <system_clock_init+0x270>)
   2bcf2:	4798      	blx	r3
   2bcf4:	2000      	movs	r0, #0
   2bcf6:	4b0c      	ldr	r3, [pc, #48]	; (2bd28 <system_clock_init+0x274>)
   2bcf8:	4798      	blx	r3
#endif
}
   2bcfa:	46c0      	nop			; (mov r8, r8)
   2bcfc:	46bd      	mov	sp, r7
   2bcfe:	b026      	add	sp, #152	; 0x98
   2bd00:	bd80      	pop	{r7, pc}
   2bd02:	46c0      	nop			; (mov r8, r8)
   2bd04:	40000800 	.word	0x40000800
   2bd08:	0002b675 	.word	0x0002b675
   2bd0c:	0002ba7d 	.word	0x0002ba7d
   2bd10:	0002b585 	.word	0x0002b585
   2bd14:	0002b7c9 	.word	0x0002b7c9
   2bd18:	0002b94d 	.word	0x0002b94d
   2bd1c:	0002bdf9 	.word	0x0002bdf9
   2bd20:	0002b541 	.word	0x0002b541
   2bd24:	0002be29 	.word	0x0002be29
   2bd28:	0002bf4d 	.word	0x0002bf4d
   2bd2c:	0002b56f 	.word	0x0002b56f
   2bd30:	0002c081 	.word	0x0002c081
   2bd34:	0002c0c5 	.word	0x0002c0c5
   2bd38:	0002b61d 	.word	0x0002b61d
   2bd3c:	000f4240 	.word	0x000f4240
   2bd40:	02dc6c00 	.word	0x02dc6c00
   2bd44:	0002b841 	.word	0x0002b841
   2bd48:	0002b9f9 	.word	0x0002b9f9
   2bd4c:	0002b5a9 	.word	0x0002b5a9
   2bd50:	0002b5c9 	.word	0x0002b5c9

0002bd54 <system_apb_clock_set_mask>:
{
   2bd54:	b580      	push	{r7, lr}
   2bd56:	b082      	sub	sp, #8
   2bd58:	af00      	add	r7, sp, #0
   2bd5a:	0002      	movs	r2, r0
   2bd5c:	6039      	str	r1, [r7, #0]
   2bd5e:	1dfb      	adds	r3, r7, #7
   2bd60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2bd62:	1dfb      	adds	r3, r7, #7
   2bd64:	781b      	ldrb	r3, [r3, #0]
   2bd66:	2b01      	cmp	r3, #1
   2bd68:	d00a      	beq.n	2bd80 <system_apb_clock_set_mask+0x2c>
   2bd6a:	2b02      	cmp	r3, #2
   2bd6c:	d00f      	beq.n	2bd8e <system_apb_clock_set_mask+0x3a>
   2bd6e:	2b00      	cmp	r3, #0
   2bd70:	d114      	bne.n	2bd9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2bd72:	4b0e      	ldr	r3, [pc, #56]	; (2bdac <system_apb_clock_set_mask+0x58>)
   2bd74:	4a0d      	ldr	r2, [pc, #52]	; (2bdac <system_apb_clock_set_mask+0x58>)
   2bd76:	6991      	ldr	r1, [r2, #24]
   2bd78:	683a      	ldr	r2, [r7, #0]
   2bd7a:	430a      	orrs	r2, r1
   2bd7c:	619a      	str	r2, [r3, #24]
			break;
   2bd7e:	e00f      	b.n	2bda0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2bd80:	4b0a      	ldr	r3, [pc, #40]	; (2bdac <system_apb_clock_set_mask+0x58>)
   2bd82:	4a0a      	ldr	r2, [pc, #40]	; (2bdac <system_apb_clock_set_mask+0x58>)
   2bd84:	69d1      	ldr	r1, [r2, #28]
   2bd86:	683a      	ldr	r2, [r7, #0]
   2bd88:	430a      	orrs	r2, r1
   2bd8a:	61da      	str	r2, [r3, #28]
			break;
   2bd8c:	e008      	b.n	2bda0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2bd8e:	4b07      	ldr	r3, [pc, #28]	; (2bdac <system_apb_clock_set_mask+0x58>)
   2bd90:	4a06      	ldr	r2, [pc, #24]	; (2bdac <system_apb_clock_set_mask+0x58>)
   2bd92:	6a11      	ldr	r1, [r2, #32]
   2bd94:	683a      	ldr	r2, [r7, #0]
   2bd96:	430a      	orrs	r2, r1
   2bd98:	621a      	str	r2, [r3, #32]
			break;
   2bd9a:	e001      	b.n	2bda0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2bd9c:	2317      	movs	r3, #23
   2bd9e:	e000      	b.n	2bda2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2bda0:	2300      	movs	r3, #0
}
   2bda2:	0018      	movs	r0, r3
   2bda4:	46bd      	mov	sp, r7
   2bda6:	b002      	add	sp, #8
   2bda8:	bd80      	pop	{r7, pc}
   2bdaa:	46c0      	nop			; (mov r8, r8)
   2bdac:	40000400 	.word	0x40000400

0002bdb0 <system_interrupt_enter_critical_section>:
{
   2bdb0:	b580      	push	{r7, lr}
   2bdb2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2bdb4:	4b02      	ldr	r3, [pc, #8]	; (2bdc0 <system_interrupt_enter_critical_section+0x10>)
   2bdb6:	4798      	blx	r3
}
   2bdb8:	46c0      	nop			; (mov r8, r8)
   2bdba:	46bd      	mov	sp, r7
   2bdbc:	bd80      	pop	{r7, pc}
   2bdbe:	46c0      	nop			; (mov r8, r8)
   2bdc0:	00028391 	.word	0x00028391

0002bdc4 <system_interrupt_leave_critical_section>:
{
   2bdc4:	b580      	push	{r7, lr}
   2bdc6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2bdc8:	4b02      	ldr	r3, [pc, #8]	; (2bdd4 <system_interrupt_leave_critical_section+0x10>)
   2bdca:	4798      	blx	r3
}
   2bdcc:	46c0      	nop			; (mov r8, r8)
   2bdce:	46bd      	mov	sp, r7
   2bdd0:	bd80      	pop	{r7, pc}
   2bdd2:	46c0      	nop			; (mov r8, r8)
   2bdd4:	000283e5 	.word	0x000283e5

0002bdd8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2bdd8:	b580      	push	{r7, lr}
   2bdda:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2bddc:	4b05      	ldr	r3, [pc, #20]	; (2bdf4 <system_gclk_is_syncing+0x1c>)
   2bdde:	785b      	ldrb	r3, [r3, #1]
   2bde0:	b2db      	uxtb	r3, r3
   2bde2:	b25b      	sxtb	r3, r3
   2bde4:	2b00      	cmp	r3, #0
   2bde6:	da01      	bge.n	2bdec <system_gclk_is_syncing+0x14>
		return true;
   2bde8:	2301      	movs	r3, #1
   2bdea:	e000      	b.n	2bdee <system_gclk_is_syncing+0x16>
	}

	return false;
   2bdec:	2300      	movs	r3, #0
}
   2bdee:	0018      	movs	r0, r3
   2bdf0:	46bd      	mov	sp, r7
   2bdf2:	bd80      	pop	{r7, pc}
   2bdf4:	40000c00 	.word	0x40000c00

0002bdf8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2bdf8:	b580      	push	{r7, lr}
   2bdfa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2bdfc:	2108      	movs	r1, #8
   2bdfe:	2000      	movs	r0, #0
   2be00:	4b07      	ldr	r3, [pc, #28]	; (2be20 <system_gclk_init+0x28>)
   2be02:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2be04:	4b07      	ldr	r3, [pc, #28]	; (2be24 <system_gclk_init+0x2c>)
   2be06:	2201      	movs	r2, #1
   2be08:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2be0a:	46c0      	nop			; (mov r8, r8)
   2be0c:	4b05      	ldr	r3, [pc, #20]	; (2be24 <system_gclk_init+0x2c>)
   2be0e:	781b      	ldrb	r3, [r3, #0]
   2be10:	b2db      	uxtb	r3, r3
   2be12:	001a      	movs	r2, r3
   2be14:	2301      	movs	r3, #1
   2be16:	4013      	ands	r3, r2
   2be18:	d1f8      	bne.n	2be0c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2be1a:	46c0      	nop			; (mov r8, r8)
   2be1c:	46bd      	mov	sp, r7
   2be1e:	bd80      	pop	{r7, pc}
   2be20:	0002bd55 	.word	0x0002bd55
   2be24:	40000c00 	.word	0x40000c00

0002be28 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2be28:	b580      	push	{r7, lr}
   2be2a:	b086      	sub	sp, #24
   2be2c:	af00      	add	r7, sp, #0
   2be2e:	0002      	movs	r2, r0
   2be30:	6039      	str	r1, [r7, #0]
   2be32:	1dfb      	adds	r3, r7, #7
   2be34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2be36:	1dfb      	adds	r3, r7, #7
   2be38:	781b      	ldrb	r3, [r3, #0]
   2be3a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2be3c:	1dfb      	adds	r3, r7, #7
   2be3e:	781b      	ldrb	r3, [r3, #0]
   2be40:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2be42:	683b      	ldr	r3, [r7, #0]
   2be44:	781b      	ldrb	r3, [r3, #0]
   2be46:	021b      	lsls	r3, r3, #8
   2be48:	001a      	movs	r2, r3
   2be4a:	697b      	ldr	r3, [r7, #20]
   2be4c:	4313      	orrs	r3, r2
   2be4e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2be50:	683b      	ldr	r3, [r7, #0]
   2be52:	785b      	ldrb	r3, [r3, #1]
   2be54:	2b00      	cmp	r3, #0
   2be56:	d004      	beq.n	2be62 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2be58:	697b      	ldr	r3, [r7, #20]
   2be5a:	2280      	movs	r2, #128	; 0x80
   2be5c:	02d2      	lsls	r2, r2, #11
   2be5e:	4313      	orrs	r3, r2
   2be60:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2be62:	683b      	ldr	r3, [r7, #0]
   2be64:	7a5b      	ldrb	r3, [r3, #9]
   2be66:	2b00      	cmp	r3, #0
   2be68:	d004      	beq.n	2be74 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2be6a:	697b      	ldr	r3, [r7, #20]
   2be6c:	2280      	movs	r2, #128	; 0x80
   2be6e:	0312      	lsls	r2, r2, #12
   2be70:	4313      	orrs	r3, r2
   2be72:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2be74:	683b      	ldr	r3, [r7, #0]
   2be76:	685b      	ldr	r3, [r3, #4]
   2be78:	2b01      	cmp	r3, #1
   2be7a:	d92c      	bls.n	2bed6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2be7c:	683b      	ldr	r3, [r7, #0]
   2be7e:	685a      	ldr	r2, [r3, #4]
   2be80:	683b      	ldr	r3, [r7, #0]
   2be82:	685b      	ldr	r3, [r3, #4]
   2be84:	3b01      	subs	r3, #1
   2be86:	4013      	ands	r3, r2
   2be88:	d11a      	bne.n	2bec0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2be8a:	2300      	movs	r3, #0
   2be8c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2be8e:	2302      	movs	r3, #2
   2be90:	60bb      	str	r3, [r7, #8]
   2be92:	e005      	b.n	2bea0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2be94:	68fb      	ldr	r3, [r7, #12]
   2be96:	3301      	adds	r3, #1
   2be98:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2be9a:	68bb      	ldr	r3, [r7, #8]
   2be9c:	005b      	lsls	r3, r3, #1
   2be9e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2bea0:	683b      	ldr	r3, [r7, #0]
   2bea2:	685a      	ldr	r2, [r3, #4]
   2bea4:	68bb      	ldr	r3, [r7, #8]
   2bea6:	429a      	cmp	r2, r3
   2bea8:	d8f4      	bhi.n	2be94 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2beaa:	68fb      	ldr	r3, [r7, #12]
   2beac:	021b      	lsls	r3, r3, #8
   2beae:	693a      	ldr	r2, [r7, #16]
   2beb0:	4313      	orrs	r3, r2
   2beb2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2beb4:	697b      	ldr	r3, [r7, #20]
   2beb6:	2280      	movs	r2, #128	; 0x80
   2beb8:	0352      	lsls	r2, r2, #13
   2beba:	4313      	orrs	r3, r2
   2bebc:	617b      	str	r3, [r7, #20]
   2bebe:	e00a      	b.n	2bed6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2bec0:	683b      	ldr	r3, [r7, #0]
   2bec2:	685b      	ldr	r3, [r3, #4]
   2bec4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2bec6:	693a      	ldr	r2, [r7, #16]
   2bec8:	4313      	orrs	r3, r2
   2beca:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2becc:	697b      	ldr	r3, [r7, #20]
   2bece:	2280      	movs	r2, #128	; 0x80
   2bed0:	0292      	lsls	r2, r2, #10
   2bed2:	4313      	orrs	r3, r2
   2bed4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2bed6:	683b      	ldr	r3, [r7, #0]
   2bed8:	7a1b      	ldrb	r3, [r3, #8]
   2beda:	2b00      	cmp	r3, #0
   2bedc:	d004      	beq.n	2bee8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2bede:	697b      	ldr	r3, [r7, #20]
   2bee0:	2280      	movs	r2, #128	; 0x80
   2bee2:	0392      	lsls	r2, r2, #14
   2bee4:	4313      	orrs	r3, r2
   2bee6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2bee8:	46c0      	nop			; (mov r8, r8)
   2beea:	4b13      	ldr	r3, [pc, #76]	; (2bf38 <system_gclk_gen_set_config+0x110>)
   2beec:	4798      	blx	r3
   2beee:	1e03      	subs	r3, r0, #0
   2bef0:	d1fb      	bne.n	2beea <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2bef2:	4b12      	ldr	r3, [pc, #72]	; (2bf3c <system_gclk_gen_set_config+0x114>)
   2bef4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2bef6:	4a12      	ldr	r2, [pc, #72]	; (2bf40 <system_gclk_gen_set_config+0x118>)
   2bef8:	1dfb      	adds	r3, r7, #7
   2befa:	781b      	ldrb	r3, [r3, #0]
   2befc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2befe:	46c0      	nop			; (mov r8, r8)
   2bf00:	4b0d      	ldr	r3, [pc, #52]	; (2bf38 <system_gclk_gen_set_config+0x110>)
   2bf02:	4798      	blx	r3
   2bf04:	1e03      	subs	r3, r0, #0
   2bf06:	d1fb      	bne.n	2bf00 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2bf08:	4b0e      	ldr	r3, [pc, #56]	; (2bf44 <system_gclk_gen_set_config+0x11c>)
   2bf0a:	693a      	ldr	r2, [r7, #16]
   2bf0c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2bf0e:	46c0      	nop			; (mov r8, r8)
   2bf10:	4b09      	ldr	r3, [pc, #36]	; (2bf38 <system_gclk_gen_set_config+0x110>)
   2bf12:	4798      	blx	r3
   2bf14:	1e03      	subs	r3, r0, #0
   2bf16:	d1fb      	bne.n	2bf10 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2bf18:	4b0a      	ldr	r3, [pc, #40]	; (2bf44 <system_gclk_gen_set_config+0x11c>)
   2bf1a:	4a0a      	ldr	r2, [pc, #40]	; (2bf44 <system_gclk_gen_set_config+0x11c>)
   2bf1c:	6851      	ldr	r1, [r2, #4]
   2bf1e:	2280      	movs	r2, #128	; 0x80
   2bf20:	0252      	lsls	r2, r2, #9
   2bf22:	4011      	ands	r1, r2
   2bf24:	697a      	ldr	r2, [r7, #20]
   2bf26:	430a      	orrs	r2, r1
   2bf28:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2bf2a:	4b07      	ldr	r3, [pc, #28]	; (2bf48 <system_gclk_gen_set_config+0x120>)
   2bf2c:	4798      	blx	r3
}
   2bf2e:	46c0      	nop			; (mov r8, r8)
   2bf30:	46bd      	mov	sp, r7
   2bf32:	b006      	add	sp, #24
   2bf34:	bd80      	pop	{r7, pc}
   2bf36:	46c0      	nop			; (mov r8, r8)
   2bf38:	0002bdd9 	.word	0x0002bdd9
   2bf3c:	0002bdb1 	.word	0x0002bdb1
   2bf40:	40000c08 	.word	0x40000c08
   2bf44:	40000c00 	.word	0x40000c00
   2bf48:	0002bdc5 	.word	0x0002bdc5

0002bf4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2bf4c:	b580      	push	{r7, lr}
   2bf4e:	b082      	sub	sp, #8
   2bf50:	af00      	add	r7, sp, #0
   2bf52:	0002      	movs	r2, r0
   2bf54:	1dfb      	adds	r3, r7, #7
   2bf56:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2bf58:	46c0      	nop			; (mov r8, r8)
   2bf5a:	4b0e      	ldr	r3, [pc, #56]	; (2bf94 <system_gclk_gen_enable+0x48>)
   2bf5c:	4798      	blx	r3
   2bf5e:	1e03      	subs	r3, r0, #0
   2bf60:	d1fb      	bne.n	2bf5a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2bf62:	4b0d      	ldr	r3, [pc, #52]	; (2bf98 <system_gclk_gen_enable+0x4c>)
   2bf64:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2bf66:	4a0d      	ldr	r2, [pc, #52]	; (2bf9c <system_gclk_gen_enable+0x50>)
   2bf68:	1dfb      	adds	r3, r7, #7
   2bf6a:	781b      	ldrb	r3, [r3, #0]
   2bf6c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2bf6e:	46c0      	nop			; (mov r8, r8)
   2bf70:	4b08      	ldr	r3, [pc, #32]	; (2bf94 <system_gclk_gen_enable+0x48>)
   2bf72:	4798      	blx	r3
   2bf74:	1e03      	subs	r3, r0, #0
   2bf76:	d1fb      	bne.n	2bf70 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2bf78:	4b09      	ldr	r3, [pc, #36]	; (2bfa0 <system_gclk_gen_enable+0x54>)
   2bf7a:	4a09      	ldr	r2, [pc, #36]	; (2bfa0 <system_gclk_gen_enable+0x54>)
   2bf7c:	6852      	ldr	r2, [r2, #4]
   2bf7e:	2180      	movs	r1, #128	; 0x80
   2bf80:	0249      	lsls	r1, r1, #9
   2bf82:	430a      	orrs	r2, r1
   2bf84:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2bf86:	4b07      	ldr	r3, [pc, #28]	; (2bfa4 <system_gclk_gen_enable+0x58>)
   2bf88:	4798      	blx	r3
}
   2bf8a:	46c0      	nop			; (mov r8, r8)
   2bf8c:	46bd      	mov	sp, r7
   2bf8e:	b002      	add	sp, #8
   2bf90:	bd80      	pop	{r7, pc}
   2bf92:	46c0      	nop			; (mov r8, r8)
   2bf94:	0002bdd9 	.word	0x0002bdd9
   2bf98:	0002bdb1 	.word	0x0002bdb1
   2bf9c:	40000c04 	.word	0x40000c04
   2bfa0:	40000c00 	.word	0x40000c00
   2bfa4:	0002bdc5 	.word	0x0002bdc5

0002bfa8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2bfa8:	b580      	push	{r7, lr}
   2bfaa:	b086      	sub	sp, #24
   2bfac:	af00      	add	r7, sp, #0
   2bfae:	0002      	movs	r2, r0
   2bfb0:	1dfb      	adds	r3, r7, #7
   2bfb2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2bfb4:	46c0      	nop			; (mov r8, r8)
   2bfb6:	4b2a      	ldr	r3, [pc, #168]	; (2c060 <system_gclk_gen_get_hz+0xb8>)
   2bfb8:	4798      	blx	r3
   2bfba:	1e03      	subs	r3, r0, #0
   2bfbc:	d1fb      	bne.n	2bfb6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2bfbe:	4b29      	ldr	r3, [pc, #164]	; (2c064 <system_gclk_gen_get_hz+0xbc>)
   2bfc0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2bfc2:	4a29      	ldr	r2, [pc, #164]	; (2c068 <system_gclk_gen_get_hz+0xc0>)
   2bfc4:	1dfb      	adds	r3, r7, #7
   2bfc6:	781b      	ldrb	r3, [r3, #0]
   2bfc8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2bfca:	46c0      	nop			; (mov r8, r8)
   2bfcc:	4b24      	ldr	r3, [pc, #144]	; (2c060 <system_gclk_gen_get_hz+0xb8>)
   2bfce:	4798      	blx	r3
   2bfd0:	1e03      	subs	r3, r0, #0
   2bfd2:	d1fb      	bne.n	2bfcc <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2bfd4:	4b25      	ldr	r3, [pc, #148]	; (2c06c <system_gclk_gen_get_hz+0xc4>)
   2bfd6:	685b      	ldr	r3, [r3, #4]
   2bfd8:	04db      	lsls	r3, r3, #19
   2bfda:	0edb      	lsrs	r3, r3, #27
   2bfdc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2bfde:	0018      	movs	r0, r3
   2bfe0:	4b23      	ldr	r3, [pc, #140]	; (2c070 <system_gclk_gen_get_hz+0xc8>)
   2bfe2:	4798      	blx	r3
   2bfe4:	0003      	movs	r3, r0
   2bfe6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2bfe8:	4a1f      	ldr	r2, [pc, #124]	; (2c068 <system_gclk_gen_get_hz+0xc0>)
   2bfea:	1dfb      	adds	r3, r7, #7
   2bfec:	781b      	ldrb	r3, [r3, #0]
   2bfee:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2bff0:	4b1e      	ldr	r3, [pc, #120]	; (2c06c <system_gclk_gen_get_hz+0xc4>)
   2bff2:	685b      	ldr	r3, [r3, #4]
   2bff4:	02db      	lsls	r3, r3, #11
   2bff6:	0fdb      	lsrs	r3, r3, #31
   2bff8:	b2da      	uxtb	r2, r3
   2bffa:	2313      	movs	r3, #19
   2bffc:	18fb      	adds	r3, r7, r3
   2bffe:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2c000:	4a1c      	ldr	r2, [pc, #112]	; (2c074 <system_gclk_gen_get_hz+0xcc>)
   2c002:	1dfb      	adds	r3, r7, #7
   2c004:	781b      	ldrb	r3, [r3, #0]
   2c006:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c008:	46c0      	nop			; (mov r8, r8)
   2c00a:	4b15      	ldr	r3, [pc, #84]	; (2c060 <system_gclk_gen_get_hz+0xb8>)
   2c00c:	4798      	blx	r3
   2c00e:	1e03      	subs	r3, r0, #0
   2c010:	d1fb      	bne.n	2c00a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2c012:	4b16      	ldr	r3, [pc, #88]	; (2c06c <system_gclk_gen_get_hz+0xc4>)
   2c014:	689b      	ldr	r3, [r3, #8]
   2c016:	021b      	lsls	r3, r3, #8
   2c018:	0c1b      	lsrs	r3, r3, #16
   2c01a:	b29b      	uxth	r3, r3
   2c01c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2c01e:	4b16      	ldr	r3, [pc, #88]	; (2c078 <system_gclk_gen_get_hz+0xd0>)
   2c020:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2c022:	2313      	movs	r3, #19
   2c024:	18fb      	adds	r3, r7, r3
   2c026:	781b      	ldrb	r3, [r3, #0]
   2c028:	2b00      	cmp	r3, #0
   2c02a:	d109      	bne.n	2c040 <system_gclk_gen_get_hz+0x98>
   2c02c:	68fb      	ldr	r3, [r7, #12]
   2c02e:	2b01      	cmp	r3, #1
   2c030:	d906      	bls.n	2c040 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2c032:	4b12      	ldr	r3, [pc, #72]	; (2c07c <system_gclk_gen_get_hz+0xd4>)
   2c034:	68f9      	ldr	r1, [r7, #12]
   2c036:	6978      	ldr	r0, [r7, #20]
   2c038:	4798      	blx	r3
   2c03a:	0003      	movs	r3, r0
   2c03c:	617b      	str	r3, [r7, #20]
   2c03e:	e00a      	b.n	2c056 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2c040:	2313      	movs	r3, #19
   2c042:	18fb      	adds	r3, r7, r3
   2c044:	781b      	ldrb	r3, [r3, #0]
   2c046:	2b00      	cmp	r3, #0
   2c048:	d005      	beq.n	2c056 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2c04a:	68fb      	ldr	r3, [r7, #12]
   2c04c:	3301      	adds	r3, #1
   2c04e:	697a      	ldr	r2, [r7, #20]
   2c050:	40da      	lsrs	r2, r3
   2c052:	0013      	movs	r3, r2
   2c054:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2c056:	697b      	ldr	r3, [r7, #20]
}
   2c058:	0018      	movs	r0, r3
   2c05a:	46bd      	mov	sp, r7
   2c05c:	b006      	add	sp, #24
   2c05e:	bd80      	pop	{r7, pc}
   2c060:	0002bdd9 	.word	0x0002bdd9
   2c064:	0002bdb1 	.word	0x0002bdb1
   2c068:	40000c04 	.word	0x40000c04
   2c06c:	40000c00 	.word	0x40000c00
   2c070:	0002b709 	.word	0x0002b709
   2c074:	40000c08 	.word	0x40000c08
   2c078:	0002bdc5 	.word	0x0002bdc5
   2c07c:	00034bf5 	.word	0x00034bf5

0002c080 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2c080:	b580      	push	{r7, lr}
   2c082:	b084      	sub	sp, #16
   2c084:	af00      	add	r7, sp, #0
   2c086:	0002      	movs	r2, r0
   2c088:	6039      	str	r1, [r7, #0]
   2c08a:	1dfb      	adds	r3, r7, #7
   2c08c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2c08e:	1dfb      	adds	r3, r7, #7
   2c090:	781b      	ldrb	r3, [r3, #0]
   2c092:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2c094:	683b      	ldr	r3, [r7, #0]
   2c096:	781b      	ldrb	r3, [r3, #0]
   2c098:	021b      	lsls	r3, r3, #8
   2c09a:	001a      	movs	r2, r3
   2c09c:	68fb      	ldr	r3, [r7, #12]
   2c09e:	4313      	orrs	r3, r2
   2c0a0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2c0a2:	1dfb      	adds	r3, r7, #7
   2c0a4:	781b      	ldrb	r3, [r3, #0]
   2c0a6:	0018      	movs	r0, r3
   2c0a8:	4b04      	ldr	r3, [pc, #16]	; (2c0bc <system_gclk_chan_set_config+0x3c>)
   2c0aa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2c0ac:	4b04      	ldr	r3, [pc, #16]	; (2c0c0 <system_gclk_chan_set_config+0x40>)
   2c0ae:	68fa      	ldr	r2, [r7, #12]
   2c0b0:	b292      	uxth	r2, r2
   2c0b2:	805a      	strh	r2, [r3, #2]
}
   2c0b4:	46c0      	nop			; (mov r8, r8)
   2c0b6:	46bd      	mov	sp, r7
   2c0b8:	b004      	add	sp, #16
   2c0ba:	bd80      	pop	{r7, pc}
   2c0bc:	0002c10d 	.word	0x0002c10d
   2c0c0:	40000c00 	.word	0x40000c00

0002c0c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2c0c4:	b580      	push	{r7, lr}
   2c0c6:	b082      	sub	sp, #8
   2c0c8:	af00      	add	r7, sp, #0
   2c0ca:	0002      	movs	r2, r0
   2c0cc:	1dfb      	adds	r3, r7, #7
   2c0ce:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c0d0:	4b0a      	ldr	r3, [pc, #40]	; (2c0fc <system_gclk_chan_enable+0x38>)
   2c0d2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c0d4:	4a0a      	ldr	r2, [pc, #40]	; (2c100 <system_gclk_chan_enable+0x3c>)
   2c0d6:	1dfb      	adds	r3, r7, #7
   2c0d8:	781b      	ldrb	r3, [r3, #0]
   2c0da:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2c0dc:	4909      	ldr	r1, [pc, #36]	; (2c104 <system_gclk_chan_enable+0x40>)
   2c0de:	4b09      	ldr	r3, [pc, #36]	; (2c104 <system_gclk_chan_enable+0x40>)
   2c0e0:	885b      	ldrh	r3, [r3, #2]
   2c0e2:	b29b      	uxth	r3, r3
   2c0e4:	2280      	movs	r2, #128	; 0x80
   2c0e6:	01d2      	lsls	r2, r2, #7
   2c0e8:	4313      	orrs	r3, r2
   2c0ea:	b29b      	uxth	r3, r3
   2c0ec:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2c0ee:	4b06      	ldr	r3, [pc, #24]	; (2c108 <system_gclk_chan_enable+0x44>)
   2c0f0:	4798      	blx	r3
}
   2c0f2:	46c0      	nop			; (mov r8, r8)
   2c0f4:	46bd      	mov	sp, r7
   2c0f6:	b002      	add	sp, #8
   2c0f8:	bd80      	pop	{r7, pc}
   2c0fa:	46c0      	nop			; (mov r8, r8)
   2c0fc:	0002bdb1 	.word	0x0002bdb1
   2c100:	40000c02 	.word	0x40000c02
   2c104:	40000c00 	.word	0x40000c00
   2c108:	0002bdc5 	.word	0x0002bdc5

0002c10c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2c10c:	b580      	push	{r7, lr}
   2c10e:	b084      	sub	sp, #16
   2c110:	af00      	add	r7, sp, #0
   2c112:	0002      	movs	r2, r0
   2c114:	1dfb      	adds	r3, r7, #7
   2c116:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c118:	4b1c      	ldr	r3, [pc, #112]	; (2c18c <system_gclk_chan_disable+0x80>)
   2c11a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c11c:	4a1c      	ldr	r2, [pc, #112]	; (2c190 <system_gclk_chan_disable+0x84>)
   2c11e:	1dfb      	adds	r3, r7, #7
   2c120:	781b      	ldrb	r3, [r3, #0]
   2c122:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2c124:	4b1b      	ldr	r3, [pc, #108]	; (2c194 <system_gclk_chan_disable+0x88>)
   2c126:	885b      	ldrh	r3, [r3, #2]
   2c128:	051b      	lsls	r3, r3, #20
   2c12a:	0f1b      	lsrs	r3, r3, #28
   2c12c:	b2db      	uxtb	r3, r3
   2c12e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2c130:	4a18      	ldr	r2, [pc, #96]	; (2c194 <system_gclk_chan_disable+0x88>)
   2c132:	8853      	ldrh	r3, [r2, #2]
   2c134:	4918      	ldr	r1, [pc, #96]	; (2c198 <system_gclk_chan_disable+0x8c>)
   2c136:	400b      	ands	r3, r1
   2c138:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2c13a:	4a16      	ldr	r2, [pc, #88]	; (2c194 <system_gclk_chan_disable+0x88>)
   2c13c:	4b15      	ldr	r3, [pc, #84]	; (2c194 <system_gclk_chan_disable+0x88>)
   2c13e:	885b      	ldrh	r3, [r3, #2]
   2c140:	b29b      	uxth	r3, r3
   2c142:	4916      	ldr	r1, [pc, #88]	; (2c19c <system_gclk_chan_disable+0x90>)
   2c144:	400b      	ands	r3, r1
   2c146:	b29b      	uxth	r3, r3
   2c148:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2c14a:	46c0      	nop			; (mov r8, r8)
   2c14c:	4b11      	ldr	r3, [pc, #68]	; (2c194 <system_gclk_chan_disable+0x88>)
   2c14e:	885b      	ldrh	r3, [r3, #2]
   2c150:	b29b      	uxth	r3, r3
   2c152:	001a      	movs	r2, r3
   2c154:	2380      	movs	r3, #128	; 0x80
   2c156:	01db      	lsls	r3, r3, #7
   2c158:	4013      	ands	r3, r2
   2c15a:	d1f7      	bne.n	2c14c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2c15c:	4a0d      	ldr	r2, [pc, #52]	; (2c194 <system_gclk_chan_disable+0x88>)
   2c15e:	68fb      	ldr	r3, [r7, #12]
   2c160:	b2db      	uxtb	r3, r3
   2c162:	1c19      	adds	r1, r3, #0
   2c164:	230f      	movs	r3, #15
   2c166:	400b      	ands	r3, r1
   2c168:	b2d9      	uxtb	r1, r3
   2c16a:	8853      	ldrh	r3, [r2, #2]
   2c16c:	1c08      	adds	r0, r1, #0
   2c16e:	210f      	movs	r1, #15
   2c170:	4001      	ands	r1, r0
   2c172:	0208      	lsls	r0, r1, #8
   2c174:	4908      	ldr	r1, [pc, #32]	; (2c198 <system_gclk_chan_disable+0x8c>)
   2c176:	400b      	ands	r3, r1
   2c178:	1c19      	adds	r1, r3, #0
   2c17a:	1c03      	adds	r3, r0, #0
   2c17c:	430b      	orrs	r3, r1
   2c17e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2c180:	4b07      	ldr	r3, [pc, #28]	; (2c1a0 <system_gclk_chan_disable+0x94>)
   2c182:	4798      	blx	r3
}
   2c184:	46c0      	nop			; (mov r8, r8)
   2c186:	46bd      	mov	sp, r7
   2c188:	b004      	add	sp, #16
   2c18a:	bd80      	pop	{r7, pc}
   2c18c:	0002bdb1 	.word	0x0002bdb1
   2c190:	40000c02 	.word	0x40000c02
   2c194:	40000c00 	.word	0x40000c00
   2c198:	fffff0ff 	.word	0xfffff0ff
   2c19c:	ffffbfff 	.word	0xffffbfff
   2c1a0:	0002bdc5 	.word	0x0002bdc5

0002c1a4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2c1a4:	b580      	push	{r7, lr}
   2c1a6:	b084      	sub	sp, #16
   2c1a8:	af00      	add	r7, sp, #0
   2c1aa:	0002      	movs	r2, r0
   2c1ac:	1dfb      	adds	r3, r7, #7
   2c1ae:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2c1b0:	4b0d      	ldr	r3, [pc, #52]	; (2c1e8 <system_gclk_chan_get_hz+0x44>)
   2c1b2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c1b4:	4a0d      	ldr	r2, [pc, #52]	; (2c1ec <system_gclk_chan_get_hz+0x48>)
   2c1b6:	1dfb      	adds	r3, r7, #7
   2c1b8:	781b      	ldrb	r3, [r3, #0]
   2c1ba:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2c1bc:	4b0c      	ldr	r3, [pc, #48]	; (2c1f0 <system_gclk_chan_get_hz+0x4c>)
   2c1be:	885b      	ldrh	r3, [r3, #2]
   2c1c0:	051b      	lsls	r3, r3, #20
   2c1c2:	0f1b      	lsrs	r3, r3, #28
   2c1c4:	b2da      	uxtb	r2, r3
   2c1c6:	230f      	movs	r3, #15
   2c1c8:	18fb      	adds	r3, r7, r3
   2c1ca:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2c1cc:	4b09      	ldr	r3, [pc, #36]	; (2c1f4 <system_gclk_chan_get_hz+0x50>)
   2c1ce:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2c1d0:	230f      	movs	r3, #15
   2c1d2:	18fb      	adds	r3, r7, r3
   2c1d4:	781b      	ldrb	r3, [r3, #0]
   2c1d6:	0018      	movs	r0, r3
   2c1d8:	4b07      	ldr	r3, [pc, #28]	; (2c1f8 <system_gclk_chan_get_hz+0x54>)
   2c1da:	4798      	blx	r3
   2c1dc:	0003      	movs	r3, r0
}
   2c1de:	0018      	movs	r0, r3
   2c1e0:	46bd      	mov	sp, r7
   2c1e2:	b004      	add	sp, #16
   2c1e4:	bd80      	pop	{r7, pc}
   2c1e6:	46c0      	nop			; (mov r8, r8)
   2c1e8:	0002bdb1 	.word	0x0002bdb1
   2c1ec:	40000c02 	.word	0x40000c02
   2c1f0:	40000c00 	.word	0x40000c00
   2c1f4:	0002bdc5 	.word	0x0002bdc5
   2c1f8:	0002bfa9 	.word	0x0002bfa9

0002c1fc <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2c1fc:	b580      	push	{r7, lr}
   2c1fe:	b084      	sub	sp, #16
   2c200:	af00      	add	r7, sp, #0
   2c202:	0002      	movs	r2, r0
   2c204:	1dfb      	adds	r3, r7, #7
   2c206:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2c208:	230f      	movs	r3, #15
   2c20a:	18fb      	adds	r3, r7, r3
   2c20c:	2200      	movs	r2, #0
   2c20e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2c210:	1dfb      	adds	r3, r7, #7
   2c212:	781b      	ldrb	r3, [r3, #0]
   2c214:	2b7f      	cmp	r3, #127	; 0x7f
   2c216:	d80b      	bhi.n	2c230 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2c218:	4a13      	ldr	r2, [pc, #76]	; (2c268 <system_interrupt_clear_pending+0x6c>)
   2c21a:	1dfb      	adds	r3, r7, #7
   2c21c:	781b      	ldrb	r3, [r3, #0]
   2c21e:	b25b      	sxtb	r3, r3
   2c220:	2101      	movs	r1, #1
   2c222:	4099      	lsls	r1, r3
   2c224:	000b      	movs	r3, r1
   2c226:	0019      	movs	r1, r3
   2c228:	23c0      	movs	r3, #192	; 0xc0
   2c22a:	005b      	lsls	r3, r3, #1
   2c22c:	50d1      	str	r1, [r2, r3]
   2c22e:	e014      	b.n	2c25a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2c230:	1dfb      	adds	r3, r7, #7
   2c232:	781b      	ldrb	r3, [r3, #0]
   2c234:	b25b      	sxtb	r3, r3
   2c236:	330e      	adds	r3, #14
   2c238:	d101      	bne.n	2c23e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2c23a:	2317      	movs	r3, #23
   2c23c:	e010      	b.n	2c260 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2c23e:	1dfb      	adds	r3, r7, #7
   2c240:	781b      	ldrb	r3, [r3, #0]
   2c242:	b25b      	sxtb	r3, r3
   2c244:	3301      	adds	r3, #1
   2c246:	d104      	bne.n	2c252 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2c248:	4b08      	ldr	r3, [pc, #32]	; (2c26c <system_interrupt_clear_pending+0x70>)
   2c24a:	2280      	movs	r2, #128	; 0x80
   2c24c:	0492      	lsls	r2, r2, #18
   2c24e:	605a      	str	r2, [r3, #4]
   2c250:	e003      	b.n	2c25a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2c252:	230f      	movs	r3, #15
   2c254:	18fb      	adds	r3, r7, r3
   2c256:	2217      	movs	r2, #23
   2c258:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2c25a:	230f      	movs	r3, #15
   2c25c:	18fb      	adds	r3, r7, r3
   2c25e:	781b      	ldrb	r3, [r3, #0]
}
   2c260:	0018      	movs	r0, r3
   2c262:	46bd      	mov	sp, r7
   2c264:	b004      	add	sp, #16
   2c266:	bd80      	pop	{r7, pc}
   2c268:	e000e100 	.word	0xe000e100
   2c26c:	e000ed00 	.word	0xe000ed00

0002c270 <system_pinmux_get_group_from_gpio_pin>:
{
   2c270:	b580      	push	{r7, lr}
   2c272:	b084      	sub	sp, #16
   2c274:	af00      	add	r7, sp, #0
   2c276:	0002      	movs	r2, r0
   2c278:	1dfb      	adds	r3, r7, #7
   2c27a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2c27c:	230f      	movs	r3, #15
   2c27e:	18fb      	adds	r3, r7, r3
   2c280:	1dfa      	adds	r2, r7, #7
   2c282:	7812      	ldrb	r2, [r2, #0]
   2c284:	09d2      	lsrs	r2, r2, #7
   2c286:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2c288:	230e      	movs	r3, #14
   2c28a:	18fb      	adds	r3, r7, r3
   2c28c:	1dfa      	adds	r2, r7, #7
   2c28e:	7812      	ldrb	r2, [r2, #0]
   2c290:	0952      	lsrs	r2, r2, #5
   2c292:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2c294:	4b0d      	ldr	r3, [pc, #52]	; (2c2cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2c296:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2c298:	230f      	movs	r3, #15
   2c29a:	18fb      	adds	r3, r7, r3
   2c29c:	781b      	ldrb	r3, [r3, #0]
   2c29e:	2b00      	cmp	r3, #0
   2c2a0:	d10f      	bne.n	2c2c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2c2a2:	230f      	movs	r3, #15
   2c2a4:	18fb      	adds	r3, r7, r3
   2c2a6:	781b      	ldrb	r3, [r3, #0]
   2c2a8:	009b      	lsls	r3, r3, #2
   2c2aa:	2210      	movs	r2, #16
   2c2ac:	4694      	mov	ip, r2
   2c2ae:	44bc      	add	ip, r7
   2c2b0:	4463      	add	r3, ip
   2c2b2:	3b08      	subs	r3, #8
   2c2b4:	681a      	ldr	r2, [r3, #0]
   2c2b6:	230e      	movs	r3, #14
   2c2b8:	18fb      	adds	r3, r7, r3
   2c2ba:	781b      	ldrb	r3, [r3, #0]
   2c2bc:	01db      	lsls	r3, r3, #7
   2c2be:	18d3      	adds	r3, r2, r3
   2c2c0:	e000      	b.n	2c2c4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2c2c2:	2300      	movs	r3, #0
}
   2c2c4:	0018      	movs	r0, r3
   2c2c6:	46bd      	mov	sp, r7
   2c2c8:	b004      	add	sp, #16
   2c2ca:	bd80      	pop	{r7, pc}
   2c2cc:	41004400 	.word	0x41004400

0002c2d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2c2d0:	b580      	push	{r7, lr}
   2c2d2:	b088      	sub	sp, #32
   2c2d4:	af00      	add	r7, sp, #0
   2c2d6:	60f8      	str	r0, [r7, #12]
   2c2d8:	60b9      	str	r1, [r7, #8]
   2c2da:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2c2dc:	2300      	movs	r3, #0
   2c2de:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2c2e0:	687b      	ldr	r3, [r7, #4]
   2c2e2:	78db      	ldrb	r3, [r3, #3]
   2c2e4:	2201      	movs	r2, #1
   2c2e6:	4053      	eors	r3, r2
   2c2e8:	b2db      	uxtb	r3, r3
   2c2ea:	2b00      	cmp	r3, #0
   2c2ec:	d035      	beq.n	2c35a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2c2ee:	687b      	ldr	r3, [r7, #4]
   2c2f0:	781b      	ldrb	r3, [r3, #0]
   2c2f2:	2b80      	cmp	r3, #128	; 0x80
   2c2f4:	d00b      	beq.n	2c30e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2c2f6:	69fb      	ldr	r3, [r7, #28]
   2c2f8:	2280      	movs	r2, #128	; 0x80
   2c2fa:	0252      	lsls	r2, r2, #9
   2c2fc:	4313      	orrs	r3, r2
   2c2fe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2c300:	687b      	ldr	r3, [r7, #4]
   2c302:	781b      	ldrb	r3, [r3, #0]
   2c304:	061b      	lsls	r3, r3, #24
   2c306:	001a      	movs	r2, r3
   2c308:	69fb      	ldr	r3, [r7, #28]
   2c30a:	4313      	orrs	r3, r2
   2c30c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2c30e:	687b      	ldr	r3, [r7, #4]
   2c310:	785b      	ldrb	r3, [r3, #1]
   2c312:	2b00      	cmp	r3, #0
   2c314:	d003      	beq.n	2c31e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c316:	687b      	ldr	r3, [r7, #4]
   2c318:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2c31a:	2b02      	cmp	r3, #2
   2c31c:	d110      	bne.n	2c340 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2c31e:	69fb      	ldr	r3, [r7, #28]
   2c320:	2280      	movs	r2, #128	; 0x80
   2c322:	0292      	lsls	r2, r2, #10
   2c324:	4313      	orrs	r3, r2
   2c326:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2c328:	687b      	ldr	r3, [r7, #4]
   2c32a:	789b      	ldrb	r3, [r3, #2]
   2c32c:	2b00      	cmp	r3, #0
   2c32e:	d004      	beq.n	2c33a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2c330:	69fb      	ldr	r3, [r7, #28]
   2c332:	2280      	movs	r2, #128	; 0x80
   2c334:	02d2      	lsls	r2, r2, #11
   2c336:	4313      	orrs	r3, r2
   2c338:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2c33a:	68fb      	ldr	r3, [r7, #12]
   2c33c:	68ba      	ldr	r2, [r7, #8]
   2c33e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c340:	687b      	ldr	r3, [r7, #4]
   2c342:	785b      	ldrb	r3, [r3, #1]
   2c344:	2b01      	cmp	r3, #1
   2c346:	d003      	beq.n	2c350 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c348:	687b      	ldr	r3, [r7, #4]
   2c34a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c34c:	2b02      	cmp	r3, #2
   2c34e:	d107      	bne.n	2c360 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2c350:	69fb      	ldr	r3, [r7, #28]
   2c352:	4a22      	ldr	r2, [pc, #136]	; (2c3dc <_system_pinmux_config+0x10c>)
   2c354:	4013      	ands	r3, r2
   2c356:	61fb      	str	r3, [r7, #28]
   2c358:	e002      	b.n	2c360 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2c35a:	68fb      	ldr	r3, [r7, #12]
   2c35c:	68ba      	ldr	r2, [r7, #8]
   2c35e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2c360:	68bb      	ldr	r3, [r7, #8]
   2c362:	041b      	lsls	r3, r3, #16
   2c364:	0c1b      	lsrs	r3, r3, #16
   2c366:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2c368:	68bb      	ldr	r3, [r7, #8]
   2c36a:	0c1b      	lsrs	r3, r3, #16
   2c36c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c36e:	69ba      	ldr	r2, [r7, #24]
   2c370:	69fb      	ldr	r3, [r7, #28]
   2c372:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2c374:	22a0      	movs	r2, #160	; 0xa0
   2c376:	05d2      	lsls	r2, r2, #23
   2c378:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c37a:	68fb      	ldr	r3, [r7, #12]
   2c37c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c37e:	697a      	ldr	r2, [r7, #20]
   2c380:	69fb      	ldr	r3, [r7, #28]
   2c382:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2c384:	22d0      	movs	r2, #208	; 0xd0
   2c386:	0612      	lsls	r2, r2, #24
   2c388:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c38a:	68fb      	ldr	r3, [r7, #12]
   2c38c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2c38e:	687b      	ldr	r3, [r7, #4]
   2c390:	78db      	ldrb	r3, [r3, #3]
   2c392:	2201      	movs	r2, #1
   2c394:	4053      	eors	r3, r2
   2c396:	b2db      	uxtb	r3, r3
   2c398:	2b00      	cmp	r3, #0
   2c39a:	d01a      	beq.n	2c3d2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2c39c:	69fa      	ldr	r2, [r7, #28]
   2c39e:	2380      	movs	r3, #128	; 0x80
   2c3a0:	02db      	lsls	r3, r3, #11
   2c3a2:	4013      	ands	r3, r2
   2c3a4:	d00a      	beq.n	2c3bc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2c3a6:	687b      	ldr	r3, [r7, #4]
   2c3a8:	789b      	ldrb	r3, [r3, #2]
   2c3aa:	2b01      	cmp	r3, #1
   2c3ac:	d103      	bne.n	2c3b6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2c3ae:	68fb      	ldr	r3, [r7, #12]
   2c3b0:	68ba      	ldr	r2, [r7, #8]
   2c3b2:	619a      	str	r2, [r3, #24]
   2c3b4:	e002      	b.n	2c3bc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2c3b6:	68fb      	ldr	r3, [r7, #12]
   2c3b8:	68ba      	ldr	r2, [r7, #8]
   2c3ba:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c3bc:	687b      	ldr	r3, [r7, #4]
   2c3be:	785b      	ldrb	r3, [r3, #1]
   2c3c0:	2b01      	cmp	r3, #1
   2c3c2:	d003      	beq.n	2c3cc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c3c4:	687b      	ldr	r3, [r7, #4]
   2c3c6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c3c8:	2b02      	cmp	r3, #2
   2c3ca:	d102      	bne.n	2c3d2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2c3cc:	68fb      	ldr	r3, [r7, #12]
   2c3ce:	68ba      	ldr	r2, [r7, #8]
   2c3d0:	609a      	str	r2, [r3, #8]
		}
	}
}
   2c3d2:	46c0      	nop			; (mov r8, r8)
   2c3d4:	46bd      	mov	sp, r7
   2c3d6:	b008      	add	sp, #32
   2c3d8:	bd80      	pop	{r7, pc}
   2c3da:	46c0      	nop			; (mov r8, r8)
   2c3dc:	fffbffff 	.word	0xfffbffff

0002c3e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2c3e0:	b580      	push	{r7, lr}
   2c3e2:	b084      	sub	sp, #16
   2c3e4:	af00      	add	r7, sp, #0
   2c3e6:	0002      	movs	r2, r0
   2c3e8:	6039      	str	r1, [r7, #0]
   2c3ea:	1dfb      	adds	r3, r7, #7
   2c3ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2c3ee:	1dfb      	adds	r3, r7, #7
   2c3f0:	781b      	ldrb	r3, [r3, #0]
   2c3f2:	0018      	movs	r0, r3
   2c3f4:	4b0a      	ldr	r3, [pc, #40]	; (2c420 <system_pinmux_pin_set_config+0x40>)
   2c3f6:	4798      	blx	r3
   2c3f8:	0003      	movs	r3, r0
   2c3fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2c3fc:	1dfb      	adds	r3, r7, #7
   2c3fe:	781b      	ldrb	r3, [r3, #0]
   2c400:	221f      	movs	r2, #31
   2c402:	4013      	ands	r3, r2
   2c404:	2201      	movs	r2, #1
   2c406:	409a      	lsls	r2, r3
   2c408:	0013      	movs	r3, r2
   2c40a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2c40c:	683a      	ldr	r2, [r7, #0]
   2c40e:	68b9      	ldr	r1, [r7, #8]
   2c410:	68fb      	ldr	r3, [r7, #12]
   2c412:	0018      	movs	r0, r3
   2c414:	4b03      	ldr	r3, [pc, #12]	; (2c424 <system_pinmux_pin_set_config+0x44>)
   2c416:	4798      	blx	r3
}
   2c418:	46c0      	nop			; (mov r8, r8)
   2c41a:	46bd      	mov	sp, r7
   2c41c:	b004      	add	sp, #16
   2c41e:	bd80      	pop	{r7, pc}
   2c420:	0002c271 	.word	0x0002c271
   2c424:	0002c2d1 	.word	0x0002c2d1

0002c428 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2c428:	b580      	push	{r7, lr}
   2c42a:	af00      	add	r7, sp, #0
	return;
   2c42c:	46c0      	nop			; (mov r8, r8)
}
   2c42e:	46bd      	mov	sp, r7
   2c430:	bd80      	pop	{r7, pc}
	...

0002c434 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2c434:	b580      	push	{r7, lr}
   2c436:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2c438:	4b06      	ldr	r3, [pc, #24]	; (2c454 <system_init+0x20>)
   2c43a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2c43c:	4b06      	ldr	r3, [pc, #24]	; (2c458 <system_init+0x24>)
   2c43e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2c440:	4b06      	ldr	r3, [pc, #24]	; (2c45c <system_init+0x28>)
   2c442:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2c444:	4b06      	ldr	r3, [pc, #24]	; (2c460 <system_init+0x2c>)
   2c446:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2c448:	4b06      	ldr	r3, [pc, #24]	; (2c464 <system_init+0x30>)
   2c44a:	4798      	blx	r3
}
   2c44c:	46c0      	nop			; (mov r8, r8)
   2c44e:	46bd      	mov	sp, r7
   2c450:	bd80      	pop	{r7, pc}
   2c452:	46c0      	nop			; (mov r8, r8)
   2c454:	0002bab5 	.word	0x0002bab5
   2c458:	00028521 	.word	0x00028521
   2c45c:	00012669 	.word	0x00012669
   2c460:	000288f9 	.word	0x000288f9
   2c464:	0002c429 	.word	0x0002c429

0002c468 <system_gclk_chan_get_config_defaults>:
{
   2c468:	b580      	push	{r7, lr}
   2c46a:	b082      	sub	sp, #8
   2c46c:	af00      	add	r7, sp, #0
   2c46e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2c470:	687b      	ldr	r3, [r7, #4]
   2c472:	2200      	movs	r2, #0
   2c474:	701a      	strb	r2, [r3, #0]
}
   2c476:	46c0      	nop			; (mov r8, r8)
   2c478:	46bd      	mov	sp, r7
   2c47a:	b002      	add	sp, #8
   2c47c:	bd80      	pop	{r7, pc}
	...

0002c480 <system_apb_clock_set_mask>:
{
   2c480:	b580      	push	{r7, lr}
   2c482:	b082      	sub	sp, #8
   2c484:	af00      	add	r7, sp, #0
   2c486:	0002      	movs	r2, r0
   2c488:	6039      	str	r1, [r7, #0]
   2c48a:	1dfb      	adds	r3, r7, #7
   2c48c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2c48e:	1dfb      	adds	r3, r7, #7
   2c490:	781b      	ldrb	r3, [r3, #0]
   2c492:	2b01      	cmp	r3, #1
   2c494:	d00a      	beq.n	2c4ac <system_apb_clock_set_mask+0x2c>
   2c496:	2b02      	cmp	r3, #2
   2c498:	d00f      	beq.n	2c4ba <system_apb_clock_set_mask+0x3a>
   2c49a:	2b00      	cmp	r3, #0
   2c49c:	d114      	bne.n	2c4c8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2c49e:	4b0e      	ldr	r3, [pc, #56]	; (2c4d8 <system_apb_clock_set_mask+0x58>)
   2c4a0:	4a0d      	ldr	r2, [pc, #52]	; (2c4d8 <system_apb_clock_set_mask+0x58>)
   2c4a2:	6991      	ldr	r1, [r2, #24]
   2c4a4:	683a      	ldr	r2, [r7, #0]
   2c4a6:	430a      	orrs	r2, r1
   2c4a8:	619a      	str	r2, [r3, #24]
			break;
   2c4aa:	e00f      	b.n	2c4cc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2c4ac:	4b0a      	ldr	r3, [pc, #40]	; (2c4d8 <system_apb_clock_set_mask+0x58>)
   2c4ae:	4a0a      	ldr	r2, [pc, #40]	; (2c4d8 <system_apb_clock_set_mask+0x58>)
   2c4b0:	69d1      	ldr	r1, [r2, #28]
   2c4b2:	683a      	ldr	r2, [r7, #0]
   2c4b4:	430a      	orrs	r2, r1
   2c4b6:	61da      	str	r2, [r3, #28]
			break;
   2c4b8:	e008      	b.n	2c4cc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2c4ba:	4b07      	ldr	r3, [pc, #28]	; (2c4d8 <system_apb_clock_set_mask+0x58>)
   2c4bc:	4a06      	ldr	r2, [pc, #24]	; (2c4d8 <system_apb_clock_set_mask+0x58>)
   2c4be:	6a11      	ldr	r1, [r2, #32]
   2c4c0:	683a      	ldr	r2, [r7, #0]
   2c4c2:	430a      	orrs	r2, r1
   2c4c4:	621a      	str	r2, [r3, #32]
			break;
   2c4c6:	e001      	b.n	2c4cc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2c4c8:	2317      	movs	r3, #23
   2c4ca:	e000      	b.n	2c4ce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2c4cc:	2300      	movs	r3, #0
}
   2c4ce:	0018      	movs	r0, r3
   2c4d0:	46bd      	mov	sp, r7
   2c4d2:	b002      	add	sp, #8
   2c4d4:	bd80      	pop	{r7, pc}
   2c4d6:	46c0      	nop			; (mov r8, r8)
   2c4d8:	40000400 	.word	0x40000400

0002c4dc <system_pinmux_get_config_defaults>:
{
   2c4dc:	b580      	push	{r7, lr}
   2c4de:	b082      	sub	sp, #8
   2c4e0:	af00      	add	r7, sp, #0
   2c4e2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2c4e4:	687b      	ldr	r3, [r7, #4]
   2c4e6:	2280      	movs	r2, #128	; 0x80
   2c4e8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2c4ea:	687b      	ldr	r3, [r7, #4]
   2c4ec:	2200      	movs	r2, #0
   2c4ee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2c4f0:	687b      	ldr	r3, [r7, #4]
   2c4f2:	2201      	movs	r2, #1
   2c4f4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2c4f6:	687b      	ldr	r3, [r7, #4]
   2c4f8:	2200      	movs	r2, #0
   2c4fa:	70da      	strb	r2, [r3, #3]
}
   2c4fc:	46c0      	nop			; (mov r8, r8)
   2c4fe:	46bd      	mov	sp, r7
   2c500:	b002      	add	sp, #8
   2c502:	bd80      	pop	{r7, pc}

0002c504 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2c504:	b580      	push	{r7, lr}
   2c506:	b084      	sub	sp, #16
   2c508:	af00      	add	r7, sp, #0
   2c50a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c50c:	2300      	movs	r3, #0
   2c50e:	60fb      	str	r3, [r7, #12]
   2c510:	e00c      	b.n	2c52c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2c512:	4b0a      	ldr	r3, [pc, #40]	; (2c53c <_tcc_get_inst_index+0x38>)
   2c514:	68fa      	ldr	r2, [r7, #12]
   2c516:	0092      	lsls	r2, r2, #2
   2c518:	58d2      	ldr	r2, [r2, r3]
   2c51a:	687b      	ldr	r3, [r7, #4]
   2c51c:	429a      	cmp	r2, r3
   2c51e:	d102      	bne.n	2c526 <_tcc_get_inst_index+0x22>
			return i;
   2c520:	68fb      	ldr	r3, [r7, #12]
   2c522:	b2db      	uxtb	r3, r3
   2c524:	e006      	b.n	2c534 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c526:	68fb      	ldr	r3, [r7, #12]
   2c528:	3301      	adds	r3, #1
   2c52a:	60fb      	str	r3, [r7, #12]
   2c52c:	68fb      	ldr	r3, [r7, #12]
   2c52e:	2b02      	cmp	r3, #2
   2c530:	d9ef      	bls.n	2c512 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2c532:	2300      	movs	r3, #0
}
   2c534:	0018      	movs	r0, r3
   2c536:	46bd      	mov	sp, r7
   2c538:	b004      	add	sp, #16
   2c53a:	bd80      	pop	{r7, pc}
   2c53c:	0003c614 	.word	0x0003c614

0002c540 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2c540:	b590      	push	{r4, r7, lr}
   2c542:	b085      	sub	sp, #20
   2c544:	af00      	add	r7, sp, #0
   2c546:	6078      	str	r0, [r7, #4]
   2c548:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2c54a:	230f      	movs	r3, #15
   2c54c:	18fc      	adds	r4, r7, r3
   2c54e:	683b      	ldr	r3, [r7, #0]
   2c550:	0018      	movs	r0, r3
   2c552:	4bad      	ldr	r3, [pc, #692]	; (2c808 <tcc_get_config_defaults+0x2c8>)
   2c554:	4798      	blx	r3
   2c556:	0003      	movs	r3, r0
   2c558:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2c55a:	687b      	ldr	r3, [r7, #4]
   2c55c:	2200      	movs	r2, #0
   2c55e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2c560:	230f      	movs	r3, #15
   2c562:	18fb      	adds	r3, r7, r3
   2c564:	781a      	ldrb	r2, [r3, #0]
   2c566:	4ba9      	ldr	r3, [pc, #676]	; (2c80c <tcc_get_config_defaults+0x2cc>)
   2c568:	0092      	lsls	r2, r2, #2
   2c56a:	58d2      	ldr	r2, [r2, r3]
   2c56c:	687b      	ldr	r3, [r7, #4]
   2c56e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2c570:	687b      	ldr	r3, [r7, #4]
   2c572:	2200      	movs	r2, #0
   2c574:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2c576:	687b      	ldr	r3, [r7, #4]
   2c578:	2200      	movs	r2, #0
   2c57a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2c57c:	687b      	ldr	r3, [r7, #4]
   2c57e:	2200      	movs	r2, #0
   2c580:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2c582:	687b      	ldr	r3, [r7, #4]
   2c584:	2200      	movs	r2, #0
   2c586:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2c588:	687b      	ldr	r3, [r7, #4]
   2c58a:	2200      	movs	r2, #0
   2c58c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c58e:	687b      	ldr	r3, [r7, #4]
   2c590:	2200      	movs	r2, #0
   2c592:	61da      	str	r2, [r3, #28]
   2c594:	687b      	ldr	r3, [r7, #4]
   2c596:	2200      	movs	r2, #0
   2c598:	621a      	str	r2, [r3, #32]
   2c59a:	687b      	ldr	r3, [r7, #4]
   2c59c:	2200      	movs	r2, #0
   2c59e:	625a      	str	r2, [r3, #36]	; 0x24
   2c5a0:	687b      	ldr	r3, [r7, #4]
   2c5a2:	2200      	movs	r2, #0
   2c5a4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c5a6:	687b      	ldr	r3, [r7, #4]
   2c5a8:	2200      	movs	r2, #0
   2c5aa:	751a      	strb	r2, [r3, #20]
   2c5ac:	687b      	ldr	r3, [r7, #4]
   2c5ae:	2200      	movs	r2, #0
   2c5b0:	755a      	strb	r2, [r3, #21]
   2c5b2:	687b      	ldr	r3, [r7, #4]
   2c5b4:	2200      	movs	r2, #0
   2c5b6:	759a      	strb	r2, [r3, #22]
   2c5b8:	687b      	ldr	r3, [r7, #4]
   2c5ba:	2200      	movs	r2, #0
   2c5bc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2c5be:	687b      	ldr	r3, [r7, #4]
   2c5c0:	2200      	movs	r2, #0
   2c5c2:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2c5c4:	687b      	ldr	r3, [r7, #4]
   2c5c6:	2200      	movs	r2, #0
   2c5c8:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c5ca:	687b      	ldr	r3, [r7, #4]
   2c5cc:	2200      	movs	r2, #0
   2c5ce:	741a      	strb	r2, [r3, #16]
   2c5d0:	687b      	ldr	r3, [r7, #4]
   2c5d2:	2200      	movs	r2, #0
   2c5d4:	745a      	strb	r2, [r3, #17]
   2c5d6:	687b      	ldr	r3, [r7, #4]
   2c5d8:	2200      	movs	r2, #0
   2c5da:	749a      	strb	r2, [r3, #18]
   2c5dc:	687b      	ldr	r3, [r7, #4]
   2c5de:	2200      	movs	r2, #0
   2c5e0:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2c5e2:	687b      	ldr	r3, [r7, #4]
   2c5e4:	222c      	movs	r2, #44	; 0x2c
   2c5e6:	2100      	movs	r1, #0
   2c5e8:	5499      	strb	r1, [r3, r2]
   2c5ea:	687b      	ldr	r3, [r7, #4]
   2c5ec:	222d      	movs	r2, #45	; 0x2d
   2c5ee:	2100      	movs	r1, #0
   2c5f0:	5499      	strb	r1, [r3, r2]
   2c5f2:	687b      	ldr	r3, [r7, #4]
   2c5f4:	222e      	movs	r2, #46	; 0x2e
   2c5f6:	2100      	movs	r1, #0
   2c5f8:	5499      	strb	r1, [r3, r2]
   2c5fa:	687b      	ldr	r3, [r7, #4]
   2c5fc:	222f      	movs	r2, #47	; 0x2f
   2c5fe:	2100      	movs	r1, #0
   2c600:	5499      	strb	r1, [r3, r2]
   2c602:	687b      	ldr	r3, [r7, #4]
   2c604:	2230      	movs	r2, #48	; 0x30
   2c606:	2100      	movs	r1, #0
   2c608:	5499      	strb	r1, [r3, r2]
   2c60a:	687b      	ldr	r3, [r7, #4]
   2c60c:	2231      	movs	r2, #49	; 0x31
   2c60e:	2100      	movs	r1, #0
   2c610:	5499      	strb	r1, [r3, r2]
   2c612:	687b      	ldr	r3, [r7, #4]
   2c614:	2232      	movs	r2, #50	; 0x32
   2c616:	2100      	movs	r1, #0
   2c618:	5499      	strb	r1, [r3, r2]
   2c61a:	687b      	ldr	r3, [r7, #4]
   2c61c:	2233      	movs	r2, #51	; 0x33
   2c61e:	2100      	movs	r1, #0
   2c620:	5499      	strb	r1, [r3, r2]
   2c622:	687b      	ldr	r3, [r7, #4]
   2c624:	2234      	movs	r2, #52	; 0x34
   2c626:	2100      	movs	r1, #0
   2c628:	5499      	strb	r1, [r3, r2]
   2c62a:	687b      	ldr	r3, [r7, #4]
   2c62c:	2235      	movs	r2, #53	; 0x35
   2c62e:	2100      	movs	r1, #0
   2c630:	5499      	strb	r1, [r3, r2]
   2c632:	687b      	ldr	r3, [r7, #4]
   2c634:	2236      	movs	r2, #54	; 0x36
   2c636:	2100      	movs	r1, #0
   2c638:	5499      	strb	r1, [r3, r2]
   2c63a:	687b      	ldr	r3, [r7, #4]
   2c63c:	2237      	movs	r2, #55	; 0x37
   2c63e:	2100      	movs	r1, #0
   2c640:	5499      	strb	r1, [r3, r2]
   2c642:	687b      	ldr	r3, [r7, #4]
   2c644:	2238      	movs	r2, #56	; 0x38
   2c646:	2100      	movs	r1, #0
   2c648:	5499      	strb	r1, [r3, r2]
   2c64a:	687b      	ldr	r3, [r7, #4]
   2c64c:	2239      	movs	r2, #57	; 0x39
   2c64e:	2100      	movs	r1, #0
   2c650:	5499      	strb	r1, [r3, r2]
   2c652:	687b      	ldr	r3, [r7, #4]
   2c654:	223a      	movs	r2, #58	; 0x3a
   2c656:	2100      	movs	r1, #0
   2c658:	5499      	strb	r1, [r3, r2]
   2c65a:	687b      	ldr	r3, [r7, #4]
   2c65c:	223b      	movs	r2, #59	; 0x3b
   2c65e:	2100      	movs	r1, #0
   2c660:	5499      	strb	r1, [r3, r2]
   2c662:	687b      	ldr	r3, [r7, #4]
   2c664:	223c      	movs	r2, #60	; 0x3c
   2c666:	2100      	movs	r1, #0
   2c668:	5499      	strb	r1, [r3, r2]
   2c66a:	687b      	ldr	r3, [r7, #4]
   2c66c:	223d      	movs	r2, #61	; 0x3d
   2c66e:	2100      	movs	r1, #0
   2c670:	5499      	strb	r1, [r3, r2]
   2c672:	687b      	ldr	r3, [r7, #4]
   2c674:	223e      	movs	r2, #62	; 0x3e
   2c676:	2100      	movs	r1, #0
   2c678:	5499      	strb	r1, [r3, r2]
   2c67a:	687b      	ldr	r3, [r7, #4]
   2c67c:	223f      	movs	r2, #63	; 0x3f
   2c67e:	2100      	movs	r1, #0
   2c680:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2c682:	687b      	ldr	r3, [r7, #4]
   2c684:	2240      	movs	r2, #64	; 0x40
   2c686:	2100      	movs	r1, #0
   2c688:	5499      	strb	r1, [r3, r2]
   2c68a:	687b      	ldr	r3, [r7, #4]
   2c68c:	2241      	movs	r2, #65	; 0x41
   2c68e:	2100      	movs	r1, #0
   2c690:	5499      	strb	r1, [r3, r2]
   2c692:	687b      	ldr	r3, [r7, #4]
   2c694:	2242      	movs	r2, #66	; 0x42
   2c696:	2100      	movs	r1, #0
   2c698:	5499      	strb	r1, [r3, r2]
   2c69a:	687b      	ldr	r3, [r7, #4]
   2c69c:	2243      	movs	r2, #67	; 0x43
   2c69e:	2100      	movs	r1, #0
   2c6a0:	5499      	strb	r1, [r3, r2]
   2c6a2:	687b      	ldr	r3, [r7, #4]
   2c6a4:	2244      	movs	r2, #68	; 0x44
   2c6a6:	2100      	movs	r1, #0
   2c6a8:	5499      	strb	r1, [r3, r2]
   2c6aa:	687b      	ldr	r3, [r7, #4]
   2c6ac:	2245      	movs	r2, #69	; 0x45
   2c6ae:	2100      	movs	r1, #0
   2c6b0:	5499      	strb	r1, [r3, r2]
   2c6b2:	687b      	ldr	r3, [r7, #4]
   2c6b4:	2246      	movs	r2, #70	; 0x46
   2c6b6:	2100      	movs	r1, #0
   2c6b8:	5499      	strb	r1, [r3, r2]
   2c6ba:	687b      	ldr	r3, [r7, #4]
   2c6bc:	2247      	movs	r2, #71	; 0x47
   2c6be:	2100      	movs	r1, #0
   2c6c0:	5499      	strb	r1, [r3, r2]
   2c6c2:	687b      	ldr	r3, [r7, #4]
   2c6c4:	2248      	movs	r2, #72	; 0x48
   2c6c6:	2100      	movs	r1, #0
   2c6c8:	5499      	strb	r1, [r3, r2]
   2c6ca:	687b      	ldr	r3, [r7, #4]
   2c6cc:	2249      	movs	r2, #73	; 0x49
   2c6ce:	2100      	movs	r1, #0
   2c6d0:	5499      	strb	r1, [r3, r2]
   2c6d2:	687b      	ldr	r3, [r7, #4]
   2c6d4:	224a      	movs	r2, #74	; 0x4a
   2c6d6:	2100      	movs	r1, #0
   2c6d8:	5499      	strb	r1, [r3, r2]
   2c6da:	687b      	ldr	r3, [r7, #4]
   2c6dc:	224b      	movs	r2, #75	; 0x4b
   2c6de:	2100      	movs	r1, #0
   2c6e0:	5499      	strb	r1, [r3, r2]
   2c6e2:	687b      	ldr	r3, [r7, #4]
   2c6e4:	224c      	movs	r2, #76	; 0x4c
   2c6e6:	2100      	movs	r1, #0
   2c6e8:	5499      	strb	r1, [r3, r2]
   2c6ea:	687b      	ldr	r3, [r7, #4]
   2c6ec:	224d      	movs	r2, #77	; 0x4d
   2c6ee:	2100      	movs	r1, #0
   2c6f0:	5499      	strb	r1, [r3, r2]
   2c6f2:	687b      	ldr	r3, [r7, #4]
   2c6f4:	224e      	movs	r2, #78	; 0x4e
   2c6f6:	2100      	movs	r1, #0
   2c6f8:	5499      	strb	r1, [r3, r2]
   2c6fa:	687b      	ldr	r3, [r7, #4]
   2c6fc:	224f      	movs	r2, #79	; 0x4f
   2c6fe:	2100      	movs	r1, #0
   2c700:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2c702:	687b      	ldr	r3, [r7, #4]
   2c704:	2250      	movs	r2, #80	; 0x50
   2c706:	2100      	movs	r1, #0
   2c708:	5499      	strb	r1, [r3, r2]
   2c70a:	687b      	ldr	r3, [r7, #4]
   2c70c:	2251      	movs	r2, #81	; 0x51
   2c70e:	2100      	movs	r1, #0
   2c710:	5499      	strb	r1, [r3, r2]
   2c712:	687b      	ldr	r3, [r7, #4]
   2c714:	2252      	movs	r2, #82	; 0x52
   2c716:	2100      	movs	r1, #0
   2c718:	5499      	strb	r1, [r3, r2]
   2c71a:	687b      	ldr	r3, [r7, #4]
   2c71c:	2253      	movs	r2, #83	; 0x53
   2c71e:	2100      	movs	r1, #0
   2c720:	5499      	strb	r1, [r3, r2]
   2c722:	687b      	ldr	r3, [r7, #4]
   2c724:	2254      	movs	r2, #84	; 0x54
   2c726:	2100      	movs	r1, #0
   2c728:	5499      	strb	r1, [r3, r2]
   2c72a:	687b      	ldr	r3, [r7, #4]
   2c72c:	2255      	movs	r2, #85	; 0x55
   2c72e:	2100      	movs	r1, #0
   2c730:	5499      	strb	r1, [r3, r2]
   2c732:	687b      	ldr	r3, [r7, #4]
   2c734:	2256      	movs	r2, #86	; 0x56
   2c736:	2100      	movs	r1, #0
   2c738:	5499      	strb	r1, [r3, r2]
   2c73a:	687b      	ldr	r3, [r7, #4]
   2c73c:	2257      	movs	r2, #87	; 0x57
   2c73e:	2100      	movs	r1, #0
   2c740:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2c742:	687b      	ldr	r3, [r7, #4]
   2c744:	2298      	movs	r2, #152	; 0x98
   2c746:	2100      	movs	r1, #0
   2c748:	5499      	strb	r1, [r3, r2]
   2c74a:	687b      	ldr	r3, [r7, #4]
   2c74c:	2200      	movs	r2, #0
   2c74e:	659a      	str	r2, [r3, #88]	; 0x58
   2c750:	687b      	ldr	r3, [r7, #4]
   2c752:	2200      	movs	r2, #0
   2c754:	679a      	str	r2, [r3, #120]	; 0x78
   2c756:	687b      	ldr	r3, [r7, #4]
   2c758:	2299      	movs	r2, #153	; 0x99
   2c75a:	2100      	movs	r1, #0
   2c75c:	5499      	strb	r1, [r3, r2]
   2c75e:	687b      	ldr	r3, [r7, #4]
   2c760:	2200      	movs	r2, #0
   2c762:	65da      	str	r2, [r3, #92]	; 0x5c
   2c764:	687b      	ldr	r3, [r7, #4]
   2c766:	2200      	movs	r2, #0
   2c768:	67da      	str	r2, [r3, #124]	; 0x7c
   2c76a:	687b      	ldr	r3, [r7, #4]
   2c76c:	229a      	movs	r2, #154	; 0x9a
   2c76e:	2100      	movs	r1, #0
   2c770:	5499      	strb	r1, [r3, r2]
   2c772:	687b      	ldr	r3, [r7, #4]
   2c774:	2200      	movs	r2, #0
   2c776:	661a      	str	r2, [r3, #96]	; 0x60
   2c778:	687b      	ldr	r3, [r7, #4]
   2c77a:	2280      	movs	r2, #128	; 0x80
   2c77c:	2100      	movs	r1, #0
   2c77e:	5099      	str	r1, [r3, r2]
   2c780:	687b      	ldr	r3, [r7, #4]
   2c782:	229b      	movs	r2, #155	; 0x9b
   2c784:	2100      	movs	r1, #0
   2c786:	5499      	strb	r1, [r3, r2]
   2c788:	687b      	ldr	r3, [r7, #4]
   2c78a:	2200      	movs	r2, #0
   2c78c:	665a      	str	r2, [r3, #100]	; 0x64
   2c78e:	687b      	ldr	r3, [r7, #4]
   2c790:	2284      	movs	r2, #132	; 0x84
   2c792:	2100      	movs	r1, #0
   2c794:	5099      	str	r1, [r3, r2]
   2c796:	687b      	ldr	r3, [r7, #4]
   2c798:	229c      	movs	r2, #156	; 0x9c
   2c79a:	2100      	movs	r1, #0
   2c79c:	5499      	strb	r1, [r3, r2]
   2c79e:	687b      	ldr	r3, [r7, #4]
   2c7a0:	2200      	movs	r2, #0
   2c7a2:	669a      	str	r2, [r3, #104]	; 0x68
   2c7a4:	687b      	ldr	r3, [r7, #4]
   2c7a6:	2288      	movs	r2, #136	; 0x88
   2c7a8:	2100      	movs	r1, #0
   2c7aa:	5099      	str	r1, [r3, r2]
   2c7ac:	687b      	ldr	r3, [r7, #4]
   2c7ae:	229d      	movs	r2, #157	; 0x9d
   2c7b0:	2100      	movs	r1, #0
   2c7b2:	5499      	strb	r1, [r3, r2]
   2c7b4:	687b      	ldr	r3, [r7, #4]
   2c7b6:	2200      	movs	r2, #0
   2c7b8:	66da      	str	r2, [r3, #108]	; 0x6c
   2c7ba:	687b      	ldr	r3, [r7, #4]
   2c7bc:	228c      	movs	r2, #140	; 0x8c
   2c7be:	2100      	movs	r1, #0
   2c7c0:	5099      	str	r1, [r3, r2]
   2c7c2:	687b      	ldr	r3, [r7, #4]
   2c7c4:	229e      	movs	r2, #158	; 0x9e
   2c7c6:	2100      	movs	r1, #0
   2c7c8:	5499      	strb	r1, [r3, r2]
   2c7ca:	687b      	ldr	r3, [r7, #4]
   2c7cc:	2200      	movs	r2, #0
   2c7ce:	671a      	str	r2, [r3, #112]	; 0x70
   2c7d0:	687b      	ldr	r3, [r7, #4]
   2c7d2:	2290      	movs	r2, #144	; 0x90
   2c7d4:	2100      	movs	r1, #0
   2c7d6:	5099      	str	r1, [r3, r2]
   2c7d8:	687b      	ldr	r3, [r7, #4]
   2c7da:	229f      	movs	r2, #159	; 0x9f
   2c7dc:	2100      	movs	r1, #0
   2c7de:	5499      	strb	r1, [r3, r2]
   2c7e0:	687b      	ldr	r3, [r7, #4]
   2c7e2:	2200      	movs	r2, #0
   2c7e4:	675a      	str	r2, [r3, #116]	; 0x74
   2c7e6:	687b      	ldr	r3, [r7, #4]
   2c7e8:	2294      	movs	r2, #148	; 0x94
   2c7ea:	2100      	movs	r1, #0
   2c7ec:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2c7ee:	687b      	ldr	r3, [r7, #4]
   2c7f0:	22a0      	movs	r2, #160	; 0xa0
   2c7f2:	2101      	movs	r1, #1
   2c7f4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2c7f6:	687b      	ldr	r3, [r7, #4]
   2c7f8:	22a1      	movs	r2, #161	; 0xa1
   2c7fa:	2100      	movs	r1, #0
   2c7fc:	5499      	strb	r1, [r3, r2]
}
   2c7fe:	46c0      	nop			; (mov r8, r8)
   2c800:	46bd      	mov	sp, r7
   2c802:	b005      	add	sp, #20
   2c804:	bd90      	pop	{r4, r7, pc}
   2c806:	46c0      	nop			; (mov r8, r8)
   2c808:	0002c505 	.word	0x0002c505
   2c80c:	0003c630 	.word	0x0003c630

0002c810 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2c810:	b580      	push	{r7, lr}
   2c812:	b086      	sub	sp, #24
   2c814:	af00      	add	r7, sp, #0
   2c816:	60b9      	str	r1, [r7, #8]
   2c818:	607a      	str	r2, [r7, #4]
   2c81a:	230f      	movs	r3, #15
   2c81c:	18fb      	adds	r3, r7, r3
   2c81e:	1c02      	adds	r2, r0, #0
   2c820:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2c822:	2300      	movs	r3, #0
   2c824:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2c826:	2300      	movs	r3, #0
   2c828:	613b      	str	r3, [r7, #16]
   2c82a:	e01d      	b.n	2c868 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2c82c:	68ba      	ldr	r2, [r7, #8]
   2c82e:	693b      	ldr	r3, [r7, #16]
   2c830:	18d3      	adds	r3, r2, r3
   2c832:	3310      	adds	r3, #16
   2c834:	781b      	ldrb	r3, [r3, #0]
   2c836:	2b01      	cmp	r3, #1
   2c838:	d113      	bne.n	2c862 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2c83a:	230f      	movs	r3, #15
   2c83c:	18fb      	adds	r3, r7, r3
   2c83e:	781b      	ldrb	r3, [r3, #0]
   2c840:	4a1b      	ldr	r2, [pc, #108]	; (2c8b0 <_tcc_build_ctrla+0xa0>)
   2c842:	5cd3      	ldrb	r3, [r2, r3]
   2c844:	001a      	movs	r2, r3
   2c846:	693b      	ldr	r3, [r7, #16]
   2c848:	429a      	cmp	r2, r3
   2c84a:	da01      	bge.n	2c850 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2c84c:	2317      	movs	r3, #23
   2c84e:	e02a      	b.n	2c8a6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2c850:	2380      	movs	r3, #128	; 0x80
   2c852:	045a      	lsls	r2, r3, #17
   2c854:	693b      	ldr	r3, [r7, #16]
   2c856:	409a      	lsls	r2, r3
   2c858:	0013      	movs	r3, r2
   2c85a:	001a      	movs	r2, r3
   2c85c:	697b      	ldr	r3, [r7, #20]
   2c85e:	4313      	orrs	r3, r2
   2c860:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2c862:	693b      	ldr	r3, [r7, #16]
   2c864:	3301      	adds	r3, #1
   2c866:	613b      	str	r3, [r7, #16]
   2c868:	693b      	ldr	r3, [r7, #16]
   2c86a:	2b03      	cmp	r3, #3
   2c86c:	ddde      	ble.n	2c82c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2c86e:	68bb      	ldr	r3, [r7, #8]
   2c870:	22a1      	movs	r2, #161	; 0xa1
   2c872:	5c9b      	ldrb	r3, [r3, r2]
   2c874:	2b00      	cmp	r3, #0
   2c876:	d004      	beq.n	2c882 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2c878:	697b      	ldr	r3, [r7, #20]
   2c87a:	2280      	movs	r2, #128	; 0x80
   2c87c:	0112      	lsls	r2, r2, #4
   2c87e:	4313      	orrs	r3, r2
   2c880:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2c882:	68bb      	ldr	r3, [r7, #8]
   2c884:	7b1b      	ldrb	r3, [r3, #12]
   2c886:	031b      	lsls	r3, r3, #12
   2c888:	001a      	movs	r2, r3
   2c88a:	697b      	ldr	r3, [r7, #20]
   2c88c:	4313      	orrs	r3, r2
   2c88e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2c890:	68bb      	ldr	r3, [r7, #8]
   2c892:	7adb      	ldrb	r3, [r3, #11]
   2c894:	021b      	lsls	r3, r3, #8
   2c896:	001a      	movs	r2, r3
   2c898:	697b      	ldr	r3, [r7, #20]
   2c89a:	4313      	orrs	r3, r2
   2c89c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2c89e:	687b      	ldr	r3, [r7, #4]
   2c8a0:	697a      	ldr	r2, [r7, #20]
   2c8a2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2c8a4:	2300      	movs	r3, #0
}
   2c8a6:	0018      	movs	r0, r3
   2c8a8:	46bd      	mov	sp, r7
   2c8aa:	b006      	add	sp, #24
   2c8ac:	bd80      	pop	{r7, pc}
   2c8ae:	46c0      	nop			; (mov r8, r8)
   2c8b0:	0003c63c 	.word	0x0003c63c

0002c8b4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2c8b4:	b580      	push	{r7, lr}
   2c8b6:	b086      	sub	sp, #24
   2c8b8:	af00      	add	r7, sp, #0
   2c8ba:	60b9      	str	r1, [r7, #8]
   2c8bc:	607a      	str	r2, [r7, #4]
   2c8be:	230f      	movs	r3, #15
   2c8c0:	18fb      	adds	r3, r7, r3
   2c8c2:	1c02      	adds	r2, r0, #0
   2c8c4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2c8c6:	2317      	movs	r3, #23
   2c8c8:	18fb      	adds	r3, r7, r3
   2c8ca:	2200      	movs	r2, #0
   2c8cc:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2c8ce:	68bb      	ldr	r3, [r7, #8]
   2c8d0:	7a1b      	ldrb	r3, [r3, #8]
   2c8d2:	2b00      	cmp	r3, #0
   2c8d4:	d007      	beq.n	2c8e6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2c8d6:	2317      	movs	r3, #23
   2c8d8:	18fb      	adds	r3, r7, r3
   2c8da:	2217      	movs	r2, #23
   2c8dc:	18ba      	adds	r2, r7, r2
   2c8de:	7812      	ldrb	r2, [r2, #0]
   2c8e0:	2104      	movs	r1, #4
   2c8e2:	430a      	orrs	r2, r1
   2c8e4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2c8e6:	68bb      	ldr	r3, [r7, #8]
   2c8e8:	7a5b      	ldrb	r3, [r3, #9]
   2c8ea:	2b01      	cmp	r3, #1
   2c8ec:	d107      	bne.n	2c8fe <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2c8ee:	2317      	movs	r3, #23
   2c8f0:	18fb      	adds	r3, r7, r3
   2c8f2:	2217      	movs	r2, #23
   2c8f4:	18ba      	adds	r2, r7, r2
   2c8f6:	7812      	ldrb	r2, [r2, #0]
   2c8f8:	2101      	movs	r1, #1
   2c8fa:	430a      	orrs	r2, r1
   2c8fc:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2c8fe:	687b      	ldr	r3, [r7, #4]
   2c900:	2217      	movs	r2, #23
   2c902:	18ba      	adds	r2, r7, r2
   2c904:	7812      	ldrb	r2, [r2, #0]
   2c906:	701a      	strb	r2, [r3, #0]
}
   2c908:	46c0      	nop			; (mov r8, r8)
   2c90a:	46bd      	mov	sp, r7
   2c90c:	b006      	add	sp, #24
   2c90e:	bd80      	pop	{r7, pc}

0002c910 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2c910:	b580      	push	{r7, lr}
   2c912:	b088      	sub	sp, #32
   2c914:	af00      	add	r7, sp, #0
   2c916:	60b9      	str	r1, [r7, #8]
   2c918:	607a      	str	r2, [r7, #4]
   2c91a:	230f      	movs	r3, #15
   2c91c:	18fb      	adds	r3, r7, r3
   2c91e:	1c02      	adds	r2, r0, #0
   2c920:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2c922:	230f      	movs	r3, #15
   2c924:	18fb      	adds	r3, r7, r3
   2c926:	781a      	ldrb	r2, [r3, #0]
   2c928:	231b      	movs	r3, #27
   2c92a:	18fb      	adds	r3, r7, r3
   2c92c:	493e      	ldr	r1, [pc, #248]	; (2ca28 <_tcc_build_faults+0x118>)
   2c92e:	5c8a      	ldrb	r2, [r1, r2]
   2c930:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2c932:	2300      	movs	r3, #0
   2c934:	61fb      	str	r3, [r7, #28]
   2c936:	e06e      	b.n	2ca16 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2c938:	69fa      	ldr	r2, [r7, #28]
   2c93a:	0013      	movs	r3, r2
   2c93c:	009b      	lsls	r3, r3, #2
   2c93e:	189b      	adds	r3, r3, r2
   2c940:	005b      	lsls	r3, r3, #1
   2c942:	3328      	adds	r3, #40	; 0x28
   2c944:	68ba      	ldr	r2, [r7, #8]
   2c946:	18d3      	adds	r3, r2, r3
   2c948:	3304      	adds	r3, #4
   2c94a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2c94c:	697b      	ldr	r3, [r7, #20]
   2c94e:	7a5b      	ldrb	r3, [r3, #9]
   2c950:	221b      	movs	r2, #27
   2c952:	18ba      	adds	r2, r7, r2
   2c954:	7812      	ldrb	r2, [r2, #0]
   2c956:	429a      	cmp	r2, r3
   2c958:	d801      	bhi.n	2c95e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2c95a:	2317      	movs	r3, #23
   2c95c:	e05f      	b.n	2ca1e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2c95e:	697b      	ldr	r3, [r7, #20]
   2c960:	781b      	ldrb	r3, [r3, #0]
   2c962:	2b0f      	cmp	r3, #15
   2c964:	d901      	bls.n	2c96a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2c966:	2317      	movs	r3, #23
   2c968:	e059      	b.n	2ca1e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2c96a:	697b      	ldr	r3, [r7, #20]
   2c96c:	781b      	ldrb	r3, [r3, #0]
   2c96e:	061b      	lsls	r3, r3, #24
   2c970:	001a      	movs	r2, r3
   2c972:	23f0      	movs	r3, #240	; 0xf0
   2c974:	051b      	lsls	r3, r3, #20
   2c976:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2c978:	697b      	ldr	r3, [r7, #20]
   2c97a:	785b      	ldrb	r3, [r3, #1]
   2c97c:	041b      	lsls	r3, r3, #16
   2c97e:	0019      	movs	r1, r3
   2c980:	23ff      	movs	r3, #255	; 0xff
   2c982:	041b      	lsls	r3, r3, #16
   2c984:	400b      	ands	r3, r1
   2c986:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2c988:	697b      	ldr	r3, [r7, #20]
   2c98a:	789b      	ldrb	r3, [r3, #2]
   2c98c:	2b00      	cmp	r3, #0
   2c98e:	d001      	beq.n	2c994 <_tcc_build_faults+0x84>
   2c990:	2380      	movs	r3, #128	; 0x80
   2c992:	e000      	b.n	2c996 <_tcc_build_faults+0x86>
   2c994:	2300      	movs	r3, #0
   2c996:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2c998:	697b      	ldr	r3, [r7, #20]
   2c99a:	78db      	ldrb	r3, [r3, #3]
   2c99c:	2b00      	cmp	r3, #0
   2c99e:	d001      	beq.n	2c9a4 <_tcc_build_faults+0x94>
   2c9a0:	2308      	movs	r3, #8
   2c9a2:	e000      	b.n	2c9a6 <_tcc_build_faults+0x96>
   2c9a4:	2300      	movs	r3, #0
   2c9a6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2c9a8:	697b      	ldr	r3, [r7, #20]
   2c9aa:	791b      	ldrb	r3, [r3, #4]
   2c9ac:	2b00      	cmp	r3, #0
   2c9ae:	d001      	beq.n	2c9b4 <_tcc_build_faults+0xa4>
   2c9b0:	2310      	movs	r3, #16
   2c9b2:	e000      	b.n	2c9b6 <_tcc_build_faults+0xa6>
   2c9b4:	2300      	movs	r3, #0
   2c9b6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2c9b8:	697b      	ldr	r3, [r7, #20]
   2c9ba:	795b      	ldrb	r3, [r3, #5]
   2c9bc:	0019      	movs	r1, r3
   2c9be:	2303      	movs	r3, #3
   2c9c0:	400b      	ands	r3, r1
   2c9c2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2c9c4:	697b      	ldr	r3, [r7, #20]
   2c9c6:	799b      	ldrb	r3, [r3, #6]
   2c9c8:	015b      	lsls	r3, r3, #5
   2c9ca:	0019      	movs	r1, r3
   2c9cc:	2360      	movs	r3, #96	; 0x60
   2c9ce:	400b      	ands	r3, r1
   2c9d0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2c9d2:	697b      	ldr	r3, [r7, #20]
   2c9d4:	79db      	ldrb	r3, [r3, #7]
   2c9d6:	021b      	lsls	r3, r3, #8
   2c9d8:	0019      	movs	r1, r3
   2c9da:	23c0      	movs	r3, #192	; 0xc0
   2c9dc:	009b      	lsls	r3, r3, #2
   2c9de:	400b      	ands	r3, r1
   2c9e0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2c9e2:	697b      	ldr	r3, [r7, #20]
   2c9e4:	7a1b      	ldrb	r3, [r3, #8]
   2c9e6:	031b      	lsls	r3, r3, #12
   2c9e8:	0019      	movs	r1, r3
   2c9ea:	23e0      	movs	r3, #224	; 0xe0
   2c9ec:	01db      	lsls	r3, r3, #7
   2c9ee:	400b      	ands	r3, r1
   2c9f0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2c9f2:	697b      	ldr	r3, [r7, #20]
   2c9f4:	7a5b      	ldrb	r3, [r3, #9]
   2c9f6:	029b      	lsls	r3, r3, #10
   2c9f8:	0019      	movs	r1, r3
   2c9fa:	23c0      	movs	r3, #192	; 0xc0
   2c9fc:	011b      	lsls	r3, r3, #4
   2c9fe:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2ca00:	4313      	orrs	r3, r2
   2ca02:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2ca04:	69fb      	ldr	r3, [r7, #28]
   2ca06:	009b      	lsls	r3, r3, #2
   2ca08:	687a      	ldr	r2, [r7, #4]
   2ca0a:	18d3      	adds	r3, r2, r3
   2ca0c:	693a      	ldr	r2, [r7, #16]
   2ca0e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2ca10:	69fb      	ldr	r3, [r7, #28]
   2ca12:	3301      	adds	r3, #1
   2ca14:	61fb      	str	r3, [r7, #28]
   2ca16:	69fb      	ldr	r3, [r7, #28]
   2ca18:	2b01      	cmp	r3, #1
   2ca1a:	dd8d      	ble.n	2c938 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2ca1c:	2300      	movs	r3, #0
}
   2ca1e:	0018      	movs	r0, r3
   2ca20:	46bd      	mov	sp, r7
   2ca22:	b008      	add	sp, #32
   2ca24:	bd80      	pop	{r7, pc}
   2ca26:	46c0      	nop			; (mov r8, r8)
   2ca28:	0003c63c 	.word	0x0003c63c

0002ca2c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ca2c:	b580      	push	{r7, lr}
   2ca2e:	b088      	sub	sp, #32
   2ca30:	af00      	add	r7, sp, #0
   2ca32:	60b9      	str	r1, [r7, #8]
   2ca34:	607a      	str	r2, [r7, #4]
   2ca36:	230f      	movs	r3, #15
   2ca38:	18fb      	adds	r3, r7, r3
   2ca3a:	1c02      	adds	r2, r0, #0
   2ca3c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2ca3e:	230f      	movs	r3, #15
   2ca40:	18fb      	adds	r3, r7, r3
   2ca42:	781a      	ldrb	r2, [r3, #0]
   2ca44:	2317      	movs	r3, #23
   2ca46:	18fb      	adds	r3, r7, r3
   2ca48:	492d      	ldr	r1, [pc, #180]	; (2cb00 <_tcc_build_drvctrl+0xd4>)
   2ca4a:	5c8a      	ldrb	r2, [r1, r2]
   2ca4c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2ca4e:	2300      	movs	r3, #0
   2ca50:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ca52:	2300      	movs	r3, #0
   2ca54:	61fb      	str	r3, [r7, #28]
   2ca56:	e048      	b.n	2caea <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2ca58:	68ba      	ldr	r2, [r7, #8]
   2ca5a:	2150      	movs	r1, #80	; 0x50
   2ca5c:	69fb      	ldr	r3, [r7, #28]
   2ca5e:	18d3      	adds	r3, r2, r3
   2ca60:	185b      	adds	r3, r3, r1
   2ca62:	781b      	ldrb	r3, [r3, #0]
   2ca64:	2b00      	cmp	r3, #0
   2ca66:	d010      	beq.n	2ca8a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2ca68:	2317      	movs	r3, #23
   2ca6a:	18fb      	adds	r3, r7, r3
   2ca6c:	781a      	ldrb	r2, [r3, #0]
   2ca6e:	69fb      	ldr	r3, [r7, #28]
   2ca70:	429a      	cmp	r2, r3
   2ca72:	d801      	bhi.n	2ca78 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2ca74:	2317      	movs	r3, #23
   2ca76:	e03f      	b.n	2caf8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2ca78:	2380      	movs	r3, #128	; 0x80
   2ca7a:	025a      	lsls	r2, r3, #9
   2ca7c:	69fb      	ldr	r3, [r7, #28]
   2ca7e:	409a      	lsls	r2, r3
   2ca80:	0013      	movs	r3, r2
   2ca82:	001a      	movs	r2, r3
   2ca84:	69bb      	ldr	r3, [r7, #24]
   2ca86:	4313      	orrs	r3, r2
   2ca88:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2ca8a:	68ba      	ldr	r2, [r7, #8]
   2ca8c:	69fb      	ldr	r3, [r7, #28]
   2ca8e:	331c      	adds	r3, #28
   2ca90:	005b      	lsls	r3, r3, #1
   2ca92:	18d3      	adds	r3, r2, r3
   2ca94:	3309      	adds	r3, #9
   2ca96:	781b      	ldrb	r3, [r3, #0]
   2ca98:	2b00      	cmp	r3, #0
   2ca9a:	d023      	beq.n	2cae4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2ca9c:	2317      	movs	r3, #23
   2ca9e:	18fb      	adds	r3, r7, r3
   2caa0:	781a      	ldrb	r2, [r3, #0]
   2caa2:	69fb      	ldr	r3, [r7, #28]
   2caa4:	429a      	cmp	r2, r3
   2caa6:	d801      	bhi.n	2caac <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2caa8:	2317      	movs	r3, #23
   2caaa:	e025      	b.n	2caf8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2caac:	68ba      	ldr	r2, [r7, #8]
   2caae:	69fb      	ldr	r3, [r7, #28]
   2cab0:	331c      	adds	r3, #28
   2cab2:	005b      	lsls	r3, r3, #1
   2cab4:	18d3      	adds	r3, r2, r3
   2cab6:	3309      	adds	r3, #9
   2cab8:	781b      	ldrb	r3, [r3, #0]
   2caba:	2b02      	cmp	r3, #2
   2cabc:	d10a      	bne.n	2cad4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2cabe:	2302      	movs	r3, #2
   2cac0:	33ff      	adds	r3, #255	; 0xff
   2cac2:	001a      	movs	r2, r3
   2cac4:	69fb      	ldr	r3, [r7, #28]
   2cac6:	409a      	lsls	r2, r3
   2cac8:	0013      	movs	r3, r2
   2caca:	001a      	movs	r2, r3
   2cacc:	69bb      	ldr	r3, [r7, #24]
   2cace:	4313      	orrs	r3, r2
   2cad0:	61bb      	str	r3, [r7, #24]
   2cad2:	e007      	b.n	2cae4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2cad4:	2201      	movs	r2, #1
   2cad6:	69fb      	ldr	r3, [r7, #28]
   2cad8:	409a      	lsls	r2, r3
   2cada:	0013      	movs	r3, r2
   2cadc:	001a      	movs	r2, r3
   2cade:	69bb      	ldr	r3, [r7, #24]
   2cae0:	4313      	orrs	r3, r2
   2cae2:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2cae4:	69fb      	ldr	r3, [r7, #28]
   2cae6:	3301      	adds	r3, #1
   2cae8:	61fb      	str	r3, [r7, #28]
   2caea:	69fb      	ldr	r3, [r7, #28]
   2caec:	2b07      	cmp	r3, #7
   2caee:	d9b3      	bls.n	2ca58 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2caf0:	687b      	ldr	r3, [r7, #4]
   2caf2:	69ba      	ldr	r2, [r7, #24]
   2caf4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2caf6:	2300      	movs	r3, #0
}
   2caf8:	0018      	movs	r0, r3
   2cafa:	46bd      	mov	sp, r7
   2cafc:	b008      	add	sp, #32
   2cafe:	bd80      	pop	{r7, pc}
   2cb00:	0003c640 	.word	0x0003c640

0002cb04 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2cb04:	b580      	push	{r7, lr}
   2cb06:	b088      	sub	sp, #32
   2cb08:	af00      	add	r7, sp, #0
   2cb0a:	60b9      	str	r1, [r7, #8]
   2cb0c:	607a      	str	r2, [r7, #4]
   2cb0e:	230f      	movs	r3, #15
   2cb10:	18fb      	adds	r3, r7, r3
   2cb12:	1c02      	adds	r2, r0, #0
   2cb14:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2cb16:	230f      	movs	r3, #15
   2cb18:	18fb      	adds	r3, r7, r3
   2cb1a:	781a      	ldrb	r2, [r3, #0]
   2cb1c:	2317      	movs	r3, #23
   2cb1e:	18fb      	adds	r3, r7, r3
   2cb20:	491d      	ldr	r1, [pc, #116]	; (2cb98 <_tcc_build_waves+0x94>)
   2cb22:	5c8a      	ldrb	r2, [r1, r2]
   2cb24:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2cb26:	68bb      	ldr	r3, [r7, #8]
   2cb28:	3310      	adds	r3, #16
   2cb2a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2cb2c:	693b      	ldr	r3, [r7, #16]
   2cb2e:	7a5b      	ldrb	r3, [r3, #9]
   2cb30:	011b      	lsls	r3, r3, #4
   2cb32:	001a      	movs	r2, r3
   2cb34:	2330      	movs	r3, #48	; 0x30
   2cb36:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2cb38:	693b      	ldr	r3, [r7, #16]
   2cb3a:	7a1b      	ldrb	r3, [r3, #8]
   2cb3c:	0019      	movs	r1, r3
   2cb3e:	2307      	movs	r3, #7
   2cb40:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2cb42:	4313      	orrs	r3, r2
   2cb44:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2cb46:	2300      	movs	r3, #0
   2cb48:	61fb      	str	r3, [r7, #28]
   2cb4a:	e01a      	b.n	2cb82 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2cb4c:	693a      	ldr	r2, [r7, #16]
   2cb4e:	69fb      	ldr	r3, [r7, #28]
   2cb50:	18d3      	adds	r3, r2, r3
   2cb52:	3304      	adds	r3, #4
   2cb54:	781b      	ldrb	r3, [r3, #0]
   2cb56:	2b00      	cmp	r3, #0
   2cb58:	d010      	beq.n	2cb7c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2cb5a:	2317      	movs	r3, #23
   2cb5c:	18fb      	adds	r3, r7, r3
   2cb5e:	781a      	ldrb	r2, [r3, #0]
   2cb60:	69fb      	ldr	r3, [r7, #28]
   2cb62:	429a      	cmp	r2, r3
   2cb64:	dc01      	bgt.n	2cb6a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2cb66:	2317      	movs	r3, #23
   2cb68:	e012      	b.n	2cb90 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2cb6a:	2380      	movs	r3, #128	; 0x80
   2cb6c:	025a      	lsls	r2, r3, #9
   2cb6e:	69fb      	ldr	r3, [r7, #28]
   2cb70:	409a      	lsls	r2, r3
   2cb72:	0013      	movs	r3, r2
   2cb74:	001a      	movs	r2, r3
   2cb76:	69bb      	ldr	r3, [r7, #24]
   2cb78:	4313      	orrs	r3, r2
   2cb7a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2cb7c:	69fb      	ldr	r3, [r7, #28]
   2cb7e:	3301      	adds	r3, #1
   2cb80:	61fb      	str	r3, [r7, #28]
   2cb82:	69fb      	ldr	r3, [r7, #28]
   2cb84:	2b03      	cmp	r3, #3
   2cb86:	dde1      	ble.n	2cb4c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2cb88:	687b      	ldr	r3, [r7, #4]
   2cb8a:	69ba      	ldr	r2, [r7, #24]
   2cb8c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2cb8e:	2300      	movs	r3, #0
}
   2cb90:	0018      	movs	r0, r3
   2cb92:	46bd      	mov	sp, r7
   2cb94:	b008      	add	sp, #32
   2cb96:	bd80      	pop	{r7, pc}
   2cb98:	0003c63c 	.word	0x0003c63c

0002cb9c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2cb9c:	b590      	push	{r4, r7, lr}
   2cb9e:	b091      	sub	sp, #68	; 0x44
   2cba0:	af00      	add	r7, sp, #0
   2cba2:	60f8      	str	r0, [r7, #12]
   2cba4:	60b9      	str	r1, [r7, #8]
   2cba6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2cba8:	233b      	movs	r3, #59	; 0x3b
   2cbaa:	18fc      	adds	r4, r7, r3
   2cbac:	68bb      	ldr	r3, [r7, #8]
   2cbae:	0018      	movs	r0, r3
   2cbb0:	4bc4      	ldr	r3, [pc, #784]	; (2cec4 <tcc_init+0x328>)
   2cbb2:	4798      	blx	r3
   2cbb4:	0003      	movs	r3, r0
   2cbb6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2cbb8:	233b      	movs	r3, #59	; 0x3b
   2cbba:	18fb      	adds	r3, r7, r3
   2cbbc:	781a      	ldrb	r2, [r3, #0]
   2cbbe:	4bc2      	ldr	r3, [pc, #776]	; (2cec8 <tcc_init+0x32c>)
   2cbc0:	0092      	lsls	r2, r2, #2
   2cbc2:	58d3      	ldr	r3, [r2, r3]
   2cbc4:	0019      	movs	r1, r3
   2cbc6:	2002      	movs	r0, #2
   2cbc8:	4bc0      	ldr	r3, [pc, #768]	; (2cecc <tcc_init+0x330>)
   2cbca:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2cbcc:	68bb      	ldr	r3, [r7, #8]
   2cbce:	681b      	ldr	r3, [r3, #0]
   2cbd0:	2202      	movs	r2, #2
   2cbd2:	4013      	ands	r3, r2
   2cbd4:	d001      	beq.n	2cbda <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2cbd6:	231c      	movs	r3, #28
   2cbd8:	e1be      	b.n	2cf58 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2cbda:	68bb      	ldr	r3, [r7, #8]
   2cbdc:	681b      	ldr	r3, [r3, #0]
   2cbde:	2201      	movs	r2, #1
   2cbe0:	4013      	ands	r3, r2
   2cbe2:	d001      	beq.n	2cbe8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2cbe4:	231c      	movs	r3, #28
   2cbe6:	e1b7      	b.n	2cf58 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2cbe8:	233b      	movs	r3, #59	; 0x3b
   2cbea:	18fb      	adds	r3, r7, r3
   2cbec:	781a      	ldrb	r2, [r3, #0]
   2cbee:	4bb8      	ldr	r3, [pc, #736]	; (2ced0 <tcc_init+0x334>)
   2cbf0:	0092      	lsls	r2, r2, #2
   2cbf2:	58d3      	ldr	r3, [r2, r3]
   2cbf4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2cbf6:	687b      	ldr	r3, [r7, #4]
   2cbf8:	681a      	ldr	r2, [r3, #0]
   2cbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cbfc:	429a      	cmp	r2, r3
   2cbfe:	d804      	bhi.n	2cc0a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2cc00:	687b      	ldr	r3, [r7, #4]
   2cc02:	685a      	ldr	r2, [r3, #4]
   2cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cc06:	429a      	cmp	r2, r3
   2cc08:	d901      	bls.n	2cc0e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2cc0a:	2317      	movs	r3, #23
   2cc0c:	e1a4      	b.n	2cf58 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2cc0e:	2300      	movs	r3, #0
   2cc10:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cc12:	e00e      	b.n	2cc32 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2cc14:	687a      	ldr	r2, [r7, #4]
   2cc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cc18:	3306      	adds	r3, #6
   2cc1a:	009b      	lsls	r3, r3, #2
   2cc1c:	18d3      	adds	r3, r2, r3
   2cc1e:	3304      	adds	r3, #4
   2cc20:	681a      	ldr	r2, [r3, #0]
   2cc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cc24:	429a      	cmp	r2, r3
   2cc26:	d901      	bls.n	2cc2c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2cc28:	2317      	movs	r3, #23
   2cc2a:	e195      	b.n	2cf58 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2cc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cc2e:	3301      	adds	r3, #1
   2cc30:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cc34:	2b03      	cmp	r3, #3
   2cc36:	dded      	ble.n	2cc14 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2cc38:	2300      	movs	r3, #0
   2cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cc3c:	e019      	b.n	2cc72 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2cc3e:	687a      	ldr	r2, [r7, #4]
   2cc40:	2198      	movs	r1, #152	; 0x98
   2cc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cc44:	18d3      	adds	r3, r2, r3
   2cc46:	185b      	adds	r3, r3, r1
   2cc48:	781b      	ldrb	r3, [r3, #0]
   2cc4a:	2201      	movs	r2, #1
   2cc4c:	4053      	eors	r3, r2
   2cc4e:	b2db      	uxtb	r3, r3
   2cc50:	2b00      	cmp	r3, #0
   2cc52:	d10a      	bne.n	2cc6a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2cc54:	233b      	movs	r3, #59	; 0x3b
   2cc56:	18fb      	adds	r3, r7, r3
   2cc58:	781b      	ldrb	r3, [r3, #0]
   2cc5a:	4a9e      	ldr	r2, [pc, #632]	; (2ced4 <tcc_init+0x338>)
   2cc5c:	5cd3      	ldrb	r3, [r2, r3]
   2cc5e:	001a      	movs	r2, r3
   2cc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cc62:	429a      	cmp	r2, r3
   2cc64:	dc02      	bgt.n	2cc6c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2cc66:	2317      	movs	r3, #23
   2cc68:	e176      	b.n	2cf58 <tcc_init+0x3bc>
			continue;
   2cc6a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2cc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cc6e:	3301      	adds	r3, #1
   2cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cc74:	2b07      	cmp	r3, #7
   2cc76:	dde2      	ble.n	2cc3e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2cc78:	2300      	movs	r3, #0
   2cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2cc7c:	2333      	movs	r3, #51	; 0x33
   2cc7e:	18fc      	adds	r4, r7, r3
   2cc80:	232c      	movs	r3, #44	; 0x2c
   2cc82:	18fa      	adds	r2, r7, r3
   2cc84:	6879      	ldr	r1, [r7, #4]
   2cc86:	233b      	movs	r3, #59	; 0x3b
   2cc88:	18fb      	adds	r3, r7, r3
   2cc8a:	781b      	ldrb	r3, [r3, #0]
   2cc8c:	0018      	movs	r0, r3
   2cc8e:	4b92      	ldr	r3, [pc, #584]	; (2ced8 <tcc_init+0x33c>)
   2cc90:	4798      	blx	r3
   2cc92:	0003      	movs	r3, r0
   2cc94:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cc96:	2333      	movs	r3, #51	; 0x33
   2cc98:	18fb      	adds	r3, r7, r3
   2cc9a:	781b      	ldrb	r3, [r3, #0]
   2cc9c:	2b00      	cmp	r3, #0
   2cc9e:	d003      	beq.n	2cca8 <tcc_init+0x10c>
		return status;
   2cca0:	2333      	movs	r3, #51	; 0x33
   2cca2:	18fb      	adds	r3, r7, r3
   2cca4:	781b      	ldrb	r3, [r3, #0]
   2cca6:	e157      	b.n	2cf58 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2cca8:	232b      	movs	r3, #43	; 0x2b
   2ccaa:	18fa      	adds	r2, r7, r3
   2ccac:	6879      	ldr	r1, [r7, #4]
   2ccae:	233b      	movs	r3, #59	; 0x3b
   2ccb0:	18fb      	adds	r3, r7, r3
   2ccb2:	781b      	ldrb	r3, [r3, #0]
   2ccb4:	0018      	movs	r0, r3
   2ccb6:	4b89      	ldr	r3, [pc, #548]	; (2cedc <tcc_init+0x340>)
   2ccb8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2ccba:	2333      	movs	r3, #51	; 0x33
   2ccbc:	18fc      	adds	r4, r7, r3
   2ccbe:	2320      	movs	r3, #32
   2ccc0:	18fa      	adds	r2, r7, r3
   2ccc2:	6879      	ldr	r1, [r7, #4]
   2ccc4:	233b      	movs	r3, #59	; 0x3b
   2ccc6:	18fb      	adds	r3, r7, r3
   2ccc8:	781b      	ldrb	r3, [r3, #0]
   2ccca:	0018      	movs	r0, r3
   2cccc:	4b84      	ldr	r3, [pc, #528]	; (2cee0 <tcc_init+0x344>)
   2ccce:	4798      	blx	r3
   2ccd0:	0003      	movs	r3, r0
   2ccd2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ccd4:	2333      	movs	r3, #51	; 0x33
   2ccd6:	18fb      	adds	r3, r7, r3
   2ccd8:	781b      	ldrb	r3, [r3, #0]
   2ccda:	2b00      	cmp	r3, #0
   2ccdc:	d003      	beq.n	2cce6 <tcc_init+0x14a>
		return status;
   2ccde:	2333      	movs	r3, #51	; 0x33
   2cce0:	18fb      	adds	r3, r7, r3
   2cce2:	781b      	ldrb	r3, [r3, #0]
   2cce4:	e138      	b.n	2cf58 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2cce6:	2300      	movs	r3, #0
   2cce8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2ccea:	2333      	movs	r3, #51	; 0x33
   2ccec:	18fc      	adds	r4, r7, r3
   2ccee:	231c      	movs	r3, #28
   2ccf0:	18fa      	adds	r2, r7, r3
   2ccf2:	6879      	ldr	r1, [r7, #4]
   2ccf4:	233b      	movs	r3, #59	; 0x3b
   2ccf6:	18fb      	adds	r3, r7, r3
   2ccf8:	781b      	ldrb	r3, [r3, #0]
   2ccfa:	0018      	movs	r0, r3
   2ccfc:	4b79      	ldr	r3, [pc, #484]	; (2cee4 <tcc_init+0x348>)
   2ccfe:	4798      	blx	r3
   2cd00:	0003      	movs	r3, r0
   2cd02:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cd04:	2333      	movs	r3, #51	; 0x33
   2cd06:	18fb      	adds	r3, r7, r3
   2cd08:	781b      	ldrb	r3, [r3, #0]
   2cd0a:	2b00      	cmp	r3, #0
   2cd0c:	d003      	beq.n	2cd16 <tcc_init+0x17a>
		return status;
   2cd0e:	2333      	movs	r3, #51	; 0x33
   2cd10:	18fb      	adds	r3, r7, r3
   2cd12:	781b      	ldrb	r3, [r3, #0]
   2cd14:	e120      	b.n	2cf58 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2cd16:	2333      	movs	r3, #51	; 0x33
   2cd18:	18fc      	adds	r4, r7, r3
   2cd1a:	2318      	movs	r3, #24
   2cd1c:	18fa      	adds	r2, r7, r3
   2cd1e:	6879      	ldr	r1, [r7, #4]
   2cd20:	233b      	movs	r3, #59	; 0x3b
   2cd22:	18fb      	adds	r3, r7, r3
   2cd24:	781b      	ldrb	r3, [r3, #0]
   2cd26:	0018      	movs	r0, r3
   2cd28:	4b6f      	ldr	r3, [pc, #444]	; (2cee8 <tcc_init+0x34c>)
   2cd2a:	4798      	blx	r3
   2cd2c:	0003      	movs	r3, r0
   2cd2e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cd30:	2333      	movs	r3, #51	; 0x33
   2cd32:	18fb      	adds	r3, r7, r3
   2cd34:	781b      	ldrb	r3, [r3, #0]
   2cd36:	2b00      	cmp	r3, #0
   2cd38:	d003      	beq.n	2cd42 <tcc_init+0x1a6>
		return status;
   2cd3a:	2333      	movs	r3, #51	; 0x33
   2cd3c:	18fb      	adds	r3, r7, r3
   2cd3e:	781b      	ldrb	r3, [r3, #0]
   2cd40:	e10a      	b.n	2cf58 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2cd42:	2300      	movs	r3, #0
   2cd44:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cd46:	e009      	b.n	2cd5c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2cd48:	68fa      	ldr	r2, [r7, #12]
   2cd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cd4c:	009b      	lsls	r3, r3, #2
   2cd4e:	18d3      	adds	r3, r2, r3
   2cd50:	3304      	adds	r3, #4
   2cd52:	2200      	movs	r2, #0
   2cd54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2cd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cd58:	3301      	adds	r3, #1
   2cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cd5e:	2b0b      	cmp	r3, #11
   2cd60:	ddf2      	ble.n	2cd48 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2cd62:	68fb      	ldr	r3, [r7, #12]
   2cd64:	2200      	movs	r2, #0
   2cd66:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2cd68:	68fb      	ldr	r3, [r7, #12]
   2cd6a:	2200      	movs	r2, #0
   2cd6c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2cd6e:	233b      	movs	r3, #59	; 0x3b
   2cd70:	18fb      	adds	r3, r7, r3
   2cd72:	781a      	ldrb	r2, [r3, #0]
   2cd74:	4b5d      	ldr	r3, [pc, #372]	; (2ceec <tcc_init+0x350>)
   2cd76:	0092      	lsls	r2, r2, #2
   2cd78:	68f9      	ldr	r1, [r7, #12]
   2cd7a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2cd7c:	68fb      	ldr	r3, [r7, #12]
   2cd7e:	68ba      	ldr	r2, [r7, #8]
   2cd80:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2cd82:	687b      	ldr	r3, [r7, #4]
   2cd84:	22a0      	movs	r2, #160	; 0xa0
   2cd86:	5c99      	ldrb	r1, [r3, r2]
   2cd88:	68fb      	ldr	r3, [r7, #12]
   2cd8a:	223c      	movs	r2, #60	; 0x3c
   2cd8c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2cd8e:	2314      	movs	r3, #20
   2cd90:	18fb      	adds	r3, r7, r3
   2cd92:	0018      	movs	r0, r3
   2cd94:	4b56      	ldr	r3, [pc, #344]	; (2cef0 <tcc_init+0x354>)
   2cd96:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2cd98:	687b      	ldr	r3, [r7, #4]
   2cd9a:	7a9a      	ldrb	r2, [r3, #10]
   2cd9c:	2314      	movs	r3, #20
   2cd9e:	18fb      	adds	r3, r7, r3
   2cda0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2cda2:	233b      	movs	r3, #59	; 0x3b
   2cda4:	18fb      	adds	r3, r7, r3
   2cda6:	781b      	ldrb	r3, [r3, #0]
   2cda8:	4a52      	ldr	r2, [pc, #328]	; (2cef4 <tcc_init+0x358>)
   2cdaa:	5cd3      	ldrb	r3, [r2, r3]
   2cdac:	2214      	movs	r2, #20
   2cdae:	18ba      	adds	r2, r7, r2
   2cdb0:	0011      	movs	r1, r2
   2cdb2:	0018      	movs	r0, r3
   2cdb4:	4b50      	ldr	r3, [pc, #320]	; (2cef8 <tcc_init+0x35c>)
   2cdb6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2cdb8:	233b      	movs	r3, #59	; 0x3b
   2cdba:	18fb      	adds	r3, r7, r3
   2cdbc:	781b      	ldrb	r3, [r3, #0]
   2cdbe:	4a4d      	ldr	r2, [pc, #308]	; (2cef4 <tcc_init+0x358>)
   2cdc0:	5cd3      	ldrb	r3, [r2, r3]
   2cdc2:	0018      	movs	r0, r3
   2cdc4:	4b4d      	ldr	r3, [pc, #308]	; (2cefc <tcc_init+0x360>)
   2cdc6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2cdc8:	2300      	movs	r3, #0
   2cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cdcc:	e02d      	b.n	2ce2a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2cdce:	687a      	ldr	r2, [r7, #4]
   2cdd0:	2198      	movs	r1, #152	; 0x98
   2cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cdd4:	18d3      	adds	r3, r2, r3
   2cdd6:	185b      	adds	r3, r3, r1
   2cdd8:	781b      	ldrb	r3, [r3, #0]
   2cdda:	2201      	movs	r2, #1
   2cddc:	4053      	eors	r3, r2
   2cdde:	b2db      	uxtb	r3, r3
   2cde0:	2b00      	cmp	r3, #0
   2cde2:	d11e      	bne.n	2ce22 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2cde4:	2310      	movs	r3, #16
   2cde6:	18fb      	adds	r3, r7, r3
   2cde8:	0018      	movs	r0, r3
   2cdea:	4b45      	ldr	r3, [pc, #276]	; (2cf00 <tcc_init+0x364>)
   2cdec:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2cdee:	687b      	ldr	r3, [r7, #4]
   2cdf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cdf2:	321e      	adds	r2, #30
   2cdf4:	0092      	lsls	r2, r2, #2
   2cdf6:	58d3      	ldr	r3, [r2, r3]
   2cdf8:	b2da      	uxtb	r2, r3
   2cdfa:	2310      	movs	r3, #16
   2cdfc:	18fb      	adds	r3, r7, r3
   2cdfe:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2ce00:	2310      	movs	r3, #16
   2ce02:	18fb      	adds	r3, r7, r3
   2ce04:	2201      	movs	r2, #1
   2ce06:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2ce08:	687b      	ldr	r3, [r7, #4]
   2ce0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ce0c:	3216      	adds	r2, #22
   2ce0e:	0092      	lsls	r2, r2, #2
   2ce10:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2ce12:	b2db      	uxtb	r3, r3
   2ce14:	2210      	movs	r2, #16
   2ce16:	18ba      	adds	r2, r7, r2
   2ce18:	0011      	movs	r1, r2
   2ce1a:	0018      	movs	r0, r3
   2ce1c:	4b39      	ldr	r3, [pc, #228]	; (2cf04 <tcc_init+0x368>)
   2ce1e:	4798      	blx	r3
   2ce20:	e000      	b.n	2ce24 <tcc_init+0x288>
			continue;
   2ce22:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2ce24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce26:	3301      	adds	r3, #1
   2ce28:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce2a:	233b      	movs	r3, #59	; 0x3b
   2ce2c:	18fb      	adds	r3, r7, r3
   2ce2e:	781b      	ldrb	r3, [r3, #0]
   2ce30:	4a28      	ldr	r2, [pc, #160]	; (2ced4 <tcc_init+0x338>)
   2ce32:	5cd3      	ldrb	r3, [r2, r3]
   2ce34:	001a      	movs	r2, r3
   2ce36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce38:	429a      	cmp	r2, r3
   2ce3a:	dcc8      	bgt.n	2cdce <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2ce3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ce3e:	68bb      	ldr	r3, [r7, #8]
   2ce40:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2ce42:	46c0      	nop			; (mov r8, r8)
   2ce44:	68bb      	ldr	r3, [r7, #8]
   2ce46:	689b      	ldr	r3, [r3, #8]
   2ce48:	2204      	movs	r2, #4
   2ce4a:	4013      	ands	r3, r2
   2ce4c:	d1fa      	bne.n	2ce44 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2ce4e:	68bb      	ldr	r3, [r7, #8]
   2ce50:	22ff      	movs	r2, #255	; 0xff
   2ce52:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2ce54:	46c0      	nop			; (mov r8, r8)
   2ce56:	68bb      	ldr	r3, [r7, #8]
   2ce58:	689b      	ldr	r3, [r3, #8]
   2ce5a:	2204      	movs	r2, #4
   2ce5c:	4013      	ands	r3, r2
   2ce5e:	d1fa      	bne.n	2ce56 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2ce60:	232b      	movs	r3, #43	; 0x2b
   2ce62:	18fb      	adds	r3, r7, r3
   2ce64:	781a      	ldrb	r2, [r3, #0]
   2ce66:	68bb      	ldr	r3, [r7, #8]
   2ce68:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2ce6a:	2320      	movs	r3, #32
   2ce6c:	18fb      	adds	r3, r7, r3
   2ce6e:	681a      	ldr	r2, [r3, #0]
   2ce70:	68bb      	ldr	r3, [r7, #8]
   2ce72:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2ce74:	2320      	movs	r3, #32
   2ce76:	18fb      	adds	r3, r7, r3
   2ce78:	685a      	ldr	r2, [r3, #4]
   2ce7a:	68bb      	ldr	r3, [r7, #8]
   2ce7c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2ce7e:	69fa      	ldr	r2, [r7, #28]
   2ce80:	68bb      	ldr	r3, [r7, #8]
   2ce82:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2ce84:	46c0      	nop			; (mov r8, r8)
   2ce86:	68bb      	ldr	r3, [r7, #8]
   2ce88:	689b      	ldr	r3, [r3, #8]
   2ce8a:	4a1f      	ldr	r2, [pc, #124]	; (2cf08 <tcc_init+0x36c>)
   2ce8c:	4013      	ands	r3, r2
   2ce8e:	d1fa      	bne.n	2ce86 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2ce90:	69ba      	ldr	r2, [r7, #24]
   2ce92:	68bb      	ldr	r3, [r7, #8]
   2ce94:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2ce96:	46c0      	nop			; (mov r8, r8)
   2ce98:	68bb      	ldr	r3, [r7, #8]
   2ce9a:	689b      	ldr	r3, [r3, #8]
   2ce9c:	2210      	movs	r2, #16
   2ce9e:	4013      	ands	r3, r2
   2cea0:	d1fa      	bne.n	2ce98 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2cea2:	687b      	ldr	r3, [r7, #4]
   2cea4:	681a      	ldr	r2, [r3, #0]
   2cea6:	68bb      	ldr	r3, [r7, #8]
   2cea8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2ceaa:	46c0      	nop			; (mov r8, r8)
   2ceac:	68bb      	ldr	r3, [r7, #8]
   2ceae:	689b      	ldr	r3, [r3, #8]
   2ceb0:	4a16      	ldr	r2, [pc, #88]	; (2cf0c <tcc_init+0x370>)
   2ceb2:	4013      	ands	r3, r2
   2ceb4:	d1fa      	bne.n	2ceac <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2ceb6:	687b      	ldr	r3, [r7, #4]
   2ceb8:	685a      	ldr	r2, [r3, #4]
   2ceba:	68bb      	ldr	r3, [r7, #8]
   2cebc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2cebe:	2300      	movs	r3, #0
   2cec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cec2:	e03f      	b.n	2cf44 <tcc_init+0x3a8>
   2cec4:	0002c505 	.word	0x0002c505
   2cec8:	0003c624 	.word	0x0003c624
   2cecc:	0002c481 	.word	0x0002c481
   2ced0:	0003c630 	.word	0x0003c630
   2ced4:	0003c640 	.word	0x0003c640
   2ced8:	0002c811 	.word	0x0002c811
   2cedc:	0002c8b5 	.word	0x0002c8b5
   2cee0:	0002c911 	.word	0x0002c911
   2cee4:	0002ca2d 	.word	0x0002ca2d
   2cee8:	0002cb05 	.word	0x0002cb05
   2ceec:	20005a7c 	.word	0x20005a7c
   2cef0:	0002c469 	.word	0x0002c469
   2cef4:	0003c620 	.word	0x0003c620
   2cef8:	0002c081 	.word	0x0002c081
   2cefc:	0002c0c5 	.word	0x0002c0c5
   2cf00:	0002c4dd 	.word	0x0002c4dd
   2cf04:	0002c3e1 	.word	0x0002c3e1
   2cf08:	00020040 	.word	0x00020040
   2cf0c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2cf10:	46c0      	nop			; (mov r8, r8)
   2cf12:	68bb      	ldr	r3, [r7, #8]
   2cf14:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2cf16:	4912      	ldr	r1, [pc, #72]	; (2cf60 <tcc_init+0x3c4>)
   2cf18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cf1a:	4091      	lsls	r1, r2
   2cf1c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2cf1e:	4013      	ands	r3, r2
   2cf20:	d1f7      	bne.n	2cf12 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2cf22:	687a      	ldr	r2, [r7, #4]
   2cf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf26:	3306      	adds	r3, #6
   2cf28:	009b      	lsls	r3, r3, #2
   2cf2a:	18d3      	adds	r3, r2, r3
   2cf2c:	3304      	adds	r3, #4
   2cf2e:	681a      	ldr	r2, [r3, #0]
   2cf30:	68b9      	ldr	r1, [r7, #8]
   2cf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf34:	3310      	adds	r3, #16
   2cf36:	009b      	lsls	r3, r3, #2
   2cf38:	18cb      	adds	r3, r1, r3
   2cf3a:	3304      	adds	r3, #4
   2cf3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2cf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf40:	3301      	adds	r3, #1
   2cf42:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cf44:	233b      	movs	r3, #59	; 0x3b
   2cf46:	18fb      	adds	r3, r7, r3
   2cf48:	781b      	ldrb	r3, [r3, #0]
   2cf4a:	4a06      	ldr	r2, [pc, #24]	; (2cf64 <tcc_init+0x3c8>)
   2cf4c:	5cd3      	ldrb	r3, [r2, r3]
   2cf4e:	001a      	movs	r2, r3
   2cf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf52:	429a      	cmp	r2, r3
   2cf54:	dcdc      	bgt.n	2cf10 <tcc_init+0x374>
	}

	return STATUS_OK;
   2cf56:	2300      	movs	r3, #0
}
   2cf58:	0018      	movs	r0, r3
   2cf5a:	46bd      	mov	sp, r7
   2cf5c:	b011      	add	sp, #68	; 0x44
   2cf5e:	bd90      	pop	{r4, r7, pc}
   2cf60:	00080100 	.word	0x00080100
   2cf64:	0003c63c 	.word	0x0003c63c

0002cf68 <system_interrupt_enable>:
{
   2cf68:	b580      	push	{r7, lr}
   2cf6a:	b082      	sub	sp, #8
   2cf6c:	af00      	add	r7, sp, #0
   2cf6e:	0002      	movs	r2, r0
   2cf70:	1dfb      	adds	r3, r7, #7
   2cf72:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2cf74:	4b06      	ldr	r3, [pc, #24]	; (2cf90 <system_interrupt_enable+0x28>)
   2cf76:	1dfa      	adds	r2, r7, #7
   2cf78:	7812      	ldrb	r2, [r2, #0]
   2cf7a:	0011      	movs	r1, r2
   2cf7c:	221f      	movs	r2, #31
   2cf7e:	400a      	ands	r2, r1
   2cf80:	2101      	movs	r1, #1
   2cf82:	4091      	lsls	r1, r2
   2cf84:	000a      	movs	r2, r1
   2cf86:	601a      	str	r2, [r3, #0]
}
   2cf88:	46c0      	nop			; (mov r8, r8)
   2cf8a:	46bd      	mov	sp, r7
   2cf8c:	b002      	add	sp, #8
   2cf8e:	bd80      	pop	{r7, pc}
   2cf90:	e000e100 	.word	0xe000e100

0002cf94 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2cf94:	b580      	push	{r7, lr}
   2cf96:	b082      	sub	sp, #8
   2cf98:	af00      	add	r7, sp, #0
   2cf9a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2cf9c:	4a04      	ldr	r2, [pc, #16]	; (2cfb0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2cf9e:	687b      	ldr	r3, [r7, #4]
   2cfa0:	18d3      	adds	r3, r2, r3
   2cfa2:	781b      	ldrb	r3, [r3, #0]
   2cfa4:	b25b      	sxtb	r3, r3
}
   2cfa6:	0018      	movs	r0, r3
   2cfa8:	46bd      	mov	sp, r7
   2cfaa:	b002      	add	sp, #8
   2cfac:	bd80      	pop	{r7, pc}
   2cfae:	46c0      	nop			; (mov r8, r8)
   2cfb0:	20000124 	.word	0x20000124

0002cfb4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2cfb4:	b580      	push	{r7, lr}
   2cfb6:	b084      	sub	sp, #16
   2cfb8:	af00      	add	r7, sp, #0
   2cfba:	60f8      	str	r0, [r7, #12]
   2cfbc:	60b9      	str	r1, [r7, #8]
   2cfbe:	1dfb      	adds	r3, r7, #7
   2cfc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2cfc2:	1dfb      	adds	r3, r7, #7
   2cfc4:	781b      	ldrb	r3, [r3, #0]
   2cfc6:	68fa      	ldr	r2, [r7, #12]
   2cfc8:	009b      	lsls	r3, r3, #2
   2cfca:	18d3      	adds	r3, r2, r3
   2cfcc:	3304      	adds	r3, #4
   2cfce:	68ba      	ldr	r2, [r7, #8]
   2cfd0:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2cfd2:	68fb      	ldr	r3, [r7, #12]
   2cfd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2cfd6:	1dfb      	adds	r3, r7, #7
   2cfd8:	7819      	ldrb	r1, [r3, #0]
   2cfda:	4b05      	ldr	r3, [pc, #20]	; (2cff0 <tcc_register_callback+0x3c>)
   2cfdc:	0089      	lsls	r1, r1, #2
   2cfde:	58cb      	ldr	r3, [r1, r3]
   2cfe0:	431a      	orrs	r2, r3
   2cfe2:	68fb      	ldr	r3, [r7, #12]
   2cfe4:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2cfe6:	2300      	movs	r3, #0
}
   2cfe8:	0018      	movs	r0, r3
   2cfea:	46bd      	mov	sp, r7
   2cfec:	b004      	add	sp, #16
   2cfee:	bd80      	pop	{r7, pc}
   2cff0:	0003c644 	.word	0x0003c644

0002cff4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2cff4:	b580      	push	{r7, lr}
   2cff6:	b082      	sub	sp, #8
   2cff8:	af00      	add	r7, sp, #0
   2cffa:	6078      	str	r0, [r7, #4]
   2cffc:	000a      	movs	r2, r1
   2cffe:	1cfb      	adds	r3, r7, #3
   2d000:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2d002:	687b      	ldr	r3, [r7, #4]
   2d004:	681b      	ldr	r3, [r3, #0]
   2d006:	0018      	movs	r0, r3
   2d008:	4b0f      	ldr	r3, [pc, #60]	; (2d048 <tcc_enable_callback+0x54>)
   2d00a:	4798      	blx	r3
   2d00c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2d00e:	0018      	movs	r0, r3
   2d010:	4b0e      	ldr	r3, [pc, #56]	; (2d04c <tcc_enable_callback+0x58>)
   2d012:	4798      	blx	r3
   2d014:	0003      	movs	r3, r0
   2d016:	0018      	movs	r0, r3
   2d018:	4b0d      	ldr	r3, [pc, #52]	; (2d050 <tcc_enable_callback+0x5c>)
   2d01a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2d01c:	687b      	ldr	r3, [r7, #4]
   2d01e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2d020:	1cfb      	adds	r3, r7, #3
   2d022:	7819      	ldrb	r1, [r3, #0]
   2d024:	4b0b      	ldr	r3, [pc, #44]	; (2d054 <tcc_enable_callback+0x60>)
   2d026:	0089      	lsls	r1, r1, #2
   2d028:	58cb      	ldr	r3, [r1, r3]
   2d02a:	431a      	orrs	r2, r3
   2d02c:	687b      	ldr	r3, [r7, #4]
   2d02e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2d030:	687b      	ldr	r3, [r7, #4]
   2d032:	681b      	ldr	r3, [r3, #0]
   2d034:	1cfa      	adds	r2, r7, #3
   2d036:	7811      	ldrb	r1, [r2, #0]
   2d038:	4a06      	ldr	r2, [pc, #24]	; (2d054 <tcc_enable_callback+0x60>)
   2d03a:	0089      	lsls	r1, r1, #2
   2d03c:	588a      	ldr	r2, [r1, r2]
   2d03e:	629a      	str	r2, [r3, #40]	; 0x28
}
   2d040:	46c0      	nop			; (mov r8, r8)
   2d042:	46bd      	mov	sp, r7
   2d044:	b002      	add	sp, #8
   2d046:	bd80      	pop	{r7, pc}
   2d048:	0002c505 	.word	0x0002c505
   2d04c:	0002cf95 	.word	0x0002cf95
   2d050:	0002cf69 	.word	0x0002cf69
   2d054:	0003c644 	.word	0x0003c644

0002d058 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2d058:	b580      	push	{r7, lr}
   2d05a:	af00      	add	r7, sp, #0
   2d05c:	2000      	movs	r0, #0
   2d05e:	4b02      	ldr	r3, [pc, #8]	; (2d068 <TCC0_Handler+0x10>)
   2d060:	4798      	blx	r3
   2d062:	46c0      	nop			; (mov r8, r8)
   2d064:	46bd      	mov	sp, r7
   2d066:	bd80      	pop	{r7, pc}
   2d068:	0002d095 	.word	0x0002d095

0002d06c <TCC1_Handler>:
   2d06c:	b580      	push	{r7, lr}
   2d06e:	af00      	add	r7, sp, #0
   2d070:	2001      	movs	r0, #1
   2d072:	4b02      	ldr	r3, [pc, #8]	; (2d07c <TCC1_Handler+0x10>)
   2d074:	4798      	blx	r3
   2d076:	46c0      	nop			; (mov r8, r8)
   2d078:	46bd      	mov	sp, r7
   2d07a:	bd80      	pop	{r7, pc}
   2d07c:	0002d095 	.word	0x0002d095

0002d080 <TCC2_Handler>:
   2d080:	b580      	push	{r7, lr}
   2d082:	af00      	add	r7, sp, #0
   2d084:	2002      	movs	r0, #2
   2d086:	4b02      	ldr	r3, [pc, #8]	; (2d090 <TCC2_Handler+0x10>)
   2d088:	4798      	blx	r3
   2d08a:	46c0      	nop			; (mov r8, r8)
   2d08c:	46bd      	mov	sp, r7
   2d08e:	bd80      	pop	{r7, pc}
   2d090:	0002d095 	.word	0x0002d095

0002d094 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2d094:	b580      	push	{r7, lr}
   2d096:	b086      	sub	sp, #24
   2d098:	af00      	add	r7, sp, #0
   2d09a:	0002      	movs	r2, r0
   2d09c:	1dfb      	adds	r3, r7, #7
   2d09e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2d0a0:	1dfb      	adds	r3, r7, #7
   2d0a2:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2d0a4:	4b18      	ldr	r3, [pc, #96]	; (2d108 <_tcc_interrupt_handler+0x74>)
   2d0a6:	0092      	lsls	r2, r2, #2
   2d0a8:	58d3      	ldr	r3, [r2, r3]
   2d0aa:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d0ac:	693b      	ldr	r3, [r7, #16]
   2d0ae:	681b      	ldr	r3, [r3, #0]
   2d0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2d0b2:	693b      	ldr	r3, [r7, #16]
   2d0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d0b6:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2d0b8:	693b      	ldr	r3, [r7, #16]
   2d0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d0bc:	4013      	ands	r3, r2
   2d0be:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d0c0:	2300      	movs	r3, #0
   2d0c2:	617b      	str	r3, [r7, #20]
   2d0c4:	e019      	b.n	2d0fa <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2d0c6:	4b11      	ldr	r3, [pc, #68]	; (2d10c <_tcc_interrupt_handler+0x78>)
   2d0c8:	697a      	ldr	r2, [r7, #20]
   2d0ca:	0092      	lsls	r2, r2, #2
   2d0cc:	58d3      	ldr	r3, [r2, r3]
   2d0ce:	68fa      	ldr	r2, [r7, #12]
   2d0d0:	4013      	ands	r3, r2
   2d0d2:	d00f      	beq.n	2d0f4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2d0d4:	693a      	ldr	r2, [r7, #16]
   2d0d6:	697b      	ldr	r3, [r7, #20]
   2d0d8:	009b      	lsls	r3, r3, #2
   2d0da:	18d3      	adds	r3, r2, r3
   2d0dc:	3304      	adds	r3, #4
   2d0de:	681b      	ldr	r3, [r3, #0]
   2d0e0:	693a      	ldr	r2, [r7, #16]
   2d0e2:	0010      	movs	r0, r2
   2d0e4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2d0e6:	693b      	ldr	r3, [r7, #16]
   2d0e8:	681b      	ldr	r3, [r3, #0]
   2d0ea:	4a08      	ldr	r2, [pc, #32]	; (2d10c <_tcc_interrupt_handler+0x78>)
   2d0ec:	6979      	ldr	r1, [r7, #20]
   2d0ee:	0089      	lsls	r1, r1, #2
   2d0f0:	588a      	ldr	r2, [r1, r2]
   2d0f2:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d0f4:	697b      	ldr	r3, [r7, #20]
   2d0f6:	3301      	adds	r3, #1
   2d0f8:	617b      	str	r3, [r7, #20]
   2d0fa:	697b      	ldr	r3, [r7, #20]
   2d0fc:	2b0b      	cmp	r3, #11
   2d0fe:	dde2      	ble.n	2d0c6 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2d100:	46c0      	nop			; (mov r8, r8)
   2d102:	46bd      	mov	sp, r7
   2d104:	b006      	add	sp, #24
   2d106:	bd80      	pop	{r7, pc}
   2d108:	20005a7c 	.word	0x20005a7c
   2d10c:	0003c644 	.word	0x0003c644

0002d110 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2d110:	b580      	push	{r7, lr}
   2d112:	b082      	sub	sp, #8
   2d114:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2d116:	4b2f      	ldr	r3, [pc, #188]	; (2d1d4 <Reset_Handler+0xc4>)
   2d118:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2d11a:	4b2f      	ldr	r3, [pc, #188]	; (2d1d8 <Reset_Handler+0xc8>)
   2d11c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2d11e:	687a      	ldr	r2, [r7, #4]
   2d120:	683b      	ldr	r3, [r7, #0]
   2d122:	429a      	cmp	r2, r3
   2d124:	d00c      	beq.n	2d140 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2d126:	e007      	b.n	2d138 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2d128:	683b      	ldr	r3, [r7, #0]
   2d12a:	1d1a      	adds	r2, r3, #4
   2d12c:	603a      	str	r2, [r7, #0]
   2d12e:	687a      	ldr	r2, [r7, #4]
   2d130:	1d11      	adds	r1, r2, #4
   2d132:	6079      	str	r1, [r7, #4]
   2d134:	6812      	ldr	r2, [r2, #0]
   2d136:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2d138:	683a      	ldr	r2, [r7, #0]
   2d13a:	4b28      	ldr	r3, [pc, #160]	; (2d1dc <Reset_Handler+0xcc>)
   2d13c:	429a      	cmp	r2, r3
   2d13e:	d3f3      	bcc.n	2d128 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2d140:	4b27      	ldr	r3, [pc, #156]	; (2d1e0 <Reset_Handler+0xd0>)
   2d142:	603b      	str	r3, [r7, #0]
   2d144:	e004      	b.n	2d150 <Reset_Handler+0x40>
                *pDest++ = 0;
   2d146:	683b      	ldr	r3, [r7, #0]
   2d148:	1d1a      	adds	r2, r3, #4
   2d14a:	603a      	str	r2, [r7, #0]
   2d14c:	2200      	movs	r2, #0
   2d14e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2d150:	683a      	ldr	r2, [r7, #0]
   2d152:	4b24      	ldr	r3, [pc, #144]	; (2d1e4 <Reset_Handler+0xd4>)
   2d154:	429a      	cmp	r2, r3
   2d156:	d3f6      	bcc.n	2d146 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2d158:	4b23      	ldr	r3, [pc, #140]	; (2d1e8 <Reset_Handler+0xd8>)
   2d15a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2d15c:	4b23      	ldr	r3, [pc, #140]	; (2d1ec <Reset_Handler+0xdc>)
   2d15e:	687a      	ldr	r2, [r7, #4]
   2d160:	21ff      	movs	r1, #255	; 0xff
   2d162:	438a      	bics	r2, r1
   2d164:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2d166:	4a22      	ldr	r2, [pc, #136]	; (2d1f0 <Reset_Handler+0xe0>)
   2d168:	2390      	movs	r3, #144	; 0x90
   2d16a:	005b      	lsls	r3, r3, #1
   2d16c:	2102      	movs	r1, #2
   2d16e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2d170:	4a20      	ldr	r2, [pc, #128]	; (2d1f4 <Reset_Handler+0xe4>)
   2d172:	78d3      	ldrb	r3, [r2, #3]
   2d174:	2103      	movs	r1, #3
   2d176:	438b      	bics	r3, r1
   2d178:	1c19      	adds	r1, r3, #0
   2d17a:	2302      	movs	r3, #2
   2d17c:	430b      	orrs	r3, r1
   2d17e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2d180:	4a1c      	ldr	r2, [pc, #112]	; (2d1f4 <Reset_Handler+0xe4>)
   2d182:	78d3      	ldrb	r3, [r2, #3]
   2d184:	210c      	movs	r1, #12
   2d186:	438b      	bics	r3, r1
   2d188:	1c19      	adds	r1, r3, #0
   2d18a:	2308      	movs	r3, #8
   2d18c:	430b      	orrs	r3, r1
   2d18e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2d190:	4a19      	ldr	r2, [pc, #100]	; (2d1f8 <Reset_Handler+0xe8>)
   2d192:	7b93      	ldrb	r3, [r2, #14]
   2d194:	2130      	movs	r1, #48	; 0x30
   2d196:	438b      	bics	r3, r1
   2d198:	1c19      	adds	r1, r3, #0
   2d19a:	2320      	movs	r3, #32
   2d19c:	430b      	orrs	r3, r1
   2d19e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2d1a0:	4a15      	ldr	r2, [pc, #84]	; (2d1f8 <Reset_Handler+0xe8>)
   2d1a2:	7b93      	ldrb	r3, [r2, #14]
   2d1a4:	210c      	movs	r1, #12
   2d1a6:	438b      	bics	r3, r1
   2d1a8:	1c19      	adds	r1, r3, #0
   2d1aa:	2308      	movs	r3, #8
   2d1ac:	430b      	orrs	r3, r1
   2d1ae:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2d1b0:	4a11      	ldr	r2, [pc, #68]	; (2d1f8 <Reset_Handler+0xe8>)
   2d1b2:	7b93      	ldrb	r3, [r2, #14]
   2d1b4:	2103      	movs	r1, #3
   2d1b6:	438b      	bics	r3, r1
   2d1b8:	1c19      	adds	r1, r3, #0
   2d1ba:	2302      	movs	r3, #2
   2d1bc:	430b      	orrs	r3, r1
   2d1be:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2d1c0:	4a0e      	ldr	r2, [pc, #56]	; (2d1fc <Reset_Handler+0xec>)
   2d1c2:	6853      	ldr	r3, [r2, #4]
   2d1c4:	2180      	movs	r1, #128	; 0x80
   2d1c6:	430b      	orrs	r3, r1
   2d1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2d1ca:	4b0d      	ldr	r3, [pc, #52]	; (2d200 <Reset_Handler+0xf0>)
   2d1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
   2d1ce:	4b0d      	ldr	r3, [pc, #52]	; (2d204 <Reset_Handler+0xf4>)
   2d1d0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2d1d2:	e7fe      	b.n	2d1d2 <Reset_Handler+0xc2>
   2d1d4:	0003d44c 	.word	0x0003d44c
   2d1d8:	20000000 	.word	0x20000000
   2d1dc:	200002fc 	.word	0x200002fc
   2d1e0:	20000300 	.word	0x20000300
   2d1e4:	20005aec 	.word	0x20005aec
   2d1e8:	00012000 	.word	0x00012000
   2d1ec:	e000ed00 	.word	0xe000ed00
   2d1f0:	41007000 	.word	0x41007000
   2d1f4:	41005000 	.word	0x41005000
   2d1f8:	41004800 	.word	0x41004800
   2d1fc:	41004000 	.word	0x41004000
   2d200:	00037779 	.word	0x00037779
   2d204:	00034945 	.word	0x00034945

0002d208 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2d208:	b580      	push	{r7, lr}
   2d20a:	af00      	add	r7, sp, #0
  __asm volatile (
   2d20c:	2004      	movs	r0, #4
   2d20e:	4671      	mov	r1, lr
   2d210:	4208      	tst	r0, r1
   2d212:	d002      	beq.n	2d21a <_MSP>
   2d214:	f3ef 8009 	mrs	r0, PSP
   2d218:	e001      	b.n	2d21e <_HALT>

0002d21a <_MSP>:
   2d21a:	f3ef 8008 	mrs	r0, MSP

0002d21e <_HALT>:
   2d21e:	6941      	ldr	r1, [r0, #20]
   2d220:	e004      	b.n	2d22c <HardFault_HandlerC>
   2d222:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2d224:	46c0      	nop			; (mov r8, r8)
   2d226:	46bd      	mov	sp, r7
   2d228:	bd80      	pop	{r7, pc}
	...

0002d22c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2d22c:	b580      	push	{r7, lr}
   2d22e:	b090      	sub	sp, #64	; 0x40
   2d230:	af00      	add	r7, sp, #0
   2d232:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2d234:	687b      	ldr	r3, [r7, #4]
   2d236:	681b      	ldr	r3, [r3, #0]
   2d238:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2d23a:	687b      	ldr	r3, [r7, #4]
   2d23c:	685b      	ldr	r3, [r3, #4]
   2d23e:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2d240:	687b      	ldr	r3, [r7, #4]
   2d242:	689b      	ldr	r3, [r3, #8]
   2d244:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2d246:	687b      	ldr	r3, [r7, #4]
   2d248:	68db      	ldr	r3, [r3, #12]
   2d24a:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2d24c:	687b      	ldr	r3, [r7, #4]
   2d24e:	691b      	ldr	r3, [r3, #16]
   2d250:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2d252:	687b      	ldr	r3, [r7, #4]
   2d254:	695b      	ldr	r3, [r3, #20]
   2d256:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2d258:	687b      	ldr	r3, [r7, #4]
   2d25a:	699b      	ldr	r3, [r3, #24]
   2d25c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2d25e:	687b      	ldr	r3, [r7, #4]
   2d260:	69db      	ldr	r3, [r3, #28]
   2d262:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2d264:	4b0b      	ldr	r3, [pc, #44]	; (2d294 <HardFault_HandlerC+0x68>)
   2d266:	681b      	ldr	r3, [r3, #0]
   2d268:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2d26a:	4b0b      	ldr	r3, [pc, #44]	; (2d298 <HardFault_HandlerC+0x6c>)
   2d26c:	681b      	ldr	r3, [r3, #0]
   2d26e:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2d270:	4b0a      	ldr	r3, [pc, #40]	; (2d29c <HardFault_HandlerC+0x70>)
   2d272:	681b      	ldr	r3, [r3, #0]
   2d274:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2d276:	4b0a      	ldr	r3, [pc, #40]	; (2d2a0 <HardFault_HandlerC+0x74>)
   2d278:	681b      	ldr	r3, [r3, #0]
   2d27a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2d27c:	4b09      	ldr	r3, [pc, #36]	; (2d2a4 <HardFault_HandlerC+0x78>)
   2d27e:	681b      	ldr	r3, [r3, #0]
   2d280:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2d282:	4b09      	ldr	r3, [pc, #36]	; (2d2a8 <HardFault_HandlerC+0x7c>)
   2d284:	681b      	ldr	r3, [r3, #0]
   2d286:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2d288:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2d28a:	46c0      	nop			; (mov r8, r8)
   2d28c:	46bd      	mov	sp, r7
   2d28e:	b010      	add	sp, #64	; 0x40
   2d290:	bd80      	pop	{r7, pc}
   2d292:	46c0      	nop			; (mov r8, r8)
   2d294:	e000ed28 	.word	0xe000ed28
   2d298:	e000ed2c 	.word	0xe000ed2c
   2d29c:	e000ed30 	.word	0xe000ed30
   2d2a0:	e000ed3c 	.word	0xe000ed3c
   2d2a4:	e000ed34 	.word	0xe000ed34
   2d2a8:	e000ed38 	.word	0xe000ed38

0002d2ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2d2ac:	b580      	push	{r7, lr}
   2d2ae:	b086      	sub	sp, #24
   2d2b0:	af00      	add	r7, sp, #0
   2d2b2:	60f8      	str	r0, [r7, #12]
   2d2b4:	60b9      	str	r1, [r7, #8]
   2d2b6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2d2b8:	2300      	movs	r3, #0
   2d2ba:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2d2bc:	68fb      	ldr	r3, [r7, #12]
   2d2be:	2b00      	cmp	r3, #0
   2d2c0:	d012      	beq.n	2d2e8 <_read+0x3c>
		return -1;
   2d2c2:	2301      	movs	r3, #1
   2d2c4:	425b      	negs	r3, r3
   2d2c6:	e013      	b.n	2d2f0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2d2c8:	4b0b      	ldr	r3, [pc, #44]	; (2d2f8 <_read+0x4c>)
   2d2ca:	681a      	ldr	r2, [r3, #0]
   2d2cc:	4b0b      	ldr	r3, [pc, #44]	; (2d2fc <_read+0x50>)
   2d2ce:	681b      	ldr	r3, [r3, #0]
   2d2d0:	68b9      	ldr	r1, [r7, #8]
   2d2d2:	0018      	movs	r0, r3
   2d2d4:	4790      	blx	r2
		ptr++;
   2d2d6:	68bb      	ldr	r3, [r7, #8]
   2d2d8:	3301      	adds	r3, #1
   2d2da:	60bb      	str	r3, [r7, #8]
		nChars++;
   2d2dc:	697b      	ldr	r3, [r7, #20]
   2d2de:	3301      	adds	r3, #1
   2d2e0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2d2e2:	687b      	ldr	r3, [r7, #4]
   2d2e4:	3b01      	subs	r3, #1
   2d2e6:	607b      	str	r3, [r7, #4]
   2d2e8:	687b      	ldr	r3, [r7, #4]
   2d2ea:	2b00      	cmp	r3, #0
   2d2ec:	dcec      	bgt.n	2d2c8 <_read+0x1c>
	}
	return nChars;
   2d2ee:	697b      	ldr	r3, [r7, #20]
}
   2d2f0:	0018      	movs	r0, r3
   2d2f2:	46bd      	mov	sp, r7
   2d2f4:	b006      	add	sp, #24
   2d2f6:	bd80      	pop	{r7, pc}
   2d2f8:	20005a88 	.word	0x20005a88
   2d2fc:	20005a90 	.word	0x20005a90

0002d300 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2d300:	b580      	push	{r7, lr}
   2d302:	b086      	sub	sp, #24
   2d304:	af00      	add	r7, sp, #0
   2d306:	60f8      	str	r0, [r7, #12]
   2d308:	60b9      	str	r1, [r7, #8]
   2d30a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2d30c:	2300      	movs	r3, #0
   2d30e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2d310:	68fb      	ldr	r3, [r7, #12]
   2d312:	2b01      	cmp	r3, #1
   2d314:	d01d      	beq.n	2d352 <_write+0x52>
   2d316:	68fb      	ldr	r3, [r7, #12]
   2d318:	2b02      	cmp	r3, #2
   2d31a:	d01a      	beq.n	2d352 <_write+0x52>
   2d31c:	68fb      	ldr	r3, [r7, #12]
   2d31e:	2b03      	cmp	r3, #3
   2d320:	d017      	beq.n	2d352 <_write+0x52>
		return -1;
   2d322:	2301      	movs	r3, #1
   2d324:	425b      	negs	r3, r3
   2d326:	e018      	b.n	2d35a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2d328:	4b0e      	ldr	r3, [pc, #56]	; (2d364 <_write+0x64>)
   2d32a:	681a      	ldr	r2, [r3, #0]
   2d32c:	4b0e      	ldr	r3, [pc, #56]	; (2d368 <_write+0x68>)
   2d32e:	6818      	ldr	r0, [r3, #0]
   2d330:	68bb      	ldr	r3, [r7, #8]
   2d332:	1c59      	adds	r1, r3, #1
   2d334:	60b9      	str	r1, [r7, #8]
   2d336:	781b      	ldrb	r3, [r3, #0]
   2d338:	0019      	movs	r1, r3
   2d33a:	4790      	blx	r2
   2d33c:	1e03      	subs	r3, r0, #0
   2d33e:	da02      	bge.n	2d346 <_write+0x46>
			return -1;
   2d340:	2301      	movs	r3, #1
   2d342:	425b      	negs	r3, r3
   2d344:	e009      	b.n	2d35a <_write+0x5a>
		}
		++nChars;
   2d346:	697b      	ldr	r3, [r7, #20]
   2d348:	3301      	adds	r3, #1
   2d34a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2d34c:	687b      	ldr	r3, [r7, #4]
   2d34e:	3b01      	subs	r3, #1
   2d350:	607b      	str	r3, [r7, #4]
   2d352:	687b      	ldr	r3, [r7, #4]
   2d354:	2b00      	cmp	r3, #0
   2d356:	d1e7      	bne.n	2d328 <_write+0x28>
	}
	return nChars;
   2d358:	697b      	ldr	r3, [r7, #20]
}
   2d35a:	0018      	movs	r0, r3
   2d35c:	46bd      	mov	sp, r7
   2d35e:	b006      	add	sp, #24
   2d360:	bd80      	pop	{r7, pc}
   2d362:	46c0      	nop			; (mov r8, r8)
   2d364:	20005a8c 	.word	0x20005a8c
   2d368:	20005a90 	.word	0x20005a90

0002d36c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2d36c:	b580      	push	{r7, lr}
   2d36e:	b084      	sub	sp, #16
   2d370:	af00      	add	r7, sp, #0
   2d372:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2d374:	4b0a      	ldr	r3, [pc, #40]	; (2d3a0 <_sbrk+0x34>)
   2d376:	681b      	ldr	r3, [r3, #0]
   2d378:	2b00      	cmp	r3, #0
   2d37a:	d102      	bne.n	2d382 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2d37c:	4b08      	ldr	r3, [pc, #32]	; (2d3a0 <_sbrk+0x34>)
   2d37e:	4a09      	ldr	r2, [pc, #36]	; (2d3a4 <_sbrk+0x38>)
   2d380:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2d382:	4b07      	ldr	r3, [pc, #28]	; (2d3a0 <_sbrk+0x34>)
   2d384:	681b      	ldr	r3, [r3, #0]
   2d386:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2d388:	4b05      	ldr	r3, [pc, #20]	; (2d3a0 <_sbrk+0x34>)
   2d38a:	681a      	ldr	r2, [r3, #0]
   2d38c:	687b      	ldr	r3, [r7, #4]
   2d38e:	18d2      	adds	r2, r2, r3
   2d390:	4b03      	ldr	r3, [pc, #12]	; (2d3a0 <_sbrk+0x34>)
   2d392:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2d394:	68fb      	ldr	r3, [r7, #12]
}
   2d396:	0018      	movs	r0, r3
   2d398:	46bd      	mov	sp, r7
   2d39a:	b004      	add	sp, #16
   2d39c:	bd80      	pop	{r7, pc}
   2d39e:	46c0      	nop			; (mov r8, r8)
   2d3a0:	20004154 	.word	0x20004154
   2d3a4:	20007af0 	.word	0x20007af0

0002d3a8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2d3a8:	b580      	push	{r7, lr}
   2d3aa:	b082      	sub	sp, #8
   2d3ac:	af00      	add	r7, sp, #0
   2d3ae:	6078      	str	r0, [r7, #4]
	return -1;
   2d3b0:	2301      	movs	r3, #1
   2d3b2:	425b      	negs	r3, r3
}
   2d3b4:	0018      	movs	r0, r3
   2d3b6:	46bd      	mov	sp, r7
   2d3b8:	b002      	add	sp, #8
   2d3ba:	bd80      	pop	{r7, pc}

0002d3bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2d3bc:	b580      	push	{r7, lr}
   2d3be:	b082      	sub	sp, #8
   2d3c0:	af00      	add	r7, sp, #0
   2d3c2:	6078      	str	r0, [r7, #4]
   2d3c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2d3c6:	683b      	ldr	r3, [r7, #0]
   2d3c8:	2280      	movs	r2, #128	; 0x80
   2d3ca:	0192      	lsls	r2, r2, #6
   2d3cc:	605a      	str	r2, [r3, #4]

	return 0;
   2d3ce:	2300      	movs	r3, #0
}
   2d3d0:	0018      	movs	r0, r3
   2d3d2:	46bd      	mov	sp, r7
   2d3d4:	b002      	add	sp, #8
   2d3d6:	bd80      	pop	{r7, pc}

0002d3d8 <_isatty>:

extern int _isatty(int file)
{
   2d3d8:	b580      	push	{r7, lr}
   2d3da:	b082      	sub	sp, #8
   2d3dc:	af00      	add	r7, sp, #0
   2d3de:	6078      	str	r0, [r7, #4]
	return 1;
   2d3e0:	2301      	movs	r3, #1
}
   2d3e2:	0018      	movs	r0, r3
   2d3e4:	46bd      	mov	sp, r7
   2d3e6:	b002      	add	sp, #8
   2d3e8:	bd80      	pop	{r7, pc}

0002d3ea <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2d3ea:	b580      	push	{r7, lr}
   2d3ec:	b084      	sub	sp, #16
   2d3ee:	af00      	add	r7, sp, #0
   2d3f0:	60f8      	str	r0, [r7, #12]
   2d3f2:	60b9      	str	r1, [r7, #8]
   2d3f4:	607a      	str	r2, [r7, #4]
	return 0;
   2d3f6:	2300      	movs	r3, #0
}
   2d3f8:	0018      	movs	r0, r3
   2d3fa:	46bd      	mov	sp, r7
   2d3fc:	b004      	add	sp, #16
   2d3fe:	bd80      	pop	{r7, pc}

0002d400 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2d400:	b580      	push	{r7, lr}
   2d402:	b082      	sub	sp, #8
   2d404:	af00      	add	r7, sp, #0
   2d406:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2d408:	687b      	ldr	r3, [r7, #4]
   2d40a:	2200      	movs	r2, #0
   2d40c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2d40e:	687b      	ldr	r3, [r7, #4]
   2d410:	2200      	movs	r2, #0
   2d412:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2d414:	687b      	ldr	r3, [r7, #4]
   2d416:	2200      	movs	r2, #0
   2d418:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2d41a:	687b      	ldr	r3, [r7, #4]
   2d41c:	2200      	movs	r2, #0
   2d41e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2d420:	687b      	ldr	r3, [r7, #4]
   2d422:	2201      	movs	r2, #1
   2d424:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2d426:	687b      	ldr	r3, [r7, #4]
   2d428:	2201      	movs	r2, #1
   2d42a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2d42c:	687b      	ldr	r3, [r7, #4]
   2d42e:	22fa      	movs	r2, #250	; 0xfa
   2d430:	00d2      	lsls	r2, r2, #3
   2d432:	80da      	strh	r2, [r3, #6]
}
   2d434:	46c0      	nop			; (mov r8, r8)
   2d436:	46bd      	mov	sp, r7
   2d438:	b002      	add	sp, #8
   2d43a:	bd80      	pop	{r7, pc}

0002d43c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2d43c:	b580      	push	{r7, lr}
   2d43e:	b086      	sub	sp, #24
   2d440:	af00      	add	r7, sp, #0
   2d442:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2d444:	230c      	movs	r3, #12
   2d446:	18fb      	adds	r3, r7, r3
   2d448:	0018      	movs	r0, r3
   2d44a:	4b23      	ldr	r3, [pc, #140]	; (2d4d8 <rtc_calendar_get_config_defaults+0x9c>)
   2d44c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2d44e:	687b      	ldr	r3, [r7, #4]
   2d450:	22a0      	movs	r2, #160	; 0xa0
   2d452:	0112      	lsls	r2, r2, #4
   2d454:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2d456:	687b      	ldr	r3, [r7, #4]
   2d458:	2200      	movs	r2, #0
   2d45a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2d45c:	687b      	ldr	r3, [r7, #4]
   2d45e:	2200      	movs	r2, #0
   2d460:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2d462:	687b      	ldr	r3, [r7, #4]
   2d464:	2200      	movs	r2, #0
   2d466:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2d468:	687b      	ldr	r3, [r7, #4]
   2d46a:	22fa      	movs	r2, #250	; 0xfa
   2d46c:	00d2      	lsls	r2, r2, #3
   2d46e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d470:	2317      	movs	r3, #23
   2d472:	18fb      	adds	r3, r7, r3
   2d474:	2200      	movs	r2, #0
   2d476:	701a      	strb	r2, [r3, #0]
   2d478:	e025      	b.n	2d4c6 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2d47a:	2317      	movs	r3, #23
   2d47c:	18fb      	adds	r3, r7, r3
   2d47e:	781a      	ldrb	r2, [r3, #0]
   2d480:	6879      	ldr	r1, [r7, #4]
   2d482:	2008      	movs	r0, #8
   2d484:	0013      	movs	r3, r2
   2d486:	009b      	lsls	r3, r3, #2
   2d488:	189b      	adds	r3, r3, r2
   2d48a:	005b      	lsls	r3, r3, #1
   2d48c:	18cb      	adds	r3, r1, r3
   2d48e:	181a      	adds	r2, r3, r0
   2d490:	230c      	movs	r3, #12
   2d492:	18fb      	adds	r3, r7, r3
   2d494:	0010      	movs	r0, r2
   2d496:	0019      	movs	r1, r3
   2d498:	2308      	movs	r3, #8
   2d49a:	001a      	movs	r2, r3
   2d49c:	4b0f      	ldr	r3, [pc, #60]	; (2d4dc <rtc_calendar_get_config_defaults+0xa0>)
   2d49e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d4a0:	2317      	movs	r3, #23
   2d4a2:	18fb      	adds	r3, r7, r3
   2d4a4:	781a      	ldrb	r2, [r3, #0]
   2d4a6:	6879      	ldr	r1, [r7, #4]
   2d4a8:	0013      	movs	r3, r2
   2d4aa:	009b      	lsls	r3, r3, #2
   2d4ac:	189b      	adds	r3, r3, r2
   2d4ae:	005b      	lsls	r3, r3, #1
   2d4b0:	18cb      	adds	r3, r1, r3
   2d4b2:	3310      	adds	r3, #16
   2d4b4:	2206      	movs	r2, #6
   2d4b6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d4b8:	2317      	movs	r3, #23
   2d4ba:	18fb      	adds	r3, r7, r3
   2d4bc:	781a      	ldrb	r2, [r3, #0]
   2d4be:	2317      	movs	r3, #23
   2d4c0:	18fb      	adds	r3, r7, r3
   2d4c2:	3201      	adds	r2, #1
   2d4c4:	701a      	strb	r2, [r3, #0]
   2d4c6:	2317      	movs	r3, #23
   2d4c8:	18fb      	adds	r3, r7, r3
   2d4ca:	781b      	ldrb	r3, [r3, #0]
   2d4cc:	2b00      	cmp	r3, #0
   2d4ce:	d0d4      	beq.n	2d47a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2d4d0:	46c0      	nop			; (mov r8, r8)
   2d4d2:	46bd      	mov	sp, r7
   2d4d4:	b006      	add	sp, #24
   2d4d6:	bd80      	pop	{r7, pc}
   2d4d8:	0002d401 	.word	0x0002d401
   2d4dc:	000377e9 	.word	0x000377e9

0002d4e0 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2d4e0:	b580      	push	{r7, lr}
   2d4e2:	b088      	sub	sp, #32
   2d4e4:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2d4e6:	230c      	movs	r3, #12
   2d4e8:	18fb      	adds	r3, r7, r3
   2d4ea:	0018      	movs	r0, r3
   2d4ec:	4b1a      	ldr	r3, [pc, #104]	; (2d558 <configure_rtc_calendar+0x78>)
   2d4ee:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2d4f0:	1d3b      	adds	r3, r7, #4
   2d4f2:	0018      	movs	r0, r3
   2d4f4:	4b19      	ldr	r3, [pc, #100]	; (2d55c <configure_rtc_calendar+0x7c>)
   2d4f6:	4798      	blx	r3
	init_time.year   = 2014;
   2d4f8:	1d3b      	adds	r3, r7, #4
   2d4fa:	4a19      	ldr	r2, [pc, #100]	; (2d560 <configure_rtc_calendar+0x80>)
   2d4fc:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2d4fe:	1d3b      	adds	r3, r7, #4
   2d500:	2201      	movs	r2, #1
   2d502:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2d504:	1d3b      	adds	r3, r7, #4
   2d506:	2201      	movs	r2, #1
   2d508:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2d50a:	1d3b      	adds	r3, r7, #4
   2d50c:	2200      	movs	r2, #0
   2d50e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2d510:	1d3b      	adds	r3, r7, #4
   2d512:	2200      	movs	r2, #0
   2d514:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2d516:	1d3b      	adds	r3, r7, #4
   2d518:	2204      	movs	r2, #4
   2d51a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2d51c:	230c      	movs	r3, #12
   2d51e:	18fb      	adds	r3, r7, r3
   2d520:	2201      	movs	r2, #1
   2d522:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2d524:	230c      	movs	r3, #12
   2d526:	18fb      	adds	r3, r7, r3
   2d528:	1d3a      	adds	r2, r7, #4
   2d52a:	3308      	adds	r3, #8
   2d52c:	ca03      	ldmia	r2!, {r0, r1}
   2d52e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d530:	230c      	movs	r3, #12
   2d532:	18fb      	adds	r3, r7, r3
   2d534:	2206      	movs	r2, #6
   2d536:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2d538:	230c      	movs	r3, #12
   2d53a:	18fa      	adds	r2, r7, r3
   2d53c:	4909      	ldr	r1, [pc, #36]	; (2d564 <configure_rtc_calendar+0x84>)
   2d53e:	4b0a      	ldr	r3, [pc, #40]	; (2d568 <configure_rtc_calendar+0x88>)
   2d540:	0018      	movs	r0, r3
   2d542:	4b0a      	ldr	r3, [pc, #40]	; (2d56c <configure_rtc_calendar+0x8c>)
   2d544:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2d546:	4b08      	ldr	r3, [pc, #32]	; (2d568 <configure_rtc_calendar+0x88>)
   2d548:	0018      	movs	r0, r3
   2d54a:	4b09      	ldr	r3, [pc, #36]	; (2d570 <configure_rtc_calendar+0x90>)
   2d54c:	4798      	blx	r3
}
   2d54e:	46c0      	nop			; (mov r8, r8)
   2d550:	46bd      	mov	sp, r7
   2d552:	b008      	add	sp, #32
   2d554:	bd80      	pop	{r7, pc}
   2d556:	46c0      	nop			; (mov r8, r8)
   2d558:	0002d43d 	.word	0x0002d43d
   2d55c:	0002d401 	.word	0x0002d401
   2d560:	000007de 	.word	0x000007de
   2d564:	40001400 	.word	0x40001400
   2d568:	20005a94 	.word	0x20005a94
   2d56c:	00028fc1 	.word	0x00028fc1
   2d570:	00028ced 	.word	0x00028ced

0002d574 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2d574:	b590      	push	{r4, r7, lr}
   2d576:	b085      	sub	sp, #20
   2d578:	af00      	add	r7, sp, #0
   2d57a:	0002      	movs	r2, r0
   2d57c:	1dfb      	adds	r3, r7, #7
   2d57e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2d580:	4b1a      	ldr	r3, [pc, #104]	; (2d5ec <disk_initialize+0x78>)
   2d582:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2d584:	1dfb      	adds	r3, r7, #7
   2d586:	781b      	ldrb	r3, [r3, #0]
   2d588:	2b01      	cmp	r3, #1
   2d58a:	d901      	bls.n	2d590 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2d58c:	2301      	movs	r3, #1
   2d58e:	e029      	b.n	2d5e4 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2d590:	2300      	movs	r3, #0
   2d592:	60fb      	str	r3, [r7, #12]
   2d594:	e010      	b.n	2d5b8 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2d596:	230b      	movs	r3, #11
   2d598:	18fc      	adds	r4, r7, r3
   2d59a:	1dfb      	adds	r3, r7, #7
   2d59c:	781b      	ldrb	r3, [r3, #0]
   2d59e:	0018      	movs	r0, r3
   2d5a0:	4b13      	ldr	r3, [pc, #76]	; (2d5f0 <disk_initialize+0x7c>)
   2d5a2:	4798      	blx	r3
   2d5a4:	0003      	movs	r3, r0
   2d5a6:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2d5a8:	230b      	movs	r3, #11
   2d5aa:	18fb      	adds	r3, r7, r3
   2d5ac:	781b      	ldrb	r3, [r3, #0]
   2d5ae:	2b03      	cmp	r3, #3
   2d5b0:	d106      	bne.n	2d5c0 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2d5b2:	68fb      	ldr	r3, [r7, #12]
   2d5b4:	3301      	adds	r3, #1
   2d5b6:	60fb      	str	r3, [r7, #12]
   2d5b8:	68fb      	ldr	r3, [r7, #12]
   2d5ba:	2b01      	cmp	r3, #1
   2d5bc:	ddeb      	ble.n	2d596 <disk_initialize+0x22>
   2d5be:	e000      	b.n	2d5c2 <disk_initialize+0x4e>
			break;
   2d5c0:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2d5c2:	230b      	movs	r3, #11
   2d5c4:	18fb      	adds	r3, r7, r3
   2d5c6:	781b      	ldrb	r3, [r3, #0]
   2d5c8:	2b00      	cmp	r3, #0
   2d5ca:	d001      	beq.n	2d5d0 <disk_initialize+0x5c>
		return STA_NOINIT;
   2d5cc:	2301      	movs	r3, #1
   2d5ce:	e009      	b.n	2d5e4 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2d5d0:	1dfb      	adds	r3, r7, #7
   2d5d2:	781b      	ldrb	r3, [r3, #0]
   2d5d4:	0018      	movs	r0, r3
   2d5d6:	4b07      	ldr	r3, [pc, #28]	; (2d5f4 <disk_initialize+0x80>)
   2d5d8:	4798      	blx	r3
   2d5da:	1e03      	subs	r3, r0, #0
   2d5dc:	d001      	beq.n	2d5e2 <disk_initialize+0x6e>
		return STA_PROTECT;
   2d5de:	2304      	movs	r3, #4
   2d5e0:	e000      	b.n	2d5e4 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2d5e2:	2300      	movs	r3, #0
}
   2d5e4:	0018      	movs	r0, r3
   2d5e6:	46bd      	mov	sp, r7
   2d5e8:	b005      	add	sp, #20
   2d5ea:	bd90      	pop	{r4, r7, pc}
   2d5ec:	0002d4e1 	.word	0x0002d4e1
   2d5f0:	000281e9 	.word	0x000281e9
   2d5f4:	000282a1 	.word	0x000282a1

0002d5f8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2d5f8:	b580      	push	{r7, lr}
   2d5fa:	b082      	sub	sp, #8
   2d5fc:	af00      	add	r7, sp, #0
   2d5fe:	0002      	movs	r2, r0
   2d600:	1dfb      	adds	r3, r7, #7
   2d602:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2d604:	1dfb      	adds	r3, r7, #7
   2d606:	781b      	ldrb	r3, [r3, #0]
   2d608:	0018      	movs	r0, r3
   2d60a:	4b08      	ldr	r3, [pc, #32]	; (2d62c <disk_status+0x34>)
   2d60c:	4798      	blx	r3
   2d60e:	1e03      	subs	r3, r0, #0
   2d610:	d002      	beq.n	2d618 <disk_status+0x20>
   2d612:	2b02      	cmp	r3, #2
   2d614:	d002      	beq.n	2d61c <disk_status+0x24>
   2d616:	e003      	b.n	2d620 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2d618:	2300      	movs	r3, #0
   2d61a:	e002      	b.n	2d622 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2d61c:	2303      	movs	r3, #3
   2d61e:	e000      	b.n	2d622 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2d620:	2301      	movs	r3, #1
	}
}
   2d622:	0018      	movs	r0, r3
   2d624:	46bd      	mov	sp, r7
   2d626:	b002      	add	sp, #8
   2d628:	bd80      	pop	{r7, pc}
   2d62a:	46c0      	nop			; (mov r8, r8)
   2d62c:	000281e9 	.word	0x000281e9

0002d630 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2d630:	b590      	push	{r4, r7, lr}
   2d632:	b089      	sub	sp, #36	; 0x24
   2d634:	af00      	add	r7, sp, #0
   2d636:	60b9      	str	r1, [r7, #8]
   2d638:	607a      	str	r2, [r7, #4]
   2d63a:	0019      	movs	r1, r3
   2d63c:	230f      	movs	r3, #15
   2d63e:	18fb      	adds	r3, r7, r3
   2d640:	1c02      	adds	r2, r0, #0
   2d642:	701a      	strb	r2, [r3, #0]
   2d644:	230e      	movs	r3, #14
   2d646:	18fb      	adds	r3, r7, r3
   2d648:	1c0a      	adds	r2, r1, #0
   2d64a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d64c:	231b      	movs	r3, #27
   2d64e:	18fc      	adds	r4, r7, r3
   2d650:	230f      	movs	r3, #15
   2d652:	18fb      	adds	r3, r7, r3
   2d654:	781b      	ldrb	r3, [r3, #0]
   2d656:	0018      	movs	r0, r3
   2d658:	4b28      	ldr	r3, [pc, #160]	; (2d6fc <disk_read+0xcc>)
   2d65a:	4798      	blx	r3
   2d65c:	0003      	movs	r3, r0
   2d65e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d660:	231b      	movs	r3, #27
   2d662:	18fb      	adds	r3, r7, r3
   2d664:	781b      	ldrb	r3, [r3, #0]
   2d666:	2b00      	cmp	r3, #0
   2d668:	d101      	bne.n	2d66e <disk_read+0x3e>
		return RES_ERROR;
   2d66a:	2301      	movs	r3, #1
   2d66c:	e042      	b.n	2d6f4 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d66e:	2314      	movs	r3, #20
   2d670:	18fa      	adds	r2, r7, r3
   2d672:	230f      	movs	r3, #15
   2d674:	18fb      	adds	r3, r7, r3
   2d676:	781b      	ldrb	r3, [r3, #0]
   2d678:	0011      	movs	r1, r2
   2d67a:	0018      	movs	r0, r3
   2d67c:	4b20      	ldr	r3, [pc, #128]	; (2d700 <disk_read+0xd0>)
   2d67e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d680:	230e      	movs	r3, #14
   2d682:	18fb      	adds	r3, r7, r3
   2d684:	781b      	ldrb	r3, [r3, #0]
   2d686:	221b      	movs	r2, #27
   2d688:	18ba      	adds	r2, r7, r2
   2d68a:	7812      	ldrb	r2, [r2, #0]
   2d68c:	4353      	muls	r3, r2
   2d68e:	001a      	movs	r2, r3
   2d690:	687b      	ldr	r3, [r7, #4]
   2d692:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d694:	697b      	ldr	r3, [r7, #20]
   2d696:	3301      	adds	r3, #1
   2d698:	211b      	movs	r1, #27
   2d69a:	1879      	adds	r1, r7, r1
   2d69c:	7809      	ldrb	r1, [r1, #0]
   2d69e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d6a0:	429a      	cmp	r2, r3
   2d6a2:	d901      	bls.n	2d6a8 <disk_read+0x78>
		return RES_PARERR;
   2d6a4:	2304      	movs	r3, #4
   2d6a6:	e025      	b.n	2d6f4 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2d6a8:	2300      	movs	r3, #0
   2d6aa:	61fb      	str	r3, [r7, #28]
   2d6ac:	e01b      	b.n	2d6e6 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d6ae:	231b      	movs	r3, #27
   2d6b0:	18fb      	adds	r3, r7, r3
   2d6b2:	781b      	ldrb	r3, [r3, #0]
   2d6b4:	69fa      	ldr	r2, [r7, #28]
   2d6b6:	435a      	muls	r2, r3
   2d6b8:	687b      	ldr	r3, [r7, #4]
   2d6ba:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d6bc:	231b      	movs	r3, #27
   2d6be:	18fb      	adds	r3, r7, r3
   2d6c0:	781b      	ldrb	r3, [r3, #0]
   2d6c2:	69fa      	ldr	r2, [r7, #28]
   2d6c4:	4353      	muls	r3, r2
   2d6c6:	025b      	lsls	r3, r3, #9
   2d6c8:	68ba      	ldr	r2, [r7, #8]
   2d6ca:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d6cc:	230f      	movs	r3, #15
   2d6ce:	18fb      	adds	r3, r7, r3
   2d6d0:	781b      	ldrb	r3, [r3, #0]
   2d6d2:	0018      	movs	r0, r3
   2d6d4:	4b0b      	ldr	r3, [pc, #44]	; (2d704 <disk_read+0xd4>)
   2d6d6:	4798      	blx	r3
   2d6d8:	1e03      	subs	r3, r0, #0
   2d6da:	d001      	beq.n	2d6e0 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d6dc:	2301      	movs	r3, #1
   2d6de:	e009      	b.n	2d6f4 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2d6e0:	69fb      	ldr	r3, [r7, #28]
   2d6e2:	3301      	adds	r3, #1
   2d6e4:	61fb      	str	r3, [r7, #28]
   2d6e6:	230e      	movs	r3, #14
   2d6e8:	18fb      	adds	r3, r7, r3
   2d6ea:	781a      	ldrb	r2, [r3, #0]
   2d6ec:	69fb      	ldr	r3, [r7, #28]
   2d6ee:	429a      	cmp	r2, r3
   2d6f0:	d8dd      	bhi.n	2d6ae <disk_read+0x7e>
		}
	}

	return RES_OK;
   2d6f2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2d6f4:	0018      	movs	r0, r3
   2d6f6:	46bd      	mov	sp, r7
   2d6f8:	b009      	add	sp, #36	; 0x24
   2d6fa:	bd90      	pop	{r4, r7, pc}
   2d6fc:	00028275 	.word	0x00028275
   2d700:	00028229 	.word	0x00028229
   2d704:	000282e9 	.word	0x000282e9

0002d708 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2d708:	b590      	push	{r4, r7, lr}
   2d70a:	b089      	sub	sp, #36	; 0x24
   2d70c:	af00      	add	r7, sp, #0
   2d70e:	60b9      	str	r1, [r7, #8]
   2d710:	607a      	str	r2, [r7, #4]
   2d712:	0019      	movs	r1, r3
   2d714:	230f      	movs	r3, #15
   2d716:	18fb      	adds	r3, r7, r3
   2d718:	1c02      	adds	r2, r0, #0
   2d71a:	701a      	strb	r2, [r3, #0]
   2d71c:	230e      	movs	r3, #14
   2d71e:	18fb      	adds	r3, r7, r3
   2d720:	1c0a      	adds	r2, r1, #0
   2d722:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d724:	231b      	movs	r3, #27
   2d726:	18fc      	adds	r4, r7, r3
   2d728:	230f      	movs	r3, #15
   2d72a:	18fb      	adds	r3, r7, r3
   2d72c:	781b      	ldrb	r3, [r3, #0]
   2d72e:	0018      	movs	r0, r3
   2d730:	4b28      	ldr	r3, [pc, #160]	; (2d7d4 <disk_write+0xcc>)
   2d732:	4798      	blx	r3
   2d734:	0003      	movs	r3, r0
   2d736:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d738:	231b      	movs	r3, #27
   2d73a:	18fb      	adds	r3, r7, r3
   2d73c:	781b      	ldrb	r3, [r3, #0]
   2d73e:	2b00      	cmp	r3, #0
   2d740:	d101      	bne.n	2d746 <disk_write+0x3e>
		return RES_ERROR;
   2d742:	2301      	movs	r3, #1
   2d744:	e042      	b.n	2d7cc <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d746:	2314      	movs	r3, #20
   2d748:	18fa      	adds	r2, r7, r3
   2d74a:	230f      	movs	r3, #15
   2d74c:	18fb      	adds	r3, r7, r3
   2d74e:	781b      	ldrb	r3, [r3, #0]
   2d750:	0011      	movs	r1, r2
   2d752:	0018      	movs	r0, r3
   2d754:	4b20      	ldr	r3, [pc, #128]	; (2d7d8 <disk_write+0xd0>)
   2d756:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d758:	230e      	movs	r3, #14
   2d75a:	18fb      	adds	r3, r7, r3
   2d75c:	781b      	ldrb	r3, [r3, #0]
   2d75e:	221b      	movs	r2, #27
   2d760:	18ba      	adds	r2, r7, r2
   2d762:	7812      	ldrb	r2, [r2, #0]
   2d764:	4353      	muls	r3, r2
   2d766:	001a      	movs	r2, r3
   2d768:	687b      	ldr	r3, [r7, #4]
   2d76a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d76c:	697b      	ldr	r3, [r7, #20]
   2d76e:	3301      	adds	r3, #1
   2d770:	211b      	movs	r1, #27
   2d772:	1879      	adds	r1, r7, r1
   2d774:	7809      	ldrb	r1, [r1, #0]
   2d776:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d778:	429a      	cmp	r2, r3
   2d77a:	d901      	bls.n	2d780 <disk_write+0x78>
		return RES_PARERR;
   2d77c:	2304      	movs	r3, #4
   2d77e:	e025      	b.n	2d7cc <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2d780:	2300      	movs	r3, #0
   2d782:	61fb      	str	r3, [r7, #28]
   2d784:	e01b      	b.n	2d7be <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d786:	231b      	movs	r3, #27
   2d788:	18fb      	adds	r3, r7, r3
   2d78a:	781b      	ldrb	r3, [r3, #0]
   2d78c:	69fa      	ldr	r2, [r7, #28]
   2d78e:	435a      	muls	r2, r3
   2d790:	687b      	ldr	r3, [r7, #4]
   2d792:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d794:	231b      	movs	r3, #27
   2d796:	18fb      	adds	r3, r7, r3
   2d798:	781b      	ldrb	r3, [r3, #0]
   2d79a:	69fa      	ldr	r2, [r7, #28]
   2d79c:	4353      	muls	r3, r2
   2d79e:	025b      	lsls	r3, r3, #9
   2d7a0:	68ba      	ldr	r2, [r7, #8]
   2d7a2:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d7a4:	230f      	movs	r3, #15
   2d7a6:	18fb      	adds	r3, r7, r3
   2d7a8:	781b      	ldrb	r3, [r3, #0]
   2d7aa:	0018      	movs	r0, r3
   2d7ac:	4b0b      	ldr	r3, [pc, #44]	; (2d7dc <disk_write+0xd4>)
   2d7ae:	4798      	blx	r3
   2d7b0:	1e03      	subs	r3, r0, #0
   2d7b2:	d001      	beq.n	2d7b8 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d7b4:	2301      	movs	r3, #1
   2d7b6:	e009      	b.n	2d7cc <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2d7b8:	69fb      	ldr	r3, [r7, #28]
   2d7ba:	3301      	adds	r3, #1
   2d7bc:	61fb      	str	r3, [r7, #28]
   2d7be:	230e      	movs	r3, #14
   2d7c0:	18fb      	adds	r3, r7, r3
   2d7c2:	781a      	ldrb	r2, [r3, #0]
   2d7c4:	69fb      	ldr	r3, [r7, #28]
   2d7c6:	429a      	cmp	r2, r3
   2d7c8:	d8dd      	bhi.n	2d786 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2d7ca:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2d7cc:	0018      	movs	r0, r3
   2d7ce:	46bd      	mov	sp, r7
   2d7d0:	b009      	add	sp, #36	; 0x24
   2d7d2:	bd90      	pop	{r4, r7, pc}
   2d7d4:	00028275 	.word	0x00028275
   2d7d8:	00028229 	.word	0x00028229
   2d7dc:	0002833d 	.word	0x0002833d

0002d7e0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2d7e0:	b590      	push	{r4, r7, lr}
   2d7e2:	b085      	sub	sp, #20
   2d7e4:	af00      	add	r7, sp, #0
   2d7e6:	603a      	str	r2, [r7, #0]
   2d7e8:	1dfb      	adds	r3, r7, #7
   2d7ea:	1c02      	adds	r2, r0, #0
   2d7ec:	701a      	strb	r2, [r3, #0]
   2d7ee:	1dbb      	adds	r3, r7, #6
   2d7f0:	1c0a      	adds	r2, r1, #0
   2d7f2:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2d7f4:	230f      	movs	r3, #15
   2d7f6:	18fb      	adds	r3, r7, r3
   2d7f8:	2204      	movs	r2, #4
   2d7fa:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2d7fc:	1dbb      	adds	r3, r7, #6
   2d7fe:	781b      	ldrb	r3, [r3, #0]
   2d800:	2b01      	cmp	r3, #1
   2d802:	d00f      	beq.n	2d824 <disk_ioctl+0x44>
   2d804:	dc02      	bgt.n	2d80c <disk_ioctl+0x2c>
   2d806:	2b00      	cmp	r3, #0
   2d808:	d044      	beq.n	2d894 <disk_ioctl+0xb4>
   2d80a:	e054      	b.n	2d8b6 <disk_ioctl+0xd6>
   2d80c:	2b02      	cmp	r3, #2
   2d80e:	d01a      	beq.n	2d846 <disk_ioctl+0x66>
   2d810:	2b03      	cmp	r3, #3
   2d812:	d150      	bne.n	2d8b6 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2d814:	683b      	ldr	r3, [r7, #0]
   2d816:	2201      	movs	r2, #1
   2d818:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2d81a:	230f      	movs	r3, #15
   2d81c:	18fb      	adds	r3, r7, r3
   2d81e:	2200      	movs	r2, #0
   2d820:	701a      	strb	r2, [r3, #0]
		break;
   2d822:	e04c      	b.n	2d8be <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2d824:	2308      	movs	r3, #8
   2d826:	18fa      	adds	r2, r7, r3
   2d828:	1dfb      	adds	r3, r7, #7
   2d82a:	781b      	ldrb	r3, [r3, #0]
   2d82c:	0011      	movs	r1, r2
   2d82e:	0018      	movs	r0, r3
   2d830:	4b26      	ldr	r3, [pc, #152]	; (2d8cc <disk_ioctl+0xec>)
   2d832:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2d834:	68bb      	ldr	r3, [r7, #8]
   2d836:	1c5a      	adds	r2, r3, #1
   2d838:	683b      	ldr	r3, [r7, #0]
   2d83a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2d83c:	230f      	movs	r3, #15
   2d83e:	18fb      	adds	r3, r7, r3
   2d840:	2200      	movs	r2, #0
   2d842:	701a      	strb	r2, [r3, #0]
	}
	break;
   2d844:	e03b      	b.n	2d8be <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2d846:	230e      	movs	r3, #14
   2d848:	18fc      	adds	r4, r7, r3
   2d84a:	1dfb      	adds	r3, r7, #7
   2d84c:	781b      	ldrb	r3, [r3, #0]
   2d84e:	0018      	movs	r0, r3
   2d850:	4b1f      	ldr	r3, [pc, #124]	; (2d8d0 <disk_ioctl+0xf0>)
   2d852:	4798      	blx	r3
   2d854:	0003      	movs	r3, r0
   2d856:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2d858:	230e      	movs	r3, #14
   2d85a:	18fb      	adds	r3, r7, r3
   2d85c:	781b      	ldrb	r3, [r3, #0]
   2d85e:	2b01      	cmp	r3, #1
   2d860:	d010      	beq.n	2d884 <disk_ioctl+0xa4>
   2d862:	230e      	movs	r3, #14
   2d864:	18fb      	adds	r3, r7, r3
   2d866:	781b      	ldrb	r3, [r3, #0]
   2d868:	2b02      	cmp	r3, #2
   2d86a:	d00b      	beq.n	2d884 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2d86c:	230e      	movs	r3, #14
   2d86e:	18fb      	adds	r3, r7, r3
   2d870:	781b      	ldrb	r3, [r3, #0]
   2d872:	2b04      	cmp	r3, #4
   2d874:	d006      	beq.n	2d884 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2d876:	230e      	movs	r3, #14
   2d878:	18fb      	adds	r3, r7, r3
   2d87a:	781b      	ldrb	r3, [r3, #0]
   2d87c:	2b08      	cmp	r3, #8
   2d87e:	d001      	beq.n	2d884 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2d880:	2301      	movs	r3, #1
   2d882:	e01f      	b.n	2d8c4 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2d884:	683b      	ldr	r3, [r7, #0]
   2d886:	2200      	movs	r2, #0
   2d888:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2d88a:	230f      	movs	r3, #15
   2d88c:	18fb      	adds	r3, r7, r3
   2d88e:	2200      	movs	r2, #0
   2d890:	701a      	strb	r2, [r3, #0]
	}
	break;
   2d892:	e014      	b.n	2d8be <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2d894:	1dfb      	adds	r3, r7, #7
   2d896:	781b      	ldrb	r3, [r3, #0]
   2d898:	0018      	movs	r0, r3
   2d89a:	4b0e      	ldr	r3, [pc, #56]	; (2d8d4 <disk_ioctl+0xf4>)
   2d89c:	4798      	blx	r3
   2d89e:	1e03      	subs	r3, r0, #0
   2d8a0:	d104      	bne.n	2d8ac <disk_ioctl+0xcc>
			res = RES_OK;
   2d8a2:	230f      	movs	r3, #15
   2d8a4:	18fb      	adds	r3, r7, r3
   2d8a6:	2200      	movs	r2, #0
   2d8a8:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2d8aa:	e008      	b.n	2d8be <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2d8ac:	230f      	movs	r3, #15
   2d8ae:	18fb      	adds	r3, r7, r3
   2d8b0:	2203      	movs	r2, #3
   2d8b2:	701a      	strb	r2, [r3, #0]
		break;
   2d8b4:	e003      	b.n	2d8be <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2d8b6:	230f      	movs	r3, #15
   2d8b8:	18fb      	adds	r3, r7, r3
   2d8ba:	2204      	movs	r2, #4
   2d8bc:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2d8be:	230f      	movs	r3, #15
   2d8c0:	18fb      	adds	r3, r7, r3
   2d8c2:	781b      	ldrb	r3, [r3, #0]
}
   2d8c4:	0018      	movs	r0, r3
   2d8c6:	46bd      	mov	sp, r7
   2d8c8:	b005      	add	sp, #20
   2d8ca:	bd90      	pop	{r4, r7, pc}
   2d8cc:	00028229 	.word	0x00028229
   2d8d0:	00028275 	.word	0x00028275
   2d8d4:	000281e9 	.word	0x000281e9

0002d8d8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2d8d8:	b580      	push	{r7, lr}
   2d8da:	b084      	sub	sp, #16
   2d8dc:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2d8de:	1d3a      	adds	r2, r7, #4
   2d8e0:	4b12      	ldr	r3, [pc, #72]	; (2d92c <get_fattime+0x54>)
   2d8e2:	0011      	movs	r1, r2
   2d8e4:	0018      	movs	r0, r3
   2d8e6:	4b12      	ldr	r3, [pc, #72]	; (2d930 <get_fattime+0x58>)
   2d8e8:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2d8ea:	1d3b      	adds	r3, r7, #4
   2d8ec:	88db      	ldrh	r3, [r3, #6]
   2d8ee:	4a11      	ldr	r2, [pc, #68]	; (2d934 <get_fattime+0x5c>)
   2d8f0:	4694      	mov	ip, r2
   2d8f2:	4463      	add	r3, ip
   2d8f4:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2d8f6:	1d3b      	adds	r3, r7, #4
   2d8f8:	795b      	ldrb	r3, [r3, #5]
   2d8fa:	055b      	lsls	r3, r3, #21
   2d8fc:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2d8fe:	1d3b      	adds	r3, r7, #4
   2d900:	791b      	ldrb	r3, [r3, #4]
   2d902:	041b      	lsls	r3, r3, #16
   2d904:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2d906:	1d3b      	adds	r3, r7, #4
   2d908:	789b      	ldrb	r3, [r3, #2]
   2d90a:	02db      	lsls	r3, r3, #11
   2d90c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2d90e:	1d3b      	adds	r3, r7, #4
   2d910:	785b      	ldrb	r3, [r3, #1]
   2d912:	015b      	lsls	r3, r3, #5
   2d914:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2d916:	1d3a      	adds	r2, r7, #4
   2d918:	7812      	ldrb	r2, [r2, #0]
   2d91a:	0852      	lsrs	r2, r2, #1
   2d91c:	b2d2      	uxtb	r2, r2
   2d91e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2d920:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2d922:	68fb      	ldr	r3, [r7, #12]
}
   2d924:	0018      	movs	r0, r3
   2d926:	46bd      	mov	sp, r7
   2d928:	b004      	add	sp, #16
   2d92a:	bd80      	pop	{r7, pc}
   2d92c:	20005a94 	.word	0x20005a94
   2d930:	00029055 	.word	0x00029055
   2d934:	fffff844 	.word	0xfffff844

0002d938 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2d938:	b580      	push	{r7, lr}
   2d93a:	b086      	sub	sp, #24
   2d93c:	af00      	add	r7, sp, #0
   2d93e:	60f8      	str	r0, [r7, #12]
   2d940:	60b9      	str	r1, [r7, #8]
   2d942:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2d944:	68fb      	ldr	r3, [r7, #12]
   2d946:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2d948:	68bb      	ldr	r3, [r7, #8]
   2d94a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2d94c:	e007      	b.n	2d95e <mem_cpy+0x26>
		*d++ = *s++;
   2d94e:	697b      	ldr	r3, [r7, #20]
   2d950:	1c5a      	adds	r2, r3, #1
   2d952:	617a      	str	r2, [r7, #20]
   2d954:	693a      	ldr	r2, [r7, #16]
   2d956:	1c51      	adds	r1, r2, #1
   2d958:	6139      	str	r1, [r7, #16]
   2d95a:	7812      	ldrb	r2, [r2, #0]
   2d95c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2d95e:	687b      	ldr	r3, [r7, #4]
   2d960:	1e5a      	subs	r2, r3, #1
   2d962:	607a      	str	r2, [r7, #4]
   2d964:	2b00      	cmp	r3, #0
   2d966:	d1f2      	bne.n	2d94e <mem_cpy+0x16>
}
   2d968:	46c0      	nop			; (mov r8, r8)
   2d96a:	46bd      	mov	sp, r7
   2d96c:	b006      	add	sp, #24
   2d96e:	bd80      	pop	{r7, pc}

0002d970 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2d970:	b580      	push	{r7, lr}
   2d972:	b086      	sub	sp, #24
   2d974:	af00      	add	r7, sp, #0
   2d976:	60f8      	str	r0, [r7, #12]
   2d978:	60b9      	str	r1, [r7, #8]
   2d97a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2d97c:	68fb      	ldr	r3, [r7, #12]
   2d97e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2d980:	e005      	b.n	2d98e <mem_set+0x1e>
		*d++ = (BYTE)val;
   2d982:	697b      	ldr	r3, [r7, #20]
   2d984:	1c5a      	adds	r2, r3, #1
   2d986:	617a      	str	r2, [r7, #20]
   2d988:	68ba      	ldr	r2, [r7, #8]
   2d98a:	b2d2      	uxtb	r2, r2
   2d98c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2d98e:	687b      	ldr	r3, [r7, #4]
   2d990:	1e5a      	subs	r2, r3, #1
   2d992:	607a      	str	r2, [r7, #4]
   2d994:	2b00      	cmp	r3, #0
   2d996:	d1f4      	bne.n	2d982 <mem_set+0x12>
}
   2d998:	46c0      	nop			; (mov r8, r8)
   2d99a:	46bd      	mov	sp, r7
   2d99c:	b006      	add	sp, #24
   2d99e:	bd80      	pop	{r7, pc}

0002d9a0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2d9a0:	b580      	push	{r7, lr}
   2d9a2:	b088      	sub	sp, #32
   2d9a4:	af00      	add	r7, sp, #0
   2d9a6:	60f8      	str	r0, [r7, #12]
   2d9a8:	60b9      	str	r1, [r7, #8]
   2d9aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2d9ac:	68fb      	ldr	r3, [r7, #12]
   2d9ae:	61fb      	str	r3, [r7, #28]
   2d9b0:	68bb      	ldr	r3, [r7, #8]
   2d9b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2d9b4:	2300      	movs	r3, #0
   2d9b6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2d9b8:	46c0      	nop			; (mov r8, r8)
   2d9ba:	687b      	ldr	r3, [r7, #4]
   2d9bc:	1e5a      	subs	r2, r3, #1
   2d9be:	607a      	str	r2, [r7, #4]
   2d9c0:	2b00      	cmp	r3, #0
   2d9c2:	d00d      	beq.n	2d9e0 <mem_cmp+0x40>
   2d9c4:	69fb      	ldr	r3, [r7, #28]
   2d9c6:	1c5a      	adds	r2, r3, #1
   2d9c8:	61fa      	str	r2, [r7, #28]
   2d9ca:	781b      	ldrb	r3, [r3, #0]
   2d9cc:	0019      	movs	r1, r3
   2d9ce:	69bb      	ldr	r3, [r7, #24]
   2d9d0:	1c5a      	adds	r2, r3, #1
   2d9d2:	61ba      	str	r2, [r7, #24]
   2d9d4:	781b      	ldrb	r3, [r3, #0]
   2d9d6:	1acb      	subs	r3, r1, r3
   2d9d8:	617b      	str	r3, [r7, #20]
   2d9da:	697b      	ldr	r3, [r7, #20]
   2d9dc:	2b00      	cmp	r3, #0
   2d9de:	d0ec      	beq.n	2d9ba <mem_cmp+0x1a>
	return r;
   2d9e0:	697b      	ldr	r3, [r7, #20]
}
   2d9e2:	0018      	movs	r0, r3
   2d9e4:	46bd      	mov	sp, r7
   2d9e6:	b008      	add	sp, #32
   2d9e8:	bd80      	pop	{r7, pc}

0002d9ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2d9ea:	b580      	push	{r7, lr}
   2d9ec:	b082      	sub	sp, #8
   2d9ee:	af00      	add	r7, sp, #0
   2d9f0:	6078      	str	r0, [r7, #4]
   2d9f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2d9f4:	e002      	b.n	2d9fc <chk_chr+0x12>
   2d9f6:	687b      	ldr	r3, [r7, #4]
   2d9f8:	3301      	adds	r3, #1
   2d9fa:	607b      	str	r3, [r7, #4]
   2d9fc:	687b      	ldr	r3, [r7, #4]
   2d9fe:	781b      	ldrb	r3, [r3, #0]
   2da00:	2b00      	cmp	r3, #0
   2da02:	d005      	beq.n	2da10 <chk_chr+0x26>
   2da04:	687b      	ldr	r3, [r7, #4]
   2da06:	781b      	ldrb	r3, [r3, #0]
   2da08:	001a      	movs	r2, r3
   2da0a:	683b      	ldr	r3, [r7, #0]
   2da0c:	429a      	cmp	r2, r3
   2da0e:	d1f2      	bne.n	2d9f6 <chk_chr+0xc>
	return *str;
   2da10:	687b      	ldr	r3, [r7, #4]
   2da12:	781b      	ldrb	r3, [r3, #0]
}
   2da14:	0018      	movs	r0, r3
   2da16:	46bd      	mov	sp, r7
   2da18:	b002      	add	sp, #8
   2da1a:	bd80      	pop	{r7, pc}

0002da1c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2da1c:	b590      	push	{r4, r7, lr}
   2da1e:	b085      	sub	sp, #20
   2da20:	af00      	add	r7, sp, #0
   2da22:	6078      	str	r0, [r7, #4]
   2da24:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2da26:	687b      	ldr	r3, [r7, #4]
   2da28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2da2a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2da2c:	68fa      	ldr	r2, [r7, #12]
   2da2e:	683b      	ldr	r3, [r7, #0]
   2da30:	429a      	cmp	r2, r3
   2da32:	d04e      	beq.n	2dad2 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2da34:	687b      	ldr	r3, [r7, #4]
   2da36:	791b      	ldrb	r3, [r3, #4]
   2da38:	2b00      	cmp	r3, #0
   2da3a:	d037      	beq.n	2daac <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2da3c:	687b      	ldr	r3, [r7, #4]
   2da3e:	7858      	ldrb	r0, [r3, #1]
   2da40:	687b      	ldr	r3, [r7, #4]
   2da42:	3330      	adds	r3, #48	; 0x30
   2da44:	0019      	movs	r1, r3
   2da46:	68fa      	ldr	r2, [r7, #12]
   2da48:	2301      	movs	r3, #1
   2da4a:	4c24      	ldr	r4, [pc, #144]	; (2dadc <move_window+0xc0>)
   2da4c:	47a0      	blx	r4
   2da4e:	1e03      	subs	r3, r0, #0
   2da50:	d001      	beq.n	2da56 <move_window+0x3a>
				return FR_DISK_ERR;
   2da52:	2301      	movs	r3, #1
   2da54:	e03e      	b.n	2dad4 <move_window+0xb8>
			fs->wflag = 0;
   2da56:	687b      	ldr	r3, [r7, #4]
   2da58:	2200      	movs	r2, #0
   2da5a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2da5c:	687b      	ldr	r3, [r7, #4]
   2da5e:	6a1a      	ldr	r2, [r3, #32]
   2da60:	687b      	ldr	r3, [r7, #4]
   2da62:	69db      	ldr	r3, [r3, #28]
   2da64:	18d2      	adds	r2, r2, r3
   2da66:	68fb      	ldr	r3, [r7, #12]
   2da68:	429a      	cmp	r2, r3
   2da6a:	d91f      	bls.n	2daac <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2da6c:	230b      	movs	r3, #11
   2da6e:	18fb      	adds	r3, r7, r3
   2da70:	687a      	ldr	r2, [r7, #4]
   2da72:	78d2      	ldrb	r2, [r2, #3]
   2da74:	701a      	strb	r2, [r3, #0]
   2da76:	e014      	b.n	2daa2 <move_window+0x86>
					wsect += fs->fsize;
   2da78:	687b      	ldr	r3, [r7, #4]
   2da7a:	69db      	ldr	r3, [r3, #28]
   2da7c:	68fa      	ldr	r2, [r7, #12]
   2da7e:	18d3      	adds	r3, r2, r3
   2da80:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2da82:	687b      	ldr	r3, [r7, #4]
   2da84:	7858      	ldrb	r0, [r3, #1]
   2da86:	687b      	ldr	r3, [r7, #4]
   2da88:	3330      	adds	r3, #48	; 0x30
   2da8a:	0019      	movs	r1, r3
   2da8c:	68fa      	ldr	r2, [r7, #12]
   2da8e:	2301      	movs	r3, #1
   2da90:	4c12      	ldr	r4, [pc, #72]	; (2dadc <move_window+0xc0>)
   2da92:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2da94:	230b      	movs	r3, #11
   2da96:	18fb      	adds	r3, r7, r3
   2da98:	781a      	ldrb	r2, [r3, #0]
   2da9a:	230b      	movs	r3, #11
   2da9c:	18fb      	adds	r3, r7, r3
   2da9e:	3a01      	subs	r2, #1
   2daa0:	701a      	strb	r2, [r3, #0]
   2daa2:	230b      	movs	r3, #11
   2daa4:	18fb      	adds	r3, r7, r3
   2daa6:	781b      	ldrb	r3, [r3, #0]
   2daa8:	2b01      	cmp	r3, #1
   2daaa:	d8e5      	bhi.n	2da78 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2daac:	683b      	ldr	r3, [r7, #0]
   2daae:	2b00      	cmp	r3, #0
   2dab0:	d00f      	beq.n	2dad2 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2dab2:	687b      	ldr	r3, [r7, #4]
   2dab4:	7858      	ldrb	r0, [r3, #1]
   2dab6:	687b      	ldr	r3, [r7, #4]
   2dab8:	3330      	adds	r3, #48	; 0x30
   2daba:	0019      	movs	r1, r3
   2dabc:	683a      	ldr	r2, [r7, #0]
   2dabe:	2301      	movs	r3, #1
   2dac0:	4c07      	ldr	r4, [pc, #28]	; (2dae0 <move_window+0xc4>)
   2dac2:	47a0      	blx	r4
   2dac4:	1e03      	subs	r3, r0, #0
   2dac6:	d001      	beq.n	2dacc <move_window+0xb0>
				return FR_DISK_ERR;
   2dac8:	2301      	movs	r3, #1
   2daca:	e003      	b.n	2dad4 <move_window+0xb8>
			fs->winsect = sector;
   2dacc:	687b      	ldr	r3, [r7, #4]
   2dace:	683a      	ldr	r2, [r7, #0]
   2dad0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2dad2:	2300      	movs	r3, #0
}
   2dad4:	0018      	movs	r0, r3
   2dad6:	46bd      	mov	sp, r7
   2dad8:	b005      	add	sp, #20
   2dada:	bd90      	pop	{r4, r7, pc}
   2dadc:	0002d709 	.word	0x0002d709
   2dae0:	0002d631 	.word	0x0002d631

0002dae4 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2dae4:	b590      	push	{r4, r7, lr}
   2dae6:	b085      	sub	sp, #20
   2dae8:	af00      	add	r7, sp, #0
   2daea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2daec:	230f      	movs	r3, #15
   2daee:	18fc      	adds	r4, r7, r3
   2daf0:	687b      	ldr	r3, [r7, #4]
   2daf2:	2100      	movs	r1, #0
   2daf4:	0018      	movs	r0, r3
   2daf6:	4b52      	ldr	r3, [pc, #328]	; (2dc40 <sync+0x15c>)
   2daf8:	4798      	blx	r3
   2dafa:	0003      	movs	r3, r0
   2dafc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2dafe:	230f      	movs	r3, #15
   2db00:	18fb      	adds	r3, r7, r3
   2db02:	781b      	ldrb	r3, [r3, #0]
   2db04:	2b00      	cmp	r3, #0
   2db06:	d000      	beq.n	2db0a <sync+0x26>
   2db08:	e093      	b.n	2dc32 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2db0a:	687b      	ldr	r3, [r7, #4]
   2db0c:	781b      	ldrb	r3, [r3, #0]
   2db0e:	2b03      	cmp	r3, #3
   2db10:	d000      	beq.n	2db14 <sync+0x30>
   2db12:	e081      	b.n	2dc18 <sync+0x134>
   2db14:	687b      	ldr	r3, [r7, #4]
   2db16:	795b      	ldrb	r3, [r3, #5]
   2db18:	2b00      	cmp	r3, #0
   2db1a:	d07d      	beq.n	2dc18 <sync+0x134>
			fs->winsect = 0;
   2db1c:	687b      	ldr	r3, [r7, #4]
   2db1e:	2200      	movs	r2, #0
   2db20:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2db22:	687b      	ldr	r3, [r7, #4]
   2db24:	3330      	adds	r3, #48	; 0x30
   2db26:	0018      	movs	r0, r3
   2db28:	2380      	movs	r3, #128	; 0x80
   2db2a:	009b      	lsls	r3, r3, #2
   2db2c:	001a      	movs	r2, r3
   2db2e:	2100      	movs	r1, #0
   2db30:	4b44      	ldr	r3, [pc, #272]	; (2dc44 <sync+0x160>)
   2db32:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2db34:	687b      	ldr	r3, [r7, #4]
   2db36:	4a44      	ldr	r2, [pc, #272]	; (2dc48 <sync+0x164>)
   2db38:	2155      	movs	r1, #85	; 0x55
   2db3a:	5499      	strb	r1, [r3, r2]
   2db3c:	687b      	ldr	r3, [r7, #4]
   2db3e:	4a43      	ldr	r2, [pc, #268]	; (2dc4c <sync+0x168>)
   2db40:	21aa      	movs	r1, #170	; 0xaa
   2db42:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2db44:	687b      	ldr	r3, [r7, #4]
   2db46:	2230      	movs	r2, #48	; 0x30
   2db48:	2152      	movs	r1, #82	; 0x52
   2db4a:	5499      	strb	r1, [r3, r2]
   2db4c:	687b      	ldr	r3, [r7, #4]
   2db4e:	2231      	movs	r2, #49	; 0x31
   2db50:	2152      	movs	r1, #82	; 0x52
   2db52:	5499      	strb	r1, [r3, r2]
   2db54:	687b      	ldr	r3, [r7, #4]
   2db56:	2232      	movs	r2, #50	; 0x32
   2db58:	2161      	movs	r1, #97	; 0x61
   2db5a:	5499      	strb	r1, [r3, r2]
   2db5c:	687b      	ldr	r3, [r7, #4]
   2db5e:	2233      	movs	r2, #51	; 0x33
   2db60:	2141      	movs	r1, #65	; 0x41
   2db62:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2db64:	687a      	ldr	r2, [r7, #4]
   2db66:	2385      	movs	r3, #133	; 0x85
   2db68:	009b      	lsls	r3, r3, #2
   2db6a:	2172      	movs	r1, #114	; 0x72
   2db6c:	54d1      	strb	r1, [r2, r3]
   2db6e:	687b      	ldr	r3, [r7, #4]
   2db70:	4a37      	ldr	r2, [pc, #220]	; (2dc50 <sync+0x16c>)
   2db72:	2172      	movs	r1, #114	; 0x72
   2db74:	5499      	strb	r1, [r3, r2]
   2db76:	687b      	ldr	r3, [r7, #4]
   2db78:	4a36      	ldr	r2, [pc, #216]	; (2dc54 <sync+0x170>)
   2db7a:	2141      	movs	r1, #65	; 0x41
   2db7c:	5499      	strb	r1, [r3, r2]
   2db7e:	687b      	ldr	r3, [r7, #4]
   2db80:	4a35      	ldr	r2, [pc, #212]	; (2dc58 <sync+0x174>)
   2db82:	2161      	movs	r1, #97	; 0x61
   2db84:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2db86:	687b      	ldr	r3, [r7, #4]
   2db88:	691b      	ldr	r3, [r3, #16]
   2db8a:	b2d9      	uxtb	r1, r3
   2db8c:	687a      	ldr	r2, [r7, #4]
   2db8e:	2386      	movs	r3, #134	; 0x86
   2db90:	009b      	lsls	r3, r3, #2
   2db92:	54d1      	strb	r1, [r2, r3]
   2db94:	687b      	ldr	r3, [r7, #4]
   2db96:	691b      	ldr	r3, [r3, #16]
   2db98:	b29b      	uxth	r3, r3
   2db9a:	0a1b      	lsrs	r3, r3, #8
   2db9c:	b29b      	uxth	r3, r3
   2db9e:	b2d9      	uxtb	r1, r3
   2dba0:	687b      	ldr	r3, [r7, #4]
   2dba2:	4a2e      	ldr	r2, [pc, #184]	; (2dc5c <sync+0x178>)
   2dba4:	5499      	strb	r1, [r3, r2]
   2dba6:	687b      	ldr	r3, [r7, #4]
   2dba8:	691b      	ldr	r3, [r3, #16]
   2dbaa:	0c1b      	lsrs	r3, r3, #16
   2dbac:	b2d9      	uxtb	r1, r3
   2dbae:	687b      	ldr	r3, [r7, #4]
   2dbb0:	4a2b      	ldr	r2, [pc, #172]	; (2dc60 <sync+0x17c>)
   2dbb2:	5499      	strb	r1, [r3, r2]
   2dbb4:	687b      	ldr	r3, [r7, #4]
   2dbb6:	691b      	ldr	r3, [r3, #16]
   2dbb8:	0e1b      	lsrs	r3, r3, #24
   2dbba:	b2d9      	uxtb	r1, r3
   2dbbc:	687b      	ldr	r3, [r7, #4]
   2dbbe:	4a29      	ldr	r2, [pc, #164]	; (2dc64 <sync+0x180>)
   2dbc0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2dbc2:	687b      	ldr	r3, [r7, #4]
   2dbc4:	68db      	ldr	r3, [r3, #12]
   2dbc6:	b2d9      	uxtb	r1, r3
   2dbc8:	687a      	ldr	r2, [r7, #4]
   2dbca:	2387      	movs	r3, #135	; 0x87
   2dbcc:	009b      	lsls	r3, r3, #2
   2dbce:	54d1      	strb	r1, [r2, r3]
   2dbd0:	687b      	ldr	r3, [r7, #4]
   2dbd2:	68db      	ldr	r3, [r3, #12]
   2dbd4:	b29b      	uxth	r3, r3
   2dbd6:	0a1b      	lsrs	r3, r3, #8
   2dbd8:	b29b      	uxth	r3, r3
   2dbda:	b2d9      	uxtb	r1, r3
   2dbdc:	687b      	ldr	r3, [r7, #4]
   2dbde:	4a22      	ldr	r2, [pc, #136]	; (2dc68 <sync+0x184>)
   2dbe0:	5499      	strb	r1, [r3, r2]
   2dbe2:	687b      	ldr	r3, [r7, #4]
   2dbe4:	68db      	ldr	r3, [r3, #12]
   2dbe6:	0c1b      	lsrs	r3, r3, #16
   2dbe8:	b2d9      	uxtb	r1, r3
   2dbea:	687b      	ldr	r3, [r7, #4]
   2dbec:	4a1f      	ldr	r2, [pc, #124]	; (2dc6c <sync+0x188>)
   2dbee:	5499      	strb	r1, [r3, r2]
   2dbf0:	687b      	ldr	r3, [r7, #4]
   2dbf2:	68db      	ldr	r3, [r3, #12]
   2dbf4:	0e1b      	lsrs	r3, r3, #24
   2dbf6:	b2d9      	uxtb	r1, r3
   2dbf8:	687b      	ldr	r3, [r7, #4]
   2dbfa:	4a1d      	ldr	r2, [pc, #116]	; (2dc70 <sync+0x18c>)
   2dbfc:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2dbfe:	687b      	ldr	r3, [r7, #4]
   2dc00:	7858      	ldrb	r0, [r3, #1]
   2dc02:	687b      	ldr	r3, [r7, #4]
   2dc04:	3330      	adds	r3, #48	; 0x30
   2dc06:	0019      	movs	r1, r3
   2dc08:	687b      	ldr	r3, [r7, #4]
   2dc0a:	695a      	ldr	r2, [r3, #20]
   2dc0c:	2301      	movs	r3, #1
   2dc0e:	4c19      	ldr	r4, [pc, #100]	; (2dc74 <sync+0x190>)
   2dc10:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2dc12:	687b      	ldr	r3, [r7, #4]
   2dc14:	2200      	movs	r2, #0
   2dc16:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2dc18:	687b      	ldr	r3, [r7, #4]
   2dc1a:	785b      	ldrb	r3, [r3, #1]
   2dc1c:	2200      	movs	r2, #0
   2dc1e:	2100      	movs	r1, #0
   2dc20:	0018      	movs	r0, r3
   2dc22:	4b15      	ldr	r3, [pc, #84]	; (2dc78 <sync+0x194>)
   2dc24:	4798      	blx	r3
   2dc26:	1e03      	subs	r3, r0, #0
   2dc28:	d003      	beq.n	2dc32 <sync+0x14e>
			res = FR_DISK_ERR;
   2dc2a:	230f      	movs	r3, #15
   2dc2c:	18fb      	adds	r3, r7, r3
   2dc2e:	2201      	movs	r2, #1
   2dc30:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2dc32:	230f      	movs	r3, #15
   2dc34:	18fb      	adds	r3, r7, r3
   2dc36:	781b      	ldrb	r3, [r3, #0]
}
   2dc38:	0018      	movs	r0, r3
   2dc3a:	46bd      	mov	sp, r7
   2dc3c:	b005      	add	sp, #20
   2dc3e:	bd90      	pop	{r4, r7, pc}
   2dc40:	0002da1d 	.word	0x0002da1d
   2dc44:	0002d971 	.word	0x0002d971
   2dc48:	0000022e 	.word	0x0000022e
   2dc4c:	0000022f 	.word	0x0000022f
   2dc50:	00000215 	.word	0x00000215
   2dc54:	00000216 	.word	0x00000216
   2dc58:	00000217 	.word	0x00000217
   2dc5c:	00000219 	.word	0x00000219
   2dc60:	0000021a 	.word	0x0000021a
   2dc64:	0000021b 	.word	0x0000021b
   2dc68:	0000021d 	.word	0x0000021d
   2dc6c:	0000021e 	.word	0x0000021e
   2dc70:	0000021f 	.word	0x0000021f
   2dc74:	0002d709 	.word	0x0002d709
   2dc78:	0002d7e1 	.word	0x0002d7e1

0002dc7c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2dc7c:	b580      	push	{r7, lr}
   2dc7e:	b082      	sub	sp, #8
   2dc80:	af00      	add	r7, sp, #0
   2dc82:	6078      	str	r0, [r7, #4]
   2dc84:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2dc86:	683b      	ldr	r3, [r7, #0]
   2dc88:	3b02      	subs	r3, #2
   2dc8a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2dc8c:	687b      	ldr	r3, [r7, #4]
   2dc8e:	699b      	ldr	r3, [r3, #24]
   2dc90:	1e9a      	subs	r2, r3, #2
   2dc92:	683b      	ldr	r3, [r7, #0]
   2dc94:	429a      	cmp	r2, r3
   2dc96:	d801      	bhi.n	2dc9c <clust2sect+0x20>
   2dc98:	2300      	movs	r3, #0
   2dc9a:	e007      	b.n	2dcac <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2dc9c:	687b      	ldr	r3, [r7, #4]
   2dc9e:	789b      	ldrb	r3, [r3, #2]
   2dca0:	001a      	movs	r2, r3
   2dca2:	683b      	ldr	r3, [r7, #0]
   2dca4:	435a      	muls	r2, r3
   2dca6:	687b      	ldr	r3, [r7, #4]
   2dca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2dcaa:	18d3      	adds	r3, r2, r3
}
   2dcac:	0018      	movs	r0, r3
   2dcae:	46bd      	mov	sp, r7
   2dcb0:	b002      	add	sp, #8
   2dcb2:	bd80      	pop	{r7, pc}

0002dcb4 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2dcb4:	b580      	push	{r7, lr}
   2dcb6:	b086      	sub	sp, #24
   2dcb8:	af00      	add	r7, sp, #0
   2dcba:	6078      	str	r0, [r7, #4]
   2dcbc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2dcbe:	683b      	ldr	r3, [r7, #0]
   2dcc0:	2b01      	cmp	r3, #1
   2dcc2:	d904      	bls.n	2dcce <get_fat+0x1a>
   2dcc4:	687b      	ldr	r3, [r7, #4]
   2dcc6:	699a      	ldr	r2, [r3, #24]
   2dcc8:	683b      	ldr	r3, [r7, #0]
   2dcca:	429a      	cmp	r2, r3
   2dccc:	d801      	bhi.n	2dcd2 <get_fat+0x1e>
		return 1;
   2dcce:	2301      	movs	r3, #1
   2dcd0:	e09f      	b.n	2de12 <get_fat+0x15e>

	switch (fs->fs_type) {
   2dcd2:	687b      	ldr	r3, [r7, #4]
   2dcd4:	781b      	ldrb	r3, [r3, #0]
   2dcd6:	2b02      	cmp	r3, #2
   2dcd8:	d048      	beq.n	2dd6c <get_fat+0xb8>
   2dcda:	2b03      	cmp	r3, #3
   2dcdc:	d067      	beq.n	2ddae <get_fat+0xfa>
   2dcde:	2b01      	cmp	r3, #1
   2dce0:	d000      	beq.n	2dce4 <get_fat+0x30>
   2dce2:	e094      	b.n	2de0e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2dce4:	683b      	ldr	r3, [r7, #0]
   2dce6:	617b      	str	r3, [r7, #20]
   2dce8:	697b      	ldr	r3, [r7, #20]
   2dcea:	085b      	lsrs	r3, r3, #1
   2dcec:	697a      	ldr	r2, [r7, #20]
   2dcee:	18d3      	adds	r3, r2, r3
   2dcf0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2dcf2:	687b      	ldr	r3, [r7, #4]
   2dcf4:	6a1a      	ldr	r2, [r3, #32]
   2dcf6:	697b      	ldr	r3, [r7, #20]
   2dcf8:	0a5b      	lsrs	r3, r3, #9
   2dcfa:	18d2      	adds	r2, r2, r3
   2dcfc:	687b      	ldr	r3, [r7, #4]
   2dcfe:	0011      	movs	r1, r2
   2dd00:	0018      	movs	r0, r3
   2dd02:	4b46      	ldr	r3, [pc, #280]	; (2de1c <get_fat+0x168>)
   2dd04:	4798      	blx	r3
   2dd06:	1e03      	subs	r3, r0, #0
   2dd08:	d000      	beq.n	2dd0c <get_fat+0x58>
   2dd0a:	e079      	b.n	2de00 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2dd0c:	697b      	ldr	r3, [r7, #20]
   2dd0e:	05db      	lsls	r3, r3, #23
   2dd10:	0ddb      	lsrs	r3, r3, #23
   2dd12:	687a      	ldr	r2, [r7, #4]
   2dd14:	2130      	movs	r1, #48	; 0x30
   2dd16:	18d3      	adds	r3, r2, r3
   2dd18:	185b      	adds	r3, r3, r1
   2dd1a:	781b      	ldrb	r3, [r3, #0]
   2dd1c:	613b      	str	r3, [r7, #16]
   2dd1e:	697b      	ldr	r3, [r7, #20]
   2dd20:	3301      	adds	r3, #1
   2dd22:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2dd24:	687b      	ldr	r3, [r7, #4]
   2dd26:	6a1a      	ldr	r2, [r3, #32]
   2dd28:	697b      	ldr	r3, [r7, #20]
   2dd2a:	0a5b      	lsrs	r3, r3, #9
   2dd2c:	18d2      	adds	r2, r2, r3
   2dd2e:	687b      	ldr	r3, [r7, #4]
   2dd30:	0011      	movs	r1, r2
   2dd32:	0018      	movs	r0, r3
   2dd34:	4b39      	ldr	r3, [pc, #228]	; (2de1c <get_fat+0x168>)
   2dd36:	4798      	blx	r3
   2dd38:	1e03      	subs	r3, r0, #0
   2dd3a:	d163      	bne.n	2de04 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2dd3c:	697b      	ldr	r3, [r7, #20]
   2dd3e:	05db      	lsls	r3, r3, #23
   2dd40:	0ddb      	lsrs	r3, r3, #23
   2dd42:	687a      	ldr	r2, [r7, #4]
   2dd44:	2130      	movs	r1, #48	; 0x30
   2dd46:	18d3      	adds	r3, r2, r3
   2dd48:	185b      	adds	r3, r3, r1
   2dd4a:	781b      	ldrb	r3, [r3, #0]
   2dd4c:	021b      	lsls	r3, r3, #8
   2dd4e:	001a      	movs	r2, r3
   2dd50:	693b      	ldr	r3, [r7, #16]
   2dd52:	4313      	orrs	r3, r2
   2dd54:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2dd56:	683b      	ldr	r3, [r7, #0]
   2dd58:	2201      	movs	r2, #1
   2dd5a:	4013      	ands	r3, r2
   2dd5c:	d002      	beq.n	2dd64 <get_fat+0xb0>
   2dd5e:	693b      	ldr	r3, [r7, #16]
   2dd60:	091b      	lsrs	r3, r3, #4
   2dd62:	e056      	b.n	2de12 <get_fat+0x15e>
   2dd64:	693b      	ldr	r3, [r7, #16]
   2dd66:	051b      	lsls	r3, r3, #20
   2dd68:	0d1b      	lsrs	r3, r3, #20
   2dd6a:	e052      	b.n	2de12 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2dd6c:	687b      	ldr	r3, [r7, #4]
   2dd6e:	6a1a      	ldr	r2, [r3, #32]
   2dd70:	683b      	ldr	r3, [r7, #0]
   2dd72:	0a1b      	lsrs	r3, r3, #8
   2dd74:	18d2      	adds	r2, r2, r3
   2dd76:	687b      	ldr	r3, [r7, #4]
   2dd78:	0011      	movs	r1, r2
   2dd7a:	0018      	movs	r0, r3
   2dd7c:	4b27      	ldr	r3, [pc, #156]	; (2de1c <get_fat+0x168>)
   2dd7e:	4798      	blx	r3
   2dd80:	1e03      	subs	r3, r0, #0
   2dd82:	d141      	bne.n	2de08 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2dd84:	683b      	ldr	r3, [r7, #0]
   2dd86:	005a      	lsls	r2, r3, #1
   2dd88:	23ff      	movs	r3, #255	; 0xff
   2dd8a:	005b      	lsls	r3, r3, #1
   2dd8c:	4013      	ands	r3, r2
   2dd8e:	3330      	adds	r3, #48	; 0x30
   2dd90:	687a      	ldr	r2, [r7, #4]
   2dd92:	18d3      	adds	r3, r2, r3
   2dd94:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2dd96:	68fb      	ldr	r3, [r7, #12]
   2dd98:	3301      	adds	r3, #1
   2dd9a:	781b      	ldrb	r3, [r3, #0]
   2dd9c:	021b      	lsls	r3, r3, #8
   2dd9e:	b21a      	sxth	r2, r3
   2dda0:	68fb      	ldr	r3, [r7, #12]
   2dda2:	781b      	ldrb	r3, [r3, #0]
   2dda4:	b21b      	sxth	r3, r3
   2dda6:	4313      	orrs	r3, r2
   2dda8:	b21b      	sxth	r3, r3
   2ddaa:	b29b      	uxth	r3, r3
   2ddac:	e031      	b.n	2de12 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ddae:	687b      	ldr	r3, [r7, #4]
   2ddb0:	6a1a      	ldr	r2, [r3, #32]
   2ddb2:	683b      	ldr	r3, [r7, #0]
   2ddb4:	09db      	lsrs	r3, r3, #7
   2ddb6:	18d2      	adds	r2, r2, r3
   2ddb8:	687b      	ldr	r3, [r7, #4]
   2ddba:	0011      	movs	r1, r2
   2ddbc:	0018      	movs	r0, r3
   2ddbe:	4b17      	ldr	r3, [pc, #92]	; (2de1c <get_fat+0x168>)
   2ddc0:	4798      	blx	r3
   2ddc2:	1e03      	subs	r3, r0, #0
   2ddc4:	d122      	bne.n	2de0c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2ddc6:	683b      	ldr	r3, [r7, #0]
   2ddc8:	009a      	lsls	r2, r3, #2
   2ddca:	23fe      	movs	r3, #254	; 0xfe
   2ddcc:	005b      	lsls	r3, r3, #1
   2ddce:	4013      	ands	r3, r2
   2ddd0:	3330      	adds	r3, #48	; 0x30
   2ddd2:	687a      	ldr	r2, [r7, #4]
   2ddd4:	18d3      	adds	r3, r2, r3
   2ddd6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2ddd8:	68fb      	ldr	r3, [r7, #12]
   2ddda:	3303      	adds	r3, #3
   2dddc:	781b      	ldrb	r3, [r3, #0]
   2ddde:	061a      	lsls	r2, r3, #24
   2dde0:	68fb      	ldr	r3, [r7, #12]
   2dde2:	3302      	adds	r3, #2
   2dde4:	781b      	ldrb	r3, [r3, #0]
   2dde6:	041b      	lsls	r3, r3, #16
   2dde8:	4313      	orrs	r3, r2
   2ddea:	68fa      	ldr	r2, [r7, #12]
   2ddec:	3201      	adds	r2, #1
   2ddee:	7812      	ldrb	r2, [r2, #0]
   2ddf0:	0212      	lsls	r2, r2, #8
   2ddf2:	4313      	orrs	r3, r2
   2ddf4:	68fa      	ldr	r2, [r7, #12]
   2ddf6:	7812      	ldrb	r2, [r2, #0]
   2ddf8:	4313      	orrs	r3, r2
   2ddfa:	011b      	lsls	r3, r3, #4
   2ddfc:	091b      	lsrs	r3, r3, #4
   2ddfe:	e008      	b.n	2de12 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2de00:	46c0      	nop			; (mov r8, r8)
   2de02:	e004      	b.n	2de0e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2de04:	46c0      	nop			; (mov r8, r8)
   2de06:	e002      	b.n	2de0e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2de08:	46c0      	nop			; (mov r8, r8)
   2de0a:	e000      	b.n	2de0e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2de0c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2de0e:	2301      	movs	r3, #1
   2de10:	425b      	negs	r3, r3
}
   2de12:	0018      	movs	r0, r3
   2de14:	46bd      	mov	sp, r7
   2de16:	b006      	add	sp, #24
   2de18:	bd80      	pop	{r7, pc}
   2de1a:	46c0      	nop			; (mov r8, r8)
   2de1c:	0002da1d 	.word	0x0002da1d

0002de20 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2de20:	b590      	push	{r4, r7, lr}
   2de22:	b089      	sub	sp, #36	; 0x24
   2de24:	af00      	add	r7, sp, #0
   2de26:	60f8      	str	r0, [r7, #12]
   2de28:	60b9      	str	r1, [r7, #8]
   2de2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2de2c:	68bb      	ldr	r3, [r7, #8]
   2de2e:	2b01      	cmp	r3, #1
   2de30:	d904      	bls.n	2de3c <put_fat+0x1c>
   2de32:	68fb      	ldr	r3, [r7, #12]
   2de34:	699a      	ldr	r2, [r3, #24]
   2de36:	68bb      	ldr	r3, [r7, #8]
   2de38:	429a      	cmp	r2, r3
   2de3a:	d804      	bhi.n	2de46 <put_fat+0x26>
		res = FR_INT_ERR;
   2de3c:	231f      	movs	r3, #31
   2de3e:	18fb      	adds	r3, r7, r3
   2de40:	2202      	movs	r2, #2
   2de42:	701a      	strb	r2, [r3, #0]
   2de44:	e100      	b.n	2e048 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2de46:	68fb      	ldr	r3, [r7, #12]
   2de48:	781b      	ldrb	r3, [r3, #0]
   2de4a:	2b02      	cmp	r3, #2
   2de4c:	d100      	bne.n	2de50 <put_fat+0x30>
   2de4e:	e078      	b.n	2df42 <put_fat+0x122>
   2de50:	2b03      	cmp	r3, #3
   2de52:	d100      	bne.n	2de56 <put_fat+0x36>
   2de54:	e09e      	b.n	2df94 <put_fat+0x174>
   2de56:	2b01      	cmp	r3, #1
   2de58:	d000      	beq.n	2de5c <put_fat+0x3c>
   2de5a:	e0e6      	b.n	2e02a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2de5c:	68bb      	ldr	r3, [r7, #8]
   2de5e:	61bb      	str	r3, [r7, #24]
   2de60:	69bb      	ldr	r3, [r7, #24]
   2de62:	085b      	lsrs	r3, r3, #1
   2de64:	69ba      	ldr	r2, [r7, #24]
   2de66:	18d3      	adds	r3, r2, r3
   2de68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2de6a:	68fb      	ldr	r3, [r7, #12]
   2de6c:	6a1a      	ldr	r2, [r3, #32]
   2de6e:	69bb      	ldr	r3, [r7, #24]
   2de70:	0a5b      	lsrs	r3, r3, #9
   2de72:	18d2      	adds	r2, r2, r3
   2de74:	231f      	movs	r3, #31
   2de76:	18fc      	adds	r4, r7, r3
   2de78:	68fb      	ldr	r3, [r7, #12]
   2de7a:	0011      	movs	r1, r2
   2de7c:	0018      	movs	r0, r3
   2de7e:	4b76      	ldr	r3, [pc, #472]	; (2e058 <put_fat+0x238>)
   2de80:	4798      	blx	r3
   2de82:	0003      	movs	r3, r0
   2de84:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2de86:	231f      	movs	r3, #31
   2de88:	18fb      	adds	r3, r7, r3
   2de8a:	781b      	ldrb	r3, [r3, #0]
   2de8c:	2b00      	cmp	r3, #0
   2de8e:	d000      	beq.n	2de92 <put_fat+0x72>
   2de90:	e0d0      	b.n	2e034 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2de92:	69bb      	ldr	r3, [r7, #24]
   2de94:	05db      	lsls	r3, r3, #23
   2de96:	0ddb      	lsrs	r3, r3, #23
   2de98:	3330      	adds	r3, #48	; 0x30
   2de9a:	68fa      	ldr	r2, [r7, #12]
   2de9c:	18d3      	adds	r3, r2, r3
   2de9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2dea0:	68bb      	ldr	r3, [r7, #8]
   2dea2:	2201      	movs	r2, #1
   2dea4:	4013      	ands	r3, r2
   2dea6:	d00d      	beq.n	2dec4 <put_fat+0xa4>
   2dea8:	697b      	ldr	r3, [r7, #20]
   2deaa:	781b      	ldrb	r3, [r3, #0]
   2deac:	b25b      	sxtb	r3, r3
   2deae:	220f      	movs	r2, #15
   2deb0:	4013      	ands	r3, r2
   2deb2:	b25a      	sxtb	r2, r3
   2deb4:	687b      	ldr	r3, [r7, #4]
   2deb6:	b2db      	uxtb	r3, r3
   2deb8:	011b      	lsls	r3, r3, #4
   2deba:	b25b      	sxtb	r3, r3
   2debc:	4313      	orrs	r3, r2
   2debe:	b25b      	sxtb	r3, r3
   2dec0:	b2db      	uxtb	r3, r3
   2dec2:	e001      	b.n	2dec8 <put_fat+0xa8>
   2dec4:	687b      	ldr	r3, [r7, #4]
   2dec6:	b2db      	uxtb	r3, r3
   2dec8:	697a      	ldr	r2, [r7, #20]
   2deca:	7013      	strb	r3, [r2, #0]
			bc++;
   2decc:	69bb      	ldr	r3, [r7, #24]
   2dece:	3301      	adds	r3, #1
   2ded0:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2ded2:	68fb      	ldr	r3, [r7, #12]
   2ded4:	2201      	movs	r2, #1
   2ded6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ded8:	68fb      	ldr	r3, [r7, #12]
   2deda:	6a1a      	ldr	r2, [r3, #32]
   2dedc:	69bb      	ldr	r3, [r7, #24]
   2dede:	0a5b      	lsrs	r3, r3, #9
   2dee0:	18d2      	adds	r2, r2, r3
   2dee2:	231f      	movs	r3, #31
   2dee4:	18fc      	adds	r4, r7, r3
   2dee6:	68fb      	ldr	r3, [r7, #12]
   2dee8:	0011      	movs	r1, r2
   2deea:	0018      	movs	r0, r3
   2deec:	4b5a      	ldr	r3, [pc, #360]	; (2e058 <put_fat+0x238>)
   2deee:	4798      	blx	r3
   2def0:	0003      	movs	r3, r0
   2def2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2def4:	231f      	movs	r3, #31
   2def6:	18fb      	adds	r3, r7, r3
   2def8:	781b      	ldrb	r3, [r3, #0]
   2defa:	2b00      	cmp	r3, #0
   2defc:	d000      	beq.n	2df00 <put_fat+0xe0>
   2defe:	e09b      	b.n	2e038 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2df00:	69bb      	ldr	r3, [r7, #24]
   2df02:	05db      	lsls	r3, r3, #23
   2df04:	0ddb      	lsrs	r3, r3, #23
   2df06:	3330      	adds	r3, #48	; 0x30
   2df08:	68fa      	ldr	r2, [r7, #12]
   2df0a:	18d3      	adds	r3, r2, r3
   2df0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2df0e:	68bb      	ldr	r3, [r7, #8]
   2df10:	2201      	movs	r2, #1
   2df12:	4013      	ands	r3, r2
   2df14:	d003      	beq.n	2df1e <put_fat+0xfe>
   2df16:	687b      	ldr	r3, [r7, #4]
   2df18:	091b      	lsrs	r3, r3, #4
   2df1a:	b2db      	uxtb	r3, r3
   2df1c:	e00e      	b.n	2df3c <put_fat+0x11c>
   2df1e:	697b      	ldr	r3, [r7, #20]
   2df20:	781b      	ldrb	r3, [r3, #0]
   2df22:	b25b      	sxtb	r3, r3
   2df24:	220f      	movs	r2, #15
   2df26:	4393      	bics	r3, r2
   2df28:	b25a      	sxtb	r2, r3
   2df2a:	687b      	ldr	r3, [r7, #4]
   2df2c:	0a1b      	lsrs	r3, r3, #8
   2df2e:	b25b      	sxtb	r3, r3
   2df30:	210f      	movs	r1, #15
   2df32:	400b      	ands	r3, r1
   2df34:	b25b      	sxtb	r3, r3
   2df36:	4313      	orrs	r3, r2
   2df38:	b25b      	sxtb	r3, r3
   2df3a:	b2db      	uxtb	r3, r3
   2df3c:	697a      	ldr	r2, [r7, #20]
   2df3e:	7013      	strb	r3, [r2, #0]
			break;
   2df40:	e07f      	b.n	2e042 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2df42:	68fb      	ldr	r3, [r7, #12]
   2df44:	6a1a      	ldr	r2, [r3, #32]
   2df46:	68bb      	ldr	r3, [r7, #8]
   2df48:	0a1b      	lsrs	r3, r3, #8
   2df4a:	18d2      	adds	r2, r2, r3
   2df4c:	231f      	movs	r3, #31
   2df4e:	18fc      	adds	r4, r7, r3
   2df50:	68fb      	ldr	r3, [r7, #12]
   2df52:	0011      	movs	r1, r2
   2df54:	0018      	movs	r0, r3
   2df56:	4b40      	ldr	r3, [pc, #256]	; (2e058 <put_fat+0x238>)
   2df58:	4798      	blx	r3
   2df5a:	0003      	movs	r3, r0
   2df5c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2df5e:	231f      	movs	r3, #31
   2df60:	18fb      	adds	r3, r7, r3
   2df62:	781b      	ldrb	r3, [r3, #0]
   2df64:	2b00      	cmp	r3, #0
   2df66:	d169      	bne.n	2e03c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2df68:	68bb      	ldr	r3, [r7, #8]
   2df6a:	005a      	lsls	r2, r3, #1
   2df6c:	23ff      	movs	r3, #255	; 0xff
   2df6e:	005b      	lsls	r3, r3, #1
   2df70:	4013      	ands	r3, r2
   2df72:	3330      	adds	r3, #48	; 0x30
   2df74:	68fa      	ldr	r2, [r7, #12]
   2df76:	18d3      	adds	r3, r2, r3
   2df78:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2df7a:	687b      	ldr	r3, [r7, #4]
   2df7c:	b2da      	uxtb	r2, r3
   2df7e:	697b      	ldr	r3, [r7, #20]
   2df80:	701a      	strb	r2, [r3, #0]
   2df82:	697b      	ldr	r3, [r7, #20]
   2df84:	3301      	adds	r3, #1
   2df86:	687a      	ldr	r2, [r7, #4]
   2df88:	b292      	uxth	r2, r2
   2df8a:	0a12      	lsrs	r2, r2, #8
   2df8c:	b292      	uxth	r2, r2
   2df8e:	b2d2      	uxtb	r2, r2
   2df90:	701a      	strb	r2, [r3, #0]
			break;
   2df92:	e056      	b.n	2e042 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2df94:	68fb      	ldr	r3, [r7, #12]
   2df96:	6a1a      	ldr	r2, [r3, #32]
   2df98:	68bb      	ldr	r3, [r7, #8]
   2df9a:	09db      	lsrs	r3, r3, #7
   2df9c:	18d2      	adds	r2, r2, r3
   2df9e:	231f      	movs	r3, #31
   2dfa0:	18fc      	adds	r4, r7, r3
   2dfa2:	68fb      	ldr	r3, [r7, #12]
   2dfa4:	0011      	movs	r1, r2
   2dfa6:	0018      	movs	r0, r3
   2dfa8:	4b2b      	ldr	r3, [pc, #172]	; (2e058 <put_fat+0x238>)
   2dfaa:	4798      	blx	r3
   2dfac:	0003      	movs	r3, r0
   2dfae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dfb0:	231f      	movs	r3, #31
   2dfb2:	18fb      	adds	r3, r7, r3
   2dfb4:	781b      	ldrb	r3, [r3, #0]
   2dfb6:	2b00      	cmp	r3, #0
   2dfb8:	d142      	bne.n	2e040 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2dfba:	68bb      	ldr	r3, [r7, #8]
   2dfbc:	009a      	lsls	r2, r3, #2
   2dfbe:	23fe      	movs	r3, #254	; 0xfe
   2dfc0:	005b      	lsls	r3, r3, #1
   2dfc2:	4013      	ands	r3, r2
   2dfc4:	3330      	adds	r3, #48	; 0x30
   2dfc6:	68fa      	ldr	r2, [r7, #12]
   2dfc8:	18d3      	adds	r3, r2, r3
   2dfca:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2dfcc:	697b      	ldr	r3, [r7, #20]
   2dfce:	3303      	adds	r3, #3
   2dfd0:	781b      	ldrb	r3, [r3, #0]
   2dfd2:	061a      	lsls	r2, r3, #24
   2dfd4:	697b      	ldr	r3, [r7, #20]
   2dfd6:	3302      	adds	r3, #2
   2dfd8:	781b      	ldrb	r3, [r3, #0]
   2dfda:	041b      	lsls	r3, r3, #16
   2dfdc:	4313      	orrs	r3, r2
   2dfde:	697a      	ldr	r2, [r7, #20]
   2dfe0:	3201      	adds	r2, #1
   2dfe2:	7812      	ldrb	r2, [r2, #0]
   2dfe4:	0212      	lsls	r2, r2, #8
   2dfe6:	4313      	orrs	r3, r2
   2dfe8:	697a      	ldr	r2, [r7, #20]
   2dfea:	7812      	ldrb	r2, [r2, #0]
   2dfec:	4313      	orrs	r3, r2
   2dfee:	0f1b      	lsrs	r3, r3, #28
   2dff0:	071b      	lsls	r3, r3, #28
   2dff2:	687a      	ldr	r2, [r7, #4]
   2dff4:	4313      	orrs	r3, r2
   2dff6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2dff8:	687b      	ldr	r3, [r7, #4]
   2dffa:	b2da      	uxtb	r2, r3
   2dffc:	697b      	ldr	r3, [r7, #20]
   2dffe:	701a      	strb	r2, [r3, #0]
   2e000:	697b      	ldr	r3, [r7, #20]
   2e002:	3301      	adds	r3, #1
   2e004:	687a      	ldr	r2, [r7, #4]
   2e006:	b292      	uxth	r2, r2
   2e008:	0a12      	lsrs	r2, r2, #8
   2e00a:	b292      	uxth	r2, r2
   2e00c:	b2d2      	uxtb	r2, r2
   2e00e:	701a      	strb	r2, [r3, #0]
   2e010:	697b      	ldr	r3, [r7, #20]
   2e012:	3302      	adds	r3, #2
   2e014:	687a      	ldr	r2, [r7, #4]
   2e016:	0c12      	lsrs	r2, r2, #16
   2e018:	b2d2      	uxtb	r2, r2
   2e01a:	701a      	strb	r2, [r3, #0]
   2e01c:	697b      	ldr	r3, [r7, #20]
   2e01e:	3303      	adds	r3, #3
   2e020:	687a      	ldr	r2, [r7, #4]
   2e022:	0e12      	lsrs	r2, r2, #24
   2e024:	b2d2      	uxtb	r2, r2
   2e026:	701a      	strb	r2, [r3, #0]
			break;
   2e028:	e00b      	b.n	2e042 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2e02a:	231f      	movs	r3, #31
   2e02c:	18fb      	adds	r3, r7, r3
   2e02e:	2202      	movs	r2, #2
   2e030:	701a      	strb	r2, [r3, #0]
   2e032:	e006      	b.n	2e042 <put_fat+0x222>
			if (res != FR_OK) break;
   2e034:	46c0      	nop			; (mov r8, r8)
   2e036:	e004      	b.n	2e042 <put_fat+0x222>
			if (res != FR_OK) break;
   2e038:	46c0      	nop			; (mov r8, r8)
   2e03a:	e002      	b.n	2e042 <put_fat+0x222>
			if (res != FR_OK) break;
   2e03c:	46c0      	nop			; (mov r8, r8)
   2e03e:	e000      	b.n	2e042 <put_fat+0x222>
			if (res != FR_OK) break;
   2e040:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2e042:	68fb      	ldr	r3, [r7, #12]
   2e044:	2201      	movs	r2, #1
   2e046:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2e048:	231f      	movs	r3, #31
   2e04a:	18fb      	adds	r3, r7, r3
   2e04c:	781b      	ldrb	r3, [r3, #0]
}
   2e04e:	0018      	movs	r0, r3
   2e050:	46bd      	mov	sp, r7
   2e052:	b009      	add	sp, #36	; 0x24
   2e054:	bd90      	pop	{r4, r7, pc}
   2e056:	46c0      	nop			; (mov r8, r8)
   2e058:	0002da1d 	.word	0x0002da1d

0002e05c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2e05c:	b590      	push	{r4, r7, lr}
   2e05e:	b085      	sub	sp, #20
   2e060:	af00      	add	r7, sp, #0
   2e062:	6078      	str	r0, [r7, #4]
   2e064:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2e066:	683b      	ldr	r3, [r7, #0]
   2e068:	2b01      	cmp	r3, #1
   2e06a:	d904      	bls.n	2e076 <remove_chain+0x1a>
   2e06c:	687b      	ldr	r3, [r7, #4]
   2e06e:	699a      	ldr	r2, [r3, #24]
   2e070:	683b      	ldr	r3, [r7, #0]
   2e072:	429a      	cmp	r2, r3
   2e074:	d804      	bhi.n	2e080 <remove_chain+0x24>
		res = FR_INT_ERR;
   2e076:	230f      	movs	r3, #15
   2e078:	18fb      	adds	r3, r7, r3
   2e07a:	2202      	movs	r2, #2
   2e07c:	701a      	strb	r2, [r3, #0]
   2e07e:	e045      	b.n	2e10c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2e080:	230f      	movs	r3, #15
   2e082:	18fb      	adds	r3, r7, r3
   2e084:	2200      	movs	r2, #0
   2e086:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e088:	e037      	b.n	2e0fa <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2e08a:	683a      	ldr	r2, [r7, #0]
   2e08c:	687b      	ldr	r3, [r7, #4]
   2e08e:	0011      	movs	r1, r2
   2e090:	0018      	movs	r0, r3
   2e092:	4b22      	ldr	r3, [pc, #136]	; (2e11c <remove_chain+0xc0>)
   2e094:	4798      	blx	r3
   2e096:	0003      	movs	r3, r0
   2e098:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2e09a:	68bb      	ldr	r3, [r7, #8]
   2e09c:	2b00      	cmp	r3, #0
   2e09e:	d032      	beq.n	2e106 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2e0a0:	68bb      	ldr	r3, [r7, #8]
   2e0a2:	2b01      	cmp	r3, #1
   2e0a4:	d104      	bne.n	2e0b0 <remove_chain+0x54>
   2e0a6:	230f      	movs	r3, #15
   2e0a8:	18fb      	adds	r3, r7, r3
   2e0aa:	2202      	movs	r2, #2
   2e0ac:	701a      	strb	r2, [r3, #0]
   2e0ae:	e02d      	b.n	2e10c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2e0b0:	68bb      	ldr	r3, [r7, #8]
   2e0b2:	3301      	adds	r3, #1
   2e0b4:	d104      	bne.n	2e0c0 <remove_chain+0x64>
   2e0b6:	230f      	movs	r3, #15
   2e0b8:	18fb      	adds	r3, r7, r3
   2e0ba:	2201      	movs	r2, #1
   2e0bc:	701a      	strb	r2, [r3, #0]
   2e0be:	e025      	b.n	2e10c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2e0c0:	230f      	movs	r3, #15
   2e0c2:	18fc      	adds	r4, r7, r3
   2e0c4:	6839      	ldr	r1, [r7, #0]
   2e0c6:	687b      	ldr	r3, [r7, #4]
   2e0c8:	2200      	movs	r2, #0
   2e0ca:	0018      	movs	r0, r3
   2e0cc:	4b14      	ldr	r3, [pc, #80]	; (2e120 <remove_chain+0xc4>)
   2e0ce:	4798      	blx	r3
   2e0d0:	0003      	movs	r3, r0
   2e0d2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e0d4:	230f      	movs	r3, #15
   2e0d6:	18fb      	adds	r3, r7, r3
   2e0d8:	781b      	ldrb	r3, [r3, #0]
   2e0da:	2b00      	cmp	r3, #0
   2e0dc:	d115      	bne.n	2e10a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2e0de:	687b      	ldr	r3, [r7, #4]
   2e0e0:	691b      	ldr	r3, [r3, #16]
   2e0e2:	3301      	adds	r3, #1
   2e0e4:	d007      	beq.n	2e0f6 <remove_chain+0x9a>
				fs->free_clust++;
   2e0e6:	687b      	ldr	r3, [r7, #4]
   2e0e8:	691b      	ldr	r3, [r3, #16]
   2e0ea:	1c5a      	adds	r2, r3, #1
   2e0ec:	687b      	ldr	r3, [r7, #4]
   2e0ee:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2e0f0:	687b      	ldr	r3, [r7, #4]
   2e0f2:	2201      	movs	r2, #1
   2e0f4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2e0f6:	68bb      	ldr	r3, [r7, #8]
   2e0f8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e0fa:	687b      	ldr	r3, [r7, #4]
   2e0fc:	699a      	ldr	r2, [r3, #24]
   2e0fe:	683b      	ldr	r3, [r7, #0]
   2e100:	429a      	cmp	r2, r3
   2e102:	d8c2      	bhi.n	2e08a <remove_chain+0x2e>
   2e104:	e002      	b.n	2e10c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2e106:	46c0      	nop			; (mov r8, r8)
   2e108:	e000      	b.n	2e10c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2e10a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2e10c:	230f      	movs	r3, #15
   2e10e:	18fb      	adds	r3, r7, r3
   2e110:	781b      	ldrb	r3, [r3, #0]
}
   2e112:	0018      	movs	r0, r3
   2e114:	46bd      	mov	sp, r7
   2e116:	b005      	add	sp, #20
   2e118:	bd90      	pop	{r4, r7, pc}
   2e11a:	46c0      	nop			; (mov r8, r8)
   2e11c:	0002dcb5 	.word	0x0002dcb5
   2e120:	0002de21 	.word	0x0002de21

0002e124 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2e124:	b590      	push	{r4, r7, lr}
   2e126:	b087      	sub	sp, #28
   2e128:	af00      	add	r7, sp, #0
   2e12a:	6078      	str	r0, [r7, #4]
   2e12c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2e12e:	683b      	ldr	r3, [r7, #0]
   2e130:	2b00      	cmp	r3, #0
   2e132:	d10d      	bne.n	2e150 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2e134:	687b      	ldr	r3, [r7, #4]
   2e136:	68db      	ldr	r3, [r3, #12]
   2e138:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2e13a:	693b      	ldr	r3, [r7, #16]
   2e13c:	2b00      	cmp	r3, #0
   2e13e:	d004      	beq.n	2e14a <create_chain+0x26>
   2e140:	687b      	ldr	r3, [r7, #4]
   2e142:	699a      	ldr	r2, [r3, #24]
   2e144:	693b      	ldr	r3, [r7, #16]
   2e146:	429a      	cmp	r2, r3
   2e148:	d818      	bhi.n	2e17c <create_chain+0x58>
   2e14a:	2301      	movs	r3, #1
   2e14c:	613b      	str	r3, [r7, #16]
   2e14e:	e015      	b.n	2e17c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2e150:	683a      	ldr	r2, [r7, #0]
   2e152:	687b      	ldr	r3, [r7, #4]
   2e154:	0011      	movs	r1, r2
   2e156:	0018      	movs	r0, r3
   2e158:	4b3e      	ldr	r3, [pc, #248]	; (2e254 <create_chain+0x130>)
   2e15a:	4798      	blx	r3
   2e15c:	0003      	movs	r3, r0
   2e15e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2e160:	68bb      	ldr	r3, [r7, #8]
   2e162:	2b01      	cmp	r3, #1
   2e164:	d801      	bhi.n	2e16a <create_chain+0x46>
   2e166:	2301      	movs	r3, #1
   2e168:	e070      	b.n	2e24c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2e16a:	687b      	ldr	r3, [r7, #4]
   2e16c:	699a      	ldr	r2, [r3, #24]
   2e16e:	68bb      	ldr	r3, [r7, #8]
   2e170:	429a      	cmp	r2, r3
   2e172:	d901      	bls.n	2e178 <create_chain+0x54>
   2e174:	68bb      	ldr	r3, [r7, #8]
   2e176:	e069      	b.n	2e24c <create_chain+0x128>
		scl = clst;
   2e178:	683b      	ldr	r3, [r7, #0]
   2e17a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2e17c:	693b      	ldr	r3, [r7, #16]
   2e17e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2e180:	697b      	ldr	r3, [r7, #20]
   2e182:	3301      	adds	r3, #1
   2e184:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2e186:	687b      	ldr	r3, [r7, #4]
   2e188:	699a      	ldr	r2, [r3, #24]
   2e18a:	697b      	ldr	r3, [r7, #20]
   2e18c:	429a      	cmp	r2, r3
   2e18e:	d807      	bhi.n	2e1a0 <create_chain+0x7c>
			ncl = 2;
   2e190:	2302      	movs	r3, #2
   2e192:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2e194:	697a      	ldr	r2, [r7, #20]
   2e196:	693b      	ldr	r3, [r7, #16]
   2e198:	429a      	cmp	r2, r3
   2e19a:	d901      	bls.n	2e1a0 <create_chain+0x7c>
   2e19c:	2300      	movs	r3, #0
   2e19e:	e055      	b.n	2e24c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2e1a0:	697a      	ldr	r2, [r7, #20]
   2e1a2:	687b      	ldr	r3, [r7, #4]
   2e1a4:	0011      	movs	r1, r2
   2e1a6:	0018      	movs	r0, r3
   2e1a8:	4b2a      	ldr	r3, [pc, #168]	; (2e254 <create_chain+0x130>)
   2e1aa:	4798      	blx	r3
   2e1ac:	0003      	movs	r3, r0
   2e1ae:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2e1b0:	68bb      	ldr	r3, [r7, #8]
   2e1b2:	2b00      	cmp	r3, #0
   2e1b4:	d00d      	beq.n	2e1d2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2e1b6:	68bb      	ldr	r3, [r7, #8]
   2e1b8:	3301      	adds	r3, #1
   2e1ba:	d002      	beq.n	2e1c2 <create_chain+0x9e>
   2e1bc:	68bb      	ldr	r3, [r7, #8]
   2e1be:	2b01      	cmp	r3, #1
   2e1c0:	d101      	bne.n	2e1c6 <create_chain+0xa2>
			return cs;
   2e1c2:	68bb      	ldr	r3, [r7, #8]
   2e1c4:	e042      	b.n	2e24c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2e1c6:	697a      	ldr	r2, [r7, #20]
   2e1c8:	693b      	ldr	r3, [r7, #16]
   2e1ca:	429a      	cmp	r2, r3
   2e1cc:	d1d8      	bne.n	2e180 <create_chain+0x5c>
   2e1ce:	2300      	movs	r3, #0
   2e1d0:	e03c      	b.n	2e24c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2e1d2:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2e1d4:	230f      	movs	r3, #15
   2e1d6:	18fc      	adds	r4, r7, r3
   2e1d8:	4a1f      	ldr	r2, [pc, #124]	; (2e258 <create_chain+0x134>)
   2e1da:	6979      	ldr	r1, [r7, #20]
   2e1dc:	687b      	ldr	r3, [r7, #4]
   2e1de:	0018      	movs	r0, r3
   2e1e0:	4b1e      	ldr	r3, [pc, #120]	; (2e25c <create_chain+0x138>)
   2e1e2:	4798      	blx	r3
   2e1e4:	0003      	movs	r3, r0
   2e1e6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2e1e8:	230f      	movs	r3, #15
   2e1ea:	18fb      	adds	r3, r7, r3
   2e1ec:	781b      	ldrb	r3, [r3, #0]
   2e1ee:	2b00      	cmp	r3, #0
   2e1f0:	d10c      	bne.n	2e20c <create_chain+0xe8>
   2e1f2:	683b      	ldr	r3, [r7, #0]
   2e1f4:	2b00      	cmp	r3, #0
   2e1f6:	d009      	beq.n	2e20c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2e1f8:	230f      	movs	r3, #15
   2e1fa:	18fc      	adds	r4, r7, r3
   2e1fc:	697a      	ldr	r2, [r7, #20]
   2e1fe:	6839      	ldr	r1, [r7, #0]
   2e200:	687b      	ldr	r3, [r7, #4]
   2e202:	0018      	movs	r0, r3
   2e204:	4b15      	ldr	r3, [pc, #84]	; (2e25c <create_chain+0x138>)
   2e206:	4798      	blx	r3
   2e208:	0003      	movs	r3, r0
   2e20a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2e20c:	230f      	movs	r3, #15
   2e20e:	18fb      	adds	r3, r7, r3
   2e210:	781b      	ldrb	r3, [r3, #0]
   2e212:	2b00      	cmp	r3, #0
   2e214:	d10f      	bne.n	2e236 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2e216:	687b      	ldr	r3, [r7, #4]
   2e218:	697a      	ldr	r2, [r7, #20]
   2e21a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2e21c:	687b      	ldr	r3, [r7, #4]
   2e21e:	691b      	ldr	r3, [r3, #16]
   2e220:	3301      	adds	r3, #1
   2e222:	d012      	beq.n	2e24a <create_chain+0x126>
			fs->free_clust--;
   2e224:	687b      	ldr	r3, [r7, #4]
   2e226:	691b      	ldr	r3, [r3, #16]
   2e228:	1e5a      	subs	r2, r3, #1
   2e22a:	687b      	ldr	r3, [r7, #4]
   2e22c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2e22e:	687b      	ldr	r3, [r7, #4]
   2e230:	2201      	movs	r2, #1
   2e232:	715a      	strb	r2, [r3, #5]
   2e234:	e009      	b.n	2e24a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2e236:	230f      	movs	r3, #15
   2e238:	18fb      	adds	r3, r7, r3
   2e23a:	781b      	ldrb	r3, [r3, #0]
   2e23c:	2b01      	cmp	r3, #1
   2e23e:	d102      	bne.n	2e246 <create_chain+0x122>
   2e240:	2301      	movs	r3, #1
   2e242:	425b      	negs	r3, r3
   2e244:	e000      	b.n	2e248 <create_chain+0x124>
   2e246:	2301      	movs	r3, #1
   2e248:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2e24a:	697b      	ldr	r3, [r7, #20]
}
   2e24c:	0018      	movs	r0, r3
   2e24e:	46bd      	mov	sp, r7
   2e250:	b007      	add	sp, #28
   2e252:	bd90      	pop	{r4, r7, pc}
   2e254:	0002dcb5 	.word	0x0002dcb5
   2e258:	0fffffff 	.word	0x0fffffff
   2e25c:	0002de21 	.word	0x0002de21

0002e260 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2e260:	b580      	push	{r7, lr}
   2e262:	b084      	sub	sp, #16
   2e264:	af00      	add	r7, sp, #0
   2e266:	6078      	str	r0, [r7, #4]
   2e268:	000a      	movs	r2, r1
   2e26a:	1cbb      	adds	r3, r7, #2
   2e26c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2e26e:	687b      	ldr	r3, [r7, #4]
   2e270:	1cba      	adds	r2, r7, #2
   2e272:	8812      	ldrh	r2, [r2, #0]
   2e274:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2e276:	687b      	ldr	r3, [r7, #4]
   2e278:	689b      	ldr	r3, [r3, #8]
   2e27a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2e27c:	68fb      	ldr	r3, [r7, #12]
   2e27e:	2b01      	cmp	r3, #1
   2e280:	d005      	beq.n	2e28e <dir_sdi+0x2e>
   2e282:	687b      	ldr	r3, [r7, #4]
   2e284:	681b      	ldr	r3, [r3, #0]
   2e286:	699a      	ldr	r2, [r3, #24]
   2e288:	68fb      	ldr	r3, [r7, #12]
   2e28a:	429a      	cmp	r2, r3
   2e28c:	d801      	bhi.n	2e292 <dir_sdi+0x32>
		return FR_INT_ERR;
   2e28e:	2302      	movs	r3, #2
   2e290:	e075      	b.n	2e37e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2e292:	68fb      	ldr	r3, [r7, #12]
   2e294:	2b00      	cmp	r3, #0
   2e296:	d108      	bne.n	2e2aa <dir_sdi+0x4a>
   2e298:	687b      	ldr	r3, [r7, #4]
   2e29a:	681b      	ldr	r3, [r3, #0]
   2e29c:	781b      	ldrb	r3, [r3, #0]
   2e29e:	2b03      	cmp	r3, #3
   2e2a0:	d103      	bne.n	2e2aa <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2e2a2:	687b      	ldr	r3, [r7, #4]
   2e2a4:	681b      	ldr	r3, [r3, #0]
   2e2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e2a8:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2e2aa:	68fb      	ldr	r3, [r7, #12]
   2e2ac:	2b00      	cmp	r3, #0
   2e2ae:	d116      	bne.n	2e2de <dir_sdi+0x7e>
		dj->clust = clst;
   2e2b0:	687b      	ldr	r3, [r7, #4]
   2e2b2:	68fa      	ldr	r2, [r7, #12]
   2e2b4:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2e2b6:	687b      	ldr	r3, [r7, #4]
   2e2b8:	681b      	ldr	r3, [r3, #0]
   2e2ba:	891b      	ldrh	r3, [r3, #8]
   2e2bc:	1cba      	adds	r2, r7, #2
   2e2be:	8812      	ldrh	r2, [r2, #0]
   2e2c0:	429a      	cmp	r2, r3
   2e2c2:	d301      	bcc.n	2e2c8 <dir_sdi+0x68>
			return FR_INT_ERR;
   2e2c4:	2302      	movs	r3, #2
   2e2c6:	e05a      	b.n	2e37e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2e2c8:	687b      	ldr	r3, [r7, #4]
   2e2ca:	681b      	ldr	r3, [r3, #0]
   2e2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e2ce:	1cba      	adds	r2, r7, #2
   2e2d0:	8812      	ldrh	r2, [r2, #0]
   2e2d2:	0912      	lsrs	r2, r2, #4
   2e2d4:	b292      	uxth	r2, r2
   2e2d6:	189a      	adds	r2, r3, r2
   2e2d8:	687b      	ldr	r3, [r7, #4]
   2e2da:	611a      	str	r2, [r3, #16]
   2e2dc:	e042      	b.n	2e364 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2e2de:	687b      	ldr	r3, [r7, #4]
   2e2e0:	681b      	ldr	r3, [r3, #0]
   2e2e2:	789b      	ldrb	r3, [r3, #2]
   2e2e4:	b29a      	uxth	r2, r3
   2e2e6:	230a      	movs	r3, #10
   2e2e8:	18fb      	adds	r3, r7, r3
   2e2ea:	0112      	lsls	r2, r2, #4
   2e2ec:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2e2ee:	e020      	b.n	2e332 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2e2f0:	687b      	ldr	r3, [r7, #4]
   2e2f2:	681b      	ldr	r3, [r3, #0]
   2e2f4:	68fa      	ldr	r2, [r7, #12]
   2e2f6:	0011      	movs	r1, r2
   2e2f8:	0018      	movs	r0, r3
   2e2fa:	4b23      	ldr	r3, [pc, #140]	; (2e388 <dir_sdi+0x128>)
   2e2fc:	4798      	blx	r3
   2e2fe:	0003      	movs	r3, r0
   2e300:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2e302:	68fb      	ldr	r3, [r7, #12]
   2e304:	3301      	adds	r3, #1
   2e306:	d101      	bne.n	2e30c <dir_sdi+0xac>
   2e308:	2301      	movs	r3, #1
   2e30a:	e038      	b.n	2e37e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2e30c:	68fb      	ldr	r3, [r7, #12]
   2e30e:	2b01      	cmp	r3, #1
   2e310:	d905      	bls.n	2e31e <dir_sdi+0xbe>
   2e312:	687b      	ldr	r3, [r7, #4]
   2e314:	681b      	ldr	r3, [r3, #0]
   2e316:	699a      	ldr	r2, [r3, #24]
   2e318:	68fb      	ldr	r3, [r7, #12]
   2e31a:	429a      	cmp	r2, r3
   2e31c:	d801      	bhi.n	2e322 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2e31e:	2302      	movs	r3, #2
   2e320:	e02d      	b.n	2e37e <dir_sdi+0x11e>
			idx -= ic;
   2e322:	1cbb      	adds	r3, r7, #2
   2e324:	1cb9      	adds	r1, r7, #2
   2e326:	220a      	movs	r2, #10
   2e328:	18ba      	adds	r2, r7, r2
   2e32a:	8809      	ldrh	r1, [r1, #0]
   2e32c:	8812      	ldrh	r2, [r2, #0]
   2e32e:	1a8a      	subs	r2, r1, r2
   2e330:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2e332:	1cba      	adds	r2, r7, #2
   2e334:	230a      	movs	r3, #10
   2e336:	18fb      	adds	r3, r7, r3
   2e338:	8812      	ldrh	r2, [r2, #0]
   2e33a:	881b      	ldrh	r3, [r3, #0]
   2e33c:	429a      	cmp	r2, r3
   2e33e:	d2d7      	bcs.n	2e2f0 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2e340:	687b      	ldr	r3, [r7, #4]
   2e342:	68fa      	ldr	r2, [r7, #12]
   2e344:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2e346:	687b      	ldr	r3, [r7, #4]
   2e348:	681b      	ldr	r3, [r3, #0]
   2e34a:	68fa      	ldr	r2, [r7, #12]
   2e34c:	0011      	movs	r1, r2
   2e34e:	0018      	movs	r0, r3
   2e350:	4b0e      	ldr	r3, [pc, #56]	; (2e38c <dir_sdi+0x12c>)
   2e352:	4798      	blx	r3
   2e354:	0002      	movs	r2, r0
   2e356:	1cbb      	adds	r3, r7, #2
   2e358:	881b      	ldrh	r3, [r3, #0]
   2e35a:	091b      	lsrs	r3, r3, #4
   2e35c:	b29b      	uxth	r3, r3
   2e35e:	18d2      	adds	r2, r2, r3
   2e360:	687b      	ldr	r3, [r7, #4]
   2e362:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2e364:	687b      	ldr	r3, [r7, #4]
   2e366:	681b      	ldr	r3, [r3, #0]
   2e368:	3330      	adds	r3, #48	; 0x30
   2e36a:	001a      	movs	r2, r3
   2e36c:	1cbb      	adds	r3, r7, #2
   2e36e:	881b      	ldrh	r3, [r3, #0]
   2e370:	210f      	movs	r1, #15
   2e372:	400b      	ands	r3, r1
   2e374:	015b      	lsls	r3, r3, #5
   2e376:	18d2      	adds	r2, r2, r3
   2e378:	687b      	ldr	r3, [r7, #4]
   2e37a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2e37c:	2300      	movs	r3, #0
}
   2e37e:	0018      	movs	r0, r3
   2e380:	46bd      	mov	sp, r7
   2e382:	b004      	add	sp, #16
   2e384:	bd80      	pop	{r7, pc}
   2e386:	46c0      	nop			; (mov r8, r8)
   2e388:	0002dcb5 	.word	0x0002dcb5
   2e38c:	0002dc7d 	.word	0x0002dc7d

0002e390 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2e390:	b590      	push	{r4, r7, lr}
   2e392:	b085      	sub	sp, #20
   2e394:	af00      	add	r7, sp, #0
   2e396:	6078      	str	r0, [r7, #4]
   2e398:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2e39a:	687b      	ldr	r3, [r7, #4]
   2e39c:	88da      	ldrh	r2, [r3, #6]
   2e39e:	2308      	movs	r3, #8
   2e3a0:	18fb      	adds	r3, r7, r3
   2e3a2:	3201      	adds	r2, #1
   2e3a4:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2e3a6:	2308      	movs	r3, #8
   2e3a8:	18fb      	adds	r3, r7, r3
   2e3aa:	881b      	ldrh	r3, [r3, #0]
   2e3ac:	2b00      	cmp	r3, #0
   2e3ae:	d003      	beq.n	2e3b8 <dir_next+0x28>
   2e3b0:	687b      	ldr	r3, [r7, #4]
   2e3b2:	691b      	ldr	r3, [r3, #16]
   2e3b4:	2b00      	cmp	r3, #0
   2e3b6:	d101      	bne.n	2e3bc <dir_next+0x2c>
		return FR_NO_FILE;
   2e3b8:	2304      	movs	r3, #4
   2e3ba:	e0d2      	b.n	2e562 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2e3bc:	2308      	movs	r3, #8
   2e3be:	18fb      	adds	r3, r7, r3
   2e3c0:	881b      	ldrh	r3, [r3, #0]
   2e3c2:	220f      	movs	r2, #15
   2e3c4:	4013      	ands	r3, r2
   2e3c6:	b29b      	uxth	r3, r3
   2e3c8:	2b00      	cmp	r3, #0
   2e3ca:	d000      	beq.n	2e3ce <dir_next+0x3e>
   2e3cc:	e0b6      	b.n	2e53c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2e3ce:	687b      	ldr	r3, [r7, #4]
   2e3d0:	691b      	ldr	r3, [r3, #16]
   2e3d2:	1c5a      	adds	r2, r3, #1
   2e3d4:	687b      	ldr	r3, [r7, #4]
   2e3d6:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2e3d8:	687b      	ldr	r3, [r7, #4]
   2e3da:	68db      	ldr	r3, [r3, #12]
   2e3dc:	2b00      	cmp	r3, #0
   2e3de:	d10a      	bne.n	2e3f6 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2e3e0:	687b      	ldr	r3, [r7, #4]
   2e3e2:	681b      	ldr	r3, [r3, #0]
   2e3e4:	891b      	ldrh	r3, [r3, #8]
   2e3e6:	2208      	movs	r2, #8
   2e3e8:	18ba      	adds	r2, r7, r2
   2e3ea:	8812      	ldrh	r2, [r2, #0]
   2e3ec:	429a      	cmp	r2, r3
   2e3ee:	d200      	bcs.n	2e3f2 <dir_next+0x62>
   2e3f0:	e0a4      	b.n	2e53c <dir_next+0x1ac>
				return FR_NO_FILE;
   2e3f2:	2304      	movs	r3, #4
   2e3f4:	e0b5      	b.n	2e562 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2e3f6:	2308      	movs	r3, #8
   2e3f8:	18fb      	adds	r3, r7, r3
   2e3fa:	881b      	ldrh	r3, [r3, #0]
   2e3fc:	091b      	lsrs	r3, r3, #4
   2e3fe:	b29b      	uxth	r3, r3
   2e400:	001a      	movs	r2, r3
   2e402:	687b      	ldr	r3, [r7, #4]
   2e404:	681b      	ldr	r3, [r3, #0]
   2e406:	789b      	ldrb	r3, [r3, #2]
   2e408:	3b01      	subs	r3, #1
   2e40a:	4013      	ands	r3, r2
   2e40c:	d000      	beq.n	2e410 <dir_next+0x80>
   2e40e:	e095      	b.n	2e53c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2e410:	687b      	ldr	r3, [r7, #4]
   2e412:	681a      	ldr	r2, [r3, #0]
   2e414:	687b      	ldr	r3, [r7, #4]
   2e416:	68db      	ldr	r3, [r3, #12]
   2e418:	0019      	movs	r1, r3
   2e41a:	0010      	movs	r0, r2
   2e41c:	4b53      	ldr	r3, [pc, #332]	; (2e56c <dir_next+0x1dc>)
   2e41e:	4798      	blx	r3
   2e420:	0003      	movs	r3, r0
   2e422:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2e424:	68fb      	ldr	r3, [r7, #12]
   2e426:	2b01      	cmp	r3, #1
   2e428:	d801      	bhi.n	2e42e <dir_next+0x9e>
   2e42a:	2302      	movs	r3, #2
   2e42c:	e099      	b.n	2e562 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2e42e:	68fb      	ldr	r3, [r7, #12]
   2e430:	3301      	adds	r3, #1
   2e432:	d101      	bne.n	2e438 <dir_next+0xa8>
   2e434:	2301      	movs	r3, #1
   2e436:	e094      	b.n	2e562 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2e438:	687b      	ldr	r3, [r7, #4]
   2e43a:	681b      	ldr	r3, [r3, #0]
   2e43c:	699a      	ldr	r2, [r3, #24]
   2e43e:	68fb      	ldr	r3, [r7, #12]
   2e440:	429a      	cmp	r2, r3
   2e442:	d900      	bls.n	2e446 <dir_next+0xb6>
   2e444:	e06d      	b.n	2e522 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2e446:	683b      	ldr	r3, [r7, #0]
   2e448:	2b00      	cmp	r3, #0
   2e44a:	d101      	bne.n	2e450 <dir_next+0xc0>
   2e44c:	2304      	movs	r3, #4
   2e44e:	e088      	b.n	2e562 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2e450:	687b      	ldr	r3, [r7, #4]
   2e452:	681a      	ldr	r2, [r3, #0]
   2e454:	687b      	ldr	r3, [r7, #4]
   2e456:	68db      	ldr	r3, [r3, #12]
   2e458:	0019      	movs	r1, r3
   2e45a:	0010      	movs	r0, r2
   2e45c:	4b44      	ldr	r3, [pc, #272]	; (2e570 <dir_next+0x1e0>)
   2e45e:	4798      	blx	r3
   2e460:	0003      	movs	r3, r0
   2e462:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2e464:	68fb      	ldr	r3, [r7, #12]
   2e466:	2b00      	cmp	r3, #0
   2e468:	d101      	bne.n	2e46e <dir_next+0xde>
   2e46a:	2307      	movs	r3, #7
   2e46c:	e079      	b.n	2e562 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2e46e:	68fb      	ldr	r3, [r7, #12]
   2e470:	2b01      	cmp	r3, #1
   2e472:	d101      	bne.n	2e478 <dir_next+0xe8>
   2e474:	2302      	movs	r3, #2
   2e476:	e074      	b.n	2e562 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2e478:	68fb      	ldr	r3, [r7, #12]
   2e47a:	3301      	adds	r3, #1
   2e47c:	d101      	bne.n	2e482 <dir_next+0xf2>
   2e47e:	2301      	movs	r3, #1
   2e480:	e06f      	b.n	2e562 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2e482:	687b      	ldr	r3, [r7, #4]
   2e484:	681b      	ldr	r3, [r3, #0]
   2e486:	2100      	movs	r1, #0
   2e488:	0018      	movs	r0, r3
   2e48a:	4b3a      	ldr	r3, [pc, #232]	; (2e574 <dir_next+0x1e4>)
   2e48c:	4798      	blx	r3
   2e48e:	1e03      	subs	r3, r0, #0
   2e490:	d001      	beq.n	2e496 <dir_next+0x106>
   2e492:	2301      	movs	r3, #1
   2e494:	e065      	b.n	2e562 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2e496:	687b      	ldr	r3, [r7, #4]
   2e498:	681b      	ldr	r3, [r3, #0]
   2e49a:	3330      	adds	r3, #48	; 0x30
   2e49c:	0018      	movs	r0, r3
   2e49e:	2380      	movs	r3, #128	; 0x80
   2e4a0:	009b      	lsls	r3, r3, #2
   2e4a2:	001a      	movs	r2, r3
   2e4a4:	2100      	movs	r1, #0
   2e4a6:	4b34      	ldr	r3, [pc, #208]	; (2e578 <dir_next+0x1e8>)
   2e4a8:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2e4aa:	687b      	ldr	r3, [r7, #4]
   2e4ac:	681c      	ldr	r4, [r3, #0]
   2e4ae:	687b      	ldr	r3, [r7, #4]
   2e4b0:	681b      	ldr	r3, [r3, #0]
   2e4b2:	68fa      	ldr	r2, [r7, #12]
   2e4b4:	0011      	movs	r1, r2
   2e4b6:	0018      	movs	r0, r3
   2e4b8:	4b30      	ldr	r3, [pc, #192]	; (2e57c <dir_next+0x1ec>)
   2e4ba:	4798      	blx	r3
   2e4bc:	0003      	movs	r3, r0
   2e4be:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e4c0:	230b      	movs	r3, #11
   2e4c2:	18fb      	adds	r3, r7, r3
   2e4c4:	2200      	movs	r2, #0
   2e4c6:	701a      	strb	r2, [r3, #0]
   2e4c8:	e019      	b.n	2e4fe <dir_next+0x16e>
						dj->fs->wflag = 1;
   2e4ca:	687b      	ldr	r3, [r7, #4]
   2e4cc:	681b      	ldr	r3, [r3, #0]
   2e4ce:	2201      	movs	r2, #1
   2e4d0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2e4d2:	687b      	ldr	r3, [r7, #4]
   2e4d4:	681b      	ldr	r3, [r3, #0]
   2e4d6:	2100      	movs	r1, #0
   2e4d8:	0018      	movs	r0, r3
   2e4da:	4b26      	ldr	r3, [pc, #152]	; (2e574 <dir_next+0x1e4>)
   2e4dc:	4798      	blx	r3
   2e4de:	1e03      	subs	r3, r0, #0
   2e4e0:	d001      	beq.n	2e4e6 <dir_next+0x156>
   2e4e2:	2301      	movs	r3, #1
   2e4e4:	e03d      	b.n	2e562 <dir_next+0x1d2>
						dj->fs->winsect++;
   2e4e6:	687b      	ldr	r3, [r7, #4]
   2e4e8:	681b      	ldr	r3, [r3, #0]
   2e4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e4ec:	3201      	adds	r2, #1
   2e4ee:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e4f0:	230b      	movs	r3, #11
   2e4f2:	18fb      	adds	r3, r7, r3
   2e4f4:	781a      	ldrb	r2, [r3, #0]
   2e4f6:	230b      	movs	r3, #11
   2e4f8:	18fb      	adds	r3, r7, r3
   2e4fa:	3201      	adds	r2, #1
   2e4fc:	701a      	strb	r2, [r3, #0]
   2e4fe:	687b      	ldr	r3, [r7, #4]
   2e500:	681b      	ldr	r3, [r3, #0]
   2e502:	789b      	ldrb	r3, [r3, #2]
   2e504:	220b      	movs	r2, #11
   2e506:	18ba      	adds	r2, r7, r2
   2e508:	7812      	ldrb	r2, [r2, #0]
   2e50a:	429a      	cmp	r2, r3
   2e50c:	d3dd      	bcc.n	2e4ca <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2e50e:	687b      	ldr	r3, [r7, #4]
   2e510:	681b      	ldr	r3, [r3, #0]
   2e512:	687a      	ldr	r2, [r7, #4]
   2e514:	6812      	ldr	r2, [r2, #0]
   2e516:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2e518:	220b      	movs	r2, #11
   2e51a:	18ba      	adds	r2, r7, r2
   2e51c:	7812      	ldrb	r2, [r2, #0]
   2e51e:	1a8a      	subs	r2, r1, r2
   2e520:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2e522:	687b      	ldr	r3, [r7, #4]
   2e524:	68fa      	ldr	r2, [r7, #12]
   2e526:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2e528:	687b      	ldr	r3, [r7, #4]
   2e52a:	681b      	ldr	r3, [r3, #0]
   2e52c:	68fa      	ldr	r2, [r7, #12]
   2e52e:	0011      	movs	r1, r2
   2e530:	0018      	movs	r0, r3
   2e532:	4b12      	ldr	r3, [pc, #72]	; (2e57c <dir_next+0x1ec>)
   2e534:	4798      	blx	r3
   2e536:	0002      	movs	r2, r0
   2e538:	687b      	ldr	r3, [r7, #4]
   2e53a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2e53c:	687b      	ldr	r3, [r7, #4]
   2e53e:	2208      	movs	r2, #8
   2e540:	18ba      	adds	r2, r7, r2
   2e542:	8812      	ldrh	r2, [r2, #0]
   2e544:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2e546:	687b      	ldr	r3, [r7, #4]
   2e548:	681b      	ldr	r3, [r3, #0]
   2e54a:	3330      	adds	r3, #48	; 0x30
   2e54c:	001a      	movs	r2, r3
   2e54e:	2308      	movs	r3, #8
   2e550:	18fb      	adds	r3, r7, r3
   2e552:	881b      	ldrh	r3, [r3, #0]
   2e554:	210f      	movs	r1, #15
   2e556:	400b      	ands	r3, r1
   2e558:	015b      	lsls	r3, r3, #5
   2e55a:	18d2      	adds	r2, r2, r3
   2e55c:	687b      	ldr	r3, [r7, #4]
   2e55e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2e560:	2300      	movs	r3, #0
}
   2e562:	0018      	movs	r0, r3
   2e564:	46bd      	mov	sp, r7
   2e566:	b005      	add	sp, #20
   2e568:	bd90      	pop	{r4, r7, pc}
   2e56a:	46c0      	nop			; (mov r8, r8)
   2e56c:	0002dcb5 	.word	0x0002dcb5
   2e570:	0002e125 	.word	0x0002e125
   2e574:	0002da1d 	.word	0x0002da1d
   2e578:	0002d971 	.word	0x0002d971
   2e57c:	0002dc7d 	.word	0x0002dc7d

0002e580 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2e580:	b590      	push	{r4, r7, lr}
   2e582:	b087      	sub	sp, #28
   2e584:	af00      	add	r7, sp, #0
   2e586:	6078      	str	r0, [r7, #4]
   2e588:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2e58a:	683b      	ldr	r3, [r7, #0]
   2e58c:	781b      	ldrb	r3, [r3, #0]
   2e58e:	001a      	movs	r2, r3
   2e590:	2340      	movs	r3, #64	; 0x40
   2e592:	439a      	bics	r2, r3
   2e594:	0013      	movs	r3, r2
   2e596:	1e5a      	subs	r2, r3, #1
   2e598:	0013      	movs	r3, r2
   2e59a:	005b      	lsls	r3, r3, #1
   2e59c:	189b      	adds	r3, r3, r2
   2e59e:	009b      	lsls	r3, r3, #2
   2e5a0:	189b      	adds	r3, r3, r2
   2e5a2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2e5a4:	2300      	movs	r3, #0
   2e5a6:	613b      	str	r3, [r7, #16]
   2e5a8:	230e      	movs	r3, #14
   2e5aa:	18fb      	adds	r3, r7, r3
   2e5ac:	2201      	movs	r2, #1
   2e5ae:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2e5b0:	4a31      	ldr	r2, [pc, #196]	; (2e678 <cmp_lfn+0xf8>)
   2e5b2:	693b      	ldr	r3, [r7, #16]
   2e5b4:	18d3      	adds	r3, r2, r3
   2e5b6:	781b      	ldrb	r3, [r3, #0]
   2e5b8:	3301      	adds	r3, #1
   2e5ba:	683a      	ldr	r2, [r7, #0]
   2e5bc:	18d3      	adds	r3, r2, r3
   2e5be:	781b      	ldrb	r3, [r3, #0]
   2e5c0:	021b      	lsls	r3, r3, #8
   2e5c2:	b21a      	sxth	r2, r3
   2e5c4:	492c      	ldr	r1, [pc, #176]	; (2e678 <cmp_lfn+0xf8>)
   2e5c6:	693b      	ldr	r3, [r7, #16]
   2e5c8:	18cb      	adds	r3, r1, r3
   2e5ca:	781b      	ldrb	r3, [r3, #0]
   2e5cc:	0019      	movs	r1, r3
   2e5ce:	683b      	ldr	r3, [r7, #0]
   2e5d0:	185b      	adds	r3, r3, r1
   2e5d2:	781b      	ldrb	r3, [r3, #0]
   2e5d4:	b21b      	sxth	r3, r3
   2e5d6:	4313      	orrs	r3, r2
   2e5d8:	b21a      	sxth	r2, r3
   2e5da:	230c      	movs	r3, #12
   2e5dc:	18fb      	adds	r3, r7, r3
   2e5de:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2e5e0:	230e      	movs	r3, #14
   2e5e2:	18fb      	adds	r3, r7, r3
   2e5e4:	881b      	ldrh	r3, [r3, #0]
   2e5e6:	2b00      	cmp	r3, #0
   2e5e8:	d01f      	beq.n	2e62a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2e5ea:	230e      	movs	r3, #14
   2e5ec:	18fc      	adds	r4, r7, r3
   2e5ee:	230c      	movs	r3, #12
   2e5f0:	18fb      	adds	r3, r7, r3
   2e5f2:	881b      	ldrh	r3, [r3, #0]
   2e5f4:	0018      	movs	r0, r3
   2e5f6:	4b21      	ldr	r3, [pc, #132]	; (2e67c <cmp_lfn+0xfc>)
   2e5f8:	4798      	blx	r3
   2e5fa:	0003      	movs	r3, r0
   2e5fc:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2e5fe:	697b      	ldr	r3, [r7, #20]
   2e600:	2bfe      	cmp	r3, #254	; 0xfe
   2e602:	d810      	bhi.n	2e626 <cmp_lfn+0xa6>
   2e604:	697b      	ldr	r3, [r7, #20]
   2e606:	1c5a      	adds	r2, r3, #1
   2e608:	617a      	str	r2, [r7, #20]
   2e60a:	005b      	lsls	r3, r3, #1
   2e60c:	687a      	ldr	r2, [r7, #4]
   2e60e:	18d3      	adds	r3, r2, r3
   2e610:	881b      	ldrh	r3, [r3, #0]
   2e612:	0018      	movs	r0, r3
   2e614:	4b19      	ldr	r3, [pc, #100]	; (2e67c <cmp_lfn+0xfc>)
   2e616:	4798      	blx	r3
   2e618:	0003      	movs	r3, r0
   2e61a:	001a      	movs	r2, r3
   2e61c:	230e      	movs	r3, #14
   2e61e:	18fb      	adds	r3, r7, r3
   2e620:	881b      	ldrh	r3, [r3, #0]
   2e622:	4293      	cmp	r3, r2
   2e624:	d009      	beq.n	2e63a <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2e626:	2300      	movs	r3, #0
   2e628:	e022      	b.n	2e670 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2e62a:	230c      	movs	r3, #12
   2e62c:	18fb      	adds	r3, r7, r3
   2e62e:	881b      	ldrh	r3, [r3, #0]
   2e630:	4a13      	ldr	r2, [pc, #76]	; (2e680 <cmp_lfn+0x100>)
   2e632:	4293      	cmp	r3, r2
   2e634:	d001      	beq.n	2e63a <cmp_lfn+0xba>
   2e636:	2300      	movs	r3, #0
   2e638:	e01a      	b.n	2e670 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2e63a:	693b      	ldr	r3, [r7, #16]
   2e63c:	3301      	adds	r3, #1
   2e63e:	613b      	str	r3, [r7, #16]
   2e640:	693b      	ldr	r3, [r7, #16]
   2e642:	2b0c      	cmp	r3, #12
   2e644:	d9b4      	bls.n	2e5b0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2e646:	683b      	ldr	r3, [r7, #0]
   2e648:	781b      	ldrb	r3, [r3, #0]
   2e64a:	001a      	movs	r2, r3
   2e64c:	2340      	movs	r3, #64	; 0x40
   2e64e:	4013      	ands	r3, r2
   2e650:	d00d      	beq.n	2e66e <cmp_lfn+0xee>
   2e652:	230e      	movs	r3, #14
   2e654:	18fb      	adds	r3, r7, r3
   2e656:	881b      	ldrh	r3, [r3, #0]
   2e658:	2b00      	cmp	r3, #0
   2e65a:	d008      	beq.n	2e66e <cmp_lfn+0xee>
   2e65c:	697b      	ldr	r3, [r7, #20]
   2e65e:	005b      	lsls	r3, r3, #1
   2e660:	687a      	ldr	r2, [r7, #4]
   2e662:	18d3      	adds	r3, r2, r3
   2e664:	881b      	ldrh	r3, [r3, #0]
   2e666:	2b00      	cmp	r3, #0
   2e668:	d001      	beq.n	2e66e <cmp_lfn+0xee>
		return 0;
   2e66a:	2300      	movs	r3, #0
   2e66c:	e000      	b.n	2e670 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2e66e:	2301      	movs	r3, #1
}
   2e670:	0018      	movs	r0, r3
   2e672:	46bd      	mov	sp, r7
   2e674:	b007      	add	sp, #28
   2e676:	bd90      	pop	{r4, r7, pc}
   2e678:	0003c674 	.word	0x0003c674
   2e67c:	0003062d 	.word	0x0003062d
   2e680:	0000ffff 	.word	0x0000ffff

0002e684 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2e684:	b580      	push	{r7, lr}
   2e686:	b088      	sub	sp, #32
   2e688:	af00      	add	r7, sp, #0
   2e68a:	60f8      	str	r0, [r7, #12]
   2e68c:	60b9      	str	r1, [r7, #8]
   2e68e:	0019      	movs	r1, r3
   2e690:	1dfb      	adds	r3, r7, #7
   2e692:	701a      	strb	r2, [r3, #0]
   2e694:	1dbb      	adds	r3, r7, #6
   2e696:	1c0a      	adds	r2, r1, #0
   2e698:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2e69a:	68bb      	ldr	r3, [r7, #8]
   2e69c:	330d      	adds	r3, #13
   2e69e:	1dba      	adds	r2, r7, #6
   2e6a0:	7812      	ldrb	r2, [r2, #0]
   2e6a2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2e6a4:	68bb      	ldr	r3, [r7, #8]
   2e6a6:	330b      	adds	r3, #11
   2e6a8:	220f      	movs	r2, #15
   2e6aa:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2e6ac:	68bb      	ldr	r3, [r7, #8]
   2e6ae:	330c      	adds	r3, #12
   2e6b0:	2200      	movs	r2, #0
   2e6b2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2e6b4:	68bb      	ldr	r3, [r7, #8]
   2e6b6:	331a      	adds	r3, #26
   2e6b8:	2200      	movs	r2, #0
   2e6ba:	701a      	strb	r2, [r3, #0]
   2e6bc:	68bb      	ldr	r3, [r7, #8]
   2e6be:	331b      	adds	r3, #27
   2e6c0:	2200      	movs	r2, #0
   2e6c2:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2e6c4:	1dfb      	adds	r3, r7, #7
   2e6c6:	781b      	ldrb	r3, [r3, #0]
   2e6c8:	1e5a      	subs	r2, r3, #1
   2e6ca:	0013      	movs	r3, r2
   2e6cc:	005b      	lsls	r3, r3, #1
   2e6ce:	189b      	adds	r3, r3, r2
   2e6d0:	009b      	lsls	r3, r3, #2
   2e6d2:	189b      	adds	r3, r3, r2
   2e6d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2e6d6:	2316      	movs	r3, #22
   2e6d8:	18fb      	adds	r3, r7, r3
   2e6da:	2200      	movs	r2, #0
   2e6dc:	801a      	strh	r2, [r3, #0]
   2e6de:	2300      	movs	r3, #0
   2e6e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2e6e2:	2316      	movs	r3, #22
   2e6e4:	18fb      	adds	r3, r7, r3
   2e6e6:	881b      	ldrh	r3, [r3, #0]
   2e6e8:	4a28      	ldr	r2, [pc, #160]	; (2e78c <fit_lfn+0x108>)
   2e6ea:	4293      	cmp	r3, r2
   2e6ec:	d009      	beq.n	2e702 <fit_lfn+0x7e>
   2e6ee:	69fb      	ldr	r3, [r7, #28]
   2e6f0:	1c5a      	adds	r2, r3, #1
   2e6f2:	61fa      	str	r2, [r7, #28]
   2e6f4:	005b      	lsls	r3, r3, #1
   2e6f6:	68fa      	ldr	r2, [r7, #12]
   2e6f8:	18d2      	adds	r2, r2, r3
   2e6fa:	2316      	movs	r3, #22
   2e6fc:	18fb      	adds	r3, r7, r3
   2e6fe:	8812      	ldrh	r2, [r2, #0]
   2e700:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2e702:	4a23      	ldr	r2, [pc, #140]	; (2e790 <fit_lfn+0x10c>)
   2e704:	69bb      	ldr	r3, [r7, #24]
   2e706:	18d3      	adds	r3, r2, r3
   2e708:	781b      	ldrb	r3, [r3, #0]
   2e70a:	001a      	movs	r2, r3
   2e70c:	68bb      	ldr	r3, [r7, #8]
   2e70e:	189b      	adds	r3, r3, r2
   2e710:	2216      	movs	r2, #22
   2e712:	18ba      	adds	r2, r7, r2
   2e714:	8812      	ldrh	r2, [r2, #0]
   2e716:	b2d2      	uxtb	r2, r2
   2e718:	701a      	strb	r2, [r3, #0]
   2e71a:	4a1d      	ldr	r2, [pc, #116]	; (2e790 <fit_lfn+0x10c>)
   2e71c:	69bb      	ldr	r3, [r7, #24]
   2e71e:	18d3      	adds	r3, r2, r3
   2e720:	781b      	ldrb	r3, [r3, #0]
   2e722:	3301      	adds	r3, #1
   2e724:	68ba      	ldr	r2, [r7, #8]
   2e726:	18d3      	adds	r3, r2, r3
   2e728:	2216      	movs	r2, #22
   2e72a:	18ba      	adds	r2, r7, r2
   2e72c:	8812      	ldrh	r2, [r2, #0]
   2e72e:	0a12      	lsrs	r2, r2, #8
   2e730:	b292      	uxth	r2, r2
   2e732:	b2d2      	uxtb	r2, r2
   2e734:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2e736:	2316      	movs	r3, #22
   2e738:	18fb      	adds	r3, r7, r3
   2e73a:	881b      	ldrh	r3, [r3, #0]
   2e73c:	2b00      	cmp	r3, #0
   2e73e:	d104      	bne.n	2e74a <fit_lfn+0xc6>
   2e740:	2316      	movs	r3, #22
   2e742:	18fb      	adds	r3, r7, r3
   2e744:	2201      	movs	r2, #1
   2e746:	4252      	negs	r2, r2
   2e748:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2e74a:	69bb      	ldr	r3, [r7, #24]
   2e74c:	3301      	adds	r3, #1
   2e74e:	61bb      	str	r3, [r7, #24]
   2e750:	69bb      	ldr	r3, [r7, #24]
   2e752:	2b0c      	cmp	r3, #12
   2e754:	d9c5      	bls.n	2e6e2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2e756:	2316      	movs	r3, #22
   2e758:	18fb      	adds	r3, r7, r3
   2e75a:	881b      	ldrh	r3, [r3, #0]
   2e75c:	4a0b      	ldr	r2, [pc, #44]	; (2e78c <fit_lfn+0x108>)
   2e75e:	4293      	cmp	r3, r2
   2e760:	d006      	beq.n	2e770 <fit_lfn+0xec>
   2e762:	69fb      	ldr	r3, [r7, #28]
   2e764:	005b      	lsls	r3, r3, #1
   2e766:	68fa      	ldr	r2, [r7, #12]
   2e768:	18d3      	adds	r3, r2, r3
   2e76a:	881b      	ldrh	r3, [r3, #0]
   2e76c:	2b00      	cmp	r3, #0
   2e76e:	d105      	bne.n	2e77c <fit_lfn+0xf8>
   2e770:	1dfb      	adds	r3, r7, #7
   2e772:	1dfa      	adds	r2, r7, #7
   2e774:	7812      	ldrb	r2, [r2, #0]
   2e776:	2140      	movs	r1, #64	; 0x40
   2e778:	430a      	orrs	r2, r1
   2e77a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2e77c:	68bb      	ldr	r3, [r7, #8]
   2e77e:	1dfa      	adds	r2, r7, #7
   2e780:	7812      	ldrb	r2, [r2, #0]
   2e782:	701a      	strb	r2, [r3, #0]
}
   2e784:	46c0      	nop			; (mov r8, r8)
   2e786:	46bd      	mov	sp, r7
   2e788:	b008      	add	sp, #32
   2e78a:	bd80      	pop	{r7, pc}
   2e78c:	0000ffff 	.word	0x0000ffff
   2e790:	0003c674 	.word	0x0003c674

0002e794 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2e794:	b580      	push	{r7, lr}
   2e796:	b08a      	sub	sp, #40	; 0x28
   2e798:	af00      	add	r7, sp, #0
   2e79a:	60f8      	str	r0, [r7, #12]
   2e79c:	60b9      	str	r1, [r7, #8]
   2e79e:	607a      	str	r2, [r7, #4]
   2e7a0:	001a      	movs	r2, r3
   2e7a2:	1cbb      	adds	r3, r7, #2
   2e7a4:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2e7a6:	68b9      	ldr	r1, [r7, #8]
   2e7a8:	68fb      	ldr	r3, [r7, #12]
   2e7aa:	220b      	movs	r2, #11
   2e7ac:	0018      	movs	r0, r3
   2e7ae:	4b38      	ldr	r3, [pc, #224]	; (2e890 <gen_numname+0xfc>)
   2e7b0:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2e7b2:	1cbb      	adds	r3, r7, #2
   2e7b4:	881b      	ldrh	r3, [r3, #0]
   2e7b6:	2b05      	cmp	r3, #5
   2e7b8:	d911      	bls.n	2e7de <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2e7ba:	1cbb      	adds	r3, r7, #2
   2e7bc:	881b      	ldrh	r3, [r3, #0]
   2e7be:	b29a      	uxth	r2, r3
   2e7c0:	0852      	lsrs	r2, r2, #1
   2e7c2:	03db      	lsls	r3, r3, #15
   2e7c4:	4313      	orrs	r3, r2
   2e7c6:	b299      	uxth	r1, r3
   2e7c8:	687b      	ldr	r3, [r7, #4]
   2e7ca:	1c9a      	adds	r2, r3, #2
   2e7cc:	607a      	str	r2, [r7, #4]
   2e7ce:	881a      	ldrh	r2, [r3, #0]
   2e7d0:	1cbb      	adds	r3, r7, #2
   2e7d2:	188a      	adds	r2, r1, r2
   2e7d4:	801a      	strh	r2, [r3, #0]
   2e7d6:	687b      	ldr	r3, [r7, #4]
   2e7d8:	881b      	ldrh	r3, [r3, #0]
   2e7da:	2b00      	cmp	r3, #0
   2e7dc:	d1ed      	bne.n	2e7ba <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2e7de:	2307      	movs	r3, #7
   2e7e0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2e7e2:	1cbb      	adds	r3, r7, #2
   2e7e4:	881b      	ldrh	r3, [r3, #0]
   2e7e6:	b2db      	uxtb	r3, r3
   2e7e8:	220f      	movs	r2, #15
   2e7ea:	4013      	ands	r3, r2
   2e7ec:	b2da      	uxtb	r2, r3
   2e7ee:	2327      	movs	r3, #39	; 0x27
   2e7f0:	18fb      	adds	r3, r7, r3
   2e7f2:	3230      	adds	r2, #48	; 0x30
   2e7f4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2e7f6:	2327      	movs	r3, #39	; 0x27
   2e7f8:	18fb      	adds	r3, r7, r3
   2e7fa:	781b      	ldrb	r3, [r3, #0]
   2e7fc:	2b39      	cmp	r3, #57	; 0x39
   2e7fe:	d906      	bls.n	2e80e <gen_numname+0x7a>
   2e800:	2327      	movs	r3, #39	; 0x27
   2e802:	18fb      	adds	r3, r7, r3
   2e804:	2227      	movs	r2, #39	; 0x27
   2e806:	18ba      	adds	r2, r7, r2
   2e808:	7812      	ldrb	r2, [r2, #0]
   2e80a:	3207      	adds	r2, #7
   2e80c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2e80e:	6a3b      	ldr	r3, [r7, #32]
   2e810:	1e5a      	subs	r2, r3, #1
   2e812:	623a      	str	r2, [r7, #32]
   2e814:	2214      	movs	r2, #20
   2e816:	18ba      	adds	r2, r7, r2
   2e818:	2127      	movs	r1, #39	; 0x27
   2e81a:	1879      	adds	r1, r7, r1
   2e81c:	7809      	ldrb	r1, [r1, #0]
   2e81e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2e820:	1cbb      	adds	r3, r7, #2
   2e822:	1cba      	adds	r2, r7, #2
   2e824:	8812      	ldrh	r2, [r2, #0]
   2e826:	0912      	lsrs	r2, r2, #4
   2e828:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2e82a:	1cbb      	adds	r3, r7, #2
   2e82c:	881b      	ldrh	r3, [r3, #0]
   2e82e:	2b00      	cmp	r3, #0
   2e830:	d1d7      	bne.n	2e7e2 <gen_numname+0x4e>
	ns[i] = '~';
   2e832:	2314      	movs	r3, #20
   2e834:	18fa      	adds	r2, r7, r3
   2e836:	6a3b      	ldr	r3, [r7, #32]
   2e838:	18d3      	adds	r3, r2, r3
   2e83a:	227e      	movs	r2, #126	; 0x7e
   2e83c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2e83e:	2300      	movs	r3, #0
   2e840:	61fb      	str	r3, [r7, #28]
   2e842:	e002      	b.n	2e84a <gen_numname+0xb6>
   2e844:	69fb      	ldr	r3, [r7, #28]
   2e846:	3301      	adds	r3, #1
   2e848:	61fb      	str	r3, [r7, #28]
   2e84a:	69fa      	ldr	r2, [r7, #28]
   2e84c:	6a3b      	ldr	r3, [r7, #32]
   2e84e:	429a      	cmp	r2, r3
   2e850:	d205      	bcs.n	2e85e <gen_numname+0xca>
   2e852:	68fa      	ldr	r2, [r7, #12]
   2e854:	69fb      	ldr	r3, [r7, #28]
   2e856:	18d3      	adds	r3, r2, r3
   2e858:	781b      	ldrb	r3, [r3, #0]
   2e85a:	2b20      	cmp	r3, #32
   2e85c:	d1f2      	bne.n	2e844 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2e85e:	69fb      	ldr	r3, [r7, #28]
   2e860:	1c5a      	adds	r2, r3, #1
   2e862:	61fa      	str	r2, [r7, #28]
   2e864:	68fa      	ldr	r2, [r7, #12]
   2e866:	18d2      	adds	r2, r2, r3
   2e868:	6a3b      	ldr	r3, [r7, #32]
   2e86a:	2b07      	cmp	r3, #7
   2e86c:	d806      	bhi.n	2e87c <gen_numname+0xe8>
   2e86e:	6a3b      	ldr	r3, [r7, #32]
   2e870:	1c59      	adds	r1, r3, #1
   2e872:	6239      	str	r1, [r7, #32]
   2e874:	2114      	movs	r1, #20
   2e876:	1879      	adds	r1, r7, r1
   2e878:	5ccb      	ldrb	r3, [r1, r3]
   2e87a:	e000      	b.n	2e87e <gen_numname+0xea>
   2e87c:	2320      	movs	r3, #32
   2e87e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2e880:	69fb      	ldr	r3, [r7, #28]
   2e882:	2b07      	cmp	r3, #7
   2e884:	d9eb      	bls.n	2e85e <gen_numname+0xca>
}
   2e886:	46c0      	nop			; (mov r8, r8)
   2e888:	46bd      	mov	sp, r7
   2e88a:	b00a      	add	sp, #40	; 0x28
   2e88c:	bd80      	pop	{r7, pc}
   2e88e:	46c0      	nop			; (mov r8, r8)
   2e890:	0002d939 	.word	0x0002d939

0002e894 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2e894:	b580      	push	{r7, lr}
   2e896:	b084      	sub	sp, #16
   2e898:	af00      	add	r7, sp, #0
   2e89a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2e89c:	230f      	movs	r3, #15
   2e89e:	18fb      	adds	r3, r7, r3
   2e8a0:	2200      	movs	r2, #0
   2e8a2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2e8a4:	230b      	movs	r3, #11
   2e8a6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2e8a8:	230f      	movs	r3, #15
   2e8aa:	18fb      	adds	r3, r7, r3
   2e8ac:	781b      	ldrb	r3, [r3, #0]
   2e8ae:	b2da      	uxtb	r2, r3
   2e8b0:	0852      	lsrs	r2, r2, #1
   2e8b2:	01db      	lsls	r3, r3, #7
   2e8b4:	4313      	orrs	r3, r2
   2e8b6:	b2d9      	uxtb	r1, r3
   2e8b8:	687b      	ldr	r3, [r7, #4]
   2e8ba:	1c5a      	adds	r2, r3, #1
   2e8bc:	607a      	str	r2, [r7, #4]
   2e8be:	781a      	ldrb	r2, [r3, #0]
   2e8c0:	230f      	movs	r3, #15
   2e8c2:	18fb      	adds	r3, r7, r3
   2e8c4:	188a      	adds	r2, r1, r2
   2e8c6:	701a      	strb	r2, [r3, #0]
   2e8c8:	68bb      	ldr	r3, [r7, #8]
   2e8ca:	3b01      	subs	r3, #1
   2e8cc:	60bb      	str	r3, [r7, #8]
   2e8ce:	68bb      	ldr	r3, [r7, #8]
   2e8d0:	2b00      	cmp	r3, #0
   2e8d2:	d1e9      	bne.n	2e8a8 <sum_sfn+0x14>
	return sum;
   2e8d4:	230f      	movs	r3, #15
   2e8d6:	18fb      	adds	r3, r7, r3
   2e8d8:	781b      	ldrb	r3, [r3, #0]
}
   2e8da:	0018      	movs	r0, r3
   2e8dc:	46bd      	mov	sp, r7
   2e8de:	b004      	add	sp, #16
   2e8e0:	bd80      	pop	{r7, pc}
	...

0002e8e4 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2e8e4:	b590      	push	{r4, r7, lr}
   2e8e6:	b087      	sub	sp, #28
   2e8e8:	af00      	add	r7, sp, #0
   2e8ea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2e8ec:	2317      	movs	r3, #23
   2e8ee:	18fc      	adds	r4, r7, r3
   2e8f0:	687b      	ldr	r3, [r7, #4]
   2e8f2:	2100      	movs	r1, #0
   2e8f4:	0018      	movs	r0, r3
   2e8f6:	4b74      	ldr	r3, [pc, #464]	; (2eac8 <dir_find+0x1e4>)
   2e8f8:	4798      	blx	r3
   2e8fa:	0003      	movs	r3, r0
   2e8fc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2e8fe:	2317      	movs	r3, #23
   2e900:	18fb      	adds	r3, r7, r3
   2e902:	781b      	ldrb	r3, [r3, #0]
   2e904:	2b00      	cmp	r3, #0
   2e906:	d003      	beq.n	2e910 <dir_find+0x2c>
   2e908:	2317      	movs	r3, #23
   2e90a:	18fb      	adds	r3, r7, r3
   2e90c:	781b      	ldrb	r3, [r3, #0]
   2e90e:	e0d6      	b.n	2eabe <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2e910:	2314      	movs	r3, #20
   2e912:	18fb      	adds	r3, r7, r3
   2e914:	22ff      	movs	r2, #255	; 0xff
   2e916:	701a      	strb	r2, [r3, #0]
   2e918:	2315      	movs	r3, #21
   2e91a:	18fb      	adds	r3, r7, r3
   2e91c:	2214      	movs	r2, #20
   2e91e:	18ba      	adds	r2, r7, r2
   2e920:	7812      	ldrb	r2, [r2, #0]
   2e922:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2e924:	687b      	ldr	r3, [r7, #4]
   2e926:	681a      	ldr	r2, [r3, #0]
   2e928:	687b      	ldr	r3, [r7, #4]
   2e92a:	691b      	ldr	r3, [r3, #16]
   2e92c:	2117      	movs	r1, #23
   2e92e:	187c      	adds	r4, r7, r1
   2e930:	0019      	movs	r1, r3
   2e932:	0010      	movs	r0, r2
   2e934:	4b65      	ldr	r3, [pc, #404]	; (2eacc <dir_find+0x1e8>)
   2e936:	4798      	blx	r3
   2e938:	0003      	movs	r3, r0
   2e93a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2e93c:	2317      	movs	r3, #23
   2e93e:	18fb      	adds	r3, r7, r3
   2e940:	781b      	ldrb	r3, [r3, #0]
   2e942:	2b00      	cmp	r3, #0
   2e944:	d000      	beq.n	2e948 <dir_find+0x64>
   2e946:	e0b2      	b.n	2eaae <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2e948:	687b      	ldr	r3, [r7, #4]
   2e94a:	695b      	ldr	r3, [r3, #20]
   2e94c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2e94e:	2316      	movs	r3, #22
   2e950:	18fb      	adds	r3, r7, r3
   2e952:	693a      	ldr	r2, [r7, #16]
   2e954:	7812      	ldrb	r2, [r2, #0]
   2e956:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2e958:	2316      	movs	r3, #22
   2e95a:	18fb      	adds	r3, r7, r3
   2e95c:	781b      	ldrb	r3, [r3, #0]
   2e95e:	2b00      	cmp	r3, #0
   2e960:	d104      	bne.n	2e96c <dir_find+0x88>
   2e962:	2317      	movs	r3, #23
   2e964:	18fb      	adds	r3, r7, r3
   2e966:	2204      	movs	r2, #4
   2e968:	701a      	strb	r2, [r3, #0]
   2e96a:	e0a5      	b.n	2eab8 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2e96c:	693b      	ldr	r3, [r7, #16]
   2e96e:	330b      	adds	r3, #11
   2e970:	781a      	ldrb	r2, [r3, #0]
   2e972:	230f      	movs	r3, #15
   2e974:	18fb      	adds	r3, r7, r3
   2e976:	213f      	movs	r1, #63	; 0x3f
   2e978:	400a      	ands	r2, r1
   2e97a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2e97c:	2316      	movs	r3, #22
   2e97e:	18fb      	adds	r3, r7, r3
   2e980:	781b      	ldrb	r3, [r3, #0]
   2e982:	2be5      	cmp	r3, #229	; 0xe5
   2e984:	d00a      	beq.n	2e99c <dir_find+0xb8>
   2e986:	230f      	movs	r3, #15
   2e988:	18fb      	adds	r3, r7, r3
   2e98a:	781b      	ldrb	r3, [r3, #0]
   2e98c:	2208      	movs	r2, #8
   2e98e:	4013      	ands	r3, r2
   2e990:	d009      	beq.n	2e9a6 <dir_find+0xc2>
   2e992:	230f      	movs	r3, #15
   2e994:	18fb      	adds	r3, r7, r3
   2e996:	781b      	ldrb	r3, [r3, #0]
   2e998:	2b0f      	cmp	r3, #15
   2e99a:	d004      	beq.n	2e9a6 <dir_find+0xc2>
			ord = 0xFF;
   2e99c:	2315      	movs	r3, #21
   2e99e:	18fb      	adds	r3, r7, r3
   2e9a0:	22ff      	movs	r2, #255	; 0xff
   2e9a2:	701a      	strb	r2, [r3, #0]
   2e9a4:	e073      	b.n	2ea8e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2e9a6:	230f      	movs	r3, #15
   2e9a8:	18fb      	adds	r3, r7, r3
   2e9aa:	781b      	ldrb	r3, [r3, #0]
   2e9ac:	2b0f      	cmp	r3, #15
   2e9ae:	d145      	bne.n	2ea3c <dir_find+0x158>
				if (dj->lfn) {
   2e9b0:	687b      	ldr	r3, [r7, #4]
   2e9b2:	69db      	ldr	r3, [r3, #28]
   2e9b4:	2b00      	cmp	r3, #0
   2e9b6:	d100      	bne.n	2e9ba <dir_find+0xd6>
   2e9b8:	e069      	b.n	2ea8e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2e9ba:	2316      	movs	r3, #22
   2e9bc:	18fb      	adds	r3, r7, r3
   2e9be:	781b      	ldrb	r3, [r3, #0]
   2e9c0:	2240      	movs	r2, #64	; 0x40
   2e9c2:	4013      	ands	r3, r2
   2e9c4:	d016      	beq.n	2e9f4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2e9c6:	2314      	movs	r3, #20
   2e9c8:	18fb      	adds	r3, r7, r3
   2e9ca:	693a      	ldr	r2, [r7, #16]
   2e9cc:	7b52      	ldrb	r2, [r2, #13]
   2e9ce:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2e9d0:	2316      	movs	r3, #22
   2e9d2:	18fb      	adds	r3, r7, r3
   2e9d4:	2216      	movs	r2, #22
   2e9d6:	18ba      	adds	r2, r7, r2
   2e9d8:	7812      	ldrb	r2, [r2, #0]
   2e9da:	2140      	movs	r1, #64	; 0x40
   2e9dc:	438a      	bics	r2, r1
   2e9de:	701a      	strb	r2, [r3, #0]
   2e9e0:	2315      	movs	r3, #21
   2e9e2:	18fb      	adds	r3, r7, r3
   2e9e4:	2216      	movs	r2, #22
   2e9e6:	18ba      	adds	r2, r7, r2
   2e9e8:	7812      	ldrb	r2, [r2, #0]
   2e9ea:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2e9ec:	687b      	ldr	r3, [r7, #4]
   2e9ee:	88da      	ldrh	r2, [r3, #6]
   2e9f0:	687b      	ldr	r3, [r7, #4]
   2e9f2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2e9f4:	2316      	movs	r3, #22
   2e9f6:	18fa      	adds	r2, r7, r3
   2e9f8:	2315      	movs	r3, #21
   2e9fa:	18fb      	adds	r3, r7, r3
   2e9fc:	7812      	ldrb	r2, [r2, #0]
   2e9fe:	781b      	ldrb	r3, [r3, #0]
   2ea00:	429a      	cmp	r2, r3
   2ea02:	d116      	bne.n	2ea32 <dir_find+0x14e>
   2ea04:	693b      	ldr	r3, [r7, #16]
   2ea06:	330d      	adds	r3, #13
   2ea08:	781b      	ldrb	r3, [r3, #0]
   2ea0a:	2214      	movs	r2, #20
   2ea0c:	18ba      	adds	r2, r7, r2
   2ea0e:	7812      	ldrb	r2, [r2, #0]
   2ea10:	429a      	cmp	r2, r3
   2ea12:	d10e      	bne.n	2ea32 <dir_find+0x14e>
   2ea14:	687b      	ldr	r3, [r7, #4]
   2ea16:	69db      	ldr	r3, [r3, #28]
   2ea18:	693a      	ldr	r2, [r7, #16]
   2ea1a:	0011      	movs	r1, r2
   2ea1c:	0018      	movs	r0, r3
   2ea1e:	4b2c      	ldr	r3, [pc, #176]	; (2ead0 <dir_find+0x1ec>)
   2ea20:	4798      	blx	r3
   2ea22:	1e03      	subs	r3, r0, #0
   2ea24:	d005      	beq.n	2ea32 <dir_find+0x14e>
   2ea26:	2315      	movs	r3, #21
   2ea28:	18fb      	adds	r3, r7, r3
   2ea2a:	781b      	ldrb	r3, [r3, #0]
   2ea2c:	3b01      	subs	r3, #1
   2ea2e:	b2da      	uxtb	r2, r3
   2ea30:	e000      	b.n	2ea34 <dir_find+0x150>
   2ea32:	22ff      	movs	r2, #255	; 0xff
   2ea34:	2315      	movs	r3, #21
   2ea36:	18fb      	adds	r3, r7, r3
   2ea38:	701a      	strb	r2, [r3, #0]
   2ea3a:	e028      	b.n	2ea8e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ea3c:	2315      	movs	r3, #21
   2ea3e:	18fb      	adds	r3, r7, r3
   2ea40:	781b      	ldrb	r3, [r3, #0]
   2ea42:	2b00      	cmp	r3, #0
   2ea44:	d10a      	bne.n	2ea5c <dir_find+0x178>
   2ea46:	693b      	ldr	r3, [r7, #16]
   2ea48:	0018      	movs	r0, r3
   2ea4a:	4b22      	ldr	r3, [pc, #136]	; (2ead4 <dir_find+0x1f0>)
   2ea4c:	4798      	blx	r3
   2ea4e:	0003      	movs	r3, r0
   2ea50:	001a      	movs	r2, r3
   2ea52:	2314      	movs	r3, #20
   2ea54:	18fb      	adds	r3, r7, r3
   2ea56:	781b      	ldrb	r3, [r3, #0]
   2ea58:	4293      	cmp	r3, r2
   2ea5a:	d02a      	beq.n	2eab2 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2ea5c:	2315      	movs	r3, #21
   2ea5e:	18fb      	adds	r3, r7, r3
   2ea60:	22ff      	movs	r2, #255	; 0xff
   2ea62:	701a      	strb	r2, [r3, #0]
   2ea64:	687b      	ldr	r3, [r7, #4]
   2ea66:	2201      	movs	r2, #1
   2ea68:	4252      	negs	r2, r2
   2ea6a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ea6c:	687b      	ldr	r3, [r7, #4]
   2ea6e:	699b      	ldr	r3, [r3, #24]
   2ea70:	330b      	adds	r3, #11
   2ea72:	781b      	ldrb	r3, [r3, #0]
   2ea74:	001a      	movs	r2, r3
   2ea76:	2301      	movs	r3, #1
   2ea78:	4013      	ands	r3, r2
   2ea7a:	d108      	bne.n	2ea8e <dir_find+0x1aa>
   2ea7c:	687b      	ldr	r3, [r7, #4]
   2ea7e:	6999      	ldr	r1, [r3, #24]
   2ea80:	693b      	ldr	r3, [r7, #16]
   2ea82:	220b      	movs	r2, #11
   2ea84:	0018      	movs	r0, r3
   2ea86:	4b14      	ldr	r3, [pc, #80]	; (2ead8 <dir_find+0x1f4>)
   2ea88:	4798      	blx	r3
   2ea8a:	1e03      	subs	r3, r0, #0
   2ea8c:	d013      	beq.n	2eab6 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2ea8e:	2317      	movs	r3, #23
   2ea90:	18fc      	adds	r4, r7, r3
   2ea92:	687b      	ldr	r3, [r7, #4]
   2ea94:	2100      	movs	r1, #0
   2ea96:	0018      	movs	r0, r3
   2ea98:	4b10      	ldr	r3, [pc, #64]	; (2eadc <dir_find+0x1f8>)
   2ea9a:	4798      	blx	r3
   2ea9c:	0003      	movs	r3, r0
   2ea9e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2eaa0:	2317      	movs	r3, #23
   2eaa2:	18fb      	adds	r3, r7, r3
   2eaa4:	781b      	ldrb	r3, [r3, #0]
   2eaa6:	2b00      	cmp	r3, #0
   2eaa8:	d100      	bne.n	2eaac <dir_find+0x1c8>
   2eaaa:	e73b      	b.n	2e924 <dir_find+0x40>
   2eaac:	e004      	b.n	2eab8 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2eaae:	46c0      	nop			; (mov r8, r8)
   2eab0:	e002      	b.n	2eab8 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2eab2:	46c0      	nop			; (mov r8, r8)
   2eab4:	e000      	b.n	2eab8 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2eab6:	46c0      	nop			; (mov r8, r8)

	return res;
   2eab8:	2317      	movs	r3, #23
   2eaba:	18fb      	adds	r3, r7, r3
   2eabc:	781b      	ldrb	r3, [r3, #0]
}
   2eabe:	0018      	movs	r0, r3
   2eac0:	46bd      	mov	sp, r7
   2eac2:	b007      	add	sp, #28
   2eac4:	bd90      	pop	{r4, r7, pc}
   2eac6:	46c0      	nop			; (mov r8, r8)
   2eac8:	0002e261 	.word	0x0002e261
   2eacc:	0002da1d 	.word	0x0002da1d
   2ead0:	0002e581 	.word	0x0002e581
   2ead4:	0002e895 	.word	0x0002e895
   2ead8:	0002d9a1 	.word	0x0002d9a1
   2eadc:	0002e391 	.word	0x0002e391

0002eae0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2eae0:	b590      	push	{r4, r7, lr}
   2eae2:	b08d      	sub	sp, #52	; 0x34
   2eae4:	af00      	add	r7, sp, #0
   2eae6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2eae8:	687b      	ldr	r3, [r7, #4]
   2eaea:	699b      	ldr	r3, [r3, #24]
   2eaec:	627b      	str	r3, [r7, #36]	; 0x24
   2eaee:	687b      	ldr	r3, [r7, #4]
   2eaf0:	69db      	ldr	r3, [r3, #28]
   2eaf2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2eaf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2eaf6:	230c      	movs	r3, #12
   2eaf8:	18fb      	adds	r3, r7, r3
   2eafa:	220c      	movs	r2, #12
   2eafc:	0018      	movs	r0, r3
   2eafe:	4bc8      	ldr	r3, [pc, #800]	; (2ee20 <dir_register+0x340>)
   2eb00:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2eb02:	230c      	movs	r3, #12
   2eb04:	18fb      	adds	r3, r7, r3
   2eb06:	7adb      	ldrb	r3, [r3, #11]
   2eb08:	001a      	movs	r2, r3
   2eb0a:	2301      	movs	r3, #1
   2eb0c:	4013      	ands	r3, r2
   2eb0e:	d048      	beq.n	2eba2 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb12:	330b      	adds	r3, #11
   2eb14:	2200      	movs	r2, #0
   2eb16:	701a      	strb	r2, [r3, #0]
   2eb18:	687b      	ldr	r3, [r7, #4]
   2eb1a:	2200      	movs	r2, #0
   2eb1c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2eb1e:	232c      	movs	r3, #44	; 0x2c
   2eb20:	18fb      	adds	r3, r7, r3
   2eb22:	2201      	movs	r2, #1
   2eb24:	801a      	strh	r2, [r3, #0]
   2eb26:	e01c      	b.n	2eb62 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2eb28:	232c      	movs	r3, #44	; 0x2c
   2eb2a:	18fb      	adds	r3, r7, r3
   2eb2c:	881b      	ldrh	r3, [r3, #0]
   2eb2e:	6a3a      	ldr	r2, [r7, #32]
   2eb30:	210c      	movs	r1, #12
   2eb32:	1879      	adds	r1, r7, r1
   2eb34:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2eb36:	4cbb      	ldr	r4, [pc, #748]	; (2ee24 <dir_register+0x344>)
   2eb38:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2eb3a:	232f      	movs	r3, #47	; 0x2f
   2eb3c:	18fc      	adds	r4, r7, r3
   2eb3e:	687b      	ldr	r3, [r7, #4]
   2eb40:	0018      	movs	r0, r3
   2eb42:	4bb9      	ldr	r3, [pc, #740]	; (2ee28 <dir_register+0x348>)
   2eb44:	4798      	blx	r3
   2eb46:	0003      	movs	r3, r0
   2eb48:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2eb4a:	232f      	movs	r3, #47	; 0x2f
   2eb4c:	18fb      	adds	r3, r7, r3
   2eb4e:	781b      	ldrb	r3, [r3, #0]
   2eb50:	2b00      	cmp	r3, #0
   2eb52:	d10c      	bne.n	2eb6e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2eb54:	232c      	movs	r3, #44	; 0x2c
   2eb56:	18fb      	adds	r3, r7, r3
   2eb58:	881a      	ldrh	r2, [r3, #0]
   2eb5a:	232c      	movs	r3, #44	; 0x2c
   2eb5c:	18fb      	adds	r3, r7, r3
   2eb5e:	3201      	adds	r2, #1
   2eb60:	801a      	strh	r2, [r3, #0]
   2eb62:	232c      	movs	r3, #44	; 0x2c
   2eb64:	18fb      	adds	r3, r7, r3
   2eb66:	881b      	ldrh	r3, [r3, #0]
   2eb68:	2b63      	cmp	r3, #99	; 0x63
   2eb6a:	d9dd      	bls.n	2eb28 <dir_register+0x48>
   2eb6c:	e000      	b.n	2eb70 <dir_register+0x90>
			if (res != FR_OK) break;
   2eb6e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2eb70:	232c      	movs	r3, #44	; 0x2c
   2eb72:	18fb      	adds	r3, r7, r3
   2eb74:	881b      	ldrh	r3, [r3, #0]
   2eb76:	2b64      	cmp	r3, #100	; 0x64
   2eb78:	d101      	bne.n	2eb7e <dir_register+0x9e>
   2eb7a:	2307      	movs	r3, #7
   2eb7c:	e14c      	b.n	2ee18 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2eb7e:	232f      	movs	r3, #47	; 0x2f
   2eb80:	18fb      	adds	r3, r7, r3
   2eb82:	781b      	ldrb	r3, [r3, #0]
   2eb84:	2b04      	cmp	r3, #4
   2eb86:	d003      	beq.n	2eb90 <dir_register+0xb0>
   2eb88:	232f      	movs	r3, #47	; 0x2f
   2eb8a:	18fb      	adds	r3, r7, r3
   2eb8c:	781b      	ldrb	r3, [r3, #0]
   2eb8e:	e143      	b.n	2ee18 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb92:	330b      	adds	r3, #11
   2eb94:	220c      	movs	r2, #12
   2eb96:	18ba      	adds	r2, r7, r2
   2eb98:	7ad2      	ldrb	r2, [r2, #11]
   2eb9a:	701a      	strb	r2, [r3, #0]
   2eb9c:	687b      	ldr	r3, [r7, #4]
   2eb9e:	6a3a      	ldr	r2, [r7, #32]
   2eba0:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2eba2:	230c      	movs	r3, #12
   2eba4:	18fb      	adds	r3, r7, r3
   2eba6:	7adb      	ldrb	r3, [r3, #11]
   2eba8:	001a      	movs	r2, r3
   2ebaa:	2302      	movs	r3, #2
   2ebac:	4013      	ands	r3, r2
   2ebae:	d023      	beq.n	2ebf8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2ebb0:	232a      	movs	r3, #42	; 0x2a
   2ebb2:	18fb      	adds	r3, r7, r3
   2ebb4:	2200      	movs	r2, #0
   2ebb6:	801a      	strh	r2, [r3, #0]
   2ebb8:	e006      	b.n	2ebc8 <dir_register+0xe8>
   2ebba:	232a      	movs	r3, #42	; 0x2a
   2ebbc:	18fb      	adds	r3, r7, r3
   2ebbe:	881a      	ldrh	r2, [r3, #0]
   2ebc0:	232a      	movs	r3, #42	; 0x2a
   2ebc2:	18fb      	adds	r3, r7, r3
   2ebc4:	3201      	adds	r2, #1
   2ebc6:	801a      	strh	r2, [r3, #0]
   2ebc8:	232a      	movs	r3, #42	; 0x2a
   2ebca:	18fb      	adds	r3, r7, r3
   2ebcc:	881b      	ldrh	r3, [r3, #0]
   2ebce:	005b      	lsls	r3, r3, #1
   2ebd0:	6a3a      	ldr	r2, [r7, #32]
   2ebd2:	18d3      	adds	r3, r2, r3
   2ebd4:	881b      	ldrh	r3, [r3, #0]
   2ebd6:	2b00      	cmp	r3, #0
   2ebd8:	d1ef      	bne.n	2ebba <dir_register+0xda>
		ne = (ne + 25) / 13;
   2ebda:	232a      	movs	r3, #42	; 0x2a
   2ebdc:	18fb      	adds	r3, r7, r3
   2ebde:	881b      	ldrh	r3, [r3, #0]
   2ebe0:	3319      	adds	r3, #25
   2ebe2:	001a      	movs	r2, r3
   2ebe4:	4b91      	ldr	r3, [pc, #580]	; (2ee2c <dir_register+0x34c>)
   2ebe6:	210d      	movs	r1, #13
   2ebe8:	0010      	movs	r0, r2
   2ebea:	4798      	blx	r3
   2ebec:	0003      	movs	r3, r0
   2ebee:	001a      	movs	r2, r3
   2ebf0:	232a      	movs	r3, #42	; 0x2a
   2ebf2:	18fb      	adds	r3, r7, r3
   2ebf4:	801a      	strh	r2, [r3, #0]
   2ebf6:	e003      	b.n	2ec00 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2ebf8:	232a      	movs	r3, #42	; 0x2a
   2ebfa:	18fb      	adds	r3, r7, r3
   2ebfc:	2201      	movs	r2, #1
   2ebfe:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2ec00:	232f      	movs	r3, #47	; 0x2f
   2ec02:	18fc      	adds	r4, r7, r3
   2ec04:	687b      	ldr	r3, [r7, #4]
   2ec06:	2100      	movs	r1, #0
   2ec08:	0018      	movs	r0, r3
   2ec0a:	4b89      	ldr	r3, [pc, #548]	; (2ee30 <dir_register+0x350>)
   2ec0c:	4798      	blx	r3
   2ec0e:	0003      	movs	r3, r0
   2ec10:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2ec12:	232f      	movs	r3, #47	; 0x2f
   2ec14:	18fb      	adds	r3, r7, r3
   2ec16:	781b      	ldrb	r3, [r3, #0]
   2ec18:	2b00      	cmp	r3, #0
   2ec1a:	d003      	beq.n	2ec24 <dir_register+0x144>
   2ec1c:	232f      	movs	r3, #47	; 0x2f
   2ec1e:	18fb      	adds	r3, r7, r3
   2ec20:	781b      	ldrb	r3, [r3, #0]
   2ec22:	e0f9      	b.n	2ee18 <dir_register+0x338>
	n = is = 0;
   2ec24:	2328      	movs	r3, #40	; 0x28
   2ec26:	18fb      	adds	r3, r7, r3
   2ec28:	2200      	movs	r2, #0
   2ec2a:	801a      	strh	r2, [r3, #0]
   2ec2c:	232c      	movs	r3, #44	; 0x2c
   2ec2e:	18fb      	adds	r3, r7, r3
   2ec30:	2228      	movs	r2, #40	; 0x28
   2ec32:	18ba      	adds	r2, r7, r2
   2ec34:	8812      	ldrh	r2, [r2, #0]
   2ec36:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2ec38:	687b      	ldr	r3, [r7, #4]
   2ec3a:	681a      	ldr	r2, [r3, #0]
   2ec3c:	687b      	ldr	r3, [r7, #4]
   2ec3e:	691b      	ldr	r3, [r3, #16]
   2ec40:	212f      	movs	r1, #47	; 0x2f
   2ec42:	187c      	adds	r4, r7, r1
   2ec44:	0019      	movs	r1, r3
   2ec46:	0010      	movs	r0, r2
   2ec48:	4b7a      	ldr	r3, [pc, #488]	; (2ee34 <dir_register+0x354>)
   2ec4a:	4798      	blx	r3
   2ec4c:	0003      	movs	r3, r0
   2ec4e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2ec50:	232f      	movs	r3, #47	; 0x2f
   2ec52:	18fb      	adds	r3, r7, r3
   2ec54:	781b      	ldrb	r3, [r3, #0]
   2ec56:	2b00      	cmp	r3, #0
   2ec58:	d13c      	bne.n	2ecd4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2ec5a:	687b      	ldr	r3, [r7, #4]
   2ec5c:	695a      	ldr	r2, [r3, #20]
   2ec5e:	231f      	movs	r3, #31
   2ec60:	18fb      	adds	r3, r7, r3
   2ec62:	7812      	ldrb	r2, [r2, #0]
   2ec64:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2ec66:	231f      	movs	r3, #31
   2ec68:	18fb      	adds	r3, r7, r3
   2ec6a:	781b      	ldrb	r3, [r3, #0]
   2ec6c:	2be5      	cmp	r3, #229	; 0xe5
   2ec6e:	d004      	beq.n	2ec7a <dir_register+0x19a>
   2ec70:	231f      	movs	r3, #31
   2ec72:	18fb      	adds	r3, r7, r3
   2ec74:	781b      	ldrb	r3, [r3, #0]
   2ec76:	2b00      	cmp	r3, #0
   2ec78:	d119      	bne.n	2ecae <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2ec7a:	232c      	movs	r3, #44	; 0x2c
   2ec7c:	18fb      	adds	r3, r7, r3
   2ec7e:	881b      	ldrh	r3, [r3, #0]
   2ec80:	2b00      	cmp	r3, #0
   2ec82:	d104      	bne.n	2ec8e <dir_register+0x1ae>
   2ec84:	2328      	movs	r3, #40	; 0x28
   2ec86:	18fb      	adds	r3, r7, r3
   2ec88:	687a      	ldr	r2, [r7, #4]
   2ec8a:	88d2      	ldrh	r2, [r2, #6]
   2ec8c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2ec8e:	232c      	movs	r3, #44	; 0x2c
   2ec90:	18fb      	adds	r3, r7, r3
   2ec92:	222c      	movs	r2, #44	; 0x2c
   2ec94:	18ba      	adds	r2, r7, r2
   2ec96:	8812      	ldrh	r2, [r2, #0]
   2ec98:	3201      	adds	r2, #1
   2ec9a:	801a      	strh	r2, [r3, #0]
   2ec9c:	232c      	movs	r3, #44	; 0x2c
   2ec9e:	18fa      	adds	r2, r7, r3
   2eca0:	232a      	movs	r3, #42	; 0x2a
   2eca2:	18fb      	adds	r3, r7, r3
   2eca4:	8812      	ldrh	r2, [r2, #0]
   2eca6:	881b      	ldrh	r3, [r3, #0]
   2eca8:	429a      	cmp	r2, r3
   2ecaa:	d104      	bne.n	2ecb6 <dir_register+0x1d6>
   2ecac:	e013      	b.n	2ecd6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2ecae:	232c      	movs	r3, #44	; 0x2c
   2ecb0:	18fb      	adds	r3, r7, r3
   2ecb2:	2200      	movs	r2, #0
   2ecb4:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2ecb6:	232f      	movs	r3, #47	; 0x2f
   2ecb8:	18fc      	adds	r4, r7, r3
   2ecba:	687b      	ldr	r3, [r7, #4]
   2ecbc:	2101      	movs	r1, #1
   2ecbe:	0018      	movs	r0, r3
   2ecc0:	4b5d      	ldr	r3, [pc, #372]	; (2ee38 <dir_register+0x358>)
   2ecc2:	4798      	blx	r3
   2ecc4:	0003      	movs	r3, r0
   2ecc6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ecc8:	232f      	movs	r3, #47	; 0x2f
   2ecca:	18fb      	adds	r3, r7, r3
   2eccc:	781b      	ldrb	r3, [r3, #0]
   2ecce:	2b00      	cmp	r3, #0
   2ecd0:	d0b2      	beq.n	2ec38 <dir_register+0x158>
   2ecd2:	e000      	b.n	2ecd6 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2ecd4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2ecd6:	232f      	movs	r3, #47	; 0x2f
   2ecd8:	18fb      	adds	r3, r7, r3
   2ecda:	781b      	ldrb	r3, [r3, #0]
   2ecdc:	2b00      	cmp	r3, #0
   2ecde:	d163      	bne.n	2eda8 <dir_register+0x2c8>
   2ece0:	232a      	movs	r3, #42	; 0x2a
   2ece2:	18fb      	adds	r3, r7, r3
   2ece4:	881b      	ldrh	r3, [r3, #0]
   2ece6:	2b01      	cmp	r3, #1
   2ece8:	d95e      	bls.n	2eda8 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2ecea:	232f      	movs	r3, #47	; 0x2f
   2ecec:	18fc      	adds	r4, r7, r3
   2ecee:	2328      	movs	r3, #40	; 0x28
   2ecf0:	18fb      	adds	r3, r7, r3
   2ecf2:	881a      	ldrh	r2, [r3, #0]
   2ecf4:	687b      	ldr	r3, [r7, #4]
   2ecf6:	0011      	movs	r1, r2
   2ecf8:	0018      	movs	r0, r3
   2ecfa:	4b4d      	ldr	r3, [pc, #308]	; (2ee30 <dir_register+0x350>)
   2ecfc:	4798      	blx	r3
   2ecfe:	0003      	movs	r3, r0
   2ed00:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2ed02:	232f      	movs	r3, #47	; 0x2f
   2ed04:	18fb      	adds	r3, r7, r3
   2ed06:	781b      	ldrb	r3, [r3, #0]
   2ed08:	2b00      	cmp	r3, #0
   2ed0a:	d14d      	bne.n	2eda8 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2ed0c:	687b      	ldr	r3, [r7, #4]
   2ed0e:	699b      	ldr	r3, [r3, #24]
   2ed10:	221e      	movs	r2, #30
   2ed12:	18bc      	adds	r4, r7, r2
   2ed14:	0018      	movs	r0, r3
   2ed16:	4b49      	ldr	r3, [pc, #292]	; (2ee3c <dir_register+0x35c>)
   2ed18:	4798      	blx	r3
   2ed1a:	0003      	movs	r3, r0
   2ed1c:	7023      	strb	r3, [r4, #0]
			ne--;
   2ed1e:	232a      	movs	r3, #42	; 0x2a
   2ed20:	18fb      	adds	r3, r7, r3
   2ed22:	881a      	ldrh	r2, [r3, #0]
   2ed24:	232a      	movs	r3, #42	; 0x2a
   2ed26:	18fb      	adds	r3, r7, r3
   2ed28:	3a01      	subs	r2, #1
   2ed2a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2ed2c:	687b      	ldr	r3, [r7, #4]
   2ed2e:	681a      	ldr	r2, [r3, #0]
   2ed30:	687b      	ldr	r3, [r7, #4]
   2ed32:	691b      	ldr	r3, [r3, #16]
   2ed34:	212f      	movs	r1, #47	; 0x2f
   2ed36:	187c      	adds	r4, r7, r1
   2ed38:	0019      	movs	r1, r3
   2ed3a:	0010      	movs	r0, r2
   2ed3c:	4b3d      	ldr	r3, [pc, #244]	; (2ee34 <dir_register+0x354>)
   2ed3e:	4798      	blx	r3
   2ed40:	0003      	movs	r3, r0
   2ed42:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2ed44:	232f      	movs	r3, #47	; 0x2f
   2ed46:	18fb      	adds	r3, r7, r3
   2ed48:	781b      	ldrb	r3, [r3, #0]
   2ed4a:	2b00      	cmp	r3, #0
   2ed4c:	d12b      	bne.n	2eda6 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2ed4e:	687b      	ldr	r3, [r7, #4]
   2ed50:	69d8      	ldr	r0, [r3, #28]
   2ed52:	687b      	ldr	r3, [r7, #4]
   2ed54:	6959      	ldr	r1, [r3, #20]
   2ed56:	232a      	movs	r3, #42	; 0x2a
   2ed58:	18fb      	adds	r3, r7, r3
   2ed5a:	881b      	ldrh	r3, [r3, #0]
   2ed5c:	b2da      	uxtb	r2, r3
   2ed5e:	231e      	movs	r3, #30
   2ed60:	18fb      	adds	r3, r7, r3
   2ed62:	781b      	ldrb	r3, [r3, #0]
   2ed64:	4c36      	ldr	r4, [pc, #216]	; (2ee40 <dir_register+0x360>)
   2ed66:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2ed68:	687b      	ldr	r3, [r7, #4]
   2ed6a:	681b      	ldr	r3, [r3, #0]
   2ed6c:	2201      	movs	r2, #1
   2ed6e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2ed70:	232f      	movs	r3, #47	; 0x2f
   2ed72:	18fc      	adds	r4, r7, r3
   2ed74:	687b      	ldr	r3, [r7, #4]
   2ed76:	2100      	movs	r1, #0
   2ed78:	0018      	movs	r0, r3
   2ed7a:	4b2f      	ldr	r3, [pc, #188]	; (2ee38 <dir_register+0x358>)
   2ed7c:	4798      	blx	r3
   2ed7e:	0003      	movs	r3, r0
   2ed80:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2ed82:	232f      	movs	r3, #47	; 0x2f
   2ed84:	18fb      	adds	r3, r7, r3
   2ed86:	781b      	ldrb	r3, [r3, #0]
   2ed88:	2b00      	cmp	r3, #0
   2ed8a:	d10d      	bne.n	2eda8 <dir_register+0x2c8>
   2ed8c:	232a      	movs	r3, #42	; 0x2a
   2ed8e:	18fb      	adds	r3, r7, r3
   2ed90:	222a      	movs	r2, #42	; 0x2a
   2ed92:	18ba      	adds	r2, r7, r2
   2ed94:	8812      	ldrh	r2, [r2, #0]
   2ed96:	3a01      	subs	r2, #1
   2ed98:	801a      	strh	r2, [r3, #0]
   2ed9a:	232a      	movs	r3, #42	; 0x2a
   2ed9c:	18fb      	adds	r3, r7, r3
   2ed9e:	881b      	ldrh	r3, [r3, #0]
   2eda0:	2b00      	cmp	r3, #0
   2eda2:	d1c3      	bne.n	2ed2c <dir_register+0x24c>
   2eda4:	e000      	b.n	2eda8 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2eda6:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2eda8:	232f      	movs	r3, #47	; 0x2f
   2edaa:	18fb      	adds	r3, r7, r3
   2edac:	781b      	ldrb	r3, [r3, #0]
   2edae:	2b00      	cmp	r3, #0
   2edb0:	d12f      	bne.n	2ee12 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2edb2:	687b      	ldr	r3, [r7, #4]
   2edb4:	681a      	ldr	r2, [r3, #0]
   2edb6:	687b      	ldr	r3, [r7, #4]
   2edb8:	691b      	ldr	r3, [r3, #16]
   2edba:	212f      	movs	r1, #47	; 0x2f
   2edbc:	187c      	adds	r4, r7, r1
   2edbe:	0019      	movs	r1, r3
   2edc0:	0010      	movs	r0, r2
   2edc2:	4b1c      	ldr	r3, [pc, #112]	; (2ee34 <dir_register+0x354>)
   2edc4:	4798      	blx	r3
   2edc6:	0003      	movs	r3, r0
   2edc8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2edca:	232f      	movs	r3, #47	; 0x2f
   2edcc:	18fb      	adds	r3, r7, r3
   2edce:	781b      	ldrb	r3, [r3, #0]
   2edd0:	2b00      	cmp	r3, #0
   2edd2:	d11e      	bne.n	2ee12 <dir_register+0x332>
			dir = dj->dir;
   2edd4:	687b      	ldr	r3, [r7, #4]
   2edd6:	695b      	ldr	r3, [r3, #20]
   2edd8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2edda:	69bb      	ldr	r3, [r7, #24]
   2eddc:	2220      	movs	r2, #32
   2edde:	2100      	movs	r1, #0
   2ede0:	0018      	movs	r0, r3
   2ede2:	4b18      	ldr	r3, [pc, #96]	; (2ee44 <dir_register+0x364>)
   2ede4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2ede6:	687b      	ldr	r3, [r7, #4]
   2ede8:	6999      	ldr	r1, [r3, #24]
   2edea:	69bb      	ldr	r3, [r7, #24]
   2edec:	220b      	movs	r2, #11
   2edee:	0018      	movs	r0, r3
   2edf0:	4b0b      	ldr	r3, [pc, #44]	; (2ee20 <dir_register+0x340>)
   2edf2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2edf4:	69bb      	ldr	r3, [r7, #24]
   2edf6:	330c      	adds	r3, #12
   2edf8:	001a      	movs	r2, r3
   2edfa:	687b      	ldr	r3, [r7, #4]
   2edfc:	699b      	ldr	r3, [r3, #24]
   2edfe:	330b      	adds	r3, #11
   2ee00:	781b      	ldrb	r3, [r3, #0]
   2ee02:	2118      	movs	r1, #24
   2ee04:	400b      	ands	r3, r1
   2ee06:	b2db      	uxtb	r3, r3
   2ee08:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2ee0a:	687b      	ldr	r3, [r7, #4]
   2ee0c:	681b      	ldr	r3, [r3, #0]
   2ee0e:	2201      	movs	r2, #1
   2ee10:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2ee12:	232f      	movs	r3, #47	; 0x2f
   2ee14:	18fb      	adds	r3, r7, r3
   2ee16:	781b      	ldrb	r3, [r3, #0]
}
   2ee18:	0018      	movs	r0, r3
   2ee1a:	46bd      	mov	sp, r7
   2ee1c:	b00d      	add	sp, #52	; 0x34
   2ee1e:	bd90      	pop	{r4, r7, pc}
   2ee20:	0002d939 	.word	0x0002d939
   2ee24:	0002e795 	.word	0x0002e795
   2ee28:	0002e8e5 	.word	0x0002e8e5
   2ee2c:	00034d09 	.word	0x00034d09
   2ee30:	0002e261 	.word	0x0002e261
   2ee34:	0002da1d 	.word	0x0002da1d
   2ee38:	0002e391 	.word	0x0002e391
   2ee3c:	0002e895 	.word	0x0002e895
   2ee40:	0002e685 	.word	0x0002e685
   2ee44:	0002d971 	.word	0x0002d971

0002ee48 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2ee48:	b590      	push	{r4, r7, lr}
   2ee4a:	b08b      	sub	sp, #44	; 0x2c
   2ee4c:	af00      	add	r7, sp, #0
   2ee4e:	6078      	str	r0, [r7, #4]
   2ee50:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2ee52:	683b      	ldr	r3, [r7, #0]
   2ee54:	681b      	ldr	r3, [r3, #0]
   2ee56:	613b      	str	r3, [r7, #16]
   2ee58:	e002      	b.n	2ee60 <create_name+0x18>
   2ee5a:	693b      	ldr	r3, [r7, #16]
   2ee5c:	3301      	adds	r3, #1
   2ee5e:	613b      	str	r3, [r7, #16]
   2ee60:	693b      	ldr	r3, [r7, #16]
   2ee62:	781b      	ldrb	r3, [r3, #0]
   2ee64:	2b2f      	cmp	r3, #47	; 0x2f
   2ee66:	d0f8      	beq.n	2ee5a <create_name+0x12>
   2ee68:	693b      	ldr	r3, [r7, #16]
   2ee6a:	781b      	ldrb	r3, [r3, #0]
   2ee6c:	2b5c      	cmp	r3, #92	; 0x5c
   2ee6e:	d0f4      	beq.n	2ee5a <create_name+0x12>
	lfn = dj->lfn;
   2ee70:	687b      	ldr	r3, [r7, #4]
   2ee72:	69db      	ldr	r3, [r3, #28]
   2ee74:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2ee76:	2300      	movs	r3, #0
   2ee78:	617b      	str	r3, [r7, #20]
   2ee7a:	697b      	ldr	r3, [r7, #20]
   2ee7c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2ee7e:	69bb      	ldr	r3, [r7, #24]
   2ee80:	1c5a      	adds	r2, r3, #1
   2ee82:	61ba      	str	r2, [r7, #24]
   2ee84:	693a      	ldr	r2, [r7, #16]
   2ee86:	18d3      	adds	r3, r2, r3
   2ee88:	781a      	ldrb	r2, [r3, #0]
   2ee8a:	2324      	movs	r3, #36	; 0x24
   2ee8c:	18fb      	adds	r3, r7, r3
   2ee8e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2ee90:	2324      	movs	r3, #36	; 0x24
   2ee92:	18fb      	adds	r3, r7, r3
   2ee94:	881b      	ldrh	r3, [r3, #0]
   2ee96:	2b1f      	cmp	r3, #31
   2ee98:	d944      	bls.n	2ef24 <create_name+0xdc>
   2ee9a:	2324      	movs	r3, #36	; 0x24
   2ee9c:	18fb      	adds	r3, r7, r3
   2ee9e:	881b      	ldrh	r3, [r3, #0]
   2eea0:	2b2f      	cmp	r3, #47	; 0x2f
   2eea2:	d03f      	beq.n	2ef24 <create_name+0xdc>
   2eea4:	2324      	movs	r3, #36	; 0x24
   2eea6:	18fb      	adds	r3, r7, r3
   2eea8:	881b      	ldrh	r3, [r3, #0]
   2eeaa:	2b5c      	cmp	r3, #92	; 0x5c
   2eeac:	d03a      	beq.n	2ef24 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2eeae:	697b      	ldr	r3, [r7, #20]
   2eeb0:	2bfe      	cmp	r3, #254	; 0xfe
   2eeb2:	d901      	bls.n	2eeb8 <create_name+0x70>
			return FR_INVALID_NAME;
   2eeb4:	2306      	movs	r3, #6
   2eeb6:	e1e7      	b.n	2f288 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2eeb8:	2324      	movs	r3, #36	; 0x24
   2eeba:	18fb      	adds	r3, r7, r3
   2eebc:	2224      	movs	r2, #36	; 0x24
   2eebe:	18ba      	adds	r2, r7, r2
   2eec0:	8812      	ldrh	r2, [r2, #0]
   2eec2:	21ff      	movs	r1, #255	; 0xff
   2eec4:	400a      	ands	r2, r1
   2eec6:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2eec8:	2324      	movs	r3, #36	; 0x24
   2eeca:	18fc      	adds	r4, r7, r3
   2eecc:	2324      	movs	r3, #36	; 0x24
   2eece:	18fb      	adds	r3, r7, r3
   2eed0:	881b      	ldrh	r3, [r3, #0]
   2eed2:	2101      	movs	r1, #1
   2eed4:	0018      	movs	r0, r3
   2eed6:	4bba      	ldr	r3, [pc, #744]	; (2f1c0 <create_name+0x378>)
   2eed8:	4798      	blx	r3
   2eeda:	0003      	movs	r3, r0
   2eedc:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2eede:	2324      	movs	r3, #36	; 0x24
   2eee0:	18fb      	adds	r3, r7, r3
   2eee2:	881b      	ldrh	r3, [r3, #0]
   2eee4:	2b00      	cmp	r3, #0
   2eee6:	d101      	bne.n	2eeec <create_name+0xa4>
   2eee8:	2306      	movs	r3, #6
   2eeea:	e1cd      	b.n	2f288 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2eeec:	2324      	movs	r3, #36	; 0x24
   2eeee:	18fb      	adds	r3, r7, r3
   2eef0:	881b      	ldrh	r3, [r3, #0]
   2eef2:	2b7f      	cmp	r3, #127	; 0x7f
   2eef4:	d80b      	bhi.n	2ef0e <create_name+0xc6>
   2eef6:	2324      	movs	r3, #36	; 0x24
   2eef8:	18fb      	adds	r3, r7, r3
   2eefa:	881a      	ldrh	r2, [r3, #0]
   2eefc:	4bb1      	ldr	r3, [pc, #708]	; (2f1c4 <create_name+0x37c>)
   2eefe:	0011      	movs	r1, r2
   2ef00:	0018      	movs	r0, r3
   2ef02:	4bb1      	ldr	r3, [pc, #708]	; (2f1c8 <create_name+0x380>)
   2ef04:	4798      	blx	r3
   2ef06:	1e03      	subs	r3, r0, #0
   2ef08:	d001      	beq.n	2ef0e <create_name+0xc6>
			return FR_INVALID_NAME;
   2ef0a:	2306      	movs	r3, #6
   2ef0c:	e1bc      	b.n	2f288 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2ef0e:	697b      	ldr	r3, [r7, #20]
   2ef10:	1c5a      	adds	r2, r3, #1
   2ef12:	617a      	str	r2, [r7, #20]
   2ef14:	005b      	lsls	r3, r3, #1
   2ef16:	68fa      	ldr	r2, [r7, #12]
   2ef18:	18d3      	adds	r3, r2, r3
   2ef1a:	2224      	movs	r2, #36	; 0x24
   2ef1c:	18ba      	adds	r2, r7, r2
   2ef1e:	8812      	ldrh	r2, [r2, #0]
   2ef20:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2ef22:	e7ac      	b.n	2ee7e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2ef24:	693a      	ldr	r2, [r7, #16]
   2ef26:	69bb      	ldr	r3, [r7, #24]
   2ef28:	18d2      	adds	r2, r2, r3
   2ef2a:	683b      	ldr	r3, [r7, #0]
   2ef2c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2ef2e:	2324      	movs	r3, #36	; 0x24
   2ef30:	18fb      	adds	r3, r7, r3
   2ef32:	881b      	ldrh	r3, [r3, #0]
   2ef34:	2b1f      	cmp	r3, #31
   2ef36:	d801      	bhi.n	2ef3c <create_name+0xf4>
   2ef38:	2204      	movs	r2, #4
   2ef3a:	e000      	b.n	2ef3e <create_name+0xf6>
   2ef3c:	2200      	movs	r2, #0
   2ef3e:	2326      	movs	r3, #38	; 0x26
   2ef40:	18fb      	adds	r3, r7, r3
   2ef42:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2ef44:	e017      	b.n	2ef76 <create_name+0x12e>
		w = lfn[di-1];
   2ef46:	697b      	ldr	r3, [r7, #20]
   2ef48:	4aa0      	ldr	r2, [pc, #640]	; (2f1cc <create_name+0x384>)
   2ef4a:	4694      	mov	ip, r2
   2ef4c:	4463      	add	r3, ip
   2ef4e:	005b      	lsls	r3, r3, #1
   2ef50:	68fa      	ldr	r2, [r7, #12]
   2ef52:	18d2      	adds	r2, r2, r3
   2ef54:	2324      	movs	r3, #36	; 0x24
   2ef56:	18fb      	adds	r3, r7, r3
   2ef58:	8812      	ldrh	r2, [r2, #0]
   2ef5a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2ef5c:	2324      	movs	r3, #36	; 0x24
   2ef5e:	18fb      	adds	r3, r7, r3
   2ef60:	881b      	ldrh	r3, [r3, #0]
   2ef62:	2b20      	cmp	r3, #32
   2ef64:	d004      	beq.n	2ef70 <create_name+0x128>
   2ef66:	2324      	movs	r3, #36	; 0x24
   2ef68:	18fb      	adds	r3, r7, r3
   2ef6a:	881b      	ldrh	r3, [r3, #0]
   2ef6c:	2b2e      	cmp	r3, #46	; 0x2e
   2ef6e:	d106      	bne.n	2ef7e <create_name+0x136>
		di--;
   2ef70:	697b      	ldr	r3, [r7, #20]
   2ef72:	3b01      	subs	r3, #1
   2ef74:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2ef76:	697b      	ldr	r3, [r7, #20]
   2ef78:	2b00      	cmp	r3, #0
   2ef7a:	d1e4      	bne.n	2ef46 <create_name+0xfe>
   2ef7c:	e000      	b.n	2ef80 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2ef7e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2ef80:	697b      	ldr	r3, [r7, #20]
   2ef82:	2b00      	cmp	r3, #0
   2ef84:	d101      	bne.n	2ef8a <create_name+0x142>
   2ef86:	2306      	movs	r3, #6
   2ef88:	e17e      	b.n	2f288 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2ef8a:	697b      	ldr	r3, [r7, #20]
   2ef8c:	005b      	lsls	r3, r3, #1
   2ef8e:	68fa      	ldr	r2, [r7, #12]
   2ef90:	18d3      	adds	r3, r2, r3
   2ef92:	2200      	movs	r2, #0
   2ef94:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2ef96:	687b      	ldr	r3, [r7, #4]
   2ef98:	699b      	ldr	r3, [r3, #24]
   2ef9a:	220b      	movs	r2, #11
   2ef9c:	2120      	movs	r1, #32
   2ef9e:	0018      	movs	r0, r3
   2efa0:	4b8b      	ldr	r3, [pc, #556]	; (2f1d0 <create_name+0x388>)
   2efa2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2efa4:	2300      	movs	r3, #0
   2efa6:	61bb      	str	r3, [r7, #24]
   2efa8:	e002      	b.n	2efb0 <create_name+0x168>
   2efaa:	69bb      	ldr	r3, [r7, #24]
   2efac:	3301      	adds	r3, #1
   2efae:	61bb      	str	r3, [r7, #24]
   2efb0:	69bb      	ldr	r3, [r7, #24]
   2efb2:	005b      	lsls	r3, r3, #1
   2efb4:	68fa      	ldr	r2, [r7, #12]
   2efb6:	18d3      	adds	r3, r2, r3
   2efb8:	881b      	ldrh	r3, [r3, #0]
   2efba:	2b20      	cmp	r3, #32
   2efbc:	d0f5      	beq.n	2efaa <create_name+0x162>
   2efbe:	69bb      	ldr	r3, [r7, #24]
   2efc0:	005b      	lsls	r3, r3, #1
   2efc2:	68fa      	ldr	r2, [r7, #12]
   2efc4:	18d3      	adds	r3, r2, r3
   2efc6:	881b      	ldrh	r3, [r3, #0]
   2efc8:	2b2e      	cmp	r3, #46	; 0x2e
   2efca:	d0ee      	beq.n	2efaa <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2efcc:	69bb      	ldr	r3, [r7, #24]
   2efce:	2b00      	cmp	r3, #0
   2efd0:	d00b      	beq.n	2efea <create_name+0x1a2>
   2efd2:	2326      	movs	r3, #38	; 0x26
   2efd4:	18fb      	adds	r3, r7, r3
   2efd6:	2226      	movs	r2, #38	; 0x26
   2efd8:	18ba      	adds	r2, r7, r2
   2efda:	7812      	ldrb	r2, [r2, #0]
   2efdc:	2103      	movs	r1, #3
   2efde:	430a      	orrs	r2, r1
   2efe0:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2efe2:	e002      	b.n	2efea <create_name+0x1a2>
   2efe4:	697b      	ldr	r3, [r7, #20]
   2efe6:	3b01      	subs	r3, #1
   2efe8:	617b      	str	r3, [r7, #20]
   2efea:	697b      	ldr	r3, [r7, #20]
   2efec:	2b00      	cmp	r3, #0
   2efee:	d009      	beq.n	2f004 <create_name+0x1bc>
   2eff0:	697b      	ldr	r3, [r7, #20]
   2eff2:	4a76      	ldr	r2, [pc, #472]	; (2f1cc <create_name+0x384>)
   2eff4:	4694      	mov	ip, r2
   2eff6:	4463      	add	r3, ip
   2eff8:	005b      	lsls	r3, r3, #1
   2effa:	68fa      	ldr	r2, [r7, #12]
   2effc:	18d3      	adds	r3, r2, r3
   2effe:	881b      	ldrh	r3, [r3, #0]
   2f000:	2b2e      	cmp	r3, #46	; 0x2e
   2f002:	d1ef      	bne.n	2efe4 <create_name+0x19c>

	b = i = 0; ni = 8;
   2f004:	2300      	movs	r3, #0
   2f006:	623b      	str	r3, [r7, #32]
   2f008:	2327      	movs	r3, #39	; 0x27
   2f00a:	18fb      	adds	r3, r7, r3
   2f00c:	2200      	movs	r2, #0
   2f00e:	701a      	strb	r2, [r3, #0]
   2f010:	2308      	movs	r3, #8
   2f012:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2f014:	69bb      	ldr	r3, [r7, #24]
   2f016:	1c5a      	adds	r2, r3, #1
   2f018:	61ba      	str	r2, [r7, #24]
   2f01a:	005b      	lsls	r3, r3, #1
   2f01c:	68fa      	ldr	r2, [r7, #12]
   2f01e:	18d2      	adds	r2, r2, r3
   2f020:	2324      	movs	r3, #36	; 0x24
   2f022:	18fb      	adds	r3, r7, r3
   2f024:	8812      	ldrh	r2, [r2, #0]
   2f026:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2f028:	2324      	movs	r3, #36	; 0x24
   2f02a:	18fb      	adds	r3, r7, r3
   2f02c:	881b      	ldrh	r3, [r3, #0]
   2f02e:	2b00      	cmp	r3, #0
   2f030:	d100      	bne.n	2f034 <create_name+0x1ec>
   2f032:	e0c3      	b.n	2f1bc <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2f034:	2324      	movs	r3, #36	; 0x24
   2f036:	18fb      	adds	r3, r7, r3
   2f038:	881b      	ldrh	r3, [r3, #0]
   2f03a:	2b20      	cmp	r3, #32
   2f03c:	d008      	beq.n	2f050 <create_name+0x208>
   2f03e:	2324      	movs	r3, #36	; 0x24
   2f040:	18fb      	adds	r3, r7, r3
   2f042:	881b      	ldrh	r3, [r3, #0]
   2f044:	2b2e      	cmp	r3, #46	; 0x2e
   2f046:	d10c      	bne.n	2f062 <create_name+0x21a>
   2f048:	69ba      	ldr	r2, [r7, #24]
   2f04a:	697b      	ldr	r3, [r7, #20]
   2f04c:	429a      	cmp	r2, r3
   2f04e:	d008      	beq.n	2f062 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2f050:	2326      	movs	r3, #38	; 0x26
   2f052:	18fb      	adds	r3, r7, r3
   2f054:	2226      	movs	r2, #38	; 0x26
   2f056:	18ba      	adds	r2, r7, r2
   2f058:	7812      	ldrb	r2, [r2, #0]
   2f05a:	2103      	movs	r1, #3
   2f05c:	430a      	orrs	r2, r1
   2f05e:	701a      	strb	r2, [r3, #0]
   2f060:	e0ab      	b.n	2f1ba <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2f062:	6a3a      	ldr	r2, [r7, #32]
   2f064:	69fb      	ldr	r3, [r7, #28]
   2f066:	429a      	cmp	r2, r3
   2f068:	d203      	bcs.n	2f072 <create_name+0x22a>
   2f06a:	69ba      	ldr	r2, [r7, #24]
   2f06c:	697b      	ldr	r3, [r7, #20]
   2f06e:	429a      	cmp	r2, r3
   2f070:	d12a      	bne.n	2f0c8 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2f072:	69fb      	ldr	r3, [r7, #28]
   2f074:	2b0b      	cmp	r3, #11
   2f076:	d108      	bne.n	2f08a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2f078:	2326      	movs	r3, #38	; 0x26
   2f07a:	18fb      	adds	r3, r7, r3
   2f07c:	2226      	movs	r2, #38	; 0x26
   2f07e:	18ba      	adds	r2, r7, r2
   2f080:	7812      	ldrb	r2, [r2, #0]
   2f082:	2103      	movs	r1, #3
   2f084:	430a      	orrs	r2, r1
   2f086:	701a      	strb	r2, [r3, #0]
   2f088:	e0a9      	b.n	2f1de <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2f08a:	69ba      	ldr	r2, [r7, #24]
   2f08c:	697b      	ldr	r3, [r7, #20]
   2f08e:	429a      	cmp	r2, r3
   2f090:	d007      	beq.n	2f0a2 <create_name+0x25a>
   2f092:	2326      	movs	r3, #38	; 0x26
   2f094:	18fb      	adds	r3, r7, r3
   2f096:	2226      	movs	r2, #38	; 0x26
   2f098:	18ba      	adds	r2, r7, r2
   2f09a:	7812      	ldrb	r2, [r2, #0]
   2f09c:	2103      	movs	r1, #3
   2f09e:	430a      	orrs	r2, r1
   2f0a0:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2f0a2:	69ba      	ldr	r2, [r7, #24]
   2f0a4:	697b      	ldr	r3, [r7, #20]
   2f0a6:	429a      	cmp	r2, r3
   2f0a8:	d900      	bls.n	2f0ac <create_name+0x264>
   2f0aa:	e097      	b.n	2f1dc <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2f0ac:	697b      	ldr	r3, [r7, #20]
   2f0ae:	61bb      	str	r3, [r7, #24]
   2f0b0:	2308      	movs	r3, #8
   2f0b2:	623b      	str	r3, [r7, #32]
   2f0b4:	230b      	movs	r3, #11
   2f0b6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2f0b8:	2327      	movs	r3, #39	; 0x27
   2f0ba:	18fb      	adds	r3, r7, r3
   2f0bc:	2227      	movs	r2, #39	; 0x27
   2f0be:	18ba      	adds	r2, r7, r2
   2f0c0:	7812      	ldrb	r2, [r2, #0]
   2f0c2:	0092      	lsls	r2, r2, #2
   2f0c4:	701a      	strb	r2, [r3, #0]
   2f0c6:	e078      	b.n	2f1ba <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2f0c8:	2324      	movs	r3, #36	; 0x24
   2f0ca:	18fb      	adds	r3, r7, r3
   2f0cc:	881b      	ldrh	r3, [r3, #0]
   2f0ce:	2b7f      	cmp	r3, #127	; 0x7f
   2f0d0:	d920      	bls.n	2f114 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2f0d2:	2324      	movs	r3, #36	; 0x24
   2f0d4:	18fc      	adds	r4, r7, r3
   2f0d6:	2324      	movs	r3, #36	; 0x24
   2f0d8:	18fb      	adds	r3, r7, r3
   2f0da:	881b      	ldrh	r3, [r3, #0]
   2f0dc:	2100      	movs	r1, #0
   2f0de:	0018      	movs	r0, r3
   2f0e0:	4b37      	ldr	r3, [pc, #220]	; (2f1c0 <create_name+0x378>)
   2f0e2:	4798      	blx	r3
   2f0e4:	0003      	movs	r3, r0
   2f0e6:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2f0e8:	2324      	movs	r3, #36	; 0x24
   2f0ea:	18fb      	adds	r3, r7, r3
   2f0ec:	881b      	ldrh	r3, [r3, #0]
   2f0ee:	2b00      	cmp	r3, #0
   2f0f0:	d008      	beq.n	2f104 <create_name+0x2bc>
   2f0f2:	2324      	movs	r3, #36	; 0x24
   2f0f4:	18fb      	adds	r3, r7, r3
   2f0f6:	881b      	ldrh	r3, [r3, #0]
   2f0f8:	3b80      	subs	r3, #128	; 0x80
   2f0fa:	4a36      	ldr	r2, [pc, #216]	; (2f1d4 <create_name+0x38c>)
   2f0fc:	5cd2      	ldrb	r2, [r2, r3]
   2f0fe:	2324      	movs	r3, #36	; 0x24
   2f100:	18fb      	adds	r3, r7, r3
   2f102:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2f104:	2326      	movs	r3, #38	; 0x26
   2f106:	18fb      	adds	r3, r7, r3
   2f108:	2226      	movs	r2, #38	; 0x26
   2f10a:	18ba      	adds	r2, r7, r2
   2f10c:	7812      	ldrb	r2, [r2, #0]
   2f10e:	2102      	movs	r1, #2
   2f110:	430a      	orrs	r2, r1
   2f112:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2f114:	2324      	movs	r3, #36	; 0x24
   2f116:	18fb      	adds	r3, r7, r3
   2f118:	881b      	ldrh	r3, [r3, #0]
   2f11a:	2b00      	cmp	r3, #0
   2f11c:	d009      	beq.n	2f132 <create_name+0x2ea>
   2f11e:	2324      	movs	r3, #36	; 0x24
   2f120:	18fb      	adds	r3, r7, r3
   2f122:	881a      	ldrh	r2, [r3, #0]
   2f124:	4b2c      	ldr	r3, [pc, #176]	; (2f1d8 <create_name+0x390>)
   2f126:	0011      	movs	r1, r2
   2f128:	0018      	movs	r0, r3
   2f12a:	4b27      	ldr	r3, [pc, #156]	; (2f1c8 <create_name+0x380>)
   2f12c:	4798      	blx	r3
   2f12e:	1e03      	subs	r3, r0, #0
   2f130:	d00c      	beq.n	2f14c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2f132:	2324      	movs	r3, #36	; 0x24
   2f134:	18fb      	adds	r3, r7, r3
   2f136:	225f      	movs	r2, #95	; 0x5f
   2f138:	801a      	strh	r2, [r3, #0]
   2f13a:	2326      	movs	r3, #38	; 0x26
   2f13c:	18fb      	adds	r3, r7, r3
   2f13e:	2226      	movs	r2, #38	; 0x26
   2f140:	18ba      	adds	r2, r7, r2
   2f142:	7812      	ldrb	r2, [r2, #0]
   2f144:	2103      	movs	r1, #3
   2f146:	430a      	orrs	r2, r1
   2f148:	701a      	strb	r2, [r3, #0]
   2f14a:	e02b      	b.n	2f1a4 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2f14c:	2324      	movs	r3, #36	; 0x24
   2f14e:	18fb      	adds	r3, r7, r3
   2f150:	881b      	ldrh	r3, [r3, #0]
   2f152:	2b40      	cmp	r3, #64	; 0x40
   2f154:	d90d      	bls.n	2f172 <create_name+0x32a>
   2f156:	2324      	movs	r3, #36	; 0x24
   2f158:	18fb      	adds	r3, r7, r3
   2f15a:	881b      	ldrh	r3, [r3, #0]
   2f15c:	2b5a      	cmp	r3, #90	; 0x5a
   2f15e:	d808      	bhi.n	2f172 <create_name+0x32a>
					b |= 2;
   2f160:	2327      	movs	r3, #39	; 0x27
   2f162:	18fb      	adds	r3, r7, r3
   2f164:	2227      	movs	r2, #39	; 0x27
   2f166:	18ba      	adds	r2, r7, r2
   2f168:	7812      	ldrb	r2, [r2, #0]
   2f16a:	2102      	movs	r1, #2
   2f16c:	430a      	orrs	r2, r1
   2f16e:	701a      	strb	r2, [r3, #0]
   2f170:	e018      	b.n	2f1a4 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2f172:	2324      	movs	r3, #36	; 0x24
   2f174:	18fb      	adds	r3, r7, r3
   2f176:	881b      	ldrh	r3, [r3, #0]
   2f178:	2b60      	cmp	r3, #96	; 0x60
   2f17a:	d913      	bls.n	2f1a4 <create_name+0x35c>
   2f17c:	2324      	movs	r3, #36	; 0x24
   2f17e:	18fb      	adds	r3, r7, r3
   2f180:	881b      	ldrh	r3, [r3, #0]
   2f182:	2b7a      	cmp	r3, #122	; 0x7a
   2f184:	d80e      	bhi.n	2f1a4 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2f186:	2327      	movs	r3, #39	; 0x27
   2f188:	18fb      	adds	r3, r7, r3
   2f18a:	2227      	movs	r2, #39	; 0x27
   2f18c:	18ba      	adds	r2, r7, r2
   2f18e:	7812      	ldrb	r2, [r2, #0]
   2f190:	2101      	movs	r1, #1
   2f192:	430a      	orrs	r2, r1
   2f194:	701a      	strb	r2, [r3, #0]
   2f196:	2324      	movs	r3, #36	; 0x24
   2f198:	18fb      	adds	r3, r7, r3
   2f19a:	2224      	movs	r2, #36	; 0x24
   2f19c:	18ba      	adds	r2, r7, r2
   2f19e:	8812      	ldrh	r2, [r2, #0]
   2f1a0:	3a20      	subs	r2, #32
   2f1a2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2f1a4:	687b      	ldr	r3, [r7, #4]
   2f1a6:	699a      	ldr	r2, [r3, #24]
   2f1a8:	6a3b      	ldr	r3, [r7, #32]
   2f1aa:	1c59      	adds	r1, r3, #1
   2f1ac:	6239      	str	r1, [r7, #32]
   2f1ae:	18d3      	adds	r3, r2, r3
   2f1b0:	2224      	movs	r2, #36	; 0x24
   2f1b2:	18ba      	adds	r2, r7, r2
   2f1b4:	8812      	ldrh	r2, [r2, #0]
   2f1b6:	b2d2      	uxtb	r2, r2
   2f1b8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2f1ba:	e72b      	b.n	2f014 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2f1bc:	46c0      	nop			; (mov r8, r8)
   2f1be:	e00e      	b.n	2f1de <create_name+0x396>
   2f1c0:	00030581 	.word	0x00030581
   2f1c4:	0003c684 	.word	0x0003c684
   2f1c8:	0002d9eb 	.word	0x0002d9eb
   2f1cc:	7fffffff 	.word	0x7fffffff
   2f1d0:	0002d971 	.word	0x0002d971
   2f1d4:	0003c6cc 	.word	0x0003c6cc
   2f1d8:	0003c690 	.word	0x0003c690
			if (si > di) break;			/* No extension */
   2f1dc:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2f1de:	687b      	ldr	r3, [r7, #4]
   2f1e0:	699b      	ldr	r3, [r3, #24]
   2f1e2:	781b      	ldrb	r3, [r3, #0]
   2f1e4:	2be5      	cmp	r3, #229	; 0xe5
   2f1e6:	d103      	bne.n	2f1f0 <create_name+0x3a8>
   2f1e8:	687b      	ldr	r3, [r7, #4]
   2f1ea:	699b      	ldr	r3, [r3, #24]
   2f1ec:	2205      	movs	r2, #5
   2f1ee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2f1f0:	69fb      	ldr	r3, [r7, #28]
   2f1f2:	2b08      	cmp	r3, #8
   2f1f4:	d106      	bne.n	2f204 <create_name+0x3bc>
   2f1f6:	2327      	movs	r3, #39	; 0x27
   2f1f8:	18fb      	adds	r3, r7, r3
   2f1fa:	2227      	movs	r2, #39	; 0x27
   2f1fc:	18ba      	adds	r2, r7, r2
   2f1fe:	7812      	ldrb	r2, [r2, #0]
   2f200:	0092      	lsls	r2, r2, #2
   2f202:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2f204:	2327      	movs	r3, #39	; 0x27
   2f206:	18fb      	adds	r3, r7, r3
   2f208:	781b      	ldrb	r3, [r3, #0]
   2f20a:	220c      	movs	r2, #12
   2f20c:	4013      	ands	r3, r2
   2f20e:	2b0c      	cmp	r3, #12
   2f210:	d006      	beq.n	2f220 <create_name+0x3d8>
   2f212:	2327      	movs	r3, #39	; 0x27
   2f214:	18fb      	adds	r3, r7, r3
   2f216:	781b      	ldrb	r3, [r3, #0]
   2f218:	2203      	movs	r2, #3
   2f21a:	4013      	ands	r3, r2
   2f21c:	2b03      	cmp	r3, #3
   2f21e:	d107      	bne.n	2f230 <create_name+0x3e8>
		cf |= NS_LFN;
   2f220:	2326      	movs	r3, #38	; 0x26
   2f222:	18fb      	adds	r3, r7, r3
   2f224:	2226      	movs	r2, #38	; 0x26
   2f226:	18ba      	adds	r2, r7, r2
   2f228:	7812      	ldrb	r2, [r2, #0]
   2f22a:	2102      	movs	r1, #2
   2f22c:	430a      	orrs	r2, r1
   2f22e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2f230:	2326      	movs	r3, #38	; 0x26
   2f232:	18fb      	adds	r3, r7, r3
   2f234:	781b      	ldrb	r3, [r3, #0]
   2f236:	2202      	movs	r2, #2
   2f238:	4013      	ands	r3, r2
   2f23a:	d11d      	bne.n	2f278 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2f23c:	2327      	movs	r3, #39	; 0x27
   2f23e:	18fb      	adds	r3, r7, r3
   2f240:	781b      	ldrb	r3, [r3, #0]
   2f242:	2203      	movs	r2, #3
   2f244:	4013      	ands	r3, r2
   2f246:	2b01      	cmp	r3, #1
   2f248:	d107      	bne.n	2f25a <create_name+0x412>
   2f24a:	2326      	movs	r3, #38	; 0x26
   2f24c:	18fb      	adds	r3, r7, r3
   2f24e:	2226      	movs	r2, #38	; 0x26
   2f250:	18ba      	adds	r2, r7, r2
   2f252:	7812      	ldrb	r2, [r2, #0]
   2f254:	2110      	movs	r1, #16
   2f256:	430a      	orrs	r2, r1
   2f258:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2f25a:	2327      	movs	r3, #39	; 0x27
   2f25c:	18fb      	adds	r3, r7, r3
   2f25e:	781b      	ldrb	r3, [r3, #0]
   2f260:	220c      	movs	r2, #12
   2f262:	4013      	ands	r3, r2
   2f264:	2b04      	cmp	r3, #4
   2f266:	d107      	bne.n	2f278 <create_name+0x430>
   2f268:	2326      	movs	r3, #38	; 0x26
   2f26a:	18fb      	adds	r3, r7, r3
   2f26c:	2226      	movs	r2, #38	; 0x26
   2f26e:	18ba      	adds	r2, r7, r2
   2f270:	7812      	ldrb	r2, [r2, #0]
   2f272:	2108      	movs	r1, #8
   2f274:	430a      	orrs	r2, r1
   2f276:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2f278:	687b      	ldr	r3, [r7, #4]
   2f27a:	699b      	ldr	r3, [r3, #24]
   2f27c:	330b      	adds	r3, #11
   2f27e:	2226      	movs	r2, #38	; 0x26
   2f280:	18ba      	adds	r2, r7, r2
   2f282:	7812      	ldrb	r2, [r2, #0]
   2f284:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2f286:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2f288:	0018      	movs	r0, r3
   2f28a:	46bd      	mov	sp, r7
   2f28c:	b00b      	add	sp, #44	; 0x2c
   2f28e:	bd90      	pop	{r4, r7, pc}

0002f290 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2f290:	b590      	push	{r4, r7, lr}
   2f292:	b085      	sub	sp, #20
   2f294:	af00      	add	r7, sp, #0
   2f296:	6078      	str	r0, [r7, #4]
   2f298:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2f29a:	683b      	ldr	r3, [r7, #0]
   2f29c:	781b      	ldrb	r3, [r3, #0]
   2f29e:	2b2f      	cmp	r3, #47	; 0x2f
   2f2a0:	d003      	beq.n	2f2aa <follow_path+0x1a>
   2f2a2:	683b      	ldr	r3, [r7, #0]
   2f2a4:	781b      	ldrb	r3, [r3, #0]
   2f2a6:	2b5c      	cmp	r3, #92	; 0x5c
   2f2a8:	d102      	bne.n	2f2b0 <follow_path+0x20>
		path++;
   2f2aa:	683b      	ldr	r3, [r7, #0]
   2f2ac:	3301      	adds	r3, #1
   2f2ae:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2f2b0:	687b      	ldr	r3, [r7, #4]
   2f2b2:	2200      	movs	r2, #0
   2f2b4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2f2b6:	683b      	ldr	r3, [r7, #0]
   2f2b8:	781b      	ldrb	r3, [r3, #0]
   2f2ba:	2b1f      	cmp	r3, #31
   2f2bc:	d80c      	bhi.n	2f2d8 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2f2be:	230f      	movs	r3, #15
   2f2c0:	18fc      	adds	r4, r7, r3
   2f2c2:	687b      	ldr	r3, [r7, #4]
   2f2c4:	2100      	movs	r1, #0
   2f2c6:	0018      	movs	r0, r3
   2f2c8:	4b3c      	ldr	r3, [pc, #240]	; (2f3bc <follow_path+0x12c>)
   2f2ca:	4798      	blx	r3
   2f2cc:	0003      	movs	r3, r0
   2f2ce:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2f2d0:	687b      	ldr	r3, [r7, #4]
   2f2d2:	2200      	movs	r2, #0
   2f2d4:	615a      	str	r2, [r3, #20]
   2f2d6:	e06a      	b.n	2f3ae <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2f2d8:	230f      	movs	r3, #15
   2f2da:	18fc      	adds	r4, r7, r3
   2f2dc:	003a      	movs	r2, r7
   2f2de:	687b      	ldr	r3, [r7, #4]
   2f2e0:	0011      	movs	r1, r2
   2f2e2:	0018      	movs	r0, r3
   2f2e4:	4b36      	ldr	r3, [pc, #216]	; (2f3c0 <follow_path+0x130>)
   2f2e6:	4798      	blx	r3
   2f2e8:	0003      	movs	r3, r0
   2f2ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2f2ec:	230f      	movs	r3, #15
   2f2ee:	18fb      	adds	r3, r7, r3
   2f2f0:	781b      	ldrb	r3, [r3, #0]
   2f2f2:	2b00      	cmp	r3, #0
   2f2f4:	d154      	bne.n	2f3a0 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2f2f6:	230f      	movs	r3, #15
   2f2f8:	18fc      	adds	r4, r7, r3
   2f2fa:	687b      	ldr	r3, [r7, #4]
   2f2fc:	0018      	movs	r0, r3
   2f2fe:	4b31      	ldr	r3, [pc, #196]	; (2f3c4 <follow_path+0x134>)
   2f300:	4798      	blx	r3
   2f302:	0003      	movs	r3, r0
   2f304:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2f306:	687b      	ldr	r3, [r7, #4]
   2f308:	699a      	ldr	r2, [r3, #24]
   2f30a:	230e      	movs	r3, #14
   2f30c:	18fb      	adds	r3, r7, r3
   2f30e:	7ad2      	ldrb	r2, [r2, #11]
   2f310:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2f312:	230f      	movs	r3, #15
   2f314:	18fb      	adds	r3, r7, r3
   2f316:	781b      	ldrb	r3, [r3, #0]
   2f318:	2b00      	cmp	r3, #0
   2f31a:	d00f      	beq.n	2f33c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2f31c:	230f      	movs	r3, #15
   2f31e:	18fb      	adds	r3, r7, r3
   2f320:	781b      	ldrb	r3, [r3, #0]
   2f322:	2b04      	cmp	r3, #4
   2f324:	d13e      	bne.n	2f3a4 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2f326:	230e      	movs	r3, #14
   2f328:	18fb      	adds	r3, r7, r3
   2f32a:	781b      	ldrb	r3, [r3, #0]
   2f32c:	2204      	movs	r2, #4
   2f32e:	4013      	ands	r3, r2
   2f330:	d13a      	bne.n	2f3a8 <follow_path+0x118>
   2f332:	230f      	movs	r3, #15
   2f334:	18fb      	adds	r3, r7, r3
   2f336:	2205      	movs	r2, #5
   2f338:	701a      	strb	r2, [r3, #0]
				}
				break;
   2f33a:	e035      	b.n	2f3a8 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2f33c:	230e      	movs	r3, #14
   2f33e:	18fb      	adds	r3, r7, r3
   2f340:	781b      	ldrb	r3, [r3, #0]
   2f342:	2204      	movs	r2, #4
   2f344:	4013      	ands	r3, r2
   2f346:	d131      	bne.n	2f3ac <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2f348:	687b      	ldr	r3, [r7, #4]
   2f34a:	695b      	ldr	r3, [r3, #20]
   2f34c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2f34e:	68bb      	ldr	r3, [r7, #8]
   2f350:	330b      	adds	r3, #11
   2f352:	781b      	ldrb	r3, [r3, #0]
   2f354:	001a      	movs	r2, r3
   2f356:	2310      	movs	r3, #16
   2f358:	4013      	ands	r3, r2
   2f35a:	d104      	bne.n	2f366 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2f35c:	230f      	movs	r3, #15
   2f35e:	18fb      	adds	r3, r7, r3
   2f360:	2205      	movs	r2, #5
   2f362:	701a      	strb	r2, [r3, #0]
   2f364:	e023      	b.n	2f3ae <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2f366:	68bb      	ldr	r3, [r7, #8]
   2f368:	3315      	adds	r3, #21
   2f36a:	781b      	ldrb	r3, [r3, #0]
   2f36c:	021b      	lsls	r3, r3, #8
   2f36e:	b21a      	sxth	r2, r3
   2f370:	68bb      	ldr	r3, [r7, #8]
   2f372:	3314      	adds	r3, #20
   2f374:	781b      	ldrb	r3, [r3, #0]
   2f376:	b21b      	sxth	r3, r3
   2f378:	4313      	orrs	r3, r2
   2f37a:	b21b      	sxth	r3, r3
   2f37c:	b29b      	uxth	r3, r3
   2f37e:	041b      	lsls	r3, r3, #16
   2f380:	68ba      	ldr	r2, [r7, #8]
   2f382:	321b      	adds	r2, #27
   2f384:	7812      	ldrb	r2, [r2, #0]
   2f386:	0212      	lsls	r2, r2, #8
   2f388:	b211      	sxth	r1, r2
   2f38a:	68ba      	ldr	r2, [r7, #8]
   2f38c:	321a      	adds	r2, #26
   2f38e:	7812      	ldrb	r2, [r2, #0]
   2f390:	b212      	sxth	r2, r2
   2f392:	430a      	orrs	r2, r1
   2f394:	b212      	sxth	r2, r2
   2f396:	b292      	uxth	r2, r2
   2f398:	431a      	orrs	r2, r3
   2f39a:	687b      	ldr	r3, [r7, #4]
   2f39c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2f39e:	e79b      	b.n	2f2d8 <follow_path+0x48>
			if (res != FR_OK) break;
   2f3a0:	46c0      	nop			; (mov r8, r8)
   2f3a2:	e004      	b.n	2f3ae <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2f3a4:	46c0      	nop			; (mov r8, r8)
   2f3a6:	e002      	b.n	2f3ae <follow_path+0x11e>
				break;
   2f3a8:	46c0      	nop			; (mov r8, r8)
   2f3aa:	e000      	b.n	2f3ae <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2f3ac:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2f3ae:	230f      	movs	r3, #15
   2f3b0:	18fb      	adds	r3, r7, r3
   2f3b2:	781b      	ldrb	r3, [r3, #0]
}
   2f3b4:	0018      	movs	r0, r3
   2f3b6:	46bd      	mov	sp, r7
   2f3b8:	b005      	add	sp, #20
   2f3ba:	bd90      	pop	{r4, r7, pc}
   2f3bc:	0002e261 	.word	0x0002e261
   2f3c0:	0002ee49 	.word	0x0002ee49
   2f3c4:	0002e8e5 	.word	0x0002e8e5

0002f3c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2f3c8:	b590      	push	{r4, r7, lr}
   2f3ca:	b083      	sub	sp, #12
   2f3cc:	af00      	add	r7, sp, #0
   2f3ce:	6078      	str	r0, [r7, #4]
   2f3d0:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2f3d2:	687b      	ldr	r3, [r7, #4]
   2f3d4:	7858      	ldrb	r0, [r3, #1]
   2f3d6:	687b      	ldr	r3, [r7, #4]
   2f3d8:	3330      	adds	r3, #48	; 0x30
   2f3da:	0019      	movs	r1, r3
   2f3dc:	683a      	ldr	r2, [r7, #0]
   2f3de:	2301      	movs	r3, #1
   2f3e0:	4c2a      	ldr	r4, [pc, #168]	; (2f48c <check_fs+0xc4>)
   2f3e2:	47a0      	blx	r4
   2f3e4:	1e03      	subs	r3, r0, #0
   2f3e6:	d001      	beq.n	2f3ec <check_fs+0x24>
		return 3;
   2f3e8:	2303      	movs	r3, #3
   2f3ea:	e04b      	b.n	2f484 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2f3ec:	687b      	ldr	r3, [r7, #4]
   2f3ee:	4a28      	ldr	r2, [pc, #160]	; (2f490 <check_fs+0xc8>)
   2f3f0:	4694      	mov	ip, r2
   2f3f2:	4463      	add	r3, ip
   2f3f4:	3301      	adds	r3, #1
   2f3f6:	781b      	ldrb	r3, [r3, #0]
   2f3f8:	021b      	lsls	r3, r3, #8
   2f3fa:	b21a      	sxth	r2, r3
   2f3fc:	687b      	ldr	r3, [r7, #4]
   2f3fe:	4924      	ldr	r1, [pc, #144]	; (2f490 <check_fs+0xc8>)
   2f400:	5c5b      	ldrb	r3, [r3, r1]
   2f402:	b21b      	sxth	r3, r3
   2f404:	4313      	orrs	r3, r2
   2f406:	b21b      	sxth	r3, r3
   2f408:	4a22      	ldr	r2, [pc, #136]	; (2f494 <check_fs+0xcc>)
   2f40a:	4293      	cmp	r3, r2
   2f40c:	d001      	beq.n	2f412 <check_fs+0x4a>
		return 2;
   2f40e:	2302      	movs	r3, #2
   2f410:	e038      	b.n	2f484 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2f412:	687b      	ldr	r3, [r7, #4]
   2f414:	3366      	adds	r3, #102	; 0x66
   2f416:	3303      	adds	r3, #3
   2f418:	781b      	ldrb	r3, [r3, #0]
   2f41a:	061a      	lsls	r2, r3, #24
   2f41c:	687b      	ldr	r3, [r7, #4]
   2f41e:	3366      	adds	r3, #102	; 0x66
   2f420:	3302      	adds	r3, #2
   2f422:	781b      	ldrb	r3, [r3, #0]
   2f424:	041b      	lsls	r3, r3, #16
   2f426:	4313      	orrs	r3, r2
   2f428:	687a      	ldr	r2, [r7, #4]
   2f42a:	3266      	adds	r2, #102	; 0x66
   2f42c:	3201      	adds	r2, #1
   2f42e:	7812      	ldrb	r2, [r2, #0]
   2f430:	0212      	lsls	r2, r2, #8
   2f432:	4313      	orrs	r3, r2
   2f434:	687a      	ldr	r2, [r7, #4]
   2f436:	2166      	movs	r1, #102	; 0x66
   2f438:	5c52      	ldrb	r2, [r2, r1]
   2f43a:	4313      	orrs	r3, r2
   2f43c:	021b      	lsls	r3, r3, #8
   2f43e:	0a1b      	lsrs	r3, r3, #8
   2f440:	4a15      	ldr	r2, [pc, #84]	; (2f498 <check_fs+0xd0>)
   2f442:	4293      	cmp	r3, r2
   2f444:	d101      	bne.n	2f44a <check_fs+0x82>
		return 0;
   2f446:	2300      	movs	r3, #0
   2f448:	e01c      	b.n	2f484 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2f44a:	687b      	ldr	r3, [r7, #4]
   2f44c:	3382      	adds	r3, #130	; 0x82
   2f44e:	3303      	adds	r3, #3
   2f450:	781b      	ldrb	r3, [r3, #0]
   2f452:	061a      	lsls	r2, r3, #24
   2f454:	687b      	ldr	r3, [r7, #4]
   2f456:	3382      	adds	r3, #130	; 0x82
   2f458:	3302      	adds	r3, #2
   2f45a:	781b      	ldrb	r3, [r3, #0]
   2f45c:	041b      	lsls	r3, r3, #16
   2f45e:	4313      	orrs	r3, r2
   2f460:	687a      	ldr	r2, [r7, #4]
   2f462:	3282      	adds	r2, #130	; 0x82
   2f464:	3201      	adds	r2, #1
   2f466:	7812      	ldrb	r2, [r2, #0]
   2f468:	0212      	lsls	r2, r2, #8
   2f46a:	4313      	orrs	r3, r2
   2f46c:	687a      	ldr	r2, [r7, #4]
   2f46e:	2182      	movs	r1, #130	; 0x82
   2f470:	5c52      	ldrb	r2, [r2, r1]
   2f472:	4313      	orrs	r3, r2
   2f474:	021b      	lsls	r3, r3, #8
   2f476:	0a1b      	lsrs	r3, r3, #8
   2f478:	4a07      	ldr	r2, [pc, #28]	; (2f498 <check_fs+0xd0>)
   2f47a:	4293      	cmp	r3, r2
   2f47c:	d101      	bne.n	2f482 <check_fs+0xba>
		return 0;
   2f47e:	2300      	movs	r3, #0
   2f480:	e000      	b.n	2f484 <check_fs+0xbc>

	return 1;
   2f482:	2301      	movs	r3, #1
}
   2f484:	0018      	movs	r0, r3
   2f486:	46bd      	mov	sp, r7
   2f488:	b003      	add	sp, #12
   2f48a:	bd90      	pop	{r4, r7, pc}
   2f48c:	0002d631 	.word	0x0002d631
   2f490:	0000022e 	.word	0x0000022e
   2f494:	ffffaa55 	.word	0xffffaa55
   2f498:	00544146 	.word	0x00544146

0002f49c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2f49c:	b590      	push	{r4, r7, lr}
   2f49e:	b093      	sub	sp, #76	; 0x4c
   2f4a0:	af00      	add	r7, sp, #0
   2f4a2:	60f8      	str	r0, [r7, #12]
   2f4a4:	60b9      	str	r1, [r7, #8]
   2f4a6:	1dfb      	adds	r3, r7, #7
   2f4a8:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2f4aa:	68fb      	ldr	r3, [r7, #12]
   2f4ac:	681b      	ldr	r3, [r3, #0]
   2f4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f4b2:	781b      	ldrb	r3, [r3, #0]
   2f4b4:	3b30      	subs	r3, #48	; 0x30
   2f4b6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2f4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f4ba:	2b09      	cmp	r3, #9
   2f4bc:	d80b      	bhi.n	2f4d6 <chk_mounted+0x3a>
   2f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f4c0:	3301      	adds	r3, #1
   2f4c2:	781b      	ldrb	r3, [r3, #0]
   2f4c4:	2b3a      	cmp	r3, #58	; 0x3a
   2f4c6:	d106      	bne.n	2f4d6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f4ca:	3302      	adds	r3, #2
   2f4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   2f4ce:	68fb      	ldr	r3, [r7, #12]
   2f4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2f4d2:	601a      	str	r2, [r3, #0]
   2f4d4:	e001      	b.n	2f4da <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2f4d6:	2300      	movs	r3, #0
   2f4d8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2f4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f4dc:	2b07      	cmp	r3, #7
   2f4de:	d901      	bls.n	2f4e4 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2f4e0:	230b      	movs	r3, #11
   2f4e2:	e2af      	b.n	2fa44 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2f4e4:	4bc5      	ldr	r3, [pc, #788]	; (2f7fc <chk_mounted+0x360>)
   2f4e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2f4e8:	0092      	lsls	r2, r2, #2
   2f4ea:	58d3      	ldr	r3, [r2, r3]
   2f4ec:	62bb      	str	r3, [r7, #40]	; 0x28
   2f4ee:	68bb      	ldr	r3, [r7, #8]
   2f4f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f4f2:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2f4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4f6:	2b00      	cmp	r3, #0
   2f4f8:	d101      	bne.n	2f4fe <chk_mounted+0x62>
   2f4fa:	230c      	movs	r3, #12
   2f4fc:	e2a2      	b.n	2fa44 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f500:	781b      	ldrb	r3, [r3, #0]
   2f502:	2b00      	cmp	r3, #0
   2f504:	d01c      	beq.n	2f540 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f508:	785b      	ldrb	r3, [r3, #1]
   2f50a:	2227      	movs	r2, #39	; 0x27
   2f50c:	18bc      	adds	r4, r7, r2
   2f50e:	0018      	movs	r0, r3
   2f510:	4bbb      	ldr	r3, [pc, #748]	; (2f800 <chk_mounted+0x364>)
   2f512:	4798      	blx	r3
   2f514:	0003      	movs	r3, r0
   2f516:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2f518:	2327      	movs	r3, #39	; 0x27
   2f51a:	18fb      	adds	r3, r7, r3
   2f51c:	781b      	ldrb	r3, [r3, #0]
   2f51e:	2201      	movs	r2, #1
   2f520:	4013      	ands	r3, r2
   2f522:	d10d      	bne.n	2f540 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2f524:	1dfb      	adds	r3, r7, #7
   2f526:	781b      	ldrb	r3, [r3, #0]
   2f528:	2b00      	cmp	r3, #0
   2f52a:	d007      	beq.n	2f53c <chk_mounted+0xa0>
   2f52c:	2327      	movs	r3, #39	; 0x27
   2f52e:	18fb      	adds	r3, r7, r3
   2f530:	781b      	ldrb	r3, [r3, #0]
   2f532:	2204      	movs	r2, #4
   2f534:	4013      	ands	r3, r2
   2f536:	d001      	beq.n	2f53c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2f538:	230a      	movs	r3, #10
   2f53a:	e283      	b.n	2fa44 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2f53c:	2300      	movs	r3, #0
   2f53e:	e281      	b.n	2fa44 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2f540:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f542:	2200      	movs	r2, #0
   2f544:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2f546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f548:	b2da      	uxtb	r2, r3
   2f54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f54c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f550:	785b      	ldrb	r3, [r3, #1]
   2f552:	2227      	movs	r2, #39	; 0x27
   2f554:	18bc      	adds	r4, r7, r2
   2f556:	0018      	movs	r0, r3
   2f558:	4baa      	ldr	r3, [pc, #680]	; (2f804 <chk_mounted+0x368>)
   2f55a:	4798      	blx	r3
   2f55c:	0003      	movs	r3, r0
   2f55e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2f560:	2327      	movs	r3, #39	; 0x27
   2f562:	18fb      	adds	r3, r7, r3
   2f564:	781b      	ldrb	r3, [r3, #0]
   2f566:	2201      	movs	r2, #1
   2f568:	4013      	ands	r3, r2
   2f56a:	d001      	beq.n	2f570 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2f56c:	2303      	movs	r3, #3
   2f56e:	e269      	b.n	2fa44 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2f570:	1dfb      	adds	r3, r7, #7
   2f572:	781b      	ldrb	r3, [r3, #0]
   2f574:	2b00      	cmp	r3, #0
   2f576:	d007      	beq.n	2f588 <chk_mounted+0xec>
   2f578:	2327      	movs	r3, #39	; 0x27
   2f57a:	18fb      	adds	r3, r7, r3
   2f57c:	781b      	ldrb	r3, [r3, #0]
   2f57e:	2204      	movs	r2, #4
   2f580:	4013      	ands	r3, r2
   2f582:	d001      	beq.n	2f588 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2f584:	230a      	movs	r3, #10
   2f586:	e25d      	b.n	2fa44 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2f588:	2300      	movs	r3, #0
   2f58a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2f58c:	2347      	movs	r3, #71	; 0x47
   2f58e:	18fc      	adds	r4, r7, r3
   2f590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f592:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f594:	0011      	movs	r1, r2
   2f596:	0018      	movs	r0, r3
   2f598:	4b9b      	ldr	r3, [pc, #620]	; (2f808 <chk_mounted+0x36c>)
   2f59a:	4798      	blx	r3
   2f59c:	0003      	movs	r3, r0
   2f59e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2f5a0:	2347      	movs	r3, #71	; 0x47
   2f5a2:	18fb      	adds	r3, r7, r3
   2f5a4:	781b      	ldrb	r3, [r3, #0]
   2f5a6:	2b01      	cmp	r3, #1
   2f5a8:	d13b      	bne.n	2f622 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2f5aa:	2346      	movs	r3, #70	; 0x46
   2f5ac:	18fb      	adds	r3, r7, r3
   2f5ae:	2200      	movs	r2, #0
   2f5b0:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2f5b2:	2346      	movs	r3, #70	; 0x46
   2f5b4:	18fb      	adds	r3, r7, r3
   2f5b6:	781b      	ldrb	r3, [r3, #0]
   2f5b8:	2b00      	cmp	r3, #0
   2f5ba:	d006      	beq.n	2f5ca <chk_mounted+0x12e>
   2f5bc:	2346      	movs	r3, #70	; 0x46
   2f5be:	18fb      	adds	r3, r7, r3
   2f5c0:	781a      	ldrb	r2, [r3, #0]
   2f5c2:	2346      	movs	r3, #70	; 0x46
   2f5c4:	18fb      	adds	r3, r7, r3
   2f5c6:	3a01      	subs	r2, #1
   2f5c8:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2f5ca:	2346      	movs	r3, #70	; 0x46
   2f5cc:	18fb      	adds	r3, r7, r3
   2f5ce:	781b      	ldrb	r3, [r3, #0]
   2f5d0:	011b      	lsls	r3, r3, #4
   2f5d2:	33bf      	adds	r3, #191	; 0xbf
   2f5d4:	33ff      	adds	r3, #255	; 0xff
   2f5d6:	3330      	adds	r3, #48	; 0x30
   2f5d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f5da:	18d3      	adds	r3, r2, r3
   2f5dc:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2f5de:	6a3b      	ldr	r3, [r7, #32]
   2f5e0:	3304      	adds	r3, #4
   2f5e2:	781b      	ldrb	r3, [r3, #0]
   2f5e4:	2b00      	cmp	r3, #0
   2f5e6:	d01c      	beq.n	2f622 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2f5e8:	6a3b      	ldr	r3, [r7, #32]
   2f5ea:	330b      	adds	r3, #11
   2f5ec:	781b      	ldrb	r3, [r3, #0]
   2f5ee:	061a      	lsls	r2, r3, #24
   2f5f0:	6a3b      	ldr	r3, [r7, #32]
   2f5f2:	330a      	adds	r3, #10
   2f5f4:	781b      	ldrb	r3, [r3, #0]
   2f5f6:	041b      	lsls	r3, r3, #16
   2f5f8:	4313      	orrs	r3, r2
   2f5fa:	6a3a      	ldr	r2, [r7, #32]
   2f5fc:	3209      	adds	r2, #9
   2f5fe:	7812      	ldrb	r2, [r2, #0]
   2f600:	0212      	lsls	r2, r2, #8
   2f602:	4313      	orrs	r3, r2
   2f604:	6a3a      	ldr	r2, [r7, #32]
   2f606:	3208      	adds	r2, #8
   2f608:	7812      	ldrb	r2, [r2, #0]
   2f60a:	4313      	orrs	r3, r2
   2f60c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2f60e:	2347      	movs	r3, #71	; 0x47
   2f610:	18fc      	adds	r4, r7, r3
   2f612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f616:	0011      	movs	r1, r2
   2f618:	0018      	movs	r0, r3
   2f61a:	4b7b      	ldr	r3, [pc, #492]	; (2f808 <chk_mounted+0x36c>)
   2f61c:	4798      	blx	r3
   2f61e:	0003      	movs	r3, r0
   2f620:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2f622:	2347      	movs	r3, #71	; 0x47
   2f624:	18fb      	adds	r3, r7, r3
   2f626:	781b      	ldrb	r3, [r3, #0]
   2f628:	2b03      	cmp	r3, #3
   2f62a:	d101      	bne.n	2f630 <chk_mounted+0x194>
   2f62c:	2301      	movs	r3, #1
   2f62e:	e209      	b.n	2fa44 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2f630:	2347      	movs	r3, #71	; 0x47
   2f632:	18fb      	adds	r3, r7, r3
   2f634:	781b      	ldrb	r3, [r3, #0]
   2f636:	2b00      	cmp	r3, #0
   2f638:	d001      	beq.n	2f63e <chk_mounted+0x1a2>
   2f63a:	230d      	movs	r3, #13
   2f63c:	e202      	b.n	2fa44 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2f63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f640:	223c      	movs	r2, #60	; 0x3c
   2f642:	5c9b      	ldrb	r3, [r3, r2]
   2f644:	021b      	lsls	r3, r3, #8
   2f646:	b21a      	sxth	r2, r3
   2f648:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f64a:	213b      	movs	r1, #59	; 0x3b
   2f64c:	5c5b      	ldrb	r3, [r3, r1]
   2f64e:	b21b      	sxth	r3, r3
   2f650:	4313      	orrs	r3, r2
   2f652:	b21a      	sxth	r2, r3
   2f654:	2380      	movs	r3, #128	; 0x80
   2f656:	009b      	lsls	r3, r3, #2
   2f658:	429a      	cmp	r2, r3
   2f65a:	d001      	beq.n	2f660 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2f65c:	230d      	movs	r3, #13
   2f65e:	e1f1      	b.n	2fa44 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2f660:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f662:	2247      	movs	r2, #71	; 0x47
   2f664:	5c9b      	ldrb	r3, [r3, r2]
   2f666:	021b      	lsls	r3, r3, #8
   2f668:	b21a      	sxth	r2, r3
   2f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f66c:	2146      	movs	r1, #70	; 0x46
   2f66e:	5c5b      	ldrb	r3, [r3, r1]
   2f670:	b21b      	sxth	r3, r3
   2f672:	4313      	orrs	r3, r2
   2f674:	b21b      	sxth	r3, r3
   2f676:	b29b      	uxth	r3, r3
   2f678:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2f67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f67c:	2b00      	cmp	r3, #0
   2f67e:	d112      	bne.n	2f6a6 <chk_mounted+0x20a>
   2f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f682:	2257      	movs	r2, #87	; 0x57
   2f684:	5c9b      	ldrb	r3, [r3, r2]
   2f686:	061a      	lsls	r2, r3, #24
   2f688:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f68a:	2156      	movs	r1, #86	; 0x56
   2f68c:	5c5b      	ldrb	r3, [r3, r1]
   2f68e:	041b      	lsls	r3, r3, #16
   2f690:	4313      	orrs	r3, r2
   2f692:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f694:	2155      	movs	r1, #85	; 0x55
   2f696:	5c52      	ldrb	r2, [r2, r1]
   2f698:	0212      	lsls	r2, r2, #8
   2f69a:	4313      	orrs	r3, r2
   2f69c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f69e:	2154      	movs	r1, #84	; 0x54
   2f6a0:	5c52      	ldrb	r2, [r2, r1]
   2f6a2:	4313      	orrs	r3, r2
   2f6a4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2f6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2f6aa:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2f6ac:	231f      	movs	r3, #31
   2f6ae:	18fb      	adds	r3, r7, r3
   2f6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f6b2:	2140      	movs	r1, #64	; 0x40
   2f6b4:	5c52      	ldrb	r2, [r2, r1]
   2f6b6:	701a      	strb	r2, [r3, #0]
   2f6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f6ba:	221f      	movs	r2, #31
   2f6bc:	18ba      	adds	r2, r7, r2
   2f6be:	7812      	ldrb	r2, [r2, #0]
   2f6c0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2f6c2:	231f      	movs	r3, #31
   2f6c4:	18fb      	adds	r3, r7, r3
   2f6c6:	781b      	ldrb	r3, [r3, #0]
   2f6c8:	2b01      	cmp	r3, #1
   2f6ca:	d006      	beq.n	2f6da <chk_mounted+0x23e>
   2f6cc:	231f      	movs	r3, #31
   2f6ce:	18fb      	adds	r3, r7, r3
   2f6d0:	781b      	ldrb	r3, [r3, #0]
   2f6d2:	2b02      	cmp	r3, #2
   2f6d4:	d001      	beq.n	2f6da <chk_mounted+0x23e>
   2f6d6:	230d      	movs	r3, #13
   2f6d8:	e1b4      	b.n	2fa44 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2f6da:	231f      	movs	r3, #31
   2f6dc:	18fb      	adds	r3, r7, r3
   2f6de:	781a      	ldrb	r2, [r3, #0]
   2f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f6e2:	4353      	muls	r3, r2
   2f6e4:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2f6e6:	231f      	movs	r3, #31
   2f6e8:	18fb      	adds	r3, r7, r3
   2f6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f6ec:	213d      	movs	r1, #61	; 0x3d
   2f6ee:	5c52      	ldrb	r2, [r2, r1]
   2f6f0:	701a      	strb	r2, [r3, #0]
   2f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f6f4:	221f      	movs	r2, #31
   2f6f6:	18ba      	adds	r2, r7, r2
   2f6f8:	7812      	ldrb	r2, [r2, #0]
   2f6fa:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2f6fc:	231f      	movs	r3, #31
   2f6fe:	18fb      	adds	r3, r7, r3
   2f700:	781b      	ldrb	r3, [r3, #0]
   2f702:	2b00      	cmp	r3, #0
   2f704:	d008      	beq.n	2f718 <chk_mounted+0x27c>
   2f706:	231f      	movs	r3, #31
   2f708:	18fb      	adds	r3, r7, r3
   2f70a:	781b      	ldrb	r3, [r3, #0]
   2f70c:	221f      	movs	r2, #31
   2f70e:	18ba      	adds	r2, r7, r2
   2f710:	7812      	ldrb	r2, [r2, #0]
   2f712:	3a01      	subs	r2, #1
   2f714:	4013      	ands	r3, r2
   2f716:	d001      	beq.n	2f71c <chk_mounted+0x280>
   2f718:	230d      	movs	r3, #13
   2f71a:	e193      	b.n	2fa44 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2f71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f71e:	2242      	movs	r2, #66	; 0x42
   2f720:	5c9b      	ldrb	r3, [r3, r2]
   2f722:	021b      	lsls	r3, r3, #8
   2f724:	b21a      	sxth	r2, r3
   2f726:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f728:	2141      	movs	r1, #65	; 0x41
   2f72a:	5c5b      	ldrb	r3, [r3, r1]
   2f72c:	b21b      	sxth	r3, r3
   2f72e:	4313      	orrs	r3, r2
   2f730:	b21b      	sxth	r3, r3
   2f732:	b29a      	uxth	r2, r3
   2f734:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f736:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2f738:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f73a:	891b      	ldrh	r3, [r3, #8]
   2f73c:	220f      	movs	r2, #15
   2f73e:	4013      	ands	r3, r2
   2f740:	b29b      	uxth	r3, r3
   2f742:	2b00      	cmp	r3, #0
   2f744:	d001      	beq.n	2f74a <chk_mounted+0x2ae>
   2f746:	230d      	movs	r3, #13
   2f748:	e17c      	b.n	2fa44 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2f74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f74c:	2244      	movs	r2, #68	; 0x44
   2f74e:	5c9b      	ldrb	r3, [r3, r2]
   2f750:	021b      	lsls	r3, r3, #8
   2f752:	b21a      	sxth	r2, r3
   2f754:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f756:	2143      	movs	r1, #67	; 0x43
   2f758:	5c5b      	ldrb	r3, [r3, r1]
   2f75a:	b21b      	sxth	r3, r3
   2f75c:	4313      	orrs	r3, r2
   2f75e:	b21b      	sxth	r3, r3
   2f760:	b29b      	uxth	r3, r3
   2f762:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2f764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f766:	2b00      	cmp	r3, #0
   2f768:	d112      	bne.n	2f790 <chk_mounted+0x2f4>
   2f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f76c:	2253      	movs	r2, #83	; 0x53
   2f76e:	5c9b      	ldrb	r3, [r3, r2]
   2f770:	061a      	lsls	r2, r3, #24
   2f772:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f774:	2152      	movs	r1, #82	; 0x52
   2f776:	5c5b      	ldrb	r3, [r3, r1]
   2f778:	041b      	lsls	r3, r3, #16
   2f77a:	4313      	orrs	r3, r2
   2f77c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f77e:	2151      	movs	r1, #81	; 0x51
   2f780:	5c52      	ldrb	r2, [r2, r1]
   2f782:	0212      	lsls	r2, r2, #8
   2f784:	4313      	orrs	r3, r2
   2f786:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f788:	2150      	movs	r1, #80	; 0x50
   2f78a:	5c52      	ldrb	r2, [r2, r1]
   2f78c:	4313      	orrs	r3, r2
   2f78e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f792:	223f      	movs	r2, #63	; 0x3f
   2f794:	5c9b      	ldrb	r3, [r3, r2]
   2f796:	021b      	lsls	r3, r3, #8
   2f798:	b21a      	sxth	r2, r3
   2f79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f79c:	213e      	movs	r1, #62	; 0x3e
   2f79e:	5c5b      	ldrb	r3, [r3, r1]
   2f7a0:	b21b      	sxth	r3, r3
   2f7a2:	4313      	orrs	r3, r2
   2f7a4:	b21a      	sxth	r2, r3
   2f7a6:	231c      	movs	r3, #28
   2f7a8:	18fb      	adds	r3, r7, r3
   2f7aa:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2f7ac:	231c      	movs	r3, #28
   2f7ae:	18fb      	adds	r3, r7, r3
   2f7b0:	881b      	ldrh	r3, [r3, #0]
   2f7b2:	2b00      	cmp	r3, #0
   2f7b4:	d101      	bne.n	2f7ba <chk_mounted+0x31e>
   2f7b6:	230d      	movs	r3, #13
   2f7b8:	e144      	b.n	2fa44 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2f7ba:	231c      	movs	r3, #28
   2f7bc:	18fb      	adds	r3, r7, r3
   2f7be:	881a      	ldrh	r2, [r3, #0]
   2f7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f7c2:	18d3      	adds	r3, r2, r3
   2f7c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f7c6:	8912      	ldrh	r2, [r2, #8]
   2f7c8:	0912      	lsrs	r2, r2, #4
   2f7ca:	b292      	uxth	r2, r2
   2f7cc:	189b      	adds	r3, r3, r2
   2f7ce:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2f7d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2f7d2:	69bb      	ldr	r3, [r7, #24]
   2f7d4:	429a      	cmp	r2, r3
   2f7d6:	d201      	bcs.n	2f7dc <chk_mounted+0x340>
   2f7d8:	230d      	movs	r3, #13
   2f7da:	e133      	b.n	2fa44 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2f7dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2f7de:	69bb      	ldr	r3, [r7, #24]
   2f7e0:	1ad2      	subs	r2, r2, r3
   2f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f7e4:	789b      	ldrb	r3, [r3, #2]
   2f7e6:	0019      	movs	r1, r3
   2f7e8:	4b08      	ldr	r3, [pc, #32]	; (2f80c <chk_mounted+0x370>)
   2f7ea:	0010      	movs	r0, r2
   2f7ec:	4798      	blx	r3
   2f7ee:	0003      	movs	r3, r0
   2f7f0:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2f7f2:	697b      	ldr	r3, [r7, #20]
   2f7f4:	2b00      	cmp	r3, #0
   2f7f6:	d10b      	bne.n	2f810 <chk_mounted+0x374>
   2f7f8:	230d      	movs	r3, #13
   2f7fa:	e123      	b.n	2fa44 <chk_mounted+0x5a8>
   2f7fc:	20004158 	.word	0x20004158
   2f800:	0002d5f9 	.word	0x0002d5f9
   2f804:	0002d575 	.word	0x0002d575
   2f808:	0002f3c9 	.word	0x0002f3c9
   2f80c:	00034bf5 	.word	0x00034bf5
	fmt = FS_FAT12;
   2f810:	2347      	movs	r3, #71	; 0x47
   2f812:	18fb      	adds	r3, r7, r3
   2f814:	2201      	movs	r2, #1
   2f816:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2f818:	697b      	ldr	r3, [r7, #20]
   2f81a:	4a8c      	ldr	r2, [pc, #560]	; (2fa4c <chk_mounted+0x5b0>)
   2f81c:	4293      	cmp	r3, r2
   2f81e:	d903      	bls.n	2f828 <chk_mounted+0x38c>
   2f820:	2347      	movs	r3, #71	; 0x47
   2f822:	18fb      	adds	r3, r7, r3
   2f824:	2202      	movs	r2, #2
   2f826:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2f828:	697b      	ldr	r3, [r7, #20]
   2f82a:	4a89      	ldr	r2, [pc, #548]	; (2fa50 <chk_mounted+0x5b4>)
   2f82c:	4293      	cmp	r3, r2
   2f82e:	d903      	bls.n	2f838 <chk_mounted+0x39c>
   2f830:	2347      	movs	r3, #71	; 0x47
   2f832:	18fb      	adds	r3, r7, r3
   2f834:	2203      	movs	r2, #3
   2f836:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2f838:	697b      	ldr	r3, [r7, #20]
   2f83a:	1c9a      	adds	r2, r3, #2
   2f83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f83e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2f840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f842:	69bb      	ldr	r3, [r7, #24]
   2f844:	18d2      	adds	r2, r2, r3
   2f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f848:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2f84a:	231c      	movs	r3, #28
   2f84c:	18fb      	adds	r3, r7, r3
   2f84e:	881a      	ldrh	r2, [r3, #0]
   2f850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f852:	18d2      	adds	r2, r2, r3
   2f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f856:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2f858:	2347      	movs	r3, #71	; 0x47
   2f85a:	18fb      	adds	r3, r7, r3
   2f85c:	781b      	ldrb	r3, [r3, #0]
   2f85e:	2b03      	cmp	r3, #3
   2f860:	d11e      	bne.n	2f8a0 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2f862:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f864:	891b      	ldrh	r3, [r3, #8]
   2f866:	2b00      	cmp	r3, #0
   2f868:	d001      	beq.n	2f86e <chk_mounted+0x3d2>
   2f86a:	230d      	movs	r3, #13
   2f86c:	e0ea      	b.n	2fa44 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2f86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f870:	225f      	movs	r2, #95	; 0x5f
   2f872:	5c9b      	ldrb	r3, [r3, r2]
   2f874:	061a      	lsls	r2, r3, #24
   2f876:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f878:	215e      	movs	r1, #94	; 0x5e
   2f87a:	5c5b      	ldrb	r3, [r3, r1]
   2f87c:	041b      	lsls	r3, r3, #16
   2f87e:	4313      	orrs	r3, r2
   2f880:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f882:	215d      	movs	r1, #93	; 0x5d
   2f884:	5c52      	ldrb	r2, [r2, r1]
   2f886:	0212      	lsls	r2, r2, #8
   2f888:	4313      	orrs	r3, r2
   2f88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f88c:	215c      	movs	r1, #92	; 0x5c
   2f88e:	5c52      	ldrb	r2, [r2, r1]
   2f890:	431a      	orrs	r2, r3
   2f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f894:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2f896:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f898:	699b      	ldr	r3, [r3, #24]
   2f89a:	009b      	lsls	r3, r3, #2
   2f89c:	633b      	str	r3, [r7, #48]	; 0x30
   2f89e:	e020      	b.n	2f8e2 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2f8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8a2:	891b      	ldrh	r3, [r3, #8]
   2f8a4:	2b00      	cmp	r3, #0
   2f8a6:	d101      	bne.n	2f8ac <chk_mounted+0x410>
   2f8a8:	230d      	movs	r3, #13
   2f8aa:	e0cb      	b.n	2fa44 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2f8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8ae:	6a1a      	ldr	r2, [r3, #32]
   2f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f8b2:	18d2      	adds	r2, r2, r3
   2f8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8b6:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2f8b8:	2347      	movs	r3, #71	; 0x47
   2f8ba:	18fb      	adds	r3, r7, r3
   2f8bc:	781b      	ldrb	r3, [r3, #0]
   2f8be:	2b02      	cmp	r3, #2
   2f8c0:	d103      	bne.n	2f8ca <chk_mounted+0x42e>
   2f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8c4:	699b      	ldr	r3, [r3, #24]
   2f8c6:	005b      	lsls	r3, r3, #1
   2f8c8:	e00a      	b.n	2f8e0 <chk_mounted+0x444>
   2f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8cc:	699a      	ldr	r2, [r3, #24]
   2f8ce:	0013      	movs	r3, r2
   2f8d0:	005b      	lsls	r3, r3, #1
   2f8d2:	189b      	adds	r3, r3, r2
   2f8d4:	085a      	lsrs	r2, r3, #1
   2f8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8d8:	699b      	ldr	r3, [r3, #24]
   2f8da:	2101      	movs	r1, #1
   2f8dc:	400b      	ands	r3, r1
   2f8de:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2f8e0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2f8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8e4:	69da      	ldr	r2, [r3, #28]
   2f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f8e8:	495a      	ldr	r1, [pc, #360]	; (2fa54 <chk_mounted+0x5b8>)
   2f8ea:	468c      	mov	ip, r1
   2f8ec:	4463      	add	r3, ip
   2f8ee:	0a5b      	lsrs	r3, r3, #9
   2f8f0:	429a      	cmp	r2, r3
   2f8f2:	d201      	bcs.n	2f8f8 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2f8f4:	230d      	movs	r3, #13
   2f8f6:	e0a5      	b.n	2fa44 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8fa:	2201      	movs	r2, #1
   2f8fc:	4252      	negs	r2, r2
   2f8fe:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f902:	2200      	movs	r2, #0
   2f904:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2f906:	2347      	movs	r3, #71	; 0x47
   2f908:	18fb      	adds	r3, r7, r3
   2f90a:	781b      	ldrb	r3, [r3, #0]
   2f90c:	2b03      	cmp	r3, #3
   2f90e:	d000      	beq.n	2f912 <chk_mounted+0x476>
   2f910:	e082      	b.n	2fa18 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f914:	2200      	movs	r2, #0
   2f916:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f91a:	2261      	movs	r2, #97	; 0x61
   2f91c:	5c9b      	ldrb	r3, [r3, r2]
   2f91e:	021b      	lsls	r3, r3, #8
   2f920:	b21a      	sxth	r2, r3
   2f922:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f924:	2160      	movs	r1, #96	; 0x60
   2f926:	5c5b      	ldrb	r3, [r3, r1]
   2f928:	b21b      	sxth	r3, r3
   2f92a:	4313      	orrs	r3, r2
   2f92c:	b21b      	sxth	r3, r3
   2f92e:	b29b      	uxth	r3, r3
   2f930:	001a      	movs	r2, r3
   2f932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f934:	18d2      	adds	r2, r2, r3
   2f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f938:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2f93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f93c:	7858      	ldrb	r0, [r3, #1]
   2f93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f940:	3330      	adds	r3, #48	; 0x30
   2f942:	0019      	movs	r1, r3
   2f944:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f946:	695a      	ldr	r2, [r3, #20]
   2f948:	2301      	movs	r3, #1
   2f94a:	4c43      	ldr	r4, [pc, #268]	; (2fa58 <chk_mounted+0x5bc>)
   2f94c:	47a0      	blx	r4
   2f94e:	1e03      	subs	r3, r0, #0
   2f950:	d162      	bne.n	2fa18 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2f952:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f954:	4a41      	ldr	r2, [pc, #260]	; (2fa5c <chk_mounted+0x5c0>)
   2f956:	5c9b      	ldrb	r3, [r3, r2]
   2f958:	021b      	lsls	r3, r3, #8
   2f95a:	b21a      	sxth	r2, r3
   2f95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f95e:	4940      	ldr	r1, [pc, #256]	; (2fa60 <chk_mounted+0x5c4>)
   2f960:	5c5b      	ldrb	r3, [r3, r1]
   2f962:	b21b      	sxth	r3, r3
   2f964:	4313      	orrs	r3, r2
   2f966:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2f968:	4a3e      	ldr	r2, [pc, #248]	; (2fa64 <chk_mounted+0x5c8>)
   2f96a:	4293      	cmp	r3, r2
   2f96c:	d154      	bne.n	2fa18 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2f96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f970:	2233      	movs	r2, #51	; 0x33
   2f972:	5c9b      	ldrb	r3, [r3, r2]
   2f974:	061a      	lsls	r2, r3, #24
   2f976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f978:	2132      	movs	r1, #50	; 0x32
   2f97a:	5c5b      	ldrb	r3, [r3, r1]
   2f97c:	041b      	lsls	r3, r3, #16
   2f97e:	4313      	orrs	r3, r2
   2f980:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f982:	2131      	movs	r1, #49	; 0x31
   2f984:	5c52      	ldrb	r2, [r2, r1]
   2f986:	0212      	lsls	r2, r2, #8
   2f988:	4313      	orrs	r3, r2
   2f98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f98c:	2130      	movs	r1, #48	; 0x30
   2f98e:	5c52      	ldrb	r2, [r2, r1]
   2f990:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2f992:	4a35      	ldr	r2, [pc, #212]	; (2fa68 <chk_mounted+0x5cc>)
   2f994:	4293      	cmp	r3, r2
   2f996:	d13f      	bne.n	2fa18 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2f998:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f99a:	4a34      	ldr	r2, [pc, #208]	; (2fa6c <chk_mounted+0x5d0>)
   2f99c:	5c9b      	ldrb	r3, [r3, r2]
   2f99e:	061a      	lsls	r2, r3, #24
   2f9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9a2:	4933      	ldr	r1, [pc, #204]	; (2fa70 <chk_mounted+0x5d4>)
   2f9a4:	5c5b      	ldrb	r3, [r3, r1]
   2f9a6:	041b      	lsls	r3, r3, #16
   2f9a8:	4313      	orrs	r3, r2
   2f9aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f9ac:	4931      	ldr	r1, [pc, #196]	; (2fa74 <chk_mounted+0x5d8>)
   2f9ae:	5c52      	ldrb	r2, [r2, r1]
   2f9b0:	0212      	lsls	r2, r2, #8
   2f9b2:	4313      	orrs	r3, r2
   2f9b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2f9b6:	2285      	movs	r2, #133	; 0x85
   2f9b8:	0092      	lsls	r2, r2, #2
   2f9ba:	5c8a      	ldrb	r2, [r1, r2]
   2f9bc:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2f9be:	4a2e      	ldr	r2, [pc, #184]	; (2fa78 <chk_mounted+0x5dc>)
   2f9c0:	4293      	cmp	r3, r2
   2f9c2:	d129      	bne.n	2fa18 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9c6:	4a2d      	ldr	r2, [pc, #180]	; (2fa7c <chk_mounted+0x5e0>)
   2f9c8:	5c9b      	ldrb	r3, [r3, r2]
   2f9ca:	061a      	lsls	r2, r3, #24
   2f9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9ce:	492c      	ldr	r1, [pc, #176]	; (2fa80 <chk_mounted+0x5e4>)
   2f9d0:	5c5b      	ldrb	r3, [r3, r1]
   2f9d2:	041b      	lsls	r3, r3, #16
   2f9d4:	4313      	orrs	r3, r2
   2f9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f9d8:	492a      	ldr	r1, [pc, #168]	; (2fa84 <chk_mounted+0x5e8>)
   2f9da:	5c52      	ldrb	r2, [r2, r1]
   2f9dc:	0212      	lsls	r2, r2, #8
   2f9de:	4313      	orrs	r3, r2
   2f9e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2f9e2:	2287      	movs	r2, #135	; 0x87
   2f9e4:	0092      	lsls	r2, r2, #2
   2f9e6:	5c8a      	ldrb	r2, [r1, r2]
   2f9e8:	431a      	orrs	r2, r3
   2f9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9ec:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2f9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9f0:	4a25      	ldr	r2, [pc, #148]	; (2fa88 <chk_mounted+0x5ec>)
   2f9f2:	5c9b      	ldrb	r3, [r3, r2]
   2f9f4:	061a      	lsls	r2, r3, #24
   2f9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9f8:	4924      	ldr	r1, [pc, #144]	; (2fa8c <chk_mounted+0x5f0>)
   2f9fa:	5c5b      	ldrb	r3, [r3, r1]
   2f9fc:	041b      	lsls	r3, r3, #16
   2f9fe:	4313      	orrs	r3, r2
   2fa00:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fa02:	4923      	ldr	r1, [pc, #140]	; (2fa90 <chk_mounted+0x5f4>)
   2fa04:	5c52      	ldrb	r2, [r2, r1]
   2fa06:	0212      	lsls	r2, r2, #8
   2fa08:	4313      	orrs	r3, r2
   2fa0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fa0c:	2286      	movs	r2, #134	; 0x86
   2fa0e:	0092      	lsls	r2, r2, #2
   2fa10:	5c8a      	ldrb	r2, [r1, r2]
   2fa12:	431a      	orrs	r2, r3
   2fa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa16:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2fa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa1a:	2247      	movs	r2, #71	; 0x47
   2fa1c:	18ba      	adds	r2, r7, r2
   2fa1e:	7812      	ldrb	r2, [r2, #0]
   2fa20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2fa22:	4b1c      	ldr	r3, [pc, #112]	; (2fa94 <chk_mounted+0x5f8>)
   2fa24:	881b      	ldrh	r3, [r3, #0]
   2fa26:	3301      	adds	r3, #1
   2fa28:	b29a      	uxth	r2, r3
   2fa2a:	4b1a      	ldr	r3, [pc, #104]	; (2fa94 <chk_mounted+0x5f8>)
   2fa2c:	801a      	strh	r2, [r3, #0]
   2fa2e:	4b19      	ldr	r3, [pc, #100]	; (2fa94 <chk_mounted+0x5f8>)
   2fa30:	881a      	ldrh	r2, [r3, #0]
   2fa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa34:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2fa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa38:	2200      	movs	r2, #0
   2fa3a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2fa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa3e:	2200      	movs	r2, #0
   2fa40:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2fa42:	2300      	movs	r3, #0
}
   2fa44:	0018      	movs	r0, r3
   2fa46:	46bd      	mov	sp, r7
   2fa48:	b013      	add	sp, #76	; 0x4c
   2fa4a:	bd90      	pop	{r4, r7, pc}
   2fa4c:	00000ff5 	.word	0x00000ff5
   2fa50:	0000fff5 	.word	0x0000fff5
   2fa54:	000001ff 	.word	0x000001ff
   2fa58:	0002d631 	.word	0x0002d631
   2fa5c:	0000022f 	.word	0x0000022f
   2fa60:	0000022e 	.word	0x0000022e
   2fa64:	ffffaa55 	.word	0xffffaa55
   2fa68:	41615252 	.word	0x41615252
   2fa6c:	00000217 	.word	0x00000217
   2fa70:	00000216 	.word	0x00000216
   2fa74:	00000215 	.word	0x00000215
   2fa78:	61417272 	.word	0x61417272
   2fa7c:	0000021f 	.word	0x0000021f
   2fa80:	0000021e 	.word	0x0000021e
   2fa84:	0000021d 	.word	0x0000021d
   2fa88:	0000021b 	.word	0x0000021b
   2fa8c:	0000021a 	.word	0x0000021a
   2fa90:	00000219 	.word	0x00000219
   2fa94:	20004178 	.word	0x20004178

0002fa98 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2fa98:	b580      	push	{r7, lr}
   2fa9a:	b082      	sub	sp, #8
   2fa9c:	af00      	add	r7, sp, #0
   2fa9e:	6078      	str	r0, [r7, #4]
   2faa0:	000a      	movs	r2, r1
   2faa2:	1cbb      	adds	r3, r7, #2
   2faa4:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2faa6:	687b      	ldr	r3, [r7, #4]
   2faa8:	2b00      	cmp	r3, #0
   2faaa:	d009      	beq.n	2fac0 <validate+0x28>
   2faac:	687b      	ldr	r3, [r7, #4]
   2faae:	781b      	ldrb	r3, [r3, #0]
   2fab0:	2b00      	cmp	r3, #0
   2fab2:	d005      	beq.n	2fac0 <validate+0x28>
   2fab4:	687b      	ldr	r3, [r7, #4]
   2fab6:	88db      	ldrh	r3, [r3, #6]
   2fab8:	1cba      	adds	r2, r7, #2
   2faba:	8812      	ldrh	r2, [r2, #0]
   2fabc:	429a      	cmp	r2, r3
   2fabe:	d001      	beq.n	2fac4 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2fac0:	2309      	movs	r3, #9
   2fac2:	e00c      	b.n	2fade <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2fac4:	687b      	ldr	r3, [r7, #4]
   2fac6:	785b      	ldrb	r3, [r3, #1]
   2fac8:	0018      	movs	r0, r3
   2faca:	4b07      	ldr	r3, [pc, #28]	; (2fae8 <validate+0x50>)
   2facc:	4798      	blx	r3
   2face:	0003      	movs	r3, r0
   2fad0:	001a      	movs	r2, r3
   2fad2:	2301      	movs	r3, #1
   2fad4:	4013      	ands	r3, r2
   2fad6:	d001      	beq.n	2fadc <validate+0x44>
		return FR_NOT_READY;
   2fad8:	2303      	movs	r3, #3
   2fada:	e000      	b.n	2fade <validate+0x46>

	return FR_OK;
   2fadc:	2300      	movs	r3, #0
}
   2fade:	0018      	movs	r0, r3
   2fae0:	46bd      	mov	sp, r7
   2fae2:	b002      	add	sp, #8
   2fae4:	bd80      	pop	{r7, pc}
   2fae6:	46c0      	nop			; (mov r8, r8)
   2fae8:	0002d5f9 	.word	0x0002d5f9

0002faec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2faec:	b580      	push	{r7, lr}
   2faee:	b084      	sub	sp, #16
   2faf0:	af00      	add	r7, sp, #0
   2faf2:	0002      	movs	r2, r0
   2faf4:	6039      	str	r1, [r7, #0]
   2faf6:	1dfb      	adds	r3, r7, #7
   2faf8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2fafa:	1dfb      	adds	r3, r7, #7
   2fafc:	781b      	ldrb	r3, [r3, #0]
   2fafe:	2b07      	cmp	r3, #7
   2fb00:	d901      	bls.n	2fb06 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2fb02:	230b      	movs	r3, #11
   2fb04:	e018      	b.n	2fb38 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2fb06:	1dfb      	adds	r3, r7, #7
   2fb08:	781a      	ldrb	r2, [r3, #0]
   2fb0a:	4b0d      	ldr	r3, [pc, #52]	; (2fb40 <f_mount+0x54>)
   2fb0c:	0092      	lsls	r2, r2, #2
   2fb0e:	58d3      	ldr	r3, [r2, r3]
   2fb10:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2fb12:	68fb      	ldr	r3, [r7, #12]
   2fb14:	2b00      	cmp	r3, #0
   2fb16:	d002      	beq.n	2fb1e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2fb18:	68fb      	ldr	r3, [r7, #12]
   2fb1a:	2200      	movs	r2, #0
   2fb1c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2fb1e:	683b      	ldr	r3, [r7, #0]
   2fb20:	2b00      	cmp	r3, #0
   2fb22:	d002      	beq.n	2fb2a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2fb24:	683b      	ldr	r3, [r7, #0]
   2fb26:	2200      	movs	r2, #0
   2fb28:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2fb2a:	1dfb      	adds	r3, r7, #7
   2fb2c:	781a      	ldrb	r2, [r3, #0]
   2fb2e:	4b04      	ldr	r3, [pc, #16]	; (2fb40 <f_mount+0x54>)
   2fb30:	0092      	lsls	r2, r2, #2
   2fb32:	6839      	ldr	r1, [r7, #0]
   2fb34:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2fb36:	2300      	movs	r3, #0
}
   2fb38:	0018      	movs	r0, r3
   2fb3a:	46bd      	mov	sp, r7
   2fb3c:	b004      	add	sp, #16
   2fb3e:	bd80      	pop	{r7, pc}
   2fb40:	20004158 	.word	0x20004158

0002fb44 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2fb44:	b590      	push	{r4, r7, lr}
   2fb46:	4ce5      	ldr	r4, [pc, #916]	; (2fedc <f_open+0x398>)
   2fb48:	44a5      	add	sp, r4
   2fb4a:	af00      	add	r7, sp, #0
   2fb4c:	60f8      	str	r0, [r7, #12]
   2fb4e:	60b9      	str	r1, [r7, #8]
   2fb50:	4be3      	ldr	r3, [pc, #908]	; (2fee0 <f_open+0x39c>)
   2fb52:	2194      	movs	r1, #148	; 0x94
   2fb54:	0089      	lsls	r1, r1, #2
   2fb56:	468c      	mov	ip, r1
   2fb58:	44bc      	add	ip, r7
   2fb5a:	4463      	add	r3, ip
   2fb5c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2fb5e:	68fb      	ldr	r3, [r7, #12]
   2fb60:	2200      	movs	r2, #0
   2fb62:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2fb64:	4bde      	ldr	r3, [pc, #888]	; (2fee0 <f_open+0x39c>)
   2fb66:	2294      	movs	r2, #148	; 0x94
   2fb68:	0092      	lsls	r2, r2, #2
   2fb6a:	4694      	mov	ip, r2
   2fb6c:	44bc      	add	ip, r7
   2fb6e:	4463      	add	r3, ip
   2fb70:	4adb      	ldr	r2, [pc, #876]	; (2fee0 <f_open+0x39c>)
   2fb72:	2194      	movs	r1, #148	; 0x94
   2fb74:	0089      	lsls	r1, r1, #2
   2fb76:	468c      	mov	ip, r1
   2fb78:	44bc      	add	ip, r7
   2fb7a:	4462      	add	r2, ip
   2fb7c:	7812      	ldrb	r2, [r2, #0]
   2fb7e:	211f      	movs	r1, #31
   2fb80:	400a      	ands	r2, r1
   2fb82:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2fb84:	4bd6      	ldr	r3, [pc, #856]	; (2fee0 <f_open+0x39c>)
   2fb86:	2294      	movs	r2, #148	; 0x94
   2fb88:	0092      	lsls	r2, r2, #2
   2fb8a:	4694      	mov	ip, r2
   2fb8c:	44bc      	add	ip, r7
   2fb8e:	4463      	add	r3, ip
   2fb90:	781b      	ldrb	r3, [r3, #0]
   2fb92:	2201      	movs	r2, #1
   2fb94:	4393      	bics	r3, r2
   2fb96:	b2da      	uxtb	r2, r3
   2fb98:	4bd2      	ldr	r3, [pc, #840]	; (2fee4 <f_open+0x3a0>)
   2fb9a:	18fc      	adds	r4, r7, r3
   2fb9c:	2387      	movs	r3, #135	; 0x87
   2fb9e:	009b      	lsls	r3, r3, #2
   2fba0:	18f9      	adds	r1, r7, r3
   2fba2:	2308      	movs	r3, #8
   2fba4:	18fb      	adds	r3, r7, r3
   2fba6:	0018      	movs	r0, r3
   2fba8:	4bcf      	ldr	r3, [pc, #828]	; (2fee8 <f_open+0x3a4>)
   2fbaa:	4798      	blx	r3
   2fbac:	0003      	movs	r3, r0
   2fbae:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2fbb0:	2387      	movs	r3, #135	; 0x87
   2fbb2:	009b      	lsls	r3, r3, #2
   2fbb4:	18fb      	adds	r3, r7, r3
   2fbb6:	2284      	movs	r2, #132	; 0x84
   2fbb8:	0092      	lsls	r2, r2, #2
   2fbba:	18ba      	adds	r2, r7, r2
   2fbbc:	619a      	str	r2, [r3, #24]
   2fbbe:	2387      	movs	r3, #135	; 0x87
   2fbc0:	009b      	lsls	r3, r3, #2
   2fbc2:	18fb      	adds	r3, r7, r3
   2fbc4:	2210      	movs	r2, #16
   2fbc6:	18ba      	adds	r2, r7, r2
   2fbc8:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2fbca:	4bc6      	ldr	r3, [pc, #792]	; (2fee4 <f_open+0x3a0>)
   2fbcc:	18fb      	adds	r3, r7, r3
   2fbce:	781b      	ldrb	r3, [r3, #0]
   2fbd0:	2b00      	cmp	r3, #0
   2fbd2:	d10b      	bne.n	2fbec <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2fbd4:	68ba      	ldr	r2, [r7, #8]
   2fbd6:	4bc3      	ldr	r3, [pc, #780]	; (2fee4 <f_open+0x3a0>)
   2fbd8:	18fc      	adds	r4, r7, r3
   2fbda:	2387      	movs	r3, #135	; 0x87
   2fbdc:	009b      	lsls	r3, r3, #2
   2fbde:	18fb      	adds	r3, r7, r3
   2fbe0:	0011      	movs	r1, r2
   2fbe2:	0018      	movs	r0, r3
   2fbe4:	4bc1      	ldr	r3, [pc, #772]	; (2feec <f_open+0x3a8>)
   2fbe6:	4798      	blx	r3
   2fbe8:	0003      	movs	r3, r0
   2fbea:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2fbec:	2387      	movs	r3, #135	; 0x87
   2fbee:	009b      	lsls	r3, r3, #2
   2fbf0:	18fb      	adds	r3, r7, r3
   2fbf2:	695b      	ldr	r3, [r3, #20]
   2fbf4:	2292      	movs	r2, #146	; 0x92
   2fbf6:	0092      	lsls	r2, r2, #2
   2fbf8:	18ba      	adds	r2, r7, r2
   2fbfa:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2fbfc:	4bb9      	ldr	r3, [pc, #740]	; (2fee4 <f_open+0x3a0>)
   2fbfe:	18fb      	adds	r3, r7, r3
   2fc00:	781b      	ldrb	r3, [r3, #0]
   2fc02:	2b00      	cmp	r3, #0
   2fc04:	d109      	bne.n	2fc1a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2fc06:	2392      	movs	r3, #146	; 0x92
   2fc08:	009b      	lsls	r3, r3, #2
   2fc0a:	18fb      	adds	r3, r7, r3
   2fc0c:	681b      	ldr	r3, [r3, #0]
   2fc0e:	2b00      	cmp	r3, #0
   2fc10:	d103      	bne.n	2fc1a <f_open+0xd6>
			res = FR_INVALID_NAME;
   2fc12:	4bb4      	ldr	r3, [pc, #720]	; (2fee4 <f_open+0x3a0>)
   2fc14:	18fb      	adds	r3, r7, r3
   2fc16:	2206      	movs	r2, #6
   2fc18:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2fc1a:	4bb1      	ldr	r3, [pc, #708]	; (2fee0 <f_open+0x39c>)
   2fc1c:	2294      	movs	r2, #148	; 0x94
   2fc1e:	0092      	lsls	r2, r2, #2
   2fc20:	4694      	mov	ip, r2
   2fc22:	44bc      	add	ip, r7
   2fc24:	4463      	add	r3, ip
   2fc26:	781b      	ldrb	r3, [r3, #0]
   2fc28:	221c      	movs	r2, #28
   2fc2a:	4013      	ands	r3, r2
   2fc2c:	d100      	bne.n	2fc30 <f_open+0xec>
   2fc2e:	e141      	b.n	2feb4 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2fc30:	4bac      	ldr	r3, [pc, #688]	; (2fee4 <f_open+0x3a0>)
   2fc32:	18fb      	adds	r3, r7, r3
   2fc34:	781b      	ldrb	r3, [r3, #0]
   2fc36:	2b00      	cmp	r3, #0
   2fc38:	d027      	beq.n	2fc8a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2fc3a:	4baa      	ldr	r3, [pc, #680]	; (2fee4 <f_open+0x3a0>)
   2fc3c:	18fb      	adds	r3, r7, r3
   2fc3e:	781b      	ldrb	r3, [r3, #0]
   2fc40:	2b04      	cmp	r3, #4
   2fc42:	d109      	bne.n	2fc58 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2fc44:	4ba7      	ldr	r3, [pc, #668]	; (2fee4 <f_open+0x3a0>)
   2fc46:	18fc      	adds	r4, r7, r3
   2fc48:	2387      	movs	r3, #135	; 0x87
   2fc4a:	009b      	lsls	r3, r3, #2
   2fc4c:	18fb      	adds	r3, r7, r3
   2fc4e:	0018      	movs	r0, r3
   2fc50:	4ba7      	ldr	r3, [pc, #668]	; (2fef0 <f_open+0x3ac>)
   2fc52:	4798      	blx	r3
   2fc54:	0003      	movs	r3, r0
   2fc56:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2fc58:	4ba1      	ldr	r3, [pc, #644]	; (2fee0 <f_open+0x39c>)
   2fc5a:	2294      	movs	r2, #148	; 0x94
   2fc5c:	0092      	lsls	r2, r2, #2
   2fc5e:	4694      	mov	ip, r2
   2fc60:	44bc      	add	ip, r7
   2fc62:	4463      	add	r3, ip
   2fc64:	4a9e      	ldr	r2, [pc, #632]	; (2fee0 <f_open+0x39c>)
   2fc66:	2194      	movs	r1, #148	; 0x94
   2fc68:	0089      	lsls	r1, r1, #2
   2fc6a:	468c      	mov	ip, r1
   2fc6c:	44bc      	add	ip, r7
   2fc6e:	4462      	add	r2, ip
   2fc70:	7812      	ldrb	r2, [r2, #0]
   2fc72:	2108      	movs	r1, #8
   2fc74:	430a      	orrs	r2, r1
   2fc76:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2fc78:	2387      	movs	r3, #135	; 0x87
   2fc7a:	009b      	lsls	r3, r3, #2
   2fc7c:	18fb      	adds	r3, r7, r3
   2fc7e:	695b      	ldr	r3, [r3, #20]
   2fc80:	2292      	movs	r2, #146	; 0x92
   2fc82:	0092      	lsls	r2, r2, #2
   2fc84:	18ba      	adds	r2, r7, r2
   2fc86:	6013      	str	r3, [r2, #0]
   2fc88:	e01c      	b.n	2fcc4 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2fc8a:	2392      	movs	r3, #146	; 0x92
   2fc8c:	009b      	lsls	r3, r3, #2
   2fc8e:	18fb      	adds	r3, r7, r3
   2fc90:	681b      	ldr	r3, [r3, #0]
   2fc92:	330b      	adds	r3, #11
   2fc94:	781b      	ldrb	r3, [r3, #0]
   2fc96:	001a      	movs	r2, r3
   2fc98:	2311      	movs	r3, #17
   2fc9a:	4013      	ands	r3, r2
   2fc9c:	d004      	beq.n	2fca8 <f_open+0x164>
				res = FR_DENIED;
   2fc9e:	4b91      	ldr	r3, [pc, #580]	; (2fee4 <f_open+0x3a0>)
   2fca0:	18fb      	adds	r3, r7, r3
   2fca2:	2207      	movs	r2, #7
   2fca4:	701a      	strb	r2, [r3, #0]
   2fca6:	e00d      	b.n	2fcc4 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2fca8:	4b8d      	ldr	r3, [pc, #564]	; (2fee0 <f_open+0x39c>)
   2fcaa:	2294      	movs	r2, #148	; 0x94
   2fcac:	0092      	lsls	r2, r2, #2
   2fcae:	4694      	mov	ip, r2
   2fcb0:	44bc      	add	ip, r7
   2fcb2:	4463      	add	r3, ip
   2fcb4:	781b      	ldrb	r3, [r3, #0]
   2fcb6:	2204      	movs	r2, #4
   2fcb8:	4013      	ands	r3, r2
   2fcba:	d003      	beq.n	2fcc4 <f_open+0x180>
					res = FR_EXIST;
   2fcbc:	4b89      	ldr	r3, [pc, #548]	; (2fee4 <f_open+0x3a0>)
   2fcbe:	18fb      	adds	r3, r7, r3
   2fcc0:	2208      	movs	r2, #8
   2fcc2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2fcc4:	4b87      	ldr	r3, [pc, #540]	; (2fee4 <f_open+0x3a0>)
   2fcc6:	18fb      	adds	r3, r7, r3
   2fcc8:	781b      	ldrb	r3, [r3, #0]
   2fcca:	2b00      	cmp	r3, #0
   2fccc:	d000      	beq.n	2fcd0 <f_open+0x18c>
   2fcce:	e12f      	b.n	2ff30 <f_open+0x3ec>
   2fcd0:	4b83      	ldr	r3, [pc, #524]	; (2fee0 <f_open+0x39c>)
   2fcd2:	2294      	movs	r2, #148	; 0x94
   2fcd4:	0092      	lsls	r2, r2, #2
   2fcd6:	4694      	mov	ip, r2
   2fcd8:	44bc      	add	ip, r7
   2fcda:	4463      	add	r3, ip
   2fcdc:	781b      	ldrb	r3, [r3, #0]
   2fcde:	2208      	movs	r2, #8
   2fce0:	4013      	ands	r3, r2
   2fce2:	d100      	bne.n	2fce6 <f_open+0x1a2>
   2fce4:	e124      	b.n	2ff30 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2fce6:	4b83      	ldr	r3, [pc, #524]	; (2fef4 <f_open+0x3b0>)
   2fce8:	4798      	blx	r3
   2fcea:	0003      	movs	r3, r0
   2fcec:	2291      	movs	r2, #145	; 0x91
   2fcee:	0092      	lsls	r2, r2, #2
   2fcf0:	18ba      	adds	r2, r7, r2
   2fcf2:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2fcf4:	2392      	movs	r3, #146	; 0x92
   2fcf6:	009b      	lsls	r3, r3, #2
   2fcf8:	18fb      	adds	r3, r7, r3
   2fcfa:	681b      	ldr	r3, [r3, #0]
   2fcfc:	330e      	adds	r3, #14
   2fcfe:	2291      	movs	r2, #145	; 0x91
   2fd00:	0092      	lsls	r2, r2, #2
   2fd02:	18ba      	adds	r2, r7, r2
   2fd04:	6812      	ldr	r2, [r2, #0]
   2fd06:	b2d2      	uxtb	r2, r2
   2fd08:	701a      	strb	r2, [r3, #0]
   2fd0a:	2392      	movs	r3, #146	; 0x92
   2fd0c:	009b      	lsls	r3, r3, #2
   2fd0e:	18fb      	adds	r3, r7, r3
   2fd10:	681b      	ldr	r3, [r3, #0]
   2fd12:	330f      	adds	r3, #15
   2fd14:	2291      	movs	r2, #145	; 0x91
   2fd16:	0092      	lsls	r2, r2, #2
   2fd18:	18ba      	adds	r2, r7, r2
   2fd1a:	6812      	ldr	r2, [r2, #0]
   2fd1c:	b292      	uxth	r2, r2
   2fd1e:	0a12      	lsrs	r2, r2, #8
   2fd20:	b292      	uxth	r2, r2
   2fd22:	b2d2      	uxtb	r2, r2
   2fd24:	701a      	strb	r2, [r3, #0]
   2fd26:	2392      	movs	r3, #146	; 0x92
   2fd28:	009b      	lsls	r3, r3, #2
   2fd2a:	18fb      	adds	r3, r7, r3
   2fd2c:	681b      	ldr	r3, [r3, #0]
   2fd2e:	3310      	adds	r3, #16
   2fd30:	2291      	movs	r2, #145	; 0x91
   2fd32:	0092      	lsls	r2, r2, #2
   2fd34:	18ba      	adds	r2, r7, r2
   2fd36:	6812      	ldr	r2, [r2, #0]
   2fd38:	0c12      	lsrs	r2, r2, #16
   2fd3a:	b2d2      	uxtb	r2, r2
   2fd3c:	701a      	strb	r2, [r3, #0]
   2fd3e:	2392      	movs	r3, #146	; 0x92
   2fd40:	009b      	lsls	r3, r3, #2
   2fd42:	18fb      	adds	r3, r7, r3
   2fd44:	681b      	ldr	r3, [r3, #0]
   2fd46:	3311      	adds	r3, #17
   2fd48:	2291      	movs	r2, #145	; 0x91
   2fd4a:	0092      	lsls	r2, r2, #2
   2fd4c:	18ba      	adds	r2, r7, r2
   2fd4e:	6812      	ldr	r2, [r2, #0]
   2fd50:	0e12      	lsrs	r2, r2, #24
   2fd52:	b2d2      	uxtb	r2, r2
   2fd54:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2fd56:	2392      	movs	r3, #146	; 0x92
   2fd58:	009b      	lsls	r3, r3, #2
   2fd5a:	18fb      	adds	r3, r7, r3
   2fd5c:	681b      	ldr	r3, [r3, #0]
   2fd5e:	330b      	adds	r3, #11
   2fd60:	2200      	movs	r2, #0
   2fd62:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2fd64:	2392      	movs	r3, #146	; 0x92
   2fd66:	009b      	lsls	r3, r3, #2
   2fd68:	18fb      	adds	r3, r7, r3
   2fd6a:	681b      	ldr	r3, [r3, #0]
   2fd6c:	331c      	adds	r3, #28
   2fd6e:	2200      	movs	r2, #0
   2fd70:	701a      	strb	r2, [r3, #0]
   2fd72:	2392      	movs	r3, #146	; 0x92
   2fd74:	009b      	lsls	r3, r3, #2
   2fd76:	18fb      	adds	r3, r7, r3
   2fd78:	681b      	ldr	r3, [r3, #0]
   2fd7a:	331d      	adds	r3, #29
   2fd7c:	2200      	movs	r2, #0
   2fd7e:	701a      	strb	r2, [r3, #0]
   2fd80:	2392      	movs	r3, #146	; 0x92
   2fd82:	009b      	lsls	r3, r3, #2
   2fd84:	18fb      	adds	r3, r7, r3
   2fd86:	681b      	ldr	r3, [r3, #0]
   2fd88:	331e      	adds	r3, #30
   2fd8a:	2200      	movs	r2, #0
   2fd8c:	701a      	strb	r2, [r3, #0]
   2fd8e:	2392      	movs	r3, #146	; 0x92
   2fd90:	009b      	lsls	r3, r3, #2
   2fd92:	18fb      	adds	r3, r7, r3
   2fd94:	681b      	ldr	r3, [r3, #0]
   2fd96:	331f      	adds	r3, #31
   2fd98:	2200      	movs	r2, #0
   2fd9a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2fd9c:	2392      	movs	r3, #146	; 0x92
   2fd9e:	009b      	lsls	r3, r3, #2
   2fda0:	18fb      	adds	r3, r7, r3
   2fda2:	681b      	ldr	r3, [r3, #0]
   2fda4:	3315      	adds	r3, #21
   2fda6:	781b      	ldrb	r3, [r3, #0]
   2fda8:	021b      	lsls	r3, r3, #8
   2fdaa:	b21a      	sxth	r2, r3
   2fdac:	2392      	movs	r3, #146	; 0x92
   2fdae:	009b      	lsls	r3, r3, #2
   2fdb0:	18fb      	adds	r3, r7, r3
   2fdb2:	681b      	ldr	r3, [r3, #0]
   2fdb4:	3314      	adds	r3, #20
   2fdb6:	781b      	ldrb	r3, [r3, #0]
   2fdb8:	b21b      	sxth	r3, r3
   2fdba:	4313      	orrs	r3, r2
   2fdbc:	b21b      	sxth	r3, r3
   2fdbe:	b29b      	uxth	r3, r3
   2fdc0:	041b      	lsls	r3, r3, #16
   2fdc2:	2292      	movs	r2, #146	; 0x92
   2fdc4:	0092      	lsls	r2, r2, #2
   2fdc6:	18ba      	adds	r2, r7, r2
   2fdc8:	6812      	ldr	r2, [r2, #0]
   2fdca:	321b      	adds	r2, #27
   2fdcc:	7812      	ldrb	r2, [r2, #0]
   2fdce:	0212      	lsls	r2, r2, #8
   2fdd0:	b211      	sxth	r1, r2
   2fdd2:	2292      	movs	r2, #146	; 0x92
   2fdd4:	0092      	lsls	r2, r2, #2
   2fdd6:	18ba      	adds	r2, r7, r2
   2fdd8:	6812      	ldr	r2, [r2, #0]
   2fdda:	321a      	adds	r2, #26
   2fddc:	7812      	ldrb	r2, [r2, #0]
   2fdde:	b212      	sxth	r2, r2
   2fde0:	430a      	orrs	r2, r1
   2fde2:	b212      	sxth	r2, r2
   2fde4:	b292      	uxth	r2, r2
   2fde6:	4313      	orrs	r3, r2
   2fde8:	2290      	movs	r2, #144	; 0x90
   2fdea:	0092      	lsls	r2, r2, #2
   2fdec:	18ba      	adds	r2, r7, r2
   2fdee:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2fdf0:	2392      	movs	r3, #146	; 0x92
   2fdf2:	009b      	lsls	r3, r3, #2
   2fdf4:	18fb      	adds	r3, r7, r3
   2fdf6:	681b      	ldr	r3, [r3, #0]
   2fdf8:	331a      	adds	r3, #26
   2fdfa:	2200      	movs	r2, #0
   2fdfc:	701a      	strb	r2, [r3, #0]
   2fdfe:	2392      	movs	r3, #146	; 0x92
   2fe00:	009b      	lsls	r3, r3, #2
   2fe02:	18fb      	adds	r3, r7, r3
   2fe04:	681b      	ldr	r3, [r3, #0]
   2fe06:	331b      	adds	r3, #27
   2fe08:	2200      	movs	r2, #0
   2fe0a:	701a      	strb	r2, [r3, #0]
   2fe0c:	2392      	movs	r3, #146	; 0x92
   2fe0e:	009b      	lsls	r3, r3, #2
   2fe10:	18fb      	adds	r3, r7, r3
   2fe12:	681b      	ldr	r3, [r3, #0]
   2fe14:	3314      	adds	r3, #20
   2fe16:	2200      	movs	r2, #0
   2fe18:	701a      	strb	r2, [r3, #0]
   2fe1a:	2392      	movs	r3, #146	; 0x92
   2fe1c:	009b      	lsls	r3, r3, #2
   2fe1e:	18fb      	adds	r3, r7, r3
   2fe20:	681b      	ldr	r3, [r3, #0]
   2fe22:	3315      	adds	r3, #21
   2fe24:	2200      	movs	r2, #0
   2fe26:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2fe28:	2387      	movs	r3, #135	; 0x87
   2fe2a:	009b      	lsls	r3, r3, #2
   2fe2c:	18fb      	adds	r3, r7, r3
   2fe2e:	681b      	ldr	r3, [r3, #0]
   2fe30:	2201      	movs	r2, #1
   2fe32:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2fe34:	2390      	movs	r3, #144	; 0x90
   2fe36:	009b      	lsls	r3, r3, #2
   2fe38:	18fb      	adds	r3, r7, r3
   2fe3a:	681b      	ldr	r3, [r3, #0]
   2fe3c:	2b00      	cmp	r3, #0
   2fe3e:	d100      	bne.n	2fe42 <f_open+0x2fe>
   2fe40:	e076      	b.n	2ff30 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2fe42:	2387      	movs	r3, #135	; 0x87
   2fe44:	009b      	lsls	r3, r3, #2
   2fe46:	18fb      	adds	r3, r7, r3
   2fe48:	681b      	ldr	r3, [r3, #0]
   2fe4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2fe4c:	2291      	movs	r2, #145	; 0x91
   2fe4e:	0092      	lsls	r2, r2, #2
   2fe50:	18ba      	adds	r2, r7, r2
   2fe52:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2fe54:	2387      	movs	r3, #135	; 0x87
   2fe56:	009b      	lsls	r3, r3, #2
   2fe58:	18fb      	adds	r3, r7, r3
   2fe5a:	681b      	ldr	r3, [r3, #0]
   2fe5c:	4a21      	ldr	r2, [pc, #132]	; (2fee4 <f_open+0x3a0>)
   2fe5e:	18bc      	adds	r4, r7, r2
   2fe60:	2290      	movs	r2, #144	; 0x90
   2fe62:	0092      	lsls	r2, r2, #2
   2fe64:	18ba      	adds	r2, r7, r2
   2fe66:	6812      	ldr	r2, [r2, #0]
   2fe68:	0011      	movs	r1, r2
   2fe6a:	0018      	movs	r0, r3
   2fe6c:	4b22      	ldr	r3, [pc, #136]	; (2fef8 <f_open+0x3b4>)
   2fe6e:	4798      	blx	r3
   2fe70:	0003      	movs	r3, r0
   2fe72:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2fe74:	4b1b      	ldr	r3, [pc, #108]	; (2fee4 <f_open+0x3a0>)
   2fe76:	18fb      	adds	r3, r7, r3
   2fe78:	781b      	ldrb	r3, [r3, #0]
   2fe7a:	2b00      	cmp	r3, #0
   2fe7c:	d158      	bne.n	2ff30 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2fe7e:	2387      	movs	r3, #135	; 0x87
   2fe80:	009b      	lsls	r3, r3, #2
   2fe82:	18fb      	adds	r3, r7, r3
   2fe84:	681b      	ldr	r3, [r3, #0]
   2fe86:	2290      	movs	r2, #144	; 0x90
   2fe88:	0092      	lsls	r2, r2, #2
   2fe8a:	18ba      	adds	r2, r7, r2
   2fe8c:	6812      	ldr	r2, [r2, #0]
   2fe8e:	3a01      	subs	r2, #1
   2fe90:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2fe92:	2387      	movs	r3, #135	; 0x87
   2fe94:	009b      	lsls	r3, r3, #2
   2fe96:	18fb      	adds	r3, r7, r3
   2fe98:	681b      	ldr	r3, [r3, #0]
   2fe9a:	4a12      	ldr	r2, [pc, #72]	; (2fee4 <f_open+0x3a0>)
   2fe9c:	18bc      	adds	r4, r7, r2
   2fe9e:	2291      	movs	r2, #145	; 0x91
   2fea0:	0092      	lsls	r2, r2, #2
   2fea2:	18ba      	adds	r2, r7, r2
   2fea4:	6812      	ldr	r2, [r2, #0]
   2fea6:	0011      	movs	r1, r2
   2fea8:	0018      	movs	r0, r3
   2feaa:	4b14      	ldr	r3, [pc, #80]	; (2fefc <f_open+0x3b8>)
   2feac:	4798      	blx	r3
   2feae:	0003      	movs	r3, r0
   2feb0:	7023      	strb	r3, [r4, #0]
   2feb2:	e03d      	b.n	2ff30 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2feb4:	4b0b      	ldr	r3, [pc, #44]	; (2fee4 <f_open+0x3a0>)
   2feb6:	18fb      	adds	r3, r7, r3
   2feb8:	781b      	ldrb	r3, [r3, #0]
   2feba:	2b00      	cmp	r3, #0
   2febc:	d138      	bne.n	2ff30 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2febe:	2392      	movs	r3, #146	; 0x92
   2fec0:	009b      	lsls	r3, r3, #2
   2fec2:	18fb      	adds	r3, r7, r3
   2fec4:	681b      	ldr	r3, [r3, #0]
   2fec6:	330b      	adds	r3, #11
   2fec8:	781b      	ldrb	r3, [r3, #0]
   2feca:	001a      	movs	r2, r3
   2fecc:	2310      	movs	r3, #16
   2fece:	4013      	ands	r3, r2
   2fed0:	d016      	beq.n	2ff00 <f_open+0x3bc>
				res = FR_NO_FILE;
   2fed2:	4b04      	ldr	r3, [pc, #16]	; (2fee4 <f_open+0x3a0>)
   2fed4:	18fb      	adds	r3, r7, r3
   2fed6:	2204      	movs	r2, #4
   2fed8:	701a      	strb	r2, [r3, #0]
   2feda:	e029      	b.n	2ff30 <f_open+0x3ec>
   2fedc:	fffffdac 	.word	0xfffffdac
   2fee0:	fffffdb7 	.word	0xfffffdb7
   2fee4:	0000024f 	.word	0x0000024f
   2fee8:	0002f49d 	.word	0x0002f49d
   2feec:	0002f291 	.word	0x0002f291
   2fef0:	0002eae1 	.word	0x0002eae1
   2fef4:	0002d8d9 	.word	0x0002d8d9
   2fef8:	0002e05d 	.word	0x0002e05d
   2fefc:	0002da1d 	.word	0x0002da1d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2ff00:	4b5a      	ldr	r3, [pc, #360]	; (3006c <f_open+0x528>)
   2ff02:	2294      	movs	r2, #148	; 0x94
   2ff04:	0092      	lsls	r2, r2, #2
   2ff06:	4694      	mov	ip, r2
   2ff08:	44bc      	add	ip, r7
   2ff0a:	4463      	add	r3, ip
   2ff0c:	781b      	ldrb	r3, [r3, #0]
   2ff0e:	2202      	movs	r2, #2
   2ff10:	4013      	ands	r3, r2
   2ff12:	d00d      	beq.n	2ff30 <f_open+0x3ec>
   2ff14:	2392      	movs	r3, #146	; 0x92
   2ff16:	009b      	lsls	r3, r3, #2
   2ff18:	18fb      	adds	r3, r7, r3
   2ff1a:	681b      	ldr	r3, [r3, #0]
   2ff1c:	330b      	adds	r3, #11
   2ff1e:	781b      	ldrb	r3, [r3, #0]
   2ff20:	001a      	movs	r2, r3
   2ff22:	2301      	movs	r3, #1
   2ff24:	4013      	ands	r3, r2
   2ff26:	d003      	beq.n	2ff30 <f_open+0x3ec>
					res = FR_DENIED;
   2ff28:	4b51      	ldr	r3, [pc, #324]	; (30070 <f_open+0x52c>)
   2ff2a:	18fb      	adds	r3, r7, r3
   2ff2c:	2207      	movs	r2, #7
   2ff2e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2ff30:	4b4f      	ldr	r3, [pc, #316]	; (30070 <f_open+0x52c>)
   2ff32:	18fb      	adds	r3, r7, r3
   2ff34:	781b      	ldrb	r3, [r3, #0]
   2ff36:	2b00      	cmp	r3, #0
   2ff38:	d126      	bne.n	2ff88 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2ff3a:	4b4c      	ldr	r3, [pc, #304]	; (3006c <f_open+0x528>)
   2ff3c:	2294      	movs	r2, #148	; 0x94
   2ff3e:	0092      	lsls	r2, r2, #2
   2ff40:	4694      	mov	ip, r2
   2ff42:	44bc      	add	ip, r7
   2ff44:	4463      	add	r3, ip
   2ff46:	781b      	ldrb	r3, [r3, #0]
   2ff48:	2208      	movs	r2, #8
   2ff4a:	4013      	ands	r3, r2
   2ff4c:	d00f      	beq.n	2ff6e <f_open+0x42a>
			mode |= FA__WRITTEN;
   2ff4e:	4b47      	ldr	r3, [pc, #284]	; (3006c <f_open+0x528>)
   2ff50:	2294      	movs	r2, #148	; 0x94
   2ff52:	0092      	lsls	r2, r2, #2
   2ff54:	4694      	mov	ip, r2
   2ff56:	44bc      	add	ip, r7
   2ff58:	4463      	add	r3, ip
   2ff5a:	4a44      	ldr	r2, [pc, #272]	; (3006c <f_open+0x528>)
   2ff5c:	2194      	movs	r1, #148	; 0x94
   2ff5e:	0089      	lsls	r1, r1, #2
   2ff60:	468c      	mov	ip, r1
   2ff62:	44bc      	add	ip, r7
   2ff64:	4462      	add	r2, ip
   2ff66:	7812      	ldrb	r2, [r2, #0]
   2ff68:	2120      	movs	r1, #32
   2ff6a:	430a      	orrs	r2, r1
   2ff6c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2ff6e:	2387      	movs	r3, #135	; 0x87
   2ff70:	009b      	lsls	r3, r3, #2
   2ff72:	18fb      	adds	r3, r7, r3
   2ff74:	681b      	ldr	r3, [r3, #0]
   2ff76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ff78:	68fb      	ldr	r3, [r7, #12]
   2ff7a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2ff7c:	68fb      	ldr	r3, [r7, #12]
   2ff7e:	2292      	movs	r2, #146	; 0x92
   2ff80:	0092      	lsls	r2, r2, #2
   2ff82:	18ba      	adds	r2, r7, r2
   2ff84:	6812      	ldr	r2, [r2, #0]
   2ff86:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2ff88:	4b39      	ldr	r3, [pc, #228]	; (30070 <f_open+0x52c>)
   2ff8a:	18fb      	adds	r3, r7, r3
   2ff8c:	781b      	ldrb	r3, [r3, #0]
   2ff8e:	2b00      	cmp	r3, #0
   2ff90:	d163      	bne.n	3005a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2ff92:	68fb      	ldr	r3, [r7, #12]
   2ff94:	4a35      	ldr	r2, [pc, #212]	; (3006c <f_open+0x528>)
   2ff96:	2194      	movs	r1, #148	; 0x94
   2ff98:	0089      	lsls	r1, r1, #2
   2ff9a:	468c      	mov	ip, r1
   2ff9c:	44bc      	add	ip, r7
   2ff9e:	4462      	add	r2, ip
   2ffa0:	7812      	ldrb	r2, [r2, #0]
   2ffa2:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2ffa4:	2392      	movs	r3, #146	; 0x92
   2ffa6:	009b      	lsls	r3, r3, #2
   2ffa8:	18fb      	adds	r3, r7, r3
   2ffaa:	681b      	ldr	r3, [r3, #0]
   2ffac:	3315      	adds	r3, #21
   2ffae:	781b      	ldrb	r3, [r3, #0]
   2ffb0:	021b      	lsls	r3, r3, #8
   2ffb2:	b21a      	sxth	r2, r3
   2ffb4:	2392      	movs	r3, #146	; 0x92
   2ffb6:	009b      	lsls	r3, r3, #2
   2ffb8:	18fb      	adds	r3, r7, r3
   2ffba:	681b      	ldr	r3, [r3, #0]
   2ffbc:	3314      	adds	r3, #20
   2ffbe:	781b      	ldrb	r3, [r3, #0]
   2ffc0:	b21b      	sxth	r3, r3
   2ffc2:	4313      	orrs	r3, r2
   2ffc4:	b21b      	sxth	r3, r3
   2ffc6:	b29b      	uxth	r3, r3
   2ffc8:	041b      	lsls	r3, r3, #16
   2ffca:	2292      	movs	r2, #146	; 0x92
   2ffcc:	0092      	lsls	r2, r2, #2
   2ffce:	18ba      	adds	r2, r7, r2
   2ffd0:	6812      	ldr	r2, [r2, #0]
   2ffd2:	321b      	adds	r2, #27
   2ffd4:	7812      	ldrb	r2, [r2, #0]
   2ffd6:	0212      	lsls	r2, r2, #8
   2ffd8:	b211      	sxth	r1, r2
   2ffda:	2292      	movs	r2, #146	; 0x92
   2ffdc:	0092      	lsls	r2, r2, #2
   2ffde:	18ba      	adds	r2, r7, r2
   2ffe0:	6812      	ldr	r2, [r2, #0]
   2ffe2:	321a      	adds	r2, #26
   2ffe4:	7812      	ldrb	r2, [r2, #0]
   2ffe6:	b212      	sxth	r2, r2
   2ffe8:	430a      	orrs	r2, r1
   2ffea:	b212      	sxth	r2, r2
   2ffec:	b292      	uxth	r2, r2
   2ffee:	431a      	orrs	r2, r3
   2fff0:	68fb      	ldr	r3, [r7, #12]
   2fff2:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2fff4:	2392      	movs	r3, #146	; 0x92
   2fff6:	009b      	lsls	r3, r3, #2
   2fff8:	18fb      	adds	r3, r7, r3
   2fffa:	681b      	ldr	r3, [r3, #0]
   2fffc:	331f      	adds	r3, #31
   2fffe:	781b      	ldrb	r3, [r3, #0]
   30000:	061a      	lsls	r2, r3, #24
   30002:	2392      	movs	r3, #146	; 0x92
   30004:	009b      	lsls	r3, r3, #2
   30006:	18fb      	adds	r3, r7, r3
   30008:	681b      	ldr	r3, [r3, #0]
   3000a:	331e      	adds	r3, #30
   3000c:	781b      	ldrb	r3, [r3, #0]
   3000e:	041b      	lsls	r3, r3, #16
   30010:	4313      	orrs	r3, r2
   30012:	2292      	movs	r2, #146	; 0x92
   30014:	0092      	lsls	r2, r2, #2
   30016:	18ba      	adds	r2, r7, r2
   30018:	6812      	ldr	r2, [r2, #0]
   3001a:	321d      	adds	r2, #29
   3001c:	7812      	ldrb	r2, [r2, #0]
   3001e:	0212      	lsls	r2, r2, #8
   30020:	4313      	orrs	r3, r2
   30022:	2292      	movs	r2, #146	; 0x92
   30024:	0092      	lsls	r2, r2, #2
   30026:	18ba      	adds	r2, r7, r2
   30028:	6812      	ldr	r2, [r2, #0]
   3002a:	321c      	adds	r2, #28
   3002c:	7812      	ldrb	r2, [r2, #0]
   3002e:	431a      	orrs	r2, r3
   30030:	68fb      	ldr	r3, [r7, #12]
   30032:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   30034:	68fb      	ldr	r3, [r7, #12]
   30036:	2200      	movs	r2, #0
   30038:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   3003a:	68fb      	ldr	r3, [r7, #12]
   3003c:	2200      	movs	r2, #0
   3003e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   30040:	2387      	movs	r3, #135	; 0x87
   30042:	009b      	lsls	r3, r3, #2
   30044:	18fb      	adds	r3, r7, r3
   30046:	681a      	ldr	r2, [r3, #0]
   30048:	68fb      	ldr	r3, [r7, #12]
   3004a:	601a      	str	r2, [r3, #0]
   3004c:	2387      	movs	r3, #135	; 0x87
   3004e:	009b      	lsls	r3, r3, #2
   30050:	18fb      	adds	r3, r7, r3
   30052:	681b      	ldr	r3, [r3, #0]
   30054:	88da      	ldrh	r2, [r3, #6]
   30056:	68fb      	ldr	r3, [r7, #12]
   30058:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   3005a:	4b05      	ldr	r3, [pc, #20]	; (30070 <f_open+0x52c>)
   3005c:	18fb      	adds	r3, r7, r3
   3005e:	781b      	ldrb	r3, [r3, #0]
}
   30060:	0018      	movs	r0, r3
   30062:	46bd      	mov	sp, r7
   30064:	2395      	movs	r3, #149	; 0x95
   30066:	009b      	lsls	r3, r3, #2
   30068:	449d      	add	sp, r3
   3006a:	bd90      	pop	{r4, r7, pc}
   3006c:	fffffdb7 	.word	0xfffffdb7
   30070:	0000024f 	.word	0x0000024f

00030074 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   30074:	b590      	push	{r4, r7, lr}
   30076:	b08b      	sub	sp, #44	; 0x2c
   30078:	af00      	add	r7, sp, #0
   3007a:	60f8      	str	r0, [r7, #12]
   3007c:	60b9      	str	r1, [r7, #8]
   3007e:	607a      	str	r2, [r7, #4]
   30080:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   30082:	68bb      	ldr	r3, [r7, #8]
   30084:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   30086:	683b      	ldr	r3, [r7, #0]
   30088:	2200      	movs	r2, #0
   3008a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   3008c:	68fb      	ldr	r3, [r7, #12]
   3008e:	681a      	ldr	r2, [r3, #0]
   30090:	68fb      	ldr	r3, [r7, #12]
   30092:	889b      	ldrh	r3, [r3, #4]
   30094:	2117      	movs	r1, #23
   30096:	187c      	adds	r4, r7, r1
   30098:	0019      	movs	r1, r3
   3009a:	0010      	movs	r0, r2
   3009c:	4bc3      	ldr	r3, [pc, #780]	; (303ac <f_write+0x338>)
   3009e:	4798      	blx	r3
   300a0:	0003      	movs	r3, r0
   300a2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   300a4:	2317      	movs	r3, #23
   300a6:	18fb      	adds	r3, r7, r3
   300a8:	781b      	ldrb	r3, [r3, #0]
   300aa:	2b00      	cmp	r3, #0
   300ac:	d003      	beq.n	300b6 <f_write+0x42>
   300ae:	2317      	movs	r3, #23
   300b0:	18fb      	adds	r3, r7, r3
   300b2:	781b      	ldrb	r3, [r3, #0]
   300b4:	e176      	b.n	303a4 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   300b6:	68fb      	ldr	r3, [r7, #12]
   300b8:	799b      	ldrb	r3, [r3, #6]
   300ba:	b25b      	sxtb	r3, r3
   300bc:	2b00      	cmp	r3, #0
   300be:	da01      	bge.n	300c4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   300c0:	2302      	movs	r3, #2
   300c2:	e16f      	b.n	303a4 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   300c4:	68fb      	ldr	r3, [r7, #12]
   300c6:	799b      	ldrb	r3, [r3, #6]
   300c8:	001a      	movs	r2, r3
   300ca:	2302      	movs	r3, #2
   300cc:	4013      	ands	r3, r2
   300ce:	d101      	bne.n	300d4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   300d0:	2307      	movs	r3, #7
   300d2:	e167      	b.n	303a4 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   300d4:	68fb      	ldr	r3, [r7, #12]
   300d6:	68da      	ldr	r2, [r3, #12]
   300d8:	687b      	ldr	r3, [r7, #4]
   300da:	18d2      	adds	r2, r2, r3
   300dc:	68fb      	ldr	r3, [r7, #12]
   300de:	68db      	ldr	r3, [r3, #12]
   300e0:	429a      	cmp	r2, r3
   300e2:	d300      	bcc.n	300e6 <f_write+0x72>
   300e4:	e146      	b.n	30374 <f_write+0x300>
   300e6:	2300      	movs	r3, #0
   300e8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   300ea:	e143      	b.n	30374 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   300ec:	68fb      	ldr	r3, [r7, #12]
   300ee:	689b      	ldr	r3, [r3, #8]
   300f0:	05db      	lsls	r3, r3, #23
   300f2:	0ddb      	lsrs	r3, r3, #23
   300f4:	d000      	beq.n	300f8 <f_write+0x84>
   300f6:	e0f6      	b.n	302e6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   300f8:	68fb      	ldr	r3, [r7, #12]
   300fa:	689b      	ldr	r3, [r3, #8]
   300fc:	0a5b      	lsrs	r3, r3, #9
   300fe:	b2da      	uxtb	r2, r3
   30100:	68fb      	ldr	r3, [r7, #12]
   30102:	681b      	ldr	r3, [r3, #0]
   30104:	789b      	ldrb	r3, [r3, #2]
   30106:	3b01      	subs	r3, #1
   30108:	b2d9      	uxtb	r1, r3
   3010a:	2316      	movs	r3, #22
   3010c:	18fb      	adds	r3, r7, r3
   3010e:	400a      	ands	r2, r1
   30110:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   30112:	2316      	movs	r3, #22
   30114:	18fb      	adds	r3, r7, r3
   30116:	781b      	ldrb	r3, [r3, #0]
   30118:	2b00      	cmp	r3, #0
   3011a:	d140      	bne.n	3019e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   3011c:	68fb      	ldr	r3, [r7, #12]
   3011e:	689b      	ldr	r3, [r3, #8]
   30120:	2b00      	cmp	r3, #0
   30122:	d111      	bne.n	30148 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   30124:	68fb      	ldr	r3, [r7, #12]
   30126:	691b      	ldr	r3, [r3, #16]
   30128:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   3012a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3012c:	2b00      	cmp	r3, #0
   3012e:	d115      	bne.n	3015c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   30130:	68fb      	ldr	r3, [r7, #12]
   30132:	681b      	ldr	r3, [r3, #0]
   30134:	2100      	movs	r1, #0
   30136:	0018      	movs	r0, r3
   30138:	4b9d      	ldr	r3, [pc, #628]	; (303b0 <f_write+0x33c>)
   3013a:	4798      	blx	r3
   3013c:	0003      	movs	r3, r0
   3013e:	627b      	str	r3, [r7, #36]	; 0x24
   30140:	68fb      	ldr	r3, [r7, #12]
   30142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30144:	611a      	str	r2, [r3, #16]
   30146:	e009      	b.n	3015c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   30148:	68fb      	ldr	r3, [r7, #12]
   3014a:	681a      	ldr	r2, [r3, #0]
   3014c:	68fb      	ldr	r3, [r7, #12]
   3014e:	695b      	ldr	r3, [r3, #20]
   30150:	0019      	movs	r1, r3
   30152:	0010      	movs	r0, r2
   30154:	4b96      	ldr	r3, [pc, #600]	; (303b0 <f_write+0x33c>)
   30156:	4798      	blx	r3
   30158:	0003      	movs	r3, r0
   3015a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   3015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3015e:	2b00      	cmp	r3, #0
   30160:	d100      	bne.n	30164 <f_write+0xf0>
   30162:	e10c      	b.n	3037e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   30164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30166:	2b01      	cmp	r3, #1
   30168:	d109      	bne.n	3017e <f_write+0x10a>
   3016a:	68fb      	ldr	r3, [r7, #12]
   3016c:	799b      	ldrb	r3, [r3, #6]
   3016e:	2280      	movs	r2, #128	; 0x80
   30170:	4252      	negs	r2, r2
   30172:	4313      	orrs	r3, r2
   30174:	b2da      	uxtb	r2, r3
   30176:	68fb      	ldr	r3, [r7, #12]
   30178:	719a      	strb	r2, [r3, #6]
   3017a:	2302      	movs	r3, #2
   3017c:	e112      	b.n	303a4 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   3017e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30180:	3301      	adds	r3, #1
   30182:	d109      	bne.n	30198 <f_write+0x124>
   30184:	68fb      	ldr	r3, [r7, #12]
   30186:	799b      	ldrb	r3, [r3, #6]
   30188:	2280      	movs	r2, #128	; 0x80
   3018a:	4252      	negs	r2, r2
   3018c:	4313      	orrs	r3, r2
   3018e:	b2da      	uxtb	r2, r3
   30190:	68fb      	ldr	r3, [r7, #12]
   30192:	719a      	strb	r2, [r3, #6]
   30194:	2301      	movs	r3, #1
   30196:	e105      	b.n	303a4 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   30198:	68fb      	ldr	r3, [r7, #12]
   3019a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3019c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   3019e:	68fb      	ldr	r3, [r7, #12]
   301a0:	681b      	ldr	r3, [r3, #0]
   301a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   301a4:	68fb      	ldr	r3, [r7, #12]
   301a6:	699b      	ldr	r3, [r3, #24]
   301a8:	429a      	cmp	r2, r3
   301aa:	d111      	bne.n	301d0 <f_write+0x15c>
   301ac:	68fb      	ldr	r3, [r7, #12]
   301ae:	681b      	ldr	r3, [r3, #0]
   301b0:	2100      	movs	r1, #0
   301b2:	0018      	movs	r0, r3
   301b4:	4b7f      	ldr	r3, [pc, #508]	; (303b4 <f_write+0x340>)
   301b6:	4798      	blx	r3
   301b8:	1e03      	subs	r3, r0, #0
   301ba:	d009      	beq.n	301d0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   301bc:	68fb      	ldr	r3, [r7, #12]
   301be:	799b      	ldrb	r3, [r3, #6]
   301c0:	2280      	movs	r2, #128	; 0x80
   301c2:	4252      	negs	r2, r2
   301c4:	4313      	orrs	r3, r2
   301c6:	b2da      	uxtb	r2, r3
   301c8:	68fb      	ldr	r3, [r7, #12]
   301ca:	719a      	strb	r2, [r3, #6]
   301cc:	2301      	movs	r3, #1
   301ce:	e0e9      	b.n	303a4 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   301d0:	68fb      	ldr	r3, [r7, #12]
   301d2:	681a      	ldr	r2, [r3, #0]
   301d4:	68fb      	ldr	r3, [r7, #12]
   301d6:	695b      	ldr	r3, [r3, #20]
   301d8:	0019      	movs	r1, r3
   301da:	0010      	movs	r0, r2
   301dc:	4b76      	ldr	r3, [pc, #472]	; (303b8 <f_write+0x344>)
   301de:	4798      	blx	r3
   301e0:	0003      	movs	r3, r0
   301e2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   301e4:	693b      	ldr	r3, [r7, #16]
   301e6:	2b00      	cmp	r3, #0
   301e8:	d109      	bne.n	301fe <f_write+0x18a>
   301ea:	68fb      	ldr	r3, [r7, #12]
   301ec:	799b      	ldrb	r3, [r3, #6]
   301ee:	2280      	movs	r2, #128	; 0x80
   301f0:	4252      	negs	r2, r2
   301f2:	4313      	orrs	r3, r2
   301f4:	b2da      	uxtb	r2, r3
   301f6:	68fb      	ldr	r3, [r7, #12]
   301f8:	719a      	strb	r2, [r3, #6]
   301fa:	2302      	movs	r3, #2
   301fc:	e0d2      	b.n	303a4 <f_write+0x330>
			sect += csect;
   301fe:	2316      	movs	r3, #22
   30200:	18fb      	adds	r3, r7, r3
   30202:	781b      	ldrb	r3, [r3, #0]
   30204:	693a      	ldr	r2, [r7, #16]
   30206:	18d3      	adds	r3, r2, r3
   30208:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   3020a:	687b      	ldr	r3, [r7, #4]
   3020c:	0a5b      	lsrs	r3, r3, #9
   3020e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   30210:	69fb      	ldr	r3, [r7, #28]
   30212:	2b00      	cmp	r3, #0
   30214:	d048      	beq.n	302a8 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   30216:	2316      	movs	r3, #22
   30218:	18fb      	adds	r3, r7, r3
   3021a:	781a      	ldrb	r2, [r3, #0]
   3021c:	69fb      	ldr	r3, [r7, #28]
   3021e:	18d2      	adds	r2, r2, r3
   30220:	68fb      	ldr	r3, [r7, #12]
   30222:	681b      	ldr	r3, [r3, #0]
   30224:	789b      	ldrb	r3, [r3, #2]
   30226:	429a      	cmp	r2, r3
   30228:	d908      	bls.n	3023c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   3022a:	68fb      	ldr	r3, [r7, #12]
   3022c:	681b      	ldr	r3, [r3, #0]
   3022e:	789b      	ldrb	r3, [r3, #2]
   30230:	001a      	movs	r2, r3
   30232:	2316      	movs	r3, #22
   30234:	18fb      	adds	r3, r7, r3
   30236:	781b      	ldrb	r3, [r3, #0]
   30238:	1ad3      	subs	r3, r2, r3
   3023a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   3023c:	68fb      	ldr	r3, [r7, #12]
   3023e:	681b      	ldr	r3, [r3, #0]
   30240:	7858      	ldrb	r0, [r3, #1]
   30242:	69fb      	ldr	r3, [r7, #28]
   30244:	b2db      	uxtb	r3, r3
   30246:	693a      	ldr	r2, [r7, #16]
   30248:	69b9      	ldr	r1, [r7, #24]
   3024a:	4c5c      	ldr	r4, [pc, #368]	; (303bc <f_write+0x348>)
   3024c:	47a0      	blx	r4
   3024e:	1e03      	subs	r3, r0, #0
   30250:	d009      	beq.n	30266 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   30252:	68fb      	ldr	r3, [r7, #12]
   30254:	799b      	ldrb	r3, [r3, #6]
   30256:	2280      	movs	r2, #128	; 0x80
   30258:	4252      	negs	r2, r2
   3025a:	4313      	orrs	r3, r2
   3025c:	b2da      	uxtb	r2, r3
   3025e:	68fb      	ldr	r3, [r7, #12]
   30260:	719a      	strb	r2, [r3, #6]
   30262:	2301      	movs	r3, #1
   30264:	e09e      	b.n	303a4 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   30266:	68fb      	ldr	r3, [r7, #12]
   30268:	681b      	ldr	r3, [r3, #0]
   3026a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3026c:	693b      	ldr	r3, [r7, #16]
   3026e:	1ad2      	subs	r2, r2, r3
   30270:	69fb      	ldr	r3, [r7, #28]
   30272:	429a      	cmp	r2, r3
   30274:	d214      	bcs.n	302a0 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   30276:	68fb      	ldr	r3, [r7, #12]
   30278:	681b      	ldr	r3, [r3, #0]
   3027a:	3330      	adds	r3, #48	; 0x30
   3027c:	0018      	movs	r0, r3
   3027e:	68fb      	ldr	r3, [r7, #12]
   30280:	681b      	ldr	r3, [r3, #0]
   30282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30284:	693b      	ldr	r3, [r7, #16]
   30286:	1ad3      	subs	r3, r2, r3
   30288:	025b      	lsls	r3, r3, #9
   3028a:	69ba      	ldr	r2, [r7, #24]
   3028c:	18d1      	adds	r1, r2, r3
   3028e:	2380      	movs	r3, #128	; 0x80
   30290:	009b      	lsls	r3, r3, #2
   30292:	001a      	movs	r2, r3
   30294:	4b4a      	ldr	r3, [pc, #296]	; (303c0 <f_write+0x34c>)
   30296:	4798      	blx	r3
					fp->fs->wflag = 0;
   30298:	68fb      	ldr	r3, [r7, #12]
   3029a:	681b      	ldr	r3, [r3, #0]
   3029c:	2200      	movs	r2, #0
   3029e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   302a0:	69fb      	ldr	r3, [r7, #28]
   302a2:	025b      	lsls	r3, r3, #9
   302a4:	623b      	str	r3, [r7, #32]
				continue;
   302a6:	e051      	b.n	3034c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   302a8:	68fb      	ldr	r3, [r7, #12]
   302aa:	689a      	ldr	r2, [r3, #8]
   302ac:	68fb      	ldr	r3, [r7, #12]
   302ae:	68db      	ldr	r3, [r3, #12]
   302b0:	429a      	cmp	r2, r3
   302b2:	d315      	bcc.n	302e0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   302b4:	68fb      	ldr	r3, [r7, #12]
   302b6:	681b      	ldr	r3, [r3, #0]
   302b8:	2100      	movs	r1, #0
   302ba:	0018      	movs	r0, r3
   302bc:	4b3d      	ldr	r3, [pc, #244]	; (303b4 <f_write+0x340>)
   302be:	4798      	blx	r3
   302c0:	1e03      	subs	r3, r0, #0
   302c2:	d009      	beq.n	302d8 <f_write+0x264>
   302c4:	68fb      	ldr	r3, [r7, #12]
   302c6:	799b      	ldrb	r3, [r3, #6]
   302c8:	2280      	movs	r2, #128	; 0x80
   302ca:	4252      	negs	r2, r2
   302cc:	4313      	orrs	r3, r2
   302ce:	b2da      	uxtb	r2, r3
   302d0:	68fb      	ldr	r3, [r7, #12]
   302d2:	719a      	strb	r2, [r3, #6]
   302d4:	2301      	movs	r3, #1
   302d6:	e065      	b.n	303a4 <f_write+0x330>
				fp->fs->winsect = sect;
   302d8:	68fb      	ldr	r3, [r7, #12]
   302da:	681b      	ldr	r3, [r3, #0]
   302dc:	693a      	ldr	r2, [r7, #16]
   302de:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   302e0:	68fb      	ldr	r3, [r7, #12]
   302e2:	693a      	ldr	r2, [r7, #16]
   302e4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   302e6:	68fb      	ldr	r3, [r7, #12]
   302e8:	689b      	ldr	r3, [r3, #8]
   302ea:	05db      	lsls	r3, r3, #23
   302ec:	0ddb      	lsrs	r3, r3, #23
   302ee:	2280      	movs	r2, #128	; 0x80
   302f0:	0092      	lsls	r2, r2, #2
   302f2:	1ad3      	subs	r3, r2, r3
   302f4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   302f6:	6a3a      	ldr	r2, [r7, #32]
   302f8:	687b      	ldr	r3, [r7, #4]
   302fa:	429a      	cmp	r2, r3
   302fc:	d901      	bls.n	30302 <f_write+0x28e>
   302fe:	687b      	ldr	r3, [r7, #4]
   30300:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   30302:	68fb      	ldr	r3, [r7, #12]
   30304:	681a      	ldr	r2, [r3, #0]
   30306:	68fb      	ldr	r3, [r7, #12]
   30308:	699b      	ldr	r3, [r3, #24]
   3030a:	0019      	movs	r1, r3
   3030c:	0010      	movs	r0, r2
   3030e:	4b29      	ldr	r3, [pc, #164]	; (303b4 <f_write+0x340>)
   30310:	4798      	blx	r3
   30312:	1e03      	subs	r3, r0, #0
   30314:	d009      	beq.n	3032a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   30316:	68fb      	ldr	r3, [r7, #12]
   30318:	799b      	ldrb	r3, [r3, #6]
   3031a:	2280      	movs	r2, #128	; 0x80
   3031c:	4252      	negs	r2, r2
   3031e:	4313      	orrs	r3, r2
   30320:	b2da      	uxtb	r2, r3
   30322:	68fb      	ldr	r3, [r7, #12]
   30324:	719a      	strb	r2, [r3, #6]
   30326:	2301      	movs	r3, #1
   30328:	e03c      	b.n	303a4 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   3032a:	68fb      	ldr	r3, [r7, #12]
   3032c:	681a      	ldr	r2, [r3, #0]
   3032e:	68fb      	ldr	r3, [r7, #12]
   30330:	689b      	ldr	r3, [r3, #8]
   30332:	05db      	lsls	r3, r3, #23
   30334:	0ddb      	lsrs	r3, r3, #23
   30336:	3330      	adds	r3, #48	; 0x30
   30338:	18d3      	adds	r3, r2, r3
   3033a:	6a3a      	ldr	r2, [r7, #32]
   3033c:	69b9      	ldr	r1, [r7, #24]
   3033e:	0018      	movs	r0, r3
   30340:	4b1f      	ldr	r3, [pc, #124]	; (303c0 <f_write+0x34c>)
   30342:	4798      	blx	r3
		fp->fs->wflag = 1;
   30344:	68fb      	ldr	r3, [r7, #12]
   30346:	681b      	ldr	r3, [r3, #0]
   30348:	2201      	movs	r2, #1
   3034a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   3034c:	69ba      	ldr	r2, [r7, #24]
   3034e:	6a3b      	ldr	r3, [r7, #32]
   30350:	18d3      	adds	r3, r2, r3
   30352:	61bb      	str	r3, [r7, #24]
   30354:	68fb      	ldr	r3, [r7, #12]
   30356:	689a      	ldr	r2, [r3, #8]
   30358:	6a3b      	ldr	r3, [r7, #32]
   3035a:	18d2      	adds	r2, r2, r3
   3035c:	68fb      	ldr	r3, [r7, #12]
   3035e:	609a      	str	r2, [r3, #8]
   30360:	683b      	ldr	r3, [r7, #0]
   30362:	681a      	ldr	r2, [r3, #0]
   30364:	6a3b      	ldr	r3, [r7, #32]
   30366:	18d2      	adds	r2, r2, r3
   30368:	683b      	ldr	r3, [r7, #0]
   3036a:	601a      	str	r2, [r3, #0]
   3036c:	687a      	ldr	r2, [r7, #4]
   3036e:	6a3b      	ldr	r3, [r7, #32]
   30370:	1ad3      	subs	r3, r2, r3
   30372:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   30374:	687b      	ldr	r3, [r7, #4]
   30376:	2b00      	cmp	r3, #0
   30378:	d000      	beq.n	3037c <f_write+0x308>
   3037a:	e6b7      	b.n	300ec <f_write+0x78>
   3037c:	e000      	b.n	30380 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   3037e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   30380:	68fb      	ldr	r3, [r7, #12]
   30382:	689a      	ldr	r2, [r3, #8]
   30384:	68fb      	ldr	r3, [r7, #12]
   30386:	68db      	ldr	r3, [r3, #12]
   30388:	429a      	cmp	r2, r3
   3038a:	d903      	bls.n	30394 <f_write+0x320>
   3038c:	68fb      	ldr	r3, [r7, #12]
   3038e:	689a      	ldr	r2, [r3, #8]
   30390:	68fb      	ldr	r3, [r7, #12]
   30392:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   30394:	68fb      	ldr	r3, [r7, #12]
   30396:	799b      	ldrb	r3, [r3, #6]
   30398:	2220      	movs	r2, #32
   3039a:	4313      	orrs	r3, r2
   3039c:	b2da      	uxtb	r2, r3
   3039e:	68fb      	ldr	r3, [r7, #12]
   303a0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   303a2:	2300      	movs	r3, #0
}
   303a4:	0018      	movs	r0, r3
   303a6:	46bd      	mov	sp, r7
   303a8:	b00b      	add	sp, #44	; 0x2c
   303aa:	bd90      	pop	{r4, r7, pc}
   303ac:	0002fa99 	.word	0x0002fa99
   303b0:	0002e125 	.word	0x0002e125
   303b4:	0002da1d 	.word	0x0002da1d
   303b8:	0002dc7d 	.word	0x0002dc7d
   303bc:	0002d709 	.word	0x0002d709
   303c0:	0002d939 	.word	0x0002d939

000303c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   303c4:	b590      	push	{r4, r7, lr}
   303c6:	b087      	sub	sp, #28
   303c8:	af00      	add	r7, sp, #0
   303ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   303cc:	687b      	ldr	r3, [r7, #4]
   303ce:	681a      	ldr	r2, [r3, #0]
   303d0:	687b      	ldr	r3, [r7, #4]
   303d2:	889b      	ldrh	r3, [r3, #4]
   303d4:	2117      	movs	r1, #23
   303d6:	187c      	adds	r4, r7, r1
   303d8:	0019      	movs	r1, r3
   303da:	0010      	movs	r0, r2
   303dc:	4b55      	ldr	r3, [pc, #340]	; (30534 <f_sync+0x170>)
   303de:	4798      	blx	r3
   303e0:	0003      	movs	r3, r0
   303e2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   303e4:	2317      	movs	r3, #23
   303e6:	18fb      	adds	r3, r7, r3
   303e8:	781b      	ldrb	r3, [r3, #0]
   303ea:	2b00      	cmp	r3, #0
   303ec:	d000      	beq.n	303f0 <f_sync+0x2c>
   303ee:	e09a      	b.n	30526 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   303f0:	687b      	ldr	r3, [r7, #4]
   303f2:	799b      	ldrb	r3, [r3, #6]
   303f4:	001a      	movs	r2, r3
   303f6:	2320      	movs	r3, #32
   303f8:	4013      	ands	r3, r2
   303fa:	d100      	bne.n	303fe <f_sync+0x3a>
   303fc:	e093      	b.n	30526 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   303fe:	687b      	ldr	r3, [r7, #4]
   30400:	681a      	ldr	r2, [r3, #0]
   30402:	687b      	ldr	r3, [r7, #4]
   30404:	69db      	ldr	r3, [r3, #28]
   30406:	2117      	movs	r1, #23
   30408:	187c      	adds	r4, r7, r1
   3040a:	0019      	movs	r1, r3
   3040c:	0010      	movs	r0, r2
   3040e:	4b4a      	ldr	r3, [pc, #296]	; (30538 <f_sync+0x174>)
   30410:	4798      	blx	r3
   30412:	0003      	movs	r3, r0
   30414:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   30416:	2317      	movs	r3, #23
   30418:	18fb      	adds	r3, r7, r3
   3041a:	781b      	ldrb	r3, [r3, #0]
   3041c:	2b00      	cmp	r3, #0
   3041e:	d000      	beq.n	30422 <f_sync+0x5e>
   30420:	e081      	b.n	30526 <f_sync+0x162>
				dir = fp->dir_ptr;
   30422:	687b      	ldr	r3, [r7, #4]
   30424:	6a1b      	ldr	r3, [r3, #32]
   30426:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   30428:	693b      	ldr	r3, [r7, #16]
   3042a:	330b      	adds	r3, #11
   3042c:	693a      	ldr	r2, [r7, #16]
   3042e:	320b      	adds	r2, #11
   30430:	7812      	ldrb	r2, [r2, #0]
   30432:	2120      	movs	r1, #32
   30434:	430a      	orrs	r2, r1
   30436:	b2d2      	uxtb	r2, r2
   30438:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   3043a:	693b      	ldr	r3, [r7, #16]
   3043c:	331c      	adds	r3, #28
   3043e:	001a      	movs	r2, r3
   30440:	687b      	ldr	r3, [r7, #4]
   30442:	68db      	ldr	r3, [r3, #12]
   30444:	b2db      	uxtb	r3, r3
   30446:	7013      	strb	r3, [r2, #0]
   30448:	693b      	ldr	r3, [r7, #16]
   3044a:	331d      	adds	r3, #29
   3044c:	001a      	movs	r2, r3
   3044e:	687b      	ldr	r3, [r7, #4]
   30450:	68db      	ldr	r3, [r3, #12]
   30452:	b29b      	uxth	r3, r3
   30454:	0a1b      	lsrs	r3, r3, #8
   30456:	b29b      	uxth	r3, r3
   30458:	b2db      	uxtb	r3, r3
   3045a:	7013      	strb	r3, [r2, #0]
   3045c:	693b      	ldr	r3, [r7, #16]
   3045e:	331e      	adds	r3, #30
   30460:	001a      	movs	r2, r3
   30462:	687b      	ldr	r3, [r7, #4]
   30464:	68db      	ldr	r3, [r3, #12]
   30466:	0c1b      	lsrs	r3, r3, #16
   30468:	b2db      	uxtb	r3, r3
   3046a:	7013      	strb	r3, [r2, #0]
   3046c:	693b      	ldr	r3, [r7, #16]
   3046e:	331f      	adds	r3, #31
   30470:	001a      	movs	r2, r3
   30472:	687b      	ldr	r3, [r7, #4]
   30474:	68db      	ldr	r3, [r3, #12]
   30476:	0e1b      	lsrs	r3, r3, #24
   30478:	b2db      	uxtb	r3, r3
   3047a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   3047c:	693b      	ldr	r3, [r7, #16]
   3047e:	331a      	adds	r3, #26
   30480:	001a      	movs	r2, r3
   30482:	687b      	ldr	r3, [r7, #4]
   30484:	691b      	ldr	r3, [r3, #16]
   30486:	b2db      	uxtb	r3, r3
   30488:	7013      	strb	r3, [r2, #0]
   3048a:	693b      	ldr	r3, [r7, #16]
   3048c:	331b      	adds	r3, #27
   3048e:	001a      	movs	r2, r3
   30490:	687b      	ldr	r3, [r7, #4]
   30492:	691b      	ldr	r3, [r3, #16]
   30494:	b29b      	uxth	r3, r3
   30496:	0a1b      	lsrs	r3, r3, #8
   30498:	b29b      	uxth	r3, r3
   3049a:	b2db      	uxtb	r3, r3
   3049c:	7013      	strb	r3, [r2, #0]
   3049e:	693b      	ldr	r3, [r7, #16]
   304a0:	3314      	adds	r3, #20
   304a2:	001a      	movs	r2, r3
   304a4:	687b      	ldr	r3, [r7, #4]
   304a6:	691b      	ldr	r3, [r3, #16]
   304a8:	0c1b      	lsrs	r3, r3, #16
   304aa:	b2db      	uxtb	r3, r3
   304ac:	7013      	strb	r3, [r2, #0]
   304ae:	693b      	ldr	r3, [r7, #16]
   304b0:	3315      	adds	r3, #21
   304b2:	001a      	movs	r2, r3
   304b4:	687b      	ldr	r3, [r7, #4]
   304b6:	691b      	ldr	r3, [r3, #16]
   304b8:	0c1b      	lsrs	r3, r3, #16
   304ba:	b29b      	uxth	r3, r3
   304bc:	0a1b      	lsrs	r3, r3, #8
   304be:	b29b      	uxth	r3, r3
   304c0:	b2db      	uxtb	r3, r3
   304c2:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   304c4:	4b1d      	ldr	r3, [pc, #116]	; (3053c <f_sync+0x178>)
   304c6:	4798      	blx	r3
   304c8:	0003      	movs	r3, r0
   304ca:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   304cc:	693b      	ldr	r3, [r7, #16]
   304ce:	3316      	adds	r3, #22
   304d0:	68fa      	ldr	r2, [r7, #12]
   304d2:	b2d2      	uxtb	r2, r2
   304d4:	701a      	strb	r2, [r3, #0]
   304d6:	693b      	ldr	r3, [r7, #16]
   304d8:	3317      	adds	r3, #23
   304da:	68fa      	ldr	r2, [r7, #12]
   304dc:	b292      	uxth	r2, r2
   304de:	0a12      	lsrs	r2, r2, #8
   304e0:	b292      	uxth	r2, r2
   304e2:	b2d2      	uxtb	r2, r2
   304e4:	701a      	strb	r2, [r3, #0]
   304e6:	693b      	ldr	r3, [r7, #16]
   304e8:	3318      	adds	r3, #24
   304ea:	68fa      	ldr	r2, [r7, #12]
   304ec:	0c12      	lsrs	r2, r2, #16
   304ee:	b2d2      	uxtb	r2, r2
   304f0:	701a      	strb	r2, [r3, #0]
   304f2:	693b      	ldr	r3, [r7, #16]
   304f4:	3319      	adds	r3, #25
   304f6:	68fa      	ldr	r2, [r7, #12]
   304f8:	0e12      	lsrs	r2, r2, #24
   304fa:	b2d2      	uxtb	r2, r2
   304fc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   304fe:	687b      	ldr	r3, [r7, #4]
   30500:	799b      	ldrb	r3, [r3, #6]
   30502:	2220      	movs	r2, #32
   30504:	4393      	bics	r3, r2
   30506:	b2da      	uxtb	r2, r3
   30508:	687b      	ldr	r3, [r7, #4]
   3050a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   3050c:	687b      	ldr	r3, [r7, #4]
   3050e:	681b      	ldr	r3, [r3, #0]
   30510:	2201      	movs	r2, #1
   30512:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   30514:	687b      	ldr	r3, [r7, #4]
   30516:	681b      	ldr	r3, [r3, #0]
   30518:	2217      	movs	r2, #23
   3051a:	18bc      	adds	r4, r7, r2
   3051c:	0018      	movs	r0, r3
   3051e:	4b08      	ldr	r3, [pc, #32]	; (30540 <f_sync+0x17c>)
   30520:	4798      	blx	r3
   30522:	0003      	movs	r3, r0
   30524:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   30526:	2317      	movs	r3, #23
   30528:	18fb      	adds	r3, r7, r3
   3052a:	781b      	ldrb	r3, [r3, #0]
}
   3052c:	0018      	movs	r0, r3
   3052e:	46bd      	mov	sp, r7
   30530:	b007      	add	sp, #28
   30532:	bd90      	pop	{r4, r7, pc}
   30534:	0002fa99 	.word	0x0002fa99
   30538:	0002da1d 	.word	0x0002da1d
   3053c:	0002d8d9 	.word	0x0002d8d9
   30540:	0002dae5 	.word	0x0002dae5

00030544 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   30544:	b590      	push	{r4, r7, lr}
   30546:	b085      	sub	sp, #20
   30548:	af00      	add	r7, sp, #0
   3054a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   3054c:	230f      	movs	r3, #15
   3054e:	18fc      	adds	r4, r7, r3
   30550:	687b      	ldr	r3, [r7, #4]
   30552:	0018      	movs	r0, r3
   30554:	4b09      	ldr	r3, [pc, #36]	; (3057c <f_close+0x38>)
   30556:	4798      	blx	r3
   30558:	0003      	movs	r3, r0
   3055a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   3055c:	230f      	movs	r3, #15
   3055e:	18fb      	adds	r3, r7, r3
   30560:	781b      	ldrb	r3, [r3, #0]
   30562:	2b00      	cmp	r3, #0
   30564:	d102      	bne.n	3056c <f_close+0x28>
   30566:	687b      	ldr	r3, [r7, #4]
   30568:	2200      	movs	r2, #0
   3056a:	601a      	str	r2, [r3, #0]
	return res;
   3056c:	230f      	movs	r3, #15
   3056e:	18fb      	adds	r3, r7, r3
   30570:	781b      	ldrb	r3, [r3, #0]
#endif
}
   30572:	0018      	movs	r0, r3
   30574:	46bd      	mov	sp, r7
   30576:	b005      	add	sp, #20
   30578:	bd90      	pop	{r4, r7, pc}
   3057a:	46c0      	nop			; (mov r8, r8)
   3057c:	000303c5 	.word	0x000303c5

00030580 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   30580:	b580      	push	{r7, lr}
   30582:	b084      	sub	sp, #16
   30584:	af00      	add	r7, sp, #0
   30586:	0002      	movs	r2, r0
   30588:	6039      	str	r1, [r7, #0]
   3058a:	1dbb      	adds	r3, r7, #6
   3058c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   3058e:	1dbb      	adds	r3, r7, #6
   30590:	881b      	ldrh	r3, [r3, #0]
   30592:	2b7f      	cmp	r3, #127	; 0x7f
   30594:	d805      	bhi.n	305a2 <ff_convert+0x22>
		c = src;
   30596:	230e      	movs	r3, #14
   30598:	18fb      	adds	r3, r7, r3
   3059a:	1dba      	adds	r2, r7, #6
   3059c:	8812      	ldrh	r2, [r2, #0]
   3059e:	801a      	strh	r2, [r3, #0]
   305a0:	e03a      	b.n	30618 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   305a2:	683b      	ldr	r3, [r7, #0]
   305a4:	2b00      	cmp	r3, #0
   305a6:	d010      	beq.n	305ca <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   305a8:	1dbb      	adds	r3, r7, #6
   305aa:	881b      	ldrh	r3, [r3, #0]
   305ac:	2bff      	cmp	r3, #255	; 0xff
   305ae:	d807      	bhi.n	305c0 <ff_convert+0x40>
   305b0:	1dbb      	adds	r3, r7, #6
   305b2:	881b      	ldrh	r3, [r3, #0]
   305b4:	3b80      	subs	r3, #128	; 0x80
   305b6:	001a      	movs	r2, r3
   305b8:	4b1b      	ldr	r3, [pc, #108]	; (30628 <ff_convert+0xa8>)
   305ba:	0052      	lsls	r2, r2, #1
   305bc:	5ad2      	ldrh	r2, [r2, r3]
   305be:	e000      	b.n	305c2 <ff_convert+0x42>
   305c0:	2200      	movs	r2, #0
   305c2:	230e      	movs	r3, #14
   305c4:	18fb      	adds	r3, r7, r3
   305c6:	801a      	strh	r2, [r3, #0]
   305c8:	e026      	b.n	30618 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   305ca:	230e      	movs	r3, #14
   305cc:	18fb      	adds	r3, r7, r3
   305ce:	2200      	movs	r2, #0
   305d0:	801a      	strh	r2, [r3, #0]
   305d2:	e010      	b.n	305f6 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   305d4:	230e      	movs	r3, #14
   305d6:	18fb      	adds	r3, r7, r3
   305d8:	881a      	ldrh	r2, [r3, #0]
   305da:	4b13      	ldr	r3, [pc, #76]	; (30628 <ff_convert+0xa8>)
   305dc:	0052      	lsls	r2, r2, #1
   305de:	5ad3      	ldrh	r3, [r2, r3]
   305e0:	1dba      	adds	r2, r7, #6
   305e2:	8812      	ldrh	r2, [r2, #0]
   305e4:	429a      	cmp	r2, r3
   305e6:	d00c      	beq.n	30602 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   305e8:	230e      	movs	r3, #14
   305ea:	18fb      	adds	r3, r7, r3
   305ec:	881a      	ldrh	r2, [r3, #0]
   305ee:	230e      	movs	r3, #14
   305f0:	18fb      	adds	r3, r7, r3
   305f2:	3201      	adds	r2, #1
   305f4:	801a      	strh	r2, [r3, #0]
   305f6:	230e      	movs	r3, #14
   305f8:	18fb      	adds	r3, r7, r3
   305fa:	881b      	ldrh	r3, [r3, #0]
   305fc:	2b7f      	cmp	r3, #127	; 0x7f
   305fe:	d9e9      	bls.n	305d4 <ff_convert+0x54>
   30600:	e000      	b.n	30604 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   30602:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   30604:	230e      	movs	r3, #14
   30606:	18fb      	adds	r3, r7, r3
   30608:	881b      	ldrh	r3, [r3, #0]
   3060a:	3380      	adds	r3, #128	; 0x80
   3060c:	b29a      	uxth	r2, r3
   3060e:	230e      	movs	r3, #14
   30610:	18fb      	adds	r3, r7, r3
   30612:	21ff      	movs	r1, #255	; 0xff
   30614:	400a      	ands	r2, r1
   30616:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   30618:	230e      	movs	r3, #14
   3061a:	18fb      	adds	r3, r7, r3
   3061c:	881b      	ldrh	r3, [r3, #0]
}
   3061e:	0018      	movs	r0, r3
   30620:	46bd      	mov	sp, r7
   30622:	b004      	add	sp, #16
   30624:	bd80      	pop	{r7, pc}
   30626:	46c0      	nop			; (mov r8, r8)
   30628:	0003c74c 	.word	0x0003c74c

0003062c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   3062c:	b580      	push	{r7, lr}
   3062e:	b084      	sub	sp, #16
   30630:	af00      	add	r7, sp, #0
   30632:	0002      	movs	r2, r0
   30634:	1dbb      	adds	r3, r7, #6
   30636:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   30638:	2300      	movs	r3, #0
   3063a:	60fb      	str	r3, [r7, #12]
   3063c:	e002      	b.n	30644 <ff_wtoupper+0x18>
   3063e:	68fb      	ldr	r3, [r7, #12]
   30640:	3301      	adds	r3, #1
   30642:	60fb      	str	r3, [r7, #12]
   30644:	4b0f      	ldr	r3, [pc, #60]	; (30684 <ff_wtoupper+0x58>)
   30646:	68fa      	ldr	r2, [r7, #12]
   30648:	0052      	lsls	r2, r2, #1
   3064a:	5ad3      	ldrh	r3, [r2, r3]
   3064c:	2b00      	cmp	r3, #0
   3064e:	d007      	beq.n	30660 <ff_wtoupper+0x34>
   30650:	4b0c      	ldr	r3, [pc, #48]	; (30684 <ff_wtoupper+0x58>)
   30652:	68fa      	ldr	r2, [r7, #12]
   30654:	0052      	lsls	r2, r2, #1
   30656:	5ad3      	ldrh	r3, [r2, r3]
   30658:	1dba      	adds	r2, r7, #6
   3065a:	8812      	ldrh	r2, [r2, #0]
   3065c:	429a      	cmp	r2, r3
   3065e:	d1ee      	bne.n	3063e <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   30660:	4b08      	ldr	r3, [pc, #32]	; (30684 <ff_wtoupper+0x58>)
   30662:	68fa      	ldr	r2, [r7, #12]
   30664:	0052      	lsls	r2, r2, #1
   30666:	5ad3      	ldrh	r3, [r2, r3]
   30668:	2b00      	cmp	r3, #0
   3066a:	d004      	beq.n	30676 <ff_wtoupper+0x4a>
   3066c:	4b06      	ldr	r3, [pc, #24]	; (30688 <ff_wtoupper+0x5c>)
   3066e:	68fa      	ldr	r2, [r7, #12]
   30670:	0052      	lsls	r2, r2, #1
   30672:	5ad3      	ldrh	r3, [r2, r3]
   30674:	e001      	b.n	3067a <ff_wtoupper+0x4e>
   30676:	1dbb      	adds	r3, r7, #6
   30678:	881b      	ldrh	r3, [r3, #0]
}
   3067a:	0018      	movs	r0, r3
   3067c:	46bd      	mov	sp, r7
   3067e:	b004      	add	sp, #16
   30680:	bd80      	pop	{r7, pc}
   30682:	46c0      	nop			; (mov r8, r8)
   30684:	0003c84c 	.word	0x0003c84c
   30688:	0003ca2c 	.word	0x0003ca2c

0003068c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   3068c:	b580      	push	{r7, lr}
   3068e:	b084      	sub	sp, #16
   30690:	af00      	add	r7, sp, #0
   30692:	60f8      	str	r0, [r7, #12]
   30694:	60b9      	str	r1, [r7, #8]
   30696:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   30698:	68fb      	ldr	r3, [r7, #12]
   3069a:	68ba      	ldr	r2, [r7, #8]
   3069c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   3069e:	68fb      	ldr	r3, [r7, #12]
   306a0:	687a      	ldr	r2, [r7, #4]
   306a2:	601a      	str	r2, [r3, #0]
}
   306a4:	46c0      	nop			; (mov r8, r8)
   306a6:	46bd      	mov	sp, r7
   306a8:	b004      	add	sp, #16
   306aa:	bd80      	pop	{r7, pc}

000306ac <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   306ac:	b580      	push	{r7, lr}
   306ae:	b082      	sub	sp, #8
   306b0:	af00      	add	r7, sp, #0
   306b2:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   306b4:	687b      	ldr	r3, [r7, #4]
   306b6:	681b      	ldr	r3, [r3, #0]
   306b8:	4a07      	ldr	r2, [pc, #28]	; (306d8 <getNextPacketId+0x2c>)
   306ba:	4293      	cmp	r3, r2
   306bc:	d003      	beq.n	306c6 <getNextPacketId+0x1a>
   306be:	687b      	ldr	r3, [r7, #4]
   306c0:	681b      	ldr	r3, [r3, #0]
   306c2:	1c5a      	adds	r2, r3, #1
   306c4:	e000      	b.n	306c8 <getNextPacketId+0x1c>
   306c6:	2201      	movs	r2, #1
   306c8:	687b      	ldr	r3, [r7, #4]
   306ca:	601a      	str	r2, [r3, #0]
   306cc:	687b      	ldr	r3, [r7, #4]
   306ce:	681b      	ldr	r3, [r3, #0]
}
   306d0:	0018      	movs	r0, r3
   306d2:	46bd      	mov	sp, r7
   306d4:	b002      	add	sp, #8
   306d6:	bd80      	pop	{r7, pc}
   306d8:	0000ffff 	.word	0x0000ffff

000306dc <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   306dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   306de:	b087      	sub	sp, #28
   306e0:	af00      	add	r7, sp, #0
   306e2:	60f8      	str	r0, [r7, #12]
   306e4:	60b9      	str	r1, [r7, #8]
   306e6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   306e8:	2301      	movs	r3, #1
   306ea:	425b      	negs	r3, r3
   306ec:	617b      	str	r3, [r7, #20]
        sent = 0;
   306ee:	2300      	movs	r3, #0
   306f0:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   306f2:	e01a      	b.n	3072a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   306f4:	68fb      	ldr	r3, [r7, #12]
   306f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   306f8:	68dc      	ldr	r4, [r3, #12]
   306fa:	68fb      	ldr	r3, [r7, #12]
   306fc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   306fe:	68fb      	ldr	r3, [r7, #12]
   30700:	691a      	ldr	r2, [r3, #16]
   30702:	693b      	ldr	r3, [r7, #16]
   30704:	18d6      	adds	r6, r2, r3
   30706:	687b      	ldr	r3, [r7, #4]
   30708:	0018      	movs	r0, r3
   3070a:	4b1a      	ldr	r3, [pc, #104]	; (30774 <sendPacket+0x98>)
   3070c:	4798      	blx	r3
   3070e:	0003      	movs	r3, r0
   30710:	68ba      	ldr	r2, [r7, #8]
   30712:	0031      	movs	r1, r6
   30714:	0028      	movs	r0, r5
   30716:	47a0      	blx	r4
   30718:	0003      	movs	r3, r0
   3071a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   3071c:	697b      	ldr	r3, [r7, #20]
   3071e:	2b00      	cmp	r3, #0
   30720:	db0e      	blt.n	30740 <sendPacket+0x64>
            break;
        sent += rc;
   30722:	693a      	ldr	r2, [r7, #16]
   30724:	697b      	ldr	r3, [r7, #20]
   30726:	18d3      	adds	r3, r2, r3
   30728:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   3072a:	693a      	ldr	r2, [r7, #16]
   3072c:	68bb      	ldr	r3, [r7, #8]
   3072e:	429a      	cmp	r2, r3
   30730:	da07      	bge.n	30742 <sendPacket+0x66>
   30732:	687b      	ldr	r3, [r7, #4]
   30734:	0018      	movs	r0, r3
   30736:	4b10      	ldr	r3, [pc, #64]	; (30778 <sendPacket+0x9c>)
   30738:	4798      	blx	r3
   3073a:	1e03      	subs	r3, r0, #0
   3073c:	d0da      	beq.n	306f4 <sendPacket+0x18>
   3073e:	e000      	b.n	30742 <sendPacket+0x66>
            break;
   30740:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   30742:	693a      	ldr	r2, [r7, #16]
   30744:	68bb      	ldr	r3, [r7, #8]
   30746:	429a      	cmp	r2, r3
   30748:	d10b      	bne.n	30762 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   3074a:	68fb      	ldr	r3, [r7, #12]
   3074c:	3354      	adds	r3, #84	; 0x54
   3074e:	001a      	movs	r2, r3
   30750:	68fb      	ldr	r3, [r7, #12]
   30752:	699b      	ldr	r3, [r3, #24]
   30754:	0019      	movs	r1, r3
   30756:	0010      	movs	r0, r2
   30758:	4b08      	ldr	r3, [pc, #32]	; (3077c <sendPacket+0xa0>)
   3075a:	4798      	blx	r3
        rc = SUCCESS;
   3075c:	2300      	movs	r3, #0
   3075e:	617b      	str	r3, [r7, #20]
   30760:	e002      	b.n	30768 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   30762:	2301      	movs	r3, #1
   30764:	425b      	negs	r3, r3
   30766:	617b      	str	r3, [r7, #20]
    return rc;
   30768:	697b      	ldr	r3, [r7, #20]
}
   3076a:	0018      	movs	r0, r3
   3076c:	46bd      	mov	sp, r7
   3076e:	b007      	add	sp, #28
   30770:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30772:	46c0      	nop			; (mov r8, r8)
   30774:	0003153d 	.word	0x0003153d
   30778:	000314c1 	.word	0x000314c1
   3077c:	00031515 	.word	0x00031515

00030780 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   30780:	b580      	push	{r7, lr}
   30782:	b086      	sub	sp, #24
   30784:	af00      	add	r7, sp, #0
   30786:	60f8      	str	r0, [r7, #12]
   30788:	60b9      	str	r1, [r7, #8]
   3078a:	607a      	str	r2, [r7, #4]
   3078c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   3078e:	68fb      	ldr	r3, [r7, #12]
   30790:	68ba      	ldr	r2, [r7, #8]
   30792:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30794:	2300      	movs	r3, #0
   30796:	617b      	str	r3, [r7, #20]
   30798:	e00a      	b.n	307b0 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   3079a:	68fa      	ldr	r2, [r7, #12]
   3079c:	697b      	ldr	r3, [r7, #20]
   3079e:	3304      	adds	r3, #4
   307a0:	00db      	lsls	r3, r3, #3
   307a2:	18d3      	adds	r3, r2, r3
   307a4:	3304      	adds	r3, #4
   307a6:	2200      	movs	r2, #0
   307a8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   307aa:	697b      	ldr	r3, [r7, #20]
   307ac:	3301      	adds	r3, #1
   307ae:	617b      	str	r3, [r7, #20]
   307b0:	697b      	ldr	r3, [r7, #20]
   307b2:	2b04      	cmp	r3, #4
   307b4:	ddf1      	ble.n	3079a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   307b6:	68fb      	ldr	r3, [r7, #12]
   307b8:	687a      	ldr	r2, [r7, #4]
   307ba:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   307bc:	68fb      	ldr	r3, [r7, #12]
   307be:	683a      	ldr	r2, [r7, #0]
   307c0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   307c2:	68fb      	ldr	r3, [r7, #12]
   307c4:	6a3a      	ldr	r2, [r7, #32]
   307c6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   307c8:	68fb      	ldr	r3, [r7, #12]
   307ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   307cc:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   307ce:	68fb      	ldr	r3, [r7, #12]
   307d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   307d2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   307d4:	68fb      	ldr	r3, [r7, #12]
   307d6:	2200      	movs	r2, #0
   307d8:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   307da:	68fb      	ldr	r3, [r7, #12]
   307dc:	2200      	movs	r2, #0
   307de:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   307e0:	68fb      	ldr	r3, [r7, #12]
   307e2:	2200      	movs	r2, #0
   307e4:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   307e6:	68fb      	ldr	r3, [r7, #12]
   307e8:	2201      	movs	r2, #1
   307ea:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   307ec:	68fb      	ldr	r3, [r7, #12]
   307ee:	3354      	adds	r3, #84	; 0x54
   307f0:	0018      	movs	r0, r3
   307f2:	4b03      	ldr	r3, [pc, #12]	; (30800 <MQTTClientInit+0x80>)
   307f4:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   307f6:	46c0      	nop			; (mov r8, r8)
   307f8:	46bd      	mov	sp, r7
   307fa:	b006      	add	sp, #24
   307fc:	bd80      	pop	{r7, pc}
   307fe:	46c0      	nop			; (mov r8, r8)
   30800:	00031565 	.word	0x00031565

00030804 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   30804:	b590      	push	{r4, r7, lr}
   30806:	b08b      	sub	sp, #44	; 0x2c
   30808:	af00      	add	r7, sp, #0
   3080a:	60f8      	str	r0, [r7, #12]
   3080c:	60b9      	str	r1, [r7, #8]
   3080e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   30810:	2301      	movs	r3, #1
   30812:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   30814:	2300      	movs	r3, #0
   30816:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   30818:	2304      	movs	r3, #4
   3081a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   3081c:	68bb      	ldr	r3, [r7, #8]
   3081e:	2200      	movs	r2, #0
   30820:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   30822:	2301      	movs	r3, #1
   30824:	425b      	negs	r3, r3
   30826:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30828:	6a3b      	ldr	r3, [r7, #32]
   3082a:	3301      	adds	r3, #1
   3082c:	623b      	str	r3, [r7, #32]
   3082e:	6a3a      	ldr	r2, [r7, #32]
   30830:	69fb      	ldr	r3, [r7, #28]
   30832:	429a      	cmp	r2, r3
   30834:	dd03      	ble.n	3083e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   30836:	2301      	movs	r3, #1
   30838:	425b      	negs	r3, r3
   3083a:	61bb      	str	r3, [r7, #24]
            goto exit;
   3083c:	e026      	b.n	3088c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   3083e:	68fb      	ldr	r3, [r7, #12]
   30840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30842:	689c      	ldr	r4, [r3, #8]
   30844:	68fb      	ldr	r3, [r7, #12]
   30846:	6d18      	ldr	r0, [r3, #80]	; 0x50
   30848:	687b      	ldr	r3, [r7, #4]
   3084a:	2217      	movs	r2, #23
   3084c:	18b9      	adds	r1, r7, r2
   3084e:	2201      	movs	r2, #1
   30850:	47a0      	blx	r4
   30852:	0003      	movs	r3, r0
   30854:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   30856:	69bb      	ldr	r3, [r7, #24]
   30858:	2b01      	cmp	r3, #1
   3085a:	d116      	bne.n	3088a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   3085c:	68bb      	ldr	r3, [r7, #8]
   3085e:	681a      	ldr	r2, [r3, #0]
   30860:	2317      	movs	r3, #23
   30862:	18fb      	adds	r3, r7, r3
   30864:	781b      	ldrb	r3, [r3, #0]
   30866:	0019      	movs	r1, r3
   30868:	237f      	movs	r3, #127	; 0x7f
   3086a:	400b      	ands	r3, r1
   3086c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   3086e:	434b      	muls	r3, r1
   30870:	18d2      	adds	r2, r2, r3
   30872:	68bb      	ldr	r3, [r7, #8]
   30874:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   30876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30878:	01db      	lsls	r3, r3, #7
   3087a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   3087c:	2317      	movs	r3, #23
   3087e:	18fb      	adds	r3, r7, r3
   30880:	781b      	ldrb	r3, [r3, #0]
   30882:	b25b      	sxtb	r3, r3
   30884:	2b00      	cmp	r3, #0
   30886:	dbcc      	blt.n	30822 <decodePacket+0x1e>
   30888:	e000      	b.n	3088c <decodePacket+0x88>
            goto exit;
   3088a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   3088c:	6a3b      	ldr	r3, [r7, #32]
}
   3088e:	0018      	movs	r0, r3
   30890:	46bd      	mov	sp, r7
   30892:	b00b      	add	sp, #44	; 0x2c
   30894:	bd90      	pop	{r4, r7, pc}
	...

00030898 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   30898:	b5f0      	push	{r4, r5, r6, r7, lr}
   3089a:	46c6      	mov	lr, r8
   3089c:	b500      	push	{lr}
   3089e:	b086      	sub	sp, #24
   308a0:	af00      	add	r7, sp, #0
   308a2:	6078      	str	r0, [r7, #4]
   308a4:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   308a6:	2301      	movs	r3, #1
   308a8:	425b      	negs	r3, r3
   308aa:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   308ac:	2300      	movs	r3, #0
   308ae:	60fb      	str	r3, [r7, #12]
    int len = 0;
   308b0:	2300      	movs	r3, #0
   308b2:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   308b4:	2300      	movs	r3, #0
   308b6:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   308b8:	687b      	ldr	r3, [r7, #4]
   308ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   308bc:	689c      	ldr	r4, [r3, #8]
   308be:	687b      	ldr	r3, [r7, #4]
   308c0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   308c2:	687b      	ldr	r3, [r7, #4]
   308c4:	695e      	ldr	r6, [r3, #20]
   308c6:	683b      	ldr	r3, [r7, #0]
   308c8:	0018      	movs	r0, r3
   308ca:	4b2b      	ldr	r3, [pc, #172]	; (30978 <readPacket+0xe0>)
   308cc:	4798      	blx	r3
   308ce:	0003      	movs	r3, r0
   308d0:	2201      	movs	r2, #1
   308d2:	0031      	movs	r1, r6
   308d4:	0028      	movs	r0, r5
   308d6:	47a0      	blx	r4
   308d8:	0003      	movs	r3, r0
   308da:	2b01      	cmp	r3, #1
   308dc:	d141      	bne.n	30962 <readPacket+0xca>
        goto exit;

    len = 1;
   308de:	2301      	movs	r3, #1
   308e0:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   308e2:	683b      	ldr	r3, [r7, #0]
   308e4:	0018      	movs	r0, r3
   308e6:	4b24      	ldr	r3, [pc, #144]	; (30978 <readPacket+0xe0>)
   308e8:	4798      	blx	r3
   308ea:	0002      	movs	r2, r0
   308ec:	2308      	movs	r3, #8
   308ee:	18f9      	adds	r1, r7, r3
   308f0:	687b      	ldr	r3, [r7, #4]
   308f2:	0018      	movs	r0, r3
   308f4:	4b21      	ldr	r3, [pc, #132]	; (3097c <readPacket+0xe4>)
   308f6:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   308f8:	687b      	ldr	r3, [r7, #4]
   308fa:	695b      	ldr	r3, [r3, #20]
   308fc:	3301      	adds	r3, #1
   308fe:	68ba      	ldr	r2, [r7, #8]
   30900:	0011      	movs	r1, r2
   30902:	0018      	movs	r0, r3
   30904:	4b1e      	ldr	r3, [pc, #120]	; (30980 <readPacket+0xe8>)
   30906:	4798      	blx	r3
   30908:	0002      	movs	r2, r0
   3090a:	693b      	ldr	r3, [r7, #16]
   3090c:	189b      	adds	r3, r3, r2
   3090e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   30910:	68bb      	ldr	r3, [r7, #8]
   30912:	2b00      	cmp	r3, #0
   30914:	dd17      	ble.n	30946 <readPacket+0xae>
   30916:	687b      	ldr	r3, [r7, #4]
   30918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   3091a:	689c      	ldr	r4, [r3, #8]
   3091c:	687b      	ldr	r3, [r7, #4]
   3091e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30920:	687b      	ldr	r3, [r7, #4]
   30922:	695a      	ldr	r2, [r3, #20]
   30924:	693b      	ldr	r3, [r7, #16]
   30926:	18d6      	adds	r6, r2, r3
   30928:	68bb      	ldr	r3, [r7, #8]
   3092a:	4698      	mov	r8, r3
   3092c:	683b      	ldr	r3, [r7, #0]
   3092e:	0018      	movs	r0, r3
   30930:	4b11      	ldr	r3, [pc, #68]	; (30978 <readPacket+0xe0>)
   30932:	4798      	blx	r3
   30934:	0003      	movs	r3, r0
   30936:	4642      	mov	r2, r8
   30938:	0031      	movs	r1, r6
   3093a:	0028      	movs	r0, r5
   3093c:	47a0      	blx	r4
   3093e:	0002      	movs	r2, r0
   30940:	68bb      	ldr	r3, [r7, #8]
   30942:	429a      	cmp	r2, r3
   30944:	d10f      	bne.n	30966 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   30946:	687b      	ldr	r3, [r7, #4]
   30948:	695b      	ldr	r3, [r3, #20]
   3094a:	781a      	ldrb	r2, [r3, #0]
   3094c:	230c      	movs	r3, #12
   3094e:	18fb      	adds	r3, r7, r3
   30950:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   30952:	230c      	movs	r3, #12
   30954:	18fb      	adds	r3, r7, r3
   30956:	781b      	ldrb	r3, [r3, #0]
   30958:	061b      	lsls	r3, r3, #24
   3095a:	0f1b      	lsrs	r3, r3, #28
   3095c:	b2db      	uxtb	r3, r3
   3095e:	617b      	str	r3, [r7, #20]
   30960:	e002      	b.n	30968 <readPacket+0xd0>
        goto exit;
   30962:	46c0      	nop			; (mov r8, r8)
   30964:	e000      	b.n	30968 <readPacket+0xd0>
        goto exit;
   30966:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   30968:	697b      	ldr	r3, [r7, #20]
}
   3096a:	0018      	movs	r0, r3
   3096c:	46bd      	mov	sp, r7
   3096e:	b006      	add	sp, #24
   30970:	bc04      	pop	{r2}
   30972:	4690      	mov	r8, r2
   30974:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30976:	46c0      	nop			; (mov r8, r8)
   30978:	0003153d 	.word	0x0003153d
   3097c:	00030805 	.word	0x00030805
   30980:	00032315 	.word	0x00032315

00030984 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   30984:	b580      	push	{r7, lr}
   30986:	b086      	sub	sp, #24
   30988:	af00      	add	r7, sp, #0
   3098a:	6078      	str	r0, [r7, #4]
   3098c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   3098e:	687b      	ldr	r3, [r7, #4]
   30990:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   30992:	683b      	ldr	r3, [r7, #0]
   30994:	689b      	ldr	r3, [r3, #8]
   30996:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   30998:	683b      	ldr	r3, [r7, #0]
   3099a:	685b      	ldr	r3, [r3, #4]
   3099c:	001a      	movs	r2, r3
   3099e:	693b      	ldr	r3, [r7, #16]
   309a0:	189b      	adds	r3, r3, r2
   309a2:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   309a4:	e039      	b.n	30a1a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   309a6:	693b      	ldr	r3, [r7, #16]
   309a8:	781b      	ldrb	r3, [r3, #0]
   309aa:	2b2f      	cmp	r3, #47	; 0x2f
   309ac:	d103      	bne.n	309b6 <isTopicMatched+0x32>
   309ae:	697b      	ldr	r3, [r7, #20]
   309b0:	781b      	ldrb	r3, [r3, #0]
   309b2:	2b2f      	cmp	r3, #47	; 0x2f
   309b4:	d13a      	bne.n	30a2c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   309b6:	697b      	ldr	r3, [r7, #20]
   309b8:	781b      	ldrb	r3, [r3, #0]
   309ba:	2b2b      	cmp	r3, #43	; 0x2b
   309bc:	d009      	beq.n	309d2 <isTopicMatched+0x4e>
   309be:	697b      	ldr	r3, [r7, #20]
   309c0:	781b      	ldrb	r3, [r3, #0]
   309c2:	2b23      	cmp	r3, #35	; 0x23
   309c4:	d005      	beq.n	309d2 <isTopicMatched+0x4e>
   309c6:	697b      	ldr	r3, [r7, #20]
   309c8:	781a      	ldrb	r2, [r3, #0]
   309ca:	693b      	ldr	r3, [r7, #16]
   309cc:	781b      	ldrb	r3, [r3, #0]
   309ce:	429a      	cmp	r2, r3
   309d0:	d12e      	bne.n	30a30 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   309d2:	697b      	ldr	r3, [r7, #20]
   309d4:	781b      	ldrb	r3, [r3, #0]
   309d6:	2b2b      	cmp	r3, #43	; 0x2b
   309d8:	d112      	bne.n	30a00 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   309da:	693b      	ldr	r3, [r7, #16]
   309dc:	3301      	adds	r3, #1
   309de:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   309e0:	e005      	b.n	309ee <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   309e2:	693b      	ldr	r3, [r7, #16]
   309e4:	3301      	adds	r3, #1
   309e6:	613b      	str	r3, [r7, #16]
   309e8:	693b      	ldr	r3, [r7, #16]
   309ea:	3301      	adds	r3, #1
   309ec:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   309ee:	68fa      	ldr	r2, [r7, #12]
   309f0:	68bb      	ldr	r3, [r7, #8]
   309f2:	429a      	cmp	r2, r3
   309f4:	d20b      	bcs.n	30a0e <isTopicMatched+0x8a>
   309f6:	68fb      	ldr	r3, [r7, #12]
   309f8:	781b      	ldrb	r3, [r3, #0]
   309fa:	2b2f      	cmp	r3, #47	; 0x2f
   309fc:	d1f1      	bne.n	309e2 <isTopicMatched+0x5e>
   309fe:	e006      	b.n	30a0e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   30a00:	697b      	ldr	r3, [r7, #20]
   30a02:	781b      	ldrb	r3, [r3, #0]
   30a04:	2b23      	cmp	r3, #35	; 0x23
   30a06:	d102      	bne.n	30a0e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   30a08:	68bb      	ldr	r3, [r7, #8]
   30a0a:	3b01      	subs	r3, #1
   30a0c:	613b      	str	r3, [r7, #16]
        curf++;
   30a0e:	697b      	ldr	r3, [r7, #20]
   30a10:	3301      	adds	r3, #1
   30a12:	617b      	str	r3, [r7, #20]
        curn++;
   30a14:	693b      	ldr	r3, [r7, #16]
   30a16:	3301      	adds	r3, #1
   30a18:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   30a1a:	697b      	ldr	r3, [r7, #20]
   30a1c:	781b      	ldrb	r3, [r3, #0]
   30a1e:	2b00      	cmp	r3, #0
   30a20:	d007      	beq.n	30a32 <isTopicMatched+0xae>
   30a22:	693a      	ldr	r2, [r7, #16]
   30a24:	68bb      	ldr	r3, [r7, #8]
   30a26:	429a      	cmp	r2, r3
   30a28:	d3bd      	bcc.n	309a6 <isTopicMatched+0x22>
   30a2a:	e002      	b.n	30a32 <isTopicMatched+0xae>
            break;
   30a2c:	46c0      	nop			; (mov r8, r8)
   30a2e:	e000      	b.n	30a32 <isTopicMatched+0xae>
            break;
   30a30:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   30a32:	693a      	ldr	r2, [r7, #16]
   30a34:	68bb      	ldr	r3, [r7, #8]
   30a36:	429a      	cmp	r2, r3
   30a38:	d105      	bne.n	30a46 <isTopicMatched+0xc2>
   30a3a:	697b      	ldr	r3, [r7, #20]
   30a3c:	781b      	ldrb	r3, [r3, #0]
   30a3e:	2b00      	cmp	r3, #0
   30a40:	d101      	bne.n	30a46 <isTopicMatched+0xc2>
   30a42:	2301      	movs	r3, #1
   30a44:	e000      	b.n	30a48 <isTopicMatched+0xc4>
   30a46:	2300      	movs	r3, #0
   30a48:	b2db      	uxtb	r3, r3
}
   30a4a:	0018      	movs	r0, r3
   30a4c:	46bd      	mov	sp, r7
   30a4e:	b006      	add	sp, #24
   30a50:	bd80      	pop	{r7, pc}
	...

00030a54 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   30a54:	b580      	push	{r7, lr}
   30a56:	b08a      	sub	sp, #40	; 0x28
   30a58:	af00      	add	r7, sp, #0
   30a5a:	60f8      	str	r0, [r7, #12]
   30a5c:	60b9      	str	r1, [r7, #8]
   30a5e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   30a60:	2301      	movs	r3, #1
   30a62:	425b      	negs	r3, r3
   30a64:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30a66:	2300      	movs	r3, #0
   30a68:	627b      	str	r3, [r7, #36]	; 0x24
   30a6a:	e044      	b.n	30af6 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   30a6c:	68fa      	ldr	r2, [r7, #12]
   30a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a70:	3304      	adds	r3, #4
   30a72:	00db      	lsls	r3, r3, #3
   30a74:	18d3      	adds	r3, r2, r3
   30a76:	3304      	adds	r3, #4
   30a78:	681b      	ldr	r3, [r3, #0]
   30a7a:	2b00      	cmp	r3, #0
   30a7c:	d038      	beq.n	30af0 <deliverMessage+0x9c>
   30a7e:	68fa      	ldr	r2, [r7, #12]
   30a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a82:	3304      	adds	r3, #4
   30a84:	00db      	lsls	r3, r3, #3
   30a86:	18d3      	adds	r3, r2, r3
   30a88:	3304      	adds	r3, #4
   30a8a:	681a      	ldr	r2, [r3, #0]
   30a8c:	68bb      	ldr	r3, [r7, #8]
   30a8e:	0011      	movs	r1, r2
   30a90:	0018      	movs	r0, r3
   30a92:	4b28      	ldr	r3, [pc, #160]	; (30b34 <deliverMessage+0xe0>)
   30a94:	4798      	blx	r3
   30a96:	1e03      	subs	r3, r0, #0
   30a98:	d10d      	bne.n	30ab6 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   30a9a:	68fa      	ldr	r2, [r7, #12]
   30a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a9e:	3304      	adds	r3, #4
   30aa0:	00db      	lsls	r3, r3, #3
   30aa2:	18d3      	adds	r3, r2, r3
   30aa4:	3304      	adds	r3, #4
   30aa6:	681b      	ldr	r3, [r3, #0]
   30aa8:	68ba      	ldr	r2, [r7, #8]
   30aaa:	0011      	movs	r1, r2
   30aac:	0018      	movs	r0, r3
   30aae:	4b22      	ldr	r3, [pc, #136]	; (30b38 <deliverMessage+0xe4>)
   30ab0:	4798      	blx	r3
   30ab2:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   30ab4:	d01c      	beq.n	30af0 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   30ab6:	68fa      	ldr	r2, [r7, #12]
   30ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30aba:	3304      	adds	r3, #4
   30abc:	00db      	lsls	r3, r3, #3
   30abe:	18d3      	adds	r3, r2, r3
   30ac0:	3308      	adds	r3, #8
   30ac2:	681b      	ldr	r3, [r3, #0]
   30ac4:	2b00      	cmp	r3, #0
   30ac6:	d013      	beq.n	30af0 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   30ac8:	687a      	ldr	r2, [r7, #4]
   30aca:	68b9      	ldr	r1, [r7, #8]
   30acc:	2318      	movs	r3, #24
   30ace:	18fb      	adds	r3, r7, r3
   30ad0:	0018      	movs	r0, r3
   30ad2:	4b1a      	ldr	r3, [pc, #104]	; (30b3c <deliverMessage+0xe8>)
   30ad4:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   30ad6:	68fa      	ldr	r2, [r7, #12]
   30ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ada:	3304      	adds	r3, #4
   30adc:	00db      	lsls	r3, r3, #3
   30ade:	18d3      	adds	r3, r2, r3
   30ae0:	3308      	adds	r3, #8
   30ae2:	681b      	ldr	r3, [r3, #0]
   30ae4:	2218      	movs	r2, #24
   30ae6:	18ba      	adds	r2, r7, r2
   30ae8:	0010      	movs	r0, r2
   30aea:	4798      	blx	r3
                rc = SUCCESS;
   30aec:	2300      	movs	r3, #0
   30aee:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30af2:	3301      	adds	r3, #1
   30af4:	627b      	str	r3, [r7, #36]	; 0x24
   30af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30af8:	2b04      	cmp	r3, #4
   30afa:	ddb7      	ble.n	30a6c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   30afc:	6a3b      	ldr	r3, [r7, #32]
   30afe:	3301      	adds	r3, #1
   30b00:	d112      	bne.n	30b28 <deliverMessage+0xd4>
   30b02:	68fb      	ldr	r3, [r7, #12]
   30b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b06:	2b00      	cmp	r3, #0
   30b08:	d00e      	beq.n	30b28 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   30b0a:	687a      	ldr	r2, [r7, #4]
   30b0c:	68b9      	ldr	r1, [r7, #8]
   30b0e:	2310      	movs	r3, #16
   30b10:	18fb      	adds	r3, r7, r3
   30b12:	0018      	movs	r0, r3
   30b14:	4b09      	ldr	r3, [pc, #36]	; (30b3c <deliverMessage+0xe8>)
   30b16:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   30b18:	68fb      	ldr	r3, [r7, #12]
   30b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b1c:	2210      	movs	r2, #16
   30b1e:	18ba      	adds	r2, r7, r2
   30b20:	0010      	movs	r0, r2
   30b22:	4798      	blx	r3
        rc = SUCCESS;
   30b24:	2300      	movs	r3, #0
   30b26:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   30b28:	6a3b      	ldr	r3, [r7, #32]
}
   30b2a:	0018      	movs	r0, r3
   30b2c:	46bd      	mov	sp, r7
   30b2e:	b00a      	add	sp, #40	; 0x28
   30b30:	bd80      	pop	{r7, pc}
   30b32:	46c0      	nop			; (mov r8, r8)
   30b34:	00032729 	.word	0x00032729
   30b38:	00030985 	.word	0x00030985
   30b3c:	0003068d 	.word	0x0003068d

00030b40 <keepalive>:


int keepalive(MQTTClient* c)
{
   30b40:	b580      	push	{r7, lr}
   30b42:	b088      	sub	sp, #32
   30b44:	af00      	add	r7, sp, #0
   30b46:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   30b48:	2301      	movs	r3, #1
   30b4a:	425b      	negs	r3, r3
   30b4c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   30b4e:	687b      	ldr	r3, [r7, #4]
   30b50:	699b      	ldr	r3, [r3, #24]
   30b52:	2b00      	cmp	r3, #0
   30b54:	d102      	bne.n	30b5c <keepalive+0x1c>
    {
        rc = SUCCESS;
   30b56:	2300      	movs	r3, #0
   30b58:	61fb      	str	r3, [r7, #28]
        goto exit;
   30b5a:	e033      	b.n	30bc4 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   30b5c:	687b      	ldr	r3, [r7, #4]
   30b5e:	3354      	adds	r3, #84	; 0x54
   30b60:	0018      	movs	r0, r3
   30b62:	4b1b      	ldr	r3, [pc, #108]	; (30bd0 <keepalive+0x90>)
   30b64:	4798      	blx	r3
   30b66:	1e03      	subs	r3, r0, #0
   30b68:	d02c      	beq.n	30bc4 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   30b6a:	687b      	ldr	r3, [r7, #4]
   30b6c:	7f1b      	ldrb	r3, [r3, #28]
   30b6e:	2b00      	cmp	r3, #0
   30b70:	d128      	bne.n	30bc4 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   30b72:	230c      	movs	r3, #12
   30b74:	18fb      	adds	r3, r7, r3
   30b76:	0018      	movs	r0, r3
   30b78:	4b16      	ldr	r3, [pc, #88]	; (30bd4 <keepalive+0x94>)
   30b7a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   30b7c:	23fa      	movs	r3, #250	; 0xfa
   30b7e:	009a      	lsls	r2, r3, #2
   30b80:	230c      	movs	r3, #12
   30b82:	18fb      	adds	r3, r7, r3
   30b84:	0011      	movs	r1, r2
   30b86:	0018      	movs	r0, r3
   30b88:	4b13      	ldr	r3, [pc, #76]	; (30bd8 <keepalive+0x98>)
   30b8a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   30b8c:	687b      	ldr	r3, [r7, #4]
   30b8e:	691a      	ldr	r2, [r3, #16]
   30b90:	687b      	ldr	r3, [r7, #4]
   30b92:	689b      	ldr	r3, [r3, #8]
   30b94:	0019      	movs	r1, r3
   30b96:	0010      	movs	r0, r2
   30b98:	4b10      	ldr	r3, [pc, #64]	; (30bdc <keepalive+0x9c>)
   30b9a:	4798      	blx	r3
   30b9c:	0003      	movs	r3, r0
   30b9e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   30ba0:	69bb      	ldr	r3, [r7, #24]
   30ba2:	2b00      	cmp	r3, #0
   30ba4:	dd0e      	ble.n	30bc4 <keepalive+0x84>
   30ba6:	230c      	movs	r3, #12
   30ba8:	18fa      	adds	r2, r7, r3
   30baa:	69b9      	ldr	r1, [r7, #24]
   30bac:	687b      	ldr	r3, [r7, #4]
   30bae:	0018      	movs	r0, r3
   30bb0:	4b0b      	ldr	r3, [pc, #44]	; (30be0 <keepalive+0xa0>)
   30bb2:	4798      	blx	r3
   30bb4:	0003      	movs	r3, r0
   30bb6:	61fb      	str	r3, [r7, #28]
   30bb8:	69fb      	ldr	r3, [r7, #28]
   30bba:	2b00      	cmp	r3, #0
   30bbc:	d102      	bne.n	30bc4 <keepalive+0x84>
                c->ping_outstanding = 1;
   30bbe:	687b      	ldr	r3, [r7, #4]
   30bc0:	2201      	movs	r2, #1
   30bc2:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   30bc4:	69fb      	ldr	r3, [r7, #28]
}
   30bc6:	0018      	movs	r0, r3
   30bc8:	46bd      	mov	sp, r7
   30bca:	b008      	add	sp, #32
   30bcc:	bd80      	pop	{r7, pc}
   30bce:	46c0      	nop			; (mov r8, r8)
   30bd0:	000314c1 	.word	0x000314c1
   30bd4:	00031565 	.word	0x00031565
   30bd8:	000314ed 	.word	0x000314ed
   30bdc:	00032139 	.word	0x00032139
   30be0:	000306dd 	.word	0x000306dd

00030be4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   30be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   30be6:	b095      	sub	sp, #84	; 0x54
   30be8:	af06      	add	r7, sp, #24
   30bea:	6078      	str	r0, [r7, #4]
   30bec:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   30bee:	683a      	ldr	r2, [r7, #0]
   30bf0:	687b      	ldr	r3, [r7, #4]
   30bf2:	0011      	movs	r1, r2
   30bf4:	0018      	movs	r0, r3
   30bf6:	4b70      	ldr	r3, [pc, #448]	; (30db8 <cycle+0x1d4>)
   30bf8:	4798      	blx	r3
   30bfa:	0002      	movs	r2, r0
   30bfc:	232e      	movs	r3, #46	; 0x2e
   30bfe:	18fb      	adds	r3, r7, r3
   30c00:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   30c02:	2300      	movs	r3, #0
   30c04:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   30c06:	2300      	movs	r3, #0
   30c08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   30c0a:	232e      	movs	r3, #46	; 0x2e
   30c0c:	18fb      	adds	r3, r7, r3
   30c0e:	881b      	ldrh	r3, [r3, #0]
   30c10:	2b0d      	cmp	r3, #13
   30c12:	d900      	bls.n	30c16 <cycle+0x32>
   30c14:	e0bd      	b.n	30d92 <cycle+0x1ae>
   30c16:	009a      	lsls	r2, r3, #2
   30c18:	4b68      	ldr	r3, [pc, #416]	; (30dbc <cycle+0x1d8>)
   30c1a:	18d3      	adds	r3, r2, r3
   30c1c:	681b      	ldr	r3, [r3, #0]
   30c1e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   30c20:	687b      	ldr	r3, [r7, #4]
   30c22:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   30c24:	687b      	ldr	r3, [r7, #4]
   30c26:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   30c28:	001e      	movs	r6, r3
   30c2a:	2310      	movs	r3, #16
   30c2c:	18fb      	adds	r3, r7, r3
   30c2e:	1d1d      	adds	r5, r3, #4
   30c30:	2310      	movs	r3, #16
   30c32:	18fb      	adds	r3, r7, r3
   30c34:	1c5c      	adds	r4, r3, #1
   30c36:	230c      	movs	r3, #12
   30c38:	18f9      	adds	r1, r7, r3
   30c3a:	2310      	movs	r3, #16
   30c3c:	18fb      	adds	r3, r7, r3
   30c3e:	1c98      	adds	r0, r3, #2
   30c40:	9604      	str	r6, [sp, #16]
   30c42:	9203      	str	r2, [sp, #12]
   30c44:	2310      	movs	r3, #16
   30c46:	18fb      	adds	r3, r7, r3
   30c48:	330c      	adds	r3, #12
   30c4a:	9302      	str	r3, [sp, #8]
   30c4c:	2310      	movs	r3, #16
   30c4e:	18fb      	adds	r3, r7, r3
   30c50:	3308      	adds	r3, #8
   30c52:	9301      	str	r3, [sp, #4]
   30c54:	2320      	movs	r3, #32
   30c56:	18fb      	adds	r3, r7, r3
   30c58:	9300      	str	r3, [sp, #0]
   30c5a:	002b      	movs	r3, r5
   30c5c:	0022      	movs	r2, r4
   30c5e:	4c58      	ldr	r4, [pc, #352]	; (30dc0 <cycle+0x1dc>)
   30c60:	47a0      	blx	r4
   30c62:	0003      	movs	r3, r0
   30c64:	2b01      	cmp	r3, #1
   30c66:	d000      	beq.n	30c6a <cycle+0x86>
   30c68:	e098      	b.n	30d9c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   30c6a:	68fb      	ldr	r3, [r7, #12]
   30c6c:	b2da      	uxtb	r2, r3
   30c6e:	2310      	movs	r3, #16
   30c70:	18fb      	adds	r3, r7, r3
   30c72:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   30c74:	2310      	movs	r3, #16
   30c76:	18fa      	adds	r2, r7, r3
   30c78:	2320      	movs	r3, #32
   30c7a:	18f9      	adds	r1, r7, r3
   30c7c:	687b      	ldr	r3, [r7, #4]
   30c7e:	0018      	movs	r0, r3
   30c80:	4b50      	ldr	r3, [pc, #320]	; (30dc4 <cycle+0x1e0>)
   30c82:	4798      	blx	r3
            if (msg.qos != QOS0)
   30c84:	2310      	movs	r3, #16
   30c86:	18fb      	adds	r3, r7, r3
   30c88:	781b      	ldrb	r3, [r3, #0]
   30c8a:	2b00      	cmp	r3, #0
   30c8c:	d100      	bne.n	30c90 <cycle+0xac>
   30c8e:	e07d      	b.n	30d8c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   30c90:	2310      	movs	r3, #16
   30c92:	18fb      	adds	r3, r7, r3
   30c94:	781b      	ldrb	r3, [r3, #0]
   30c96:	2b01      	cmp	r3, #1
   30c98:	d10f      	bne.n	30cba <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   30c9a:	687b      	ldr	r3, [r7, #4]
   30c9c:	6918      	ldr	r0, [r3, #16]
   30c9e:	687b      	ldr	r3, [r7, #4]
   30ca0:	689b      	ldr	r3, [r3, #8]
   30ca2:	0019      	movs	r1, r3
   30ca4:	2310      	movs	r3, #16
   30ca6:	18fb      	adds	r3, r7, r3
   30ca8:	889b      	ldrh	r3, [r3, #4]
   30caa:	9300      	str	r3, [sp, #0]
   30cac:	2300      	movs	r3, #0
   30cae:	2204      	movs	r2, #4
   30cb0:	4c45      	ldr	r4, [pc, #276]	; (30dc8 <cycle+0x1e4>)
   30cb2:	47a0      	blx	r4
   30cb4:	0003      	movs	r3, r0
   30cb6:	637b      	str	r3, [r7, #52]	; 0x34
   30cb8:	e013      	b.n	30ce2 <cycle+0xfe>
                else if (msg.qos == QOS2)
   30cba:	2310      	movs	r3, #16
   30cbc:	18fb      	adds	r3, r7, r3
   30cbe:	781b      	ldrb	r3, [r3, #0]
   30cc0:	2b02      	cmp	r3, #2
   30cc2:	d10e      	bne.n	30ce2 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   30cc4:	687b      	ldr	r3, [r7, #4]
   30cc6:	6918      	ldr	r0, [r3, #16]
   30cc8:	687b      	ldr	r3, [r7, #4]
   30cca:	689b      	ldr	r3, [r3, #8]
   30ccc:	0019      	movs	r1, r3
   30cce:	2310      	movs	r3, #16
   30cd0:	18fb      	adds	r3, r7, r3
   30cd2:	889b      	ldrh	r3, [r3, #4]
   30cd4:	9300      	str	r3, [sp, #0]
   30cd6:	2300      	movs	r3, #0
   30cd8:	2205      	movs	r2, #5
   30cda:	4c3b      	ldr	r4, [pc, #236]	; (30dc8 <cycle+0x1e4>)
   30cdc:	47a0      	blx	r4
   30cde:	0003      	movs	r3, r0
   30ce0:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   30ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30ce4:	2b00      	cmp	r3, #0
   30ce6:	dc03      	bgt.n	30cf0 <cycle+0x10c>
                    rc = FAILURE;
   30ce8:	2301      	movs	r3, #1
   30cea:	425b      	negs	r3, r3
   30cec:	633b      	str	r3, [r7, #48]	; 0x30
   30cee:	e007      	b.n	30d00 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   30cf0:	683a      	ldr	r2, [r7, #0]
   30cf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   30cf4:	687b      	ldr	r3, [r7, #4]
   30cf6:	0018      	movs	r0, r3
   30cf8:	4b34      	ldr	r3, [pc, #208]	; (30dcc <cycle+0x1e8>)
   30cfa:	4798      	blx	r3
   30cfc:	0003      	movs	r3, r0
   30cfe:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   30d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d02:	3301      	adds	r3, #1
   30d04:	d142      	bne.n	30d8c <cycle+0x1a8>
                    goto exit; // there was a problem
   30d06:	46c0      	nop			; (mov r8, r8)
   30d08:	e049      	b.n	30d9e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   30d0a:	687b      	ldr	r3, [r7, #4]
   30d0c:	695c      	ldr	r4, [r3, #20]
   30d0e:	687b      	ldr	r3, [r7, #4]
   30d10:	68db      	ldr	r3, [r3, #12]
   30d12:	220a      	movs	r2, #10
   30d14:	18ba      	adds	r2, r7, r2
   30d16:	2109      	movs	r1, #9
   30d18:	1879      	adds	r1, r7, r1
   30d1a:	2008      	movs	r0, #8
   30d1c:	1838      	adds	r0, r7, r0
   30d1e:	9300      	str	r3, [sp, #0]
   30d20:	0023      	movs	r3, r4
   30d22:	4c2b      	ldr	r4, [pc, #172]	; (30dd0 <cycle+0x1ec>)
   30d24:	47a0      	blx	r4
   30d26:	0003      	movs	r3, r0
   30d28:	2b01      	cmp	r3, #1
   30d2a:	d003      	beq.n	30d34 <cycle+0x150>
                rc = FAILURE;
   30d2c:	2301      	movs	r3, #1
   30d2e:	425b      	negs	r3, r3
   30d30:	633b      	str	r3, [r7, #48]	; 0x30
   30d32:	e023      	b.n	30d7c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   30d34:	687b      	ldr	r3, [r7, #4]
   30d36:	6918      	ldr	r0, [r3, #16]
   30d38:	687b      	ldr	r3, [r7, #4]
   30d3a:	689b      	ldr	r3, [r3, #8]
   30d3c:	0019      	movs	r1, r3
   30d3e:	230a      	movs	r3, #10
   30d40:	18fb      	adds	r3, r7, r3
   30d42:	881b      	ldrh	r3, [r3, #0]
   30d44:	9300      	str	r3, [sp, #0]
   30d46:	2300      	movs	r3, #0
   30d48:	2206      	movs	r2, #6
   30d4a:	4c1f      	ldr	r4, [pc, #124]	; (30dc8 <cycle+0x1e4>)
   30d4c:	47a0      	blx	r4
   30d4e:	0003      	movs	r3, r0
   30d50:	637b      	str	r3, [r7, #52]	; 0x34
   30d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30d54:	2b00      	cmp	r3, #0
   30d56:	dc03      	bgt.n	30d60 <cycle+0x17c>
                rc = FAILURE;
   30d58:	2301      	movs	r3, #1
   30d5a:	425b      	negs	r3, r3
   30d5c:	633b      	str	r3, [r7, #48]	; 0x30
   30d5e:	e00d      	b.n	30d7c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   30d60:	683a      	ldr	r2, [r7, #0]
   30d62:	6b79      	ldr	r1, [r7, #52]	; 0x34
   30d64:	687b      	ldr	r3, [r7, #4]
   30d66:	0018      	movs	r0, r3
   30d68:	4b18      	ldr	r3, [pc, #96]	; (30dcc <cycle+0x1e8>)
   30d6a:	4798      	blx	r3
   30d6c:	0003      	movs	r3, r0
   30d6e:	633b      	str	r3, [r7, #48]	; 0x30
   30d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d72:	2b00      	cmp	r3, #0
   30d74:	d002      	beq.n	30d7c <cycle+0x198>
                rc = FAILURE; // there was a problem
   30d76:	2301      	movs	r3, #1
   30d78:	425b      	negs	r3, r3
   30d7a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   30d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d7e:	3301      	adds	r3, #1
   30d80:	d106      	bne.n	30d90 <cycle+0x1ac>
                goto exit; // there was a problem
   30d82:	e00c      	b.n	30d9e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   30d84:	687b      	ldr	r3, [r7, #4]
   30d86:	2200      	movs	r2, #0
   30d88:	771a      	strb	r2, [r3, #28]
            break;
   30d8a:	e002      	b.n	30d92 <cycle+0x1ae>
            break;
   30d8c:	46c0      	nop			; (mov r8, r8)
   30d8e:	e000      	b.n	30d92 <cycle+0x1ae>
            break;
   30d90:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   30d92:	687b      	ldr	r3, [r7, #4]
   30d94:	0018      	movs	r0, r3
   30d96:	4b0f      	ldr	r3, [pc, #60]	; (30dd4 <cycle+0x1f0>)
   30d98:	4798      	blx	r3
   30d9a:	e000      	b.n	30d9e <cycle+0x1ba>
                goto exit;
   30d9c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   30d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30da0:	2b00      	cmp	r3, #0
   30da2:	d103      	bne.n	30dac <cycle+0x1c8>
        rc = packet_type;
   30da4:	232e      	movs	r3, #46	; 0x2e
   30da6:	18fb      	adds	r3, r7, r3
   30da8:	881b      	ldrh	r3, [r3, #0]
   30daa:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   30dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   30dae:	0018      	movs	r0, r3
   30db0:	46bd      	mov	sp, r7
   30db2:	b00f      	add	sp, #60	; 0x3c
   30db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30db6:	46c0      	nop			; (mov r8, r8)
   30db8:	00030899 	.word	0x00030899
   30dbc:	0003cc0c 	.word	0x0003cc0c
   30dc0:	0003215d 	.word	0x0003215d
   30dc4:	00030a55 	.word	0x00030a55
   30dc8:	00032955 	.word	0x00032955
   30dcc:	000306dd 	.word	0x000306dd
   30dd0:	00032261 	.word	0x00032261
   30dd4:	00030b41 	.word	0x00030b41

00030dd8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   30dd8:	b580      	push	{r7, lr}
   30dda:	b086      	sub	sp, #24
   30ddc:	af00      	add	r7, sp, #0
   30dde:	6078      	str	r0, [r7, #4]
   30de0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   30de2:	2300      	movs	r3, #0
   30de4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   30de6:	2308      	movs	r3, #8
   30de8:	18fb      	adds	r3, r7, r3
   30dea:	0018      	movs	r0, r3
   30dec:	4b11      	ldr	r3, [pc, #68]	; (30e34 <MQTTYield+0x5c>)
   30dee:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   30df0:	683a      	ldr	r2, [r7, #0]
   30df2:	2308      	movs	r3, #8
   30df4:	18fb      	adds	r3, r7, r3
   30df6:	0011      	movs	r1, r2
   30df8:	0018      	movs	r0, r3
   30dfa:	4b0f      	ldr	r3, [pc, #60]	; (30e38 <MQTTYield+0x60>)
   30dfc:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   30dfe:	2308      	movs	r3, #8
   30e00:	18fa      	adds	r2, r7, r3
   30e02:	687b      	ldr	r3, [r7, #4]
   30e04:	0011      	movs	r1, r2
   30e06:	0018      	movs	r0, r3
   30e08:	4b0c      	ldr	r3, [pc, #48]	; (30e3c <MQTTYield+0x64>)
   30e0a:	4798      	blx	r3
   30e0c:	0003      	movs	r3, r0
   30e0e:	3301      	adds	r3, #1
   30e10:	d103      	bne.n	30e1a <MQTTYield+0x42>
        {
            rc = FAILURE;
   30e12:	2301      	movs	r3, #1
   30e14:	425b      	negs	r3, r3
   30e16:	617b      	str	r3, [r7, #20]
            break;
   30e18:	e006      	b.n	30e28 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   30e1a:	2308      	movs	r3, #8
   30e1c:	18fb      	adds	r3, r7, r3
   30e1e:	0018      	movs	r0, r3
   30e20:	4b07      	ldr	r3, [pc, #28]	; (30e40 <MQTTYield+0x68>)
   30e22:	4798      	blx	r3
   30e24:	1e03      	subs	r3, r0, #0
   30e26:	d0ea      	beq.n	30dfe <MQTTYield+0x26>
        
    return rc;
   30e28:	697b      	ldr	r3, [r7, #20]
}
   30e2a:	0018      	movs	r0, r3
   30e2c:	46bd      	mov	sp, r7
   30e2e:	b006      	add	sp, #24
   30e30:	bd80      	pop	{r7, pc}
   30e32:	46c0      	nop			; (mov r8, r8)
   30e34:	00031565 	.word	0x00031565
   30e38:	000314ed 	.word	0x000314ed
   30e3c:	00030be5 	.word	0x00030be5
   30e40:	000314c1 	.word	0x000314c1

00030e44 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   30e44:	b580      	push	{r7, lr}
   30e46:	b086      	sub	sp, #24
   30e48:	af00      	add	r7, sp, #0
   30e4a:	60f8      	str	r0, [r7, #12]
   30e4c:	60b9      	str	r1, [r7, #8]
   30e4e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   30e50:	2301      	movs	r3, #1
   30e52:	425b      	negs	r3, r3
   30e54:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   30e56:	687b      	ldr	r3, [r7, #4]
   30e58:	0018      	movs	r0, r3
   30e5a:	4b0b      	ldr	r3, [pc, #44]	; (30e88 <waitfor+0x44>)
   30e5c:	4798      	blx	r3
   30e5e:	1e03      	subs	r3, r0, #0
   30e60:	d10c      	bne.n	30e7c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   30e62:	687a      	ldr	r2, [r7, #4]
   30e64:	68fb      	ldr	r3, [r7, #12]
   30e66:	0011      	movs	r1, r2
   30e68:	0018      	movs	r0, r3
   30e6a:	4b08      	ldr	r3, [pc, #32]	; (30e8c <waitfor+0x48>)
   30e6c:	4798      	blx	r3
   30e6e:	0003      	movs	r3, r0
   30e70:	617b      	str	r3, [r7, #20]
   30e72:	697a      	ldr	r2, [r7, #20]
   30e74:	68bb      	ldr	r3, [r7, #8]
   30e76:	429a      	cmp	r2, r3
   30e78:	d1ed      	bne.n	30e56 <waitfor+0x12>
   30e7a:	e000      	b.n	30e7e <waitfor+0x3a>
            break; // we timed out
   30e7c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   30e7e:	697b      	ldr	r3, [r7, #20]
}
   30e80:	0018      	movs	r0, r3
   30e82:	46bd      	mov	sp, r7
   30e84:	b006      	add	sp, #24
   30e86:	bd80      	pop	{r7, pc}
   30e88:	000314c1 	.word	0x000314c1
   30e8c:	00030be5 	.word	0x00030be5

00030e90 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   30e90:	b590      	push	{r4, r7, lr}
   30e92:	b09f      	sub	sp, #124	; 0x7c
   30e94:	af00      	add	r7, sp, #0
   30e96:	6078      	str	r0, [r7, #4]
   30e98:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   30e9a:	2301      	movs	r3, #1
   30e9c:	425b      	negs	r3, r3
   30e9e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   30ea0:	230c      	movs	r3, #12
   30ea2:	18fa      	adds	r2, r7, r3
   30ea4:	4b41      	ldr	r3, [pc, #260]	; (30fac <MQTTConnect+0x11c>)
   30ea6:	0010      	movs	r0, r2
   30ea8:	0019      	movs	r1, r3
   30eaa:	2358      	movs	r3, #88	; 0x58
   30eac:	001a      	movs	r2, r3
   30eae:	4b40      	ldr	r3, [pc, #256]	; (30fb0 <MQTTConnect+0x120>)
   30eb0:	4798      	blx	r3
    int len = 0;
   30eb2:	2300      	movs	r3, #0
   30eb4:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   30eb6:	687b      	ldr	r3, [r7, #4]
   30eb8:	6a1b      	ldr	r3, [r3, #32]
   30eba:	2b00      	cmp	r3, #0
   30ebc:	d166      	bne.n	30f8c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   30ebe:	2364      	movs	r3, #100	; 0x64
   30ec0:	18fb      	adds	r3, r7, r3
   30ec2:	0018      	movs	r0, r3
   30ec4:	4b3b      	ldr	r3, [pc, #236]	; (30fb4 <MQTTConnect+0x124>)
   30ec6:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   30ec8:	687b      	ldr	r3, [r7, #4]
   30eca:	685a      	ldr	r2, [r3, #4]
   30ecc:	2364      	movs	r3, #100	; 0x64
   30ece:	18fb      	adds	r3, r7, r3
   30ed0:	0011      	movs	r1, r2
   30ed2:	0018      	movs	r0, r3
   30ed4:	4b38      	ldr	r3, [pc, #224]	; (30fb8 <MQTTConnect+0x128>)
   30ed6:	4798      	blx	r3

    if (options == 0)
   30ed8:	683b      	ldr	r3, [r7, #0]
   30eda:	2b00      	cmp	r3, #0
   30edc:	d102      	bne.n	30ee4 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   30ede:	230c      	movs	r3, #12
   30ee0:	18fb      	adds	r3, r7, r3
   30ee2:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   30ee4:	683b      	ldr	r3, [r7, #0]
   30ee6:	8b1b      	ldrh	r3, [r3, #24]
   30ee8:	001a      	movs	r2, r3
   30eea:	687b      	ldr	r3, [r7, #4]
   30eec:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   30eee:	687b      	ldr	r3, [r7, #4]
   30ef0:	3354      	adds	r3, #84	; 0x54
   30ef2:	001a      	movs	r2, r3
   30ef4:	687b      	ldr	r3, [r7, #4]
   30ef6:	699b      	ldr	r3, [r3, #24]
   30ef8:	0019      	movs	r1, r3
   30efa:	0010      	movs	r0, r2
   30efc:	4b2f      	ldr	r3, [pc, #188]	; (30fbc <MQTTConnect+0x12c>)
   30efe:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   30f00:	687b      	ldr	r3, [r7, #4]
   30f02:	6918      	ldr	r0, [r3, #16]
   30f04:	687b      	ldr	r3, [r7, #4]
   30f06:	689b      	ldr	r3, [r3, #8]
   30f08:	0019      	movs	r1, r3
   30f0a:	683b      	ldr	r3, [r7, #0]
   30f0c:	001a      	movs	r2, r3
   30f0e:	4b2c      	ldr	r3, [pc, #176]	; (30fc0 <MQTTConnect+0x130>)
   30f10:	4798      	blx	r3
   30f12:	0003      	movs	r3, r0
   30f14:	673b      	str	r3, [r7, #112]	; 0x70
   30f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30f18:	2b00      	cmp	r3, #0
   30f1a:	dd39      	ble.n	30f90 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   30f1c:	2364      	movs	r3, #100	; 0x64
   30f1e:	18fa      	adds	r2, r7, r3
   30f20:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30f22:	687b      	ldr	r3, [r7, #4]
   30f24:	0018      	movs	r0, r3
   30f26:	4b27      	ldr	r3, [pc, #156]	; (30fc4 <MQTTConnect+0x134>)
   30f28:	4798      	blx	r3
   30f2a:	0003      	movs	r3, r0
   30f2c:	677b      	str	r3, [r7, #116]	; 0x74
   30f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30f30:	2b00      	cmp	r3, #0
   30f32:	d12f      	bne.n	30f94 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   30f34:	2364      	movs	r3, #100	; 0x64
   30f36:	18fa      	adds	r2, r7, r3
   30f38:	687b      	ldr	r3, [r7, #4]
   30f3a:	2102      	movs	r1, #2
   30f3c:	0018      	movs	r0, r3
   30f3e:	4b22      	ldr	r3, [pc, #136]	; (30fc8 <MQTTConnect+0x138>)
   30f40:	4798      	blx	r3
   30f42:	0003      	movs	r3, r0
   30f44:	2b02      	cmp	r3, #2
   30f46:	d11d      	bne.n	30f84 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   30f48:	230b      	movs	r3, #11
   30f4a:	18fb      	adds	r3, r7, r3
   30f4c:	22ff      	movs	r2, #255	; 0xff
   30f4e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   30f50:	230a      	movs	r3, #10
   30f52:	18fb      	adds	r3, r7, r3
   30f54:	2200      	movs	r2, #0
   30f56:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   30f58:	687b      	ldr	r3, [r7, #4]
   30f5a:	695a      	ldr	r2, [r3, #20]
   30f5c:	687b      	ldr	r3, [r7, #4]
   30f5e:	68db      	ldr	r3, [r3, #12]
   30f60:	210b      	movs	r1, #11
   30f62:	1879      	adds	r1, r7, r1
   30f64:	200a      	movs	r0, #10
   30f66:	1838      	adds	r0, r7, r0
   30f68:	4c18      	ldr	r4, [pc, #96]	; (30fcc <MQTTConnect+0x13c>)
   30f6a:	47a0      	blx	r4
   30f6c:	0003      	movs	r3, r0
   30f6e:	2b01      	cmp	r3, #1
   30f70:	d104      	bne.n	30f7c <MQTTConnect+0xec>
            rc = connack_rc;
   30f72:	230b      	movs	r3, #11
   30f74:	18fb      	adds	r3, r7, r3
   30f76:	781b      	ldrb	r3, [r3, #0]
   30f78:	677b      	str	r3, [r7, #116]	; 0x74
   30f7a:	e00c      	b.n	30f96 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   30f7c:	2301      	movs	r3, #1
   30f7e:	425b      	negs	r3, r3
   30f80:	677b      	str	r3, [r7, #116]	; 0x74
   30f82:	e008      	b.n	30f96 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   30f84:	2301      	movs	r3, #1
   30f86:	425b      	negs	r3, r3
   30f88:	677b      	str	r3, [r7, #116]	; 0x74
   30f8a:	e004      	b.n	30f96 <MQTTConnect+0x106>
		goto exit;
   30f8c:	46c0      	nop			; (mov r8, r8)
   30f8e:	e002      	b.n	30f96 <MQTTConnect+0x106>
        goto exit;
   30f90:	46c0      	nop			; (mov r8, r8)
   30f92:	e000      	b.n	30f96 <MQTTConnect+0x106>
        goto exit; // there was a problem
   30f94:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   30f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30f98:	2b00      	cmp	r3, #0
   30f9a:	d102      	bne.n	30fa2 <MQTTConnect+0x112>
        c->isconnected = 1;
   30f9c:	687b      	ldr	r3, [r7, #4]
   30f9e:	2201      	movs	r2, #1
   30fa0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   30fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   30fa4:	0018      	movs	r0, r3
   30fa6:	46bd      	mov	sp, r7
   30fa8:	b01f      	add	sp, #124	; 0x7c
   30faa:	bd90      	pop	{r4, r7, pc}
   30fac:	0003cc44 	.word	0x0003cc44
   30fb0:	000377e9 	.word	0x000377e9
   30fb4:	00031565 	.word	0x00031565
   30fb8:	000314ed 	.word	0x000314ed
   30fbc:	00031515 	.word	0x00031515
   30fc0:	00031d41 	.word	0x00031d41
   30fc4:	000306dd 	.word	0x000306dd
   30fc8:	00030e45 	.word	0x00030e45
   30fcc:	00031fbd 	.word	0x00031fbd

00030fd0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   30fd0:	b5b0      	push	{r4, r5, r7, lr}
   30fd2:	b096      	sub	sp, #88	; 0x58
   30fd4:	af04      	add	r7, sp, #16
   30fd6:	60f8      	str	r0, [r7, #12]
   30fd8:	60b9      	str	r1, [r7, #8]
   30fda:	603b      	str	r3, [r7, #0]
   30fdc:	1dfb      	adds	r3, r7, #7
   30fde:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   30fe0:	2301      	movs	r3, #1
   30fe2:	425b      	negs	r3, r3
   30fe4:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   30fe6:	2300      	movs	r3, #0
   30fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   30fea:	2324      	movs	r3, #36	; 0x24
   30fec:	18fb      	adds	r3, r7, r3
   30fee:	2200      	movs	r2, #0
   30ff0:	601a      	str	r2, [r3, #0]
   30ff2:	2324      	movs	r3, #36	; 0x24
   30ff4:	18fb      	adds	r3, r7, r3
   30ff6:	2200      	movs	r2, #0
   30ff8:	605a      	str	r2, [r3, #4]
   30ffa:	2324      	movs	r3, #36	; 0x24
   30ffc:	18fb      	adds	r3, r7, r3
   30ffe:	2200      	movs	r2, #0
   31000:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   31002:	1dfb      	adds	r3, r7, #7
   31004:	781b      	ldrb	r3, [r3, #0]
   31006:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   31008:	2324      	movs	r3, #36	; 0x24
   3100a:	18fb      	adds	r3, r7, r3
   3100c:	68ba      	ldr	r2, [r7, #8]
   3100e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   31010:	68fb      	ldr	r3, [r7, #12]
   31012:	6a1b      	ldr	r3, [r3, #32]
   31014:	2b00      	cmp	r3, #0
   31016:	d100      	bne.n	3101a <MQTTSubscribe+0x4a>
   31018:	e088      	b.n	3112c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   3101a:	2330      	movs	r3, #48	; 0x30
   3101c:	18fb      	adds	r3, r7, r3
   3101e:	0018      	movs	r0, r3
   31020:	4b47      	ldr	r3, [pc, #284]	; (31140 <MQTTSubscribe+0x170>)
   31022:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31024:	68fb      	ldr	r3, [r7, #12]
   31026:	685a      	ldr	r2, [r3, #4]
   31028:	2330      	movs	r3, #48	; 0x30
   3102a:	18fb      	adds	r3, r7, r3
   3102c:	0011      	movs	r1, r2
   3102e:	0018      	movs	r0, r3
   31030:	4b44      	ldr	r3, [pc, #272]	; (31144 <MQTTSubscribe+0x174>)
   31032:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   31034:	68fb      	ldr	r3, [r7, #12]
   31036:	691c      	ldr	r4, [r3, #16]
   31038:	68fb      	ldr	r3, [r7, #12]
   3103a:	689b      	ldr	r3, [r3, #8]
   3103c:	001d      	movs	r5, r3
   3103e:	68fb      	ldr	r3, [r7, #12]
   31040:	0018      	movs	r0, r3
   31042:	4b41      	ldr	r3, [pc, #260]	; (31148 <MQTTSubscribe+0x178>)
   31044:	4798      	blx	r3
   31046:	0003      	movs	r3, r0
   31048:	b29a      	uxth	r2, r3
   3104a:	2320      	movs	r3, #32
   3104c:	18fb      	adds	r3, r7, r3
   3104e:	9302      	str	r3, [sp, #8]
   31050:	2324      	movs	r3, #36	; 0x24
   31052:	18fb      	adds	r3, r7, r3
   31054:	9301      	str	r3, [sp, #4]
   31056:	2301      	movs	r3, #1
   31058:	9300      	str	r3, [sp, #0]
   3105a:	0013      	movs	r3, r2
   3105c:	2200      	movs	r2, #0
   3105e:	0029      	movs	r1, r5
   31060:	0020      	movs	r0, r4
   31062:	4c3a      	ldr	r4, [pc, #232]	; (3114c <MQTTSubscribe+0x17c>)
   31064:	47a0      	blx	r4
   31066:	0003      	movs	r3, r0
   31068:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   3106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3106c:	2b00      	cmp	r3, #0
   3106e:	dd5f      	ble.n	31130 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31070:	2330      	movs	r3, #48	; 0x30
   31072:	18fa      	adds	r2, r7, r3
   31074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   31076:	68fb      	ldr	r3, [r7, #12]
   31078:	0018      	movs	r0, r3
   3107a:	4b35      	ldr	r3, [pc, #212]	; (31150 <MQTTSubscribe+0x180>)
   3107c:	4798      	blx	r3
   3107e:	0003      	movs	r3, r0
   31080:	647b      	str	r3, [r7, #68]	; 0x44
   31082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   31084:	2b00      	cmp	r3, #0
   31086:	d155      	bne.n	31134 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   31088:	2330      	movs	r3, #48	; 0x30
   3108a:	18fa      	adds	r2, r7, r3
   3108c:	68fb      	ldr	r3, [r7, #12]
   3108e:	2109      	movs	r1, #9
   31090:	0018      	movs	r0, r3
   31092:	4b30      	ldr	r3, [pc, #192]	; (31154 <MQTTSubscribe+0x184>)
   31094:	4798      	blx	r3
   31096:	0003      	movs	r3, r0
   31098:	2b09      	cmp	r3, #9
   3109a:	d143      	bne.n	31124 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   3109c:	2300      	movs	r3, #0
   3109e:	61fb      	str	r3, [r7, #28]
   310a0:	2301      	movs	r3, #1
   310a2:	425b      	negs	r3, r3
   310a4:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   310a6:	68fb      	ldr	r3, [r7, #12]
   310a8:	695a      	ldr	r2, [r3, #20]
   310aa:	68fb      	ldr	r3, [r7, #12]
   310ac:	68db      	ldr	r3, [r3, #12]
   310ae:	001c      	movs	r4, r3
   310b0:	2318      	movs	r3, #24
   310b2:	18fb      	adds	r3, r7, r3
   310b4:	211c      	movs	r1, #28
   310b6:	1879      	adds	r1, r7, r1
   310b8:	2016      	movs	r0, #22
   310ba:	1838      	adds	r0, r7, r0
   310bc:	9401      	str	r4, [sp, #4]
   310be:	9200      	str	r2, [sp, #0]
   310c0:	000a      	movs	r2, r1
   310c2:	2101      	movs	r1, #1
   310c4:	4c24      	ldr	r4, [pc, #144]	; (31158 <MQTTSubscribe+0x188>)
   310c6:	47a0      	blx	r4
   310c8:	0003      	movs	r3, r0
   310ca:	2b01      	cmp	r3, #1
   310cc:	d101      	bne.n	310d2 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   310ce:	69bb      	ldr	r3, [r7, #24]
   310d0:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   310d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   310d4:	2b80      	cmp	r3, #128	; 0x80
   310d6:	d02e      	beq.n	31136 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   310d8:	2300      	movs	r3, #0
   310da:	643b      	str	r3, [r7, #64]	; 0x40
   310dc:	e01e      	b.n	3111c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   310de:	68fa      	ldr	r2, [r7, #12]
   310e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   310e2:	3304      	adds	r3, #4
   310e4:	00db      	lsls	r3, r3, #3
   310e6:	18d3      	adds	r3, r2, r3
   310e8:	3304      	adds	r3, #4
   310ea:	681b      	ldr	r3, [r3, #0]
   310ec:	2b00      	cmp	r3, #0
   310ee:	d112      	bne.n	31116 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   310f0:	68fa      	ldr	r2, [r7, #12]
   310f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   310f4:	3304      	adds	r3, #4
   310f6:	00db      	lsls	r3, r3, #3
   310f8:	18d3      	adds	r3, r2, r3
   310fa:	3304      	adds	r3, #4
   310fc:	68ba      	ldr	r2, [r7, #8]
   310fe:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   31100:	68fa      	ldr	r2, [r7, #12]
   31102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31104:	3304      	adds	r3, #4
   31106:	00db      	lsls	r3, r3, #3
   31108:	18d3      	adds	r3, r2, r3
   3110a:	3308      	adds	r3, #8
   3110c:	683a      	ldr	r2, [r7, #0]
   3110e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   31110:	2300      	movs	r3, #0
   31112:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   31114:	e00f      	b.n	31136 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31118:	3301      	adds	r3, #1
   3111a:	643b      	str	r3, [r7, #64]	; 0x40
   3111c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3111e:	2b04      	cmp	r3, #4
   31120:	dddd      	ble.n	310de <MQTTSubscribe+0x10e>
   31122:	e008      	b.n	31136 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   31124:	2301      	movs	r3, #1
   31126:	425b      	negs	r3, r3
   31128:	647b      	str	r3, [r7, #68]	; 0x44
   3112a:	e004      	b.n	31136 <MQTTSubscribe+0x166>
		goto exit;
   3112c:	46c0      	nop			; (mov r8, r8)
   3112e:	e002      	b.n	31136 <MQTTSubscribe+0x166>
        goto exit;
   31130:	46c0      	nop			; (mov r8, r8)
   31132:	e000      	b.n	31136 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   31134:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   31136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   31138:	0018      	movs	r0, r3
   3113a:	46bd      	mov	sp, r7
   3113c:	b012      	add	sp, #72	; 0x48
   3113e:	bdb0      	pop	{r4, r5, r7, pc}
   31140:	00031565 	.word	0x00031565
   31144:	000314ed 	.word	0x000314ed
   31148:	000306ad 	.word	0x000306ad
   3114c:	00032a9d 	.word	0x00032a9d
   31150:	000306dd 	.word	0x000306dd
   31154:	00030e45 	.word	0x00030e45
   31158:	00032bed 	.word	0x00032bed

0003115c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   3115c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3115e:	46ce      	mov	lr, r9
   31160:	4647      	mov	r7, r8
   31162:	b580      	push	{r7, lr}
   31164:	b097      	sub	sp, #92	; 0x5c
   31166:	af08      	add	r7, sp, #32
   31168:	60f8      	str	r0, [r7, #12]
   3116a:	60b9      	str	r1, [r7, #8]
   3116c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   3116e:	2301      	movs	r3, #1
   31170:	425b      	negs	r3, r3
   31172:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   31174:	2318      	movs	r3, #24
   31176:	18fb      	adds	r3, r7, r3
   31178:	2200      	movs	r2, #0
   3117a:	601a      	str	r2, [r3, #0]
   3117c:	2318      	movs	r3, #24
   3117e:	18fb      	adds	r3, r7, r3
   31180:	2200      	movs	r2, #0
   31182:	605a      	str	r2, [r3, #4]
   31184:	2318      	movs	r3, #24
   31186:	18fb      	adds	r3, r7, r3
   31188:	2200      	movs	r2, #0
   3118a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   3118c:	2318      	movs	r3, #24
   3118e:	18fb      	adds	r3, r7, r3
   31190:	68ba      	ldr	r2, [r7, #8]
   31192:	601a      	str	r2, [r3, #0]
    int len = 0;
   31194:	2300      	movs	r3, #0
   31196:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   31198:	68fb      	ldr	r3, [r7, #12]
   3119a:	6a1b      	ldr	r3, [r3, #32]
   3119c:	2b00      	cmp	r3, #0
   3119e:	d100      	bne.n	311a2 <MQTTPublish+0x46>
   311a0:	e0a0      	b.n	312e4 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   311a2:	2324      	movs	r3, #36	; 0x24
   311a4:	18fb      	adds	r3, r7, r3
   311a6:	0018      	movs	r0, r3
   311a8:	4b55      	ldr	r3, [pc, #340]	; (31300 <MQTTPublish+0x1a4>)
   311aa:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   311ac:	68fb      	ldr	r3, [r7, #12]
   311ae:	685a      	ldr	r2, [r3, #4]
   311b0:	2324      	movs	r3, #36	; 0x24
   311b2:	18fb      	adds	r3, r7, r3
   311b4:	0011      	movs	r1, r2
   311b6:	0018      	movs	r0, r3
   311b8:	4b52      	ldr	r3, [pc, #328]	; (31304 <MQTTPublish+0x1a8>)
   311ba:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   311bc:	687b      	ldr	r3, [r7, #4]
   311be:	781b      	ldrb	r3, [r3, #0]
   311c0:	2b01      	cmp	r3, #1
   311c2:	d003      	beq.n	311cc <MQTTPublish+0x70>
   311c4:	687b      	ldr	r3, [r7, #4]
   311c6:	781b      	ldrb	r3, [r3, #0]
   311c8:	2b02      	cmp	r3, #2
   311ca:	d107      	bne.n	311dc <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   311cc:	68fb      	ldr	r3, [r7, #12]
   311ce:	0018      	movs	r0, r3
   311d0:	4b4d      	ldr	r3, [pc, #308]	; (31308 <MQTTPublish+0x1ac>)
   311d2:	4798      	blx	r3
   311d4:	0003      	movs	r3, r0
   311d6:	b29a      	uxth	r2, r3
   311d8:	687b      	ldr	r3, [r7, #4]
   311da:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   311dc:	68fb      	ldr	r3, [r7, #12]
   311de:	691b      	ldr	r3, [r3, #16]
   311e0:	469c      	mov	ip, r3
   311e2:	68fb      	ldr	r3, [r7, #12]
   311e4:	689b      	ldr	r3, [r3, #8]
   311e6:	001d      	movs	r5, r3
   311e8:	687b      	ldr	r3, [r7, #4]
   311ea:	781b      	ldrb	r3, [r3, #0]
   311ec:	001e      	movs	r6, r3
   311ee:	687b      	ldr	r3, [r7, #4]
   311f0:	785b      	ldrb	r3, [r3, #1]
   311f2:	4698      	mov	r8, r3
   311f4:	687b      	ldr	r3, [r7, #4]
   311f6:	889b      	ldrh	r3, [r3, #4]
   311f8:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   311fa:	687b      	ldr	r3, [r7, #4]
   311fc:	689a      	ldr	r2, [r3, #8]
   311fe:	687b      	ldr	r3, [r7, #4]
   31200:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   31202:	9306      	str	r3, [sp, #24]
   31204:	9205      	str	r2, [sp, #20]
   31206:	2318      	movs	r3, #24
   31208:	18fa      	adds	r2, r7, r3
   3120a:	2308      	movs	r3, #8
   3120c:	446b      	add	r3, sp
   3120e:	ca13      	ldmia	r2!, {r0, r1, r4}
   31210:	c313      	stmia	r3!, {r0, r1, r4}
   31212:	464b      	mov	r3, r9
   31214:	9301      	str	r3, [sp, #4]
   31216:	4643      	mov	r3, r8
   31218:	9300      	str	r3, [sp, #0]
   3121a:	0033      	movs	r3, r6
   3121c:	2200      	movs	r2, #0
   3121e:	0029      	movs	r1, r5
   31220:	4660      	mov	r0, ip
   31222:	4c3a      	ldr	r4, [pc, #232]	; (3130c <MQTTPublish+0x1b0>)
   31224:	47a0      	blx	r4
   31226:	0003      	movs	r3, r0
   31228:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   3122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3122c:	2b00      	cmp	r3, #0
   3122e:	dd5b      	ble.n	312e8 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31230:	2324      	movs	r3, #36	; 0x24
   31232:	18fa      	adds	r2, r7, r3
   31234:	6b39      	ldr	r1, [r7, #48]	; 0x30
   31236:	68fb      	ldr	r3, [r7, #12]
   31238:	0018      	movs	r0, r3
   3123a:	4b35      	ldr	r3, [pc, #212]	; (31310 <MQTTPublish+0x1b4>)
   3123c:	4798      	blx	r3
   3123e:	0003      	movs	r3, r0
   31240:	637b      	str	r3, [r7, #52]	; 0x34
   31242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31244:	2b00      	cmp	r3, #0
   31246:	d151      	bne.n	312ec <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   31248:	687b      	ldr	r3, [r7, #4]
   3124a:	781b      	ldrb	r3, [r3, #0]
   3124c:	2b01      	cmp	r3, #1
   3124e:	d122      	bne.n	31296 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   31250:	2324      	movs	r3, #36	; 0x24
   31252:	18fa      	adds	r2, r7, r3
   31254:	68fb      	ldr	r3, [r7, #12]
   31256:	2104      	movs	r1, #4
   31258:	0018      	movs	r0, r3
   3125a:	4b2e      	ldr	r3, [pc, #184]	; (31314 <MQTTPublish+0x1b8>)
   3125c:	4798      	blx	r3
   3125e:	0003      	movs	r3, r0
   31260:	2b04      	cmp	r3, #4
   31262:	d114      	bne.n	3128e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   31264:	68fb      	ldr	r3, [r7, #12]
   31266:	695c      	ldr	r4, [r3, #20]
   31268:	68fb      	ldr	r3, [r7, #12]
   3126a:	68db      	ldr	r3, [r3, #12]
   3126c:	2216      	movs	r2, #22
   3126e:	18ba      	adds	r2, r7, r2
   31270:	2115      	movs	r1, #21
   31272:	1879      	adds	r1, r7, r1
   31274:	2014      	movs	r0, #20
   31276:	1838      	adds	r0, r7, r0
   31278:	9300      	str	r3, [sp, #0]
   3127a:	0023      	movs	r3, r4
   3127c:	4c26      	ldr	r4, [pc, #152]	; (31318 <MQTTPublish+0x1bc>)
   3127e:	47a0      	blx	r4
   31280:	0003      	movs	r3, r0
   31282:	2b01      	cmp	r3, #1
   31284:	d033      	beq.n	312ee <MQTTPublish+0x192>
                rc = FAILURE;
   31286:	2301      	movs	r3, #1
   31288:	425b      	negs	r3, r3
   3128a:	637b      	str	r3, [r7, #52]	; 0x34
   3128c:	e02f      	b.n	312ee <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   3128e:	2301      	movs	r3, #1
   31290:	425b      	negs	r3, r3
   31292:	637b      	str	r3, [r7, #52]	; 0x34
   31294:	e02b      	b.n	312ee <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   31296:	687b      	ldr	r3, [r7, #4]
   31298:	781b      	ldrb	r3, [r3, #0]
   3129a:	2b02      	cmp	r3, #2
   3129c:	d127      	bne.n	312ee <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   3129e:	2324      	movs	r3, #36	; 0x24
   312a0:	18fa      	adds	r2, r7, r3
   312a2:	68fb      	ldr	r3, [r7, #12]
   312a4:	2107      	movs	r1, #7
   312a6:	0018      	movs	r0, r3
   312a8:	4b1a      	ldr	r3, [pc, #104]	; (31314 <MQTTPublish+0x1b8>)
   312aa:	4798      	blx	r3
   312ac:	0003      	movs	r3, r0
   312ae:	2b07      	cmp	r3, #7
   312b0:	d114      	bne.n	312dc <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   312b2:	68fb      	ldr	r3, [r7, #12]
   312b4:	695c      	ldr	r4, [r3, #20]
   312b6:	68fb      	ldr	r3, [r7, #12]
   312b8:	68db      	ldr	r3, [r3, #12]
   312ba:	2212      	movs	r2, #18
   312bc:	18ba      	adds	r2, r7, r2
   312be:	2111      	movs	r1, #17
   312c0:	1879      	adds	r1, r7, r1
   312c2:	2010      	movs	r0, #16
   312c4:	1838      	adds	r0, r7, r0
   312c6:	9300      	str	r3, [sp, #0]
   312c8:	0023      	movs	r3, r4
   312ca:	4c13      	ldr	r4, [pc, #76]	; (31318 <MQTTPublish+0x1bc>)
   312cc:	47a0      	blx	r4
   312ce:	0003      	movs	r3, r0
   312d0:	2b01      	cmp	r3, #1
   312d2:	d00c      	beq.n	312ee <MQTTPublish+0x192>
                rc = FAILURE;
   312d4:	2301      	movs	r3, #1
   312d6:	425b      	negs	r3, r3
   312d8:	637b      	str	r3, [r7, #52]	; 0x34
   312da:	e008      	b.n	312ee <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   312dc:	2301      	movs	r3, #1
   312de:	425b      	negs	r3, r3
   312e0:	637b      	str	r3, [r7, #52]	; 0x34
   312e2:	e004      	b.n	312ee <MQTTPublish+0x192>
		goto exit;
   312e4:	46c0      	nop			; (mov r8, r8)
   312e6:	e002      	b.n	312ee <MQTTPublish+0x192>
        goto exit;
   312e8:	46c0      	nop			; (mov r8, r8)
   312ea:	e000      	b.n	312ee <MQTTPublish+0x192>
        goto exit; // there was a problem
   312ec:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   312ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   312f0:	0018      	movs	r0, r3
   312f2:	46bd      	mov	sp, r7
   312f4:	b00f      	add	sp, #60	; 0x3c
   312f6:	bc0c      	pop	{r2, r3}
   312f8:	4690      	mov	r8, r2
   312fa:	4699      	mov	r9, r3
   312fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   312fe:	46c0      	nop			; (mov r8, r8)
   31300:	00031565 	.word	0x00031565
   31304:	000314ed 	.word	0x000314ed
   31308:	000306ad 	.word	0x000306ad
   3130c:	000327e9 	.word	0x000327e9
   31310:	000306dd 	.word	0x000306dd
   31314:	00030e45 	.word	0x00030e45
   31318:	00032261 	.word	0x00032261

0003131c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   3131c:	b580      	push	{r7, lr}
   3131e:	b088      	sub	sp, #32
   31320:	af00      	add	r7, sp, #0
   31322:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   31324:	2301      	movs	r3, #1
   31326:	425b      	negs	r3, r3
   31328:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   3132a:	2300      	movs	r3, #0
   3132c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   3132e:	230c      	movs	r3, #12
   31330:	18fb      	adds	r3, r7, r3
   31332:	0018      	movs	r0, r3
   31334:	4b13      	ldr	r3, [pc, #76]	; (31384 <MQTTDisconnect+0x68>)
   31336:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31338:	687b      	ldr	r3, [r7, #4]
   3133a:	685a      	ldr	r2, [r3, #4]
   3133c:	230c      	movs	r3, #12
   3133e:	18fb      	adds	r3, r7, r3
   31340:	0011      	movs	r1, r2
   31342:	0018      	movs	r0, r3
   31344:	4b10      	ldr	r3, [pc, #64]	; (31388 <MQTTDisconnect+0x6c>)
   31346:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   31348:	687b      	ldr	r3, [r7, #4]
   3134a:	691a      	ldr	r2, [r3, #16]
   3134c:	687b      	ldr	r3, [r7, #4]
   3134e:	689b      	ldr	r3, [r3, #8]
   31350:	0019      	movs	r1, r3
   31352:	0010      	movs	r0, r2
   31354:	4b0d      	ldr	r3, [pc, #52]	; (3138c <MQTTDisconnect+0x70>)
   31356:	4798      	blx	r3
   31358:	0003      	movs	r3, r0
   3135a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   3135c:	69bb      	ldr	r3, [r7, #24]
   3135e:	2b00      	cmp	r3, #0
   31360:	dd08      	ble.n	31374 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   31362:	230c      	movs	r3, #12
   31364:	18fa      	adds	r2, r7, r3
   31366:	69b9      	ldr	r1, [r7, #24]
   31368:	687b      	ldr	r3, [r7, #4]
   3136a:	0018      	movs	r0, r3
   3136c:	4b08      	ldr	r3, [pc, #32]	; (31390 <MQTTDisconnect+0x74>)
   3136e:	4798      	blx	r3
   31370:	0003      	movs	r3, r0
   31372:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   31374:	687b      	ldr	r3, [r7, #4]
   31376:	2200      	movs	r2, #0
   31378:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   3137a:	69fb      	ldr	r3, [r7, #28]
}
   3137c:	0018      	movs	r0, r3
   3137e:	46bd      	mov	sp, r7
   31380:	b008      	add	sp, #32
   31382:	bd80      	pop	{r7, pc}
   31384:	00031565 	.word	0x00031565
   31388:	000314ed 	.word	0x000314ed
   3138c:	00032115 	.word	0x00032115
   31390:	000306dd 	.word	0x000306dd

00031394 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   31394:	b580      	push	{r7, lr}
   31396:	b084      	sub	sp, #16
   31398:	af00      	add	r7, sp, #0
   3139a:	0002      	movs	r2, r0
   3139c:	1dfb      	adds	r3, r7, #7
   3139e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   313a0:	2300      	movs	r3, #0
   313a2:	60fb      	str	r3, [r7, #12]
   313a4:	e01c      	b.n	313e0 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   313a6:	4a12      	ldr	r2, [pc, #72]	; (313f0 <isMQTTSocket+0x5c>)
   313a8:	68fb      	ldr	r3, [r7, #12]
   313aa:	2164      	movs	r1, #100	; 0x64
   313ac:	434b      	muls	r3, r1
   313ae:	18d3      	adds	r3, r2, r3
   313b0:	3360      	adds	r3, #96	; 0x60
   313b2:	681b      	ldr	r3, [r3, #0]
   313b4:	2b00      	cmp	r3, #0
   313b6:	d010      	beq.n	313da <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   313b8:	4a0d      	ldr	r2, [pc, #52]	; (313f0 <isMQTTSocket+0x5c>)
   313ba:	68fb      	ldr	r3, [r7, #12]
   313bc:	2164      	movs	r1, #100	; 0x64
   313be:	434b      	muls	r3, r1
   313c0:	18d3      	adds	r3, r2, r3
   313c2:	3360      	adds	r3, #96	; 0x60
   313c4:	681b      	ldr	r3, [r3, #0]
   313c6:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   313c8:	68bb      	ldr	r3, [r7, #8]
   313ca:	6a1a      	ldr	r2, [r3, #32]
   313cc:	1dfb      	adds	r3, r7, #7
   313ce:	781b      	ldrb	r3, [r3, #0]
   313d0:	b25b      	sxtb	r3, r3
   313d2:	429a      	cmp	r2, r3
   313d4:	d101      	bne.n	313da <isMQTTSocket+0x46>
				return true;
   313d6:	2301      	movs	r3, #1
   313d8:	e006      	b.n	313e8 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   313da:	68fb      	ldr	r3, [r7, #12]
   313dc:	3301      	adds	r3, #1
   313de:	60fb      	str	r3, [r7, #12]
   313e0:	68fb      	ldr	r3, [r7, #12]
   313e2:	2b06      	cmp	r3, #6
   313e4:	d9df      	bls.n	313a6 <isMQTTSocket+0x12>
		}
	}
	return false;
   313e6:	2300      	movs	r3, #0
}
   313e8:	0018      	movs	r0, r3
   313ea:	46bd      	mov	sp, r7
   313ec:	b004      	add	sp, #16
   313ee:	bd80      	pop	{r7, pc}
   313f0:	20004294 	.word	0x20004294

000313f4 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   313f4:	b580      	push	{r7, lr}
   313f6:	b082      	sub	sp, #8
   313f8:	af00      	add	r7, sp, #0
   313fa:	6078      	str	r0, [r7, #4]
   313fc:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   313fe:	4b0d      	ldr	r3, [pc, #52]	; (31434 <dnsResolveCallback+0x40>)
   31400:	781b      	ldrb	r3, [r3, #0]
   31402:	2201      	movs	r2, #1
   31404:	4053      	eors	r3, r2
   31406:	b2db      	uxtb	r3, r3
   31408:	2b00      	cmp	r3, #0
   3140a:	d00e      	beq.n	3142a <dnsResolveCallback+0x36>
   3140c:	4b0a      	ldr	r3, [pc, #40]	; (31438 <dnsResolveCallback+0x44>)
   3140e:	681b      	ldr	r3, [r3, #0]
   31410:	687a      	ldr	r2, [r7, #4]
   31412:	0011      	movs	r1, r2
   31414:	0018      	movs	r0, r3
   31416:	4b09      	ldr	r3, [pc, #36]	; (3143c <dnsResolveCallback+0x48>)
   31418:	4798      	blx	r3
   3141a:	1e03      	subs	r3, r0, #0
   3141c:	d105      	bne.n	3142a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   3141e:	683a      	ldr	r2, [r7, #0]
   31420:	4b07      	ldr	r3, [pc, #28]	; (31440 <dnsResolveCallback+0x4c>)
   31422:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   31424:	4b03      	ldr	r3, [pc, #12]	; (31434 <dnsResolveCallback+0x40>)
   31426:	2201      	movs	r2, #1
   31428:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   3142a:	46c0      	nop			; (mov r8, r8)
   3142c:	46bd      	mov	sp, r7
   3142e:	b002      	add	sp, #8
   31430:	bd80      	pop	{r7, pc}
   31432:	46c0      	nop			; (mov r8, r8)
   31434:	20004184 	.word	0x20004184
   31438:	20004290 	.word	0x20004290
   3143c:	00037b77 	.word	0x00037b77
   31440:	2000417c 	.word	0x2000417c

00031444 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   31444:	b580      	push	{r7, lr}
   31446:	b084      	sub	sp, #16
   31448:	af00      	add	r7, sp, #0
   3144a:	603a      	str	r2, [r7, #0]
   3144c:	1dfb      	adds	r3, r7, #7
   3144e:	1c02      	adds	r2, r0, #0
   31450:	701a      	strb	r2, [r3, #0]
   31452:	1dbb      	adds	r3, r7, #6
   31454:	1c0a      	adds	r2, r1, #0
   31456:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   31458:	1dfb      	adds	r3, r7, #7
   3145a:	781b      	ldrb	r3, [r3, #0]
   3145c:	b25b      	sxtb	r3, r3
   3145e:	0018      	movs	r0, r3
   31460:	4b12      	ldr	r3, [pc, #72]	; (314ac <tcpClientSocketEventHandler+0x68>)
   31462:	4798      	blx	r3
   31464:	1e03      	subs	r3, r0, #0
   31466:	d01c      	beq.n	314a2 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   31468:	1dbb      	adds	r3, r7, #6
   3146a:	781b      	ldrb	r3, [r3, #0]
   3146c:	2b06      	cmp	r3, #6
   3146e:	d00c      	beq.n	3148a <tcpClientSocketEventHandler+0x46>
   31470:	2b07      	cmp	r3, #7
   31472:	d006      	beq.n	31482 <tcpClientSocketEventHandler+0x3e>
   31474:	2b05      	cmp	r3, #5
   31476:	d000      	beq.n	3147a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   31478:	e013      	b.n	314a2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   3147a:	4b0d      	ldr	r3, [pc, #52]	; (314b0 <tcpClientSocketEventHandler+0x6c>)
   3147c:	2201      	movs	r2, #1
   3147e:	701a      	strb	r2, [r3, #0]
			break;
   31480:	e00f      	b.n	314a2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   31482:	4b0c      	ldr	r3, [pc, #48]	; (314b4 <tcpClientSocketEventHandler+0x70>)
   31484:	2201      	movs	r2, #1
   31486:	701a      	strb	r2, [r3, #0]
			break;
   31488:	e00b      	b.n	314a2 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   3148a:	683b      	ldr	r3, [r7, #0]
   3148c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   3148e:	68fb      	ldr	r3, [r7, #12]
   31490:	2204      	movs	r2, #4
   31492:	5e9b      	ldrsh	r3, [r3, r2]
   31494:	001a      	movs	r2, r3
   31496:	4b08      	ldr	r3, [pc, #32]	; (314b8 <tcpClientSocketEventHandler+0x74>)
   31498:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   3149a:	4b08      	ldr	r3, [pc, #32]	; (314bc <tcpClientSocketEventHandler+0x78>)
   3149c:	2201      	movs	r2, #1
   3149e:	701a      	strb	r2, [r3, #0]
			break;
   314a0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   314a2:	46c0      	nop			; (mov r8, r8)
   314a4:	46bd      	mov	sp, r7
   314a6:	b004      	add	sp, #16
   314a8:	bd80      	pop	{r7, pc}
   314aa:	46c0      	nop			; (mov r8, r8)
   314ac:	00031395 	.word	0x00031395
   314b0:	20004185 	.word	0x20004185
   314b4:	20004186 	.word	0x20004186
   314b8:	20004180 	.word	0x20004180
   314bc:	20004187 	.word	0x20004187

000314c0 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   314c0:	b580      	push	{r7, lr}
   314c2:	b082      	sub	sp, #8
   314c4:	af00      	add	r7, sp, #0
   314c6:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   314c8:	687b      	ldr	r3, [r7, #4]
   314ca:	3304      	adds	r3, #4
   314cc:	687a      	ldr	r2, [r7, #4]
   314ce:	0011      	movs	r1, r2
   314d0:	0018      	movs	r0, r3
   314d2:	4b05      	ldr	r3, [pc, #20]	; (314e8 <TimerIsExpired+0x28>)
   314d4:	4798      	blx	r3
   314d6:	0003      	movs	r3, r0
   314d8:	3b01      	subs	r3, #1
   314da:	425a      	negs	r2, r3
   314dc:	4153      	adcs	r3, r2
   314de:	b2db      	uxtb	r3, r3
}
   314e0:	0018      	movs	r0, r3
   314e2:	46bd      	mov	sp, r7
   314e4:	b002      	add	sp, #8
   314e6:	bd80      	pop	{r7, pc}
   314e8:	0001ed71 	.word	0x0001ed71

000314ec <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   314ec:	b580      	push	{r7, lr}
   314ee:	b082      	sub	sp, #8
   314f0:	af00      	add	r7, sp, #0
   314f2:	6078      	str	r0, [r7, #4]
   314f4:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   314f6:	687b      	ldr	r3, [r7, #4]
   314f8:	683a      	ldr	r2, [r7, #0]
   314fa:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   314fc:	687b      	ldr	r3, [r7, #4]
   314fe:	3304      	adds	r3, #4
   31500:	0018      	movs	r0, r3
   31502:	4b03      	ldr	r3, [pc, #12]	; (31510 <TimerCountdownMS+0x24>)
   31504:	4798      	blx	r3
}
   31506:	46c0      	nop			; (mov r8, r8)
   31508:	46bd      	mov	sp, r7
   3150a:	b002      	add	sp, #8
   3150c:	bd80      	pop	{r7, pc}
   3150e:	46c0      	nop			; (mov r8, r8)
   31510:	0001ed05 	.word	0x0001ed05

00031514 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   31514:	b580      	push	{r7, lr}
   31516:	b082      	sub	sp, #8
   31518:	af00      	add	r7, sp, #0
   3151a:	6078      	str	r0, [r7, #4]
   3151c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   3151e:	683b      	ldr	r3, [r7, #0]
   31520:	22fa      	movs	r2, #250	; 0xfa
   31522:	0092      	lsls	r2, r2, #2
   31524:	435a      	muls	r2, r3
   31526:	687b      	ldr	r3, [r7, #4]
   31528:	0011      	movs	r1, r2
   3152a:	0018      	movs	r0, r3
   3152c:	4b02      	ldr	r3, [pc, #8]	; (31538 <TimerCountdown+0x24>)
   3152e:	4798      	blx	r3
}
   31530:	46c0      	nop			; (mov r8, r8)
   31532:	46bd      	mov	sp, r7
   31534:	b002      	add	sp, #8
   31536:	bd80      	pop	{r7, pc}
   31538:	000314ed 	.word	0x000314ed

0003153c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   3153c:	b580      	push	{r7, lr}
   3153e:	b082      	sub	sp, #8
   31540:	af00      	add	r7, sp, #0
   31542:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   31544:	687b      	ldr	r3, [r7, #4]
   31546:	3304      	adds	r3, #4
   31548:	687a      	ldr	r2, [r7, #4]
   3154a:	0011      	movs	r1, r2
   3154c:	0018      	movs	r0, r3
   3154e:	4b04      	ldr	r3, [pc, #16]	; (31560 <TimerLeftMS+0x24>)
   31550:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   31552:	687b      	ldr	r3, [r7, #4]
   31554:	681b      	ldr	r3, [r3, #0]
}
   31556:	0018      	movs	r0, r3
   31558:	46bd      	mov	sp, r7
   3155a:	b002      	add	sp, #8
   3155c:	bd80      	pop	{r7, pc}
   3155e:	46c0      	nop			; (mov r8, r8)
   31560:	0001ed71 	.word	0x0001ed71

00031564 <TimerInit>:


void TimerInit(Timer* timer) {
   31564:	b580      	push	{r7, lr}
   31566:	b082      	sub	sp, #8
   31568:	af00      	add	r7, sp, #0
   3156a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   3156c:	687b      	ldr	r3, [r7, #4]
   3156e:	2200      	movs	r2, #0
   31570:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   31572:	687b      	ldr	r3, [r7, #4]
   31574:	3304      	adds	r3, #4
   31576:	2208      	movs	r2, #8
   31578:	2100      	movs	r1, #0
   3157a:	0018      	movs	r0, r3
   3157c:	4b02      	ldr	r3, [pc, #8]	; (31588 <TimerInit+0x24>)
   3157e:	4798      	blx	r3
}
   31580:	46c0      	nop			; (mov r8, r8)
   31582:	46bd      	mov	sp, r7
   31584:	b002      	add	sp, #8
   31586:	bd80      	pop	{r7, pc}
   31588:	0003781f 	.word	0x0003781f

0003158c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   3158c:	b590      	push	{r4, r7, lr}
   3158e:	b085      	sub	sp, #20
   31590:	af00      	add	r7, sp, #0
   31592:	60f8      	str	r0, [r7, #12]
   31594:	60b9      	str	r1, [r7, #8]
   31596:	607a      	str	r2, [r7, #4]
   31598:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   3159a:	683b      	ldr	r3, [r7, #0]
   3159c:	2b00      	cmp	r3, #0
   3159e:	d101      	bne.n	315a4 <WINC1500_read+0x18>
   315a0:	230a      	movs	r3, #10
   315a2:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   315a4:	4b2c      	ldr	r3, [pc, #176]	; (31658 <WINC1500_read+0xcc>)
   315a6:	681b      	ldr	r3, [r3, #0]
   315a8:	2b00      	cmp	r3, #0
   315aa:	d131      	bne.n	31610 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   315ac:	4b2b      	ldr	r3, [pc, #172]	; (3165c <WINC1500_read+0xd0>)
   315ae:	2200      	movs	r2, #0
   315b0:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   315b2:	68fb      	ldr	r3, [r7, #12]
   315b4:	681b      	ldr	r3, [r3, #0]
   315b6:	b258      	sxtb	r0, r3
   315b8:	683c      	ldr	r4, [r7, #0]
   315ba:	2380      	movs	r3, #128	; 0x80
   315bc:	005a      	lsls	r2, r3, #1
   315be:	4928      	ldr	r1, [pc, #160]	; (31660 <WINC1500_read+0xd4>)
   315c0:	0023      	movs	r3, r4
   315c2:	4c28      	ldr	r4, [pc, #160]	; (31664 <WINC1500_read+0xd8>)
   315c4:	47a0      	blx	r4
   315c6:	1e03      	subs	r3, r0, #0
   315c8:	d005      	beq.n	315d6 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   315ca:	2301      	movs	r3, #1
   315cc:	425b      	negs	r3, r3
   315ce:	e03e      	b.n	3164e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   315d0:	2000      	movs	r0, #0
   315d2:	4b25      	ldr	r3, [pc, #148]	; (31668 <WINC1500_read+0xdc>)
   315d4:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   315d6:	4b21      	ldr	r3, [pc, #132]	; (3165c <WINC1500_read+0xd0>)
   315d8:	781b      	ldrb	r3, [r3, #0]
   315da:	2201      	movs	r2, #1
   315dc:	4053      	eors	r3, r2
   315de:	b2db      	uxtb	r3, r3
   315e0:	2b00      	cmp	r3, #0
   315e2:	d1f5      	bne.n	315d0 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   315e4:	4b21      	ldr	r3, [pc, #132]	; (3166c <WINC1500_read+0xe0>)
   315e6:	681b      	ldr	r3, [r3, #0]
   315e8:	2b00      	cmp	r3, #0
   315ea:	dd08      	ble.n	315fe <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   315ec:	4b1f      	ldr	r3, [pc, #124]	; (3166c <WINC1500_read+0xe0>)
   315ee:	681b      	ldr	r3, [r3, #0]
   315f0:	001a      	movs	r2, r3
   315f2:	4b19      	ldr	r3, [pc, #100]	; (31658 <WINC1500_read+0xcc>)
   315f4:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   315f6:	4b1e      	ldr	r3, [pc, #120]	; (31670 <WINC1500_read+0xe4>)
   315f8:	2200      	movs	r2, #0
   315fa:	601a      	str	r2, [r3, #0]
   315fc:	e008      	b.n	31610 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   315fe:	4b16      	ldr	r3, [pc, #88]	; (31658 <WINC1500_read+0xcc>)
   31600:	2200      	movs	r2, #0
   31602:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   31604:	4b1a      	ldr	r3, [pc, #104]	; (31670 <WINC1500_read+0xe4>)
   31606:	2200      	movs	r2, #0
   31608:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   3160a:	4b18      	ldr	r3, [pc, #96]	; (3166c <WINC1500_read+0xe0>)
   3160c:	681b      	ldr	r3, [r3, #0]
   3160e:	e01e      	b.n	3164e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   31610:	4b11      	ldr	r3, [pc, #68]	; (31658 <WINC1500_read+0xcc>)
   31612:	681b      	ldr	r3, [r3, #0]
   31614:	001a      	movs	r2, r3
   31616:	687b      	ldr	r3, [r7, #4]
   31618:	4293      	cmp	r3, r2
   3161a:	dd02      	ble.n	31622 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   3161c:	2301      	movs	r3, #1
   3161e:	425b      	negs	r3, r3
   31620:	e015      	b.n	3164e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   31622:	4b13      	ldr	r3, [pc, #76]	; (31670 <WINC1500_read+0xe4>)
   31624:	681a      	ldr	r2, [r3, #0]
   31626:	4b0e      	ldr	r3, [pc, #56]	; (31660 <WINC1500_read+0xd4>)
   31628:	18d1      	adds	r1, r2, r3
   3162a:	687a      	ldr	r2, [r7, #4]
   3162c:	68bb      	ldr	r3, [r7, #8]
   3162e:	0018      	movs	r0, r3
   31630:	4b10      	ldr	r3, [pc, #64]	; (31674 <WINC1500_read+0xe8>)
   31632:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   31634:	4b08      	ldr	r3, [pc, #32]	; (31658 <WINC1500_read+0xcc>)
   31636:	681a      	ldr	r2, [r3, #0]
   31638:	687b      	ldr	r3, [r7, #4]
   3163a:	1ad2      	subs	r2, r2, r3
   3163c:	4b06      	ldr	r3, [pc, #24]	; (31658 <WINC1500_read+0xcc>)
   3163e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   31640:	4b0b      	ldr	r3, [pc, #44]	; (31670 <WINC1500_read+0xe4>)
   31642:	681a      	ldr	r2, [r3, #0]
   31644:	687b      	ldr	r3, [r7, #4]
   31646:	18d2      	adds	r2, r2, r3
   31648:	4b09      	ldr	r3, [pc, #36]	; (31670 <WINC1500_read+0xe4>)
   3164a:	601a      	str	r2, [r3, #0]
  
  return len;
   3164c:	687b      	ldr	r3, [r7, #4]
}
   3164e:	0018      	movs	r0, r3
   31650:	46bd      	mov	sp, r7
   31652:	b005      	add	sp, #20
   31654:	bd90      	pop	{r4, r7, pc}
   31656:	46c0      	nop			; (mov r8, r8)
   31658:	2000428c 	.word	0x2000428c
   3165c:	20004187 	.word	0x20004187
   31660:	20004188 	.word	0x20004188
   31664:	00027be5 	.word	0x00027be5
   31668:	0002412d 	.word	0x0002412d
   3166c:	20004180 	.word	0x20004180
   31670:	20004288 	.word	0x20004288
   31674:	000377e9 	.word	0x000377e9

00031678 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   31678:	b590      	push	{r4, r7, lr}
   3167a:	b085      	sub	sp, #20
   3167c:	af00      	add	r7, sp, #0
   3167e:	60f8      	str	r0, [r7, #12]
   31680:	60b9      	str	r1, [r7, #8]
   31682:	607a      	str	r2, [r7, #4]
   31684:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   31686:	4b10      	ldr	r3, [pc, #64]	; (316c8 <WINC1500_write+0x50>)
   31688:	2200      	movs	r2, #0
   3168a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   3168c:	68fb      	ldr	r3, [r7, #12]
   3168e:	681b      	ldr	r3, [r3, #0]
   31690:	b258      	sxtb	r0, r3
   31692:	687b      	ldr	r3, [r7, #4]
   31694:	b29a      	uxth	r2, r3
   31696:	68b9      	ldr	r1, [r7, #8]
   31698:	2300      	movs	r3, #0
   3169a:	4c0c      	ldr	r4, [pc, #48]	; (316cc <WINC1500_write+0x54>)
   3169c:	47a0      	blx	r4
   3169e:	1e03      	subs	r3, r0, #0
   316a0:	d005      	beq.n	316ae <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   316a2:	2301      	movs	r3, #1
   316a4:	425b      	negs	r3, r3
   316a6:	e00a      	b.n	316be <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   316a8:	2000      	movs	r0, #0
   316aa:	4b09      	ldr	r3, [pc, #36]	; (316d0 <WINC1500_write+0x58>)
   316ac:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   316ae:	4b06      	ldr	r3, [pc, #24]	; (316c8 <WINC1500_write+0x50>)
   316b0:	781b      	ldrb	r3, [r3, #0]
   316b2:	2201      	movs	r2, #1
   316b4:	4053      	eors	r3, r2
   316b6:	b2db      	uxtb	r3, r3
   316b8:	2b00      	cmp	r3, #0
   316ba:	d1f5      	bne.n	316a8 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   316bc:	687b      	ldr	r3, [r7, #4]
}
   316be:	0018      	movs	r0, r3
   316c0:	46bd      	mov	sp, r7
   316c2:	b005      	add	sp, #20
   316c4:	bd90      	pop	{r4, r7, pc}
   316c6:	46c0      	nop			; (mov r8, r8)
   316c8:	20004186 	.word	0x20004186
   316cc:	00027a81 	.word	0x00027a81
   316d0:	0002412d 	.word	0x0002412d

000316d4 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   316d4:	b580      	push	{r7, lr}
   316d6:	b082      	sub	sp, #8
   316d8:	af00      	add	r7, sp, #0
   316da:	6078      	str	r0, [r7, #4]
	close(n->socket);
   316dc:	687b      	ldr	r3, [r7, #4]
   316de:	681b      	ldr	r3, [r3, #0]
   316e0:	b25b      	sxtb	r3, r3
   316e2:	0018      	movs	r0, r3
   316e4:	4b06      	ldr	r3, [pc, #24]	; (31700 <WINC1500_disconnect+0x2c>)
   316e6:	4798      	blx	r3
	n->socket=-1;
   316e8:	687b      	ldr	r3, [r7, #4]
   316ea:	2201      	movs	r2, #1
   316ec:	4252      	negs	r2, r2
   316ee:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   316f0:	4b04      	ldr	r3, [pc, #16]	; (31704 <WINC1500_disconnect+0x30>)
   316f2:	2200      	movs	r2, #0
   316f4:	701a      	strb	r2, [r3, #0]
}
   316f6:	46c0      	nop			; (mov r8, r8)
   316f8:	46bd      	mov	sp, r7
   316fa:	b002      	add	sp, #8
   316fc:	bd80      	pop	{r7, pc}
   316fe:	46c0      	nop			; (mov r8, r8)
   31700:	00027d65 	.word	0x00027d65
   31704:	20004185 	.word	0x20004185

00031708 <NetworkInit>:


void NetworkInit(Network* n) {
   31708:	b580      	push	{r7, lr}
   3170a:	b082      	sub	sp, #8
   3170c:	af00      	add	r7, sp, #0
   3170e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   31710:	687b      	ldr	r3, [r7, #4]
   31712:	2201      	movs	r2, #1
   31714:	4252      	negs	r2, r2
   31716:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   31718:	687b      	ldr	r3, [r7, #4]
   3171a:	4a06      	ldr	r2, [pc, #24]	; (31734 <NetworkInit+0x2c>)
   3171c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   3171e:	687b      	ldr	r3, [r7, #4]
   31720:	4a05      	ldr	r2, [pc, #20]	; (31738 <NetworkInit+0x30>)
   31722:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   31724:	687b      	ldr	r3, [r7, #4]
   31726:	4a05      	ldr	r2, [pc, #20]	; (3173c <NetworkInit+0x34>)
   31728:	611a      	str	r2, [r3, #16]
}
   3172a:	46c0      	nop			; (mov r8, r8)
   3172c:	46bd      	mov	sp, r7
   3172e:	b002      	add	sp, #8
   31730:	bd80      	pop	{r7, pc}
   31732:	46c0      	nop			; (mov r8, r8)
   31734:	0003158d 	.word	0x0003158d
   31738:	00031679 	.word	0x00031679
   3173c:	000316d5 	.word	0x000316d5

00031740 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   31740:	b580      	push	{r7, lr}
   31742:	b088      	sub	sp, #32
   31744:	af00      	add	r7, sp, #0
   31746:	60f8      	str	r0, [r7, #12]
   31748:	60b9      	str	r1, [r7, #8]
   3174a:	607a      	str	r2, [r7, #4]
   3174c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   3174e:	4b37      	ldr	r3, [pc, #220]	; (3182c <ConnectNetwork+0xec>)
   31750:	2200      	movs	r2, #0
   31752:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   31754:	4b36      	ldr	r3, [pc, #216]	; (31830 <ConnectNetwork+0xf0>)
   31756:	68ba      	ldr	r2, [r7, #8]
   31758:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   3175a:	68bb      	ldr	r3, [r7, #8]
   3175c:	0018      	movs	r0, r3
   3175e:	4b35      	ldr	r3, [pc, #212]	; (31834 <ConnectNetwork+0xf4>)
   31760:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   31762:	e002      	b.n	3176a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   31764:	2000      	movs	r0, #0
   31766:	4b34      	ldr	r3, [pc, #208]	; (31838 <ConnectNetwork+0xf8>)
   31768:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   3176a:	4b30      	ldr	r3, [pc, #192]	; (3182c <ConnectNetwork+0xec>)
   3176c:	781b      	ldrb	r3, [r3, #0]
   3176e:	2201      	movs	r2, #1
   31770:	4053      	eors	r3, r2
   31772:	b2db      	uxtb	r3, r3
   31774:	2b00      	cmp	r3, #0
   31776:	d1f5      	bne.n	31764 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   31778:	4b30      	ldr	r3, [pc, #192]	; (3183c <ConnectNetwork+0xfc>)
   3177a:	681a      	ldr	r2, [r3, #0]
   3177c:	68fb      	ldr	r3, [r7, #12]
   3177e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   31780:	2310      	movs	r3, #16
   31782:	18fb      	adds	r3, r7, r3
   31784:	2202      	movs	r2, #2
   31786:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   31788:	687b      	ldr	r3, [r7, #4]
   3178a:	b29b      	uxth	r3, r3
   3178c:	021b      	lsls	r3, r3, #8
   3178e:	b21a      	sxth	r2, r3
   31790:	687b      	ldr	r3, [r7, #4]
   31792:	b29b      	uxth	r3, r3
   31794:	0a1b      	lsrs	r3, r3, #8
   31796:	b29b      	uxth	r3, r3
   31798:	b21b      	sxth	r3, r3
   3179a:	4313      	orrs	r3, r2
   3179c:	b21b      	sxth	r3, r3
   3179e:	b29a      	uxth	r2, r3
   317a0:	2310      	movs	r3, #16
   317a2:	18fb      	adds	r3, r7, r3
   317a4:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   317a6:	4b25      	ldr	r3, [pc, #148]	; (3183c <ConnectNetwork+0xfc>)
   317a8:	681b      	ldr	r3, [r3, #0]
   317aa:	001a      	movs	r2, r3
   317ac:	2310      	movs	r3, #16
   317ae:	18fb      	adds	r3, r7, r3
   317b0:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   317b2:	68fb      	ldr	r3, [r7, #12]
   317b4:	681b      	ldr	r3, [r3, #0]
   317b6:	2b00      	cmp	r3, #0
   317b8:	da0a      	bge.n	317d0 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   317ba:	683b      	ldr	r3, [r7, #0]
   317bc:	b2db      	uxtb	r3, r3
   317be:	001a      	movs	r2, r3
   317c0:	2101      	movs	r1, #1
   317c2:	2002      	movs	r0, #2
   317c4:	4b1e      	ldr	r3, [pc, #120]	; (31840 <ConnectNetwork+0x100>)
   317c6:	4798      	blx	r3
   317c8:	0003      	movs	r3, r0
   317ca:	001a      	movs	r2, r3
   317cc:	68fb      	ldr	r3, [r7, #12]
   317ce:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   317d0:	68fb      	ldr	r3, [r7, #12]
   317d2:	681b      	ldr	r3, [r3, #0]
   317d4:	3301      	adds	r3, #1
   317d6:	d108      	bne.n	317ea <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   317d8:	68fb      	ldr	r3, [r7, #12]
   317da:	681b      	ldr	r3, [r3, #0]
   317dc:	b25b      	sxtb	r3, r3
   317de:	0018      	movs	r0, r3
   317e0:	4b18      	ldr	r3, [pc, #96]	; (31844 <ConnectNetwork+0x104>)
   317e2:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   317e4:	2309      	movs	r3, #9
   317e6:	425b      	negs	r3, r3
   317e8:	e01c      	b.n	31824 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   317ea:	68fb      	ldr	r3, [r7, #12]
   317ec:	681b      	ldr	r3, [r3, #0]
   317ee:	b25b      	sxtb	r3, r3
   317f0:	2210      	movs	r2, #16
   317f2:	18b9      	adds	r1, r7, r2
   317f4:	2210      	movs	r2, #16
   317f6:	0018      	movs	r0, r3
   317f8:	4b13      	ldr	r3, [pc, #76]	; (31848 <ConnectNetwork+0x108>)
   317fa:	4798      	blx	r3
   317fc:	1e03      	subs	r3, r0, #0
   317fe:	d002      	beq.n	31806 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   31800:	2309      	movs	r3, #9
   31802:	425b      	negs	r3, r3
   31804:	e00e      	b.n	31824 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   31806:	4b11      	ldr	r3, [pc, #68]	; (3184c <ConnectNetwork+0x10c>)
   31808:	2200      	movs	r2, #0
   3180a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   3180c:	e002      	b.n	31814 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   3180e:	2000      	movs	r0, #0
   31810:	4b09      	ldr	r3, [pc, #36]	; (31838 <ConnectNetwork+0xf8>)
   31812:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   31814:	4b0d      	ldr	r3, [pc, #52]	; (3184c <ConnectNetwork+0x10c>)
   31816:	781b      	ldrb	r3, [r3, #0]
   31818:	2201      	movs	r2, #1
   3181a:	4053      	eors	r3, r2
   3181c:	b2db      	uxtb	r3, r3
   3181e:	2b00      	cmp	r3, #0
   31820:	d1f5      	bne.n	3180e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   31822:	2300      	movs	r3, #0
   31824:	0018      	movs	r0, r3
   31826:	46bd      	mov	sp, r7
   31828:	b008      	add	sp, #32
   3182a:	bd80      	pop	{r7, pc}
   3182c:	20004184 	.word	0x20004184
   31830:	20004290 	.word	0x20004290
   31834:	00027fad 	.word	0x00027fad
   31838:	0002412d 	.word	0x0002412d
   3183c:	2000417c 	.word	0x2000417c
   31840:	00027759 	.word	0x00027759
   31844:	00027d65 	.word	0x00027d65
   31848:	0002796d 	.word	0x0002796d
   3184c:	20004185 	.word	0x20004185

00031850 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   31850:	b580      	push	{r7, lr}
   31852:	b084      	sub	sp, #16
   31854:	af00      	add	r7, sp, #0
   31856:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   31858:	687b      	ldr	r3, [r7, #4]
   3185a:	2b00      	cmp	r3, #0
   3185c:	d022      	beq.n	318a4 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3185e:	2300      	movs	r3, #0
   31860:	60fb      	str	r3, [r7, #12]
   31862:	e01b      	b.n	3189c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   31864:	4a11      	ldr	r2, [pc, #68]	; (318ac <allocateClient+0x5c>)
   31866:	68fb      	ldr	r3, [r7, #12]
   31868:	2164      	movs	r1, #100	; 0x64
   3186a:	434b      	muls	r3, r1
   3186c:	18d3      	adds	r3, r2, r3
   3186e:	3360      	adds	r3, #96	; 0x60
   31870:	681b      	ldr	r3, [r3, #0]
   31872:	2b00      	cmp	r3, #0
   31874:	d10f      	bne.n	31896 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   31876:	4a0d      	ldr	r2, [pc, #52]	; (318ac <allocateClient+0x5c>)
   31878:	68fb      	ldr	r3, [r7, #12]
   3187a:	2164      	movs	r1, #100	; 0x64
   3187c:	434b      	muls	r3, r1
   3187e:	18d3      	adds	r3, r2, r3
   31880:	3360      	adds	r3, #96	; 0x60
   31882:	687a      	ldr	r2, [r7, #4]
   31884:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   31886:	68fb      	ldr	r3, [r7, #12]
   31888:	2264      	movs	r2, #100	; 0x64
   3188a:	435a      	muls	r2, r3
   3188c:	4b07      	ldr	r3, [pc, #28]	; (318ac <allocateClient+0x5c>)
   3188e:	18d2      	adds	r2, r2, r3
   31890:	687b      	ldr	r3, [r7, #4]
   31892:	61da      	str	r2, [r3, #28]
			return;
   31894:	e007      	b.n	318a6 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   31896:	68fb      	ldr	r3, [r7, #12]
   31898:	3301      	adds	r3, #1
   3189a:	60fb      	str	r3, [r7, #12]
   3189c:	68fb      	ldr	r3, [r7, #12]
   3189e:	2b06      	cmp	r3, #6
   318a0:	d9e0      	bls.n	31864 <allocateClient+0x14>
   318a2:	e000      	b.n	318a6 <allocateClient+0x56>
		return;
   318a4:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   318a6:	46bd      	mov	sp, r7
   318a8:	b004      	add	sp, #16
   318aa:	bd80      	pop	{r7, pc}
   318ac:	20004294 	.word	0x20004294

000318b0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   318b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   318b2:	b089      	sub	sp, #36	; 0x24
   318b4:	af04      	add	r7, sp, #16
   318b6:	6078      	str	r0, [r7, #4]
   318b8:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   318ba:	687b      	ldr	r3, [r7, #4]
   318bc:	2b00      	cmp	r3, #0
   318be:	d00a      	beq.n	318d6 <mqtt_init+0x26>
   318c0:	683b      	ldr	r3, [r7, #0]
   318c2:	2b00      	cmp	r3, #0
   318c4:	d007      	beq.n	318d6 <mqtt_init+0x26>
   318c6:	683b      	ldr	r3, [r7, #0]
   318c8:	691b      	ldr	r3, [r3, #16]
   318ca:	2b00      	cmp	r3, #0
   318cc:	d003      	beq.n	318d6 <mqtt_init+0x26>
   318ce:	683b      	ldr	r3, [r7, #0]
   318d0:	689b      	ldr	r3, [r3, #8]
   318d2:	2b00      	cmp	r3, #0
   318d4:	d102      	bne.n	318dc <mqtt_init+0x2c>
		return FAILURE;
   318d6:	2301      	movs	r3, #1
   318d8:	425b      	negs	r3, r3
   318da:	e034      	b.n	31946 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   318dc:	683b      	ldr	r3, [r7, #0]
   318de:	889b      	ldrh	r3, [r3, #4]
   318e0:	001a      	movs	r2, r3
   318e2:	23fa      	movs	r3, #250	; 0xfa
   318e4:	009b      	lsls	r3, r3, #2
   318e6:	4353      	muls	r3, r2
   318e8:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   318ea:	687b      	ldr	r3, [r7, #4]
   318ec:	3320      	adds	r3, #32
   318ee:	0018      	movs	r0, r3
   318f0:	4b17      	ldr	r3, [pc, #92]	; (31950 <mqtt_init+0xa0>)
   318f2:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   318f4:	687b      	ldr	r3, [r7, #4]
   318f6:	3304      	adds	r3, #4
   318f8:	6839      	ldr	r1, [r7, #0]
   318fa:	2218      	movs	r2, #24
   318fc:	0018      	movs	r0, r3
   318fe:	4b15      	ldr	r3, [pc, #84]	; (31954 <mqtt_init+0xa4>)
   31900:	4798      	blx	r3
	allocateClient(module);
   31902:	687b      	ldr	r3, [r7, #4]
   31904:	0018      	movs	r0, r3
   31906:	4b14      	ldr	r3, [pc, #80]	; (31958 <mqtt_init+0xa8>)
   31908:	4798      	blx	r3
	
	if(module->client)
   3190a:	687b      	ldr	r3, [r7, #4]
   3190c:	69db      	ldr	r3, [r3, #28]
   3190e:	2b00      	cmp	r3, #0
   31910:	d017      	beq.n	31942 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   31912:	687b      	ldr	r3, [r7, #4]
   31914:	69d8      	ldr	r0, [r3, #28]
   31916:	687b      	ldr	r3, [r7, #4]
   31918:	3320      	adds	r3, #32
   3191a:	001c      	movs	r4, r3
   3191c:	683b      	ldr	r3, [r7, #0]
   3191e:	691e      	ldr	r6, [r3, #16]
   31920:	683b      	ldr	r3, [r7, #0]
   31922:	695a      	ldr	r2, [r3, #20]
   31924:	683b      	ldr	r3, [r7, #0]
   31926:	6899      	ldr	r1, [r3, #8]
   31928:	683b      	ldr	r3, [r7, #0]
   3192a:	68db      	ldr	r3, [r3, #12]
   3192c:	68fd      	ldr	r5, [r7, #12]
   3192e:	9302      	str	r3, [sp, #8]
   31930:	9101      	str	r1, [sp, #4]
   31932:	9200      	str	r2, [sp, #0]
   31934:	0033      	movs	r3, r6
   31936:	002a      	movs	r2, r5
   31938:	0021      	movs	r1, r4
   3193a:	4c08      	ldr	r4, [pc, #32]	; (3195c <mqtt_init+0xac>)
   3193c:	47a0      	blx	r4
		return SUCCESS;
   3193e:	2300      	movs	r3, #0
   31940:	e001      	b.n	31946 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   31942:	2301      	movs	r3, #1
   31944:	425b      	negs	r3, r3
}
   31946:	0018      	movs	r0, r3
   31948:	46bd      	mov	sp, r7
   3194a:	b005      	add	sp, #20
   3194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3194e:	46c0      	nop			; (mov r8, r8)
   31950:	00031709 	.word	0x00031709
   31954:	000377e9 	.word	0x000377e9
   31958:	00031851 	.word	0x00031851
   3195c:	00030781 	.word	0x00030781

00031960 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   31960:	b580      	push	{r7, lr}
   31962:	b082      	sub	sp, #8
   31964:	af00      	add	r7, sp, #0
   31966:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   31968:	687b      	ldr	r3, [r7, #4]
   3196a:	4a0c      	ldr	r2, [pc, #48]	; (3199c <mqtt_get_config_defaults+0x3c>)
   3196c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3196e:	687b      	ldr	r3, [r7, #4]
   31970:	2200      	movs	r2, #0
   31972:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   31974:	687b      	ldr	r3, [r7, #4]
   31976:	223c      	movs	r2, #60	; 0x3c
   31978:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   3197a:	687b      	ldr	r3, [r7, #4]
   3197c:	2200      	movs	r2, #0
   3197e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   31980:	687b      	ldr	r3, [r7, #4]
   31982:	2200      	movs	r2, #0
   31984:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   31986:	687b      	ldr	r3, [r7, #4]
   31988:	2200      	movs	r2, #0
   3198a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   3198c:	687b      	ldr	r3, [r7, #4]
   3198e:	2200      	movs	r2, #0
   31990:	615a      	str	r2, [r3, #20]
}
   31992:	46c0      	nop			; (mov r8, r8)
   31994:	46bd      	mov	sp, r7
   31996:	b002      	add	sp, #8
   31998:	bd80      	pop	{r7, pc}
   3199a:	46c0      	nop			; (mov r8, r8)
   3199c:	0000075b 	.word	0x0000075b

000319a0 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   319a0:	b580      	push	{r7, lr}
   319a2:	b082      	sub	sp, #8
   319a4:	af00      	add	r7, sp, #0
   319a6:	6078      	str	r0, [r7, #4]
   319a8:	6039      	str	r1, [r7, #0]
	if(module)
   319aa:	687b      	ldr	r3, [r7, #4]
   319ac:	2b00      	cmp	r3, #0
   319ae:	d004      	beq.n	319ba <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   319b0:	687b      	ldr	r3, [r7, #4]
   319b2:	683a      	ldr	r2, [r7, #0]
   319b4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   319b6:	2300      	movs	r3, #0
   319b8:	e001      	b.n	319be <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   319ba:	2301      	movs	r3, #1
   319bc:	425b      	negs	r3, r3
}
   319be:	0018      	movs	r0, r3
   319c0:	46bd      	mov	sp, r7
   319c2:	b002      	add	sp, #8
   319c4:	bd80      	pop	{r7, pc}
	...

000319c8 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   319c8:	b580      	push	{r7, lr}
   319ca:	b082      	sub	sp, #8
   319cc:	af00      	add	r7, sp, #0
   319ce:	603a      	str	r2, [r7, #0]
   319d0:	1dfb      	adds	r3, r7, #7
   319d2:	1c02      	adds	r2, r0, #0
   319d4:	701a      	strb	r2, [r3, #0]
   319d6:	1dbb      	adds	r3, r7, #6
   319d8:	1c0a      	adds	r2, r1, #0
   319da:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   319dc:	683a      	ldr	r2, [r7, #0]
   319de:	1dbb      	adds	r3, r7, #6
   319e0:	7819      	ldrb	r1, [r3, #0]
   319e2:	1dfb      	adds	r3, r7, #7
   319e4:	781b      	ldrb	r3, [r3, #0]
   319e6:	b25b      	sxtb	r3, r3
   319e8:	0018      	movs	r0, r3
   319ea:	4b03      	ldr	r3, [pc, #12]	; (319f8 <mqtt_socket_event_handler+0x30>)
   319ec:	4798      	blx	r3
}
   319ee:	46c0      	nop			; (mov r8, r8)
   319f0:	46bd      	mov	sp, r7
   319f2:	b002      	add	sp, #8
   319f4:	bd80      	pop	{r7, pc}
   319f6:	46c0      	nop			; (mov r8, r8)
   319f8:	00031445 	.word	0x00031445

000319fc <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   319fc:	b580      	push	{r7, lr}
   319fe:	b082      	sub	sp, #8
   31a00:	af00      	add	r7, sp, #0
   31a02:	6078      	str	r0, [r7, #4]
   31a04:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   31a06:	683a      	ldr	r2, [r7, #0]
   31a08:	687b      	ldr	r3, [r7, #4]
   31a0a:	0011      	movs	r1, r2
   31a0c:	0018      	movs	r0, r3
   31a0e:	4b03      	ldr	r3, [pc, #12]	; (31a1c <mqtt_socket_resolve_handler+0x20>)
   31a10:	4798      	blx	r3
}
   31a12:	46c0      	nop			; (mov r8, r8)
   31a14:	46bd      	mov	sp, r7
   31a16:	b002      	add	sp, #8
   31a18:	bd80      	pop	{r7, pc}
   31a1a:	46c0      	nop			; (mov r8, r8)
   31a1c:	000313f5 	.word	0x000313f5

00031a20 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   31a20:	b590      	push	{r4, r7, lr}
   31a22:	b085      	sub	sp, #20
   31a24:	af00      	add	r7, sp, #0
   31a26:	6078      	str	r0, [r7, #4]
   31a28:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   31a2a:	687b      	ldr	r3, [r7, #4]
   31a2c:	3320      	adds	r3, #32
   31a2e:	0018      	movs	r0, r3
   31a30:	687b      	ldr	r3, [r7, #4]
   31a32:	889b      	ldrh	r3, [r3, #4]
   31a34:	001a      	movs	r2, r3
   31a36:	687b      	ldr	r3, [r7, #4]
   31a38:	799b      	ldrb	r3, [r3, #6]
   31a3a:	6839      	ldr	r1, [r7, #0]
   31a3c:	4c09      	ldr	r4, [pc, #36]	; (31a64 <mqtt_connect+0x44>)
   31a3e:	47a0      	blx	r4
   31a40:	0003      	movs	r3, r0
   31a42:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   31a44:	687b      	ldr	r3, [r7, #4]
   31a46:	681b      	ldr	r3, [r3, #0]
   31a48:	2b00      	cmp	r3, #0
   31a4a:	d006      	beq.n	31a5a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   31a4c:	687b      	ldr	r3, [r7, #4]
   31a4e:	681b      	ldr	r3, [r3, #0]
   31a50:	220c      	movs	r2, #12
   31a52:	18ba      	adds	r2, r7, r2
   31a54:	6878      	ldr	r0, [r7, #4]
   31a56:	2100      	movs	r1, #0
   31a58:	4798      	blx	r3
	return connResult.sock_connected.result;
   31a5a:	68fb      	ldr	r3, [r7, #12]
}
   31a5c:	0018      	movs	r0, r3
   31a5e:	46bd      	mov	sp, r7
   31a60:	b005      	add	sp, #20
   31a62:	bd90      	pop	{r4, r7, pc}
   31a64:	00031741 	.word	0x00031741

00031a68 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   31a68:	b580      	push	{r7, lr}
   31a6a:	b09c      	sub	sp, #112	; 0x70
   31a6c:	af00      	add	r7, sp, #0
   31a6e:	60f8      	str	r0, [r7, #12]
   31a70:	607a      	str	r2, [r7, #4]
   31a72:	603b      	str	r3, [r7, #0]
   31a74:	230b      	movs	r3, #11
   31a76:	18fb      	adds	r3, r7, r3
   31a78:	1c0a      	adds	r2, r1, #0
   31a7a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   31a7c:	2310      	movs	r3, #16
   31a7e:	18fa      	adds	r2, r7, r3
   31a80:	4b31      	ldr	r3, [pc, #196]	; (31b48 <mqtt_connect_broker+0xe0>)
   31a82:	0010      	movs	r0, r2
   31a84:	0019      	movs	r1, r3
   31a86:	2358      	movs	r3, #88	; 0x58
   31a88:	001a      	movs	r2, r3
   31a8a:	4b30      	ldr	r3, [pc, #192]	; (31b4c <mqtt_connect_broker+0xe4>)
   31a8c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   31a8e:	2310      	movs	r3, #16
   31a90:	18fb      	adds	r3, r7, r3
   31a92:	2204      	movs	r2, #4
   31a94:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   31a96:	2310      	movs	r3, #16
   31a98:	18fb      	adds	r3, r7, r3
   31a9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   31a9c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   31a9e:	2310      	movs	r3, #16
   31aa0:	18fb      	adds	r3, r7, r3
   31aa2:	687a      	ldr	r2, [r7, #4]
   31aa4:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   31aa6:	2310      	movs	r3, #16
   31aa8:	18fb      	adds	r3, r7, r3
   31aaa:	683a      	ldr	r2, [r7, #0]
   31aac:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   31aae:	2310      	movs	r3, #16
   31ab0:	18fb      	adds	r3, r7, r3
   31ab2:	220b      	movs	r2, #11
   31ab4:	18ba      	adds	r2, r7, r2
   31ab6:	7812      	ldrb	r2, [r2, #0]
   31ab8:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   31aba:	2310      	movs	r3, #16
   31abc:	18fb      	adds	r3, r7, r3
   31abe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   31ac0:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   31ac2:	2310      	movs	r3, #16
   31ac4:	18fb      	adds	r3, r7, r3
   31ac6:	2280      	movs	r2, #128	; 0x80
   31ac8:	18ba      	adds	r2, r7, r2
   31aca:	6812      	ldr	r2, [r2, #0]
   31acc:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   31ace:	2310      	movs	r3, #16
   31ad0:	18fb      	adds	r3, r7, r3
   31ad2:	228c      	movs	r2, #140	; 0x8c
   31ad4:	18ba      	adds	r2, r7, r2
   31ad6:	213c      	movs	r1, #60	; 0x3c
   31ad8:	7812      	ldrb	r2, [r2, #0]
   31ada:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   31adc:	2310      	movs	r3, #16
   31ade:	18fb      	adds	r3, r7, r3
   31ae0:	2288      	movs	r2, #136	; 0x88
   31ae2:	18ba      	adds	r2, r7, r2
   31ae4:	213d      	movs	r1, #61	; 0x3d
   31ae6:	7812      	ldrb	r2, [r2, #0]
   31ae8:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   31aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   31aec:	2b00      	cmp	r3, #0
   31aee:	d008      	beq.n	31b02 <mqtt_connect_broker+0x9a>
   31af0:	2380      	movs	r3, #128	; 0x80
   31af2:	18fb      	adds	r3, r7, r3
   31af4:	681b      	ldr	r3, [r3, #0]
   31af6:	2b00      	cmp	r3, #0
   31af8:	d003      	beq.n	31b02 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   31afa:	2310      	movs	r3, #16
   31afc:	18fb      	adds	r3, r7, r3
   31afe:	2201      	movs	r2, #1
   31b00:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   31b02:	68fb      	ldr	r3, [r7, #12]
   31b04:	69db      	ldr	r3, [r3, #28]
   31b06:	2210      	movs	r2, #16
   31b08:	18ba      	adds	r2, r7, r2
   31b0a:	0011      	movs	r1, r2
   31b0c:	0018      	movs	r0, r3
   31b0e:	4b10      	ldr	r3, [pc, #64]	; (31b50 <mqtt_connect_broker+0xe8>)
   31b10:	4798      	blx	r3
   31b12:	0003      	movs	r3, r0
   31b14:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   31b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   31b18:	b2da      	uxtb	r2, r3
   31b1a:	2368      	movs	r3, #104	; 0x68
   31b1c:	18fb      	adds	r3, r7, r3
   31b1e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   31b20:	68fb      	ldr	r3, [r7, #12]
   31b22:	681b      	ldr	r3, [r3, #0]
   31b24:	2b00      	cmp	r3, #0
   31b26:	d006      	beq.n	31b36 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   31b28:	68fb      	ldr	r3, [r7, #12]
   31b2a:	681b      	ldr	r3, [r3, #0]
   31b2c:	2268      	movs	r2, #104	; 0x68
   31b2e:	18ba      	adds	r2, r7, r2
   31b30:	68f8      	ldr	r0, [r7, #12]
   31b32:	2101      	movs	r1, #1
   31b34:	4798      	blx	r3
	
	module->isConnected = true;
   31b36:	68fb      	ldr	r3, [r7, #12]
   31b38:	2234      	movs	r2, #52	; 0x34
   31b3a:	2101      	movs	r1, #1
   31b3c:	5499      	strb	r1, [r3, r2]
	return rc;
   31b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   31b40:	0018      	movs	r0, r3
   31b42:	46bd      	mov	sp, r7
   31b44:	b01c      	add	sp, #112	; 0x70
   31b46:	bd80      	pop	{r7, pc}
   31b48:	0003cc9c 	.word	0x0003cc9c
   31b4c:	000377e9 	.word	0x000377e9
   31b50:	00030e91 	.word	0x00030e91

00031b54 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   31b54:	b580      	push	{r7, lr}
   31b56:	b084      	sub	sp, #16
   31b58:	af00      	add	r7, sp, #0
   31b5a:	6078      	str	r0, [r7, #4]
   31b5c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   31b5e:	687b      	ldr	r3, [r7, #4]
   31b60:	69db      	ldr	r3, [r3, #28]
   31b62:	0018      	movs	r0, r3
   31b64:	4b0c      	ldr	r3, [pc, #48]	; (31b98 <mqtt_disconnect+0x44>)
   31b66:	4798      	blx	r3
   31b68:	0003      	movs	r3, r0
   31b6a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   31b6c:	68fb      	ldr	r3, [r7, #12]
   31b6e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   31b70:	687b      	ldr	r3, [r7, #4]
   31b72:	681b      	ldr	r3, [r3, #0]
   31b74:	2b00      	cmp	r3, #0
   31b76:	d006      	beq.n	31b86 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   31b78:	687b      	ldr	r3, [r7, #4]
   31b7a:	681b      	ldr	r3, [r3, #0]
   31b7c:	2208      	movs	r2, #8
   31b7e:	18ba      	adds	r2, r7, r2
   31b80:	6878      	ldr	r0, [r7, #4]
   31b82:	2105      	movs	r1, #5
   31b84:	4798      	blx	r3
	
	module->isConnected = false;
   31b86:	687b      	ldr	r3, [r7, #4]
   31b88:	2234      	movs	r2, #52	; 0x34
   31b8a:	2100      	movs	r1, #0
   31b8c:	5499      	strb	r1, [r3, r2]
	return rc;
   31b8e:	68fb      	ldr	r3, [r7, #12]
}
   31b90:	0018      	movs	r0, r3
   31b92:	46bd      	mov	sp, r7
   31b94:	b004      	add	sp, #16
   31b96:	bd80      	pop	{r7, pc}
   31b98:	0003131d 	.word	0x0003131d

00031b9c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   31b9c:	b580      	push	{r7, lr}
   31b9e:	b08a      	sub	sp, #40	; 0x28
   31ba0:	af00      	add	r7, sp, #0
   31ba2:	60f8      	str	r0, [r7, #12]
   31ba4:	60b9      	str	r1, [r7, #8]
   31ba6:	607a      	str	r2, [r7, #4]
   31ba8:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   31baa:	2314      	movs	r3, #20
   31bac:	18fb      	adds	r3, r7, r3
   31bae:	2230      	movs	r2, #48	; 0x30
   31bb0:	18ba      	adds	r2, r7, r2
   31bb2:	7812      	ldrb	r2, [r2, #0]
   31bb4:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   31bb6:	2314      	movs	r3, #20
   31bb8:	18fb      	adds	r3, r7, r3
   31bba:	687a      	ldr	r2, [r7, #4]
   31bbc:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   31bbe:	2314      	movs	r3, #20
   31bc0:	18fb      	adds	r3, r7, r3
   31bc2:	683a      	ldr	r2, [r7, #0]
   31bc4:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   31bc6:	2314      	movs	r3, #20
   31bc8:	18fb      	adds	r3, r7, r3
   31bca:	2234      	movs	r2, #52	; 0x34
   31bcc:	18ba      	adds	r2, r7, r2
   31bce:	7812      	ldrb	r2, [r2, #0]
   31bd0:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   31bd2:	68fb      	ldr	r3, [r7, #12]
   31bd4:	69db      	ldr	r3, [r3, #28]
   31bd6:	2214      	movs	r2, #20
   31bd8:	18ba      	adds	r2, r7, r2
   31bda:	68b9      	ldr	r1, [r7, #8]
   31bdc:	0018      	movs	r0, r3
   31bde:	4b09      	ldr	r3, [pc, #36]	; (31c04 <mqtt_publish+0x68>)
   31be0:	4798      	blx	r3
   31be2:	0003      	movs	r3, r0
   31be4:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   31be6:	68fb      	ldr	r3, [r7, #12]
   31be8:	681b      	ldr	r3, [r3, #0]
   31bea:	2b00      	cmp	r3, #0
   31bec:	d005      	beq.n	31bfa <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   31bee:	68fb      	ldr	r3, [r7, #12]
   31bf0:	681b      	ldr	r3, [r3, #0]
   31bf2:	68f8      	ldr	r0, [r7, #12]
   31bf4:	2200      	movs	r2, #0
   31bf6:	2102      	movs	r1, #2
   31bf8:	4798      	blx	r3
	
	return rc;
   31bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31bfc:	0018      	movs	r0, r3
   31bfe:	46bd      	mov	sp, r7
   31c00:	b00a      	add	sp, #40	; 0x28
   31c02:	bd80      	pop	{r7, pc}
   31c04:	0003115d 	.word	0x0003115d

00031c08 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   31c08:	b590      	push	{r4, r7, lr}
   31c0a:	b087      	sub	sp, #28
   31c0c:	af00      	add	r7, sp, #0
   31c0e:	60f8      	str	r0, [r7, #12]
   31c10:	60b9      	str	r1, [r7, #8]
   31c12:	603b      	str	r3, [r7, #0]
   31c14:	1dfb      	adds	r3, r7, #7
   31c16:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   31c18:	68fb      	ldr	r3, [r7, #12]
   31c1a:	69d8      	ldr	r0, [r3, #28]
   31c1c:	683c      	ldr	r4, [r7, #0]
   31c1e:	1dfb      	adds	r3, r7, #7
   31c20:	781a      	ldrb	r2, [r3, #0]
   31c22:	68b9      	ldr	r1, [r7, #8]
   31c24:	0023      	movs	r3, r4
   31c26:	4c09      	ldr	r4, [pc, #36]	; (31c4c <mqtt_subscribe+0x44>)
   31c28:	47a0      	blx	r4
   31c2a:	0003      	movs	r3, r0
   31c2c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   31c2e:	68fb      	ldr	r3, [r7, #12]
   31c30:	681b      	ldr	r3, [r3, #0]
   31c32:	2b00      	cmp	r3, #0
   31c34:	d005      	beq.n	31c42 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   31c36:	68fb      	ldr	r3, [r7, #12]
   31c38:	681b      	ldr	r3, [r3, #0]
   31c3a:	68f8      	ldr	r0, [r7, #12]
   31c3c:	2200      	movs	r2, #0
   31c3e:	2103      	movs	r1, #3
   31c40:	4798      	blx	r3
	
	return rc;
   31c42:	697b      	ldr	r3, [r7, #20]
}
   31c44:	0018      	movs	r0, r3
   31c46:	46bd      	mov	sp, r7
   31c48:	b007      	add	sp, #28
   31c4a:	bd90      	pop	{r4, r7, pc}
   31c4c:	00030fd1 	.word	0x00030fd1

00031c50 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   31c50:	b580      	push	{r7, lr}
   31c52:	b082      	sub	sp, #8
   31c54:	af00      	add	r7, sp, #0
   31c56:	6078      	str	r0, [r7, #4]
   31c58:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   31c5a:	687b      	ldr	r3, [r7, #4]
   31c5c:	69db      	ldr	r3, [r3, #28]
   31c5e:	683a      	ldr	r2, [r7, #0]
   31c60:	0011      	movs	r1, r2
   31c62:	0018      	movs	r0, r3
   31c64:	4b03      	ldr	r3, [pc, #12]	; (31c74 <mqtt_yield+0x24>)
   31c66:	4798      	blx	r3
   31c68:	0003      	movs	r3, r0
   31c6a:	0018      	movs	r0, r3
   31c6c:	46bd      	mov	sp, r7
   31c6e:	b002      	add	sp, #8
   31c70:	bd80      	pop	{r7, pc}
   31c72:	46c0      	nop			; (mov r8, r8)
   31c74:	00030dd9 	.word	0x00030dd9

00031c78 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   31c78:	b590      	push	{r4, r7, lr}
   31c7a:	b085      	sub	sp, #20
   31c7c:	af00      	add	r7, sp, #0
   31c7e:	6078      	str	r0, [r7, #4]
	int len = 0;
   31c80:	2300      	movs	r3, #0
   31c82:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   31c84:	687b      	ldr	r3, [r7, #4]
   31c86:	7a1b      	ldrb	r3, [r3, #8]
   31c88:	2b03      	cmp	r3, #3
   31c8a:	d102      	bne.n	31c92 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   31c8c:	230c      	movs	r3, #12
   31c8e:	60fb      	str	r3, [r7, #12]
   31c90:	e005      	b.n	31c9e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   31c92:	687b      	ldr	r3, [r7, #4]
   31c94:	7a1b      	ldrb	r3, [r3, #8]
   31c96:	2b04      	cmp	r3, #4
   31c98:	d101      	bne.n	31c9e <MQTTSerialize_connectLength+0x26>
		len = 10;
   31c9a:	230a      	movs	r3, #10
   31c9c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   31c9e:	687b      	ldr	r3, [r7, #4]
   31ca0:	68d8      	ldr	r0, [r3, #12]
   31ca2:	6919      	ldr	r1, [r3, #16]
   31ca4:	695a      	ldr	r2, [r3, #20]
   31ca6:	4b25      	ldr	r3, [pc, #148]	; (31d3c <MQTTSerialize_connectLength+0xc4>)
   31ca8:	4798      	blx	r3
   31caa:	0003      	movs	r3, r0
   31cac:	3302      	adds	r3, #2
   31cae:	68fa      	ldr	r2, [r7, #12]
   31cb0:	18d3      	adds	r3, r2, r3
   31cb2:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   31cb4:	687b      	ldr	r3, [r7, #4]
   31cb6:	7edb      	ldrb	r3, [r3, #27]
   31cb8:	2b00      	cmp	r3, #0
   31cba:	d013      	beq.n	31ce4 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   31cbc:	687b      	ldr	r3, [r7, #4]
   31cbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
   31cc0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   31cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   31cc4:	4b1d      	ldr	r3, [pc, #116]	; (31d3c <MQTTSerialize_connectLength+0xc4>)
   31cc6:	4798      	blx	r3
   31cc8:	0003      	movs	r3, r0
   31cca:	1c9c      	adds	r4, r3, #2
   31ccc:	687b      	ldr	r3, [r7, #4]
   31cce:	6b18      	ldr	r0, [r3, #48]	; 0x30
   31cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   31cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   31cd4:	4b19      	ldr	r3, [pc, #100]	; (31d3c <MQTTSerialize_connectLength+0xc4>)
   31cd6:	4798      	blx	r3
   31cd8:	0003      	movs	r3, r0
   31cda:	18e3      	adds	r3, r4, r3
   31cdc:	3302      	adds	r3, #2
   31cde:	68fa      	ldr	r2, [r7, #12]
   31ce0:	18d3      	adds	r3, r2, r3
   31ce2:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   31ce4:	687b      	ldr	r3, [r7, #4]
   31ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   31ce8:	2b00      	cmp	r3, #0
   31cea:	d103      	bne.n	31cf4 <MQTTSerialize_connectLength+0x7c>
   31cec:	687b      	ldr	r3, [r7, #4]
   31cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31cf0:	2b00      	cmp	r3, #0
   31cf2:	d00a      	beq.n	31d0a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   31cf4:	687b      	ldr	r3, [r7, #4]
   31cf6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   31cf8:	6c59      	ldr	r1, [r3, #68]	; 0x44
   31cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   31cfc:	4b0f      	ldr	r3, [pc, #60]	; (31d3c <MQTTSerialize_connectLength+0xc4>)
   31cfe:	4798      	blx	r3
   31d00:	0003      	movs	r3, r0
   31d02:	3302      	adds	r3, #2
   31d04:	68fa      	ldr	r2, [r7, #12]
   31d06:	18d3      	adds	r3, r2, r3
   31d08:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   31d0a:	687b      	ldr	r3, [r7, #4]
   31d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31d0e:	2b00      	cmp	r3, #0
   31d10:	d103      	bne.n	31d1a <MQTTSerialize_connectLength+0xa2>
   31d12:	687b      	ldr	r3, [r7, #4]
   31d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31d16:	2b00      	cmp	r3, #0
   31d18:	d00a      	beq.n	31d30 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   31d1a:	687b      	ldr	r3, [r7, #4]
   31d1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   31d1e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   31d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31d22:	4b06      	ldr	r3, [pc, #24]	; (31d3c <MQTTSerialize_connectLength+0xc4>)
   31d24:	4798      	blx	r3
   31d26:	0003      	movs	r3, r0
   31d28:	3302      	adds	r3, #2
   31d2a:	68fa      	ldr	r2, [r7, #12]
   31d2c:	18d3      	adds	r3, r2, r3
   31d2e:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   31d30:	68fb      	ldr	r3, [r7, #12]
}
   31d32:	0018      	movs	r0, r3
   31d34:	46bd      	mov	sp, r7
   31d36:	b005      	add	sp, #20
   31d38:	bd90      	pop	{r4, r7, pc}
   31d3a:	46c0      	nop			; (mov r8, r8)
   31d3c:	000326e9 	.word	0x000326e9

00031d40 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   31d40:	b590      	push	{r4, r7, lr}
   31d42:	b08b      	sub	sp, #44	; 0x2c
   31d44:	af00      	add	r7, sp, #0
   31d46:	60f8      	str	r0, [r7, #12]
   31d48:	60b9      	str	r1, [r7, #8]
   31d4a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   31d4c:	68fb      	ldr	r3, [r7, #12]
   31d4e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   31d50:	2300      	movs	r3, #0
   31d52:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   31d54:	2300      	movs	r3, #0
   31d56:	617b      	str	r3, [r7, #20]
	int len = 0;
   31d58:	2300      	movs	r3, #0
   31d5a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   31d5c:	2301      	movs	r3, #1
   31d5e:	425b      	negs	r3, r3
   31d60:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   31d62:	687b      	ldr	r3, [r7, #4]
   31d64:	0018      	movs	r0, r3
   31d66:	4b8c      	ldr	r3, [pc, #560]	; (31f98 <MQTTSerialize_connect+0x258>)
   31d68:	4798      	blx	r3
   31d6a:	0003      	movs	r3, r0
   31d6c:	623b      	str	r3, [r7, #32]
   31d6e:	6a3b      	ldr	r3, [r7, #32]
   31d70:	0018      	movs	r0, r3
   31d72:	4b8a      	ldr	r3, [pc, #552]	; (31f9c <MQTTSerialize_connect+0x25c>)
   31d74:	4798      	blx	r3
   31d76:	0002      	movs	r2, r0
   31d78:	68bb      	ldr	r3, [r7, #8]
   31d7a:	429a      	cmp	r2, r3
   31d7c:	dd03      	ble.n	31d86 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31d7e:	2302      	movs	r3, #2
   31d80:	425b      	negs	r3, r3
   31d82:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   31d84:	e103      	b.n	31f8e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   31d86:	2318      	movs	r3, #24
   31d88:	18fb      	adds	r3, r7, r3
   31d8a:	2200      	movs	r2, #0
   31d8c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   31d8e:	2318      	movs	r3, #24
   31d90:	18fb      	adds	r3, r7, r3
   31d92:	781a      	ldrb	r2, [r3, #0]
   31d94:	210f      	movs	r1, #15
   31d96:	400a      	ands	r2, r1
   31d98:	1c11      	adds	r1, r2, #0
   31d9a:	2210      	movs	r2, #16
   31d9c:	430a      	orrs	r2, r1
   31d9e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31da0:	2318      	movs	r3, #24
   31da2:	18fb      	adds	r3, r7, r3
   31da4:	781a      	ldrb	r2, [r3, #0]
   31da6:	231c      	movs	r3, #28
   31da8:	18fb      	adds	r3, r7, r3
   31daa:	0011      	movs	r1, r2
   31dac:	0018      	movs	r0, r3
   31dae:	4b7c      	ldr	r3, [pc, #496]	; (31fa0 <MQTTSerialize_connect+0x260>)
   31db0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   31db2:	69fb      	ldr	r3, [r7, #28]
   31db4:	6a3a      	ldr	r2, [r7, #32]
   31db6:	0011      	movs	r1, r2
   31db8:	0018      	movs	r0, r3
   31dba:	4b7a      	ldr	r3, [pc, #488]	; (31fa4 <MQTTSerialize_connect+0x264>)
   31dbc:	4798      	blx	r3
   31dbe:	0002      	movs	r2, r0
   31dc0:	69fb      	ldr	r3, [r7, #28]
   31dc2:	189b      	adds	r3, r3, r2
   31dc4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   31dc6:	687b      	ldr	r3, [r7, #4]
   31dc8:	7a1b      	ldrb	r3, [r3, #8]
   31dca:	2b04      	cmp	r3, #4
   31dcc:	d10d      	bne.n	31dea <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   31dce:	4a76      	ldr	r2, [pc, #472]	; (31fa8 <MQTTSerialize_connect+0x268>)
   31dd0:	231c      	movs	r3, #28
   31dd2:	18fb      	adds	r3, r7, r3
   31dd4:	0011      	movs	r1, r2
   31dd6:	0018      	movs	r0, r3
   31dd8:	4b74      	ldr	r3, [pc, #464]	; (31fac <MQTTSerialize_connect+0x26c>)
   31dda:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   31ddc:	231c      	movs	r3, #28
   31dde:	18fb      	adds	r3, r7, r3
   31de0:	2104      	movs	r1, #4
   31de2:	0018      	movs	r0, r3
   31de4:	4b6e      	ldr	r3, [pc, #440]	; (31fa0 <MQTTSerialize_connect+0x260>)
   31de6:	4798      	blx	r3
   31de8:	e00c      	b.n	31e04 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   31dea:	4a71      	ldr	r2, [pc, #452]	; (31fb0 <MQTTSerialize_connect+0x270>)
   31dec:	231c      	movs	r3, #28
   31dee:	18fb      	adds	r3, r7, r3
   31df0:	0011      	movs	r1, r2
   31df2:	0018      	movs	r0, r3
   31df4:	4b6d      	ldr	r3, [pc, #436]	; (31fac <MQTTSerialize_connect+0x26c>)
   31df6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   31df8:	231c      	movs	r3, #28
   31dfa:	18fb      	adds	r3, r7, r3
   31dfc:	2103      	movs	r1, #3
   31dfe:	0018      	movs	r0, r3
   31e00:	4b67      	ldr	r3, [pc, #412]	; (31fa0 <MQTTSerialize_connect+0x260>)
   31e02:	4798      	blx	r3
	}

	flags.all = 0;
   31e04:	2314      	movs	r3, #20
   31e06:	18fb      	adds	r3, r7, r3
   31e08:	2200      	movs	r2, #0
   31e0a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   31e0c:	687b      	ldr	r3, [r7, #4]
   31e0e:	7e9b      	ldrb	r3, [r3, #26]
   31e10:	1c1a      	adds	r2, r3, #0
   31e12:	2301      	movs	r3, #1
   31e14:	4013      	ands	r3, r2
   31e16:	b2da      	uxtb	r2, r3
   31e18:	2314      	movs	r3, #20
   31e1a:	18fb      	adds	r3, r7, r3
   31e1c:	2101      	movs	r1, #1
   31e1e:	400a      	ands	r2, r1
   31e20:	1890      	adds	r0, r2, r2
   31e22:	781a      	ldrb	r2, [r3, #0]
   31e24:	2102      	movs	r1, #2
   31e26:	438a      	bics	r2, r1
   31e28:	1c11      	adds	r1, r2, #0
   31e2a:	1c02      	adds	r2, r0, #0
   31e2c:	430a      	orrs	r2, r1
   31e2e:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   31e30:	687b      	ldr	r3, [r7, #4]
   31e32:	7edb      	ldrb	r3, [r3, #27]
   31e34:	1e5a      	subs	r2, r3, #1
   31e36:	4193      	sbcs	r3, r2
   31e38:	b2da      	uxtb	r2, r3
   31e3a:	2314      	movs	r3, #20
   31e3c:	18fb      	adds	r3, r7, r3
   31e3e:	2101      	movs	r1, #1
   31e40:	400a      	ands	r2, r1
   31e42:	0090      	lsls	r0, r2, #2
   31e44:	781a      	ldrb	r2, [r3, #0]
   31e46:	2104      	movs	r1, #4
   31e48:	438a      	bics	r2, r1
   31e4a:	1c11      	adds	r1, r2, #0
   31e4c:	1c02      	adds	r2, r0, #0
   31e4e:	430a      	orrs	r2, r1
   31e50:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   31e52:	2314      	movs	r3, #20
   31e54:	18fb      	adds	r3, r7, r3
   31e56:	781b      	ldrb	r3, [r3, #0]
   31e58:	2204      	movs	r2, #4
   31e5a:	4013      	ands	r3, r2
   31e5c:	b2db      	uxtb	r3, r3
   31e5e:	2b00      	cmp	r3, #0
   31e60:	d025      	beq.n	31eae <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   31e62:	687b      	ldr	r3, [r7, #4]
   31e64:	223d      	movs	r2, #61	; 0x3d
   31e66:	5c9b      	ldrb	r3, [r3, r2]
   31e68:	1c1a      	adds	r2, r3, #0
   31e6a:	2303      	movs	r3, #3
   31e6c:	4013      	ands	r3, r2
   31e6e:	b2da      	uxtb	r2, r3
   31e70:	2314      	movs	r3, #20
   31e72:	18fb      	adds	r3, r7, r3
   31e74:	2103      	movs	r1, #3
   31e76:	400a      	ands	r2, r1
   31e78:	00d0      	lsls	r0, r2, #3
   31e7a:	781a      	ldrb	r2, [r3, #0]
   31e7c:	2118      	movs	r1, #24
   31e7e:	438a      	bics	r2, r1
   31e80:	1c11      	adds	r1, r2, #0
   31e82:	1c02      	adds	r2, r0, #0
   31e84:	430a      	orrs	r2, r1
   31e86:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   31e88:	687b      	ldr	r3, [r7, #4]
   31e8a:	223c      	movs	r2, #60	; 0x3c
   31e8c:	5c9b      	ldrb	r3, [r3, r2]
   31e8e:	1c1a      	adds	r2, r3, #0
   31e90:	2301      	movs	r3, #1
   31e92:	4013      	ands	r3, r2
   31e94:	b2da      	uxtb	r2, r3
   31e96:	2314      	movs	r3, #20
   31e98:	18fb      	adds	r3, r7, r3
   31e9a:	2101      	movs	r1, #1
   31e9c:	400a      	ands	r2, r1
   31e9e:	0150      	lsls	r0, r2, #5
   31ea0:	781a      	ldrb	r2, [r3, #0]
   31ea2:	2120      	movs	r1, #32
   31ea4:	438a      	bics	r2, r1
   31ea6:	1c11      	adds	r1, r2, #0
   31ea8:	1c02      	adds	r2, r0, #0
   31eaa:	430a      	orrs	r2, r1
   31eac:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   31eae:	687b      	ldr	r3, [r7, #4]
   31eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   31eb2:	2b00      	cmp	r3, #0
   31eb4:	d103      	bne.n	31ebe <MQTTSerialize_connect+0x17e>
   31eb6:	687b      	ldr	r3, [r7, #4]
   31eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31eba:	2b00      	cmp	r3, #0
   31ebc:	d006      	beq.n	31ecc <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   31ebe:	2314      	movs	r3, #20
   31ec0:	18fb      	adds	r3, r7, r3
   31ec2:	781a      	ldrb	r2, [r3, #0]
   31ec4:	2180      	movs	r1, #128	; 0x80
   31ec6:	4249      	negs	r1, r1
   31ec8:	430a      	orrs	r2, r1
   31eca:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   31ecc:	687b      	ldr	r3, [r7, #4]
   31ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ed0:	2b00      	cmp	r3, #0
   31ed2:	d103      	bne.n	31edc <MQTTSerialize_connect+0x19c>
   31ed4:	687b      	ldr	r3, [r7, #4]
   31ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31ed8:	2b00      	cmp	r3, #0
   31eda:	d005      	beq.n	31ee8 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   31edc:	2314      	movs	r3, #20
   31ede:	18fb      	adds	r3, r7, r3
   31ee0:	781a      	ldrb	r2, [r3, #0]
   31ee2:	2140      	movs	r1, #64	; 0x40
   31ee4:	430a      	orrs	r2, r1
   31ee6:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   31ee8:	2314      	movs	r3, #20
   31eea:	18fb      	adds	r3, r7, r3
   31eec:	781a      	ldrb	r2, [r3, #0]
   31eee:	231c      	movs	r3, #28
   31ef0:	18fb      	adds	r3, r7, r3
   31ef2:	0011      	movs	r1, r2
   31ef4:	0018      	movs	r0, r3
   31ef6:	4b2a      	ldr	r3, [pc, #168]	; (31fa0 <MQTTSerialize_connect+0x260>)
   31ef8:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   31efa:	687b      	ldr	r3, [r7, #4]
   31efc:	8b1b      	ldrh	r3, [r3, #24]
   31efe:	001a      	movs	r2, r3
   31f00:	231c      	movs	r3, #28
   31f02:	18fb      	adds	r3, r7, r3
   31f04:	0011      	movs	r1, r2
   31f06:	0018      	movs	r0, r3
   31f08:	4b2a      	ldr	r3, [pc, #168]	; (31fb4 <MQTTSerialize_connect+0x274>)
   31f0a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   31f0c:	687b      	ldr	r3, [r7, #4]
   31f0e:	221c      	movs	r2, #28
   31f10:	18b8      	adds	r0, r7, r2
   31f12:	68d9      	ldr	r1, [r3, #12]
   31f14:	691a      	ldr	r2, [r3, #16]
   31f16:	695b      	ldr	r3, [r3, #20]
   31f18:	4c27      	ldr	r4, [pc, #156]	; (31fb8 <MQTTSerialize_connect+0x278>)
   31f1a:	47a0      	blx	r4
	if (options->willFlag)
   31f1c:	687b      	ldr	r3, [r7, #4]
   31f1e:	7edb      	ldrb	r3, [r3, #27]
   31f20:	2b00      	cmp	r3, #0
   31f22:	d00f      	beq.n	31f44 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   31f24:	687b      	ldr	r3, [r7, #4]
   31f26:	221c      	movs	r2, #28
   31f28:	18b8      	adds	r0, r7, r2
   31f2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   31f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   31f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   31f30:	4c21      	ldr	r4, [pc, #132]	; (31fb8 <MQTTSerialize_connect+0x278>)
   31f32:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   31f34:	687b      	ldr	r3, [r7, #4]
   31f36:	221c      	movs	r2, #28
   31f38:	18b8      	adds	r0, r7, r2
   31f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   31f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   31f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   31f40:	4c1d      	ldr	r4, [pc, #116]	; (31fb8 <MQTTSerialize_connect+0x278>)
   31f42:	47a0      	blx	r4
	}
	if (flags.bits.username)
   31f44:	2314      	movs	r3, #20
   31f46:	18fb      	adds	r3, r7, r3
   31f48:	781b      	ldrb	r3, [r3, #0]
   31f4a:	227f      	movs	r2, #127	; 0x7f
   31f4c:	4393      	bics	r3, r2
   31f4e:	b2db      	uxtb	r3, r3
   31f50:	2b00      	cmp	r3, #0
   31f52:	d007      	beq.n	31f64 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   31f54:	687b      	ldr	r3, [r7, #4]
   31f56:	221c      	movs	r2, #28
   31f58:	18b8      	adds	r0, r7, r2
   31f5a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   31f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31f60:	4c15      	ldr	r4, [pc, #84]	; (31fb8 <MQTTSerialize_connect+0x278>)
   31f62:	47a0      	blx	r4
	if (flags.bits.password)
   31f64:	2314      	movs	r3, #20
   31f66:	18fb      	adds	r3, r7, r3
   31f68:	781b      	ldrb	r3, [r3, #0]
   31f6a:	2240      	movs	r2, #64	; 0x40
   31f6c:	4013      	ands	r3, r2
   31f6e:	b2db      	uxtb	r3, r3
   31f70:	2b00      	cmp	r3, #0
   31f72:	d007      	beq.n	31f84 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   31f74:	687b      	ldr	r3, [r7, #4]
   31f76:	221c      	movs	r2, #28
   31f78:	18b8      	adds	r0, r7, r2
   31f7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   31f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   31f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31f80:	4c0d      	ldr	r4, [pc, #52]	; (31fb8 <MQTTSerialize_connect+0x278>)
   31f82:	47a0      	blx	r4

	rc = ptr - buf;
   31f84:	69fb      	ldr	r3, [r7, #28]
   31f86:	001a      	movs	r2, r3
   31f88:	68fb      	ldr	r3, [r7, #12]
   31f8a:	1ad3      	subs	r3, r2, r3
   31f8c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   31f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31f90:	0018      	movs	r0, r3
   31f92:	46bd      	mov	sp, r7
   31f94:	b00b      	add	sp, #44	; 0x2c
   31f96:	bd90      	pop	{r4, r7, pc}
   31f98:	00031c79 	.word	0x00031c79
   31f9c:	0003240d 	.word	0x0003240d
   31fa0:	0003252f 	.word	0x0003252f
   31fa4:	00032315 	.word	0x00032315
   31fa8:	0003ccf4 	.word	0x0003ccf4
   31fac:	000325b1 	.word	0x000325b1
   31fb0:	0003ccfc 	.word	0x0003ccfc
   31fb4:	00032559 	.word	0x00032559
   31fb8:	00032601 	.word	0x00032601

00031fbc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   31fbc:	b580      	push	{r7, lr}
   31fbe:	b08a      	sub	sp, #40	; 0x28
   31fc0:	af00      	add	r7, sp, #0
   31fc2:	60f8      	str	r0, [r7, #12]
   31fc4:	60b9      	str	r1, [r7, #8]
   31fc6:	607a      	str	r2, [r7, #4]
   31fc8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31fca:	2300      	movs	r3, #0
   31fcc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31fce:	687b      	ldr	r3, [r7, #4]
   31fd0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31fd2:	2300      	movs	r3, #0
   31fd4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31fd6:	2300      	movs	r3, #0
   31fd8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   31fda:	2300      	movs	r3, #0
   31fdc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31fde:	2318      	movs	r3, #24
   31fe0:	18fb      	adds	r3, r7, r3
   31fe2:	0018      	movs	r0, r3
   31fe4:	4b25      	ldr	r3, [pc, #148]	; (3207c <MQTTDeserialize_connack+0xc0>)
   31fe6:	4798      	blx	r3
   31fe8:	0003      	movs	r3, r0
   31fea:	001a      	movs	r2, r3
   31fec:	231c      	movs	r3, #28
   31fee:	18fb      	adds	r3, r7, r3
   31ff0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   31ff2:	231c      	movs	r3, #28
   31ff4:	18fb      	adds	r3, r7, r3
   31ff6:	781b      	ldrb	r3, [r3, #0]
   31ff8:	220f      	movs	r2, #15
   31ffa:	4393      	bics	r3, r2
   31ffc:	b2db      	uxtb	r3, r3
   31ffe:	2b20      	cmp	r3, #32
   32000:	d134      	bne.n	3206c <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32002:	69bb      	ldr	r3, [r7, #24]
   32004:	2214      	movs	r2, #20
   32006:	18ba      	adds	r2, r7, r2
   32008:	0011      	movs	r1, r2
   3200a:	0018      	movs	r0, r3
   3200c:	4b1c      	ldr	r3, [pc, #112]	; (32080 <MQTTDeserialize_connack+0xc4>)
   3200e:	4798      	blx	r3
   32010:	0003      	movs	r3, r0
   32012:	627b      	str	r3, [r7, #36]	; 0x24
   32014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32016:	69bb      	ldr	r3, [r7, #24]
   32018:	189b      	adds	r3, r3, r2
   3201a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   3201c:	69bb      	ldr	r3, [r7, #24]
   3201e:	697a      	ldr	r2, [r7, #20]
   32020:	189b      	adds	r3, r3, r2
   32022:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32024:	6a3b      	ldr	r3, [r7, #32]
   32026:	69ba      	ldr	r2, [r7, #24]
   32028:	1a9b      	subs	r3, r3, r2
   3202a:	2b01      	cmp	r3, #1
   3202c:	dd20      	ble.n	32070 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   3202e:	2318      	movs	r3, #24
   32030:	18fb      	adds	r3, r7, r3
   32032:	0018      	movs	r0, r3
   32034:	4b11      	ldr	r3, [pc, #68]	; (3207c <MQTTDeserialize_connack+0xc0>)
   32036:	4798      	blx	r3
   32038:	0003      	movs	r3, r0
   3203a:	001a      	movs	r2, r3
   3203c:	2310      	movs	r3, #16
   3203e:	18fb      	adds	r3, r7, r3
   32040:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   32042:	2310      	movs	r3, #16
   32044:	18fb      	adds	r3, r7, r3
   32046:	781b      	ldrb	r3, [r3, #0]
   32048:	061b      	lsls	r3, r3, #24
   3204a:	0fdb      	lsrs	r3, r3, #31
   3204c:	b2db      	uxtb	r3, r3
   3204e:	001a      	movs	r2, r3
   32050:	68fb      	ldr	r3, [r7, #12]
   32052:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   32054:	2318      	movs	r3, #24
   32056:	18fb      	adds	r3, r7, r3
   32058:	0018      	movs	r0, r3
   3205a:	4b08      	ldr	r3, [pc, #32]	; (3207c <MQTTDeserialize_connack+0xc0>)
   3205c:	4798      	blx	r3
   3205e:	0003      	movs	r3, r0
   32060:	001a      	movs	r2, r3
   32062:	68bb      	ldr	r3, [r7, #8]
   32064:	701a      	strb	r2, [r3, #0]

	rc = 1;
   32066:	2301      	movs	r3, #1
   32068:	627b      	str	r3, [r7, #36]	; 0x24
   3206a:	e002      	b.n	32072 <MQTTDeserialize_connack+0xb6>
		goto exit;
   3206c:	46c0      	nop			; (mov r8, r8)
   3206e:	e000      	b.n	32072 <MQTTDeserialize_connack+0xb6>
		goto exit;
   32070:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32074:	0018      	movs	r0, r3
   32076:	46bd      	mov	sp, r7
   32078:	b00a      	add	sp, #40	; 0x28
   3207a:	bd80      	pop	{r7, pc}
   3207c:	00032503 	.word	0x00032503
   32080:	0003249d 	.word	0x0003249d

00032084 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   32084:	b580      	push	{r7, lr}
   32086:	b088      	sub	sp, #32
   32088:	af00      	add	r7, sp, #0
   3208a:	60f8      	str	r0, [r7, #12]
   3208c:	60b9      	str	r1, [r7, #8]
   3208e:	1dfb      	adds	r3, r7, #7
   32090:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   32092:	2300      	movs	r3, #0
   32094:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   32096:	2301      	movs	r3, #1
   32098:	425b      	negs	r3, r3
   3209a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3209c:	68fb      	ldr	r3, [r7, #12]
   3209e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   320a0:	68bb      	ldr	r3, [r7, #8]
   320a2:	2b01      	cmp	r3, #1
   320a4:	dc03      	bgt.n	320ae <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   320a6:	2302      	movs	r3, #2
   320a8:	425b      	negs	r3, r3
   320aa:	61fb      	str	r3, [r7, #28]
		goto exit;
   320ac:	e029      	b.n	32102 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   320ae:	2318      	movs	r3, #24
   320b0:	18fb      	adds	r3, r7, r3
   320b2:	2200      	movs	r2, #0
   320b4:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   320b6:	1dfb      	adds	r3, r7, #7
   320b8:	781b      	ldrb	r3, [r3, #0]
   320ba:	220f      	movs	r2, #15
   320bc:	4013      	ands	r3, r2
   320be:	b2da      	uxtb	r2, r3
   320c0:	2318      	movs	r3, #24
   320c2:	18fb      	adds	r3, r7, r3
   320c4:	0110      	lsls	r0, r2, #4
   320c6:	781a      	ldrb	r2, [r3, #0]
   320c8:	210f      	movs	r1, #15
   320ca:	400a      	ands	r2, r1
   320cc:	1c11      	adds	r1, r2, #0
   320ce:	1c02      	adds	r2, r0, #0
   320d0:	430a      	orrs	r2, r1
   320d2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   320d4:	2318      	movs	r3, #24
   320d6:	18fb      	adds	r3, r7, r3
   320d8:	781a      	ldrb	r2, [r3, #0]
   320da:	2314      	movs	r3, #20
   320dc:	18fb      	adds	r3, r7, r3
   320de:	0011      	movs	r1, r2
   320e0:	0018      	movs	r0, r3
   320e2:	4b0a      	ldr	r3, [pc, #40]	; (3210c <MQTTSerialize_zero+0x88>)
   320e4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   320e6:	697b      	ldr	r3, [r7, #20]
   320e8:	2100      	movs	r1, #0
   320ea:	0018      	movs	r0, r3
   320ec:	4b08      	ldr	r3, [pc, #32]	; (32110 <MQTTSerialize_zero+0x8c>)
   320ee:	4798      	blx	r3
   320f0:	0002      	movs	r2, r0
   320f2:	697b      	ldr	r3, [r7, #20]
   320f4:	189b      	adds	r3, r3, r2
   320f6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   320f8:	697b      	ldr	r3, [r7, #20]
   320fa:	001a      	movs	r2, r3
   320fc:	68fb      	ldr	r3, [r7, #12]
   320fe:	1ad3      	subs	r3, r2, r3
   32100:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32102:	69fb      	ldr	r3, [r7, #28]
}
   32104:	0018      	movs	r0, r3
   32106:	46bd      	mov	sp, r7
   32108:	b008      	add	sp, #32
   3210a:	bd80      	pop	{r7, pc}
   3210c:	0003252f 	.word	0x0003252f
   32110:	00032315 	.word	0x00032315

00032114 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   32114:	b580      	push	{r7, lr}
   32116:	b082      	sub	sp, #8
   32118:	af00      	add	r7, sp, #0
   3211a:	6078      	str	r0, [r7, #4]
   3211c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   3211e:	6839      	ldr	r1, [r7, #0]
   32120:	687b      	ldr	r3, [r7, #4]
   32122:	220e      	movs	r2, #14
   32124:	0018      	movs	r0, r3
   32126:	4b03      	ldr	r3, [pc, #12]	; (32134 <MQTTSerialize_disconnect+0x20>)
   32128:	4798      	blx	r3
   3212a:	0003      	movs	r3, r0
}
   3212c:	0018      	movs	r0, r3
   3212e:	46bd      	mov	sp, r7
   32130:	b002      	add	sp, #8
   32132:	bd80      	pop	{r7, pc}
   32134:	00032085 	.word	0x00032085

00032138 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   32138:	b580      	push	{r7, lr}
   3213a:	b082      	sub	sp, #8
   3213c:	af00      	add	r7, sp, #0
   3213e:	6078      	str	r0, [r7, #4]
   32140:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   32142:	6839      	ldr	r1, [r7, #0]
   32144:	687b      	ldr	r3, [r7, #4]
   32146:	220c      	movs	r2, #12
   32148:	0018      	movs	r0, r3
   3214a:	4b03      	ldr	r3, [pc, #12]	; (32158 <MQTTSerialize_pingreq+0x20>)
   3214c:	4798      	blx	r3
   3214e:	0003      	movs	r3, r0
}
   32150:	0018      	movs	r0, r3
   32152:	46bd      	mov	sp, r7
   32154:	b002      	add	sp, #8
   32156:	bd80      	pop	{r7, pc}
   32158:	00032085 	.word	0x00032085

0003215c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   3215c:	b580      	push	{r7, lr}
   3215e:	b08a      	sub	sp, #40	; 0x28
   32160:	af00      	add	r7, sp, #0
   32162:	60f8      	str	r0, [r7, #12]
   32164:	60b9      	str	r1, [r7, #8]
   32166:	607a      	str	r2, [r7, #4]
   32168:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3216a:	2300      	movs	r3, #0
   3216c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3216e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32170:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32172:	2300      	movs	r3, #0
   32174:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32176:	2300      	movs	r3, #0
   32178:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   3217a:	2300      	movs	r3, #0
   3217c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3217e:	2318      	movs	r3, #24
   32180:	18fb      	adds	r3, r7, r3
   32182:	0018      	movs	r0, r3
   32184:	4b32      	ldr	r3, [pc, #200]	; (32250 <MQTTDeserialize_publish+0xf4>)
   32186:	4798      	blx	r3
   32188:	0003      	movs	r3, r0
   3218a:	001a      	movs	r2, r3
   3218c:	231c      	movs	r3, #28
   3218e:	18fb      	adds	r3, r7, r3
   32190:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   32192:	231c      	movs	r3, #28
   32194:	18fb      	adds	r3, r7, r3
   32196:	781b      	ldrb	r3, [r3, #0]
   32198:	220f      	movs	r2, #15
   3219a:	4393      	bics	r3, r2
   3219c:	b2db      	uxtb	r3, r3
   3219e:	2b30      	cmp	r3, #48	; 0x30
   321a0:	d150      	bne.n	32244 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   321a2:	231c      	movs	r3, #28
   321a4:	18fb      	adds	r3, r7, r3
   321a6:	781b      	ldrb	r3, [r3, #0]
   321a8:	071b      	lsls	r3, r3, #28
   321aa:	0fdb      	lsrs	r3, r3, #31
   321ac:	b2db      	uxtb	r3, r3
   321ae:	001a      	movs	r2, r3
   321b0:	68fb      	ldr	r3, [r7, #12]
   321b2:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   321b4:	231c      	movs	r3, #28
   321b6:	18fb      	adds	r3, r7, r3
   321b8:	781b      	ldrb	r3, [r3, #0]
   321ba:	075b      	lsls	r3, r3, #29
   321bc:	0f9b      	lsrs	r3, r3, #30
   321be:	b2db      	uxtb	r3, r3
   321c0:	001a      	movs	r2, r3
   321c2:	68bb      	ldr	r3, [r7, #8]
   321c4:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   321c6:	231c      	movs	r3, #28
   321c8:	18fb      	adds	r3, r7, r3
   321ca:	781b      	ldrb	r3, [r3, #0]
   321cc:	07db      	lsls	r3, r3, #31
   321ce:	0fdb      	lsrs	r3, r3, #31
   321d0:	b2db      	uxtb	r3, r3
   321d2:	001a      	movs	r2, r3
   321d4:	687b      	ldr	r3, [r7, #4]
   321d6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   321d8:	69bb      	ldr	r3, [r7, #24]
   321da:	2214      	movs	r2, #20
   321dc:	18ba      	adds	r2, r7, r2
   321de:	0011      	movs	r1, r2
   321e0:	0018      	movs	r0, r3
   321e2:	4b1c      	ldr	r3, [pc, #112]	; (32254 <MQTTDeserialize_publish+0xf8>)
   321e4:	4798      	blx	r3
   321e6:	0003      	movs	r3, r0
   321e8:	627b      	str	r3, [r7, #36]	; 0x24
   321ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   321ec:	69bb      	ldr	r3, [r7, #24]
   321ee:	189b      	adds	r3, r3, r2
   321f0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   321f2:	69bb      	ldr	r3, [r7, #24]
   321f4:	697a      	ldr	r2, [r7, #20]
   321f6:	189b      	adds	r3, r3, r2
   321f8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   321fa:	6a3a      	ldr	r2, [r7, #32]
   321fc:	2318      	movs	r3, #24
   321fe:	18f9      	adds	r1, r7, r3
   32200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32202:	0018      	movs	r0, r3
   32204:	4b14      	ldr	r3, [pc, #80]	; (32258 <MQTTDeserialize_publish+0xfc>)
   32206:	4798      	blx	r3
   32208:	1e03      	subs	r3, r0, #0
   3220a:	d01c      	beq.n	32246 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   3220c:	6a3b      	ldr	r3, [r7, #32]
   3220e:	69ba      	ldr	r2, [r7, #24]
   32210:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   32212:	d418      	bmi.n	32246 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   32214:	68bb      	ldr	r3, [r7, #8]
   32216:	681b      	ldr	r3, [r3, #0]
   32218:	2b00      	cmp	r3, #0
   3221a:	dd08      	ble.n	3222e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   3221c:	2318      	movs	r3, #24
   3221e:	18fb      	adds	r3, r7, r3
   32220:	0018      	movs	r0, r3
   32222:	4b0e      	ldr	r3, [pc, #56]	; (3225c <MQTTDeserialize_publish+0x100>)
   32224:	4798      	blx	r3
   32226:	0003      	movs	r3, r0
   32228:	b29a      	uxth	r2, r3
   3222a:	683b      	ldr	r3, [r7, #0]
   3222c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   3222e:	6a3b      	ldr	r3, [r7, #32]
   32230:	69ba      	ldr	r2, [r7, #24]
   32232:	1a9a      	subs	r2, r3, r2
   32234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32236:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   32238:	69ba      	ldr	r2, [r7, #24]
   3223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   3223c:	601a      	str	r2, [r3, #0]
	rc = 1;
   3223e:	2301      	movs	r3, #1
   32240:	627b      	str	r3, [r7, #36]	; 0x24
   32242:	e000      	b.n	32246 <MQTTDeserialize_publish+0xea>
		goto exit;
   32244:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32248:	0018      	movs	r0, r3
   3224a:	46bd      	mov	sp, r7
   3224c:	b00a      	add	sp, #40	; 0x28
   3224e:	bd80      	pop	{r7, pc}
   32250:	00032503 	.word	0x00032503
   32254:	0003249d 	.word	0x0003249d
   32258:	00032681 	.word	0x00032681
   3225c:	000324d1 	.word	0x000324d1

00032260 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   32260:	b580      	push	{r7, lr}
   32262:	b08a      	sub	sp, #40	; 0x28
   32264:	af00      	add	r7, sp, #0
   32266:	60f8      	str	r0, [r7, #12]
   32268:	60b9      	str	r1, [r7, #8]
   3226a:	607a      	str	r2, [r7, #4]
   3226c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3226e:	2300      	movs	r3, #0
   32270:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32272:	683b      	ldr	r3, [r7, #0]
   32274:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32276:	2300      	movs	r3, #0
   32278:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3227a:	2300      	movs	r3, #0
   3227c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3227e:	2318      	movs	r3, #24
   32280:	18fb      	adds	r3, r7, r3
   32282:	0018      	movs	r0, r3
   32284:	4b20      	ldr	r3, [pc, #128]	; (32308 <MQTTDeserialize_ack+0xa8>)
   32286:	4798      	blx	r3
   32288:	0003      	movs	r3, r0
   3228a:	001a      	movs	r2, r3
   3228c:	231c      	movs	r3, #28
   3228e:	18fb      	adds	r3, r7, r3
   32290:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   32292:	231c      	movs	r3, #28
   32294:	18fb      	adds	r3, r7, r3
   32296:	781b      	ldrb	r3, [r3, #0]
   32298:	071b      	lsls	r3, r3, #28
   3229a:	0fdb      	lsrs	r3, r3, #31
   3229c:	b2db      	uxtb	r3, r3
   3229e:	001a      	movs	r2, r3
   322a0:	68bb      	ldr	r3, [r7, #8]
   322a2:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   322a4:	231c      	movs	r3, #28
   322a6:	18fb      	adds	r3, r7, r3
   322a8:	781b      	ldrb	r3, [r3, #0]
   322aa:	061b      	lsls	r3, r3, #24
   322ac:	0f1b      	lsrs	r3, r3, #28
   322ae:	b2db      	uxtb	r3, r3
   322b0:	001a      	movs	r2, r3
   322b2:	68fb      	ldr	r3, [r7, #12]
   322b4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   322b6:	69bb      	ldr	r3, [r7, #24]
   322b8:	2214      	movs	r2, #20
   322ba:	18ba      	adds	r2, r7, r2
   322bc:	0011      	movs	r1, r2
   322be:	0018      	movs	r0, r3
   322c0:	4b12      	ldr	r3, [pc, #72]	; (3230c <MQTTDeserialize_ack+0xac>)
   322c2:	4798      	blx	r3
   322c4:	0003      	movs	r3, r0
   322c6:	627b      	str	r3, [r7, #36]	; 0x24
   322c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   322ca:	69bb      	ldr	r3, [r7, #24]
   322cc:	189b      	adds	r3, r3, r2
   322ce:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   322d0:	69bb      	ldr	r3, [r7, #24]
   322d2:	697a      	ldr	r2, [r7, #20]
   322d4:	189b      	adds	r3, r3, r2
   322d6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   322d8:	6a3b      	ldr	r3, [r7, #32]
   322da:	69ba      	ldr	r2, [r7, #24]
   322dc:	1a9b      	subs	r3, r3, r2
   322de:	2b01      	cmp	r3, #1
   322e0:	dd0b      	ble.n	322fa <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   322e2:	2318      	movs	r3, #24
   322e4:	18fb      	adds	r3, r7, r3
   322e6:	0018      	movs	r0, r3
   322e8:	4b09      	ldr	r3, [pc, #36]	; (32310 <MQTTDeserialize_ack+0xb0>)
   322ea:	4798      	blx	r3
   322ec:	0003      	movs	r3, r0
   322ee:	b29a      	uxth	r2, r3
   322f0:	687b      	ldr	r3, [r7, #4]
   322f2:	801a      	strh	r2, [r3, #0]

	rc = 1;
   322f4:	2301      	movs	r3, #1
   322f6:	627b      	str	r3, [r7, #36]	; 0x24
   322f8:	e000      	b.n	322fc <MQTTDeserialize_ack+0x9c>
		goto exit;
   322fa:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   322fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   322fe:	0018      	movs	r0, r3
   32300:	46bd      	mov	sp, r7
   32302:	b00a      	add	sp, #40	; 0x28
   32304:	bd80      	pop	{r7, pc}
   32306:	46c0      	nop			; (mov r8, r8)
   32308:	00032503 	.word	0x00032503
   3230c:	0003249d 	.word	0x0003249d
   32310:	000324d1 	.word	0x000324d1

00032314 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   32314:	b580      	push	{r7, lr}
   32316:	b084      	sub	sp, #16
   32318:	af00      	add	r7, sp, #0
   3231a:	6078      	str	r0, [r7, #4]
   3231c:	6039      	str	r1, [r7, #0]
	int rc = 0;
   3231e:	2300      	movs	r3, #0
   32320:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   32322:	683b      	ldr	r3, [r7, #0]
   32324:	4a17      	ldr	r2, [pc, #92]	; (32384 <MQTTPacket_encode+0x70>)
   32326:	4013      	ands	r3, r2
   32328:	d504      	bpl.n	32334 <MQTTPacket_encode+0x20>
   3232a:	3b01      	subs	r3, #1
   3232c:	2280      	movs	r2, #128	; 0x80
   3232e:	4252      	negs	r2, r2
   32330:	4313      	orrs	r3, r2
   32332:	3301      	adds	r3, #1
   32334:	001a      	movs	r2, r3
   32336:	230b      	movs	r3, #11
   32338:	18fb      	adds	r3, r7, r3
   3233a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   3233c:	683b      	ldr	r3, [r7, #0]
   3233e:	2b00      	cmp	r3, #0
   32340:	da00      	bge.n	32344 <MQTTPacket_encode+0x30>
   32342:	337f      	adds	r3, #127	; 0x7f
   32344:	11db      	asrs	r3, r3, #7
   32346:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   32348:	683b      	ldr	r3, [r7, #0]
   3234a:	2b00      	cmp	r3, #0
   3234c:	dd08      	ble.n	32360 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   3234e:	230b      	movs	r3, #11
   32350:	18fb      	adds	r3, r7, r3
   32352:	220b      	movs	r2, #11
   32354:	18ba      	adds	r2, r7, r2
   32356:	7812      	ldrb	r2, [r2, #0]
   32358:	2180      	movs	r1, #128	; 0x80
   3235a:	4249      	negs	r1, r1
   3235c:	430a      	orrs	r2, r1
   3235e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   32360:	68fb      	ldr	r3, [r7, #12]
   32362:	1c5a      	adds	r2, r3, #1
   32364:	60fa      	str	r2, [r7, #12]
   32366:	001a      	movs	r2, r3
   32368:	687b      	ldr	r3, [r7, #4]
   3236a:	189b      	adds	r3, r3, r2
   3236c:	220b      	movs	r2, #11
   3236e:	18ba      	adds	r2, r7, r2
   32370:	7812      	ldrb	r2, [r2, #0]
   32372:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   32374:	683b      	ldr	r3, [r7, #0]
   32376:	2b00      	cmp	r3, #0
   32378:	dcd3      	bgt.n	32322 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   3237a:	68fb      	ldr	r3, [r7, #12]
}
   3237c:	0018      	movs	r0, r3
   3237e:	46bd      	mov	sp, r7
   32380:	b004      	add	sp, #16
   32382:	bd80      	pop	{r7, pc}
   32384:	8000007f 	.word	0x8000007f

00032388 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   32388:	b580      	push	{r7, lr}
   3238a:	b086      	sub	sp, #24
   3238c:	af00      	add	r7, sp, #0
   3238e:	6078      	str	r0, [r7, #4]
   32390:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   32392:	2301      	movs	r3, #1
   32394:	617b      	str	r3, [r7, #20]
	int len = 0;
   32396:	2300      	movs	r3, #0
   32398:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   3239a:	683b      	ldr	r3, [r7, #0]
   3239c:	2200      	movs	r2, #0
   3239e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   323a0:	2301      	movs	r3, #1
   323a2:	425b      	negs	r3, r3
   323a4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   323a6:	693b      	ldr	r3, [r7, #16]
   323a8:	3301      	adds	r3, #1
   323aa:	613b      	str	r3, [r7, #16]
   323ac:	693b      	ldr	r3, [r7, #16]
   323ae:	2b04      	cmp	r3, #4
   323b0:	dd03      	ble.n	323ba <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   323b2:	2301      	movs	r3, #1
   323b4:	425b      	negs	r3, r3
   323b6:	60fb      	str	r3, [r7, #12]
			goto exit;
   323b8:	e022      	b.n	32400 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   323ba:	230b      	movs	r3, #11
   323bc:	18fa      	adds	r2, r7, r3
   323be:	687b      	ldr	r3, [r7, #4]
   323c0:	2101      	movs	r1, #1
   323c2:	0010      	movs	r0, r2
   323c4:	4798      	blx	r3
   323c6:	0003      	movs	r3, r0
   323c8:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   323ca:	68fb      	ldr	r3, [r7, #12]
   323cc:	2b01      	cmp	r3, #1
   323ce:	d116      	bne.n	323fe <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   323d0:	683b      	ldr	r3, [r7, #0]
   323d2:	681a      	ldr	r2, [r3, #0]
   323d4:	230b      	movs	r3, #11
   323d6:	18fb      	adds	r3, r7, r3
   323d8:	781b      	ldrb	r3, [r3, #0]
   323da:	0019      	movs	r1, r3
   323dc:	237f      	movs	r3, #127	; 0x7f
   323de:	400b      	ands	r3, r1
   323e0:	6979      	ldr	r1, [r7, #20]
   323e2:	434b      	muls	r3, r1
   323e4:	18d2      	adds	r2, r2, r3
   323e6:	683b      	ldr	r3, [r7, #0]
   323e8:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   323ea:	697b      	ldr	r3, [r7, #20]
   323ec:	01db      	lsls	r3, r3, #7
   323ee:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   323f0:	230b      	movs	r3, #11
   323f2:	18fb      	adds	r3, r7, r3
   323f4:	781b      	ldrb	r3, [r3, #0]
   323f6:	b25b      	sxtb	r3, r3
   323f8:	2b00      	cmp	r3, #0
   323fa:	dbd1      	blt.n	323a0 <MQTTPacket_decode+0x18>
   323fc:	e000      	b.n	32400 <MQTTPacket_decode+0x78>
			goto exit;
   323fe:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   32400:	693b      	ldr	r3, [r7, #16]
}
   32402:	0018      	movs	r0, r3
   32404:	46bd      	mov	sp, r7
   32406:	b006      	add	sp, #24
   32408:	bd80      	pop	{r7, pc}
	...

0003240c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   3240c:	b580      	push	{r7, lr}
   3240e:	b082      	sub	sp, #8
   32410:	af00      	add	r7, sp, #0
   32412:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   32414:	687b      	ldr	r3, [r7, #4]
   32416:	3301      	adds	r3, #1
   32418:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   3241a:	687b      	ldr	r3, [r7, #4]
   3241c:	2b7f      	cmp	r3, #127	; 0x7f
   3241e:	dc03      	bgt.n	32428 <MQTTPacket_len+0x1c>
		rem_len += 1;
   32420:	687b      	ldr	r3, [r7, #4]
   32422:	3301      	adds	r3, #1
   32424:	607b      	str	r3, [r7, #4]
   32426:	e012      	b.n	3244e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   32428:	687b      	ldr	r3, [r7, #4]
   3242a:	4a0b      	ldr	r2, [pc, #44]	; (32458 <MQTTPacket_len+0x4c>)
   3242c:	4293      	cmp	r3, r2
   3242e:	dc03      	bgt.n	32438 <MQTTPacket_len+0x2c>
		rem_len += 2;
   32430:	687b      	ldr	r3, [r7, #4]
   32432:	3302      	adds	r3, #2
   32434:	607b      	str	r3, [r7, #4]
   32436:	e00a      	b.n	3244e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   32438:	687b      	ldr	r3, [r7, #4]
   3243a:	4a08      	ldr	r2, [pc, #32]	; (3245c <MQTTPacket_len+0x50>)
   3243c:	4293      	cmp	r3, r2
   3243e:	dc03      	bgt.n	32448 <MQTTPacket_len+0x3c>
		rem_len += 3;
   32440:	687b      	ldr	r3, [r7, #4]
   32442:	3303      	adds	r3, #3
   32444:	607b      	str	r3, [r7, #4]
   32446:	e002      	b.n	3244e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   32448:	687b      	ldr	r3, [r7, #4]
   3244a:	3304      	adds	r3, #4
   3244c:	607b      	str	r3, [r7, #4]
	return rem_len;
   3244e:	687b      	ldr	r3, [r7, #4]
}
   32450:	0018      	movs	r0, r3
   32452:	46bd      	mov	sp, r7
   32454:	b002      	add	sp, #8
   32456:	bd80      	pop	{r7, pc}
   32458:	00003fff 	.word	0x00003fff
   3245c:	001ffffe 	.word	0x001ffffe

00032460 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   32460:	b580      	push	{r7, lr}
   32462:	b084      	sub	sp, #16
   32464:	af00      	add	r7, sp, #0
   32466:	6078      	str	r0, [r7, #4]
   32468:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   3246a:	2300      	movs	r3, #0
   3246c:	60fb      	str	r3, [r7, #12]
   3246e:	e00a      	b.n	32486 <bufchar+0x26>
		*c = *bufptr++;
   32470:	4b09      	ldr	r3, [pc, #36]	; (32498 <bufchar+0x38>)
   32472:	681b      	ldr	r3, [r3, #0]
   32474:	1c59      	adds	r1, r3, #1
   32476:	4a08      	ldr	r2, [pc, #32]	; (32498 <bufchar+0x38>)
   32478:	6011      	str	r1, [r2, #0]
   3247a:	781a      	ldrb	r2, [r3, #0]
   3247c:	687b      	ldr	r3, [r7, #4]
   3247e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   32480:	68fb      	ldr	r3, [r7, #12]
   32482:	3301      	adds	r3, #1
   32484:	60fb      	str	r3, [r7, #12]
   32486:	68fa      	ldr	r2, [r7, #12]
   32488:	683b      	ldr	r3, [r7, #0]
   3248a:	429a      	cmp	r2, r3
   3248c:	dbf0      	blt.n	32470 <bufchar+0x10>
	return count;
   3248e:	683b      	ldr	r3, [r7, #0]
}
   32490:	0018      	movs	r0, r3
   32492:	46bd      	mov	sp, r7
   32494:	b004      	add	sp, #16
   32496:	bd80      	pop	{r7, pc}
   32498:	20004550 	.word	0x20004550

0003249c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   3249c:	b580      	push	{r7, lr}
   3249e:	b082      	sub	sp, #8
   324a0:	af00      	add	r7, sp, #0
   324a2:	6078      	str	r0, [r7, #4]
   324a4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   324a6:	4b07      	ldr	r3, [pc, #28]	; (324c4 <MQTTPacket_decodeBuf+0x28>)
   324a8:	687a      	ldr	r2, [r7, #4]
   324aa:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   324ac:	683a      	ldr	r2, [r7, #0]
   324ae:	4b06      	ldr	r3, [pc, #24]	; (324c8 <MQTTPacket_decodeBuf+0x2c>)
   324b0:	0011      	movs	r1, r2
   324b2:	0018      	movs	r0, r3
   324b4:	4b05      	ldr	r3, [pc, #20]	; (324cc <MQTTPacket_decodeBuf+0x30>)
   324b6:	4798      	blx	r3
   324b8:	0003      	movs	r3, r0
}
   324ba:	0018      	movs	r0, r3
   324bc:	46bd      	mov	sp, r7
   324be:	b002      	add	sp, #8
   324c0:	bd80      	pop	{r7, pc}
   324c2:	46c0      	nop			; (mov r8, r8)
   324c4:	20004550 	.word	0x20004550
   324c8:	00032461 	.word	0x00032461
   324cc:	00032389 	.word	0x00032389

000324d0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   324d0:	b580      	push	{r7, lr}
   324d2:	b084      	sub	sp, #16
   324d4:	af00      	add	r7, sp, #0
   324d6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   324d8:	687b      	ldr	r3, [r7, #4]
   324da:	681b      	ldr	r3, [r3, #0]
   324dc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   324de:	68fb      	ldr	r3, [r7, #12]
   324e0:	781b      	ldrb	r3, [r3, #0]
   324e2:	021b      	lsls	r3, r3, #8
   324e4:	68fa      	ldr	r2, [r7, #12]
   324e6:	3201      	adds	r2, #1
   324e8:	7812      	ldrb	r2, [r2, #0]
   324ea:	189b      	adds	r3, r3, r2
   324ec:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   324ee:	687b      	ldr	r3, [r7, #4]
   324f0:	681b      	ldr	r3, [r3, #0]
   324f2:	1c9a      	adds	r2, r3, #2
   324f4:	687b      	ldr	r3, [r7, #4]
   324f6:	601a      	str	r2, [r3, #0]
	return len;
   324f8:	68bb      	ldr	r3, [r7, #8]
}
   324fa:	0018      	movs	r0, r3
   324fc:	46bd      	mov	sp, r7
   324fe:	b004      	add	sp, #16
   32500:	bd80      	pop	{r7, pc}

00032502 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   32502:	b580      	push	{r7, lr}
   32504:	b084      	sub	sp, #16
   32506:	af00      	add	r7, sp, #0
   32508:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3250a:	687b      	ldr	r3, [r7, #4]
   3250c:	681a      	ldr	r2, [r3, #0]
   3250e:	230f      	movs	r3, #15
   32510:	18fb      	adds	r3, r7, r3
   32512:	7812      	ldrb	r2, [r2, #0]
   32514:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32516:	687b      	ldr	r3, [r7, #4]
   32518:	681b      	ldr	r3, [r3, #0]
   3251a:	1c5a      	adds	r2, r3, #1
   3251c:	687b      	ldr	r3, [r7, #4]
   3251e:	601a      	str	r2, [r3, #0]
	return c;
   32520:	230f      	movs	r3, #15
   32522:	18fb      	adds	r3, r7, r3
   32524:	781b      	ldrb	r3, [r3, #0]
}
   32526:	0018      	movs	r0, r3
   32528:	46bd      	mov	sp, r7
   3252a:	b004      	add	sp, #16
   3252c:	bd80      	pop	{r7, pc}

0003252e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   3252e:	b580      	push	{r7, lr}
   32530:	b082      	sub	sp, #8
   32532:	af00      	add	r7, sp, #0
   32534:	6078      	str	r0, [r7, #4]
   32536:	000a      	movs	r2, r1
   32538:	1cfb      	adds	r3, r7, #3
   3253a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   3253c:	687b      	ldr	r3, [r7, #4]
   3253e:	681b      	ldr	r3, [r3, #0]
   32540:	1cfa      	adds	r2, r7, #3
   32542:	7812      	ldrb	r2, [r2, #0]
   32544:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32546:	687b      	ldr	r3, [r7, #4]
   32548:	681b      	ldr	r3, [r3, #0]
   3254a:	1c5a      	adds	r2, r3, #1
   3254c:	687b      	ldr	r3, [r7, #4]
   3254e:	601a      	str	r2, [r3, #0]
}
   32550:	46c0      	nop			; (mov r8, r8)
   32552:	46bd      	mov	sp, r7
   32554:	b002      	add	sp, #8
   32556:	bd80      	pop	{r7, pc}

00032558 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   32558:	b580      	push	{r7, lr}
   3255a:	b082      	sub	sp, #8
   3255c:	af00      	add	r7, sp, #0
   3255e:	6078      	str	r0, [r7, #4]
   32560:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   32562:	687b      	ldr	r3, [r7, #4]
   32564:	681a      	ldr	r2, [r3, #0]
   32566:	683b      	ldr	r3, [r7, #0]
   32568:	2b00      	cmp	r3, #0
   3256a:	da00      	bge.n	3256e <writeInt+0x16>
   3256c:	33ff      	adds	r3, #255	; 0xff
   3256e:	121b      	asrs	r3, r3, #8
   32570:	b2db      	uxtb	r3, r3
   32572:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   32574:	687b      	ldr	r3, [r7, #4]
   32576:	681b      	ldr	r3, [r3, #0]
   32578:	1c5a      	adds	r2, r3, #1
   3257a:	687b      	ldr	r3, [r7, #4]
   3257c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   3257e:	687b      	ldr	r3, [r7, #4]
   32580:	681a      	ldr	r2, [r3, #0]
   32582:	683b      	ldr	r3, [r7, #0]
   32584:	4908      	ldr	r1, [pc, #32]	; (325a8 <writeInt+0x50>)
   32586:	400b      	ands	r3, r1
   32588:	d503      	bpl.n	32592 <writeInt+0x3a>
   3258a:	3b01      	subs	r3, #1
   3258c:	4907      	ldr	r1, [pc, #28]	; (325ac <writeInt+0x54>)
   3258e:	430b      	orrs	r3, r1
   32590:	3301      	adds	r3, #1
   32592:	b2db      	uxtb	r3, r3
   32594:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   32596:	687b      	ldr	r3, [r7, #4]
   32598:	681b      	ldr	r3, [r3, #0]
   3259a:	1c5a      	adds	r2, r3, #1
   3259c:	687b      	ldr	r3, [r7, #4]
   3259e:	601a      	str	r2, [r3, #0]
}
   325a0:	46c0      	nop			; (mov r8, r8)
   325a2:	46bd      	mov	sp, r7
   325a4:	b002      	add	sp, #8
   325a6:	bd80      	pop	{r7, pc}
   325a8:	800000ff 	.word	0x800000ff
   325ac:	ffffff00 	.word	0xffffff00

000325b0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   325b0:	b580      	push	{r7, lr}
   325b2:	b084      	sub	sp, #16
   325b4:	af00      	add	r7, sp, #0
   325b6:	6078      	str	r0, [r7, #4]
   325b8:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   325ba:	683b      	ldr	r3, [r7, #0]
   325bc:	0018      	movs	r0, r3
   325be:	4b0d      	ldr	r3, [pc, #52]	; (325f4 <writeCString+0x44>)
   325c0:	4798      	blx	r3
   325c2:	0003      	movs	r3, r0
   325c4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   325c6:	68fa      	ldr	r2, [r7, #12]
   325c8:	687b      	ldr	r3, [r7, #4]
   325ca:	0011      	movs	r1, r2
   325cc:	0018      	movs	r0, r3
   325ce:	4b0a      	ldr	r3, [pc, #40]	; (325f8 <writeCString+0x48>)
   325d0:	4798      	blx	r3
	memcpy(*pptr, string, len);
   325d2:	687b      	ldr	r3, [r7, #4]
   325d4:	681b      	ldr	r3, [r3, #0]
   325d6:	68fa      	ldr	r2, [r7, #12]
   325d8:	6839      	ldr	r1, [r7, #0]
   325da:	0018      	movs	r0, r3
   325dc:	4b07      	ldr	r3, [pc, #28]	; (325fc <writeCString+0x4c>)
   325de:	4798      	blx	r3
	*pptr += len;
   325e0:	687b      	ldr	r3, [r7, #4]
   325e2:	681a      	ldr	r2, [r3, #0]
   325e4:	68fb      	ldr	r3, [r7, #12]
   325e6:	18d2      	adds	r2, r2, r3
   325e8:	687b      	ldr	r3, [r7, #4]
   325ea:	601a      	str	r2, [r3, #0]
}
   325ec:	46c0      	nop			; (mov r8, r8)
   325ee:	46bd      	mov	sp, r7
   325f0:	b004      	add	sp, #16
   325f2:	bd80      	pop	{r7, pc}
   325f4:	00037bd7 	.word	0x00037bd7
   325f8:	00032559 	.word	0x00032559
   325fc:	000377e9 	.word	0x000377e9

00032600 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   32600:	b580      	push	{r7, lr}
   32602:	b084      	sub	sp, #16
   32604:	af00      	add	r7, sp, #0
   32606:	60f8      	str	r0, [r7, #12]
   32608:	0038      	movs	r0, r7
   3260a:	6001      	str	r1, [r0, #0]
   3260c:	6042      	str	r2, [r0, #4]
   3260e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   32610:	003b      	movs	r3, r7
   32612:	685b      	ldr	r3, [r3, #4]
   32614:	2b00      	cmp	r3, #0
   32616:	dd17      	ble.n	32648 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   32618:	003b      	movs	r3, r7
   3261a:	685a      	ldr	r2, [r3, #4]
   3261c:	68fb      	ldr	r3, [r7, #12]
   3261e:	0011      	movs	r1, r2
   32620:	0018      	movs	r0, r3
   32622:	4b14      	ldr	r3, [pc, #80]	; (32674 <writeMQTTString+0x74>)
   32624:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   32626:	68fb      	ldr	r3, [r7, #12]
   32628:	6818      	ldr	r0, [r3, #0]
   3262a:	003b      	movs	r3, r7
   3262c:	6899      	ldr	r1, [r3, #8]
   3262e:	003b      	movs	r3, r7
   32630:	685b      	ldr	r3, [r3, #4]
   32632:	001a      	movs	r2, r3
   32634:	4b10      	ldr	r3, [pc, #64]	; (32678 <writeMQTTString+0x78>)
   32636:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   32638:	68fb      	ldr	r3, [r7, #12]
   3263a:	681a      	ldr	r2, [r3, #0]
   3263c:	003b      	movs	r3, r7
   3263e:	685b      	ldr	r3, [r3, #4]
   32640:	18d2      	adds	r2, r2, r3
   32642:	68fb      	ldr	r3, [r7, #12]
   32644:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   32646:	e010      	b.n	3266a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   32648:	003b      	movs	r3, r7
   3264a:	681b      	ldr	r3, [r3, #0]
   3264c:	2b00      	cmp	r3, #0
   3264e:	d007      	beq.n	32660 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   32650:	003b      	movs	r3, r7
   32652:	681a      	ldr	r2, [r3, #0]
   32654:	68fb      	ldr	r3, [r7, #12]
   32656:	0011      	movs	r1, r2
   32658:	0018      	movs	r0, r3
   3265a:	4b08      	ldr	r3, [pc, #32]	; (3267c <writeMQTTString+0x7c>)
   3265c:	4798      	blx	r3
}
   3265e:	e004      	b.n	3266a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   32660:	68fb      	ldr	r3, [r7, #12]
   32662:	2100      	movs	r1, #0
   32664:	0018      	movs	r0, r3
   32666:	4b03      	ldr	r3, [pc, #12]	; (32674 <writeMQTTString+0x74>)
   32668:	4798      	blx	r3
}
   3266a:	46c0      	nop			; (mov r8, r8)
   3266c:	46bd      	mov	sp, r7
   3266e:	b004      	add	sp, #16
   32670:	bd80      	pop	{r7, pc}
   32672:	46c0      	nop			; (mov r8, r8)
   32674:	00032559 	.word	0x00032559
   32678:	000377e9 	.word	0x000377e9
   3267c:	000325b1 	.word	0x000325b1

00032680 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   32680:	b580      	push	{r7, lr}
   32682:	b086      	sub	sp, #24
   32684:	af00      	add	r7, sp, #0
   32686:	60f8      	str	r0, [r7, #12]
   32688:	60b9      	str	r1, [r7, #8]
   3268a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   3268c:	2300      	movs	r3, #0
   3268e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   32690:	687a      	ldr	r2, [r7, #4]
   32692:	68bb      	ldr	r3, [r7, #8]
   32694:	681b      	ldr	r3, [r3, #0]
   32696:	1ad3      	subs	r3, r2, r3
   32698:	2b01      	cmp	r3, #1
   3269a:	dd1b      	ble.n	326d4 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   3269c:	68bb      	ldr	r3, [r7, #8]
   3269e:	0018      	movs	r0, r3
   326a0:	4b10      	ldr	r3, [pc, #64]	; (326e4 <readMQTTLenString+0x64>)
   326a2:	4798      	blx	r3
   326a4:	0002      	movs	r2, r0
   326a6:	68fb      	ldr	r3, [r7, #12]
   326a8:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   326aa:	68bb      	ldr	r3, [r7, #8]
   326ac:	681a      	ldr	r2, [r3, #0]
   326ae:	68fb      	ldr	r3, [r7, #12]
   326b0:	685b      	ldr	r3, [r3, #4]
   326b2:	18d2      	adds	r2, r2, r3
   326b4:	687b      	ldr	r3, [r7, #4]
   326b6:	429a      	cmp	r2, r3
   326b8:	d80c      	bhi.n	326d4 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   326ba:	68bb      	ldr	r3, [r7, #8]
   326bc:	681a      	ldr	r2, [r3, #0]
   326be:	68fb      	ldr	r3, [r7, #12]
   326c0:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   326c2:	68bb      	ldr	r3, [r7, #8]
   326c4:	681a      	ldr	r2, [r3, #0]
   326c6:	68fb      	ldr	r3, [r7, #12]
   326c8:	685b      	ldr	r3, [r3, #4]
   326ca:	18d2      	adds	r2, r2, r3
   326cc:	68bb      	ldr	r3, [r7, #8]
   326ce:	601a      	str	r2, [r3, #0]
			rc = 1;
   326d0:	2301      	movs	r3, #1
   326d2:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   326d4:	68fb      	ldr	r3, [r7, #12]
   326d6:	2200      	movs	r2, #0
   326d8:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   326da:	697b      	ldr	r3, [r7, #20]
}
   326dc:	0018      	movs	r0, r3
   326de:	46bd      	mov	sp, r7
   326e0:	b006      	add	sp, #24
   326e2:	bd80      	pop	{r7, pc}
   326e4:	000324d1 	.word	0x000324d1

000326e8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   326e8:	b580      	push	{r7, lr}
   326ea:	b086      	sub	sp, #24
   326ec:	af00      	add	r7, sp, #0
   326ee:	1d3b      	adds	r3, r7, #4
   326f0:	6018      	str	r0, [r3, #0]
   326f2:	6059      	str	r1, [r3, #4]
   326f4:	609a      	str	r2, [r3, #8]
	int rc = 0;
   326f6:	2300      	movs	r3, #0
   326f8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   326fa:	1d3b      	adds	r3, r7, #4
   326fc:	681b      	ldr	r3, [r3, #0]
   326fe:	2b00      	cmp	r3, #0
   32700:	d007      	beq.n	32712 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   32702:	1d3b      	adds	r3, r7, #4
   32704:	681b      	ldr	r3, [r3, #0]
   32706:	0018      	movs	r0, r3
   32708:	4b06      	ldr	r3, [pc, #24]	; (32724 <MQTTstrlen+0x3c>)
   3270a:	4798      	blx	r3
   3270c:	0003      	movs	r3, r0
   3270e:	617b      	str	r3, [r7, #20]
   32710:	e002      	b.n	32718 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   32712:	1d3b      	adds	r3, r7, #4
   32714:	685b      	ldr	r3, [r3, #4]
   32716:	617b      	str	r3, [r7, #20]
	return rc;
   32718:	697b      	ldr	r3, [r7, #20]
}
   3271a:	0018      	movs	r0, r3
   3271c:	46bd      	mov	sp, r7
   3271e:	b006      	add	sp, #24
   32720:	bd80      	pop	{r7, pc}
   32722:	46c0      	nop			; (mov r8, r8)
   32724:	00037bd7 	.word	0x00037bd7

00032728 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   32728:	b580      	push	{r7, lr}
   3272a:	b086      	sub	sp, #24
   3272c:	af00      	add	r7, sp, #0
   3272e:	6078      	str	r0, [r7, #4]
   32730:	6039      	str	r1, [r7, #0]
	int alen = 0,
   32732:	2300      	movs	r3, #0
   32734:	617b      	str	r3, [r7, #20]
		blen = 0;
   32736:	2300      	movs	r3, #0
   32738:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3273a:	687b      	ldr	r3, [r7, #4]
   3273c:	681b      	ldr	r3, [r3, #0]
   3273e:	2b00      	cmp	r3, #0
   32740:	d00a      	beq.n	32758 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   32742:	687b      	ldr	r3, [r7, #4]
   32744:	681b      	ldr	r3, [r3, #0]
   32746:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   32748:	687b      	ldr	r3, [r7, #4]
   3274a:	681b      	ldr	r3, [r3, #0]
   3274c:	0018      	movs	r0, r3
   3274e:	4b12      	ldr	r3, [pc, #72]	; (32798 <MQTTPacket_equals+0x70>)
   32750:	4798      	blx	r3
   32752:	0003      	movs	r3, r0
   32754:	617b      	str	r3, [r7, #20]
   32756:	e005      	b.n	32764 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   32758:	687b      	ldr	r3, [r7, #4]
   3275a:	689b      	ldr	r3, [r3, #8]
   3275c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   3275e:	687b      	ldr	r3, [r7, #4]
   32760:	685b      	ldr	r3, [r3, #4]
   32762:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   32764:	683b      	ldr	r3, [r7, #0]
   32766:	0018      	movs	r0, r3
   32768:	4b0b      	ldr	r3, [pc, #44]	; (32798 <MQTTPacket_equals+0x70>)
   3276a:	4798      	blx	r3
   3276c:	0003      	movs	r3, r0
   3276e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   32770:	697a      	ldr	r2, [r7, #20]
   32772:	68fb      	ldr	r3, [r7, #12]
   32774:	429a      	cmp	r2, r3
   32776:	d109      	bne.n	3278c <MQTTPacket_equals+0x64>
   32778:	697a      	ldr	r2, [r7, #20]
   3277a:	6839      	ldr	r1, [r7, #0]
   3277c:	693b      	ldr	r3, [r7, #16]
   3277e:	0018      	movs	r0, r3
   32780:	4b06      	ldr	r3, [pc, #24]	; (3279c <MQTTPacket_equals+0x74>)
   32782:	4798      	blx	r3
   32784:	1e03      	subs	r3, r0, #0
   32786:	d101      	bne.n	3278c <MQTTPacket_equals+0x64>
   32788:	2301      	movs	r3, #1
   3278a:	e000      	b.n	3278e <MQTTPacket_equals+0x66>
   3278c:	2300      	movs	r3, #0
}
   3278e:	0018      	movs	r0, r3
   32790:	46bd      	mov	sp, r7
   32792:	b006      	add	sp, #24
   32794:	bd80      	pop	{r7, pc}
   32796:	46c0      	nop			; (mov r8, r8)
   32798:	00037bd7 	.word	0x00037bd7
   3279c:	00037be5 	.word	0x00037be5

000327a0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   327a0:	b580      	push	{r7, lr}
   327a2:	b086      	sub	sp, #24
   327a4:	af00      	add	r7, sp, #0
   327a6:	60f8      	str	r0, [r7, #12]
   327a8:	0038      	movs	r0, r7
   327aa:	6001      	str	r1, [r0, #0]
   327ac:	6042      	str	r2, [r0, #4]
   327ae:	6083      	str	r3, [r0, #8]
	int len = 0;
   327b0:	2300      	movs	r3, #0
   327b2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   327b4:	003b      	movs	r3, r7
   327b6:	6818      	ldr	r0, [r3, #0]
   327b8:	6859      	ldr	r1, [r3, #4]
   327ba:	689a      	ldr	r2, [r3, #8]
   327bc:	4b09      	ldr	r3, [pc, #36]	; (327e4 <MQTTSerialize_publishLength+0x44>)
   327be:	4798      	blx	r3
   327c0:	0003      	movs	r3, r0
   327c2:	1c9a      	adds	r2, r3, #2
   327c4:	6a3b      	ldr	r3, [r7, #32]
   327c6:	18d3      	adds	r3, r2, r3
   327c8:	697a      	ldr	r2, [r7, #20]
   327ca:	18d3      	adds	r3, r2, r3
   327cc:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   327ce:	68fb      	ldr	r3, [r7, #12]
   327d0:	2b00      	cmp	r3, #0
   327d2:	dd02      	ble.n	327da <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   327d4:	697b      	ldr	r3, [r7, #20]
   327d6:	3302      	adds	r3, #2
   327d8:	617b      	str	r3, [r7, #20]
	return len;
   327da:	697b      	ldr	r3, [r7, #20]
}
   327dc:	0018      	movs	r0, r3
   327de:	46bd      	mov	sp, r7
   327e0:	b006      	add	sp, #24
   327e2:	bd80      	pop	{r7, pc}
   327e4:	000326e9 	.word	0x000326e9

000327e8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   327e8:	b590      	push	{r4, r7, lr}
   327ea:	b08b      	sub	sp, #44	; 0x2c
   327ec:	af02      	add	r7, sp, #8
   327ee:	60f8      	str	r0, [r7, #12]
   327f0:	60b9      	str	r1, [r7, #8]
   327f2:	603b      	str	r3, [r7, #0]
   327f4:	1dfb      	adds	r3, r7, #7
   327f6:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   327f8:	68fb      	ldr	r3, [r7, #12]
   327fa:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   327fc:	2300      	movs	r3, #0
   327fe:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   32800:	2300      	movs	r3, #0
   32802:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   32804:	2300      	movs	r3, #0
   32806:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   32808:	2308      	movs	r3, #8
   3280a:	2230      	movs	r2, #48	; 0x30
   3280c:	4694      	mov	ip, r2
   3280e:	44bc      	add	ip, r7
   32810:	4463      	add	r3, ip
   32812:	6838      	ldr	r0, [r7, #0]
   32814:	6cba      	ldr	r2, [r7, #72]	; 0x48
   32816:	9200      	str	r2, [sp, #0]
   32818:	6819      	ldr	r1, [r3, #0]
   3281a:	685a      	ldr	r2, [r3, #4]
   3281c:	689b      	ldr	r3, [r3, #8]
   3281e:	4c46      	ldr	r4, [pc, #280]	; (32938 <MQTTSerialize_publish+0x150>)
   32820:	47a0      	blx	r4
   32822:	0003      	movs	r3, r0
   32824:	61bb      	str	r3, [r7, #24]
   32826:	69bb      	ldr	r3, [r7, #24]
   32828:	0018      	movs	r0, r3
   3282a:	4b44      	ldr	r3, [pc, #272]	; (3293c <MQTTSerialize_publish+0x154>)
   3282c:	4798      	blx	r3
   3282e:	0002      	movs	r2, r0
   32830:	68bb      	ldr	r3, [r7, #8]
   32832:	429a      	cmp	r2, r3
   32834:	dd03      	ble.n	3283e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32836:	2302      	movs	r3, #2
   32838:	425b      	negs	r3, r3
   3283a:	61fb      	str	r3, [r7, #28]
		goto exit;
   3283c:	e077      	b.n	3292e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   3283e:	2310      	movs	r3, #16
   32840:	18fb      	adds	r3, r7, r3
   32842:	781a      	ldrb	r2, [r3, #0]
   32844:	210f      	movs	r1, #15
   32846:	400a      	ands	r2, r1
   32848:	1c11      	adds	r1, r2, #0
   3284a:	2230      	movs	r2, #48	; 0x30
   3284c:	430a      	orrs	r2, r1
   3284e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32850:	1dfb      	adds	r3, r7, #7
   32852:	781b      	ldrb	r3, [r3, #0]
   32854:	2201      	movs	r2, #1
   32856:	4013      	ands	r3, r2
   32858:	b2da      	uxtb	r2, r3
   3285a:	2310      	movs	r3, #16
   3285c:	18fb      	adds	r3, r7, r3
   3285e:	2101      	movs	r1, #1
   32860:	400a      	ands	r2, r1
   32862:	00d0      	lsls	r0, r2, #3
   32864:	781a      	ldrb	r2, [r3, #0]
   32866:	2108      	movs	r1, #8
   32868:	438a      	bics	r2, r1
   3286a:	1c11      	adds	r1, r2, #0
   3286c:	1c02      	adds	r2, r0, #0
   3286e:	430a      	orrs	r2, r1
   32870:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   32872:	683b      	ldr	r3, [r7, #0]
   32874:	b2db      	uxtb	r3, r3
   32876:	1c1a      	adds	r2, r3, #0
   32878:	2303      	movs	r3, #3
   3287a:	4013      	ands	r3, r2
   3287c:	b2da      	uxtb	r2, r3
   3287e:	2310      	movs	r3, #16
   32880:	18fb      	adds	r3, r7, r3
   32882:	2103      	movs	r1, #3
   32884:	400a      	ands	r2, r1
   32886:	1890      	adds	r0, r2, r2
   32888:	781a      	ldrb	r2, [r3, #0]
   3288a:	2106      	movs	r1, #6
   3288c:	438a      	bics	r2, r1
   3288e:	1c11      	adds	r1, r2, #0
   32890:	1c02      	adds	r2, r0, #0
   32892:	430a      	orrs	r2, r1
   32894:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   32896:	2330      	movs	r3, #48	; 0x30
   32898:	18fb      	adds	r3, r7, r3
   3289a:	781b      	ldrb	r3, [r3, #0]
   3289c:	2201      	movs	r2, #1
   3289e:	4013      	ands	r3, r2
   328a0:	b2da      	uxtb	r2, r3
   328a2:	2310      	movs	r3, #16
   328a4:	18fb      	adds	r3, r7, r3
   328a6:	2101      	movs	r1, #1
   328a8:	400a      	ands	r2, r1
   328aa:	0010      	movs	r0, r2
   328ac:	781a      	ldrb	r2, [r3, #0]
   328ae:	2101      	movs	r1, #1
   328b0:	438a      	bics	r2, r1
   328b2:	1c11      	adds	r1, r2, #0
   328b4:	1c02      	adds	r2, r0, #0
   328b6:	430a      	orrs	r2, r1
   328b8:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   328ba:	2310      	movs	r3, #16
   328bc:	18fb      	adds	r3, r7, r3
   328be:	781a      	ldrb	r2, [r3, #0]
   328c0:	2314      	movs	r3, #20
   328c2:	18fb      	adds	r3, r7, r3
   328c4:	0011      	movs	r1, r2
   328c6:	0018      	movs	r0, r3
   328c8:	4b1d      	ldr	r3, [pc, #116]	; (32940 <MQTTSerialize_publish+0x158>)
   328ca:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   328cc:	697b      	ldr	r3, [r7, #20]
   328ce:	69ba      	ldr	r2, [r7, #24]
   328d0:	0011      	movs	r1, r2
   328d2:	0018      	movs	r0, r3
   328d4:	4b1b      	ldr	r3, [pc, #108]	; (32944 <MQTTSerialize_publish+0x15c>)
   328d6:	4798      	blx	r3
   328d8:	0002      	movs	r2, r0
   328da:	697b      	ldr	r3, [r7, #20]
   328dc:	189b      	adds	r3, r3, r2
   328de:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   328e0:	2308      	movs	r3, #8
   328e2:	2230      	movs	r2, #48	; 0x30
   328e4:	4694      	mov	ip, r2
   328e6:	44bc      	add	ip, r7
   328e8:	4463      	add	r3, ip
   328ea:	2214      	movs	r2, #20
   328ec:	18b8      	adds	r0, r7, r2
   328ee:	6819      	ldr	r1, [r3, #0]
   328f0:	685a      	ldr	r2, [r3, #4]
   328f2:	689b      	ldr	r3, [r3, #8]
   328f4:	4c14      	ldr	r4, [pc, #80]	; (32948 <MQTTSerialize_publish+0x160>)
   328f6:	47a0      	blx	r4

	if (qos > 0)
   328f8:	683b      	ldr	r3, [r7, #0]
   328fa:	2b00      	cmp	r3, #0
   328fc:	dd08      	ble.n	32910 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   328fe:	2334      	movs	r3, #52	; 0x34
   32900:	18fb      	adds	r3, r7, r3
   32902:	881a      	ldrh	r2, [r3, #0]
   32904:	2314      	movs	r3, #20
   32906:	18fb      	adds	r3, r7, r3
   32908:	0011      	movs	r1, r2
   3290a:	0018      	movs	r0, r3
   3290c:	4b0f      	ldr	r3, [pc, #60]	; (3294c <MQTTSerialize_publish+0x164>)
   3290e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   32910:	697b      	ldr	r3, [r7, #20]
   32912:	6cba      	ldr	r2, [r7, #72]	; 0x48
   32914:	6c79      	ldr	r1, [r7, #68]	; 0x44
   32916:	0018      	movs	r0, r3
   32918:	4b0d      	ldr	r3, [pc, #52]	; (32950 <MQTTSerialize_publish+0x168>)
   3291a:	4798      	blx	r3
	ptr += payloadlen;
   3291c:	697a      	ldr	r2, [r7, #20]
   3291e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32920:	18d3      	adds	r3, r2, r3
   32922:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   32924:	697b      	ldr	r3, [r7, #20]
   32926:	001a      	movs	r2, r3
   32928:	68fb      	ldr	r3, [r7, #12]
   3292a:	1ad3      	subs	r3, r2, r3
   3292c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3292e:	69fb      	ldr	r3, [r7, #28]
}
   32930:	0018      	movs	r0, r3
   32932:	46bd      	mov	sp, r7
   32934:	b009      	add	sp, #36	; 0x24
   32936:	bd90      	pop	{r4, r7, pc}
   32938:	000327a1 	.word	0x000327a1
   3293c:	0003240d 	.word	0x0003240d
   32940:	0003252f 	.word	0x0003252f
   32944:	00032315 	.word	0x00032315
   32948:	00032601 	.word	0x00032601
   3294c:	00032559 	.word	0x00032559
   32950:	000377e9 	.word	0x000377e9

00032954 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   32954:	b580      	push	{r7, lr}
   32956:	b088      	sub	sp, #32
   32958:	af00      	add	r7, sp, #0
   3295a:	60f8      	str	r0, [r7, #12]
   3295c:	60b9      	str	r1, [r7, #8]
   3295e:	0019      	movs	r1, r3
   32960:	1dfb      	adds	r3, r7, #7
   32962:	701a      	strb	r2, [r3, #0]
   32964:	1dbb      	adds	r3, r7, #6
   32966:	1c0a      	adds	r2, r1, #0
   32968:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   3296a:	2300      	movs	r3, #0
   3296c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3296e:	2300      	movs	r3, #0
   32970:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   32972:	68fb      	ldr	r3, [r7, #12]
   32974:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   32976:	68bb      	ldr	r3, [r7, #8]
   32978:	2b03      	cmp	r3, #3
   3297a:	dc03      	bgt.n	32984 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3297c:	2302      	movs	r3, #2
   3297e:	425b      	negs	r3, r3
   32980:	61fb      	str	r3, [r7, #28]
		goto exit;
   32982:	e055      	b.n	32a30 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   32984:	1dfb      	adds	r3, r7, #7
   32986:	781b      	ldrb	r3, [r3, #0]
   32988:	220f      	movs	r2, #15
   3298a:	4013      	ands	r3, r2
   3298c:	b2da      	uxtb	r2, r3
   3298e:	2318      	movs	r3, #24
   32990:	18fb      	adds	r3, r7, r3
   32992:	0110      	lsls	r0, r2, #4
   32994:	781a      	ldrb	r2, [r3, #0]
   32996:	210f      	movs	r1, #15
   32998:	400a      	ands	r2, r1
   3299a:	1c11      	adds	r1, r2, #0
   3299c:	1c02      	adds	r2, r0, #0
   3299e:	430a      	orrs	r2, r1
   329a0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   329a2:	1dbb      	adds	r3, r7, #6
   329a4:	781b      	ldrb	r3, [r3, #0]
   329a6:	2201      	movs	r2, #1
   329a8:	4013      	ands	r3, r2
   329aa:	b2da      	uxtb	r2, r3
   329ac:	2318      	movs	r3, #24
   329ae:	18fb      	adds	r3, r7, r3
   329b0:	2101      	movs	r1, #1
   329b2:	400a      	ands	r2, r1
   329b4:	00d0      	lsls	r0, r2, #3
   329b6:	781a      	ldrb	r2, [r3, #0]
   329b8:	2108      	movs	r1, #8
   329ba:	438a      	bics	r2, r1
   329bc:	1c11      	adds	r1, r2, #0
   329be:	1c02      	adds	r2, r0, #0
   329c0:	430a      	orrs	r2, r1
   329c2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   329c4:	1dfb      	adds	r3, r7, #7
   329c6:	781b      	ldrb	r3, [r3, #0]
   329c8:	3b06      	subs	r3, #6
   329ca:	425a      	negs	r2, r3
   329cc:	4153      	adcs	r3, r2
   329ce:	b2db      	uxtb	r3, r3
   329d0:	1c1a      	adds	r2, r3, #0
   329d2:	2303      	movs	r3, #3
   329d4:	4013      	ands	r3, r2
   329d6:	b2da      	uxtb	r2, r3
   329d8:	2318      	movs	r3, #24
   329da:	18fb      	adds	r3, r7, r3
   329dc:	2103      	movs	r1, #3
   329de:	400a      	ands	r2, r1
   329e0:	1890      	adds	r0, r2, r2
   329e2:	781a      	ldrb	r2, [r3, #0]
   329e4:	2106      	movs	r1, #6
   329e6:	438a      	bics	r2, r1
   329e8:	1c11      	adds	r1, r2, #0
   329ea:	1c02      	adds	r2, r0, #0
   329ec:	430a      	orrs	r2, r1
   329ee:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   329f0:	2318      	movs	r3, #24
   329f2:	18fb      	adds	r3, r7, r3
   329f4:	781a      	ldrb	r2, [r3, #0]
   329f6:	2314      	movs	r3, #20
   329f8:	18fb      	adds	r3, r7, r3
   329fa:	0011      	movs	r1, r2
   329fc:	0018      	movs	r0, r3
   329fe:	4b0f      	ldr	r3, [pc, #60]	; (32a3c <MQTTSerialize_ack+0xe8>)
   32a00:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   32a02:	697b      	ldr	r3, [r7, #20]
   32a04:	2102      	movs	r1, #2
   32a06:	0018      	movs	r0, r3
   32a08:	4b0d      	ldr	r3, [pc, #52]	; (32a40 <MQTTSerialize_ack+0xec>)
   32a0a:	4798      	blx	r3
   32a0c:	0002      	movs	r2, r0
   32a0e:	697b      	ldr	r3, [r7, #20]
   32a10:	189b      	adds	r3, r3, r2
   32a12:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   32a14:	2328      	movs	r3, #40	; 0x28
   32a16:	18fb      	adds	r3, r7, r3
   32a18:	881a      	ldrh	r2, [r3, #0]
   32a1a:	2314      	movs	r3, #20
   32a1c:	18fb      	adds	r3, r7, r3
   32a1e:	0011      	movs	r1, r2
   32a20:	0018      	movs	r0, r3
   32a22:	4b08      	ldr	r3, [pc, #32]	; (32a44 <MQTTSerialize_ack+0xf0>)
   32a24:	4798      	blx	r3
	rc = ptr - buf;
   32a26:	697b      	ldr	r3, [r7, #20]
   32a28:	001a      	movs	r2, r3
   32a2a:	68fb      	ldr	r3, [r7, #12]
   32a2c:	1ad3      	subs	r3, r2, r3
   32a2e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32a30:	69fb      	ldr	r3, [r7, #28]
}
   32a32:	0018      	movs	r0, r3
   32a34:	46bd      	mov	sp, r7
   32a36:	b008      	add	sp, #32
   32a38:	bd80      	pop	{r7, pc}
   32a3a:	46c0      	nop			; (mov r8, r8)
   32a3c:	0003252f 	.word	0x0003252f
   32a40:	00032315 	.word	0x00032315
   32a44:	00032559 	.word	0x00032559

00032a48 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   32a48:	b580      	push	{r7, lr}
   32a4a:	b084      	sub	sp, #16
   32a4c:	af00      	add	r7, sp, #0
   32a4e:	6078      	str	r0, [r7, #4]
   32a50:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   32a52:	2302      	movs	r3, #2
   32a54:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   32a56:	2300      	movs	r3, #0
   32a58:	60fb      	str	r3, [r7, #12]
   32a5a:	e014      	b.n	32a86 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   32a5c:	68fa      	ldr	r2, [r7, #12]
   32a5e:	0013      	movs	r3, r2
   32a60:	005b      	lsls	r3, r3, #1
   32a62:	189b      	adds	r3, r3, r2
   32a64:	009b      	lsls	r3, r3, #2
   32a66:	001a      	movs	r2, r3
   32a68:	683b      	ldr	r3, [r7, #0]
   32a6a:	189b      	adds	r3, r3, r2
   32a6c:	6818      	ldr	r0, [r3, #0]
   32a6e:	6859      	ldr	r1, [r3, #4]
   32a70:	689a      	ldr	r2, [r3, #8]
   32a72:	4b09      	ldr	r3, [pc, #36]	; (32a98 <MQTTSerialize_subscribeLength+0x50>)
   32a74:	4798      	blx	r3
   32a76:	0003      	movs	r3, r0
   32a78:	3303      	adds	r3, #3
   32a7a:	68ba      	ldr	r2, [r7, #8]
   32a7c:	18d3      	adds	r3, r2, r3
   32a7e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   32a80:	68fb      	ldr	r3, [r7, #12]
   32a82:	3301      	adds	r3, #1
   32a84:	60fb      	str	r3, [r7, #12]
   32a86:	68fa      	ldr	r2, [r7, #12]
   32a88:	687b      	ldr	r3, [r7, #4]
   32a8a:	429a      	cmp	r2, r3
   32a8c:	dbe6      	blt.n	32a5c <MQTTSerialize_subscribeLength+0x14>
	return len;
   32a8e:	68bb      	ldr	r3, [r7, #8]
}
   32a90:	0018      	movs	r0, r3
   32a92:	46bd      	mov	sp, r7
   32a94:	b004      	add	sp, #16
   32a96:	bd80      	pop	{r7, pc}
   32a98:	000326e9 	.word	0x000326e9

00032a9c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   32a9c:	b590      	push	{r4, r7, lr}
   32a9e:	b08b      	sub	sp, #44	; 0x2c
   32aa0:	af00      	add	r7, sp, #0
   32aa2:	60f8      	str	r0, [r7, #12]
   32aa4:	60b9      	str	r1, [r7, #8]
   32aa6:	0019      	movs	r1, r3
   32aa8:	1dfb      	adds	r3, r7, #7
   32aaa:	701a      	strb	r2, [r3, #0]
   32aac:	1d3b      	adds	r3, r7, #4
   32aae:	1c0a      	adds	r2, r1, #0
   32ab0:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   32ab2:	68fb      	ldr	r3, [r7, #12]
   32ab4:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   32ab6:	2300      	movs	r3, #0
   32ab8:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   32aba:	2300      	movs	r3, #0
   32abc:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   32abe:	2300      	movs	r3, #0
   32ac0:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   32ac2:	2300      	movs	r3, #0
   32ac4:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   32ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   32ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32aca:	0011      	movs	r1, r2
   32acc:	0018      	movs	r0, r3
   32ace:	4b41      	ldr	r3, [pc, #260]	; (32bd4 <MQTTSerialize_subscribe+0x138>)
   32ad0:	4798      	blx	r3
   32ad2:	0003      	movs	r3, r0
   32ad4:	61fb      	str	r3, [r7, #28]
   32ad6:	69fb      	ldr	r3, [r7, #28]
   32ad8:	0018      	movs	r0, r3
   32ada:	4b3f      	ldr	r3, [pc, #252]	; (32bd8 <MQTTSerialize_subscribe+0x13c>)
   32adc:	4798      	blx	r3
   32ade:	0002      	movs	r2, r0
   32ae0:	68bb      	ldr	r3, [r7, #8]
   32ae2:	429a      	cmp	r2, r3
   32ae4:	dd03      	ble.n	32aee <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32ae6:	2302      	movs	r3, #2
   32ae8:	425b      	negs	r3, r3
   32aea:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   32aec:	e06c      	b.n	32bc8 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   32aee:	2314      	movs	r3, #20
   32af0:	18fb      	adds	r3, r7, r3
   32af2:	2200      	movs	r2, #0
   32af4:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   32af6:	2314      	movs	r3, #20
   32af8:	18fb      	adds	r3, r7, r3
   32afa:	781a      	ldrb	r2, [r3, #0]
   32afc:	210f      	movs	r1, #15
   32afe:	400a      	ands	r2, r1
   32b00:	1c11      	adds	r1, r2, #0
   32b02:	2280      	movs	r2, #128	; 0x80
   32b04:	4252      	negs	r2, r2
   32b06:	430a      	orrs	r2, r1
   32b08:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32b0a:	1dfb      	adds	r3, r7, #7
   32b0c:	781b      	ldrb	r3, [r3, #0]
   32b0e:	2201      	movs	r2, #1
   32b10:	4013      	ands	r3, r2
   32b12:	b2da      	uxtb	r2, r3
   32b14:	2314      	movs	r3, #20
   32b16:	18fb      	adds	r3, r7, r3
   32b18:	2101      	movs	r1, #1
   32b1a:	400a      	ands	r2, r1
   32b1c:	00d0      	lsls	r0, r2, #3
   32b1e:	781a      	ldrb	r2, [r3, #0]
   32b20:	2108      	movs	r1, #8
   32b22:	438a      	bics	r2, r1
   32b24:	1c11      	adds	r1, r2, #0
   32b26:	1c02      	adds	r2, r0, #0
   32b28:	430a      	orrs	r2, r1
   32b2a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   32b2c:	2314      	movs	r3, #20
   32b2e:	18fb      	adds	r3, r7, r3
   32b30:	781a      	ldrb	r2, [r3, #0]
   32b32:	2106      	movs	r1, #6
   32b34:	438a      	bics	r2, r1
   32b36:	1c11      	adds	r1, r2, #0
   32b38:	2202      	movs	r2, #2
   32b3a:	430a      	orrs	r2, r1
   32b3c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32b3e:	2314      	movs	r3, #20
   32b40:	18fb      	adds	r3, r7, r3
   32b42:	781a      	ldrb	r2, [r3, #0]
   32b44:	2318      	movs	r3, #24
   32b46:	18fb      	adds	r3, r7, r3
   32b48:	0011      	movs	r1, r2
   32b4a:	0018      	movs	r0, r3
   32b4c:	4b23      	ldr	r3, [pc, #140]	; (32bdc <MQTTSerialize_subscribe+0x140>)
   32b4e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   32b50:	69bb      	ldr	r3, [r7, #24]
   32b52:	69fa      	ldr	r2, [r7, #28]
   32b54:	0011      	movs	r1, r2
   32b56:	0018      	movs	r0, r3
   32b58:	4b21      	ldr	r3, [pc, #132]	; (32be0 <MQTTSerialize_subscribe+0x144>)
   32b5a:	4798      	blx	r3
   32b5c:	0002      	movs	r2, r0
   32b5e:	69bb      	ldr	r3, [r7, #24]
   32b60:	189b      	adds	r3, r3, r2
   32b62:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   32b64:	1d3b      	adds	r3, r7, #4
   32b66:	881a      	ldrh	r2, [r3, #0]
   32b68:	2318      	movs	r3, #24
   32b6a:	18fb      	adds	r3, r7, r3
   32b6c:	0011      	movs	r1, r2
   32b6e:	0018      	movs	r0, r3
   32b70:	4b1c      	ldr	r3, [pc, #112]	; (32be4 <MQTTSerialize_subscribe+0x148>)
   32b72:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   32b74:	2300      	movs	r3, #0
   32b76:	623b      	str	r3, [r7, #32]
   32b78:	e01d      	b.n	32bb6 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   32b7a:	6a3a      	ldr	r2, [r7, #32]
   32b7c:	0013      	movs	r3, r2
   32b7e:	005b      	lsls	r3, r3, #1
   32b80:	189b      	adds	r3, r3, r2
   32b82:	009b      	lsls	r3, r3, #2
   32b84:	001a      	movs	r2, r3
   32b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32b88:	189b      	adds	r3, r3, r2
   32b8a:	2218      	movs	r2, #24
   32b8c:	18b8      	adds	r0, r7, r2
   32b8e:	6819      	ldr	r1, [r3, #0]
   32b90:	685a      	ldr	r2, [r3, #4]
   32b92:	689b      	ldr	r3, [r3, #8]
   32b94:	4c14      	ldr	r4, [pc, #80]	; (32be8 <MQTTSerialize_subscribe+0x14c>)
   32b96:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   32b98:	6a3b      	ldr	r3, [r7, #32]
   32b9a:	009b      	lsls	r3, r3, #2
   32b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   32b9e:	18d3      	adds	r3, r2, r3
   32ba0:	681b      	ldr	r3, [r3, #0]
   32ba2:	b2da      	uxtb	r2, r3
   32ba4:	2318      	movs	r3, #24
   32ba6:	18fb      	adds	r3, r7, r3
   32ba8:	0011      	movs	r1, r2
   32baa:	0018      	movs	r0, r3
   32bac:	4b0b      	ldr	r3, [pc, #44]	; (32bdc <MQTTSerialize_subscribe+0x140>)
   32bae:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   32bb0:	6a3b      	ldr	r3, [r7, #32]
   32bb2:	3301      	adds	r3, #1
   32bb4:	623b      	str	r3, [r7, #32]
   32bb6:	6a3a      	ldr	r2, [r7, #32]
   32bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32bba:	429a      	cmp	r2, r3
   32bbc:	dbdd      	blt.n	32b7a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   32bbe:	69bb      	ldr	r3, [r7, #24]
   32bc0:	001a      	movs	r2, r3
   32bc2:	68fb      	ldr	r3, [r7, #12]
   32bc4:	1ad3      	subs	r3, r2, r3
   32bc6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32bca:	0018      	movs	r0, r3
   32bcc:	46bd      	mov	sp, r7
   32bce:	b00b      	add	sp, #44	; 0x2c
   32bd0:	bd90      	pop	{r4, r7, pc}
   32bd2:	46c0      	nop			; (mov r8, r8)
   32bd4:	00032a49 	.word	0x00032a49
   32bd8:	0003240d 	.word	0x0003240d
   32bdc:	0003252f 	.word	0x0003252f
   32be0:	00032315 	.word	0x00032315
   32be4:	00032559 	.word	0x00032559
   32be8:	00032601 	.word	0x00032601

00032bec <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   32bec:	b590      	push	{r4, r7, lr}
   32bee:	b08b      	sub	sp, #44	; 0x2c
   32bf0:	af00      	add	r7, sp, #0
   32bf2:	60f8      	str	r0, [r7, #12]
   32bf4:	60b9      	str	r1, [r7, #8]
   32bf6:	607a      	str	r2, [r7, #4]
   32bf8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   32bfa:	2300      	movs	r3, #0
   32bfc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32c00:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32c02:	2300      	movs	r3, #0
   32c04:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32c06:	2300      	movs	r3, #0
   32c08:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   32c0a:	2318      	movs	r3, #24
   32c0c:	18fb      	adds	r3, r7, r3
   32c0e:	0018      	movs	r0, r3
   32c10:	4b2c      	ldr	r3, [pc, #176]	; (32cc4 <MQTTDeserialize_suback+0xd8>)
   32c12:	4798      	blx	r3
   32c14:	0003      	movs	r3, r0
   32c16:	001a      	movs	r2, r3
   32c18:	231c      	movs	r3, #28
   32c1a:	18fb      	adds	r3, r7, r3
   32c1c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   32c1e:	231c      	movs	r3, #28
   32c20:	18fb      	adds	r3, r7, r3
   32c22:	781b      	ldrb	r3, [r3, #0]
   32c24:	220f      	movs	r2, #15
   32c26:	4393      	bics	r3, r2
   32c28:	b2db      	uxtb	r3, r3
   32c2a:	2b90      	cmp	r3, #144	; 0x90
   32c2c:	d142      	bne.n	32cb4 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32c2e:	69bb      	ldr	r3, [r7, #24]
   32c30:	2214      	movs	r2, #20
   32c32:	18ba      	adds	r2, r7, r2
   32c34:	0011      	movs	r1, r2
   32c36:	0018      	movs	r0, r3
   32c38:	4b23      	ldr	r3, [pc, #140]	; (32cc8 <MQTTDeserialize_suback+0xdc>)
   32c3a:	4798      	blx	r3
   32c3c:	0003      	movs	r3, r0
   32c3e:	627b      	str	r3, [r7, #36]	; 0x24
   32c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32c42:	69bb      	ldr	r3, [r7, #24]
   32c44:	189b      	adds	r3, r3, r2
   32c46:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32c48:	69bb      	ldr	r3, [r7, #24]
   32c4a:	697a      	ldr	r2, [r7, #20]
   32c4c:	189b      	adds	r3, r3, r2
   32c4e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32c50:	6a3b      	ldr	r3, [r7, #32]
   32c52:	69ba      	ldr	r2, [r7, #24]
   32c54:	1a9b      	subs	r3, r3, r2
   32c56:	2b01      	cmp	r3, #1
   32c58:	dd2e      	ble.n	32cb8 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   32c5a:	2318      	movs	r3, #24
   32c5c:	18fb      	adds	r3, r7, r3
   32c5e:	0018      	movs	r0, r3
   32c60:	4b1a      	ldr	r3, [pc, #104]	; (32ccc <MQTTDeserialize_suback+0xe0>)
   32c62:	4798      	blx	r3
   32c64:	0003      	movs	r3, r0
   32c66:	b29a      	uxth	r2, r3
   32c68:	68fb      	ldr	r3, [r7, #12]
   32c6a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   32c6c:	687b      	ldr	r3, [r7, #4]
   32c6e:	2200      	movs	r2, #0
   32c70:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   32c72:	e018      	b.n	32ca6 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   32c74:	687b      	ldr	r3, [r7, #4]
   32c76:	681a      	ldr	r2, [r3, #0]
   32c78:	68bb      	ldr	r3, [r7, #8]
   32c7a:	429a      	cmp	r2, r3
   32c7c:	dd03      	ble.n	32c86 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   32c7e:	2301      	movs	r3, #1
   32c80:	425b      	negs	r3, r3
   32c82:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   32c84:	e019      	b.n	32cba <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   32c86:	687b      	ldr	r3, [r7, #4]
   32c88:	681a      	ldr	r2, [r3, #0]
   32c8a:	1c51      	adds	r1, r2, #1
   32c8c:	687b      	ldr	r3, [r7, #4]
   32c8e:	6019      	str	r1, [r3, #0]
   32c90:	0013      	movs	r3, r2
   32c92:	009b      	lsls	r3, r3, #2
   32c94:	683a      	ldr	r2, [r7, #0]
   32c96:	18d4      	adds	r4, r2, r3
   32c98:	2318      	movs	r3, #24
   32c9a:	18fb      	adds	r3, r7, r3
   32c9c:	0018      	movs	r0, r3
   32c9e:	4b09      	ldr	r3, [pc, #36]	; (32cc4 <MQTTDeserialize_suback+0xd8>)
   32ca0:	4798      	blx	r3
   32ca2:	0003      	movs	r3, r0
   32ca4:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   32ca6:	69ba      	ldr	r2, [r7, #24]
   32ca8:	6a3b      	ldr	r3, [r7, #32]
   32caa:	429a      	cmp	r2, r3
   32cac:	d3e2      	bcc.n	32c74 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   32cae:	2301      	movs	r3, #1
   32cb0:	627b      	str	r3, [r7, #36]	; 0x24
   32cb2:	e002      	b.n	32cba <MQTTDeserialize_suback+0xce>
		goto exit;
   32cb4:	46c0      	nop			; (mov r8, r8)
   32cb6:	e000      	b.n	32cba <MQTTDeserialize_suback+0xce>
		goto exit;
   32cb8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32cbc:	0018      	movs	r0, r3
   32cbe:	46bd      	mov	sp, r7
   32cc0:	b00b      	add	sp, #44	; 0x2c
   32cc2:	bd90      	pop	{r4, r7, pc}
   32cc4:	00032503 	.word	0x00032503
   32cc8:	0003249d 	.word	0x0003249d
   32ccc:	000324d1 	.word	0x000324d1

00032cd0 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   32cd0:	b580      	push	{r7, lr}
   32cd2:	b082      	sub	sp, #8
   32cd4:	af00      	add	r7, sp, #0
   32cd6:	6078      	str	r0, [r7, #4]
	config->port = 80;
   32cd8:	687b      	ldr	r3, [r7, #4]
   32cda:	2250      	movs	r2, #80	; 0x50
   32cdc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   32cde:	687b      	ldr	r3, [r7, #4]
   32ce0:	2200      	movs	r2, #0
   32ce2:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   32ce4:	687b      	ldr	r3, [r7, #4]
   32ce6:	4a0b      	ldr	r2, [pc, #44]	; (32d14 <http_client_get_config_defaults+0x44>)
   32ce8:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   32cea:	687b      	ldr	r3, [r7, #4]
   32cec:	2200      	movs	r2, #0
   32cee:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   32cf0:	687b      	ldr	r3, [r7, #4]
   32cf2:	2200      	movs	r2, #0
   32cf4:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   32cf6:	687b      	ldr	r3, [r7, #4]
   32cf8:	2280      	movs	r2, #128	; 0x80
   32cfa:	0052      	lsls	r2, r2, #1
   32cfc:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   32cfe:	687b      	ldr	r3, [r7, #4]
   32d00:	2252      	movs	r2, #82	; 0x52
   32d02:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   32d04:	687b      	ldr	r3, [r7, #4]
   32d06:	4a04      	ldr	r2, [pc, #16]	; (32d18 <http_client_get_config_defaults+0x48>)
   32d08:	619a      	str	r2, [r3, #24]
}
   32d0a:	46c0      	nop			; (mov r8, r8)
   32d0c:	46bd      	mov	sp, r7
   32d0e:	b002      	add	sp, #8
   32d10:	bd80      	pop	{r7, pc}
   32d12:	46c0      	nop			; (mov r8, r8)
   32d14:	00004e20 	.word	0x00004e20
   32d18:	0003cd04 	.word	0x0003cd04

00032d1c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   32d1c:	b590      	push	{r4, r7, lr}
   32d1e:	b083      	sub	sp, #12
   32d20:	af00      	add	r7, sp, #0
   32d22:	6078      	str	r0, [r7, #4]
   32d24:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   32d26:	687b      	ldr	r3, [r7, #4]
   32d28:	2b00      	cmp	r3, #0
   32d2a:	d002      	beq.n	32d32 <http_client_init+0x16>
   32d2c:	683b      	ldr	r3, [r7, #0]
   32d2e:	2b00      	cmp	r3, #0
   32d30:	d102      	bne.n	32d38 <http_client_init+0x1c>
		return -EINVAL;
   32d32:	2316      	movs	r3, #22
   32d34:	425b      	negs	r3, r3
   32d36:	e058      	b.n	32dea <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   32d38:	683b      	ldr	r3, [r7, #0]
   32d3a:	691b      	ldr	r3, [r3, #16]
   32d3c:	2b00      	cmp	r3, #0
   32d3e:	d102      	bne.n	32d46 <http_client_init+0x2a>
		return -EINVAL;
   32d40:	2316      	movs	r3, #22
   32d42:	425b      	negs	r3, r3
   32d44:	e051      	b.n	32dea <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   32d46:	683b      	ldr	r3, [r7, #0]
   32d48:	685b      	ldr	r3, [r3, #4]
   32d4a:	2b00      	cmp	r3, #0
   32d4c:	d102      	bne.n	32d54 <http_client_init+0x38>
		return -EINVAL;
   32d4e:	2316      	movs	r3, #22
   32d50:	425b      	negs	r3, r3
   32d52:	e04a      	b.n	32dea <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   32d54:	683b      	ldr	r3, [r7, #0]
   32d56:	695b      	ldr	r3, [r3, #20]
   32d58:	2b51      	cmp	r3, #81	; 0x51
   32d5a:	d802      	bhi.n	32d62 <http_client_init+0x46>
		return -EINVAL;
   32d5c:	2316      	movs	r3, #22
   32d5e:	425b      	negs	r3, r3
   32d60:	e043      	b.n	32dea <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   32d62:	687b      	ldr	r3, [r7, #4]
   32d64:	22e8      	movs	r2, #232	; 0xe8
   32d66:	2100      	movs	r1, #0
   32d68:	0018      	movs	r0, r3
   32d6a:	4b22      	ldr	r3, [pc, #136]	; (32df4 <http_client_init+0xd8>)
   32d6c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   32d6e:	687b      	ldr	r3, [r7, #4]
   32d70:	3350      	adds	r3, #80	; 0x50
   32d72:	6839      	ldr	r1, [r7, #0]
   32d74:	221c      	movs	r2, #28
   32d76:	0018      	movs	r0, r3
   32d78:	4b1f      	ldr	r3, [pc, #124]	; (32df8 <http_client_init+0xdc>)
   32d7a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   32d7c:	687b      	ldr	r3, [r7, #4]
   32d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32d80:	2b00      	cmp	r3, #0
   32d82:	d115      	bne.n	32db0 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   32d84:	683b      	ldr	r3, [r7, #0]
   32d86:	691b      	ldr	r3, [r3, #16]
   32d88:	0018      	movs	r0, r3
   32d8a:	4b1c      	ldr	r3, [pc, #112]	; (32dfc <http_client_init+0xe0>)
   32d8c:	4798      	blx	r3
   32d8e:	0003      	movs	r3, r0
   32d90:	001a      	movs	r2, r3
   32d92:	687b      	ldr	r3, [r7, #4]
   32d94:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   32d96:	687b      	ldr	r3, [r7, #4]
   32d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32d9a:	2b00      	cmp	r3, #0
   32d9c:	d102      	bne.n	32da4 <http_client_init+0x88>
			return -ENOMEM;
   32d9e:	230c      	movs	r3, #12
   32da0:	425b      	negs	r3, r3
   32da2:	e022      	b.n	32dea <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   32da4:	687b      	ldr	r3, [r7, #4]
   32da6:	2241      	movs	r2, #65	; 0x41
   32da8:	5c99      	ldrb	r1, [r3, r2]
   32daa:	2004      	movs	r0, #4
   32dac:	4301      	orrs	r1, r0
   32dae:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   32db0:	683b      	ldr	r3, [r7, #0]
   32db2:	891b      	ldrh	r3, [r3, #8]
   32db4:	2b00      	cmp	r3, #0
   32db6:	d010      	beq.n	32dda <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   32db8:	683b      	ldr	r3, [r7, #0]
   32dba:	6858      	ldr	r0, [r3, #4]
   32dbc:	687a      	ldr	r2, [r7, #4]
   32dbe:	4910      	ldr	r1, [pc, #64]	; (32e00 <http_client_init+0xe4>)
   32dc0:	2300      	movs	r3, #0
   32dc2:	4c10      	ldr	r4, [pc, #64]	; (32e04 <http_client_init+0xe8>)
   32dc4:	47a0      	blx	r4
   32dc6:	0002      	movs	r2, r0
   32dc8:	687b      	ldr	r3, [r7, #4]
   32dca:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   32dcc:	687b      	ldr	r3, [r7, #4]
   32dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32dd0:	2b00      	cmp	r3, #0
   32dd2:	da02      	bge.n	32dda <http_client_init+0xbe>
			return -ENOSPC;
   32dd4:	231c      	movs	r3, #28
   32dd6:	425b      	negs	r3, r3
   32dd8:	e007      	b.n	32dea <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   32dda:	687b      	ldr	r3, [r7, #4]
   32ddc:	2200      	movs	r2, #0
   32dde:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   32de0:	687b      	ldr	r3, [r7, #4]
   32de2:	22d8      	movs	r2, #216	; 0xd8
   32de4:	2100      	movs	r1, #0
   32de6:	5099      	str	r1, [r3, r2]

	return 0;
   32de8:	2300      	movs	r3, #0
}
   32dea:	0018      	movs	r0, r3
   32dec:	46bd      	mov	sp, r7
   32dee:	b003      	add	sp, #12
   32df0:	bd90      	pop	{r4, r7, pc}
   32df2:	46c0      	nop			; (mov r8, r8)
   32df4:	0003781f 	.word	0x0003781f
   32df8:	000377e9 	.word	0x000377e9
   32dfc:	000377c1 	.word	0x000377c1
   32e00:	000330cd 	.word	0x000330cd
   32e04:	00034771 	.word	0x00034771

00032e08 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   32e08:	b580      	push	{r7, lr}
   32e0a:	b082      	sub	sp, #8
   32e0c:	af00      	add	r7, sp, #0
   32e0e:	6078      	str	r0, [r7, #4]
   32e10:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   32e12:	687b      	ldr	r3, [r7, #4]
   32e14:	2b00      	cmp	r3, #0
   32e16:	d102      	bne.n	32e1e <http_client_register_callback+0x16>
		return -EINVAL;
   32e18:	2316      	movs	r3, #22
   32e1a:	425b      	negs	r3, r3
   32e1c:	e003      	b.n	32e26 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   32e1e:	687b      	ldr	r3, [r7, #4]
   32e20:	683a      	ldr	r2, [r7, #0]
   32e22:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   32e24:	2300      	movs	r3, #0
}
   32e26:	0018      	movs	r0, r3
   32e28:	46bd      	mov	sp, r7
   32e2a:	b002      	add	sp, #8
   32e2c:	bd80      	pop	{r7, pc}
	...

00032e30 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   32e30:	b580      	push	{r7, lr}
   32e32:	b082      	sub	sp, #8
   32e34:	af00      	add	r7, sp, #0
   32e36:	6078      	str	r0, [r7, #4]
	switch (err) {
   32e38:	687b      	ldr	r3, [r7, #4]
   32e3a:	330e      	adds	r3, #14
   32e3c:	2b0e      	cmp	r3, #14
   32e3e:	d825      	bhi.n	32e8c <_hwerr_to_stderr+0x5c>
   32e40:	009a      	lsls	r2, r3, #2
   32e42:	4b18      	ldr	r3, [pc, #96]	; (32ea4 <_hwerr_to_stderr+0x74>)
   32e44:	18d3      	adds	r3, r2, r3
   32e46:	681b      	ldr	r3, [r3, #0]
   32e48:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   32e4a:	2305      	movs	r3, #5
   32e4c:	425b      	negs	r3, r3
   32e4e:	e024      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   32e50:	2302      	movs	r3, #2
   32e52:	425b      	negs	r3, r3
   32e54:	e021      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   32e56:	2370      	movs	r3, #112	; 0x70
   32e58:	425b      	negs	r3, r3
   32e5a:	e01e      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   32e5c:	230c      	movs	r3, #12
   32e5e:	425b      	negs	r3, r3
   32e60:	e01b      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   32e62:	2316      	movs	r3, #22
   32e64:	425b      	negs	r3, r3
   32e66:	e018      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   32e68:	230c      	movs	r3, #12
   32e6a:	425b      	negs	r3, r3
   32e6c:	e015      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   32e6e:	2305      	movs	r3, #5
   32e70:	425b      	negs	r3, r3
   32e72:	e012      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   32e74:	2379      	movs	r3, #121	; 0x79
   32e76:	425b      	negs	r3, r3
   32e78:	e00f      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   32e7a:	2368      	movs	r3, #104	; 0x68
   32e7c:	425b      	negs	r3, r3
   32e7e:	e00c      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   32e80:	230b      	movs	r3, #11
   32e82:	425b      	negs	r3, r3
   32e84:	e009      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   32e86:	2310      	movs	r3, #16
   32e88:	425b      	negs	r3, r3
   32e8a:	e006      	b.n	32e9a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   32e8c:	687b      	ldr	r3, [r7, #4]
   32e8e:	2b00      	cmp	r3, #0
   32e90:	da02      	bge.n	32e98 <_hwerr_to_stderr+0x68>
				return -EIO;
   32e92:	2305      	movs	r3, #5
   32e94:	425b      	negs	r3, r3
   32e96:	e000      	b.n	32e9a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   32e98:	2300      	movs	r3, #0
	}
}
   32e9a:	0018      	movs	r0, r3
   32e9c:	46bd      	mov	sp, r7
   32e9e:	b002      	add	sp, #8
   32ea0:	bd80      	pop	{r7, pc}
   32ea2:	46c0      	nop			; (mov r8, r8)
   32ea4:	0003ce40 	.word	0x0003ce40

00032ea8 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   32ea8:	b580      	push	{r7, lr}
   32eaa:	b08a      	sub	sp, #40	; 0x28
   32eac:	af00      	add	r7, sp, #0
   32eae:	603a      	str	r2, [r7, #0]
   32eb0:	1dfb      	adds	r3, r7, #7
   32eb2:	1c02      	adds	r2, r0, #0
   32eb4:	701a      	strb	r2, [r3, #0]
   32eb6:	1dbb      	adds	r3, r7, #6
   32eb8:	1c0a      	adds	r2, r1, #0
   32eba:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   32ebc:	1dfb      	adds	r3, r7, #7
   32ebe:	2200      	movs	r2, #0
   32ec0:	569a      	ldrsb	r2, [r3, r2]
   32ec2:	4b4b      	ldr	r3, [pc, #300]	; (32ff0 <http_client_socket_event_handler+0x148>)
   32ec4:	0092      	lsls	r2, r2, #2
   32ec6:	58d3      	ldr	r3, [r2, r3]
   32ec8:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   32eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ecc:	2b00      	cmp	r3, #0
   32ece:	d100      	bne.n	32ed2 <http_client_socket_event_handler+0x2a>
   32ed0:	e08a      	b.n	32fe8 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   32ed2:	1dbb      	adds	r3, r7, #6
   32ed4:	781b      	ldrb	r3, [r3, #0]
   32ed6:	2b06      	cmp	r3, #6
   32ed8:	d040      	beq.n	32f5c <http_client_socket_event_handler+0xb4>
   32eda:	2b07      	cmp	r3, #7
   32edc:	d060      	beq.n	32fa0 <http_client_socket_event_handler+0xf8>
   32ede:	2b05      	cmp	r3, #5
   32ee0:	d000      	beq.n	32ee4 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   32ee2:	e082      	b.n	32fea <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   32ee4:	683b      	ldr	r3, [r7, #0]
   32ee6:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   32ee8:	6a3b      	ldr	r3, [r7, #32]
   32eea:	785b      	ldrb	r3, [r3, #1]
   32eec:	b25b      	sxtb	r3, r3
   32eee:	001a      	movs	r2, r3
   32ef0:	230c      	movs	r3, #12
   32ef2:	18fb      	adds	r3, r7, r3
   32ef4:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   32ef6:	6a3b      	ldr	r3, [r7, #32]
   32ef8:	785b      	ldrb	r3, [r3, #1]
   32efa:	b25b      	sxtb	r3, r3
   32efc:	2b00      	cmp	r3, #0
   32efe:	da0c      	bge.n	32f1a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   32f00:	6a3b      	ldr	r3, [r7, #32]
   32f02:	785b      	ldrb	r3, [r3, #1]
   32f04:	b25b      	sxtb	r3, r3
   32f06:	0018      	movs	r0, r3
   32f08:	4b3a      	ldr	r3, [pc, #232]	; (32ff4 <http_client_socket_event_handler+0x14c>)
   32f0a:	4798      	blx	r3
   32f0c:	0002      	movs	r2, r0
   32f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f10:	0011      	movs	r1, r2
   32f12:	0018      	movs	r0, r3
   32f14:	4b38      	ldr	r3, [pc, #224]	; (32ff8 <http_client_socket_event_handler+0x150>)
   32f16:	4798      	blx	r3
    	break;
   32f18:	e067      	b.n	32fea <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   32f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f1e:	2b00      	cmp	r3, #0
   32f20:	d006      	beq.n	32f30 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   32f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f26:	220c      	movs	r2, #12
   32f28:	18ba      	adds	r2, r7, r2
   32f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   32f2c:	2100      	movs	r1, #0
   32f2e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   32f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f32:	2203      	movs	r2, #3
   32f34:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   32f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f38:	6d58      	ldr	r0, [r3, #84]	; 0x54
   32f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f3c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   32f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f40:	2258      	movs	r2, #88	; 0x58
   32f42:	5a9b      	ldrh	r3, [r3, r2]
   32f44:	001a      	movs	r2, r3
   32f46:	4b2d      	ldr	r3, [pc, #180]	; (32ffc <http_client_socket_event_handler+0x154>)
   32f48:	4798      	blx	r3
    		_http_client_recv_packet(module);
   32f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f4c:	0018      	movs	r0, r3
   32f4e:	4b2c      	ldr	r3, [pc, #176]	; (33000 <http_client_socket_event_handler+0x158>)
   32f50:	4798      	blx	r3
			_http_client_request(module);
   32f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f54:	0018      	movs	r0, r3
   32f56:	4b2b      	ldr	r3, [pc, #172]	; (33004 <http_client_socket_event_handler+0x15c>)
   32f58:	4798      	blx	r3
    	break;
   32f5a:	e046      	b.n	32fea <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   32f5c:	683b      	ldr	r3, [r7, #0]
   32f5e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   32f60:	69fb      	ldr	r3, [r7, #28]
   32f62:	2204      	movs	r2, #4
   32f64:	5e9b      	ldrsh	r3, [r3, r2]
   32f66:	2b00      	cmp	r3, #0
   32f68:	dd09      	ble.n	32f7e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   32f6a:	69fb      	ldr	r3, [r7, #28]
   32f6c:	2204      	movs	r2, #4
   32f6e:	5e9b      	ldrsh	r3, [r3, r2]
   32f70:	001a      	movs	r2, r3
   32f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f74:	0011      	movs	r1, r2
   32f76:	0018      	movs	r0, r3
   32f78:	4b23      	ldr	r3, [pc, #140]	; (33008 <http_client_socket_event_handler+0x160>)
   32f7a:	4798      	blx	r3
   32f7c:	e00b      	b.n	32f96 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   32f7e:	69fb      	ldr	r3, [r7, #28]
   32f80:	2204      	movs	r2, #4
   32f82:	5e9b      	ldrsh	r3, [r3, r2]
   32f84:	0018      	movs	r0, r3
   32f86:	4b1b      	ldr	r3, [pc, #108]	; (32ff4 <http_client_socket_event_handler+0x14c>)
   32f88:	4798      	blx	r3
   32f8a:	0002      	movs	r2, r0
   32f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f8e:	0011      	movs	r1, r2
   32f90:	0018      	movs	r0, r3
   32f92:	4b19      	ldr	r3, [pc, #100]	; (32ff8 <http_client_socket_event_handler+0x150>)
   32f94:	4798      	blx	r3
		_http_client_recv_packet(module);
   32f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32f98:	0018      	movs	r0, r3
   32f9a:	4b19      	ldr	r3, [pc, #100]	; (33000 <http_client_socket_event_handler+0x158>)
   32f9c:	4798      	blx	r3
		break;
   32f9e:	e024      	b.n	32fea <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   32fa0:	231a      	movs	r3, #26
   32fa2:	18fb      	adds	r3, r7, r3
   32fa4:	683a      	ldr	r2, [r7, #0]
   32fa6:	8812      	ldrh	r2, [r2, #0]
   32fa8:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   32faa:	231a      	movs	r3, #26
   32fac:	18fb      	adds	r3, r7, r3
   32fae:	2200      	movs	r2, #0
   32fb0:	5e9b      	ldrsh	r3, [r3, r2]
   32fb2:	2b00      	cmp	r3, #0
   32fb4:	da0d      	bge.n	32fd2 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   32fb6:	231a      	movs	r3, #26
   32fb8:	18fb      	adds	r3, r7, r3
   32fba:	2200      	movs	r2, #0
   32fbc:	5e9b      	ldrsh	r3, [r3, r2]
   32fbe:	0018      	movs	r0, r3
   32fc0:	4b0c      	ldr	r3, [pc, #48]	; (32ff4 <http_client_socket_event_handler+0x14c>)
   32fc2:	4798      	blx	r3
   32fc4:	0002      	movs	r2, r0
   32fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32fc8:	0011      	movs	r1, r2
   32fca:	0018      	movs	r0, r3
   32fcc:	4b0a      	ldr	r3, [pc, #40]	; (32ff8 <http_client_socket_event_handler+0x150>)
   32fce:	4798      	blx	r3
   32fd0:	e003      	b.n	32fda <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   32fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32fd4:	0018      	movs	r0, r3
   32fd6:	4b0b      	ldr	r3, [pc, #44]	; (33004 <http_client_socket_event_handler+0x15c>)
   32fd8:	4798      	blx	r3
		module->sending = 0;
   32fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32fdc:	2241      	movs	r2, #65	; 0x41
   32fde:	5c99      	ldrb	r1, [r3, r2]
   32fe0:	2001      	movs	r0, #1
   32fe2:	4381      	bics	r1, r0
   32fe4:	5499      	strb	r1, [r3, r2]
    	break;
   32fe6:	e000      	b.n	32fea <http_client_socket_event_handler+0x142>
		return;
   32fe8:	46c0      	nop			; (mov r8, r8)
	}

}
   32fea:	46bd      	mov	sp, r7
   32fec:	b00a      	add	sp, #40	; 0x28
   32fee:	bd80      	pop	{r7, pc}
   32ff0:	20004554 	.word	0x20004554
   32ff4:	00032e31 	.word	0x00032e31
   32ff8:	000334a5 	.word	0x000334a5
   32ffc:	00034801 	.word	0x00034801
   33000:	00033d31 	.word	0x00033d31
   33004:	000335f9 	.word	0x000335f9
   33008:	00033d95 	.word	0x00033d95

0003300c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   3300c:	b580      	push	{r7, lr}
   3300e:	b088      	sub	sp, #32
   33010:	af00      	add	r7, sp, #0
   33012:	6078      	str	r0, [r7, #4]
   33014:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   33016:	2300      	movs	r3, #0
   33018:	61fb      	str	r3, [r7, #28]
   3301a:	e048      	b.n	330ae <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   3301c:	4b27      	ldr	r3, [pc, #156]	; (330bc <http_client_socket_resolve_handler+0xb0>)
   3301e:	69fa      	ldr	r2, [r7, #28]
   33020:	0092      	lsls	r2, r2, #2
   33022:	58d3      	ldr	r3, [r2, r3]
   33024:	2b00      	cmp	r3, #0
   33026:	d03f      	beq.n	330a8 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   33028:	4b24      	ldr	r3, [pc, #144]	; (330bc <http_client_socket_resolve_handler+0xb0>)
   3302a:	69fa      	ldr	r2, [r7, #28]
   3302c:	0092      	lsls	r2, r2, #2
   3302e:	58d3      	ldr	r3, [r2, r3]
   33030:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   33032:	69bb      	ldr	r3, [r7, #24]
   33034:	1c5a      	adds	r2, r3, #1
   33036:	687b      	ldr	r3, [r7, #4]
   33038:	0011      	movs	r1, r2
   3303a:	0018      	movs	r0, r3
   3303c:	4b20      	ldr	r3, [pc, #128]	; (330c0 <http_client_socket_resolve_handler+0xb4>)
   3303e:	4798      	blx	r3
   33040:	1e03      	subs	r3, r0, #0
   33042:	d131      	bne.n	330a8 <http_client_socket_resolve_handler+0x9c>
   33044:	69bb      	ldr	r3, [r7, #24]
   33046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33048:	2b01      	cmp	r3, #1
   3304a:	d12d      	bne.n	330a8 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   3304c:	683b      	ldr	r3, [r7, #0]
   3304e:	2b00      	cmp	r3, #0
   33050:	d107      	bne.n	33062 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   33052:	2376      	movs	r3, #118	; 0x76
   33054:	425a      	negs	r2, r3
   33056:	69bb      	ldr	r3, [r7, #24]
   33058:	0011      	movs	r1, r2
   3305a:	0018      	movs	r0, r3
   3305c:	4b19      	ldr	r3, [pc, #100]	; (330c4 <http_client_socket_resolve_handler+0xb8>)
   3305e:	4798      	blx	r3
					return;
   33060:	e028      	b.n	330b4 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   33062:	2308      	movs	r3, #8
   33064:	18fb      	adds	r3, r7, r3
   33066:	2202      	movs	r2, #2
   33068:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3306a:	69bb      	ldr	r3, [r7, #24]
   3306c:	2250      	movs	r2, #80	; 0x50
   3306e:	5a9b      	ldrh	r3, [r3, r2]
   33070:	021b      	lsls	r3, r3, #8
   33072:	b21a      	sxth	r2, r3
   33074:	69bb      	ldr	r3, [r7, #24]
   33076:	2150      	movs	r1, #80	; 0x50
   33078:	5a5b      	ldrh	r3, [r3, r1]
   3307a:	0a1b      	lsrs	r3, r3, #8
   3307c:	b29b      	uxth	r3, r3
   3307e:	b21b      	sxth	r3, r3
   33080:	4313      	orrs	r3, r2
   33082:	b21b      	sxth	r3, r3
   33084:	b29a      	uxth	r2, r3
   33086:	2308      	movs	r3, #8
   33088:	18fb      	adds	r3, r7, r3
   3308a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   3308c:	2308      	movs	r3, #8
   3308e:	18fb      	adds	r3, r7, r3
   33090:	683a      	ldr	r2, [r7, #0]
   33092:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   33094:	69bb      	ldr	r3, [r7, #24]
   33096:	781b      	ldrb	r3, [r3, #0]
   33098:	b25b      	sxtb	r3, r3
   3309a:	2208      	movs	r2, #8
   3309c:	18b9      	adds	r1, r7, r2
   3309e:	2210      	movs	r2, #16
   330a0:	0018      	movs	r0, r3
   330a2:	4b09      	ldr	r3, [pc, #36]	; (330c8 <http_client_socket_resolve_handler+0xbc>)
   330a4:	4798      	blx	r3
				return;
   330a6:	e005      	b.n	330b4 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   330a8:	69fb      	ldr	r3, [r7, #28]
   330aa:	3301      	adds	r3, #1
   330ac:	61fb      	str	r3, [r7, #28]
   330ae:	69fb      	ldr	r3, [r7, #28]
   330b0:	2b06      	cmp	r3, #6
   330b2:	ddb3      	ble.n	3301c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   330b4:	46bd      	mov	sp, r7
   330b6:	b008      	add	sp, #32
   330b8:	bd80      	pop	{r7, pc}
   330ba:	46c0      	nop			; (mov r8, r8)
   330bc:	20004554 	.word	0x20004554
   330c0:	00037b77 	.word	0x00037b77
   330c4:	000334a5 	.word	0x000334a5
   330c8:	0002796d 	.word	0x0002796d

000330cc <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   330cc:	b580      	push	{r7, lr}
   330ce:	b086      	sub	sp, #24
   330d0:	af00      	add	r7, sp, #0
   330d2:	60f8      	str	r0, [r7, #12]
   330d4:	60b9      	str	r1, [r7, #8]
   330d6:	607a      	str	r2, [r7, #4]
   330d8:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   330da:	687b      	ldr	r3, [r7, #4]
   330dc:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   330de:	697b      	ldr	r3, [r7, #20]
   330e0:	2b00      	cmp	r3, #0
   330e2:	d007      	beq.n	330f4 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   330e4:	233e      	movs	r3, #62	; 0x3e
   330e6:	425a      	negs	r2, r3
   330e8:	697b      	ldr	r3, [r7, #20]
   330ea:	0011      	movs	r1, r2
   330ec:	0018      	movs	r0, r3
   330ee:	4b03      	ldr	r3, [pc, #12]	; (330fc <http_client_timer_callback+0x30>)
   330f0:	4798      	blx	r3
   330f2:	e000      	b.n	330f6 <http_client_timer_callback+0x2a>
		return;
   330f4:	46c0      	nop			; (mov r8, r8)
}
   330f6:	46bd      	mov	sp, r7
   330f8:	b006      	add	sp, #24
   330fa:	bd80      	pop	{r7, pc}
   330fc:	000334a5 	.word	0x000334a5

00033100 <_is_ip>:

static int _is_ip(const char *host)
{
   33100:	b580      	push	{r7, lr}
   33102:	b084      	sub	sp, #16
   33104:	af00      	add	r7, sp, #0
   33106:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   33108:	2300      	movs	r3, #0
   3310a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   3310c:	e03a      	b.n	33184 <_is_ip+0x84>
		ch = *host++;
   3310e:	687b      	ldr	r3, [r7, #4]
   33110:	1c5a      	adds	r2, r3, #1
   33112:	607a      	str	r2, [r7, #4]
   33114:	220b      	movs	r2, #11
   33116:	18ba      	adds	r2, r7, r2
   33118:	781b      	ldrb	r3, [r3, #0]
   3311a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   3311c:	230b      	movs	r3, #11
   3311e:	18fb      	adds	r3, r7, r3
   33120:	781b      	ldrb	r3, [r3, #0]
   33122:	2b60      	cmp	r3, #96	; 0x60
   33124:	d904      	bls.n	33130 <_is_ip+0x30>
   33126:	230b      	movs	r3, #11
   33128:	18fb      	adds	r3, r7, r3
   3312a:	781b      	ldrb	r3, [r3, #0]
   3312c:	2b66      	cmp	r3, #102	; 0x66
   3312e:	d913      	bls.n	33158 <_is_ip+0x58>
   33130:	230b      	movs	r3, #11
   33132:	18fb      	adds	r3, r7, r3
   33134:	781b      	ldrb	r3, [r3, #0]
   33136:	2b40      	cmp	r3, #64	; 0x40
   33138:	d904      	bls.n	33144 <_is_ip+0x44>
   3313a:	230b      	movs	r3, #11
   3313c:	18fb      	adds	r3, r7, r3
   3313e:	781b      	ldrb	r3, [r3, #0]
   33140:	2b46      	cmp	r3, #70	; 0x46
   33142:	d909      	bls.n	33158 <_is_ip+0x58>
   33144:	230b      	movs	r3, #11
   33146:	18fb      	adds	r3, r7, r3
   33148:	781b      	ldrb	r3, [r3, #0]
   3314a:	2b3a      	cmp	r3, #58	; 0x3a
   3314c:	d004      	beq.n	33158 <_is_ip+0x58>
   3314e:	230b      	movs	r3, #11
   33150:	18fb      	adds	r3, r7, r3
   33152:	781b      	ldrb	r3, [r3, #0]
   33154:	2b2f      	cmp	r3, #47	; 0x2f
   33156:	d102      	bne.n	3315e <_is_ip+0x5e>
			isv6 = 1;
   33158:	2301      	movs	r3, #1
   3315a:	60fb      	str	r3, [r7, #12]
   3315c:	e012      	b.n	33184 <_is_ip+0x84>
		} else if (ch == '.') {
   3315e:	230b      	movs	r3, #11
   33160:	18fb      	adds	r3, r7, r3
   33162:	781b      	ldrb	r3, [r3, #0]
   33164:	2b2e      	cmp	r3, #46	; 0x2e
   33166:	d104      	bne.n	33172 <_is_ip+0x72>
			if (isv6) {
   33168:	68fb      	ldr	r3, [r7, #12]
   3316a:	2b00      	cmp	r3, #0
   3316c:	d00a      	beq.n	33184 <_is_ip+0x84>
				return 0;
   3316e:	2300      	movs	r3, #0
   33170:	e00d      	b.n	3318e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   33172:	230b      	movs	r3, #11
   33174:	18fb      	adds	r3, r7, r3
   33176:	781b      	ldrb	r3, [r3, #0]
   33178:	2230      	movs	r2, #48	; 0x30
   3317a:	4013      	ands	r3, r2
   3317c:	2b30      	cmp	r3, #48	; 0x30
   3317e:	d001      	beq.n	33184 <_is_ip+0x84>
			return 0;
   33180:	2300      	movs	r3, #0
   33182:	e004      	b.n	3318e <_is_ip+0x8e>
	while (*host != '\0') {
   33184:	687b      	ldr	r3, [r7, #4]
   33186:	781b      	ldrb	r3, [r3, #0]
   33188:	2b00      	cmp	r3, #0
   3318a:	d1c0      	bne.n	3310e <_is_ip+0xe>
		}
	}
	return 1;
   3318c:	2301      	movs	r3, #1
}
   3318e:	0018      	movs	r0, r3
   33190:	46bd      	mov	sp, r7
   33192:	b004      	add	sp, #16
   33194:	bd80      	pop	{r7, pc}
	...

00033198 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   33198:	b5b0      	push	{r4, r5, r7, lr}
   3319a:	b08e      	sub	sp, #56	; 0x38
   3319c:	af00      	add	r7, sp, #0
   3319e:	60f8      	str	r0, [r7, #12]
   331a0:	60b9      	str	r1, [r7, #8]
   331a2:	603b      	str	r3, [r7, #0]
   331a4:	1dfb      	adds	r3, r7, #7
   331a6:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   331a8:	2337      	movs	r3, #55	; 0x37
   331aa:	18fb      	adds	r3, r7, r3
   331ac:	2200      	movs	r2, #0
   331ae:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   331b0:	2300      	movs	r3, #0
   331b2:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   331b4:	2300      	movs	r3, #0
   331b6:	633b      	str	r3, [r7, #48]	; 0x30
   331b8:	2300      	movs	r3, #0
   331ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   331bc:	2300      	movs	r3, #0
   331be:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   331c0:	68fb      	ldr	r3, [r7, #12]
   331c2:	2b00      	cmp	r3, #0
   331c4:	d102      	bne.n	331cc <http_client_send_request+0x34>
		return -EINVAL;
   331c6:	2316      	movs	r3, #22
   331c8:	425b      	negs	r3, r3
   331ca:	e145      	b.n	33458 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   331cc:	68fb      	ldr	r3, [r7, #12]
   331ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   331d0:	2b02      	cmp	r3, #2
   331d2:	d902      	bls.n	331da <http_client_send_request+0x42>
		return -EBUSY;
   331d4:	2310      	movs	r3, #16
   331d6:	425b      	negs	r3, r3
   331d8:	e13e      	b.n	33458 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   331da:	49a1      	ldr	r1, [pc, #644]	; (33460 <http_client_send_request+0x2c8>)
   331dc:	68bb      	ldr	r3, [r7, #8]
   331de:	2207      	movs	r2, #7
   331e0:	0018      	movs	r0, r3
   331e2:	4ba0      	ldr	r3, [pc, #640]	; (33464 <http_client_send_request+0x2cc>)
   331e4:	4798      	blx	r3
   331e6:	1e03      	subs	r3, r0, #0
   331e8:	d102      	bne.n	331f0 <http_client_send_request+0x58>
		i = 7;
   331ea:	2307      	movs	r3, #7
   331ec:	633b      	str	r3, [r7, #48]	; 0x30
   331ee:	e009      	b.n	33204 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   331f0:	499d      	ldr	r1, [pc, #628]	; (33468 <http_client_send_request+0x2d0>)
   331f2:	68bb      	ldr	r3, [r7, #8]
   331f4:	2208      	movs	r2, #8
   331f6:	0018      	movs	r0, r3
   331f8:	4b9a      	ldr	r3, [pc, #616]	; (33464 <http_client_send_request+0x2cc>)
   331fa:	4798      	blx	r3
   331fc:	1e03      	subs	r3, r0, #0
   331fe:	d101      	bne.n	33204 <http_client_send_request+0x6c>
		i = 8;
   33200:	2308      	movs	r3, #8
   33202:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   33204:	68fb      	ldr	r3, [r7, #12]
   33206:	1c5c      	adds	r4, r3, #1
   33208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3320a:	68ba      	ldr	r2, [r7, #8]
   3320c:	18d5      	adds	r5, r2, r3
   3320e:	68fb      	ldr	r3, [r7, #12]
   33210:	3301      	adds	r3, #1
   33212:	0018      	movs	r0, r3
   33214:	4b95      	ldr	r3, [pc, #596]	; (3346c <http_client_send_request+0x2d4>)
   33216:	4798      	blx	r3
   33218:	0003      	movs	r3, r0
   3321a:	001a      	movs	r2, r3
   3321c:	0029      	movs	r1, r5
   3321e:	0020      	movs	r0, r4
   33220:	4b90      	ldr	r3, [pc, #576]	; (33464 <http_client_send_request+0x2cc>)
   33222:	4798      	blx	r3
   33224:	0003      	movs	r3, r0
   33226:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33228:	e00d      	b.n	33246 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   3322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3322c:	1c5a      	adds	r2, r3, #1
   3322e:	62fa      	str	r2, [r7, #44]	; 0x2c
   33230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   33232:	68b9      	ldr	r1, [r7, #8]
   33234:	188a      	adds	r2, r1, r2
   33236:	7811      	ldrb	r1, [r2, #0]
   33238:	68fa      	ldr	r2, [r7, #12]
   3323a:	18d3      	adds	r3, r2, r3
   3323c:	1c0a      	adds	r2, r1, #0
   3323e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33242:	3301      	adds	r3, #1
   33244:	633b      	str	r3, [r7, #48]	; 0x30
   33246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33248:	68ba      	ldr	r2, [r7, #8]
   3324a:	18d3      	adds	r3, r2, r3
   3324c:	781b      	ldrb	r3, [r3, #0]
   3324e:	2b00      	cmp	r3, #0
   33250:	d005      	beq.n	3325e <http_client_send_request+0xc6>
   33252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33254:	68ba      	ldr	r2, [r7, #8]
   33256:	18d3      	adds	r3, r2, r3
   33258:	781b      	ldrb	r3, [r3, #0]
   3325a:	2b2f      	cmp	r3, #47	; 0x2f
   3325c:	d1e5      	bne.n	3322a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   3325e:	68fa      	ldr	r2, [r7, #12]
   33260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   33262:	18d3      	adds	r3, r2, r3
   33264:	3301      	adds	r3, #1
   33266:	2200      	movs	r2, #0
   33268:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   3326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3326c:	68ba      	ldr	r2, [r7, #8]
   3326e:	18d3      	adds	r3, r2, r3
   33270:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   33272:	68fb      	ldr	r3, [r7, #12]
   33274:	3301      	adds	r3, #1
   33276:	781b      	ldrb	r3, [r3, #0]
   33278:	2b00      	cmp	r3, #0
   3327a:	d102      	bne.n	33282 <http_client_send_request+0xea>
		return -EINVAL;
   3327c:	2316      	movs	r3, #22
   3327e:	425b      	negs	r3, r3
   33280:	e0ea      	b.n	33458 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   33282:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33284:	0018      	movs	r0, r3
   33286:	4b79      	ldr	r3, [pc, #484]	; (3346c <http_client_send_request+0x2d4>)
   33288:	4798      	blx	r3
   3328a:	0003      	movs	r3, r0
   3328c:	2b3f      	cmp	r3, #63	; 0x3f
   3328e:	d902      	bls.n	33296 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   33290:	235b      	movs	r3, #91	; 0x5b
   33292:	425b      	negs	r3, r3
   33294:	e0e0      	b.n	33458 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   33296:	68fb      	ldr	r3, [r7, #12]
   33298:	22d4      	movs	r2, #212	; 0xd4
   3329a:	589b      	ldr	r3, [r3, r2]
   3329c:	2b00      	cmp	r3, #0
   3329e:	d005      	beq.n	332ac <http_client_send_request+0x114>
		free(module->req.ext_header);
   332a0:	68fb      	ldr	r3, [r7, #12]
   332a2:	22d4      	movs	r2, #212	; 0xd4
   332a4:	589b      	ldr	r3, [r3, r2]
   332a6:	0018      	movs	r0, r3
   332a8:	4b71      	ldr	r3, [pc, #452]	; (33470 <http_client_send_request+0x2d8>)
   332aa:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   332ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   332ae:	2b00      	cmp	r3, #0
   332b0:	d010      	beq.n	332d4 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   332b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   332b4:	0018      	movs	r0, r3
   332b6:	4b6f      	ldr	r3, [pc, #444]	; (33474 <http_client_send_request+0x2dc>)
   332b8:	4798      	blx	r3
   332ba:	0003      	movs	r3, r0
   332bc:	0019      	movs	r1, r3
   332be:	68fb      	ldr	r3, [r7, #12]
   332c0:	22d4      	movs	r2, #212	; 0xd4
   332c2:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   332c4:	68fb      	ldr	r3, [r7, #12]
   332c6:	22d4      	movs	r2, #212	; 0xd4
   332c8:	589b      	ldr	r3, [r3, r2]
   332ca:	2b00      	cmp	r3, #0
   332cc:	d106      	bne.n	332dc <http_client_send_request+0x144>
			return -ENOMEM;
   332ce:	230c      	movs	r3, #12
   332d0:	425b      	negs	r3, r3
   332d2:	e0c1      	b.n	33458 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   332d4:	68fb      	ldr	r3, [r7, #12]
   332d6:	22d4      	movs	r2, #212	; 0xd4
   332d8:	2100      	movs	r1, #0
   332da:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   332dc:	68fb      	ldr	r3, [r7, #12]
   332de:	2241      	movs	r2, #65	; 0x41
   332e0:	5c99      	ldrb	r1, [r3, r2]
   332e2:	2001      	movs	r0, #1
   332e4:	4381      	bics	r1, r0
   332e6:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   332e8:	68fb      	ldr	r3, [r7, #12]
   332ea:	2200      	movs	r2, #0
   332ec:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   332ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   332f0:	781b      	ldrb	r3, [r3, #0]
   332f2:	2b2f      	cmp	r3, #47	; 0x2f
   332f4:	d107      	bne.n	33306 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   332f6:	68fb      	ldr	r3, [r7, #12]
   332f8:	3370      	adds	r3, #112	; 0x70
   332fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   332fc:	0011      	movs	r1, r2
   332fe:	0018      	movs	r0, r3
   33300:	4b5d      	ldr	r3, [pc, #372]	; (33478 <http_client_send_request+0x2e0>)
   33302:	4798      	blx	r3
   33304:	e00f      	b.n	33326 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   33306:	68fb      	ldr	r3, [r7, #12]
   33308:	2270      	movs	r2, #112	; 0x70
   3330a:	212f      	movs	r1, #47	; 0x2f
   3330c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   3330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33310:	781b      	ldrb	r3, [r3, #0]
   33312:	2b00      	cmp	r3, #0
   33314:	d007      	beq.n	33326 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   33316:	68fb      	ldr	r3, [r7, #12]
   33318:	3370      	adds	r3, #112	; 0x70
   3331a:	3301      	adds	r3, #1
   3331c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3331e:	0011      	movs	r1, r2
   33320:	0018      	movs	r0, r3
   33322:	4b55      	ldr	r3, [pc, #340]	; (33478 <http_client_send_request+0x2e0>)
   33324:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   33326:	683b      	ldr	r3, [r7, #0]
   33328:	2b00      	cmp	r3, #0
   3332a:	d007      	beq.n	3333c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   3332c:	68fb      	ldr	r3, [r7, #12]
   3332e:	33b0      	adds	r3, #176	; 0xb0
   33330:	6839      	ldr	r1, [r7, #0]
   33332:	2218      	movs	r2, #24
   33334:	0018      	movs	r0, r3
   33336:	4b51      	ldr	r3, [pc, #324]	; (3347c <http_client_send_request+0x2e4>)
   33338:	4798      	blx	r3
   3333a:	e006      	b.n	3334a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   3333c:	68fb      	ldr	r3, [r7, #12]
   3333e:	33b0      	adds	r3, #176	; 0xb0
   33340:	2218      	movs	r2, #24
   33342:	2100      	movs	r1, #0
   33344:	0018      	movs	r0, r3
   33346:	4b4e      	ldr	r3, [pc, #312]	; (33480 <http_client_send_request+0x2e8>)
   33348:	4798      	blx	r3
	}

	module->req.method = method;
   3334a:	68fb      	ldr	r3, [r7, #12]
   3334c:	1dfa      	adds	r2, r7, #7
   3334e:	21c8      	movs	r1, #200	; 0xc8
   33350:	7812      	ldrb	r2, [r2, #0]
   33352:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   33354:	68fb      	ldr	r3, [r7, #12]
   33356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33358:	2b01      	cmp	r3, #1
   3335a:	d003      	beq.n	33364 <http_client_send_request+0x1cc>
   3335c:	d316      	bcc.n	3338c <http_client_send_request+0x1f4>
   3335e:	2b02      	cmp	r3, #2
   33360:	d004      	beq.n	3336c <http_client_send_request+0x1d4>
   33362:	e074      	b.n	3344e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   33364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33366:	2b00      	cmp	r3, #0
   33368:	d100      	bne.n	3336c <http_client_send_request+0x1d4>
   3336a:	e073      	b.n	33454 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   3336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3336e:	2b00      	cmp	r3, #0
   33370:	d107      	bne.n	33382 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   33372:	68fb      	ldr	r3, [r7, #12]
   33374:	2203      	movs	r2, #3
   33376:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   33378:	68fb      	ldr	r3, [r7, #12]
   3337a:	0018      	movs	r0, r3
   3337c:	4b41      	ldr	r3, [pc, #260]	; (33484 <http_client_send_request+0x2ec>)
   3337e:	4798      	blx	r3
			break;
   33380:	e069      	b.n	33456 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   33382:	68fb      	ldr	r3, [r7, #12]
   33384:	2100      	movs	r1, #0
   33386:	0018      	movs	r0, r3
   33388:	4b3f      	ldr	r3, [pc, #252]	; (33488 <http_client_send_request+0x2f0>)
   3338a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   3338c:	68fb      	ldr	r3, [r7, #12]
   3338e:	2252      	movs	r2, #82	; 0x52
   33390:	5c9b      	ldrb	r3, [r3, r2]
   33392:	2b00      	cmp	r3, #0
   33394:	d007      	beq.n	333a6 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   33396:	2337      	movs	r3, #55	; 0x37
   33398:	18fb      	adds	r3, r7, r3
   3339a:	2237      	movs	r2, #55	; 0x37
   3339c:	18ba      	adds	r2, r7, r2
   3339e:	7812      	ldrb	r2, [r2, #0]
   333a0:	2101      	movs	r1, #1
   333a2:	430a      	orrs	r2, r1
   333a4:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   333a6:	2337      	movs	r3, #55	; 0x37
   333a8:	18fb      	adds	r3, r7, r3
   333aa:	781b      	ldrb	r3, [r3, #0]
   333ac:	001a      	movs	r2, r3
   333ae:	2101      	movs	r1, #1
   333b0:	2002      	movs	r0, #2
   333b2:	4b36      	ldr	r3, [pc, #216]	; (3348c <http_client_send_request+0x2f4>)
   333b4:	4798      	blx	r3
   333b6:	0003      	movs	r3, r0
   333b8:	001a      	movs	r2, r3
   333ba:	68fb      	ldr	r3, [r7, #12]
   333bc:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   333be:	68fb      	ldr	r3, [r7, #12]
   333c0:	781b      	ldrb	r3, [r3, #0]
   333c2:	b25b      	sxtb	r3, r3
   333c4:	2b00      	cmp	r3, #0
   333c6:	db3f      	blt.n	33448 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   333c8:	68fb      	ldr	r3, [r7, #12]
   333ca:	781b      	ldrb	r3, [r3, #0]
   333cc:	b25b      	sxtb	r3, r3
   333ce:	001a      	movs	r2, r3
   333d0:	4b2f      	ldr	r3, [pc, #188]	; (33490 <http_client_send_request+0x2f8>)
   333d2:	0092      	lsls	r2, r2, #2
   333d4:	68f9      	ldr	r1, [r7, #12]
   333d6:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   333d8:	68fb      	ldr	r3, [r7, #12]
   333da:	3301      	adds	r3, #1
   333dc:	0018      	movs	r0, r3
   333de:	4b2d      	ldr	r3, [pc, #180]	; (33494 <http_client_send_request+0x2fc>)
   333e0:	4798      	blx	r3
   333e2:	1e03      	subs	r3, r0, #0
   333e4:	d027      	beq.n	33436 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   333e6:	2314      	movs	r3, #20
   333e8:	18fb      	adds	r3, r7, r3
   333ea:	2202      	movs	r2, #2
   333ec:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   333ee:	68fb      	ldr	r3, [r7, #12]
   333f0:	2250      	movs	r2, #80	; 0x50
   333f2:	5a9b      	ldrh	r3, [r3, r2]
   333f4:	021b      	lsls	r3, r3, #8
   333f6:	b21a      	sxth	r2, r3
   333f8:	68fb      	ldr	r3, [r7, #12]
   333fa:	2150      	movs	r1, #80	; 0x50
   333fc:	5a5b      	ldrh	r3, [r3, r1]
   333fe:	0a1b      	lsrs	r3, r3, #8
   33400:	b29b      	uxth	r3, r3
   33402:	b21b      	sxth	r3, r3
   33404:	4313      	orrs	r3, r2
   33406:	b21b      	sxth	r3, r3
   33408:	b29a      	uxth	r2, r3
   3340a:	2314      	movs	r3, #20
   3340c:	18fb      	adds	r3, r7, r3
   3340e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   33410:	68fb      	ldr	r3, [r7, #12]
   33412:	3301      	adds	r3, #1
   33414:	0018      	movs	r0, r3
   33416:	4b20      	ldr	r3, [pc, #128]	; (33498 <http_client_send_request+0x300>)
   33418:	4798      	blx	r3
   3341a:	0002      	movs	r2, r0
   3341c:	2314      	movs	r3, #20
   3341e:	18fb      	adds	r3, r7, r3
   33420:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   33422:	68fb      	ldr	r3, [r7, #12]
   33424:	781b      	ldrb	r3, [r3, #0]
   33426:	b25b      	sxtb	r3, r3
   33428:	2214      	movs	r2, #20
   3342a:	18b9      	adds	r1, r7, r2
   3342c:	2210      	movs	r2, #16
   3342e:	0018      	movs	r0, r3
   33430:	4b1a      	ldr	r3, [pc, #104]	; (3349c <http_client_send_request+0x304>)
   33432:	4798      	blx	r3
   33434:	e004      	b.n	33440 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   33436:	68fb      	ldr	r3, [r7, #12]
   33438:	3301      	adds	r3, #1
   3343a:	0018      	movs	r0, r3
   3343c:	4b18      	ldr	r3, [pc, #96]	; (334a0 <http_client_send_request+0x308>)
   3343e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   33440:	68fb      	ldr	r3, [r7, #12]
   33442:	2201      	movs	r2, #1
   33444:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   33446:	e006      	b.n	33456 <http_client_send_request+0x2be>
			return -ENOSPC;
   33448:	231c      	movs	r3, #28
   3344a:	425b      	negs	r3, r3
   3344c:	e004      	b.n	33458 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   3344e:	230b      	movs	r3, #11
   33450:	425b      	negs	r3, r3
   33452:	e001      	b.n	33458 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   33454:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   33456:	2300      	movs	r3, #0
}
   33458:	0018      	movs	r0, r3
   3345a:	46bd      	mov	sp, r7
   3345c:	b00e      	add	sp, #56	; 0x38
   3345e:	bdb0      	pop	{r4, r5, r7, pc}
   33460:	0003cd10 	.word	0x0003cd10
   33464:	00037be5 	.word	0x00037be5
   33468:	0003cd18 	.word	0x0003cd18
   3346c:	00037bd7 	.word	0x00037bd7
   33470:	000377d5 	.word	0x000377d5
   33474:	00037b9d 	.word	0x00037b9d
   33478:	00037b8b 	.word	0x00037b8b
   3347c:	000377e9 	.word	0x000377e9
   33480:	0003781f 	.word	0x0003781f
   33484:	000335f9 	.word	0x000335f9
   33488:	000334a5 	.word	0x000334a5
   3348c:	00027759 	.word	0x00027759
   33490:	20004554 	.word	0x20004554
   33494:	00033101 	.word	0x00033101
   33498:	00027ea5 	.word	0x00027ea5
   3349c:	0002796d 	.word	0x0002796d
   334a0:	00027fad 	.word	0x00027fad

000334a4 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   334a4:	b580      	push	{r7, lr}
   334a6:	b086      	sub	sp, #24
   334a8:	af00      	add	r7, sp, #0
   334aa:	6078      	str	r0, [r7, #4]
   334ac:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   334ae:	687b      	ldr	r3, [r7, #4]
   334b0:	22c0      	movs	r2, #192	; 0xc0
   334b2:	589b      	ldr	r3, [r3, r2]
   334b4:	2b00      	cmp	r3, #0
   334b6:	d007      	beq.n	334c8 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   334b8:	687b      	ldr	r3, [r7, #4]
   334ba:	22c0      	movs	r2, #192	; 0xc0
   334bc:	589b      	ldr	r3, [r3, r2]
   334be:	687a      	ldr	r2, [r7, #4]
   334c0:	21c4      	movs	r1, #196	; 0xc4
   334c2:	5852      	ldr	r2, [r2, r1]
   334c4:	0010      	movs	r0, r2
   334c6:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   334c8:	687b      	ldr	r3, [r7, #4]
   334ca:	33b0      	adds	r3, #176	; 0xb0
   334cc:	2218      	movs	r2, #24
   334ce:	2100      	movs	r1, #0
   334d0:	0018      	movs	r0, r3
   334d2:	4b24      	ldr	r3, [pc, #144]	; (33564 <_http_client_clear_conn+0xc0>)
   334d4:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   334d6:	687b      	ldr	r3, [r7, #4]
   334d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   334da:	2b00      	cmp	r3, #0
   334dc:	d005      	beq.n	334ea <_http_client_clear_conn+0x46>
		close(module->sock);
   334de:	687b      	ldr	r3, [r7, #4]
   334e0:	781b      	ldrb	r3, [r3, #0]
   334e2:	b25b      	sxtb	r3, r3
   334e4:	0018      	movs	r0, r3
   334e6:	4b20      	ldr	r3, [pc, #128]	; (33568 <_http_client_clear_conn+0xc4>)
   334e8:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   334ea:	687b      	ldr	r3, [r7, #4]
   334ec:	781b      	ldrb	r3, [r3, #0]
   334ee:	b25b      	sxtb	r3, r3
   334f0:	001a      	movs	r2, r3
   334f2:	4b1e      	ldr	r3, [pc, #120]	; (3356c <_http_client_clear_conn+0xc8>)
   334f4:	0092      	lsls	r2, r2, #2
   334f6:	2100      	movs	r1, #0
   334f8:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   334fa:	687b      	ldr	r3, [r7, #4]
   334fc:	336c      	adds	r3, #108	; 0x6c
   334fe:	226c      	movs	r2, #108	; 0x6c
   33500:	2100      	movs	r1, #0
   33502:	0018      	movs	r0, r3
   33504:	4b17      	ldr	r3, [pc, #92]	; (33564 <_http_client_clear_conn+0xc0>)
   33506:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   33508:	687b      	ldr	r3, [r7, #4]
   3350a:	33d8      	adds	r3, #216	; 0xd8
   3350c:	2210      	movs	r2, #16
   3350e:	2100      	movs	r1, #0
   33510:	0018      	movs	r0, r3
   33512:	4b14      	ldr	r3, [pc, #80]	; (33564 <_http_client_clear_conn+0xc0>)
   33514:	4798      	blx	r3
	module->req.state = STATE_INIT;
   33516:	687b      	ldr	r3, [r7, #4]
   33518:	2200      	movs	r2, #0
   3351a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3351c:	687b      	ldr	r3, [r7, #4]
   3351e:	22d8      	movs	r2, #216	; 0xd8
   33520:	2100      	movs	r1, #0
   33522:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   33524:	687b      	ldr	r3, [r7, #4]
   33526:	2241      	movs	r2, #65	; 0x41
   33528:	5c99      	ldrb	r1, [r3, r2]
   3352a:	2001      	movs	r0, #1
   3352c:	4381      	bics	r1, r0
   3352e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   33530:	687b      	ldr	r3, [r7, #4]
   33532:	2241      	movs	r2, #65	; 0x41
   33534:	5c99      	ldrb	r1, [r3, r2]
   33536:	2002      	movs	r0, #2
   33538:	4381      	bics	r1, r0
   3353a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   3353c:	230c      	movs	r3, #12
   3353e:	18fb      	adds	r3, r7, r3
   33540:	683a      	ldr	r2, [r7, #0]
   33542:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   33544:	687b      	ldr	r3, [r7, #4]
   33546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33548:	2b00      	cmp	r3, #0
   3354a:	d006      	beq.n	3355a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   3354c:	687b      	ldr	r3, [r7, #4]
   3354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33550:	220c      	movs	r2, #12
   33552:	18ba      	adds	r2, r7, r2
   33554:	6878      	ldr	r0, [r7, #4]
   33556:	2104      	movs	r1, #4
   33558:	4798      	blx	r3
	}
}
   3355a:	46c0      	nop			; (mov r8, r8)
   3355c:	46bd      	mov	sp, r7
   3355e:	b006      	add	sp, #24
   33560:	bd80      	pop	{r7, pc}
   33562:	46c0      	nop			; (mov r8, r8)
   33564:	0003781f 	.word	0x0003781f
   33568:	00027d65 	.word	0x00027d65
   3356c:	20004554 	.word	0x20004554

00033570 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   33570:	b590      	push	{r4, r7, lr}
   33572:	b087      	sub	sp, #28
   33574:	af00      	add	r7, sp, #0
   33576:	60f8      	str	r0, [r7, #12]
   33578:	60b9      	str	r1, [r7, #8]
   3357a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   3357c:	68fb      	ldr	r3, [r7, #12]
   3357e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   33580:	697b      	ldr	r3, [r7, #20]
   33582:	2241      	movs	r2, #65	; 0x41
   33584:	5c99      	ldrb	r1, [r3, r2]
   33586:	2001      	movs	r0, #1
   33588:	4301      	orrs	r1, r0
   3358a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   3358c:	697b      	ldr	r3, [r7, #20]
   3358e:	2000      	movs	r0, #0
   33590:	5618      	ldrsb	r0, [r3, r0]
   33592:	687b      	ldr	r3, [r7, #4]
   33594:	b29a      	uxth	r2, r3
   33596:	68b9      	ldr	r1, [r7, #8]
   33598:	2300      	movs	r3, #0
   3359a:	4c14      	ldr	r4, [pc, #80]	; (335ec <_http_client_send_wait+0x7c>)
   3359c:	47a0      	blx	r4
   3359e:	0003      	movs	r3, r0
   335a0:	613b      	str	r3, [r7, #16]
   335a2:	693b      	ldr	r3, [r7, #16]
   335a4:	2b00      	cmp	r3, #0
   335a6:	da0f      	bge.n	335c8 <_http_client_send_wait+0x58>
		module->sending = 0;
   335a8:	697b      	ldr	r3, [r7, #20]
   335aa:	2241      	movs	r2, #65	; 0x41
   335ac:	5c99      	ldrb	r1, [r3, r2]
   335ae:	2001      	movs	r0, #1
   335b0:	4381      	bics	r1, r0
   335b2:	5499      	strb	r1, [r3, r2]
		return result;
   335b4:	693b      	ldr	r3, [r7, #16]
   335b6:	e014      	b.n	335e2 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   335b8:	2000      	movs	r0, #0
   335ba:	4b0d      	ldr	r3, [pc, #52]	; (335f0 <_http_client_send_wait+0x80>)
   335bc:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   335be:	697b      	ldr	r3, [r7, #20]
   335c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   335c2:	0018      	movs	r0, r3
   335c4:	4b0b      	ldr	r3, [pc, #44]	; (335f4 <_http_client_send_wait+0x84>)
   335c6:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   335c8:	697b      	ldr	r3, [r7, #20]
   335ca:	2241      	movs	r2, #65	; 0x41
   335cc:	5c9b      	ldrb	r3, [r3, r2]
   335ce:	2201      	movs	r2, #1
   335d0:	4013      	ands	r3, r2
   335d2:	b2db      	uxtb	r3, r3
   335d4:	2b00      	cmp	r3, #0
   335d6:	d003      	beq.n	335e0 <_http_client_send_wait+0x70>
   335d8:	697b      	ldr	r3, [r7, #20]
   335da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   335dc:	2b02      	cmp	r3, #2
   335de:	d8eb      	bhi.n	335b8 <_http_client_send_wait+0x48>
	}

	return 0;
   335e0:	2300      	movs	r3, #0
}
   335e2:	0018      	movs	r0, r3
   335e4:	46bd      	mov	sp, r7
   335e6:	b007      	add	sp, #28
   335e8:	bd90      	pop	{r4, r7, pc}
   335ea:	46c0      	nop			; (mov r8, r8)
   335ec:	00027a81 	.word	0x00027a81
   335f0:	0002412d 	.word	0x0002412d
   335f4:	0003487d 	.word	0x0003487d

000335f8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   335f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   335fa:	46c6      	mov	lr, r8
   335fc:	b500      	push	{lr}
   335fe:	b0a0      	sub	sp, #128	; 0x80
   33600:	af02      	add	r7, sp, #8
   33602:	61f8      	str	r0, [r7, #28]
   33604:	4668      	mov	r0, sp
   33606:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   33608:	2318      	movs	r3, #24
   3360a:	2218      	movs	r2, #24
   3360c:	18ba      	adds	r2, r7, r2
   3360e:	18d0      	adds	r0, r2, r3
   33610:	4bbd      	ldr	r3, [pc, #756]	; (33908 <_http_client_request+0x310>)
   33612:	469c      	mov	ip, r3
   33614:	4663      	mov	r3, ip
   33616:	cb16      	ldmia	r3!, {r1, r2, r4}
   33618:	c016      	stmia	r0!, {r1, r2, r4}
   3361a:	469c      	mov	ip, r3
   3361c:	4663      	mov	r3, ip
   3361e:	681b      	ldr	r3, [r3, #0]
   33620:	469c      	mov	ip, r3
   33622:	4663      	mov	r3, ip
   33624:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   33626:	69f8      	ldr	r0, [r7, #28]
   33628:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3362a:	4684      	mov	ip, r0
   3362c:	2301      	movs	r3, #1
   3362e:	425b      	negs	r3, r3
   33630:	4698      	mov	r8, r3
   33632:	44c4      	add	ip, r8
   33634:	4663      	mov	r3, ip
   33636:	66fb      	str	r3, [r7, #108]	; 0x6c
   33638:	6038      	str	r0, [r7, #0]
   3363a:	2300      	movs	r3, #0
   3363c:	607b      	str	r3, [r7, #4]
   3363e:	6839      	ldr	r1, [r7, #0]
   33640:	687a      	ldr	r2, [r7, #4]
   33642:	000b      	movs	r3, r1
   33644:	0f5b      	lsrs	r3, r3, #29
   33646:	469c      	mov	ip, r3
   33648:	0013      	movs	r3, r2
   3364a:	00db      	lsls	r3, r3, #3
   3364c:	617b      	str	r3, [r7, #20]
   3364e:	4663      	mov	r3, ip
   33650:	697c      	ldr	r4, [r7, #20]
   33652:	431c      	orrs	r4, r3
   33654:	617c      	str	r4, [r7, #20]
   33656:	000b      	movs	r3, r1
   33658:	00db      	lsls	r3, r3, #3
   3365a:	613b      	str	r3, [r7, #16]
   3365c:	0005      	movs	r5, r0
   3365e:	2200      	movs	r2, #0
   33660:	0016      	movs	r6, r2
   33662:	0f6a      	lsrs	r2, r5, #29
   33664:	00f3      	lsls	r3, r6, #3
   33666:	60fb      	str	r3, [r7, #12]
   33668:	68fb      	ldr	r3, [r7, #12]
   3366a:	4313      	orrs	r3, r2
   3366c:	60fb      	str	r3, [r7, #12]
   3366e:	00eb      	lsls	r3, r5, #3
   33670:	60bb      	str	r3, [r7, #8]
   33672:	1dc3      	adds	r3, r0, #7
   33674:	08db      	lsrs	r3, r3, #3
   33676:	00db      	lsls	r3, r3, #3
   33678:	466a      	mov	r2, sp
   3367a:	1ad3      	subs	r3, r2, r3
   3367c:	469d      	mov	sp, r3
   3367e:	ab02      	add	r3, sp, #8
   33680:	3300      	adds	r3, #0
   33682:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   33684:	69fb      	ldr	r3, [r7, #28]
   33686:	2b00      	cmp	r3, #0
   33688:	d100      	bne.n	3368c <_http_client_request+0x94>
   3368a:	e346      	b.n	33d1a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   3368c:	69fb      	ldr	r3, [r7, #28]
   3368e:	2241      	movs	r2, #65	; 0x41
   33690:	5c9b      	ldrb	r3, [r3, r2]
   33692:	2201      	movs	r2, #1
   33694:	4013      	ands	r3, r2
   33696:	b2db      	uxtb	r3, r3
   33698:	2b00      	cmp	r3, #0
   3369a:	d000      	beq.n	3369e <_http_client_request+0xa6>
   3369c:	e33f      	b.n	33d1e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   3369e:	69fb      	ldr	r3, [r7, #28]
   336a0:	33b0      	adds	r3, #176	; 0xb0
   336a2:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   336a4:	69fb      	ldr	r3, [r7, #28]
   336a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   336a8:	2b03      	cmp	r3, #3
   336aa:	d003      	beq.n	336b4 <_http_client_request+0xbc>
   336ac:	2b04      	cmp	r3, #4
   336ae:	d100      	bne.n	336b2 <_http_client_request+0xba>
   336b0:	e1b3      	b.n	33a1a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   336b2:	e32f      	b.n	33d14 <_http_client_request+0x71c>
		module->req.content_length = 0;
   336b4:	69fb      	ldr	r3, [r7, #28]
   336b6:	22cc      	movs	r2, #204	; 0xcc
   336b8:	2100      	movs	r1, #0
   336ba:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   336bc:	69fb      	ldr	r3, [r7, #28]
   336be:	22d0      	movs	r2, #208	; 0xd0
   336c0:	2100      	movs	r1, #0
   336c2:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   336c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   336c6:	69fb      	ldr	r3, [r7, #28]
   336c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   336ca:	4c90      	ldr	r4, [pc, #576]	; (3390c <_http_client_request+0x314>)
   336cc:	2334      	movs	r3, #52	; 0x34
   336ce:	2018      	movs	r0, #24
   336d0:	1838      	adds	r0, r7, r0
   336d2:	18c0      	adds	r0, r0, r3
   336d4:	69fb      	ldr	r3, [r7, #28]
   336d6:	9300      	str	r3, [sp, #0]
   336d8:	0023      	movs	r3, r4
   336da:	4c8d      	ldr	r4, [pc, #564]	; (33910 <_http_client_request+0x318>)
   336dc:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   336de:	69fb      	ldr	r3, [r7, #28]
   336e0:	22c8      	movs	r2, #200	; 0xc8
   336e2:	5c9b      	ldrb	r3, [r3, r2]
   336e4:	2b01      	cmp	r3, #1
   336e6:	d10a      	bne.n	336fe <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   336e8:	498a      	ldr	r1, [pc, #552]	; (33914 <_http_client_request+0x31c>)
   336ea:	2334      	movs	r3, #52	; 0x34
   336ec:	2218      	movs	r2, #24
   336ee:	4694      	mov	ip, r2
   336f0:	44bc      	add	ip, r7
   336f2:	4463      	add	r3, ip
   336f4:	2204      	movs	r2, #4
   336f6:	0018      	movs	r0, r3
   336f8:	4b87      	ldr	r3, [pc, #540]	; (33918 <_http_client_request+0x320>)
   336fa:	4798      	blx	r3
   336fc:	e04e      	b.n	3379c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   336fe:	69fb      	ldr	r3, [r7, #28]
   33700:	22c8      	movs	r2, #200	; 0xc8
   33702:	5c9b      	ldrb	r3, [r3, r2]
   33704:	2b02      	cmp	r3, #2
   33706:	d10a      	bne.n	3371e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   33708:	4984      	ldr	r1, [pc, #528]	; (3391c <_http_client_request+0x324>)
   3370a:	2334      	movs	r3, #52	; 0x34
   3370c:	2218      	movs	r2, #24
   3370e:	4694      	mov	ip, r2
   33710:	44bc      	add	ip, r7
   33712:	4463      	add	r3, ip
   33714:	2205      	movs	r2, #5
   33716:	0018      	movs	r0, r3
   33718:	4b7f      	ldr	r3, [pc, #508]	; (33918 <_http_client_request+0x320>)
   3371a:	4798      	blx	r3
   3371c:	e03e      	b.n	3379c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   3371e:	69fb      	ldr	r3, [r7, #28]
   33720:	22c8      	movs	r2, #200	; 0xc8
   33722:	5c9b      	ldrb	r3, [r3, r2]
   33724:	2b03      	cmp	r3, #3
   33726:	d10a      	bne.n	3373e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   33728:	497d      	ldr	r1, [pc, #500]	; (33920 <_http_client_request+0x328>)
   3372a:	2334      	movs	r3, #52	; 0x34
   3372c:	2218      	movs	r2, #24
   3372e:	4694      	mov	ip, r2
   33730:	44bc      	add	ip, r7
   33732:	4463      	add	r3, ip
   33734:	2207      	movs	r2, #7
   33736:	0018      	movs	r0, r3
   33738:	4b77      	ldr	r3, [pc, #476]	; (33918 <_http_client_request+0x320>)
   3373a:	4798      	blx	r3
   3373c:	e02e      	b.n	3379c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3373e:	69fb      	ldr	r3, [r7, #28]
   33740:	22c8      	movs	r2, #200	; 0xc8
   33742:	5c9b      	ldrb	r3, [r3, r2]
   33744:	2b04      	cmp	r3, #4
   33746:	d10a      	bne.n	3375e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   33748:	4976      	ldr	r1, [pc, #472]	; (33924 <_http_client_request+0x32c>)
   3374a:	2334      	movs	r3, #52	; 0x34
   3374c:	2218      	movs	r2, #24
   3374e:	4694      	mov	ip, r2
   33750:	44bc      	add	ip, r7
   33752:	4463      	add	r3, ip
   33754:	2204      	movs	r2, #4
   33756:	0018      	movs	r0, r3
   33758:	4b6f      	ldr	r3, [pc, #444]	; (33918 <_http_client_request+0x320>)
   3375a:	4798      	blx	r3
   3375c:	e01e      	b.n	3379c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3375e:	69fb      	ldr	r3, [r7, #28]
   33760:	22c8      	movs	r2, #200	; 0xc8
   33762:	5c9b      	ldrb	r3, [r3, r2]
   33764:	2b05      	cmp	r3, #5
   33766:	d10a      	bne.n	3377e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   33768:	496f      	ldr	r1, [pc, #444]	; (33928 <_http_client_request+0x330>)
   3376a:	2334      	movs	r3, #52	; 0x34
   3376c:	2218      	movs	r2, #24
   3376e:	4694      	mov	ip, r2
   33770:	44bc      	add	ip, r7
   33772:	4463      	add	r3, ip
   33774:	2208      	movs	r2, #8
   33776:	0018      	movs	r0, r3
   33778:	4b67      	ldr	r3, [pc, #412]	; (33918 <_http_client_request+0x320>)
   3377a:	4798      	blx	r3
   3377c:	e00e      	b.n	3379c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   3377e:	69fb      	ldr	r3, [r7, #28]
   33780:	22c8      	movs	r2, #200	; 0xc8
   33782:	5c9b      	ldrb	r3, [r3, r2]
   33784:	2b06      	cmp	r3, #6
   33786:	d109      	bne.n	3379c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   33788:	4968      	ldr	r1, [pc, #416]	; (3392c <_http_client_request+0x334>)
   3378a:	2334      	movs	r3, #52	; 0x34
   3378c:	2218      	movs	r2, #24
   3378e:	4694      	mov	ip, r2
   33790:	44bc      	add	ip, r7
   33792:	4463      	add	r3, ip
   33794:	2205      	movs	r2, #5
   33796:	0018      	movs	r0, r3
   33798:	4b5f      	ldr	r3, [pc, #380]	; (33918 <_http_client_request+0x320>)
   3379a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   3379c:	69fb      	ldr	r3, [r7, #28]
   3379e:	3370      	adds	r3, #112	; 0x70
   337a0:	001c      	movs	r4, r3
   337a2:	69fb      	ldr	r3, [r7, #28]
   337a4:	3370      	adds	r3, #112	; 0x70
   337a6:	0018      	movs	r0, r3
   337a8:	4b61      	ldr	r3, [pc, #388]	; (33930 <_http_client_request+0x338>)
   337aa:	4798      	blx	r3
   337ac:	0002      	movs	r2, r0
   337ae:	2334      	movs	r3, #52	; 0x34
   337b0:	2118      	movs	r1, #24
   337b2:	468c      	mov	ip, r1
   337b4:	44bc      	add	ip, r7
   337b6:	4463      	add	r3, ip
   337b8:	0021      	movs	r1, r4
   337ba:	0018      	movs	r0, r3
   337bc:	4b56      	ldr	r3, [pc, #344]	; (33918 <_http_client_request+0x320>)
   337be:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   337c0:	495c      	ldr	r1, [pc, #368]	; (33934 <_http_client_request+0x33c>)
   337c2:	2334      	movs	r3, #52	; 0x34
   337c4:	2218      	movs	r2, #24
   337c6:	4694      	mov	ip, r2
   337c8:	44bc      	add	ip, r7
   337ca:	4463      	add	r3, ip
   337cc:	220b      	movs	r2, #11
   337ce:	0018      	movs	r0, r3
   337d0:	4b51      	ldr	r3, [pc, #324]	; (33918 <_http_client_request+0x320>)
   337d2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   337d4:	4958      	ldr	r1, [pc, #352]	; (33938 <_http_client_request+0x340>)
   337d6:	2334      	movs	r3, #52	; 0x34
   337d8:	2218      	movs	r2, #24
   337da:	4694      	mov	ip, r2
   337dc:	44bc      	add	ip, r7
   337de:	4463      	add	r3, ip
   337e0:	220c      	movs	r2, #12
   337e2:	0018      	movs	r0, r3
   337e4:	4b4c      	ldr	r3, [pc, #304]	; (33918 <_http_client_request+0x320>)
   337e6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   337e8:	69fb      	ldr	r3, [r7, #28]
   337ea:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   337ec:	69fb      	ldr	r3, [r7, #28]
   337ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   337f0:	0018      	movs	r0, r3
   337f2:	4b4f      	ldr	r3, [pc, #316]	; (33930 <_http_client_request+0x338>)
   337f4:	4798      	blx	r3
   337f6:	0002      	movs	r2, r0
   337f8:	2334      	movs	r3, #52	; 0x34
   337fa:	2118      	movs	r1, #24
   337fc:	468c      	mov	ip, r1
   337fe:	44bc      	add	ip, r7
   33800:	4463      	add	r3, ip
   33802:	0021      	movs	r1, r4
   33804:	0018      	movs	r0, r3
   33806:	4b44      	ldr	r3, [pc, #272]	; (33918 <_http_client_request+0x320>)
   33808:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3380a:	494c      	ldr	r1, [pc, #304]	; (3393c <_http_client_request+0x344>)
   3380c:	2334      	movs	r3, #52	; 0x34
   3380e:	2218      	movs	r2, #24
   33810:	4694      	mov	ip, r2
   33812:	44bc      	add	ip, r7
   33814:	4463      	add	r3, ip
   33816:	2202      	movs	r2, #2
   33818:	0018      	movs	r0, r3
   3381a:	4b3f      	ldr	r3, [pc, #252]	; (33918 <_http_client_request+0x320>)
   3381c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   3381e:	4948      	ldr	r1, [pc, #288]	; (33940 <_http_client_request+0x348>)
   33820:	2334      	movs	r3, #52	; 0x34
   33822:	2218      	movs	r2, #24
   33824:	4694      	mov	ip, r2
   33826:	44bc      	add	ip, r7
   33828:	4463      	add	r3, ip
   3382a:	2206      	movs	r2, #6
   3382c:	0018      	movs	r0, r3
   3382e:	4b3a      	ldr	r3, [pc, #232]	; (33918 <_http_client_request+0x320>)
   33830:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   33832:	69fb      	ldr	r3, [r7, #28]
   33834:	1c5c      	adds	r4, r3, #1
   33836:	69fb      	ldr	r3, [r7, #28]
   33838:	3301      	adds	r3, #1
   3383a:	0018      	movs	r0, r3
   3383c:	4b3c      	ldr	r3, [pc, #240]	; (33930 <_http_client_request+0x338>)
   3383e:	4798      	blx	r3
   33840:	0002      	movs	r2, r0
   33842:	2334      	movs	r3, #52	; 0x34
   33844:	2118      	movs	r1, #24
   33846:	468c      	mov	ip, r1
   33848:	44bc      	add	ip, r7
   3384a:	4463      	add	r3, ip
   3384c:	0021      	movs	r1, r4
   3384e:	0018      	movs	r0, r3
   33850:	4b31      	ldr	r3, [pc, #196]	; (33918 <_http_client_request+0x320>)
   33852:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33854:	4939      	ldr	r1, [pc, #228]	; (3393c <_http_client_request+0x344>)
   33856:	2334      	movs	r3, #52	; 0x34
   33858:	2218      	movs	r2, #24
   3385a:	4694      	mov	ip, r2
   3385c:	44bc      	add	ip, r7
   3385e:	4463      	add	r3, ip
   33860:	2202      	movs	r2, #2
   33862:	0018      	movs	r0, r3
   33864:	4b2c      	ldr	r3, [pc, #176]	; (33918 <_http_client_request+0x320>)
   33866:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   33868:	4936      	ldr	r1, [pc, #216]	; (33944 <_http_client_request+0x34c>)
   3386a:	2334      	movs	r3, #52	; 0x34
   3386c:	2218      	movs	r2, #24
   3386e:	4694      	mov	ip, r2
   33870:	44bc      	add	ip, r7
   33872:	4463      	add	r3, ip
   33874:	2218      	movs	r2, #24
   33876:	0018      	movs	r0, r3
   33878:	4b27      	ldr	r3, [pc, #156]	; (33918 <_http_client_request+0x320>)
   3387a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   3387c:	4932      	ldr	r1, [pc, #200]	; (33948 <_http_client_request+0x350>)
   3387e:	2334      	movs	r3, #52	; 0x34
   33880:	2218      	movs	r2, #24
   33882:	4694      	mov	ip, r2
   33884:	44bc      	add	ip, r7
   33886:	4463      	add	r3, ip
   33888:	2213      	movs	r2, #19
   3388a:	0018      	movs	r0, r3
   3388c:	4b22      	ldr	r3, [pc, #136]	; (33918 <_http_client_request+0x320>)
   3388e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   33890:	492e      	ldr	r1, [pc, #184]	; (3394c <_http_client_request+0x354>)
   33892:	2334      	movs	r3, #52	; 0x34
   33894:	2218      	movs	r2, #24
   33896:	4694      	mov	ip, r2
   33898:	44bc      	add	ip, r7
   3389a:	4463      	add	r3, ip
   3389c:	2217      	movs	r2, #23
   3389e:	0018      	movs	r0, r3
   338a0:	4b1d      	ldr	r3, [pc, #116]	; (33918 <_http_client_request+0x320>)
   338a2:	4798      	blx	r3
		if (entity->read != NULL) {
   338a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   338a6:	68db      	ldr	r3, [r3, #12]
   338a8:	2b00      	cmp	r3, #0
   338aa:	d100      	bne.n	338ae <_http_client_request+0x2b6>
   338ac:	e088      	b.n	339c0 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   338ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   338b0:	781b      	ldrb	r3, [r3, #0]
   338b2:	2b00      	cmp	r3, #0
   338b4:	d00f      	beq.n	338d6 <_http_client_request+0x2de>
				module->req.content_length = -1;
   338b6:	69fb      	ldr	r3, [r7, #28]
   338b8:	21cc      	movs	r1, #204	; 0xcc
   338ba:	2201      	movs	r2, #1
   338bc:	4252      	negs	r2, r2
   338be:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   338c0:	4923      	ldr	r1, [pc, #140]	; (33950 <_http_client_request+0x358>)
   338c2:	2334      	movs	r3, #52	; 0x34
   338c4:	2218      	movs	r2, #24
   338c6:	4694      	mov	ip, r2
   338c8:	44bc      	add	ip, r7
   338ca:	4463      	add	r3, ip
   338cc:	221c      	movs	r2, #28
   338ce:	0018      	movs	r0, r3
   338d0:	4b11      	ldr	r3, [pc, #68]	; (33918 <_http_client_request+0x320>)
   338d2:	4798      	blx	r3
   338d4:	e074      	b.n	339c0 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   338d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   338d8:	689b      	ldr	r3, [r3, #8]
   338da:	2b00      	cmp	r3, #0
   338dc:	d070      	beq.n	339c0 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   338de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   338e0:	689a      	ldr	r2, [r3, #8]
   338e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   338e4:	695b      	ldr	r3, [r3, #20]
   338e6:	0018      	movs	r0, r3
   338e8:	4790      	blx	r2
   338ea:	0001      	movs	r1, r0
   338ec:	69fb      	ldr	r3, [r7, #28]
   338ee:	22cc      	movs	r2, #204	; 0xcc
   338f0:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   338f2:	69fb      	ldr	r3, [r7, #28]
   338f4:	22cc      	movs	r2, #204	; 0xcc
   338f6:	589b      	ldr	r3, [r3, r2]
   338f8:	2b00      	cmp	r3, #0
   338fa:	da2b      	bge.n	33954 <_http_client_request+0x35c>
					module->req.content_length = 0;
   338fc:	69fb      	ldr	r3, [r7, #28]
   338fe:	22cc      	movs	r2, #204	; 0xcc
   33900:	2100      	movs	r1, #0
   33902:	5099      	str	r1, [r3, r2]
   33904:	e05c      	b.n	339c0 <_http_client_request+0x3c8>
   33906:	46c0      	nop			; (mov r8, r8)
   33908:	0003ce00 	.word	0x0003ce00
   3390c:	00033571 	.word	0x00033571
   33910:	000344d9 	.word	0x000344d9
   33914:	0003cd24 	.word	0x0003cd24
   33918:	00034559 	.word	0x00034559
   3391c:	0003cd2c 	.word	0x0003cd2c
   33920:	0003cd34 	.word	0x0003cd34
   33924:	0003cd3c 	.word	0x0003cd3c
   33928:	0003cd44 	.word	0x0003cd44
   3392c:	0003cd50 	.word	0x0003cd50
   33930:	00037bd7 	.word	0x00037bd7
   33934:	0003cd58 	.word	0x0003cd58
   33938:	0003cd64 	.word	0x0003cd64
   3393c:	0003cd74 	.word	0x0003cd74
   33940:	0003cd78 	.word	0x0003cd78
   33944:	0003cd80 	.word	0x0003cd80
   33948:	0003cd9c 	.word	0x0003cd9c
   3394c:	0003cdb0 	.word	0x0003cdb0
   33950:	0003cdc8 	.word	0x0003cdc8
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   33954:	69fb      	ldr	r3, [r7, #28]
   33956:	22cc      	movs	r2, #204	; 0xcc
   33958:	589b      	ldr	r3, [r3, r2]
   3395a:	001a      	movs	r2, r3
   3395c:	49e0      	ldr	r1, [pc, #896]	; (33ce0 <_http_client_request+0x6e8>)
   3395e:	2328      	movs	r3, #40	; 0x28
   33960:	2018      	movs	r0, #24
   33962:	4684      	mov	ip, r0
   33964:	44bc      	add	ip, r7
   33966:	4463      	add	r3, ip
   33968:	0018      	movs	r0, r3
   3396a:	4bde      	ldr	r3, [pc, #888]	; (33ce4 <_http_client_request+0x6ec>)
   3396c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   3396e:	49de      	ldr	r1, [pc, #888]	; (33ce8 <_http_client_request+0x6f0>)
   33970:	2334      	movs	r3, #52	; 0x34
   33972:	2218      	movs	r2, #24
   33974:	4694      	mov	ip, r2
   33976:	44bc      	add	ip, r7
   33978:	4463      	add	r3, ip
   3397a:	2210      	movs	r2, #16
   3397c:	0018      	movs	r0, r3
   3397e:	4bdb      	ldr	r3, [pc, #876]	; (33cec <_http_client_request+0x6f4>)
   33980:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   33982:	2328      	movs	r3, #40	; 0x28
   33984:	2218      	movs	r2, #24
   33986:	4694      	mov	ip, r2
   33988:	44bc      	add	ip, r7
   3398a:	4463      	add	r3, ip
   3398c:	0018      	movs	r0, r3
   3398e:	4bd8      	ldr	r3, [pc, #864]	; (33cf0 <_http_client_request+0x6f8>)
   33990:	4798      	blx	r3
   33992:	0002      	movs	r2, r0
   33994:	2328      	movs	r3, #40	; 0x28
   33996:	2118      	movs	r1, #24
   33998:	1879      	adds	r1, r7, r1
   3399a:	18c9      	adds	r1, r1, r3
   3399c:	2334      	movs	r3, #52	; 0x34
   3399e:	2018      	movs	r0, #24
   339a0:	4684      	mov	ip, r0
   339a2:	44bc      	add	ip, r7
   339a4:	4463      	add	r3, ip
   339a6:	0018      	movs	r0, r3
   339a8:	4bd0      	ldr	r3, [pc, #832]	; (33cec <_http_client_request+0x6f4>)
   339aa:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   339ac:	49d1      	ldr	r1, [pc, #836]	; (33cf4 <_http_client_request+0x6fc>)
   339ae:	2334      	movs	r3, #52	; 0x34
   339b0:	2218      	movs	r2, #24
   339b2:	4694      	mov	ip, r2
   339b4:	44bc      	add	ip, r7
   339b6:	4463      	add	r3, ip
   339b8:	2202      	movs	r2, #2
   339ba:	0018      	movs	r0, r3
   339bc:	4bcb      	ldr	r3, [pc, #812]	; (33cec <_http_client_request+0x6f4>)
   339be:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   339c0:	69fb      	ldr	r3, [r7, #28]
   339c2:	22d4      	movs	r2, #212	; 0xd4
   339c4:	589b      	ldr	r3, [r3, r2]
   339c6:	2b00      	cmp	r3, #0
   339c8:	d012      	beq.n	339f0 <_http_client_request+0x3f8>
				module->req.ext_header,
   339ca:	69fb      	ldr	r3, [r7, #28]
   339cc:	22d4      	movs	r2, #212	; 0xd4
   339ce:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   339d0:	69fb      	ldr	r3, [r7, #28]
   339d2:	22d4      	movs	r2, #212	; 0xd4
   339d4:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   339d6:	0018      	movs	r0, r3
   339d8:	4bc5      	ldr	r3, [pc, #788]	; (33cf0 <_http_client_request+0x6f8>)
   339da:	4798      	blx	r3
   339dc:	0002      	movs	r2, r0
   339de:	2334      	movs	r3, #52	; 0x34
   339e0:	2118      	movs	r1, #24
   339e2:	468c      	mov	ip, r1
   339e4:	44bc      	add	ip, r7
   339e6:	4463      	add	r3, ip
   339e8:	0021      	movs	r1, r4
   339ea:	0018      	movs	r0, r3
   339ec:	4bbf      	ldr	r3, [pc, #764]	; (33cec <_http_client_request+0x6f4>)
   339ee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   339f0:	49c0      	ldr	r1, [pc, #768]	; (33cf4 <_http_client_request+0x6fc>)
   339f2:	2334      	movs	r3, #52	; 0x34
   339f4:	2218      	movs	r2, #24
   339f6:	4694      	mov	ip, r2
   339f8:	44bc      	add	ip, r7
   339fa:	4463      	add	r3, ip
   339fc:	2202      	movs	r2, #2
   339fe:	0018      	movs	r0, r3
   33a00:	4bba      	ldr	r3, [pc, #744]	; (33cec <_http_client_request+0x6f4>)
   33a02:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   33a04:	2334      	movs	r3, #52	; 0x34
   33a06:	2218      	movs	r2, #24
   33a08:	4694      	mov	ip, r2
   33a0a:	44bc      	add	ip, r7
   33a0c:	4463      	add	r3, ip
   33a0e:	0018      	movs	r0, r3
   33a10:	4bb9      	ldr	r3, [pc, #740]	; (33cf8 <_http_client_request+0x700>)
   33a12:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   33a14:	69fb      	ldr	r3, [r7, #28]
   33a16:	2204      	movs	r2, #4
   33a18:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   33a1a:	69fb      	ldr	r3, [r7, #28]
   33a1c:	22cc      	movs	r2, #204	; 0xcc
   33a1e:	589b      	ldr	r3, [r3, r2]
   33a20:	2b00      	cmp	r3, #0
   33a22:	db00      	blt.n	33a26 <_http_client_request+0x42e>
   33a24:	e0c6      	b.n	33bb4 <_http_client_request+0x5bc>
   33a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33a28:	68db      	ldr	r3, [r3, #12]
   33a2a:	2b00      	cmp	r3, #0
   33a2c:	d100      	bne.n	33a30 <_http_client_request+0x438>
   33a2e:	e0c1      	b.n	33bb4 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33a32:	68dc      	ldr	r4, [r3, #12]
   33a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33a36:	6958      	ldr	r0, [r3, #20]
   33a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33a3a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   33a3c:	69fb      	ldr	r3, [r7, #28]
   33a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33a40:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   33a42:	69fb      	ldr	r3, [r7, #28]
   33a44:	22d0      	movs	r2, #208	; 0xd0
   33a46:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33a48:	002a      	movs	r2, r5
   33a4a:	47a0      	blx	r4
   33a4c:	0003      	movs	r3, r0
   33a4e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   33a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33a52:	2b00      	cmp	r3, #0
   33a54:	da01      	bge.n	33a5a <_http_client_request+0x462>
				size = 0;
   33a56:	2300      	movs	r3, #0
   33a58:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   33a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33a5c:	220a      	movs	r2, #10
   33a5e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   33a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33a62:	220d      	movs	r2, #13
   33a64:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   33a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33a68:	3305      	adds	r3, #5
   33a6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   33a6c:	210d      	movs	r1, #13
   33a6e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   33a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33a72:	3306      	adds	r3, #6
   33a74:	6eba      	ldr	r2, [r7, #104]	; 0x68
   33a76:	210a      	movs	r1, #10
   33a78:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   33a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33a7c:	2b00      	cmp	r3, #0
   33a7e:	db14      	blt.n	33aaa <_http_client_request+0x4b2>
				ptr = buffer + 2;
   33a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33a82:	3302      	adds	r3, #2
   33a84:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   33a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33a88:	4a9c      	ldr	r2, [pc, #624]	; (33cfc <_http_client_request+0x704>)
   33a8a:	4013      	ands	r3, r2
   33a8c:	d504      	bpl.n	33a98 <_http_client_request+0x4a0>
   33a8e:	3b01      	subs	r3, #1
   33a90:	2210      	movs	r2, #16
   33a92:	4252      	negs	r2, r2
   33a94:	4313      	orrs	r3, r2
   33a96:	3301      	adds	r3, #1
   33a98:	001a      	movs	r2, r3
   33a9a:	2318      	movs	r3, #24
   33a9c:	2118      	movs	r1, #24
   33a9e:	468c      	mov	ip, r1
   33aa0:	44bc      	add	ip, r7
   33aa2:	4463      	add	r3, ip
   33aa4:	5c9a      	ldrb	r2, [r3, r2]
   33aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33aa8:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   33aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33aac:	2b0f      	cmp	r3, #15
   33aae:	dd19      	ble.n	33ae4 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   33ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33ab2:	3301      	adds	r3, #1
   33ab4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   33ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ab8:	2b00      	cmp	r3, #0
   33aba:	da00      	bge.n	33abe <_http_client_request+0x4c6>
   33abc:	330f      	adds	r3, #15
   33abe:	111b      	asrs	r3, r3, #4
   33ac0:	001a      	movs	r2, r3
   33ac2:	4b8e      	ldr	r3, [pc, #568]	; (33cfc <_http_client_request+0x704>)
   33ac4:	4013      	ands	r3, r2
   33ac6:	d504      	bpl.n	33ad2 <_http_client_request+0x4da>
   33ac8:	3b01      	subs	r3, #1
   33aca:	2210      	movs	r2, #16
   33acc:	4252      	negs	r2, r2
   33ace:	4313      	orrs	r3, r2
   33ad0:	3301      	adds	r3, #1
   33ad2:	001a      	movs	r2, r3
   33ad4:	2318      	movs	r3, #24
   33ad6:	2118      	movs	r1, #24
   33ad8:	468c      	mov	ip, r1
   33ada:	44bc      	add	ip, r7
   33adc:	4463      	add	r3, ip
   33ade:	5c9a      	ldrb	r2, [r3, r2]
   33ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33ae2:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   33ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ae6:	2bff      	cmp	r3, #255	; 0xff
   33ae8:	dd18      	ble.n	33b1c <_http_client_request+0x524>
				ptr = buffer;
   33aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33aec:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   33aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33af0:	2b00      	cmp	r3, #0
   33af2:	da00      	bge.n	33af6 <_http_client_request+0x4fe>
   33af4:	33ff      	adds	r3, #255	; 0xff
   33af6:	121b      	asrs	r3, r3, #8
   33af8:	001a      	movs	r2, r3
   33afa:	4b80      	ldr	r3, [pc, #512]	; (33cfc <_http_client_request+0x704>)
   33afc:	4013      	ands	r3, r2
   33afe:	d504      	bpl.n	33b0a <_http_client_request+0x512>
   33b00:	3b01      	subs	r3, #1
   33b02:	2210      	movs	r2, #16
   33b04:	4252      	negs	r2, r2
   33b06:	4313      	orrs	r3, r2
   33b08:	3301      	adds	r3, #1
   33b0a:	001a      	movs	r2, r3
   33b0c:	2318      	movs	r3, #24
   33b0e:	2118      	movs	r1, #24
   33b10:	468c      	mov	ip, r1
   33b12:	44bc      	add	ip, r7
   33b14:	4463      	add	r3, ip
   33b16:	5c9a      	ldrb	r2, [r3, r2]
   33b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33b1a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   33b1c:	69fb      	ldr	r3, [r7, #28]
   33b1e:	2000      	movs	r0, #0
   33b20:	5618      	ldrsb	r0, [r3, r0]
   33b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33b24:	3303      	adds	r3, #3
   33b26:	001a      	movs	r2, r3
   33b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33b2a:	1ad3      	subs	r3, r2, r3
   33b2c:	b29a      	uxth	r2, r3
   33b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33b30:	b29b      	uxth	r3, r3
   33b32:	18d3      	adds	r3, r2, r3
   33b34:	b29b      	uxth	r3, r3
   33b36:	3304      	adds	r3, #4
   33b38:	b29a      	uxth	r2, r3
   33b3a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   33b3c:	2300      	movs	r3, #0
   33b3e:	4c70      	ldr	r4, [pc, #448]	; (33d00 <_http_client_request+0x708>)
   33b40:	47a0      	blx	r4
   33b42:	0003      	movs	r3, r0
   33b44:	663b      	str	r3, [r7, #96]	; 0x60
   33b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   33b48:	2b00      	cmp	r3, #0
   33b4a:	da07      	bge.n	33b5c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   33b4c:	2305      	movs	r3, #5
   33b4e:	425a      	negs	r2, r3
   33b50:	69fb      	ldr	r3, [r7, #28]
   33b52:	0011      	movs	r1, r2
   33b54:	0018      	movs	r0, r3
   33b56:	4b6b      	ldr	r3, [pc, #428]	; (33d04 <_http_client_request+0x70c>)
   33b58:	4798      	blx	r3
				return;
   33b5a:	e0e1      	b.n	33d20 <_http_client_request+0x728>
			module->req.sent_length += size;
   33b5c:	69fb      	ldr	r3, [r7, #28]
   33b5e:	22d0      	movs	r2, #208	; 0xd0
   33b60:	589a      	ldr	r2, [r3, r2]
   33b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33b64:	18d2      	adds	r2, r2, r3
   33b66:	69fb      	ldr	r3, [r7, #28]
   33b68:	21d0      	movs	r1, #208	; 0xd0
   33b6a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   33b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33b6e:	2b00      	cmp	r3, #0
   33b70:	d000      	beq.n	33b74 <_http_client_request+0x57c>
   33b72:	e0c9      	b.n	33d08 <_http_client_request+0x710>
				if (module->req.entity.close) {
   33b74:	69fb      	ldr	r3, [r7, #28]
   33b76:	22c0      	movs	r2, #192	; 0xc0
   33b78:	589b      	ldr	r3, [r3, r2]
   33b7a:	2b00      	cmp	r3, #0
   33b7c:	d007      	beq.n	33b8e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   33b7e:	69fb      	ldr	r3, [r7, #28]
   33b80:	22c0      	movs	r2, #192	; 0xc0
   33b82:	589b      	ldr	r3, [r3, r2]
   33b84:	69fa      	ldr	r2, [r7, #28]
   33b86:	21c4      	movs	r1, #196	; 0xc4
   33b88:	5852      	ldr	r2, [r2, r1]
   33b8a:	0010      	movs	r0, r2
   33b8c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   33b8e:	69fb      	ldr	r3, [r7, #28]
   33b90:	2202      	movs	r2, #2
   33b92:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   33b94:	69fb      	ldr	r3, [r7, #28]
   33b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33b98:	2b00      	cmp	r3, #0
   33b9a:	d100      	bne.n	33b9e <_http_client_request+0x5a6>
   33b9c:	e0b5      	b.n	33d0a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33b9e:	69fb      	ldr	r3, [r7, #28]
   33ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33ba2:	220c      	movs	r2, #12
   33ba4:	2118      	movs	r1, #24
   33ba6:	468c      	mov	ip, r1
   33ba8:	44bc      	add	ip, r7
   33baa:	4462      	add	r2, ip
   33bac:	69f8      	ldr	r0, [r7, #28]
   33bae:	2101      	movs	r1, #1
   33bb0:	4798      	blx	r3
				break;
   33bb2:	e0aa      	b.n	33d0a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   33bb4:	69fb      	ldr	r3, [r7, #28]
   33bb6:	22cc      	movs	r2, #204	; 0xcc
   33bb8:	589b      	ldr	r3, [r3, r2]
   33bba:	2b00      	cmp	r3, #0
   33bbc:	dc00      	bgt.n	33bc0 <_http_client_request+0x5c8>
   33bbe:	e07c      	b.n	33cba <_http_client_request+0x6c2>
   33bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33bc2:	68db      	ldr	r3, [r3, #12]
   33bc4:	2b00      	cmp	r3, #0
   33bc6:	d100      	bne.n	33bca <_http_client_request+0x5d2>
   33bc8:	e077      	b.n	33cba <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   33bca:	69fb      	ldr	r3, [r7, #28]
   33bcc:	22d0      	movs	r2, #208	; 0xd0
   33bce:	589a      	ldr	r2, [r3, r2]
   33bd0:	69fb      	ldr	r3, [r7, #28]
   33bd2:	21cc      	movs	r1, #204	; 0xcc
   33bd4:	585b      	ldr	r3, [r3, r1]
   33bd6:	429a      	cmp	r2, r3
   33bd8:	db1f      	blt.n	33c1a <_http_client_request+0x622>
				if (module->req.entity.close) {
   33bda:	69fb      	ldr	r3, [r7, #28]
   33bdc:	22c0      	movs	r2, #192	; 0xc0
   33bde:	589b      	ldr	r3, [r3, r2]
   33be0:	2b00      	cmp	r3, #0
   33be2:	d007      	beq.n	33bf4 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   33be4:	69fb      	ldr	r3, [r7, #28]
   33be6:	22c0      	movs	r2, #192	; 0xc0
   33be8:	589b      	ldr	r3, [r3, r2]
   33bea:	69fa      	ldr	r2, [r7, #28]
   33bec:	21c4      	movs	r1, #196	; 0xc4
   33bee:	5852      	ldr	r2, [r2, r1]
   33bf0:	0010      	movs	r0, r2
   33bf2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   33bf4:	69fb      	ldr	r3, [r7, #28]
   33bf6:	2202      	movs	r2, #2
   33bf8:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   33bfa:	69fb      	ldr	r3, [r7, #28]
   33bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33bfe:	2b00      	cmp	r3, #0
   33c00:	d100      	bne.n	33c04 <_http_client_request+0x60c>
   33c02:	e084      	b.n	33d0e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33c04:	69fb      	ldr	r3, [r7, #28]
   33c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33c08:	220c      	movs	r2, #12
   33c0a:	2118      	movs	r1, #24
   33c0c:	468c      	mov	ip, r1
   33c0e:	44bc      	add	ip, r7
   33c10:	4462      	add	r2, ip
   33c12:	69f8      	ldr	r0, [r7, #28]
   33c14:	2101      	movs	r1, #1
   33c16:	4798      	blx	r3
				break;
   33c18:	e079      	b.n	33d0e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   33c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c1c:	68dc      	ldr	r4, [r3, #12]
   33c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c20:	6958      	ldr	r0, [r3, #20]
   33c22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33c24:	69fb      	ldr	r3, [r7, #28]
   33c26:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   33c28:	69fb      	ldr	r3, [r7, #28]
   33c2a:	22d0      	movs	r2, #208	; 0xd0
   33c2c:	589b      	ldr	r3, [r3, r2]
   33c2e:	002a      	movs	r2, r5
   33c30:	47a0      	blx	r4
   33c32:	0003      	movs	r3, r0
   33c34:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   33c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c38:	2b00      	cmp	r3, #0
   33c3a:	da0d      	bge.n	33c58 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   33c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c3e:	2b00      	cmp	r3, #0
   33c40:	d102      	bne.n	33c48 <_http_client_request+0x650>
   33c42:	234d      	movs	r3, #77	; 0x4d
   33c44:	425b      	negs	r3, r3
   33c46:	e001      	b.n	33c4c <_http_client_request+0x654>
   33c48:	2305      	movs	r3, #5
   33c4a:	425b      	negs	r3, r3
   33c4c:	69fa      	ldr	r2, [r7, #28]
   33c4e:	0019      	movs	r1, r3
   33c50:	0010      	movs	r0, r2
   33c52:	4b2c      	ldr	r3, [pc, #176]	; (33d04 <_http_client_request+0x70c>)
   33c54:	4798      	blx	r3
			if (size < 0) {
   33c56:	e057      	b.n	33d08 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   33c58:	69fb      	ldr	r3, [r7, #28]
   33c5a:	22cc      	movs	r2, #204	; 0xcc
   33c5c:	589a      	ldr	r2, [r3, r2]
   33c5e:	69fb      	ldr	r3, [r7, #28]
   33c60:	21d0      	movs	r1, #208	; 0xd0
   33c62:	585b      	ldr	r3, [r3, r1]
   33c64:	1ad2      	subs	r2, r2, r3
   33c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c68:	429a      	cmp	r2, r3
   33c6a:	da07      	bge.n	33c7c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   33c6c:	69fb      	ldr	r3, [r7, #28]
   33c6e:	22cc      	movs	r2, #204	; 0xcc
   33c70:	589a      	ldr	r2, [r3, r2]
   33c72:	69fb      	ldr	r3, [r7, #28]
   33c74:	21d0      	movs	r1, #208	; 0xd0
   33c76:	585b      	ldr	r3, [r3, r1]
   33c78:	1ad3      	subs	r3, r2, r3
   33c7a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   33c7c:	69fb      	ldr	r3, [r7, #28]
   33c7e:	2000      	movs	r0, #0
   33c80:	5618      	ldrsb	r0, [r3, r0]
   33c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c86:	b29a      	uxth	r2, r3
   33c88:	2300      	movs	r3, #0
   33c8a:	4c1d      	ldr	r4, [pc, #116]	; (33d00 <_http_client_request+0x708>)
   33c8c:	47a0      	blx	r4
   33c8e:	0003      	movs	r3, r0
   33c90:	663b      	str	r3, [r7, #96]	; 0x60
   33c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   33c94:	2b00      	cmp	r3, #0
   33c96:	da07      	bge.n	33ca8 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   33c98:	2305      	movs	r3, #5
   33c9a:	425a      	negs	r2, r3
   33c9c:	69fb      	ldr	r3, [r7, #28]
   33c9e:	0011      	movs	r1, r2
   33ca0:	0018      	movs	r0, r3
   33ca2:	4b18      	ldr	r3, [pc, #96]	; (33d04 <_http_client_request+0x70c>)
   33ca4:	4798      	blx	r3
					return;
   33ca6:	e03b      	b.n	33d20 <_http_client_request+0x728>
				module->req.sent_length += size;
   33ca8:	69fb      	ldr	r3, [r7, #28]
   33caa:	22d0      	movs	r2, #208	; 0xd0
   33cac:	589a      	ldr	r2, [r3, r2]
   33cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33cb0:	18d2      	adds	r2, r2, r3
   33cb2:	69fb      	ldr	r3, [r7, #28]
   33cb4:	21d0      	movs	r1, #208	; 0xd0
   33cb6:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   33cb8:	e026      	b.n	33d08 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   33cba:	69fb      	ldr	r3, [r7, #28]
   33cbc:	2202      	movs	r2, #2
   33cbe:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   33cc0:	69fb      	ldr	r3, [r7, #28]
   33cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33cc4:	2b00      	cmp	r3, #0
   33cc6:	d024      	beq.n	33d12 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33cc8:	69fb      	ldr	r3, [r7, #28]
   33cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33ccc:	220c      	movs	r2, #12
   33cce:	2118      	movs	r1, #24
   33cd0:	468c      	mov	ip, r1
   33cd2:	44bc      	add	ip, r7
   33cd4:	4462      	add	r2, ip
   33cd6:	69f8      	ldr	r0, [r7, #28]
   33cd8:	2101      	movs	r1, #1
   33cda:	4798      	blx	r3
			break;
   33cdc:	e019      	b.n	33d12 <_http_client_request+0x71a>
   33cde:	46c0      	nop			; (mov r8, r8)
   33ce0:	0003cde8 	.word	0x0003cde8
   33ce4:	00037add 	.word	0x00037add
   33ce8:	0003cdec 	.word	0x0003cdec
   33cec:	00034559 	.word	0x00034559
   33cf0:	00037bd7 	.word	0x00037bd7
   33cf4:	0003cd74 	.word	0x0003cd74
   33cf8:	00034595 	.word	0x00034595
   33cfc:	8000000f 	.word	0x8000000f
   33d00:	00027a81 	.word	0x00027a81
   33d04:	000334a5 	.word	0x000334a5
		break;
   33d08:	e004      	b.n	33d14 <_http_client_request+0x71c>
				break;
   33d0a:	46c0      	nop			; (mov r8, r8)
   33d0c:	e002      	b.n	33d14 <_http_client_request+0x71c>
				break;
   33d0e:	46c0      	nop			; (mov r8, r8)
   33d10:	e000      	b.n	33d14 <_http_client_request+0x71c>
			break;
   33d12:	46c0      	nop			; (mov r8, r8)
   33d14:	69bb      	ldr	r3, [r7, #24]
   33d16:	469d      	mov	sp, r3
   33d18:	e004      	b.n	33d24 <_http_client_request+0x72c>
		return;
   33d1a:	46c0      	nop			; (mov r8, r8)
   33d1c:	e000      	b.n	33d20 <_http_client_request+0x728>
		return;
   33d1e:	46c0      	nop			; (mov r8, r8)
   33d20:	69bb      	ldr	r3, [r7, #24]
   33d22:	469d      	mov	sp, r3
	}
}
   33d24:	46bd      	mov	sp, r7
   33d26:	b01e      	add	sp, #120	; 0x78
   33d28:	bc04      	pop	{r2}
   33d2a:	4690      	mov	r8, r2
   33d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33d2e:	46c0      	nop			; (mov r8, r8)

00033d30 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   33d30:	b590      	push	{r4, r7, lr}
   33d32:	b083      	sub	sp, #12
   33d34:	af00      	add	r7, sp, #0
   33d36:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   33d38:	687b      	ldr	r3, [r7, #4]
   33d3a:	2b00      	cmp	r3, #0
   33d3c:	d021      	beq.n	33d82 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   33d3e:	687b      	ldr	r3, [r7, #4]
   33d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33d42:	687b      	ldr	r3, [r7, #4]
   33d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   33d46:	429a      	cmp	r2, r3
   33d48:	d307      	bcc.n	33d5a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   33d4a:	238b      	movs	r3, #139	; 0x8b
   33d4c:	425a      	negs	r2, r3
   33d4e:	687b      	ldr	r3, [r7, #4]
   33d50:	0011      	movs	r1, r2
   33d52:	0018      	movs	r0, r3
   33d54:	4b0d      	ldr	r3, [pc, #52]	; (33d8c <_http_client_recv_packet+0x5c>)
   33d56:	4798      	blx	r3
		return;
   33d58:	e014      	b.n	33d84 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   33d5a:	687b      	ldr	r3, [r7, #4]
   33d5c:	2000      	movs	r0, #0
   33d5e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   33d60:	687b      	ldr	r3, [r7, #4]
   33d62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   33d64:	687b      	ldr	r3, [r7, #4]
   33d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33d68:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   33d6a:	687b      	ldr	r3, [r7, #4]
   33d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   33d6e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   33d70:	687b      	ldr	r3, [r7, #4]
   33d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   33d74:	b29b      	uxth	r3, r3
   33d76:	1ad3      	subs	r3, r2, r3
   33d78:	b29a      	uxth	r2, r3
   33d7a:	2300      	movs	r3, #0
   33d7c:	4c04      	ldr	r4, [pc, #16]	; (33d90 <_http_client_recv_packet+0x60>)
   33d7e:	47a0      	blx	r4
   33d80:	e000      	b.n	33d84 <_http_client_recv_packet+0x54>
		return;
   33d82:	46c0      	nop			; (mov r8, r8)
}
   33d84:	46bd      	mov	sp, r7
   33d86:	b003      	add	sp, #12
   33d88:	bd90      	pop	{r4, r7, pc}
   33d8a:	46c0      	nop			; (mov r8, r8)
   33d8c:	000334a5 	.word	0x000334a5
   33d90:	00027be5 	.word	0x00027be5

00033d94 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   33d94:	b580      	push	{r7, lr}
   33d96:	b082      	sub	sp, #8
   33d98:	af00      	add	r7, sp, #0
   33d9a:	6078      	str	r0, [r7, #4]
   33d9c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   33d9e:	687b      	ldr	r3, [r7, #4]
   33da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33da2:	683b      	ldr	r3, [r7, #0]
   33da4:	18d2      	adds	r2, r2, r3
   33da6:	687b      	ldr	r3, [r7, #4]
   33da8:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   33daa:	687b      	ldr	r3, [r7, #4]
   33dac:	2258      	movs	r2, #88	; 0x58
   33dae:	5a9b      	ldrh	r3, [r3, r2]
   33db0:	2b00      	cmp	r3, #0
   33db2:	d007      	beq.n	33dc4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   33db4:	687b      	ldr	r3, [r7, #4]
   33db6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33db8:	687b      	ldr	r3, [r7, #4]
   33dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   33dbc:	0019      	movs	r1, r3
   33dbe:	0010      	movs	r0, r2
   33dc0:	4b06      	ldr	r3, [pc, #24]	; (33ddc <_http_client_recved_packet+0x48>)
   33dc2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   33dc4:	46c0      	nop			; (mov r8, r8)
   33dc6:	687b      	ldr	r3, [r7, #4]
   33dc8:	0018      	movs	r0, r3
   33dca:	4b05      	ldr	r3, [pc, #20]	; (33de0 <_http_client_recved_packet+0x4c>)
   33dcc:	4798      	blx	r3
   33dce:	1e03      	subs	r3, r0, #0
   33dd0:	d1f9      	bne.n	33dc6 <_http_client_recved_packet+0x32>
}
   33dd2:	46c0      	nop			; (mov r8, r8)
   33dd4:	46bd      	mov	sp, r7
   33dd6:	b002      	add	sp, #8
   33dd8:	bd80      	pop	{r7, pc}
   33dda:	46c0      	nop			; (mov r8, r8)
   33ddc:	00034851 	.word	0x00034851
   33de0:	00033de5 	.word	0x00033de5

00033de4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   33de4:	b580      	push	{r7, lr}
   33de6:	b082      	sub	sp, #8
   33de8:	af00      	add	r7, sp, #0
   33dea:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   33dec:	687b      	ldr	r3, [r7, #4]
   33dee:	22d8      	movs	r2, #216	; 0xd8
   33df0:	589b      	ldr	r3, [r3, r2]
   33df2:	2b00      	cmp	r3, #0
   33df4:	d002      	beq.n	33dfc <_http_client_handle_response+0x18>
   33df6:	2b01      	cmp	r3, #1
   33df8:	d006      	beq.n	33e08 <_http_client_handle_response+0x24>
   33dfa:	e00b      	b.n	33e14 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   33dfc:	687b      	ldr	r3, [r7, #4]
   33dfe:	0018      	movs	r0, r3
   33e00:	4b07      	ldr	r3, [pc, #28]	; (33e20 <_http_client_handle_response+0x3c>)
   33e02:	4798      	blx	r3
   33e04:	0003      	movs	r3, r0
   33e06:	e006      	b.n	33e16 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   33e08:	687b      	ldr	r3, [r7, #4]
   33e0a:	0018      	movs	r0, r3
   33e0c:	4b05      	ldr	r3, [pc, #20]	; (33e24 <_http_client_handle_response+0x40>)
   33e0e:	4798      	blx	r3
   33e10:	0003      	movs	r3, r0
   33e12:	e000      	b.n	33e16 <_http_client_handle_response+0x32>
	}
	return 0;
   33e14:	2300      	movs	r3, #0
}
   33e16:	0018      	movs	r0, r3
   33e18:	46bd      	mov	sp, r7
   33e1a:	b002      	add	sp, #8
   33e1c:	bd80      	pop	{r7, pc}
   33e1e:	46c0      	nop			; (mov r8, r8)
   33e20:	00033e29 	.word	0x00033e29
   33e24:	000342e1 	.word	0x000342e1

00033e28 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   33e28:	b590      	push	{r4, r7, lr}
   33e2a:	b08b      	sub	sp, #44	; 0x2c
   33e2c:	af00      	add	r7, sp, #0
   33e2e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   33e30:	687b      	ldr	r3, [r7, #4]
   33e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33e34:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   33e36:	4b9a      	ldr	r3, [pc, #616]	; (340a0 <_http_client_handle_header+0x278>)
   33e38:	681a      	ldr	r2, [r3, #0]
   33e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33e3c:	0011      	movs	r1, r2
   33e3e:	0018      	movs	r0, r3
   33e40:	4b98      	ldr	r3, [pc, #608]	; (340a4 <_http_client_handle_header+0x27c>)
   33e42:	4798      	blx	r3
   33e44:	0003      	movs	r3, r0
   33e46:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   33e48:	69bb      	ldr	r3, [r7, #24]
   33e4a:	2b00      	cmp	r3, #0
   33e4c:	d007      	beq.n	33e5e <_http_client_handle_header+0x36>
   33e4e:	687b      	ldr	r3, [r7, #4]
   33e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   33e52:	687b      	ldr	r3, [r7, #4]
   33e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33e56:	18d2      	adds	r2, r2, r3
   33e58:	69bb      	ldr	r3, [r7, #24]
   33e5a:	429a      	cmp	r2, r3
   33e5c:	d807      	bhi.n	33e6e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   33e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   33e60:	687b      	ldr	r3, [r7, #4]
   33e62:	0011      	movs	r1, r2
   33e64:	0018      	movs	r0, r3
   33e66:	4b90      	ldr	r3, [pc, #576]	; (340a8 <_http_client_handle_header+0x280>)
   33e68:	4798      	blx	r3
			return 0;
   33e6a:	2300      	movs	r3, #0
   33e6c:	e114      	b.n	34098 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   33e6e:	4b8c      	ldr	r3, [pc, #560]	; (340a0 <_http_client_handle_header+0x278>)
   33e70:	681c      	ldr	r4, [r3, #0]
   33e72:	4b8b      	ldr	r3, [pc, #556]	; (340a0 <_http_client_handle_header+0x278>)
   33e74:	681b      	ldr	r3, [r3, #0]
   33e76:	0018      	movs	r0, r3
   33e78:	4b8c      	ldr	r3, [pc, #560]	; (340ac <_http_client_handle_header+0x284>)
   33e7a:	4798      	blx	r3
   33e7c:	0002      	movs	r2, r0
   33e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33e80:	0021      	movs	r1, r4
   33e82:	0018      	movs	r0, r3
   33e84:	4b8a      	ldr	r3, [pc, #552]	; (340b0 <_http_client_handle_header+0x288>)
   33e86:	4798      	blx	r3
   33e88:	1e03      	subs	r3, r0, #0
   33e8a:	d15d      	bne.n	33f48 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   33e8c:	4b84      	ldr	r3, [pc, #528]	; (340a0 <_http_client_handle_header+0x278>)
   33e8e:	681b      	ldr	r3, [r3, #0]
   33e90:	0018      	movs	r0, r3
   33e92:	4b86      	ldr	r3, [pc, #536]	; (340ac <_http_client_handle_header+0x284>)
   33e94:	4798      	blx	r3
   33e96:	0002      	movs	r2, r0
   33e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33e9a:	189a      	adds	r2, r3, r2
   33e9c:	687b      	ldr	r3, [r7, #4]
   33e9e:	0011      	movs	r1, r2
   33ea0:	0018      	movs	r0, r3
   33ea2:	4b81      	ldr	r3, [pc, #516]	; (340a8 <_http_client_handle_header+0x280>)
   33ea4:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   33ea6:	687b      	ldr	r3, [r7, #4]
   33ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33eaa:	2b00      	cmp	r3, #0
   33eac:	d046      	beq.n	33f3c <_http_client_handle_header+0x114>
   33eae:	687b      	ldr	r3, [r7, #4]
   33eb0:	22e4      	movs	r2, #228	; 0xe4
   33eb2:	5a9b      	ldrh	r3, [r3, r2]
   33eb4:	2b00      	cmp	r3, #0
   33eb6:	d041      	beq.n	33f3c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   33eb8:	687b      	ldr	r3, [r7, #4]
   33eba:	22dc      	movs	r2, #220	; 0xdc
   33ebc:	589b      	ldr	r3, [r3, r2]
   33ebe:	2b00      	cmp	r3, #0
   33ec0:	da19      	bge.n	33ef6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   33ec2:	687b      	ldr	r3, [r7, #4]
   33ec4:	22e4      	movs	r2, #228	; 0xe4
   33ec6:	5a9a      	ldrh	r2, [r3, r2]
   33ec8:	230c      	movs	r3, #12
   33eca:	18fb      	adds	r3, r7, r3
   33ecc:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   33ece:	230c      	movs	r3, #12
   33ed0:	18fb      	adds	r3, r7, r3
   33ed2:	2201      	movs	r2, #1
   33ed4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   33ed6:	687b      	ldr	r3, [r7, #4]
   33ed8:	22e0      	movs	r2, #224	; 0xe0
   33eda:	2100      	movs	r1, #0
   33edc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   33ede:	230c      	movs	r3, #12
   33ee0:	18fb      	adds	r3, r7, r3
   33ee2:	2200      	movs	r2, #0
   33ee4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   33ee6:	687b      	ldr	r3, [r7, #4]
   33ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33eea:	220c      	movs	r2, #12
   33eec:	18ba      	adds	r2, r7, r2
   33eee:	6878      	ldr	r0, [r7, #4]
   33ef0:	2102      	movs	r1, #2
   33ef2:	4798      	blx	r3
   33ef4:	e022      	b.n	33f3c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   33ef6:	687b      	ldr	r3, [r7, #4]
   33ef8:	22dc      	movs	r2, #220	; 0xdc
   33efa:	589a      	ldr	r2, [r3, r2]
   33efc:	687b      	ldr	r3, [r7, #4]
   33efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   33f00:	429a      	cmp	r2, r3
   33f02:	dd1b      	ble.n	33f3c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   33f04:	687b      	ldr	r3, [r7, #4]
   33f06:	22e4      	movs	r2, #228	; 0xe4
   33f08:	5a9a      	ldrh	r2, [r3, r2]
   33f0a:	230c      	movs	r3, #12
   33f0c:	18fb      	adds	r3, r7, r3
   33f0e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   33f10:	687b      	ldr	r3, [r7, #4]
   33f12:	22dc      	movs	r2, #220	; 0xdc
   33f14:	589b      	ldr	r3, [r3, r2]
   33f16:	001a      	movs	r2, r3
   33f18:	230c      	movs	r3, #12
   33f1a:	18fb      	adds	r3, r7, r3
   33f1c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   33f1e:	230c      	movs	r3, #12
   33f20:	18fb      	adds	r3, r7, r3
   33f22:	2200      	movs	r2, #0
   33f24:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   33f26:	687b      	ldr	r3, [r7, #4]
   33f28:	22e0      	movs	r2, #224	; 0xe0
   33f2a:	2100      	movs	r1, #0
   33f2c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   33f2e:	687b      	ldr	r3, [r7, #4]
   33f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33f32:	220c      	movs	r2, #12
   33f34:	18ba      	adds	r2, r7, r2
   33f36:	6878      	ldr	r0, [r7, #4]
   33f38:	2102      	movs	r1, #2
   33f3a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   33f3c:	687b      	ldr	r3, [r7, #4]
   33f3e:	22d8      	movs	r2, #216	; 0xd8
   33f40:	2101      	movs	r1, #1
   33f42:	5099      	str	r1, [r3, r2]
			return 1;
   33f44:	2301      	movs	r3, #1
   33f46:	e0a7      	b.n	34098 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   33f48:	495a      	ldr	r1, [pc, #360]	; (340b4 <_http_client_handle_header+0x28c>)
   33f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33f4c:	2210      	movs	r2, #16
   33f4e:	0018      	movs	r0, r3
   33f50:	4b57      	ldr	r3, [pc, #348]	; (340b0 <_http_client_handle_header+0x288>)
   33f52:	4798      	blx	r3
   33f54:	1e03      	subs	r3, r0, #0
   33f56:	d109      	bne.n	33f6c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   33f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33f5a:	3310      	adds	r3, #16
   33f5c:	0018      	movs	r0, r3
   33f5e:	4b56      	ldr	r3, [pc, #344]	; (340b8 <_http_client_handle_header+0x290>)
   33f60:	4798      	blx	r3
   33f62:	0001      	movs	r1, r0
   33f64:	687b      	ldr	r3, [r7, #4]
   33f66:	22dc      	movs	r2, #220	; 0xdc
   33f68:	5099      	str	r1, [r3, r2]
   33f6a:	e08b      	b.n	34084 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   33f6c:	4953      	ldr	r1, [pc, #332]	; (340bc <_http_client_handle_header+0x294>)
   33f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33f70:	2213      	movs	r2, #19
   33f72:	0018      	movs	r0, r3
   33f74:	4b4e      	ldr	r3, [pc, #312]	; (340b0 <_http_client_handle_header+0x288>)
   33f76:	4798      	blx	r3
   33f78:	1e03      	subs	r3, r0, #0
   33f7a:	d127      	bne.n	33fcc <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   33f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33f7e:	3313      	adds	r3, #19
   33f80:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33f82:	e01e      	b.n	33fc2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   33f84:	6a3b      	ldr	r3, [r7, #32]
   33f86:	781b      	ldrb	r3, [r3, #0]
   33f88:	2b20      	cmp	r3, #32
   33f8a:	d103      	bne.n	33f94 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33f8c:	6a3b      	ldr	r3, [r7, #32]
   33f8e:	3301      	adds	r3, #1
   33f90:	623b      	str	r3, [r7, #32]
   33f92:	e016      	b.n	33fc2 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   33f94:	6a3b      	ldr	r3, [r7, #32]
   33f96:	781b      	ldrb	r3, [r3, #0]
   33f98:	2b43      	cmp	r3, #67	; 0x43
   33f9a:	d003      	beq.n	33fa4 <_http_client_handle_header+0x17c>
   33f9c:	6a3b      	ldr	r3, [r7, #32]
   33f9e:	781b      	ldrb	r3, [r3, #0]
   33fa0:	2b63      	cmp	r3, #99	; 0x63
   33fa2:	d105      	bne.n	33fb0 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   33fa4:	687b      	ldr	r3, [r7, #4]
   33fa6:	21cc      	movs	r1, #204	; 0xcc
   33fa8:	2201      	movs	r2, #1
   33faa:	4252      	negs	r2, r2
   33fac:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   33fae:	e069      	b.n	34084 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   33fb0:	2386      	movs	r3, #134	; 0x86
   33fb2:	425a      	negs	r2, r3
   33fb4:	687b      	ldr	r3, [r7, #4]
   33fb6:	0011      	movs	r1, r2
   33fb8:	0018      	movs	r0, r3
   33fba:	4b41      	ldr	r3, [pc, #260]	; (340c0 <_http_client_handle_header+0x298>)
   33fbc:	4798      	blx	r3
					return 0;
   33fbe:	2300      	movs	r3, #0
   33fc0:	e06a      	b.n	34098 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33fc2:	69ba      	ldr	r2, [r7, #24]
   33fc4:	6a3b      	ldr	r3, [r7, #32]
   33fc6:	429a      	cmp	r2, r3
   33fc8:	d8dc      	bhi.n	33f84 <_http_client_handle_header+0x15c>
   33fca:	e05b      	b.n	34084 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   33fcc:	493d      	ldr	r1, [pc, #244]	; (340c4 <_http_client_handle_header+0x29c>)
   33fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33fd0:	220c      	movs	r2, #12
   33fd2:	0018      	movs	r0, r3
   33fd4:	4b36      	ldr	r3, [pc, #216]	; (340b0 <_http_client_handle_header+0x288>)
   33fd6:	4798      	blx	r3
   33fd8:	1e03      	subs	r3, r0, #0
   33fda:	d126      	bne.n	3402a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   33fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33fde:	330c      	adds	r3, #12
   33fe0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33fe2:	e01d      	b.n	34020 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   33fe4:	69fb      	ldr	r3, [r7, #28]
   33fe6:	781b      	ldrb	r3, [r3, #0]
   33fe8:	2b20      	cmp	r3, #32
   33fea:	d103      	bne.n	33ff4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33fec:	69fb      	ldr	r3, [r7, #28]
   33fee:	3301      	adds	r3, #1
   33ff0:	61fb      	str	r3, [r7, #28]
   33ff2:	e015      	b.n	34020 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   33ff4:	69fb      	ldr	r3, [r7, #28]
   33ff6:	781b      	ldrb	r3, [r3, #0]
   33ff8:	2b4b      	cmp	r3, #75	; 0x4b
   33ffa:	d003      	beq.n	34004 <_http_client_handle_header+0x1dc>
   33ffc:	69fb      	ldr	r3, [r7, #28]
   33ffe:	781b      	ldrb	r3, [r3, #0]
   34000:	2b6b      	cmp	r3, #107	; 0x6b
   34002:	d106      	bne.n	34012 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   34004:	687b      	ldr	r3, [r7, #4]
   34006:	2241      	movs	r2, #65	; 0x41
   34008:	5c99      	ldrb	r1, [r3, r2]
   3400a:	2002      	movs	r0, #2
   3400c:	4301      	orrs	r1, r0
   3400e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   34010:	e038      	b.n	34084 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   34012:	687b      	ldr	r3, [r7, #4]
   34014:	2241      	movs	r2, #65	; 0x41
   34016:	5c99      	ldrb	r1, [r3, r2]
   34018:	2002      	movs	r0, #2
   3401a:	4381      	bics	r1, r0
   3401c:	5499      	strb	r1, [r3, r2]
				break;
   3401e:	e031      	b.n	34084 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34020:	69ba      	ldr	r2, [r7, #24]
   34022:	69fb      	ldr	r3, [r7, #28]
   34024:	429a      	cmp	r2, r3
   34026:	d8dd      	bhi.n	33fe4 <_http_client_handle_header+0x1bc>
   34028:	e02c      	b.n	34084 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   3402a:	4927      	ldr	r1, [pc, #156]	; (340c8 <_http_client_handle_header+0x2a0>)
   3402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3402e:	2205      	movs	r2, #5
   34030:	0018      	movs	r0, r3
   34032:	4b1f      	ldr	r3, [pc, #124]	; (340b0 <_http_client_handle_header+0x288>)
   34034:	4798      	blx	r3
   34036:	1e03      	subs	r3, r0, #0
   34038:	d124      	bne.n	34084 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   3403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3403c:	3309      	adds	r3, #9
   3403e:	0018      	movs	r0, r3
   34040:	4b1d      	ldr	r3, [pc, #116]	; (340b8 <_http_client_handle_header+0x290>)
   34042:	4798      	blx	r3
   34044:	0003      	movs	r3, r0
   34046:	b299      	uxth	r1, r3
   34048:	687b      	ldr	r3, [r7, #4]
   3404a:	22e4      	movs	r2, #228	; 0xe4
   3404c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3404e:	687b      	ldr	r3, [r7, #4]
   34050:	22dc      	movs	r2, #220	; 0xdc
   34052:	2100      	movs	r1, #0
   34054:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   34056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34058:	3305      	adds	r3, #5
   3405a:	781b      	ldrb	r3, [r3, #0]
   3405c:	2b31      	cmp	r3, #49	; 0x31
   3405e:	d804      	bhi.n	3406a <_http_client_handle_header+0x242>
   34060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34062:	3307      	adds	r3, #7
   34064:	781b      	ldrb	r3, [r3, #0]
   34066:	2b30      	cmp	r3, #48	; 0x30
   34068:	d906      	bls.n	34078 <_http_client_handle_header+0x250>
				module->permanent = 1;
   3406a:	687b      	ldr	r3, [r7, #4]
   3406c:	2241      	movs	r2, #65	; 0x41
   3406e:	5c99      	ldrb	r1, [r3, r2]
   34070:	2002      	movs	r0, #2
   34072:	4301      	orrs	r1, r0
   34074:	5499      	strb	r1, [r3, r2]
   34076:	e005      	b.n	34084 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   34078:	687b      	ldr	r3, [r7, #4]
   3407a:	2241      	movs	r2, #65	; 0x41
   3407c:	5c99      	ldrb	r1, [r3, r2]
   3407e:	2002      	movs	r0, #2
   34080:	4381      	bics	r1, r0
   34082:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   34084:	4b06      	ldr	r3, [pc, #24]	; (340a0 <_http_client_handle_header+0x278>)
   34086:	681b      	ldr	r3, [r3, #0]
   34088:	0018      	movs	r0, r3
   3408a:	4b08      	ldr	r3, [pc, #32]	; (340ac <_http_client_handle_header+0x284>)
   3408c:	4798      	blx	r3
   3408e:	0002      	movs	r2, r0
   34090:	69bb      	ldr	r3, [r7, #24]
   34092:	189b      	adds	r3, r3, r2
   34094:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   34096:	e6ce      	b.n	33e36 <_http_client_handle_header+0xe>
	}
}
   34098:	0018      	movs	r0, r3
   3409a:	46bd      	mov	sp, r7
   3409c:	b00b      	add	sp, #44	; 0x2c
   3409e:	bd90      	pop	{r4, r7, pc}
   340a0:	20000128 	.word	0x20000128
   340a4:	00037c55 	.word	0x00037c55
   340a8:	0003448d 	.word	0x0003448d
   340ac:	00037bd7 	.word	0x00037bd7
   340b0:	00037be5 	.word	0x00037be5
   340b4:	0003cdec 	.word	0x0003cdec
   340b8:	0003776d 	.word	0x0003776d
   340bc:	0003ce10 	.word	0x0003ce10
   340c0:	000334a5 	.word	0x000334a5
   340c4:	0003ce24 	.word	0x0003ce24
   340c8:	0003ce34 	.word	0x0003ce34

000340cc <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   340cc:	b580      	push	{r7, lr}
   340ce:	b088      	sub	sp, #32
   340d0:	af00      	add	r7, sp, #0
   340d2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   340d4:	687b      	ldr	r3, [r7, #4]
   340d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   340d8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   340da:	2300      	movs	r3, #0
   340dc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   340de:	687b      	ldr	r3, [r7, #4]
   340e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   340e2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   340e4:	687b      	ldr	r3, [r7, #4]
   340e6:	22e0      	movs	r2, #224	; 0xe0
   340e8:	589b      	ldr	r3, [r3, r2]
   340ea:	2b00      	cmp	r3, #0
   340ec:	db71      	blt.n	341d2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   340ee:	687b      	ldr	r3, [r7, #4]
   340f0:	22e0      	movs	r2, #224	; 0xe0
   340f2:	589b      	ldr	r3, [r3, r2]
   340f4:	2b00      	cmp	r3, #0
   340f6:	d134      	bne.n	34162 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   340f8:	687b      	ldr	r3, [r7, #4]
   340fa:	22d8      	movs	r2, #216	; 0xd8
   340fc:	2100      	movs	r1, #0
   340fe:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   34100:	687b      	ldr	r3, [r7, #4]
   34102:	22e4      	movs	r2, #228	; 0xe4
   34104:	2100      	movs	r1, #0
   34106:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34108:	2308      	movs	r3, #8
   3410a:	18fb      	adds	r3, r7, r3
   3410c:	2201      	movs	r2, #1
   3410e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   34110:	2308      	movs	r3, #8
   34112:	18fb      	adds	r3, r7, r3
   34114:	2200      	movs	r2, #0
   34116:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   34118:	2308      	movs	r3, #8
   3411a:	18fb      	adds	r3, r7, r3
   3411c:	2200      	movs	r2, #0
   3411e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   34120:	687b      	ldr	r3, [r7, #4]
   34122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34124:	2b00      	cmp	r3, #0
   34126:	d006      	beq.n	34136 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34128:	687b      	ldr	r3, [r7, #4]
   3412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3412c:	2208      	movs	r2, #8
   3412e:	18ba      	adds	r2, r7, r2
   34130:	6878      	ldr	r0, [r7, #4]
   34132:	2103      	movs	r1, #3
   34134:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   34136:	687b      	ldr	r3, [r7, #4]
   34138:	2241      	movs	r2, #65	; 0x41
   3413a:	5c9b      	ldrb	r3, [r3, r2]
   3413c:	2202      	movs	r2, #2
   3413e:	4013      	ands	r3, r2
   34140:	b2db      	uxtb	r3, r3
   34142:	2b00      	cmp	r3, #0
   34144:	d105      	bne.n	34152 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   34146:	687b      	ldr	r3, [r7, #4]
   34148:	2100      	movs	r1, #0
   3414a:	0018      	movs	r0, r3
   3414c:	4b62      	ldr	r3, [pc, #392]	; (342d8 <_http_client_read_chuked_entity+0x20c>)
   3414e:	4798      	blx	r3
					return;
   34150:	e0bf      	b.n	342d2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   34152:	697b      	ldr	r3, [r7, #20]
   34154:	1c9a      	adds	r2, r3, #2
   34156:	687b      	ldr	r3, [r7, #4]
   34158:	0011      	movs	r1, r2
   3415a:	0018      	movs	r0, r3
   3415c:	4b5f      	ldr	r3, [pc, #380]	; (342dc <_http_client_read_chuked_entity+0x210>)
   3415e:	4798      	blx	r3
   34160:	e0b2      	b.n	342c8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   34162:	687b      	ldr	r3, [r7, #4]
   34164:	22e0      	movs	r2, #224	; 0xe0
   34166:	589a      	ldr	r2, [r3, r2]
   34168:	69fb      	ldr	r3, [r7, #28]
   3416a:	429a      	cmp	r2, r3
   3416c:	dd00      	ble.n	34170 <_http_client_read_chuked_entity+0xa4>
   3416e:	e0ab      	b.n	342c8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   34170:	687b      	ldr	r3, [r7, #4]
   34172:	22e0      	movs	r2, #224	; 0xe0
   34174:	589b      	ldr	r3, [r3, r2]
   34176:	001a      	movs	r2, r3
   34178:	2308      	movs	r3, #8
   3417a:	18fb      	adds	r3, r7, r3
   3417c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   3417e:	2308      	movs	r3, #8
   34180:	18fb      	adds	r3, r7, r3
   34182:	697a      	ldr	r2, [r7, #20]
   34184:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   34186:	2308      	movs	r3, #8
   34188:	18fb      	adds	r3, r7, r3
   3418a:	2200      	movs	r2, #0
   3418c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   3418e:	687b      	ldr	r3, [r7, #4]
   34190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34192:	2b00      	cmp	r3, #0
   34194:	d006      	beq.n	341a4 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34196:	687b      	ldr	r3, [r7, #4]
   34198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3419a:	2208      	movs	r2, #8
   3419c:	18ba      	adds	r2, r7, r2
   3419e:	6878      	ldr	r0, [r7, #4]
   341a0:	2103      	movs	r1, #3
   341a2:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   341a4:	687b      	ldr	r3, [r7, #4]
   341a6:	22e0      	movs	r2, #224	; 0xe0
   341a8:	589b      	ldr	r3, [r3, r2]
   341aa:	3302      	adds	r3, #2
   341ac:	697a      	ldr	r2, [r7, #20]
   341ae:	18d2      	adds	r2, r2, r3
   341b0:	687b      	ldr	r3, [r7, #4]
   341b2:	0011      	movs	r1, r2
   341b4:	0018      	movs	r0, r3
   341b6:	4b49      	ldr	r3, [pc, #292]	; (342dc <_http_client_read_chuked_entity+0x210>)
   341b8:	4798      	blx	r3
				length = (int)module->recved_size;
   341ba:	687b      	ldr	r3, [r7, #4]
   341bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   341be:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   341c0:	687b      	ldr	r3, [r7, #4]
   341c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   341c4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   341c6:	687b      	ldr	r3, [r7, #4]
   341c8:	21e0      	movs	r1, #224	; 0xe0
   341ca:	2201      	movs	r2, #1
   341cc:	4252      	negs	r2, r2
   341ce:	505a      	str	r2, [r3, r1]
   341d0:	e07a      	b.n	342c8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   341d2:	687b      	ldr	r3, [r7, #4]
   341d4:	22e0      	movs	r2, #224	; 0xe0
   341d6:	2100      	movs	r1, #0
   341d8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   341da:	e05a      	b.n	34292 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   341dc:	697b      	ldr	r3, [r7, #20]
   341de:	781b      	ldrb	r3, [r3, #0]
   341e0:	2b0a      	cmp	r3, #10
   341e2:	d106      	bne.n	341f2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   341e4:	697b      	ldr	r3, [r7, #20]
   341e6:	3301      	adds	r3, #1
   341e8:	617b      	str	r3, [r7, #20]
					length--;
   341ea:	69fb      	ldr	r3, [r7, #28]
   341ec:	3b01      	subs	r3, #1
   341ee:	61fb      	str	r3, [r7, #28]
					break;
   341f0:	e052      	b.n	34298 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   341f2:	69bb      	ldr	r3, [r7, #24]
   341f4:	2b00      	cmp	r3, #0
   341f6:	d145      	bne.n	34284 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   341f8:	697b      	ldr	r3, [r7, #20]
   341fa:	781b      	ldrb	r3, [r3, #0]
   341fc:	2b2f      	cmp	r3, #47	; 0x2f
   341fe:	d910      	bls.n	34222 <_http_client_read_chuked_entity+0x156>
   34200:	697b      	ldr	r3, [r7, #20]
   34202:	781b      	ldrb	r3, [r3, #0]
   34204:	2b39      	cmp	r3, #57	; 0x39
   34206:	d80c      	bhi.n	34222 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   34208:	687b      	ldr	r3, [r7, #4]
   3420a:	22e0      	movs	r2, #224	; 0xe0
   3420c:	589b      	ldr	r3, [r3, r2]
   3420e:	011b      	lsls	r3, r3, #4
   34210:	697a      	ldr	r2, [r7, #20]
   34212:	7812      	ldrb	r2, [r2, #0]
   34214:	189b      	adds	r3, r3, r2
   34216:	3b30      	subs	r3, #48	; 0x30
   34218:	001a      	movs	r2, r3
   3421a:	687b      	ldr	r3, [r7, #4]
   3421c:	21e0      	movs	r1, #224	; 0xe0
   3421e:	505a      	str	r2, [r3, r1]
   34220:	e031      	b.n	34286 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   34222:	697b      	ldr	r3, [r7, #20]
   34224:	781b      	ldrb	r3, [r3, #0]
   34226:	2b60      	cmp	r3, #96	; 0x60
   34228:	d910      	bls.n	3424c <_http_client_read_chuked_entity+0x180>
   3422a:	697b      	ldr	r3, [r7, #20]
   3422c:	781b      	ldrb	r3, [r3, #0]
   3422e:	2b66      	cmp	r3, #102	; 0x66
   34230:	d80c      	bhi.n	3424c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   34232:	687b      	ldr	r3, [r7, #4]
   34234:	22e0      	movs	r2, #224	; 0xe0
   34236:	589b      	ldr	r3, [r3, r2]
   34238:	011b      	lsls	r3, r3, #4
   3423a:	697a      	ldr	r2, [r7, #20]
   3423c:	7812      	ldrb	r2, [r2, #0]
   3423e:	189b      	adds	r3, r3, r2
   34240:	3b61      	subs	r3, #97	; 0x61
   34242:	001a      	movs	r2, r3
   34244:	687b      	ldr	r3, [r7, #4]
   34246:	21e0      	movs	r1, #224	; 0xe0
   34248:	505a      	str	r2, [r3, r1]
   3424a:	e01c      	b.n	34286 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   3424c:	697b      	ldr	r3, [r7, #20]
   3424e:	781b      	ldrb	r3, [r3, #0]
   34250:	2b40      	cmp	r3, #64	; 0x40
   34252:	d910      	bls.n	34276 <_http_client_read_chuked_entity+0x1aa>
   34254:	697b      	ldr	r3, [r7, #20]
   34256:	781b      	ldrb	r3, [r3, #0]
   34258:	2b46      	cmp	r3, #70	; 0x46
   3425a:	d80c      	bhi.n	34276 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   3425c:	687b      	ldr	r3, [r7, #4]
   3425e:	22e0      	movs	r2, #224	; 0xe0
   34260:	589b      	ldr	r3, [r3, r2]
   34262:	011b      	lsls	r3, r3, #4
   34264:	697a      	ldr	r2, [r7, #20]
   34266:	7812      	ldrb	r2, [r2, #0]
   34268:	189b      	adds	r3, r3, r2
   3426a:	3b41      	subs	r3, #65	; 0x41
   3426c:	001a      	movs	r2, r3
   3426e:	687b      	ldr	r3, [r7, #4]
   34270:	21e0      	movs	r1, #224	; 0xe0
   34272:	505a      	str	r2, [r3, r1]
   34274:	e007      	b.n	34286 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   34276:	697b      	ldr	r3, [r7, #20]
   34278:	781b      	ldrb	r3, [r3, #0]
   3427a:	2b3b      	cmp	r3, #59	; 0x3b
   3427c:	d103      	bne.n	34286 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   3427e:	2301      	movs	r3, #1
   34280:	61bb      	str	r3, [r7, #24]
   34282:	e000      	b.n	34286 <_http_client_read_chuked_entity+0x1ba>
					continue;
   34284:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   34286:	697b      	ldr	r3, [r7, #20]
   34288:	3301      	adds	r3, #1
   3428a:	617b      	str	r3, [r7, #20]
   3428c:	69fb      	ldr	r3, [r7, #28]
   3428e:	3b01      	subs	r3, #1
   34290:	61fb      	str	r3, [r7, #28]
   34292:	69fb      	ldr	r3, [r7, #28]
   34294:	2b00      	cmp	r3, #0
   34296:	dca1      	bgt.n	341dc <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   34298:	687b      	ldr	r3, [r7, #4]
   3429a:	22e0      	movs	r2, #224	; 0xe0
   3429c:	589a      	ldr	r2, [r3, r2]
   3429e:	687b      	ldr	r3, [r7, #4]
   342a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   342a2:	429a      	cmp	r2, r3
   342a4:	dd07      	ble.n	342b6 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   342a6:	238b      	movs	r3, #139	; 0x8b
   342a8:	425a      	negs	r2, r3
   342aa:	687b      	ldr	r3, [r7, #4]
   342ac:	0011      	movs	r1, r2
   342ae:	0018      	movs	r0, r3
   342b0:	4b09      	ldr	r3, [pc, #36]	; (342d8 <_http_client_read_chuked_entity+0x20c>)
   342b2:	4798      	blx	r3
				return;
   342b4:	e00d      	b.n	342d2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   342b6:	69fb      	ldr	r3, [r7, #28]
   342b8:	2b00      	cmp	r3, #0
   342ba:	d105      	bne.n	342c8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   342bc:	687b      	ldr	r3, [r7, #4]
   342be:	21e0      	movs	r1, #224	; 0xe0
   342c0:	2201      	movs	r2, #1
   342c2:	4252      	negs	r2, r2
   342c4:	505a      	str	r2, [r3, r1]
				return;
   342c6:	e004      	b.n	342d2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   342c8:	687b      	ldr	r3, [r7, #4]
   342ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   342cc:	2b00      	cmp	r3, #0
   342ce:	d000      	beq.n	342d2 <_http_client_read_chuked_entity+0x206>
   342d0:	e708      	b.n	340e4 <_http_client_read_chuked_entity+0x18>
}
   342d2:	46bd      	mov	sp, r7
   342d4:	b008      	add	sp, #32
   342d6:	bd80      	pop	{r7, pc}
   342d8:	000334a5 	.word	0x000334a5
   342dc:	0003448d 	.word	0x0003448d

000342e0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   342e0:	b580      	push	{r7, lr}
   342e2:	b086      	sub	sp, #24
   342e4:	af00      	add	r7, sp, #0
   342e6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   342e8:	687b      	ldr	r3, [r7, #4]
   342ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   342ec:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   342ee:	687b      	ldr	r3, [r7, #4]
   342f0:	22dc      	movs	r2, #220	; 0xdc
   342f2:	589b      	ldr	r3, [r3, r2]
   342f4:	2b00      	cmp	r3, #0
   342f6:	db58      	blt.n	343aa <_http_client_handle_entity+0xca>
   342f8:	687b      	ldr	r3, [r7, #4]
   342fa:	22dc      	movs	r2, #220	; 0xdc
   342fc:	589a      	ldr	r2, [r3, r2]
   342fe:	687b      	ldr	r3, [r7, #4]
   34300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34302:	429a      	cmp	r2, r3
   34304:	dc51      	bgt.n	343aa <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   34306:	687b      	ldr	r3, [r7, #4]
   34308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3430a:	0019      	movs	r1, r3
   3430c:	687b      	ldr	r3, [r7, #4]
   3430e:	22dc      	movs	r2, #220	; 0xdc
   34310:	589b      	ldr	r3, [r3, r2]
   34312:	4299      	cmp	r1, r3
   34314:	da00      	bge.n	34318 <_http_client_handle_entity+0x38>
   34316:	e0a9      	b.n	3446c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   34318:	687b      	ldr	r3, [r7, #4]
   3431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3431c:	2b00      	cmp	r3, #0
   3431e:	d020      	beq.n	34362 <_http_client_handle_entity+0x82>
   34320:	687b      	ldr	r3, [r7, #4]
   34322:	22e4      	movs	r2, #228	; 0xe4
   34324:	5a9b      	ldrh	r3, [r3, r2]
   34326:	2b00      	cmp	r3, #0
   34328:	d01b      	beq.n	34362 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   3432a:	687b      	ldr	r3, [r7, #4]
   3432c:	22e4      	movs	r2, #228	; 0xe4
   3432e:	5a9a      	ldrh	r2, [r3, r2]
   34330:	2308      	movs	r3, #8
   34332:	18fb      	adds	r3, r7, r3
   34334:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   34336:	2308      	movs	r3, #8
   34338:	18fb      	adds	r3, r7, r3
   3433a:	2200      	movs	r2, #0
   3433c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   3433e:	687b      	ldr	r3, [r7, #4]
   34340:	22dc      	movs	r2, #220	; 0xdc
   34342:	589b      	ldr	r3, [r3, r2]
   34344:	001a      	movs	r2, r3
   34346:	2308      	movs	r3, #8
   34348:	18fb      	adds	r3, r7, r3
   3434a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   3434c:	2308      	movs	r3, #8
   3434e:	18fb      	adds	r3, r7, r3
   34350:	697a      	ldr	r2, [r7, #20]
   34352:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34354:	687b      	ldr	r3, [r7, #4]
   34356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34358:	2208      	movs	r2, #8
   3435a:	18ba      	adds	r2, r7, r2
   3435c:	6878      	ldr	r0, [r7, #4]
   3435e:	2102      	movs	r1, #2
   34360:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   34362:	687b      	ldr	r3, [r7, #4]
   34364:	22d8      	movs	r2, #216	; 0xd8
   34366:	2100      	movs	r1, #0
   34368:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   3436a:	687b      	ldr	r3, [r7, #4]
   3436c:	22e4      	movs	r2, #228	; 0xe4
   3436e:	2100      	movs	r1, #0
   34370:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   34372:	687b      	ldr	r3, [r7, #4]
   34374:	2241      	movs	r2, #65	; 0x41
   34376:	5c9b      	ldrb	r3, [r3, r2]
   34378:	2202      	movs	r2, #2
   3437a:	4013      	ands	r3, r2
   3437c:	b2db      	uxtb	r3, r3
   3437e:	2b00      	cmp	r3, #0
   34380:	d105      	bne.n	3438e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   34382:	687b      	ldr	r3, [r7, #4]
   34384:	2100      	movs	r1, #0
   34386:	0018      	movs	r0, r3
   34388:	4b3b      	ldr	r3, [pc, #236]	; (34478 <_http_client_handle_entity+0x198>)
   3438a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   3438c:	e06e      	b.n	3446c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   3438e:	687b      	ldr	r3, [r7, #4]
   34390:	22dc      	movs	r2, #220	; 0xdc
   34392:	589b      	ldr	r3, [r3, r2]
   34394:	001a      	movs	r2, r3
   34396:	697b      	ldr	r3, [r7, #20]
   34398:	189a      	adds	r2, r3, r2
   3439a:	687b      	ldr	r3, [r7, #4]
   3439c:	0011      	movs	r1, r2
   3439e:	0018      	movs	r0, r3
   343a0:	4b36      	ldr	r3, [pc, #216]	; (3447c <_http_client_handle_entity+0x19c>)
   343a2:	4798      	blx	r3
				return module->recved_size;
   343a4:	687b      	ldr	r3, [r7, #4]
   343a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   343a8:	e061      	b.n	3446e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   343aa:	687b      	ldr	r3, [r7, #4]
   343ac:	22dc      	movs	r2, #220	; 0xdc
   343ae:	589b      	ldr	r3, [r3, r2]
   343b0:	2b00      	cmp	r3, #0
   343b2:	db57      	blt.n	34464 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   343b4:	687b      	ldr	r3, [r7, #4]
   343b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   343b8:	2308      	movs	r3, #8
   343ba:	18fb      	adds	r3, r7, r3
   343bc:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   343be:	2308      	movs	r3, #8
   343c0:	18fb      	adds	r3, r7, r3
   343c2:	697a      	ldr	r2, [r7, #20]
   343c4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   343c6:	687b      	ldr	r3, [r7, #4]
   343c8:	22e0      	movs	r2, #224	; 0xe0
   343ca:	589a      	ldr	r2, [r3, r2]
   343cc:	687b      	ldr	r3, [r7, #4]
   343ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   343d0:	18d2      	adds	r2, r2, r3
   343d2:	687b      	ldr	r3, [r7, #4]
   343d4:	21e0      	movs	r1, #224	; 0xe0
   343d6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   343d8:	687b      	ldr	r3, [r7, #4]
   343da:	22dc      	movs	r2, #220	; 0xdc
   343dc:	589a      	ldr	r2, [r3, r2]
   343de:	687b      	ldr	r3, [r7, #4]
   343e0:	21e0      	movs	r1, #224	; 0xe0
   343e2:	585b      	ldr	r3, [r3, r1]
   343e4:	429a      	cmp	r2, r3
   343e6:	dc0c      	bgt.n	34402 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   343e8:	687b      	ldr	r3, [r7, #4]
   343ea:	22d8      	movs	r2, #216	; 0xd8
   343ec:	2100      	movs	r1, #0
   343ee:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   343f0:	687b      	ldr	r3, [r7, #4]
   343f2:	22e4      	movs	r2, #228	; 0xe4
   343f4:	2100      	movs	r1, #0
   343f6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   343f8:	2308      	movs	r3, #8
   343fa:	18fb      	adds	r3, r7, r3
   343fc:	2201      	movs	r2, #1
   343fe:	721a      	strb	r2, [r3, #8]
   34400:	e003      	b.n	3440a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   34402:	2308      	movs	r3, #8
   34404:	18fb      	adds	r3, r7, r3
   34406:	2200      	movs	r2, #0
   34408:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   3440a:	687b      	ldr	r3, [r7, #4]
   3440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3440e:	2b00      	cmp	r3, #0
   34410:	d006      	beq.n	34420 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34412:	687b      	ldr	r3, [r7, #4]
   34414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34416:	2208      	movs	r2, #8
   34418:	18ba      	adds	r2, r7, r2
   3441a:	6878      	ldr	r0, [r7, #4]
   3441c:	2103      	movs	r1, #3
   3441e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   34420:	2308      	movs	r3, #8
   34422:	18fb      	adds	r3, r7, r3
   34424:	7a1b      	ldrb	r3, [r3, #8]
   34426:	2b01      	cmp	r3, #1
   34428:	d112      	bne.n	34450 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   3442a:	687b      	ldr	r3, [r7, #4]
   3442c:	2241      	movs	r2, #65	; 0x41
   3442e:	5c9b      	ldrb	r3, [r3, r2]
   34430:	2202      	movs	r2, #2
   34432:	4013      	ands	r3, r2
   34434:	b2db      	uxtb	r3, r3
   34436:	2b00      	cmp	r3, #0
   34438:	d10a      	bne.n	34450 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   3443a:	4b11      	ldr	r3, [pc, #68]	; (34480 <_http_client_handle_entity+0x1a0>)
   3443c:	0018      	movs	r0, r3
   3443e:	4b11      	ldr	r3, [pc, #68]	; (34484 <_http_client_handle_entity+0x1a4>)
   34440:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   34442:	687b      	ldr	r3, [r7, #4]
   34444:	2100      	movs	r1, #0
   34446:	0018      	movs	r0, r3
   34448:	4b0b      	ldr	r3, [pc, #44]	; (34478 <_http_client_handle_entity+0x198>)
   3444a:	4798      	blx	r3
					return 0;
   3444c:	2300      	movs	r3, #0
   3444e:	e00e      	b.n	3446e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   34450:	687b      	ldr	r3, [r7, #4]
   34452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34454:	697a      	ldr	r2, [r7, #20]
   34456:	18d2      	adds	r2, r2, r3
   34458:	687b      	ldr	r3, [r7, #4]
   3445a:	0011      	movs	r1, r2
   3445c:	0018      	movs	r0, r3
   3445e:	4b07      	ldr	r3, [pc, #28]	; (3447c <_http_client_handle_entity+0x19c>)
   34460:	4798      	blx	r3
   34462:	e003      	b.n	3446c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   34464:	687b      	ldr	r3, [r7, #4]
   34466:	0018      	movs	r0, r3
   34468:	4b07      	ldr	r3, [pc, #28]	; (34488 <_http_client_handle_entity+0x1a8>)
   3446a:	4798      	blx	r3
		}
	}

	return 0;
   3446c:	2300      	movs	r3, #0
}
   3446e:	0018      	movs	r0, r3
   34470:	46bd      	mov	sp, r7
   34472:	b006      	add	sp, #24
   34474:	bd80      	pop	{r7, pc}
   34476:	46c0      	nop			; (mov r8, r8)
   34478:	000334a5 	.word	0x000334a5
   3447c:	0003448d 	.word	0x0003448d
   34480:	0003ce3c 	.word	0x0003ce3c
   34484:	00037a41 	.word	0x00037a41
   34488:	000340cd 	.word	0x000340cd

0003448c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   3448c:	b580      	push	{r7, lr}
   3448e:	b084      	sub	sp, #16
   34490:	af00      	add	r7, sp, #0
   34492:	6078      	str	r0, [r7, #4]
   34494:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   34496:	687b      	ldr	r3, [r7, #4]
   34498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3449a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   3449c:	687b      	ldr	r3, [r7, #4]
   3449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   344a0:	001a      	movs	r2, r3
   344a2:	683b      	ldr	r3, [r7, #0]
   344a4:	1ad2      	subs	r2, r2, r3
   344a6:	68fb      	ldr	r3, [r7, #12]
   344a8:	18d3      	adds	r3, r2, r3
   344aa:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   344ac:	68bb      	ldr	r3, [r7, #8]
   344ae:	2b00      	cmp	r3, #0
   344b0:	dd09      	ble.n	344c6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   344b2:	68ba      	ldr	r2, [r7, #8]
   344b4:	6839      	ldr	r1, [r7, #0]
   344b6:	68fb      	ldr	r3, [r7, #12]
   344b8:	0018      	movs	r0, r3
   344ba:	4b06      	ldr	r3, [pc, #24]	; (344d4 <_http_client_move_buffer+0x48>)
   344bc:	4798      	blx	r3
		module->recved_size = remain;
   344be:	68ba      	ldr	r2, [r7, #8]
   344c0:	687b      	ldr	r3, [r7, #4]
   344c2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   344c4:	e002      	b.n	344cc <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   344c6:	687b      	ldr	r3, [r7, #4]
   344c8:	2200      	movs	r2, #0
   344ca:	645a      	str	r2, [r3, #68]	; 0x44
}
   344cc:	46c0      	nop			; (mov r8, r8)
   344ce:	46bd      	mov	sp, r7
   344d0:	b004      	add	sp, #16
   344d2:	bd80      	pop	{r7, pc}
   344d4:	000377fb 	.word	0x000377fb

000344d8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   344d8:	b580      	push	{r7, lr}
   344da:	b084      	sub	sp, #16
   344dc:	af00      	add	r7, sp, #0
   344de:	60f8      	str	r0, [r7, #12]
   344e0:	60b9      	str	r1, [r7, #8]
   344e2:	607a      	str	r2, [r7, #4]
   344e4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   344e6:	68fb      	ldr	r3, [r7, #12]
   344e8:	687a      	ldr	r2, [r7, #4]
   344ea:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   344ec:	68fb      	ldr	r3, [r7, #12]
   344ee:	68ba      	ldr	r2, [r7, #8]
   344f0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   344f2:	68fb      	ldr	r3, [r7, #12]
   344f4:	2200      	movs	r2, #0
   344f6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   344f8:	68fb      	ldr	r3, [r7, #12]
   344fa:	683a      	ldr	r2, [r7, #0]
   344fc:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   344fe:	68fb      	ldr	r3, [r7, #12]
   34500:	69ba      	ldr	r2, [r7, #24]
   34502:	60da      	str	r2, [r3, #12]
}
   34504:	46c0      	nop			; (mov r8, r8)
   34506:	46bd      	mov	sp, r7
   34508:	b004      	add	sp, #16
   3450a:	bd80      	pop	{r7, pc}

0003450c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   3450c:	b580      	push	{r7, lr}
   3450e:	b084      	sub	sp, #16
   34510:	af00      	add	r7, sp, #0
   34512:	6078      	str	r0, [r7, #4]
   34514:	000a      	movs	r2, r1
   34516:	1cfb      	adds	r3, r7, #3
   34518:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   3451a:	687b      	ldr	r3, [r7, #4]
   3451c:	681a      	ldr	r2, [r3, #0]
   3451e:	687b      	ldr	r3, [r7, #4]
   34520:	685b      	ldr	r3, [r3, #4]
   34522:	1ad3      	subs	r3, r2, r3
   34524:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   34526:	68fb      	ldr	r3, [r7, #12]
   34528:	2b00      	cmp	r3, #0
   3452a:	dc03      	bgt.n	34534 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   3452c:	687b      	ldr	r3, [r7, #4]
   3452e:	0018      	movs	r0, r3
   34530:	4b08      	ldr	r3, [pc, #32]	; (34554 <stream_writer_send_8+0x48>)
   34532:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   34534:	687b      	ldr	r3, [r7, #4]
   34536:	6919      	ldr	r1, [r3, #16]
   34538:	687b      	ldr	r3, [r7, #4]
   3453a:	685b      	ldr	r3, [r3, #4]
   3453c:	1c58      	adds	r0, r3, #1
   3453e:	687a      	ldr	r2, [r7, #4]
   34540:	6050      	str	r0, [r2, #4]
   34542:	18cb      	adds	r3, r1, r3
   34544:	1cfa      	adds	r2, r7, #3
   34546:	7812      	ldrb	r2, [r2, #0]
   34548:	701a      	strb	r2, [r3, #0]
}
   3454a:	46c0      	nop			; (mov r8, r8)
   3454c:	46bd      	mov	sp, r7
   3454e:	b004      	add	sp, #16
   34550:	bd80      	pop	{r7, pc}
   34552:	46c0      	nop			; (mov r8, r8)
   34554:	00034595 	.word	0x00034595

00034558 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   34558:	b580      	push	{r7, lr}
   3455a:	b084      	sub	sp, #16
   3455c:	af00      	add	r7, sp, #0
   3455e:	60f8      	str	r0, [r7, #12]
   34560:	60b9      	str	r1, [r7, #8]
   34562:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   34564:	e00d      	b.n	34582 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   34566:	68bb      	ldr	r3, [r7, #8]
   34568:	781b      	ldrb	r3, [r3, #0]
   3456a:	b25a      	sxtb	r2, r3
   3456c:	68fb      	ldr	r3, [r7, #12]
   3456e:	0011      	movs	r1, r2
   34570:	0018      	movs	r0, r3
   34572:	4b07      	ldr	r3, [pc, #28]	; (34590 <stream_writer_send_buffer+0x38>)
   34574:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   34576:	687b      	ldr	r3, [r7, #4]
   34578:	3b01      	subs	r3, #1
   3457a:	607b      	str	r3, [r7, #4]
   3457c:	68bb      	ldr	r3, [r7, #8]
   3457e:	3301      	adds	r3, #1
   34580:	60bb      	str	r3, [r7, #8]
   34582:	687b      	ldr	r3, [r7, #4]
   34584:	2b00      	cmp	r3, #0
   34586:	d1ee      	bne.n	34566 <stream_writer_send_buffer+0xe>
	}
}
   34588:	46c0      	nop			; (mov r8, r8)
   3458a:	46bd      	mov	sp, r7
   3458c:	b004      	add	sp, #16
   3458e:	bd80      	pop	{r7, pc}
   34590:	0003450d 	.word	0x0003450d

00034594 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   34594:	b590      	push	{r4, r7, lr}
   34596:	b083      	sub	sp, #12
   34598:	af00      	add	r7, sp, #0
   3459a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   3459c:	687b      	ldr	r3, [r7, #4]
   3459e:	685b      	ldr	r3, [r3, #4]
   345a0:	2b00      	cmp	r3, #0
   345a2:	d00c      	beq.n	345be <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   345a4:	687b      	ldr	r3, [r7, #4]
   345a6:	689c      	ldr	r4, [r3, #8]
   345a8:	687b      	ldr	r3, [r7, #4]
   345aa:	68d8      	ldr	r0, [r3, #12]
   345ac:	687b      	ldr	r3, [r7, #4]
   345ae:	6919      	ldr	r1, [r3, #16]
   345b0:	687b      	ldr	r3, [r7, #4]
   345b2:	685b      	ldr	r3, [r3, #4]
   345b4:	001a      	movs	r2, r3
   345b6:	47a0      	blx	r4
		writer->written = 0;
   345b8:	687b      	ldr	r3, [r7, #4]
   345ba:	2200      	movs	r2, #0
   345bc:	605a      	str	r2, [r3, #4]
	}
}
   345be:	46c0      	nop			; (mov r8, r8)
   345c0:	46bd      	mov	sp, r7
   345c2:	b003      	add	sp, #12
   345c4:	bd90      	pop	{r4, r7, pc}
	...

000345c8 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   345c8:	b580      	push	{r7, lr}
   345ca:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   345cc:	2000      	movs	r0, #0
   345ce:	4b05      	ldr	r3, [pc, #20]	; (345e4 <system_cpu_clock_get_hz+0x1c>)
   345d0:	4798      	blx	r3
   345d2:	0002      	movs	r2, r0
   345d4:	4b04      	ldr	r3, [pc, #16]	; (345e8 <system_cpu_clock_get_hz+0x20>)
   345d6:	7a1b      	ldrb	r3, [r3, #8]
   345d8:	b2db      	uxtb	r3, r3
   345da:	40da      	lsrs	r2, r3
   345dc:	0013      	movs	r3, r2
}
   345de:	0018      	movs	r0, r3
   345e0:	46bd      	mov	sp, r7
   345e2:	bd80      	pop	{r7, pc}
   345e4:	0002bfa9 	.word	0x0002bfa9
   345e8:	40000400 	.word	0x40000400

000345ec <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   345ec:	b580      	push	{r7, lr}
   345ee:	b084      	sub	sp, #16
   345f0:	af00      	add	r7, sp, #0
   345f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   345f4:	687b      	ldr	r3, [r7, #4]
   345f6:	681b      	ldr	r3, [r3, #0]
   345f8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   345fa:	46c0      	nop			; (mov r8, r8)
   345fc:	68fb      	ldr	r3, [r7, #12]
   345fe:	689b      	ldr	r3, [r3, #8]
   34600:	2202      	movs	r2, #2
   34602:	4013      	ands	r3, r2
   34604:	d1fa      	bne.n	345fc <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   34606:	68fb      	ldr	r3, [r7, #12]
   34608:	681b      	ldr	r3, [r3, #0]
   3460a:	2202      	movs	r2, #2
   3460c:	431a      	orrs	r2, r3
   3460e:	68fb      	ldr	r3, [r7, #12]
   34610:	601a      	str	r2, [r3, #0]
}
   34612:	46c0      	nop			; (mov r8, r8)
   34614:	46bd      	mov	sp, r7
   34616:	b004      	add	sp, #16
   34618:	bd80      	pop	{r7, pc}
	...

0003461c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   3461c:	b580      	push	{r7, lr}
   3461e:	b082      	sub	sp, #8
   34620:	af00      	add	r7, sp, #0
   34622:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   34624:	4b04      	ldr	r3, [pc, #16]	; (34638 <sw_timer_tcc_callback+0x1c>)
   34626:	681b      	ldr	r3, [r3, #0]
   34628:	1c5a      	adds	r2, r3, #1
   3462a:	4b03      	ldr	r3, [pc, #12]	; (34638 <sw_timer_tcc_callback+0x1c>)
   3462c:	601a      	str	r2, [r3, #0]
}
   3462e:	46c0      	nop			; (mov r8, r8)
   34630:	46bd      	mov	sp, r7
   34632:	b002      	add	sp, #8
   34634:	bd80      	pop	{r7, pc}
   34636:	46c0      	nop			; (mov r8, r8)
   34638:	20004570 	.word	0x20004570

0003463c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   3463c:	b580      	push	{r7, lr}
   3463e:	b082      	sub	sp, #8
   34640:	af00      	add	r7, sp, #0
   34642:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   34644:	687b      	ldr	r3, [r7, #4]
   34646:	2264      	movs	r2, #100	; 0x64
   34648:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   3464a:	687b      	ldr	r3, [r7, #4]
   3464c:	2200      	movs	r2, #0
   3464e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   34650:	687b      	ldr	r3, [r7, #4]
   34652:	2200      	movs	r2, #0
   34654:	705a      	strb	r2, [r3, #1]
}
   34656:	46c0      	nop			; (mov r8, r8)
   34658:	46bd      	mov	sp, r7
   3465a:	b002      	add	sp, #8
   3465c:	bd80      	pop	{r7, pc}
	...

00034660 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   34660:	b590      	push	{r4, r7, lr}
   34662:	b0b1      	sub	sp, #196	; 0xc4
   34664:	af00      	add	r7, sp, #0
   34666:	6078      	str	r0, [r7, #4]
   34668:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   3466a:	230c      	movs	r3, #12
   3466c:	18fb      	adds	r3, r7, r3
   3466e:	4a2e      	ldr	r2, [pc, #184]	; (34728 <sw_timer_init+0xc8>)
   34670:	ca13      	ldmia	r2!, {r0, r1, r4}
   34672:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   34674:	683b      	ldr	r3, [r7, #0]
   34676:	885b      	ldrh	r3, [r3, #2]
   34678:	001a      	movs	r2, r3
   3467a:	687b      	ldr	r3, [r7, #4]
   3467c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3467e:	687b      	ldr	r3, [r7, #4]
   34680:	3314      	adds	r3, #20
   34682:	22bc      	movs	r2, #188	; 0xbc
   34684:	18ba      	adds	r2, r7, r2
   34686:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   34688:	683b      	ldr	r3, [r7, #0]
   3468a:	781b      	ldrb	r3, [r3, #0]
   3468c:	001a      	movs	r2, r3
   3468e:	230c      	movs	r3, #12
   34690:	18fb      	adds	r3, r7, r3
   34692:	0092      	lsls	r2, r2, #2
   34694:	58d2      	ldr	r2, [r2, r3]
   34696:	2318      	movs	r3, #24
   34698:	18fb      	adds	r3, r7, r3
   3469a:	0011      	movs	r1, r2
   3469c:	0018      	movs	r0, r3
   3469e:	4b23      	ldr	r3, [pc, #140]	; (3472c <sw_timer_init+0xcc>)
   346a0:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   346a2:	4b23      	ldr	r3, [pc, #140]	; (34730 <sw_timer_init+0xd0>)
   346a4:	4798      	blx	r3
   346a6:	0004      	movs	r4, r0
   346a8:	683b      	ldr	r3, [r7, #0]
   346aa:	885b      	ldrh	r3, [r3, #2]
   346ac:	001a      	movs	r2, r3
   346ae:	4b21      	ldr	r3, [pc, #132]	; (34734 <sw_timer_init+0xd4>)
   346b0:	0011      	movs	r1, r2
   346b2:	22fa      	movs	r2, #250	; 0xfa
   346b4:	0210      	lsls	r0, r2, #8
   346b6:	4798      	blx	r3
   346b8:	0003      	movs	r3, r0
   346ba:	001a      	movs	r2, r3
   346bc:	4b1e      	ldr	r3, [pc, #120]	; (34738 <sw_timer_init+0xd8>)
   346be:	0011      	movs	r1, r2
   346c0:	0020      	movs	r0, r4
   346c2:	4798      	blx	r3
   346c4:	0003      	movs	r3, r0
   346c6:	001a      	movs	r2, r3
   346c8:	2318      	movs	r3, #24
   346ca:	18fb      	adds	r3, r7, r3
   346cc:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   346ce:	2318      	movs	r3, #24
   346d0:	18fb      	adds	r3, r7, r3
   346d2:	2205      	movs	r2, #5
   346d4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   346d6:	683b      	ldr	r3, [r7, #0]
   346d8:	781b      	ldrb	r3, [r3, #0]
   346da:	001a      	movs	r2, r3
   346dc:	230c      	movs	r3, #12
   346de:	18fb      	adds	r3, r7, r3
   346e0:	0092      	lsls	r2, r2, #2
   346e2:	58d1      	ldr	r1, [r2, r3]
   346e4:	2318      	movs	r3, #24
   346e6:	18fa      	adds	r2, r7, r3
   346e8:	23bc      	movs	r3, #188	; 0xbc
   346ea:	18fb      	adds	r3, r7, r3
   346ec:	681b      	ldr	r3, [r3, #0]
   346ee:	0018      	movs	r0, r3
   346f0:	4b12      	ldr	r3, [pc, #72]	; (3473c <sw_timer_init+0xdc>)
   346f2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   346f4:	683b      	ldr	r3, [r7, #0]
   346f6:	785b      	ldrb	r3, [r3, #1]
   346f8:	3308      	adds	r3, #8
   346fa:	b2da      	uxtb	r2, r3
   346fc:	4910      	ldr	r1, [pc, #64]	; (34740 <sw_timer_init+0xe0>)
   346fe:	23bc      	movs	r3, #188	; 0xbc
   34700:	18fb      	adds	r3, r7, r3
   34702:	681b      	ldr	r3, [r3, #0]
   34704:	0018      	movs	r0, r3
   34706:	4b0f      	ldr	r3, [pc, #60]	; (34744 <sw_timer_init+0xe4>)
   34708:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3470a:	683b      	ldr	r3, [r7, #0]
   3470c:	785b      	ldrb	r3, [r3, #1]
   3470e:	3308      	adds	r3, #8
   34710:	b2da      	uxtb	r2, r3
   34712:	23bc      	movs	r3, #188	; 0xbc
   34714:	18fb      	adds	r3, r7, r3
   34716:	681b      	ldr	r3, [r3, #0]
   34718:	0011      	movs	r1, r2
   3471a:	0018      	movs	r0, r3
   3471c:	4b0a      	ldr	r3, [pc, #40]	; (34748 <sw_timer_init+0xe8>)
   3471e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   34720:	46c0      	nop			; (mov r8, r8)
   34722:	46bd      	mov	sp, r7
   34724:	b031      	add	sp, #196	; 0xc4
   34726:	bd90      	pop	{r4, r7, pc}
   34728:	0003ce7c 	.word	0x0003ce7c
   3472c:	0002c541 	.word	0x0002c541
   34730:	000345c9 	.word	0x000345c9
   34734:	00034d09 	.word	0x00034d09
   34738:	00034bf5 	.word	0x00034bf5
   3473c:	0002cb9d 	.word	0x0002cb9d
   34740:	0003461d 	.word	0x0003461d
   34744:	0002cfb5 	.word	0x0002cfb5
   34748:	0002cff5 	.word	0x0002cff5

0003474c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   3474c:	b580      	push	{r7, lr}
   3474e:	b084      	sub	sp, #16
   34750:	af00      	add	r7, sp, #0
   34752:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   34754:	687b      	ldr	r3, [r7, #4]
   34756:	3314      	adds	r3, #20
   34758:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   3475a:	68fb      	ldr	r3, [r7, #12]
   3475c:	0018      	movs	r0, r3
   3475e:	4b03      	ldr	r3, [pc, #12]	; (3476c <sw_timer_enable+0x20>)
   34760:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   34762:	46c0      	nop			; (mov r8, r8)
   34764:	46bd      	mov	sp, r7
   34766:	b004      	add	sp, #16
   34768:	bd80      	pop	{r7, pc}
   3476a:	46c0      	nop			; (mov r8, r8)
   3476c:	000345ed 	.word	0x000345ed

00034770 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   34770:	b580      	push	{r7, lr}
   34772:	b086      	sub	sp, #24
   34774:	af00      	add	r7, sp, #0
   34776:	60f8      	str	r0, [r7, #12]
   34778:	60b9      	str	r1, [r7, #8]
   3477a:	607a      	str	r2, [r7, #4]
   3477c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3477e:	2300      	movs	r3, #0
   34780:	617b      	str	r3, [r7, #20]
   34782:	e032      	b.n	347ea <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   34784:	68f9      	ldr	r1, [r7, #12]
   34786:	697a      	ldr	r2, [r7, #20]
   34788:	0013      	movs	r3, r2
   3478a:	009b      	lsls	r3, r3, #2
   3478c:	189b      	adds	r3, r3, r2
   3478e:	009b      	lsls	r3, r3, #2
   34790:	5c5b      	ldrb	r3, [r3, r1]
   34792:	07db      	lsls	r3, r3, #31
   34794:	0fdb      	lsrs	r3, r3, #31
   34796:	b2db      	uxtb	r3, r3
   34798:	2b00      	cmp	r3, #0
   3479a:	d123      	bne.n	347e4 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   3479c:	697a      	ldr	r2, [r7, #20]
   3479e:	0013      	movs	r3, r2
   347a0:	009b      	lsls	r3, r3, #2
   347a2:	189b      	adds	r3, r3, r2
   347a4:	009b      	lsls	r3, r3, #2
   347a6:	68fa      	ldr	r2, [r7, #12]
   347a8:	18d3      	adds	r3, r2, r3
   347aa:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   347ac:	693b      	ldr	r3, [r7, #16]
   347ae:	68ba      	ldr	r2, [r7, #8]
   347b0:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   347b2:	693b      	ldr	r3, [r7, #16]
   347b4:	781a      	ldrb	r2, [r3, #0]
   347b6:	2102      	movs	r1, #2
   347b8:	438a      	bics	r2, r1
   347ba:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   347bc:	693b      	ldr	r3, [r7, #16]
   347be:	687a      	ldr	r2, [r7, #4]
   347c0:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   347c2:	68fb      	ldr	r3, [r7, #12]
   347c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   347c6:	4b0d      	ldr	r3, [pc, #52]	; (347fc <sw_timer_register_callback+0x8c>)
   347c8:	0011      	movs	r1, r2
   347ca:	6838      	ldr	r0, [r7, #0]
   347cc:	4798      	blx	r3
   347ce:	0003      	movs	r3, r0
   347d0:	001a      	movs	r2, r3
   347d2:	693b      	ldr	r3, [r7, #16]
   347d4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   347d6:	693b      	ldr	r3, [r7, #16]
   347d8:	781a      	ldrb	r2, [r3, #0]
   347da:	2101      	movs	r1, #1
   347dc:	430a      	orrs	r2, r1
   347de:	701a      	strb	r2, [r3, #0]
			return index;
   347e0:	697b      	ldr	r3, [r7, #20]
   347e2:	e007      	b.n	347f4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   347e4:	697b      	ldr	r3, [r7, #20]
   347e6:	3301      	adds	r3, #1
   347e8:	617b      	str	r3, [r7, #20]
   347ea:	697b      	ldr	r3, [r7, #20]
   347ec:	2b00      	cmp	r3, #0
   347ee:	ddc9      	ble.n	34784 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   347f0:	2301      	movs	r3, #1
   347f2:	425b      	negs	r3, r3
}
   347f4:	0018      	movs	r0, r3
   347f6:	46bd      	mov	sp, r7
   347f8:	b006      	add	sp, #24
   347fa:	bd80      	pop	{r7, pc}
   347fc:	00034bf5 	.word	0x00034bf5

00034800 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   34800:	b580      	push	{r7, lr}
   34802:	b086      	sub	sp, #24
   34804:	af00      	add	r7, sp, #0
   34806:	60f8      	str	r0, [r7, #12]
   34808:	60b9      	str	r1, [r7, #8]
   3480a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3480c:	68ba      	ldr	r2, [r7, #8]
   3480e:	0013      	movs	r3, r2
   34810:	009b      	lsls	r3, r3, #2
   34812:	189b      	adds	r3, r3, r2
   34814:	009b      	lsls	r3, r3, #2
   34816:	68fa      	ldr	r2, [r7, #12]
   34818:	18d3      	adds	r3, r2, r3
   3481a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   3481c:	697b      	ldr	r3, [r7, #20]
   3481e:	781a      	ldrb	r2, [r3, #0]
   34820:	2102      	movs	r1, #2
   34822:	430a      	orrs	r2, r1
   34824:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   34826:	68fb      	ldr	r3, [r7, #12]
   34828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3482a:	4b07      	ldr	r3, [pc, #28]	; (34848 <sw_timer_enable_callback+0x48>)
   3482c:	0011      	movs	r1, r2
   3482e:	6878      	ldr	r0, [r7, #4]
   34830:	4798      	blx	r3
   34832:	0003      	movs	r3, r0
   34834:	001a      	movs	r2, r3
   34836:	4b05      	ldr	r3, [pc, #20]	; (3484c <sw_timer_enable_callback+0x4c>)
   34838:	681b      	ldr	r3, [r3, #0]
   3483a:	18d2      	adds	r2, r2, r3
   3483c:	697b      	ldr	r3, [r7, #20]
   3483e:	611a      	str	r2, [r3, #16]
}
   34840:	46c0      	nop			; (mov r8, r8)
   34842:	46bd      	mov	sp, r7
   34844:	b006      	add	sp, #24
   34846:	bd80      	pop	{r7, pc}
   34848:	00034bf5 	.word	0x00034bf5
   3484c:	20004570 	.word	0x20004570

00034850 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   34850:	b580      	push	{r7, lr}
   34852:	b084      	sub	sp, #16
   34854:	af00      	add	r7, sp, #0
   34856:	6078      	str	r0, [r7, #4]
   34858:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3485a:	683a      	ldr	r2, [r7, #0]
   3485c:	0013      	movs	r3, r2
   3485e:	009b      	lsls	r3, r3, #2
   34860:	189b      	adds	r3, r3, r2
   34862:	009b      	lsls	r3, r3, #2
   34864:	687a      	ldr	r2, [r7, #4]
   34866:	18d3      	adds	r3, r2, r3
   34868:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   3486a:	68fb      	ldr	r3, [r7, #12]
   3486c:	781a      	ldrb	r2, [r3, #0]
   3486e:	2102      	movs	r1, #2
   34870:	438a      	bics	r2, r1
   34872:	701a      	strb	r2, [r3, #0]
}
   34874:	46c0      	nop			; (mov r8, r8)
   34876:	46bd      	mov	sp, r7
   34878:	b004      	add	sp, #16
   3487a:	bd80      	pop	{r7, pc}

0003487c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   3487c:	b590      	push	{r4, r7, lr}
   3487e:	b085      	sub	sp, #20
   34880:	af00      	add	r7, sp, #0
   34882:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34884:	2300      	movs	r3, #0
   34886:	60fb      	str	r3, [r7, #12]
   34888:	e053      	b.n	34932 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   3488a:	6879      	ldr	r1, [r7, #4]
   3488c:	68fa      	ldr	r2, [r7, #12]
   3488e:	0013      	movs	r3, r2
   34890:	009b      	lsls	r3, r3, #2
   34892:	189b      	adds	r3, r3, r2
   34894:	009b      	lsls	r3, r3, #2
   34896:	5c5b      	ldrb	r3, [r3, r1]
   34898:	07db      	lsls	r3, r3, #31
   3489a:	0fdb      	lsrs	r3, r3, #31
   3489c:	b2db      	uxtb	r3, r3
   3489e:	2b00      	cmp	r3, #0
   348a0:	d044      	beq.n	3492c <sw_timer_task+0xb0>
   348a2:	6879      	ldr	r1, [r7, #4]
   348a4:	68fa      	ldr	r2, [r7, #12]
   348a6:	0013      	movs	r3, r2
   348a8:	009b      	lsls	r3, r3, #2
   348aa:	189b      	adds	r3, r3, r2
   348ac:	009b      	lsls	r3, r3, #2
   348ae:	5c5b      	ldrb	r3, [r3, r1]
   348b0:	079b      	lsls	r3, r3, #30
   348b2:	0fdb      	lsrs	r3, r3, #31
   348b4:	b2db      	uxtb	r3, r3
   348b6:	2b00      	cmp	r3, #0
   348b8:	d038      	beq.n	3492c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   348ba:	68fa      	ldr	r2, [r7, #12]
   348bc:	0013      	movs	r3, r2
   348be:	009b      	lsls	r3, r3, #2
   348c0:	189b      	adds	r3, r3, r2
   348c2:	009b      	lsls	r3, r3, #2
   348c4:	687a      	ldr	r2, [r7, #4]
   348c6:	18d3      	adds	r3, r2, r3
   348c8:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   348ca:	68bb      	ldr	r3, [r7, #8]
   348cc:	691a      	ldr	r2, [r3, #16]
   348ce:	4b1c      	ldr	r3, [pc, #112]	; (34940 <sw_timer_task+0xc4>)
   348d0:	681b      	ldr	r3, [r3, #0]
   348d2:	1ad3      	subs	r3, r2, r3
   348d4:	d52a      	bpl.n	3492c <sw_timer_task+0xb0>
   348d6:	68bb      	ldr	r3, [r7, #8]
   348d8:	781b      	ldrb	r3, [r3, #0]
   348da:	2204      	movs	r2, #4
   348dc:	4013      	ands	r3, r2
   348de:	b2db      	uxtb	r3, r3
   348e0:	2b00      	cmp	r3, #0
   348e2:	d123      	bne.n	3492c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   348e4:	68bb      	ldr	r3, [r7, #8]
   348e6:	781a      	ldrb	r2, [r3, #0]
   348e8:	2104      	movs	r1, #4
   348ea:	430a      	orrs	r2, r1
   348ec:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   348ee:	68bb      	ldr	r3, [r7, #8]
   348f0:	68db      	ldr	r3, [r3, #12]
   348f2:	2b00      	cmp	r3, #0
   348f4:	d007      	beq.n	34906 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   348f6:	68bb      	ldr	r3, [r7, #8]
   348f8:	68da      	ldr	r2, [r3, #12]
   348fa:	4b11      	ldr	r3, [pc, #68]	; (34940 <sw_timer_task+0xc4>)
   348fc:	681b      	ldr	r3, [r3, #0]
   348fe:	18d2      	adds	r2, r2, r3
   34900:	68bb      	ldr	r3, [r7, #8]
   34902:	611a      	str	r2, [r3, #16]
   34904:	e004      	b.n	34910 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   34906:	68bb      	ldr	r3, [r7, #8]
   34908:	781a      	ldrb	r2, [r3, #0]
   3490a:	2102      	movs	r1, #2
   3490c:	438a      	bics	r2, r1
   3490e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   34910:	68bb      	ldr	r3, [r7, #8]
   34912:	685c      	ldr	r4, [r3, #4]
   34914:	68bb      	ldr	r3, [r7, #8]
   34916:	689a      	ldr	r2, [r3, #8]
   34918:	68bb      	ldr	r3, [r7, #8]
   3491a:	68db      	ldr	r3, [r3, #12]
   3491c:	68f9      	ldr	r1, [r7, #12]
   3491e:	6878      	ldr	r0, [r7, #4]
   34920:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   34922:	68bb      	ldr	r3, [r7, #8]
   34924:	781a      	ldrb	r2, [r3, #0]
   34926:	2104      	movs	r1, #4
   34928:	438a      	bics	r2, r1
   3492a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3492c:	68fb      	ldr	r3, [r7, #12]
   3492e:	3301      	adds	r3, #1
   34930:	60fb      	str	r3, [r7, #12]
   34932:	68fb      	ldr	r3, [r7, #12]
   34934:	2b00      	cmp	r3, #0
   34936:	dda8      	ble.n	3488a <sw_timer_task+0xe>
			}
		}
	}
}
   34938:	46c0      	nop			; (mov r8, r8)
   3493a:	46bd      	mov	sp, r7
   3493c:	b005      	add	sp, #20
   3493e:	bd90      	pop	{r4, r7, pc}
   34940:	20004570 	.word	0x20004570

00034944 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   34944:	b580      	push	{r7, lr}
   34946:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   34948:	4b06      	ldr	r3, [pc, #24]	; (34964 <main+0x20>)
   3494a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   3494c:	4b06      	ldr	r3, [pc, #24]	; (34968 <main+0x24>)
   3494e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   34950:	2001      	movs	r0, #1
   34952:	4b06      	ldr	r3, [pc, #24]	; (3496c <main+0x28>)
   34954:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   34956:	4b06      	ldr	r3, [pc, #24]	; (34970 <main+0x2c>)
   34958:	4798      	blx	r3

    return 0;  // Will not get here
   3495a:	2300      	movs	r3, #0
}
   3495c:	0018      	movs	r0, r3
   3495e:	46bd      	mov	sp, r7
   34960:	bd80      	pop	{r7, pc}
   34962:	46c0      	nop			; (mov r8, r8)
   34964:	0002c435 	.word	0x0002c435
   34968:	0001ff55 	.word	0x0001ff55
   3496c:	0001a629 	.word	0x0001a629
   34970:	0001e5ad 	.word	0x0001e5ad

00034974 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   34974:	b580      	push	{r7, lr}
   34976:	b082      	sub	sp, #8
   34978:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   3497a:	4b22      	ldr	r3, [pc, #136]	; (34a04 <vApplicationDaemonTaskStartupHook+0x90>)
   3497c:	0018      	movs	r0, r3
   3497e:	4b22      	ldr	r3, [pc, #136]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   34980:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   34982:	4b22      	ldr	r3, [pc, #136]	; (34a0c <vApplicationDaemonTaskStartupHook+0x98>)
   34984:	0018      	movs	r0, r3
   34986:	4b20      	ldr	r3, [pc, #128]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   34988:	4798      	blx	r3
	
    if (I2cInitializeDriver() != STATUS_OK) {
   3498a:	4b21      	ldr	r3, [pc, #132]	; (34a10 <vApplicationDaemonTaskStartupHook+0x9c>)
   3498c:	4798      	blx	r3
   3498e:	1e03      	subs	r3, r0, #0
   34990:	d004      	beq.n	3499c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   34992:	4b20      	ldr	r3, [pc, #128]	; (34a14 <vApplicationDaemonTaskStartupHook+0xa0>)
   34994:	0018      	movs	r0, r3
   34996:	4b1c      	ldr	r3, [pc, #112]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   34998:	4798      	blx	r3
   3499a:	e003      	b.n	349a4 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   3499c:	4b1e      	ldr	r3, [pc, #120]	; (34a18 <vApplicationDaemonTaskStartupHook+0xa4>)
   3499e:	0018      	movs	r0, r3
   349a0:	4b19      	ldr	r3, [pc, #100]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   349a2:	4798      	blx	r3
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
    }*/
  
    uint8_t whoamI = 0;
   349a4:	1dfb      	adds	r3, r7, #7
   349a6:	2200      	movs	r2, #0
   349a8:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   349aa:	4b1c      	ldr	r3, [pc, #112]	; (34a1c <vApplicationDaemonTaskStartupHook+0xa8>)
   349ac:	4798      	blx	r3
   349ae:	0002      	movs	r2, r0
   349b0:	1dfb      	adds	r3, r7, #7
   349b2:	0019      	movs	r1, r3
   349b4:	0010      	movs	r0, r2
   349b6:	4b1a      	ldr	r3, [pc, #104]	; (34a20 <vApplicationDaemonTaskStartupHook+0xac>)
   349b8:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   349ba:	1dfb      	adds	r3, r7, #7
   349bc:	781b      	ldrb	r3, [r3, #0]
   349be:	2b6c      	cmp	r3, #108	; 0x6c
   349c0:	d004      	beq.n	349cc <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   349c2:	4b18      	ldr	r3, [pc, #96]	; (34a24 <vApplicationDaemonTaskStartupHook+0xb0>)
   349c4:	0018      	movs	r0, r3
   349c6:	4b10      	ldr	r3, [pc, #64]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   349c8:	4798      	blx	r3
   349ca:	e010      	b.n	349ee <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   349cc:	4b16      	ldr	r3, [pc, #88]	; (34a28 <vApplicationDaemonTaskStartupHook+0xb4>)
   349ce:	0018      	movs	r0, r3
   349d0:	4b0d      	ldr	r3, [pc, #52]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   349d2:	4798      	blx	r3
        if (InitImu() == 0) {
   349d4:	4b15      	ldr	r3, [pc, #84]	; (34a2c <vApplicationDaemonTaskStartupHook+0xb8>)
   349d6:	4798      	blx	r3
   349d8:	1e03      	subs	r3, r0, #0
   349da:	d104      	bne.n	349e6 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   349dc:	4b14      	ldr	r3, [pc, #80]	; (34a30 <vApplicationDaemonTaskStartupHook+0xbc>)
   349de:	0018      	movs	r0, r3
   349e0:	4b09      	ldr	r3, [pc, #36]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   349e2:	4798      	blx	r3
   349e4:	e003      	b.n	349ee <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   349e6:	4b13      	ldr	r3, [pc, #76]	; (34a34 <vApplicationDaemonTaskStartupHook+0xc0>)
   349e8:	0018      	movs	r0, r3
   349ea:	4b07      	ldr	r3, [pc, #28]	; (34a08 <vApplicationDaemonTaskStartupHook+0x94>)
   349ec:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   349ee:	4b12      	ldr	r3, [pc, #72]	; (34a38 <vApplicationDaemonTaskStartupHook+0xc4>)
   349f0:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   349f2:	4b12      	ldr	r3, [pc, #72]	; (34a3c <vApplicationDaemonTaskStartupHook+0xc8>)
   349f4:	681b      	ldr	r3, [r3, #0]
   349f6:	0018      	movs	r0, r3
   349f8:	4b11      	ldr	r3, [pc, #68]	; (34a40 <vApplicationDaemonTaskStartupHook+0xcc>)
   349fa:	4798      	blx	r3
}
   349fc:	46c0      	nop			; (mov r8, r8)
   349fe:	46bd      	mov	sp, r7
   34a00:	b002      	add	sp, #8
   34a02:	bd80      	pop	{r7, pc}
   34a04:	0003ce88 	.word	0x0003ce88
   34a08:	0001ffc5 	.word	0x0001ffc5
   34a0c:	0003ceac 	.word	0x0003ceac
   34a10:	00015881 	.word	0x00015881
   34a14:	0003cec4 	.word	0x0003cec4
   34a18:	0003cee8 	.word	0x0003cee8
   34a1c:	00016ab5 	.word	0x00016ab5
   34a20:	000166b9 	.word	0x000166b9
   34a24:	0003cf04 	.word	0x0003cf04
   34a28:	0003cf18 	.word	0x0003cf18
   34a2c:	00016ac5 	.word	0x00016ac5
   34a30:	0003cf28 	.word	0x0003cf28
   34a34:	0003cf3c 	.word	0x0003cf3c
   34a38:	00034a45 	.word	0x00034a45
   34a3c:	20004578 	.word	0x20004578
   34a40:	0001e451 	.word	0x0001e451

00034a44 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   34a44:	b590      	push	{r4, r7, lr}
   34a46:	b083      	sub	sp, #12
   34a48:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   34a4a:	4b44      	ldr	r3, [pc, #272]	; (34b5c <StartTasks+0x118>)
   34a4c:	4798      	blx	r3
   34a4e:	0003      	movs	r3, r0
   34a50:	4a43      	ldr	r2, [pc, #268]	; (34b60 <StartTasks+0x11c>)
   34a52:	4844      	ldr	r0, [pc, #272]	; (34b64 <StartTasks+0x120>)
   34a54:	2140      	movs	r1, #64	; 0x40
   34a56:	4c44      	ldr	r4, [pc, #272]	; (34b68 <StartTasks+0x124>)
   34a58:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34a5a:	4b42      	ldr	r3, [pc, #264]	; (34b64 <StartTasks+0x120>)
   34a5c:	0018      	movs	r0, r3
   34a5e:	4b43      	ldr	r3, [pc, #268]	; (34b6c <StartTasks+0x128>)
   34a60:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   34a62:	23c8      	movs	r3, #200	; 0xc8
   34a64:	005a      	lsls	r2, r3, #1
   34a66:	4942      	ldr	r1, [pc, #264]	; (34b70 <StartTasks+0x12c>)
   34a68:	4842      	ldr	r0, [pc, #264]	; (34b74 <StartTasks+0x130>)
   34a6a:	4b43      	ldr	r3, [pc, #268]	; (34b78 <StartTasks+0x134>)
   34a6c:	9301      	str	r3, [sp, #4]
   34a6e:	2304      	movs	r3, #4
   34a70:	9300      	str	r3, [sp, #0]
   34a72:	2300      	movs	r3, #0
   34a74:	4c41      	ldr	r4, [pc, #260]	; (34b7c <StartTasks+0x138>)
   34a76:	47a0      	blx	r4
   34a78:	0003      	movs	r3, r0
   34a7a:	2b01      	cmp	r3, #1
   34a7c:	d003      	beq.n	34a86 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   34a7e:	4b40      	ldr	r3, [pc, #256]	; (34b80 <StartTasks+0x13c>)
   34a80:	0018      	movs	r0, r3
   34a82:	4b3a      	ldr	r3, [pc, #232]	; (34b6c <StartTasks+0x128>)
   34a84:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   34a86:	4b35      	ldr	r3, [pc, #212]	; (34b5c <StartTasks+0x118>)
   34a88:	4798      	blx	r3
   34a8a:	0003      	movs	r3, r0
   34a8c:	4a3d      	ldr	r2, [pc, #244]	; (34b84 <StartTasks+0x140>)
   34a8e:	4835      	ldr	r0, [pc, #212]	; (34b64 <StartTasks+0x120>)
   34a90:	2140      	movs	r1, #64	; 0x40
   34a92:	4c35      	ldr	r4, [pc, #212]	; (34b68 <StartTasks+0x124>)
   34a94:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34a96:	4b33      	ldr	r3, [pc, #204]	; (34b64 <StartTasks+0x120>)
   34a98:	0018      	movs	r0, r3
   34a9a:	4b34      	ldr	r3, [pc, #208]	; (34b6c <StartTasks+0x128>)
   34a9c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   34a9e:	23fa      	movs	r3, #250	; 0xfa
   34aa0:	009a      	lsls	r2, r3, #2
   34aa2:	4939      	ldr	r1, [pc, #228]	; (34b88 <StartTasks+0x144>)
   34aa4:	4839      	ldr	r0, [pc, #228]	; (34b8c <StartTasks+0x148>)
   34aa6:	4b3a      	ldr	r3, [pc, #232]	; (34b90 <StartTasks+0x14c>)
   34aa8:	9301      	str	r3, [sp, #4]
   34aaa:	2303      	movs	r3, #3
   34aac:	9300      	str	r3, [sp, #0]
   34aae:	2300      	movs	r3, #0
   34ab0:	4c32      	ldr	r4, [pc, #200]	; (34b7c <StartTasks+0x138>)
   34ab2:	47a0      	blx	r4
   34ab4:	0003      	movs	r3, r0
   34ab6:	2b01      	cmp	r3, #1
   34ab8:	d003      	beq.n	34ac2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   34aba:	4b36      	ldr	r3, [pc, #216]	; (34b94 <StartTasks+0x150>)
   34abc:	0018      	movs	r0, r3
   34abe:	4b2b      	ldr	r3, [pc, #172]	; (34b6c <StartTasks+0x128>)
   34ac0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   34ac2:	4b26      	ldr	r3, [pc, #152]	; (34b5c <StartTasks+0x118>)
   34ac4:	4798      	blx	r3
   34ac6:	0003      	movs	r3, r0
   34ac8:	4a33      	ldr	r2, [pc, #204]	; (34b98 <StartTasks+0x154>)
   34aca:	4826      	ldr	r0, [pc, #152]	; (34b64 <StartTasks+0x120>)
   34acc:	2140      	movs	r1, #64	; 0x40
   34ace:	4c26      	ldr	r4, [pc, #152]	; (34b68 <StartTasks+0x124>)
   34ad0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34ad2:	4b24      	ldr	r3, [pc, #144]	; (34b64 <StartTasks+0x120>)
   34ad4:	0018      	movs	r0, r3
   34ad6:	4b25      	ldr	r3, [pc, #148]	; (34b6c <StartTasks+0x128>)
   34ad8:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   34ada:	23c8      	movs	r3, #200	; 0xc8
   34adc:	005a      	lsls	r2, r3, #1
   34ade:	492f      	ldr	r1, [pc, #188]	; (34b9c <StartTasks+0x158>)
   34ae0:	482f      	ldr	r0, [pc, #188]	; (34ba0 <StartTasks+0x15c>)
   34ae2:	4b30      	ldr	r3, [pc, #192]	; (34ba4 <StartTasks+0x160>)
   34ae4:	9301      	str	r3, [sp, #4]
   34ae6:	2304      	movs	r3, #4
   34ae8:	9300      	str	r3, [sp, #0]
   34aea:	2300      	movs	r3, #0
   34aec:	4c23      	ldr	r4, [pc, #140]	; (34b7c <StartTasks+0x138>)
   34aee:	47a0      	blx	r4
   34af0:	0003      	movs	r3, r0
   34af2:	2b01      	cmp	r3, #1
   34af4:	d003      	beq.n	34afe <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   34af6:	4b2c      	ldr	r3, [pc, #176]	; (34ba8 <StartTasks+0x164>)
   34af8:	0018      	movs	r0, r3
   34afa:	4b1c      	ldr	r3, [pc, #112]	; (34b6c <StartTasks+0x128>)
   34afc:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   34afe:	4b17      	ldr	r3, [pc, #92]	; (34b5c <StartTasks+0x118>)
   34b00:	4798      	blx	r3
   34b02:	0003      	movs	r3, r0
   34b04:	4a29      	ldr	r2, [pc, #164]	; (34bac <StartTasks+0x168>)
   34b06:	4817      	ldr	r0, [pc, #92]	; (34b64 <StartTasks+0x120>)
   34b08:	2140      	movs	r1, #64	; 0x40
   34b0a:	4c17      	ldr	r4, [pc, #92]	; (34b68 <StartTasks+0x124>)
   34b0c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34b0e:	4b15      	ldr	r3, [pc, #84]	; (34b64 <StartTasks+0x120>)
   34b10:	0018      	movs	r0, r3
   34b12:	4b16      	ldr	r3, [pc, #88]	; (34b6c <StartTasks+0x128>)
   34b14:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   34b16:	2380      	movs	r3, #128	; 0x80
   34b18:	005a      	lsls	r2, r3, #1
   34b1a:	4925      	ldr	r1, [pc, #148]	; (34bb0 <StartTasks+0x16c>)
   34b1c:	4825      	ldr	r0, [pc, #148]	; (34bb4 <StartTasks+0x170>)
   34b1e:	4b26      	ldr	r3, [pc, #152]	; (34bb8 <StartTasks+0x174>)
   34b20:	9301      	str	r3, [sp, #4]
   34b22:	2304      	movs	r3, #4
   34b24:	9300      	str	r3, [sp, #0]
   34b26:	2300      	movs	r3, #0
   34b28:	4c14      	ldr	r4, [pc, #80]	; (34b7c <StartTasks+0x138>)
   34b2a:	47a0      	blx	r4
   34b2c:	0003      	movs	r3, r0
   34b2e:	2b01      	cmp	r3, #1
   34b30:	d003      	beq.n	34b3a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   34b32:	4b22      	ldr	r3, [pc, #136]	; (34bbc <StartTasks+0x178>)
   34b34:	0018      	movs	r0, r3
   34b36:	4b0d      	ldr	r3, [pc, #52]	; (34b6c <StartTasks+0x128>)
   34b38:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   34b3a:	4b08      	ldr	r3, [pc, #32]	; (34b5c <StartTasks+0x118>)
   34b3c:	4798      	blx	r3
   34b3e:	0003      	movs	r3, r0
   34b40:	4a1f      	ldr	r2, [pc, #124]	; (34bc0 <StartTasks+0x17c>)
   34b42:	4808      	ldr	r0, [pc, #32]	; (34b64 <StartTasks+0x120>)
   34b44:	2140      	movs	r1, #64	; 0x40
   34b46:	4c08      	ldr	r4, [pc, #32]	; (34b68 <StartTasks+0x124>)
   34b48:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34b4a:	4b06      	ldr	r3, [pc, #24]	; (34b64 <StartTasks+0x120>)
   34b4c:	0018      	movs	r0, r3
   34b4e:	4b07      	ldr	r3, [pc, #28]	; (34b6c <StartTasks+0x128>)
   34b50:	4798      	blx	r3
}
   34b52:	46c0      	nop			; (mov r8, r8)
   34b54:	46bd      	mov	sp, r7
   34b56:	b001      	add	sp, #4
   34b58:	bd90      	pop	{r4, r7, pc}
   34b5a:	46c0      	nop			; (mov r8, r8)
   34b5c:	0001c591 	.word	0x0001c591
   34b60:	0003cf58 	.word	0x0003cf58
   34b64:	20005aa8 	.word	0x20005aa8
   34b68:	00037a79 	.word	0x00037a79
   34b6c:	0001ffc5 	.word	0x0001ffc5
   34b70:	0003cf7c 	.word	0x0003cf7c
   34b74:	00014c3d 	.word	0x00014c3d
   34b78:	20004574 	.word	0x20004574
   34b7c:	0001dfd5 	.word	0x0001dfd5
   34b80:	0003cf88 	.word	0x0003cf88
   34b84:	0003cfb4 	.word	0x0003cfb4
   34b88:	0003cfd4 	.word	0x0003cfd4
   34b8c:	000192a5 	.word	0x000192a5
   34b90:	2000457c 	.word	0x2000457c
   34b94:	0003cfe0 	.word	0x0003cfe0
   34b98:	0003d00c 	.word	0x0003d00c
   34b9c:	0003d02c 	.word	0x0003d02c
   34ba0:	00017c85 	.word	0x00017c85
   34ba4:	20004580 	.word	0x20004580
   34ba8:	0003d034 	.word	0x0003d034
   34bac:	0003d060 	.word	0x0003d060
   34bb0:	0003d084 	.word	0x0003d084
   34bb4:	000153a1 	.word	0x000153a1
   34bb8:	20004584 	.word	0x20004584
   34bbc:	0003d094 	.word	0x0003d094
   34bc0:	0003d0c4 	.word	0x0003d0c4

00034bc4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   34bc4:	b580      	push	{r7, lr}
   34bc6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   34bc8:	4b02      	ldr	r3, [pc, #8]	; (34bd4 <vApplicationMallocFailedHook+0x10>)
   34bca:	0018      	movs	r0, r3
   34bcc:	4b02      	ldr	r3, [pc, #8]	; (34bd8 <vApplicationMallocFailedHook+0x14>)
   34bce:	4798      	blx	r3
    while (1)
   34bd0:	e7fe      	b.n	34bd0 <vApplicationMallocFailedHook+0xc>
   34bd2:	46c0      	nop			; (mov r8, r8)
   34bd4:	0003d0ec 	.word	0x0003d0ec
   34bd8:	0001ffc5 	.word	0x0001ffc5

00034bdc <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   34bdc:	b580      	push	{r7, lr}
   34bde:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   34be0:	4b02      	ldr	r3, [pc, #8]	; (34bec <vApplicationStackOverflowHook+0x10>)
   34be2:	0018      	movs	r0, r3
   34be4:	4b02      	ldr	r3, [pc, #8]	; (34bf0 <vApplicationStackOverflowHook+0x14>)
   34be6:	4798      	blx	r3
    while (1)
   34be8:	e7fe      	b.n	34be8 <vApplicationStackOverflowHook+0xc>
   34bea:	46c0      	nop			; (mov r8, r8)
   34bec:	0003d118 	.word	0x0003d118
   34bf0:	0001ffc5 	.word	0x0001ffc5

00034bf4 <__udivsi3>:
   34bf4:	2200      	movs	r2, #0
   34bf6:	0843      	lsrs	r3, r0, #1
   34bf8:	428b      	cmp	r3, r1
   34bfa:	d374      	bcc.n	34ce6 <__udivsi3+0xf2>
   34bfc:	0903      	lsrs	r3, r0, #4
   34bfe:	428b      	cmp	r3, r1
   34c00:	d35f      	bcc.n	34cc2 <__udivsi3+0xce>
   34c02:	0a03      	lsrs	r3, r0, #8
   34c04:	428b      	cmp	r3, r1
   34c06:	d344      	bcc.n	34c92 <__udivsi3+0x9e>
   34c08:	0b03      	lsrs	r3, r0, #12
   34c0a:	428b      	cmp	r3, r1
   34c0c:	d328      	bcc.n	34c60 <__udivsi3+0x6c>
   34c0e:	0c03      	lsrs	r3, r0, #16
   34c10:	428b      	cmp	r3, r1
   34c12:	d30d      	bcc.n	34c30 <__udivsi3+0x3c>
   34c14:	22ff      	movs	r2, #255	; 0xff
   34c16:	0209      	lsls	r1, r1, #8
   34c18:	ba12      	rev	r2, r2
   34c1a:	0c03      	lsrs	r3, r0, #16
   34c1c:	428b      	cmp	r3, r1
   34c1e:	d302      	bcc.n	34c26 <__udivsi3+0x32>
   34c20:	1212      	asrs	r2, r2, #8
   34c22:	0209      	lsls	r1, r1, #8
   34c24:	d065      	beq.n	34cf2 <__udivsi3+0xfe>
   34c26:	0b03      	lsrs	r3, r0, #12
   34c28:	428b      	cmp	r3, r1
   34c2a:	d319      	bcc.n	34c60 <__udivsi3+0x6c>
   34c2c:	e000      	b.n	34c30 <__udivsi3+0x3c>
   34c2e:	0a09      	lsrs	r1, r1, #8
   34c30:	0bc3      	lsrs	r3, r0, #15
   34c32:	428b      	cmp	r3, r1
   34c34:	d301      	bcc.n	34c3a <__udivsi3+0x46>
   34c36:	03cb      	lsls	r3, r1, #15
   34c38:	1ac0      	subs	r0, r0, r3
   34c3a:	4152      	adcs	r2, r2
   34c3c:	0b83      	lsrs	r3, r0, #14
   34c3e:	428b      	cmp	r3, r1
   34c40:	d301      	bcc.n	34c46 <__udivsi3+0x52>
   34c42:	038b      	lsls	r3, r1, #14
   34c44:	1ac0      	subs	r0, r0, r3
   34c46:	4152      	adcs	r2, r2
   34c48:	0b43      	lsrs	r3, r0, #13
   34c4a:	428b      	cmp	r3, r1
   34c4c:	d301      	bcc.n	34c52 <__udivsi3+0x5e>
   34c4e:	034b      	lsls	r3, r1, #13
   34c50:	1ac0      	subs	r0, r0, r3
   34c52:	4152      	adcs	r2, r2
   34c54:	0b03      	lsrs	r3, r0, #12
   34c56:	428b      	cmp	r3, r1
   34c58:	d301      	bcc.n	34c5e <__udivsi3+0x6a>
   34c5a:	030b      	lsls	r3, r1, #12
   34c5c:	1ac0      	subs	r0, r0, r3
   34c5e:	4152      	adcs	r2, r2
   34c60:	0ac3      	lsrs	r3, r0, #11
   34c62:	428b      	cmp	r3, r1
   34c64:	d301      	bcc.n	34c6a <__udivsi3+0x76>
   34c66:	02cb      	lsls	r3, r1, #11
   34c68:	1ac0      	subs	r0, r0, r3
   34c6a:	4152      	adcs	r2, r2
   34c6c:	0a83      	lsrs	r3, r0, #10
   34c6e:	428b      	cmp	r3, r1
   34c70:	d301      	bcc.n	34c76 <__udivsi3+0x82>
   34c72:	028b      	lsls	r3, r1, #10
   34c74:	1ac0      	subs	r0, r0, r3
   34c76:	4152      	adcs	r2, r2
   34c78:	0a43      	lsrs	r3, r0, #9
   34c7a:	428b      	cmp	r3, r1
   34c7c:	d301      	bcc.n	34c82 <__udivsi3+0x8e>
   34c7e:	024b      	lsls	r3, r1, #9
   34c80:	1ac0      	subs	r0, r0, r3
   34c82:	4152      	adcs	r2, r2
   34c84:	0a03      	lsrs	r3, r0, #8
   34c86:	428b      	cmp	r3, r1
   34c88:	d301      	bcc.n	34c8e <__udivsi3+0x9a>
   34c8a:	020b      	lsls	r3, r1, #8
   34c8c:	1ac0      	subs	r0, r0, r3
   34c8e:	4152      	adcs	r2, r2
   34c90:	d2cd      	bcs.n	34c2e <__udivsi3+0x3a>
   34c92:	09c3      	lsrs	r3, r0, #7
   34c94:	428b      	cmp	r3, r1
   34c96:	d301      	bcc.n	34c9c <__udivsi3+0xa8>
   34c98:	01cb      	lsls	r3, r1, #7
   34c9a:	1ac0      	subs	r0, r0, r3
   34c9c:	4152      	adcs	r2, r2
   34c9e:	0983      	lsrs	r3, r0, #6
   34ca0:	428b      	cmp	r3, r1
   34ca2:	d301      	bcc.n	34ca8 <__udivsi3+0xb4>
   34ca4:	018b      	lsls	r3, r1, #6
   34ca6:	1ac0      	subs	r0, r0, r3
   34ca8:	4152      	adcs	r2, r2
   34caa:	0943      	lsrs	r3, r0, #5
   34cac:	428b      	cmp	r3, r1
   34cae:	d301      	bcc.n	34cb4 <__udivsi3+0xc0>
   34cb0:	014b      	lsls	r3, r1, #5
   34cb2:	1ac0      	subs	r0, r0, r3
   34cb4:	4152      	adcs	r2, r2
   34cb6:	0903      	lsrs	r3, r0, #4
   34cb8:	428b      	cmp	r3, r1
   34cba:	d301      	bcc.n	34cc0 <__udivsi3+0xcc>
   34cbc:	010b      	lsls	r3, r1, #4
   34cbe:	1ac0      	subs	r0, r0, r3
   34cc0:	4152      	adcs	r2, r2
   34cc2:	08c3      	lsrs	r3, r0, #3
   34cc4:	428b      	cmp	r3, r1
   34cc6:	d301      	bcc.n	34ccc <__udivsi3+0xd8>
   34cc8:	00cb      	lsls	r3, r1, #3
   34cca:	1ac0      	subs	r0, r0, r3
   34ccc:	4152      	adcs	r2, r2
   34cce:	0883      	lsrs	r3, r0, #2
   34cd0:	428b      	cmp	r3, r1
   34cd2:	d301      	bcc.n	34cd8 <__udivsi3+0xe4>
   34cd4:	008b      	lsls	r3, r1, #2
   34cd6:	1ac0      	subs	r0, r0, r3
   34cd8:	4152      	adcs	r2, r2
   34cda:	0843      	lsrs	r3, r0, #1
   34cdc:	428b      	cmp	r3, r1
   34cde:	d301      	bcc.n	34ce4 <__udivsi3+0xf0>
   34ce0:	004b      	lsls	r3, r1, #1
   34ce2:	1ac0      	subs	r0, r0, r3
   34ce4:	4152      	adcs	r2, r2
   34ce6:	1a41      	subs	r1, r0, r1
   34ce8:	d200      	bcs.n	34cec <__udivsi3+0xf8>
   34cea:	4601      	mov	r1, r0
   34cec:	4152      	adcs	r2, r2
   34cee:	4610      	mov	r0, r2
   34cf0:	4770      	bx	lr
   34cf2:	e7ff      	b.n	34cf4 <__udivsi3+0x100>
   34cf4:	b501      	push	{r0, lr}
   34cf6:	2000      	movs	r0, #0
   34cf8:	f000 f8f0 	bl	34edc <__aeabi_idiv0>
   34cfc:	bd02      	pop	{r1, pc}
   34cfe:	46c0      	nop			; (mov r8, r8)

00034d00 <__aeabi_uidivmod>:
   34d00:	2900      	cmp	r1, #0
   34d02:	d0f7      	beq.n	34cf4 <__udivsi3+0x100>
   34d04:	e776      	b.n	34bf4 <__udivsi3>
   34d06:	4770      	bx	lr

00034d08 <__divsi3>:
   34d08:	4603      	mov	r3, r0
   34d0a:	430b      	orrs	r3, r1
   34d0c:	d47f      	bmi.n	34e0e <__divsi3+0x106>
   34d0e:	2200      	movs	r2, #0
   34d10:	0843      	lsrs	r3, r0, #1
   34d12:	428b      	cmp	r3, r1
   34d14:	d374      	bcc.n	34e00 <__divsi3+0xf8>
   34d16:	0903      	lsrs	r3, r0, #4
   34d18:	428b      	cmp	r3, r1
   34d1a:	d35f      	bcc.n	34ddc <__divsi3+0xd4>
   34d1c:	0a03      	lsrs	r3, r0, #8
   34d1e:	428b      	cmp	r3, r1
   34d20:	d344      	bcc.n	34dac <__divsi3+0xa4>
   34d22:	0b03      	lsrs	r3, r0, #12
   34d24:	428b      	cmp	r3, r1
   34d26:	d328      	bcc.n	34d7a <__divsi3+0x72>
   34d28:	0c03      	lsrs	r3, r0, #16
   34d2a:	428b      	cmp	r3, r1
   34d2c:	d30d      	bcc.n	34d4a <__divsi3+0x42>
   34d2e:	22ff      	movs	r2, #255	; 0xff
   34d30:	0209      	lsls	r1, r1, #8
   34d32:	ba12      	rev	r2, r2
   34d34:	0c03      	lsrs	r3, r0, #16
   34d36:	428b      	cmp	r3, r1
   34d38:	d302      	bcc.n	34d40 <__divsi3+0x38>
   34d3a:	1212      	asrs	r2, r2, #8
   34d3c:	0209      	lsls	r1, r1, #8
   34d3e:	d065      	beq.n	34e0c <__divsi3+0x104>
   34d40:	0b03      	lsrs	r3, r0, #12
   34d42:	428b      	cmp	r3, r1
   34d44:	d319      	bcc.n	34d7a <__divsi3+0x72>
   34d46:	e000      	b.n	34d4a <__divsi3+0x42>
   34d48:	0a09      	lsrs	r1, r1, #8
   34d4a:	0bc3      	lsrs	r3, r0, #15
   34d4c:	428b      	cmp	r3, r1
   34d4e:	d301      	bcc.n	34d54 <__divsi3+0x4c>
   34d50:	03cb      	lsls	r3, r1, #15
   34d52:	1ac0      	subs	r0, r0, r3
   34d54:	4152      	adcs	r2, r2
   34d56:	0b83      	lsrs	r3, r0, #14
   34d58:	428b      	cmp	r3, r1
   34d5a:	d301      	bcc.n	34d60 <__divsi3+0x58>
   34d5c:	038b      	lsls	r3, r1, #14
   34d5e:	1ac0      	subs	r0, r0, r3
   34d60:	4152      	adcs	r2, r2
   34d62:	0b43      	lsrs	r3, r0, #13
   34d64:	428b      	cmp	r3, r1
   34d66:	d301      	bcc.n	34d6c <__divsi3+0x64>
   34d68:	034b      	lsls	r3, r1, #13
   34d6a:	1ac0      	subs	r0, r0, r3
   34d6c:	4152      	adcs	r2, r2
   34d6e:	0b03      	lsrs	r3, r0, #12
   34d70:	428b      	cmp	r3, r1
   34d72:	d301      	bcc.n	34d78 <__divsi3+0x70>
   34d74:	030b      	lsls	r3, r1, #12
   34d76:	1ac0      	subs	r0, r0, r3
   34d78:	4152      	adcs	r2, r2
   34d7a:	0ac3      	lsrs	r3, r0, #11
   34d7c:	428b      	cmp	r3, r1
   34d7e:	d301      	bcc.n	34d84 <__divsi3+0x7c>
   34d80:	02cb      	lsls	r3, r1, #11
   34d82:	1ac0      	subs	r0, r0, r3
   34d84:	4152      	adcs	r2, r2
   34d86:	0a83      	lsrs	r3, r0, #10
   34d88:	428b      	cmp	r3, r1
   34d8a:	d301      	bcc.n	34d90 <__divsi3+0x88>
   34d8c:	028b      	lsls	r3, r1, #10
   34d8e:	1ac0      	subs	r0, r0, r3
   34d90:	4152      	adcs	r2, r2
   34d92:	0a43      	lsrs	r3, r0, #9
   34d94:	428b      	cmp	r3, r1
   34d96:	d301      	bcc.n	34d9c <__divsi3+0x94>
   34d98:	024b      	lsls	r3, r1, #9
   34d9a:	1ac0      	subs	r0, r0, r3
   34d9c:	4152      	adcs	r2, r2
   34d9e:	0a03      	lsrs	r3, r0, #8
   34da0:	428b      	cmp	r3, r1
   34da2:	d301      	bcc.n	34da8 <__divsi3+0xa0>
   34da4:	020b      	lsls	r3, r1, #8
   34da6:	1ac0      	subs	r0, r0, r3
   34da8:	4152      	adcs	r2, r2
   34daa:	d2cd      	bcs.n	34d48 <__divsi3+0x40>
   34dac:	09c3      	lsrs	r3, r0, #7
   34dae:	428b      	cmp	r3, r1
   34db0:	d301      	bcc.n	34db6 <__divsi3+0xae>
   34db2:	01cb      	lsls	r3, r1, #7
   34db4:	1ac0      	subs	r0, r0, r3
   34db6:	4152      	adcs	r2, r2
   34db8:	0983      	lsrs	r3, r0, #6
   34dba:	428b      	cmp	r3, r1
   34dbc:	d301      	bcc.n	34dc2 <__divsi3+0xba>
   34dbe:	018b      	lsls	r3, r1, #6
   34dc0:	1ac0      	subs	r0, r0, r3
   34dc2:	4152      	adcs	r2, r2
   34dc4:	0943      	lsrs	r3, r0, #5
   34dc6:	428b      	cmp	r3, r1
   34dc8:	d301      	bcc.n	34dce <__divsi3+0xc6>
   34dca:	014b      	lsls	r3, r1, #5
   34dcc:	1ac0      	subs	r0, r0, r3
   34dce:	4152      	adcs	r2, r2
   34dd0:	0903      	lsrs	r3, r0, #4
   34dd2:	428b      	cmp	r3, r1
   34dd4:	d301      	bcc.n	34dda <__divsi3+0xd2>
   34dd6:	010b      	lsls	r3, r1, #4
   34dd8:	1ac0      	subs	r0, r0, r3
   34dda:	4152      	adcs	r2, r2
   34ddc:	08c3      	lsrs	r3, r0, #3
   34dde:	428b      	cmp	r3, r1
   34de0:	d301      	bcc.n	34de6 <__divsi3+0xde>
   34de2:	00cb      	lsls	r3, r1, #3
   34de4:	1ac0      	subs	r0, r0, r3
   34de6:	4152      	adcs	r2, r2
   34de8:	0883      	lsrs	r3, r0, #2
   34dea:	428b      	cmp	r3, r1
   34dec:	d301      	bcc.n	34df2 <__divsi3+0xea>
   34dee:	008b      	lsls	r3, r1, #2
   34df0:	1ac0      	subs	r0, r0, r3
   34df2:	4152      	adcs	r2, r2
   34df4:	0843      	lsrs	r3, r0, #1
   34df6:	428b      	cmp	r3, r1
   34df8:	d301      	bcc.n	34dfe <__divsi3+0xf6>
   34dfa:	004b      	lsls	r3, r1, #1
   34dfc:	1ac0      	subs	r0, r0, r3
   34dfe:	4152      	adcs	r2, r2
   34e00:	1a41      	subs	r1, r0, r1
   34e02:	d200      	bcs.n	34e06 <__divsi3+0xfe>
   34e04:	4601      	mov	r1, r0
   34e06:	4152      	adcs	r2, r2
   34e08:	4610      	mov	r0, r2
   34e0a:	4770      	bx	lr
   34e0c:	e05d      	b.n	34eca <__divsi3+0x1c2>
   34e0e:	0fca      	lsrs	r2, r1, #31
   34e10:	d000      	beq.n	34e14 <__divsi3+0x10c>
   34e12:	4249      	negs	r1, r1
   34e14:	1003      	asrs	r3, r0, #32
   34e16:	d300      	bcc.n	34e1a <__divsi3+0x112>
   34e18:	4240      	negs	r0, r0
   34e1a:	4053      	eors	r3, r2
   34e1c:	2200      	movs	r2, #0
   34e1e:	469c      	mov	ip, r3
   34e20:	0903      	lsrs	r3, r0, #4
   34e22:	428b      	cmp	r3, r1
   34e24:	d32d      	bcc.n	34e82 <__divsi3+0x17a>
   34e26:	0a03      	lsrs	r3, r0, #8
   34e28:	428b      	cmp	r3, r1
   34e2a:	d312      	bcc.n	34e52 <__divsi3+0x14a>
   34e2c:	22fc      	movs	r2, #252	; 0xfc
   34e2e:	0189      	lsls	r1, r1, #6
   34e30:	ba12      	rev	r2, r2
   34e32:	0a03      	lsrs	r3, r0, #8
   34e34:	428b      	cmp	r3, r1
   34e36:	d30c      	bcc.n	34e52 <__divsi3+0x14a>
   34e38:	0189      	lsls	r1, r1, #6
   34e3a:	1192      	asrs	r2, r2, #6
   34e3c:	428b      	cmp	r3, r1
   34e3e:	d308      	bcc.n	34e52 <__divsi3+0x14a>
   34e40:	0189      	lsls	r1, r1, #6
   34e42:	1192      	asrs	r2, r2, #6
   34e44:	428b      	cmp	r3, r1
   34e46:	d304      	bcc.n	34e52 <__divsi3+0x14a>
   34e48:	0189      	lsls	r1, r1, #6
   34e4a:	d03a      	beq.n	34ec2 <__divsi3+0x1ba>
   34e4c:	1192      	asrs	r2, r2, #6
   34e4e:	e000      	b.n	34e52 <__divsi3+0x14a>
   34e50:	0989      	lsrs	r1, r1, #6
   34e52:	09c3      	lsrs	r3, r0, #7
   34e54:	428b      	cmp	r3, r1
   34e56:	d301      	bcc.n	34e5c <__divsi3+0x154>
   34e58:	01cb      	lsls	r3, r1, #7
   34e5a:	1ac0      	subs	r0, r0, r3
   34e5c:	4152      	adcs	r2, r2
   34e5e:	0983      	lsrs	r3, r0, #6
   34e60:	428b      	cmp	r3, r1
   34e62:	d301      	bcc.n	34e68 <__divsi3+0x160>
   34e64:	018b      	lsls	r3, r1, #6
   34e66:	1ac0      	subs	r0, r0, r3
   34e68:	4152      	adcs	r2, r2
   34e6a:	0943      	lsrs	r3, r0, #5
   34e6c:	428b      	cmp	r3, r1
   34e6e:	d301      	bcc.n	34e74 <__divsi3+0x16c>
   34e70:	014b      	lsls	r3, r1, #5
   34e72:	1ac0      	subs	r0, r0, r3
   34e74:	4152      	adcs	r2, r2
   34e76:	0903      	lsrs	r3, r0, #4
   34e78:	428b      	cmp	r3, r1
   34e7a:	d301      	bcc.n	34e80 <__divsi3+0x178>
   34e7c:	010b      	lsls	r3, r1, #4
   34e7e:	1ac0      	subs	r0, r0, r3
   34e80:	4152      	adcs	r2, r2
   34e82:	08c3      	lsrs	r3, r0, #3
   34e84:	428b      	cmp	r3, r1
   34e86:	d301      	bcc.n	34e8c <__divsi3+0x184>
   34e88:	00cb      	lsls	r3, r1, #3
   34e8a:	1ac0      	subs	r0, r0, r3
   34e8c:	4152      	adcs	r2, r2
   34e8e:	0883      	lsrs	r3, r0, #2
   34e90:	428b      	cmp	r3, r1
   34e92:	d301      	bcc.n	34e98 <__divsi3+0x190>
   34e94:	008b      	lsls	r3, r1, #2
   34e96:	1ac0      	subs	r0, r0, r3
   34e98:	4152      	adcs	r2, r2
   34e9a:	d2d9      	bcs.n	34e50 <__divsi3+0x148>
   34e9c:	0843      	lsrs	r3, r0, #1
   34e9e:	428b      	cmp	r3, r1
   34ea0:	d301      	bcc.n	34ea6 <__divsi3+0x19e>
   34ea2:	004b      	lsls	r3, r1, #1
   34ea4:	1ac0      	subs	r0, r0, r3
   34ea6:	4152      	adcs	r2, r2
   34ea8:	1a41      	subs	r1, r0, r1
   34eaa:	d200      	bcs.n	34eae <__divsi3+0x1a6>
   34eac:	4601      	mov	r1, r0
   34eae:	4663      	mov	r3, ip
   34eb0:	4152      	adcs	r2, r2
   34eb2:	105b      	asrs	r3, r3, #1
   34eb4:	4610      	mov	r0, r2
   34eb6:	d301      	bcc.n	34ebc <__divsi3+0x1b4>
   34eb8:	4240      	negs	r0, r0
   34eba:	2b00      	cmp	r3, #0
   34ebc:	d500      	bpl.n	34ec0 <__divsi3+0x1b8>
   34ebe:	4249      	negs	r1, r1
   34ec0:	4770      	bx	lr
   34ec2:	4663      	mov	r3, ip
   34ec4:	105b      	asrs	r3, r3, #1
   34ec6:	d300      	bcc.n	34eca <__divsi3+0x1c2>
   34ec8:	4240      	negs	r0, r0
   34eca:	b501      	push	{r0, lr}
   34ecc:	2000      	movs	r0, #0
   34ece:	f000 f805 	bl	34edc <__aeabi_idiv0>
   34ed2:	bd02      	pop	{r1, pc}

00034ed4 <__aeabi_idivmod>:
   34ed4:	2900      	cmp	r1, #0
   34ed6:	d0f8      	beq.n	34eca <__divsi3+0x1c2>
   34ed8:	e716      	b.n	34d08 <__divsi3>
   34eda:	4770      	bx	lr

00034edc <__aeabi_idiv0>:
   34edc:	4770      	bx	lr
   34ede:	46c0      	nop			; (mov r8, r8)

00034ee0 <__aeabi_cfrcmple>:
   34ee0:	4684      	mov	ip, r0
   34ee2:	1c08      	adds	r0, r1, #0
   34ee4:	4661      	mov	r1, ip
   34ee6:	e7ff      	b.n	34ee8 <__aeabi_cfcmpeq>

00034ee8 <__aeabi_cfcmpeq>:
   34ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   34eea:	f000 fa63 	bl	353b4 <__lesf2>
   34eee:	2800      	cmp	r0, #0
   34ef0:	d401      	bmi.n	34ef6 <__aeabi_cfcmpeq+0xe>
   34ef2:	2100      	movs	r1, #0
   34ef4:	42c8      	cmn	r0, r1
   34ef6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00034ef8 <__aeabi_fcmpeq>:
   34ef8:	b510      	push	{r4, lr}
   34efa:	f000 f9f5 	bl	352e8 <__eqsf2>
   34efe:	4240      	negs	r0, r0
   34f00:	3001      	adds	r0, #1
   34f02:	bd10      	pop	{r4, pc}

00034f04 <__aeabi_fcmplt>:
   34f04:	b510      	push	{r4, lr}
   34f06:	f000 fa55 	bl	353b4 <__lesf2>
   34f0a:	2800      	cmp	r0, #0
   34f0c:	db01      	blt.n	34f12 <__aeabi_fcmplt+0xe>
   34f0e:	2000      	movs	r0, #0
   34f10:	bd10      	pop	{r4, pc}
   34f12:	2001      	movs	r0, #1
   34f14:	bd10      	pop	{r4, pc}
   34f16:	46c0      	nop			; (mov r8, r8)

00034f18 <__aeabi_fcmple>:
   34f18:	b510      	push	{r4, lr}
   34f1a:	f000 fa4b 	bl	353b4 <__lesf2>
   34f1e:	2800      	cmp	r0, #0
   34f20:	dd01      	ble.n	34f26 <__aeabi_fcmple+0xe>
   34f22:	2000      	movs	r0, #0
   34f24:	bd10      	pop	{r4, pc}
   34f26:	2001      	movs	r0, #1
   34f28:	bd10      	pop	{r4, pc}
   34f2a:	46c0      	nop			; (mov r8, r8)

00034f2c <__aeabi_fcmpgt>:
   34f2c:	b510      	push	{r4, lr}
   34f2e:	f000 fa01 	bl	35334 <__gesf2>
   34f32:	2800      	cmp	r0, #0
   34f34:	dc01      	bgt.n	34f3a <__aeabi_fcmpgt+0xe>
   34f36:	2000      	movs	r0, #0
   34f38:	bd10      	pop	{r4, pc}
   34f3a:	2001      	movs	r0, #1
   34f3c:	bd10      	pop	{r4, pc}
   34f3e:	46c0      	nop			; (mov r8, r8)

00034f40 <__aeabi_fcmpge>:
   34f40:	b510      	push	{r4, lr}
   34f42:	f000 f9f7 	bl	35334 <__gesf2>
   34f46:	2800      	cmp	r0, #0
   34f48:	da01      	bge.n	34f4e <__aeabi_fcmpge+0xe>
   34f4a:	2000      	movs	r0, #0
   34f4c:	bd10      	pop	{r4, pc}
   34f4e:	2001      	movs	r0, #1
   34f50:	bd10      	pop	{r4, pc}
   34f52:	46c0      	nop			; (mov r8, r8)

00034f54 <__aeabi_ldivmod>:
   34f54:	2b00      	cmp	r3, #0
   34f56:	d115      	bne.n	34f84 <__aeabi_ldivmod+0x30>
   34f58:	2a00      	cmp	r2, #0
   34f5a:	d113      	bne.n	34f84 <__aeabi_ldivmod+0x30>
   34f5c:	2900      	cmp	r1, #0
   34f5e:	db06      	blt.n	34f6e <__aeabi_ldivmod+0x1a>
   34f60:	dc01      	bgt.n	34f66 <__aeabi_ldivmod+0x12>
   34f62:	2800      	cmp	r0, #0
   34f64:	d006      	beq.n	34f74 <__aeabi_ldivmod+0x20>
   34f66:	2000      	movs	r0, #0
   34f68:	43c0      	mvns	r0, r0
   34f6a:	0841      	lsrs	r1, r0, #1
   34f6c:	e002      	b.n	34f74 <__aeabi_ldivmod+0x20>
   34f6e:	2180      	movs	r1, #128	; 0x80
   34f70:	0609      	lsls	r1, r1, #24
   34f72:	2000      	movs	r0, #0
   34f74:	b407      	push	{r0, r1, r2}
   34f76:	4802      	ldr	r0, [pc, #8]	; (34f80 <__aeabi_ldivmod+0x2c>)
   34f78:	a101      	add	r1, pc, #4	; (adr r1, 34f80 <__aeabi_ldivmod+0x2c>)
   34f7a:	1840      	adds	r0, r0, r1
   34f7c:	9002      	str	r0, [sp, #8]
   34f7e:	bd03      	pop	{r0, r1, pc}
   34f80:	ffffff5d 	.word	0xffffff5d
   34f84:	b403      	push	{r0, r1}
   34f86:	4668      	mov	r0, sp
   34f88:	b501      	push	{r0, lr}
   34f8a:	9802      	ldr	r0, [sp, #8]
   34f8c:	f000 f848 	bl	35020 <__gnu_ldivmod_helper>
   34f90:	9b01      	ldr	r3, [sp, #4]
   34f92:	469e      	mov	lr, r3
   34f94:	b002      	add	sp, #8
   34f96:	bc0c      	pop	{r2, r3}
   34f98:	4770      	bx	lr
   34f9a:	46c0      	nop			; (mov r8, r8)

00034f9c <__aeabi_lmul>:
   34f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34f9e:	46ce      	mov	lr, r9
   34fa0:	4647      	mov	r7, r8
   34fa2:	0415      	lsls	r5, r2, #16
   34fa4:	0c2d      	lsrs	r5, r5, #16
   34fa6:	002e      	movs	r6, r5
   34fa8:	b580      	push	{r7, lr}
   34faa:	0407      	lsls	r7, r0, #16
   34fac:	0c14      	lsrs	r4, r2, #16
   34fae:	0c3f      	lsrs	r7, r7, #16
   34fb0:	4699      	mov	r9, r3
   34fb2:	0c03      	lsrs	r3, r0, #16
   34fb4:	437e      	muls	r6, r7
   34fb6:	435d      	muls	r5, r3
   34fb8:	4367      	muls	r7, r4
   34fba:	4363      	muls	r3, r4
   34fbc:	197f      	adds	r7, r7, r5
   34fbe:	0c34      	lsrs	r4, r6, #16
   34fc0:	19e4      	adds	r4, r4, r7
   34fc2:	469c      	mov	ip, r3
   34fc4:	42a5      	cmp	r5, r4
   34fc6:	d903      	bls.n	34fd0 <__aeabi_lmul+0x34>
   34fc8:	2380      	movs	r3, #128	; 0x80
   34fca:	025b      	lsls	r3, r3, #9
   34fcc:	4698      	mov	r8, r3
   34fce:	44c4      	add	ip, r8
   34fd0:	464b      	mov	r3, r9
   34fd2:	4351      	muls	r1, r2
   34fd4:	4343      	muls	r3, r0
   34fd6:	0436      	lsls	r6, r6, #16
   34fd8:	0c36      	lsrs	r6, r6, #16
   34fda:	0c25      	lsrs	r5, r4, #16
   34fdc:	0424      	lsls	r4, r4, #16
   34fde:	4465      	add	r5, ip
   34fe0:	19a4      	adds	r4, r4, r6
   34fe2:	1859      	adds	r1, r3, r1
   34fe4:	1949      	adds	r1, r1, r5
   34fe6:	0020      	movs	r0, r4
   34fe8:	bc0c      	pop	{r2, r3}
   34fea:	4690      	mov	r8, r2
   34fec:	4699      	mov	r9, r3
   34fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034ff0 <__aeabi_f2uiz>:
   34ff0:	219e      	movs	r1, #158	; 0x9e
   34ff2:	b510      	push	{r4, lr}
   34ff4:	05c9      	lsls	r1, r1, #23
   34ff6:	1c04      	adds	r4, r0, #0
   34ff8:	f7ff ffa2 	bl	34f40 <__aeabi_fcmpge>
   34ffc:	2800      	cmp	r0, #0
   34ffe:	d103      	bne.n	35008 <__aeabi_f2uiz+0x18>
   35000:	1c20      	adds	r0, r4, #0
   35002:	f000 fcd5 	bl	359b0 <__aeabi_f2iz>
   35006:	bd10      	pop	{r4, pc}
   35008:	219e      	movs	r1, #158	; 0x9e
   3500a:	1c20      	adds	r0, r4, #0
   3500c:	05c9      	lsls	r1, r1, #23
   3500e:	f000 fb33 	bl	35678 <__aeabi_fsub>
   35012:	f000 fccd 	bl	359b0 <__aeabi_f2iz>
   35016:	2380      	movs	r3, #128	; 0x80
   35018:	061b      	lsls	r3, r3, #24
   3501a:	469c      	mov	ip, r3
   3501c:	4460      	add	r0, ip
   3501e:	e7f2      	b.n	35006 <__aeabi_f2uiz+0x16>

00035020 <__gnu_ldivmod_helper>:
   35020:	b5f0      	push	{r4, r5, r6, r7, lr}
   35022:	b083      	sub	sp, #12
   35024:	0016      	movs	r6, r2
   35026:	001f      	movs	r7, r3
   35028:	9000      	str	r0, [sp, #0]
   3502a:	9101      	str	r1, [sp, #4]
   3502c:	f002 fab6 	bl	3759c <__divdi3>
   35030:	0004      	movs	r4, r0
   35032:	000d      	movs	r5, r1
   35034:	0002      	movs	r2, r0
   35036:	000b      	movs	r3, r1
   35038:	0030      	movs	r0, r6
   3503a:	0039      	movs	r1, r7
   3503c:	f7ff ffae 	bl	34f9c <__aeabi_lmul>
   35040:	9a00      	ldr	r2, [sp, #0]
   35042:	9b01      	ldr	r3, [sp, #4]
   35044:	1a12      	subs	r2, r2, r0
   35046:	418b      	sbcs	r3, r1
   35048:	9908      	ldr	r1, [sp, #32]
   3504a:	0020      	movs	r0, r4
   3504c:	600a      	str	r2, [r1, #0]
   3504e:	604b      	str	r3, [r1, #4]
   35050:	0029      	movs	r1, r5
   35052:	b003      	add	sp, #12
   35054:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35056:	46c0      	nop			; (mov r8, r8)

00035058 <__aeabi_fdiv>:
   35058:	b5f0      	push	{r4, r5, r6, r7, lr}
   3505a:	4657      	mov	r7, sl
   3505c:	464e      	mov	r6, r9
   3505e:	46de      	mov	lr, fp
   35060:	4645      	mov	r5, r8
   35062:	b5e0      	push	{r5, r6, r7, lr}
   35064:	0244      	lsls	r4, r0, #9
   35066:	0043      	lsls	r3, r0, #1
   35068:	0fc6      	lsrs	r6, r0, #31
   3506a:	b083      	sub	sp, #12
   3506c:	1c0f      	adds	r7, r1, #0
   3506e:	0a64      	lsrs	r4, r4, #9
   35070:	0e1b      	lsrs	r3, r3, #24
   35072:	46b2      	mov	sl, r6
   35074:	d053      	beq.n	3511e <__aeabi_fdiv+0xc6>
   35076:	2bff      	cmp	r3, #255	; 0xff
   35078:	d027      	beq.n	350ca <__aeabi_fdiv+0x72>
   3507a:	2280      	movs	r2, #128	; 0x80
   3507c:	00e4      	lsls	r4, r4, #3
   3507e:	04d2      	lsls	r2, r2, #19
   35080:	4314      	orrs	r4, r2
   35082:	227f      	movs	r2, #127	; 0x7f
   35084:	4252      	negs	r2, r2
   35086:	4690      	mov	r8, r2
   35088:	4498      	add	r8, r3
   3508a:	2300      	movs	r3, #0
   3508c:	4699      	mov	r9, r3
   3508e:	469b      	mov	fp, r3
   35090:	027d      	lsls	r5, r7, #9
   35092:	0078      	lsls	r0, r7, #1
   35094:	0ffb      	lsrs	r3, r7, #31
   35096:	0a6d      	lsrs	r5, r5, #9
   35098:	0e00      	lsrs	r0, r0, #24
   3509a:	9300      	str	r3, [sp, #0]
   3509c:	d024      	beq.n	350e8 <__aeabi_fdiv+0x90>
   3509e:	28ff      	cmp	r0, #255	; 0xff
   350a0:	d046      	beq.n	35130 <__aeabi_fdiv+0xd8>
   350a2:	2380      	movs	r3, #128	; 0x80
   350a4:	2100      	movs	r1, #0
   350a6:	00ed      	lsls	r5, r5, #3
   350a8:	04db      	lsls	r3, r3, #19
   350aa:	431d      	orrs	r5, r3
   350ac:	387f      	subs	r0, #127	; 0x7f
   350ae:	4647      	mov	r7, r8
   350b0:	1a38      	subs	r0, r7, r0
   350b2:	464f      	mov	r7, r9
   350b4:	430f      	orrs	r7, r1
   350b6:	00bf      	lsls	r7, r7, #2
   350b8:	46b9      	mov	r9, r7
   350ba:	0033      	movs	r3, r6
   350bc:	9a00      	ldr	r2, [sp, #0]
   350be:	4f87      	ldr	r7, [pc, #540]	; (352dc <__aeabi_fdiv+0x284>)
   350c0:	4053      	eors	r3, r2
   350c2:	464a      	mov	r2, r9
   350c4:	58ba      	ldr	r2, [r7, r2]
   350c6:	9301      	str	r3, [sp, #4]
   350c8:	4697      	mov	pc, r2
   350ca:	2c00      	cmp	r4, #0
   350cc:	d14e      	bne.n	3516c <__aeabi_fdiv+0x114>
   350ce:	2308      	movs	r3, #8
   350d0:	4699      	mov	r9, r3
   350d2:	33f7      	adds	r3, #247	; 0xf7
   350d4:	4698      	mov	r8, r3
   350d6:	3bfd      	subs	r3, #253	; 0xfd
   350d8:	469b      	mov	fp, r3
   350da:	027d      	lsls	r5, r7, #9
   350dc:	0078      	lsls	r0, r7, #1
   350de:	0ffb      	lsrs	r3, r7, #31
   350e0:	0a6d      	lsrs	r5, r5, #9
   350e2:	0e00      	lsrs	r0, r0, #24
   350e4:	9300      	str	r3, [sp, #0]
   350e6:	d1da      	bne.n	3509e <__aeabi_fdiv+0x46>
   350e8:	2d00      	cmp	r5, #0
   350ea:	d126      	bne.n	3513a <__aeabi_fdiv+0xe2>
   350ec:	2000      	movs	r0, #0
   350ee:	2101      	movs	r1, #1
   350f0:	0033      	movs	r3, r6
   350f2:	9a00      	ldr	r2, [sp, #0]
   350f4:	4f7a      	ldr	r7, [pc, #488]	; (352e0 <__aeabi_fdiv+0x288>)
   350f6:	4053      	eors	r3, r2
   350f8:	4642      	mov	r2, r8
   350fa:	1a10      	subs	r0, r2, r0
   350fc:	464a      	mov	r2, r9
   350fe:	430a      	orrs	r2, r1
   35100:	0092      	lsls	r2, r2, #2
   35102:	58ba      	ldr	r2, [r7, r2]
   35104:	001d      	movs	r5, r3
   35106:	4697      	mov	pc, r2
   35108:	9b00      	ldr	r3, [sp, #0]
   3510a:	002c      	movs	r4, r5
   3510c:	469a      	mov	sl, r3
   3510e:	468b      	mov	fp, r1
   35110:	465b      	mov	r3, fp
   35112:	2b02      	cmp	r3, #2
   35114:	d131      	bne.n	3517a <__aeabi_fdiv+0x122>
   35116:	4653      	mov	r3, sl
   35118:	21ff      	movs	r1, #255	; 0xff
   3511a:	2400      	movs	r4, #0
   3511c:	e038      	b.n	35190 <__aeabi_fdiv+0x138>
   3511e:	2c00      	cmp	r4, #0
   35120:	d117      	bne.n	35152 <__aeabi_fdiv+0xfa>
   35122:	2304      	movs	r3, #4
   35124:	4699      	mov	r9, r3
   35126:	2300      	movs	r3, #0
   35128:	4698      	mov	r8, r3
   3512a:	3301      	adds	r3, #1
   3512c:	469b      	mov	fp, r3
   3512e:	e7af      	b.n	35090 <__aeabi_fdiv+0x38>
   35130:	20ff      	movs	r0, #255	; 0xff
   35132:	2d00      	cmp	r5, #0
   35134:	d10b      	bne.n	3514e <__aeabi_fdiv+0xf6>
   35136:	2102      	movs	r1, #2
   35138:	e7da      	b.n	350f0 <__aeabi_fdiv+0x98>
   3513a:	0028      	movs	r0, r5
   3513c:	f002 fa10 	bl	37560 <__clzsi2>
   35140:	1f43      	subs	r3, r0, #5
   35142:	409d      	lsls	r5, r3
   35144:	2376      	movs	r3, #118	; 0x76
   35146:	425b      	negs	r3, r3
   35148:	1a18      	subs	r0, r3, r0
   3514a:	2100      	movs	r1, #0
   3514c:	e7af      	b.n	350ae <__aeabi_fdiv+0x56>
   3514e:	2103      	movs	r1, #3
   35150:	e7ad      	b.n	350ae <__aeabi_fdiv+0x56>
   35152:	0020      	movs	r0, r4
   35154:	f002 fa04 	bl	37560 <__clzsi2>
   35158:	1f43      	subs	r3, r0, #5
   3515a:	409c      	lsls	r4, r3
   3515c:	2376      	movs	r3, #118	; 0x76
   3515e:	425b      	negs	r3, r3
   35160:	1a1b      	subs	r3, r3, r0
   35162:	4698      	mov	r8, r3
   35164:	2300      	movs	r3, #0
   35166:	4699      	mov	r9, r3
   35168:	469b      	mov	fp, r3
   3516a:	e791      	b.n	35090 <__aeabi_fdiv+0x38>
   3516c:	230c      	movs	r3, #12
   3516e:	4699      	mov	r9, r3
   35170:	33f3      	adds	r3, #243	; 0xf3
   35172:	4698      	mov	r8, r3
   35174:	3bfc      	subs	r3, #252	; 0xfc
   35176:	469b      	mov	fp, r3
   35178:	e78a      	b.n	35090 <__aeabi_fdiv+0x38>
   3517a:	2b03      	cmp	r3, #3
   3517c:	d100      	bne.n	35180 <__aeabi_fdiv+0x128>
   3517e:	e0a5      	b.n	352cc <__aeabi_fdiv+0x274>
   35180:	4655      	mov	r5, sl
   35182:	2b01      	cmp	r3, #1
   35184:	d000      	beq.n	35188 <__aeabi_fdiv+0x130>
   35186:	e081      	b.n	3528c <__aeabi_fdiv+0x234>
   35188:	2301      	movs	r3, #1
   3518a:	2100      	movs	r1, #0
   3518c:	2400      	movs	r4, #0
   3518e:	402b      	ands	r3, r5
   35190:	0264      	lsls	r4, r4, #9
   35192:	05c9      	lsls	r1, r1, #23
   35194:	0a60      	lsrs	r0, r4, #9
   35196:	07db      	lsls	r3, r3, #31
   35198:	4308      	orrs	r0, r1
   3519a:	4318      	orrs	r0, r3
   3519c:	b003      	add	sp, #12
   3519e:	bc3c      	pop	{r2, r3, r4, r5}
   351a0:	4690      	mov	r8, r2
   351a2:	4699      	mov	r9, r3
   351a4:	46a2      	mov	sl, r4
   351a6:	46ab      	mov	fp, r5
   351a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   351aa:	2480      	movs	r4, #128	; 0x80
   351ac:	2300      	movs	r3, #0
   351ae:	03e4      	lsls	r4, r4, #15
   351b0:	21ff      	movs	r1, #255	; 0xff
   351b2:	e7ed      	b.n	35190 <__aeabi_fdiv+0x138>
   351b4:	21ff      	movs	r1, #255	; 0xff
   351b6:	2400      	movs	r4, #0
   351b8:	e7ea      	b.n	35190 <__aeabi_fdiv+0x138>
   351ba:	2301      	movs	r3, #1
   351bc:	1a59      	subs	r1, r3, r1
   351be:	291b      	cmp	r1, #27
   351c0:	dd66      	ble.n	35290 <__aeabi_fdiv+0x238>
   351c2:	9a01      	ldr	r2, [sp, #4]
   351c4:	4013      	ands	r3, r2
   351c6:	2100      	movs	r1, #0
   351c8:	2400      	movs	r4, #0
   351ca:	e7e1      	b.n	35190 <__aeabi_fdiv+0x138>
   351cc:	2380      	movs	r3, #128	; 0x80
   351ce:	03db      	lsls	r3, r3, #15
   351d0:	421c      	tst	r4, r3
   351d2:	d038      	beq.n	35246 <__aeabi_fdiv+0x1ee>
   351d4:	421d      	tst	r5, r3
   351d6:	d051      	beq.n	3527c <__aeabi_fdiv+0x224>
   351d8:	431c      	orrs	r4, r3
   351da:	0264      	lsls	r4, r4, #9
   351dc:	0a64      	lsrs	r4, r4, #9
   351de:	0033      	movs	r3, r6
   351e0:	21ff      	movs	r1, #255	; 0xff
   351e2:	e7d5      	b.n	35190 <__aeabi_fdiv+0x138>
   351e4:	0163      	lsls	r3, r4, #5
   351e6:	016c      	lsls	r4, r5, #5
   351e8:	42a3      	cmp	r3, r4
   351ea:	d23b      	bcs.n	35264 <__aeabi_fdiv+0x20c>
   351ec:	261b      	movs	r6, #27
   351ee:	2100      	movs	r1, #0
   351f0:	3801      	subs	r0, #1
   351f2:	2501      	movs	r5, #1
   351f4:	001f      	movs	r7, r3
   351f6:	0049      	lsls	r1, r1, #1
   351f8:	005b      	lsls	r3, r3, #1
   351fa:	2f00      	cmp	r7, #0
   351fc:	db01      	blt.n	35202 <__aeabi_fdiv+0x1aa>
   351fe:	429c      	cmp	r4, r3
   35200:	d801      	bhi.n	35206 <__aeabi_fdiv+0x1ae>
   35202:	1b1b      	subs	r3, r3, r4
   35204:	4329      	orrs	r1, r5
   35206:	3e01      	subs	r6, #1
   35208:	2e00      	cmp	r6, #0
   3520a:	d1f3      	bne.n	351f4 <__aeabi_fdiv+0x19c>
   3520c:	001c      	movs	r4, r3
   3520e:	1e63      	subs	r3, r4, #1
   35210:	419c      	sbcs	r4, r3
   35212:	430c      	orrs	r4, r1
   35214:	0001      	movs	r1, r0
   35216:	317f      	adds	r1, #127	; 0x7f
   35218:	2900      	cmp	r1, #0
   3521a:	ddce      	ble.n	351ba <__aeabi_fdiv+0x162>
   3521c:	0763      	lsls	r3, r4, #29
   3521e:	d004      	beq.n	3522a <__aeabi_fdiv+0x1d2>
   35220:	230f      	movs	r3, #15
   35222:	4023      	ands	r3, r4
   35224:	2b04      	cmp	r3, #4
   35226:	d000      	beq.n	3522a <__aeabi_fdiv+0x1d2>
   35228:	3404      	adds	r4, #4
   3522a:	0123      	lsls	r3, r4, #4
   3522c:	d503      	bpl.n	35236 <__aeabi_fdiv+0x1de>
   3522e:	0001      	movs	r1, r0
   35230:	4b2c      	ldr	r3, [pc, #176]	; (352e4 <__aeabi_fdiv+0x28c>)
   35232:	3180      	adds	r1, #128	; 0x80
   35234:	401c      	ands	r4, r3
   35236:	29fe      	cmp	r1, #254	; 0xfe
   35238:	dd0d      	ble.n	35256 <__aeabi_fdiv+0x1fe>
   3523a:	2301      	movs	r3, #1
   3523c:	9a01      	ldr	r2, [sp, #4]
   3523e:	21ff      	movs	r1, #255	; 0xff
   35240:	4013      	ands	r3, r2
   35242:	2400      	movs	r4, #0
   35244:	e7a4      	b.n	35190 <__aeabi_fdiv+0x138>
   35246:	2380      	movs	r3, #128	; 0x80
   35248:	03db      	lsls	r3, r3, #15
   3524a:	431c      	orrs	r4, r3
   3524c:	0264      	lsls	r4, r4, #9
   3524e:	0a64      	lsrs	r4, r4, #9
   35250:	0033      	movs	r3, r6
   35252:	21ff      	movs	r1, #255	; 0xff
   35254:	e79c      	b.n	35190 <__aeabi_fdiv+0x138>
   35256:	2301      	movs	r3, #1
   35258:	9a01      	ldr	r2, [sp, #4]
   3525a:	01a4      	lsls	r4, r4, #6
   3525c:	0a64      	lsrs	r4, r4, #9
   3525e:	b2c9      	uxtb	r1, r1
   35260:	4013      	ands	r3, r2
   35262:	e795      	b.n	35190 <__aeabi_fdiv+0x138>
   35264:	1b1b      	subs	r3, r3, r4
   35266:	261a      	movs	r6, #26
   35268:	2101      	movs	r1, #1
   3526a:	e7c2      	b.n	351f2 <__aeabi_fdiv+0x19a>
   3526c:	9b00      	ldr	r3, [sp, #0]
   3526e:	468b      	mov	fp, r1
   35270:	469a      	mov	sl, r3
   35272:	2400      	movs	r4, #0
   35274:	e74c      	b.n	35110 <__aeabi_fdiv+0xb8>
   35276:	0263      	lsls	r3, r4, #9
   35278:	d5e5      	bpl.n	35246 <__aeabi_fdiv+0x1ee>
   3527a:	2500      	movs	r5, #0
   3527c:	2480      	movs	r4, #128	; 0x80
   3527e:	03e4      	lsls	r4, r4, #15
   35280:	432c      	orrs	r4, r5
   35282:	0264      	lsls	r4, r4, #9
   35284:	0a64      	lsrs	r4, r4, #9
   35286:	9b00      	ldr	r3, [sp, #0]
   35288:	21ff      	movs	r1, #255	; 0xff
   3528a:	e781      	b.n	35190 <__aeabi_fdiv+0x138>
   3528c:	9501      	str	r5, [sp, #4]
   3528e:	e7c1      	b.n	35214 <__aeabi_fdiv+0x1bc>
   35290:	0023      	movs	r3, r4
   35292:	2020      	movs	r0, #32
   35294:	40cb      	lsrs	r3, r1
   35296:	1a41      	subs	r1, r0, r1
   35298:	408c      	lsls	r4, r1
   3529a:	1e61      	subs	r1, r4, #1
   3529c:	418c      	sbcs	r4, r1
   3529e:	431c      	orrs	r4, r3
   352a0:	0763      	lsls	r3, r4, #29
   352a2:	d004      	beq.n	352ae <__aeabi_fdiv+0x256>
   352a4:	230f      	movs	r3, #15
   352a6:	4023      	ands	r3, r4
   352a8:	2b04      	cmp	r3, #4
   352aa:	d000      	beq.n	352ae <__aeabi_fdiv+0x256>
   352ac:	3404      	adds	r4, #4
   352ae:	0163      	lsls	r3, r4, #5
   352b0:	d505      	bpl.n	352be <__aeabi_fdiv+0x266>
   352b2:	2301      	movs	r3, #1
   352b4:	9a01      	ldr	r2, [sp, #4]
   352b6:	2101      	movs	r1, #1
   352b8:	4013      	ands	r3, r2
   352ba:	2400      	movs	r4, #0
   352bc:	e768      	b.n	35190 <__aeabi_fdiv+0x138>
   352be:	2301      	movs	r3, #1
   352c0:	9a01      	ldr	r2, [sp, #4]
   352c2:	01a4      	lsls	r4, r4, #6
   352c4:	0a64      	lsrs	r4, r4, #9
   352c6:	4013      	ands	r3, r2
   352c8:	2100      	movs	r1, #0
   352ca:	e761      	b.n	35190 <__aeabi_fdiv+0x138>
   352cc:	2380      	movs	r3, #128	; 0x80
   352ce:	03db      	lsls	r3, r3, #15
   352d0:	431c      	orrs	r4, r3
   352d2:	0264      	lsls	r4, r4, #9
   352d4:	0a64      	lsrs	r4, r4, #9
   352d6:	4653      	mov	r3, sl
   352d8:	21ff      	movs	r1, #255	; 0xff
   352da:	e759      	b.n	35190 <__aeabi_fdiv+0x138>
   352dc:	0003d140 	.word	0x0003d140
   352e0:	0003d180 	.word	0x0003d180
   352e4:	f7ffffff 	.word	0xf7ffffff

000352e8 <__eqsf2>:
   352e8:	b570      	push	{r4, r5, r6, lr}
   352ea:	0042      	lsls	r2, r0, #1
   352ec:	0245      	lsls	r5, r0, #9
   352ee:	024e      	lsls	r6, r1, #9
   352f0:	004c      	lsls	r4, r1, #1
   352f2:	0fc3      	lsrs	r3, r0, #31
   352f4:	0a6d      	lsrs	r5, r5, #9
   352f6:	0e12      	lsrs	r2, r2, #24
   352f8:	0a76      	lsrs	r6, r6, #9
   352fa:	0e24      	lsrs	r4, r4, #24
   352fc:	0fc9      	lsrs	r1, r1, #31
   352fe:	2001      	movs	r0, #1
   35300:	2aff      	cmp	r2, #255	; 0xff
   35302:	d006      	beq.n	35312 <__eqsf2+0x2a>
   35304:	2cff      	cmp	r4, #255	; 0xff
   35306:	d003      	beq.n	35310 <__eqsf2+0x28>
   35308:	42a2      	cmp	r2, r4
   3530a:	d101      	bne.n	35310 <__eqsf2+0x28>
   3530c:	42b5      	cmp	r5, r6
   3530e:	d006      	beq.n	3531e <__eqsf2+0x36>
   35310:	bd70      	pop	{r4, r5, r6, pc}
   35312:	2d00      	cmp	r5, #0
   35314:	d1fc      	bne.n	35310 <__eqsf2+0x28>
   35316:	2cff      	cmp	r4, #255	; 0xff
   35318:	d1fa      	bne.n	35310 <__eqsf2+0x28>
   3531a:	2e00      	cmp	r6, #0
   3531c:	d1f8      	bne.n	35310 <__eqsf2+0x28>
   3531e:	428b      	cmp	r3, r1
   35320:	d006      	beq.n	35330 <__eqsf2+0x48>
   35322:	2001      	movs	r0, #1
   35324:	2a00      	cmp	r2, #0
   35326:	d1f3      	bne.n	35310 <__eqsf2+0x28>
   35328:	0028      	movs	r0, r5
   3532a:	1e45      	subs	r5, r0, #1
   3532c:	41a8      	sbcs	r0, r5
   3532e:	e7ef      	b.n	35310 <__eqsf2+0x28>
   35330:	2000      	movs	r0, #0
   35332:	e7ed      	b.n	35310 <__eqsf2+0x28>

00035334 <__gesf2>:
   35334:	b5f0      	push	{r4, r5, r6, r7, lr}
   35336:	0042      	lsls	r2, r0, #1
   35338:	0245      	lsls	r5, r0, #9
   3533a:	024c      	lsls	r4, r1, #9
   3533c:	0fc3      	lsrs	r3, r0, #31
   3533e:	0048      	lsls	r0, r1, #1
   35340:	0a6d      	lsrs	r5, r5, #9
   35342:	0e12      	lsrs	r2, r2, #24
   35344:	0a64      	lsrs	r4, r4, #9
   35346:	0e00      	lsrs	r0, r0, #24
   35348:	0fc9      	lsrs	r1, r1, #31
   3534a:	2aff      	cmp	r2, #255	; 0xff
   3534c:	d01e      	beq.n	3538c <__gesf2+0x58>
   3534e:	28ff      	cmp	r0, #255	; 0xff
   35350:	d021      	beq.n	35396 <__gesf2+0x62>
   35352:	2a00      	cmp	r2, #0
   35354:	d10a      	bne.n	3536c <__gesf2+0x38>
   35356:	426e      	negs	r6, r5
   35358:	416e      	adcs	r6, r5
   3535a:	b2f6      	uxtb	r6, r6
   3535c:	2800      	cmp	r0, #0
   3535e:	d10f      	bne.n	35380 <__gesf2+0x4c>
   35360:	2c00      	cmp	r4, #0
   35362:	d10d      	bne.n	35380 <__gesf2+0x4c>
   35364:	2000      	movs	r0, #0
   35366:	2d00      	cmp	r5, #0
   35368:	d009      	beq.n	3537e <__gesf2+0x4a>
   3536a:	e005      	b.n	35378 <__gesf2+0x44>
   3536c:	2800      	cmp	r0, #0
   3536e:	d101      	bne.n	35374 <__gesf2+0x40>
   35370:	2c00      	cmp	r4, #0
   35372:	d001      	beq.n	35378 <__gesf2+0x44>
   35374:	428b      	cmp	r3, r1
   35376:	d011      	beq.n	3539c <__gesf2+0x68>
   35378:	2101      	movs	r1, #1
   3537a:	4258      	negs	r0, r3
   3537c:	4308      	orrs	r0, r1
   3537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35380:	2e00      	cmp	r6, #0
   35382:	d0f7      	beq.n	35374 <__gesf2+0x40>
   35384:	2001      	movs	r0, #1
   35386:	3901      	subs	r1, #1
   35388:	4308      	orrs	r0, r1
   3538a:	e7f8      	b.n	3537e <__gesf2+0x4a>
   3538c:	2d00      	cmp	r5, #0
   3538e:	d0de      	beq.n	3534e <__gesf2+0x1a>
   35390:	2002      	movs	r0, #2
   35392:	4240      	negs	r0, r0
   35394:	e7f3      	b.n	3537e <__gesf2+0x4a>
   35396:	2c00      	cmp	r4, #0
   35398:	d0db      	beq.n	35352 <__gesf2+0x1e>
   3539a:	e7f9      	b.n	35390 <__gesf2+0x5c>
   3539c:	4282      	cmp	r2, r0
   3539e:	dceb      	bgt.n	35378 <__gesf2+0x44>
   353a0:	db04      	blt.n	353ac <__gesf2+0x78>
   353a2:	42a5      	cmp	r5, r4
   353a4:	d8e8      	bhi.n	35378 <__gesf2+0x44>
   353a6:	2000      	movs	r0, #0
   353a8:	42a5      	cmp	r5, r4
   353aa:	d2e8      	bcs.n	3537e <__gesf2+0x4a>
   353ac:	2101      	movs	r1, #1
   353ae:	1e58      	subs	r0, r3, #1
   353b0:	4308      	orrs	r0, r1
   353b2:	e7e4      	b.n	3537e <__gesf2+0x4a>

000353b4 <__lesf2>:
   353b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   353b6:	0042      	lsls	r2, r0, #1
   353b8:	024d      	lsls	r5, r1, #9
   353ba:	004c      	lsls	r4, r1, #1
   353bc:	0246      	lsls	r6, r0, #9
   353be:	0a76      	lsrs	r6, r6, #9
   353c0:	0e12      	lsrs	r2, r2, #24
   353c2:	0fc3      	lsrs	r3, r0, #31
   353c4:	0a6d      	lsrs	r5, r5, #9
   353c6:	0e24      	lsrs	r4, r4, #24
   353c8:	0fc9      	lsrs	r1, r1, #31
   353ca:	2aff      	cmp	r2, #255	; 0xff
   353cc:	d016      	beq.n	353fc <__lesf2+0x48>
   353ce:	2cff      	cmp	r4, #255	; 0xff
   353d0:	d018      	beq.n	35404 <__lesf2+0x50>
   353d2:	2a00      	cmp	r2, #0
   353d4:	d10a      	bne.n	353ec <__lesf2+0x38>
   353d6:	4270      	negs	r0, r6
   353d8:	4170      	adcs	r0, r6
   353da:	b2c0      	uxtb	r0, r0
   353dc:	2c00      	cmp	r4, #0
   353de:	d015      	beq.n	3540c <__lesf2+0x58>
   353e0:	2800      	cmp	r0, #0
   353e2:	d005      	beq.n	353f0 <__lesf2+0x3c>
   353e4:	2001      	movs	r0, #1
   353e6:	3901      	subs	r1, #1
   353e8:	4308      	orrs	r0, r1
   353ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   353ec:	2c00      	cmp	r4, #0
   353ee:	d013      	beq.n	35418 <__lesf2+0x64>
   353f0:	4299      	cmp	r1, r3
   353f2:	d014      	beq.n	3541e <__lesf2+0x6a>
   353f4:	2001      	movs	r0, #1
   353f6:	425b      	negs	r3, r3
   353f8:	4318      	orrs	r0, r3
   353fa:	e7f6      	b.n	353ea <__lesf2+0x36>
   353fc:	2002      	movs	r0, #2
   353fe:	2e00      	cmp	r6, #0
   35400:	d1f3      	bne.n	353ea <__lesf2+0x36>
   35402:	e7e4      	b.n	353ce <__lesf2+0x1a>
   35404:	2002      	movs	r0, #2
   35406:	2d00      	cmp	r5, #0
   35408:	d1ef      	bne.n	353ea <__lesf2+0x36>
   3540a:	e7e2      	b.n	353d2 <__lesf2+0x1e>
   3540c:	2d00      	cmp	r5, #0
   3540e:	d1e7      	bne.n	353e0 <__lesf2+0x2c>
   35410:	2000      	movs	r0, #0
   35412:	2e00      	cmp	r6, #0
   35414:	d0e9      	beq.n	353ea <__lesf2+0x36>
   35416:	e7ed      	b.n	353f4 <__lesf2+0x40>
   35418:	2d00      	cmp	r5, #0
   3541a:	d1e9      	bne.n	353f0 <__lesf2+0x3c>
   3541c:	e7ea      	b.n	353f4 <__lesf2+0x40>
   3541e:	42a2      	cmp	r2, r4
   35420:	dc06      	bgt.n	35430 <__lesf2+0x7c>
   35422:	dbdf      	blt.n	353e4 <__lesf2+0x30>
   35424:	42ae      	cmp	r6, r5
   35426:	d803      	bhi.n	35430 <__lesf2+0x7c>
   35428:	2000      	movs	r0, #0
   3542a:	42ae      	cmp	r6, r5
   3542c:	d3da      	bcc.n	353e4 <__lesf2+0x30>
   3542e:	e7dc      	b.n	353ea <__lesf2+0x36>
   35430:	2001      	movs	r0, #1
   35432:	4249      	negs	r1, r1
   35434:	4308      	orrs	r0, r1
   35436:	e7d8      	b.n	353ea <__lesf2+0x36>

00035438 <__aeabi_fmul>:
   35438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3543a:	4657      	mov	r7, sl
   3543c:	464e      	mov	r6, r9
   3543e:	4645      	mov	r5, r8
   35440:	46de      	mov	lr, fp
   35442:	b5e0      	push	{r5, r6, r7, lr}
   35444:	0247      	lsls	r7, r0, #9
   35446:	0046      	lsls	r6, r0, #1
   35448:	4688      	mov	r8, r1
   3544a:	0a7f      	lsrs	r7, r7, #9
   3544c:	0e36      	lsrs	r6, r6, #24
   3544e:	0fc4      	lsrs	r4, r0, #31
   35450:	2e00      	cmp	r6, #0
   35452:	d047      	beq.n	354e4 <__aeabi_fmul+0xac>
   35454:	2eff      	cmp	r6, #255	; 0xff
   35456:	d024      	beq.n	354a2 <__aeabi_fmul+0x6a>
   35458:	00fb      	lsls	r3, r7, #3
   3545a:	2780      	movs	r7, #128	; 0x80
   3545c:	04ff      	lsls	r7, r7, #19
   3545e:	431f      	orrs	r7, r3
   35460:	2300      	movs	r3, #0
   35462:	4699      	mov	r9, r3
   35464:	469a      	mov	sl, r3
   35466:	3e7f      	subs	r6, #127	; 0x7f
   35468:	4643      	mov	r3, r8
   3546a:	025d      	lsls	r5, r3, #9
   3546c:	0058      	lsls	r0, r3, #1
   3546e:	0fdb      	lsrs	r3, r3, #31
   35470:	0a6d      	lsrs	r5, r5, #9
   35472:	0e00      	lsrs	r0, r0, #24
   35474:	4698      	mov	r8, r3
   35476:	d043      	beq.n	35500 <__aeabi_fmul+0xc8>
   35478:	28ff      	cmp	r0, #255	; 0xff
   3547a:	d03b      	beq.n	354f4 <__aeabi_fmul+0xbc>
   3547c:	00eb      	lsls	r3, r5, #3
   3547e:	2580      	movs	r5, #128	; 0x80
   35480:	2200      	movs	r2, #0
   35482:	04ed      	lsls	r5, r5, #19
   35484:	431d      	orrs	r5, r3
   35486:	387f      	subs	r0, #127	; 0x7f
   35488:	1836      	adds	r6, r6, r0
   3548a:	1c73      	adds	r3, r6, #1
   3548c:	4641      	mov	r1, r8
   3548e:	469b      	mov	fp, r3
   35490:	464b      	mov	r3, r9
   35492:	4061      	eors	r1, r4
   35494:	4313      	orrs	r3, r2
   35496:	2b0f      	cmp	r3, #15
   35498:	d864      	bhi.n	35564 <__aeabi_fmul+0x12c>
   3549a:	4875      	ldr	r0, [pc, #468]	; (35670 <__aeabi_fmul+0x238>)
   3549c:	009b      	lsls	r3, r3, #2
   3549e:	58c3      	ldr	r3, [r0, r3]
   354a0:	469f      	mov	pc, r3
   354a2:	2f00      	cmp	r7, #0
   354a4:	d142      	bne.n	3552c <__aeabi_fmul+0xf4>
   354a6:	2308      	movs	r3, #8
   354a8:	4699      	mov	r9, r3
   354aa:	3b06      	subs	r3, #6
   354ac:	26ff      	movs	r6, #255	; 0xff
   354ae:	469a      	mov	sl, r3
   354b0:	e7da      	b.n	35468 <__aeabi_fmul+0x30>
   354b2:	4641      	mov	r1, r8
   354b4:	2a02      	cmp	r2, #2
   354b6:	d028      	beq.n	3550a <__aeabi_fmul+0xd2>
   354b8:	2a03      	cmp	r2, #3
   354ba:	d100      	bne.n	354be <__aeabi_fmul+0x86>
   354bc:	e0ce      	b.n	3565c <__aeabi_fmul+0x224>
   354be:	2a01      	cmp	r2, #1
   354c0:	d000      	beq.n	354c4 <__aeabi_fmul+0x8c>
   354c2:	e0ac      	b.n	3561e <__aeabi_fmul+0x1e6>
   354c4:	4011      	ands	r1, r2
   354c6:	2000      	movs	r0, #0
   354c8:	2200      	movs	r2, #0
   354ca:	b2cc      	uxtb	r4, r1
   354cc:	0240      	lsls	r0, r0, #9
   354ce:	05d2      	lsls	r2, r2, #23
   354d0:	0a40      	lsrs	r0, r0, #9
   354d2:	07e4      	lsls	r4, r4, #31
   354d4:	4310      	orrs	r0, r2
   354d6:	4320      	orrs	r0, r4
   354d8:	bc3c      	pop	{r2, r3, r4, r5}
   354da:	4690      	mov	r8, r2
   354dc:	4699      	mov	r9, r3
   354de:	46a2      	mov	sl, r4
   354e0:	46ab      	mov	fp, r5
   354e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   354e4:	2f00      	cmp	r7, #0
   354e6:	d115      	bne.n	35514 <__aeabi_fmul+0xdc>
   354e8:	2304      	movs	r3, #4
   354ea:	4699      	mov	r9, r3
   354ec:	3b03      	subs	r3, #3
   354ee:	2600      	movs	r6, #0
   354f0:	469a      	mov	sl, r3
   354f2:	e7b9      	b.n	35468 <__aeabi_fmul+0x30>
   354f4:	20ff      	movs	r0, #255	; 0xff
   354f6:	2202      	movs	r2, #2
   354f8:	2d00      	cmp	r5, #0
   354fa:	d0c5      	beq.n	35488 <__aeabi_fmul+0x50>
   354fc:	2203      	movs	r2, #3
   354fe:	e7c3      	b.n	35488 <__aeabi_fmul+0x50>
   35500:	2d00      	cmp	r5, #0
   35502:	d119      	bne.n	35538 <__aeabi_fmul+0x100>
   35504:	2000      	movs	r0, #0
   35506:	2201      	movs	r2, #1
   35508:	e7be      	b.n	35488 <__aeabi_fmul+0x50>
   3550a:	2401      	movs	r4, #1
   3550c:	22ff      	movs	r2, #255	; 0xff
   3550e:	400c      	ands	r4, r1
   35510:	2000      	movs	r0, #0
   35512:	e7db      	b.n	354cc <__aeabi_fmul+0x94>
   35514:	0038      	movs	r0, r7
   35516:	f002 f823 	bl	37560 <__clzsi2>
   3551a:	2676      	movs	r6, #118	; 0x76
   3551c:	1f43      	subs	r3, r0, #5
   3551e:	409f      	lsls	r7, r3
   35520:	2300      	movs	r3, #0
   35522:	4276      	negs	r6, r6
   35524:	1a36      	subs	r6, r6, r0
   35526:	4699      	mov	r9, r3
   35528:	469a      	mov	sl, r3
   3552a:	e79d      	b.n	35468 <__aeabi_fmul+0x30>
   3552c:	230c      	movs	r3, #12
   3552e:	4699      	mov	r9, r3
   35530:	3b09      	subs	r3, #9
   35532:	26ff      	movs	r6, #255	; 0xff
   35534:	469a      	mov	sl, r3
   35536:	e797      	b.n	35468 <__aeabi_fmul+0x30>
   35538:	0028      	movs	r0, r5
   3553a:	f002 f811 	bl	37560 <__clzsi2>
   3553e:	1f43      	subs	r3, r0, #5
   35540:	409d      	lsls	r5, r3
   35542:	2376      	movs	r3, #118	; 0x76
   35544:	425b      	negs	r3, r3
   35546:	1a18      	subs	r0, r3, r0
   35548:	2200      	movs	r2, #0
   3554a:	e79d      	b.n	35488 <__aeabi_fmul+0x50>
   3554c:	2080      	movs	r0, #128	; 0x80
   3554e:	2400      	movs	r4, #0
   35550:	03c0      	lsls	r0, r0, #15
   35552:	22ff      	movs	r2, #255	; 0xff
   35554:	e7ba      	b.n	354cc <__aeabi_fmul+0x94>
   35556:	003d      	movs	r5, r7
   35558:	4652      	mov	r2, sl
   3555a:	e7ab      	b.n	354b4 <__aeabi_fmul+0x7c>
   3555c:	003d      	movs	r5, r7
   3555e:	0021      	movs	r1, r4
   35560:	4652      	mov	r2, sl
   35562:	e7a7      	b.n	354b4 <__aeabi_fmul+0x7c>
   35564:	0c3b      	lsrs	r3, r7, #16
   35566:	469c      	mov	ip, r3
   35568:	042a      	lsls	r2, r5, #16
   3556a:	0c12      	lsrs	r2, r2, #16
   3556c:	0c2b      	lsrs	r3, r5, #16
   3556e:	0014      	movs	r4, r2
   35570:	4660      	mov	r0, ip
   35572:	4665      	mov	r5, ip
   35574:	043f      	lsls	r7, r7, #16
   35576:	0c3f      	lsrs	r7, r7, #16
   35578:	437c      	muls	r4, r7
   3557a:	4342      	muls	r2, r0
   3557c:	435d      	muls	r5, r3
   3557e:	437b      	muls	r3, r7
   35580:	0c27      	lsrs	r7, r4, #16
   35582:	189b      	adds	r3, r3, r2
   35584:	18ff      	adds	r7, r7, r3
   35586:	42ba      	cmp	r2, r7
   35588:	d903      	bls.n	35592 <__aeabi_fmul+0x15a>
   3558a:	2380      	movs	r3, #128	; 0x80
   3558c:	025b      	lsls	r3, r3, #9
   3558e:	469c      	mov	ip, r3
   35590:	4465      	add	r5, ip
   35592:	0424      	lsls	r4, r4, #16
   35594:	043a      	lsls	r2, r7, #16
   35596:	0c24      	lsrs	r4, r4, #16
   35598:	1912      	adds	r2, r2, r4
   3559a:	0193      	lsls	r3, r2, #6
   3559c:	1e5c      	subs	r4, r3, #1
   3559e:	41a3      	sbcs	r3, r4
   355a0:	0c3f      	lsrs	r7, r7, #16
   355a2:	0e92      	lsrs	r2, r2, #26
   355a4:	197d      	adds	r5, r7, r5
   355a6:	431a      	orrs	r2, r3
   355a8:	01ad      	lsls	r5, r5, #6
   355aa:	4315      	orrs	r5, r2
   355ac:	012b      	lsls	r3, r5, #4
   355ae:	d504      	bpl.n	355ba <__aeabi_fmul+0x182>
   355b0:	2301      	movs	r3, #1
   355b2:	465e      	mov	r6, fp
   355b4:	086a      	lsrs	r2, r5, #1
   355b6:	401d      	ands	r5, r3
   355b8:	4315      	orrs	r5, r2
   355ba:	0032      	movs	r2, r6
   355bc:	327f      	adds	r2, #127	; 0x7f
   355be:	2a00      	cmp	r2, #0
   355c0:	dd25      	ble.n	3560e <__aeabi_fmul+0x1d6>
   355c2:	076b      	lsls	r3, r5, #29
   355c4:	d004      	beq.n	355d0 <__aeabi_fmul+0x198>
   355c6:	230f      	movs	r3, #15
   355c8:	402b      	ands	r3, r5
   355ca:	2b04      	cmp	r3, #4
   355cc:	d000      	beq.n	355d0 <__aeabi_fmul+0x198>
   355ce:	3504      	adds	r5, #4
   355d0:	012b      	lsls	r3, r5, #4
   355d2:	d503      	bpl.n	355dc <__aeabi_fmul+0x1a4>
   355d4:	0032      	movs	r2, r6
   355d6:	4b27      	ldr	r3, [pc, #156]	; (35674 <__aeabi_fmul+0x23c>)
   355d8:	3280      	adds	r2, #128	; 0x80
   355da:	401d      	ands	r5, r3
   355dc:	2afe      	cmp	r2, #254	; 0xfe
   355de:	dc94      	bgt.n	3550a <__aeabi_fmul+0xd2>
   355e0:	2401      	movs	r4, #1
   355e2:	01a8      	lsls	r0, r5, #6
   355e4:	0a40      	lsrs	r0, r0, #9
   355e6:	b2d2      	uxtb	r2, r2
   355e8:	400c      	ands	r4, r1
   355ea:	e76f      	b.n	354cc <__aeabi_fmul+0x94>
   355ec:	2080      	movs	r0, #128	; 0x80
   355ee:	03c0      	lsls	r0, r0, #15
   355f0:	4207      	tst	r7, r0
   355f2:	d007      	beq.n	35604 <__aeabi_fmul+0x1cc>
   355f4:	4205      	tst	r5, r0
   355f6:	d105      	bne.n	35604 <__aeabi_fmul+0x1cc>
   355f8:	4328      	orrs	r0, r5
   355fa:	0240      	lsls	r0, r0, #9
   355fc:	0a40      	lsrs	r0, r0, #9
   355fe:	4644      	mov	r4, r8
   35600:	22ff      	movs	r2, #255	; 0xff
   35602:	e763      	b.n	354cc <__aeabi_fmul+0x94>
   35604:	4338      	orrs	r0, r7
   35606:	0240      	lsls	r0, r0, #9
   35608:	0a40      	lsrs	r0, r0, #9
   3560a:	22ff      	movs	r2, #255	; 0xff
   3560c:	e75e      	b.n	354cc <__aeabi_fmul+0x94>
   3560e:	2401      	movs	r4, #1
   35610:	1aa3      	subs	r3, r4, r2
   35612:	2b1b      	cmp	r3, #27
   35614:	dd05      	ble.n	35622 <__aeabi_fmul+0x1ea>
   35616:	400c      	ands	r4, r1
   35618:	2200      	movs	r2, #0
   3561a:	2000      	movs	r0, #0
   3561c:	e756      	b.n	354cc <__aeabi_fmul+0x94>
   3561e:	465e      	mov	r6, fp
   35620:	e7cb      	b.n	355ba <__aeabi_fmul+0x182>
   35622:	002a      	movs	r2, r5
   35624:	2020      	movs	r0, #32
   35626:	40da      	lsrs	r2, r3
   35628:	1ac3      	subs	r3, r0, r3
   3562a:	409d      	lsls	r5, r3
   3562c:	002b      	movs	r3, r5
   3562e:	1e5d      	subs	r5, r3, #1
   35630:	41ab      	sbcs	r3, r5
   35632:	4313      	orrs	r3, r2
   35634:	075a      	lsls	r2, r3, #29
   35636:	d004      	beq.n	35642 <__aeabi_fmul+0x20a>
   35638:	220f      	movs	r2, #15
   3563a:	401a      	ands	r2, r3
   3563c:	2a04      	cmp	r2, #4
   3563e:	d000      	beq.n	35642 <__aeabi_fmul+0x20a>
   35640:	3304      	adds	r3, #4
   35642:	015a      	lsls	r2, r3, #5
   35644:	d504      	bpl.n	35650 <__aeabi_fmul+0x218>
   35646:	2401      	movs	r4, #1
   35648:	2201      	movs	r2, #1
   3564a:	400c      	ands	r4, r1
   3564c:	2000      	movs	r0, #0
   3564e:	e73d      	b.n	354cc <__aeabi_fmul+0x94>
   35650:	2401      	movs	r4, #1
   35652:	019b      	lsls	r3, r3, #6
   35654:	0a58      	lsrs	r0, r3, #9
   35656:	400c      	ands	r4, r1
   35658:	2200      	movs	r2, #0
   3565a:	e737      	b.n	354cc <__aeabi_fmul+0x94>
   3565c:	2080      	movs	r0, #128	; 0x80
   3565e:	2401      	movs	r4, #1
   35660:	03c0      	lsls	r0, r0, #15
   35662:	4328      	orrs	r0, r5
   35664:	0240      	lsls	r0, r0, #9
   35666:	0a40      	lsrs	r0, r0, #9
   35668:	400c      	ands	r4, r1
   3566a:	22ff      	movs	r2, #255	; 0xff
   3566c:	e72e      	b.n	354cc <__aeabi_fmul+0x94>
   3566e:	46c0      	nop			; (mov r8, r8)
   35670:	0003d1c0 	.word	0x0003d1c0
   35674:	f7ffffff 	.word	0xf7ffffff

00035678 <__aeabi_fsub>:
   35678:	b5f0      	push	{r4, r5, r6, r7, lr}
   3567a:	464f      	mov	r7, r9
   3567c:	46d6      	mov	lr, sl
   3567e:	4646      	mov	r6, r8
   35680:	0044      	lsls	r4, r0, #1
   35682:	b5c0      	push	{r6, r7, lr}
   35684:	0fc2      	lsrs	r2, r0, #31
   35686:	0247      	lsls	r7, r0, #9
   35688:	0248      	lsls	r0, r1, #9
   3568a:	0a40      	lsrs	r0, r0, #9
   3568c:	4684      	mov	ip, r0
   3568e:	4666      	mov	r6, ip
   35690:	0a7b      	lsrs	r3, r7, #9
   35692:	0048      	lsls	r0, r1, #1
   35694:	0fc9      	lsrs	r1, r1, #31
   35696:	469a      	mov	sl, r3
   35698:	0e24      	lsrs	r4, r4, #24
   3569a:	0015      	movs	r5, r2
   3569c:	00db      	lsls	r3, r3, #3
   3569e:	0e00      	lsrs	r0, r0, #24
   356a0:	4689      	mov	r9, r1
   356a2:	00f6      	lsls	r6, r6, #3
   356a4:	28ff      	cmp	r0, #255	; 0xff
   356a6:	d100      	bne.n	356aa <__aeabi_fsub+0x32>
   356a8:	e08f      	b.n	357ca <__aeabi_fsub+0x152>
   356aa:	2101      	movs	r1, #1
   356ac:	464f      	mov	r7, r9
   356ae:	404f      	eors	r7, r1
   356b0:	0039      	movs	r1, r7
   356b2:	4291      	cmp	r1, r2
   356b4:	d066      	beq.n	35784 <__aeabi_fsub+0x10c>
   356b6:	1a22      	subs	r2, r4, r0
   356b8:	2a00      	cmp	r2, #0
   356ba:	dc00      	bgt.n	356be <__aeabi_fsub+0x46>
   356bc:	e09d      	b.n	357fa <__aeabi_fsub+0x182>
   356be:	2800      	cmp	r0, #0
   356c0:	d13d      	bne.n	3573e <__aeabi_fsub+0xc6>
   356c2:	2e00      	cmp	r6, #0
   356c4:	d100      	bne.n	356c8 <__aeabi_fsub+0x50>
   356c6:	e08b      	b.n	357e0 <__aeabi_fsub+0x168>
   356c8:	1e51      	subs	r1, r2, #1
   356ca:	2900      	cmp	r1, #0
   356cc:	d000      	beq.n	356d0 <__aeabi_fsub+0x58>
   356ce:	e0b5      	b.n	3583c <__aeabi_fsub+0x1c4>
   356d0:	2401      	movs	r4, #1
   356d2:	1b9b      	subs	r3, r3, r6
   356d4:	015a      	lsls	r2, r3, #5
   356d6:	d544      	bpl.n	35762 <__aeabi_fsub+0xea>
   356d8:	019b      	lsls	r3, r3, #6
   356da:	099f      	lsrs	r7, r3, #6
   356dc:	0038      	movs	r0, r7
   356de:	f001 ff3f 	bl	37560 <__clzsi2>
   356e2:	3805      	subs	r0, #5
   356e4:	4087      	lsls	r7, r0
   356e6:	4284      	cmp	r4, r0
   356e8:	dd00      	ble.n	356ec <__aeabi_fsub+0x74>
   356ea:	e096      	b.n	3581a <__aeabi_fsub+0x1a2>
   356ec:	1b04      	subs	r4, r0, r4
   356ee:	003a      	movs	r2, r7
   356f0:	2020      	movs	r0, #32
   356f2:	3401      	adds	r4, #1
   356f4:	40e2      	lsrs	r2, r4
   356f6:	1b04      	subs	r4, r0, r4
   356f8:	40a7      	lsls	r7, r4
   356fa:	003b      	movs	r3, r7
   356fc:	1e5f      	subs	r7, r3, #1
   356fe:	41bb      	sbcs	r3, r7
   35700:	2400      	movs	r4, #0
   35702:	4313      	orrs	r3, r2
   35704:	075a      	lsls	r2, r3, #29
   35706:	d004      	beq.n	35712 <__aeabi_fsub+0x9a>
   35708:	220f      	movs	r2, #15
   3570a:	401a      	ands	r2, r3
   3570c:	2a04      	cmp	r2, #4
   3570e:	d000      	beq.n	35712 <__aeabi_fsub+0x9a>
   35710:	3304      	adds	r3, #4
   35712:	015a      	lsls	r2, r3, #5
   35714:	d527      	bpl.n	35766 <__aeabi_fsub+0xee>
   35716:	3401      	adds	r4, #1
   35718:	2cff      	cmp	r4, #255	; 0xff
   3571a:	d100      	bne.n	3571e <__aeabi_fsub+0xa6>
   3571c:	e079      	b.n	35812 <__aeabi_fsub+0x19a>
   3571e:	2201      	movs	r2, #1
   35720:	019b      	lsls	r3, r3, #6
   35722:	0a5b      	lsrs	r3, r3, #9
   35724:	b2e4      	uxtb	r4, r4
   35726:	402a      	ands	r2, r5
   35728:	025b      	lsls	r3, r3, #9
   3572a:	05e4      	lsls	r4, r4, #23
   3572c:	0a58      	lsrs	r0, r3, #9
   3572e:	07d2      	lsls	r2, r2, #31
   35730:	4320      	orrs	r0, r4
   35732:	4310      	orrs	r0, r2
   35734:	bc1c      	pop	{r2, r3, r4}
   35736:	4690      	mov	r8, r2
   35738:	4699      	mov	r9, r3
   3573a:	46a2      	mov	sl, r4
   3573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3573e:	2cff      	cmp	r4, #255	; 0xff
   35740:	d0e0      	beq.n	35704 <__aeabi_fsub+0x8c>
   35742:	2180      	movs	r1, #128	; 0x80
   35744:	04c9      	lsls	r1, r1, #19
   35746:	430e      	orrs	r6, r1
   35748:	2a1b      	cmp	r2, #27
   3574a:	dc7b      	bgt.n	35844 <__aeabi_fsub+0x1cc>
   3574c:	0031      	movs	r1, r6
   3574e:	2020      	movs	r0, #32
   35750:	40d1      	lsrs	r1, r2
   35752:	1a82      	subs	r2, r0, r2
   35754:	4096      	lsls	r6, r2
   35756:	1e72      	subs	r2, r6, #1
   35758:	4196      	sbcs	r6, r2
   3575a:	430e      	orrs	r6, r1
   3575c:	1b9b      	subs	r3, r3, r6
   3575e:	015a      	lsls	r2, r3, #5
   35760:	d4ba      	bmi.n	356d8 <__aeabi_fsub+0x60>
   35762:	075a      	lsls	r2, r3, #29
   35764:	d1d0      	bne.n	35708 <__aeabi_fsub+0x90>
   35766:	2201      	movs	r2, #1
   35768:	08df      	lsrs	r7, r3, #3
   3576a:	402a      	ands	r2, r5
   3576c:	2cff      	cmp	r4, #255	; 0xff
   3576e:	d133      	bne.n	357d8 <__aeabi_fsub+0x160>
   35770:	2f00      	cmp	r7, #0
   35772:	d100      	bne.n	35776 <__aeabi_fsub+0xfe>
   35774:	e0a8      	b.n	358c8 <__aeabi_fsub+0x250>
   35776:	2380      	movs	r3, #128	; 0x80
   35778:	03db      	lsls	r3, r3, #15
   3577a:	433b      	orrs	r3, r7
   3577c:	025b      	lsls	r3, r3, #9
   3577e:	0a5b      	lsrs	r3, r3, #9
   35780:	24ff      	movs	r4, #255	; 0xff
   35782:	e7d1      	b.n	35728 <__aeabi_fsub+0xb0>
   35784:	1a21      	subs	r1, r4, r0
   35786:	2900      	cmp	r1, #0
   35788:	dd4c      	ble.n	35824 <__aeabi_fsub+0x1ac>
   3578a:	2800      	cmp	r0, #0
   3578c:	d02a      	beq.n	357e4 <__aeabi_fsub+0x16c>
   3578e:	2cff      	cmp	r4, #255	; 0xff
   35790:	d0b8      	beq.n	35704 <__aeabi_fsub+0x8c>
   35792:	2080      	movs	r0, #128	; 0x80
   35794:	04c0      	lsls	r0, r0, #19
   35796:	4306      	orrs	r6, r0
   35798:	291b      	cmp	r1, #27
   3579a:	dd00      	ble.n	3579e <__aeabi_fsub+0x126>
   3579c:	e0af      	b.n	358fe <__aeabi_fsub+0x286>
   3579e:	0030      	movs	r0, r6
   357a0:	2720      	movs	r7, #32
   357a2:	40c8      	lsrs	r0, r1
   357a4:	1a79      	subs	r1, r7, r1
   357a6:	408e      	lsls	r6, r1
   357a8:	1e71      	subs	r1, r6, #1
   357aa:	418e      	sbcs	r6, r1
   357ac:	4306      	orrs	r6, r0
   357ae:	199b      	adds	r3, r3, r6
   357b0:	0159      	lsls	r1, r3, #5
   357b2:	d5d6      	bpl.n	35762 <__aeabi_fsub+0xea>
   357b4:	3401      	adds	r4, #1
   357b6:	2cff      	cmp	r4, #255	; 0xff
   357b8:	d100      	bne.n	357bc <__aeabi_fsub+0x144>
   357ba:	e085      	b.n	358c8 <__aeabi_fsub+0x250>
   357bc:	2201      	movs	r2, #1
   357be:	497a      	ldr	r1, [pc, #488]	; (359a8 <__aeabi_fsub+0x330>)
   357c0:	401a      	ands	r2, r3
   357c2:	085b      	lsrs	r3, r3, #1
   357c4:	400b      	ands	r3, r1
   357c6:	4313      	orrs	r3, r2
   357c8:	e79c      	b.n	35704 <__aeabi_fsub+0x8c>
   357ca:	2e00      	cmp	r6, #0
   357cc:	d000      	beq.n	357d0 <__aeabi_fsub+0x158>
   357ce:	e770      	b.n	356b2 <__aeabi_fsub+0x3a>
   357d0:	e76b      	b.n	356aa <__aeabi_fsub+0x32>
   357d2:	1e3b      	subs	r3, r7, #0
   357d4:	d1c5      	bne.n	35762 <__aeabi_fsub+0xea>
   357d6:	2200      	movs	r2, #0
   357d8:	027b      	lsls	r3, r7, #9
   357da:	0a5b      	lsrs	r3, r3, #9
   357dc:	b2e4      	uxtb	r4, r4
   357de:	e7a3      	b.n	35728 <__aeabi_fsub+0xb0>
   357e0:	0014      	movs	r4, r2
   357e2:	e78f      	b.n	35704 <__aeabi_fsub+0x8c>
   357e4:	2e00      	cmp	r6, #0
   357e6:	d04d      	beq.n	35884 <__aeabi_fsub+0x20c>
   357e8:	1e48      	subs	r0, r1, #1
   357ea:	2800      	cmp	r0, #0
   357ec:	d157      	bne.n	3589e <__aeabi_fsub+0x226>
   357ee:	199b      	adds	r3, r3, r6
   357f0:	2401      	movs	r4, #1
   357f2:	015a      	lsls	r2, r3, #5
   357f4:	d5b5      	bpl.n	35762 <__aeabi_fsub+0xea>
   357f6:	2402      	movs	r4, #2
   357f8:	e7e0      	b.n	357bc <__aeabi_fsub+0x144>
   357fa:	2a00      	cmp	r2, #0
   357fc:	d125      	bne.n	3584a <__aeabi_fsub+0x1d2>
   357fe:	1c62      	adds	r2, r4, #1
   35800:	b2d2      	uxtb	r2, r2
   35802:	2a01      	cmp	r2, #1
   35804:	dd72      	ble.n	358ec <__aeabi_fsub+0x274>
   35806:	1b9f      	subs	r7, r3, r6
   35808:	017a      	lsls	r2, r7, #5
   3580a:	d535      	bpl.n	35878 <__aeabi_fsub+0x200>
   3580c:	1af7      	subs	r7, r6, r3
   3580e:	000d      	movs	r5, r1
   35810:	e764      	b.n	356dc <__aeabi_fsub+0x64>
   35812:	2201      	movs	r2, #1
   35814:	2300      	movs	r3, #0
   35816:	402a      	ands	r2, r5
   35818:	e786      	b.n	35728 <__aeabi_fsub+0xb0>
   3581a:	003b      	movs	r3, r7
   3581c:	4a63      	ldr	r2, [pc, #396]	; (359ac <__aeabi_fsub+0x334>)
   3581e:	1a24      	subs	r4, r4, r0
   35820:	4013      	ands	r3, r2
   35822:	e76f      	b.n	35704 <__aeabi_fsub+0x8c>
   35824:	2900      	cmp	r1, #0
   35826:	d16c      	bne.n	35902 <__aeabi_fsub+0x28a>
   35828:	1c61      	adds	r1, r4, #1
   3582a:	b2c8      	uxtb	r0, r1
   3582c:	2801      	cmp	r0, #1
   3582e:	dd4e      	ble.n	358ce <__aeabi_fsub+0x256>
   35830:	29ff      	cmp	r1, #255	; 0xff
   35832:	d049      	beq.n	358c8 <__aeabi_fsub+0x250>
   35834:	199b      	adds	r3, r3, r6
   35836:	085b      	lsrs	r3, r3, #1
   35838:	000c      	movs	r4, r1
   3583a:	e763      	b.n	35704 <__aeabi_fsub+0x8c>
   3583c:	2aff      	cmp	r2, #255	; 0xff
   3583e:	d041      	beq.n	358c4 <__aeabi_fsub+0x24c>
   35840:	000a      	movs	r2, r1
   35842:	e781      	b.n	35748 <__aeabi_fsub+0xd0>
   35844:	2601      	movs	r6, #1
   35846:	1b9b      	subs	r3, r3, r6
   35848:	e789      	b.n	3575e <__aeabi_fsub+0xe6>
   3584a:	2c00      	cmp	r4, #0
   3584c:	d01c      	beq.n	35888 <__aeabi_fsub+0x210>
   3584e:	28ff      	cmp	r0, #255	; 0xff
   35850:	d021      	beq.n	35896 <__aeabi_fsub+0x21e>
   35852:	2480      	movs	r4, #128	; 0x80
   35854:	04e4      	lsls	r4, r4, #19
   35856:	4252      	negs	r2, r2
   35858:	4323      	orrs	r3, r4
   3585a:	2a1b      	cmp	r2, #27
   3585c:	dd00      	ble.n	35860 <__aeabi_fsub+0x1e8>
   3585e:	e096      	b.n	3598e <__aeabi_fsub+0x316>
   35860:	001c      	movs	r4, r3
   35862:	2520      	movs	r5, #32
   35864:	40d4      	lsrs	r4, r2
   35866:	1aaa      	subs	r2, r5, r2
   35868:	4093      	lsls	r3, r2
   3586a:	1e5a      	subs	r2, r3, #1
   3586c:	4193      	sbcs	r3, r2
   3586e:	4323      	orrs	r3, r4
   35870:	1af3      	subs	r3, r6, r3
   35872:	0004      	movs	r4, r0
   35874:	000d      	movs	r5, r1
   35876:	e72d      	b.n	356d4 <__aeabi_fsub+0x5c>
   35878:	2f00      	cmp	r7, #0
   3587a:	d000      	beq.n	3587e <__aeabi_fsub+0x206>
   3587c:	e72e      	b.n	356dc <__aeabi_fsub+0x64>
   3587e:	2200      	movs	r2, #0
   35880:	2400      	movs	r4, #0
   35882:	e7a9      	b.n	357d8 <__aeabi_fsub+0x160>
   35884:	000c      	movs	r4, r1
   35886:	e73d      	b.n	35704 <__aeabi_fsub+0x8c>
   35888:	2b00      	cmp	r3, #0
   3588a:	d058      	beq.n	3593e <__aeabi_fsub+0x2c6>
   3588c:	43d2      	mvns	r2, r2
   3588e:	2a00      	cmp	r2, #0
   35890:	d0ee      	beq.n	35870 <__aeabi_fsub+0x1f8>
   35892:	28ff      	cmp	r0, #255	; 0xff
   35894:	d1e1      	bne.n	3585a <__aeabi_fsub+0x1e2>
   35896:	0033      	movs	r3, r6
   35898:	24ff      	movs	r4, #255	; 0xff
   3589a:	000d      	movs	r5, r1
   3589c:	e732      	b.n	35704 <__aeabi_fsub+0x8c>
   3589e:	29ff      	cmp	r1, #255	; 0xff
   358a0:	d010      	beq.n	358c4 <__aeabi_fsub+0x24c>
   358a2:	0001      	movs	r1, r0
   358a4:	e778      	b.n	35798 <__aeabi_fsub+0x120>
   358a6:	2b00      	cmp	r3, #0
   358a8:	d06e      	beq.n	35988 <__aeabi_fsub+0x310>
   358aa:	24ff      	movs	r4, #255	; 0xff
   358ac:	2e00      	cmp	r6, #0
   358ae:	d100      	bne.n	358b2 <__aeabi_fsub+0x23a>
   358b0:	e728      	b.n	35704 <__aeabi_fsub+0x8c>
   358b2:	2280      	movs	r2, #128	; 0x80
   358b4:	4651      	mov	r1, sl
   358b6:	03d2      	lsls	r2, r2, #15
   358b8:	4211      	tst	r1, r2
   358ba:	d003      	beq.n	358c4 <__aeabi_fsub+0x24c>
   358bc:	4661      	mov	r1, ip
   358be:	4211      	tst	r1, r2
   358c0:	d100      	bne.n	358c4 <__aeabi_fsub+0x24c>
   358c2:	0033      	movs	r3, r6
   358c4:	24ff      	movs	r4, #255	; 0xff
   358c6:	e71d      	b.n	35704 <__aeabi_fsub+0x8c>
   358c8:	24ff      	movs	r4, #255	; 0xff
   358ca:	2300      	movs	r3, #0
   358cc:	e72c      	b.n	35728 <__aeabi_fsub+0xb0>
   358ce:	2c00      	cmp	r4, #0
   358d0:	d1e9      	bne.n	358a6 <__aeabi_fsub+0x22e>
   358d2:	2b00      	cmp	r3, #0
   358d4:	d063      	beq.n	3599e <__aeabi_fsub+0x326>
   358d6:	2e00      	cmp	r6, #0
   358d8:	d100      	bne.n	358dc <__aeabi_fsub+0x264>
   358da:	e713      	b.n	35704 <__aeabi_fsub+0x8c>
   358dc:	199b      	adds	r3, r3, r6
   358de:	015a      	lsls	r2, r3, #5
   358e0:	d400      	bmi.n	358e4 <__aeabi_fsub+0x26c>
   358e2:	e73e      	b.n	35762 <__aeabi_fsub+0xea>
   358e4:	4a31      	ldr	r2, [pc, #196]	; (359ac <__aeabi_fsub+0x334>)
   358e6:	000c      	movs	r4, r1
   358e8:	4013      	ands	r3, r2
   358ea:	e70b      	b.n	35704 <__aeabi_fsub+0x8c>
   358ec:	2c00      	cmp	r4, #0
   358ee:	d11e      	bne.n	3592e <__aeabi_fsub+0x2b6>
   358f0:	2b00      	cmp	r3, #0
   358f2:	d12f      	bne.n	35954 <__aeabi_fsub+0x2dc>
   358f4:	2e00      	cmp	r6, #0
   358f6:	d04f      	beq.n	35998 <__aeabi_fsub+0x320>
   358f8:	0033      	movs	r3, r6
   358fa:	000d      	movs	r5, r1
   358fc:	e702      	b.n	35704 <__aeabi_fsub+0x8c>
   358fe:	2601      	movs	r6, #1
   35900:	e755      	b.n	357ae <__aeabi_fsub+0x136>
   35902:	2c00      	cmp	r4, #0
   35904:	d11f      	bne.n	35946 <__aeabi_fsub+0x2ce>
   35906:	2b00      	cmp	r3, #0
   35908:	d043      	beq.n	35992 <__aeabi_fsub+0x31a>
   3590a:	43c9      	mvns	r1, r1
   3590c:	2900      	cmp	r1, #0
   3590e:	d00b      	beq.n	35928 <__aeabi_fsub+0x2b0>
   35910:	28ff      	cmp	r0, #255	; 0xff
   35912:	d039      	beq.n	35988 <__aeabi_fsub+0x310>
   35914:	291b      	cmp	r1, #27
   35916:	dc44      	bgt.n	359a2 <__aeabi_fsub+0x32a>
   35918:	001c      	movs	r4, r3
   3591a:	2720      	movs	r7, #32
   3591c:	40cc      	lsrs	r4, r1
   3591e:	1a79      	subs	r1, r7, r1
   35920:	408b      	lsls	r3, r1
   35922:	1e59      	subs	r1, r3, #1
   35924:	418b      	sbcs	r3, r1
   35926:	4323      	orrs	r3, r4
   35928:	199b      	adds	r3, r3, r6
   3592a:	0004      	movs	r4, r0
   3592c:	e740      	b.n	357b0 <__aeabi_fsub+0x138>
   3592e:	2b00      	cmp	r3, #0
   35930:	d11a      	bne.n	35968 <__aeabi_fsub+0x2f0>
   35932:	2e00      	cmp	r6, #0
   35934:	d124      	bne.n	35980 <__aeabi_fsub+0x308>
   35936:	2780      	movs	r7, #128	; 0x80
   35938:	2200      	movs	r2, #0
   3593a:	03ff      	lsls	r7, r7, #15
   3593c:	e71b      	b.n	35776 <__aeabi_fsub+0xfe>
   3593e:	0033      	movs	r3, r6
   35940:	0004      	movs	r4, r0
   35942:	000d      	movs	r5, r1
   35944:	e6de      	b.n	35704 <__aeabi_fsub+0x8c>
   35946:	28ff      	cmp	r0, #255	; 0xff
   35948:	d01e      	beq.n	35988 <__aeabi_fsub+0x310>
   3594a:	2480      	movs	r4, #128	; 0x80
   3594c:	04e4      	lsls	r4, r4, #19
   3594e:	4249      	negs	r1, r1
   35950:	4323      	orrs	r3, r4
   35952:	e7df      	b.n	35914 <__aeabi_fsub+0x29c>
   35954:	2e00      	cmp	r6, #0
   35956:	d100      	bne.n	3595a <__aeabi_fsub+0x2e2>
   35958:	e6d4      	b.n	35704 <__aeabi_fsub+0x8c>
   3595a:	1b9f      	subs	r7, r3, r6
   3595c:	017a      	lsls	r2, r7, #5
   3595e:	d400      	bmi.n	35962 <__aeabi_fsub+0x2ea>
   35960:	e737      	b.n	357d2 <__aeabi_fsub+0x15a>
   35962:	1af3      	subs	r3, r6, r3
   35964:	000d      	movs	r5, r1
   35966:	e6cd      	b.n	35704 <__aeabi_fsub+0x8c>
   35968:	24ff      	movs	r4, #255	; 0xff
   3596a:	2e00      	cmp	r6, #0
   3596c:	d100      	bne.n	35970 <__aeabi_fsub+0x2f8>
   3596e:	e6c9      	b.n	35704 <__aeabi_fsub+0x8c>
   35970:	2280      	movs	r2, #128	; 0x80
   35972:	4650      	mov	r0, sl
   35974:	03d2      	lsls	r2, r2, #15
   35976:	4210      	tst	r0, r2
   35978:	d0a4      	beq.n	358c4 <__aeabi_fsub+0x24c>
   3597a:	4660      	mov	r0, ip
   3597c:	4210      	tst	r0, r2
   3597e:	d1a1      	bne.n	358c4 <__aeabi_fsub+0x24c>
   35980:	0033      	movs	r3, r6
   35982:	000d      	movs	r5, r1
   35984:	24ff      	movs	r4, #255	; 0xff
   35986:	e6bd      	b.n	35704 <__aeabi_fsub+0x8c>
   35988:	0033      	movs	r3, r6
   3598a:	24ff      	movs	r4, #255	; 0xff
   3598c:	e6ba      	b.n	35704 <__aeabi_fsub+0x8c>
   3598e:	2301      	movs	r3, #1
   35990:	e76e      	b.n	35870 <__aeabi_fsub+0x1f8>
   35992:	0033      	movs	r3, r6
   35994:	0004      	movs	r4, r0
   35996:	e6b5      	b.n	35704 <__aeabi_fsub+0x8c>
   35998:	2700      	movs	r7, #0
   3599a:	2200      	movs	r2, #0
   3599c:	e71c      	b.n	357d8 <__aeabi_fsub+0x160>
   3599e:	0033      	movs	r3, r6
   359a0:	e6b0      	b.n	35704 <__aeabi_fsub+0x8c>
   359a2:	2301      	movs	r3, #1
   359a4:	e7c0      	b.n	35928 <__aeabi_fsub+0x2b0>
   359a6:	46c0      	nop			; (mov r8, r8)
   359a8:	7dffffff 	.word	0x7dffffff
   359ac:	fbffffff 	.word	0xfbffffff

000359b0 <__aeabi_f2iz>:
   359b0:	0241      	lsls	r1, r0, #9
   359b2:	0043      	lsls	r3, r0, #1
   359b4:	0fc2      	lsrs	r2, r0, #31
   359b6:	0a49      	lsrs	r1, r1, #9
   359b8:	0e1b      	lsrs	r3, r3, #24
   359ba:	2000      	movs	r0, #0
   359bc:	2b7e      	cmp	r3, #126	; 0x7e
   359be:	dd0d      	ble.n	359dc <__aeabi_f2iz+0x2c>
   359c0:	2b9d      	cmp	r3, #157	; 0x9d
   359c2:	dc0c      	bgt.n	359de <__aeabi_f2iz+0x2e>
   359c4:	2080      	movs	r0, #128	; 0x80
   359c6:	0400      	lsls	r0, r0, #16
   359c8:	4301      	orrs	r1, r0
   359ca:	2b95      	cmp	r3, #149	; 0x95
   359cc:	dc0a      	bgt.n	359e4 <__aeabi_f2iz+0x34>
   359ce:	2096      	movs	r0, #150	; 0x96
   359d0:	1ac3      	subs	r3, r0, r3
   359d2:	40d9      	lsrs	r1, r3
   359d4:	4248      	negs	r0, r1
   359d6:	2a00      	cmp	r2, #0
   359d8:	d100      	bne.n	359dc <__aeabi_f2iz+0x2c>
   359da:	0008      	movs	r0, r1
   359dc:	4770      	bx	lr
   359de:	4b03      	ldr	r3, [pc, #12]	; (359ec <__aeabi_f2iz+0x3c>)
   359e0:	18d0      	adds	r0, r2, r3
   359e2:	e7fb      	b.n	359dc <__aeabi_f2iz+0x2c>
   359e4:	3b96      	subs	r3, #150	; 0x96
   359e6:	4099      	lsls	r1, r3
   359e8:	e7f4      	b.n	359d4 <__aeabi_f2iz+0x24>
   359ea:	46c0      	nop			; (mov r8, r8)
   359ec:	7fffffff 	.word	0x7fffffff

000359f0 <__aeabi_i2f>:
   359f0:	b570      	push	{r4, r5, r6, lr}
   359f2:	2800      	cmp	r0, #0
   359f4:	d030      	beq.n	35a58 <__aeabi_i2f+0x68>
   359f6:	17c3      	asrs	r3, r0, #31
   359f8:	18c4      	adds	r4, r0, r3
   359fa:	405c      	eors	r4, r3
   359fc:	0fc5      	lsrs	r5, r0, #31
   359fe:	0020      	movs	r0, r4
   35a00:	f001 fdae 	bl	37560 <__clzsi2>
   35a04:	239e      	movs	r3, #158	; 0x9e
   35a06:	1a1b      	subs	r3, r3, r0
   35a08:	2b96      	cmp	r3, #150	; 0x96
   35a0a:	dc0d      	bgt.n	35a28 <__aeabi_i2f+0x38>
   35a0c:	2296      	movs	r2, #150	; 0x96
   35a0e:	1ad2      	subs	r2, r2, r3
   35a10:	4094      	lsls	r4, r2
   35a12:	002a      	movs	r2, r5
   35a14:	0264      	lsls	r4, r4, #9
   35a16:	0a64      	lsrs	r4, r4, #9
   35a18:	b2db      	uxtb	r3, r3
   35a1a:	0264      	lsls	r4, r4, #9
   35a1c:	05db      	lsls	r3, r3, #23
   35a1e:	0a60      	lsrs	r0, r4, #9
   35a20:	07d2      	lsls	r2, r2, #31
   35a22:	4318      	orrs	r0, r3
   35a24:	4310      	orrs	r0, r2
   35a26:	bd70      	pop	{r4, r5, r6, pc}
   35a28:	2b99      	cmp	r3, #153	; 0x99
   35a2a:	dc19      	bgt.n	35a60 <__aeabi_i2f+0x70>
   35a2c:	2299      	movs	r2, #153	; 0x99
   35a2e:	1ad2      	subs	r2, r2, r3
   35a30:	2a00      	cmp	r2, #0
   35a32:	dd29      	ble.n	35a88 <__aeabi_i2f+0x98>
   35a34:	4094      	lsls	r4, r2
   35a36:	0022      	movs	r2, r4
   35a38:	4c14      	ldr	r4, [pc, #80]	; (35a8c <__aeabi_i2f+0x9c>)
   35a3a:	4014      	ands	r4, r2
   35a3c:	0751      	lsls	r1, r2, #29
   35a3e:	d004      	beq.n	35a4a <__aeabi_i2f+0x5a>
   35a40:	210f      	movs	r1, #15
   35a42:	400a      	ands	r2, r1
   35a44:	2a04      	cmp	r2, #4
   35a46:	d000      	beq.n	35a4a <__aeabi_i2f+0x5a>
   35a48:	3404      	adds	r4, #4
   35a4a:	0162      	lsls	r2, r4, #5
   35a4c:	d413      	bmi.n	35a76 <__aeabi_i2f+0x86>
   35a4e:	01a4      	lsls	r4, r4, #6
   35a50:	0a64      	lsrs	r4, r4, #9
   35a52:	b2db      	uxtb	r3, r3
   35a54:	002a      	movs	r2, r5
   35a56:	e7e0      	b.n	35a1a <__aeabi_i2f+0x2a>
   35a58:	2200      	movs	r2, #0
   35a5a:	2300      	movs	r3, #0
   35a5c:	2400      	movs	r4, #0
   35a5e:	e7dc      	b.n	35a1a <__aeabi_i2f+0x2a>
   35a60:	2205      	movs	r2, #5
   35a62:	0021      	movs	r1, r4
   35a64:	1a12      	subs	r2, r2, r0
   35a66:	40d1      	lsrs	r1, r2
   35a68:	22b9      	movs	r2, #185	; 0xb9
   35a6a:	1ad2      	subs	r2, r2, r3
   35a6c:	4094      	lsls	r4, r2
   35a6e:	1e62      	subs	r2, r4, #1
   35a70:	4194      	sbcs	r4, r2
   35a72:	430c      	orrs	r4, r1
   35a74:	e7da      	b.n	35a2c <__aeabi_i2f+0x3c>
   35a76:	4b05      	ldr	r3, [pc, #20]	; (35a8c <__aeabi_i2f+0x9c>)
   35a78:	002a      	movs	r2, r5
   35a7a:	401c      	ands	r4, r3
   35a7c:	239f      	movs	r3, #159	; 0x9f
   35a7e:	01a4      	lsls	r4, r4, #6
   35a80:	1a1b      	subs	r3, r3, r0
   35a82:	0a64      	lsrs	r4, r4, #9
   35a84:	b2db      	uxtb	r3, r3
   35a86:	e7c8      	b.n	35a1a <__aeabi_i2f+0x2a>
   35a88:	0022      	movs	r2, r4
   35a8a:	e7d5      	b.n	35a38 <__aeabi_i2f+0x48>
   35a8c:	fbffffff 	.word	0xfbffffff

00035a90 <__aeabi_ui2f>:
   35a90:	b510      	push	{r4, lr}
   35a92:	1e04      	subs	r4, r0, #0
   35a94:	d027      	beq.n	35ae6 <__aeabi_ui2f+0x56>
   35a96:	f001 fd63 	bl	37560 <__clzsi2>
   35a9a:	239e      	movs	r3, #158	; 0x9e
   35a9c:	1a1b      	subs	r3, r3, r0
   35a9e:	2b96      	cmp	r3, #150	; 0x96
   35aa0:	dc0a      	bgt.n	35ab8 <__aeabi_ui2f+0x28>
   35aa2:	2296      	movs	r2, #150	; 0x96
   35aa4:	1ad2      	subs	r2, r2, r3
   35aa6:	4094      	lsls	r4, r2
   35aa8:	0264      	lsls	r4, r4, #9
   35aaa:	0a64      	lsrs	r4, r4, #9
   35aac:	b2db      	uxtb	r3, r3
   35aae:	0264      	lsls	r4, r4, #9
   35ab0:	05db      	lsls	r3, r3, #23
   35ab2:	0a60      	lsrs	r0, r4, #9
   35ab4:	4318      	orrs	r0, r3
   35ab6:	bd10      	pop	{r4, pc}
   35ab8:	2b99      	cmp	r3, #153	; 0x99
   35aba:	dc17      	bgt.n	35aec <__aeabi_ui2f+0x5c>
   35abc:	2299      	movs	r2, #153	; 0x99
   35abe:	1ad2      	subs	r2, r2, r3
   35ac0:	2a00      	cmp	r2, #0
   35ac2:	dd27      	ble.n	35b14 <__aeabi_ui2f+0x84>
   35ac4:	4094      	lsls	r4, r2
   35ac6:	0022      	movs	r2, r4
   35ac8:	4c13      	ldr	r4, [pc, #76]	; (35b18 <__aeabi_ui2f+0x88>)
   35aca:	4014      	ands	r4, r2
   35acc:	0751      	lsls	r1, r2, #29
   35ace:	d004      	beq.n	35ada <__aeabi_ui2f+0x4a>
   35ad0:	210f      	movs	r1, #15
   35ad2:	400a      	ands	r2, r1
   35ad4:	2a04      	cmp	r2, #4
   35ad6:	d000      	beq.n	35ada <__aeabi_ui2f+0x4a>
   35ad8:	3404      	adds	r4, #4
   35ada:	0162      	lsls	r2, r4, #5
   35adc:	d412      	bmi.n	35b04 <__aeabi_ui2f+0x74>
   35ade:	01a4      	lsls	r4, r4, #6
   35ae0:	0a64      	lsrs	r4, r4, #9
   35ae2:	b2db      	uxtb	r3, r3
   35ae4:	e7e3      	b.n	35aae <__aeabi_ui2f+0x1e>
   35ae6:	2300      	movs	r3, #0
   35ae8:	2400      	movs	r4, #0
   35aea:	e7e0      	b.n	35aae <__aeabi_ui2f+0x1e>
   35aec:	22b9      	movs	r2, #185	; 0xb9
   35aee:	0021      	movs	r1, r4
   35af0:	1ad2      	subs	r2, r2, r3
   35af2:	4091      	lsls	r1, r2
   35af4:	000a      	movs	r2, r1
   35af6:	1e51      	subs	r1, r2, #1
   35af8:	418a      	sbcs	r2, r1
   35afa:	2105      	movs	r1, #5
   35afc:	1a09      	subs	r1, r1, r0
   35afe:	40cc      	lsrs	r4, r1
   35b00:	4314      	orrs	r4, r2
   35b02:	e7db      	b.n	35abc <__aeabi_ui2f+0x2c>
   35b04:	4b04      	ldr	r3, [pc, #16]	; (35b18 <__aeabi_ui2f+0x88>)
   35b06:	401c      	ands	r4, r3
   35b08:	239f      	movs	r3, #159	; 0x9f
   35b0a:	01a4      	lsls	r4, r4, #6
   35b0c:	1a1b      	subs	r3, r3, r0
   35b0e:	0a64      	lsrs	r4, r4, #9
   35b10:	b2db      	uxtb	r3, r3
   35b12:	e7cc      	b.n	35aae <__aeabi_ui2f+0x1e>
   35b14:	0022      	movs	r2, r4
   35b16:	e7d7      	b.n	35ac8 <__aeabi_ui2f+0x38>
   35b18:	fbffffff 	.word	0xfbffffff

00035b1c <__aeabi_dadd>:
   35b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35b1e:	4645      	mov	r5, r8
   35b20:	46de      	mov	lr, fp
   35b22:	4657      	mov	r7, sl
   35b24:	464e      	mov	r6, r9
   35b26:	030c      	lsls	r4, r1, #12
   35b28:	b5e0      	push	{r5, r6, r7, lr}
   35b2a:	004e      	lsls	r6, r1, #1
   35b2c:	0fc9      	lsrs	r1, r1, #31
   35b2e:	4688      	mov	r8, r1
   35b30:	000d      	movs	r5, r1
   35b32:	0a61      	lsrs	r1, r4, #9
   35b34:	0f44      	lsrs	r4, r0, #29
   35b36:	430c      	orrs	r4, r1
   35b38:	00c7      	lsls	r7, r0, #3
   35b3a:	0319      	lsls	r1, r3, #12
   35b3c:	0058      	lsls	r0, r3, #1
   35b3e:	0fdb      	lsrs	r3, r3, #31
   35b40:	469b      	mov	fp, r3
   35b42:	0a4b      	lsrs	r3, r1, #9
   35b44:	0f51      	lsrs	r1, r2, #29
   35b46:	430b      	orrs	r3, r1
   35b48:	0d76      	lsrs	r6, r6, #21
   35b4a:	0d40      	lsrs	r0, r0, #21
   35b4c:	0019      	movs	r1, r3
   35b4e:	00d2      	lsls	r2, r2, #3
   35b50:	45d8      	cmp	r8, fp
   35b52:	d100      	bne.n	35b56 <__aeabi_dadd+0x3a>
   35b54:	e0ae      	b.n	35cb4 <__aeabi_dadd+0x198>
   35b56:	1a35      	subs	r5, r6, r0
   35b58:	2d00      	cmp	r5, #0
   35b5a:	dc00      	bgt.n	35b5e <__aeabi_dadd+0x42>
   35b5c:	e0f6      	b.n	35d4c <__aeabi_dadd+0x230>
   35b5e:	2800      	cmp	r0, #0
   35b60:	d10f      	bne.n	35b82 <__aeabi_dadd+0x66>
   35b62:	4313      	orrs	r3, r2
   35b64:	d100      	bne.n	35b68 <__aeabi_dadd+0x4c>
   35b66:	e0db      	b.n	35d20 <__aeabi_dadd+0x204>
   35b68:	1e6b      	subs	r3, r5, #1
   35b6a:	2b00      	cmp	r3, #0
   35b6c:	d000      	beq.n	35b70 <__aeabi_dadd+0x54>
   35b6e:	e137      	b.n	35de0 <__aeabi_dadd+0x2c4>
   35b70:	1aba      	subs	r2, r7, r2
   35b72:	4297      	cmp	r7, r2
   35b74:	41bf      	sbcs	r7, r7
   35b76:	1a64      	subs	r4, r4, r1
   35b78:	427f      	negs	r7, r7
   35b7a:	1be4      	subs	r4, r4, r7
   35b7c:	2601      	movs	r6, #1
   35b7e:	0017      	movs	r7, r2
   35b80:	e024      	b.n	35bcc <__aeabi_dadd+0xb0>
   35b82:	4bc6      	ldr	r3, [pc, #792]	; (35e9c <__aeabi_dadd+0x380>)
   35b84:	429e      	cmp	r6, r3
   35b86:	d04d      	beq.n	35c24 <__aeabi_dadd+0x108>
   35b88:	2380      	movs	r3, #128	; 0x80
   35b8a:	041b      	lsls	r3, r3, #16
   35b8c:	4319      	orrs	r1, r3
   35b8e:	2d38      	cmp	r5, #56	; 0x38
   35b90:	dd00      	ble.n	35b94 <__aeabi_dadd+0x78>
   35b92:	e107      	b.n	35da4 <__aeabi_dadd+0x288>
   35b94:	2d1f      	cmp	r5, #31
   35b96:	dd00      	ble.n	35b9a <__aeabi_dadd+0x7e>
   35b98:	e138      	b.n	35e0c <__aeabi_dadd+0x2f0>
   35b9a:	2020      	movs	r0, #32
   35b9c:	1b43      	subs	r3, r0, r5
   35b9e:	469a      	mov	sl, r3
   35ba0:	000b      	movs	r3, r1
   35ba2:	4650      	mov	r0, sl
   35ba4:	4083      	lsls	r3, r0
   35ba6:	4699      	mov	r9, r3
   35ba8:	0013      	movs	r3, r2
   35baa:	4648      	mov	r0, r9
   35bac:	40eb      	lsrs	r3, r5
   35bae:	4318      	orrs	r0, r3
   35bb0:	0003      	movs	r3, r0
   35bb2:	4650      	mov	r0, sl
   35bb4:	4082      	lsls	r2, r0
   35bb6:	1e50      	subs	r0, r2, #1
   35bb8:	4182      	sbcs	r2, r0
   35bba:	40e9      	lsrs	r1, r5
   35bbc:	431a      	orrs	r2, r3
   35bbe:	1aba      	subs	r2, r7, r2
   35bc0:	1a61      	subs	r1, r4, r1
   35bc2:	4297      	cmp	r7, r2
   35bc4:	41a4      	sbcs	r4, r4
   35bc6:	0017      	movs	r7, r2
   35bc8:	4264      	negs	r4, r4
   35bca:	1b0c      	subs	r4, r1, r4
   35bcc:	0223      	lsls	r3, r4, #8
   35bce:	d562      	bpl.n	35c96 <__aeabi_dadd+0x17a>
   35bd0:	0264      	lsls	r4, r4, #9
   35bd2:	0a65      	lsrs	r5, r4, #9
   35bd4:	2d00      	cmp	r5, #0
   35bd6:	d100      	bne.n	35bda <__aeabi_dadd+0xbe>
   35bd8:	e0df      	b.n	35d9a <__aeabi_dadd+0x27e>
   35bda:	0028      	movs	r0, r5
   35bdc:	f001 fcc0 	bl	37560 <__clzsi2>
   35be0:	0003      	movs	r3, r0
   35be2:	3b08      	subs	r3, #8
   35be4:	2b1f      	cmp	r3, #31
   35be6:	dd00      	ble.n	35bea <__aeabi_dadd+0xce>
   35be8:	e0d2      	b.n	35d90 <__aeabi_dadd+0x274>
   35bea:	2220      	movs	r2, #32
   35bec:	003c      	movs	r4, r7
   35bee:	1ad2      	subs	r2, r2, r3
   35bf0:	409d      	lsls	r5, r3
   35bf2:	40d4      	lsrs	r4, r2
   35bf4:	409f      	lsls	r7, r3
   35bf6:	4325      	orrs	r5, r4
   35bf8:	429e      	cmp	r6, r3
   35bfa:	dd00      	ble.n	35bfe <__aeabi_dadd+0xe2>
   35bfc:	e0c4      	b.n	35d88 <__aeabi_dadd+0x26c>
   35bfe:	1b9e      	subs	r6, r3, r6
   35c00:	1c73      	adds	r3, r6, #1
   35c02:	2b1f      	cmp	r3, #31
   35c04:	dd00      	ble.n	35c08 <__aeabi_dadd+0xec>
   35c06:	e0f1      	b.n	35dec <__aeabi_dadd+0x2d0>
   35c08:	2220      	movs	r2, #32
   35c0a:	0038      	movs	r0, r7
   35c0c:	0029      	movs	r1, r5
   35c0e:	1ad2      	subs	r2, r2, r3
   35c10:	40d8      	lsrs	r0, r3
   35c12:	4091      	lsls	r1, r2
   35c14:	4097      	lsls	r7, r2
   35c16:	002c      	movs	r4, r5
   35c18:	4301      	orrs	r1, r0
   35c1a:	1e78      	subs	r0, r7, #1
   35c1c:	4187      	sbcs	r7, r0
   35c1e:	40dc      	lsrs	r4, r3
   35c20:	2600      	movs	r6, #0
   35c22:	430f      	orrs	r7, r1
   35c24:	077b      	lsls	r3, r7, #29
   35c26:	d009      	beq.n	35c3c <__aeabi_dadd+0x120>
   35c28:	230f      	movs	r3, #15
   35c2a:	403b      	ands	r3, r7
   35c2c:	2b04      	cmp	r3, #4
   35c2e:	d005      	beq.n	35c3c <__aeabi_dadd+0x120>
   35c30:	1d3b      	adds	r3, r7, #4
   35c32:	42bb      	cmp	r3, r7
   35c34:	41bf      	sbcs	r7, r7
   35c36:	427f      	negs	r7, r7
   35c38:	19e4      	adds	r4, r4, r7
   35c3a:	001f      	movs	r7, r3
   35c3c:	0223      	lsls	r3, r4, #8
   35c3e:	d52c      	bpl.n	35c9a <__aeabi_dadd+0x17e>
   35c40:	4b96      	ldr	r3, [pc, #600]	; (35e9c <__aeabi_dadd+0x380>)
   35c42:	3601      	adds	r6, #1
   35c44:	429e      	cmp	r6, r3
   35c46:	d100      	bne.n	35c4a <__aeabi_dadd+0x12e>
   35c48:	e09a      	b.n	35d80 <__aeabi_dadd+0x264>
   35c4a:	4645      	mov	r5, r8
   35c4c:	4b94      	ldr	r3, [pc, #592]	; (35ea0 <__aeabi_dadd+0x384>)
   35c4e:	08ff      	lsrs	r7, r7, #3
   35c50:	401c      	ands	r4, r3
   35c52:	0760      	lsls	r0, r4, #29
   35c54:	0576      	lsls	r6, r6, #21
   35c56:	0264      	lsls	r4, r4, #9
   35c58:	4307      	orrs	r7, r0
   35c5a:	0b24      	lsrs	r4, r4, #12
   35c5c:	0d76      	lsrs	r6, r6, #21
   35c5e:	2100      	movs	r1, #0
   35c60:	0324      	lsls	r4, r4, #12
   35c62:	0b23      	lsrs	r3, r4, #12
   35c64:	0d0c      	lsrs	r4, r1, #20
   35c66:	4a8f      	ldr	r2, [pc, #572]	; (35ea4 <__aeabi_dadd+0x388>)
   35c68:	0524      	lsls	r4, r4, #20
   35c6a:	431c      	orrs	r4, r3
   35c6c:	4014      	ands	r4, r2
   35c6e:	0533      	lsls	r3, r6, #20
   35c70:	4323      	orrs	r3, r4
   35c72:	005b      	lsls	r3, r3, #1
   35c74:	07ed      	lsls	r5, r5, #31
   35c76:	085b      	lsrs	r3, r3, #1
   35c78:	432b      	orrs	r3, r5
   35c7a:	0038      	movs	r0, r7
   35c7c:	0019      	movs	r1, r3
   35c7e:	bc3c      	pop	{r2, r3, r4, r5}
   35c80:	4690      	mov	r8, r2
   35c82:	4699      	mov	r9, r3
   35c84:	46a2      	mov	sl, r4
   35c86:	46ab      	mov	fp, r5
   35c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c8a:	4664      	mov	r4, ip
   35c8c:	4304      	orrs	r4, r0
   35c8e:	d100      	bne.n	35c92 <__aeabi_dadd+0x176>
   35c90:	e211      	b.n	360b6 <__aeabi_dadd+0x59a>
   35c92:	0004      	movs	r4, r0
   35c94:	4667      	mov	r7, ip
   35c96:	077b      	lsls	r3, r7, #29
   35c98:	d1c6      	bne.n	35c28 <__aeabi_dadd+0x10c>
   35c9a:	4645      	mov	r5, r8
   35c9c:	0760      	lsls	r0, r4, #29
   35c9e:	08ff      	lsrs	r7, r7, #3
   35ca0:	4307      	orrs	r7, r0
   35ca2:	08e4      	lsrs	r4, r4, #3
   35ca4:	4b7d      	ldr	r3, [pc, #500]	; (35e9c <__aeabi_dadd+0x380>)
   35ca6:	429e      	cmp	r6, r3
   35ca8:	d030      	beq.n	35d0c <__aeabi_dadd+0x1f0>
   35caa:	0324      	lsls	r4, r4, #12
   35cac:	0576      	lsls	r6, r6, #21
   35cae:	0b24      	lsrs	r4, r4, #12
   35cb0:	0d76      	lsrs	r6, r6, #21
   35cb2:	e7d4      	b.n	35c5e <__aeabi_dadd+0x142>
   35cb4:	1a33      	subs	r3, r6, r0
   35cb6:	469a      	mov	sl, r3
   35cb8:	2b00      	cmp	r3, #0
   35cba:	dd78      	ble.n	35dae <__aeabi_dadd+0x292>
   35cbc:	2800      	cmp	r0, #0
   35cbe:	d031      	beq.n	35d24 <__aeabi_dadd+0x208>
   35cc0:	4876      	ldr	r0, [pc, #472]	; (35e9c <__aeabi_dadd+0x380>)
   35cc2:	4286      	cmp	r6, r0
   35cc4:	d0ae      	beq.n	35c24 <__aeabi_dadd+0x108>
   35cc6:	2080      	movs	r0, #128	; 0x80
   35cc8:	0400      	lsls	r0, r0, #16
   35cca:	4301      	orrs	r1, r0
   35ccc:	4653      	mov	r3, sl
   35cce:	2b38      	cmp	r3, #56	; 0x38
   35cd0:	dc00      	bgt.n	35cd4 <__aeabi_dadd+0x1b8>
   35cd2:	e0e9      	b.n	35ea8 <__aeabi_dadd+0x38c>
   35cd4:	430a      	orrs	r2, r1
   35cd6:	1e51      	subs	r1, r2, #1
   35cd8:	418a      	sbcs	r2, r1
   35cda:	2100      	movs	r1, #0
   35cdc:	19d2      	adds	r2, r2, r7
   35cde:	42ba      	cmp	r2, r7
   35ce0:	41bf      	sbcs	r7, r7
   35ce2:	1909      	adds	r1, r1, r4
   35ce4:	427c      	negs	r4, r7
   35ce6:	0017      	movs	r7, r2
   35ce8:	190c      	adds	r4, r1, r4
   35cea:	0223      	lsls	r3, r4, #8
   35cec:	d5d3      	bpl.n	35c96 <__aeabi_dadd+0x17a>
   35cee:	4b6b      	ldr	r3, [pc, #428]	; (35e9c <__aeabi_dadd+0x380>)
   35cf0:	3601      	adds	r6, #1
   35cf2:	429e      	cmp	r6, r3
   35cf4:	d100      	bne.n	35cf8 <__aeabi_dadd+0x1dc>
   35cf6:	e13a      	b.n	35f6e <__aeabi_dadd+0x452>
   35cf8:	2001      	movs	r0, #1
   35cfa:	4b69      	ldr	r3, [pc, #420]	; (35ea0 <__aeabi_dadd+0x384>)
   35cfc:	401c      	ands	r4, r3
   35cfe:	087b      	lsrs	r3, r7, #1
   35d00:	4007      	ands	r7, r0
   35d02:	431f      	orrs	r7, r3
   35d04:	07e0      	lsls	r0, r4, #31
   35d06:	4307      	orrs	r7, r0
   35d08:	0864      	lsrs	r4, r4, #1
   35d0a:	e78b      	b.n	35c24 <__aeabi_dadd+0x108>
   35d0c:	0023      	movs	r3, r4
   35d0e:	433b      	orrs	r3, r7
   35d10:	d100      	bne.n	35d14 <__aeabi_dadd+0x1f8>
   35d12:	e1cb      	b.n	360ac <__aeabi_dadd+0x590>
   35d14:	2280      	movs	r2, #128	; 0x80
   35d16:	0312      	lsls	r2, r2, #12
   35d18:	4314      	orrs	r4, r2
   35d1a:	0324      	lsls	r4, r4, #12
   35d1c:	0b24      	lsrs	r4, r4, #12
   35d1e:	e79e      	b.n	35c5e <__aeabi_dadd+0x142>
   35d20:	002e      	movs	r6, r5
   35d22:	e77f      	b.n	35c24 <__aeabi_dadd+0x108>
   35d24:	0008      	movs	r0, r1
   35d26:	4310      	orrs	r0, r2
   35d28:	d100      	bne.n	35d2c <__aeabi_dadd+0x210>
   35d2a:	e0b4      	b.n	35e96 <__aeabi_dadd+0x37a>
   35d2c:	1e58      	subs	r0, r3, #1
   35d2e:	2800      	cmp	r0, #0
   35d30:	d000      	beq.n	35d34 <__aeabi_dadd+0x218>
   35d32:	e0de      	b.n	35ef2 <__aeabi_dadd+0x3d6>
   35d34:	18ba      	adds	r2, r7, r2
   35d36:	42ba      	cmp	r2, r7
   35d38:	419b      	sbcs	r3, r3
   35d3a:	1864      	adds	r4, r4, r1
   35d3c:	425b      	negs	r3, r3
   35d3e:	18e4      	adds	r4, r4, r3
   35d40:	0017      	movs	r7, r2
   35d42:	2601      	movs	r6, #1
   35d44:	0223      	lsls	r3, r4, #8
   35d46:	d5a6      	bpl.n	35c96 <__aeabi_dadd+0x17a>
   35d48:	2602      	movs	r6, #2
   35d4a:	e7d5      	b.n	35cf8 <__aeabi_dadd+0x1dc>
   35d4c:	2d00      	cmp	r5, #0
   35d4e:	d16e      	bne.n	35e2e <__aeabi_dadd+0x312>
   35d50:	1c70      	adds	r0, r6, #1
   35d52:	0540      	lsls	r0, r0, #21
   35d54:	0d40      	lsrs	r0, r0, #21
   35d56:	2801      	cmp	r0, #1
   35d58:	dc00      	bgt.n	35d5c <__aeabi_dadd+0x240>
   35d5a:	e0f9      	b.n	35f50 <__aeabi_dadd+0x434>
   35d5c:	1ab8      	subs	r0, r7, r2
   35d5e:	4684      	mov	ip, r0
   35d60:	4287      	cmp	r7, r0
   35d62:	4180      	sbcs	r0, r0
   35d64:	1ae5      	subs	r5, r4, r3
   35d66:	4240      	negs	r0, r0
   35d68:	1a2d      	subs	r5, r5, r0
   35d6a:	0228      	lsls	r0, r5, #8
   35d6c:	d400      	bmi.n	35d70 <__aeabi_dadd+0x254>
   35d6e:	e089      	b.n	35e84 <__aeabi_dadd+0x368>
   35d70:	1bd7      	subs	r7, r2, r7
   35d72:	42ba      	cmp	r2, r7
   35d74:	4192      	sbcs	r2, r2
   35d76:	1b1c      	subs	r4, r3, r4
   35d78:	4252      	negs	r2, r2
   35d7a:	1aa5      	subs	r5, r4, r2
   35d7c:	46d8      	mov	r8, fp
   35d7e:	e729      	b.n	35bd4 <__aeabi_dadd+0xb8>
   35d80:	4645      	mov	r5, r8
   35d82:	2400      	movs	r4, #0
   35d84:	2700      	movs	r7, #0
   35d86:	e76a      	b.n	35c5e <__aeabi_dadd+0x142>
   35d88:	4c45      	ldr	r4, [pc, #276]	; (35ea0 <__aeabi_dadd+0x384>)
   35d8a:	1af6      	subs	r6, r6, r3
   35d8c:	402c      	ands	r4, r5
   35d8e:	e749      	b.n	35c24 <__aeabi_dadd+0x108>
   35d90:	003d      	movs	r5, r7
   35d92:	3828      	subs	r0, #40	; 0x28
   35d94:	4085      	lsls	r5, r0
   35d96:	2700      	movs	r7, #0
   35d98:	e72e      	b.n	35bf8 <__aeabi_dadd+0xdc>
   35d9a:	0038      	movs	r0, r7
   35d9c:	f001 fbe0 	bl	37560 <__clzsi2>
   35da0:	3020      	adds	r0, #32
   35da2:	e71d      	b.n	35be0 <__aeabi_dadd+0xc4>
   35da4:	430a      	orrs	r2, r1
   35da6:	1e51      	subs	r1, r2, #1
   35da8:	418a      	sbcs	r2, r1
   35daa:	2100      	movs	r1, #0
   35dac:	e707      	b.n	35bbe <__aeabi_dadd+0xa2>
   35dae:	2b00      	cmp	r3, #0
   35db0:	d000      	beq.n	35db4 <__aeabi_dadd+0x298>
   35db2:	e0f3      	b.n	35f9c <__aeabi_dadd+0x480>
   35db4:	1c70      	adds	r0, r6, #1
   35db6:	0543      	lsls	r3, r0, #21
   35db8:	0d5b      	lsrs	r3, r3, #21
   35dba:	2b01      	cmp	r3, #1
   35dbc:	dc00      	bgt.n	35dc0 <__aeabi_dadd+0x2a4>
   35dbe:	e0ad      	b.n	35f1c <__aeabi_dadd+0x400>
   35dc0:	4b36      	ldr	r3, [pc, #216]	; (35e9c <__aeabi_dadd+0x380>)
   35dc2:	4298      	cmp	r0, r3
   35dc4:	d100      	bne.n	35dc8 <__aeabi_dadd+0x2ac>
   35dc6:	e0d1      	b.n	35f6c <__aeabi_dadd+0x450>
   35dc8:	18ba      	adds	r2, r7, r2
   35dca:	42ba      	cmp	r2, r7
   35dcc:	41bf      	sbcs	r7, r7
   35dce:	1864      	adds	r4, r4, r1
   35dd0:	427f      	negs	r7, r7
   35dd2:	19e4      	adds	r4, r4, r7
   35dd4:	07e7      	lsls	r7, r4, #31
   35dd6:	0852      	lsrs	r2, r2, #1
   35dd8:	4317      	orrs	r7, r2
   35dda:	0864      	lsrs	r4, r4, #1
   35ddc:	0006      	movs	r6, r0
   35dde:	e721      	b.n	35c24 <__aeabi_dadd+0x108>
   35de0:	482e      	ldr	r0, [pc, #184]	; (35e9c <__aeabi_dadd+0x380>)
   35de2:	4285      	cmp	r5, r0
   35de4:	d100      	bne.n	35de8 <__aeabi_dadd+0x2cc>
   35de6:	e093      	b.n	35f10 <__aeabi_dadd+0x3f4>
   35de8:	001d      	movs	r5, r3
   35dea:	e6d0      	b.n	35b8e <__aeabi_dadd+0x72>
   35dec:	0029      	movs	r1, r5
   35dee:	3e1f      	subs	r6, #31
   35df0:	40f1      	lsrs	r1, r6
   35df2:	2b20      	cmp	r3, #32
   35df4:	d100      	bne.n	35df8 <__aeabi_dadd+0x2dc>
   35df6:	e08d      	b.n	35f14 <__aeabi_dadd+0x3f8>
   35df8:	2240      	movs	r2, #64	; 0x40
   35dfa:	1ad3      	subs	r3, r2, r3
   35dfc:	409d      	lsls	r5, r3
   35dfe:	432f      	orrs	r7, r5
   35e00:	1e7d      	subs	r5, r7, #1
   35e02:	41af      	sbcs	r7, r5
   35e04:	2400      	movs	r4, #0
   35e06:	430f      	orrs	r7, r1
   35e08:	2600      	movs	r6, #0
   35e0a:	e744      	b.n	35c96 <__aeabi_dadd+0x17a>
   35e0c:	002b      	movs	r3, r5
   35e0e:	0008      	movs	r0, r1
   35e10:	3b20      	subs	r3, #32
   35e12:	40d8      	lsrs	r0, r3
   35e14:	0003      	movs	r3, r0
   35e16:	2d20      	cmp	r5, #32
   35e18:	d100      	bne.n	35e1c <__aeabi_dadd+0x300>
   35e1a:	e07d      	b.n	35f18 <__aeabi_dadd+0x3fc>
   35e1c:	2040      	movs	r0, #64	; 0x40
   35e1e:	1b45      	subs	r5, r0, r5
   35e20:	40a9      	lsls	r1, r5
   35e22:	430a      	orrs	r2, r1
   35e24:	1e51      	subs	r1, r2, #1
   35e26:	418a      	sbcs	r2, r1
   35e28:	2100      	movs	r1, #0
   35e2a:	431a      	orrs	r2, r3
   35e2c:	e6c7      	b.n	35bbe <__aeabi_dadd+0xa2>
   35e2e:	2e00      	cmp	r6, #0
   35e30:	d050      	beq.n	35ed4 <__aeabi_dadd+0x3b8>
   35e32:	4e1a      	ldr	r6, [pc, #104]	; (35e9c <__aeabi_dadd+0x380>)
   35e34:	42b0      	cmp	r0, r6
   35e36:	d057      	beq.n	35ee8 <__aeabi_dadd+0x3cc>
   35e38:	2680      	movs	r6, #128	; 0x80
   35e3a:	426b      	negs	r3, r5
   35e3c:	4699      	mov	r9, r3
   35e3e:	0436      	lsls	r6, r6, #16
   35e40:	4334      	orrs	r4, r6
   35e42:	464b      	mov	r3, r9
   35e44:	2b38      	cmp	r3, #56	; 0x38
   35e46:	dd00      	ble.n	35e4a <__aeabi_dadd+0x32e>
   35e48:	e0d6      	b.n	35ff8 <__aeabi_dadd+0x4dc>
   35e4a:	2b1f      	cmp	r3, #31
   35e4c:	dd00      	ble.n	35e50 <__aeabi_dadd+0x334>
   35e4e:	e135      	b.n	360bc <__aeabi_dadd+0x5a0>
   35e50:	2620      	movs	r6, #32
   35e52:	1af5      	subs	r5, r6, r3
   35e54:	0026      	movs	r6, r4
   35e56:	40ae      	lsls	r6, r5
   35e58:	46b2      	mov	sl, r6
   35e5a:	003e      	movs	r6, r7
   35e5c:	40de      	lsrs	r6, r3
   35e5e:	46ac      	mov	ip, r5
   35e60:	0035      	movs	r5, r6
   35e62:	4656      	mov	r6, sl
   35e64:	432e      	orrs	r6, r5
   35e66:	4665      	mov	r5, ip
   35e68:	40af      	lsls	r7, r5
   35e6a:	1e7d      	subs	r5, r7, #1
   35e6c:	41af      	sbcs	r7, r5
   35e6e:	40dc      	lsrs	r4, r3
   35e70:	4337      	orrs	r7, r6
   35e72:	1bd7      	subs	r7, r2, r7
   35e74:	42ba      	cmp	r2, r7
   35e76:	4192      	sbcs	r2, r2
   35e78:	1b0c      	subs	r4, r1, r4
   35e7a:	4252      	negs	r2, r2
   35e7c:	1aa4      	subs	r4, r4, r2
   35e7e:	0006      	movs	r6, r0
   35e80:	46d8      	mov	r8, fp
   35e82:	e6a3      	b.n	35bcc <__aeabi_dadd+0xb0>
   35e84:	4664      	mov	r4, ip
   35e86:	4667      	mov	r7, ip
   35e88:	432c      	orrs	r4, r5
   35e8a:	d000      	beq.n	35e8e <__aeabi_dadd+0x372>
   35e8c:	e6a2      	b.n	35bd4 <__aeabi_dadd+0xb8>
   35e8e:	2500      	movs	r5, #0
   35e90:	2600      	movs	r6, #0
   35e92:	2700      	movs	r7, #0
   35e94:	e706      	b.n	35ca4 <__aeabi_dadd+0x188>
   35e96:	001e      	movs	r6, r3
   35e98:	e6c4      	b.n	35c24 <__aeabi_dadd+0x108>
   35e9a:	46c0      	nop			; (mov r8, r8)
   35e9c:	000007ff 	.word	0x000007ff
   35ea0:	ff7fffff 	.word	0xff7fffff
   35ea4:	800fffff 	.word	0x800fffff
   35ea8:	2b1f      	cmp	r3, #31
   35eaa:	dc63      	bgt.n	35f74 <__aeabi_dadd+0x458>
   35eac:	2020      	movs	r0, #32
   35eae:	1ac3      	subs	r3, r0, r3
   35eb0:	0008      	movs	r0, r1
   35eb2:	4098      	lsls	r0, r3
   35eb4:	469c      	mov	ip, r3
   35eb6:	4683      	mov	fp, r0
   35eb8:	4653      	mov	r3, sl
   35eba:	0010      	movs	r0, r2
   35ebc:	40d8      	lsrs	r0, r3
   35ebe:	0003      	movs	r3, r0
   35ec0:	4658      	mov	r0, fp
   35ec2:	4318      	orrs	r0, r3
   35ec4:	4663      	mov	r3, ip
   35ec6:	409a      	lsls	r2, r3
   35ec8:	1e53      	subs	r3, r2, #1
   35eca:	419a      	sbcs	r2, r3
   35ecc:	4653      	mov	r3, sl
   35ece:	4302      	orrs	r2, r0
   35ed0:	40d9      	lsrs	r1, r3
   35ed2:	e703      	b.n	35cdc <__aeabi_dadd+0x1c0>
   35ed4:	0026      	movs	r6, r4
   35ed6:	433e      	orrs	r6, r7
   35ed8:	d006      	beq.n	35ee8 <__aeabi_dadd+0x3cc>
   35eda:	43eb      	mvns	r3, r5
   35edc:	4699      	mov	r9, r3
   35ede:	2b00      	cmp	r3, #0
   35ee0:	d0c7      	beq.n	35e72 <__aeabi_dadd+0x356>
   35ee2:	4e94      	ldr	r6, [pc, #592]	; (36134 <__aeabi_dadd+0x618>)
   35ee4:	42b0      	cmp	r0, r6
   35ee6:	d1ac      	bne.n	35e42 <__aeabi_dadd+0x326>
   35ee8:	000c      	movs	r4, r1
   35eea:	0017      	movs	r7, r2
   35eec:	0006      	movs	r6, r0
   35eee:	46d8      	mov	r8, fp
   35ef0:	e698      	b.n	35c24 <__aeabi_dadd+0x108>
   35ef2:	4b90      	ldr	r3, [pc, #576]	; (36134 <__aeabi_dadd+0x618>)
   35ef4:	459a      	cmp	sl, r3
   35ef6:	d00b      	beq.n	35f10 <__aeabi_dadd+0x3f4>
   35ef8:	4682      	mov	sl, r0
   35efa:	e6e7      	b.n	35ccc <__aeabi_dadd+0x1b0>
   35efc:	2800      	cmp	r0, #0
   35efe:	d000      	beq.n	35f02 <__aeabi_dadd+0x3e6>
   35f00:	e09e      	b.n	36040 <__aeabi_dadd+0x524>
   35f02:	0018      	movs	r0, r3
   35f04:	4310      	orrs	r0, r2
   35f06:	d100      	bne.n	35f0a <__aeabi_dadd+0x3ee>
   35f08:	e0e9      	b.n	360de <__aeabi_dadd+0x5c2>
   35f0a:	001c      	movs	r4, r3
   35f0c:	0017      	movs	r7, r2
   35f0e:	46d8      	mov	r8, fp
   35f10:	4e88      	ldr	r6, [pc, #544]	; (36134 <__aeabi_dadd+0x618>)
   35f12:	e687      	b.n	35c24 <__aeabi_dadd+0x108>
   35f14:	2500      	movs	r5, #0
   35f16:	e772      	b.n	35dfe <__aeabi_dadd+0x2e2>
   35f18:	2100      	movs	r1, #0
   35f1a:	e782      	b.n	35e22 <__aeabi_dadd+0x306>
   35f1c:	0023      	movs	r3, r4
   35f1e:	433b      	orrs	r3, r7
   35f20:	2e00      	cmp	r6, #0
   35f22:	d000      	beq.n	35f26 <__aeabi_dadd+0x40a>
   35f24:	e0ab      	b.n	3607e <__aeabi_dadd+0x562>
   35f26:	2b00      	cmp	r3, #0
   35f28:	d100      	bne.n	35f2c <__aeabi_dadd+0x410>
   35f2a:	e0e7      	b.n	360fc <__aeabi_dadd+0x5e0>
   35f2c:	000b      	movs	r3, r1
   35f2e:	4313      	orrs	r3, r2
   35f30:	d100      	bne.n	35f34 <__aeabi_dadd+0x418>
   35f32:	e677      	b.n	35c24 <__aeabi_dadd+0x108>
   35f34:	18ba      	adds	r2, r7, r2
   35f36:	42ba      	cmp	r2, r7
   35f38:	41bf      	sbcs	r7, r7
   35f3a:	1864      	adds	r4, r4, r1
   35f3c:	427f      	negs	r7, r7
   35f3e:	19e4      	adds	r4, r4, r7
   35f40:	0223      	lsls	r3, r4, #8
   35f42:	d400      	bmi.n	35f46 <__aeabi_dadd+0x42a>
   35f44:	e0f2      	b.n	3612c <__aeabi_dadd+0x610>
   35f46:	4b7c      	ldr	r3, [pc, #496]	; (36138 <__aeabi_dadd+0x61c>)
   35f48:	0017      	movs	r7, r2
   35f4a:	401c      	ands	r4, r3
   35f4c:	0006      	movs	r6, r0
   35f4e:	e669      	b.n	35c24 <__aeabi_dadd+0x108>
   35f50:	0020      	movs	r0, r4
   35f52:	4338      	orrs	r0, r7
   35f54:	2e00      	cmp	r6, #0
   35f56:	d1d1      	bne.n	35efc <__aeabi_dadd+0x3e0>
   35f58:	2800      	cmp	r0, #0
   35f5a:	d15b      	bne.n	36014 <__aeabi_dadd+0x4f8>
   35f5c:	001c      	movs	r4, r3
   35f5e:	4314      	orrs	r4, r2
   35f60:	d100      	bne.n	35f64 <__aeabi_dadd+0x448>
   35f62:	e0a8      	b.n	360b6 <__aeabi_dadd+0x59a>
   35f64:	001c      	movs	r4, r3
   35f66:	0017      	movs	r7, r2
   35f68:	46d8      	mov	r8, fp
   35f6a:	e65b      	b.n	35c24 <__aeabi_dadd+0x108>
   35f6c:	0006      	movs	r6, r0
   35f6e:	2400      	movs	r4, #0
   35f70:	2700      	movs	r7, #0
   35f72:	e697      	b.n	35ca4 <__aeabi_dadd+0x188>
   35f74:	4650      	mov	r0, sl
   35f76:	000b      	movs	r3, r1
   35f78:	3820      	subs	r0, #32
   35f7a:	40c3      	lsrs	r3, r0
   35f7c:	4699      	mov	r9, r3
   35f7e:	4653      	mov	r3, sl
   35f80:	2b20      	cmp	r3, #32
   35f82:	d100      	bne.n	35f86 <__aeabi_dadd+0x46a>
   35f84:	e095      	b.n	360b2 <__aeabi_dadd+0x596>
   35f86:	2340      	movs	r3, #64	; 0x40
   35f88:	4650      	mov	r0, sl
   35f8a:	1a1b      	subs	r3, r3, r0
   35f8c:	4099      	lsls	r1, r3
   35f8e:	430a      	orrs	r2, r1
   35f90:	1e51      	subs	r1, r2, #1
   35f92:	418a      	sbcs	r2, r1
   35f94:	464b      	mov	r3, r9
   35f96:	2100      	movs	r1, #0
   35f98:	431a      	orrs	r2, r3
   35f9a:	e69f      	b.n	35cdc <__aeabi_dadd+0x1c0>
   35f9c:	2e00      	cmp	r6, #0
   35f9e:	d130      	bne.n	36002 <__aeabi_dadd+0x4e6>
   35fa0:	0026      	movs	r6, r4
   35fa2:	433e      	orrs	r6, r7
   35fa4:	d067      	beq.n	36076 <__aeabi_dadd+0x55a>
   35fa6:	43db      	mvns	r3, r3
   35fa8:	469a      	mov	sl, r3
   35faa:	2b00      	cmp	r3, #0
   35fac:	d01c      	beq.n	35fe8 <__aeabi_dadd+0x4cc>
   35fae:	4e61      	ldr	r6, [pc, #388]	; (36134 <__aeabi_dadd+0x618>)
   35fb0:	42b0      	cmp	r0, r6
   35fb2:	d060      	beq.n	36076 <__aeabi_dadd+0x55a>
   35fb4:	4653      	mov	r3, sl
   35fb6:	2b38      	cmp	r3, #56	; 0x38
   35fb8:	dd00      	ble.n	35fbc <__aeabi_dadd+0x4a0>
   35fba:	e096      	b.n	360ea <__aeabi_dadd+0x5ce>
   35fbc:	2b1f      	cmp	r3, #31
   35fbe:	dd00      	ble.n	35fc2 <__aeabi_dadd+0x4a6>
   35fc0:	e09f      	b.n	36102 <__aeabi_dadd+0x5e6>
   35fc2:	2620      	movs	r6, #32
   35fc4:	1af3      	subs	r3, r6, r3
   35fc6:	0026      	movs	r6, r4
   35fc8:	409e      	lsls	r6, r3
   35fca:	469c      	mov	ip, r3
   35fcc:	46b3      	mov	fp, r6
   35fce:	4653      	mov	r3, sl
   35fd0:	003e      	movs	r6, r7
   35fd2:	40de      	lsrs	r6, r3
   35fd4:	0033      	movs	r3, r6
   35fd6:	465e      	mov	r6, fp
   35fd8:	431e      	orrs	r6, r3
   35fda:	4663      	mov	r3, ip
   35fdc:	409f      	lsls	r7, r3
   35fde:	1e7b      	subs	r3, r7, #1
   35fe0:	419f      	sbcs	r7, r3
   35fe2:	4653      	mov	r3, sl
   35fe4:	40dc      	lsrs	r4, r3
   35fe6:	4337      	orrs	r7, r6
   35fe8:	18bf      	adds	r7, r7, r2
   35fea:	4297      	cmp	r7, r2
   35fec:	4192      	sbcs	r2, r2
   35fee:	1864      	adds	r4, r4, r1
   35ff0:	4252      	negs	r2, r2
   35ff2:	18a4      	adds	r4, r4, r2
   35ff4:	0006      	movs	r6, r0
   35ff6:	e678      	b.n	35cea <__aeabi_dadd+0x1ce>
   35ff8:	4327      	orrs	r7, r4
   35ffa:	1e7c      	subs	r4, r7, #1
   35ffc:	41a7      	sbcs	r7, r4
   35ffe:	2400      	movs	r4, #0
   36000:	e737      	b.n	35e72 <__aeabi_dadd+0x356>
   36002:	4e4c      	ldr	r6, [pc, #304]	; (36134 <__aeabi_dadd+0x618>)
   36004:	42b0      	cmp	r0, r6
   36006:	d036      	beq.n	36076 <__aeabi_dadd+0x55a>
   36008:	2680      	movs	r6, #128	; 0x80
   3600a:	425b      	negs	r3, r3
   3600c:	0436      	lsls	r6, r6, #16
   3600e:	469a      	mov	sl, r3
   36010:	4334      	orrs	r4, r6
   36012:	e7cf      	b.n	35fb4 <__aeabi_dadd+0x498>
   36014:	0018      	movs	r0, r3
   36016:	4310      	orrs	r0, r2
   36018:	d100      	bne.n	3601c <__aeabi_dadd+0x500>
   3601a:	e603      	b.n	35c24 <__aeabi_dadd+0x108>
   3601c:	1ab8      	subs	r0, r7, r2
   3601e:	4684      	mov	ip, r0
   36020:	4567      	cmp	r7, ip
   36022:	41ad      	sbcs	r5, r5
   36024:	1ae0      	subs	r0, r4, r3
   36026:	426d      	negs	r5, r5
   36028:	1b40      	subs	r0, r0, r5
   3602a:	0205      	lsls	r5, r0, #8
   3602c:	d400      	bmi.n	36030 <__aeabi_dadd+0x514>
   3602e:	e62c      	b.n	35c8a <__aeabi_dadd+0x16e>
   36030:	1bd7      	subs	r7, r2, r7
   36032:	42ba      	cmp	r2, r7
   36034:	4192      	sbcs	r2, r2
   36036:	1b1c      	subs	r4, r3, r4
   36038:	4252      	negs	r2, r2
   3603a:	1aa4      	subs	r4, r4, r2
   3603c:	46d8      	mov	r8, fp
   3603e:	e5f1      	b.n	35c24 <__aeabi_dadd+0x108>
   36040:	0018      	movs	r0, r3
   36042:	4310      	orrs	r0, r2
   36044:	d100      	bne.n	36048 <__aeabi_dadd+0x52c>
   36046:	e763      	b.n	35f10 <__aeabi_dadd+0x3f4>
   36048:	08f8      	lsrs	r0, r7, #3
   3604a:	0767      	lsls	r7, r4, #29
   3604c:	4307      	orrs	r7, r0
   3604e:	2080      	movs	r0, #128	; 0x80
   36050:	08e4      	lsrs	r4, r4, #3
   36052:	0300      	lsls	r0, r0, #12
   36054:	4204      	tst	r4, r0
   36056:	d008      	beq.n	3606a <__aeabi_dadd+0x54e>
   36058:	08dd      	lsrs	r5, r3, #3
   3605a:	4205      	tst	r5, r0
   3605c:	d105      	bne.n	3606a <__aeabi_dadd+0x54e>
   3605e:	08d2      	lsrs	r2, r2, #3
   36060:	0759      	lsls	r1, r3, #29
   36062:	4311      	orrs	r1, r2
   36064:	000f      	movs	r7, r1
   36066:	002c      	movs	r4, r5
   36068:	46d8      	mov	r8, fp
   3606a:	0f7b      	lsrs	r3, r7, #29
   3606c:	00e4      	lsls	r4, r4, #3
   3606e:	431c      	orrs	r4, r3
   36070:	00ff      	lsls	r7, r7, #3
   36072:	4e30      	ldr	r6, [pc, #192]	; (36134 <__aeabi_dadd+0x618>)
   36074:	e5d6      	b.n	35c24 <__aeabi_dadd+0x108>
   36076:	000c      	movs	r4, r1
   36078:	0017      	movs	r7, r2
   3607a:	0006      	movs	r6, r0
   3607c:	e5d2      	b.n	35c24 <__aeabi_dadd+0x108>
   3607e:	2b00      	cmp	r3, #0
   36080:	d038      	beq.n	360f4 <__aeabi_dadd+0x5d8>
   36082:	000b      	movs	r3, r1
   36084:	4313      	orrs	r3, r2
   36086:	d100      	bne.n	3608a <__aeabi_dadd+0x56e>
   36088:	e742      	b.n	35f10 <__aeabi_dadd+0x3f4>
   3608a:	08f8      	lsrs	r0, r7, #3
   3608c:	0767      	lsls	r7, r4, #29
   3608e:	4307      	orrs	r7, r0
   36090:	2080      	movs	r0, #128	; 0x80
   36092:	08e4      	lsrs	r4, r4, #3
   36094:	0300      	lsls	r0, r0, #12
   36096:	4204      	tst	r4, r0
   36098:	d0e7      	beq.n	3606a <__aeabi_dadd+0x54e>
   3609a:	08cb      	lsrs	r3, r1, #3
   3609c:	4203      	tst	r3, r0
   3609e:	d1e4      	bne.n	3606a <__aeabi_dadd+0x54e>
   360a0:	08d2      	lsrs	r2, r2, #3
   360a2:	0749      	lsls	r1, r1, #29
   360a4:	4311      	orrs	r1, r2
   360a6:	000f      	movs	r7, r1
   360a8:	001c      	movs	r4, r3
   360aa:	e7de      	b.n	3606a <__aeabi_dadd+0x54e>
   360ac:	2700      	movs	r7, #0
   360ae:	2400      	movs	r4, #0
   360b0:	e5d5      	b.n	35c5e <__aeabi_dadd+0x142>
   360b2:	2100      	movs	r1, #0
   360b4:	e76b      	b.n	35f8e <__aeabi_dadd+0x472>
   360b6:	2500      	movs	r5, #0
   360b8:	2700      	movs	r7, #0
   360ba:	e5f3      	b.n	35ca4 <__aeabi_dadd+0x188>
   360bc:	464e      	mov	r6, r9
   360be:	0025      	movs	r5, r4
   360c0:	3e20      	subs	r6, #32
   360c2:	40f5      	lsrs	r5, r6
   360c4:	464b      	mov	r3, r9
   360c6:	002e      	movs	r6, r5
   360c8:	2b20      	cmp	r3, #32
   360ca:	d02d      	beq.n	36128 <__aeabi_dadd+0x60c>
   360cc:	2540      	movs	r5, #64	; 0x40
   360ce:	1aed      	subs	r5, r5, r3
   360d0:	40ac      	lsls	r4, r5
   360d2:	4327      	orrs	r7, r4
   360d4:	1e7c      	subs	r4, r7, #1
   360d6:	41a7      	sbcs	r7, r4
   360d8:	2400      	movs	r4, #0
   360da:	4337      	orrs	r7, r6
   360dc:	e6c9      	b.n	35e72 <__aeabi_dadd+0x356>
   360de:	2480      	movs	r4, #128	; 0x80
   360e0:	2500      	movs	r5, #0
   360e2:	0324      	lsls	r4, r4, #12
   360e4:	4e13      	ldr	r6, [pc, #76]	; (36134 <__aeabi_dadd+0x618>)
   360e6:	2700      	movs	r7, #0
   360e8:	e5dc      	b.n	35ca4 <__aeabi_dadd+0x188>
   360ea:	4327      	orrs	r7, r4
   360ec:	1e7c      	subs	r4, r7, #1
   360ee:	41a7      	sbcs	r7, r4
   360f0:	2400      	movs	r4, #0
   360f2:	e779      	b.n	35fe8 <__aeabi_dadd+0x4cc>
   360f4:	000c      	movs	r4, r1
   360f6:	0017      	movs	r7, r2
   360f8:	4e0e      	ldr	r6, [pc, #56]	; (36134 <__aeabi_dadd+0x618>)
   360fa:	e593      	b.n	35c24 <__aeabi_dadd+0x108>
   360fc:	000c      	movs	r4, r1
   360fe:	0017      	movs	r7, r2
   36100:	e590      	b.n	35c24 <__aeabi_dadd+0x108>
   36102:	4656      	mov	r6, sl
   36104:	0023      	movs	r3, r4
   36106:	3e20      	subs	r6, #32
   36108:	40f3      	lsrs	r3, r6
   3610a:	4699      	mov	r9, r3
   3610c:	4653      	mov	r3, sl
   3610e:	2b20      	cmp	r3, #32
   36110:	d00e      	beq.n	36130 <__aeabi_dadd+0x614>
   36112:	2340      	movs	r3, #64	; 0x40
   36114:	4656      	mov	r6, sl
   36116:	1b9b      	subs	r3, r3, r6
   36118:	409c      	lsls	r4, r3
   3611a:	4327      	orrs	r7, r4
   3611c:	1e7c      	subs	r4, r7, #1
   3611e:	41a7      	sbcs	r7, r4
   36120:	464b      	mov	r3, r9
   36122:	2400      	movs	r4, #0
   36124:	431f      	orrs	r7, r3
   36126:	e75f      	b.n	35fe8 <__aeabi_dadd+0x4cc>
   36128:	2400      	movs	r4, #0
   3612a:	e7d2      	b.n	360d2 <__aeabi_dadd+0x5b6>
   3612c:	0017      	movs	r7, r2
   3612e:	e5b2      	b.n	35c96 <__aeabi_dadd+0x17a>
   36130:	2400      	movs	r4, #0
   36132:	e7f2      	b.n	3611a <__aeabi_dadd+0x5fe>
   36134:	000007ff 	.word	0x000007ff
   36138:	ff7fffff 	.word	0xff7fffff

0003613c <__aeabi_ddiv>:
   3613c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3613e:	4657      	mov	r7, sl
   36140:	4645      	mov	r5, r8
   36142:	46de      	mov	lr, fp
   36144:	464e      	mov	r6, r9
   36146:	b5e0      	push	{r5, r6, r7, lr}
   36148:	004c      	lsls	r4, r1, #1
   3614a:	030e      	lsls	r6, r1, #12
   3614c:	b087      	sub	sp, #28
   3614e:	4683      	mov	fp, r0
   36150:	4692      	mov	sl, r2
   36152:	001d      	movs	r5, r3
   36154:	4680      	mov	r8, r0
   36156:	0b36      	lsrs	r6, r6, #12
   36158:	0d64      	lsrs	r4, r4, #21
   3615a:	0fcf      	lsrs	r7, r1, #31
   3615c:	2c00      	cmp	r4, #0
   3615e:	d04f      	beq.n	36200 <__aeabi_ddiv+0xc4>
   36160:	4b6f      	ldr	r3, [pc, #444]	; (36320 <__aeabi_ddiv+0x1e4>)
   36162:	429c      	cmp	r4, r3
   36164:	d035      	beq.n	361d2 <__aeabi_ddiv+0x96>
   36166:	2380      	movs	r3, #128	; 0x80
   36168:	0f42      	lsrs	r2, r0, #29
   3616a:	041b      	lsls	r3, r3, #16
   3616c:	00f6      	lsls	r6, r6, #3
   3616e:	4313      	orrs	r3, r2
   36170:	4333      	orrs	r3, r6
   36172:	4699      	mov	r9, r3
   36174:	00c3      	lsls	r3, r0, #3
   36176:	4698      	mov	r8, r3
   36178:	4b6a      	ldr	r3, [pc, #424]	; (36324 <__aeabi_ddiv+0x1e8>)
   3617a:	2600      	movs	r6, #0
   3617c:	469c      	mov	ip, r3
   3617e:	2300      	movs	r3, #0
   36180:	4464      	add	r4, ip
   36182:	9303      	str	r3, [sp, #12]
   36184:	032b      	lsls	r3, r5, #12
   36186:	0b1b      	lsrs	r3, r3, #12
   36188:	469b      	mov	fp, r3
   3618a:	006b      	lsls	r3, r5, #1
   3618c:	0fed      	lsrs	r5, r5, #31
   3618e:	4650      	mov	r0, sl
   36190:	0d5b      	lsrs	r3, r3, #21
   36192:	9501      	str	r5, [sp, #4]
   36194:	d05e      	beq.n	36254 <__aeabi_ddiv+0x118>
   36196:	4a62      	ldr	r2, [pc, #392]	; (36320 <__aeabi_ddiv+0x1e4>)
   36198:	4293      	cmp	r3, r2
   3619a:	d053      	beq.n	36244 <__aeabi_ddiv+0x108>
   3619c:	465a      	mov	r2, fp
   3619e:	00d1      	lsls	r1, r2, #3
   361a0:	2280      	movs	r2, #128	; 0x80
   361a2:	0f40      	lsrs	r0, r0, #29
   361a4:	0412      	lsls	r2, r2, #16
   361a6:	4302      	orrs	r2, r0
   361a8:	430a      	orrs	r2, r1
   361aa:	4693      	mov	fp, r2
   361ac:	4652      	mov	r2, sl
   361ae:	00d1      	lsls	r1, r2, #3
   361b0:	4a5c      	ldr	r2, [pc, #368]	; (36324 <__aeabi_ddiv+0x1e8>)
   361b2:	4694      	mov	ip, r2
   361b4:	2200      	movs	r2, #0
   361b6:	4463      	add	r3, ip
   361b8:	0038      	movs	r0, r7
   361ba:	4068      	eors	r0, r5
   361bc:	4684      	mov	ip, r0
   361be:	9002      	str	r0, [sp, #8]
   361c0:	1ae4      	subs	r4, r4, r3
   361c2:	4316      	orrs	r6, r2
   361c4:	2e0f      	cmp	r6, #15
   361c6:	d900      	bls.n	361ca <__aeabi_ddiv+0x8e>
   361c8:	e0b4      	b.n	36334 <__aeabi_ddiv+0x1f8>
   361ca:	4b57      	ldr	r3, [pc, #348]	; (36328 <__aeabi_ddiv+0x1ec>)
   361cc:	00b6      	lsls	r6, r6, #2
   361ce:	599b      	ldr	r3, [r3, r6]
   361d0:	469f      	mov	pc, r3
   361d2:	0003      	movs	r3, r0
   361d4:	4333      	orrs	r3, r6
   361d6:	4699      	mov	r9, r3
   361d8:	d16c      	bne.n	362b4 <__aeabi_ddiv+0x178>
   361da:	2300      	movs	r3, #0
   361dc:	4698      	mov	r8, r3
   361de:	3302      	adds	r3, #2
   361e0:	2608      	movs	r6, #8
   361e2:	9303      	str	r3, [sp, #12]
   361e4:	e7ce      	b.n	36184 <__aeabi_ddiv+0x48>
   361e6:	46cb      	mov	fp, r9
   361e8:	4641      	mov	r1, r8
   361ea:	9a03      	ldr	r2, [sp, #12]
   361ec:	9701      	str	r7, [sp, #4]
   361ee:	2a02      	cmp	r2, #2
   361f0:	d165      	bne.n	362be <__aeabi_ddiv+0x182>
   361f2:	9b01      	ldr	r3, [sp, #4]
   361f4:	4c4a      	ldr	r4, [pc, #296]	; (36320 <__aeabi_ddiv+0x1e4>)
   361f6:	469c      	mov	ip, r3
   361f8:	2300      	movs	r3, #0
   361fa:	2200      	movs	r2, #0
   361fc:	4698      	mov	r8, r3
   361fe:	e06b      	b.n	362d8 <__aeabi_ddiv+0x19c>
   36200:	0003      	movs	r3, r0
   36202:	4333      	orrs	r3, r6
   36204:	4699      	mov	r9, r3
   36206:	d04e      	beq.n	362a6 <__aeabi_ddiv+0x16a>
   36208:	2e00      	cmp	r6, #0
   3620a:	d100      	bne.n	3620e <__aeabi_ddiv+0xd2>
   3620c:	e1bc      	b.n	36588 <__aeabi_ddiv+0x44c>
   3620e:	0030      	movs	r0, r6
   36210:	f001 f9a6 	bl	37560 <__clzsi2>
   36214:	0003      	movs	r3, r0
   36216:	3b0b      	subs	r3, #11
   36218:	2b1c      	cmp	r3, #28
   3621a:	dd00      	ble.n	3621e <__aeabi_ddiv+0xe2>
   3621c:	e1ac      	b.n	36578 <__aeabi_ddiv+0x43c>
   3621e:	221d      	movs	r2, #29
   36220:	1ad3      	subs	r3, r2, r3
   36222:	465a      	mov	r2, fp
   36224:	0001      	movs	r1, r0
   36226:	40da      	lsrs	r2, r3
   36228:	3908      	subs	r1, #8
   3622a:	408e      	lsls	r6, r1
   3622c:	0013      	movs	r3, r2
   3622e:	4333      	orrs	r3, r6
   36230:	4699      	mov	r9, r3
   36232:	465b      	mov	r3, fp
   36234:	408b      	lsls	r3, r1
   36236:	4698      	mov	r8, r3
   36238:	2300      	movs	r3, #0
   3623a:	4c3c      	ldr	r4, [pc, #240]	; (3632c <__aeabi_ddiv+0x1f0>)
   3623c:	2600      	movs	r6, #0
   3623e:	1a24      	subs	r4, r4, r0
   36240:	9303      	str	r3, [sp, #12]
   36242:	e79f      	b.n	36184 <__aeabi_ddiv+0x48>
   36244:	4651      	mov	r1, sl
   36246:	465a      	mov	r2, fp
   36248:	4311      	orrs	r1, r2
   3624a:	d129      	bne.n	362a0 <__aeabi_ddiv+0x164>
   3624c:	2200      	movs	r2, #0
   3624e:	4693      	mov	fp, r2
   36250:	3202      	adds	r2, #2
   36252:	e7b1      	b.n	361b8 <__aeabi_ddiv+0x7c>
   36254:	4659      	mov	r1, fp
   36256:	4301      	orrs	r1, r0
   36258:	d01e      	beq.n	36298 <__aeabi_ddiv+0x15c>
   3625a:	465b      	mov	r3, fp
   3625c:	2b00      	cmp	r3, #0
   3625e:	d100      	bne.n	36262 <__aeabi_ddiv+0x126>
   36260:	e19e      	b.n	365a0 <__aeabi_ddiv+0x464>
   36262:	4658      	mov	r0, fp
   36264:	f001 f97c 	bl	37560 <__clzsi2>
   36268:	0003      	movs	r3, r0
   3626a:	3b0b      	subs	r3, #11
   3626c:	2b1c      	cmp	r3, #28
   3626e:	dd00      	ble.n	36272 <__aeabi_ddiv+0x136>
   36270:	e18f      	b.n	36592 <__aeabi_ddiv+0x456>
   36272:	0002      	movs	r2, r0
   36274:	4659      	mov	r1, fp
   36276:	3a08      	subs	r2, #8
   36278:	4091      	lsls	r1, r2
   3627a:	468b      	mov	fp, r1
   3627c:	211d      	movs	r1, #29
   3627e:	1acb      	subs	r3, r1, r3
   36280:	4651      	mov	r1, sl
   36282:	40d9      	lsrs	r1, r3
   36284:	000b      	movs	r3, r1
   36286:	4659      	mov	r1, fp
   36288:	430b      	orrs	r3, r1
   3628a:	4651      	mov	r1, sl
   3628c:	469b      	mov	fp, r3
   3628e:	4091      	lsls	r1, r2
   36290:	4b26      	ldr	r3, [pc, #152]	; (3632c <__aeabi_ddiv+0x1f0>)
   36292:	2200      	movs	r2, #0
   36294:	1a1b      	subs	r3, r3, r0
   36296:	e78f      	b.n	361b8 <__aeabi_ddiv+0x7c>
   36298:	2300      	movs	r3, #0
   3629a:	2201      	movs	r2, #1
   3629c:	469b      	mov	fp, r3
   3629e:	e78b      	b.n	361b8 <__aeabi_ddiv+0x7c>
   362a0:	4651      	mov	r1, sl
   362a2:	2203      	movs	r2, #3
   362a4:	e788      	b.n	361b8 <__aeabi_ddiv+0x7c>
   362a6:	2300      	movs	r3, #0
   362a8:	4698      	mov	r8, r3
   362aa:	3301      	adds	r3, #1
   362ac:	2604      	movs	r6, #4
   362ae:	2400      	movs	r4, #0
   362b0:	9303      	str	r3, [sp, #12]
   362b2:	e767      	b.n	36184 <__aeabi_ddiv+0x48>
   362b4:	2303      	movs	r3, #3
   362b6:	46b1      	mov	r9, r6
   362b8:	9303      	str	r3, [sp, #12]
   362ba:	260c      	movs	r6, #12
   362bc:	e762      	b.n	36184 <__aeabi_ddiv+0x48>
   362be:	2a03      	cmp	r2, #3
   362c0:	d100      	bne.n	362c4 <__aeabi_ddiv+0x188>
   362c2:	e25c      	b.n	3677e <__aeabi_ddiv+0x642>
   362c4:	9b01      	ldr	r3, [sp, #4]
   362c6:	2a01      	cmp	r2, #1
   362c8:	d000      	beq.n	362cc <__aeabi_ddiv+0x190>
   362ca:	e1e4      	b.n	36696 <__aeabi_ddiv+0x55a>
   362cc:	4013      	ands	r3, r2
   362ce:	469c      	mov	ip, r3
   362d0:	2300      	movs	r3, #0
   362d2:	2400      	movs	r4, #0
   362d4:	2200      	movs	r2, #0
   362d6:	4698      	mov	r8, r3
   362d8:	2100      	movs	r1, #0
   362da:	0312      	lsls	r2, r2, #12
   362dc:	0b13      	lsrs	r3, r2, #12
   362de:	0d0a      	lsrs	r2, r1, #20
   362e0:	0512      	lsls	r2, r2, #20
   362e2:	431a      	orrs	r2, r3
   362e4:	0523      	lsls	r3, r4, #20
   362e6:	4c12      	ldr	r4, [pc, #72]	; (36330 <__aeabi_ddiv+0x1f4>)
   362e8:	4640      	mov	r0, r8
   362ea:	4022      	ands	r2, r4
   362ec:	4313      	orrs	r3, r2
   362ee:	4662      	mov	r2, ip
   362f0:	005b      	lsls	r3, r3, #1
   362f2:	07d2      	lsls	r2, r2, #31
   362f4:	085b      	lsrs	r3, r3, #1
   362f6:	4313      	orrs	r3, r2
   362f8:	0019      	movs	r1, r3
   362fa:	b007      	add	sp, #28
   362fc:	bc3c      	pop	{r2, r3, r4, r5}
   362fe:	4690      	mov	r8, r2
   36300:	4699      	mov	r9, r3
   36302:	46a2      	mov	sl, r4
   36304:	46ab      	mov	fp, r5
   36306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36308:	2300      	movs	r3, #0
   3630a:	2280      	movs	r2, #128	; 0x80
   3630c:	469c      	mov	ip, r3
   3630e:	0312      	lsls	r2, r2, #12
   36310:	4698      	mov	r8, r3
   36312:	4c03      	ldr	r4, [pc, #12]	; (36320 <__aeabi_ddiv+0x1e4>)
   36314:	e7e0      	b.n	362d8 <__aeabi_ddiv+0x19c>
   36316:	2300      	movs	r3, #0
   36318:	4c01      	ldr	r4, [pc, #4]	; (36320 <__aeabi_ddiv+0x1e4>)
   3631a:	2200      	movs	r2, #0
   3631c:	4698      	mov	r8, r3
   3631e:	e7db      	b.n	362d8 <__aeabi_ddiv+0x19c>
   36320:	000007ff 	.word	0x000007ff
   36324:	fffffc01 	.word	0xfffffc01
   36328:	0003d200 	.word	0x0003d200
   3632c:	fffffc0d 	.word	0xfffffc0d
   36330:	800fffff 	.word	0x800fffff
   36334:	45d9      	cmp	r9, fp
   36336:	d900      	bls.n	3633a <__aeabi_ddiv+0x1fe>
   36338:	e139      	b.n	365ae <__aeabi_ddiv+0x472>
   3633a:	d100      	bne.n	3633e <__aeabi_ddiv+0x202>
   3633c:	e134      	b.n	365a8 <__aeabi_ddiv+0x46c>
   3633e:	2300      	movs	r3, #0
   36340:	4646      	mov	r6, r8
   36342:	464d      	mov	r5, r9
   36344:	469a      	mov	sl, r3
   36346:	3c01      	subs	r4, #1
   36348:	465b      	mov	r3, fp
   3634a:	0e0a      	lsrs	r2, r1, #24
   3634c:	021b      	lsls	r3, r3, #8
   3634e:	431a      	orrs	r2, r3
   36350:	020b      	lsls	r3, r1, #8
   36352:	0c17      	lsrs	r7, r2, #16
   36354:	9303      	str	r3, [sp, #12]
   36356:	0413      	lsls	r3, r2, #16
   36358:	0c1b      	lsrs	r3, r3, #16
   3635a:	0039      	movs	r1, r7
   3635c:	0028      	movs	r0, r5
   3635e:	4690      	mov	r8, r2
   36360:	9301      	str	r3, [sp, #4]
   36362:	f7fe fc47 	bl	34bf4 <__udivsi3>
   36366:	0002      	movs	r2, r0
   36368:	9b01      	ldr	r3, [sp, #4]
   3636a:	4683      	mov	fp, r0
   3636c:	435a      	muls	r2, r3
   3636e:	0028      	movs	r0, r5
   36370:	0039      	movs	r1, r7
   36372:	4691      	mov	r9, r2
   36374:	f7fe fcc4 	bl	34d00 <__aeabi_uidivmod>
   36378:	0c35      	lsrs	r5, r6, #16
   3637a:	0409      	lsls	r1, r1, #16
   3637c:	430d      	orrs	r5, r1
   3637e:	45a9      	cmp	r9, r5
   36380:	d90d      	bls.n	3639e <__aeabi_ddiv+0x262>
   36382:	465b      	mov	r3, fp
   36384:	4445      	add	r5, r8
   36386:	3b01      	subs	r3, #1
   36388:	45a8      	cmp	r8, r5
   3638a:	d900      	bls.n	3638e <__aeabi_ddiv+0x252>
   3638c:	e13a      	b.n	36604 <__aeabi_ddiv+0x4c8>
   3638e:	45a9      	cmp	r9, r5
   36390:	d800      	bhi.n	36394 <__aeabi_ddiv+0x258>
   36392:	e137      	b.n	36604 <__aeabi_ddiv+0x4c8>
   36394:	2302      	movs	r3, #2
   36396:	425b      	negs	r3, r3
   36398:	469c      	mov	ip, r3
   3639a:	4445      	add	r5, r8
   3639c:	44e3      	add	fp, ip
   3639e:	464b      	mov	r3, r9
   363a0:	1aeb      	subs	r3, r5, r3
   363a2:	0039      	movs	r1, r7
   363a4:	0018      	movs	r0, r3
   363a6:	9304      	str	r3, [sp, #16]
   363a8:	f7fe fc24 	bl	34bf4 <__udivsi3>
   363ac:	9b01      	ldr	r3, [sp, #4]
   363ae:	0005      	movs	r5, r0
   363b0:	4343      	muls	r3, r0
   363b2:	0039      	movs	r1, r7
   363b4:	9804      	ldr	r0, [sp, #16]
   363b6:	4699      	mov	r9, r3
   363b8:	f7fe fca2 	bl	34d00 <__aeabi_uidivmod>
   363bc:	0433      	lsls	r3, r6, #16
   363be:	0409      	lsls	r1, r1, #16
   363c0:	0c1b      	lsrs	r3, r3, #16
   363c2:	430b      	orrs	r3, r1
   363c4:	4599      	cmp	r9, r3
   363c6:	d909      	bls.n	363dc <__aeabi_ddiv+0x2a0>
   363c8:	4443      	add	r3, r8
   363ca:	1e6a      	subs	r2, r5, #1
   363cc:	4598      	cmp	r8, r3
   363ce:	d900      	bls.n	363d2 <__aeabi_ddiv+0x296>
   363d0:	e11a      	b.n	36608 <__aeabi_ddiv+0x4cc>
   363d2:	4599      	cmp	r9, r3
   363d4:	d800      	bhi.n	363d8 <__aeabi_ddiv+0x29c>
   363d6:	e117      	b.n	36608 <__aeabi_ddiv+0x4cc>
   363d8:	3d02      	subs	r5, #2
   363da:	4443      	add	r3, r8
   363dc:	464a      	mov	r2, r9
   363de:	1a9b      	subs	r3, r3, r2
   363e0:	465a      	mov	r2, fp
   363e2:	0412      	lsls	r2, r2, #16
   363e4:	432a      	orrs	r2, r5
   363e6:	9903      	ldr	r1, [sp, #12]
   363e8:	4693      	mov	fp, r2
   363ea:	0c10      	lsrs	r0, r2, #16
   363ec:	0c0a      	lsrs	r2, r1, #16
   363ee:	4691      	mov	r9, r2
   363f0:	0409      	lsls	r1, r1, #16
   363f2:	465a      	mov	r2, fp
   363f4:	0c09      	lsrs	r1, r1, #16
   363f6:	464e      	mov	r6, r9
   363f8:	000d      	movs	r5, r1
   363fa:	0412      	lsls	r2, r2, #16
   363fc:	0c12      	lsrs	r2, r2, #16
   363fe:	4345      	muls	r5, r0
   36400:	9105      	str	r1, [sp, #20]
   36402:	4351      	muls	r1, r2
   36404:	4372      	muls	r2, r6
   36406:	4370      	muls	r0, r6
   36408:	1952      	adds	r2, r2, r5
   3640a:	0c0e      	lsrs	r6, r1, #16
   3640c:	18b2      	adds	r2, r6, r2
   3640e:	4295      	cmp	r5, r2
   36410:	d903      	bls.n	3641a <__aeabi_ddiv+0x2de>
   36412:	2580      	movs	r5, #128	; 0x80
   36414:	026d      	lsls	r5, r5, #9
   36416:	46ac      	mov	ip, r5
   36418:	4460      	add	r0, ip
   3641a:	0c15      	lsrs	r5, r2, #16
   3641c:	0409      	lsls	r1, r1, #16
   3641e:	0412      	lsls	r2, r2, #16
   36420:	0c09      	lsrs	r1, r1, #16
   36422:	1828      	adds	r0, r5, r0
   36424:	1852      	adds	r2, r2, r1
   36426:	4283      	cmp	r3, r0
   36428:	d200      	bcs.n	3642c <__aeabi_ddiv+0x2f0>
   3642a:	e0ce      	b.n	365ca <__aeabi_ddiv+0x48e>
   3642c:	d100      	bne.n	36430 <__aeabi_ddiv+0x2f4>
   3642e:	e0c8      	b.n	365c2 <__aeabi_ddiv+0x486>
   36430:	1a1d      	subs	r5, r3, r0
   36432:	4653      	mov	r3, sl
   36434:	1a9e      	subs	r6, r3, r2
   36436:	45b2      	cmp	sl, r6
   36438:	4192      	sbcs	r2, r2
   3643a:	4252      	negs	r2, r2
   3643c:	1aab      	subs	r3, r5, r2
   3643e:	469a      	mov	sl, r3
   36440:	4598      	cmp	r8, r3
   36442:	d100      	bne.n	36446 <__aeabi_ddiv+0x30a>
   36444:	e117      	b.n	36676 <__aeabi_ddiv+0x53a>
   36446:	0039      	movs	r1, r7
   36448:	0018      	movs	r0, r3
   3644a:	f7fe fbd3 	bl	34bf4 <__udivsi3>
   3644e:	9b01      	ldr	r3, [sp, #4]
   36450:	0005      	movs	r5, r0
   36452:	4343      	muls	r3, r0
   36454:	0039      	movs	r1, r7
   36456:	4650      	mov	r0, sl
   36458:	9304      	str	r3, [sp, #16]
   3645a:	f7fe fc51 	bl	34d00 <__aeabi_uidivmod>
   3645e:	9804      	ldr	r0, [sp, #16]
   36460:	040b      	lsls	r3, r1, #16
   36462:	0c31      	lsrs	r1, r6, #16
   36464:	4319      	orrs	r1, r3
   36466:	4288      	cmp	r0, r1
   36468:	d909      	bls.n	3647e <__aeabi_ddiv+0x342>
   3646a:	4441      	add	r1, r8
   3646c:	1e6b      	subs	r3, r5, #1
   3646e:	4588      	cmp	r8, r1
   36470:	d900      	bls.n	36474 <__aeabi_ddiv+0x338>
   36472:	e107      	b.n	36684 <__aeabi_ddiv+0x548>
   36474:	4288      	cmp	r0, r1
   36476:	d800      	bhi.n	3647a <__aeabi_ddiv+0x33e>
   36478:	e104      	b.n	36684 <__aeabi_ddiv+0x548>
   3647a:	3d02      	subs	r5, #2
   3647c:	4441      	add	r1, r8
   3647e:	9b04      	ldr	r3, [sp, #16]
   36480:	1acb      	subs	r3, r1, r3
   36482:	0018      	movs	r0, r3
   36484:	0039      	movs	r1, r7
   36486:	9304      	str	r3, [sp, #16]
   36488:	f7fe fbb4 	bl	34bf4 <__udivsi3>
   3648c:	9b01      	ldr	r3, [sp, #4]
   3648e:	4682      	mov	sl, r0
   36490:	4343      	muls	r3, r0
   36492:	0039      	movs	r1, r7
   36494:	9804      	ldr	r0, [sp, #16]
   36496:	9301      	str	r3, [sp, #4]
   36498:	f7fe fc32 	bl	34d00 <__aeabi_uidivmod>
   3649c:	9801      	ldr	r0, [sp, #4]
   3649e:	040b      	lsls	r3, r1, #16
   364a0:	0431      	lsls	r1, r6, #16
   364a2:	0c09      	lsrs	r1, r1, #16
   364a4:	4319      	orrs	r1, r3
   364a6:	4288      	cmp	r0, r1
   364a8:	d90d      	bls.n	364c6 <__aeabi_ddiv+0x38a>
   364aa:	4653      	mov	r3, sl
   364ac:	4441      	add	r1, r8
   364ae:	3b01      	subs	r3, #1
   364b0:	4588      	cmp	r8, r1
   364b2:	d900      	bls.n	364b6 <__aeabi_ddiv+0x37a>
   364b4:	e0e8      	b.n	36688 <__aeabi_ddiv+0x54c>
   364b6:	4288      	cmp	r0, r1
   364b8:	d800      	bhi.n	364bc <__aeabi_ddiv+0x380>
   364ba:	e0e5      	b.n	36688 <__aeabi_ddiv+0x54c>
   364bc:	2302      	movs	r3, #2
   364be:	425b      	negs	r3, r3
   364c0:	469c      	mov	ip, r3
   364c2:	4441      	add	r1, r8
   364c4:	44e2      	add	sl, ip
   364c6:	9b01      	ldr	r3, [sp, #4]
   364c8:	042d      	lsls	r5, r5, #16
   364ca:	1ace      	subs	r6, r1, r3
   364cc:	4651      	mov	r1, sl
   364ce:	4329      	orrs	r1, r5
   364d0:	9d05      	ldr	r5, [sp, #20]
   364d2:	464f      	mov	r7, r9
   364d4:	002a      	movs	r2, r5
   364d6:	040b      	lsls	r3, r1, #16
   364d8:	0c08      	lsrs	r0, r1, #16
   364da:	0c1b      	lsrs	r3, r3, #16
   364dc:	435a      	muls	r2, r3
   364de:	4345      	muls	r5, r0
   364e0:	437b      	muls	r3, r7
   364e2:	4378      	muls	r0, r7
   364e4:	195b      	adds	r3, r3, r5
   364e6:	0c17      	lsrs	r7, r2, #16
   364e8:	18fb      	adds	r3, r7, r3
   364ea:	429d      	cmp	r5, r3
   364ec:	d903      	bls.n	364f6 <__aeabi_ddiv+0x3ba>
   364ee:	2580      	movs	r5, #128	; 0x80
   364f0:	026d      	lsls	r5, r5, #9
   364f2:	46ac      	mov	ip, r5
   364f4:	4460      	add	r0, ip
   364f6:	0c1d      	lsrs	r5, r3, #16
   364f8:	0412      	lsls	r2, r2, #16
   364fa:	041b      	lsls	r3, r3, #16
   364fc:	0c12      	lsrs	r2, r2, #16
   364fe:	1828      	adds	r0, r5, r0
   36500:	189b      	adds	r3, r3, r2
   36502:	4286      	cmp	r6, r0
   36504:	d200      	bcs.n	36508 <__aeabi_ddiv+0x3cc>
   36506:	e093      	b.n	36630 <__aeabi_ddiv+0x4f4>
   36508:	d100      	bne.n	3650c <__aeabi_ddiv+0x3d0>
   3650a:	e08e      	b.n	3662a <__aeabi_ddiv+0x4ee>
   3650c:	2301      	movs	r3, #1
   3650e:	4319      	orrs	r1, r3
   36510:	4ba0      	ldr	r3, [pc, #640]	; (36794 <__aeabi_ddiv+0x658>)
   36512:	18e3      	adds	r3, r4, r3
   36514:	2b00      	cmp	r3, #0
   36516:	dc00      	bgt.n	3651a <__aeabi_ddiv+0x3de>
   36518:	e099      	b.n	3664e <__aeabi_ddiv+0x512>
   3651a:	074a      	lsls	r2, r1, #29
   3651c:	d000      	beq.n	36520 <__aeabi_ddiv+0x3e4>
   3651e:	e09e      	b.n	3665e <__aeabi_ddiv+0x522>
   36520:	465a      	mov	r2, fp
   36522:	01d2      	lsls	r2, r2, #7
   36524:	d506      	bpl.n	36534 <__aeabi_ddiv+0x3f8>
   36526:	465a      	mov	r2, fp
   36528:	4b9b      	ldr	r3, [pc, #620]	; (36798 <__aeabi_ddiv+0x65c>)
   3652a:	401a      	ands	r2, r3
   3652c:	2380      	movs	r3, #128	; 0x80
   3652e:	4693      	mov	fp, r2
   36530:	00db      	lsls	r3, r3, #3
   36532:	18e3      	adds	r3, r4, r3
   36534:	4a99      	ldr	r2, [pc, #612]	; (3679c <__aeabi_ddiv+0x660>)
   36536:	4293      	cmp	r3, r2
   36538:	dd68      	ble.n	3660c <__aeabi_ddiv+0x4d0>
   3653a:	2301      	movs	r3, #1
   3653c:	9a02      	ldr	r2, [sp, #8]
   3653e:	4c98      	ldr	r4, [pc, #608]	; (367a0 <__aeabi_ddiv+0x664>)
   36540:	401a      	ands	r2, r3
   36542:	2300      	movs	r3, #0
   36544:	4694      	mov	ip, r2
   36546:	4698      	mov	r8, r3
   36548:	2200      	movs	r2, #0
   3654a:	e6c5      	b.n	362d8 <__aeabi_ddiv+0x19c>
   3654c:	2280      	movs	r2, #128	; 0x80
   3654e:	464b      	mov	r3, r9
   36550:	0312      	lsls	r2, r2, #12
   36552:	4213      	tst	r3, r2
   36554:	d00a      	beq.n	3656c <__aeabi_ddiv+0x430>
   36556:	465b      	mov	r3, fp
   36558:	4213      	tst	r3, r2
   3655a:	d106      	bne.n	3656a <__aeabi_ddiv+0x42e>
   3655c:	431a      	orrs	r2, r3
   3655e:	0312      	lsls	r2, r2, #12
   36560:	0b12      	lsrs	r2, r2, #12
   36562:	46ac      	mov	ip, r5
   36564:	4688      	mov	r8, r1
   36566:	4c8e      	ldr	r4, [pc, #568]	; (367a0 <__aeabi_ddiv+0x664>)
   36568:	e6b6      	b.n	362d8 <__aeabi_ddiv+0x19c>
   3656a:	464b      	mov	r3, r9
   3656c:	431a      	orrs	r2, r3
   3656e:	0312      	lsls	r2, r2, #12
   36570:	0b12      	lsrs	r2, r2, #12
   36572:	46bc      	mov	ip, r7
   36574:	4c8a      	ldr	r4, [pc, #552]	; (367a0 <__aeabi_ddiv+0x664>)
   36576:	e6af      	b.n	362d8 <__aeabi_ddiv+0x19c>
   36578:	0003      	movs	r3, r0
   3657a:	465a      	mov	r2, fp
   3657c:	3b28      	subs	r3, #40	; 0x28
   3657e:	409a      	lsls	r2, r3
   36580:	2300      	movs	r3, #0
   36582:	4691      	mov	r9, r2
   36584:	4698      	mov	r8, r3
   36586:	e657      	b.n	36238 <__aeabi_ddiv+0xfc>
   36588:	4658      	mov	r0, fp
   3658a:	f000 ffe9 	bl	37560 <__clzsi2>
   3658e:	3020      	adds	r0, #32
   36590:	e640      	b.n	36214 <__aeabi_ddiv+0xd8>
   36592:	0003      	movs	r3, r0
   36594:	4652      	mov	r2, sl
   36596:	3b28      	subs	r3, #40	; 0x28
   36598:	409a      	lsls	r2, r3
   3659a:	2100      	movs	r1, #0
   3659c:	4693      	mov	fp, r2
   3659e:	e677      	b.n	36290 <__aeabi_ddiv+0x154>
   365a0:	f000 ffde 	bl	37560 <__clzsi2>
   365a4:	3020      	adds	r0, #32
   365a6:	e65f      	b.n	36268 <__aeabi_ddiv+0x12c>
   365a8:	4588      	cmp	r8, r1
   365aa:	d200      	bcs.n	365ae <__aeabi_ddiv+0x472>
   365ac:	e6c7      	b.n	3633e <__aeabi_ddiv+0x202>
   365ae:	464b      	mov	r3, r9
   365b0:	07de      	lsls	r6, r3, #31
   365b2:	085d      	lsrs	r5, r3, #1
   365b4:	4643      	mov	r3, r8
   365b6:	085b      	lsrs	r3, r3, #1
   365b8:	431e      	orrs	r6, r3
   365ba:	4643      	mov	r3, r8
   365bc:	07db      	lsls	r3, r3, #31
   365be:	469a      	mov	sl, r3
   365c0:	e6c2      	b.n	36348 <__aeabi_ddiv+0x20c>
   365c2:	2500      	movs	r5, #0
   365c4:	4592      	cmp	sl, r2
   365c6:	d300      	bcc.n	365ca <__aeabi_ddiv+0x48e>
   365c8:	e733      	b.n	36432 <__aeabi_ddiv+0x2f6>
   365ca:	9e03      	ldr	r6, [sp, #12]
   365cc:	4659      	mov	r1, fp
   365ce:	46b4      	mov	ip, r6
   365d0:	44e2      	add	sl, ip
   365d2:	45b2      	cmp	sl, r6
   365d4:	41ad      	sbcs	r5, r5
   365d6:	426d      	negs	r5, r5
   365d8:	4445      	add	r5, r8
   365da:	18eb      	adds	r3, r5, r3
   365dc:	3901      	subs	r1, #1
   365de:	4598      	cmp	r8, r3
   365e0:	d207      	bcs.n	365f2 <__aeabi_ddiv+0x4b6>
   365e2:	4298      	cmp	r0, r3
   365e4:	d900      	bls.n	365e8 <__aeabi_ddiv+0x4ac>
   365e6:	e07f      	b.n	366e8 <__aeabi_ddiv+0x5ac>
   365e8:	d100      	bne.n	365ec <__aeabi_ddiv+0x4b0>
   365ea:	e0bc      	b.n	36766 <__aeabi_ddiv+0x62a>
   365ec:	1a1d      	subs	r5, r3, r0
   365ee:	468b      	mov	fp, r1
   365f0:	e71f      	b.n	36432 <__aeabi_ddiv+0x2f6>
   365f2:	4598      	cmp	r8, r3
   365f4:	d1fa      	bne.n	365ec <__aeabi_ddiv+0x4b0>
   365f6:	9d03      	ldr	r5, [sp, #12]
   365f8:	4555      	cmp	r5, sl
   365fa:	d9f2      	bls.n	365e2 <__aeabi_ddiv+0x4a6>
   365fc:	4643      	mov	r3, r8
   365fe:	468b      	mov	fp, r1
   36600:	1a1d      	subs	r5, r3, r0
   36602:	e716      	b.n	36432 <__aeabi_ddiv+0x2f6>
   36604:	469b      	mov	fp, r3
   36606:	e6ca      	b.n	3639e <__aeabi_ddiv+0x262>
   36608:	0015      	movs	r5, r2
   3660a:	e6e7      	b.n	363dc <__aeabi_ddiv+0x2a0>
   3660c:	465a      	mov	r2, fp
   3660e:	08c9      	lsrs	r1, r1, #3
   36610:	0752      	lsls	r2, r2, #29
   36612:	430a      	orrs	r2, r1
   36614:	055b      	lsls	r3, r3, #21
   36616:	4690      	mov	r8, r2
   36618:	0d5c      	lsrs	r4, r3, #21
   3661a:	465a      	mov	r2, fp
   3661c:	2301      	movs	r3, #1
   3661e:	9902      	ldr	r1, [sp, #8]
   36620:	0252      	lsls	r2, r2, #9
   36622:	4019      	ands	r1, r3
   36624:	0b12      	lsrs	r2, r2, #12
   36626:	468c      	mov	ip, r1
   36628:	e656      	b.n	362d8 <__aeabi_ddiv+0x19c>
   3662a:	2b00      	cmp	r3, #0
   3662c:	d100      	bne.n	36630 <__aeabi_ddiv+0x4f4>
   3662e:	e76f      	b.n	36510 <__aeabi_ddiv+0x3d4>
   36630:	4446      	add	r6, r8
   36632:	1e4a      	subs	r2, r1, #1
   36634:	45b0      	cmp	r8, r6
   36636:	d929      	bls.n	3668c <__aeabi_ddiv+0x550>
   36638:	0011      	movs	r1, r2
   3663a:	4286      	cmp	r6, r0
   3663c:	d000      	beq.n	36640 <__aeabi_ddiv+0x504>
   3663e:	e765      	b.n	3650c <__aeabi_ddiv+0x3d0>
   36640:	9a03      	ldr	r2, [sp, #12]
   36642:	4293      	cmp	r3, r2
   36644:	d000      	beq.n	36648 <__aeabi_ddiv+0x50c>
   36646:	e761      	b.n	3650c <__aeabi_ddiv+0x3d0>
   36648:	e762      	b.n	36510 <__aeabi_ddiv+0x3d4>
   3664a:	2101      	movs	r1, #1
   3664c:	4249      	negs	r1, r1
   3664e:	2001      	movs	r0, #1
   36650:	1ac2      	subs	r2, r0, r3
   36652:	2a38      	cmp	r2, #56	; 0x38
   36654:	dd21      	ble.n	3669a <__aeabi_ddiv+0x55e>
   36656:	9b02      	ldr	r3, [sp, #8]
   36658:	4003      	ands	r3, r0
   3665a:	469c      	mov	ip, r3
   3665c:	e638      	b.n	362d0 <__aeabi_ddiv+0x194>
   3665e:	220f      	movs	r2, #15
   36660:	400a      	ands	r2, r1
   36662:	2a04      	cmp	r2, #4
   36664:	d100      	bne.n	36668 <__aeabi_ddiv+0x52c>
   36666:	e75b      	b.n	36520 <__aeabi_ddiv+0x3e4>
   36668:	000a      	movs	r2, r1
   3666a:	1d11      	adds	r1, r2, #4
   3666c:	4291      	cmp	r1, r2
   3666e:	4192      	sbcs	r2, r2
   36670:	4252      	negs	r2, r2
   36672:	4493      	add	fp, r2
   36674:	e754      	b.n	36520 <__aeabi_ddiv+0x3e4>
   36676:	4b47      	ldr	r3, [pc, #284]	; (36794 <__aeabi_ddiv+0x658>)
   36678:	18e3      	adds	r3, r4, r3
   3667a:	2b00      	cmp	r3, #0
   3667c:	dde5      	ble.n	3664a <__aeabi_ddiv+0x50e>
   3667e:	2201      	movs	r2, #1
   36680:	4252      	negs	r2, r2
   36682:	e7f2      	b.n	3666a <__aeabi_ddiv+0x52e>
   36684:	001d      	movs	r5, r3
   36686:	e6fa      	b.n	3647e <__aeabi_ddiv+0x342>
   36688:	469a      	mov	sl, r3
   3668a:	e71c      	b.n	364c6 <__aeabi_ddiv+0x38a>
   3668c:	42b0      	cmp	r0, r6
   3668e:	d839      	bhi.n	36704 <__aeabi_ddiv+0x5c8>
   36690:	d06e      	beq.n	36770 <__aeabi_ddiv+0x634>
   36692:	0011      	movs	r1, r2
   36694:	e73a      	b.n	3650c <__aeabi_ddiv+0x3d0>
   36696:	9302      	str	r3, [sp, #8]
   36698:	e73a      	b.n	36510 <__aeabi_ddiv+0x3d4>
   3669a:	2a1f      	cmp	r2, #31
   3669c:	dc3c      	bgt.n	36718 <__aeabi_ddiv+0x5dc>
   3669e:	2320      	movs	r3, #32
   366a0:	1a9b      	subs	r3, r3, r2
   366a2:	000c      	movs	r4, r1
   366a4:	4658      	mov	r0, fp
   366a6:	4099      	lsls	r1, r3
   366a8:	4098      	lsls	r0, r3
   366aa:	1e4b      	subs	r3, r1, #1
   366ac:	4199      	sbcs	r1, r3
   366ae:	465b      	mov	r3, fp
   366b0:	40d4      	lsrs	r4, r2
   366b2:	40d3      	lsrs	r3, r2
   366b4:	4320      	orrs	r0, r4
   366b6:	4308      	orrs	r0, r1
   366b8:	001a      	movs	r2, r3
   366ba:	0743      	lsls	r3, r0, #29
   366bc:	d009      	beq.n	366d2 <__aeabi_ddiv+0x596>
   366be:	230f      	movs	r3, #15
   366c0:	4003      	ands	r3, r0
   366c2:	2b04      	cmp	r3, #4
   366c4:	d005      	beq.n	366d2 <__aeabi_ddiv+0x596>
   366c6:	0001      	movs	r1, r0
   366c8:	1d08      	adds	r0, r1, #4
   366ca:	4288      	cmp	r0, r1
   366cc:	419b      	sbcs	r3, r3
   366ce:	425b      	negs	r3, r3
   366d0:	18d2      	adds	r2, r2, r3
   366d2:	0213      	lsls	r3, r2, #8
   366d4:	d53a      	bpl.n	3674c <__aeabi_ddiv+0x610>
   366d6:	2301      	movs	r3, #1
   366d8:	9a02      	ldr	r2, [sp, #8]
   366da:	2401      	movs	r4, #1
   366dc:	401a      	ands	r2, r3
   366de:	2300      	movs	r3, #0
   366e0:	4694      	mov	ip, r2
   366e2:	4698      	mov	r8, r3
   366e4:	2200      	movs	r2, #0
   366e6:	e5f7      	b.n	362d8 <__aeabi_ddiv+0x19c>
   366e8:	2102      	movs	r1, #2
   366ea:	4249      	negs	r1, r1
   366ec:	468c      	mov	ip, r1
   366ee:	9d03      	ldr	r5, [sp, #12]
   366f0:	44e3      	add	fp, ip
   366f2:	46ac      	mov	ip, r5
   366f4:	44e2      	add	sl, ip
   366f6:	45aa      	cmp	sl, r5
   366f8:	41ad      	sbcs	r5, r5
   366fa:	426d      	negs	r5, r5
   366fc:	4445      	add	r5, r8
   366fe:	18ed      	adds	r5, r5, r3
   36700:	1a2d      	subs	r5, r5, r0
   36702:	e696      	b.n	36432 <__aeabi_ddiv+0x2f6>
   36704:	1e8a      	subs	r2, r1, #2
   36706:	9903      	ldr	r1, [sp, #12]
   36708:	004d      	lsls	r5, r1, #1
   3670a:	428d      	cmp	r5, r1
   3670c:	4189      	sbcs	r1, r1
   3670e:	4249      	negs	r1, r1
   36710:	4441      	add	r1, r8
   36712:	1876      	adds	r6, r6, r1
   36714:	9503      	str	r5, [sp, #12]
   36716:	e78f      	b.n	36638 <__aeabi_ddiv+0x4fc>
   36718:	201f      	movs	r0, #31
   3671a:	4240      	negs	r0, r0
   3671c:	1ac3      	subs	r3, r0, r3
   3671e:	4658      	mov	r0, fp
   36720:	40d8      	lsrs	r0, r3
   36722:	0003      	movs	r3, r0
   36724:	2a20      	cmp	r2, #32
   36726:	d028      	beq.n	3677a <__aeabi_ddiv+0x63e>
   36728:	2040      	movs	r0, #64	; 0x40
   3672a:	465d      	mov	r5, fp
   3672c:	1a82      	subs	r2, r0, r2
   3672e:	4095      	lsls	r5, r2
   36730:	4329      	orrs	r1, r5
   36732:	1e4a      	subs	r2, r1, #1
   36734:	4191      	sbcs	r1, r2
   36736:	4319      	orrs	r1, r3
   36738:	2307      	movs	r3, #7
   3673a:	2200      	movs	r2, #0
   3673c:	400b      	ands	r3, r1
   3673e:	d009      	beq.n	36754 <__aeabi_ddiv+0x618>
   36740:	230f      	movs	r3, #15
   36742:	2200      	movs	r2, #0
   36744:	400b      	ands	r3, r1
   36746:	0008      	movs	r0, r1
   36748:	2b04      	cmp	r3, #4
   3674a:	d1bd      	bne.n	366c8 <__aeabi_ddiv+0x58c>
   3674c:	0001      	movs	r1, r0
   3674e:	0753      	lsls	r3, r2, #29
   36750:	0252      	lsls	r2, r2, #9
   36752:	0b12      	lsrs	r2, r2, #12
   36754:	08c9      	lsrs	r1, r1, #3
   36756:	4319      	orrs	r1, r3
   36758:	2301      	movs	r3, #1
   3675a:	4688      	mov	r8, r1
   3675c:	9902      	ldr	r1, [sp, #8]
   3675e:	2400      	movs	r4, #0
   36760:	4019      	ands	r1, r3
   36762:	468c      	mov	ip, r1
   36764:	e5b8      	b.n	362d8 <__aeabi_ddiv+0x19c>
   36766:	4552      	cmp	r2, sl
   36768:	d8be      	bhi.n	366e8 <__aeabi_ddiv+0x5ac>
   3676a:	468b      	mov	fp, r1
   3676c:	2500      	movs	r5, #0
   3676e:	e660      	b.n	36432 <__aeabi_ddiv+0x2f6>
   36770:	9d03      	ldr	r5, [sp, #12]
   36772:	429d      	cmp	r5, r3
   36774:	d3c6      	bcc.n	36704 <__aeabi_ddiv+0x5c8>
   36776:	0011      	movs	r1, r2
   36778:	e762      	b.n	36640 <__aeabi_ddiv+0x504>
   3677a:	2500      	movs	r5, #0
   3677c:	e7d8      	b.n	36730 <__aeabi_ddiv+0x5f4>
   3677e:	2280      	movs	r2, #128	; 0x80
   36780:	465b      	mov	r3, fp
   36782:	0312      	lsls	r2, r2, #12
   36784:	431a      	orrs	r2, r3
   36786:	9b01      	ldr	r3, [sp, #4]
   36788:	0312      	lsls	r2, r2, #12
   3678a:	0b12      	lsrs	r2, r2, #12
   3678c:	469c      	mov	ip, r3
   3678e:	4688      	mov	r8, r1
   36790:	4c03      	ldr	r4, [pc, #12]	; (367a0 <__aeabi_ddiv+0x664>)
   36792:	e5a1      	b.n	362d8 <__aeabi_ddiv+0x19c>
   36794:	000003ff 	.word	0x000003ff
   36798:	feffffff 	.word	0xfeffffff
   3679c:	000007fe 	.word	0x000007fe
   367a0:	000007ff 	.word	0x000007ff

000367a4 <__aeabi_dmul>:
   367a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   367a6:	4657      	mov	r7, sl
   367a8:	4645      	mov	r5, r8
   367aa:	46de      	mov	lr, fp
   367ac:	464e      	mov	r6, r9
   367ae:	b5e0      	push	{r5, r6, r7, lr}
   367b0:	030c      	lsls	r4, r1, #12
   367b2:	4698      	mov	r8, r3
   367b4:	004e      	lsls	r6, r1, #1
   367b6:	0b23      	lsrs	r3, r4, #12
   367b8:	b087      	sub	sp, #28
   367ba:	0007      	movs	r7, r0
   367bc:	4692      	mov	sl, r2
   367be:	469b      	mov	fp, r3
   367c0:	0d76      	lsrs	r6, r6, #21
   367c2:	0fcd      	lsrs	r5, r1, #31
   367c4:	2e00      	cmp	r6, #0
   367c6:	d06b      	beq.n	368a0 <__aeabi_dmul+0xfc>
   367c8:	4b6d      	ldr	r3, [pc, #436]	; (36980 <__aeabi_dmul+0x1dc>)
   367ca:	429e      	cmp	r6, r3
   367cc:	d035      	beq.n	3683a <__aeabi_dmul+0x96>
   367ce:	2480      	movs	r4, #128	; 0x80
   367d0:	465b      	mov	r3, fp
   367d2:	0f42      	lsrs	r2, r0, #29
   367d4:	0424      	lsls	r4, r4, #16
   367d6:	00db      	lsls	r3, r3, #3
   367d8:	4314      	orrs	r4, r2
   367da:	431c      	orrs	r4, r3
   367dc:	00c3      	lsls	r3, r0, #3
   367de:	4699      	mov	r9, r3
   367e0:	4b68      	ldr	r3, [pc, #416]	; (36984 <__aeabi_dmul+0x1e0>)
   367e2:	46a3      	mov	fp, r4
   367e4:	469c      	mov	ip, r3
   367e6:	2300      	movs	r3, #0
   367e8:	2700      	movs	r7, #0
   367ea:	4466      	add	r6, ip
   367ec:	9302      	str	r3, [sp, #8]
   367ee:	4643      	mov	r3, r8
   367f0:	031c      	lsls	r4, r3, #12
   367f2:	005a      	lsls	r2, r3, #1
   367f4:	0fdb      	lsrs	r3, r3, #31
   367f6:	4650      	mov	r0, sl
   367f8:	0b24      	lsrs	r4, r4, #12
   367fa:	0d52      	lsrs	r2, r2, #21
   367fc:	4698      	mov	r8, r3
   367fe:	d100      	bne.n	36802 <__aeabi_dmul+0x5e>
   36800:	e076      	b.n	368f0 <__aeabi_dmul+0x14c>
   36802:	4b5f      	ldr	r3, [pc, #380]	; (36980 <__aeabi_dmul+0x1dc>)
   36804:	429a      	cmp	r2, r3
   36806:	d06d      	beq.n	368e4 <__aeabi_dmul+0x140>
   36808:	2380      	movs	r3, #128	; 0x80
   3680a:	0f41      	lsrs	r1, r0, #29
   3680c:	041b      	lsls	r3, r3, #16
   3680e:	430b      	orrs	r3, r1
   36810:	495c      	ldr	r1, [pc, #368]	; (36984 <__aeabi_dmul+0x1e0>)
   36812:	00e4      	lsls	r4, r4, #3
   36814:	468c      	mov	ip, r1
   36816:	431c      	orrs	r4, r3
   36818:	00c3      	lsls	r3, r0, #3
   3681a:	2000      	movs	r0, #0
   3681c:	4462      	add	r2, ip
   3681e:	4641      	mov	r1, r8
   36820:	18b6      	adds	r6, r6, r2
   36822:	4069      	eors	r1, r5
   36824:	1c72      	adds	r2, r6, #1
   36826:	9101      	str	r1, [sp, #4]
   36828:	4694      	mov	ip, r2
   3682a:	4307      	orrs	r7, r0
   3682c:	2f0f      	cmp	r7, #15
   3682e:	d900      	bls.n	36832 <__aeabi_dmul+0x8e>
   36830:	e0b0      	b.n	36994 <__aeabi_dmul+0x1f0>
   36832:	4a55      	ldr	r2, [pc, #340]	; (36988 <__aeabi_dmul+0x1e4>)
   36834:	00bf      	lsls	r7, r7, #2
   36836:	59d2      	ldr	r2, [r2, r7]
   36838:	4697      	mov	pc, r2
   3683a:	465b      	mov	r3, fp
   3683c:	4303      	orrs	r3, r0
   3683e:	4699      	mov	r9, r3
   36840:	d000      	beq.n	36844 <__aeabi_dmul+0xa0>
   36842:	e087      	b.n	36954 <__aeabi_dmul+0x1b0>
   36844:	2300      	movs	r3, #0
   36846:	469b      	mov	fp, r3
   36848:	3302      	adds	r3, #2
   3684a:	2708      	movs	r7, #8
   3684c:	9302      	str	r3, [sp, #8]
   3684e:	e7ce      	b.n	367ee <__aeabi_dmul+0x4a>
   36850:	4642      	mov	r2, r8
   36852:	9201      	str	r2, [sp, #4]
   36854:	2802      	cmp	r0, #2
   36856:	d067      	beq.n	36928 <__aeabi_dmul+0x184>
   36858:	2803      	cmp	r0, #3
   3685a:	d100      	bne.n	3685e <__aeabi_dmul+0xba>
   3685c:	e20e      	b.n	36c7c <__aeabi_dmul+0x4d8>
   3685e:	2801      	cmp	r0, #1
   36860:	d000      	beq.n	36864 <__aeabi_dmul+0xc0>
   36862:	e162      	b.n	36b2a <__aeabi_dmul+0x386>
   36864:	2300      	movs	r3, #0
   36866:	2400      	movs	r4, #0
   36868:	2200      	movs	r2, #0
   3686a:	4699      	mov	r9, r3
   3686c:	9901      	ldr	r1, [sp, #4]
   3686e:	4001      	ands	r1, r0
   36870:	b2cd      	uxtb	r5, r1
   36872:	2100      	movs	r1, #0
   36874:	0312      	lsls	r2, r2, #12
   36876:	0d0b      	lsrs	r3, r1, #20
   36878:	0b12      	lsrs	r2, r2, #12
   3687a:	051b      	lsls	r3, r3, #20
   3687c:	4313      	orrs	r3, r2
   3687e:	4a43      	ldr	r2, [pc, #268]	; (3698c <__aeabi_dmul+0x1e8>)
   36880:	0524      	lsls	r4, r4, #20
   36882:	4013      	ands	r3, r2
   36884:	431c      	orrs	r4, r3
   36886:	0064      	lsls	r4, r4, #1
   36888:	07ed      	lsls	r5, r5, #31
   3688a:	0864      	lsrs	r4, r4, #1
   3688c:	432c      	orrs	r4, r5
   3688e:	4648      	mov	r0, r9
   36890:	0021      	movs	r1, r4
   36892:	b007      	add	sp, #28
   36894:	bc3c      	pop	{r2, r3, r4, r5}
   36896:	4690      	mov	r8, r2
   36898:	4699      	mov	r9, r3
   3689a:	46a2      	mov	sl, r4
   3689c:	46ab      	mov	fp, r5
   3689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   368a0:	4303      	orrs	r3, r0
   368a2:	4699      	mov	r9, r3
   368a4:	d04f      	beq.n	36946 <__aeabi_dmul+0x1a2>
   368a6:	465b      	mov	r3, fp
   368a8:	2b00      	cmp	r3, #0
   368aa:	d100      	bne.n	368ae <__aeabi_dmul+0x10a>
   368ac:	e189      	b.n	36bc2 <__aeabi_dmul+0x41e>
   368ae:	4658      	mov	r0, fp
   368b0:	f000 fe56 	bl	37560 <__clzsi2>
   368b4:	0003      	movs	r3, r0
   368b6:	3b0b      	subs	r3, #11
   368b8:	2b1c      	cmp	r3, #28
   368ba:	dd00      	ble.n	368be <__aeabi_dmul+0x11a>
   368bc:	e17a      	b.n	36bb4 <__aeabi_dmul+0x410>
   368be:	221d      	movs	r2, #29
   368c0:	1ad3      	subs	r3, r2, r3
   368c2:	003a      	movs	r2, r7
   368c4:	0001      	movs	r1, r0
   368c6:	465c      	mov	r4, fp
   368c8:	40da      	lsrs	r2, r3
   368ca:	3908      	subs	r1, #8
   368cc:	408c      	lsls	r4, r1
   368ce:	0013      	movs	r3, r2
   368d0:	408f      	lsls	r7, r1
   368d2:	4323      	orrs	r3, r4
   368d4:	469b      	mov	fp, r3
   368d6:	46b9      	mov	r9, r7
   368d8:	2300      	movs	r3, #0
   368da:	4e2d      	ldr	r6, [pc, #180]	; (36990 <__aeabi_dmul+0x1ec>)
   368dc:	2700      	movs	r7, #0
   368de:	1a36      	subs	r6, r6, r0
   368e0:	9302      	str	r3, [sp, #8]
   368e2:	e784      	b.n	367ee <__aeabi_dmul+0x4a>
   368e4:	4653      	mov	r3, sl
   368e6:	4323      	orrs	r3, r4
   368e8:	d12a      	bne.n	36940 <__aeabi_dmul+0x19c>
   368ea:	2400      	movs	r4, #0
   368ec:	2002      	movs	r0, #2
   368ee:	e796      	b.n	3681e <__aeabi_dmul+0x7a>
   368f0:	4653      	mov	r3, sl
   368f2:	4323      	orrs	r3, r4
   368f4:	d020      	beq.n	36938 <__aeabi_dmul+0x194>
   368f6:	2c00      	cmp	r4, #0
   368f8:	d100      	bne.n	368fc <__aeabi_dmul+0x158>
   368fa:	e157      	b.n	36bac <__aeabi_dmul+0x408>
   368fc:	0020      	movs	r0, r4
   368fe:	f000 fe2f 	bl	37560 <__clzsi2>
   36902:	0003      	movs	r3, r0
   36904:	3b0b      	subs	r3, #11
   36906:	2b1c      	cmp	r3, #28
   36908:	dd00      	ble.n	3690c <__aeabi_dmul+0x168>
   3690a:	e149      	b.n	36ba0 <__aeabi_dmul+0x3fc>
   3690c:	211d      	movs	r1, #29
   3690e:	1acb      	subs	r3, r1, r3
   36910:	4651      	mov	r1, sl
   36912:	0002      	movs	r2, r0
   36914:	40d9      	lsrs	r1, r3
   36916:	4653      	mov	r3, sl
   36918:	3a08      	subs	r2, #8
   3691a:	4094      	lsls	r4, r2
   3691c:	4093      	lsls	r3, r2
   3691e:	430c      	orrs	r4, r1
   36920:	4a1b      	ldr	r2, [pc, #108]	; (36990 <__aeabi_dmul+0x1ec>)
   36922:	1a12      	subs	r2, r2, r0
   36924:	2000      	movs	r0, #0
   36926:	e77a      	b.n	3681e <__aeabi_dmul+0x7a>
   36928:	2501      	movs	r5, #1
   3692a:	9b01      	ldr	r3, [sp, #4]
   3692c:	4c14      	ldr	r4, [pc, #80]	; (36980 <__aeabi_dmul+0x1dc>)
   3692e:	401d      	ands	r5, r3
   36930:	2300      	movs	r3, #0
   36932:	2200      	movs	r2, #0
   36934:	4699      	mov	r9, r3
   36936:	e79c      	b.n	36872 <__aeabi_dmul+0xce>
   36938:	2400      	movs	r4, #0
   3693a:	2200      	movs	r2, #0
   3693c:	2001      	movs	r0, #1
   3693e:	e76e      	b.n	3681e <__aeabi_dmul+0x7a>
   36940:	4653      	mov	r3, sl
   36942:	2003      	movs	r0, #3
   36944:	e76b      	b.n	3681e <__aeabi_dmul+0x7a>
   36946:	2300      	movs	r3, #0
   36948:	469b      	mov	fp, r3
   3694a:	3301      	adds	r3, #1
   3694c:	2704      	movs	r7, #4
   3694e:	2600      	movs	r6, #0
   36950:	9302      	str	r3, [sp, #8]
   36952:	e74c      	b.n	367ee <__aeabi_dmul+0x4a>
   36954:	2303      	movs	r3, #3
   36956:	4681      	mov	r9, r0
   36958:	270c      	movs	r7, #12
   3695a:	9302      	str	r3, [sp, #8]
   3695c:	e747      	b.n	367ee <__aeabi_dmul+0x4a>
   3695e:	2280      	movs	r2, #128	; 0x80
   36960:	2300      	movs	r3, #0
   36962:	2500      	movs	r5, #0
   36964:	0312      	lsls	r2, r2, #12
   36966:	4699      	mov	r9, r3
   36968:	4c05      	ldr	r4, [pc, #20]	; (36980 <__aeabi_dmul+0x1dc>)
   3696a:	e782      	b.n	36872 <__aeabi_dmul+0xce>
   3696c:	465c      	mov	r4, fp
   3696e:	464b      	mov	r3, r9
   36970:	9802      	ldr	r0, [sp, #8]
   36972:	e76f      	b.n	36854 <__aeabi_dmul+0xb0>
   36974:	465c      	mov	r4, fp
   36976:	464b      	mov	r3, r9
   36978:	9501      	str	r5, [sp, #4]
   3697a:	9802      	ldr	r0, [sp, #8]
   3697c:	e76a      	b.n	36854 <__aeabi_dmul+0xb0>
   3697e:	46c0      	nop			; (mov r8, r8)
   36980:	000007ff 	.word	0x000007ff
   36984:	fffffc01 	.word	0xfffffc01
   36988:	0003d240 	.word	0x0003d240
   3698c:	800fffff 	.word	0x800fffff
   36990:	fffffc0d 	.word	0xfffffc0d
   36994:	464a      	mov	r2, r9
   36996:	4649      	mov	r1, r9
   36998:	0c17      	lsrs	r7, r2, #16
   3699a:	0c1a      	lsrs	r2, r3, #16
   3699c:	041b      	lsls	r3, r3, #16
   3699e:	0c1b      	lsrs	r3, r3, #16
   369a0:	0408      	lsls	r0, r1, #16
   369a2:	0019      	movs	r1, r3
   369a4:	0c00      	lsrs	r0, r0, #16
   369a6:	4341      	muls	r1, r0
   369a8:	0015      	movs	r5, r2
   369aa:	4688      	mov	r8, r1
   369ac:	0019      	movs	r1, r3
   369ae:	437d      	muls	r5, r7
   369b0:	4379      	muls	r1, r7
   369b2:	9503      	str	r5, [sp, #12]
   369b4:	4689      	mov	r9, r1
   369b6:	0029      	movs	r1, r5
   369b8:	0015      	movs	r5, r2
   369ba:	4345      	muls	r5, r0
   369bc:	444d      	add	r5, r9
   369be:	9502      	str	r5, [sp, #8]
   369c0:	4645      	mov	r5, r8
   369c2:	0c2d      	lsrs	r5, r5, #16
   369c4:	46aa      	mov	sl, r5
   369c6:	9d02      	ldr	r5, [sp, #8]
   369c8:	4455      	add	r5, sl
   369ca:	45a9      	cmp	r9, r5
   369cc:	d906      	bls.n	369dc <__aeabi_dmul+0x238>
   369ce:	468a      	mov	sl, r1
   369d0:	2180      	movs	r1, #128	; 0x80
   369d2:	0249      	lsls	r1, r1, #9
   369d4:	4689      	mov	r9, r1
   369d6:	44ca      	add	sl, r9
   369d8:	4651      	mov	r1, sl
   369da:	9103      	str	r1, [sp, #12]
   369dc:	0c29      	lsrs	r1, r5, #16
   369de:	9104      	str	r1, [sp, #16]
   369e0:	4641      	mov	r1, r8
   369e2:	0409      	lsls	r1, r1, #16
   369e4:	042d      	lsls	r5, r5, #16
   369e6:	0c09      	lsrs	r1, r1, #16
   369e8:	4688      	mov	r8, r1
   369ea:	0029      	movs	r1, r5
   369ec:	0c25      	lsrs	r5, r4, #16
   369ee:	0424      	lsls	r4, r4, #16
   369f0:	4441      	add	r1, r8
   369f2:	0c24      	lsrs	r4, r4, #16
   369f4:	9105      	str	r1, [sp, #20]
   369f6:	0021      	movs	r1, r4
   369f8:	4341      	muls	r1, r0
   369fa:	4688      	mov	r8, r1
   369fc:	0021      	movs	r1, r4
   369fe:	4379      	muls	r1, r7
   36a00:	468a      	mov	sl, r1
   36a02:	4368      	muls	r0, r5
   36a04:	4641      	mov	r1, r8
   36a06:	4450      	add	r0, sl
   36a08:	4681      	mov	r9, r0
   36a0a:	0c08      	lsrs	r0, r1, #16
   36a0c:	4448      	add	r0, r9
   36a0e:	436f      	muls	r7, r5
   36a10:	4582      	cmp	sl, r0
   36a12:	d903      	bls.n	36a1c <__aeabi_dmul+0x278>
   36a14:	2180      	movs	r1, #128	; 0x80
   36a16:	0249      	lsls	r1, r1, #9
   36a18:	4689      	mov	r9, r1
   36a1a:	444f      	add	r7, r9
   36a1c:	0c01      	lsrs	r1, r0, #16
   36a1e:	4689      	mov	r9, r1
   36a20:	0039      	movs	r1, r7
   36a22:	4449      	add	r1, r9
   36a24:	9102      	str	r1, [sp, #8]
   36a26:	4641      	mov	r1, r8
   36a28:	040f      	lsls	r7, r1, #16
   36a2a:	9904      	ldr	r1, [sp, #16]
   36a2c:	0c3f      	lsrs	r7, r7, #16
   36a2e:	4688      	mov	r8, r1
   36a30:	0400      	lsls	r0, r0, #16
   36a32:	19c0      	adds	r0, r0, r7
   36a34:	4480      	add	r8, r0
   36a36:	4641      	mov	r1, r8
   36a38:	9104      	str	r1, [sp, #16]
   36a3a:	4659      	mov	r1, fp
   36a3c:	0c0f      	lsrs	r7, r1, #16
   36a3e:	0409      	lsls	r1, r1, #16
   36a40:	0c09      	lsrs	r1, r1, #16
   36a42:	4688      	mov	r8, r1
   36a44:	4359      	muls	r1, r3
   36a46:	468a      	mov	sl, r1
   36a48:	0039      	movs	r1, r7
   36a4a:	4351      	muls	r1, r2
   36a4c:	4689      	mov	r9, r1
   36a4e:	4641      	mov	r1, r8
   36a50:	434a      	muls	r2, r1
   36a52:	4651      	mov	r1, sl
   36a54:	0c09      	lsrs	r1, r1, #16
   36a56:	468b      	mov	fp, r1
   36a58:	437b      	muls	r3, r7
   36a5a:	18d2      	adds	r2, r2, r3
   36a5c:	445a      	add	r2, fp
   36a5e:	4293      	cmp	r3, r2
   36a60:	d903      	bls.n	36a6a <__aeabi_dmul+0x2c6>
   36a62:	2380      	movs	r3, #128	; 0x80
   36a64:	025b      	lsls	r3, r3, #9
   36a66:	469b      	mov	fp, r3
   36a68:	44d9      	add	r9, fp
   36a6a:	4651      	mov	r1, sl
   36a6c:	0409      	lsls	r1, r1, #16
   36a6e:	0c09      	lsrs	r1, r1, #16
   36a70:	468a      	mov	sl, r1
   36a72:	4641      	mov	r1, r8
   36a74:	4361      	muls	r1, r4
   36a76:	437c      	muls	r4, r7
   36a78:	0c13      	lsrs	r3, r2, #16
   36a7a:	0412      	lsls	r2, r2, #16
   36a7c:	444b      	add	r3, r9
   36a7e:	4452      	add	r2, sl
   36a80:	46a1      	mov	r9, r4
   36a82:	468a      	mov	sl, r1
   36a84:	003c      	movs	r4, r7
   36a86:	4641      	mov	r1, r8
   36a88:	436c      	muls	r4, r5
   36a8a:	434d      	muls	r5, r1
   36a8c:	4651      	mov	r1, sl
   36a8e:	444d      	add	r5, r9
   36a90:	0c0f      	lsrs	r7, r1, #16
   36a92:	197d      	adds	r5, r7, r5
   36a94:	45a9      	cmp	r9, r5
   36a96:	d903      	bls.n	36aa0 <__aeabi_dmul+0x2fc>
   36a98:	2180      	movs	r1, #128	; 0x80
   36a9a:	0249      	lsls	r1, r1, #9
   36a9c:	4688      	mov	r8, r1
   36a9e:	4444      	add	r4, r8
   36aa0:	9f04      	ldr	r7, [sp, #16]
   36aa2:	9903      	ldr	r1, [sp, #12]
   36aa4:	46b8      	mov	r8, r7
   36aa6:	4441      	add	r1, r8
   36aa8:	468b      	mov	fp, r1
   36aaa:	4583      	cmp	fp, r0
   36aac:	4180      	sbcs	r0, r0
   36aae:	4241      	negs	r1, r0
   36ab0:	4688      	mov	r8, r1
   36ab2:	4651      	mov	r1, sl
   36ab4:	0408      	lsls	r0, r1, #16
   36ab6:	042f      	lsls	r7, r5, #16
   36ab8:	0c00      	lsrs	r0, r0, #16
   36aba:	183f      	adds	r7, r7, r0
   36abc:	4658      	mov	r0, fp
   36abe:	9902      	ldr	r1, [sp, #8]
   36ac0:	1810      	adds	r0, r2, r0
   36ac2:	4689      	mov	r9, r1
   36ac4:	4290      	cmp	r0, r2
   36ac6:	4192      	sbcs	r2, r2
   36ac8:	444f      	add	r7, r9
   36aca:	46ba      	mov	sl, r7
   36acc:	4252      	negs	r2, r2
   36ace:	4699      	mov	r9, r3
   36ad0:	4693      	mov	fp, r2
   36ad2:	44c2      	add	sl, r8
   36ad4:	44d1      	add	r9, sl
   36ad6:	44cb      	add	fp, r9
   36ad8:	428f      	cmp	r7, r1
   36ada:	41bf      	sbcs	r7, r7
   36adc:	45c2      	cmp	sl, r8
   36ade:	4189      	sbcs	r1, r1
   36ae0:	4599      	cmp	r9, r3
   36ae2:	419b      	sbcs	r3, r3
   36ae4:	4593      	cmp	fp, r2
   36ae6:	4192      	sbcs	r2, r2
   36ae8:	427f      	negs	r7, r7
   36aea:	4249      	negs	r1, r1
   36aec:	0c2d      	lsrs	r5, r5, #16
   36aee:	4252      	negs	r2, r2
   36af0:	430f      	orrs	r7, r1
   36af2:	425b      	negs	r3, r3
   36af4:	4313      	orrs	r3, r2
   36af6:	197f      	adds	r7, r7, r5
   36af8:	18ff      	adds	r7, r7, r3
   36afa:	465b      	mov	r3, fp
   36afc:	193c      	adds	r4, r7, r4
   36afe:	0ddb      	lsrs	r3, r3, #23
   36b00:	9a05      	ldr	r2, [sp, #20]
   36b02:	0264      	lsls	r4, r4, #9
   36b04:	431c      	orrs	r4, r3
   36b06:	0243      	lsls	r3, r0, #9
   36b08:	4313      	orrs	r3, r2
   36b0a:	1e5d      	subs	r5, r3, #1
   36b0c:	41ab      	sbcs	r3, r5
   36b0e:	465a      	mov	r2, fp
   36b10:	0dc0      	lsrs	r0, r0, #23
   36b12:	4303      	orrs	r3, r0
   36b14:	0252      	lsls	r2, r2, #9
   36b16:	4313      	orrs	r3, r2
   36b18:	01e2      	lsls	r2, r4, #7
   36b1a:	d556      	bpl.n	36bca <__aeabi_dmul+0x426>
   36b1c:	2001      	movs	r0, #1
   36b1e:	085a      	lsrs	r2, r3, #1
   36b20:	4003      	ands	r3, r0
   36b22:	4313      	orrs	r3, r2
   36b24:	07e2      	lsls	r2, r4, #31
   36b26:	4313      	orrs	r3, r2
   36b28:	0864      	lsrs	r4, r4, #1
   36b2a:	485a      	ldr	r0, [pc, #360]	; (36c94 <__aeabi_dmul+0x4f0>)
   36b2c:	4460      	add	r0, ip
   36b2e:	2800      	cmp	r0, #0
   36b30:	dd4d      	ble.n	36bce <__aeabi_dmul+0x42a>
   36b32:	075a      	lsls	r2, r3, #29
   36b34:	d009      	beq.n	36b4a <__aeabi_dmul+0x3a6>
   36b36:	220f      	movs	r2, #15
   36b38:	401a      	ands	r2, r3
   36b3a:	2a04      	cmp	r2, #4
   36b3c:	d005      	beq.n	36b4a <__aeabi_dmul+0x3a6>
   36b3e:	1d1a      	adds	r2, r3, #4
   36b40:	429a      	cmp	r2, r3
   36b42:	419b      	sbcs	r3, r3
   36b44:	425b      	negs	r3, r3
   36b46:	18e4      	adds	r4, r4, r3
   36b48:	0013      	movs	r3, r2
   36b4a:	01e2      	lsls	r2, r4, #7
   36b4c:	d504      	bpl.n	36b58 <__aeabi_dmul+0x3b4>
   36b4e:	2080      	movs	r0, #128	; 0x80
   36b50:	4a51      	ldr	r2, [pc, #324]	; (36c98 <__aeabi_dmul+0x4f4>)
   36b52:	00c0      	lsls	r0, r0, #3
   36b54:	4014      	ands	r4, r2
   36b56:	4460      	add	r0, ip
   36b58:	4a50      	ldr	r2, [pc, #320]	; (36c9c <__aeabi_dmul+0x4f8>)
   36b5a:	4290      	cmp	r0, r2
   36b5c:	dd00      	ble.n	36b60 <__aeabi_dmul+0x3bc>
   36b5e:	e6e3      	b.n	36928 <__aeabi_dmul+0x184>
   36b60:	2501      	movs	r5, #1
   36b62:	08db      	lsrs	r3, r3, #3
   36b64:	0762      	lsls	r2, r4, #29
   36b66:	431a      	orrs	r2, r3
   36b68:	0264      	lsls	r4, r4, #9
   36b6a:	9b01      	ldr	r3, [sp, #4]
   36b6c:	4691      	mov	r9, r2
   36b6e:	0b22      	lsrs	r2, r4, #12
   36b70:	0544      	lsls	r4, r0, #21
   36b72:	0d64      	lsrs	r4, r4, #21
   36b74:	401d      	ands	r5, r3
   36b76:	e67c      	b.n	36872 <__aeabi_dmul+0xce>
   36b78:	2280      	movs	r2, #128	; 0x80
   36b7a:	4659      	mov	r1, fp
   36b7c:	0312      	lsls	r2, r2, #12
   36b7e:	4211      	tst	r1, r2
   36b80:	d008      	beq.n	36b94 <__aeabi_dmul+0x3f0>
   36b82:	4214      	tst	r4, r2
   36b84:	d106      	bne.n	36b94 <__aeabi_dmul+0x3f0>
   36b86:	4322      	orrs	r2, r4
   36b88:	0312      	lsls	r2, r2, #12
   36b8a:	0b12      	lsrs	r2, r2, #12
   36b8c:	4645      	mov	r5, r8
   36b8e:	4699      	mov	r9, r3
   36b90:	4c43      	ldr	r4, [pc, #268]	; (36ca0 <__aeabi_dmul+0x4fc>)
   36b92:	e66e      	b.n	36872 <__aeabi_dmul+0xce>
   36b94:	465b      	mov	r3, fp
   36b96:	431a      	orrs	r2, r3
   36b98:	0312      	lsls	r2, r2, #12
   36b9a:	0b12      	lsrs	r2, r2, #12
   36b9c:	4c40      	ldr	r4, [pc, #256]	; (36ca0 <__aeabi_dmul+0x4fc>)
   36b9e:	e668      	b.n	36872 <__aeabi_dmul+0xce>
   36ba0:	0003      	movs	r3, r0
   36ba2:	4654      	mov	r4, sl
   36ba4:	3b28      	subs	r3, #40	; 0x28
   36ba6:	409c      	lsls	r4, r3
   36ba8:	2300      	movs	r3, #0
   36baa:	e6b9      	b.n	36920 <__aeabi_dmul+0x17c>
   36bac:	f000 fcd8 	bl	37560 <__clzsi2>
   36bb0:	3020      	adds	r0, #32
   36bb2:	e6a6      	b.n	36902 <__aeabi_dmul+0x15e>
   36bb4:	0003      	movs	r3, r0
   36bb6:	3b28      	subs	r3, #40	; 0x28
   36bb8:	409f      	lsls	r7, r3
   36bba:	2300      	movs	r3, #0
   36bbc:	46bb      	mov	fp, r7
   36bbe:	4699      	mov	r9, r3
   36bc0:	e68a      	b.n	368d8 <__aeabi_dmul+0x134>
   36bc2:	f000 fccd 	bl	37560 <__clzsi2>
   36bc6:	3020      	adds	r0, #32
   36bc8:	e674      	b.n	368b4 <__aeabi_dmul+0x110>
   36bca:	46b4      	mov	ip, r6
   36bcc:	e7ad      	b.n	36b2a <__aeabi_dmul+0x386>
   36bce:	2501      	movs	r5, #1
   36bd0:	1a2a      	subs	r2, r5, r0
   36bd2:	2a38      	cmp	r2, #56	; 0x38
   36bd4:	dd06      	ble.n	36be4 <__aeabi_dmul+0x440>
   36bd6:	9b01      	ldr	r3, [sp, #4]
   36bd8:	2400      	movs	r4, #0
   36bda:	401d      	ands	r5, r3
   36bdc:	2300      	movs	r3, #0
   36bde:	2200      	movs	r2, #0
   36be0:	4699      	mov	r9, r3
   36be2:	e646      	b.n	36872 <__aeabi_dmul+0xce>
   36be4:	2a1f      	cmp	r2, #31
   36be6:	dc21      	bgt.n	36c2c <__aeabi_dmul+0x488>
   36be8:	2520      	movs	r5, #32
   36bea:	0020      	movs	r0, r4
   36bec:	1aad      	subs	r5, r5, r2
   36bee:	001e      	movs	r6, r3
   36bf0:	40ab      	lsls	r3, r5
   36bf2:	40a8      	lsls	r0, r5
   36bf4:	40d6      	lsrs	r6, r2
   36bf6:	1e5d      	subs	r5, r3, #1
   36bf8:	41ab      	sbcs	r3, r5
   36bfa:	4330      	orrs	r0, r6
   36bfc:	4318      	orrs	r0, r3
   36bfe:	40d4      	lsrs	r4, r2
   36c00:	0743      	lsls	r3, r0, #29
   36c02:	d009      	beq.n	36c18 <__aeabi_dmul+0x474>
   36c04:	230f      	movs	r3, #15
   36c06:	4003      	ands	r3, r0
   36c08:	2b04      	cmp	r3, #4
   36c0a:	d005      	beq.n	36c18 <__aeabi_dmul+0x474>
   36c0c:	0003      	movs	r3, r0
   36c0e:	1d18      	adds	r0, r3, #4
   36c10:	4298      	cmp	r0, r3
   36c12:	419b      	sbcs	r3, r3
   36c14:	425b      	negs	r3, r3
   36c16:	18e4      	adds	r4, r4, r3
   36c18:	0223      	lsls	r3, r4, #8
   36c1a:	d521      	bpl.n	36c60 <__aeabi_dmul+0x4bc>
   36c1c:	2501      	movs	r5, #1
   36c1e:	9b01      	ldr	r3, [sp, #4]
   36c20:	2401      	movs	r4, #1
   36c22:	401d      	ands	r5, r3
   36c24:	2300      	movs	r3, #0
   36c26:	2200      	movs	r2, #0
   36c28:	4699      	mov	r9, r3
   36c2a:	e622      	b.n	36872 <__aeabi_dmul+0xce>
   36c2c:	251f      	movs	r5, #31
   36c2e:	0021      	movs	r1, r4
   36c30:	426d      	negs	r5, r5
   36c32:	1a28      	subs	r0, r5, r0
   36c34:	40c1      	lsrs	r1, r0
   36c36:	0008      	movs	r0, r1
   36c38:	2a20      	cmp	r2, #32
   36c3a:	d01d      	beq.n	36c78 <__aeabi_dmul+0x4d4>
   36c3c:	355f      	adds	r5, #95	; 0x5f
   36c3e:	1aaa      	subs	r2, r5, r2
   36c40:	4094      	lsls	r4, r2
   36c42:	4323      	orrs	r3, r4
   36c44:	1e5c      	subs	r4, r3, #1
   36c46:	41a3      	sbcs	r3, r4
   36c48:	2507      	movs	r5, #7
   36c4a:	4303      	orrs	r3, r0
   36c4c:	401d      	ands	r5, r3
   36c4e:	2200      	movs	r2, #0
   36c50:	2d00      	cmp	r5, #0
   36c52:	d009      	beq.n	36c68 <__aeabi_dmul+0x4c4>
   36c54:	220f      	movs	r2, #15
   36c56:	2400      	movs	r4, #0
   36c58:	401a      	ands	r2, r3
   36c5a:	0018      	movs	r0, r3
   36c5c:	2a04      	cmp	r2, #4
   36c5e:	d1d6      	bne.n	36c0e <__aeabi_dmul+0x46a>
   36c60:	0003      	movs	r3, r0
   36c62:	0765      	lsls	r5, r4, #29
   36c64:	0264      	lsls	r4, r4, #9
   36c66:	0b22      	lsrs	r2, r4, #12
   36c68:	08db      	lsrs	r3, r3, #3
   36c6a:	432b      	orrs	r3, r5
   36c6c:	2501      	movs	r5, #1
   36c6e:	4699      	mov	r9, r3
   36c70:	9b01      	ldr	r3, [sp, #4]
   36c72:	2400      	movs	r4, #0
   36c74:	401d      	ands	r5, r3
   36c76:	e5fc      	b.n	36872 <__aeabi_dmul+0xce>
   36c78:	2400      	movs	r4, #0
   36c7a:	e7e2      	b.n	36c42 <__aeabi_dmul+0x49e>
   36c7c:	2280      	movs	r2, #128	; 0x80
   36c7e:	2501      	movs	r5, #1
   36c80:	0312      	lsls	r2, r2, #12
   36c82:	4322      	orrs	r2, r4
   36c84:	9901      	ldr	r1, [sp, #4]
   36c86:	0312      	lsls	r2, r2, #12
   36c88:	0b12      	lsrs	r2, r2, #12
   36c8a:	400d      	ands	r5, r1
   36c8c:	4699      	mov	r9, r3
   36c8e:	4c04      	ldr	r4, [pc, #16]	; (36ca0 <__aeabi_dmul+0x4fc>)
   36c90:	e5ef      	b.n	36872 <__aeabi_dmul+0xce>
   36c92:	46c0      	nop			; (mov r8, r8)
   36c94:	000003ff 	.word	0x000003ff
   36c98:	feffffff 	.word	0xfeffffff
   36c9c:	000007fe 	.word	0x000007fe
   36ca0:	000007ff 	.word	0x000007ff

00036ca4 <__aeabi_dsub>:
   36ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   36ca6:	4646      	mov	r6, r8
   36ca8:	46d6      	mov	lr, sl
   36caa:	464f      	mov	r7, r9
   36cac:	030c      	lsls	r4, r1, #12
   36cae:	b5c0      	push	{r6, r7, lr}
   36cb0:	0fcd      	lsrs	r5, r1, #31
   36cb2:	004e      	lsls	r6, r1, #1
   36cb4:	0a61      	lsrs	r1, r4, #9
   36cb6:	0f44      	lsrs	r4, r0, #29
   36cb8:	430c      	orrs	r4, r1
   36cba:	00c1      	lsls	r1, r0, #3
   36cbc:	0058      	lsls	r0, r3, #1
   36cbe:	0d40      	lsrs	r0, r0, #21
   36cc0:	4684      	mov	ip, r0
   36cc2:	468a      	mov	sl, r1
   36cc4:	000f      	movs	r7, r1
   36cc6:	0319      	lsls	r1, r3, #12
   36cc8:	0f50      	lsrs	r0, r2, #29
   36cca:	0a49      	lsrs	r1, r1, #9
   36ccc:	4301      	orrs	r1, r0
   36cce:	48c6      	ldr	r0, [pc, #792]	; (36fe8 <__aeabi_dsub+0x344>)
   36cd0:	0d76      	lsrs	r6, r6, #21
   36cd2:	46a8      	mov	r8, r5
   36cd4:	0fdb      	lsrs	r3, r3, #31
   36cd6:	00d2      	lsls	r2, r2, #3
   36cd8:	4584      	cmp	ip, r0
   36cda:	d100      	bne.n	36cde <__aeabi_dsub+0x3a>
   36cdc:	e0d8      	b.n	36e90 <__aeabi_dsub+0x1ec>
   36cde:	2001      	movs	r0, #1
   36ce0:	4043      	eors	r3, r0
   36ce2:	42ab      	cmp	r3, r5
   36ce4:	d100      	bne.n	36ce8 <__aeabi_dsub+0x44>
   36ce6:	e0a6      	b.n	36e36 <__aeabi_dsub+0x192>
   36ce8:	4660      	mov	r0, ip
   36cea:	1a35      	subs	r5, r6, r0
   36cec:	2d00      	cmp	r5, #0
   36cee:	dc00      	bgt.n	36cf2 <__aeabi_dsub+0x4e>
   36cf0:	e105      	b.n	36efe <__aeabi_dsub+0x25a>
   36cf2:	2800      	cmp	r0, #0
   36cf4:	d110      	bne.n	36d18 <__aeabi_dsub+0x74>
   36cf6:	000b      	movs	r3, r1
   36cf8:	4313      	orrs	r3, r2
   36cfa:	d100      	bne.n	36cfe <__aeabi_dsub+0x5a>
   36cfc:	e0d7      	b.n	36eae <__aeabi_dsub+0x20a>
   36cfe:	1e6b      	subs	r3, r5, #1
   36d00:	2b00      	cmp	r3, #0
   36d02:	d000      	beq.n	36d06 <__aeabi_dsub+0x62>
   36d04:	e14b      	b.n	36f9e <__aeabi_dsub+0x2fa>
   36d06:	4653      	mov	r3, sl
   36d08:	1a9f      	subs	r7, r3, r2
   36d0a:	45ba      	cmp	sl, r7
   36d0c:	4180      	sbcs	r0, r0
   36d0e:	1a64      	subs	r4, r4, r1
   36d10:	4240      	negs	r0, r0
   36d12:	1a24      	subs	r4, r4, r0
   36d14:	2601      	movs	r6, #1
   36d16:	e01e      	b.n	36d56 <__aeabi_dsub+0xb2>
   36d18:	4bb3      	ldr	r3, [pc, #716]	; (36fe8 <__aeabi_dsub+0x344>)
   36d1a:	429e      	cmp	r6, r3
   36d1c:	d048      	beq.n	36db0 <__aeabi_dsub+0x10c>
   36d1e:	2380      	movs	r3, #128	; 0x80
   36d20:	041b      	lsls	r3, r3, #16
   36d22:	4319      	orrs	r1, r3
   36d24:	2d38      	cmp	r5, #56	; 0x38
   36d26:	dd00      	ble.n	36d2a <__aeabi_dsub+0x86>
   36d28:	e119      	b.n	36f5e <__aeabi_dsub+0x2ba>
   36d2a:	2d1f      	cmp	r5, #31
   36d2c:	dd00      	ble.n	36d30 <__aeabi_dsub+0x8c>
   36d2e:	e14c      	b.n	36fca <__aeabi_dsub+0x326>
   36d30:	2320      	movs	r3, #32
   36d32:	000f      	movs	r7, r1
   36d34:	1b5b      	subs	r3, r3, r5
   36d36:	0010      	movs	r0, r2
   36d38:	409a      	lsls	r2, r3
   36d3a:	409f      	lsls	r7, r3
   36d3c:	40e8      	lsrs	r0, r5
   36d3e:	1e53      	subs	r3, r2, #1
   36d40:	419a      	sbcs	r2, r3
   36d42:	40e9      	lsrs	r1, r5
   36d44:	4307      	orrs	r7, r0
   36d46:	4317      	orrs	r7, r2
   36d48:	4653      	mov	r3, sl
   36d4a:	1bdf      	subs	r7, r3, r7
   36d4c:	1a61      	subs	r1, r4, r1
   36d4e:	45ba      	cmp	sl, r7
   36d50:	41a4      	sbcs	r4, r4
   36d52:	4264      	negs	r4, r4
   36d54:	1b0c      	subs	r4, r1, r4
   36d56:	0223      	lsls	r3, r4, #8
   36d58:	d400      	bmi.n	36d5c <__aeabi_dsub+0xb8>
   36d5a:	e0c5      	b.n	36ee8 <__aeabi_dsub+0x244>
   36d5c:	0264      	lsls	r4, r4, #9
   36d5e:	0a65      	lsrs	r5, r4, #9
   36d60:	2d00      	cmp	r5, #0
   36d62:	d100      	bne.n	36d66 <__aeabi_dsub+0xc2>
   36d64:	e0f6      	b.n	36f54 <__aeabi_dsub+0x2b0>
   36d66:	0028      	movs	r0, r5
   36d68:	f000 fbfa 	bl	37560 <__clzsi2>
   36d6c:	0003      	movs	r3, r0
   36d6e:	3b08      	subs	r3, #8
   36d70:	2b1f      	cmp	r3, #31
   36d72:	dd00      	ble.n	36d76 <__aeabi_dsub+0xd2>
   36d74:	e0e9      	b.n	36f4a <__aeabi_dsub+0x2a6>
   36d76:	2220      	movs	r2, #32
   36d78:	003c      	movs	r4, r7
   36d7a:	1ad2      	subs	r2, r2, r3
   36d7c:	409d      	lsls	r5, r3
   36d7e:	40d4      	lsrs	r4, r2
   36d80:	409f      	lsls	r7, r3
   36d82:	4325      	orrs	r5, r4
   36d84:	429e      	cmp	r6, r3
   36d86:	dd00      	ble.n	36d8a <__aeabi_dsub+0xe6>
   36d88:	e0db      	b.n	36f42 <__aeabi_dsub+0x29e>
   36d8a:	1b9e      	subs	r6, r3, r6
   36d8c:	1c73      	adds	r3, r6, #1
   36d8e:	2b1f      	cmp	r3, #31
   36d90:	dd00      	ble.n	36d94 <__aeabi_dsub+0xf0>
   36d92:	e10a      	b.n	36faa <__aeabi_dsub+0x306>
   36d94:	2220      	movs	r2, #32
   36d96:	0038      	movs	r0, r7
   36d98:	1ad2      	subs	r2, r2, r3
   36d9a:	0029      	movs	r1, r5
   36d9c:	4097      	lsls	r7, r2
   36d9e:	002c      	movs	r4, r5
   36da0:	4091      	lsls	r1, r2
   36da2:	40d8      	lsrs	r0, r3
   36da4:	1e7a      	subs	r2, r7, #1
   36da6:	4197      	sbcs	r7, r2
   36da8:	40dc      	lsrs	r4, r3
   36daa:	2600      	movs	r6, #0
   36dac:	4301      	orrs	r1, r0
   36dae:	430f      	orrs	r7, r1
   36db0:	077b      	lsls	r3, r7, #29
   36db2:	d009      	beq.n	36dc8 <__aeabi_dsub+0x124>
   36db4:	230f      	movs	r3, #15
   36db6:	403b      	ands	r3, r7
   36db8:	2b04      	cmp	r3, #4
   36dba:	d005      	beq.n	36dc8 <__aeabi_dsub+0x124>
   36dbc:	1d3b      	adds	r3, r7, #4
   36dbe:	42bb      	cmp	r3, r7
   36dc0:	41bf      	sbcs	r7, r7
   36dc2:	427f      	negs	r7, r7
   36dc4:	19e4      	adds	r4, r4, r7
   36dc6:	001f      	movs	r7, r3
   36dc8:	0223      	lsls	r3, r4, #8
   36dca:	d525      	bpl.n	36e18 <__aeabi_dsub+0x174>
   36dcc:	4b86      	ldr	r3, [pc, #536]	; (36fe8 <__aeabi_dsub+0x344>)
   36dce:	3601      	adds	r6, #1
   36dd0:	429e      	cmp	r6, r3
   36dd2:	d100      	bne.n	36dd6 <__aeabi_dsub+0x132>
   36dd4:	e0af      	b.n	36f36 <__aeabi_dsub+0x292>
   36dd6:	4b85      	ldr	r3, [pc, #532]	; (36fec <__aeabi_dsub+0x348>)
   36dd8:	2501      	movs	r5, #1
   36dda:	401c      	ands	r4, r3
   36ddc:	4643      	mov	r3, r8
   36dde:	0762      	lsls	r2, r4, #29
   36de0:	08ff      	lsrs	r7, r7, #3
   36de2:	0264      	lsls	r4, r4, #9
   36de4:	0576      	lsls	r6, r6, #21
   36de6:	4317      	orrs	r7, r2
   36de8:	0b24      	lsrs	r4, r4, #12
   36dea:	0d76      	lsrs	r6, r6, #21
   36dec:	401d      	ands	r5, r3
   36dee:	2100      	movs	r1, #0
   36df0:	0324      	lsls	r4, r4, #12
   36df2:	0b23      	lsrs	r3, r4, #12
   36df4:	0d0c      	lsrs	r4, r1, #20
   36df6:	4a7e      	ldr	r2, [pc, #504]	; (36ff0 <__aeabi_dsub+0x34c>)
   36df8:	0524      	lsls	r4, r4, #20
   36dfa:	431c      	orrs	r4, r3
   36dfc:	4014      	ands	r4, r2
   36dfe:	0533      	lsls	r3, r6, #20
   36e00:	4323      	orrs	r3, r4
   36e02:	005b      	lsls	r3, r3, #1
   36e04:	07ed      	lsls	r5, r5, #31
   36e06:	085b      	lsrs	r3, r3, #1
   36e08:	432b      	orrs	r3, r5
   36e0a:	0038      	movs	r0, r7
   36e0c:	0019      	movs	r1, r3
   36e0e:	bc1c      	pop	{r2, r3, r4}
   36e10:	4690      	mov	r8, r2
   36e12:	4699      	mov	r9, r3
   36e14:	46a2      	mov	sl, r4
   36e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36e18:	2501      	movs	r5, #1
   36e1a:	4643      	mov	r3, r8
   36e1c:	0762      	lsls	r2, r4, #29
   36e1e:	08ff      	lsrs	r7, r7, #3
   36e20:	4317      	orrs	r7, r2
   36e22:	08e4      	lsrs	r4, r4, #3
   36e24:	401d      	ands	r5, r3
   36e26:	4b70      	ldr	r3, [pc, #448]	; (36fe8 <__aeabi_dsub+0x344>)
   36e28:	429e      	cmp	r6, r3
   36e2a:	d036      	beq.n	36e9a <__aeabi_dsub+0x1f6>
   36e2c:	0324      	lsls	r4, r4, #12
   36e2e:	0576      	lsls	r6, r6, #21
   36e30:	0b24      	lsrs	r4, r4, #12
   36e32:	0d76      	lsrs	r6, r6, #21
   36e34:	e7db      	b.n	36dee <__aeabi_dsub+0x14a>
   36e36:	4663      	mov	r3, ip
   36e38:	1af3      	subs	r3, r6, r3
   36e3a:	2b00      	cmp	r3, #0
   36e3c:	dc00      	bgt.n	36e40 <__aeabi_dsub+0x19c>
   36e3e:	e094      	b.n	36f6a <__aeabi_dsub+0x2c6>
   36e40:	4660      	mov	r0, ip
   36e42:	2800      	cmp	r0, #0
   36e44:	d035      	beq.n	36eb2 <__aeabi_dsub+0x20e>
   36e46:	4868      	ldr	r0, [pc, #416]	; (36fe8 <__aeabi_dsub+0x344>)
   36e48:	4286      	cmp	r6, r0
   36e4a:	d0b1      	beq.n	36db0 <__aeabi_dsub+0x10c>
   36e4c:	2780      	movs	r7, #128	; 0x80
   36e4e:	043f      	lsls	r7, r7, #16
   36e50:	4339      	orrs	r1, r7
   36e52:	2b38      	cmp	r3, #56	; 0x38
   36e54:	dc00      	bgt.n	36e58 <__aeabi_dsub+0x1b4>
   36e56:	e0fd      	b.n	37054 <__aeabi_dsub+0x3b0>
   36e58:	430a      	orrs	r2, r1
   36e5a:	0017      	movs	r7, r2
   36e5c:	2100      	movs	r1, #0
   36e5e:	1e7a      	subs	r2, r7, #1
   36e60:	4197      	sbcs	r7, r2
   36e62:	4457      	add	r7, sl
   36e64:	4557      	cmp	r7, sl
   36e66:	4180      	sbcs	r0, r0
   36e68:	1909      	adds	r1, r1, r4
   36e6a:	4244      	negs	r4, r0
   36e6c:	190c      	adds	r4, r1, r4
   36e6e:	0223      	lsls	r3, r4, #8
   36e70:	d53a      	bpl.n	36ee8 <__aeabi_dsub+0x244>
   36e72:	4b5d      	ldr	r3, [pc, #372]	; (36fe8 <__aeabi_dsub+0x344>)
   36e74:	3601      	adds	r6, #1
   36e76:	429e      	cmp	r6, r3
   36e78:	d100      	bne.n	36e7c <__aeabi_dsub+0x1d8>
   36e7a:	e14b      	b.n	37114 <__aeabi_dsub+0x470>
   36e7c:	2201      	movs	r2, #1
   36e7e:	4b5b      	ldr	r3, [pc, #364]	; (36fec <__aeabi_dsub+0x348>)
   36e80:	401c      	ands	r4, r3
   36e82:	087b      	lsrs	r3, r7, #1
   36e84:	4017      	ands	r7, r2
   36e86:	431f      	orrs	r7, r3
   36e88:	07e2      	lsls	r2, r4, #31
   36e8a:	4317      	orrs	r7, r2
   36e8c:	0864      	lsrs	r4, r4, #1
   36e8e:	e78f      	b.n	36db0 <__aeabi_dsub+0x10c>
   36e90:	0008      	movs	r0, r1
   36e92:	4310      	orrs	r0, r2
   36e94:	d000      	beq.n	36e98 <__aeabi_dsub+0x1f4>
   36e96:	e724      	b.n	36ce2 <__aeabi_dsub+0x3e>
   36e98:	e721      	b.n	36cde <__aeabi_dsub+0x3a>
   36e9a:	0023      	movs	r3, r4
   36e9c:	433b      	orrs	r3, r7
   36e9e:	d100      	bne.n	36ea2 <__aeabi_dsub+0x1fe>
   36ea0:	e1b9      	b.n	37216 <__aeabi_dsub+0x572>
   36ea2:	2280      	movs	r2, #128	; 0x80
   36ea4:	0312      	lsls	r2, r2, #12
   36ea6:	4314      	orrs	r4, r2
   36ea8:	0324      	lsls	r4, r4, #12
   36eaa:	0b24      	lsrs	r4, r4, #12
   36eac:	e79f      	b.n	36dee <__aeabi_dsub+0x14a>
   36eae:	002e      	movs	r6, r5
   36eb0:	e77e      	b.n	36db0 <__aeabi_dsub+0x10c>
   36eb2:	0008      	movs	r0, r1
   36eb4:	4310      	orrs	r0, r2
   36eb6:	d100      	bne.n	36eba <__aeabi_dsub+0x216>
   36eb8:	e0ca      	b.n	37050 <__aeabi_dsub+0x3ac>
   36eba:	1e58      	subs	r0, r3, #1
   36ebc:	4684      	mov	ip, r0
   36ebe:	2800      	cmp	r0, #0
   36ec0:	d000      	beq.n	36ec4 <__aeabi_dsub+0x220>
   36ec2:	e0e7      	b.n	37094 <__aeabi_dsub+0x3f0>
   36ec4:	4452      	add	r2, sl
   36ec6:	4552      	cmp	r2, sl
   36ec8:	4180      	sbcs	r0, r0
   36eca:	1864      	adds	r4, r4, r1
   36ecc:	4240      	negs	r0, r0
   36ece:	1824      	adds	r4, r4, r0
   36ed0:	0017      	movs	r7, r2
   36ed2:	2601      	movs	r6, #1
   36ed4:	0223      	lsls	r3, r4, #8
   36ed6:	d507      	bpl.n	36ee8 <__aeabi_dsub+0x244>
   36ed8:	2602      	movs	r6, #2
   36eda:	e7cf      	b.n	36e7c <__aeabi_dsub+0x1d8>
   36edc:	4664      	mov	r4, ip
   36ede:	432c      	orrs	r4, r5
   36ee0:	d100      	bne.n	36ee4 <__aeabi_dsub+0x240>
   36ee2:	e1b3      	b.n	3724c <__aeabi_dsub+0x5a8>
   36ee4:	002c      	movs	r4, r5
   36ee6:	4667      	mov	r7, ip
   36ee8:	077b      	lsls	r3, r7, #29
   36eea:	d000      	beq.n	36eee <__aeabi_dsub+0x24a>
   36eec:	e762      	b.n	36db4 <__aeabi_dsub+0x110>
   36eee:	0763      	lsls	r3, r4, #29
   36ef0:	08ff      	lsrs	r7, r7, #3
   36ef2:	431f      	orrs	r7, r3
   36ef4:	2501      	movs	r5, #1
   36ef6:	4643      	mov	r3, r8
   36ef8:	08e4      	lsrs	r4, r4, #3
   36efa:	401d      	ands	r5, r3
   36efc:	e793      	b.n	36e26 <__aeabi_dsub+0x182>
   36efe:	2d00      	cmp	r5, #0
   36f00:	d178      	bne.n	36ff4 <__aeabi_dsub+0x350>
   36f02:	1c75      	adds	r5, r6, #1
   36f04:	056d      	lsls	r5, r5, #21
   36f06:	0d6d      	lsrs	r5, r5, #21
   36f08:	2d01      	cmp	r5, #1
   36f0a:	dc00      	bgt.n	36f0e <__aeabi_dsub+0x26a>
   36f0c:	e0f2      	b.n	370f4 <__aeabi_dsub+0x450>
   36f0e:	4650      	mov	r0, sl
   36f10:	1a80      	subs	r0, r0, r2
   36f12:	4582      	cmp	sl, r0
   36f14:	41bf      	sbcs	r7, r7
   36f16:	1a65      	subs	r5, r4, r1
   36f18:	427f      	negs	r7, r7
   36f1a:	1bed      	subs	r5, r5, r7
   36f1c:	4684      	mov	ip, r0
   36f1e:	0228      	lsls	r0, r5, #8
   36f20:	d400      	bmi.n	36f24 <__aeabi_dsub+0x280>
   36f22:	e08c      	b.n	3703e <__aeabi_dsub+0x39a>
   36f24:	4650      	mov	r0, sl
   36f26:	1a17      	subs	r7, r2, r0
   36f28:	42ba      	cmp	r2, r7
   36f2a:	4192      	sbcs	r2, r2
   36f2c:	1b0c      	subs	r4, r1, r4
   36f2e:	4255      	negs	r5, r2
   36f30:	1b65      	subs	r5, r4, r5
   36f32:	4698      	mov	r8, r3
   36f34:	e714      	b.n	36d60 <__aeabi_dsub+0xbc>
   36f36:	2501      	movs	r5, #1
   36f38:	4643      	mov	r3, r8
   36f3a:	2400      	movs	r4, #0
   36f3c:	401d      	ands	r5, r3
   36f3e:	2700      	movs	r7, #0
   36f40:	e755      	b.n	36dee <__aeabi_dsub+0x14a>
   36f42:	4c2a      	ldr	r4, [pc, #168]	; (36fec <__aeabi_dsub+0x348>)
   36f44:	1af6      	subs	r6, r6, r3
   36f46:	402c      	ands	r4, r5
   36f48:	e732      	b.n	36db0 <__aeabi_dsub+0x10c>
   36f4a:	003d      	movs	r5, r7
   36f4c:	3828      	subs	r0, #40	; 0x28
   36f4e:	4085      	lsls	r5, r0
   36f50:	2700      	movs	r7, #0
   36f52:	e717      	b.n	36d84 <__aeabi_dsub+0xe0>
   36f54:	0038      	movs	r0, r7
   36f56:	f000 fb03 	bl	37560 <__clzsi2>
   36f5a:	3020      	adds	r0, #32
   36f5c:	e706      	b.n	36d6c <__aeabi_dsub+0xc8>
   36f5e:	430a      	orrs	r2, r1
   36f60:	0017      	movs	r7, r2
   36f62:	2100      	movs	r1, #0
   36f64:	1e7a      	subs	r2, r7, #1
   36f66:	4197      	sbcs	r7, r2
   36f68:	e6ee      	b.n	36d48 <__aeabi_dsub+0xa4>
   36f6a:	2b00      	cmp	r3, #0
   36f6c:	d000      	beq.n	36f70 <__aeabi_dsub+0x2cc>
   36f6e:	e0e5      	b.n	3713c <__aeabi_dsub+0x498>
   36f70:	1c73      	adds	r3, r6, #1
   36f72:	469c      	mov	ip, r3
   36f74:	055b      	lsls	r3, r3, #21
   36f76:	0d5b      	lsrs	r3, r3, #21
   36f78:	2b01      	cmp	r3, #1
   36f7a:	dc00      	bgt.n	36f7e <__aeabi_dsub+0x2da>
   36f7c:	e09f      	b.n	370be <__aeabi_dsub+0x41a>
   36f7e:	4b1a      	ldr	r3, [pc, #104]	; (36fe8 <__aeabi_dsub+0x344>)
   36f80:	459c      	cmp	ip, r3
   36f82:	d100      	bne.n	36f86 <__aeabi_dsub+0x2e2>
   36f84:	e0c5      	b.n	37112 <__aeabi_dsub+0x46e>
   36f86:	4452      	add	r2, sl
   36f88:	4552      	cmp	r2, sl
   36f8a:	4180      	sbcs	r0, r0
   36f8c:	1864      	adds	r4, r4, r1
   36f8e:	4240      	negs	r0, r0
   36f90:	1824      	adds	r4, r4, r0
   36f92:	07e7      	lsls	r7, r4, #31
   36f94:	0852      	lsrs	r2, r2, #1
   36f96:	4317      	orrs	r7, r2
   36f98:	0864      	lsrs	r4, r4, #1
   36f9a:	4666      	mov	r6, ip
   36f9c:	e708      	b.n	36db0 <__aeabi_dsub+0x10c>
   36f9e:	4812      	ldr	r0, [pc, #72]	; (36fe8 <__aeabi_dsub+0x344>)
   36fa0:	4285      	cmp	r5, r0
   36fa2:	d100      	bne.n	36fa6 <__aeabi_dsub+0x302>
   36fa4:	e085      	b.n	370b2 <__aeabi_dsub+0x40e>
   36fa6:	001d      	movs	r5, r3
   36fa8:	e6bc      	b.n	36d24 <__aeabi_dsub+0x80>
   36faa:	0029      	movs	r1, r5
   36fac:	3e1f      	subs	r6, #31
   36fae:	40f1      	lsrs	r1, r6
   36fb0:	2b20      	cmp	r3, #32
   36fb2:	d100      	bne.n	36fb6 <__aeabi_dsub+0x312>
   36fb4:	e07f      	b.n	370b6 <__aeabi_dsub+0x412>
   36fb6:	2240      	movs	r2, #64	; 0x40
   36fb8:	1ad3      	subs	r3, r2, r3
   36fba:	409d      	lsls	r5, r3
   36fbc:	432f      	orrs	r7, r5
   36fbe:	1e7d      	subs	r5, r7, #1
   36fc0:	41af      	sbcs	r7, r5
   36fc2:	2400      	movs	r4, #0
   36fc4:	430f      	orrs	r7, r1
   36fc6:	2600      	movs	r6, #0
   36fc8:	e78e      	b.n	36ee8 <__aeabi_dsub+0x244>
   36fca:	002b      	movs	r3, r5
   36fcc:	000f      	movs	r7, r1
   36fce:	3b20      	subs	r3, #32
   36fd0:	40df      	lsrs	r7, r3
   36fd2:	2d20      	cmp	r5, #32
   36fd4:	d071      	beq.n	370ba <__aeabi_dsub+0x416>
   36fd6:	2340      	movs	r3, #64	; 0x40
   36fd8:	1b5d      	subs	r5, r3, r5
   36fda:	40a9      	lsls	r1, r5
   36fdc:	430a      	orrs	r2, r1
   36fde:	1e51      	subs	r1, r2, #1
   36fe0:	418a      	sbcs	r2, r1
   36fe2:	2100      	movs	r1, #0
   36fe4:	4317      	orrs	r7, r2
   36fe6:	e6af      	b.n	36d48 <__aeabi_dsub+0xa4>
   36fe8:	000007ff 	.word	0x000007ff
   36fec:	ff7fffff 	.word	0xff7fffff
   36ff0:	800fffff 	.word	0x800fffff
   36ff4:	2e00      	cmp	r6, #0
   36ff6:	d03e      	beq.n	37076 <__aeabi_dsub+0x3d2>
   36ff8:	4eb3      	ldr	r6, [pc, #716]	; (372c8 <__aeabi_dsub+0x624>)
   36ffa:	45b4      	cmp	ip, r6
   36ffc:	d045      	beq.n	3708a <__aeabi_dsub+0x3e6>
   36ffe:	2680      	movs	r6, #128	; 0x80
   37000:	0436      	lsls	r6, r6, #16
   37002:	426d      	negs	r5, r5
   37004:	4334      	orrs	r4, r6
   37006:	2d38      	cmp	r5, #56	; 0x38
   37008:	dd00      	ble.n	3700c <__aeabi_dsub+0x368>
   3700a:	e0a8      	b.n	3715e <__aeabi_dsub+0x4ba>
   3700c:	2d1f      	cmp	r5, #31
   3700e:	dd00      	ble.n	37012 <__aeabi_dsub+0x36e>
   37010:	e11f      	b.n	37252 <__aeabi_dsub+0x5ae>
   37012:	2620      	movs	r6, #32
   37014:	0027      	movs	r7, r4
   37016:	4650      	mov	r0, sl
   37018:	1b76      	subs	r6, r6, r5
   3701a:	40b7      	lsls	r7, r6
   3701c:	40e8      	lsrs	r0, r5
   3701e:	4307      	orrs	r7, r0
   37020:	4650      	mov	r0, sl
   37022:	40b0      	lsls	r0, r6
   37024:	1e46      	subs	r6, r0, #1
   37026:	41b0      	sbcs	r0, r6
   37028:	40ec      	lsrs	r4, r5
   3702a:	4338      	orrs	r0, r7
   3702c:	1a17      	subs	r7, r2, r0
   3702e:	42ba      	cmp	r2, r7
   37030:	4192      	sbcs	r2, r2
   37032:	1b0c      	subs	r4, r1, r4
   37034:	4252      	negs	r2, r2
   37036:	1aa4      	subs	r4, r4, r2
   37038:	4666      	mov	r6, ip
   3703a:	4698      	mov	r8, r3
   3703c:	e68b      	b.n	36d56 <__aeabi_dsub+0xb2>
   3703e:	4664      	mov	r4, ip
   37040:	4667      	mov	r7, ip
   37042:	432c      	orrs	r4, r5
   37044:	d000      	beq.n	37048 <__aeabi_dsub+0x3a4>
   37046:	e68b      	b.n	36d60 <__aeabi_dsub+0xbc>
   37048:	2500      	movs	r5, #0
   3704a:	2600      	movs	r6, #0
   3704c:	2700      	movs	r7, #0
   3704e:	e6ea      	b.n	36e26 <__aeabi_dsub+0x182>
   37050:	001e      	movs	r6, r3
   37052:	e6ad      	b.n	36db0 <__aeabi_dsub+0x10c>
   37054:	2b1f      	cmp	r3, #31
   37056:	dc60      	bgt.n	3711a <__aeabi_dsub+0x476>
   37058:	2720      	movs	r7, #32
   3705a:	1af8      	subs	r0, r7, r3
   3705c:	000f      	movs	r7, r1
   3705e:	4684      	mov	ip, r0
   37060:	4087      	lsls	r7, r0
   37062:	0010      	movs	r0, r2
   37064:	40d8      	lsrs	r0, r3
   37066:	4307      	orrs	r7, r0
   37068:	4660      	mov	r0, ip
   3706a:	4082      	lsls	r2, r0
   3706c:	1e50      	subs	r0, r2, #1
   3706e:	4182      	sbcs	r2, r0
   37070:	40d9      	lsrs	r1, r3
   37072:	4317      	orrs	r7, r2
   37074:	e6f5      	b.n	36e62 <__aeabi_dsub+0x1be>
   37076:	0026      	movs	r6, r4
   37078:	4650      	mov	r0, sl
   3707a:	4306      	orrs	r6, r0
   3707c:	d005      	beq.n	3708a <__aeabi_dsub+0x3e6>
   3707e:	43ed      	mvns	r5, r5
   37080:	2d00      	cmp	r5, #0
   37082:	d0d3      	beq.n	3702c <__aeabi_dsub+0x388>
   37084:	4e90      	ldr	r6, [pc, #576]	; (372c8 <__aeabi_dsub+0x624>)
   37086:	45b4      	cmp	ip, r6
   37088:	d1bd      	bne.n	37006 <__aeabi_dsub+0x362>
   3708a:	000c      	movs	r4, r1
   3708c:	0017      	movs	r7, r2
   3708e:	4666      	mov	r6, ip
   37090:	4698      	mov	r8, r3
   37092:	e68d      	b.n	36db0 <__aeabi_dsub+0x10c>
   37094:	488c      	ldr	r0, [pc, #560]	; (372c8 <__aeabi_dsub+0x624>)
   37096:	4283      	cmp	r3, r0
   37098:	d00b      	beq.n	370b2 <__aeabi_dsub+0x40e>
   3709a:	4663      	mov	r3, ip
   3709c:	e6d9      	b.n	36e52 <__aeabi_dsub+0x1ae>
   3709e:	2d00      	cmp	r5, #0
   370a0:	d000      	beq.n	370a4 <__aeabi_dsub+0x400>
   370a2:	e096      	b.n	371d2 <__aeabi_dsub+0x52e>
   370a4:	0008      	movs	r0, r1
   370a6:	4310      	orrs	r0, r2
   370a8:	d100      	bne.n	370ac <__aeabi_dsub+0x408>
   370aa:	e0e2      	b.n	37272 <__aeabi_dsub+0x5ce>
   370ac:	000c      	movs	r4, r1
   370ae:	0017      	movs	r7, r2
   370b0:	4698      	mov	r8, r3
   370b2:	4e85      	ldr	r6, [pc, #532]	; (372c8 <__aeabi_dsub+0x624>)
   370b4:	e67c      	b.n	36db0 <__aeabi_dsub+0x10c>
   370b6:	2500      	movs	r5, #0
   370b8:	e780      	b.n	36fbc <__aeabi_dsub+0x318>
   370ba:	2100      	movs	r1, #0
   370bc:	e78e      	b.n	36fdc <__aeabi_dsub+0x338>
   370be:	0023      	movs	r3, r4
   370c0:	4650      	mov	r0, sl
   370c2:	4303      	orrs	r3, r0
   370c4:	2e00      	cmp	r6, #0
   370c6:	d000      	beq.n	370ca <__aeabi_dsub+0x426>
   370c8:	e0a8      	b.n	3721c <__aeabi_dsub+0x578>
   370ca:	2b00      	cmp	r3, #0
   370cc:	d100      	bne.n	370d0 <__aeabi_dsub+0x42c>
   370ce:	e0de      	b.n	3728e <__aeabi_dsub+0x5ea>
   370d0:	000b      	movs	r3, r1
   370d2:	4313      	orrs	r3, r2
   370d4:	d100      	bne.n	370d8 <__aeabi_dsub+0x434>
   370d6:	e66b      	b.n	36db0 <__aeabi_dsub+0x10c>
   370d8:	4452      	add	r2, sl
   370da:	4552      	cmp	r2, sl
   370dc:	4180      	sbcs	r0, r0
   370de:	1864      	adds	r4, r4, r1
   370e0:	4240      	negs	r0, r0
   370e2:	1824      	adds	r4, r4, r0
   370e4:	0017      	movs	r7, r2
   370e6:	0223      	lsls	r3, r4, #8
   370e8:	d400      	bmi.n	370ec <__aeabi_dsub+0x448>
   370ea:	e6fd      	b.n	36ee8 <__aeabi_dsub+0x244>
   370ec:	4b77      	ldr	r3, [pc, #476]	; (372cc <__aeabi_dsub+0x628>)
   370ee:	4666      	mov	r6, ip
   370f0:	401c      	ands	r4, r3
   370f2:	e65d      	b.n	36db0 <__aeabi_dsub+0x10c>
   370f4:	0025      	movs	r5, r4
   370f6:	4650      	mov	r0, sl
   370f8:	4305      	orrs	r5, r0
   370fa:	2e00      	cmp	r6, #0
   370fc:	d1cf      	bne.n	3709e <__aeabi_dsub+0x3fa>
   370fe:	2d00      	cmp	r5, #0
   37100:	d14f      	bne.n	371a2 <__aeabi_dsub+0x4fe>
   37102:	000c      	movs	r4, r1
   37104:	4314      	orrs	r4, r2
   37106:	d100      	bne.n	3710a <__aeabi_dsub+0x466>
   37108:	e0a0      	b.n	3724c <__aeabi_dsub+0x5a8>
   3710a:	000c      	movs	r4, r1
   3710c:	0017      	movs	r7, r2
   3710e:	4698      	mov	r8, r3
   37110:	e64e      	b.n	36db0 <__aeabi_dsub+0x10c>
   37112:	4666      	mov	r6, ip
   37114:	2400      	movs	r4, #0
   37116:	2700      	movs	r7, #0
   37118:	e685      	b.n	36e26 <__aeabi_dsub+0x182>
   3711a:	001f      	movs	r7, r3
   3711c:	0008      	movs	r0, r1
   3711e:	3f20      	subs	r7, #32
   37120:	40f8      	lsrs	r0, r7
   37122:	0007      	movs	r7, r0
   37124:	2b20      	cmp	r3, #32
   37126:	d100      	bne.n	3712a <__aeabi_dsub+0x486>
   37128:	e08e      	b.n	37248 <__aeabi_dsub+0x5a4>
   3712a:	2040      	movs	r0, #64	; 0x40
   3712c:	1ac3      	subs	r3, r0, r3
   3712e:	4099      	lsls	r1, r3
   37130:	430a      	orrs	r2, r1
   37132:	1e51      	subs	r1, r2, #1
   37134:	418a      	sbcs	r2, r1
   37136:	2100      	movs	r1, #0
   37138:	4317      	orrs	r7, r2
   3713a:	e692      	b.n	36e62 <__aeabi_dsub+0x1be>
   3713c:	2e00      	cmp	r6, #0
   3713e:	d114      	bne.n	3716a <__aeabi_dsub+0x4c6>
   37140:	0026      	movs	r6, r4
   37142:	4650      	mov	r0, sl
   37144:	4306      	orrs	r6, r0
   37146:	d062      	beq.n	3720e <__aeabi_dsub+0x56a>
   37148:	43db      	mvns	r3, r3
   3714a:	2b00      	cmp	r3, #0
   3714c:	d15c      	bne.n	37208 <__aeabi_dsub+0x564>
   3714e:	1887      	adds	r7, r0, r2
   37150:	4297      	cmp	r7, r2
   37152:	4192      	sbcs	r2, r2
   37154:	1864      	adds	r4, r4, r1
   37156:	4252      	negs	r2, r2
   37158:	18a4      	adds	r4, r4, r2
   3715a:	4666      	mov	r6, ip
   3715c:	e687      	b.n	36e6e <__aeabi_dsub+0x1ca>
   3715e:	4650      	mov	r0, sl
   37160:	4320      	orrs	r0, r4
   37162:	1e44      	subs	r4, r0, #1
   37164:	41a0      	sbcs	r0, r4
   37166:	2400      	movs	r4, #0
   37168:	e760      	b.n	3702c <__aeabi_dsub+0x388>
   3716a:	4e57      	ldr	r6, [pc, #348]	; (372c8 <__aeabi_dsub+0x624>)
   3716c:	45b4      	cmp	ip, r6
   3716e:	d04e      	beq.n	3720e <__aeabi_dsub+0x56a>
   37170:	2680      	movs	r6, #128	; 0x80
   37172:	0436      	lsls	r6, r6, #16
   37174:	425b      	negs	r3, r3
   37176:	4334      	orrs	r4, r6
   37178:	2b38      	cmp	r3, #56	; 0x38
   3717a:	dd00      	ble.n	3717e <__aeabi_dsub+0x4da>
   3717c:	e07f      	b.n	3727e <__aeabi_dsub+0x5da>
   3717e:	2b1f      	cmp	r3, #31
   37180:	dd00      	ble.n	37184 <__aeabi_dsub+0x4e0>
   37182:	e08b      	b.n	3729c <__aeabi_dsub+0x5f8>
   37184:	2620      	movs	r6, #32
   37186:	0027      	movs	r7, r4
   37188:	4650      	mov	r0, sl
   3718a:	1af6      	subs	r6, r6, r3
   3718c:	40b7      	lsls	r7, r6
   3718e:	40d8      	lsrs	r0, r3
   37190:	4307      	orrs	r7, r0
   37192:	4650      	mov	r0, sl
   37194:	40b0      	lsls	r0, r6
   37196:	1e46      	subs	r6, r0, #1
   37198:	41b0      	sbcs	r0, r6
   3719a:	4307      	orrs	r7, r0
   3719c:	40dc      	lsrs	r4, r3
   3719e:	18bf      	adds	r7, r7, r2
   371a0:	e7d6      	b.n	37150 <__aeabi_dsub+0x4ac>
   371a2:	000d      	movs	r5, r1
   371a4:	4315      	orrs	r5, r2
   371a6:	d100      	bne.n	371aa <__aeabi_dsub+0x506>
   371a8:	e602      	b.n	36db0 <__aeabi_dsub+0x10c>
   371aa:	4650      	mov	r0, sl
   371ac:	1a80      	subs	r0, r0, r2
   371ae:	4582      	cmp	sl, r0
   371b0:	41bf      	sbcs	r7, r7
   371b2:	1a65      	subs	r5, r4, r1
   371b4:	427f      	negs	r7, r7
   371b6:	1bed      	subs	r5, r5, r7
   371b8:	4684      	mov	ip, r0
   371ba:	0228      	lsls	r0, r5, #8
   371bc:	d400      	bmi.n	371c0 <__aeabi_dsub+0x51c>
   371be:	e68d      	b.n	36edc <__aeabi_dsub+0x238>
   371c0:	4650      	mov	r0, sl
   371c2:	1a17      	subs	r7, r2, r0
   371c4:	42ba      	cmp	r2, r7
   371c6:	4192      	sbcs	r2, r2
   371c8:	1b0c      	subs	r4, r1, r4
   371ca:	4252      	negs	r2, r2
   371cc:	1aa4      	subs	r4, r4, r2
   371ce:	4698      	mov	r8, r3
   371d0:	e5ee      	b.n	36db0 <__aeabi_dsub+0x10c>
   371d2:	000d      	movs	r5, r1
   371d4:	4315      	orrs	r5, r2
   371d6:	d100      	bne.n	371da <__aeabi_dsub+0x536>
   371d8:	e76b      	b.n	370b2 <__aeabi_dsub+0x40e>
   371da:	4650      	mov	r0, sl
   371dc:	0767      	lsls	r7, r4, #29
   371de:	08c0      	lsrs	r0, r0, #3
   371e0:	4307      	orrs	r7, r0
   371e2:	2080      	movs	r0, #128	; 0x80
   371e4:	08e4      	lsrs	r4, r4, #3
   371e6:	0300      	lsls	r0, r0, #12
   371e8:	4204      	tst	r4, r0
   371ea:	d007      	beq.n	371fc <__aeabi_dsub+0x558>
   371ec:	08cd      	lsrs	r5, r1, #3
   371ee:	4205      	tst	r5, r0
   371f0:	d104      	bne.n	371fc <__aeabi_dsub+0x558>
   371f2:	002c      	movs	r4, r5
   371f4:	4698      	mov	r8, r3
   371f6:	08d7      	lsrs	r7, r2, #3
   371f8:	0749      	lsls	r1, r1, #29
   371fa:	430f      	orrs	r7, r1
   371fc:	0f7b      	lsrs	r3, r7, #29
   371fe:	00e4      	lsls	r4, r4, #3
   37200:	431c      	orrs	r4, r3
   37202:	00ff      	lsls	r7, r7, #3
   37204:	4e30      	ldr	r6, [pc, #192]	; (372c8 <__aeabi_dsub+0x624>)
   37206:	e5d3      	b.n	36db0 <__aeabi_dsub+0x10c>
   37208:	4e2f      	ldr	r6, [pc, #188]	; (372c8 <__aeabi_dsub+0x624>)
   3720a:	45b4      	cmp	ip, r6
   3720c:	d1b4      	bne.n	37178 <__aeabi_dsub+0x4d4>
   3720e:	000c      	movs	r4, r1
   37210:	0017      	movs	r7, r2
   37212:	4666      	mov	r6, ip
   37214:	e5cc      	b.n	36db0 <__aeabi_dsub+0x10c>
   37216:	2700      	movs	r7, #0
   37218:	2400      	movs	r4, #0
   3721a:	e5e8      	b.n	36dee <__aeabi_dsub+0x14a>
   3721c:	2b00      	cmp	r3, #0
   3721e:	d039      	beq.n	37294 <__aeabi_dsub+0x5f0>
   37220:	000b      	movs	r3, r1
   37222:	4313      	orrs	r3, r2
   37224:	d100      	bne.n	37228 <__aeabi_dsub+0x584>
   37226:	e744      	b.n	370b2 <__aeabi_dsub+0x40e>
   37228:	08c0      	lsrs	r0, r0, #3
   3722a:	0767      	lsls	r7, r4, #29
   3722c:	4307      	orrs	r7, r0
   3722e:	2080      	movs	r0, #128	; 0x80
   37230:	08e4      	lsrs	r4, r4, #3
   37232:	0300      	lsls	r0, r0, #12
   37234:	4204      	tst	r4, r0
   37236:	d0e1      	beq.n	371fc <__aeabi_dsub+0x558>
   37238:	08cb      	lsrs	r3, r1, #3
   3723a:	4203      	tst	r3, r0
   3723c:	d1de      	bne.n	371fc <__aeabi_dsub+0x558>
   3723e:	08d7      	lsrs	r7, r2, #3
   37240:	0749      	lsls	r1, r1, #29
   37242:	430f      	orrs	r7, r1
   37244:	001c      	movs	r4, r3
   37246:	e7d9      	b.n	371fc <__aeabi_dsub+0x558>
   37248:	2100      	movs	r1, #0
   3724a:	e771      	b.n	37130 <__aeabi_dsub+0x48c>
   3724c:	2500      	movs	r5, #0
   3724e:	2700      	movs	r7, #0
   37250:	e5e9      	b.n	36e26 <__aeabi_dsub+0x182>
   37252:	002e      	movs	r6, r5
   37254:	0027      	movs	r7, r4
   37256:	3e20      	subs	r6, #32
   37258:	40f7      	lsrs	r7, r6
   3725a:	2d20      	cmp	r5, #32
   3725c:	d02f      	beq.n	372be <__aeabi_dsub+0x61a>
   3725e:	2640      	movs	r6, #64	; 0x40
   37260:	1b75      	subs	r5, r6, r5
   37262:	40ac      	lsls	r4, r5
   37264:	4650      	mov	r0, sl
   37266:	4320      	orrs	r0, r4
   37268:	1e44      	subs	r4, r0, #1
   3726a:	41a0      	sbcs	r0, r4
   3726c:	2400      	movs	r4, #0
   3726e:	4338      	orrs	r0, r7
   37270:	e6dc      	b.n	3702c <__aeabi_dsub+0x388>
   37272:	2480      	movs	r4, #128	; 0x80
   37274:	2500      	movs	r5, #0
   37276:	0324      	lsls	r4, r4, #12
   37278:	4e13      	ldr	r6, [pc, #76]	; (372c8 <__aeabi_dsub+0x624>)
   3727a:	2700      	movs	r7, #0
   3727c:	e5d3      	b.n	36e26 <__aeabi_dsub+0x182>
   3727e:	4650      	mov	r0, sl
   37280:	4320      	orrs	r0, r4
   37282:	0007      	movs	r7, r0
   37284:	1e78      	subs	r0, r7, #1
   37286:	4187      	sbcs	r7, r0
   37288:	2400      	movs	r4, #0
   3728a:	18bf      	adds	r7, r7, r2
   3728c:	e760      	b.n	37150 <__aeabi_dsub+0x4ac>
   3728e:	000c      	movs	r4, r1
   37290:	0017      	movs	r7, r2
   37292:	e58d      	b.n	36db0 <__aeabi_dsub+0x10c>
   37294:	000c      	movs	r4, r1
   37296:	0017      	movs	r7, r2
   37298:	4e0b      	ldr	r6, [pc, #44]	; (372c8 <__aeabi_dsub+0x624>)
   3729a:	e589      	b.n	36db0 <__aeabi_dsub+0x10c>
   3729c:	001e      	movs	r6, r3
   3729e:	0027      	movs	r7, r4
   372a0:	3e20      	subs	r6, #32
   372a2:	40f7      	lsrs	r7, r6
   372a4:	2b20      	cmp	r3, #32
   372a6:	d00c      	beq.n	372c2 <__aeabi_dsub+0x61e>
   372a8:	2640      	movs	r6, #64	; 0x40
   372aa:	1af3      	subs	r3, r6, r3
   372ac:	409c      	lsls	r4, r3
   372ae:	4650      	mov	r0, sl
   372b0:	4320      	orrs	r0, r4
   372b2:	1e44      	subs	r4, r0, #1
   372b4:	41a0      	sbcs	r0, r4
   372b6:	4307      	orrs	r7, r0
   372b8:	2400      	movs	r4, #0
   372ba:	18bf      	adds	r7, r7, r2
   372bc:	e748      	b.n	37150 <__aeabi_dsub+0x4ac>
   372be:	2400      	movs	r4, #0
   372c0:	e7d0      	b.n	37264 <__aeabi_dsub+0x5c0>
   372c2:	2400      	movs	r4, #0
   372c4:	e7f3      	b.n	372ae <__aeabi_dsub+0x60a>
   372c6:	46c0      	nop			; (mov r8, r8)
   372c8:	000007ff 	.word	0x000007ff
   372cc:	ff7fffff 	.word	0xff7fffff

000372d0 <__aeabi_d2iz>:
   372d0:	b530      	push	{r4, r5, lr}
   372d2:	4d13      	ldr	r5, [pc, #76]	; (37320 <__aeabi_d2iz+0x50>)
   372d4:	030a      	lsls	r2, r1, #12
   372d6:	004b      	lsls	r3, r1, #1
   372d8:	0b12      	lsrs	r2, r2, #12
   372da:	0d5b      	lsrs	r3, r3, #21
   372dc:	0fc9      	lsrs	r1, r1, #31
   372de:	2400      	movs	r4, #0
   372e0:	42ab      	cmp	r3, r5
   372e2:	dd10      	ble.n	37306 <__aeabi_d2iz+0x36>
   372e4:	4c0f      	ldr	r4, [pc, #60]	; (37324 <__aeabi_d2iz+0x54>)
   372e6:	42a3      	cmp	r3, r4
   372e8:	dc0f      	bgt.n	3730a <__aeabi_d2iz+0x3a>
   372ea:	2480      	movs	r4, #128	; 0x80
   372ec:	4d0e      	ldr	r5, [pc, #56]	; (37328 <__aeabi_d2iz+0x58>)
   372ee:	0364      	lsls	r4, r4, #13
   372f0:	4322      	orrs	r2, r4
   372f2:	1aed      	subs	r5, r5, r3
   372f4:	2d1f      	cmp	r5, #31
   372f6:	dd0b      	ble.n	37310 <__aeabi_d2iz+0x40>
   372f8:	480c      	ldr	r0, [pc, #48]	; (3732c <__aeabi_d2iz+0x5c>)
   372fa:	1ac3      	subs	r3, r0, r3
   372fc:	40da      	lsrs	r2, r3
   372fe:	4254      	negs	r4, r2
   37300:	2900      	cmp	r1, #0
   37302:	d100      	bne.n	37306 <__aeabi_d2iz+0x36>
   37304:	0014      	movs	r4, r2
   37306:	0020      	movs	r0, r4
   37308:	bd30      	pop	{r4, r5, pc}
   3730a:	4b09      	ldr	r3, [pc, #36]	; (37330 <__aeabi_d2iz+0x60>)
   3730c:	18cc      	adds	r4, r1, r3
   3730e:	e7fa      	b.n	37306 <__aeabi_d2iz+0x36>
   37310:	4c08      	ldr	r4, [pc, #32]	; (37334 <__aeabi_d2iz+0x64>)
   37312:	40e8      	lsrs	r0, r5
   37314:	46a4      	mov	ip, r4
   37316:	4463      	add	r3, ip
   37318:	409a      	lsls	r2, r3
   3731a:	4302      	orrs	r2, r0
   3731c:	e7ef      	b.n	372fe <__aeabi_d2iz+0x2e>
   3731e:	46c0      	nop			; (mov r8, r8)
   37320:	000003fe 	.word	0x000003fe
   37324:	0000041d 	.word	0x0000041d
   37328:	00000433 	.word	0x00000433
   3732c:	00000413 	.word	0x00000413
   37330:	7fffffff 	.word	0x7fffffff
   37334:	fffffbed 	.word	0xfffffbed

00037338 <__aeabi_ui2d>:
   37338:	b510      	push	{r4, lr}
   3733a:	1e04      	subs	r4, r0, #0
   3733c:	d028      	beq.n	37390 <__aeabi_ui2d+0x58>
   3733e:	f000 f90f 	bl	37560 <__clzsi2>
   37342:	4b15      	ldr	r3, [pc, #84]	; (37398 <__aeabi_ui2d+0x60>)
   37344:	4a15      	ldr	r2, [pc, #84]	; (3739c <__aeabi_ui2d+0x64>)
   37346:	1a1b      	subs	r3, r3, r0
   37348:	1ad2      	subs	r2, r2, r3
   3734a:	2a1f      	cmp	r2, #31
   3734c:	dd15      	ble.n	3737a <__aeabi_ui2d+0x42>
   3734e:	4a14      	ldr	r2, [pc, #80]	; (373a0 <__aeabi_ui2d+0x68>)
   37350:	1ad2      	subs	r2, r2, r3
   37352:	4094      	lsls	r4, r2
   37354:	2200      	movs	r2, #0
   37356:	0324      	lsls	r4, r4, #12
   37358:	055b      	lsls	r3, r3, #21
   3735a:	0b24      	lsrs	r4, r4, #12
   3735c:	0d5b      	lsrs	r3, r3, #21
   3735e:	2100      	movs	r1, #0
   37360:	0010      	movs	r0, r2
   37362:	0324      	lsls	r4, r4, #12
   37364:	0d0a      	lsrs	r2, r1, #20
   37366:	0b24      	lsrs	r4, r4, #12
   37368:	0512      	lsls	r2, r2, #20
   3736a:	4322      	orrs	r2, r4
   3736c:	4c0d      	ldr	r4, [pc, #52]	; (373a4 <__aeabi_ui2d+0x6c>)
   3736e:	051b      	lsls	r3, r3, #20
   37370:	4022      	ands	r2, r4
   37372:	4313      	orrs	r3, r2
   37374:	005b      	lsls	r3, r3, #1
   37376:	0859      	lsrs	r1, r3, #1
   37378:	bd10      	pop	{r4, pc}
   3737a:	0021      	movs	r1, r4
   3737c:	4091      	lsls	r1, r2
   3737e:	000a      	movs	r2, r1
   37380:	210b      	movs	r1, #11
   37382:	1a08      	subs	r0, r1, r0
   37384:	40c4      	lsrs	r4, r0
   37386:	055b      	lsls	r3, r3, #21
   37388:	0324      	lsls	r4, r4, #12
   3738a:	0b24      	lsrs	r4, r4, #12
   3738c:	0d5b      	lsrs	r3, r3, #21
   3738e:	e7e6      	b.n	3735e <__aeabi_ui2d+0x26>
   37390:	2300      	movs	r3, #0
   37392:	2400      	movs	r4, #0
   37394:	2200      	movs	r2, #0
   37396:	e7e2      	b.n	3735e <__aeabi_ui2d+0x26>
   37398:	0000041e 	.word	0x0000041e
   3739c:	00000433 	.word	0x00000433
   373a0:	00000413 	.word	0x00000413
   373a4:	800fffff 	.word	0x800fffff

000373a8 <__aeabi_f2d>:
   373a8:	0041      	lsls	r1, r0, #1
   373aa:	0e09      	lsrs	r1, r1, #24
   373ac:	1c4b      	adds	r3, r1, #1
   373ae:	b570      	push	{r4, r5, r6, lr}
   373b0:	b2db      	uxtb	r3, r3
   373b2:	0246      	lsls	r6, r0, #9
   373b4:	0a75      	lsrs	r5, r6, #9
   373b6:	0fc4      	lsrs	r4, r0, #31
   373b8:	2b01      	cmp	r3, #1
   373ba:	dd14      	ble.n	373e6 <__aeabi_f2d+0x3e>
   373bc:	23e0      	movs	r3, #224	; 0xe0
   373be:	009b      	lsls	r3, r3, #2
   373c0:	076d      	lsls	r5, r5, #29
   373c2:	0b36      	lsrs	r6, r6, #12
   373c4:	18cb      	adds	r3, r1, r3
   373c6:	2100      	movs	r1, #0
   373c8:	0d0a      	lsrs	r2, r1, #20
   373ca:	0028      	movs	r0, r5
   373cc:	0512      	lsls	r2, r2, #20
   373ce:	4d1c      	ldr	r5, [pc, #112]	; (37440 <__aeabi_f2d+0x98>)
   373d0:	4332      	orrs	r2, r6
   373d2:	055b      	lsls	r3, r3, #21
   373d4:	402a      	ands	r2, r5
   373d6:	085b      	lsrs	r3, r3, #1
   373d8:	4313      	orrs	r3, r2
   373da:	005b      	lsls	r3, r3, #1
   373dc:	07e4      	lsls	r4, r4, #31
   373de:	085b      	lsrs	r3, r3, #1
   373e0:	4323      	orrs	r3, r4
   373e2:	0019      	movs	r1, r3
   373e4:	bd70      	pop	{r4, r5, r6, pc}
   373e6:	2900      	cmp	r1, #0
   373e8:	d114      	bne.n	37414 <__aeabi_f2d+0x6c>
   373ea:	2d00      	cmp	r5, #0
   373ec:	d01e      	beq.n	3742c <__aeabi_f2d+0x84>
   373ee:	0028      	movs	r0, r5
   373f0:	f000 f8b6 	bl	37560 <__clzsi2>
   373f4:	280a      	cmp	r0, #10
   373f6:	dc1c      	bgt.n	37432 <__aeabi_f2d+0x8a>
   373f8:	230b      	movs	r3, #11
   373fa:	002a      	movs	r2, r5
   373fc:	1a1b      	subs	r3, r3, r0
   373fe:	40da      	lsrs	r2, r3
   37400:	0003      	movs	r3, r0
   37402:	3315      	adds	r3, #21
   37404:	409d      	lsls	r5, r3
   37406:	4b0f      	ldr	r3, [pc, #60]	; (37444 <__aeabi_f2d+0x9c>)
   37408:	0312      	lsls	r2, r2, #12
   3740a:	1a1b      	subs	r3, r3, r0
   3740c:	055b      	lsls	r3, r3, #21
   3740e:	0b16      	lsrs	r6, r2, #12
   37410:	0d5b      	lsrs	r3, r3, #21
   37412:	e7d8      	b.n	373c6 <__aeabi_f2d+0x1e>
   37414:	2d00      	cmp	r5, #0
   37416:	d006      	beq.n	37426 <__aeabi_f2d+0x7e>
   37418:	0b32      	lsrs	r2, r6, #12
   3741a:	2680      	movs	r6, #128	; 0x80
   3741c:	0336      	lsls	r6, r6, #12
   3741e:	076d      	lsls	r5, r5, #29
   37420:	4316      	orrs	r6, r2
   37422:	4b09      	ldr	r3, [pc, #36]	; (37448 <__aeabi_f2d+0xa0>)
   37424:	e7cf      	b.n	373c6 <__aeabi_f2d+0x1e>
   37426:	4b08      	ldr	r3, [pc, #32]	; (37448 <__aeabi_f2d+0xa0>)
   37428:	2600      	movs	r6, #0
   3742a:	e7cc      	b.n	373c6 <__aeabi_f2d+0x1e>
   3742c:	2300      	movs	r3, #0
   3742e:	2600      	movs	r6, #0
   37430:	e7c9      	b.n	373c6 <__aeabi_f2d+0x1e>
   37432:	0003      	movs	r3, r0
   37434:	002a      	movs	r2, r5
   37436:	3b0b      	subs	r3, #11
   37438:	409a      	lsls	r2, r3
   3743a:	2500      	movs	r5, #0
   3743c:	e7e3      	b.n	37406 <__aeabi_f2d+0x5e>
   3743e:	46c0      	nop			; (mov r8, r8)
   37440:	800fffff 	.word	0x800fffff
   37444:	00000389 	.word	0x00000389
   37448:	000007ff 	.word	0x000007ff

0003744c <__aeabi_d2f>:
   3744c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3744e:	004c      	lsls	r4, r1, #1
   37450:	0d64      	lsrs	r4, r4, #21
   37452:	030b      	lsls	r3, r1, #12
   37454:	1c62      	adds	r2, r4, #1
   37456:	0f45      	lsrs	r5, r0, #29
   37458:	0a5b      	lsrs	r3, r3, #9
   3745a:	0552      	lsls	r2, r2, #21
   3745c:	432b      	orrs	r3, r5
   3745e:	0fc9      	lsrs	r1, r1, #31
   37460:	00c5      	lsls	r5, r0, #3
   37462:	0d52      	lsrs	r2, r2, #21
   37464:	2a01      	cmp	r2, #1
   37466:	dd28      	ble.n	374ba <__aeabi_d2f+0x6e>
   37468:	4a3a      	ldr	r2, [pc, #232]	; (37554 <__aeabi_d2f+0x108>)
   3746a:	18a6      	adds	r6, r4, r2
   3746c:	2efe      	cmp	r6, #254	; 0xfe
   3746e:	dc1b      	bgt.n	374a8 <__aeabi_d2f+0x5c>
   37470:	2e00      	cmp	r6, #0
   37472:	dd3e      	ble.n	374f2 <__aeabi_d2f+0xa6>
   37474:	0180      	lsls	r0, r0, #6
   37476:	0002      	movs	r2, r0
   37478:	1e50      	subs	r0, r2, #1
   3747a:	4182      	sbcs	r2, r0
   3747c:	0f6d      	lsrs	r5, r5, #29
   3747e:	432a      	orrs	r2, r5
   37480:	00db      	lsls	r3, r3, #3
   37482:	4313      	orrs	r3, r2
   37484:	075a      	lsls	r2, r3, #29
   37486:	d004      	beq.n	37492 <__aeabi_d2f+0x46>
   37488:	220f      	movs	r2, #15
   3748a:	401a      	ands	r2, r3
   3748c:	2a04      	cmp	r2, #4
   3748e:	d000      	beq.n	37492 <__aeabi_d2f+0x46>
   37490:	3304      	adds	r3, #4
   37492:	2280      	movs	r2, #128	; 0x80
   37494:	04d2      	lsls	r2, r2, #19
   37496:	401a      	ands	r2, r3
   37498:	d05a      	beq.n	37550 <__aeabi_d2f+0x104>
   3749a:	3601      	adds	r6, #1
   3749c:	2eff      	cmp	r6, #255	; 0xff
   3749e:	d003      	beq.n	374a8 <__aeabi_d2f+0x5c>
   374a0:	019b      	lsls	r3, r3, #6
   374a2:	0a5b      	lsrs	r3, r3, #9
   374a4:	b2f4      	uxtb	r4, r6
   374a6:	e001      	b.n	374ac <__aeabi_d2f+0x60>
   374a8:	24ff      	movs	r4, #255	; 0xff
   374aa:	2300      	movs	r3, #0
   374ac:	0258      	lsls	r0, r3, #9
   374ae:	05e4      	lsls	r4, r4, #23
   374b0:	0a40      	lsrs	r0, r0, #9
   374b2:	07c9      	lsls	r1, r1, #31
   374b4:	4320      	orrs	r0, r4
   374b6:	4308      	orrs	r0, r1
   374b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   374ba:	2c00      	cmp	r4, #0
   374bc:	d007      	beq.n	374ce <__aeabi_d2f+0x82>
   374be:	431d      	orrs	r5, r3
   374c0:	d0f2      	beq.n	374a8 <__aeabi_d2f+0x5c>
   374c2:	2080      	movs	r0, #128	; 0x80
   374c4:	00db      	lsls	r3, r3, #3
   374c6:	0480      	lsls	r0, r0, #18
   374c8:	4303      	orrs	r3, r0
   374ca:	26ff      	movs	r6, #255	; 0xff
   374cc:	e7da      	b.n	37484 <__aeabi_d2f+0x38>
   374ce:	432b      	orrs	r3, r5
   374d0:	d003      	beq.n	374da <__aeabi_d2f+0x8e>
   374d2:	2305      	movs	r3, #5
   374d4:	08db      	lsrs	r3, r3, #3
   374d6:	2cff      	cmp	r4, #255	; 0xff
   374d8:	d003      	beq.n	374e2 <__aeabi_d2f+0x96>
   374da:	025b      	lsls	r3, r3, #9
   374dc:	0a5b      	lsrs	r3, r3, #9
   374de:	b2e4      	uxtb	r4, r4
   374e0:	e7e4      	b.n	374ac <__aeabi_d2f+0x60>
   374e2:	2b00      	cmp	r3, #0
   374e4:	d032      	beq.n	3754c <__aeabi_d2f+0x100>
   374e6:	2080      	movs	r0, #128	; 0x80
   374e8:	03c0      	lsls	r0, r0, #15
   374ea:	4303      	orrs	r3, r0
   374ec:	025b      	lsls	r3, r3, #9
   374ee:	0a5b      	lsrs	r3, r3, #9
   374f0:	e7dc      	b.n	374ac <__aeabi_d2f+0x60>
   374f2:	0032      	movs	r2, r6
   374f4:	3217      	adds	r2, #23
   374f6:	db14      	blt.n	37522 <__aeabi_d2f+0xd6>
   374f8:	2280      	movs	r2, #128	; 0x80
   374fa:	271e      	movs	r7, #30
   374fc:	0412      	lsls	r2, r2, #16
   374fe:	4313      	orrs	r3, r2
   37500:	1bbf      	subs	r7, r7, r6
   37502:	2f1f      	cmp	r7, #31
   37504:	dc0f      	bgt.n	37526 <__aeabi_d2f+0xda>
   37506:	4a14      	ldr	r2, [pc, #80]	; (37558 <__aeabi_d2f+0x10c>)
   37508:	4694      	mov	ip, r2
   3750a:	4464      	add	r4, ip
   3750c:	002a      	movs	r2, r5
   3750e:	40a5      	lsls	r5, r4
   37510:	002e      	movs	r6, r5
   37512:	40a3      	lsls	r3, r4
   37514:	1e75      	subs	r5, r6, #1
   37516:	41ae      	sbcs	r6, r5
   37518:	40fa      	lsrs	r2, r7
   3751a:	4333      	orrs	r3, r6
   3751c:	4313      	orrs	r3, r2
   3751e:	2600      	movs	r6, #0
   37520:	e7b0      	b.n	37484 <__aeabi_d2f+0x38>
   37522:	2400      	movs	r4, #0
   37524:	e7d5      	b.n	374d2 <__aeabi_d2f+0x86>
   37526:	2202      	movs	r2, #2
   37528:	4252      	negs	r2, r2
   3752a:	1b96      	subs	r6, r2, r6
   3752c:	001a      	movs	r2, r3
   3752e:	40f2      	lsrs	r2, r6
   37530:	2f20      	cmp	r7, #32
   37532:	d009      	beq.n	37548 <__aeabi_d2f+0xfc>
   37534:	4809      	ldr	r0, [pc, #36]	; (3755c <__aeabi_d2f+0x110>)
   37536:	4684      	mov	ip, r0
   37538:	4464      	add	r4, ip
   3753a:	40a3      	lsls	r3, r4
   3753c:	432b      	orrs	r3, r5
   3753e:	1e5d      	subs	r5, r3, #1
   37540:	41ab      	sbcs	r3, r5
   37542:	2600      	movs	r6, #0
   37544:	4313      	orrs	r3, r2
   37546:	e79d      	b.n	37484 <__aeabi_d2f+0x38>
   37548:	2300      	movs	r3, #0
   3754a:	e7f7      	b.n	3753c <__aeabi_d2f+0xf0>
   3754c:	2300      	movs	r3, #0
   3754e:	e7ad      	b.n	374ac <__aeabi_d2f+0x60>
   37550:	0034      	movs	r4, r6
   37552:	e7bf      	b.n	374d4 <__aeabi_d2f+0x88>
   37554:	fffffc80 	.word	0xfffffc80
   37558:	fffffc82 	.word	0xfffffc82
   3755c:	fffffca2 	.word	0xfffffca2

00037560 <__clzsi2>:
   37560:	211c      	movs	r1, #28
   37562:	2301      	movs	r3, #1
   37564:	041b      	lsls	r3, r3, #16
   37566:	4298      	cmp	r0, r3
   37568:	d301      	bcc.n	3756e <__clzsi2+0xe>
   3756a:	0c00      	lsrs	r0, r0, #16
   3756c:	3910      	subs	r1, #16
   3756e:	0a1b      	lsrs	r3, r3, #8
   37570:	4298      	cmp	r0, r3
   37572:	d301      	bcc.n	37578 <__clzsi2+0x18>
   37574:	0a00      	lsrs	r0, r0, #8
   37576:	3908      	subs	r1, #8
   37578:	091b      	lsrs	r3, r3, #4
   3757a:	4298      	cmp	r0, r3
   3757c:	d301      	bcc.n	37582 <__clzsi2+0x22>
   3757e:	0900      	lsrs	r0, r0, #4
   37580:	3904      	subs	r1, #4
   37582:	a202      	add	r2, pc, #8	; (adr r2, 3758c <__clzsi2+0x2c>)
   37584:	5c10      	ldrb	r0, [r2, r0]
   37586:	1840      	adds	r0, r0, r1
   37588:	4770      	bx	lr
   3758a:	46c0      	nop			; (mov r8, r8)
   3758c:	02020304 	.word	0x02020304
   37590:	01010101 	.word	0x01010101
	...

0003759c <__divdi3>:
   3759c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3759e:	464e      	mov	r6, r9
   375a0:	4657      	mov	r7, sl
   375a2:	46de      	mov	lr, fp
   375a4:	4645      	mov	r5, r8
   375a6:	b5e0      	push	{r5, r6, r7, lr}
   375a8:	0006      	movs	r6, r0
   375aa:	2000      	movs	r0, #0
   375ac:	000f      	movs	r7, r1
   375ae:	b083      	sub	sp, #12
   375b0:	0019      	movs	r1, r3
   375b2:	4681      	mov	r9, r0
   375b4:	2f00      	cmp	r7, #0
   375b6:	da00      	bge.n	375ba <__divdi3+0x1e>
   375b8:	e08c      	b.n	376d4 <__divdi3+0x138>
   375ba:	2900      	cmp	r1, #0
   375bc:	da00      	bge.n	375c0 <__divdi3+0x24>
   375be:	e080      	b.n	376c2 <__divdi3+0x126>
   375c0:	0034      	movs	r4, r6
   375c2:	003d      	movs	r5, r7
   375c4:	4692      	mov	sl, r2
   375c6:	4698      	mov	r8, r3
   375c8:	42bb      	cmp	r3, r7
   375ca:	d869      	bhi.n	376a0 <__divdi3+0x104>
   375cc:	d066      	beq.n	3769c <__divdi3+0x100>
   375ce:	4641      	mov	r1, r8
   375d0:	4650      	mov	r0, sl
   375d2:	f000 f8bf 	bl	37754 <__clzdi2>
   375d6:	4683      	mov	fp, r0
   375d8:	0039      	movs	r1, r7
   375da:	0030      	movs	r0, r6
   375dc:	f000 f8ba 	bl	37754 <__clzdi2>
   375e0:	465b      	mov	r3, fp
   375e2:	1a1b      	subs	r3, r3, r0
   375e4:	469c      	mov	ip, r3
   375e6:	3b20      	subs	r3, #32
   375e8:	469b      	mov	fp, r3
   375ea:	d500      	bpl.n	375ee <__divdi3+0x52>
   375ec:	e087      	b.n	376fe <__divdi3+0x162>
   375ee:	4651      	mov	r1, sl
   375f0:	4658      	mov	r0, fp
   375f2:	4081      	lsls	r1, r0
   375f4:	000b      	movs	r3, r1
   375f6:	4651      	mov	r1, sl
   375f8:	4660      	mov	r0, ip
   375fa:	4081      	lsls	r1, r0
   375fc:	000a      	movs	r2, r1
   375fe:	42bb      	cmp	r3, r7
   37600:	d900      	bls.n	37604 <__divdi3+0x68>
   37602:	e072      	b.n	376ea <__divdi3+0x14e>
   37604:	d06e      	beq.n	376e4 <__divdi3+0x148>
   37606:	0034      	movs	r4, r6
   37608:	003d      	movs	r5, r7
   3760a:	4659      	mov	r1, fp
   3760c:	1aa4      	subs	r4, r4, r2
   3760e:	419d      	sbcs	r5, r3
   37610:	2900      	cmp	r1, #0
   37612:	da00      	bge.n	37616 <__divdi3+0x7a>
   37614:	e08a      	b.n	3772c <__divdi3+0x190>
   37616:	2100      	movs	r1, #0
   37618:	2000      	movs	r0, #0
   3761a:	2601      	movs	r6, #1
   3761c:	9000      	str	r0, [sp, #0]
   3761e:	9101      	str	r1, [sp, #4]
   37620:	4659      	mov	r1, fp
   37622:	408e      	lsls	r6, r1
   37624:	9601      	str	r6, [sp, #4]
   37626:	4661      	mov	r1, ip
   37628:	2601      	movs	r6, #1
   3762a:	408e      	lsls	r6, r1
   3762c:	4661      	mov	r1, ip
   3762e:	9600      	str	r6, [sp, #0]
   37630:	2900      	cmp	r1, #0
   37632:	d061      	beq.n	376f8 <__divdi3+0x15c>
   37634:	07d9      	lsls	r1, r3, #31
   37636:	0856      	lsrs	r6, r2, #1
   37638:	430e      	orrs	r6, r1
   3763a:	085f      	lsrs	r7, r3, #1
   3763c:	4661      	mov	r1, ip
   3763e:	2201      	movs	r2, #1
   37640:	2300      	movs	r3, #0
   37642:	e00c      	b.n	3765e <__divdi3+0xc2>
   37644:	42af      	cmp	r7, r5
   37646:	d101      	bne.n	3764c <__divdi3+0xb0>
   37648:	42a6      	cmp	r6, r4
   3764a:	d80a      	bhi.n	37662 <__divdi3+0xc6>
   3764c:	1ba4      	subs	r4, r4, r6
   3764e:	41bd      	sbcs	r5, r7
   37650:	1924      	adds	r4, r4, r4
   37652:	416d      	adcs	r5, r5
   37654:	3901      	subs	r1, #1
   37656:	18a4      	adds	r4, r4, r2
   37658:	415d      	adcs	r5, r3
   3765a:	2900      	cmp	r1, #0
   3765c:	d006      	beq.n	3766c <__divdi3+0xd0>
   3765e:	42af      	cmp	r7, r5
   37660:	d9f0      	bls.n	37644 <__divdi3+0xa8>
   37662:	3901      	subs	r1, #1
   37664:	1924      	adds	r4, r4, r4
   37666:	416d      	adcs	r5, r5
   37668:	2900      	cmp	r1, #0
   3766a:	d1f8      	bne.n	3765e <__divdi3+0xc2>
   3766c:	465b      	mov	r3, fp
   3766e:	9800      	ldr	r0, [sp, #0]
   37670:	9901      	ldr	r1, [sp, #4]
   37672:	1900      	adds	r0, r0, r4
   37674:	4169      	adcs	r1, r5
   37676:	2b00      	cmp	r3, #0
   37678:	db4d      	blt.n	37716 <__divdi3+0x17a>
   3767a:	002e      	movs	r6, r5
   3767c:	40de      	lsrs	r6, r3
   3767e:	4663      	mov	r3, ip
   37680:	002c      	movs	r4, r5
   37682:	40dc      	lsrs	r4, r3
   37684:	465b      	mov	r3, fp
   37686:	2b00      	cmp	r3, #0
   37688:	db5b      	blt.n	37742 <__divdi3+0x1a6>
   3768a:	0034      	movs	r4, r6
   3768c:	409c      	lsls	r4, r3
   3768e:	0023      	movs	r3, r4
   37690:	4664      	mov	r4, ip
   37692:	40a6      	lsls	r6, r4
   37694:	0032      	movs	r2, r6
   37696:	1a80      	subs	r0, r0, r2
   37698:	4199      	sbcs	r1, r3
   3769a:	e003      	b.n	376a4 <__divdi3+0x108>
   3769c:	42b2      	cmp	r2, r6
   3769e:	d996      	bls.n	375ce <__divdi3+0x32>
   376a0:	2000      	movs	r0, #0
   376a2:	2100      	movs	r1, #0
   376a4:	464b      	mov	r3, r9
   376a6:	2b00      	cmp	r3, #0
   376a8:	d004      	beq.n	376b4 <__divdi3+0x118>
   376aa:	0003      	movs	r3, r0
   376ac:	000c      	movs	r4, r1
   376ae:	2100      	movs	r1, #0
   376b0:	4258      	negs	r0, r3
   376b2:	41a1      	sbcs	r1, r4
   376b4:	b003      	add	sp, #12
   376b6:	bc3c      	pop	{r2, r3, r4, r5}
   376b8:	4690      	mov	r8, r2
   376ba:	4699      	mov	r9, r3
   376bc:	46a2      	mov	sl, r4
   376be:	46ab      	mov	fp, r5
   376c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   376c2:	4649      	mov	r1, r9
   376c4:	43c9      	mvns	r1, r1
   376c6:	0010      	movs	r0, r2
   376c8:	4689      	mov	r9, r1
   376ca:	0019      	movs	r1, r3
   376cc:	2300      	movs	r3, #0
   376ce:	4242      	negs	r2, r0
   376d0:	418b      	sbcs	r3, r1
   376d2:	e775      	b.n	375c0 <__divdi3+0x24>
   376d4:	0034      	movs	r4, r6
   376d6:	003d      	movs	r5, r7
   376d8:	3801      	subs	r0, #1
   376da:	2700      	movs	r7, #0
   376dc:	4266      	negs	r6, r4
   376de:	41af      	sbcs	r7, r5
   376e0:	4681      	mov	r9, r0
   376e2:	e76a      	b.n	375ba <__divdi3+0x1e>
   376e4:	42b1      	cmp	r1, r6
   376e6:	d800      	bhi.n	376ea <__divdi3+0x14e>
   376e8:	e78d      	b.n	37606 <__divdi3+0x6a>
   376ea:	2100      	movs	r1, #0
   376ec:	2000      	movs	r0, #0
   376ee:	9000      	str	r0, [sp, #0]
   376f0:	9101      	str	r1, [sp, #4]
   376f2:	4661      	mov	r1, ip
   376f4:	2900      	cmp	r1, #0
   376f6:	d19d      	bne.n	37634 <__divdi3+0x98>
   376f8:	9800      	ldr	r0, [sp, #0]
   376fa:	9901      	ldr	r1, [sp, #4]
   376fc:	e7d2      	b.n	376a4 <__divdi3+0x108>
   376fe:	4662      	mov	r2, ip
   37700:	4640      	mov	r0, r8
   37702:	2320      	movs	r3, #32
   37704:	4651      	mov	r1, sl
   37706:	4090      	lsls	r0, r2
   37708:	1a9b      	subs	r3, r3, r2
   3770a:	40d9      	lsrs	r1, r3
   3770c:	0003      	movs	r3, r0
   3770e:	9100      	str	r1, [sp, #0]
   37710:	9900      	ldr	r1, [sp, #0]
   37712:	430b      	orrs	r3, r1
   37714:	e76f      	b.n	375f6 <__divdi3+0x5a>
   37716:	4662      	mov	r2, ip
   37718:	2320      	movs	r3, #32
   3771a:	1a9b      	subs	r3, r3, r2
   3771c:	002a      	movs	r2, r5
   3771e:	409a      	lsls	r2, r3
   37720:	0026      	movs	r6, r4
   37722:	0013      	movs	r3, r2
   37724:	4662      	mov	r2, ip
   37726:	40d6      	lsrs	r6, r2
   37728:	431e      	orrs	r6, r3
   3772a:	e7a8      	b.n	3767e <__divdi3+0xe2>
   3772c:	4661      	mov	r1, ip
   3772e:	2620      	movs	r6, #32
   37730:	2701      	movs	r7, #1
   37732:	1a76      	subs	r6, r6, r1
   37734:	2000      	movs	r0, #0
   37736:	2100      	movs	r1, #0
   37738:	40f7      	lsrs	r7, r6
   3773a:	9000      	str	r0, [sp, #0]
   3773c:	9101      	str	r1, [sp, #4]
   3773e:	9701      	str	r7, [sp, #4]
   37740:	e771      	b.n	37626 <__divdi3+0x8a>
   37742:	4662      	mov	r2, ip
   37744:	2320      	movs	r3, #32
   37746:	0035      	movs	r5, r6
   37748:	4094      	lsls	r4, r2
   3774a:	1a9b      	subs	r3, r3, r2
   3774c:	40dd      	lsrs	r5, r3
   3774e:	0023      	movs	r3, r4
   37750:	432b      	orrs	r3, r5
   37752:	e79d      	b.n	37690 <__divdi3+0xf4>

00037754 <__clzdi2>:
   37754:	b510      	push	{r4, lr}
   37756:	2900      	cmp	r1, #0
   37758:	d103      	bne.n	37762 <__clzdi2+0xe>
   3775a:	f7ff ff01 	bl	37560 <__clzsi2>
   3775e:	3020      	adds	r0, #32
   37760:	e002      	b.n	37768 <__clzdi2+0x14>
   37762:	1c08      	adds	r0, r1, #0
   37764:	f7ff fefc 	bl	37560 <__clzsi2>
   37768:	bd10      	pop	{r4, pc}
   3776a:	46c0      	nop			; (mov r8, r8)

0003776c <atoi>:
   3776c:	b510      	push	{r4, lr}
   3776e:	220a      	movs	r2, #10
   37770:	2100      	movs	r1, #0
   37772:	f000 fb0d 	bl	37d90 <strtol>
   37776:	bd10      	pop	{r4, pc}

00037778 <__libc_init_array>:
   37778:	b570      	push	{r4, r5, r6, lr}
   3777a:	2600      	movs	r6, #0
   3777c:	4d0c      	ldr	r5, [pc, #48]	; (377b0 <__libc_init_array+0x38>)
   3777e:	4c0d      	ldr	r4, [pc, #52]	; (377b4 <__libc_init_array+0x3c>)
   37780:	1b64      	subs	r4, r4, r5
   37782:	10a4      	asrs	r4, r4, #2
   37784:	42a6      	cmp	r6, r4
   37786:	d109      	bne.n	3779c <__libc_init_array+0x24>
   37788:	2600      	movs	r6, #0
   3778a:	f005 fe4b 	bl	3d424 <_init>
   3778e:	4d0a      	ldr	r5, [pc, #40]	; (377b8 <__libc_init_array+0x40>)
   37790:	4c0a      	ldr	r4, [pc, #40]	; (377bc <__libc_init_array+0x44>)
   37792:	1b64      	subs	r4, r4, r5
   37794:	10a4      	asrs	r4, r4, #2
   37796:	42a6      	cmp	r6, r4
   37798:	d105      	bne.n	377a6 <__libc_init_array+0x2e>
   3779a:	bd70      	pop	{r4, r5, r6, pc}
   3779c:	00b3      	lsls	r3, r6, #2
   3779e:	58eb      	ldr	r3, [r5, r3]
   377a0:	4798      	blx	r3
   377a2:	3601      	adds	r6, #1
   377a4:	e7ee      	b.n	37784 <__libc_init_array+0xc>
   377a6:	00b3      	lsls	r3, r6, #2
   377a8:	58eb      	ldr	r3, [r5, r3]
   377aa:	4798      	blx	r3
   377ac:	3601      	adds	r6, #1
   377ae:	e7f2      	b.n	37796 <__libc_init_array+0x1e>
   377b0:	0003d430 	.word	0x0003d430
   377b4:	0003d430 	.word	0x0003d430
   377b8:	0003d430 	.word	0x0003d430
   377bc:	0003d434 	.word	0x0003d434

000377c0 <malloc>:
   377c0:	b510      	push	{r4, lr}
   377c2:	4b03      	ldr	r3, [pc, #12]	; (377d0 <malloc+0x10>)
   377c4:	0001      	movs	r1, r0
   377c6:	6818      	ldr	r0, [r3, #0]
   377c8:	f000 f87c 	bl	378c4 <_malloc_r>
   377cc:	bd10      	pop	{r4, pc}
   377ce:	46c0      	nop			; (mov r8, r8)
   377d0:	2000012c 	.word	0x2000012c

000377d4 <free>:
   377d4:	b510      	push	{r4, lr}
   377d6:	4b03      	ldr	r3, [pc, #12]	; (377e4 <free+0x10>)
   377d8:	0001      	movs	r1, r0
   377da:	6818      	ldr	r0, [r3, #0]
   377dc:	f000 f828 	bl	37830 <_free_r>
   377e0:	bd10      	pop	{r4, pc}
   377e2:	46c0      	nop			; (mov r8, r8)
   377e4:	2000012c 	.word	0x2000012c

000377e8 <memcpy>:
   377e8:	2300      	movs	r3, #0
   377ea:	b510      	push	{r4, lr}
   377ec:	429a      	cmp	r2, r3
   377ee:	d100      	bne.n	377f2 <memcpy+0xa>
   377f0:	bd10      	pop	{r4, pc}
   377f2:	5ccc      	ldrb	r4, [r1, r3]
   377f4:	54c4      	strb	r4, [r0, r3]
   377f6:	3301      	adds	r3, #1
   377f8:	e7f8      	b.n	377ec <memcpy+0x4>

000377fa <memmove>:
   377fa:	b510      	push	{r4, lr}
   377fc:	4288      	cmp	r0, r1
   377fe:	d902      	bls.n	37806 <memmove+0xc>
   37800:	188b      	adds	r3, r1, r2
   37802:	4298      	cmp	r0, r3
   37804:	d308      	bcc.n	37818 <memmove+0x1e>
   37806:	2300      	movs	r3, #0
   37808:	429a      	cmp	r2, r3
   3780a:	d007      	beq.n	3781c <memmove+0x22>
   3780c:	5ccc      	ldrb	r4, [r1, r3]
   3780e:	54c4      	strb	r4, [r0, r3]
   37810:	3301      	adds	r3, #1
   37812:	e7f9      	b.n	37808 <memmove+0xe>
   37814:	5c8b      	ldrb	r3, [r1, r2]
   37816:	5483      	strb	r3, [r0, r2]
   37818:	3a01      	subs	r2, #1
   3781a:	d2fb      	bcs.n	37814 <memmove+0x1a>
   3781c:	bd10      	pop	{r4, pc}

0003781e <memset>:
   3781e:	0003      	movs	r3, r0
   37820:	1882      	adds	r2, r0, r2
   37822:	4293      	cmp	r3, r2
   37824:	d100      	bne.n	37828 <memset+0xa>
   37826:	4770      	bx	lr
   37828:	7019      	strb	r1, [r3, #0]
   3782a:	3301      	adds	r3, #1
   3782c:	e7f9      	b.n	37822 <memset+0x4>
	...

00037830 <_free_r>:
   37830:	b570      	push	{r4, r5, r6, lr}
   37832:	0005      	movs	r5, r0
   37834:	2900      	cmp	r1, #0
   37836:	d010      	beq.n	3785a <_free_r+0x2a>
   37838:	1f0c      	subs	r4, r1, #4
   3783a:	6823      	ldr	r3, [r4, #0]
   3783c:	2b00      	cmp	r3, #0
   3783e:	da00      	bge.n	37842 <_free_r+0x12>
   37840:	18e4      	adds	r4, r4, r3
   37842:	0028      	movs	r0, r5
   37844:	f000 fdd8 	bl	383f8 <__malloc_lock>
   37848:	4a1d      	ldr	r2, [pc, #116]	; (378c0 <_free_r+0x90>)
   3784a:	6813      	ldr	r3, [r2, #0]
   3784c:	2b00      	cmp	r3, #0
   3784e:	d105      	bne.n	3785c <_free_r+0x2c>
   37850:	6063      	str	r3, [r4, #4]
   37852:	6014      	str	r4, [r2, #0]
   37854:	0028      	movs	r0, r5
   37856:	f000 fdd0 	bl	383fa <__malloc_unlock>
   3785a:	bd70      	pop	{r4, r5, r6, pc}
   3785c:	42a3      	cmp	r3, r4
   3785e:	d909      	bls.n	37874 <_free_r+0x44>
   37860:	6821      	ldr	r1, [r4, #0]
   37862:	1860      	adds	r0, r4, r1
   37864:	4283      	cmp	r3, r0
   37866:	d1f3      	bne.n	37850 <_free_r+0x20>
   37868:	6818      	ldr	r0, [r3, #0]
   3786a:	685b      	ldr	r3, [r3, #4]
   3786c:	1841      	adds	r1, r0, r1
   3786e:	6021      	str	r1, [r4, #0]
   37870:	e7ee      	b.n	37850 <_free_r+0x20>
   37872:	0013      	movs	r3, r2
   37874:	685a      	ldr	r2, [r3, #4]
   37876:	2a00      	cmp	r2, #0
   37878:	d001      	beq.n	3787e <_free_r+0x4e>
   3787a:	42a2      	cmp	r2, r4
   3787c:	d9f9      	bls.n	37872 <_free_r+0x42>
   3787e:	6819      	ldr	r1, [r3, #0]
   37880:	1858      	adds	r0, r3, r1
   37882:	42a0      	cmp	r0, r4
   37884:	d10b      	bne.n	3789e <_free_r+0x6e>
   37886:	6820      	ldr	r0, [r4, #0]
   37888:	1809      	adds	r1, r1, r0
   3788a:	1858      	adds	r0, r3, r1
   3788c:	6019      	str	r1, [r3, #0]
   3788e:	4282      	cmp	r2, r0
   37890:	d1e0      	bne.n	37854 <_free_r+0x24>
   37892:	6810      	ldr	r0, [r2, #0]
   37894:	6852      	ldr	r2, [r2, #4]
   37896:	1841      	adds	r1, r0, r1
   37898:	6019      	str	r1, [r3, #0]
   3789a:	605a      	str	r2, [r3, #4]
   3789c:	e7da      	b.n	37854 <_free_r+0x24>
   3789e:	42a0      	cmp	r0, r4
   378a0:	d902      	bls.n	378a8 <_free_r+0x78>
   378a2:	230c      	movs	r3, #12
   378a4:	602b      	str	r3, [r5, #0]
   378a6:	e7d5      	b.n	37854 <_free_r+0x24>
   378a8:	6821      	ldr	r1, [r4, #0]
   378aa:	1860      	adds	r0, r4, r1
   378ac:	4282      	cmp	r2, r0
   378ae:	d103      	bne.n	378b8 <_free_r+0x88>
   378b0:	6810      	ldr	r0, [r2, #0]
   378b2:	6852      	ldr	r2, [r2, #4]
   378b4:	1841      	adds	r1, r0, r1
   378b6:	6021      	str	r1, [r4, #0]
   378b8:	6062      	str	r2, [r4, #4]
   378ba:	605c      	str	r4, [r3, #4]
   378bc:	e7ca      	b.n	37854 <_free_r+0x24>
   378be:	46c0      	nop			; (mov r8, r8)
   378c0:	20004588 	.word	0x20004588

000378c4 <_malloc_r>:
   378c4:	2303      	movs	r3, #3
   378c6:	b570      	push	{r4, r5, r6, lr}
   378c8:	1ccd      	adds	r5, r1, #3
   378ca:	439d      	bics	r5, r3
   378cc:	3508      	adds	r5, #8
   378ce:	0006      	movs	r6, r0
   378d0:	2d0c      	cmp	r5, #12
   378d2:	d21e      	bcs.n	37912 <_malloc_r+0x4e>
   378d4:	250c      	movs	r5, #12
   378d6:	42a9      	cmp	r1, r5
   378d8:	d81d      	bhi.n	37916 <_malloc_r+0x52>
   378da:	0030      	movs	r0, r6
   378dc:	f000 fd8c 	bl	383f8 <__malloc_lock>
   378e0:	4a25      	ldr	r2, [pc, #148]	; (37978 <_malloc_r+0xb4>)
   378e2:	6814      	ldr	r4, [r2, #0]
   378e4:	0021      	movs	r1, r4
   378e6:	2900      	cmp	r1, #0
   378e8:	d119      	bne.n	3791e <_malloc_r+0x5a>
   378ea:	4c24      	ldr	r4, [pc, #144]	; (3797c <_malloc_r+0xb8>)
   378ec:	6823      	ldr	r3, [r4, #0]
   378ee:	2b00      	cmp	r3, #0
   378f0:	d103      	bne.n	378fa <_malloc_r+0x36>
   378f2:	0030      	movs	r0, r6
   378f4:	f000 f8ae 	bl	37a54 <_sbrk_r>
   378f8:	6020      	str	r0, [r4, #0]
   378fa:	0029      	movs	r1, r5
   378fc:	0030      	movs	r0, r6
   378fe:	f000 f8a9 	bl	37a54 <_sbrk_r>
   37902:	1c43      	adds	r3, r0, #1
   37904:	d12c      	bne.n	37960 <_malloc_r+0x9c>
   37906:	230c      	movs	r3, #12
   37908:	0030      	movs	r0, r6
   3790a:	6033      	str	r3, [r6, #0]
   3790c:	f000 fd75 	bl	383fa <__malloc_unlock>
   37910:	e003      	b.n	3791a <_malloc_r+0x56>
   37912:	2d00      	cmp	r5, #0
   37914:	dadf      	bge.n	378d6 <_malloc_r+0x12>
   37916:	230c      	movs	r3, #12
   37918:	6033      	str	r3, [r6, #0]
   3791a:	2000      	movs	r0, #0
   3791c:	bd70      	pop	{r4, r5, r6, pc}
   3791e:	680b      	ldr	r3, [r1, #0]
   37920:	1b5b      	subs	r3, r3, r5
   37922:	d41a      	bmi.n	3795a <_malloc_r+0x96>
   37924:	2b0b      	cmp	r3, #11
   37926:	d903      	bls.n	37930 <_malloc_r+0x6c>
   37928:	600b      	str	r3, [r1, #0]
   3792a:	18cc      	adds	r4, r1, r3
   3792c:	6025      	str	r5, [r4, #0]
   3792e:	e003      	b.n	37938 <_malloc_r+0x74>
   37930:	428c      	cmp	r4, r1
   37932:	d10e      	bne.n	37952 <_malloc_r+0x8e>
   37934:	6863      	ldr	r3, [r4, #4]
   37936:	6013      	str	r3, [r2, #0]
   37938:	0030      	movs	r0, r6
   3793a:	f000 fd5e 	bl	383fa <__malloc_unlock>
   3793e:	0020      	movs	r0, r4
   37940:	2207      	movs	r2, #7
   37942:	300b      	adds	r0, #11
   37944:	1d23      	adds	r3, r4, #4
   37946:	4390      	bics	r0, r2
   37948:	1ac3      	subs	r3, r0, r3
   3794a:	d0e7      	beq.n	3791c <_malloc_r+0x58>
   3794c:	425a      	negs	r2, r3
   3794e:	50e2      	str	r2, [r4, r3]
   37950:	e7e4      	b.n	3791c <_malloc_r+0x58>
   37952:	684b      	ldr	r3, [r1, #4]
   37954:	6063      	str	r3, [r4, #4]
   37956:	000c      	movs	r4, r1
   37958:	e7ee      	b.n	37938 <_malloc_r+0x74>
   3795a:	000c      	movs	r4, r1
   3795c:	6849      	ldr	r1, [r1, #4]
   3795e:	e7c2      	b.n	378e6 <_malloc_r+0x22>
   37960:	2303      	movs	r3, #3
   37962:	1cc4      	adds	r4, r0, #3
   37964:	439c      	bics	r4, r3
   37966:	42a0      	cmp	r0, r4
   37968:	d0e0      	beq.n	3792c <_malloc_r+0x68>
   3796a:	1a21      	subs	r1, r4, r0
   3796c:	0030      	movs	r0, r6
   3796e:	f000 f871 	bl	37a54 <_sbrk_r>
   37972:	1c43      	adds	r3, r0, #1
   37974:	d1da      	bne.n	3792c <_malloc_r+0x68>
   37976:	e7c6      	b.n	37906 <_malloc_r+0x42>
   37978:	20004588 	.word	0x20004588
   3797c:	2000458c 	.word	0x2000458c

00037980 <_puts_r>:
   37980:	b570      	push	{r4, r5, r6, lr}
   37982:	0005      	movs	r5, r0
   37984:	000e      	movs	r6, r1
   37986:	2800      	cmp	r0, #0
   37988:	d004      	beq.n	37994 <_puts_r+0x14>
   3798a:	6983      	ldr	r3, [r0, #24]
   3798c:	2b00      	cmp	r3, #0
   3798e:	d101      	bne.n	37994 <_puts_r+0x14>
   37990:	f000 fc0e 	bl	381b0 <__sinit>
   37994:	69ab      	ldr	r3, [r5, #24]
   37996:	68ac      	ldr	r4, [r5, #8]
   37998:	2b00      	cmp	r3, #0
   3799a:	d102      	bne.n	379a2 <_puts_r+0x22>
   3799c:	0028      	movs	r0, r5
   3799e:	f000 fc07 	bl	381b0 <__sinit>
   379a2:	4b24      	ldr	r3, [pc, #144]	; (37a34 <_puts_r+0xb4>)
   379a4:	429c      	cmp	r4, r3
   379a6:	d10f      	bne.n	379c8 <_puts_r+0x48>
   379a8:	686c      	ldr	r4, [r5, #4]
   379aa:	89a3      	ldrh	r3, [r4, #12]
   379ac:	071b      	lsls	r3, r3, #28
   379ae:	d502      	bpl.n	379b6 <_puts_r+0x36>
   379b0:	6923      	ldr	r3, [r4, #16]
   379b2:	2b00      	cmp	r3, #0
   379b4:	d120      	bne.n	379f8 <_puts_r+0x78>
   379b6:	0021      	movs	r1, r4
   379b8:	0028      	movs	r0, r5
   379ba:	f000 fa8b 	bl	37ed4 <__swsetup_r>
   379be:	2800      	cmp	r0, #0
   379c0:	d01a      	beq.n	379f8 <_puts_r+0x78>
   379c2:	2001      	movs	r0, #1
   379c4:	4240      	negs	r0, r0
   379c6:	bd70      	pop	{r4, r5, r6, pc}
   379c8:	4b1b      	ldr	r3, [pc, #108]	; (37a38 <_puts_r+0xb8>)
   379ca:	429c      	cmp	r4, r3
   379cc:	d101      	bne.n	379d2 <_puts_r+0x52>
   379ce:	68ac      	ldr	r4, [r5, #8]
   379d0:	e7eb      	b.n	379aa <_puts_r+0x2a>
   379d2:	4b1a      	ldr	r3, [pc, #104]	; (37a3c <_puts_r+0xbc>)
   379d4:	429c      	cmp	r4, r3
   379d6:	d1e8      	bne.n	379aa <_puts_r+0x2a>
   379d8:	68ec      	ldr	r4, [r5, #12]
   379da:	e7e6      	b.n	379aa <_puts_r+0x2a>
   379dc:	3b01      	subs	r3, #1
   379de:	3601      	adds	r6, #1
   379e0:	60a3      	str	r3, [r4, #8]
   379e2:	2b00      	cmp	r3, #0
   379e4:	da04      	bge.n	379f0 <_puts_r+0x70>
   379e6:	69a2      	ldr	r2, [r4, #24]
   379e8:	4293      	cmp	r3, r2
   379ea:	db16      	blt.n	37a1a <_puts_r+0x9a>
   379ec:	290a      	cmp	r1, #10
   379ee:	d014      	beq.n	37a1a <_puts_r+0x9a>
   379f0:	6823      	ldr	r3, [r4, #0]
   379f2:	1c5a      	adds	r2, r3, #1
   379f4:	6022      	str	r2, [r4, #0]
   379f6:	7019      	strb	r1, [r3, #0]
   379f8:	7831      	ldrb	r1, [r6, #0]
   379fa:	68a3      	ldr	r3, [r4, #8]
   379fc:	2900      	cmp	r1, #0
   379fe:	d1ed      	bne.n	379dc <_puts_r+0x5c>
   37a00:	3b01      	subs	r3, #1
   37a02:	60a3      	str	r3, [r4, #8]
   37a04:	2b00      	cmp	r3, #0
   37a06:	da0f      	bge.n	37a28 <_puts_r+0xa8>
   37a08:	0022      	movs	r2, r4
   37a0a:	310a      	adds	r1, #10
   37a0c:	0028      	movs	r0, r5
   37a0e:	f000 fa0b 	bl	37e28 <__swbuf_r>
   37a12:	1c43      	adds	r3, r0, #1
   37a14:	d0d5      	beq.n	379c2 <_puts_r+0x42>
   37a16:	200a      	movs	r0, #10
   37a18:	e7d5      	b.n	379c6 <_puts_r+0x46>
   37a1a:	0022      	movs	r2, r4
   37a1c:	0028      	movs	r0, r5
   37a1e:	f000 fa03 	bl	37e28 <__swbuf_r>
   37a22:	1c43      	adds	r3, r0, #1
   37a24:	d1e8      	bne.n	379f8 <_puts_r+0x78>
   37a26:	e7cc      	b.n	379c2 <_puts_r+0x42>
   37a28:	200a      	movs	r0, #10
   37a2a:	6823      	ldr	r3, [r4, #0]
   37a2c:	1c5a      	adds	r2, r3, #1
   37a2e:	6022      	str	r2, [r4, #0]
   37a30:	7018      	strb	r0, [r3, #0]
   37a32:	e7c8      	b.n	379c6 <_puts_r+0x46>
   37a34:	0003d2a4 	.word	0x0003d2a4
   37a38:	0003d2c4 	.word	0x0003d2c4
   37a3c:	0003d284 	.word	0x0003d284

00037a40 <puts>:
   37a40:	b510      	push	{r4, lr}
   37a42:	4b03      	ldr	r3, [pc, #12]	; (37a50 <puts+0x10>)
   37a44:	0001      	movs	r1, r0
   37a46:	6818      	ldr	r0, [r3, #0]
   37a48:	f7ff ff9a 	bl	37980 <_puts_r>
   37a4c:	bd10      	pop	{r4, pc}
   37a4e:	46c0      	nop			; (mov r8, r8)
   37a50:	2000012c 	.word	0x2000012c

00037a54 <_sbrk_r>:
   37a54:	2300      	movs	r3, #0
   37a56:	b570      	push	{r4, r5, r6, lr}
   37a58:	4c06      	ldr	r4, [pc, #24]	; (37a74 <_sbrk_r+0x20>)
   37a5a:	0005      	movs	r5, r0
   37a5c:	0008      	movs	r0, r1
   37a5e:	6023      	str	r3, [r4, #0]
   37a60:	f7f5 fc84 	bl	2d36c <_sbrk>
   37a64:	1c43      	adds	r3, r0, #1
   37a66:	d103      	bne.n	37a70 <_sbrk_r+0x1c>
   37a68:	6823      	ldr	r3, [r4, #0]
   37a6a:	2b00      	cmp	r3, #0
   37a6c:	d000      	beq.n	37a70 <_sbrk_r+0x1c>
   37a6e:	602b      	str	r3, [r5, #0]
   37a70:	bd70      	pop	{r4, r5, r6, pc}
   37a72:	46c0      	nop			; (mov r8, r8)
   37a74:	20005ae8 	.word	0x20005ae8

00037a78 <sniprintf>:
   37a78:	b40c      	push	{r2, r3}
   37a7a:	b530      	push	{r4, r5, lr}
   37a7c:	4b16      	ldr	r3, [pc, #88]	; (37ad8 <sniprintf+0x60>)
   37a7e:	b09d      	sub	sp, #116	; 0x74
   37a80:	1e0c      	subs	r4, r1, #0
   37a82:	681d      	ldr	r5, [r3, #0]
   37a84:	da08      	bge.n	37a98 <sniprintf+0x20>
   37a86:	238b      	movs	r3, #139	; 0x8b
   37a88:	2001      	movs	r0, #1
   37a8a:	602b      	str	r3, [r5, #0]
   37a8c:	4240      	negs	r0, r0
   37a8e:	b01d      	add	sp, #116	; 0x74
   37a90:	bc30      	pop	{r4, r5}
   37a92:	bc08      	pop	{r3}
   37a94:	b002      	add	sp, #8
   37a96:	4718      	bx	r3
   37a98:	2382      	movs	r3, #130	; 0x82
   37a9a:	a902      	add	r1, sp, #8
   37a9c:	009b      	lsls	r3, r3, #2
   37a9e:	818b      	strh	r3, [r1, #12]
   37aa0:	2300      	movs	r3, #0
   37aa2:	9002      	str	r0, [sp, #8]
   37aa4:	6108      	str	r0, [r1, #16]
   37aa6:	429c      	cmp	r4, r3
   37aa8:	d000      	beq.n	37aac <sniprintf+0x34>
   37aaa:	1e63      	subs	r3, r4, #1
   37aac:	608b      	str	r3, [r1, #8]
   37aae:	614b      	str	r3, [r1, #20]
   37ab0:	2301      	movs	r3, #1
   37ab2:	425b      	negs	r3, r3
   37ab4:	81cb      	strh	r3, [r1, #14]
   37ab6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   37ab8:	ab21      	add	r3, sp, #132	; 0x84
   37aba:	0028      	movs	r0, r5
   37abc:	9301      	str	r3, [sp, #4]
   37abe:	f000 fcff 	bl	384c0 <_svfiprintf_r>
   37ac2:	1c43      	adds	r3, r0, #1
   37ac4:	da01      	bge.n	37aca <sniprintf+0x52>
   37ac6:	238b      	movs	r3, #139	; 0x8b
   37ac8:	602b      	str	r3, [r5, #0]
   37aca:	2c00      	cmp	r4, #0
   37acc:	d0df      	beq.n	37a8e <sniprintf+0x16>
   37ace:	2300      	movs	r3, #0
   37ad0:	9a02      	ldr	r2, [sp, #8]
   37ad2:	7013      	strb	r3, [r2, #0]
   37ad4:	e7db      	b.n	37a8e <sniprintf+0x16>
   37ad6:	46c0      	nop			; (mov r8, r8)
   37ad8:	2000012c 	.word	0x2000012c

00037adc <siprintf>:
   37adc:	b40e      	push	{r1, r2, r3}
   37ade:	b510      	push	{r4, lr}
   37ae0:	b09d      	sub	sp, #116	; 0x74
   37ae2:	a902      	add	r1, sp, #8
   37ae4:	9002      	str	r0, [sp, #8]
   37ae6:	6108      	str	r0, [r1, #16]
   37ae8:	480b      	ldr	r0, [pc, #44]	; (37b18 <siprintf+0x3c>)
   37aea:	2482      	movs	r4, #130	; 0x82
   37aec:	6088      	str	r0, [r1, #8]
   37aee:	6148      	str	r0, [r1, #20]
   37af0:	2001      	movs	r0, #1
   37af2:	4240      	negs	r0, r0
   37af4:	ab1f      	add	r3, sp, #124	; 0x7c
   37af6:	81c8      	strh	r0, [r1, #14]
   37af8:	4808      	ldr	r0, [pc, #32]	; (37b1c <siprintf+0x40>)
   37afa:	cb04      	ldmia	r3!, {r2}
   37afc:	00a4      	lsls	r4, r4, #2
   37afe:	6800      	ldr	r0, [r0, #0]
   37b00:	9301      	str	r3, [sp, #4]
   37b02:	818c      	strh	r4, [r1, #12]
   37b04:	f000 fcdc 	bl	384c0 <_svfiprintf_r>
   37b08:	2300      	movs	r3, #0
   37b0a:	9a02      	ldr	r2, [sp, #8]
   37b0c:	7013      	strb	r3, [r2, #0]
   37b0e:	b01d      	add	sp, #116	; 0x74
   37b10:	bc10      	pop	{r4}
   37b12:	bc08      	pop	{r3}
   37b14:	b003      	add	sp, #12
   37b16:	4718      	bx	r3
   37b18:	7fffffff 	.word	0x7fffffff
   37b1c:	2000012c 	.word	0x2000012c

00037b20 <strcasecmp>:
   37b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37b22:	0007      	movs	r7, r0
   37b24:	000e      	movs	r6, r1
   37b26:	783c      	ldrb	r4, [r7, #0]
   37b28:	f000 fbda 	bl	382e0 <__locale_ctype_ptr>
   37b2c:	2203      	movs	r2, #3
   37b2e:	1900      	adds	r0, r0, r4
   37b30:	7843      	ldrb	r3, [r0, #1]
   37b32:	4013      	ands	r3, r2
   37b34:	2b01      	cmp	r3, #1
   37b36:	d100      	bne.n	37b3a <strcasecmp+0x1a>
   37b38:	3420      	adds	r4, #32
   37b3a:	7835      	ldrb	r5, [r6, #0]
   37b3c:	f000 fbd0 	bl	382e0 <__locale_ctype_ptr>
   37b40:	2203      	movs	r2, #3
   37b42:	1940      	adds	r0, r0, r5
   37b44:	7843      	ldrb	r3, [r0, #1]
   37b46:	4013      	ands	r3, r2
   37b48:	2b01      	cmp	r3, #1
   37b4a:	d100      	bne.n	37b4e <strcasecmp+0x2e>
   37b4c:	3520      	adds	r5, #32
   37b4e:	1b60      	subs	r0, r4, r5
   37b50:	d103      	bne.n	37b5a <strcasecmp+0x3a>
   37b52:	3701      	adds	r7, #1
   37b54:	3601      	adds	r6, #1
   37b56:	2d00      	cmp	r5, #0
   37b58:	d1e5      	bne.n	37b26 <strcasecmp+0x6>
   37b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037b5c <strcat>:
   37b5c:	0002      	movs	r2, r0
   37b5e:	b510      	push	{r4, lr}
   37b60:	7813      	ldrb	r3, [r2, #0]
   37b62:	2b00      	cmp	r3, #0
   37b64:	d105      	bne.n	37b72 <strcat+0x16>
   37b66:	5ccc      	ldrb	r4, [r1, r3]
   37b68:	54d4      	strb	r4, [r2, r3]
   37b6a:	3301      	adds	r3, #1
   37b6c:	2c00      	cmp	r4, #0
   37b6e:	d1fa      	bne.n	37b66 <strcat+0xa>
   37b70:	bd10      	pop	{r4, pc}
   37b72:	3201      	adds	r2, #1
   37b74:	e7f4      	b.n	37b60 <strcat+0x4>

00037b76 <strcmp>:
   37b76:	7802      	ldrb	r2, [r0, #0]
   37b78:	780b      	ldrb	r3, [r1, #0]
   37b7a:	2a00      	cmp	r2, #0
   37b7c:	d003      	beq.n	37b86 <strcmp+0x10>
   37b7e:	3001      	adds	r0, #1
   37b80:	3101      	adds	r1, #1
   37b82:	429a      	cmp	r2, r3
   37b84:	d0f7      	beq.n	37b76 <strcmp>
   37b86:	1ad0      	subs	r0, r2, r3
   37b88:	4770      	bx	lr

00037b8a <strcpy>:
   37b8a:	1c03      	adds	r3, r0, #0
   37b8c:	780a      	ldrb	r2, [r1, #0]
   37b8e:	3101      	adds	r1, #1
   37b90:	701a      	strb	r2, [r3, #0]
   37b92:	3301      	adds	r3, #1
   37b94:	2a00      	cmp	r2, #0
   37b96:	d1f9      	bne.n	37b8c <strcpy+0x2>
   37b98:	4770      	bx	lr
	...

00037b9c <strdup>:
   37b9c:	b510      	push	{r4, lr}
   37b9e:	4b03      	ldr	r3, [pc, #12]	; (37bac <strdup+0x10>)
   37ba0:	0001      	movs	r1, r0
   37ba2:	6818      	ldr	r0, [r3, #0]
   37ba4:	f000 f804 	bl	37bb0 <_strdup_r>
   37ba8:	bd10      	pop	{r4, pc}
   37baa:	46c0      	nop			; (mov r8, r8)
   37bac:	2000012c 	.word	0x2000012c

00037bb0 <_strdup_r>:
   37bb0:	b570      	push	{r4, r5, r6, lr}
   37bb2:	0005      	movs	r5, r0
   37bb4:	0008      	movs	r0, r1
   37bb6:	000e      	movs	r6, r1
   37bb8:	f000 f80d 	bl	37bd6 <strlen>
   37bbc:	1c44      	adds	r4, r0, #1
   37bbe:	0021      	movs	r1, r4
   37bc0:	0028      	movs	r0, r5
   37bc2:	f7ff fe7f 	bl	378c4 <_malloc_r>
   37bc6:	1e05      	subs	r5, r0, #0
   37bc8:	d003      	beq.n	37bd2 <_strdup_r+0x22>
   37bca:	0022      	movs	r2, r4
   37bcc:	0031      	movs	r1, r6
   37bce:	f7ff fe0b 	bl	377e8 <memcpy>
   37bd2:	0028      	movs	r0, r5
   37bd4:	bd70      	pop	{r4, r5, r6, pc}

00037bd6 <strlen>:
   37bd6:	2300      	movs	r3, #0
   37bd8:	5cc2      	ldrb	r2, [r0, r3]
   37bda:	3301      	adds	r3, #1
   37bdc:	2a00      	cmp	r2, #0
   37bde:	d1fb      	bne.n	37bd8 <strlen+0x2>
   37be0:	1e58      	subs	r0, r3, #1
   37be2:	4770      	bx	lr

00037be4 <strncmp>:
   37be4:	2300      	movs	r3, #0
   37be6:	b530      	push	{r4, r5, lr}
   37be8:	429a      	cmp	r2, r3
   37bea:	d00a      	beq.n	37c02 <strncmp+0x1e>
   37bec:	3a01      	subs	r2, #1
   37bee:	5cc4      	ldrb	r4, [r0, r3]
   37bf0:	5ccd      	ldrb	r5, [r1, r3]
   37bf2:	42ac      	cmp	r4, r5
   37bf4:	d104      	bne.n	37c00 <strncmp+0x1c>
   37bf6:	429a      	cmp	r2, r3
   37bf8:	d002      	beq.n	37c00 <strncmp+0x1c>
   37bfa:	3301      	adds	r3, #1
   37bfc:	2c00      	cmp	r4, #0
   37bfe:	d1f6      	bne.n	37bee <strncmp+0xa>
   37c00:	1b63      	subs	r3, r4, r5
   37c02:	0018      	movs	r0, r3
   37c04:	bd30      	pop	{r4, r5, pc}

00037c06 <strncpy>:
   37c06:	b570      	push	{r4, r5, r6, lr}
   37c08:	0004      	movs	r4, r0
   37c0a:	2a00      	cmp	r2, #0
   37c0c:	d100      	bne.n	37c10 <strncpy+0xa>
   37c0e:	bd70      	pop	{r4, r5, r6, pc}
   37c10:	780d      	ldrb	r5, [r1, #0]
   37c12:	1e56      	subs	r6, r2, #1
   37c14:	1c63      	adds	r3, r4, #1
   37c16:	7025      	strb	r5, [r4, #0]
   37c18:	3101      	adds	r1, #1
   37c1a:	2d00      	cmp	r5, #0
   37c1c:	d105      	bne.n	37c2a <strncpy+0x24>
   37c1e:	18a4      	adds	r4, r4, r2
   37c20:	429c      	cmp	r4, r3
   37c22:	d0f4      	beq.n	37c0e <strncpy+0x8>
   37c24:	701d      	strb	r5, [r3, #0]
   37c26:	3301      	adds	r3, #1
   37c28:	e7fa      	b.n	37c20 <strncpy+0x1a>
   37c2a:	001c      	movs	r4, r3
   37c2c:	0032      	movs	r2, r6
   37c2e:	e7ec      	b.n	37c0a <strncpy+0x4>

00037c30 <strrchr>:
   37c30:	b570      	push	{r4, r5, r6, lr}
   37c32:	000d      	movs	r5, r1
   37c34:	2400      	movs	r4, #0
   37c36:	2900      	cmp	r1, #0
   37c38:	d105      	bne.n	37c46 <strrchr+0x16>
   37c3a:	f000 ff19 	bl	38a70 <strchr>
   37c3e:	0004      	movs	r4, r0
   37c40:	e006      	b.n	37c50 <strrchr+0x20>
   37c42:	001c      	movs	r4, r3
   37c44:	1c58      	adds	r0, r3, #1
   37c46:	0029      	movs	r1, r5
   37c48:	f000 ff12 	bl	38a70 <strchr>
   37c4c:	1e03      	subs	r3, r0, #0
   37c4e:	d1f8      	bne.n	37c42 <strrchr+0x12>
   37c50:	0020      	movs	r0, r4
   37c52:	bd70      	pop	{r4, r5, r6, pc}

00037c54 <strstr>:
   37c54:	b510      	push	{r4, lr}
   37c56:	0002      	movs	r2, r0
   37c58:	7800      	ldrb	r0, [r0, #0]
   37c5a:	2800      	cmp	r0, #0
   37c5c:	d104      	bne.n	37c68 <strstr+0x14>
   37c5e:	7809      	ldrb	r1, [r1, #0]
   37c60:	2900      	cmp	r1, #0
   37c62:	d00d      	beq.n	37c80 <strstr+0x2c>
   37c64:	bd10      	pop	{r4, pc}
   37c66:	3201      	adds	r2, #1
   37c68:	7810      	ldrb	r0, [r2, #0]
   37c6a:	2800      	cmp	r0, #0
   37c6c:	d0fa      	beq.n	37c64 <strstr+0x10>
   37c6e:	2300      	movs	r3, #0
   37c70:	5cc8      	ldrb	r0, [r1, r3]
   37c72:	2800      	cmp	r0, #0
   37c74:	d004      	beq.n	37c80 <strstr+0x2c>
   37c76:	5cd4      	ldrb	r4, [r2, r3]
   37c78:	4284      	cmp	r4, r0
   37c7a:	d1f4      	bne.n	37c66 <strstr+0x12>
   37c7c:	3301      	adds	r3, #1
   37c7e:	e7f7      	b.n	37c70 <strstr+0x1c>
   37c80:	0010      	movs	r0, r2
   37c82:	e7ef      	b.n	37c64 <strstr+0x10>

00037c84 <_strtol_l.isra.0>:
   37c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   37c86:	001f      	movs	r7, r3
   37c88:	000e      	movs	r6, r1
   37c8a:	b087      	sub	sp, #28
   37c8c:	9005      	str	r0, [sp, #20]
   37c8e:	9103      	str	r1, [sp, #12]
   37c90:	9202      	str	r2, [sp, #8]
   37c92:	980c      	ldr	r0, [sp, #48]	; 0x30
   37c94:	7834      	ldrb	r4, [r6, #0]
   37c96:	f000 fb20 	bl	382da <__locale_ctype_ptr_l>
   37c9a:	2208      	movs	r2, #8
   37c9c:	1900      	adds	r0, r0, r4
   37c9e:	7843      	ldrb	r3, [r0, #1]
   37ca0:	1c75      	adds	r5, r6, #1
   37ca2:	4013      	ands	r3, r2
   37ca4:	d10c      	bne.n	37cc0 <_strtol_l.isra.0+0x3c>
   37ca6:	2c2d      	cmp	r4, #45	; 0x2d
   37ca8:	d10c      	bne.n	37cc4 <_strtol_l.isra.0+0x40>
   37caa:	3301      	adds	r3, #1
   37cac:	782c      	ldrb	r4, [r5, #0]
   37cae:	9301      	str	r3, [sp, #4]
   37cb0:	1cb5      	adds	r5, r6, #2
   37cb2:	2f00      	cmp	r7, #0
   37cb4:	d00c      	beq.n	37cd0 <_strtol_l.isra.0+0x4c>
   37cb6:	2f10      	cmp	r7, #16
   37cb8:	d114      	bne.n	37ce4 <_strtol_l.isra.0+0x60>
   37cba:	2c30      	cmp	r4, #48	; 0x30
   37cbc:	d00a      	beq.n	37cd4 <_strtol_l.isra.0+0x50>
   37cbe:	e011      	b.n	37ce4 <_strtol_l.isra.0+0x60>
   37cc0:	002e      	movs	r6, r5
   37cc2:	e7e6      	b.n	37c92 <_strtol_l.isra.0+0xe>
   37cc4:	9301      	str	r3, [sp, #4]
   37cc6:	2c2b      	cmp	r4, #43	; 0x2b
   37cc8:	d1f3      	bne.n	37cb2 <_strtol_l.isra.0+0x2e>
   37cca:	782c      	ldrb	r4, [r5, #0]
   37ccc:	1cb5      	adds	r5, r6, #2
   37cce:	e7f0      	b.n	37cb2 <_strtol_l.isra.0+0x2e>
   37cd0:	2c30      	cmp	r4, #48	; 0x30
   37cd2:	d12f      	bne.n	37d34 <_strtol_l.isra.0+0xb0>
   37cd4:	2220      	movs	r2, #32
   37cd6:	782b      	ldrb	r3, [r5, #0]
   37cd8:	4393      	bics	r3, r2
   37cda:	2b58      	cmp	r3, #88	; 0x58
   37cdc:	d151      	bne.n	37d82 <_strtol_l.isra.0+0xfe>
   37cde:	2710      	movs	r7, #16
   37ce0:	786c      	ldrb	r4, [r5, #1]
   37ce2:	3502      	adds	r5, #2
   37ce4:	9b01      	ldr	r3, [sp, #4]
   37ce6:	4a29      	ldr	r2, [pc, #164]	; (37d8c <_strtol_l.isra.0+0x108>)
   37ce8:	0039      	movs	r1, r7
   37cea:	189e      	adds	r6, r3, r2
   37cec:	0030      	movs	r0, r6
   37cee:	f7fd f807 	bl	34d00 <__aeabi_uidivmod>
   37cf2:	0030      	movs	r0, r6
   37cf4:	9104      	str	r1, [sp, #16]
   37cf6:	0039      	movs	r1, r7
   37cf8:	f7fc ff7c 	bl	34bf4 <__udivsi3>
   37cfc:	2101      	movs	r1, #1
   37cfe:	2300      	movs	r3, #0
   37d00:	4249      	negs	r1, r1
   37d02:	0002      	movs	r2, r0
   37d04:	468c      	mov	ip, r1
   37d06:	0018      	movs	r0, r3
   37d08:	0021      	movs	r1, r4
   37d0a:	3930      	subs	r1, #48	; 0x30
   37d0c:	2909      	cmp	r1, #9
   37d0e:	d813      	bhi.n	37d38 <_strtol_l.isra.0+0xb4>
   37d10:	000c      	movs	r4, r1
   37d12:	42a7      	cmp	r7, r4
   37d14:	dd1c      	ble.n	37d50 <_strtol_l.isra.0+0xcc>
   37d16:	1c59      	adds	r1, r3, #1
   37d18:	d009      	beq.n	37d2e <_strtol_l.isra.0+0xaa>
   37d1a:	4663      	mov	r3, ip
   37d1c:	4282      	cmp	r2, r0
   37d1e:	d306      	bcc.n	37d2e <_strtol_l.isra.0+0xaa>
   37d20:	d102      	bne.n	37d28 <_strtol_l.isra.0+0xa4>
   37d22:	9904      	ldr	r1, [sp, #16]
   37d24:	42a1      	cmp	r1, r4
   37d26:	db02      	blt.n	37d2e <_strtol_l.isra.0+0xaa>
   37d28:	2301      	movs	r3, #1
   37d2a:	4378      	muls	r0, r7
   37d2c:	1820      	adds	r0, r4, r0
   37d2e:	782c      	ldrb	r4, [r5, #0]
   37d30:	3501      	adds	r5, #1
   37d32:	e7e9      	b.n	37d08 <_strtol_l.isra.0+0x84>
   37d34:	270a      	movs	r7, #10
   37d36:	e7d5      	b.n	37ce4 <_strtol_l.isra.0+0x60>
   37d38:	0021      	movs	r1, r4
   37d3a:	3941      	subs	r1, #65	; 0x41
   37d3c:	2919      	cmp	r1, #25
   37d3e:	d801      	bhi.n	37d44 <_strtol_l.isra.0+0xc0>
   37d40:	3c37      	subs	r4, #55	; 0x37
   37d42:	e7e6      	b.n	37d12 <_strtol_l.isra.0+0x8e>
   37d44:	0021      	movs	r1, r4
   37d46:	3961      	subs	r1, #97	; 0x61
   37d48:	2919      	cmp	r1, #25
   37d4a:	d801      	bhi.n	37d50 <_strtol_l.isra.0+0xcc>
   37d4c:	3c57      	subs	r4, #87	; 0x57
   37d4e:	e7e0      	b.n	37d12 <_strtol_l.isra.0+0x8e>
   37d50:	1c5a      	adds	r2, r3, #1
   37d52:	d108      	bne.n	37d66 <_strtol_l.isra.0+0xe2>
   37d54:	9a05      	ldr	r2, [sp, #20]
   37d56:	3323      	adds	r3, #35	; 0x23
   37d58:	6013      	str	r3, [r2, #0]
   37d5a:	9b02      	ldr	r3, [sp, #8]
   37d5c:	0030      	movs	r0, r6
   37d5e:	2b00      	cmp	r3, #0
   37d60:	d10b      	bne.n	37d7a <_strtol_l.isra.0+0xf6>
   37d62:	b007      	add	sp, #28
   37d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37d66:	9a01      	ldr	r2, [sp, #4]
   37d68:	2a00      	cmp	r2, #0
   37d6a:	d000      	beq.n	37d6e <_strtol_l.isra.0+0xea>
   37d6c:	4240      	negs	r0, r0
   37d6e:	9a02      	ldr	r2, [sp, #8]
   37d70:	2a00      	cmp	r2, #0
   37d72:	d0f6      	beq.n	37d62 <_strtol_l.isra.0+0xde>
   37d74:	9a03      	ldr	r2, [sp, #12]
   37d76:	2b00      	cmp	r3, #0
   37d78:	d000      	beq.n	37d7c <_strtol_l.isra.0+0xf8>
   37d7a:	1e6a      	subs	r2, r5, #1
   37d7c:	9b02      	ldr	r3, [sp, #8]
   37d7e:	601a      	str	r2, [r3, #0]
   37d80:	e7ef      	b.n	37d62 <_strtol_l.isra.0+0xde>
   37d82:	2430      	movs	r4, #48	; 0x30
   37d84:	2f00      	cmp	r7, #0
   37d86:	d1ad      	bne.n	37ce4 <_strtol_l.isra.0+0x60>
   37d88:	3708      	adds	r7, #8
   37d8a:	e7ab      	b.n	37ce4 <_strtol_l.isra.0+0x60>
   37d8c:	7fffffff 	.word	0x7fffffff

00037d90 <strtol>:
   37d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37d92:	0013      	movs	r3, r2
   37d94:	4a06      	ldr	r2, [pc, #24]	; (37db0 <strtol+0x20>)
   37d96:	0005      	movs	r5, r0
   37d98:	6810      	ldr	r0, [r2, #0]
   37d9a:	6a04      	ldr	r4, [r0, #32]
   37d9c:	2c00      	cmp	r4, #0
   37d9e:	d100      	bne.n	37da2 <strtol+0x12>
   37da0:	4c04      	ldr	r4, [pc, #16]	; (37db4 <strtol+0x24>)
   37da2:	000a      	movs	r2, r1
   37da4:	9400      	str	r4, [sp, #0]
   37da6:	0029      	movs	r1, r5
   37da8:	f7ff ff6c 	bl	37c84 <_strtol_l.isra.0>
   37dac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   37dae:	46c0      	nop			; (mov r8, r8)
   37db0:	2000012c 	.word	0x2000012c
   37db4:	20000190 	.word	0x20000190

00037db8 <_vsniprintf_r>:
   37db8:	b530      	push	{r4, r5, lr}
   37dba:	0014      	movs	r4, r2
   37dbc:	b09b      	sub	sp, #108	; 0x6c
   37dbe:	0005      	movs	r5, r0
   37dc0:	001a      	movs	r2, r3
   37dc2:	2c00      	cmp	r4, #0
   37dc4:	da05      	bge.n	37dd2 <_vsniprintf_r+0x1a>
   37dc6:	238b      	movs	r3, #139	; 0x8b
   37dc8:	6003      	str	r3, [r0, #0]
   37dca:	2001      	movs	r0, #1
   37dcc:	4240      	negs	r0, r0
   37dce:	b01b      	add	sp, #108	; 0x6c
   37dd0:	bd30      	pop	{r4, r5, pc}
   37dd2:	2382      	movs	r3, #130	; 0x82
   37dd4:	4668      	mov	r0, sp
   37dd6:	009b      	lsls	r3, r3, #2
   37dd8:	8183      	strh	r3, [r0, #12]
   37dda:	2300      	movs	r3, #0
   37ddc:	9100      	str	r1, [sp, #0]
   37dde:	9104      	str	r1, [sp, #16]
   37de0:	429c      	cmp	r4, r3
   37de2:	d000      	beq.n	37de6 <_vsniprintf_r+0x2e>
   37de4:	1e63      	subs	r3, r4, #1
   37de6:	9302      	str	r3, [sp, #8]
   37de8:	9305      	str	r3, [sp, #20]
   37dea:	2301      	movs	r3, #1
   37dec:	4669      	mov	r1, sp
   37dee:	425b      	negs	r3, r3
   37df0:	81cb      	strh	r3, [r1, #14]
   37df2:	0028      	movs	r0, r5
   37df4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   37df6:	f000 fb63 	bl	384c0 <_svfiprintf_r>
   37dfa:	1c43      	adds	r3, r0, #1
   37dfc:	da01      	bge.n	37e02 <_vsniprintf_r+0x4a>
   37dfe:	238b      	movs	r3, #139	; 0x8b
   37e00:	602b      	str	r3, [r5, #0]
   37e02:	2c00      	cmp	r4, #0
   37e04:	d0e3      	beq.n	37dce <_vsniprintf_r+0x16>
   37e06:	2300      	movs	r3, #0
   37e08:	9a00      	ldr	r2, [sp, #0]
   37e0a:	7013      	strb	r3, [r2, #0]
   37e0c:	e7df      	b.n	37dce <_vsniprintf_r+0x16>
	...

00037e10 <vsniprintf>:
   37e10:	b507      	push	{r0, r1, r2, lr}
   37e12:	9300      	str	r3, [sp, #0]
   37e14:	0013      	movs	r3, r2
   37e16:	000a      	movs	r2, r1
   37e18:	0001      	movs	r1, r0
   37e1a:	4802      	ldr	r0, [pc, #8]	; (37e24 <vsniprintf+0x14>)
   37e1c:	6800      	ldr	r0, [r0, #0]
   37e1e:	f7ff ffcb 	bl	37db8 <_vsniprintf_r>
   37e22:	bd0e      	pop	{r1, r2, r3, pc}
   37e24:	2000012c 	.word	0x2000012c

00037e28 <__swbuf_r>:
   37e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37e2a:	0005      	movs	r5, r0
   37e2c:	000e      	movs	r6, r1
   37e2e:	0014      	movs	r4, r2
   37e30:	2800      	cmp	r0, #0
   37e32:	d004      	beq.n	37e3e <__swbuf_r+0x16>
   37e34:	6983      	ldr	r3, [r0, #24]
   37e36:	2b00      	cmp	r3, #0
   37e38:	d101      	bne.n	37e3e <__swbuf_r+0x16>
   37e3a:	f000 f9b9 	bl	381b0 <__sinit>
   37e3e:	4b22      	ldr	r3, [pc, #136]	; (37ec8 <__swbuf_r+0xa0>)
   37e40:	429c      	cmp	r4, r3
   37e42:	d12d      	bne.n	37ea0 <__swbuf_r+0x78>
   37e44:	686c      	ldr	r4, [r5, #4]
   37e46:	69a3      	ldr	r3, [r4, #24]
   37e48:	60a3      	str	r3, [r4, #8]
   37e4a:	89a3      	ldrh	r3, [r4, #12]
   37e4c:	071b      	lsls	r3, r3, #28
   37e4e:	d531      	bpl.n	37eb4 <__swbuf_r+0x8c>
   37e50:	6923      	ldr	r3, [r4, #16]
   37e52:	2b00      	cmp	r3, #0
   37e54:	d02e      	beq.n	37eb4 <__swbuf_r+0x8c>
   37e56:	6823      	ldr	r3, [r4, #0]
   37e58:	6922      	ldr	r2, [r4, #16]
   37e5a:	b2f7      	uxtb	r7, r6
   37e5c:	1a98      	subs	r0, r3, r2
   37e5e:	6963      	ldr	r3, [r4, #20]
   37e60:	b2f6      	uxtb	r6, r6
   37e62:	4298      	cmp	r0, r3
   37e64:	db05      	blt.n	37e72 <__swbuf_r+0x4a>
   37e66:	0021      	movs	r1, r4
   37e68:	0028      	movs	r0, r5
   37e6a:	f000 f933 	bl	380d4 <_fflush_r>
   37e6e:	2800      	cmp	r0, #0
   37e70:	d126      	bne.n	37ec0 <__swbuf_r+0x98>
   37e72:	68a3      	ldr	r3, [r4, #8]
   37e74:	3001      	adds	r0, #1
   37e76:	3b01      	subs	r3, #1
   37e78:	60a3      	str	r3, [r4, #8]
   37e7a:	6823      	ldr	r3, [r4, #0]
   37e7c:	1c5a      	adds	r2, r3, #1
   37e7e:	6022      	str	r2, [r4, #0]
   37e80:	701f      	strb	r7, [r3, #0]
   37e82:	6963      	ldr	r3, [r4, #20]
   37e84:	4298      	cmp	r0, r3
   37e86:	d004      	beq.n	37e92 <__swbuf_r+0x6a>
   37e88:	89a3      	ldrh	r3, [r4, #12]
   37e8a:	07db      	lsls	r3, r3, #31
   37e8c:	d51a      	bpl.n	37ec4 <__swbuf_r+0x9c>
   37e8e:	2e0a      	cmp	r6, #10
   37e90:	d118      	bne.n	37ec4 <__swbuf_r+0x9c>
   37e92:	0021      	movs	r1, r4
   37e94:	0028      	movs	r0, r5
   37e96:	f000 f91d 	bl	380d4 <_fflush_r>
   37e9a:	2800      	cmp	r0, #0
   37e9c:	d012      	beq.n	37ec4 <__swbuf_r+0x9c>
   37e9e:	e00f      	b.n	37ec0 <__swbuf_r+0x98>
   37ea0:	4b0a      	ldr	r3, [pc, #40]	; (37ecc <__swbuf_r+0xa4>)
   37ea2:	429c      	cmp	r4, r3
   37ea4:	d101      	bne.n	37eaa <__swbuf_r+0x82>
   37ea6:	68ac      	ldr	r4, [r5, #8]
   37ea8:	e7cd      	b.n	37e46 <__swbuf_r+0x1e>
   37eaa:	4b09      	ldr	r3, [pc, #36]	; (37ed0 <__swbuf_r+0xa8>)
   37eac:	429c      	cmp	r4, r3
   37eae:	d1ca      	bne.n	37e46 <__swbuf_r+0x1e>
   37eb0:	68ec      	ldr	r4, [r5, #12]
   37eb2:	e7c8      	b.n	37e46 <__swbuf_r+0x1e>
   37eb4:	0021      	movs	r1, r4
   37eb6:	0028      	movs	r0, r5
   37eb8:	f000 f80c 	bl	37ed4 <__swsetup_r>
   37ebc:	2800      	cmp	r0, #0
   37ebe:	d0ca      	beq.n	37e56 <__swbuf_r+0x2e>
   37ec0:	2601      	movs	r6, #1
   37ec2:	4276      	negs	r6, r6
   37ec4:	0030      	movs	r0, r6
   37ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37ec8:	0003d2a4 	.word	0x0003d2a4
   37ecc:	0003d2c4 	.word	0x0003d2c4
   37ed0:	0003d284 	.word	0x0003d284

00037ed4 <__swsetup_r>:
   37ed4:	4b36      	ldr	r3, [pc, #216]	; (37fb0 <__swsetup_r+0xdc>)
   37ed6:	b570      	push	{r4, r5, r6, lr}
   37ed8:	681d      	ldr	r5, [r3, #0]
   37eda:	0006      	movs	r6, r0
   37edc:	000c      	movs	r4, r1
   37ede:	2d00      	cmp	r5, #0
   37ee0:	d005      	beq.n	37eee <__swsetup_r+0x1a>
   37ee2:	69ab      	ldr	r3, [r5, #24]
   37ee4:	2b00      	cmp	r3, #0
   37ee6:	d102      	bne.n	37eee <__swsetup_r+0x1a>
   37ee8:	0028      	movs	r0, r5
   37eea:	f000 f961 	bl	381b0 <__sinit>
   37eee:	4b31      	ldr	r3, [pc, #196]	; (37fb4 <__swsetup_r+0xe0>)
   37ef0:	429c      	cmp	r4, r3
   37ef2:	d10f      	bne.n	37f14 <__swsetup_r+0x40>
   37ef4:	686c      	ldr	r4, [r5, #4]
   37ef6:	230c      	movs	r3, #12
   37ef8:	5ee2      	ldrsh	r2, [r4, r3]
   37efa:	b293      	uxth	r3, r2
   37efc:	0719      	lsls	r1, r3, #28
   37efe:	d42d      	bmi.n	37f5c <__swsetup_r+0x88>
   37f00:	06d9      	lsls	r1, r3, #27
   37f02:	d411      	bmi.n	37f28 <__swsetup_r+0x54>
   37f04:	2309      	movs	r3, #9
   37f06:	2001      	movs	r0, #1
   37f08:	6033      	str	r3, [r6, #0]
   37f0a:	3337      	adds	r3, #55	; 0x37
   37f0c:	4313      	orrs	r3, r2
   37f0e:	81a3      	strh	r3, [r4, #12]
   37f10:	4240      	negs	r0, r0
   37f12:	bd70      	pop	{r4, r5, r6, pc}
   37f14:	4b28      	ldr	r3, [pc, #160]	; (37fb8 <__swsetup_r+0xe4>)
   37f16:	429c      	cmp	r4, r3
   37f18:	d101      	bne.n	37f1e <__swsetup_r+0x4a>
   37f1a:	68ac      	ldr	r4, [r5, #8]
   37f1c:	e7eb      	b.n	37ef6 <__swsetup_r+0x22>
   37f1e:	4b27      	ldr	r3, [pc, #156]	; (37fbc <__swsetup_r+0xe8>)
   37f20:	429c      	cmp	r4, r3
   37f22:	d1e8      	bne.n	37ef6 <__swsetup_r+0x22>
   37f24:	68ec      	ldr	r4, [r5, #12]
   37f26:	e7e6      	b.n	37ef6 <__swsetup_r+0x22>
   37f28:	075b      	lsls	r3, r3, #29
   37f2a:	d513      	bpl.n	37f54 <__swsetup_r+0x80>
   37f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   37f2e:	2900      	cmp	r1, #0
   37f30:	d008      	beq.n	37f44 <__swsetup_r+0x70>
   37f32:	0023      	movs	r3, r4
   37f34:	3344      	adds	r3, #68	; 0x44
   37f36:	4299      	cmp	r1, r3
   37f38:	d002      	beq.n	37f40 <__swsetup_r+0x6c>
   37f3a:	0030      	movs	r0, r6
   37f3c:	f7ff fc78 	bl	37830 <_free_r>
   37f40:	2300      	movs	r3, #0
   37f42:	6363      	str	r3, [r4, #52]	; 0x34
   37f44:	2224      	movs	r2, #36	; 0x24
   37f46:	89a3      	ldrh	r3, [r4, #12]
   37f48:	4393      	bics	r3, r2
   37f4a:	81a3      	strh	r3, [r4, #12]
   37f4c:	2300      	movs	r3, #0
   37f4e:	6063      	str	r3, [r4, #4]
   37f50:	6923      	ldr	r3, [r4, #16]
   37f52:	6023      	str	r3, [r4, #0]
   37f54:	2308      	movs	r3, #8
   37f56:	89a2      	ldrh	r2, [r4, #12]
   37f58:	4313      	orrs	r3, r2
   37f5a:	81a3      	strh	r3, [r4, #12]
   37f5c:	6923      	ldr	r3, [r4, #16]
   37f5e:	2b00      	cmp	r3, #0
   37f60:	d10b      	bne.n	37f7a <__swsetup_r+0xa6>
   37f62:	21a0      	movs	r1, #160	; 0xa0
   37f64:	2280      	movs	r2, #128	; 0x80
   37f66:	89a3      	ldrh	r3, [r4, #12]
   37f68:	0089      	lsls	r1, r1, #2
   37f6a:	0092      	lsls	r2, r2, #2
   37f6c:	400b      	ands	r3, r1
   37f6e:	4293      	cmp	r3, r2
   37f70:	d003      	beq.n	37f7a <__swsetup_r+0xa6>
   37f72:	0021      	movs	r1, r4
   37f74:	0030      	movs	r0, r6
   37f76:	f000 f9e9 	bl	3834c <__smakebuf_r>
   37f7a:	2301      	movs	r3, #1
   37f7c:	89a2      	ldrh	r2, [r4, #12]
   37f7e:	4013      	ands	r3, r2
   37f80:	d011      	beq.n	37fa6 <__swsetup_r+0xd2>
   37f82:	2300      	movs	r3, #0
   37f84:	60a3      	str	r3, [r4, #8]
   37f86:	6963      	ldr	r3, [r4, #20]
   37f88:	425b      	negs	r3, r3
   37f8a:	61a3      	str	r3, [r4, #24]
   37f8c:	2000      	movs	r0, #0
   37f8e:	6923      	ldr	r3, [r4, #16]
   37f90:	4283      	cmp	r3, r0
   37f92:	d1be      	bne.n	37f12 <__swsetup_r+0x3e>
   37f94:	230c      	movs	r3, #12
   37f96:	5ee2      	ldrsh	r2, [r4, r3]
   37f98:	0613      	lsls	r3, r2, #24
   37f9a:	d5ba      	bpl.n	37f12 <__swsetup_r+0x3e>
   37f9c:	2340      	movs	r3, #64	; 0x40
   37f9e:	4313      	orrs	r3, r2
   37fa0:	81a3      	strh	r3, [r4, #12]
   37fa2:	3801      	subs	r0, #1
   37fa4:	e7b5      	b.n	37f12 <__swsetup_r+0x3e>
   37fa6:	0792      	lsls	r2, r2, #30
   37fa8:	d400      	bmi.n	37fac <__swsetup_r+0xd8>
   37faa:	6963      	ldr	r3, [r4, #20]
   37fac:	60a3      	str	r3, [r4, #8]
   37fae:	e7ed      	b.n	37f8c <__swsetup_r+0xb8>
   37fb0:	2000012c 	.word	0x2000012c
   37fb4:	0003d2a4 	.word	0x0003d2a4
   37fb8:	0003d2c4 	.word	0x0003d2c4
   37fbc:	0003d284 	.word	0x0003d284

00037fc0 <__sflush_r>:
   37fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37fc2:	898a      	ldrh	r2, [r1, #12]
   37fc4:	0005      	movs	r5, r0
   37fc6:	000c      	movs	r4, r1
   37fc8:	0713      	lsls	r3, r2, #28
   37fca:	d460      	bmi.n	3808e <__sflush_r+0xce>
   37fcc:	684b      	ldr	r3, [r1, #4]
   37fce:	2b00      	cmp	r3, #0
   37fd0:	dc04      	bgt.n	37fdc <__sflush_r+0x1c>
   37fd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   37fd4:	2b00      	cmp	r3, #0
   37fd6:	dc01      	bgt.n	37fdc <__sflush_r+0x1c>
   37fd8:	2000      	movs	r0, #0
   37fda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   37fdc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   37fde:	2f00      	cmp	r7, #0
   37fe0:	d0fa      	beq.n	37fd8 <__sflush_r+0x18>
   37fe2:	2300      	movs	r3, #0
   37fe4:	682e      	ldr	r6, [r5, #0]
   37fe6:	602b      	str	r3, [r5, #0]
   37fe8:	2380      	movs	r3, #128	; 0x80
   37fea:	015b      	lsls	r3, r3, #5
   37fec:	401a      	ands	r2, r3
   37fee:	d034      	beq.n	3805a <__sflush_r+0x9a>
   37ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   37ff2:	89a3      	ldrh	r3, [r4, #12]
   37ff4:	075b      	lsls	r3, r3, #29
   37ff6:	d506      	bpl.n	38006 <__sflush_r+0x46>
   37ff8:	6863      	ldr	r3, [r4, #4]
   37ffa:	1ac0      	subs	r0, r0, r3
   37ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   37ffe:	2b00      	cmp	r3, #0
   38000:	d001      	beq.n	38006 <__sflush_r+0x46>
   38002:	6c23      	ldr	r3, [r4, #64]	; 0x40
   38004:	1ac0      	subs	r0, r0, r3
   38006:	0002      	movs	r2, r0
   38008:	6a21      	ldr	r1, [r4, #32]
   3800a:	2300      	movs	r3, #0
   3800c:	0028      	movs	r0, r5
   3800e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   38010:	47b8      	blx	r7
   38012:	89a1      	ldrh	r1, [r4, #12]
   38014:	1c43      	adds	r3, r0, #1
   38016:	d106      	bne.n	38026 <__sflush_r+0x66>
   38018:	682b      	ldr	r3, [r5, #0]
   3801a:	2b1d      	cmp	r3, #29
   3801c:	d831      	bhi.n	38082 <__sflush_r+0xc2>
   3801e:	4a2c      	ldr	r2, [pc, #176]	; (380d0 <__sflush_r+0x110>)
   38020:	40da      	lsrs	r2, r3
   38022:	07d3      	lsls	r3, r2, #31
   38024:	d52d      	bpl.n	38082 <__sflush_r+0xc2>
   38026:	2300      	movs	r3, #0
   38028:	6063      	str	r3, [r4, #4]
   3802a:	6923      	ldr	r3, [r4, #16]
   3802c:	6023      	str	r3, [r4, #0]
   3802e:	04cb      	lsls	r3, r1, #19
   38030:	d505      	bpl.n	3803e <__sflush_r+0x7e>
   38032:	1c43      	adds	r3, r0, #1
   38034:	d102      	bne.n	3803c <__sflush_r+0x7c>
   38036:	682b      	ldr	r3, [r5, #0]
   38038:	2b00      	cmp	r3, #0
   3803a:	d100      	bne.n	3803e <__sflush_r+0x7e>
   3803c:	6560      	str	r0, [r4, #84]	; 0x54
   3803e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   38040:	602e      	str	r6, [r5, #0]
   38042:	2900      	cmp	r1, #0
   38044:	d0c8      	beq.n	37fd8 <__sflush_r+0x18>
   38046:	0023      	movs	r3, r4
   38048:	3344      	adds	r3, #68	; 0x44
   3804a:	4299      	cmp	r1, r3
   3804c:	d002      	beq.n	38054 <__sflush_r+0x94>
   3804e:	0028      	movs	r0, r5
   38050:	f7ff fbee 	bl	37830 <_free_r>
   38054:	2000      	movs	r0, #0
   38056:	6360      	str	r0, [r4, #52]	; 0x34
   38058:	e7bf      	b.n	37fda <__sflush_r+0x1a>
   3805a:	2301      	movs	r3, #1
   3805c:	6a21      	ldr	r1, [r4, #32]
   3805e:	0028      	movs	r0, r5
   38060:	47b8      	blx	r7
   38062:	1c43      	adds	r3, r0, #1
   38064:	d1c5      	bne.n	37ff2 <__sflush_r+0x32>
   38066:	682b      	ldr	r3, [r5, #0]
   38068:	2b00      	cmp	r3, #0
   3806a:	d0c2      	beq.n	37ff2 <__sflush_r+0x32>
   3806c:	2b1d      	cmp	r3, #29
   3806e:	d001      	beq.n	38074 <__sflush_r+0xb4>
   38070:	2b16      	cmp	r3, #22
   38072:	d101      	bne.n	38078 <__sflush_r+0xb8>
   38074:	602e      	str	r6, [r5, #0]
   38076:	e7af      	b.n	37fd8 <__sflush_r+0x18>
   38078:	2340      	movs	r3, #64	; 0x40
   3807a:	89a2      	ldrh	r2, [r4, #12]
   3807c:	4313      	orrs	r3, r2
   3807e:	81a3      	strh	r3, [r4, #12]
   38080:	e7ab      	b.n	37fda <__sflush_r+0x1a>
   38082:	2340      	movs	r3, #64	; 0x40
   38084:	430b      	orrs	r3, r1
   38086:	2001      	movs	r0, #1
   38088:	81a3      	strh	r3, [r4, #12]
   3808a:	4240      	negs	r0, r0
   3808c:	e7a5      	b.n	37fda <__sflush_r+0x1a>
   3808e:	690f      	ldr	r7, [r1, #16]
   38090:	2f00      	cmp	r7, #0
   38092:	d0a1      	beq.n	37fd8 <__sflush_r+0x18>
   38094:	680b      	ldr	r3, [r1, #0]
   38096:	600f      	str	r7, [r1, #0]
   38098:	1bdb      	subs	r3, r3, r7
   3809a:	9301      	str	r3, [sp, #4]
   3809c:	2300      	movs	r3, #0
   3809e:	0792      	lsls	r2, r2, #30
   380a0:	d100      	bne.n	380a4 <__sflush_r+0xe4>
   380a2:	694b      	ldr	r3, [r1, #20]
   380a4:	60a3      	str	r3, [r4, #8]
   380a6:	9b01      	ldr	r3, [sp, #4]
   380a8:	2b00      	cmp	r3, #0
   380aa:	dc00      	bgt.n	380ae <__sflush_r+0xee>
   380ac:	e794      	b.n	37fd8 <__sflush_r+0x18>
   380ae:	9b01      	ldr	r3, [sp, #4]
   380b0:	003a      	movs	r2, r7
   380b2:	6a21      	ldr	r1, [r4, #32]
   380b4:	0028      	movs	r0, r5
   380b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   380b8:	47b0      	blx	r6
   380ba:	2800      	cmp	r0, #0
   380bc:	dc03      	bgt.n	380c6 <__sflush_r+0x106>
   380be:	2340      	movs	r3, #64	; 0x40
   380c0:	89a2      	ldrh	r2, [r4, #12]
   380c2:	4313      	orrs	r3, r2
   380c4:	e7df      	b.n	38086 <__sflush_r+0xc6>
   380c6:	9b01      	ldr	r3, [sp, #4]
   380c8:	183f      	adds	r7, r7, r0
   380ca:	1a1b      	subs	r3, r3, r0
   380cc:	9301      	str	r3, [sp, #4]
   380ce:	e7ea      	b.n	380a6 <__sflush_r+0xe6>
   380d0:	20400001 	.word	0x20400001

000380d4 <_fflush_r>:
   380d4:	690b      	ldr	r3, [r1, #16]
   380d6:	b570      	push	{r4, r5, r6, lr}
   380d8:	0005      	movs	r5, r0
   380da:	000c      	movs	r4, r1
   380dc:	2b00      	cmp	r3, #0
   380de:	d101      	bne.n	380e4 <_fflush_r+0x10>
   380e0:	2000      	movs	r0, #0
   380e2:	bd70      	pop	{r4, r5, r6, pc}
   380e4:	2800      	cmp	r0, #0
   380e6:	d004      	beq.n	380f2 <_fflush_r+0x1e>
   380e8:	6983      	ldr	r3, [r0, #24]
   380ea:	2b00      	cmp	r3, #0
   380ec:	d101      	bne.n	380f2 <_fflush_r+0x1e>
   380ee:	f000 f85f 	bl	381b0 <__sinit>
   380f2:	4b0b      	ldr	r3, [pc, #44]	; (38120 <_fflush_r+0x4c>)
   380f4:	429c      	cmp	r4, r3
   380f6:	d109      	bne.n	3810c <_fflush_r+0x38>
   380f8:	686c      	ldr	r4, [r5, #4]
   380fa:	220c      	movs	r2, #12
   380fc:	5ea3      	ldrsh	r3, [r4, r2]
   380fe:	2b00      	cmp	r3, #0
   38100:	d0ee      	beq.n	380e0 <_fflush_r+0xc>
   38102:	0021      	movs	r1, r4
   38104:	0028      	movs	r0, r5
   38106:	f7ff ff5b 	bl	37fc0 <__sflush_r>
   3810a:	e7ea      	b.n	380e2 <_fflush_r+0xe>
   3810c:	4b05      	ldr	r3, [pc, #20]	; (38124 <_fflush_r+0x50>)
   3810e:	429c      	cmp	r4, r3
   38110:	d101      	bne.n	38116 <_fflush_r+0x42>
   38112:	68ac      	ldr	r4, [r5, #8]
   38114:	e7f1      	b.n	380fa <_fflush_r+0x26>
   38116:	4b04      	ldr	r3, [pc, #16]	; (38128 <_fflush_r+0x54>)
   38118:	429c      	cmp	r4, r3
   3811a:	d1ee      	bne.n	380fa <_fflush_r+0x26>
   3811c:	68ec      	ldr	r4, [r5, #12]
   3811e:	e7ec      	b.n	380fa <_fflush_r+0x26>
   38120:	0003d2a4 	.word	0x0003d2a4
   38124:	0003d2c4 	.word	0x0003d2c4
   38128:	0003d284 	.word	0x0003d284

0003812c <_cleanup_r>:
   3812c:	b510      	push	{r4, lr}
   3812e:	4902      	ldr	r1, [pc, #8]	; (38138 <_cleanup_r+0xc>)
   38130:	f000 f8b2 	bl	38298 <_fwalk_reent>
   38134:	bd10      	pop	{r4, pc}
   38136:	46c0      	nop			; (mov r8, r8)
   38138:	000380d5 	.word	0x000380d5

0003813c <std.isra.0>:
   3813c:	2300      	movs	r3, #0
   3813e:	b510      	push	{r4, lr}
   38140:	0004      	movs	r4, r0
   38142:	6003      	str	r3, [r0, #0]
   38144:	6043      	str	r3, [r0, #4]
   38146:	6083      	str	r3, [r0, #8]
   38148:	8181      	strh	r1, [r0, #12]
   3814a:	6643      	str	r3, [r0, #100]	; 0x64
   3814c:	81c2      	strh	r2, [r0, #14]
   3814e:	6103      	str	r3, [r0, #16]
   38150:	6143      	str	r3, [r0, #20]
   38152:	6183      	str	r3, [r0, #24]
   38154:	0019      	movs	r1, r3
   38156:	2208      	movs	r2, #8
   38158:	305c      	adds	r0, #92	; 0x5c
   3815a:	f7ff fb60 	bl	3781e <memset>
   3815e:	4b05      	ldr	r3, [pc, #20]	; (38174 <std.isra.0+0x38>)
   38160:	6224      	str	r4, [r4, #32]
   38162:	6263      	str	r3, [r4, #36]	; 0x24
   38164:	4b04      	ldr	r3, [pc, #16]	; (38178 <std.isra.0+0x3c>)
   38166:	62a3      	str	r3, [r4, #40]	; 0x28
   38168:	4b04      	ldr	r3, [pc, #16]	; (3817c <std.isra.0+0x40>)
   3816a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3816c:	4b04      	ldr	r3, [pc, #16]	; (38180 <std.isra.0+0x44>)
   3816e:	6323      	str	r3, [r4, #48]	; 0x30
   38170:	bd10      	pop	{r4, pc}
   38172:	46c0      	nop			; (mov r8, r8)
   38174:	000389d9 	.word	0x000389d9
   38178:	00038a01 	.word	0x00038a01
   3817c:	00038a39 	.word	0x00038a39
   38180:	00038a65 	.word	0x00038a65

00038184 <__sfmoreglue>:
   38184:	b570      	push	{r4, r5, r6, lr}
   38186:	2568      	movs	r5, #104	; 0x68
   38188:	1e4a      	subs	r2, r1, #1
   3818a:	4355      	muls	r5, r2
   3818c:	000e      	movs	r6, r1
   3818e:	0029      	movs	r1, r5
   38190:	3174      	adds	r1, #116	; 0x74
   38192:	f7ff fb97 	bl	378c4 <_malloc_r>
   38196:	1e04      	subs	r4, r0, #0
   38198:	d008      	beq.n	381ac <__sfmoreglue+0x28>
   3819a:	2100      	movs	r1, #0
   3819c:	002a      	movs	r2, r5
   3819e:	6001      	str	r1, [r0, #0]
   381a0:	6046      	str	r6, [r0, #4]
   381a2:	300c      	adds	r0, #12
   381a4:	60a0      	str	r0, [r4, #8]
   381a6:	3268      	adds	r2, #104	; 0x68
   381a8:	f7ff fb39 	bl	3781e <memset>
   381ac:	0020      	movs	r0, r4
   381ae:	bd70      	pop	{r4, r5, r6, pc}

000381b0 <__sinit>:
   381b0:	6983      	ldr	r3, [r0, #24]
   381b2:	b513      	push	{r0, r1, r4, lr}
   381b4:	0004      	movs	r4, r0
   381b6:	2b00      	cmp	r3, #0
   381b8:	d128      	bne.n	3820c <__sinit+0x5c>
   381ba:	6483      	str	r3, [r0, #72]	; 0x48
   381bc:	64c3      	str	r3, [r0, #76]	; 0x4c
   381be:	6503      	str	r3, [r0, #80]	; 0x50
   381c0:	4b13      	ldr	r3, [pc, #76]	; (38210 <__sinit+0x60>)
   381c2:	4a14      	ldr	r2, [pc, #80]	; (38214 <__sinit+0x64>)
   381c4:	681b      	ldr	r3, [r3, #0]
   381c6:	6282      	str	r2, [r0, #40]	; 0x28
   381c8:	9301      	str	r3, [sp, #4]
   381ca:	4298      	cmp	r0, r3
   381cc:	d101      	bne.n	381d2 <__sinit+0x22>
   381ce:	2301      	movs	r3, #1
   381d0:	6183      	str	r3, [r0, #24]
   381d2:	0020      	movs	r0, r4
   381d4:	f000 f820 	bl	38218 <__sfp>
   381d8:	6060      	str	r0, [r4, #4]
   381da:	0020      	movs	r0, r4
   381dc:	f000 f81c 	bl	38218 <__sfp>
   381e0:	60a0      	str	r0, [r4, #8]
   381e2:	0020      	movs	r0, r4
   381e4:	f000 f818 	bl	38218 <__sfp>
   381e8:	2200      	movs	r2, #0
   381ea:	60e0      	str	r0, [r4, #12]
   381ec:	2104      	movs	r1, #4
   381ee:	6860      	ldr	r0, [r4, #4]
   381f0:	f7ff ffa4 	bl	3813c <std.isra.0>
   381f4:	2201      	movs	r2, #1
   381f6:	2109      	movs	r1, #9
   381f8:	68a0      	ldr	r0, [r4, #8]
   381fa:	f7ff ff9f 	bl	3813c <std.isra.0>
   381fe:	2202      	movs	r2, #2
   38200:	2112      	movs	r1, #18
   38202:	68e0      	ldr	r0, [r4, #12]
   38204:	f7ff ff9a 	bl	3813c <std.isra.0>
   38208:	2301      	movs	r3, #1
   3820a:	61a3      	str	r3, [r4, #24]
   3820c:	bd13      	pop	{r0, r1, r4, pc}
   3820e:	46c0      	nop			; (mov r8, r8)
   38210:	0003d280 	.word	0x0003d280
   38214:	0003812d 	.word	0x0003812d

00038218 <__sfp>:
   38218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3821a:	4b1e      	ldr	r3, [pc, #120]	; (38294 <__sfp+0x7c>)
   3821c:	0007      	movs	r7, r0
   3821e:	681e      	ldr	r6, [r3, #0]
   38220:	69b3      	ldr	r3, [r6, #24]
   38222:	2b00      	cmp	r3, #0
   38224:	d102      	bne.n	3822c <__sfp+0x14>
   38226:	0030      	movs	r0, r6
   38228:	f7ff ffc2 	bl	381b0 <__sinit>
   3822c:	3648      	adds	r6, #72	; 0x48
   3822e:	68b4      	ldr	r4, [r6, #8]
   38230:	6873      	ldr	r3, [r6, #4]
   38232:	3b01      	subs	r3, #1
   38234:	d504      	bpl.n	38240 <__sfp+0x28>
   38236:	6833      	ldr	r3, [r6, #0]
   38238:	2b00      	cmp	r3, #0
   3823a:	d007      	beq.n	3824c <__sfp+0x34>
   3823c:	6836      	ldr	r6, [r6, #0]
   3823e:	e7f6      	b.n	3822e <__sfp+0x16>
   38240:	220c      	movs	r2, #12
   38242:	5ea5      	ldrsh	r5, [r4, r2]
   38244:	2d00      	cmp	r5, #0
   38246:	d00d      	beq.n	38264 <__sfp+0x4c>
   38248:	3468      	adds	r4, #104	; 0x68
   3824a:	e7f2      	b.n	38232 <__sfp+0x1a>
   3824c:	2104      	movs	r1, #4
   3824e:	0038      	movs	r0, r7
   38250:	f7ff ff98 	bl	38184 <__sfmoreglue>
   38254:	6030      	str	r0, [r6, #0]
   38256:	2800      	cmp	r0, #0
   38258:	d1f0      	bne.n	3823c <__sfp+0x24>
   3825a:	230c      	movs	r3, #12
   3825c:	0004      	movs	r4, r0
   3825e:	603b      	str	r3, [r7, #0]
   38260:	0020      	movs	r0, r4
   38262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38264:	2301      	movs	r3, #1
   38266:	0020      	movs	r0, r4
   38268:	425b      	negs	r3, r3
   3826a:	81e3      	strh	r3, [r4, #14]
   3826c:	3302      	adds	r3, #2
   3826e:	81a3      	strh	r3, [r4, #12]
   38270:	6665      	str	r5, [r4, #100]	; 0x64
   38272:	6025      	str	r5, [r4, #0]
   38274:	60a5      	str	r5, [r4, #8]
   38276:	6065      	str	r5, [r4, #4]
   38278:	6125      	str	r5, [r4, #16]
   3827a:	6165      	str	r5, [r4, #20]
   3827c:	61a5      	str	r5, [r4, #24]
   3827e:	2208      	movs	r2, #8
   38280:	0029      	movs	r1, r5
   38282:	305c      	adds	r0, #92	; 0x5c
   38284:	f7ff facb 	bl	3781e <memset>
   38288:	6365      	str	r5, [r4, #52]	; 0x34
   3828a:	63a5      	str	r5, [r4, #56]	; 0x38
   3828c:	64a5      	str	r5, [r4, #72]	; 0x48
   3828e:	64e5      	str	r5, [r4, #76]	; 0x4c
   38290:	e7e6      	b.n	38260 <__sfp+0x48>
   38292:	46c0      	nop			; (mov r8, r8)
   38294:	0003d280 	.word	0x0003d280

00038298 <_fwalk_reent>:
   38298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3829a:	0004      	movs	r4, r0
   3829c:	0007      	movs	r7, r0
   3829e:	2600      	movs	r6, #0
   382a0:	9101      	str	r1, [sp, #4]
   382a2:	3448      	adds	r4, #72	; 0x48
   382a4:	2c00      	cmp	r4, #0
   382a6:	d101      	bne.n	382ac <_fwalk_reent+0x14>
   382a8:	0030      	movs	r0, r6
   382aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   382ac:	6863      	ldr	r3, [r4, #4]
   382ae:	68a5      	ldr	r5, [r4, #8]
   382b0:	9300      	str	r3, [sp, #0]
   382b2:	9b00      	ldr	r3, [sp, #0]
   382b4:	3b01      	subs	r3, #1
   382b6:	9300      	str	r3, [sp, #0]
   382b8:	d501      	bpl.n	382be <_fwalk_reent+0x26>
   382ba:	6824      	ldr	r4, [r4, #0]
   382bc:	e7f2      	b.n	382a4 <_fwalk_reent+0xc>
   382be:	89ab      	ldrh	r3, [r5, #12]
   382c0:	2b01      	cmp	r3, #1
   382c2:	d908      	bls.n	382d6 <_fwalk_reent+0x3e>
   382c4:	220e      	movs	r2, #14
   382c6:	5eab      	ldrsh	r3, [r5, r2]
   382c8:	3301      	adds	r3, #1
   382ca:	d004      	beq.n	382d6 <_fwalk_reent+0x3e>
   382cc:	0029      	movs	r1, r5
   382ce:	0038      	movs	r0, r7
   382d0:	9b01      	ldr	r3, [sp, #4]
   382d2:	4798      	blx	r3
   382d4:	4306      	orrs	r6, r0
   382d6:	3568      	adds	r5, #104	; 0x68
   382d8:	e7eb      	b.n	382b2 <_fwalk_reent+0x1a>

000382da <__locale_ctype_ptr_l>:
   382da:	30ec      	adds	r0, #236	; 0xec
   382dc:	6800      	ldr	r0, [r0, #0]
   382de:	4770      	bx	lr

000382e0 <__locale_ctype_ptr>:
   382e0:	4b04      	ldr	r3, [pc, #16]	; (382f4 <__locale_ctype_ptr+0x14>)
   382e2:	681b      	ldr	r3, [r3, #0]
   382e4:	6a1b      	ldr	r3, [r3, #32]
   382e6:	2b00      	cmp	r3, #0
   382e8:	d100      	bne.n	382ec <__locale_ctype_ptr+0xc>
   382ea:	4b03      	ldr	r3, [pc, #12]	; (382f8 <__locale_ctype_ptr+0x18>)
   382ec:	33ec      	adds	r3, #236	; 0xec
   382ee:	6818      	ldr	r0, [r3, #0]
   382f0:	4770      	bx	lr
   382f2:	46c0      	nop			; (mov r8, r8)
   382f4:	2000012c 	.word	0x2000012c
   382f8:	20000190 	.word	0x20000190

000382fc <__swhatbuf_r>:
   382fc:	b570      	push	{r4, r5, r6, lr}
   382fe:	000e      	movs	r6, r1
   38300:	001d      	movs	r5, r3
   38302:	230e      	movs	r3, #14
   38304:	5ec9      	ldrsh	r1, [r1, r3]
   38306:	b090      	sub	sp, #64	; 0x40
   38308:	0014      	movs	r4, r2
   3830a:	2900      	cmp	r1, #0
   3830c:	da07      	bge.n	3831e <__swhatbuf_r+0x22>
   3830e:	2300      	movs	r3, #0
   38310:	602b      	str	r3, [r5, #0]
   38312:	89b3      	ldrh	r3, [r6, #12]
   38314:	061b      	lsls	r3, r3, #24
   38316:	d411      	bmi.n	3833c <__swhatbuf_r+0x40>
   38318:	2380      	movs	r3, #128	; 0x80
   3831a:	00db      	lsls	r3, r3, #3
   3831c:	e00f      	b.n	3833e <__swhatbuf_r+0x42>
   3831e:	aa01      	add	r2, sp, #4
   38320:	f000 fbe6 	bl	38af0 <_fstat_r>
   38324:	2800      	cmp	r0, #0
   38326:	dbf2      	blt.n	3830e <__swhatbuf_r+0x12>
   38328:	22f0      	movs	r2, #240	; 0xf0
   3832a:	9b02      	ldr	r3, [sp, #8]
   3832c:	0212      	lsls	r2, r2, #8
   3832e:	4013      	ands	r3, r2
   38330:	4a05      	ldr	r2, [pc, #20]	; (38348 <__swhatbuf_r+0x4c>)
   38332:	189b      	adds	r3, r3, r2
   38334:	425a      	negs	r2, r3
   38336:	4153      	adcs	r3, r2
   38338:	602b      	str	r3, [r5, #0]
   3833a:	e7ed      	b.n	38318 <__swhatbuf_r+0x1c>
   3833c:	2340      	movs	r3, #64	; 0x40
   3833e:	2000      	movs	r0, #0
   38340:	6023      	str	r3, [r4, #0]
   38342:	b010      	add	sp, #64	; 0x40
   38344:	bd70      	pop	{r4, r5, r6, pc}
   38346:	46c0      	nop			; (mov r8, r8)
   38348:	ffffe000 	.word	0xffffe000

0003834c <__smakebuf_r>:
   3834c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3834e:	2602      	movs	r6, #2
   38350:	898b      	ldrh	r3, [r1, #12]
   38352:	0005      	movs	r5, r0
   38354:	000c      	movs	r4, r1
   38356:	4233      	tst	r3, r6
   38358:	d006      	beq.n	38368 <__smakebuf_r+0x1c>
   3835a:	0023      	movs	r3, r4
   3835c:	3347      	adds	r3, #71	; 0x47
   3835e:	6023      	str	r3, [r4, #0]
   38360:	6123      	str	r3, [r4, #16]
   38362:	2301      	movs	r3, #1
   38364:	6163      	str	r3, [r4, #20]
   38366:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   38368:	ab01      	add	r3, sp, #4
   3836a:	466a      	mov	r2, sp
   3836c:	f7ff ffc6 	bl	382fc <__swhatbuf_r>
   38370:	9900      	ldr	r1, [sp, #0]
   38372:	0007      	movs	r7, r0
   38374:	0028      	movs	r0, r5
   38376:	f7ff faa5 	bl	378c4 <_malloc_r>
   3837a:	2800      	cmp	r0, #0
   3837c:	d108      	bne.n	38390 <__smakebuf_r+0x44>
   3837e:	220c      	movs	r2, #12
   38380:	5ea3      	ldrsh	r3, [r4, r2]
   38382:	059a      	lsls	r2, r3, #22
   38384:	d4ef      	bmi.n	38366 <__smakebuf_r+0x1a>
   38386:	2203      	movs	r2, #3
   38388:	4393      	bics	r3, r2
   3838a:	431e      	orrs	r6, r3
   3838c:	81a6      	strh	r6, [r4, #12]
   3838e:	e7e4      	b.n	3835a <__smakebuf_r+0xe>
   38390:	4b0f      	ldr	r3, [pc, #60]	; (383d0 <__smakebuf_r+0x84>)
   38392:	62ab      	str	r3, [r5, #40]	; 0x28
   38394:	2380      	movs	r3, #128	; 0x80
   38396:	89a2      	ldrh	r2, [r4, #12]
   38398:	6020      	str	r0, [r4, #0]
   3839a:	4313      	orrs	r3, r2
   3839c:	81a3      	strh	r3, [r4, #12]
   3839e:	9b00      	ldr	r3, [sp, #0]
   383a0:	6120      	str	r0, [r4, #16]
   383a2:	6163      	str	r3, [r4, #20]
   383a4:	9b01      	ldr	r3, [sp, #4]
   383a6:	2b00      	cmp	r3, #0
   383a8:	d00d      	beq.n	383c6 <__smakebuf_r+0x7a>
   383aa:	230e      	movs	r3, #14
   383ac:	5ee1      	ldrsh	r1, [r4, r3]
   383ae:	0028      	movs	r0, r5
   383b0:	f000 fbb0 	bl	38b14 <_isatty_r>
   383b4:	2800      	cmp	r0, #0
   383b6:	d006      	beq.n	383c6 <__smakebuf_r+0x7a>
   383b8:	2203      	movs	r2, #3
   383ba:	89a3      	ldrh	r3, [r4, #12]
   383bc:	4393      	bics	r3, r2
   383be:	001a      	movs	r2, r3
   383c0:	2301      	movs	r3, #1
   383c2:	4313      	orrs	r3, r2
   383c4:	81a3      	strh	r3, [r4, #12]
   383c6:	89a0      	ldrh	r0, [r4, #12]
   383c8:	4338      	orrs	r0, r7
   383ca:	81a0      	strh	r0, [r4, #12]
   383cc:	e7cb      	b.n	38366 <__smakebuf_r+0x1a>
   383ce:	46c0      	nop			; (mov r8, r8)
   383d0:	0003812d 	.word	0x0003812d

000383d4 <__ascii_mbtowc>:
   383d4:	b082      	sub	sp, #8
   383d6:	2900      	cmp	r1, #0
   383d8:	d100      	bne.n	383dc <__ascii_mbtowc+0x8>
   383da:	a901      	add	r1, sp, #4
   383dc:	1e10      	subs	r0, r2, #0
   383de:	d006      	beq.n	383ee <__ascii_mbtowc+0x1a>
   383e0:	2b00      	cmp	r3, #0
   383e2:	d006      	beq.n	383f2 <__ascii_mbtowc+0x1e>
   383e4:	7813      	ldrb	r3, [r2, #0]
   383e6:	600b      	str	r3, [r1, #0]
   383e8:	7810      	ldrb	r0, [r2, #0]
   383ea:	1e43      	subs	r3, r0, #1
   383ec:	4198      	sbcs	r0, r3
   383ee:	b002      	add	sp, #8
   383f0:	4770      	bx	lr
   383f2:	2002      	movs	r0, #2
   383f4:	4240      	negs	r0, r0
   383f6:	e7fa      	b.n	383ee <__ascii_mbtowc+0x1a>

000383f8 <__malloc_lock>:
   383f8:	4770      	bx	lr

000383fa <__malloc_unlock>:
   383fa:	4770      	bx	lr

000383fc <__ssputs_r>:
   383fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   383fe:	688e      	ldr	r6, [r1, #8]
   38400:	b085      	sub	sp, #20
   38402:	0007      	movs	r7, r0
   38404:	000c      	movs	r4, r1
   38406:	9203      	str	r2, [sp, #12]
   38408:	9301      	str	r3, [sp, #4]
   3840a:	429e      	cmp	r6, r3
   3840c:	d839      	bhi.n	38482 <__ssputs_r+0x86>
   3840e:	2390      	movs	r3, #144	; 0x90
   38410:	898a      	ldrh	r2, [r1, #12]
   38412:	00db      	lsls	r3, r3, #3
   38414:	421a      	tst	r2, r3
   38416:	d034      	beq.n	38482 <__ssputs_r+0x86>
   38418:	2503      	movs	r5, #3
   3841a:	6909      	ldr	r1, [r1, #16]
   3841c:	6823      	ldr	r3, [r4, #0]
   3841e:	1a5b      	subs	r3, r3, r1
   38420:	9302      	str	r3, [sp, #8]
   38422:	6963      	ldr	r3, [r4, #20]
   38424:	9802      	ldr	r0, [sp, #8]
   38426:	435d      	muls	r5, r3
   38428:	0feb      	lsrs	r3, r5, #31
   3842a:	195d      	adds	r5, r3, r5
   3842c:	9b01      	ldr	r3, [sp, #4]
   3842e:	106d      	asrs	r5, r5, #1
   38430:	3301      	adds	r3, #1
   38432:	181b      	adds	r3, r3, r0
   38434:	42ab      	cmp	r3, r5
   38436:	d900      	bls.n	3843a <__ssputs_r+0x3e>
   38438:	001d      	movs	r5, r3
   3843a:	0553      	lsls	r3, r2, #21
   3843c:	d532      	bpl.n	384a4 <__ssputs_r+0xa8>
   3843e:	0029      	movs	r1, r5
   38440:	0038      	movs	r0, r7
   38442:	f7ff fa3f 	bl	378c4 <_malloc_r>
   38446:	1e06      	subs	r6, r0, #0
   38448:	d109      	bne.n	3845e <__ssputs_r+0x62>
   3844a:	230c      	movs	r3, #12
   3844c:	603b      	str	r3, [r7, #0]
   3844e:	2340      	movs	r3, #64	; 0x40
   38450:	2001      	movs	r0, #1
   38452:	89a2      	ldrh	r2, [r4, #12]
   38454:	4240      	negs	r0, r0
   38456:	4313      	orrs	r3, r2
   38458:	81a3      	strh	r3, [r4, #12]
   3845a:	b005      	add	sp, #20
   3845c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3845e:	9a02      	ldr	r2, [sp, #8]
   38460:	6921      	ldr	r1, [r4, #16]
   38462:	f7ff f9c1 	bl	377e8 <memcpy>
   38466:	89a3      	ldrh	r3, [r4, #12]
   38468:	4a14      	ldr	r2, [pc, #80]	; (384bc <__ssputs_r+0xc0>)
   3846a:	401a      	ands	r2, r3
   3846c:	2380      	movs	r3, #128	; 0x80
   3846e:	4313      	orrs	r3, r2
   38470:	81a3      	strh	r3, [r4, #12]
   38472:	9b02      	ldr	r3, [sp, #8]
   38474:	6126      	str	r6, [r4, #16]
   38476:	18f6      	adds	r6, r6, r3
   38478:	6026      	str	r6, [r4, #0]
   3847a:	6165      	str	r5, [r4, #20]
   3847c:	9e01      	ldr	r6, [sp, #4]
   3847e:	1aed      	subs	r5, r5, r3
   38480:	60a5      	str	r5, [r4, #8]
   38482:	9b01      	ldr	r3, [sp, #4]
   38484:	42b3      	cmp	r3, r6
   38486:	d200      	bcs.n	3848a <__ssputs_r+0x8e>
   38488:	001e      	movs	r6, r3
   3848a:	0032      	movs	r2, r6
   3848c:	9903      	ldr	r1, [sp, #12]
   3848e:	6820      	ldr	r0, [r4, #0]
   38490:	f7ff f9b3 	bl	377fa <memmove>
   38494:	68a3      	ldr	r3, [r4, #8]
   38496:	2000      	movs	r0, #0
   38498:	1b9b      	subs	r3, r3, r6
   3849a:	60a3      	str	r3, [r4, #8]
   3849c:	6823      	ldr	r3, [r4, #0]
   3849e:	199e      	adds	r6, r3, r6
   384a0:	6026      	str	r6, [r4, #0]
   384a2:	e7da      	b.n	3845a <__ssputs_r+0x5e>
   384a4:	002a      	movs	r2, r5
   384a6:	0038      	movs	r0, r7
   384a8:	f000 fb65 	bl	38b76 <_realloc_r>
   384ac:	1e06      	subs	r6, r0, #0
   384ae:	d1e0      	bne.n	38472 <__ssputs_r+0x76>
   384b0:	6921      	ldr	r1, [r4, #16]
   384b2:	0038      	movs	r0, r7
   384b4:	f7ff f9bc 	bl	37830 <_free_r>
   384b8:	e7c7      	b.n	3844a <__ssputs_r+0x4e>
   384ba:	46c0      	nop			; (mov r8, r8)
   384bc:	fffffb7f 	.word	0xfffffb7f

000384c0 <_svfiprintf_r>:
   384c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   384c2:	b09f      	sub	sp, #124	; 0x7c
   384c4:	9002      	str	r0, [sp, #8]
   384c6:	9305      	str	r3, [sp, #20]
   384c8:	898b      	ldrh	r3, [r1, #12]
   384ca:	000f      	movs	r7, r1
   384cc:	0016      	movs	r6, r2
   384ce:	061b      	lsls	r3, r3, #24
   384d0:	d511      	bpl.n	384f6 <_svfiprintf_r+0x36>
   384d2:	690b      	ldr	r3, [r1, #16]
   384d4:	2b00      	cmp	r3, #0
   384d6:	d10e      	bne.n	384f6 <_svfiprintf_r+0x36>
   384d8:	2140      	movs	r1, #64	; 0x40
   384da:	f7ff f9f3 	bl	378c4 <_malloc_r>
   384de:	6038      	str	r0, [r7, #0]
   384e0:	6138      	str	r0, [r7, #16]
   384e2:	2800      	cmp	r0, #0
   384e4:	d105      	bne.n	384f2 <_svfiprintf_r+0x32>
   384e6:	230c      	movs	r3, #12
   384e8:	9a02      	ldr	r2, [sp, #8]
   384ea:	3801      	subs	r0, #1
   384ec:	6013      	str	r3, [r2, #0]
   384ee:	b01f      	add	sp, #124	; 0x7c
   384f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   384f2:	2340      	movs	r3, #64	; 0x40
   384f4:	617b      	str	r3, [r7, #20]
   384f6:	2300      	movs	r3, #0
   384f8:	ad06      	add	r5, sp, #24
   384fa:	616b      	str	r3, [r5, #20]
   384fc:	3320      	adds	r3, #32
   384fe:	766b      	strb	r3, [r5, #25]
   38500:	3310      	adds	r3, #16
   38502:	76ab      	strb	r3, [r5, #26]
   38504:	0034      	movs	r4, r6
   38506:	7823      	ldrb	r3, [r4, #0]
   38508:	2b00      	cmp	r3, #0
   3850a:	d147      	bne.n	3859c <_svfiprintf_r+0xdc>
   3850c:	1ba3      	subs	r3, r4, r6
   3850e:	9304      	str	r3, [sp, #16]
   38510:	d00d      	beq.n	3852e <_svfiprintf_r+0x6e>
   38512:	1ba3      	subs	r3, r4, r6
   38514:	0032      	movs	r2, r6
   38516:	0039      	movs	r1, r7
   38518:	9802      	ldr	r0, [sp, #8]
   3851a:	f7ff ff6f 	bl	383fc <__ssputs_r>
   3851e:	1c43      	adds	r3, r0, #1
   38520:	d100      	bne.n	38524 <_svfiprintf_r+0x64>
   38522:	e0b5      	b.n	38690 <_svfiprintf_r+0x1d0>
   38524:	696a      	ldr	r2, [r5, #20]
   38526:	9b04      	ldr	r3, [sp, #16]
   38528:	4694      	mov	ip, r2
   3852a:	4463      	add	r3, ip
   3852c:	616b      	str	r3, [r5, #20]
   3852e:	7823      	ldrb	r3, [r4, #0]
   38530:	2b00      	cmp	r3, #0
   38532:	d100      	bne.n	38536 <_svfiprintf_r+0x76>
   38534:	e0ac      	b.n	38690 <_svfiprintf_r+0x1d0>
   38536:	2201      	movs	r2, #1
   38538:	2300      	movs	r3, #0
   3853a:	4252      	negs	r2, r2
   3853c:	606a      	str	r2, [r5, #4]
   3853e:	a902      	add	r1, sp, #8
   38540:	3254      	adds	r2, #84	; 0x54
   38542:	1852      	adds	r2, r2, r1
   38544:	3401      	adds	r4, #1
   38546:	602b      	str	r3, [r5, #0]
   38548:	60eb      	str	r3, [r5, #12]
   3854a:	60ab      	str	r3, [r5, #8]
   3854c:	7013      	strb	r3, [r2, #0]
   3854e:	65ab      	str	r3, [r5, #88]	; 0x58
   38550:	4e58      	ldr	r6, [pc, #352]	; (386b4 <_svfiprintf_r+0x1f4>)
   38552:	2205      	movs	r2, #5
   38554:	7821      	ldrb	r1, [r4, #0]
   38556:	0030      	movs	r0, r6
   38558:	f000 fb02 	bl	38b60 <memchr>
   3855c:	1c62      	adds	r2, r4, #1
   3855e:	2800      	cmp	r0, #0
   38560:	d120      	bne.n	385a4 <_svfiprintf_r+0xe4>
   38562:	6829      	ldr	r1, [r5, #0]
   38564:	06cb      	lsls	r3, r1, #27
   38566:	d504      	bpl.n	38572 <_svfiprintf_r+0xb2>
   38568:	2353      	movs	r3, #83	; 0x53
   3856a:	ae02      	add	r6, sp, #8
   3856c:	3020      	adds	r0, #32
   3856e:	199b      	adds	r3, r3, r6
   38570:	7018      	strb	r0, [r3, #0]
   38572:	070b      	lsls	r3, r1, #28
   38574:	d504      	bpl.n	38580 <_svfiprintf_r+0xc0>
   38576:	2353      	movs	r3, #83	; 0x53
   38578:	202b      	movs	r0, #43	; 0x2b
   3857a:	ae02      	add	r6, sp, #8
   3857c:	199b      	adds	r3, r3, r6
   3857e:	7018      	strb	r0, [r3, #0]
   38580:	7823      	ldrb	r3, [r4, #0]
   38582:	2b2a      	cmp	r3, #42	; 0x2a
   38584:	d016      	beq.n	385b4 <_svfiprintf_r+0xf4>
   38586:	2000      	movs	r0, #0
   38588:	210a      	movs	r1, #10
   3858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3858c:	7822      	ldrb	r2, [r4, #0]
   3858e:	3a30      	subs	r2, #48	; 0x30
   38590:	2a09      	cmp	r2, #9
   38592:	d955      	bls.n	38640 <_svfiprintf_r+0x180>
   38594:	2800      	cmp	r0, #0
   38596:	d015      	beq.n	385c4 <_svfiprintf_r+0x104>
   38598:	9309      	str	r3, [sp, #36]	; 0x24
   3859a:	e013      	b.n	385c4 <_svfiprintf_r+0x104>
   3859c:	2b25      	cmp	r3, #37	; 0x25
   3859e:	d0b5      	beq.n	3850c <_svfiprintf_r+0x4c>
   385a0:	3401      	adds	r4, #1
   385a2:	e7b0      	b.n	38506 <_svfiprintf_r+0x46>
   385a4:	2301      	movs	r3, #1
   385a6:	1b80      	subs	r0, r0, r6
   385a8:	4083      	lsls	r3, r0
   385aa:	6829      	ldr	r1, [r5, #0]
   385ac:	0014      	movs	r4, r2
   385ae:	430b      	orrs	r3, r1
   385b0:	602b      	str	r3, [r5, #0]
   385b2:	e7cd      	b.n	38550 <_svfiprintf_r+0x90>
   385b4:	9b05      	ldr	r3, [sp, #20]
   385b6:	1d18      	adds	r0, r3, #4
   385b8:	681b      	ldr	r3, [r3, #0]
   385ba:	9005      	str	r0, [sp, #20]
   385bc:	2b00      	cmp	r3, #0
   385be:	db39      	blt.n	38634 <_svfiprintf_r+0x174>
   385c0:	9309      	str	r3, [sp, #36]	; 0x24
   385c2:	0014      	movs	r4, r2
   385c4:	7823      	ldrb	r3, [r4, #0]
   385c6:	2b2e      	cmp	r3, #46	; 0x2e
   385c8:	d10b      	bne.n	385e2 <_svfiprintf_r+0x122>
   385ca:	7863      	ldrb	r3, [r4, #1]
   385cc:	1c62      	adds	r2, r4, #1
   385ce:	2b2a      	cmp	r3, #42	; 0x2a
   385d0:	d13e      	bne.n	38650 <_svfiprintf_r+0x190>
   385d2:	9b05      	ldr	r3, [sp, #20]
   385d4:	3402      	adds	r4, #2
   385d6:	1d1a      	adds	r2, r3, #4
   385d8:	681b      	ldr	r3, [r3, #0]
   385da:	9205      	str	r2, [sp, #20]
   385dc:	2b00      	cmp	r3, #0
   385de:	db34      	blt.n	3864a <_svfiprintf_r+0x18a>
   385e0:	9307      	str	r3, [sp, #28]
   385e2:	4e35      	ldr	r6, [pc, #212]	; (386b8 <_svfiprintf_r+0x1f8>)
   385e4:	7821      	ldrb	r1, [r4, #0]
   385e6:	2203      	movs	r2, #3
   385e8:	0030      	movs	r0, r6
   385ea:	f000 fab9 	bl	38b60 <memchr>
   385ee:	2800      	cmp	r0, #0
   385f0:	d006      	beq.n	38600 <_svfiprintf_r+0x140>
   385f2:	2340      	movs	r3, #64	; 0x40
   385f4:	1b80      	subs	r0, r0, r6
   385f6:	4083      	lsls	r3, r0
   385f8:	682a      	ldr	r2, [r5, #0]
   385fa:	3401      	adds	r4, #1
   385fc:	4313      	orrs	r3, r2
   385fe:	602b      	str	r3, [r5, #0]
   38600:	7821      	ldrb	r1, [r4, #0]
   38602:	2206      	movs	r2, #6
   38604:	482d      	ldr	r0, [pc, #180]	; (386bc <_svfiprintf_r+0x1fc>)
   38606:	1c66      	adds	r6, r4, #1
   38608:	7629      	strb	r1, [r5, #24]
   3860a:	f000 faa9 	bl	38b60 <memchr>
   3860e:	2800      	cmp	r0, #0
   38610:	d046      	beq.n	386a0 <_svfiprintf_r+0x1e0>
   38612:	4b2b      	ldr	r3, [pc, #172]	; (386c0 <_svfiprintf_r+0x200>)
   38614:	2b00      	cmp	r3, #0
   38616:	d12f      	bne.n	38678 <_svfiprintf_r+0x1b8>
   38618:	6829      	ldr	r1, [r5, #0]
   3861a:	9b05      	ldr	r3, [sp, #20]
   3861c:	2207      	movs	r2, #7
   3861e:	05c9      	lsls	r1, r1, #23
   38620:	d528      	bpl.n	38674 <_svfiprintf_r+0x1b4>
   38622:	189b      	adds	r3, r3, r2
   38624:	4393      	bics	r3, r2
   38626:	3308      	adds	r3, #8
   38628:	9305      	str	r3, [sp, #20]
   3862a:	696b      	ldr	r3, [r5, #20]
   3862c:	9a03      	ldr	r2, [sp, #12]
   3862e:	189b      	adds	r3, r3, r2
   38630:	616b      	str	r3, [r5, #20]
   38632:	e767      	b.n	38504 <_svfiprintf_r+0x44>
   38634:	425b      	negs	r3, r3
   38636:	60eb      	str	r3, [r5, #12]
   38638:	2302      	movs	r3, #2
   3863a:	430b      	orrs	r3, r1
   3863c:	602b      	str	r3, [r5, #0]
   3863e:	e7c0      	b.n	385c2 <_svfiprintf_r+0x102>
   38640:	434b      	muls	r3, r1
   38642:	3401      	adds	r4, #1
   38644:	189b      	adds	r3, r3, r2
   38646:	2001      	movs	r0, #1
   38648:	e7a0      	b.n	3858c <_svfiprintf_r+0xcc>
   3864a:	2301      	movs	r3, #1
   3864c:	425b      	negs	r3, r3
   3864e:	e7c7      	b.n	385e0 <_svfiprintf_r+0x120>
   38650:	2300      	movs	r3, #0
   38652:	0014      	movs	r4, r2
   38654:	200a      	movs	r0, #10
   38656:	001a      	movs	r2, r3
   38658:	606b      	str	r3, [r5, #4]
   3865a:	7821      	ldrb	r1, [r4, #0]
   3865c:	3930      	subs	r1, #48	; 0x30
   3865e:	2909      	cmp	r1, #9
   38660:	d903      	bls.n	3866a <_svfiprintf_r+0x1aa>
   38662:	2b00      	cmp	r3, #0
   38664:	d0bd      	beq.n	385e2 <_svfiprintf_r+0x122>
   38666:	9207      	str	r2, [sp, #28]
   38668:	e7bb      	b.n	385e2 <_svfiprintf_r+0x122>
   3866a:	4342      	muls	r2, r0
   3866c:	3401      	adds	r4, #1
   3866e:	1852      	adds	r2, r2, r1
   38670:	2301      	movs	r3, #1
   38672:	e7f2      	b.n	3865a <_svfiprintf_r+0x19a>
   38674:	3307      	adds	r3, #7
   38676:	e7d5      	b.n	38624 <_svfiprintf_r+0x164>
   38678:	ab05      	add	r3, sp, #20
   3867a:	9300      	str	r3, [sp, #0]
   3867c:	003a      	movs	r2, r7
   3867e:	4b11      	ldr	r3, [pc, #68]	; (386c4 <_svfiprintf_r+0x204>)
   38680:	0029      	movs	r1, r5
   38682:	9802      	ldr	r0, [sp, #8]
   38684:	e000      	b.n	38688 <_svfiprintf_r+0x1c8>
   38686:	bf00      	nop
   38688:	9003      	str	r0, [sp, #12]
   3868a:	9b03      	ldr	r3, [sp, #12]
   3868c:	3301      	adds	r3, #1
   3868e:	d1cc      	bne.n	3862a <_svfiprintf_r+0x16a>
   38690:	89bb      	ldrh	r3, [r7, #12]
   38692:	980b      	ldr	r0, [sp, #44]	; 0x2c
   38694:	065b      	lsls	r3, r3, #25
   38696:	d400      	bmi.n	3869a <_svfiprintf_r+0x1da>
   38698:	e729      	b.n	384ee <_svfiprintf_r+0x2e>
   3869a:	2001      	movs	r0, #1
   3869c:	4240      	negs	r0, r0
   3869e:	e726      	b.n	384ee <_svfiprintf_r+0x2e>
   386a0:	ab05      	add	r3, sp, #20
   386a2:	9300      	str	r3, [sp, #0]
   386a4:	003a      	movs	r2, r7
   386a6:	4b07      	ldr	r3, [pc, #28]	; (386c4 <_svfiprintf_r+0x204>)
   386a8:	0029      	movs	r1, r5
   386aa:	9802      	ldr	r0, [sp, #8]
   386ac:	f000 f87a 	bl	387a4 <_printf_i>
   386b0:	e7ea      	b.n	38688 <_svfiprintf_r+0x1c8>
   386b2:	46c0      	nop			; (mov r8, r8)
   386b4:	0003d2ee 	.word	0x0003d2ee
   386b8:	0003d2f4 	.word	0x0003d2f4
   386bc:	0003d2f8 	.word	0x0003d2f8
   386c0:	00000000 	.word	0x00000000
   386c4:	000383fd 	.word	0x000383fd

000386c8 <_printf_common>:
   386c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   386ca:	0015      	movs	r5, r2
   386cc:	9301      	str	r3, [sp, #4]
   386ce:	688a      	ldr	r2, [r1, #8]
   386d0:	690b      	ldr	r3, [r1, #16]
   386d2:	9000      	str	r0, [sp, #0]
   386d4:	000c      	movs	r4, r1
   386d6:	4293      	cmp	r3, r2
   386d8:	da00      	bge.n	386dc <_printf_common+0x14>
   386da:	0013      	movs	r3, r2
   386dc:	0022      	movs	r2, r4
   386de:	602b      	str	r3, [r5, #0]
   386e0:	3243      	adds	r2, #67	; 0x43
   386e2:	7812      	ldrb	r2, [r2, #0]
   386e4:	2a00      	cmp	r2, #0
   386e6:	d001      	beq.n	386ec <_printf_common+0x24>
   386e8:	3301      	adds	r3, #1
   386ea:	602b      	str	r3, [r5, #0]
   386ec:	6823      	ldr	r3, [r4, #0]
   386ee:	069b      	lsls	r3, r3, #26
   386f0:	d502      	bpl.n	386f8 <_printf_common+0x30>
   386f2:	682b      	ldr	r3, [r5, #0]
   386f4:	3302      	adds	r3, #2
   386f6:	602b      	str	r3, [r5, #0]
   386f8:	2706      	movs	r7, #6
   386fa:	6823      	ldr	r3, [r4, #0]
   386fc:	401f      	ands	r7, r3
   386fe:	d027      	beq.n	38750 <_printf_common+0x88>
   38700:	0023      	movs	r3, r4
   38702:	3343      	adds	r3, #67	; 0x43
   38704:	781b      	ldrb	r3, [r3, #0]
   38706:	1e5a      	subs	r2, r3, #1
   38708:	4193      	sbcs	r3, r2
   3870a:	6822      	ldr	r2, [r4, #0]
   3870c:	0692      	lsls	r2, r2, #26
   3870e:	d430      	bmi.n	38772 <_printf_common+0xaa>
   38710:	0022      	movs	r2, r4
   38712:	9901      	ldr	r1, [sp, #4]
   38714:	3243      	adds	r2, #67	; 0x43
   38716:	9800      	ldr	r0, [sp, #0]
   38718:	9e08      	ldr	r6, [sp, #32]
   3871a:	47b0      	blx	r6
   3871c:	1c43      	adds	r3, r0, #1
   3871e:	d025      	beq.n	3876c <_printf_common+0xa4>
   38720:	2306      	movs	r3, #6
   38722:	6820      	ldr	r0, [r4, #0]
   38724:	682a      	ldr	r2, [r5, #0]
   38726:	68e1      	ldr	r1, [r4, #12]
   38728:	4003      	ands	r3, r0
   3872a:	2500      	movs	r5, #0
   3872c:	2b04      	cmp	r3, #4
   3872e:	d103      	bne.n	38738 <_printf_common+0x70>
   38730:	1a8d      	subs	r5, r1, r2
   38732:	43eb      	mvns	r3, r5
   38734:	17db      	asrs	r3, r3, #31
   38736:	401d      	ands	r5, r3
   38738:	68a3      	ldr	r3, [r4, #8]
   3873a:	6922      	ldr	r2, [r4, #16]
   3873c:	4293      	cmp	r3, r2
   3873e:	dd01      	ble.n	38744 <_printf_common+0x7c>
   38740:	1a9b      	subs	r3, r3, r2
   38742:	18ed      	adds	r5, r5, r3
   38744:	2700      	movs	r7, #0
   38746:	42bd      	cmp	r5, r7
   38748:	d120      	bne.n	3878c <_printf_common+0xc4>
   3874a:	2000      	movs	r0, #0
   3874c:	e010      	b.n	38770 <_printf_common+0xa8>
   3874e:	3701      	adds	r7, #1
   38750:	68e3      	ldr	r3, [r4, #12]
   38752:	682a      	ldr	r2, [r5, #0]
   38754:	1a9b      	subs	r3, r3, r2
   38756:	429f      	cmp	r7, r3
   38758:	dad2      	bge.n	38700 <_printf_common+0x38>
   3875a:	0022      	movs	r2, r4
   3875c:	2301      	movs	r3, #1
   3875e:	3219      	adds	r2, #25
   38760:	9901      	ldr	r1, [sp, #4]
   38762:	9800      	ldr	r0, [sp, #0]
   38764:	9e08      	ldr	r6, [sp, #32]
   38766:	47b0      	blx	r6
   38768:	1c43      	adds	r3, r0, #1
   3876a:	d1f0      	bne.n	3874e <_printf_common+0x86>
   3876c:	2001      	movs	r0, #1
   3876e:	4240      	negs	r0, r0
   38770:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   38772:	2030      	movs	r0, #48	; 0x30
   38774:	18e1      	adds	r1, r4, r3
   38776:	3143      	adds	r1, #67	; 0x43
   38778:	7008      	strb	r0, [r1, #0]
   3877a:	0021      	movs	r1, r4
   3877c:	1c5a      	adds	r2, r3, #1
   3877e:	3145      	adds	r1, #69	; 0x45
   38780:	7809      	ldrb	r1, [r1, #0]
   38782:	18a2      	adds	r2, r4, r2
   38784:	3243      	adds	r2, #67	; 0x43
   38786:	3302      	adds	r3, #2
   38788:	7011      	strb	r1, [r2, #0]
   3878a:	e7c1      	b.n	38710 <_printf_common+0x48>
   3878c:	0022      	movs	r2, r4
   3878e:	2301      	movs	r3, #1
   38790:	321a      	adds	r2, #26
   38792:	9901      	ldr	r1, [sp, #4]
   38794:	9800      	ldr	r0, [sp, #0]
   38796:	9e08      	ldr	r6, [sp, #32]
   38798:	47b0      	blx	r6
   3879a:	1c43      	adds	r3, r0, #1
   3879c:	d0e6      	beq.n	3876c <_printf_common+0xa4>
   3879e:	3701      	adds	r7, #1
   387a0:	e7d1      	b.n	38746 <_printf_common+0x7e>
	...

000387a4 <_printf_i>:
   387a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   387a6:	b08b      	sub	sp, #44	; 0x2c
   387a8:	9206      	str	r2, [sp, #24]
   387aa:	000a      	movs	r2, r1
   387ac:	3243      	adds	r2, #67	; 0x43
   387ae:	9307      	str	r3, [sp, #28]
   387b0:	9005      	str	r0, [sp, #20]
   387b2:	9204      	str	r2, [sp, #16]
   387b4:	7e0a      	ldrb	r2, [r1, #24]
   387b6:	000c      	movs	r4, r1
   387b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   387ba:	2a6e      	cmp	r2, #110	; 0x6e
   387bc:	d100      	bne.n	387c0 <_printf_i+0x1c>
   387be:	e08f      	b.n	388e0 <_printf_i+0x13c>
   387c0:	d817      	bhi.n	387f2 <_printf_i+0x4e>
   387c2:	2a63      	cmp	r2, #99	; 0x63
   387c4:	d02c      	beq.n	38820 <_printf_i+0x7c>
   387c6:	d808      	bhi.n	387da <_printf_i+0x36>
   387c8:	2a00      	cmp	r2, #0
   387ca:	d100      	bne.n	387ce <_printf_i+0x2a>
   387cc:	e099      	b.n	38902 <_printf_i+0x15e>
   387ce:	2a58      	cmp	r2, #88	; 0x58
   387d0:	d054      	beq.n	3887c <_printf_i+0xd8>
   387d2:	0026      	movs	r6, r4
   387d4:	3642      	adds	r6, #66	; 0x42
   387d6:	7032      	strb	r2, [r6, #0]
   387d8:	e029      	b.n	3882e <_printf_i+0x8a>
   387da:	2a64      	cmp	r2, #100	; 0x64
   387dc:	d001      	beq.n	387e2 <_printf_i+0x3e>
   387de:	2a69      	cmp	r2, #105	; 0x69
   387e0:	d1f7      	bne.n	387d2 <_printf_i+0x2e>
   387e2:	6821      	ldr	r1, [r4, #0]
   387e4:	681a      	ldr	r2, [r3, #0]
   387e6:	0608      	lsls	r0, r1, #24
   387e8:	d523      	bpl.n	38832 <_printf_i+0x8e>
   387ea:	1d11      	adds	r1, r2, #4
   387ec:	6019      	str	r1, [r3, #0]
   387ee:	6815      	ldr	r5, [r2, #0]
   387f0:	e025      	b.n	3883e <_printf_i+0x9a>
   387f2:	2a73      	cmp	r2, #115	; 0x73
   387f4:	d100      	bne.n	387f8 <_printf_i+0x54>
   387f6:	e088      	b.n	3890a <_printf_i+0x166>
   387f8:	d808      	bhi.n	3880c <_printf_i+0x68>
   387fa:	2a6f      	cmp	r2, #111	; 0x6f
   387fc:	d029      	beq.n	38852 <_printf_i+0xae>
   387fe:	2a70      	cmp	r2, #112	; 0x70
   38800:	d1e7      	bne.n	387d2 <_printf_i+0x2e>
   38802:	2220      	movs	r2, #32
   38804:	6809      	ldr	r1, [r1, #0]
   38806:	430a      	orrs	r2, r1
   38808:	6022      	str	r2, [r4, #0]
   3880a:	e003      	b.n	38814 <_printf_i+0x70>
   3880c:	2a75      	cmp	r2, #117	; 0x75
   3880e:	d020      	beq.n	38852 <_printf_i+0xae>
   38810:	2a78      	cmp	r2, #120	; 0x78
   38812:	d1de      	bne.n	387d2 <_printf_i+0x2e>
   38814:	0022      	movs	r2, r4
   38816:	2178      	movs	r1, #120	; 0x78
   38818:	3245      	adds	r2, #69	; 0x45
   3881a:	7011      	strb	r1, [r2, #0]
   3881c:	4a6c      	ldr	r2, [pc, #432]	; (389d0 <_printf_i+0x22c>)
   3881e:	e030      	b.n	38882 <_printf_i+0xde>
   38820:	000e      	movs	r6, r1
   38822:	681a      	ldr	r2, [r3, #0]
   38824:	3642      	adds	r6, #66	; 0x42
   38826:	1d11      	adds	r1, r2, #4
   38828:	6019      	str	r1, [r3, #0]
   3882a:	6813      	ldr	r3, [r2, #0]
   3882c:	7033      	strb	r3, [r6, #0]
   3882e:	2301      	movs	r3, #1
   38830:	e079      	b.n	38926 <_printf_i+0x182>
   38832:	0649      	lsls	r1, r1, #25
   38834:	d5d9      	bpl.n	387ea <_printf_i+0x46>
   38836:	1d11      	adds	r1, r2, #4
   38838:	6019      	str	r1, [r3, #0]
   3883a:	2300      	movs	r3, #0
   3883c:	5ed5      	ldrsh	r5, [r2, r3]
   3883e:	2d00      	cmp	r5, #0
   38840:	da03      	bge.n	3884a <_printf_i+0xa6>
   38842:	232d      	movs	r3, #45	; 0x2d
   38844:	9a04      	ldr	r2, [sp, #16]
   38846:	426d      	negs	r5, r5
   38848:	7013      	strb	r3, [r2, #0]
   3884a:	4b62      	ldr	r3, [pc, #392]	; (389d4 <_printf_i+0x230>)
   3884c:	270a      	movs	r7, #10
   3884e:	9303      	str	r3, [sp, #12]
   38850:	e02f      	b.n	388b2 <_printf_i+0x10e>
   38852:	6820      	ldr	r0, [r4, #0]
   38854:	6819      	ldr	r1, [r3, #0]
   38856:	0605      	lsls	r5, r0, #24
   38858:	d503      	bpl.n	38862 <_printf_i+0xbe>
   3885a:	1d08      	adds	r0, r1, #4
   3885c:	6018      	str	r0, [r3, #0]
   3885e:	680d      	ldr	r5, [r1, #0]
   38860:	e005      	b.n	3886e <_printf_i+0xca>
   38862:	0640      	lsls	r0, r0, #25
   38864:	d5f9      	bpl.n	3885a <_printf_i+0xb6>
   38866:	680d      	ldr	r5, [r1, #0]
   38868:	1d08      	adds	r0, r1, #4
   3886a:	6018      	str	r0, [r3, #0]
   3886c:	b2ad      	uxth	r5, r5
   3886e:	4b59      	ldr	r3, [pc, #356]	; (389d4 <_printf_i+0x230>)
   38870:	2708      	movs	r7, #8
   38872:	9303      	str	r3, [sp, #12]
   38874:	2a6f      	cmp	r2, #111	; 0x6f
   38876:	d018      	beq.n	388aa <_printf_i+0x106>
   38878:	270a      	movs	r7, #10
   3887a:	e016      	b.n	388aa <_printf_i+0x106>
   3887c:	3145      	adds	r1, #69	; 0x45
   3887e:	700a      	strb	r2, [r1, #0]
   38880:	4a54      	ldr	r2, [pc, #336]	; (389d4 <_printf_i+0x230>)
   38882:	9203      	str	r2, [sp, #12]
   38884:	681a      	ldr	r2, [r3, #0]
   38886:	6821      	ldr	r1, [r4, #0]
   38888:	1d10      	adds	r0, r2, #4
   3888a:	6018      	str	r0, [r3, #0]
   3888c:	6815      	ldr	r5, [r2, #0]
   3888e:	0608      	lsls	r0, r1, #24
   38890:	d522      	bpl.n	388d8 <_printf_i+0x134>
   38892:	07cb      	lsls	r3, r1, #31
   38894:	d502      	bpl.n	3889c <_printf_i+0xf8>
   38896:	2320      	movs	r3, #32
   38898:	4319      	orrs	r1, r3
   3889a:	6021      	str	r1, [r4, #0]
   3889c:	2710      	movs	r7, #16
   3889e:	2d00      	cmp	r5, #0
   388a0:	d103      	bne.n	388aa <_printf_i+0x106>
   388a2:	2320      	movs	r3, #32
   388a4:	6822      	ldr	r2, [r4, #0]
   388a6:	439a      	bics	r2, r3
   388a8:	6022      	str	r2, [r4, #0]
   388aa:	0023      	movs	r3, r4
   388ac:	2200      	movs	r2, #0
   388ae:	3343      	adds	r3, #67	; 0x43
   388b0:	701a      	strb	r2, [r3, #0]
   388b2:	6863      	ldr	r3, [r4, #4]
   388b4:	60a3      	str	r3, [r4, #8]
   388b6:	2b00      	cmp	r3, #0
   388b8:	db5c      	blt.n	38974 <_printf_i+0x1d0>
   388ba:	2204      	movs	r2, #4
   388bc:	6821      	ldr	r1, [r4, #0]
   388be:	4391      	bics	r1, r2
   388c0:	6021      	str	r1, [r4, #0]
   388c2:	2d00      	cmp	r5, #0
   388c4:	d158      	bne.n	38978 <_printf_i+0x1d4>
   388c6:	9e04      	ldr	r6, [sp, #16]
   388c8:	2b00      	cmp	r3, #0
   388ca:	d064      	beq.n	38996 <_printf_i+0x1f2>
   388cc:	0026      	movs	r6, r4
   388ce:	9b03      	ldr	r3, [sp, #12]
   388d0:	3642      	adds	r6, #66	; 0x42
   388d2:	781b      	ldrb	r3, [r3, #0]
   388d4:	7033      	strb	r3, [r6, #0]
   388d6:	e05e      	b.n	38996 <_printf_i+0x1f2>
   388d8:	0648      	lsls	r0, r1, #25
   388da:	d5da      	bpl.n	38892 <_printf_i+0xee>
   388dc:	b2ad      	uxth	r5, r5
   388de:	e7d8      	b.n	38892 <_printf_i+0xee>
   388e0:	6809      	ldr	r1, [r1, #0]
   388e2:	681a      	ldr	r2, [r3, #0]
   388e4:	0608      	lsls	r0, r1, #24
   388e6:	d505      	bpl.n	388f4 <_printf_i+0x150>
   388e8:	1d11      	adds	r1, r2, #4
   388ea:	6019      	str	r1, [r3, #0]
   388ec:	6813      	ldr	r3, [r2, #0]
   388ee:	6962      	ldr	r2, [r4, #20]
   388f0:	601a      	str	r2, [r3, #0]
   388f2:	e006      	b.n	38902 <_printf_i+0x15e>
   388f4:	0649      	lsls	r1, r1, #25
   388f6:	d5f7      	bpl.n	388e8 <_printf_i+0x144>
   388f8:	1d11      	adds	r1, r2, #4
   388fa:	6019      	str	r1, [r3, #0]
   388fc:	6813      	ldr	r3, [r2, #0]
   388fe:	8aa2      	ldrh	r2, [r4, #20]
   38900:	801a      	strh	r2, [r3, #0]
   38902:	2300      	movs	r3, #0
   38904:	9e04      	ldr	r6, [sp, #16]
   38906:	6123      	str	r3, [r4, #16]
   38908:	e054      	b.n	389b4 <_printf_i+0x210>
   3890a:	681a      	ldr	r2, [r3, #0]
   3890c:	1d11      	adds	r1, r2, #4
   3890e:	6019      	str	r1, [r3, #0]
   38910:	6816      	ldr	r6, [r2, #0]
   38912:	2100      	movs	r1, #0
   38914:	6862      	ldr	r2, [r4, #4]
   38916:	0030      	movs	r0, r6
   38918:	f000 f922 	bl	38b60 <memchr>
   3891c:	2800      	cmp	r0, #0
   3891e:	d001      	beq.n	38924 <_printf_i+0x180>
   38920:	1b80      	subs	r0, r0, r6
   38922:	6060      	str	r0, [r4, #4]
   38924:	6863      	ldr	r3, [r4, #4]
   38926:	6123      	str	r3, [r4, #16]
   38928:	2300      	movs	r3, #0
   3892a:	9a04      	ldr	r2, [sp, #16]
   3892c:	7013      	strb	r3, [r2, #0]
   3892e:	e041      	b.n	389b4 <_printf_i+0x210>
   38930:	6923      	ldr	r3, [r4, #16]
   38932:	0032      	movs	r2, r6
   38934:	9906      	ldr	r1, [sp, #24]
   38936:	9805      	ldr	r0, [sp, #20]
   38938:	9d07      	ldr	r5, [sp, #28]
   3893a:	47a8      	blx	r5
   3893c:	1c43      	adds	r3, r0, #1
   3893e:	d043      	beq.n	389c8 <_printf_i+0x224>
   38940:	6823      	ldr	r3, [r4, #0]
   38942:	2500      	movs	r5, #0
   38944:	079b      	lsls	r3, r3, #30
   38946:	d40f      	bmi.n	38968 <_printf_i+0x1c4>
   38948:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3894a:	68e0      	ldr	r0, [r4, #12]
   3894c:	4298      	cmp	r0, r3
   3894e:	da3d      	bge.n	389cc <_printf_i+0x228>
   38950:	0018      	movs	r0, r3
   38952:	e03b      	b.n	389cc <_printf_i+0x228>
   38954:	0022      	movs	r2, r4
   38956:	2301      	movs	r3, #1
   38958:	3219      	adds	r2, #25
   3895a:	9906      	ldr	r1, [sp, #24]
   3895c:	9805      	ldr	r0, [sp, #20]
   3895e:	9e07      	ldr	r6, [sp, #28]
   38960:	47b0      	blx	r6
   38962:	1c43      	adds	r3, r0, #1
   38964:	d030      	beq.n	389c8 <_printf_i+0x224>
   38966:	3501      	adds	r5, #1
   38968:	68e3      	ldr	r3, [r4, #12]
   3896a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3896c:	1a9b      	subs	r3, r3, r2
   3896e:	429d      	cmp	r5, r3
   38970:	dbf0      	blt.n	38954 <_printf_i+0x1b0>
   38972:	e7e9      	b.n	38948 <_printf_i+0x1a4>
   38974:	2d00      	cmp	r5, #0
   38976:	d0a9      	beq.n	388cc <_printf_i+0x128>
   38978:	9e04      	ldr	r6, [sp, #16]
   3897a:	0028      	movs	r0, r5
   3897c:	0039      	movs	r1, r7
   3897e:	f7fc f9bf 	bl	34d00 <__aeabi_uidivmod>
   38982:	9b03      	ldr	r3, [sp, #12]
   38984:	3e01      	subs	r6, #1
   38986:	5c5b      	ldrb	r3, [r3, r1]
   38988:	0028      	movs	r0, r5
   3898a:	7033      	strb	r3, [r6, #0]
   3898c:	0039      	movs	r1, r7
   3898e:	f7fc f931 	bl	34bf4 <__udivsi3>
   38992:	1e05      	subs	r5, r0, #0
   38994:	d1f1      	bne.n	3897a <_printf_i+0x1d6>
   38996:	2f08      	cmp	r7, #8
   38998:	d109      	bne.n	389ae <_printf_i+0x20a>
   3899a:	6823      	ldr	r3, [r4, #0]
   3899c:	07db      	lsls	r3, r3, #31
   3899e:	d506      	bpl.n	389ae <_printf_i+0x20a>
   389a0:	6863      	ldr	r3, [r4, #4]
   389a2:	6922      	ldr	r2, [r4, #16]
   389a4:	4293      	cmp	r3, r2
   389a6:	dc02      	bgt.n	389ae <_printf_i+0x20a>
   389a8:	2330      	movs	r3, #48	; 0x30
   389aa:	3e01      	subs	r6, #1
   389ac:	7033      	strb	r3, [r6, #0]
   389ae:	9b04      	ldr	r3, [sp, #16]
   389b0:	1b9b      	subs	r3, r3, r6
   389b2:	6123      	str	r3, [r4, #16]
   389b4:	9b07      	ldr	r3, [sp, #28]
   389b6:	aa09      	add	r2, sp, #36	; 0x24
   389b8:	9300      	str	r3, [sp, #0]
   389ba:	0021      	movs	r1, r4
   389bc:	9b06      	ldr	r3, [sp, #24]
   389be:	9805      	ldr	r0, [sp, #20]
   389c0:	f7ff fe82 	bl	386c8 <_printf_common>
   389c4:	1c43      	adds	r3, r0, #1
   389c6:	d1b3      	bne.n	38930 <_printf_i+0x18c>
   389c8:	2001      	movs	r0, #1
   389ca:	4240      	negs	r0, r0
   389cc:	b00b      	add	sp, #44	; 0x2c
   389ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   389d0:	0003d310 	.word	0x0003d310
   389d4:	0003d2ff 	.word	0x0003d2ff

000389d8 <__sread>:
   389d8:	b570      	push	{r4, r5, r6, lr}
   389da:	000c      	movs	r4, r1
   389dc:	250e      	movs	r5, #14
   389de:	5f49      	ldrsh	r1, [r1, r5]
   389e0:	f000 f8f0 	bl	38bc4 <_read_r>
   389e4:	2800      	cmp	r0, #0
   389e6:	db03      	blt.n	389f0 <__sread+0x18>
   389e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   389ea:	181b      	adds	r3, r3, r0
   389ec:	6563      	str	r3, [r4, #84]	; 0x54
   389ee:	bd70      	pop	{r4, r5, r6, pc}
   389f0:	89a3      	ldrh	r3, [r4, #12]
   389f2:	4a02      	ldr	r2, [pc, #8]	; (389fc <__sread+0x24>)
   389f4:	4013      	ands	r3, r2
   389f6:	81a3      	strh	r3, [r4, #12]
   389f8:	e7f9      	b.n	389ee <__sread+0x16>
   389fa:	46c0      	nop			; (mov r8, r8)
   389fc:	ffffefff 	.word	0xffffefff

00038a00 <__swrite>:
   38a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38a02:	001f      	movs	r7, r3
   38a04:	898b      	ldrh	r3, [r1, #12]
   38a06:	0005      	movs	r5, r0
   38a08:	000c      	movs	r4, r1
   38a0a:	0016      	movs	r6, r2
   38a0c:	05db      	lsls	r3, r3, #23
   38a0e:	d505      	bpl.n	38a1c <__swrite+0x1c>
   38a10:	230e      	movs	r3, #14
   38a12:	5ec9      	ldrsh	r1, [r1, r3]
   38a14:	2200      	movs	r2, #0
   38a16:	2302      	movs	r3, #2
   38a18:	f000 f88e 	bl	38b38 <_lseek_r>
   38a1c:	89a3      	ldrh	r3, [r4, #12]
   38a1e:	4a05      	ldr	r2, [pc, #20]	; (38a34 <__swrite+0x34>)
   38a20:	0028      	movs	r0, r5
   38a22:	4013      	ands	r3, r2
   38a24:	81a3      	strh	r3, [r4, #12]
   38a26:	0032      	movs	r2, r6
   38a28:	230e      	movs	r3, #14
   38a2a:	5ee1      	ldrsh	r1, [r4, r3]
   38a2c:	003b      	movs	r3, r7
   38a2e:	f000 f839 	bl	38aa4 <_write_r>
   38a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38a34:	ffffefff 	.word	0xffffefff

00038a38 <__sseek>:
   38a38:	b570      	push	{r4, r5, r6, lr}
   38a3a:	000c      	movs	r4, r1
   38a3c:	250e      	movs	r5, #14
   38a3e:	5f49      	ldrsh	r1, [r1, r5]
   38a40:	f000 f87a 	bl	38b38 <_lseek_r>
   38a44:	89a3      	ldrh	r3, [r4, #12]
   38a46:	1c42      	adds	r2, r0, #1
   38a48:	d103      	bne.n	38a52 <__sseek+0x1a>
   38a4a:	4a05      	ldr	r2, [pc, #20]	; (38a60 <__sseek+0x28>)
   38a4c:	4013      	ands	r3, r2
   38a4e:	81a3      	strh	r3, [r4, #12]
   38a50:	bd70      	pop	{r4, r5, r6, pc}
   38a52:	2280      	movs	r2, #128	; 0x80
   38a54:	0152      	lsls	r2, r2, #5
   38a56:	4313      	orrs	r3, r2
   38a58:	81a3      	strh	r3, [r4, #12]
   38a5a:	6560      	str	r0, [r4, #84]	; 0x54
   38a5c:	e7f8      	b.n	38a50 <__sseek+0x18>
   38a5e:	46c0      	nop			; (mov r8, r8)
   38a60:	ffffefff 	.word	0xffffefff

00038a64 <__sclose>:
   38a64:	b510      	push	{r4, lr}
   38a66:	230e      	movs	r3, #14
   38a68:	5ec9      	ldrsh	r1, [r1, r3]
   38a6a:	f000 f82f 	bl	38acc <_close_r>
   38a6e:	bd10      	pop	{r4, pc}

00038a70 <strchr>:
   38a70:	b2c9      	uxtb	r1, r1
   38a72:	7803      	ldrb	r3, [r0, #0]
   38a74:	2b00      	cmp	r3, #0
   38a76:	d004      	beq.n	38a82 <strchr+0x12>
   38a78:	4299      	cmp	r1, r3
   38a7a:	d100      	bne.n	38a7e <strchr+0xe>
   38a7c:	4770      	bx	lr
   38a7e:	3001      	adds	r0, #1
   38a80:	e7f7      	b.n	38a72 <strchr+0x2>
   38a82:	424b      	negs	r3, r1
   38a84:	4159      	adcs	r1, r3
   38a86:	4249      	negs	r1, r1
   38a88:	4008      	ands	r0, r1
   38a8a:	e7f7      	b.n	38a7c <strchr+0xc>

00038a8c <__ascii_wctomb>:
   38a8c:	1e0b      	subs	r3, r1, #0
   38a8e:	d004      	beq.n	38a9a <__ascii_wctomb+0xe>
   38a90:	2aff      	cmp	r2, #255	; 0xff
   38a92:	d904      	bls.n	38a9e <__ascii_wctomb+0x12>
   38a94:	238a      	movs	r3, #138	; 0x8a
   38a96:	6003      	str	r3, [r0, #0]
   38a98:	3b8b      	subs	r3, #139	; 0x8b
   38a9a:	0018      	movs	r0, r3
   38a9c:	4770      	bx	lr
   38a9e:	700a      	strb	r2, [r1, #0]
   38aa0:	2301      	movs	r3, #1
   38aa2:	e7fa      	b.n	38a9a <__ascii_wctomb+0xe>

00038aa4 <_write_r>:
   38aa4:	b570      	push	{r4, r5, r6, lr}
   38aa6:	0005      	movs	r5, r0
   38aa8:	0008      	movs	r0, r1
   38aaa:	0011      	movs	r1, r2
   38aac:	2200      	movs	r2, #0
   38aae:	4c06      	ldr	r4, [pc, #24]	; (38ac8 <_write_r+0x24>)
   38ab0:	6022      	str	r2, [r4, #0]
   38ab2:	001a      	movs	r2, r3
   38ab4:	f7f4 fc24 	bl	2d300 <_write>
   38ab8:	1c43      	adds	r3, r0, #1
   38aba:	d103      	bne.n	38ac4 <_write_r+0x20>
   38abc:	6823      	ldr	r3, [r4, #0]
   38abe:	2b00      	cmp	r3, #0
   38ac0:	d000      	beq.n	38ac4 <_write_r+0x20>
   38ac2:	602b      	str	r3, [r5, #0]
   38ac4:	bd70      	pop	{r4, r5, r6, pc}
   38ac6:	46c0      	nop			; (mov r8, r8)
   38ac8:	20005ae8 	.word	0x20005ae8

00038acc <_close_r>:
   38acc:	2300      	movs	r3, #0
   38ace:	b570      	push	{r4, r5, r6, lr}
   38ad0:	4c06      	ldr	r4, [pc, #24]	; (38aec <_close_r+0x20>)
   38ad2:	0005      	movs	r5, r0
   38ad4:	0008      	movs	r0, r1
   38ad6:	6023      	str	r3, [r4, #0]
   38ad8:	f7f4 fc66 	bl	2d3a8 <_close>
   38adc:	1c43      	adds	r3, r0, #1
   38ade:	d103      	bne.n	38ae8 <_close_r+0x1c>
   38ae0:	6823      	ldr	r3, [r4, #0]
   38ae2:	2b00      	cmp	r3, #0
   38ae4:	d000      	beq.n	38ae8 <_close_r+0x1c>
   38ae6:	602b      	str	r3, [r5, #0]
   38ae8:	bd70      	pop	{r4, r5, r6, pc}
   38aea:	46c0      	nop			; (mov r8, r8)
   38aec:	20005ae8 	.word	0x20005ae8

00038af0 <_fstat_r>:
   38af0:	2300      	movs	r3, #0
   38af2:	b570      	push	{r4, r5, r6, lr}
   38af4:	4c06      	ldr	r4, [pc, #24]	; (38b10 <_fstat_r+0x20>)
   38af6:	0005      	movs	r5, r0
   38af8:	0008      	movs	r0, r1
   38afa:	0011      	movs	r1, r2
   38afc:	6023      	str	r3, [r4, #0]
   38afe:	f7f4 fc5d 	bl	2d3bc <_fstat>
   38b02:	1c43      	adds	r3, r0, #1
   38b04:	d103      	bne.n	38b0e <_fstat_r+0x1e>
   38b06:	6823      	ldr	r3, [r4, #0]
   38b08:	2b00      	cmp	r3, #0
   38b0a:	d000      	beq.n	38b0e <_fstat_r+0x1e>
   38b0c:	602b      	str	r3, [r5, #0]
   38b0e:	bd70      	pop	{r4, r5, r6, pc}
   38b10:	20005ae8 	.word	0x20005ae8

00038b14 <_isatty_r>:
   38b14:	2300      	movs	r3, #0
   38b16:	b570      	push	{r4, r5, r6, lr}
   38b18:	4c06      	ldr	r4, [pc, #24]	; (38b34 <_isatty_r+0x20>)
   38b1a:	0005      	movs	r5, r0
   38b1c:	0008      	movs	r0, r1
   38b1e:	6023      	str	r3, [r4, #0]
   38b20:	f7f4 fc5a 	bl	2d3d8 <_isatty>
   38b24:	1c43      	adds	r3, r0, #1
   38b26:	d103      	bne.n	38b30 <_isatty_r+0x1c>
   38b28:	6823      	ldr	r3, [r4, #0]
   38b2a:	2b00      	cmp	r3, #0
   38b2c:	d000      	beq.n	38b30 <_isatty_r+0x1c>
   38b2e:	602b      	str	r3, [r5, #0]
   38b30:	bd70      	pop	{r4, r5, r6, pc}
   38b32:	46c0      	nop			; (mov r8, r8)
   38b34:	20005ae8 	.word	0x20005ae8

00038b38 <_lseek_r>:
   38b38:	b570      	push	{r4, r5, r6, lr}
   38b3a:	0005      	movs	r5, r0
   38b3c:	0008      	movs	r0, r1
   38b3e:	0011      	movs	r1, r2
   38b40:	2200      	movs	r2, #0
   38b42:	4c06      	ldr	r4, [pc, #24]	; (38b5c <_lseek_r+0x24>)
   38b44:	6022      	str	r2, [r4, #0]
   38b46:	001a      	movs	r2, r3
   38b48:	f7f4 fc4f 	bl	2d3ea <_lseek>
   38b4c:	1c43      	adds	r3, r0, #1
   38b4e:	d103      	bne.n	38b58 <_lseek_r+0x20>
   38b50:	6823      	ldr	r3, [r4, #0]
   38b52:	2b00      	cmp	r3, #0
   38b54:	d000      	beq.n	38b58 <_lseek_r+0x20>
   38b56:	602b      	str	r3, [r5, #0]
   38b58:	bd70      	pop	{r4, r5, r6, pc}
   38b5a:	46c0      	nop			; (mov r8, r8)
   38b5c:	20005ae8 	.word	0x20005ae8

00038b60 <memchr>:
   38b60:	b2c9      	uxtb	r1, r1
   38b62:	1882      	adds	r2, r0, r2
   38b64:	4290      	cmp	r0, r2
   38b66:	d101      	bne.n	38b6c <memchr+0xc>
   38b68:	2000      	movs	r0, #0
   38b6a:	4770      	bx	lr
   38b6c:	7803      	ldrb	r3, [r0, #0]
   38b6e:	428b      	cmp	r3, r1
   38b70:	d0fb      	beq.n	38b6a <memchr+0xa>
   38b72:	3001      	adds	r0, #1
   38b74:	e7f6      	b.n	38b64 <memchr+0x4>

00038b76 <_realloc_r>:
   38b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38b78:	0007      	movs	r7, r0
   38b7a:	000d      	movs	r5, r1
   38b7c:	0016      	movs	r6, r2
   38b7e:	2900      	cmp	r1, #0
   38b80:	d105      	bne.n	38b8e <_realloc_r+0x18>
   38b82:	0011      	movs	r1, r2
   38b84:	f7fe fe9e 	bl	378c4 <_malloc_r>
   38b88:	0004      	movs	r4, r0
   38b8a:	0020      	movs	r0, r4
   38b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38b8e:	2a00      	cmp	r2, #0
   38b90:	d103      	bne.n	38b9a <_realloc_r+0x24>
   38b92:	f7fe fe4d 	bl	37830 <_free_r>
   38b96:	0034      	movs	r4, r6
   38b98:	e7f7      	b.n	38b8a <_realloc_r+0x14>
   38b9a:	f000 f827 	bl	38bec <_malloc_usable_size_r>
   38b9e:	002c      	movs	r4, r5
   38ba0:	4286      	cmp	r6, r0
   38ba2:	d9f2      	bls.n	38b8a <_realloc_r+0x14>
   38ba4:	0031      	movs	r1, r6
   38ba6:	0038      	movs	r0, r7
   38ba8:	f7fe fe8c 	bl	378c4 <_malloc_r>
   38bac:	1e04      	subs	r4, r0, #0
   38bae:	d0ec      	beq.n	38b8a <_realloc_r+0x14>
   38bb0:	0029      	movs	r1, r5
   38bb2:	0032      	movs	r2, r6
   38bb4:	f7fe fe18 	bl	377e8 <memcpy>
   38bb8:	0029      	movs	r1, r5
   38bba:	0038      	movs	r0, r7
   38bbc:	f7fe fe38 	bl	37830 <_free_r>
   38bc0:	e7e3      	b.n	38b8a <_realloc_r+0x14>
	...

00038bc4 <_read_r>:
   38bc4:	b570      	push	{r4, r5, r6, lr}
   38bc6:	0005      	movs	r5, r0
   38bc8:	0008      	movs	r0, r1
   38bca:	0011      	movs	r1, r2
   38bcc:	2200      	movs	r2, #0
   38bce:	4c06      	ldr	r4, [pc, #24]	; (38be8 <_read_r+0x24>)
   38bd0:	6022      	str	r2, [r4, #0]
   38bd2:	001a      	movs	r2, r3
   38bd4:	f7f4 fb6a 	bl	2d2ac <_read>
   38bd8:	1c43      	adds	r3, r0, #1
   38bda:	d103      	bne.n	38be4 <_read_r+0x20>
   38bdc:	6823      	ldr	r3, [r4, #0]
   38bde:	2b00      	cmp	r3, #0
   38be0:	d000      	beq.n	38be4 <_read_r+0x20>
   38be2:	602b      	str	r3, [r5, #0]
   38be4:	bd70      	pop	{r4, r5, r6, pc}
   38be6:	46c0      	nop			; (mov r8, r8)
   38be8:	20005ae8 	.word	0x20005ae8

00038bec <_malloc_usable_size_r>:
   38bec:	1f0b      	subs	r3, r1, #4
   38bee:	681b      	ldr	r3, [r3, #0]
   38bf0:	1f18      	subs	r0, r3, #4
   38bf2:	2b00      	cmp	r3, #0
   38bf4:	da01      	bge.n	38bfa <_malloc_usable_size_r+0xe>
   38bf6:	580b      	ldr	r3, [r1, r0]
   38bf8:	18c0      	adds	r0, r0, r3
   38bfa:	4770      	bx	lr
   38bfc:	04020100 	.word	0x04020100
   38c00:	00001008 	.word	0x00001008
   38c04:	7fffffff 	.word	0x7fffffff
   38c08:	7fffffff 	.word	0x7fffffff
   38c0c:	7fffffff 	.word	0x7fffffff
   38c10:	7fffffff 	.word	0x7fffffff
   38c14:	7fffffff 	.word	0x7fffffff
   38c18:	7eb851ea 	.word	0x7eb851ea
   38c1c:	7fffffff 	.word	0x7fffffff
   38c20:	7ef9db21 	.word	0x7ef9db21
   38c24:	7fffffff 	.word	0x7fffffff
   38c28:	7fffffff 	.word	0x7fffffff
   38c2c:	7fbe76c7 	.word	0x7fbe76c7
   38c30:	7f5c28f4 	.word	0x7f5c28f4
   38c34:	7fffffff 	.word	0x7fffffff
   38c38:	7eb851ea 	.word	0x7eb851ea
   38c3c:	7fffffff 	.word	0x7fffffff
   38c40:	7fffffff 	.word	0x7fffffff
   38c44:	f4240000 	.word	0xf4240000
   38c48:	7a120000 	.word	0x7a120000
   38c4c:	3d090000 	.word	0x3d090000
   38c50:	1e848000 	.word	0x1e848000
   38c54:	0f3e58ff 	.word	0x0f3e58ff
   38c58:	07938c54 	.word	0x07938c54
   38c5c:	03d09000 	.word	0x03d09000
   38c60:	01ec3810 	.word	0x01ec3810
   38c64:	00f46290 	.word	0x00f46290
   38c68:	007a1200 	.word	0x007a1200
   38c6c:	003d0900 	.word	0x003d0900
   38c70:	001e8480 	.word	0x001e8480
   38c74:	000f4240 	.word	0x000f4240
   38c78:	0007a120 	.word	0x0007a120
   38c7c:	0003d090 	.word	0x0003d090
   38c80:	0001e848 	.word	0x0001e848

00038c84 <pcWelcomeMessage>:
   38c84:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   38c94:	20657079 706c6548 206f7420 77656976     ype Help to view
   38ca4:	6c206120 20747369 7220666f 73696765      a list of regis
   38cb4:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   38cc4:	0000000a 00756d69 3a756d69 74655220     ....imu.imu: Ret
   38cd4:	736e7275 76206120 65756c61 6f726620     urns a value fro
   38ce4:	6874206d 4d492065 000a0d55 00007766     m the IMU...fw..
   38cf4:	203a7766 6e776f44 64616f6c 66206120     fw: Download a f
   38d04:	20656c69 20646e61 66726570 206d726f     ile and perform 
   38d14:	46206e61 70752057 65746164 00000a0d     an FW update....
   38d24:	00706172 3a706172 69684320 6573656e     rap.rap: Chinese
   38d34:	73654220 61522074 72657070 00000a0d      Best Rapper....
   38d44:	636c6c63 00000064 636c6c63 43203a64     cllcd...cllcd: C
   38d54:	7261656c 54465420 72635320 0d6e6565     lear TFT Screen.
   38d64:	0000000a 6b636f6c 00000000 6b636f6c     ....lock....lock
   38d74:	6f6c203a 74206b63 64206568 21726f6f     : lock the door!
   38d84:	00000a0d 6f6c6e75 00006b63 6f6c6e75     ....unlock..unlo
   38d94:	203a6b63 6f6c6e75 74206b63 64206568     ck: unlock the d
   38da4:	21726f6f 00000a0d 65736572 00000074     oor!....reset...
   38db4:	65736572 52203a74 74657365 68742073     reset: Resets th
   38dc4:	65642065 65636976 00000a0d 64746567     e device....getd
   38dd4:	61747369 0065636e 64746567 61747369     istance.getdista
   38de4:	3a65636e 74655220 736e7275 65687420     nce: Returns the
   38df4:	73696420 636e6174 72662065 74206d6f      distance from t
   38e04:	55206568 30312d53 65532030 726f736e     he US-100 Sensor
   38e14:	000a0d2e 656d6167 00000000 656d6167     ....game....game
   38e24:	6553203a 2073646e 6d6d7564 61672079     : Sends dummy ga
   38e34:	6420656d 0d617461 0000000a 00633269     me data.....i2c.
   38e44:	3a633269 61635320 4920736e 62204332     i2c: Scans I2C b
   38e54:	0a0d7375 00000000 00656d62 3a656d62     us......bme.bme:
   38e64:	69725020 6f20746e 62207475 7320656d      Print out bme s
   38e74:	6f736e65 61642072 0a0d6174 00000000     ensor data......
   38e84:	00736c63 3a736c63 656c4320 20737261     cls.cls: Clears 
   38e94:	20656874 6d726574 6c616e69 72637320     the terminal scr
   38ea4:	0d6e6565 0000000a 6c756f43 6f6e2064     een.....Could no
   38eb4:	6c612074 61636f6c 73206574 70616d65     t allocate semap
   38ec4:	65726f68 00000a0d 00000a0d 0000616f     hore........oa..
   38ed4:	325b6325 003e0d4b 00082008 65636341     %c[2K.>.. ..Acce
   38ee4:	6172656c 6e6f6974 676d5b20 20583a5d     leration [mg]:X 
   38ef4:	59096425 09642520 6425205a 00000a0d     %d.Y %d.Z %d....
   38f04:	64206f4e 20617461 64616572 53202179     No data ready! S
   38f14:	69646e65 6420676e 796d6d75 74616420     ending dummy dat
   38f24:	0a0d2061 00000000 325b6325 0000004a     a ......%c[2J...
   38f34:	64757453 73746e65 206f7420 6c6c6966     Students to fill
   38f44:	74756f20 00000021 736e6553 4520726f      out!...Sensor E
   38f54:	726f7272 21642520 00000a0d 74736944     rror %d!....Dist
   38f64:	65636e61 6425203a 0d6d6d20 0000000a     ance: %d mm.....
   38f74:	74736944 65636e61 74614420 514d2061     Distance Data MQ
   38f84:	50205454 0d74736f 0000000a 6d6d7544     TT Post.....Dumm
   38f94:	61472079 4420656d 20617461 5454514d     y Game Data MQTT
   38fa4:	736f5020 000a0d74 31202030 20322020      Post...0  1  2 
   38fb4:	20203320 35202034 20362020 20203720      3  4  5  6  7  
   38fc4:	39202038 20612020 20206220 64202063     8  9  a  b  c  d
   38fd4:	20652020 0a0d6620 00000000 78323025       e  f......%02x
   38fe4:	0000203a 78323025 00000020              : ..%02x ...

00038ff0 <xImuGetCommand>:
   38ff0:	00038cc8 00038ccc 00014fc9 00000000     .........O......

00039000 <xOTAUCommand>:
   39000:	00038cf0 00038cf4 00015175 00000000     ........uQ......

00039010 <xLock>:
   39010:	00038d68 00038d70 000152dd 00000000     h...p....R......

00039020 <xUNLock>:
   39020:	00038d88 00038d90 000152fd 00000000     .........R......

00039030 <xResetCommand>:
   39030:	00038dac 00038db4 00015195 00000000     .........Q......

00039040 <xI2cScan>:
   39040:	00038e40 00038e44 000151b5 00000000     @...D....Q......

00039050 <xBME>:
   39050:	00038e5c 00038e60 0001531d 00000000     \...`....S......

00039060 <xClearScreen>:
   39060:	00038e84 00038e88 0001512d 00000000     ........-Q......
   39070:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   39080:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   39090:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   390a0:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   390b0:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   390c0:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   390d0:	64656d75 6d616720 61702065 74656b63     umed game packet
   390e0:	000a0d21 746e6f43 206c6f72 65726854     !...Control Thre
   390f0:	203a6461 6c756f43 6f6e2064 65732074     ad: Could not se
   39100:	6720646e 20656d61 6b636170 0d217465     nd game packet!.
   39110:	0000000a                                ....

00039114 <ASCII>:
   39114:	00000000 5f000000 07000000 14000700     ......._........
   39124:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   39134:	00502255 00000305 41221c00 22410000     U"P......."A..A"
   39144:	0814001c 0814083e 08083e08 00305000     ....>....>...P0.
   39154:	08080800 60000808 20000060 02040810     .......``.. ....
   39164:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
   39174:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
   39184:	01304949 03050971 49494936 49490636     II0.q...6III6.II
   39194:	36001e29 00000036 00003656 41221408     )..66...V6...."A
   391a4:	14141400 41001414 02081422 06095101     .......A"....Q..
   391b4:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
   391c4:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
   391d4:	3e010909 7a494941 0808087f 7f41007f     ...>AIIz......A.
   391e4:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   391f4:	0c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   39204:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
   39214:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
   39224:	3f1f2040 3f403840 14081463 70080763     @ .?@8@?c...c..p
   39234:	51610708 00434549 0041417f 10080402     ..aQIEC..AA.....
   39244:	41410020 0204007f 40040201 40404040      .AA.......@@@@@
   39254:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
   39264:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
   39274:	0c020109 3e525252 0404087f 7d440078     ....RRR>....x.D}
   39284:	40200040 7f003d44 00442810 407f4100     @. @D=...(D..A.@
   39294:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
   392a4:	1414147c 14140808 087c7c18 48080404     |........||....H
   392b4:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
   392c4:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
   392d4:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
   392e4:	36410000 08100008 00081008 06090906     ..A6............
   392f4:	636c6557 20656d6f 656d6f68 00000021     Welcome home!...
   39304:	49464957 20736920 6e6e6f43 65746365     WIFI is Connecte
   39314:	20202164 00002020 63746157 676f4468     d!    ..WatchDog
   39324:	61745320 3a737574 636f4c20 2064656b      Status: Locked 
   39334:	00000020 63746157 676f4468 61745320      ...WatchDog Sta
   39344:	3a737574 6c6e5520 656b636f 00000064     tus: Unlocked...
   39354:	706d6554 74617265 3a657275 20642520     Temperature: %d 
   39364:	00000043 696d7548 79746964 6425203a     C...Humidity: %d
   39374:	00252520 73657250 65727573 6425203a      %%.Pressure: %d
   39384:	61506820 00000000 6b6f6d53 25203a65      hPa....Smoke: %
   39394:	25252064 00000000 54204955 206b7361     d %%....UI Task 
   393a4:	72617453 21646574 00000000              Started!....

000393b0 <main_mqtt_broker>:
   393b0:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   393c0:	0000006d 64333025 00000000 72617473     m...%03d....star
   393d0:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   393e0:	726f7473 20656761 20746f6e 64616572     storage not read
   393f0:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   39400:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   39410:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   39420:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   39430:	203a6461 75716572 20747365 73207369     ad: request is s
   39440:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   39450:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   39460:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   39470:	726c6120 79646165 000a0d2e 72617473      already....star
   39480:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   39490:	20676e69 50545448 71657220 74736575     ing HTTP request
   394a0:	0d2e2e2e 0000000a 70747468 372f2f3a     ........http://7
   394b0:	33322e34 30322e35 35322e32 53452f31     4.235.202.251/ES
   394c0:	36313545 49414d5f 57465f4e 6e69622e     E516_MAIN_FW.bin
   394d0:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   394e0:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   394f0:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   39500:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   39510:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   39520:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   39530:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   39540:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   39550:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   39560:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   39570:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   39580:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   39590:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   395a0:	656b6361 66203a74 20656c69 74697277     acket: file writ
   395b0:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   395c0:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   395d0:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   395e0:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   395f0:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   39600:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   39610:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   39620:	64616f6c 73206465 65636375 75667373     loaded successfu
   39630:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   39640:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   39650:	63205054 6e65696c 6f732074 74656b63     TP client socket
   39660:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   39670:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   39680:	6b636162 6572203a 73657571 6f632074     back: request co
   39690:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   396a0:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   396b0:	6572203a 76696563 72206465 6f707365     : received respo
   396c0:	2065736e 64207525 20617461 657a6973     nse %u data size
   396d0:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   396e0:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   396f0:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   39700:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   39710:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   39720:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   39730:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   39740:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   39750:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   39760:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   39770:	5443454e 0a0d4445 00000000 69666957     NECTED......Wifi
   39780:	20736920 20746f6e 6e6e6f43 65746365      is not Connecte
   39790:	00002164 6e6e6570 30343731 69666977     d!..penn1740wifi
   397a0:	00000000 50726941 4e6e6e65 442d7465     ....AirPennNet-D
   397b0:	63697665 00000065 69666977 3a62635f     evice...wifi_cb:
   397c0:	20504920 72646461 20737365 25207369      IP address is %
   397d0:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   397e0:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   397f0:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   39800:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   39810:	6c70203a 65736165 756c7020 6e612067     : please plug an
   39820:	2f445320 20434d4d 64726163 206e6920      SD/MMC card in 
   39830:	746f6c73 0d2e2e2e 0000000a 74696e69     slot........init
   39840:	6f74735f 65676172 4453203a 72614320     _storage: SD Car
   39850:	6e692064 6c617473 6166206c 64656c69     d install failed
   39860:	000a0d2e 74696e69 6f74735f 65676172     ....init_storage
   39870:	7274203a 6e752079 67756c70 646e6120     : try unplug and
   39880:	2d657220 67756c70 65687420 72616320      re-plug the car
   39890:	0a0d2e64 00000000 74696e69 6f74735f     d.......init_sto
   398a0:	65676172 6f6d203a 69746e75 5320676e     rage: mounting S
   398b0:	61632044 2e2e6472 000a0d2e 74696e69     D card......init
   398c0:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   398d0:	6f6d2064 20746e75 6c696166 20216465     d mount failed! 
   398e0:	73657228 29642520 00000a0d 74696e69     (res %d)....init
   398f0:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   39900:	6f6d2064 20746e75 0d2e4b4f 0000000a     d mount OK......
   39910:	666e6f63 72756769 74685f65 635f7074     configure_http_c
   39920:	6e65696c 48203a74 20505454 65696c63     lient: HTTP clie
   39930:	6920746e 6974696e 7a696c61 6f697461     nt initializatio
   39940:	6166206e 64656c69 72282021 25207365     n failed! (res %
   39950:	0a0d2964 00000000 25200a0d 00732a2e     d)........ %.*s.
   39960:	28626772 00000000 47520a0d 64252042     rgb(......RGB %d
   39970:	20642520 0a0d6425 00000000 43544157      %d %d......WATC
   39980:	474f4448 5f57465f 41445055 00004554     HDOG_FW_UPDATE..
   39990:	65757274 00000000 74530a0d 20747261     true......Start 
   399a0:	6e776f44 64616f6c 21676e69 00000a0d     Downloading!....
   399b0:	43544157 474f4448 5245535f 00004f56     WATCHDOG_SERVO..
   399c0:	736c6166 00000065 6167227b 3a22656d     false...{"game":
   399d0:	0000005b 61470a0d 6d20656d 61737365     [.....Game messa
   399e0:	72206567 69656365 21646576 00000a0d     ge received!....
   399f0:	732a2e25 00000000 61500a0d 64657372     %.*s......Parsed
   39a00:	6d6f4320 646e616d 0000203a 002c6425      Command: ..%d,.
   39a10:	65530a0d 7020746e 2079616c 63206f74     ..Sent play to c
   39a20:	72746e6f 0d216c6f 0000000a 61470a0d     ontrol!.......Ga
   39a30:	6d20656d 61737365 72206567 69656365     me message recei
   39a40:	20646576 20747562 20746f6e 65646e75     ved but not unde
   39a50:	6f747372 0d21646f 0000000a 4d490a0d     rstood!.......IM
   39a60:	6f742055 20636970 65636572 64657669     U topic received
   39a70:	000a0d21 4d420a0d 6f742045 20636970     !.....BME topic 
   39a80:	65636572 64657669 000a0d21 69440a0d     received!.....Di
   39a90:	6e617473 74206563 6369706f 63657220     stance topic rec
   39aa0:	65766965 0a0d2164 00000000 203e3e20     eived!...... >> 
   39ab0:	00000000 4c5f3150 455f4445 31354553     ....P1_LED_ESE51
   39ac0:	30545f36 00000000 6f430a0d 63656e6e     6_T0......Connec
   39ad0:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   39ae0:	0000002e 657a694c 36373839 32333435     ....Lize98765432
   39af0:	00000031 00706f6b 5454514d 72452020     1...kop.MQTT  Er
   39b00:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   39b10:	20646574 62206f74 656b6f72 000a0d72     ted to broker...
   39b20:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   39b30:	7262206f 72656b6f 00000a0d 6e6e6f43     o broker....Conn
   39b40:	20746365 6c696166 206f7420 76726573     ect fail to serv
   39b50:	25287265 20212973 72746572 74692079     er(%s)! retry it
   39b60:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   39b70:	0000000a 5454514d 6e6f4320 7463656e     ....MQTT Connect
   39b80:	0a0d6465 00000000 5454514d 6f726220     ed......MQTT bro
   39b90:	2072656b 6c636564 20656e69 72756f79     ker decline your
   39ba0:	63636120 21737365 72726520 6320726f      access! error c
   39bb0:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   39bc0:	73696420 6e6e6f63 65746365 000a0d64      disconnected...
   39bd0:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   39be0:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   39bf0:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   39c00:	00000000 5454514d 67657220 65747369     ....MQTT registe
   39c10:	61632072 61626c6c 66206b63 656c6961     r callback faile
   39c20:	45202e64 726f7272 646f6320 73692065     d. Error code is
   39c30:	64252820 000a0d29 2264227b 74227b3a      (%d)...{"d":{"t
   39c40:	22706d65 7d64253a 0000007d 4941465b     emp":%d}}...[FAI
   39c50:	72205d4c 25207365 000a0d64 67616c46     L] res %d...Flag
   39c60:	78742e41 64612074 21646564 00000a0d     A.txt added!....
   39c70:	6c463a30 2e416761 00747874 6e6e6f43     0:FlagA.txt.Conn
   39c80:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   39c90:	72656b6f 000a0d21 6d69227b 3a227875     oker!...{"imux":
   39ca0:	202c6425 756d6922 203a2279 202c6425     %d, "imuy": %d, 
   39cb0:	756d6922 203a227a 007d6425 495f3150     "imuz": %d}.P1_I
   39cc0:	455f554d 31354553 30545f36 00000000     MU_ESE516_T0....
   39cd0:	6574227b 3a22706d 202c6425 6d756822     {"temp":%d, "hum
   39ce0:	25203a22 22202c64 22657270 6425203a     ": %d, "pre": %d
   39cf0:	7722202c 3a227261 2c642520 61672220     , "war": %d, "ga
   39d00:	203a2273 007d6425 43544157 474f4448     s": %d}.WATCHDOG
   39d10:	4e45535f 00524f53 00006425 00007d5d     _SENSOR.%d..]}..
   39d20:	00000a0d 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   39d30:	545f3631 00000030 4f525245 6e492052     16_T0...ERROR In
   39d40:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   39d50:	61746144 65757120 21736575 00000a0d     Data queues!....
   39d60:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   39d70:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   39d80:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   39d90:	6c6c6163 72726520 2021726f 73657228     call error! (res
   39da0:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   39db0:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   39dc0:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   39dd0:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   39de0:	30545f36 00000000 5454514d 6e657320     6_T0....MQTT sen
   39df0:	73252064 00000a0d 00018490 0001849c     d %s............
   39e00:	000184ae 00018504 00018524 706c6568     ........$...help
   39e10:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   39e20:	20737473 206c6c61 20656874 69676572     sts all the regi
   39e30:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   39e40:	000a0d0a 6f636e49 63657272 6f632074     ....Incorrect co
   39e50:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   39e60:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   39e70:	6f742022 65697620 20612077 7473696c     " to view a list
   39e80:	20666f20 69617661 6c62616c 6f632065      of available co
   39e90:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   39ea0:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   39eb0:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   39ec0:	6f742027 65697620 20612077 7473696c     ' to view a list
   39ed0:	20666f20 69617661 6c62616c 6f632065      of available co
   39ee0:	6e616d6d 0d2e7364 000a0d0a              mmands......

00039eec <xHelpCommand>:
   39eec:	00039e0c 00039e14 0001a23d 00000000     ........=.......
   39efc:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   39f0c:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   39f1c:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   39f2c:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   39f3c:	78656e55 74636570 61206465 6d756772     Unexpected argum
   39f4c:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   39f5c:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   39f6c:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   39f7c:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   39f8c:	2073656c 6e69202d 61657263 54206573     les - increase T
   39f9c:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   39fac:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   39fbc:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   39fcc:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   39fdc:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   39fec:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   39ffc:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a00c:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   3a01c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a02c:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   3a03c:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   3a04c:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   3a05c:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   3a06c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a07c:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   3a08c:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   3a09c:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a0ac:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   3a0bc:	73656c64 69202d20 6572636e 20657361     dles - increase 
   3a0cc:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   3a0dc:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   3a0ec:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   3a0fc:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   3a10c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a11c:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   3a12c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   3a13c:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   3a14c:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   3a15c:	202d2073 72636e69 65736165 43525420     s - increase TRC
   3a16c:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   3a17c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   3a18c:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   3a19c:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   3a1ac:	646e6168 2073656c 6e69202d 61657263     handles - increa
   3a1bc:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   3a1cc:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   3a1dc:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   3a1ec:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   3a1fc:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   3a20c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a21c:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   3a22c:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   3a23c:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   3a24c:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   3a25c:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   3a26c:	63746365 7373616c 00000021 0001a962     ectclass!...b...
   3a27c:	0001a95a 0001a95e 0001a952 0001a956     Z...^...R...V...
   3a28c:	0001a966 0001a96a 0001a96e 0001a972     f...j...n...r...
   3a29c:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a2ac:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a2bc:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   3a2cc:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   3a2dc:	00216461 61747328 70757472 00000029     ad!.(startup)...
   3a2ec:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a2fc:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a30c:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   3a31c:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   3a32c:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   3a33c:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a34c:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   3a35c:	61762064 2065756c 20726f66 646e6168     d value for hand
   3a36c:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   3a37c:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a38c:	7265706f 73656974 616e203a 3d20656d     operties: name =
   3a39c:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   3a3ac:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   3a3bc:	64726f63 62207265 21797375 65655320     corder busy! See
   3a3cc:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   3a3dc:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a3ec:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a3fc:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a40c:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   3a41c:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a42c:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a43c:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a44c:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   3a45c:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   3a46c:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   3a47c:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   3a48c:	6f636572 72656472 73756220 53202179     recorder busy! S
   3a49c:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   3a4ac:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   3a4bc:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   3a4cc:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   3a4dc:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   3a4ec:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   3a4fc:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   3a50c:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   3a51c:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   3a52c:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   3a53c:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   3a54c:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   3a55c:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   3a56c:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   3a57c:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   3a58c:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   3a59c:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   3a5ac:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   3a5bc:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   3a5cc:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   3a5dc:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   3a5ec:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   3a5fc:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   3a60c:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3a61c:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   3a62c:	72657473 69727453 203a676e 6562616c     sterString: labe
   3a63c:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   3a64c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a65c:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   3a66c:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   3a67c:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   3a68c:	72656472 73756220 202d2079 68676968     rder busy - high
   3a69c:	69727020 7469726f 53492079 73752052      priority ISR us
   3a6ac:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   3a6bc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a6cc:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   3a6dc:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   3a6ec:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   3a6fc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a70c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a71c:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   3a72c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a73c:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   3a74c:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   3a75c:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   3a76c:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3a77c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a78c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a79c:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   3a7ac:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   3a7bc:	00000072 6f636552 72656472 73756220     r...Recorder bus
   3a7cc:	202d2079 68676968 69727020 7469726f     y - high priorit
   3a7dc:	53492079 73752052 20676e69 63737973     y ISR using sysc
   3a7ec:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   3a7fc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a80c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a81c:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   3a82c:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   3a83c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a84c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a85c:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   3a86c:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   3a87c:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   3a88c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a89c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a8ac:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   3a8bc:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   3a8cc:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   3a8dc:	72656472 73756220 202d2079 68676968     rder busy - high
   3a8ec:	69727020 7469726f 53492079 73752052      priority ISR us
   3a8fc:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   3a90c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a91c:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   3a92c:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   3a93c:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   3a94c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a95c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   3a96c:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   3a97c:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   3a98c:	76206469 65756c61 726f6620 74766520     id value for evt
   3a99c:	65646f63 00000000 6f636552 72656472     code....Recorder
   3a9ac:	73756220 202d2079 68676968 69727020      busy - high pri
   3a9bc:	7469726f 53492079 73752052 20676e69     ority ISR using 
   3a9cc:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   3a9dc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a9ec:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   3a9fc:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   3aa0c:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   3aa1c:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   3aa2c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3aa3c:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   3aa4c:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   3aa5c:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3aa6c:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3aa7c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aa8c:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   3aa9c:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   3aaac:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3aabc:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   3aacc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3aadc:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   3aaec:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   3aafc:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   3ab0c:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   3ab1c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ab2c:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   3ab3c:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   3ab4c:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   3ab5c:	6c617620 66206575 6820726f 6c646e61      value for handl
   3ab6c:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   3ab7c:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   3ab8c:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   3ab9c:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   3abac:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   3abbc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3abcc:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   3abdc:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   3abec:	76206469 65756c61 726f6620 00646920     id value for id.
   3abfc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ac0c:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   3ac1c:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   3ac2c:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3ac3c:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3ac4c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ac5c:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   3ac6c:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   3ac7c:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   3ac8c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ac9c:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   3acac:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3acbc:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3accc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3acdc:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   3acec:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3acfc:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3ad0c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ad1c:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   3ad2c:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3ad3c:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3ad4c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ad5c:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   3ad6c:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3ad7c:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3ad8c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ad9c:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   3adac:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   3adbc:	76206469 65756c61 726f6620 6e616820     id value for han
   3adcc:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   3addc:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   3adec:	69206f74 7865646e 74756f20 65646973     to index outside
   3adfc:	65766520 6220746e 65666675 00002172      event buffer!..
   3ae0c:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3ae1c:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3ae2c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3ae3c:	6a626f20 63746365 7373616c 00000000      objectclass....
   3ae4c:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3ae5c:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3ae6c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3ae7c:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   3ae8c:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   3ae9c:	2070756b 68746977 766e6920 64696c61     kup with invalid
   3aeac:	6a626f20 20746365 646e6168 6f20656c      object handle o
   3aebc:	626f2072 7463656a 616c6320 00217373     r object class!.
   3aecc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3aedc:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   3aeec:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   3aefc:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   3af0c:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   3af1c:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   3af2c:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   3af3c:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   3af4c:	626f2072 7463656a 73616c63 00000073     r objectclass...
   3af5c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3af6c:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   3af7c:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   3af8c:	756c6176 6f662065 61682072 656c646e     value for handle
   3af9c:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   3afac:	20656572 65726f6d 6e616820 73656c64     ree more handles
   3afbc:	61687420 6c61206e 61636f6c 21646574      than allocated!
   3afcc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3afdc:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   3afec:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   3affc:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   3b00c:	656a626f 63207463 7373616c 206e6920     object class in 
   3b01c:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   3b02c:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   3b03c:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   3b04c:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   3b05c:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   3b06c:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   3b07c:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   3b08c:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3b09c:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   3b0ac:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   3b0bc:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   3b0cc:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   3b0dc:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   3b0ec:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b0fc:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   3b10c:	696c6176 61762064 2065756c 20726f66     valid value for 
   3b11c:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   3b12c:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   3b13c:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   3b14c:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   3b15c:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   3b16c:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b17c:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   3b18c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b19c:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   3b1ac:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   3b1bc:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   3b1cc:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   3b1dc:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   3b1ec:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   3b1fc:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   3b20c:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   3b21c:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b22c:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   3b23c:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   3b24c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   3b25c:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   3b26c:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   3b27c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3b28c:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   3b29c:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   3b2ac:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   3b2bc:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b2cc:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   3b2dc:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   3b2ec:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b2fc:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   3b30c:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   3b31c:	00000000 20726d54 00637653 0001f9f8     ....Tmr Svc.....
   3b32c:	0001f9f8 0001f9f8 0001fa86 0001fa50     ............P...
   3b33c:	0001fa7a 0001f9f8 0001f9f8 0001fa86     z...............
   3b34c:	0001fa50                                P...

0003b350 <sd_mmc_trans_units>:
   3b350:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0003b36c <sd_trans_multipliers>:
   3b36c:	00000000 0000000a 0000000c 0000000d     ................
   3b37c:	0000000f 00000014 00000019 0000001e     ................
   3b38c:	00000023 00000028 0000002d 00000032     #...(...-...2...
   3b39c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0003b3ac <mmc_trans_multipliers>:
   3b3ac:	00000000 0000000a 0000000c 0000000d     ................
   3b3bc:	0000000f 00000014 0000001a 0000001e     ................
   3b3cc:	00000023 00000028 0000002d 00000034     #...(...-...4...
   3b3dc:	00000037 0000003c 00000046 00000050     7...<...F...P...
   3b3ec:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b3fc:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   3b40c:	6320746c 000a646d 0000000d              lt cmd......

0003b418 <__FUNCTION__.17031>:
   3b418:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   3b428:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   3b438:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   3b448:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3b458:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   3b468:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   3b478:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   3b488:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   3b498:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   3b4a8:	66696828 64612029 73657264 75622073     (hif) address bu
   3b4b8:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   3b4c8:	70757272 20646574 6b636170 53207465     rrupted packet S
   3b4d8:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   3b4e8:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   3b4f8:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   3b508:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   3b518:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   3b528:	63207465 626c6c61 206b6361 6e207369     et callback is n
   3b538:	7220746f 73696765 65726574 00000a64     ot registered...
   3b548:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   3b558:	20746f6e 69676572 72657473 000a6465     not registered..
   3b568:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   3b578:	6e207369 7220746f 73696765 65726574     is not registere
   3b588:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   3b598:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   3b5a8:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   3b5b8:	696c6176 72672064 2070756f 000a4449     valid group ID..
   3b5c8:	66696828 6f682029 61207473 64207070     (hif) host app d
   3b5d8:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   3b5e8:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   3b5f8:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   3b608:	66696828 61462029 2065736c 65746e69     (hif) False inte
   3b618:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   3b628:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   3b638:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   3b648:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   3b658:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   3b668:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   3b678:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   3b688:	696c6176 72612064 656d7567 000a746e     valid argument..
   3b698:	20505041 75716552 65747365 69532064     APP Requested Si
   3b6a8:	6920657a 616c2073 72656772 61687420     ze is larger tha
   3b6b8:	6874206e 65722065 65766963 75622064     n the recived bu
   3b6c8:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3b6d8:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3b6e8:	65747365 64412064 73657264 65622073     ested Address be
   3b6f8:	646e6f79 65687420 63657220 64657669     yond the recived
   3b708:	66756220 20726566 72646461 20737365      buffer address 
   3b718:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   3b728:	6425203f 0000000a 00023b24 00023af4     ? %d....$;...:..
   3b738:	00023aec 00023b04 00023afc 00023b1c     .:...;...:...;..
   3b748:	00023b0c 00023b14                       .;...;..

0003b750 <__FUNCTION__.17899>:
   3b750:	5f666968 646e6573 00000000              hif_send....

0003b75c <__FUNCTION__.17909>:
   3b75c:	5f666968 00727369                       hif_isr.

0003b764 <__FUNCTION__.17918>:
   3b764:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0003b774 <__FUNCTION__.17930>:
   3b774:	5f666968 65636572 00657669              hif_receive.

0003b780 <__FUNCTION__.17946>:
   3b780:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   3b790:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   3b7a0:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   3b7b0:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   3b7c0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b7d0:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   3b7e0:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   3b7f0:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   3b800:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   3b810:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   3b820:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   3b830:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   3b840:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   3b850:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   3b860:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   3b870:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   3b880:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   3b890:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   3b8a0:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   3b8b0:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   3b8c0:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   3b8d0:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   3b8e0:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   3b8f0:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   3b900:	73747365 72657020 61637320 6c73206e     ests per scan sl
   3b910:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   3b920:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   3b930:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   3b940:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   3b950:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   3b960:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   3b970:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   3b980:	6e694d20 69726420 20726576 20726576      Min driver ver 
   3b990:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   3b9a0:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   3b9b0:	0000000a 303a3831 35333a39 00000000     ....18:09:35....
   3b9c0:	2079614d 32203220 00333230 76697244     May  2 2023.Driv
   3b9d0:	62207265 746c6975 20746120 25097325     er built at %s.%
   3b9e0:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   3b9f0:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   3ba00:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   3ba10:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   3ba20:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   3ba30:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   3ba40:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   3ba50:	2079656b 65646e69 64252078 0000000a     key index %d....
   3ba60:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   3ba70:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   3ba80:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   3ba90:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   3baa0:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   3bab0:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   3bac0:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   3bad0:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   3bae0:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   3baf0:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   3bb00:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   3bb10:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   3bb20:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   3bb30:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   3bb40:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   3bb50:	66754220 0a726566 00000000               Buffer.....

0003bb5c <__FUNCTION__.17881>:
   3bb5c:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0003bb68 <__FUNCTION__.17910>:
   3bb68:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0003bb78 <__FUNCTION__.17941>:
   3bb78:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   3bb88:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   3bb98:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   3bba8:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   3bbb8:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3bbc8:	2070756b 20656874 70696863 0000000a     kup the chip....
   3bbd8:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3bbe8:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3bbf8:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3bc08:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003bc18 <__FUNCTION__.17738>:
   3bc18:	70696863 6b61775f 00000065              chip_wake...

0003bc24 <__FUNCTION__.17787>:
   3bc24:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   3bc34:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   3bc44:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   3bc54:	6e69206c 62207469 000a7375 0000000d     l init bus......
   3bc64:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   3bc74:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   3bc84:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   3bc94:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   3bca4:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   3bcb4:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   3bcc4:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   3bcd4:	69642068 6c626173 61662065 000a6c69     h disable fail..
   3bce4:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   3bcf4:	696e6920 75622074 00000a73               init bus...

0003bd00 <__FUNCTION__.17785>:
   3bd00:	645f6d6e 695f7672 0074696e              nm_drv_init.

0003bd0c <__FUNCTION__.17792>:
   3bd0c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0003bd1c <crc7_syndrome_table>:
   3bd1c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   3bd2c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   3bd3c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   3bd4c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   3bd5c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   3bd6c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   3bd7c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   3bd8c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   3bd9c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   3bdac:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   3bdbc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   3bdcc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   3bddc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   3bdec:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   3bdfc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   3be0c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   3be1c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3be2c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   3be3c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   3be4c:	73756220 72726520 2e2e726f 00000a2e      bus error......
   3be5c:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3be6c:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   3be7c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3be8c:	656c6961 61642064 72206174 6f707365     ailed data respo
   3be9c:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   3beac:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   3bebc:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   3becc:	72206573 2c646165 73756220 72726520     se read, bus err
   3bedc:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   3beec:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   3befc:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   3bf0c:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   3bf1c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   3bf2c:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   3bf3c:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   3bf4c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3bf5c:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   3bf6c:	70736572 65736e6f 61747320 28206574     response state (
   3bf7c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3bf8c:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   3bf9c:	20646165 70736572 65736e6f 30252820     ead response (%0
   3bfac:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   3bfbc:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3bfcc:	6877206e 72206e65 69646165 6420676e     n when reading d
   3bfdc:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   3bfec:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3bffc:	6877206e 72206e65 69646165 6320676e     n when reading c
   3c00c:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   3c01c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c02c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   3c03c:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   3c04c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   3c05c:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   3c06c:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   3c07c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c08c:	656c6961 61642064 72206174 6f707365     ailed data respo
   3c09c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   3c0ac:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   3c0bc:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   3c0cc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   3c0dc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3c0ec:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c0fc:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   3c10c:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   3c11c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   3c12c:	61642064 62206174 6b636f6c 69727720     d data block wri
   3c13c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   3c14c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c15c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   3c16c:	63726320 69727720 202c6574 20737562      crc write, bus 
   3c17c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   3c18c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c19c:	77202c64 65746972 67657220 30252820     d, write reg (%0
   3c1ac:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   3c1bc:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   3c1cc:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   3c1dc:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   3c1ec:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   3c1fc:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c20c:	656c6961 6c622064 206b636f 61746164     ailed block data
   3c21c:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   3c22c:	6e612074 65722064 20797274 25206425     t and retry %d %
   3c23c:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   3c24c:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   3c25c:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   3c26c:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   3c27c:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   3c28c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c29c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   3c2ac:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   3c2bc:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c2cc:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c2dc:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   3c2ec:	6572202c 69727974 7720676e 20687469     , retyring with 
   3c2fc:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   3c30c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c31c:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c32c:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   3c33c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c34c:	6e726574 77206c61 65746972 6f727020     ternal write pro
   3c35c:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   3c36c:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   3c37c:	20646d63 64616572 69686320 64692070     cmd read chip id
   3c38c:	0a2e2e2e 00000000 0002574c 0002574c     ........LW..LW..
   3c39c:	000257dc 000256a0 000256e6 00025708     .W...V...V...W..
   3c3ac:	0002578e 0002578e 00025848 00025674     .W...W..HX..tV..
   3c3bc:	000258a2 000258a2 000258a2 000258a2     .X...X...X...X..
   3c3cc:	0002572a 00025cac 00025cac 00025d34     *W...\...\..4]..
   3c3dc:	00025c10 00025c52 00025c70 00025cea     .\..R\..p\...\..
   3c3ec:	00025cea 00025d96 00025be8 00025de6     .\...]...[...]..
   3c3fc:	00025de6 00025de6 00025de6 00025c8e     .]...]...]...\..

0003c40c <__FUNCTION__.17060>:
   3c40c:	5f697073 00646d63                       spi_cmd.

0003c414 <__FUNCTION__.17067>:
   3c414:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0003c424 <__FUNCTION__.17076>:
   3c424:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0003c430 <__FUNCTION__.17109>:
   3c430:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   3c440:	00000000                                ....

0003c444 <__FUNCTION__.17155>:
   3c444:	5f697073 61746164 6972775f 00006574     spi_data_write..

0003c454 <__FUNCTION__.17167>:
   3c454:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0003c464 <__FUNCTION__.17178>:
   3c464:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0003c474 <__FUNCTION__.17190>:
   3c474:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0003c484 <__FUNCTION__.17201>:
   3c484:	735f6d6e 725f6970 00646165              nm_spi_read.

0003c490 <__FUNCTION__.17222>:
   3c490:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   3c4a0:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   3c4b0:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   3c4c0:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   3c4d0:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   3c4e0:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   3c4f0:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3c500:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   3c510:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   3c520:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   3c530:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   3c540:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   3c550:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   3c560:	22302074 00000000                       t 0"....

0003c568 <lun_desc>:
   3c568:	0002141d 00021475 000214c1 0002150d     ....u...........
   3c578:	0002153d 000215c1 00021651 0003c550     =.......Q...P...
   3c588:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   3c598:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   3c5a8:	0002b726 0002b7a0 0002b7a0 0002b744     &...........D...
   3c5b8:	0002b73e 0002b74a 0002b72c 0002b750     >...J...,...P...
   3c5c8:	0002b786 0002b988 0002b9d8 0002b9d8     ................
   3c5d8:	0002b9d4 0002b97a 0002b99a 0002b96a     ....z.......j...
   3c5e8:	0002b9ac 0002b9be 0002ba26 0002ba54     ........&...T...
   3c5f8:	0002ba54 0002ba50 0002ba20 0002ba2c     T...P... ...,...
   3c608:	0002ba1a 0002ba32 0002ba38              ....2...8...

0003c614 <tcc_modules>:
   3c614:	42002000 42002400 42002800              . .B.$.B.(.B

0003c620 <_tcc_gclk_ids>:
   3c620:	001b1a1a                                ....

0003c624 <_tcc_apbcmasks>:
   3c624:	00000100 00000200 00000400              ............

0003c630 <_tcc_maxs>:
   3c630:	00ffffff 00ffffff 0000ffff              ............

0003c63c <_tcc_cc_nums>:
   3c63c:	00020204                                ....

0003c640 <_tcc_ow_nums>:
   3c640:	00020408                                ....

0003c644 <_tcc_intflag>:
   3c644:	00000001 00000002 00000004 00000008     ................
   3c654:	00001000 00002000 00004000 00008000     ..... ...@......
   3c664:	00010000 00020000 00040000 00080000     ................

0003c674 <LfnOfs>:
   3c674:	07050301 12100e09 1c181614 0000001e     ................
   3c684:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   3c694:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   3c6a4:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   3c6b4:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   3c6c4:	20205441 00202020                       AT     .

0003c6cc <excvt.4558>:
   3c6cc:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   3c6dc:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   3c6ec:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   3c6fc:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   3c70c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   3c71c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   3c72c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   3c73c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0003c74c <Tbl>:
   3c74c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   3c75c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   3c76c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   3c77c:	00d600ff 00f800dc 00d800a3 019200d7     ................
   3c78c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   3c79c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   3c7ac:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   3c7bc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   3c7cc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   3c7dc:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   3c7ec:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   3c7fc:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   3c80c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   3c81c:	00da00de 00d900db 00dd00fd 00b400af     ................
   3c82c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   3c83c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0003c84c <tbl_lower.4308>:
   3c84c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   3c85c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   3c86c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   3c87c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   3c88c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   3c89c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   3c8ac:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   3c8bc:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   3c8cc:	01050103 01090107 010d010b 0111010f     ................
   3c8dc:	01150113 01190117 011d011b 0121011f     ..............!.
   3c8ec:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   3c8fc:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   3c90c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   3c91c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   3c92c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   3c93c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   3c94c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   3c95c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   3c96c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   3c97c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   3c98c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   3c99c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   3c9ac:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   3c9bc:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   3c9cc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   3c9dc:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   3c9ec:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   3c9fc:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   3ca0c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   3ca1c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0003ca2c <tbl_upper.4309>:
   3ca2c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   3ca3c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   3ca4c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   3ca5c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   3ca6c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   3ca7c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   3ca8c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   3ca9c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   3caac:	01040102 01080106 010c010a 0110010e     ................
   3cabc:	01140112 01180116 011c011a 0120011e     .............. .
   3cacc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   3cadc:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   3caec:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   3cafc:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   3cb0c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   3cb1c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   3cb2c:	03940393 03960395 03980397 039a0399     ................
   3cb3c:	039c039b 039e039d 03a0039f 03a303a1     ................
   3cb4c:	03a503a4 03a703a6 03a903a8 041003aa     ................
   3cb5c:	04120411 04140413 04160415 04180417     ................
   3cb6c:	041a0419 041c041b 041e041d 0420041f     .............. .
   3cb7c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   3cb8c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   3cb9c:	04030402 04050404 04070406 04090408     ................
   3cbac:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   3cbbc:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   3cbcc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   3cbdc:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   3cbec:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   3cbfc:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   3cc0c:	00030d92 00030d92 00030d92 00030c20     ............ ...
   3cc1c:	00030d92 00030d0a 00030d92 00030d92     ................
   3cc2c:	00030d92 00030d92 00030d92 00030d92     ................
   3cc3c:	00030d92 00030d84 4354514d 00000000     ........MQTC....
   3cc4c:	00000004 00000000 00000000 00000000     ................
   3cc5c:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3cc9c:	4354514d 00000000 00000004 00000000     MQTC............
	...
   3ccb4:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3ccf4:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3cd04:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3cd14:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3cd24:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3cd34:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3cd44:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3cd54:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3cd64:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3cd74:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3cd84:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3cd94:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   3cda4:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   3cdb4:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   3cdc4:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   3cdd4:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   3cde4:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   3cdf4:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3ce04:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3ce14:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3ce24:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3ce34:	50545448 0000002f 00000d31 00032e86     HTTP/...1.......
   3ce44:	00032e80 00032e7a 00032e74 00032e8c     ....z...t.......
   3ce54:	00032e6e 00032e8c 00032e68 00032e62     n.......h...b...
   3ce64:	00032e8c 00032e5c 00032e5c 00032e56     ....\...\...V...
   3ce74:	00032e50 00032e4a 42002000 42002400     P...J.... .B.$.B
   3ce84:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   3ce94:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   3cea4:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   3ceb4:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   3cec4:	6f727245 6e692072 61697469 697a696c     Error initializi
   3ced4:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   3cee4:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   3cef4:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3cf04:	6e6e6143 6620746f 20646e69 21554d49     Cannot find IMU!
   3cf14:	00000a0d 20554d49 6e756f66 0a0d2164     ....IMU found!..
   3cf24:	00000000 20554d49 74696e69 696c6169     ....IMU initiali
   3cf34:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
   3cf44:	6e692074 61697469 657a696c 554d4920     t initialize IMU
   3cf54:	00000a0d 70616548 66656220 2065726f     ....Heap before 
   3cf64:	72617473 676e6974 73617420 203a736b     starting tasks: 
   3cf74:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
   3cf84:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
   3cf94:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3cfa4:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3cfb4:	70616548 74666120 73207265 74726174     Heap after start
   3cfc4:	20676e69 3a494c43 0d642520 0000000a     ing CLI: %d.....
   3cfd4:	49464957 5341545f 0000004b 3a525245     WIFI_TASK...ERR:
   3cfe4:	46495720 61742049 63206b73 646c756f      WIFI task could
   3cff4:	746f6e20 20656220 74696e69 696c6169      not be initiali
   3d004:	2164657a 00000a0d 70616548 74666120     zed!....Heap aft
   3d014:	73207265 74726174 20676e69 49464957     er starting WIFI
   3d024:	6425203a 00000a0d 54204955 006b7361     : %d....UI Task.
   3d034:	3a525245 20495520 6b736174 756f6320     ERR: UI task cou
   3d044:	6e20646c 6220746f 6e692065 61697469     ld not be initia
   3d054:	657a696c 0a0d2164 00000000 70616548     lized!......Heap
   3d064:	74666120 73207265 74726174 20676e69      after starting 
   3d074:	54204955 3a6b7361 0d642520 0000000a     UI Task: %d.....
   3d084:	746e6f43 206c6f72 6b736154 00000000     Control Task....
   3d094:	3a525245 6e6f4320 6c6f7274 73617420     ERR: Control tas
   3d0a4:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3d0b4:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3d0c4:	70616548 74666120 73207265 74726174     Heap after start
   3d0d4:	20676e69 746e6f43 206c6f72 6b736154     ing Control Task
   3d0e4:	6425203a 00000a0d 6f727245 6e6f2072     : %d....Error on
   3d0f4:	6d656d20 2079726f 6f6c6c61 69746163      memory allocati
   3d104:	6f206e6f 5246206e 54524545 0d21534f     on on FREERTOS!.
   3d114:	0000000a 6f727245 6e6f2072 61747320     ....Error on sta
   3d124:	6f206b63 66726576 20776f6c 46206e6f     ck overflow on F
   3d134:	52454552 21534f54 00000a0d 000351e4     REERTOS!.....Q..
   3d144:	000351b4 000351c6 00035108 000351c6     .Q...Q...Q...Q..
   3d154:	000351aa 000351c6 00035108 000351b4     .Q...Q...Q...Q..
   3d164:	000351b4 000351aa 00035108 00035110     .Q...Q...Q...Q..
   3d174:	00035110 00035110 000351cc 000351b4     .Q...Q...Q...Q..
   3d184:	000351b4 00035188 0003526c 00035188     .Q...Q..lR...Q..
   3d194:	000351aa 00035188 0003526c 000351b4     .Q...Q..lR...Q..
   3d1a4:	000351b4 000351aa 0003526c 00035110     .Q...Q..lR...Q..
   3d1b4:	00035110 00035110 00035276 00035564     .Q...Q..vR..dU..
   3d1c4:	000354b4 000354b4 000354b2 00035556     .T...T...T..VU..
   3d1d4:	00035556 0003554c 000354b2 00035556     VU..LU...T..VU..
   3d1e4:	0003554c 00035556 000354b2 0003555c     LU..VU...T..\U..
   3d1f4:	0003555c 0003555c 000355ec 00036334     \U..\U...U..4c..
   3d204:	00036316 000362d0 000361ee 000362d0     .c...b...a...b..
   3d214:	00036308 000362d0 000361ee 00036316     .c...b...a...c..
   3d224:	00036316 00036308 000361ee 000361e6     .c...c...a...a..
   3d234:	000361e6 000361e6 0003654c 00036994     .a...a..Le...i..
   3d244:	00036854 00036854 00036850 0003696c     Th..Th..Ph..li..
   3d254:	0003696c 0003695e 00036850 0003696c     li..^i..Ph..li..
   3d264:	0003695e 0003696c 00036850 00036974     ^i..li..Ph..ti..
   3d274:	00036974 00036974 00036b78              ti..ti..xk..

0003d280 <_global_impure_ptr>:
   3d280:	20000130                                0.. 

0003d284 <__sf_fake_stderr>:
	...

0003d2a4 <__sf_fake_stdin>:
	...

0003d2c4 <__sf_fake_stdout>:
	...
   3d2e4:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   3d2f4:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   3d304:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   3d314:	37363534 62613938 66656463 20200000              456789abcdef.

0003d321 <_ctype_>:
   3d321:	20202000 20202020 28282020 20282828     .         ((((( 
   3d331:	20202020 20202020 20202020 20202020                     
   3d341:	10108820 10101010 10101010 10101010      ...............
   3d351:	04040410 04040404 10040404 10101010     ................
   3d361:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3d371:	01010101 01010101 01010101 10101010     ................
   3d381:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3d391:	02020202 02020202 02020202 10101010     ................
   3d3a1:	00000020 00000000 00000000 00000000      ...............
	...

0003d424 <_init>:
   3d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d426:	46c0      	nop			; (mov r8, r8)
   3d428:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d42a:	bc08      	pop	{r3}
   3d42c:	469e      	mov	lr, r3
   3d42e:	4770      	bx	lr

0003d430 <__init_array_start>:
   3d430:	000120dd 	.word	0x000120dd

0003d434 <_fini>:
   3d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d436:	46c0      	nop			; (mov r8, r8)
   3d438:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d43a:	bc08      	pop	{r3}
   3d43c:	469e      	mov	lr, r3
   3d43e:	4770      	bx	lr

0003d440 <__fini_array_start>:
   3d440:	000120b5 	.word	0x000120b5
